void sub_1012016C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_1012016DC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 400), "count");
}

id sub_1012016E4(uint64_t a1)
{
  double v2;

  v2 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56));
  return objc_msgSend(*(id *)(a1 + 400), "pruneSecondaryDataOlderThan:", v2 - (*(double (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1));
}

void sub_101201734(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 400), "eraseAllData");
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 384) + 64))(*(_QWORD *)(a1 + 384));
  sub_1002A21DC(a1 + 664);
}

void sub_101201770(uint64_t a1)
{
  sub_1012017C0(a1);
  operator delete();
}

void sub_101201794(id a1)
{
  qword_1022A0208 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

uint64_t sub_1012017C0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)a1 = off_1021A9000;
  v2 = *(void **)(a1 + 1200);
  if (v2)
  {
    *(_QWORD *)(a1 + 1208) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 1080);
  if (v3)
  {
    *(_QWORD *)(a1 + 1088) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 1000);
  if (v4)
  {
    *(_QWORD *)(a1 + 1008) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 920);
  if (v5)
  {
    *(_QWORD *)(a1 + 928) = v5;
    operator delete(v5);
  }
  if (*(char *)(a1 + 783) < 0)
    operator delete(*(void **)(a1 + 760));
  sub_1002A1C94(a1 + 664);
  if (*(char *)(a1 + 439) < 0)
    operator delete(*(void **)(a1 + 416));
  sub_100261F44(a1 + 384);
  sub_100261F44(a1 + 368);
  sub_100261F44(a1 + 352);
  return sub_100429668(a1);
}

uint64_t sub_10120186C()
{
  return sub_1011E780C((uint64_t)&xmmword_10230D4E0, 1, 2, 2, 0, 0.0, 43200.0, 43200.0);
}

uint64_t sub_1012018A8(uint64_t a1, _BYTE *a2, const std::string *a3, const std::string *a4)
{
  _BYTE *v6;
  std::string *v8;
  char v9;
  size_t v10;
  const void *v11;
  size_t v12;
  size_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  int v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  NSObject *v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  NSObject *v31;
  int v32;
  int v33;
  NSObject *v34;
  int v35;
  const std::string *v36;
  const std::string *v37;
  int v39;
  uint64_t v40;
  const char *v41;
  uint8_t *v42;
  int v43;
  int v44;
  const char *v45;
  uint8_t *v46;
  uint64_t v47;
  int v48;
  int v49;
  __int16 v50;
  uint64_t v51;
  uint8_t buf[8];
  _BYTE v53[10];
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  const std::string *v59;
  __int16 v60;
  const std::string *v61;

  v6 = a2;
  v8 = (std::string *)(a1 + 56);
  v9 = a2[23];
  if (*(char *)(a1 + 79) < 0)
  {
    v11 = *(const void **)(a1 + 56);
    v10 = *(_QWORD *)(a1 + 64);
  }
  else
  {
    v10 = *(unsigned __int8 *)(a1 + 79);
    v11 = (const void *)(a1 + 56);
  }
  if (v9 >= 0)
    v12 = a2[23];
  else
    v12 = *((_QWORD *)a2 + 1);
  if (v9 < 0)
    a2 = *(_BYTE **)a2;
  if (v12 >= v10)
    v13 = v10;
  else
    v13 = v12;
  v14 = !memcmp(v11, a2, v13) && v12 == v10;
  if (v14
    && *(unsigned __int8 *)(a1 + 80) == v6[24]
    && *(_DWORD *)(a1 + 84) == *((_DWORD *)v6 + 7)
    && *(double *)(a1 + 88) == *((double *)v6 + 7)
    && *(unsigned __int8 *)(a1 + 96) == v6[64]
    && *(double *)(a1 + 104) == *((double *)v6 + 9)
    && *(double *)(a1 + 112) == *((double *)v6 + 10)
    && !sub_100A52350((const void **)(a1 + 120), v6 + 88)
    && (LODWORD(v15) = *((_DWORD *)v6 + 34), *(double *)(a1 + 168) == (double)v15))
  {
    v16 = sub_101201F38((unsigned __int8 **)(a1 + 144), (uint64_t)(v6 + 112));
  }
  else
  {
    v16 = 1;
  }
  std::string::operator=((std::string *)(a1 + 8), a3);
  std::string::operator=((std::string *)(a1 + 32), a4);
  std::string::operator=(v8, (const std::string *)v6);
  v17 = v6[24];
  *(_QWORD *)(a1 + 88) = *((_QWORD *)v6 + 7);
  *(_BYTE *)(a1 + 80) = v17;
  *(_DWORD *)(a1 + 84) = *((_DWORD *)v6 + 7);
  *(_BYTE *)(a1 + 96) = v6[64];
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(v6 + 72);
  std::string::operator=((std::string *)(a1 + 120), (const std::string *)(v6 + 88));
  if ((_BYTE *)(a1 + 144) != v6 + 112)
    sub_101892BBC(a1 + 144, *((std::string **)v6 + 14), *((__int128 **)v6 + 15), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v6 + 15) - *((_QWORD *)v6 + 14)) >> 3));
  LODWORD(v18) = *((_DWORD *)v6 + 34);
  *(double *)(a1 + 168) = (double)v18;
  sub_1001E4804(buf);
  v19 = sub_1001FD98C(*(uint64_t *)buf, "AMLFirstFixDelay", (void *)(a1 + 88));
  v20 = *(std::__shared_weak_count **)v53;
  if (*(_QWORD *)v53)
  {
    v21 = (unint64_t *)(*(_QWORD *)v53 + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v19)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021A91C8);
    v23 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v24 = *(_DWORD *)a1;
      v25 = *(_QWORD *)(a1 + 88);
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)&buf[4] = v24;
      *(_WORD *)v53 = 2050;
      *(_QWORD *)&v53[2] = v25;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#Warning #AMLCfg,inst,%{public}d,overriding first fix delay to %{public}f", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021A91C8);
      v39 = *(_DWORD *)a1;
      v40 = *(_QWORD *)(a1 + 88);
      v48 = 67240448;
      v49 = v39;
      v50 = 2050;
      v51 = v40;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #AMLCfg,inst,%{public}d,overriding first fix delay to %{public}f", &v48, 18);
      v42 = (uint8_t *)v41;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyAML::SimConfig::updateEmergencySettings(const AugmentedAction::AML &, const std::string &, const std::string &)", "%s\n", v41);
      if (v42 != buf)
        free(v42);
    }
  }
  sub_1001E4804(buf);
  v26 = sub_1001E4874(*(uint64_t *)buf, "AMLMultipleSmsEnabled", (BOOL *)(a1 + 96));
  v27 = v26;
  v28 = *(std::__shared_weak_count **)v53;
  if (!*(_QWORD *)v53)
    goto LABEL_43;
  v29 = (unint64_t *)(*(_QWORD *)v53 + 8);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    if (!v27)
      goto LABEL_49;
  }
  else
  {
LABEL_43:
    if (!v26)
      goto LABEL_49;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021A91C8);
  v31 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v32 = *(_DWORD *)a1;
    v33 = *(unsigned __int8 *)(a1 + 96);
    *(_DWORD *)buf = 67240448;
    *(_DWORD *)&buf[4] = v32;
    *(_WORD *)v53 = 1026;
    *(_DWORD *)&v53[2] = v33;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#Warning #AMLCfg,inst,%{public}d,overriding enablement of multiple SMS to %{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021A91C8);
    v43 = *(_DWORD *)a1;
    v44 = *(unsigned __int8 *)(a1 + 96);
    v48 = 67240448;
    v49 = v43;
    v50 = 1026;
    LODWORD(v51) = v44;
    LODWORD(v47) = 14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #AMLCfg,inst,%{public}d,overriding enablement of multiple SMS to %{public}d", &v48, v47);
    v46 = (uint8_t *)v45;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyAML::SimConfig::updateEmergencySettings(const AugmentedAction::AML &, const std::string &, const std::string &)", "%s\n", v45);
    if (v46 != buf)
      free(v46);
  }
LABEL_49:
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021A91C8);
  v34 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    v35 = *(_DWORD *)a1;
    if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v36 = a3;
    else
      v36 = (const std::string *)a3->__r_.__value_.__r.__words[0];
    if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v37 = a4;
    else
      v37 = (const std::string *)a4->__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 68290050;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v53 = 2082;
    *(_QWORD *)&v53[2] = "";
    v54 = 1026;
    v55 = v16;
    v56 = 1026;
    v57 = v35;
    v58 = 2082;
    v59 = v36;
    v60 = 2082;
    v61 = v37;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#AMLCfg updated CB info\", \"changed\":%{public}d, \"sim\":%{public}d, \"version\":%{public, location:escape_only}s, \"id\":%{public, location:escape_only}s}", buf, 0x32u);
  }
  sub_101201FB8((int *)a1);
  return v16;
}

void sub_101201F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101201F38(unsigned __int8 **a1, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  char v7;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(unsigned __int8 **)a2;
  if (v3 - *a1 == *(_QWORD *)(a2 + 8) - *(_QWORD *)a2)
  {
    if (v2 == v3)
    {
      v5 = 1;
    }
    else
    {
      do
      {
        v5 = sub_10025A4CC((uint64_t)&v7, v2, v4);
        if (!v5)
          break;
        v2 += 24;
        v4 += 24;
      }
      while (v2 != v3);
    }
  }
  else
  {
    v5 = 0;
  }
  return v5 ^ 1u;
}

void sub_101201FB8(int *a1)
{
  NSObject *v2;
  _QWORD *v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _DWORD v12[2];
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  _QWORD *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  int v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  _QWORD *v32;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021A91C8);
  v2 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v3 = a1 + 14;
    if (*((char *)a1 + 79) < 0)
      v3 = (_QWORD *)*v3;
    v4 = *a1;
    v5 = *((unsigned __int8 *)a1 + 80);
    v6 = a1[21];
    v7 = *((_QWORD *)a1 + 11);
    v8 = *((unsigned __int8 *)a1 + 96);
    v10 = *((_QWORD *)a1 + 13);
    v9 = *((_QWORD *)a1 + 14);
    v11 = a1 + 30;
    if (*((char *)a1 + 143) < 0)
      v11 = (_QWORD *)*v11;
    v12[0] = 68291331;
    v13 = 2082;
    v12[1] = 0;
    v14 = "";
    v15 = 1026;
    v16 = v4;
    v17 = 2081;
    v18 = v3;
    v19 = 1025;
    v20 = v5;
    v21 = 1025;
    v22 = v6;
    v23 = 2050;
    v24 = v7;
    v25 = 1026;
    v26 = v8;
    v27 = 2050;
    v28 = v10;
    v29 = 2050;
    v30 = v9;
    v31 = 2081;
    v32 = v11;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AMLCfg,logSettings\", \"sim\":%{public}d, \"smsAddress\":%{private, location:escape_only}s, \"binary\":%{private}d, \"port\":%{private}d, \"firstFixDelay\":\"%{public}f\", \"multipleSmsEnabled\":%{public}hhd, \"maxFixDelay\":\"%{public}f\", \"minFixDelay\":\"%{public}f\", \"sms over NAS Address\":%{private, location:escape_only}s}", (uint8_t *)v12, 0x5Cu);
  }
}

uint64_t sub_101202120(uint64_t a1)
{
  uint64_t v2;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  void *v17[2];
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  void *__p;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;

  *(_OWORD *)(a1 + 8) = 0u;
  v2 = a1 + 8;
  *(_OWORD *)(a1 + 24) = 0u;
  DWORD1(v4) = 0;
  LOBYTE(v4) = 0;
  *((_QWORD *)&v4 + 1) = 0x402E000000000000;
  LOBYTE(v5) = 1;
  *((_QWORD *)&v5 + 1) = 0x4072C00000000000;
  v15 = 0u;
  *(_OWORD *)v17 = 0uLL;
  v19 = v4;
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 40) = 1065353216;
  v9 = 0x4018000000000000;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v16 = 0;
  v20 = v5;
  v18 = 0;
  v21 = 0x4034000000000000;
  __p = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0x4018000000000000;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  sub_10120E630(a1 + 8, &v10, (uint64_t)&v10);
  v29 = (void **)&v25;
  sub_100259608(&v29);
  if (SHIBYTE(v24) < 0)
    operator delete(__p);
  if (SHIBYTE(v18) < 0)
    operator delete(v17[0]);
  if (SHIBYTE(v16) < 0)
    operator delete((void *)v15);
  if (SHIBYTE(v14) < 0)
    operator delete(v12);
  v29 = (void **)&v6;
  sub_100259608(&v29);
  if ((((unsigned __int128)0 >> 120) & 0x80000000) != 0)
    operator delete(0);
  if (sub_1001DC538())
  {
    DWORD1(v4) = 0;
    LOBYTE(v4) = 0;
    *((_QWORD *)&v4 + 1) = 0x402E000000000000;
    LOBYTE(v5) = 1;
    *((_QWORD *)&v5 + 1) = 0x4072C00000000000;
    v9 = 0x4018000000000000;
    v10 = 1;
    v11 = 1;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v16 = 0;
    v15 = 0u;
    *(_OWORD *)v17 = 0u;
    v19 = v4;
    v20 = v5;
    v18 = 0;
    v21 = 0x4034000000000000;
    __p = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0x4018000000000000;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    sub_10120E630(v2, &v10, (uint64_t)&v10);
    v29 = (void **)&v25;
    sub_100259608(&v29);
    if (SHIBYTE(v24) < 0)
      operator delete(__p);
    if (SHIBYTE(v18) < 0)
      operator delete(v17[0]);
    if (SHIBYTE(v16) < 0)
      operator delete((void *)v15);
    if (SHIBYTE(v14) < 0)
      operator delete(v12);
    v29 = (void **)&v6;
    sub_100259608(&v29);
    if ((((unsigned __int128)0 >> 120) & 0x80000000) != 0)
      operator delete(0);
  }
  return a1;
}

void sub_101202440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  sub_101202470((uint64_t)&a33);
  sub_1012024E8((uint64_t)&a11);
  sub_10120E548(v33);
  _Unwind_Resume(a1);
}

uint64_t sub_101202470(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 152);
  sub_100259608(&v3);
  if (*(char *)(a1 + 151) < 0)
    operator delete(*(void **)(a1 + 128));
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_1012024E8(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 144);
  sub_100259608(&v3);
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_101202560(uint64_t a1, int a2, _BYTE *a3, const std::string *a4, const std::string *a5)
{
  _QWORD *v9;
  uint64_t *v10;
  uint64_t result;
  NSObject *v12;
  _BOOL4 v13;
  const char *v14;
  uint8_t *v15;
  uint64_t v16;
  _DWORD v17[4];
  uint8_t buf[4];
  int v19;

  HIDWORD(v16) = a2;
  *(_DWORD *)buf = a2;
  v9 = (_QWORD *)(a1 + 8);
  if (sub_1001F8DEC((_QWORD *)(a1 + 8), (int *)buf))
  {
    v10 = sub_1001F8DEC(v9, (int *)&v16 + 1);
    if (!v10)
      sub_100263950("unordered_map::at: key not found");
    return sub_1012018A8((uint64_t)(v10 + 3), a3, a4, a5);
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021A91C8);
    v12 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      v19 = a2;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#AMLCfg ignoring emergency settings for unexpected inst %{public}d", buf, 8u);
    }
    v13 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v13)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021A91C8);
      v17[0] = 67240192;
      v17[1] = a2;
      LODWORD(v16) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#AMLCfg ignoring emergency settings for unexpected inst %{public}d", v17, v16);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLEmergencyAML::Config::updateEmergencySettings(const SimInstance, const AugmentedAction &, const std::string &, const std::string &)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
      return 0;
    }
  }
  return result;
}

BOOL sub_101202770(int *a1, int a2)
{
  NSObject *v4;
  int v5;
  _BOOL8 result;
  NSObject *v7;
  NSObject *v8;
  _BOOL4 v9;
  double v10;
  uint8_t *v11;
  uint8_t *v12;
  int v13;
  double v14;
  uint8_t *v15;
  const char *v16;
  uint8_t *v17;
  int v18;
  int v19;
  uint8_t buf[4];
  int v21;

  if (a2 == 255 || *a1 == a2)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021A91C8);
    v4 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      v5 = *a1;
      *(_DWORD *)buf = 67240192;
      v21 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#AMLCfg keeping previous active inst %{public}d", buf, 8u);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021A91C8);
    v13 = *a1;
    v18 = 67240192;
    v19 = v13;
    v14 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#AMLCfg keeping previous active inst %{public}d", &v18, 8);
    v12 = v15;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyAML::Config::updateEmergencySim(const SimInstance)", "%s\n", v14);
LABEL_27:
    if (v12 != buf)
      free(v12);
    return 0;
  }
  *(_DWORD *)buf = a2;
  if (sub_1001F8DEC((_QWORD *)a1 + 1, (int *)buf))
  {
    *a1 = a2;
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021A91C8);
    v7 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67240192;
      v21 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#AMLCfg active inst changed to %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021A91C8);
      v18 = 67240192;
      v19 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#AMLCfg active inst changed to %{public}d", &v18, 8);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyAML::Config::updateEmergencySim(const SimInstance)", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
    return 1;
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021A91C8);
    v8 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      v21 = a2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#AMLCfg ignoring unexpected inst %{public}d", buf, 8u);
    }
    v9 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v9)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021A91C8);
      v18 = 67240192;
      v19 = a2;
      v10 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#AMLCfg ignoring unexpected inst %{public}d", &v18, 8);
      v12 = v11;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLEmergencyAML::Config::updateEmergencySim(const SimInstance)", "%s\n", v10);
      goto LABEL_27;
    }
  }
  return result;
}

BOOL sub_101202BE0(int *a1)
{
  _QWORD *v2;
  NSObject *v3;
  int v4;
  uint64_t *v5;
  uint64_t v6;
  int v8;
  const char *v9;
  uint8_t *v10;
  void **v11;
  _DWORD v12[2];
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16[2];
  void *v17[4];
  __int128 v18;
  _BYTE v19[24];
  void *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[4];
  uint8_t buf[4];
  int v25;
  int v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  void *__p;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[186];

  v2 = a1 + 2;
  *(_DWORD *)buf = *a1;
  if (!sub_1001F8DEC((_QWORD *)a1 + 1, (int *)buf))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021A91C8);
    v3 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      v4 = *a1;
      *(_DWORD *)buf = 67240192;
      v25 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#AMLCfg unexpected inst %{public}d is active", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021A91C8);
      v8 = *a1;
      v12[0] = 67240192;
      v12[1] = v8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#AMLCfg unexpected inst %{public}d is active", v12, 8);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLEmergencyAML::Config::isEnabled()", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    DWORD1(v18) = 0;
    *(_OWORD *)v16 = 0u;
    memset(v17, 0, sizeof(v17));
    LOBYTE(v18) = 0;
    *((_QWORD *)&v18 + 1) = 0x402E000000000000;
    v19[0] = 1;
    *(_OWORD *)&v19[8] = xmmword_101BDBEB0;
    v30 = 0u;
    v32 = *(_OWORD *)&v17[1];
    v34 = v18;
    v12[0] = *a1;
    v23[3] = 0x4018000000000000;
    *(_DWORD *)buf = v12[0];
    v26 = v12[0];
    v27 = 0;
    v28 = 0;
    v14 = 0;
    v15 = 0;
    v13 = 0;
    v29 = 0;
    v31 = 0;
    v16[0] = 0;
    v16[1] = 0;
    memset(v17, 0, sizeof(v17));
    v35 = *(_OWORD *)v19;
    v33 = 0;
    v36 = 0x4034000000000000;
    __p = 0;
    v38 = 0;
    v39 = 0;
    v20 = 0;
    v21 = 0;
    memset(v40, 0, 24);
    v40[3] = 0x4018000000000000;
    v22 = 0;
    memset(v23, 0, 24);
    sub_10120E630((uint64_t)v2, (int *)buf, (uint64_t)buf);
    v11 = (void **)v40;
    sub_100259608(&v11);
    if (SHIBYTE(v39) < 0)
      operator delete(__p);
    if (SHIBYTE(v33) < 0)
      operator delete((void *)v32);
    if (SHIBYTE(v31) < 0)
      operator delete((void *)v30);
    if (SHIBYTE(v29) < 0)
      operator delete(v27);
    v11 = (void **)v23;
    sub_100259608(&v11);
    if (SHIBYTE(v22) < 0)
      operator delete(v20);
    if (SHIBYTE(v17[3]) < 0)
      operator delete(v17[1]);
    if (SHIBYTE(v17[0]) < 0)
      operator delete(v16[0]);
    if (SHIBYTE(v15) < 0)
      operator delete(v13);
  }
  v5 = sub_1001F8DEC(v2, a1);
  if (!v5)
    sub_100263950("unordered_map::at: key not found");
  if (*((char *)v5 + 103) < 0)
    v6 = v5[11];
  else
    v6 = *((unsigned __int8 *)v5 + 103);
  return v6 != 0;
}

void sub_101202F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  sub_101202470((uint64_t)&a35);
  sub_1012024E8((uint64_t)&a13);
  _Unwind_Resume(a1);
}

BOOL sub_101202F78(int *a1)
{
  _QWORD *v2;
  NSObject *v3;
  int v4;
  uint64_t *v5;
  uint64_t v6;
  int v8;
  const char *v9;
  uint8_t *v10;
  void **v11;
  _DWORD v12[2];
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16[2];
  void *v17[4];
  __int128 v18;
  _BYTE v19[24];
  void *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[4];
  uint8_t buf[4];
  int v25;
  int v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  void *__p;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[186];

  v2 = a1 + 2;
  *(_DWORD *)buf = *a1;
  if (!sub_1001F8DEC((_QWORD *)a1 + 1, (int *)buf))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021A91C8);
    v3 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      v4 = *a1;
      *(_DWORD *)buf = 67240192;
      v25 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#AMLCfg unexpected inst %{public}d is active", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021A91C8);
      v8 = *a1;
      v12[0] = 67240192;
      v12[1] = v8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#AMLCfg unexpected inst %{public}d is active", v12, 8);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLEmergencyAML::Config::isAmlOverNasEnabled()", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    DWORD1(v18) = 0;
    *(_OWORD *)v16 = 0u;
    memset(v17, 0, sizeof(v17));
    LOBYTE(v18) = 0;
    *((_QWORD *)&v18 + 1) = 0x402E000000000000;
    v19[0] = 1;
    *(_OWORD *)&v19[8] = xmmword_101BDBEB0;
    v30 = 0u;
    v32 = *(_OWORD *)&v17[1];
    v34 = v18;
    v12[0] = *a1;
    v23[3] = 0x4018000000000000;
    *(_DWORD *)buf = v12[0];
    v26 = v12[0];
    v27 = 0;
    v28 = 0;
    v14 = 0;
    v15 = 0;
    v13 = 0;
    v29 = 0;
    v31 = 0;
    v16[0] = 0;
    v16[1] = 0;
    memset(v17, 0, sizeof(v17));
    v35 = *(_OWORD *)v19;
    v33 = 0;
    v36 = 0x4034000000000000;
    __p = 0;
    v38 = 0;
    v39 = 0;
    v20 = 0;
    v21 = 0;
    memset(v40, 0, 24);
    v40[3] = 0x4018000000000000;
    v22 = 0;
    memset(v23, 0, 24);
    sub_10120E630((uint64_t)v2, (int *)buf, (uint64_t)buf);
    v11 = (void **)v40;
    sub_100259608(&v11);
    if (SHIBYTE(v39) < 0)
      operator delete(__p);
    if (SHIBYTE(v33) < 0)
      operator delete((void *)v32);
    if (SHIBYTE(v31) < 0)
      operator delete((void *)v30);
    if (SHIBYTE(v29) < 0)
      operator delete(v27);
    v11 = (void **)v23;
    sub_100259608(&v11);
    if (SHIBYTE(v22) < 0)
      operator delete(v20);
    if (SHIBYTE(v17[3]) < 0)
      operator delete(v17[1]);
    if (SHIBYTE(v17[0]) < 0)
      operator delete(v16[0]);
    if (SHIBYTE(v15) < 0)
      operator delete(v13);
  }
  v5 = sub_1001F8DEC(v2, a1);
  if (!v5)
    sub_100263950("unordered_map::at: key not found");
  if (*((char *)v5 + 167) < 0)
    v6 = v5[19];
  else
    v6 = *((unsigned __int8 *)v5 + 167);
  return v6 != 0;
}

void sub_1012032EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  sub_101202470((uint64_t)&a35);
  sub_1012024E8((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t *sub_101203310(int *a1)
{
  _QWORD *v2;
  NSObject *v3;
  int v4;
  uint64_t *v5;
  int v7;
  const char *v8;
  uint8_t *v9;
  void **v10;
  _DWORD v11[2];
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15[2];
  void *v16[4];
  __int128 v17;
  _BYTE v18[24];
  void *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[4];
  uint8_t buf[4];
  int v24;
  int v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  void *__p;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[186];

  v2 = a1 + 2;
  *(_DWORD *)buf = *a1;
  if (!sub_1001F8DEC((_QWORD *)a1 + 1, (int *)buf))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021A91C8);
    v3 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      v4 = *a1;
      *(_DWORD *)buf = 67240192;
      v24 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#AMLCfg AML config for inst %{public}d wasn't created on construction", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021A91C8);
      v7 = *a1;
      v11[0] = 67240192;
      v11[1] = v7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#AMLCfg AML config for inst %{public}d wasn't created on construction", v11, 8);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "const CLEmergencyAML::SimConfig &CLEmergencyAML::Config::getSimConfig()", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    DWORD1(v17) = 0;
    *(_OWORD *)v15 = 0u;
    memset(v16, 0, sizeof(v16));
    LOBYTE(v17) = 0;
    *((_QWORD *)&v17 + 1) = 0x402E000000000000;
    v18[0] = 1;
    *(_OWORD *)&v18[8] = xmmword_101BDBEB0;
    v29 = 0u;
    v31 = *(_OWORD *)&v16[1];
    v33 = v17;
    v11[0] = *a1;
    v22[3] = 0x4018000000000000;
    *(_DWORD *)buf = v11[0];
    v25 = v11[0];
    v26 = 0;
    v27 = 0;
    v13 = 0;
    v14 = 0;
    v12 = 0;
    v28 = 0;
    v30 = 0;
    v15[0] = 0;
    v15[1] = 0;
    memset(v16, 0, sizeof(v16));
    v34 = *(_OWORD *)v18;
    v32 = 0;
    v35 = 0x4034000000000000;
    __p = 0;
    v37 = 0;
    v38 = 0;
    v19 = 0;
    v20 = 0;
    memset(v39, 0, 24);
    v39[3] = 0x4018000000000000;
    v21 = 0;
    memset(v22, 0, 24);
    sub_10120E630((uint64_t)v2, (int *)buf, (uint64_t)buf);
    v10 = (void **)v39;
    sub_100259608(&v10);
    if (SHIBYTE(v38) < 0)
      operator delete(__p);
    if (SHIBYTE(v32) < 0)
      operator delete((void *)v31);
    if (SHIBYTE(v30) < 0)
      operator delete((void *)v29);
    if (SHIBYTE(v28) < 0)
      operator delete(v26);
    v10 = (void **)v22;
    sub_100259608(&v10);
    if (SHIBYTE(v21) < 0)
      operator delete(v19);
    if (SHIBYTE(v16[3]) < 0)
      operator delete(v16[1]);
    if (SHIBYTE(v16[0]) < 0)
      operator delete(v15[0]);
    if (SHIBYTE(v14) < 0)
      operator delete(v12);
  }
  v5 = sub_1001F8DEC(v2, a1);
  if (!v5)
    sub_100263950("unordered_map::at: key not found");
  return v5 + 3;
}

void sub_10120366C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  sub_101202470((uint64_t)&a35);
  sub_1012024E8((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_101203690(_QWORD *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void *__p;
  uint64_t v22;
  std::__shared_weak_count *v23;
  _BYTE v24[24];
  _BYTE *v25;
  _BYTE v26[24];
  _BYTE *v27;

  sub_100270E34((uint64_t)v26, a4);
  v11 = (std::__shared_weak_count *)a5[1];
  v22 = *a5;
  v23 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  sub_100270E34((uint64_t)v24, a6);
  sub_101399628((uint64_t)a1, a2, 0, a3, (uint64_t)v26, &v22, (uint64_t)v24);
  v14 = v25;
  if (v25 == v24)
  {
    v15 = 4;
    v14 = v24;
  }
  else
  {
    if (!v25)
      goto LABEL_9;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_9:
  v16 = v23;
  if (v23)
  {
    v17 = (unint64_t *)&v23->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v27;
  if (v27 == v26)
  {
    v20 = 4;
    v19 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_19;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_19:
  *a1 = off_1021A9110;
  sub_101202120((uint64_t)(a1 + 181));
  sub_1015A2E04(&__p, "#AML state machine");
  operator new();
}

void sub_1012039E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;

  sub_100261F44((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  sub_10120E548(v26 + 1456);
  sub_101399A8C(v26);
  _Unwind_Resume(a1);
}

uint64_t **sub_101203AF8(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  NSObject *v8;
  os_log_type_t v9;
  _QWORD *v10;
  char *v11;
  _BYTE *v12;
  uint64_t **result;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  char *v18;
  char *v19;
  void *v20[2];
  char v21;
  int v22;
  _BYTE __p[12];
  __int16 v24;
  unsigned int v25;
  __int16 v26;
  void **v27;
  _BYTE buf[12];
  __int16 v29;
  unsigned int v30;
  __int16 v31;
  _BYTE *v32;

  v22 = a2;
  if (a4 & 1 | (unint64_t)a3)
  {
    v4 = a4;
    v5 = a3;
    v7 = a2;
    v6 = a1;
    if (qword_1022A0070 == -1)
      goto LABEL_3;
  }
  else
  {
    sub_101946AD0(qword_1022A0070 == -1);
    __break(1u);
  }
  dispatch_once(&qword_1022A0070, &stru_1021A9268);
LABEL_3:
  v8 = qword_1022A0078;
  v9 = *(_BYTE *)(v6 + 120);
  if (os_log_type_enabled((os_log_t)qword_1022A0078, v9))
  {
    v10 = (_QWORD *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0)
      v10 = (_QWORD *)*v10;
    if (v7 > 3)
      v11 = "StateUnknown";
    else
      v11 = (&off_1021A92E0)[v7];
    sub_1015A2E04(__p, v11);
    if (SBYTE3(v27) >= 0)
      v12 = __p;
    else
      v12 = *(_BYTE **)__p;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v10;
    v29 = 1024;
    v30 = v7;
    v31 = 2080;
    v32 = v12;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%sstate,%d,%s", buf, 0x1Cu);
    if (SBYTE3(v27) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021A9268);
    v14 = (_QWORD *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0)
      v14 = (_QWORD *)*v14;
    v15 = qword_1022A0078;
    v16 = *(unsigned __int8 *)(v6 + 120);
    sub_101205420(v7, v20);
    if (v21 >= 0)
      v17 = v20;
    else
      v17 = (void **)v20[0];
    *(_DWORD *)__p = 136315650;
    *(_QWORD *)&__p[4] = v14;
    v24 = 1024;
    v25 = v7;
    v26 = 2080;
    v27 = v17;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v15, v16, "%sstate,%d,%s", __p, 28, (const char *)v20[0]);
    v19 = v18;
    if (v21 < 0)
      operator delete(v20[0]);
    sub_100512490("Generic", 1, 0, 2, "void CLStateMachine<CLEmergencyAML>::setStateHandler(State, StateHandler) [T = CLEmergencyAML]", "%s\n", v19);
    if (v19 != buf)
      free(v19);
  }
  *(_QWORD *)buf = &v22;
  result = sub_1000610B4((uint64_t **)(v6 + 8), &v22, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
  result[5] = v5;
  result[6] = v4;
  return result;
}

uint64_t sub_101203DE0(uint64_t a1, int a2)
{
  NSObject *v4;
  double v5;
  uint8_t *v6;
  uint8_t *v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  double v15;
  uint8_t *v16;
  _WORD v17[8];
  uint8_t buf[1640];

  switch(a2)
  {
    case 2:
    case 3:
    case 9:
    case 10:
      return sub_101208904(a1);
    case 5:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021A91C8);
      v4 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning #AML SendFixTimeout fired while Disabled", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 0;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021A91C8);
      v17[0] = 0;
      v5 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #AML SendFixTimeout fired while Disabled", v17, 2);
      v7 = v6;
      sub_100512490("Generic", 1, 0, 2, "CLEmergencyAML::State CLEmergencyAML::handler_Disabled(CLEmergencyAML::Event)", "%s\n", v5);
      goto LABEL_43;
    case 6:
      if (!*(_QWORD *)(a1 + 1648))
      {
        sub_10139A508(a1);
        sub_101208F08(a1);
        sub_1012092B8(a1 + 1496, 7);
      }
      return 0;
    case 7:
      if (*(_QWORD *)(a1 + 1648))
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021A91C8);
        v8 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#AML SMS Notification Timeout. Submit AWD report with failure", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021A91C8);
          v17[0] = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#AML SMS Notification Timeout. Submit AWD report with failure", v17, 2);
          v14 = (uint8_t *)v13;
          sub_100512490("Generic", 1, 0, 2, "CLEmergencyAML::State CLEmergencyAML::handler_Disabled(CLEmergencyAML::Event)", "%s\n", v13);
          if (v14 != buf)
            free(v14);
        }
        sub_10139A508(a1);
        sub_101208F08(a1);
        sub_10120ED74(a1 + 1624);
      }
      else
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021A91C8);
        v10 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#AML SMS Notification timer timedout when no notifications were expected", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021A91C8);
          v17[0] = 0;
          v15 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#AML SMS Notification timer timedout when no notifications were expected", v17, 2);
          v7 = v16;
          sub_100512490("Generic", 1, 0, 0, "CLEmergencyAML::State CLEmergencyAML::handler_Disabled(CLEmergencyAML::Event)", "%s\n", v15);
LABEL_43:
          if (v7 != buf)
            free(v7);
        }
      }
      return 0;
    case 8:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021A91C8);
      v9 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning #AML SessionAssertReleased fired in Disabled state", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021A91C8);
        v17[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #AML SessionAssertReleased fired in Disabled state", v17, 2);
        v12 = (uint8_t *)v11;
        sub_100512490("Generic", 1, 0, 2, "CLEmergencyAML::State CLEmergencyAML::handler_Disabled(CLEmergencyAML::Event)", "%s\n", v11);
        if (v12 != buf)
          free(v12);
      }
      sub_101399E28(a1, 0);
      return 0;
    default:
      return 0;
  }
}

uint64_t sub_1012043C0(uint64_t a1, int a2)
{
  NSObject *v4;
  double v5;
  uint8_t *v6;
  uint8_t *v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  double v15;
  uint8_t *v16;
  _WORD v17[8];
  uint8_t buf[1640];

  switch(a2)
  {
    case 2:
    case 3:
    case 9:
    case 10:
      return sub_101208904(a1);
    case 5:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021A91C8);
      v4 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning #AML SendFixTimeout fired while Idle", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 1;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021A91C8);
      v17[0] = 0;
      v5 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #AML SendFixTimeout fired while Idle", v17, 2);
      v7 = v6;
      sub_100512490("Generic", 1, 0, 2, "CLEmergencyAML::State CLEmergencyAML::handler_Idle(CLEmergencyAML::Event)", "%s\n", v5);
      goto LABEL_43;
    case 6:
      if (!*(_QWORD *)(a1 + 1648))
      {
        sub_10139A508(a1);
        sub_101208F08(a1);
        sub_1012092B8(a1 + 1496, 7);
      }
      return 1;
    case 7:
      if (*(_QWORD *)(a1 + 1648))
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021A91C8);
        v8 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#AML SMS Notification Timeout. Submit AWD report with failure", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021A91C8);
          v17[0] = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#AML SMS Notification Timeout. Submit AWD report with failure", v17, 2);
          v14 = (uint8_t *)v13;
          sub_100512490("Generic", 1, 0, 2, "CLEmergencyAML::State CLEmergencyAML::handler_Idle(CLEmergencyAML::Event)", "%s\n", v13);
          if (v14 != buf)
            free(v14);
        }
        sub_10139A508(a1);
        sub_101208F08(a1);
        sub_10120ED74(a1 + 1624);
      }
      else
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021A91C8);
        v10 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#AML SMS Notification timer timedout when no notifications were expected", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021A91C8);
          v17[0] = 0;
          v15 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#AML SMS Notification timer timedout when no notifications were expected", v17, 2);
          v7 = v16;
          sub_100512490("Generic", 1, 0, 0, "CLEmergencyAML::State CLEmergencyAML::handler_Idle(CLEmergencyAML::Event)", "%s\n", v15);
LABEL_43:
          if (v7 != buf)
            free(v7);
        }
      }
      return 1;
    case 8:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021A91C8);
      v9 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning #AML SessionAssertReleased fired in Idle state", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021A91C8);
        v17[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #AML SessionAssertReleased fired in Idle state", v17, 2);
        v12 = (uint8_t *)v11;
        sub_100512490("Generic", 1, 0, 2, "CLEmergencyAML::State CLEmergencyAML::handler_Idle(CLEmergencyAML::Event)", "%s\n", v11);
        if (v12 != buf)
          free(v12);
      }
      sub_101399E28(a1, 0);
      return 1;
    default:
      return 1;
  }
}

uint64_t sub_1012049A0(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  NSObject *v8;
  uint8_t *v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  NSObject *v13;
  const char *v14;
  uint8_t *v15;
  _QWORD v16[2];
  uint8_t buf[1640];

  v2 = 2;
  switch(a2)
  {
    case 0:
      sub_101209748(a1, 0);
      return v2;
    case 1:
      sub_101209AD0(a1);
      return v2;
    case 2:
      sub_101209CC0(a1);
      return v2;
    case 3:
      v5 = sub_101208904(a1);
      v2 = v5;
      if (v5 > 1)
      {
        if ((_DWORD)v5 == 3)
        {
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021A91C8);
          v13 = qword_1022A0088;
          if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#AML SessionOverNAS transition in emergency state", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_1021A91C8);
            LOWORD(v16[0]) = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#AML SessionOverNAS transition in emergency state", v16, 2);
            v15 = (uint8_t *)v14;
            sub_100512490("Generic", 1, 0, 2, "CLEmergencyAML::State CLEmergencyAML::handler_Session(CLEmergencyAML::Event)", "%s\n", v14);
            if (v15 != buf)
              free(v15);
          }
          return 3;
        }
      }
      else if (*(_BYTE *)(a1 + 184))
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021A91C8);
        v6 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#AML delaying Session Exit due to session assertion", buf, 2u);
        }
        v2 = 2;
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021A91C8);
          LOWORD(v16[0]) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#AML delaying Session Exit due to session assertion", v16, 2, v16[0]);
LABEL_26:
          v9 = (uint8_t *)v7;
          sub_100512490("Generic", 1, 0, 2, "CLEmergencyAML::State CLEmergencyAML::handler_Session(CLEmergencyAML::Event)", "%s\n", v7);
          if (v9 != buf)
            free(v9);
          return 2;
        }
      }
      else
      {
        sub_10139A4A4(a1, (unsigned int *)(a1 + 340), 10);
        sub_101208710(a1, (unsigned int *)(a1 + 2496), 7u);
      }
      return v2;
    case 4:
      if (sub_101209E9C(a1))
        goto LABEL_5;
      return v2;
    case 5:
LABEL_5:
      sub_10120A7EC(a1, 0);
      sub_10120B2E8(a1);
      return v2;
    case 7:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021A91C8);
      v8 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning #AML SMS Timeout while in Session. Ignoring it", buf, 2u);
      }
      v2 = 2;
      if (!sub_1001BFF7C(115, 2))
        return v2;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021A91C8);
      LOWORD(v16[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #AML SMS Timeout while in Session. Ignoring it", v16, 2, v16[0]);
      goto LABEL_26;
    case 8:
      sub_101399E28(a1, 0);
      v2 = sub_101208904(a1);
      if ((_DWORD)v2 != 2)
      {
        v10 = sub_10139A4A4(a1, (unsigned int *)(a1 + 340), 10);
        v11 = sub_10120E21C(v10, *(_DWORD *)(a1 + 2496));
        v12 = *(_DWORD *)(a1 + 2496);
        if (v11 >= 0xFFFFFFFD)
          v12 = 7;
        *(_DWORD *)(a1 + 2496) = v12;
      }
      return v2;
    case 9:
    case 10:
      return sub_101208904(a1);
    default:
      return v2;
  }
}

uint64_t sub_101204EA8(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  NSObject *v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  uint8_t *v12;
  _QWORD v13[2];
  uint8_t buf[1640];

  v2 = 3;
  switch(a2)
  {
    case 0:
      sub_101209748(a1, 1);
      return v2;
    case 1:
      sub_101209AD0(a1);
      return v2;
    case 2:
      sub_101209CC0(a1);
      return v2;
    case 3:
      v5 = sub_101208904(a1);
      v2 = v5;
      if (v5 > 1)
      {
        if ((_DWORD)v5 == 2)
        {
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021A91C8);
          v9 = qword_1022A0088;
          if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#AML Session transition in emergency state", buf, 2u);
          }
          v2 = 2;
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_1021A91C8);
            LOWORD(v13[0]) = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#AML Session transition in emergency state", v13, 2);
            v11 = (uint8_t *)v10;
            sub_100512490("Generic", 1, 0, 2, "CLEmergencyAML::State CLEmergencyAML::handler_SessionOverNAS(CLEmergencyAML::Event)", "%s\n", v10);
            if (v11 != buf)
              free(v11);
            return 2;
          }
        }
      }
      else if (*(_BYTE *)(a1 + 184))
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021A91C8);
        v6 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#AML delaying Session Exit due to session assertion", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021A91C8);
          LOWORD(v13[0]) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#AML delaying Session Exit due to session assertion", v13, 2, v13[0]);
LABEL_41:
          v12 = (uint8_t *)v7;
          sub_100512490("Generic", 1, 0, 2, "CLEmergencyAML::State CLEmergencyAML::handler_SessionOverNAS(CLEmergencyAML::Event)", "%s\n", v7);
          if (v12 != buf)
            free(v12);
        }
        return 3;
      }
      else
      {
        sub_10139A4A4(a1, (unsigned int *)(a1 + 340), 10);
        sub_101208710(a1, (unsigned int *)(a1 + 2496), 7u);
      }
      return v2;
    case 4:
      if (sub_101209E9C(a1))
        goto LABEL_5;
      return v2;
    case 5:
LABEL_5:
      sub_10120A7EC(a1, 1);
      sub_10120B2E8(a1);
      return v2;
    case 7:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021A91C8);
      v8 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning #AML SMS Timeout while in Session. Ignoring it", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 3;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021A91C8);
      LOWORD(v13[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #AML SMS Timeout while in Session. Ignoring it", v13, 2, v13[0]);
      goto LABEL_41;
    case 8:
      sub_101399E28(a1, 0);
      return v2;
    case 9:
    case 10:
      return sub_101208904(a1);
    default:
      return v2;
  }
}

uint64_t sub_101205370(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021A9110;

  *(_QWORD *)(a1 + 2512) = 0;
  sub_100261F44(a1 + 2360);
  sub_10120ECBC(a1 + 1624);
  sub_10120EBD8(a1 + 1496);
  sub_10120E548(a1 + 1456);
  return sub_101399A8C(a1);
}

void sub_1012053D0(uint64_t a1)
{
  sub_101205370(a1);
  operator delete();
}

_QWORD *sub_1012053F4@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 > 0xA)
    v2 = "EventUnknown";
  else
    v2 = (&off_1021A9288)[a1];
  return sub_1015A2E04(a2, v2);
}

_QWORD *sub_101205420@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 > 3)
    v2 = "StateUnknown";
  else
    v2 = (&off_1021A92E0)[a1];
  return sub_1015A2E04(a2, v2);
}

uint64_t sub_10120544C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const char *v6;
  const char *v7;
  NSObject *v8;
  _QWORD *v9;
  unint64_t v10;
  void *v11;
  NSObject *v12;
  id v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  id v27;
  const char *v28;
  char *v29;
  NSObject *v30;
  const char *v31;
  char *v32;
  NSObject *v33;
  uint64_t *v34;
  const char *v35;
  int v36;
  int v37;
  NSObject *v38;
  const char *v39;
  char *v40;
  const char *v41;
  NSObject *v42;
  uint64_t *v43;
  const char *v44;
  NSObject *v45;
  uint64_t *v46;
  const char *v47;
  NSObject *v48;
  uint64_t *v49;
  const char *v50;
  NSObject *v51;
  uint64_t *v52;
  NSObject *v53;
  int v54;
  int v55;
  NSObject *v56;
  const char *v57;
  char *v58;
  NSObject *v59;
  const char *v60;
  char *v61;
  NSObject *v62;
  const char *v63;
  NSObject *v64;
  std::string *v65;
  NSObject *v66;
  const char *v67;
  char *v68;
  NSObject *v69;
  const char *v71;
  char *v72;
  uint64_t *v73;
  const char *v74;
  char *v75;
  uint64_t *v76;
  const char *v77;
  char *v78;
  uint64_t *v79;
  const char *v80;
  char *v81;
  uint64_t *v82;
  const char *v83;
  char *v84;
  uint64_t *v85;
  const char *v86;
  char *v87;
  const char *v88;
  char *v89;
  const char *v90;
  const char *v91;
  uint64_t v92;
  BOOL v93;
  _WORD v94[8];
  CFTypeRef v95[3];
  char v96;
  void *v97[2];
  void *__p[2];
  uint64_t v99;
  __int128 buf;
  char *v101;
  char *v102;
  uint64_t v103;

  sub_100119F3C(v97);
  if (byte_102312767 >= 0)
    v6 = (const char *)&qword_102312750;
  else
    v6 = (const char *)qword_102312750;
  if (sub_100006BB4(a1, v6, v97))
  {
    if (byte_10231277F >= 0)
      v7 = (const char *)&qword_102312768;
    else
      v7 = (const char *)qword_102312768;
    if (sub_1000BCB64((uint64_t)v97, v7, (std::string *)(a3 + 88)))
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021A91C8);
      v8 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#AML over NAS needs to be supported", (uint8_t *)&buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021A91C8);
        LOWORD(__p[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#AML over NAS needs to be supported", __p, 2);
        v72 = (char *)v71;
        sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyAML::readAmlKeys(const CLNameValuePair &, const CLNameValuePair &, AugmentedAction::AML &)", "%s\n", v71);
        if (v72 != (char *)&buf)
          free(v72);
      }
    }
    v9 = (_QWORD *)(a3 + 112);
    sub_100259648((uint64_t *)(a3 + 112));
    v95[0] = 0;
    if (sub_100527258((uint64_t)v97, CFSTR("EnableForMCCOrPLMNs"), v95))
    {
      v10 = 0;
      v11 = (void *)v95[0];
      while ((unint64_t)objc_msgSend(v11, "count") > v10)
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021A91C8);
        v12 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
        {
          v13 = objc_msgSend(v11, "objectAtIndexedSubscript:", v10);
          LODWORD(buf) = 138543362;
          *(_QWORD *)((char *)&buf + 4) = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#AML MCCOrPLMN idx %{public}@", (uint8_t *)&buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021A91C8);
          v26 = qword_1022A0088;
          v27 = objc_msgSend(v11, "objectAtIndexedSubscript:", v10);
          LODWORD(__p[0]) = 138543362;
          *(void **)((char *)__p + 4) = v27;
          LODWORD(v92) = 12;
          _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v26, 2, "#AML MCCOrPLMN idx %{public}@", __p, v92);
          v29 = (char *)v28;
          sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyAML::readAmlKeys(const CLNameValuePair &, const CLNameValuePair &, AugmentedAction::AML &)", "%s\n", v28);
          if (v29 != (char *)&buf)
            free(v29);
        }
        sub_1015A2E04(__p, (char *)objc_msgSend(objc_msgSend(v11, "objectAtIndexedSubscript:", v10), "UTF8String"));
        v15 = *(_QWORD *)(a3 + 120);
        v14 = *(_QWORD *)(a3 + 128);
        if (v15 >= v14)
        {
          v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - *v9) >> 3);
          v18 = v17 + 1;
          if (v17 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_100259694();
          v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - *v9) >> 3);
          if (2 * v19 > v18)
            v18 = 2 * v19;
          if (v19 >= 0x555555555555555)
            v20 = 0xAAAAAAAAAAAAAAALL;
          else
            v20 = v18;
          v103 = a3 + 128;
          if (v20)
            v21 = (char *)sub_1002596A8(a3 + 128, v20);
          else
            v21 = 0;
          v22 = &v21[24 * v17];
          *(_QWORD *)&buf = v21;
          *((_QWORD *)&buf + 1) = v22;
          v102 = &v21[24 * v20];
          v23 = *(_OWORD *)__p;
          *((_QWORD *)v22 + 2) = v99;
          *(_OWORD *)v22 = v23;
          __p[1] = 0;
          v99 = 0;
          __p[0] = 0;
          v101 = v22 + 24;
          sub_100074D44((uint64_t *)(a3 + 112), &buf);
          v24 = *(_QWORD *)(a3 + 120);
          sub_100074DB8((uint64_t)&buf);
          v25 = SHIBYTE(v99);
          *(_QWORD *)(a3 + 120) = v24;
          if (v25 < 0)
            operator delete(__p[0]);
        }
        else
        {
          v16 = *(_OWORD *)__p;
          *(_QWORD *)(v15 + 16) = v99;
          *(_OWORD *)v15 = v16;
          *(_QWORD *)(a3 + 120) = v15 + 24;
        }
        ++v10;
      }
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021A91C8);
      v33 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        v34 = &qword_102312780;
        if (byte_102312797 < 0)
          v34 = (uint64_t *)qword_102312780;
        LODWORD(buf) = 136446210;
        *(_QWORD *)((char *)&buf + 4) = v34;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "#AML No %{public}s key found in carrier bundle, using default", (uint8_t *)&buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021A91C8);
        v73 = &qword_102312780;
        if (byte_102312797 < 0)
          v73 = (uint64_t *)qword_102312780;
        LODWORD(__p[0]) = 136446210;
        *(void **)((char *)__p + 4) = v73;
        LODWORD(v92) = 12;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#AML No %{public}s key found in carrier bundle, using default", __p, v92);
        v75 = (char *)v74;
        sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyAML::readAmlKeys(const CLNameValuePair &, const CLNameValuePair &, AugmentedAction::AML &)", "%s\n", v74);
        if (v75 != (char *)&buf)
          free(v75);
      }
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021A91C8);
    v30 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "#AML SMSOverNAS not found in carrier bundle, using default", (uint8_t *)&buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021A91C8);
      LOWORD(__p[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#AML SMSOverNAS not found in carrier bundle, using default", __p, 2);
      v32 = (char *)v31;
      sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyAML::readAmlKeys(const CLNameValuePair &, const CLNameValuePair &, AugmentedAction::AML &)", "%s\n", v31);
      if (v32 != (char *)&buf)
        free(v32);
    }
  }
  v96 = 1;
  if (byte_102312017 >= 0)
    v35 = (const char *)&qword_102312000;
  else
    v35 = (const char *)qword_102312000;
  v36 = sub_1001E4874(a2, v35, (BOOL *)&v96);
  if (v96)
    v37 = 0;
  else
    v37 = v36;
  if (v37 != 1)
  {
    if (byte_1023120D7 >= 0)
      v41 = (const char *)&qword_1023120C0;
    else
      v41 = (const char *)qword_1023120C0;
    if ((sub_1001FD98C(a2, v41, (void *)(a3 + 56)) & 1) == 0)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021A91C8);
      v42 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        if (byte_1023120D7 >= 0)
          v43 = &qword_1023120C0;
        else
          v43 = (uint64_t *)qword_1023120C0;
        LODWORD(buf) = 136446210;
        *(_QWORD *)((char *)&buf + 4) = v43;
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "#AML No %{public}s key found in operator bundle, using default", (uint8_t *)&buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021A91C8);
        if (byte_1023120D7 >= 0)
          v76 = &qword_1023120C0;
        else
          v76 = (uint64_t *)qword_1023120C0;
        LODWORD(__p[0]) = 136446210;
        *(void **)((char *)__p + 4) = v76;
        LODWORD(v92) = 12;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#AML No %{public}s key found in operator bundle, using default", __p, v92);
        v78 = (char *)v77;
        sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyAML::readAmlKeys(const CLNameValuePair &, const CLNameValuePair &, AugmentedAction::AML &)", "%s\n", v77);
        if (v78 != (char *)&buf)
          free(v78);
      }
    }
    if (byte_1023120EF >= 0)
      v44 = (const char *)&qword_1023120D8;
    else
      v44 = (const char *)qword_1023120D8;
    if ((sub_1001E4874(a2, v44, (BOOL *)(a3 + 64)) & 1) == 0)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021A91C8);
      v45 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        if (byte_1023120EF >= 0)
          v46 = &qword_1023120D8;
        else
          v46 = (uint64_t *)qword_1023120D8;
        LODWORD(buf) = 136446210;
        *(_QWORD *)((char *)&buf + 4) = v46;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "#AML No %{public}s key found in operator bundle, using default", (uint8_t *)&buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021A91C8);
        if (byte_1023120EF >= 0)
          v79 = &qword_1023120D8;
        else
          v79 = (uint64_t *)qword_1023120D8;
        LODWORD(__p[0]) = 136446210;
        *(void **)((char *)__p + 4) = v79;
        LODWORD(v92) = 12;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#AML No %{public}s key found in operator bundle, using default", __p, v92);
        v81 = (char *)v80;
        sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyAML::readAmlKeys(const CLNameValuePair &, const CLNameValuePair &, AugmentedAction::AML &)", "%s\n", v80);
        if (v81 != (char *)&buf)
          free(v81);
      }
    }
    if (byte_102312107 >= 0)
      v47 = (const char *)&qword_1023120F0;
    else
      v47 = (const char *)qword_1023120F0;
    if ((sub_1001FD98C(a2, v47, (void *)(a3 + 72)) & 1) == 0)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021A91C8);
      v48 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        if (byte_102312107 >= 0)
          v49 = &qword_1023120F0;
        else
          v49 = (uint64_t *)qword_1023120F0;
        LODWORD(buf) = 136446210;
        *(_QWORD *)((char *)&buf + 4) = v49;
        _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEBUG, "#AML No %{public}s key found in operator bundle, using default", (uint8_t *)&buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021A91C8);
        if (byte_102312107 >= 0)
          v82 = &qword_1023120F0;
        else
          v82 = (uint64_t *)qword_1023120F0;
        LODWORD(__p[0]) = 136446210;
        *(void **)((char *)__p + 4) = v82;
        LODWORD(v92) = 12;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#AML No %{public}s key found in operator bundle, using default", __p, v92);
        v84 = (char *)v83;
        sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyAML::readAmlKeys(const CLNameValuePair &, const CLNameValuePair &, AugmentedAction::AML &)", "%s\n", v83);
        if (v84 != (char *)&buf)
          free(v84);
      }
    }
    if (byte_10231211F >= 0)
      v50 = (const char *)&qword_102312108;
    else
      v50 = (const char *)qword_102312108;
    if ((sub_1001FD98C(a2, v50, (void *)(a3 + 80)) & 1) == 0)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021A91C8);
      v51 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        if (byte_10231211F >= 0)
          v52 = &qword_102312108;
        else
          v52 = (uint64_t *)qword_102312108;
        LODWORD(buf) = 136446210;
        *(_QWORD *)((char *)&buf + 4) = v52;
        _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "#AML No %{public}s key found in operator bundle, using default", (uint8_t *)&buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021A91C8);
        if (byte_10231211F >= 0)
          v85 = &qword_102312108;
        else
          v85 = (uint64_t *)qword_102312108;
        LODWORD(__p[0]) = 136446210;
        *(void **)((char *)__p + 4) = v85;
        LODWORD(v92) = 12;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#AML No %{public}s key found in operator bundle, using default", __p, v92);
        v87 = (char *)v86;
        sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyAML::readAmlKeys(const CLNameValuePair &, const CLNameValuePair &, AugmentedAction::AML &)", "%s\n", v86);
        if (v87 != (char *)&buf)
          free(v87);
      }
    }
    sub_100119F3C(__p);
    if (!sub_100006BB4(a2, "SMS", __p))
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021A91C8);
      v59 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEBUG, "#AML-SMS No SMS dict found in operator bundle, using default", (uint8_t *)&buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021A91C8);
        LOWORD(v95[0]) = 0;
        LODWORD(v92) = 2;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#AML-SMS No SMS dict found in operator bundle, using default", v95, v92);
        v61 = (char *)v60;
        sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyAML::readAmlKeys(const CLNameValuePair &, const CLNameValuePair &, AugmentedAction::AML &)", "%s\n", v60);
        if (v61 != (char *)&buf)
          free(v61);
      }
LABEL_166:
      sub_100119F3C(v95);
      if (sub_100006BB4(a2, "HTTPS", v95))
      {
        v65 = (std::string *)(a3 + 32);
        if (sub_1000BCB64((uint64_t)v95, "URL", v65))
        {
          std::string::insert(v65, 0, "https://");
LABEL_182:
          sub_10011A5A8(v95);
          sub_10011A5A8(__p);
          return sub_10011A5A8(v97);
        }
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021A91C8);
        v69 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(buf) = 0;
          _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEBUG, "#AML-HTTPS No HTTPS address found in operator bundle, using default", (uint8_t *)&buf, 2u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_182;
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021A91C8);
        v94[0] = 0;
        LODWORD(v92) = 2;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#AML-HTTPS No HTTPS address found in operator bundle, using default", v94, v92);
        v68 = (char *)v90;
        sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyAML::readAmlKeys(const CLNameValuePair &, const CLNameValuePair &, AugmentedAction::AML &)", "%s\n", v90);
      }
      else
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021A91C8);
        v66 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(buf) = 0;
          _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEBUG, "#AML-HTTPS No HTTPS dict found in operator bundle, using default", (uint8_t *)&buf, 2u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_182;
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021A91C8);
        v94[0] = 0;
        LODWORD(v92) = 2;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#AML-HTTPS No HTTPS dict found in operator bundle, using default", v94, v92);
        v68 = (char *)v67;
        sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyAML::readAmlKeys(const CLNameValuePair &, const CLNameValuePair &, AugmentedAction::AML &)", "%s\n", v67);
      }
      if (v68 != (char *)&buf)
        free(v68);
      goto LABEL_182;
    }
    if (!sub_1000BCB64((uint64_t)__p, "Destination", (std::string *)a3))
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021A91C8);
      v53 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEBUG, "#AML-SMS No SMS address found in operator bundle, using default", (uint8_t *)&buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021A91C8);
        LOWORD(v95[0]) = 0;
        LODWORD(v92) = 2;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#AML-SMS No SMS address found in operator bundle, using default", v95, v92);
        v89 = (char *)v88;
        sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyAML::readAmlKeys(const CLNameValuePair &, const CLNameValuePair &, AugmentedAction::AML &)", "%s\n", v88);
        if (v89 != (char *)&buf)
          free(v89);
      }
    }
    sub_100119F3C(v95);
    if (sub_100006BB4((uint64_t)__p, "Binary", v95))
    {
      v93 = 0;
      v54 = sub_1001E4874((uint64_t)v95, "Disabled", &v93);
      if (v93)
        v55 = v54;
      else
        v55 = 0;
      if (v55 == 1)
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021A91C8);
        v56 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf) = 0;
          _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "#AML-SMS binary SMS explicitly disabled", (uint8_t *)&buf, 2u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_165;
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021A91C8);
        v94[0] = 0;
        LODWORD(v92) = 2;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#AML-SMS binary SMS explicitly disabled", v94, v92);
        v58 = (char *)v57;
        sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyAML::readAmlKeys(const CLNameValuePair &, const CLNameValuePair &, AugmentedAction::AML &)", "%s\n", v57);
      }
      else
      {
        *(_BYTE *)(a3 + 24) = 1;
        if ((sub_100526244((uint64_t)v95, "DestinationPort", (_DWORD *)(a3 + 28)) & 1) != 0)
          goto LABEL_165;
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021A91C8);
        v64 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(buf) = 0;
          _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEBUG, "#AML-SMS No binary SMS destination port found in operator bundle, using default", (uint8_t *)&buf, 2u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_165;
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021A91C8);
        v94[0] = 0;
        LODWORD(v92) = 2;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#AML-SMS No binary SMS destination port found in operator bundle, using default", v94, v92);
        v58 = (char *)v91;
        sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyAML::readAmlKeys(const CLNameValuePair &, const CLNameValuePair &, AugmentedAction::AML &)", "%s\n", v91);
      }
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021A91C8);
      v62 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEBUG, "#AML-SMS No binary SMS dict found in operator bundle, using default", (uint8_t *)&buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_165;
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021A91C8);
      v94[0] = 0;
      LODWORD(v92) = 2;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#AML-SMS No binary SMS dict found in operator bundle, using default", v94, v92);
      v58 = (char *)v63;
      sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyAML::readAmlKeys(const CLNameValuePair &, const CLNameValuePair &, AugmentedAction::AML &)", "%s\n", v63);
    }
    if (v58 != (char *)&buf)
      free(v58);
LABEL_165:
    sub_10011A5A8(v95);
    goto LABEL_166;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021A91C8);
  v38 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "#AML not supported", (uint8_t *)&buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021A91C8);
    LOWORD(__p[0]) = 0;
    LODWORD(v92) = 2;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#AML not supported", __p, v92);
    v40 = (char *)v39;
    sub_100512490("Generic", 1, 0, 2, "static void CLEmergencyAML::readAmlKeys(const CLNameValuePair &, const CLNameValuePair &, AugmentedAction::AML &)", "%s\n", v39);
    if (v40 != (char *)&buf)
      free(v40);
  }
  return sub_10011A5A8(v97);
}

void sub_101206CEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32)
{
  sub_10011A5A8(&a19);
  sub_10011A5A8(&__p);
  sub_10011A5A8(&a23);
  _Unwind_Resume(a1);
}

void sub_101206DC0(uint64_t a1)
{
  int *v1;
  uint64_t *v2;
  NSObject *v3;
  _BOOL4 v4;
  int v5;
  void **v6;
  void **v7;
  void **v8;
  int v9;
  int v10;
  void **v11;
  void *__p[2];
  uint64_t v13;
  void *v14[2];
  uint64_t v15;
  void *v16[2];
  uint64_t v17;
  void *__dst[2];
  uint64_t v19;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  _BOOL4 v25;
  __int16 v26;
  int v27;
  __int16 v28;
  void **v29;
  __int16 v30;
  void **v31;
  __int16 v32;
  void **v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  void **v39;

  v1 = (int *)(a1 + 1448);
  v2 = sub_101203310((int *)(a1 + 1448));
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021A91C8);
  v3 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v4 = sub_101202BE0(v1);
    v5 = *(_DWORD *)v2;
    if (*((char *)v2 + 55) < 0)
    {
      sub_100115CE4(__dst, (void *)v2[4], v2[5]);
    }
    else
    {
      *(_OWORD *)__dst = *((_OWORD *)v2 + 2);
      v19 = v2[6];
    }
    if (v19 >= 0)
      v6 = __dst;
    else
      v6 = (void **)__dst[0];
    if (*((char *)v2 + 31) < 0)
    {
      sub_100115CE4(v16, (void *)v2[1], v2[2]);
    }
    else
    {
      *(_OWORD *)v16 = *(_OWORD *)(v2 + 1);
      v17 = v2[3];
    }
    if (v17 >= 0)
      v7 = v16;
    else
      v7 = (void **)v16[0];
    if (*((char *)v2 + 79) < 0)
    {
      sub_100115CE4(v14, (void *)v2[7], v2[8]);
    }
    else
    {
      *(_OWORD *)v14 = *(_OWORD *)(v2 + 7);
      v15 = v2[9];
    }
    if (v15 >= 0)
      v8 = v14;
    else
      v8 = (void **)v14[0];
    v9 = *((unsigned __int8 *)v2 + 80);
    v10 = *((_DWORD *)v2 + 21);
    if (*((char *)v2 + 143) < 0)
    {
      sub_100115CE4(__p, (void *)v2[15], v2[16]);
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)(v2 + 15);
      v13 = v2[17];
    }
    v11 = __p;
    if (v13 < 0)
      v11 = (void **)__p[0];
    *(_DWORD *)buf = 68291075;
    v21 = 0;
    v22 = 2082;
    v23 = "";
    v24 = 1026;
    v25 = v4;
    v26 = 1026;
    v27 = v5;
    v28 = 2082;
    v29 = v6;
    v30 = 2082;
    v31 = v7;
    v32 = 2081;
    v33 = v8;
    v34 = 1025;
    v35 = v9;
    v36 = 1025;
    v37 = v10;
    v38 = 2081;
    v39 = v11;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AML logging current settings\", \"enabled\":%{public}d, \"inst\":%{public}d, \"bundle ID\":%{public, location:escape_only}s, \"bundle version\":%{public, location:escape_only}s, \"sms address\":%{private, location:escape_only}s, \"binary\":%{private}d, \"port\":%{private}d, \"SMS over NAS Destination address\":%{private, location:escape_only}s}", buf, 0x52u);
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v15) < 0)
      operator delete(v14[0]);
    if (SHIBYTE(v17) < 0)
      operator delete(v16[0]);
    if (SHIBYTE(v19) < 0)
      operator delete(__dst[0]);
  }
}

void sub_10120706C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a18 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012070C0(uint64_t a1, __int128 *a2)
{
  unsigned int *v3;
  __int128 v4;
  int v5;
  NSObject *v6;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;

  v3 = (unsigned int *)(a1 + 112);
  v4 = *a2;
  *(_DWORD *)(a1 + 128) = *((_DWORD *)a2 + 4);
  *(_OWORD *)(a1 + 112) = v4;
  sub_10139A378(a1);
  v5 = sub_100217A98(v3);
  if (sub_101202770((int *)(a1 + 1448), v5))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021A91C8);
    v6 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240192;
      v12 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#AML active inst changed to %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021A91C8);
      v10[0] = 67240192;
      v10[1] = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#AML active inst changed to %{public}d", v10, 8);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLEmergencyAML::handleEmergencyStateChange(CLEmergencyState)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    sub_1012072C4(a1 + 1496, 2);
  }
  return sub_1012072C4(a1 + 1496, 3);
}

uint64_t sub_1012072C4(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  NSObject *v5;
  os_log_type_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  int v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t **v15;
  int v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t (*v22)(_QWORD *, uint64_t);
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  _QWORD *v27;
  NSObject *v28;
  os_log_type_t v29;
  _QWORD *v30;
  char *v31;
  _BYTE *v32;
  NSObject *v33;
  os_log_type_t v34;
  _QWORD *v35;
  char *v36;
  uint64_t *v37;
  int v38;
  _BYTE *v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t **v43;
  uint64_t *v44;
  uint64_t v45;
  _QWORD *v46;
  int v47;
  NSObject *v48;
  os_log_type_t v49;
  _QWORD *v50;
  char *v51;
  uint64_t *v52;
  int v53;
  _BYTE *v54;
  _BYTE *v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t **v58;
  uint64_t *v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  _BYTE *v67;
  _BYTE *v68;
  void **v69;
  char *v70;
  char *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  char *v76;
  char *v77;
  _QWORD *v78;
  const char *v79;
  char *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  int v85;
  _BYTE *v86;
  _BYTE *v87;
  void **v88;
  char *v89;
  char *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  _BYTE *v95;
  _BYTE *v96;
  void **v97;
  char *v98;
  char *v99;
  const char *v100;
  const char *v101;
  int v102;
  void *v103[2];
  char v104;
  unsigned int v105;
  _BYTE __p[12];
  __int16 v107;
  _BYTE *v108;
  __int16 v109;
  void **v110;
  _BYTE buf[12];
  __int16 v112;
  _BYTE *v113;
  __int16 v114;
  _BYTE *v115;
  _BYTE v116[12];
  __int16 v117;
  _BYTE *v118;
  char v119;

  ++*(_DWORD *)(a1 + 88);
  v105 = *(_DWORD *)(a1 + 4);
  if (!*(_QWORD *)(a1 + 32))
  {
    sub_101946C44();
    goto LABEL_169;
  }
  v3 = &qword_1022A0000;
  if (!*(_BYTE *)(a1 + 48))
  {
    sub_101946DB4(qword_1022A0070 == -1);
    goto LABEL_169;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021A9268);
  v5 = qword_1022A0078;
  v6 = *(_BYTE *)(a1 + 120);
  if (os_log_type_enabled((os_log_t)qword_1022A0078, v6))
  {
    v7 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v7 = (_QWORD *)*v7;
    v8 = *(int *)(a1 + 4);
    if (v8 > 3)
      v9 = "StateUnknown";
    else
      v9 = (&off_1021A92E0)[v8];
    sub_1015A2E04(__p, v9);
    v10 = SHIBYTE(v109);
    v11 = *(_BYTE **)__p;
    sub_1012053F4(a2, v116);
    v12 = __p;
    if (v10 < 0)
      v12 = v11;
    if (v119 >= 0)
      v13 = v116;
    else
      v13 = *(_BYTE **)v116;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v7;
    v112 = 2080;
    v113 = v12;
    v114 = 2080;
    v115 = v13;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%scurrent_state,%s,event,%s", buf, 0x20u);
    if (v119 < 0)
      operator delete(*(void **)v116);
    v3 = &qword_1022A0000;
    if (SHIBYTE(v109) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021A9268);
    v63 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v63 = (_QWORD *)*v63;
    v64 = qword_1022A0078;
    v65 = *(unsigned __int8 *)(a1 + 120);
    sub_101205420(*(_DWORD *)(a1 + 4), v116);
    v66 = v119;
    v67 = *(_BYTE **)v116;
    sub_1012053F4(a2, v103);
    v68 = v116;
    if (v66 < 0)
      v68 = v67;
    if (v104 >= 0)
      v69 = v103;
    else
      v69 = (void **)v103[0];
    *(_DWORD *)__p = 136315650;
    *(_QWORD *)&__p[4] = v63;
    v107 = 2080;
    v108 = v68;
    v109 = 2080;
    v110 = v69;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v64, v65, "%scurrent_state,%s,event,%s", __p, 32, v101);
    v71 = v70;
    if (v104 < 0)
      operator delete(v103[0]);
    v3 = &qword_1022A0000;
    if (v119 < 0)
      operator delete(*(void **)v116);
    sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLEmergencyAML>::handleEvent(Event) [T = CLEmergencyAML]", "%s\n", v71);
    if (v71 != buf)
      free(v71);
  }
  v14 = *(_QWORD *)(a1 + 16);
  if (!v14)
    goto LABEL_31;
  v15 = (uint64_t **)(a1 + 8);
  v16 = *(_DWORD *)(a1 + 4);
  v17 = a1 + 16;
  do
  {
    v18 = *(_DWORD *)(v14 + 32);
    v19 = v18 < v16;
    if (v18 >= v16)
      v20 = (uint64_t *)v14;
    else
      v20 = (uint64_t *)(v14 + 8);
    if (!v19)
      v17 = v14;
    v14 = *v20;
  }
  while (*v20);
  if (v17 == a1 + 16 || v16 < *(_DWORD *)(v17 + 32))
  {
LABEL_31:
    sub_101946F28();
    goto LABEL_169;
  }
  v22 = *(uint64_t (**)(_QWORD *, uint64_t))(v17 + 40);
  v21 = *(_QWORD *)(v17 + 48);
  v23 = (_QWORD *)(*(_QWORD *)(a1 + 32) + (v21 >> 1));
  if ((v21 & 1) != 0)
    v22 = *(uint64_t (**)(_QWORD *, uint64_t))(*v23 + v22);
  v24 = v22(v23, a2);
  v25 = v24;
  v102 = v24;
  if (a2 <= 1 && (_DWORD)v24 != v105)
  {
    sub_101947378();
    goto LABEL_169;
  }
  if (*(_DWORD *)(a1 + 88) >= 2u)
  {
    if (v3[14] != -1)
      dispatch_once(&qword_1022A0070, &stru_1021A9268);
    v26 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v27 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v27 = (_QWORD *)*v27;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "%sNested invocation of state machine", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (v3[14] != -1)
        dispatch_once(&qword_1022A0070, &stru_1021A9268);
      v78 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v78 = (_QWORD *)*v78;
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v78;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "%sNested invocation of state machine", __p);
      v80 = (char *)v79;
      sub_100512490("Generic", 1, 0, 0, "State CLStateMachine<CLEmergencyAML>::handleEvent(Event) [T = CLEmergencyAML]", "%s\n", v79);
      if (v80 != buf)
        free(v80);
    }
  }
  if (v3[14] != -1)
    dispatch_once(&qword_1022A0070, &stru_1021A9268);
  v28 = qword_1022A0078;
  v29 = *(_BYTE *)(a1 + 120);
  if (os_log_type_enabled((os_log_t)qword_1022A0078, v29))
  {
    v30 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v30 = (_QWORD *)*v30;
    if (v25 > 3)
      v31 = "StateUnknown";
    else
      v31 = (&off_1021A92E0)[(int)v25];
    sub_1015A2E04(buf, v31);
    if (v114 >= 0)
      v32 = buf;
    else
      v32 = *(_BYTE **)buf;
    *(_DWORD *)__p = 136315394;
    *(_QWORD *)&__p[4] = v30;
    v107 = 2080;
    v108 = v32;
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "%snewState,%s", __p, 0x16u);
    if (SHIBYTE(v114) < 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v3[14] != -1)
      dispatch_once(&qword_1022A0070, &stru_1021A9268);
    v72 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v72 = (_QWORD *)*v72;
    v73 = qword_1022A0078;
    v74 = *(unsigned __int8 *)(a1 + 120);
    sub_101205420(v25, __p);
    if (v109 >= 0)
      v75 = __p;
    else
      v75 = *(_BYTE **)__p;
    *(_DWORD *)v116 = 136315394;
    *(_QWORD *)&v116[4] = v72;
    v117 = 2080;
    v118 = v75;
    LODWORD(v100) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v73, v74, "%snewState,%s", v116, v100);
    v77 = v76;
    if (SHIBYTE(v109) < 0)
      operator delete(*(void **)__p);
    sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLEmergencyAML>::handleEvent(Event) [T = CLEmergencyAML]", "%s\n", v77);
    if (v77 != buf)
      free(v77);
  }
  if ((_DWORD)v25 != v105)
  {
    if (v3[14] != -1)
      dispatch_once(&qword_1022A0070, &stru_1021A9268);
    v33 = qword_1022A0078;
    v34 = *(_BYTE *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1022A0078, v34))
    {
      v35 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v35 = (_QWORD *)*v35;
      if (v105 > 3)
        v36 = "StateUnknown";
      else
        v36 = (&off_1021A92E0)[v105];
      sub_1015A2E04(__p, v36);
      v37 = v3;
      v38 = SHIBYTE(v109);
      v39 = *(_BYTE **)__p;
      sub_1015A2E04(v116, "Exit");
      v40 = __p;
      if (v38 < 0)
        v40 = v39;
      if (v119 >= 0)
        v41 = v116;
      else
        v41 = *(_BYTE **)v116;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v35;
      v112 = 2080;
      v113 = v40;
      v114 = 2080;
      v115 = v41;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "%soldState,%s,event,%s", buf, 0x20u);
      if (v119 < 0)
        operator delete(*(void **)v116);
      v3 = v37;
      if (SHIBYTE(v109) < 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v3[14] != -1)
        dispatch_once(&qword_1022A0070, &stru_1021A9268);
      v81 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v81 = (_QWORD *)*v81;
      v82 = qword_1022A0078;
      v83 = *(unsigned __int8 *)(a1 + 120);
      sub_101205420(v105, v116);
      v84 = v3;
      v85 = v119;
      v86 = *(_BYTE **)v116;
      sub_1015A2E04(v103, "Exit");
      v87 = v116;
      if (v85 < 0)
        v87 = v86;
      if (v104 >= 0)
        v88 = v103;
      else
        v88 = (void **)v103[0];
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = v81;
      v107 = 2080;
      v108 = v87;
      v109 = 2080;
      v110 = v88;
      LODWORD(v100) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v82, v83, "%soldState,%s,event,%s", __p, v100, (const char *)(a1 + 8));
      v90 = v89;
      if (v104 < 0)
        operator delete(v103[0]);
      v3 = v84;
      v15 = (uint64_t **)v101;
      if (v119 < 0)
        operator delete(*(void **)v116);
      sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLEmergencyAML>::handleEvent(Event) [T = CLEmergencyAML]", "%s\n", v90);
      if (v90 != buf)
        free(v90);
    }
    v42 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)buf = &v105;
    v43 = sub_1000610B4(v15, (int *)&v105, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    v44 = v43[5];
    v45 = (uint64_t)v43[6];
    v46 = (_QWORD *)(v42 + (v45 >> 1));
    if ((v45 & 1) != 0)
      v44 = *(uint64_t **)(*v46 + v44);
    v47 = ((uint64_t (*)(_QWORD *, uint64_t))v44)(v46, 1);
    if (v47 == v105)
    {
      *(_DWORD *)(a1 + 4) = v25;
      if (v3[14] != -1)
        dispatch_once(&qword_1022A0070, &stru_1021A9268);
      v48 = qword_1022A0078;
      v49 = *(_BYTE *)(a1 + 120);
      if (os_log_type_enabled((os_log_t)qword_1022A0078, v49))
      {
        v50 = (_QWORD *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0)
          v50 = (_QWORD *)*v50;
        if (v25 > 3)
          v51 = "StateUnknown";
        else
          v51 = (&off_1021A92E0)[(int)v25];
        sub_1015A2E04(__p, v51);
        v52 = v3;
        v53 = SHIBYTE(v109);
        v54 = *(_BYTE **)__p;
        sub_1015A2E04(v116, "Enter");
        v55 = __p;
        if (v53 < 0)
          v55 = v54;
        if (v119 >= 0)
          v56 = v116;
        else
          v56 = *(_BYTE **)v116;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = v50;
        v112 = 2080;
        v113 = v55;
        v114 = 2080;
        v115 = v56;
        _os_log_impl((void *)&_mh_execute_header, v48, v49, "%snewState,%s,event,%s", buf, 0x20u);
        if (v119 < 0)
          operator delete(*(void **)v116);
        v3 = v52;
        if (SHIBYTE(v109) < 0)
          operator delete(*(void **)__p);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v3[14] != -1)
          dispatch_once(&qword_1022A0070, &stru_1021A9268);
        v91 = (_QWORD *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0)
          v91 = (_QWORD *)*v91;
        v92 = qword_1022A0078;
        v93 = *(unsigned __int8 *)(a1 + 120);
        sub_101205420(v25, v116);
        v94 = v119;
        v95 = *(_BYTE **)v116;
        sub_1015A2E04(v103, "Enter");
        v96 = v116;
        if (v94 < 0)
          v96 = v95;
        if (v104 >= 0)
          v97 = v103;
        else
          v97 = (void **)v103[0];
        *(_DWORD *)__p = 136315650;
        *(_QWORD *)&__p[4] = v91;
        v107 = 2080;
        v108 = v96;
        v109 = 2080;
        v110 = v97;
        LODWORD(v100) = 32;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v92, v93, "%snewState,%s,event,%s", __p, v100, v101);
        v99 = v98;
        if (v104 < 0)
          operator delete(v103[0]);
        if (v119 < 0)
          operator delete(*(void **)v116);
        sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLEmergencyAML>::handleEvent(Event) [T = CLEmergencyAML]", "%s\n", v99);
        if (v99 != buf)
          free(v99);
      }
      v57 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)buf = &v102;
      v58 = sub_1000610B4(v15, &v102, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      v59 = v58[5];
      v60 = (uint64_t)v58[6];
      v61 = (_QWORD *)(v57 + (v60 >> 1));
      if ((v60 & 1) != 0)
        v59 = *(uint64_t **)(*v61 + v59);
      v25 = ((uint64_t (*)(_QWORD *, _QWORD))v59)(v61, 0);
      if ((_DWORD)v25 == v102)
        goto LABEL_101;
      sub_101947098();
    }
    else
    {
      sub_101947208();
    }
LABEL_169:
    __break(1u);
  }
LABEL_101:
  --*(_DWORD *)(a1 + 88);
  return v25;
}

void sub_101208024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (*(char *)(v22 - 105) < 0)
    operator delete(*(void **)(v22 - 128));
  _Unwind_Resume(exception_object);
}

void sub_101208084(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4;

  v4 = *(_DWORD *)(a1 + 1440);
  if (v4 != a4)
  {
    sub_10139A564(a1, v4, a4);
    *(_DWORD *)(a1 + 1440) = a4;
  }
}

uint64_t sub_1012080BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_101202560(a1 + 1448, *(_DWORD *)a2, (_BYTE *)(a2 + 120), (const std::string *)(a2 + 1232), (const std::string *)(a2 + 1256));
  if ((_DWORD)v3)
    sub_1012072C4(a1 + 1496, 2);
  return v3;
}

uint64_t *sub_101208108(uint64_t a1, int a2, int a3, unsigned int a4, int a5, int a6)
{
  _QWORD *v11;
  uint64_t *result;
  uint64_t *v13;
  NSObject *v14;
  uint64_t v15;
  int v16;
  int v17;
  double v18;
  double v19;
  float v20;
  double v21;
  int v22;
  uint64_t i;
  void *v24;
  double v25;
  NSObject *v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  double v30;
  float v31;
  double v32;
  int v33;
  float v34;
  uint64_t j;
  void *v36;
  uint64_t v37[3];
  uint64_t v38[3];
  char *v39;
  _BYTE *v40;
  char *v41;
  double v42;
  double v43;
  unsigned int v44;
  void **v45;
  char v46;
  uint8_t buf[8];
  _BYTE v48[10];
  __int16 v49;
  int v50;
  __int16 v51;
  unsigned int v52;
  __int16 v53;
  int v54;
  __int16 v55;
  _BYTE v56[6];
  int v57;
  int v58;
  _DWORD v59[20];
  uint64_t v60;

  v44 = a4;
  v11 = (_QWORD *)(a1 + 1624);
  result = sub_100270BB8((_QWORD *)(a1 + 1624), &v44);
  v13 = result;
  if (result && *(_DWORD *)(a1 + 1448) == a2)
  {
    if (!a3)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021A91C8);
      v26 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68290050;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v48 = 2082;
        *(_QWORD *)&v48[2] = "";
        v49 = 1026;
        v50 = a2;
        v51 = 1026;
        v52 = v44;
        v53 = 1026;
        v54 = a5;
        v55 = 1026;
        *(_DWORD *)v56 = a6;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AML received send failure notification\", \"inst\":%{public}d, \"messageID\":%{public}d, \"sendError\":%{public}d, \"modemError\":%{public}d}", buf, 0x2Au);
      }
      *(_DWORD *)(a1 + 352) = a5;
      *(_DWORD *)(a1 + 356) = a6;
      if (sub_100182290((uint64_t)(v13 + 3)))
      {
        v27 = sub_10139A4A4(a1, (unsigned int *)(a1 + 340), 16);
        v28 = sub_10120E21C(v27, *(_DWORD *)(a1 + 2496));
        v29 = *(_DWORD *)(a1 + 2496);
        if (v28 >= 4)
          v29 = 5;
        *(_DWORD *)(a1 + 2496) = v29;
        ++*(_DWORD *)(a1 + 424);
        ++*(_DWORD *)(a1 + 2484);
      }
      goto LABEL_30;
    }
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021A91C8);
    v14 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v48 = 2082;
      *(_QWORD *)&v48[2] = "";
      v49 = 1026;
      v50 = a2;
      v51 = 1026;
      v52 = v44;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AML received send success notification\", \"inst\":%{public}d, \"messageID\":%{public}d}", buf, 0x1Eu);
    }
    if (sub_100182290((uint64_t)(v13 + 3)))
    {
      v15 = sub_10139A4A4(a1, (unsigned int *)(a1 + 340), 0);
      v16 = sub_10120E21C(v15, *(_DWORD *)(a1 + 2496));
      v17 = *(_DWORD *)(a1 + 2496);
      if (v16)
        v17 = 0;
      *(_DWORD *)(a1 + 2496) = v17;
      ++*(_DWORD *)(a1 + 420);
      ++*(_DWORD *)(a1 + 2480);
      v42 = 0.0;
      v43 = 0.0;
      sub_101390CF8((uint64_t)(v13 + 3), &v43, &v42);
      v18 = *(double *)(a1 + 248);
      if (v18 < 0.0 || v18 >= v43)
      {
        v19 = v42;
        *(double *)(a1 + 248) = v43;
        *(double *)(a1 + 256) = v19;
        sub_1017E2E94(a1 + 192, (uint64_t)(v13 + 3));
      }
      v20 = *(float *)(a1 + 2500);
      if (v20 < 0.0)
      {
        v21 = *((double *)v13 + 66) - *(double *)(a1 + 176);
        *(_DWORD *)buf = 89;
        *(_DWORD *)v48 = (int)v21;
        v22 = *((_DWORD *)v13 + 30);
        v54 = 0;
        *(_DWORD *)&v56[2] = 90;
        v57 = v22;
        v58 = 0;
        v40 = 0;
        v41 = 0;
        v39 = 0;
        v45 = (void **)&v39;
        v46 = 0;
        v39 = (char *)operator new(0x50uLL);
        v40 = v39;
        v41 = v39 + 80;
        v40 = (_BYTE *)sub_1006AB40C((uint64_t)&v41, (uint64_t)buf, (uint64_t)v59, (uint64_t)v39);
        for (i = 48; i != -32; i -= 40)
          sub_1001F8644((uint64_t)&buf[i]);
        v24 = *(void **)(a1 + 2512);
        memset(v38, 0, sizeof(v38));
        sub_1006AB68C(v38, (uint64_t)v39, (uint64_t)v40, 0xCCCCCCCCCCCCCCCDLL * ((v40 - v39) >> 3));
        objc_msgSend(v24, "setMeasurements:", sub_1006A7590(v38));
        *(_QWORD *)buf = v38;
        sub_1006AB5A0((void ***)buf);
        *(_QWORD *)buf = &v39;
        sub_1006AB5A0((void ***)buf);
        v25 = v43;
        goto LABEL_27;
      }
      v30 = v20;
      v25 = v43;
      if (v43 <= v30)
      {
LABEL_27:
        v31 = v25;
        *(float *)(a1 + 2500) = v31;
        v32 = *((double *)v13 + 66) - *(double *)(a1 + 176);
        *(_DWORD *)buf = 91;
        *(_DWORD *)v48 = (int)v32;
        v33 = *((_DWORD *)v13 + 30);
        v54 = 0;
        *(_DWORD *)&v56[2] = 92;
        v57 = v33;
        v58 = 0;
        v59[0] = 93;
        *(float *)&v59[2] = v31;
        v34 = v42;
        v59[8] = 4;
        v59[10] = 94;
        *(float *)&v59[12] = v34;
        v59[18] = 4;
        v40 = 0;
        v41 = 0;
        v39 = 0;
        v45 = (void **)&v39;
        v46 = 0;
        v39 = (char *)operator new(0xA0uLL);
        v40 = v39;
        v41 = v39 + 160;
        v40 = (_BYTE *)sub_1006AB40C((uint64_t)&v41, (uint64_t)buf, (uint64_t)&v60, (uint64_t)v39);
        for (j = 128; j != -32; j -= 40)
          sub_1001F8644((uint64_t)&buf[j]);
        v36 = *(void **)(a1 + 2512);
        memset(v37, 0, sizeof(v37));
        sub_1006AB68C(v37, (uint64_t)v39, (uint64_t)v40, 0xCCCCCCCCCCCCCCCDLL * ((v40 - v39) >> 3));
        objc_msgSend(v36, "setMeasurements:", sub_1006A7590(v37));
        *(_QWORD *)buf = v37;
        sub_1006AB5A0((void ***)buf);
        *(_QWORD *)buf = &v39;
        sub_1006AB5A0((void ***)buf);
      }
    }
LABEL_30:
    sub_1000592D8(v11, v13, (uint64_t)buf);
    sub_10120ED30((uint64_t)buf, 0);
    return (uint64_t *)sub_1012072C4(a1 + 1496, 6);
  }
  return result;
}

void sub_101208660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23)
{
  a23 = (void **)&a15;
  sub_1006AB5A0(&a23);
  _Unwind_Resume(a1);
}

uint64_t sub_101208710(uint64_t a1, unsigned int *a2, unsigned int a3)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t result;
  unsigned int v8;

  v5 = sub_10120E21C(a1, *a2);
  v6 = v5;
  result = sub_10120E21C(v5, a3);
  v8 = *a2;
  if (v6 >= result)
    v8 = a3;
  *a2 = v8;
  return result;
}

uint64_t sub_10120875C(uint64_t a1)
{
  return sub_1012072C4(a1 + 1496, 4);
}

uint64_t sub_101208768(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021A91C8);
  v2 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#AML handleImsRegStatusChange", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021A91C8);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#AML handleImsRegStatusChange", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLEmergencyAML::handleImsRegStatusChange(SimInstance)", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return sub_1012072C4(a1 + 1496, 9);
}

uint64_t sub_101208904(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  _BOOL4 v4;
  _BOOL4 v5;
  NSObject *v6;
  _BOOL4 v7;
  _BOOL4 v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  NSObject *v13;
  NSObject *v15;
  const char *v16;
  uint8_t *v17;
  const char *v18;
  uint8_t *v19;
  const char *v20;
  uint8_t *v21;
  _WORD v22[8];
  uint8_t buf[1640];

  v2 = (int *)(a1 + 1448);
  v3 = sub_101202BE0((int *)(a1 + 1448));
  v4 = sub_101202F78(v2);
  v5 = v4;
  if ((v3 & 1) == 0 && !v4)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021A91C8);
    v6 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#AML expectedState returning #1 Disabled", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021A91C8);
      v22[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#AML expectedState returning #1 Disabled", v22, 2);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "CLEmergencyAML::State CLEmergencyAML::expectedState()", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
    return 0;
  }
  if (sub_100CD599C(a1 + 112))
  {
    v7 = 1;
  }
  else
  {
    if (!*(_BYTE *)(a1 + 160))
    {
      sub_100CD594C(a1 + 112);
      goto LABEL_32;
    }
    v7 = sub_100CD597C(a1 + 112);
  }
  if (!sub_100CD594C(a1 + 112) && v7)
  {
    v8 = sub_10120B33C(a1);
    if (!v5 || !sub_100CD596C(a1 + 112) || !v8)
      goto LABEL_20;
    *(_DWORD *)buf = *(_DWORD *)(a1 + 1448);
    v9 = *(_QWORD *)(a1 + 56);
    if (!v9)
      sub_10025FD1C();
    if (!*(_BYTE *)((*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v9 + 48))(v9, buf) + 5))
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021A91C8);
      v15 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "#AML expectedState returning SessionOverNAS", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021A91C8);
        v22[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#AML expectedState returning SessionOverNAS", v22, 2);
        v21 = (uint8_t *)v20;
        sub_100512490("Generic", 1, 0, 2, "CLEmergencyAML::State CLEmergencyAML::expectedState()", "%s\n", v20);
        if (v21 != buf)
          free(v21);
      }
      return 3;
    }
    else
    {
LABEL_20:
      if ((_DWORD)v3 && !sub_100CD593C(a1 + 112))
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021A91C8);
        v10 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#AML expectedState returning Session", buf, 2u);
        }
        v3 = 2;
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021A91C8);
          v22[0] = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#AML expectedState returning Session", v22, 2);
          v12 = (uint8_t *)v11;
          sub_100512490("Generic", 1, 0, 2, "CLEmergencyAML::State CLEmergencyAML::expectedState()", "%s\n", v11);
          if (v12 != buf)
            free(v12);
          return 2;
        }
      }
    }
    return v3;
  }
LABEL_32:
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021A91C8);
  v13 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#AML expectedState returning #2 Disabled", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021A91C8);
    v22[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#AML expectedState returning #2 Disabled", v22, 2);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "CLEmergencyAML::State CLEmergencyAML::expectedState()", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  return v3;
}

void sub_101208F08(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t i;
  void *v9;
  void *v10;
  const char *v11;
  uint8_t *v12;
  void *__p[2];
  uint64_t v14;
  uint64_t v15[3];
  char *v16;
  _BYTE *v17;
  _QWORD v18[3];
  char v19;
  uint8_t buf[8];
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  char v36;
  int v37;
  uint64_t v38;

  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_1021A91E8);
  v2 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ca Submit AML Data to CA", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021A91E8);
    LOWORD(v16) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 0, "#ca Submit AML Data to CA", &v16, 2);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyAML::submitAMLSessionDatatoCA()", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  v3 = *(_DWORD *)(a1 + 2488);
  *(_DWORD *)buf = 95;
  v21 = v3;
  v4 = *(_DWORD *)(a1 + 2492);
  v22 = 0;
  v23 = 97;
  v24 = v4;
  v25 = 0;
  v5 = *(_DWORD *)(a1 + 2480);
  v26 = 98;
  v27 = v5;
  v6 = *(_DWORD *)(a1 + 2484);
  v28 = 0;
  v29 = 99;
  v30 = v6;
  v31 = 0;
  v7 = *(_DWORD *)(a1 + 2496);
  v32 = 96;
  v33 = v7;
  LOBYTE(v7) = *(_BYTE *)(a1 + 2504);
  v34 = 0;
  v35 = 100;
  v36 = v7;
  v37 = 7;
  v17 = 0;
  v18[0] = 0;
  v16 = 0;
  v18[2] = &v16;
  v19 = 0;
  v16 = (char *)operator new(0xF0uLL);
  v17 = v16;
  v18[0] = v16 + 240;
  v17 = (_BYTE *)sub_1006AB40C((uint64_t)v18, (uint64_t)buf, (uint64_t)&v38, (uint64_t)v16);
  for (i = 208; i != -32; i -= 40)
    sub_1001F8644((uint64_t)&buf[i]);
  v9 = *(void **)(a1 + 2512);
  memset(v15, 0, sizeof(v15));
  sub_1006AB68C(v15, (uint64_t)v16, (uint64_t)v17, 0xCCCCCCCCCCCCCCCDLL * ((v17 - v16) >> 3));
  objc_msgSend(v9, "setMeasurements:", sub_1006A7590(v15));
  *(_QWORD *)buf = v15;
  sub_1006AB5A0((void ***)buf);
  v10 = *(void **)(a1 + 2512);
  if (byte_10231120F < 0)
  {
    sub_100115CE4(__p, (void *)xmmword_1023111F8, *((unint64_t *)&xmmword_1023111F8 + 1));
  }
  else
  {
    *(_OWORD *)__p = xmmword_1023111F8;
    v14 = unk_102311208;
  }
  objc_msgSend(v10, "submitEvent:", sub_1007FE6A8((__int128 *)__p));
  if (SHIBYTE(v14) < 0)
    operator delete(__p[0]);
  *(_QWORD *)buf = &v16;
  sub_1006AB5A0((void ***)buf);
}

void sub_101209230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26)
{
  _Unwind_Resume(exception_object);
}

void sub_1012092B8(uint64_t a1, signed int a2)
{
  uint64_t v4;
  uint64_t v5;
  signed int v6;
  BOOL v7;
  uint64_t *v8;
  NSObject *v9;
  NSObject *v10;
  os_log_type_t v11;
  _QWORD *v12;
  void **v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  char *v18;
  char *v19;
  NSObject *v20;
  _QWORD *v21;
  void **v22;
  _QWORD *v23;
  uint64_t v24;
  _BYTE *v25;
  char *v26;
  _BYTE buf[12];
  __int16 v28;
  void **v29;
  char v30;
  int v31;
  _QWORD *v32;
  __int16 v33;
  _BYTE *v34;
  void *__p[2];
  char v36;

  v4 = *(_QWORD *)(a1 + 64);
  if (!v4)
    goto LABEL_33;
  v5 = a1 + 64;
  do
  {
    v6 = *(_DWORD *)(v4 + 32);
    v7 = v6 < a2;
    if (v6 >= a2)
      v8 = (uint64_t *)v4;
    else
      v8 = (uint64_t *)(v4 + 8);
    if (!v7)
      v5 = v4;
    v4 = *v8;
  }
  while (*v8);
  if (v5 != a1 + 64 && *(_DWORD *)(v5 + 32) <= a2 && (v9 = *(NSObject **)(v5 + 40)) != 0)
  {
    dispatch_source_set_timer(v9, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021A9268);
    v10 = qword_1022A0078;
    v11 = *(_BYTE *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1022A0078, v11))
    {
      v12 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v12 = (_QWORD *)*v12;
      sub_1012053F4(a2, __p);
      if (v36 >= 0)
        v13 = __p;
      else
        v13 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v12;
      v28 = 2080;
      v29 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%scancel timer,event,%s", buf, 0x16u);
      if (v36 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021A9268);
      v14 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v14 = (_QWORD *)*v14;
      v15 = qword_1022A0078;
      v16 = *(unsigned __int8 *)(a1 + 120);
      sub_1012053F4(a2, buf);
      if (v30 >= 0)
        v17 = buf;
      else
        v17 = *(_BYTE **)buf;
      v31 = 136315394;
      v32 = v14;
      v33 = 2080;
      v34 = v17;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v15, v16, "%scancel timer,event,%s", (const char *)&v31, 22);
      v19 = v18;
      if (v30 < 0)
        operator delete(*(void **)buf);
LABEL_54:
      sub_100512490("Generic", 1, 0, 2, "void CLStateMachine<CLEmergencyAML>::cancelTimeoutEvent(Event) [T = CLEmergencyAML]", "%s\n", v19);
      if (v19 != (char *)__p)
        free(v19);
    }
  }
  else
  {
LABEL_33:
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021A9268);
    v20 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v21 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v21 = (_QWORD *)*v21;
      sub_1012053F4(a2, __p);
      if (v36 >= 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v21;
      v28 = 2080;
      v29 = v22;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#Warning,%s,cancel timer,notFound, event,%s", buf, 0x16u);
      if (v36 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021A9268);
      v23 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v23 = (_QWORD *)*v23;
      v24 = qword_1022A0078;
      sub_1012053F4(a2, buf);
      if (v30 >= 0)
        v25 = buf;
      else
        v25 = *(_BYTE **)buf;
      v31 = 136315394;
      v32 = v23;
      v33 = 2080;
      v34 = v25;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v24, 0, "#Warning,%s,cancel timer,notFound, event,%s", (const char *)&v31, 22);
      v19 = v26;
      if (v30 < 0)
        operator delete(*(void **)buf);
      goto LABEL_54;
    }
  }
}

void sub_101209748(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  void *v8;
  const char *v9;
  uint8_t *v10;
  uint64_t v11[3];
  char *v12;
  _BYTE *v13;
  _QWORD v14[3];
  char v15;
  uint8_t buf[8];
  _DWORD v17[8];
  uint64_t v18;

  if (*(_QWORD *)(a1 + 1648))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021A91C8);
    v4 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#AML Submitting previous session AWD report before starting new session", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021A91C8);
      LOWORD(v12) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#AML Submitting previous session AWD report before starting new session", &v12, 2);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyAML::processEnterInSessionStates(BOOL)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    sub_10139A508(a1);
    sub_101208F08(a1);
    sub_10120ED74(a1 + 1624);
    sub_1012092B8(a1 + 1496, 7);
  }
  *(CFAbsoluteTime *)(a1 + 168) = CFAbsoluteTimeGetCurrent();
  *(double *)(a1 + 176) = sub_1001FCBB4();
  *(_WORD *)(a1 + 1664) = 0;
  *(_QWORD *)(a1 + 1672) = 0;
  sub_10021CBD4(a1 + 1680);
  sub_10139A314(a1);
  sub_10120E3BC(a1 + 2480);
  v5 = sub_101203310((int *)(a1 + 1448));
  if (a2)
  {
    sub_10120B984(a1 + 1496, 5, *((double *)v5 + 21));
  }
  else
  {
    sub_10120B984(a1 + 1496, 5, *((double *)v5 + 11));
    sub_101399E28(a1, 1);
    sub_10120B984(a1 + 1496, 8, 60.0);
  }
  *(_BYTE *)(a1 + 2504) = a2;
  v6 = sub_101203310((int *)(a1 + 1448));
  sub_101201FB8((int *)v6);
  v7 = sub_100217A98((unsigned int *)(a1 + 112));
  *(_DWORD *)buf = 79;
  v17[0] = v7;
  v17[6] = 0;
  v13 = 0;
  v14[0] = 0;
  v12 = 0;
  v14[2] = &v12;
  v15 = 0;
  v12 = (char *)operator new(0x28uLL);
  v13 = v12;
  v14[0] = v12 + 40;
  v13 = (_BYTE *)sub_1006AB40C((uint64_t)v14, (uint64_t)buf, (uint64_t)&v18, (uint64_t)v12);
  sub_1001F8644((uint64_t)v17);
  v8 = *(void **)(a1 + 2512);
  memset(v11, 0, sizeof(v11));
  sub_1006AB68C(v11, (uint64_t)v12, (uint64_t)v13, 0xCCCCCCCCCCCCCCCDLL * ((v13 - v12) >> 3));
  objc_msgSend(v8, "setMeasurements:", sub_1006A7590(v11));
  *(_QWORD *)buf = v11;
  sub_1006AB5A0((void ***)buf);
  *(_QWORD *)buf = &v12;
  sub_1006AB5A0((void ***)buf);
}

void sub_101209A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21)
{
  a21 = (void **)&a15;
  sub_1006AB5A0(&a21);
  _Unwind_Resume(a1);
}

void sub_101209AD0(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  v2 = a1 + 1496;
  sub_1012092B8(a1 + 1496, 5);
  sub_1012092B8(v2, 8);
  if (*(_BYTE *)(a1 + 184))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021A91C8);
    v3 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#AML session assertion active during Session Exit,clearing", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021A91C8);
      v6[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#AML session assertion active during Session Exit,clearing", v6, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyAML::processExitInSessionStates()", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
    sub_101399E28(a1, 0);
  }
  if (*(_QWORD *)(a1 + 1648))
  {
    sub_10120B984(v2, 7, 180.0);
  }
  else
  {
    sub_10139A508(a1);
    sub_101208F08(a1);
  }
}

uint64_t sub_101209CC0(uint64_t a1)
{
  uint64_t result;
  NSObject *v3;
  uint64_t v4;
  int v5;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  result = sub_101208904(a1);
  if (!(_DWORD)result)
  {
    if (sub_100CD599C(a1 + 112))
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021A91C8);
      v3 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning #AML unexpectedly disabled during active emergency call", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021A91C8);
        v8[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #AML unexpectedly disabled during active emergency call", v8, 2);
        v7 = (uint8_t *)v6;
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyAML::processConfigChangeInSessionStates()", "%s\n", v6);
        if (v7 != buf)
          free(v7);
      }
    }
    sub_101399E28(a1, 0);
    v4 = sub_10139A4A4(a1, (unsigned int *)(a1 + 340), 14);
    result = sub_10120E21C(v4, *(_DWORD *)(a1 + 2496));
    v5 = *(_DWORD *)(a1 + 2496);
    if (result >= 0xFFFFFFFD)
      v5 = 8;
    *(_DWORD *)(a1 + 2496) = v5;
  }
  return result;
}

uint64_t sub_101209E9C(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  double v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  double *v15;
  double v16;
  NSObject *v17;
  const char *v18;
  NSObject *v19;
  const char *v20;
  uint8_t *v21;
  NSObject *v22;
  const char *v23;
  const char *v24;
  const char *v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  double v29;
  _BYTE v30[4];
  double v31;
  double v32;
  double v33;
  std::__shared_weak_count *v34;
  int v35;
  double v36;
  __int16 v37;
  double v38;
  uint8_t buf[4];
  double v40;
  __int16 v41;
  double v42;

  v2 = (int *)(a1 + 1448);
  if (!*((_BYTE *)sub_101203310((int *)(a1 + 1448)) + 96) || !*(_BYTE *)(a1 + 1664))
    return 0;
  v3 = *(_QWORD *)(a1 + 104);
  if (!v3)
    sub_10025FD1C();
  (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)v3 + 48))(v30);
  if ((sub_100182290((uint64_t)v30) & 1) == 0)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021A91C8);
    v9 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning #AML,shouldSendLocation,cached location is invalid", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_22;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021A91C8);
    LOWORD(v35) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #AML,shouldSendLocation,cached location is invalid", &v35, 2);
    v7 = (uint8_t *)v24;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyAML::shouldSendLocation()", "%s\n", v24);
    goto LABEL_66;
  }
  if (*(_BYTE *)(a1 + 1665) || (sub_100182290(a1 + 1680) & 1) == 0)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021A91C8);
    v10 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#AML,shouldSendLocation,sending,last send attempt had no location", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_28;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021A91C8);
    LOWORD(v35) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#AML,shouldSendLocation,sending,last send attempt had no location", &v35, 2);
    v21 = (uint8_t *)v25;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyAML::shouldSendLocation()", "%s\n", v25);
    goto LABEL_71;
  }
  v4 = sub_1001FCBB4() - *(double *)(a1 + 1672);
  if (v4 >= *((double *)sub_101203310(v2) + 14))
  {
    v28 = 0;
    v29 = 0.0;
    sub_101390CF8((uint64_t)v30, &v29, (double *)&v28);
    v26 = 0;
    v27 = 0.0;
    sub_101390CF8(a1 + 1680, &v27, (double *)&v26);
    if (v27 - v29 >= 20.0)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021A91C8);
      v19 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134349312;
        v40 = v27;
        v41 = 2050;
        v42 = v29;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#AML,shouldSendLocation,sending,lower hunc,previous,%{public}f,current,%{public}f", buf, 0x16u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_28;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021A91C8);
      v35 = 134349312;
      v36 = v27;
      v37 = 2050;
      v38 = v29;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#AML,shouldSendLocation,sending,lower hunc,previous,%{public}f,current,%{public}f", &v35, 22);
      v21 = (uint8_t *)v20;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyAML::shouldSendLocation()", "%s\n", v20);
    }
    else
    {
      v15 = (double *)(a1 + 1684);
      v16 = sub_100124100(*v15, v15[1], v31, v32);
      if (v16 < 20.0 || v16 < v15[2] && v16 < v33)
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021A91C8);
        v17 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#AML,shouldSendLocation,not sending,no significant changes", buf, 2u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_22;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021A91C8);
        LOWORD(v35) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#AML,shouldSendLocation,not sending,no significant changes", &v35, 2);
        v7 = (uint8_t *)v18;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyAML::shouldSendLocation()", "%s\n", v18);
        goto LABEL_66;
      }
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021A91C8);
      v22 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134349056;
        v40 = v16;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#AML,shouldSendLocation,sending,location changed significantly,dist,%{public}f", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 2))
      {
LABEL_28:
        v8 = 1;
        goto LABEL_29;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021A91C8);
      v35 = 134349056;
      v36 = v16;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#AML,shouldSendLocation,sending,location changed significantly,dist,%{public}f", &v35, 12);
      v21 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyAML::shouldSendLocation()", "%s\n", v23);
    }
LABEL_71:
    if (v21 != buf)
      free(v21);
    goto LABEL_28;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021A91C8);
  v5 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134349056;
    v40 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#AML,shouldSendLocation,not sending,last send was too recent,tDiff,%{public}f", buf, 0xCu);
  }
  if (!sub_1001BFF7C(115, 2))
    goto LABEL_22;
  bzero(buf, 0x65CuLL);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021A91C8);
  v35 = 134349056;
  v36 = v4;
  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#AML,shouldSendLocation,not sending,last send was too recent,tDiff,%{public}f", &v35, 12);
  v7 = (uint8_t *)v6;
  sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyAML::shouldSendLocation()", "%s\n", v6);
LABEL_66:
  if (v7 != buf)
    free(v7);
LABEL_22:
  v8 = 0;
LABEL_29:
  v11 = v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return v8;
}

void sub_10120A7A4(_Unwind_Exception *a1)
{
  sub_100261F44((uint64_t)&STACK[0x2D8]);
  _Unwind_Resume(a1);
}

void sub_10120A7EC(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSString *v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  NSObject *v17;
  uint64_t v18;
  unsigned int v19;
  int *v20;
  int v21;
  BOOL v22;
  int v23;
  NSObject *v24;
  uint64_t v25;
  unsigned int v26;
  NSString *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  NSObject *v35;
  const char *v36;
  unsigned int v37;
  unsigned int v38;
  NSObject *v39;
  uint64_t *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  char v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  std::__shared_weak_count *v56;
  unint64_t *p_shared_owners;
  unint64_t v58;
  uint64_t v59;
  const char *v60;
  const char *v61;
  uint8_t *v62;
  const char *v63;
  uint8_t *v64;
  const char *v65;
  uint8_t *v66;
  const char *v67;
  uint8_t *v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  _OWORD v78[2];
  _BYTE v79[513];
  uint64_t v80;
  std::__shared_weak_count *v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  char v88;
  int v89;
  _BYTE v90[10];
  uint8_t buf[1640];

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1) & 1) != 0)
  {
    *(_DWORD *)buf = *(_DWORD *)(a1 + 1448);
    v4 = *(_QWORD *)(a1 + 56);
    if (!v4)
      sub_10025FD1C();
    v5 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v4 + 48))(v4, buf);
    sub_10139A464(a1, v5 + 136, a1 + 136);
    *(_DWORD *)buf = *(_DWORD *)(a1 + 1448);
    v6 = *(_QWORD *)(a1 + 56);
    if (!v6)
      sub_10025FD1C();
    v7 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v6 + 48))(v6, buf);
    sub_10120C454(a1, v7 + 136, a1 + 136);
    if ((a2 & 1) != 0)
      goto LABEL_8;
    *(_DWORD *)buf = *(_DWORD *)(a1 + 1448);
    v8 = *(_QWORD *)(a1 + 56);
    if (!v8)
      sub_10025FD1C();
    if (*(_BYTE *)((*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v8 + 48))(v8, buf) + 4))
    {
LABEL_8:
      v9 = *(_QWORD *)(a1 + 104);
      if (!v9)
        sub_10025FD1C();
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v9 + 48))(&v70);
      sub_10139A3E0(a1, (uint64_t)&v70);
      if (sub_100182290((uint64_t)&v70))
      {
        ++*(_DWORD *)(a1 + 412);
        ++*(_DWORD *)(a1 + 2488);
        *(_BYTE *)(a1 + 1665) = 0;
        v10 = sub_10120C61C(a1, (uint64_t)&v70);
      }
      else
      {
        ++*(_DWORD *)(a1 + 416);
        ++*(_DWORD *)(a1 + 2492);
        *(_BYTE *)(a1 + 1665) = 1;
        v11 = sub_10139A4A4(a1, (unsigned int *)(a1 + 340), 2);
        v12 = sub_10120E21C(v11, *(_DWORD *)(a1 + 2496));
        v13 = *(_DWORD *)(a1 + 2496);
        if (v12 >= 5)
          v13 = 6;
        *(_DWORD *)(a1 + 2496) = v13;
        if (*(_BYTE *)(a1 + 1664))
        {
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021A91C8);
          v14 = qword_1022A0088;
          if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#AML not sending no fix message", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_1021A91C8);
            LOWORD(v89) = 0;
            LODWORD(v69) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#AML not sending no fix message", &v89, v69);
            v16 = (uint8_t *)v15;
            sub_100512490("Generic", 1, 0, 2, "void CLEmergencyAML::sendLocation(BOOL)", "%s\n", v15);
            if (v16 != buf)
              free(v16);
          }
          goto LABEL_58;
        }
        v10 = sub_10120CABC(a1);
      }
      v27 = v10;
      *(_BYTE *)(a1 + 1664) = 1;
      *(double *)(a1 + 1672) = sub_1001FCBB4();
      v28 = v77;
      *(_OWORD *)(a1 + 1776) = v76;
      *(_OWORD *)(a1 + 1792) = v28;
      *(_OWORD *)(a1 + 1808) = v78[0];
      v29 = v73;
      *(_OWORD *)(a1 + 1712) = v72;
      *(_OWORD *)(a1 + 1728) = v29;
      v30 = v75;
      *(_OWORD *)(a1 + 1744) = v74;
      *(_OWORD *)(a1 + 1760) = v30;
      v31 = v71;
      *(_OWORD *)(a1 + 1680) = v70;
      *(_OWORD *)(a1 + 1820) = *(_OWORD *)((char *)v78 + 12);
      *(_OWORD *)(a1 + 1696) = v31;
      memcpy((void *)(a1 + 1840), v79, 0x201uLL);
      sub_100349198((_QWORD *)(a1 + 2360), &v80);
      v32 = v87;
      *(_OWORD *)(a1 + 2440) = v86;
      *(_OWORD *)(a1 + 2456) = v32;
      *(_BYTE *)(a1 + 2472) = v88;
      v33 = v83;
      *(_OWORD *)(a1 + 2376) = v82;
      *(_OWORD *)(a1 + 2392) = v33;
      v34 = v85;
      *(_OWORD *)(a1 + 2408) = v84;
      *(_OWORD *)(a1 + 2424) = v34;
      *(_BYTE *)(a1 + 2504) = a2;
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021A91C8);
      v35 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        v36 = -[NSString UTF8String](v27, "UTF8String");
        *(_DWORD *)buf = 136380675;
        *(_QWORD *)&buf[4] = v36;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#AML preparing to send SMS message: %{private}s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021A91C8);
        v59 = qword_1022A0088;
        v60 = -[NSString UTF8String](v27, "UTF8String");
        v89 = 136380675;
        *(_QWORD *)v90 = v60;
        LODWORD(v69) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v59, 0, "#AML preparing to send SMS message: %{private}s", &v89, v69);
        v62 = (uint8_t *)v61;
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyAML::sendLocation(BOOL)", "%s\n", v61);
        if (v62 != buf)
          free(v62);
      }
      HIDWORD(v69) = 0;
      if (*((_BYTE *)sub_101203310((int *)(a1 + 1448)) + 80))
        v37 = sub_10120CD58(a1, v27, (uint64_t)&v69 + 4);
      else
        v37 = sub_10120D454(a1, (uint64_t)v27, (uint64_t)&v69 + 4, a2);
      v38 = v37;
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021A91C8);
      v39 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67240448;
        *(_DWORD *)&buf[4] = v38;
        *(_WORD *)&buf[8] = 1026;
        *(_DWORD *)&buf[10] = HIDWORD(v69);
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "#AML message valid,%{public}d,messageID,%{public}d", buf, 0xEu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021A91C8);
        v89 = 67240448;
        *(_DWORD *)v90 = v38;
        *(_WORD *)&v90[4] = 1026;
        *(_DWORD *)&v90[6] = HIDWORD(v69);
        LODWORD(v69) = 14;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#AML message valid,%{public}d,messageID,%{public}d", &v89, v69);
        v64 = (uint8_t *)v63;
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyAML::sendLocation(BOOL)", "%s\n", v63);
        if (v64 != buf)
          free(v64);
      }
      if ((v38 & 1) != 0)
      {
        *(_QWORD *)buf = (char *)&v69 + 4;
        v40 = sub_10120EDD8(a1 + 1624, (unsigned int *)&v69 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        v42 = v74;
        v41 = v75;
        v43 = v73;
        *(_OWORD *)(v40 + 7) = v72;
        *(_OWORD *)(v40 + 9) = v43;
        v44 = *(_OWORD *)((char *)v78 + 12);
        v45 = v78[0];
        v46 = v77;
        *(_OWORD *)(v40 + 15) = v76;
        *(_OWORD *)(v40 + 17) = v46;
        *(_OWORD *)(v40 + 19) = v45;
        *(_OWORD *)((char *)v40 + 164) = v44;
        *(_OWORD *)(v40 + 11) = v42;
        *(_OWORD *)(v40 + 13) = v41;
        v47 = v71;
        *(_OWORD *)(v40 + 3) = v70;
        *(_OWORD *)(v40 + 5) = v47;
        memcpy(v40 + 23, v79, 0x201uLL);
        sub_100349198(v40 + 88, &v80);
        v49 = v83;
        v48 = v84;
        *((_OWORD *)v40 + 45) = v82;
        *((_OWORD *)v40 + 46) = v49;
        v50 = v88;
        v51 = v87;
        v52 = v85;
        *((_OWORD *)v40 + 49) = v86;
        *((_OWORD *)v40 + 50) = v51;
        *((_BYTE *)v40 + 816) = v50;
        *((_OWORD *)v40 + 47) = v48;
        *((_OWORD *)v40 + 48) = v52;
      }
      else
      {
        v53 = sub_10139A4A4(a1, (unsigned int *)(a1 + 340), 28);
        v54 = sub_10120E21C(v53, *(_DWORD *)(a1 + 2496));
        v55 = *(_DWORD *)(a1 + 2496);
        if (v54 >= 2)
          v55 = 3;
        *(_DWORD *)(a1 + 2496) = v55;
      }
LABEL_58:
      v56 = v81;
      if (v81)
      {
        p_shared_owners = (unint64_t *)&v81->__shared_owners_;
        do
          v58 = __ldaxr(p_shared_owners);
        while (__stlxr(v58 - 1, p_shared_owners));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
      }
      return;
    }
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021A91C8);
    v24 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#AML,sendLocation,roaming not supported", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021A91C8);
      LOWORD(v70) = 0;
      LODWORD(v69) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#AML,sendLocation,roaming not supported", &v70, v69);
      v68 = (uint8_t *)v67;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyAML::sendLocation(BOOL)", "%s\n", v67);
      if (v68 != buf)
        free(v68);
    }
    v25 = sub_10139A4A4(a1, (unsigned int *)(a1 + 340), 29);
    v26 = sub_10120E21C(v25, *(_DWORD *)(a1 + 2496));
    v20 = (int *)(a1 + 2496);
    v21 = *(_DWORD *)(a1 + 2496);
    v22 = v26 >= 3;
    v23 = 4;
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021A91C8);
    v17 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "#AML attempted to send location when not enabled", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021A91C8);
      LOWORD(v70) = 0;
      LODWORD(v69) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 17, "#AML attempted to send location when not enabled", &v70, v69);
      v66 = (uint8_t *)v65;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyAML::sendLocation(BOOL)", "%s\n", v65);
      if (v66 != buf)
        free(v66);
    }
    v18 = sub_10139A4A4(a1, (unsigned int *)(a1 + 340), 12);
    v19 = sub_10120E21C(v18, *(_DWORD *)(a1 + 2496));
    v20 = (int *)(a1 + 2496);
    v21 = *(_DWORD *)(a1 + 2496);
    v22 = v19 >= 2;
    v23 = 2;
  }
  if (v22)
    v21 = v23;
  *v20 = v21;
}

void sub_10120B2AC(_Unwind_Exception *a1)
{
  sub_100261F44((uint64_t)&STACK[0x2B8]);
  _Unwind_Resume(a1);
}

void sub_10120B2E8(uint64_t a1)
{
  int *v2;
  double v3;

  v2 = (int *)(a1 + 1448);
  if (*((_BYTE *)sub_101203310((int *)(a1 + 1448)) + 96))
  {
    v3 = *((double *)sub_101203310(v2) + 13);
    sub_10120B984(a1 + 1496, 5, v3);
  }
}

BOOL sub_10120B33C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  std::string *v5;
  std::string::size_type size;
  std::string *v7;
  __int128 v8;
  NSObject *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  void **v15;
  std::string::size_type v16;
  std::string *v17;
  uint64_t v18;
  BOOL v19;
  unsigned __int8 *v20;
  uint64_t v21;
  size_t v22;
  void *v23;
  void **v24;
  unsigned __int8 *v25;
  uint64_t v26;
  std::string *v27;
  NSObject *v28;
  std::string::size_type v29;
  void **v31;
  const char *v32;
  std::string *v33;
  void **v34;
  const char *v35;
  std::string *v36;
  uint64_t v37;
  std::string *__s2;
  std::string v39;
  void *__p[2];
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  void **v46;
  std::string v47;

  LODWORD(v47.__r_.__value_.__l.__data_) = *(_DWORD *)(a1 + 1448);
  v2 = *(_QWORD *)(a1 + 56);
  if (!v2)
    sub_10025FD1C();
  v3 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v2 + 48))(v2, &v47);
  v4 = sub_101203310((int *)(a1 + 1448));
  v42 = 0;
  v43 = 0;
  v44 = 0;
  sub_100259B94((char *)&v42, (__int128 *)v4[18], (__int128 *)v4[19], 0xAAAAAAAAAAAAAAABLL * ((v4[19] - v4[18]) >> 3));
  std::to_string(&v47, *(_DWORD *)(v3 + 8));
  std::to_string(&v39, *(_DWORD *)(v3 + 12));
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = &v39;
  else
    v5 = (std::string *)v39.__r_.__value_.__r.__words[0];
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  else
    size = v39.__r_.__value_.__l.__size_;
  v7 = std::string::append(&v47, (const std::string::value_type *)v5, size);
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v41 = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  std::to_string(&v39, *(_DWORD *)(v3 + 8));
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021A91C8);
  v9 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    v10 = __p;
    if (v41 < 0)
      v10 = (void **)__p[0];
    LODWORD(v47.__r_.__value_.__l.__data_) = 136380675;
    *(std::string::size_type *)((char *)v47.__r_.__value_.__r.__words + 4) = (std::string::size_type)v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#AML current Camped PLMN %{private}s", (uint8_t *)&v47, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&v47, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021A91C8);
    v31 = __p;
    if (v41 < 0)
      v31 = (void **)__p[0];
    v45 = 136380675;
    v46 = v31;
    _os_log_send_and_compose_impl(2, 0, &v47, 1628, &_mh_execute_header, qword_1022A0088, 2, "#AML current Camped PLMN %{private}s", &v45, 12);
    v33 = (std::string *)v32;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyAML::isCampedMCCorPLMNMatchWithBundleKey()", "%s\n", v32);
    if (v33 != &v47)
      free(v33);
  }
  v11 = v42;
  if (v43 == v42)
  {
LABEL_56:
    v19 = 0;
    goto LABEL_64;
  }
  v12 = 0;
  v13 = (v43 - v42) / 24;
  if (v41 >= 0)
    v14 = (void *)HIBYTE(v41);
  else
    v14 = __p[1];
  if (v41 >= 0)
    v15 = __p;
  else
    v15 = (void **)__p[0];
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  else
    v16 = v39.__r_.__value_.__l.__size_;
  v17 = &v39;
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v17 = (std::string *)v39.__r_.__value_.__r.__words[0];
  __s2 = v17;
  if (v13 <= 1)
    v18 = 1;
  else
    v18 = (v43 - v42) / 24;
  v19 = 1;
  while (1)
  {
    v20 = (unsigned __int8 *)(v11 + 24 * v12);
    v21 = v20[23];
    v22 = *((_QWORD *)v20 + 1);
    if ((v21 & 0x80u) == 0)
      v23 = (void *)v20[23];
    else
      v23 = (void *)*((_QWORD *)v20 + 1);
    if (v23 != v14)
      goto LABEL_45;
    if ((v21 & 0x80) != 0)
      break;
    if (!v20[23])
      goto LABEL_57;
    v24 = v15;
    v25 = (unsigned __int8 *)(v11 + 24 * v12);
    v26 = v20[23];
    while (*v25 == *(unsigned __int8 *)v24)
    {
      ++v25;
      v24 = (void **)((char *)v24 + 1);
      if (!--v26)
        goto LABEL_57;
    }
LABEL_45:
    if (v23 == (void *)v16)
    {
      if ((v21 & 0x80) != 0)
        goto LABEL_54;
      if (!v20[23])
        goto LABEL_57;
      v27 = __s2;
      while (*v20 == v27->__r_.__value_.__s.__data_[0])
      {
        ++v20;
        v27 = (std::string *)((char *)v27 + 1);
        if (!--v21)
          goto LABEL_57;
      }
    }
LABEL_55:
    v19 = v13 > ++v12;
    if (v12 == v18)
      goto LABEL_56;
  }
  if (!memcmp(*(const void **)v20, v15, *((_QWORD *)v20 + 1)))
    goto LABEL_57;
  if (v22 != v16)
    goto LABEL_55;
LABEL_54:
  if (memcmp(*(const void **)v20, __s2, v22))
    goto LABEL_55;
LABEL_57:
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021A91C8);
  v28 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    v29 = v42 + 24 * v12;
    if (*(char *)(v29 + 23) < 0)
      v29 = *(_QWORD *)v29;
    LODWORD(v47.__r_.__value_.__l.__data_) = 136380675;
    *(std::string::size_type *)((char *)v47.__r_.__value_.__r.__words + 4) = v29;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "#AML cbMCCOrPLMNArray Matched MCC or PLMN %{private}s", (uint8_t *)&v47, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&v47, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021A91C8);
    v34 = (void **)(v42 + 24 * v12);
    if (*((char *)v34 + 23) < 0)
      v34 = (void **)*v34;
    v45 = 136380675;
    v46 = v34;
    LODWORD(v37) = 12;
    _os_log_send_and_compose_impl(2, 0, &v47, 1628, &_mh_execute_header, qword_1022A0088, 2, "#AML cbMCCOrPLMNArray Matched MCC or PLMN %{private}s", &v45, v37);
    v36 = (std::string *)v35;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyAML::isCampedMCCorPLMNMatchWithBundleKey()", "%s\n", v35);
    if (v36 != &v47)
      free(v36);
  }
LABEL_64:
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (SHIBYTE(v41) < 0)
    operator delete(__p[0]);
  v47.__r_.__value_.__r.__words[0] = (std::string::size_type)&v42;
  sub_100259608((void ***)&v47);
  return v19;
}

void sub_10120B8F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  a29 = &a24;
  sub_100259608((void ***)&a29);
  _Unwind_Resume(a1);
}

void sub_10120B984(uint64_t a1, signed int a2, double a3)
{
  NSObject *v4;
  NSObject *v7;
  _QWORD *v8;
  _BYTE *v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  signed int v17;
  BOOL v18;
  uint64_t *v19;
  NSObject *v20;
  uint64_t *v21;
  dispatch_time_t v22;
  NSObject *v23;
  os_log_type_t v24;
  _QWORD *v25;
  _BYTE *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  char *v31;
  NSObject *v32;
  _QWORD *v33;
  _BYTE *v34;
  _QWORD *v35;
  uint64_t v36;
  _BYTE *v37;
  char *v38;
  NSObject *v39;
  _QWORD *v40;
  NSObject *v41;
  NSObject *v42;
  NSObject *v43;
  _QWORD *v44;
  const char *v45;
  char *v46;
  double v47;
  _QWORD handler[5];
  unsigned int v49;
  unsigned int v50;
  _BYTE v51[12];
  __int16 v52;
  _BYTE *v53;
  char v54;
  _BYTE __p[12];
  __int16 v56;
  _BYTE *v57;
  __int16 v58;
  double v59;
  _BYTE buf[1634];

  v50 = a2;
  v4 = *(NSObject **)(a1 + 80);
  if (!v4)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021A9268);
    v39 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v40 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v40 = (_QWORD *)*v40;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v40;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "%sInvoking timers without callback queue set", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021A9268);
      v44 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v44 = (_QWORD *)*v44;
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v44;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "%sInvoking timers without callback queue set", __p);
      v46 = (char *)v45;
      sub_100512490("Generic", 1, 0, 0, "void CLStateMachine<CLEmergencyAML>::setTimeoutEvent(Event, double) [T = CLEmergencyAML]", "%s\n", v45);
      if (v46 != buf)
        free(v46);
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021A9268);
    v41 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(_QWORD *)&buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021A9268);
    }
    v42 = qword_1022A0078;
    if (os_signpost_enabled((os_log_t)qword_1022A0078))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(_QWORD *)&buf[30] = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v42, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021A9268);
    }
    v43 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(_QWORD *)&buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/CLStateMachine.h", 173, "setTimeoutEvent");
    __break(1u);
  }
  if (a3 < 0.0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021A9268);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      v8 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v8 = (_QWORD *)*v8;
      sub_1012053F4(a2, __p);
      if (v58 >= 0)
        v9 = __p;
      else
        v9 = *(_BYTE **)__p;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v8;
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v9;
      *(_WORD *)&buf[22] = 2050;
      *(double *)&buf[24] = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "%sCannot start timer, event, %{public}s, timeOutSec, %{public}.2f", buf, 0x20u);
      if (SHIBYTE(v58) < 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021A9268);
      v10 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v10 = (_QWORD *)*v10;
      v11 = qword_1022A0078;
      sub_1012053F4(a2, v51);
      if (v54 >= 0)
        v12 = v51;
      else
        v12 = *(_BYTE **)v51;
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = v10;
      v56 = 2082;
      v57 = v12;
      v58 = 2050;
      v59 = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 17, "%sCannot start timer, event, %{public}s, timeOutSec, %{public}.2f", __p, 32);
      v14 = v13;
      if (v54 < 0)
        operator delete(*(void **)v51);
LABEL_79:
      sub_100512490("Generic", 1, 0, 0, "void CLStateMachine<CLEmergencyAML>::setTimeoutEvent(Event, double) [T = CLEmergencyAML]", "%s\n", v14);
LABEL_80:
      if (v14 != buf)
        free(v14);
      return;
    }
    return;
  }
  v15 = *(_QWORD *)(a1 + 64);
  if (v15)
  {
    v16 = a1 + 64;
    do
    {
      v17 = *(_DWORD *)(v15 + 32);
      v18 = v17 < a2;
      if (v17 >= a2)
        v19 = (uint64_t *)v15;
      else
        v19 = (uint64_t *)(v15 + 8);
      if (!v18)
        v16 = v15;
      v15 = *v19;
    }
    while (*v19);
    if (v16 != a1 + 64 && *(_DWORD *)(v16 + 32) <= a2)
    {
      v20 = *(NSObject **)(v16 + 40);
      if (v20)
      {
LABEL_37:
        v22 = dispatch_time(0, (uint64_t)(a3 * 1000000000.0));
        dispatch_source_set_timer(v20, v22, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021A9268);
        v23 = qword_1022A0078;
        v24 = *(_BYTE *)(a1 + 120);
        if (os_log_type_enabled((os_log_t)qword_1022A0078, v24))
        {
          v25 = (_QWORD *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0)
            v25 = (_QWORD *)*v25;
          sub_1012053F4(v50, __p);
          if (v58 >= 0)
            v26 = __p;
          else
            v26 = *(_BYTE **)__p;
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = v25;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v26;
          *(_WORD *)&buf[22] = 2048;
          *(double *)&buf[24] = a3;
          _os_log_impl((void *)&_mh_execute_header, v23, v24, "%sevent,%s,timeout,%.2f", buf, 0x20u);
          if (SHIBYTE(v58) < 0)
            operator delete(*(void **)__p);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021A9268);
          v27 = (_QWORD *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0)
            v27 = (_QWORD *)*v27;
          v28 = qword_1022A0078;
          v29 = *(unsigned __int8 *)(a1 + 120);
          sub_1012053F4(v50, v51);
          if (v54 >= 0)
            v30 = v51;
          else
            v30 = *(_BYTE **)v51;
          *(_DWORD *)__p = 136315650;
          *(_QWORD *)&__p[4] = v27;
          v56 = 2080;
          v57 = v30;
          v58 = 2048;
          v59 = a3;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v28, v29, "%sevent,%s,timeout,%.2f", __p, 32, v47);
          v14 = v31;
          if (v54 < 0)
            operator delete(*(void **)v51);
          sub_100512490("Generic", 1, 0, 2, "void CLStateMachine<CLEmergencyAML>::setTimeoutEvent(Event, double) [T = CLEmergencyAML]", "%s\n", v14);
          goto LABEL_80;
        }
        return;
      }
    }
  }
  v21 = (uint64_t *)dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v4);
  if (v21)
  {
    v20 = v21;
    *(_QWORD *)buf = &v50;
    sub_100041CE0((uint64_t **)(a1 + 56), (int *)&v50, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[5] = v21;
    dispatch_source_set_timer(v20, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_10120EDC8;
    handler[3] = &unk_10213D6C0;
    handler[4] = a1;
    v49 = v50;
    dispatch_source_set_event_handler(v20, handler);
    dispatch_resume(v20);
    goto LABEL_37;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021A9268);
  v32 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    v33 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v33 = (_QWORD *)*v33;
    sub_1012053F4(a2, buf);
    if (buf[23] >= 0)
      v34 = buf;
    else
      v34 = *(_BYTE **)buf;
    *(_DWORD *)__p = 136315394;
    *(_QWORD *)&__p[4] = v33;
    v56 = 2082;
    v57 = v34;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_FAULT, "%scannot create timer, event, %{public}s", __p, 0x16u);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021A9268);
    v35 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v35 = (_QWORD *)*v35;
    v36 = qword_1022A0078;
    sub_1012053F4(a2, __p);
    if (v58 >= 0)
      v37 = __p;
    else
      v37 = *(_BYTE **)__p;
    *(_DWORD *)v51 = 136315394;
    *(_QWORD *)&v51[4] = v35;
    v52 = 2082;
    v53 = v37;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v36, 17, "%scannot create timer, event, %{public}s", v51, 22);
    v14 = v38;
    if (SHIBYTE(v58) < 0)
      operator delete(*(void **)__p);
    goto LABEL_79;
  }
}

void sub_10120C454(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  int v7;
  int v9;
  int v10;
  void *v11;
  uint64_t v12[3];
  char *v13;
  _BYTE *v14;
  _QWORD v15[2];
  char v16;
  void **v17;
  _DWORD v18[8];
  uint64_t v19;

  v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 8);
  v5 = *(unsigned __int8 *)(a3 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a3 + 8);
  v6 = v5 == 0;
  if (v5)
    v7 = 3;
  else
    v7 = 1;
  if (v6 || v4 == 0)
    v9 = 2;
  else
    v9 = 4;
  if (v4)
    v10 = v9;
  else
    v10 = v7;
  LODWORD(v17) = 31;
  v18[0] = v10;
  v18[6] = 0;
  v14 = 0;
  v15[0] = 0;
  v13 = 0;
  v15[1] = &v13;
  v16 = 0;
  v13 = (char *)operator new(0x28uLL);
  v14 = v13;
  v15[0] = v13 + 40;
  v14 = (_BYTE *)sub_1006AB40C((uint64_t)v15, (uint64_t)&v17, (uint64_t)&v19, (uint64_t)v13);
  sub_1001F8644((uint64_t)v18);
  v11 = *(void **)(a1 + 2512);
  memset(v12, 0, sizeof(v12));
  sub_1006AB68C(v12, (uint64_t)v13, (uint64_t)v14, 0xCCCCCCCCCCCCCCCDLL * ((v14 - v13) >> 3));
  objc_msgSend(v11, "setMeasurements:", sub_1006A7590(v12));
  v17 = (void **)v12;
  sub_1006AB5A0(&v17);
  v17 = (void **)&v13;
  sub_1006AB5A0(&v17);
}

void sub_10120C5C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17)
{
  a17 = (void **)&a12;
  sub_1006AB5A0(&a17);
  _Unwind_Resume(a1);
}

NSString *sub_10120C61C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  id v5;
  double v6;
  double *v7;
  double *v8;
  id v9;
  NSObject *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  _UNKNOWN **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSString *v22;
  uint64_t v23;
  uint64_t v25;
  const char *v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  int v35;
  _BYTE v36[14];
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  double v40;
  uint8_t buf[4];
  _BYTE v42[14];
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  double v46;

  *(_DWORD *)buf = *(_DWORD *)(a1 + 1448);
  v2 = *(_QWORD *)(a1 + 56);
  if (!v2)
    sub_10025FD1C();
  v4 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v2 + 48))(v2, buf);
  v5 = objc_alloc_init((Class)NSDateFormatter);
  objc_msgSend(v5, "setTimeZone:", +[NSTimeZone timeZoneWithAbbreviation:](NSTimeZone, "timeZoneWithAbbreviation:", CFSTR("UTC")));
  objc_msgSend(v5, "setDateFormat:", CFSTR("yyyyMMddHHmmss"));
  v6 = *(double *)(a2 + 184);
  v7 = (double *)sub_100B94758();
  v8 = (double *)(a2 + 76);
  if (v6 != v7[3])
    v8 = (double *)(a2 + 184);
  v9 = objc_msgSend(v5, "stringFromDate:", +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", *v8));
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021A91C8);
  v10 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v11 = objc_msgSend(v9, "UTF8String");
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)v42 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#AML sending valid fix from time %{public}s", buf, 0xCu);
  }
  v12 = sub_1001BFF7C(115, 2);
  if ((_DWORD)v12)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021A91C8);
    v25 = qword_1022A0088;
    v35 = 136446210;
    *(_QWORD *)v36 = objc_msgSend(v9, "UTF8String");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v25, 0, "#AML sending valid fix from time %{public}s", &v35, 12);
    v27 = (uint8_t *)v26;
    v12 = sub_100512490("Generic", 1, 0, 2, "NSString *CLEmergencyAML::createSmsWithLocation(const GNSS::DaemonLocation &)", "%s\n", v26);
    if (v27 != buf)
      free(v27);
  }
  v13 = sub_10120DAF4(v12, *(_DWORD *)(a2 + 96));
  v33 = 0;
  v34 = 0.0;
  sub_101390CF8(a2, &v34, (double *)&v33);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021A91C8);
  v14 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v15 = *(_QWORD *)(a2 + 4);
    v16 = *(_QWORD *)(a2 + 12);
    *(_DWORD *)buf = 67240961;
    *(_DWORD *)v42 = v13;
    *(_WORD *)&v42[4] = 2049;
    *(_QWORD *)&v42[6] = v15;
    v43 = 2049;
    v44 = v16;
    v45 = 2050;
    v46 = v34;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#AML method,%{public}c,lat,%{private}f,lon,%{private}f,acc,%{public}f", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021A91C8);
    v28 = *(_QWORD *)(a2 + 4);
    v29 = *(_QWORD *)(a2 + 12);
    v35 = 67240961;
    *(_DWORD *)v36 = v13;
    *(_WORD *)&v36[4] = 2049;
    *(_QWORD *)&v36[6] = v28;
    v37 = 2049;
    v38 = v29;
    v39 = 2050;
    v40 = v34;
    LODWORD(v32) = 38;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#AML method,%{public}c,lat,%{private}f,lon,%{private}f,acc,%{public}f", &v35, v32);
    v31 = (uint8_t *)v30;
    sub_100512490("Generic", 1, 0, 2, "NSString *CLEmergencyAML::createSmsWithLocation(const GNSS::DaemonLocation &)", "%s\n", v30);
    if (v31 != buf)
      free(v31);
  }
  v17 = CLPContext_ptr;
  LODWORD(v17) = vcvtad_u64_f64(v34);
  v20 = *(_QWORD *)(v4 + 64);
  v19 = v4 + 64;
  v18 = v20;
  if (*(char *)(v19 + 23) >= 0)
    v18 = v19;
  if (*(char *)(v19 + 71) >= 0)
    v21 = v19 + 48;
  else
    v21 = *(_QWORD *)(v19 + 48);
  v22 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("A\"ML=1;lt=%+.5f;lg=%+.5f;rd=%u;top=%@;lc=95;pm=%c;si=%s;ei=%s;mcc=%d;mnc=%d;ml="),
          *(_QWORD *)(a2 + 4),
          *(_QWORD *)(a2 + 12),
          v17,
          v9,
          v13,
          v18,
          v21,
          *(unsigned int *)(v19 - 56),
          *(unsigned int *)(v19 - 52));

  return sub_10120DCC0(v23, v22);
}

NSString *sub_10120CABC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSString *v12;
  uint64_t v13;
  uint64_t v15;
  const char *v16;
  uint8_t *v17;
  int v18;
  id v19;
  uint8_t buf[4];
  id v21;

  *(_DWORD *)buf = *(_DWORD *)(a1 + 1448);
  v1 = *(_QWORD *)(a1 + 56);
  if (!v1)
    sub_10025FD1C();
  v2 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v1 + 48))(v1, buf);
  v3 = objc_alloc_init((Class)NSDateFormatter);
  objc_msgSend(v3, "setTimeZone:", +[NSTimeZone timeZoneWithAbbreviation:](NSTimeZone, "timeZoneWithAbbreviation:", CFSTR("UTC")));
  objc_msgSend(v3, "setDateFormat:", CFSTR("yyyyMMddHHmmss"));
  v4 = objc_msgSend(v3, "stringFromDate:", +[NSDate now](NSDate, "now"));
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021A91C8);
  v5 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v6 = objc_msgSend(v4, "UTF8String");
    *(_DWORD *)buf = 136446210;
    v21 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#AML sending no fix message at time %{public}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021A91C8);
    v15 = qword_1022A0088;
    v18 = 136446210;
    v19 = objc_msgSend(v4, "UTF8String");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v15, 0, "#AML sending no fix message at time %{public}s", &v18, 12);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "NSString *CLEmergencyAML::createSmsWithoutLocation()", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  v9 = *(_QWORD *)(v2 + 64);
  v8 = v2 + 64;
  v7 = v9;
  if (*(char *)(v8 + 23) >= 0)
    v10 = v8;
  else
    v10 = v7;
  if (*(char *)(v8 + 71) >= 0)
    v11 = v8 + 48;
  else
    v11 = *(_QWORD *)(v8 + 48);
  v12 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("A\"ML=1;lt=+00.00000;lg=+000.00000;rd=N;top=%@;lc=0;pm=N;si=%s;ei=%s;mcc=%d;mnc=%d;ml="),
          v4,
          v10,
          v11,
          *(unsigned int *)(v8 - 56),
          *(unsigned int *)(v8 - 52));

  return sub_10120DCC0(v13, v12);
}

id sub_10120CD58(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t *v5;
  id v6;
  NSObject *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  _BYTE *v10;
  id v11;
  _OWORD *v12;
  _BYTE *v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  unsigned int v17;
  _BYTE *v18;
  int v19;
  id v20;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  _BYTE *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unsigned int v29;
  void **v30;
  int v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char v35;
  void *v36;
  uint64_t v37;
  unsigned __int8 v38;
  _BYTE v39[16];
  void *__dst[2];
  uint64_t v41;
  _BYTE buf[28];
  __int16 v43;
  int v44;
  _BYTE __p[28];
  __int16 v46;
  int v47;

  v5 = sub_101203310((int *)(a1 + 1448));
  v6 = objc_msgSend(objc_alloc((Class)CTXPCServiceSubscriptionContext), "initWithSlot:", sub_100599A6C(*(_DWORD *)v5));
  ctu::TextConverter::TextConverter((ctu::TextConverter *)v39);
  ctu::TextConverter::pushConversion(v39, 2, 0, 0x7FFFFFFFLL, 0);
  ctu::TextConverter::pushConversion(v39, 7, 0, 0x7FFFFFFFLL, 0);
  ctu::TextConverter::pushConversion(v39, 16, 0, 0x7FFFFFFFLL, 0);
  ctu::TextConverter::setSource((ctu::TextConverter *)v39, (const char *)objc_msgSend(a2, "UTF8String"), (unint64_t)objc_msgSend(a2, "length"));
  ctu::TextConverter::readChars(&v36, (ctu::TextConverter *)v39, 0x7FFFFFFFuLL);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021A91C8);
  v7 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (v38 & 0x80u) == 0 ? (unsigned __int8 *)&v36 : (unsigned __int8 *)v36;
    v9 = (v38 & 0x80u) == 0 ? v38 : v37;
    sub_1005173B8((int)&v35, v8, v9, (std::string *)__p);
    v10 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)buf = 136380675;
    *(_QWORD *)&buf[4] = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#AML binary packed message: %{private}s", buf, 0xCu);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021A91C8);
    v22 = qword_1022A0088;
    if ((v38 & 0x80u) == 0)
      v23 = (unsigned __int8 *)&v36;
    else
      v23 = (unsigned __int8 *)v36;
    if ((v38 & 0x80u) == 0)
      v24 = v38;
    else
      v24 = v37;
    sub_1005173B8((int)&v35, v23, v24, (std::string *)buf);
    if (buf[23] >= 0)
      v25 = buf;
    else
      v25 = *(_BYTE **)buf;
    LODWORD(__dst[0]) = 136380675;
    *(void **)((char *)__dst + 4) = v25;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v22, 0, "#AML binary packed message: %{private}s", __dst, 12);
    v27 = v26;
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyAML::sendBinarySms(NSString *, uint32_t &)", "%s\n", v27);
    if (v27 != __p)
      free(v27);
  }
  v11 = objc_alloc_init((Class)CTBinarySMS);
  objc_msgSend(v11, "setContext:", v6);
  objc_msgSend(v11, "setPortAddressingScheme:", 2);
  objc_msgSend(v11, "setSrcPort:", 0);
  objc_msgSend(v11, "setDstPort:", *((unsigned int *)v5 + 21));
  v12 = v5 + 7;
  if (*((char *)v5 + 79) < 0)
  {
    sub_100115CE4(__p, (void *)v5[7], v5[8]);
  }
  else
  {
    *(_OWORD *)__p = *v12;
    *(_QWORD *)&__p[16] = v5[9];
  }
  if (__p[23] >= 0)
    v13 = __p;
  else
    v13 = *(_BYTE **)__p;
  objc_msgSend(v11, "setDestinationAddress:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v13));
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  objc_msgSend(v11, "setSmscAddress:", 0);
  if ((v38 & 0x80u) == 0)
    v14 = &v36;
  else
    v14 = v36;
  if ((v38 & 0x80u) == 0)
    v15 = v38;
  else
    v15 = v37;
  objc_msgSend(v11, "setPayload:", +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v14, v15));
  objc_msgSend(v11, "setSmsType:", 1);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021A91C8);
  v16 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v17 = *(_DWORD *)v5;
    if (*((char *)v5 + 79) < 0)
    {
      sub_100115CE4(buf, (void *)v5[7], v5[8]);
    }
    else
    {
      *(_OWORD *)buf = *v12;
      *(_QWORD *)&buf[16] = v5[9];
    }
    v18 = buf;
    if (buf[23] < 0)
      v18 = *(_BYTE **)buf;
    v19 = *((_DWORD *)v5 + 21);
    *(_DWORD *)__p = 136381443;
    *(_QWORD *)&__p[4] = "binary";
    *(_WORD *)&__p[12] = 1026;
    *(_DWORD *)&__p[14] = v17;
    *(_WORD *)&__p[18] = 2081;
    *(_QWORD *)&__p[20] = v18;
    v46 = 1025;
    v47 = v19;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#AML sending %{private}s SMS on inst %{public}d to %{private}s,dstPort,%{private}d", __p, 0x22u);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021A91C8);
    v28 = qword_1022A0088;
    v29 = *(_DWORD *)v5;
    if (*((char *)v5 + 79) < 0)
    {
      sub_100115CE4(__dst, (void *)v5[7], v5[8]);
    }
    else
    {
      *(_OWORD *)__dst = *v12;
      v41 = v5[9];
    }
    v30 = __dst;
    if (v41 < 0)
      v30 = (void **)__dst[0];
    v31 = *((_DWORD *)v5 + 21);
    *(_DWORD *)buf = 136381443;
    *(_QWORD *)&buf[4] = "binary";
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = v29;
    *(_WORD *)&buf[18] = 2081;
    *(_QWORD *)&buf[20] = v30;
    v43 = 1025;
    v44 = v31;
    LODWORD(v34) = 34;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v28, 0, "#AML sending %{private}s SMS on inst %{public}d to %{private}s,dstPort,%{private}d", buf, v34);
    v33 = v32;
    if (SHIBYTE(v41) < 0)
      operator delete(__dst[0]);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyAML::sendBinarySms(NSString *, uint32_t &)", "%s\n", v33);
    if (v33 != __p)
      free(v33);
  }
  v20 = objc_msgSend(+[CTMessageCenter sharedMessageCenter](CTMessageCenter, "sharedMessageCenter"), "sendBinarySMS:trackingID:", v11, a3);

  if ((char)v38 < 0)
    operator delete(v36);
  ctu::TextConverter::~TextConverter((ctu::TextConverter *)v39);
  return v20;
}

void sub_10120D3E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a17 < 0)
    operator delete(__p);
  ctu::TextConverter::~TextConverter((ctu::TextConverter *)&a18);
  _Unwind_Resume(a1);
}

BOOL sub_10120D454(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int *v7;
  uint64_t *v8;
  id v9;
  id v10;
  uint64_t *v11;
  uint64_t *v12;
  _BYTE *v13;
  NSObject *v14;
  unsigned int v15;
  uint64_t *v16;
  _BYTE *v17;
  NSObject *v18;
  unsigned int v19;
  uint64_t *v20;
  _BYTE *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t *v24;
  _BYTE *v25;
  unsigned int v26;
  uint64_t v28;
  unsigned int v29;
  uint64_t *v30;
  void **v31;
  char *v32;
  char *v33;
  void **v34;
  char *v35;
  void *v36[2];
  uint64_t v37;
  _BYTE __dst[28];
  _BYTE __p[1624];

  v7 = (int *)(a1 + 1448);
  v8 = sub_101203310((int *)(a1 + 1448));
  v9 = objc_msgSend(objc_alloc((Class)CTXPCServiceSubscriptionContext), "initWithSlot:", sub_100599A6C(*(_DWORD *)v8));
  v10 = objc_alloc_init((Class)CTMessage);
  objc_msgSend(v10, "setContext:", v9);
  objc_msgSend(v10, "addText:", a2);
  if (a4)
  {
    v11 = sub_101203310(v7);
    if (*((char *)v11 + 143) < 0)
    {
      sub_100115CE4(__p, (void *)v11[15], v11[16]);
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)(v11 + 15);
      *(_QWORD *)&__p[16] = v11[17];
    }
    if (__p[23] >= 0)
      v13 = __p;
    else
      v13 = *(_BYTE **)__p;
    objc_msgSend(v10, "addRecipient:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v13));
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021A91C8);
    v14 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v15 = *(_DWORD *)v8;
      v16 = sub_101203310(v7);
      if (*((char *)v16 + 143) < 0)
      {
        sub_100115CE4(__dst, (void *)v16[15], v16[16]);
      }
      else
      {
        *(_OWORD *)__dst = *(_OWORD *)(v16 + 15);
        *(_QWORD *)&__dst[16] = v16[17];
      }
      v21 = __dst;
      if (__dst[23] < 0)
        v21 = *(_BYTE **)__dst;
      *(_DWORD *)__p = 136381187;
      *(_QWORD *)&__p[4] = "text";
      *(_WORD *)&__p[12] = 1026;
      *(_DWORD *)&__p[14] = v15;
      *(_WORD *)&__p[18] = 2081;
      *(_QWORD *)&__p[20] = v21;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#AML sending %{private}s SMS on inst %{public}d to %{private}s", __p, 0x1Cu);
      if ((__dst[23] & 0x80000000) != 0)
        operator delete(*(void **)__dst);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021A91C8);
      v22 = qword_1022A0088;
      v23 = *(_DWORD *)v8;
      v24 = sub_101203310(v7);
      if (*((char *)v24 + 143) < 0)
      {
        sub_100115CE4(v36, (void *)v24[15], v24[16]);
      }
      else
      {
        *(_OWORD *)v36 = *(_OWORD *)(v24 + 15);
        v37 = v24[17];
      }
      v31 = v36;
      if (v37 < 0)
        v31 = (void **)v36[0];
      *(_DWORD *)__dst = 136381187;
      *(_QWORD *)&__dst[4] = "text";
      *(_WORD *)&__dst[12] = 1026;
      *(_DWORD *)&__dst[14] = v23;
      *(_WORD *)&__dst[18] = 2081;
      *(_QWORD *)&__dst[20] = v31;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v22, 0, "#AML sending %{private}s SMS on inst %{public}d to %{private}s", __dst, 28);
      v33 = v32;
      if (SHIBYTE(v37) < 0)
        operator delete(v36[0]);
LABEL_60:
      sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencyAML::sendTextSms(NSString *, uint32_t &, BOOL)", "%s\n", v33);
      if (v33 != __p)
        free(v33);
    }
  }
  else
  {
    v12 = sub_101203310(v7);
    if (*((char *)v12 + 79) < 0)
    {
      sub_100115CE4(__p, (void *)v12[7], v12[8]);
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)(v12 + 7);
      *(_QWORD *)&__p[16] = v12[9];
    }
    if (__p[23] >= 0)
      v17 = __p;
    else
      v17 = *(_BYTE **)__p;
    objc_msgSend(v10, "addRecipient:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v17));
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021A91C8);
    v18 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v19 = *(_DWORD *)v8;
      v20 = sub_101203310(v7);
      if (*((char *)v20 + 79) < 0)
      {
        sub_100115CE4(__dst, (void *)v20[7], v20[8]);
      }
      else
      {
        *(_OWORD *)__dst = *(_OWORD *)(v20 + 7);
        *(_QWORD *)&__dst[16] = v20[9];
      }
      v25 = __dst;
      if (__dst[23] < 0)
        v25 = *(_BYTE **)__dst;
      *(_DWORD *)__p = 136381187;
      *(_QWORD *)&__p[4] = "text";
      *(_WORD *)&__p[12] = 1026;
      *(_DWORD *)&__p[14] = v19;
      *(_WORD *)&__p[18] = 2081;
      *(_QWORD *)&__p[20] = v25;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#AML sending %{private}s SMS on inst %{public}d to %{private}s", __p, 0x1Cu);
      if ((__dst[23] & 0x80000000) != 0)
        operator delete(*(void **)__dst);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021A91C8);
      v28 = qword_1022A0088;
      v29 = *(_DWORD *)v8;
      v30 = sub_101203310(v7);
      if (*((char *)v30 + 79) < 0)
      {
        sub_100115CE4(v36, (void *)v30[7], v30[8]);
      }
      else
      {
        *(_OWORD *)v36 = *(_OWORD *)(v30 + 7);
        v37 = v30[9];
      }
      v34 = v36;
      if (v37 < 0)
        v34 = (void **)v36[0];
      *(_DWORD *)__dst = 136381187;
      *(_QWORD *)&__dst[4] = "text";
      *(_WORD *)&__dst[12] = 1026;
      *(_DWORD *)&__dst[14] = v29;
      *(_WORD *)&__dst[18] = 2081;
      *(_QWORD *)&__dst[20] = v34;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v28, 0, "#AML sending %{private}s SMS on inst %{public}d to %{private}s", __dst, 28);
      v33 = v35;
      if (SHIBYTE(v37) < 0)
        operator delete(v36[0]);
      goto LABEL_60;
    }
  }
  objc_msgSend(v10, "setMessageType:", 1);
  objc_msgSend(v10, "setBypassSupportedMessageModesCheck:", 1);
  objc_msgSend(v10, "setSmsType:", 1);
  v26 = objc_msgSend(+[CTMessageCenter sharedMessageCenter](CTMessageCenter, "sharedMessageCenter"), "sendSMS:withMoreToFollow:trackingID:", v10, 0, a3);

  return v26 == 0;
}

void sub_10120DACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10120DAF4(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  int v3;
  unsigned int v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  result = 67;
  if (a2 <= 0xE)
  {
    v3 = 1 << a2;
    if (((1 << a2) & 0x5025) != 0)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021A91C8);
      v5 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning #AML Valid location with unknown or obsolete type", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021A91C8);
        v8[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #AML Valid location with unknown or obsolete type", v8, 2);
        v7 = (uint8_t *)v6;
        sub_100512490("Generic", 1, 0, 2, "char CLEmergencyAML::positioningMethod(CLLocationType)", "%s\n", v6);
        if (v7 != buf)
          free(v7);
      }
      return 67;
    }
    else
    {
      if ((v3 & 0x20A) != 0)
        v4 = 71;
      else
        v4 = 67;
      if ((v3 & 0x2C10) != 0)
        return 87;
      else
        return v4;
    }
  }
  return result;
}

NSString *sub_10120DCC0(uint64_t a1, void *a2)
{
  unsigned int v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  NSObject *v8;
  const char *v10;
  uint8_t *v11;
  _DWORD v12[4];
  uint8_t buf[4];
  int v14;

  v3 = objc_msgSend(a2, "length");
  v4 = 0;
  do
  {
    v5 = v4 + v3;
    v6 = -[NSString length](+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%d"), v5), "length");
    v7 = v4 == v6;
    v4 = v6;
  }
  while (!v7);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021A91C8);
  v8 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#AML total message length,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021A91C8);
    v12[0] = 67240192;
    v12[1] = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#AML total message length,%{public}d", v12, 8);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "NSString *CLEmergencyAML::stringWithAppendedLength(NSString *)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@%d"), a2, v5);
}

uint64_t *sub_10120DEC4(uint64_t a1)
{
  int *v2;
  uint64_t *v3;
  void **v4;
  uint64_t *v5;
  void **v6;
  uint64_t *result;
  int v8;
  __int128 v9;
  uint64_t v10;

  v2 = (int *)(a1 + 1448);
  v3 = sub_101203310((int *)(a1 + 1448));
  if (*((char *)v3 + 31) < 0)
  {
    sub_100115CE4(&v9, (void *)v3[1], v3[2]);
  }
  else
  {
    v9 = *(_OWORD *)(v3 + 1);
    v10 = v3[3];
  }
  v4 = (void **)(a1 + 1152);
  if (*(char *)(a1 + 1175) < 0)
    operator delete(*v4);
  *(_OWORD *)v4 = v9;
  *(_QWORD *)(a1 + 1168) = v10;
  v5 = sub_101203310(v2);
  if (*((char *)v5 + 55) < 0)
  {
    sub_100115CE4(&v9, (void *)v5[4], v5[5]);
  }
  else
  {
    v9 = *((_OWORD *)v5 + 2);
    v10 = v5[6];
  }
  v6 = (void **)(a1 + 1176);
  if (*(char *)(a1 + 1199) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = v9;
  *(_QWORD *)(a1 + 1192) = v10;
  *(_DWORD *)(a1 + 280) = 4;
  result = sub_101203310(v2);
  if (*((_BYTE *)result + 80))
    v8 = 7;
  else
    v8 = 6;
  *(_DWORD *)(a1 + 284) = v8;
  *(_DWORD *)(a1 + 276) = 3;
  *(_DWORD *)(a1 + 328) = 2;
  return result;
}

uint64_t sub_10120DFD8(uint64_t a1, int a2)
{
  uint64_t result;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (a2 > 25)
  {
    switch(a2)
    {
      case 26:
        return 4294967294;
      case 29:
        return 3;
      case 28:
        return 2;
      default:
LABEL_12:
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021A91C8);
        v3 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning #AML unexpected error code", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021A91C8);
          v6[0] = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #AML unexpected error code", v6, 2);
          v5 = (uint8_t *)v4;
          sub_100512490("Generic", 1, 0, 2, "virtual uint32_t CLEmergencyAML::getErrorCodePriority(Emergency::SessionErrorCode)", "%s\n", v4);
          if (v5 != buf)
            free(v5);
        }
        return 0xFFFFFFFFLL;
    }
  }
  else
  {
    result = 1;
    switch(a2)
    {
      case 0:
        return result;
      case 2:
        result = 5;
        break;
      case 7:
      case 12:
        return 2;
      case 10:
      case 14:
        result = 4294967293;
        break;
      case 16:
        result = 4;
        break;
      default:
        goto LABEL_12;
    }
  }
  return result;
}

uint64_t sub_10120E21C(uint64_t a1, unsigned int a2)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (a2 < 0xA)
    return dword_101C47590[a2];
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021A91C8);
  v3 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning #AML unexpected error code", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021A91C8);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning #AML unexpected error code", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "uint32_t CLEmergencyAML::getAMLErrorCodePriority(CLEmergencyAML::AMLSessionErrorCode)", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return 0xFFFFFFFFLL;
}

void sub_10120E3BC(uint64_t a1)
{
  NSObject *v2;
  _DWORD v3[2];
  __int16 v4;
  const char *v5;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021A91C8);
  v2 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    v3[0] = 68289026;
    v3[1] = 0;
    v4 = 2082;
    v5 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#awd CLEmergencySessionReport::reset\"}", (uint8_t *)v3, 0x12u);
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0xBF80000000000009;
  *(_BYTE *)(a1 + 24) = 0;
}

BOOL sub_10120E4A8(uint64_t a1)
{
  return sub_101202BE0((int *)(a1 + 1448)) || sub_101208904(a1) == 3;
}

BOOL sub_10120E4E8(uint64_t a1)
{
  return sub_101202F78((int *)(a1 + 1448));
}

void sub_10120E4F0(id a1)
{
  qword_1022A0088 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

void sub_10120E51C(id a1)
{
  qword_1022A02A8 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

uint64_t sub_10120E548(uint64_t a1)
{
  void *v2;

  sub_10120E580(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_10120E580(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_10120E5BC((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_10120E5BC(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 152);
  sub_100259608(&v2);
  if (*(char *)(a1 + 151) < 0)
    operator delete(*(void **)(a1 + 128));
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
}

uint64_t *sub_10120E630(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *i;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD v23[2];
  char v24;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (uint64_t *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = a1 + 16;
  v13 = operator new(0xC8uLL);
  v23[0] = v13;
  v23[1] = a1 + 16;
  *v13 = 0;
  v13[1] = v6;
  sub_10120E884((uint64_t)(v13 + 2), a3);
  v24 = 1;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    sub_10012E444(a1, v19);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *(_QWORD *)v23[0] = *v20;
    *v20 = v23[0];
  }
  else
  {
    *(_QWORD *)v23[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v23[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v12;
    if (*(_QWORD *)v23[0])
    {
      v21 = *(_QWORD *)(*(_QWORD *)v23[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v21 >= v7)
          v21 %= v7;
      }
      else
      {
        v21 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v21) = v23[0];
    }
  }
  i = (uint64_t *)v23[0];
  v23[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_10120E938((uint64_t)v23, 0);
  return i;
}

void sub_10120E86C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10120E938((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

double sub_10120E884(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  double result;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v2 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v2;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v3 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v3;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v4 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = v4;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  v5 = *(_OWORD *)(a2 + 88);
  v6 = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v6;
  *(_OWORD *)(a1 + 88) = v5;
  v7 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = v7;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  result = *(double *)(a2 + 176);
  *(double *)(a1 + 176) = result;
  return result;
}

void sub_10120E938(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_10120E5BC((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void sub_10120E980(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10120E9A8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_10120E9E8(uint64_t a1, const void **a2, _QWORD *a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  void **v8;
  size_t v9;
  __int128 *v10;
  const void *v11;
  __int128 v12;
  uint64_t v13;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = *a3;
  v5 = a3[1];
  *(_QWORD *)(a1 + 40) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v8 = (void **)(a1 + 96);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 2;
  if (*((char *)a2 + 23) < 0)
  {
    if (a2[1])
      goto LABEL_6;
LABEL_21:
    sub_1019474E8();
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/CLStateMachine.h", 60, "CLStateMachine");
    __break(1u);
    return;
  }
  if (!*((_BYTE *)a2 + 23))
    goto LABEL_21;
LABEL_6:
  if (*((char *)a2 + 23) >= 0)
    v9 = *((unsigned __int8 *)a2 + 23);
  else
    v9 = (size_t)a2[1];
  sub_100259584((uint64_t)&v12, v9 + 1);
  if (v13 >= 0)
    v10 = &v12;
  else
    v10 = (__int128 *)v12;
  if (v9)
  {
    if (*((char *)a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = *a2;
    memmove(v10, v11, v9);
  }
  *(_WORD *)((char *)v10 + v9) = 44;
  if (*(char *)(a1 + 119) < 0)
    operator delete(*v8);
  *(_OWORD *)v8 = v12;
  *(_QWORD *)(a1 + 112) = v13;
}

void sub_10120EB6C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD **v5;
  void **v6;
  _QWORD **v7;

  if (*(char *)(v1 + 119) < 0)
    operator delete(*v6);
  sub_100008848(v4, *v7);
  sub_100261F44(v3);
  sub_100008848(v2, *v5);
  _Unwind_Resume(a1);
}

void sub_10120EBAC(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

uint64_t sub_10120EBD8(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 56;
  sub_10120EC40(*(_QWORD **)(a1 + 56), (_QWORD *)(a1 + 64), a1);
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  sub_100008848(v2, *(_QWORD **)(a1 + 64));
  sub_100261F44(a1 + 32);
  sub_100008848(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

uint64_t sub_10120EC40(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      sub_1012092B8(a3, *((_DWORD *)v5 + 8));
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != a2);
  }
  return a3;
}

uint64_t sub_10120ECBC(uint64_t a1)
{
  void *v2;

  sub_10120ECF4(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_10120ECF4(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_100261F44((uint64_t)(v2 + 88));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_10120ED30(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_100261F44((uint64_t)v2 + 704);
    operator delete(v2);
  }
}

void sub_10120ED74(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    sub_10120ECF4(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

uint64_t sub_10120EDC8(uint64_t a1)
{
  return sub_1012072C4(*(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

uint64_t *sub_10120EDD8(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *i;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[2];
  char v25;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (uint64_t *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = a1 + 16;
  v14 = operator new(0x338uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *v14 = 0;
  v14[1] = v7;
  sub_10120F030((uint64_t)(v14 + 2), *a4);
  v25 = 1;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_10012E444(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v13;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8)
          v22 %= v8;
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  i = (uint64_t *)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_10120ED30((uint64_t)v24, 0);
  return i;
}

void sub_10120F018(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10120ED30((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_10120F030(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)a1 = *a2;
  bzero((void *)(a1 + 160), 0x288uLL);
  *(_DWORD *)(a1 + 8) = 0xFFFF;
  *(_QWORD *)(a1 + 20) = 0;
  *(_QWORD *)(a1 + 12) = 0;
  *(_OWORD *)(a1 + 28) = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 44) = _Q0;
  *(_OWORD *)(a1 + 60) = _Q0;
  *(_OWORD *)(a1 + 76) = _Q0;
  *(_DWORD *)(a1 + 92) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 124) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 132) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  sub_10012A33C(a1 + 168);
  return a1;
}

id sub_10121027C(void *a1, int a2)
{
  uint64_t v4;
  int v5;
  id v6;
  NSObject *v7;
  NSURL *v8;
  _DWORD v10[2];
  __int16 v11;
  const char *v12;
  __int16 v13;
  void *v14;

  v4 = sub_1008877CC(a1);
  if ((_DWORD)v4 != -1)
  {
    v5 = v4;
    v6 = objc_msgSend(objc_alloc((Class)NSData), "_cl_initWithFileDescriptor:", v4);
    close(v5);
    if (!a2)
      return v6;
    goto LABEL_9;
  }
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021A93A0);
  v7 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
  {
    v10[0] = 68289283;
    v10[1] = 0;
    v11 = 2082;
    v12 = "";
    v13 = 2113;
    v14 = a1;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#Warning could not open file\", \"path\":%{private, location:escape_only}@}", (uint8_t *)v10, 0x1Cu);
  }
  v6 = 0;
  if (a2)
  {
LABEL_9:
    v8 = +[NSURL fileURLWithPath:](NSURL, "fileURLWithPath:", a1);
    if (v8)
      sub_101210738(v8);
  }
  return v6;
}

BOOL sub_101210738(void *a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  _BYTE v10[12];
  uint8_t buf[4];
  _BYTE v12[14];
  __int16 v13;
  void *v14;
  __int16 v15;
  uint64_t v16;

  if (-[NSFileManager fileExistsAtPath:](+[NSFileManager defaultManager](NSFileManager, "defaultManager"), "fileExistsAtPath:", objc_msgSend(a1, "path")))
  {
    *(_QWORD *)v10 = 0;
    -[NSFileManager removeItemAtURL:error:](+[NSFileManager defaultManager](NSFileManager, "defaultManager"), "removeItemAtURL:error:", a1, v10);
    if (*(_QWORD *)v10)
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021A93A0);
      v2 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68289539;
        *(_DWORD *)v12 = 0;
        *(_WORD *)&v12[4] = 2082;
        *(_QWORD *)&v12[6] = "";
        v13 = 2114;
        v14 = a1;
        v15 = 2113;
        v16 = *(_QWORD *)v10;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"failed to remove fs item\", \"URL\":%{public, location:escape_only}@, \"error\":%{private, location:escape_only}@}", buf, 0x26u);
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_1021A93A0);
      }
      v3 = qword_1022A0208;
      if (os_signpost_enabled((os_log_t)qword_1022A0208))
      {
        *(_DWORD *)buf = 68289539;
        *(_DWORD *)v12 = 0;
        *(_WORD *)&v12[4] = 2082;
        *(_QWORD *)&v12[6] = "";
        v13 = 2114;
        v14 = a1;
        v15 = 2113;
        v16 = *(_QWORD *)v10;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "failed to remove fs item", "{\"msg%{public}.0s\":\"failed to remove fs item\", \"URL\":%{public, location:escape_only}@, \"error\":%{private, location:escape_only}@}", buf, 0x26u);
      }
    }
    else
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021A93A0);
      v6 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68289283;
        *(_DWORD *)v12 = 0;
        *(_WORD *)&v12[4] = 2082;
        *(_QWORD *)&v12[6] = "";
        v13 = 2113;
        v14 = a1;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"removed fs item\", \"URL\":%{private, location:escape_only}@}", buf, 0x1Cu);
      }
    }
    return *(_QWORD *)v10 == 0;
  }
  else
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021A93A0);
    v4 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)v12 = objc_msgSend(a1, "path");
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "file does not exists. CheckAndRemoveItemAtPath : %@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021A93A0);
      v7 = qword_1022A0208;
      *(_DWORD *)v10 = 138412290;
      *(_QWORD *)&v10[4] = objc_msgSend(a1, "path");
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 2, "file does not exists. CheckAndRemoveItemAtPath : %@", v10, 12);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "BOOL _CLHRemoveItemAtURL(NSURL *)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    return 1;
  }
}

NSArray *sub_101211B7C(uint64_t a1)
{
  NSArray *result;
  NSObject *v3;
  NSObject *v4;
  uint64_t v5;
  uint8_t buf[4];
  int v7;
  __int16 v8;
  const char *v9;
  __int16 v10;
  uint64_t v11;

  v5 = 0;
  result = -[NSFileManager contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:](+[NSFileManager defaultManager](NSFileManager, "defaultManager"), "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:", +[NSURL fileURLWithPath:](NSURL, "fileURLWithPath:", a1), 0, 0, &v5);
  if (v5)
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021A93A0);
    v3 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289282;
      v7 = 0;
      v8 = 2082;
      v9 = "";
      v10 = 2114;
      v11 = a1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Error finding contents of directory\", \"directory\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021A93A0);
    }
    v4 = qword_1022A0208;
    if (os_signpost_enabled((os_log_t)qword_1022A0208))
    {
      *(_DWORD *)buf = 68289282;
      v7 = 0;
      v8 = 2082;
      v9 = "";
      v10 = 2114;
      v11 = a1;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Error finding contents of directory", "{\"msg%{public}.0s\":\"Error finding contents of directory\", \"directory\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    return 0;
  }
  return result;
}

int64_t sub_101211EE0(id a1, NSURL *a2, NSURL *a3)
{
  void *v5;
  NSArray *v6;
  NSArray *v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  int64_t v12;

  v5 = objc_autoreleasePoolPush();
  v6 = -[NSString componentsSeparatedByString:](-[NSString lastPathComponent](-[NSURL path](a2, "path"), "lastPathComponent"), "componentsSeparatedByString:", CFSTR("-"));
  v7 = -[NSString componentsSeparatedByString:](-[NSString lastPathComponent](-[NSURL path](a3, "path"), "lastPathComponent"), "componentsSeparatedByString:", CFSTR("-"));
  objc_msgSend(-[NSArray objectAtIndexedSubscript:](v6, "objectAtIndexedSubscript:", 1), "doubleValue");
  v9 = v8;
  objc_msgSend(-[NSArray objectAtIndexedSubscript:](v7, "objectAtIndexedSubscript:", 1), "doubleValue");
  if (v9 >= v10)
    v11 = 0;
  else
    v11 = -1;
  if (v9 > v10)
    v12 = 1;
  else
    v12 = v11;
  objc_autoreleasePoolPop(v5);
  return v12;
}

id sub_1012127B0(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "pruneSecondaryDataOlderThan:", *(double *)(a1 + 32));
}

void sub_1012129A4(id a1, CLHRequestArchive *a2)
{
  NSURL *v3;

  -[CLHRequestArchive eraseAllData](a2, "eraseAllData");
  v3 = +[NSURL fileURLWithPath:](NSURL, "fileURLWithPath:", -[CLHRequestArchive directory](a2, "directory"));
  if (v3)
    sub_101210738(v3);
}

void sub_1012134A0(id a1)
{
  qword_1022A0208 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

BOOL sub_1012134CC(id a1, NSURL *a2, NSError *a3)
{
  NSObject *v5;
  NSObject *v6;
  int v8;
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  NSURL *v13;
  __int16 v14;
  NSError *v15;

  if (a3)
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021A93A0);
    v5 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_ERROR))
    {
      v8 = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2114;
      v13 = a2;
      v14 = 2114;
      v15 = a3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLHRequestArchive auto clean-up. Enumeration error\", \"Item\":%{public, location:escape_only}@, \"Error\":%{public, location:escape_only}@}", (uint8_t *)&v8, 0x26u);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021A93A0);
    }
    v6 = qword_1022A0208;
    if (os_signpost_enabled((os_log_t)qword_1022A0208))
    {
      v8 = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2114;
      v13 = a2;
      v14 = 2114;
      v15 = a3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLHRequestArchive auto clean-up. Enumeration error", "{\"msg%{public}.0s\":\"CLHRequestArchive auto clean-up. Enumeration error\", \"Item\":%{public, location:escape_only}@, \"Error\":%{public, location:escape_only}@}", (uint8_t *)&v8, 0x26u);
    }
  }
  return 1;
}

void sub_101213674()
{
  std::__shared_weak_count *v0;
  unint64_t *p_shared_owners;
  unint64_t v2;
  NSObject *v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[8];
  std::__shared_weak_count *v11;

  sub_1001E4804(buf);
  sub_1001E4874(*(uint64_t *)buf, "CLPowerLogEnable", (BOOL *)&byte_1022FDE70);
  v0 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v2 = __ldaxr(p_shared_owners);
    while (__stlxr(v2 - 1, p_shared_owners));
    if (!v2)
    {
      ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
      std::__shared_weak_count::__release_weak(v0);
    }
  }
  sub_100197040();
  if (sub_10075BF40())
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_1021A9400);
    v3 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Power Log not supported on Base System", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_1021A9400);
      LOWORD(v9[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "Power Log not supported on Base System", v9, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLPowerLogInit()", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    byte_1022FDE70 = 0;
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A9420);
  v4 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = byte_1022FDE70;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "PowerLog: g_enableLocPowerLog, %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A9420);
    v9[0] = 67109120;
    v9[1] = byte_1022FDE70;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "PowerLog: g_enableLocPowerLog, %d", v9);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLPowerLogInit()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
}

void sub_1012139C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1012139DC(id a1)
{
  qword_1022A00F8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

void sub_101213A08(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_101213A40(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 77);
}

BOOL sub_101213A4C(uint64_t a1)
{
  return *(_BYTE *)(a1 + 76) && *(_DWORD *)(a1 + 80) && *(_BYTE *)(a1 + 77) == 0;
}

BOOL sub_101213A78(uint64_t a1)
{
  return *(int *)(a1 + 72) >= 1 && *(_DWORD *)(a1 + 80) && *(_BYTE *)(a1 + 77) == 0;
}

BOOL sub_101213AA8(uint64_t a1)
{
  return *(int *)(a1 + 72) >= 1 && *(_BYTE *)(a1 + 76) && *(_BYTE *)(a1 + 77) == 0;
}

void sub_101213AE0(uint64_t a1, void *a2, _QWORD *a3, _QWORD *a4)
{
  id v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  void *v15[2];
  char v16;
  void *__p[2];
  char v18;
  void *v19[2];
  char v20;

  *(_QWORD *)a1 = &unk_1021A9440;
  *(_QWORD *)(a1 + 8) = 12;
  *(_WORD *)(a1 + 16) = 512;
  v8 = objc_msgSend(objc_msgSend(a2, "silo"), "newTimer");
  *(_QWORD *)(a1 + 40) = *a3;
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = 0x402E000000000000;
  v9 = a3[1];
  *(_QWORD *)(a1 + 48) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_QWORD *)(a1 + 56) = *a4;
  v12 = a4[1];
  *(_QWORD *)(a1 + 64) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *(_DWORD *)(a1 + 72) = 0;
  *(_WORD *)(a1 + 76) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  sub_1015A2E04(v19, "WorkoutSignificantElevation");
  sub_1008B51D4(a1 + 88, v19);
  if (v20 < 0)
    operator delete(v19[0]);
  sub_1015A2E04(__p, "AWD_PhoneSignificantElevation");
  sub_1008B51D4(a1 + 784, __p);
  if (v18 < 0)
    operator delete(__p[0]);
  sub_1015A2E04(v15, "AWD_WatchSignificantElevation");
  sub_1008B51D4(a1 + 1480, v15);
  if (v16 < 0)
    operator delete(v15[0]);
  *(_OWORD *)(a1 + 2224) = 0u;
  *(_OWORD *)(a1 + 2208) = 0u;
  *(_OWORD *)(a1 + 2192) = 0u;
  *(_OWORD *)(a1 + 2176) = 0u;
  *(_QWORD *)(a1 + 2256) = 0;
  sub_100898630(a1 + 2272);
  *(_QWORD *)(a1 + 2360) = 0;
  *(_QWORD *)(a1 + 2368) = a2;
  operator new();
}

void sub_101213DE8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(v2 + 2376);
  *(_QWORD *)(v2 + 2376) = 0;
  if (v5)
    sub_1012167D8(v2 + 2376, v5);
  v6 = *(_QWORD *)(v2 + 2360);
  *(_QWORD *)(v2 + 2360) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (*(char *)(v2 + 2175) < 0)
    operator delete(*(void **)(v2 + 2152));
  if (*(char *)(v2 + 1479) < 0)
    operator delete(*(void **)(v2 + 1456));
  if (*(char *)(v2 + 783) < 0)
    operator delete(*(void **)(v2 + 760));
  sub_100261F44(v3);
  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

void sub_101213F08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLElevationController::onMotionStateObserverNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 2368), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021A9560);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLElevationController::onMotionStateObserverNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A9560);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLElevationController::onMotionStateObserverNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1012155EC(a4, v6, v7, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1012140B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012140D8(uint64_t a1)
{
  uint64_t v1;
  char v3;

  v1 = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(v1 + 76) = 0;
  return sub_10023195C(v1, 5, (uint64_t)&v3);
}

uint64_t sub_101214108(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 2360);
  *(_QWORD *)(a1 + 2360) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 2376);
  *(_QWORD *)(a1 + 2376) = 0;
  if (v3)
    sub_1012167D8(a1 + 2376, v3);
  v4 = *(_QWORD *)(a1 + 2360);
  *(_QWORD *)(a1 + 2360) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (*(char *)(a1 + 2175) < 0)
    operator delete(*(void **)(a1 + 2152));
  if (*(char *)(a1 + 1479) < 0)
    operator delete(*(void **)(a1 + 1456));
  if (*(char *)(a1 + 783) < 0)
    operator delete(*(void **)(a1 + 760));
  sub_100261F44(a1 + 56);
  sub_100261F44(a1 + 40);
  return a1;
}

void sub_1012141B0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  uint64_t v7;
  int v8;
  int v9;
  double v10;
  double v11;
  __int128 v12;
  __int128 v13;
  NSObject *v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  double v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  double v23;
  double Current;
  double v25;
  NSObject *v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  dispatch_queue_t *v33;
  double v34;
  unsigned int v35;
  unsigned int v36;
  const char *v37;
  char *v38;
  double v39;
  const char *v40;
  char *v41;
  double v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  double v46;
  const char *v47;
  char *v48;
  uint64_t v49;
  int v50;
  double v51;
  __int16 v52;
  unsigned int v53;
  __int16 v54;
  unsigned int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  double v59;
  __int16 v60;
  double v61;
  _BYTE buf[32];
  _BYTE v63[32];

  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 40) = 1000;
  *(_DWORD *)(a3 + 48) = -1082130432;
  if (qword_10229FD70 != -1)
    dispatch_once(&qword_10229FD70, &stru_1021A9580);
  v6 = qword_10229FD78;
  if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_DEBUG))
  {
    v7 = *(_QWORD *)(a2 + 8);
    v8 = *(_DWORD *)(a2 + 16);
    v9 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)buf = 134349568;
    *(_QWORD *)&buf[4] = v7;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = v8;
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "WorkoutElevation,onElevationPhone,fusionInput,startTime,%{public}.3lf,ascended,%{public}d,descended,%{public}d", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_1021A9580);
    v34 = *(double *)(a2 + 8);
    v35 = *(_DWORD *)(a2 + 16);
    v36 = *(_DWORD *)(a2 + 20);
    v50 = 134349568;
    v51 = v34;
    v52 = 1026;
    v53 = v35;
    v54 = 1026;
    v55 = v36;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 2, "WorkoutElevation,onElevationPhone,fusionInput,startTime,%{public}.3lf,ascended,%{public}d,descended,%{public}d", &v50, 24);
    v38 = (char *)v37;
    sub_100512490("Generic", 1, 0, 2, "CLElevationChangeEntry CLElevationController::elevationUpdatePhone(CLElevationChangeEntry)", "%s\n", v37);
    if (v38 != buf)
      free(v38);
  }
  if (*(_DWORD *)(a1 + 80))
  {
    if (*(_DWORD *)(a2 + 16) || *(_DWORD *)(a2 + 20))
    {
      v10 = sub_10119DE44(*(_QWORD *)(a1 + 2376));
      v11 = sub_10119DE4C(*(_QWORD *)(a1 + 2376));
      sub_10119DE54(*(_QWORD *)(a1 + 2376), a2, buf);
      v12 = *(_OWORD *)&buf[16];
      *(_OWORD *)a3 = *(_OWORD *)buf;
      *(_OWORD *)(a3 + 16) = v12;
      v13 = *(_OWORD *)&v63[16];
      *(_OWORD *)(a3 + 32) = *(_OWORD *)v63;
      *(_OWORD *)(a3 + 48) = v13;
      if (qword_10229FD70 != -1)
        dispatch_once(&qword_10229FD70, &stru_1021A9580);
      v14 = qword_10229FD78;
      if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_DEBUG))
      {
        v15 = *(_QWORD *)(a3 + 8);
        v16 = *(_DWORD *)(a3 + 16);
        v17 = *(_DWORD *)(a3 + 20);
        v18 = *(_DWORD *)(a3 + 40);
        *(_DWORD *)buf = 134350337;
        *(_QWORD *)&buf[4] = v15;
        *(_WORD *)&buf[12] = 1026;
        *(_DWORD *)&buf[14] = v16;
        *(_WORD *)&buf[18] = 1026;
        *(_DWORD *)&buf[20] = v17;
        *(_WORD *)&buf[24] = 1026;
        *(_DWORD *)&buf[26] = v18;
        *(_WORD *)&buf[30] = 2049;
        *(double *)v63 = v10;
        *(_WORD *)&v63[8] = 2049;
        *(double *)&v63[10] = v11;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "WorkoutElevation,onElevationPhone,fusionOutput,startTime,%{public}.3lf,ascended,%{public}d,descended,%{public}d,source,%{public}d,minGpsAltitudeInMeter,%{private}.3lf,maxGpsAltitudeInMeter,%{private}.3lf", buf, 0x32u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD70 != -1)
          dispatch_once(&qword_10229FD70, &stru_1021A9580);
        v39 = *(double *)(a3 + 8);
        v20 = *(_DWORD *)(a3 + 16);
        v21 = *(_DWORD *)(a3 + 20);
        v22 = *(_DWORD *)(a3 + 40);
        v50 = 134350337;
        v51 = v39;
        v52 = 1026;
        v53 = v20;
        v54 = 1026;
        v55 = v21;
        v56 = 1026;
        v57 = v22;
        v58 = 2049;
        v59 = v10;
        v60 = 2049;
        v61 = v11;
        LODWORD(v49) = 50;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 2, "WorkoutElevation,onElevationPhone,fusionOutput,startTime,%{public}.3lf,ascended,%{public}d,descended,%{public}d,source,%{public}d,minGpsAltitudeInMeter,%{private}.3lf,maxGpsAltitudeInMeter,%{private}.3lf", &v50, v49);
        v41 = (char *)v40;
        sub_100512490("Generic", 1, 0, 2, "CLElevationChangeEntry CLElevationController::elevationUpdatePhone(CLElevationChangeEntry)", "%s\n", v40);
        v19 = v39;
        if (v41 != buf)
          free(v41);
      }
      else
      {
        v19 = *(double *)(a3 + 8);
        v20 = *(_DWORD *)(a3 + 16);
        v21 = *(_DWORD *)(a3 + 20);
        v22 = *(_DWORD *)(a3 + 40);
      }
      sub_10022160C((unsigned __int16 *)(a1 + 88), v20, v21, v22, v19);
      *(_QWORD *)(a1 + 2216) = *(_QWORD *)(a1 + 632);
      sub_100221614(v19, a1 + 88, a1 + 2176);
      v23 = sub_10119FC6C(*(_QWORD *)(a1 + 2376), a2);
      *(double *)(a1 + 2224) = v23;
      *(_BYTE *)(a1 + 2232) = 1;
      if (v23 > 0.0)
      {
        sub_1002369AC(*(_QWORD *)(a1 + 56), a1 + 2176);
        *(_QWORD *)(a1 + 2248) = *(_QWORD *)(a1 + 2200);
        Current = CFAbsoluteTimeGetCurrent();
        v25 = Current;
        if (*(_BYTE *)(a1 + 2240) || *(_BYTE *)(a1 + 2232) && Current - *(double *)(a1 + 2256) > 15.0)
        {
          if (qword_10229FD70 != -1)
            dispatch_once(&qword_10229FD70, &stru_1021A9580);
          v26 = qword_10229FD78;
          if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_DEFAULT))
          {
            v27 = *(_QWORD *)(a1 + 2200);
            v28 = *(_DWORD *)(a1 + 2216);
            v29 = *(_DWORD *)(a1 + 2220);
            v30 = *(unsigned __int8 *)(a1 + 2232);
            v31 = *(_QWORD *)(a1 + 2224);
            *(_DWORD *)buf = 134350080;
            *(_QWORD *)&buf[4] = v27;
            *(_WORD *)&buf[12] = 1026;
            *(_DWORD *)&buf[14] = v28;
            *(_WORD *)&buf[18] = 1026;
            *(_DWORD *)&buf[20] = v29;
            *(_WORD *)&buf[24] = 1026;
            *(_DWORD *)&buf[26] = v30;
            *(_WORD *)&buf[30] = 2050;
            *(_QWORD *)v63 = v31;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "writing data to elevationDB for watch with companion phone during workout,startTime,%{public}.3lf,ascend,%{public}d,descend,%{public}d,workout,%{public}d,pressure,%{public}.5lf", buf, 0x28u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FD70 != -1)
              dispatch_once(&qword_10229FD70, &stru_1021A9580);
            v42 = *(double *)(a1 + 2200);
            v43 = *(_DWORD *)(a1 + 2216);
            v44 = *(_DWORD *)(a1 + 2220);
            v45 = *(unsigned __int8 *)(a1 + 2232);
            v46 = *(double *)(a1 + 2224);
            v50 = 134350080;
            v51 = v42;
            v52 = 1026;
            v53 = v43;
            v54 = 1026;
            v55 = v44;
            v56 = 1026;
            v57 = v45;
            v58 = 2050;
            v59 = v46;
            LODWORD(v49) = 40;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 0, "writing data to elevationDB for watch with companion phone during workout,startTime,%{public}.3lf,ascend,%{public}d,descend,%{public}d,workout,%{public}d,pressure,%{public}.5lf", &v50, v49);
            v48 = (char *)v47;
            sub_100512490("Generic", 1, 0, 2, "CLElevationChangeEntry CLElevationController::elevationUpdatePhone(CLElevationChangeEntry)", "%s\n", v47);
            if (v48 != buf)
              free(v48);
          }
          *(double *)(a1 + 2256) = v25;
        }
      }
    }
    else
    {
      v21 = 0;
      v20 = 0;
      v19 = 0.0;
    }
    sub_10022160C((unsigned __int16 *)(a1 + 784), v20, v21, 0, v19);
    v32 = sub_10009ED0C();
    sub_10134D224(v32, *(_DWORD *)(a1 + 1328));
    v33 = (dispatch_queue_t *)sub_10009EC60();
    sub_100EA5AD0(v33, *(_DWORD *)(a1 + 1328));
  }
}

void sub_10121487C(uint64_t a1, __int128 *a2, void **a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  NSObject *v9;
  int v10;
  double v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  double v15;
  double v16;
  __int16 v17;
  NSObject *v18;
  const char *v19;
  char *v20;
  char v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  int v37;
  uint64_t v38;
  double v39;
  double Current;
  double v41;
  NSObject *v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  double v48;
  unsigned __int8 v49;
  uint64_t v50;
  dispatch_queue_t *v51;
  const char *v52;
  char *v53;
  double v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  uint64_t v58;
  double v59;
  unsigned __int8 v60;
  const char *v61;
  char *v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  _BYTE v66[48];
  int v67;
  double v68;
  __int16 v69;
  unsigned int v70;
  __int16 v71;
  unsigned int v72;
  __int16 v73;
  _BYTE v74[14];
  __int16 v75;
  double v76;
  __int16 v77;
  int v78;
  __int128 v79;
  char v80;
  _BYTE buf[20];
  unsigned int v82;
  __int128 v83;
  _BYTE v84[20];
  char v85;
  __int16 v86;

  if ((sub_1001B7910() & 0x1000000000) != 0)
    sub_1008986AC(a1 + 2272, *((_DWORD *)a2 + 11), *(_DWORD *)(a1 + 80), *((_WORD *)a2 + 27), *((float *)a2 + 12));
  if (!*(_BYTE *)(a1 + 16) && (*((_DWORD *)a2 + 4) || *((_DWORD *)a2 + 5)))
  {
    v6 = *a2;
    v7 = a2[1];
    v8 = a2[3];
    *(_OWORD *)&v66[16] = a2[2];
    *(_OWORD *)&v66[32] = v8;
    v65 = v6;
    *(_OWORD *)v66 = v7;
    if ((sub_1001B7910() & 0x1000000000) != 0 && *(_DWORD *)(a1 + 80))
      v66[36] = *(_DWORD *)(a1 + 2332);
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_1021A9580);
    v9 = qword_10229FD78;
    if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134350336;
      *(_QWORD *)&buf[4] = *((_QWORD *)&v65 + 1);
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = *(_DWORD *)v66;
      *(_WORD *)&buf[18] = 1026;
      v82 = *(_DWORD *)&v66[4];
      LOWORD(v83) = 2050;
      *(double *)((char *)&v83 + 2) = *(float *)&v66[32];
      WORD5(v83) = 1026;
      HIDWORD(v83) = v66[36];
      *(_WORD *)v84 = 1026;
      *(_DWORD *)&v84[2] = *(_DWORD *)&v66[28];
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "WorkoutElevation,onElevationWatch,fusionInput,startTime,%{public}.3lf,ascended,%{public}d,descended,%{public}d,pressureAmplitude,%{public}f,pressureQuality,%{public}d,deltaSteps,%{public}d", buf, 0x2Eu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD70 != -1)
        dispatch_once(&qword_10229FD70, &stru_1021A9580);
      v67 = 134350336;
      v68 = *((double *)&v65 + 1);
      v69 = 1026;
      v70 = *(_DWORD *)v66;
      v71 = 1026;
      v72 = *(_DWORD *)&v66[4];
      v73 = 2050;
      *(double *)v74 = *(float *)&v66[32];
      *(_WORD *)&v74[8] = 1026;
      *(_DWORD *)&v74[10] = v66[36];
      v75 = 1026;
      LODWORD(v76) = *(_DWORD *)&v66[28];
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 2, "WorkoutElevation,onElevationWatch,fusionInput,startTime,%{public}.3lf,ascended,%{public}d,descended,%{public}d,pressureAmplitude,%{public}f,pressureQuality,%{public}d,deltaSteps,%{public}d", &v67, 46);
      v53 = (char *)v52;
      sub_100512490("Generic", 1, 0, 2, "void CLElevationController::elevationUpdateWatch(std::vector<CLElevationChangeEntry>::const_iterator, std::vector<CLElevationChangeEntry> &)", "%s\n", v52);
      if (v53 != buf)
        free(v53);
    }
    v10 = 1;
    *(_DWORD *)&v66[24] = 1;
    v11 = *((double *)&v65 + 1);
    v12 = v65;
    v13 = *(_DWORD *)v66;
    v14 = *(_DWORD *)&v66[4];
    v64 = *(_OWORD *)&v66[8];
    v79 = *(_OWORD *)&v66[28];
    v80 = v66[44];
    if (*(_DWORD *)(a1 + 80))
    {
      v15 = sub_10119DE44(*(_QWORD *)(a1 + 2376));
      v16 = sub_10119DE4C(*(_QWORD *)(a1 + 2376));
      sub_10119E684(*(_QWORD *)(a1 + 2376), (uint64_t)&v65, buf);
      v12 = *(_QWORD *)buf;
      v11 = *(double *)&buf[8];
      v13 = *(_DWORD *)&buf[16];
      v14 = v82;
      v64 = v83;
      v10 = *(_DWORD *)v84;
      v79 = *(_OWORD *)&v84[4];
      v80 = v85;
      v17 = v86;
      if (qword_10229FD70 != -1)
        dispatch_once(&qword_10229FD70, &stru_1021A9580);
      v18 = qword_10229FD78;
      if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134350337;
        *(double *)&buf[4] = v11;
        *(_WORD *)&buf[12] = 1026;
        *(_DWORD *)&buf[14] = v13;
        *(_WORD *)&buf[18] = 1026;
        v82 = v14;
        LOWORD(v83) = 1026;
        *(_DWORD *)((char *)&v83 + 2) = v10;
        WORD3(v83) = 2049;
        *((double *)&v83 + 1) = v15;
        *(_WORD *)v84 = 2049;
        *(double *)&v84[2] = v16;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "WorkoutElevation,onElevationWatch,fusionOutput,startTime,%{public}.3lf,ascended,%{public}d,descended,%{public}d,source,%{public}d,minGpsAltitudeInMeter,%{private}.3lf,maxGpsAltitudeInMeter,%{private}.3lf", buf, 0x32u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD70 != -1)
          dispatch_once(&qword_10229FD70, &stru_1021A9580);
        v67 = 134350337;
        v68 = v11;
        v69 = 1026;
        v70 = v13;
        v71 = 1026;
        v72 = v14;
        v73 = 1026;
        *(_DWORD *)v74 = v10;
        *(_WORD *)&v74[4] = 2049;
        *(double *)&v74[6] = v15;
        v75 = 2049;
        v76 = v16;
        LODWORD(v63) = 50;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 2, "WorkoutElevation,onElevationWatch,fusionOutput,startTime,%{public}.3lf,ascended,%{public}d,descended,%{public}d,source,%{public}d,minGpsAltitudeInMeter,%{private}.3lf,maxGpsAltitudeInMeter,%{private}.3lf", &v67, v63);
        v20 = (char *)v19;
        sub_100512490("Generic", 1, 0, 2, "void CLElevationController::elevationUpdateWatch(std::vector<CLElevationChangeEntry>::const_iterator, std::vector<CLElevationChangeEntry> &)", "%s\n", v19);
        if (v20 != buf)
          free(v20);
      }
    }
    else
    {
      v17 = *(_WORD *)&v66[46];
    }
    v21 = v66[45];
    v22 = (char *)a3[2];
    v23 = (char *)a3[1];
    if (v23 >= v22)
    {
      v25 = (v23 - (_BYTE *)*a3) >> 6;
      v26 = v25 + 1;
      if ((unint64_t)(v25 + 1) >> 58)
        sub_100259694();
      v27 = v22 - (_BYTE *)*a3;
      if (v27 >> 5 > v26)
        v26 = v27 >> 5;
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFC0)
        v28 = 0x3FFFFFFFFFFFFFFLL;
      else
        v28 = v26;
      if (v28)
        v29 = (char *)sub_1002697F0((uint64_t)(a3 + 2), v28);
      else
        v29 = 0;
      v30 = &v29[64 * v25];
      v31 = &v29[64 * v28];
      *(_QWORD *)v30 = v12;
      *((double *)v30 + 1) = v11;
      *((_DWORD *)v30 + 4) = v13;
      *((_DWORD *)v30 + 5) = v14;
      *(_OWORD *)(v30 + 24) = v64;
      *((_DWORD *)v30 + 10) = v10;
      v30[60] = v80;
      *(_OWORD *)(v30 + 44) = v79;
      v30[61] = v21;
      *((_WORD *)v30 + 31) = v17;
      v24 = v30 + 64;
      v33 = (char *)*a3;
      v32 = (char *)a3[1];
      if (v32 != *a3)
      {
        do
        {
          v34 = *((_OWORD *)v32 - 4);
          v35 = *((_OWORD *)v32 - 3);
          v36 = *((_OWORD *)v32 - 1);
          *((_OWORD *)v30 - 2) = *((_OWORD *)v32 - 2);
          *((_OWORD *)v30 - 1) = v36;
          *((_OWORD *)v30 - 4) = v34;
          *((_OWORD *)v30 - 3) = v35;
          v30 -= 64;
          v32 -= 64;
        }
        while (v32 != v33);
        v32 = (char *)*a3;
      }
      *a3 = v30;
      a3[1] = v24;
      a3[2] = v31;
      if (v32)
        operator delete(v32);
    }
    else
    {
      *(_QWORD *)v23 = v12;
      *((double *)v23 + 1) = v11;
      *((_DWORD *)v23 + 4) = v13;
      *((_DWORD *)v23 + 5) = v14;
      *(_OWORD *)(v23 + 24) = v64;
      *((_DWORD *)v23 + 10) = v10;
      *(_OWORD *)(v23 + 44) = v79;
      v23[60] = v80;
      v23[61] = v21;
      v24 = v23 + 64;
      *((_WORD *)v23 + 31) = v17;
    }
    a3[1] = v24;
    if ((sub_1001B7910() & 0x1000000000) != 0)
    {
      v37 = *(_DWORD *)(a1 + 80);
      if (v37)
      {
        sub_10022160C((unsigned __int16 *)(a1 + 88), v13, v14, v10, v11);
        v38 = *(_QWORD *)(a1 + 632);
        LOBYTE(v37) = 1;
      }
      else
      {
        v38 = 0;
      }
      *(_QWORD *)(a1 + 2216) = v38;
      *(_BYTE *)(a1 + 2232) = v37;
      sub_100221614(v11, a1 + 88, a1 + 2176);
      *(double *)(a1 + 2224) = *(float *)&v66[40];
      sub_10119FC64(*(_QWORD *)(a1 + 2376));
      if (*(double *)(a1 + 2224) > 0.0)
      {
        v39 = *(double *)(a1 + 2248);
        if (v39 == 1.79769313e308
          || *(_BYTE *)(a1 + 2232)
          || vabdd_f64(*(double *)(a1 + 2200), v39) > *(double *)(a1 + 2264))
        {
          sub_1002369AC(*(_QWORD *)(a1 + 56), a1 + 2176);
          *(_QWORD *)(a1 + 2248) = *(_QWORD *)(a1 + 2200);
          Current = CFAbsoluteTimeGetCurrent();
          v41 = Current;
          if (*(_BYTE *)(a1 + 2240) || *(_BYTE *)(a1 + 2232) && Current - *(double *)(a1 + 2256) > 15.0)
          {
            if (qword_10229FD70 != -1)
              dispatch_once(&qword_10229FD70, &stru_1021A9580);
            v42 = qword_10229FD78;
            if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_DEFAULT))
            {
              v43 = *(_QWORD *)(a1 + 2200);
              v44 = *(_DWORD *)(a1 + 2216);
              v45 = *(_DWORD *)(a1 + 2220);
              v46 = *(unsigned __int8 *)(a1 + 2232);
              v47 = *(_QWORD *)(a1 + 2224);
              v48 = *((float *)a2 + 12);
              v49 = v66[36];
              if (!*(_BYTE *)(a1 + 2232))
                v49 = 0;
              *(_DWORD *)buf = 134350592;
              *(_QWORD *)&buf[4] = v43;
              *(_WORD *)&buf[12] = 1026;
              *(_DWORD *)&buf[14] = v44;
              *(_WORD *)&buf[18] = 1026;
              v82 = v45;
              LOWORD(v83) = 1026;
              *(_DWORD *)((char *)&v83 + 2) = v46;
              WORD3(v83) = 2050;
              *((_QWORD *)&v83 + 1) = v47;
              *(_WORD *)v84 = 2050;
              *(double *)&v84[2] = v48;
              *(_WORD *)&v84[10] = 1026;
              *(_DWORD *)&v84[12] = v49;
              _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "writing data to elevationDB for watch,startTime,%{public}.3lf,ascend,%{public}d,descend,%{public}d,workout,%{public}d,pressure,%{public}.5lf,pressureAmplitude,%{public}f,pressureQuality,%{public}d", buf, 0x38u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_10229FD70 != -1)
                dispatch_once(&qword_10229FD70, &stru_1021A9580);
              v54 = *(double *)(a1 + 2200);
              v55 = *(_DWORD *)(a1 + 2216);
              v56 = *(_DWORD *)(a1 + 2220);
              v57 = *(unsigned __int8 *)(a1 + 2232);
              v58 = *(_QWORD *)(a1 + 2224);
              v59 = *((float *)a2 + 12);
              v60 = v66[36];
              if (!*(_BYTE *)(a1 + 2232))
                v60 = 0;
              v67 = 134350592;
              v68 = v54;
              v69 = 1026;
              v70 = v55;
              v71 = 1026;
              v72 = v56;
              v73 = 1026;
              *(_DWORD *)v74 = v57;
              *(_WORD *)&v74[4] = 2050;
              *(_QWORD *)&v74[6] = v58;
              v75 = 2050;
              v76 = v59;
              v77 = 1026;
              v78 = v60;
              LODWORD(v63) = 56;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 0, "writing data to elevationDB for watch,startTime,%{public}.3lf,ascend,%{public}d,descend,%{public}d,workout,%{public}d,pressure,%{public}.5lf,pressureAmplitude,%{public}f,pressureQuality,%{public}d", &v67, v63);
              v62 = (char *)v61;
              sub_100512490("Generic", 1, 0, 2, "void CLElevationController::elevationUpdateWatch(std::vector<CLElevationChangeEntry>::const_iterator, std::vector<CLElevationChangeEntry> &)", "%s\n", v61);
              if (v62 != buf)
                free(v62);
            }
            *(double *)(a1 + 2256) = v41;
          }
        }
      }
    }
  }
  if (*(_DWORD *)(a1 + 80))
  {
    sub_10022160C((unsigned __int16 *)(a1 + 1480), *((_DWORD *)a2 + 4), *((_DWORD *)a2 + 5), 1, *((double *)a2 + 1));
    v50 = sub_10009ED0C();
    sub_10134D2A4(v50, *(_DWORD *)(a1 + 2024));
    v51 = (dispatch_queue_t *)sub_10009EC60();
    sub_100EA5A48(v51, *(_DWORD *)(a1 + 2024));
  }
}

uint64_t sub_1012151E0(uint64_t result, int a2)
{
  uint64_t v2;
  NSObject *v3;
  int v4;
  int v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  if (*(_DWORD *)(result + 72) != a2)
  {
    v2 = result;
    *(_DWORD *)(result + 72) = a2;
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_1021A9580);
    v3 = qword_10229FD78;
    if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_INFO))
    {
      v4 = *(_DWORD *)(v2 + 72);
      *(_DWORD *)buf = 67109120;
      v11 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "WorkoutElevation,clients,%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD70 != -1)
        dispatch_once(&qword_10229FD70, &stru_1021A9580);
      v6 = *(_DWORD *)(v2 + 72);
      v9[0] = 67109120;
      v9[1] = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 1, "WorkoutElevation,clients,%d", v9);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLElevationController::updateElevationSubscriptionClient(int)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    if (*(int *)(v2 + 72) < 1)
      v5 = 2;
    else
      v5 = 1;
    return sub_10023195C(v2, v5, (uint64_t)buf);
  }
  return result;
}

uint64_t sub_1012153C4(uint64_t a1, int a2, int a3)
{
  NSObject *v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  const char *v12;
  uint8_t *v13;
  int v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;

  if (qword_10229FD70 != -1)
    dispatch_once(&qword_10229FD70, &stru_1021A9580);
  v6 = qword_10229FD78;
  if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(unsigned __int8 *)(a1 + 76);
    *(_DWORD *)buf = 67109632;
    v20 = v7;
    v21 = 1024;
    v22 = a2;
    v23 = 1024;
    v24 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "WorkoutElevation,phone connection,prev,%d,curr,%d,elev,%d", buf, 0x14u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_1021A9580);
    v15 = 1024;
    v16 = a2;
    v17 = 1024;
    v18 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 0, "WorkoutElevation,phone connection,prev,%d,curr,%d,elev,%d", &v14, 20, 67109632);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLElevationController::updatePhoneConnectionStatus(BOOL, BOOL)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  v8 = a2 & a3;
  if (*(_DWORD *)(a1 + 80) && (v8 & 1) == 0 && *(_BYTE *)(a1 + 76) || (*(_BYTE *)(a1 + 76) = v8, !v8))
  {
    v9 = a1;
    v10 = 4;
  }
  else
  {
    v9 = a1;
    v10 = 3;
  }
  return sub_10023195C(v9, v10, (uint64_t)buf);
}

uint64_t sub_1012155EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  char *v7;
  uint64_t v8;
  int v9;
  char v11;
  char v12;

  v6 = *(_DWORD *)(a1 + 80);
  if (v6)
    sub_1011A0DCC(*(_DWORD **)(a1 + 2376), v6);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a4 + 8);
  sub_1008B4FC8(a1 + 88);
  sub_10107CD28(*(_QWORD *)(a1 + 40));
  sub_10119E108(*(_QWORD *)(a1 + 2376));
  sub_1008B4FC8(a1 + 784);
  sub_1008B4FC8(a1 + 1480);
  if (*(_DWORD *)(a1 + 80))
  {
    v7 = &v12;
    v8 = a1;
    v9 = 6;
  }
  else
  {
    v7 = &v11;
    v8 = a1;
    v9 = 7;
  }
  return sub_10023195C(v8, v9, (uint64_t)v7);
}

void sub_10121567C(uint64_t a1, uint64_t a2)
{
  sub_10119DC98(*(_QWORD *)(a1 + 2376), a2);
}

uint64_t sub_101215684(uint64_t result, int a2)
{
  char v2;

  if (*(unsigned __int8 *)(result + 77) != a2)
  {
    *(_BYTE *)(result + 77) = a2;
    return sub_10023195C(result, 8, (uint64_t)&v2);
  }
  return result;
}

void sub_1012156B8(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1012156E4(id a1)
{
  qword_10229FD78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pressure");
}

id sub_101215710(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FD70 != -1)
    dispatch_once(&qword_10229FD70, &stru_1021A9580);
  v2 = qword_10229FD78;
  if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "WorkoutElevation,subs,phone,0", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_1021A9580);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 1, "WorkoutElevation,subs,phone,0", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLElevationController::doUnsubscribe(const T *) [T = CLElevationController::ENoActiveClients]", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  if ((sub_1001B7910() & 0x1000000000) != 0)
    sub_1012158EC(*(_QWORD *)(a1 + 2376), 0);
  else
    sub_1008B51D8(a1 + 88);
  objc_msgSend(*(id *)(a1 + 24), "setNextFireDelay:", 1.79769313e308);
  return objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 2368), "vendor"), "proxyForService:", CFSTR("CLOdometerNotifier")), "updatePhoneWorkoutElevationSubscription:", 0);
}

void sub_1012158EC(uint64_t a1, char a2)
{
  void **v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)(a1 + 640) = a2;
  if ((a2 & 1) == 0)
  {
    v3 = *(void ***)(a1 + 152);
    v4 = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 184) = 0;
    v5 = v4 - (_QWORD)v3;
    if (v5 >= 0x11)
    {
      do
      {
        operator delete(*v3);
        v6 = *(_QWORD *)(a1 + 160);
        v3 = (void **)(*(_QWORD *)(a1 + 152) + 8);
        *(_QWORD *)(a1 + 152) = v3;
        v5 = v6 - (_QWORD)v3;
      }
      while (v5 > 0x10);
    }
    if (v5 >> 3 == 1)
    {
      v7 = 32;
    }
    else
    {
      if (v5 >> 3 != 2)
        return;
      v7 = 64;
    }
    *(_QWORD *)(a1 + 176) = v7;
  }
}

id sub_101215968(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FD70 != -1)
    dispatch_once(&qword_10229FD70, &stru_1021A9580);
  v2 = qword_10229FD78;
  if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "WorkoutElevation,subs,phone,waitingToUnsubscribe", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_1021A9580);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 2, "WorkoutElevation,subs,phone,waitingToUnsubscribe", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLElevationController::doWaitToUnsubscribe(const T *) [T = CLElevationController::ESourceUnavailable]", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return objc_msgSend(*(id *)(a1 + 24), "setNextFireDelay:", *(double *)(a1 + 32));
}

id sub_101215B04(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FD70 != -1)
    dispatch_once(&qword_10229FD70, &stru_1021A9580);
  v2 = qword_10229FD78;
  if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "WorkoutElevation,subs,phone,0", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_1021A9580);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 1, "WorkoutElevation,subs,phone,0", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLElevationController::doUnsubscribe(const T *) [T = CLElevationController::EWorkoutStop]", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  if ((sub_1001B7910() & 0x1000000000) != 0)
    sub_1012158EC(*(_QWORD *)(a1 + 2376), 0);
  else
    sub_1008B51D8(a1 + 88);
  objc_msgSend(*(id *)(a1 + 24), "setNextFireDelay:", 1.79769313e308);
  return objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 2368), "vendor"), "proxyForService:", CFSTR("CLOdometerNotifier")), "updatePhoneWorkoutElevationSubscription:", 0);
}

id sub_101215CE0(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FD70 != -1)
    dispatch_once(&qword_10229FD70, &stru_1021A9580);
  v2 = qword_10229FD78;
  if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "WorkoutElevation,subs,phone,0", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_1021A9580);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 1, "WorkoutElevation,subs,phone,0", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLElevationController::doUnsubscribe(const T *) [T = CLElevationController::EPowerSaveModeChanged]", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  if ((sub_1001B7910() & 0x1000000000) != 0)
    sub_1012158EC(*(_QWORD *)(a1 + 2376), 0);
  else
    sub_1008B51D8(a1 + 88);
  objc_msgSend(*(id *)(a1 + 24), "setNextFireDelay:", 1.79769313e308);
  return objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 2368), "vendor"), "proxyForService:", CFSTR("CLOdometerNotifier")), "updatePhoneWorkoutElevationSubscription:", 0);
}

id sub_101215EBC(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FD70 != -1)
    dispatch_once(&qword_10229FD70, &stru_1021A9580);
  v2 = qword_10229FD78;
  if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "WorkoutElevation,subs,phone,1", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_1021A9580);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 1, "WorkoutElevation,subs,phone,1", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLElevationController::doSubscribe(const T *) [T = CLElevationController::EClientActive]", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  if ((sub_1001B7910() & 0x1000000000) != 0)
    *(_BYTE *)(*(_QWORD *)(a1 + 2376) + 640) = 1;
  else
    sub_1008B51D8(a1 + 88);
  objc_msgSend(*(id *)(a1 + 24), "setNextFireDelay:", 1.79769313e308);
  return objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 2368), "vendor"), "proxyForService:", CFSTR("CLOdometerNotifier")), "updatePhoneWorkoutElevationSubscription:", 1);
}

id sub_10121609C(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FD70 != -1)
    dispatch_once(&qword_10229FD70, &stru_1021A9580);
  v2 = qword_10229FD78;
  if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "WorkoutElevation,subs,phone,1", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_1021A9580);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 1, "WorkoutElevation,subs,phone,1", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLElevationController::doSubscribe(const T *) [T = CLElevationController::ESourceAvailable]", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  if ((sub_1001B7910() & 0x1000000000) != 0)
    *(_BYTE *)(*(_QWORD *)(a1 + 2376) + 640) = 1;
  else
    sub_1008B51D8(a1 + 88);
  objc_msgSend(*(id *)(a1 + 24), "setNextFireDelay:", 1.79769313e308);
  return objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 2368), "vendor"), "proxyForService:", CFSTR("CLOdometerNotifier")), "updatePhoneWorkoutElevationSubscription:", 1);
}

id sub_10121627C(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FD70 != -1)
    dispatch_once(&qword_10229FD70, &stru_1021A9580);
  v2 = qword_10229FD78;
  if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "WorkoutElevation,subs,phone,1", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_1021A9580);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 1, "WorkoutElevation,subs,phone,1", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLElevationController::doSubscribe(const T *) [T = CLElevationController::EWorkoutStart]", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  if ((sub_1001B7910() & 0x1000000000) != 0)
    *(_BYTE *)(*(_QWORD *)(a1 + 2376) + 640) = 1;
  else
    sub_1008B51D8(a1 + 88);
  objc_msgSend(*(id *)(a1 + 24), "setNextFireDelay:", 1.79769313e308);
  return objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 2368), "vendor"), "proxyForService:", CFSTR("CLOdometerNotifier")), "updatePhoneWorkoutElevationSubscription:", 1);
}

id sub_10121645C(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FD70 != -1)
    dispatch_once(&qword_10229FD70, &stru_1021A9580);
  v2 = qword_10229FD78;
  if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "WorkoutElevation,subs,phone,cancelWaitingToUnsubscribe", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_1021A9580);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 2, "WorkoutElevation,subs,phone,cancelWaitingToUnsubscribe", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLElevationController::doCancelWaitToUnsubscribe(const T *) [T = CLElevationController::ESourceAvailable]", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return objc_msgSend(*(id *)(a1 + 24), "setNextFireDelay:", 1.79769313e308);
}

id sub_1012165FC(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FD70 != -1)
    dispatch_once(&qword_10229FD70, &stru_1021A9580);
  v2 = qword_10229FD78;
  if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "WorkoutElevation,subs,phone,0", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_1021A9580);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 1, "WorkoutElevation,subs,phone,0", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLElevationController::doUnsubscribe(const T *) [T = CLElevationController::ETimerExpires]", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  if ((sub_1001B7910() & 0x1000000000) != 0)
    sub_1012158EC(*(_QWORD *)(a1 + 2376), 0);
  else
    sub_1008B51D8(a1 + 88);
  objc_msgSend(*(id *)(a1 + 24), "setNextFireDelay:", 1.79769313e308);
  return objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 2368), "vendor"), "proxyForService:", CFSTR("CLOdometerNotifier")), "updatePhoneWorkoutElevationSubscription:", 0);
}

void sub_1012167D8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_10047F25C((_QWORD *)(a2 + 344));
    sub_10047F25C((_QWORD *)(a2 + 296));
    *(_QWORD *)(a2 + 192) = off_10213D2B0;
    sub_100008848(a2 + 256, *(_QWORD **)(a2 + 264));
    sub_10047F25C((_QWORD *)(a2 + 208));
    sub_100554930((_QWORD *)(a2 + 144));
    sub_1006CFD68((_QWORD *)(a2 + 96));
    sub_100554930((_QWORD *)(a2 + 48));
    sub_1006CFD68((_QWORD *)a2);
    operator delete();
  }
}

uint64_t sub_101216860()
{
  sub_1015A2E04(qword_10230D510, "Acc800Fp");
  dword_10230D528 = 800;
  __cxa_atexit((void (*)(void *))sub_1005CB0EC, qword_10230D510, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230D530, "DmFp");
  dword_10230D548 = 200;
  __cxa_atexit((void (*)(void *))sub_1005CB0EC, qword_10230D530, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_10230D550, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230D550, (void *)&_mh_execute_header);
}

void sub_101216918(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = a1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 32);
  v2 = (_QWORD *)(a1 + 112);
  sub_10010D350(a1 + 104, *(_QWORD **)(a1 + 112));
  *(_QWORD *)(v1 + 104) = v2;
  *(_QWORD *)(v1 + 120) = 0;
  *v2 = 0;
  sub_10010D350(v1 + 56, *(_QWORD **)(v1 + 64));
  *(_QWORD *)(v1 + 56) = v1 + 64;
  *(_QWORD *)(v1 + 64) = 0;
  v3 = *(_QWORD **)(v1 + 88);
  v1 += 88;
  *(_QWORD *)(v1 - 16) = 0;
  sub_10010D350(v1 - 8, v3);
  *(_QWORD *)(v1 - 8) = v1;
  *(_QWORD *)v1 = 0;
  *(_QWORD *)(v1 + 8) = 0;
}

void sub_101216994(_QWORD *a1, int a2)
{
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _DWORD v11[2];
  __int16 v12;
  int v13;
  uint8_t buf[16];
  uint64_t v15;

  v4 = 0;
  while (dword_101C475B8[v4] < a2)
  {
    if (++v4 == 11)
      goto LABEL_15;
  }
  if (v4 < 0xC)
  {
LABEL_15:
    v8 = a1[4];
    if (v8 == a1[5])
    {
      v11[0] = 0;
      sub_100CB0348(buf, 0xCuLL, v11);
      v9 = (void *)a1[4];
      if (v9)
      {
        a1[5] = v9;
        operator delete(v9);
      }
      v10 = *(_QWORD *)buf;
      *((_OWORD *)a1 + 2) = *(_OWORD *)buf;
      a1[6] = v15;
      v8 = v10;
    }
    ++*(_DWORD *)(v8 + 4 * v4);
    return;
  }
  if (qword_10229FE80 != -1)
    dispatch_once(&qword_10229FE80, &stru_1021A95A0);
  v5 = qword_10229FE88;
  if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67240449;
    *(_DWORD *)&buf[4] = v4;
    *(_WORD *)&buf[8] = 1025;
    *(_DWORD *)&buf[10] = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "AltimeterMetrics, request count, invalid bucket index, %{public}d, count, %{private}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_1021A95A0);
    v11[0] = 67240449;
    v11[1] = v4;
    v12 = 1025;
    v13 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 16, "AltimeterMetrics, request count, invalid bucket index, %{public}d, count, %{private}d", v11, 14);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 0, "void CLSubHarvesterAltimeterMetrics::recordAPsInALSRequest(int)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
}

void sub_101216BDC(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t *v17;
  uint64_t **v18;
  int v19;
  unsigned __int8 v20;
  unsigned __int8 *v21;
  __int16 v22;
  int v23;
  uint8_t buf[16];
  uint64_t *v25;

  v4 = 0;
  v20 = a3;
  while (dword_101C475B8[v4] < a2)
  {
    if (++v4 == 11)
      goto LABEL_15;
  }
  if (v4 < 0xC)
  {
LABEL_15:
    v10 = *(_QWORD *)(a1 + 64);
    v8 = a1 + 64;
    v9 = v10;
    v11 = (uint64_t **)(v8 - 8);
    if (!v10)
      goto LABEL_26;
    v12 = v8;
    do
    {
      v13 = *(unsigned __int8 *)(v9 + 32);
      v14 = v13 >= a3;
      if (v13 >= a3)
        v15 = (uint64_t *)v9;
      else
        v15 = (uint64_t *)(v9 + 8);
      if (v14)
        v12 = v9;
      v9 = *v15;
    }
    while (*v15);
    if (v12 == v8 || *(unsigned __int8 *)(v12 + 32) > a3)
    {
LABEL_26:
      v19 = 0;
      sub_100CB0348(buf, 0xCuLL, &v19);
      v21 = &v20;
      v16 = sub_1012174F8(v11, &v20, (uint64_t)&unk_101B9EB60, &v21);
      v17 = v16[5];
      if (v17)
      {
        v16[6] = v17;
        operator delete(v17);
        v16[5] = 0;
        v16[6] = 0;
        v16[7] = 0;
      }
      *(_OWORD *)(v16 + 5) = *(_OWORD *)buf;
      v16[7] = v25;
    }
    *(_QWORD *)buf = &v20;
    v18 = sub_1012174F8(v11, &v20, (uint64_t)&unk_101B9EB60, (_BYTE **)buf);
    ++*((_DWORD *)v18[5] + v4);
    return;
  }
  if (qword_10229FE80 != -1)
    dispatch_once(&qword_10229FE80, &stru_1021A95A0);
  v5 = qword_10229FE88;
  if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67240449;
    *(_DWORD *)&buf[4] = v4;
    *(_WORD *)&buf[8] = 1025;
    *(_DWORD *)&buf[10] = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "AltimeterMetrics, prioritized, invalid bucket index, %{public}d, count, %{private}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_1021A95A0);
    LODWORD(v21) = 67240449;
    HIDWORD(v21) = v4;
    v22 = 1025;
    v23 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 16, "AltimeterMetrics, prioritized, invalid bucket index, %{public}d, count, %{private}d", &v21, 14);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 0, "void CLSubHarvesterAltimeterMetrics::recordPrioritizedAPsInArchive(int, BOOL)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
}

void sub_101216EAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_101216ED0(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t *v17;
  uint64_t **v18;
  int v19;
  unsigned __int8 v20;
  unsigned __int8 *v21;
  __int16 v22;
  int v23;
  uint8_t buf[16];
  uint64_t *v25;

  v4 = 0;
  v20 = a3;
  while (dword_101C475B8[v4] < a2)
  {
    if (++v4 == 11)
      goto LABEL_15;
  }
  if (v4 < 0xC)
  {
LABEL_15:
    v10 = *(_QWORD *)(a1 + 88);
    v8 = a1 + 88;
    v9 = v10;
    v11 = (uint64_t **)(v8 - 8);
    if (!v10)
      goto LABEL_26;
    v12 = v8;
    do
    {
      v13 = *(unsigned __int8 *)(v9 + 32);
      v14 = v13 >= a3;
      if (v13 >= a3)
        v15 = (uint64_t *)v9;
      else
        v15 = (uint64_t *)(v9 + 8);
      if (v14)
        v12 = v9;
      v9 = *v15;
    }
    while (*v15);
    if (v12 == v8 || *(unsigned __int8 *)(v12 + 32) > a3)
    {
LABEL_26:
      v19 = 0;
      sub_100CB0348(buf, 0xCuLL, &v19);
      v21 = &v20;
      v16 = sub_1012174F8(v11, &v20, (uint64_t)&unk_101B9EB60, &v21);
      v17 = v16[5];
      if (v17)
      {
        v16[6] = v17;
        operator delete(v17);
        v16[5] = 0;
        v16[6] = 0;
        v16[7] = 0;
      }
      *(_OWORD *)(v16 + 5) = *(_OWORD *)buf;
      v16[7] = v25;
    }
    *(_QWORD *)buf = &v20;
    v18 = sub_1012174F8(v11, &v20, (uint64_t)&unk_101B9EB60, (_BYTE **)buf);
    ++*((_DWORD *)v18[5] + v4);
    return;
  }
  if (qword_10229FE80 != -1)
    dispatch_once(&qword_10229FE80, &stru_1021A95A0);
  v5 = qword_10229FE88;
  if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67240449;
    *(_DWORD *)&buf[4] = v4;
    *(_WORD *)&buf[8] = 1025;
    *(_DWORD *)&buf[10] = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "AltimeterMetrics, prioritized, invalid bucket index, %{public}d, count, %{private}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_1021A95A0);
    LODWORD(v21) = 67240449;
    HIDWORD(v21) = v4;
    v22 = 1025;
    v23 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 16, "AltimeterMetrics, prioritized, invalid bucket index, %{public}d, count, %{private}d", &v21, 14);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 0, "void CLSubHarvesterAltimeterMetrics::recordUnknownAPsInArchive(int, BOOL)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
}

void sub_1012171A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1012171C4(uint64_t a1, unsigned int a2, float a3)
{
  uint64_t v4;
  signed int v5;
  NSObject *v6;
  const char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t **v17;
  uint64_t *v18;
  uint64_t **v19;
  int v20;
  unsigned __int8 v21;
  unsigned __int8 *v22;
  __int16 v23;
  double v24;
  _BYTE buf[1632];

  v4 = 0;
  v21 = a2;
  v5 = vcvtms_s32_f32(a3);
  while (dword_101C475E4[v4] < v5)
  {
    if (++v4 == 11)
      goto LABEL_15;
  }
  if (v4 < 0xC)
  {
LABEL_15:
    v11 = *(_QWORD *)(a1 + 112);
    v9 = a1 + 112;
    v10 = v11;
    v12 = (uint64_t **)(v9 - 8);
    if (!v11)
      goto LABEL_26;
    v13 = v9;
    do
    {
      v14 = *(unsigned __int8 *)(v10 + 32);
      v15 = v14 >= a2;
      if (v14 >= a2)
        v16 = (uint64_t *)v10;
      else
        v16 = (uint64_t *)(v10 + 8);
      if (v15)
        v13 = v10;
      v10 = *v16;
    }
    while (*v16);
    if (v13 == v9 || *(unsigned __int8 *)(v13 + 32) > a2)
    {
LABEL_26:
      v20 = 0;
      sub_100CB0348(buf, 0xCuLL, &v20);
      v22 = &v21;
      v17 = sub_1012174F8(v12, &v21, (uint64_t)&unk_101B9EB60, &v22);
      v18 = v17[5];
      if (v18)
      {
        v17[6] = v18;
        operator delete(v18);
        v17[5] = 0;
        v17[6] = 0;
        v17[7] = 0;
      }
      *(_OWORD *)(v17 + 5) = *(_OWORD *)buf;
      v17[7] = *(uint64_t **)&buf[16];
    }
    *(_QWORD *)buf = &v21;
    v19 = sub_1012174F8(v12, &v21, (uint64_t)&unk_101B9EB60, (_BYTE **)buf);
    ++*((_DWORD *)v19[5] + v4);
    return;
  }
  if (qword_10229FE80 != -1)
    dispatch_once(&qword_10229FE80, &stru_1021A95A0);
  v6 = qword_10229FE88;
  if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67240449;
    *(_DWORD *)&buf[4] = v4;
    *(_WORD *)&buf[8] = 2049;
    *(double *)&buf[10] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "AltimeterMetrics, max delta, invalid bucket index, %{public}d, delta, %{private}f", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_1021A95A0);
    LODWORD(v22) = 67240449;
    HIDWORD(v22) = v4;
    v23 = 2049;
    v24 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 16, "AltimeterMetrics, max delta, invalid bucket index, %{public}d, delta, %{private}f", &v22, 18);
    v8 = (char *)v7;
    sub_100512490("Generic", 1, 0, 0, "void CLSubHarvesterAltimeterMetrics::recordMaxDeltaHeightInArchive(float, BOOL)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
}

void sub_1012174A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1012174CC(id a1)
{
  qword_10229FE88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

uint64_t **sub_1012174F8(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, _BYTE **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  _BYTE *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((unsigned __int8 *)v6 + 32);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x40uLL);
    v11[32] = **a4;
    *((_QWORD *)v11 + 6) = 0;
    *((_QWORD *)v11 + 7) = 0;
    *((_QWORD *)v11 + 5) = 0;
    sub_1000145B0(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

_BYTE *sub_1012175BC(_BYTE *__dst, unsigned __int8 *a2, size_t a3)
{
  unsigned int v4;
  uint64_t v5;

  if (a3 && ((v4 = *a2 - 1, v4 > 8) ? (v5 = 0) : (v5 = qword_101C47630[(char)v4]), v5 == a3))
    memcpy(__dst, a2, a3);
  else
    *__dst = -1;
  return __dst;
}

unsigned __int8 *sub_101217628(unsigned __int8 *result, _QWORD *a2)
{
  unsigned int v2;

  v2 = *result - 1;
  if (v2 <= 8)
    return (unsigned __int8 *)(*(uint64_t (**)(_QWORD *, unsigned __int8 *))(*a2
                                                                                     + 8 * v2
                                                                                     + 16))(a2, result);
  return result;
}

void sub_101217658(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  _QWORD *v5;

  v5 = (_QWORD *)sub_1001B5A2C(a1, a2, a3, a4, a5);
  *v5 = off_1021A95E0;
  v5[6] = 0;
  v5[7] = 0;
  v5[8] = 0;
  sub_100239888();
}

void sub_101217700(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;

  v5 = *(_QWORD *)(v1 + 64);
  *(_QWORD *)(v1 + 64) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  sub_10194783C(v3, v2);
  sub_10002FA68(v1);
  _Unwind_Resume(a1);
}

void sub_101217738(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLMotionStateSubscription::onMotionStateNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 8), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021A9630);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionStateSubscription::onMotionStateNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A9630);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionStateSubscription::onMotionStateNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1012184EC(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1012178F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101217914(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = off_1021A95E0;
  v2 = a1[8];
  a1[8] = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = a1[8];
    a1[8] = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  v4 = a1[7];
  a1[7] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = a1[6];
  a1[6] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return sub_10002FA68((uint64_t)a1);
}

void sub_1012179A4(_QWORD *a1)
{
  sub_101217914(a1);
  operator delete();
}

_QWORD *sub_1012179C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t i;
  _BYTE *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  _QWORD v11[3];
  _QWORD *v12;
  _QWORD v13[3];
  _QWORD *v14;
  _QWORD v15[3];
  _QWORD *v16;
  _QWORD v17[3];
  uint64_t v18;
  _QWORD v19[3];
  uint64_t v20;
  _QWORD v21[3];
  _BYTE v22[32];

  v15[0] = off_1021A96A0;
  v15[1] = sub_101217CE8;
  v15[2] = 0;
  v16 = v15;
  sub_1015A2E04(v17, "kCLConnectionMessageMotionState");
  sub_100BB9B40((uint64_t)&v18, (uint64_t)v15);
  v13[0] = off_1021A9730;
  v13[1] = sub_101217F3C;
  v13[2] = 0;
  v14 = v13;
  sub_1015A2E04(v19, "kCLConnectionMessageMotionStateSim");
  sub_100BB9B40((uint64_t)&v20, (uint64_t)v13);
  v11[0] = off_1021A9730;
  v11[1] = sub_101218254;
  v11[2] = 0;
  v12 = v11;
  sub_1015A2E04(v21, "kCLConnectionMessageMotionStateYouthSim");
  sub_100BB9B40((uint64_t)v22, (uint64_t)v11);
  sub_101219058(a1, (unsigned __int8 *)v17, 3);
  for (i = 0; i != -21; i -= 7)
  {
    v3 = *(_BYTE **)&v22[i * 8 + 24];
    if (&v22[i * 8] == v3)
    {
      v3 = &v22[i * 8];
      v4 = 4;
    }
    else
    {
      if (!v3)
        goto LABEL_7;
      v4 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_7:
    if (SHIBYTE(v21[i + 2]) < 0)
      operator delete((void *)v21[i]);
  }
  v5 = v12;
  if (v12 == v11)
  {
    v6 = 4;
    v5 = v11;
LABEL_14:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  else if (v12)
  {
    v6 = 5;
    goto LABEL_14;
  }
  v7 = v14;
  if (v14 == v13)
  {
    v8 = 4;
    v7 = v13;
LABEL_19:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  else if (v14)
  {
    v8 = 5;
    goto LABEL_19;
  }
  result = v16;
  if (v16 == v15)
  {
    v10 = 4;
    result = v15;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
  }
  else if (v16)
  {
    v10 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
  }
  return result;
}

void sub_101217BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, char a13, uint64_t a14, uint64_t a15, char *a16, char a17, uint64_t a18, uint64_t a19, char *a20,char a21)
{
  uint64_t i;
  uint64_t *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;

  for (i = 112; i != -56; i -= 56)
    sub_1004E21A4((uint64_t)(&a21 + i));
  v23 = a12;
  if (a12 == &a9)
  {
    v24 = 4;
    v23 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_8;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_8:
  v25 = a16;
  if (a16 == &a13)
  {
    v26 = 4;
    v25 = &a13;
  }
  else
  {
    if (!a16)
      goto LABEL_13;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_13:
  v27 = a20;
  if (a20 == &a17)
  {
    v28 = 4;
    v27 = &a17;
  }
  else
  {
    if (!a20)
      goto LABEL_18;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_18:
  _Unwind_Resume(a1);
}

void sub_101217CE8(uint64_t a1, int a2)
{
  id v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  uint64_t v14;
  __int16 v15;
  int v16;
  uint8_t buf[4];
  uint64_t v18;
  __int16 v19;
  int v20;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_10229FCB0 != -1)
    dispatch_once(&qword_10229FCB0, &stru_1021A9650);
  v5 = qword_10229FCB8;
  if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_INFO))
  {
    v6 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)buf = 138412546;
    v18 = v6;
    v19 = 1024;
    v20 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Received MotionState request,client,%@,subscribe,%d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_1021A9650);
    v10 = *(_QWORD *)(a1 + 24);
    v13 = 138412546;
    v14 = v10;
    v15 = 1024;
    v16 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 1, "Received MotionState request,client,%@,subscribe,%d", &v13, 18);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionStateSubscription::handleRequestMotionState(BOOL, const CLNameValuePair &)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  sub_1001A638C(a1);
  v7 = *(_QWORD *)(a1 + 64);
  v9 = *(_QWORD *)(v7 + 8);
  v8 = *(void **)(v7 + 16);
  if (a2)
    objc_msgSend(v8, "register:forNotification:registrationInfo:", v9, 1, 0);
  else
    objc_msgSend(v8, "unregister:forNotification:", v9, 1);

}

void sub_101217F08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_101217F3C(uint64_t a1, CLConnectionMessage **a2)
{
  id v4;
  void *Dictionary;
  id v6;
  id v7;
  void *v8;
  BOOL v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  const char *v15;
  uint8_t *v16;
  _QWORD v17[6];
  _WORD v18[8];
  uint8_t buf[1640];

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  sub_1001A638C(a1);
  Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
  v6 = objc_msgSend(Dictionary, "objectForKeyedSubscript:", CMMotionStateSim);
  v7 = objc_msgSend(Dictionary, "objectForKeyedSubscript:", CMMotionStateSimState);
  v8 = v7;
  if (v6)
    v9 = v7 == 0;
  else
    v9 = 1;
  if (v9)
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021A9670);
    v10 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Invalid message recieved from framework.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021A9670);
      v18[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 17, "Invalid message recieved from framework.", v18, 2);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 0, "void CLMotionStateSubscription::handleMessageMotionStateSim(std::shared_ptr<CLConnectionMessage>)", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
  }
  v11 = sub_1001FBB04(0);
  v12 = v11;
  if (v11 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 96))(v11) & 1) != 0)
  {
    v13 = objc_msgSend(v6, "BOOLValue");
    v14 = *(_QWORD *)(a1 + 48);
    if ((v13 & 1) != 0)
    {
      if (!v14)
      {
        v17[0] = _NSConcreteStackBlock;
        v17[1] = 3221225472;
        v17[2] = sub_10121883C;
        v17[3] = &unk_102165F00;
        v17[4] = v8;
        v17[5] = a1;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v12 + 112))(v12, v17);
        goto LABEL_20;
      }
      (*(void (**)(uint64_t, id))(*(_QWORD *)v14 + 16))(v14, objc_msgSend(v8, "unsignedIntValue"));
    }
    else
    {
      *(_QWORD *)(a1 + 48) = 0;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    }
    sub_101218674(a1, 0);
  }
  else
  {
    sub_101218674(a1, 2);
  }
LABEL_20:

}

void sub_101218218(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_101218254(uint64_t a1, CLConnectionMessage **a2)
{
  id v4;
  id v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint8_t *v10;
  _QWORD v11[6];
  _WORD v12[8];
  uint8_t buf[1640];

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  sub_1001A638C(a1);
  v5 = objc_msgSend((id)CLConnectionMessage::getDictionary(*a2), "objectForKeyedSubscript:", CMMotionStateSimState);
  if (!v5)
  {
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_1021A9650);
    v6 = qword_10229FCB8;
    if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Failed to override motion state youth. Invalid message received from framework.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_1021A9650);
      v12[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 17, "Failed to override motion state youth. Invalid message received from framework.", v12, 2);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 0, "void CLMotionStateSubscription::handleMessageMotionStateYouthSim(std::shared_ptr<CLConnectionMessage>)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
  v7 = sub_1001FBB04(0);
  v8 = *(_QWORD *)(a1 + 56);
  if (v8)
  {
    (*(void (**)(uint64_t, id))(*(_QWORD *)v8 + 16))(v8, objc_msgSend(v5, "unsignedIntValue"));
    sub_1012188B8(a1, 0);
  }
  else
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_101218A80;
    v11[3] = &unk_102165F00;
    v11[4] = v5;
    v11[5] = a1;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v7 + 120))(v7, v11);
  }

}

void sub_1012184B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1012184EC(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  id v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  id v11;
  NSDictionary *v12;
  _OWORD v13[8];
  uint64_t v14;
  uint64_t v15;
  id v16;

  if (*a3 == 1)
  {
    v6 = objc_alloc((Class)CMActivity);
    v7 = *(_OWORD *)(a4 + 112);
    v13[6] = *(_OWORD *)(a4 + 96);
    v13[7] = v7;
    v14 = *(_QWORD *)(a4 + 128);
    v8 = *(_OWORD *)(a4 + 48);
    v13[2] = *(_OWORD *)(a4 + 32);
    v13[3] = v8;
    v9 = *(_OWORD *)(a4 + 80);
    v13[4] = *(_OWORD *)(a4 + 64);
    v13[5] = v9;
    v10 = *(_OWORD *)(a4 + 16);
    v13[0] = *(_OWORD *)a4;
    v13[1] = v10;
    v11 = objc_msgSend(v6, "initWithMotionActivity:", v13);
    v15 = CMActivityData;
    v16 = v11;
    v12 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v16, &v15, 1);

    sub_1012185CC(a1, &v12);
  }
}

void sub_1012185CC(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_100876330(&off_1021A97A0, a2, &v6);
  sub_10011A678(a1, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_101218660(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101218674(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  _QWORD v5[6];

  v4 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "silo"), "queue");
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1012186E0;
  v5[3] = &unk_102143528;
  v5[4] = a1;
  v5[5] = a2;
  dispatch_async(v4, v5);
}

uint64_t sub_1012186E0(uint64_t a1)
{
  uint64_t v1;
  NSDictionary *v3;
  uint64_t v4;
  NSNumber *v5;

  v4 = CMMotionStateSimResult;
  v1 = *(_QWORD *)(a1 + 32);
  v5 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 40));
  v3 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v5, &v4, 1);
  sub_101218794(v1, &v3);
  return sub_1001A638C(v1);
}

void sub_101218794(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_100876330(&off_1021A97A8, a2, &v6);
  sub_10011A678(a1, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_101218828(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10121883C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 40);
  v4 = *a2;
  *a2 = 0;
  v5 = *(_QWORD *)(v3 + 48);
  *(_QWORD *)(v3 + 48) = v4;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v4 = *(_QWORD *)(v3 + 48);
  }
  if (v4)
  {
    (*(void (**)(uint64_t, id))(*(_QWORD *)v4 + 16))(v4, objc_msgSend(*(id *)(a1 + 32), "unsignedIntValue"));
    v6 = 0;
  }
  else
  {
    v6 = 1;
  }
  sub_101218674(v3, v6);
}

void sub_1012188B8(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  _QWORD v5[6];

  v4 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "silo"), "queue");
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_101218924;
  v5[3] = &unk_102143528;
  v5[4] = a1;
  v5[5] = a2;
  dispatch_async(v4, v5);
}

uint64_t sub_101218924(uint64_t a1)
{
  uint64_t v1;
  NSDictionary *v3;
  uint64_t v4;
  NSNumber *v5;

  v4 = CMMotionStateSimResult;
  v1 = *(_QWORD *)(a1 + 32);
  v5 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 40));
  v3 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v5, &v4, 1);
  sub_1012189D8(v1, &v3);
  return sub_1001A638C(v1);
}

void sub_1012189D8(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_100876330(&off_1021A97B0, a2, &v6);
  sub_10011A678(a1, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_101218A6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101218A80(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 40);
  v4 = *a2;
  *a2 = 0;
  v5 = *(_QWORD *)(v3 + 56);
  *(_QWORD *)(v3 + 56) = v4;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v4 = *(_QWORD *)(v3 + 56);
  }
  if (v4)
  {
    (*(void (**)(uint64_t, id))(*(_QWORD *)v4 + 16))(v4, objc_msgSend(*(id *)(a1 + 32), "unsignedIntValue"));
    v6 = 0;
  }
  else
  {
    v6 = 1;
  }
  sub_1012188B8(v3, v6);
}

void sub_101218AFC(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_101218B28(id a1)
{
  qword_10229FCB8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Activity");
}

void sub_101218B54(id a1)
{
  qword_1022A01C8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

__n128 sub_101218B80(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_1021A96A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_101218BBC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1021A96A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_101218BE0(uint64_t a1, uint64_t a2, __int128 *a3)
{
  sub_101218C30(a1 + 8, a2, a3);
}

uint64_t sub_101218BE8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101218C24()
{
}

void sub_101218C30(uint64_t a1, uint64_t a2, __int128 *a3)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v6 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  sub_101218CB4(a1, a2, (CLConnectionMessage **)&v6);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_101218C9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
    sub_1018FBC0C(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101218CB4(uint64_t a1, uint64_t a2, CLConnectionMessage **a3)
{
  NSSet *v6;
  const __CFDictionary *DictionaryOfClasses;
  void (*v8)(_QWORD *, BOOL, uint8_t *);
  uint64_t v9;
  _QWORD *v10;
  NSObject *v11;
  NSObject *v12;
  BOOL v14;
  uint8_t v15[16];
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;

  v6 = (NSSet *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  DictionaryOfClasses = (const __CFDictionary *)CLConnectionMessage::getDictionaryOfClasses(*a3, v6);
  sub_1001C1D6C((int)v15, DictionaryOfClasses);
  v14 = 0;
  if ((sub_1001E4874((uint64_t)v15, "kCLConnectionMessageSubscribeKey", &v14) & 1) != 0)
  {
    v8 = *(void (**)(_QWORD *, BOOL, uint8_t *))a1;
    v9 = *(_QWORD *)(a1 + 8);
    v10 = (_QWORD *)(a2 + (v9 >> 1));
    if ((v9 & 1) != 0)
      v8 = *(void (**)(_QWORD *, BOOL, uint8_t *))(*v10 + v8);
    v8(v10, v14, v15);
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021A9670);
    v11 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289026;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021A9670);
    }
    v12 = qword_1022A01C8;
    if (os_signpost_enabled((os_log_t)qword_1022A01C8))
    {
      *(_DWORD *)buf = 68289026;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Couldn't get value for kCLConnectionMessageSubscribeKey key", "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
    }
  }
  return sub_10011A5A8(v15);
}

void sub_101218E9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

__n128 sub_101218EB8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_1021A9730;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_101218EF4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1021A9730;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_101218F18(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_101218F68(a1 + 8, a2, a3);
}

uint64_t sub_101218F20(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101218F5C()
{
}

void sub_101218F68(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  void (*v5)(_QWORD *, uint64_t *);
  uint64_t v6;
  _QWORD *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v4 = *a3;
  v3 = (std::__shared_weak_count *)a3[1];
  v15 = v3;
  *a3 = 0;
  a3[1] = 0;
  v5 = *(void (**)(_QWORD *, uint64_t *))a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(void (**)(_QWORD *, uint64_t *))(*v7 + v5);
  v16 = v4;
  v17 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v5(v7, &v16);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_10121903C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100261F44((uint64_t)&a11);
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_101219058(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 56 * a3;
    do
    {
      sub_1012190D0(a1, a2, (__int128 *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_1012190BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E6A98(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1012190D0(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_10025A024(a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((sub_10025A4CC(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  sub_101219350(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_10012E444(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_1004E69F0((uint64_t)v25, 0);
  return i;
}

void sub_101219338(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004E69F0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_101219350@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = sub_1012193C4(v8 + 2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1012193AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E69F0(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_1012193C4(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_100270E34((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_10121941C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101219438(uint64_t a1)
{
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 8) = _Q0;
  *(_QWORD *)(a1 + 24) = 0xBFF0000000000000;
  *(_BYTE *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)a1 = sub_1001FD94C();
  return a1;
}

void sub_10121947C(uint64_t a1, uint64_t a2, char a3)
{
  if (sub_100F72B18(a2) == 1)
  {
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 32);
    if (!*(_BYTE *)(a1 + 32))
    {
      *(_BYTE *)(a1 + 32) = 1;
      *(double *)(a1 + 8) = sub_100515CB4();
      sub_1001FD98C(*(_QWORD *)a1, "CLVO2MaxPreconditionCheckerTimeOfLastEstimate", (void *)(a1 + 16));
      sub_1001FD98C(*(_QWORD *)a1, "CLVO2MaxPreconditionCheckerTimeOfLastWorkout", (void *)(a1 + 24));
    }
    *(_BYTE *)(a1 + 40) = a3;
    sub_101219524(a1, 1u);
  }
}

void sub_101219524(uint64_t a1, unsigned int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  const char *v11;
  uint8_t *v12;
  double v13;
  uint64_t v14;
  _BYTE v15[10];
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  unsigned int v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  int v27;

  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_1021A97B8);
  v4 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)buf = 67109888;
    v21 = a2;
    v22 = 2048;
    v23 = v5;
    v24 = 2048;
    v25 = v6;
    v26 = 1024;
    v27 = sub_101219820(a1);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "VO2MaxPrecondition,sessionStart,%d,sessionStartTime,%f,lastEstimateTime,%f,status,%d", buf, 0x22u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A97B8);
    v7 = qword_10229FC98;
    v8 = *(_QWORD *)(a1 + 8);
    v9 = *(_QWORD *)(a1 + 16);
    v10 = sub_101219820(a1);
    *(_WORD *)v15 = 2048;
    *(_QWORD *)&v15[2] = v8;
    v16 = 2048;
    v17 = v9;
    v18 = 1024;
    v19 = v10;
    LODWORD(v13) = 34;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 0, "VO2MaxPrecondition,sessionStart,%d,sessionStartTime,%f,lastEstimateTime,%f,status,%d", &v14, v13, COERCE_DOUBLE(__PAIR64__(a2, 67109888)), *(_DWORD *)v15);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLVO2MaxPreconditionChecker::log(BOOL) const", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
}

uint64_t sub_10121972C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  double v7;
  double v13;

  result = sub_100F72B18(a2);
  if ((_DWORD)result == 2)
  {
    v13 = sub_100515CB4();
    v7 = *(double *)(a3 + 16);
    if (v7 != -1.0)
      sub_10018A4CC(*a1, "CLVO2MaxPreconditionCheckerTimeOfLastEstimate", &v13);
    if (*((_BYTE *)a1 + 32) && (*(_DWORD *)(a2 + 32) - 1) <= 1)
    {
      sub_10018A4CC(*a1, "CLVO2MaxPreconditionCheckerTimeOfLastWorkout", &v13);
    }
    else if (v7 == -1.0)
    {
LABEL_9:
      sub_101219524((uint64_t)a1, 0);
      result = sub_1001FD94C();
      *a1 = result;
      __asm { FMOV            V0.2D, #-1.0 }
      *(_OWORD *)(a1 + 1) = _Q0;
      a1[3] = 0xBFF0000000000000;
      *((_BYTE *)a1 + 32) = 0;
      *((_DWORD *)a1 + 9) = 0;
      *((_BYTE *)a1 + 40) = 0;
      return result;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)*a1 + 944))(*a1);
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_101219820(uint64_t a1)
{
  double v2;
  BOOL v3;
  double v4;
  double v5;
  unsigned int v6;
  double v7;
  uint64_t result;

  if (*(_DWORD *)(a1 + 36) == 3)
  {
    v2 = *(double *)(a1 + 16);
    if (v2 >= 0.0)
    {
      v4 = *(double *)(a1 + 8) - v2;
      v3 = v4 < sub_100E3C3A0();
    }
    else
    {
      v3 = 0;
    }
    v5 = *(double *)(a1 + 24);
    if (v5 >= 0.0)
    {
      v7 = *(double *)(a1 + 8) - v5;
      if (v7 >= sub_100E3C434())
        v6 = 0;
      else
        v6 = -12;
      goto LABEL_11;
    }
  }
  else
  {
    v3 = 0;
  }
  v6 = 0;
LABEL_11:
  if (*(_BYTE *)(a1 + 32))
    result = 4294967286;
  else
    result = 0;
  if (*(_BYTE *)(a1 + 32) && !v3)
  {
    if (*(_BYTE *)(a1 + 40))
      return 4294967285;
    else
      return v6;
  }
  return result;
}

void sub_1012198D4(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_1012199D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a1 = a3;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0xBFF0000000000000;
  CLMotionActivity::getInit((CLMotionActivity *)a1);
  *(_QWORD *)(a1 + 184) = 0;
  sub_100B26370((_OWORD *)(a1 + 192));
  sub_100B263C4(a1 + 240);
  sub_100270E34(a1 + 280, a2);
  *(_DWORD *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_BYTE *)(a1 + 368) = 0;
  *(_DWORD *)(a1 + 408) = 1;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_BYTE *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 472) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 480) = 0xBFF0000000000000;
  *(_BYTE *)(a1 + 488) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 496) = _Q1;
  *(_BYTE *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 520) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 528) = 0xBFF0000000000000;
  *(_BYTE *)(a1 + 536) = 0;
  *(_QWORD *)(a1 + 592) = 0;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_DWORD *)(a1 + 600) = 1065353216;
  *(_QWORD *)(a1 + 608) = 0x100000005;
  *(_QWORD *)(a1 + 616) = 0;
  return a1;
}

void sub_101219AD4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_101219B64(v4);
  v6 = (uint64_t *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  if (v7)
    sub_10098CD60(v1 + 32, v7);
  sub_10098CDC0(v3, 0);
  v8 = *v6;
  *v6 = 0;
  if (v8)
    sub_10098CDFC(v1 + 16, v8);
  v9 = *v2;
  *v2 = 0;
  if (v9)
    sub_10098CE44((uint64_t)v2, v9);
  _Unwind_Resume(a1);
}

uint64_t sub_101219B64(uint64_t a1)
{
  void *v2;
  void *v3;

  sub_100008848(a1 + 48, *(_QWORD **)(a1 + 56));
  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

double sub_101219BB4(uint64_t a1, uint64_t a2)
{
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  double result;
  __int128 v15;

  *(double *)a2 = *(double *)(a1 + 16) / 1000000000.0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 96);
  __asm { FMOV            V0.2D, #-1.0 }
  v15 = _Q0;
  *(_OWORD *)(a2 + 32) = _Q0;
  v9 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a2 + 56) = v9;
  v10 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a2 + 72) = v10;
  *(_QWORD *)(a2 + 80) = 0;
  *(_DWORD *)(a2 + 88) = 0;
  *(_DWORD *)(a2 + 92) = sub_101712EEC((unint64_t *)a1);
  v11 = sub_101712F14((unint64_t *)a1);
  v12 = *(_QWORD *)(a1 + 80);
  *(double *)(a2 + 96) = v11 * 1000.0;
  *(_QWORD *)(a2 + 104) = v12;
  v13 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a2 + 120) = v13;
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 112);
  *(_QWORD *)(a2 + 144) = *(_QWORD *)(a1 + 128);
  *(_OWORD *)(a2 + 152) = v15;
  *(_DWORD *)(a2 + 192) = -1;
  *(_QWORD *)(a2 + 176) = -1;
  *(_QWORD *)(a2 + 184) = -1;
  *(_QWORD *)(a2 + 168) = 0xBFF0000000000000;
  *(_QWORD *)(a2 + 200) = 0xBFF0000000000000;
  *(_QWORD *)(a2 + 208) = -1;
  *(_QWORD *)(a2 + 216) = 0xBFF0000000000000;
  *(_DWORD *)(a2 + 224) = -1;
  result = 0.0;
  *(_OWORD *)(a2 + 232) = xmmword_101C16D40;
  return result;
}

void sub_101219CAC(uint64_t a1, unsigned int *a2, int *a3, unint64_t *a4)
{
  double v8;
  unsigned int v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  NSObject *v15;
  unint64_t v16;
  unint64_t v17;
  const char *v18;
  NSObject *v19;
  unint64_t v20;
  unint64_t v21;
  NSObject *v22;
  unint64_t v23;
  unint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  int v30;
  int v31;
  _BOOL4 v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  int v37;
  int v38;
  _BOOL4 v39;
  int v40;
  int v41;
  const char *v42;
  NSObject *v43;
  int v44;
  int v45;
  _BOOL4 v46;
  NSObject *v47;
  int v48;
  int v49;
  _BOOL4 v50;
  NSObject *v51;
  int v52;
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  const char *v57;
  uint8_t *v58;
  int v59;
  int v60;
  uint8_t *v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint8_t buf[4];
  _BYTE v66[10];
  __int16 v67;
  uint64_t v68;

  if (*(_QWORD *)(a1 + 8))
  {
    v8 = 1.0;
    if ((CLMotionActivity::isTypeCycling(*a2) & 1) != 0)
    {
      v9 = 3;
    }
    else if ((CLMotionActivity::isTypeSwimming(*a2) & 1) != 0)
    {
      v9 = 15;
    }
    else if (CLMotionActivity::isTypeRunning(*a2, v10)
           && sub_100195F08()
           && sub_1000FDBD0())
    {
      v9 = 5;
      v8 = 1.02;
    }
    else
    {
      v9 = 5;
    }
    sub_101256050(*(unsigned int **)(a1 + 8), v9);
    sub_101256228(*(_QWORD *)(a1 + 8), v8);
  }
  if (*(_QWORD *)(a1 + 16))
  {
    if (CLMotionActivity::isTypeCycling(*a2))
    {
      v11 = *(_DWORD **)(a1 + 16);
      v12 = 3;
LABEL_59:
      sub_10108CD7C(v11, v12);
      sub_10108E624(*(_QWORD *)(a1 + 16), 1.0);
      goto LABEL_60;
    }
    if (CLMotionActivity::isTypeSwimming(*a2))
    {
      v11 = *(_DWORD **)(a1 + 16);
      v12 = 15;
      goto LABEL_59;
    }
    if (!CLMotionActivity::isTypeRunning(*a2, v13) || !sub_100195F08() || !sub_1000FDBD0())
    {
      v14 = *a4;
      if (*a4 == 37 || v14 == 23)
      {
        if (sub_100195F08() && sub_1000FDBD0())
        {
          sub_10108CD7C(*(_DWORD **)(a1 + 16), 3);
          sub_10108E624(*(_QWORD *)(a1 + 16), 1.02);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021A97D8);
          v15 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
          {
            v16 = *a4;
            *(_DWORD *)buf = 134349056;
            *(_QWORD *)v66 = v16;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "GPSODOM,downhill snow sports workout type,%{public}ld,", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021A97D8);
            v17 = *a4;
            LODWORD(v63) = 134349056;
            *(_QWORD *)((char *)&v63 + 4) = v17;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GPSODOM,downhill snow sports workout type,%{public}ld,", &v63, 12, v63);
LABEL_56:
            v25 = (uint8_t *)v18;
            sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryInterface::switchContext(const CLMotionActivity &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType &, const CMWorkoutType &)", "%s\n", v18);
            if (v25 != buf)
              free(v25);
            goto LABEL_60;
          }
          goto LABEL_60;
        }
        v14 = *a4;
      }
      if (v14 <= 0x31 && ((1 << v14) & 0x23E8000000000) != 0 && sub_100195F08() && sub_1000FDBD0())
      {
        sub_10108CD7C(*(_DWORD **)(a1 + 16), 5);
        sub_10108E624(*(_QWORD *)(a1 + 16), 1.025);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021A97D8);
        v19 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v20 = *a4;
          *(_DWORD *)buf = 134349056;
          *(_QWORD *)v66 = v20;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "GPSODOM,field sports workout type,%{public}ld,", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021A97D8);
          v21 = *a4;
          LODWORD(v63) = 134349056;
          *(_QWORD *)((char *)&v63 + 4) = v21;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GPSODOM,field sports workout type,%{public}ld,", &v63, 12, v63);
          goto LABEL_56;
        }
LABEL_60:
        if (((CLMotionActivity::isTypeWalking(*a2) & 1) != 0
           || (CLMotionActivity::isTypeRunning(*a2, v26) & 1) != 0
           || *a4 == 46
           || *a4 == 27)
          && sub_100195F08()
          && sub_1002416E0())
        {
          if (*a3 == 6)
          {
            if (CLMotionActivity::isTypeWalking(*a2))
            {
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_1021A97D8);
              v36 = qword_1022A0078;
              if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
              {
                v37 = *a2;
                v38 = *a3;
                *(_DWORD *)buf = 67240704;
                *(_DWORD *)v66 = v37;
                *(_WORD *)&v66[4] = 1026;
                *(_DWORD *)&v66[6] = v38;
                v67 = 2050;
                v68 = 0x3FF03D70A3D70A3DLL;
                _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "GPSODOM,activity type,%{public}d,sigEnv,%{public}d,distance multiplier,%{public}.3f", buf, 0x18u);
              }
              v39 = sub_1001BFF7C(115, 2);
              v33 = 1.015;
              if (!v39)
                goto LABEL_99;
              v34 = 0x3FF03D70A3D70A3DLL;
              bzero(buf, 0x65CuLL);
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_1021A97D8);
              v40 = *a2;
              v41 = *a3;
              LODWORD(v63) = 67240704;
              DWORD1(v63) = v40;
              WORD4(v63) = 1026;
              *(_DWORD *)((char *)&v63 + 10) = v41;
              HIWORD(v63) = 2050;
              LODWORD(v62) = 24;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GPSODOM,activity type,%{public}d,sigEnv,%{public}d,distance multiplier,%{public}.3f", &v63, v62, v63, 0x3FF03D70A3D70A3DLL);
              goto LABEL_119;
            }
            if (CLMotionActivity::isTypeRunning(*a2, v35))
            {
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_1021A97D8);
              v47 = qword_1022A0078;
              if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
              {
                v48 = *a2;
                v49 = *a3;
                *(_DWORD *)buf = 67240704;
                *(_DWORD *)v66 = v48;
                *(_WORD *)&v66[4] = 1026;
                *(_DWORD *)&v66[6] = v49;
                v67 = 2050;
                v68 = 0x3FF028F5C28F5C29;
                _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "GPSODOM,activity type,%{public}d,sigEnv,%{public}d,distance multiplier,%{public}.3f", buf, 0x18u);
              }
              v50 = sub_1001BFF7C(115, 2);
              v33 = 1.01;
              if (!v50)
                goto LABEL_99;
              v34 = 0x3FF028F5C28F5C29;
              bzero(buf, 0x65CuLL);
              if (qword_1022A0070 == -1)
                goto LABEL_118;
              goto LABEL_122;
            }
          }
          else if (*a3 == 1)
          {
            if (CLMotionActivity::isTypeWalking(*a2))
            {
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_1021A97D8);
              v29 = qword_1022A0078;
              if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
              {
                v30 = *a2;
                v31 = *a3;
                *(_DWORD *)buf = 67240704;
                *(_DWORD *)v66 = v30;
                *(_WORD *)&v66[4] = 1026;
                *(_DWORD *)&v66[6] = v31;
                v67 = 2050;
                v68 = 0x3FF028F5C28F5C29;
                _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "GPSODOM,activity type,%{public}d,sigEnv,%{public}d,distance multiplier,%{public}.3f", buf, 0x18u);
              }
              v32 = sub_1001BFF7C(115, 2);
              v33 = 1.01;
              if (!v32)
                goto LABEL_99;
              v34 = 0x3FF028F5C28F5C29;
              bzero(buf, 0x65CuLL);
              if (qword_1022A0070 == -1)
                goto LABEL_118;
LABEL_122:
              dispatch_once(&qword_1022A0070, &stru_1021A97D8);
LABEL_118:
              v59 = *a2;
              v60 = *a3;
              LODWORD(v63) = 67240704;
              DWORD1(v63) = v59;
              WORD4(v63) = 1026;
              *(_DWORD *)((char *)&v63 + 10) = v60;
              HIWORD(v63) = 2050;
              LODWORD(v62) = 24;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GPSODOM,activity type,%{public}d,sigEnv,%{public}d,distance multiplier,%{public}.3f", &v63, v62, v63, 0x3FF028F5C28F5C29);
LABEL_119:
              v61 = (uint8_t *)v42;
              sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryInterface::switchContext(const CLMotionActivity &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType &, const CMWorkoutType &)", "%s\n", v42);
              if (v61 != buf)
                free(v61);
              v33 = *(double *)&v34;
LABEL_99:
              sub_10108E624(*(_QWORD *)(a1 + 16), v33);
              goto LABEL_100;
            }
            if (CLMotionActivity::isTypeRunning(*a2, v28))
            {
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_1021A97D8);
              v43 = qword_1022A0078;
              if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
              {
                v44 = *a2;
                v45 = *a3;
                *(_DWORD *)buf = 67240704;
                *(_DWORD *)v66 = v44;
                *(_WORD *)&v66[4] = 1026;
                *(_DWORD *)&v66[6] = v45;
                v67 = 2050;
                v68 = 0x3FF028F5C28F5C29;
                _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "GPSODOM,activity type,%{public}d,sigEnv,%{public}d,distance multiplier,%{public}.3f", buf, 0x18u);
              }
              v46 = sub_1001BFF7C(115, 2);
              v33 = 1.01;
              if (!v46)
                goto LABEL_99;
              v34 = 0x3FF028F5C28F5C29;
              bzero(buf, 0x65CuLL);
              if (qword_1022A0070 == -1)
                goto LABEL_118;
              goto LABEL_122;
            }
          }
        }
LABEL_100:
        if (CLMotionActivity::isTypeRunning(*a2, v27)
          && sub_100195F08()
          && sub_1002416E0()
          && (*a3 - 3) <= 1)
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021A97D8);
          v51 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
          {
            v52 = *a2;
            v53 = *a3;
            *(_DWORD *)buf = 67240704;
            *(_DWORD *)v66 = v52;
            *(_WORD *)&v66[4] = 1026;
            *(_DWORD *)&v66[6] = v53;
            v67 = 2050;
            v68 = 0x3FEF86EF9B1D0144;
            _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "GPSODOM,activity type,%{public}d,sigEnv,%{public}d,distance multiplier,%{public}.3f", buf, 0x18u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021A97D8);
            v55 = *a2;
            v56 = *a3;
            LODWORD(v63) = 67240704;
            DWORD1(v63) = v55;
            WORD4(v63) = 1026;
            *(_DWORD *)((char *)&v63 + 10) = v56;
            HIWORD(v63) = 2050;
            v64 = 0x3FEF86EF9B1D0144;
            LODWORD(v62) = 24;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GPSODOM,activity type,%{public}d,sigEnv,%{public}d,distance multiplier,%{public}.3f", &v63, v62);
            v58 = (uint8_t *)v57;
            sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryInterface::switchContext(const CLMotionActivity &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType &, const CMWorkoutType &)", "%s\n", v57);
            if (v58 != buf)
              free(v58);
          }
          sub_10108E624(*(_QWORD *)(a1 + 16), 0.985221675);
        }
        goto LABEL_110;
      }
      if (*a4 == 38 && sub_100195F08() && sub_1000FDBD0())
      {
        sub_10108CD7C(*(_DWORD **)(a1 + 16), 5);
        sub_10108E624(*(_QWORD *)(a1 + 16), 1.02);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021A97D8);
        v22 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v23 = *a4;
          *(_DWORD *)buf = 134349056;
          *(_QWORD *)v66 = v23;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "GPSODOM,paddle sports workout type,%{public}ld,", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021A97D8);
          v24 = *a4;
          LODWORD(v63) = 134349056;
          *(_QWORD *)((char *)&v63 + 4) = v24;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GPSODOM,paddle sports workout type,%{public}ld,", &v63, 12, v63);
          goto LABEL_56;
        }
        goto LABEL_60;
      }
    }
    v11 = *(_DWORD **)(a1 + 16);
    v12 = 5;
    goto LABEL_59;
  }
LABEL_110:
  v54 = *(_QWORD *)(a1 + 24);
  if (v54)
    sub_10121AA48(v54, (uint64_t)a2);
}

__n128 sub_10121AA48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __n128 result;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    *(_OWORD *)(v4 + 432) = *(_OWORD *)a2;
    v5 = *(_OWORD *)(a2 + 16);
    v6 = *(_OWORD *)(a2 + 32);
    v7 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(v4 + 480) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(v4 + 496) = v7;
    *(_OWORD *)(v4 + 448) = v5;
    *(_OWORD *)(v4 + 464) = v6;
    v8 = *(_OWORD *)(a2 + 80);
    v9 = *(_OWORD *)(a2 + 96);
    v10 = *(_OWORD *)(a2 + 112);
    *(_QWORD *)(v4 + 560) = *(_QWORD *)(a2 + 128);
    *(_OWORD *)(v4 + 528) = v9;
    *(_OWORD *)(v4 + 544) = v10;
    *(_OWORD *)(v4 + 512) = v8;
    sub_1017B8A18(v4);
  }
  v12 = *(_QWORD *)(a1 + 24);
  if (v12)
  {
    *(_OWORD *)(v12 + 400) = *(_OWORD *)a2;
    v13 = *(_OWORD *)(a2 + 16);
    v14 = *(_OWORD *)(a2 + 32);
    v15 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(v12 + 448) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(v12 + 464) = v15;
    *(_OWORD *)(v12 + 416) = v13;
    *(_OWORD *)(v12 + 432) = v14;
    v16 = *(_OWORD *)(a2 + 80);
    v17 = *(_OWORD *)(a2 + 96);
    v18 = *(_OWORD *)(a2 + 112);
    *(_QWORD *)(v12 + 528) = *(_QWORD *)(a2 + 128);
    *(_OWORD *)(v12 + 496) = v17;
    *(_OWORD *)(v12 + 512) = v18;
    *(_OWORD *)(v12 + 480) = v16;
    sub_1017B516C(v12);
  }
  return result;
}

BOOL sub_10121AAE8(uint64_t a1, double *a2, double a3)
{
  double v5;
  double v7;
  NSObject *v8;
  double v9;
  _BOOL8 result;
  double v11;
  const char *v12;
  uint8_t *v13;
  int v14;
  double v15;
  uint8_t buf[4];
  double v17;

  *a2 = -1.0;
  v5 = *(double *)(a1 + 40);
  if (v5 <= 0.0 || (v7 = a3 - v5, *a2 = v7, v7 >= 0.001))
  {
    result = 1;
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021A97D8);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *a2;
      *(_DWORD *)buf = 134349056;
      v17 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning,GPSODOM,invalid time between positions %{public}lf", buf, 0xCu);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021A97D8);
      v11 = *a2;
      v14 = 134349056;
      v15 = v11;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,GPSODOM,invalid time between positions %{public}lf", &v14, 12);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGpsOdometryInterface::getTimeInterval(double, double &)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
      result = 0;
    }
  }
  *(double *)(a1 + 40) = a3;
  return result;
}

uint64_t sub_10121ACE0(_QWORD *a1)
{
  __n128 *v2;
  uint64_t result;

  v2 = (__n128 *)a1[3];
  if (v2)
    sub_1017B0D08(v2);
  result = a1[4];
  if (result)
    result = sub_1017C195C(result);
  a1[2] = 0;
  a1[7] = a1[6];
  return result;
}

BOOL sub_10121AD20(double a1, double a2)
{
  double v3;
  _BOOL8 v4;
  NSObject *v6;
  const char *v8;
  uint8_t *v9;
  int v10;
  double v11;
  __int16 v12;
  double v13;
  __int16 v14;
  double v15;
  uint8_t buf[4];
  double v17;
  __int16 v18;
  double v19;
  __int16 v20;
  double v21;

  v3 = a2 / a1;
  v4 = a2 / a1 >= 0.0 && v3 <= 600.0;
  if (!v4)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021A97D8);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349568;
      v17 = v3;
      v18 = 2050;
      v19 = a1;
      v20 = 2050;
      v21 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "GPSODOM,impossible speed,%{public}f,timeInterval,%{public}f,deltaDist,%{public}f", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021A97D8);
      v10 = 134349568;
      v11 = v3;
      v12 = 2050;
      v13 = a1;
      v14 = 2050;
      v15 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "GPSODOM,impossible speed,%{public}f,timeInterval,%{public}f,deltaDist,%{public}f", &v10, 32);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLGpsOdometryInterface::isSpeedPossible(double, double) const", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
  return v4;
}

BOOL sub_10121AF28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, int a6, uint64_t a7, int *a8, char a9, uint64_t a10)
{
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BOOL8 v30;
  double v31;
  double v32;
  NSObject *v33;
  double *v34;
  double v35;
  NSObject *v36;
  double v37;
  double v38;
  NSObject *v39;
  const char *v40;
  uint8_t *v41;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  double v51;
  _OWORD *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  double v65;
  uint64_t v66;
  double v67;
  NSObject *v68;
  unsigned int *v69;
  double v70;
  NSObject *v71;
  unsigned int *v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  _QWORD *v86;
  __int128 v87;
  _QWORD *v88;
  double *v89;
  double v90;
  double *v91;
  double v92;
  double v93;
  NSObject *v94;
  uint64_t v95;
  double v96;
  NSObject *v98;
  const char *v99;
  uint8_t *v100;
  const char *v101;
  uint8_t *v102;
  const char *v103;
  uint8_t *v104;
  const char *v105;
  uint8_t *v106;
  const char *v107;
  uint8_t *v108;
  const char *v109;
  uint8_t *v110;
  const char *v111;
  uint8_t *v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  _OWORD v116[2];
  uint64_t v117;
  _WORD v118[8];
  double v119[31];
  double v120;
  int v121;
  double v122;
  uint8_t buf[4];
  double v124;

  v18 = a1 + 48;
  if (*(_DWORD *)a4 != *(_DWORD *)(a1 + 48) || *a8 != *(_DWORD *)(a1 + 312) || *a5 != *(_QWORD *)(a1 + 184))
  {
    sub_101219CAC(a1, (unsigned int *)a4, a8, a5);
    *(_OWORD *)v18 = *(_OWORD *)a4;
    v19 = *(_OWORD *)(a4 + 16);
    v20 = *(_OWORD *)(a4 + 32);
    v21 = *(_OWORD *)(a4 + 64);
    *(_OWORD *)(v18 + 48) = *(_OWORD *)(a4 + 48);
    *(_OWORD *)(v18 + 64) = v21;
    *(_OWORD *)(v18 + 16) = v19;
    *(_OWORD *)(v18 + 32) = v20;
    v22 = *(_OWORD *)(a4 + 80);
    v23 = *(_OWORD *)(a4 + 96);
    v24 = *(_OWORD *)(a4 + 112);
    *(_QWORD *)(v18 + 128) = *(_QWORD *)(a4 + 128);
    *(_OWORD *)(v18 + 96) = v23;
    *(_OWORD *)(v18 + 112) = v24;
    *(_OWORD *)(v18 + 80) = v22;
    *(_DWORD *)(a1 + 312) = *a8;
    *(_QWORD *)(a1 + 184) = *a5;
  }
  __asm { FMOV            V2.2D, #-1.0 }
  *(_OWORD *)(a2 + 224) = _Q2;
  *(_QWORD *)(a2 + 240) = 0xBFF0000000000000;
  *(_BYTE *)(a2 + 216) = 0;
  if (!a6)
  {
    v37 = *(double *)(a2 + 96);
    if (v37 > 0.0 && (*(_QWORD *)&v37 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      v38 = *(double *)(a2 + 104);
      if (v38 > 0.0)
      {
        v30 = 0;
        if (v37 > 100.0 || (*(_QWORD *)&v38 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          return v30;
        v115 = _Q2;
        if (!sub_10011CE64(*(double *)(a2 + 56), *(double *)(a2 + 64)))
          goto LABEL_143;
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021A97D8);
        v39 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "GPSODOM,Null Island not allowed, epochData", buf, 2u);
        }
        v30 = 0;
        if (!sub_1001BFF7C(115, 0))
          return v30;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021A97D8);
        LOWORD(v121) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "GPSODOM,Null Island not allowed, epochData", &v121, 2);
        v41 = (uint8_t *)v40;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLGpsOdometryInterface::update(GNSS::PerEpochData &, const GNSS::PerEpochData &, const CLMotionActivity &, const CMWorkoutType &, const BOOL, const GNSS::PerEpochData &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType &, const BOOL, const std::optional<CLPedometerPathStraightness> &)", "%s\n", v40);
        if (v41 != buf)
          free(v41);
      }
    }
    return 0;
  }
  v115 = _Q2;
  v30 = *(_QWORD *)(a1 + 16) != 0;
  v31 = *(double *)(a7 + 96);
  if (v31 <= 0.0
    || (*(_QWORD *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (v32 = *(double *)(a7 + 104), v32 <= 0.0)
    || v31 > 100.0
    || (*(_QWORD *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    v30 = 0;
  }
  if (sub_10011CE64(*(double *)(a7 + 56), *(double *)(a7 + 64)))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021A97D8);
    v33 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "GPSODOM,Null Island not allowed, ravenPos", buf, 2u);
    }
    v30 = 0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021A97D8);
      LOWORD(v121) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "GPSODOM,Null Island not allowed, ravenPos", &v121, 2);
      v100 = (uint8_t *)v99;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLGpsOdometryInterface::update(GNSS::PerEpochData &, const GNSS::PerEpochData &, const CLMotionActivity &, const CMWorkoutType &, const BOOL, const GNSS::PerEpochData &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType &, const BOOL, const std::optional<CLPedometerPathStraightness> &)", "%s\n", v99);
      if (v100 != buf)
        free(v100);
LABEL_143:
      v30 = 0;
    }
  }
  v120 = -1.0;
  v34 = (double *)(a2 + 16);
  if (sub_10121AAE8(a1, &v120, *(double *)(a2 + 16)))
  {
    if (a9)
    {
      v35 = v120;
      if (*(_QWORD *)(a1 + 24) && v120 > 600.0)
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021A97D8);
        v36 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134349056;
          v124 = v35;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "#Warning GPSODOM,rhythmic mode exceeded max interval,%{public}lf", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021A97D8);
          v121 = 134349056;
          v122 = v35;
          LODWORD(v113) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning GPSODOM,rhythmic mode exceeded max interval,%{public}lf", &v121, v113);
          v102 = (uint8_t *)v101;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLGpsOdometryInterface::update(GNSS::PerEpochData &, const GNSS::PerEpochData &, const CLMotionActivity &, const CMWorkoutType &, const BOOL, const GNSS::PerEpochData &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType &, const BOOL, const std::optional<CLPedometerPathStraightness> &)", "%s\n", v101);
          if (v102 != buf)
            free(v102);
        }
        sub_10121ACE0(*(_QWORD **)(a1 + 24));
      }
LABEL_52:
      if (*(_BYTE *)(a3 + 48))
        sub_101219BB4(a3, (uint64_t)v119);
      if (a6 && *(_QWORD *)(a1 + 16))
      {
        sub_101219BB4(a7, (uint64_t)&v121);
        v34 = (double *)(a7 + 16);
      }
      else
      {
        sub_101219BB4(a2, (uint64_t)&v121);
      }
      v50 = *v34;
      v51 = *(double *)(a3 + 16);
      v52 = (_OWORD *)(a1 + 320);
      v53 = *(_OWORD *)(a2 + 112);
      v55 = *(_OWORD *)(a2 + 64);
      v54 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 432) = v53;
      *(_OWORD *)(a1 + 384) = v55;
      *(_OWORD *)(a1 + 400) = v54;
      v56 = *(_OWORD *)(a2 + 176);
      v58 = *(_OWORD *)(a2 + 128);
      v57 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 496) = v56;
      *(_OWORD *)(a1 + 448) = v58;
      *(_OWORD *)(a1 + 464) = v57;
      v60 = *(_OWORD *)(a2 + 208);
      v59 = *(_OWORD *)(a2 + 224);
      v61 = *(_OWORD *)(a2 + 192);
      *(_QWORD *)(a1 + 560) = *(_QWORD *)(a2 + 240);
      *(_OWORD *)(a1 + 528) = v60;
      *(_OWORD *)(a1 + 544) = v59;
      *(_OWORD *)(a1 + 512) = v61;
      v62 = *(_OWORD *)a2;
      v63 = *(_OWORD *)(a2 + 16);
      v64 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 368) = v64;
      *(_OWORD *)(a1 + 320) = v62;
      *(_OWORD *)(a1 + 336) = v63;
      if (a1 + 320 != a2)
      {
        *(_DWORD *)(a1 + 600) = *(_DWORD *)(a2 + 280);
        sub_100858F3C((_QWORD *)(a1 + 568), *(uint64_t **)(a2 + 264), 0);
      }
      v65 = vabdd_f64(v50, v51);
      *(_OWORD *)(a1 + 608) = *(_OWORD *)(a2 + 288);
      v66 = *(_QWORD *)(a1 + 32);
      if (v66 && (a9 & 1) == 0)
      {
        if (sub_1010DBD98(v66, (double *)&v121))
        {
          *(double *)(a2 + 224) = sub_1010DBCB4(*(_QWORD *)(a1 + 32));
          v67 = sub_1010DBCC4(*(_QWORD *)(a1 + 32));
          *(double *)(a2 + 232) = v67;
          if (v67 < 0.0 || !*(_BYTE *)(a3 + 48))
          {
LABEL_67:
            if (v67 >= 0.0 && !sub_10121AD20(v35, v67))
            {
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_1021A97D8);
              v68 = qword_1022A0078;
              if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "#Warning GPSODOM,maximium speed exceeded resetting smoother", buf, 2u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0070 != -1)
                  dispatch_once(&qword_1022A0070, &stru_1021A97D8);
                v118[0] = 0;
                LODWORD(v113) = 2;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning GPSODOM,maximium speed exceeded resetting smoother", v118, v113);
                v106 = (uint8_t *)v105;
                sub_100512490("Generic", 1, 0, 2, "BOOL CLGpsOdometryInterface::update(GNSS::PerEpochData &, const GNSS::PerEpochData &, const CLMotionActivity &, const CMWorkoutType &, const BOOL, const GNSS::PerEpochData &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType &, const BOOL, const std::optional<CLPedometerPathStraightness> &)", "%s\n", v105);
                if (v106 != buf)
                  free(v106);
              }
              sub_1010DBA3C(*(_QWORD *)(a1 + 32));
LABEL_88:
              v30 = 0;
LABEL_89:
              *(_OWORD *)(a2 + 224) = v115;
              *(_QWORD *)(a2 + 240) = 0xBFF0000000000000;
              return v30;
            }
            goto LABEL_131;
          }
          *(double *)(a2 + 240) = sub_100FF6DD8(v119, (double *)&v121, v65);
        }
        v67 = *(double *)(a2 + 232);
        goto LABEL_67;
      }
      v69 = *(unsigned int **)(a1 + 8);
      if (v69 && (a9 & 1) == 0)
      {
        sub_1012552B8(v69, *(double *)(a2 + 56), *(double *)(a2 + 64), *(double *)(a2 + 72), *(double *)(a2 + 96), *(double *)(a2 + 104), *(double *)(a2 + 16));
        *(double *)(a2 + 224) = sub_10108E614(*(_QWORD *)(a1 + 8));
        v70 = sub_10020376C(*(_QWORD *)(a1 + 8));
        *(double *)(a2 + 232) = v70;
        if (v70 >= 0.0 && *(_BYTE *)(a3 + 48))
        {
          *(double *)(a2 + 240) = sub_100FF6DD8(v119, (double *)&v121, v65);
          v70 = *(double *)(a2 + 232);
        }
        if (v70 >= 0.0 && !sub_10121AD20(v35, v70))
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021A97D8);
          v71 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEFAULT, "#Warning,GPSODOM,maximium speed exceeded resetting subsampler", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021A97D8);
            v118[0] = 0;
            LODWORD(v113) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,GPSODOM,maximium speed exceeded resetting subsampler", v118, v113);
            v108 = (uint8_t *)v107;
            sub_100512490("Generic", 1, 0, 2, "BOOL CLGpsOdometryInterface::update(GNSS::PerEpochData &, const GNSS::PerEpochData &, const CLMotionActivity &, const CMWorkoutType &, const BOOL, const GNSS::PerEpochData &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType &, const BOOL, const std::optional<CLPedometerPathStraightness> &)", "%s\n", v107);
            if (v108 != buf)
              free(v108);
          }
          sub_101255E6C(*(_QWORD *)(a1 + 8));
          goto LABEL_88;
        }
LABEL_131:
        *(_BYTE *)(a2 + 216) = *(double *)(a2 + 240) > 0.0;
        return v30;
      }
      v72 = *(unsigned int **)(a1 + 16);
      if (v72 && (a9 & 1) == 0)
      {
        if ((a6 & 1) != 0)
        {
          sub_10108D0BC(v72, 2, *(double *)(a7 + 56), *(double *)(a7 + 64), *(double *)(a7 + 72), *(double *)(a7 + 96), *(double *)(a7 + 104), *(double *)(a7 + 152), *(double *)(a7 + 160), *(double *)(a7 + 176), v44, v45, v46, v47, v48, v49, *(double *)(a7 + 184), *(_QWORD *)(a7 + 16));
          v73 = *(_OWORD *)a7;
          v74 = *(_OWORD *)(a7 + 16);
          v75 = *(_OWORD *)(a7 + 48);
          *(_OWORD *)(a1 + 352) = *(_OWORD *)(a7 + 32);
          *(_OWORD *)(a1 + 368) = v75;
          *v52 = v73;
          *(_OWORD *)(a1 + 336) = v74;
          v76 = *(_OWORD *)(a7 + 64);
          v77 = *(_OWORD *)(a7 + 80);
          v78 = *(_OWORD *)(a7 + 112);
          *(_OWORD *)(a1 + 416) = *(_OWORD *)(a7 + 96);
          *(_OWORD *)(a1 + 432) = v78;
          *(_OWORD *)(a1 + 384) = v76;
          *(_OWORD *)(a1 + 400) = v77;
          v79 = *(_OWORD *)(a7 + 128);
          v80 = *(_OWORD *)(a7 + 144);
          v81 = *(_OWORD *)(a7 + 176);
          *(_OWORD *)(a1 + 480) = *(_OWORD *)(a7 + 160);
          *(_OWORD *)(a1 + 496) = v81;
          *(_OWORD *)(a1 + 448) = v79;
          *(_OWORD *)(a1 + 464) = v80;
          v82 = *(_OWORD *)(a7 + 192);
          v83 = *(_OWORD *)(a7 + 208);
          v84 = *(_OWORD *)(a7 + 224);
          *(_QWORD *)(a1 + 560) = *(_QWORD *)(a7 + 240);
          *(_OWORD *)(a1 + 528) = v83;
          *(_OWORD *)(a1 + 544) = v84;
          *(_OWORD *)(a1 + 512) = v82;
          if (v52 != (_OWORD *)a7)
          {
            *(_DWORD *)(a1 + 600) = *(_DWORD *)(a7 + 280);
            sub_100858F3C((_QWORD *)(a1 + 568), *(uint64_t **)(a7 + 264), 0);
          }
          *(_OWORD *)(a1 + 608) = *(_OWORD *)(a7 + 288);
        }
        else
        {
          sub_10108D0BC(v72, 1, *(double *)(a2 + 56), *(double *)(a2 + 64), *(double *)(a2 + 72), *(double *)(a2 + 96), *(double *)(a2 + 104), *(double *)(a2 + 152), *(double *)(a2 + 160), *(double *)(a2 + 176), v44, v45, v46, v47, v48, v49, *(double *)(a2 + 184), *(_QWORD *)(a2 + 16));
        }
        *(double *)(a2 + 224) = sub_10108E614(*(_QWORD *)(a1 + 16));
        v93 = sub_10020376C(*(_QWORD *)(a1 + 16));
        *(double *)(a2 + 232) = v93;
        if (v93 >= 0.0 && *(_BYTE *)(a3 + 48))
        {
          *(double *)(a2 + 240) = sub_100FF6DD8(v119, (double *)&v121, v65);
          v93 = *(double *)(a2 + 232);
        }
        if (v93 >= 0.0 && !sub_10121AD20(v35, v93))
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021A97D8);
          v94 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_DEFAULT, "#Warning,GPSODOM,maximium speed exceeded resetting modified subsampler", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021A97D8);
            v118[0] = 0;
            LODWORD(v114) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,GPSODOM,maximium speed exceeded resetting modified subsampler", v118, v114);
            v110 = (uint8_t *)v109;
            sub_100512490("Generic", 1, 0, 2, "BOOL CLGpsOdometryInterface::update(GNSS::PerEpochData &, const GNSS::PerEpochData &, const CLMotionActivity &, const CMWorkoutType &, const BOOL, const GNSS::PerEpochData &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType &, const BOOL, const std::optional<CLPedometerPathStraightness> &)", "%s\n", v109);
            if (v110 != buf)
              free(v110);
          }
          sub_10108DE68(*(_QWORD *)(a1 + 16));
          goto LABEL_89;
        }
        goto LABEL_131;
      }
      v86 = *(_QWORD **)(a1 + 24);
      if (!v86 || !a9)
        goto LABEL_131;
      v87 = *(_OWORD *)(a10 + 16);
      v116[0] = *(_OWORD *)a10;
      v116[1] = v87;
      v117 = *(_QWORD *)(a10 + 32);
      sub_1017C3280(v86, a2, (uint64_t)v116);
      v88 = *(_QWORD **)(a1 + 24);
      *(_QWORD *)(a2 + 224) = v88[2];
      v89 = (double *)v88[4];
      if (v89 && (v90 = *v89, *v89 >= 0.0))
      {
        *(double *)(a2 + 232) = v90;
        v92 = v90;
      }
      else
      {
        v91 = (double *)v88[3];
        if (v91)
          v92 = *v91;
        else
          v92 = 0.0;
        *(double *)(a2 + 232) = v92;
        if (!v89)
          goto LABEL_124;
        v90 = *v89;
      }
      if (v90 >= 0.0)
        goto LABEL_126;
      v91 = (double *)v88[3];
LABEL_124:
      if (!v91)
      {
        v96 = -1.0;
        goto LABEL_128;
      }
      v89 = v91;
LABEL_126:
      v96 = v89[1];
LABEL_128:
      *(double *)(a2 + 240) = v96;
      if (v92 >= 0.0 && (*(_QWORD *)&v92 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && !sub_10121AD20(v35, v92))
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021A97D8);
        v98 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v98, OS_LOG_TYPE_DEFAULT, "#Warning,GPSODOM,maximum speed exceeded resetting Rhythmic odometer", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021A97D8);
          v118[0] = 0;
          LODWORD(v113) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,GPSODOM,maximum speed exceeded resetting Rhythmic odometer", v118, v113);
          v112 = (uint8_t *)v111;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLGpsOdometryInterface::update(GNSS::PerEpochData &, const GNSS::PerEpochData &, const CLMotionActivity &, const CMWorkoutType &, const BOOL, const GNSS::PerEpochData &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType &, const BOOL, const std::optional<CLPedometerPathStraightness> &)", "%s\n", v111);
          if (v112 != buf)
            free(v112);
        }
        sub_10121ACE0(*(_QWORD **)(a1 + 24));
        goto LABEL_89;
      }
      goto LABEL_131;
    }
    v35 = v120;
    if (v120 <= 180.0)
      goto LABEL_52;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021A97D8);
    v42 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349056;
      v124 = v35;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "#Warning GPSODOM,exceeded max interval,%{public}.3lf", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021A97D8);
      v121 = 134349056;
      v122 = v35;
      LODWORD(v113) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning GPSODOM,exceeded max interval,%{public}.3lf", &v121, v113);
      v104 = (uint8_t *)v103;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGpsOdometryInterface::update(GNSS::PerEpochData &, const GNSS::PerEpochData &, const CLMotionActivity &, const CMWorkoutType &, const BOOL, const GNSS::PerEpochData &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType &, const BOOL, const std::optional<CLPedometerPathStraightness> &)", "%s\n", v103);
      if (v104 != buf)
        free(v104);
    }
    v43 = *(_QWORD *)(a1 + 8);
    if (v43)
    {
      sub_101255E6C(v43);
    }
    else
    {
      v85 = *(_QWORD *)(a1 + 32);
      if (v85)
      {
        sub_1010DBA3C(v85);
      }
      else
      {
        v95 = *(_QWORD *)(a1 + 16);
        if (v95)
          sub_10108DE68(v95);
      }
    }
  }
  return v30;
}

void sub_10121BF8C()
{
  operator new();
}

void sub_10121BFE8()
{
  operator delete();
}

void sub_10121C00C()
{
  operator new();
}

void sub_10121C0A4()
{
  uint64_t v0;
  _QWORD *v1;

  sub_1006CEFD4(v1);
  *(_QWORD *)v0 = off_102155C20;
  if (*(char *)(v0 + 31) < 0)
    operator delete(*(void **)(v0 + 8));
  operator delete();
}

void sub_10121C0F8()
{
  operator new();
}

void sub_10121C154()
{
  operator delete();
}

uint64_t sub_10121C178(uint64_t result)
{
  if (!*(_QWORD *)(result + 24))
    operator new();
  return result;
}

void sub_10121C1E4()
{
  operator delete();
}

void sub_10121C208(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned __int8 a9)
{
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  double *v16;
  double v17;
  int v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  double *v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  double *v27;
  uint64_t v28;
  _BOOL4 v29;
  uint64_t v30;
  _BOOL4 v31;
  double v32;
  _QWORD *v33;
  NSObject *v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *p_shared_owners;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  const char *v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  uint8_t *v69;
  double v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  const char *v80;
  uint8_t *v81;
  uint64_t v82;
  _BYTE v83[40];
  int v84;
  double v85;
  __int16 v86;
  _BYTE v87[10];
  _BYTE v88[10];
  _BYTE v89[10];
  _BYTE v90[10];
  _BYTE v91[10];
  uint64_t v92;
  __int16 v93;
  uint64_t v94;
  __int16 v95;
  uint64_t v96;
  __int16 v97;
  uint64_t v98;
  uint8_t buf[4];
  double v100;
  __int16 v101;
  _BYTE v102[10];
  _BYTE v103[10];
  _BYTE v104[10];
  _BYTE v105[10];
  _BYTE v106[10];
  uint64_t v107;
  __int16 v108;
  uint64_t v109;
  __int16 v110;
  uint64_t v111;
  __int16 v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  std::__shared_weak_count *v115;
  void *__p;
  char v117;
  std::__shared_weak_count *v118;
  id v119;

  v12 = a5 & ~a3;
  v13 = a8 & a4 & a9 ^ 1;
  v14 = v13 | a2;
  if (v12 == 1 && v14)
  {
    v15 = *(_QWORD *)(a1 + 24);
    if (v15)
    {
      sub_1017C3440(v15);
      v16 = *(double **)(a1 + 24);
      v17 = v16[2];
      sub_10121ACE0(v16);
    }
    else
    {
      v17 = 0.0;
    }
    v21 = *(_QWORD *)(a1 + 8);
    if (!v21)
    {
      v23 = *(_QWORD *)(a1 + 32);
      if (v23)
      {
        v22 = (double *)(v23 + 1952);
        goto LABEL_14;
      }
      v21 = *(_QWORD *)(a1 + 16);
      if (!v21)
        goto LABEL_15;
    }
    v22 = (double *)(v21 + 16);
LABEL_14:
    *v22 = v17;
LABEL_15:
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021A97D8);
    v24 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349056;
      v100 = v17;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "GPSODOM,switching from Rhythmic to normal GNSS odometer,greatestDistance,%{public}.2lf", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021A97D8);
      v84 = 134349056;
      v85 = v17;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "GPSODOM,switching from Rhythmic to normal GNSS odometer,greatestDistance,%{public}.2lf", &v84, 12);
      v63 = (uint8_t *)v62;
      sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryInterface::handleGNSSOperatingState(const BOOL, const BOOL, const BOOL, const BOOL, const BOOL, const BOOL, const BOOL, const BOOL)", "%s\n", v62);
      if (v63 != buf)
        free(v63);
    }
    v18 = 0;
    goto LABEL_53;
  }
  v18 = 0;
  if (((v12 | v13) & 1) == 0 && (a2 & 1) == 0)
  {
    v19 = *(_QWORD *)(a1 + 8);
    if (v19)
    {
      v20 = sub_10108E614(v19);
      sub_101255E6C(*(_QWORD *)(a1 + 8));
    }
    else
    {
      v25 = *(_QWORD *)(a1 + 32);
      if (v25)
      {
        v20 = sub_1010DBCB4(v25);
        sub_1010DBA3C(*(_QWORD *)(a1 + 32));
      }
      else
      {
        v26 = *(_QWORD *)(a1 + 16);
        if (v26)
        {
          v20 = sub_10108E614(v26);
          sub_10108DE68(*(_QWORD *)(a1 + 16));
        }
        else
        {
          v20 = 0.0;
        }
      }
    }
    v27 = *(double **)(a1 + 24);
    if (v27
      && ((v27[2] = v20, (v28 = *((_QWORD *)v27 + 3)) == 0) ? (v29 = 1) : (v29 = *(double *)(v28 + 144) > 0.0),
          (v30 = *((_QWORD *)v27 + 4)) == 0 ? (v31 = 1) : (v31 = *(double *)(v30 + 144) > 0.0),
          (!v29 || !v31)
       && (v32 = *(double *)(a1 + 336), v32 > 0.0)
       && vabdd_f64(v32, CFAbsoluteTimeGetCurrent()) <= 3.0
       && !sub_10011CE64(*(double *)(a1 + 376), *(double *)(a1 + 384))
       && sub_10011CE88(*(double *)(a1 + 376), *(double *)(a1 + 384))
       && sub_10011E234(*(double *)(a1 + 392))))
    {
      v33 = *(_QWORD **)(a1 + 24);
      v83[0] = 0;
      v83[32] = 0;
      sub_1017C3280(v33, a1 + 320, (uint64_t)v83);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021A97D8);
      v34 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v35 = *(double *)(a1 + 336);
        v36 = *(_QWORD *)(a1 + 376);
        v37 = *(_QWORD *)(a1 + 384);
        v38 = *(_QWORD *)(a1 + 392);
        v39 = *(_QWORD *)(a1 + 496);
        v40 = *(_QWORD *)(a1 + 504);
        v41 = *(_QWORD *)(a1 + 472);
        v42 = *(_QWORD *)(a1 + 480);
        v43 = *(_QWORD *)(a1 + 416);
        v44 = *(_QWORD *)(a1 + 424);
        *(_DWORD *)buf = 134351361;
        v100 = v35;
        v101 = 2049;
        *(_QWORD *)v102 = v36;
        *(_WORD *)&v102[8] = 2049;
        *(_QWORD *)v103 = v37;
        *(_WORD *)&v103[8] = 2050;
        *(_QWORD *)v104 = v39;
        *(_WORD *)&v104[8] = 2050;
        *(_QWORD *)v105 = v38;
        *(_WORD *)&v105[8] = 2050;
        *(_QWORD *)v106 = v41;
        *(_WORD *)&v106[8] = 2050;
        v107 = v43;
        v108 = 2050;
        v109 = v40;
        v110 = 2050;
        v111 = v42;
        v112 = 2050;
        v113 = v44;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "GPSODOM-MM,%{public}.1lf,location sent to RhythmicOdometer for initializing when switching from 1Hz,LL,%{private}.7lf,%{private}.7lf,course,%{public}.2lf,altitude,%{public}.2lf,speed,%{public}.2lf,hunc,%{public}.2lf,courseUnc,%{public}.2lf,speedUnc,%{public}.2lf,altUnc,%{public}.2lf", buf, 0x66u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021A97D8);
        v70 = *(double *)(a1 + 336);
        v71 = *(_QWORD *)(a1 + 376);
        v72 = *(_QWORD *)(a1 + 384);
        v73 = *(_QWORD *)(a1 + 392);
        v74 = *(_QWORD *)(a1 + 496);
        v75 = *(_QWORD *)(a1 + 504);
        v76 = *(_QWORD *)(a1 + 472);
        v77 = *(_QWORD *)(a1 + 480);
        v78 = *(_QWORD *)(a1 + 416);
        v79 = *(_QWORD *)(a1 + 424);
        v84 = 134351361;
        v85 = v70;
        v86 = 2049;
        *(_QWORD *)v87 = v71;
        *(_WORD *)&v87[8] = 2049;
        *(_QWORD *)v88 = v72;
        *(_WORD *)&v88[8] = 2050;
        *(_QWORD *)v89 = v74;
        *(_WORD *)&v89[8] = 2050;
        *(_QWORD *)v90 = v73;
        *(_WORD *)&v90[8] = 2050;
        *(_QWORD *)v91 = v76;
        *(_WORD *)&v91[8] = 2050;
        v92 = v78;
        v93 = 2050;
        v94 = v75;
        v95 = 2050;
        v96 = v77;
        v97 = 2050;
        v98 = v79;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "GPSODOM-MM,%{public}.1lf,location sent to RhythmicOdometer for initializing when switching from 1Hz,LL,%{private}.7lf,%{private}.7lf,course,%{public}.2lf,altitude,%{public}.2lf,speed,%{public}.2lf,hunc,%{public}.2lf,courseUnc,%{public}.2lf,speedUnc,%{public}.2lf,altUnc,%{public}.2lf", &v84, 102);
        v81 = (uint8_t *)v80;
        sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryInterface::handleGNSSOperatingState(const BOOL, const BOOL, const BOOL, const BOOL, const BOOL, const BOOL, const BOOL, const BOOL)", "%s\n", v80);
        if (v81 != buf)
          free(v81);
      }
      v18 = 1;
    }
    else
    {
      v18 = 0;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021A97D8);
    v45 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v46 = *(_QWORD *)(a1 + 336);
      v47 = *(_QWORD *)(a1 + 376);
      v48 = *(_QWORD *)(a1 + 384);
      v49 = *(_QWORD *)(a1 + 392);
      *(_DWORD *)buf = 134350593;
      v100 = v20;
      v101 = 1026;
      *(_DWORD *)v102 = a6;
      *(_WORD *)&v102[4] = 1026;
      *(_DWORD *)&v102[6] = v18;
      *(_WORD *)v103 = 2050;
      *(_QWORD *)&v103[2] = v46;
      *(_WORD *)v104 = 2049;
      *(_QWORD *)&v104[2] = v47;
      *(_WORD *)v105 = 2049;
      *(_QWORD *)&v105[2] = v48;
      *(_WORD *)v106 = 2050;
      *(_QWORD *)&v106[2] = v49;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "GPSODOM,switching from normal to Rhythmic GNSS odometer,greatestDistance,%{public}.2lf,isRhythmicFixQualified,%{public}d,forceUpdateRhythmic,%{public}d,lastLocationTime,%{public}.1lf,LL,%{private}.7lf,%{private}.7lf,altitude,%{public}.2lf", buf, 0x40u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021A97D8);
      v64 = *(_QWORD *)(a1 + 336);
      v65 = *(_QWORD *)(a1 + 376);
      v66 = *(_QWORD *)(a1 + 384);
      v67 = *(_QWORD *)(a1 + 392);
      v84 = 134350593;
      v85 = v20;
      v86 = 1026;
      *(_DWORD *)v87 = a6;
      *(_WORD *)&v87[4] = 1026;
      *(_DWORD *)&v87[6] = v18;
      *(_WORD *)v88 = 2050;
      *(_QWORD *)&v88[2] = v64;
      *(_WORD *)v89 = 2049;
      *(_QWORD *)&v89[2] = v65;
      *(_WORD *)v90 = 2049;
      *(_QWORD *)&v90[2] = v66;
      *(_WORD *)v91 = 2050;
      *(_QWORD *)&v91[2] = v67;
      LODWORD(v82) = 64;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "GPSODOM,switching from normal to Rhythmic GNSS odometer,greatestDistance,%{public}.2lf,isRhythmicFixQualified,%{public}d,forceUpdateRhythmic,%{public}d,lastLocationTime,%{public}.1lf,LL,%{private}.7lf,%{private}.7lf,altitude,%{public}.2lf", &v84, v82);
      v69 = (uint8_t *)v68;
      sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometryInterface::handleGNSSOperatingState(const BOOL, const BOOL, const BOOL, const BOOL, const BOOL, const BOOL, const BOOL, const BOOL)", "%s\n", v68);
      if (v69 != buf)
        free(v69);
    }
  }
LABEL_53:
  if ((v14 & 1) != 0)
    v50 = 0;
  else
    v50 = a6 & ~a7;
  if ((v18 | v50) == 1)
  {
    v51 = *(_QWORD *)(a1 + 24);
    if (v51)
    {
      sub_1017C3440(v51);
      if (*(_QWORD *)(a1 + 304))
      {
        sub_100129CA0((uint64_t)buf);
        if (sub_10121CAA4(*(_QWORD *)(a1 + 24), (uint64_t)buf))
        {
          v52 = *(_QWORD *)(a1 + 304);
          if (!v52)
            sub_10025FD1C();
          (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v52 + 48))(v52, buf);
        }

        v53 = v118;
        if (v118)
        {
          p_shared_owners = (unint64_t *)&v118->__shared_owners_;
          do
            v55 = __ldaxr(p_shared_owners);
          while (__stlxr(v55 - 1, p_shared_owners));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
            std::__shared_weak_count::__release_weak(v53);
          }
        }
        if (v117 < 0)
          operator delete(__p);
        v56 = v115;
        if (v115)
        {
          v57 = (unint64_t *)&v115->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
        v59 = v114;
        if (v114)
        {
          v60 = (unint64_t *)&v114->__shared_owners_;
          do
            v61 = __ldaxr(v60);
          while (__stlxr(v61 - 1, v60));
          if (!v61)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
        }
      }
    }
  }
}

void sub_10121CA78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (a2)
    sub_10024F88C(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10121CAA4(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;

  v4 = *(_QWORD **)(a1 + 32);
  if (v4 && sub_1017B5FE8(v4, a2))
    return 1;
  result = *(_QWORD *)(a1 + 24);
  if (result)
    return sub_1017B5FE8((_QWORD *)result, a2);
  return result;
}

uint64_t sub_10121CAF8(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return sub_10121CAA4(result, a2);
  return result;
}

void sub_10121CB08(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a1 + 192;
  sub_100B25F60(a1 + 192, a2);
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
    sub_10121CB4C(v4, a1 + 240, v3);
}

void sub_10121CB4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
    sub_10121CBBC(v5, a2);
  v6 = *(_QWORD *)(a1 + 24);
  if (v6)
    sub_10121CC00(v6, a3);
}

void sub_10121CB90(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_10121CBBC(uint64_t a1, uint64_t a2)
{
  uint64_t **v4;

  v4 = (uint64_t **)(a1 + 568);
  if (v4 != (uint64_t **)a2)
    sub_10121CC58(v4, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  *(_OWORD *)(a1 + 592) = *(_OWORD *)(a2 + 24);
  sub_1017B8A18(a1);
}

void sub_10121CC00(uint64_t a1, uint64_t a2)
{
  char *v3;

  v3 = (char *)(a1 + 352);
  if (v3 != (char *)a2)
  {
    sub_10034F2B0(v3, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
    sub_10034F2B0((char *)(a1 + 376), *(char **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  }
  sub_1017B516C(a1);
}

uint64_t **sub_10121CC58(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _QWORD *v13;
  BOOL v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t **v17;
  uint64_t *v18;
  uint64_t *v19;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v17 = result;
    v18 = v8;
    v19 = v8;
    if (v8)
    {
      v18 = sub_10036C1BC((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          *((_DWORD *)v8 + 8) = *((_DWORD *)v9 + 8);
          v10 = *(_OWORD *)(v9 + 5);
          v11 = *(_OWORD *)(v9 + 7);
          v12 = *(_OWORD *)(v9 + 9);
          v8[11] = v9[11];
          *(_OWORD *)(v8 + 9) = v12;
          *(_OWORD *)(v8 + 7) = v11;
          *(_OWORD *)(v8 + 5) = v10;
          sub_10121CDD8(v5, (uint64_t)v8);
          v8 = v18;
          v19 = v18;
          if (v18)
            v18 = sub_10036C1BC((uint64_t)v18);
          v13 = (_QWORD *)v9[1];
          if (v13)
          {
            do
            {
              a2 = v13;
              v13 = (_QWORD *)*v13;
            }
            while (v13);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v14 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v14);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)sub_10036C210((uint64_t)&v17);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)sub_10121CE44(v5, (_OWORD *)a2 + 2);
      v15 = (_QWORD *)a2[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)a2[2];
          v14 = *v16 == (_QWORD)a2;
          a2 = v16;
        }
        while (!v14);
      }
      a2 = v16;
    }
    while (v16 != a3);
  }
  return result;
}

void sub_10121CDC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10036C210((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10121CDD8(uint64_t **a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;

  v3 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        v3 = (uint64_t **)v4;
        if (*(_DWORD *)(a2 + 32) >= *((_DWORD *)v4 + 8))
          break;
        v4 = (uint64_t *)*v4;
        v5 = v3;
        if (!*v3)
          goto LABEL_8;
      }
      v4 = (uint64_t *)v4[1];
    }
    while (v4);
    v5 = v3 + 1;
  }
  else
  {
    v5 = a1 + 1;
  }
LABEL_8:
  sub_1000145B0(a1, (uint64_t)v3, v5, (uint64_t *)a2);
  return a2;
}

_OWORD *sub_10121CE44(uint64_t **a1, _OWORD *a2)
{
  _OWORD *v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t **v10;

  v4 = operator new(0x60uLL);
  v5 = v4;
  v6 = a2[1];
  v4[2] = *a2;
  v4[3] = v6;
  v7 = a2[3];
  v4[4] = a2[2];
  v4[5] = v7;
  v8 = a1 + 1;
  v9 = a1[1];
  if (v9)
  {
    do
    {
      while (1)
      {
        v8 = (uint64_t **)v9;
        if (*((_DWORD *)v4 + 8) >= *((_DWORD *)v9 + 8))
          break;
        v9 = (uint64_t *)*v9;
        v10 = v8;
        if (!*v8)
          goto LABEL_8;
      }
      v9 = (uint64_t *)v9[1];
    }
    while (v9);
    v10 = v8 + 1;
  }
  else
  {
    v10 = a1 + 1;
  }
LABEL_8:
  sub_1000145B0(a1, (uint64_t)v8, v10, (uint64_t *)v4);
  return v5;
}

BOOL sub_10121CEE0(uint64_t a1, double *a2, uint64_t a3, double *a4, double *a5, double *a6)
{
  _QWORD *v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v17;
  double v18;
  _QWORD v19[4];
  uint64_t v20;
  uint64_t v21;

  v10 = (_QWORD *)(a3 + 8);
  sub_10012D660((uint64_t)v19, (_QWORD *)(a3 + 8));
  v11 = v21;
  sub_1004A4854(v19);
  if (!v11)
    return 0;
  sub_10012D660((uint64_t)v19, v10);
  v12 = *(double *)(*(_QWORD *)(v19[1] + (((unint64_t)(v21 + v20 - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                  + 16 * (v21 + v20 - 1)
                  + 8);
  sub_1004A4854(v19);
  v13 = *a4;
  if (v13 > *((double *)sub_10012A448() + 11))
    return 0;
  v14 = *a5;
  if (v14 < *((double *)sub_10012A448() + 10))
    return 0;
  v15 = vabdd_f64(*a2, v12);
  if (v15 > *((double *)sub_10012A448() + 14))
    return 0;
  v17 = *a5 - *a6;
  if (v17 <= *((double *)sub_10012A448() + 17))
    return 1;
  v18 = *a6;
  return v18 >= *((double *)sub_10012A448() + 18);
}

BOOL sub_10121D000(uint64_t a1, double *a2, _QWORD *a3, double *a4, double *a5, _BYTE *a6)
{
  double v12;
  double v13;
  uint64_t v14;
  NSObject *v15;
  const char *v16;
  NSObject *v17;
  _BOOL8 result;
  char *v19;
  NSObject *v20;
  double v21;
  double v22;
  NSObject *v23;
  double v24;
  double v25;
  NSObject *v26;
  uint8_t *v27;
  double *v28;
  double v29;
  double v30;
  __int128 v31;
  uint8_t buf[4];
  double v33;

  if (!*(_BYTE *)(a1 + 120))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A97F8);
    v17 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, kalmanFilter, did not propagate and update, not initialized", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A97F8);
      LOWORD(v31) = 0;
      v19 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiCalc, zaxis, kalmanFilter, did not propagate and update, not initialized", &v31, 2);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiAltitudeKalmanFilter::propagateAndUpdate(const CFAbsoluteTime &, const CL::Wifi1::Types::ElevationHistory *, const double &, const double &, const BOOL &)", "%s\n", v19);
      if (v19 != (char *)buf)
        free(v19);
      return 0;
    }
    return result;
  }
  v12 = *a2 - *(double *)(a1 + 64);
  if (v12 >= *((double *)sub_10012A448() + 12))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A97F8);
    v20 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      v21 = *a2 - *(double *)(a1 + 64);
      *(_DWORD *)buf = 134283521;
      v33 = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, kalmanFilter, stopping, did not propagate for, %{private}0.3f, seconds", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_55;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A97F8);
    v22 = *a2 - *(double *)(a1 + 64);
    LODWORD(v31) = 134283521;
    *(double *)((char *)&v31 + 4) = v22;
    v16 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiCalc, zaxis, kalmanFilter, stopping, did not propagate for, %{private}0.3f, seconds", &v31, 12, v31);
LABEL_48:
    v27 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiAltitudeKalmanFilter::propagateAndUpdate(const CFAbsoluteTime &, const CL::Wifi1::Types::ElevationHistory *, const double &, const double &, const BOOL &)", "%s\n", v16);
    if (v27 != buf)
      free(v27);
    goto LABEL_55;
  }
  v13 = *a2 - *(double *)(a1 + 72);
  if (v13 >= *((double *)sub_10012A448() + 13))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A97F8);
    v23 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      v24 = *a2 - *(double *)(a1 + 72);
      *(_DWORD *)buf = 134283521;
      v33 = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, kalmanFilter, stopping, did not update for, %{private}0.3f, seconds", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_55;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A97F8);
    v25 = *a2 - *(double *)(a1 + 72);
    LODWORD(v31) = 134283521;
    *(double *)((char *)&v31 + 4) = v25;
    v16 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiCalc, zaxis, kalmanFilter, stopping, did not update for, %{private}0.3f, seconds", &v31, 12, v31);
    goto LABEL_48;
  }
  if (!sub_10121D694(a1, a2, a3))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A97F8);
    v26 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, kalmanFilter, stopping, unable to propagate", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_55;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A97F8);
    LOWORD(v31) = 0;
    v16 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiCalc, zaxis, kalmanFilter, stopping, unable to propagate", &v31, 2, v31);
    goto LABEL_48;
  }
  if ((sub_10121DF8C((double *)a1, a4, a5, v14, a6) & 1) != 0)
  {
    if (!sub_10121E014(a1, a4, a5))
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A97F8);
      v15 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, kalmanFilter, stopping, unable to update", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_55;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A97F8);
      LOWORD(v31) = 0;
      v16 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiCalc, zaxis, kalmanFilter, stopping, unable to update", &v31, 2, v31);
      goto LABEL_48;
    }
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)(a1 + 16);
  }
  v28 = (double *)(a1 + 8);
  if (!sub_100020150((double *)a1, (double *)(a1 + 8)))
  {
LABEL_55:
    sub_10012A3E0(a1);
    return 0;
  }
  v29 = *((double *)sub_10012A448() + 28);
  v30 = v29 * *((double *)sub_10012A448() + 28);
  if (v30 >= *v28)
    v30 = *v28;
  *v28 = v30;
  return 1;
}

BOOL sub_10121D694(uint64_t a1, double *a2, _QWORD *a3)
{
  double v5;
  NSObject *v6;
  uint64_t v7;
  double v8;
  _BOOL8 result;
  uint64_t v10;
  double v11;
  char *v12;
  _QWORD *v14;
  uint64_t v15;
  double v16;
  double v17;
  int v18;
  double v19;
  int v20;
  double v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  NSObject *v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  char v34;
  double v35;
  double v36;
  double v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  double v43;
  char *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  __int16 v48;
  double v49;
  uint8_t buf[4];
  _BYTE v51[18];
  uint64_t v52;
  uint64_t v53;

  v5 = *(double *)(a1 + 64);
  *(double *)(a1 + 96) = *a2 - v5;
  if (*a2 < v5)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A97F8);
    v6 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      v7 = *(_QWORD *)(a1 + 64);
      v8 = *a2;
      *(_DWORD *)buf = 134283777;
      *(_QWORD *)v51 = v7;
      *(_WORD *)&v51[8] = 2049;
      *(double *)&v51[10] = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, kalmanFilter, did not propagate, filter's propagation timestamp, %{private}0.3f, is larger than current wifi timestamp, %{private}0.3f", buf, 0x16u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A97F8);
      v10 = *(_QWORD *)(a1 + 64);
      v11 = *a2;
      v46 = 134283777;
      v47 = v10;
      v48 = 2049;
      v49 = v11;
      v12 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiCalc, zaxis, kalmanFilter, did not propagate, filter's propagation timestamp, %{private}0.3f, is larger than current wifi timestamp, %{private}0.3f", &v46, 22);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiAltitudeKalmanFilter::propagate(const CFAbsoluteTime &, const CL::Wifi1::Types::ElevationHistory *)", "%s\n", v12);
LABEL_34:
      if (v12 != (char *)buf)
        free(v12);
      return 0;
    }
    return result;
  }
  *(double *)(a1 + 64) = *a2;
  v14 = a3 + 1;
  sub_10012D660((uint64_t)buf, a3 + 1);
  v15 = v53;
  sub_1004A4854(buf);
  if (!v15)
  {
    v27 = *(double *)(a1 + 8) + *(double *)(a1 + 96) * *(double *)(a1 + 96) * *(double *)(a1 + 48);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)a1;
    *(double *)(a1 + 24) = v27;
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A97F8);
    v28 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      v29 = *(_QWORD *)(a1 + 64);
      *(_DWORD *)buf = 134283521;
      *(_QWORD *)v51 = v29;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, kalmanFilter, propagated, timestamp, %{private}0.3f", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return 1;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A97F8);
    goto LABEL_58;
  }
  sub_10012D660((uint64_t)buf, v14);
  v16 = *(double *)(*(_QWORD *)(*(_QWORD *)&v51[4] + (((unint64_t)(v53 + v52 - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                  + 16 * (v53 + v52 - 1)
                  + 8);
  sub_1004A4854(buf);
  sub_10012D660((uint64_t)buf, v14);
  v17 = *(double *)(*(_QWORD *)(*(_QWORD *)&v51[4] + (((unint64_t)(v53 + v52 - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                  + 16 * (v53 + v52 - 1));
  sub_1004A4854(buf);
  v18 = (*(uint64_t (**)(_QWORD *, double *))(*a3 + 16))(a3, a2);
  v19 = *(double *)(a1 + 80);
  if (v16 >= v19)
  {
    v20 = v18;
    v21 = *(double *)(a1 + 112);
    *(double *)(a1 + 80) = v16;
    *(double *)(a1 + 88) = v16 - v19;
    if (v16 - v19 <= *((double *)sub_10012A448() + 15))
    {
      v25 = v17 - v21;
      v26 = *(double *)(a1 + 88);
      if (v26 != 0.0)
        *(_QWORD *)(a1 + 104) = 0;
    }
    else
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A97F8);
      v22 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
      {
        v23 = *(_QWORD *)(a1 + 88);
        v24 = *(_QWORD *)(a1 + 104);
        *(_DWORD *)buf = 134283777;
        *(_QWORD *)v51 = v23;
        *(_WORD *)&v51[8] = 2049;
        *(_QWORD *)&v51[10] = v24;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, kalmanFilter, baro outage time interval, %{private}0.3f, altitude change over outage, %{private}0.3f", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021A97F8);
        v42 = *(_QWORD *)(a1 + 88);
        v43 = *(double *)(a1 + 104);
        v46 = 134283777;
        v47 = v42;
        v48 = 2049;
        v49 = v43;
        v44 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiCalc, zaxis, kalmanFilter, baro outage time interval, %{private}0.3f, altitude change over outage, %{private}0.3f", &v46, 22);
        sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiAltitudeKalmanFilter::propagate(const CFAbsoluteTime &, const CL::Wifi1::Types::ElevationHistory *)", "%s\n", v44);
        if (v44 != (char *)buf)
          free(v44);
      }
      v25 = v17 - *(double *)(a1 + 112) - *(double *)(a1 + 104);
      *(_QWORD *)(a1 + 104) = 0;
      v26 = *(double *)(a1 + 88);
    }
    *(double *)(a1 + 112) = v17;
    v33 = fabs(v25);
    if (v33 >= 2.5)
      v20 = 0;
    if (v26 == 0.0)
    {
      if (v20)
      {
LABEL_46:
        v35 = *(double *)(a1 + 8);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)a1;
        v36 = *(double *)(a1 + 96) * *(double *)(a1 + 96);
        v37 = *(double *)(a1 + 32);
LABEL_49:
        *(double *)(a1 + 24) = v35 + v36 * v37;
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021A97F8);
        v38 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
        {
          v39 = *(_QWORD *)(a1 + 64);
          *(_DWORD *)buf = 134283521;
          *(_QWORD *)v51 = v39;
          _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, kalmanFilter, propagated, timestamp, %{private}0.3f", buf, 0xCu);
        }
        if (!sub_1001BFF7C(115, 2))
          return 1;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021A97F8);
LABEL_58:
        v40 = *(_QWORD *)(a1 + 64);
        v46 = 134283521;
        v47 = v40;
        LODWORD(v45) = 12;
        v41 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiCalc, zaxis, kalmanFilter, propagated, timestamp, %{private}0.3f", &v46, v45);
        sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiAltitudeKalmanFilter::propagate(const CFAbsoluteTime &, const CL::Wifi1::Types::ElevationHistory *)", "%s\n", v41);
        if (v41 != (char *)buf)
          free(v41);
        return 1;
      }
    }
    else
    {
      if (v33 / v26 > *((double *)sub_10012A448() + 6))
        v34 = 1;
      else
        v34 = v20;
      if ((v34 & 1) != 0)
        goto LABEL_46;
    }
    v35 = *(double *)(a1 + 8);
    *(double *)(a1 + 16) = v25 + *(double *)a1;
    v36 = *(double *)(a1 + 96) * *(double *)(a1 + 96);
    v37 = *(double *)(a1 + 40);
    goto LABEL_49;
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021A97F8);
  v30 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v31 = *(_QWORD *)(a1 + 80);
    *(_DWORD *)buf = 134283777;
    *(_QWORD *)v51 = v31;
    *(_WORD *)&v51[8] = 2049;
    *(double *)&v51[10] = v16;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, kalmanFilter, did not propagate, filter's relative altitude timestamp, %{private}0.3f, is larger than current relative altitude timestamp, %{private}0.3f", buf, 0x16u);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A97F8);
    v32 = *(_QWORD *)(a1 + 80);
    v46 = 134283777;
    v47 = v32;
    v48 = 2049;
    v49 = v16;
    v12 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiCalc, zaxis, kalmanFilter, did not propagate, filter's relative altitude timestamp, %{private}0.3f, is larger than current relative altitude timestamp, %{private}0.3f", &v46, 22);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiAltitudeKalmanFilter::propagate(const CFAbsoluteTime &, const CL::Wifi1::Types::ElevationHistory *)", "%s\n", v12);
    goto LABEL_34;
  }
  return result;
}

uint64_t sub_10121DF8C(double *a1, double *a2, double *a3, uint64_t a4, _BYTE *a5)
{
  _BOOL4 v8;
  double v9;
  double v10;
  _BOOL4 v11;
  _BOOL4 v12;

  v8 = sub_100020150(a2, a3);
  v9 = a1[12];
  if (v9 <= 0.0)
  {
    v11 = 1;
  }
  else
  {
    v10 = vabdd_f64(*a2, *a1) / v9;
    v11 = v10 < *((double *)sub_10012A448() + 16);
  }
  if (*a5)
    v12 = v8;
  else
    v12 = 0;
  return v12 & v11;
}

BOOL sub_10121E014(uint64_t a1, double *a2, double *a3)
{
  uint64_t *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v18;
  char *v19;
  int v20;
  uint64_t v21;
  uint8_t buf[4];
  uint64_t v23;

  v6 = sub_10012A448();
  v7 = *((double *)v6 + 7) * *a3 * (*((double *)v6 + 7) * *a3);
  *(double *)(a1 + 56) = v7;
  v8 = v7 + *(double *)(a1 + 24);
  if (v8 > 0.0)
  {
    v9 = *a2 - *(double *)(a1 + 16);
    v10 = v7 + *(double *)(a1 + 24);
    if (v9 * v9 / v8 > *((double *)sub_10012A448() + 20))
    {
      v11 = 1.0;
      do
      {
        v11 = v11 * *((double *)sub_10012A448() + 21);
        v12 = *(double *)(a1 + 8) + *(double *)(a1 + 96) * (v11 * *(double *)(a1 + 96)) * *(double *)(a1 + 32);
        *(double *)(a1 + 24) = v12;
        v10 = v12 + *(double *)(a1 + 56);
      }
      while (v9 * v9 / v10 > *((double *)sub_10012A448() + 20));
    }
    v13 = *(double *)(a1 + 24);
    v14 = *(double *)(a1 + 16) + v13 / v10 * v9;
    *(double *)(a1 + 8) = v13 * (1.0 - v13 / v10);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 64);
    if (*(double *)(a1 + 88) == 0.0)
      *(double *)(a1 + 104) = *(double *)(a1 + 104) + v14 - *(double *)a1;
    *(double *)a1 = v14;
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A97F8);
    v15 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      v16 = *(_QWORD *)(a1 + 72);
      *(_DWORD *)buf = 134283521;
      v23 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, kalmanFilter, updated, timestamp, %{private}0.3f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A97F8);
      v18 = *(_QWORD *)(a1 + 72);
      v20 = 134283521;
      v21 = v18;
      v19 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiCalc, zaxis, kalmanFilter, updated, timestamp, %{private}0.3f", &v20, 12);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiAltitudeKalmanFilter::update(const double &, const double &)", "%s\n", v19);
      if (v19 != (char *)buf)
        free(v19);
    }
  }
  return v8 > 0.0;
}

BOOL sub_10121E2CC(uint64_t a1, uint64_t *a2, double *a3)
{
  _BOOL8 result;
  double v7;
  double v8;
  NSObject *v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  double v13;
  char *v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  double v18;
  uint8_t buf[4];
  uint64_t v20;
  __int16 v21;
  double v22;

  if (!*(_BYTE *)(a1 + 120))
    return 0;
  result = sub_100020150((double *)a1, (double *)(a1 + 8));
  if (result)
  {
    *a2 = *(_QWORD *)a1;
    v7 = *((double *)sub_10012A448() + 8) * sqrt(*(double *)(a1 + 8));
    v8 = *((double *)sub_10012A448() + 9);
    if (v7 >= v8)
      v8 = v7;
    *a3 = v8;
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A97F8);
    v9 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      v10 = *a2;
      v11 = *a3;
      *(_DWORD *)buf = 134283777;
      v20 = v10;
      v21 = 2049;
      v22 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, kalmanFilter, estimated altitude, %{private}0.3f, uncertainty, %{private}0.3f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A97F8);
      v12 = *a2;
      v13 = *a3;
      v15 = 134283777;
      v16 = v12;
      v17 = 2049;
      v18 = v13;
      v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiCalc, zaxis, kalmanFilter, estimated altitude, %{private}0.3f, uncertainty, %{private}0.3f", &v15, 22);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiAltitudeKalmanFilter::getResults(double &, double &) const", "%s\n", v14);
      if (v14 != (char *)buf)
        free(v14);
    }
    return 1;
  }
  return result;
}

void sub_10121E4FC(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_10121E528()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_10121E5C4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_10121E5DC()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_10121E668(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

void sub_10121E680(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  sub_1015EB864((_QWORD *)a2);
  v4 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(a2 + 3616) |= 1u;
  *(_QWORD *)(a2 + 616) = v4;
  operator new();
}

void sub_10121EAD4(_Unwind_Exception *a1)
{
  PB::Base *v1;

  sub_1015EE304(v1);
  _Unwind_Resume(a1);
}

void sub_10121EBC4(id a1)
{
  qword_10230D568 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLSuggestedActionManagerSilo"));
}

id sub_10121EE44(uint64_t a1)
{
  id result;
  id v3;
  double Current;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  double v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  void (**v19)(id, _QWORD, NSError *);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  const char *v26;
  uint8_t *v27;
  id v28;
  double v29;
  double v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  int v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  double v41;
  uint8_t buf[4];
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  double v47;
  _BYTE v48[128];

  result = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "activeRequests"), "count");
  if (result)
  {
    v3 = +[NSMutableIndexSet indexSet](NSMutableIndexSet, "indexSet");
    Current = CFAbsoluteTimeGetCurrent();
    v32 = 0u;
    v33 = 0u;
    v34 = 0u;
    v35 = 0u;
    v31 = a1;
    v5 = objc_msgSend(*(id *)(a1 + 32), "activeRequests");
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v32, v48, 16);
    if (v6)
    {
      v7 = v6;
      v8 = 0;
      v9 = *(_QWORD *)v33;
      do
      {
        v10 = 0;
        do
        {
          if (*(_QWORD *)v33 != v9)
            objc_enumerationMutation(v5);
          v11 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * (_QWORD)v10);
          objc_msgSend(v11, "timestamp");
          if (Current > v12 + 5.0)
          {
            objc_msgSend(v3, "addIndex:", (char *)v10 + v8);
            if (qword_1022A02D0 != -1)
              dispatch_once(&qword_1022A02D0, &stru_1021A9838);
            v13 = qword_1022A02D8;
            if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
            {
              objc_msgSend(v11, "lat");
              v15 = v14;
              objc_msgSend(v11, "lon");
              v17 = v16;
              objc_msgSend(v11, "radiusMeters");
              *(_DWORD *)buf = 134218496;
              v43 = v15;
              v44 = 2048;
              v45 = v17;
              v46 = 2048;
              v47 = v18;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "TILE_APP: Removing request since it timed out, lat, %f, lon, %f, radius, %f.", buf, 0x20u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A02D0 != -1)
                dispatch_once(&qword_1022A02D0, &stru_1021A9838);
              v20 = qword_1022A02D8;
              objc_msgSend(v11, "lat");
              v22 = v21;
              objc_msgSend(v11, "lon");
              v24 = v23;
              objc_msgSend(v11, "radiusMeters");
              v36 = 134218496;
              v37 = v22;
              v38 = 2048;
              v39 = v24;
              v40 = 2048;
              v41 = v25;
              LODWORD(v29) = 32;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v20, 2, "TILE_APP: Removing request since it timed out, lat, %f, lon, %f, radius, %f.", COERCE_DOUBLE(&v36), v29, v30);
              v27 = (uint8_t *)v26;
              sub_100512490("Generic", 1, 0, 2, "-[CLAppTileDataProvider beginService]_block_invoke", "%s\n", v26);
              if (v27 != buf)
                free(v27);
            }
            v19 = (void (**)(id, _QWORD, NSError *))objc_msgSend(v11, "handler");
            v19[2](v19, 0, +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("CLAppTileDataProviderErrorDomain"), 0, 0));
          }
          v10 = (char *)v10 + 1;
        }
        while (v7 != v10);
        v28 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v32, v48, 16);
        v7 = v28;
        v8 += (uint64_t)v10;
      }
      while (v28);
    }
    objc_msgSend(objc_msgSend(*(id *)(v31 + 32), "activeRequests"), "removeObjectsAtIndexes:", v3);
    result = objc_msgSend(objc_msgSend(*(id *)(v31 + 32), "activeRequests"), "count");
    if (result)
      return objc_msgSend(objc_msgSend(*(id *)(v31 + 32), "activeRequestCleanupTimer"), "setNextFireDelay:", 5.0);
  }
  return result;
}

void sub_10121FC38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char *a55)
{
  sub_1000F34E0(&a49);
  sub_100067A00((uint64_t)&a54, a55);
  _Unwind_Resume(a1);
}

void sub_1012204C4(uint64_t a1, unsigned int *a2, uint64_t *a3, void *a4)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 __p;
  uint64_t v13;

  v6 = *a2;
  v7 = *a3;
  if (*((char *)a3 + 31) < 0)
  {
    sub_100115CE4(&v8, (void *)a3[1], a3[2]);
  }
  else
  {
    v8 = *(_OWORD *)(a3 + 1);
    v9 = a3[3];
  }
  if (*((char *)a3 + 55) < 0)
  {
    sub_100115CE4(&v10, (void *)a3[4], a3[5]);
  }
  else
  {
    v10 = *((_OWORD *)a3 + 2);
    v11 = a3[6];
  }
  if (*((char *)a3 + 79) < 0)
  {
    sub_100115CE4(&__p, (void *)a3[7], a3[8]);
  }
  else
  {
    __p = *(_OWORD *)(a3 + 7);
    v13 = a3[9];
  }
  objc_msgSend(a4, "onTileWasDownloadedNotification:data:", v6, &v7);
  if (SHIBYTE(v13) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v11) < 0)
    operator delete((void *)v10);
  if (SHIBYTE(v9) < 0)
    operator delete((void *)v8);
}

void sub_1012205D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void sub_101220FFC(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1012212B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  _QWORD block[7];

  v3 = *(void **)(a1 + 32);
  if (v3)
  {
    if ((objc_opt_respondsToSelector(objc_msgSend(*(id *)(a1 + 32), "delegate"), "eventUpdateForDevice:event:") & 1) != 0)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_101221344;
      block[3] = &unk_10212BBA8;
      block[4] = v3;
      block[5] = a2;
      block[6] = a3;
      dispatch_async((dispatch_queue_t)objc_msgSend(v3, "delegateQueue"), block);
    }
  }
}

id sub_101221344(uint64_t a1)
{
  return _objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "delegate"), "eventUpdateForDevice:event:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_1012214BC(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_1012214E8(uint64_t a1)
{
  uint64_t v2;
  int64x2_t v3;
  int64x2_t v4;

  v2 = sub_100C9B218(a1) + 560;
  sub_10068654C(v2, 0);
  sub_101221838(a1 + 1424, v2);
  *(_DWORD *)(a1 + 1472) = 0;
  *(_OWORD *)(a1 + 1476) = xmmword_101C47AF0;
  v3 = vdupq_n_s64(1uLL);
  *(int64x2_t *)(a1 + 1496) = v3;
  *(_DWORD *)(a1 + 1512) = 0;
  *(_OWORD *)(a1 + 1516) = xmmword_101C47AF0;
  *(int64x2_t *)(a1 + 1536) = v3;
  *(_QWORD *)(a1 + 1584) = 0;
  *(_BYTE *)(a1 + 1592) = 0;
  *(_DWORD *)(a1 + 1596) = 2139095039;
  sub_100687704(v2, (uint64_t)sub_1012215C4, a1);
  *(_DWORD *)(a1 + 1472) = 0;
  *(_OWORD *)(a1 + 1476) = xmmword_101C47B00;
  v4 = vdupq_n_s64(2uLL);
  *(int64x2_t *)(a1 + 1496) = v4;
  *(_DWORD *)(a1 + 1512) = 0;
  *(_OWORD *)(a1 + 1516) = xmmword_101C47B10;
  *(int64x2_t *)(a1 + 1536) = v4;
  return a1;
}

void sub_1012215B0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_10214AE70;
  _Unwind_Resume(a1);
}

float sub_1012215C4(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100C9BCBC(a4, a1, a2);
}

BOOL sub_1012215D8(uint64_t a1, float32x2_t *a2, double *a3)
{
  unint64_t v4;
  float v5;
  uint64_t v6;
  unint64_t v7;
  float v8;
  int v9;
  int v10;
  uint64_t v12;
  int v13;
  float32x2_t v14;
  float v15;
  unint64_t v16;

  v4 = (unint64_t)(*a3 * 1000000.0);
  v16 = v4;
  v5 = a2[1].f32[0];
  v14 = vmul_f32(*a2, (float32x2_t)vdup_n_s32(0x3C8EFA35u));
  v15 = v5 * 0.017453;
  sub_100B27140((float32x2_t *)(a1 + 1472), &v14);
  v6 = *(_QWORD *)(a1 + 1504) - 1;
  *(_QWORD *)(a1 + 1504) = v6;
  if (!v6)
  {
    *(_QWORD *)(a1 + 1504) = *(_QWORD *)(a1 + 1496);
    v7 = v4 - *(_QWORD *)(a1 + 1584);
    if (v7 >= 0xF4241)
    {
      sub_100C9B21C(a1);
      sub_1006865E4(a1 + 560, v7);
      if (*(_BYTE *)(a1 + 1592))
        sub_100AAAA44((uint64_t *)(a1 + 1424), a1 + 1552);
      v8 = *(float *)(a1 + 1596);
      if (v8 != 3.4028e38)
        sub_100AAABFC(a1 + 1424, v8);
    }
    *(_QWORD *)(a1 + 1584) = v4;
    v9 = *(_DWORD *)(a1 + 1488);
    v12 = *(_QWORD *)(a1 + 1480);
    v13 = v9;
    sub_100686BA0(a1 + 560, (uint64_t)&v12, &v16);
  }
  v10 = *(unsigned __int8 *)(a1 + 1304);
  if (*(_BYTE *)(a1 + 1304))
    sub_100C9BCF8(a1, (uint64_t)&v14, v16);
  return v10 != 0;
}

float32x2_t *sub_10122170C(uint64_t a1, float32x2_t *a2, double *a3)
{
  __int32 v4;
  uint64_t v5;
  float32x2_t *result;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  float32x2_t v13;
  __int32 v14;

  v4 = a2[1].i32[0];
  v13 = *a2;
  v14 = v4;
  v5 = (unint64_t)(*a3 * 1000000.0);
  v12 = v5;
  result = sub_100B27140((float32x2_t *)(a1 + 1512), &v13);
  v7 = *(_QWORD *)(a1 + 1544) - 1;
  *(_QWORD *)(a1 + 1544) = v7;
  if (!v7)
  {
    *(_QWORD *)(a1 + 1544) = *(_QWORD *)(a1 + 1536);
    v8 = *(_DWORD *)(a1 + 1528);
    v10 = *(_QWORD *)(a1 + 1520);
    v11 = v8;
    sub_100C9C38C((float32x4_t *)a1, (uint64_t)&v10, v5);
    v9 = *(_DWORD *)(a1 + 1528);
    v10 = *(_QWORD *)(a1 + 1520);
    v11 = v9;
    return (float32x2_t *)sub_100686B6C(a1 + 560, (uint64_t)&v10);
  }
  return result;
}

_QWORD *sub_1012217BC(uint64_t a1, float a2)
{
  _QWORD *result;

  result = sub_100AAABFC(a1 + 1424, a2);
  *(float *)(a1 + 1596) = a2;
  return result;
}

_QWORD *sub_1012217F0(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a1 + 1592) = 1;
  *(_DWORD *)(a1 + 1552) = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 1556) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 1560) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 1564) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 1568) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 1572) = *(_DWORD *)(a2 + 20);
  *(_BYTE *)(a1 + 1576) = *(_BYTE *)(a2 + 24);
  return sub_100AAAA44((uint64_t *)(a1 + 1424), a2);
}

uint64_t sub_101221838(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  *(_QWORD *)a1 = a2;
  *(_BYTE *)(a1 + 8) &= 0xFCu;
  if (!a2)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A98C0);
    v4 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Assertion failed: receiver, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMLinearTemperatureFit.h, line 27,receiver must not be null..", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A98C0);
      v7[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: receiver, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMLinearTemperatureFit.h, line 27,receiver must not be null..", v7, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "CMLinearTemperatureFit::CMLinearTemperatureFit(CMTemperatureFitReceiver *)", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  return a1;
}

void sub_1012219E0(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_101221A0C(uint64_t a1, uint64_t a2, int a3)
{
  sub_1009BAC4C(a1, a2, a3);
}

_QWORD *sub_101221A60(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1021A98F0;
  v2 = (uint64_t)(a1 + 4);
  sub_100261F44((uint64_t)(a1 + 8));
  sub_100261F44(v2);
  return sub_1009BAD18(a1);
}

const __CFString *sub_101221AA8(int a1)
{
  if ((a1 - 1) > 7)
    return CFSTR("unknown");
  else
    return off_1021A9A00[a1 - 1];
}

const __CFString *sub_101221AD0(unsigned int a1)
{
  if (a1 > 4)
    return CFSTR("?");
  else
    return off_1021A9A40[a1];
}

const __CFString *sub_101221AF4(int a1)
{
  const __CFString *v1;

  v1 = CFSTR("?");
  if (a1 == 1)
    v1 = CFSTR("Disconnected");
  if (a1)
    return v1;
  else
    return CFSTR("Connected");
}

const __CFString *sub_101221B20(unsigned int a1)
{
  if (a1 > 2)
    return CFSTR("?");
  else
    return off_1021A9A68[a1];
}

BOOL sub_101221B44(uint64_t a1)
{
  if (!*(_QWORD *)(a1 + 80))
    return 1;
  sub_10055EAE4();
  return !sub_1005612B0();
}

uint64_t sub_101221B70()
{
  uint64_t v0;
  unsigned int v1;
  _BOOL4 v3;
  unsigned int v4;
  uint64_t v6;

  v6 = 0;
  v0 = sub_10055EAE4();
  sub_1005609FC(v0, (int *)&v6 + 1, (int *)&v6);
  if (v6)
    v1 = 2;
  else
    v1 = 4;
  v3 = HIDWORD(v6) != 3 || (_DWORD)v6 != 3;
  if ((_DWORD)v6)
    v4 = v3;
  else
    v4 = 3;
  if (HIDWORD(v6))
    return v4;
  else
    return v1;
}

void sub_101221BDC(uint64_t a1)
{
  uint64_t v1;
  int v3;
  int v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  _DWORD v9[2];
  char v10;
  __int128 v11;

  v1 = a1 + 32;
  if (!*(_QWORD *)(a1 + 32))
  {
    sub_10055EAE4();
    v4 = *(_DWORD *)(a1 + 56);
    v3 = *(_DWORD *)(a1 + 60);
    if (!*(_BYTE *)(a1 + 29))
      operator new();
    v5 = (uint64_t *)sub_100A07FA0();
    v9[0] = v4;
    v9[1] = v3;
    v10 = 1;
    sub_1018E4078(v5, (uint64_t)v9, (uint64_t *)&v11);
    sub_1002B7674(v1, &v11);
    v6 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
    if (*((_QWORD *)&v11 + 1))
    {
      v7 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    sub_100A0A544(*(_QWORD *)(a1 + 32), (uint64_t)sub_101222338, a1);
    sub_100A0A594(*(_QWORD **)(a1 + 32), (uint64_t)sub_101222790, a1);
    sub_100A0A4BC(*(uint64_t **)(a1 + 32), (uint64_t)sub_10122232C, a1);
  }
}

void sub_101221D3C()
{
  operator delete();
}

BOOL sub_101221D6C(uint64_t a1, _DWORD *a2)
{
  CFRunLoopRef Current;
  __IOHIDServiceClient *v5;

  Current = CFRunLoopGetCurrent();
  sub_100127B9C();
  if (Current != (CFRunLoopRef)sub_1001AD8D0())
    sub_101947A48();
  v5 = (__IOHIDServiceClient *)sub_100A0A3A0(*(_QWORD *)(a1 + 32));
  if (v5)
  {
    if (!sub_1013B50F0(a2, v5, CFSTR("LocationID")))
      sub_1013B50F0(a2, v5, CFSTR("SIDE"));
    sub_1013B5444((uint64_t)(a2 + 2), v5, CFSTR("CFG#"));
    sub_1013B5444((uint64_t)(a2 + 8), v5, CFSTR("SerialNumber"));
    sub_101221E2C(a1);
    a2[14] = *(_DWORD *)(a1 + 48);
  }
  return v5 != 0;
}

void sub_101221E2C(uint64_t a1)
{
  int v2;
  int v3;
  _QWORD *v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  if (!*(_DWORD *)(a1 + 48))
  {
    v2 = *(_DWORD *)(sub_10055EAE4() + 24);
    switch(v2)
    {
      case 8202:
      case 8223:
        v3 = 2;
        goto LABEL_23;
      case 8203:
      case 8204:
      case 8205:
      case 8207:
      case 8208:
      case 8209:
      case 8213:
      case 8214:
      case 8216:
      case 8218:
      case 8220:
      case 8221:
      case 8222:
        goto LABEL_6;
      case 8206:
        v3 = 1;
        goto LABEL_23;
      case 8210:
        v3 = 4;
        goto LABEL_23;
      case 8211:
        v3 = 3;
        goto LABEL_23;
      case 8212:
        goto LABEL_5;
      case 8215:
        v3 = 6;
        goto LABEL_23;
      case 8217:
        v3 = 7;
        goto LABEL_23;
      case 8219:
        v3 = 8;
        goto LABEL_23;
      default:
        if (v2 == 8228)
        {
LABEL_5:
          v3 = 5;
LABEL_23:
          *(_DWORD *)(a1 + 48) = v3;
        }
        else
        {
LABEL_6:
          if (!*(_QWORD *)(a1 + 80))
          {
            v4 = (_QWORD *)sub_10055EAE4();
            if ((sub_1005600B4(v4, *(_QWORD *)(a1 + 80)) & 1) == 0)
            {
              if (qword_10229FD80 != -1)
                dispatch_once(&qword_10229FD80, &stru_1021A9948);
              v5 = qword_10229FD88;
              if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 67174657;
                v10 = v2;
                _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[CLAccessoryNotifier] Warning! The connected device %{private}d might not be supported", buf, 8u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_10229FD80 != -1)
                  dispatch_once(&qword_10229FD80, &stru_1021A9948);
                v8[0] = 67174657;
                v8[1] = v2;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 16, "[CLAccessoryNotifier] Warning! The connected device %{private}d might not be supported", v8, 8);
                v7 = (uint8_t *)v6;
                sub_100512490("Generic", 1, 0, 0, "void CLAccessoryNotifier::refreshHardwareModel()", "%s\n", v6);
                if (v7 != buf)
                  free(v7);
              }
            }
          }
        }
        break;
    }
  }
}

void sub_1012220C8(uint64_t a1, int a2)
{
  uint64_t v4;

  v4 = sub_10055EAE4();
  sub_10056054C(v4, a1, a2);
}

void sub_1012220F4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10055EAE4();
  sub_10056062C(v2, a1);
}

id sub_101222118(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_10055EAE4();
  return sub_100560734(v3, a2);
}

void sub_10122213C(uint64_t a1, int a2, unint64_t a3, unint64_t a4)
{
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  _DWORD v11[2];
  __int16 v12;
  unint64_t v13;
  __int16 v14;
  unint64_t v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  unint64_t v19;
  __int16 v20;
  unint64_t v21;

  if (qword_10229FD80 != -1)
    dispatch_once(&qword_10229FD80, &stru_1021A9948);
  v8 = qword_10229FD88;
  if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67240704;
    v17 = a2;
    v18 = 2050;
    v19 = a3;
    v20 = 2050;
    v21 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "[AccessoryNotifier] numberOfClientsChanged notification:%{public}d, from:%{public}zu, to:%{public}zu", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_1021A9948);
    v11[0] = 67240704;
    v11[1] = a2;
    v12 = 2050;
    v13 = a3;
    v14 = 2050;
    v15 = a4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 1, "[AccessoryNotifier] numberOfClientsChanged notification:%{public}d, from:%{public}zu, to:%{public}zu", v11, 28);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLAccessoryNotifier::numberOfClientsChanged(int, size_t, size_t)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  if (a3 < a4)
    *(_BYTE *)(a1 + 30) = 0;
}

uint64_t sub_10122232C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

void sub_101222338(uint64_t a1)
{
  __IOHIDServiceClient *v2;
  __IOHIDServiceClient *v3;
  _BYTE *v4;
  NSObject *v5;
  __IOHIDServiceClient *v6;
  int v7;
  int v8;
  __IOHIDServiceClient *v9;
  int v10;
  int v11;
  const char *v12;
  uint8_t *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSData *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint8_t *v22;
  uint64_t v23;
  const __CFString *v24;
  NSData *v25;
  int v26;
  __IOHIDServiceClient *v27;
  __int16 v28;
  _BYTE v29[10];
  uint64_t v30;
  uint8_t buf[4];
  __IOHIDServiceClient *v32;
  __int16 v33;
  _BYTE v34[10];
  uint64_t v35;

  v23 = 0;
  v2 = (__IOHIDServiceClient *)sub_100A0A3A0(*(_QWORD *)(a1 + 32));
  if (!v2 || (v3 = v2, !sub_1013B5818(&v23, v2, CFSTR("BT_ADDR"), (id)6)))
  {
LABEL_24:
    *(_DWORD *)(a1 + 48) = 0;
    v4 = (_BYTE *)(a1 + 30);
    goto LABEL_25;
  }
  if (v23 != *(_QWORD *)(a1 + 80))
  {
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_1021A9948);
    v14 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEFAULT))
    {
      v15 = *(_QWORD *)(a1 + 80);
      *(_DWORD *)buf = 134284033;
      v32 = v3;
      v33 = 2049;
      *(_QWORD *)v34 = v15;
      *(_WORD *)&v34[8] = 2049;
      v35 = v23;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "[AccessoryNotifier] onNewHidService for service %{private}p. Updating BT address from %{private}llx to %{private}llx", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_1021A9948);
      v20 = *(_QWORD *)(a1 + 80);
      v26 = 134284033;
      v27 = v3;
      v28 = 2049;
      *(_QWORD *)v29 = v20;
      *(_WORD *)&v29[8] = 2049;
      v30 = v23;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 0, "[AccessoryNotifier] onNewHidService for service %{private}p. Updating BT address from %{private}llx to %{private}llx", &v26, 32);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "static void CLAccessoryNotifier::onNewHidService(void *)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    if (*(_QWORD *)(a1 + 80))
    {
      *(_QWORD *)(a1 + 80) = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
    }
    *(_QWORD *)(a1 + 80) = v23;
    v16 = sub_10055EAE4();
    sub_10055EE80(v16, *(_QWORD *)(a1 + 80));
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
    v17 = *(_QWORD *)(a1 + 88);
    if (!v17 || *(_QWORD *)(a1 + 80) == v17)
    {
      v18 = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", &v23, 6);
      v19 = *(_QWORD *)(a1 + 32);
      v24 = CFSTR("BT_ADDR");
      v25 = v18;
      sub_100A0A9EC(v19, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v25, &v24, 1));
    }
    goto LABEL_24;
  }
  v4 = (_BYTE *)(a1 + 30);
  if (*(_BYTE *)(a1 + 30))
  {
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_1021A9948);
    v5 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_ERROR))
    {
      v6 = *(__IOHIDServiceClient **)(a1 + 80);
      v7 = *(_DWORD *)(a1 + 56);
      v8 = *(_DWORD *)(a1 + 60);
      *(_DWORD *)buf = 134284033;
      v32 = v6;
      v33 = 1026;
      *(_DWORD *)v34 = v7;
      *(_WORD *)&v34[4] = 1026;
      *(_DWORD *)&v34[6] = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[AccessoryNotifier] Duplicate service with the same BT address %{private}llx for usage page %{public}d usage %{public}d", buf, 0x18u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_1021A9948);
      v9 = *(__IOHIDServiceClient **)(a1 + 80);
      v10 = *(_DWORD *)(a1 + 56);
      v11 = *(_DWORD *)(a1 + 60);
      v26 = 134284033;
      v27 = v9;
      v28 = 1026;
      *(_DWORD *)v29 = v10;
      *(_WORD *)&v29[4] = 1026;
      *(_DWORD *)&v29[6] = v11;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 16, "[AccessoryNotifier] Duplicate service with the same BT address %{private}llx for usage page %{public}d usage %{public}d", &v26, 24);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 0, "static void CLAccessoryNotifier::onNewHidService(void *)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
  }
LABEL_25:
  *v4 = 0;
}

void sub_101222790(uint64_t *a1)
{
  uint64_t v2;

  sub_100A0B010(a1[4]);
  a1[10] = 0;
  (*(void (**)(uint64_t *))(*a1 + 48))(a1);
  v2 = sub_10055EAE4();
  sub_10055EE80(v2, 0);
}

void sub_1012227D0(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  sub_101222898(&v2, a2);
}

void sub_101222840(id a1)
{
  qword_10229FD88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Accessory");
}

void sub_10122286C(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_101222898(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1012228F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101222910(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_101222928(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *sub_101222968()
{
  unsigned __int8 v0;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_10230D860);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10230D860))
  {
    sub_1015A2E04(&__p, "vision_input");
    sub_101222DE4(qword_10230D578, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __cxa_atexit((void (*)(void *))sub_100F9A474, qword_10230D578, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10230D860);
  }
  return qword_10230D578;
}

void sub_101222A0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_10230D860);
  _Unwind_Resume(a1);
}

uint64_t sub_101222A3C()
{
  if ((sub_10114BBB0() & 1) != 0)
    return 1;
  sub_100197040();
  return sub_10075D288();
}

uint64_t sub_101222A64@<X0>(const std::string *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  int v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  int v10;
  int v11;
  int v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  const std::string::value_type *v16;
  int v17;
  int v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  NSObject *v22;
  uint64_t result;
  char *v24;
  BOOL v25[16];
  uint8_t buf[8];
  std::__shared_weak_count *v27;

  v4 = (std::string *)sub_1004886A8((uint64_t)a2);
  std::string::operator=(v4, a1);
  sub_1001E4804(buf);
  v25[0] = 0;
  v5 = sub_1001E4874(*(uint64_t *)buf, "WriteVisionLogsToCrashReporterFolder", v25);
  if (v25[0])
    v6 = v5;
  else
    v6 = 0;
  v7 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  sub_1001E4804(buf);
  v25[0] = 0;
  v10 = sub_1001E4874(*(uint64_t *)buf, "WriteLocationdLogsToCrashReporterFolder", v25);
  if (v25[0])
    v11 = v10;
  else
    v11 = 0;
  v12 = v6 | v11;
  v13 = v27;
  if (v27)
  {
    v14 = (unint64_t *)&v27->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (v12)
    v16 = "/var/mobile/Library/Logs/CrashReporter/vision";
  else
    v16 = "/var/mobile/Library/Logs/vision";
  std::string::assign(a2 + 2, v16);
  a2[4].__r_.__value_.__l.__size_ = 125829120;
  sub_1001E4804(buf);
  v25[0] = 0;
  v17 = sub_1001E4874(*(uint64_t *)buf, "EnableLargeVisionLogs", v25);
  if (v25[0])
    v18 = v17;
  else
    v18 = 0;
  v19 = v27;
  if (!v27)
    goto LABEL_27;
  v20 = (unint64_t *)&v27->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    if (!v18)
      goto LABEL_34;
  }
  else
  {
LABEL_27:
    if (!v18)
      goto LABEL_34;
  }
  if (qword_1022A00C0 != -1)
    dispatch_once(&qword_1022A00C0, &stru_1021A9AB8);
  v22 = qword_1022A00C8;
  if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "EnableLargeVisionLogs is set", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_1021A9AB8);
    *(_WORD *)v25 = 0;
    v24 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 0, "EnableLargeVisionLogs is set", v25, 2);
    sub_100512490("Generic", 1, 0, 2, "static CLProtobufSerializer::Config CLVisionEventSerializer::generateConfig(const std::string &)", "%s\n", v24);
    if (v24 != (char *)buf)
      free(v24);
  }
  a2[4].__r_.__value_.__l.__size_ *= 2097152000;
LABEL_34:
  a2[4].__r_.__value_.__s.__data_[20] = 0;
  a2[4].__r_.__value_.__s.__data_[21] = sub_10114BBB0();
  sub_100197040();
  result = sub_10075D288();
  a2[4].__r_.__value_.__s.__data_[22] = result;
  return result;
}

void sub_101222DA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10048839C(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_101222DE4(_QWORD *a1, const std::string *a2)
{
  std::string v4;
  void *v5;
  char v6;
  void *v7;
  char v8;
  void *__p;
  char v10;

  sub_101222A64(a2, &v4);
  sub_10114BC58((uint64_t)a1, (__int128 *)&v4);
  if (v10 < 0)
    operator delete(__p);
  if (v8 < 0)
    operator delete(v7);
  if (v6 < 0)
    operator delete(v5);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  *a1 = off_1021A9A90;
  return a1;
}

void sub_101222E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10048839C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_101222E88(uint64_t a1, int *a2)
{
  double v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD v9[4];
  uint64_t v10;
  uint64_t v11;
  int v12;

  sub_100166054(v9);
  v4 = sub_100078B88();
  v12 |= 1u;
  if (!v10)
    operator new();
  sub_100870D4C(v10, v4);
  v12 |= 2u;
  v5 = v11;
  if (!v11)
    operator new();
  *(_DWORD *)(v11 + 492) |= 0x20u;
  v6 = *(_QWORD *)(v5 + 304);
  if (!v6)
    operator new();
  v7 = *a2;
  if (!sub_100177AB4(v7))
    __assert_rtn("set_ar_session_state", "CLPVisionLogEntry.pb.h", 184, "::CLP::LogEntry::Vision::ARSessionState_IsValid(value)");
  *(_DWORD *)(v6 + 40) |= 1u;
  *(_DWORD *)(v6 + 32) = v7;
  sub_100166ABC(a1, (uint64_t)v9);
  return sub_100166004(v9);
}

void sub_101222FDC()
{
  operator delete();
}

uint64_t sub_101223040(uint64_t a1, uint64_t a2)
{
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[4];
  uint64_t v10;
  uint64_t v11;
  int v12;

  sub_100166054(v9);
  v4 = sub_100078B88();
  v12 |= 1u;
  if (!v10)
    operator new();
  sub_100870D4C(v10, v4);
  v12 |= 2u;
  v5 = v11;
  if (!v11)
    operator new();
  *(_DWORD *)(v11 + 492) |= 0x20u;
  v6 = *(_QWORD *)(v5 + 304);
  if (!v6)
    operator new();
  *(_DWORD *)(v6 + 40) |= 2u;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    operator new();
  sub_100B36928(v7, a2);
  sub_100166ABC(a1, (uint64_t)v9);
  return sub_100166004(v9);
}

void sub_101223194()
{
  operator delete();
}

uint64_t sub_10122320C(uint64_t a1, uint64_t a2)
{
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[4];
  uint64_t v10;
  uint64_t v11;
  int v12;

  sub_100166054(v9);
  v4 = sub_100078B88();
  v12 |= 1u;
  if (!v10)
    operator new();
  sub_100870D4C(v10, v4);
  v12 |= 2u;
  v5 = v11;
  if (!v11)
    operator new();
  *(_DWORD *)(v11 + 492) |= 0x20u;
  v6 = *(_QWORD *)(v5 + 304);
  if (!v6)
    operator new();
  *(_DWORD *)(v6 + 40) |= 8u;
  v7 = *(_QWORD *)(v6 + 24);
  if (!v7)
    operator new();
  sub_100B3E9AC(v7, a2);
  sub_100166ABC(a1, (uint64_t)v9);
  return sub_100166004(v9);
}

void sub_101223360()
{
  operator delete();
}

uint64_t sub_1012233D8(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[4];
  uint64_t v21;
  uint64_t v22;
  int v23;

  sub_100166054(v20);
  v8 = sub_100078B88();
  v23 |= 1u;
  if (!v21)
    operator new();
  sub_100870D4C(v21, v8);
  v23 |= 2u;
  v9 = v22;
  if (a4)
  {
    if (!v22)
      operator new();
    *(_DWORD *)(v22 + 488) |= 0x20000u;
    v10 = *(_QWORD *)(v9 + 144);
    if (!v10)
      operator new();
    *(_DWORD *)(v10 + 100) |= 4u;
    v11 = *(_QWORD *)(v10 + 16);
    if (!v11)
      operator new();
    sub_100447058(v11, a2);
    v23 |= 2u;
    v12 = v22;
    if (!v22)
      operator new();
    *(_DWORD *)(v22 + 488) |= 0x20000u;
    v13 = *(_QWORD *)(v12 + 144);
    if (!v13)
      operator new();
    *(_DWORD *)(v13 + 100) |= 8u;
    v14 = *(_QWORD *)(v13 + 24);
    if (!v14)
      operator new();
  }
  else
  {
    if (!v22)
      operator new();
    *(_DWORD *)(v22 + 488) |= 8u;
    v15 = *(_QWORD *)(v9 + 32);
    if (!v15)
      operator new();
    *(_DWORD *)(v15 + 100) |= 4u;
    v16 = *(_QWORD *)(v15 + 16);
    if (!v16)
      operator new();
    sub_100447058(v16, a2);
    v23 |= 2u;
    v17 = v22;
    if (!v22)
      operator new();
    *(_DWORD *)(v22 + 488) |= 8u;
    v18 = *(_QWORD *)(v17 + 32);
    if (!v18)
      operator new();
    *(_DWORD *)(v18 + 100) |= 8u;
    v14 = *(_QWORD *)(v18 + 24);
    if (!v14)
      operator new();
  }
  sub_10044BBA8(v14, a3);
  sub_100166ABC(a1, (uint64_t)v20);
  return sub_100166004(v20);
}

void sub_101223740()
{
  operator delete();
}

void sub_1012237FC(id a1)
{
  qword_1022A00C8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Vision");
}

void sub_101223828(_BYTE *a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  NSObject *v9;
  char *v10;
  BOOL v11[16];
  uint8_t buf[8];
  std::__shared_weak_count *v13;

  sub_1001301FC((_DWORD *)a2, (uint64_t)a1);
  sub_1001E4804(buf);
  v11[0] = 0;
  v4 = sub_1001E4874(*(uint64_t *)buf, "EmergencyWifiToggleAllowed", v11);
  if (v11[0])
    v5 = 0;
  else
    v5 = v4;
  v6 = v13;
  if (!v13)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (v5)
      goto LABEL_9;
  }
  else
  {
LABEL_8:
    if (v5)
    {
LABEL_9:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021A9AD8);
      v9 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "emergency wifi toggle not allowed so skipping check", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021A9AD8);
        *(_WORD *)v11 = 0;
        v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "emergency wifi toggle not allowed so skipping check", v11, 2);
        sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::ScanRequest::HandleEvent::operator()(const Events::Client::EmergencyState &) const", "%s\n", v10);
        if (v10 != (char *)buf)
          free(v10);
      }
      return;
    }
  }
  if (a1[6244])
  {
    if (!a1[964] && !a1[6451])
    {
      if (!*(_BYTE *)(a2 + 1940))
        *(_BYTE *)(a2 + 1940) = 1;
      *(_DWORD *)(a2 + 1936) = 0;
    }
  }
  else if (a1[1064])
  {
    if (!*(_BYTE *)(a2 + 1940))
      *(_BYTE *)(a2 + 1940) = 1;
    *(_DWORD *)(a2 + 1936) = 1;
  }
}

void sub_101223A90(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

void sub_101223ABC(id a1)
{
  qword_1022A0088 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

void sub_101223AE8()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_101223B84(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_101223B9C()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_101223C28(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

uint64_t sub_101223C40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v9;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_BYTE *)(a1 + 24) = sub_10019CFA0() == 1;
  *(_DWORD *)(a1 + 28) = 0xFFFF;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 48) = xmmword_101BAFC90;
  *(_OWORD *)(a1 + 64) = _Q1;
  *(_OWORD *)(a1 + 80) = _Q1;
  *(_OWORD *)(a1 + 96) = _Q1;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 116) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 124) = 0;
  *(_DWORD *)(a1 + 140) = 0;
  *(_QWORD *)(a1 + 144) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 152) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 156) = 0;
  *(_QWORD *)(a1 + 172) = 0;
  *(_QWORD *)(a1 + 164) = 0;
  *(_BYTE *)(a1 + 180) = 0;
  *(_QWORD *)&v9 = sub_10012A33C(a1 + 184).n128_u64[0];
  *(_DWORD *)(a1 + 824) = 0;
  if (objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor", v9), "isServiceEnabled:", CFSTR("CLCachedLocationController")))sub_10089199C();
  return a1;
}

void sub_101223D5C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v3;

  sub_100261F44((uint64_t)(v1 + 88));
  v3 = *v1;
  *v1 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(a1);
}

void sub_101223D98(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLLastConfidentLocation::onCachedLocationControllerNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 8), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021A9AF8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLastConfidentLocation::onCachedLocationControllerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A9AF8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLastConfidentLocation::onCachedLocationControllerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_101224390(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_101223F50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

id *sub_101223F74(id *a1)
{
  id v2;

  objc_msgSend(a1[1], "silo");
  objc_msgSend(*((id *)*a1 + 2), "unregister:forNotification:", *((_QWORD *)*a1 + 1), 1);
  sub_100261F44((uint64_t)(a1 + 88));
  v2 = *a1;
  *a1 = 0;
  if (v2)
    (*(void (**)(id))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t sub_101223FD4(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 8), "silo");
  *(_BYTE *)(a1 + 24) = 1;
  objc_msgSend(*(id *)(a1 + 8), "silo");
  *(_DWORD *)(a1 + 824) = 0;
  return sub_101224010(a1);
}

uint64_t sub_101224010(uint64_t a1)
{
  uint64_t result;
  unsigned int v3;
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint8_t *v13;
  double v14;
  double v15;
  _BYTE v16[10];
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint8_t buf[4];
  int v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;

  result = (uint64_t)objc_msgSend(*(id *)(a1 + 8), "silo");
  v3 = *(_DWORD *)(a1 + 824);
  if (v3 <= 1)
  {
    *(_DWORD *)(a1 + 824) = v3 + 1;
    result = sub_100135DF0(a1);
    if ((_DWORD)result)
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A9B18);
      v4 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        v5 = *(_DWORD *)(a1 + 824);
        v6 = *(_QWORD *)(a1 + 48);
        v7 = *(_QWORD *)(a1 + 104);
        v8 = *(_QWORD *)(a1 + 116);
        *(_DWORD *)buf = 67109888;
        v22 = v5;
        v23 = 2048;
        v24 = v6;
        v25 = 2048;
        v26 = v7;
        v27 = 2048;
        v28 = v8;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Notifying cached location,num,%u,accuracy,%.01lf,timestamp,%.03lf,lifespan,%.04lf", buf, 0x26u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021A9B18);
        v9 = *(_QWORD *)(a1 + 48);
        v10 = *(_QWORD *)(a1 + 104);
        v11 = *(_QWORD *)(a1 + 116);
        v15 = COERCE_DOUBLE(__PAIR64__(*(_DWORD *)(a1 + 824), 67109888));
        *(_WORD *)v16 = 2048;
        *(_QWORD *)&v16[2] = v9;
        v17 = 2048;
        v18 = v10;
        v19 = 2048;
        v20 = v11;
        LODWORD(v14) = 38;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Notifying cached location,num,%u,accuracy,%.01lf,timestamp,%.03lf,lifespan,%.04lf", &v15, v14, v15, *(double *)v16);
        v13 = (uint8_t *)v12;
        sub_100512490("Generic", 1, 0, 2, "void CLLastConfidentLocation::notifyConfidentLocationIfNecessary()", "%s\n", v12);
        if (v13 != buf)
          free(v13);
      }
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), a1 + 28, a1 + 184);
    }
  }
  return result;
}

void sub_101224248(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 8), "silo");
  objc_msgSend(*(id *)(a1 + 8), "silo");
  *(_DWORD *)(a1 + 824) = 2;
  *(_BYTE *)(a1 + 24) = 0;
  sub_101224284(a1);
}

void sub_101224284(uint64_t a1)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BYTE v13[520];
  __int128 v14[7];
  char v15;

  objc_msgSend(*(id *)(a1 + 8), "silo");
  *(_DWORD *)(a1 + 28) = 0xFFFF;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 48) = xmmword_101BAFC90;
  *(_OWORD *)(a1 + 64) = _Q1;
  *(_OWORD *)(a1 + 80) = _Q1;
  *(_OWORD *)(a1 + 96) = _Q1;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 116) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 124) = 0;
  *(_DWORD *)(a1 + 140) = 0;
  *(_QWORD *)(a1 + 144) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 152) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 156) = 0;
  *(_QWORD *)(a1 + 172) = 0;
  *(_QWORD *)(a1 + 164) = 0;
  *(_BYTE *)(a1 + 180) = 0;
  sub_10012A33C(v13);
  memcpy((void *)(a1 + 184), v13, 0x201uLL);
  sub_1002B7674(a1 + 704, v14);
  v7 = v14[6];
  *(_OWORD *)(a1 + 784) = v14[5];
  *(_OWORD *)(a1 + 800) = v7;
  *(_BYTE *)(a1 + 816) = v15;
  v8 = v14[2];
  *(_OWORD *)(a1 + 720) = v14[1];
  *(_OWORD *)(a1 + 736) = v8;
  v9 = v14[4];
  *(_OWORD *)(a1 + 752) = v14[3];
  *(_OWORD *)(a1 + 768) = v9;
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v14[0] + 1);
  if (*((_QWORD *)&v14[0] + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v14[0] + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_101224390(uint64_t a1, uint64_t a2, int *a3, int *a4)
{
  NSObject *v6;
  int v7;
  const char *v8;
  NSObject *v9;
  int v10;
  uint8_t *v11;
  int v12;
  uint8_t buf[4];
  int v14;

  objc_msgSend(*(id *)(a1 + 8), "silo");
  if (*a3 == 1)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A9B18);
    v6 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v7 = *a4;
      *(_DWORD *)buf = 67109120;
      v14 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Received a kNotificationCachedLocationControllerStateUpdate notification, state, %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A9B18);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Received a kNotificationCachedLocationControllerStateUpdate notification, state, %d", &v12);
LABEL_19:
      v11 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLLastConfidentLocation::onCachedLocationControllerNotification(int, const CLCachedLocationController_Type::Notification &, const CLCachedLocationController_Type::NotificationData &)", "%s\n", v8);
      if (v11 != buf)
        free(v11);
    }
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021A9B38);
    v9 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v10 = *a3;
      *(_DWORD *)buf = 67109120;
      v14 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Received unknown notification %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021A9B38);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "Received unknown notification %d", &v12);
      goto LABEL_19;
    }
  }
}

void sub_10122464C(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_101224678(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1012246A4(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

char *sub_1012246D0(char *a1)
{
  __CFNotificationCenter *LocalCenter;

  *(_QWORD *)a1 = off_1021A9B78;
  *((_WORD *)a1 + 4) = 0;
  *(_QWORD *)(a1 + 12) = 0xFFFFFFFF00000000;
  *((_QWORD *)a1 + 3) = 0;
  *((_QWORD *)a1 + 4) = 0;
  *((_QWORD *)a1 + 5) = 0;
  sub_10055D44C(a1 + 48, "CLLogBase", 1, 0);
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 9) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterAddObserver(LocalCenter, a1, (CFNotificationCallback)sub_1012247FC, CFSTR("com.apple.locationd.DumpDiagnostics"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  return a1;
}

void sub_101224780(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(_QWORD *)(v2 + 40);
  *(_QWORD *)(v2 + 40) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1012247FC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
}

_QWORD *sub_10122480C(_QWORD *a1)
{
  __CFNotificationCenter *LocalCenter;
  uint64_t v3;

  *a1 = off_1021A9B78;
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterRemoveEveryObserver(LocalCenter, a1);
  if (*((char *)a1 + 159) < 0)
    operator delete((void *)a1[17]);
  if (*((char *)a1 + 135) < 0)
    operator delete((void *)a1[14]);
  if (*((char *)a1 + 111) < 0)
    operator delete((void *)a1[11]);
  if (*((char *)a1 + 87) < 0)
    operator delete((void *)a1[8]);
  sub_10055D4D0(a1 + 6);
  v3 = a1[5];
  a1[5] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_100261F44((uint64_t)(a1 + 3));
  return a1;
}

void sub_1012248B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1 + 48;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 48) + 16))(a1 + 48);
  v2 = *(_QWORD *)(v1 - 8);
  *(_QWORD *)(v1 - 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  operator new();
}

void sub_101224A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101224AB0(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v4;
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  uint8_t buf[1640];

  if (*a2)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021A9C40);
    v4 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "received unexpected darwin notification", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021A9C40);
      v9[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 16, "received unexpected darwin notification", v9, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "static void CLLogBase::onSettingsNotification(int, const CLDarwinNotifier_Type::Notification &, const CLDarwinNotifier_Type::NotificationData &, void *)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    v6 = *(_QWORD *)(a4 + 24);
    if (v6)
    {
      sub_100569514(v6);
      sub_101224C8C(a4);
      sub_100569514(*(_QWORD *)(a4 + 24));
      sub_101224C8C(a4);
    }
  }
}

uint64_t sub_101224C8C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  BOOL v5;
  BOOL v6;
  BOOL v8;
  BOOL v9;
  uint64_t v10;
  __int16 v11;

  v3 = a1 + 48;
  v2 = *(_QWORD *)(a1 + 48);
  v10 = a1 + 48;
  (*(void (**)(uint64_t))(v2 + 16))(a1 + 48);
  v11 = 256;
  v9 = 0;
  sub_1001E4874(*(_QWORD *)(v3 - 24), "LogDumpOnUnload", &v9);
  v4 = v9;
  if (*(_BYTE *)(a1 + 9))
    v5 = !v9;
  else
    v5 = 0;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v4 = v9;
  }
  *(_BYTE *)(a1 + 9) = v4;
  sub_1001E4B84(*(_QWORD *)(a1 + 24), "LogFileRotationSize", (_DWORD *)(a1 + 12));
  sub_1001E4B84(*(_QWORD *)(a1 + 24), "LogFileStorageCount", (_DWORD *)(a1 + 16));
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v8 = 0;
  sub_1001E4874(*(_QWORD *)(a1 + 24), "LogDumpOnLoad", &v8);
  v6 = v8;
  if (!*(_BYTE *)(a1 + 8) && v8)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v6 = v8;
  }
  *(_BYTE *)(a1 + 8) = v6;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 48) + 24))(v3);
}

void sub_101224DB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_101224DC8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  if (qword_10230D870 != -1)
    dispatch_once(&qword_10230D870, &stru_1021A9B98);
  return sub_1015A2E04(a2, (char *)objc_msgSend(objc_msgSend((id)qword_10230D868, "stringFromDate:", a1), "UTF8String"));
}

void sub_101224E2C(id a1)
{
  qword_10230D868 = objc_opt_new(NSDateFormatter);
  objc_msgSend((id)qword_10230D868, "setDateFormat:", CFSTR("yyyy-MM-dd_HH-mm-ss"));
}

void sub_101224E58(uint64_t a1@<X8>)
{
  unsigned __int8 v2;

  v2 = atomic_load((unsigned __int8 *)&qword_10230D890);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_10230D890))
  {
    xmmword_10230D878 = 0uLL;
    unk_10230D888 = 0;
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10230D878, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10230D890);
  }
  if (qword_10230D898 != -1)
    dispatch_once(&qword_10230D898, &stru_1021A9BB8);
  if (byte_10230D88F < 0)
  {
    sub_100115CE4((_BYTE *)a1, (void *)xmmword_10230D878, *((unint64_t *)&xmmword_10230D878 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_10230D878;
    *(_QWORD *)(a1 + 16) = unk_10230D888;
  }
}

void sub_101224F30(id a1)
{
  std::string::assign((std::string *)&xmmword_10230D878, "/Library/Logs/CrashReporter/com.apple.locationd");
}

void sub_101224F44(uint64_t a1@<X8>)
{
  unsigned __int8 v2;

  v2 = atomic_load((unsigned __int8 *)&qword_10230D8B8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_10230D8B8))
  {
    xmmword_10230D8A0 = 0uLL;
    unk_10230D8B0 = 0;
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10230D8A0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10230D8B8);
  }
  if (qword_10230D8C0 != -1)
    dispatch_once(&qword_10230D8C0, &stru_1021A9BD8);
  if (byte_10230D8B7 < 0)
  {
    sub_100115CE4((_BYTE *)a1, (void *)xmmword_10230D8A0, *((unint64_t *)&xmmword_10230D8A0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_10230D8A0;
    *(_QWORD *)(a1 + 16) = unk_10230D8B0;
  }
}

void sub_10122501C(id a1)
{
  void **v1;
  void *v2[2];
  char v3;
  void *__p[2];
  char v5;

  sub_1015A2E04(v2, "mobile");
  sub_100584960((uint64_t *)v2, __p);
  if (v5 >= 0)
    v1 = __p;
  else
    v1 = (void **)__p[0];
  std::string::assign((std::string *)&xmmword_10230D8A0, -[NSString UTF8String](-[NSString stringByAppendingPathComponent:](+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v1), "stringByAppendingPathComponent:", objc_msgSend(&off_102220A50, "componentsJoinedByString:", CFSTR("/"))), "UTF8String"));
  if (v5 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
}

void sub_1012250D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_101225108(uint64_t a1@<X8>)
{
  unsigned __int8 v2;

  v2 = atomic_load((unsigned __int8 *)&qword_10230D8E0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_10230D8E0))
  {
    xmmword_10230D8C8 = 0uLL;
    unk_10230D8D8 = 0;
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10230D8C8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10230D8E0);
  }
  if (qword_10230D8E8 != -1)
    dispatch_once(&qword_10230D8E8, &stru_1021A9BF8);
  if (byte_10230D8DF < 0)
  {
    sub_100115CE4((_BYTE *)a1, (void *)xmmword_10230D8C8, *((unint64_t *)&xmmword_10230D8C8 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_10230D8C8;
    *(_QWORD *)(a1 + 16) = unk_10230D8D8;
  }
}

void sub_1012251E0(id a1)
{
  void **v1;
  void *v2[2];
  char v3;
  void *__p[2];
  char v5;

  sub_1015A2E04(v2, "mobile");
  sub_100584960((uint64_t *)v2, __p);
  if (v5 >= 0)
    v1 = __p;
  else
    v1 = (void **)__p[0];
  std::string::assign((std::string *)&xmmword_10230D8C8, -[NSString UTF8String](-[NSString stringByAppendingPathComponent:](+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v1), "stringByAppendingPathComponent:", objc_msgSend(&off_102220A68, "componentsJoinedByString:", CFSTR("/"))), "UTF8String"));
  if (v5 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
}

void sub_101225298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1012252CC(const void **a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, std::string *a5@<X8>)
{
  size_t v10;
  std::string *v11;
  const void *v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  void **v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  int v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  void *__p[2];
  unsigned __int8 v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;

  if (*((char *)a1 + 23) >= 0)
    v10 = *((unsigned __int8 *)a1 + 23);
  else
    v10 = (size_t)a1[1];
  v11 = &v30;
  sub_100259584((uint64_t)&v30, v10 + 1);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v11 = (std::string *)v30.__r_.__value_.__r.__words[0];
  if (v10)
  {
    if (*((char *)a1 + 23) >= 0)
      v12 = a1;
    else
      v12 = *a1;
    memmove(v11, v12, v10);
  }
  *(_WORD *)((char *)&v11->__r_.__value_.__l.__data_ + v10) = 47;
  v13 = *(char *)(a2 + 23);
  if (v13 >= 0)
    v14 = (const std::string::value_type *)a2;
  else
    v14 = *(const std::string::value_type **)a2;
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(a2 + 23);
  else
    v15 = *(_QWORD *)(a2 + 8);
  v16 = std::string::append(&v30, v14, v15);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = std::string::append(&v31, "_");
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  sub_101224DC8(a4, __p);
  if ((v29 & 0x80u) == 0)
    v20 = __p;
  else
    v20 = (void **)__p[0];
  if ((v29 & 0x80u) == 0)
    v21 = v29;
  else
    v21 = (std::string::size_type)__p[1];
  v22 = std::string::append(&v32, (const std::string::value_type *)v20, v21);
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  v24 = *(char *)(a3 + 23);
  if (v24 >= 0)
    v25 = (const std::string::value_type *)a3;
  else
    v25 = *(const std::string::value_type **)a3;
  if (v24 >= 0)
    v26 = *(unsigned __int8 *)(a3 + 23);
  else
    v26 = *(_QWORD *)(a3 + 8);
  v27 = std::string::append(&v33, v25, v26);
  *a5 = *v27;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if ((char)v29 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
}

void sub_1012254A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 73) < 0)
    operator delete(*(void **)(v33 - 96));
  if (a14 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_101225524(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  char *v8;
  void *v9[2];
  char v10;
  void *__p[2];
  char v12;

  sub_101224E58((uint64_t)v9);
  if (v10 >= 0)
    v8 = (char *)v9;
  else
    v8 = (char *)v9[0];
  sub_1015A2E04(__p, v8);
  sub_1012252CC((const void **)__p, a2, a1 + 112, a3, a4);
  if (v12 < 0)
    operator delete(__p[0]);
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1012255C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void sub_1012255F4(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  char *v4;
  void *v5[2];
  char v6;
  void *__p[2];
  char v8;

  sub_101225108((uint64_t)v5);
  if (v6 >= 0)
    v4 = (char *)v5;
  else
    v4 = (char *)v5[0];
  sub_1015A2E04(__p, v4);
  sub_1012252CC((const void **)__p, a1 + 88, a1 + 112, (uint64_t)+[NSDate date](NSDate, "date"), a2);
  if (v8 < 0)
    operator delete(__p[0]);
  if (v6 < 0)
    operator delete(v5[0]);
}

void sub_10122568C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

NSDate *sub_1012256C0()
{
  return +[NSDate date](NSDate, "date");
}

uint64_t sub_1012256CC(uint64_t a1, char **a2, char *a3)
{
  char *v3;
  char *v4;
  int v5;
  char *v6;
  int64_t v7;
  char *v8;
  char *v9;
  int v12;
  void *v13;
  char *v14;
  char *v15;

  v3 = (char *)*((unsigned __int8 *)a2 + 23);
  if ((char)v3 >= 0)
    v4 = (char *)a2;
  else
    v4 = *a2;
  v5 = a3[23];
  if (v5 >= 0)
    v6 = a3;
  else
    v6 = *(char **)a3;
  if (v5 >= 0)
    v7 = a3[23];
  else
    v7 = *((_QWORD *)a3 + 1);
  if (!v7)
    return 1;
  if ((char)v3 < 0)
    v3 = a2[1];
  v8 = &v3[(_QWORD)v4];
  if ((uint64_t)v3 >= v7)
  {
    v12 = *v6;
    v13 = v4;
    do
    {
      v14 = &v3[-v7];
      if (v14 == (char *)-1)
        break;
      v15 = (char *)memchr(v13, v12, (size_t)(v14 + 1));
      if (!v15)
        break;
      v9 = v15;
      if (!memcmp(v15, v6, v7))
        return v9 != v8 && v9 == v4;
      v13 = v9 + 1;
      v3 = (char *)(v8 - (v9 + 1));
    }
    while ((uint64_t)v3 >= v7);
  }
  v9 = v8;
  return v9 != v8 && v9 == v4;
}

unint64_t sub_1012257A0(uint64_t a1, void **a2, char *a3)
{
  unint64_t v3;
  char v4;
  int64_t v5;
  char *v6;
  char *v7;
  unint64_t result;
  char *v9;
  char *v10;
  int64_t v11;
  char *v12;
  int v14;
  int64_t v15;
  char *v16;

  v3 = *((unsigned __int8 *)a2 + 23);
  v4 = a3[23];
  if (v4 >= 0)
    v5 = a3[23];
  else
    v5 = *((_QWORD *)a3 + 1);
  if (v4 >= 0)
    v6 = a3;
  else
    v6 = *(char **)a3;
  if ((v3 & 0x80u) == 0)
  {
    v7 = (char *)a2;
  }
  else
  {
    v3 = (unint64_t)a2[1];
    v7 = (char *)*a2;
  }
  result = v3 == v5;
  if (v3 < result)
    return 1;
  if (v5)
  {
    v9 = &v7[result];
    v10 = &v7[v3];
    v11 = &v7[v3] - v9;
    if (v11 >= v5)
    {
      v14 = *v6;
      do
      {
        v15 = v11 - v5;
        if (v15 == -1)
          break;
        v16 = (char *)memchr(v9, v14, v15 + 1);
        if (!v16)
          break;
        v12 = v16;
        if (!memcmp(v16, v6, v5))
          return v12 != v7 || v12 == v10;
        v9 = v12 + 1;
        v11 = v10 - (v12 + 1);
      }
      while (v11 >= v5);
    }
    v12 = v10;
    return v12 != v7 || v12 == v10;
  }
  return result;
}

BOOL sub_10122587C(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  const char *v4;
  const char *v5;
  const char *v6;
  off_t st_size;
  FILE *v8;
  std::string *p_p;
  FILE *v10;
  uint64_t v11;
  size_t v12;
  size_t v13;
  _BOOL8 v14;
  std::string *v15;
  std::string __p;
  stat v18;
  uint64_t v19;
  __int16 v20;
  _BYTE __ptr[1024];

  v3 = (char *)(a1 + 48);
  v2 = *(_QWORD *)(a1 + 48);
  v19 = a1 + 48;
  (*(void (**)(uint64_t))(v2 + 16))(a1 + 48);
  v20 = 256;
  v4 = v3 + 88;
  v5 = v3 + 88;
  if (v3[111] < 0)
    v5 = *(const char **)v4;
  if (stat(v5, &v18) == -1)
  {
    v14 = 1;
  }
  else
  {
    v6 = v3 + 88;
    if (*(char *)(a1 + 159) < 0)
      v6 = *(const char **)v4;
    st_size = v18.st_size;
    v8 = fopen(v6, "r");
    if (v8)
    {
      sub_1012255F4(a1, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      v10 = fopen((const char *)p_p, "w");
      if (v10)
      {
        v11 = 0;
        if (!feof(v8))
        {
          while (1)
          {
            v13 = fread(__ptr, 1uLL, 0x400uLL, v8);
            if (!v13)
              break;
            v12 = fwrite(__ptr, 1uLL, v13, v10);
            v11 += v12;
            if (feof(v8) || !v12)
              goto LABEL_17;
          }
          feof(v8);
        }
LABEL_17:
        v14 = v11 == st_size;
        fflush(v10);
        fclose(v10);
      }
      else
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v15 = &__p;
        else
          v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
        syslog(5, "%s,%s,failed to open %s\n", "NOTICE", "CLLog", (const char *)v15);
        v14 = 0;
      }
      fclose(v8);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      if (*(char *)(a1 + 159) < 0)
        v4 = *(const char **)v4;
      syslog(5, "%s,%s,failed to open %s\n", "NOTICE", "CLLog", v4);
      v14 = 0;
    }
  }
  (*(void (**)(char *))(*(_QWORD *)v3 + 24))(v3);
  return v14;
}

void sub_101225AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  sub_10187E514((uint64_t)&a36);
  _Unwind_Resume(a1);
}

uint64_t sub_101225AF8(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v4 = sub_100524E68((_QWORD *)a1, a2);
  *v4 = off_102143C48;
  *((_BYTE *)v4 + 16) = *(_BYTE *)(a2 + 16);
  if (*(char *)(a2 + 47) < 0)
  {
    sub_100115CE4((_BYTE *)v4 + 24, *(void **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 24);
    v4[5] = *(_QWORD *)(a2 + 40);
    *(_OWORD *)(v4 + 3) = v5;
  }
  if (*(char *)(a2 + 71) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 48), *(void **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = v6;
  }
  v7 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 81) = *(_OWORD *)(a2 + 81);
  *(_OWORD *)(a1 + 72) = v7;
  sub_100524E68((_QWORD *)(a1 + 104), a2 + 104);
  *(_QWORD *)(a1 + 104) = &off_102144010;
  sub_100524E68((_QWORD *)(a1 + 120), a2 + 120);
  *(_QWORD *)(a1 + 120) = &off_102144010;
  return a1;
}

void sub_101225BE8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  sub_10011A56C((_QWORD *)v1);
  _Unwind_Resume(a1);
}

void sub_101225C3C(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

double sub_101225C68(uint64_t a1, _QWORD *a2)
{
  double result;

  *(_QWORD *)a1 = *a2;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  return result;
}

uint64_t sub_101225C88(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  BOOL v6;
  uint64_t v7;
  double v8;
  double v9;
  BOOL v10;
  double v11;
  NSObject *v12;
  uint64_t v13;
  void **v14;
  NSObject *v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  char *v25;
  uint64_t v26;
  _BYTE buf[12];
  __int16 v28;
  void **v29;
  char v30;
  int v31;
  uint64_t v32;
  __int16 v33;
  _BYTE *v34;
  void *__p[2];
  char v36;

  result = sub_100182290(a2);
  if ((_DWORD)result)
  {
    v5 = *(_DWORD *)(a2 + 96);
    v6 = v5 == 10 || v5 == 1;
    if (!v6 || *(double *)(a2 + 20) > 30.0 || sub_100B942D8(a2) > *(double *)a1)
      return 0;
    v7 = *(_QWORD *)(a1 + 48);
    if (v7
      && ((v8 = *(double *)(a2 + 76),
           v9 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * ((v7 + *(_QWORD *)(a1 + 40) - 1) / 0x1AuLL))
                          + 156 * ((v7 + *(_QWORD *)(a1 + 40) - 1) % 0x1AuLL)
                          + 76),
           v8 >= v9)
        ? (v10 = v8 - v9 < 1.0)
        : (v10 = 1),
          v10))
    {
      return 0;
    }
    else
    {
      sub_100D5FC68((_QWORD *)(a1 + 8), a2);
      while (*(_QWORD *)(a1 + 48))
      {
        if (sub_100B942D8(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * (*(_QWORD *)(a1 + 40) / 0x1AuLL))+ 156 * (*(_QWORD *)(a1 + 40) % 0x1AuLL)) <= *(double *)a1)break;
        *(int64x2_t *)(a1 + 40) = vaddq_s64(*(int64x2_t *)(a1 + 40), (int64x2_t)xmmword_101B9DFC0);
        sub_10047F918(a1 + 8, 1);
      }
      v11 = sub_1001FCBB4();
      if (v11 - *(double *)(a1 + 56) >= 10.0)
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021A9C60);
        v12 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
        {
          v13 = *(_QWORD *)(a1 + 48);
          sub_100B9444C(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * ((v13 + *(_QWORD *)(a1 + 40) - 1) / 0x1AuLL))+ 156 * ((v13 + *(_QWORD *)(a1 + 40) - 1) % 0x1AuLL), __p);
          v14 = v36 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)buf = 134349315;
          *(_QWORD *)&buf[4] = v13;
          v28 = 2081;
          v29 = v14;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "CLReferenceLocations, size %{public}zu, latest ref location %{private}s", buf, 0x16u);
          if (v36 < 0)
            operator delete(__p[0]);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021A9C60);
          v18 = qword_1022A0028;
          v19 = *(_QWORD *)(a1 + 48);
          sub_100B9444C(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * ((v19 + *(_QWORD *)(a1 + 40) - 1) / 0x1AuLL))+ 156 * ((v19 + *(_QWORD *)(a1 + 40) - 1) % 0x1AuLL), buf);
          if (v30 >= 0)
            v20 = buf;
          else
            v20 = *(_BYTE **)buf;
          v31 = 134349315;
          v32 = v19;
          v33 = 2081;
          v34 = v20;
          v21 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v18, 2, "CLReferenceLocations, size %{public}zu, latest ref location %{private}s", &v31, 22);
          if (v30 < 0)
            operator delete(*(void **)buf);
          sub_100512490("Generic", 1, 0, 2, "BOOL CLReferenceLocations::receiveLocation(const CLDaemonLocation &)", "%s\n", v21);
          if (v21 != (char *)__p)
            free(v21);
        }
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021A9C60);
        v15 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
        {
          v16 = *(_QWORD *)(a1 + 48);
          sub_100B9444C(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * (*(_QWORD *)(a1 + 40) / 0x1AuLL))+ 156 * (*(_QWORD *)(a1 + 40) % 0x1AuLL), __p);
          v17 = v36 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)buf = 134349315;
          *(_QWORD *)&buf[4] = v16;
          v28 = 2081;
          v29 = v17;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "CLReferenceLocations, size %{public}zu, oldest ref location %{private}s", buf, 0x16u);
          if (v36 < 0)
            operator delete(__p[0]);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021A9C60);
          v22 = qword_1022A0028;
          v23 = *(_QWORD *)(a1 + 48);
          sub_100B9444C(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * (*(_QWORD *)(a1 + 40) / 0x1AuLL))+ 156 * (*(_QWORD *)(a1 + 40) % 0x1AuLL), buf);
          if (v30 >= 0)
            v24 = buf;
          else
            v24 = *(_BYTE **)buf;
          v31 = 134349315;
          v32 = v23;
          v33 = 2081;
          v34 = v24;
          LODWORD(v26) = 22;
          v25 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v22, 2, "CLReferenceLocations, size %{public}zu, oldest ref location %{private}s", &v31, v26);
          if (v30 < 0)
            operator delete(*(void **)buf);
          sub_100512490("Generic", 1, 0, 2, "BOOL CLReferenceLocations::receiveLocation(const CLDaemonLocation &)", "%s\n", v25);
          if (v25 != (char *)__p)
            free(v25);
        }
        *(double *)(a1 + 56) = v11;
      }
      return 1;
    }
  }
  return result;
}

void sub_1012262A8(_QWORD *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  double v15;
  double v16;
  double v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  int v30;
  uint64_t v31;
  __int16 v32;
  double v33;
  uint8_t buf[4];
  uint64_t v35;
  __int16 v36;
  double v37;

  v3 = a1[6];
  *(_DWORD *)a3 = 0xFFFF;
  *(_QWORD *)(a3 + 12) = 0;
  *(_QWORD *)(a3 + 4) = 0;
  *(_OWORD *)(a3 + 20) = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a3 + 36) = _Q0;
  *(_OWORD *)(a3 + 52) = _Q0;
  *(_OWORD *)(a3 + 68) = _Q0;
  *(_DWORD *)(a3 + 84) = 0;
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 88) = 0xBFF0000000000000;
  *(_DWORD *)(a3 + 112) = 0;
  *(_QWORD *)(a3 + 116) = 0xBFF0000000000000;
  *(_DWORD *)(a3 + 124) = 0x7FFFFFFF;
  *(_QWORD *)(a3 + 136) = 0;
  *(_QWORD *)(a3 + 144) = 0;
  *(_QWORD *)(a3 + 128) = 0;
  *(_BYTE *)(a3 + 152) = 0;
  if (v3)
  {
    v10 = a1[2];
    if (a1[3] == v10
      || (v11 = a1[5],
          v12 = *(_QWORD *)(v10 + 8 * (v11 / 0x1A)) + 156 * (v11 % 0x1A),
          v13 = *(_QWORD *)(v10 + 8 * ((v3 + v11) / 0x1A)) + 156 * ((v3 + v11) % 0x1A),
          v12 == v13))
    {
      v16 = 1.79769313e308;
    }
    else
    {
      v14 = (_QWORD *)(v10 + 8 * (v11 / 0x1A));
      v15 = *a2;
      v16 = 1.79769313e308;
      do
      {
        v17 = vabdd_f64(v15, *(double *)(v12 + 76));
        if (v16 > v17)
        {
          v18 = *(_OWORD *)(v12 + 16);
          *(_OWORD *)a3 = *(_OWORD *)v12;
          *(_OWORD *)(a3 + 16) = v18;
          v19 = *(_OWORD *)(v12 + 32);
          v20 = *(_OWORD *)(v12 + 48);
          v21 = *(_OWORD *)(v12 + 80);
          *(_OWORD *)(a3 + 64) = *(_OWORD *)(v12 + 64);
          *(_OWORD *)(a3 + 80) = v21;
          *(_OWORD *)(a3 + 32) = v19;
          *(_OWORD *)(a3 + 48) = v20;
          v22 = *(_OWORD *)(v12 + 96);
          v23 = *(_OWORD *)(v12 + 112);
          v24 = *(_OWORD *)(v12 + 128);
          *(_OWORD *)(a3 + 140) = *(_OWORD *)(v12 + 140);
          *(_OWORD *)(a3 + 112) = v23;
          *(_OWORD *)(a3 + 128) = v24;
          *(_OWORD *)(a3 + 96) = v22;
          v16 = v17;
        }
        v12 += 156;
        if (v12 - *v14 == 4056)
        {
          v25 = v14[1];
          ++v14;
          v12 = v25;
        }
      }
      while (v12 != v13);
    }
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021A9C60);
    v26 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v27 = a1[6];
      *(_DWORD *)buf = 134349312;
      v35 = v27;
      v36 = 2050;
      v37 = v16;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "CLReferenceLocations, size %{public}zu, found closest reference location with timestamp delta %{public}.1f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021A9C60);
      v28 = a1[6];
      v30 = 134349312;
      v31 = v28;
      v32 = 2050;
      v33 = v16;
      v29 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "CLReferenceLocations, size %{public}zu, found closest reference location with timestamp delta %{public}.1f", &v30, 22);
      sub_100512490("Generic", 1, 0, 2, "CLDaemonLocation CLReferenceLocations::getClosestReferenceLocation(const CFAbsoluteTime &) const", "%s\n", v29);
      if (v29 != (char *)buf)
        free(v29);
    }
  }
}

void sub_1012265B4(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

uint64_t sub_1012265E0(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  int v7;

  v7 = a2;
  v5 = (_QWORD *)sub_10080E4E4(a1, &v7, a3, a4);
  *v5 = off_1021A9FA8;
  v5[41] = 0;
  *(_QWORD *)((char *)v5 + 334) = 0;
  v5[43] = 0;
  v5[44] = 0;
  v5[47] = 0;
  v5[48] = 0;
  v5[45] = 0;
  v5[46] = v5 + 47;
  sub_100197040();
  *(_BYTE *)(a1 + 392) = sub_10075D288();
  return a1;
}

void sub_101226664(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  _QWORD **v4;
  void **v5;
  void *v7;

  v5 = v3;
  sub_100008848(v2, *v4);
  v7 = *v5;
  if (*v5)
  {
    *(_QWORD *)(v1 + 352) = v7;
    operator delete(v7);
  }
  sub_100FA05F0(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_101226698(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  result = (_QWORD *)sub_1012265E0(a1, 3, qword_10230D8F0, a2);
  *result = off_1021A9C90;
  return result;
}

uint64_t sub_1012266CC(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  int v7;

  v7 = a2;
  v5 = (_QWORD *)sub_10080E4E4(a1, &v7, a3, a4);
  *v5 = off_1021AA080;
  v5[41] = 0;
  *(_QWORD *)((char *)v5 + 334) = 0;
  v5[43] = 0;
  v5[44] = 0;
  v5[47] = 0;
  v5[48] = 0;
  v5[45] = 0;
  v5[46] = v5 + 47;
  sub_100197040();
  *(_BYTE *)(a1 + 392) = sub_10075D288();
  return a1;
}

void sub_101226750(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  _QWORD **v4;
  void **v5;
  void *v7;

  v5 = v3;
  sub_100008848(v2, *v4);
  v7 = *v5;
  if (*v5)
  {
    *(_QWORD *)(v1 + 352) = v7;
    operator delete(v7);
  }
  sub_100FA05F0(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_101226784(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  result = (_QWORD *)sub_1012266CC(a1, 5, qword_10230D8F0, a2);
  *result = off_1021A9D68;
  return result;
}

uint64_t sub_1012267B8(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  int v7;

  v7 = a2;
  v5 = (_QWORD *)sub_10080E4E4(a1, &v7, a3, a4);
  *v5 = &off_1021AA158;
  v5[41] = 0;
  *(_QWORD *)((char *)v5 + 334) = 0;
  v5[43] = 0;
  v5[44] = 0;
  v5[47] = 0;
  v5[48] = 0;
  v5[45] = 0;
  v5[46] = v5 + 47;
  sub_100197040();
  *(_BYTE *)(a1 + 392) = sub_10075D288();
  return a1;
}

void sub_10122683C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  _QWORD **v4;
  void **v5;
  void *v7;

  v5 = v3;
  sub_100008848(v2, *v4);
  v7 = *v5;
  if (*v5)
  {
    *(_QWORD *)(v1 + 352) = v7;
    operator delete(v7);
  }
  sub_100FA05F0(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_101226870(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  result = (_QWORD *)sub_1012267B8(a1, 4, qword_10230D8F0, a2);
  *result = off_1021A9E40;
  return result;
}

void sub_1012268A8(uint64_t a1)
{
  sub_101230C94(a1);
  operator delete();
}

uint64_t sub_1012268CC()
{
  return 350;
}

double sub_1012268D4()
{
  return 2.0;
}

uint64_t sub_1012268DC()
{
  return 0x10000;
}

uint64_t sub_1012268E4(uint64_t a1, std::string::value_type *a2)
{
  double Current;
  NSObject *v5;
  uint64_t v6;
  __int128 v7;
  const char *v8;
  uint64_t v9;
  clock_t v10;
  int v11;
  clock_t v12;
  clock_t v13;
  int v14;
  clock_t v15;
  int v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  const char *v22;
  const char *v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  char *v30;
  char *v31;
  NSObject *v32;
  int v34;
  const char *v35;
  const char *v36;
  uint8_t *v37;
  const char *v38;
  uint8_t *v39;
  uint64_t v40;
  __int128 v41;
  double v42;
  const char *v43;
  void *v44[2];
  char v45;
  uint64_t v46;
  uint64_t v47;
  _WORD v48[8];
  _QWORD v49[2];
  unsigned int v50[4];
  const char *v51;
  _QWORD *v52;
  uint64_t v53;
  _BYTE __p[28];
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  void **v60;
  uint8_t buf[4];
  _BYTE v62[24];
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  _BYTE *v68;

  Current = CFAbsoluteTimeGetCurrent();
  sub_100FA29E4(a1, a2);
  sub_100FA5198((uint64_t *)a1, "", a2, *(_DWORD *)(a1 + 48), 0, Current);
  sub_101230D78((uint64_t *)&v51, a1 + 368);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021AA220);
  v5 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134218242;
    *(_QWORD *)v62 = v53;
    *(_WORD *)&v62[8] = 2080;
    *(_QWORD *)&v62[10] = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "TILE: result: tilestool: TEST_testBinarySearch, entries, %lu, file, %s", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AA220);
    *(_DWORD *)__p = 134218242;
    *(_QWORD *)&__p[4] = v53;
    *(_WORD *)&__p[12] = 2080;
    *(_QWORD *)&__p[14] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: result: tilestool: TEST_testBinarySearch, entries, %lu, file, %s", __p, 22);
    v37 = (uint8_t *)v36;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_GSM, CLTilesManager_Type::KeyLatLonEntry_GSM>::TEST_testBinarySearch(const char *) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_GSM, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_GSM]", "%s\n", v36);
    if (v37 != buf)
      free(v37);
  }
  v6 = a1 + 376;
  sub_100008848(a1 + 368, *(_QWORD **)(a1 + 376));
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 368) = a1 + 376;
  v8 = v51;
  v43 = (const char *)&v52;
  if (v51 != (const char *)&v52)
  {
    v9 = 0;
    *(_QWORD *)&v7 = 134219266;
    v41 = v7;
    while (1)
    {
      *(_QWORD *)v50 = *(_QWORD *)(v8 + 25);
      *(_QWORD *)((char *)&v50[1] + 2) = *(_QWORD *)(v8 + 31);
      memset(v49, 0, 14);
      v47 = 0;
      memset(v48, 0, 14);
      v46 = 0;
      sub_100008848(a1 + 368, *(_QWORD **)(a1 + 376));
      *(_QWORD *)(a1 + 376) = 0;
      *(_QWORD *)(a1 + 384) = 0;
      *(_QWORD *)(a1 + 368) = v6;
      v10 = clock();
      v11 = (*(uint64_t (**)(uint64_t, unsigned int *, _QWORD *))(*(_QWORD *)a1 + 192))(a1, v50, v49);
      v12 = clock();
      sub_100008848(a1 + 368, *(_QWORD **)(a1 + 376));
      *(_QWORD *)(a1 + 376) = 0;
      *(_QWORD *)(a1 + 384) = 0;
      *(_QWORD *)(a1 + 368) = v6;
      v13 = clock();
      v14 = (*(uint64_t (**)(uint64_t, unsigned int *, _WORD *))(*(_QWORD *)a1 + 184))(a1, v50, v48);
      v15 = clock();
      printf("tilestool: mmap, %lu, file, %lu\n", v15 - v13, v12 - v10);
      if (v11 != v14)
        break;
      v16 = (*(uint64_t (**)(uint64_t, unsigned int *, _QWORD *))(*(_QWORD *)a1 + 176))(a1, v50, v49);
      if (v16)
        sub_100FA6940(a1, LOWORD(v49[1]), WORD1(v49[1]), (double *)&v47, (double *)&v46);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AA220);
      v17 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        v18 = v53;
        v19 = v46;
        v20 = v47;
        sub_100F9F51C(v50, __p);
        v21 = __p;
        if (__p[23] < 0)
          v21 = *(_BYTE **)__p;
        *(_DWORD *)buf = v41;
        *(_QWORD *)v62 = v9;
        *(_WORD *)&v62[8] = 2048;
        *(_QWORD *)&v62[10] = v18;
        *(_WORD *)&v62[18] = 1024;
        *(_DWORD *)&v62[20] = v16;
        v63 = 2048;
        v64 = v20;
        v65 = 2048;
        v66 = v19;
        v67 = 2080;
        v68 = v21;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "TILE: result: tilestool: prog, %3lu, %3lu, ===============> isFound, %d, location, %14.8lf, %14.8lf, entry, %s", buf, 0x3Au);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021AA220);
        v25 = qword_1022A02D8;
        v26 = v53;
        v27 = v46;
        v28 = v47;
        sub_100F9F51C(v50, v44);
        v29 = v44;
        if (v45 < 0)
          v29 = (void **)v44[0];
        *(_DWORD *)__p = v41;
        *(_QWORD *)&__p[4] = v9;
        *(_WORD *)&__p[12] = 2048;
        *(_QWORD *)&__p[14] = v26;
        *(_WORD *)&__p[22] = 1024;
        *(_DWORD *)&__p[24] = v16;
        v55 = 2048;
        v56 = v28;
        v57 = 2048;
        v58 = v27;
        v59 = 2080;
        v60 = v29;
        LODWORD(v40) = 58;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v25, 2, "TILE: result: tilestool: prog, %3lu, %3lu, ===============> isFound, %d, location, %14.8lf, %14.8lf, entry, %s", __p, v40, (_DWORD)v41, *((double *)&v41 + 1), v42, v43);
        v31 = v30;
        if (v45 < 0)
          operator delete(v44[0]);
        sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_GSM, CLTilesManager_Type::KeyLatLonEntry_GSM>::TEST_testBinarySearch(const char *) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_GSM, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_GSM]", "%s\n", v31);
        if (v31 != (char *)buf)
          free(v31);
      }
      if (!v16)
      {
        v34 = 759;
        v35 = "isFound";
LABEL_44:
        __assert_rtn("TEST_testBinarySearch", "CLKeyLatLonTileTemplate.h", v34, v35);
      }
      v22 = (const char *)*((_QWORD *)v8 + 1);
      if (v22)
      {
        do
        {
          v23 = v22;
          v22 = *(const char **)v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (const char *)*((_QWORD *)v8 + 2);
          v24 = *(_QWORD *)v23 == (_QWORD)v8;
          v8 = v23;
        }
        while (!v24);
      }
      ++v9;
      v8 = v23;
      if (v23 == v43)
        goto LABEL_36;
    }
    v34 = 742;
    v35 = "isFound == isFoundMmap";
    goto LABEL_44;
  }
  v9 = 0;
LABEL_36:
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021AA220);
  v32 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109632;
    *(_DWORD *)v62 = 1;
    *(_WORD *)&v62[4] = 2048;
    *(_QWORD *)&v62[6] = v9;
    *(_WORD *)&v62[14] = 2048;
    *(_QWORD *)&v62[16] = v53;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "TILE: result: tilestool: pass, %d, tests, %lu, %lu", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AA220);
    *(_QWORD *)__p = 0x104000300;
    *(_WORD *)&__p[8] = 2048;
    *(_QWORD *)&__p[10] = v9;
    *(_WORD *)&__p[18] = 2048;
    *(_QWORD *)&__p[20] = v53;
    LODWORD(v40) = 28;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: result: tilestool: pass, %d, tests, %lu, %lu", __p, v40, (_QWORD)v41);
    v39 = (uint8_t *)v38;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_GSM, CLTilesManager_Type::KeyLatLonEntry_GSM>::TEST_testBinarySearch(const char *) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_GSM, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_GSM]", "%s\n", v38);
    if (v39 != buf)
      free(v39);
  }
  sub_100008848((uint64_t)&v51, v52);
  return 1;
}

void sub_10122709C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,_QWORD *a27)
{
  sub_100008848((uint64_t)&a26, a27);
  _Unwind_Resume(a1);
}

void sub_1012270F0(uint64_t a1)
{
  sub_100FA0654(a1);
  sub_100008848(a1 + 368, *(_QWORD **)(a1 + 376));
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 368) = a1 + 376;
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a1 + 344);
}

void sub_101227130(uint64_t a1, FILE *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  _QWORD *v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  int8x8_t *v15;
  int8x8_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  int8x8_t *v23;
  int8x8_t v24;
  _DWORD *v25;
  _DWORD *v26;
  int8x8_t *v27;
  int8x8_t v28;
  __int32 v29;
  NSObject *v30;
  int v31;
  _BYTE *v32;
  uint64_t v33;
  int v34;
  void **v35;
  char *v36;
  char *v37;
  uint64_t **v38;
  _BOOL4 v39;
  int v40;
  int v41;
  unsigned int v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  const char *v48;
  __int128 v49;
  unint64_t v50;
  NSObject *v51;
  int v52;
  uint64_t v53;
  uint64_t **v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  double v59;
  int v60;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  void **v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  double v69;
  int v70;
  int v71;
  char *v72;
  char *v73;
  _BOOL4 v74;
  NSObject *v75;
  _BYTE *v76;
  NSObject *v77;
  int v78;
  uint64_t v79;
  _BYTE *v80;
  char *v81;
  char *v82;
  const char *v83;
  uint8_t *v84;
  const char *v85;
  uint8_t *v86;
  uint64_t v87;
  const char *v88;
  uint64_t **v89;
  const char *v90;
  __int128 v91;
  double v92;
  double v93;
  uint64_t v94;
  uint64_t v95;
  int8x8_t v96[2];
  void *v97[2];
  char v98;
  uint64_t v99;
  _BYTE v100[40];
  uint64_t v101;
  __int16 v102;
  uint64_t v103;
  __int16 v104;
  double v105;
  __int16 v106;
  double v107;
  __int16 v108;
  int v109;
  __int16 v110;
  int v111;
  _BYTE __p[20];
  void **v113;
  uint64_t v114;
  uint64_t v115;
  uint8_t buf[4];
  _BYTE v117[10];
  _BYTE v118[14];
  __int16 v119;
  _BYTE *v120;
  __int16 v121;
  uint64_t v122;
  __int16 v123;
  uint64_t v124;
  __int16 v125;
  double v126;
  __int16 v127;
  double v128;
  __int16 v129;
  int v130;
  __int16 v131;
  int v132;

  v9 = a1;
  sub_100810AD4(a1, (uint64_t)a2, a3);
  v99 = 0;
  v10 = *(unsigned __int16 *)(a3 + 2);
  if (v10 != 7)
  {
    if (v10 == 6)
    {
      *(_QWORD *)v100 = 0x200006ABBALL;
      memset(&v100[8], 0, 32);
      LODWORD(v101) = 0;
      sub_100F9FC20(a4, (uint64_t)v100);
      v11 = (_QWORD *)(v9 + 344);
      *(_QWORD *)(v9 + 352) = *(_QWORD *)(v9 + 344);
      sub_101231100((char **)(v9 + 344), *(unsigned int *)&v100[12]);
      v12 = (char *)sub_100812460(v9, a2, a3, 0, *(int *)&v100[12], *(int *)&v100[16]);
      if (v12)
      {
        v96[0] = 0;
        v96[1].i32[0] = 0;
        if (*(_DWORD *)&v100[12])
        {
          v13 = 0;
          do
          {
            sub_100F9F658((int8x8_t *)&v12[v13 * *(unsigned int *)&v100[16]], v96);
            v15 = *(int8x8_t **)(v9 + 352);
            v14 = *(_QWORD *)(v9 + 360);
            if ((unint64_t)v15 >= v14)
            {
              v18 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v15 - *v11) >> 2);
              v19 = v18 + 1;
              if (v18 + 1 > 0x1555555555555555)
                sub_100259694();
              v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - *v11) >> 2);
              if (2 * v20 > v19)
                v19 = 2 * v20;
              if (v20 >= 0xAAAAAAAAAAAAAAALL)
                v21 = 0x1555555555555555;
              else
                v21 = v19;
              if (v21)
                v22 = (char *)sub_100821B78(v9 + 360, v21);
              else
                v22 = 0;
              v23 = (int8x8_t *)&v22[12 * v18];
              v24 = v96[0];
              v23[1].i32[0] = v96[1].i32[0];
              *v23 = v24;
              v26 = *(_DWORD **)(v9 + 344);
              v25 = *(_DWORD **)(v9 + 352);
              v27 = v23;
              if (v25 != v26)
              {
                do
                {
                  v28 = *(int8x8_t *)(v25 - 3);
                  v25 -= 3;
                  v29 = v25[2];
                  *(int8x8_t *)((char *)v27 - 12) = v28;
                  v27 = (int8x8_t *)((char *)v27 - 12);
                  v27[1].i32[0] = v29;
                }
                while (v25 != v26);
                v25 = (_DWORD *)*v11;
              }
              v17 = (char *)&v23[1] + 4;
              *(_QWORD *)(v9 + 344) = v27;
              *(_QWORD *)(v9 + 352) = (char *)v23 + 12;
              *(_QWORD *)(v9 + 360) = &v22[12 * v21];
              if (v25)
                operator delete(v25);
            }
            else
            {
              v16 = v96[0];
              v15[1].i32[0] = v96[1].i32[0];
              *v15 = v16;
              v17 = (char *)&v15[1] + 4;
            }
            *(_QWORD *)(v9 + 352) = v17;
            if (!*(_BYTE *)(a5 + 9))
            {
              if (qword_1022A02D0 != -1)
                dispatch_once(&qword_1022A02D0, &stru_1021AA220);
              v30 = qword_1022A02D8;
              if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
              {
                v31 = *(_DWORD *)&v100[12];
                sub_100F9F674((unsigned int *)v96, __p);
                v32 = __p;
                if (SBYTE3(v113) < 0)
                  v32 = *(_BYTE **)__p;
                *(_DWORD *)buf = 134218498;
                *(_QWORD *)v117 = v13;
                *(_WORD *)&v117[8] = 1024;
                *(_DWORD *)v118 = v31;
                *(_WORD *)&v118[4] = 2080;
                *(_QWORD *)&v118[6] = v32;
                _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "TILE: index entry, %3lu, %3u, %s", buf, 0x1Cu);
                if (SBYTE3(v113) < 0)
                  operator delete(*(void **)__p);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A02D0 != -1)
                  dispatch_once(&qword_1022A02D0, &stru_1021AA220);
                v33 = qword_1022A02D8;
                v34 = *(_DWORD *)&v100[12];
                sub_100F9F674((unsigned int *)v96, v97);
                v35 = v97;
                if (v98 < 0)
                  v35 = (void **)v97[0];
                *(_DWORD *)__p = 134218498;
                *(_QWORD *)&__p[4] = v13;
                *(_WORD *)&__p[12] = 1024;
                *(_DWORD *)&__p[14] = v34;
                *(_WORD *)&__p[18] = 2080;
                v113 = v35;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v33, 2, "TILE: index entry, %3lu, %3u, %s", __p, 28, v88);
                v37 = v36;
                if (v98 < 0)
                  operator delete(v97[0]);
                sub_100512490("Generic", 1, 0, 2, "virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_GSM, CLTilesManager_Type::KeyLatLonEntry_GSM>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_GSM, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_GSM]", "%s\n", v37);
                if (v37 != (char *)buf)
                  free(v37);
              }
            }
            ++v13;
          }
          while (v13 < *(unsigned int *)&v100[12]);
        }
      }
      goto LABEL_82;
    }
    v47 = 0;
    goto LABEL_57;
  }
  *(_DWORD *)__p = 502714;
  *(_OWORD *)&__p[4] = xmmword_101C47CA0;
  v113 = 0;
  v115 = 0;
  v114 = 0;
  sub_100F9FC20(a4, (uint64_t)__p);
  v38 = (uint64_t **)(v9 + 368);
  sub_100008848(v9 + 368, *(_QWORD **)(v9 + 376));
  *(_QWORD *)(v9 + 376) = 0;
  *(_QWORD *)(v9 + 384) = 0;
  *(_QWORD *)(v9 + 368) = v9 + 376;
  v93 = *(double *)&v9;
  if (!*(_BYTE *)(a5 + 9))
  {
    memset(v96, 0, 14);
    v48 = (const char *)sub_100812460(v9, a2, a3, 0, *(int *)&__p[12], *(int *)&__p[16]);
    v12 = (char *)v48;
    if (!v48)
    {
LABEL_82:
      v47 = 0;
      goto LABEL_83;
    }
    if (*(_DWORD *)&__p[12])
    {
      v50 = 0;
      *(_QWORD *)&v49 = 134220290;
      v91 = v49;
      v90 = v48;
      do
      {
        sub_100F9F4E4((int8x8_t *)&v12[v50 * *(unsigned int *)&__p[16]], v96);
        sub_101231AB8(v38, (int *)v96, (uint64_t *)v96);
        v94 = 0;
        v95 = 0;
        sub_100FA6940(v9, v96[1].u16[0], v96[1].u16[1], (double *)&v95, (double *)&v94);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021AA220);
        v51 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
        {
          v52 = *(_DWORD *)&__p[12];
          v53 = *(_QWORD *)(v9 + 384);
          sub_100F9F51C((unsigned int *)v96, v100);
          v54 = v38;
          if (v100[23] >= 0)
            v55 = v100;
          else
            v55 = *(_BYTE **)v100;
          v56 = v94;
          v57 = v95;
          v58 = (*(double (**)(uint64_t))(*(_QWORD *)v9 + 56))(v9);
          v59 = (*(double (**)(uint64_t))(*(_QWORD *)v9 + 64))(v9);
          v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 80))(v9);
          v61 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 72))(v9);
          *(_DWORD *)buf = v91;
          *(_QWORD *)v117 = v50;
          *(_WORD *)&v117[8] = 1024;
          *(_DWORD *)v118 = v52;
          *(_WORD *)&v118[4] = 2048;
          *(_QWORD *)&v118[6] = v53;
          v119 = 2080;
          v120 = v55;
          v121 = 2048;
          v122 = v57;
          v123 = 2048;
          v124 = v56;
          v125 = 2048;
          v126 = v58;
          v127 = 2048;
          v128 = v59;
          v129 = 1024;
          v130 = v60;
          v131 = 1024;
          v132 = v61;
          _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "TILE: entry, %3lu, %3u, %3lu, %s, loc, %.8lf, %.8lf, delta, %.5lf, %.5lf, grid, %u, %u", buf, 0x5Au);
          if ((v100[23] & 0x80000000) != 0)
            operator delete(*(void **)v100);
          v38 = v54;
          v12 = (char *)v90;
          *(double *)&v9 = v93;
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_1021AA220);
          v62 = qword_1022A02D8;
          v63 = *(_DWORD *)&__p[12];
          v64 = *(_QWORD *)(v9 + 384);
          sub_100F9F51C((unsigned int *)v96, v97);
          v89 = v38;
          if (v98 >= 0)
            v65 = v97;
          else
            v65 = (void **)v97[0];
          v66 = v94;
          v67 = v95;
          v68 = (*(double (**)(uint64_t))(*(_QWORD *)v9 + 56))(v9);
          v69 = (*(double (**)(uint64_t))(*(_QWORD *)v9 + 64))(v9);
          v70 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 80))(v9);
          v71 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 72))(v9);
          *(_DWORD *)v100 = v91;
          *(_QWORD *)&v100[4] = v50;
          *(_WORD *)&v100[12] = 1024;
          *(_DWORD *)&v100[14] = v63;
          *(_WORD *)&v100[18] = 2048;
          *(_QWORD *)&v100[20] = v64;
          *(_WORD *)&v100[28] = 2080;
          *(_QWORD *)&v100[30] = v65;
          *(_WORD *)&v100[38] = 2048;
          v101 = v67;
          v102 = 2048;
          v103 = v66;
          v104 = 2048;
          v105 = v68;
          v106 = 2048;
          v107 = v69;
          v108 = 1024;
          v109 = v70;
          v110 = 1024;
          v111 = v71;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v62, 2, "TILE: entry, %3lu, %3u, %3lu, %s, loc, %.8lf, %.8lf, delta, %.5lf, %.5lf, grid, %u, %u", v100, 90, v89, v90, *(double *)&v91, *((double *)&v91 + 1), v92, v93, v94, v95);
          v73 = v72;
          if (v98 < 0)
            operator delete(v97[0]);
          sub_100512490("Generic", 1, 0, 2, "virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_GSM, CLTilesManager_Type::KeyLatLonEntry_GSM>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_GSM, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_GSM]", "%s\n", v73);
          v38 = (uint64_t **)v88;
          if (v73 != (char *)buf)
            free(v73);
        }
        ++v50;
      }
      while (v50 < *(unsigned int *)&__p[12]);
    }
LABEL_101:
    v47 = 0;
    v78 = 1;
    goto LABEL_102;
  }
  v39 = sub_1012311D0(v9, (unsigned int **)(v9 + 344), (_DWORD *)&v99 + 1, &v99);
  v41 = v99;
  v40 = HIDWORD(v99);
  v42 = v99 - HIDWORD(v99) + 1;
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021AA220);
  v43 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)v117 = v42;
    *(_WORD *)&v117[4] = 1024;
    *(_DWORD *)&v117[6] = v40;
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "TILE: searched, numOfEntries, %u, offsetEntries, %d", buf, 0xEu);
  }
  v44 = sub_1001BFF7C(115, 2);
  if ((_DWORD)v44)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AA220);
    *(_DWORD *)v100 = 67109376;
    *(_DWORD *)&v100[4] = v42;
    *(_WORD *)&v100[8] = 1024;
    *(_DWORD *)&v100[10] = v40;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: searched, numOfEntries, %u, offsetEntries, %d", v100, 14);
    v84 = (uint8_t *)v83;
    v44 = sub_100512490("Generic", 1, 0, 2, "virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_GSM, CLTilesManager_Type::KeyLatLonEntry_GSM>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_GSM, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_GSM]", "%s\n", v83);
    if (v84 != buf)
      free(v84);
  }
  if ((v41 + 1) >= *(_DWORD *)&__p[12])
    v47 = *(_DWORD *)&__p[12] - v40;
  else
    v47 = v42;
  if (!v47)
  {
LABEL_57:
    v12 = 0;
    goto LABEL_83;
  }
  if (v47 + v40 > *(_DWORD *)&__p[12])
    sub_101947C14(v44, v45, v46);
  v12 = (char *)sub_100812460(v9, a2, a3, v40, v47, *(int *)&__p[16]);
  if (!v12)
    goto LABEL_82;
  *(_QWORD *)&v100[6] = 0;
  *(_QWORD *)v100 = 0;
  if (!v39)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AA220);
    v77 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEBUG, "TILE: avoid data search", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AA220);
      LOWORD(v97[0]) = 0;
      LODWORD(v87) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: avoid data search", v97, v87);
      v86 = (uint8_t *)v85;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_GSM, CLTilesManager_Type::KeyLatLonEntry_GSM>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_GSM, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_GSM]", "%s\n", v85);
      if (v86 != buf)
        free(v86);
      v47 = 0;
      v78 = 1;
      goto LABEL_102;
    }
    goto LABEL_101;
  }
  if ((sub_10123183C(v9, (uint64_t)v12, v47, *(int *)&__p[16], (_DWORD *)(v9 + 328), v100) & 1) != 0)
  {
    sub_101231AB8(v38, (int *)v100, (uint64_t *)v100);
LABEL_83:
    v74 = 1;
    goto LABEL_84;
  }
  v78 = 0;
LABEL_102:
  v74 = v78 != 0;
LABEL_84:
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021AA220);
  v75 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    sub_100F9F51C((unsigned int *)(v9 + 328), v100);
    v76 = v100[23] >= 0 ? v100 : *(_BYTE **)v100;
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)v117 = v74;
    *(_WORD *)&v117[4] = 1024;
    *(_DWORD *)&v117[6] = v47;
    *(_WORD *)v118 = 2080;
    *(_QWORD *)&v118[2] = v76;
    _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEBUG, "TILE: getLocationByKey, isFound, %d, searchedArea, %d, key, %s", buf, 0x18u);
    if ((v100[23] & 0x80000000) != 0)
      operator delete(*(void **)v100);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AA220);
    v79 = qword_1022A02D8;
    sub_100F9F51C((unsigned int *)(v9 + 328), __p);
    if (SBYTE3(v113) >= 0)
      v80 = __p;
    else
      v80 = *(_BYTE **)__p;
    *(_DWORD *)v100 = 67109634;
    *(_DWORD *)&v100[4] = v74;
    *(_WORD *)&v100[8] = 1024;
    *(_DWORD *)&v100[10] = v47;
    *(_WORD *)&v100[14] = 2080;
    *(_QWORD *)&v100[16] = v80;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v79, 2, "TILE: getLocationByKey, isFound, %d, searchedArea, %d, key, %s", v100, 24, v88);
    v82 = v81;
    if (SBYTE3(v113) < 0)
      operator delete(*(void **)__p);
    sub_100512490("Generic", 1, 0, 2, "virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_GSM, CLTilesManager_Type::KeyLatLonEntry_GSM>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_GSM, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_GSM]", "%s\n", v82);
    if (v82 != (char *)buf)
      free(v82);
  }
  if (v12)
    free(v12);
}

void sub_101227F30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101227F68(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
}

uint64_t sub_101227F74(uint64_t a1, int *a2, _QWORD *a3)
{
  uint64_t **v6;
  uint64_t v7;
  _QWORD **v8;
  uint64_t v9;
  _BOOL8 v10;
  NSObject *v11;
  _BYTE *v12;
  int8x8_t *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  NSObject *v17;
  NSObject *v18;
  _BYTE *v19;
  int v20;
  _BYTE *v21;
  unsigned int v22;
  _BYTE *v23;
  void **v24;
  _BYTE *v25;
  int v26;
  void **v27;
  unsigned int v28;
  unsigned int v29;
  void **v30;
  void **v31;
  char *v32;
  char *v33;
  NSObject *v34;
  const char *v35;
  _BYTE *v36;
  uint64_t v37;
  const char *v38;
  _BYTE *v39;
  char *v40;
  NSObject *v41;
  int v42;
  int v43;
  _BYTE *v44;
  _BYTE *v45;
  _BYTE *v46;
  uint64_t v47;
  int v48;
  _BYTE *v49;
  _BYTE *v50;
  void **v51;
  char *v52;
  NSObject *v53;
  int v54;
  int v55;
  _BYTE *v56;
  _BYTE *v57;
  _BYTE *v58;
  uint64_t v59;
  int v60;
  _BYTE *v61;
  _BYTE *v62;
  void **v63;
  char *v64;
  NSObject *v65;
  const char *v66;
  _BYTE *v67;
  uint64_t v68;
  const char *v69;
  _BYTE *v70;
  char *v71;
  NSObject *v72;
  _BYTE *v73;
  const char *v74;
  _BYTE *v75;
  uint64_t v76;
  _QWORD **v77;
  uint64_t v78;
  NSObject *v79;
  int v80;
  _BYTE *v81;
  _BYTE *v82;
  _BYTE *v83;
  uint64_t v85;
  _BYTE *v86;
  char *v87;
  char *v88;
  const char *v89;
  char *v90;
  _BOOL4 v91;
  uint64_t v92;
  int v93;
  _BYTE *v94;
  _BYTE *v95;
  void **v96;
  char *v97;
  char *v98;
  unsigned int v99;
  _BYTE *v100;
  const char *v101;
  void **v102;
  char *v103;
  uint64_t v104;
  unsigned int v105;
  const char *v106;
  const char *v107;
  unsigned int v108;
  void *v109[2];
  char v110;
  unsigned int v111;
  unsigned int v112;
  uint64_t v113;
  int v114;
  void *v115[2];
  char v116;
  int v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  int v125;
  int v126;
  uint64_t v127;
  void *v128[2];
  char v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  _BYTE v134[14];
  _BYTE v135[36];
  _BYTE v136[10];
  _BYTE v137[12];
  __int16 v138;
  _BYTE *v139;
  char v140;
  _BYTE buf[12];
  int v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  _BYTE __p[14];
  _BYTE v149[36];
  _QWORD v150[198];

  v6 = (uint64_t **)(a1 + 368);
  v7 = sub_101231DFC(a1 + 368, a2);
  v8 = (_QWORD **)v7;
  if (a1 + 376 != v7)
  {
    v9 = *(_QWORD *)(v7 + 25);
    *(_QWORD *)((char *)a3 + 6) = *(_QWORD *)(v7 + 31);
    *a3 = v9;
    return 1;
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021AA220);
  v11 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    sub_100F9F51C((unsigned int *)a2, __p);
    v12 = v149[9] >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "TILE:  getLocationByKey_mmap, key, %s", buf, 0xCu);
    if ((v149[9] & 0x80000000) != 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AA220);
    v85 = qword_1022A02D8;
    sub_100F9F51C((unsigned int *)a2, buf);
    if ((SBYTE7(v143) & 0x80u) == 0)
      v86 = buf;
    else
      v86 = *(_BYTE **)buf;
    *(_DWORD *)v134 = 136315138;
    *(_QWORD *)&v134[4] = v86;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v85, 2, "TILE:  getLocationByKey_mmap, key, %s", v134);
    v88 = v87;
    if (SBYTE7(v143) < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_GSM, CLTilesManager_Type::KeyLatLonEntry_GSM>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_GSM, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_GSM]", "%s\n", v88);
    if (v88 != __p)
      free(v88);
  }
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a1 + 344);
  sub_1015A2E04(v128, "");
  v130 = 0;
  v131 = -1;
  v132 = 0;
  v133 = 0;
  if ((sub_10080F1CC(a1, (uint64_t)v128) & 1) == 0)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AA220);
    v17 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__p = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "TILE: getLocationByKey_mmap, failed to mmap, #CloneMe", __p, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AA220);
      *(_WORD *)buf = 0;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A02D8, 16, "TILE: getLocationByKey_mmap, failed to mmap, #CloneMe", buf, 2);
      v90 = (char *)v89;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_GSM, CLTilesManager_Type::KeyLatLonEntry_GSM>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_GSM, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_GSM]", "%s\n", v89);
      if (v90 != __p)
        free(v90);
    }
    v10 = 0;
    goto LABEL_179;
  }
  v108 = 0;
  v13 = 0;
  v127 = 0;
  v125 = 0;
  v126 = 43962;
  v122 = 0x200006ABBALL;
  v123 = 0u;
  v124 = 0u;
  *(_QWORD *)&buf[4] = 184;
  *(_DWORD *)buf = 371642;
  v142 = 381;
  v143 = 0u;
  v144 = 0u;
  v146 = 0;
  v145 = 0;
  v147 = 0;
  v117 = 502714;
  v118 = xmmword_101C47CA0;
  v119 = 0;
  v120 = 0;
  v121 = 0;
  while (1)
  {
    while (1)
    {
      v14 = v133;
      if (!sub_10080F354(a1, v128, &v126))
        goto LABEL_162;
      if (HIWORD(v126) == 7)
        break;
      if (HIWORD(v126) == 6)
      {
        sub_100F9FC20(v132 + v14, (uint64_t)&v122);
        v13 = (int8x8_t *)(v14 + v132 + v127 + 12);
        if ((unint64_t)v13 + (DWORD2(v123) * DWORD1(v123)) > v130 + v132)
        {
          if (!*(_BYTE *)(a1 + 392))
            goto LABEL_162;
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_1021AA220);
          v53 = qword_1022A02D8;
          if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
          {
            v54 = DWORD1(v123);
            v106 = sub_1001CC818(*(_DWORD *)(a1 + 48));
            LODWORD(v107) = v54;
            sub_101231B40((uint64_t)buf, v134);
            v55 = v135[9];
            v56 = *(_BYTE **)v134;
            sub_100F9F51C((unsigned int *)a2, v137);
            v57 = v134;
            if (v55 < 0)
              v57 = v56;
            v58 = v137;
            if (v140 < 0)
              v58 = *(_BYTE **)v137;
            *(_DWORD *)__p = 134284803;
            *(_QWORD *)&__p[4] = v13;
            *(_WORD *)&__p[12] = 1025;
            *(_DWORD *)v149 = (_DWORD)v107;
            *(_WORD *)&v149[4] = 2049;
            *(_QWORD *)&v149[6] = v14;
            *(_WORD *)&v149[14] = 2081;
            *(_QWORD *)&v149[16] = v106;
            *(_WORD *)&v149[24] = 2081;
            *(_QWORD *)&v149[26] = v57;
            *(_WORD *)&v149[34] = 2081;
            v150[0] = v58;
            _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_FAULT, "TILE: pIndexEntries passes valid mmapped region, pIndexEntries:%{private}lu, numOfEntries:%{private}u, atOffset:%{private}lld, %{private}s, %{private}s, %{private}s", __p, 0x3Au);
            if (v140 < 0)
              operator delete(*(void **)v137);
            if ((v135[9] & 0x80000000) != 0)
              operator delete(*(void **)v134);
          }
          if (!sub_1001BFF7C(115, 0))
            goto LABEL_162;
          bzero(__p, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_1021AA220);
          v59 = qword_1022A02D8;
          LODWORD(v107) = DWORD1(v123);
          v106 = sub_1001CC818(*(_DWORD *)(a1 + 48));
          sub_101231B40((uint64_t)buf, v137);
          v60 = v140;
          v61 = *(_BYTE **)v137;
          sub_100F9F51C((unsigned int *)a2, v115);
          v62 = v137;
          if (v60 < 0)
            v62 = v61;
          v63 = v115;
          if (v116 < 0)
            v63 = (void **)v115[0];
          *(_DWORD *)v134 = 134284803;
          *(_QWORD *)&v134[4] = v13;
          *(_WORD *)&v134[12] = 1025;
          *(_DWORD *)v135 = (_DWORD)v107;
          *(_WORD *)&v135[4] = 2049;
          *(_QWORD *)&v135[6] = v14;
          *(_WORD *)&v135[14] = 2081;
          *(_QWORD *)&v135[16] = v106;
          *(_WORD *)&v135[24] = 2081;
          *(_QWORD *)&v135[26] = v62;
          *(_WORD *)&v135[34] = 2081;
          *(_QWORD *)v136 = v63;
          _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v59, 17, "TILE: pIndexEntries passes valid mmapped region, pIndexEntries:%{private}lu, numOfEntries:%{private}u, atOffset:%{private}lld, %{private}s, %{private}s, %{private}s", v134, 58);
          v33 = v64;
          if (v116 < 0)
            operator delete(v115[0]);
          if (v140 < 0)
            operator delete(*(void **)v137);
          goto LABEL_147;
        }
      }
      else
      {
        if (HIWORD(v126) != 5)
        {
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_1021AA220);
          v34 = qword_1022A02D8;
          if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_ERROR))
          {
            v35 = sub_1001CC818(*(_DWORD *)(a1 + 48));
            sub_101231B40((uint64_t)buf, v134);
            v36 = v135[9] >= 0 ? v134 : *(_BYTE **)v134;
            *(_DWORD *)__p = 134218498;
            *(_QWORD *)&__p[4] = v14;
            *(_WORD *)&__p[12] = 2080;
            *(_QWORD *)v149 = v35;
            *(_WORD *)&v149[8] = 2080;
            *(_QWORD *)&v149[10] = v36;
            _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "TILE: unregconized sectionId, %lld, %s, %s", __p, 0x20u);
            if ((v135[9] & 0x80000000) != 0)
              operator delete(*(void **)v134);
          }
          if (!sub_1001BFF7C(115, 0))
            goto LABEL_162;
          bzero(__p, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_1021AA220);
          v37 = qword_1022A02D8;
          v38 = sub_1001CC818(*(_DWORD *)(a1 + 48));
          sub_101231B40((uint64_t)buf, v137);
          if (v140 >= 0)
            v39 = v137;
          else
            v39 = *(_BYTE **)v137;
          *(_DWORD *)v134 = 134218498;
          *(_QWORD *)&v134[4] = v14;
          *(_WORD *)&v134[12] = 2080;
          *(_QWORD *)v135 = v38;
          *(_WORD *)&v135[8] = 2080;
          *(_QWORD *)&v135[10] = v39;
          _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v37, 16, "TILE: unregconized sectionId, %lld, %s, %s", v134, 32, v106);
          v33 = v40;
          if (v140 < 0)
            operator delete(*(void **)v137);
LABEL_147:
          sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_GSM, CLTilesManager_Type::KeyLatLonEntry_GSM>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_GSM, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_GSM]", "%s\n", v33);
          goto LABEL_221;
        }
        sub_100F9F120(v132 + v14, (uint64_t)buf);
      }
    }
    sub_100F9FC20(v132 + v14, (uint64_t)&v117);
    v15 = v14 + v132 + v127 + 12;
    if (v15 + (unint64_t)(HIDWORD(v118) * DWORD2(v118)) > v130 + v132)
    {
      if (!*(_BYTE *)(a1 + 392))
        goto LABEL_162;
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AA220);
      v41 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        v42 = DWORD2(v118);
        v106 = sub_1001CC818(*(_DWORD *)(a1 + 48));
        LODWORD(v107) = v42;
        sub_101231B40((uint64_t)buf, v134);
        v43 = v135[9];
        v44 = *(_BYTE **)v134;
        sub_100F9F51C((unsigned int *)a2, v137);
        v45 = v134;
        if (v43 < 0)
          v45 = v44;
        v46 = v137;
        if (v140 < 0)
          v46 = *(_BYTE **)v137;
        *(_DWORD *)__p = 134284803;
        *(_QWORD *)&__p[4] = v15;
        *(_WORD *)&__p[12] = 1025;
        *(_DWORD *)v149 = (_DWORD)v107;
        *(_WORD *)&v149[4] = 2049;
        *(_QWORD *)&v149[6] = v14;
        *(_WORD *)&v149[14] = 2081;
        *(_QWORD *)&v149[16] = v106;
        *(_WORD *)&v149[24] = 2080;
        *(_QWORD *)&v149[26] = v45;
        *(_WORD *)&v149[34] = 2081;
        v150[0] = v46;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_FAULT, "TILE: pDataEntries passes valid mmapped region, pDataEntries:%{private}lu, numOfEntries:%{private}u, atOffset:%{private}lld, %{private}s, %{privat}s, %{private}s", __p, 0x3Au);
        if (v140 < 0)
          operator delete(*(void **)v137);
        if ((v135[9] & 0x80000000) != 0)
          operator delete(*(void **)v134);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_162;
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AA220);
      v47 = qword_1022A02D8;
      LODWORD(v107) = DWORD2(v118);
      v106 = sub_1001CC818(*(_DWORD *)(a1 + 48));
      sub_101231B40((uint64_t)buf, v137);
      v48 = v140;
      v49 = *(_BYTE **)v137;
      sub_100F9F51C((unsigned int *)a2, v115);
      v50 = v137;
      if (v48 < 0)
        v50 = v49;
      v51 = v115;
      if (v116 < 0)
        v51 = (void **)v115[0];
      *(_DWORD *)v134 = 134284803;
      *(_QWORD *)&v134[4] = v15;
      *(_WORD *)&v134[12] = 1025;
      *(_DWORD *)v135 = (_DWORD)v107;
      *(_WORD *)&v135[4] = 2049;
      *(_QWORD *)&v135[6] = v14;
      *(_WORD *)&v135[14] = 2081;
      *(_QWORD *)&v135[16] = v106;
      *(_WORD *)&v135[24] = 2080;
      *(_QWORD *)&v135[26] = v50;
      *(_WORD *)&v135[34] = 2081;
      *(_QWORD *)v136 = v51;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v47, 17, "TILE: pDataEntries passes valid mmapped region, pDataEntries:%{private}lu, numOfEntries:%{private}u, atOffset:%{private}lld, %{private}s, %{privat}s, %{private}s", v134, 58);
      v33 = v52;
      if (v116 < 0)
        operator delete(v115[0]);
      if (v140 < 0)
        operator delete(*(void **)v137);
      goto LABEL_147;
    }
    sub_100008848((uint64_t)v6, *v8);
    *(_QWORD *)(a1 + 384) = 0;
    *(_QWORD *)(a1 + 368) = v8;
    *v8 = 0;
    v113 = 0;
    v114 = 0;
    sub_100F9F780(&v113, a2);
    v111 = DWORD2(v118);
    v112 = 0;
    if (!v13)
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AA220);
      v65 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_ERROR))
      {
        v66 = sub_1001CC818(*(_DWORD *)(a1 + 48));
        sub_101231B40((uint64_t)buf, __p);
        v67 = v149[9] >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)v134 = 136380931;
        *(_QWORD *)&v134[4] = v66;
        *(_WORD *)&v134[12] = 2081;
        *(_QWORD *)v135 = v67;
        _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_ERROR, "TILE: no index section before entries section, %{private}s, %{private}s", v134, 0x16u);
        if ((v149[9] & 0x80000000) != 0)
          operator delete(*(void **)__p);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_162;
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AA220);
      v68 = qword_1022A02D8;
      v69 = sub_1001CC818(*(_DWORD *)(a1 + 48));
      sub_101231B40((uint64_t)buf, v134);
      if (v135[9] >= 0)
        v70 = v134;
      else
        v70 = *(_BYTE **)v134;
      *(_DWORD *)v137 = 136380931;
      *(_QWORD *)&v137[4] = v69;
      v138 = 2081;
      v139 = v70;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v68, 16, "TILE: no index section before entries section, %{private}s, %{private}s", v137, 22);
      v33 = v71;
      if ((v135[9] & 0x80000000) != 0)
        operator delete(*(void **)v134);
      goto LABEL_147;
    }
    v16 = sub_101231C8C(a1, v13, DWORD1(v123), SDWORD2(v123), &v113, &v112, &v111);
    if (v112 >= DWORD2(v118) || v111 >= DWORD2(v118))
      break;
    if (!v16)
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AA220);
      v72 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(v106) = v112;
        LODWORD(v107) = v111;
        sub_100F9F674((unsigned int *)&v113, v134);
        if (v135[9] >= 0)
          v73 = v134;
        else
          v73 = *(_BYTE **)v134;
        v74 = sub_1001CC818(*(_DWORD *)(a1 + 48));
        sub_101231B40((uint64_t)buf, v137);
        if (v140 >= 0)
          v75 = v137;
        else
          v75 = *(_BYTE **)v137;
        *(_DWORD *)__p = 67175683;
        *(_DWORD *)&__p[4] = (_DWORD)v106;
        *(_WORD *)&__p[8] = 1025;
        *(_DWORD *)&__p[10] = (_DWORD)v107;
        *(_WORD *)v149 = 2081;
        *(_QWORD *)&v149[2] = v73;
        *(_WORD *)&v149[10] = 2081;
        *(_QWORD *)&v149[12] = v74;
        *(_WORD *)&v149[20] = 2081;
        *(_QWORD *)&v149[22] = v75;
        _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEBUG, "TILE: not found in index, a, %{private}u, b, %{private}u, %{private}s, %{private}s, %{private}s", __p, 0x2Cu);
        if (v140 < 0)
          operator delete(*(void **)v137);
        if ((v135[9] & 0x80000000) != 0)
          operator delete(*(void **)v134);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_162;
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AA220);
      v107 = (const char *)qword_1022A02D8;
      v99 = v112;
      LODWORD(v106) = v111;
      sub_100F9F674((unsigned int *)&v113, v137);
      if (v140 >= 0)
        v100 = v137;
      else
        v100 = *(_BYTE **)v137;
      v101 = sub_1001CC818(*(_DWORD *)(a1 + 48));
      sub_101231B40((uint64_t)buf, v115);
      if (v116 >= 0)
        v102 = v115;
      else
        v102 = (void **)v115[0];
      *(_DWORD *)v134 = 67175683;
      *(_DWORD *)&v134[4] = v99;
      *(_WORD *)&v134[8] = 1025;
      *(_DWORD *)&v134[10] = (_DWORD)v106;
      *(_WORD *)v135 = 2081;
      *(_QWORD *)&v135[2] = v100;
      *(_WORD *)&v135[10] = 2081;
      *(_QWORD *)&v135[12] = v101;
      *(_WORD *)&v135[20] = 2081;
      *(_QWORD *)&v135[22] = v102;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v107, 2, "TILE: not found in index, a, %{private}u, b, %{private}u, %{private}s, %{private}s, %{private}s", v134, 44);
      v33 = v103;
      if (v116 < 0)
        operator delete(v115[0]);
      if (v140 < 0)
        operator delete(*(void **)v137);
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_GSM, CLTilesManager_Type::KeyLatLonEntry_GSM>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_GSM, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_GSM]", "%s\n", v33);
LABEL_221:
      if (v33 != __p)
        free(v33);
      goto LABEL_162;
    }
    v108 = v111 - v112 + 1;
    if (!sub_10123183C(a1, v15 + HIDWORD(v118) * v112, v108, SHIDWORD(v118), a2, a3))
      goto LABEL_162;
    sub_101231AB8(v6, (int *)a3, a3);
  }
  if (*(_BYTE *)(a1 + 392))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AA220);
    v18 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v19 = v134;
      sub_100F9F674((unsigned int *)&v113, v134);
      if (v135[9] < 0)
        v19 = *(_BYTE **)v134;
      v107 = sub_1001CC818(*(_DWORD *)(a1 + 48));
      sub_101231B40((uint64_t)buf, v137);
      v20 = v140;
      v21 = *(_BYTE **)v137;
      v22 = v112;
      v105 = v111;
      LODWORD(v106) = DWORD2(v118);
      sub_100F9F51C((unsigned int *)a2, v115);
      v23 = v137;
      if (v20 < 0)
        v23 = v21;
      v24 = v115;
      if (v116 < 0)
        v24 = (void **)v115[0];
      *(_DWORD *)__p = 136382211;
      *(_QWORD *)&__p[4] = v19;
      *(_WORD *)&__p[12] = 2081;
      *(_QWORD *)v149 = v107;
      *(_WORD *)&v149[8] = 2081;
      *(_QWORD *)&v149[10] = v23;
      *(_WORD *)&v149[18] = 1025;
      *(_DWORD *)&v149[20] = v22;
      *(_WORD *)&v149[24] = 1025;
      *(_DWORD *)&v149[26] = v105;
      *(_WORD *)&v149[30] = 1025;
      *(_DWORD *)&v149[32] = (_DWORD)v106;
      LOWORD(v150[0]) = 2081;
      *(_QWORD *)((char *)v150 + 2) = v24;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "TILE: invalid binary search %{private}s in %{private}s, %{private}s, a:%{private}u, b:%{private}u, max:%{private}u, %{private}s", __p, 0x3Cu);
      if (v116 < 0)
        operator delete(v115[0]);
      if (v140 < 0)
        operator delete(*(void **)v137);
      if ((v135[9] & 0x80000000) != 0)
        operator delete(*(void **)v134);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AA220);
      v107 = (const char *)qword_1022A02D8;
      v25 = v137;
      sub_100F9F674((unsigned int *)&v113, v137);
      if (v140 < 0)
        v25 = *(_BYTE **)v137;
      v106 = sub_1001CC818(*(_DWORD *)(a1 + 48));
      sub_101231B40((uint64_t)buf, v115);
      v26 = v116;
      v27 = (void **)v115[0];
      v28 = v111;
      v29 = v112;
      HIDWORD(v104) = DWORD2(v118);
      sub_100F9F51C((unsigned int *)a2, v109);
      v30 = v115;
      if (v26 < 0)
        v30 = v27;
      v31 = v109;
      if (v110 < 0)
        v31 = (void **)v109[0];
      *(_DWORD *)v134 = 136382211;
      *(_QWORD *)&v134[4] = v25;
      *(_WORD *)&v134[12] = 2081;
      *(_QWORD *)v135 = v106;
      *(_WORD *)&v135[8] = 2081;
      *(_QWORD *)&v135[10] = v30;
      *(_WORD *)&v135[18] = 1025;
      *(_DWORD *)&v135[20] = v29;
      *(_WORD *)&v135[24] = 1025;
      *(_DWORD *)&v135[26] = v28;
      *(_WORD *)&v135[30] = 1025;
      *(_DWORD *)&v135[32] = HIDWORD(v104);
      *(_WORD *)v136 = 2081;
      *(_QWORD *)&v136[2] = v31;
      LODWORD(v104) = 60;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v107, 17, "TILE: invalid binary search %{private}s in %{private}s, %{private}s, a:%{private}u, b:%{private}u, max:%{private}u, %{private}s", v134, v104);
      v33 = v32;
      if (v110 < 0)
        operator delete(v109[0]);
      if (v116 < 0)
        operator delete(v115[0]);
      if (v140 < 0)
        operator delete(*(void **)v137);
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_GSM, CLTilesManager_Type::KeyLatLonEntry_GSM>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_GSM, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_GSM]", "%s\n", v33);
      goto LABEL_221;
    }
  }
LABEL_162:
  v76 = sub_101231DFC((uint64_t)v6, a2);
  v77 = (_QWORD **)v76;
  v10 = v8 != (_QWORD **)v76;
  if (v8 != (_QWORD **)v76)
  {
    v78 = *(_QWORD *)(v76 + 25);
    *(_QWORD *)((char *)a3 + 6) = *(_QWORD *)(v76 + 31);
    *a3 = v78;
  }
  if (v132)
    sub_10080F2AC(a1, (uint64_t)v128);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021AA220);
  v79 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    sub_100F9F51C((unsigned int *)a2, v134);
    v80 = v135[9];
    v81 = *(_BYTE **)v134;
    sub_100F9F51C((unsigned int *)a3, v137);
    v82 = v134;
    if (v80 < 0)
      v82 = v81;
    if (v140 >= 0)
      v83 = v137;
    else
      v83 = *(_BYTE **)v137;
    *(_DWORD *)__p = 67109890;
    *(_DWORD *)&__p[4] = v8 != v77;
    *(_WORD *)&__p[8] = 1024;
    *(_DWORD *)&__p[10] = v108;
    *(_WORD *)v149 = 2080;
    *(_QWORD *)&v149[2] = v82;
    *(_WORD *)&v149[10] = 2080;
    *(_QWORD *)&v149[12] = v83;
    _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEBUG, "TILE: isFound, %d, searchedArea, %u, key, %s, entry, %s", __p, 0x22u);
    if (v140 < 0)
      operator delete(*(void **)v137);
    if ((v135[9] & 0x80000000) != 0)
      operator delete(*(void **)v134);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AA220);
    v91 = v8 != v77;
    v92 = qword_1022A02D8;
    sub_100F9F51C((unsigned int *)a2, v137);
    v93 = v140;
    v94 = *(_BYTE **)v137;
    sub_100F9F51C((unsigned int *)a3, v115);
    v95 = v137;
    if (v93 < 0)
      v95 = v94;
    if (v116 >= 0)
      v96 = v115;
    else
      v96 = (void **)v115[0];
    *(_DWORD *)v134 = 67109890;
    *(_DWORD *)&v134[4] = v91;
    *(_WORD *)&v134[8] = 1024;
    *(_DWORD *)&v134[10] = v108;
    *(_WORD *)v135 = 2080;
    *(_QWORD *)&v135[2] = v95;
    *(_WORD *)&v135[10] = 2080;
    *(_QWORD *)&v135[12] = v96;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v92, 2, "TILE: isFound, %d, searchedArea, %u, key, %s, entry, %s", v134, 34, v106, v107);
    v98 = v97;
    if (v116 < 0)
      operator delete(v115[0]);
    if (v140 < 0)
      operator delete(*(void **)v137);
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_GSM, CLTilesManager_Type::KeyLatLonEntry_GSM>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_GSM, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_GSM]", "%s\n", v98);
    if (v98 != __p)
      free(v98);
  }
LABEL_179:
  if (v129 < 0)
    operator delete(v128[0]);
  return v10;
}

void sub_101229724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a41 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL sub_10122986C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  _BYTE *v8;
  const char **v9;
  const char *v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  int v18;
  _BYTE *v19;
  _BYTE *v20;
  void **v21;
  uint64_t v23;
  _BYTE *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  int v28;
  void **v29;
  void **v30;
  void **v31;
  char *v32;
  char *v33;
  const char *v34;
  const char *v35;
  char *v36;
  const char *v37;
  void *v38[2];
  char v39;
  void *v40[2];
  char v41;
  const char *v42;
  char v43;
  char v44;
  uint64_t v45;
  _BYTE buf[14];
  __int16 v47;
  void **v48;
  __int16 v49;
  void **v50;
  std::string v51;
  _BYTE __p[14];
  __int16 v53;
  _BYTE *v54;
  __int16 v55;
  void **v56;

  v6 = *a2;
  *(_QWORD *)(a1 + 334) = *(uint64_t *)((char *)a2 + 6);
  *(_QWORD *)(a1 + 328) = v6;
  v43 = 0;
  v45 = nullsub_34(0);
  v42 = "search";
  v44 = 1;
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021AA220);
  v7 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    sub_100F9F51C((unsigned int *)a2, __p);
    v8 = SHIBYTE(v54) >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TILE: getLocationByKey_traverse, key, %s", buf, 0xCu);
    if (SHIBYTE(v54) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AA220);
    v23 = qword_1022A02D8;
    sub_100F9F51C((unsigned int *)a2, buf);
    if (SHIBYTE(v48) >= 0)
      v24 = buf;
    else
      v24 = *(_BYTE **)buf;
    LODWORD(v51.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v51.__r_.__value_.__r.__words + 4) = (std::string::size_type)v24;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v23, 2, "TILE: getLocationByKey_traverse, key, %s", (const char *)&v51);
    v26 = v25;
    if (SHIBYTE(v48) < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_GSM, CLTilesManager_Type::KeyLatLonEntry_GSM>::getLocationByKey_traverse(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_GSM, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_GSM]", "%s\n", v26);
    if (v26 != __p)
      free(v26);
  }
  sub_100FA2C30(a1, &v51);
  v9 = (const char **)(a1 + 8);
  v10 = (const char *)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
    v10 = *v9;
  if (sub_1000B78B0(v10))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AA220);
    v11 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v12 = (const char *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v12 = *v9;
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "TILE: getLocationByKey_traverse, prefer local file name because it exists, %s", __p, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AA220);
      v34 = (const char *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v34 = *v9;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v34;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: getLocationByKey_traverse, prefer local file name because it exists, %s", buf);
      v36 = (char *)v35;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_GSM, CLTilesManager_Type::KeyLatLonEntry_GSM>::getLocationByKey_traverse(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_GSM, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_GSM]", "%s\n", v35);
      if (v36 != __p)
        free(v36);
    }
    std::string::operator=(&v51, (const std::string *)(a1 + 8));
  }
  sub_100FA43A0((_QWORD *)a1, (uint64_t)&v51, (uint64_t)&v42);
  v13 = sub_101231DFC(a1 + 368, (int *)a2);
  v14 = v13;
  v15 = a1 + 376;
  if (a1 + 376 != v13)
  {
    v16 = *(_QWORD *)(v13 + 25);
    *(_QWORD *)(a3 + 6) = *(_QWORD *)(v13 + 31);
    *(_QWORD *)a3 = v16;
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021AA220);
  v17 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    sub_100F9F51C((unsigned int *)a2, buf);
    v18 = SHIBYTE(v48);
    v19 = *(_BYTE **)buf;
    sub_100F9F51C((unsigned int *)a3, v40);
    v20 = buf;
    if (v18 < 0)
      v20 = v19;
    if (v41 >= 0)
      v21 = v40;
    else
      v21 = (void **)v40[0];
    *(_DWORD *)__p = 67109890;
    *(_DWORD *)&__p[4] = v15 != v14;
    *(_WORD *)&__p[8] = 1024;
    *(_DWORD *)&__p[10] = 0;
    v53 = 2080;
    v54 = v20;
    v55 = 2080;
    v56 = v21;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "TILE: getLocationByKey_traverse, isFound, %d, searchedArea, %u, key, %s, entry, %s", __p, 0x22u);
    if (v41 < 0)
      operator delete(v40[0]);
    if (SHIBYTE(v48) < 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AA220);
    v27 = qword_1022A02D8;
    sub_100F9F51C((unsigned int *)a2, v40);
    v28 = v41;
    v29 = (void **)v40[0];
    sub_100F9F51C((unsigned int *)a3, v38);
    v30 = v40;
    if (v28 < 0)
      v30 = v29;
    if (v39 >= 0)
      v31 = v38;
    else
      v31 = (void **)v38[0];
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = v15 != v14;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = 0;
    v47 = 2080;
    v48 = v30;
    v49 = 2080;
    v50 = v31;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v27, 2, "TILE: getLocationByKey_traverse, isFound, %d, searchedArea, %u, key, %s, entry, %s", buf, 34, v37, (const char *)v38[0]);
    v33 = v32;
    if (v39 < 0)
      operator delete(v38[0]);
    if (v41 < 0)
      operator delete(v40[0]);
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_GSM, CLTilesManager_Type::KeyLatLonEntry_GSM>::getLocationByKey_traverse(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_GSM, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_GSM]", "%s\n", v33);
    if (v33 != __p)
      free(v33);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  return v15 != v14;
}

void sub_101229F24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_101229F90(uint64_t a1)
{
  sub_101230CE0(a1);
  operator delete();
}

uint64_t sub_101229FB4(uint64_t a1, std::string::value_type *a2)
{
  double Current;
  NSObject *v5;
  uint64_t v6;
  __int128 v7;
  const char *v8;
  uint64_t v9;
  clock_t v10;
  int v11;
  clock_t v12;
  clock_t v13;
  int v14;
  clock_t v15;
  int v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  const char *v22;
  const char *v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  char *v30;
  char *v31;
  NSObject *v32;
  int v34;
  const char *v35;
  const char *v36;
  uint8_t *v37;
  const char *v38;
  uint8_t *v39;
  uint64_t v40;
  __int128 v41;
  double v42;
  const char *v43;
  void *v44[2];
  char v45;
  uint64_t v46;
  uint64_t v47;
  _WORD v48[8];
  _QWORD v49[2];
  unsigned int v50[4];
  const char *v51;
  _QWORD *v52;
  uint64_t v53;
  _BYTE __p[28];
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  void **v60;
  uint8_t buf[4];
  _BYTE v62[24];
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  _BYTE *v68;

  Current = CFAbsoluteTimeGetCurrent();
  sub_100FA29E4(a1, a2);
  sub_100FA5198((uint64_t *)a1, "", a2, *(_DWORD *)(a1 + 48), 0, Current);
  sub_101231E78((uint64_t *)&v51, a1 + 368);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021AA220);
  v5 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134218242;
    *(_QWORD *)v62 = v53;
    *(_WORD *)&v62[8] = 2080;
    *(_QWORD *)&v62[10] = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "TILE: result: tilestool: TEST_testBinarySearch, entries, %lu, file, %s", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AA220);
    *(_DWORD *)__p = 134218242;
    *(_QWORD *)&__p[4] = v53;
    *(_WORD *)&__p[12] = 2080;
    *(_QWORD *)&__p[14] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: result: tilestool: TEST_testBinarySearch, entries, %lu, file, %s", __p, 22);
    v37 = (uint8_t *)v36;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, CLTilesManager_Type::KeyLatLonEntry_CDMA>::TEST_testBinarySearch(const char *) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CDMA]", "%s\n", v36);
    if (v37 != buf)
      free(v37);
  }
  v6 = a1 + 376;
  sub_100008848(a1 + 368, *(_QWORD **)(a1 + 376));
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 368) = a1 + 376;
  v8 = v51;
  v43 = (const char *)&v52;
  if (v51 != (const char *)&v52)
  {
    v9 = 0;
    *(_QWORD *)&v7 = 134219266;
    v41 = v7;
    while (1)
    {
      *(_QWORD *)v50 = *(_QWORD *)(v8 + 25);
      *(_QWORD *)((char *)&v50[1] + 2) = *(_QWORD *)(v8 + 31);
      memset(v49, 0, 14);
      v47 = 0;
      memset(v48, 0, 14);
      v46 = 0;
      sub_100008848(a1 + 368, *(_QWORD **)(a1 + 376));
      *(_QWORD *)(a1 + 376) = 0;
      *(_QWORD *)(a1 + 384) = 0;
      *(_QWORD *)(a1 + 368) = v6;
      v10 = clock();
      v11 = (*(uint64_t (**)(uint64_t, unsigned int *, _QWORD *))(*(_QWORD *)a1 + 192))(a1, v50, v49);
      v12 = clock();
      sub_100008848(a1 + 368, *(_QWORD **)(a1 + 376));
      *(_QWORD *)(a1 + 376) = 0;
      *(_QWORD *)(a1 + 384) = 0;
      *(_QWORD *)(a1 + 368) = v6;
      v13 = clock();
      v14 = (*(uint64_t (**)(uint64_t, unsigned int *, _WORD *))(*(_QWORD *)a1 + 184))(a1, v50, v48);
      v15 = clock();
      printf("tilestool: mmap, %lu, file, %lu\n", v15 - v13, v12 - v10);
      if (v11 != v14)
        break;
      v16 = (*(uint64_t (**)(uint64_t, unsigned int *, _QWORD *))(*(_QWORD *)a1 + 176))(a1, v50, v49);
      if (v16)
        sub_100FA6940(a1, LOWORD(v49[1]), WORD1(v49[1]), (double *)&v47, (double *)&v46);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AA220);
      v17 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        v18 = v53;
        v19 = v46;
        v20 = v47;
        sub_100F9F9D8(v50, __p);
        v21 = __p;
        if (__p[23] < 0)
          v21 = *(_BYTE **)__p;
        *(_DWORD *)buf = v41;
        *(_QWORD *)v62 = v9;
        *(_WORD *)&v62[8] = 2048;
        *(_QWORD *)&v62[10] = v18;
        *(_WORD *)&v62[18] = 1024;
        *(_DWORD *)&v62[20] = v16;
        v63 = 2048;
        v64 = v20;
        v65 = 2048;
        v66 = v19;
        v67 = 2080;
        v68 = v21;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "TILE: result: tilestool: prog, %3lu, %3lu, ===============> isFound, %d, location, %14.8lf, %14.8lf, entry, %s", buf, 0x3Au);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021AA220);
        v25 = qword_1022A02D8;
        v26 = v53;
        v27 = v46;
        v28 = v47;
        sub_100F9F9D8(v50, v44);
        v29 = v44;
        if (v45 < 0)
          v29 = (void **)v44[0];
        *(_DWORD *)__p = v41;
        *(_QWORD *)&__p[4] = v9;
        *(_WORD *)&__p[12] = 2048;
        *(_QWORD *)&__p[14] = v26;
        *(_WORD *)&__p[22] = 1024;
        *(_DWORD *)&__p[24] = v16;
        v55 = 2048;
        v56 = v28;
        v57 = 2048;
        v58 = v27;
        v59 = 2080;
        v60 = v29;
        LODWORD(v40) = 58;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v25, 2, "TILE: result: tilestool: prog, %3lu, %3lu, ===============> isFound, %d, location, %14.8lf, %14.8lf, entry, %s", __p, v40, (_DWORD)v41, *((double *)&v41 + 1), v42, v43);
        v31 = v30;
        if (v45 < 0)
          operator delete(v44[0]);
        sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, CLTilesManager_Type::KeyLatLonEntry_CDMA>::TEST_testBinarySearch(const char *) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CDMA]", "%s\n", v31);
        if (v31 != (char *)buf)
          free(v31);
      }
      if (!v16)
      {
        v34 = 759;
        v35 = "isFound";
LABEL_44:
        __assert_rtn("TEST_testBinarySearch", "CLKeyLatLonTileTemplate.h", v34, v35);
      }
      v22 = (const char *)*((_QWORD *)v8 + 1);
      if (v22)
      {
        do
        {
          v23 = v22;
          v22 = *(const char **)v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (const char *)*((_QWORD *)v8 + 2);
          v24 = *(_QWORD *)v23 == (_QWORD)v8;
          v8 = v23;
        }
        while (!v24);
      }
      ++v9;
      v8 = v23;
      if (v23 == v43)
        goto LABEL_36;
    }
    v34 = 742;
    v35 = "isFound == isFoundMmap";
    goto LABEL_44;
  }
  v9 = 0;
LABEL_36:
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021AA220);
  v32 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109632;
    *(_DWORD *)v62 = 1;
    *(_WORD *)&v62[4] = 2048;
    *(_QWORD *)&v62[6] = v9;
    *(_WORD *)&v62[14] = 2048;
    *(_QWORD *)&v62[16] = v53;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "TILE: result: tilestool: pass, %d, tests, %lu, %lu", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AA220);
    *(_QWORD *)__p = 0x104000300;
    *(_WORD *)&__p[8] = 2048;
    *(_QWORD *)&__p[10] = v9;
    *(_WORD *)&__p[18] = 2048;
    *(_QWORD *)&__p[20] = v53;
    LODWORD(v40) = 28;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: result: tilestool: pass, %d, tests, %lu, %lu", __p, v40, (_QWORD)v41);
    v39 = (uint8_t *)v38;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, CLTilesManager_Type::KeyLatLonEntry_CDMA>::TEST_testBinarySearch(const char *) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CDMA]", "%s\n", v38);
    if (v39 != buf)
      free(v39);
  }
  sub_100008848((uint64_t)&v51, v52);
  return 1;
}

void sub_10122A76C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,_QWORD *a27)
{
  sub_100008848((uint64_t)&a26, a27);
  _Unwind_Resume(a1);
}

void sub_10122A7C0(uint64_t a1, FILE *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  _QWORD *v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  int8x8_t *v15;
  int8x8_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  int8x8_t *v23;
  int8x8_t v24;
  _DWORD *v25;
  _DWORD *v26;
  int8x8_t *v27;
  int8x8_t v28;
  __int32 v29;
  NSObject *v30;
  int v31;
  _BYTE *v32;
  uint64_t v33;
  int v34;
  void **v35;
  char *v36;
  char *v37;
  uint64_t **v38;
  _BOOL4 v39;
  int v40;
  int v41;
  unsigned int v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  const char *v48;
  __int128 v49;
  unint64_t v50;
  NSObject *v51;
  int v52;
  uint64_t v53;
  uint64_t **v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  double v59;
  int v60;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  void **v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  double v69;
  int v70;
  int v71;
  char *v72;
  char *v73;
  _BOOL4 v74;
  NSObject *v75;
  _BYTE *v76;
  NSObject *v77;
  int v78;
  uint64_t v79;
  _BYTE *v80;
  char *v81;
  char *v82;
  const char *v83;
  uint8_t *v84;
  const char *v85;
  uint8_t *v86;
  uint64_t v87;
  const char *v88;
  uint64_t **v89;
  const char *v90;
  __int128 v91;
  double v92;
  double v93;
  uint64_t v94;
  uint64_t v95;
  int8x8_t v96[2];
  void *v97[2];
  char v98;
  uint64_t v99;
  _BYTE v100[40];
  uint64_t v101;
  __int16 v102;
  uint64_t v103;
  __int16 v104;
  double v105;
  __int16 v106;
  double v107;
  __int16 v108;
  int v109;
  __int16 v110;
  int v111;
  _BYTE __p[20];
  void **v113;
  uint64_t v114;
  uint64_t v115;
  uint8_t buf[4];
  _BYTE v117[10];
  _BYTE v118[14];
  __int16 v119;
  _BYTE *v120;
  __int16 v121;
  uint64_t v122;
  __int16 v123;
  uint64_t v124;
  __int16 v125;
  double v126;
  __int16 v127;
  double v128;
  __int16 v129;
  int v130;
  __int16 v131;
  int v132;

  v9 = a1;
  sub_100810AD4(a1, (uint64_t)a2, a3);
  v99 = 0;
  v10 = *(unsigned __int16 *)(a3 + 2);
  if (v10 != 7)
  {
    if (v10 == 6)
    {
      *(_QWORD *)v100 = 0x200006ABBALL;
      memset(&v100[8], 0, 32);
      LODWORD(v101) = 0;
      sub_100F9FC20(a4, (uint64_t)v100);
      v11 = (_QWORD *)(v9 + 344);
      *(_QWORD *)(v9 + 352) = *(_QWORD *)(v9 + 344);
      sub_101231100((char **)(v9 + 344), *(unsigned int *)&v100[12]);
      v12 = (char *)sub_100812460(v9, a2, a3, 0, *(int *)&v100[12], *(int *)&v100[16]);
      if (v12)
      {
        v96[0] = 0;
        v96[1].i32[0] = 0;
        if (*(_DWORD *)&v100[12])
        {
          v13 = 0;
          do
          {
            sub_100F9F658((int8x8_t *)&v12[v13 * *(unsigned int *)&v100[16]], v96);
            v15 = *(int8x8_t **)(v9 + 352);
            v14 = *(_QWORD *)(v9 + 360);
            if ((unint64_t)v15 >= v14)
            {
              v18 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v15 - *v11) >> 2);
              v19 = v18 + 1;
              if (v18 + 1 > 0x1555555555555555)
                sub_100259694();
              v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - *v11) >> 2);
              if (2 * v20 > v19)
                v19 = 2 * v20;
              if (v20 >= 0xAAAAAAAAAAAAAAALL)
                v21 = 0x1555555555555555;
              else
                v21 = v19;
              if (v21)
                v22 = (char *)sub_100821B78(v9 + 360, v21);
              else
                v22 = 0;
              v23 = (int8x8_t *)&v22[12 * v18];
              v24 = v96[0];
              v23[1].i32[0] = v96[1].i32[0];
              *v23 = v24;
              v26 = *(_DWORD **)(v9 + 344);
              v25 = *(_DWORD **)(v9 + 352);
              v27 = v23;
              if (v25 != v26)
              {
                do
                {
                  v28 = *(int8x8_t *)(v25 - 3);
                  v25 -= 3;
                  v29 = v25[2];
                  *(int8x8_t *)((char *)v27 - 12) = v28;
                  v27 = (int8x8_t *)((char *)v27 - 12);
                  v27[1].i32[0] = v29;
                }
                while (v25 != v26);
                v25 = (_DWORD *)*v11;
              }
              v17 = (char *)&v23[1] + 4;
              *(_QWORD *)(v9 + 344) = v27;
              *(_QWORD *)(v9 + 352) = (char *)v23 + 12;
              *(_QWORD *)(v9 + 360) = &v22[12 * v21];
              if (v25)
                operator delete(v25);
            }
            else
            {
              v16 = v96[0];
              v15[1].i32[0] = v96[1].i32[0];
              *v15 = v16;
              v17 = (char *)&v15[1] + 4;
            }
            *(_QWORD *)(v9 + 352) = v17;
            if (!*(_BYTE *)(a5 + 9))
            {
              if (qword_1022A02D0 != -1)
                dispatch_once(&qword_1022A02D0, &stru_1021AA220);
              v30 = qword_1022A02D8;
              if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
              {
                v31 = *(_DWORD *)&v100[12];
                sub_100F9FB14((unsigned int *)v96, __p);
                v32 = __p;
                if (SBYTE3(v113) < 0)
                  v32 = *(_BYTE **)__p;
                *(_DWORD *)buf = 134218498;
                *(_QWORD *)v117 = v13;
                *(_WORD *)&v117[8] = 1024;
                *(_DWORD *)v118 = v31;
                *(_WORD *)&v118[4] = 2080;
                *(_QWORD *)&v118[6] = v32;
                _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "TILE: index entry, %3lu, %3u, %s", buf, 0x1Cu);
                if (SBYTE3(v113) < 0)
                  operator delete(*(void **)__p);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A02D0 != -1)
                  dispatch_once(&qword_1022A02D0, &stru_1021AA220);
                v33 = qword_1022A02D8;
                v34 = *(_DWORD *)&v100[12];
                sub_100F9FB14((unsigned int *)v96, v97);
                v35 = v97;
                if (v98 < 0)
                  v35 = (void **)v97[0];
                *(_DWORD *)__p = 134218498;
                *(_QWORD *)&__p[4] = v13;
                *(_WORD *)&__p[12] = 1024;
                *(_DWORD *)&__p[14] = v34;
                *(_WORD *)&__p[18] = 2080;
                v113 = v35;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v33, 2, "TILE: index entry, %3lu, %3u, %s", __p, 28, v88);
                v37 = v36;
                if (v98 < 0)
                  operator delete(v97[0]);
                sub_100512490("Generic", 1, 0, 2, "virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, CLTilesManager_Type::KeyLatLonEntry_CDMA>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CDMA]", "%s\n", v37);
                if (v37 != (char *)buf)
                  free(v37);
              }
            }
            ++v13;
          }
          while (v13 < *(unsigned int *)&v100[12]);
        }
      }
      goto LABEL_82;
    }
    v47 = 0;
    goto LABEL_57;
  }
  *(_DWORD *)__p = 502714;
  *(_OWORD *)&__p[4] = xmmword_101C47CA0;
  v113 = 0;
  v115 = 0;
  v114 = 0;
  sub_100F9FC20(a4, (uint64_t)__p);
  v38 = (uint64_t **)(v9 + 368);
  sub_100008848(v9 + 368, *(_QWORD **)(v9 + 376));
  *(_QWORD *)(v9 + 376) = 0;
  *(_QWORD *)(v9 + 384) = 0;
  *(_QWORD *)(v9 + 368) = v9 + 376;
  v93 = *(double *)&v9;
  if (!*(_BYTE *)(a5 + 9))
  {
    memset(v96, 0, 14);
    v48 = (const char *)sub_100812460(v9, a2, a3, 0, *(int *)&__p[12], *(int *)&__p[16]);
    v12 = (char *)v48;
    if (!v48)
    {
LABEL_82:
      v47 = 0;
      goto LABEL_83;
    }
    if (*(_DWORD *)&__p[12])
    {
      v50 = 0;
      *(_QWORD *)&v49 = 134220290;
      v91 = v49;
      v90 = v48;
      do
      {
        sub_100F9F4E4((int8x8_t *)&v12[v50 * *(unsigned int *)&__p[16]], v96);
        sub_101231AB8(v38, (int *)v96, (uint64_t *)v96);
        v94 = 0;
        v95 = 0;
        sub_100FA6940(v9, v96[1].u16[0], v96[1].u16[1], (double *)&v95, (double *)&v94);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021AA220);
        v51 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
        {
          v52 = *(_DWORD *)&__p[12];
          v53 = *(_QWORD *)(v9 + 384);
          sub_100F9F9D8((unsigned int *)v96, v100);
          v54 = v38;
          if (v100[23] >= 0)
            v55 = v100;
          else
            v55 = *(_BYTE **)v100;
          v56 = v94;
          v57 = v95;
          v58 = (*(double (**)(uint64_t))(*(_QWORD *)v9 + 56))(v9);
          v59 = (*(double (**)(uint64_t))(*(_QWORD *)v9 + 64))(v9);
          v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 80))(v9);
          v61 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 72))(v9);
          *(_DWORD *)buf = v91;
          *(_QWORD *)v117 = v50;
          *(_WORD *)&v117[8] = 1024;
          *(_DWORD *)v118 = v52;
          *(_WORD *)&v118[4] = 2048;
          *(_QWORD *)&v118[6] = v53;
          v119 = 2080;
          v120 = v55;
          v121 = 2048;
          v122 = v57;
          v123 = 2048;
          v124 = v56;
          v125 = 2048;
          v126 = v58;
          v127 = 2048;
          v128 = v59;
          v129 = 1024;
          v130 = v60;
          v131 = 1024;
          v132 = v61;
          _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "TILE: entry, %3lu, %3u, %3lu, %s, loc, %.8lf, %.8lf, delta, %.5lf, %.5lf, grid, %u, %u", buf, 0x5Au);
          if ((v100[23] & 0x80000000) != 0)
            operator delete(*(void **)v100);
          v38 = v54;
          v12 = (char *)v90;
          *(double *)&v9 = v93;
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_1021AA220);
          v62 = qword_1022A02D8;
          v63 = *(_DWORD *)&__p[12];
          v64 = *(_QWORD *)(v9 + 384);
          sub_100F9F9D8((unsigned int *)v96, v97);
          v89 = v38;
          if (v98 >= 0)
            v65 = v97;
          else
            v65 = (void **)v97[0];
          v66 = v94;
          v67 = v95;
          v68 = (*(double (**)(uint64_t))(*(_QWORD *)v9 + 56))(v9);
          v69 = (*(double (**)(uint64_t))(*(_QWORD *)v9 + 64))(v9);
          v70 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 80))(v9);
          v71 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 72))(v9);
          *(_DWORD *)v100 = v91;
          *(_QWORD *)&v100[4] = v50;
          *(_WORD *)&v100[12] = 1024;
          *(_DWORD *)&v100[14] = v63;
          *(_WORD *)&v100[18] = 2048;
          *(_QWORD *)&v100[20] = v64;
          *(_WORD *)&v100[28] = 2080;
          *(_QWORD *)&v100[30] = v65;
          *(_WORD *)&v100[38] = 2048;
          v101 = v67;
          v102 = 2048;
          v103 = v66;
          v104 = 2048;
          v105 = v68;
          v106 = 2048;
          v107 = v69;
          v108 = 1024;
          v109 = v70;
          v110 = 1024;
          v111 = v71;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v62, 2, "TILE: entry, %3lu, %3u, %3lu, %s, loc, %.8lf, %.8lf, delta, %.5lf, %.5lf, grid, %u, %u", v100, 90, v89, v90, *(double *)&v91, *((double *)&v91 + 1), v92, v93, v94, v95);
          v73 = v72;
          if (v98 < 0)
            operator delete(v97[0]);
          sub_100512490("Generic", 1, 0, 2, "virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, CLTilesManager_Type::KeyLatLonEntry_CDMA>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CDMA]", "%s\n", v73);
          v38 = (uint64_t **)v88;
          if (v73 != (char *)buf)
            free(v73);
        }
        ++v50;
      }
      while (v50 < *(unsigned int *)&__p[12]);
    }
LABEL_101:
    v47 = 0;
    v78 = 1;
    goto LABEL_102;
  }
  v39 = sub_101231ECC(v9, (int **)(v9 + 344), (_DWORD *)&v99 + 1, &v99);
  v41 = v99;
  v40 = HIDWORD(v99);
  v42 = v99 - HIDWORD(v99) + 1;
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021AA220);
  v43 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)v117 = v42;
    *(_WORD *)&v117[4] = 1024;
    *(_DWORD *)&v117[6] = v40;
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "TILE: searched, numOfEntries, %u, offsetEntries, %d", buf, 0xEu);
  }
  v44 = sub_1001BFF7C(115, 2);
  if ((_DWORD)v44)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AA220);
    *(_DWORD *)v100 = 67109376;
    *(_DWORD *)&v100[4] = v42;
    *(_WORD *)&v100[8] = 1024;
    *(_DWORD *)&v100[10] = v40;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: searched, numOfEntries, %u, offsetEntries, %d", v100, 14);
    v84 = (uint8_t *)v83;
    v44 = sub_100512490("Generic", 1, 0, 2, "virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, CLTilesManager_Type::KeyLatLonEntry_CDMA>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CDMA]", "%s\n", v83);
    if (v84 != buf)
      free(v84);
  }
  if ((v41 + 1) >= *(_DWORD *)&__p[12])
    v47 = *(_DWORD *)&__p[12] - v40;
  else
    v47 = v42;
  if (!v47)
  {
LABEL_57:
    v12 = 0;
    goto LABEL_83;
  }
  if (v47 + v40 > *(_DWORD *)&__p[12])
    sub_101947C14(v44, v45, v46);
  v12 = (char *)sub_100812460(v9, a2, a3, v40, v47, *(int *)&__p[16]);
  if (!v12)
    goto LABEL_82;
  *(_QWORD *)&v100[6] = 0;
  *(_QWORD *)v100 = 0;
  if (!v39)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AA220);
    v77 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEBUG, "TILE: avoid data search", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AA220);
      LOWORD(v97[0]) = 0;
      LODWORD(v87) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: avoid data search", v97, v87);
      v86 = (uint8_t *)v85;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, CLTilesManager_Type::KeyLatLonEntry_CDMA>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CDMA]", "%s\n", v85);
      if (v86 != buf)
        free(v86);
      v47 = 0;
      v78 = 1;
      goto LABEL_102;
    }
    goto LABEL_101;
  }
  if ((sub_101232528(v9, (uint64_t)v12, v47, *(int *)&__p[16], (_DWORD *)(v9 + 328), v100) & 1) != 0)
  {
    sub_101231AB8(v38, (int *)v100, (uint64_t *)v100);
LABEL_83:
    v74 = 1;
    goto LABEL_84;
  }
  v78 = 0;
LABEL_102:
  v74 = v78 != 0;
LABEL_84:
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021AA220);
  v75 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    sub_100F9F9D8((unsigned int *)(v9 + 328), v100);
    v76 = v100[23] >= 0 ? v100 : *(_BYTE **)v100;
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)v117 = v74;
    *(_WORD *)&v117[4] = 1024;
    *(_DWORD *)&v117[6] = v47;
    *(_WORD *)v118 = 2080;
    *(_QWORD *)&v118[2] = v76;
    _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEBUG, "TILE: getLocationByKey, isFound, %d, searchedArea, %d, key, %s", buf, 0x18u);
    if ((v100[23] & 0x80000000) != 0)
      operator delete(*(void **)v100);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AA220);
    v79 = qword_1022A02D8;
    sub_100F9F9D8((unsigned int *)(v9 + 328), __p);
    if (SBYTE3(v113) >= 0)
      v80 = __p;
    else
      v80 = *(_BYTE **)__p;
    *(_DWORD *)v100 = 67109634;
    *(_DWORD *)&v100[4] = v74;
    *(_WORD *)&v100[8] = 1024;
    *(_DWORD *)&v100[10] = v47;
    *(_WORD *)&v100[14] = 2080;
    *(_QWORD *)&v100[16] = v80;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v79, 2, "TILE: getLocationByKey, isFound, %d, searchedArea, %d, key, %s", v100, 24, v88);
    v82 = v81;
    if (SBYTE3(v113) < 0)
      operator delete(*(void **)__p);
    sub_100512490("Generic", 1, 0, 2, "virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, CLTilesManager_Type::KeyLatLonEntry_CDMA>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CDMA]", "%s\n", v82);
    if (v82 != (char *)buf)
      free(v82);
  }
  if (v12)
    free(v12);
}

void sub_10122B5C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10122B5F8(uint64_t a1, int *a2, _QWORD *a3)
{
  uint64_t **v6;
  uint64_t v7;
  _QWORD **v8;
  uint64_t v9;
  _BOOL8 v10;
  NSObject *v11;
  _BYTE *v12;
  int8x8_t *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  NSObject *v17;
  NSObject *v18;
  _BYTE *v19;
  int v20;
  _BYTE *v21;
  unsigned int v22;
  _BYTE *v23;
  void **v24;
  _BYTE *v25;
  int v26;
  void **v27;
  unsigned int v28;
  unsigned int v29;
  void **v30;
  void **v31;
  char *v32;
  char *v33;
  NSObject *v34;
  const char *v35;
  _BYTE *v36;
  uint64_t v37;
  const char *v38;
  _BYTE *v39;
  char *v40;
  NSObject *v41;
  int v42;
  int v43;
  _BYTE *v44;
  _BYTE *v45;
  _BYTE *v46;
  uint64_t v47;
  int v48;
  _BYTE *v49;
  _BYTE *v50;
  void **v51;
  char *v52;
  NSObject *v53;
  int v54;
  int v55;
  _BYTE *v56;
  _BYTE *v57;
  _BYTE *v58;
  uint64_t v59;
  int v60;
  _BYTE *v61;
  _BYTE *v62;
  void **v63;
  char *v64;
  NSObject *v65;
  const char *v66;
  _BYTE *v67;
  uint64_t v68;
  const char *v69;
  _BYTE *v70;
  char *v71;
  NSObject *v72;
  _BYTE *v73;
  const char *v74;
  _BYTE *v75;
  uint64_t v76;
  _QWORD **v77;
  uint64_t v78;
  NSObject *v79;
  int v80;
  _BYTE *v81;
  _BYTE *v82;
  _BYTE *v83;
  uint64_t v85;
  _BYTE *v86;
  char *v87;
  char *v88;
  const char *v89;
  char *v90;
  _BOOL4 v91;
  uint64_t v92;
  int v93;
  _BYTE *v94;
  _BYTE *v95;
  void **v96;
  char *v97;
  char *v98;
  unsigned int v99;
  _BYTE *v100;
  const char *v101;
  void **v102;
  char *v103;
  uint64_t v104;
  unsigned int v105;
  const char *v106;
  const char *v107;
  unsigned int v108;
  void *v109[2];
  char v110;
  unsigned int v111;
  unsigned int v112;
  uint64_t v113;
  int v114;
  void *v115[2];
  char v116;
  int v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  int v125;
  int v126;
  uint64_t v127;
  void *v128[2];
  char v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  _BYTE v134[14];
  _BYTE v135[36];
  _BYTE v136[10];
  _BYTE v137[12];
  __int16 v138;
  _BYTE *v139;
  char v140;
  _BYTE buf[12];
  int v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  _BYTE __p[14];
  _BYTE v149[36];
  _QWORD v150[198];

  v6 = (uint64_t **)(a1 + 368);
  v7 = sub_101231DFC(a1 + 368, a2);
  v8 = (_QWORD **)v7;
  if (a1 + 376 != v7)
  {
    v9 = *(_QWORD *)(v7 + 25);
    *(_QWORD *)((char *)a3 + 6) = *(_QWORD *)(v7 + 31);
    *a3 = v9;
    return 1;
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021AA220);
  v11 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    sub_100F9F9D8((unsigned int *)a2, __p);
    v12 = v149[9] >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "TILE:  getLocationByKey_mmap, key, %s", buf, 0xCu);
    if ((v149[9] & 0x80000000) != 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AA220);
    v85 = qword_1022A02D8;
    sub_100F9F9D8((unsigned int *)a2, buf);
    if ((SBYTE7(v143) & 0x80u) == 0)
      v86 = buf;
    else
      v86 = *(_BYTE **)buf;
    *(_DWORD *)v134 = 136315138;
    *(_QWORD *)&v134[4] = v86;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v85, 2, "TILE:  getLocationByKey_mmap, key, %s", v134);
    v88 = v87;
    if (SBYTE7(v143) < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, CLTilesManager_Type::KeyLatLonEntry_CDMA>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CDMA]", "%s\n", v88);
    if (v88 != __p)
      free(v88);
  }
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a1 + 344);
  sub_1015A2E04(v128, "");
  v130 = 0;
  v131 = -1;
  v132 = 0;
  v133 = 0;
  if ((sub_10080F1CC(a1, (uint64_t)v128) & 1) == 0)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AA220);
    v17 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__p = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "TILE: getLocationByKey_mmap, failed to mmap, #CloneMe", __p, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AA220);
      *(_WORD *)buf = 0;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A02D8, 16, "TILE: getLocationByKey_mmap, failed to mmap, #CloneMe", buf, 2);
      v90 = (char *)v89;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, CLTilesManager_Type::KeyLatLonEntry_CDMA>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CDMA]", "%s\n", v89);
      if (v90 != __p)
        free(v90);
    }
    v10 = 0;
    goto LABEL_179;
  }
  v108 = 0;
  v13 = 0;
  v127 = 0;
  v125 = 0;
  v126 = 43962;
  v122 = 0x200006ABBALL;
  v123 = 0u;
  v124 = 0u;
  *(_QWORD *)&buf[4] = 184;
  *(_DWORD *)buf = 371642;
  v142 = 381;
  v143 = 0u;
  v144 = 0u;
  v146 = 0;
  v145 = 0;
  v147 = 0;
  v117 = 502714;
  v118 = xmmword_101C47CA0;
  v119 = 0;
  v120 = 0;
  v121 = 0;
  while (1)
  {
    while (1)
    {
      v14 = v133;
      if (!sub_10080F354(a1, v128, &v126))
        goto LABEL_162;
      if (HIWORD(v126) == 7)
        break;
      if (HIWORD(v126) == 6)
      {
        sub_100F9FC20(v132 + v14, (uint64_t)&v122);
        v13 = (int8x8_t *)(v14 + v132 + v127 + 12);
        if ((unint64_t)v13 + (DWORD2(v123) * DWORD1(v123)) > v130 + v132)
        {
          if (!*(_BYTE *)(a1 + 392))
            goto LABEL_162;
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_1021AA220);
          v53 = qword_1022A02D8;
          if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
          {
            v54 = DWORD1(v123);
            v106 = sub_1001CC818(*(_DWORD *)(a1 + 48));
            LODWORD(v107) = v54;
            sub_101231B40((uint64_t)buf, v134);
            v55 = v135[9];
            v56 = *(_BYTE **)v134;
            sub_100F9F9D8((unsigned int *)a2, v137);
            v57 = v134;
            if (v55 < 0)
              v57 = v56;
            v58 = v137;
            if (v140 < 0)
              v58 = *(_BYTE **)v137;
            *(_DWORD *)__p = 134284803;
            *(_QWORD *)&__p[4] = v13;
            *(_WORD *)&__p[12] = 1025;
            *(_DWORD *)v149 = (_DWORD)v107;
            *(_WORD *)&v149[4] = 2049;
            *(_QWORD *)&v149[6] = v14;
            *(_WORD *)&v149[14] = 2081;
            *(_QWORD *)&v149[16] = v106;
            *(_WORD *)&v149[24] = 2081;
            *(_QWORD *)&v149[26] = v57;
            *(_WORD *)&v149[34] = 2081;
            v150[0] = v58;
            _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_FAULT, "TILE: pIndexEntries passes valid mmapped region, pIndexEntries:%{private}lu, numOfEntries:%{private}u, atOffset:%{private}lld, %{private}s, %{private}s, %{private}s", __p, 0x3Au);
            if (v140 < 0)
              operator delete(*(void **)v137);
            if ((v135[9] & 0x80000000) != 0)
              operator delete(*(void **)v134);
          }
          if (!sub_1001BFF7C(115, 0))
            goto LABEL_162;
          bzero(__p, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_1021AA220);
          v59 = qword_1022A02D8;
          LODWORD(v107) = DWORD1(v123);
          v106 = sub_1001CC818(*(_DWORD *)(a1 + 48));
          sub_101231B40((uint64_t)buf, v137);
          v60 = v140;
          v61 = *(_BYTE **)v137;
          sub_100F9F9D8((unsigned int *)a2, v115);
          v62 = v137;
          if (v60 < 0)
            v62 = v61;
          v63 = v115;
          if (v116 < 0)
            v63 = (void **)v115[0];
          *(_DWORD *)v134 = 134284803;
          *(_QWORD *)&v134[4] = v13;
          *(_WORD *)&v134[12] = 1025;
          *(_DWORD *)v135 = (_DWORD)v107;
          *(_WORD *)&v135[4] = 2049;
          *(_QWORD *)&v135[6] = v14;
          *(_WORD *)&v135[14] = 2081;
          *(_QWORD *)&v135[16] = v106;
          *(_WORD *)&v135[24] = 2081;
          *(_QWORD *)&v135[26] = v62;
          *(_WORD *)&v135[34] = 2081;
          *(_QWORD *)v136 = v63;
          _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v59, 17, "TILE: pIndexEntries passes valid mmapped region, pIndexEntries:%{private}lu, numOfEntries:%{private}u, atOffset:%{private}lld, %{private}s, %{private}s, %{private}s", v134, 58);
          v33 = v64;
          if (v116 < 0)
            operator delete(v115[0]);
          if (v140 < 0)
            operator delete(*(void **)v137);
          goto LABEL_147;
        }
      }
      else
      {
        if (HIWORD(v126) != 5)
        {
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_1021AA220);
          v34 = qword_1022A02D8;
          if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_ERROR))
          {
            v35 = sub_1001CC818(*(_DWORD *)(a1 + 48));
            sub_101231B40((uint64_t)buf, v134);
            v36 = v135[9] >= 0 ? v134 : *(_BYTE **)v134;
            *(_DWORD *)__p = 134218498;
            *(_QWORD *)&__p[4] = v14;
            *(_WORD *)&__p[12] = 2080;
            *(_QWORD *)v149 = v35;
            *(_WORD *)&v149[8] = 2080;
            *(_QWORD *)&v149[10] = v36;
            _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "TILE: unregconized sectionId, %lld, %s, %s", __p, 0x20u);
            if ((v135[9] & 0x80000000) != 0)
              operator delete(*(void **)v134);
          }
          if (!sub_1001BFF7C(115, 0))
            goto LABEL_162;
          bzero(__p, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_1021AA220);
          v37 = qword_1022A02D8;
          v38 = sub_1001CC818(*(_DWORD *)(a1 + 48));
          sub_101231B40((uint64_t)buf, v137);
          if (v140 >= 0)
            v39 = v137;
          else
            v39 = *(_BYTE **)v137;
          *(_DWORD *)v134 = 134218498;
          *(_QWORD *)&v134[4] = v14;
          *(_WORD *)&v134[12] = 2080;
          *(_QWORD *)v135 = v38;
          *(_WORD *)&v135[8] = 2080;
          *(_QWORD *)&v135[10] = v39;
          _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v37, 16, "TILE: unregconized sectionId, %lld, %s, %s", v134, 32, v106);
          v33 = v40;
          if (v140 < 0)
            operator delete(*(void **)v137);
LABEL_147:
          sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, CLTilesManager_Type::KeyLatLonEntry_CDMA>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CDMA]", "%s\n", v33);
          goto LABEL_221;
        }
        sub_100F9F120(v132 + v14, (uint64_t)buf);
      }
    }
    sub_100F9FC20(v132 + v14, (uint64_t)&v117);
    v15 = v14 + v132 + v127 + 12;
    if (v15 + (unint64_t)(HIDWORD(v118) * DWORD2(v118)) > v130 + v132)
    {
      if (!*(_BYTE *)(a1 + 392))
        goto LABEL_162;
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AA220);
      v41 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        v42 = DWORD2(v118);
        v106 = sub_1001CC818(*(_DWORD *)(a1 + 48));
        LODWORD(v107) = v42;
        sub_101231B40((uint64_t)buf, v134);
        v43 = v135[9];
        v44 = *(_BYTE **)v134;
        sub_100F9F9D8((unsigned int *)a2, v137);
        v45 = v134;
        if (v43 < 0)
          v45 = v44;
        v46 = v137;
        if (v140 < 0)
          v46 = *(_BYTE **)v137;
        *(_DWORD *)__p = 134284803;
        *(_QWORD *)&__p[4] = v15;
        *(_WORD *)&__p[12] = 1025;
        *(_DWORD *)v149 = (_DWORD)v107;
        *(_WORD *)&v149[4] = 2049;
        *(_QWORD *)&v149[6] = v14;
        *(_WORD *)&v149[14] = 2081;
        *(_QWORD *)&v149[16] = v106;
        *(_WORD *)&v149[24] = 2080;
        *(_QWORD *)&v149[26] = v45;
        *(_WORD *)&v149[34] = 2081;
        v150[0] = v46;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_FAULT, "TILE: pDataEntries passes valid mmapped region, pDataEntries:%{private}lu, numOfEntries:%{private}u, atOffset:%{private}lld, %{private}s, %{privat}s, %{private}s", __p, 0x3Au);
        if (v140 < 0)
          operator delete(*(void **)v137);
        if ((v135[9] & 0x80000000) != 0)
          operator delete(*(void **)v134);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_162;
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AA220);
      v47 = qword_1022A02D8;
      LODWORD(v107) = DWORD2(v118);
      v106 = sub_1001CC818(*(_DWORD *)(a1 + 48));
      sub_101231B40((uint64_t)buf, v137);
      v48 = v140;
      v49 = *(_BYTE **)v137;
      sub_100F9F9D8((unsigned int *)a2, v115);
      v50 = v137;
      if (v48 < 0)
        v50 = v49;
      v51 = v115;
      if (v116 < 0)
        v51 = (void **)v115[0];
      *(_DWORD *)v134 = 134284803;
      *(_QWORD *)&v134[4] = v15;
      *(_WORD *)&v134[12] = 1025;
      *(_DWORD *)v135 = (_DWORD)v107;
      *(_WORD *)&v135[4] = 2049;
      *(_QWORD *)&v135[6] = v14;
      *(_WORD *)&v135[14] = 2081;
      *(_QWORD *)&v135[16] = v106;
      *(_WORD *)&v135[24] = 2080;
      *(_QWORD *)&v135[26] = v50;
      *(_WORD *)&v135[34] = 2081;
      *(_QWORD *)v136 = v51;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v47, 17, "TILE: pDataEntries passes valid mmapped region, pDataEntries:%{private}lu, numOfEntries:%{private}u, atOffset:%{private}lld, %{private}s, %{privat}s, %{private}s", v134, 58);
      v33 = v52;
      if (v116 < 0)
        operator delete(v115[0]);
      if (v140 < 0)
        operator delete(*(void **)v137);
      goto LABEL_147;
    }
    sub_100008848((uint64_t)v6, *v8);
    *(_QWORD *)(a1 + 384) = 0;
    *(_QWORD *)(a1 + 368) = v8;
    *v8 = 0;
    v113 = 0;
    v114 = 0;
    sub_100F9F780(&v113, a2);
    v111 = DWORD2(v118);
    v112 = 0;
    if (!v13)
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AA220);
      v65 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_ERROR))
      {
        v66 = sub_1001CC818(*(_DWORD *)(a1 + 48));
        sub_101231B40((uint64_t)buf, __p);
        v67 = v149[9] >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)v134 = 136380931;
        *(_QWORD *)&v134[4] = v66;
        *(_WORD *)&v134[12] = 2081;
        *(_QWORD *)v135 = v67;
        _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_ERROR, "TILE: no index section before entries section, %{private}s, %{private}s", v134, 0x16u);
        if ((v149[9] & 0x80000000) != 0)
          operator delete(*(void **)__p);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_162;
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AA220);
      v68 = qword_1022A02D8;
      v69 = sub_1001CC818(*(_DWORD *)(a1 + 48));
      sub_101231B40((uint64_t)buf, v134);
      if (v135[9] >= 0)
        v70 = v134;
      else
        v70 = *(_BYTE **)v134;
      *(_DWORD *)v137 = 136380931;
      *(_QWORD *)&v137[4] = v69;
      v138 = 2081;
      v139 = v70;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v68, 16, "TILE: no index section before entries section, %{private}s, %{private}s", v137, 22);
      v33 = v71;
      if ((v135[9] & 0x80000000) != 0)
        operator delete(*(void **)v134);
      goto LABEL_147;
    }
    v16 = sub_1012327A4(a1, v13, DWORD1(v123), SDWORD2(v123), &v113, &v112, &v111);
    if (v112 >= DWORD2(v118) || v111 >= DWORD2(v118))
      break;
    if (!v16)
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AA220);
      v72 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(v106) = v112;
        LODWORD(v107) = v111;
        sub_100F9FB14((unsigned int *)&v113, v134);
        if (v135[9] >= 0)
          v73 = v134;
        else
          v73 = *(_BYTE **)v134;
        v74 = sub_1001CC818(*(_DWORD *)(a1 + 48));
        sub_101231B40((uint64_t)buf, v137);
        if (v140 >= 0)
          v75 = v137;
        else
          v75 = *(_BYTE **)v137;
        *(_DWORD *)__p = 67175683;
        *(_DWORD *)&__p[4] = (_DWORD)v106;
        *(_WORD *)&__p[8] = 1025;
        *(_DWORD *)&__p[10] = (_DWORD)v107;
        *(_WORD *)v149 = 2081;
        *(_QWORD *)&v149[2] = v73;
        *(_WORD *)&v149[10] = 2081;
        *(_QWORD *)&v149[12] = v74;
        *(_WORD *)&v149[20] = 2081;
        *(_QWORD *)&v149[22] = v75;
        _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEBUG, "TILE: not found in index, a, %{private}u, b, %{private}u, %{private}s, %{private}s, %{private}s", __p, 0x2Cu);
        if (v140 < 0)
          operator delete(*(void **)v137);
        if ((v135[9] & 0x80000000) != 0)
          operator delete(*(void **)v134);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_162;
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AA220);
      v107 = (const char *)qword_1022A02D8;
      v99 = v112;
      LODWORD(v106) = v111;
      sub_100F9FB14((unsigned int *)&v113, v137);
      if (v140 >= 0)
        v100 = v137;
      else
        v100 = *(_BYTE **)v137;
      v101 = sub_1001CC818(*(_DWORD *)(a1 + 48));
      sub_101231B40((uint64_t)buf, v115);
      if (v116 >= 0)
        v102 = v115;
      else
        v102 = (void **)v115[0];
      *(_DWORD *)v134 = 67175683;
      *(_DWORD *)&v134[4] = v99;
      *(_WORD *)&v134[8] = 1025;
      *(_DWORD *)&v134[10] = (_DWORD)v106;
      *(_WORD *)v135 = 2081;
      *(_QWORD *)&v135[2] = v100;
      *(_WORD *)&v135[10] = 2081;
      *(_QWORD *)&v135[12] = v101;
      *(_WORD *)&v135[20] = 2081;
      *(_QWORD *)&v135[22] = v102;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v107, 2, "TILE: not found in index, a, %{private}u, b, %{private}u, %{private}s, %{private}s, %{private}s", v134, 44);
      v33 = v103;
      if (v116 < 0)
        operator delete(v115[0]);
      if (v140 < 0)
        operator delete(*(void **)v137);
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, CLTilesManager_Type::KeyLatLonEntry_CDMA>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CDMA]", "%s\n", v33);
LABEL_221:
      if (v33 != __p)
        free(v33);
      goto LABEL_162;
    }
    v108 = v111 - v112 + 1;
    if (!sub_101232528(a1, v15 + HIDWORD(v118) * v112, v108, SHIDWORD(v118), a2, a3))
      goto LABEL_162;
    sub_101231AB8(v6, (int *)a3, a3);
  }
  if (*(_BYTE *)(a1 + 392))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AA220);
    v18 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v19 = v134;
      sub_100F9FB14((unsigned int *)&v113, v134);
      if (v135[9] < 0)
        v19 = *(_BYTE **)v134;
      v107 = sub_1001CC818(*(_DWORD *)(a1 + 48));
      sub_101231B40((uint64_t)buf, v137);
      v20 = v140;
      v21 = *(_BYTE **)v137;
      v22 = v112;
      v105 = v111;
      LODWORD(v106) = DWORD2(v118);
      sub_100F9F9D8((unsigned int *)a2, v115);
      v23 = v137;
      if (v20 < 0)
        v23 = v21;
      v24 = v115;
      if (v116 < 0)
        v24 = (void **)v115[0];
      *(_DWORD *)__p = 136382211;
      *(_QWORD *)&__p[4] = v19;
      *(_WORD *)&__p[12] = 2081;
      *(_QWORD *)v149 = v107;
      *(_WORD *)&v149[8] = 2081;
      *(_QWORD *)&v149[10] = v23;
      *(_WORD *)&v149[18] = 1025;
      *(_DWORD *)&v149[20] = v22;
      *(_WORD *)&v149[24] = 1025;
      *(_DWORD *)&v149[26] = v105;
      *(_WORD *)&v149[30] = 1025;
      *(_DWORD *)&v149[32] = (_DWORD)v106;
      LOWORD(v150[0]) = 2081;
      *(_QWORD *)((char *)v150 + 2) = v24;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "TILE: invalid binary search %{private}s in %{private}s, %{private}s, a:%{private}u, b:%{private}u, max:%{private}u, %{private}s", __p, 0x3Cu);
      if (v116 < 0)
        operator delete(v115[0]);
      if (v140 < 0)
        operator delete(*(void **)v137);
      if ((v135[9] & 0x80000000) != 0)
        operator delete(*(void **)v134);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AA220);
      v107 = (const char *)qword_1022A02D8;
      v25 = v137;
      sub_100F9FB14((unsigned int *)&v113, v137);
      if (v140 < 0)
        v25 = *(_BYTE **)v137;
      v106 = sub_1001CC818(*(_DWORD *)(a1 + 48));
      sub_101231B40((uint64_t)buf, v115);
      v26 = v116;
      v27 = (void **)v115[0];
      v28 = v111;
      v29 = v112;
      HIDWORD(v104) = DWORD2(v118);
      sub_100F9F9D8((unsigned int *)a2, v109);
      v30 = v115;
      if (v26 < 0)
        v30 = v27;
      v31 = v109;
      if (v110 < 0)
        v31 = (void **)v109[0];
      *(_DWORD *)v134 = 136382211;
      *(_QWORD *)&v134[4] = v25;
      *(_WORD *)&v134[12] = 2081;
      *(_QWORD *)v135 = v106;
      *(_WORD *)&v135[8] = 2081;
      *(_QWORD *)&v135[10] = v30;
      *(_WORD *)&v135[18] = 1025;
      *(_DWORD *)&v135[20] = v29;
      *(_WORD *)&v135[24] = 1025;
      *(_DWORD *)&v135[26] = v28;
      *(_WORD *)&v135[30] = 1025;
      *(_DWORD *)&v135[32] = HIDWORD(v104);
      *(_WORD *)v136 = 2081;
      *(_QWORD *)&v136[2] = v31;
      LODWORD(v104) = 60;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v107, 17, "TILE: invalid binary search %{private}s in %{private}s, %{private}s, a:%{private}u, b:%{private}u, max:%{private}u, %{private}s", v134, v104);
      v33 = v32;
      if (v110 < 0)
        operator delete(v109[0]);
      if (v116 < 0)
        operator delete(v115[0]);
      if (v140 < 0)
        operator delete(*(void **)v137);
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, CLTilesManager_Type::KeyLatLonEntry_CDMA>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CDMA]", "%s\n", v33);
      goto LABEL_221;
    }
  }
LABEL_162:
  v76 = sub_101231DFC((uint64_t)v6, a2);
  v77 = (_QWORD **)v76;
  v10 = v8 != (_QWORD **)v76;
  if (v8 != (_QWORD **)v76)
  {
    v78 = *(_QWORD *)(v76 + 25);
    *(_QWORD *)((char *)a3 + 6) = *(_QWORD *)(v76 + 31);
    *a3 = v78;
  }
  if (v132)
    sub_10080F2AC(a1, (uint64_t)v128);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021AA220);
  v79 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    sub_100F9F9D8((unsigned int *)a2, v134);
    v80 = v135[9];
    v81 = *(_BYTE **)v134;
    sub_100F9F9D8((unsigned int *)a3, v137);
    v82 = v134;
    if (v80 < 0)
      v82 = v81;
    if (v140 >= 0)
      v83 = v137;
    else
      v83 = *(_BYTE **)v137;
    *(_DWORD *)__p = 67109890;
    *(_DWORD *)&__p[4] = v8 != v77;
    *(_WORD *)&__p[8] = 1024;
    *(_DWORD *)&__p[10] = v108;
    *(_WORD *)v149 = 2080;
    *(_QWORD *)&v149[2] = v82;
    *(_WORD *)&v149[10] = 2080;
    *(_QWORD *)&v149[12] = v83;
    _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEBUG, "TILE: isFound, %d, searchedArea, %u, key, %s, entry, %s", __p, 0x22u);
    if (v140 < 0)
      operator delete(*(void **)v137);
    if ((v135[9] & 0x80000000) != 0)
      operator delete(*(void **)v134);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AA220);
    v91 = v8 != v77;
    v92 = qword_1022A02D8;
    sub_100F9F9D8((unsigned int *)a2, v137);
    v93 = v140;
    v94 = *(_BYTE **)v137;
    sub_100F9F9D8((unsigned int *)a3, v115);
    v95 = v137;
    if (v93 < 0)
      v95 = v94;
    if (v116 >= 0)
      v96 = v115;
    else
      v96 = (void **)v115[0];
    *(_DWORD *)v134 = 67109890;
    *(_DWORD *)&v134[4] = v91;
    *(_WORD *)&v134[8] = 1024;
    *(_DWORD *)&v134[10] = v108;
    *(_WORD *)v135 = 2080;
    *(_QWORD *)&v135[2] = v95;
    *(_WORD *)&v135[10] = 2080;
    *(_QWORD *)&v135[12] = v96;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v92, 2, "TILE: isFound, %d, searchedArea, %u, key, %s, entry, %s", v134, 34, v106, v107);
    v98 = v97;
    if (v116 < 0)
      operator delete(v115[0]);
    if (v140 < 0)
      operator delete(*(void **)v137);
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, CLTilesManager_Type::KeyLatLonEntry_CDMA>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CDMA]", "%s\n", v98);
    if (v98 != __p)
      free(v98);
  }
LABEL_179:
  if (v129 < 0)
    operator delete(v128[0]);
  return v10;
}

void sub_10122CDA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a41 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL sub_10122CEF0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  _BYTE *v8;
  const char **v9;
  const char *v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  int v18;
  _BYTE *v19;
  _BYTE *v20;
  void **v21;
  uint64_t v23;
  _BYTE *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  int v28;
  void **v29;
  void **v30;
  void **v31;
  char *v32;
  char *v33;
  const char *v34;
  const char *v35;
  char *v36;
  const char *v37;
  void *v38[2];
  char v39;
  void *v40[2];
  char v41;
  const char *v42;
  char v43;
  char v44;
  uint64_t v45;
  _BYTE buf[14];
  __int16 v47;
  void **v48;
  __int16 v49;
  void **v50;
  std::string v51;
  _BYTE __p[14];
  __int16 v53;
  _BYTE *v54;
  __int16 v55;
  void **v56;

  v6 = *a2;
  *(_QWORD *)(a1 + 334) = *(uint64_t *)((char *)a2 + 6);
  *(_QWORD *)(a1 + 328) = v6;
  v43 = 0;
  v45 = nullsub_34(0);
  v42 = "search";
  v44 = 1;
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021AA220);
  v7 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    sub_100F9F9D8((unsigned int *)a2, __p);
    v8 = SHIBYTE(v54) >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TILE: getLocationByKey_traverse, key, %s", buf, 0xCu);
    if (SHIBYTE(v54) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AA220);
    v23 = qword_1022A02D8;
    sub_100F9F9D8((unsigned int *)a2, buf);
    if (SHIBYTE(v48) >= 0)
      v24 = buf;
    else
      v24 = *(_BYTE **)buf;
    LODWORD(v51.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v51.__r_.__value_.__r.__words + 4) = (std::string::size_type)v24;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v23, 2, "TILE: getLocationByKey_traverse, key, %s", (const char *)&v51);
    v26 = v25;
    if (SHIBYTE(v48) < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, CLTilesManager_Type::KeyLatLonEntry_CDMA>::getLocationByKey_traverse(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CDMA]", "%s\n", v26);
    if (v26 != __p)
      free(v26);
  }
  sub_100FA2C30(a1, &v51);
  v9 = (const char **)(a1 + 8);
  v10 = (const char *)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
    v10 = *v9;
  if (sub_1000B78B0(v10))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AA220);
    v11 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v12 = (const char *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v12 = *v9;
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "TILE: getLocationByKey_traverse, prefer local file name because it exists, %s", __p, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AA220);
      v34 = (const char *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v34 = *v9;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v34;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: getLocationByKey_traverse, prefer local file name because it exists, %s", buf);
      v36 = (char *)v35;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, CLTilesManager_Type::KeyLatLonEntry_CDMA>::getLocationByKey_traverse(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CDMA]", "%s\n", v35);
      if (v36 != __p)
        free(v36);
    }
    std::string::operator=(&v51, (const std::string *)(a1 + 8));
  }
  sub_100FA43A0((_QWORD *)a1, (uint64_t)&v51, (uint64_t)&v42);
  v13 = sub_101231DFC(a1 + 368, (int *)a2);
  v14 = v13;
  v15 = a1 + 376;
  if (a1 + 376 != v13)
  {
    v16 = *(_QWORD *)(v13 + 25);
    *(_QWORD *)(a3 + 6) = *(_QWORD *)(v13 + 31);
    *(_QWORD *)a3 = v16;
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021AA220);
  v17 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    sub_100F9F9D8((unsigned int *)a2, buf);
    v18 = SHIBYTE(v48);
    v19 = *(_BYTE **)buf;
    sub_100F9F9D8((unsigned int *)a3, v40);
    v20 = buf;
    if (v18 < 0)
      v20 = v19;
    if (v41 >= 0)
      v21 = v40;
    else
      v21 = (void **)v40[0];
    *(_DWORD *)__p = 67109890;
    *(_DWORD *)&__p[4] = v15 != v14;
    *(_WORD *)&__p[8] = 1024;
    *(_DWORD *)&__p[10] = 0;
    v53 = 2080;
    v54 = v20;
    v55 = 2080;
    v56 = v21;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "TILE: getLocationByKey_traverse, isFound, %d, searchedArea, %u, key, %s, entry, %s", __p, 0x22u);
    if (v41 < 0)
      operator delete(v40[0]);
    if (SHIBYTE(v48) < 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AA220);
    v27 = qword_1022A02D8;
    sub_100F9F9D8((unsigned int *)a2, v40);
    v28 = v41;
    v29 = (void **)v40[0];
    sub_100F9F9D8((unsigned int *)a3, v38);
    v30 = v40;
    if (v28 < 0)
      v30 = v29;
    if (v39 >= 0)
      v31 = v38;
    else
      v31 = (void **)v38[0];
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = v15 != v14;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = 0;
    v47 = 2080;
    v48 = v30;
    v49 = 2080;
    v50 = v31;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v27, 2, "TILE: getLocationByKey_traverse, isFound, %d, searchedArea, %u, key, %s, entry, %s", buf, 34, v37, (const char *)v38[0]);
    v33 = v32;
    if (v39 < 0)
      operator delete(v38[0]);
    if (v41 < 0)
      operator delete(v40[0]);
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, CLTilesManager_Type::KeyLatLonEntry_CDMA>::getLocationByKey_traverse(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CDMA]", "%s\n", v33);
    if (v33 != __p)
      free(v33);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  return v15 != v14;
}

void sub_10122D5A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10122D614(uint64_t a1)
{
  sub_101230D2C(a1);
  operator delete();
}

uint64_t sub_10122D638(uint64_t a1, std::string::value_type *a2)
{
  double Current;
  NSObject *v5;
  uint64_t v6;
  __int128 v7;
  const char *v8;
  uint64_t v9;
  clock_t v10;
  int v11;
  clock_t v12;
  clock_t v13;
  int v14;
  clock_t v15;
  int v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  const char *v22;
  const char *v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  char *v30;
  char *v31;
  NSObject *v32;
  int v34;
  const char *v35;
  const char *v36;
  uint8_t *v37;
  const char *v38;
  uint8_t *v39;
  uint64_t v40;
  __int128 v41;
  double v42;
  const char *v43;
  void *v44[2];
  char v45;
  uint64_t v46;
  uint64_t v47;
  _WORD v48[8];
  _QWORD v49[2];
  unsigned int v50[4];
  const char *v51;
  _QWORD *v52;
  uint64_t v53;
  _BYTE __p[28];
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  void **v60;
  uint8_t buf[4];
  _BYTE v62[24];
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  _BYTE *v68;

  Current = CFAbsoluteTimeGetCurrent();
  sub_100FA29E4(a1, a2);
  sub_100FA5198((uint64_t *)a1, "", a2, *(_DWORD *)(a1 + 48), 0, Current);
  sub_101232914((uint64_t *)&v51, a1 + 368);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021AA220);
  v5 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134218242;
    *(_QWORD *)v62 = v53;
    *(_WORD *)&v62[8] = 2080;
    *(_QWORD *)&v62[10] = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "TILE: result: tilestool: TEST_testBinarySearch, entries, %lu, file, %s", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AA220);
    *(_DWORD *)__p = 134218242;
    *(_QWORD *)&__p[4] = v53;
    *(_WORD *)&__p[12] = 2080;
    *(_QWORD *)&__p[14] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: result: tilestool: TEST_testBinarySearch, entries, %lu, file, %s", __p, 22);
    v37 = (uint8_t *)v36;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_LTE, CLTilesManager_Type::KeyLatLonEntry_LTE>::TEST_testBinarySearch(const char *) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_LTE, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_LTE]", "%s\n", v36);
    if (v37 != buf)
      free(v37);
  }
  v6 = a1 + 376;
  sub_100008848(a1 + 368, *(_QWORD **)(a1 + 376));
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 368) = a1 + 376;
  v8 = v51;
  v43 = (const char *)&v52;
  if (v51 != (const char *)&v52)
  {
    v9 = 0;
    *(_QWORD *)&v7 = 134219266;
    v41 = v7;
    while (1)
    {
      *(_QWORD *)v50 = *(_QWORD *)(v8 + 25);
      *(_QWORD *)((char *)&v50[1] + 2) = *(_QWORD *)(v8 + 31);
      memset(v49, 0, 14);
      v47 = 0;
      memset(v48, 0, 14);
      v46 = 0;
      sub_100008848(a1 + 368, *(_QWORD **)(a1 + 376));
      *(_QWORD *)(a1 + 376) = 0;
      *(_QWORD *)(a1 + 384) = 0;
      *(_QWORD *)(a1 + 368) = v6;
      v10 = clock();
      v11 = (*(uint64_t (**)(uint64_t, unsigned int *, _QWORD *))(*(_QWORD *)a1 + 192))(a1, v50, v49);
      v12 = clock();
      sub_100008848(a1 + 368, *(_QWORD **)(a1 + 376));
      *(_QWORD *)(a1 + 376) = 0;
      *(_QWORD *)(a1 + 384) = 0;
      *(_QWORD *)(a1 + 368) = v6;
      v13 = clock();
      v14 = (*(uint64_t (**)(uint64_t, unsigned int *, _WORD *))(*(_QWORD *)a1 + 184))(a1, v50, v48);
      v15 = clock();
      printf("tilestool: mmap, %lu, file, %lu\n", v15 - v13, v12 - v10);
      if (v11 != v14)
        break;
      v16 = (*(uint64_t (**)(uint64_t, unsigned int *, _QWORD *))(*(_QWORD *)a1 + 176))(a1, v50, v49);
      if (v16)
        sub_100FA6940(a1, LOWORD(v49[1]), WORD1(v49[1]), (double *)&v47, (double *)&v46);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AA220);
      v17 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        v18 = v53;
        v19 = v46;
        v20 = v47;
        sub_100F9F790(v50, __p);
        v21 = __p;
        if (__p[23] < 0)
          v21 = *(_BYTE **)__p;
        *(_DWORD *)buf = v41;
        *(_QWORD *)v62 = v9;
        *(_WORD *)&v62[8] = 2048;
        *(_QWORD *)&v62[10] = v18;
        *(_WORD *)&v62[18] = 1024;
        *(_DWORD *)&v62[20] = v16;
        v63 = 2048;
        v64 = v20;
        v65 = 2048;
        v66 = v19;
        v67 = 2080;
        v68 = v21;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "TILE: result: tilestool: prog, %3lu, %3lu, ===============> isFound, %d, location, %14.8lf, %14.8lf, entry, %s", buf, 0x3Au);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021AA220);
        v25 = qword_1022A02D8;
        v26 = v53;
        v27 = v46;
        v28 = v47;
        sub_100F9F790(v50, v44);
        v29 = v44;
        if (v45 < 0)
          v29 = (void **)v44[0];
        *(_DWORD *)__p = v41;
        *(_QWORD *)&__p[4] = v9;
        *(_WORD *)&__p[12] = 2048;
        *(_QWORD *)&__p[14] = v26;
        *(_WORD *)&__p[22] = 1024;
        *(_DWORD *)&__p[24] = v16;
        v55 = 2048;
        v56 = v28;
        v57 = 2048;
        v58 = v27;
        v59 = 2080;
        v60 = v29;
        LODWORD(v40) = 58;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v25, 2, "TILE: result: tilestool: prog, %3lu, %3lu, ===============> isFound, %d, location, %14.8lf, %14.8lf, entry, %s", __p, v40, (_DWORD)v41, *((double *)&v41 + 1), v42, v43);
        v31 = v30;
        if (v45 < 0)
          operator delete(v44[0]);
        sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_LTE, CLTilesManager_Type::KeyLatLonEntry_LTE>::TEST_testBinarySearch(const char *) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_LTE, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_LTE]", "%s\n", v31);
        if (v31 != (char *)buf)
          free(v31);
      }
      if (!v16)
      {
        v34 = 759;
        v35 = "isFound";
LABEL_44:
        __assert_rtn("TEST_testBinarySearch", "CLKeyLatLonTileTemplate.h", v34, v35);
      }
      v22 = (const char *)*((_QWORD *)v8 + 1);
      if (v22)
      {
        do
        {
          v23 = v22;
          v22 = *(const char **)v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (const char *)*((_QWORD *)v8 + 2);
          v24 = *(_QWORD *)v23 == (_QWORD)v8;
          v8 = v23;
        }
        while (!v24);
      }
      ++v9;
      v8 = v23;
      if (v23 == v43)
        goto LABEL_36;
    }
    v34 = 742;
    v35 = "isFound == isFoundMmap";
    goto LABEL_44;
  }
  v9 = 0;
LABEL_36:
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021AA220);
  v32 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109632;
    *(_DWORD *)v62 = 1;
    *(_WORD *)&v62[4] = 2048;
    *(_QWORD *)&v62[6] = v9;
    *(_WORD *)&v62[14] = 2048;
    *(_QWORD *)&v62[16] = v53;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "TILE: result: tilestool: pass, %d, tests, %lu, %lu", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AA220);
    *(_QWORD *)__p = 0x104000300;
    *(_WORD *)&__p[8] = 2048;
    *(_QWORD *)&__p[10] = v9;
    *(_WORD *)&__p[18] = 2048;
    *(_QWORD *)&__p[20] = v53;
    LODWORD(v40) = 28;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: result: tilestool: pass, %d, tests, %lu, %lu", __p, v40, (_QWORD)v41);
    v39 = (uint8_t *)v38;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_LTE, CLTilesManager_Type::KeyLatLonEntry_LTE>::TEST_testBinarySearch(const char *) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_LTE, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_LTE]", "%s\n", v38);
    if (v39 != buf)
      free(v39);
  }
  sub_100008848((uint64_t)&v51, v52);
  return 1;
}

void sub_10122DDF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,_QWORD *a27)
{
  sub_100008848((uint64_t)&a26, a27);
  _Unwind_Resume(a1);
}

void sub_10122DE44(uint64_t a1, FILE *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  _QWORD *v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  int8x8_t *v15;
  int8x8_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  int8x8_t *v23;
  int8x8_t v24;
  _DWORD *v25;
  _DWORD *v26;
  int8x8_t *v27;
  int8x8_t v28;
  __int32 v29;
  NSObject *v30;
  int v31;
  _BYTE *v32;
  uint64_t v33;
  int v34;
  void **v35;
  char *v36;
  char *v37;
  uint64_t **v38;
  _BOOL4 v39;
  int v40;
  int v41;
  unsigned int v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  const char *v48;
  __int128 v49;
  unint64_t v50;
  NSObject *v51;
  int v52;
  uint64_t v53;
  uint64_t **v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  double v59;
  int v60;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  void **v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  double v69;
  int v70;
  int v71;
  char *v72;
  char *v73;
  _BOOL4 v74;
  NSObject *v75;
  _BYTE *v76;
  NSObject *v77;
  int v78;
  uint64_t v79;
  _BYTE *v80;
  char *v81;
  char *v82;
  const char *v83;
  uint8_t *v84;
  const char *v85;
  uint8_t *v86;
  uint64_t v87;
  const char *v88;
  uint64_t **v89;
  const char *v90;
  __int128 v91;
  double v92;
  double v93;
  uint64_t v94;
  uint64_t v95;
  int8x8_t v96[2];
  void *v97[2];
  char v98;
  uint64_t v99;
  _BYTE v100[40];
  uint64_t v101;
  __int16 v102;
  uint64_t v103;
  __int16 v104;
  double v105;
  __int16 v106;
  double v107;
  __int16 v108;
  int v109;
  __int16 v110;
  int v111;
  _BYTE __p[20];
  void **v113;
  uint64_t v114;
  uint64_t v115;
  uint8_t buf[4];
  _BYTE v117[10];
  _BYTE v118[14];
  __int16 v119;
  _BYTE *v120;
  __int16 v121;
  uint64_t v122;
  __int16 v123;
  uint64_t v124;
  __int16 v125;
  double v126;
  __int16 v127;
  double v128;
  __int16 v129;
  int v130;
  __int16 v131;
  int v132;

  v9 = a1;
  sub_100810AD4(a1, (uint64_t)a2, a3);
  v99 = 0;
  v10 = *(unsigned __int16 *)(a3 + 2);
  if (v10 != 7)
  {
    if (v10 == 6)
    {
      *(_QWORD *)v100 = 0x200006ABBALL;
      memset(&v100[8], 0, 32);
      LODWORD(v101) = 0;
      sub_100F9FC20(a4, (uint64_t)v100);
      v11 = (_QWORD *)(v9 + 344);
      *(_QWORD *)(v9 + 352) = *(_QWORD *)(v9 + 344);
      sub_101231100((char **)(v9 + 344), *(unsigned int *)&v100[12]);
      v12 = (char *)sub_100812460(v9, a2, a3, 0, *(int *)&v100[12], *(int *)&v100[16]);
      if (v12)
      {
        v96[0] = 0;
        v96[1].i32[0] = 0;
        if (*(_DWORD *)&v100[12])
        {
          v13 = 0;
          do
          {
            sub_100F9F658((int8x8_t *)&v12[v13 * *(unsigned int *)&v100[16]], v96);
            v15 = *(int8x8_t **)(v9 + 352);
            v14 = *(_QWORD *)(v9 + 360);
            if ((unint64_t)v15 >= v14)
            {
              v18 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v15 - *v11) >> 2);
              v19 = v18 + 1;
              if (v18 + 1 > 0x1555555555555555)
                sub_100259694();
              v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - *v11) >> 2);
              if (2 * v20 > v19)
                v19 = 2 * v20;
              if (v20 >= 0xAAAAAAAAAAAAAAALL)
                v21 = 0x1555555555555555;
              else
                v21 = v19;
              if (v21)
                v22 = (char *)sub_100821B78(v9 + 360, v21);
              else
                v22 = 0;
              v23 = (int8x8_t *)&v22[12 * v18];
              v24 = v96[0];
              v23[1].i32[0] = v96[1].i32[0];
              *v23 = v24;
              v26 = *(_DWORD **)(v9 + 344);
              v25 = *(_DWORD **)(v9 + 352);
              v27 = v23;
              if (v25 != v26)
              {
                do
                {
                  v28 = *(int8x8_t *)(v25 - 3);
                  v25 -= 3;
                  v29 = v25[2];
                  *(int8x8_t *)((char *)v27 - 12) = v28;
                  v27 = (int8x8_t *)((char *)v27 - 12);
                  v27[1].i32[0] = v29;
                }
                while (v25 != v26);
                v25 = (_DWORD *)*v11;
              }
              v17 = (char *)&v23[1] + 4;
              *(_QWORD *)(v9 + 344) = v27;
              *(_QWORD *)(v9 + 352) = (char *)v23 + 12;
              *(_QWORD *)(v9 + 360) = &v22[12 * v21];
              if (v25)
                operator delete(v25);
            }
            else
            {
              v16 = v96[0];
              v15[1].i32[0] = v96[1].i32[0];
              *v15 = v16;
              v17 = (char *)&v15[1] + 4;
            }
            *(_QWORD *)(v9 + 352) = v17;
            if (!*(_BYTE *)(a5 + 9))
            {
              if (qword_1022A02D0 != -1)
                dispatch_once(&qword_1022A02D0, &stru_1021AA220);
              v30 = qword_1022A02D8;
              if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
              {
                v31 = *(_DWORD *)&v100[12];
                sub_100F9F8CC((unsigned int *)v96, __p);
                v32 = __p;
                if (SBYTE3(v113) < 0)
                  v32 = *(_BYTE **)__p;
                *(_DWORD *)buf = 134218498;
                *(_QWORD *)v117 = v13;
                *(_WORD *)&v117[8] = 1024;
                *(_DWORD *)v118 = v31;
                *(_WORD *)&v118[4] = 2080;
                *(_QWORD *)&v118[6] = v32;
                _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "TILE: index entry, %3lu, %3u, %s", buf, 0x1Cu);
                if (SBYTE3(v113) < 0)
                  operator delete(*(void **)__p);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A02D0 != -1)
                  dispatch_once(&qword_1022A02D0, &stru_1021AA220);
                v33 = qword_1022A02D8;
                v34 = *(_DWORD *)&v100[12];
                sub_100F9F8CC((unsigned int *)v96, v97);
                v35 = v97;
                if (v98 < 0)
                  v35 = (void **)v97[0];
                *(_DWORD *)__p = 134218498;
                *(_QWORD *)&__p[4] = v13;
                *(_WORD *)&__p[12] = 1024;
                *(_DWORD *)&__p[14] = v34;
                *(_WORD *)&__p[18] = 2080;
                v113 = v35;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v33, 2, "TILE: index entry, %3lu, %3u, %s", __p, 28, v88);
                v37 = v36;
                if (v98 < 0)
                  operator delete(v97[0]);
                sub_100512490("Generic", 1, 0, 2, "virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_LTE, CLTilesManager_Type::KeyLatLonEntry_LTE>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_LTE, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_LTE]", "%s\n", v37);
                if (v37 != (char *)buf)
                  free(v37);
              }
            }
            ++v13;
          }
          while (v13 < *(unsigned int *)&v100[12]);
        }
      }
      goto LABEL_82;
    }
    v47 = 0;
    goto LABEL_57;
  }
  *(_DWORD *)__p = 502714;
  *(_OWORD *)&__p[4] = xmmword_101C47CA0;
  v113 = 0;
  v115 = 0;
  v114 = 0;
  sub_100F9FC20(a4, (uint64_t)__p);
  v38 = (uint64_t **)(v9 + 368);
  sub_100008848(v9 + 368, *(_QWORD **)(v9 + 376));
  *(_QWORD *)(v9 + 376) = 0;
  *(_QWORD *)(v9 + 384) = 0;
  *(_QWORD *)(v9 + 368) = v9 + 376;
  v93 = *(double *)&v9;
  if (!*(_BYTE *)(a5 + 9))
  {
    memset(v96, 0, 14);
    v48 = (const char *)sub_100812460(v9, a2, a3, 0, *(int *)&__p[12], *(int *)&__p[16]);
    v12 = (char *)v48;
    if (!v48)
    {
LABEL_82:
      v47 = 0;
      goto LABEL_83;
    }
    if (*(_DWORD *)&__p[12])
    {
      v50 = 0;
      *(_QWORD *)&v49 = 134220290;
      v91 = v49;
      v90 = v48;
      do
      {
        sub_100F9F4E4((int8x8_t *)&v12[v50 * *(unsigned int *)&__p[16]], v96);
        sub_101231AB8(v38, (int *)v96, (uint64_t *)v96);
        v94 = 0;
        v95 = 0;
        sub_100FA6940(v9, v96[1].u16[0], v96[1].u16[1], (double *)&v95, (double *)&v94);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021AA220);
        v51 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
        {
          v52 = *(_DWORD *)&__p[12];
          v53 = *(_QWORD *)(v9 + 384);
          sub_100F9F790((unsigned int *)v96, v100);
          v54 = v38;
          if (v100[23] >= 0)
            v55 = v100;
          else
            v55 = *(_BYTE **)v100;
          v56 = v94;
          v57 = v95;
          v58 = (*(double (**)(uint64_t))(*(_QWORD *)v9 + 56))(v9);
          v59 = (*(double (**)(uint64_t))(*(_QWORD *)v9 + 64))(v9);
          v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 80))(v9);
          v61 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 72))(v9);
          *(_DWORD *)buf = v91;
          *(_QWORD *)v117 = v50;
          *(_WORD *)&v117[8] = 1024;
          *(_DWORD *)v118 = v52;
          *(_WORD *)&v118[4] = 2048;
          *(_QWORD *)&v118[6] = v53;
          v119 = 2080;
          v120 = v55;
          v121 = 2048;
          v122 = v57;
          v123 = 2048;
          v124 = v56;
          v125 = 2048;
          v126 = v58;
          v127 = 2048;
          v128 = v59;
          v129 = 1024;
          v130 = v60;
          v131 = 1024;
          v132 = v61;
          _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "TILE: entry, %3lu, %3u, %3lu, %s, loc, %.8lf, %.8lf, delta, %.5lf, %.5lf, grid, %u, %u", buf, 0x5Au);
          if ((v100[23] & 0x80000000) != 0)
            operator delete(*(void **)v100);
          v38 = v54;
          v12 = (char *)v90;
          *(double *)&v9 = v93;
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_1021AA220);
          v62 = qword_1022A02D8;
          v63 = *(_DWORD *)&__p[12];
          v64 = *(_QWORD *)(v9 + 384);
          sub_100F9F790((unsigned int *)v96, v97);
          v89 = v38;
          if (v98 >= 0)
            v65 = v97;
          else
            v65 = (void **)v97[0];
          v66 = v94;
          v67 = v95;
          v68 = (*(double (**)(uint64_t))(*(_QWORD *)v9 + 56))(v9);
          v69 = (*(double (**)(uint64_t))(*(_QWORD *)v9 + 64))(v9);
          v70 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 80))(v9);
          v71 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 72))(v9);
          *(_DWORD *)v100 = v91;
          *(_QWORD *)&v100[4] = v50;
          *(_WORD *)&v100[12] = 1024;
          *(_DWORD *)&v100[14] = v63;
          *(_WORD *)&v100[18] = 2048;
          *(_QWORD *)&v100[20] = v64;
          *(_WORD *)&v100[28] = 2080;
          *(_QWORD *)&v100[30] = v65;
          *(_WORD *)&v100[38] = 2048;
          v101 = v67;
          v102 = 2048;
          v103 = v66;
          v104 = 2048;
          v105 = v68;
          v106 = 2048;
          v107 = v69;
          v108 = 1024;
          v109 = v70;
          v110 = 1024;
          v111 = v71;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v62, 2, "TILE: entry, %3lu, %3u, %3lu, %s, loc, %.8lf, %.8lf, delta, %.5lf, %.5lf, grid, %u, %u", v100, 90, v89, v90, *(double *)&v91, *((double *)&v91 + 1), v92, v93, v94, v95);
          v73 = v72;
          if (v98 < 0)
            operator delete(v97[0]);
          sub_100512490("Generic", 1, 0, 2, "virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_LTE, CLTilesManager_Type::KeyLatLonEntry_LTE>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_LTE, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_LTE]", "%s\n", v73);
          v38 = (uint64_t **)v88;
          if (v73 != (char *)buf)
            free(v73);
        }
        ++v50;
      }
      while (v50 < *(unsigned int *)&__p[12]);
    }
LABEL_101:
    v47 = 0;
    v78 = 1;
    goto LABEL_102;
  }
  v39 = sub_101232968(v9, (int **)(v9 + 344), (_DWORD *)&v99 + 1, &v99);
  v41 = v99;
  v40 = HIDWORD(v99);
  v42 = v99 - HIDWORD(v99) + 1;
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021AA220);
  v43 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)v117 = v42;
    *(_WORD *)&v117[4] = 1024;
    *(_DWORD *)&v117[6] = v40;
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "TILE: searched, numOfEntries, %u, offsetEntries, %d", buf, 0xEu);
  }
  v44 = sub_1001BFF7C(115, 2);
  if ((_DWORD)v44)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AA220);
    *(_DWORD *)v100 = 67109376;
    *(_DWORD *)&v100[4] = v42;
    *(_WORD *)&v100[8] = 1024;
    *(_DWORD *)&v100[10] = v40;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: searched, numOfEntries, %u, offsetEntries, %d", v100, 14);
    v84 = (uint8_t *)v83;
    v44 = sub_100512490("Generic", 1, 0, 2, "virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_LTE, CLTilesManager_Type::KeyLatLonEntry_LTE>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_LTE, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_LTE]", "%s\n", v83);
    if (v84 != buf)
      free(v84);
  }
  if ((v41 + 1) >= *(_DWORD *)&__p[12])
    v47 = *(_DWORD *)&__p[12] - v40;
  else
    v47 = v42;
  if (!v47)
  {
LABEL_57:
    v12 = 0;
    goto LABEL_83;
  }
  if (v47 + v40 > *(_DWORD *)&__p[12])
    sub_101947C14(v44, v45, v46);
  v12 = (char *)sub_100812460(v9, a2, a3, v40, v47, *(int *)&__p[16]);
  if (!v12)
    goto LABEL_82;
  *(_QWORD *)&v100[6] = 0;
  *(_QWORD *)v100 = 0;
  if (!v39)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AA220);
    v77 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEBUG, "TILE: avoid data search", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AA220);
      LOWORD(v97[0]) = 0;
      LODWORD(v87) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: avoid data search", v97, v87);
      v86 = (uint8_t *)v85;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_LTE, CLTilesManager_Type::KeyLatLonEntry_LTE>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_LTE, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_LTE]", "%s\n", v85);
      if (v86 != buf)
        free(v86);
      v47 = 0;
      v78 = 1;
      goto LABEL_102;
    }
    goto LABEL_101;
  }
  if ((sub_101232FC4(v9, (uint64_t)v12, v47, *(int *)&__p[16], (_DWORD *)(v9 + 328), v100) & 1) != 0)
  {
    sub_101231AB8(v38, (int *)v100, (uint64_t *)v100);
LABEL_83:
    v74 = 1;
    goto LABEL_84;
  }
  v78 = 0;
LABEL_102:
  v74 = v78 != 0;
LABEL_84:
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021AA220);
  v75 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    sub_100F9F790((unsigned int *)(v9 + 328), v100);
    v76 = v100[23] >= 0 ? v100 : *(_BYTE **)v100;
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)v117 = v74;
    *(_WORD *)&v117[4] = 1024;
    *(_DWORD *)&v117[6] = v47;
    *(_WORD *)v118 = 2080;
    *(_QWORD *)&v118[2] = v76;
    _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEBUG, "TILE: getLocationByKey, isFound, %d, searchedArea, %d, key, %s", buf, 0x18u);
    if ((v100[23] & 0x80000000) != 0)
      operator delete(*(void **)v100);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AA220);
    v79 = qword_1022A02D8;
    sub_100F9F790((unsigned int *)(v9 + 328), __p);
    if (SBYTE3(v113) >= 0)
      v80 = __p;
    else
      v80 = *(_BYTE **)__p;
    *(_DWORD *)v100 = 67109634;
    *(_DWORD *)&v100[4] = v74;
    *(_WORD *)&v100[8] = 1024;
    *(_DWORD *)&v100[10] = v47;
    *(_WORD *)&v100[14] = 2080;
    *(_QWORD *)&v100[16] = v80;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v79, 2, "TILE: getLocationByKey, isFound, %d, searchedArea, %d, key, %s", v100, 24, v88);
    v82 = v81;
    if (SBYTE3(v113) < 0)
      operator delete(*(void **)__p);
    sub_100512490("Generic", 1, 0, 2, "virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_LTE, CLTilesManager_Type::KeyLatLonEntry_LTE>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_LTE, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_LTE]", "%s\n", v82);
    if (v82 != (char *)buf)
      free(v82);
  }
  if (v12)
    free(v12);
}

void sub_10122EC44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10122EC7C(uint64_t a1, int *a2, _QWORD *a3)
{
  uint64_t **v6;
  uint64_t v7;
  _QWORD **v8;
  uint64_t v9;
  _BOOL8 v10;
  NSObject *v11;
  _BYTE *v12;
  int8x8_t *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  NSObject *v17;
  NSObject *v18;
  _BYTE *v19;
  int v20;
  _BYTE *v21;
  unsigned int v22;
  _BYTE *v23;
  void **v24;
  _BYTE *v25;
  int v26;
  void **v27;
  unsigned int v28;
  unsigned int v29;
  void **v30;
  void **v31;
  char *v32;
  char *v33;
  NSObject *v34;
  const char *v35;
  _BYTE *v36;
  uint64_t v37;
  const char *v38;
  _BYTE *v39;
  char *v40;
  NSObject *v41;
  int v42;
  int v43;
  _BYTE *v44;
  _BYTE *v45;
  _BYTE *v46;
  uint64_t v47;
  int v48;
  _BYTE *v49;
  _BYTE *v50;
  void **v51;
  char *v52;
  NSObject *v53;
  int v54;
  int v55;
  _BYTE *v56;
  _BYTE *v57;
  _BYTE *v58;
  uint64_t v59;
  int v60;
  _BYTE *v61;
  _BYTE *v62;
  void **v63;
  char *v64;
  NSObject *v65;
  const char *v66;
  _BYTE *v67;
  uint64_t v68;
  const char *v69;
  _BYTE *v70;
  char *v71;
  NSObject *v72;
  _BYTE *v73;
  const char *v74;
  _BYTE *v75;
  uint64_t v76;
  _QWORD **v77;
  uint64_t v78;
  NSObject *v79;
  int v80;
  _BYTE *v81;
  _BYTE *v82;
  _BYTE *v83;
  uint64_t v85;
  _BYTE *v86;
  char *v87;
  char *v88;
  const char *v89;
  char *v90;
  _BOOL4 v91;
  uint64_t v92;
  int v93;
  _BYTE *v94;
  _BYTE *v95;
  void **v96;
  char *v97;
  char *v98;
  unsigned int v99;
  _BYTE *v100;
  const char *v101;
  void **v102;
  char *v103;
  uint64_t v104;
  unsigned int v105;
  const char *v106;
  const char *v107;
  unsigned int v108;
  void *v109[2];
  char v110;
  unsigned int v111;
  unsigned int v112;
  uint64_t v113;
  int v114;
  void *v115[2];
  char v116;
  int v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  int v125;
  int v126;
  uint64_t v127;
  void *v128[2];
  char v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  _BYTE v134[14];
  _BYTE v135[36];
  _BYTE v136[10];
  _BYTE v137[12];
  __int16 v138;
  _BYTE *v139;
  char v140;
  _BYTE buf[12];
  int v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  _BYTE __p[14];
  _BYTE v149[36];
  _QWORD v150[198];

  v6 = (uint64_t **)(a1 + 368);
  v7 = sub_101231DFC(a1 + 368, a2);
  v8 = (_QWORD **)v7;
  if (a1 + 376 != v7)
  {
    v9 = *(_QWORD *)(v7 + 25);
    *(_QWORD *)((char *)a3 + 6) = *(_QWORD *)(v7 + 31);
    *a3 = v9;
    return 1;
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021AA220);
  v11 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    sub_100F9F790((unsigned int *)a2, __p);
    v12 = v149[9] >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "TILE:  getLocationByKey_mmap, key, %s", buf, 0xCu);
    if ((v149[9] & 0x80000000) != 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AA220);
    v85 = qword_1022A02D8;
    sub_100F9F790((unsigned int *)a2, buf);
    if ((SBYTE7(v143) & 0x80u) == 0)
      v86 = buf;
    else
      v86 = *(_BYTE **)buf;
    *(_DWORD *)v134 = 136315138;
    *(_QWORD *)&v134[4] = v86;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v85, 2, "TILE:  getLocationByKey_mmap, key, %s", v134);
    v88 = v87;
    if (SBYTE7(v143) < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_LTE, CLTilesManager_Type::KeyLatLonEntry_LTE>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_LTE, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_LTE]", "%s\n", v88);
    if (v88 != __p)
      free(v88);
  }
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a1 + 344);
  sub_1015A2E04(v128, "");
  v130 = 0;
  v131 = -1;
  v132 = 0;
  v133 = 0;
  if ((sub_10080F1CC(a1, (uint64_t)v128) & 1) == 0)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AA220);
    v17 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__p = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "TILE: getLocationByKey_mmap, failed to mmap, #CloneMe", __p, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AA220);
      *(_WORD *)buf = 0;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A02D8, 16, "TILE: getLocationByKey_mmap, failed to mmap, #CloneMe", buf, 2);
      v90 = (char *)v89;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_LTE, CLTilesManager_Type::KeyLatLonEntry_LTE>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_LTE, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_LTE]", "%s\n", v89);
      if (v90 != __p)
        free(v90);
    }
    v10 = 0;
    goto LABEL_179;
  }
  v108 = 0;
  v13 = 0;
  v127 = 0;
  v125 = 0;
  v126 = 43962;
  v122 = 0x200006ABBALL;
  v123 = 0u;
  v124 = 0u;
  *(_QWORD *)&buf[4] = 184;
  *(_DWORD *)buf = 371642;
  v142 = 381;
  v143 = 0u;
  v144 = 0u;
  v146 = 0;
  v145 = 0;
  v147 = 0;
  v117 = 502714;
  v118 = xmmword_101C47CA0;
  v119 = 0;
  v120 = 0;
  v121 = 0;
  while (1)
  {
    while (1)
    {
      v14 = v133;
      if (!sub_10080F354(a1, v128, &v126))
        goto LABEL_162;
      if (HIWORD(v126) == 7)
        break;
      if (HIWORD(v126) == 6)
      {
        sub_100F9FC20(v132 + v14, (uint64_t)&v122);
        v13 = (int8x8_t *)(v14 + v132 + v127 + 12);
        if ((unint64_t)v13 + (DWORD2(v123) * DWORD1(v123)) > v130 + v132)
        {
          if (!*(_BYTE *)(a1 + 392))
            goto LABEL_162;
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_1021AA220);
          v53 = qword_1022A02D8;
          if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
          {
            v54 = DWORD1(v123);
            v106 = sub_1001CC818(*(_DWORD *)(a1 + 48));
            LODWORD(v107) = v54;
            sub_101231B40((uint64_t)buf, v134);
            v55 = v135[9];
            v56 = *(_BYTE **)v134;
            sub_100F9F790((unsigned int *)a2, v137);
            v57 = v134;
            if (v55 < 0)
              v57 = v56;
            v58 = v137;
            if (v140 < 0)
              v58 = *(_BYTE **)v137;
            *(_DWORD *)__p = 134284803;
            *(_QWORD *)&__p[4] = v13;
            *(_WORD *)&__p[12] = 1025;
            *(_DWORD *)v149 = (_DWORD)v107;
            *(_WORD *)&v149[4] = 2049;
            *(_QWORD *)&v149[6] = v14;
            *(_WORD *)&v149[14] = 2081;
            *(_QWORD *)&v149[16] = v106;
            *(_WORD *)&v149[24] = 2081;
            *(_QWORD *)&v149[26] = v57;
            *(_WORD *)&v149[34] = 2081;
            v150[0] = v58;
            _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_FAULT, "TILE: pIndexEntries passes valid mmapped region, pIndexEntries:%{private}lu, numOfEntries:%{private}u, atOffset:%{private}lld, %{private}s, %{private}s, %{private}s", __p, 0x3Au);
            if (v140 < 0)
              operator delete(*(void **)v137);
            if ((v135[9] & 0x80000000) != 0)
              operator delete(*(void **)v134);
          }
          if (!sub_1001BFF7C(115, 0))
            goto LABEL_162;
          bzero(__p, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_1021AA220);
          v59 = qword_1022A02D8;
          LODWORD(v107) = DWORD1(v123);
          v106 = sub_1001CC818(*(_DWORD *)(a1 + 48));
          sub_101231B40((uint64_t)buf, v137);
          v60 = v140;
          v61 = *(_BYTE **)v137;
          sub_100F9F790((unsigned int *)a2, v115);
          v62 = v137;
          if (v60 < 0)
            v62 = v61;
          v63 = v115;
          if (v116 < 0)
            v63 = (void **)v115[0];
          *(_DWORD *)v134 = 134284803;
          *(_QWORD *)&v134[4] = v13;
          *(_WORD *)&v134[12] = 1025;
          *(_DWORD *)v135 = (_DWORD)v107;
          *(_WORD *)&v135[4] = 2049;
          *(_QWORD *)&v135[6] = v14;
          *(_WORD *)&v135[14] = 2081;
          *(_QWORD *)&v135[16] = v106;
          *(_WORD *)&v135[24] = 2081;
          *(_QWORD *)&v135[26] = v62;
          *(_WORD *)&v135[34] = 2081;
          *(_QWORD *)v136 = v63;
          _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v59, 17, "TILE: pIndexEntries passes valid mmapped region, pIndexEntries:%{private}lu, numOfEntries:%{private}u, atOffset:%{private}lld, %{private}s, %{private}s, %{private}s", v134, 58);
          v33 = v64;
          if (v116 < 0)
            operator delete(v115[0]);
          if (v140 < 0)
            operator delete(*(void **)v137);
          goto LABEL_147;
        }
      }
      else
      {
        if (HIWORD(v126) != 5)
        {
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_1021AA220);
          v34 = qword_1022A02D8;
          if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_ERROR))
          {
            v35 = sub_1001CC818(*(_DWORD *)(a1 + 48));
            sub_101231B40((uint64_t)buf, v134);
            v36 = v135[9] >= 0 ? v134 : *(_BYTE **)v134;
            *(_DWORD *)__p = 134218498;
            *(_QWORD *)&__p[4] = v14;
            *(_WORD *)&__p[12] = 2080;
            *(_QWORD *)v149 = v35;
            *(_WORD *)&v149[8] = 2080;
            *(_QWORD *)&v149[10] = v36;
            _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "TILE: unregconized sectionId, %lld, %s, %s", __p, 0x20u);
            if ((v135[9] & 0x80000000) != 0)
              operator delete(*(void **)v134);
          }
          if (!sub_1001BFF7C(115, 0))
            goto LABEL_162;
          bzero(__p, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_1021AA220);
          v37 = qword_1022A02D8;
          v38 = sub_1001CC818(*(_DWORD *)(a1 + 48));
          sub_101231B40((uint64_t)buf, v137);
          if (v140 >= 0)
            v39 = v137;
          else
            v39 = *(_BYTE **)v137;
          *(_DWORD *)v134 = 134218498;
          *(_QWORD *)&v134[4] = v14;
          *(_WORD *)&v134[12] = 2080;
          *(_QWORD *)v135 = v38;
          *(_WORD *)&v135[8] = 2080;
          *(_QWORD *)&v135[10] = v39;
          _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v37, 16, "TILE: unregconized sectionId, %lld, %s, %s", v134, 32, v106);
          v33 = v40;
          if (v140 < 0)
            operator delete(*(void **)v137);
LABEL_147:
          sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_LTE, CLTilesManager_Type::KeyLatLonEntry_LTE>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_LTE, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_LTE]", "%s\n", v33);
          goto LABEL_221;
        }
        sub_100F9F120(v132 + v14, (uint64_t)buf);
      }
    }
    sub_100F9FC20(v132 + v14, (uint64_t)&v117);
    v15 = v14 + v132 + v127 + 12;
    if (v15 + (unint64_t)(HIDWORD(v118) * DWORD2(v118)) > v130 + v132)
    {
      if (!*(_BYTE *)(a1 + 392))
        goto LABEL_162;
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AA220);
      v41 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        v42 = DWORD2(v118);
        v106 = sub_1001CC818(*(_DWORD *)(a1 + 48));
        LODWORD(v107) = v42;
        sub_101231B40((uint64_t)buf, v134);
        v43 = v135[9];
        v44 = *(_BYTE **)v134;
        sub_100F9F790((unsigned int *)a2, v137);
        v45 = v134;
        if (v43 < 0)
          v45 = v44;
        v46 = v137;
        if (v140 < 0)
          v46 = *(_BYTE **)v137;
        *(_DWORD *)__p = 134284803;
        *(_QWORD *)&__p[4] = v15;
        *(_WORD *)&__p[12] = 1025;
        *(_DWORD *)v149 = (_DWORD)v107;
        *(_WORD *)&v149[4] = 2049;
        *(_QWORD *)&v149[6] = v14;
        *(_WORD *)&v149[14] = 2081;
        *(_QWORD *)&v149[16] = v106;
        *(_WORD *)&v149[24] = 2080;
        *(_QWORD *)&v149[26] = v45;
        *(_WORD *)&v149[34] = 2081;
        v150[0] = v46;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_FAULT, "TILE: pDataEntries passes valid mmapped region, pDataEntries:%{private}lu, numOfEntries:%{private}u, atOffset:%{private}lld, %{private}s, %{privat}s, %{private}s", __p, 0x3Au);
        if (v140 < 0)
          operator delete(*(void **)v137);
        if ((v135[9] & 0x80000000) != 0)
          operator delete(*(void **)v134);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_162;
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AA220);
      v47 = qword_1022A02D8;
      LODWORD(v107) = DWORD2(v118);
      v106 = sub_1001CC818(*(_DWORD *)(a1 + 48));
      sub_101231B40((uint64_t)buf, v137);
      v48 = v140;
      v49 = *(_BYTE **)v137;
      sub_100F9F790((unsigned int *)a2, v115);
      v50 = v137;
      if (v48 < 0)
        v50 = v49;
      v51 = v115;
      if (v116 < 0)
        v51 = (void **)v115[0];
      *(_DWORD *)v134 = 134284803;
      *(_QWORD *)&v134[4] = v15;
      *(_WORD *)&v134[12] = 1025;
      *(_DWORD *)v135 = (_DWORD)v107;
      *(_WORD *)&v135[4] = 2049;
      *(_QWORD *)&v135[6] = v14;
      *(_WORD *)&v135[14] = 2081;
      *(_QWORD *)&v135[16] = v106;
      *(_WORD *)&v135[24] = 2080;
      *(_QWORD *)&v135[26] = v50;
      *(_WORD *)&v135[34] = 2081;
      *(_QWORD *)v136 = v51;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v47, 17, "TILE: pDataEntries passes valid mmapped region, pDataEntries:%{private}lu, numOfEntries:%{private}u, atOffset:%{private}lld, %{private}s, %{privat}s, %{private}s", v134, 58);
      v33 = v52;
      if (v116 < 0)
        operator delete(v115[0]);
      if (v140 < 0)
        operator delete(*(void **)v137);
      goto LABEL_147;
    }
    sub_100008848((uint64_t)v6, *v8);
    *(_QWORD *)(a1 + 384) = 0;
    *(_QWORD *)(a1 + 368) = v8;
    *v8 = 0;
    v113 = 0;
    v114 = 0;
    sub_100F9F780(&v113, a2);
    v111 = DWORD2(v118);
    v112 = 0;
    if (!v13)
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AA220);
      v65 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_ERROR))
      {
        v66 = sub_1001CC818(*(_DWORD *)(a1 + 48));
        sub_101231B40((uint64_t)buf, __p);
        v67 = v149[9] >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)v134 = 136380931;
        *(_QWORD *)&v134[4] = v66;
        *(_WORD *)&v134[12] = 2081;
        *(_QWORD *)v135 = v67;
        _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_ERROR, "TILE: no index section before entries section, %{private}s, %{private}s", v134, 0x16u);
        if ((v149[9] & 0x80000000) != 0)
          operator delete(*(void **)__p);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_162;
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AA220);
      v68 = qword_1022A02D8;
      v69 = sub_1001CC818(*(_DWORD *)(a1 + 48));
      sub_101231B40((uint64_t)buf, v134);
      if (v135[9] >= 0)
        v70 = v134;
      else
        v70 = *(_BYTE **)v134;
      *(_DWORD *)v137 = 136380931;
      *(_QWORD *)&v137[4] = v69;
      v138 = 2081;
      v139 = v70;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v68, 16, "TILE: no index section before entries section, %{private}s, %{private}s", v137, 22);
      v33 = v71;
      if ((v135[9] & 0x80000000) != 0)
        operator delete(*(void **)v134);
      goto LABEL_147;
    }
    v16 = sub_1012327A4(a1, v13, DWORD1(v123), SDWORD2(v123), &v113, &v112, &v111);
    if (v112 >= DWORD2(v118) || v111 >= DWORD2(v118))
      break;
    if (!v16)
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AA220);
      v72 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(v106) = v112;
        LODWORD(v107) = v111;
        sub_100F9F8CC((unsigned int *)&v113, v134);
        if (v135[9] >= 0)
          v73 = v134;
        else
          v73 = *(_BYTE **)v134;
        v74 = sub_1001CC818(*(_DWORD *)(a1 + 48));
        sub_101231B40((uint64_t)buf, v137);
        if (v140 >= 0)
          v75 = v137;
        else
          v75 = *(_BYTE **)v137;
        *(_DWORD *)__p = 67175683;
        *(_DWORD *)&__p[4] = (_DWORD)v106;
        *(_WORD *)&__p[8] = 1025;
        *(_DWORD *)&__p[10] = (_DWORD)v107;
        *(_WORD *)v149 = 2081;
        *(_QWORD *)&v149[2] = v73;
        *(_WORD *)&v149[10] = 2081;
        *(_QWORD *)&v149[12] = v74;
        *(_WORD *)&v149[20] = 2081;
        *(_QWORD *)&v149[22] = v75;
        _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEBUG, "TILE: not found in index, a, %{private}u, b, %{private}u, %{private}s, %{private}s, %{private}s", __p, 0x2Cu);
        if (v140 < 0)
          operator delete(*(void **)v137);
        if ((v135[9] & 0x80000000) != 0)
          operator delete(*(void **)v134);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_162;
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AA220);
      v107 = (const char *)qword_1022A02D8;
      v99 = v112;
      LODWORD(v106) = v111;
      sub_100F9F8CC((unsigned int *)&v113, v137);
      if (v140 >= 0)
        v100 = v137;
      else
        v100 = *(_BYTE **)v137;
      v101 = sub_1001CC818(*(_DWORD *)(a1 + 48));
      sub_101231B40((uint64_t)buf, v115);
      if (v116 >= 0)
        v102 = v115;
      else
        v102 = (void **)v115[0];
      *(_DWORD *)v134 = 67175683;
      *(_DWORD *)&v134[4] = v99;
      *(_WORD *)&v134[8] = 1025;
      *(_DWORD *)&v134[10] = (_DWORD)v106;
      *(_WORD *)v135 = 2081;
      *(_QWORD *)&v135[2] = v100;
      *(_WORD *)&v135[10] = 2081;
      *(_QWORD *)&v135[12] = v101;
      *(_WORD *)&v135[20] = 2081;
      *(_QWORD *)&v135[22] = v102;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v107, 2, "TILE: not found in index, a, %{private}u, b, %{private}u, %{private}s, %{private}s, %{private}s", v134, 44);
      v33 = v103;
      if (v116 < 0)
        operator delete(v115[0]);
      if (v140 < 0)
        operator delete(*(void **)v137);
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_LTE, CLTilesManager_Type::KeyLatLonEntry_LTE>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_LTE, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_LTE]", "%s\n", v33);
LABEL_221:
      if (v33 != __p)
        free(v33);
      goto LABEL_162;
    }
    v108 = v111 - v112 + 1;
    if (!sub_101232FC4(a1, v15 + HIDWORD(v118) * v112, v108, SHIDWORD(v118), a2, a3))
      goto LABEL_162;
    sub_101231AB8(v6, (int *)a3, a3);
  }
  if (*(_BYTE *)(a1 + 392))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AA220);
    v18 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v19 = v134;
      sub_100F9F8CC((unsigned int *)&v113, v134);
      if (v135[9] < 0)
        v19 = *(_BYTE **)v134;
      v107 = sub_1001CC818(*(_DWORD *)(a1 + 48));
      sub_101231B40((uint64_t)buf, v137);
      v20 = v140;
      v21 = *(_BYTE **)v137;
      v22 = v112;
      v105 = v111;
      LODWORD(v106) = DWORD2(v118);
      sub_100F9F790((unsigned int *)a2, v115);
      v23 = v137;
      if (v20 < 0)
        v23 = v21;
      v24 = v115;
      if (v116 < 0)
        v24 = (void **)v115[0];
      *(_DWORD *)__p = 136382211;
      *(_QWORD *)&__p[4] = v19;
      *(_WORD *)&__p[12] = 2081;
      *(_QWORD *)v149 = v107;
      *(_WORD *)&v149[8] = 2081;
      *(_QWORD *)&v149[10] = v23;
      *(_WORD *)&v149[18] = 1025;
      *(_DWORD *)&v149[20] = v22;
      *(_WORD *)&v149[24] = 1025;
      *(_DWORD *)&v149[26] = v105;
      *(_WORD *)&v149[30] = 1025;
      *(_DWORD *)&v149[32] = (_DWORD)v106;
      LOWORD(v150[0]) = 2081;
      *(_QWORD *)((char *)v150 + 2) = v24;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "TILE: invalid binary search %{private}s in %{private}s, %{private}s, a:%{private}u, b:%{private}u, max:%{private}u, %{private}s", __p, 0x3Cu);
      if (v116 < 0)
        operator delete(v115[0]);
      if (v140 < 0)
        operator delete(*(void **)v137);
      if ((v135[9] & 0x80000000) != 0)
        operator delete(*(void **)v134);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AA220);
      v107 = (const char *)qword_1022A02D8;
      v25 = v137;
      sub_100F9F8CC((unsigned int *)&v113, v137);
      if (v140 < 0)
        v25 = *(_BYTE **)v137;
      v106 = sub_1001CC818(*(_DWORD *)(a1 + 48));
      sub_101231B40((uint64_t)buf, v115);
      v26 = v116;
      v27 = (void **)v115[0];
      v28 = v111;
      v29 = v112;
      HIDWORD(v104) = DWORD2(v118);
      sub_100F9F790((unsigned int *)a2, v109);
      v30 = v115;
      if (v26 < 0)
        v30 = v27;
      v31 = v109;
      if (v110 < 0)
        v31 = (void **)v109[0];
      *(_DWORD *)v134 = 136382211;
      *(_QWORD *)&v134[4] = v25;
      *(_WORD *)&v134[12] = 2081;
      *(_QWORD *)v135 = v106;
      *(_WORD *)&v135[8] = 2081;
      *(_QWORD *)&v135[10] = v30;
      *(_WORD *)&v135[18] = 1025;
      *(_DWORD *)&v135[20] = v29;
      *(_WORD *)&v135[24] = 1025;
      *(_DWORD *)&v135[26] = v28;
      *(_WORD *)&v135[30] = 1025;
      *(_DWORD *)&v135[32] = HIDWORD(v104);
      *(_WORD *)v136 = 2081;
      *(_QWORD *)&v136[2] = v31;
      LODWORD(v104) = 60;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v107, 17, "TILE: invalid binary search %{private}s in %{private}s, %{private}s, a:%{private}u, b:%{private}u, max:%{private}u, %{private}s", v134, v104);
      v33 = v32;
      if (v110 < 0)
        operator delete(v109[0]);
      if (v116 < 0)
        operator delete(v115[0]);
      if (v140 < 0)
        operator delete(*(void **)v137);
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_LTE, CLTilesManager_Type::KeyLatLonEntry_LTE>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_LTE, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_LTE]", "%s\n", v33);
      goto LABEL_221;
    }
  }
LABEL_162:
  v76 = sub_101231DFC((uint64_t)v6, a2);
  v77 = (_QWORD **)v76;
  v10 = v8 != (_QWORD **)v76;
  if (v8 != (_QWORD **)v76)
  {
    v78 = *(_QWORD *)(v76 + 25);
    *(_QWORD *)((char *)a3 + 6) = *(_QWORD *)(v76 + 31);
    *a3 = v78;
  }
  if (v132)
    sub_10080F2AC(a1, (uint64_t)v128);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021AA220);
  v79 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    sub_100F9F790((unsigned int *)a2, v134);
    v80 = v135[9];
    v81 = *(_BYTE **)v134;
    sub_100F9F790((unsigned int *)a3, v137);
    v82 = v134;
    if (v80 < 0)
      v82 = v81;
    if (v140 >= 0)
      v83 = v137;
    else
      v83 = *(_BYTE **)v137;
    *(_DWORD *)__p = 67109890;
    *(_DWORD *)&__p[4] = v8 != v77;
    *(_WORD *)&__p[8] = 1024;
    *(_DWORD *)&__p[10] = v108;
    *(_WORD *)v149 = 2080;
    *(_QWORD *)&v149[2] = v82;
    *(_WORD *)&v149[10] = 2080;
    *(_QWORD *)&v149[12] = v83;
    _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEBUG, "TILE: isFound, %d, searchedArea, %u, key, %s, entry, %s", __p, 0x22u);
    if (v140 < 0)
      operator delete(*(void **)v137);
    if ((v135[9] & 0x80000000) != 0)
      operator delete(*(void **)v134);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AA220);
    v91 = v8 != v77;
    v92 = qword_1022A02D8;
    sub_100F9F790((unsigned int *)a2, v137);
    v93 = v140;
    v94 = *(_BYTE **)v137;
    sub_100F9F790((unsigned int *)a3, v115);
    v95 = v137;
    if (v93 < 0)
      v95 = v94;
    if (v116 >= 0)
      v96 = v115;
    else
      v96 = (void **)v115[0];
    *(_DWORD *)v134 = 67109890;
    *(_DWORD *)&v134[4] = v91;
    *(_WORD *)&v134[8] = 1024;
    *(_DWORD *)&v134[10] = v108;
    *(_WORD *)v135 = 2080;
    *(_QWORD *)&v135[2] = v95;
    *(_WORD *)&v135[10] = 2080;
    *(_QWORD *)&v135[12] = v96;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v92, 2, "TILE: isFound, %d, searchedArea, %u, key, %s, entry, %s", v134, 34, v106, v107);
    v98 = v97;
    if (v116 < 0)
      operator delete(v115[0]);
    if (v140 < 0)
      operator delete(*(void **)v137);
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_LTE, CLTilesManager_Type::KeyLatLonEntry_LTE>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_LTE, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_LTE]", "%s\n", v98);
    if (v98 != __p)
      free(v98);
  }
LABEL_179:
  if (v129 < 0)
    operator delete(v128[0]);
  return v10;
}

void sub_10123042C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a41 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL sub_101230574(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  _BYTE *v8;
  const char **v9;
  const char *v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  int v18;
  _BYTE *v19;
  _BYTE *v20;
  void **v21;
  uint64_t v23;
  _BYTE *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  int v28;
  void **v29;
  void **v30;
  void **v31;
  char *v32;
  char *v33;
  const char *v34;
  const char *v35;
  char *v36;
  const char *v37;
  void *v38[2];
  char v39;
  void *v40[2];
  char v41;
  const char *v42;
  char v43;
  char v44;
  uint64_t v45;
  _BYTE buf[14];
  __int16 v47;
  void **v48;
  __int16 v49;
  void **v50;
  std::string v51;
  _BYTE __p[14];
  __int16 v53;
  _BYTE *v54;
  __int16 v55;
  void **v56;

  v6 = *a2;
  *(_QWORD *)(a1 + 334) = *(uint64_t *)((char *)a2 + 6);
  *(_QWORD *)(a1 + 328) = v6;
  v43 = 0;
  v45 = nullsub_34(0);
  v42 = "search";
  v44 = 1;
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021AA220);
  v7 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    sub_100F9F790((unsigned int *)a2, __p);
    v8 = SHIBYTE(v54) >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TILE: getLocationByKey_traverse, key, %s", buf, 0xCu);
    if (SHIBYTE(v54) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AA220);
    v23 = qword_1022A02D8;
    sub_100F9F790((unsigned int *)a2, buf);
    if (SHIBYTE(v48) >= 0)
      v24 = buf;
    else
      v24 = *(_BYTE **)buf;
    LODWORD(v51.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v51.__r_.__value_.__r.__words + 4) = (std::string::size_type)v24;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v23, 2, "TILE: getLocationByKey_traverse, key, %s", (const char *)&v51);
    v26 = v25;
    if (SHIBYTE(v48) < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_LTE, CLTilesManager_Type::KeyLatLonEntry_LTE>::getLocationByKey_traverse(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_LTE, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_LTE]", "%s\n", v26);
    if (v26 != __p)
      free(v26);
  }
  sub_100FA2C30(a1, &v51);
  v9 = (const char **)(a1 + 8);
  v10 = (const char *)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
    v10 = *v9;
  if (sub_1000B78B0(v10))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AA220);
    v11 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v12 = (const char *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v12 = *v9;
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "TILE: getLocationByKey_traverse, prefer local file name because it exists, %s", __p, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AA220);
      v34 = (const char *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v34 = *v9;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v34;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: getLocationByKey_traverse, prefer local file name because it exists, %s", buf);
      v36 = (char *)v35;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_LTE, CLTilesManager_Type::KeyLatLonEntry_LTE>::getLocationByKey_traverse(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_LTE, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_LTE]", "%s\n", v35);
      if (v36 != __p)
        free(v36);
    }
    std::string::operator=(&v51, (const std::string *)(a1 + 8));
  }
  sub_100FA43A0((_QWORD *)a1, (uint64_t)&v51, (uint64_t)&v42);
  v13 = sub_101231DFC(a1 + 368, (int *)a2);
  v14 = v13;
  v15 = a1 + 376;
  if (a1 + 376 != v13)
  {
    v16 = *(_QWORD *)(v13 + 25);
    *(_QWORD *)(a3 + 6) = *(_QWORD *)(v13 + 31);
    *(_QWORD *)a3 = v16;
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021AA220);
  v17 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    sub_100F9F790((unsigned int *)a2, buf);
    v18 = SHIBYTE(v48);
    v19 = *(_BYTE **)buf;
    sub_100F9F790((unsigned int *)a3, v40);
    v20 = buf;
    if (v18 < 0)
      v20 = v19;
    if (v41 >= 0)
      v21 = v40;
    else
      v21 = (void **)v40[0];
    *(_DWORD *)__p = 67109890;
    *(_DWORD *)&__p[4] = v15 != v14;
    *(_WORD *)&__p[8] = 1024;
    *(_DWORD *)&__p[10] = 0;
    v53 = 2080;
    v54 = v20;
    v55 = 2080;
    v56 = v21;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "TILE: getLocationByKey_traverse, isFound, %d, searchedArea, %u, key, %s, entry, %s", __p, 0x22u);
    if (v41 < 0)
      operator delete(v40[0]);
    if (SHIBYTE(v48) < 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AA220);
    v27 = qword_1022A02D8;
    sub_100F9F790((unsigned int *)a2, v40);
    v28 = v41;
    v29 = (void **)v40[0];
    sub_100F9F790((unsigned int *)a3, v38);
    v30 = v40;
    if (v28 < 0)
      v30 = v29;
    if (v39 >= 0)
      v31 = v38;
    else
      v31 = (void **)v38[0];
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = v15 != v14;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = 0;
    v47 = 2080;
    v48 = v30;
    v49 = 2080;
    v50 = v31;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v27, 2, "TILE: getLocationByKey_traverse, isFound, %d, searchedArea, %u, key, %s, entry, %s", buf, 34, v37, (const char *)v38[0]);
    v33 = v32;
    if (v39 < 0)
      operator delete(v38[0]);
    if (v41 < 0)
      operator delete(v40[0]);
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_LTE, CLTilesManager_Type::KeyLatLonEntry_LTE>::getLocationByKey_traverse(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_LTE, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_LTE]", "%s\n", v33);
    if (v33 != __p)
      free(v33);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  return v15 != v14;
}

void sub_101230C2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101230C94(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1021A9FA8;
  sub_100008848(a1 + 368, *(_QWORD **)(a1 + 376));
  v2 = *(void **)(a1 + 344);
  if (v2)
  {
    *(_QWORD *)(a1 + 352) = v2;
    operator delete(v2);
  }
  return sub_100FA05F0(a1);
}

uint64_t sub_101230CE0(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1021AA080;
  sub_100008848(a1 + 368, *(_QWORD **)(a1 + 376));
  v2 = *(void **)(a1 + 344);
  if (v2)
  {
    *(_QWORD *)(a1 + 352) = v2;
    operator delete(v2);
  }
  return sub_100FA05F0(a1);
}

uint64_t sub_101230D2C(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_1021AA158;
  sub_100008848(a1 + 368, *(_QWORD **)(a1 + 376));
  v2 = *(void **)(a1 + 344);
  if (v2)
  {
    *(_QWORD *)(a1 + 352) = v2;
    operator delete(v2);
  }
  return sub_100FA05F0(a1);
}

uint64_t *sub_101230D78(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_101230DCC(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_101230DB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100008848(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_101230DCC(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_101230E50(v5, v6, (int *)((char *)v4 + 25), (_QWORD *)((char *)v4 + 25));
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_101230E50(uint64_t **a1, uint64_t *a2, int *a3, uint64_t *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10;
  uint64_t *v11;

  v6 = sub_101230EDC(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v7 + 25) = *a4;
    *(uint64_t *)((char *)v7 + 31) = *(uint64_t *)((char *)a4 + 6);
    sub_1000145B0(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_101230EDC(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, int *a5)
{
  int v5;
  int v6;
  int v7;
  int v8;
  _BOOL4 v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  _BOOL4 v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  BOOL v18;
  int v19;
  _BOOL4 v20;
  uint64_t *v21;
  int v22;
  _BOOL4 v23;
  _BOOL4 v24;

  if (a1 + 1 == (uint64_t **)a2)
    goto LABEL_5;
  v5 = *(_DWORD *)((char *)a2 + 25);
  v6 = *a5;
  v7 = a5[1];
  v8 = *(_DWORD *)((char *)a2 + 29);
  v9 = v7 < v8;
  if (*a5 != v5)
    v9 = *a5 < v5;
  if (v9)
  {
LABEL_5:
    v10 = (uint64_t *)*a2;
    if (*a1 == a2)
    {
      v12 = a2;
LABEL_24:
      if (v10)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v10)
    {
      v11 = (uint64_t *)*a2;
      do
      {
        v12 = v11;
        v11 = (uint64_t *)v11[1];
      }
      while (v11);
    }
    else
    {
      v17 = a2;
      do
      {
        v12 = (uint64_t *)v17[2];
        v18 = *v12 == (_QWORD)v17;
        v17 = v12;
      }
      while (v18);
    }
    v19 = *(_DWORD *)((char *)v12 + 25);
    v18 = v19 == *a5;
    v20 = v19 < *a5;
    if (v18)
      v20 = *(_DWORD *)((char *)v12 + 29) < a5[1];
    if (v20)
      goto LABEL_24;
    return sub_101231054((uint64_t)a1, a3, a5);
  }
  v13 = v8 < v7;
  if (v6 == v5)
    v14 = v13;
  else
    v14 = v5 < v6;
  if (v14)
  {
    v15 = a2[1];
    if (v15)
    {
      v16 = (uint64_t *)a2[1];
      do
      {
        a4 = (uint64_t **)v16;
        v16 = (uint64_t *)*v16;
      }
      while (v16);
    }
    else
    {
      v21 = a2;
      do
      {
        a4 = (uint64_t **)v21[2];
        v18 = *a4 == v21;
        v21 = (uint64_t *)a4;
      }
      while (!v18);
    }
    if (a4 == a1 + 1)
      goto LABEL_35;
    v22 = *(_DWORD *)((char *)a4 + 25);
    v23 = v7 < *(_DWORD *)((char *)a4 + 29);
    v18 = v6 == v22;
    v24 = v6 < v22;
    if (v18)
      v24 = v23;
    if (v24)
    {
LABEL_35:
      if (v15)
      {
        *a3 = (uint64_t *)a4;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
      return (uint64_t *)a4;
    }
    return sub_101231054((uint64_t)a1, a3, a5);
  }
  *a3 = a2;
  *a4 = a2;
  return (uint64_t *)a4;
}

uint64_t *sub_101231054(uint64_t a1, _QWORD *a2, int *a3)
{
  uint64_t *result;
  uint64_t *v4;
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  int v9;
  int v10;
  _BOOL4 v11;
  _BOOL4 v12;
  _BOOL4 v13;

  v5 = *(uint64_t **)(a1 + 8);
  result = (uint64_t *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v6 = *a3;
    v7 = a3[1];
    do
    {
      while (1)
      {
        v8 = v4;
        v9 = *(_DWORD *)((char *)v4 + 25);
        v10 = *(_DWORD *)((char *)v8 + 29);
        v11 = v7 < v10;
        if (v6 != v9)
          v11 = v6 < v9;
        if (!v11)
          break;
        v4 = (uint64_t *)*v8;
        result = v8;
        if (!*v8)
          goto LABEL_15;
      }
      v12 = v10 < v7;
      if (v6 == v9)
        v13 = v12;
      else
        v13 = v9 < v6;
      if (!v13)
        break;
      result = v8 + 1;
      v4 = (uint64_t *)v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = result;
  }
LABEL_15:
  *a2 = v8;
  return result;
}

void sub_1012310D4(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_101231100(char **a1, unint64_t a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  int v14;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 2) < a2)
  {
    if (a2 >= 0x1555555555555556)
      sub_100259694();
    v5 = (a1[1] - *a1) / 12;
    v6 = (char *)sub_100821B78(v3, a2);
    v7 = &v6[12 * v5];
    v9 = &v6[12 * v8];
    v11 = *a1;
    v10 = a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *(_QWORD *)(v10 - 12);
        v10 -= 12;
        v14 = *((_DWORD *)v10 + 2);
        *(_QWORD *)(v12 - 12) = v13;
        v12 -= 12;
        *((_DWORD *)v12 + 2) = v14;
      }
      while (v10 != v11);
      v10 = *a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

BOOL sub_1012311D0(uint64_t a1, unsigned int **a2, _DWORD *a3, _DWORD *a4)
{
  NSObject *v7;
  unsigned int *v8;
  unsigned int *v9;
  _BYTE *v10;
  unsigned int v11;
  _BOOL4 v12;
  unsigned int *v13;
  unsigned int *v14;
  unint64_t v15;
  unsigned int *v16;
  unint64_t v17;
  unsigned int *v18;
  signed int v19;
  unsigned int *v20;
  unsigned int v21;
  _BOOL4 v22;
  BOOL v23;
  _BOOL4 v24;
  NSObject *v25;
  _BYTE *v26;
  _BOOL8 result;
  NSObject *v28;
  const char *v29;
  char *v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int *v33;
  _BYTE *v34;
  unsigned int v35;
  _BOOL4 v36;
  uint64_t v37;
  _BYTE *v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  const char *v43;
  uint64_t v44;
  int v45;
  _BYTE v46[12];
  char v47;
  _BYTE __p[12];
  __int16 v49;
  _BYTE *v50;
  __int16 v51;
  _BOOL4 v52;
  _BYTE buf[12];
  __int16 v54;
  _BYTE *v55;
  __int16 v56;
  _BOOL4 v57;

  v44 = 0;
  v45 = 0;
  sub_100F9F780(&v44, (_QWORD *)(a1 + 328));
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021AA220);
  v7 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v9 = *a2;
    v8 = a2[1];
    sub_100F9F674((unsigned int *)&v44, __p);
    v10 = v51 >= 0 ? __p : *(_BYTE **)__p;
    v11 = **a2;
    v12 = (_DWORD)v44 == v11 ? SHIDWORD(v44) < (int)(*a2)[1] : v44 < v11;
    *(_DWORD *)buf = 134218498;
    *(_QWORD *)&buf[4] = 0xAAAAAAAAAAAAAAABLL * (v8 - v9);
    v54 = 2080;
    v55 = v10;
    v56 = 1024;
    v57 = v12;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TILE: binarySearchIndex, size, %lu, searchedIndexEntry, %s, %d", buf, 0x1Cu);
    if (SHIBYTE(v51) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AA220);
    v31 = qword_1022A02D8;
    v33 = *a2;
    v32 = a2[1];
    sub_100F9F674((unsigned int *)&v44, v46);
    if (v47 >= 0)
      v34 = v46;
    else
      v34 = *(_BYTE **)v46;
    v35 = **a2;
    if ((_DWORD)v44 == v35)
      v36 = SHIDWORD(v44) < (int)(*a2)[1];
    else
      v36 = v44 < v35;
    *(_DWORD *)__p = 134218498;
    *(_QWORD *)&__p[4] = 0xAAAAAAAAAAAAAAABLL * (v32 - v33);
    v49 = 2080;
    v50 = v34;
    v51 = 1024;
    v52 = v36;
    LODWORD(v43) = 28;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v31, 2, "TILE: binarySearchIndex, size, %lu, searchedIndexEntry, %s, %d", __p, v43, v44);
    v42 = v41;
    if (v47 < 0)
      operator delete(*(void **)v46);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_GSM, CLTilesManager_Type::KeyLatLonEntry_GSM>::binarySearchIndex(std::vector<IndexEntry_T> &, unsigned int &, unsigned int &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_GSM, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_GSM]", "%s\n", v42);
    if (v42 != buf)
      free(v42);
  }
  *a4 = 0;
  *a3 = 0;
  v14 = *a2;
  v13 = a2[1];
  if (v13 == *a2)
    goto LABEL_24;
  v15 = 0xAAAAAAAAAAAAAAABLL * (v13 - *a2);
  v16 = *a2;
  do
  {
    v17 = v15 >> 1;
    v18 = &v16[3 * (v15 >> 1)];
    v21 = *v18;
    v19 = v18[1];
    v20 = v18 + 3;
    v22 = v19 < SHIDWORD(v44);
    v23 = v21 == (_DWORD)v44;
    v24 = v21 < v44;
    if (v23)
      v24 = v22;
    v15 += ~(v15 >> 1);
    if (v24)
      v16 = v20;
    else
      v15 = v17;
  }
  while (v15);
  if (v16 == v14)
  {
LABEL_24:
    *a3 = v14[2];
    *a4 = v14[2] + 1;
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AA220);
    v25 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      sub_100F9F674(v14, buf);
      v26 = v56 >= 0 ? buf : *(_BYTE **)buf;
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "TILE: index search, match, %s", __p, 0xCu);
      if (SHIBYTE(v56) < 0)
        operator delete(*(void **)buf);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AA220);
      v37 = qword_1022A02D8;
      sub_100F9F674(v14, __p);
      if (v51 >= 0)
        v38 = __p;
      else
        v38 = *(_BYTE **)__p;
      *(_DWORD *)v46 = 136315138;
      *(_QWORD *)&v46[4] = v38;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v37, 2, "TILE: index search, match, %s", v46);
      v40 = v39;
      if (SHIBYTE(v51) < 0)
        operator delete(*(void **)__p);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_GSM, CLTilesManager_Type::KeyLatLonEntry_GSM>::binarySearchIndex(std::vector<IndexEntry_T> &, unsigned int &, unsigned int &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_GSM, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_GSM]", "%s\n", v40);
      if (v40 != buf)
        free(v40);
    }
    return 1;
  }
  if (v16 != v13)
  {
    *a3 = *(v16 - 1);
    *a4 = v16[2];
    return 1;
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021AA220);
  v28 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "TILE: index search, not found", buf, 2u);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AA220);
    *(_WORD *)__p = 0;
    LODWORD(v43) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: index search, not found", __p, v43);
    v30 = (char *)v29;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_GSM, CLTilesManager_Type::KeyLatLonEntry_GSM>::binarySearchIndex(std::vector<IndexEntry_T> &, unsigned int &, unsigned int &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_GSM, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_GSM]", "%s\n", v29);
    if (v30 != buf)
      free(v30);
    return 0;
  }
  return result;
}

uint64_t sub_10123183C(uint64_t a1, uint64_t a2, unsigned int a3, int a4, _DWORD *a5, _QWORD *a6)
{
  unsigned int v9;
  int v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  NSObject *v20;
  const char *v22;
  char *v23;
  _DWORD v24[2];
  __int16 v25;
  int v26;
  _BYTE buf[1638];

  if (a3)
  {
    v9 = a3;
    v11 = 0;
    v12 = 1;
    while (1)
    {
      v13 = v12;
      *(_QWORD *)&buf[6] = 0;
      *(_QWORD *)buf = 0;
      sub_100F9F4E4((int8x8_t *)((v11 + (v9 >> 1)) * a4 + a2), (int8x8_t *)buf);
      v14 = *(_DWORD *)buf < *a5;
      if (*(_DWORD *)buf == *a5)
      {
        v15 = a5[1];
        v14 = *(_DWORD *)&buf[4] < v15;
        if (*(_DWORD *)&buf[4] == v15)
          break;
      }
      v16 = v14;
      v17 = v16 == 0;
      if (v16)
        v18 = (v9 >> 1) + 1;
      else
        v18 = 0;
      v11 += v18;
      if (v17)
        v9 >>= 1;
      else
        v9 -= (v9 >> 1) + 1;
      v12 = v13 + 1;
      if (!v9)
      {
        v19 = 0;
        goto LABEL_18;
      }
    }
    *a6 = *(_QWORD *)buf;
    *(_QWORD *)((char *)a6 + 6) = *(_QWORD *)&buf[6];
    v19 = 1;
  }
  else
  {
    v19 = 0;
    v13 = 0;
  }
LABEL_18:
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021AA220);
  v20 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v19;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v13;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "TILE: binarySearchData, search data, isFound, %d, numOfCompares, %u", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AA220);
    v24[0] = 67109376;
    v24[1] = v19;
    v25 = 1024;
    v26 = v13;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: binarySearchData, search data, isFound, %d, numOfCompares, %u", v24, 14);
    v23 = (char *)v22;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_GSM, CLTilesManager_Type::KeyLatLonEntry_GSM>::binarySearchData(const DataEntry_T *, unsigned int, unsigned int, const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_GSM, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_GSM]", "%s\n", v22);
    if (v23 != buf)
      free(v23);
  }
  return v19;
}

uint64_t *sub_101231AB8(uint64_t **a1, int *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = sub_101231054((uint64_t)a1, &v9, a2);
  v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v6 + 25) = *a3;
    *(uint64_t *)((char *)v6 + 31) = *(uint64_t *)((char *)a3 + 6);
    sub_1000145B0(a1, v9, v7, v6);
  }
  return v6;
}

uint64_t sub_101231B40@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[2];
  uint64_t v16;
  _QWORD v17[10];
  char v18;
  uint64_t v19;

  sub_100263E50((uint64_t)v15);
  v4 = sub_100263F7C(&v16, (uint64_t)"TileHeader(", 11);
  v5 = sub_100263F7C(v4, (uint64_t)"tileY=", 6);
  v6 = (_QWORD *)std::ostream::operator<<(v5, *(unsigned int *)(a1 + 16));
  v7 = sub_100263F7C(v6, (uint64_t)", ", 2);
  v8 = sub_100263F7C(v7, (uint64_t)"tileX=", 6);
  v9 = (_QWORD *)std::ostream::operator<<(v8, *(unsigned int *)(a1 + 20));
  v10 = sub_100263F7C(v9, (uint64_t)",", 1);
  v11 = sub_100263F7C(v10, (uint64_t)"genTime=", 8);
  v12 = (_QWORD *)std::ostream::operator<<(v11, *(_QWORD *)(a1 + 40));
  sub_100263F7C(v12, (uint64_t)")", 1);
  std::stringbuf::str(a2, v17);
  *(_QWORD *)((char *)v15
  v16 = v13;
  if (v18 < 0)
    operator delete((void *)v17[8]);
  std::streambuf::~streambuf(v17);
  return std::ios::~ios(&v19);
}

void sub_101231C78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_101231C8C(uint64_t a1, int8x8_t *a2, unsigned int a3, int a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  _BOOL4 v16;
  unsigned int v17;
  BOOL v18;
  BOOL v19;
  int v20;
  int8x8_t v22;
  int v23;

  v22 = 0;
  v23 = 0;
  if (!a3)
    goto LABEL_18;
  v13 = 0;
  v14 = a3;
  do
  {
    v15 = v14 >> 1;
    sub_100F9F658((int8x8_t *)((char *)a2 + (v13 + (v14 >> 1)) * a4), &v22);
    v16 = v22.i32[0] < *a5;
    if (v22.i32[0] == *a5)
      v16 = v22.i32[1] < a5[1];
    if (v16)
      v14 -= v15 + 1;
    else
      v14 >>= 1;
    if (v16)
      v17 = v15 + 1;
    else
      v17 = 0;
    v13 += v17;
  }
  while (v14);
  if (v13)
    v18 = v13 >= a3;
  else
    v18 = 1;
  if (!v18)
  {
    sub_100F9F658((int8x8_t *)((char *)a2 + v13 * a4), &v22);
    *a7 = v23;
    sub_100F9F658((int8x8_t *)((char *)a2 + (v13 - 1) * a4), &v22);
    v19 = 1;
    v20 = v23;
    goto LABEL_25;
  }
  if (v13)
  {
LABEL_18:
    v20 = 0;
    v19 = 0;
    *a7 = 0;
    goto LABEL_25;
  }
  sub_100F9F658(a2, &v22);
  if (v22.i32[0] == *a5)
  {
    v19 = v22.i32[1] == a5[1];
    if (v22.i32[1] == a5[1])
      v20 = v23;
    else
      v20 = 0;
  }
  else
  {
    v19 = 0;
    v20 = 0;
  }
  *a7 = v20;
LABEL_25:
  *a6 = v20;
  return v19;
}

uint64_t sub_101231DFC(uint64_t a1, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  _BOOL4 v9;
  BOOL v10;
  uint64_t *v11;
  int v12;
  _BOOL4 v13;
  _BOOL4 v14;

  v4 = *(_QWORD *)(a1 + 8);
  v2 = a1 + 8;
  v3 = v4;
  if (!v4)
    return v2;
  v5 = *a2;
  v6 = a2[1];
  v7 = v2;
  do
  {
    v8 = *(_DWORD *)(v3 + 25);
    v10 = v8 == v5;
    v9 = v8 < v5;
    if (v10)
      v9 = *(_DWORD *)(v3 + 29) < v6;
    v10 = !v9;
    if (v9)
      v11 = (uint64_t *)(v3 + 8);
    else
      v11 = (uint64_t *)v3;
    if (v10)
      v7 = v3;
    v3 = *v11;
  }
  while (*v11);
  if (v7 == v2)
    return v2;
  v12 = *(_DWORD *)(v7 + 25);
  v13 = v6 < *(_DWORD *)(v7 + 29);
  v10 = v5 == v12;
  v14 = v5 < v12;
  if (v10)
    v14 = v13;
  if (v14)
    return v2;
  return v7;
}

uint64_t *sub_101231E78(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_101230DCC(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_101231EB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100008848(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

BOOL sub_101231ECC(uint64_t a1, int **a2, _DWORD *a3, _DWORD *a4)
{
  NSObject *v7;
  int *v8;
  int *v9;
  _BYTE *v10;
  int v11;
  BOOL v12;
  int v13;
  int *v14;
  unsigned int *v15;
  unint64_t v16;
  int *v17;
  unint64_t v18;
  int *v19;
  int v20;
  int *v21;
  int v22;
  _BOOL4 v23;
  BOOL v24;
  _BOOL4 v25;
  NSObject *v26;
  _BYTE *v27;
  _BOOL8 result;
  NSObject *v29;
  const char *v30;
  char *v31;
  uint64_t v32;
  int *v33;
  int *v34;
  _BYTE *v35;
  int v36;
  BOOL v37;
  int v38;
  char *v39;
  char *v40;
  uint64_t v41;
  _BYTE *v42;
  char *v43;
  char *v44;
  const char *v45;
  uint64_t v46;
  int v47;
  _BYTE v48[12];
  char v49;
  _BYTE __p[12];
  __int16 v51;
  _BYTE *v52;
  __int16 v53;
  int v54;
  _BYTE buf[12];
  __int16 v56;
  _BYTE *v57;
  __int16 v58;
  int v59;

  v46 = 0;
  v47 = 0;
  sub_100F9F780(&v46, (_QWORD *)(a1 + 328));
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021AA220);
  v7 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v9 = *a2;
    v8 = a2[1];
    sub_100F9FB14((unsigned int *)&v46, __p);
    if (v53 >= 0)
      v10 = __p;
    else
      v10 = *(_BYTE **)__p;
    v11 = **a2;
    v12 = (int)v46 < v11;
    if ((_DWORD)v46 == v11)
      v12 = SHIDWORD(v46) < (*a2)[1];
    v13 = v12;
    *(_DWORD *)buf = 134218498;
    *(_QWORD *)&buf[4] = 0xAAAAAAAAAAAAAAABLL * (v8 - v9);
    v56 = 2080;
    v57 = v10;
    v58 = 1024;
    v59 = v13;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TILE: binarySearchIndex, size, %lu, searchedIndexEntry, %s, %d", buf, 0x1Cu);
    if (SHIBYTE(v53) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AA220);
    v32 = qword_1022A02D8;
    v34 = *a2;
    v33 = a2[1];
    sub_100F9FB14((unsigned int *)&v46, v48);
    if (v49 >= 0)
      v35 = v48;
    else
      v35 = *(_BYTE **)v48;
    v36 = **a2;
    v37 = (int)v46 < v36;
    if ((_DWORD)v46 == v36)
      v37 = SHIDWORD(v46) < (*a2)[1];
    v38 = v37;
    *(_DWORD *)__p = 134218498;
    *(_QWORD *)&__p[4] = 0xAAAAAAAAAAAAAAABLL * (v33 - v34);
    v51 = 2080;
    v52 = v35;
    v53 = 1024;
    v54 = v38;
    LODWORD(v45) = 28;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v32, 2, "TILE: binarySearchIndex, size, %lu, searchedIndexEntry, %s, %d", __p, v45, v46);
    v40 = v39;
    if (v49 < 0)
      operator delete(*(void **)v48);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, CLTilesManager_Type::KeyLatLonEntry_CDMA>::binarySearchIndex(std::vector<IndexEntry_T> &, unsigned int &, unsigned int &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CDMA]", "%s\n", v40);
    if (v40 != buf)
      free(v40);
  }
  *a4 = 0;
  *a3 = 0;
  v15 = (unsigned int *)*a2;
  v14 = a2[1];
  if (v14 == *a2)
    goto LABEL_26;
  v16 = 0xAAAAAAAAAAAAAAABLL * (v14 - *a2);
  v17 = *a2;
  do
  {
    v18 = v16 >> 1;
    v19 = &v17[3 * (v16 >> 1)];
    v22 = *v19;
    v20 = v19[1];
    v21 = v19 + 3;
    v23 = v20 < SHIDWORD(v46);
    v24 = v22 == (_DWORD)v46;
    v25 = v22 < (int)v46;
    if (v24)
      v25 = v23;
    v16 += ~(v16 >> 1);
    if (v25)
      v17 = v21;
    else
      v16 = v18;
  }
  while (v16);
  if (v17 == (int *)v15)
  {
LABEL_26:
    *a3 = v15[2];
    *a4 = v15[2] + 1;
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AA220);
    v26 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      sub_100F9FB14(v15, buf);
      v27 = v58 >= 0 ? buf : *(_BYTE **)buf;
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "TILE: index search, match, %s", __p, 0xCu);
      if (SHIBYTE(v58) < 0)
        operator delete(*(void **)buf);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AA220);
      v41 = qword_1022A02D8;
      sub_100F9FB14(v15, __p);
      if (v53 >= 0)
        v42 = __p;
      else
        v42 = *(_BYTE **)__p;
      *(_DWORD *)v48 = 136315138;
      *(_QWORD *)&v48[4] = v42;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v41, 2, "TILE: index search, match, %s", v48);
      v44 = v43;
      if (SHIBYTE(v53) < 0)
        operator delete(*(void **)__p);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, CLTilesManager_Type::KeyLatLonEntry_CDMA>::binarySearchIndex(std::vector<IndexEntry_T> &, unsigned int &, unsigned int &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CDMA]", "%s\n", v44);
      if (v44 != buf)
        free(v44);
    }
    return 1;
  }
  if (v17 != v14)
  {
    *a3 = *(v17 - 1);
    *a4 = v17[2];
    return 1;
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021AA220);
  v29 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "TILE: index search, not found", buf, 2u);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AA220);
    *(_WORD *)__p = 0;
    LODWORD(v45) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: index search, not found", __p, v45);
    v31 = (char *)v30;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, CLTilesManager_Type::KeyLatLonEntry_CDMA>::binarySearchIndex(std::vector<IndexEntry_T> &, unsigned int &, unsigned int &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CDMA]", "%s\n", v30);
    if (v31 != buf)
      free(v31);
    return 0;
  }
  return result;
}

uint64_t sub_101232528(uint64_t a1, uint64_t a2, unsigned int a3, int a4, _DWORD *a5, _QWORD *a6)
{
  unsigned int v9;
  int v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  NSObject *v20;
  const char *v22;
  char *v23;
  _DWORD v24[2];
  __int16 v25;
  int v26;
  _BYTE buf[1638];

  if (a3)
  {
    v9 = a3;
    v11 = 0;
    v12 = 1;
    while (1)
    {
      v13 = v12;
      *(_QWORD *)&buf[6] = 0;
      *(_QWORD *)buf = 0;
      sub_100F9F4E4((int8x8_t *)((v11 + (v9 >> 1)) * a4 + a2), (int8x8_t *)buf);
      v14 = *(_DWORD *)buf < *a5;
      if (*(_DWORD *)buf == *a5)
      {
        v15 = a5[1];
        v14 = *(_DWORD *)&buf[4] < v15;
        if (*(_DWORD *)&buf[4] == v15)
          break;
      }
      v16 = v14;
      v17 = v16 == 0;
      if (v16)
        v18 = (v9 >> 1) + 1;
      else
        v18 = 0;
      v11 += v18;
      if (v17)
        v9 >>= 1;
      else
        v9 -= (v9 >> 1) + 1;
      v12 = v13 + 1;
      if (!v9)
      {
        v19 = 0;
        goto LABEL_18;
      }
    }
    *a6 = *(_QWORD *)buf;
    *(_QWORD *)((char *)a6 + 6) = *(_QWORD *)&buf[6];
    v19 = 1;
  }
  else
  {
    v19 = 0;
    v13 = 0;
  }
LABEL_18:
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021AA220);
  v20 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v19;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v13;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "TILE: binarySearchData, search data, isFound, %d, numOfCompares, %u", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AA220);
    v24[0] = 67109376;
    v24[1] = v19;
    v25 = 1024;
    v26 = v13;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: binarySearchData, search data, isFound, %d, numOfCompares, %u", v24, 14);
    v23 = (char *)v22;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, CLTilesManager_Type::KeyLatLonEntry_CDMA>::binarySearchData(const DataEntry_T *, unsigned int, unsigned int, const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CDMA]", "%s\n", v22);
    if (v23 != buf)
      free(v23);
  }
  return v19;
}

BOOL sub_1012327A4(uint64_t a1, int8x8_t *a2, unsigned int a3, int a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  _BOOL4 v16;
  unsigned int v17;
  BOOL v18;
  BOOL v19;
  int v20;
  int8x8_t v22;
  int v23;

  v22 = 0;
  v23 = 0;
  if (!a3)
    goto LABEL_18;
  v13 = 0;
  v14 = a3;
  do
  {
    v15 = v14 >> 1;
    sub_100F9F658((int8x8_t *)((char *)a2 + (v13 + (v14 >> 1)) * a4), &v22);
    v16 = v22.i32[0] < *a5;
    if (v22.i32[0] == *a5)
      v16 = v22.i32[1] < a5[1];
    if (v16)
      v14 -= v15 + 1;
    else
      v14 >>= 1;
    if (v16)
      v17 = v15 + 1;
    else
      v17 = 0;
    v13 += v17;
  }
  while (v14);
  if (v13)
    v18 = v13 >= a3;
  else
    v18 = 1;
  if (!v18)
  {
    sub_100F9F658((int8x8_t *)((char *)a2 + v13 * a4), &v22);
    *a7 = v23;
    sub_100F9F658((int8x8_t *)((char *)a2 + (v13 - 1) * a4), &v22);
    v19 = 1;
    v20 = v23;
    goto LABEL_25;
  }
  if (v13)
  {
LABEL_18:
    v20 = 0;
    v19 = 0;
    *a7 = 0;
    goto LABEL_25;
  }
  sub_100F9F658(a2, &v22);
  if (v22.i32[0] == *a5)
  {
    v19 = v22.i32[1] == a5[1];
    if (v22.i32[1] == a5[1])
      v20 = v23;
    else
      v20 = 0;
  }
  else
  {
    v19 = 0;
    v20 = 0;
  }
  *a7 = v20;
LABEL_25:
  *a6 = v20;
  return v19;
}

uint64_t *sub_101232914(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_101230DCC(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_101232950(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100008848(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

BOOL sub_101232968(uint64_t a1, int **a2, _DWORD *a3, _DWORD *a4)
{
  NSObject *v7;
  int *v8;
  int *v9;
  _BYTE *v10;
  int v11;
  BOOL v12;
  int v13;
  int *v14;
  unsigned int *v15;
  unint64_t v16;
  int *v17;
  unint64_t v18;
  int *v19;
  int v20;
  int *v21;
  int v22;
  _BOOL4 v23;
  BOOL v24;
  _BOOL4 v25;
  NSObject *v26;
  _BYTE *v27;
  _BOOL8 result;
  NSObject *v29;
  const char *v30;
  char *v31;
  uint64_t v32;
  int *v33;
  int *v34;
  _BYTE *v35;
  int v36;
  BOOL v37;
  int v38;
  char *v39;
  char *v40;
  uint64_t v41;
  _BYTE *v42;
  char *v43;
  char *v44;
  const char *v45;
  uint64_t v46;
  int v47;
  _BYTE v48[12];
  char v49;
  _BYTE __p[12];
  __int16 v51;
  _BYTE *v52;
  __int16 v53;
  int v54;
  _BYTE buf[12];
  __int16 v56;
  _BYTE *v57;
  __int16 v58;
  int v59;

  v46 = 0;
  v47 = 0;
  sub_100F9F780(&v46, (_QWORD *)(a1 + 328));
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021AA220);
  v7 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v9 = *a2;
    v8 = a2[1];
    sub_100F9F8CC((unsigned int *)&v46, __p);
    if (v53 >= 0)
      v10 = __p;
    else
      v10 = *(_BYTE **)__p;
    v11 = **a2;
    v12 = (int)v46 < v11;
    if ((_DWORD)v46 == v11)
      v12 = SHIDWORD(v46) < (*a2)[1];
    v13 = v12;
    *(_DWORD *)buf = 134218498;
    *(_QWORD *)&buf[4] = 0xAAAAAAAAAAAAAAABLL * (v8 - v9);
    v56 = 2080;
    v57 = v10;
    v58 = 1024;
    v59 = v13;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TILE: binarySearchIndex, size, %lu, searchedIndexEntry, %s, %d", buf, 0x1Cu);
    if (SHIBYTE(v53) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AA220);
    v32 = qword_1022A02D8;
    v34 = *a2;
    v33 = a2[1];
    sub_100F9F8CC((unsigned int *)&v46, v48);
    if (v49 >= 0)
      v35 = v48;
    else
      v35 = *(_BYTE **)v48;
    v36 = **a2;
    v37 = (int)v46 < v36;
    if ((_DWORD)v46 == v36)
      v37 = SHIDWORD(v46) < (*a2)[1];
    v38 = v37;
    *(_DWORD *)__p = 134218498;
    *(_QWORD *)&__p[4] = 0xAAAAAAAAAAAAAAABLL * (v33 - v34);
    v51 = 2080;
    v52 = v35;
    v53 = 1024;
    v54 = v38;
    LODWORD(v45) = 28;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v32, 2, "TILE: binarySearchIndex, size, %lu, searchedIndexEntry, %s, %d", __p, v45, v46);
    v40 = v39;
    if (v49 < 0)
      operator delete(*(void **)v48);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_LTE, CLTilesManager_Type::KeyLatLonEntry_LTE>::binarySearchIndex(std::vector<IndexEntry_T> &, unsigned int &, unsigned int &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_LTE, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_LTE]", "%s\n", v40);
    if (v40 != buf)
      free(v40);
  }
  *a4 = 0;
  *a3 = 0;
  v15 = (unsigned int *)*a2;
  v14 = a2[1];
  if (v14 == *a2)
    goto LABEL_26;
  v16 = 0xAAAAAAAAAAAAAAABLL * (v14 - *a2);
  v17 = *a2;
  do
  {
    v18 = v16 >> 1;
    v19 = &v17[3 * (v16 >> 1)];
    v22 = *v19;
    v20 = v19[1];
    v21 = v19 + 3;
    v23 = v20 < SHIDWORD(v46);
    v24 = v22 == (_DWORD)v46;
    v25 = v22 < (int)v46;
    if (v24)
      v25 = v23;
    v16 += ~(v16 >> 1);
    if (v25)
      v17 = v21;
    else
      v16 = v18;
  }
  while (v16);
  if (v17 == (int *)v15)
  {
LABEL_26:
    *a3 = v15[2];
    *a4 = v15[2] + 1;
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AA220);
    v26 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      sub_100F9F8CC(v15, buf);
      v27 = v58 >= 0 ? buf : *(_BYTE **)buf;
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "TILE: index search, match, %s", __p, 0xCu);
      if (SHIBYTE(v58) < 0)
        operator delete(*(void **)buf);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AA220);
      v41 = qword_1022A02D8;
      sub_100F9F8CC(v15, __p);
      if (v53 >= 0)
        v42 = __p;
      else
        v42 = *(_BYTE **)__p;
      *(_DWORD *)v48 = 136315138;
      *(_QWORD *)&v48[4] = v42;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v41, 2, "TILE: index search, match, %s", v48);
      v44 = v43;
      if (SHIBYTE(v53) < 0)
        operator delete(*(void **)__p);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_LTE, CLTilesManager_Type::KeyLatLonEntry_LTE>::binarySearchIndex(std::vector<IndexEntry_T> &, unsigned int &, unsigned int &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_LTE, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_LTE]", "%s\n", v44);
      if (v44 != buf)
        free(v44);
    }
    return 1;
  }
  if (v17 != v14)
  {
    *a3 = *(v17 - 1);
    *a4 = v17[2];
    return 1;
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021AA220);
  v29 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "TILE: index search, not found", buf, 2u);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AA220);
    *(_WORD *)__p = 0;
    LODWORD(v45) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: index search, not found", __p, v45);
    v31 = (char *)v30;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_LTE, CLTilesManager_Type::KeyLatLonEntry_LTE>::binarySearchIndex(std::vector<IndexEntry_T> &, unsigned int &, unsigned int &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_LTE, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_LTE]", "%s\n", v30);
    if (v31 != buf)
      free(v31);
    return 0;
  }
  return result;
}

uint64_t sub_101232FC4(uint64_t a1, uint64_t a2, unsigned int a3, int a4, _DWORD *a5, _QWORD *a6)
{
  unsigned int v9;
  int v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  NSObject *v20;
  const char *v22;
  char *v23;
  _DWORD v24[2];
  __int16 v25;
  int v26;
  _BYTE buf[1638];

  if (a3)
  {
    v9 = a3;
    v11 = 0;
    v12 = 1;
    while (1)
    {
      v13 = v12;
      *(_QWORD *)&buf[6] = 0;
      *(_QWORD *)buf = 0;
      sub_100F9F4E4((int8x8_t *)((v11 + (v9 >> 1)) * a4 + a2), (int8x8_t *)buf);
      v14 = *(_DWORD *)buf < *a5;
      if (*(_DWORD *)buf == *a5)
      {
        v15 = a5[1];
        v14 = *(_DWORD *)&buf[4] < v15;
        if (*(_DWORD *)&buf[4] == v15)
          break;
      }
      v16 = v14;
      v17 = v16 == 0;
      if (v16)
        v18 = (v9 >> 1) + 1;
      else
        v18 = 0;
      v11 += v18;
      if (v17)
        v9 >>= 1;
      else
        v9 -= (v9 >> 1) + 1;
      v12 = v13 + 1;
      if (!v9)
      {
        v19 = 0;
        goto LABEL_18;
      }
    }
    *a6 = *(_QWORD *)buf;
    *(_QWORD *)((char *)a6 + 6) = *(_QWORD *)&buf[6];
    v19 = 1;
  }
  else
  {
    v19 = 0;
    v13 = 0;
  }
LABEL_18:
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021AA220);
  v20 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v19;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v13;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "TILE: binarySearchData, search data, isFound, %d, numOfCompares, %u", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AA220);
    v24[0] = 67109376;
    v24[1] = v19;
    v25 = 1024;
    v26 = v13;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: binarySearchData, search data, isFound, %d, numOfCompares, %u", v24, 14);
    v23 = (char *)v22;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_LTE, CLTilesManager_Type::KeyLatLonEntry_LTE>::binarySearchData(const DataEntry_T *, unsigned int, unsigned int, const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_LTE, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_LTE]", "%s\n", v22);
    if (v23 != buf)
      free(v23);
  }
  return v19;
}

void sub_101233240(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 1073, a4);
}

void sub_101233248()
{
  operator new();
}

void sub_101233298()
{
  operator delete();
}

uint64_t sub_1012332BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v5;
  NSObject *v6;
  os_activity_scope_state_s v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;

  *(_QWORD *)sub_10052C55C(a1, a2, a3, a4) = off_1021AA250;
  v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLTileFileDownload(ctor)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v5, &v8);

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021AA2A8);
  v6 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289538;
    v10 = 0;
    v11 = 2082;
    v12 = "";
    v13 = 2082;
    v14 = "activity";
    v15 = 2050;
    v16 = a1;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLTileFileDownload(ctor)\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
  }
  *(_QWORD *)(a1 + 112) = 0;
  os_activity_scope_leave(&v8);
  return a1;
}

void sub_101233400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  uint64_t v9;

  os_activity_scope_leave(&a9);
  sub_10052C5EC(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_101233420(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_activity_scope_state_s v5;
  uint8_t buf[4];
  int v7;
  __int16 v8;
  const char *v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  uint64_t v13;

  *(_QWORD *)a1 = off_1021AA250;
  v2 = _os_activity_create((void *)&_mh_execute_header, "CL: CLTileFileDownload(dtor)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v2, &v5);

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021AA2A8);
  v3 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289538;
    v7 = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2082;
    v11 = "activity";
    v12 = 2050;
    v13 = a1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLTileFileDownload(dtor)\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  os_activity_scope_leave(&v5);
  sub_10052C5EC(a1);
  return a1;
}

void sub_101233574(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_101233584(uint64_t a1)
{
  sub_101233420(a1);
  operator delete();
}

id sub_1012335A8(uint64_t a1, uint64_t a2, uint64_t a3, double *a4)
{
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  id v12;
  double v13;
  id v14;
  _QWORD v16[5];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  const char *v23;

  v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLTileFileDownload::download", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v8, &state);

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021AA2A8);
  v9 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    v19 = 0;
    v20 = 2082;
    v21 = "";
    v22 = 2082;
    v23 = "activity";
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLTileFileDownload::download\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  objc_msgSend(*(id *)(a1 + 112), "setCanDownloadOverCelullar:", *(unsigned __int8 *)(a1 + 80));
  if (*(_BYTE *)(a1 + 81))
    operator new();
  if (!*(_QWORD *)(a1 + 104))
    *(_QWORD *)(a1 + 104) = -[CLOSTransaction initWithDescription:]([CLOSTransaction alloc], "initWithDescription:", "CLTileFileDownload");
  if (*(_QWORD *)(a1 + 112))
  {
    if (qword_1022A0290 != -1)
      dispatch_once(&qword_1022A0290, &stru_1021AA2C8);
    v10 = qword_1022A0298;
    if (os_log_type_enabled((os_log_t)qword_1022A0298, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289026;
      v19 = 0;
      v20 = 2082;
      v21 = "";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Dropping uncancelled #TileRemoteDownloader to service new request\"}", buf, 0x12u);
      if (qword_1022A0290 != -1)
        dispatch_once(&qword_1022A0290, &stru_1021AA2C8);
    }
    v11 = qword_1022A0298;
    if (os_signpost_enabled((os_log_t)qword_1022A0298))
    {
      *(_DWORD *)buf = 68289026;
      v19 = 0;
      v20 = 2082;
      v21 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Dropping uncancelled #TileRemoteDownloader to service new request", "{\"msg%{public}.0s\":\"Dropping uncancelled #TileRemoteDownloader to service new request\"}", buf, 0x12u);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  }
  v12 = objc_msgSend(objc_alloc((Class)CLTileRemoteDownloader), "initWithQueue:", objc_msgSend(*(id *)(a1 + 32), "queue"));
  *(_QWORD *)(a1 + 112) = v12;
  v13 = *a4;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_1012339AC;
  v16[3] = &unk_1021AA270;
  v16[4] = a1;
  v14 = objc_msgSend(v12, "downloadAndDecompressFrom:toDecompressedDestination:withTimeout:withCompletionHandler:", a2, a3, v16, v13);
  if ((v14 & 1) == 0)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  os_activity_scope_leave(&state);
  return v14;
}

void sub_101233958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, os_activity_scope_state_s state)
{
  if (a19 < 0)
    operator delete(__p);
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

uint64_t sub_1012339AC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v6;
  id v7;
  NSObject *v8;
  uint64_t v9;
  _DWORD v11[2];
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  int v17;
  __int16 v18;
  void *v19;
  __int16 v20;
  uint64_t v21;

  v6 = *(_QWORD *)(a1 + 32);
  if (a4)
    v7 = objc_msgSend(a4, "code");
  else
    v7 = (id)sub_10052D9A8(a3, a2);
  *(_QWORD *)(v6 + 96) = v7;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021AA2A8);
  v8 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
  {
    v9 = *(_QWORD *)(v6 + 96);
    v11[0] = 68290051;
    v11[1] = 0;
    v12 = 2082;
    v13 = "";
    v14 = 2113;
    v15 = a2;
    v16 = 1025;
    v17 = v9;
    v18 = 2113;
    v19 = a4;
    v20 = 2050;
    v21 = v6;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#TileFileDownload completion\", \"DecompressedFile\":%{private, location:escape_only}@, \"ResultCode\":%{private}d, \"Error\":%{private, location:escape_only}@, \"this\":\"%{public}p\"}", (uint8_t *)v11, 0x36u);
  }
  (*(void (**)(uint64_t, BOOL, _QWORD))(v6 + 64))(v6, *(_QWORD *)(v6 + 96) == 0, *(_QWORD *)(v6 + 72));
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
}

void sub_101233B08(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  os_activity_scope_state_s v5;
  uint8_t buf[4];
  int v7;
  __int16 v8;
  const char *v9;
  __int16 v10;
  const char *v11;

  v2 = _os_activity_create((void *)&_mh_execute_header, "CL: CLTileFileDownload::cancel", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v2, &v5);

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021AA2A8);
  v3 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    v7 = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2082;
    v11 = "activity";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLTileFileDownload::cancel\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  objc_msgSend(*(id *)(a1 + 112), "cancel");

  *(_QWORD *)(a1 + 112) = 0;
  v4 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);

  *(_QWORD *)(a1 + 104) = 0;
  os_activity_scope_leave(&v5);
}

void sub_101233C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_101233C74(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_101233CA0(id a1)
{
  qword_1022A0298 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Network");
}

uint64_t sub_101233CCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v9;
  int v10;
  double v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  double v15;
  int v16;
  double v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  double v21;
  int v22;
  double v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v32;
  uint8_t buf[8];
  _BYTE v34[10];
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;

  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)a1 = &off_1021AA2F8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_BYTE *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 65) = 0u;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 176) = xmmword_101BAFEE0;
  *(_OWORD *)(a1 + 192) = _Q1;
  *(_OWORD *)(a1 + 208) = xmmword_101C47E20;
  *(_QWORD *)(a1 + 224) = 0x4014000000000000;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  sub_1001E4804(buf);
  v9 = *(double *)(a1 + 208);
  v32 = 0.0;
  v10 = sub_1001FD98C(*(uint64_t *)buf, "MaxAllowedSpeedForPreciseTT", &v32);
  v11 = v32;
  if (!v10)
    v11 = v9;
  *(double *)(a1 + 208) = v11;
  v12 = *(std::__shared_weak_count **)v34;
  if (*(_QWORD *)v34)
  {
    v13 = (unint64_t *)(*(_QWORD *)v34 + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  sub_1001E4804(buf);
  v15 = *(double *)(a1 + 216);
  v32 = 0.0;
  v16 = sub_1001FD98C(*(uint64_t *)buf, "MaxAllowedSpeedUncForPreciseTT", &v32);
  v17 = v32;
  if (!v16)
    v17 = v15;
  *(double *)(a1 + 216) = v17;
  v18 = *(std::__shared_weak_count **)v34;
  if (*(_QWORD *)v34)
  {
    v19 = (unint64_t *)(*(_QWORD *)v34 + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  sub_1001E4804(buf);
  v21 = *(double *)(a1 + 224);
  v32 = 0.0;
  v22 = sub_1001FD98C(*(uint64_t *)buf, "MaxAllowedAgeOfLocationForSpeedCheck", &v32);
  v23 = v32;
  if (!v22)
    v23 = v21;
  *(double *)(a1 + 224) = v23;
  v24 = *(std::__shared_weak_count **)v34;
  if (*(_QWORD *)v34)
  {
    v25 = (unint64_t *)(*(_QWORD *)v34 + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021AA378);
  v27 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v28 = *(_QWORD *)(a1 + 208);
    v29 = *(_QWORD *)(a1 + 216);
    v30 = *(_QWORD *)(a1 + 224);
    *(_DWORD *)buf = 68289794;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v34 = 2082;
    *(_QWORD *)&v34[2] = "";
    v35 = 2050;
    v36 = v28;
    v37 = 2050;
    v38 = v29;
    v39 = 2050;
    v40 = v30;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLBBTFTA,construct\", \"fMaxAllowedSpeedForPreciseTT_mps\":\"%{public}.3f\", \"fMaxAllowedSpeedUncForPreciseTT_mps\":\"%{public}.3f\", \"fMaxAllowedAgeOfLocationForSpeedCheckDuringTT_s\":\"%{public}.3f\"}", buf, 0x30u);
  }
  return a1;
}

void sub_101233F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  void **v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  v7 = *(_QWORD *)(v3 + 248);
  *(_QWORD *)(v3 + 248) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(v3 + 240);
  *(_QWORD *)(v3 + 240) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *v5;
  *v5 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  if (*(char *)(v3 + 71) < 0)
    operator delete(*(void **)(v3 + 48));
  if (*(char *)(v3 + 47) < 0)
    operator delete(*v4);
  sub_10008ABA0((_QWORD *)v3);
  _Unwind_Resume(a1);
}

_QWORD *sub_101234028(_QWORD *a1)
{
  NSObject *v2;
  void **v3;
  _QWORD *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v12;
  uint8_t *v13;
  void *__p[2];
  char v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  void **v21;
  __int16 v22;
  _QWORD *v23;

  *a1 = &off_1021AA2F8;
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021AA378);
  v2 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 24))(__p, a1);
    v3 = (void **)__p[0];
    if (v15 >= 0)
      v3 = __p;
    v4 = a1 + 3;
    if (*((char *)a1 + 47) < 0)
      v4 = (_QWORD *)*v4;
    *(_DWORD *)buf = 68289538;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = v3;
    v22 = 2082;
    v23 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLBBTFTA,releasing assertion\", \"client\":%{public, location:escape_only}s, \"reason\":%{public, location:escape_only}s}", buf, 0x26u);
    if (v15 < 0)
      operator delete(__p[0]);
  }
  v5 = a1[31];
  if (v5)
  {
    objc_msgSend(*(id *)(v5 + 16), "unregister:forNotification:", *(_QWORD *)(v5 + 8), 40);
    objc_msgSend(*(id *)(a1[31] + 16), "unregister:forNotification:", *(_QWORD *)(a1[31] + 8), 34);
  }
  if (a1[30])
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021AA378);
    v6 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#wigo,off,CLBBTFTA", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021AA378);
      LOWORD(__p[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "#wigo,off,CLBBTFTA", __p, 2);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "virtual CLDaemonBBTimeFreqTransferCallbackAssertion::~CLDaemonBBTimeFreqTransferCallbackAssertion()", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    AnalyticsSendEventLazy(CFSTR("com.apple.locationd.position.GNSS.WIGO"), &stru_1021AA320);
    objc_msgSend(*(id *)(a1[30] + 16), "unregister:forNotification:", *(_QWORD *)(a1[30] + 8), 0);
  }
  v7 = a1[29];
  if (v7)
    objc_msgSend(*(id *)(v7 + 16), "unregister:forNotification:", *(_QWORD *)(v7 + 8), 37);
  v8 = a1[31];
  a1[31] = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = a1[30];
  a1[30] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = a1[29];
  a1[29] = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (*((char *)a1 + 71) < 0)
    operator delete((void *)a1[6]);
  if (*((char *)a1 + 47) < 0)
    operator delete((void *)a1[3]);
  sub_10008ABA0(a1);
  return a1;
}

void sub_101234374(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

NSDictionary *__cdecl sub_101234380(id a1)
{
  return (NSDictionary *)&off_1022201C8;
}

void sub_101234390(_QWORD *a1)
{
  sub_101234028(a1);
  operator delete();
}

void sub_1012343B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  NSDictionary *v14;
  const __CFString *v15;
  uint64_t v16;

  v15 = CFSTR("kCLBBTFT_Error");
  v16 = a2;
  v14 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v16, &v15, 1);
  sub_101238070("kCLConnectionMessageBBTimeFreqTransferAssertError", &v14, &v12);
  v3 = *(_QWORD *)(a1 + 8);
  v11 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  CLConnection::sendMessage(v3);
  if (v11)
  {
    v6 = (unint64_t *)&v11->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1012344E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_100261F44((uint64_t)va);
  sub_100261F44((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_101234504(uint64_t a1, CLConnectionMessage **a2)
{
  _QWORD *v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  NSObject *v9;
  CLConnectionMessage *v10;
  CLConnectionMessage *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  CLConnectionMessage *v16[2];
  uint8_t buf[4];
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  uint64_t v24;

  v4 = (_QWORD *)CLConnectionMessage::name(*a2);
  v5 = *((char *)v4 + 23);
  if (v5 < 0)
  {
    if (v4[1] != 44)
    {
LABEL_7:
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021AA378);
      v6 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
      {
        v7 = CLConnectionMessage::name(*a2);
        if (*(char *)(v7 + 23) >= 0)
          v8 = (const char *)v7;
        else
          v8 = *(const char **)v7;
        *(_DWORD *)buf = 68289282;
        v18 = 0;
        v19 = 2082;
        v20 = "";
        v21 = 2082;
        v22 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#Warning,CLBBTFTA,unrecognized message\", \"message\":%{public, location:escape_only}s}", buf, 0x1Cu);
      }
      return;
    }
    v4 = (_QWORD *)*v4;
  }
  else if (v5 != 44)
  {
    goto LABEL_7;
  }
  if (memcmp(v4, "kCLConnectionMessageBBTimeFreqTransferAssert", 0x2CuLL))
    goto LABEL_7;
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021AA378);
  v9 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289538;
    v18 = 0;
    v19 = 2082;
    v20 = "";
    v21 = 2082;
    v22 = "kCLConnectionMessageBBTimeFreqTransferAssert";
    v23 = 2050;
    v24 = a1;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLBBTFTA\", \"message\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
  }
  v10 = *a2;
  v11 = a2[1];
  v16[0] = v10;
  v16[1] = v11;
  if (v11)
  {
    v12 = (unint64_t *)((char *)v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  sub_101234760(a1, v16);
  if (v11)
  {
    v14 = (unint64_t *)((char *)v11 + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v11 + 16))(v11);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v11);
    }
  }
}

void sub_10123474C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_101234760(uint64_t a1, CLConnectionMessage **a2)
{
  NSObject *v4;
  void **v5;
  NSObject *v6;
  char v7;
  char v8;
  void *Dictionary;
  id v10;
  id v11;
  id v12;
  void *v13;
  const std::string::value_type *v14;
  _QWORD *v15;
  NSObject *v16;
  void **v17;
  NSObject *v18;
  void **v19;
  NSObject *v20;
  void **v21;
  NSObject *v22;
  void **v23;
  NSObject *v24;
  void **v25;
  void **v26;
  NSObject *v27;
  void **v28;
  void *__p[2];
  uint64_t v30;
  std::string __str;
  uint8_t buf[8];
  __int16 v33;
  const char *v34;
  __int16 v35;
  void **v36;
  __int16 v37;
  _QWORD *v38;

  if (!sub_100762378())
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021AA378);
    v6 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      v33 = 2082;
      v34 = "";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLBBTFTA,feature not supported\"}", buf, 0x12u);
    }
    sub_1012343B4(a1, (uint64_t)CFSTR("Feature not supported"));
    return;
  }
  if (*(char *)(a1 + 47) < 0)
  {
    if (*(_QWORD *)(a1 + 32))
      goto LABEL_4;
  }
  else if (*(_BYTE *)(a1 + 47))
  {
LABEL_4:
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021AA378);
    v4 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(__p, a1);
      if (v30 >= 0)
        v5 = __p;
      else
        v5 = (void **)__p[0];
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2082;
      v36 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLBBTFTA\", \"assertion already taken by\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (SHIBYTE(v30) < 0)
        operator delete(__p[0]);
    }
    sub_1012343B4(a1, (uint64_t)CFSTR("Assertion already taken"));
    return;
  }
  sub_1015A2E04(buf, "com.apple.locationd.bbtimefreqtransfer_callback");
  v7 = sub_1012353FC((_QWORD *)a1, (uint64_t *)buf);
  v8 = v7;
  if ((SBYTE3(v36) & 0x80000000) == 0)
  {
    if ((v7 & 1) != 0)
      goto LABEL_21;
LABEL_28:
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021AA378);
    v16 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(__p, a1);
      v17 = v30 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2082;
      v36 = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLBBTFT,not entitled,ignoring\", \"client\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (SHIBYTE(v30) < 0)
        operator delete(__p[0]);
    }
    sub_1012343B4(a1, (uint64_t)CFSTR("missing entitlement: com.apple.locationd.bbtimefreqtransfer_callback"));
    return;
  }
  operator delete(*(void **)buf);
  if ((v8 & 1) == 0)
    goto LABEL_28;
LABEL_21:
  Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
  v10 = objc_msgSend(Dictionary, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessagePurposeKey"));
  v11 = objc_msgSend(Dictionary, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageBundleIdentifierKey"));
  v12 = objc_msgSend(Dictionary, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageBundlePathKey"));
  if (v11)
  {
    v13 = v12;
    if (v12)
    {
      if (v10)
      {
        if (objc_msgSend(v10, "length"))
        {
          v14 = (const std::string::value_type *)objc_msgSend(v10, "UTF8String");
          v15 = (_QWORD *)(a1 + 24);
          std::string::assign((std::string *)(a1 + 24), v14);
          if (objc_msgSend(v11, "length"))
          {
            sub_1015A2E04(&__str, (char *)objc_msgSend(v11, "UTF8String"));
            sub_1001AE67C(&__str, (uint64_t)buf);
            sub_1001A885C((uint64_t)buf, (uint64_t)__p);
            goto LABEL_75;
          }
          if (objc_msgSend(v13, "length"))
          {
            sub_1015A2E04(&__str, (char *)objc_msgSend(v13, "UTF8String"));
            sub_1001B8590(&__str, (uint64_t)buf);
            sub_1001A885C((uint64_t)buf, (uint64_t)__p);
LABEL_75:
            v26 = (void **)(a1 + 48);
            if (*(char *)(a1 + 71) < 0)
              operator delete(*v26);
            *(_OWORD *)v26 = *(_OWORD *)__p;
            *(_QWORD *)(a1 + 64) = v30;
            HIBYTE(v30) = 0;
            LOBYTE(__p[0]) = 0;
            sub_100010174((uint64_t)buf);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            sub_1006AA544();
          }
          if (qword_1022A01C0 != -1)
            dispatch_once(&qword_1022A01C0, &stru_1021AA378);
          v27 = qword_1022A01C8;
          if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
          {
            (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(__p, a1);
            if (v30 >= 0)
              v28 = __p;
            else
              v28 = (void **)__p[0];
            if (*(char *)(a1 + 47) < 0)
              v15 = (_QWORD *)*v15;
            *(_DWORD *)buf = 68289538;
            *(_DWORD *)&buf[4] = 0;
            v33 = 2082;
            v34 = "";
            v35 = 2082;
            v36 = v28;
            v37 = 2082;
            v38 = v15;
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLBBTFTA,no beneficiary,request denined\", \"requested by\":%{public, location:escape_only}s, \"reason\":%{public, location:escape_only}s}", buf, 0x26u);
            if (SHIBYTE(v30) < 0)
              operator delete(__p[0]);
          }
          sub_1012343B4(a1, (uint64_t)CFSTR("null beneficiary client key"));
          if (*(char *)(a1 + 47) < 0)
          {
            **(_BYTE **)(a1 + 24) = 0;
            *(_QWORD *)(a1 + 32) = 0;
          }
          else
          {
            *(_BYTE *)(a1 + 24) = 0;
            *(_BYTE *)(a1 + 47) = 0;
          }
        }
        else
        {
          if (qword_1022A01C0 != -1)
            dispatch_once(&qword_1022A01C0, &stru_1021AA378);
          v24 = qword_1022A01C8;
          if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
          {
            (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(__p, a1);
            v25 = v30 >= 0 ? __p : (void **)__p[0];
            *(_DWORD *)buf = 68289282;
            *(_DWORD *)&buf[4] = 0;
            v33 = 2082;
            v34 = "";
            v35 = 2082;
            v36 = v25;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLBBTFTA,empty reason,request denined\", \"requested by\":%{public, location:escape_only}s}", buf, 0x1Cu);
            if (SHIBYTE(v30) < 0)
              operator delete(__p[0]);
          }
          sub_1012343B4(a1, (uint64_t)CFSTR("empty reason"));
        }
      }
      else
      {
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_1021AA378);
        v22 = qword_1022A01C8;
        if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
        {
          (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(__p, a1);
          v23 = v30 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)buf = 68289282;
          *(_DWORD *)&buf[4] = 0;
          v33 = 2082;
          v34 = "";
          v35 = 2082;
          v36 = v23;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLBBTFTA,missing reason,request denined\", \"requested by\":%{public, location:escape_only}s}", buf, 0x1Cu);
          if (SHIBYTE(v30) < 0)
            operator delete(__p[0]);
        }
        sub_1012343B4(a1, (uint64_t)CFSTR("missing reason"));
      }
    }
    else
    {
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021AA378);
      v20 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
      {
        (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(__p, a1);
        v21 = v30 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        v33 = 2082;
        v34 = "";
        v35 = 2082;
        v36 = v21;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLBBTFTA,missing bundlePath,request denined\", \"requested by\":%{public, location:escape_only}s}", buf, 0x1Cu);
        if (SHIBYTE(v30) < 0)
          operator delete(__p[0]);
      }
      sub_1012343B4(a1, (uint64_t)CFSTR("missing bundlePath"));
    }
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021AA378);
    v18 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(__p, a1);
      v19 = v30 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2082;
      v36 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLBBTFTA,missing bundleID,request denined\", \"requested by\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (SHIBYTE(v30) < 0)
        operator delete(__p[0]);
    }
    sub_1012343B4(a1, (uint64_t)CFSTR("missing bundleID"));
  }
}

void sub_1012353AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  sub_100010174((uint64_t)&a22);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_1012353FC(_QWORD *a1, uint64_t *a2)
{
  uint64_t isEntitled;
  NSObject *v5;
  void **v6;
  uint64_t *v7;
  void *__p[2];
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  void **v16;
  __int16 v17;
  uint64_t *v18;
  __int16 v19;
  int v20;

  isEntitled = CLConnection::isEntitled(a1[1], a2);
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021AA378);
  v5 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
  {
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 24))(__p, a1);
    if (v10 >= 0)
      v6 = __p;
    else
      v6 = (void **)__p[0];
    if (*((char *)a2 + 23) >= 0)
      v7 = a2;
    else
      v7 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68289794;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 2082;
    v16 = v6;
    v17 = 2082;
    v18 = v7;
    v19 = 1026;
    v20 = isEntitled;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLBBTFTA\", \"requested by\":%{public, location:escape_only}s, \"entitlement\":%{public, location:escape_only}s, \"entitled\":%{public}hhd}", buf, 0x2Cu);
    if (v10 < 0)
      operator delete(__p[0]);
  }
  return isEntitled;
}

void sub_101235560(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v5;
  NSObject *v6;
  os_activity_scope_state_s state;
  char v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;

  CLProfilingIdentify("CLDaemonBBTimeFreqTransferCallbackAssertion::onLocationControllerNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 16), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021AA398);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v8 = 1;
    v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDaemonBBTimeFreqTransferCallbackAssertion::onLocationControllerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021AA398);
    v6 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2082;
      v14 = "activity";
      v15 = 2050;
      v16 = a4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDaemonBBTimeFreqTransferCallbackAssertion::onLocationControllerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v8 = 0;
  }
  sub_101237E60();
  if (v8)
    os_activity_scope_leave(&state);
}

void sub_1012356FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10123571C(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v7;
  NSObject *v8;
  os_activity_scope_state_s state;
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;

  CLProfilingIdentify("CLDaemonBBTimeFreqTransferCallbackAssertion::handleMeasurementNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 16), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021AA398);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v10 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDaemonBBTimeFreqTransferCallbackAssertion::handleMeasurementNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021AA398);
    v8 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2082;
      v16 = "activity";
      v17 = 2050;
      v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDaemonBBTimeFreqTransferCallbackAssertion::handleMeasurementNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v10 = 0;
  }
  if (*a2 == 37)
    sub_101235DDC(a4, a3);
  if (v10)
    os_activity_scope_leave(&state);
}

void sub_1012358DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1012358FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLDaemonBBTimeFreqTransferCallbackAssertion::onGnssLocationNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 16), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021AA398);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDaemonBBTimeFreqTransferCallbackAssertion::onGnssLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021AA398);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDaemonBBTimeFreqTransferCallbackAssertion::onGnssLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1012376AC(a4, v6, v7, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_101235AAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

NSDictionary *__cdecl sub_101235ACC(id a1)
{
  return (NSDictionary *)&off_1022201F0;
}

uint64_t sub_101235AD8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  double v6;
  NSObject *v7;
  uint64_t result;
  NSObject *v9;
  uint64_t v10;
  int v11;
  double v12;
  int v13;
  int v14;
  _QWORD v15[2];
  double v16;
  _BYTE v17[16];
  uint8_t v18[16];
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  _BYTE v24[10];
  uint64_t v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  double v30;

  if (*(_QWORD *)(a1 + 72) < a2)
  {
    v6 = (double)a2 / 1000000000.0;
    sub_101237F8C((uint64_t)v18, (double)(unint64_t)v6);
    v11 = 0;
    v12 = 0.0;
    if (cnnavigation::GPSTimeToJulianTime(v18, a3, v17)
      || cnnavigation::JulianTimeToGregorianTime(v17, &v13))
    {
      goto LABEL_17;
    }
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021AA378);
    v7 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68290562;
      v20 = 0;
      v21 = 2082;
      v22 = "";
      v23 = 1026;
      *(_DWORD *)v24 = v13;
      *(_WORD *)&v24[4] = 1026;
      *(_DWORD *)&v24[6] = v14;
      LOWORD(v25) = 1026;
      *(_DWORD *)((char *)&v25 + 2) = v15[0];
      HIWORD(v25) = 1026;
      v26 = HIDWORD(v15[0]);
      v27 = 1026;
      v28 = v15[1];
      v29 = 2050;
      v30 = v16;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLBBTFTA,GPSUTCLeapSecond,GregorianTime\", \"year\":%{public}d, \"month\":%{public}d, \"day\":%{public}d, \"hour\":%{public}d, \"minute\":%{public}d, \"second\":\"%{public}f\"}", buf, 0x3Au);
    }
    if (LODWORD(v15[0]) != 1 || *(_QWORD *)((char *)v15 + 4) || 1000000000 * (unint64_t)v6 != a2 || v16 != 0.0)
    {
      v15[0] = 1;
      LODWORD(v15[1]) = 0;
      v16 = 0.0;
      if (v14 == 12)
      {
        ++v13;
        v14 = 1;
      }
      else
      {
        ++v14;
      }
    }
    if (cnnavigation::GregorianTimeToJulianTime(&v13, v17)
      || cnnavigation::JulianTimeToGPSTime(v17, a3, &v11))
    {
LABEL_17:
      result = 0;
      *(_QWORD *)(a1 + 72) = 0;
      return result;
    }
    *(_QWORD *)(a1 + 72) = (unint64_t)((v12 + (double)v11 * 604800.0) * 1000000000.0);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021AA378);
    v9 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      v10 = *(_QWORD *)(a1 + 72);
      *(_DWORD *)buf = 68289538;
      v20 = 0;
      v21 = 2082;
      v22 = "";
      v23 = 2050;
      *(_QWORD *)v24 = a2;
      *(_WORD *)&v24[8] = 2050;
      v25 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLBBTFTA,GPSUTCLeapSecond,nextPotentialLeapSecUpdateTime\", \"currGpsTimeNsec\":%{public}llu, \"fPotentialLeapSecondUpdateTimeGPSNsec\":%{public}llu}", buf, 0x26u);
    }
  }
  return 1;
}

void sub_101235DDC(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  float v5;
  float v6;
  double v7;
  float v8;
  double v9;
  uint64_t v10;
  _BOOL4 v11;
  int v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  NSObject *v23;
  uint32_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  _BOOL4 v32;
  double v33;
  double v34;
  double v35;
  double v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  NSDictionary *v55;
  uint8_t buf[8];
  _BYTE v57[10];
  __int16 v58;
  _BYTE v59[28];
  __int16 v60;
  double v61;
  __int16 v62;
  double v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  double v67;
  __int16 v68;
  double v69;
  __int16 v70;
  double v71;
  __int16 v72;
  double v73;
  _QWORD v74[11];
  _QWORD v75[11];

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021AA378);
  v4 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v57 = 2082;
    *(_QWORD *)&v57[2] = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLBBTFTA,kNotificationBasebandTimeFreqTransfer\"}", buf, 0x12u);
  }
  if (sub_101236718(a2 + 1360) && sub_10123677C(a2 + 1352))
  {
    v5 = *(float *)(a2 + 1372);
    v6 = *(float *)(a2 + 1368);
    v7 = *(double *)(a2 + 1376);
    v8 = *(float *)(a2 + 1384);
    v9 = *(double *)(a2 + 1392);
    goto LABEL_21;
  }
  if (sub_1001937D8())
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021AA378);
    v10 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      v11 = (*(_QWORD *)(a2 + 1376) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
         && (*(_QWORD *)(a2 + 1392) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
         && *(float *)(a2 + 1384) > 0.0;
      v29 = sub_101236718(a2 + 1360);
      v30 = *(_QWORD *)(a2 + 1400);
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v57 = 2082;
      *(_QWORD *)&v57[2] = "";
      v58 = 1026;
      *(_DWORD *)v59 = v11;
      *(_WORD *)&v59[4] = 1026;
      *(_DWORD *)&v59[6] = v29;
      *(_WORD *)&v59[10] = 2050;
      *(_QWORD *)&v59[12] = v30;
      v22 = "{\"msg%{public}.0s\":\"CLBBTFTA,isMav22andNewerGnss,GNSS measurements not valid\", \"SystemClockFreqValid\":"
            "%{public}hhd, \"SystemClockTimeandFreqValid\":%{public}hhd, \"GPSTimeNs\":%{public}llu}";
      v23 = v10;
      v24 = 40;
      goto LABEL_37;
    }
    return;
  }
  if (!sub_1000FDB0C() && (sub_10075B95C() & 1) == 0 && !sub_10075BADC())
  {
    if (!*(_QWORD *)(a2 + 1360)
      || (*(_QWORD *)(a2 + 1376) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(_QWORD *)(a2 + 1392) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || *(float *)(a2 + 1384) <= 0.0)
    {
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021AA378);
      v31 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
      {
        v32 = (*(_QWORD *)(a2 + 1376) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
           && (*(_QWORD *)(a2 + 1392) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
           && *(float *)(a2 + 1384) > 0.0;
        v52 = *(_QWORD *)(a2 + 1360);
        v53 = *(_QWORD *)(a2 + 1400);
        *(_DWORD *)buf = 68289794;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v57 = 2082;
        *(_QWORD *)&v57[2] = "";
        v58 = 1026;
        *(_DWORD *)v59 = v32;
        *(_WORD *)&v59[4] = 2050;
        *(_QWORD *)&v59[6] = v52;
        *(_WORD *)&v59[14] = 2050;
        *(_QWORD *)&v59[16] = v53;
        v22 = "{\"msg%{public}.0s\":\"CLBBTFTA,GNSS measurements not valid\", \"SystemClockFreqValid\":%{public}hhd, \"Sy"
              "stemClockMsec\":%{public}llu, \"GPSTimeNs\":%{public}llu}";
        v23 = v31;
        v24 = 44;
        goto LABEL_37;
      }
      return;
    }
    v5 = 1.0;
    v7 = 0.0;
    v6 = 0.0;
    v8 = 0.0;
LABEL_20:
    v9 = 0.0;
LABEL_21:
    v12 = sub_1012367D0(a1, a2 + 1352);
    v13 = *(unsigned __int8 *)(a1 + 168);
    v14 = *(_OWORD *)(a2 + 1368);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 1352);
    *(_OWORD *)(a1 + 96) = v14;
    v16 = *(_OWORD *)(a2 + 1400);
    v15 = *(_OWORD *)(a2 + 1416);
    v17 = *(_OWORD *)(a2 + 1384);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 1432);
    *(_OWORD *)(a1 + 128) = v16;
    *(_OWORD *)(a1 + 144) = v15;
    *(_OWORD *)(a1 + 112) = v17;
    if (v13)
    {
      if (!v12)
        return;
    }
    else
    {
      *(_BYTE *)(a1 + 168) = 1;
      if (!v12)
        return;
    }
    v25 = objc_alloc_init((Class)NSMutableDictionary);
    v26 = sub_100512544();
    v27 = *(__int16 *)(a2 + 1416);
    if ((_DWORD)v27 != -32768)
    {
      v28 = *(unsigned __int8 *)(a2 + 1418);
      if (*(_QWORD *)(a2 + 1424))
      {
        if ((v28 != 2) != (*(__int16 *)(a2 + 1432) != -32768))
          goto LABEL_32;
      }
      else if (v28 != 2)
      {
LABEL_32:
        objc_msgSend(v25, "setObject:forKeyedSubscript:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(__int16 *)(a2 + 1416)), CFSTR("kCLBBTFT_currentGpsUtcLeapSecond"));
        if (*(_BYTE *)(a2 + 1418) == 2)
        {
          if (*(_QWORD *)(a2 + 1424) >= *(_QWORD *)(a2 + 1400))
          {
            objc_msgSend(v25, "setObject:forKeyedSubscript:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(__int16 *)(a2 + 1432)), CFSTR("kCLBBTFT_upcomingGpsUtcLeapSecond"));
            objc_msgSend(v25, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a2 + 1424) - *(_QWORD *)(a2 + 1400)), CFSTR("kCLBBTFT_upcomingGpsUtcLeapSeconUpdateDeltaTimeGPSNsec"));
          }
        }
        else if (!*(_BYTE *)(a2 + 1418)
               && *(float *)(a2 + 1408) < 1000000.0
               && sub_101235AD8(a1, *(_QWORD *)(a2 + 1400), v27))
        {
          v50 = *(_QWORD *)(a1 + 72) - *(_QWORD *)(a2 + 1400);
          if (v50 <= 0x773593FF)
            v51 = *(_QWORD *)(a1 + 72) - *(_QWORD *)(a2 + 1400);
          else
            v51 = (unint64_t)((double)v50 + -2000000000.0);
          objc_msgSend(v25, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v51), CFSTR("kCLBBTFT_possibleGpsUtcLeapSeconUpdateDeltaTimeGPSNsec"));
        }
        goto LABEL_51;
      }
    }
    objc_msgSend(v25, "setObject:forKeyedSubscript:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v26), CFSTR("kCLBBTFT_currentGpsUtcLeapSecond"));
LABEL_51:
    v75[0] = &off_102220C58;
    v74[0] = CFSTR("kCLBBTFT_messageVersion");
    v74[1] = CFSTR("kCLBBTFT_timestamp");
    v75[1] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a2 + 1352));
    v74[2] = CFSTR("kCLBBTFT_systemRTCMsec");
    v75[2] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a2 + 1360));
    v74[3] = CFSTR("kCLBBTFT_systemRTCSubMsec");
    *(float *)&v33 = v6;
    v75[3] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v33);
    v74[4] = CFSTR("kCLBBTFT_systemRTCUncertaintyMsec");
    *(float *)&v34 = v5;
    v75[4] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v34);
    v74[5] = CFSTR("kCLBBTFT_GPSTimeNsec");
    v75[5] = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a2 + 1400));
    v74[6] = CFSTR("kCLBBTFT_GPSTimeUncertaintyNsec");
    LODWORD(v35) = *(_DWORD *)(a2 + 1408);
    v75[6] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v35);
    v74[7] = CFSTR("kCLBBTFT_clockOffsetPPB");
    v75[7] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v7);
    v74[8] = CFSTR("kCLBBTFT_clockOffsetUncertaintyPPB");
    *(float *)&v36 = v8;
    v75[8] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v36);
    v74[9] = CFSTR("kCLBBTFT_clockOffsetThermalCorrectionPPB");
    v75[9] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v9);
    v74[10] = CFSTR("kCLBBTFT_gpsUtcLeapSecondDictionary");
    v75[10] = v25;
    v55 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v75, v74, 11);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021AA378);
    v37 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      v38 = *(_QWORD *)(a2 + 1352);
      v39 = *(_QWORD *)(a2 + 1360);
      v40 = *(_QWORD *)(a2 + 1400);
      v41 = *(float *)(a2 + 1408);
      *(_DWORD *)buf = 68291586;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v57 = 2082;
      *(_QWORD *)&v57[2] = "";
      v58 = 2050;
      *(_QWORD *)v59 = 0x3FF0000000000000;
      *(_WORD *)&v59[8] = 2050;
      *(_QWORD *)&v59[10] = v38;
      *(_WORD *)&v59[18] = 2050;
      *(_QWORD *)&v59[20] = v39;
      v60 = 2050;
      v61 = v6;
      v62 = 2050;
      v63 = v5;
      v64 = 2050;
      v65 = v40;
      v66 = 2050;
      v67 = v41;
      v68 = 2050;
      v69 = v7;
      v70 = 2050;
      v71 = v8;
      v72 = 2050;
      v73 = v9;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLBBTFTA\", \"kCLBBTFT_messageVersion\":\"%{public}.1f\", \"kCLBBTFT_timestamp\":\"%{public}f\", \"kCLBBTFT_systemRTCMsec\":%{public}llu, \"kCLBBTFT_systemRTCSubMsec\":\"%{public}f\", \"kCLBBTFT_systemRTCUncertaintyMsec\":\"%{public}f\", \"kCLBBTFT_GPSTimeNsec\":%{public}llu, \"kCLBBTFT_GPSTimeUncertaintyNsec\":\"%{public}f\", \"kCLBBTFT_clockOffsetPPB\":\"%{public}f\", \"kCLBBTFT_clockOffsetUncertaintyPPB\":\"%{public}f\", \"kCLBBTFT_clockOffsetThermalCorrectionPPB\":\"%{public}f\"}", buf, 0x76u);
    }
    sub_101238070("kCLConnectionMessageBBTimeFreqTransferMeasurement", &v55, buf);
    v42 = *(_QWORD *)(a1 + 8);
    v54 = *(std::__shared_weak_count **)v57;
    if (*(_QWORD *)v57)
    {
      v43 = (unint64_t *)(*(_QWORD *)v57 + 8);
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    CLConnection::sendMessage(v42);
    if (v54)
    {
      p_shared_owners = (unint64_t *)&v54->__shared_owners_;
      do
        v46 = __ldaxr(p_shared_owners);
      while (__stlxr(v46 - 1, p_shared_owners));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    v47 = *(std::__shared_weak_count **)v57;
    if (*(_QWORD *)v57)
    {
      v48 = (unint64_t *)(*(_QWORD *)v57 + 8);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    return;
  }
  if (sub_10123677C(a2 + 1352))
  {
    v5 = *(float *)(a2 + 1372);
    v6 = *(float *)(a2 + 1368);
    v8 = 0.0;
    v7 = 0.0;
    goto LABEL_20;
  }
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021AA378);
  v18 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
  {
    v19 = *(_QWORD *)(a2 + 1352);
    v20 = *(_QWORD *)(a2 + 1360);
    v21 = *(_QWORD *)(a2 + 1400);
    *(_DWORD *)buf = 68289794;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v57 = 2082;
    *(_QWORD *)&v57[2] = "";
    v58 = 2050;
    *(_QWORD *)v59 = v19;
    *(_WORD *)&v59[8] = 2050;
    *(_QWORD *)&v59[10] = v20;
    *(_WORD *)&v59[18] = 2050;
    *(_QWORD *)&v59[20] = v21;
    v22 = "{\"msg%{public}.0s\":\"CLBBTFTA,GNSS measurements not valid\", \"ReceiptMachContinuousSec\":\"%{public}f\", \""
          "SystemClockMsec\":%{public}llu, \"GPSTimeNs\":%{public}llu}";
    v23 = v18;
    v24 = 48;
LABEL_37:
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, v22, buf, v24);
  }
}

void sub_1012366F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  sub_100261F44((uint64_t)&a9);
  sub_100261F44((uint64_t)&a13);
  _Unwind_Resume(a1);
}

BOOL sub_101236718(uint64_t a1)
{
  float v1;
  BOOL v2;

  if (*(_QWORD *)a1
    && ((v1 = *(float *)(a1 + 8), v1 >= 0.0) ? (v2 = v1 < 1.0) : (v2 = 0),
        v2
     && *(float *)(a1 + 12) > 0.0
     && (*(_QWORD *)(a1 + 16) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
     && (*(_QWORD *)(a1 + 32) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL))
  {
    return *(float *)(a1 + 24) > 0.0;
  }
  else
  {
    return 0;
  }
}

BOOL sub_10123677C(uint64_t a1)
{
  float v1;
  BOOL v2;

  if (*(_QWORD *)(a1 + 8)
    && ((v1 = *(float *)(a1 + 16), v1 >= 0.0) ? (v2 = v1 < 1.0) : (v2 = 0),
        v2 && *(float *)(a1 + 20) > 0.0 && *(_QWORD *)(a1 + 48) && *(float *)(a1 + 56) > 0.0))
  {
    return *(double *)a1 > 0.0;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1012367D0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  float v5;
  BOOL v6;
  double v7;
  NSObject *v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  double v15;
  double v16;
  unint64_t v17;
  double v18;
  float v19;
  double v21;
  double v22;
  double v23;
  _BOOL4 v24;
  unint64_t v25;
  double v26;
  double v27;
  unint64_t v28;
  int v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  int v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  BOOL v43;
  BOOL v44;
  double v45;
  double v46;
  _BOOL4 v47;
  _BOOL4 v48;
  double v49;
  int v50;
  int v51;
  unsigned int v52;
  NSObject *v53;
  _BOOL4 v54;
  const char *v55;
  double v56;
  double v57;
  double v58;
  _BOOL4 v59;
  float v60;
  uint64_t v61;
  const char *v62;
  double v63;
  char *v64;
  void **v65;
  std::string::size_type v66;
  std::string *v67;
  __int128 v68;
  char *v69;
  void **v70;
  std::string::size_type v71;
  std::string *v72;
  __int128 v73;
  char *v74;
  void **v75;
  std::string::size_type v76;
  std::string *v77;
  __int128 v78;
  id v79;
  _BYTE *v80;
  double v82;
  double v83;
  double v84;
  void *__p[2];
  unsigned __int8 v86;
  void *v87[2];
  unsigned __int8 v88;
  void *v89[2];
  unsigned __int8 v90;
  std::string v91;
  std::string v92;
  std::string v93;
  char v94[16];
  _BYTE buf[28];
  __int16 v96;
  const char *v97;
  __int16 v98;
  const char *v99;
  __int16 v100;
  double v101;
  __int16 v102;
  double v103;
  __int16 v104;
  double v105;
  __int16 v106;
  _BYTE v107[20];
  _BYTE v108[10];
  const char *v109;
  _BOOL4 v110;
  __int16 v111;
  double v112;
  __int16 v113;
  _BOOL4 v114;
  __int16 v115;
  double v116;
  __int16 v117;
  double v118;
  __int16 v119;
  double v120;
  __int16 v121;
  _BOOL4 v122;
  __int16 v123;
  double v124;
  __int16 v125;
  _BOOL4 v126;
  __int16 v127;
  uint64_t v128;
  __int16 v129;
  _BOOL4 v130;
  __int16 v131;
  int v132;
  __int16 v133;
  _BOOL4 v134;
  __int16 v135;
  const char *v136;

  if (*(_BYTE *)(a1 + 168))
  {
    v4 = *(_QWORD *)(a2 + 8);
    if (v4 && ((v5 = *(float *)(a2 + 16), v5 >= 0.0) ? (v6 = v5 < 1.0) : (v6 = 0), v6))
    {
      v16 = v5;
      if (*(float *)(a2 + 20) <= 0.0)
        v7 = 0.0;
      else
        v7 = v16;
    }
    else
    {
      v7 = 0.0;
    }
    v17 = *(_QWORD *)(a1 + 88);
    v84 = 0.0;
    v18 = 0.0;
    if (v17)
    {
      v19 = *(float *)(a1 + 96);
      if (v19 >= 0.0 && v19 < 1.0)
      {
        v21 = v19;
        if (*(float *)(a1 + 100) > 0.0)
          v18 = v21;
        else
          v18 = 0.0;
      }
    }
    v22 = *(double *)(a2 + 24);
    if ((*(_QWORD *)&v22 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*(_QWORD *)(a2 + 40) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      if (*(float *)(a2 + 32) <= 0.0)
        v22 = 0.0;
      v84 = v22;
    }
    v23 = 0.0;
    if ((*(_QWORD *)(a1 + 104) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*(_QWORD *)(a1 + 120) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      if (*(float *)(a1 + 112) > 0.0)
        v23 = *(double *)(a1 + 104);
      else
        v23 = 0.0;
    }
    v24 = *(float *)(a2 + 56) * 0.000000001 < 0.00001 && *(float *)(a1 + 136) * 0.000000001 < 0.00001;
    v25 = *(_QWORD *)(a1 + 128);
    v26 = *(double *)a2;
    v27 = *(double *)(a1 + 80);
    v28 = *(_QWORD *)(a2 + 48);
    sub_1001E4804(buf);
    v93.__r_.__value_.__s.__data_[0] = 0;
    v29 = sub_1001E4874(*(uint64_t *)buf, "BBTFTAIgnoreGpsFixCheck", (BOOL *)&v93);
    v30 = v18 + (double)v17;
    v31 = v26 - v27;
    v32 = (double)v28 * 0.000000001;
    v33 = (v84 - v23) / (v26 - v27);
    v34 = v30 * 0.001 - (double)v25 * 0.000000001 + (v26 - v27) * v23 * 0.000000001;
    v35 = (v7 + (double)v4) * 0.001 - v32;
    v36 = fabs(v84);
    v37 = fabs(v33);
    v38 = vabdd_f64(v34, v35);
    if (v93.__r_.__value_.__s.__data_[0])
      v39 = v29;
    else
      v39 = 0;
    v40 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v41 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    v83 = v38;
    v43 = v38 < 0.0003;
    v82 = v37;
    v44 = v37 < 50000.0;
    v45 = sub_1001FCBB4();
    v46 = *(double *)(a1 + 176);
    v47 = sub_101237144(a1);
    v48 = v47;
    v49 = v45 - v46;
    v50 = v24 & ~(v36 < 100000.0 && v44 && v43) & (v31 <= 60.0);
    if (v49 < 5.0)
      v51 = 1;
    else
      v51 = v39;
    if (v31 > 60.0)
      v51 = 0;
    v52 = v51 & !v47;
    if (v43 && v44 && v24)
      v9 = v52;
    else
      v9 = 0;
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021AA378);
    v53 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      v54 = (*(_QWORD *)(a2 + 24) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
         && (*(_QWORD *)(a2 + 40) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
         && *(float *)(a2 + 32) > 0.0;
      if (!*(_BYTE *)(a1 + 168))
        sub_10028DF3C();
      v55 = *(const char **)(a2 + 8);
      v56 = *(float *)(a2 + 16);
      v57 = *(float *)(a2 + 20);
      v58 = *(double *)(a2 + 48);
      v59 = (*(_QWORD *)(a1 + 104) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
         && (*(_QWORD *)(a1 + 120) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
         && *(float *)(a1 + 112) > 0.0;
      v60 = *(float *)(a2 + 56);
      v61 = *(_QWORD *)(a1 + 176);
      *(_DWORD *)buf = 68295426;
      *(_DWORD *)&buf[4] = 0;
      v62 = "reject measurement";
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2050;
      *(_QWORD *)&buf[20] = 0x3FF0000000000000;
      v63 = v60;
      v97 = "status";
      v96 = 2082;
      if ((_DWORD)v9)
        v62 = "accept measurement";
      v98 = 2050;
      v99 = v55;
      v100 = 2050;
      v101 = v56;
      v102 = 2050;
      v103 = v57;
      v104 = 2050;
      v105 = v58;
      v106 = 1026;
      *(_DWORD *)v107 = v54;
      *(_WORD *)&v107[4] = 2050;
      *(double *)&v107[6] = v84;
      *(_WORD *)&v107[14] = 1026;
      *(_DWORD *)&v107[16] = v36 < 100000.0;
      *(_WORD *)v108 = 2050;
      *(double *)&v108[2] = v31;
      LOWORD(v109) = 1026;
      *(_DWORD *)((char *)&v109 + 2) = v31 <= 60.0;
      HIWORD(v109) = 1026;
      v110 = v59;
      v111 = 2050;
      v112 = v23;
      v113 = 1026;
      v114 = v82 < 50000.0;
      v115 = 2050;
      v116 = v34;
      v117 = 2050;
      v118 = v35;
      v119 = 2050;
      v120 = v34 - v35;
      v121 = 1026;
      v122 = v83 < 0.0003;
      v123 = 2050;
      v124 = v63;
      v125 = 1026;
      v126 = v24;
      v127 = 2050;
      v128 = v61;
      v129 = 1026;
      v130 = v49 < 5.0;
      v131 = 1026;
      v132 = v39;
      v133 = 1026;
      v134 = v48;
      v135 = 2082;
      v136 = v62;
      _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLBBTFTA\", \"kCLBBTFT_messageVersion\":\"%{public}.1f\", \"consistencyCheckForCurrentMeasurement\":%{public, location:escape_only}s, \"kCLBBTFT_systemRTCMsec\":%{public}llu, \"kCLBBTFT_systemRTCSubMsec\":\"%{public}f\", \"kCLBBTFT_systemRTCUncertaintyMsec\":\"%{public}f\", \"kCLBBTFT_GPSTimeNsec\":%{public}llu, \"meas.isFrequencyDriftValid\":%{public}hhd, \"meas.mSystemClockDriftPpb\":\"%{public}.1f\", \"isMaxClockDriftOK\":%{public}hhd, \"timeSinceLastMeasurement_sec\":\"%{public}.3f\", \"isAgeOfLastMeasurementOK\":%{public}hhd, \"prev.isFrequencyDriftValid\":%{public}hhd, \"prev.mSystemClockDriftPpb\":\"%{public}.1f\", \"isClockDriftChangeOK\":%{public}hhd, \"predictedRtcMinusGps_sec\":\"%{public}.9f\", \"measuredRtcMinusGps_sec\":\"%{public}.9f\", \"rtcMinusGPS_predMinusMeas_sec\":\"%{public}.9f\", \"isPredictionErrorOK\":%{public}hhd, \"mGPSTimeUncertainityNs\":\"%{public}.3f\", \"isGpsUncAcceptable\":%{public}hhd, \"fMCTOfLastGpsFixReceived_s\":\"%{public}.3f\", \"areGpsFixesAvailable\":%{public}hhd, \"isBBTFTAIgnoreGpsFixCheck\":%{public}hhd, \"blockPreciseTTDueToSpeed\":%{public}hhd, \"result\":%{public, location:escape_only}s}", buf, 0xE4u);
    }
    if (v50)
    {
      strcpy(v94, "timemark");
      sub_1015A2E04(&v91, "");
      if (v36 >= 100000.0)
        v64 = "large-clock-drift ";
      else
        v64 = "";
      sub_1015A2E04(v89, v64);
      if ((v90 & 0x80u) == 0)
        v65 = v89;
      else
        v65 = (void **)v89[0];
      if ((v90 & 0x80u) == 0)
        v66 = v90;
      else
        v66 = (std::string::size_type)v89[1];
      v67 = std::string::append(&v91, (const std::string::value_type *)v65, v66);
      v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
      v92.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v68;
      v67->__r_.__value_.__l.__size_ = 0;
      v67->__r_.__value_.__r.__words[2] = 0;
      v67->__r_.__value_.__r.__words[0] = 0;
      if (v82 >= 50000.0)
        v69 = "large-clock-drift-change ";
      else
        v69 = "";
      sub_1015A2E04(v87, v69);
      if ((v88 & 0x80u) == 0)
        v70 = v87;
      else
        v70 = (void **)v87[0];
      if ((v88 & 0x80u) == 0)
        v71 = v88;
      else
        v71 = (std::string::size_type)v87[1];
      v72 = std::string::append(&v92, (const std::string::value_type *)v70, v71);
      v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
      v93.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v73;
      v72->__r_.__value_.__l.__size_ = 0;
      v72->__r_.__value_.__r.__words[2] = 0;
      v72->__r_.__value_.__r.__words[0] = 0;
      if (v83 >= 0.0003)
        v74 = "large-RTC-To-GPS-change ";
      else
        v74 = "";
      sub_1015A2E04(__p, v74);
      if ((v86 & 0x80u) == 0)
        v75 = __p;
      else
        v75 = (void **)__p[0];
      if ((v86 & 0x80u) == 0)
        v76 = v86;
      else
        v76 = (std::string::size_type)__p[1];
      v77 = std::string::append(&v93, (const std::string::value_type *)v75, v76);
      v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
      *(_QWORD *)&buf[16] = *((_QWORD *)&v77->__r_.__value_.__l + 2);
      *(_OWORD *)buf = v78;
      v77->__r_.__value_.__l.__size_ = 0;
      v77->__r_.__value_.__r.__words[2] = 0;
      v77->__r_.__value_.__r.__words[0] = 0;
      if ((char)v86 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v93.__r_.__value_.__l.__data_);
      if ((char)v88 < 0)
        operator delete(v87[0]);
      if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v92.__r_.__value_.__l.__data_);
      if ((char)v90 < 0)
        operator delete(v89[0]);
      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v91.__r_.__value_.__l.__data_);
      v79 = objc_msgSend(objc_msgSend(*(id *)(a1 + 16), "silo", v34 - v35), "queue");
      if (buf[23] >= 0)
        v80 = buf;
      else
        v80 = *(_BYTE **)buf;
      sub_101740774((uint64_t)v79, (uint64_t)v94, (uint64_t)v80, 1);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
    }
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021AA378);
    v8 = qword_1022A01C8;
    v9 = 0;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      v10 = *(double *)a2;
      v11 = *(double *)(a2 + 8);
      v12 = *(float *)(a2 + 16);
      v13 = *(float *)(a2 + 20);
      v14 = *(_QWORD *)(a2 + 48);
      v15 = *(float *)(a2 + 56);
      *(_DWORD *)buf = 68291586;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2050;
      *(_QWORD *)&buf[20] = 0x3FF0000000000000;
      v96 = 2082;
      v97 = "fail";
      v98 = 2082;
      v99 = "no previous measurement";
      v100 = 2050;
      v101 = v10;
      v102 = 2050;
      v103 = v11;
      v104 = 2050;
      v105 = v12;
      v106 = 2050;
      *(double *)v107 = v13;
      *(_WORD *)&v107[8] = 2050;
      *(_QWORD *)&v107[10] = v14;
      *(_WORD *)&v107[18] = 2050;
      *(double *)v108 = v15;
      *(_WORD *)&v108[8] = 2082;
      v109 = "reject measurement";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLBBTFTA\", \"kCLBBTFT_messageVersion\":\"%{public}.1f\", \"consistencyCheckForCurrentMeasurement\":%{public, location:escape_only}s, \"cause\":%{public, location:escape_only}s, \"kCLBBTFT_timestamp\":\"%{public}f\", \"kCLBBTFT_systemRTCMsec\":%{public}llu, \"kCLBBTFT_systemRTCSubMsec\":\"%{public}f\", \"kCLBBTFT_systemRTCUncertaintyMsec\":\"%{public}f\", \"kCLBBTFT_GPSTimeNsec\":%{public}llu, \"kCLBBTFT_GPSTimeUncertaintyNsec\":\"%{public}f\", \"result\":%{public, location:escape_only}s}", buf, 0x76u);
      return 0;
    }
  }
  return v9;
}

void sub_101237084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a20 < 0)
    operator delete(__p);
  if (a51 < 0)
    operator delete(a46);
  if (a26 < 0)
    operator delete(a21);
  if (a44 < 0)
    operator delete(a39);
  if (a32 < 0)
    operator delete(a27);
  if (a38 < 0)
    operator delete(a33);
  _Unwind_Resume(exception_object);
}

BOOL sub_101237144(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  double v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  NSObject *v14;
  _BOOL4 v15;
  _BOOL8 result;
  const char *v17;
  double v18;
  _BOOL4 v19;
  double v20;
  _BOOL4 v21;
  int v22;
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  double v37;
  __int16 v38;
  double v39;

  v2 = *(double *)(a1 + 200);
  v3 = sub_1001FCBB4();
  v4 = *(double *)(a1 + 176);
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021AA378);
  v5 = v3 - v4;
  v6 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_QWORD *)(a1 + 208);
    v8 = *(_QWORD *)(a1 + 216);
    v9 = *(_QWORD *)(a1 + 224);
    v11 = *(_QWORD *)(a1 + 184);
    v10 = *(_QWORD *)(a1 + 192);
    v22 = 68290818;
    v23 = 0;
    v24 = 2082;
    v25 = "";
    v26 = 2050;
    v27 = v7;
    v28 = 2050;
    v29 = v8;
    v30 = 2050;
    v31 = v9;
    v32 = 2050;
    v33 = v10;
    v34 = 2050;
    v35 = v11;
    v36 = 2050;
    v37 = v2;
    v38 = 2050;
    v39 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLBBTFTA,blockPreciseTTAtHighSpeed\", \"fMaxAllowedSpeedForPreciseTT_mps\":\"%{public}.3f\", \"fMaxAllowedSpeedUncForPreciseTT_mps\":\"%{public}.3f\", \"fMaxAllowedAgeOfLocationForSpeedCheckDuringTT_s\":\"%{public}.3f\", \"curSpeed\":\"%{public}.3f\", \"curSpeedUnc\":\"%{public}.3f\", \"ageOfLastLocation\":\"%{public}.3f\", \"timeSinceLastLocation\":\"%{public}.3f\"}", (uint8_t *)&v22, 0x58u);
  }
  v12 = *(double *)(a1 + 224);
  if (v2 <= v12 && v5 <= v12)
  {
    v18 = *(double *)(a1 + 184);
    if (v18 > 0.0 && v18 <= *(double *)(a1 + 216))
    {
      v20 = *(double *)(a1 + 192);
      if (v20 >= 0.0)
        return v20 + v18 * -2.0 >= *(double *)(a1 + 208);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021AA378);
      v14 = qword_1022A01C8;
      v21 = os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT);
      result = 0;
      if (v21)
      {
        v22 = 68289026;
        v23 = 0;
        v24 = 2082;
        v25 = "";
        v17 = "{\"msg%{public}.0s\":\"CLBBTFTA,blockPreciseTTAtHighSpeed,invalid speed\"}";
        goto LABEL_19;
      }
    }
    else
    {
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021AA378);
      v14 = qword_1022A01C8;
      v19 = os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT);
      result = 0;
      if (v19)
      {
        v22 = 68289026;
        v23 = 0;
        v24 = 2082;
        v25 = "";
        v17 = "{\"msg%{public}.0s\":\"CLBBTFTA,blockPreciseTTAtHighSpeed,invalid speed accuracy\"}";
        goto LABEL_19;
      }
    }
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021AA378);
    v14 = qword_1022A01C8;
    v15 = os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (v15)
    {
      v22 = 68289026;
      v23 = 0;
      v24 = 2082;
      v25 = "";
      v17 = "{\"msg%{public}.0s\":\"CLBBTFTA,blockPreciseTTAtHighSpeed,location is not latest\"}";
LABEL_19:
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v17, (uint8_t *)&v22, 0x12u);
      return 0;
    }
  }
  return result;
}

BOOL sub_101237458(float a1, float a2, uint64_t a3, _DWORD *a4, _DWORD *a5, uint64_t a6)
{
  float v7;
  float v8;
  _BOOL8 result;
  BOOL v10;
  BOOL v11;
  int v12;
  int v13;
  int v14;
  NSObject *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  const char *v20;
  uint8_t *v21;
  int v22;
  double v23;
  __int16 v24;
  double v25;
  uint8_t buf[4];
  double v27;
  __int16 v28;
  double v29;

  v7 = *(float *)(a6 + 8);
  v8 = *(float *)(a6 + 12);
  if (v7 == 0.0 && v8 == 0.0)
    return 0;
  v10 = v7 < 0.0 || v7 > 90.0;
  if (v10 || (v8 >= 0.0 ? (v11 = v8 > 360.0) : (v11 = 1), v11))
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021AA378);
    v15 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      v16 = *(float *)(a6 + 8);
      v17 = *(float *)(a6 + 12);
      *(_DWORD *)buf = 134349312;
      v27 = v16;
      v28 = 2050;
      v29 = v17;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "CLBBTFTA,heatmap,invalid az/el,%{public}f,%{public}f", buf, 0x16u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021AA378);
      v18 = *(float *)(a6 + 8);
      v19 = *(float *)(a6 + 12);
      v22 = 134349312;
      v23 = v18;
      v24 = 2050;
      v25 = v19;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 1, "CLBBTFTA,heatmap,invalid az/el,%{public}f,%{public}f", &v22, 22);
      v21 = (uint8_t *)v20;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLDaemonBBTimeFreqTransferCallbackAssertion::svHeatMapBucketIndices(unsigned int &, unsigned int &, const float, const float, const CLClientSatelliteInfo &) const", "%s\n", v20);
      if (v21 != buf)
        free(v21);
      return 0;
    }
  }
  else
  {
    v12 = vcvtps_s32_f32(v8 / a1);
    if (v12 <= 1)
      v12 = 1;
    v13 = vcvtps_s32_f32(v7 / a2);
    *a4 = v12 - 1;
    if (v13 <= 1)
      v14 = 1;
    else
      v14 = v13;
    *a5 = v14 - 1;
    return 1;
  }
  return result;
}

void sub_1012376AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v5;
  void *v6;
  uint64_t *v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  float v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  NSNumber *v21;
  id v22;
  uint64_t v23;
  NSObject *v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  const char *v38;
  unsigned int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  unsigned int *v45;
  uint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v49;
  _QWORD v50[4];
  _QWORD v51[4];
  _BYTE v52[12];
  __int16 v53;
  _BYTE v54[10];
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  unsigned int buf;
  _BYTE buf_4[20];
  uint64_t v60;
  __int16 v61;
  uint64_t v62;

  v5 = objc_alloc_init((Class)NSMutableDictionary);
  v6 = v5;
  v47 = a4;
  v7 = *(uint64_t **)(a4 + 680);
  v8 = 0.0;
  if (!v7 || (v10 = *v7, v9 = v7[1], *v7 == v9))
  {
    v11 = 0;
    v12 = 0;
    goto LABEL_41;
  }
  v11 = 0;
  v12 = 0;
  do
  {
    if (*(_DWORD *)v10 != 5)
    {
      if (*(_BYTE *)(v10 + 24))
      {
        v13 = *(float *)(v10 + 16);
        if (v13 < *(float *)(v10 + 20))
          v13 = *(float *)(v10 + 20);
        v14 = v13 <= 18.0 ? 1 : 2;
        v15 = v13 <= 25.0 && *(_BYTE *)(v10 + 25) == 0;
        v16 = v15 ? v14 : 3;
        v17 = v12 + 1;
      }
      else
      {
        v16 = 0;
        v17 = v12;
      }
      if (*(float *)(v10 + 8) > 15.0)
      {
        v12 = v17;
        ++v11;
      }
      buf = 0;
      *(_DWORD *)v52 = 0;
      LODWORD(v5) = sub_101237458(15.0, 15.0, (uint64_t)v5, v52, &buf, v10);
      if ((_DWORD)v5)
      {
        v18 = buf;
        if (!objc_msgSend(v6, "objectForKeyedSubscript:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", buf))|| (v19 = objc_msgSend(v6, "objectForKeyedSubscript:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v18)), v20 = *(unsigned int *)v52, !objc_msgSend(v19, "objectForKeyedSubscript:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)v52))))
        {
          if (!objc_msgSend(v6, "objectForKeyedSubscript:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v18)))objc_msgSend(v6, "setObject:forKeyedSubscript:", objc_alloc_init((Class)NSMutableDictionary), +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v18));
          v21 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v16);
          v22 = objc_msgSend(v6, "objectForKeyedSubscript:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v18));
          v23 = *(unsigned int *)v52;
          goto LABEL_36;
        }
        v5 = objc_msgSend(objc_msgSend(objc_msgSend(v6, "objectForKeyedSubscript:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v18)), "objectForKeyedSubscript:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v20)), "shortValue");
        if ((_DWORD)v5 == 2)
        {
          if ((_DWORD)v16 == 3)
            goto LABEL_35;
        }
        else
        {
          if ((_DWORD)v5 == 1)
          {
            if ((v16 & 2) != 2)
              goto LABEL_37;
LABEL_35:
            v21 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v16);
            v22 = objc_msgSend(v6, "objectForKeyedSubscript:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v18));
            v23 = v20;
LABEL_36:
            v5 = objc_msgSend(v22, "setObject:forKeyedSubscript:", v21, +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v23));
            goto LABEL_37;
          }
          if (!(_DWORD)v5 && (_DWORD)v16)
            goto LABEL_35;
        }
      }
    }
LABEL_37:
    v10 += 28;
  }
  while (v10 != v9);
  if (v11 >= 1)
    v8 = (float)((float)((float)v12 * 100.0) / (float)v11);
LABEL_41:
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021AA378);
  v24 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    buf = 134349568;
    *(double *)buf_4 = v8;
    *(_WORD *)&buf_4[8] = 1026;
    *(_DWORD *)&buf_4[10] = v12;
    *(_WORD *)&buf_4[14] = 1026;
    *(_DWORD *)&buf_4[16] = v11;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "CLBBTFTA,heatmap,GNSS availability percentage,%{public}.1f,trackCountAboveMask,%{public}d,opportunitiesAboveMask,%{public}d", (uint8_t *)&buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021AA378);
    *(_DWORD *)v52 = 134349568;
    *(double *)&v52[4] = v8;
    v53 = 1026;
    *(_DWORD *)v54 = v12;
    *(_WORD *)&v54[4] = 1026;
    *(_DWORD *)&v54[6] = v11;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "CLBBTFTA,heatmap,GNSS availability percentage,%{public}.1f,trackCountAboveMask,%{public}d,opportunitiesAboveMask,%{public}d", v52, 24);
    v39 = (unsigned int *)v38;
    sub_100512490("Generic", 1, 0, 2, "void CLDaemonBBTimeFreqTransferCallbackAssertion::onGnssLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v38);
    if (v39 != &buf)
      free(v39);
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021AA3B8);
  v25 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    v26 = *(_QWORD *)(v47 + 4);
    v27 = *(_QWORD *)(v47 + 12);
    v28 = *(_QWORD *)(v47 + 20);
    v29 = *(_QWORD *)(v47 + 184);
    buf = 134284289;
    *(_QWORD *)buf_4 = v26;
    *(_WORD *)&buf_4[8] = 2049;
    *(_QWORD *)&buf_4[10] = v27;
    *(_WORD *)&buf_4[18] = 2050;
    v60 = v28;
    v61 = 2050;
    v62 = v29;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "CLBBTFTA,latitude,%{private}.3lf,longitude,%{private}.3lf,horAccuracy,%{public}.3lf,timestamp,%{public}.3lf", (uint8_t *)&buf, 0x2Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AA3B8);
    v40 = *(_QWORD *)(v47 + 4);
    v41 = *(_QWORD *)(v47 + 12);
    v42 = *(_QWORD *)(v47 + 20);
    v43 = *(_QWORD *)(v47 + 184);
    *(_DWORD *)v52 = 134284289;
    *(_QWORD *)&v52[4] = v40;
    v53 = 2049;
    *(_QWORD *)v54 = v41;
    *(_WORD *)&v54[8] = 2050;
    v55 = v42;
    v56 = 2050;
    v57 = v43;
    LODWORD(v46) = 42;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "CLBBTFTA,latitude,%{private}.3lf,longitude,%{private}.3lf,horAccuracy,%{public}.3lf,timestamp,%{public}.3lf", v52, v46);
    v45 = (unsigned int *)v44;
    sub_100512490("Generic", 1, 0, 2, "void CLDaemonBBTimeFreqTransferCallbackAssertion::onGnssLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v44);
    if (v45 != &buf)
      free(v45);
  }
  *(double *)(a1 + 176) = sub_1001FCBB4();
  *(int8x16_t *)(a1 + 184) = vextq_s8(*(int8x16_t *)(v47 + 44), *(int8x16_t *)(v47 + 44), 8uLL);
  *(double *)(a1 + 200) = sub_100B942D8(v47);
  v50[0] = CFSTR("kCLGnssHeatMap_timestamp");
  v51[0] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(v47 + 504));
  v51[1] = &off_102220A80;
  v50[1] = CFSTR("kCLGnssHeatMap_elevationBuckets");
  v50[2] = CFSTR("kCLGnssHeatMap_numAzimuthBuckets");
  v50[3] = CFSTR("kCLGnssHeatMap_data");
  v51[2] = &off_10221D0E8;
  v51[3] = v6;
  *(_QWORD *)v52 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v51, v50, 4);
  sub_1012380D0("kCLConnectionMessageGNSSHeatMap", v52, &buf);
  v30 = *(_QWORD *)(a1 + 8);
  v49 = *(std::__shared_weak_count **)&buf_4[4];
  if (*(_QWORD *)&buf_4[4])
  {
    v31 = (unint64_t *)(*(_QWORD *)&buf_4[4] + 8);
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  CLConnection::sendMessage(v30);
  if (v49)
  {
    p_shared_owners = (unint64_t *)&v49->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v35 = *(std::__shared_weak_count **)&buf_4[4];
  if (*(_QWORD *)&buf_4[4])
  {
    v36 = (unint64_t *)(*(_QWORD *)&buf_4[4] + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_101237E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_100261F44((uint64_t)&a14);
  sub_100261F44((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_101237E60()
{
  NSObject *v0;
  _DWORD v1[2];
  __int16 v2;
  const char *v3;

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021AA378);
  v0 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v1[0] = 68289026;
    v1[1] = 0;
    v2 = 2082;
    v3 = "";
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLBBTFTA,Warning,unexpected onLocationControllerNotification\"}", (uint8_t *)v1, 0x12u);
  }
}

void sub_101237F34(id a1)
{
  qword_1022A01C8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_101237F60(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_101237F8C(uint64_t a1, double a2)
{
  int v7;
  char v9;
  __int16 v10;

  if ((*(uint64_t *)&a2 <= -1 || ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
    && (unint64_t)(*(_QWORD *)&a2 - 1) >= 0xFFFFFFFFFFFFFLL
    && (*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
  {
    v10 = 5;
    v9 = 4;
    cnprint::CNPrinter::Print(&v10, &v9);
  }
  v7 = vcvtmd_s64_f64(a2 / 604800.0);
  *(_DWORD *)a1 = v7;
  *(double *)(a1 + 8) = a2 + (double)v7 * -604800.0;
  return a1;
}

void sub_101238044(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

_QWORD *sub_101238070@<X0>(char *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_100487B64(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1012380BC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1012380D0@<X0>(char *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_100487B64(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_10123811C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1012384C4@<X0>(_QWORD *a1@<X8>)
{
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14[2];
  uint64_t v15[2];

  v2 = atomic_load((unsigned __int8 *)&qword_10230D940);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_10230D940))
  {
    v15[0] = qword_1023127B0;
    v15[1] = *(_QWORD *)algn_1023127B8;
    if (*(_QWORD *)algn_1023127B8)
    {
      v10 = (unint64_t *)(*(_QWORD *)algn_1023127B8 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v14[0] = qword_102313160;
    v14[1] = *(_QWORD *)algn_102313168;
    if (*(_QWORD *)algn_102313168)
    {
      v12 = (unint64_t *)(*(_QWORD *)algn_102313168 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    sub_100E852E0((uint64_t)&qword_10230D8F8, v15, v14);
    sub_100261F44((uint64_t)v14);
    sub_100261F44((uint64_t)v15);
    __cxa_atexit((void (*)(void *))sub_101238678, &qword_10230D8F8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10230D940);
  }
  if (qword_10230D948 != -1)
    dispatch_once(&qword_10230D948, &stru_1021AA3D8);
  v3 = unk_10230D900;
  *a1 = qword_10230D8F8;
  a1[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = unk_10230D910;
  a1[2] = qword_10230D908;
  a1[3] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return sub_10123FD2C((uint64_t)(a1 + 4), (uint64_t)&unk_10230D918);
}

void sub_101238634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100261F44((uint64_t)&a9);
  sub_100261F44((uint64_t)&a11);
  __cxa_guard_abort(&qword_10230D940);
  _Unwind_Resume(a1);
}

uint64_t sub_101238678(uint64_t a1)
{
  sub_100E87984(a1 + 32);
  sub_100261F44(a1 + 16);
  return sub_100261F44(a1);
}

void sub_1012386A8(id a1)
{
  unint64_t *v1;
  unint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  unint64_t *v141;
  unint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  unint64_t *v151;
  unint64_t v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  unint64_t *v161;
  unint64_t v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  unint64_t *v171;
  unint64_t v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  unint64_t *v181;
  unint64_t v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  unint64_t *v191;
  unint64_t v192;
  unint64_t *v193;
  unint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  unint64_t *v201;
  unint64_t v202;
  unint64_t *v203;
  unint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  unint64_t *v211;
  unint64_t v212;
  unint64_t *v213;
  unint64_t v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  unint64_t *v221;
  unint64_t v222;
  unint64_t *v223;
  unint64_t v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  unint64_t *v231;
  unint64_t v232;
  unint64_t *v233;
  unint64_t v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  unint64_t *v241;
  unint64_t v242;
  unint64_t *v243;
  unint64_t v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  unint64_t *v251;
  unint64_t v252;
  unint64_t *v253;
  unint64_t v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  unint64_t *v261;
  unint64_t v262;
  unint64_t *v263;
  unint64_t v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  unint64_t *v271;
  unint64_t v272;
  unint64_t *v273;
  unint64_t v274;
  std::__shared_weak_count *v275;
  unint64_t *v276;
  unint64_t v277;
  std::__shared_weak_count *v278;
  unint64_t *v279;
  unint64_t v280;
  unint64_t *v281;
  unint64_t v282;
  unint64_t *v283;
  unint64_t v284;
  std::__shared_weak_count *v285;
  unint64_t *v286;
  unint64_t v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  unint64_t *v291;
  unint64_t v292;
  unint64_t *v293;
  unint64_t v294;
  std::__shared_weak_count *v295;
  unint64_t *v296;
  unint64_t v297;
  std::__shared_weak_count *v298;
  unint64_t *v299;
  unint64_t v300;
  unint64_t *v301;
  unint64_t v302;
  unint64_t *v303;
  unint64_t v304;
  std::__shared_weak_count *v305;
  unint64_t *v306;
  unint64_t v307;
  std::__shared_weak_count *v308;
  unint64_t *v309;
  unint64_t v310;
  unint64_t *v311;
  unint64_t v312;
  unint64_t *v313;
  unint64_t v314;
  std::__shared_weak_count *v315;
  unint64_t *v316;
  unint64_t v317;
  std::__shared_weak_count *v318;
  unint64_t *v319;
  unint64_t v320;
  unint64_t *v321;
  unint64_t v322;
  unint64_t *v323;
  unint64_t v324;
  std::__shared_weak_count *v325;
  unint64_t *v326;
  unint64_t v327;
  std::__shared_weak_count *v328;
  unint64_t *v329;
  unint64_t v330;
  unint64_t *v331;
  unint64_t v332;
  unint64_t *v333;
  unint64_t v334;
  std::__shared_weak_count *v335;
  unint64_t *v336;
  unint64_t v337;
  std::__shared_weak_count *v338;
  unint64_t *v339;
  unint64_t v340;
  unint64_t *v341;
  unint64_t v342;
  unint64_t *v343;
  unint64_t v344;
  std::__shared_weak_count *v345;
  unint64_t *v346;
  unint64_t v347;
  std::__shared_weak_count *v348;
  unint64_t *v349;
  unint64_t v350;
  unint64_t *v351;
  unint64_t v352;
  unint64_t *v353;
  unint64_t v354;
  std::__shared_weak_count *v355;
  unint64_t *v356;
  unint64_t v357;
  std::__shared_weak_count *v358;
  unint64_t *v359;
  unint64_t v360;
  unint64_t *v361;
  unint64_t v362;
  unint64_t *v363;
  unint64_t v364;
  std::__shared_weak_count *v365;
  unint64_t *v366;
  unint64_t v367;
  std::__shared_weak_count *v368;
  unint64_t *v369;
  unint64_t v370;
  unint64_t *v371;
  unint64_t v372;
  unint64_t *v373;
  unint64_t v374;
  std::__shared_weak_count *v375;
  unint64_t *v376;
  unint64_t v377;
  std::__shared_weak_count *v378;
  unint64_t *v379;
  unint64_t v380;
  unint64_t *v381;
  unint64_t v382;
  unint64_t *v383;
  unint64_t v384;
  std::__shared_weak_count *v385;
  unint64_t *v386;
  unint64_t v387;
  std::__shared_weak_count *v388;
  unint64_t *v389;
  unint64_t v390;
  unint64_t *v391;
  unint64_t v392;
  unint64_t *v393;
  unint64_t v394;
  std::__shared_weak_count *v395;
  unint64_t *v396;
  unint64_t v397;
  std::__shared_weak_count *v398;
  unint64_t *v399;
  unint64_t v400;
  unint64_t *v401;
  unint64_t v402;
  unint64_t *v403;
  unint64_t v404;
  std::__shared_weak_count *v405;
  unint64_t *v406;
  unint64_t v407;
  std::__shared_weak_count *v408;
  unint64_t *v409;
  unint64_t v410;
  unint64_t *v411;
  unint64_t v412;
  unint64_t *v413;
  unint64_t v414;
  std::__shared_weak_count *v415;
  unint64_t *v416;
  unint64_t v417;
  std::__shared_weak_count *v418;
  unint64_t *v419;
  unint64_t v420;
  unint64_t *v421;
  unint64_t v422;
  unint64_t *v423;
  unint64_t v424;
  std::__shared_weak_count *v425;
  unint64_t *v426;
  unint64_t v427;
  std::__shared_weak_count *v428;
  unint64_t *v429;
  unint64_t v430;
  unint64_t *v431;
  unint64_t v432;
  unint64_t *v433;
  unint64_t v434;
  std::__shared_weak_count *v435;
  unint64_t *v436;
  unint64_t v437;
  std::__shared_weak_count *v438;
  unint64_t *v439;
  unint64_t v440;
  unint64_t *v441;
  unint64_t v442;
  unint64_t *v443;
  unint64_t v444;
  std::__shared_weak_count *v445;
  unint64_t *v446;
  unint64_t v447;
  std::__shared_weak_count *v448;
  unint64_t *v449;
  unint64_t v450;
  unint64_t *v451;
  unint64_t v452;
  unint64_t *v453;
  unint64_t v454;
  std::__shared_weak_count *v455;
  unint64_t *v456;
  unint64_t v457;
  std::__shared_weak_count *v458;
  unint64_t *v459;
  unint64_t v460;
  unint64_t *v461;
  unint64_t v462;
  unint64_t *v463;
  unint64_t v464;
  std::__shared_weak_count *v465;
  unint64_t *v466;
  unint64_t v467;
  std::__shared_weak_count *v468;
  unint64_t *v469;
  unint64_t v470;
  unint64_t *v471;
  unint64_t v472;
  unint64_t *v473;
  unint64_t v474;
  std::__shared_weak_count *v475;
  unint64_t *v476;
  unint64_t v477;
  std::__shared_weak_count *v478;
  unint64_t *v479;
  unint64_t v480;
  unint64_t *v481;
  unint64_t v482;
  unint64_t *v483;
  unint64_t v484;
  std::__shared_weak_count *v485;
  unint64_t *v486;
  unint64_t v487;
  std::__shared_weak_count *v488;
  unint64_t *v489;
  unint64_t v490;
  unint64_t *v491;
  unint64_t v492;
  unint64_t *v493;
  unint64_t v494;
  std::__shared_weak_count *v495;
  unint64_t *v496;
  unint64_t v497;
  std::__shared_weak_count *v498;
  unint64_t *v499;
  unint64_t v500;
  unint64_t *v501;
  unint64_t v502;
  unint64_t *v503;
  unint64_t v504;
  std::__shared_weak_count *v505;
  unint64_t *v506;
  unint64_t v507;
  std::__shared_weak_count *v508;
  unint64_t *v509;
  unint64_t v510;
  unint64_t *v511;
  unint64_t v512;
  unint64_t *v513;
  unint64_t v514;
  std::__shared_weak_count *v515;
  unint64_t *v516;
  unint64_t v517;
  std::__shared_weak_count *v518;
  unint64_t *v519;
  unint64_t v520;
  unint64_t *v521;
  unint64_t v522;
  unint64_t *v523;
  unint64_t v524;
  std::__shared_weak_count *v525;
  unint64_t *v526;
  unint64_t v527;
  std::__shared_weak_count *v528;
  unint64_t *v529;
  unint64_t v530;
  unint64_t *v531;
  unint64_t v532;
  unint64_t *v533;
  unint64_t v534;
  std::__shared_weak_count *v535;
  unint64_t *v536;
  unint64_t v537;
  std::__shared_weak_count *v538;
  unint64_t *v539;
  unint64_t v540;
  unint64_t *v541;
  unint64_t v542;
  unint64_t *v543;
  unint64_t v544;
  std::__shared_weak_count *v545;
  unint64_t *v546;
  unint64_t v547;
  std::__shared_weak_count *v548;
  unint64_t *v549;
  unint64_t v550;
  unint64_t *v551;
  unint64_t v552;
  unint64_t *v553;
  unint64_t v554;
  std::__shared_weak_count *v555;
  unint64_t *v556;
  unint64_t v557;
  std::__shared_weak_count *v558;
  unint64_t *v559;
  unint64_t v560;
  unint64_t *v561;
  unint64_t v562;
  unint64_t *v563;
  unint64_t v564;
  std::__shared_weak_count *v565;
  unint64_t *v566;
  unint64_t v567;
  std::__shared_weak_count *v568;
  unint64_t *v569;
  unint64_t v570;
  unint64_t *v571;
  unint64_t v572;
  unint64_t *v573;
  unint64_t v574;
  std::__shared_weak_count *v575;
  unint64_t *v576;
  unint64_t v577;
  std::__shared_weak_count *v578;
  unint64_t *v579;
  unint64_t v580;
  unint64_t *v581;
  unint64_t v582;
  unint64_t *v583;
  unint64_t v584;
  std::__shared_weak_count *v585;
  unint64_t *v586;
  unint64_t v587;
  std::__shared_weak_count *v588;
  unint64_t *v589;
  unint64_t v590;
  unint64_t *v591;
  unint64_t v592;
  unint64_t *v593;
  unint64_t v594;
  std::__shared_weak_count *v595;
  unint64_t *v596;
  unint64_t v597;
  std::__shared_weak_count *v598;
  unint64_t *v599;
  unint64_t v600;
  unint64_t *v601;
  unint64_t v602;
  unint64_t *v603;
  unint64_t v604;
  std::__shared_weak_count *v605;
  unint64_t *v606;
  unint64_t v607;
  std::__shared_weak_count *v608;
  unint64_t *v609;
  unint64_t v610;
  unint64_t *v611;
  unint64_t v612;
  unint64_t *v613;
  unint64_t v614;
  std::__shared_weak_count *v615;
  unint64_t *v616;
  unint64_t v617;
  std::__shared_weak_count *v618;
  unint64_t *v619;
  unint64_t v620;
  unint64_t *v621;
  unint64_t v622;
  unint64_t *v623;
  unint64_t v624;
  std::__shared_weak_count *v625;
  unint64_t *v626;
  unint64_t v627;
  std::__shared_weak_count *v628;
  unint64_t *v629;
  unint64_t v630;
  unint64_t *v631;
  unint64_t v632;
  unint64_t *v633;
  unint64_t v634;
  std::__shared_weak_count *v635;
  unint64_t *v636;
  unint64_t v637;
  std::__shared_weak_count *v638;
  unint64_t *v639;
  unint64_t v640;
  unint64_t *v641;
  unint64_t v642;
  unint64_t *v643;
  unint64_t v644;
  std::__shared_weak_count *v645;
  unint64_t *v646;
  unint64_t v647;
  std::__shared_weak_count *v648;
  unint64_t *v649;
  unint64_t v650;
  unint64_t *v651;
  unint64_t v652;
  unint64_t *v653;
  unint64_t v654;
  std::__shared_weak_count *v655;
  unint64_t *v656;
  unint64_t v657;
  std::__shared_weak_count *v658;
  unint64_t *v659;
  unint64_t v660;
  unint64_t *v661;
  unint64_t v662;
  unint64_t *v663;
  unint64_t v664;
  std::__shared_weak_count *v665;
  unint64_t *v666;
  unint64_t v667;
  std::__shared_weak_count *v668;
  unint64_t *v669;
  unint64_t v670;
  unint64_t *v671;
  unint64_t v672;
  unint64_t *v673;
  unint64_t v674;
  std::__shared_weak_count *v675;
  unint64_t *v676;
  unint64_t v677;
  std::__shared_weak_count *v678;
  unint64_t *v679;
  unint64_t v680;
  unint64_t *v681;
  unint64_t v682;
  unint64_t *v683;
  unint64_t v684;
  std::__shared_weak_count *v685;
  unint64_t *v686;
  unint64_t v687;
  std::__shared_weak_count *v688;
  unint64_t *v689;
  unint64_t v690;
  unint64_t *v691;
  unint64_t v692;
  unint64_t *v693;
  unint64_t v694;
  std::__shared_weak_count *v695;
  unint64_t *v696;
  unint64_t v697;
  std::__shared_weak_count *v698;
  unint64_t *v699;
  unint64_t v700;
  unint64_t *v701;
  unint64_t v702;
  unint64_t *v703;
  unint64_t v704;
  std::__shared_weak_count *v705;
  unint64_t *v706;
  unint64_t v707;
  std::__shared_weak_count *v708;
  unint64_t *v709;
  unint64_t v710;
  unint64_t *v711;
  unint64_t v712;
  unint64_t *v713;
  unint64_t v714;
  std::__shared_weak_count *v715;
  unint64_t *v716;
  unint64_t v717;
  std::__shared_weak_count *v718;
  unint64_t *v719;
  unint64_t v720;
  unint64_t *v721;
  unint64_t v722;
  unint64_t *v723;
  unint64_t v724;
  std::__shared_weak_count *v725;
  unint64_t *v726;
  unint64_t v727;
  std::__shared_weak_count *v728;
  unint64_t *v729;
  unint64_t v730;
  unint64_t *v731;
  unint64_t v732;
  unint64_t *v733;
  unint64_t v734;
  std::__shared_weak_count *v735;
  unint64_t *v736;
  unint64_t v737;
  std::__shared_weak_count *v738;
  unint64_t *v739;
  unint64_t v740;
  unint64_t *v741;
  unint64_t v742;
  unint64_t *v743;
  unint64_t v744;
  std::__shared_weak_count *v745;
  unint64_t *v746;
  unint64_t v747;
  std::__shared_weak_count *v748;
  unint64_t *v749;
  unint64_t v750;
  unint64_t *v751;
  unint64_t v752;
  unint64_t *v753;
  unint64_t v754;
  std::__shared_weak_count *v755;
  unint64_t *v756;
  unint64_t v757;
  std::__shared_weak_count *v758;
  unint64_t *v759;
  unint64_t v760;
  unint64_t *v761;
  unint64_t v762;
  unint64_t *v763;
  unint64_t v764;
  std::__shared_weak_count *v765;
  unint64_t *v766;
  unint64_t v767;
  std::__shared_weak_count *v768;
  unint64_t *v769;
  unint64_t v770;
  unint64_t *v771;
  unint64_t v772;
  unint64_t *v773;
  unint64_t v774;
  std::__shared_weak_count *v775;
  unint64_t *v776;
  unint64_t v777;
  std::__shared_weak_count *v778;
  unint64_t *v779;
  unint64_t v780;
  unint64_t *v781;
  unint64_t v782;
  unint64_t *v783;
  unint64_t v784;
  std::__shared_weak_count *v785;
  unint64_t *v786;
  unint64_t v787;
  std::__shared_weak_count *v788;
  unint64_t *v789;
  unint64_t v790;
  unint64_t *v791;
  unint64_t v792;
  unint64_t *v793;
  unint64_t v794;
  std::__shared_weak_count *v795;
  unint64_t *v796;
  unint64_t v797;
  std::__shared_weak_count *v798;
  unint64_t *v799;
  unint64_t v800;
  unint64_t *v801;
  unint64_t v802;
  unint64_t *v803;
  unint64_t v804;
  std::__shared_weak_count *v805;
  unint64_t *v806;
  unint64_t v807;
  std::__shared_weak_count *v808;
  unint64_t *v809;
  unint64_t v810;
  unint64_t *v811;
  unint64_t v812;
  unint64_t *v813;
  unint64_t v814;
  std::__shared_weak_count *v815;
  unint64_t *v816;
  unint64_t v817;
  std::__shared_weak_count *v818;
  unint64_t *v819;
  unint64_t v820;
  unint64_t *v821;
  unint64_t v822;
  unint64_t *v823;
  unint64_t v824;
  std::__shared_weak_count *v825;
  unint64_t *v826;
  unint64_t v827;
  std::__shared_weak_count *v828;
  unint64_t *v829;
  unint64_t v830;
  unint64_t *v831;
  unint64_t v832;
  unint64_t *v833;
  unint64_t v834;
  std::__shared_weak_count *v835;
  unint64_t *v836;
  unint64_t v837;
  std::__shared_weak_count *v838;
  unint64_t *v839;
  unint64_t v840;
  unint64_t *v841;
  unint64_t v842;
  unint64_t *v843;
  unint64_t v844;
  std::__shared_weak_count *v845;
  unint64_t *v846;
  unint64_t v847;
  std::__shared_weak_count *v848;
  unint64_t *v849;
  unint64_t v850;
  unint64_t *v851;
  unint64_t v852;
  unint64_t *v853;
  unint64_t v854;
  std::__shared_weak_count *v855;
  unint64_t *v856;
  unint64_t v857;
  std::__shared_weak_count *v858;
  unint64_t *v859;
  unint64_t v860;
  unint64_t *v861;
  unint64_t v862;
  unint64_t *v863;
  unint64_t v864;
  std::__shared_weak_count *v865;
  unint64_t *v866;
  unint64_t v867;
  std::__shared_weak_count *v868;
  unint64_t *v869;
  unint64_t v870;
  unint64_t *v871;
  unint64_t v872;
  unint64_t *v873;
  unint64_t v874;
  std::__shared_weak_count *v875;
  unint64_t *v876;
  unint64_t v877;
  std::__shared_weak_count *v878;
  unint64_t *v879;
  unint64_t v880;
  unint64_t *v881;
  unint64_t v882;
  unint64_t *v883;
  unint64_t v884;
  std::__shared_weak_count *v885;
  unint64_t *v886;
  unint64_t v887;
  std::__shared_weak_count *v888;
  unint64_t *v889;
  unint64_t v890;
  unint64_t *v891;
  unint64_t v892;
  unint64_t *v893;
  unint64_t v894;
  std::__shared_weak_count *v895;
  unint64_t *v896;
  unint64_t v897;
  std::__shared_weak_count *v898;
  unint64_t *v899;
  unint64_t v900;
  unint64_t *v901;
  unint64_t v902;
  unint64_t *v903;
  unint64_t v904;
  std::__shared_weak_count *v905;
  unint64_t *v906;
  unint64_t v907;
  std::__shared_weak_count *v908;
  unint64_t *v909;
  unint64_t v910;
  unint64_t *v911;
  unint64_t v912;
  unint64_t *v913;
  unint64_t v914;
  std::__shared_weak_count *v915;
  unint64_t *v916;
  unint64_t v917;
  std::__shared_weak_count *v918;
  unint64_t *v919;
  unint64_t v920;
  unint64_t *v921;
  unint64_t v922;
  unint64_t *v923;
  unint64_t v924;
  std::__shared_weak_count *v925;
  unint64_t *v926;
  unint64_t v927;
  std::__shared_weak_count *v928;
  unint64_t *v929;
  unint64_t v930;
  unint64_t *v931;
  unint64_t v932;
  unint64_t *v933;
  unint64_t v934;
  std::__shared_weak_count *v935;
  unint64_t *v936;
  unint64_t v937;
  std::__shared_weak_count *v938;
  unint64_t *v939;
  unint64_t v940;
  unint64_t *v941;
  unint64_t v942;
  unint64_t *v943;
  unint64_t v944;
  std::__shared_weak_count *v945;
  unint64_t *v946;
  unint64_t v947;
  std::__shared_weak_count *v948;
  unint64_t *v949;
  unint64_t v950;
  unint64_t *v951;
  unint64_t v952;
  unint64_t *v953;
  unint64_t v954;
  std::__shared_weak_count *v955;
  unint64_t *v956;
  unint64_t v957;
  std::__shared_weak_count *v958;
  unint64_t *v959;
  unint64_t v960;
  unint64_t *v961;
  unint64_t v962;
  unint64_t *v963;
  unint64_t v964;
  std::__shared_weak_count *v965;
  unint64_t *v966;
  unint64_t v967;
  std::__shared_weak_count *v968;
  unint64_t *v969;
  unint64_t v970;
  unint64_t *v971;
  unint64_t v972;
  unint64_t *v973;
  unint64_t v974;
  std::__shared_weak_count *v975;
  unint64_t *v976;
  unint64_t v977;
  std::__shared_weak_count *v978;
  unint64_t *v979;
  unint64_t v980;
  unint64_t *v981;
  unint64_t v982;
  unint64_t *v983;
  unint64_t v984;
  std::__shared_weak_count *v985;
  unint64_t *v986;
  unint64_t v987;
  std::__shared_weak_count *v988;
  unint64_t *v989;
  unint64_t v990;
  unint64_t *v991;
  unint64_t v992;
  unint64_t *v993;
  unint64_t v994;
  std::__shared_weak_count *v995;
  unint64_t *v996;
  unint64_t v997;
  std::__shared_weak_count *v998;
  unint64_t *v999;
  unint64_t v1000;
  unint64_t *v1001;
  unint64_t v1002;
  unint64_t *v1003;
  unint64_t v1004;
  std::__shared_weak_count *v1005;
  unint64_t *v1006;
  unint64_t v1007;
  std::__shared_weak_count *v1008;
  unint64_t *v1009;
  unint64_t v1010;
  unint64_t *v1011;
  unint64_t v1012;
  unint64_t *v1013;
  unint64_t v1014;
  std::__shared_weak_count *v1015;
  unint64_t *v1016;
  unint64_t v1017;
  std::__shared_weak_count *v1018;
  unint64_t *v1019;
  unint64_t v1020;
  unint64_t *v1021;
  unint64_t v1022;
  unint64_t *v1023;
  unint64_t v1024;
  std::__shared_weak_count *v1025;
  unint64_t *v1026;
  unint64_t v1027;
  std::__shared_weak_count *v1028;
  unint64_t *v1029;
  unint64_t v1030;
  unint64_t *v1031;
  unint64_t v1032;
  unint64_t *v1033;
  unint64_t v1034;
  std::__shared_weak_count *v1035;
  unint64_t *v1036;
  unint64_t v1037;
  std::__shared_weak_count *v1038;
  unint64_t *v1039;
  unint64_t v1040;
  unint64_t *v1041;
  unint64_t v1042;
  unint64_t *v1043;
  unint64_t v1044;
  std::__shared_weak_count *v1045;
  unint64_t *v1046;
  unint64_t v1047;
  std::__shared_weak_count *v1048;
  unint64_t *v1049;
  unint64_t v1050;
  unint64_t *v1051;
  unint64_t v1052;
  unint64_t *v1053;
  unint64_t v1054;
  std::__shared_weak_count *v1055;
  unint64_t *v1056;
  unint64_t v1057;
  std::__shared_weak_count *v1058;
  unint64_t *v1059;
  unint64_t v1060;
  unint64_t *v1061;
  unint64_t v1062;
  unint64_t *v1063;
  unint64_t v1064;
  std::__shared_weak_count *v1065;
  unint64_t *v1066;
  unint64_t v1067;
  std::__shared_weak_count *v1068;
  unint64_t *v1069;
  unint64_t v1070;
  unint64_t *v1071;
  unint64_t v1072;
  unint64_t *v1073;
  unint64_t v1074;
  std::__shared_weak_count *v1075;
  unint64_t *v1076;
  unint64_t v1077;
  std::__shared_weak_count *v1078;
  unint64_t *v1079;
  unint64_t v1080;
  unint64_t *v1081;
  unint64_t v1082;
  unint64_t *v1083;
  unint64_t v1084;
  std::__shared_weak_count *v1085;
  unint64_t *v1086;
  unint64_t v1087;
  std::__shared_weak_count *v1088;
  unint64_t *v1089;
  unint64_t v1090;
  unint64_t *v1091;
  unint64_t v1092;
  unint64_t *v1093;
  unint64_t v1094;
  std::__shared_weak_count *v1095;
  unint64_t *v1096;
  unint64_t v1097;
  std::__shared_weak_count *v1098;
  unint64_t *v1099;
  unint64_t v1100;
  unint64_t *v1101;
  unint64_t v1102;
  unint64_t *v1103;
  unint64_t v1104;
  std::__shared_weak_count *v1105;
  unint64_t *v1106;
  unint64_t v1107;
  std::__shared_weak_count *v1108;
  unint64_t *v1109;
  unint64_t v1110;
  unint64_t *v1111;
  unint64_t v1112;
  unint64_t *v1113;
  unint64_t v1114;
  std::__shared_weak_count *v1115;
  unint64_t *v1116;
  unint64_t v1117;
  std::__shared_weak_count *v1118;
  unint64_t *v1119;
  unint64_t v1120;
  unint64_t *v1121;
  unint64_t v1122;
  unint64_t *v1123;
  unint64_t v1124;
  std::__shared_weak_count *v1125;
  unint64_t *v1126;
  unint64_t v1127;
  std::__shared_weak_count *v1128;
  unint64_t *v1129;
  unint64_t v1130;
  unint64_t *v1131;
  unint64_t v1132;
  unint64_t *v1133;
  unint64_t v1134;
  std::__shared_weak_count *v1135;
  unint64_t *v1136;
  unint64_t v1137;
  std::__shared_weak_count *v1138;
  unint64_t *v1139;
  unint64_t v1140;
  unint64_t *v1141;
  unint64_t v1142;
  unint64_t *v1143;
  unint64_t v1144;
  std::__shared_weak_count *v1145;
  unint64_t *v1146;
  unint64_t v1147;
  std::__shared_weak_count *v1148;
  unint64_t *v1149;
  unint64_t v1150;
  unint64_t *v1151;
  unint64_t v1152;
  unint64_t *v1153;
  unint64_t v1154;
  std::__shared_weak_count *v1155;
  unint64_t *v1156;
  unint64_t v1157;
  std::__shared_weak_count *v1158;
  unint64_t *v1159;
  unint64_t v1160;
  unint64_t *v1161;
  unint64_t v1162;
  unint64_t *v1163;
  unint64_t v1164;
  std::__shared_weak_count *v1165;
  unint64_t *v1166;
  unint64_t v1167;
  std::__shared_weak_count *v1168;
  unint64_t *v1169;
  unint64_t v1170;
  unint64_t *v1171;
  unint64_t v1172;
  unint64_t *v1173;
  unint64_t v1174;
  std::__shared_weak_count *v1175;
  unint64_t *v1176;
  unint64_t v1177;
  std::__shared_weak_count *v1178;
  unint64_t *v1179;
  unint64_t v1180;
  unint64_t *v1181;
  unint64_t v1182;
  unint64_t *v1183;
  unint64_t v1184;
  std::__shared_weak_count *v1185;
  unint64_t *v1186;
  unint64_t v1187;
  std::__shared_weak_count *v1188;
  unint64_t *v1189;
  unint64_t v1190;
  unint64_t *v1191;
  unint64_t v1192;
  unint64_t *v1193;
  unint64_t v1194;
  std::__shared_weak_count *v1195;
  unint64_t *v1196;
  unint64_t v1197;
  std::__shared_weak_count *v1198;
  unint64_t *v1199;
  unint64_t v1200;
  unint64_t *v1201;
  unint64_t v1202;
  unint64_t *v1203;
  unint64_t v1204;
  std::__shared_weak_count *v1205;
  unint64_t *v1206;
  unint64_t v1207;
  std::__shared_weak_count *v1208;
  unint64_t *v1209;
  unint64_t v1210;
  unint64_t *v1211;
  unint64_t v1212;
  unint64_t *v1213;
  unint64_t v1214;
  std::__shared_weak_count *v1215;
  unint64_t *v1216;
  unint64_t v1217;
  std::__shared_weak_count *v1218;
  unint64_t *v1219;
  unint64_t v1220;
  unint64_t *v1221;
  unint64_t v1222;
  unint64_t *v1223;
  unint64_t v1224;
  std::__shared_weak_count *v1225;
  unint64_t *v1226;
  unint64_t v1227;
  std::__shared_weak_count *v1228;
  unint64_t *v1229;
  unint64_t v1230;
  unint64_t *v1231;
  unint64_t v1232;
  unint64_t *v1233;
  unint64_t v1234;
  std::__shared_weak_count *v1235;
  unint64_t *v1236;
  unint64_t v1237;
  std::__shared_weak_count *v1238;
  unint64_t *v1239;
  unint64_t v1240;
  unint64_t *v1241;
  unint64_t v1242;
  unint64_t *v1243;
  unint64_t v1244;
  std::__shared_weak_count *v1245;
  unint64_t *v1246;
  unint64_t v1247;
  std::__shared_weak_count *v1248;
  unint64_t *v1249;
  unint64_t v1250;
  unint64_t *v1251;
  unint64_t v1252;
  unint64_t *v1253;
  unint64_t v1254;
  std::__shared_weak_count *v1255;
  unint64_t *v1256;
  unint64_t v1257;
  std::__shared_weak_count *v1258;
  unint64_t *v1259;
  unint64_t v1260;
  unint64_t *v1261;
  unint64_t v1262;
  unint64_t *v1263;
  unint64_t v1264;
  std::__shared_weak_count *v1265;
  unint64_t *v1266;
  unint64_t v1267;
  std::__shared_weak_count *v1268;
  unint64_t *v1269;
  unint64_t v1270;
  unint64_t *v1271;
  unint64_t v1272;
  unint64_t *v1273;
  unint64_t v1274;
  std::__shared_weak_count *v1275;
  unint64_t *v1276;
  unint64_t v1277;
  std::__shared_weak_count *v1278;
  unint64_t *v1279;
  unint64_t v1280;
  unint64_t *v1281;
  unint64_t v1282;
  unint64_t *v1283;
  unint64_t v1284;
  std::__shared_weak_count *v1285;
  unint64_t *v1286;
  unint64_t v1287;
  std::__shared_weak_count *v1288;
  unint64_t *v1289;
  unint64_t v1290;
  uint64_t v1291;
  std::__shared_weak_count *v1292;
  uint64_t v1293;
  std::__shared_weak_count *v1294;
  uint64_t v1295;
  std::__shared_weak_count *v1296;
  uint64_t v1297;
  std::__shared_weak_count *v1298;
  uint64_t v1299;
  std::__shared_weak_count *v1300;
  uint64_t v1301;
  std::__shared_weak_count *v1302;
  uint64_t v1303;
  std::__shared_weak_count *v1304;
  uint64_t v1305;
  std::__shared_weak_count *v1306;
  uint64_t v1307;
  std::__shared_weak_count *v1308;
  uint64_t v1309;
  std::__shared_weak_count *v1310;
  uint64_t v1311;
  std::__shared_weak_count *v1312;
  uint64_t v1313;
  std::__shared_weak_count *v1314;
  uint64_t v1315;
  std::__shared_weak_count *v1316;
  uint64_t v1317;
  std::__shared_weak_count *v1318;
  uint64_t v1319;
  std::__shared_weak_count *v1320;
  uint64_t v1321;
  std::__shared_weak_count *v1322;
  uint64_t v1323;
  std::__shared_weak_count *v1324;
  uint64_t v1325;
  std::__shared_weak_count *v1326;
  uint64_t v1327;
  std::__shared_weak_count *v1328;
  uint64_t v1329;
  std::__shared_weak_count *v1330;
  uint64_t v1331;
  std::__shared_weak_count *v1332;
  uint64_t v1333;
  std::__shared_weak_count *v1334;
  uint64_t v1335;
  std::__shared_weak_count *v1336;
  uint64_t v1337;
  std::__shared_weak_count *v1338;
  uint64_t v1339;
  std::__shared_weak_count *v1340;
  uint64_t v1341;
  std::__shared_weak_count *v1342;
  uint64_t v1343;
  std::__shared_weak_count *v1344;
  uint64_t v1345;
  std::__shared_weak_count *v1346;
  uint64_t v1347;
  std::__shared_weak_count *v1348;
  uint64_t v1349;
  std::__shared_weak_count *v1350;
  uint64_t v1351;
  std::__shared_weak_count *v1352;
  uint64_t v1353;
  std::__shared_weak_count *v1354;
  uint64_t v1355;
  std::__shared_weak_count *v1356;
  uint64_t v1357;
  std::__shared_weak_count *v1358;
  uint64_t v1359;
  std::__shared_weak_count *v1360;
  uint64_t v1361;
  std::__shared_weak_count *v1362;
  uint64_t v1363;
  std::__shared_weak_count *v1364;
  uint64_t v1365;
  std::__shared_weak_count *v1366;
  uint64_t v1367;
  std::__shared_weak_count *v1368;
  uint64_t v1369;
  std::__shared_weak_count *v1370;
  uint64_t v1371;
  std::__shared_weak_count *v1372;
  uint64_t v1373;
  std::__shared_weak_count *v1374;
  uint64_t v1375;
  std::__shared_weak_count *v1376;
  uint64_t v1377;
  std::__shared_weak_count *v1378;
  uint64_t v1379;
  std::__shared_weak_count *v1380;
  uint64_t v1381;
  std::__shared_weak_count *v1382;
  uint64_t v1383;
  std::__shared_weak_count *v1384;
  uint64_t v1385;
  std::__shared_weak_count *v1386;
  uint64_t v1387;
  std::__shared_weak_count *v1388;
  uint64_t v1389;
  std::__shared_weak_count *v1390;
  uint64_t v1391;
  std::__shared_weak_count *v1392;
  uint64_t v1393;
  std::__shared_weak_count *v1394;
  uint64_t v1395;
  std::__shared_weak_count *v1396;
  uint64_t v1397;
  std::__shared_weak_count *v1398;
  uint64_t v1399;
  std::__shared_weak_count *v1400;
  uint64_t v1401;
  std::__shared_weak_count *v1402;
  uint64_t v1403;
  std::__shared_weak_count *v1404;
  uint64_t v1405;
  std::__shared_weak_count *v1406;
  uint64_t v1407;
  std::__shared_weak_count *v1408;
  uint64_t v1409;
  std::__shared_weak_count *v1410;
  uint64_t v1411;
  std::__shared_weak_count *v1412;
  uint64_t v1413;
  std::__shared_weak_count *v1414;
  uint64_t v1415;
  std::__shared_weak_count *v1416;
  uint64_t v1417;
  std::__shared_weak_count *v1418;
  uint64_t v1419;
  std::__shared_weak_count *v1420;
  uint64_t v1421;
  std::__shared_weak_count *v1422;
  uint64_t v1423;
  std::__shared_weak_count *v1424;
  uint64_t v1425;
  std::__shared_weak_count *v1426;
  uint64_t v1427;
  std::__shared_weak_count *v1428;
  uint64_t v1429;
  std::__shared_weak_count *v1430;
  uint64_t v1431;
  std::__shared_weak_count *v1432;
  uint64_t v1433;
  std::__shared_weak_count *v1434;
  uint64_t v1435;
  std::__shared_weak_count *v1436;
  uint64_t v1437;
  std::__shared_weak_count *v1438;
  uint64_t v1439;
  std::__shared_weak_count *v1440;
  uint64_t v1441;
  std::__shared_weak_count *v1442;
  uint64_t v1443;
  std::__shared_weak_count *v1444;
  uint64_t v1445;
  std::__shared_weak_count *v1446;
  uint64_t v1447;
  std::__shared_weak_count *v1448;
  uint64_t v1449;
  std::__shared_weak_count *v1450;
  uint64_t v1451;
  std::__shared_weak_count *v1452;
  uint64_t v1453;
  std::__shared_weak_count *v1454;
  uint64_t v1455;
  std::__shared_weak_count *v1456;
  uint64_t v1457;
  std::__shared_weak_count *v1458;
  uint64_t v1459;
  std::__shared_weak_count *v1460;
  uint64_t v1461;
  std::__shared_weak_count *v1462;
  uint64_t v1463;
  std::__shared_weak_count *v1464;
  uint64_t v1465;
  std::__shared_weak_count *v1466;
  uint64_t v1467;
  std::__shared_weak_count *v1468;
  uint64_t v1469;
  std::__shared_weak_count *v1470;
  uint64_t v1471;
  std::__shared_weak_count *v1472;
  uint64_t v1473;
  std::__shared_weak_count *v1474;
  uint64_t v1475;
  std::__shared_weak_count *v1476;
  uint64_t v1477;
  std::__shared_weak_count *v1478;
  uint64_t v1479;
  std::__shared_weak_count *v1480;
  uint64_t v1481;
  std::__shared_weak_count *v1482;
  uint64_t v1483;
  std::__shared_weak_count *v1484;
  uint64_t v1485;
  std::__shared_weak_count *v1486;
  uint64_t v1487;
  std::__shared_weak_count *v1488;
  uint64_t v1489;
  std::__shared_weak_count *v1490;
  uint64_t v1491;
  std::__shared_weak_count *v1492;
  uint64_t v1493;
  std::__shared_weak_count *v1494;
  uint64_t v1495;
  std::__shared_weak_count *v1496;
  uint64_t v1497;
  std::__shared_weak_count *v1498;
  uint64_t v1499;
  std::__shared_weak_count *v1500;
  uint64_t v1501;
  std::__shared_weak_count *v1502;
  uint64_t v1503;
  std::__shared_weak_count *v1504;
  uint64_t v1505;
  std::__shared_weak_count *v1506;
  uint64_t v1507;
  std::__shared_weak_count *v1508;
  uint64_t v1509;
  std::__shared_weak_count *v1510;
  uint64_t v1511;
  std::__shared_weak_count *v1512;
  uint64_t v1513;
  std::__shared_weak_count *v1514;
  uint64_t v1515;
  std::__shared_weak_count *v1516;
  uint64_t v1517;
  std::__shared_weak_count *v1518;
  uint64_t v1519;
  std::__shared_weak_count *v1520;
  uint64_t v1521;
  std::__shared_weak_count *v1522;
  uint64_t v1523;
  std::__shared_weak_count *v1524;
  uint64_t v1525;
  std::__shared_weak_count *v1526;
  uint64_t v1527;
  std::__shared_weak_count *v1528;
  uint64_t v1529;
  std::__shared_weak_count *v1530;
  uint64_t v1531;
  std::__shared_weak_count *v1532;
  uint64_t v1533;
  std::__shared_weak_count *v1534;
  uint64_t v1535;
  std::__shared_weak_count *v1536;
  uint64_t v1537;
  std::__shared_weak_count *v1538;
  uint64_t v1539;
  std::__shared_weak_count *v1540;
  uint64_t v1541;
  std::__shared_weak_count *v1542;
  uint64_t v1543;
  std::__shared_weak_count *v1544;
  uint64_t v1545;
  std::__shared_weak_count *v1546;
  uint64_t v1547;
  std::__shared_weak_count *v1548;
  uint64_t v1549;
  std::__shared_weak_count *v1550;
  uint64_t v1551;
  std::__shared_weak_count *v1552;
  uint64_t v1553;
  std::__shared_weak_count *v1554;
  uint64_t v1555;
  std::__shared_weak_count *v1556;
  uint64_t v1557;
  std::__shared_weak_count *v1558;
  uint64_t v1559;
  std::__shared_weak_count *v1560;
  uint64_t v1561;
  std::__shared_weak_count *v1562;
  uint64_t v1563;
  std::__shared_weak_count *v1564;
  uint64_t v1565;
  std::__shared_weak_count *v1566;
  uint64_t v1567;
  std::__shared_weak_count *v1568;
  uint64_t v1569;
  std::__shared_weak_count *v1570;
  uint64_t v1571;
  std::__shared_weak_count *v1572;
  uint64_t v1573;
  std::__shared_weak_count *v1574;
  uint64_t v1575;
  std::__shared_weak_count *v1576;
  uint64_t v1577;
  std::__shared_weak_count *v1578;
  uint64_t v1579;
  std::__shared_weak_count *v1580;
  uint64_t v1581;
  std::__shared_weak_count *v1582;
  uint64_t v1583;
  std::__shared_weak_count *v1584;
  uint64_t v1585;
  std::__shared_weak_count *v1586;
  uint64_t v1587;
  std::__shared_weak_count *v1588;
  uint64_t v1589;
  std::__shared_weak_count *v1590;
  uint64_t v1591;
  std::__shared_weak_count *v1592;
  uint64_t v1593;
  std::__shared_weak_count *v1594;
  uint64_t v1595;
  std::__shared_weak_count *v1596;
  uint64_t v1597;
  std::__shared_weak_count *v1598;
  uint64_t v1599;
  std::__shared_weak_count *v1600;
  uint64_t v1601;
  std::__shared_weak_count *v1602;
  uint64_t v1603;
  std::__shared_weak_count *v1604;
  uint64_t v1605;
  std::__shared_weak_count *v1606;
  uint64_t v1607;
  std::__shared_weak_count *v1608;
  uint64_t v1609;
  std::__shared_weak_count *v1610;
  uint64_t v1611;
  std::__shared_weak_count *v1612;
  uint64_t v1613;
  std::__shared_weak_count *v1614;
  uint64_t v1615;
  std::__shared_weak_count *v1616;
  uint64_t v1617;
  std::__shared_weak_count *v1618;
  uint64_t v1619;
  std::__shared_weak_count *v1620;
  uint64_t v1621;
  std::__shared_weak_count *v1622;
  uint64_t v1623;
  std::__shared_weak_count *v1624;
  uint64_t v1625;
  std::__shared_weak_count *v1626;
  uint64_t v1627;
  std::__shared_weak_count *v1628;
  uint64_t v1629;
  std::__shared_weak_count *v1630;
  uint64_t v1631;
  std::__shared_weak_count *v1632;
  uint64_t v1633;
  std::__shared_weak_count *v1634;
  uint64_t v1635;
  std::__shared_weak_count *v1636;
  uint64_t v1637;
  std::__shared_weak_count *v1638;
  uint64_t v1639;
  std::__shared_weak_count *v1640;
  uint64_t v1641;
  std::__shared_weak_count *v1642;
  uint64_t v1643;
  std::__shared_weak_count *v1644;
  uint64_t v1645;
  std::__shared_weak_count *v1646;
  uint64_t v1647;
  std::__shared_weak_count *v1648;
  uint64_t v1649;
  std::__shared_weak_count *v1650;
  uint64_t v1651;
  std::__shared_weak_count *v1652;
  uint64_t v1653;
  std::__shared_weak_count *v1654;
  uint64_t v1655;
  std::__shared_weak_count *v1656;
  uint64_t v1657;
  std::__shared_weak_count *v1658;
  uint64_t v1659;
  std::__shared_weak_count *v1660;
  uint64_t v1661;
  std::__shared_weak_count *v1662;
  uint64_t v1663;
  std::__shared_weak_count *v1664;
  uint64_t v1665;
  std::__shared_weak_count *v1666;
  uint64_t v1667;
  std::__shared_weak_count *v1668;
  uint64_t v1669;
  std::__shared_weak_count *v1670;
  uint64_t v1671;
  std::__shared_weak_count *v1672;
  uint64_t v1673;
  std::__shared_weak_count *v1674;
  uint64_t v1675;
  std::__shared_weak_count *v1676;
  uint64_t v1677;
  std::__shared_weak_count *v1678;
  uint64_t v1679;
  std::__shared_weak_count *v1680;
  uint64_t v1681;
  std::__shared_weak_count *v1682;
  uint64_t v1683;
  std::__shared_weak_count *v1684;
  uint64_t v1685;
  std::__shared_weak_count *v1686;
  uint64_t v1687;
  std::__shared_weak_count *v1688;
  uint64_t v1689;
  std::__shared_weak_count *v1690;
  uint64_t v1691;
  std::__shared_weak_count *v1692;
  uint64_t v1693;
  std::__shared_weak_count *v1694;
  uint64_t v1695;
  std::__shared_weak_count *v1696;
  uint64_t v1697;
  std::__shared_weak_count *v1698;
  uint64_t v1699;
  std::__shared_weak_count *v1700;
  uint64_t v1701;
  std::__shared_weak_count *v1702;
  uint64_t v1703;
  std::__shared_weak_count *v1704;
  uint64_t v1705;
  std::__shared_weak_count *v1706;
  uint64_t v1707;
  std::__shared_weak_count *v1708;
  uint64_t v1709;
  std::__shared_weak_count *v1710;
  uint64_t v1711;
  std::__shared_weak_count *v1712;
  uint64_t v1713;
  std::__shared_weak_count *v1714;
  uint64_t v1715;
  std::__shared_weak_count *v1716;
  uint64_t v1717;
  std::__shared_weak_count *v1718;
  uint64_t v1719;
  std::__shared_weak_count *v1720;
  uint64_t v1721;
  std::__shared_weak_count *v1722;
  uint64_t v1723;
  std::__shared_weak_count *v1724;
  uint64_t v1725;
  std::__shared_weak_count *v1726;
  uint64_t v1727;
  std::__shared_weak_count *v1728;
  uint64_t v1729;
  std::__shared_weak_count *v1730;
  uint64_t v1731;
  std::__shared_weak_count *v1732;
  uint64_t v1733;
  std::__shared_weak_count *v1734;
  uint64_t v1735;
  std::__shared_weak_count *v1736;
  uint64_t v1737;
  std::__shared_weak_count *v1738;
  uint64_t v1739;
  std::__shared_weak_count *v1740;
  uint64_t v1741;
  std::__shared_weak_count *v1742;
  uint64_t v1743;
  std::__shared_weak_count *v1744;
  uint64_t v1745;
  std::__shared_weak_count *v1746;
  uint64_t v1747;
  std::__shared_weak_count *v1748;
  uint64_t v1749;
  std::__shared_weak_count *v1750;
  uint64_t v1751;
  std::__shared_weak_count *v1752;
  uint64_t v1753;
  std::__shared_weak_count *v1754;
  uint64_t v1755;
  std::__shared_weak_count *v1756;
  uint64_t v1757;
  std::__shared_weak_count *v1758;
  uint64_t v1759;
  std::__shared_weak_count *v1760;
  uint64_t v1761;
  std::__shared_weak_count *v1762;
  uint64_t v1763;
  std::__shared_weak_count *v1764;
  uint64_t v1765;
  std::__shared_weak_count *v1766;
  uint64_t v1767;
  std::__shared_weak_count *v1768;
  uint64_t v1769;
  std::__shared_weak_count *v1770;
  uint64_t v1771;
  std::__shared_weak_count *v1772;
  uint64_t v1773;
  std::__shared_weak_count *v1774;
  uint64_t v1775;
  std::__shared_weak_count *v1776;
  uint64_t v1777;
  std::__shared_weak_count *v1778;
  uint64_t v1779;
  std::__shared_weak_count *v1780;
  uint64_t v1781;
  std::__shared_weak_count *v1782;
  uint64_t v1783;
  std::__shared_weak_count *v1784;
  uint64_t v1785;
  std::__shared_weak_count *v1786;
  uint64_t v1787;
  std::__shared_weak_count *v1788;
  uint64_t v1789;
  std::__shared_weak_count *v1790;
  uint64_t v1791;
  std::__shared_weak_count *v1792;
  uint64_t v1793;
  std::__shared_weak_count *v1794;
  uint64_t v1795;
  std::__shared_weak_count *v1796;
  uint64_t v1797;
  std::__shared_weak_count *v1798;
  uint64_t v1799;
  std::__shared_weak_count *v1800;
  uint64_t v1801;
  std::__shared_weak_count *v1802;
  uint64_t v1803;
  std::__shared_weak_count *v1804;
  uint64_t v1805;
  std::__shared_weak_count *v1806;

  v1805 = qword_1023127D0;
  v1806 = *(std::__shared_weak_count **)algn_1023127D8;
  if (*(_QWORD *)algn_1023127D8)
  {
    v1 = (unint64_t *)(*(_QWORD *)algn_1023127D8 + 8);
    do
      v2 = __ldxr(v1);
    while (__stxr(v2 + 1, v1));
  }
  v1803 = qword_1023131D0;
  v1804 = *(std::__shared_weak_count **)algn_1023131D8;
  if (*(_QWORD *)algn_1023131D8)
  {
    v3 = (unint64_t *)(*(_QWORD *)algn_1023131D8 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  sub_100E852E4(&qword_10230D8F8, &v1805, &v1803);
  v5 = v1804;
  if (v1804)
  {
    p_shared_owners = (unint64_t *)&v1804->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v1806;
  if (v1806)
  {
    v9 = (unint64_t *)&v1806->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v1801 = qword_1023127E0;
  v1802 = *(std::__shared_weak_count **)algn_1023127E8;
  if (*(_QWORD *)algn_1023127E8)
  {
    v11 = (unint64_t *)(*(_QWORD *)algn_1023127E8 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v1799 = qword_1023131E0;
  v1800 = *(std::__shared_weak_count **)algn_1023131E8;
  if (*(_QWORD *)algn_1023131E8)
  {
    v13 = (unint64_t *)(*(_QWORD *)algn_1023131E8 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  sub_100E852E4(&qword_10230D8F8, &v1801, &v1799);
  v15 = v1800;
  if (v1800)
  {
    v16 = (unint64_t *)&v1800->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v1802;
  if (v1802)
  {
    v19 = (unint64_t *)&v1802->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v1797 = qword_1023127F0;
  v1798 = *(std::__shared_weak_count **)algn_1023127F8;
  if (*(_QWORD *)algn_1023127F8)
  {
    v21 = (unint64_t *)(*(_QWORD *)algn_1023127F8 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v1795 = qword_1023131F0;
  v1796 = *(std::__shared_weak_count **)algn_1023131F8;
  if (*(_QWORD *)algn_1023131F8)
  {
    v23 = (unint64_t *)(*(_QWORD *)algn_1023131F8 + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  sub_100E852E4(&qword_10230D8F8, &v1797, &v1795);
  v25 = v1796;
  if (v1796)
  {
    v26 = (unint64_t *)&v1796->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v1798;
  if (v1798)
  {
    v29 = (unint64_t *)&v1798->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v1793 = qword_102312800;
  v1794 = *(std::__shared_weak_count **)algn_102312808;
  if (*(_QWORD *)algn_102312808)
  {
    v31 = (unint64_t *)(*(_QWORD *)algn_102312808 + 8);
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  v1791 = qword_102313200;
  v1792 = *(std::__shared_weak_count **)algn_102313208;
  if (*(_QWORD *)algn_102313208)
  {
    v33 = (unint64_t *)(*(_QWORD *)algn_102313208 + 8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  sub_100E852E4(&qword_10230D8F8, &v1793, &v1791);
  v35 = v1792;
  if (v1792)
  {
    v36 = (unint64_t *)&v1792->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = v1794;
  if (v1794)
  {
    v39 = (unint64_t *)&v1794->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v1789 = qword_102312820;
  v1790 = *(std::__shared_weak_count **)algn_102312828;
  if (*(_QWORD *)algn_102312828)
  {
    v41 = (unint64_t *)(*(_QWORD *)algn_102312828 + 8);
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  v1787 = qword_102313180;
  v1788 = *(std::__shared_weak_count **)algn_102313188;
  if (*(_QWORD *)algn_102313188)
  {
    v43 = (unint64_t *)(*(_QWORD *)algn_102313188 + 8);
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
  }
  sub_100E852E4(&qword_10230D8F8, &v1789, &v1787);
  v45 = v1788;
  if (v1788)
  {
    v46 = (unint64_t *)&v1788->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v48 = v1790;
  if (v1790)
  {
    v49 = (unint64_t *)&v1790->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v1785 = qword_102312830;
  v1786 = *(std::__shared_weak_count **)algn_102312838;
  if (*(_QWORD *)algn_102312838)
  {
    v51 = (unint64_t *)(*(_QWORD *)algn_102312838 + 8);
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
  }
  v1783 = qword_102313190;
  v1784 = *(std::__shared_weak_count **)algn_102313198;
  if (*(_QWORD *)algn_102313198)
  {
    v53 = (unint64_t *)(*(_QWORD *)algn_102313198 + 8);
    do
      v54 = __ldxr(v53);
    while (__stxr(v54 + 1, v53));
  }
  sub_100E852E4(&qword_10230D8F8, &v1785, &v1783);
  v55 = v1784;
  if (v1784)
  {
    v56 = (unint64_t *)&v1784->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = v1786;
  if (v1786)
  {
    v59 = (unint64_t *)&v1786->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v1781 = qword_102312840;
  v1782 = *(std::__shared_weak_count **)algn_102312848;
  if (*(_QWORD *)algn_102312848)
  {
    v61 = (unint64_t *)(*(_QWORD *)algn_102312848 + 8);
    do
      v62 = __ldxr(v61);
    while (__stxr(v62 + 1, v61));
  }
  v1779 = qword_1023131A0;
  v1780 = *(std::__shared_weak_count **)algn_1023131A8;
  if (*(_QWORD *)algn_1023131A8)
  {
    v63 = (unint64_t *)(*(_QWORD *)algn_1023131A8 + 8);
    do
      v64 = __ldxr(v63);
    while (__stxr(v64 + 1, v63));
  }
  sub_100E852E4(&qword_10230D8F8, &v1781, &v1779);
  v65 = v1780;
  if (v1780)
  {
    v66 = (unint64_t *)&v1780->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v68 = v1782;
  if (v1782)
  {
    v69 = (unint64_t *)&v1782->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v1777 = qword_102312850;
  v1778 = *(std::__shared_weak_count **)algn_102312858;
  if (*(_QWORD *)algn_102312858)
  {
    v71 = (unint64_t *)(*(_QWORD *)algn_102312858 + 8);
    do
      v72 = __ldxr(v71);
    while (__stxr(v72 + 1, v71));
  }
  v1775 = qword_1023131B0;
  v1776 = *(std::__shared_weak_count **)algn_1023131B8;
  if (*(_QWORD *)algn_1023131B8)
  {
    v73 = (unint64_t *)(*(_QWORD *)algn_1023131B8 + 8);
    do
      v74 = __ldxr(v73);
    while (__stxr(v74 + 1, v73));
  }
  sub_100E852E4(&qword_10230D8F8, &v1777, &v1775);
  v75 = v1776;
  if (v1776)
  {
    v76 = (unint64_t *)&v1776->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v78 = v1778;
  if (v1778)
  {
    v79 = (unint64_t *)&v1778->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v1773 = qword_102312860;
  v1774 = *(std::__shared_weak_count **)algn_102312868;
  if (*(_QWORD *)algn_102312868)
  {
    v81 = (unint64_t *)(*(_QWORD *)algn_102312868 + 8);
    do
      v82 = __ldxr(v81);
    while (__stxr(v82 + 1, v81));
  }
  v1771 = qword_102313230;
  v1772 = *(std::__shared_weak_count **)algn_102313238;
  if (*(_QWORD *)algn_102313238)
  {
    v83 = (unint64_t *)(*(_QWORD *)algn_102313238 + 8);
    do
      v84 = __ldxr(v83);
    while (__stxr(v84 + 1, v83));
  }
  sub_100E852E4(&qword_10230D8F8, &v1773, &v1771);
  v85 = v1772;
  if (v1772)
  {
    v86 = (unint64_t *)&v1772->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = v1774;
  if (v1774)
  {
    v89 = (unint64_t *)&v1774->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v1769 = qword_102312870;
  v1770 = *(std::__shared_weak_count **)algn_102312878;
  if (*(_QWORD *)algn_102312878)
  {
    v91 = (unint64_t *)(*(_QWORD *)algn_102312878 + 8);
    do
      v92 = __ldxr(v91);
    while (__stxr(v92 + 1, v91));
  }
  v1767 = qword_102313240;
  v1768 = *(std::__shared_weak_count **)algn_102313248;
  if (*(_QWORD *)algn_102313248)
  {
    v93 = (unint64_t *)(*(_QWORD *)algn_102313248 + 8);
    do
      v94 = __ldxr(v93);
    while (__stxr(v94 + 1, v93));
  }
  sub_100E852E4(&qword_10230D8F8, &v1769, &v1767);
  v95 = v1768;
  if (v1768)
  {
    v96 = (unint64_t *)&v1768->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = v1770;
  if (v1770)
  {
    v99 = (unint64_t *)&v1770->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  v1765 = qword_102312890;
  v1766 = *(std::__shared_weak_count **)algn_102312898;
  if (*(_QWORD *)algn_102312898)
  {
    v101 = (unint64_t *)(*(_QWORD *)algn_102312898 + 8);
    do
      v102 = __ldxr(v101);
    while (__stxr(v102 + 1, v101));
  }
  v1763 = qword_102313260;
  v1764 = *(std::__shared_weak_count **)algn_102313268;
  if (*(_QWORD *)algn_102313268)
  {
    v103 = (unint64_t *)(*(_QWORD *)algn_102313268 + 8);
    do
      v104 = __ldxr(v103);
    while (__stxr(v104 + 1, v103));
  }
  sub_100E852E4(&qword_10230D8F8, &v1765, &v1763);
  v105 = v1764;
  if (v1764)
  {
    v106 = (unint64_t *)&v1764->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = v1766;
  if (v1766)
  {
    v109 = (unint64_t *)&v1766->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v1761 = qword_1023128A0;
  v1762 = *(std::__shared_weak_count **)algn_1023128A8;
  if (*(_QWORD *)algn_1023128A8)
  {
    v111 = (unint64_t *)(*(_QWORD *)algn_1023128A8 + 8);
    do
      v112 = __ldxr(v111);
    while (__stxr(v112 + 1, v111));
  }
  v1759 = qword_102313270;
  v1760 = *(std::__shared_weak_count **)algn_102313278;
  if (*(_QWORD *)algn_102313278)
  {
    v113 = (unint64_t *)(*(_QWORD *)algn_102313278 + 8);
    do
      v114 = __ldxr(v113);
    while (__stxr(v114 + 1, v113));
  }
  sub_100E852E4(&qword_10230D8F8, &v1761, &v1759);
  v115 = v1760;
  if (v1760)
  {
    v116 = (unint64_t *)&v1760->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = v1762;
  if (v1762)
  {
    v119 = (unint64_t *)&v1762->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  v1757 = qword_1023128B0;
  v1758 = *(std::__shared_weak_count **)algn_1023128B8;
  if (*(_QWORD *)algn_1023128B8)
  {
    v121 = (unint64_t *)(*(_QWORD *)algn_1023128B8 + 8);
    do
      v122 = __ldxr(v121);
    while (__stxr(v122 + 1, v121));
  }
  v1755 = qword_102313280;
  v1756 = *(std::__shared_weak_count **)algn_102313288;
  if (*(_QWORD *)algn_102313288)
  {
    v123 = (unint64_t *)(*(_QWORD *)algn_102313288 + 8);
    do
      v124 = __ldxr(v123);
    while (__stxr(v124 + 1, v123));
  }
  sub_100E852E4(&qword_10230D8F8, &v1757, &v1755);
  v125 = v1756;
  if (v1756)
  {
    v126 = (unint64_t *)&v1756->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  v128 = v1758;
  if (v1758)
  {
    v129 = (unint64_t *)&v1758->__shared_owners_;
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  v1753 = qword_1023128C0;
  v1754 = *(std::__shared_weak_count **)algn_1023128C8;
  if (*(_QWORD *)algn_1023128C8)
  {
    v131 = (unint64_t *)(*(_QWORD *)algn_1023128C8 + 8);
    do
      v132 = __ldxr(v131);
    while (__stxr(v132 + 1, v131));
  }
  v1751 = qword_102313290;
  v1752 = *(std::__shared_weak_count **)algn_102313298;
  if (*(_QWORD *)algn_102313298)
  {
    v133 = (unint64_t *)(*(_QWORD *)algn_102313298 + 8);
    do
      v134 = __ldxr(v133);
    while (__stxr(v134 + 1, v133));
  }
  sub_100E852E4(&qword_10230D8F8, &v1753, &v1751);
  v135 = v1752;
  if (v1752)
  {
    v136 = (unint64_t *)&v1752->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  v138 = v1754;
  if (v1754)
  {
    v139 = (unint64_t *)&v1754->__shared_owners_;
    do
      v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
  }
  v1749 = qword_1023128D0;
  v1750 = *(std::__shared_weak_count **)algn_1023128D8;
  if (*(_QWORD *)algn_1023128D8)
  {
    v141 = (unint64_t *)(*(_QWORD *)algn_1023128D8 + 8);
    do
      v142 = __ldxr(v141);
    while (__stxr(v142 + 1, v141));
  }
  v1747 = qword_1023132A0;
  v1748 = *(std::__shared_weak_count **)algn_1023132A8;
  if (*(_QWORD *)algn_1023132A8)
  {
    v143 = (unint64_t *)(*(_QWORD *)algn_1023132A8 + 8);
    do
      v144 = __ldxr(v143);
    while (__stxr(v144 + 1, v143));
  }
  sub_100E852E4(&qword_10230D8F8, &v1749, &v1747);
  v145 = v1748;
  if (v1748)
  {
    v146 = (unint64_t *)&v1748->__shared_owners_;
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
  v148 = v1750;
  if (v1750)
  {
    v149 = (unint64_t *)&v1750->__shared_owners_;
    do
      v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
      std::__shared_weak_count::__release_weak(v148);
    }
  }
  v1745 = qword_1023128F0;
  v1746 = *(std::__shared_weak_count **)algn_1023128F8;
  if (*(_QWORD *)algn_1023128F8)
  {
    v151 = (unint64_t *)(*(_QWORD *)algn_1023128F8 + 8);
    do
      v152 = __ldxr(v151);
    while (__stxr(v152 + 1, v151));
  }
  v1743 = qword_1023132C0;
  v1744 = *(std::__shared_weak_count **)algn_1023132C8;
  if (*(_QWORD *)algn_1023132C8)
  {
    v153 = (unint64_t *)(*(_QWORD *)algn_1023132C8 + 8);
    do
      v154 = __ldxr(v153);
    while (__stxr(v154 + 1, v153));
  }
  sub_100E852E4(&qword_10230D8F8, &v1745, &v1743);
  v155 = v1744;
  if (v1744)
  {
    v156 = (unint64_t *)&v1744->__shared_owners_;
    do
      v157 = __ldaxr(v156);
    while (__stlxr(v157 - 1, v156));
    if (!v157)
    {
      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
      std::__shared_weak_count::__release_weak(v155);
    }
  }
  v158 = v1746;
  if (v1746)
  {
    v159 = (unint64_t *)&v1746->__shared_owners_;
    do
      v160 = __ldaxr(v159);
    while (__stlxr(v160 - 1, v159));
    if (!v160)
    {
      ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
      std::__shared_weak_count::__release_weak(v158);
    }
  }
  v1741 = qword_102312900;
  v1742 = *(std::__shared_weak_count **)algn_102312908;
  if (*(_QWORD *)algn_102312908)
  {
    v161 = (unint64_t *)(*(_QWORD *)algn_102312908 + 8);
    do
      v162 = __ldxr(v161);
    while (__stxr(v162 + 1, v161));
  }
  v1739 = qword_1023132D0;
  v1740 = *(std::__shared_weak_count **)algn_1023132D8;
  if (*(_QWORD *)algn_1023132D8)
  {
    v163 = (unint64_t *)(*(_QWORD *)algn_1023132D8 + 8);
    do
      v164 = __ldxr(v163);
    while (__stxr(v164 + 1, v163));
  }
  sub_100E852E4(&qword_10230D8F8, &v1741, &v1739);
  v165 = v1740;
  if (v1740)
  {
    v166 = (unint64_t *)&v1740->__shared_owners_;
    do
      v167 = __ldaxr(v166);
    while (__stlxr(v167 - 1, v166));
    if (!v167)
    {
      ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
      std::__shared_weak_count::__release_weak(v165);
    }
  }
  v168 = v1742;
  if (v1742)
  {
    v169 = (unint64_t *)&v1742->__shared_owners_;
    do
      v170 = __ldaxr(v169);
    while (__stlxr(v170 - 1, v169));
    if (!v170)
    {
      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
      std::__shared_weak_count::__release_weak(v168);
    }
  }
  v1737 = qword_102312910;
  v1738 = *(std::__shared_weak_count **)algn_102312918;
  if (*(_QWORD *)algn_102312918)
  {
    v171 = (unint64_t *)(*(_QWORD *)algn_102312918 + 8);
    do
      v172 = __ldxr(v171);
    while (__stxr(v172 + 1, v171));
  }
  v1735 = qword_1023132E0;
  v1736 = *(std::__shared_weak_count **)algn_1023132E8;
  if (*(_QWORD *)algn_1023132E8)
  {
    v173 = (unint64_t *)(*(_QWORD *)algn_1023132E8 + 8);
    do
      v174 = __ldxr(v173);
    while (__stxr(v174 + 1, v173));
  }
  sub_100E852E4(&qword_10230D8F8, &v1737, &v1735);
  v175 = v1736;
  if (v1736)
  {
    v176 = (unint64_t *)&v1736->__shared_owners_;
    do
      v177 = __ldaxr(v176);
    while (__stlxr(v177 - 1, v176));
    if (!v177)
    {
      ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
      std::__shared_weak_count::__release_weak(v175);
    }
  }
  v178 = v1738;
  if (v1738)
  {
    v179 = (unint64_t *)&v1738->__shared_owners_;
    do
      v180 = __ldaxr(v179);
    while (__stlxr(v180 - 1, v179));
    if (!v180)
    {
      ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
      std::__shared_weak_count::__release_weak(v178);
    }
  }
  v1733 = qword_102312930;
  v1734 = *(std::__shared_weak_count **)algn_102312938;
  if (*(_QWORD *)algn_102312938)
  {
    v181 = (unint64_t *)(*(_QWORD *)algn_102312938 + 8);
    do
      v182 = __ldxr(v181);
    while (__stxr(v182 + 1, v181));
  }
  v1731 = qword_102313300;
  v1732 = *(std::__shared_weak_count **)algn_102313308;
  if (*(_QWORD *)algn_102313308)
  {
    v183 = (unint64_t *)(*(_QWORD *)algn_102313308 + 8);
    do
      v184 = __ldxr(v183);
    while (__stxr(v184 + 1, v183));
  }
  sub_100E852E4(&qword_10230D8F8, &v1733, &v1731);
  v185 = v1732;
  if (v1732)
  {
    v186 = (unint64_t *)&v1732->__shared_owners_;
    do
      v187 = __ldaxr(v186);
    while (__stlxr(v187 - 1, v186));
    if (!v187)
    {
      ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
      std::__shared_weak_count::__release_weak(v185);
    }
  }
  v188 = v1734;
  if (v1734)
  {
    v189 = (unint64_t *)&v1734->__shared_owners_;
    do
      v190 = __ldaxr(v189);
    while (__stlxr(v190 - 1, v189));
    if (!v190)
    {
      ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
      std::__shared_weak_count::__release_weak(v188);
    }
  }
  v1729 = qword_102312940;
  v1730 = *(std::__shared_weak_count **)algn_102312948;
  if (*(_QWORD *)algn_102312948)
  {
    v191 = (unint64_t *)(*(_QWORD *)algn_102312948 + 8);
    do
      v192 = __ldxr(v191);
    while (__stxr(v192 + 1, v191));
  }
  v1727 = qword_102313310;
  v1728 = *(std::__shared_weak_count **)algn_102313318;
  if (*(_QWORD *)algn_102313318)
  {
    v193 = (unint64_t *)(*(_QWORD *)algn_102313318 + 8);
    do
      v194 = __ldxr(v193);
    while (__stxr(v194 + 1, v193));
  }
  sub_100E852E4(&qword_10230D8F8, &v1729, &v1727);
  v195 = v1728;
  if (v1728)
  {
    v196 = (unint64_t *)&v1728->__shared_owners_;
    do
      v197 = __ldaxr(v196);
    while (__stlxr(v197 - 1, v196));
    if (!v197)
    {
      ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
      std::__shared_weak_count::__release_weak(v195);
    }
  }
  v198 = v1730;
  if (v1730)
  {
    v199 = (unint64_t *)&v1730->__shared_owners_;
    do
      v200 = __ldaxr(v199);
    while (__stlxr(v200 - 1, v199));
    if (!v200)
    {
      ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
      std::__shared_weak_count::__release_weak(v198);
    }
  }
  v1725 = qword_102312960;
  v1726 = *(std::__shared_weak_count **)algn_102312968;
  if (*(_QWORD *)algn_102312968)
  {
    v201 = (unint64_t *)(*(_QWORD *)algn_102312968 + 8);
    do
      v202 = __ldxr(v201);
    while (__stxr(v202 + 1, v201));
  }
  v1723 = qword_102313330;
  v1724 = *(std::__shared_weak_count **)algn_102313338;
  if (*(_QWORD *)algn_102313338)
  {
    v203 = (unint64_t *)(*(_QWORD *)algn_102313338 + 8);
    do
      v204 = __ldxr(v203);
    while (__stxr(v204 + 1, v203));
  }
  sub_100E852E4(&qword_10230D8F8, &v1725, &v1723);
  v205 = v1724;
  if (v1724)
  {
    v206 = (unint64_t *)&v1724->__shared_owners_;
    do
      v207 = __ldaxr(v206);
    while (__stlxr(v207 - 1, v206));
    if (!v207)
    {
      ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
      std::__shared_weak_count::__release_weak(v205);
    }
  }
  v208 = v1726;
  if (v1726)
  {
    v209 = (unint64_t *)&v1726->__shared_owners_;
    do
      v210 = __ldaxr(v209);
    while (__stlxr(v210 - 1, v209));
    if (!v210)
    {
      ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
      std::__shared_weak_count::__release_weak(v208);
    }
  }
  v1721 = qword_102312970;
  v1722 = *(std::__shared_weak_count **)algn_102312978;
  if (*(_QWORD *)algn_102312978)
  {
    v211 = (unint64_t *)(*(_QWORD *)algn_102312978 + 8);
    do
      v212 = __ldxr(v211);
    while (__stxr(v212 + 1, v211));
  }
  v1719 = qword_102313340;
  v1720 = *(std::__shared_weak_count **)algn_102313348;
  if (*(_QWORD *)algn_102313348)
  {
    v213 = (unint64_t *)(*(_QWORD *)algn_102313348 + 8);
    do
      v214 = __ldxr(v213);
    while (__stxr(v214 + 1, v213));
  }
  sub_100E852E4(&qword_10230D8F8, &v1721, &v1719);
  v215 = v1720;
  if (v1720)
  {
    v216 = (unint64_t *)&v1720->__shared_owners_;
    do
      v217 = __ldaxr(v216);
    while (__stlxr(v217 - 1, v216));
    if (!v217)
    {
      ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
      std::__shared_weak_count::__release_weak(v215);
    }
  }
  v218 = v1722;
  if (v1722)
  {
    v219 = (unint64_t *)&v1722->__shared_owners_;
    do
      v220 = __ldaxr(v219);
    while (__stlxr(v220 - 1, v219));
    if (!v220)
    {
      ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
      std::__shared_weak_count::__release_weak(v218);
    }
  }
  v1717 = qword_102312980;
  v1718 = *(std::__shared_weak_count **)algn_102312988;
  if (*(_QWORD *)algn_102312988)
  {
    v221 = (unint64_t *)(*(_QWORD *)algn_102312988 + 8);
    do
      v222 = __ldxr(v221);
    while (__stxr(v222 + 1, v221));
  }
  v1715 = qword_102313350;
  v1716 = *(std::__shared_weak_count **)algn_102313358;
  if (*(_QWORD *)algn_102313358)
  {
    v223 = (unint64_t *)(*(_QWORD *)algn_102313358 + 8);
    do
      v224 = __ldxr(v223);
    while (__stxr(v224 + 1, v223));
  }
  sub_100E852E4(&qword_10230D8F8, &v1717, &v1715);
  v225 = v1716;
  if (v1716)
  {
    v226 = (unint64_t *)&v1716->__shared_owners_;
    do
      v227 = __ldaxr(v226);
    while (__stlxr(v227 - 1, v226));
    if (!v227)
    {
      ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
      std::__shared_weak_count::__release_weak(v225);
    }
  }
  v228 = v1718;
  if (v1718)
  {
    v229 = (unint64_t *)&v1718->__shared_owners_;
    do
      v230 = __ldaxr(v229);
    while (__stlxr(v230 - 1, v229));
    if (!v230)
    {
      ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
      std::__shared_weak_count::__release_weak(v228);
    }
  }
  v1713 = qword_102312990;
  v1714 = *(std::__shared_weak_count **)algn_102312998;
  if (*(_QWORD *)algn_102312998)
  {
    v231 = (unint64_t *)(*(_QWORD *)algn_102312998 + 8);
    do
      v232 = __ldxr(v231);
    while (__stxr(v232 + 1, v231));
  }
  v1711 = qword_102313360;
  v1712 = *(std::__shared_weak_count **)algn_102313368;
  if (*(_QWORD *)algn_102313368)
  {
    v233 = (unint64_t *)(*(_QWORD *)algn_102313368 + 8);
    do
      v234 = __ldxr(v233);
    while (__stxr(v234 + 1, v233));
  }
  sub_100E852E4(&qword_10230D8F8, &v1713, &v1711);
  v235 = v1712;
  if (v1712)
  {
    v236 = (unint64_t *)&v1712->__shared_owners_;
    do
      v237 = __ldaxr(v236);
    while (__stlxr(v237 - 1, v236));
    if (!v237)
    {
      ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
      std::__shared_weak_count::__release_weak(v235);
    }
  }
  v238 = v1714;
  if (v1714)
  {
    v239 = (unint64_t *)&v1714->__shared_owners_;
    do
      v240 = __ldaxr(v239);
    while (__stlxr(v240 - 1, v239));
    if (!v240)
    {
      ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
      std::__shared_weak_count::__release_weak(v238);
    }
  }
  v1709 = qword_1023129A0;
  v1710 = *(std::__shared_weak_count **)algn_1023129A8;
  if (*(_QWORD *)algn_1023129A8)
  {
    v241 = (unint64_t *)(*(_QWORD *)algn_1023129A8 + 8);
    do
      v242 = __ldxr(v241);
    while (__stxr(v242 + 1, v241));
  }
  v1707 = qword_102313370;
  v1708 = *(std::__shared_weak_count **)algn_102313378;
  if (*(_QWORD *)algn_102313378)
  {
    v243 = (unint64_t *)(*(_QWORD *)algn_102313378 + 8);
    do
      v244 = __ldxr(v243);
    while (__stxr(v244 + 1, v243));
  }
  sub_100E852E4(&qword_10230D8F8, &v1709, &v1707);
  v245 = v1708;
  if (v1708)
  {
    v246 = (unint64_t *)&v1708->__shared_owners_;
    do
      v247 = __ldaxr(v246);
    while (__stlxr(v247 - 1, v246));
    if (!v247)
    {
      ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
      std::__shared_weak_count::__release_weak(v245);
    }
  }
  v248 = v1710;
  if (v1710)
  {
    v249 = (unint64_t *)&v1710->__shared_owners_;
    do
      v250 = __ldaxr(v249);
    while (__stlxr(v250 - 1, v249));
    if (!v250)
    {
      ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
      std::__shared_weak_count::__release_weak(v248);
    }
  }
  v1705 = qword_1023129C0;
  v1706 = *(std::__shared_weak_count **)algn_1023129C8;
  if (*(_QWORD *)algn_1023129C8)
  {
    v251 = (unint64_t *)(*(_QWORD *)algn_1023129C8 + 8);
    do
      v252 = __ldxr(v251);
    while (__stxr(v252 + 1, v251));
  }
  v1703 = qword_102313390;
  v1704 = *(std::__shared_weak_count **)algn_102313398;
  if (*(_QWORD *)algn_102313398)
  {
    v253 = (unint64_t *)(*(_QWORD *)algn_102313398 + 8);
    do
      v254 = __ldxr(v253);
    while (__stxr(v254 + 1, v253));
  }
  sub_100E852E4(&qword_10230D8F8, &v1705, &v1703);
  v255 = v1704;
  if (v1704)
  {
    v256 = (unint64_t *)&v1704->__shared_owners_;
    do
      v257 = __ldaxr(v256);
    while (__stlxr(v257 - 1, v256));
    if (!v257)
    {
      ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
      std::__shared_weak_count::__release_weak(v255);
    }
  }
  v258 = v1706;
  if (v1706)
  {
    v259 = (unint64_t *)&v1706->__shared_owners_;
    do
      v260 = __ldaxr(v259);
    while (__stlxr(v260 - 1, v259));
    if (!v260)
    {
      ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
      std::__shared_weak_count::__release_weak(v258);
    }
  }
  v1701 = qword_1023129D0;
  v1702 = *(std::__shared_weak_count **)algn_1023129D8;
  if (*(_QWORD *)algn_1023129D8)
  {
    v261 = (unint64_t *)(*(_QWORD *)algn_1023129D8 + 8);
    do
      v262 = __ldxr(v261);
    while (__stxr(v262 + 1, v261));
  }
  v1699 = qword_1023133A0;
  v1700 = *(std::__shared_weak_count **)algn_1023133A8;
  if (*(_QWORD *)algn_1023133A8)
  {
    v263 = (unint64_t *)(*(_QWORD *)algn_1023133A8 + 8);
    do
      v264 = __ldxr(v263);
    while (__stxr(v264 + 1, v263));
  }
  sub_100E852E4(&qword_10230D8F8, &v1701, &v1699);
  v265 = v1700;
  if (v1700)
  {
    v266 = (unint64_t *)&v1700->__shared_owners_;
    do
      v267 = __ldaxr(v266);
    while (__stlxr(v267 - 1, v266));
    if (!v267)
    {
      ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
      std::__shared_weak_count::__release_weak(v265);
    }
  }
  v268 = v1702;
  if (v1702)
  {
    v269 = (unint64_t *)&v1702->__shared_owners_;
    do
      v270 = __ldaxr(v269);
    while (__stlxr(v270 - 1, v269));
    if (!v270)
    {
      ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
      std::__shared_weak_count::__release_weak(v268);
    }
  }
  v1697 = qword_1023129F0;
  v1698 = *(std::__shared_weak_count **)algn_1023129F8;
  if (*(_QWORD *)algn_1023129F8)
  {
    v271 = (unint64_t *)(*(_QWORD *)algn_1023129F8 + 8);
    do
      v272 = __ldxr(v271);
    while (__stxr(v272 + 1, v271));
  }
  v1695 = qword_1023133C0;
  v1696 = *(std::__shared_weak_count **)algn_1023133C8;
  if (*(_QWORD *)algn_1023133C8)
  {
    v273 = (unint64_t *)(*(_QWORD *)algn_1023133C8 + 8);
    do
      v274 = __ldxr(v273);
    while (__stxr(v274 + 1, v273));
  }
  sub_100E852E4(&qword_10230D8F8, &v1697, &v1695);
  v275 = v1696;
  if (v1696)
  {
    v276 = (unint64_t *)&v1696->__shared_owners_;
    do
      v277 = __ldaxr(v276);
    while (__stlxr(v277 - 1, v276));
    if (!v277)
    {
      ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
      std::__shared_weak_count::__release_weak(v275);
    }
  }
  v278 = v1698;
  if (v1698)
  {
    v279 = (unint64_t *)&v1698->__shared_owners_;
    do
      v280 = __ldaxr(v279);
    while (__stlxr(v280 - 1, v279));
    if (!v280)
    {
      ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
      std::__shared_weak_count::__release_weak(v278);
    }
  }
  v1693 = qword_102312A00;
  v1694 = *(std::__shared_weak_count **)algn_102312A08;
  if (*(_QWORD *)algn_102312A08)
  {
    v281 = (unint64_t *)(*(_QWORD *)algn_102312A08 + 8);
    do
      v282 = __ldxr(v281);
    while (__stxr(v282 + 1, v281));
  }
  v1691 = qword_1023133D0;
  v1692 = *(std::__shared_weak_count **)algn_1023133D8;
  if (*(_QWORD *)algn_1023133D8)
  {
    v283 = (unint64_t *)(*(_QWORD *)algn_1023133D8 + 8);
    do
      v284 = __ldxr(v283);
    while (__stxr(v284 + 1, v283));
  }
  sub_100E852E4(&qword_10230D8F8, &v1693, &v1691);
  v285 = v1692;
  if (v1692)
  {
    v286 = (unint64_t *)&v1692->__shared_owners_;
    do
      v287 = __ldaxr(v286);
    while (__stlxr(v287 - 1, v286));
    if (!v287)
    {
      ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
      std::__shared_weak_count::__release_weak(v285);
    }
  }
  v288 = v1694;
  if (v1694)
  {
    v289 = (unint64_t *)&v1694->__shared_owners_;
    do
      v290 = __ldaxr(v289);
    while (__stlxr(v290 - 1, v289));
    if (!v290)
    {
      ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
      std::__shared_weak_count::__release_weak(v288);
    }
  }
  v1689 = qword_102312A10;
  v1690 = *(std::__shared_weak_count **)algn_102312A18;
  if (*(_QWORD *)algn_102312A18)
  {
    v291 = (unint64_t *)(*(_QWORD *)algn_102312A18 + 8);
    do
      v292 = __ldxr(v291);
    while (__stxr(v292 + 1, v291));
  }
  v1687 = qword_1023133E0;
  v1688 = *(std::__shared_weak_count **)algn_1023133E8;
  if (*(_QWORD *)algn_1023133E8)
  {
    v293 = (unint64_t *)(*(_QWORD *)algn_1023133E8 + 8);
    do
      v294 = __ldxr(v293);
    while (__stxr(v294 + 1, v293));
  }
  sub_100E852E4(&qword_10230D8F8, &v1689, &v1687);
  v295 = v1688;
  if (v1688)
  {
    v296 = (unint64_t *)&v1688->__shared_owners_;
    do
      v297 = __ldaxr(v296);
    while (__stlxr(v297 - 1, v296));
    if (!v297)
    {
      ((void (*)(std::__shared_weak_count *))v295->__on_zero_shared)(v295);
      std::__shared_weak_count::__release_weak(v295);
    }
  }
  v298 = v1690;
  if (v1690)
  {
    v299 = (unint64_t *)&v1690->__shared_owners_;
    do
      v300 = __ldaxr(v299);
    while (__stlxr(v300 - 1, v299));
    if (!v300)
    {
      ((void (*)(std::__shared_weak_count *))v298->__on_zero_shared)(v298);
      std::__shared_weak_count::__release_weak(v298);
    }
  }
  v1685 = qword_102312A30;
  v1686 = *(std::__shared_weak_count **)algn_102312A38;
  if (*(_QWORD *)algn_102312A38)
  {
    v301 = (unint64_t *)(*(_QWORD *)algn_102312A38 + 8);
    do
      v302 = __ldxr(v301);
    while (__stxr(v302 + 1, v301));
  }
  v1683 = qword_102313410;
  v1684 = *(std::__shared_weak_count **)algn_102313418;
  if (*(_QWORD *)algn_102313418)
  {
    v303 = (unint64_t *)(*(_QWORD *)algn_102313418 + 8);
    do
      v304 = __ldxr(v303);
    while (__stxr(v304 + 1, v303));
  }
  sub_100E852E4(&qword_10230D8F8, &v1685, &v1683);
  v305 = v1684;
  if (v1684)
  {
    v306 = (unint64_t *)&v1684->__shared_owners_;
    do
      v307 = __ldaxr(v306);
    while (__stlxr(v307 - 1, v306));
    if (!v307)
    {
      ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
      std::__shared_weak_count::__release_weak(v305);
    }
  }
  v308 = v1686;
  if (v1686)
  {
    v309 = (unint64_t *)&v1686->__shared_owners_;
    do
      v310 = __ldaxr(v309);
    while (__stlxr(v310 - 1, v309));
    if (!v310)
    {
      ((void (*)(std::__shared_weak_count *))v308->__on_zero_shared)(v308);
      std::__shared_weak_count::__release_weak(v308);
    }
  }
  v1681 = qword_102312A40;
  v1682 = *(std::__shared_weak_count **)algn_102312A48;
  if (*(_QWORD *)algn_102312A48)
  {
    v311 = (unint64_t *)(*(_QWORD *)algn_102312A48 + 8);
    do
      v312 = __ldxr(v311);
    while (__stxr(v312 + 1, v311));
  }
  v1679 = qword_102313470;
  v1680 = *(std::__shared_weak_count **)algn_102313478;
  if (*(_QWORD *)algn_102313478)
  {
    v313 = (unint64_t *)(*(_QWORD *)algn_102313478 + 8);
    do
      v314 = __ldxr(v313);
    while (__stxr(v314 + 1, v313));
  }
  sub_100E852E4(&qword_10230D8F8, &v1681, &v1679);
  v315 = v1680;
  if (v1680)
  {
    v316 = (unint64_t *)&v1680->__shared_owners_;
    do
      v317 = __ldaxr(v316);
    while (__stlxr(v317 - 1, v316));
    if (!v317)
    {
      ((void (*)(std::__shared_weak_count *))v315->__on_zero_shared)(v315);
      std::__shared_weak_count::__release_weak(v315);
    }
  }
  v318 = v1682;
  if (v1682)
  {
    v319 = (unint64_t *)&v1682->__shared_owners_;
    do
      v320 = __ldaxr(v319);
    while (__stlxr(v320 - 1, v319));
    if (!v320)
    {
      ((void (*)(std::__shared_weak_count *))v318->__on_zero_shared)(v318);
      std::__shared_weak_count::__release_weak(v318);
    }
  }
  v1677 = qword_102312A50;
  v1678 = *(std::__shared_weak_count **)algn_102312A58;
  if (*(_QWORD *)algn_102312A58)
  {
    v321 = (unint64_t *)(*(_QWORD *)algn_102312A58 + 8);
    do
      v322 = __ldxr(v321);
    while (__stxr(v322 + 1, v321));
  }
  v1675 = qword_1023134D0;
  v1676 = *(std::__shared_weak_count **)algn_1023134D8;
  if (*(_QWORD *)algn_1023134D8)
  {
    v323 = (unint64_t *)(*(_QWORD *)algn_1023134D8 + 8);
    do
      v324 = __ldxr(v323);
    while (__stxr(v324 + 1, v323));
  }
  sub_100E852E4(&qword_10230D8F8, &v1677, &v1675);
  v325 = v1676;
  if (v1676)
  {
    v326 = (unint64_t *)&v1676->__shared_owners_;
    do
      v327 = __ldaxr(v326);
    while (__stlxr(v327 - 1, v326));
    if (!v327)
    {
      ((void (*)(std::__shared_weak_count *))v325->__on_zero_shared)(v325);
      std::__shared_weak_count::__release_weak(v325);
    }
  }
  v328 = v1678;
  if (v1678)
  {
    v329 = (unint64_t *)&v1678->__shared_owners_;
    do
      v330 = __ldaxr(v329);
    while (__stlxr(v330 - 1, v329));
    if (!v330)
    {
      ((void (*)(std::__shared_weak_count *))v328->__on_zero_shared)(v328);
      std::__shared_weak_count::__release_weak(v328);
    }
  }
  v1673 = qword_102312A60;
  v1674 = *(std::__shared_weak_count **)algn_102312A68;
  if (*(_QWORD *)algn_102312A68)
  {
    v331 = (unint64_t *)(*(_QWORD *)algn_102312A68 + 8);
    do
      v332 = __ldxr(v331);
    while (__stxr(v332 + 1, v331));
  }
  v1671 = qword_1023134E0;
  v1672 = *(std::__shared_weak_count **)algn_1023134E8;
  if (*(_QWORD *)algn_1023134E8)
  {
    v333 = (unint64_t *)(*(_QWORD *)algn_1023134E8 + 8);
    do
      v334 = __ldxr(v333);
    while (__stxr(v334 + 1, v333));
  }
  sub_100E852E4(&qword_10230D8F8, &v1673, &v1671);
  v335 = v1672;
  if (v1672)
  {
    v336 = (unint64_t *)&v1672->__shared_owners_;
    do
      v337 = __ldaxr(v336);
    while (__stlxr(v337 - 1, v336));
    if (!v337)
    {
      ((void (*)(std::__shared_weak_count *))v335->__on_zero_shared)(v335);
      std::__shared_weak_count::__release_weak(v335);
    }
  }
  v338 = v1674;
  if (v1674)
  {
    v339 = (unint64_t *)&v1674->__shared_owners_;
    do
      v340 = __ldaxr(v339);
    while (__stlxr(v340 - 1, v339));
    if (!v340)
    {
      ((void (*)(std::__shared_weak_count *))v338->__on_zero_shared)(v338);
      std::__shared_weak_count::__release_weak(v338);
    }
  }
  v1669 = qword_102312A70;
  v1670 = *(std::__shared_weak_count **)algn_102312A78;
  if (*(_QWORD *)algn_102312A78)
  {
    v341 = (unint64_t *)(*(_QWORD *)algn_102312A78 + 8);
    do
      v342 = __ldxr(v341);
    while (__stxr(v342 + 1, v341));
  }
  v1667 = qword_102313500;
  v1668 = *(std::__shared_weak_count **)algn_102313508;
  if (*(_QWORD *)algn_102313508)
  {
    v343 = (unint64_t *)(*(_QWORD *)algn_102313508 + 8);
    do
      v344 = __ldxr(v343);
    while (__stxr(v344 + 1, v343));
  }
  sub_100E852E4(&qword_10230D8F8, &v1669, &v1667);
  v345 = v1668;
  if (v1668)
  {
    v346 = (unint64_t *)&v1668->__shared_owners_;
    do
      v347 = __ldaxr(v346);
    while (__stlxr(v347 - 1, v346));
    if (!v347)
    {
      ((void (*)(std::__shared_weak_count *))v345->__on_zero_shared)(v345);
      std::__shared_weak_count::__release_weak(v345);
    }
  }
  v348 = v1670;
  if (v1670)
  {
    v349 = (unint64_t *)&v1670->__shared_owners_;
    do
      v350 = __ldaxr(v349);
    while (__stlxr(v350 - 1, v349));
    if (!v350)
    {
      ((void (*)(std::__shared_weak_count *))v348->__on_zero_shared)(v348);
      std::__shared_weak_count::__release_weak(v348);
    }
  }
  v1665 = qword_102312A80;
  v1666 = *(std::__shared_weak_count **)algn_102312A88;
  if (*(_QWORD *)algn_102312A88)
  {
    v351 = (unint64_t *)(*(_QWORD *)algn_102312A88 + 8);
    do
      v352 = __ldxr(v351);
    while (__stxr(v352 + 1, v351));
  }
  v1663 = qword_102313420;
  v1664 = *(std::__shared_weak_count **)algn_102313428;
  if (*(_QWORD *)algn_102313428)
  {
    v353 = (unint64_t *)(*(_QWORD *)algn_102313428 + 8);
    do
      v354 = __ldxr(v353);
    while (__stxr(v354 + 1, v353));
  }
  sub_100E852E4(&qword_10230D8F8, &v1665, &v1663);
  v355 = v1664;
  if (v1664)
  {
    v356 = (unint64_t *)&v1664->__shared_owners_;
    do
      v357 = __ldaxr(v356);
    while (__stlxr(v357 - 1, v356));
    if (!v357)
    {
      ((void (*)(std::__shared_weak_count *))v355->__on_zero_shared)(v355);
      std::__shared_weak_count::__release_weak(v355);
    }
  }
  v358 = v1666;
  if (v1666)
  {
    v359 = (unint64_t *)&v1666->__shared_owners_;
    do
      v360 = __ldaxr(v359);
    while (__stlxr(v360 - 1, v359));
    if (!v360)
    {
      ((void (*)(std::__shared_weak_count *))v358->__on_zero_shared)(v358);
      std::__shared_weak_count::__release_weak(v358);
    }
  }
  v1661 = qword_102312A90;
  v1662 = *(std::__shared_weak_count **)algn_102312A98;
  if (*(_QWORD *)algn_102312A98)
  {
    v361 = (unint64_t *)(*(_QWORD *)algn_102312A98 + 8);
    do
      v362 = __ldxr(v361);
    while (__stxr(v362 + 1, v361));
  }
  v1659 = qword_102313430;
  v1660 = *(std::__shared_weak_count **)algn_102313438;
  if (*(_QWORD *)algn_102313438)
  {
    v363 = (unint64_t *)(*(_QWORD *)algn_102313438 + 8);
    do
      v364 = __ldxr(v363);
    while (__stxr(v364 + 1, v363));
  }
  sub_100E852E4(&qword_10230D8F8, &v1661, &v1659);
  v365 = v1660;
  if (v1660)
  {
    v366 = (unint64_t *)&v1660->__shared_owners_;
    do
      v367 = __ldaxr(v366);
    while (__stlxr(v367 - 1, v366));
    if (!v367)
    {
      ((void (*)(std::__shared_weak_count *))v365->__on_zero_shared)(v365);
      std::__shared_weak_count::__release_weak(v365);
    }
  }
  v368 = v1662;
  if (v1662)
  {
    v369 = (unint64_t *)&v1662->__shared_owners_;
    do
      v370 = __ldaxr(v369);
    while (__stlxr(v370 - 1, v369));
    if (!v370)
    {
      ((void (*)(std::__shared_weak_count *))v368->__on_zero_shared)(v368);
      std::__shared_weak_count::__release_weak(v368);
    }
  }
  v1657 = qword_102312AA0;
  v1658 = *(std::__shared_weak_count **)algn_102312AA8;
  if (*(_QWORD *)algn_102312AA8)
  {
    v371 = (unint64_t *)(*(_QWORD *)algn_102312AA8 + 8);
    do
      v372 = __ldxr(v371);
    while (__stxr(v372 + 1, v371));
  }
  v1655 = qword_102313440;
  v1656 = *(std::__shared_weak_count **)algn_102313448;
  if (*(_QWORD *)algn_102313448)
  {
    v373 = (unint64_t *)(*(_QWORD *)algn_102313448 + 8);
    do
      v374 = __ldxr(v373);
    while (__stxr(v374 + 1, v373));
  }
  sub_100E852E4(&qword_10230D8F8, &v1657, &v1655);
  v375 = v1656;
  if (v1656)
  {
    v376 = (unint64_t *)&v1656->__shared_owners_;
    do
      v377 = __ldaxr(v376);
    while (__stlxr(v377 - 1, v376));
    if (!v377)
    {
      ((void (*)(std::__shared_weak_count *))v375->__on_zero_shared)(v375);
      std::__shared_weak_count::__release_weak(v375);
    }
  }
  v378 = v1658;
  if (v1658)
  {
    v379 = (unint64_t *)&v1658->__shared_owners_;
    do
      v380 = __ldaxr(v379);
    while (__stlxr(v380 - 1, v379));
    if (!v380)
    {
      ((void (*)(std::__shared_weak_count *))v378->__on_zero_shared)(v378);
      std::__shared_weak_count::__release_weak(v378);
    }
  }
  v1653 = qword_102312AB0;
  v1654 = *(std::__shared_weak_count **)algn_102312AB8;
  if (*(_QWORD *)algn_102312AB8)
  {
    v381 = (unint64_t *)(*(_QWORD *)algn_102312AB8 + 8);
    do
      v382 = __ldxr(v381);
    while (__stxr(v382 + 1, v381));
  }
  v1651 = qword_102313450;
  v1652 = *(std::__shared_weak_count **)algn_102313458;
  if (*(_QWORD *)algn_102313458)
  {
    v383 = (unint64_t *)(*(_QWORD *)algn_102313458 + 8);
    do
      v384 = __ldxr(v383);
    while (__stxr(v384 + 1, v383));
  }
  sub_100E852E4(&qword_10230D8F8, &v1653, &v1651);
  v385 = v1652;
  if (v1652)
  {
    v386 = (unint64_t *)&v1652->__shared_owners_;
    do
      v387 = __ldaxr(v386);
    while (__stlxr(v387 - 1, v386));
    if (!v387)
    {
      ((void (*)(std::__shared_weak_count *))v385->__on_zero_shared)(v385);
      std::__shared_weak_count::__release_weak(v385);
    }
  }
  v388 = v1654;
  if (v1654)
  {
    v389 = (unint64_t *)&v1654->__shared_owners_;
    do
      v390 = __ldaxr(v389);
    while (__stlxr(v390 - 1, v389));
    if (!v390)
    {
      ((void (*)(std::__shared_weak_count *))v388->__on_zero_shared)(v388);
      std::__shared_weak_count::__release_weak(v388);
    }
  }
  v1649 = qword_102312AD0;
  v1650 = *(std::__shared_weak_count **)algn_102312AD8;
  if (*(_QWORD *)algn_102312AD8)
  {
    v391 = (unint64_t *)(*(_QWORD *)algn_102312AD8 + 8);
    do
      v392 = __ldxr(v391);
    while (__stxr(v392 + 1, v391));
  }
  v1647 = qword_102313490;
  v1648 = *(std::__shared_weak_count **)algn_102313498;
  if (*(_QWORD *)algn_102313498)
  {
    v393 = (unint64_t *)(*(_QWORD *)algn_102313498 + 8);
    do
      v394 = __ldxr(v393);
    while (__stxr(v394 + 1, v393));
  }
  sub_100E852E4(&qword_10230D8F8, &v1649, &v1647);
  v395 = v1648;
  if (v1648)
  {
    v396 = (unint64_t *)&v1648->__shared_owners_;
    do
      v397 = __ldaxr(v396);
    while (__stlxr(v397 - 1, v396));
    if (!v397)
    {
      ((void (*)(std::__shared_weak_count *))v395->__on_zero_shared)(v395);
      std::__shared_weak_count::__release_weak(v395);
    }
  }
  v398 = v1650;
  if (v1650)
  {
    v399 = (unint64_t *)&v1650->__shared_owners_;
    do
      v400 = __ldaxr(v399);
    while (__stlxr(v400 - 1, v399));
    if (!v400)
    {
      ((void (*)(std::__shared_weak_count *))v398->__on_zero_shared)(v398);
      std::__shared_weak_count::__release_weak(v398);
    }
  }
  v1645 = qword_102312AE0;
  v1646 = *(std::__shared_weak_count **)algn_102312AE8;
  if (*(_QWORD *)algn_102312AE8)
  {
    v401 = (unint64_t *)(*(_QWORD *)algn_102312AE8 + 8);
    do
      v402 = __ldxr(v401);
    while (__stxr(v402 + 1, v401));
  }
  v1643 = qword_1023134A0;
  v1644 = *(std::__shared_weak_count **)algn_1023134A8;
  if (*(_QWORD *)algn_1023134A8)
  {
    v403 = (unint64_t *)(*(_QWORD *)algn_1023134A8 + 8);
    do
      v404 = __ldxr(v403);
    while (__stxr(v404 + 1, v403));
  }
  sub_100E852E4(&qword_10230D8F8, &v1645, &v1643);
  v405 = v1644;
  if (v1644)
  {
    v406 = (unint64_t *)&v1644->__shared_owners_;
    do
      v407 = __ldaxr(v406);
    while (__stlxr(v407 - 1, v406));
    if (!v407)
    {
      ((void (*)(std::__shared_weak_count *))v405->__on_zero_shared)(v405);
      std::__shared_weak_count::__release_weak(v405);
    }
  }
  v408 = v1646;
  if (v1646)
  {
    v409 = (unint64_t *)&v1646->__shared_owners_;
    do
      v410 = __ldaxr(v409);
    while (__stlxr(v410 - 1, v409));
    if (!v410)
    {
      ((void (*)(std::__shared_weak_count *))v408->__on_zero_shared)(v408);
      std::__shared_weak_count::__release_weak(v408);
    }
  }
  v1641 = qword_102312AF0;
  v1642 = *(std::__shared_weak_count **)algn_102312AF8;
  if (*(_QWORD *)algn_102312AF8)
  {
    v411 = (unint64_t *)(*(_QWORD *)algn_102312AF8 + 8);
    do
      v412 = __ldxr(v411);
    while (__stxr(v412 + 1, v411));
  }
  v1639 = qword_1023134B0;
  v1640 = *(std::__shared_weak_count **)algn_1023134B8;
  if (*(_QWORD *)algn_1023134B8)
  {
    v413 = (unint64_t *)(*(_QWORD *)algn_1023134B8 + 8);
    do
      v414 = __ldxr(v413);
    while (__stxr(v414 + 1, v413));
  }
  sub_100E852E4(&qword_10230D8F8, &v1641, &v1639);
  v415 = v1640;
  if (v1640)
  {
    v416 = (unint64_t *)&v1640->__shared_owners_;
    do
      v417 = __ldaxr(v416);
    while (__stlxr(v417 - 1, v416));
    if (!v417)
    {
      ((void (*)(std::__shared_weak_count *))v415->__on_zero_shared)(v415);
      std::__shared_weak_count::__release_weak(v415);
    }
  }
  v418 = v1642;
  if (v1642)
  {
    v419 = (unint64_t *)&v1642->__shared_owners_;
    do
      v420 = __ldaxr(v419);
    while (__stlxr(v420 - 1, v419));
    if (!v420)
    {
      ((void (*)(std::__shared_weak_count *))v418->__on_zero_shared)(v418);
      std::__shared_weak_count::__release_weak(v418);
    }
  }
  v1637 = qword_102312B10;
  v1638 = *(std::__shared_weak_count **)algn_102312B18;
  if (*(_QWORD *)algn_102312B18)
  {
    v421 = (unint64_t *)(*(_QWORD *)algn_102312B18 + 8);
    do
      v422 = __ldxr(v421);
    while (__stxr(v422 + 1, v421));
  }
  v1635 = qword_102313520;
  v1636 = *(std::__shared_weak_count **)algn_102313528;
  if (*(_QWORD *)algn_102313528)
  {
    v423 = (unint64_t *)(*(_QWORD *)algn_102313528 + 8);
    do
      v424 = __ldxr(v423);
    while (__stxr(v424 + 1, v423));
  }
  sub_100E852E4(&qword_10230D8F8, &v1637, &v1635);
  v425 = v1636;
  if (v1636)
  {
    v426 = (unint64_t *)&v1636->__shared_owners_;
    do
      v427 = __ldaxr(v426);
    while (__stlxr(v427 - 1, v426));
    if (!v427)
    {
      ((void (*)(std::__shared_weak_count *))v425->__on_zero_shared)(v425);
      std::__shared_weak_count::__release_weak(v425);
    }
  }
  v428 = v1638;
  if (v1638)
  {
    v429 = (unint64_t *)&v1638->__shared_owners_;
    do
      v430 = __ldaxr(v429);
    while (__stlxr(v430 - 1, v429));
    if (!v430)
    {
      ((void (*)(std::__shared_weak_count *))v428->__on_zero_shared)(v428);
      std::__shared_weak_count::__release_weak(v428);
    }
  }
  v1633 = qword_102312B20;
  v1634 = *(std::__shared_weak_count **)algn_102312B28;
  if (*(_QWORD *)algn_102312B28)
  {
    v431 = (unint64_t *)(*(_QWORD *)algn_102312B28 + 8);
    do
      v432 = __ldxr(v431);
    while (__stxr(v432 + 1, v431));
  }
  v1631 = qword_102313530;
  v1632 = *(std::__shared_weak_count **)algn_102313538;
  if (*(_QWORD *)algn_102313538)
  {
    v433 = (unint64_t *)(*(_QWORD *)algn_102313538 + 8);
    do
      v434 = __ldxr(v433);
    while (__stxr(v434 + 1, v433));
  }
  sub_100E852E4(&qword_10230D8F8, &v1633, &v1631);
  v435 = v1632;
  if (v1632)
  {
    v436 = (unint64_t *)&v1632->__shared_owners_;
    do
      v437 = __ldaxr(v436);
    while (__stlxr(v437 - 1, v436));
    if (!v437)
    {
      ((void (*)(std::__shared_weak_count *))v435->__on_zero_shared)(v435);
      std::__shared_weak_count::__release_weak(v435);
    }
  }
  v438 = v1634;
  if (v1634)
  {
    v439 = (unint64_t *)&v1634->__shared_owners_;
    do
      v440 = __ldaxr(v439);
    while (__stlxr(v440 - 1, v439));
    if (!v440)
    {
      ((void (*)(std::__shared_weak_count *))v438->__on_zero_shared)(v438);
      std::__shared_weak_count::__release_weak(v438);
    }
  }
  v1629 = qword_102312B30;
  v1630 = *(std::__shared_weak_count **)algn_102312B38;
  if (*(_QWORD *)algn_102312B38)
  {
    v441 = (unint64_t *)(*(_QWORD *)algn_102312B38 + 8);
    do
      v442 = __ldxr(v441);
    while (__stxr(v442 + 1, v441));
  }
  v1627 = qword_102313540;
  v1628 = *(std::__shared_weak_count **)algn_102313548;
  if (*(_QWORD *)algn_102313548)
  {
    v443 = (unint64_t *)(*(_QWORD *)algn_102313548 + 8);
    do
      v444 = __ldxr(v443);
    while (__stxr(v444 + 1, v443));
  }
  sub_100E852E4(&qword_10230D8F8, &v1629, &v1627);
  v445 = v1628;
  if (v1628)
  {
    v446 = (unint64_t *)&v1628->__shared_owners_;
    do
      v447 = __ldaxr(v446);
    while (__stlxr(v447 - 1, v446));
    if (!v447)
    {
      ((void (*)(std::__shared_weak_count *))v445->__on_zero_shared)(v445);
      std::__shared_weak_count::__release_weak(v445);
    }
  }
  v448 = v1630;
  if (v1630)
  {
    v449 = (unint64_t *)&v1630->__shared_owners_;
    do
      v450 = __ldaxr(v449);
    while (__stlxr(v450 - 1, v449));
    if (!v450)
    {
      ((void (*)(std::__shared_weak_count *))v448->__on_zero_shared)(v448);
      std::__shared_weak_count::__release_weak(v448);
    }
  }
  v1625 = qword_102312B40;
  v1626 = *(std::__shared_weak_count **)algn_102312B48;
  if (*(_QWORD *)algn_102312B48)
  {
    v451 = (unint64_t *)(*(_QWORD *)algn_102312B48 + 8);
    do
      v452 = __ldxr(v451);
    while (__stxr(v452 + 1, v451));
  }
  v1623 = qword_102313550;
  v1624 = *(std::__shared_weak_count **)algn_102313558;
  if (*(_QWORD *)algn_102313558)
  {
    v453 = (unint64_t *)(*(_QWORD *)algn_102313558 + 8);
    do
      v454 = __ldxr(v453);
    while (__stxr(v454 + 1, v453));
  }
  sub_100E852E4(&qword_10230D8F8, &v1625, &v1623);
  v455 = v1624;
  if (v1624)
  {
    v456 = (unint64_t *)&v1624->__shared_owners_;
    do
      v457 = __ldaxr(v456);
    while (__stlxr(v457 - 1, v456));
    if (!v457)
    {
      ((void (*)(std::__shared_weak_count *))v455->__on_zero_shared)(v455);
      std::__shared_weak_count::__release_weak(v455);
    }
  }
  v458 = v1626;
  if (v1626)
  {
    v459 = (unint64_t *)&v1626->__shared_owners_;
    do
      v460 = __ldaxr(v459);
    while (__stlxr(v460 - 1, v459));
    if (!v460)
    {
      ((void (*)(std::__shared_weak_count *))v458->__on_zero_shared)(v458);
      std::__shared_weak_count::__release_weak(v458);
    }
  }
  v1621 = qword_102312B50;
  v1622 = *(std::__shared_weak_count **)algn_102312B58;
  if (*(_QWORD *)algn_102312B58)
  {
    v461 = (unint64_t *)(*(_QWORD *)algn_102312B58 + 8);
    do
      v462 = __ldxr(v461);
    while (__stxr(v462 + 1, v461));
  }
  v1619 = qword_102313560;
  v1620 = *(std::__shared_weak_count **)algn_102313568;
  if (*(_QWORD *)algn_102313568)
  {
    v463 = (unint64_t *)(*(_QWORD *)algn_102313568 + 8);
    do
      v464 = __ldxr(v463);
    while (__stxr(v464 + 1, v463));
  }
  sub_100E852E4(&qword_10230D8F8, &v1621, &v1619);
  v465 = v1620;
  if (v1620)
  {
    v466 = (unint64_t *)&v1620->__shared_owners_;
    do
      v467 = __ldaxr(v466);
    while (__stlxr(v467 - 1, v466));
    if (!v467)
    {
      ((void (*)(std::__shared_weak_count *))v465->__on_zero_shared)(v465);
      std::__shared_weak_count::__release_weak(v465);
    }
  }
  v468 = v1622;
  if (v1622)
  {
    v469 = (unint64_t *)&v1622->__shared_owners_;
    do
      v470 = __ldaxr(v469);
    while (__stlxr(v470 - 1, v469));
    if (!v470)
    {
      ((void (*)(std::__shared_weak_count *))v468->__on_zero_shared)(v468);
      std::__shared_weak_count::__release_weak(v468);
    }
  }
  v1617 = qword_102312B60;
  v1618 = *(std::__shared_weak_count **)algn_102312B68;
  if (*(_QWORD *)algn_102312B68)
  {
    v471 = (unint64_t *)(*(_QWORD *)algn_102312B68 + 8);
    do
      v472 = __ldxr(v471);
    while (__stxr(v472 + 1, v471));
  }
  v1615 = qword_102313570;
  v1616 = *(std::__shared_weak_count **)algn_102313578;
  if (*(_QWORD *)algn_102313578)
  {
    v473 = (unint64_t *)(*(_QWORD *)algn_102313578 + 8);
    do
      v474 = __ldxr(v473);
    while (__stxr(v474 + 1, v473));
  }
  sub_100E852E4(&qword_10230D8F8, &v1617, &v1615);
  v475 = v1616;
  if (v1616)
  {
    v476 = (unint64_t *)&v1616->__shared_owners_;
    do
      v477 = __ldaxr(v476);
    while (__stlxr(v477 - 1, v476));
    if (!v477)
    {
      ((void (*)(std::__shared_weak_count *))v475->__on_zero_shared)(v475);
      std::__shared_weak_count::__release_weak(v475);
    }
  }
  v478 = v1618;
  if (v1618)
  {
    v479 = (unint64_t *)&v1618->__shared_owners_;
    do
      v480 = __ldaxr(v479);
    while (__stlxr(v480 - 1, v479));
    if (!v480)
    {
      ((void (*)(std::__shared_weak_count *))v478->__on_zero_shared)(v478);
      std::__shared_weak_count::__release_weak(v478);
    }
  }
  v1613 = qword_102312B70;
  v1614 = *(std::__shared_weak_count **)algn_102312B78;
  if (*(_QWORD *)algn_102312B78)
  {
    v481 = (unint64_t *)(*(_QWORD *)algn_102312B78 + 8);
    do
      v482 = __ldxr(v481);
    while (__stxr(v482 + 1, v481));
  }
  v1611 = qword_102313580;
  v1612 = *(std::__shared_weak_count **)algn_102313588;
  if (*(_QWORD *)algn_102313588)
  {
    v483 = (unint64_t *)(*(_QWORD *)algn_102313588 + 8);
    do
      v484 = __ldxr(v483);
    while (__stxr(v484 + 1, v483));
  }
  sub_100E852E4(&qword_10230D8F8, &v1613, &v1611);
  v485 = v1612;
  if (v1612)
  {
    v486 = (unint64_t *)&v1612->__shared_owners_;
    do
      v487 = __ldaxr(v486);
    while (__stlxr(v487 - 1, v486));
    if (!v487)
    {
      ((void (*)(std::__shared_weak_count *))v485->__on_zero_shared)(v485);
      std::__shared_weak_count::__release_weak(v485);
    }
  }
  v488 = v1614;
  if (v1614)
  {
    v489 = (unint64_t *)&v1614->__shared_owners_;
    do
      v490 = __ldaxr(v489);
    while (__stlxr(v490 - 1, v489));
    if (!v490)
    {
      ((void (*)(std::__shared_weak_count *))v488->__on_zero_shared)(v488);
      std::__shared_weak_count::__release_weak(v488);
    }
  }
  v1609 = qword_102312B80;
  v1610 = *(std::__shared_weak_count **)algn_102312B88;
  if (*(_QWORD *)algn_102312B88)
  {
    v491 = (unint64_t *)(*(_QWORD *)algn_102312B88 + 8);
    do
      v492 = __ldxr(v491);
    while (__stxr(v492 + 1, v491));
  }
  v1607 = qword_102313590;
  v1608 = *(std::__shared_weak_count **)algn_102313598;
  if (*(_QWORD *)algn_102313598)
  {
    v493 = (unint64_t *)(*(_QWORD *)algn_102313598 + 8);
    do
      v494 = __ldxr(v493);
    while (__stxr(v494 + 1, v493));
  }
  sub_100E852E4(&qword_10230D8F8, &v1609, &v1607);
  v495 = v1608;
  if (v1608)
  {
    v496 = (unint64_t *)&v1608->__shared_owners_;
    do
      v497 = __ldaxr(v496);
    while (__stlxr(v497 - 1, v496));
    if (!v497)
    {
      ((void (*)(std::__shared_weak_count *))v495->__on_zero_shared)(v495);
      std::__shared_weak_count::__release_weak(v495);
    }
  }
  v498 = v1610;
  if (v1610)
  {
    v499 = (unint64_t *)&v1610->__shared_owners_;
    do
      v500 = __ldaxr(v499);
    while (__stlxr(v500 - 1, v499));
    if (!v500)
    {
      ((void (*)(std::__shared_weak_count *))v498->__on_zero_shared)(v498);
      std::__shared_weak_count::__release_weak(v498);
    }
  }
  v1605 = qword_102312B90;
  v1606 = *(std::__shared_weak_count **)algn_102312B98;
  if (*(_QWORD *)algn_102312B98)
  {
    v501 = (unint64_t *)(*(_QWORD *)algn_102312B98 + 8);
    do
      v502 = __ldxr(v501);
    while (__stxr(v502 + 1, v501));
  }
  v1603 = qword_1023135A0;
  v1604 = *(std::__shared_weak_count **)algn_1023135A8;
  if (*(_QWORD *)algn_1023135A8)
  {
    v503 = (unint64_t *)(*(_QWORD *)algn_1023135A8 + 8);
    do
      v504 = __ldxr(v503);
    while (__stxr(v504 + 1, v503));
  }
  sub_100E852E4(&qword_10230D8F8, &v1605, &v1603);
  v505 = v1604;
  if (v1604)
  {
    v506 = (unint64_t *)&v1604->__shared_owners_;
    do
      v507 = __ldaxr(v506);
    while (__stlxr(v507 - 1, v506));
    if (!v507)
    {
      ((void (*)(std::__shared_weak_count *))v505->__on_zero_shared)(v505);
      std::__shared_weak_count::__release_weak(v505);
    }
  }
  v508 = v1606;
  if (v1606)
  {
    v509 = (unint64_t *)&v1606->__shared_owners_;
    do
      v510 = __ldaxr(v509);
    while (__stlxr(v510 - 1, v509));
    if (!v510)
    {
      ((void (*)(std::__shared_weak_count *))v508->__on_zero_shared)(v508);
      std::__shared_weak_count::__release_weak(v508);
    }
  }
  v1601 = qword_102312BA0;
  v1602 = *(std::__shared_weak_count **)algn_102312BA8;
  if (*(_QWORD *)algn_102312BA8)
  {
    v511 = (unint64_t *)(*(_QWORD *)algn_102312BA8 + 8);
    do
      v512 = __ldxr(v511);
    while (__stxr(v512 + 1, v511));
  }
  v1599 = qword_1023135B0;
  v1600 = *(std::__shared_weak_count **)algn_1023135B8;
  if (*(_QWORD *)algn_1023135B8)
  {
    v513 = (unint64_t *)(*(_QWORD *)algn_1023135B8 + 8);
    do
      v514 = __ldxr(v513);
    while (__stxr(v514 + 1, v513));
  }
  sub_100E852E4(&qword_10230D8F8, &v1601, &v1599);
  v515 = v1600;
  if (v1600)
  {
    v516 = (unint64_t *)&v1600->__shared_owners_;
    do
      v517 = __ldaxr(v516);
    while (__stlxr(v517 - 1, v516));
    if (!v517)
    {
      ((void (*)(std::__shared_weak_count *))v515->__on_zero_shared)(v515);
      std::__shared_weak_count::__release_weak(v515);
    }
  }
  v518 = v1602;
  if (v1602)
  {
    v519 = (unint64_t *)&v1602->__shared_owners_;
    do
      v520 = __ldaxr(v519);
    while (__stlxr(v520 - 1, v519));
    if (!v520)
    {
      ((void (*)(std::__shared_weak_count *))v518->__on_zero_shared)(v518);
      std::__shared_weak_count::__release_weak(v518);
    }
  }
  v1597 = qword_102312BB0;
  v1598 = *(std::__shared_weak_count **)algn_102312BB8;
  if (*(_QWORD *)algn_102312BB8)
  {
    v521 = (unint64_t *)(*(_QWORD *)algn_102312BB8 + 8);
    do
      v522 = __ldxr(v521);
    while (__stxr(v522 + 1, v521));
  }
  v1595 = qword_1023135C0;
  v1596 = *(std::__shared_weak_count **)algn_1023135C8;
  if (*(_QWORD *)algn_1023135C8)
  {
    v523 = (unint64_t *)(*(_QWORD *)algn_1023135C8 + 8);
    do
      v524 = __ldxr(v523);
    while (__stxr(v524 + 1, v523));
  }
  sub_100E852E4(&qword_10230D8F8, &v1597, &v1595);
  v525 = v1596;
  if (v1596)
  {
    v526 = (unint64_t *)&v1596->__shared_owners_;
    do
      v527 = __ldaxr(v526);
    while (__stlxr(v527 - 1, v526));
    if (!v527)
    {
      ((void (*)(std::__shared_weak_count *))v525->__on_zero_shared)(v525);
      std::__shared_weak_count::__release_weak(v525);
    }
  }
  v528 = v1598;
  if (v1598)
  {
    v529 = (unint64_t *)&v1598->__shared_owners_;
    do
      v530 = __ldaxr(v529);
    while (__stlxr(v530 - 1, v529));
    if (!v530)
    {
      ((void (*)(std::__shared_weak_count *))v528->__on_zero_shared)(v528);
      std::__shared_weak_count::__release_weak(v528);
    }
  }
  v1593 = qword_102312BC0;
  v1594 = *(std::__shared_weak_count **)algn_102312BC8;
  if (*(_QWORD *)algn_102312BC8)
  {
    v531 = (unint64_t *)(*(_QWORD *)algn_102312BC8 + 8);
    do
      v532 = __ldxr(v531);
    while (__stxr(v532 + 1, v531));
  }
  v1591 = qword_1023135D0;
  v1592 = *(std::__shared_weak_count **)algn_1023135D8;
  if (*(_QWORD *)algn_1023135D8)
  {
    v533 = (unint64_t *)(*(_QWORD *)algn_1023135D8 + 8);
    do
      v534 = __ldxr(v533);
    while (__stxr(v534 + 1, v533));
  }
  sub_100E852E4(&qword_10230D8F8, &v1593, &v1591);
  v535 = v1592;
  if (v1592)
  {
    v536 = (unint64_t *)&v1592->__shared_owners_;
    do
      v537 = __ldaxr(v536);
    while (__stlxr(v537 - 1, v536));
    if (!v537)
    {
      ((void (*)(std::__shared_weak_count *))v535->__on_zero_shared)(v535);
      std::__shared_weak_count::__release_weak(v535);
    }
  }
  v538 = v1594;
  if (v1594)
  {
    v539 = (unint64_t *)&v1594->__shared_owners_;
    do
      v540 = __ldaxr(v539);
    while (__stlxr(v540 - 1, v539));
    if (!v540)
    {
      ((void (*)(std::__shared_weak_count *))v538->__on_zero_shared)(v538);
      std::__shared_weak_count::__release_weak(v538);
    }
  }
  v1589 = qword_102312BD0;
  v1590 = *(std::__shared_weak_count **)algn_102312BD8;
  if (*(_QWORD *)algn_102312BD8)
  {
    v541 = (unint64_t *)(*(_QWORD *)algn_102312BD8 + 8);
    do
      v542 = __ldxr(v541);
    while (__stxr(v542 + 1, v541));
  }
  v1587 = qword_1023135E0;
  v1588 = *(std::__shared_weak_count **)algn_1023135E8;
  if (*(_QWORD *)algn_1023135E8)
  {
    v543 = (unint64_t *)(*(_QWORD *)algn_1023135E8 + 8);
    do
      v544 = __ldxr(v543);
    while (__stxr(v544 + 1, v543));
  }
  sub_100E852E4(&qword_10230D8F8, &v1589, &v1587);
  v545 = v1588;
  if (v1588)
  {
    v546 = (unint64_t *)&v1588->__shared_owners_;
    do
      v547 = __ldaxr(v546);
    while (__stlxr(v547 - 1, v546));
    if (!v547)
    {
      ((void (*)(std::__shared_weak_count *))v545->__on_zero_shared)(v545);
      std::__shared_weak_count::__release_weak(v545);
    }
  }
  v548 = v1590;
  if (v1590)
  {
    v549 = (unint64_t *)&v1590->__shared_owners_;
    do
      v550 = __ldaxr(v549);
    while (__stlxr(v550 - 1, v549));
    if (!v550)
    {
      ((void (*)(std::__shared_weak_count *))v548->__on_zero_shared)(v548);
      std::__shared_weak_count::__release_weak(v548);
    }
  }
  v1585 = qword_102312BF0;
  v1586 = *(std::__shared_weak_count **)algn_102312BF8;
  if (*(_QWORD *)algn_102312BF8)
  {
    v551 = (unint64_t *)(*(_QWORD *)algn_102312BF8 + 8);
    do
      v552 = __ldxr(v551);
    while (__stxr(v552 + 1, v551));
  }
  v1583 = qword_102313600;
  v1584 = *(std::__shared_weak_count **)algn_102313608;
  if (*(_QWORD *)algn_102313608)
  {
    v553 = (unint64_t *)(*(_QWORD *)algn_102313608 + 8);
    do
      v554 = __ldxr(v553);
    while (__stxr(v554 + 1, v553));
  }
  sub_100E852E4(&qword_10230D8F8, &v1585, &v1583);
  v555 = v1584;
  if (v1584)
  {
    v556 = (unint64_t *)&v1584->__shared_owners_;
    do
      v557 = __ldaxr(v556);
    while (__stlxr(v557 - 1, v556));
    if (!v557)
    {
      ((void (*)(std::__shared_weak_count *))v555->__on_zero_shared)(v555);
      std::__shared_weak_count::__release_weak(v555);
    }
  }
  v558 = v1586;
  if (v1586)
  {
    v559 = (unint64_t *)&v1586->__shared_owners_;
    do
      v560 = __ldaxr(v559);
    while (__stlxr(v560 - 1, v559));
    if (!v560)
    {
      ((void (*)(std::__shared_weak_count *))v558->__on_zero_shared)(v558);
      std::__shared_weak_count::__release_weak(v558);
    }
  }
  v1581 = qword_102312C00;
  v1582 = *(std::__shared_weak_count **)algn_102312C08;
  if (*(_QWORD *)algn_102312C08)
  {
    v561 = (unint64_t *)(*(_QWORD *)algn_102312C08 + 8);
    do
      v562 = __ldxr(v561);
    while (__stxr(v562 + 1, v561));
  }
  v1579 = qword_102313610;
  v1580 = *(std::__shared_weak_count **)algn_102313618;
  if (*(_QWORD *)algn_102313618)
  {
    v563 = (unint64_t *)(*(_QWORD *)algn_102313618 + 8);
    do
      v564 = __ldxr(v563);
    while (__stxr(v564 + 1, v563));
  }
  sub_100E852E4(&qword_10230D8F8, &v1581, &v1579);
  v565 = v1580;
  if (v1580)
  {
    v566 = (unint64_t *)&v1580->__shared_owners_;
    do
      v567 = __ldaxr(v566);
    while (__stlxr(v567 - 1, v566));
    if (!v567)
    {
      ((void (*)(std::__shared_weak_count *))v565->__on_zero_shared)(v565);
      std::__shared_weak_count::__release_weak(v565);
    }
  }
  v568 = v1582;
  if (v1582)
  {
    v569 = (unint64_t *)&v1582->__shared_owners_;
    do
      v570 = __ldaxr(v569);
    while (__stlxr(v570 - 1, v569));
    if (!v570)
    {
      ((void (*)(std::__shared_weak_count *))v568->__on_zero_shared)(v568);
      std::__shared_weak_count::__release_weak(v568);
    }
  }
  v1577 = qword_102312C10;
  v1578 = *(std::__shared_weak_count **)algn_102312C18;
  if (*(_QWORD *)algn_102312C18)
  {
    v571 = (unint64_t *)(*(_QWORD *)algn_102312C18 + 8);
    do
      v572 = __ldxr(v571);
    while (__stxr(v572 + 1, v571));
  }
  v1575 = qword_102313620;
  v1576 = *(std::__shared_weak_count **)algn_102313628;
  if (*(_QWORD *)algn_102313628)
  {
    v573 = (unint64_t *)(*(_QWORD *)algn_102313628 + 8);
    do
      v574 = __ldxr(v573);
    while (__stxr(v574 + 1, v573));
  }
  sub_100E852E4(&qword_10230D8F8, &v1577, &v1575);
  v575 = v1576;
  if (v1576)
  {
    v576 = (unint64_t *)&v1576->__shared_owners_;
    do
      v577 = __ldaxr(v576);
    while (__stlxr(v577 - 1, v576));
    if (!v577)
    {
      ((void (*)(std::__shared_weak_count *))v575->__on_zero_shared)(v575);
      std::__shared_weak_count::__release_weak(v575);
    }
  }
  v578 = v1578;
  if (v1578)
  {
    v579 = (unint64_t *)&v1578->__shared_owners_;
    do
      v580 = __ldaxr(v579);
    while (__stlxr(v580 - 1, v579));
    if (!v580)
    {
      ((void (*)(std::__shared_weak_count *))v578->__on_zero_shared)(v578);
      std::__shared_weak_count::__release_weak(v578);
    }
  }
  v1573 = qword_102312C20;
  v1574 = *(std::__shared_weak_count **)algn_102312C28;
  if (*(_QWORD *)algn_102312C28)
  {
    v581 = (unint64_t *)(*(_QWORD *)algn_102312C28 + 8);
    do
      v582 = __ldxr(v581);
    while (__stxr(v582 + 1, v581));
  }
  v1571 = qword_102313630;
  v1572 = *(std::__shared_weak_count **)algn_102313638;
  if (*(_QWORD *)algn_102313638)
  {
    v583 = (unint64_t *)(*(_QWORD *)algn_102313638 + 8);
    do
      v584 = __ldxr(v583);
    while (__stxr(v584 + 1, v583));
  }
  sub_100E852E4(&qword_10230D8F8, &v1573, &v1571);
  v585 = v1572;
  if (v1572)
  {
    v586 = (unint64_t *)&v1572->__shared_owners_;
    do
      v587 = __ldaxr(v586);
    while (__stlxr(v587 - 1, v586));
    if (!v587)
    {
      ((void (*)(std::__shared_weak_count *))v585->__on_zero_shared)(v585);
      std::__shared_weak_count::__release_weak(v585);
    }
  }
  v588 = v1574;
  if (v1574)
  {
    v589 = (unint64_t *)&v1574->__shared_owners_;
    do
      v590 = __ldaxr(v589);
    while (__stlxr(v590 - 1, v589));
    if (!v590)
    {
      ((void (*)(std::__shared_weak_count *))v588->__on_zero_shared)(v588);
      std::__shared_weak_count::__release_weak(v588);
    }
  }
  v1569 = qword_102312C40;
  v1570 = *(std::__shared_weak_count **)algn_102312C48;
  if (*(_QWORD *)algn_102312C48)
  {
    v591 = (unint64_t *)(*(_QWORD *)algn_102312C48 + 8);
    do
      v592 = __ldxr(v591);
    while (__stxr(v592 + 1, v591));
  }
  v1567 = qword_102313650;
  v1568 = *(std::__shared_weak_count **)algn_102313658;
  if (*(_QWORD *)algn_102313658)
  {
    v593 = (unint64_t *)(*(_QWORD *)algn_102313658 + 8);
    do
      v594 = __ldxr(v593);
    while (__stxr(v594 + 1, v593));
  }
  sub_100E852E4(&qword_10230D8F8, &v1569, &v1567);
  v595 = v1568;
  if (v1568)
  {
    v596 = (unint64_t *)&v1568->__shared_owners_;
    do
      v597 = __ldaxr(v596);
    while (__stlxr(v597 - 1, v596));
    if (!v597)
    {
      ((void (*)(std::__shared_weak_count *))v595->__on_zero_shared)(v595);
      std::__shared_weak_count::__release_weak(v595);
    }
  }
  v598 = v1570;
  if (v1570)
  {
    v599 = (unint64_t *)&v1570->__shared_owners_;
    do
      v600 = __ldaxr(v599);
    while (__stlxr(v600 - 1, v599));
    if (!v600)
    {
      ((void (*)(std::__shared_weak_count *))v598->__on_zero_shared)(v598);
      std::__shared_weak_count::__release_weak(v598);
    }
  }
  v1565 = qword_102312C50;
  v1566 = *(std::__shared_weak_count **)algn_102312C58;
  if (*(_QWORD *)algn_102312C58)
  {
    v601 = (unint64_t *)(*(_QWORD *)algn_102312C58 + 8);
    do
      v602 = __ldxr(v601);
    while (__stxr(v602 + 1, v601));
  }
  v1563 = qword_102313660;
  v1564 = *(std::__shared_weak_count **)algn_102313668;
  if (*(_QWORD *)algn_102313668)
  {
    v603 = (unint64_t *)(*(_QWORD *)algn_102313668 + 8);
    do
      v604 = __ldxr(v603);
    while (__stxr(v604 + 1, v603));
  }
  sub_100E852E4(&qword_10230D8F8, &v1565, &v1563);
  v605 = v1564;
  if (v1564)
  {
    v606 = (unint64_t *)&v1564->__shared_owners_;
    do
      v607 = __ldaxr(v606);
    while (__stlxr(v607 - 1, v606));
    if (!v607)
    {
      ((void (*)(std::__shared_weak_count *))v605->__on_zero_shared)(v605);
      std::__shared_weak_count::__release_weak(v605);
    }
  }
  v608 = v1566;
  if (v1566)
  {
    v609 = (unint64_t *)&v1566->__shared_owners_;
    do
      v610 = __ldaxr(v609);
    while (__stlxr(v610 - 1, v609));
    if (!v610)
    {
      ((void (*)(std::__shared_weak_count *))v608->__on_zero_shared)(v608);
      std::__shared_weak_count::__release_weak(v608);
    }
  }
  v1561 = qword_102312C60;
  v1562 = *(std::__shared_weak_count **)algn_102312C68;
  if (*(_QWORD *)algn_102312C68)
  {
    v611 = (unint64_t *)(*(_QWORD *)algn_102312C68 + 8);
    do
      v612 = __ldxr(v611);
    while (__stxr(v612 + 1, v611));
  }
  v1559 = qword_102313670;
  v1560 = *(std::__shared_weak_count **)algn_102313678;
  if (*(_QWORD *)algn_102313678)
  {
    v613 = (unint64_t *)(*(_QWORD *)algn_102313678 + 8);
    do
      v614 = __ldxr(v613);
    while (__stxr(v614 + 1, v613));
  }
  sub_100E852E4(&qword_10230D8F8, &v1561, &v1559);
  v615 = v1560;
  if (v1560)
  {
    v616 = (unint64_t *)&v1560->__shared_owners_;
    do
      v617 = __ldaxr(v616);
    while (__stlxr(v617 - 1, v616));
    if (!v617)
    {
      ((void (*)(std::__shared_weak_count *))v615->__on_zero_shared)(v615);
      std::__shared_weak_count::__release_weak(v615);
    }
  }
  v618 = v1562;
  if (v1562)
  {
    v619 = (unint64_t *)&v1562->__shared_owners_;
    do
      v620 = __ldaxr(v619);
    while (__stlxr(v620 - 1, v619));
    if (!v620)
    {
      ((void (*)(std::__shared_weak_count *))v618->__on_zero_shared)(v618);
      std::__shared_weak_count::__release_weak(v618);
    }
  }
  v1557 = qword_102312C70;
  v1558 = *(std::__shared_weak_count **)algn_102312C78;
  if (*(_QWORD *)algn_102312C78)
  {
    v621 = (unint64_t *)(*(_QWORD *)algn_102312C78 + 8);
    do
      v622 = __ldxr(v621);
    while (__stxr(v622 + 1, v621));
  }
  v1555 = qword_102313680;
  v1556 = *(std::__shared_weak_count **)algn_102313688;
  if (*(_QWORD *)algn_102313688)
  {
    v623 = (unint64_t *)(*(_QWORD *)algn_102313688 + 8);
    do
      v624 = __ldxr(v623);
    while (__stxr(v624 + 1, v623));
  }
  sub_100E852E4(&qword_10230D8F8, &v1557, &v1555);
  v625 = v1556;
  if (v1556)
  {
    v626 = (unint64_t *)&v1556->__shared_owners_;
    do
      v627 = __ldaxr(v626);
    while (__stlxr(v627 - 1, v626));
    if (!v627)
    {
      ((void (*)(std::__shared_weak_count *))v625->__on_zero_shared)(v625);
      std::__shared_weak_count::__release_weak(v625);
    }
  }
  v628 = v1558;
  if (v1558)
  {
    v629 = (unint64_t *)&v1558->__shared_owners_;
    do
      v630 = __ldaxr(v629);
    while (__stlxr(v630 - 1, v629));
    if (!v630)
    {
      ((void (*)(std::__shared_weak_count *))v628->__on_zero_shared)(v628);
      std::__shared_weak_count::__release_weak(v628);
    }
  }
  v1553 = qword_102312C80;
  v1554 = *(std::__shared_weak_count **)algn_102312C88;
  if (*(_QWORD *)algn_102312C88)
  {
    v631 = (unint64_t *)(*(_QWORD *)algn_102312C88 + 8);
    do
      v632 = __ldxr(v631);
    while (__stxr(v632 + 1, v631));
  }
  v1551 = qword_102313690;
  v1552 = *(std::__shared_weak_count **)algn_102313698;
  if (*(_QWORD *)algn_102313698)
  {
    v633 = (unint64_t *)(*(_QWORD *)algn_102313698 + 8);
    do
      v634 = __ldxr(v633);
    while (__stxr(v634 + 1, v633));
  }
  sub_100E852E4(&qword_10230D8F8, &v1553, &v1551);
  v635 = v1552;
  if (v1552)
  {
    v636 = (unint64_t *)&v1552->__shared_owners_;
    do
      v637 = __ldaxr(v636);
    while (__stlxr(v637 - 1, v636));
    if (!v637)
    {
      ((void (*)(std::__shared_weak_count *))v635->__on_zero_shared)(v635);
      std::__shared_weak_count::__release_weak(v635);
    }
  }
  v638 = v1554;
  if (v1554)
  {
    v639 = (unint64_t *)&v1554->__shared_owners_;
    do
      v640 = __ldaxr(v639);
    while (__stlxr(v640 - 1, v639));
    if (!v640)
    {
      ((void (*)(std::__shared_weak_count *))v638->__on_zero_shared)(v638);
      std::__shared_weak_count::__release_weak(v638);
    }
  }
  v1549 = qword_102312CA0;
  v1550 = *(std::__shared_weak_count **)algn_102312CA8;
  if (*(_QWORD *)algn_102312CA8)
  {
    v641 = (unint64_t *)(*(_QWORD *)algn_102312CA8 + 8);
    do
      v642 = __ldxr(v641);
    while (__stxr(v642 + 1, v641));
  }
  v1547 = qword_1023136B0;
  v1548 = *(std::__shared_weak_count **)algn_1023136B8;
  if (*(_QWORD *)algn_1023136B8)
  {
    v643 = (unint64_t *)(*(_QWORD *)algn_1023136B8 + 8);
    do
      v644 = __ldxr(v643);
    while (__stxr(v644 + 1, v643));
  }
  sub_100E852E4(&qword_10230D8F8, &v1549, &v1547);
  v645 = v1548;
  if (v1548)
  {
    v646 = (unint64_t *)&v1548->__shared_owners_;
    do
      v647 = __ldaxr(v646);
    while (__stlxr(v647 - 1, v646));
    if (!v647)
    {
      ((void (*)(std::__shared_weak_count *))v645->__on_zero_shared)(v645);
      std::__shared_weak_count::__release_weak(v645);
    }
  }
  v648 = v1550;
  if (v1550)
  {
    v649 = (unint64_t *)&v1550->__shared_owners_;
    do
      v650 = __ldaxr(v649);
    while (__stlxr(v650 - 1, v649));
    if (!v650)
    {
      ((void (*)(std::__shared_weak_count *))v648->__on_zero_shared)(v648);
      std::__shared_weak_count::__release_weak(v648);
    }
  }
  v1545 = qword_102312CB0;
  v1546 = *(std::__shared_weak_count **)algn_102312CB8;
  if (*(_QWORD *)algn_102312CB8)
  {
    v651 = (unint64_t *)(*(_QWORD *)algn_102312CB8 + 8);
    do
      v652 = __ldxr(v651);
    while (__stxr(v652 + 1, v651));
  }
  v1543 = qword_1023136C0;
  v1544 = *(std::__shared_weak_count **)algn_1023136C8;
  if (*(_QWORD *)algn_1023136C8)
  {
    v653 = (unint64_t *)(*(_QWORD *)algn_1023136C8 + 8);
    do
      v654 = __ldxr(v653);
    while (__stxr(v654 + 1, v653));
  }
  sub_100E852E4(&qword_10230D8F8, &v1545, &v1543);
  v655 = v1544;
  if (v1544)
  {
    v656 = (unint64_t *)&v1544->__shared_owners_;
    do
      v657 = __ldaxr(v656);
    while (__stlxr(v657 - 1, v656));
    if (!v657)
    {
      ((void (*)(std::__shared_weak_count *))v655->__on_zero_shared)(v655);
      std::__shared_weak_count::__release_weak(v655);
    }
  }
  v658 = v1546;
  if (v1546)
  {
    v659 = (unint64_t *)&v1546->__shared_owners_;
    do
      v660 = __ldaxr(v659);
    while (__stlxr(v660 - 1, v659));
    if (!v660)
    {
      ((void (*)(std::__shared_weak_count *))v658->__on_zero_shared)(v658);
      std::__shared_weak_count::__release_weak(v658);
    }
  }
  v1541 = qword_102312CC0;
  v1542 = *(std::__shared_weak_count **)algn_102312CC8;
  if (*(_QWORD *)algn_102312CC8)
  {
    v661 = (unint64_t *)(*(_QWORD *)algn_102312CC8 + 8);
    do
      v662 = __ldxr(v661);
    while (__stxr(v662 + 1, v661));
  }
  v1539 = qword_1023136D0;
  v1540 = *(std::__shared_weak_count **)algn_1023136D8;
  if (*(_QWORD *)algn_1023136D8)
  {
    v663 = (unint64_t *)(*(_QWORD *)algn_1023136D8 + 8);
    do
      v664 = __ldxr(v663);
    while (__stxr(v664 + 1, v663));
  }
  sub_100E852E4(&qword_10230D8F8, &v1541, &v1539);
  v665 = v1540;
  if (v1540)
  {
    v666 = (unint64_t *)&v1540->__shared_owners_;
    do
      v667 = __ldaxr(v666);
    while (__stlxr(v667 - 1, v666));
    if (!v667)
    {
      ((void (*)(std::__shared_weak_count *))v665->__on_zero_shared)(v665);
      std::__shared_weak_count::__release_weak(v665);
    }
  }
  v668 = v1542;
  if (v1542)
  {
    v669 = (unint64_t *)&v1542->__shared_owners_;
    do
      v670 = __ldaxr(v669);
    while (__stlxr(v670 - 1, v669));
    if (!v670)
    {
      ((void (*)(std::__shared_weak_count *))v668->__on_zero_shared)(v668);
      std::__shared_weak_count::__release_weak(v668);
    }
  }
  v1537 = qword_102312CD0;
  v1538 = *(std::__shared_weak_count **)algn_102312CD8;
  if (*(_QWORD *)algn_102312CD8)
  {
    v671 = (unint64_t *)(*(_QWORD *)algn_102312CD8 + 8);
    do
      v672 = __ldxr(v671);
    while (__stxr(v672 + 1, v671));
  }
  v1535 = qword_1023136E0;
  v1536 = *(std::__shared_weak_count **)algn_1023136E8;
  if (*(_QWORD *)algn_1023136E8)
  {
    v673 = (unint64_t *)(*(_QWORD *)algn_1023136E8 + 8);
    do
      v674 = __ldxr(v673);
    while (__stxr(v674 + 1, v673));
  }
  sub_100E852E4(&qword_10230D8F8, &v1537, &v1535);
  v675 = v1536;
  if (v1536)
  {
    v676 = (unint64_t *)&v1536->__shared_owners_;
    do
      v677 = __ldaxr(v676);
    while (__stlxr(v677 - 1, v676));
    if (!v677)
    {
      ((void (*)(std::__shared_weak_count *))v675->__on_zero_shared)(v675);
      std::__shared_weak_count::__release_weak(v675);
    }
  }
  v678 = v1538;
  if (v1538)
  {
    v679 = (unint64_t *)&v1538->__shared_owners_;
    do
      v680 = __ldaxr(v679);
    while (__stlxr(v680 - 1, v679));
    if (!v680)
    {
      ((void (*)(std::__shared_weak_count *))v678->__on_zero_shared)(v678);
      std::__shared_weak_count::__release_weak(v678);
    }
  }
  v1533 = qword_102312CE0;
  v1534 = *(std::__shared_weak_count **)algn_102312CE8;
  if (*(_QWORD *)algn_102312CE8)
  {
    v681 = (unint64_t *)(*(_QWORD *)algn_102312CE8 + 8);
    do
      v682 = __ldxr(v681);
    while (__stxr(v682 + 1, v681));
  }
  v1531 = qword_1023136F0;
  v1532 = *(std::__shared_weak_count **)algn_1023136F8;
  if (*(_QWORD *)algn_1023136F8)
  {
    v683 = (unint64_t *)(*(_QWORD *)algn_1023136F8 + 8);
    do
      v684 = __ldxr(v683);
    while (__stxr(v684 + 1, v683));
  }
  sub_100E852E4(&qword_10230D8F8, &v1533, &v1531);
  v685 = v1532;
  if (v1532)
  {
    v686 = (unint64_t *)&v1532->__shared_owners_;
    do
      v687 = __ldaxr(v686);
    while (__stlxr(v687 - 1, v686));
    if (!v687)
    {
      ((void (*)(std::__shared_weak_count *))v685->__on_zero_shared)(v685);
      std::__shared_weak_count::__release_weak(v685);
    }
  }
  v688 = v1534;
  if (v1534)
  {
    v689 = (unint64_t *)&v1534->__shared_owners_;
    do
      v690 = __ldaxr(v689);
    while (__stlxr(v690 - 1, v689));
    if (!v690)
    {
      ((void (*)(std::__shared_weak_count *))v688->__on_zero_shared)(v688);
      std::__shared_weak_count::__release_weak(v688);
    }
  }
  v1529 = qword_102312CF0;
  v1530 = *(std::__shared_weak_count **)algn_102312CF8;
  if (*(_QWORD *)algn_102312CF8)
  {
    v691 = (unint64_t *)(*(_QWORD *)algn_102312CF8 + 8);
    do
      v692 = __ldxr(v691);
    while (__stxr(v692 + 1, v691));
  }
  v1527 = qword_102313700;
  v1528 = *(std::__shared_weak_count **)algn_102313708;
  if (*(_QWORD *)algn_102313708)
  {
    v693 = (unint64_t *)(*(_QWORD *)algn_102313708 + 8);
    do
      v694 = __ldxr(v693);
    while (__stxr(v694 + 1, v693));
  }
  sub_100E852E4(&qword_10230D8F8, &v1529, &v1527);
  v695 = v1528;
  if (v1528)
  {
    v696 = (unint64_t *)&v1528->__shared_owners_;
    do
      v697 = __ldaxr(v696);
    while (__stlxr(v697 - 1, v696));
    if (!v697)
    {
      ((void (*)(std::__shared_weak_count *))v695->__on_zero_shared)(v695);
      std::__shared_weak_count::__release_weak(v695);
    }
  }
  v698 = v1530;
  if (v1530)
  {
    v699 = (unint64_t *)&v1530->__shared_owners_;
    do
      v700 = __ldaxr(v699);
    while (__stlxr(v700 - 1, v699));
    if (!v700)
    {
      ((void (*)(std::__shared_weak_count *))v698->__on_zero_shared)(v698);
      std::__shared_weak_count::__release_weak(v698);
    }
  }
  v1525 = qword_102312D10;
  v1526 = *(std::__shared_weak_count **)algn_102312D18;
  if (*(_QWORD *)algn_102312D18)
  {
    v701 = (unint64_t *)(*(_QWORD *)algn_102312D18 + 8);
    do
      v702 = __ldxr(v701);
    while (__stxr(v702 + 1, v701));
  }
  v1523 = qword_102313720;
  v1524 = *(std::__shared_weak_count **)algn_102313728;
  if (*(_QWORD *)algn_102313728)
  {
    v703 = (unint64_t *)(*(_QWORD *)algn_102313728 + 8);
    do
      v704 = __ldxr(v703);
    while (__stxr(v704 + 1, v703));
  }
  sub_100E852E4(&qword_10230D8F8, &v1525, &v1523);
  v705 = v1524;
  if (v1524)
  {
    v706 = (unint64_t *)&v1524->__shared_owners_;
    do
      v707 = __ldaxr(v706);
    while (__stlxr(v707 - 1, v706));
    if (!v707)
    {
      ((void (*)(std::__shared_weak_count *))v705->__on_zero_shared)(v705);
      std::__shared_weak_count::__release_weak(v705);
    }
  }
  v708 = v1526;
  if (v1526)
  {
    v709 = (unint64_t *)&v1526->__shared_owners_;
    do
      v710 = __ldaxr(v709);
    while (__stlxr(v710 - 1, v709));
    if (!v710)
    {
      ((void (*)(std::__shared_weak_count *))v708->__on_zero_shared)(v708);
      std::__shared_weak_count::__release_weak(v708);
    }
  }
  v1521 = qword_102312D30;
  v1522 = *(std::__shared_weak_count **)algn_102312D38;
  if (*(_QWORD *)algn_102312D38)
  {
    v711 = (unint64_t *)(*(_QWORD *)algn_102312D38 + 8);
    do
      v712 = __ldxr(v711);
    while (__stxr(v712 + 1, v711));
  }
  v1519 = qword_102313740;
  v1520 = *(std::__shared_weak_count **)algn_102313748;
  if (*(_QWORD *)algn_102313748)
  {
    v713 = (unint64_t *)(*(_QWORD *)algn_102313748 + 8);
    do
      v714 = __ldxr(v713);
    while (__stxr(v714 + 1, v713));
  }
  sub_100E852E4(&qword_10230D8F8, &v1521, &v1519);
  v715 = v1520;
  if (v1520)
  {
    v716 = (unint64_t *)&v1520->__shared_owners_;
    do
      v717 = __ldaxr(v716);
    while (__stlxr(v717 - 1, v716));
    if (!v717)
    {
      ((void (*)(std::__shared_weak_count *))v715->__on_zero_shared)(v715);
      std::__shared_weak_count::__release_weak(v715);
    }
  }
  v718 = v1522;
  if (v1522)
  {
    v719 = (unint64_t *)&v1522->__shared_owners_;
    do
      v720 = __ldaxr(v719);
    while (__stlxr(v720 - 1, v719));
    if (!v720)
    {
      ((void (*)(std::__shared_weak_count *))v718->__on_zero_shared)(v718);
      std::__shared_weak_count::__release_weak(v718);
    }
  }
  v1517 = qword_102312D40;
  v1518 = *(std::__shared_weak_count **)algn_102312D48;
  if (*(_QWORD *)algn_102312D48)
  {
    v721 = (unint64_t *)(*(_QWORD *)algn_102312D48 + 8);
    do
      v722 = __ldxr(v721);
    while (__stxr(v722 + 1, v721));
  }
  v1515 = qword_102313750;
  v1516 = *(std::__shared_weak_count **)algn_102313758;
  if (*(_QWORD *)algn_102313758)
  {
    v723 = (unint64_t *)(*(_QWORD *)algn_102313758 + 8);
    do
      v724 = __ldxr(v723);
    while (__stxr(v724 + 1, v723));
  }
  sub_100E852E4(&qword_10230D8F8, &v1517, &v1515);
  v725 = v1516;
  if (v1516)
  {
    v726 = (unint64_t *)&v1516->__shared_owners_;
    do
      v727 = __ldaxr(v726);
    while (__stlxr(v727 - 1, v726));
    if (!v727)
    {
      ((void (*)(std::__shared_weak_count *))v725->__on_zero_shared)(v725);
      std::__shared_weak_count::__release_weak(v725);
    }
  }
  v728 = v1518;
  if (v1518)
  {
    v729 = (unint64_t *)&v1518->__shared_owners_;
    do
      v730 = __ldaxr(v729);
    while (__stlxr(v730 - 1, v729));
    if (!v730)
    {
      ((void (*)(std::__shared_weak_count *))v728->__on_zero_shared)(v728);
      std::__shared_weak_count::__release_weak(v728);
    }
  }
  v1513 = qword_102312D50;
  v1514 = *(std::__shared_weak_count **)algn_102312D58;
  if (*(_QWORD *)algn_102312D58)
  {
    v731 = (unint64_t *)(*(_QWORD *)algn_102312D58 + 8);
    do
      v732 = __ldxr(v731);
    while (__stxr(v732 + 1, v731));
  }
  v1511 = qword_102313760;
  v1512 = *(std::__shared_weak_count **)algn_102313768;
  if (*(_QWORD *)algn_102313768)
  {
    v733 = (unint64_t *)(*(_QWORD *)algn_102313768 + 8);
    do
      v734 = __ldxr(v733);
    while (__stxr(v734 + 1, v733));
  }
  sub_100E852E4(&qword_10230D8F8, &v1513, &v1511);
  v735 = v1512;
  if (v1512)
  {
    v736 = (unint64_t *)&v1512->__shared_owners_;
    do
      v737 = __ldaxr(v736);
    while (__stlxr(v737 - 1, v736));
    if (!v737)
    {
      ((void (*)(std::__shared_weak_count *))v735->__on_zero_shared)(v735);
      std::__shared_weak_count::__release_weak(v735);
    }
  }
  v738 = v1514;
  if (v1514)
  {
    v739 = (unint64_t *)&v1514->__shared_owners_;
    do
      v740 = __ldaxr(v739);
    while (__stlxr(v740 - 1, v739));
    if (!v740)
    {
      ((void (*)(std::__shared_weak_count *))v738->__on_zero_shared)(v738);
      std::__shared_weak_count::__release_weak(v738);
    }
  }
  v1509 = qword_102312D60;
  v1510 = *(std::__shared_weak_count **)algn_102312D68;
  if (*(_QWORD *)algn_102312D68)
  {
    v741 = (unint64_t *)(*(_QWORD *)algn_102312D68 + 8);
    do
      v742 = __ldxr(v741);
    while (__stxr(v742 + 1, v741));
  }
  v1507 = qword_102313770;
  v1508 = *(std::__shared_weak_count **)algn_102313778;
  if (*(_QWORD *)algn_102313778)
  {
    v743 = (unint64_t *)(*(_QWORD *)algn_102313778 + 8);
    do
      v744 = __ldxr(v743);
    while (__stxr(v744 + 1, v743));
  }
  sub_100E852E4(&qword_10230D8F8, &v1509, &v1507);
  v745 = v1508;
  if (v1508)
  {
    v746 = (unint64_t *)&v1508->__shared_owners_;
    do
      v747 = __ldaxr(v746);
    while (__stlxr(v747 - 1, v746));
    if (!v747)
    {
      ((void (*)(std::__shared_weak_count *))v745->__on_zero_shared)(v745);
      std::__shared_weak_count::__release_weak(v745);
    }
  }
  v748 = v1510;
  if (v1510)
  {
    v749 = (unint64_t *)&v1510->__shared_owners_;
    do
      v750 = __ldaxr(v749);
    while (__stlxr(v750 - 1, v749));
    if (!v750)
    {
      ((void (*)(std::__shared_weak_count *))v748->__on_zero_shared)(v748);
      std::__shared_weak_count::__release_weak(v748);
    }
  }
  v1505 = qword_102312D70;
  v1506 = *(std::__shared_weak_count **)algn_102312D78;
  if (*(_QWORD *)algn_102312D78)
  {
    v751 = (unint64_t *)(*(_QWORD *)algn_102312D78 + 8);
    do
      v752 = __ldxr(v751);
    while (__stxr(v752 + 1, v751));
  }
  v1503 = qword_102313780;
  v1504 = *(std::__shared_weak_count **)algn_102313788;
  if (*(_QWORD *)algn_102313788)
  {
    v753 = (unint64_t *)(*(_QWORD *)algn_102313788 + 8);
    do
      v754 = __ldxr(v753);
    while (__stxr(v754 + 1, v753));
  }
  sub_100E852E4(&qword_10230D8F8, &v1505, &v1503);
  v755 = v1504;
  if (v1504)
  {
    v756 = (unint64_t *)&v1504->__shared_owners_;
    do
      v757 = __ldaxr(v756);
    while (__stlxr(v757 - 1, v756));
    if (!v757)
    {
      ((void (*)(std::__shared_weak_count *))v755->__on_zero_shared)(v755);
      std::__shared_weak_count::__release_weak(v755);
    }
  }
  v758 = v1506;
  if (v1506)
  {
    v759 = (unint64_t *)&v1506->__shared_owners_;
    do
      v760 = __ldaxr(v759);
    while (__stlxr(v760 - 1, v759));
    if (!v760)
    {
      ((void (*)(std::__shared_weak_count *))v758->__on_zero_shared)(v758);
      std::__shared_weak_count::__release_weak(v758);
    }
  }
  v1501 = qword_102312D80;
  v1502 = *(std::__shared_weak_count **)algn_102312D88;
  if (*(_QWORD *)algn_102312D88)
  {
    v761 = (unint64_t *)(*(_QWORD *)algn_102312D88 + 8);
    do
      v762 = __ldxr(v761);
    while (__stxr(v762 + 1, v761));
  }
  v1499 = qword_102313790;
  v1500 = *(std::__shared_weak_count **)algn_102313798;
  if (*(_QWORD *)algn_102313798)
  {
    v763 = (unint64_t *)(*(_QWORD *)algn_102313798 + 8);
    do
      v764 = __ldxr(v763);
    while (__stxr(v764 + 1, v763));
  }
  sub_100E852E4(&qword_10230D8F8, &v1501, &v1499);
  v765 = v1500;
  if (v1500)
  {
    v766 = (unint64_t *)&v1500->__shared_owners_;
    do
      v767 = __ldaxr(v766);
    while (__stlxr(v767 - 1, v766));
    if (!v767)
    {
      ((void (*)(std::__shared_weak_count *))v765->__on_zero_shared)(v765);
      std::__shared_weak_count::__release_weak(v765);
    }
  }
  v768 = v1502;
  if (v1502)
  {
    v769 = (unint64_t *)&v1502->__shared_owners_;
    do
      v770 = __ldaxr(v769);
    while (__stlxr(v770 - 1, v769));
    if (!v770)
    {
      ((void (*)(std::__shared_weak_count *))v768->__on_zero_shared)(v768);
      std::__shared_weak_count::__release_weak(v768);
    }
  }
  v1497 = qword_102312DA0;
  v1498 = *(std::__shared_weak_count **)algn_102312DA8;
  if (*(_QWORD *)algn_102312DA8)
  {
    v771 = (unint64_t *)(*(_QWORD *)algn_102312DA8 + 8);
    do
      v772 = __ldxr(v771);
    while (__stxr(v772 + 1, v771));
  }
  v1495 = qword_1023137B0;
  v1496 = *(std::__shared_weak_count **)algn_1023137B8;
  if (*(_QWORD *)algn_1023137B8)
  {
    v773 = (unint64_t *)(*(_QWORD *)algn_1023137B8 + 8);
    do
      v774 = __ldxr(v773);
    while (__stxr(v774 + 1, v773));
  }
  sub_100E852E4(&qword_10230D8F8, &v1497, &v1495);
  v775 = v1496;
  if (v1496)
  {
    v776 = (unint64_t *)&v1496->__shared_owners_;
    do
      v777 = __ldaxr(v776);
    while (__stlxr(v777 - 1, v776));
    if (!v777)
    {
      ((void (*)(std::__shared_weak_count *))v775->__on_zero_shared)(v775);
      std::__shared_weak_count::__release_weak(v775);
    }
  }
  v778 = v1498;
  if (v1498)
  {
    v779 = (unint64_t *)&v1498->__shared_owners_;
    do
      v780 = __ldaxr(v779);
    while (__stlxr(v780 - 1, v779));
    if (!v780)
    {
      ((void (*)(std::__shared_weak_count *))v778->__on_zero_shared)(v778);
      std::__shared_weak_count::__release_weak(v778);
    }
  }
  v1493 = qword_102312DB0;
  v1494 = *(std::__shared_weak_count **)algn_102312DB8;
  if (*(_QWORD *)algn_102312DB8)
  {
    v781 = (unint64_t *)(*(_QWORD *)algn_102312DB8 + 8);
    do
      v782 = __ldxr(v781);
    while (__stxr(v782 + 1, v781));
  }
  v1491 = qword_1023137C0;
  v1492 = *(std::__shared_weak_count **)algn_1023137C8;
  if (*(_QWORD *)algn_1023137C8)
  {
    v783 = (unint64_t *)(*(_QWORD *)algn_1023137C8 + 8);
    do
      v784 = __ldxr(v783);
    while (__stxr(v784 + 1, v783));
  }
  sub_100E852E4(&qword_10230D8F8, &v1493, &v1491);
  v785 = v1492;
  if (v1492)
  {
    v786 = (unint64_t *)&v1492->__shared_owners_;
    do
      v787 = __ldaxr(v786);
    while (__stlxr(v787 - 1, v786));
    if (!v787)
    {
      ((void (*)(std::__shared_weak_count *))v785->__on_zero_shared)(v785);
      std::__shared_weak_count::__release_weak(v785);
    }
  }
  v788 = v1494;
  if (v1494)
  {
    v789 = (unint64_t *)&v1494->__shared_owners_;
    do
      v790 = __ldaxr(v789);
    while (__stlxr(v790 - 1, v789));
    if (!v790)
    {
      ((void (*)(std::__shared_weak_count *))v788->__on_zero_shared)(v788);
      std::__shared_weak_count::__release_weak(v788);
    }
  }
  v1489 = qword_102312DC0;
  v1490 = *(std::__shared_weak_count **)algn_102312DC8;
  if (*(_QWORD *)algn_102312DC8)
  {
    v791 = (unint64_t *)(*(_QWORD *)algn_102312DC8 + 8);
    do
      v792 = __ldxr(v791);
    while (__stxr(v792 + 1, v791));
  }
  v1487 = qword_1023137D0;
  v1488 = *(std::__shared_weak_count **)algn_1023137D8;
  if (*(_QWORD *)algn_1023137D8)
  {
    v793 = (unint64_t *)(*(_QWORD *)algn_1023137D8 + 8);
    do
      v794 = __ldxr(v793);
    while (__stxr(v794 + 1, v793));
  }
  sub_100E852E4(&qword_10230D8F8, &v1489, &v1487);
  v795 = v1488;
  if (v1488)
  {
    v796 = (unint64_t *)&v1488->__shared_owners_;
    do
      v797 = __ldaxr(v796);
    while (__stlxr(v797 - 1, v796));
    if (!v797)
    {
      ((void (*)(std::__shared_weak_count *))v795->__on_zero_shared)(v795);
      std::__shared_weak_count::__release_weak(v795);
    }
  }
  v798 = v1490;
  if (v1490)
  {
    v799 = (unint64_t *)&v1490->__shared_owners_;
    do
      v800 = __ldaxr(v799);
    while (__stlxr(v800 - 1, v799));
    if (!v800)
    {
      ((void (*)(std::__shared_weak_count *))v798->__on_zero_shared)(v798);
      std::__shared_weak_count::__release_weak(v798);
    }
  }
  v1485 = qword_102312DD0;
  v1486 = *(std::__shared_weak_count **)algn_102312DD8;
  if (*(_QWORD *)algn_102312DD8)
  {
    v801 = (unint64_t *)(*(_QWORD *)algn_102312DD8 + 8);
    do
      v802 = __ldxr(v801);
    while (__stxr(v802 + 1, v801));
  }
  v1483 = qword_1023137E0;
  v1484 = *(std::__shared_weak_count **)algn_1023137E8;
  if (*(_QWORD *)algn_1023137E8)
  {
    v803 = (unint64_t *)(*(_QWORD *)algn_1023137E8 + 8);
    do
      v804 = __ldxr(v803);
    while (__stxr(v804 + 1, v803));
  }
  sub_100E852E4(&qword_10230D8F8, &v1485, &v1483);
  v805 = v1484;
  if (v1484)
  {
    v806 = (unint64_t *)&v1484->__shared_owners_;
    do
      v807 = __ldaxr(v806);
    while (__stlxr(v807 - 1, v806));
    if (!v807)
    {
      ((void (*)(std::__shared_weak_count *))v805->__on_zero_shared)(v805);
      std::__shared_weak_count::__release_weak(v805);
    }
  }
  v808 = v1486;
  if (v1486)
  {
    v809 = (unint64_t *)&v1486->__shared_owners_;
    do
      v810 = __ldaxr(v809);
    while (__stlxr(v810 - 1, v809));
    if (!v810)
    {
      ((void (*)(std::__shared_weak_count *))v808->__on_zero_shared)(v808);
      std::__shared_weak_count::__release_weak(v808);
    }
  }
  v1481 = qword_102312DE0;
  v1482 = *(std::__shared_weak_count **)algn_102312DE8;
  if (*(_QWORD *)algn_102312DE8)
  {
    v811 = (unint64_t *)(*(_QWORD *)algn_102312DE8 + 8);
    do
      v812 = __ldxr(v811);
    while (__stxr(v812 + 1, v811));
  }
  v1479 = qword_1023137F0;
  v1480 = *(std::__shared_weak_count **)algn_1023137F8;
  if (*(_QWORD *)algn_1023137F8)
  {
    v813 = (unint64_t *)(*(_QWORD *)algn_1023137F8 + 8);
    do
      v814 = __ldxr(v813);
    while (__stxr(v814 + 1, v813));
  }
  sub_100E852E4(&qword_10230D8F8, &v1481, &v1479);
  v815 = v1480;
  if (v1480)
  {
    v816 = (unint64_t *)&v1480->__shared_owners_;
    do
      v817 = __ldaxr(v816);
    while (__stlxr(v817 - 1, v816));
    if (!v817)
    {
      ((void (*)(std::__shared_weak_count *))v815->__on_zero_shared)(v815);
      std::__shared_weak_count::__release_weak(v815);
    }
  }
  v818 = v1482;
  if (v1482)
  {
    v819 = (unint64_t *)&v1482->__shared_owners_;
    do
      v820 = __ldaxr(v819);
    while (__stlxr(v820 - 1, v819));
    if (!v820)
    {
      ((void (*)(std::__shared_weak_count *))v818->__on_zero_shared)(v818);
      std::__shared_weak_count::__release_weak(v818);
    }
  }
  v1477 = qword_102312DF0;
  v1478 = *(std::__shared_weak_count **)algn_102312DF8;
  if (*(_QWORD *)algn_102312DF8)
  {
    v821 = (unint64_t *)(*(_QWORD *)algn_102312DF8 + 8);
    do
      v822 = __ldxr(v821);
    while (__stxr(v822 + 1, v821));
  }
  v1475 = qword_102313800;
  v1476 = *(std::__shared_weak_count **)algn_102313808;
  if (*(_QWORD *)algn_102313808)
  {
    v823 = (unint64_t *)(*(_QWORD *)algn_102313808 + 8);
    do
      v824 = __ldxr(v823);
    while (__stxr(v824 + 1, v823));
  }
  sub_100E852E4(&qword_10230D8F8, &v1477, &v1475);
  v825 = v1476;
  if (v1476)
  {
    v826 = (unint64_t *)&v1476->__shared_owners_;
    do
      v827 = __ldaxr(v826);
    while (__stlxr(v827 - 1, v826));
    if (!v827)
    {
      ((void (*)(std::__shared_weak_count *))v825->__on_zero_shared)(v825);
      std::__shared_weak_count::__release_weak(v825);
    }
  }
  v828 = v1478;
  if (v1478)
  {
    v829 = (unint64_t *)&v1478->__shared_owners_;
    do
      v830 = __ldaxr(v829);
    while (__stlxr(v830 - 1, v829));
    if (!v830)
    {
      ((void (*)(std::__shared_weak_count *))v828->__on_zero_shared)(v828);
      std::__shared_weak_count::__release_weak(v828);
    }
  }
  v1473 = qword_102312E10;
  v1474 = *(std::__shared_weak_count **)algn_102312E18;
  if (*(_QWORD *)algn_102312E18)
  {
    v831 = (unint64_t *)(*(_QWORD *)algn_102312E18 + 8);
    do
      v832 = __ldxr(v831);
    while (__stxr(v832 + 1, v831));
  }
  v1471 = qword_102313820;
  v1472 = *(std::__shared_weak_count **)algn_102313828;
  if (*(_QWORD *)algn_102313828)
  {
    v833 = (unint64_t *)(*(_QWORD *)algn_102313828 + 8);
    do
      v834 = __ldxr(v833);
    while (__stxr(v834 + 1, v833));
  }
  sub_100E852E4(&qword_10230D8F8, &v1473, &v1471);
  v835 = v1472;
  if (v1472)
  {
    v836 = (unint64_t *)&v1472->__shared_owners_;
    do
      v837 = __ldaxr(v836);
    while (__stlxr(v837 - 1, v836));
    if (!v837)
    {
      ((void (*)(std::__shared_weak_count *))v835->__on_zero_shared)(v835);
      std::__shared_weak_count::__release_weak(v835);
    }
  }
  v838 = v1474;
  if (v1474)
  {
    v839 = (unint64_t *)&v1474->__shared_owners_;
    do
      v840 = __ldaxr(v839);
    while (__stlxr(v840 - 1, v839));
    if (!v840)
    {
      ((void (*)(std::__shared_weak_count *))v838->__on_zero_shared)(v838);
      std::__shared_weak_count::__release_weak(v838);
    }
  }
  v1469 = qword_102312E20;
  v1470 = *(std::__shared_weak_count **)algn_102312E28;
  if (*(_QWORD *)algn_102312E28)
  {
    v841 = (unint64_t *)(*(_QWORD *)algn_102312E28 + 8);
    do
      v842 = __ldxr(v841);
    while (__stxr(v842 + 1, v841));
  }
  v1467 = qword_102313830;
  v1468 = *(std::__shared_weak_count **)algn_102313838;
  if (*(_QWORD *)algn_102313838)
  {
    v843 = (unint64_t *)(*(_QWORD *)algn_102313838 + 8);
    do
      v844 = __ldxr(v843);
    while (__stxr(v844 + 1, v843));
  }
  sub_100E852E4(&qword_10230D8F8, &v1469, &v1467);
  v845 = v1468;
  if (v1468)
  {
    v846 = (unint64_t *)&v1468->__shared_owners_;
    do
      v847 = __ldaxr(v846);
    while (__stlxr(v847 - 1, v846));
    if (!v847)
    {
      ((void (*)(std::__shared_weak_count *))v845->__on_zero_shared)(v845);
      std::__shared_weak_count::__release_weak(v845);
    }
  }
  v848 = v1470;
  if (v1470)
  {
    v849 = (unint64_t *)&v1470->__shared_owners_;
    do
      v850 = __ldaxr(v849);
    while (__stlxr(v850 - 1, v849));
    if (!v850)
    {
      ((void (*)(std::__shared_weak_count *))v848->__on_zero_shared)(v848);
      std::__shared_weak_count::__release_weak(v848);
    }
  }
  v1465 = qword_102312E30;
  v1466 = *(std::__shared_weak_count **)algn_102312E38;
  if (*(_QWORD *)algn_102312E38)
  {
    v851 = (unint64_t *)(*(_QWORD *)algn_102312E38 + 8);
    do
      v852 = __ldxr(v851);
    while (__stxr(v852 + 1, v851));
  }
  v1463 = qword_102313840;
  v1464 = *(std::__shared_weak_count **)algn_102313848;
  if (*(_QWORD *)algn_102313848)
  {
    v853 = (unint64_t *)(*(_QWORD *)algn_102313848 + 8);
    do
      v854 = __ldxr(v853);
    while (__stxr(v854 + 1, v853));
  }
  sub_100E852E4(&qword_10230D8F8, &v1465, &v1463);
  v855 = v1464;
  if (v1464)
  {
    v856 = (unint64_t *)&v1464->__shared_owners_;
    do
      v857 = __ldaxr(v856);
    while (__stlxr(v857 - 1, v856));
    if (!v857)
    {
      ((void (*)(std::__shared_weak_count *))v855->__on_zero_shared)(v855);
      std::__shared_weak_count::__release_weak(v855);
    }
  }
  v858 = v1466;
  if (v1466)
  {
    v859 = (unint64_t *)&v1466->__shared_owners_;
    do
      v860 = __ldaxr(v859);
    while (__stlxr(v860 - 1, v859));
    if (!v860)
    {
      ((void (*)(std::__shared_weak_count *))v858->__on_zero_shared)(v858);
      std::__shared_weak_count::__release_weak(v858);
    }
  }
  v1461 = qword_102312E40;
  v1462 = *(std::__shared_weak_count **)algn_102312E48;
  if (*(_QWORD *)algn_102312E48)
  {
    v861 = (unint64_t *)(*(_QWORD *)algn_102312E48 + 8);
    do
      v862 = __ldxr(v861);
    while (__stxr(v862 + 1, v861));
  }
  v1459 = qword_102313850;
  v1460 = *(std::__shared_weak_count **)algn_102313858;
  if (*(_QWORD *)algn_102313858)
  {
    v863 = (unint64_t *)(*(_QWORD *)algn_102313858 + 8);
    do
      v864 = __ldxr(v863);
    while (__stxr(v864 + 1, v863));
  }
  sub_100E852E4(&qword_10230D8F8, &v1461, &v1459);
  v865 = v1460;
  if (v1460)
  {
    v866 = (unint64_t *)&v1460->__shared_owners_;
    do
      v867 = __ldaxr(v866);
    while (__stlxr(v867 - 1, v866));
    if (!v867)
    {
      ((void (*)(std::__shared_weak_count *))v865->__on_zero_shared)(v865);
      std::__shared_weak_count::__release_weak(v865);
    }
  }
  v868 = v1462;
  if (v1462)
  {
    v869 = (unint64_t *)&v1462->__shared_owners_;
    do
      v870 = __ldaxr(v869);
    while (__stlxr(v870 - 1, v869));
    if (!v870)
    {
      ((void (*)(std::__shared_weak_count *))v868->__on_zero_shared)(v868);
      std::__shared_weak_count::__release_weak(v868);
    }
  }
  v1457 = qword_102312E50;
  v1458 = *(std::__shared_weak_count **)algn_102312E58;
  if (*(_QWORD *)algn_102312E58)
  {
    v871 = (unint64_t *)(*(_QWORD *)algn_102312E58 + 8);
    do
      v872 = __ldxr(v871);
    while (__stxr(v872 + 1, v871));
  }
  v1455 = qword_102313860;
  v1456 = *(std::__shared_weak_count **)algn_102313868;
  if (*(_QWORD *)algn_102313868)
  {
    v873 = (unint64_t *)(*(_QWORD *)algn_102313868 + 8);
    do
      v874 = __ldxr(v873);
    while (__stxr(v874 + 1, v873));
  }
  sub_100E852E4(&qword_10230D8F8, &v1457, &v1455);
  v875 = v1456;
  if (v1456)
  {
    v876 = (unint64_t *)&v1456->__shared_owners_;
    do
      v877 = __ldaxr(v876);
    while (__stlxr(v877 - 1, v876));
    if (!v877)
    {
      ((void (*)(std::__shared_weak_count *))v875->__on_zero_shared)(v875);
      std::__shared_weak_count::__release_weak(v875);
    }
  }
  v878 = v1458;
  if (v1458)
  {
    v879 = (unint64_t *)&v1458->__shared_owners_;
    do
      v880 = __ldaxr(v879);
    while (__stlxr(v880 - 1, v879));
    if (!v880)
    {
      ((void (*)(std::__shared_weak_count *))v878->__on_zero_shared)(v878);
      std::__shared_weak_count::__release_weak(v878);
    }
  }
  v1453 = qword_102312E60;
  v1454 = *(std::__shared_weak_count **)algn_102312E68;
  if (*(_QWORD *)algn_102312E68)
  {
    v881 = (unint64_t *)(*(_QWORD *)algn_102312E68 + 8);
    do
      v882 = __ldxr(v881);
    while (__stxr(v882 + 1, v881));
  }
  v1451 = qword_102313870;
  v1452 = *(std::__shared_weak_count **)algn_102313878;
  if (*(_QWORD *)algn_102313878)
  {
    v883 = (unint64_t *)(*(_QWORD *)algn_102313878 + 8);
    do
      v884 = __ldxr(v883);
    while (__stxr(v884 + 1, v883));
  }
  sub_100E852E4(&qword_10230D8F8, &v1453, &v1451);
  v885 = v1452;
  if (v1452)
  {
    v886 = (unint64_t *)&v1452->__shared_owners_;
    do
      v887 = __ldaxr(v886);
    while (__stlxr(v887 - 1, v886));
    if (!v887)
    {
      ((void (*)(std::__shared_weak_count *))v885->__on_zero_shared)(v885);
      std::__shared_weak_count::__release_weak(v885);
    }
  }
  v888 = v1454;
  if (v1454)
  {
    v889 = (unint64_t *)&v1454->__shared_owners_;
    do
      v890 = __ldaxr(v889);
    while (__stlxr(v890 - 1, v889));
    if (!v890)
    {
      ((void (*)(std::__shared_weak_count *))v888->__on_zero_shared)(v888);
      std::__shared_weak_count::__release_weak(v888);
    }
  }
  v1449 = qword_102312E80;
  v1450 = *(std::__shared_weak_count **)algn_102312E88;
  if (*(_QWORD *)algn_102312E88)
  {
    v891 = (unint64_t *)(*(_QWORD *)algn_102312E88 + 8);
    do
      v892 = __ldxr(v891);
    while (__stxr(v892 + 1, v891));
  }
  v1447 = qword_102313890;
  v1448 = *(std::__shared_weak_count **)algn_102313898;
  if (*(_QWORD *)algn_102313898)
  {
    v893 = (unint64_t *)(*(_QWORD *)algn_102313898 + 8);
    do
      v894 = __ldxr(v893);
    while (__stxr(v894 + 1, v893));
  }
  sub_100E852E4(&qword_10230D8F8, &v1449, &v1447);
  v895 = v1448;
  if (v1448)
  {
    v896 = (unint64_t *)&v1448->__shared_owners_;
    do
      v897 = __ldaxr(v896);
    while (__stlxr(v897 - 1, v896));
    if (!v897)
    {
      ((void (*)(std::__shared_weak_count *))v895->__on_zero_shared)(v895);
      std::__shared_weak_count::__release_weak(v895);
    }
  }
  v898 = v1450;
  if (v1450)
  {
    v899 = (unint64_t *)&v1450->__shared_owners_;
    do
      v900 = __ldaxr(v899);
    while (__stlxr(v900 - 1, v899));
    if (!v900)
    {
      ((void (*)(std::__shared_weak_count *))v898->__on_zero_shared)(v898);
      std::__shared_weak_count::__release_weak(v898);
    }
  }
  v1445 = qword_102312EA0;
  v1446 = *(std::__shared_weak_count **)algn_102312EA8;
  if (*(_QWORD *)algn_102312EA8)
  {
    v901 = (unint64_t *)(*(_QWORD *)algn_102312EA8 + 8);
    do
      v902 = __ldxr(v901);
    while (__stxr(v902 + 1, v901));
  }
  v1443 = qword_1023138B0;
  v1444 = *(std::__shared_weak_count **)algn_1023138B8;
  if (*(_QWORD *)algn_1023138B8)
  {
    v903 = (unint64_t *)(*(_QWORD *)algn_1023138B8 + 8);
    do
      v904 = __ldxr(v903);
    while (__stxr(v904 + 1, v903));
  }
  sub_100E852E4(&qword_10230D8F8, &v1445, &v1443);
  v905 = v1444;
  if (v1444)
  {
    v906 = (unint64_t *)&v1444->__shared_owners_;
    do
      v907 = __ldaxr(v906);
    while (__stlxr(v907 - 1, v906));
    if (!v907)
    {
      ((void (*)(std::__shared_weak_count *))v905->__on_zero_shared)(v905);
      std::__shared_weak_count::__release_weak(v905);
    }
  }
  v908 = v1446;
  if (v1446)
  {
    v909 = (unint64_t *)&v1446->__shared_owners_;
    do
      v910 = __ldaxr(v909);
    while (__stlxr(v910 - 1, v909));
    if (!v910)
    {
      ((void (*)(std::__shared_weak_count *))v908->__on_zero_shared)(v908);
      std::__shared_weak_count::__release_weak(v908);
    }
  }
  v1441 = qword_102312EB0;
  v1442 = *(std::__shared_weak_count **)algn_102312EB8;
  if (*(_QWORD *)algn_102312EB8)
  {
    v911 = (unint64_t *)(*(_QWORD *)algn_102312EB8 + 8);
    do
      v912 = __ldxr(v911);
    while (__stxr(v912 + 1, v911));
  }
  v1439 = qword_1023138C0;
  v1440 = *(std::__shared_weak_count **)algn_1023138C8;
  if (*(_QWORD *)algn_1023138C8)
  {
    v913 = (unint64_t *)(*(_QWORD *)algn_1023138C8 + 8);
    do
      v914 = __ldxr(v913);
    while (__stxr(v914 + 1, v913));
  }
  sub_100E852E4(&qword_10230D8F8, &v1441, &v1439);
  v915 = v1440;
  if (v1440)
  {
    v916 = (unint64_t *)&v1440->__shared_owners_;
    do
      v917 = __ldaxr(v916);
    while (__stlxr(v917 - 1, v916));
    if (!v917)
    {
      ((void (*)(std::__shared_weak_count *))v915->__on_zero_shared)(v915);
      std::__shared_weak_count::__release_weak(v915);
    }
  }
  v918 = v1442;
  if (v1442)
  {
    v919 = (unint64_t *)&v1442->__shared_owners_;
    do
      v920 = __ldaxr(v919);
    while (__stlxr(v920 - 1, v919));
    if (!v920)
    {
      ((void (*)(std::__shared_weak_count *))v918->__on_zero_shared)(v918);
      std::__shared_weak_count::__release_weak(v918);
    }
  }
  v1437 = qword_102312EC0;
  v1438 = *(std::__shared_weak_count **)algn_102312EC8;
  if (*(_QWORD *)algn_102312EC8)
  {
    v921 = (unint64_t *)(*(_QWORD *)algn_102312EC8 + 8);
    do
      v922 = __ldxr(v921);
    while (__stxr(v922 + 1, v921));
  }
  v1435 = qword_1023138D0;
  v1436 = *(std::__shared_weak_count **)algn_1023138D8;
  if (*(_QWORD *)algn_1023138D8)
  {
    v923 = (unint64_t *)(*(_QWORD *)algn_1023138D8 + 8);
    do
      v924 = __ldxr(v923);
    while (__stxr(v924 + 1, v923));
  }
  sub_100E852E4(&qword_10230D8F8, &v1437, &v1435);
  v925 = v1436;
  if (v1436)
  {
    v926 = (unint64_t *)&v1436->__shared_owners_;
    do
      v927 = __ldaxr(v926);
    while (__stlxr(v927 - 1, v926));
    if (!v927)
    {
      ((void (*)(std::__shared_weak_count *))v925->__on_zero_shared)(v925);
      std::__shared_weak_count::__release_weak(v925);
    }
  }
  v928 = v1438;
  if (v1438)
  {
    v929 = (unint64_t *)&v1438->__shared_owners_;
    do
      v930 = __ldaxr(v929);
    while (__stlxr(v930 - 1, v929));
    if (!v930)
    {
      ((void (*)(std::__shared_weak_count *))v928->__on_zero_shared)(v928);
      std::__shared_weak_count::__release_weak(v928);
    }
  }
  v1433 = qword_102312ED0;
  v1434 = *(std::__shared_weak_count **)algn_102312ED8;
  if (*(_QWORD *)algn_102312ED8)
  {
    v931 = (unint64_t *)(*(_QWORD *)algn_102312ED8 + 8);
    do
      v932 = __ldxr(v931);
    while (__stxr(v932 + 1, v931));
  }
  v1431 = qword_1023138E0;
  v1432 = *(std::__shared_weak_count **)algn_1023138E8;
  if (*(_QWORD *)algn_1023138E8)
  {
    v933 = (unint64_t *)(*(_QWORD *)algn_1023138E8 + 8);
    do
      v934 = __ldxr(v933);
    while (__stxr(v934 + 1, v933));
  }
  sub_100E852E4(&qword_10230D8F8, &v1433, &v1431);
  v935 = v1432;
  if (v1432)
  {
    v936 = (unint64_t *)&v1432->__shared_owners_;
    do
      v937 = __ldaxr(v936);
    while (__stlxr(v937 - 1, v936));
    if (!v937)
    {
      ((void (*)(std::__shared_weak_count *))v935->__on_zero_shared)(v935);
      std::__shared_weak_count::__release_weak(v935);
    }
  }
  v938 = v1434;
  if (v1434)
  {
    v939 = (unint64_t *)&v1434->__shared_owners_;
    do
      v940 = __ldaxr(v939);
    while (__stlxr(v940 - 1, v939));
    if (!v940)
    {
      ((void (*)(std::__shared_weak_count *))v938->__on_zero_shared)(v938);
      std::__shared_weak_count::__release_weak(v938);
    }
  }
  v1429 = qword_102312EE0;
  v1430 = *(std::__shared_weak_count **)algn_102312EE8;
  if (*(_QWORD *)algn_102312EE8)
  {
    v941 = (unint64_t *)(*(_QWORD *)algn_102312EE8 + 8);
    do
      v942 = __ldxr(v941);
    while (__stxr(v942 + 1, v941));
  }
  v1427 = qword_1023138F0;
  v1428 = *(std::__shared_weak_count **)algn_1023138F8;
  if (*(_QWORD *)algn_1023138F8)
  {
    v943 = (unint64_t *)(*(_QWORD *)algn_1023138F8 + 8);
    do
      v944 = __ldxr(v943);
    while (__stxr(v944 + 1, v943));
  }
  sub_100E852E4(&qword_10230D8F8, &v1429, &v1427);
  v945 = v1428;
  if (v1428)
  {
    v946 = (unint64_t *)&v1428->__shared_owners_;
    do
      v947 = __ldaxr(v946);
    while (__stlxr(v947 - 1, v946));
    if (!v947)
    {
      ((void (*)(std::__shared_weak_count *))v945->__on_zero_shared)(v945);
      std::__shared_weak_count::__release_weak(v945);
    }
  }
  v948 = v1430;
  if (v1430)
  {
    v949 = (unint64_t *)&v1430->__shared_owners_;
    do
      v950 = __ldaxr(v949);
    while (__stlxr(v950 - 1, v949));
    if (!v950)
    {
      ((void (*)(std::__shared_weak_count *))v948->__on_zero_shared)(v948);
      std::__shared_weak_count::__release_weak(v948);
    }
  }
  v1425 = qword_102312EF0;
  v1426 = *(std::__shared_weak_count **)algn_102312EF8;
  if (*(_QWORD *)algn_102312EF8)
  {
    v951 = (unint64_t *)(*(_QWORD *)algn_102312EF8 + 8);
    do
      v952 = __ldxr(v951);
    while (__stxr(v952 + 1, v951));
  }
  v1423 = qword_102313900;
  v1424 = *(std::__shared_weak_count **)algn_102313908;
  if (*(_QWORD *)algn_102313908)
  {
    v953 = (unint64_t *)(*(_QWORD *)algn_102313908 + 8);
    do
      v954 = __ldxr(v953);
    while (__stxr(v954 + 1, v953));
  }
  sub_100E852E4(&qword_10230D8F8, &v1425, &v1423);
  v955 = v1424;
  if (v1424)
  {
    v956 = (unint64_t *)&v1424->__shared_owners_;
    do
      v957 = __ldaxr(v956);
    while (__stlxr(v957 - 1, v956));
    if (!v957)
    {
      ((void (*)(std::__shared_weak_count *))v955->__on_zero_shared)(v955);
      std::__shared_weak_count::__release_weak(v955);
    }
  }
  v958 = v1426;
  if (v1426)
  {
    v959 = (unint64_t *)&v1426->__shared_owners_;
    do
      v960 = __ldaxr(v959);
    while (__stlxr(v960 - 1, v959));
    if (!v960)
    {
      ((void (*)(std::__shared_weak_count *))v958->__on_zero_shared)(v958);
      std::__shared_weak_count::__release_weak(v958);
    }
  }
  v1421 = qword_102312F10;
  v1422 = *(std::__shared_weak_count **)algn_102312F18;
  if (*(_QWORD *)algn_102312F18)
  {
    v961 = (unint64_t *)(*(_QWORD *)algn_102312F18 + 8);
    do
      v962 = __ldxr(v961);
    while (__stxr(v962 + 1, v961));
  }
  v1419 = qword_102313920;
  v1420 = *(std::__shared_weak_count **)algn_102313928;
  if (*(_QWORD *)algn_102313928)
  {
    v963 = (unint64_t *)(*(_QWORD *)algn_102313928 + 8);
    do
      v964 = __ldxr(v963);
    while (__stxr(v964 + 1, v963));
  }
  sub_100E852E4(&qword_10230D8F8, &v1421, &v1419);
  v965 = v1420;
  if (v1420)
  {
    v966 = (unint64_t *)&v1420->__shared_owners_;
    do
      v967 = __ldaxr(v966);
    while (__stlxr(v967 - 1, v966));
    if (!v967)
    {
      ((void (*)(std::__shared_weak_count *))v965->__on_zero_shared)(v965);
      std::__shared_weak_count::__release_weak(v965);
    }
  }
  v968 = v1422;
  if (v1422)
  {
    v969 = (unint64_t *)&v1422->__shared_owners_;
    do
      v970 = __ldaxr(v969);
    while (__stlxr(v970 - 1, v969));
    if (!v970)
    {
      ((void (*)(std::__shared_weak_count *))v968->__on_zero_shared)(v968);
      std::__shared_weak_count::__release_weak(v968);
    }
  }
  v1417 = qword_102312F20;
  v1418 = *(std::__shared_weak_count **)algn_102312F28;
  if (*(_QWORD *)algn_102312F28)
  {
    v971 = (unint64_t *)(*(_QWORD *)algn_102312F28 + 8);
    do
      v972 = __ldxr(v971);
    while (__stxr(v972 + 1, v971));
  }
  v1415 = qword_102313930;
  v1416 = *(std::__shared_weak_count **)algn_102313938;
  if (*(_QWORD *)algn_102313938)
  {
    v973 = (unint64_t *)(*(_QWORD *)algn_102313938 + 8);
    do
      v974 = __ldxr(v973);
    while (__stxr(v974 + 1, v973));
  }
  sub_100E852E4(&qword_10230D8F8, &v1417, &v1415);
  v975 = v1416;
  if (v1416)
  {
    v976 = (unint64_t *)&v1416->__shared_owners_;
    do
      v977 = __ldaxr(v976);
    while (__stlxr(v977 - 1, v976));
    if (!v977)
    {
      ((void (*)(std::__shared_weak_count *))v975->__on_zero_shared)(v975);
      std::__shared_weak_count::__release_weak(v975);
    }
  }
  v978 = v1418;
  if (v1418)
  {
    v979 = (unint64_t *)&v1418->__shared_owners_;
    do
      v980 = __ldaxr(v979);
    while (__stlxr(v980 - 1, v979));
    if (!v980)
    {
      ((void (*)(std::__shared_weak_count *))v978->__on_zero_shared)(v978);
      std::__shared_weak_count::__release_weak(v978);
    }
  }
  v1413 = qword_102312F30;
  v1414 = *(std::__shared_weak_count **)algn_102312F38;
  if (*(_QWORD *)algn_102312F38)
  {
    v981 = (unint64_t *)(*(_QWORD *)algn_102312F38 + 8);
    do
      v982 = __ldxr(v981);
    while (__stxr(v982 + 1, v981));
  }
  v1411 = qword_102313940;
  v1412 = *(std::__shared_weak_count **)algn_102313948;
  if (*(_QWORD *)algn_102313948)
  {
    v983 = (unint64_t *)(*(_QWORD *)algn_102313948 + 8);
    do
      v984 = __ldxr(v983);
    while (__stxr(v984 + 1, v983));
  }
  sub_100E852E4(&qword_10230D8F8, &v1413, &v1411);
  v985 = v1412;
  if (v1412)
  {
    v986 = (unint64_t *)&v1412->__shared_owners_;
    do
      v987 = __ldaxr(v986);
    while (__stlxr(v987 - 1, v986));
    if (!v987)
    {
      ((void (*)(std::__shared_weak_count *))v985->__on_zero_shared)(v985);
      std::__shared_weak_count::__release_weak(v985);
    }
  }
  v988 = v1414;
  if (v1414)
  {
    v989 = (unint64_t *)&v1414->__shared_owners_;
    do
      v990 = __ldaxr(v989);
    while (__stlxr(v990 - 1, v989));
    if (!v990)
    {
      ((void (*)(std::__shared_weak_count *))v988->__on_zero_shared)(v988);
      std::__shared_weak_count::__release_weak(v988);
    }
  }
  v1409 = qword_102312F40;
  v1410 = *(std::__shared_weak_count **)algn_102312F48;
  if (*(_QWORD *)algn_102312F48)
  {
    v991 = (unint64_t *)(*(_QWORD *)algn_102312F48 + 8);
    do
      v992 = __ldxr(v991);
    while (__stxr(v992 + 1, v991));
  }
  v1407 = qword_102313950;
  v1408 = *(std::__shared_weak_count **)algn_102313958;
  if (*(_QWORD *)algn_102313958)
  {
    v993 = (unint64_t *)(*(_QWORD *)algn_102313958 + 8);
    do
      v994 = __ldxr(v993);
    while (__stxr(v994 + 1, v993));
  }
  sub_100E852E4(&qword_10230D8F8, &v1409, &v1407);
  v995 = v1408;
  if (v1408)
  {
    v996 = (unint64_t *)&v1408->__shared_owners_;
    do
      v997 = __ldaxr(v996);
    while (__stlxr(v997 - 1, v996));
    if (!v997)
    {
      ((void (*)(std::__shared_weak_count *))v995->__on_zero_shared)(v995);
      std::__shared_weak_count::__release_weak(v995);
    }
  }
  v998 = v1410;
  if (v1410)
  {
    v999 = (unint64_t *)&v1410->__shared_owners_;
    do
      v1000 = __ldaxr(v999);
    while (__stlxr(v1000 - 1, v999));
    if (!v1000)
    {
      ((void (*)(std::__shared_weak_count *))v998->__on_zero_shared)(v998);
      std::__shared_weak_count::__release_weak(v998);
    }
  }
  v1405 = qword_102312F50;
  v1406 = *(std::__shared_weak_count **)algn_102312F58;
  if (*(_QWORD *)algn_102312F58)
  {
    v1001 = (unint64_t *)(*(_QWORD *)algn_102312F58 + 8);
    do
      v1002 = __ldxr(v1001);
    while (__stxr(v1002 + 1, v1001));
  }
  v1403 = qword_102313960;
  v1404 = *(std::__shared_weak_count **)algn_102313968;
  if (*(_QWORD *)algn_102313968)
  {
    v1003 = (unint64_t *)(*(_QWORD *)algn_102313968 + 8);
    do
      v1004 = __ldxr(v1003);
    while (__stxr(v1004 + 1, v1003));
  }
  sub_100E852E4(&qword_10230D8F8, &v1405, &v1403);
  v1005 = v1404;
  if (v1404)
  {
    v1006 = (unint64_t *)&v1404->__shared_owners_;
    do
      v1007 = __ldaxr(v1006);
    while (__stlxr(v1007 - 1, v1006));
    if (!v1007)
    {
      ((void (*)(std::__shared_weak_count *))v1005->__on_zero_shared)(v1005);
      std::__shared_weak_count::__release_weak(v1005);
    }
  }
  v1008 = v1406;
  if (v1406)
  {
    v1009 = (unint64_t *)&v1406->__shared_owners_;
    do
      v1010 = __ldaxr(v1009);
    while (__stlxr(v1010 - 1, v1009));
    if (!v1010)
    {
      ((void (*)(std::__shared_weak_count *))v1008->__on_zero_shared)(v1008);
      std::__shared_weak_count::__release_weak(v1008);
    }
  }
  v1401 = qword_102312F60;
  v1402 = *(std::__shared_weak_count **)algn_102312F68;
  if (*(_QWORD *)algn_102312F68)
  {
    v1011 = (unint64_t *)(*(_QWORD *)algn_102312F68 + 8);
    do
      v1012 = __ldxr(v1011);
    while (__stxr(v1012 + 1, v1011));
  }
  v1399 = qword_102313970;
  v1400 = *(std::__shared_weak_count **)algn_102313978;
  if (*(_QWORD *)algn_102313978)
  {
    v1013 = (unint64_t *)(*(_QWORD *)algn_102313978 + 8);
    do
      v1014 = __ldxr(v1013);
    while (__stxr(v1014 + 1, v1013));
  }
  sub_100E852E4(&qword_10230D8F8, &v1401, &v1399);
  v1015 = v1400;
  if (v1400)
  {
    v1016 = (unint64_t *)&v1400->__shared_owners_;
    do
      v1017 = __ldaxr(v1016);
    while (__stlxr(v1017 - 1, v1016));
    if (!v1017)
    {
      ((void (*)(std::__shared_weak_count *))v1015->__on_zero_shared)(v1015);
      std::__shared_weak_count::__release_weak(v1015);
    }
  }
  v1018 = v1402;
  if (v1402)
  {
    v1019 = (unint64_t *)&v1402->__shared_owners_;
    do
      v1020 = __ldaxr(v1019);
    while (__stlxr(v1020 - 1, v1019));
    if (!v1020)
    {
      ((void (*)(std::__shared_weak_count *))v1018->__on_zero_shared)(v1018);
      std::__shared_weak_count::__release_weak(v1018);
    }
  }
  v1397 = qword_102312F80;
  v1398 = *(std::__shared_weak_count **)algn_102312F88;
  if (*(_QWORD *)algn_102312F88)
  {
    v1021 = (unint64_t *)(*(_QWORD *)algn_102312F88 + 8);
    do
      v1022 = __ldxr(v1021);
    while (__stxr(v1022 + 1, v1021));
  }
  v1395 = qword_102313990;
  v1396 = *(std::__shared_weak_count **)algn_102313998;
  if (*(_QWORD *)algn_102313998)
  {
    v1023 = (unint64_t *)(*(_QWORD *)algn_102313998 + 8);
    do
      v1024 = __ldxr(v1023);
    while (__stxr(v1024 + 1, v1023));
  }
  sub_100E852E4(&qword_10230D8F8, &v1397, &v1395);
  v1025 = v1396;
  if (v1396)
  {
    v1026 = (unint64_t *)&v1396->__shared_owners_;
    do
      v1027 = __ldaxr(v1026);
    while (__stlxr(v1027 - 1, v1026));
    if (!v1027)
    {
      ((void (*)(std::__shared_weak_count *))v1025->__on_zero_shared)(v1025);
      std::__shared_weak_count::__release_weak(v1025);
    }
  }
  v1028 = v1398;
  if (v1398)
  {
    v1029 = (unint64_t *)&v1398->__shared_owners_;
    do
      v1030 = __ldaxr(v1029);
    while (__stlxr(v1030 - 1, v1029));
    if (!v1030)
    {
      ((void (*)(std::__shared_weak_count *))v1028->__on_zero_shared)(v1028);
      std::__shared_weak_count::__release_weak(v1028);
    }
  }
  v1393 = qword_102312F90;
  v1394 = *(std::__shared_weak_count **)algn_102312F98;
  if (*(_QWORD *)algn_102312F98)
  {
    v1031 = (unint64_t *)(*(_QWORD *)algn_102312F98 + 8);
    do
      v1032 = __ldxr(v1031);
    while (__stxr(v1032 + 1, v1031));
  }
  v1391 = qword_1023139A0;
  v1392 = *(std::__shared_weak_count **)algn_1023139A8;
  if (*(_QWORD *)algn_1023139A8)
  {
    v1033 = (unint64_t *)(*(_QWORD *)algn_1023139A8 + 8);
    do
      v1034 = __ldxr(v1033);
    while (__stxr(v1034 + 1, v1033));
  }
  sub_100E852E4(&qword_10230D8F8, &v1393, &v1391);
  v1035 = v1392;
  if (v1392)
  {
    v1036 = (unint64_t *)&v1392->__shared_owners_;
    do
      v1037 = __ldaxr(v1036);
    while (__stlxr(v1037 - 1, v1036));
    if (!v1037)
    {
      ((void (*)(std::__shared_weak_count *))v1035->__on_zero_shared)(v1035);
      std::__shared_weak_count::__release_weak(v1035);
    }
  }
  v1038 = v1394;
  if (v1394)
  {
    v1039 = (unint64_t *)&v1394->__shared_owners_;
    do
      v1040 = __ldaxr(v1039);
    while (__stlxr(v1040 - 1, v1039));
    if (!v1040)
    {
      ((void (*)(std::__shared_weak_count *))v1038->__on_zero_shared)(v1038);
      std::__shared_weak_count::__release_weak(v1038);
    }
  }
  v1389 = qword_102312FA0;
  v1390 = *(std::__shared_weak_count **)algn_102312FA8;
  if (*(_QWORD *)algn_102312FA8)
  {
    v1041 = (unint64_t *)(*(_QWORD *)algn_102312FA8 + 8);
    do
      v1042 = __ldxr(v1041);
    while (__stxr(v1042 + 1, v1041));
  }
  v1387 = qword_1023139B0;
  v1388 = *(std::__shared_weak_count **)algn_1023139B8;
  if (*(_QWORD *)algn_1023139B8)
  {
    v1043 = (unint64_t *)(*(_QWORD *)algn_1023139B8 + 8);
    do
      v1044 = __ldxr(v1043);
    while (__stxr(v1044 + 1, v1043));
  }
  sub_100E852E4(&qword_10230D8F8, &v1389, &v1387);
  v1045 = v1388;
  if (v1388)
  {
    v1046 = (unint64_t *)&v1388->__shared_owners_;
    do
      v1047 = __ldaxr(v1046);
    while (__stlxr(v1047 - 1, v1046));
    if (!v1047)
    {
      ((void (*)(std::__shared_weak_count *))v1045->__on_zero_shared)(v1045);
      std::__shared_weak_count::__release_weak(v1045);
    }
  }
  v1048 = v1390;
  if (v1390)
  {
    v1049 = (unint64_t *)&v1390->__shared_owners_;
    do
      v1050 = __ldaxr(v1049);
    while (__stlxr(v1050 - 1, v1049));
    if (!v1050)
    {
      ((void (*)(std::__shared_weak_count *))v1048->__on_zero_shared)(v1048);
      std::__shared_weak_count::__release_weak(v1048);
    }
  }
  v1385 = qword_102312FB0;
  v1386 = *(std::__shared_weak_count **)algn_102312FB8;
  if (*(_QWORD *)algn_102312FB8)
  {
    v1051 = (unint64_t *)(*(_QWORD *)algn_102312FB8 + 8);
    do
      v1052 = __ldxr(v1051);
    while (__stxr(v1052 + 1, v1051));
  }
  v1383 = qword_1023139C0;
  v1384 = *(std::__shared_weak_count **)algn_1023139C8;
  if (*(_QWORD *)algn_1023139C8)
  {
    v1053 = (unint64_t *)(*(_QWORD *)algn_1023139C8 + 8);
    do
      v1054 = __ldxr(v1053);
    while (__stxr(v1054 + 1, v1053));
  }
  sub_100E852E4(&qword_10230D8F8, &v1385, &v1383);
  v1055 = v1384;
  if (v1384)
  {
    v1056 = (unint64_t *)&v1384->__shared_owners_;
    do
      v1057 = __ldaxr(v1056);
    while (__stlxr(v1057 - 1, v1056));
    if (!v1057)
    {
      ((void (*)(std::__shared_weak_count *))v1055->__on_zero_shared)(v1055);
      std::__shared_weak_count::__release_weak(v1055);
    }
  }
  v1058 = v1386;
  if (v1386)
  {
    v1059 = (unint64_t *)&v1386->__shared_owners_;
    do
      v1060 = __ldaxr(v1059);
    while (__stlxr(v1060 - 1, v1059));
    if (!v1060)
    {
      ((void (*)(std::__shared_weak_count *))v1058->__on_zero_shared)(v1058);
      std::__shared_weak_count::__release_weak(v1058);
    }
  }
  v1381 = qword_102312FC0;
  v1382 = *(std::__shared_weak_count **)algn_102312FC8;
  if (*(_QWORD *)algn_102312FC8)
  {
    v1061 = (unint64_t *)(*(_QWORD *)algn_102312FC8 + 8);
    do
      v1062 = __ldxr(v1061);
    while (__stxr(v1062 + 1, v1061));
  }
  v1379 = qword_1023139D0;
  v1380 = *(std::__shared_weak_count **)algn_1023139D8;
  if (*(_QWORD *)algn_1023139D8)
  {
    v1063 = (unint64_t *)(*(_QWORD *)algn_1023139D8 + 8);
    do
      v1064 = __ldxr(v1063);
    while (__stxr(v1064 + 1, v1063));
  }
  sub_100E852E4(&qword_10230D8F8, &v1381, &v1379);
  v1065 = v1380;
  if (v1380)
  {
    v1066 = (unint64_t *)&v1380->__shared_owners_;
    do
      v1067 = __ldaxr(v1066);
    while (__stlxr(v1067 - 1, v1066));
    if (!v1067)
    {
      ((void (*)(std::__shared_weak_count *))v1065->__on_zero_shared)(v1065);
      std::__shared_weak_count::__release_weak(v1065);
    }
  }
  v1068 = v1382;
  if (v1382)
  {
    v1069 = (unint64_t *)&v1382->__shared_owners_;
    do
      v1070 = __ldaxr(v1069);
    while (__stlxr(v1070 - 1, v1069));
    if (!v1070)
    {
      ((void (*)(std::__shared_weak_count *))v1068->__on_zero_shared)(v1068);
      std::__shared_weak_count::__release_weak(v1068);
    }
  }
  v1377 = qword_102312FD0;
  v1378 = *(std::__shared_weak_count **)algn_102312FD8;
  if (*(_QWORD *)algn_102312FD8)
  {
    v1071 = (unint64_t *)(*(_QWORD *)algn_102312FD8 + 8);
    do
      v1072 = __ldxr(v1071);
    while (__stxr(v1072 + 1, v1071));
  }
  v1375 = qword_1023139E0;
  v1376 = *(std::__shared_weak_count **)algn_1023139E8;
  if (*(_QWORD *)algn_1023139E8)
  {
    v1073 = (unint64_t *)(*(_QWORD *)algn_1023139E8 + 8);
    do
      v1074 = __ldxr(v1073);
    while (__stxr(v1074 + 1, v1073));
  }
  sub_100E852E4(&qword_10230D8F8, &v1377, &v1375);
  v1075 = v1376;
  if (v1376)
  {
    v1076 = (unint64_t *)&v1376->__shared_owners_;
    do
      v1077 = __ldaxr(v1076);
    while (__stlxr(v1077 - 1, v1076));
    if (!v1077)
    {
      ((void (*)(std::__shared_weak_count *))v1075->__on_zero_shared)(v1075);
      std::__shared_weak_count::__release_weak(v1075);
    }
  }
  v1078 = v1378;
  if (v1378)
  {
    v1079 = (unint64_t *)&v1378->__shared_owners_;
    do
      v1080 = __ldaxr(v1079);
    while (__stlxr(v1080 - 1, v1079));
    if (!v1080)
    {
      ((void (*)(std::__shared_weak_count *))v1078->__on_zero_shared)(v1078);
      std::__shared_weak_count::__release_weak(v1078);
    }
  }
  v1373 = qword_102312FF0;
  v1374 = *(std::__shared_weak_count **)algn_102312FF8;
  if (*(_QWORD *)algn_102312FF8)
  {
    v1081 = (unint64_t *)(*(_QWORD *)algn_102312FF8 + 8);
    do
      v1082 = __ldxr(v1081);
    while (__stxr(v1082 + 1, v1081));
  }
  v1371 = qword_102313A00;
  v1372 = *(std::__shared_weak_count **)algn_102313A08;
  if (*(_QWORD *)algn_102313A08)
  {
    v1083 = (unint64_t *)(*(_QWORD *)algn_102313A08 + 8);
    do
      v1084 = __ldxr(v1083);
    while (__stxr(v1084 + 1, v1083));
  }
  sub_100E852E4(&qword_10230D8F8, &v1373, &v1371);
  v1085 = v1372;
  if (v1372)
  {
    v1086 = (unint64_t *)&v1372->__shared_owners_;
    do
      v1087 = __ldaxr(v1086);
    while (__stlxr(v1087 - 1, v1086));
    if (!v1087)
    {
      ((void (*)(std::__shared_weak_count *))v1085->__on_zero_shared)(v1085);
      std::__shared_weak_count::__release_weak(v1085);
    }
  }
  v1088 = v1374;
  if (v1374)
  {
    v1089 = (unint64_t *)&v1374->__shared_owners_;
    do
      v1090 = __ldaxr(v1089);
    while (__stlxr(v1090 - 1, v1089));
    if (!v1090)
    {
      ((void (*)(std::__shared_weak_count *))v1088->__on_zero_shared)(v1088);
      std::__shared_weak_count::__release_weak(v1088);
    }
  }
  v1369 = qword_102313000;
  v1370 = *(std::__shared_weak_count **)algn_102313008;
  if (*(_QWORD *)algn_102313008)
  {
    v1091 = (unint64_t *)(*(_QWORD *)algn_102313008 + 8);
    do
      v1092 = __ldxr(v1091);
    while (__stxr(v1092 + 1, v1091));
  }
  v1367 = qword_102313A10;
  v1368 = *(std::__shared_weak_count **)algn_102313A18;
  if (*(_QWORD *)algn_102313A18)
  {
    v1093 = (unint64_t *)(*(_QWORD *)algn_102313A18 + 8);
    do
      v1094 = __ldxr(v1093);
    while (__stxr(v1094 + 1, v1093));
  }
  sub_100E852E4(&qword_10230D8F8, &v1369, &v1367);
  v1095 = v1368;
  if (v1368)
  {
    v1096 = (unint64_t *)&v1368->__shared_owners_;
    do
      v1097 = __ldaxr(v1096);
    while (__stlxr(v1097 - 1, v1096));
    if (!v1097)
    {
      ((void (*)(std::__shared_weak_count *))v1095->__on_zero_shared)(v1095);
      std::__shared_weak_count::__release_weak(v1095);
    }
  }
  v1098 = v1370;
  if (v1370)
  {
    v1099 = (unint64_t *)&v1370->__shared_owners_;
    do
      v1100 = __ldaxr(v1099);
    while (__stlxr(v1100 - 1, v1099));
    if (!v1100)
    {
      ((void (*)(std::__shared_weak_count *))v1098->__on_zero_shared)(v1098);
      std::__shared_weak_count::__release_weak(v1098);
    }
  }
  v1365 = qword_102313010;
  v1366 = *(std::__shared_weak_count **)algn_102313018;
  if (*(_QWORD *)algn_102313018)
  {
    v1101 = (unint64_t *)(*(_QWORD *)algn_102313018 + 8);
    do
      v1102 = __ldxr(v1101);
    while (__stxr(v1102 + 1, v1101));
  }
  v1363 = qword_102313A20;
  v1364 = *(std::__shared_weak_count **)algn_102313A28;
  if (*(_QWORD *)algn_102313A28)
  {
    v1103 = (unint64_t *)(*(_QWORD *)algn_102313A28 + 8);
    do
      v1104 = __ldxr(v1103);
    while (__stxr(v1104 + 1, v1103));
  }
  sub_100E852E4(&qword_10230D8F8, &v1365, &v1363);
  v1105 = v1364;
  if (v1364)
  {
    v1106 = (unint64_t *)&v1364->__shared_owners_;
    do
      v1107 = __ldaxr(v1106);
    while (__stlxr(v1107 - 1, v1106));
    if (!v1107)
    {
      ((void (*)(std::__shared_weak_count *))v1105->__on_zero_shared)(v1105);
      std::__shared_weak_count::__release_weak(v1105);
    }
  }
  v1108 = v1366;
  if (v1366)
  {
    v1109 = (unint64_t *)&v1366->__shared_owners_;
    do
      v1110 = __ldaxr(v1109);
    while (__stlxr(v1110 - 1, v1109));
    if (!v1110)
    {
      ((void (*)(std::__shared_weak_count *))v1108->__on_zero_shared)(v1108);
      std::__shared_weak_count::__release_weak(v1108);
    }
  }
  v1361 = qword_102313030;
  v1362 = *(std::__shared_weak_count **)algn_102313038;
  if (*(_QWORD *)algn_102313038)
  {
    v1111 = (unint64_t *)(*(_QWORD *)algn_102313038 + 8);
    do
      v1112 = __ldxr(v1111);
    while (__stxr(v1112 + 1, v1111));
  }
  v1359 = qword_102313A40;
  v1360 = *(std::__shared_weak_count **)algn_102313A48;
  if (*(_QWORD *)algn_102313A48)
  {
    v1113 = (unint64_t *)(*(_QWORD *)algn_102313A48 + 8);
    do
      v1114 = __ldxr(v1113);
    while (__stxr(v1114 + 1, v1113));
  }
  sub_100E852E4(&qword_10230D8F8, &v1361, &v1359);
  v1115 = v1360;
  if (v1360)
  {
    v1116 = (unint64_t *)&v1360->__shared_owners_;
    do
      v1117 = __ldaxr(v1116);
    while (__stlxr(v1117 - 1, v1116));
    if (!v1117)
    {
      ((void (*)(std::__shared_weak_count *))v1115->__on_zero_shared)(v1115);
      std::__shared_weak_count::__release_weak(v1115);
    }
  }
  v1118 = v1362;
  if (v1362)
  {
    v1119 = (unint64_t *)&v1362->__shared_owners_;
    do
      v1120 = __ldaxr(v1119);
    while (__stlxr(v1120 - 1, v1119));
    if (!v1120)
    {
      ((void (*)(std::__shared_weak_count *))v1118->__on_zero_shared)(v1118);
      std::__shared_weak_count::__release_weak(v1118);
    }
  }
  v1357 = qword_102313040;
  v1358 = *(std::__shared_weak_count **)algn_102313048;
  if (*(_QWORD *)algn_102313048)
  {
    v1121 = (unint64_t *)(*(_QWORD *)algn_102313048 + 8);
    do
      v1122 = __ldxr(v1121);
    while (__stxr(v1122 + 1, v1121));
  }
  v1355 = qword_102313A50;
  v1356 = *(std::__shared_weak_count **)algn_102313A58;
  if (*(_QWORD *)algn_102313A58)
  {
    v1123 = (unint64_t *)(*(_QWORD *)algn_102313A58 + 8);
    do
      v1124 = __ldxr(v1123);
    while (__stxr(v1124 + 1, v1123));
  }
  sub_100E852E4(&qword_10230D8F8, &v1357, &v1355);
  v1125 = v1356;
  if (v1356)
  {
    v1126 = (unint64_t *)&v1356->__shared_owners_;
    do
      v1127 = __ldaxr(v1126);
    while (__stlxr(v1127 - 1, v1126));
    if (!v1127)
    {
      ((void (*)(std::__shared_weak_count *))v1125->__on_zero_shared)(v1125);
      std::__shared_weak_count::__release_weak(v1125);
    }
  }
  v1128 = v1358;
  if (v1358)
  {
    v1129 = (unint64_t *)&v1358->__shared_owners_;
    do
      v1130 = __ldaxr(v1129);
    while (__stlxr(v1130 - 1, v1129));
    if (!v1130)
    {
      ((void (*)(std::__shared_weak_count *))v1128->__on_zero_shared)(v1128);
      std::__shared_weak_count::__release_weak(v1128);
    }
  }
  v1353 = qword_102313050;
  v1354 = *(std::__shared_weak_count **)algn_102313058;
  if (*(_QWORD *)algn_102313058)
  {
    v1131 = (unint64_t *)(*(_QWORD *)algn_102313058 + 8);
    do
      v1132 = __ldxr(v1131);
    while (__stxr(v1132 + 1, v1131));
  }
  v1351 = qword_102313A60;
  v1352 = *(std::__shared_weak_count **)algn_102313A68;
  if (*(_QWORD *)algn_102313A68)
  {
    v1133 = (unint64_t *)(*(_QWORD *)algn_102313A68 + 8);
    do
      v1134 = __ldxr(v1133);
    while (__stxr(v1134 + 1, v1133));
  }
  sub_100E852E4(&qword_10230D8F8, &v1353, &v1351);
  v1135 = v1352;
  if (v1352)
  {
    v1136 = (unint64_t *)&v1352->__shared_owners_;
    do
      v1137 = __ldaxr(v1136);
    while (__stlxr(v1137 - 1, v1136));
    if (!v1137)
    {
      ((void (*)(std::__shared_weak_count *))v1135->__on_zero_shared)(v1135);
      std::__shared_weak_count::__release_weak(v1135);
    }
  }
  v1138 = v1354;
  if (v1354)
  {
    v1139 = (unint64_t *)&v1354->__shared_owners_;
    do
      v1140 = __ldaxr(v1139);
    while (__stlxr(v1140 - 1, v1139));
    if (!v1140)
    {
      ((void (*)(std::__shared_weak_count *))v1138->__on_zero_shared)(v1138);
      std::__shared_weak_count::__release_weak(v1138);
    }
  }
  v1349 = qword_102313060;
  v1350 = *(std::__shared_weak_count **)algn_102313068;
  if (*(_QWORD *)algn_102313068)
  {
    v1141 = (unint64_t *)(*(_QWORD *)algn_102313068 + 8);
    do
      v1142 = __ldxr(v1141);
    while (__stxr(v1142 + 1, v1141));
  }
  v1347 = qword_102313A70;
  v1348 = *(std::__shared_weak_count **)algn_102313A78;
  if (*(_QWORD *)algn_102313A78)
  {
    v1143 = (unint64_t *)(*(_QWORD *)algn_102313A78 + 8);
    do
      v1144 = __ldxr(v1143);
    while (__stxr(v1144 + 1, v1143));
  }
  sub_100E852E4(&qword_10230D8F8, &v1349, &v1347);
  v1145 = v1348;
  if (v1348)
  {
    v1146 = (unint64_t *)&v1348->__shared_owners_;
    do
      v1147 = __ldaxr(v1146);
    while (__stlxr(v1147 - 1, v1146));
    if (!v1147)
    {
      ((void (*)(std::__shared_weak_count *))v1145->__on_zero_shared)(v1145);
      std::__shared_weak_count::__release_weak(v1145);
    }
  }
  v1148 = v1350;
  if (v1350)
  {
    v1149 = (unint64_t *)&v1350->__shared_owners_;
    do
      v1150 = __ldaxr(v1149);
    while (__stlxr(v1150 - 1, v1149));
    if (!v1150)
    {
      ((void (*)(std::__shared_weak_count *))v1148->__on_zero_shared)(v1148);
      std::__shared_weak_count::__release_weak(v1148);
    }
  }
  v1345 = qword_102313070;
  v1346 = *(std::__shared_weak_count **)algn_102313078;
  if (*(_QWORD *)algn_102313078)
  {
    v1151 = (unint64_t *)(*(_QWORD *)algn_102313078 + 8);
    do
      v1152 = __ldxr(v1151);
    while (__stxr(v1152 + 1, v1151));
  }
  v1343 = qword_102313A80;
  v1344 = *(std::__shared_weak_count **)algn_102313A88;
  if (*(_QWORD *)algn_102313A88)
  {
    v1153 = (unint64_t *)(*(_QWORD *)algn_102313A88 + 8);
    do
      v1154 = __ldxr(v1153);
    while (__stxr(v1154 + 1, v1153));
  }
  sub_100E852E4(&qword_10230D8F8, &v1345, &v1343);
  v1155 = v1344;
  if (v1344)
  {
    v1156 = (unint64_t *)&v1344->__shared_owners_;
    do
      v1157 = __ldaxr(v1156);
    while (__stlxr(v1157 - 1, v1156));
    if (!v1157)
    {
      ((void (*)(std::__shared_weak_count *))v1155->__on_zero_shared)(v1155);
      std::__shared_weak_count::__release_weak(v1155);
    }
  }
  v1158 = v1346;
  if (v1346)
  {
    v1159 = (unint64_t *)&v1346->__shared_owners_;
    do
      v1160 = __ldaxr(v1159);
    while (__stlxr(v1160 - 1, v1159));
    if (!v1160)
    {
      ((void (*)(std::__shared_weak_count *))v1158->__on_zero_shared)(v1158);
      std::__shared_weak_count::__release_weak(v1158);
    }
  }
  v1341 = qword_102313080;
  v1342 = *(std::__shared_weak_count **)algn_102313088;
  if (*(_QWORD *)algn_102313088)
  {
    v1161 = (unint64_t *)(*(_QWORD *)algn_102313088 + 8);
    do
      v1162 = __ldxr(v1161);
    while (__stxr(v1162 + 1, v1161));
  }
  v1339 = qword_102313A90;
  v1340 = *(std::__shared_weak_count **)algn_102313A98;
  if (*(_QWORD *)algn_102313A98)
  {
    v1163 = (unint64_t *)(*(_QWORD *)algn_102313A98 + 8);
    do
      v1164 = __ldxr(v1163);
    while (__stxr(v1164 + 1, v1163));
  }
  sub_100E852E4(&qword_10230D8F8, &v1341, &v1339);
  v1165 = v1340;
  if (v1340)
  {
    v1166 = (unint64_t *)&v1340->__shared_owners_;
    do
      v1167 = __ldaxr(v1166);
    while (__stlxr(v1167 - 1, v1166));
    if (!v1167)
    {
      ((void (*)(std::__shared_weak_count *))v1165->__on_zero_shared)(v1165);
      std::__shared_weak_count::__release_weak(v1165);
    }
  }
  v1168 = v1342;
  if (v1342)
  {
    v1169 = (unint64_t *)&v1342->__shared_owners_;
    do
      v1170 = __ldaxr(v1169);
    while (__stlxr(v1170 - 1, v1169));
    if (!v1170)
    {
      ((void (*)(std::__shared_weak_count *))v1168->__on_zero_shared)(v1168);
      std::__shared_weak_count::__release_weak(v1168);
    }
  }
  v1337 = qword_102313090;
  v1338 = *(std::__shared_weak_count **)algn_102313098;
  if (*(_QWORD *)algn_102313098)
  {
    v1171 = (unint64_t *)(*(_QWORD *)algn_102313098 + 8);
    do
      v1172 = __ldxr(v1171);
    while (__stxr(v1172 + 1, v1171));
  }
  v1335 = qword_102313AA0;
  v1336 = *(std::__shared_weak_count **)algn_102313AA8;
  if (*(_QWORD *)algn_102313AA8)
  {
    v1173 = (unint64_t *)(*(_QWORD *)algn_102313AA8 + 8);
    do
      v1174 = __ldxr(v1173);
    while (__stxr(v1174 + 1, v1173));
  }
  sub_100E852E4(&qword_10230D8F8, &v1337, &v1335);
  v1175 = v1336;
  if (v1336)
  {
    v1176 = (unint64_t *)&v1336->__shared_owners_;
    do
      v1177 = __ldaxr(v1176);
    while (__stlxr(v1177 - 1, v1176));
    if (!v1177)
    {
      ((void (*)(std::__shared_weak_count *))v1175->__on_zero_shared)(v1175);
      std::__shared_weak_count::__release_weak(v1175);
    }
  }
  v1178 = v1338;
  if (v1338)
  {
    v1179 = (unint64_t *)&v1338->__shared_owners_;
    do
      v1180 = __ldaxr(v1179);
    while (__stlxr(v1180 - 1, v1179));
    if (!v1180)
    {
      ((void (*)(std::__shared_weak_count *))v1178->__on_zero_shared)(v1178);
      std::__shared_weak_count::__release_weak(v1178);
    }
  }
  v1333 = qword_1023130A0;
  v1334 = *(std::__shared_weak_count **)algn_1023130A8;
  if (*(_QWORD *)algn_1023130A8)
  {
    v1181 = (unint64_t *)(*(_QWORD *)algn_1023130A8 + 8);
    do
      v1182 = __ldxr(v1181);
    while (__stxr(v1182 + 1, v1181));
  }
  v1331 = qword_102313AB0;
  v1332 = *(std::__shared_weak_count **)algn_102313AB8;
  if (*(_QWORD *)algn_102313AB8)
  {
    v1183 = (unint64_t *)(*(_QWORD *)algn_102313AB8 + 8);
    do
      v1184 = __ldxr(v1183);
    while (__stxr(v1184 + 1, v1183));
  }
  sub_100E852E4(&qword_10230D8F8, &v1333, &v1331);
  v1185 = v1332;
  if (v1332)
  {
    v1186 = (unint64_t *)&v1332->__shared_owners_;
    do
      v1187 = __ldaxr(v1186);
    while (__stlxr(v1187 - 1, v1186));
    if (!v1187)
    {
      ((void (*)(std::__shared_weak_count *))v1185->__on_zero_shared)(v1185);
      std::__shared_weak_count::__release_weak(v1185);
    }
  }
  v1188 = v1334;
  if (v1334)
  {
    v1189 = (unint64_t *)&v1334->__shared_owners_;
    do
      v1190 = __ldaxr(v1189);
    while (__stlxr(v1190 - 1, v1189));
    if (!v1190)
    {
      ((void (*)(std::__shared_weak_count *))v1188->__on_zero_shared)(v1188);
      std::__shared_weak_count::__release_weak(v1188);
    }
  }
  v1329 = qword_1023130C0;
  v1330 = *(std::__shared_weak_count **)algn_1023130C8;
  if (*(_QWORD *)algn_1023130C8)
  {
    v1191 = (unint64_t *)(*(_QWORD *)algn_1023130C8 + 8);
    do
      v1192 = __ldxr(v1191);
    while (__stxr(v1192 + 1, v1191));
  }
  v1327 = qword_102313AD0;
  v1328 = *(std::__shared_weak_count **)algn_102313AD8;
  if (*(_QWORD *)algn_102313AD8)
  {
    v1193 = (unint64_t *)(*(_QWORD *)algn_102313AD8 + 8);
    do
      v1194 = __ldxr(v1193);
    while (__stxr(v1194 + 1, v1193));
  }
  sub_100E852E4(&qword_10230D8F8, &v1329, &v1327);
  v1195 = v1328;
  if (v1328)
  {
    v1196 = (unint64_t *)&v1328->__shared_owners_;
    do
      v1197 = __ldaxr(v1196);
    while (__stlxr(v1197 - 1, v1196));
    if (!v1197)
    {
      ((void (*)(std::__shared_weak_count *))v1195->__on_zero_shared)(v1195);
      std::__shared_weak_count::__release_weak(v1195);
    }
  }
  v1198 = v1330;
  if (v1330)
  {
    v1199 = (unint64_t *)&v1330->__shared_owners_;
    do
      v1200 = __ldaxr(v1199);
    while (__stlxr(v1200 - 1, v1199));
    if (!v1200)
    {
      ((void (*)(std::__shared_weak_count *))v1198->__on_zero_shared)(v1198);
      std::__shared_weak_count::__release_weak(v1198);
    }
  }
  v1325 = qword_1023130D0;
  v1326 = *(std::__shared_weak_count **)algn_1023130D8;
  if (*(_QWORD *)algn_1023130D8)
  {
    v1201 = (unint64_t *)(*(_QWORD *)algn_1023130D8 + 8);
    do
      v1202 = __ldxr(v1201);
    while (__stxr(v1202 + 1, v1201));
  }
  v1323 = qword_102313AE0;
  v1324 = *(std::__shared_weak_count **)algn_102313AE8;
  if (*(_QWORD *)algn_102313AE8)
  {
    v1203 = (unint64_t *)(*(_QWORD *)algn_102313AE8 + 8);
    do
      v1204 = __ldxr(v1203);
    while (__stxr(v1204 + 1, v1203));
  }
  sub_100E852E4(&qword_10230D8F8, &v1325, &v1323);
  v1205 = v1324;
  if (v1324)
  {
    v1206 = (unint64_t *)&v1324->__shared_owners_;
    do
      v1207 = __ldaxr(v1206);
    while (__stlxr(v1207 - 1, v1206));
    if (!v1207)
    {
      ((void (*)(std::__shared_weak_count *))v1205->__on_zero_shared)(v1205);
      std::__shared_weak_count::__release_weak(v1205);
    }
  }
  v1208 = v1326;
  if (v1326)
  {
    v1209 = (unint64_t *)&v1326->__shared_owners_;
    do
      v1210 = __ldaxr(v1209);
    while (__stlxr(v1210 - 1, v1209));
    if (!v1210)
    {
      ((void (*)(std::__shared_weak_count *))v1208->__on_zero_shared)(v1208);
      std::__shared_weak_count::__release_weak(v1208);
    }
  }
  v1321 = qword_1023130E0;
  v1322 = *(std::__shared_weak_count **)algn_1023130E8;
  if (*(_QWORD *)algn_1023130E8)
  {
    v1211 = (unint64_t *)(*(_QWORD *)algn_1023130E8 + 8);
    do
      v1212 = __ldxr(v1211);
    while (__stxr(v1212 + 1, v1211));
  }
  v1319 = qword_102313AF0;
  v1320 = *(std::__shared_weak_count **)algn_102313AF8;
  if (*(_QWORD *)algn_102313AF8)
  {
    v1213 = (unint64_t *)(*(_QWORD *)algn_102313AF8 + 8);
    do
      v1214 = __ldxr(v1213);
    while (__stxr(v1214 + 1, v1213));
  }
  sub_100E852E4(&qword_10230D8F8, &v1321, &v1319);
  v1215 = v1320;
  if (v1320)
  {
    v1216 = (unint64_t *)&v1320->__shared_owners_;
    do
      v1217 = __ldaxr(v1216);
    while (__stlxr(v1217 - 1, v1216));
    if (!v1217)
    {
      ((void (*)(std::__shared_weak_count *))v1215->__on_zero_shared)(v1215);
      std::__shared_weak_count::__release_weak(v1215);
    }
  }
  v1218 = v1322;
  if (v1322)
  {
    v1219 = (unint64_t *)&v1322->__shared_owners_;
    do
      v1220 = __ldaxr(v1219);
    while (__stlxr(v1220 - 1, v1219));
    if (!v1220)
    {
      ((void (*)(std::__shared_weak_count *))v1218->__on_zero_shared)(v1218);
      std::__shared_weak_count::__release_weak(v1218);
    }
  }
  v1317 = qword_1023130F0;
  v1318 = *(std::__shared_weak_count **)algn_1023130F8;
  if (*(_QWORD *)algn_1023130F8)
  {
    v1221 = (unint64_t *)(*(_QWORD *)algn_1023130F8 + 8);
    do
      v1222 = __ldxr(v1221);
    while (__stxr(v1222 + 1, v1221));
  }
  v1315 = qword_102313B00;
  v1316 = *(std::__shared_weak_count **)algn_102313B08;
  if (*(_QWORD *)algn_102313B08)
  {
    v1223 = (unint64_t *)(*(_QWORD *)algn_102313B08 + 8);
    do
      v1224 = __ldxr(v1223);
    while (__stxr(v1224 + 1, v1223));
  }
  sub_100E852E4(&qword_10230D8F8, &v1317, &v1315);
  v1225 = v1316;
  if (v1316)
  {
    v1226 = (unint64_t *)&v1316->__shared_owners_;
    do
      v1227 = __ldaxr(v1226);
    while (__stlxr(v1227 - 1, v1226));
    if (!v1227)
    {
      ((void (*)(std::__shared_weak_count *))v1225->__on_zero_shared)(v1225);
      std::__shared_weak_count::__release_weak(v1225);
    }
  }
  v1228 = v1318;
  if (v1318)
  {
    v1229 = (unint64_t *)&v1318->__shared_owners_;
    do
      v1230 = __ldaxr(v1229);
    while (__stlxr(v1230 - 1, v1229));
    if (!v1230)
    {
      ((void (*)(std::__shared_weak_count *))v1228->__on_zero_shared)(v1228);
      std::__shared_weak_count::__release_weak(v1228);
    }
  }
  v1313 = qword_102313100;
  v1314 = *(std::__shared_weak_count **)algn_102313108;
  if (*(_QWORD *)algn_102313108)
  {
    v1231 = (unint64_t *)(*(_QWORD *)algn_102313108 + 8);
    do
      v1232 = __ldxr(v1231);
    while (__stxr(v1232 + 1, v1231));
  }
  v1311 = qword_102313B10;
  v1312 = *(std::__shared_weak_count **)algn_102313B18;
  if (*(_QWORD *)algn_102313B18)
  {
    v1233 = (unint64_t *)(*(_QWORD *)algn_102313B18 + 8);
    do
      v1234 = __ldxr(v1233);
    while (__stxr(v1234 + 1, v1233));
  }
  sub_100E852E4(&qword_10230D8F8, &v1313, &v1311);
  v1235 = v1312;
  if (v1312)
  {
    v1236 = (unint64_t *)&v1312->__shared_owners_;
    do
      v1237 = __ldaxr(v1236);
    while (__stlxr(v1237 - 1, v1236));
    if (!v1237)
    {
      ((void (*)(std::__shared_weak_count *))v1235->__on_zero_shared)(v1235);
      std::__shared_weak_count::__release_weak(v1235);
    }
  }
  v1238 = v1314;
  if (v1314)
  {
    v1239 = (unint64_t *)&v1314->__shared_owners_;
    do
      v1240 = __ldaxr(v1239);
    while (__stlxr(v1240 - 1, v1239));
    if (!v1240)
    {
      ((void (*)(std::__shared_weak_count *))v1238->__on_zero_shared)(v1238);
      std::__shared_weak_count::__release_weak(v1238);
    }
  }
  v1309 = qword_102313110;
  v1310 = *(std::__shared_weak_count **)algn_102313118;
  if (*(_QWORD *)algn_102313118)
  {
    v1241 = (unint64_t *)(*(_QWORD *)algn_102313118 + 8);
    do
      v1242 = __ldxr(v1241);
    while (__stxr(v1242 + 1, v1241));
  }
  v1307 = qword_102313B20;
  v1308 = *(std::__shared_weak_count **)algn_102313B28;
  if (*(_QWORD *)algn_102313B28)
  {
    v1243 = (unint64_t *)(*(_QWORD *)algn_102313B28 + 8);
    do
      v1244 = __ldxr(v1243);
    while (__stxr(v1244 + 1, v1243));
  }
  sub_100E852E4(&qword_10230D8F8, &v1309, &v1307);
  v1245 = v1308;
  if (v1308)
  {
    v1246 = (unint64_t *)&v1308->__shared_owners_;
    do
      v1247 = __ldaxr(v1246);
    while (__stlxr(v1247 - 1, v1246));
    if (!v1247)
    {
      ((void (*)(std::__shared_weak_count *))v1245->__on_zero_shared)(v1245);
      std::__shared_weak_count::__release_weak(v1245);
    }
  }
  v1248 = v1310;
  if (v1310)
  {
    v1249 = (unint64_t *)&v1310->__shared_owners_;
    do
      v1250 = __ldaxr(v1249);
    while (__stlxr(v1250 - 1, v1249));
    if (!v1250)
    {
      ((void (*)(std::__shared_weak_count *))v1248->__on_zero_shared)(v1248);
      std::__shared_weak_count::__release_weak(v1248);
    }
  }
  v1305 = qword_102313120;
  v1306 = *(std::__shared_weak_count **)algn_102313128;
  if (*(_QWORD *)algn_102313128)
  {
    v1251 = (unint64_t *)(*(_QWORD *)algn_102313128 + 8);
    do
      v1252 = __ldxr(v1251);
    while (__stxr(v1252 + 1, v1251));
  }
  v1303 = qword_102313B30;
  v1304 = *(std::__shared_weak_count **)algn_102313B38;
  if (*(_QWORD *)algn_102313B38)
  {
    v1253 = (unint64_t *)(*(_QWORD *)algn_102313B38 + 8);
    do
      v1254 = __ldxr(v1253);
    while (__stxr(v1254 + 1, v1253));
  }
  sub_100E852E4(&qword_10230D8F8, &v1305, &v1303);
  v1255 = v1304;
  if (v1304)
  {
    v1256 = (unint64_t *)&v1304->__shared_owners_;
    do
      v1257 = __ldaxr(v1256);
    while (__stlxr(v1257 - 1, v1256));
    if (!v1257)
    {
      ((void (*)(std::__shared_weak_count *))v1255->__on_zero_shared)(v1255);
      std::__shared_weak_count::__release_weak(v1255);
    }
  }
  v1258 = v1306;
  if (v1306)
  {
    v1259 = (unint64_t *)&v1306->__shared_owners_;
    do
      v1260 = __ldaxr(v1259);
    while (__stlxr(v1260 - 1, v1259));
    if (!v1260)
    {
      ((void (*)(std::__shared_weak_count *))v1258->__on_zero_shared)(v1258);
      std::__shared_weak_count::__release_weak(v1258);
    }
  }
  v1301 = qword_102313130;
  v1302 = *(std::__shared_weak_count **)algn_102313138;
  if (*(_QWORD *)algn_102313138)
  {
    v1261 = (unint64_t *)(*(_QWORD *)algn_102313138 + 8);
    do
      v1262 = __ldxr(v1261);
    while (__stxr(v1262 + 1, v1261));
  }
  v1299 = qword_102313B40;
  v1300 = *(std::__shared_weak_count **)algn_102313B48;
  if (*(_QWORD *)algn_102313B48)
  {
    v1263 = (unint64_t *)(*(_QWORD *)algn_102313B48 + 8);
    do
      v1264 = __ldxr(v1263);
    while (__stxr(v1264 + 1, v1263));
  }
  sub_100E852E4(&qword_10230D8F8, &v1301, &v1299);
  v1265 = v1300;
  if (v1300)
  {
    v1266 = (unint64_t *)&v1300->__shared_owners_;
    do
      v1267 = __ldaxr(v1266);
    while (__stlxr(v1267 - 1, v1266));
    if (!v1267)
    {
      ((void (*)(std::__shared_weak_count *))v1265->__on_zero_shared)(v1265);
      std::__shared_weak_count::__release_weak(v1265);
    }
  }
  v1268 = v1302;
  if (v1302)
  {
    v1269 = (unint64_t *)&v1302->__shared_owners_;
    do
      v1270 = __ldaxr(v1269);
    while (__stlxr(v1270 - 1, v1269));
    if (!v1270)
    {
      ((void (*)(std::__shared_weak_count *))v1268->__on_zero_shared)(v1268);
      std::__shared_weak_count::__release_weak(v1268);
    }
  }
  v1297 = qword_102313140;
  v1298 = *(std::__shared_weak_count **)algn_102313148;
  if (*(_QWORD *)algn_102313148)
  {
    v1271 = (unint64_t *)(*(_QWORD *)algn_102313148 + 8);
    do
      v1272 = __ldxr(v1271);
    while (__stxr(v1272 + 1, v1271));
  }
  v1295 = qword_102313B50;
  v1296 = *(std::__shared_weak_count **)algn_102313B58;
  if (*(_QWORD *)algn_102313B58)
  {
    v1273 = (unint64_t *)(*(_QWORD *)algn_102313B58 + 8);
    do
      v1274 = __ldxr(v1273);
    while (__stxr(v1274 + 1, v1273));
  }
  sub_100E852E4(&qword_10230D8F8, &v1297, &v1295);
  v1275 = v1296;
  if (v1296)
  {
    v1276 = (unint64_t *)&v1296->__shared_owners_;
    do
      v1277 = __ldaxr(v1276);
    while (__stlxr(v1277 - 1, v1276));
    if (!v1277)
    {
      ((void (*)(std::__shared_weak_count *))v1275->__on_zero_shared)(v1275);
      std::__shared_weak_count::__release_weak(v1275);
    }
  }
  v1278 = v1298;
  if (v1298)
  {
    v1279 = (unint64_t *)&v1298->__shared_owners_;
    do
      v1280 = __ldaxr(v1279);
    while (__stlxr(v1280 - 1, v1279));
    if (!v1280)
    {
      ((void (*)(std::__shared_weak_count *))v1278->__on_zero_shared)(v1278);
      std::__shared_weak_count::__release_weak(v1278);
    }
  }
  v1293 = qword_102313150;
  v1294 = *(std::__shared_weak_count **)algn_102313158;
  if (*(_QWORD *)algn_102313158)
  {
    v1281 = (unint64_t *)(*(_QWORD *)algn_102313158 + 8);
    do
      v1282 = __ldxr(v1281);
    while (__stxr(v1282 + 1, v1281));
  }
  v1291 = qword_102313B60;
  v1292 = *(std::__shared_weak_count **)algn_102313B68;
  if (*(_QWORD *)algn_102313B68)
  {
    v1283 = (unint64_t *)(*(_QWORD *)algn_102313B68 + 8);
    do
      v1284 = __ldxr(v1283);
    while (__stxr(v1284 + 1, v1283));
  }
  sub_100E852E4(&qword_10230D8F8, &v1293, &v1291);
  v1285 = v1292;
  if (v1292)
  {
    v1286 = (unint64_t *)&v1292->__shared_owners_;
    do
      v1287 = __ldaxr(v1286);
    while (__stlxr(v1287 - 1, v1286));
    if (!v1287)
    {
      ((void (*)(std::__shared_weak_count *))v1285->__on_zero_shared)(v1285);
      std::__shared_weak_count::__release_weak(v1285);
    }
  }
  v1288 = v1294;
  if (v1294)
  {
    v1289 = (unint64_t *)&v1294->__shared_owners_;
    do
      v1290 = __ldaxr(v1289);
    while (__stlxr(v1290 - 1, v1289));
    if (!v1290)
    {
      ((void (*)(std::__shared_weak_count *))v1288->__on_zero_shared)(v1288);
      std::__shared_weak_count::__release_weak(v1288);
    }
  }
}

void sub_10123F50C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100261F44((uint64_t)&a9);
  sub_100261F44((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_10123FD2C(uint64_t a1, uint64_t a2)
{
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_10012E444(a1, *(_QWORD *)(a2 + 8));
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    sub_10123FDA0(a1, i + 2, i + 2);
  return a1;
}

void sub_10123FD88(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100E87984(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10123FDA0(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *result;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v21;

  v5 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v6 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v5 >> 47) ^ v5);
  v7 = 0x9DDFEA08EB382D69 * (v6 ^ (v6 >> 47));
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v6 ^ (v6 >> 47));
      if (v7 >= v8)
        v3 = v7 % v8;
    }
    else
    {
      v3 = v7 & (v8 - 1);
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v10)
    {
      result = (_QWORD *)*v10;
      if (*v10)
      {
        do
        {
          v12 = result[1];
          if (v12 == v7)
          {
            if (result[2] == *a2)
              return result;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v3)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
  sub_10124000C(a1, v7, a3, (uint64_t)&v21);
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_10012E444(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v3 = v7 % v8;
      else
        v3 = v7;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v21 = *v19;
    *v19 = v21;
  }
  else
  {
    *v21 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v21;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*v21)
    {
      v20 = *(_QWORD *)(*v21 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8)
          v20 %= v8;
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v20) = v21;
    }
  }
  result = v21;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_10123FFE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    sub_100E88354((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10124000C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;

  v7 = a1 + 16;
  result = operator new(0x30uLL);
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v7;
  *result = 0;
  result[1] = a2;
  v9 = a3[1];
  result[2] = *a3;
  result[3] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = a3[3];
  result[4] = a3[2];
  result[5] = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_101240094()
{
  void *__p[2];

  sub_1015A2E04(qword_102311D60, "UserPlane");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102311D60, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102311D78, "SUPL");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102311D78, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102311D90, "SuplFlags");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102311D90, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102311DA8, "SuplHSLPServerAddress");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102311DA8, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102311DC0, "SuplCARootCert");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102311DC0, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102311DD8, "SuplUdpPortConfig");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102311DD8, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102311DF0, "EmergencySettings");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102311DF0, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102311E08, "Location");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102311E08, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102311E20, "EnableCPI");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102311E20, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102311E38, "EnableCPIDuringEmergencyMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102311E38, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102311E50, "EnableEarlyReturn");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102311E50, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102311E68, "EnableEarlyReturnDuringEmergencyMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102311E68, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102311E80, "AllowOTDOA");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102311E80, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102311E98, "AllowOTDOADuringEmergencyMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102311E98, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102311EB0, "DelayEmergencyUntilCallConnects");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102311EB0, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102311EC8, "EmergencyLocation");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102311EC8, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102311EE0, "ControlPlane");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102311EE0, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102311EF8, "EnableMSAssisted");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102311EF8, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102311F10, "EnableAdditionalAssistedConstellations");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102311F10, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102311F28, "Glonass");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102311F28, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102311F40, "Beidou");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102311F40, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102311F58, "Galileo");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102311F58, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102311F70, "Qzss");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102311F70, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102311F88, "Sbas");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102311F88, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102311FA0, "AML");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102311FA0, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102311FB8, "AugmentedEmergencyAction");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102311FB8, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102311FD0, "SMS");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102311FD0, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102311FE8, "Disabled");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102311FE8, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102312000, "SupportsAML");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102312000, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102312018, "HTTPS");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102312018, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102312030, "SMSDestination");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102312030, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102312048, "Destination");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102312048, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102312060, "SMSDestinationPort");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102312060, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102312078, "Binary");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102312078, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102312090, "DestinationPort");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102312090, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_1023120A8, "HTTPSAddress");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1023120A8, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_1023120C0, "FirstFixDelay");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1023120C0, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_1023120D8, "MultipleSmsEnabled");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1023120D8, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_1023120F0, "MaxFixDelay");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1023120F0, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102312108, "MinFixDelay");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102312108, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102312120, "URL");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102312120, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102312138, "EED");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102312138, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102312150, "BinarySMSDisabled");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102312150, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102312168, "CDMA");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102312168, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102312180, "ProvideHELOUnsolicited");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102312180, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102312198, "MeasurementTimeStampSource");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102312198, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_1023121B0, "LPPRel13LocationSource");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1023121B0, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_1023121C8, "LPPRel13WlanMeas");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1023121C8, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_1023121E0, "Enabled");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1023121E0, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_1023121F8, "ScanResultConfig");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1023121F8, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102312210, "EnableRssi");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102312210, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102312228, "PartnerID");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102312228, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102312240, "ADRCert");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102312240, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102312258, "RequestsSupported");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102312258, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102312270, "BaseURL");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102312270, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102312288, "BAA");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102312288, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_1023122A0, "EEDEnabledOnly");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1023122A0, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_1023122B8, "CertValidityPeriod");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1023122B8, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_1023122D0, "NoCertRequestWindow");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1023122D0, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_1023122E8, "NoCertRetryWindow");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1023122E8, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102312300, "CertAvailableRequestWindowMin");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102312300, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102312318, "CertAvailableRequestWindowMax");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102312318, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102312330, "CertAvailableRetryWindow");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102312330, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102312348, "EED2");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102312348, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102312360, "ADREnabled");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102312360, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102312378, "RequestsEnabled");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102312378, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102312390, "LISURL");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102312390, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_1023123A8, "ADRURL");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1023123A8, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_1023123C0, "ControlURL");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1023123C0, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_1023123D8, "FirstLISPOSTDelay");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1023123D8, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_1023123F0, "PeriodicLISPOSTDelay");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1023123F0, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102312408, "InitialADRPOSTTimeout");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102312408, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102312420, "IntermediateCert");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102312420, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102312438, "PartnerInfo");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102312438, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102312450, "DSAEnabled");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102312450, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102312468, "UnmaskCrashDetection");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102312468, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102312480, "NominalMitigations");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102312480, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102312498, "PowerMitigations");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102312498, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_1023124B0, "ThermalMitigations");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1023124B0, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_1023124C8, "CellularMitigations");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1023124C8, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_1023124E0, "RSRPThreshold");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1023124E0, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_1023124F8, "RSRPQueryRate");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1023124F8, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102312510, "RSRPSamplesToAvg");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102312510, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102312528, "ULFreqThreshold");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102312528, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102312540, "BelowThresholdMitigationParams");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102312540, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102312558, "LightParams");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102312558, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102312570, "ModerateParams");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102312570, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102312588, "HeavyAndGreaterParams");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102312588, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_1023125A0, "AllowNewStreamingRequests");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1023125A0, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_1023125B8, "AllowNewMediaRequests");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1023125B8, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_1023125D0, "MaxFramerate");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1023125D0, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_1023125E8, "MaxStreamingBitrate");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1023125E8, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102312600, "DropStreaming");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102312600, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102312618, "DelayMedia");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102312618, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102312630, "MediaUploadConfiguration");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102312630, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102312648, "NumInFlightUploads");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102312648, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102312660, "MaxUploadFileSizeMB");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102312660, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102312678, "MaxUploadQuotaMB");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102312678, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102312690, "PreCachedADR");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102312690, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_1023126A8, "DebounceDelay");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1023126A8, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_1023126C0, "DebounceGracePeriod");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1023126C0, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_1023126D8, "PeriodicDelay");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1023126D8, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_1023126F0, "PeriodicGracePeriod");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1023126F0, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102312708, "BackoffDelay");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102312708, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102312720, "BackoffGracePeriod");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102312720, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102312738, "ValidityInterval");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102312738, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102312750, "SMSOverNAS");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102312750, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102312768, "SMSDestination");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102312768, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102312780, "EnableForMCCOrPLMNs");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102312780, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102312798, "FirstFixDelay");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102312798, (void *)&_mh_execute_header);
  sub_1015A2E04(__p, "MobileAsset");
  sub_100E816F8((uint64_t *)__p);
}

void sub_101244D20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101244D40(uint64_t a1, unsigned int a2, const std::string *a3, __int128 *a4, __int128 *a5)
{
  _QWORD *v10;
  char *v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  const char *v16;
  const char *v17;
  int v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  uint64_t v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  uint64_t v30;
  __int16 v31;
  int v32;

  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 4) = a2;
  v10 = (_QWORD *)(a1 + 8);
  v11 = (char *)sub_1001CC818(a2);
  sub_1015A2E04(v10, v11);
  v12 = (_OWORD *)(a1 + 32);
  if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 32), a3->__r_.__value_.__l.__data_, a3->__r_.__value_.__l.__size_);
  }
  else
  {
    v13 = *(_OWORD *)&a3->__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)&a3->__r_.__value_.__l + 2);
    *v12 = v13;
  }
  if (*((char *)a4 + 23) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 56), *(void **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v14 = *a4;
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(a1 + 56) = v14;
  }
  *(_BYTE *)(a1 + 80) = 0;
  if (*((char *)a5 + 23) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 88), *(void **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    v15 = *a5;
    *(_QWORD *)(a1 + 104) = *((_QWORD *)a5 + 2);
    *(_OWORD *)(a1 + 88) = v15;
  }
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 184) = a1 + 192;
  *(_OWORD *)(a1 + 112) = xmmword_101C32730;
  *(_QWORD *)(a1 + 128) = 0x643F000000;
  *(_QWORD *)(a1 + 136) = 0x40C5180000000000;
  *(_DWORD *)(a1 + 144) = 1181376512;
  *(_QWORD *)(a1 + 156) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_DWORD *)(a1 + 164) = 0;
  *(_QWORD *)(a1 + 168) = 0x10000000100;
  *(_WORD *)(a1 + 176) = 256;
  *(_BYTE *)(a1 + 178) = 1;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = a1 + 216;
  v16 = sub_1001CC818(a2);
  sub_100CDC4C8(a1 + 232, v16);
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  v17 = (const char *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    v17 = *(const char **)v12;
  v18 = mkdir(v17, 0x1C0u);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021AA3F8);
  v19 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v20 = a1 + 32;
    if (*(char *)(a1 + 55) < 0)
      v20 = *(_QWORD *)v12;
    *(_DWORD *)buf = 136315394;
    v30 = v20;
    v31 = 1024;
    v32 = v18;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "TILE: creating directory, %s, ret, %d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AA3F8);
    v22 = a1 + 32;
    if (*(char *)(a1 + 55) < 0)
      v22 = *(_QWORD *)v12;
    v25 = 136315394;
    v26 = v22;
    v27 = 1024;
    v28 = v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: creating directory, %s, ret, %d", (const char *)&v25, 18);
    v24 = (uint8_t *)v23;
    sub_100512490("Generic", 1, 0, 2, "CLTilesSet::CLTilesSet(CLTilesManager_Type::TileType, const std::string &, const std::string &, const std::string &)", "%s\n", v23);
    if (v24 != buf)
      free(v24);
  }
  sub_100FC7868(a2, a3);
  return a1;
}

void sub_1012450AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, void **a14)
{
  uint64_t v14;
  void **v15;
  void **v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v19 = *(_QWORD *)(v14 + 304);
  *(_QWORD *)(v14 + 304) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = *(_QWORD *)(v14 + 296);
  *(_QWORD *)(v14 + 296) = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  sub_1006625E0(a12);
  sub_101245164(v17);
  if (*(char *)(v14 + 111) < 0)
    operator delete(*v16);
  if (*(char *)(v14 + 79) < 0)
    operator delete(*a13);
  if (*(char *)(v14 + 55) < 0)
    operator delete(*v15);
  if (*(char *)(v14 + 31) < 0)
    operator delete(*a14);
  _Unwind_Resume(a1);
}

uint64_t sub_101245164(uint64_t a1)
{
  sub_100067A00(a1 + 24, *(char **)(a1 + 32));
  sub_1008B9D24(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

_QWORD *sub_1012451A0(_QWORD *a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  sub_101245758(a1, 0xDuLL);
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021AA418);
  v2 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "TilesSet, Initialize CLTilesSetCollection", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021AA418);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "TilesSet, Initialize CLTilesSetCollection", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "CLTilesSetCollection::CLTilesSetCollection()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return a1;
}

void sub_10124533C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100CBD658((void ***)va);
  _Unwind_Resume(a1);
}

__int128 *sub_10124535C(__int128 *a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  void **v10;

  v3 = *((_QWORD *)a2 + 2);
  v4 = *a2;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v5 = *a1;
  *a1 = v4;
  v8 = v5;
  v6 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v3;
  v9 = v6;
  v10 = (void **)&v8;
  sub_100CBD658(&v10);
  return a1;
}

uint64_t sub_1012453B8(_QWORD *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t result;
  NSObject *v8;
  unsigned int v9;
  _BOOL4 v10;
  const char *v11;
  NSObject *v12;
  _BOOL4 v13;
  uint8_t *v14;
  int v15;
  uint8_t buf[4];
  unsigned int v17;
  __int16 v18;
  unsigned int v19;

  v5 = *a3;
  if (*(_DWORD *)(*a3 + 4) != a2)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021AA438);
    v8 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
    {
      v9 = *(_DWORD *)(*a3 + 4);
      *(_DWORD *)buf = 67109376;
      v17 = v9;
      v18 = 1024;
      v19 = a2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Mismatch of tile type inserting CLTilesSet. fTileType: %d, tileType: %d", buf, 0xEu);
    }
    v10 = sub_1001BFF7C(115, 0);
    result = 0;
    if (!v10)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021AA438);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "Mismatch of tile type inserting CLTilesSet. fTileType: %d, tileType: %d", &v15);
LABEL_21:
    v14 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLTilesSetCollection::addTilesSet(CLTilesManager_Type::TileType, std::unique_ptr<CLTilesSet>)", "%s\n", v11);
    if (v14 != buf)
      free(v14);
    return 0;
  }
  if (a2 < 0xD)
  {
    v6 = (uint64_t *)(*a1 + 8 * a2);
    *a3 = 0;
    sub_100CB3144(v6, v5);
    return 1;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021AA438);
  v12 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67109376;
    v17 = a2;
    v18 = 1024;
    v19 = a2;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "Invalid TileType value. tileType %d, index: %d", buf, 0xEu);
  }
  v13 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v13)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021AA438);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "Invalid TileType value. tileType %d, index: %d", &v15);
    goto LABEL_21;
  }
  return result;
}

void sub_1012456D4(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_101245700(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_10124572C(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

_QWORD *sub_101245758(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_10025E660(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1012457C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_100CBD658(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10124580C(uint64_t a1, void *a2)
{
  uint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  uint64_t v15;

  *(_QWORD *)a1 = 0;
  v4 = a1 + 8;
  sub_1015A2E04((_QWORD *)(a1 + 8), "ff:ff:ff:ff:ff:ff");
  *(int64x2_t *)(a1 + 32) = vdupq_n_s64(0xC076800000000000);
  *(_OWORD *)(a1 + 48) = xmmword_101BE5A00;
  *(_QWORD *)(a1 + 64) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 72) = -1;
  *(_QWORD *)(a1 + 80) = 0xBFF0000000000000;
  v5 = (void **)(a1 + 88);
  sub_1015A2E04((_QWORD *)(a1 + 88), "Unknown");
  *(_QWORD *)(a1 + 112) = 0xBFF0000000000000;
  *(_QWORD *)a1 = a2;
  sub_1015A2E04(&v14, (char *)objc_msgSend(objc_msgSend(a2, "objectForKey:", CFSTR("mac")), "UTF8String"));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)v4);
  *(_OWORD *)v4 = v14;
  *(_QWORD *)(v4 + 16) = v15;
  objc_msgSend(objc_msgSend(a2, "objectForKey:", CFSTR("latitude")), "doubleValue");
  *(_QWORD *)(a1 + 32) = v6;
  objc_msgSend(objc_msgSend(a2, "objectForKey:", CFSTR("longitude")), "doubleValue");
  *(_QWORD *)(a1 + 40) = v7;
  objc_msgSend(objc_msgSend(a2, "objectForKey:", CFSTR("altitude")), "doubleValue");
  *(_QWORD *)(a1 + 48) = v8;
  objc_msgSend(objc_msgSend(a2, "objectForKey:", CFSTR("horizontalAccuracy")), "doubleValue");
  *(_QWORD *)(a1 + 56) = v9;
  objc_msgSend(objc_msgSend(a2, "objectForKey:", CFSTR("verticalAccuracy")), "doubleValue");
  *(_QWORD *)(a1 + 64) = v10;
  *(_DWORD *)(a1 + 72) = objc_msgSend(objc_msgSend(a2, "objectForKey:", CFSTR("reach")), "intValue");
  objc_msgSend(objc_msgSend(a2, "objectForKey:", CFSTR("stationaryTimeInSeconds")), "doubleValue");
  *(_QWORD *)(a1 + 80) = v11;
  sub_1015A2E04(&v14, (char *)objc_msgSend(objc_msgSend(a2, "objectForKey:", CFSTR("loiType")), "UTF8String"));
  if (*(char *)(a1 + 111) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v14;
  *(_QWORD *)(a1 + 104) = v15;
  objc_msgSend(objc_msgSend(a2, "objectForKey:", CFSTR("lastUpdated")), "doubleValue");
  *(_QWORD *)(a1 + 112) = v12;
  return a1;
}

void sub_1012459E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

double sub_101245A28(uint64_t a1)
{
  return vabdd_f64(CFAbsoluteTimeGetCurrent(), *(double *)(a1 + 112));
}

uint64_t sub_101245A50@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  double Current;
  _QWORD *v30;
  uint64_t v31;
  _QWORD v33[2];
  uint64_t v34;
  _QWORD v35[10];
  char v36;
  uint64_t v37;

  sub_100263E50((uint64_t)v33);
  v4 = *(char *)(a1 + 31);
  if (v4 >= 0)
    v5 = a1 + 8;
  else
    v5 = *(_QWORD *)(a1 + 8);
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a1 + 31);
  else
    v6 = *(_QWORD *)(a1 + 16);
  sub_100263F7C(&v34, v5, v6);
  v7 = sub_100263F7C(&v34, (uint64_t)", ", 2);
  v8 = *v7;
  *(uint64_t *)((char *)v7 + *(_QWORD *)(*v7 - 24) + 16) = 8;
  *(_DWORD *)((char *)v7 + *(_QWORD *)(v8 - 24) + 8) = *(_DWORD *)((_BYTE *)v7 + *(_QWORD *)(v8 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v7, *(double *)(a1 + 32));
  v9 = sub_100263F7C(&v34, (uint64_t)", ", 2);
  v10 = *v9;
  *(uint64_t *)((char *)v9 + *(_QWORD *)(*v9 - 24) + 16) = 8;
  *(_DWORD *)((char *)v9 + *(_QWORD *)(v10 - 24) + 8) = *(_DWORD *)((_BYTE *)v9 + *(_QWORD *)(v10 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v9, *(double *)(a1 + 40));
  v11 = sub_100263F7C(&v34, (uint64_t)", alt, ", 7);
  v12 = *v11;
  *(uint64_t *)((char *)v11 + *(_QWORD *)(*v11 - 24) + 16) = 1;
  *(_DWORD *)((char *)v11 + *(_QWORD *)(v12 - 24) + 8) = *(_DWORD *)((_BYTE *)v11 + *(_QWORD *)(v12 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v11, *(double *)(a1 + 48));
  v13 = sub_100263F7C(&v34, (uint64_t)", hacc, ", 8);
  v14 = *v13;
  *(uint64_t *)((char *)v13 + *(_QWORD *)(*v13 - 24) + 16) = 1;
  *(_DWORD *)((char *)v13 + *(_QWORD *)(v14 - 24) + 8) = *(_DWORD *)((_BYTE *)v13 + *(_QWORD *)(v14 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v13, *(double *)(a1 + 56));
  v15 = sub_100263F7C(&v34, (uint64_t)", vacc, ", 8);
  v16 = *v15;
  *(uint64_t *)((char *)v15 + *(_QWORD *)(*v15 - 24) + 16) = 1;
  *(_DWORD *)((char *)v15 + *(_QWORD *)(v16 - 24) + 8) = *(_DWORD *)((_BYTE *)v15 + *(_QWORD *)(v16 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v15, *(double *)(a1 + 64));
  v17 = sub_100263F7C(&v34, (uint64_t)", reach, ", 9);
  v18 = *v17;
  *(uint64_t *)((char *)v17 + *(_QWORD *)(*v17 - 24) + 16) = 0;
  *(_DWORD *)((char *)v17 + *(_QWORD *)(v18 - 24) + 8) = *(_DWORD *)((_BYTE *)v17 + *(_QWORD *)(v18 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v17, *(unsigned int *)(a1 + 72));
  v19 = sub_100263F7C(&v34, (uint64_t)", stationaryTime, ", 18);
  v20 = *v19;
  *(uint64_t *)((char *)v19 + *(_QWORD *)(*v19 - 24) + 16) = 1;
  *(_DWORD *)((char *)v19 + *(_QWORD *)(v20 - 24) + 8) = *(_DWORD *)((_BYTE *)v19 + *(_QWORD *)(v20 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v19, *(double *)(a1 + 80));
  v21 = sub_100263F7C(&v34, (uint64_t)", loiType, ", 11);
  v22 = *(char *)(a1 + 111);
  if (v22 >= 0)
    v23 = a1 + 88;
  else
    v23 = *(_QWORD *)(a1 + 88);
  if (v22 >= 0)
    v24 = *(unsigned __int8 *)(a1 + 111);
  else
    v24 = *(_QWORD *)(a1 + 96);
  sub_100263F7C(v21, v23, v24);
  v25 = sub_100263F7C(&v34, (uint64_t)", lastUpdated, ", 15);
  v26 = *v25;
  *(uint64_t *)((char *)v25 + *(_QWORD *)(*v25 - 24) + 16) = 1;
  *(_DWORD *)((char *)v25 + *(_QWORD *)(v26 - 24) + 8) = *(_DWORD *)((_BYTE *)v25 + *(_QWORD *)(v26 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v25, *(double *)(a1 + 112));
  v27 = sub_100263F7C(&v34, (uint64_t)", age, ", 7);
  v28 = *v27;
  *(uint64_t *)((char *)v27 + *(_QWORD *)(*v27 - 24) + 16) = 1;
  *(_DWORD *)((char *)v27 + *(_QWORD *)(v28 - 24) + 8) = *(_DWORD *)((_BYTE *)v27 + *(_QWORD *)(v28 - 24) + 8) & 0xFFFFFEFB | 4;
  Current = CFAbsoluteTimeGetCurrent();
  v30 = (_QWORD *)std::ostream::operator<<(v27, vabdd_f64(Current, *(double *)(a1 + 112)));
  sub_100263F7C(v30, (uint64_t)"s", 1);
  std::stringbuf::str(a2, v35);
  *(_QWORD *)((char *)v33
  v34 = v31;
  if (v36 < 0)
    operator delete((void *)v35[8]);
  std::streambuf::~streambuf(v35);
  return std::ios::~ios(&v37);
}

void sub_101245E04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1012460A4(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  BOOL v10;
  uint64_t v11;
  int v12;
  unint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t result;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v8 = v7 + 1;
      if (v7 == -1 || v8 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v10 = v5++ >= 9;
      if (v10)
      {
        v6 = 0;
        v11 = OBJC_IVAR___PBDataReader__error;
        v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v11 = OBJC_IVAR___PBDataReader__error;
    v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v12 || (v6 & 7) == 4)
      break;
    if ((v6 >> 3) == 2)
    {
      v16 = 0;
      v17 = 0;
      v18 = 0;
      *(_BYTE *)(a1 + 20) |= 1u;
      while (1)
      {
        v19 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        v20 = v19 + 1;
        if (v19 == -1 || v20 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v21 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v19);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20;
        v18 |= (unint64_t)(v21 & 0x7F) << v16;
        if ((v21 & 0x80) == 0)
          goto LABEL_32;
        v16 += 7;
        v10 = v17++ >= 9;
        if (v10)
        {
          LODWORD(v18) = 0;
          goto LABEL_34;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_32:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        LODWORD(v18) = 0;
LABEL_34:
      *(_DWORD *)(a1 + 16) = v18;
    }
    else if ((v6 >> 3) == 1)
    {
      v14 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v14 <= 0xFFFFFFFFFFFFFFF7 && v14 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
      {
        v15 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v14);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v14 + 8;
      }
      else
      {
        *(_BYTE *)(a2 + v11) = 1;
        v15 = 0;
      }
      *(_QWORD *)(a1 + 8) = v15;
    }
    else
    {
      result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result)
        return result;
    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_101246724(id a1)
{
  qword_10230D990 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLBatchedDeviceMotionServiceSilo"));
}

void sub_101246844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_101246C70(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  operator delete();
}

void sub_1012470DC(id a1)
{
  qword_10229FFB8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "BatchedSensor");
}

void sub_10124710C()
{
  operator delete();
}

_QWORD *sub_101247120(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021AA4C0;
  result[1] = v3;
  return result;
}

uint64_t sub_101247154(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021AA4C0;
  a2[1] = v2;
  return result;
}

id sub_101247170(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  return _objc_msgSend(*(id *)(a1 + 8), "onBatchedData:N:", a2, *a3);
}

uint64_t sub_101247180(uint64_t a1, uint64_t a2)
{
  if (sub_100270DE8(a2, (uint64_t)&off_1021AA530))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1012471BC()
{
  return &off_1021AA530;
}

uint64_t sub_1012471C8()
{
  sub_1015A2E04(qword_10230D950, "Acc800Fp");
  dword_10230D968 = 800;
  __cxa_atexit((void (*)(void *))sub_1005CB0EC, qword_10230D950, (void *)&_mh_execute_header);
  sub_1015A2E04(&xmmword_10230D970, "DmFp");
  dword_10230D988 = 200;
  return __cxa_atexit((void (*)(void *))sub_1005CB0EC, &xmmword_10230D970, (void *)&_mh_execute_header);
}

void sub_101247254(uint64_t a1, uint64_t a2, __int128 *a3, int a4, double a5)
{
  __int128 v7;

  *(_QWORD *)a1 = off_1021AA550;
  *(_QWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = a4;
  *(_DWORD *)(a1 + 20) = 0;
  if (*((char *)a3 + 23) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 32), *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 32) = v7;
  }
  *(_QWORD *)(a1 + 80) = 0;
  *(double *)(a1 + 56) = a5;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(CFAbsoluteTime *)(a1 + 88) = CFAbsoluteTimeGetCurrent() + a5;
  sub_100119F3C(a1 + 96);
  operator new();
}

void sub_10124740C()
{
  operator delete();
}

void sub_101247458(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  os_activity_scope_state_s state;
  char v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  CLProfilingIdentify("CLSubHarvesterAvengerProactiveLocationRequestMonitor::onTimerFired");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 8), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021AA570);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v7 = 1;
    v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSubHarvesterAvengerProactiveLocationRequestMonitor::onTimerFired", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021AA570);
    v5 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2082;
      v13 = "activity";
      v14 = 2050;
      v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSubHarvesterAvengerProactiveLocationRequestMonitor::onTimerFired\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v7 = 0;
  }
  if (*(_QWORD *)(a2 + 24) == a1)
    sub_101247630(a2);
  if (v7)
    os_activity_scope_leave(&state);
}

void sub_101247610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

id sub_101247630(uint64_t a1)
{
  *(_DWORD *)(a1 + 20) = 0;
  *(CFAbsoluteTime *)(a1 + 88) = CFAbsoluteTimeGetCurrent() + *(double *)(a1 + 56);
  *(_QWORD *)(a1 + 80) = 0;
  if (*(_BYTE *)(a1 + 72))
    *(_BYTE *)(a1 + 72) = 0;
  sub_101247704(a1);
  sub_10016E3C4(*(_QWORD *)(a1 + 24));
  return sub_1001F40D0(*(_QWORD *)(a1 + 24), *(double *)(a1 + 88));
}

double sub_101247688(uint64_t a1, double result)
{
  unsigned int v3;
  double v4;
  double v5;

  v3 = *(_DWORD *)(a1 + 16) - *(_DWORD *)(a1 + 20);
  if (v3)
  {
    v4 = *(double *)(a1 + 80);
    v5 = *(double *)(a1 + 88);
    if (v4 <= v5)
    {
      result = v4 + (v5 - v4) / (double)v3;
      *(double *)(a1 + 64) = result;
      *(_BYTE *)(a1 + 72) = 1;
    }
    else
    {
      sub_101247818(a1, OS_LOG_TYPE_ERROR);
      sub_101247630(a1);
    }
  }
  else if (*(_BYTE *)(a1 + 72))
  {
    *(_BYTE *)(a1 + 72) = 0;
  }
  return result;
}

uint64_t sub_101247704(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;

  v2 = a1 + 96;
  sub_100019BD4(a1 + 96, "currentRequests", (unsigned int *)(a1 + 20));
  sub_10018A4CC(v2, "nextResetTime", (const void *)(a1 + 88));
  sub_10018A4CC(v2, "lastRequestTime", (const void *)(a1 + 80));
  v3 = sub_1001FD94C();
  v4 = (const char *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    v4 = *(const char **)v4;
  sub_1000CADE4(v3, v4, v2);
  v5 = sub_1001FD94C();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 944))(v5);
}

uint64_t sub_10124778C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1021AA550;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    sub_1009865B8(v2);
    operator delete();
  }
  sub_10011A5A8(a1 + 96);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  return a1;
}

void sub_1012477F4(uint64_t a1)
{
  sub_10124778C(a1);
  operator delete();
}

void sub_101247818(uint64_t a1, os_log_type_t type)
{
  NSObject *v4;
  _BOOL4 v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  CFAbsoluteTime Current;
  double v12;
  uint64_t v13;
  _DWORD v14[2];
  __int16 v15;
  const char *v16;
  __int16 v17;
  _BOOL4 v18;
  __int16 v19;
  _QWORD *v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  unint64_t v28;
  __int16 v29;
  unint64_t v30;
  __int16 v31;
  double v32;
  __int16 v33;
  double v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;

  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021AA590);
  v4 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, type))
  {
    v5 = sub_101247A20(a1);
    v6 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v6 = (_QWORD *)*v6;
    v8 = *(unsigned int *)(a1 + 16);
    v7 = *(unsigned int *)(a1 + 20);
    v9 = (unint64_t)*(double *)(a1 + 56);
    if (*(_BYTE *)(a1 + 72))
      v10 = *(_QWORD *)(a1 + 64);
    else
      v10 = 0xBFF0000000000000;
    Current = CFAbsoluteTimeGetCurrent();
    v12 = *(double *)(a1 + 80);
    v13 = *(_QWORD *)(a1 + 88);
    v14[0] = 68291843;
    v14[1] = 0;
    v15 = 2082;
    v16 = "";
    v17 = 1025;
    v18 = v5;
    v19 = 2081;
    v20 = v6;
    v21 = 2049;
    v22 = v7;
    v23 = 2049;
    v24 = v8;
    v25 = 2049;
    v26 = (v8 - v7);
    v27 = 2049;
    v28 = v9;
    v29 = 2049;
    v30 = v10;
    v31 = 2049;
    v32 = Current - v12;
    v33 = 2049;
    v34 = v12;
    v35 = 2049;
    v36 = v13;
    v37 = 2050;
    v38 = 11;
    _os_log_impl((void *)&_mh_execute_header, v4, type, "{\"msg%{public}.0s\":\"Proactive Request Monitor Status\", \"isAllowedProactiveRequest\":%{private}hhd, \"identifier\":%{private, location:escape_only}s, \"fCurrentRequests\":%{private}lu, \"fMaxRequests\":%{private}lu, \"remainingRequests\":%{private}lu, \"fResetInterval\":%{private}lu, \"fTimeToWaitUntilForNextRequest\":\"%{private}f\", \"timeSinceLastRequest\":\"%{private}f\", \"fLastRequestTime\":\"%{private}f\", \"fNextResetTime\":\"%{private}f\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)v14, 0x7Cu);
  }
}

BOOL sub_1012479D0(uint64_t a1)
{
  _BOOL8 v2;
  double Current;

  v2 = sub_101247A20(a1);
  if (v2)
  {
    ++*(_DWORD *)(a1 + 20);
    Current = CFAbsoluteTimeGetCurrent();
    *(double *)(a1 + 80) = Current;
    sub_101247688(a1, Current);
    sub_101247704(a1);
  }
  return v2;
}

BOOL sub_101247A20(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 20) >= *(_DWORD *)(a1 + 16))
    return 0;
  if (!*(_BYTE *)(a1 + 72))
    return 1;
  return CFAbsoluteTimeGetCurrent() > *(double *)(a1 + 64) || *(_BYTE *)(a1 + 72) == 0;
}

id sub_101247A78(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 16) = a2;
  return sub_101247630(a1);
}

void sub_101247A80(uint64_t a1)
{
  sub_101247818(a1, OS_LOG_TYPE_DEBUG);
}

void sub_101247A88(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_101247AB4(id a1)
{
  qword_1022A0208 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

uint64_t sub_101247AE0()
{
  uint64_t result;

  result = sub_1000A42B0();
  if ((_DWORD)result)
    operator new();
  return result;
}

void sub_101247B48()
{
  operator delete();
}

uint64_t sub_101247B6C()
{
  if (qword_10230D9A0 != -1)
    dispatch_once(&qword_10230D9A0, &stru_1021AA5B0);
  return qword_102313B70;
}

void sub_101247BB4(_QWORD *a1)
{
  sub_101221A60(a1);
  operator delete();
}

double sub_101247BD8(uint64_t a1, int a2, double *a3)
{
  NSObject *v4;
  double v5;
  const char *v6;
  uint8_t *v7;
  _UNKNOWN **v10;
  NSObject *v11;
  double v12;
  double v14;
  const char *v15;
  uint8_t *v16;
  int v17;
  double v18;
  __int16 v19;
  _UNKNOWN **v20;
  uint8_t buf[4];
  double v22;
  __int16 v23;
  _UNKNOWN **v24;

  if (a2)
  {
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_1021AA638);
    v4 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      LODWORD(v22) = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "[AccessoryMonitor] Unrecognized update interval notification %{public}d", buf, 8u);
    }
    v5 = 0.0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_1021AA638);
      v17 = 67240192;
      LODWORD(v18) = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 17, "[AccessoryMonitor] Unrecognized update interval notification %{public}d", &v17, 8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "virtual CFTimeInterval CLAccessoryMonitor::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  else
  {
    sub_101221BDC(a1);
    if (*a3 <= 0.0)
      v10 = &off_10221D118;
    else
      v10 = &off_10221D100;
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_1021AA638);
    v11 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_INFO))
    {
      v12 = *a3;
      *(_DWORD *)buf = 134349314;
      v22 = v12;
      v23 = 2114;
      v24 = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "[AccessoryMonitor] Setting update interval to %{public}f, reportInterval %{public}@", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_1021AA638);
      v14 = *a3;
      v17 = 134349314;
      v18 = v14;
      v19 = 2114;
      v20 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 1, "[AccessoryMonitor] Setting update interval to %{public}f, reportInterval %{public}@", &v17, 22);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "virtual CFTimeInterval CLAccessoryMonitor::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    (*(void (**)(_QWORD, const __CFString *, _UNKNOWN **))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), CFSTR("ReportInterval"), v10);
    return *a3;
  }
  return v5;
}

void sub_101247F4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 *v6;
  unint64_t v7;
  BOOL v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  NSObject *v12;
  uint64_t v13;
  const char *v14;
  unint64_t TimeStamp;
  double v16;
  int64_t v17;
  unsigned __int8 *v18;
  int v19;
  unsigned __int8 *v20;
  __int16 v21;
  int64_t v22;
  uint8_t buf[4];
  unsigned __int8 *v24;
  __int16 v25;
  int64_t v26;

  if (IOHIDEventGetType(a4) != 1)
  {
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_1021AA638);
    v12 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      LODWORD(v24) = IOHIDEventGetType(a4);
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "[AccessoryMonitor] unexpected event type %{public}u", buf, 8u);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_1021AA638);
    v13 = qword_10229FD88;
    v19 = 67240192;
    LODWORD(v20) = IOHIDEventGetType(a4);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v13, 17, "[AccessoryMonitor] unexpected event type %{public}u", &v19, 8);
    v11 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 0, "virtual void CLAccessoryMonitor::onEventData(void *, void *, IOHIDEventRef)", "%s\n", v14);
    if (v11 == buf)
      return;
LABEL_24:
    free(v11);
    return;
  }
  v17 = 0;
  v18 = 0;
  IOHIDEventGetVendorDefinedData(a4, &v18, &v17);
  v7 = v17;
  v6 = v18;
  if (v18)
    v8 = v17 <= 0;
  else
    v8 = 1;
  if (!v8)
  {
    TimeStamp = IOHIDEventGetTimeStamp(a4);
    v16 = sub_100127828(TimeStamp);
    sub_1012482BC(a1, v6, v7, v16);
    return;
  }
  if (qword_10229FD80 != -1)
    dispatch_once(&qword_10229FD80, &stru_1021AA638);
  v9 = qword_10229FD88;
  if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 134349312;
    v24 = v18;
    v25 = 2048;
    v26 = v17;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "[AccessoryMonitor] invalid message: empty message %{public}p (%zd)", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_1021AA638);
    v19 = 134349312;
    v20 = v18;
    v21 = 2048;
    v22 = v17;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 17, "[AccessoryMonitor] invalid message: empty message %{public}p (%zd)", &v19, 22);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 0, "virtual void CLAccessoryMonitor::onEventData(void *, void *, IOHIDEventRef)", "%s\n", v10);
    if (v11 != buf)
      goto LABEL_24;
  }
}

void sub_1012482BC(uint64_t a1, unsigned __int8 *a2, unint64_t a3, double a4)
{
  NSObject *v5;
  const char *v6;
  unint64_t v8;
  NSObject *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  const char *v18;
  NSObject *v19;
  os_log_type_t v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  NSObject *v28;
  int v29;
  int v30;
  size_t v31;
  int v32;
  int v33;
  const char *v34;
  char *v35;
  int v36;
  _BYTE v37[10];
  uint64_t v38;
  unsigned __int8 *v39;
  _BYTE buf[40];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;

  if (a3 <= 7)
  {
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_1021AA638);
    v5 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134349312;
      *(_QWORD *)&buf[4] = a3;
      *(_WORD *)&buf[12] = 2050;
      *(_QWORD *)&buf[14] = 8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "[AccessoryMonitor] invalid message: length (%{public}zd) is smaller than header (%{public}zd)", buf, 0x16u);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_1021AA638);
    v36 = 134349312;
    *(_QWORD *)v37 = a3;
    *(_WORD *)&v37[8] = 2050;
    v38 = 8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 17, "[AccessoryMonitor] invalid message: length (%{public}zd) is smaller than header (%{public}zd)", &v36, 22);
LABEL_19:
    v10 = (char *)v6;
    sub_100512490("Generic", 1, 0, 0, "void CLAccessoryMonitor::onMonitorEvent(const uint8_t *const, const size_t, const CFTimeInterval)", "%s\n", v6);
    if (v10 != buf)
    {
LABEL_20:
      free(v10);
      return;
    }
    return;
  }
  v8 = *((unsigned __int16 *)a2 + 1);
  if (v8 < a3)
  {
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_1021AA638);
    v9 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134349312;
      *(_QWORD *)&buf[4] = a3;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "[AccessoryMonitor] invalid message: length (%{public}zd) is smaller than reported message size (%{public}d)", buf, 0x12u);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_1021AA638);
    v36 = 134349312;
    *(_QWORD *)v37 = a3;
    *(_WORD *)&v37[8] = 1026;
    LODWORD(v38) = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 17, "[AccessoryMonitor] invalid message: length (%{public}zd) is smaller than reported message size (%{public}d)", &v36, 18);
    goto LABEL_19;
  }
  if (*a2 - 18 > 0xFFFFFFFB)
  {
    if (a2[1] < 0x10u)
    {
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_1021AA638);
      v28 = qword_10229FD88;
      if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEBUG))
      {
        v29 = a2[1];
        v30 = a2[4];
        *(_DWORD *)buf = 67240962;
        *(_DWORD *)&buf[4] = v29;
        *(_WORD *)&buf[8] = 1026;
        *(_DWORD *)&buf[10] = v30;
        *(_WORD *)&buf[14] = 1040;
        *(_DWORD *)&buf[16] = v8 - 8;
        *(_WORD *)&buf[20] = 2098;
        *(_QWORD *)&buf[22] = a2 + 8;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "[AccessoryMonitor] event type %{public}d, seq %{public}u, payload bytes %{public}.*P", buf, 0x1Eu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD80 != -1)
          dispatch_once(&qword_10229FD80, &stru_1021AA638);
        v32 = a2[1];
        v33 = a2[4];
        v36 = 67240962;
        *(_DWORD *)v37 = v32;
        *(_WORD *)&v37[4] = 1026;
        *(_DWORD *)&v37[6] = v33;
        LOWORD(v38) = 1040;
        *(_DWORD *)((char *)&v38 + 2) = v8 - 8;
        HIWORD(v38) = 2098;
        v39 = a2 + 8;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 2, "[AccessoryMonitor] event type %{public}d, seq %{public}u, payload bytes %{public}.*P", &v36, 30);
        v35 = (char *)v34;
        sub_100512490("Generic", 1, 0, 2, "void CLAccessoryMonitor::onMonitorEvent(const uint8_t *const, const size_t, const CFTimeInterval)", "%s\n", v34);
        if (v35 != buf)
          free(v35);
      }
      v50 = 0;
      v49 = 0u;
      v48 = 0u;
      v47 = 0u;
      v46 = 0u;
      v45 = 0u;
      v44 = 0u;
      v43 = 0u;
      v42 = 0u;
      v41 = 0u;
      memset(&buf[8], 0, 32);
      *(double *)buf = a4;
      bzero(&buf[8], 0xB1uLL);
      if (a3 >= 0xB1)
        v31 = 177;
      else
        v31 = a3;
      memcpy(&buf[8], a2, v31);
      sub_10012AC18(a1, 0, (uint64_t)buf, 192);
      return;
    }
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_1021AA638);
    v19 = qword_10229FD88;
    sub_100197040();
    if (sub_10075D288())
      v20 = OS_LOG_TYPE_FAULT;
    else
      v20 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v19, v20))
    {
      v21 = a2[1];
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v21;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "[AccessoryMonitor] invalid message: unknown type (%{public}d), dropping", buf, 8u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_1021AA638);
    v22 = qword_10229FD88;
    sub_100197040();
    v23 = sub_10075D288();
    v24 = a2[1];
    v36 = 67240192;
    *(_DWORD *)v37 = v24;
    if (v23)
      v25 = 17;
    else
      v25 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v22, v25, "[AccessoryMonitor] invalid message: unknown type (%{public}d), dropping", &v36, 8);
  }
  else
  {
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_1021AA638);
    v11 = qword_10229FD88;
    sub_100197040();
    if (sub_10075D288())
      v12 = OS_LOG_TYPE_FAULT;
    else
      v12 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a2;
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)&buf[4] = 17;
      *(_WORD *)&buf[8] = 1026;
      *(_DWORD *)&buf[10] = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "[AccessoryMonitor] invalid message: mismatched version (local:%{public}d remote:%{public}d), dropping", buf, 0xEu);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_1021AA638);
    v14 = qword_10229FD88;
    sub_100197040();
    v15 = sub_10075D288();
    v16 = *a2;
    v36 = 67240448;
    *(_DWORD *)v37 = 17;
    *(_WORD *)&v37[4] = 1026;
    *(_DWORD *)&v37[6] = v16;
    if (v15)
      v17 = 17;
    else
      v17 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v14, v17, "[AccessoryMonitor] invalid message: mismatched version (local:%{public}d remote:%{public}d), dropping", &v36, 14);
  }
  v10 = (char *)v18;
  sub_100512490("Generic", 1, 0, 2, "void CLAccessoryMonitor::onMonitorEvent(const uint8_t *const, const size_t, const CFTimeInterval)", "%s\n", v18);
  if (v10 != buf)
    goto LABEL_20;
}

void sub_101248AAC(id a1)
{
  qword_10229FD88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Accessory");
}

void sub_101248B7C(id a1)
{
  qword_10230D9B0 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLSensorRecorderNotifierSilo"));
}

uint64_t sub_101248C30(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_101249828;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_10230D9D0 != -1)
    dispatch_once(&qword_10230D9D0, block);
  return qword_102313B78;
}

uint64_t sub_101248E04(uint64_t a1)
{
  uint64_t result;

  result = sub_101248E2C(*(_DWORD *)(a1 + 32));
  if ((_DWORD)result)
    byte_10230D9C0 = 1;
  return result;
}

uint64_t sub_101248E2C(unsigned int a1)
{
  unint64_t v2;
  uint64_t result;

  v2 = sub_1001B7910();
  result = sub_10008D1F0(a1);
  if ((_DWORD)result)
  {
    if (a1 == 2)
    {
      if ((v2 & 0x10000000) != 0)
        return (sub_1001E4BF4() >> 4) & 1;
      else
        return 0;
    }
    else if (a1 == 1)
    {
      return (~(_DWORD)v2 & 0x10040000) == 0;
    }
    else
    {
      return (v2 >> 28) & 1;
    }
  }
  return result;
}

uint64_t sub_101248F0C(uint64_t a1, unsigned int a2, unsigned int a3)
{
  NSObject *v4;
  uint64_t v5;
  const char *v6;
  unsigned int *v9;
  const __CFString *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  const char *v16;
  uint8_t *v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t buf[4];
  unsigned int v23;
  __int16 v24;
  int v25;

  HIDWORD(v19) = a3;
  if (a3 >= 0x65)
  {
    if (qword_10229FDB0 != -1)
      dispatch_once(&qword_10229FDB0, &stru_1021AA818);
    v4 = qword_10229FDB8;
    if (os_log_type_enabled((os_log_t)qword_10229FDB8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240448;
      v23 = a3;
      v24 = 1026;
      v25 = 100;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "requested sampling rate of %{public}d is greater than the max allowed of %{public}d", buf, 0xEu);
    }
    v5 = 0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDB0 != -1)
        dispatch_once(&qword_10229FDB0, &stru_1021AA818);
      LODWORD(v20) = 67240448;
      HIDWORD(v20) = a3;
      LOWORD(v21) = 1026;
      *(_DWORD *)((char *)&v21 + 2) = 100;
      LODWORD(v19) = 14;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDB8, 17, "requested sampling rate of %{public}d is greater than the max allowed of %{public}d", &v20, v19, v20, v21);
LABEL_37:
      v18 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLSensorRecorderNotifier::setSensorSampleRate(CLSensorRecorder_Types::DataType, unsigned int)", "%s\n", v6);
      if (v18 != buf)
        free(v18);
      return 0;
    }
    return v5;
  }
  switch(a2)
  {
    case 2u:
      v9 = (unsigned int *)(a1 + 320);
      v10 = CFSTR("kPressureSampleRate");
      goto LABEL_16;
    case 1u:
      v9 = (unsigned int *)(a1 + 308);
      v10 = CFSTR("kGyroSampleRate");
      goto LABEL_16;
    case 0u:
      v9 = (unsigned int *)(a1 + 300);
      v10 = CFSTR("kAccelSampleRate");
LABEL_16:
      qword_10230D9D8 = (uint64_t)v10;
      if (*v9 != a3)
      {
        if (qword_10229FDB0 != -1)
          dispatch_once(&qword_10229FDB0, &stru_1021AA818);
        v11 = qword_10229FDB8;
        if (os_log_type_enabled((os_log_t)qword_10229FDB8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          v23 = a3;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "setting desired accel sampling rate to %dhz", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FDB0 != -1)
            dispatch_once(&qword_10229FDB0, &stru_1021AA818);
          LODWORD(v20) = 67109120;
          HIDWORD(v20) = a3;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDB8, 0, "setting desired accel sampling rate to %dhz", &v20);
          v17 = (uint8_t *)v16;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLSensorRecorderNotifier::setSensorSampleRate(CLSensorRecorder_Types::DataType, unsigned int)", "%s\n", v16);
          if (v17 != buf)
            free(v17);
        }
        *v9 = a3;
        v12 = sub_1001FD94C();
        sub_10018AAE4(v12, (const __CFString *)qword_10230D9D8, (unsigned int *)&v19 + 1);
        v13 = sub_1001FD94C();
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 944))(v13);
      }
      v5 = 1;
      sub_10124BC20(a1, a2, 1, 129600.0);
      return v5;
  }
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_1021AA838);
  v14 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Invalid data type.", buf, 2u);
  }
  v5 = 0;
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021AA838);
    LOWORD(v20) = 0;
    LODWORD(v19) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 16, "Invalid data type.", &v20, v19, v20, v21);
    goto LABEL_37;
  }
  return v5;
}

void sub_101249828()
{
  operator new();
}

void sub_101249870()
{
  operator delete();
}

void sub_101249894(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;
  int v5;

  v3 = sub_10124A33C(a1, "CLSensorRecorderNotifier", a2);
  *(_QWORD *)v3 = off_1021AA6A8;
  *(_QWORD *)(v3 + 160) = 0;
  *(_QWORD *)(v3 + 168) = 0;
  *(_QWORD *)(v3 + 176) = 0;
  *(_QWORD *)(a1 + 184) = objc_msgSend(*(id *)(v3 + 40), "newTimer");
  *(_QWORD *)(a1 + 192) = objc_msgSend(*(id *)(a1 + 40), "newTimer");
  *(_QWORD *)(a1 + 200) = objc_msgSend(*(id *)(a1 + 40), "newTimer");
  v4 = objc_msgSend(*(id *)(a1 + 40), "newTimer");
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 208) = v4;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(int64x2_t *)(a1 + 240) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(_OWORD *)(a1 + 264) = xmmword_101C48010;
  *(_OWORD *)(a1 + 280) = xmmword_101C48010;
  *(_OWORD *)(a1 + 296) = xmmword_101C48020;
  *(_DWORD *)(a1 + 312) = -1;
  if (sub_100762E90())
    v5 = 100;
  else
    v5 = 25;
  *(_DWORD *)(a1 + 316) = v5;
  *(_DWORD *)(a1 + 320) = v5;
  *(_QWORD *)(a1 + 324) = 0;
  *(_QWORD *)(a1 + 329) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  operator new();
}

void sub_10124A16C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v1 + 352);
  *(_QWORD *)(v1 + 352) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *v3;
  *v3 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(v1 + 328);
  *(_QWORD *)(v1 + 328) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *(_QWORD *)(v4 - 184) = v2;
  sub_10025E1F0((void ***)(v4 - 184));
  sub_10124BAA8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10124A33C(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_1021AA868;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_10124A3BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_10124A3D8(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  double v6;
  uint64_t v7;
  int v8;

  v6 = a1;
  v7 = a4;
  v8 = a6;
  operator new[]();
}

void sub_10124A570(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100261F44(v2);
  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

void sub_10124A58C(uint64_t a1)
{
  _QWORD *v2;
  int v3;
  id v4;
  NSMutableData *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  char *v13;
  _DWORD *v14;
  int v15;
  void *v16;
  NSMutableData *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  _DWORD *v24;
  int v25;
  NSMutableData *v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  _DWORD *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  const char *v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  const char *v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  const char *v48;
  int *v49;
  int v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  int v55;
  int v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  int v61;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = *(unsigned __int8 *)(a1 + 100);
  switch(v3)
  {
    case 5:
      sub_1009E29EC(v2[22], a1 + 40);
      v4 = objc_msgSend(objc_alloc((Class)CLSensorRecorderSensorMeta), "initWithDataType:", 2);
      objc_msgSend(v4, "setDataSize:", *(unsigned int *)(a1 + 96));
      objc_msgSend(v4, "setTimestamp:", *(_QWORD *)(a1 + 80));
      objc_msgSend(v4, "setStartTime:", *(double *)(a1 + 88));
      v17 = +[NSMutableData dataWithCapacity:](NSMutableData, "dataWithCapacity:", 20);
      +[CLSensorRecorderSensorMetaSerializer serializeMeta:toData:](CLSensorRecorderSensorMetaSerializer, "serializeMeta:toData:", v4, v17);
      v18 = *(unsigned int *)(a1 + 56);
      if (qword_10229FDB0 != -1)
        dispatch_once(&qword_10229FDB0, &stru_1021AA818);
      v7 = v18 + 20;
      v19 = qword_10229FDB8;
      if (os_log_type_enabled((os_log_t)qword_10229FDB8, OS_LOG_TYPE_DEBUG))
      {
        v20 = *(_QWORD *)(a1 + 40);
        v21 = *(_QWORD *)(a1 + 48);
        v22 = *(_DWORD *)(a1 + 56);
        v56 = 134349568;
        v57 = v20;
        v58 = 2050;
        v59 = v21;
        v60 = 1026;
        v61 = v22;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "Attempting to write pressure. startTime: %{public}f, timestamp: %{public}llu, dataSize: %{public}d", (uint8_t *)&v56, 0x1Cu);
      }
      v23 = sub_1001BFF7C(115, 2);
      if ((_DWORD)v23)
      {
        bzero(&v56, 0x65CuLL);
        if (qword_10229FDB0 != -1)
          dispatch_once(&qword_10229FDB0, &stru_1021AA818);
        v40 = *(_QWORD *)(a1 + 40);
        v41 = *(_QWORD *)(a1 + 48);
        v42 = *(_DWORD *)(a1 + 56);
        v50 = 134349568;
        v51 = v40;
        v52 = 2050;
        v53 = v41;
        v54 = 1026;
        v55 = v42;
        _os_log_send_and_compose_impl(2, 0, &v56, 1628, &_mh_execute_header, qword_10229FDB8, 2, "Attempting to write pressure. startTime: %{public}f, timestamp: %{public}llu, dataSize: %{public}d", &v50, 28);
        v44 = (int *)v43;
        v23 = sub_100512490("Generic", 1, 0, 2, "CLSensorRecorderNotifier::CLSensorRecorderNotifier(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v43);
        if (v44 != &v56)
          free(v44);
      }
      v13 = (char *)&v50 - ((v7 + 15) & 0x3FFFFFFF0);
      v24 = -[NSMutableData bytes](v17, "bytes", __chkstk_darwin(v23));
      v25 = v24[4];
      *(_OWORD *)v13 = *(_OWORD *)v24;
      *((_DWORD *)v13 + 4) = v25;
      memcpy(v13 + 20, *(const void **)(a1 + 64), *(unsigned int *)(a1 + 96));
      v16 = (void *)v2[16];
      break;
    case 2:
      sub_1009E29EC(v2[21], a1 + 40);
      v4 = objc_msgSend(objc_alloc((Class)CLSensorRecorderSensorMeta), "initWithDataType:", 1);
      objc_msgSend(v4, "setDataSize:", *(unsigned int *)(a1 + 96));
      objc_msgSend(v4, "setTimestamp:", *(_QWORD *)(a1 + 80));
      objc_msgSend(v4, "setStartTime:", *(double *)(a1 + 88));
      v26 = +[NSMutableData dataWithCapacity:](NSMutableData, "dataWithCapacity:", 20);
      +[CLSensorRecorderSensorMetaSerializer serializeMeta:toData:](CLSensorRecorderSensorMetaSerializer, "serializeMeta:toData:", v4, v26);
      v27 = *(unsigned int *)(a1 + 56);
      if (qword_10229FDB0 != -1)
        dispatch_once(&qword_10229FDB0, &stru_1021AA818);
      v7 = v27 + 20;
      v28 = qword_10229FDB8;
      if (os_log_type_enabled((os_log_t)qword_10229FDB8, OS_LOG_TYPE_DEBUG))
      {
        v29 = *(_QWORD *)(a1 + 40);
        v30 = *(_QWORD *)(a1 + 48);
        v31 = *(_DWORD *)(a1 + 56);
        v56 = 134349568;
        v57 = v29;
        v58 = 2050;
        v59 = v30;
        v60 = 1026;
        v61 = v31;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "Attempting to write gyro sample. startTime: %{public}f, timestamp: %{public}llu, dataSize: %{public}d", (uint8_t *)&v56, 0x1Cu);
      }
      v32 = sub_1001BFF7C(115, 2);
      if ((_DWORD)v32)
      {
        bzero(&v56, 0x65CuLL);
        if (qword_10229FDB0 != -1)
          dispatch_once(&qword_10229FDB0, &stru_1021AA818);
        v45 = *(_QWORD *)(a1 + 40);
        v46 = *(_QWORD *)(a1 + 48);
        v47 = *(_DWORD *)(a1 + 56);
        v50 = 134349568;
        v51 = v45;
        v52 = 2050;
        v53 = v46;
        v54 = 1026;
        v55 = v47;
        _os_log_send_and_compose_impl(2, 0, &v56, 1628, &_mh_execute_header, qword_10229FDB8, 2, "Attempting to write gyro sample. startTime: %{public}f, timestamp: %{public}llu, dataSize: %{public}d", &v50, 28);
        v49 = (int *)v48;
        v32 = sub_100512490("Generic", 1, 0, 2, "CLSensorRecorderNotifier::CLSensorRecorderNotifier(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v48);
        if (v49 != &v56)
          free(v49);
      }
      v13 = (char *)&v50 - ((v7 + 15) & 0x3FFFFFFF0);
      v33 = -[NSMutableData bytes](v26, "bytes", __chkstk_darwin(v32));
      v34 = v33[4];
      *(_OWORD *)v13 = *(_OWORD *)v33;
      *((_DWORD *)v13 + 4) = v34;
      memcpy(v13 + 20, *(const void **)(a1 + 64), *(unsigned int *)(a1 + 96));
      v16 = (void *)v2[15];
      break;
    case 1:
      sub_1009E29EC(v2[20], a1 + 40);
      v4 = objc_msgSend(objc_alloc((Class)CLSensorRecorderSensorMeta), "initWithDataType:", 0);
      objc_msgSend(v4, "setDataSize:", *(unsigned int *)(a1 + 96));
      objc_msgSend(v4, "setTimestamp:", *(_QWORD *)(a1 + 80));
      objc_msgSend(v4, "setStartTime:", *(double *)(a1 + 88));
      v5 = +[NSMutableData dataWithCapacity:](NSMutableData, "dataWithCapacity:", 20);
      +[CLSensorRecorderSensorMetaSerializer serializeMeta:toData:](CLSensorRecorderSensorMetaSerializer, "serializeMeta:toData:", v4, v5);
      v6 = *(unsigned int *)(a1 + 56);
      if (qword_10229FDB0 != -1)
        dispatch_once(&qword_10229FDB0, &stru_1021AA818);
      v7 = v6 + 20;
      v8 = qword_10229FDB8;
      if (os_log_type_enabled((os_log_t)qword_10229FDB8, OS_LOG_TYPE_DEBUG))
      {
        v9 = *(_QWORD *)(a1 + 40);
        v10 = *(_QWORD *)(a1 + 48);
        v11 = *(_DWORD *)(a1 + 56);
        v56 = 134349568;
        v57 = v9;
        v58 = 2050;
        v59 = v10;
        v60 = 1026;
        v61 = v11;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Attempting to write accel sample. startTime: %{public}f, timestamp: %{public}llu, dataSize: %{public}d", (uint8_t *)&v56, 0x1Cu);
      }
      v12 = sub_1001BFF7C(115, 2);
      if ((_DWORD)v12)
      {
        bzero(&v56, 0x65CuLL);
        if (qword_10229FDB0 != -1)
          dispatch_once(&qword_10229FDB0, &stru_1021AA818);
        v35 = *(_QWORD *)(a1 + 40);
        v36 = *(_QWORD *)(a1 + 48);
        v37 = *(_DWORD *)(a1 + 56);
        v50 = 134349568;
        v51 = v35;
        v52 = 2050;
        v53 = v36;
        v54 = 1026;
        v55 = v37;
        _os_log_send_and_compose_impl(2, 0, &v56, 1628, &_mh_execute_header, qword_10229FDB8, 2, "Attempting to write accel sample. startTime: %{public}f, timestamp: %{public}llu, dataSize: %{public}d", &v50, 28);
        v39 = (int *)v38;
        v12 = sub_100512490("Generic", 1, 0, 2, "CLSensorRecorderNotifier::CLSensorRecorderNotifier(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v38);
        if (v39 != &v56)
          free(v39);
      }
      v13 = (char *)&v50 - ((v7 + 15) & 0x3FFFFFFF0);
      v14 = -[NSMutableData bytes](v5, "bytes", __chkstk_darwin(v12));
      v15 = v14[4];
      *(_OWORD *)v13 = *(_OWORD *)v14;
      *((_DWORD *)v13 + 4) = v15;
      memcpy(v13 + 20, *(const void **)(a1 + 64), *(unsigned int *)(a1 + 96));
      v16 = (void *)v2[14];
      break;
    default:
      return;
  }
  objc_msgSend(v16, "provideSampleBytes:length:", v13, v7);

}

uint64_t sub_10124AD50(uint64_t result, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v2 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(result + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(result + 40) = v2;
  v3 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(result + 72) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t sub_10124AD84(uint64_t a1)
{
  return sub_100261F44(a1 + 64);
}

void sub_10124AD8C(uint64_t a1)
{
  uint64_t v1;
  double Current;
  NSObject *v3;
  uint64_t v4;
  _QWORD *v5;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[8];
  void *v10;
  char *v11;

  v1 = *(_QWORD *)(a1 + 32);
  if (objc_msgSend(*(id *)(v1 + 112), "isMonitoring"))
    sub_101248F0C(v1, 0, 0x64u);
  if (sub_10008950C(*(_QWORD *)(v1 + 160) + 72))
  {
    Current = CFAbsoluteTimeGetCurrent();
    sub_10124BEEC(v1, 0);
    if (vabdd_f64(Current, *(double *)(v1 + 240)) > *(double *)(v1 + 280))
    {
      if (qword_10229FDB0 != -1)
        dispatch_once(&qword_10229FDB0, &stru_1021AA818);
      v3 = qword_10229FDB8;
      if (os_log_type_enabled((os_log_t)qword_10229FDB8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Aggregating accel sensor recorder samples.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FDB0 != -1)
          dispatch_once(&qword_10229FDB0, &stru_1021AA818);
        v8[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDB8, 2, "Aggregating accel sensor recorder samples.", v8, 2);
        v7 = (uint8_t *)v6;
        sub_100512490("Generic", 1, 0, 2, "CLSensorRecorderNotifier::CLSensorRecorderNotifier(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v6);
        if (v7 != buf)
          free(v7);
      }
      v4 = *(_QWORD *)(v1 + 288);
      v5 = operator new(0x18uLL);
      *(_QWORD *)buf = v5;
      v11 = (char *)(v5 + 3);
      *v5 = v4;
      v5[1] = 0x7FEFFFFFFFFFFFFFLL;
      *((_BYTE *)v5 + 16) = 0;
      v10 = v5 + 3;
      (*(void (**)(_QWORD, uint8_t *))(**(_QWORD **)(v1 + 160) + 32))(*(_QWORD *)(v1 + 160), buf);
      *(double *)(v1 + 240) = Current;
      if (*(_QWORD *)buf)
      {
        v10 = *(void **)buf;
        operator delete(*(void **)buf);
      }
    }
  }
}

void sub_10124AFD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10124AFF4(uint64_t a1)
{
  uint64_t v1;
  double Current;
  NSObject *v3;
  uint64_t v4;
  _QWORD *v5;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[8];
  void *v10;
  char *v11;

  v1 = *(_QWORD *)(a1 + 32);
  if (objc_msgSend(*(id *)(v1 + 120), "isMonitoring"))
    sub_101248F0C(v1, 1u, 0x64u);
  if (sub_10008950C(*(_QWORD *)(v1 + 168) + 72))
  {
    Current = CFAbsoluteTimeGetCurrent();
    sub_10124BEEC(v1, 1u);
    if (vabdd_f64(Current, *(double *)(v1 + 248)) > *(double *)(v1 + 264))
    {
      if (qword_10229FDB0 != -1)
        dispatch_once(&qword_10229FDB0, &stru_1021AA818);
      v3 = qword_10229FDB8;
      if (os_log_type_enabled((os_log_t)qword_10229FDB8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Aggregating gyro sensor recorder samples.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FDB0 != -1)
          dispatch_once(&qword_10229FDB0, &stru_1021AA818);
        v8[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDB8, 2, "Aggregating gyro sensor recorder samples.", v8, 2);
        v7 = (uint8_t *)v6;
        sub_100512490("Generic", 1, 0, 2, "CLSensorRecorderNotifier::CLSensorRecorderNotifier(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v6);
        if (v7 != buf)
          free(v7);
      }
      v4 = *(_QWORD *)(v1 + 272);
      v5 = operator new(0x18uLL);
      *(_QWORD *)buf = v5;
      v11 = (char *)(v5 + 3);
      *v5 = v4;
      v5[1] = 0x7FEFFFFFFFFFFFFFLL;
      *((_BYTE *)v5 + 16) = 0;
      v10 = v5 + 3;
      (*(void (**)(_QWORD, uint8_t *))(**(_QWORD **)(v1 + 168) + 32))(*(_QWORD *)(v1 + 168), buf);
      *(double *)(v1 + 248) = Current;
      if (*(_QWORD *)buf)
      {
        v10 = *(void **)buf;
        operator delete(*(void **)buf);
      }
    }
  }
}

void sub_10124B238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10124B25C(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  double Current;
  NSObject *v4;
  uint64_t v5;
  _QWORD *v6;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  uint8_t buf[8];
  void *v11;
  char *v12;

  v1 = *(_QWORD *)(a1 + 32);
  if (objc_msgSend(*(id *)(v1 + 128), "isMonitoring"))
  {
    if (sub_100762E90())
      v2 = 100;
    else
      v2 = 25;
    sub_101248F0C(v1, 2u, v2);
  }
  if (sub_10008950C(*(_QWORD *)(v1 + 176) + 72))
  {
    Current = CFAbsoluteTimeGetCurrent();
    sub_10124BEEC(v1, 2u);
    if (vabdd_f64(Current, *(double *)(v1 + 256)) > *(double *)(v1 + 264))
    {
      if (qword_10229FDB0 != -1)
        dispatch_once(&qword_10229FDB0, &stru_1021AA818);
      v4 = qword_10229FDB8;
      if (os_log_type_enabled((os_log_t)qword_10229FDB8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Aggregating pressure sensor recorder samples.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FDB0 != -1)
          dispatch_once(&qword_10229FDB0, &stru_1021AA818);
        v9[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDB8, 2, "Aggregating pressure sensor recorder samples.", v9, 2);
        v8 = (uint8_t *)v7;
        sub_100512490("Generic", 1, 0, 2, "CLSensorRecorderNotifier::CLSensorRecorderNotifier(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v7);
        if (v8 != buf)
          free(v8);
      }
      v5 = *(_QWORD *)(v1 + 272);
      v6 = operator new(0x18uLL);
      *(_QWORD *)buf = v6;
      v12 = (char *)(v6 + 3);
      *v6 = v5;
      v6[1] = 0x7FEFFFFFFFFFFFFFLL;
      *((_BYTE *)v6 + 16) = 0;
      v11 = v6 + 3;
      (*(void (**)(_QWORD, uint8_t *))(**(_QWORD **)(v1 + 176) + 32))(*(_QWORD *)(v1 + 176), buf);
      *(double *)(v1 + 256) = Current;
      if (*(_QWORD *)buf)
      {
        v11 = *(void **)buf;
        operator delete(*(void **)buf);
      }
    }
  }
}

void sub_10124B4AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10124B4D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 32);
  result = sub_10008950C(*(_QWORD *)(v1 + 160) + 72);
  if ((_DWORD)result)
    return sub_1000131C4(*(_QWORD *)(v1 + 160), 1000);
  return result;
}

void sub_10124B510(uint64_t a1, _DWORD *a2, _BYTE *a3, uint64_t a4)
{
  NSObject *v7;
  NSObject *v8;
  os_activity_scope_state_s state;
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;

  CLProfilingIdentify("CLSensorRecorderNotifier::onFitnessTrackingNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021AA7D8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v10 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSensorRecorderNotifier::onFitnessTrackingNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021AA7D8);
    v8 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2082;
      v16 = "activity";
      v17 = 2050;
      v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSensorRecorderNotifier::onFitnessTrackingNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v10 = 0;
  }
  if (*a2 == 3)
  {
    *(_BYTE *)(a4 + 336) = *a3;
  }
  else if (!*a2)
  {
    *(_BYTE *)(a4 + 324) = a3[3];
  }
  if (v10)
    os_activity_scope_leave(&state);
}

void sub_10124B6DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10124B6F8(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v6;
  NSObject *v7;
  os_activity_scope_state_s state;
  char v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  uint64_t v17;

  CLProfilingIdentify("CLSensorRecorderNotifier::onSysdiagnoseStarted");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021AA7D8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v9 = 1;
    v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSensorRecorderNotifier::onSysdiagnoseStarted", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021AA7D8);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2082;
      v15 = "activity";
      v16 = 2050;
      v17 = a4;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSensorRecorderNotifier::onSysdiagnoseStarted\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v9 = 0;
  }
  if (*(_BYTE *)(a4 + 336) && *a2 == 9)
    sub_10124D138(a4);
  if (v9)
    os_activity_scope_leave(&state);
}

void sub_10124B8B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10124B8D8(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  os_activity_scope_state_s state;
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;

  CLProfilingIdentify("CLSensorRecorderNotifier::onSoftwareUpdateStorageRecovery");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021AA7D8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v10 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSensorRecorderNotifier::onSoftwareUpdateStorageRecovery", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021AA7D8);
    v8 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2082;
      v16 = "activity";
      v17 = 2050;
      v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSensorRecorderNotifier::onSoftwareUpdateStorageRecovery\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v10 = 0;
  }
  sub_10124D3F0((uint64_t *)a4, v6, a2);
  if (v10)
    os_activity_scope_leave(&state);
}

void sub_10124BA88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10124BAA8(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021AA868;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_10124BB1C(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  switch(a2)
  {
    case 2:
      v4 = a1 + 22;
      return sub_1009E3994(*v4, a3, a4);
    case 1:
      v4 = a1 + 21;
      return sub_1009E3994(*v4, a3, a4);
    case 0:
      v4 = a1 + 20;
      return sub_1009E3994(*v4, a3, a4);
  }
  return 0;
}

uint64_t sub_10124BB5C(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  switch(a2)
  {
    case 2:
      v4 = a1 + 22;
      return sub_1009E44D0(*v4, a3, a4);
    case 1:
      v4 = a1 + 21;
      return sub_1009E44D0(*v4, a3, a4);
    case 0:
      v4 = a1 + 20;
      return sub_1009E44D0(*v4, a3, a4);
  }
  return 0;
}

uint64_t sub_10124BB9C(uint64_t *a1, int a2, double a3, double a4)
{
  uint64_t *v4;

  switch(a2)
  {
    case 2:
      v4 = a1 + 22;
      return sub_1009E4D38(*v4, a3, a4);
    case 1:
      v4 = a1 + 21;
      return sub_1009E4D38(*v4, a3, a4);
    case 0:
      v4 = a1 + 20;
      return sub_1009E4D38(*v4, a3, a4);
  }
  return 0;
}

uint64_t sub_10124BBD8(uint64_t *a1, int a2, _QWORD *a3, uint64_t a4)
{
  uint64_t *v4;

  switch(a2)
  {
    case 2:
      v4 = a1 + 22;
      return sub_1009E3FAC(*v4, a3, a4);
    case 1:
      v4 = a1 + 21;
      return sub_1009E3FAC(*v4, a3, a4);
    case 0:
      v4 = a1 + 20;
      return sub_1009E3FAC(*v4, a3, a4);
  }
  return 0;
}

BOOL sub_10124BC18(uint64_t a1, unsigned int a2, double a3)
{
  return sub_10124BC20(a1, a2, 0, a3);
}

BOOL sub_10124BC20(uint64_t a1, unsigned int a2, int a3, double a4)
{
  _BOOL8 v8;
  NSObject *v9;
  const __CFString *v10;
  const __CFString *v11;
  const __CFString *v12;
  const __CFString *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  const char *v19;
  uint8_t *v20;
  unint64_t v21;
  _DWORD v22[2];
  __int16 v23;
  double v24;
  uint8_t buf[8];
  __int16 v26;
  double v27;

  v8 = sub_10008D1F0(a2);
  if (v8)
  {
    *(double *)&v21 = -1.79769313e308;
    if (qword_10229FDB0 != -1)
      dispatch_once(&qword_10229FDB0, &stru_1021AA818);
    v9 = qword_10229FDB8;
    if (os_log_type_enabled((os_log_t)qword_10229FDB8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)&buf[4] = a2;
      v26 = 2050;
      v27 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Record %{location:CLSensorRecorder_Types::DataType,public}d data for %{public}f", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDB0 != -1)
        dispatch_once(&qword_10229FDB0, &stru_1021AA818);
      v22[0] = 67240448;
      v22[1] = a2;
      v23 = 2050;
      v24 = a4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDB8, 0, "Record %{location:CLSensorRecorder_Types::DataType,public}d data for %{public}f", v22, 18);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLSensorRecorderNotifier::recordSensorData(CLSensorRecorder_Types::DataType, CFTimeInterval, BOOL)", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
    v10 = CFSTR("kPressureBufferSubscription");
    if (a3)
      v10 = CFSTR("kPressureBufferSubscriptionOverride");
    v11 = CFSTR("kGyroBufferSubscription");
    if (a3)
      v11 = CFSTR("kGyroBufferSubscriptionOverride");
    v12 = CFSTR("kAccelBufferSubscription");
    if (a3)
      v12 = CFSTR("kAccelBufferSubscriptionOverride");
    if (a2)
      v12 = 0;
    if (a2 != 1)
      v11 = v12;
    if (a2 == 2)
      v13 = v10;
    else
      v13 = v11;
    v14 = sub_1001FD94C();
    sub_1001FD9FC(v14, (uint64_t)v13, &v21);
    if (a4 >= 129600.0)
      a4 = 129600.0;
    v15 = *(double *)&v21;
    if (v15 < a4 + CFAbsoluteTimeGetCurrent())
    {
      v16 = sub_1001FD94C();
      *(double *)buf = a4 + CFAbsoluteTimeGetCurrent();
      sub_10018A534(v16, v13, buf);
      v17 = sub_1001FD94C();
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 944))(v17);
      sub_10124BEEC(a1, a2);
    }
  }
  return v8;
}

void sub_10124BEEC(uint64_t a1, unsigned int a2)
{
  double Current;
  int *v5;
  int *v6;
  unsigned __int8 *v7;
  const __CFString *v8;
  const __CFString *v9;
  int v10;
  int v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  char v15;
  int v16;
  NSObject *v17;
  int v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  NSObject *v22;
  const char *v23;
  uint8_t *v24;
  uint64_t v25;
  double v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  double v37;
  int v38;
  const char *v39;
  uint8_t *v40;
  const char *v41;
  uint8_t *v42;
  const char *v43;
  uint8_t *v44;
  uint64_t v45;
  _QWORD v46[4];
  unsigned int v47;
  int v48;
  double v49;
  double v50;
  int v51;
  unsigned int v52;
  __int16 v53;
  int v54;
  __int16 v55;
  int v56;
  uint8_t buf[8];
  __int16 v58;
  int v59;
  __int16 v60;
  int v61;

  if (!sub_10008D1F0(a2))
    return;
  Current = CFAbsoluteTimeGetCurrent();
  v49 = -1.79769313e308;
  v50 = -1.79769313e308;
  switch(a2)
  {
    case 0u:
      v5 = (int *)(a1 + 296);
      v6 = (int *)(a1 + 300);
      v7 = (unsigned __int8 *)(a1 + 325);
      v8 = CFSTR("kAccelBufferSubscription");
      v9 = CFSTR("kAccelBufferSubscriptionOverride");
      goto LABEL_8;
    case 2u:
      v5 = (int *)(a1 + 312);
      v6 = (int *)(a1 + 320);
      v7 = (unsigned __int8 *)(a1 + 327);
      v8 = CFSTR("kPressureBufferSubscription");
      v9 = CFSTR("kPressureBufferSubscriptionOverride");
LABEL_8:
      v10 = *v5;
      v11 = *v6;
      v12 = sub_1001FD94C();
      sub_1001FD9FC(v12, (uint64_t)v9, &v49);
      v13 = Current < v49 && vabdd_f64(v49, Current) < *(double *)(a1 + 272);
      if (*v7 | v13)
      {
        if (a2)
        {
LABEL_15:
          v15 = 1;
LABEL_16:
          if ((v15 & (*(_BYTE *)(a1 + 324) != 0)) != 0)
            v16 = v11;
          else
            v16 = 0;
          if (v16 != v10)
          {
            if (qword_10229FDB0 != -1)
              dispatch_once(&qword_10229FDB0, &stru_1021AA818);
            v17 = qword_10229FDB8;
            if (os_log_type_enabled((os_log_t)qword_10229FDB8, OS_LOG_TYPE_DEFAULT))
            {
              v18 = *(unsigned __int8 *)(a1 + 324);
              *(_DWORD *)buf = 67240704;
              *(_DWORD *)&buf[4] = a2;
              v58 = 1026;
              v59 = v16;
              v60 = 1026;
              v61 = v18;
              _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Updating %{location:CLSensorRecorder_Types::DataType,public}d sampling rate %{public}d, fitness tracking enabled, %{public}d", buf, 0x14u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_10229FDB0 != -1)
                dispatch_once(&qword_10229FDB0, &stru_1021AA818);
              v38 = *(unsigned __int8 *)(a1 + 324);
              v51 = 67240704;
              v52 = a2;
              v53 = 1026;
              v54 = v16;
              v55 = 1026;
              v56 = v38;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDB8, 0, "Updating %{location:CLSensorRecorder_Types::DataType,public}d sampling rate %{public}d, fitness tracking enabled, %{public}d", &v51, 20);
              v40 = (uint8_t *)v39;
              sub_100512490("Generic", 1, 0, 2, "void CLSensorRecorderNotifier::updateSubscriptionType(CLSensorRecorder_Types::DataType)", "%s\n", v39);
              if (v40 != buf)
                free(v40);
            }
            v19 = sub_100127B9C();
            v46[0] = _NSConcreteStackBlock;
            v46[1] = 3221225472;
            v46[2] = sub_10124CE88;
            v46[3] = &unk_10212ECA0;
            v47 = a2;
            v48 = v16;
            sub_1000A57FC(v19, (uint64_t)v46);
            if (a2)
            {
              if (a2 == 2)
              {
                if (v10 >= 1)
                  sub_1009E391C(*(uint64_t **)(a1 + 176));
                v20 = (int *)(a1 + 312);
              }
              else
              {
                if (v10 >= 1)
                  sub_1009E391C(*(uint64_t **)(a1 + 168));
                v20 = (int *)(a1 + 304);
              }
            }
            else
            {
              if (v10 >= 1)
                sub_1009E391C(*(uint64_t **)(a1 + 160));
              v20 = (int *)(a1 + 296);
            }
            *v20 = v16;
          }
          v26 = Current + 129600.0;
          if (v50 > v26)
          {
            if (qword_10229FDB0 != -1)
              dispatch_once(&qword_10229FDB0, &stru_1021AA818);
            v27 = qword_10229FDB8;
            if (os_log_type_enabled((os_log_t)qword_10229FDB8, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67240192;
              *(_DWORD *)&buf[4] = a2;
              _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Updated %{location:CLSensorRecorder_Types::DataType,public}d subscription due to invalid time.", buf, 8u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_10229FDB0 != -1)
                dispatch_once(&qword_10229FDB0, &stru_1021AA818);
              v51 = 67240192;
              v52 = a2;
              LODWORD(v45) = 8;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDB8, 0, "Updated %{location:CLSensorRecorder_Types::DataType,public}d subscription due to invalid time.", &v51, v45);
              v42 = (uint8_t *)v41;
              sub_100512490("Generic", 1, 0, 2, "void CLSensorRecorderNotifier::updateSubscriptionType(CLSensorRecorder_Types::DataType)", "%s\n", v41);
              if (v42 != buf)
                free(v42);
            }
            v28 = sub_1001FD94C();
            *(double *)buf = v26;
            sub_10018A534(v28, v8, buf);
            v29 = sub_1001FD94C();
            (*(void (**)(uint64_t))(*(_QWORD *)v29 + 944))(v29);
          }
          if (v49 > v26)
          {
            if (qword_10229FDB0 != -1)
              dispatch_once(&qword_10229FDB0, &stru_1021AA818);
            v30 = qword_10229FDB8;
            if (os_log_type_enabled((os_log_t)qword_10229FDB8, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67240192;
              *(_DWORD *)&buf[4] = a2;
              _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Updated %{location:CLSensorRecorder_Types::DataType,public}d subscription override due to invalid time.", buf, 8u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_10229FDB0 != -1)
                dispatch_once(&qword_10229FDB0, &stru_1021AA818);
              v51 = 67240192;
              v52 = a2;
              LODWORD(v45) = 8;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDB8, 0, "Updated %{location:CLSensorRecorder_Types::DataType,public}d subscription override due to invalid time.", &v51, v45);
              v44 = (uint8_t *)v43;
              sub_100512490("Generic", 1, 0, 2, "void CLSensorRecorderNotifier::updateSubscriptionType(CLSensorRecorder_Types::DataType)", "%s\n", v43);
              if (v44 != buf)
                free(v44);
            }
            v31 = sub_1001FD94C();
            *(double *)buf = v26;
            sub_10018A534(v31, v9, buf);
            v32 = sub_1001FD94C();
            (*(void (**)(uint64_t))(*(_QWORD *)v32 + 944))(v32);
          }
          return;
        }
        goto LABEL_13;
      }
      if (a2 || *(_DWORD *)(a1 + 300) == 50)
      {
        if (a2 != 1 || *(_DWORD *)(a1 + 308) == 50)
        {
          if (a2 != 2 || *(_DWORD *)(a1 + 320) == *(_DWORD *)(a1 + 316))
          {
LABEL_71:
            v35 = sub_1001FD94C();
            sub_1001FD9FC(v35, (uint64_t)v8, &v50);
            if (Current >= v50)
            {
              if (a2)
              {
                v15 = 0;
                goto LABEL_16;
              }
            }
            else
            {
              v36 = vabdd_f64(v50, Current);
              v37 = *(double *)(a1 + 272);
              v15 = v36 < v37;
              if (a2)
                goto LABEL_16;
              if (v36 < v37)
              {
LABEL_13:
                v14 = *(_QWORD *)(a1 + 272);
                *(_QWORD *)(a1 + 280) = *(_QWORD *)(a1 + 264);
LABEL_14:
                *(_QWORD *)(a1 + 288) = v14;
                goto LABEL_15;
              }
            }
            v15 = *(_BYTE *)(a1 + 336);
            if (!v15)
              goto LABEL_16;
            *(_QWORD *)(a1 + 280) = 0x40AF400000000000;
            v11 = 100;
            v14 = 0x40AC200000000000;
            goto LABEL_14;
          }
          v33 = sub_1001FD94C();
          sub_1005254E4(v33);
          v11 = *(_DWORD *)(a1 + 316);
          *(_DWORD *)(a1 + 320) = v11;
        }
        else
        {
          v25 = sub_1001FD94C();
          sub_1005254E4(v25);
          v11 = 50;
          *(_DWORD *)(a1 + 308) = 50;
        }
      }
      else
      {
        v21 = sub_1001FD94C();
        sub_1005254E4(v21);
        v11 = 50;
        *(_DWORD *)(a1 + 300) = 50;
      }
      v34 = sub_1001FD94C();
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 944))(v34);
      goto LABEL_71;
    case 1u:
      v5 = (int *)(a1 + 304);
      v6 = (int *)(a1 + 308);
      v7 = (unsigned __int8 *)(a1 + 326);
      v8 = CFSTR("kGyroBufferSubscription");
      v9 = CFSTR("kGyroBufferSubscriptionOverride");
      goto LABEL_8;
  }
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_1021AA838);
  v22 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Invalid data type.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021AA838);
    LOWORD(v51) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 16, "Invalid data type.", &v51, 2);
    v24 = (uint8_t *)v23;
    sub_100512490("Generic", 1, 0, 0, "void CLSensorRecorderNotifier::updateSubscriptionType(CLSensorRecorder_Types::DataType)", "%s\n", v23);
    if (v24 != buf)
      free(v24);
  }
}

uint64_t sub_10124C7B0(uint64_t a1)
{
  uint64_t *v1;
  int v2;
  double v3;
  double v4;
  double v5;
  double v6;
  void *v7;
  void *v8;
  uint64_t *v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  int v14;
  uint64_t v15;
  void *i;
  void *v17;
  id v18;
  NSObject *v19;
  NSObject *v21;
  id v22;
  uint64_t v23;
  id v24;
  const char *v25;
  uint8_t *v26;
  void *v27;
  NSObject *v28;
  id v29;
  const char *v30;
  uint8_t *v31;
  uint64_t v32;
  id v33;
  const char *v34;
  uint8_t *v35;
  id obj;
  CLSensorRecorderSensorMetaSerializer *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _QWORD v42[2];
  uint64_t v43;
  int v44;
  id v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int *v49;
  int v50;
  id v51;
  uint8_t v52[4];
  double v53;
  __int16 v54;
  _BYTE v55[14];
  uint8_t v56[128];
  uint8_t buf[4];
  double v58;
  __int16 v59;
  double v60;

  v3 = __chkstk_darwin(a1);
  v5 = v4;
  v6 = v3;
  v8 = v7;
  if (v2 == 2)
  {
    v9 = v1 + 22;
  }
  else if (v2 == 1)
  {
    v9 = v1 + 21;
  }
  else
  {
    if (v2)
      return 0;
    v9 = v1 + 20;
  }
  v10 = *v9;
  v11 = objc_alloc_init((Class)NSMutableArray);
  if ((sub_1009E4D38(v10, v6, v5) & 1) == 0)
  {
    if (qword_10229FDB0 != -1)
      dispatch_once(&qword_10229FDB0, &stru_1021AA818);
    v19 = qword_10229FDB8;
    if (os_log_type_enabled((os_log_t)qword_10229FDB8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134283777;
      v58 = v6;
      v59 = 2049;
      v60 = v5;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Error accessing sensor recorder data from %{private}f, %{private}f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDB0 != -1)
        dispatch_once(&qword_10229FDB0, &stru_1021AA818);
      *(_DWORD *)v52 = 134283777;
      v53 = v6;
      v54 = 2049;
      *(double *)v55 = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDB8, 0, "Error accessing sensor recorder data from %{private}f, %{private}f", v52, 22);
      v31 = (uint8_t *)v30;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLSensorRecorderNotifier::writeSensorRecordDataToFile(CLSensorRecorder_Types::DataType, NSFileHandle *, CFAbsoluteTime, CFAbsoluteTime)", "%s\n", v30);
      if (v31 != buf)
        free(v31);
    }

    return 0;
  }
  v42[0] = 0;
  v42[1] = buf;
  v43 = 147456;
  obj = v11;
  v37 = objc_alloc_init(CLSensorRecorderSensorMetaSerializer);
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v38, v56, 16);
  if (v12)
  {
    v13 = v12;
    v14 = 0;
    v15 = *(_QWORD *)v39;
    while (2)
    {
      for (i = 0; i != v13; i = (char *)i + 1)
      {
        if (*(_QWORD *)v39 != v15)
          objc_enumerationMutation(obj);
        v17 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * (_QWORD)i);
        if (!v42[0]
          || (v18 = objc_msgSend(*(id *)(*((_QWORD *)&v38 + 1) + 8 * (_QWORD)i), "dataIdentifier"), v18 != (id)v42[0]))
        {
          ++v14;
          v42[0] = objc_msgSend(v17, "dataIdentifier");
          LODWORD(v43) = 147456;
          if ((sub_1009E3FAC(v10, v42, (uint64_t)objc_msgSend(v17, "identifier")) & 1) == 0)
          {
            if (qword_10229FDB0 != -1)
              dispatch_once(&qword_10229FDB0, &stru_1021AA818);
            v21 = qword_10229FDB8;
            if (os_log_type_enabled((os_log_t)qword_10229FDB8, OS_LOG_TYPE_DEFAULT))
            {
              v22 = objc_msgSend(v17, "dataIdentifier");
              *(_DWORD *)v52 = 134283521;
              v53 = *(double *)&v22;
              _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Error occurred while retrieving data record %{private}llu", v52, 0xCu);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(v52, 0x65CuLL);
              if (qword_10229FDB0 != -1)
                dispatch_once(&qword_10229FDB0, &stru_1021AA818);
              v23 = qword_10229FDB8;
              v24 = objc_msgSend(v17, "dataIdentifier");
              v50 = 134283521;
              v51 = v24;
              _os_log_send_and_compose_impl(2, 0, v52, 1628, &_mh_execute_header, v23, 0, "Error occurred while retrieving data record %{private}llu", &v50, 12);
              v26 = (uint8_t *)v25;
              sub_100512490("Generic", 1, 0, 2, "BOOL CLSensorRecorderNotifier::writeSensorRecordDataToFile(CLSensorRecorder_Types::DataType, NSFileHandle *, CFAbsoluteTime, CFAbsoluteTime)", "%s\n", v25);
              if (v26 != v52)
                free(v26);
            }
            goto LABEL_36;
          }
        }
        -[CLSensorRecorderSensorMetaSerializer writeMeta:toHandle:](v37, "writeMeta:toHandle:", v17, v8);
        objc_msgSend(v8, "writeData:", +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", &buf[objc_msgSend(v17, "offset")], objc_msgSend(v17, "dataSize")));
      }
      v13 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v38, v56, 16);
      if (v13)
        continue;
      break;
    }
  }
  else
  {
    v14 = 0;
  }
LABEL_36:
  fcntl((int)objc_msgSend(v8, "fileDescriptor"), 50, &v50);
  if (qword_10229FDB0 != -1)
    dispatch_once(&qword_10229FDB0, &stru_1021AA818);
  v27 = obj;
  v28 = qword_10229FDB8;
  if (os_log_type_enabled((os_log_t)qword_10229FDB8, OS_LOG_TYPE_DEBUG))
  {
    v29 = objc_msgSend(obj, "count");
    *(_DWORD *)v52 = 134218498;
    v53 = *(double *)&v29;
    v54 = 1024;
    *(_DWORD *)v55 = v14;
    *(_WORD *)&v55[4] = 2080;
    *(_QWORD *)&v55[6] = &v50;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "Wrote %lu meta records across %d data containers to %s", v52, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(v52, 0x65CuLL);
    if (qword_10229FDB0 != -1)
      dispatch_once(&qword_10229FDB0, &stru_1021AA818);
    v32 = qword_10229FDB8;
    v33 = objc_msgSend(obj, "count");
    v44 = 134218498;
    v45 = v33;
    v46 = 1024;
    v47 = v14;
    v48 = 2080;
    v49 = &v50;
    _os_log_send_and_compose_impl(2, 0, v52, 1628, &_mh_execute_header, v32, 2, "Wrote %lu meta records across %d data containers to %s", &v44, 28, (const char *)obj);
    v35 = (uint8_t *)v34;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLSensorRecorderNotifier::writeSensorRecordDataToFile(CLSensorRecorder_Types::DataType, NSFileHandle *, CFAbsoluteTime, CFAbsoluteTime)", "%s\n", v34);
    if (v35 != v52)
      free(v35);
  }

  return 1;
}

void sub_10124CE88(uint64_t a1)
{
  const void *v2;
  void *v3;
  int v4;

  v2 = (const void *)sub_1001FBB04(0);
  if (v2)
  {
    if (v3)
    {
      v4 = *(_DWORD *)(a1 + 32);
      switch(v4)
      {
        case 2:
          sub_1005D07C0((uint64_t)v3, *(_DWORD *)(a1 + 36));
          break;
        case 1:
          sub_1005D05E4((uint64_t)v3, *(_DWORD *)(a1 + 36));
          break;
        case 0:
          sub_1005D0408((uint64_t)v3, *(_DWORD *)(a1 + 36));
          break;
      }
    }
  }
}

uint64_t sub_10124CF14(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v6;

  *(_QWORD *)a1 = off_1021AA6A8;
  sub_10124D07C(a1);

  v2 = *(_QWORD *)(a1 + 352);
  *(_QWORD *)(a1 + 352) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 344);
  *(_QWORD *)(a1 + 344) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 328);
  *(_QWORD *)(a1 + 328) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v6 = (void **)(a1 + 216);
  sub_10025E1F0(&v6);
  return sub_10124BAA8(a1);
}

void sub_10124CFE0(uint64_t a1)
{
  sub_10124CF14(a1);
  operator delete();
}

_QWORD *sub_10124D004@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1015A2E04(a2, __str);
}

uint64_t sub_10124D07C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  *(_BYTE *)(a1 + 108) = 1;
  objc_msgSend(*(id *)(a1 + 184), "invalidate");

  *(_QWORD *)(a1 + 184) = 0;
  objc_msgSend(*(id *)(a1 + 192), "invalidate");

  *(_QWORD *)(a1 + 192) = 0;
  objc_msgSend(*(id *)(a1 + 200), "invalidate");

  *(_QWORD *)(a1 + 200) = 0;
  objc_msgSend(*(id *)(a1 + 208), "invalidate");

  *(_QWORD *)(a1 + 208) = 0;
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  *(_QWORD *)(a1 + 160) = 0;
  v3 = *(_QWORD *)(a1 + 168);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_QWORD *)(a1 + 168) = 0;
  result = *(_QWORD *)(a1 + 176);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  *(_QWORD *)(a1 + 176) = 0;
  return result;
}

void sub_10124D138(uint64_t a1)
{
  NSDate *v2;
  id v3;
  id v4;
  void **v5;
  NSString *v6;
  NSObject *v7;
  const char *v8;
  void **v9;
  uint64_t v10;
  _WORD v11[8];
  void *__p[2];
  char v13;

  CFAbsoluteTimeGetCurrent();
  v2 = +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:");
  v3 = objc_alloc_init((Class)NSDateFormatter);
  objc_msgSend(v3, "setDateFormat:", CFSTR("yyyyMMdd_HH-mm-ss"));
  v4 = objc_msgSend(v3, "stringFromDate:", v2);
  sub_101225108((uint64_t)__p);
  if (v13 >= 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  v6 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s/CoreMotionDebug_SensorRecorder_%@_accel.dat"), v5, v4);
  if (v13 < 0)
    operator delete(__p[0]);
  if (!-[NSFileManager fileExistsAtPath:](+[NSFileManager defaultManager](NSFileManager, "defaultManager"), "fileExistsAtPath:", v6))-[NSFileManager createFileAtPath:contents:attributes:](+[NSFileManager defaultManager](NSFileManager, "defaultManager"), "createFileAtPath:contents:attributes:", v6, 0, 0);
  if (+[NSFileHandle fileHandleForWritingAtPath:](NSFileHandle, "fileHandleForWritingAtPath:", v6))
  {
    sub_10124C7B0(a1);
  }
  else
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021AA838);
    v7 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Failed to dump sensor recorder (accel) to disk because fileHandle is nil.", (uint8_t *)__p, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021AA838);
      v11[0] = 0;
      LODWORD(v10) = 2;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_10229FC78, 17, "Failed to dump sensor recorder (accel) to disk because fileHandle is nil.", v11, v10);
      v9 = (void **)v8;
      sub_100512490("Generic", 1, 0, 0, "void CLSensorRecorderNotifier::writeAccelToDiskTriggeredBySysdiagnose()", "%s\n", v8);
      if (v9 != __p)
        free(v9);
    }
  }
}

void sub_10124D3CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10124D3F0(uint64_t *result, uint64_t a2, _DWORD *a3)
{
  uint64_t *v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  _WORD v10[8];
  uint8_t buf[1640];

  if (*a3 == 6)
  {
    v3 = result;
    if (qword_10229FDB0 != -1)
      dispatch_once(&qword_10229FDB0, &stru_1021AA818);
    v4 = qword_10229FDB8;
    if (os_log_type_enabled((os_log_t)qword_10229FDB8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#CacheDelete - onSoftwareUpdateStorageRecovery - Flushing SensorRecorderDB", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDB0 != -1)
        dispatch_once(&qword_10229FDB0, &stru_1021AA818);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDB8, 1, "#CacheDelete - onSoftwareUpdateStorageRecovery - Flushing SensorRecorderDB", v10, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLSensorRecorderNotifier::onSoftwareUpdateStorageRecovery(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    sub_1009E3890(v3[20]);
    sub_1009E3890(v3[21]);
    sub_1009E3890(v3[22]);
    v5 = v3[20];
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    v6 = v3[21];
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
    v7 = v3[22];
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
    operator new();
  }
  return result;
}

void sub_10124D6E0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0)
    operator delete(__p);
  operator delete();
}

void sub_10124D754(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021AA7D8);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_1021AA7D8);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData>::removeClient(int) [Notification_T = CLSensorRecorderNotifier_Type::Notification, NotificationData_T = CLSensorRecorderNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

uint64_t sub_10124D9C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022FDFB8);
}

uint64_t sub_10124D9DC(uint64_t a1, int a2, int *a3, char *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t *v29;
  char v30;
  uint64_t **v31;
  char v32;
  uint64_t **v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  const char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _BYTE v42[12];
  __int16 v43;
  int v44;
  _BYTE buf[12];
  __int16 v46;
  int v47;

  v41 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(_QWORD *)v42 = v10;
      v17 = *a3;
      v20 = *(_QWORD *)(v10 + 48);
      v19 = v10 + 48;
      v18 = v20;
      if (!v20)
        goto LABEL_31;
      v21 = v19;
      do
      {
        v22 = *(_DWORD *)(v18 + 28);
        v23 = v22 < v17;
        if (v22 >= v17)
          v24 = (uint64_t *)v18;
        else
          v24 = (uint64_t *)(v18 + 8);
        if (!v23)
          v21 = v18;
        v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28))
LABEL_31:
        v21 = v19;
      v25 = *(_QWORD *)(a1 + 64);
      if (!v25)
        goto LABEL_42;
      v26 = a1 + 64;
      do
      {
        v27 = *(_DWORD *)(v25 + 32);
        v28 = v27 < v17;
        if (v27 >= v17)
          v29 = (uint64_t *)v25;
        else
          v29 = (uint64_t *)(v25 + 8);
        if (!v28)
          v26 = v25;
        v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        v40 = v26;
        v34 = *(_QWORD *)(v26 + 56);
        v35 = *a4;
        *(_QWORD *)buf = &v41;
        *((_BYTE *)sub_1001AFE94((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v35;
        *(_QWORD *)buf = 0;
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _BYTE *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_10124F4E4();
        }
        if (v34)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        v40 = a1 + 64;
        v30 = byte_1022FDFB9;
        HIDWORD(v39) = v17;
        *(_QWORD *)buf = (char *)&v39 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v30;
        HIDWORD(v39) = *a3;
        *(_QWORD *)buf = (char *)&v39 + 4;
        v31 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v31 + 8);
        v32 = *a4;
        HIDWORD(v39) = *a3;
        *(_QWORD *)buf = (char *)&v39 + 4;
        v33 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)buf = &v41;
        *((_BYTE *)sub_1001AFE94(v33 + 5, &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v32;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        *(_DWORD *)buf = *a3;
        sub_1000C6190((uint64_t **)(*(_QWORD *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021AA7D8);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v15;
    v46 = 1026;
    v47 = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  v16 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021AA7D8);
    v36 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v36 = (_QWORD *)*v36;
    *(_DWORD *)v42 = 136446466;
    *(_QWORD *)&v42[4] = v36;
    v43 = 1026;
    v44 = a2;
    LODWORD(v39) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
      v42,
      v39);
    v38 = (char *)v37;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLSensorRecorderNotifier_Type::Notification, NotificationData_T = CLSensorRecorderNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v37);
    if (v38 != buf)
      free(v38);
    return 0;
  }
  return result;
}

BOOL sub_10124DE38(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021AA7D8);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021AA7D8);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLSensorRecorderNotifier_Type::Notification, NotificationData_T = CLSensorRecorderNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

BOOL sub_10124E0B8(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE buf[12];
  __int16 v36;
  void **v37;
  char v38;
  int v39;
  _QWORD *v40;
  __int16 v41;
  _BYTE *v42;
  void *__p[2];
  char v44;

  HIDWORD(v34) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009E904((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021AA7D8);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v44 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v36 = 2082;
                v37 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_1021AA7D8);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v38 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v39 = 136446466;
                v40 = v29;
                v41 = 2082;
                v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                v33 = v32;
                if (v38 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLSensorRecorderNotifier_Type::Notification, NotificationData_T = CLSensorRecorderNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v33);
                if (v33 != (char *)__p)
                  free(v33);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_10124E440(uint64_t a1, int *a2, uint64_t *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  int v13;
  __int128 v14;
  int *v15;

  v6 = operator new(0x20uLL);
  v6[2] = 0;
  *v6 = off_1021AA9C8;
  v6[1] = 0;
  v7 = *a3;
  *((_QWORD *)&v14 + 1) = v6;
  v6[3] = v7;
  *(_QWORD *)&v14 = v6 + 3;
  v13 = *a2;
  v15 = &v13;
  v8 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v13, (uint64_t)&unk_101B9EB60, &v15);
  sub_1002B7674((uint64_t)(v8 + 8), &v14);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return 1;
}

void sub_10124E514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10124E528(uint64_t a1, signed __int32 *a2, _QWORD *a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  os_activity_scope_state_s state;
  uint8_t buf[8];
  _BYTE v30[20];
  __int16 v31;
  _QWORD *v32;
  __int16 v33;
  std::__shared_weak_count *v34;
  _QWORD **v35;
  _QWORD *v36[3];
  std::__shared_weak_count *v37;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021AA7D8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v30 = 2082;
      *(_QWORD *)&v30[2] = "";
      *(_WORD *)&v30[10] = 2082;
      *(_QWORD *)&v30[12] = "activity";
      v31 = 2082;
      v32 = v10;
      v33 = 2050;
      v34 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v35 = v36;
      memset(v36, 0, sizeof(v36));
      v37 = 0;
      sub_1004A6D60((uint64_t)buf, a2, (uint64_t)&v35);
      v14 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)buf);
      v18 = v34;
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v30, *(_QWORD **)&v30[8]);
      v21 = v37;
      if (v37)
      {
        v22 = (unint64_t *)&v37->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v35, v36[0]);
    }
    if (a4)
    {
      v24 = operator new(0x20uLL);
      v24[2] = 0;
      *v24 = off_1021AA9C8;
      v24[1] = 0;
      v24[3] = *a3;
      *(_QWORD *)buf = v24 + 3;
      *(_QWORD *)v30 = v24;
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)buf);
      v25 = *(std::__shared_weak_count **)v30;
      if (*(_QWORD *)v30)
      {
        v26 = (unint64_t *)(*(_QWORD *)v30 + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_10124FEE0();
    os_activity_scope_leave(&state);
  }
}

void sub_10124EB60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_10124EBAC(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021AA7D8);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021AA7D8);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData>::listClients() [Notification_T = CLSensorRecorderNotifier_Type::Notification, NotificationData_T = CLSensorRecorderNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021AA7D8);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021AA7D8);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData>::listClients() [Notification_T = CLSensorRecorderNotifier_Type::Notification, NotificationData_T = CLSensorRecorderNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_1021AA7D8);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021AA7D8);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData>::listClients() [Notification_T = CLSensorRecorderNotifier_Type::Notification, NotificationData_T = CLSensorRecorderNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_10124F154(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_10124F180()
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  v0 = sub_10124F1CC();
  v1 = (uint64_t *)dlsym(v0, "SRSensorAccelerometer");
  if (v1)
  {
    result = *v1;
    qword_10230D9E0 = result;
  }
  else
  {
    result = qword_10230D9E0;
  }
  off_1022FDF98[0] = sub_10124F21C;
  return result;
}

void *sub_10124F1CC()
{
  void *result;

  result = (void *)qword_10230D9E8;
  if (!qword_10230D9E8)
  {
    result = dlopen("/System/Library/Frameworks/SensorKit.framework/SensorKit", 2);
    qword_10230D9E8 = (uint64_t)result;
    if (!result)
    {
      result = dlopen("/System/Library/PrivateFrameworks/SensorKit.framework/SensorKit", 2);
      qword_10230D9E8 = (uint64_t)result;
    }
  }
  return result;
}

uint64_t sub_10124F21C()
{
  return qword_10230D9E0;
}

uint64_t sub_10124F228()
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  v0 = sub_10124F1CC();
  v1 = (uint64_t *)dlsym(v0, "SRSensorGyroscope");
  if (v1)
  {
    result = *v1;
    qword_10230D9F0 = result;
  }
  else
  {
    result = qword_10230D9F0;
  }
  off_1022FDFA0[0] = sub_10124F274;
  return result;
}

uint64_t sub_10124F274()
{
  return qword_10230D9F0;
}

uint64_t sub_10124F280()
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  v0 = sub_10124F1CC();
  v1 = (uint64_t *)dlsym(v0, "SRSensorElevationPressure");
  if (v1)
  {
    result = *v1;
    qword_10230D9F8 = result;
  }
  else
  {
    result = qword_10230D9F8;
  }
  off_1022FDFA8[0] = sub_10124F2CC;
  return result;
}

uint64_t sub_10124F2CC()
{
  return qword_10230D9F8;
}

void sub_10124F2D8(id a1)
{
  qword_10229FF28 = (uint64_t)os_log_create("com.apple.locationd.Motion", "ContextConfiguration");
}

Class sub_10124F304()
{
  Class result;

  sub_10124F1CC();
  result = objc_getClass("SRSensorWriter");
  qword_10230DA00 = (uint64_t)result;
  off_1022FDFB0 = sub_10124F33C;
  return result;
}

uint64_t sub_10124F33C()
{
  return qword_10230DA00;
}

void sub_10124F348(id a1)
{
  qword_10229FDB8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "SensorRecorder");
}

void sub_10124F374(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_10124F3A0(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_10124F3F8(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (v1)
    operator delete[]();
  __cxa_rethrow();
}

void sub_10124F420(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_10124F434(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10124F458(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    operator delete[]();
  return result;
}

uint64_t sub_10124F478(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

void sub_10124F4B8(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_10124F4E4()
{
  operator new();
}

_BYTE *sub_10124F574(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  int *v14;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    v9 = sub_10124F670(a4, a2);
    v10 = *(_QWORD *)a3 + 80;
    v11 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v14 = (int *)(*(_QWORD *)a2 + 32);
    v12 = sub_1001AFE94(v11, v14, (uint64_t)&unk_101B9EB60, &v14);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v13);
  }
  return result;
}

uint64_t sub_10124F650(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

id sub_10124F670(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = objc_opt_class(CLCppEncodableDataContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_10124F6E8(a1);
  v6 = objc_opt_class(CLCppContainer, v4);
  if ((objc_opt_isKindOfClass(a1, v6) & 1) != 0)
    return sub_10124FA70(a1);
  else
    return 0;
}

id sub_10124F6E8(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t buf[4];
  id v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  unint64_t v15;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return sub_10124FE1C((uint64_t)&v8 + 7, a1);
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021AA998);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v11 = v2;
      v12 = 2048;
      v13 = 0;
      v14 = 2080;
      v15 = 0x8000000101C4826BLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021AA998);
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v9, v8, v9);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021AA998);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v11 = v2;
      v12 = 2048;
      v13 = 0;
      v14 = 2080;
      v15 = 0x8000000101C4826BLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021AA998);
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v9, v8, v9);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLSensorRecorderNotifier_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

id sub_10124FA70(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021AA998);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C4826BLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021AA998);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021AA998);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C4826BLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021AA998);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLSensorRecorderNotifier_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

id sub_10124FE1C(uint64_t a1, void *a2)
{
  if (!objc_msgSend(a2, "cppObjectPtr")
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_10221D160))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)8)
      sub_101947F90();
    objc_msgSend(a2, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a2, "serialized"), "bytes"));
  }
  return objc_msgSend(a2, "cppObjectPtr");
}

void sub_10124FE90(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021AA9C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10124FEA4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021AA9C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_10124FEE0()
{
  operator new();
}

void sub_10124FF70(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  id v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  const char *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  __int16 v54;
  int v55;
  uint8_t buf[4];
  _QWORD *v57;
  __int16 v58;
  int v59;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v51 = v9;
        v13 = sub_10124F670(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, id, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 7);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v50 = v19;
              sub_10124F574(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v51 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 28);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 28);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v50 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021AA7D8);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                v57 = v25;
                v58 = 1026;
                v59 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_1021AA7D8);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 7);
                v52 = 136446466;
                v53 = v45;
                v54 = 1026;
                v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                v48 = (uint8_t *)v47;
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLSensorRecorderNotifier_Type::Notification, NotificationData_T = CLSensorRecorderNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v48 != buf)
                  free(v48);
              }
            }
          }
          while (v14 != v51 + 6);
        }
      }
    }
  }
}

uint64_t sub_101250344(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

NSDictionary *sub_101250364()
{
  NSDictionary *result;
  _QWORD v1[7];
  _QWORD v2[7];

  v1[0] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "VO2MaxPowerBudgetEstimatorQueryLookbackInterval");
  v2[0] = &off_102220A98;
  v1[1] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "SensitiveEscalationExtendedBudgetRefreshInterval");
  v2[1] = &off_102220AB0;
  v1[2] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "VO2MaxDeescalatorExtendAfterHighExertionTimeSeconds");
  v2[2] = &off_102220AC8;
  v1[3] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "SensitiveEscalationBudgetAllowanceSeconds");
  v2[3] = &off_102220AE0;
  v1[4] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "SensitiveEscalationExtendedBudgetAllowanceSeconds");
  v2[4] = &off_102220AF8;
  v1[5] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "SensitiveEscalationGeneralStairsBudgetAllowanceSeconds");
  v2[5] = &off_102220B10;
  v1[6] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "SensitiveEscalationGeneralStairsBudgetRefreshInterval");
  v2[6] = &off_102220B28;
  result = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v2, v1, 7);
  qword_10230D9A8 = (uint64_t)result;
  return result;
}

void sub_101250558(id a1)
{
  qword_10230DA08 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLBTLEBeaconProviderMockSilo"));
}

uint64_t sub_10125060C(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_101251BA8;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_10230DA20 != -1)
    dispatch_once(&qword_10230DA20, block);
  return qword_10230DA18;
}

void sub_1012507E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10125086C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1012507FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  __CFRunLoop *v6;

  v3 = a1 + 136;
  v4 = sub_101254158(a1 + 136, 0, 0, a2);
  v5 = *(_QWORD *)(a1 + 136);
  *v4 = v5;
  v4[1] = v3;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(a1 + 136) = v4;
  ++*(_QWORD *)(a1 + 152);
  if (*(_BYTE *)(a1 + 110))
  {
    CFRunLoopSourceSignal(*(CFRunLoopSourceRef *)(a1 + 216));
    v6 = (__CFRunLoop *)sub_100193530();
    CFRunLoopWakeUp(v6);
  }
}

uint64_t sub_10125086C(uint64_t a1)
{
  *(_QWORD *)(a1 + 40) = off_10213F058;
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  *(_QWORD *)a1 = off_10213F058;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_101250910(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1007A1BE8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_101250924(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  __CFRunLoop *v6;

  v3 = a1 + 112;
  v4 = sub_10125406C(a1 + 112, 0, 0, a2);
  v5 = *(_QWORD *)(a1 + 112);
  *v4 = v5;
  v4[1] = v3;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(a1 + 112) = v4;
  ++*(_QWORD *)(a1 + 128);
  if (*(_BYTE *)(a1 + 110))
  {
    CFRunLoopSourceSignal(*(CFRunLoopSourceRef *)(a1 + 216));
    v6 = (__CFRunLoop *)sub_100193530();
    CFRunLoopWakeUp(v6);
  }
}

uint64_t sub_1012509C0(uint64_t a1, void *a2)
{
  char *v3;
  NSObject *v4;
  CFRunLoopSourceContext v6;

  v3 = (char *)sub_10125380C(a1, "CLBTLEBeaconProviderMock-Notifier", a2);
  *(_QWORD *)v3 = off_1021AAA38;
  *(_WORD *)(v3 + 109) = 1;
  *((_QWORD *)v3 + 14) = v3 + 112;
  *((_QWORD *)v3 + 15) = v3 + 112;
  *((_QWORD *)v3 + 16) = 0;
  *((_QWORD *)v3 + 17) = v3 + 136;
  *((_QWORD *)v3 + 18) = v3 + 136;
  *((_QWORD *)v3 + 19) = 0;
  *((_QWORD *)v3 + 20) = v3 + 160;
  *((_QWORD *)v3 + 21) = v3 + 160;
  *((_QWORD *)v3 + 25) = 0;
  *((_QWORD *)v3 + 22) = 0;
  *((_QWORD *)v3 + 24) = v3 + 200;
  *((_QWORD *)v3 + 26) = 0;
  v6.version = 0;
  v6.info = v3;
  memset(&v6.retain, 0, 56);
  v6.perform = (void (__cdecl *)(void *))sub_101250AF0;
  *(_QWORD *)(a1 + 216) = CFRunLoopSourceCreate(kCFAllocatorDefault, 0, &v6);
  v4 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, 0);
  *(_QWORD *)(a1 + 184) = v4;
  dispatch_source_set_timer(v4, 0, 0x3B9ACA00uLL, 0);
  return a1;
}

void sub_101250AB8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;

  sub_101253DE4(v5, *(char **)(v1 + 200));
  sub_1000F34E0(v4);
  sub_1012538B0(v3);
  sub_101253978(v2);
  sub_1012539E8(v1);
  _Unwind_Resume(a1);
}

void sub_101250AF0(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  id v4;
  _QWORD v5[5];
  os_activity_scope_state_s state;
  char v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  CLProfilingIdentify("CLBTLEBeaconProviderMock::onEventSource");
  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "silo"), "assertOutside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021AAB90);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v7 = 1;
    v2 = _os_activity_create((void *)&_mh_execute_header, "CL: CLBTLEBeaconProviderMock::onEventSource", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v2, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021AAB90);
    v3 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2082;
      v13 = "activity";
      v14 = 2050;
      v15 = a1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLBTLEBeaconProviderMock::onEventSource\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v7 = 0;
  }
  v4 = objc_msgSend(*(id *)(a1 + 32), "silo");
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1012538A8;
  v5[3] = &unk_10212ECA0;
  v5[4] = a1;
  objc_msgSend(v4, "sync:", v5);
  if (v7)
    os_activity_scope_leave(&state);
}

void sub_101250CC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, os_activity_scope_state_s state, char a15)
{
  if (a15)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101250CE8(uint64_t a1)
{
  const void *v2;

  *(_QWORD *)a1 = off_1021AAA38;
  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 184));
  dispatch_release(*(dispatch_object_t *)(a1 + 184));
  sub_101250D64(a1);
  v2 = *(const void **)(a1 + 216);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 216) = 0;
  }
  sub_101253DE4(a1 + 192, *(char **)(a1 + 200));
  sub_1000F34E0((_QWORD *)(a1 + 160));
  sub_1012538B0((uint64_t *)(a1 + 136));
  sub_101253978((uint64_t *)(a1 + 112));
  return sub_1012539E8(a1);
}

void sub_101250D64(uint64_t a1)
{
  __CFRunLoop *v2;
  __CFRunLoop *v3;

  v2 = (__CFRunLoop *)sub_100193530();
  if (CFRunLoopContainsSource(v2, *(CFRunLoopSourceRef *)(a1 + 216), kCFRunLoopCommonModes))
  {
    v3 = (__CFRunLoop *)sub_100193530();
    CFRunLoopRemoveSource(v3, *(CFRunLoopSourceRef *)(a1 + 216), kCFRunLoopCommonModes);
  }
  *(_BYTE *)(a1 + 110) = 0;
}

void sub_101250DB8(uint64_t a1)
{
  sub_101250CE8(a1);
  operator delete();
}

uint64_t sub_101250DE0(uint64_t a1, uint64_t a2)
{
  uint64_t **v4;
  _QWORD *v5;
  int v6;
  __CFRunLoop *v7;
  uint64_t v9;

  v4 = (uint64_t **)(a1 + 192);
  v5 = sub_1007A2DB4(a1 + 192, a2);
  if ((_QWORD *)(a1 + 200) == v5)
  {
    v9 = a2;
    v5 = sub_101253E44(v4, a2, (uint64_t)&unk_101B9EB60, &v9);
    v6 = 1;
  }
  else
  {
    v6 = *((_DWORD *)v5 + 18) + 1;
  }
  *((_DWORD *)v5 + 18) = v6;
  if (*(_BYTE *)(a1 + 110))
  {
    CFRunLoopSourceSignal(*(CFRunLoopSourceRef *)(a1 + 216));
    v7 = (__CFRunLoop *)sub_100193530();
    CFRunLoopWakeUp(v7);
  }
  return 1;
}

uint64_t sub_101250E78(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  _QWORD *v4;
  int v5;
  BOOL v6;
  int v7;

  v3 = (uint64_t **)(a1 + 192);
  v4 = sub_1007A2DB4(a1 + 192, a2);
  if ((_QWORD *)(a1 + 200) != v4)
  {
    v5 = *((_DWORD *)v4 + 18);
    v6 = v5 != 0;
    v7 = v5 - 1;
    if (v7 != 0 && v6)
      *((_DWORD *)v4 + 18) = v7;
    else
      sub_10125401C(v3, (uint64_t)v4);
  }
  return 1;
}

void sub_101250ED0(uint64_t a1)
{
  _QWORD *v1;

  v1 = (_QWORD *)(a1 + 200);
  sub_101253DE4(a1 + 192, *(char **)(a1 + 200));
  *(v1 - 1) = v1;
  *v1 = 0;
  v1[1] = 0;
}

void sub_101250F00(uint64_t a1, double a2)
{
  double *v4;
  uint64_t v5;
  __CFRunLoop *v6;

  v4 = (double *)operator new(0x18uLL);
  v4[2] = a2;
  v5 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)v4 = v5;
  *((_QWORD *)v4 + 1) = a1 + 160;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(a1 + 160) = v4;
  ++*(_QWORD *)(a1 + 176);
  if (*(_BYTE *)(a1 + 110))
  {
    CFRunLoopSourceSignal(*(CFRunLoopSourceRef *)(a1 + 216));
    v6 = (__CFRunLoop *)sub_100193530();
    CFRunLoopWakeUp(v6);
  }
}

void sub_101250F78(uint64_t a1)
{
  NSObject *v2;
  _QWORD handler[5];

  v2 = *(NSObject **)(a1 + 184);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_101250FE0;
  handler[3] = &unk_10212ECA0;
  handler[4] = a1;
  dispatch_source_set_event_handler(v2, handler);
  dispatch_resume(*(dispatch_object_t *)(a1 + 184));
}

uint64_t sub_101250FE0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, double))(**(_QWORD **)(a1 + 32) + 232))(*(_QWORD *)(a1 + 32), 1.0);
}

void sub_101250FF4(uint64_t a1)
{
  dispatch_suspend(*(dispatch_object_t *)(a1 + 184));
}

void sub_101250FFC(uint64_t a1)
{
  __CFRunLoop *v2;
  __CFRunLoop *v3;
  __CFRunLoop *v4;

  v2 = (__CFRunLoop *)sub_100193530();
  if (!CFRunLoopContainsSource(v2, *(CFRunLoopSourceRef *)(a1 + 216), kCFRunLoopCommonModes))
  {
    v3 = (__CFRunLoop *)sub_100193530();
    CFRunLoopAddSource(v3, *(CFRunLoopSourceRef *)(a1 + 216), kCFRunLoopCommonModes);
    CFRunLoopSourceSignal(*(CFRunLoopSourceRef *)(a1 + 216));
    v4 = (__CFRunLoop *)sub_100193530();
    CFRunLoopWakeUp(v4);
  }
  *(_BYTE *)(a1 + 110) = 1;
}

void sub_101251060(uint64_t a1)
{
  _QWORD *v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  BOOL v11;
  NSObject *v12;
  NSObject *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  _QWORD *v22;
  NSObject *v23;
  const char *v24;
  char *v25;
  NSObject *v26;
  uint64_t v27;
  const char *v28;
  char *v29;
  const char *v30;
  char *v31;
  uint64_t v32;
  const char *v33;
  char *v34;
  const char *v35;
  _QWORD *v36;
  _QWORD *v37;
  int v38;
  int v39;
  uint64_t v40;
  __int128 buf;
  uint64_t v42;
  uint64_t (**v43)();
  __int128 v44;
  __int128 v45;
  uint64_t (**v46)();
  __int128 __p;
  __int128 v48;
  uint64_t v49;
  char v50;

  if (*(_BYTE *)(a1 + 109))
  {
    v1 = (_QWORD *)a1;
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AAC90);
    v2 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v3 = v1[22];
      LODWORD(buf) = 134217984;
      *(_QWORD *)((char *)&buf + 4) = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Attempting to fulfill scan requests,%lu.", (uint8_t *)&buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AAC90);
      v27 = v1[22];
      v39 = 134217984;
      v40 = v27;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Attempting to fulfill scan requests,%lu.", &v39);
      v29 = (char *)v28;
      sub_100512490("Generic", 1, 0, 2, "void CLBTLEBeaconProviderMock::onEventSource()", "%s\n", v28);
      if (v29 != (char *)&buf)
        free(v29);
    }
    v4 = v1 + 20;
    v5 = (uint64_t *)v1[21];
    v37 = v1;
    v6 = 0;
    if (v5 != v1 + 20)
    {
      v7 = (uint64_t)(v1 + 14);
      do
      {
        if (v1[16])
        {
          *(_QWORD *)&buf = &buf;
          *((_QWORD *)&buf + 1) = &buf;
          v42 = 0;
          v43 = off_10213F058;
          v44 = 0u;
          v45 = 0u;
          v46 = off_10213F058;
          __p = 0u;
          v48 = 0u;
          LODWORD(v49) = 1;
          v50 = 1;
          v8 = v1[15];
          if (&buf != (__int128 *)(v8 + 16))
            sub_101253A88((uint64_t *)&buf, *(_QWORD *)(v8 + 24), v8 + 16);
          v39 = 0;
          (*(void (**)(_QWORD *, int *, __int128 *, _QWORD, uint64_t, _QWORD))(*v1 + 152))(v1, &v39, &buf, 0, 0xFFFFFFFFLL, 0);
          sub_101251A60(v7);
          v46 = off_10213F058;
          if (SBYTE7(v48) < 0)
            operator delete((void *)__p);
          v43 = off_10213F058;
          if (SBYTE7(v45) < 0)
            operator delete((void *)v44);
          sub_1007A1BE8((uint64_t *)&buf);
        }
        v9 = *v5;
        v10 = (uint64_t *)v5[1];
        *(_QWORD *)(v9 + 8) = v10;
        *(_QWORD *)v5[1] = v9;
        --v37[22];
        operator delete(v5);
        ++v6;
        v5 = v10;
        v11 = v10 == v4;
        v1 = v37;
      }
      while (!v11);
    }
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AAC90);
    v12 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 67109120;
      DWORD1(buf) = v6;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Fulfilled scan requests,%d.", (uint8_t *)&buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AAC90);
      v39 = 67109120;
      LODWORD(v40) = v6;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Fulfilled scan requests,%d.", &v39);
      v31 = (char *)v30;
      sub_100512490("Generic", 1, 0, 2, "void CLBTLEBeaconProviderMock::onEventSource()", "%s\n", v30);
      if (v31 != (char *)&buf)
        free(v31);
    }
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AAC90);
    v13 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v14 = v1[26];
      LODWORD(buf) = 134217984;
      *(_QWORD *)((char *)&buf + 4) = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Processing events for %lu proximity zones.", (uint8_t *)&buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AAC90);
      v32 = v1[26];
      v39 = 134217984;
      v40 = v32;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Processing events for %lu proximity zones.", &v39);
      v34 = (char *)v33;
      sub_100512490("Generic", 1, 0, 2, "void CLBTLEBeaconProviderMock::onEventSource()", "%s\n", v33);
      if (v34 != (char *)&buf)
        free(v34);
    }
    v15 = (_QWORD *)v1[24];
    v36 = v1 + 25;
    if (v15 == v1 + 25)
    {
      v38 = 0;
    }
    else
    {
      v38 = 0;
      v16 = v1 + 17;
      do
      {
        v17 = (uint64_t *)v1[18];
        while (v17 != v16)
        {
          if (v15 + 4 == v17 + 2
            || *((_DWORD *)v15 + 17) == *((_DWORD *)v17 + 13)
            && sub_100C33DF0((uint64_t)(v15 + 4), (uint64_t)(v17 + 2)))
          {
            *(_QWORD *)&buf = &buf;
            *((_QWORD *)&buf + 1) = &buf;
            v42 = 0;
            v43 = off_10213F058;
            v44 = 0u;
            v45 = 0u;
            v46 = off_10213F058;
            __p = 0u;
            v48 = 0u;
            LODWORD(v49) = 1;
            v50 = 1;
            std::string::operator=((std::string *)&v44, (const std::string *)v17 + 1);
            *((_QWORD *)&v45 + 1) = v17[6];
            std::string::operator=((std::string *)&__p, (const std::string *)(v17 + 8));
            *((_QWORD *)&v48 + 1) = v17[11];
            v49 = v17[12];
            v39 = 1;
            (*(void (**)(_QWORD *, int *, __int128 *, _QWORD, uint64_t, _QWORD))(*v1 + 152))(v1, &v39, &buf, 0, 0xFFFFFFFFLL, 0);
            v18 = v1;
            v19 = *v17;
            v20 = (uint64_t *)v17[1];
            *(_QWORD *)(v19 + 8) = v20;
            *(_QWORD *)v17[1] = v19;
            --v18[19];
            sub_101253920((uint64_t)(v17 + 2));
            operator delete(v17);
            v46 = off_10213F058;
            if (SBYTE7(v48) < 0)
              operator delete((void *)__p);
            v43 = off_10213F058;
            if (SBYTE7(v45) < 0)
              operator delete((void *)v44);
            ++v38;
            sub_1007A1BE8((uint64_t *)&buf);
            v17 = v20;
            v1 = v37;
          }
          else
          {
            v17 = (uint64_t *)v17[1];
          }
        }
        v21 = (_QWORD *)v15[1];
        if (v21)
        {
          do
          {
            v22 = v21;
            v21 = (_QWORD *)*v21;
          }
          while (v21);
        }
        else
        {
          do
          {
            v22 = (_QWORD *)v15[2];
            v11 = *v22 == (_QWORD)v15;
            v15 = v22;
          }
          while (!v11);
        }
        v15 = v22;
      }
      while (v22 != v36);
    }
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AAC90);
    v26 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 67109120;
      DWORD1(buf) = v38;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "Processed %d proximity zone events.", (uint8_t *)&buf, 8u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(&buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AAC90);
    v39 = 67109120;
    LODWORD(v40) = v38;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Processed %d proximity zone events.", &v39);
    v25 = (char *)v35;
    sub_100512490("Generic", 1, 0, 2, "void CLBTLEBeaconProviderMock::onEventSource()", "%s\n", v35);
LABEL_79:
    if (v25 != (char *)&buf)
      free(v25);
    return;
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021AAC90);
  v23 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf) = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "Bluetooth is powered off, no events will be processed.", (uint8_t *)&buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AAC90);
    LOWORD(v39) = 0;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Bluetooth is powered off, no events will be processed.", &v39, 2);
    v25 = (char *)v24;
    sub_100512490("Generic", 1, 0, 2, "void CLBTLEBeaconProviderMock::onEventSource()", "%s\n", v24);
    goto LABEL_79;
  }
}

void sub_101251A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_10079E8EC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101251A60(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = *(uint64_t **)(a1 + 8);
  v1 = *(_QWORD *)(a1 + 16);
  v3 = *v2;
  *(_QWORD *)(v3 + 8) = v2[1];
  *(_QWORD *)v2[1] = v3;
  *(_QWORD *)(a1 + 16) = v1 - 1;
  sub_1007A1BE8(v2 + 2);
  operator delete(v2);
}

_QWORD *sub_101251AA0@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1015A2E04(a2, __str);
}

uint64_t sub_101251B18(uint64_t a1, _DWORD *a2)
{
  if (*a2 <= 1u)
    sub_101250FFC(a1);
  return 1;
}

uint64_t sub_101251B3C(uint64_t a1, _DWORD *a2)
{
  int v4;
  int v5;

  if (*a2 <= 1u)
  {
    v4 = 0;
    if (!sub_1001B7864(a1, &v4, 1))
    {
      v5 = 1;
      if (!sub_1001B7864(a1, &v5, 1))
        sub_101250D64(a1);
    }
  }
  return 1;
}

void sub_101251BA8()
{
  operator new();
}

void sub_101251BF0()
{
  operator delete();
}

void sub_101251C14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021AAB90);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_1021AAB90);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLBTLEBeaconProvider_Type::Notification, NotificationData_T = CLBTLEBeaconProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

uint64_t sub_101251E88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022FE140);
}

BOOL sub_101251E9C(uint64_t a1, int a2, int *a3, char *a4)
{
  _BOOL8 result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  uint64_t *v28;
  char v29;
  uint64_t **v30;
  char v31;
  uint64_t **v32;
  uint64_t v33;
  char v34;
  _QWORD *v35;
  const char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  _BYTE v41[12];
  __int16 v42;
  int v43;
  _BYTE buf[24];
  uint64_t (**v45)();
  void *v46[2];
  __int128 v47;
  uint64_t (**v48)();
  void *__p[2];
  __int128 v50;
  int v51;
  char v52;

  v40 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      v39 = v10;
      v16 = *a3;
      v19 = *(_QWORD *)(v10 + 48);
      v18 = v10 + 48;
      v17 = v19;
      if (!v19)
        goto LABEL_31;
      v20 = v18;
      do
      {
        v21 = *(_DWORD *)(v17 + 28);
        v22 = v21 < v16;
        if (v21 >= v16)
          v23 = (uint64_t *)v17;
        else
          v23 = (uint64_t *)(v17 + 8);
        if (!v22)
          v20 = v17;
        v17 = *v23;
      }
      while (*v23);
      if (v20 == v18 || v16 < *(_DWORD *)(v20 + 28))
LABEL_31:
        v20 = v18;
      v24 = *(_QWORD *)(a1 + 64);
      if (!v24)
        goto LABEL_42;
      v25 = a1 + 64;
      do
      {
        v26 = *(_DWORD *)(v24 + 32);
        v27 = v26 < v16;
        if (v26 >= v16)
          v28 = (uint64_t *)v24;
        else
          v28 = (uint64_t *)(v24 + 8);
        if (!v27)
          v25 = v24;
        v24 = *v28;
      }
      while (*v28);
      if (v25 != a1 + 64 && v16 >= *(_DWORD *)(v25 + 32))
      {
        *(_QWORD *)v41 = v25;
        v33 = *(_QWORD *)(v25 + 56);
        v34 = *a4;
        *(_QWORD *)buf = &v40;
        *((_BYTE *)sub_1001AFE94((uint64_t **)(v25 + 40), &v40, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v34;
        *(_QWORD *)buf = buf;
        *(_OWORD *)&buf[8] = (unint64_t)buf;
        v45 = off_10213F058;
        *(_OWORD *)v46 = 0u;
        v47 = 0u;
        v48 = off_10213F058;
        *(_OWORD *)__p = 0u;
        v50 = 0u;
        v51 = 1;
        v52 = 1;
        if (v20 == v18
          && (*(unsigned int (**)(uint64_t, int *, _BYTE *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_101254FD8();
        }
        v48 = off_10213F058;
        if (SBYTE7(v50) < 0)
          operator delete(__p[0]);
        v45 = off_10213F058;
        if (SBYTE7(v47) < 0)
          operator delete(v46[0]);
        sub_1007A1BE8((uint64_t *)buf);
        if (v33)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        *(_QWORD *)v41 = a1 + 64;
        v29 = byte_1022FE141;
        HIDWORD(v38) = v16;
        *(_QWORD *)buf = (char *)&v38 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v29;
        HIDWORD(v38) = *a3;
        *(_QWORD *)buf = (char *)&v38 + 4;
        v30 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v30 + 8);
        v31 = *a4;
        HIDWORD(v38) = *a3;
        *(_QWORD *)buf = (char *)&v38 + 4;
        v32 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)buf = &v40;
        *((_BYTE *)sub_1001AFE94(v32 + 5, &v40, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v31;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v20 == v18)
      {
        *(_DWORD *)buf = *a3;
        sub_1000C6190((uint64_t **)(v39 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021AAB90);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v15;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  result = sub_1001BFF7C(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021AAB90);
    v35 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v35 = (_QWORD *)*v35;
    *(_DWORD *)v41 = 136446466;
    *(_QWORD *)&v41[4] = v35;
    v42 = 1026;
    v43 = a2;
    LODWORD(v38) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
      v41,
      v38);
    v37 = (char *)v36;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLBTLEBeaconProvider_Type::Notification, NotificationData_T = CLBTLEBeaconProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v36);
    if (v37 != buf)
      free(v37);
    return 0;
  }
  return result;
}

void sub_10125236C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_10079E8EC((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_10125238C(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021AAB90);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021AAB90);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLBTLEBeaconProvider_Type::Notification, NotificationData_T = CLBTLEBeaconProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

BOOL sub_10125260C(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE buf[12];
  __int16 v36;
  void **v37;
  char v38;
  int v39;
  _QWORD *v40;
  __int16 v41;
  _BYTE *v42;
  void *__p[2];
  char v44;

  HIDWORD(v34) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009E904((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021AAB90);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v44 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v36 = 2082;
                v37 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_1021AAB90);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v38 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v39 = 136446466;
                v40 = v29;
                v41 = 2082;
                v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                v33 = v32;
                if (v38 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLBTLEBeaconProvider_Type::Notification, NotificationData_T = CLBTLEBeaconProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v33);
                if (v33 != (char *)__p)
                  free(v33);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_101252994(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;

  v5 = *(_QWORD *)(a1 + 64);
  v3 = a1 + 64;
  v4 = v5;
  if (!v5)
    return 0;
  v7 = *a2;
  v8 = v3;
  do
  {
    v9 = *(_DWORD *)(v4 + 32);
    v10 = v9 < v7;
    if (v9 >= v7)
      v11 = (uint64_t *)v4;
    else
      v11 = (uint64_t *)(v4 + 8);
    if (!v10)
      v8 = v4;
    v4 = *v11;
  }
  while (*v11);
  if (v8 == v3)
    return 0;
  if (v7 < *(_DWORD *)(v8 + 32))
    return 0;
  v12 = *(_QWORD *)(v8 + 64);
  if (!v12)
    return 0;
  if (v12 != a3)
    sub_101253A88((uint64_t *)a3, *(_QWORD *)(v12 + 8), *(_QWORD *)(v8 + 64));
  std::string::operator=((std::string *)(a3 + 32), (const std::string *)(v12 + 32));
  *(_QWORD *)(a3 + 56) = *(_QWORD *)(v12 + 56);
  std::string::operator=((std::string *)(a3 + 72), (const std::string *)(v12 + 72));
  *(_QWORD *)(a3 + 96) = *(_QWORD *)(v12 + 96);
  *(_QWORD *)(a3 + 104) = *(_QWORD *)(v12 + 104);
  *(_BYTE *)(a3 + 112) = *(_BYTE *)(v12 + 112);
  return 1;
}

uint64_t sub_101252A54(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t **v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  int v10;
  __int128 v11;
  int *v12;

  sub_1012548C4(a3, &v11);
  v10 = *a2;
  v12 = &v10;
  v5 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v10, (uint64_t)&unk_101B9EB60, &v12);
  sub_1002B7674((uint64_t)(v5 + 8), &v11);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return 1;
}

void sub_101252B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101252B14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4[3];
  uint64_t (**v5)();
  void *v6[2];
  __int128 v7;
  uint64_t (**v8)();
  void *__p[2];
  __int128 v10;
  int v11;
  char v12;

  v4[0] = (uint64_t)v4;
  v4[1] = (uint64_t)v4;
  v4[2] = 0;
  v5 = off_10213F058;
  *(_OWORD *)v6 = 0u;
  v7 = 0u;
  v8 = off_10213F058;
  *(_OWORD *)__p = 0u;
  v10 = 0u;
  v11 = 1;
  v12 = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, a2, v4, a3, a4, 0);
  v8 = off_10213F058;
  if (SBYTE7(v10) < 0)
    operator delete(__p[0]);
  v5 = off_10213F058;
  if (SBYTE7(v7) < 0)
    operator delete(v6[0]);
  sub_1007A1BE8(v4);
}

void sub_101252BBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10079E8EC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101252BD0(uint64_t a1, signed __int32 *a2, uint64_t a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  os_activity_scope_state_s state;
  uint64_t buf;
  _BYTE v29[20];
  __int16 v30;
  _QWORD *v31;
  __int16 v32;
  std::__shared_weak_count *v33;
  _QWORD **v34;
  _QWORD *v35[3];
  std::__shared_weak_count *v36;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021AAB90);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      buf = 68289794;
      *(_WORD *)v29 = 2082;
      *(_QWORD *)&v29[2] = "";
      *(_WORD *)&v29[10] = 2082;
      *(_QWORD *)&v29[12] = "activity";
      v30 = 2082;
      v31 = v10;
      v32 = 2050;
      v33 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", (uint8_t *)&buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v34 = v35;
      memset(v35, 0, sizeof(v35));
      v36 = 0;
      sub_1004A6D60((uint64_t)&buf, a2, (uint64_t)&v34);
      v14 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)&buf);
      v18 = v33;
      if (v33)
      {
        p_shared_owners = (unint64_t *)&v33->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v29, *(_QWORD **)&v29[8]);
      v21 = v36;
      if (v36)
      {
        v22 = (unint64_t *)&v36->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v34, v35[0]);
    }
    if (a4)
    {
      sub_1012548C4(a3, &buf);
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)&buf);
      v24 = *(std::__shared_weak_count **)v29;
      if (*(_QWORD *)v29)
      {
        v25 = (unint64_t *)(*(_QWORD *)v29 + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_10125429C();
    os_activity_scope_leave(&state);
  }
}

void sub_1012531EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_101253238(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021AAB90);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021AAB90);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::listClients() [Notification_T = CLBTLEBeaconProvider_Type::Notification, NotificationData_T = CLBTLEBeaconProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021AAB90);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021AAB90);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::listClients() [Notification_T = CLBTLEBeaconProvider_Type::Notification, NotificationData_T = CLBTLEBeaconProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_1021AAB90);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021AAB90);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::listClients() [Notification_T = CLBTLEBeaconProvider_Type::Notification, NotificationData_T = CLBTLEBeaconProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_1012537E0(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_10125380C(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_1021AABC0;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_10125388C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_1012538A8(uint64_t a1)
{
  sub_101251060(*(_QWORD *)(a1 + 32));
}

void sub_1012538B0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        sub_101253920((uint64_t)(v3 + 2));
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void sub_101253920(uint64_t a1)
{
  *(_QWORD *)(a1 + 40) = off_10213F058;
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  *(_QWORD *)a1 = off_10213F058;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void sub_101253978(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        sub_1007A1BE8(v3 + 2);
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t sub_1012539E8(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021AABC0;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_101253A5C(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t *sub_101253A88(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;

  v4 = a2;
  v6 = (uint64_t *)a1[1];
  if (a2 != a3 && v6 != a1)
  {
    do
    {
      std::string::operator=((std::string *)(v6 + 2), (const std::string *)(v4 + 16));
      *((_DWORD *)v6 + 10) = *(_DWORD *)(v4 + 40);
      std::string::operator=((std::string *)(v6 + 7), (const std::string *)(v4 + 56));
      v6[10] = *(_QWORD *)(v4 + 80);
      v7 = *(_QWORD *)(v4 + 88);
      *((_WORD *)v6 + 48) = *(_WORD *)(v4 + 96);
      v6[11] = v7;
      v4 = *(_QWORD *)(v4 + 8);
      v6 = (uint64_t *)v6[1];
    }
    while (v4 != a3 && v6 != a1);
  }
  if (v6 == a1)
    return sub_101253B44((uint64_t)a1, a1, v4, a3);
  else
    return sub_101253C38((uint64_t)a1, v6, a1);
}

uint64_t *sub_101253B44(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a3 != a4)
  {
    v8 = sub_101253CB4(a1, 0, 0, (__int128 *)(a3 + 16));
    v9 = v8;
    v10 = *(_QWORD *)(a3 + 8);
    v11 = 1;
    if (v10 != a4)
    {
      v12 = (uint64_t)v8;
      do
      {
        v8 = sub_101253CB4(a1, v12, 0, (__int128 *)(v10 + 16));
        *(_QWORD *)(v12 + 8) = v8;
        ++v11;
        v10 = *(_QWORD *)(v10 + 8);
        v12 = (uint64_t)v8;
      }
      while (v10 != a4);
    }
    v13 = *a2;
    *(_QWORD *)(v13 + 8) = v9;
    *v9 = v13;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(_QWORD *)(a1 + 16) += v11;
    return v9;
  }
  return a2;
}

void sub_101253C10(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  sub_101948280(v1);
  __cxa_rethrow();
}

void sub_101253C24(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_101253C38(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  if (a2 != a3)
  {
    v4 = a2;
    v6 = *a3;
    v7 = *a2;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(*a3 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    do
    {
      v8 = (_QWORD *)v4[1];
      --*(_QWORD *)(a1 + 16);
      sub_1007A1C58((uint64_t)(v4 + 2));
      operator delete(v4);
      v4 = v8;
    }
    while (v8 != a3);
  }
  return a3;
}

_QWORD *sub_101253CB4(int a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  int v7;
  _QWORD *v8;

  v7 = a1 + 16;
  v8 = operator new(0x68uLL);
  *v8 = a2;
  v8[1] = a3;
  sub_101253D24(v7, v8 + 2, a4);
  return v8;
}

void sub_101253D10(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_BYTE *sub_101253D24(int a1, _QWORD *__dst, __int128 *a3)
{
  __int128 v5;
  _BYTE *result;
  __int128 v7;
  uint64_t v8;

  if (*((char *)a3 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    __dst[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)__dst = v5;
  }
  *((_DWORD *)__dst + 6) = *((_DWORD *)a3 + 6);
  __dst[4] = off_10213F058;
  result = __dst + 5;
  if (*((char *)a3 + 63) < 0)
  {
    result = sub_100115CE4(result, *((void **)a3 + 5), *((_QWORD *)a3 + 6));
  }
  else
  {
    v7 = *(__int128 *)((char *)a3 + 40);
    __dst[7] = *((_QWORD *)a3 + 7);
    *(_OWORD *)result = v7;
  }
  __dst[8] = *((_QWORD *)a3 + 8);
  v8 = *((_QWORD *)a3 + 9);
  *((_WORD *)__dst + 40) = *((_WORD *)a3 + 40);
  __dst[9] = v8;
  return result;
}

void sub_101253DC8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_101253DE4(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_101253DE4(a1, *(_QWORD *)a2);
    sub_101253DE4(a1, *((_QWORD *)a2 + 1));
    *((_QWORD *)a2 + 4) = off_10213F058;
    if (a2[63] < 0)
      operator delete(*((void **)a2 + 5));
    operator delete(a2);
  }
}

uint64_t *sub_101253E44(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)sub_1007A32B4((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    sub_101253ED8((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000145B0(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

uint64_t sub_101253ED8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t result;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_101253F58((uint64_t)v6 + 32, *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_101253F3C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  char *v2;
  uint64_t v3;

  *v1 = 0;
  sub_101253FC0(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_101253F58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = off_10213F058;
  v4 = a1 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_100115CE4((_BYTE *)v4, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)v4 = v5;
  }
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = 0;
  return a1;
}

void sub_101253FC0(uint64_t a1, char *__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    *((_QWORD *)__p + 4) = off_10213F058;
    if (__p[63] < 0)
      operator delete(*((void **)__p + 5));
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t *sub_10125401C(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;

  v3 = sub_10008A9F0(a1, (uint64_t *)a2);
  *(_QWORD *)(a2 + 32) = off_10213F058;
  if (*(char *)(a2 + 63) < 0)
    operator delete(*(void **)(a2 + 40));
  operator delete((void *)a2);
  return v3;
}

_QWORD *sub_10125406C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;

  v7 = operator new(0x28uLL);
  *v7 = a2;
  v7[1] = a3;
  sub_1012540C8(v7 + 2, a4);
  return v7;
}

void sub_1012540B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1012540C8(uint64_t *a1, uint64_t a2)
{
  uint64_t i;
  _QWORD *v5;
  uint64_t v6;

  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  for (i = *(_QWORD *)(a2 + 8); i != a2; i = *(_QWORD *)(i + 8))
  {
    v5 = sub_101253CB4((int)a1, 0, 0, (__int128 *)(i + 16));
    v6 = *a1;
    *v5 = *a1;
    v5[1] = a1;
    *(_QWORD *)(v6 + 8) = v5;
    *a1 = (uint64_t)v5;
    ++a1[2];
  }
  return a1;
}

void sub_101254144(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_1007A1BE8(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_101254158(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;

  v7 = a1 + 16;
  v8 = operator new(0x68uLL);
  *v8 = a2;
  v8[1] = a3;
  sub_1012541C8(v7, v8 + 2, a4);
  return v8;
}

void sub_1012541B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_BYTE *sub_1012541C8(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _BYTE *v5;
  __int128 v6;
  _BYTE *result;
  __int128 v8;

  *a2 = off_10213F058;
  v5 = a2 + 1;
  if (*(char *)(a3 + 31) < 0)
  {
    sub_100115CE4(v5, *(void **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(a3 + 8);
    a2[3] = *(_QWORD *)(a3 + 24);
    *(_OWORD *)v5 = v6;
  }
  a2[4] = *(_QWORD *)(a3 + 32);
  a2[5] = off_10213F058;
  result = a2 + 6;
  if (*(char *)(a3 + 71) < 0)
  {
    result = sub_100115CE4(result, *(void **)(a3 + 48), *(_QWORD *)(a3 + 56));
  }
  else
  {
    v8 = *(_OWORD *)(a3 + 48);
    a2[8] = *(_QWORD *)(a3 + 64);
    *(_OWORD *)result = v8;
  }
  a2[9] = *(_QWORD *)(a3 + 72);
  a2[10] = *(_QWORD *)(a3 + 80);
  return result;
}

void sub_101254278(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3 + 16;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_10125429C()
{
  operator new();
}

void sub_1012543C0()
{
  uint64_t v0;
  void **v1;
  uint64_t v2;

  *(_QWORD *)(v0 + 24) = v2 + 16;
  if (*(char *)(v0 + 55) < 0)
    operator delete(*v1);
  sub_1007A1BE8((uint64_t *)v0);
  operator delete();
}

void sub_101254414(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  id v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  const char *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  __int16 v54;
  int v55;
  uint8_t buf[4];
  _QWORD *v57;
  __int16 v58;
  int v59;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v51 = v9;
        v13 = sub_101254BB4(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, id, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 7);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v50 = v19;
              sub_1012547E8(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v51 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 28);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 28);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v50 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021AAB90);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                v57 = v25;
                v58 = 1026;
                v59 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_1021AAB90);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 7);
                v52 = 136446466;
                v53 = v45;
                v54 = 1026;
                v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                v48 = (uint8_t *)v47;
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLBTLEBeaconProvider_Type::Notification, NotificationData_T = CLBTLEBeaconProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v48 != buf)
                  free(v48);
              }
            }
          }
          while (v14 != v51 + 6);
        }
      }
    }
  }
}

_BYTE *sub_1012547E8(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  int *v14;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    v9 = sub_101254BB4(a4, a2);
    v10 = *(_QWORD *)a3 + 80;
    v11 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v14 = (int *)(*(_QWORD *)a2 + 32);
    v12 = sub_1001AFE94(v11, v14, (uint64_t)&unk_101B9EB60, &v14);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v13);
  }
  return result;
}

_QWORD *sub_1012548C4@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x90uLL);
  result = sub_10125491C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_101254908(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10125491C(_QWORD *a1, uint64_t a2)
{
  char v4;

  a1[2] = 0;
  *a1 = off_1021AACC0;
  a1[1] = 0;
  sub_1012549EC((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_101254968(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10125497C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021AACC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_101254990(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021AACC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_1012549C4(uint64_t a1)
{
  char v1;

  sub_101254AE4((uint64_t)&v1, a1 + 24);
}

_BYTE *sub_1012549EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  _BYTE *result;
  __int128 v7;

  sub_1012540C8((uint64_t *)a2, a3);
  *(_QWORD *)(a2 + 24) = off_10213F058;
  if (*(char *)(a3 + 55) < 0)
  {
    sub_100115CE4((_BYTE *)(a2 + 32), *(void **)(a3 + 32), *(_QWORD *)(a3 + 40));
  }
  else
  {
    v5 = *(_OWORD *)(a3 + 32);
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(a3 + 48);
    *(_OWORD *)(a2 + 32) = v5;
  }
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a2 + 64) = off_10213F058;
  result = (_BYTE *)(a2 + 72);
  if (*(char *)(a3 + 95) < 0)
  {
    result = sub_100115CE4(result, *(void **)(a3 + 72), *(_QWORD *)(a3 + 80));
  }
  else
  {
    v7 = *(_OWORD *)(a3 + 72);
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a3 + 88);
    *(_OWORD *)result = v7;
  }
  *(_QWORD *)(a2 + 96) = *(_QWORD *)(a3 + 96);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a3 + 104);
  *(_BYTE *)(a2 + 112) = *(_BYTE *)(a3 + 112);
  return result;
}

void sub_101254AB0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 24) = v3 + 16;
  if (*(char *)(v1 + 55) < 0)
    operator delete(*v2);
  sub_1007A1BE8((uint64_t *)v1);
  _Unwind_Resume(a1);
}

void sub_101254AE4(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 64) = off_10213F058;
  if (*(char *)(a2 + 95) < 0)
    operator delete(*(void **)(a2 + 72));
  *(_QWORD *)(a2 + 24) = off_10213F058;
  if (*(char *)(a2 + 55) < 0)
    operator delete(*(void **)(a2 + 32));
  sub_1007A1BE8((uint64_t *)a2);
}

uint64_t sub_101254B38(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
  {
    *(_QWORD *)(v1 + 64) = off_10213F058;
    if (*(char *)(v1 + 95) < 0)
      operator delete(*(void **)(v1 + 72));
    *(_QWORD *)(v1 + 24) = off_10213F058;
    if (*(char *)(v1 + 55) < 0)
      operator delete(*(void **)(v1 + 32));
    sub_1007A1BE8((uint64_t *)v1);
    operator delete();
  }
  return result;
}

id sub_101254BB4(void *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = objc_opt_class(CLCppContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_101254C00(a1);
  else
    return 0;
}

id sub_101254C00(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021AAD00);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C483EELL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021AAD00);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021AAD00);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C483EELL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021AAD00);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLBTLEBeaconProvider_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

void sub_101254FAC(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_101254FD8()
{
  operator new();
}

void sub_1012550FC()
{
  uint64_t v0;
  void **v1;
  uint64_t v2;

  *(_QWORD *)(v0 + 24) = v2 + 16;
  if (*(char *)(v0 + 55) < 0)
    operator delete(*v1);
  sub_1007A1BE8((uint64_t *)v0);
  operator delete();
}

uint64_t sub_101255150(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
  {
    *(_QWORD *)(v1 + 64) = off_10213F058;
    if (*(char *)(v1 + 95) < 0)
      operator delete(*(void **)(v1 + 72));
    *(_QWORD *)(v1 + 24) = off_10213F058;
    if (*(char *)(v1 + 55) < 0)
      operator delete(*(void **)(v1 + 32));
    sub_1007A1BE8((uint64_t *)v1);
    operator delete();
  }
  return result;
}

void sub_1012551CC()
{
  void *v0;

  operator delete(v0);
}

void sub_1012551D4(uint64_t a1, unsigned int a2)
{
  int v4;
  int v5;
  int v6;

  *(_DWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0xBFF0000000000000;
  sub_1002433B8(a1 + 64);
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_BYTE *)(a1 + 144) = 1;
  if (!a2)
  {
    sub_1019482B0(&v5);
    v4 = v5;
LABEL_6:
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/Odometry/CLGpsOdometrySubsampler.mm", v4, "CLGpsOdometrySubsampler");
    __break(1u);
    return;
  }
  if (a2 >= 0x10)
  {
    sub_101948420(&v6);
    v4 = v6;
    goto LABEL_6;
  }
}

void sub_101255298(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 112) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_1012552B8(unsigned int *a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  double v13;
  double *v14;
  unint64_t v15;
  uint64_t v16;
  double v17;
  unint64_t v18;
  double v19;
  double v20;
  void **v21;
  double *v22;
  double v23;
  double *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  double *v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  void *v42;
  char *v43;
  char *v44;
  int v45;
  double v46;
  unint64_t v47;
  double v48;
  double v49;
  double v50;
  char *v51;
  double *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  double *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  double *v63;
  double v64;
  double v65;
  double v66;
  NSObject *v67;
  const char *v68;
  uint8_t *v69;
  double *v70;
  double *v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  NSObject *v84;
  double v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  NSObject *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  const char *v94;
  const char *v95;
  uint8_t *v96;
  float64x2_t v97;
  float64x2_t v98;
  double v99;
  float64x2_t v100;
  uint64_t v101;
  uint8_t buf[4];
  double v103;
  __int16 v104;
  float64_t v105;
  __int16 v106;
  uint64_t v107;
  __int16 v108;
  uint64_t v109;
  __int16 v110;
  double v111;
  __int16 v112;
  uint64_t v113;
  int v114;
  float64_t v115;
  __int16 v116;
  float64_t v117;
  void *__p;
  char *v119;
  char *v120;
  _BYTE v121[24];
  uint64_t v122;
  _BYTE v123[10];
  __int16 v124;
  double v125;
  __int16 v126;
  uint64_t v127;

  v99 = *((double *)a1 + 4);
  *((double *)a1 + 3) = v99;
  if (*((_BYTE *)a1 + 144))
  {
    *((double *)a1 + 16) = a2;
    *((double *)a1 + 17) = a3;
    v13 = a3;
    *((_BYTE *)a1 + 144) = 0;
  }
  else
  {
    v13 = *((double *)a1 + 17);
  }
  v17 = sub_1010B9110(v13, a3);
  v18 = *((_QWORD *)a1 + 15);
  v19 = v17 + *((double *)a1 + 17);
  v20 = 1.0 / (a5 * a5);
  v21 = (void **)(a1 + 26);
  v22 = (double *)*((_QWORD *)a1 + 14);
  v23 = 1.0 / (a6 * a6);
  if ((unint64_t)v22 >= v18)
  {
    v14 = (double *)*v21;
    v25 = 0x8E38E38E38E38E39 * (((char *)v22 - (_BYTE *)*v21) >> 3);
    v26 = v25 + 1;
    if (v25 + 1 > 0x38E38E38E38E38ELL)
      sub_100259694();
    v27 = 0x8E38E38E38E38E39 * ((uint64_t)(v18 - (_QWORD)v14) >> 3);
    if (2 * v27 > v26)
      v26 = 2 * v27;
    if (v27 >= 0x1C71C71C71C71C7)
      v15 = 0x38E38E38E38E38ELL;
    else
      v15 = v26;
    if (v15)
    {
      v28 = (char *)sub_10029D26C((uint64_t)(a1 + 30), v15);
      v14 = (double *)*((_QWORD *)a1 + 13);
      v22 = (double *)*((_QWORD *)a1 + 14);
    }
    else
    {
      v28 = 0;
    }
    v29 = (double *)&v28[72 * v25];
    *v29 = a2;
    v29[1] = v19;
    v29[2] = a4;
    v29[3] = a5;
    v30 = &v28[72 * v15];
    v29[4] = a6;
    v29[5] = a7;
    v29[6] = v20;
    v29[7] = v23;
    v29[8] = 0.0;
    v24 = v29 + 9;
    if (v22 != v14)
    {
      do
      {
        *(_OWORD *)(v29 - 9) = *(_OWORD *)(v22 - 9);
        v31 = *(_OWORD *)(v22 - 7);
        v32 = *(_OWORD *)(v22 - 5);
        v33 = *(_OWORD *)(v22 - 3);
        *(v29 - 1) = *(v22 - 1);
        *(_OWORD *)(v29 - 3) = v33;
        *(_OWORD *)(v29 - 5) = v32;
        *(_OWORD *)(v29 - 7) = v31;
        v29 -= 9;
        v22 -= 9;
      }
      while (v22 != v14);
      v14 = (double *)*v21;
    }
    *((_QWORD *)a1 + 13) = v29;
    *((_QWORD *)a1 + 14) = v24;
    *((_QWORD *)a1 + 15) = v30;
    if (v14)
      operator delete(v14);
  }
  else
  {
    *v22 = a2;
    v22[1] = v19;
    v22[2] = a4;
    v22[3] = a5;
    v22[4] = a6;
    v22[5] = a7;
    v22[6] = v20;
    v22[7] = v23;
    v24 = v22 + 9;
    v22[8] = 0.0;
  }
  *((_QWORD *)a1 + 14) = v24;
  v34 = *((_QWORD *)a1 + 13);
  v35 = *a1;
  if (0x8E38E38E38E38E39 * (((uint64_t)v24 - v34) >> 3) != v35)
  {
LABEL_71:
    v81 = sub_10011E634((double *)a1 + 8, *((double *)a1 + 16), *((double *)a1 + 17), a2, v19, a4) * *((double *)a1 + 1);
    *((double *)a1 + 7) = v81;
    v82 = v81 + *((double *)a1 + 6);
    v83 = fmax(*((double *)a1 + 4), v82);
    *((double *)a1 + 4) = v83;
    *((double *)a1 + 5) = v83 - v99;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AAD20);
    v84 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v85 = *((double *)a1 + 4);
      v86 = *((_QWORD *)a1 + 5);
      v88 = *((_QWORD *)a1 + 6);
      v87 = *((_QWORD *)a1 + 7);
      *(_DWORD *)buf = 134350336;
      v103 = v82;
      v104 = 2050;
      v105 = v85;
      v106 = 2050;
      v107 = v86;
      v108 = 2050;
      v109 = v87;
      v110 = 2050;
      v111 = v81;
      v112 = 2050;
      v113 = v88;
      _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEBUG, "GPSODOM,totalD,%{public}.3lf,greatestD,%{public}.3lf,deltaGreatestD,%{public}.3lf,windowD,%{public}.3lf,deltaD,%{public}.3lf,sumDeltaD,%{public}.3lf", buf, 0x3Eu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AAD20);
      v90 = *((_QWORD *)a1 + 4);
      v91 = *((_QWORD *)a1 + 5);
      v93 = *((_QWORD *)a1 + 6);
      v92 = *((_QWORD *)a1 + 7);
      *(_DWORD *)v121 = 134350336;
      *(double *)&v121[4] = v82;
      *(_WORD *)&v121[12] = 2050;
      *(_QWORD *)&v121[14] = v90;
      *(_WORD *)&v121[22] = 2050;
      v122 = v91;
      *(_WORD *)v123 = 2050;
      *(_QWORD *)&v123[2] = v92;
      v124 = 2050;
      v125 = v81;
      v126 = 2050;
      v127 = v93;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GPSODOM,totalD,%{public}.3lf,greatestD,%{public}.3lf,deltaGreatestD,%{public}.3lf,windowD,%{public}.3lf,deltaD,%{public}.3lf,sumDeltaD,%{public}.3lf", v121, 62);
      v69 = (uint8_t *)v94;
      sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometrySubsampler::update(double, double, double, double, double, double)", "%s\n", v94);
LABEL_86:
      if (v69 != buf)
        free(v69);
    }
    return;
  }
  v122 = 0x40000000FLL;
  *(_QWORD *)v123 = 0;
  *(_QWORD *)&v121[16] = 0;
  *(_QWORD *)&v121[8] = 0;
  *(_QWORD *)v121 = off_10219E4D0;
  if (v35 >= 0x10)
    sub_101918728((uint64_t)v14, v15, v16);
  *(_DWORD *)&v121[8] = v35;
  *(_DWORD *)&v121[12] = 4;
  *(_DWORD *)&v121[16] = 4 * v35;
  *(_DWORD *)&v121[20] = v35;
  *(_QWORD *)v123 = &v123[8];
  if (!(_DWORD)v35)
  {
LABEL_30:
    sub_10108EB00((uint64_t)buf, (uint64_t)v121);
    sub_10108E068(buf);
    v119 = 0;
    __p = 0;
    v120 = 0;
    v46 = 0.0;
    if (*a1)
    {
      v47 = 0;
      v48 = 0.0;
      do
      {
        sub_10108E4DC(":", (uint64_t)v121, v47, (uint64_t)&v100);
        sub_10108E2C8((uint64_t)buf, (uint64_t)&v100);
        v50 = v49;
        v51 = v119;
        if (v119 >= v120)
        {
          v53 = (char *)__p;
          v54 = (v119 - (_BYTE *)__p) >> 3;
          v55 = v54 + 1;
          if ((unint64_t)(v54 + 1) >> 61)
            sub_100259694();
          v56 = v120 - (_BYTE *)__p;
          if ((v120 - (_BYTE *)__p) >> 2 > v55)
            v55 = v56 >> 2;
          if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
            v57 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v57 = v55;
          if (v57)
          {
            v58 = (char *)sub_10025E6A0((uint64_t)&v120, v57);
            v51 = v119;
            v53 = (char *)__p;
          }
          else
          {
            v58 = 0;
          }
          v59 = (double *)&v58[8 * v54];
          *v59 = v50;
          v52 = v59 + 1;
          while (v51 != v53)
          {
            v60 = *((_QWORD *)v51 - 1);
            v51 -= 8;
            *((_QWORD *)v59-- - 1) = v60;
          }
          __p = v59;
          v119 = (char *)v52;
          v120 = &v58[8 * v57];
          if (v53)
            operator delete(v53);
        }
        else
        {
          *(double *)v119 = v49;
          v52 = (double *)(v51 + 8);
        }
        v119 = (char *)v52;
        v61 = *((_QWORD *)a1 + 13);
        if (0x8E38E38E38E38E39 * ((*((_QWORD *)a1 + 14) - v61) >> 3) <= v47)
          sub_1002EAEB0();
        *(double *)(v61 + 72 * v47 + 64) = v50;
        v48 = v48 + v50;
        ++v47;
        v62 = *a1;
      }
      while (v47 < v62);
      v63 = (double *)__p;
      v64 = v48 / (double)v62;
      v65 = 0.0;
      if (__p != v52)
      {
        do
        {
          v66 = *v63++;
          v65 = v65 + (v66 - v64) * (v66 - v64);
        }
        while (v63 != v52);
      }
    }
    else
    {
      LODWORD(v62) = 0;
      v64 = NAN;
      v65 = 0.0;
    }
    v70 = (double *)*((_QWORD *)a1 + 13);
    v71 = (double *)*((_QWORD *)a1 + 14);
    if (v70 == v71)
    {
      v78 = NAN;
      v76 = 0.0;
      v74 = 0.0;
    }
    else
    {
      v72 = v64 + sqrt(v65 / (double)(v62 - 1));
      v73 = 0.0;
      v74 = 0.0;
      v75 = 0.0;
      v76 = 0.0;
      v46 = 0.0;
      do
      {
        if (v70[8] <= v72)
        {
          v77 = v70[6];
          v46 = v46 + *v70 * v77;
          v76 = v76 + v70[1] * v77;
          v75 = v75 + v70[2] * v77;
          v74 = v74 + v77;
          v73 = v73 + v70[7];
        }
        v70 += 9;
      }
      while (v70 != v71);
      v78 = v75 / v73;
    }
    v79 = v46 / v74;
    v80 = v76 / v74;
    *((long double *)a1 + 6) = *((double *)a1 + 6)
                             + sub_10011E634((double *)a1 + 8, *((double *)a1 + 16), *((double *)a1 + 17), v79, v76 / v74, v78)* *((double *)a1 + 1);
    *((_QWORD *)a1 + 7) = 0;
    *((double *)a1 + 16) = v79;
    *((double *)a1 + 17) = v80;
    *((_QWORD *)a1 + 14) = *((_QWORD *)a1 + 13);
    if (__p)
    {
      v119 = (char *)__p;
      operator delete(__p);
    }
    goto LABEL_71;
  }
  v36 = 0;
  v37 = *(double *)(v34 + 40);
  v97 = (float64x2_t)vdupq_n_s64(0x400921FB54442D18uLL);
  v98 = (float64x2_t)vdupq_n_s64(0x4066800000000000uLL);
LABEL_24:
  v38 = *((_QWORD *)a1 + 13);
  if (0x8E38E38E38E38E39 * ((*((_QWORD *)a1 + 14) - v38) >> 3) <= v36)
    sub_1002EAEB0();
  v39 = v38 + 72 * v36;
  v40 = *(_QWORD *)(v39 + 16);
  v41 = *(double *)(v39 + 40);
  v100 = vmulq_f64(vdivq_f64(*(float64x2_t *)v39, v98), v97);
  v101 = v40;
  v119 = 0;
  __p = 0;
  v120 = 0;
  if (cnnavigation::LLAToECEF(&v100, 1, &__p))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AAD20);
    v89 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134283777;
      v103 = v100.f64[0];
      v104 = 2049;
      v105 = v100.f64[1];
      _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_ERROR, "GPSODOM, Could not convert LLA Coordinate %{private}.7lf,%{private}.7lf to ECEF", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AAD20);
      v114 = 134283777;
      v115 = v100.f64[0];
      v116 = 2049;
      v117 = v100.f64[1];
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "GPSODOM, Could not convert LLA Coordinate %{private}.7lf,%{private}.7lf to ECEF", &v114, 22);
      v96 = (uint8_t *)v95;
      sub_100512490("Generic", 1, 0, 0, "void CLGpsOdometrySubsampler::update(double, double, double, double, double, double)", "%s\n", v95);
      if (v96 != buf)
        free(v96);
    }
    sub_101255E6C((uint64_t)a1);
  }
  else
  {
    v42 = __p;
    *(_QWORD *)sub_100206B6C((uint64_t)v121, v36, 0) = v42;
    v43 = v119;
    *(_QWORD *)sub_100206B6C((uint64_t)v121, v36, 1) = v43;
    v44 = v120;
    *(_QWORD *)sub_100206B6C((uint64_t)v121, v36, 2) = v44;
    v45 = 0;
    *(double *)sub_100206B6C((uint64_t)v121, v36, 3) = (v41 - v37) * 1000.0;
    while ((*(_QWORD *)sub_100206B6C((uint64_t)v121, v36, v45) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    {
      if (++v45 == 4)
      {
        if (++v36 < *a1)
          goto LABEL_24;
        goto LABEL_30;
      }
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AAD20);
    v67 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_ERROR, "GPSODOM, Subsampler window point acceptibility check failed.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AAD20);
      LOWORD(v114) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "GPSODOM, Subsampler window point acceptibility check failed.", &v114, 2);
      v69 = (uint8_t *)v68;
      sub_100512490("Generic", 1, 0, 0, "void CLGpsOdometrySubsampler::update(double, double, double, double, double, double)", "%s\n", v68);
      goto LABEL_86;
    }
  }
}

void sub_101255E18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_101255E6C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  double result;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021AAD20);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    v3 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)buf = 134349056;
    v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "GPSODOM,resetting storing distance %{public}.3lf", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AAD20);
    v5 = *(_QWORD *)(a1 + 24);
    v8 = 134349056;
    v9 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "GPSODOM,resetting storing distance %{public}.3lf", &v8, 12);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometrySubsampler::reset()", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  *(double *)(a1 + 16) = *(double *)(a1 + 24) + *(double *)(a1 + 16);
  result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_101BAFEE0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 144) = 1;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
  return result;
}

double sub_101256050(unsigned int *a1, unsigned int a2)
{
  NSObject *v4;
  double result;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  unsigned int v10;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021AAD20);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67240192;
    v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "GPSODOM, changing subsampler window size to %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AAD20);
    v8[0] = 67240192;
    v8[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "GPSODOM, changing subsampler window size to %{public}d", v8, 8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometrySubsampler::changeWindowSize", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  if (a2 >= 0x10)
    sub_101948590();
  if (!a2)
    sub_10194871C();
  if (*a1 != a2)
  {
    *a1 = a2;
    return sub_101255E6C((uint64_t)a1);
  }
  return result;
}

void sub_101256228(uint64_t a1, double a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  int v7;
  double v8;
  uint8_t buf[4];
  double v10;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021AAD20);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134349056;
    v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "GPSODOM, changing distance multiplier to %{public}.2f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AAD20);
    v7 = 134349056;
    v8 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "GPSODOM, changing distance multiplier to %{public}.2f", &v7, 12);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLGpsOdometrySubsampler::changeDistanceMultiplier(double)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  if (*(double *)(a1 + 8) != a2)
  {
    *(double *)(a1 + 8) = a2;
    sub_101255E6C(a1);
  }
}

void sub_1012563F4(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

uint64_t sub_1012566C8(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 8 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1006D0BF4(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = (_OWORD *)(*(_QWORD *)(v5 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) + ((v7 & 0x3F) << 6));
  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v8[2] = a2[2];
  v8[3] = v11;
  *v8 = v9;
  v8[1] = v10;
  v12 = a1[4];
  v13 = a1[5] + 1;
  a1[5] = v13;
  v14 = v12 + v13;
  v15 = a1[1];
  v16 = (_QWORD *)(v15 + 8 * (v14 >> 6));
  v17 = *v16 + ((v14 & 0x3F) << 6);
  if (a1[2] == v15)
    v17 = 0;
  if (v17 == *v16)
    v17 = *(v16 - 1) + 4096;
  return v17 - 64;
}

void sub_101256CA8(id a1)
{
  qword_10229FCD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

uint64_t sub_101256CD4@<X0>(_QWORD *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  sub_100690A70(a1, a2);
  return sub_1006CCC70(a3, a1);
}

uint64_t sub_101256D00@<X0>(int64x2_t *a1@<X0>, unsigned __int8 *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unint64_t v6;

  if (a1[5].i64[1])
  {
    sub_101256D98(a1, a2, a3);
  }
  else
  {
    v6 = a1[2].i64[1] + a1[2].i64[0] - 1;
    if (*(double *)(*(_QWORD *)(a1->i64[1] + 8 * (v6 / 0x11)) + 232 * (v6 % 0x11) + 8) == -1.0)
      sub_1012578D0((uint64_t)a1, (__int128 *)a2, a1);
    else
      sub_100690A70(a1, (__int128 *)a2);
  }
  return sub_1006CCC70(a4, a1);
}

void sub_101256D98(int64x2_t *a1, unsigned __int8 *a2, int a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  unint64_t v56;
  unint64_t v57;
  NSObject *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  NSObject *v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  char *v84;
  unint64_t v85;
  char *v86;
  char *v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void **v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  const char *v97;
  uint8_t *v98;
  const char *v99;
  uint8_t *v100;
  const char *v101;
  uint8_t *v102;
  _WORD v103[8];
  uint8_t buf[16];
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;

  v6 = a1[2].u64[0];
  v7 = a1->i64[1];
  v8 = a1[1].i64[0];
  v9 = (_QWORD *)(v7 + 8 * (v6 / 0x11));
  if (v8 == v7)
  {
    v10 = 0;
  }
  else
  {
    v10 = *(_QWORD *)(v7 + 8 * (v6 / 0x11)) + 232 * (v6 % 0x11);
    v11 = *(_QWORD *)(v7 + 8 * ((a1[2].i64[1] + v6) / 0x11)) + 232 * ((a1[2].i64[1] + v6) % 0x11);
    if (v10 != v11)
    {
      while (1)
      {
        v12 = *(_OWORD *)v10;
        v13 = *(_OWORD *)(v10 + 32);
        v105 = *(_OWORD *)(v10 + 16);
        v106 = v13;
        *(_OWORD *)buf = v12;
        v14 = *(_OWORD *)(v10 + 48);
        v15 = *(_OWORD *)(v10 + 64);
        v16 = *(_OWORD *)(v10 + 96);
        v109 = *(_OWORD *)(v10 + 80);
        v110 = v16;
        v107 = v14;
        v108 = v15;
        v17 = *(_OWORD *)(v10 + 112);
        v18 = *(_OWORD *)(v10 + 128);
        v19 = *(_OWORD *)(v10 + 160);
        v113 = *(_OWORD *)(v10 + 144);
        v114 = v19;
        v111 = v17;
        v112 = v18;
        v20 = *(_OWORD *)(v10 + 176);
        v21 = *(_OWORD *)(v10 + 192);
        v22 = *(_OWORD *)(v10 + 208);
        v118 = *(_QWORD *)(v10 + 224);
        v116 = v21;
        v117 = v22;
        v115 = v20;
        if (!uuid_compare((const unsigned __int8 *)&v108, a2 + 64))
          break;
        v10 += 232;
        if (v10 - *v9 == 3944)
        {
          v23 = v9[1];
          ++v9;
          v10 = v23;
        }
        if (v10 == v11)
        {
          v10 = v11;
          break;
        }
      }
      v7 = a1->i64[1];
      v8 = a1[1].i64[0];
    }
  }
  if (v8 == v7)
  {
    v25 = 0;
  }
  else
  {
    v24 = a1[2].i64[1] + a1[2].i64[0];
    v25 = *(_QWORD *)(v7 + 8 * (v24 / 0x11)) + 232 * (v24 % 0x11);
  }
  if (v10 == v25)
  {
    v32 = a1[5].u64[0];
    v33 = a1[3].i64[1];
    v34 = a1[4].i64[0];
    v35 = (_QWORD *)(v33 + 8 * (v32 / 0x11));
    if (v34 == v33)
    {
      v37 = 0;
      v36 = &a1[5].i64[1];
    }
    else
    {
      v36 = &a1[5].i64[1];
      v37 = *(_QWORD *)(v33 + 8 * (v32 / 0x11)) + 232 * (v32 % 0x11);
      v38 = *(_QWORD *)(v33 + 8 * ((a1[5].i64[1] + v32) / 0x11)) + 232 * ((a1[5].i64[1] + v32) % 0x11);
      if (v37 != v38)
      {
        while (1)
        {
          v39 = *(_OWORD *)v37;
          v40 = *(_OWORD *)(v37 + 32);
          v105 = *(_OWORD *)(v37 + 16);
          v106 = v40;
          *(_OWORD *)buf = v39;
          v41 = *(_OWORD *)(v37 + 48);
          v42 = *(_OWORD *)(v37 + 64);
          v43 = *(_OWORD *)(v37 + 96);
          v109 = *(_OWORD *)(v37 + 80);
          v110 = v43;
          v107 = v41;
          v108 = v42;
          v44 = *(_OWORD *)(v37 + 112);
          v45 = *(_OWORD *)(v37 + 128);
          v46 = *(_OWORD *)(v37 + 160);
          v113 = *(_OWORD *)(v37 + 144);
          v114 = v46;
          v111 = v44;
          v112 = v45;
          v47 = *(_OWORD *)(v37 + 176);
          v48 = *(_OWORD *)(v37 + 192);
          v49 = *(_OWORD *)(v37 + 208);
          v118 = *(_QWORD *)(v37 + 224);
          v116 = v48;
          v117 = v49;
          v115 = v47;
          if (!uuid_compare((const unsigned __int8 *)&v108, a2 + 64))
            break;
          v37 += 232;
          if (v37 - *v35 == 3944)
          {
            v50 = v35[1];
            ++v35;
            v37 = v50;
          }
          if (v37 == v38)
          {
            v37 = v38;
            break;
          }
        }
        v33 = a1[3].i64[1];
        v34 = a1[4].i64[0];
      }
    }
    if (v34 == v33)
    {
      v57 = 0;
    }
    else
    {
      v56 = a1[5].i64[1] + a1[5].i64[0];
      v57 = *(_QWORD *)(v33 + 8 * (v56 / 0x11)) + 232 * (v56 % 0x11);
    }
    if (v37 == v57)
    {
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_1021AAD60);
      v64 = qword_10229FE68;
      if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEFAULT, "CLWorkoutSeriesBuilder, client confirmed segment not in current overview or candidates list, deleting all candidates and appending confirmed segment", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_1021AAD60);
        v103[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "CLWorkoutSeriesBuilder, client confirmed segment not in current overview or candidates list, deleting all candidates and appending confirmed segment", v103, 2);
        v102 = (uint8_t *)v101;
        sub_100512490("Generic", 1, 0, 2, "void CLWorkoutSeriesBuilder::addCandidatesToConfirmedOverview(const CLMotionStateMediator_Type::WorkoutEvent &, BOOL)", "%s\n", v101);
        if (v102 != buf)
          free(v102);
      }
      sub_100690A70((int64x2_t *)a1[3].i64, (__int128 *)a2);
      if (a3)
      {
        v65 = a1[5].i64[1] + a1[5].i64[0] - 1;
        v66 = *(_QWORD *)(a1[3].i64[1] + 8 * (v65 / 0x11));
        v67 = v65 % 0x11;
        v68 = a1[2].i64[1] + a1[2].i64[0] - 1;
        *(_QWORD *)(*(_QWORD *)(a1->i64[1] + 8 * (v68 / 0x11)) + 232 * (v68 % 0x11) + 8) = *(_QWORD *)(v66 + 232 * v67);
      }
      else
      {
        v89 = a1[2].i64[1] + a1[2].i64[0] - 1;
        v90 = *(_QWORD *)(*(_QWORD *)(a1->i64[1] + 8 * (v89 / 0x11)) + 232 * (v89 % 0x11) + 8);
        v91 = a1[5].i64[1] + a1[5].i64[0] - 1;
        v66 = *(_QWORD *)(a1[3].i64[1] + 8 * (v91 / 0x11));
        v67 = v91 % 0x11;
        *(_QWORD *)(v66 + 232 * v67) = v90;
      }
      sub_100690A70(a1, (__int128 *)(v66 + 232 * v67));
    }
    else
    {
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_1021AAD60);
      v58 = qword_10229FE68;
      if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "CLWorkoutSeriesBuilder, client confirmed segment in candidates list, removing candidates after confirmed segment", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_1021AAD60);
        v103[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "CLWorkoutSeriesBuilder, client confirmed segment in candidates list, removing candidates after confirmed segment", v103, 2);
        v100 = (uint8_t *)v99;
        sub_100512490("Generic", 1, 0, 2, "void CLWorkoutSeriesBuilder::addCandidatesToConfirmedOverview(const CLMotionStateMediator_Type::WorkoutEvent &, BOOL)", "%s\n", v99);
        if (v100 != buf)
          free(v100);
      }
      v59 = v37 - *v35;
      v60 = 0x34F72C234F72C235 * (v59 >> 3);
      if (v59 < -231)
      {
        v69 = 15 - v60;
        v62 = (char *)&v35[-(v69 / 0x11)];
        v63 = (char *)(*(_QWORD *)v62 + 232 * (17 * (v69 / 0x11) - v69) + 3712);
      }
      else
      {
        v61 = v60 + 1;
        v62 = (char *)&v35[v61 / 0x11];
        v63 = (char *)(*(_QWORD *)v62 + 232 * (v61 % 0x11));
      }
      v70 = a1[5].i64[0] + a1[5].i64[1];
      v71 = a1[3].i64[1];
      v72 = (char *)(v71 + 8 * (v70 / 0x11));
      if (a1[4].i64[0] == v71)
        v73 = 0;
      else
        v73 = (char *)(*(_QWORD *)v72 + 232 * (v70 % 0x11));
      sub_100690B54((int64x2_t *)a1[3].i64, v62, v63, v72, v73);
      v75 = a1[2].i64[0];
      v74 = a1[2].i64[1];
      v76 = a1->i64[1];
      if (a3)
      {
        v77 = *(_QWORD *)a2;
        *(_QWORD *)(*(_QWORD *)(v76 + 8 * ((v74 + v75 - 1) / 0x11uLL)) + 232 * ((v74 + v75 - 1) % 0x11uLL) + 8) = *(_QWORD *)a2;
        v78 = a1[5].i64[1] + a1[5].i64[0] - 1;
        *(_QWORD *)(*(_QWORD *)(a1[3].i64[1] + 8 * (v78 / 0x11)) + 232 * (v78 % 0x11)) = v77;
      }
      v79 = v75 + v74;
      v80 = (char *)(v76 + 8 * (v79 / 0x11));
      if (a1[1].i64[0] == v76)
        v81 = 0;
      else
        v81 = *(_QWORD *)v80 + 232 * (v79 % 0x11);
      v82 = a1[5].u64[0];
      v83 = a1[3].i64[1];
      if (a1[4].i64[0] == v83)
      {
        v84 = 0;
        v87 = 0;
        v86 = (char *)(v83 + 8 * ((*v36 + v82) / 0x11));
      }
      else
      {
        v84 = (char *)(*(_QWORD *)(v83 + 8 * (v82 / 0x11)) + 232 * (v82 % 0x11));
        v85 = *v36 + v82;
        v86 = (char *)(v83 + 8 * (v85 / 0x11));
        v87 = (char *)(*(_QWORD *)v86 + 232 * (v85 % 0x11));
      }
      sub_10125801C(a1, v80, v81, (char *)(v83 + 8 * (v82 / 0x11)), v84, v86, v87);
      v88 = a1[2].i64[1] + a1[2].i64[0] - 1;
      *(_QWORD *)(*(_QWORD *)(a1->i64[1] + 8 * (v88 / 0x11)) + 232 * (v88 % 0x11) + 8) = 0xBFF0000000000000;
    }
  }
  else
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021AAD60);
    v26 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "CLWorkoutSeriesBuilder, client confirmed segment in the current overview, deleting all candidates and removing segments after confirmed segment", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_1021AAD60);
      v103[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "CLWorkoutSeriesBuilder, client confirmed segment in the current overview, deleting all candidates and removing segments after confirmed segment", v103, 2);
      v98 = (uint8_t *)v97;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutSeriesBuilder::addCandidatesToConfirmedOverview(const CLMotionStateMediator_Type::WorkoutEvent &, BOOL)", "%s\n", v97);
      if (v98 != buf)
        free(v98);
    }
    v27 = v10 - *v9;
    v28 = 0x34F72C234F72C235 * (v27 >> 3);
    if (v27 < -231)
    {
      v51 = 15 - v28;
      v30 = (char *)&v9[-(v51 / 0x11)];
      v31 = (char *)(*(_QWORD *)v30 + 232 * (17 * (v51 / 0x11) - v51) + 3712);
    }
    else
    {
      v29 = v28 + 1;
      v30 = (char *)&v9[v29 / 0x11];
      v31 = (char *)(*(_QWORD *)v30 + 232 * (v29 % 0x11));
    }
    v52 = a1[2].i64[0] + a1[2].i64[1];
    v53 = a1->i64[1];
    v54 = (char *)(v53 + 8 * (v52 / 0x11));
    if (a1[1].i64[0] == v53)
      v55 = 0;
    else
      v55 = (char *)(*(_QWORD *)v54 + 232 * (v52 % 0x11));
    sub_100690B54(a1, v30, v31, v54, v55);
    *(_QWORD *)(v10 + 8) = 0xBFF0000000000000;
  }
  v92 = (void **)a1[3].i64[1];
  v93 = a1[4].i64[0];
  a1[5].i64[1] = 0;
  v94 = v93 - (_QWORD)v92;
  if (v94 >= 0x11)
  {
    do
    {
      operator delete(*v92);
      v95 = a1[4].i64[0];
      v92 = (void **)(a1[3].i64[1] + 8);
      a1[3].i64[1] = (uint64_t)v92;
      v94 = v95 - (_QWORD)v92;
    }
    while (v94 > 0x10);
  }
  if (v94 >> 3 == 1)
  {
    v96 = 8;
  }
  else
  {
    if (v94 >> 3 != 2)
      return;
    v96 = 17;
  }
  a1[5].i64[0] = v96;
}

double sub_1012578D0(uint64_t a1, __int128 *a2, _QWORD *a3)
{
  uint64_t v3;
  double result;

  v3 = a3[5];
  if (v3)
    *(_QWORD *)(*(_QWORD *)(a3[1] + 8 * ((v3 + a3[4] - 1) / 0x11uLL)) + 232 * ((v3 + a3[4] - 1) % 0x11uLL) + 8) = *(_QWORD *)a2;
  *(_QWORD *)&result = sub_100690A70(a3, a2).n128_u64[0];
  return result;
}

uint64_t sub_101257920@<X0>(_QWORD *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  double v8;

  v5 = a1[5] + a1[4] - 1;
  v6 = *(_QWORD *)(a1[1] + 8 * (v5 / 0x11)) + 232 * (v5 % 0x11);
  v8 = *(double *)(v6 + 8);
  v7 = (_QWORD *)(v6 + 8);
  if (v8 == -1.0)
    *v7 = *(_QWORD *)a2;
  sub_1012578D0((uint64_t)a1, a2, a1 + 6);
  return sub_1006CCC70(a3, a1);
}

uint64_t sub_1012579A0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void **v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  const unsigned __int8 *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  NSObject *v39;
  const char *v40;
  uint8_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  unint64_t v47;
  uint64_t v49;
  const char *v50;
  uint8_t *v51;
  int v52;
  uint64_t v53;
  uint8_t buf[16];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _OWORD v58[10];
  uint64_t v59;

  v6 = (void **)a1[7];
  v7 = a1[8];
  a1[11] = 0;
  v8 = v7 - (_QWORD)v6;
  if (v8 >= 0x11)
  {
    do
    {
      operator delete(*v6);
      v9 = a1[8];
      v6 = (void **)(a1[7] + 8);
      a1[7] = v6;
      v8 = v9 - (_QWORD)v6;
    }
    while (v8 > 0x10);
  }
  if (v8 >> 3 == 1)
  {
    v10 = 8;
  }
  else
  {
    if (v8 >> 3 != 2)
      goto LABEL_8;
    v10 = 17;
  }
  a1[10] = v10;
LABEL_8:
  v11 = a1[4];
  v12 = a1[1];
  v13 = a1[2];
  v14 = (_QWORD *)(v12 + 8 * (v11 / 0x11));
  if (v13 == v12)
  {
    v15 = 0;
  }
  else
  {
    v15 = *(_QWORD *)(v12 + 8 * (v11 / 0x11)) + 232 * (v11 % 0x11);
    v16 = *(_QWORD *)(v12 + 8 * ((a1[5] + v11) / 0x11)) + 232 * ((a1[5] + v11) % 0x11);
    if (v15 != v16)
    {
      v17 = (const unsigned __int8 *)(a2 + 64);
      while (1)
      {
        v18 = *(_OWORD *)v15;
        v19 = *(_OWORD *)(v15 + 32);
        v55 = *(_OWORD *)(v15 + 16);
        v56 = v19;
        *(_OWORD *)buf = v18;
        v20 = *(_OWORD *)(v15 + 48);
        v21 = *(_OWORD *)(v15 + 64);
        v22 = *(_OWORD *)(v15 + 96);
        v58[1] = *(_OWORD *)(v15 + 80);
        v58[2] = v22;
        v57 = v20;
        v58[0] = v21;
        v23 = *(_OWORD *)(v15 + 112);
        v24 = *(_OWORD *)(v15 + 128);
        v25 = *(_OWORD *)(v15 + 160);
        v58[5] = *(_OWORD *)(v15 + 144);
        v58[6] = v25;
        v58[3] = v23;
        v58[4] = v24;
        v26 = *(_OWORD *)(v15 + 176);
        v27 = *(_OWORD *)(v15 + 192);
        v28 = *(_OWORD *)(v15 + 208);
        v59 = *(_QWORD *)(v15 + 224);
        v58[8] = v27;
        v58[9] = v28;
        v58[7] = v26;
        if (!uuid_compare((const unsigned __int8 *)v58, v17))
          break;
        v15 += 232;
        if (v15 - *v14 == 3944)
        {
          v29 = v14[1];
          ++v14;
          v15 = v29;
        }
        if (v15 == v16)
        {
          v15 = v16;
          break;
        }
      }
      v12 = a1[1];
      v13 = a1[2];
    }
  }
  if (v13 == v12)
  {
    v31 = 0;
  }
  else
  {
    v30 = a1[5] + a1[4];
    v31 = *(_QWORD *)(v12 + 8 * (v30 / 0x11)) + 232 * (v30 % 0x11);
  }
  if (v15 == v31)
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021AAD60);
    v39 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "CLWorkoutSeriesBuilder, cannot reset workout to confirmed workout, candidate not in list", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_1021AAD60);
      LOWORD(v52) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 16, "CLWorkoutSeriesBuilder, cannot reset workout to confirmed workout, candidate not in list", &v52, 2);
      v41 = (uint8_t *)v40;
      sub_100512490("Generic", 1, 0, 0, "CLWorkoutSeriesPredictor_Type::WorkoutList CLWorkoutSeriesBuilder::resetToConfirmedWorkout(const CLMotionStateMediator_Type::WorkoutEvent &)", "%s\n", v40);
      if (v41 != buf)
        free(v41);
    }
  }
  else
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021AAD60);
    v32 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      v33 = *(_QWORD *)(v15 + 112);
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v33;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "CLWorkoutSeriesBuilder, reset back to confirmed workout, currentSegment,%ld", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_1021AAD60);
      v49 = *(_QWORD *)(v15 + 112);
      v52 = 134217984;
      v53 = v49;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "CLWorkoutSeriesBuilder, reset back to confirmed workout, currentSegment,%ld", &v52);
      v51 = (uint8_t *)v50;
      sub_100512490("Generic", 1, 0, 2, "CLWorkoutSeriesPredictor_Type::WorkoutList CLWorkoutSeriesBuilder::resetToConfirmedWorkout(const CLMotionStateMediator_Type::WorkoutEvent &)", "%s\n", v50);
      if (v51 != buf)
        free(v51);
    }
    v34 = v15 - *v14;
    v35 = 0x34F72C234F72C235 * (v34 >> 3);
    if (v34 < -231)
    {
      v42 = 15 - v35;
      v37 = (char *)&v14[-(v42 / 0x11)];
      v38 = (char *)(*(_QWORD *)v37 + 232 * (17 * (v42 / 0x11) - v42) + 3712);
    }
    else
    {
      v36 = v35 + 1;
      v37 = (char *)&v14[v36 / 0x11];
      v38 = (char *)(*(_QWORD *)v37 + 232 * (v36 % 0x11));
    }
    v43 = a1[4] + a1[5];
    v44 = a1[1];
    v45 = (char *)(v44 + 8 * (v43 / 0x11));
    if (a1[2] == v44)
      v46 = 0;
    else
      v46 = (char *)(*(_QWORD *)v45 + 232 * (v43 % 0x11));
    sub_100690B54(a1, v37, v38, v45, v46);
    v47 = a1[5] + a1[4] - 1;
    *(_QWORD *)(*(_QWORD *)(a1[1] + 8 * (v47 / 0x11)) + 232 * (v47 % 0x11) + 8) = 0xBFF0000000000000;
  }
  return sub_1006CCC70(a3, a1);
}

uint64_t sub_101257F50@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  unint64_t v5;
  unint64_t v6;
  double *v7;
  double v8;
  void **v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = a1[5] + a1[4] - 1;
  v6 = *(_QWORD *)(a1[1] + 8 * (v5 / 0x11)) + 232 * (v5 % 0x11);
  v8 = *(double *)(v6 + 8);
  v7 = (double *)(v6 + 8);
  if (v8 == -1.0)
    *v7 = a3;
  v9 = (void **)a1[7];
  v10 = a1[8];
  a1[11] = 0;
  v11 = v10 - (_QWORD)v9;
  if (v11 >= 0x11)
  {
    do
    {
      operator delete(*v9);
      v12 = a1[8];
      v9 = (void **)(a1[7] + 8);
      a1[7] = v9;
      v11 = v12 - (_QWORD)v9;
    }
    while (v11 > 0x10);
  }
  if (v11 >> 3 == 1)
  {
    v13 = 8;
    goto LABEL_9;
  }
  if (v11 >> 3 == 2)
  {
    v13 = 17;
LABEL_9:
    a1[10] = v13;
  }
  return sub_1006CCC70(a2, a1);
}

unint64_t sub_10125801C(int64x2_t *a1, char *a2, uint64_t a3, char *a4, char *a5, char *a6, char *a7)
{
  unint64_t v7;

  if (a7 == a5)
    v7 = 0;
  else
    v7 = 2 * (a6 - a4)
       + ((a6 - a4) >> 3)
       + 0x34F72C234F72C235 * ((uint64_t)&a7[-*(_QWORD *)a6] >> 3)
       - 0x34F72C234F72C235 * ((uint64_t)&a5[-*(_QWORD *)a4] >> 3);
  return sub_1012580A8(a1, a2, a3, (unint64_t)a4, a5, (unint64_t)a6, a7, v7);
}

void sub_10125807C(id a1)
{
  qword_10229FE68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

unint64_t sub_1012580A8(int64x2_t *a1, char *a2, uint64_t a3, unint64_t a4, char *a5, unint64_t a6, _BYTE *a7, unint64_t a8)
{
  unint64_t v8;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  _QWORD *v36;
  unint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _QWORD *v53;
  unint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  char *v66;
  unint64_t v67;
  __n128 v68;
  _QWORD *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __n128 v84;
  __n128 v85;
  _QWORD *v86;
  unint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  char *v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  unint64_t v104;
  _BYTE *v106;
  char *v107;
  _BYTE **v108;
  char **v109;
  char **v110;
  _QWORD *v111;
  __n128 v112;
  _QWORD *v113;
  char *v114;

  v8 = a8;
  v14 = a1[2].u64[0];
  v15 = v14 / 0x11;
  v16 = a1->i64[1];
  v17 = a1[1].i64[0];
  v18 = (char *)(v16 + 8 * (v14 / 0x11));
  if (v17 == v16)
    v19 = 0;
  else
    v19 = *(_QWORD *)v18 + 232 * (v14 % 0x11);
  if (a3 == v19)
    v20 = 0;
  else
    v20 = 2 * (a2 - v18)
        + ((a2 - v18) >> 3)
        + 0x34F72C234F72C235 * ((a3 - *(_QWORD *)a2) >> 3)
        - 0x34F72C234F72C235 * ((uint64_t)(v19 - *(_QWORD *)v18) >> 3);
  v21 = a1[2].i64[1];
  if (v20 >= v21 - v20)
  {
    v24 = 2 * (v17 - v16) + ((v17 - v16) >> 3) - 1;
    if (v17 == v16)
      v24 = 0;
    v25 = v14 + v21;
    v26 = v24 - v25;
    if (a8 > v26)
    {
      sub_1006CCF48(a1, a8 - v26);
      v21 = a1[2].i64[1];
      v16 = a1->i64[1];
      v17 = a1[1].i64[0];
      v25 = a1[2].i64[0] + v21;
    }
    v27 = (_QWORD *)(v16 + 8 * (v25 / 0x11));
    v110 = (char **)a4;
    if (v17 == v16)
      v28 = 0;
    else
      v28 = (char *)(*v27 + 232 * (v25 % 0x11));
    v33 = v21 - v20;
    v34 = v21 - v20 - v8;
    if (v21 - v20 >= v8)
    {
      v109 = (char **)a6;
      v35 = v28;
      v36 = (_QWORD *)(v16 + 8 * (v25 / 0x11));
      v37 = (unint64_t)a7;
      if (!v8)
        goto LABEL_72;
    }
    else
    {
      if (v33 >= v8 >> 1)
      {
        v112.n128_u64[0] = a6;
        v112.n128_u64[1] = (unint64_t)a7;
      }
      else
      {
        v112.n128_u64[0] = (unint64_t)v110;
        v112.n128_u64[1] = (unint64_t)a5;
        v34 = v21 - v20;
      }
      sub_100692884(&v112, v34);
      v37 = v112.n128_u64[1];
      v53 = (_QWORD *)v112.n128_u64[0];
      v109 = (char **)v112.n128_u64[0];
      if ((_BYTE *)v112.n128_u64[1] == a7)
      {
        v35 = v28;
        v36 = v27;
      }
      else
      {
        v54 = v112.n128_u64[1];
        v36 = v27;
        v35 = v28;
        do
        {
          v55 = *(_OWORD *)v54;
          v56 = *(_OWORD *)(v54 + 32);
          *((_OWORD *)v35 + 1) = *(_OWORD *)(v54 + 16);
          *((_OWORD *)v35 + 2) = v56;
          *(_OWORD *)v35 = v55;
          v57 = *(_OWORD *)(v54 + 48);
          v58 = *(_OWORD *)(v54 + 64);
          v59 = *(_OWORD *)(v54 + 96);
          *((_OWORD *)v35 + 5) = *(_OWORD *)(v54 + 80);
          *((_OWORD *)v35 + 6) = v59;
          *((_OWORD *)v35 + 3) = v57;
          *((_OWORD *)v35 + 4) = v58;
          v60 = *(_OWORD *)(v54 + 112);
          v61 = *(_OWORD *)(v54 + 128);
          v62 = *(_OWORD *)(v54 + 160);
          *((_OWORD *)v35 + 9) = *(_OWORD *)(v54 + 144);
          *((_OWORD *)v35 + 10) = v62;
          *((_OWORD *)v35 + 7) = v60;
          *((_OWORD *)v35 + 8) = v61;
          v63 = *(_OWORD *)(v54 + 176);
          v64 = *(_OWORD *)(v54 + 192);
          v65 = *(_OWORD *)(v54 + 208);
          *((_QWORD *)v35 + 28) = *(_QWORD *)(v54 + 224);
          *((_OWORD *)v35 + 12) = v64;
          *((_OWORD *)v35 + 13) = v65;
          *((_OWORD *)v35 + 11) = v63;
          v35 += 232;
          if (&v35[-*v36] == (char *)3944)
          {
            v66 = (char *)v36[1];
            ++v36;
            v35 = v66;
          }
          v54 += 232;
          if (v54 - *v53 == 3944)
          {
            v67 = v53[1];
            ++v53;
            v54 = v67;
          }
          ++a1[2].i64[1];
        }
        while ((_BYTE *)v54 != a7);
      }
      v8 = v33;
      if (!v33)
        goto LABEL_72;
    }
    v107 = (char *)v37;
    v112.n128_u64[0] = (unint64_t)v27;
    v112.n128_u64[1] = (unint64_t)v28;
    sub_100692884(&v112, -(uint64_t)v8);
    v85 = v112;
    if ((char *)v112.n128_u64[1] != v28)
    {
      v87 = v112.n128_u64[1];
      v86 = (_QWORD *)v112.n128_u64[0];
      do
      {
        v88 = *(_OWORD *)v87;
        v89 = *(_OWORD *)(v87 + 32);
        *((_OWORD *)v35 + 1) = *(_OWORD *)(v87 + 16);
        *((_OWORD *)v35 + 2) = v89;
        *(_OWORD *)v35 = v88;
        v90 = *(_OWORD *)(v87 + 48);
        v91 = *(_OWORD *)(v87 + 64);
        v92 = *(_OWORD *)(v87 + 96);
        *((_OWORD *)v35 + 5) = *(_OWORD *)(v87 + 80);
        *((_OWORD *)v35 + 6) = v92;
        *((_OWORD *)v35 + 3) = v90;
        *((_OWORD *)v35 + 4) = v91;
        v93 = *(_OWORD *)(v87 + 112);
        v94 = *(_OWORD *)(v87 + 128);
        v95 = *(_OWORD *)(v87 + 160);
        *((_OWORD *)v35 + 9) = *(_OWORD *)(v87 + 144);
        *((_OWORD *)v35 + 10) = v95;
        *((_OWORD *)v35 + 7) = v93;
        *((_OWORD *)v35 + 8) = v94;
        v96 = *(_OWORD *)(v87 + 176);
        v97 = *(_OWORD *)(v87 + 192);
        v98 = *(_OWORD *)(v87 + 208);
        *((_QWORD *)v35 + 28) = *(_QWORD *)(v87 + 224);
        *((_OWORD *)v35 + 12) = v97;
        *((_OWORD *)v35 + 13) = v98;
        *((_OWORD *)v35 + 11) = v96;
        v35 += 232;
        if (&v35[-*v36] == (char *)3944)
        {
          v99 = (char *)v36[1];
          ++v36;
          v35 = v99;
        }
        v87 += 232;
        if (v87 - *v86 == 3944)
        {
          v100 = v86[1];
          ++v86;
          v87 = v100;
        }
        ++a1[2].i64[1];
      }
      while ((char *)v87 != v28);
    }
    if (v8 < v33)
    {
      v112.n128_u64[0] = (unint64_t)v27;
      v112.n128_u64[1] = (unint64_t)v28;
      sub_100692884(&v112, -(uint64_t)v33);
      sub_10069292C((char **)v112.n128_u64[0], (char *)v112.n128_u64[1], (char **)v85.n128_u64[0], (char *)v85.n128_u64[1], v27, v28, &v112);
      v27 = v113;
      v28 = v114;
    }
    sub_10069292C(v110, a5, v109, v107, v27, v28, &v112);
    goto LABEL_72;
  }
  if (a8 > v14)
  {
    sub_101258744((void **)a1, a8 - v14);
    v14 = a1[2].u64[0];
    v16 = a1->i64[1];
    v17 = a1[1].i64[0];
    v15 = v14 / 0x11;
  }
  v22 = (_QWORD *)(v16 + 8 * v15);
  if (v17 == v16)
    v23 = 0;
  else
    v23 = *v22 + 232 * (v14 % 0x11);
  v29 = v8 - v20;
  v108 = (_BYTE **)a6;
  if (v8 <= v20)
  {
    v111 = (_QWORD *)a4;
    v30 = v23;
    v31 = (_QWORD *)(v16 + 8 * v15);
    v32 = (unint64_t)a5;
    if (!v8)
      goto LABEL_72;
    goto LABEL_50;
  }
  if (v20 >= v8 >> 1)
  {
    v112.n128_u64[0] = a4;
    v112.n128_u64[1] = (unint64_t)a5;
  }
  else
  {
    v112.n128_u64[0] = a6;
    v112.n128_u64[1] = (unint64_t)a7;
    v29 = -(uint64_t)v20;
  }
  sub_100692884(&v112, v29);
  v32 = v112.n128_u64[1];
  v111 = (_QWORD *)v112.n128_u64[0];
  if ((char *)v112.n128_u64[1] == a5)
  {
    v30 = v23;
    v31 = v22;
  }
  else
  {
    v39 = v112.n128_u64[1];
    v38 = (_QWORD *)v112.n128_u64[0];
    v31 = v22;
    v30 = v23;
    do
    {
      if (v30 == *v31)
      {
        v40 = *--v31;
        v30 = v40 + 3944;
      }
      if (v39 == *v38)
      {
        v41 = *--v38;
        v39 = v41 + 3944;
      }
      v30 -= 232;
      v42 = *(_OWORD *)(v39 - 232);
      v43 = *(_OWORD *)(v39 - 200);
      *(_OWORD *)(v30 + 16) = *(_OWORD *)(v39 - 216);
      *(_OWORD *)(v30 + 32) = v43;
      *(_OWORD *)v30 = v42;
      v44 = *(_OWORD *)(v39 - 184);
      v45 = *(_OWORD *)(v39 - 168);
      v46 = *(_OWORD *)(v39 - 136);
      *(_OWORD *)(v30 + 80) = *(_OWORD *)(v39 - 152);
      *(_OWORD *)(v30 + 96) = v46;
      *(_OWORD *)(v30 + 48) = v44;
      *(_OWORD *)(v30 + 64) = v45;
      v47 = *(_OWORD *)(v39 - 120);
      v48 = *(_OWORD *)(v39 - 104);
      v49 = *(_OWORD *)(v39 - 72);
      *(_OWORD *)(v30 + 144) = *(_OWORD *)(v39 - 88);
      *(_OWORD *)(v30 + 160) = v49;
      *(_OWORD *)(v30 + 112) = v47;
      *(_OWORD *)(v30 + 128) = v48;
      v50 = *(_OWORD *)(v39 - 56);
      v51 = *(_OWORD *)(v39 - 40);
      v52 = *(_OWORD *)(v39 - 24);
      *(_QWORD *)(v30 + 224) = *(_QWORD *)(v39 - 8);
      *(_OWORD *)(v30 + 192) = v51;
      *(_OWORD *)(v30 + 208) = v52;
      *(_OWORD *)(v30 + 176) = v50;
      a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_101BB2F70);
      v39 -= 232;
    }
    while ((char *)v39 != a5);
  }
  v8 = v20;
  if (v20)
  {
LABEL_50:
    v106 = (_BYTE *)v32;
    v112.n128_u64[0] = (unint64_t)v22;
    v112.n128_u64[1] = v23;
    sub_100692884(&v112, v8);
    v68 = v112;
    if (v112.n128_u64[1] != v23)
    {
      v70 = v112.n128_u64[1];
      v69 = (_QWORD *)v112.n128_u64[0];
      do
      {
        if (v30 == *v31)
        {
          v71 = *--v31;
          v30 = v71 + 3944;
        }
        if (v70 == *v69)
        {
          v72 = *--v69;
          v70 = v72 + 3944;
        }
        v30 -= 232;
        v73 = *(_OWORD *)(v70 - 232);
        v74 = *(_OWORD *)(v70 - 200);
        *(_OWORD *)(v30 + 16) = *(_OWORD *)(v70 - 216);
        *(_OWORD *)(v30 + 32) = v74;
        *(_OWORD *)v30 = v73;
        v75 = *(_OWORD *)(v70 - 184);
        v76 = *(_OWORD *)(v70 - 168);
        v77 = *(_OWORD *)(v70 - 136);
        *(_OWORD *)(v30 + 80) = *(_OWORD *)(v70 - 152);
        *(_OWORD *)(v30 + 96) = v77;
        *(_OWORD *)(v30 + 48) = v75;
        *(_OWORD *)(v30 + 64) = v76;
        v78 = *(_OWORD *)(v70 - 120);
        v79 = *(_OWORD *)(v70 - 104);
        v80 = *(_OWORD *)(v70 - 72);
        *(_OWORD *)(v30 + 144) = *(_OWORD *)(v70 - 88);
        *(_OWORD *)(v30 + 160) = v80;
        *(_OWORD *)(v30 + 112) = v78;
        *(_OWORD *)(v30 + 128) = v79;
        v81 = *(_OWORD *)(v70 - 56);
        v82 = *(_OWORD *)(v70 - 40);
        v83 = *(_OWORD *)(v70 - 24);
        *(_QWORD *)(v30 + 224) = *(_QWORD *)(v70 - 8);
        *(_OWORD *)(v30 + 192) = v82;
        *(_OWORD *)(v30 + 208) = v83;
        *(_OWORD *)(v30 + 176) = v81;
        a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_101BB2F70);
        v70 -= 232;
      }
      while (v70 != v23);
    }
    if (v8 < v20)
    {
      v112.n128_u64[0] = (unint64_t)v22;
      v112.n128_u64[1] = v23;
      sub_100692884(&v112, v20);
      v84 = v112;
      v112.n128_u64[0] = (unint64_t)v22;
      v112.n128_u64[1] = v23;
      sub_100692AD8(v68.n128_u64[0], (_BYTE *)v68.n128_u64[1], v84.n128_u64[0], (_BYTE *)v84.n128_u64[1], (uint64_t)&v112);
      v23 = v112.n128_u64[1];
      v22 = (_QWORD *)v112.n128_u64[0];
    }
    v112.n128_u64[0] = (unint64_t)v22;
    v112.n128_u64[1] = v23;
    sub_100692AD8(v111, v106, v108, a7, (uint64_t)&v112);
  }
LABEL_72:
  v101 = a1[2].u64[0];
  v102 = a1->i64[1];
  v103 = (_QWORD *)(v102 + 8 * (v101 / 0x11));
  if (a1[1].i64[0] == v102)
    v104 = 0;
  else
    v104 = *v103 + 232 * (v101 % 0x11);
  v112.n128_u64[0] = (unint64_t)v103;
  v112.n128_u64[1] = v104;
  sub_100692884(&v112, v20);
  return v112.n128_u64[0];
}

void sub_101258744(void **a1, unint64_t a2)
{
  _BYTE *v3;
  _BYTE *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  void **v18;
  _BYTE *v19;
  uint64_t v20;
  unint64_t v21;
  void **v22;
  uint64_t v23;
  char *v24;
  char *i;
  int64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  int64_t v32;
  char *v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  void *v42;
  char *v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  int64_t v49;
  char *v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  void *v64;
  void *v65;
  void *__p[2];
  char *v67;
  char *v68;
  _QWORD *v69;

  v3 = a1[1];
  v4 = a1[2];
  if (v4 == v3)
    v5 = a2 + 1;
  else
    v5 = a2;
  if (v4 == v3)
    v6 = 0;
  else
    v6 = 2 * (v4 - v3) + ((v4 - v3) >> 3) - 1;
  if (v5 == 17 * (v5 / 0x11))
    v7 = v5 / 0x11;
  else
    v7 = v5 / 0x11 + 1;
  v8 = (uint64_t)a1[4];
  if (v7 >= (v6 - ((uint64_t)a1[5] + v8)) / 0x11uLL)
    v9 = (v6 - ((uint64_t)a1[5] + v8)) / 0x11uLL;
  else
    v9 = v7;
  if (v7 <= (v6 - ((uint64_t)a1[5] + v8)) / 0x11uLL)
  {
    for (a1[4] = (void *)(17 * v9 + v8); v9; --v9)
    {
      v18 = (void **)a1[2];
      __p[0] = *(v18 - 1);
      a1[2] = v18 - 1;
      sub_100343094((uint64_t)a1, __p);
    }
  }
  else
  {
    v10 = v7 - v9;
    v11 = (uint64_t)(a1 + 3);
    v12 = (v4 - v3) >> 3;
    v13 = (_BYTE *)a1[3] - (_BYTE *)*a1;
    if (v7 - v9 <= (v13 >> 3) - v12)
    {
      if (v10)
      {
        if (v3 == *a1)
        {
LABEL_30:
          v21 = v10;
          do
          {
            __p[0] = operator new(0xF68uLL);
            sub_100212218(a1, __p);
            --v21;
          }
          while (v21);
          v9 += v10;
          v8 = (uint64_t)a1[4];
        }
        else
        {
          while (1)
          {
            __p[0] = operator new(0xF68uLL);
            sub_100343094((uint64_t)a1, __p);
            v19 = a1[1];
            v20 = (_BYTE *)a1[2] - v19 == 8 ? 16 : 17;
            v8 = (uint64_t)a1[4] + v20;
            a1[4] = (void *)v8;
            if (!--v10)
              break;
            if (v19 == *a1)
              goto LABEL_30;
          }
        }
      }
      for (a1[4] = (void *)(v8 + 17 * v9); v9; --v9)
      {
        v22 = (void **)a1[2];
        __p[0] = *(v22 - 1);
        a1[2] = v22 - 1;
        sub_100343094((uint64_t)a1, __p);
      }
    }
    else
    {
      v14 = v4 == v3;
      v15 = 17 * v7;
      if (v13 >> 2 <= v10 + v12)
        v16 = v10 + v12;
      else
        v16 = v13 >> 2;
      v69 = a1 + 3;
      if (v16)
        v17 = (char *)sub_10025E6A0(v11, v16);
      else
        v17 = 0;
      v23 = v15 - v14;
      __p[0] = v17;
      __p[1] = v17;
      v67 = v17;
      v68 = &v17[8 * v16];
      do
      {
        v65 = operator new(0xF68uLL);
        sub_10003732C(__p, &v65);
        --v10;
      }
      while (v10);
      v24 = (char *)a1[2];
      for (i = v67; v9; --v9)
      {
        if (i == v68)
        {
          v26 = (char *)__p[1] - (char *)__p[0];
          if (__p[1] <= __p[0])
          {
            if (i == __p[0])
              v34 = 1;
            else
              v34 = (i - (char *)__p[0]) >> 2;
            v35 = (char *)sub_10025E6A0((uint64_t)v69, v34);
            v37 = (uint64_t *)__p[1];
            i = &v35[8 * (v34 >> 2)];
            v38 = v67 - (char *)__p[1];
            if (v67 != __p[1])
            {
              i = &v35[8 * (v34 >> 2) + (v38 & 0xFFFFFFFFFFFFFFF8)];
              v39 = 8 * (v38 >> 3);
              v40 = &v35[8 * (v34 >> 2)];
              do
              {
                v41 = *v37++;
                *(_QWORD *)v40 = v41;
                v40 += 8;
                v39 -= 8;
              }
              while (v39);
            }
            v42 = __p[0];
            __p[0] = v35;
            __p[1] = &v35[8 * (v34 >> 2)];
            v67 = i;
            v68 = &v35[8 * v36];
            if (v42)
            {
              operator delete(v42);
              i = v67;
            }
          }
          else
          {
            v27 = v26 >> 3;
            v28 = v26 >> 3 < -1;
            v29 = (v26 >> 3) + 2;
            if (v28)
              v30 = v29;
            else
              v30 = v27 + 1;
            v31 = (char *)__p[1] - 8 * (v30 >> 1);
            v32 = i - (char *)__p[1];
            if (i != __p[1])
            {
              memmove((char *)__p[1] - 8 * (v30 >> 1), __p[1], i - (char *)__p[1]);
              i = (char *)__p[1];
            }
            v33 = &i[-8 * (v30 >> 1)];
            i = &v31[v32];
            __p[1] = v33;
            v67 = &v31[v32];
          }
        }
        *(_QWORD *)i = *((_QWORD *)v24 - 1);
        i = v67 + 8;
        v67 += 8;
        v24 = (char *)a1[2] - 8;
        a1[2] = v24;
      }
      v43 = (char *)a1[1];
      if (v43 == v24)
      {
        v43 = v24;
      }
      else
      {
        do
        {
          if (i == v68)
          {
            v44 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (i == __p[0])
                v51 = 1;
              else
                v51 = (i - (char *)__p[0]) >> 2;
              v52 = (char *)sub_10025E6A0((uint64_t)v69, v51);
              v54 = (uint64_t *)__p[1];
              i = &v52[8 * (v51 >> 2)];
              v55 = v67 - (char *)__p[1];
              if (v67 != __p[1])
              {
                i = &v52[8 * (v51 >> 2) + (v55 & 0xFFFFFFFFFFFFFFF8)];
                v56 = 8 * (v55 >> 3);
                v57 = &v52[8 * (v51 >> 2)];
                do
                {
                  v58 = *v54++;
                  *(_QWORD *)v57 = v58;
                  v57 += 8;
                  v56 -= 8;
                }
                while (v56);
              }
              v59 = __p[0];
              __p[0] = v52;
              __p[1] = &v52[8 * (v51 >> 2)];
              v67 = i;
              v68 = &v52[8 * v53];
              if (v59)
              {
                operator delete(v59);
                i = v67;
              }
            }
            else
            {
              v45 = v44 >> 3;
              v28 = v44 >> 3 < -1;
              v46 = (v44 >> 3) + 2;
              if (v28)
                v47 = v46;
              else
                v47 = v45 + 1;
              v48 = (char *)__p[1] - 8 * (v47 >> 1);
              v49 = i - (char *)__p[1];
              if (i != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v47 >> 1), __p[1], i - (char *)__p[1]);
                i = (char *)__p[1];
              }
              v50 = &i[-8 * (v47 >> 1)];
              i = &v48[v49];
              __p[1] = v50;
              v67 = &v48[v49];
            }
          }
          v60 = *(_QWORD *)v43;
          v43 += 8;
          *(_QWORD *)i = v60;
          i = v67 + 8;
          v67 += 8;
        }
        while (v43 != a1[2]);
        v24 = (char *)a1[1];
      }
      v61 = v68;
      v62 = (char *)a1[3];
      v63 = (char *)a1[4];
      a1[2] = i;
      a1[3] = v61;
      v64 = *a1;
      *(_OWORD *)a1 = *(_OWORD *)__p;
      __p[0] = v64;
      __p[1] = v24;
      v67 = v43;
      v68 = v62;
      a1[4] = &v63[v23];
      if (v43 != v24)
        v67 = &v43[(v24 - v43 + 7) & 0xFFFFFFFFFFFFFFF8];
      if (v64)
        operator delete(v64);
    }
  }
}

void sub_101258BBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_1012598F8(void *a1)
{
  id v2;
  NSObject *v3;
  id v4;
  uint64_t v5;
  id v6;
  const char *v7;
  uint8_t *v8;
  id v10;
  int v11;
  id v12;
  uint8_t buf[4];
  id v14;

  if (!objc_msgSend(a1, "length"))
    return 0;
  v10 = 0;
  v2 = +[NSJSONSerialization JSONObjectWithData:options:error:](NSJSONSerialization, "JSONObjectWithData:options:error:", objc_msgSend(a1, "dataUsingEncoding:", 4), 1, &v10);
  if (v10)
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021AAD80);
    v3 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
    {
      v4 = objc_msgSend(objc_msgSend(v10, "localizedDescription"), "UTF8String");
      *(_DWORD *)buf = 136315138;
      v14 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#warning: error deserializing app bundle ids, %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021AAD80);
      v5 = qword_1022A0208;
      v6 = objc_msgSend(objc_msgSend(v10, "localizedDescription"), "UTF8String");
      v11 = 136315138;
      v12 = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v5, 0, "#warning: error deserializing app bundle ids, %s", (const char *)&v11);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "NSMutableArray *clientIdsFromBundleIdsString(NSString *)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  return v2;
}

void sub_101259DE4(id a1)
{
  qword_1022A0208 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

double sub_101259E10(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  double v4;
  double v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  double v11;
  NSObject *v12;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  const char *v19;
  uint8_t *v20;
  const char *v21;
  uint8_t *v22;
  double v23;
  int v24;
  double v25;
  __int16 v26;
  double v27;
  __int16 v28;
  double v29;
  uint8_t buf[4];
  double v31;
  __int16 v32;
  double v33;
  __int16 v34;
  double v35;

  if (*(double *)(a1 + 8) <= 0.0)
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_1021AADA0);
    v12 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#Error,FusedLoc,getAge called while MCT not set", buf, 2u);
    }
    v11 = -1.0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_1021AADA0);
      LOWORD(v24) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 16, "#Error,FusedLoc,getAge called while MCT not set", &v24, 2);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 0, "CFTimeInterval cllcf::LCFusionFusedLocation::getAge() const", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
  }
  else
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_1021AADA0);
    v2 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      v3 = sub_100B303DC();
      *(_DWORD *)buf = 1;
      v4 = sub_100B30608(v3, buf);
      v5 = *(double *)(a1 + 8);
      v6 = sub_100B303DC();
      *(_DWORD *)buf = 1;
      v7 = sub_100B30608(v6, buf);
      v8 = sub_100B303DC();
      v9 = sub_100B309E0(v8);
      *(_DWORD *)buf = 134218496;
      v31 = v4 - v5;
      v32 = 2048;
      v33 = v7;
      v34 = 2048;
      v35 = v9;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "FusedLoc,getAge,age,%.3f,now_mct,%.3f,propagation_us,%.3f", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_1021AADA0);
      v14 = qword_1022A01B8;
      v15 = sub_1005EEB24();
      v16 = *(double *)(a1 + 8);
      v17 = sub_1005EEB24();
      v18 = sub_100B303DC();
      v24 = 134218496;
      v25 = v15 - v16;
      v26 = 2048;
      v27 = v17;
      v28 = 2048;
      v29 = sub_100B309E0(v18);
      LODWORD(v23) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v14, 2, "FusedLoc,getAge,age,%.3f,now_mct,%.3f,propagation_us,%.3f", COERCE_DOUBLE(&v24), v23);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 2, "CFTimeInterval cllcf::LCFusionFusedLocation::getAge() const", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
    v10 = sub_100B303DC();
    *(_DWORD *)buf = 1;
    return sub_100B30608(v10, buf) - *(double *)(a1 + 8);
  }
  return v11;
}

void sub_10125A1B0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

double sub_10125A1BC(uint64_t a1, double *a2)
{
  double v2;
  double v3;
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  v2 = *(double *)(a1 + 8);
  if (v2 > 0.0)
    return *a2 - v2;
  if (qword_1022A01B0 != -1)
    dispatch_once(&qword_1022A01B0, &stru_1021AADA0);
  v4 = qword_1022A01B8;
  if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#Error,FusedLoc,getAge called while MCT not set", buf, 2u);
  }
  v3 = -1.0;
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_1021AADA0);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 16, "#Error,FusedLoc,getAge called while MCT not set", v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 0, "CFTimeInterval cllcf::LCFusionFusedLocation::getAge(const CFTimeInterval &) const", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return v3;
}

void sub_10125A368(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_10125A374(uint64_t result, int a2)
{
  *(_BYTE *)(result + 664) = 1;
  *(_DWORD *)(result + 652) = a2;
  *(_DWORD *)(result + 612) = a2;
  return result;
}

void sub_10125A388(_QWORD *a1, double *a2)
{
  while (a1[5])
  {
    if (sub_10125A1BC(*(_QWORD *)(a1[1] + 8 * (a1[4] / 0x17uLL)) + 176 * (a1[4] % 0x17uLL), a2) <= 300.0)
      break;
    sub_10125A430(a1);
  }
}

uint64_t sub_10125A430(_QWORD *a1)
{
  unint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;

  v2 = a1[4];
  v3 = *(std::__shared_weak_count **)(*(_QWORD *)(a1[1] + 8 * (v2 / 0x17)) + 176 * (v2 % 0x17) + 24);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
    v2 = a1[4];
  }
  v4 = a1[5] - 1;
  a1[4] = v2 + 1;
  a1[5] = v4;
  return sub_100A0EFD8((uint64_t)a1, 1);
}

void sub_10125A4B0(int64x2_t *a1, uint64_t a2)
{
  unint64_t v4;
  int v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t i;
  NSObject *v19;
  __int32 v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  int v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  int v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  int v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *p_shared_weak_owners;
  unint64_t v55;
  std::__shared_weak_count *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int32 v60;
  const char *v61;
  uint8_t *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  __int32 v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  _DWORD v68[4];
  uint8_t buf[4];
  __int32 v70;

  v4 = a1[2].u64[1];
  if (a1[41].i8[8])
  {
    if (v4 >= 6)
      sub_10125A430(a1);
  }
  else
  {
    if (v4 >= 0x1E)
      sub_10125A430(a1);
    if (!a1[40].i32[3])
    {
      v5 = dword_1022FE148 + 1;
      dword_1022FE148 = v5;
      a1[40].i32[3] = v5;
      a1[38].i32[1] = v5;
    }
  }
  v6 = *(std::__shared_weak_count **)(a2 + 24);
  if (!v6)
  {
    v7 = 0;
LABEL_24:
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_1021AADA0);
    v19 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      v20 = a1[40].i32[3];
      *(_DWORD *)buf = 67240192;
      v70 = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "FusedLoc,hID,%{public}d,trying to update with unavailable location object", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_1021AADA0);
      v60 = a1[40].i32[3];
      v68[0] = 67240192;
      v68[1] = v60;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "FusedLoc,hID,%{public}d,trying to update with unavailable location object", v68, 8);
      v62 = (uint8_t *)v61;
      sub_100512490("Generic", 1, 0, 2, "void cllcf::LCFusionLocationHypothesis::newLocationUpdate(const LCFusionFusedLocation &)", "%s\n", v61);
      if (v62 != buf)
        free(v62);
    }
    goto LABEL_29;
  }
  v7 = std::__shared_weak_count::lock(v6);
  if (!v7)
    goto LABEL_24;
  v8 = *(_QWORD *)(a2 + 16);
  if (!v8)
    goto LABEL_24;
  v9 = a1[2].i64[1];
  if (!v9)
  {
    sub_10125AB2C(a1, a2);
    a1[40].i32[2] = -1;
    v23 = a1[2].i64[1] + a1[2].i64[0] - 1;
    v24 = *(_QWORD *)(a1->i64[1] + 8 * (v23 / 0x17));
    v25 = v23 % 0x17;
    v26 = v24 + 176 * v25;
    v28 = *(unsigned __int8 *)(v26 + 168);
    v27 = (_BYTE *)(v26 + 168);
    if (v28)
      goto LABEL_41;
    *v27 = 1;
    v29 = v24 + 176 * v25;
    v30 = *(_OWORD *)(v8 + 8);
    v31 = *(_OWORD *)(v8 + 24);
    v32 = *(_OWORD *)(v8 + 40);
    *(_OWORD *)(v29 + 88) = *(_OWORD *)(v8 + 56);
    *(_OWORD *)(v29 + 72) = v32;
    *(_OWORD *)(v29 + 56) = v31;
    *(_OWORD *)(v29 + 40) = v30;
    v33 = *(_OWORD *)(v8 + 72);
    v34 = *(_OWORD *)(v8 + 88);
    v35 = *(_OWORD *)(v8 + 104);
    *(_OWORD *)(v29 + 148) = *(_OWORD *)(v8 + 116);
    *(_OWORD *)(v29 + 136) = v35;
    *(_OWORD *)(v29 + 120) = v34;
    *(_OWORD *)(v29 + 104) = v33;
    v36 = a1[2].i64[1] + a1[2].i64[0] - 1;
    v37 = *(_QWORD *)(a1->i64[1] + 8 * (v36 / 0x17)) + 176 * (v36 % 0x17);
LABEL_40:
    *(_BYTE *)(v37 + 169) = 0;
    *(_OWORD *)v37 = *(_OWORD *)(v8 + 8);
    goto LABEL_41;
  }
  v10 = *(double *)(a2 + 8);
  v11 = a1[2].u64[0];
  v12 = a1->i64[1];
  if (v10 >= *(double *)(*(_QWORD *)(v12 + 8 * ((v9 + v11 - 1) / 0x17)) + 176 * ((v9 + v11 - 1) % 0x17) + 8))
  {
    sub_10125AB2C(a1, a2);
    a1[40].i32[2] = a1[2].i32[2] - 2;
    goto LABEL_41;
  }
  v13 = *(_QWORD *)(v12 + 8 * (v11 / 0x17)) + 176 * (v11 % 0x17);
  if (v10 <= *(double *)(v13 + 8))
  {
    sub_10125AC60((uint64_t)a1, a2);
    a1[40].i32[2] = 0;
    v38 = a1[2].u64[0];
    v39 = *(_QWORD *)(a1->i64[1] + 8 * (v38 / 0x17));
    v40 = v38 % 0x17;
    v41 = v39 + 176 * v40;
    v43 = *(unsigned __int8 *)(v41 + 168);
    v42 = (_BYTE *)(v41 + 168);
    if (v43)
      goto LABEL_41;
    *v42 = 1;
    v44 = v39 + 176 * v40;
    v45 = *(_OWORD *)(v8 + 8);
    v46 = *(_OWORD *)(v8 + 24);
    v47 = *(_OWORD *)(v8 + 40);
    *(_OWORD *)(v44 + 88) = *(_OWORD *)(v8 + 56);
    *(_OWORD *)(v44 + 72) = v47;
    *(_OWORD *)(v44 + 56) = v46;
    *(_OWORD *)(v44 + 40) = v45;
    v48 = *(_OWORD *)(v8 + 72);
    v49 = *(_OWORD *)(v8 + 88);
    v50 = *(_OWORD *)(v8 + 104);
    *(_OWORD *)(v44 + 148) = *(_OWORD *)(v8 + 116);
    *(_OWORD *)(v44 + 136) = v50;
    *(_OWORD *)(v44 + 120) = v49;
    *(_OWORD *)(v44 + 104) = v48;
    v37 = *(_QWORD *)(a1->i64[1] + 8 * (a1[2].i64[0] / 0x17uLL)) + 176 * (a1[2].i64[0] % 0x17uLL);
    goto LABEL_40;
  }
  v14 = v9 - 1;
  a1[40].i32[2] = v9 - 1;
  if (a1[1].i64[0] != v12)
  {
    v15 = v11 + v9;
    v16 = (uint64_t *)(v12 + 8 * (v15 / 0x17));
    v17 = *v16;
    for (i = *v16 + 176 * (v15 % 0x17); i != v13; i -= 176)
    {
      if (i == v17)
      {
        v17 = *(v16 - 1);
        if (v10 >= *(double *)(v17 + 3880))
        {
LABEL_59:
          sub_10125AD7C(a1, v16, i, a2);
          break;
        }
        a1[40].i32[2] = --v14;
        i = v17 + 4048;
        --v16;
      }
      else
      {
        if (v10 >= *(double *)(i - 168))
          goto LABEL_59;
        a1[40].i32[2] = --v14;
      }
    }
  }
LABEL_41:
  v51 = 1;
  switch(a1[41].i32[1])
  {
    case 0:
    case 4:
      goto LABEL_45;
    case 1:
      v52 = a1[2].u64[1];
      if (v52 < 3)
        goto LABEL_47;
      a1[41].i64[0] = 0x200000000;
      goto LABEL_53;
    case 3:
      v51 = 2;
LABEL_45:
      a1[41].i32[1] = v51;
      goto LABEL_46;
    default:
LABEL_46:
      v52 = a1[2].u64[1];
LABEL_47:
      a1[41].i32[0] = 0;
      if (v52 == 1)
      {
        v53 = *(std::__shared_weak_count **)(a2 + 24);
        v66 = *(_QWORD *)(a2 + 16);
        v67 = v53;
        if (v53)
        {
          p_shared_weak_owners = (unint64_t *)&v53->__shared_weak_owners_;
          do
            v55 = __ldxr(p_shared_weak_owners);
          while (__stxr(v55 + 1, p_shared_weak_owners));
        }
        v65 = a1[24].i32[2];
        sub_1007284E8((uint64_t)a1[3].i64, (double *)(a2 + 8), &v66, &v65);
        v56 = v67;
        if (!v67)
          break;
LABEL_58:
        std::__shared_weak_count::__release_weak(v56);
        break;
      }
LABEL_53:
      if (a1[41].i8[8])
      {
        v57 = *(std::__shared_weak_count **)(a2 + 24);
        v63 = *(_QWORD *)(a2 + 16);
        v64 = v57;
        if (v57)
        {
          v58 = (unint64_t *)&v57->__shared_weak_owners_;
          do
            v59 = __ldxr(v58);
          while (__stxr(v59 + 1, v58));
        }
        sub_1007286B4((uint64_t)a1[3].i64, (double *)(a2 + 8), &v63);
        v56 = v64;
        if (v64)
          goto LABEL_58;
      }
      break;
  }
LABEL_29:
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_10125AB0C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

__n128 sub_10125AB2C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __n128 result;
  __int128 v19;
  __int128 v20;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 23 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10125E224(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x17));
  v9 = v7 % 0x17;
  v10 = v8 + 176 * v9;
  *(_OWORD *)v10 = *(_OWORD *)a2;
  v11 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(v10 + 24) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 16);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = v8 + 176 * v9;
  *(_QWORD *)(v14 + 32) = off_1021B4BA0;
  v15 = *(_OWORD *)(a2 + 40);
  v16 = *(_OWORD *)(a2 + 56);
  v17 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(v14 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(v14 + 72) = v17;
  *(_OWORD *)(v14 + 56) = v16;
  *(_OWORD *)(v14 + 40) = v15;
  result = *(__n128 *)(a2 + 104);
  v19 = *(_OWORD *)(a2 + 120);
  v20 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(v14 + 148) = *(_OWORD *)(a2 + 148);
  *(_OWORD *)(v14 + 136) = v20;
  *(_OWORD *)(v14 + 120) = v19;
  *(__n128 *)(v14 + 104) = result;
  *(_WORD *)(v14 + 168) = *(_WORD *)(a2 + 168);
  ++a1[5];
  return result;
}

int64x2_t sub_10125AC60(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int64x2_t result;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    sub_10125E538((void **)a1);
    v4 = *(_QWORD *)(a1 + 32);
  }
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (_QWORD *)(v5 + 8 * (v4 / 0x17));
  v7 = *v6 + 176 * (v4 % 0x17);
  if (*(_QWORD *)(a1 + 16) == v5)
    v7 = 0;
  if (v7 == *v6)
    v7 = *(v6 - 1) + 4048;
  *(_OWORD *)(v7 - 176) = *(_OWORD *)a2;
  v8 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v7 - 160) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(v7 - 152) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 16);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *(_QWORD *)(v7 - 144) = off_1021B4BA0;
  v11 = *(_OWORD *)(a2 + 40);
  v12 = *(_OWORD *)(a2 + 56);
  v13 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(v7 - 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(v7 - 104) = v13;
  *(_OWORD *)(v7 - 120) = v12;
  *(_OWORD *)(v7 - 136) = v11;
  v14 = *(_OWORD *)(a2 + 104);
  v15 = *(_OWORD *)(a2 + 120);
  v16 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(v7 - 28) = *(_OWORD *)(a2 + 148);
  *(_OWORD *)(v7 - 40) = v16;
  *(_OWORD *)(v7 - 56) = v15;
  *(_OWORD *)(v7 - 72) = v14;
  *(_WORD *)(v7 - 8) = *(_WORD *)(a2 + 168);
  result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_101BB2F70);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

_QWORD *sub_10125AD7C(int64x2_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  unint64_t v70;
  unint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  unint64_t v85;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;

  v6 = a1[2].u64[0];
  v7 = a1->i64[1];
  v8 = a1[1].i64[0];
  v9 = (_QWORD *)(v7 + 8 * (v6 / 0x17));
  if (v8 == v7)
    v10 = 0;
  else
    v10 = *v9 + 176 * (v6 % 0x17);
  if (a3 == v10)
    v11 = 0;
  else
    v11 = 23 * (a2 - v9) + 0x2E8BA2E8BA2E8BA3 * ((a3 - *a2) >> 4) - 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v10 - *v9) >> 4);
  v12 = a1[2].i64[1];
  v13 = v12 - v11;
  if (v11 >= v12 - v11)
  {
    if (v8 == v7)
      v22 = 0;
    else
      v22 = 23 * ((v8 - v7) >> 3) - 1;
    if (v22 == v12 + v6)
    {
      sub_10125E224(a1);
      v12 = a1[2].i64[1];
      v13 = v12 - v11;
    }
    if (v12 != v11)
    {
      v87 = a4;
      v37 = a1[2].i64[0] + v12;
      v38 = a1->i64[1];
      v39 = (_QWORD *)(v38 + 8 * (v37 / 0x17));
      v40 = *v39;
      v41 = *v39 + 176 * (v37 % 0x17);
      if (a1[1].i64[0] == v38)
        v42 = 0;
      else
        v42 = v41;
      v43 = 0x2E8BA2E8BA2E8BA3 * ((v42 - v40) >> 4);
      if (v42 - v40 < 177)
      {
        v71 = 23 - v43;
        v45 = &v39[-(v71 / 0x17)];
        v46 = *v45 + 176 * (23 * (v71 / 0x17) - v71) + 3872;
      }
      else
      {
        v44 = v43 - 1;
        v45 = &v39[v44 / 0x17];
        v46 = *v45 + 176 * (v44 % 0x17);
      }
      if (v46 == a4)
      {
        v87 = v42;
        a4 = v42;
      }
      *(_OWORD *)v42 = *(_OWORD *)v46;
      *(_OWORD *)(v42 + 16) = *(_OWORD *)(v46 + 16);
      *(_QWORD *)(v46 + 16) = 0;
      *(_QWORD *)(v46 + 24) = 0;
      *(_QWORD *)(v42 + 32) = off_1021B4BA0;
      v72 = *(_OWORD *)(v46 + 40);
      v73 = *(_OWORD *)(v46 + 56);
      v74 = *(_OWORD *)(v46 + 72);
      *(_OWORD *)(v42 + 88) = *(_OWORD *)(v46 + 88);
      *(_OWORD *)(v42 + 72) = v74;
      *(_OWORD *)(v42 + 56) = v73;
      *(_OWORD *)(v42 + 40) = v72;
      v75 = *(_OWORD *)(v46 + 104);
      v76 = *(_OWORD *)(v46 + 120);
      v77 = *(_OWORD *)(v46 + 136);
      *(_OWORD *)(v42 + 148) = *(_OWORD *)(v46 + 148);
      *(_OWORD *)(v42 + 136) = v77;
      *(_OWORD *)(v42 + 120) = v76;
      *(_OWORD *)(v42 + 104) = v75;
      *(_WORD *)(v42 + 168) = *(_WORD *)(v46 + 168);
      ++a1[2].i64[1];
      if (v13 >= 2)
      {
        v88 = v39;
        v89 = v42;
        sub_10081F17C(&v88, -(uint64_t)v13);
        v39 = sub_10125E9D0((uint64_t)a1, v88, v89, v45, v46, v39, v42, (unint64_t *)&v87);
        v42 = v78;
        a4 = v87;
      }
      if (v42 == *v39)
        v42 = *(v39 - 1) + 4048;
      v79 = v42 - 176;
      goto LABEL_56;
    }
    v23 = a1[2].i64[0] + v11;
    v24 = *(_QWORD *)(a1->i64[1] + 8 * (v23 / 0x17));
    v25 = v23 % 0x17;
    v26 = v24 + 176 * v25;
    *(_OWORD *)v26 = *(_OWORD *)a4;
    *(_QWORD *)(v26 + 16) = *(_QWORD *)(a4 + 16);
    v27 = *(_QWORD *)(a4 + 24);
    *(_QWORD *)(v26 + 24) = v27;
    if (v27)
    {
      v28 = (unint64_t *)(v27 + 16);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    v30 = v24 + 176 * v25;
    *(_QWORD *)(v30 + 32) = off_1021B4BA0;
    v31 = *(_OWORD *)(a4 + 40);
    v32 = *(_OWORD *)(a4 + 56);
    v33 = *(_OWORD *)(a4 + 72);
    *(_OWORD *)(v30 + 88) = *(_OWORD *)(a4 + 88);
    *(_OWORD *)(v30 + 72) = v33;
    *(_OWORD *)(v30 + 56) = v32;
    *(_OWORD *)(v30 + 40) = v31;
    v34 = *(_OWORD *)(a4 + 104);
    v35 = *(_OWORD *)(a4 + 120);
    v36 = *(_OWORD *)(a4 + 136);
    *(_OWORD *)(v30 + 148) = *(_OWORD *)(a4 + 148);
    *(_OWORD *)(v30 + 136) = v36;
    *(_OWORD *)(v30 + 120) = v35;
    *(_OWORD *)(v30 + 104) = v34;
    *(_WORD *)(v30 + 168) = *(_WORD *)(a4 + 168);
    ++a1[2].i64[1];
  }
  else
  {
    if (v6)
    {
      if (v11)
      {
LABEL_10:
        v87 = a4;
        v14 = a1[2].u64[0];
        v15 = a1->i64[1];
        v16 = (_QWORD *)(v15 + 8 * (v14 / 0x17));
        v17 = *v16;
        v18 = *v16 + 176 * (v14 % 0x17);
        if (a1[1].i64[0] == v15)
          v19 = 0;
        else
          v19 = v18;
        v20 = 0x2E8BA2E8BA2E8BA3 * ((v19 - v17) >> 4);
        if (v19 - v17 < 177)
          v21 = v16[-((23 - v20) / 0x17uLL)] + 176 * (23 * ((23 - v20) / 0x17uLL) - (23 - v20)) + 3872;
        else
          v21 = v16[(v20 - 1) / 0x17uLL] + 176 * ((v20 - 1) % 0x17uLL);
        if (v19 == a4)
        {
          v87 = v21;
          a4 = v21;
        }
        *(_OWORD *)v21 = *(_OWORD *)v19;
        *(_OWORD *)(v21 + 16) = *(_OWORD *)(v19 + 16);
        *(_QWORD *)(v19 + 16) = 0;
        *(_QWORD *)(v19 + 24) = 0;
        *(_QWORD *)(v21 + 32) = off_1021B4BA0;
        v60 = *(_OWORD *)(v19 + 40);
        v61 = *(_OWORD *)(v19 + 56);
        v62 = *(_OWORD *)(v19 + 72);
        *(_OWORD *)(v21 + 88) = *(_OWORD *)(v19 + 88);
        *(_OWORD *)(v21 + 72) = v62;
        *(_OWORD *)(v21 + 56) = v61;
        *(_OWORD *)(v21 + 40) = v60;
        v63 = *(_OWORD *)(v19 + 104);
        v64 = *(_OWORD *)(v19 + 120);
        v65 = *(_OWORD *)(v19 + 136);
        *(_OWORD *)(v21 + 148) = *(_OWORD *)(v19 + 148);
        *(_OWORD *)(v21 + 136) = v65;
        *(_OWORD *)(v21 + 120) = v64;
        *(_OWORD *)(v21 + 104) = v63;
        *(_WORD *)(v21 + 168) = *(_WORD *)(v19 + 168);
        a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_101BB2F70);
        if (v11 >= 2)
        {
          v66 = v19 - *v16;
          v67 = 0x2E8BA2E8BA2E8BA3 * (v66 >> 4);
          if (v66 < -175)
          {
            v80 = 21 - v67;
            v69 = &v16[-(v80 / 0x17)];
            v70 = *v69 + 176 * (23 * (v80 / 0x17) - v80) + 3872;
          }
          else
          {
            v68 = v67 + 1;
            v69 = &v16[v68 / 0x17];
            v70 = *v69 + 176 * (v68 % 0x17);
          }
          v88 = v16;
          v89 = v19;
          sub_10081F17C(&v88, v11);
          sub_10125E850((uint64_t)a1, v69, v70, v88, v89, v16, v19, (unint64_t *)&v87);
          v19 = v81;
          a4 = v87;
        }
        v79 = v19;
LABEL_56:
        sub_100E275CC(v79, a4);
        goto LABEL_57;
      }
    }
    else
    {
      sub_10125E538((void **)a1);
      if (v11)
        goto LABEL_10;
    }
    v47 = a1[2].u64[0];
    v48 = a1->i64[1];
    v49 = (_QWORD *)(v48 + 8 * (v47 / 0x17));
    v50 = *v49 + 176 * (v47 % 0x17);
    if (a1[1].i64[0] == v48)
      v50 = 0;
    if (v50 == *v49)
      v50 = *(v49 - 1) + 4048;
    *(_OWORD *)(v50 - 176) = *(_OWORD *)a4;
    *(_QWORD *)(v50 - 160) = *(_QWORD *)(a4 + 16);
    v51 = *(_QWORD *)(a4 + 24);
    *(_QWORD *)(v50 - 152) = v51;
    if (v51)
    {
      v52 = (unint64_t *)(v51 + 16);
      do
        v53 = __ldxr(v52);
      while (__stxr(v53 + 1, v52));
    }
    *(_QWORD *)(v50 - 144) = off_1021B4BA0;
    v54 = *(_OWORD *)(a4 + 40);
    v55 = *(_OWORD *)(a4 + 56);
    v56 = *(_OWORD *)(a4 + 72);
    *(_OWORD *)(v50 - 88) = *(_OWORD *)(a4 + 88);
    *(_OWORD *)(v50 - 104) = v56;
    *(_OWORD *)(v50 - 120) = v55;
    *(_OWORD *)(v50 - 136) = v54;
    v57 = *(_OWORD *)(a4 + 104);
    v58 = *(_OWORD *)(a4 + 120);
    v59 = *(_OWORD *)(a4 + 136);
    *(_OWORD *)(v50 - 28) = *(_OWORD *)(a4 + 148);
    *(_OWORD *)(v50 - 40) = v59;
    *(_OWORD *)(v50 - 56) = v58;
    *(_OWORD *)(v50 - 72) = v57;
    *(_WORD *)(v50 - 8) = *(_WORD *)(a4 + 168);
    a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_101BB2F70);
  }
LABEL_57:
  v82 = a1[2].u64[0];
  v83 = a1->i64[1];
  v84 = (_QWORD *)(v83 + 8 * (v82 / 0x17));
  if (a1[1].i64[0] == v83)
    v85 = 0;
  else
    v85 = *v84 + 176 * (v82 % 0x17);
  v88 = v84;
  v89 = v85;
  sub_10081F17C(&v88, v11);
  return v88;
}

BOOL sub_10125B528(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  double v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  double v22;
  char *v23;
  unint64_t *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  double v32;
  NSObject *v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  NSObject *v40;
  int v41;
  uint64_t v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  uint64_t v45;
  NSObject *v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  int v59;
  NSObject *v60;
  int v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  int v66;
  uint64_t v67;
  const char *v68;
  __int128 *v69;
  uint64_t v70;
  double v71;
  NSObject *v73;
  int v74;
  int v75;
  double v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t *p_shared_weak_owners;
  unint64_t v80;
  char v81;
  double v82;
  NSObject *v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  NSObject *v89;
  int v90;
  int v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  NSObject *v96;
  int v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  NSObject *v101;
  int v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  const char *v108;
  __int128 *v109;
  int v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  const char *v114;
  __int128 *v115;
  int v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  const char *v121;
  __int128 *v122;
  int v123;
  int v124;
  uint64_t v125;
  const char *v126;
  __int128 *v127;
  int v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  const char *v132;
  __int128 *v133;
  int v134;
  int v135;
  double v136;
  uint64_t v137;
  uint64_t v138;
  const char *v139;
  __int128 *v140;
  int v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  const char *v145;
  __int128 *v146;
  int v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  const char *v151;
  NSObject *v152;
  int v153;
  int v154;
  uint64_t v155;
  _BOOL8 result;
  int v157;
  int v158;
  uint64_t v159;
  const char *v160;
  __int128 *v161;
  NSObject *v162;
  int v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  char *v168;
  unint64_t *v169;
  unint64_t *v170;
  uint64_t v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  double *v178;
  unint64_t v179;
  unint64_t v180;
  int v181;
  uint64_t v182;
  const char *v183;
  uint64_t v184;
  int v185;
  uint64_t v186;
  char v187;
  __int128 v188;
  uint64_t v189;
  char *v190;
  std::__shared_weak_count *v191;
  uint64_t v192;
  std::__shared_weak_count *v193;
  uint64_t v194;
  std::__shared_weak_count *v195;
  uint64_t v196;
  std::__shared_weak_count *v197;
  uint64_t v198;
  __int16 v199;
  uint64_t v200;
  __int16 v201;
  int v202;
  __int16 v203;
  uint64_t v204;
  uint64_t (**v205)();
  _BYTE v206[26];
  __int16 v207;
  _BYTE v208[36];
  __int128 v209;
  __int128 v210;
  unint64_t v211;
  int v212;
  char v213;
  int v214;
  uint64_t (**v215)();
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  unint64_t v221;
  int v222;
  char v223;
  int v224;
  __int128 buf;
  _BYTE v226[18];
  __int16 v227;
  _BYTE v228[14];
  __int16 v229;
  uint64_t v230;

  v2 = *(unsigned int *)(a1 + 648);
  if ((v2 & 0x80000000) == 0)
  {
    v3 = *(_QWORD *)(a1 + 40);
    if (v3 > v2)
    {
      if (v3 - 1 <= v2)
      {
        *(_DWORD *)(a1 + 648) = v3 - 1;
        return 1;
      }
      v187 = 0;
      v189 = a1 + 48;
      __asm { FMOV            V0.2D, #-1.0 }
      v188 = _Q0;
      while (1)
      {
        v9 = *(_QWORD *)(a1 + 32);
        v10 = *(_QWORD *)(a1 + 8);
        v11 = ((unint64_t)(v9 + v2) * (unsigned __int128)0x642C8590B21642C9uLL) >> 64;
        v12 = (v11 + ((unint64_t)(v9 + v2 - v11) >> 1)) >> 4;
        if (!*(_BYTE *)(*(_QWORD *)(v10 + 8 * v12) + 176 * (v9 + v2 - 23 * v12) + 168))
        {
          if (qword_1022A01B0 != -1)
            dispatch_once(&qword_1022A01B0, &stru_1021AADA0);
          v162 = qword_1022A01B8;
          if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_ERROR))
          {
            v163 = *(_DWORD *)(a1 + 652);
            v164 = *(_QWORD *)(a1 + 40);
            LODWORD(buf) = 67240704;
            DWORD1(buf) = v163;
            WORD4(buf) = 1026;
            *(_DWORD *)((char *)&buf + 10) = v2;
            HIWORD(buf) = 2050;
            *(_QWORD *)v226 = v164;
            _os_log_impl((void *)&_mh_execute_header, v162, OS_LOG_TYPE_ERROR, "#Error,FusedLoc,hID,%{public}d,DataFusion called on fusion index which is not previously fused,index,%{public}d,bufferSize,%{public}zu", (uint8_t *)&buf, 0x18u);
          }
          result = sub_1001BFF7C(115, 0);
          if (!result)
            return result;
          bzero(&buf, 0x65CuLL);
          if (qword_1022A01B0 != -1)
            dispatch_once(&qword_1022A01B0, &stru_1021AADA0);
          v181 = *(_DWORD *)(a1 + 652);
          v182 = *(_QWORD *)(a1 + 40);
          LODWORD(v215) = 67240704;
          HIDWORD(v215) = v181;
          LOWORD(v216) = 1026;
          *(_DWORD *)((char *)&v216 + 2) = v2;
          WORD3(v216) = 2050;
          *((_QWORD *)&v216 + 1) = v182;
          LODWORD(v184) = 24;
          _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A01B8, 16, "#Error,FusedLoc,hID,%{public}d,DataFusion called on fusion index which is not previously fused,index,%{public}d,bufferSize,%{public}zu", &v215, v184);
          v161 = (__int128 *)v183;
          sub_100512490("Generic", 1, 0, 0, "BOOL cllcf::LCFusionLocationHypothesis::performLocationDataFusion()", "%s\n", v183);
LABEL_178:
          if (v161 != &buf)
            free(v161);
          return 0;
        }
        v13 = v2 + 1;
        v14 = *(_QWORD *)(v10 + 8 * ((v9 + v2 + 1) / 0x17uLL)) + 176 * ((v9 + v2 + 1) % 0x17uLL);
        v15 = *(std::__shared_weak_count **)(v14 + 24);
        if (!v15)
        {
          v16 = 0;
LABEL_21:
          if (qword_1022A01B0 != -1)
            dispatch_once(&qword_1022A01B0, &stru_1021AADA0);
          v40 = qword_1022A01B8;
          if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_ERROR))
          {
            v41 = *(_DWORD *)(a1 + 652);
            v42 = *(_QWORD *)(a1 + 40);
            LODWORD(buf) = 67240704;
            DWORD1(buf) = v41;
            WORD4(buf) = 1026;
            *(_DWORD *)((char *)&buf + 10) = v2 + 1;
            HIWORD(buf) = 2050;
            *(_QWORD *)v226 = v42;
            _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "#Error,FusedLoc,hID,%{public}d,DataFusion called on invalid new raw location,index,%{public}d,bufferSize,%{public}zu", (uint8_t *)&buf, 0x18u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_1022A01B0 != -1)
              dispatch_once(&qword_1022A01B0, &stru_1021AADA0);
            v106 = *(_DWORD *)(a1 + 652);
            v107 = *(_QWORD *)(a1 + 40);
            LODWORD(v215) = 67240704;
            HIDWORD(v215) = v106;
            LOWORD(v216) = 1026;
            *(_DWORD *)((char *)&v216 + 2) = v2 + 1;
            WORD3(v216) = 2050;
            *((_QWORD *)&v216 + 1) = v107;
            LODWORD(v184) = 24;
            _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A01B8, 16, "#Error,FusedLoc,hID,%{public}d,DataFusion called on invalid new raw location,index,%{public}d,bufferSize,%{public}zu", &v215, v184);
            v109 = (__int128 *)v108;
            sub_100512490("Generic", 1, 0, 0, "BOOL cllcf::LCFusionLocationHypothesis::performLocationDataFusion()", "%s\n", v108);
            if (v109 != &buf)
              free(v109);
          }
          v39 = 1;
          goto LABEL_27;
        }
        v16 = std::__shared_weak_count::lock(v15);
        if (!v16)
          goto LABEL_21;
        v17 = *(_QWORD *)(v14 + 16);
        if (!v17 || *(double *)(v17 + 40) <= 0.0)
          goto LABEL_21;
        v18 = *(double *)(v17 + 16);
        v19 = *(_QWORD *)(a1 + 32) + v2;
        v20 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * (v19 / 0x17));
        v21 = v19 % 0x17;
        v22 = *(double *)(v20 + 176 * (v19 % 0x17) + 8);
        v23 = (char *)operator new(0xA0uLL);
        *((_QWORD *)v23 + 1) = 0;
        v24 = (unint64_t *)(v23 + 8);
        *(_QWORD *)v23 = off_10218A5E0;
        *((_QWORD *)v23 + 2) = 0;
        *((_QWORD *)v23 + 3) = off_1021B4BA0;
        v25 = v20 + 176 * v21;
        v26 = *(_OWORD *)(v25 + 40);
        v27 = *(_OWORD *)(v25 + 56);
        v28 = *(_OWORD *)(v25 + 88);
        *((_OWORD *)v23 + 4) = *(_OWORD *)(v25 + 72);
        *((_OWORD *)v23 + 5) = v28;
        *((_OWORD *)v23 + 2) = v26;
        *((_OWORD *)v23 + 3) = v27;
        v29 = *(_OWORD *)(v25 + 104);
        v30 = *(_OWORD *)(v25 + 120);
        v31 = *(_OWORD *)(v25 + 136);
        *(_OWORD *)(v23 + 140) = *(_OWORD *)(v25 + 148);
        *((_OWORD *)v23 + 7) = v30;
        *((_OWORD *)v23 + 8) = v31;
        *((_OWORD *)v23 + 6) = v29;
        v215 = off_1021B4BA0;
        v216 = v188;
        v217 = xmmword_101BAFC90;
        v218 = xmmword_101BAFC90;
        v219 = v188;
        v220 = v188;
        v221 = 0xBFF0000000000000;
        v222 = 0;
        v223 = 0;
        v224 = 0;
        if (!sub_1007268C4(v189, (double *)(v17 + 16)) || (sub_100727EB0(v189, (uint64_t)&v215) & 1) == 0)
        {
          if (qword_1022A01B0 != -1)
            dispatch_once(&qword_1022A01B0, &stru_1021AADA0);
          v46 = qword_1022A01B8;
          if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_ERROR))
          {
            v47 = *(_DWORD *)(a1 + 652);
            v48 = *(_DWORD *)(v17 + 128);
            v49 = *(_QWORD *)(v17 + 16);
            v50 = *((_QWORD *)v23 + 5);
            LODWORD(buf) = 67240960;
            DWORD1(buf) = v47;
            WORD4(buf) = 1026;
            *(_DWORD *)((char *)&buf + 10) = v48;
            HIWORD(buf) = 2050;
            *(_QWORD *)v226 = v49;
            *(_WORD *)&v226[8] = 2050;
            *(_QWORD *)&v226[10] = v50;
            _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "#Error,FusedLoc,hID,%{public}d,DataFusion failed time aligning fused location,type,%{public}d,new location mct,%{public}.3f,fused location mct,%{public}.3f", (uint8_t *)&buf, 0x22u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_1022A01B0 != -1)
              dispatch_once(&qword_1022A01B0, &stru_1021AADA0);
            v110 = *(_DWORD *)(a1 + 652);
            v111 = *(_DWORD *)(v17 + 128);
            v112 = *(_QWORD *)(v17 + 16);
            v113 = *((_QWORD *)v23 + 5);
            LODWORD(v205) = 67240960;
            HIDWORD(v205) = v110;
            *(_WORD *)v206 = 1026;
            *(_DWORD *)&v206[2] = v111;
            *(_WORD *)&v206[6] = 2050;
            *(_QWORD *)&v206[8] = v112;
            *(_WORD *)&v206[16] = 2050;
            *(_QWORD *)&v206[18] = v113;
            LODWORD(v184) = 34;
            _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A01B8, 16, "#Error,FusedLoc,hID,%{public}d,DataFusion failed time aligning fused location,type,%{public}d,new location mct,%{public}.3f,fused location mct,%{public}.3f", &v205, v184);
            v115 = (__int128 *)v114;
            sub_100512490("Generic", 1, 0, 0, "BOOL cllcf::LCFusionLocationHypothesis::performLocationDataFusion()", "%s\n", v114);
            if (v115 != &buf)
              free(v115);
          }
          v39 = 1;
          goto LABEL_42;
        }
        v32 = v18 - v22;
        if (*(double *)&v217 <= *(double *)(v17 + 40) * 6.0 && *(double *)(a1 + 416) <= 60.0)
          break;
        if (qword_1022A01B0 != -1)
          dispatch_once(&qword_1022A01B0, &stru_1021AADA0);
        v33 = qword_1022A01B8;
        if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
        {
          v34 = *(_DWORD *)(a1 + 652);
          v35 = *(_DWORD *)(v17 + 128);
          v36 = *(_QWORD *)(v17 + 40);
          v37 = *(_QWORD *)(a1 + 416);
          v38 = *(_QWORD *)(a1 + 40);
          LODWORD(buf) = 67241728;
          DWORD1(buf) = v34;
          WORD4(buf) = 1026;
          *(_DWORD *)((char *)&buf + 10) = v35;
          HIWORD(buf) = 2050;
          *(_QWORD *)v226 = v36;
          *(_WORD *)&v226[8] = 2050;
          *(_QWORD *)&v226[10] = v217;
          v227 = 2050;
          *(_QWORD *)v228 = v37;
          *(_WORD *)&v228[8] = 1026;
          *(_DWORD *)&v228[10] = v2;
          v229 = 2050;
          v230 = v38;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "FusedLoc,hID,%{public}d,predicted fused location with large uncertainty switching to CC Fusion,type,%{public}d,new loc hunc,%{public}.1f,fused loc hunc,%{public}.1f,fused loc DR time_s,%{public}.1f,index,%{public}d,bufferSize,%{public}zu", (uint8_t *)&buf, 0x3Cu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1022A01B0 != -1)
            dispatch_once(&qword_1022A01B0, &stru_1021AADA0);
          v116 = *(_DWORD *)(a1 + 652);
          v117 = *(_DWORD *)(v17 + 128);
          v118 = *(_QWORD *)(v17 + 40);
          v119 = *(_QWORD *)(a1 + 416);
          v120 = *(_QWORD *)(a1 + 40);
          LODWORD(v205) = 67241728;
          HIDWORD(v205) = v116;
          *(_WORD *)v206 = 1026;
          *(_DWORD *)&v206[2] = v117;
          *(_WORD *)&v206[6] = 2050;
          *(_QWORD *)&v206[8] = v118;
          *(_WORD *)&v206[16] = 2050;
          *(_QWORD *)&v206[18] = v217;
          v207 = 2050;
          *(_QWORD *)v208 = v119;
          *(_WORD *)&v208[8] = 1026;
          *(_DWORD *)&v208[10] = v2;
          *(_WORD *)&v208[14] = 2050;
          *(_QWORD *)&v208[16] = v120;
          LODWORD(v184) = 60;
          _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "FusedLoc,hID,%{public}d,predicted fused location with large uncertainty switching to CC Fusion,type,%{public}d,new loc hunc,%{public}.1f,fused loc hunc,%{public}.1f,fused loc DR time_s,%{public}.1f,index,%{public}d,bufferSize,%{public}zu", &v205, v184);
          v122 = (__int128 *)v121;
          sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::LCFusionLocationHypothesis::performLocationDataFusion()", "%s\n", v121);
          if (v122 != &buf)
            free(v122);
        }
        sub_10125D0C0(a1, v2 + 1, v17, (uint64_t)&v215, v32);
        v187 = 1;
        v39 = 10;
        do
LABEL_42:
          v51 = __ldaxr(v24);
        while (__stlxr(v51 - 1, v24));
        if (!v51)
        {
          (*(void (**)(char *))(*(_QWORD *)v23 + 16))(v23);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v23);
        }
LABEL_27:
        if (v16)
        {
          p_shared_owners = (unint64_t *)&v16->__shared_owners_;
          do
            v44 = __ldaxr(p_shared_owners);
          while (__stlxr(v44 - 1, p_shared_owners));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        if (v39 != 10 && v39)
          return 0;
        v45 = *(_QWORD *)(a1 + 40);
        ++v2;
        if (v45 - 1 <= v13)
        {
          *(_DWORD *)(a1 + 648) = v45 - 1;
          if ((v187 & (v45 != 0)) != 0)
          {
            v165 = v45 - 1 + *(_QWORD *)(a1 + 32);
            v166 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * (v165 / 0x17));
            v167 = v165 % 0x17;
            if (*(_BYTE *)(v166 + 176 * (v165 % 0x17) + 168))
            {
              v168 = (char *)operator new(0xA0uLL);
              *((_QWORD *)v168 + 1) = 0;
              v169 = (unint64_t *)(v168 + 8);
              *((_QWORD *)v168 + 2) = 0;
              v170 = (unint64_t *)(v168 + 16);
              *(_QWORD *)v168 = off_10218A5E0;
              *((_QWORD *)v168 + 3) = off_1021B4BA0;
              v171 = v166 + 176 * v167;
              v172 = *(_OWORD *)(v171 + 40);
              v173 = *(_OWORD *)(v171 + 56);
              v174 = *(_OWORD *)(v171 + 88);
              *((_OWORD *)v168 + 4) = *(_OWORD *)(v171 + 72);
              *((_OWORD *)v168 + 5) = v174;
              *((_OWORD *)v168 + 2) = v172;
              *((_OWORD *)v168 + 3) = v173;
              v175 = *(_OWORD *)(v171 + 104);
              v176 = *(_OWORD *)(v171 + 120);
              v177 = *(_OWORD *)(v171 + 136);
              *(_OWORD *)(v168 + 140) = *(_OWORD *)(v171 + 148);
              *((_OWORD *)v168 + 7) = v176;
              *((_OWORD *)v168 + 8) = v177;
              *((_OWORD *)v168 + 6) = v175;
              v178 = (double *)(v171 + 8);
              v190 = v168 + 24;
              v191 = (std::__shared_weak_count *)v168;
              do
                v179 = __ldxr(v170);
              while (__stxr(v179 + 1, v170));
              sub_1007286B4(v189, v178, (uint64_t *)&v190);
              if (v191)
                std::__shared_weak_count::__release_weak(v191);
              do
                v180 = __ldaxr(v169);
              while (__stlxr(v180 - 1, v169));
              if (!v180)
              {
                (*(void (**)(char *))(*(_QWORD *)v168 + 16))(v168);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v168);
              }
            }
          }
          return 1;
        }
      }
      v194 = 0;
      v195 = 0;
      if (*(_QWORD *)(a1 + 40) > 2uLL)
      {
        if (*((_DWORD *)v23 + 38) == *(_DWORD *)(v17 + 128))
        {
          v52 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * ((*(_QWORD *)(a1 + 32) + v2) / 0x17uLL))
              + 176 * ((*(_QWORD *)(a1 + 32) + v2) % 0x17uLL);
          buf = 0uLL;
          v53 = *(std::__shared_weak_count **)(v52 + 24);
          if (v53)
          {
            *((_QWORD *)&buf + 1) = std::__shared_weak_count::lock(v53);
            if (*((_QWORD *)&buf + 1))
              *(_QWORD *)&buf = *(_QWORD *)(v52 + 16);
          }
          sub_1002B7674((uint64_t)&v194, &buf);
          sub_100261F44((uint64_t)&buf);
        }
        else if (v2 >= 2)
        {
          v54 = v2;
          do
          {
            v185 = v54;
            v186 = v54 - 1;
            v55 = *(_QWORD *)(a1 + 32) + (v54 - 1);
            v56 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * (v55 / 0x17)) + 176 * (v55 % 0x17);
            v196 = 0;
            v197 = 0;
            v57 = *(std::__shared_weak_count **)(v56 + 24);
            if (v57
              && ((v197 = std::__shared_weak_count::lock(v57)) == 0
                ? (v58 = v196)
                : (v58 = *(_QWORD *)(v56 + 16), v196 = v58),
                  v58 && *(double *)(v58 + 40) > 0.0))
            {
              if (*(_DWORD *)(v58 + 128) == *(_DWORD *)(v17 + 128))
              {
                sub_100349198(&v194, &v196);
                v59 = 41;
              }
              else
              {
                v59 = 0;
              }
            }
            else
            {
              if (qword_1022A01B0 != -1)
                dispatch_once(&qword_1022A01B0, &stru_1021AADA0);
              v60 = qword_1022A01B8;
              if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
              {
                v61 = *(_DWORD *)(a1 + 652);
                v62 = *(_QWORD *)(a1 + 40);
                LODWORD(buf) = 67240704;
                DWORD1(buf) = v61;
                WORD4(buf) = 1026;
                *(_DWORD *)((char *)&buf + 10) = v186;
                HIWORD(buf) = 2050;
                *(_QWORD *)v226 = v62;
                _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEBUG, "FusedLoc,hID,%{public}d,DataFusion detected invalid raw location in the buffer,index,%{public}d,bufferSize,%{public}zu", (uint8_t *)&buf, 0x18u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(&buf, 0x65CuLL);
                if (qword_1022A01B0 != -1)
                  dispatch_once(&qword_1022A01B0, &stru_1021AADA0);
                v66 = *(_DWORD *)(a1 + 652);
                v67 = *(_QWORD *)(a1 + 40);
                LODWORD(v205) = 67240704;
                HIDWORD(v205) = v66;
                *(_WORD *)v206 = 1026;
                *(_DWORD *)&v206[2] = v186;
                *(_WORD *)&v206[6] = 2050;
                *(_QWORD *)&v206[8] = v67;
                LODWORD(v184) = 24;
                _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "FusedLoc,hID,%{public}d,DataFusion detected invalid raw location in the buffer,index,%{public}d,bufferSize,%{public}zu", &v205, v184);
                v69 = (__int128 *)v68;
                sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::LCFusionLocationHypothesis::performLocationDataFusion()", "%s\n", v68);
                if (v69 != &buf)
                  free(v69);
              }
              v59 = 43;
            }
            v63 = v197;
            if (v197)
            {
              v64 = (unint64_t *)&v197->__shared_owners_;
              do
                v65 = __ldaxr(v64);
              while (__stlxr(v65 - 1, v64));
              if (!v65)
              {
                ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                std::__shared_weak_count::__release_weak(v63);
              }
            }
            if (v59 != 43 && v59)
              break;
            v54 = v186;
          }
          while (v185 > 2);
        }
        v70 = v194;
        if (v194)
        {
          if (*(double *)(v194 + 40) <= 0.0)
          {
            if (qword_1022A01B0 != -1)
              dispatch_once(&qword_1022A01B0, &stru_1021AADA0);
            v96 = qword_1022A01B8;
            if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_ERROR))
            {
              v97 = *(_DWORD *)(a1 + 652);
              v98 = *(_DWORD *)(v194 + 128);
              v99 = *(_QWORD *)(v194 + 16);
              v100 = *(_QWORD *)(a1 + 40);
              LODWORD(buf) = 67240960;
              DWORD1(buf) = v97;
              WORD4(buf) = 1026;
              *(_DWORD *)((char *)&buf + 10) = v98;
              HIWORD(buf) = 2050;
              *(_QWORD *)v226 = v99;
              *(_WORD *)&v226[8] = 2050;
              *(_QWORD *)&v226[10] = v100;
              _os_log_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_ERROR, "#Error,FusedLoc,hID,%{public}d,DataFusion detected invalid previous raw location,type,%{public}d,location mct,%{public}.3f,bufferSize,%{public}zu", (uint8_t *)&buf, 0x22u);
            }
            if (sub_1001BFF7C(115, 0))
            {
              bzero(&buf, 0x65CuLL);
              if (qword_1022A01B0 != -1)
                dispatch_once(&qword_1022A01B0, &stru_1021AADA0);
              v128 = *(_DWORD *)(a1 + 652);
              v129 = *(_DWORD *)(v194 + 128);
              v130 = *(_QWORD *)(v194 + 16);
              v131 = *(_QWORD *)(a1 + 40);
              LODWORD(v205) = 67240960;
              HIDWORD(v205) = v128;
              *(_WORD *)v206 = 1026;
              *(_DWORD *)&v206[2] = v129;
              *(_WORD *)&v206[6] = 2050;
              *(_QWORD *)&v206[8] = v130;
              *(_WORD *)&v206[16] = 2050;
              *(_QWORD *)&v206[18] = v131;
              LODWORD(v184) = 34;
              _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A01B8, 16, "#Error,FusedLoc,hID,%{public}d,DataFusion detected invalid previous raw location,type,%{public}d,location mct,%{public}.3f,bufferSize,%{public}zu", &v205, v184);
              v133 = (__int128 *)v132;
              sub_100512490("Generic", 1, 0, 0, "BOOL cllcf::LCFusionLocationHypothesis::performLocationDataFusion()", "%s\n", v132);
              if (v133 != &buf)
                free(v133);
            }
            v39 = 1;
            goto LABEL_120;
          }
          v71 = *(double *)(v194 + 112);
          if (v71 >= 6.0 || v71 <= 0.0)
            v71 = 6.0;
          if (vabdd_f64(*(double *)(v17 + 16), *(double *)(v194 + 16)) <= v71)
            goto LABEL_97;
          if (qword_1022A01B0 != -1)
            dispatch_once(&qword_1022A01B0, &stru_1021AADA0);
          v73 = qword_1022A01B8;
          if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
          {
            v74 = *(_DWORD *)(a1 + 652);
            v75 = *(_DWORD *)(v17 + 128);
            v76 = *(double *)(v194 + 16);
            *(_QWORD *)v226 = *(_QWORD *)(v17 + 16);
            v77 = *(_QWORD *)(v194 + 112);
            v78 = *(_QWORD *)(a1 + 40);
            LODWORD(buf) = 67241728;
            DWORD1(buf) = v74;
            WORD4(buf) = 1026;
            *(_DWORD *)((char *)&buf + 10) = v75;
            HIWORD(buf) = 2050;
            *(_WORD *)&v226[8] = 2050;
            *(double *)&v226[10] = *(double *)v226 - v76;
            v227 = 2050;
            *(_QWORD *)v228 = v77;
            *(_WORD *)&v228[8] = 1026;
            *(_DWORD *)&v228[10] = v2;
            v229 = 2050;
            v230 = v78;
            _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEBUG, "FusedLoc,hID,%{public}d,DataFusion ignoring old previous raw location in fusion,type,%{public}d,new location mct,%{public}.3f,age_s,%{public}.2f,lifespan_s,%{public}.2f,index,%{public}d,bufferSize,%{public}zu", (uint8_t *)&buf, 0x3Cu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_1022A01B0 != -1)
              dispatch_once(&qword_1022A01B0, &stru_1021AADA0);
            v134 = *(_DWORD *)(a1 + 652);
            v135 = *(_DWORD *)(v17 + 128);
            v136 = *(double *)(v194 + 16);
            *(_QWORD *)&v206[8] = *(_QWORD *)(v17 + 16);
            v137 = *(_QWORD *)(v194 + 112);
            v138 = *(_QWORD *)(a1 + 40);
            LODWORD(v205) = 67241728;
            HIDWORD(v205) = v134;
            *(_WORD *)v206 = 1026;
            *(_DWORD *)&v206[2] = v135;
            *(_WORD *)&v206[6] = 2050;
            *(_WORD *)&v206[16] = 2050;
            *(double *)&v206[18] = *(double *)&v206[8] - v136;
            v207 = 2050;
            *(_QWORD *)v208 = v137;
            *(_WORD *)&v208[8] = 1026;
            *(_DWORD *)&v208[10] = v2;
            *(_WORD *)&v208[14] = 2050;
            *(_QWORD *)&v208[16] = v138;
            LODWORD(v184) = 60;
            _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "FusedLoc,hID,%{public}d,DataFusion ignoring old previous raw location in fusion,type,%{public}d,new location mct,%{public}.3f,age_s,%{public}.2f,lifespan_s,%{public}.2f,index,%{public}d,bufferSize,%{public}zu", &v205, v184);
            v140 = (__int128 *)v139;
            sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::LCFusionLocationHypothesis::performLocationDataFusion()", "%s\n", v139);
            if (v140 != &buf)
              free(v140);
          }
          buf = 0uLL;
          sub_1002B7674((uint64_t)&v194, &buf);
          sub_100261F44((uint64_t)&buf);
          v70 = v194;
          if (v194)
          {
LABEL_97:
            v205 = off_1021B4BA0;
            *(_OWORD *)v206 = v188;
            *(_OWORD *)&v208[4] = xmmword_101BAFC90;
            *(_OWORD *)&v208[20] = xmmword_101BAFC90;
            v209 = v188;
            v210 = v188;
            v211 = 0xBFF0000000000000;
            v212 = 0;
            v213 = 0;
            v214 = 0;
            v192 = v70;
            v193 = v195;
            if (v195)
            {
              p_shared_weak_owners = (unint64_t *)&v195->__shared_weak_owners_;
              do
                v80 = __ldxr(p_shared_weak_owners);
              while (__stxr(v80 + 1, p_shared_weak_owners));
            }
            v81 = sub_10072A9DC(v189, (double *)(v17 + 16), &v192, (uint64_t)&v205);
            if (v193)
              std::__shared_weak_count::__release_weak(v193);
            if ((v81 & 1) == 0)
            {
              if (qword_1022A01B0 != -1)
                dispatch_once(&qword_1022A01B0, &stru_1021AADA0);
              v101 = qword_1022A01B8;
              if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_ERROR))
              {
                v102 = *(_DWORD *)(a1 + 652);
                v103 = *(_DWORD *)(v17 + 128);
                v104 = *(_QWORD *)(v17 + 16);
                v105 = *(_QWORD *)(v194 + 16);
                LODWORD(buf) = 67240960;
                DWORD1(buf) = v102;
                WORD4(buf) = 1026;
                *(_DWORD *)((char *)&buf + 10) = v103;
                HIWORD(buf) = 2050;
                *(_QWORD *)v226 = v104;
                *(_WORD *)&v226[8] = 2050;
                *(_QWORD *)&v226[10] = v105;
                _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_ERROR, "#Error,FusedLoc,hID,%{public}d,DataFusion failed time aligning previous raw location,type,%{public}d,new location mct,%{public}.3f,previous location mct,%{public}.3f", (uint8_t *)&buf, 0x22u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(&buf, 0x65CuLL);
                if (qword_1022A01B0 != -1)
                  dispatch_once(&qword_1022A01B0, &stru_1021AADA0);
                v141 = *(_DWORD *)(a1 + 652);
                v142 = *(_DWORD *)(v17 + 128);
                v143 = *(_QWORD *)(v17 + 16);
                v144 = *(_QWORD *)(v194 + 16);
                LODWORD(v196) = 67240960;
                HIDWORD(v196) = v141;
                LOWORD(v197) = 1026;
                *(_DWORD *)((char *)&v197 + 2) = v142;
                HIWORD(v197) = 2050;
                v198 = v143;
                v199 = 2050;
                v200 = v144;
                LODWORD(v184) = 34;
                _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A01B8, 16, "#Error,FusedLoc,hID,%{public}d,DataFusion failed time aligning previous raw location,type,%{public}d,new location mct,%{public}.3f,previous location mct,%{public}.3f", &v196, v184);
                v146 = (__int128 *)v145;
                sub_100512490("Generic", 1, 0, 0, "BOOL cllcf::LCFusionLocationHypothesis::performLocationDataFusion()", "%s\n", v145);
                if (v146 != &buf)
                  free(v146);
              }
              v39 = 1;
              goto LABEL_120;
            }
            v82 = *(double *)(v17 + 40);
            if (*(double *)&v208[4] >= v82 && *(double *)&v208[4] <= v82 * 6.0)
            {
              sub_10125D3FC(a1, v2 + 1, v17, (double *)&v205, (uint64_t)&v215, v32);
              goto LABEL_119;
            }
            if (qword_1022A01B0 != -1)
              dispatch_once(&qword_1022A01B0, &stru_1021AADA0);
            v84 = qword_1022A01B8;
            if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
            {
              v85 = *(_DWORD *)(a1 + 652);
              v86 = *(_DWORD *)(v17 + 128);
              v87 = *(_QWORD *)(v17 + 40);
              v88 = *(_QWORD *)(a1 + 40);
              LODWORD(buf) = 67241472;
              DWORD1(buf) = v85;
              WORD4(buf) = 1026;
              *(_DWORD *)((char *)&buf + 10) = v86;
              HIWORD(buf) = 2050;
              *(_QWORD *)v226 = v87;
              *(_WORD *)&v226[8] = 2050;
              *(_QWORD *)&v226[10] = *(_QWORD *)&v208[4];
              v227 = 1026;
              *(_DWORD *)v228 = v2;
              *(_WORD *)&v228[4] = 2050;
              *(_QWORD *)&v228[6] = v88;
              _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEBUG, "FusedLoc,hID,%{public}d,predicted previous location with large uncertainty switching to CC Fusion,type,%{public}d,current hunc,%{public}.1f,previous hunc,%{public}.1f,index,%{public}d,bufferSize,%{public}zu", (uint8_t *)&buf, 0x32u);
            }
            if (!sub_1001BFF7C(115, 2))
              goto LABEL_118;
            bzero(&buf, 0x65CuLL);
            if (qword_1022A01B0 != -1)
              dispatch_once(&qword_1022A01B0, &stru_1021AADA0);
            v147 = *(_DWORD *)(a1 + 652);
            v148 = *(_DWORD *)(v17 + 128);
            v149 = *(_QWORD *)(v17 + 40);
            v150 = *(_QWORD *)(a1 + 40);
            LODWORD(v196) = 67241472;
            HIDWORD(v196) = v147;
            LOWORD(v197) = 1026;
            *(_DWORD *)((char *)&v197 + 2) = v148;
            HIWORD(v197) = 2050;
            v198 = v149;
            v199 = 2050;
            v200 = *(_QWORD *)&v208[4];
            v201 = 1026;
            v202 = v2;
            v203 = 2050;
            v204 = v150;
            LODWORD(v184) = 50;
            _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "FusedLoc,hID,%{public}d,predicted previous location with large uncertainty switching to CC Fusion,type,%{public}d,current hunc,%{public}.1f,previous hunc,%{public}.1f,index,%{public}d,bufferSize,%{public}zu", &v196, v184);
            v127 = (__int128 *)v151;
            sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::LCFusionLocationHypothesis::performLocationDataFusion()", "%s\n", v151);
            if (v127 == &buf)
            {
LABEL_118:
              sub_10125D0C0(a1, v2 + 1, v17, (uint64_t)&v215, v32);
LABEL_119:
              v39 = 0;
              v187 = 1;
LABEL_120:
              v93 = v195;
              if (v195)
              {
                v94 = (unint64_t *)&v195->__shared_owners_;
                do
                  v95 = __ldaxr(v94);
                while (__stlxr(v95 - 1, v94));
                if (!v95)
                {
                  ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                  std::__shared_weak_count::__release_weak(v93);
                }
              }
              goto LABEL_42;
            }
LABEL_153:
            free(v127);
            goto LABEL_118;
          }
        }
      }
      else
      {
        v194 = 0;
        v195 = 0;
      }
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_1021AADA0);
      v89 = qword_1022A01B8;
      if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
      {
        v90 = *(_DWORD *)(a1 + 652);
        v91 = *(_DWORD *)(v17 + 128);
        v92 = *(_QWORD *)(a1 + 40);
        LODWORD(buf) = 67240960;
        DWORD1(buf) = v90;
        WORD4(buf) = 1026;
        *(_DWORD *)((char *)&buf + 10) = v91;
        HIWORD(buf) = 1026;
        *(_DWORD *)v226 = v2;
        *(_WORD *)&v226[4] = 2050;
        *(_QWORD *)&v226[6] = v92;
        _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEBUG, "FusedLoc,hID,%{public}d,DataFusion with no valid previous raw location,type,%{public}d,index,%{public}d,bufferSize,%{public}zu", (uint8_t *)&buf, 0x1Eu);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_118;
      bzero(&buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_1021AADA0);
      v123 = *(_DWORD *)(a1 + 652);
      v124 = *(_DWORD *)(v17 + 128);
      v125 = *(_QWORD *)(a1 + 40);
      LODWORD(v205) = 67240960;
      HIDWORD(v205) = v123;
      *(_WORD *)v206 = 1026;
      *(_DWORD *)&v206[2] = v124;
      *(_WORD *)&v206[6] = 1026;
      *(_DWORD *)&v206[8] = v2;
      *(_WORD *)&v206[12] = 2050;
      *(_QWORD *)&v206[14] = v125;
      LODWORD(v184) = 30;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "FusedLoc,hID,%{public}d,DataFusion with no valid previous raw location,type,%{public}d,index,%{public}d,bufferSize,%{public}zu", &v205, v184);
      v127 = (__int128 *)v126;
      sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::LCFusionLocationHypothesis::performLocationDataFusion()", "%s\n", v126);
      if (v127 == &buf)
        goto LABEL_118;
      goto LABEL_153;
    }
  }
  if (qword_1022A01B0 != -1)
    dispatch_once(&qword_1022A01B0, &stru_1021AADA0);
  v152 = qword_1022A01B8;
  if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
  {
    v153 = *(_DWORD *)(a1 + 652);
    v154 = *(_DWORD *)(a1 + 648);
    v155 = *(_QWORD *)(a1 + 40);
    LODWORD(buf) = 67240704;
    DWORD1(buf) = v153;
    WORD4(buf) = 1026;
    *(_DWORD *)((char *)&buf + 10) = v154;
    HIWORD(buf) = 2050;
    *(_QWORD *)v226 = v155;
    _os_log_impl((void *)&_mh_execute_header, v152, OS_LOG_TYPE_DEBUG, "FusedLoc,hID,%{public}d,DataFusion called with invalid start fusion,index,%{public}d,bufferSize,%{public}zu", (uint8_t *)&buf, 0x18u);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_1021AADA0);
    v157 = *(_DWORD *)(a1 + 652);
    v158 = *(_DWORD *)(a1 + 648);
    v159 = *(_QWORD *)(a1 + 40);
    LODWORD(v215) = 67240704;
    HIDWORD(v215) = v157;
    LOWORD(v216) = 1026;
    *(_DWORD *)((char *)&v216 + 2) = v158;
    WORD3(v216) = 2050;
    *((_QWORD *)&v216 + 1) = v159;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "FusedLoc,hID,%{public}d,DataFusion called with invalid start fusion,index,%{public}d,bufferSize,%{public}zu", &v215, 24);
    v161 = (__int128 *)v160;
    sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::LCFusionLocationHypothesis::performLocationDataFusion()", "%s\n", v160);
    goto LABEL_178;
  }
  return result;
}

void sub_10125D0A8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_10125D0C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  float64x2_t v21;
  int8x16_t v22;
  float64x2_t v23;
  double v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  unint64_t v32;
  int8x16_t v34;
  int8x16_t v35;
  double v36;
  uint64_t (**v37)();
  __int128 v38;
  __int128 v39;
  _BYTE v40[32];
  _BYTE v41[60];

  v10 = *(_OWORD *)(a3 + 72);
  v37 = off_1021B4BA0;
  v11 = *(_OWORD *)(a3 + 88);
  *(_OWORD *)v41 = v10;
  *(_OWORD *)&v41[16] = v11;
  *(_OWORD *)&v41[32] = *(_OWORD *)(a3 + 104);
  *(_OWORD *)&v41[44] = *(_OWORD *)(a3 + 116);
  v12 = *(_OWORD *)(a3 + 24);
  v38 = *(_OWORD *)(a3 + 8);
  v39 = v12;
  v13 = *(_OWORD *)(a3 + 56);
  *(_OWORD *)v40 = *(_OWORD *)(a3 + 40);
  *(_OWORD *)&v40[16] = v13;
  sub_1013F8ADC((uint64_t)&v37, (uint64_t)"FusedLoc,CC Fusion a priori", *(_DWORD *)(a1 + 652));
  *(double *)v15.i64 = *(double *)(a4 + 40) * *(double *)(a4 + 40) * 0.5;
  *(double *)v16.i64 = *(double *)(a3 + 40) * *(double *)(a3 + 40) * 0.5;
  if (*(double *)v15.i64 >= 1.0)
    v17 = 1.0 / *(double *)v15.i64;
  else
    v17 = 1.0;
  if (*(double *)v16.i64 >= 1.0)
    v18 = 1.0 / *(double *)v16.i64;
  else
    v18 = 1.0;
  v19 = 1.0 / (v17 + v18);
  *(_QWORD *)v40 = sqrt(v19 + v19);
  *(double *)v14.i64 = v17 * (*(double *)(a4 + 32) * 0.0174532925);
  *(double *)v15.i64 = v19 * (*(double *)(a3 + 24) * 0.0174532925 * v18 + v17 * (*(double *)(a4 + 24) * 0.0174532925));
  v20 = v18 * (*(double *)(a3 + 32) * 0.0174532925) + *(double *)v14.i64;
  v14.i64[0] = 0x400921FB54442D18;
  v35 = v14;
  if (fabs(*(double *)v15.i64) > 3.14159265)
  {
    v21.f64[0] = NAN;
    v21.f64[1] = NAN;
    v34 = vbslq_s8((int8x16_t)vnegq_f64(v21), v14, v15);
    *(double *)v15.i64 = fmod(*(double *)v15.i64 + *(double *)v34.i64, 6.28318531);
    v16.i64[1] = v34.i64[1];
    *(double *)v15.i64 = *(double *)v15.i64 - *(double *)v34.i64;
  }
  *(double *)v16.i64 = v19 * v20;
  if (*(double *)v15.i64 >= 1.57079633)
  {
    v22 = v35;
    *(double *)v15.i64 = *(double *)v35.i64 - *(double *)v15.i64;
  }
  else
  {
    if (*(double *)v15.i64 < -1.57079633)
      *(double *)v15.i64 = -3.14159265 - *(double *)v15.i64;
    v22 = v35;
  }
  *(double *)&v39 = *(double *)v15.i64 * 57.2957795;
  if (fabs(*(double *)v16.i64) > *(double *)v22.i64)
  {
    v23.f64[0] = NAN;
    v23.f64[1] = NAN;
    v36 = *(double *)vbslq_s8((int8x16_t)vnegq_f64(v23), v22, v16).i64;
    *(double *)v16.i64 = fmod(*(double *)v16.i64 + v36, 6.28318531) - v36;
  }
  *((double *)&v39 + 1) = *(double *)v16.i64 * 57.2957795;
  if (a5 <= 2.0)
  {
    if (*(double *)&v40[16] <= 0.0)
      *(_OWORD *)&v40[8] = *(_OWORD *)(a4 + 48);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3) & 1) == 0)
    {
      if (*(double *)&v41[16] <= 0.0)
        *(_OWORD *)&v41[8] = *(_OWORD *)(a4 + 80);
      if (*(double *)&v41[32] <= 0.0)
        *(_OWORD *)&v41[24] = *(_OWORD *)(a4 + 96);
    }
  }
  v24 = *(double *)v40;
  if (*(double *)v40 < 2.0)
    v24 = 2.0;
  *(double *)v40 = v24;
  sub_1013F8ADC((uint64_t)&v37, (uint64_t)"FusedLoc,CC Fusion a posteriori", *(_DWORD *)(a1 + 652));
  v25 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * ((*(_QWORD *)(a1 + 32) + a2) / 0x17uLL))
      + 176 * ((*(_QWORD *)(a1 + 32) + a2) % 0x17uLL);
  v26 = v38;
  v27 = v39;
  v28 = *(_OWORD *)v40;
  *(_OWORD *)(v25 + 88) = *(_OWORD *)&v40[16];
  *(_OWORD *)(v25 + 72) = v28;
  *(_OWORD *)(v25 + 56) = v27;
  *(_OWORD *)(v25 + 40) = v26;
  v29 = *(_OWORD *)v41;
  v30 = *(_OWORD *)&v41[16];
  v31 = *(_OWORD *)&v41[32];
  *(_OWORD *)(v25 + 148) = *(_OWORD *)&v41[44];
  *(_OWORD *)(v25 + 136) = v31;
  *(_OWORD *)(v25 + 120) = v30;
  *(_OWORD *)(v25 + 104) = v29;
  v32 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * ((*(_QWORD *)(a1 + 32) + a2) / 0x17uLL))
      + 176 * ((*(_QWORD *)(a1 + 32) + a2) % 0x17uLL);
  *(_WORD *)(v32 + 168) = 1;
  *(_OWORD *)v32 = v38;
  return 1;
}

uint64_t sub_10125D3FC(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, uint64_t a5, double a6)
{
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  double v31;
  double v32;
  float64x2_t v33;
  float64x2_t v34;
  double v35;
  _BOOL4 v36;
  BOOL v37;
  double v38;
  double v39;
  double v40;
  double v41;
  float64x2_t v42;
  float64x2_t v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  float64x2_t v53;
  int8x16_t v54;
  float64x2_t v55;
  double v56;
  unint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  unint64_t v64;
  int8x16_t v66;
  int8x16_t v67;
  double v68;
  int8x16_t v69;
  int8x16_t v70;
  double v71;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  uint64_t v79;
  int8x16_t v80;
  int8x16_t v81;
  double v82;
  double v83;
  double v84;
  int8x16_t v85;
  double v86;
  uint64_t (**v87)();
  __int128 v88;
  __int128 v89;
  _BYTE v90[32];
  _BYTE v91[60];

  v87 = off_1021B4BA0;
  v11 = *(_OWORD *)(a3 + 88);
  *(_OWORD *)v91 = *(_OWORD *)(a3 + 72);
  *(_OWORD *)&v91[16] = v11;
  *(_OWORD *)&v91[32] = *(_OWORD *)(a3 + 104);
  *(_OWORD *)&v91[44] = *(_OWORD *)(a3 + 116);
  v12 = *(_OWORD *)(a3 + 24);
  v88 = *(_OWORD *)(a3 + 8);
  v89 = v12;
  v13 = *(_OWORD *)(a3 + 56);
  *(_OWORD *)v90 = *(_OWORD *)(a3 + 40);
  *(_OWORD *)&v90[16] = v13;
  sub_1013F8ADC((uint64_t)&v87, (uint64_t)"FusedLoc,IDC Fusion a priori", *(_DWORD *)(a1 + 652));
  *(double *)v18.i64 = *(double *)(a5 + 40) * *(double *)(a5 + 40) * 0.5;
  if (*(double *)v18.i64 >= 1.0)
    v19 = 1.0 / *(double *)v18.i64;
  else
    v19 = 1.0;
  v20 = *(double *)(a3 + 40) * *(double *)(a3 + 40) * 0.5;
  if (v20 >= 1.0)
    v21 = 1.0 / v20;
  else
    v21 = 1.0;
  v22 = a4[5] * a4[5] * 0.5;
  if (v22 >= 1.0)
    v23 = 1.0 / v22;
  else
    v23 = 1.0;
  v24 = v21 - v23;
  if (v23 > v21)
    v24 = v23 - v21;
  v71 = 1.0 / (v19 + v24);
  *(_QWORD *)v90 = sqrt(v71 + v71);
  v68 = *(double *)(a3 + 24);
  *(double *)v14.i64 = *(double *)(a3 + 32) * 0.0174532925;
  v25 = a4[3];
  *(double *)v15.i64 = a4[4] * 0.0174532925;
  v26 = *(double *)(a5 + 24);
  v27 = *(double *)(a5 + 32);
  v17.i64[0] = 0x400921FB54442D18;
  v85 = v17;
  if (fabs(*(double *)v14.i64) > 3.14159265)
  {
    v28.f64[0] = NAN;
    v28.f64[1] = NAN;
    v80 = vbslq_s8((int8x16_t)vnegq_f64(v28), v17, v14);
    v76 = v15;
    *(double *)v18.i64 = fmod(*(double *)v14.i64 + *(double *)v80.i64, 6.28318531);
    v15 = v76;
    v14.i64[1] = v80.i64[1];
    v17 = v85;
    *(double *)v14.i64 = *(double *)v18.i64 - *(double *)v80.i64;
  }
  *(double *)v16.i64 = v27 * 0.0174532925;
  v81 = v14;
  if (fabs(*(double *)v15.i64) > *(double *)v17.i64)
  {
    v29.f64[0] = NAN;
    v29.f64[1] = NAN;
    v77 = vbslq_s8((int8x16_t)vnegq_f64(v29), v17, v15);
    v73 = v16;
    *(double *)v18.i64 = fmod(*(double *)v15.i64 + *(double *)v77.i64, 6.28318531);
    v16 = v73;
    v14.i64[1] = v77.i64[1];
    v17 = v85;
    *(double *)v15.i64 = *(double *)v18.i64 - *(double *)v77.i64;
  }
  v78 = v15;
  if (fabs(*(double *)v16.i64) > *(double *)v17.i64)
  {
    v30.f64[0] = NAN;
    v30.f64[1] = NAN;
    v74 = vbslq_s8((int8x16_t)vnegq_f64(v30), v17, v16);
    *(double *)v18.i64 = fmod(*(double *)v16.i64 + *(double *)v74.i64, 6.28318531);
    v14.i64[1] = v74.i64[1];
    v15 = v78;
    v17 = v85;
    *(double *)v16.i64 = *(double *)v18.i64 - *(double *)v74.i64;
  }
  v31 = *(double *)v81.i64;
  v32 = fabs(*(double *)v16.i64);
  v75 = v16;
  if (vabdd_f64(*(double *)v81.i64, *(double *)v16.i64) > *(double *)v17.i64)
  {
    if (fabs(*(double *)v81.i64) > *(double *)v17.i64)
    {
      v33.f64[0] = NAN;
      v33.f64[1] = NAN;
      v66 = vbslq_s8((int8x16_t)vnegq_f64(v33), v17, v81);
      *(double *)v18.i64 = fmod(*(double *)v81.i64 + *(double *)v66.i64, 6.28318531);
      v16 = v75;
      v15 = v78;
      v17 = v85;
      v14.i64[1] = v66.i64[1];
      v31 = *(double *)v18.i64 - *(double *)v66.i64;
    }
    v18.i64[0] = v16.i64[0];
    if (v32 > *(double *)v17.i64)
    {
      v34.f64[0] = NAN;
      v34.f64[1] = NAN;
      v67 = vbslq_s8((int8x16_t)vnegq_f64(v34), v17, v16);
      v82 = v31;
      *(double *)v18.i64 = fmod(*(double *)v16.i64 + *(double *)v67.i64, 6.28318531);
      v16 = v75;
      v15 = v78;
      v31 = v82;
      v17 = v85;
      v14.i64[1] = v67.i64[1];
      *(double *)v18.i64 = *(double *)v18.i64 - *(double *)v67.i64;
    }
    v35 = v31 - *(double *)v18.i64;
    v36 = v31 - *(double *)v18.i64 > *(double *)v17.i64;
    v37 = vabdd_f64(v31, *(double *)v18.i64) <= *(double *)v17.i64;
    v38 = -0.0;
    if (!v37)
      v38 = dbl_101C28CE0[v36];
    v31 = *(double *)v16.i64 + v35 + v38;
  }
  v39 = v68 * 0.0174532925;
  v40 = v25 * 0.0174532925;
  v41 = v26 * 0.0174532925;
  if (vabdd_f64(*(double *)v15.i64, *(double *)v16.i64) > *(double *)v17.i64)
  {
    v83 = v31;
    if (fabs(*(double *)v15.i64) > *(double *)v17.i64)
    {
      v42.f64[0] = NAN;
      v42.f64[1] = NAN;
      v69 = vbslq_s8((int8x16_t)vnegq_f64(v42), v17, v15);
      *(double *)v18.i64 = fmod(*(double *)v15.i64 + *(double *)v69.i64, 6.28318531);
      v16 = v75;
      v17 = v85;
      v14.i64[1] = v69.i64[1];
      *(double *)v15.i64 = *(double *)v18.i64 - *(double *)v69.i64;
    }
    v18.i64[0] = v16.i64[0];
    if (v32 > *(double *)v17.i64)
    {
      v43.f64[0] = NAN;
      v43.f64[1] = NAN;
      v70 = vbslq_s8((int8x16_t)vnegq_f64(v43), v17, v16);
      v79 = v15.i64[0];
      *(double *)v18.i64 = fmod(*(double *)v16.i64 + *(double *)v70.i64, 6.28318531);
      v16.i64[0] = v75.i64[0];
      v15.i64[0] = v79;
      v17 = v85;
      v14.i64[1] = v70.i64[1];
      *(double *)v18.i64 = *(double *)v18.i64 - *(double *)v70.i64;
    }
    v44 = *(double *)v15.i64 - *(double *)v18.i64;
    v45 = dbl_101C28CE0[*(double *)v15.i64 - *(double *)v18.i64 > *(double *)v17.i64];
    v37 = vabdd_f64(*(double *)v15.i64, *(double *)v18.i64) <= *(double *)v17.i64;
    v46 = -0.0;
    if (!v37)
      v46 = v45;
    *(double *)v15.i64 = *(double *)v16.i64 + v44 + v46;
    v31 = v83;
  }
  v47 = v23 * *(double *)v15.i64;
  v48 = v19 * v41;
  v49 = v19 * *(double *)v16.i64;
  v50 = v23 * v40 - v21 * v39;
  v51 = v47 - v21 * v31;
  if (v23 <= v21)
  {
    v50 = v21 * v39 - v23 * v40;
    v51 = v21 * v31 - v47;
  }
  v52 = v49 + v51;
  *(double *)v14.i64 = v71 * (v48 + v50);
  if (fabs(*(double *)v14.i64) > *(double *)v17.i64)
  {
    v53.f64[0] = NAN;
    v53.f64[1] = NAN;
    v84 = *(double *)vbslq_s8((int8x16_t)vnegq_f64(v53), v17, v14).i64;
    *(double *)v14.i64 = fmod(*(double *)v14.i64 + v84, 6.28318531) - v84;
  }
  *(double *)v18.i64 = v71 * v52;
  if (*(double *)v14.i64 >= 1.57079633)
  {
    v54 = v85;
    *(double *)v14.i64 = *(double *)v85.i64 - *(double *)v14.i64;
  }
  else
  {
    v54 = v85;
    if (*(double *)v14.i64 < -1.57079633)
      *(double *)v14.i64 = -3.14159265 - *(double *)v14.i64;
  }
  *(double *)&v89 = *(double *)v14.i64 * 57.2957795;
  if (fabs(*(double *)v18.i64) > *(double *)v54.i64)
  {
    v55.f64[0] = NAN;
    v55.f64[1] = NAN;
    v86 = *(double *)vbslq_s8((int8x16_t)vnegq_f64(v55), v54, v18).i64;
    *(double *)v18.i64 = fmod(*(double *)v18.i64 + v86, 6.28318531) - v86;
  }
  *((double *)&v89 + 1) = *(double *)v18.i64 * 57.2957795;
  if (a6 <= 2.0)
  {
    if (*(double *)&v90[16] <= 0.0)
      *(_OWORD *)&v90[8] = *(_OWORD *)(a5 + 48);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3) & 1) == 0)
    {
      if (*(double *)&v91[16] <= 0.0)
        *(_OWORD *)&v91[8] = *(_OWORD *)(a5 + 80);
      if (*(double *)&v91[32] <= 0.0)
        *(_OWORD *)&v91[24] = *(_OWORD *)(a5 + 96);
    }
  }
  v56 = *(double *)v90;
  if (*(double *)v90 < 2.0)
    v56 = 2.0;
  *(double *)v90 = v56;
  sub_1013F8ADC((uint64_t)&v87, (uint64_t)"FusedLoc,IDC Fusion a posteriori", *(_DWORD *)(a1 + 652));
  v57 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * ((*(_QWORD *)(a1 + 32) + a2) / 0x17uLL))
      + 176 * ((*(_QWORD *)(a1 + 32) + a2) % 0x17uLL);
  v58 = v88;
  v59 = v89;
  v60 = *(_OWORD *)v90;
  *(_OWORD *)(v57 + 88) = *(_OWORD *)&v90[16];
  *(_OWORD *)(v57 + 72) = v60;
  *(_OWORD *)(v57 + 56) = v59;
  *(_OWORD *)(v57 + 40) = v58;
  v61 = *(_OWORD *)v91;
  v62 = *(_OWORD *)&v91[16];
  v63 = *(_OWORD *)&v91[32];
  *(_OWORD *)(v57 + 148) = *(_OWORD *)&v91[44];
  *(_OWORD *)(v57 + 136) = v63;
  *(_OWORD *)(v57 + 120) = v62;
  *(_OWORD *)(v57 + 104) = v61;
  v64 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * ((*(_QWORD *)(a1 + 32) + a2) / 0x17uLL))
      + 176 * ((*(_QWORD *)(a1 + 32) + a2) % 0x17uLL);
  *(_WORD *)(v64 + 168) = 1;
  *(_OWORD *)v64 = v88;
  return 1;
}

uint64_t sub_10125D9DC(uint64_t a1, double *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _UNKNOWN **v13;
  int v14;
  char *v15;
  int v16;
  BOOL v17;
  char **v18;
  _UNKNOWN **v19;
  int v20;
  int v21;
  BOOL v22;
  char **v23;
  NSObject *v24;
  uint64_t v25;
  double v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  double v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  const char *v39;
  uint8_t *v40;
  NSObject *v41;
  int v42;
  unint64_t v43;
  int v44;
  int v46;
  unint64_t v47;
  int v48;
  const char *v49;
  uint8_t *v50;
  uint64_t v51;
  int v52;
  int v53;
  _BYTE v54[10];
  _BYTE v55[6];
  int v56;
  __int16 v57;
  int v58;
  uint8_t buf[4];
  _BYTE v60[10];
  _BYTE v61[6];
  int v62;
  __int16 v63;
  int v64;

  v52 = 0;
  v4 = *(_QWORD *)(a1 + 32) + *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = (_QWORD *)(v5 + 8 * (v4 / 0x17));
  if (v6 == v5)
    v8 = 0;
  else
    v8 = *v7 + 176 * (v4 % 0x17);
  while (1)
  {
    v9 = v6 == v5
       ? 0
       : *(_QWORD *)(v5 + 8 * (*(_QWORD *)(a1 + 32) / 0x17uLL)) + 176 * (*(_QWORD *)(a1 + 32) % 0x17uLL);
    if (v8 == v9)
      break;
    v10 = v8;
    if (v8 == *v7)
      v10 = *(v7 - 1) + 4048;
    if (sub_10125A1BC(v10 - 176, a2) > 5.0)
      break;
    v11 = v8;
    if (v8 == *v7)
      v11 = *(v7 - 1) + 4048;
    v12 = (char *)off_1022A19B8;
    if (!off_1022A19B8)
      goto LABEL_32;
    v13 = &off_1022A19B8;
    v14 = *(_DWORD *)(v11 - 16);
    v15 = (char *)off_1022A19B8;
    do
    {
      v16 = *((_DWORD *)v15 + 7);
      v17 = v16 < v14;
      if (v16 >= v14)
        v18 = (char **)v15;
      else
        v18 = (char **)(v15 + 8);
      if (!v17)
        v13 = (_UNKNOWN **)v15;
      v15 = *v18;
    }
    while (*v18);
    if (v13 == &off_1022A19B8 || v14 < *((_DWORD *)v13 + 7))
      goto LABEL_32;
    v19 = &off_1022A19B8;
    v20 = *(_DWORD *)(a1 + 712);
    do
    {
      v21 = *((_DWORD *)v12 + 7);
      v22 = v21 < v20;
      if (v21 >= v20)
        v23 = (char **)v12;
      else
        v23 = (char **)(v12 + 8);
      if (!v22)
        v19 = (_UNKNOWN **)v12;
      v12 = *v23;
    }
    while (*v23);
    if (v19 == &off_1022A19B8 || v20 < *((_DWORD *)v19 + 7))
    {
LABEL_32:
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_1021AADA0);
      v24 = qword_1022A01B8;
      if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_ERROR))
      {
        v25 = v8;
        if (v8 == *v7)
          v25 = *(v7 - 1) + 4048;
        v26 = *a2;
        v27 = *(_DWORD *)(a1 + 652);
        v28 = *(_DWORD *)(v25 - 16);
        v29 = *(_DWORD *)(a1 + 712);
        *(_DWORD *)buf = 134349824;
        *(double *)v60 = v26;
        *(_WORD *)&v60[8] = 1026;
        *(_DWORD *)v61 = v27;
        *(_WORD *)&v61[4] = 1026;
        v62 = v28;
        v63 = 1026;
        v64 = v29;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "FusedLoc,Invalid provider type,time,%{public}.2lf,ID,%{public}d,locType,%{public}d,prominentType,%{public}d", buf, 0x1Eu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01B0 != -1)
          dispatch_once(&qword_1022A01B0, &stru_1021AADA0);
        v34 = *a2;
        v35 = *(_DWORD *)(a1 + 652);
        v36 = v8;
        if (v8 == *v7)
          v36 = *(v7 - 1) + 4048;
        v37 = *(_DWORD *)(v36 - 16);
        v38 = *(_DWORD *)(a1 + 712);
        v53 = 134349824;
        *(double *)v54 = v34;
        *(_WORD *)&v54[8] = 1026;
        *(_DWORD *)v55 = v35;
        *(_WORD *)&v55[4] = 1026;
        v56 = v37;
        v57 = 1026;
        v58 = v38;
        LODWORD(v51) = 30;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 16, "FusedLoc,Invalid provider type,time,%{public}.2lf,ID,%{public}d,locType,%{public}d,prominentType,%{public}d", &v53, v51);
        v40 = (uint8_t *)v39;
        sub_100512490("Generic", 1, 0, 0, "CLLocationType cllcf::LCFusionLocationHypothesis::updateProminentProviderType(const CFTimeInterval &)", "%s\n", v39);
        if (v40 != buf)
          free(v40);
      }
    }
    else
    {
      v31 = v8;
      if (v8 == *v7)
        v31 = *(v7 - 1) + 4048;
      v32 = *(_DWORD *)sub_10010E5FC((uint64_t)&unk_1022A19B0, (int *)(v31 - 16));
      if (v32 <= *(_DWORD *)sub_10010E5FC((uint64_t)&unk_1022A19B0, &v52))
      {
        v33 = v8;
        if (v8 == *v7)
          v33 = *(v7 - 1) + 4048;
        v52 = *(_DWORD *)(v33 - 16);
      }
    }
    if (v8 == *v7)
    {
      v30 = *--v7;
      v8 = v30 + 4048;
    }
    v8 -= 176;
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 16);
  }
  if (v52)
  {
    *(_DWORD *)(a1 + 712) = v52;
  }
  else
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_1021AADA0);
    v41 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      v42 = *(_DWORD *)(a1 + 652);
      v43 = *(_QWORD *)(a1 + 40) + *(_QWORD *)(a1 + 32) - 1;
      LODWORD(v43) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * (v43 / 0x17)) + 176 * (v43 % 0x17) + 160);
      v44 = *(_DWORD *)(a1 + 712);
      *(_DWORD *)buf = 67240704;
      *(_DWORD *)v60 = v42;
      *(_WORD *)&v60[4] = 1026;
      *(_DWORD *)&v60[6] = v43;
      *(_WORD *)v61 = 1026;
      *(_DWORD *)&v61[2] = v44;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "FusedLoc,Unable to set a provider type for hypothesis ID,%{public}d,currentLocationType,%{public}d,previously set type,%{public}d,will be used", buf, 0x14u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_1021AADA0);
      v46 = *(_DWORD *)(a1 + 652);
      v47 = *(_QWORD *)(a1 + 40) + *(_QWORD *)(a1 + 32) - 1;
      LODWORD(v47) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * (v47 / 0x17)) + 176 * (v47 % 0x17) + 160);
      v48 = *(_DWORD *)(a1 + 712);
      v53 = 67240704;
      *(_DWORD *)v54 = v46;
      *(_WORD *)&v54[4] = 1026;
      *(_DWORD *)&v54[6] = v47;
      *(_WORD *)v55 = 1026;
      *(_DWORD *)&v55[2] = v48;
      LODWORD(v51) = 20;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "FusedLoc,Unable to set a provider type for hypothesis ID,%{public}d,currentLocationType,%{public}d,previously set type,%{public}d,will be used", &v53, v51);
      v50 = (uint8_t *)v49;
      sub_100512490("Generic", 1, 0, 2, "CLLocationType cllcf::LCFusionLocationHypothesis::updateProminentProviderType(const CFTimeInterval &)", "%s\n", v49);
      if (v50 != buf)
        free(v50);
    }
  }
  return *(unsigned int *)(a1 + 712);
}

void sub_10125E040(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  _Unwind_Resume(a1);
}

void sub_10125E050(uint64_t a1, long double a2)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (a2 >= 0.0)
  {
    *(long double *)(a1 + 632) = a2;
    *(long double *)(a1 + 640) = log(a2);
  }
  else
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_1021AADA0);
    v2 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#selection Invalid likelihood passed to set likelihood", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_1021AADA0);
      v5[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 16, "#selection Invalid likelihood passed to set likelihood", v5, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 0, "void cllcf::LCFusionLocationHypothesis::setLikelihood(double)", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
  }
}

void sub_10125E1EC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_10125E1F8(id a1)
{
  qword_1022A01B8 = (uint64_t)os_log_create("com.apple.locationd.Position", "LCFusion");
}

void sub_10125E224(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x17;
  v4 = v2 - 23;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFD0uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFD0uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFD0uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_10125E4EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_10125E538(void **a1)
{
  _BYTE *v2;
  _BYTE *v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void *v41;
  void *__p;
  char *v43;
  char *v44;
  char *v45;
  _QWORD *v46;

  v2 = a1[1];
  v3 = a1[2];
  v4 = (v3 - v2) >> 3;
  if (v3 == v2)
    v5 = 0;
  else
    v5 = 23 * v4 - 1;
  v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(_QWORD)a1[5]] < 0x17)
  {
    v7 = (uint64_t)(a1 + 3);
    v8 = a1[3];
    v9 = *a1;
    v10 = v8 - (_BYTE *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9)
        v11 = 1;
      else
        v11 = v10 >> 2;
      v46 = a1 + 3;
      __p = sub_10025E6A0(v7, v11);
      v43 = (char *)__p;
      v44 = (char *)__p;
      v45 = (char *)__p + 8 * v12;
      v41 = operator new(0xFD0uLL);
      sub_10003732C(&__p, &v41);
      v13 = (char *)a1[1];
      v14 = v44;
      if (v13 == a1[2])
      {
        v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            v15 = v43 - (_BYTE *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p)
                v23 = 1;
              else
                v23 = (v14 - (_BYTE *)__p) >> 2;
              v24 = (char *)sub_10025E6A0((uint64_t)v46, v23);
              v26 = v43;
              v14 = &v24[8 * (v23 >> 2)];
              v27 = v44 - v43;
              if (v44 != v43)
              {
                v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                v28 = 8 * (v27 >> 3);
                v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  v30 = *(_QWORD *)v26;
                  v26 += 8;
                  *(_QWORD *)v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              v31 = __p;
              __p = v24;
              v43 = &v24[8 * (v23 >> 2)];
              v44 = v14;
              v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                v14 = v44;
              }
            }
            else
            {
              v16 = v15 >> 3;
              v17 = v15 >> 3 < -1;
              v18 = (v15 >> 3) + 2;
              if (v17)
                v19 = v18;
              else
                v19 = v16 + 1;
              v20 = &v43[-8 * (v19 >> 1)];
              v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                v14 = v43;
              }
              v22 = &v14[-8 * (v19 >> 1)];
              v14 = &v20[v21];
              v43 = v22;
              v44 = &v20[v21];
            }
          }
          v32 = *(_QWORD *)v13;
          v13 += 8;
          *(_QWORD *)v14 = v32;
          v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        v33 = (char *)a1[1];
      }
      v36 = *a1;
      v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      __p = v36;
      v43 = v33;
      v38 = (char *)a1[3];
      v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      v44 = v13;
      v45 = v38;
      if (v14 - v37 == 8)
        v40 = 11;
      else
        v40 = (uint64_t)a1[4] + 23;
      a1[4] = (void *)v40;
      if (v13 != v33)
        v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      if (v36)
        operator delete(v36);
    }
    else
    {
      if (v2 == v9)
      {
        __p = operator new(0xFD0uLL);
        sub_100212218(a1, &__p);
        v34 = a1[2];
        __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        __p = operator new(0xFD0uLL);
      }
      sub_100343094((uint64_t)a1, &__p);
      if ((_BYTE *)a1[2] - (_BYTE *)a1[1] == 8)
        v35 = 11;
      else
        v35 = (uint64_t)a1[4] + 23;
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 23;
    __p = (void *)*((_QWORD *)v3 - 1);
    a1[2] = v3 - 8;
    sub_100343094((uint64_t)a1, &__p);
  }
}

void sub_10125E804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  void *v12;

  operator delete(v12);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *sub_10125E850(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4, uint64_t a5, uint64_t *a6, uint64_t a7, unint64_t *a8)
{
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;

  v20 = a2;
  v21 = a3;
  if (a3 != a5)
  {
    v10 = 0x2E8BA2E8BA2E8BA3 * ((a5 - *a4) >> 4) + 23 * (a4 - a2) - 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a3 - *a2) >> 4);
    if (v10 >= 1)
    {
      do
      {
        v12 = v21;
        v13 = *v20 + 4048;
        v14 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v13 - v21) >> 4);
        if (v14 >= v10)
          v15 = v10;
        else
          v15 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v13 - v21) >> 4);
        if (v14 <= v10)
          v16 = *v20 + 4048;
        else
          v16 = v21 + 176 * v10;
        v17 = *a8;
        if (v21 <= *a8 && v17 < v16)
        {
          if (v21 == a7)
            v18 = 0;
          else
            v18 = 0xD1745D1745D1745DLL * ((uint64_t)(v21 - *v20) >> 4)
                - 23 * (v20 - a6)
                + 0x2E8BA2E8BA2E8BA3 * ((a7 - *a6) >> 4);
          v22 = v20;
          v23 = (uint64_t *)v17;
          *a8 = sub_10081F17C(&v22, v18)[1];
        }
        sub_10125EB90(v12, v16, a6, a7, (uint64_t *)&v22);
        a6 = v23;
        a7 = v24;
        v10 -= v15;
        sub_10081F17C(&v20, v15);
      }
      while (v10 > 0);
    }
  }
  return a6;
}

_QWORD *sub_10125E9D0(uint64_t a1, _QWORD *a2, uint64_t a3, unint64_t *a4, unint64_t a5, _QWORD *a6, uint64_t a7, unint64_t *a8)
{
  uint64_t v10;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  _QWORD *v24;
  uint64_t v25;

  v21 = a4;
  v22 = a5;
  if (a5 != a3)
  {
    v10 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a5 - *a4) >> 4) + 23 * (a4 - a2) - 0x2E8BA2E8BA2E8BA3 * ((a3 - *a2) >> 4);
    if (v10 >= 1)
    {
      do
      {
        v12 = v21;
        v13 = v22;
        if (v22 == *v21)
        {
          --v21;
          v13 = *--v12 + 4048;
        }
        v14 = v13 - 176;
        v22 = v13 - 176;
        v15 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v13 - *v12) >> 4);
        if (v15 >= v10)
          v16 = v10;
        else
          v16 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v13 - *v12) >> 4);
        if (v15 <= v10)
          v17 = *v12;
        else
          v17 = v13 - 176 * v10;
        v18 = *a8;
        if (*a8 < v13 && v17 <= v18)
        {
          if (v14 == a7)
            v19 = 0;
          else
            v19 = 23 * (a6 - v12)
                - 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v14 - *v12) >> 4)
                + 0x2E8BA2E8BA2E8BA3 * ((a7 - *a6) >> 4);
          v23 = v12;
          v24 = (_QWORD *)v18;
          *a8 = sub_10081F17C(&v23, v19 - 1)[1];
        }
        sub_10125ED48(v17, v13, a6, a7, (uint64_t *)&v23);
        a6 = v24;
        a7 = v25;
        v10 -= v16;
        sub_10081F17C(&v21, 1 - v16);
      }
      while (v10 > 0);
    }
  }
  return a6;
}

uint64_t sub_10125EB90@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t *v5;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = a3;
  result = a1;
  if (a1 == a2)
  {
    v8 = a1;
  }
  else
  {
    v8 = a2;
    v5 = a3 + 1;
    v9 = *a3;
    while (1)
    {
      v10 = 0x2E8BA2E8BA2E8BA3 * ((v9 - a4 + 4048) >> 4);
      if (0x2E8BA2E8BA2E8BA3 * ((v8 - result) >> 4) < v10)
        v10 = 0x2E8BA2E8BA2E8BA3 * ((v8 - result) >> 4);
      result = sub_10125EC60(result, result + 176 * v10, a4);
      if (result == v8)
        break;
      v12 = *v5++;
      v9 = v12;
      a4 = v12;
    }
    a4 = v11;
    if (*(v5 - 1) + 4048 == v11)
      a4 = *v5;
    else
      --v5;
  }
  *a5 = v8;
  a5[1] = (uint64_t)v5;
  a5[2] = a4;
  return result;
}

uint64_t sub_10125EC60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      sub_10125ECBC(a3, v4);
      v4 += 176;
      a3 += 176;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t sub_10125ECBC(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::__shared_weak_count *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(std::__shared_weak_count **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = v4;
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  v6 = *(_OWORD *)(a2 + 40);
  v7 = *(_OWORD *)(a2 + 56);
  v8 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v8;
  *(_OWORD *)(a1 + 56) = v7;
  *(_OWORD *)(a1 + 40) = v6;
  v9 = *(_OWORD *)(a2 + 104);
  v10 = *(_OWORD *)(a2 + 120);
  v11 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 148) = *(_OWORD *)(a2 + 148);
  *(_OWORD *)(a1 + 136) = v11;
  *(_OWORD *)(a1 + 120) = v10;
  *(_OWORD *)(a1 + 104) = v9;
  *(_WORD *)(a1 + 168) = *(_WORD *)(a2 + 168);
  return a1;
}

uint64_t sub_10125ED48@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = a3;
  if (a1 == a2)
  {
    v8 = a1;
  }
  else
  {
    v8 = a2;
    v9 = *a3;
    for (i = a2; ; i = v12)
    {
      v11 = 0x2E8BA2E8BA2E8BA3 * ((a4 - v9) >> 4);
      if (0x2E8BA2E8BA2E8BA3 * ((i - a1) >> 4) < v11)
        v11 = 0x2E8BA2E8BA2E8BA3 * ((i - a1) >> 4);
      v12 = i - 176 * v11;
      result = sub_10125EE20(v12, i, a4);
      if (v12 == a1)
        break;
      v15 = *--v5;
      v9 = v15;
      a4 = v15 + 4048;
    }
    a4 = v14;
    if (*v5 + 4048 == v14)
    {
      v16 = v5[1];
      ++v5;
      a4 = v16;
    }
  }
  *a5 = v8;
  a5[1] = (uint64_t)v5;
  a5[2] = a4;
  return result;
}

uint64_t sub_10125EE20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (a2 != a1)
  {
    v6 = a2;
    do
    {
      v6 -= 176;
      a3 -= 176;
      sub_10125ECBC(a3, v6);
    }
    while (v6 != a1);
  }
  return a2;
}

void sub_10125EE7C()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101C48440;
      v1[3] = unk_101C48450;
      v1[4] = xmmword_101C48460;
      v1[0] = xmmword_101C48420;
      v1[1] = unk_101C48430;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_10125EF50(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

uint64_t sub_10125F338(void *a1, void *a2)
{
  uint64_t result;
  NSObject *v5;
  _BOOL4 v6;
  uint64_t v7;
  const char *v8;
  NSObject *v9;
  _BOOL4 v10;
  NSObject *v11;
  _BOOL4 v12;
  NSObject *v13;
  _BOOL4 v14;
  uint64_t v15;
  const char *v16;
  uint8_t *v17;
  int v18;
  __int128 v19;
  uint8_t buf[4];
  void *v21;

  if (a2)
  {
    if (a1)
    {
      if ((char *)objc_msgSend(a1, "slotID") - 1 >= (char *)2)
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021AADE0);
        v11 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          LODWORD(v21) = objc_msgSend(a1, "slotID");
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#ctcl,##cterror,isValidParamsDisplayStatus,InvalidSlot,slot,%d", buf, 8u);
        }
        v12 = sub_1001BFF7C(115, 0);
        result = 0;
        if (v12)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021AADE0);
          v15 = qword_1022A0088;
          LODWORD(v19) = 67109120;
          DWORD1(v19) = objc_msgSend(a1, "slotID");
          v18 = 8;
          v8 = "#ctcl,##cterror,isValidParamsDisplayStatus,InvalidSlot,slot,%d";
          v7 = v15;
          goto LABEL_45;
        }
      }
      else
      {
        if ((objc_msgSend(a2, "isEqualToString:", CFSTR("kCTRegistrationStatusUnknown")) & 1) != 0
          || (objc_msgSend(a2, "isEqualToString:", CFSTR("kCTRegistrationStatusDenied")) & 1) != 0
          || (objc_msgSend(a2, "isEqualToString:", CFSTR("kCTRegistrationStatusRegisteredHome")) & 1) != 0
          || (objc_msgSend(a2, "isEqualToString:", CFSTR("kCTRegistrationStatusRegisteredRoaming")) & 1) != 0
          || (objc_msgSend(a2, "isEqualToString:", CFSTR("kCTRegistrationStatusNotRegistered")) & 1) != 0
          || (objc_msgSend(a2, "isEqualToString:", CFSTR("kCTRegistrationStatusSearching")) & 1) != 0
          || (objc_msgSend(a2, "isEqualToString:", CFSTR("kCTRegistrationStatusEmergencyOnly")) & 1) != 0)
        {
          return 1;
        }
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021AADC0);
        v13 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          v21 = a2;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,isValidParamsDisplayStatus,InvalidRegStatus,regsitrationStatus,%@", buf, 0xCu);
        }
        v14 = sub_1001BFF7C(115, 0);
        result = 0;
        if (v14)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_1021AADC0);
          v7 = qword_1022A0028;
          LODWORD(v19) = 138412290;
          *(_QWORD *)((char *)&v19 + 4) = a2;
          v18 = 12;
          v8 = "#ctcl,#cterror,isValidParamsDisplayStatus,InvalidRegStatus,regsitrationStatus,%@";
LABEL_45:
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 16, v8, &v19, v18, v19);
          v17 = (uint8_t *)v16;
          sub_100512490("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::isValidParamsDisplayStatus(const CTXPCServiceSubscriptionContext *, NSString *)", "%s\n", v16);
          if (v17 != buf)
            free(v17);
          return 0;
        }
      }
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AADE0);
      v9 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,isValidParamsDisplayStatus,context,nil", buf, 2u);
      }
      v10 = sub_1001BFF7C(115, 0);
      result = 0;
      if (v10)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021AADE0);
        v7 = qword_1022A0088;
        LOWORD(v19) = 0;
        v18 = 2;
        v8 = "#ctcl,#cterror,isValidParamsDisplayStatus,context,nil";
        goto LABEL_45;
      }
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AADE0);
    v5 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,isValidParamsDisplayStatus,status,nil", buf, 2u);
    }
    v6 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v6)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AADE0);
      v7 = qword_1022A0088;
      LOWORD(v19) = 0;
      v18 = 2;
      v8 = "#ctcl,#cterror,isValidParamsDisplayStatus,status,nil";
      goto LABEL_45;
    }
  }
  return result;
}

uint64_t sub_10125F874(void *a1)
{
  uint64_t result;
  NSObject *v3;
  _BOOL4 v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _BOOL4 v8;
  uint64_t v9;
  const char *v10;
  _DWORD v11[4];
  uint8_t buf[4];
  unsigned int v13;

  if (!a1)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AADE0);
    v3 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,isValidParamsInHomeCountryStatus,context,nil", buf, 2u);
    }
    v4 = sub_1001BFF7C(115, 0);
    result = 0;
    if (!v4)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AADE0);
    LOWORD(v11[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ctcl,#cterror,isValidParamsInHomeCountryStatus,context,nil", v11, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::isValidParamsInHomeCountryStatus(const CTXPCServiceSubscriptionContext *)", "%s\n", v5);
    if (v6 == buf)
      return 0;
LABEL_12:
    free(v6);
    return 0;
  }
  if ((char *)objc_msgSend(a1, "slotID") - 1 < (char *)2)
    return 1;
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021AADE0);
  v7 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109120;
    v13 = objc_msgSend(a1, "slotID");
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,isValidParamsInHomeCountryStatus,InvalidSlot,slot,%d", buf, 8u);
  }
  v8 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v8)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AADE0);
    v9 = qword_1022A0088;
    v11[0] = 67109120;
    v11[1] = objc_msgSend(a1, "slotID");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 16, "#ctcl,#cterror,isValidParamsInHomeCountryStatus,InvalidSlot,slot,%d", v11);
    v6 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::isValidParamsInHomeCountryStatus(const CTXPCServiceSubscriptionContext *)", "%s\n", v10);
    if (v6 == buf)
      return 0;
    goto LABEL_12;
  }
  return result;
}

uint64_t sub_10125FB88(void *a1, uint64_t a2)
{
  uint64_t result;
  NSObject *v4;
  _BOOL4 v5;
  const char *v6;
  NSObject *v7;
  _BOOL4 v8;
  uint8_t *v9;
  NSObject *v10;
  _BOOL4 v11;
  uint64_t v12;
  const char *v13;
  _QWORD v14[2];
  uint8_t buf[4];
  unsigned int v16;

  if (!a2)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AADE0);
    v4 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,isValidParamsDataStatus,status,nil", buf, 2u);
    }
    v5 = sub_1001BFF7C(115, 0);
    result = 0;
    if (!v5)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AADE0);
    LOWORD(v14[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ctcl,#cterror,isValidParamsDataStatus,status,nil", v14, 2, v14[0]);
LABEL_21:
    v9 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::isValidParamsDataStatus(const CTXPCServiceSubscriptionContext *, CTDataStatus *)", "%s\n", v6);
    if (v9 == buf)
      return 0;
LABEL_22:
    free(v9);
    return 0;
  }
  if (!a1)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AADE0);
    v7 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,isValidParamsDataStatus,context,nil", buf, 2u);
    }
    v8 = sub_1001BFF7C(115, 0);
    result = 0;
    if (!v8)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AADE0);
    LOWORD(v14[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ctcl,#cterror,isValidParamsDataStatus,context,nil", v14, 2, v14[0]);
    goto LABEL_21;
  }
  if ((char *)objc_msgSend(a1, "slotID") - 1 < (char *)2)
    return 1;
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021AADE0);
  v10 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109120;
    v16 = objc_msgSend(a1, "slotID");
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,isValidParamsDataStatus,InvalidSlot,slot,%d", buf, 8u);
  }
  v11 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v11)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AADE0);
    v12 = qword_1022A0088;
    LODWORD(v14[0]) = 67109120;
    HIDWORD(v14[0]) = objc_msgSend(a1, "slotID");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v12, 16, "#ctcl,#cterror,isValidParamsDataStatus,InvalidSlot,slot,%d", v14);
    v9 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::isValidParamsDataStatus(const CTXPCServiceSubscriptionContext *, CTDataStatus *)", "%s\n", v13);
    if (v9 == buf)
      return 0;
    goto LABEL_22;
  }
  return result;
}

id sub_10125FF80(uint64_t a1)
{
  id v2;
  _QWORD *i;

  v2 = objc_alloc_init((Class)NSMutableDictionary);
  for (i = *(_QWORD **)(a1 + 16); i; i = (_QWORD *)*i)
    sub_10059A910(i[3], v2);
  return v2;
}

id sub_10125FFD0(uint64_t a1)
{
  id v2;
  int v4;
  int *v5;
  const __CFString *v6;
  NSNumber *v7;
  const __CFString *v8;
  NSNumber *v9;

  v2 = objc_alloc_init((Class)NSMutableDictionary);
  v8 = CFSTR("kInHomeCountryKey");
  v4 = 0;
  v5 = &v4;
  v9 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned __int8 *)sub_10096ED18(a1, &v4, (uint64_t)&unk_101B9EB60, &v5) + 20));
  objc_msgSend(v2, "setObject:forKey:", +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v9, &v8, 1), CFSTR("kSlotOne"));
  if (sub_1001DC538())
  {
    v5 = &v4;
    v6 = CFSTR("kInHomeCountryKey");
    v4 = 1;
    v7 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned __int8 *)sub_10096ED18(a1, &v4, (uint64_t)&unk_101B9EB60, &v5) + 20));
    objc_msgSend(v2, "setObject:forKey:", +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v7, &v6, 1), CFSTR("kSlotTwo"));
  }
  return v2;
}

uint64_t sub_101260140(void *a1, uint64_t a2)
{
  const __CFDictionary *v4;
  int v5;
  const __CFDictionary *v6;
  int v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v11;
  const char *v12;
  uint8_t *v13;
  const char *v14;
  uint8_t *v15;
  uint64_t v16;
  _WORD v17[12];
  int v18;
  int v19[4];
  uint8_t buf[1640];

  v4 = (const __CFDictionary *)objc_msgSend(a1, "objectForKey:", CFSTR("kSlotOne"));
  if (v4)
  {
    v18 = 0;
    sub_1001C1D6C((int)v17, v4);
    sub_1001C1194((uint64_t)v17, (uint64_t)CFSTR("kInHomeCountryKey"), &v18);
    v5 = v18;
    v19[0] = 0;
    *(_QWORD *)buf = v19;
    *((_BYTE *)sub_10096ED18(a2, v19, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 20) = v5 != 0;
    if (sub_1001DC538())
    {
      v6 = (const __CFDictionary *)objc_msgSend(a1, "objectForKey:", CFSTR("kSlotTwo"));
      if (!v6)
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021AADE0);
        v11 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#ctcl couldn't get In Home Country information for SIM 2", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021AADE0);
          LOWORD(v19[0]) = 0;
          LODWORD(v16) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ctcl couldn't get In Home Country information for SIM 2", v19, v16);
          v15 = (uint8_t *)v14;
          sub_100512490("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::copyValuesFromInHomeCountryStatusDictionary(CFDictionaryRef, std::unordered_map<SimInstance, BOOL> &)", "%s\n", v14);
          if (v15 != buf)
            free(v15);
        }
        v8 = 0;
        goto LABEL_6;
      }
      sub_1001C1D6C((int)buf, v6);
      sub_1001C1194((uint64_t)buf, (uint64_t)CFSTR("kInHomeCountryKey"), &v18);
      v7 = v18;
      HIDWORD(v16) = 1;
      *(_QWORD *)v19 = (char *)&v16 + 4;
      *((_BYTE *)sub_10096ED18(a2, (int *)&v16 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)v19) + 20) = v7 != 0;
      sub_10011A5A8(buf);
    }
    v8 = 1;
LABEL_6:
    sub_10011A5A8(v17);
    return v8;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021AADE0);
  v9 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#ctcl couldn't get In Home Country information for SIM 1", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AADE0);
    v17[0] = 0;
    LODWORD(v16) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ctcl couldn't get In Home Country information for SIM 1", v17, v16);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::copyValuesFromInHomeCountryStatusDictionary(CFDictionaryRef, std::unordered_map<SimInstance, BOOL> &)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  return 0;
}

void sub_101260524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

id sub_101260564(uint64_t a1)
{
  id v2;
  uint64_t *v3;
  uint64_t *v4;
  int v6;
  int *v7;

  v2 = objc_alloc_init((Class)NSMutableDictionary);
  v6 = 0;
  v7 = &v6;
  v3 = sub_1009700C8(a1, &v6, (uint64_t)&unk_101B9EB60, &v7);
  objc_msgSend(v2, "setObject:forKey:", sub_1005A5D60(v3 + 3), CFSTR("kSlotOne"));
  if (sub_1001DC538())
  {
    v6 = 1;
    v7 = &v6;
    v4 = sub_1009700C8(a1, &v6, (uint64_t)&unk_101B9EB60, &v7);
    objc_msgSend(v2, "setObject:forKey:", sub_1005A5D60(v4 + 3), CFSTR("kSlotTwo"));
  }
  return v2;
}

BOOL sub_101260640(void *a1, uint64_t a2)
{
  const __CFDictionary *v4;
  uint64_t *v5;
  void **v6;
  const __CFDictionary *v7;
  uint64_t *v8;
  void **v9;
  _BOOL8 result;
  NSObject *v11;
  const char *v12;
  std::string *v13;
  NSObject *v14;
  const char *v15;
  int v16;
  _DWORD *v17[2];
  std::string buf;
  __int16 v19;
  char v20;

  v4 = (const __CFDictionary *)objc_msgSend(a1, "objectForKey:", CFSTR("kSlotOne"));
  if (!v4)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AADE0);
    v11 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#ctcl couldn't get Registration display status information for SIM 1", (uint8_t *)&buf, 2u);
    }
    result = sub_1001BFF7C(115, 0);
    if (!result)
      return result;
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AADE0);
    LOWORD(v17[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ctcl couldn't get Registration display status information for SIM 1", v17, 2);
    v13 = (std::string *)v12;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::copyValuesFromRegistrationDisplayStatusDictionary(CFDictionaryRef, std::unordered_map<SimInstance, CLCTRegistrationDisplayStatus> &)", "%s\n", v12);
LABEL_27:
    if (v13 != &buf)
      free(v13);
    return 0;
  }
  sub_1005A5D5C(&buf, v4);
  v16 = 0;
  v17[0] = &v16;
  v5 = sub_1009700C8(a2, &v16, (uint64_t)&unk_101B9EB60, v17);
  v6 = (void **)(v5 + 3);
  if (*((char *)v5 + 47) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
  v5[5] = buf.__r_.__value_.__r.__words[2];
  *((_WORD *)v5 + 24) = v19;
  *((_BYTE *)v5 + 50) = v20;
  if (!sub_1001DC538())
    return 1;
  v7 = (const __CFDictionary *)objc_msgSend(a1, "objectForKey:", CFSTR("kSlotTwo"));
  if (v7)
  {
    sub_1005A5D5C(&buf, v7);
    v16 = 1;
    v17[0] = &v16;
    v8 = sub_1009700C8(a2, &v16, (uint64_t)&unk_101B9EB60, v17);
    v9 = (void **)(v8 + 3);
    if (*((char *)v8 + 47) < 0)
      operator delete(*v9);
    *(_OWORD *)v9 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    v8[5] = buf.__r_.__value_.__r.__words[2];
    *((_WORD *)v8 + 24) = v19;
    *((_BYTE *)v8 + 50) = v20;
    return 1;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021AADE0);
  v14 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "#ctcl couldn't get Registration display status information for SIM 2", (uint8_t *)&buf, 2u);
  }
  result = sub_1001BFF7C(115, 0);
  if (result)
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AADE0);
    LOWORD(v17[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ctcl couldn't get Registration display status information for SIM 2", v17, 2);
    v13 = (std::string *)v15;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::copyValuesFromRegistrationDisplayStatusDictionary(CFDictionaryRef, std::unordered_map<SimInstance, CLCTRegistrationDisplayStatus> &)", "%s\n", v15);
    goto LABEL_27;
  }
  return result;
}

void sub_101260A10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_101260A38(uint64_t a1)
{
  id v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v6;
  int *v7;

  v2 = objc_alloc_init((Class)NSMutableDictionary);
  v6 = 0;
  v7 = &v6;
  v3 = (unsigned __int8 *)sub_10071E124(a1, &v6, (uint64_t)&unk_101B9EB60, &v7);
  objc_msgSend(v2, "setObject:forKey:", sub_1005A7180(v3 + 20), CFSTR("kSlotOne"));
  if (sub_1001DC538())
  {
    v6 = 1;
    v7 = &v6;
    v4 = (unsigned __int8 *)sub_10071E124(a1, &v6, (uint64_t)&unk_101B9EB60, &v7);
    objc_msgSend(v2, "setObject:forKey:", sub_1005A7180(v4 + 20), CFSTR("kSlotTwo"));
  }
  return v2;
}

uint64_t sub_101260B14(void *a1, uint64_t a2)
{
  const __CFDictionary *v4;
  _QWORD *v5;
  char v6;
  __int128 v7;
  const __CFDictionary *v8;
  uint64_t v9;
  _QWORD *v10;
  char v11;
  __int128 v12;
  NSObject *v13;
  const char *v14;
  NSObject *v15;
  uint8_t *v17;
  int v18;
  _DWORD *v19[2];
  uint8_t buf[16];
  __int128 v21;
  char v22;

  v4 = (const __CFDictionary *)objc_msgSend(a1, "objectForKey:", CFSTR("kSlotOne"));
  if (!v4)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AADE0);
    v13 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "#ctcl couldn't get Data Status information for SIM 1", buf, 2u);
    }
    v9 = 0;
    if (!sub_1001BFF7C(115, 0))
      return v9;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AADE0);
    LOWORD(v19[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ctcl couldn't get Data Status information for SIM 1", v19, 2);
LABEL_23:
    v17 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::copyValuesFromDataStatusDictionary(CFDictionaryRef, std::unordered_map<SimInstance, CLCTDataStatus> &)", "%s\n", v14);
    if (v17 != buf)
      free(v17);
    return 0;
  }
  sub_1005A717C((uint64_t)buf, v4);
  v18 = 0;
  v19[0] = &v18;
  v5 = sub_10071E124(a2, &v18, (uint64_t)&unk_101B9EB60, v19);
  v6 = v22;
  v7 = v21;
  *(_OWORD *)((char *)v5 + 20) = *(_OWORD *)buf;
  *(_OWORD *)((char *)v5 + 36) = v7;
  *((_BYTE *)v5 + 52) = v6;
  if (!sub_1001DC538())
    return 1;
  v8 = (const __CFDictionary *)objc_msgSend(a1, "objectForKey:", CFSTR("kSlotTwo"));
  if (v8)
  {
    sub_1005A717C((uint64_t)buf, v8);
    v9 = 1;
    v18 = 1;
    v19[0] = &v18;
    v10 = sub_10071E124(a2, &v18, (uint64_t)&unk_101B9EB60, v19);
    v11 = v22;
    v12 = v21;
    *(_OWORD *)((char *)v10 + 20) = *(_OWORD *)buf;
    *(_OWORD *)((char *)v10 + 36) = v12;
    *((_BYTE *)v10 + 52) = v11;
    return v9;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021AADE0);
  v15 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "#ctcl couldn't get Data Status information for SIM 2", buf, 2u);
  }
  v9 = 0;
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AADE0);
    LOWORD(v19[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ctcl couldn't get Data Status information for SIM 2", v19, 2);
    goto LABEL_23;
  }
  return v9;
}

uint64_t sub_101260E60(void *a1, uint64_t a2)
{
  uint64_t result;
  NSObject *v5;
  _BOOL4 v6;
  const char *v7;
  uint8_t *v8;
  NSObject *v9;
  _BOOL4 v10;
  uint64_t v11;
  const char *v12;
  int v13;
  void *v14;
  __int16 v15;
  uint64_t v16;
  uint8_t buf[4];
  void *v18;
  __int16 v19;
  uint64_t v20;

  if (!a1 || !a2)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021AADC0);
    v5 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218240;
      v18 = a1;
      v19 = 2048;
      v20 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,suplInfo,invalid,context,%p,info,%p", buf, 0x16u);
    }
    v6 = sub_1001BFF7C(115, 0);
    result = 0;
    if (!v6)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021AADC0);
    v13 = 134218240;
    v14 = a1;
    v15 = 2048;
    v16 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#ctcl,#cterror,suplInfo,invalid,context,%p,info,%p", &v13, 22);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::isSuplInfoValid(const CTXPCServiceSubscriptionContext *, NSData *)", "%s\n", v7);
    if (v8 == buf)
      return 0;
LABEL_13:
    free(v8);
    return 0;
  }
  if ((char *)objc_msgSend(a1, "slotID") - 1 < (char *)2)
    return 1;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021AADC0);
  v9 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109120;
    LODWORD(v18) = objc_msgSend(a1, "slotID");
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,suplInfo,invalidSlot,%d", buf, 8u);
  }
  v10 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v10)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021AADC0);
    v11 = qword_1022A0028;
    v13 = 67109120;
    LODWORD(v14) = objc_msgSend(a1, "slotID");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 16, "#ctcl,#cterror,suplInfo,invalidSlot,%d", &v13);
    v8 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::isSuplInfoValid(const CTXPCServiceSubscriptionContext *, NSData *)", "%s\n", v12);
    if (v8 == buf)
      return 0;
    goto LABEL_13;
  }
  return result;
}

CFDictionaryRef sub_1012611B0(void *a1, void *a2)
{
  CFNumberRef v3;
  const __CFNumber *v4;
  void *values[2];
  void *keys[2];

  if (!a2)
    return 0;
  LODWORD(keys[0]) = objc_msgSend(a1, "slotID");
  v3 = sub_10019CED4(keys);
  v4 = v3;
  keys[0] = CFSTR("kSlotIdKey");
  keys[1] = CFSTR("kSuplKey");
  values[0] = v3;
  values[1] = a2;
  return CFDictionaryCreate(0, (const void **)keys, (const void **)values, 2, &kCFCopyStringDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
}

uint64_t sub_101261268(CFDictionaryRef theDict, _QWORD *a2, unint64_t *a3)
{
  char *BytePtr;
  CFIndex Length;
  uint64_t v7;
  NSObject *v8;
  char *v10;
  _WORD v11[2];
  unsigned int v12;
  CFDataRef theData;
  uint8_t v14[16];
  uint8_t buf[1640];

  sub_1001C1D6C((int)v14, theDict);
  theData = 0;
  v12 = 0;
  if (sub_1000B1180((uint64_t)v14, (uint64_t)CFSTR("kSlotIdKey"), &v12)
    && sub_100527540((uint64_t)v14, CFSTR("kSuplKey"), (CFTypeRef *)&theData))
  {
    BytePtr = (char *)CFDataGetBytePtr(theData);
    Length = CFDataGetLength(theData);
    sub_100054CE0(a3, Length);
    sub_100C1DAB8((uint64_t)a3, (char *)*a3, BytePtr, &BytePtr[Length], Length);
    *a2 = objc_msgSend(objc_alloc((Class)CTXPCServiceSubscriptionContext), "initWithSlot:", v12);
    v7 = 1;
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AADE0);
    v8 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#clct couldn't get value for  CTXPCServiceSubscriptionContext or  suplPayload ", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AADE0);
      v11[0] = 0;
      v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#clct couldn't get value for  CTXPCServiceSubscriptionContext or  suplPayload ", v11, 2);
      sub_100512490("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::copySuplPayloadfromDictionary(CFDictionaryRef, CTXPCServiceSubscriptionContext **, std::vector<uint8_t> &)", "%s\n", v10);
      if (v10 != (char *)buf)
        free(v10);
    }
    v7 = 0;
  }
  sub_10011A5A8(v14);
  return v7;
}

void sub_1012614C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

id sub_1012614F0(uint64_t a1)
{
  id v2;
  uint64_t *v3;
  uint64_t *v4;
  int v6;
  int *v7;

  v2 = objc_alloc_init((Class)NSMutableDictionary);
  v6 = 0;
  v7 = &v6;
  v3 = sub_100970464(a1, &v6, (uint64_t)&unk_101B9EB60, &v7);
  objc_msgSend(v2, "setObject:forKey:", sub_1005A5488(v3 + 3), CFSTR("kSlotOne"));
  if (sub_1001DC538())
  {
    v6 = 1;
    v7 = &v6;
    v4 = sub_100970464(a1, &v6, (uint64_t)&unk_101B9EB60, &v7);
    objc_msgSend(v2, "setObject:forKey:", sub_1005A5488(v4 + 3), CFSTR("kSlotTwo"));
  }
  return v2;
}

BOOL sub_1012615CC(void *a1, uint64_t a2)
{
  id v4;
  uint64_t *v5;
  void **v6;
  void **v7;
  void **v8;
  NSObject *v9;
  _BOOL8 result;
  char *v11;
  int v12;
  id v13;
  uint64_t *v14;
  void **v15;
  void **v16;
  void **v17;
  NSObject *v18;
  int v19;
  int v20;
  _DWORD *v21[2];
  uint8_t buf[16];
  uint64_t v23;
  __int128 __p;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  v4 = objc_msgSend(a1, "objectForKey:", CFSTR("kSlotOne"));
  if (v4)
  {
    sub_1005A5484(buf, v4);
    v20 = 0;
    v21[0] = &v20;
    v5 = sub_100970464(a2, &v20, (uint64_t)&unk_101B9EB60, v21);
    v6 = (void **)(v5 + 3);
    if (*((char *)v5 + 47) < 0)
      operator delete(*v6);
    v5[5] = v23;
    *(_OWORD *)v6 = *(_OWORD *)buf;
    HIBYTE(v23) = 0;
    buf[0] = 0;
    v7 = (void **)(v5 + 6);
    if (*((char *)v5 + 71) < 0)
      operator delete(*v7);
    v5[8] = v25;
    *(_OWORD *)v7 = __p;
    HIBYTE(v25) = 0;
    LOBYTE(__p) = 0;
    v8 = (void **)(v5 + 9);
    if (*((char *)v5 + 95) < 0)
    {
      operator delete(*v8);
      v12 = SHIBYTE(v25);
      *(_OWORD *)v8 = v26;
      v5[11] = v27;
      HIBYTE(v27) = 0;
      LOBYTE(v26) = 0;
      if (v12 < 0)
        operator delete((void *)__p);
    }
    else
    {
      *(_OWORD *)v8 = v26;
      v5[11] = v27;
      HIBYTE(v27) = 0;
      LOBYTE(v26) = 0;
    }
    if (SHIBYTE(v23) < 0)
      operator delete(*(void **)buf);
    if (!sub_1001DC538())
      return 1;
    v13 = objc_msgSend(a1, "objectForKey:", CFSTR("kSlotTwo"));
    if (v13)
    {
      sub_1005A5484(buf, v13);
      v20 = 1;
      v21[0] = &v20;
      v14 = sub_100970464(a2, &v20, (uint64_t)&unk_101B9EB60, v21);
      v15 = (void **)(v14 + 3);
      if (*((char *)v14 + 47) < 0)
        operator delete(*v15);
      v14[5] = v23;
      *(_OWORD *)v15 = *(_OWORD *)buf;
      HIBYTE(v23) = 0;
      buf[0] = 0;
      v16 = (void **)(v14 + 6);
      if (*((char *)v14 + 71) < 0)
        operator delete(*v16);
      v14[8] = v25;
      *(_OWORD *)v16 = __p;
      HIBYTE(v25) = 0;
      LOBYTE(__p) = 0;
      v17 = (void **)(v14 + 9);
      if (*((char *)v14 + 95) < 0)
      {
        operator delete(*v17);
        v19 = SHIBYTE(v25);
        *(_OWORD *)v17 = v26;
        v14[11] = v27;
        HIBYTE(v27) = 0;
        LOBYTE(v26) = 0;
        if (v19 < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_OWORD *)v17 = v26;
        v14[11] = v27;
        HIBYTE(v27) = 0;
        LOBYTE(v26) = 0;
      }
      if (SHIBYTE(v23) < 0)
        operator delete(*(void **)buf);
      return 1;
    }
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AADE0);
    v18 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "#ctcl couldn't get Sim Status Change information for SIM 2", buf, 2u);
    }
    result = sub_1001BFF7C(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AADE0);
      LOWORD(v21[0]) = 0;
      v11 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ctcl couldn't get Sim Status Change information for SIM 2", v21, 2);
      sub_100512490("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::copySimStatusChangeFromDictionary(CFDictionaryRef, std::unordered_map<SimInstance, CLCTMobileEquipmentInfo> &)", "%s\n", v11);
LABEL_36:
      if (v11 != (char *)buf)
        free(v11);
      return 0;
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AADE0);
    v9 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#ctcl couldn't get Sim Status Change information for SIM 1", buf, 2u);
    }
    result = sub_1001BFF7C(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AADE0);
      LOWORD(v21[0]) = 0;
      v11 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ctcl couldn't get Sim Status Change information for SIM 1", v21, 2);
      sub_100512490("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::copySimStatusChangeFromDictionary(CFDictionaryRef, std::unordered_map<SimInstance, CLCTMobileEquipmentInfo> &)", "%s\n", v11);
      goto LABEL_36;
    }
  }
  return result;
}

void sub_101261AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1005A4F80((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101261AE0(void *a1)
{
  uint64_t result;
  NSObject *v3;
  _BOOL4 v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _BOOL4 v8;
  uint64_t v9;
  const char *v10;
  int v11;
  uint64_t v12;
  uint8_t buf[4];
  uint64_t v14;

  if (!a1)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AADE0);
    v3 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134283521;
      v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,subscriptionContext,invalid,context,%{private}p", buf, 0xCu);
    }
    v4 = sub_1001BFF7C(115, 0);
    result = 0;
    if (!v4)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AADE0);
    v11 = 134283521;
    v12 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ctcl,#cterror,subscriptionContext,invalid,context,%{private}p", &v11, 12);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::isValidSubscriptionContext(const CTXPCServiceSubscriptionContext *)", "%s\n", v5);
    if (v6 == buf)
      return 0;
LABEL_12:
    free(v6);
    return 0;
  }
  if ((char *)objc_msgSend(a1, "slotID") - 1 < (char *)2)
    return 1;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021AADC0);
  v7 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109120;
    LODWORD(v14) = objc_msgSend(a1, "slotID");
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,subscriptionContext,invalidSlot,%d", buf, 8u);
  }
  v8 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v8)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021AADC0);
    v9 = qword_1022A0028;
    v11 = 67109120;
    LODWORD(v12) = objc_msgSend(a1, "slotID");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 16, "#ctcl,#cterror,subscriptionContext,invalidSlot,%d", &v11);
    v6 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::isValidSubscriptionContext(const CTXPCServiceSubscriptionContext *)", "%s\n", v10);
    if (v6 == buf)
      return 0;
    goto LABEL_12;
  }
  return result;
}

CFDictionaryRef sub_101261E0C(void *a1)
{
  void *values;
  void *keys;

  values = a1;
  keys = CFSTR("kSubscriptionKey");
  return CFDictionaryCreate(0, (const void **)&keys, (const void **)&values, 1, &kCFCopyStringDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
}

uint64_t sub_101261E84(CFDictionaryRef theDict, id *a2)
{
  uint64_t v3;
  id v4;
  NSObject *v5;
  const char *v7;
  uint8_t *v8;
  __int16 v9;
  void *v10;
  uint8_t v11[16];
  uint8_t buf[1640];

  sub_1001C1D6C((int)v11, theDict);
  v10 = 0;
  v3 = sub_100219F40((uint64_t)v11, (uint64_t)CFSTR("kSubscriptionKey"), (CFTypeRef *)&v10);
  if ((v3 & 1) != 0)
  {
    v4 = objc_msgSend(v10, "copy");
    *a2 = v4;
    objc_msgSend(v4, "setLabel:", objc_msgSend(objc_msgSend(v10, "label"), "copy"));
    objc_msgSend(*a2, "setPhoneNumber:", objc_msgSend(objc_msgSend(v10, "phoneNumber"), "copy"));
    objc_msgSend(*a2, "setUserDataPreferred:", objc_msgSend(objc_msgSend(v10, "userDataPreferred"), "copy"));
    objc_msgSend(*a2, "setUserDefaultVoice:", objc_msgSend(objc_msgSend(v10, "userDefaultVoice"), "copy"));
    objc_msgSend(*a2, "setIsSimPresent:", objc_msgSend(v10, "isSimPresent"));
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AADE0);
    v5 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,couldn't get value for kSubscriptionKey", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AADE0);
      v9 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ctcl,#cterror,couldn't get value for kSubscriptionKey", &v9, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::copyValuesFromSubscriptionContextDictionary(CFDictionaryRef, CTXPCServiceSubscriptionContext **)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  sub_10011A5A8(v11);
  return v3;
}

void sub_1012620F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

id sub_101262118(uint64_t a1)
{
  id v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v6;
  int *v7;

  v2 = objc_alloc_init((Class)NSMutableDictionary);
  v6 = 0;
  v7 = &v6;
  v3 = (unsigned __int8 *)sub_10096FEA4(a1, &v6, (uint64_t)&unk_101B9EB60, &v7);
  objc_msgSend(v2, "setObject:forKey:", sub_1005A7ED4(v3 + 20), CFSTR("kSlotOne"));
  if (sub_1001DC538())
  {
    v6 = 1;
    v7 = &v6;
    v4 = (unsigned __int8 *)sub_10096FEA4(a1, &v6, (uint64_t)&unk_101B9EB60, &v7);
    objc_msgSend(v2, "setObject:forKey:", sub_1005A7ED4(v4 + 20), CFSTR("kSlotTwo"));
  }
  return v2;
}

uint64_t sub_1012621F4(void *a1, uint64_t a2)
{
  id v4;
  _QWORD *v5;
  id v6;
  uint64_t v7;
  _QWORD *v8;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  uint8_t *v13;
  int v14[3];
  __int16 v15;
  char v16;
  uint8_t buf[1640];

  v4 = objc_msgSend(a1, "objectForKey:", CFSTR("kSlotOne"));
  if (!v4)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AADE0);
    v9 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#ctcl couldn't get subscription context information for SIM 1", buf, 2u);
    }
    v7 = 0;
    if (!sub_1001BFF7C(115, 0))
      return v7;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AADE0);
    LOWORD(v14[0]) = 0;
    v10 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ctcl couldn't get subscription context information for SIM 1", v14, 2, *(_QWORD *)v14);
LABEL_23:
    v13 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::copyFromSubscriptionContextDictionary(CFDictionaryRef, std::unordered_map<SimInstance, CLCTXPCServiceSubscriptionContext> &)", "%s\n", v10);
    if (v13 != buf)
      free(v13);
    return 0;
  }
  sub_1005A7ED0(&v15, v4);
  v14[0] = 0;
  *(_QWORD *)buf = v14;
  v5 = sub_10096FEA4(a2, v14, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
  *((_WORD *)v5 + 10) = v15;
  *((_BYTE *)v5 + 22) = v16;
  if (!sub_1001DC538())
    return 1;
  v6 = objc_msgSend(a1, "objectForKey:", CFSTR("kSlotTwo"));
  if (v6)
  {
    sub_1005A7ED0(&v15, v6);
    v7 = 1;
    v14[0] = 1;
    *(_QWORD *)buf = v14;
    v8 = sub_10096FEA4(a2, v14, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    *((_WORD *)v8 + 10) = v15;
    *((_BYTE *)v8 + 22) = v16;
    return v7;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021AADE0);
  v11 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#ctcl couldn't get subscription context information for SIM 2", buf, 2u);
  }
  v7 = 0;
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AADE0);
    LOWORD(v14[0]) = 0;
    v10 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ctcl couldn't get subscription context information for SIM 2", v14, 2, *(_QWORD *)v14);
    goto LABEL_23;
  }
  return v7;
}

CFDictionaryRef sub_101262538(void *a1, char a2, int a3, int a4, int a5)
{
  CFNumberRef v8;
  const __CFNumber *v9;
  void *v10;
  id v11;
  CFNumberRef v12;
  const __CFNumber *v13;
  CFNumberRef v14;
  const __CFNumber *v15;
  CFNumberRef v16;
  const __CFNumber *v17;
  char v19;
  void *values[5];
  void *keys[5];

  v19 = a2;
  LODWORD(keys[0]) = objc_msgSend(a1, "slotID");
  v8 = sub_10019CED4(keys);
  v9 = v8;
  v10 = (void *)sub_10023EC34(&v19);
  v11 = v10;
  LODWORD(keys[0]) = a3;
  v12 = sub_100528980((unsigned int *)keys);
  v13 = v12;
  LODWORD(keys[0]) = a4;
  v14 = sub_10019CED4(keys);
  v15 = v14;
  LODWORD(keys[0]) = a5;
  v16 = sub_10019CED4(keys);
  v17 = v16;
  keys[0] = CFSTR("kSlotIdKey");
  keys[1] = CFSTR("kSmsSendSuccessKey");
  keys[2] = CFSTR("kSmsMessageIdKey");
  keys[3] = CFSTR("kSmsSendErrorKey");
  keys[4] = CFSTR("kSmsModemErrorKey");
  values[0] = v8;
  values[1] = v10;
  values[2] = v12;
  values[3] = v14;
  values[4] = v16;
  return CFDictionaryCreate(0, (const void **)keys, (const void **)values, 5, &kCFCopyStringDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
}

uint64_t sub_101262680(CFDictionaryRef theDict, _QWORD *a2, BOOL *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  uint64_t v11;
  NSObject *v12;
  const char *v14;
  uint8_t *v15;
  _WORD v16[6];
  unsigned int v17;
  uint8_t v18[16];
  uint8_t buf[1640];

  sub_1001C1D6C((int)v18, theDict);
  v17 = 0;
  if (sub_1000B1180((uint64_t)v18, (uint64_t)CFSTR("kSlotIdKey"), &v17)
    && sub_1001E48E4((uint64_t)v18, (uint64_t)CFSTR("kSmsSendSuccessKey"), a3)
    && sub_1000B1180((uint64_t)v18, (uint64_t)CFSTR("kSmsMessageIdKey"), a4)
    && sub_1001C1194((uint64_t)v18, (uint64_t)CFSTR("kSmsSendErrorKey"), a5)
    && (sub_1001C1194((uint64_t)v18, (uint64_t)CFSTR("kSmsModemErrorKey"), a6) & 1) != 0)
  {
    *a2 = objc_msgSend(objc_alloc((Class)CTXPCServiceSubscriptionContext), "initWithSlot:", v17);
    v11 = 1;
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AADE0);
    v12 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,couldn't get value from SMS info dictionary", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AADE0);
      v16[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ctcl,#cterror,couldn't get value from SMS info dictionary", v16, 2);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::copyValuesFromSmsSentDictionary(CFDictionaryRef, CTXPCServiceSubscriptionContext **, BOOL &, uint32_t &, int32_t &, int32_t &)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    v11 = 0;
  }
  sub_10011A5A8(v18);
  return v11;
}

void sub_101262904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

id sub_101262928(_QWORD *a1)
{
  id v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  int v8;
  int *v9;

  v2 = objc_alloc_init((Class)NSMutableDictionary);
  LODWORD(v9) = 0;
  if (sub_1001F8DEC(a1, (int *)&v9))
  {
    v8 = 0;
    v9 = &v8;
    v3 = sub_1009707B4((uint64_t)a1, &v8, (uint64_t)&unk_101B9EB60, &v9);
    v4 = v3 + 3;
    if (*((char *)v3 + 47) < 0)
      v4 = (_QWORD *)*v4;
    objc_msgSend(v2, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v4), CFSTR("kPhoneNumberOneKey"));
  }
  LODWORD(v9) = 1;
  if (sub_1001F8DEC(a1, (int *)&v9))
  {
    v8 = 1;
    v9 = &v8;
    v5 = sub_1009707B4((uint64_t)a1, &v8, (uint64_t)&unk_101B9EB60, &v9);
    v6 = v5 + 3;
    if (*((char *)v5 + 47) < 0)
      v6 = (_QWORD *)*v6;
    objc_msgSend(v2, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6), CFSTR("kPhoneNumberTwoKey"));
  }
  return v2;
}

uint64_t sub_101262A5C(CFDictionaryRef theDict, uint64_t a2)
{
  uint64_t v3;
  std::string *v4;
  std::string *v5;
  int v7;
  std::string v8;
  std::string __str;
  _BYTE v10[23];
  int *v11;

  v3 = sub_1001C1D6C((int)v10, theDict);
  memset(&__str, 0, sizeof(__str));
  if (sub_1000BD5F0(v3, (uint64_t)CFSTR("kPhoneNumberOneKey"), &__str))
  {
    LODWORD(v11) = 0;
    v8.__r_.__value_.__r.__words[0] = (std::string::size_type)&v11;
    v4 = (std::string *)sub_1009707B4(a2, (int *)&v11, (uint64_t)&unk_101B9EB60, &v8);
    std::string::operator=(v4 + 1, &__str);
  }
  memset(&v8, 0, sizeof(v8));
  if (sub_1000BD5F0((uint64_t)v10, (uint64_t)CFSTR("kPhoneNumberTwoKey"), &v8))
  {
    v7 = 1;
    v11 = &v7;
    v5 = (std::string *)sub_1009707B4(a2, &v7, (uint64_t)&unk_101B9EB60, &v11);
    std::string::operator=(v5 + 1, &v8);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  sub_10011A5A8(v10);
  return 1;
}

void sub_101262B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  sub_10011A5A8(v22 - 48);
  _Unwind_Resume(a1);
}

uint64_t sub_101262BB4(CFDictionaryRef theDict, BOOL *a2)
{
  uint64_t v3;
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t v9[16];
  uint8_t buf[1640];

  sub_1001C1D6C((int)v9, theDict);
  v3 = sub_1001E48E4((uint64_t)v9, (uint64_t)CFSTR("kAltAccountConfiguredKey"), a2);
  if ((v3 & 1) == 0)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021AADC0);
    v4 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ctcl,#Warning,copyValuesFromAltAccountConfiguredDictionary, couldn't get value for Alternate Account Capability", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021AADC0);
      v8[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#ctcl,#Warning,copyValuesFromAltAccountConfiguredDictionary, couldn't get value for Alternate Account Capability", v8, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLCoreTelephonyUtils::copyValuesFromAltAccountConfiguredDictionary(CFDictionaryRef, BOOL &)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  sub_10011A5A8(v9);
  return v3;
}

void sub_101262D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

CFDictionaryRef sub_101262DA0(int a1)
{
  CFNumberRef v1;
  const __CFNumber *v2;
  void *values;
  void *keys;

  LODWORD(keys) = a1;
  v1 = sub_10019CED4(&keys);
  v2 = v1;
  values = v1;
  keys = CFSTR("kTandemCapabilityKey");
  return CFDictionaryCreate(0, (const void **)&keys, (const void **)&values, 1, &kCFCopyStringDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
}

uint64_t sub_101262E34(CFDictionaryRef theDict, _QWORD *a2)
{
  uint64_t v3;
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  _WORD v8[6];
  unsigned int v9;
  uint8_t v10[16];
  uint8_t buf[1640];

  sub_1001C1D6C((int)v10, theDict);
  v9 = 0;
  v3 = sub_1000B1180((uint64_t)v10, (uint64_t)CFSTR("kTandemCapabilityKey"), &v9);
  if ((v3 & 1) != 0)
  {
    *a2 = v9;
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AADE0);
    v4 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,couldn't get value from tandem capability dictionary", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AADE0);
      v8[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ctcl,#cterror,couldn't get value from tandem capability dictionary", v8, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::copyValuesFromTandemCapabilityDictionary(CFDictionaryRef, CTDualSimCapability &)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  sub_10011A5A8(v10);
  return v3;
}

void sub_101263010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

BOOL sub_101263030(unint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _DWORD v6[4];
  uint8_t buf[4];
  int v8;

  if (a1 >= 5)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AADE0);
    v2 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v8 = a1;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,isTandemCapabilityInvalid,capability,%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AADE0);
      v6[0] = 67109120;
      v6[1] = a1;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ctcl,#cterror,isTandemCapabilityInvalid,capability,%d", v6);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::isTandemCapabilityInfoValid(CTDualSimCapability)", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
  return a1 < 5;
}

void sub_1012631E8(void *a1@<X0>, _OWORD *a2@<X8>)
{
  NSObject *v3;
  id v4;
  uint64_t v5;
  void *v6;
  const __CFDictionary *v7;
  int v8;
  unsigned int v9;
  const char *v10;
  id v11;
  uint64_t v12;
  __int128 v13;
  NSObject *v14;
  std::string *v15;
  std::string *v16;
  const char *v17;
  char *v18;
  NSObject *v19;
  _QWORD *v20;
  _BYTE *v21;
  __int128 v22;
  NSObject *v23;
  std::string *v24;
  unsigned int v25;
  std::string *v26;
  const char *v27;
  char *v28;
  NSObject *v29;
  std::string *v30;
  _BYTE *v31;
  NSObject *v32;
  const char *v33;
  char *v34;
  std::string *v35;
  const char *v36;
  _QWORD *v37;
  const char *v38;
  char *v39;
  const char *v40;
  char *v41;
  const char *v42;
  _OWORD *v43;
  NSObject *log;
  os_log_t loga;
  unsigned int v46;
  _BYTE v47[20];
  int v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  std::string v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE v58[32];
  uint8_t v59[128];
  _BYTE buf[32];
  uint64_t v61;

  v55 = 0;
  v56 = 0;
  v57 = 0;
  memset(&v54, 0, sizeof(v54));
  if (!a1)
  {
    v13 = 0uLL;
LABEL_47:
    *a2 = v13;
    a2[1] = v13;
    goto LABEL_97;
  }
  v43 = a2;
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021AADE0);
  v3 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = a1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#ctcl,listOfApns:%@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AADE0);
    *(_DWORD *)v58 = 138412290;
    *(_QWORD *)&v58[4] = a1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ctcl,listOfApns:%@", v58, 12);
    v34 = (char *)v33;
    sub_100512490("Generic", 1, 0, 2, "CLQmiClientManager_Type::SuplApnProfiles CLCoreTelephonyUtils::extractUMTSApn(NSArray *)", "%s\n", v33);
    if (v34 != buf)
      free(v34);
  }
  v52 = 0u;
  v53 = 0u;
  v50 = 0u;
  v51 = 0u;
  v4 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v50, v59, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v51;
    while (2)
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v51 != v5)
          objc_enumerationMutation(a1);
        v7 = *(const __CFDictionary **)(*((_QWORD *)&v50 + 1) + 8 * (_QWORD)v6);
        v49 = 0;
        v48 = 0;
        sub_1001C1D6C((int)v47, v7);
        if (sub_1001E4B84((uint64_t)v47, "type-mask", (_DWORD *)&v49 + 1))
        {
          if (sub_1001E4B84((uint64_t)v47, "AllowedProtocolMask", &v49))
          {
            if (sub_1001E4B84((uint64_t)v47, "TechnologyMask", &v48))
            {
              if (sub_1000BCB64((uint64_t)v47, "apn", &v54))
              {
                v8 = HIDWORD(v49);
                if ((v49 & 0x40000100000000) != 0)
                {
                  if ((~(_DWORD)v49 & 3) != 0)
                    v9 = (v49 >> 1) & 1;
                  else
                    v9 = 2;
                  v46 = v9;
                  if ((v48 & 4) != 0)
                  {
                    if (qword_1022A0080 != -1)
                      dispatch_once(&qword_1022A0080, &stru_1021AADE0);
                    v23 = qword_1022A0088;
                    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
                    {
                      v24 = &v54;
                      if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                        v24 = (std::string *)v54.__r_.__value_.__r.__words[0];
                      *(_DWORD *)buf = 136315138;
                      *(_QWORD *)&buf[4] = v24;
                      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#ctcl,returning first UMTS APN:%s", buf, 0xCu);
                    }
                    v25 = v46;
                    if (!sub_1001BFF7C(115, 2))
                      goto LABEL_92;
                    bzero(buf, 0x65CuLL);
                    if (qword_1022A0080 != -1)
                      dispatch_once(&qword_1022A0080, &stru_1021AADE0);
                    v26 = &v54;
                    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                      v26 = (std::string *)v54.__r_.__value_.__r.__words[0];
                    *(_DWORD *)v58 = 136315138;
                    *(_QWORD *)&v58[4] = v26;
                    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ctcl,returning first UMTS APN:%s", v58);
                    v28 = (char *)v27;
                    sub_100512490("Generic", 1, 0, 2, "CLQmiClientManager_Type::SuplApnProfiles CLCoreTelephonyUtils::extractUMTSApn(NSArray *)", "%s\n", v27);
                    goto LABEL_115;
                  }
                  if (!v48)
                  {
                    if (qword_1022A0080 != -1)
                      dispatch_once(&qword_1022A0080, &stru_1021AADE0);
                    log = qword_1022A0088;
                    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEFAULT, "kWTUnknown", buf, 2u);
                    }
                    if (sub_1001BFF7C(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_1022A0080 != -1)
                        dispatch_once(&qword_1022A0080, &stru_1021AADE0);
                      *(_WORD *)v58 = 0;
                      LODWORD(v42) = 2;
                      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "kWTUnknown", v58, v42);
                      loga = (os_log_t)v10;
                      sub_100512490("Generic", 1, 0, 2, "CLQmiClientManager_Type::SuplApnProfiles CLCoreTelephonyUtils::extractUMTSApn(NSArray *)", "%s\n", v10);
                      if (loga != (os_log_t)buf)
                        free(loga);
                    }
                  }
                  if ((v8 & 0x400000) != 0)
                  {
                    if (qword_1022A0080 != -1)
                      dispatch_once(&qword_1022A0080, &stru_1021AADE0);
                    v29 = qword_1022A0088;
                    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
                    {
                      v30 = &v54;
                      if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                        v30 = (std::string *)v54.__r_.__value_.__r.__words[0];
                      *(_DWORD *)buf = 136315138;
                      *(_QWORD *)&buf[4] = v30;
                      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#ctcl,returning EL-DC APN:%s", buf, 0xCu);
                    }
                    v25 = v46;
                    if (!sub_1001BFF7C(115, 2))
                      goto LABEL_92;
                    bzero(buf, 0x65CuLL);
                    if (qword_1022A0080 != -1)
                      dispatch_once(&qword_1022A0080, &stru_1021AADE0);
                    v35 = &v54;
                    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                      v35 = (std::string *)v54.__r_.__value_.__r.__words[0];
                    *(_DWORD *)v58 = 136315138;
                    *(_QWORD *)&v58[4] = v35;
                    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ctcl,returning EL-DC APN:%s", v58);
                    v28 = (char *)v36;
                    sub_100512490("Generic", 1, 0, 2, "CLQmiClientManager_Type::SuplApnProfiles CLCoreTelephonyUtils::extractUMTSApn(NSArray *)", "%s\n", v36);
LABEL_115:
                    if (v28 != buf)
                      free(v28);
LABEL_92:
                    *(_DWORD *)v43 = 0;
                    *((_DWORD *)v43 + 1) = v25;
                    v31 = (char *)v43 + 8;
                    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
                    {
                      sub_100115CE4(v31, v54.__r_.__value_.__l.__data_, v54.__r_.__value_.__l.__size_);
                    }
                    else
                    {
                      *(_OWORD *)v31 = *(_OWORD *)&v54.__r_.__value_.__l.__data_;
                      *((_QWORD *)v43 + 3) = *((_QWORD *)&v54.__r_.__value_.__l + 2);
                    }
                    sub_10011A5A8(v47);
                    goto LABEL_97;
                  }
                  *(_DWORD *)v58 = 0;
                  *(_DWORD *)&v58[4] = v46;
                  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
                    sub_100115CE4(&v58[8], v54.__r_.__value_.__l.__data_, v54.__r_.__value_.__l.__size_);
                  else
                    *(std::string *)&v58[8] = v54;
                  *(_DWORD *)buf = HIDWORD(v49);
                  *(_QWORD *)&buf[8] = *(_QWORD *)v58;
                  *(_OWORD *)&buf[16] = *(_OWORD *)&v58[8];
                  v61 = *(_QWORD *)&v58[24];
                  memset(&v58[8], 0, 24);
                  sub_101263FE0(&v55, (int *)buf);
                  if (SHIBYTE(v61) < 0)
                    operator delete(*(void **)&buf[16]);
                  if ((v58[31] & 0x80000000) != 0)
                    operator delete(*(void **)&v58[8]);
                }
              }
            }
          }
        }
        sub_10011A5A8(v47);
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v11 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v50, v59, 16);
      v4 = v11;
      if (v11)
        continue;
      break;
    }
  }
  v12 = v55;
  if (v55 != v56)
  {
    while ((*(_BYTE *)v12 & 1) == 0)
    {
      v12 += 40;
      if (v12 == v56)
        goto LABEL_62;
    }
  }
  if (v12 != v56)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AADE0);
    v14 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v15 = &v54;
      if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v15 = (std::string *)v54.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#ctcl,returning I-DC APN:%s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AADE0);
      v16 = &v54;
      if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v16 = (std::string *)v54.__r_.__value_.__r.__words[0];
      *(_DWORD *)v58 = 136315138;
      *(_QWORD *)&v58[4] = v16;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ctcl,returning I-DC APN:%s", v58);
      v18 = (char *)v17;
      sub_100512490("Generic", 1, 0, 2, "CLQmiClientManager_Type::SuplApnProfiles CLCoreTelephonyUtils::extractUMTSApn(NSArray *)", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    goto LABEL_71;
  }
LABEL_62:
  if (v55 == v56)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AADE0);
    v32 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "#ctcl,no apns", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AADE0);
      *(_WORD *)v58 = 0;
      LODWORD(v42) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#ctcl,no apns", v58, v42);
      v41 = (char *)v40;
      sub_100512490("Generic", 1, 0, 2, "CLQmiClientManager_Type::SuplApnProfiles CLCoreTelephonyUtils::extractUMTSApn(NSArray *)", "%s\n", v40);
      if (v41 != buf)
        free(v41);
    }
    v13 = 0uLL;
    a2 = v43;
    goto LABEL_47;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021AADE0);
  v19 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v20 = (_QWORD *)(v55 + 16);
    if (*(char *)(v55 + 39) < 0)
      v20 = (_QWORD *)*v20;
    *(_DWORD *)buf = 134218242;
    *(_QWORD *)&buf[4] = 0xCCCCCCCCCCCCCCCDLL * ((v56 - v55) >> 3);
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v20;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#ctcl,returning the first apn from the queue,%lu,%s", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AADE0);
    v37 = (_QWORD *)(v55 + 16);
    if (*(char *)(v55 + 39) < 0)
      v37 = (_QWORD *)*v37;
    *(_DWORD *)v58 = 134218242;
    *(_QWORD *)&v58[4] = 0xCCCCCCCCCCCCCCCDLL * ((v56 - v55) >> 3);
    *(_WORD *)&v58[12] = 2080;
    *(_QWORD *)&v58[14] = v37;
    LODWORD(v42) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ctcl,returning the first apn from the queue,%lu,%s", v58, v42);
    v39 = (char *)v38;
    sub_100512490("Generic", 1, 0, 2, "CLQmiClientManager_Type::SuplApnProfiles CLCoreTelephonyUtils::extractUMTSApn(NSArray *)", "%s\n", v38);
    if (v39 != buf)
      free(v39);
  }
  v12 = v55;
LABEL_71:
  *(_QWORD *)v43 = *(_QWORD *)(v12 + 8);
  v21 = (char *)v43 + 8;
  if (*(char *)(v12 + 39) < 0)
  {
    sub_100115CE4(v21, *(void **)(v12 + 16), *(_QWORD *)(v12 + 24));
  }
  else
  {
    v22 = *(_OWORD *)(v12 + 16);
    *((_QWORD *)v43 + 3) = *(_QWORD *)(v12 + 32);
    *(_OWORD *)v21 = v22;
  }
LABEL_97:
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  *(_QWORD *)buf = &v55;
  sub_101264D00((void ***)buf);
}

void sub_101263F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  if (a32 < 0)
    operator delete(__p);
  a56 = (uint64_t)&a33;
  sub_101264D00((void ***)&a56);
  _Unwind_Resume(a1);
}

uint64_t sub_101263FE0(uint64_t *a1, int *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  _QWORD v18[5];

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - *a1) >> 3);
    v11 = v10 + 1;
    if (v10 + 1 > 0x666666666666666)
      sub_100259694();
    v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x333333333333333)
      v13 = 0x666666666666666;
    else
      v13 = v11;
    v18[4] = v4;
    if (v13)
      v14 = (char *)sub_100357184(v4, v13);
    else
      v14 = 0;
    v15 = &v14[40 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[40 * v13];
    *(_QWORD *)v15 = *a2;
    *((_QWORD *)v15 + 1) = *((_QWORD *)a2 + 1);
    v16 = *((_OWORD *)a2 + 1);
    *((_QWORD *)v15 + 4) = *((_QWORD *)a2 + 4);
    *((_OWORD *)v15 + 1) = v16;
    *((_QWORD *)a2 + 3) = 0;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 2) = 0;
    v18[2] = v15 + 40;
    sub_101264D8C(a1, v18);
    v9 = a1[1];
    sub_101264F20((uint64_t)v18);
  }
  else
  {
    *(_QWORD *)v7 = *a2;
    *(_QWORD *)(v7 + 8) = *((_QWORD *)a2 + 1);
    v8 = *((_OWORD *)a2 + 1);
    *(_QWORD *)(v7 + 32) = *((_QWORD *)a2 + 4);
    *(_OWORD *)(v7 + 16) = v8;
    *((_QWORD *)a2 + 3) = 0;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 2) = 0;
    v9 = v7 + 40;
    a1[1] = v7 + 40;
  }
  a1[1] = v9;
  return v9 - 40;
}

void sub_101264128(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_101264F20((uint64_t)va);
  _Unwind_Resume(a1);
}

NSDictionary *sub_10126413C(uint64_t a1)
{
  const __CFString *v2;
  NSNumber *v3;

  v2 = CFSTR("kStewieSupportKey");
  v3 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a1);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v3, &v2, 1);
}

BOOL sub_1012641BC(void *a1, _BYTE *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  id v11;
  uint8_t buf[4];
  id v13;

  v3 = objc_msgSend(a1, "valueForKey:", CFSTR("kStewieSupportKey"));
  v4 = v3;
  if (v3)
  {
    *a2 = objc_msgSend(v3, "BOOLValue");
  }
  else if (_os_feature_enabled_impl("CoreTelephony", "Bifrost"))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AAE00);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136380675;
      v13 = objc_msgSend(CFSTR("kStewieSupportKey"), "UTF8String");
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#ctcl,copyValuesFromStewieSupportDictionary,couldn't get value for %{private}s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AAE00);
      v7 = qword_1022A0078;
      v10 = 136380675;
      v11 = objc_msgSend(CFSTR("kStewieSupportKey"), "UTF8String");
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 16, "#ctcl,copyValuesFromStewieSupportDictionary,couldn't get value for %{private}s", &v10, 12);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::copyValuesFromStewieSupportDictionary(NSDictionary *, BOOL &)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
  return v4 != 0;
}

uint64_t sub_1012643C4(void *a1, uint64_t a2)
{
  const __CFDictionary *v4;
  _QWORD *v5;
  const __CFDictionary *v6;
  uint64_t v7;
  _QWORD *v8;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  uint8_t *v13;
  int v14[3];
  BOOL v15[3];
  uint8_t buf[1640];

  v4 = (const __CFDictionary *)objc_msgSend(a1, "objectForKey:", CFSTR("kSlotOne"));
  if (!v4)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AADE0);
    v9 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#ctcl couldn't get IMS Status information for SIM 1", buf, 2u);
    }
    v7 = 0;
    if (!sub_1001BFF7C(115, 0))
      return v7;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AADE0);
    LOWORD(v14[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ctcl couldn't get IMS Status information for SIM 1", v14, 2, *(_QWORD *)v14);
LABEL_23:
    v13 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::copyValuesFromImsRegDictionary(CFDictionaryRef, std::unordered_map<SimInstance, CLCTImsRegStatus> &)", "%s\n", v10);
    if (v13 != buf)
      free(v13);
    return 0;
  }
  sub_1005A77E8(v15, v4);
  v14[0] = 0;
  *(_QWORD *)buf = v14;
  v5 = sub_100970A84(a2, v14, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
  *((_WORD *)v5 + 10) = *(_WORD *)v15;
  if (!sub_1001DC538())
    return 1;
  v6 = (const __CFDictionary *)objc_msgSend(a1, "objectForKey:", CFSTR("kSlotTwo"));
  if (v6)
  {
    sub_1005A77E8(v15, v6);
    v7 = 1;
    v14[0] = 1;
    *(_QWORD *)buf = v14;
    v8 = sub_100970A84(a2, v14, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    *((_WORD *)v8 + 10) = *(_WORD *)v15;
    return v7;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021AADE0);
  v11 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#ctcl couldn't get IMS Status information for SIM 2", buf, 2u);
  }
  v7 = 0;
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AADE0);
    LOWORD(v14[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ctcl couldn't get IMS Status information for SIM 2", v14, 2, *(_QWORD *)v14);
    goto LABEL_23;
  }
  return v7;
}

id sub_1012646F8(uint64_t a1)
{
  id v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v6;
  int *v7;

  v2 = objc_alloc_init((Class)NSMutableDictionary);
  v6 = 0;
  v7 = &v6;
  v3 = (unsigned __int8 *)sub_100970A84(a1, &v6, (uint64_t)&unk_101B9EB60, &v7);
  objc_msgSend(v2, "setObject:forKey:", sub_1005A77EC(v3 + 20), CFSTR("kSlotOne"));
  if (sub_1001DC538())
  {
    v6 = 1;
    v7 = &v6;
    v4 = (unsigned __int8 *)sub_100970A84(a1, &v6, (uint64_t)&unk_101B9EB60, &v7);
    objc_msgSend(v2, "setObject:forKey:", sub_1005A77EC(v4 + 20), CFSTR("kSlotTwo"));
  }
  return v2;
}

id sub_1012647D4(_QWORD *a1)
{
  id v2;
  int v4;
  int *v5;

  v2 = objc_alloc_init((Class)NSMutableDictionary);
  LODWORD(v5) = 0;
  if (sub_1001F8DEC(a1, (int *)&v5))
  {
    v4 = 0;
    v5 = &v4;
    objc_msgSend(v2, "setValue:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)sub_10006A62C((uint64_t)a1, &v4, (uint64_t)&unk_101B9EB60, &v5) + 5)), CFSTR("kSlotOne"));
  }
  LODWORD(v5) = 1;
  if (sub_1001F8DEC(a1, (int *)&v5))
  {
    v4 = 1;
    v5 = &v4;
    objc_msgSend(v2, "setValue:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)sub_10006A62C((uint64_t)a1, &v4, (uint64_t)&unk_101B9EB60, &v5) + 5)), CFSTR("kSlotTwo"));
  }
  return v2;
}

uint64_t sub_1012648F0(void *a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  int v7;
  int *v8;

  if (objc_msgSend(a1, "valueForKey:", CFSTR("kSlotOne")))
  {
    v4 = objc_msgSend(objc_msgSend(a1, "valueForKey:", CFSTR("kSlotOne")), "intValue");
    v7 = 0;
    v8 = &v7;
    *((_DWORD *)sub_10006A62C(a2, &v7, (uint64_t)&unk_101B9EB60, &v8) + 5) = v4;
  }
  if (objc_msgSend(a1, "valueForKey:", CFSTR("kSlotTwo")))
  {
    v5 = objc_msgSend(objc_msgSend(a1, "valueForKey:", CFSTR("kSlotTwo")), "intValue");
    v7 = 1;
    v8 = &v7;
    *((_DWORD *)sub_10006A62C(a2, &v7, (uint64_t)&unk_101B9EB60, &v8) + 5) = v5;
  }
  return 1;
}

uint64_t sub_1012649DC(void *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  const char *v9;
  uint8_t *v10;
  _WORD v11[7];
  unsigned __int8 v12;
  uint8_t buf[1640];

  v12 = 0;
  if (a1 && (v3 = objc_opt_class(NSData, a2), (objc_opt_isKindOfClass(a1, v3) & 1) != 0))
  {
    v4 = 255;
    if (objc_msgSend(a1, "length") != (id)5)
    {
      v5 = 0;
      return v5 | (v4 << 8);
    }
    objc_msgSend(a1, "getBytes:range:", &v12, 1, 1);
    buf[0] = -1;
    v5 = v12;
    switch(v12)
    {
      case 1u:
        v6 = 2;
        break;
      case 4u:
        v6 = 4;
        break;
      case 2u:
        v6 = 3;
        break;
      default:
        return v5 | (v4 << 8);
    }
    objc_msgSend(a1, "getBytes:range:", buf, v6, 1);
    if ((char)buf[0] > 19)
    {
      switch(buf[0])
      {
        case 20u:
          v4 = 20;
          break;
        case 50u:
          v4 = 50;
          break;
        case 100u:
          v4 = 100;
          break;
      }
    }
    else if ((char)buf[0] == -2)
    {
      v4 = 254;
    }
    else if (buf[0] == 10)
    {
      v4 = 10;
    }
    v5 = v12;
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AADE0);
    v7 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "onLinkQualityChanged no payload", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021AADE0);
      v11[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "onLinkQualityChanged no payload", v11, 2);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "std::pair<CLTelephonyService_Type::LinkStateNotificationType, CLTelephonyService_Type::LQMThreshold> CLCoreTelephonyUtils::extractLinkStateChange(NSData *)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    v5 = 0;
    v4 = 255;
  }
  return v5 | (v4 << 8);
}

void sub_101264C7C(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_101264CA8(id a1)
{
  qword_1022A0088 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

void sub_101264CD4(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_101264D00(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_101264D40((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_101264D40(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 40)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

uint64_t sub_101264D8C(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_101264E00((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_101264E00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    do
    {
      v8 = *(_QWORD *)(a3 - 40);
      a3 -= 40;
      *(_QWORD *)(v7 - 40) = v8;
      *(_QWORD *)(v7 - 32) = *(_QWORD *)(a3 + 8);
      v9 = *(_OWORD *)(a3 + 16);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 + 32);
      *(_OWORD *)(v7 - 24) = v9;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      v7 = *((_QWORD *)&v15 + 1) - 40;
      *((_QWORD *)&v15 + 1) -= 40;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  sub_101264EA8((uint64_t)v12);
  return v10;
}

uint64_t sub_101264EA8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_101264EDC(a1);
  return a1;
}

void sub_101264EDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 39) < 0)
      operator delete(*(void **)(v1 + 16));
    v1 += 40;
  }
}

uint64_t sub_101264F20(uint64_t a1)
{
  sub_101264F54(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_101264F54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 40;
      *(_QWORD *)(a1 + 16) = v2 - 40;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        v5 = *(_QWORD *)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

void sub_101265030(id a1)
{
  qword_10230DA28 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLBTLEFenceManagerSilo"));
}

uint64_t sub_1012650E4(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_101265674;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_10230DA50 != -1)
    dispatch_once(&qword_10230DA50, block);
  return qword_10230DA48;
}

void sub_101265250(id a1)
{
  sub_100197040();
  if ((sub_1001B796C() & 0x100000) != 0)
    byte_10230DA38 = 1;
}

void sub_1012652FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100114750((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101265368(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100114750((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1012653D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100114750((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101265454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_101265510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10126552C(uint64_t a1, void *a2)
{
  _QWORD *result;

  result = (_QWORD *)sub_101265558(a1, "CLBTLEFenceManager-Notifier", a2);
  *result = off_1021AAE70;
  return result;
}

uint64_t sub_101265558(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_1021AB038;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_1012655D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012655F8(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021AB038;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1007F8C14(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_101265674()
{
  operator new();
}

void sub_1012656BC()
{
  operator delete();
}

_QWORD *sub_1012656E0@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1015A2E04(a2, __str);
}

id sub_10126575C(uint64_t a1, uint64_t a2, void *a3)
{
  int v3;
  id result;
  int v6;

  v3 = a2;
  result = sub_1007A2B68(a3, a2);
  if (result)
  {
    v6 = v3;
    return (id)(*(uint64_t (**)(_QWORD, int *, id, _QWORD))(a1 + 24))(0, &v6, result, *(_QWORD *)(a1 + 32));
  }
  return result;
}

void sub_1012657A8(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_1012657D4(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t result;

  result = sub_1001B5A2C(a1, a2, a3, a4, a5);
  *(_QWORD *)result = off_1021AB140;
  *(_BYTE *)(result + 41) = 0;
  *(_DWORD *)(result + 44) = -1;
  *(_BYTE *)(result + 48) = 0;
  return result;
}

uint64_t sub_101265804(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  int v14;
  uint8_t buf[4];
  uint64_t v16;
  __int16 v17;
  int v18;

  *(_QWORD *)a1 = off_1021AB140;
  if (*(_BYTE *)(a1 + 41) && sub_100D90530())
  {
    if (qword_10229FC60 != -1)
      dispatch_once(&qword_10229FC60, &stru_1021AB190);
    v2 = qword_10229FC68;
    if (os_log_type_enabled((os_log_t)qword_10229FC68, OS_LOG_TYPE_DEFAULT))
    {
      v3 = *(_QWORD *)(a1 + 24);
      v4 = *(_DWORD *)(a1 + 44);
      *(_DWORD *)buf = 138478083;
      v16 = v3;
      v17 = 1026;
      v18 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Service client is going away: %{private}@, clientType, %{public}d. Unregistering for suppression.", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC60 != -1)
        dispatch_once(&qword_10229FC60, &stru_1021AB190);
      v7 = *(_QWORD *)(a1 + 24);
      v8 = *(_DWORD *)(a1 + 44);
      v11 = 138478083;
      v12 = v7;
      v13 = 1026;
      v14 = v8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC68, 0, "Service client is going away: %{private}@, clientType, %{public}d. Unregistering for suppression.", &v11, 18);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "virtual CLEclipseSubscription::~CLEclipseSubscription()", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    v5 = sub_100D90530();
    sub_100D90A88(v5, 0, *(_DWORD *)(a1 + 44), *(_BYTE *)(a1 + 48));
  }
  sub_10002FA68(a1);
  return a1;
}

void sub_101265A10(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_101265A20(uint64_t a1)
{
  sub_101265804(a1);
  operator delete();
}

_QWORD *sub_101265A44@<X0>(uint64_t a1@<X8>)
{
  uint64_t i;
  _BYTE *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  _QWORD v11[3];
  _QWORD *v12;
  _QWORD v13[3];
  uint64_t v14;
  _QWORD v15[3];
  _BYTE v16[32];

  v11[0] = off_1021AB1C0;
  v11[1] = sub_101265CAC;
  v11[2] = 0;
  v12 = v11;
  sub_1015A2E04(v13, "kCLConnectionMessageEclipseServiceRequest");
  sub_100BBE30C((uint64_t)&v14, (uint64_t)v11);
  v9[0] = off_1021AB1C0;
  v9[1] = sub_101266554;
  v9[2] = 0;
  v10 = v9;
  sub_1015A2E04(v15, "kCLConnectionMessageEclipseViewObstructedStateRequest");
  sub_100BBE30C((uint64_t)v16, (uint64_t)v9);
  sub_101266C38(a1, (unsigned __int8 *)v13, 2);
  for (i = 0; i != -14; i -= 7)
  {
    v3 = *(_BYTE **)&v16[i * 8 + 24];
    if (&v16[i * 8] == v3)
    {
      v3 = &v16[i * 8];
      v4 = 4;
    }
    else
    {
      if (!v3)
        goto LABEL_7;
      v4 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_7:
    if (SHIBYTE(v15[i + 2]) < 0)
      operator delete((void *)v15[i]);
  }
  v5 = v10;
  if (v10 == v9)
  {
    v6 = 4;
    v5 = v9;
LABEL_14:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  else if (v10)
  {
    v6 = 5;
    goto LABEL_14;
  }
  result = v12;
  if (v12 == v11)
  {
    v8 = 4;
    result = v11;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
  }
  else if (v12)
  {
    v8 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
  }
  return result;
}

void sub_101265BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  uint64_t v17;
  uint64_t i;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;

  for (i = 56; i != -56; i -= 56)
    sub_1004E21A4(v17 + i);
  v20 = a13;
  if (a13 == &a10)
  {
    v21 = 4;
    v20 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_8;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_8:
  v22 = a17;
  if (a17 == &a14)
  {
    v23 = 4;
    v22 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_13;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_13:
  _Unwind_Resume(a1);
}

void sub_101265CAC(uint64_t a1, CLConnectionMessage **a2)
{
  id v4;
  char v5;
  char v6;
  void *Dictionary;
  uint64_t v8;
  id v9;
  unsigned int v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  NSObject *v22;
  CLConnectionMessage *v23;
  uint64_t v24;
  const char *v25;
  char *v26;
  const char *v27;
  char *v28;
  const char *v29;
  char *v30;
  uint64_t v31;
  int v32;
  int v33;
  const char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  NSNumber *v38;
  int v39;
  _BYTE v40[14];
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  uint64_t v45;
  _UNKNOWN **v46;
  uint64_t v47;
  _UNKNOWN **v48;
  _BYTE buf[18];
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  sub_1001A638C(a1);
  sub_1015A2E04(buf, "com.apple.locationd.asmanager");
  v5 = sub_1002255E0(a1);
  v6 = v5;
  if (SHIBYTE(v51) < 0)
  {
    operator delete(*(void **)buf);
    if ((v6 & 1) != 0)
      goto LABEL_3;
  }
  else if ((v5 & 1) != 0)
  {
LABEL_3:
    Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
    v8 = CMEclipseServiceEnable;
    if (objc_msgSend(Dictionary, "objectForKey:", CMEclipseServiceEnable)
      && (v9 = objc_msgSend(Dictionary, "objectForKeyedSubscript:", v8)) != 0)
    {
      if (sub_100D90530())
      {
        v10 = objc_msgSend(v9, "BOOLValue");
        if (objc_msgSend(Dictionary, "objectForKey:", CMViewObstructedStateEnable))
        {
          if (qword_10229FC60 != -1)
            dispatch_once(&qword_10229FC60, &stru_1021AB190);
          v11 = qword_10229FC68;
          if (os_log_type_enabled((os_log_t)qword_10229FC68, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 67240192;
            *(_DWORD *)&buf[4] = v10;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Incoming view obstructed service request: %{public}d", buf, 8u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FC60 != -1)
              dispatch_once(&qword_10229FC60, &stru_1021AB190);
            v39 = 67240192;
            *(_DWORD *)v40 = v10;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC68, 1, "Incoming view obstructed service request: %{public}d", &v39, 8);
            v30 = (char *)v29;
            sub_100512490("Generic", 1, 0, 2, "void CLEclipseSubscription::handleMessageEclipseServiceRequest(std::shared_ptr<CLConnectionMessage>)", "%s\n", v29);
            if (v30 != buf)
              free(v30);
          }
        }
        if (objc_msgSend(Dictionary, "objectForKey:", v8))
        {
          v12 = CMSuppressionManagerClientType;
          if (objc_msgSend(Dictionary, "objectForKey:", CMSuppressionManagerClientType))
            *(_DWORD *)(a1 + 44) = objc_msgSend(objc_msgSend(Dictionary, "objectForKeyedSubscript:", v12), "intValue");
          v13 = CMSuppressionManagerAlwaysOnViewObstructedRequested;
          if (objc_msgSend(Dictionary, "objectForKey:", CMSuppressionManagerAlwaysOnViewObstructedRequested))
            *(_BYTE *)(a1 + 48) = objc_msgSend(objc_msgSend(Dictionary, "objectForKeyedSubscript:", v13), "BOOLValue");
          if (qword_10229FC60 != -1)
            dispatch_once(&qword_10229FC60, &stru_1021AB190);
          v14 = qword_10229FC68;
          if (os_log_type_enabled((os_log_t)qword_10229FC68, OS_LOG_TYPE_INFO))
          {
            v15 = *(_QWORD *)(a1 + 24);
            v16 = *(_DWORD *)(a1 + 44);
            v17 = *(unsigned __int8 *)(a1 + 48);
            *(_DWORD *)buf = 67240963;
            *(_DWORD *)&buf[4] = v10;
            *(_WORD *)&buf[8] = 2113;
            *(_QWORD *)&buf[10] = v15;
            v50 = 1026;
            v51 = v16;
            v52 = 1026;
            v53 = v17;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Incoming eclipse service request: %{public}d, client: %{private}@, clientType: %{public}d, alwaysOnViewObstructed: %{public}d", buf, 0x1Eu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FC60 != -1)
              dispatch_once(&qword_10229FC60, &stru_1021AB190);
            v31 = *(_QWORD *)(a1 + 24);
            v32 = *(_DWORD *)(a1 + 44);
            v33 = *(unsigned __int8 *)(a1 + 48);
            v39 = 67240963;
            *(_DWORD *)v40 = v10;
            *(_WORD *)&v40[4] = 2113;
            *(_QWORD *)&v40[6] = v31;
            v41 = 1026;
            v42 = v32;
            v43 = 1026;
            v44 = v33;
            LODWORD(v36) = 30;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC68, 1, "Incoming eclipse service request: %{public}d, client: %{private}@, clientType: %{public}d, alwaysOnViewObstructed: %{public}d", &v39, v36);
            v35 = (char *)v34;
            sub_100512490("Generic", 1, 0, 2, "void CLEclipseSubscription::handleMessageEclipseServiceRequest(std::shared_ptr<CLConnectionMessage>)", "%s\n", v34);
            if (v35 != buf)
              free(v35);
          }
          *(_BYTE *)(a1 + 41) = v10;
          v18 = sub_100D90530();
          if (sub_100D90A88(v18, v10, *(_DWORD *)(a1 + 44), *(_BYTE *)(a1 + 48)))
            v19 = 100;
          else
            v19 = 108;
          v37 = CMErrorMessage;
          v38 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v19);
          *(_QWORD *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v38, &v37, 1);
          sub_1012669C4(a1, buf);
        }
        sub_1001A638C(a1);
        goto LABEL_40;
      }
      v23 = *a2;
      v45 = CMErrorMessage;
      v46 = &off_10221D1A8;
      +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v46, &v45, 1);
      CLConnectionMessage::sendReply(v23);
    }
    else
    {
      if (qword_10229FC60 != -1)
        dispatch_once(&qword_10229FC60, &stru_1021AB190);
      v22 = qword_10229FC68;
      if (os_log_type_enabled((os_log_t)qword_10229FC68, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_FAULT, "Invalid parameters!", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC60 != -1)
          dispatch_once(&qword_10229FC60, &stru_1021AB190);
        LOWORD(v39) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC68, 17, "Invalid parameters!", &v39, 2);
        v28 = (char *)v27;
        sub_100512490("Generic", 1, 0, 0, "void CLEclipseSubscription::handleMessageEclipseServiceRequest(std::shared_ptr<CLConnectionMessage>)", "%s\n", v27);
        if (v28 != buf)
          free(v28);
      }
    }
    sub_1001A638C(a1);
    goto LABEL_40;
  }
  if (qword_10229FC60 != -1)
    dispatch_once(&qword_10229FC60, &stru_1021AB190);
  v20 = qword_10229FC68;
  if (os_log_type_enabled((os_log_t)qword_10229FC68, OS_LOG_TYPE_ERROR))
  {
    v21 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)buf = 138477827;
    *(_QWORD *)&buf[4] = v21;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Client %{private}@ is not entitled.", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC60 != -1)
      dispatch_once(&qword_10229FC60, &stru_1021AB190);
    v24 = *(_QWORD *)(a1 + 24);
    v39 = 138477827;
    *(_QWORD *)v40 = v24;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC68, 16, "Client %{private}@ is not entitled.", &v39, 12);
    v26 = (char *)v25;
    sub_100512490("Generic", 1, 0, 0, "void CLEclipseSubscription::handleMessageEclipseServiceRequest(std::shared_ptr<CLConnectionMessage>)", "%s\n", v25);
    if (v26 != buf)
      free(v26);
  }
  v47 = CMErrorMessage;
  v48 = &off_10221D190;
  *(_QWORD *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v48, &v47, 1);
  sub_1012669C4(a1, buf);
LABEL_40:

}

void sub_1012664E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;

  _Unwind_Resume(a1);
}

void sub_101266554(uint64_t a1, CLConnectionMessage **a2)
{
  id v4;
  void *Dictionary;
  uint64_t v6;
  id v7;
  unsigned int v8;
  NSObject *v9;
  uint64_t v10;
  CLConnectionMessage *v11;
  NSObject *v12;
  CLConnectionMessage *v13;
  const char *v14;
  uint8_t *v15;
  const char *v16;
  uint8_t *v17;
  uint64_t v18;
  NSNumber *v19;
  uint64_t v20;
  _UNKNOWN **v21;
  _DWORD v22[4];
  uint8_t buf[4];
  unsigned int v24;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  sub_1001A638C(a1);
  Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
  v6 = CMViewObstructedStateEnable;
  if (objc_msgSend(Dictionary, "objectForKey:", CMViewObstructedStateEnable)
    && (v7 = objc_msgSend(Dictionary, "objectForKeyedSubscript:", v6)) != 0)
  {
    v8 = objc_msgSend(v7, "BOOLValue");
    if (objc_msgSend(Dictionary, "objectForKey:", v6))
    {
      if (qword_10229FC60 != -1)
        dispatch_once(&qword_10229FC60, &stru_1021AB190);
      v9 = qword_10229FC68;
      if (os_log_type_enabled((os_log_t)qword_10229FC68, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67240192;
        v24 = v8;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Incoming view obstructed service request: %{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC60 != -1)
          dispatch_once(&qword_10229FC60, &stru_1021AB190);
        v22[0] = 67240192;
        v22[1] = v8;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC68, 1, "Incoming view obstructed service request: %{public}d", v22, 8);
        v17 = (uint8_t *)v16;
        sub_100512490("Generic", 1, 0, 2, "void CLEclipseSubscription::handleMessageViewObstructedDebugRequest(std::shared_ptr<CLConnectionMessage>)", "%s\n", v16);
        if (v17 != buf)
          free(v17);
      }
    }
    if (sub_100D90530())
    {
      if (objc_msgSend(Dictionary, "objectForKey:", v6))
      {
        v10 = sub_100D90530();
        if ((sub_100D914CC(v10, v8) & 1) == 0)
        {
          v11 = *a2;
          v18 = CMErrorMessage;
          v19 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", 108);
          +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v19, &v18, 1);
          CLConnectionMessage::sendReply(v11);
        }
      }
      sub_1001A638C(a1);
    }
    else
    {
      v13 = *a2;
      v20 = CMErrorMessage;
      v21 = &off_10221D1A8;
      +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v21, &v20, 1);
      CLConnectionMessage::sendReply(v13);
    }
  }
  else
  {
    if (qword_10229FC60 != -1)
      dispatch_once(&qword_10229FC60, &stru_1021AB190);
    v12 = qword_10229FC68;
    if (os_log_type_enabled((os_log_t)qword_10229FC68, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "Invalid parameters!", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC60 != -1)
        dispatch_once(&qword_10229FC60, &stru_1021AB190);
      LOWORD(v22[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC68, 17, "Invalid parameters!", v22, 2);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 0, "void CLEclipseSubscription::handleMessageViewObstructedDebugRequest(std::shared_ptr<CLConnectionMessage>)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
  }

}

void sub_101266984(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1012669C4(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_1004E6BA4(&off_1021AB240, a2, &v6);
  sub_10011A678(a1, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_101266A58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101266A6C(id a1)
{
  qword_10229FC68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Eclipse");
}

__n128 sub_101266A98(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_1021AB1C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_101266AD4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1021AB1C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_101266AF8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_101266B48(a1 + 8, a2, a3);
}

uint64_t sub_101266B00(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101266B3C()
{
}

void sub_101266B48(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  void (*v5)(_QWORD *, uint64_t *);
  uint64_t v6;
  _QWORD *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v4 = *a3;
  v3 = (std::__shared_weak_count *)a3[1];
  v15 = v3;
  *a3 = 0;
  a3[1] = 0;
  v5 = *(void (**)(_QWORD *, uint64_t *))a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(void (**)(_QWORD *, uint64_t *))(*v7 + v5);
  v16 = v4;
  v17 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v5(v7, &v16);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_101266C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100261F44((uint64_t)&a11);
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_101266C38(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 56 * a3;
    do
    {
      sub_101266CB0(a1, a2, (__int128 *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_101266C9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E6A98(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_101266CB0(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_10025A024(a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((sub_10025A4CC(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  sub_101266F30(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_10012E444(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_1004E69F0((uint64_t)v25, 0);
  return i;
}

void sub_101266F18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004E69F0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_101266F30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = sub_101266FA4(v8 + 2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_101266F8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E69F0(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_101266FA4(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_100270E34((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_101266FFC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101267018()
{
  uint64_t result;

  result = sub_1000A42B0();
  if ((_DWORD)result)
    operator new();
  return result;
}

void sub_101267080()
{
  operator delete();
}

uint64_t sub_1012670A4()
{
  if (qword_10230DA58 != -1)
    dispatch_once(&qword_10230DA58, &stru_1021AB248);
  return qword_102313B80;
}

void sub_1012670EC(_QWORD *a1)
{
  sub_101221A60(a1);
  operator delete();
}

double sub_101267110(uint64_t a1, int a2, double *a3)
{
  NSObject *v4;
  double v5;
  const char *v6;
  uint8_t *v7;
  NSObject *v10;
  uint64_t v11;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  int v16;
  uint64_t v17;
  uint8_t buf[4];
  uint64_t v19;

  if (a2)
  {
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_1021AB2D0);
    v4 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      LODWORD(v19) = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "[AccessoryAccelerometer] Unrecognized update interval notification %{public}d", buf, 8u);
    }
    v5 = 0.0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_1021AB2D0);
      v16 = 67240192;
      LODWORD(v17) = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 17, "[AccessoryAccelerometer] Unrecognized update interval notification %{public}d", &v16, 8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "virtual CFTimeInterval CLAccessoryAccelerometer::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  else
  {
    sub_101221BDC(a1);
    if (*a3 > 0.0)
    {
      (*(void (**)(double))(**(_QWORD **)(a1 + 32) + 16))(*a3);
      (*(void (**)(void))(**(_QWORD **)(a1 + 32) + 16))();
      *(_BYTE *)(a1 + 30) = 0;
    }
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_1021AB2D0);
    v10 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_INFO))
    {
      v11 = *(_QWORD *)a3;
      *(_DWORD *)buf = 134349056;
      v19 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "[AccessoryAccelerometer] Setting update interval to %{public}f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_1021AB2D0);
      v13 = *(_QWORD *)a3;
      v16 = 134349056;
      v17 = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 1, "[AccessoryAccelerometer] Setting update interval to %{public}f", &v16, 12);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "virtual CFTimeInterval CLAccessoryAccelerometer::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    sub_10006B4E0(*(_QWORD *)(a1 + 32), *a3);
    return *a3;
  }
  return v5;
}

double sub_1012674BC(uint64_t a1, int a2, double *a3)
{
  NSObject *v4;
  double v5;
  const char *v6;
  uint8_t *v7;
  NSObject *v10;
  double v11;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  int v16;
  uint64_t v17;
  uint8_t buf[4];
  double v19;

  if (a2)
  {
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_1021AB2D0);
    v4 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      LODWORD(v19) = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "[AccessoryAccelerometer] Unrecognized batch interval notification %{public}d", buf, 8u);
    }
    v5 = 0.0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_1021AB2D0);
      v16 = 67240192;
      LODWORD(v17) = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 17, "[AccessoryAccelerometer] Unrecognized batch interval notification %{public}d", &v16, 8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "virtual CFTimeInterval CLAccessoryAccelerometer::minimumBatchIntervalChanged(int, const CFTimeInterval &)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  else
  {
    sub_101221BDC(a1);
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_1021AB2D0);
    v10 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_INFO))
    {
      v11 = *a3;
      *(_DWORD *)buf = 134349056;
      v19 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "[AccessoryAccelerometer] Setting batch interval to %{public}f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_1021AB2D0);
      v13 = *(_QWORD *)a3;
      v16 = 134349056;
      v17 = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 1, "[AccessoryAccelerometer] Setting batch interval to %{public}f", &v16, 12);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "virtual CFTimeInterval CLAccessoryAccelerometer::minimumBatchIntervalChanged(int, const CFTimeInterval &)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    sub_10006BC9C(*(_QWORD *)(a1 + 32), *a3);
    return *a3;
  }
  return v5;
}

void sub_1012677E4(uint64_t a1, uint64_t a2)
{
  __IOHIDServiceClient *v3;
  uint64_t v4;
  char *v5;
  NSObject *v6;
  void **v7;
  void **v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  void **v12;
  void **v13;
  const char *v14;
  uint8_t *v15;
  _DWORD v16[2];
  __int16 v17;
  void **v18;
  __int16 v19;
  void **v20;
  _OWORD v21[3];
  uint8_t buf[4];
  int v23;
  __int16 v24;
  void **v25;
  __int16 v26;
  void **v27;
  int v28;
  void *v29[2];
  char v30;
  void *v31[2];
  char v32;
  _BYTE v33[96];

  sub_10012AC18(a1, 0, a2, 40);
  if (!*(_BYTE *)(a1 + 30))
  {
    *(_BYTE *)(a1 + 30) = 1;
    v28 = 0;
    sub_1015A2E04(v29, "N/A");
    sub_1015A2E04(v31, "N/A");
    memset(v33, 0, 93);
    if (sub_101221D6C(a1, &v28))
    {
      memset(v21, 0, 44);
      v3 = (__IOHIDServiceClient *)sub_100A0A3A0(*(_QWORD *)(a1 + 32));
      if (sub_1013B5818(v21, v3, CFSTR("ARSC"), (id)0x2C))
      {
        v4 = 0;
        v5 = &v33[4];
        do
        {
          snprintf(v5, 0x2CuLL, "%02x", *((unsigned __int8 *)v21 + v4++));
          v5 += 2;
        }
        while (v4 != 44);
      }
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_1021AB2D0);
      v6 = qword_10229FD88;
      if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEBUG))
      {
        if (v30 >= 0)
          v7 = v29;
        else
          v7 = (void **)v29[0];
        if (v32 >= 0)
          v8 = v31;
        else
          v8 = (void **)v31[0];
        *(_DWORD *)buf = 67240707;
        v23 = v28;
        v24 = 2081;
        v25 = v7;
        v26 = 2081;
        v27 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "[AccessoryAccelerometer] config,side,%{public}d,configuration,%{private}s,serialNumber,%{private}s", buf, 0x1Cu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD80 != -1)
          dispatch_once(&qword_10229FD80, &stru_1021AB2D0);
        if (v30 >= 0)
          v12 = v29;
        else
          v12 = (void **)v29[0];
        if (v32 >= 0)
          v13 = v31;
        else
          v13 = (void **)v31[0];
        v16[0] = 67240707;
        v16[1] = v28;
        v17 = 2081;
        v18 = v12;
        v19 = 2081;
        v20 = v13;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 2, "[AccessoryAccelerometer] config,side,%{public}d,configuration,%{private}s,serialNumber,%{private}s", v16, 28);
        v15 = (uint8_t *)v14;
        sub_100512490("Generic", 1, 0, 2, "void CLAccessoryAccelerometer::onAccelerometerData(const Sample &)", "%s\n", v14);
        if (v15 != buf)
          free(v15);
      }
      sub_10012AC18(a1, 1, (uint64_t)&v28, 152);
    }
    else
    {
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_1021AB2D0);
      v9 = qword_10229FD88;
      if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "[AccessoryAccelerometer] Service not found!", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD80 != -1)
          dispatch_once(&qword_10229FD80, &stru_1021AB2D0);
        LOWORD(v21[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 17, "[AccessoryAccelerometer] Service not found!", v21, 2);
        v11 = (uint8_t *)v10;
        sub_100512490("Generic", 1, 0, 0, "void CLAccessoryAccelerometer::onAccelerometerData(const Sample &)", "%s\n", v10);
        if (v11 != buf)
          free(v11);
      }
    }
    if (v32 < 0)
      operator delete(v31[0]);
    if (v30 < 0)
      operator delete(v29[0]);
  }
}

void sub_101267C70(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1007217D0(v1 - 240);
  _Unwind_Resume(a1);
}

void sub_101267CB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  float FloatValue;
  float v10;
  float v11;
  unint64_t TimeStamp;
  double v13;
  unsigned __int16 IntegerValue;
  uint64_t v15;
  NSObject *v16;
  const char *v17;
  uint8_t *v18;
  double v19;
  float v20;
  float v21;
  float v22;
  uint64_t v23;
  unsigned __int16 v24;
  _DWORD v25[2];
  __int16 v26;
  double v27;
  __int16 v28;
  double v29;
  __int16 v30;
  double v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  double v35;
  uint8_t buf[4];
  int v37;
  __int16 v38;
  double v39;
  __int16 v40;
  double v41;
  __int16 v42;
  double v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  double v47;

  if (IOHIDEventGetType(a4) == 13)
  {
    if (IOHIDEventGetIntegerValue(a4, 851971) == 1)
    {
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_1021AB2D0);
      v6 = qword_10229FD88;
      if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "[AccessoryAccelerometer] Received shake data, discarding.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD80 != -1)
          dispatch_once(&qword_10229FD80, &stru_1021AB2D0);
        LOWORD(v25[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 2, "[AccessoryAccelerometer] Received shake data, discarding.", v25, 2);
        v8 = (uint8_t *)v7;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLAccessoryAccelerometer::onEventData(void *, void *, IOHIDEventRef)", "%s\n", v7);
        if (v8 != buf)
          free(v8);
      }
    }
    else
    {
      FloatValue = IOHIDEventGetFloatValue(a4, 851968);
      v20 = FloatValue;
      v10 = IOHIDEventGetFloatValue(a4, 851969);
      v21 = v10;
      v11 = IOHIDEventGetFloatValue(a4, 851970);
      v22 = v11;
      TimeStamp = IOHIDEventGetTimeStamp(a4);
      v13 = sub_100127828(TimeStamp);
      v19 = v13;
      IntegerValue = IOHIDEventGetIntegerValue(a4, 851973);
      v24 = IntegerValue;
      v15 = sub_1013B4A0C();
      v23 = v15;
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_1021AB2D0);
      v16 = qword_10229FD88;
      if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67241472;
        v37 = IntegerValue;
        v38 = 2050;
        v39 = FloatValue;
        v40 = 2050;
        v41 = v10;
        v42 = 2050;
        v43 = v11;
        v44 = 2050;
        v45 = v15;
        v46 = 2050;
        v47 = v13;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "[AccessoryAccelerometer] seq,%{public}d,x,%{public}20.20f,y,%{public}20.20f,z,%{public}20.20f,sensorTime,%{public}llu,timestamp,%{public}20.20f", buf, 0x3Au);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD80 != -1)
          dispatch_once(&qword_10229FD80, &stru_1021AB2D0);
        v25[0] = 67241472;
        v25[1] = IntegerValue;
        v26 = 2050;
        v27 = FloatValue;
        v28 = 2050;
        v29 = v10;
        v30 = 2050;
        v31 = v11;
        v32 = 2050;
        v33 = v15;
        v34 = 2050;
        v35 = v13;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 2, "[AccessoryAccelerometer] seq,%{public}d,x,%{public}20.20f,y,%{public}20.20f,z,%{public}20.20f,sensorTime,%{public}llu,timestamp,%{public}20.20f", v25, 58);
        v18 = (uint8_t *)v17;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLAccessoryAccelerometer::onEventData(void *, void *, IOHIDEventRef)", "%s\n", v17);
        if (v18 != buf)
          free(v18);
      }
      sub_1012677E4(a1, (uint64_t)&v19);
    }
  }
}

void sub_1012680D0(id a1)
{
  qword_10229FD88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Accessory");
}

uint64_t sub_1012680FC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = sub_101476A58((_QWORD *)a1, a2);
  *v5 = off_1021AB300;
  *(_OWORD *)(v5 + 11) = 0u;
  *(_OWORD *)(v5 + 13) = 0u;
  *(_OWORD *)(v5 + 15) = 0u;
  *(_QWORD *)(a1 + 144) = 0x4334000042820000;
  *(_QWORD *)(a1 + 152) = 0xFFEFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 136) = 0x7FF8000000000000;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  sub_100349198(v5 + 15, a3);
  return a1;
}

uint64_t sub_101268194()
{
  return 1;
}

uint64_t sub_10126819C(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  v17 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(&v18, v4, a1);
  sub_100349198((_QWORD *)(a1 + 88), &v18);
  v8 = v19;
  if (v19)
  {
    v9 = (unint64_t *)&v19->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v13 = *a2;
  v14 = a2[1];
  v15 = a2[2];
  *(_OWORD *)(a1 + 68) = *(__int128 *)((char *)a2 + 44);
  *(_OWORD *)(a1 + 56) = v15;
  *(_OWORD *)(a1 + 40) = v14;
  *(_OWORD *)(a1 + 24) = v13;
  return 1;
}

void sub_1012682A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1012682B4(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 88);
  if (v1)
    sub_100E49BB4(v1);
  return 1;
}

double sub_1012682D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  double v4;
  float v6;
  double v8;
  double v9;
  NSObject *v10;
  NSObject *v12;
  double v13;
  double v14;
  int v15;
  double v16;
  double v17;
  double v18;
  double v19;
  int v20;
  double v21;
  double v22;
  int v23;
  double v24;
  double v25;
  double v26;
  double v27;
  int v28;
  const char *v29;
  uint8_t *v30;
  const char *v31;
  uint8_t *v32;
  double v33;
  int v34;
  double v35;
  __int16 v36;
  double v37;
  __int16 v38;
  double v39;
  __int16 v40;
  int v41;
  __int16 v42;
  double v43;
  __int16 v44;
  double v45;
  __int16 v46;
  double v47;
  __int16 v48;
  double v49;
  __int16 v50;
  double v51;
  __int16 v52;
  int v53;
  __int16 v54;
  double v55;
  uint8_t buf[4];
  double v57;
  __int16 v58;
  double v59;
  __int16 v60;
  double v61;
  __int16 v62;
  int v63;
  __int16 v64;
  double v65;
  __int16 v66;
  double v67;
  __int16 v68;
  double v69;
  __int16 v70;
  double v71;
  __int16 v72;
  double v73;
  __int16 v74;
  int v75;
  __int16 v76;
  double v77;

  v3 = *(_DWORD *)(a3 + 4);
  if ((v3 - 1) >= 2)
    v4 = 1.5;
  else
    v4 = (double)v3;
  if (*(_BYTE *)(a3 + 58) && *(_BYTE *)(a3 + 57) && *(_BYTE *)(a3 + 56) && (v6 = *(float *)(a3 + 8), v6 > 1.0))
  {
    v8 = (float)(*(float *)(a3 + 12) / (float)(v6 * v6));
    if (*(_BYTE *)(a2 + 16))
      v9 = (float)((float)(*(float *)(a3 + 20) * 0.001) + 5.34)
         + v8 * 0.00800000038
         + v4 * 0.850000024
         + (float)(*(float *)(a2 + 8) * 0.107)
         + (float)(*(float *)a2 * -9.33)
         + (float)(*(float *)(a2 + 4) * 1.52)
         + (float)(*(float *)(a2 + 12) * -0.032);
    else
      v9 = NAN;
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_1021AB360);
    v12 = qword_10229FF98;
    if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEFAULT))
    {
      v13 = *(float *)(a3 + 20);
      v14 = *(float *)(a3 + 12);
      v15 = *(_DWORD *)(a3 + 4);
      v16 = *(float *)(a2 + 8);
      v17 = *(float *)a2;
      v18 = *(float *)(a2 + 4);
      v19 = *(float *)(a2 + 12);
      v20 = *(unsigned __int8 *)(a2 + 16);
      *(_DWORD *)buf = 134220544;
      v57 = v13;
      v58 = 2048;
      v59 = v14;
      v60 = 2048;
      v61 = v8;
      v62 = 1024;
      v63 = v15;
      v64 = 2048;
      v65 = v16;
      v66 = 2048;
      v67 = v17;
      v68 = 2048;
      v69 = v18;
      v70 = 2048;
      v71 = v19;
      v72 = 2048;
      v73 = v9;
      v74 = 1024;
      v75 = v20;
      v76 = 2048;
      v77 = v4;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "age,%f,weight,%f,bmi,%f,biologicalSex,%d,maxMets,%f,oneMinusFhr,%f,cyclingPowerMets,%f,efficiency,%f,estimatedVo2max,%f,shouldEstimate,%d,biologicalSexCoefficient,%f", buf, 0x68u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF90 != -1)
        dispatch_once(&qword_10229FF90, &stru_1021AB360);
      v21 = *(float *)(a3 + 20);
      v22 = *(float *)(a3 + 12);
      v23 = *(_DWORD *)(a3 + 4);
      v24 = *(float *)(a2 + 8);
      v25 = *(float *)a2;
      v26 = *(float *)(a2 + 4);
      v27 = *(float *)(a2 + 12);
      v28 = *(unsigned __int8 *)(a2 + 16);
      v34 = 134220544;
      v35 = v21;
      v36 = 2048;
      v37 = v22;
      v38 = 2048;
      v39 = v8;
      v40 = 1024;
      v41 = v23;
      v42 = 2048;
      v43 = v24;
      v44 = 2048;
      v45 = v25;
      v46 = 2048;
      v47 = v26;
      v48 = 2048;
      v49 = v27;
      v50 = 2048;
      v51 = v9;
      v52 = 1024;
      v53 = v28;
      v54 = 2048;
      v55 = v4;
      LODWORD(v33) = 104;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 0, "age,%f,weight,%f,bmi,%f,biologicalSex,%d,maxMets,%f,oneMinusFhr,%f,cyclingPowerMets,%f,efficiency,%f,estimatedVo2max,%f,shouldEstimate,%d,biologicalSexCoefficient,%f", COERCE_DOUBLE(&v34), v33);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "double CLCyclingVO2MaxModel::estimateCyclingVO2Max(CLCyclingVO2MaxModel::ModelInputs, CLBodyMetrics) const", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
  }
  else
  {
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_1021AB360);
    v10 = qword_10229FF98;
    if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Not estimating Cycling VO2Max as User height, weight or age not set", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF90 != -1)
        dispatch_once(&qword_10229FF90, &stru_1021AB360);
      LOWORD(v34) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 1, "Not estimating Cycling VO2Max as User height, weight or age not set", &v34, 2);
      v32 = (uint8_t *)v31;
      sub_100512490("Generic", 1, 0, 2, "double CLCyclingVO2MaxModel::estimateCyclingVO2Max(CLCyclingVO2MaxModel::ModelInputs, CLBodyMetrics) const", "%s\n", v31);
      if (v32 != buf)
        free(v32);
    }
    return NAN;
  }
  return v9;
}

float sub_1012687D0(double a1, uint64_t a2, _QWORD *a3)
{
  float v3;
  int v4;
  double *v5;
  uint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  NSObject *v13;
  const char *v14;
  uint8_t *v15;
  NSObject *v16;
  const char *v18;
  void *__p;
  void *v20;
  uint64_t v21;
  int v22;
  double v23;
  __int16 v24;
  int v25;
  uint8_t buf[4];
  double v27;
  __int16 v28;
  int v29;

  if (a1 > 0.0)
  {
    __p = 0;
    v20 = 0;
    v21 = 0;
    v3 = 4.5841;
    if (!*a3)
      goto LABEL_17;
    v4 = (*(uint64_t (**)(_QWORD, void **, double))(*(_QWORD *)*a3 + 8))(*a3, &__p, a1 + -2419200.0);
    if (v4 != 100)
    {
      if (qword_10229FF90 != -1)
        dispatch_once(&qword_10229FF90, &stru_1021AB360);
      v16 = qword_10229FF98;
      if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v27) = v4;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "Maxmets DB inaccesible %d", buf, 8u);
      }
      v3 = 4.5841;
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_31;
      bzero(buf, 0x65CuLL);
      if (qword_10229FF90 != -1)
        dispatch_once(&qword_10229FF90, &stru_1021AB360);
      v22 = 67109120;
      LODWORD(v23) = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 17, "Maxmets DB inaccesible %d", &v22);
      v15 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 0, "float CLCyclingVO2MaxModel::getMeanMaxMets(std::shared_ptr<CLMaxMetsRecorderForCycling>, CFAbsoluteTime)", "%s\n", v18);
      goto LABEL_37;
    }
    v5 = (double *)__p;
    if (__p == v20)
    {
LABEL_17:
      LODWORD(v9) = 0;
    }
    else
    {
      v6 = 0;
      v7 = 0.0;
      do
      {
        v8 = v5[3];
        v7 = v7 + v8;
        v5 += 4;
        --v6;
      }
      while (v5 != v20);
      v9 = -v6;
      v3 = v7 / (float)(unint64_t)-v6;
    }
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_1021AB360);
    v13 = qword_10229FF98;
    if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218240;
      v27 = v3;
      v28 = 1024;
      v29 = v9;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "meanMaxMets,%f,numOfRecords,%d", buf, 0x12u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_31;
    bzero(buf, 0x65CuLL);
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_1021AB360);
    v22 = 134218240;
    v23 = v3;
    v24 = 1024;
    v25 = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 0, "meanMaxMets,%f,numOfRecords,%d", COERCE_DOUBLE(&v22), 18);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "float CLCyclingVO2MaxModel::getMeanMaxMets(std::shared_ptr<CLMaxMetsRecorderForCycling>, CFAbsoluteTime)", "%s\n", v14);
LABEL_37:
    if (v15 != buf)
      free(v15);
LABEL_31:
    if (__p)
    {
      v20 = __p;
      operator delete(__p);
    }
    return v3;
  }
  if (qword_10229FF90 != -1)
    dispatch_once(&qword_10229FF90, &stru_1021AB360);
  v10 = qword_10229FF98;
  if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Maxmets DB query time range is invalid (queryEndTime <= 0)", buf, 2u);
  }
  v3 = 4.5841;
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_1021AB360);
    LOWORD(__p) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 17, "Maxmets DB query time range is invalid (queryEndTime <= 0)", &__p, 2);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 0, "float CLCyclingVO2MaxModel::getMeanMaxMets(std::shared_ptr<CLMaxMetsRecorderForCycling>, CFAbsoluteTime)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  return v3;
}

void sub_101268CB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101268CE4(uint64_t a1)
{
  *(_DWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  return 1;
}

uint64_t sub_101268D08(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  double v8;
  double v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v18;
  const char *v19;
  uint8_t *v20;
  int v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  uint8_t buf[4];
  uint64_t v26;
  __int16 v27;
  int v28;

  *(float32x2_t *)(a1 + 144) = vcvt_f32_f64(*(float64x2_t *)(a2 + 64));
  v3 = *(uint64_t **)(a2 + 48);
  v4 = *v3;
  v5 = v3[1];
  if (*v3 == v5)
  {
    v7 = 0;
  }
  else
  {
    v7 = 0;
    v8 = *(double *)(v4 + 8);
    ++*(_DWORD *)(a1 + 160);
    *(double *)(a1 + 152) = v8;
    do
    {
      if (sub_101311158(*(_QWORD *)(a2 + 32)) && *(double *)(v4 + 8) - v8 < 2700.0)
      {
        if (*(_BYTE *)(a1 + 82))
        {
          ++v7;
          v9 = sub_101311068(*(float *)(v4 + 32), *(float *)(a1 + 36));
          v10 = *(float *)(v4 + 32);
          if (v10 > 0.0 && v10 <= 1500.0)
          {
            v11 = v9;
            if (v11 > 3.0 && v11 < 20.0)
            {
              v12 = *(float *)(v4 + 16);
              if (v12 > 0.0 && *(float *)(v4 + 20) > 0.39)
              {
                v13 = (*(float *)(a1 + 148) - v12) / (*(float *)(a1 + 148) - *(float *)(a1 + 144));
                v14 = 1.0 - v13;
                if (v14 > 0.4 && v14 < 1.2 && (float)(v11 / v14) < 20.0)
                {
                  *(float *)(a1 + 168) = *(float *)(a1 + 168) + v11;
                  ++*(_QWORD *)(a1 + 176);
                  *(float *)(a1 + 184) = v14 + *(float *)(a1 + 184);
                  ++*(_QWORD *)(a1 + 192);
                  *(float *)(a1 + 200) = (float)(v11 / v14) + *(float *)(a1 + 200);
                  ++*(_QWORD *)(a1 + 208);
                }
              }
            }
          }
        }
      }
      v4 += 64;
    }
    while (v4 != v5);
  }
  if (qword_10229FF90 != -1)
    dispatch_once(&qword_10229FF90, &stru_1021AB360);
  v15 = qword_10229FF98;
  if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEFAULT))
  {
    v16 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 8) - **(_QWORD **)(a2 + 48)) >> 6;
    *(_DWORD *)buf = 134218240;
    v26 = v16;
    v27 = 1024;
    v28 = v7;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "CLCyclingVO2MaxModel::processSession, out of %zu samples, %d samples are eligible for processing.", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_1021AB360);
    v18 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 8) - **(_QWORD **)(a2 + 48)) >> 6;
    v21 = 134218240;
    v22 = v18;
    v23 = 1024;
    v24 = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 0, "CLCyclingVO2MaxModel::processSession, out of %zu samples, %d samples are eligible for processing.", (size_t)&v21, 18);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLCyclingVO2MaxModel::processSession(const CLCyclingFTPHistory::Session &)", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  return 1;
}

void sub_101269098(uint64_t a1, _OWORD *a2, _QWORD *a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  float v8;
  unint64_t *v9;
  unint64_t v10;
  BOOL v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  float v18;
  float v19;
  unint64_t v20;
  unint64_t v21;
  float v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint8_t *v28;
  _OWORD v29[2];
  _BYTE v30[28];
  _DWORD v31[4];
  BOOL v32;
  _QWORD v33[2];
  int v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  int v41;
  uint8_t buf[4];
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  int v49;

  v5 = (std::__shared_weak_count *)a3[1];
  v33[0] = *a3;
  v33[1] = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = sub_1012687D0(*(double *)(a1 + 152), a1, v33);
  if (v5)
  {
    v9 = (unint64_t *)&v5->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v11 = *(_QWORD *)(a1 + 176) >= 0x65uLL && *(_QWORD *)(a1 + 192) >= 0x65uLL && *(_QWORD *)(a1 + 208) > 0x64uLL;
  if (qword_10229FF90 != -1)
    dispatch_once(&qword_10229FF90, &stru_1021AB360);
  v12 = qword_10229FF98;
  if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEFAULT))
  {
    v13 = *(_QWORD *)(a1 + 176);
    v14 = *(_QWORD *)(a1 + 192);
    v15 = *(_QWORD *)(a1 + 208);
    *(_DWORD *)buf = 134218752;
    v43 = v13;
    v44 = 2048;
    v45 = v14;
    v46 = 2048;
    v47 = v15;
    v48 = 1024;
    v49 = 100;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "fCyclingPowerMetsMean.numberOfSamples, %zu, fOneMinusFhrMean.numberOfSamples, %zu, fEfficiencyMean.numberOfSamples, %zu, minimum required number of valid samples to estimate Vo2max, %d", buf, 0x26u);
  }
  v16 = sub_1001BFF7C(115, 2);
  if ((_DWORD)v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_1021AB360);
    v24 = *(_QWORD *)(a1 + 176);
    v25 = *(_QWORD *)(a1 + 192);
    v26 = *(_QWORD *)(a1 + 208);
    v34 = 134218752;
    v35 = v24;
    v36 = 2048;
    v37 = v25;
    v38 = 2048;
    v39 = v26;
    v40 = 1024;
    v41 = 100;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 0, "fCyclingPowerMetsMean.numberOfSamples, %zu, fOneMinusFhrMean.numberOfSamples, %zu, fEfficiencyMean.numberOfSamples, %zu, minimum required number of valid samples to estimate Vo2max, %d", (size_t)&v34, 38, *(size_t *)&v29[0], DWORD2(v29[0]));
    v28 = (uint8_t *)v27;
    v16 = sub_100512490("Generic", 1, 0, 2, "const double CLCyclingVO2MaxModel::getVO2MaxEstimate(CLBodyMetrics, std::shared_ptr<CLMaxMetsRecorderForCycling>)", "%s\n", v27);
    if (v28 != buf)
      free(v28);
  }
  v17 = *(_QWORD *)(a1 + 192);
  v18 = 0.0;
  v19 = 0.0;
  if (v17)
    v19 = *(float *)(a1 + 184) / (float)v17;
  v20 = *(_QWORD *)(a1 + 176);
  if (v20)
    v18 = *(float *)(a1 + 168) / (float)v20;
  v21 = *(_QWORD *)(a1 + 208);
  if (v21)
    v22 = *(float *)(a1 + 200) / (float)v21;
  else
    v22 = 0.0;
  *(float *)v31 = v19;
  *(float *)&v31[1] = v18;
  *(float *)&v31[2] = v8;
  *(float *)&v31[3] = v22;
  v32 = v11;
  v23 = a2[1];
  v29[0] = *a2;
  v29[1] = v23;
  *(_OWORD *)v30 = a2[2];
  *(_OWORD *)&v30[12] = *(_OWORD *)((char *)a2 + 44);
  sub_1012682D4(v16, (uint64_t)v31, (uint64_t)v29);
}

void sub_1012693C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1012693E0(uint64_t a1)
{
  __int128 v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v10[2];
  _OWORD v11[2];
  _OWORD v12[2];

  v2 = *(_OWORD *)(a1 + 40);
  v11[0] = *(_OWORD *)(a1 + 24);
  v11[1] = v2;
  v12[0] = *(_OWORD *)(a1 + 56);
  *(_OWORD *)((char *)v12 + 12) = *(_OWORD *)(a1 + 68);
  v3 = *(std::__shared_weak_count **)(a1 + 128);
  v10[0] = *(_QWORD *)(a1 + 120);
  v10[1] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  sub_101269098(a1, v11, v10);
  *(_QWORD *)(a1 + 136) = v6;
  if (v3)
  {
    v7 = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return 1;
}

void sub_10126948C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double sub_1012694A0(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 208);
  if (v1)
    return (float)(*(float *)(a1 + 200) / (float)v1);
  else
    return 0.0;
}

double sub_1012694C4(uint64_t a1)
{
  return *(double *)(a1 + 136);
}

uint64_t sub_1012694CC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 160);
}

void sub_1012694D8(_QWORD *a1)
{
  sub_101269528(a1);
  operator delete();
}

void sub_1012694FC(id a1)
{
  qword_10229FF98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "CyclingPower");
}

_QWORD *sub_101269528(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1021AB300;
  v2 = (uint64_t)(a1 + 11);
  sub_100261F44((uint64_t)(a1 + 15));
  sub_100261F44((uint64_t)(a1 + 13));
  sub_100261F44(v2);
  *a1 = off_102184AD0;
  sub_100261F44((uint64_t)(a1 + 1));
  return a1;
}

void sub_10126962C(id a1)
{
  qword_10230DA60 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLSpringTrackingNotifierSilo"));
}

uint64_t sub_1012696E0(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10126A6BC;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_10230DA80 != -1)
    dispatch_once(&qword_10230DA80, block);
  return qword_102313B88;
}

uint64_t sub_101269874(uint64_t a1)
{
  void *v2;
  CMActivityAlarmLocal *v3;
  double v4;
  id v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  _QWORD v12[5];
  int v13;
  uint64_t v14;
  uint8_t buf[4];
  uint64_t v16;

  if (!+[CMActivityAlarmLocal activityAlarmAvailable](CMActivityAlarmLocal, "activityAlarmAvailable"))
    return 109;
  v2 = *(void **)(a1 + 208);
  if (v2)
  {
    objc_msgSend(v2, "invalidate");

    *(_QWORD *)(a1 + 208) = 0;
  }
  v3 = [CMActivityAlarmLocal alloc];
  v4 = *(double *)(a1 + 192);
  v5 = objc_msgSend(*(id *)(a1 + 40), "queue");
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10126AB7C;
  v12[3] = &unk_102142BD0;
  v12[4] = a1;
  *(_QWORD *)(a1 + 208) = -[CMActivityAlarmLocal initWithTrigger:duration:onQueue:withHandler:](v3, "initWithTrigger:duration:onQueue:withHandler:", 14, v5, v12, v4);
  if (qword_1022A0010 != -1)
    dispatch_once(&qword_1022A0010, &stru_1021AB510);
  v6 = qword_1022A0018;
  if (os_log_type_enabled((os_log_t)qword_1022A0018, OS_LOG_TYPE_INFO))
  {
    v7 = *(_QWORD *)(a1 + 192);
    *(_DWORD *)buf = 134217984;
    v16 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Started tracking,duration,%.3f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0010 != -1)
      dispatch_once(&qword_1022A0010, &stru_1021AB510);
    v9 = *(_QWORD *)(a1 + 192);
    v13 = 134217984;
    v14 = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0018, 1, "Started tracking,duration,%.3f", COERCE_DOUBLE(&v13));
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "CMError CLSpringTrackingNotifier::startTracking()", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  return 100;
}

uint64_t sub_101269AE0(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  v2 = *(void **)(a1 + 208);
  if (v2)
  {
    objc_msgSend(v2, "invalidate");

    *(_QWORD *)(a1 + 208) = 0;
  }
  if (qword_1022A0010 != -1)
    dispatch_once(&qword_1022A0010, &stru_1021AB510);
  v3 = qword_1022A0018;
  if (os_log_type_enabled((os_log_t)qword_1022A0018, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Stopped tracking", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0010 != -1)
      dispatch_once(&qword_1022A0010, &stru_1021AB510);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0018, 1, "Stopped tracking", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "CMError CLSpringTrackingNotifier::stopTracking()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  return 100;
}

void sub_101269DAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101269DD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return sub_10126EF20(*(uint64_t **)(a1 + 120), a2, (uint64_t)a3);
}

void sub_101269E04(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_101269E60(id a1)
{
  sub_100197040();
  if (sub_100195F08())
    byte_10230DA70 = 1;
}

void sub_101269E88(uint64_t a1, void *a2)
{
  uint64_t v3;

  v3 = sub_10126A120(a1, "CLSpringTrackingNotifier", a2);
  *(_QWORD *)v3 = off_1021AB3D0;
  *(_QWORD *)(a1 + 112) = objc_msgSend(*(id *)(v3 + 40), "newTimer");
  operator new();
}

void sub_10126A09C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = *(_QWORD *)(v1 + 216);
  *(_QWORD *)(v1 + 216) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  sub_10041D328(v3);
  sub_100261F44(v2);
  sub_10126A648(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10126A120(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_1021AB540;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_10126A1A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_10126A1BC(void **a1, double a2)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  int v22;
  double v23;
  uint8_t buf[4];
  double v25;

  if (a2 >= 0.0)
  {
    v9 = a1[2];
    v7 = (uint64_t)(a1 + 2);
    v8 = v9;
    v10 = *(_QWORD *)(v7 - 8);
    if (v10 >= (unint64_t)v9)
    {
      v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)*a1) >> 3);
      v13 = v12 + 1;
      if (v12 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_100259694();
      v14 = 0xAAAAAAAAAAAAAAABLL * ((v8 - (_BYTE *)*a1) >> 3);
      if (2 * v14 > v13)
        v13 = 2 * v14;
      if (v14 >= 0x555555555555555)
        v15 = 0xAAAAAAAAAAAAAAALL;
      else
        v15 = v13;
      if (v15)
        v16 = (char *)sub_1002596A8(v7, v15);
      else
        v16 = 0;
      v17 = &v16[24 * v12];
      v18 = &v16[24 * v15];
      *(double *)v17 = a2;
      *((_QWORD *)v17 + 1) = 0x7FEFFFFFFFFFFFFFLL;
      v17[16] = 0;
      v11 = v17 + 24;
      v20 = (char *)*a1;
      v19 = (char *)a1[1];
      if (v19 != *a1)
      {
        do
        {
          v21 = *(_OWORD *)(v19 - 24);
          *(v17 - 8) = *(v19 - 8);
          *(_OWORD *)(v17 - 24) = v21;
          v17 -= 24;
          v19 -= 24;
        }
        while (v19 != v20);
        v19 = (char *)*a1;
      }
      *a1 = v17;
      a1[1] = v11;
      a1[2] = v18;
      if (v19)
        operator delete(v19);
    }
    else
    {
      *(double *)v10 = a2;
      *(_QWORD *)(v10 + 8) = 0x7FEFFFFFFFFFFFFFLL;
      *(_BYTE *)(v10 + 16) = 0;
      v11 = (char *)(v10 + 24);
    }
    a1[1] = v11;
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AB6A8);
    v3 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134349056;
      v25 = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Programmer error, this expiration rule with time %{public}fis not valid.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AB6A8);
      v22 = 134349056;
      v23 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Programmer error, this expiration rule with time %{public}fis not valid.", &v22, 12);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 0, "void CLActivityAggregator<CLSpringTrackerEntry>::setExpirationRule(CFTimeInterval) [T = CLSpringTrackerEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
}

void sub_10126A470(uint64_t a1, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLSpringTrackingNotifier::onDataProtectionNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021AB4F0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSpringTrackingNotifier::onDataProtectionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021AB4F0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSpringTrackingNotifier::onDataProtectionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10126AC70(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10126A628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10126A648(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021AB540;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_10126A6BC()
{
  operator new();
}

void sub_10126A704()
{
  operator delete();
}

uint64_t sub_10126A728(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10126A79C;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_10230DA90 != -1)
    dispatch_once(&qword_10230DA90, block);
  return byte_10230DA88;
}

id sub_10126A79C(uint64_t a1)
{
  id result;

  result = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "isServiceEnabled:", CFSTR("CLSpringTrackingNotifier"));
  byte_10230DA88 = (char)result;
  return result;
}

uint64_t sub_10126A7C8(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1021AB3D0;

  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v2 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 216) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_10041D328(a1 + 136);
  sub_100261F44(a1 + 120);
  return sub_10126A648(a1);
}

void sub_10126A84C(uint64_t a1)
{
  sub_10126A7C8(a1);
  operator delete();
}

uint64_t sub_10126A870(uint64_t result)
{
  *(_BYTE *)(result + 108) = 1;
  return result;
}

void sub_10126A87C(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  void *__p;
  void *v4;
  char *v5;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (char *)operator new(0x18uLL);
  v4 = v2 + 24;
  v5 = v2 + 24;
  v2[16] = 0;
  *(_OWORD *)v2 = xmmword_101C48850;
  __p = v2;
  (*(void (**)(_QWORD, void **))(**(_QWORD **)(v1 + 120) + 32))(*(_QWORD *)(v1 + 120), &__p);
  if (__p)
  {
    v4 = __p;
    operator delete(__p);
  }
}

void sub_10126A8EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10126A908(uint64_t a1, uint64_t *a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __CFNotificationCenter *DarwinNotifyCenter;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  double v13;
  int v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint8_t buf[4];
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;

  if (qword_1022A0010 != -1)
    dispatch_once(&qword_1022A0010, &stru_1021AB510);
  v3 = qword_1022A0018;
  if (os_log_type_enabled((os_log_t)qword_1022A0018, OS_LOG_TYPE_INFO))
  {
    v4 = *a2;
    v5 = a2[5];
    v6 = a2[6];
    *(_DWORD *)buf = 134218496;
    v21 = v4;
    v22 = 2048;
    v23 = v5;
    v24 = 2048;
    v25 = v6;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "id,%llu,startTime,%lf,eventType,%ld", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0010 != -1)
      dispatch_once(&qword_1022A0010, &stru_1021AB510);
    v8 = *a2;
    v9 = a2[5];
    v10 = a2[6];
    v14 = 134218496;
    v15 = v8;
    v16 = 2048;
    v17 = v9;
    v18 = 2048;
    v19 = v10;
    LODWORD(v13) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0018, 1, "id,%llu,startTime,%lf,eventType,%ld", &v14, v13);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLSpringTrackingNotifier::setUpdateFinishedHandler()_block_invoke", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("com.apple.locationd.lorievent"), 0, 0, 0);
}

_QWORD *sub_10126AB04@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1015A2E04(a2, __str);
}

void sub_10126AB7C(uint64_t a1, void *a2)
{
  uint64_t v2;
  void *v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  CFAbsoluteTime Current;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 32);
  if (objc_msgSend(a2, "trigger") == 14)
  {
    v6 = 0;
    v4 = 0u;
    v5 = 0u;
    Current = CFAbsoluteTimeGetCurrent();
    v8 = 0;
    sub_10126AC1C(v2 + 136, (uint64_t)&v4);
    v3 = *(void **)(v2 + 208);
    if (v3)
    {
      objc_msgSend(v3, "invalidate", v4, v5, v6);

      *(_QWORD *)(v2 + 208) = 0;
    }
  }
}

uint64_t sub_10126AC1C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_10126C940(*(_QWORD *)(a1 + 24), a2);
  if (!*(_BYTE *)(a1 + 41))
  {
    result = sub_10008950C(*(_QWORD *)(a1 + 24) + 72);
    if ((_DWORD)result)
    {
      *(_BYTE *)(a1 + 41) = 1;
      return sub_10126CD30(a1);
    }
  }
  return result;
}

void sub_10126AC70(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  BOOL v4;
  void *v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  CFAbsoluteTime Current;
  uint64_t v11;

  if (*a3)
    v4 = 0;
  else
    v4 = *a4 == 1;
  if (v4 && *(_QWORD *)(a1 + 208))
  {
    v9 = 0;
    v7 = 0u;
    v8 = 0u;
    Current = CFAbsoluteTimeGetCurrent();
    v11 = 0;
    sub_10126AC1C(a1 + 136, (uint64_t)&v7);
    v6 = *(void **)(a1 + 208);
    if (v6)
    {
      objc_msgSend(v6, "invalidate", v7, v8, v9);

      *(_QWORD *)(a1 + 208) = 0;
    }
  }
}

void sub_10126AD1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021AB4F0);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_1021AB4F0);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData>::removeClient(int) [Notification_T = CLSpringTrackingNotifier_Type::Notification, NotificationData_T = CLSpringTrackingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

uint64_t sub_10126AF90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022FE270);
}

uint64_t sub_10126AFA4(uint64_t a1, int a2, int *a3, char *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t *v29;
  char v30;
  uint64_t **v31;
  char v32;
  uint64_t **v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  const char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _BYTE v42[12];
  __int16 v43;
  int v44;
  _OWORD buf[3];
  uint64_t v46;

  v41 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(_QWORD *)v42 = v10;
      v17 = *a3;
      v20 = *(_QWORD *)(v10 + 48);
      v19 = v10 + 48;
      v18 = v20;
      if (!v20)
        goto LABEL_31;
      v21 = v19;
      do
      {
        v22 = *(_DWORD *)(v18 + 28);
        v23 = v22 < v17;
        if (v22 >= v17)
          v24 = (uint64_t *)v18;
        else
          v24 = (uint64_t *)(v18 + 8);
        if (!v23)
          v21 = v18;
        v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28))
LABEL_31:
        v21 = v19;
      v25 = *(_QWORD *)(a1 + 64);
      if (!v25)
        goto LABEL_42;
      v26 = a1 + 64;
      do
      {
        v27 = *(_DWORD *)(v25 + 32);
        v28 = v27 < v17;
        if (v27 >= v17)
          v29 = (uint64_t *)v25;
        else
          v29 = (uint64_t *)(v25 + 8);
        if (!v28)
          v26 = v25;
        v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        v40 = v26;
        v34 = *(_QWORD *)(v26 + 56);
        v35 = *a4;
        *(_QWORD *)&buf[0] = &v41;
        *((_BYTE *)sub_1001AFE94((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v35;
        v46 = 0;
        memset(buf, 0, sizeof(buf));
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _OWORD *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_10126D89C();
        }
        if (v34)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        v40 = a1 + 64;
        v30 = byte_1022FE271;
        HIDWORD(v39) = v17;
        *(_QWORD *)&buf[0] = (char *)&v39 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v30;
        HIDWORD(v39) = *a3;
        *(_QWORD *)&buf[0] = (char *)&v39 + 4;
        v31 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v31 + 8);
        v32 = *a4;
        HIDWORD(v39) = *a3;
        *(_QWORD *)&buf[0] = (char *)&v39 + 4;
        v33 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)&buf[0] = &v41;
        *((_BYTE *)sub_1001AFE94(v33 + 5, &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v32;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        LODWORD(buf[0]) = *a3;
        sub_1000C6190((uint64_t **)(*(_QWORD *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021AB4F0);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    LODWORD(buf[0]) = 136446466;
    *(_QWORD *)((char *)buf + 4) = v15;
    WORD6(buf[0]) = 1026;
    *(_DWORD *)((char *)buf + 14) = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      (uint8_t *)buf,
      0x12u);
  }
  v16 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021AB4F0);
    v36 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v36 = (_QWORD *)*v36;
    *(_DWORD *)v42 = 136446466;
    *(_QWORD *)&v42[4] = v36;
    v43 = 1026;
    v44 = a2;
    LODWORD(v39) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
      v42,
      v39);
    v38 = (char *)v37;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLSpringTrackingNotifier_Type::Notification, NotificationData_T = CLSpringTrackingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v37);
    if (v38 != (char *)buf)
      free(v38);
    return 0;
  }
  return result;
}

BOOL sub_10126B40C(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021AB4F0);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021AB4F0);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLSpringTrackingNotifier_Type::Notification, NotificationData_T = CLSpringTrackingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

BOOL sub_10126B68C(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE buf[12];
  __int16 v36;
  void **v37;
  char v38;
  int v39;
  _QWORD *v40;
  __int16 v41;
  _BYTE *v42;
  void *__p[2];
  char v44;

  HIDWORD(v34) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009E904((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021AB4F0);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v44 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v36 = 2082;
                v37 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_1021AB4F0);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v38 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v39 = 136446466;
                v40 = v29;
                v41 = 2082;
                v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                v33 = v32;
                if (v38 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLSpringTrackingNotifier_Type::Notification, NotificationData_T = CLSpringTrackingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v33);
                if (v33 != (char *)__p)
                  free(v33);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_10126BA14(uint64_t a1, int *a2, uint64_t a3)
{
  char *v6;
  __int128 v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  int v13;
  __int128 v14;
  int *v15;

  v6 = (char *)operator new(0x50uLL);
  v7 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v6 + 24) = *(_OWORD *)a3;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = off_1021AB6F8;
  *((_QWORD *)v6 + 1) = 0;
  *(_OWORD *)(v6 + 40) = v7;
  *(_OWORD *)(v6 + 56) = *(_OWORD *)(a3 + 32);
  *((_QWORD *)v6 + 9) = *(_QWORD *)(a3 + 48);
  *(_QWORD *)&v14 = v6 + 24;
  *((_QWORD *)&v14 + 1) = v6;
  v13 = *a2;
  v15 = &v13;
  v8 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v13, (uint64_t)&unk_101B9EB60, &v15);
  sub_1002B7674((uint64_t)(v8 + 8), &v14);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return 1;
}

void sub_10126BAFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10126BB10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _OWORD v5[3];
  uint64_t v6;

  v6 = 0;
  memset(v5, 0, sizeof(v5));
  return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, a2, v5, a3, a4, 0);
}

void sub_10126BB80(uint64_t a1, signed __int32 *a2, uint64_t a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  char *v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  os_activity_scope_state_s state;
  uint8_t buf[8];
  _BYTE v31[20];
  __int16 v32;
  _QWORD *v33;
  __int16 v34;
  std::__shared_weak_count *v35;
  _QWORD **v36;
  _QWORD *v37[3];
  std::__shared_weak_count *v38;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021AB4F0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v31 = 2082;
      *(_QWORD *)&v31[2] = "";
      *(_WORD *)&v31[10] = 2082;
      *(_QWORD *)&v31[12] = "activity";
      v32 = 2082;
      v33 = v10;
      v34 = 2050;
      v35 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v36 = v37;
      memset(v37, 0, sizeof(v37));
      v38 = 0;
      sub_1004A6D60((uint64_t)buf, a2, (uint64_t)&v36);
      v14 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)buf);
      v18 = v35;
      if (v35)
      {
        p_shared_owners = (unint64_t *)&v35->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v31, *(_QWORD **)&v31[8]);
      v21 = v38;
      if (v38)
      {
        v22 = (unint64_t *)&v38->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v36, v37[0]);
    }
    if (a4)
    {
      v24 = (char *)operator new(0x50uLL);
      v25 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(v24 + 24) = *(_OWORD *)a3;
      *((_QWORD *)v24 + 2) = 0;
      *(_QWORD *)v24 = off_1021AB6F8;
      *((_QWORD *)v24 + 1) = 0;
      *(_OWORD *)(v24 + 40) = v25;
      *(_OWORD *)(v24 + 56) = *(_OWORD *)(a3 + 32);
      *((_QWORD *)v24 + 9) = *(_QWORD *)(a3 + 48);
      *(_QWORD *)buf = v24 + 24;
      *(_QWORD *)v31 = v24;
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)buf);
      v26 = *(std::__shared_weak_count **)v31;
      if (*(_QWORD *)v31)
      {
        v27 = (unint64_t *)(*(_QWORD *)v31 + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_10126DF00();
    os_activity_scope_leave(&state);
  }
}

void sub_10126C1CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_10126C218(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021AB4F0);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021AB4F0);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData>::listClients() [Notification_T = CLSpringTrackingNotifier_Type::Notification, NotificationData_T = CLSpringTrackingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021AB4F0);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021AB4F0);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData>::listClients() [Notification_T = CLSpringTrackingNotifier_Type::Notification, NotificationData_T = CLSpringTrackingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_1021AB4F0);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021AB4F0);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData>::listClients() [Notification_T = CLSpringTrackingNotifier_Type::Notification, NotificationData_T = CLSpringTrackingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_10126C7C0(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_10126C7EC(id a1)
{
  qword_1022A0018 = (uint64_t)os_log_create("com.apple.locationd.Position", "Spring");
}

void sub_10126C818(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_10126C870(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10126C890(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t sub_10126C8A8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_10126C8E8(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_10126C914(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_10126C940(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  NSObject *v8;
  _QWORD *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  NSObject *v14;
  const char *v16;
  uint8_t *v17;
  _WORD v18[8];
  double v19[3];
  __int16 v20;
  uint8_t buf[4];
  int v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  _QWORD *v28;

  v5 = a1 + 112;
  v4 = *(_QWORD *)(a1 + 112);
  v6 = a1 + 72;
  *(_QWORD *)&v19[1] = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  v20 = 256;
  v19[0] = *(double *)(a2 + 40);
  if (sub_100013184(v6, v19))
  {
    if (sub_10008950C(v6))
    {
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(a1, a2, 0);
    }
    else if (!*(_BYTE *)(a1 + 128))
    {
      v12 = (_QWORD *)(a1 + 176);
      v13 = *(_QWORD *)(a1 + 216);
      if (v13 > *(int *)(a1 + 280))
      {
        ++*(_QWORD *)(a1 + 208);
        *(_QWORD *)(a1 + 216) = v13 - 1;
        sub_100AAFEC0(a1 + 176, 1);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021AB688);
        v14 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Maximum number of entries exceeded, throwing out oldest entry.", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_1021AB688);
          v18[0] = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "Maximum number of entries exceeded, throwing out oldest entry.", v18, 2);
          v17 = (uint8_t *)v16;
          sub_100512490("Generic", 1, 0, 2, "void CLActivityRecorderDb<CLSpringTrackerEntry>::addSuspectRecord(const T &) [T = CLSpringTrackerEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v16);
          if (v17 != buf)
            free(v17);
        }
      }
      v7 = sub_10126D2A4(v12, a2);
    }
  }
  else
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021AB688);
    v8 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_ERROR))
    {
      v9 = (_QWORD *)(a1 + 88);
      if (*(char *)(a1 + 111) < 0)
        v9 = (_QWORD *)*v9;
      *(_DWORD *)buf = 68289538;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 1026;
      v26 = (int)v19[0];
      v27 = 2082;
      v28 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CL database error, record contains invalid time\", \"invalid time\":%{public}d, \"name\":%{public, location:escape_only}s}", buf, 0x22u);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021AB688);
    }
    v10 = qword_10229FC78;
    if (os_signpost_enabled((os_log_t)qword_10229FC78))
    {
      v11 = (_QWORD *)(a1 + 88);
      if (*(char *)(a1 + 111) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 68289538;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 1026;
      v26 = (int)v19[0];
      v27 = 2082;
      v28 = v11;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CL database error, record contains invalid time", "{\"msg%{public}.0s\":\"CL database error, record contains invalid time\", \"invalid time\":%{public}d, \"name\":%{public, location:escape_only}s}", buf, 0x22u);
    }
  }
  return (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v5 + 24))(v5, v7);
}

void sub_10126CD08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10126CD30(uint64_t a1)
{
  NSObject *v2;
  double v3;
  int v4;
  uint64_t v5;
  NSObject *v6;
  double v7;
  int v8;
  uint64_t v9;
  double v10;
  NSObject *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v16;
  double v17;
  int v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  double v22;
  int v23;
  const char *v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  const char *v30;
  uint8_t *v31;
  int v32;
  _BYTE v33[10];
  int v34;
  uint8_t buf[4];
  _BYTE v36[10];
  int v37;

  if (!*(_BYTE *)(a1 + 40))
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), a1);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021AB6A8);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v3 = sub_100078B88();
    v4 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    *(_DWORD *)buf = 134218240;
    *(double *)v36 = v3;
    *(_WORD *)&v36[8] = 1024;
    v37 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Aggregating records start %f, count ~%d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AB6A8);
    v16 = qword_1022A02D8;
    v17 = sub_100078B88();
    v18 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    v32 = 134218240;
    *(double *)v33 = v17;
    *(_WORD *)&v33[8] = 1024;
    v34 = v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 2, "Aggregating records start %f, count ~%d", COERCE_DOUBLE(&v32), 18);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "long CLActivityAggregator<CLSpringTrackerEntry>::aggregateRecords() [T = CLSpringTrackerEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), a1);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021AB6A8);
  v6 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v7 = sub_100078B88();
    v8 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    *(_DWORD *)buf = 134218240;
    *(double *)v36 = v7;
    *(_WORD *)&v36[8] = 1024;
    v37 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Aggregating records stop %f, count ~%d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AB6A8);
    v21 = qword_1022A02D8;
    v22 = sub_100078B88();
    v23 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    v32 = 134218240;
    *(double *)v33 = v22;
    *(_WORD *)&v33[8] = 1024;
    v34 = v23;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v21, 2, "Aggregating records stop %f, count ~%d", COERCE_DOUBLE(&v32), 18);
    v25 = (uint8_t *)v24;
    sub_100512490("Generic", 1, 0, 2, "long CLActivityAggregator<CLSpringTrackerEntry>::aggregateRecords() [T = CLSpringTrackerEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v24);
    if (v25 != buf)
      free(v25);
  }
  v9 = *(_QWORD *)(a1 + 24);
  v10 = (double)*(int *)(v9 + 132);
  if ((double)(int)sub_10126D674(v9, (double **)a1) * 1.2 < v10)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AB6A8);
    v11 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *(_QWORD *)(a1 + 24);
      v13 = *(_DWORD *)(v12 + 132);
      v14 = sub_10126D674(v12, (double **)a1);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)v36 = v13;
      *(_WORD *)&v36[4] = 1024;
      *(_DWORD *)&v36[6] = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AB6A8);
      v26 = qword_1022A02D8;
      v27 = *(_QWORD *)(a1 + 24);
      v28 = *(_DWORD *)(v27 + 132);
      v29 = sub_10126D674(v27, (double **)a1);
      v32 = 67109376;
      *(_DWORD *)v33 = v28;
      *(_WORD *)&v33[4] = 1024;
      *(_DWORD *)&v33[6] = v29;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 0, "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d", &v32, 14);
      v31 = (uint8_t *)v30;
      sub_100512490("Generic", 1, 0, 2, "long CLActivityAggregator<CLSpringTrackerEntry>::aggregateRecords() [T = CLSpringTrackerEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v30);
      if (v31 != buf)
        free(v31);
    }
  }
  return v5;
}

__n128 sub_10126D2A4(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 73 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10126D360(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x49)) + 56 * (v7 % 0x49);
  result = *(__n128 *)a2;
  v10 = *(_OWORD *)(a2 + 16);
  v11 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v8 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(v8 + 16) = v10;
  *(_OWORD *)(v8 + 32) = v11;
  *(__n128 *)v8 = result;
  ++a1[5];
  return result;
}

void sub_10126D360(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x49;
  v4 = v2 - 73;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF8uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF8uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF8uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_10126D628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_10126D674(uint64_t a1, double **a2)
{
  double *v2;
  double *v3;
  double v4;
  double v5;
  double *v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  NSObject *v11;
  const char *v13;
  uint8_t *v14;
  _WORD v15[8];
  uint8_t buf[1640];

  v3 = *a2;
  v2 = a2[1];
  v4 = (*a2)[1];
  v5 = *(float *)(a1 + 136);
  if (v4 <= v5)
    v4 = *(float *)(a1 + 136);
  v6 = v3 + 3;
  if (v3 + 3 == v2)
  {
    v7 = 0;
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = *v3;
    do
    {
      v9 = *v6;
      v10 = v6[1];
      v6 += 3;
      v7 = (v7 + (int)((v9 - v8) / v4));
      if (v10 <= v5)
        v4 = *(float *)(a1 + 136);
      else
        v4 = v10;
      v8 = v9;
    }
    while (v6 != v2);
  }
  if (v4 != 1.79769313e308)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021AB688);
    v11 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning No expiration rule was added so the number of records will be unbounded.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021AB688);
      v15[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Warning No expiration rule was added so the number of records will be unbounded.", v15, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "int CLActivityRecorderDb<CLSpringTrackerEntry>::estimateRecordsNeeded(const CLAggregationRules &) [T = CLSpringTrackerEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
  return v7;
}

void sub_10126D870(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_10126D89C()
{
  operator new();
}

_BYTE *sub_10126D93C(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t **v13;
  uint64_t v14;
  int *v15;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v14) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    sub_10126DA38(a4, a2);
    v10 = v9;
    v11 = *(_QWORD *)a3 + 80;
    v12 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v15 = (int *)(*(_QWORD *)a2 + 32);
    v13 = sub_1001AFE94(v12, v15, (uint64_t)&unk_101B9EB60, &v15);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v14, v10, v11, v13 + 4);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v14);
  }
  return result;
}

uint64_t sub_10126DA18(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

void sub_10126DA38(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = objc_opt_class(CLCppEncodableDataContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
  {
    sub_10126DAB0(a1);
  }
  else
  {
    v5 = objc_opt_class(CLCppContainer, v4);
    if ((objc_opt_isKindOfClass(a1, v5) & 1) != 0)
      sub_10126DC68(a1);
  }
}

void sub_10126DAB0(void *a1)
{
  id v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  char v7;
  uint8_t buf[4];
  id v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  unint64_t v13;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
  {
    sub_10126DE3C((uint64_t)&v7, a1);
    return;
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021AB6C8);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v9 = v2;
      v10 = 2048;
      v11 = 0;
      v12 = 2080;
      v13 = 0x8000000101C48A0FLL & 0x7FFFFFFFFFFFFFFFLL;
      v4 = v3;
      v5 = OS_LOG_TYPE_ERROR;
LABEL_12:
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021AB6C8);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v9 = v2;
      v10 = 2048;
      v11 = 0;
      v12 = 2080;
      v13 = 0x8000000101C48A0FLL & 0x7FFFFFFFFFFFFFFFLL;
      v4 = v6;
      v5 = OS_LOG_TYPE_FAULT;
      goto LABEL_12;
    }
  }
}

id sub_10126DC68(void *a1)
{
  id v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v7;
  int v8;
  id v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  unint64_t v13;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021AB6C8);
    v3 = qword_10229FC38;
    if (!os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
      return 0;
    v8 = 134218498;
    v9 = v2;
    v10 = 2048;
    v11 = 0;
    v12 = 2080;
    v13 = 0x8000000101C48A0FLL & 0x7FFFFFFFFFFFFFFFLL;
    v4 = v3;
    v5 = OS_LOG_TYPE_ERROR;
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021AB6C8);
    v7 = qword_10229FC38;
    if (!os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
      return 0;
    v8 = 134218498;
    v9 = v2;
    v10 = 2048;
    v11 = 0;
    v12 = 2080;
    v13 = 0x8000000101C48A0FLL & 0x7FFFFFFFFFFFFFFFLL;
    v4 = v7;
    v5 = OS_LOG_TYPE_FAULT;
  }
  _os_log_impl((void *)&_mh_execute_header, v4, v5, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", (uint8_t *)&v8, 0x20u);
  return 0;
}

void sub_10126DE3C(uint64_t a1, void *a2)
{
  std::__shared_weak_count *v3;

  if (objc_msgSend(a2, "cppObjectPtr")
    || !objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_10221D208))
  {
    goto LABEL_5;
  }
  if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") == (id)56)
  {
    objc_msgSend(a2, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a2, "serialized"), "bytes"));
LABEL_5:
    objc_msgSend(a2, "cppObjectPtr");
    return;
  }
  v3 = (std::__shared_weak_count *)sub_101948D64();
  sub_10126DEB0(v3);
}

void sub_10126DEB0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021AB6F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10126DEC4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021AB6F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_10126DF00()
{
  operator new();
}

void sub_10126DFA0(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  const char *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  __int16 v54;
  int v55;
  uint8_t buf[4];
  _QWORD *v57;
  __int16 v58;
  int v59;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v51 = v9;
        sub_10126DA38(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, uint64_t, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 7);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v50 = v19;
              sub_10126D93C(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v51 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 28);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 28);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v50 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021AB4F0);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                v57 = v25;
                v58 = 1026;
                v59 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_1021AB4F0);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 7);
                v52 = 136446466;
                v53 = v45;
                v54 = 1026;
                v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                v48 = (uint8_t *)v47;
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLSpringTrackingNotifier_Type::Notification, NotificationData_T = CLSpringTrackingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v48 != buf)
                  free(v48);
              }
            }
          }
          while (v14 != v51 + 6);
        }
      }
    }
  }
}

uint64_t sub_10126E374(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

_QWORD *sub_10126E394(_QWORD *a1, int a2)
{
  void *__p[2];
  char v6;

  sub_1015A2E04(__p, "");
  sub_10126E44C((uint64_t)a1, "SleepHistory", a2, (uint64_t)__p, 1, 30.0);
  if (v6 < 0)
    operator delete(__p[0]);
  *a1 = off_1021AB748;
  a1[9] = off_1021AB800;
  a1[45] = 0;
  a1[46] = 0;
  sub_10126F800((uint64_t)a1);
  return a1;
}

void sub_10126E420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;

  sub_10126E8A0(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_10126E44C(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  _QWORD *v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v16;
  uint64_t v17;
  __int16 v18;

  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v12 = (_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = off_10213DEB0;
  sub_10042776C((_QWORD *)(a1 + 8));
  *v12 = &off_10213DEF8;
  *(_QWORD *)a1 = off_1021AB9A0;
  *(_QWORD *)(a1 + 72) = off_1021ABA48;
  sub_101137D40(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(_QWORD *)a1 = off_1021AB9A0;
  *(_QWORD *)(a1 + 72) = off_1021ABA48;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 280) = 12000;
  *(_QWORD *)(a1 + 288) = off_10213DEB0;
  sub_10042776C((_QWORD *)(a1 + 296));
  *(_QWORD *)(a1 + 296) = &off_10213DEF8;
  v13 = *(_QWORD *)(a1 + 112);
  v17 = a1 + 112;
  (*(void (**)(void))(v13 + 16))();
  v18 = 256;
  if (!a3)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_100115CE4(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a4;
      v16 = *(_QWORD *)(a4 + 16);
    }
    sub_1011384BC(a1 + 72);
  }
  *(_QWORD *)(a1 + 264) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  return a1;
}

void sub_10126E7F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;

  sub_10187E514((uint64_t)&a19);
  v24[36] = off_10213DEB0;
  sub_100427950(v27);
  sub_1005CBF30(v26);
  sub_101138068(a12);
  *v24 = off_10213DEB0;
  sub_100427950(v25);
  _Unwind_Resume(a1);
}

void sub_10126E898()
{
  JUMPOUT(0x10126E878);
}

_QWORD *sub_10126E8A0(_QWORD *a1)
{
  uint64_t v2;

  a1[9] = off_1021ABA48;
  v2 = (uint64_t)(a1 + 9);
  *a1 = off_1021AB9A0;
  a1[36] = off_10213DEB0;
  sub_100427950(a1 + 37);
  sub_1005CBF30(a1 + 22);
  sub_101138068(v2);
  *a1 = off_10213DEB0;
  sub_100427950(a1 + 1);
  return a1;
}

_QWORD *sub_10126E920(uint64_t a1)
{
  return sub_10126E8A0((_QWORD *)(a1 - 72));
}

void sub_10126E928(_QWORD *a1)
{
  sub_10126E8A0(a1);
  operator delete();
}

void sub_10126E94C(uint64_t a1)
{
  sub_10126E8A0((_QWORD *)(a1 - 72));
  operator delete();
}

uint64_t sub_10126E974(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if (*(double *)(*(_QWORD *)(a2 + 8) - 16) == 1.79769313e308)
  {
    if (sub_10008950C(a1 + 72))
    {
      sub_10001E638(*(_QWORD *)(a1 + 80));
      CFAbsoluteTimeGetCurrent();
      sub_1000CDA68(*(_QWORD *)(a1 + 80), "DELETE FROM SleepHistory WHERE startTime < ?");
    }
  }
  else
  {
    if (qword_1022A0010 != -1)
      dispatch_once(&qword_1022A0010, &stru_1021AB8B0);
    v3 = qword_1022A0018;
    if (os_log_type_enabled((os_log_t)qword_1022A0018, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Error expiring records.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0010 != -1)
        dispatch_once(&qword_1022A0010, &stru_1021AB8B0);
      v7[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0018, 17, "Error expiring records.", v7, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "virtual long CLSpringTrackerRecorderDb::aggregateRecords(const CLAggregationRules &)", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  return -1;
}

void sub_10126EBE8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_10126EC10(uint64_t a1, uint64_t a2)
{
  return sub_10126E974(a1 - 72, a2);
}

uint64_t sub_10126EC18(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * from SleepHistory ORDER BY id ASC");
  return result;
}

void sub_10126EE58(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10126EE88(uint64_t *a1, uint64_t a2)
{
  sqlite3_stmt *v4;
  int v5;
  sqlite3_stmt *v6;
  sqlite3_stmt *v7;
  sqlite3_stmt *v8;
  int v9;
  uint64_t result;

  v4 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v5 = sqlite3_step(v4);
  if (v5 == 101)
    return 1;
  if (v5 != 100)
    return 2;
  v6 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_QWORD *)a2 = sqlite3_column_int(v6, 0);
  v7 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 40) = sqlite3_column_double(v7, 1);
  v8 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v9 = sqlite3_column_int(v8, 2);
  result = 0;
  *(_QWORD *)(a2 + 48) = v9;
  return result;
}

uint64_t sub_10126EF20(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  uint8_t *v13;
  const char *v14;
  uint8_t *v15;
  __int128 v16;
  unsigned __int8 uu1[8];
  uint64_t v18;
  _QWORD v19[8];
  uint8_t buf[1640];

  if ((sub_10008950C(a1 + 9) & 1) != 0)
  {
    if (sub_100219C4C(a1[10]))
    {
      *(_QWORD *)uu1 = 0;
      v18 = 0;
      sub_100681850((uint64_t)a1, uu1);
      if (!uuid_is_null((const unsigned __int8 *)(a2 + 8))
        && !uuid_compare(uu1, (const unsigned __int8 *)(a2 + 8))
        && ((*(unsigned int (**)(uint64_t *, _QWORD *))(*a1 + 104))(a1, v19) || v19[0] >= *(_QWORD *)a2))
      {
        sub_1000CDA68(a1[10], "SELECT * FROM SleepHistory WHERE id >= ? ORDER BY id ASC");
      }
      if (qword_1022A0010 != -1)
        dispatch_once(&qword_1022A0010, &stru_1021AB8B0);
      v6 = qword_1022A0018;
      if (os_log_type_enabled((os_log_t)qword_1022A0018, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Non-existent query record, returning all records.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0010 != -1)
          dispatch_once(&qword_1022A0010, &stru_1021AB8B0);
        LOWORD(v16) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0018, 16, "Non-existent query record, returning all records.", &v16, 2);
        v13 = (uint8_t *)v12;
        sub_100512490("Generic", 1, 0, 0, "CMError CLSpringTrackerRecorderDb::querySince(const CLSpringTrackerEntry &, std::vector<CLSpringTrackerEntry> &) const", "%s\n", v12);
        if (v13 != buf)
          free(v13);
      }
      (*(void (**)(uint64_t *, uint64_t))(*a1 + 40))(a1, a3);
      return 100;
    }
    else
    {
      if (qword_1022A0010 != -1)
        dispatch_once(&qword_1022A0010, &stru_1021AB8B0);
      v9 = qword_1022A0018;
      if (os_log_type_enabled((os_log_t)qword_1022A0018, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "DB UUID un-initialized", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0010 != -1)
          dispatch_once(&qword_1022A0010, &stru_1021AB8B0);
        LOWORD(v19[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0018, 17, "DB UUID un-initialized", v19, 2);
        v15 = (uint8_t *)v14;
        sub_100512490("Generic", 1, 0, 0, "CMError CLSpringTrackerRecorderDb::querySince(const CLSpringTrackerEntry &, std::vector<CLSpringTrackerEntry> &) const", "%s\n", v14);
        if (v15 != buf)
          free(v15);
      }
      return 103;
    }
  }
  else
  {
    if (qword_1022A0010 != -1)
      dispatch_once(&qword_1022A0010, &stru_1021AB8B0);
    v8 = qword_1022A0018;
    if (os_log_type_enabled((os_log_t)qword_1022A0018, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "History not accessible", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0010 != -1)
        dispatch_once(&qword_1022A0010, &stru_1021AB8B0);
      LOWORD(v19[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0018, 2, "History not accessible", v19, 2);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "CMError CLSpringTrackerRecorderDb::querySince(const CLSpringTrackerEntry &, std::vector<CLSpringTrackerEntry> &) const", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    return 109;
  }
}

void sub_10126F6A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10126F6D8(uint64_t a1)
{
  if (sub_10008950C(a1 + 72))
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT COUNT(*) FROM SleepHistory");
  return 0xFFFFFFFFLL;
}

void sub_10126F778(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10126F79C(uint64_t a1)
{
  return sub_10126F6D8(a1 - 72);
}

void *sub_10126F7A4(uint64_t a1, uint64_t a2, const void *a3)
{
  const void *v6;
  void *result;
  uint64_t v8;

  if (a2 && a3)
  {

    *(_QWORD *)(a1 + 360) = a2;
    v6 = *(const void **)(a1 + 368);
    if (v6)
      _Block_release(v6);
    result = _Block_copy(a3);
    *(_QWORD *)(a1 + 368) = result;
  }
  else
  {
    v8 = sub_101948ED8();
    return (void *)sub_10126F800(v8);
  }
  return result;
}

uint64_t sub_10126F800(uint64_t a1)
{
  uint64_t result;

  result = sub_1000CC4F4(*(_QWORD *)(a1 + 80));
  if ((_DWORD)result)
    return sub_100634364(*(_QWORD *)(a1 + 80), "SleepHistory", (const char **)&off_1021AB8D0, (const std::string::value_type **)off_1022FE278, 0);
  return result;
}

uint64_t sub_10126F854(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "DELETE FROM SleepHistory");
  return result;
}

void sub_10126F8E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10126F908(uint64_t a1)
{
  return sub_10126F854(a1 - 72);
}

uint64_t sub_10126F910(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_1000CDA68(a1[10], "DELETE FROM SleepHistory WHERE startTime > ?");
  }
  return result;
}

void sub_10126F9D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10126F9F8(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "UPDATE SleepHistory SET startTime = startTime + ?");
  return result;
}

void sub_10126FA90(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10126FAB0(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "INSERT INTO SleepHistory (startTime, eventType) VALUES (?, ?)");
  return result;
}

void sub_10126FC30(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10126FC5C(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  _OWORD v4[3];
  uint64_t v5;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 368);
  v2 = *(_OWORD *)(a1 + 72);
  v4[1] = *(_OWORD *)(a1 + 56);
  v4[2] = v2;
  v5 = *(_QWORD *)(a1 + 88);
  v4[0] = *(_OWORD *)(a1 + 40);
  return (*(uint64_t (**)(uint64_t, _OWORD *))(v1 + 16))(v1, v4);
}

uint64_t sub_10126FCD4()
{
  return 0;
}

uint64_t sub_10126FCDC(uint64_t a1)
{
  if (sub_10008950C(a1 + 72))
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * FROM SleepHistory ORDER BY startTime DESC LIMIT 1");
  return 2;
}

void sub_10126FDB0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10126FDDC(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void *v9;
  void *v11[2];
  uint64_t v12;
  _QWORD v13[8];
  void *v14[2];
  unsigned __int8 v15;

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v11);
  if ((SHIBYTE(v12) & 0x80000000) == 0)
  {
    if (HIBYTE(v12))
      goto LABEL_3;
LABEL_18:
    sub_101949060(v2);
    __break(1u);
  }
  v9 = v11[1];
  operator delete(v11[0]);
  if (!v9)
    goto LABEL_18;
LABEL_3:
  if (sub_10008950C(a1 + 9))
  {
    sub_100263E50((uint64_t)v11);
    v3 = sub_100263F7C(&v12, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(v14, a1);
    if ((v15 & 0x80u) == 0)
      v4 = v14;
    else
      v4 = (void **)v14[0];
    if ((v15 & 0x80u) == 0)
      v5 = v15;
    else
      v5 = (uint64_t)v14[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
    if ((char)v15 < 0)
      operator delete(v14[0]);
    v7 = a1[10];
    std::stringbuf::str(v14, v13);
    if ((v15 & 0x80u) == 0)
      v8 = (char *)v14;
    else
      v8 = (char *)v14[0];
    sub_1000CDA68(v7, v8);
  }
  return 2;
}

void sub_101270188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  if (*(char *)(v3 - 145) < 0)
    operator delete(*(void **)(v3 - 168));
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1012701F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  _BYTE v17[14];
  __int16 v18;
  _QWORD *v19;

  v3 = *(_QWORD *)(a1 + 112);
  v2 = a1 + 112;
  v4 = v2 - 40;
  v13 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_10008950C(v4))
    sub_100427D28(a1);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_1021ABA88);
  v5 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    v6 = (_QWORD *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0)
      v6 = (_QWORD *)*v6;
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)v17 = 0;
    *(_WORD *)&v17[4] = 2082;
    *(_QWORD *)&v17[6] = "";
    v18 = 2082;
    v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(_QWORD *)(a1 + 216))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021ABA88);
    v7 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      v8 = *(_QWORD *)(a1 + 216);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021ABA88);
      v10 = *(_QWORD *)(a1 + 216);
      v14 = 134349056;
      v15 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", &v14, 12);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<CLSpringTrackerEntry>::setDatabaseAccessible() [T = CLSpringTrackerEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  return 1;
}

void sub_1012707E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_101270818(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;
  __int128 v5;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  v5 = *(_OWORD *)(a3 + 32);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  *(__n128 *)a2 = result;
  return result;
}

id *sub_101270834(uint64_t a1, __int128 *a2, char a3)
{
  int v6;
  double v7;
  double v8;
  double v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  double v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  double v17;
  double v18;
  double v19;
  NSObject *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v25;
  const char *v26;
  uint8_t *v27;
  double v28;
  const char *v29;
  uint8_t *v30;
  const char *v31;
  uint8_t *v32;
  double v33;
  id v34[2];
  int v35;
  double v36;
  __int16 v37;
  uint64_t v38;
  uint8_t buf[4];
  double v40;
  __int16 v41;
  uint64_t v42;
  _BYTE v43[40];
  double v44;

  v34[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v34[1] = 0;
  if (*(double *)(a1 + 264) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a1 + 72))(a1, a1 + 224, a2);
    return sub_100131740(v34);
  }
  if ((a3 & 1) == 0)
    sub_10001E638(*(_QWORD *)(a1 + 80));
  v6 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 104))(a1, v43);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021ABA88);
      v14 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021ABA88);
        LOWORD(v35) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "Failed to insert record due to failure from reading the most recent entry.", &v35, 2);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<CLSpringTrackerEntry>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLSpringTrackerEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
      goto LABEL_43;
    }
    v7 = *((double *)a2 + 5);
    v8 = v44;
    v9 = v7 - v44;
    if (v7 - v44 < 0.0)
      v9 = -(v7 - v44);
    if (v9 > 604800.0)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021ABA88);
      v10 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *((_QWORD *)a2 + 5);
        *(_DWORD *)buf = 134349312;
        v40 = v44;
        v41 = 2050;
        v42 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021ABA88);
        v25 = *((_QWORD *)a2 + 5);
        v35 = 134349312;
        v36 = v44;
        v37 = 2050;
        v38 = v25;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", &v35, 22);
        v27 = (uint8_t *)v26;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLSpringTrackerEntry>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLSpringTrackerEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v26);
        if (v27 != buf)
          free(v27);
      }
      CLWriteStackshot("Potential CM database inconsistency, time jump", 0);
      v7 = *((double *)a2 + 5);
      v8 = v44;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021ABA88);
        v12 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          v13 = *((double *)a2 + 5);
          *(_DWORD *)buf = 134217984;
          v40 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_1021ABA88);
          v28 = *((double *)a2 + 5);
          v35 = 134217984;
          v36 = v28;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", COERCE_DOUBLE(&v35));
          v30 = (uint8_t *)v29;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLSpringTrackerEntry>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLSpringTrackerEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v29);
          if (v30 != buf)
            free(v30);
        }
        (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      v17 = v7 - v8;
      v18 = *(float *)(a1 + 136);
      if (qword_10229FC70 != -1)
      {
        v33 = *(float *)(a1 + 136);
        dispatch_once(&qword_10229FC70, &stru_1021ABA88);
        v18 = v33;
      }
      v19 = v17 - v18;
      v20 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        v40 = v19;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021ABA88);
        v35 = 134217984;
        v36 = v19;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", COERCE_DOUBLE(&v35));
        v32 = (uint8_t *)v31;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLSpringTrackerEntry>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLSpringTrackerEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v31);
        if (v32 != buf)
          free(v32);
      }
      (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 96))(a1, v19);
    }
    (*(void (**)(uint64_t, _BYTE *, uint64_t, __int128 *))(*(_QWORD *)a1 + 144))(a1, v43, a1 + 224, a2);
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  v21 = *a2;
  v22 = a2[1];
  v23 = a2[2];
  *(_QWORD *)(a1 + 272) = *((_QWORD *)a2 + 6);
  *(_OWORD *)(a1 + 240) = v22;
  *(_OWORD *)(a1 + 256) = v23;
  *(_OWORD *)(a1 + 224) = v21;
LABEL_43:
  if ((a3 & 1) == 0)
    sub_10001E99C(*(_QWORD *)(a1 + 80));
  return sub_100131740(v34);
}

void sub_101270F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101270FAC(uint64_t a1)
{
  return sub_1012701F8(a1 - 72);
}

void sub_101270FB4(id a1)
{
  qword_1022A0018 = (uint64_t)os_log_create("com.apple.locationd.Position", "Spring");
}

uint64_t sub_101270FE0(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *v13[2];
  uint64_t v14;
  _QWORD v15[8];
  void *v16[2];
  unsigned __int8 v17;

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v13);
  if ((SHIBYTE(v14) & 0x80000000) == 0)
  {
    if (HIBYTE(v14))
      goto LABEL_3;
LABEL_18:
    sub_1019491CC(v4);
    __break(1u);
  }
  v12 = v13[1];
  operator delete(v13[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_100263E50((uint64_t)v13);
    v6 = sub_100263F7C(&v14, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(v16, a1);
    if ((v17 & 0x80u) == 0)
      v7 = v16;
    else
      v7 = (void **)v16[0];
    if ((v17 & 0x80u) == 0)
      v8 = v17;
    else
      v8 = (uint64_t)v16[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v17 < 0)
      operator delete(v16[0]);
    v10 = a1[10];
    std::stringbuf::str(v16, v15);
    if ((v17 & 0x80u) == 0)
      v11 = (char *)v16;
    else
      v11 = (char *)v16[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

void sub_101271344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1012713B4(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _Unwind_Exception *v13;
  void *__p[2];
  unsigned __int8 v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17))
      goto LABEL_3;
LABEL_18:
    v13 = (_Unwind_Exception *)sub_101949338(v4);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  v12 = v16[1];
  operator delete(v16[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_100263E50((uint64_t)v16);
    v6 = sub_100263F7C(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v15 & 0x80u) == 0)
      v8 = v15;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v18);
    if ((v15 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

uint64_t sub_101271614(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  _Unwind_Exception *v11;
  void *__p[2];
  unsigned __int8 v13;
  void *v14[2];
  uint64_t v15;
  _QWORD v16[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_1019494A4(v2);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  v10 = v14[1];
  operator delete(v14[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_100263E50((uint64_t)v14);
    v4 = sub_100263F7C(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v13 & 0x80u) == 0)
      v6 = v13;
    else
      v6 = (uint64_t)__p[1];
    v7 = sub_100263F7C(v4, (uint64_t)v5, v6);
    sub_100263F7C(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    v8 = a1[10];
    std::stringbuf::str(__p, v16);
    if ((v13 & 0x80u) == 0)
      v9 = (char *)__p;
    else
      v9 = (char *)__p[0];
    sub_1000CDA68(v8, v9);
  }
  return result;
}

uint64_t sub_10127184C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void *v10;
  _Unwind_Exception *v11;
  uint64_t v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_101949610(v2);
    if (v12)
      (*(void (**)())(*(_QWORD *)v12 + 8))();
    sub_1018B38B4((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  v10 = v15[1];
  operator delete(v15[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  if (sub_10008950C(a1 + 9))
  {
    sub_100263E50((uint64_t)v15);
    v3 = sub_100263F7C(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v5 = v14;
    else
      v5 = (uint64_t)__p[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v7 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v8 = (char *)__p;
    else
      v8 = (char *)__p[0];
    sub_1000CDA68(v7, v8);
  }
  return 2;
}

void sub_101271A74(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

BOOL sub_101271AA0(char *a1, std::string *a2)
{
  const __CFString *v3;
  const __CFString *v4;
  const __CFUUID *v5;
  const __CFString *v6;
  _BOOL8 v7;

  if (a1[23] < 0)
    a1 = *(char **)a1;
  v3 = sub_1001A48D8(a1);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = CFUUIDCreateFromString(kCFAllocatorDefault, v3);
  CFRelease(v4);
  if (!v5)
    return 0;
  v6 = CFUUIDCreateString(kCFAllocatorDefault, v5);
  CFRelease(v5);
  if (!v6)
    return 0;
  v7 = sub_1001C0048(v6, a2);
  CFRelease(v6);
  return v7;
}

BOOL sub_101271B48(char *a1, char *a2)
{
  std::string::size_type size;
  std::string::size_type v4;
  char v5;
  std::string *p_p;
  uint64_t v7;
  std::string *p_s1;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  _BOOL8 v15;
  std::string __p;
  std::string __s1;

  memset(&__s1, 0, sizeof(__s1));
  memset(&__p, 0, sizeof(__p));
  if (!sub_101271AA0(a1, &__s1))
  {
    v15 = 0;
    goto LABEL_29;
  }
  if (!sub_101271AA0(a2, &__p))
  {
    v15 = 0;
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  else
    size = __s1.__r_.__value_.__l.__size_;
  v4 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  v5 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v4 = __p.__r_.__value_.__l.__size_;
  if (size != v4)
  {
    v15 = 0;
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    v15 = memcmp(__s1.__r_.__value_.__l.__data_, p_p, __s1.__r_.__value_.__l.__size_) == 0;
    goto LABEL_27;
  }
  if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
  {
    v7 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
    p_s1 = &__s1;
    do
    {
      v10 = p_s1->__r_.__value_.__s.__data_[0];
      p_s1 = (std::string *)((char *)p_s1 + 1);
      v9 = v10;
      v12 = p_p->__r_.__value_.__s.__data_[0];
      p_p = (std::string *)((char *)p_p + 1);
      v11 = v12;
      v14 = v7-- != 0;
      v15 = v9 == v11;
    }
    while (v9 == v11 && v14);
LABEL_27:
    if ((v5 & 0x80) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  v15 = 1;
  if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_28:
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_29:
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s1.__r_.__value_.__l.__data_);
  return v15;
}

void sub_101271C6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

BOOL sub_101271C98(uint64_t *a1)
{
  id v2;
  uint64_t *v3;
  id v4;
  id v5;

  v2 = objc_alloc((Class)NSString);
  if (*((char *)a1 + 23) >= 0)
    v3 = a1;
  else
    v3 = (uint64_t *)*a1;
  v4 = objc_msgSend(v2, "initWithUTF8String:", v3);
  v5 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", v4);

  if (v5)
  return v5 != 0;
}

uint64_t sub_101271D04(uint64_t a1)
{
  return sub_101271C98((uint64_t *)(a1 + 8)) & *(_BYTE *)(a1 + 36);
}

uint64_t sub_101271D30(uint64_t a1, uint64_t a2, double a3)
{
  _BYTE v7[232];

  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 48) + 48))(*(_QWORD *)(a2 + 48)))
  {
    (*(void (**)(_QWORD, _BYTE *, double))(**(_QWORD **)(a2 + 48) + 24))(*(_QWORD *)(a2 + 48), v7, a3);
    if (v7[208])
    {
      sub_1004C5730(*(_QWORD *)(a2 + 8));
      sub_1004C5730(*(_QWORD *)(a2 + 96));
    }
  }
  return nullsub_1532(a1 + 8, a2, a3);
}

uint64_t sub_101271DEC(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 8) + 48))(*(_QWORD *)(a3 + 8));
  if ((_DWORD)result)
    return (*(uint64_t (**)(_QWORD, double))(**(_QWORD **)(a3 + 96) + 48))(*(_QWORD *)(a3 + 96), a1);
  return result;
}

void sub_101271E48(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  float v4;
  float v5;
  float v6;
  BOOL v7;
  unsigned int v8;
  BOOL v9;
  float v12;
  int v13;
  int v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  int v25;
  double v26;
  float v27;
  double v28;
  double v29;
  float v30;
  float v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint8_t *v36;
  double v37;
  double v38;
  double v39;
  int v40;
  double v41;
  __int16 v42;
  double v43;
  __int16 v44;
  double v45;
  __int16 v46;
  double v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  unsigned int v51;
  __int16 v52;
  double v53;
  __int16 v54;
  int v55;
  __int16 v56;
  double v57;
  __int16 v58;
  double v59;
  __int16 v60;
  double v61;
  __int16 v62;
  int v63;
  __int16 v64;
  double v65;
  uint8_t buf[4];
  double v67;
  __int16 v68;
  double v69;
  __int16 v70;
  double v71;
  __int16 v72;
  double v73;
  __int16 v74;
  uint64_t v75;
  __int16 v76;
  unsigned int v77;
  __int16 v78;
  double v79;
  __int16 v80;
  int v81;
  __int16 v82;
  double v83;
  __int16 v84;
  double v85;
  __int16 v86;
  double v87;
  __int16 v88;
  int v89;
  __int16 v90;
  double v91;

  v4 = *(float *)(a1 + 1292);
  v5 = *(float *)(a1 + 296);
  v6 = *(float *)(a1 + 1288);
  v7 = v4 <= 0.05 && v5 < 4.0;
  if (v7 && v6 < 0.4)
  {
    v8 = 0;
  }
  else
  {
    v8 = 1;
    v9 = v4 <= 0.05 || v5 < 4.0;
    if (!v9 && v6 >= 0.4)
    {
      if (v6 <= 5.8 && v5 <= 132.0 && v4 < 1.15)
        v8 = 2;
      else
        v8 = 3;
    }
  }
  v12 = *(double *)(a1 + 560);
  v13 = sub_100219944(a1);
  if (*(double *)(a1 + 600) < *(double *)a1)
    v14 = v13;
  else
    v14 = 0;
  v15 = *(float *)(a1 + 1368);
  v16 = *(float *)(a1 + 1372);
  v17 = *(float *)(a1 + 1376);
  v18 = *(float *)(a1 + 1380);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 3;
  *(_QWORD *)(a2 + 32) = 3;
  v39 = v12;
  v19 = (v18 - v12) / (v18 - v17);
  v20 = v15 * sub_10108B14C(v19, v16);
  *(float *)a2 = v20;
  v22 = sub_1012723B8(v21, (float *)a1);
  if (v8 == 3)
  {
    sub_1006B2E70();
    if (v22 < v23)
      v22 = v23;
  }
  v24 = 12.0;
  if (v22 <= 12.0)
    v24 = v22;
  *(float *)(a2 + 4) = v24;
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 0;
  if ((v14 & 1) != 0)
    __asm { BR              X10 }
  v25 = 0;
  v26 = dbl_101C48B40[v8 < 2];
  v27 = flt_101C48B30[v8 < 2];
  v28 = v20;
  v29 = v24;
  v30 = 1.0 * v24 + (1.0 - 1.0) * v28;
  *(float *)(a2 + 20) = v30;
  *(float *)(a2 + 28) = v30;
  v31 = v30;
  if (v26 > v30)
  {
    v31 = v26;
    *(float *)(a2 + 20) = v31;
    v25 = 3;
    *(_DWORD *)(a2 + 24) = 3;
  }
  if (v26 >= v30)
  {
    *(float *)(a2 + 28) = v27;
    *(_DWORD *)(a2 + 32) = 3;
    v30 = v27;
  }
  *(float *)(a2 + 12) = v24;
  *(_DWORD *)(a2 + 36) = 16;
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_1021ABAF8);
  v32 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    v33 = *(_QWORD *)(a1 + 128);
    *(_DWORD *)buf = 134221056;
    v67 = v29;
    v68 = 2048;
    v69 = v28;
    v70 = 2048;
    v71 = v30;
    v72 = 2048;
    v73 = v31;
    v74 = 2048;
    v75 = v33;
    v76 = 1024;
    v77 = v8;
    v78 = 2048;
    v79 = 1.0;
    v80 = 1024;
    v81 = v25;
    v82 = 2048;
    v83 = v4;
    v84 = 2048;
    v85 = v5;
    v86 = 2048;
    v87 = v39;
    v88 = 1024;
    v89 = v14;
    v90 = 2048;
    v91 = v6;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "Kickboxing,metsWR,%f,metsHR,%f,truthMets,%f,userMets,%f,endTime,%f,motionIntensity,%d,wrWeight,%f,metsSource,%d,accelZ,%f,vm,%f,hr,%f,hrReliability,%d,rotationRate,%f", buf, 0x78u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021ABAF8);
    v34 = *(_QWORD *)(a1 + 128);
    v40 = 134221056;
    v41 = v29;
    v42 = 2048;
    v43 = v28;
    v44 = 2048;
    v45 = v30;
    v46 = 2048;
    v47 = v31;
    v48 = 2048;
    v49 = v34;
    v50 = 1024;
    v51 = v8;
    v52 = 2048;
    v53 = 1.0;
    v54 = 1024;
    v55 = v25;
    v56 = 2048;
    v57 = v4;
    v58 = 2048;
    v59 = v5;
    v60 = 2048;
    v61 = v39;
    v62 = 1024;
    v63 = v14;
    v64 = 2048;
    v65 = v6;
    LODWORD(v37) = 120;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "Kickboxing,metsWR,%f,metsHR,%f,truthMets,%f,userMets,%f,endTime,%f,motionIntensity,%d,wrWeight,%f,metsSource,%d,accelZ,%f,vm,%f,hr,%f,hrReliability,%d,rotationRate,%f", COERCE_DOUBLE(&v40), v37, v38, v39);
    v36 = (uint8_t *)v35;
    sub_100512490("Generic", 1, 0, 2, "virtual CLMetsInfo CLCalorieKickboxingModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v35);
    if (v36 != buf)
      free(v36);
  }
}

float sub_1012723B8(uint64_t a1, float *a2)
{
  uint64_t v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  NSObject *v9;
  const char *v11;
  uint8_t *v12;
  double v13;
  double v14;
  unint64_t v15;
  double v16;
  unint64_t v17;
  int v18;
  double v19;
  __int16 v20;
  double v21;
  __int16 v22;
  double v23;
  __int16 v24;
  double v25;
  __int16 v26;
  double v27;
  __int16 v28;
  double v29;
  uint8_t buf[4];
  double v31;
  __int16 v32;
  double v33;
  __int16 v34;
  double v35;
  __int16 v36;
  double v37;
  __int16 v38;
  double v39;
  __int16 v40;
  double v41;

  v2 = 0;
  v3 = a2[322];
  v4 = a2[323];
  v5 = a2[324];
  v6 = a2[341];
  v7 = a2[340] * 100.0;
  v15 = __PAIR64__(LODWORD(v3), LODWORD(v4));
  *(float *)&v16 = v3 * v4;
  *((float *)&v16 + 1) = v6;
  v17 = __PAIR64__(LODWORD(v5), LODWORD(v7));
  v8 = 0.27451;
  do
  {
    v8 = v8 + (float)(*(float *)((char *)&v15 + v2 * 4) * *(float *)&dword_101C48B50[v2]);
    ++v2;
  }
  while (v2 != 6);
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_1021ABAF8);
  v9 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134219264;
    v31 = v4;
    v32 = 2048;
    v33 = v3;
    v34 = 2048;
    v35 = v5;
    v36 = 2048;
    v37 = v6;
    v38 = 2048;
    v39 = v7;
    v40 = 2048;
    v41 = v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "iz,%f,w,%f,hw,%f,weight,%f,height,%f,wr,%f", buf, 0x3Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021ABAF8);
    v18 = 134219264;
    v19 = v4;
    v20 = 2048;
    v21 = v3;
    v22 = 2048;
    v23 = v5;
    v24 = 2048;
    v25 = v6;
    v26 = 2048;
    v27 = v7;
    v28 = 2048;
    v29 = v8;
    LODWORD(v13) = 62;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "iz,%f,w,%f,hw,%f,weight,%f,height,%f,wr,%f", COERCE_DOUBLE(&v18), v13, v14, *(double *)&v15, v16, *(double *)&v17);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "float CLCalorieKickboxingModel::computeWRRegression(const CLNatalieModelInput &) const", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  return v8;
}

void sub_101272664(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_101272690(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned __int8 *v6;
  int v7;
  int v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  NSObject *v12;
  int v13;
  int v14;
  int v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  NSObject *v19;
  uint64_t v20;
  int v21;
  const char *v22;
  char *v23;
  uint64_t v24;
  const char *v25;
  char *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  __int128 buf;

  v3 = sub_10125380C(a1, "CLBTLEBeaconProviderConcrete-Notifier", a2);
  *(_QWORD *)v3 = off_1021ABB28;
  sub_10055D578((pthread_cond_t **)(v3 + 112));
  *(_QWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  sub_10023CFD8(a1 + 160, (uint64_t)"BTLEBeaconProvider", a1, 10.3);
  *(_DWORD *)(a1 + 208) = 0;
  sub_100197040();
  v4 = sub_1001B796C();
  *(_QWORD *)(a1 + 216) = 0x408C200000000000;
  v5 = (uint64_t *)(a1 + 216);
  *(_BYTE *)(a1 + 212) = (v4 & 0x200000) != 0;
  *(_BYTE *)(a1 + 224) = 1;
  v6 = (unsigned __int8 *)(a1 + 224);
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = a1 + 248;
  *(_QWORD *)(a1 + 256) = a1 + 248;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 272) = a1 + 280;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_DWORD *)(a1 + 320) = -1;
  sub_1001E4804(&buf);
  v7 = sub_1001E4874(buf, "BeaconFenceBestEffortScheduleEnabled", (BOOL *)(a1 + 224));
  v8 = v7;
  v9 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
  if (!*((_QWORD *)&buf + 1))
    goto LABEL_5;
  v10 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (!v8)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    if (!v7)
      goto LABEL_11;
  }
  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
  v12 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
  {
    v13 = *v6;
    LODWORD(buf) = 67174657;
    DWORD1(buf) = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning Overriding BeaconFenceBestEffortScheduleEnabled,%{private}d", (uint8_t *)&buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
    v21 = *v6;
    v28 = 67174657;
    LODWORD(v29) = v21;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0038, 0, "#Warning Overriding BeaconFenceBestEffortScheduleEnabled,%{private}d", &v28, 8);
    v23 = (char *)v22;
    sub_100512490("Generic", 1, 0, 2, "CLBTLEBeaconProviderConcrete::CLBTLEBeaconProviderConcrete(id<CLIntersiloUniverse>)", "%s\n", v22);
    if (v23 != (char *)&buf)
      free(v23);
  }
LABEL_11:
  sub_1001E4804(&buf);
  v14 = sub_1001FD98C(buf, "BeaconFenceBestEffortInterval", (void *)(a1 + 216));
  v15 = v14;
  v16 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
  if (!*((_QWORD *)&buf + 1))
    goto LABEL_15;
  v17 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    if (!v15)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    if (!v14)
      goto LABEL_21;
  }
  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
  v19 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
  {
    v20 = *v5;
    LODWORD(buf) = 134283521;
    *(_QWORD *)((char *)&buf + 4) = v20;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#Warning Overriding BeaconFenceBestEffortInterval,%{private}.2f", (uint8_t *)&buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
    v24 = *v5;
    v28 = 134283521;
    v29 = v24;
    LODWORD(v27) = 12;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0038, 0, "#Warning Overriding BeaconFenceBestEffortInterval,%{private}.2f", &v28, v27);
    v26 = (char *)v25;
    sub_100512490("Generic", 1, 0, 2, "CLBTLEBeaconProviderConcrete::CLBTLEBeaconProviderConcrete(id<CLIntersiloUniverse>)", "%s\n", v25);
    if (v26 != (char *)&buf)
      free(v26);
  }
LABEL_21:
  sub_100647FA8();
}

void sub_101272D40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;
  pthread_cond_t **v27;
  char **v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v32;

  sub_101253DE4(v29, *v28);
  sub_1007A1BE8(a12);
  sub_100E3E6C8(a13);
  v32 = *v30;
  *v30 = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  sub_10055D5F0(v27);
  sub_1012539E8(v26);
  _Unwind_Resume(a1);
}

void sub_101272E24(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  os_activity_scope_state_s state;
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;

  CLProfilingIdentify("CLBTLEBeaconProviderConcrete::onDaemonStatusNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021ABCE8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v10 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLBTLEBeaconProviderConcrete::onDaemonStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021ABCE8);
    v8 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2082;
      v16 = "activity";
      v17 = 2050;
      v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLBTLEBeaconProviderConcrete::onDaemonStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v10 = 0;
  }
  sub_101276B2C(a4, v6, a2);
  if (v10)
    os_activity_scope_leave(&state);
}

void sub_101272FD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_101272FF4(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  NSObject *v4;
  os_activity_scope_state_s state;
  char v6;
  uint8_t buf[4];
  int v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  uint64_t v14;

  CLProfilingIdentify("CLBTLEBeaconProviderConcrete::onZoneDetectionTimer");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021ABCE8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v6 = 1;
    v3 = _os_activity_create((void *)&_mh_execute_header, "CL: CLBTLEBeaconProviderConcrete::onZoneDetectionTimer", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v3, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021ABCE8);
    v4 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2082;
      v12 = "activity";
      v13 = 2050;
      v14 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLBTLEBeaconProviderConcrete::onZoneDetectionTimer\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v6 = 0;
  }
  sub_101276990(a2);
  if (v6)
    os_activity_scope_leave(&state);
}

void sub_101273194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1012731B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  char v5;
  int v6;
  uint8_t buf[8];
  _BYTE v8[24];
  void *v9[2];
  __int128 v10;
  uint64_t (**v11)();
  void *__p[2];
  __int128 v13;
  int v14;
  char v15;

  v3 = *(_QWORD *)(a1 + 32);
  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
  v4 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v8 = 2082;
    *(_QWORD *)&v8[2] = "";
    *(_WORD *)&v8[10] = 2050;
    *(_QWORD *)&v8[12] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"iB: Bluetooth power changed\", \"BT power\":%{public}ld}", buf, 0x1Cu);
  }
  *(_QWORD *)buf = buf;
  *(_QWORD *)v8 = buf;
  *(_QWORD *)&v8[8] = 0;
  *(_QWORD *)&v8[16] = off_10213F058;
  *(_OWORD *)v9 = 0u;
  v10 = 0u;
  v11 = off_10213F058;
  *(_OWORD *)__p = 0u;
  v13 = 0u;
  v14 = 1;
  v15 = 1;
  if (a2 == 1)
  {
    sub_101273388(v3, 0);
    v5 = 1;
  }
  else
  {
    *(_QWORD *)(v3 + 232) = 0;
    sub_10016E3C4(*(_QWORD *)(v3 + 152));
    v5 = 0;
  }
  *(_BYTE *)(v3 + 128) = v5;
  v15 = v5;
  v6 = 2;
  (*(void (**)(uint64_t, int *, uint8_t *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v3 + 152))(v3, &v6, buf, 1, 0xFFFFFFFFLL, 0);
  v11 = off_10213F058;
  if (SBYTE7(v13) < 0)
    operator delete(__p[0]);
  *(_QWORD *)&v8[16] = off_10213F058;
  if (SBYTE7(v10) < 0)
    operator delete(v9[0]);
  sub_1007A1BE8((uint64_t *)buf);
}

void sub_101273370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10079E8EC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101273388(uint64_t a1, int a2)
{
  double Current;
  double v5;
  NSObject *v6;
  int v7;
  uint64_t v8;
  void *v9;
  _QWORD v10[5];
  void *__p[2];
  uint64_t v12;
  _BYTE buf[24];
  __int16 v14;
  uint64_t v15;

  if (*(_BYTE *)(a1 + 128))
  {
    if (*(int *)(a1 + 208) >= 1)
    {
      Current = CFAbsoluteTimeGetCurrent();
      v5 = Current;
      if (a2 != 2 || vabdd_f64(Current, *(double *)(a1 + 240)) >= 15.0)
      {
        if (qword_1022A0030 != -1)
          dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
        v6 = qword_1022A0038;
        if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_INFO))
        {
          v7 = *(_DWORD *)(a1 + 208);
          v8 = *(_QWORD *)(a1 + 288);
          *(_DWORD *)buf = 68289538;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          *(_WORD *)&buf[18] = 1026;
          *(_DWORD *)&buf[20] = v7;
          v14 = 2050;
          v15 = v8;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"iB: Detecting state transitions for BE zones\", \"numZones\":%{public}d, \"totalZones\":%{public}lu}", buf, 0x22u);
        }
        sub_1015A2E04(__p, "BestEffortScan");
        if (*(int *)(a1 + 168) <= 0)
        {
          if (SHIBYTE(v12) < 0)
          {
            sub_100115CE4(buf, __p[0], (unint64_t)__p[1]);
          }
          else
          {
            *(_OWORD *)buf = *(_OWORD *)__p;
            *(_QWORD *)&buf[16] = v12;
          }
          sub_10002B684(a1 + 160, (uint64_t *)buf);
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
        }
        if (SHIBYTE(v12) < 0)
          operator delete(__p[0]);
        sub_101276220(a1);
        *(double *)(a1 + 240) = v5;
        v9 = *(void **)(a1 + 40);
        v10[0] = _NSConcreteStackBlock;
        v10[1] = 3221225472;
        v10[2] = sub_101278038;
        v10[3] = &unk_10212ECA0;
        v10[4] = a1;
        objc_msgSend(v9, "afterInterval:async:", v10, 6.29999995);
        sub_101277FD0(a1, a2 == 3);
      }
    }
  }
}

void sub_10127359C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012735D8(uint64_t a1)
{
  void *v2;
  _BOOL4 v3;
  _BOOL4 v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  NSObject *v8;
  id v9;
  std::string *p_p;
  id v11;
  id v12;
  id v13;
  NSObject *v14;
  id v15;
  id v16;
  id v17;
  NSObject *v18;
  const char *v19;
  char *v20;
  NSObject *v21;
  std::string *v22;
  NSObject *v23;
  const char *v25;
  char *v26;
  std::string *v27;
  const char *v28;
  const char *v29;
  char *v30;
  const char *v31;
  char *v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  std::string __p;
  _QWORD v37[2];
  int v38;
  std::string *v39;
  _OWORD buf[102];

  v2 = *(void **)(a1 + 312);
  if (v2)
  {

    *(_QWORD *)(a1 + 312) = 0;
  }
  sub_100119F3C(v37);
  sub_1001E4804(buf);
  v3 = sub_100006BB4(*(uint64_t *)&buf[0], "BeaconAdvertiserData", v37);
  v4 = v3;
  v5 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (!*((_QWORD *)&buf[0] + 1))
    goto LABEL_7;
  v6 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
  {
LABEL_7:
    if (v3)
      goto LABEL_8;
LABEL_60:
    if (*(_QWORD *)(a1 + 312))
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 264))(a1);
    return sub_10011A5A8(v37);
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (!v4)
    goto LABEL_60;
LABEL_8:
  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
  v8 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "iB: Read iBeacon Advertiser data", (uint8_t *)buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 2, "iB: Read iBeacon Advertiser data", &__p, 2);
    v26 = (char *)v25;
    sub_100512490("Generic", 1, 0, 2, "void CLBTLEBeaconProviderConcrete::beaconAdvertiseFromDefaults()", "%s\n", v25);
    if (v26 != (char *)buf)
      free(v26);
  }
  memset(&__p, 0, sizeof(__p));
  v34 = -1;
  v35 = -1;
  if (!sub_1000BCB64((uint64_t)v37, "UUID", &__p))
  {
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
    v18 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_FAULT))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "Can't enable beacon advertising as requested, no uuid", (uint8_t *)buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_47;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
    LOWORD(v38) = 0;
    LODWORD(v33) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 17, "Can't enable beacon advertising as requested, no uuid", &v38, v33);
    v20 = (char *)v19;
    sub_100512490("Generic", 1, 0, 0, "void CLBTLEBeaconProviderConcrete::beaconAdvertiseFromDefaults()", "%s\n", v19);
    goto LABEL_72;
  }
  sub_1001E4B84((uint64_t)v37, "major", &v35);
  sub_1001E4B84((uint64_t)v37, "minor", &v34);
  *(_DWORD *)(a1 + 320) = -1;
  sub_1001E4B84((uint64_t)v37, "power", (_DWORD *)(a1 + 320));
  v9 = objc_alloc((Class)NSUUID);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v11 = objc_msgSend(v9, "initWithUUIDString:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_p));
  if (v11)
  {
    if ((v35 & 0x80000000) == 0)
    {
      v12 = objc_alloc((Class)NSNumber);
      v13 = objc_msgSend(v12, "initWithInt:", v35);
      if (v13)
        goto LABEL_26;
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
      v14 = qword_1022A0038;
      if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_FAULT))
      {
        LODWORD(buf[0]) = 67174657;
        DWORD1(buf[0]) = v35;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "problem with major ID generation %{private}d", (uint8_t *)buf, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0030 != -1)
          dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
        v38 = 67174657;
        LODWORD(v39) = v35;
        LODWORD(v33) = 8;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 17, "problem with major ID generation %{private}d", &v38, v33);
        v30 = (char *)v29;
        sub_100512490("Generic", 1, 0, 0, "void CLBTLEBeaconProviderConcrete::beaconAdvertiseFromDefaults()", "%s\n", v29);
        if (v30 != (char *)buf)
          free(v30);
      }
    }
    v13 = 0;
LABEL_26:
    if ((v34 & 0x80000000) == 0)
    {
      v15 = objc_alloc((Class)NSNumber);
      v16 = objc_msgSend(v15, "initWithInt:", v34);
      if (v16)
      {
        if (v13)
        {
          v17 = objc_msgSend(objc_alloc((Class)CLBeaconRegion), "initWithProximityUUID:major:minor:identifier:", v11, (unsigned __int16)objc_msgSend(v13, "shortValue"), (unsigned __int16)objc_msgSend(v16, "shortValue"), CFSTR("com.apple.locationd.demo"));
          goto LABEL_58;
        }
        goto LABEL_57;
      }
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
      v23 = qword_1022A0038;
      if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_FAULT))
      {
        LODWORD(buf[0]) = 67174657;
        DWORD1(buf[0]) = v34;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_FAULT, "problem with minor ID generation %{private}d", (uint8_t *)buf, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0030 != -1)
          dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
        v38 = 67174657;
        LODWORD(v39) = v34;
        LODWORD(v33) = 8;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 17, "problem with minor ID generation %{private}d", &v38, v33);
        v32 = (char *)v31;
        sub_100512490("Generic", 1, 0, 0, "void CLBTLEBeaconProviderConcrete::beaconAdvertiseFromDefaults()", "%s\n", v31);
        if (v32 != (char *)buf)
          free(v32);
      }
    }
    if (v13)
    {
      v17 = objc_msgSend(objc_alloc((Class)CLBeaconRegion), "initWithProximityUUID:major:identifier:", v11, (unsigned __int16)objc_msgSend(v13, "shortValue"), CFSTR("com.apple.locationd.demo"));
      v16 = 0;
      goto LABEL_58;
    }
    v16 = 0;
LABEL_57:
    v17 = objc_msgSend(objc_alloc((Class)CLBeaconRegion), "initWithProximityUUID:identifier:", v11, CFSTR("com.apple.locationd.demo"));
LABEL_58:
    *(_QWORD *)(a1 + 312) = v17;

    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_60;
  }
  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
  v21 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_FAULT))
  {
    v22 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
    LODWORD(buf[0]) = 136380675;
    *(_QWORD *)((char *)buf + 4) = v22;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "problem with UUID generation %{private}s", (uint8_t *)buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
    v27 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v38 = 136380675;
    v39 = v27;
    LODWORD(v33) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 17, "problem with UUID generation %{private}s", &v38, v33);
    v20 = (char *)v28;
    sub_100512490("Generic", 1, 0, 0, "void CLBTLEBeaconProviderConcrete::beaconAdvertiseFromDefaults()", "%s\n", v28);
LABEL_72:
    if (v20 != (char *)buf)
      free(v20);
  }
LABEL_47:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return sub_10011A5A8(v37);
}

void sub_101273F00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a18 < 0)
    operator delete(__p);
  sub_10011A5A8(&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_101273F60(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1021ABB28;
  sub_101273FF8(a1);
  sub_101253DE4(a1 + 272, *(char **)(a1 + 280));
  sub_1007A1BE8((uint64_t *)(a1 + 248));
  sub_100E3E6C8(a1 + 160);
  v2 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_10055D5F0((pthread_cond_t **)(a1 + 112));
  return sub_1012539E8(a1);
}

void sub_101273FD4(uint64_t a1)
{
  sub_101273F60(a1);
  operator delete();
}

void sub_101273FF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 152);
  if (v2)
  {
    sub_10016E3C4(v2);
    v3 = *(_QWORD *)(a1 + 152);
    if (v3)
    {
      sub_1009865B8(v3);
      operator delete();
    }
    *(_QWORD *)(a1 + 152) = 0;
  }
  v4 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 136));
  dispatch_release(*(dispatch_object_t *)(a1 + 136));
  v5 = *(void **)(a1 + 120);
  if (v5)
  {

    *(_QWORD *)(a1 + 120) = 0;
  }
  if (*(int *)(a1 + 168) >= 1)
    sub_100E3E6F0(a1 + 160);
}

uint64_t sub_101274098(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  NSObject *v9;
  _BYTE *v10;
  int v11;
  void *v12;
  NSObject *v13;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  NSObject *v18;
  NSObject *v19;
  void **v20;
  CLWPZone *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  _BYTE *v26;
  char *v27;
  char *v28;
  const char *v29;
  void **v30;
  uint64_t v31;
  _BYTE *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  _QWORD v36[5];
  uint64_t (**v37)();
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[5];
  _BYTE buf[12];
  char v43;
  int v44;
  _BYTE *v45;
  void *__p;
  _BYTE v47[32];

  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
  v4 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
  {
    sub_1004E5D0C(a2, &__p);
    v5 = v47[15] >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136380675;
    *(_QWORD *)&buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "iB: Adding zone,%{private}s", buf, 0xCu);
    if ((v47[15] & 0x80000000) != 0)
      operator delete(__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
    v25 = qword_1022A0038;
    sub_1004E5D0C(a2, buf);
    if (v43 >= 0)
      v26 = buf;
    else
      v26 = *(_BYTE **)buf;
    v44 = 136380675;
    v45 = v26;
    _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, v25, 2, "iB: Adding zone,%{private}s", &v44, 12);
    v28 = v27;
    if (v43 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLBTLEBeaconProviderConcrete::addProximityZone(const CLBTLEBeaconProvider_Type::ProximityZone &)", "%s\n", v28);
    if (v28 != (char *)&__p)
      free(v28);
  }
  v6 = sub_101271D04(a2);
  if ((v6 & 1) != 0)
  {
    v7 = sub_1007A2DB4(a1 + 272, a2);
    v8 = v7;
    if ((_QWORD *)(a1 + 280) == v7)
    {
      v15 = *(unsigned __int8 *)(a1 + 212);
      __p = (void *)a2;
      v16 = sub_101279464((uint64_t **)(a1 + 272), a2, (uint64_t)&unk_101B9EB60, (uint64_t *)&__p);
      *(_WORD *)((char *)v16 + 73) = 0;
      v16[10] = 0;
      v16[11] = 0x100000001;
      v17 = qword_1022A0030;
      *((_BYTE *)v16 + 72) = v15 ^ 1;
      if (v15 != 1)
      {
        if (v17 != -1)
          dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
        v18 = qword_1022A0038;
        if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_INFO))
        {
          __p = (void *)68289026;
          *(_WORD *)v47 = 2082;
          *(_QWORD *)&v47[2] = "";
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"iB: Device doesn't support background monitoring, performing BE zone detection\"}", (uint8_t *)&__p, 0x12u);
        }
        ++*(_DWORD *)(a1 + 208);
        sub_101273388(a1, 1);
      }
      else
      {
        if (v17 != -1)
          dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
        v19 = qword_1022A0038;
        if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
        {
          sub_1004E5D0C(a2, &__p);
          v20 = v47[15] >= 0 ? &__p : (void **)__p;
          *(_DWORD *)buf = 136380675;
          *(_QWORD *)&buf[4] = v20;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "iB: Registering zone,%{private}s, with Bluetooth", buf, 0xCu);
          if ((v47[15] & 0x80000000) != 0)
            operator delete(__p);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&__p, 0x65CuLL);
          if (qword_1022A0030 != -1)
            dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
          v31 = qword_1022A0038;
          sub_1004E5D0C(a2, buf);
          if (v43 >= 0)
            v32 = buf;
          else
            v32 = *(_BYTE **)buf;
          v44 = 136380675;
          v45 = v32;
          LODWORD(v35) = 12;
          _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, v31, 2, "iB: Registering zone,%{private}s, with Bluetooth", &v44, v35);
          v34 = v33;
          if (v43 < 0)
            operator delete(*(void **)buf);
          sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLBTLEBeaconProviderConcrete::addProximityZone(const CLBTLEBeaconProvider_Type::ProximityZone &)", "%s\n", v34);
          if (v34 != (char *)&__p)
            free(v34);
        }
        v21 = sub_101274920(a2);
        __p = (void *)a2;
        *((_BYTE *)sub_101279464((uint64_t **)(a1 + 272), a2, (uint64_t)&unk_101B9EB60, (uint64_t *)&__p) + 73) = 1;
        v22 = *(void **)(a1 + 120);
        v41[0] = _NSConcreteStackBlock;
        v41[1] = 3221225472;
        v41[2] = sub_101274A50;
        v41[3] = &unk_1021ABC40;
        v41[4] = a1;
        objc_msgSend(v22, "startTrackingZone:forStates:transitionHandler:", v21, 3, v41);

        __p = off_10213F058;
        if (*(char *)(a2 + 31) < 0)
        {
          sub_100115CE4(v47, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
        }
        else
        {
          *(_OWORD *)v47 = *(_OWORD *)(a2 + 8);
          *(_QWORD *)&v47[16] = *(_QWORD *)(a2 + 24);
        }
        v23 = *(_QWORD *)(a2 + 32);
        *(_QWORD *)&v47[24] = v23;
        v24 = *(void **)(a1 + 40);
        v36[0] = _NSConcreteStackBlock;
        v36[1] = 3321888768;
        v36[2] = sub_101275728;
        v36[3] = &unk_1021ABC60;
        v36[4] = a1;
        v37 = off_10213F058;
        if ((v47[23] & 0x80000000) != 0)
        {
          sub_100115CE4(&v38, *(void **)v47, *(unint64_t *)&v47[8]);
          v23 = *(_QWORD *)&v47[24];
        }
        else
        {
          v38 = *(_OWORD *)v47;
          v39 = *(_QWORD *)&v47[16];
        }
        v40 = v23;
        objc_msgSend(v24, "afterInterval:async:", v36, 8.0);
        v37 = off_10213F058;
        if (SHIBYTE(v39) < 0)
          operator delete((void *)v38);
        __p = off_10213F058;
        if ((v47[23] & 0x80000000) != 0)
        {
          v12 = *(void **)v47;
          goto LABEL_51;
        }
      }
    }
    else
    {
      ++*((_DWORD *)v7 + 23);
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
      v9 = qword_1022A0038;
      if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_INFO))
      {
        sub_1004E5D0C((uint64_t)(v8 + 4), buf);
        v10 = v43 >= 0 ? buf : *(_BYTE **)buf;
        v11 = *((_DWORD *)v8 + 23);
        __p = (void *)68289539;
        *(_WORD *)v47 = 2082;
        *(_QWORD *)&v47[2] = "";
        *(_WORD *)&v47[10] = 2081;
        *(_QWORD *)&v47[12] = v10;
        *(_WORD *)&v47[20] = 1026;
        *(_DWORD *)&v47[22] = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"iB: Zone already registered\", \"zone\":%{private, location:escape_only}s, \"refCount\":%{public}d}", (uint8_t *)&__p, 0x22u);
        if (v43 < 0)
        {
          v12 = *(void **)buf;
LABEL_51:
          operator delete(v12);
        }
      }
    }
  }
  else
  {
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
    v13 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_FAULT))
    {
      LOWORD(__p) = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "Invalid region definition for zone monitoring", (uint8_t *)&__p, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
      *(_WORD *)buf = 0;
      LODWORD(v35) = 2;
      _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0038, 17, "Invalid region definition for zone monitoring", buf, v35);
      v30 = (void **)v29;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLBTLEBeaconProviderConcrete::addProximityZone(const CLBTLEBeaconProvider_Type::ProximityZone &)", "%s\n", v29);
      if (v30 != &__p)
        free(v30);
    }
  }
  return v6;
}

void sub_1012748D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

CLWPZone *sub_101274920(uint64_t a1)
{
  int v2;
  id v3;
  id v4;
  uint64_t v5;
  id v6;
  id v7;
  CLWPZone *v8;

  v2 = *(_DWORD *)(a1 + 36);
  if ((v2 & 1) != 0)
  {
    v4 = objc_alloc((Class)NSUUID);
    if (*(char *)(a1 + 31) >= 0)
      v5 = a1 + 8;
    else
      v5 = *(_QWORD *)(a1 + 8);
    v3 = objc_msgSend(v4, "initWithUUIDString:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5));
    v2 = *(_DWORD *)(a1 + 36);
  }
  else
  {
    v3 = 0;
  }
  if ((v2 & 2) != 0)
  {
    v6 = objc_msgSend(objc_alloc((Class)NSNumber), "initWithUnsignedShort:", *(unsigned __int16 *)(a1 + 32));
    if ((*(_DWORD *)(a1 + 36) & 4) != 0)
      goto LABEL_9;
LABEL_11:
    v7 = 0;
    goto LABEL_12;
  }
  v6 = 0;
  if ((v2 & 4) == 0)
    goto LABEL_11;
LABEL_9:
  v7 = objc_msgSend(objc_alloc((Class)NSNumber), "initWithUnsignedShort:", *(unsigned __int16 *)(a1 + 34));
LABEL_12:
  v8 = -[CLWPZone initWithProximityUUID:major:minor:identifier:]([CLWPZone alloc], "initWithProximityUUID:major:minor:identifier:", v3, v6, v7, +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@.%@.%@"), objc_msgSend(v3, "UUIDString"), v6, v7));

  return v8;
}

void sub_101274A50(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  _DWORD *v9;
  NSObject *v10;
  id v11;
  id v12;
  _QWORD *v13;
  _QWORD *v14;
  NSObject *v15;
  id v16;
  NSObject *v17;
  id v18;
  uint64_t v19;
  id v20;
  const char *v21;
  uint8_t *v22;
  int v23;
  _QWORD *v24;
  NSObject *v25;
  int v26;
  id v27;
  uint64_t v28;
  int v29;
  id v30;
  const char *v31;
  uint8_t *v32;
  NSObject *v33;
  id v34;
  uint64_t v35;
  id v36;
  const char *v37;
  NSObject *v38;
  id v39;
  uint64_t v40;
  id v41;
  id v42;
  const char *v43;
  uint8_t *v44;
  uint64_t v45;
  id v46;
  const char *v47;
  uint8_t *v48;
  uint64_t v49;
  id v50;
  const char *v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t (**v54)();
  void *v55[2];
  __int128 v56;
  int v57;
  id v58;
  _BYTE v59[24];
  __int128 v60;
  _BYTE v61[24];
  uint64_t (**v62)();
  __int128 v63;
  __int128 v64;
  uint64_t (**v65)();
  __int128 __p;
  __int128 v67;
  int v68;
  int v69;
  char v70;
  uint8_t buf[4];
  _BYTE v72[18];

  v9 = *(_DWORD **)(a1 + 32);
  v54 = off_10213F058;
  *(_OWORD *)v55 = 0u;
  v56 = 0u;
  if ((sub_101277290(objc_msgSend(a2, "proximityUUID"), objc_msgSend(a2, "major"), objc_msgSend(a2, "minor"), (uint64_t)&v54) & 1) != 0)
  {
    if (a5)
    {
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
      v10 = qword_1022A0038;
      if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
      {
        v11 = objc_msgSend(objc_msgSend(a5, "description"), "UTF8String");
        v12 = objc_msgSend(objc_msgSend(a2, "description"), "UTF8String");
        *(_DWORD *)buf = 136380931;
        *(_QWORD *)v72 = v11;
        *(_WORD *)&v72[8] = 2081;
        *(_QWORD *)&v72[10] = v12;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning An error,%{private}s, was encountered when tracking zone,%{private}s", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0030 != -1)
          dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
        v40 = qword_1022A0038;
        v41 = objc_msgSend(objc_msgSend(a5, "description"), "UTF8String");
        v42 = objc_msgSend(objc_msgSend(a2, "description"), "UTF8String");
        *(_DWORD *)v61 = 136380931;
        *(_QWORD *)&v61[4] = v41;
        *(_WORD *)&v61[12] = 2081;
        *(_QWORD *)&v61[14] = v42;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v40, 0, "#Warning An error,%{private}s, was encountered when tracking zone,%{private}s", v61, 22);
        v44 = (uint8_t *)v43;
        sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLBTLEBeaconProviderConcrete::addProximityZone(const CLBTLEBeaconProvider_Type::ProximityZone &)_block_invoke", "%s\n", v43);
        if (v44 != buf)
          free(v44);
      }
      v13 = sub_1007A2DB4((uint64_t)(v9 + 68), (uint64_t)&v54);
      v14 = v13;
      if (v9 + 70 != (_DWORD *)v13 && !*((_BYTE *)v13 + 72))
      {
        if (qword_1022A0030 != -1)
          dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
        v15 = qword_1022A0038;
        if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
        {
          v16 = objc_msgSend(objc_msgSend(a2, "description"), "UTF8String");
          *(_DWORD *)buf = 136380675;
          *(_QWORD *)v72 = v16;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "iB: Unable to background monitor zone,%{private}s, performing best effort detection", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0030 != -1)
            dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
          v45 = qword_1022A0038;
          v46 = objc_msgSend(objc_msgSend(a2, "description"), "UTF8String");
          *(_DWORD *)v61 = 136380675;
          *(_QWORD *)&v61[4] = v46;
          LODWORD(v53) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v45, 2, "iB: Unable to background monitor zone,%{private}s, performing best effort detection", v61, v53);
          v48 = (uint8_t *)v47;
          sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLBTLEBeaconProviderConcrete::addProximityZone(const CLBTLEBeaconProvider_Type::ProximityZone &)_block_invoke", "%s\n", v47);
          if (v48 != buf)
            free(v48);
        }
        *((_WORD *)v14 + 36) = 1;
        ++v9[52];
        sub_101273388((uint64_t)v9, 1);
      }
      goto LABEL_59;
    }
    *(_QWORD *)v61 = v61;
    *(_QWORD *)&v61[8] = v61;
    *(_QWORD *)&v61[16] = 0;
    v62 = off_10213F058;
    v63 = 0u;
    v64 = 0u;
    v65 = off_10213F058;
    __p = 0u;
    v67 = 0u;
    v68 = 1;
    v70 = 1;
    std::string::operator=((std::string *)&v63, (const std::string *)v55);
    *((_QWORD *)&v64 + 1) = *((_QWORD *)&v56 + 1);
    if (a3 != 1)
    {
      if (a3 == 2)
        v23 = 4;
      else
        v23 = 1;
      v68 = v23;
      goto LABEL_33;
    }
    v68 = 2;
    if (!a4)
      goto LABEL_33;
    *(_QWORD *)v59 = off_10213F058;
    *(_OWORD *)&v59[8] = 0u;
    v60 = 0u;
    if ((sub_101277290(objc_msgSend(a4, "proximityUUID"), objc_msgSend(a4, "major"), objc_msgSend(a4, "minor"), (uint64_t)v59) & 1) != 0)
    {
      std::string::operator=((std::string *)&__p, (const std::string *)&v59[8]);
      *((_QWORD *)&v67 + 1) = *((_QWORD *)&v60 + 1);
      goto LABEL_70;
    }
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
    v38 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_FAULT))
    {
      v39 = objc_msgSend(objc_msgSend(a4, "description"), "UTF8String");
      *(_DWORD *)buf = 136380675;
      *(_QWORD *)v72 = v39;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_FAULT, "Unable to convert entry beacon,%{private}s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
      v49 = qword_1022A0038;
      v50 = objc_msgSend(objc_msgSend(a4, "description"), "UTF8String");
      v57 = 136380675;
      v58 = v50;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v49, 17, "Unable to convert entry beacon,%{private}s", &v57, 12);
      v52 = (uint8_t *)v51;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLBTLEBeaconProviderConcrete::addProximityZone(const CLBTLEBeaconProvider_Type::ProximityZone &)_block_invoke", "%s\n", v51);
      if (v52 != buf)
        free(v52);
    }
    if (WORD4(v67))
    {
      sub_101949A2C(buf);
    }
    else if (WORD5(v67))
    {
      sub_1019498D4(buf);
    }
    else
    {
      if (!HIDWORD(v67))
      {
LABEL_70:
        *(_QWORD *)v59 = off_10213F058;
        if (SBYTE7(v60) < 0)
          operator delete(*(void **)&v59[8]);
LABEL_33:
        v24 = sub_1007A2DB4((uint64_t)(v9 + 68), (uint64_t)&v62);
        if (v9 + 70 == (_DWORD *)v24)
        {
          if (qword_1022A0030 != -1)
            dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
          v33 = qword_1022A0038;
          if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
          {
            v34 = objc_msgSend(objc_msgSend(a2, "description"), "UTF8String");
            *(_DWORD *)buf = 136380675;
            *(_QWORD *)v72 = v34;
            _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "iB: Could not find a match to zone tracker zone, %{private}s", buf, 0xCu);
          }
          if (!sub_1001BFF7C(115, 2))
            goto LABEL_54;
          bzero(buf, 0x65CuLL);
          if (qword_1022A0030 != -1)
            dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
          v35 = qword_1022A0038;
          v36 = objc_msgSend(objc_msgSend(a2, "description"), "UTF8String");
          *(_DWORD *)v59 = 136380675;
          *(_QWORD *)&v59[4] = v36;
          LODWORD(v53) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v35, 2, "iB: Could not find a match to zone tracker zone, %{private}s", v59, v53);
          v32 = (uint8_t *)v37;
          sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLBTLEBeaconProviderConcrete::addProximityZone(const CLBTLEBeaconProvider_Type::ProximityZone &)_block_invoke", "%s\n", v37);
        }
        else
        {
          if (*((_DWORD *)v24 + 22) != v68)
          {
            *((_DWORD *)v24 + 22) = v68;
            v69 = sub_1012756C4((uint64_t)v9);
            *(_DWORD *)buf = 1;
            (*(void (**)(_DWORD *, uint8_t *, _BYTE *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v9 + 152))(v9, buf, v61, 0, 0xFFFFFFFFLL, 0);
LABEL_54:
            v65 = off_10213F058;
            if (SBYTE7(v67) < 0)
              operator delete((void *)__p);
            v62 = off_10213F058;
            if (SBYTE7(v64) < 0)
              operator delete((void *)v63);
            sub_1007A1BE8((uint64_t *)v61);
            goto LABEL_59;
          }
          if (qword_1022A0030 != -1)
            dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
          v25 = qword_1022A0038;
          if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
          {
            v26 = v68;
            v27 = objc_msgSend(objc_msgSend(a2, "description"), "UTF8String");
            *(_DWORD *)buf = 67174915;
            *(_DWORD *)v72 = v26;
            *(_WORD *)&v72[4] = 2081;
            *(_QWORD *)&v72[6] = v27;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "iB: Zone did not change state, %{private}d, %{private}s", buf, 0x12u);
          }
          if (!sub_1001BFF7C(115, 2))
            goto LABEL_54;
          bzero(buf, 0x65CuLL);
          if (qword_1022A0030 != -1)
            dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
          v28 = qword_1022A0038;
          v29 = v68;
          v30 = objc_msgSend(objc_msgSend(a2, "description"), "UTF8String");
          *(_DWORD *)v59 = 67174915;
          *(_DWORD *)&v59[4] = v29;
          *(_WORD *)&v59[8] = 2081;
          *(_QWORD *)&v59[10] = v30;
          LODWORD(v53) = 18;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v28, 2, "iB: Zone did not change state, %{private}d, %{private}s", v59, v53);
          v32 = (uint8_t *)v31;
          sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLBTLEBeaconProviderConcrete::addProximityZone(const CLBTLEBeaconProvider_Type::ProximityZone &)_block_invoke", "%s\n", v31);
        }
        if (v32 != buf)
          free(v32);
        goto LABEL_54;
      }
      sub_10194977C(buf);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/BTLEBeaconProvider/CLBTLEBeaconProviderConcrete.mm", *(_DWORD *)buf, "addProximityZone_block_invoke");
    __break(1u);
  }
  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
  v17 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_FAULT))
  {
    v18 = objc_msgSend(objc_msgSend(a2, "description"), "UTF8String");
    *(_DWORD *)buf = 136380675;
    *(_QWORD *)v72 = v18;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "Unable to convert zone,%{private}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
    v19 = qword_1022A0038;
    v20 = objc_msgSend(objc_msgSend(a2, "description"), "UTF8String");
    *(_DWORD *)v61 = 136380675;
    *(_QWORD *)&v61[4] = v20;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v19, 17, "Unable to convert zone,%{private}s", v61, 12);
    v22 = (uint8_t *)v21;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLBTLEBeaconProviderConcrete::addProximityZone(const CLBTLEBeaconProvider_Type::ProximityZone &)_block_invoke", "%s\n", v21);
    if (v22 != buf)
      free(v22);
  }
LABEL_59:
  v54 = off_10213F058;
  if (SBYTE7(v56) < 0)
    operator delete(v55[0]);
}

void sub_101275614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,char a31)
{
  if (a28 < 0)
    operator delete(__p);
  sub_10079E8EC((uint64_t)&a31);
  if (a18 < 0)
    operator delete(a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1012756C4(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;

  v1 = *(_QWORD **)(a1 + 272);
  v2 = (_QWORD *)(a1 + 280);
  if (v1 == (_QWORD *)(a1 + 280))
    return 0;
  LODWORD(result) = 0;
  do
  {
    v4 = (_QWORD *)v1[1];
    v5 = v1;
    if (v4)
    {
      do
      {
        v6 = v4;
        v4 = (_QWORD *)*v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        v6 = (_QWORD *)v5[2];
        v7 = *v6 == (_QWORD)v5;
        v5 = v6;
      }
      while (!v7);
    }
    result = result + *((unsigned __int8 *)v1 + 73);
    v1 = v6;
  }
  while (v6 != v2);
  return result;
}

void sub_101275728(const std::string *a1)
{
  uint64_t size;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  NSObject *v6;
  void **v7;
  NSObject *v8;
  void **v9;
  const char *v10;
  void **v11;
  void *__p[2];
  char v13;
  uint8_t buf[8];
  _BYTE v15[24];
  void *v16[2];
  __int128 v17;
  uint64_t (**v18)();
  void *v19[2];
  __int128 v20;
  int v21;
  int v22;
  char v23;

  size = a1[1].__r_.__value_.__l.__size_;
  v3 = (uint64_t)&a1[1].__r_.__value_.__r.__words[2];
  v4 = sub_1007A2DB4(size + 272, (uint64_t)&a1[1].__r_.__value_.__r.__words[2]);
  if ((_QWORD *)(size + 280) == v4)
  {
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
    v8 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_INFO))
    {
      sub_1004E5D0C(v3, __p);
      if (v13 >= 0)
        v9 = __p;
      else
        v9 = (void **)__p[0];
      *(_DWORD *)buf = 68289283;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v15 = 2082;
      *(_QWORD *)&v15[2] = "";
      *(_WORD *)&v15[10] = 2081;
      *(_QWORD *)&v15[12] = v9;
      v10 = "{\"msg%{public}.0s\":\"iB: Zone removed before the region entry timeout expired\", \"zone\":%{private, locat"
            "ion:escape_only}s}";
LABEL_30:
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, v10, buf, 0x1Cu);
      if (v13 < 0)
        operator delete(__p[0]);
    }
  }
  else
  {
    v5 = v4;
    if (*((_DWORD *)v4 + 22) == 1)
    {
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
      v6 = qword_1022A0038;
      if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_INFO))
      {
        sub_1004E5D0C((uint64_t)&a1[1].__r_.__value_.__r.__words[2], __p);
        v7 = v13 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 68289283;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v15 = 2082;
        *(_QWORD *)&v15[2] = "";
        *(_WORD *)&v15[10] = 2081;
        *(_QWORD *)&v15[12] = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"iB: Zone was not seen and will be marked as exited\", \"zone\":%{private, location:escape_only}s}", buf, 0x1Cu);
        if (v13 < 0)
          operator delete(__p[0]);
      }
      *((_DWORD *)v5 + 22) = 4;
      *(_QWORD *)buf = buf;
      *(_QWORD *)v15 = buf;
      *(_QWORD *)&v15[8] = 0;
      *(_QWORD *)&v15[16] = off_10213F058;
      *(_OWORD *)v16 = 0u;
      v17 = 0u;
      v18 = off_10213F058;
      *(_OWORD *)v19 = 0u;
      v20 = 0u;
      v21 = 1;
      v23 = 1;
      std::string::operator=((std::string *)v16, a1 + 2);
      *((_QWORD *)&v17 + 1) = a1[3].__r_.__value_.__l.__data_;
      v21 = 4;
      v22 = sub_1012756C4(size);
      LODWORD(__p[0]) = 1;
      (*(void (**)(uint64_t, void **, uint8_t *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)size + 152))(size, __p, buf, 0, 0xFFFFFFFFLL, 0);
      v18 = off_10213F058;
      if (SBYTE7(v20) < 0)
        operator delete(v19[0]);
      *(_QWORD *)&v15[16] = off_10213F058;
      if (SBYTE7(v17) < 0)
        operator delete(v16[0]);
      sub_1007A1BE8((uint64_t *)buf);
      return;
    }
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
    v8 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_INFO))
    {
      sub_1004E5D0C(v3, __p);
      if (v13 >= 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      *(_DWORD *)buf = 68289283;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v15 = 2082;
      *(_QWORD *)&v15[2] = "";
      *(_WORD *)&v15[10] = 2081;
      *(_QWORD *)&v15[12] = v11;
      v10 = "{\"msg%{public}.0s\":\"iB: State for zone was already determined\", \"zone\":%{private, location:escape_only}s}";
      goto LABEL_30;
    }
  }
}

void sub_101275AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10079E8EC((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_101275ACC(_QWORD *a1, uint64_t a2)
{
  _QWORD *result;
  __int128 v5;

  a1[5] = off_10213F058;
  result = a1 + 6;
  if (*(char *)(a2 + 71) < 0)
  {
    result = sub_100115CE4(result, *(void **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 48);
    result[2] = *(_QWORD *)(a2 + 64);
    *(_OWORD *)result = v5;
  }
  a1[9] = *(_QWORD *)(a2 + 72);
  return result;
}

void sub_101275B30(uint64_t a1)
{
  *(_QWORD *)(a1 + 40) = off_10213F058;
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
}

BOOL sub_101275B54(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  void **v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  int v11;
  NSObject *v12;
  _BYTE *v13;
  int v14;
  BOOL v15;
  BOOL v16;
  NSObject *v17;
  void **v18;
  uint64_t v19;
  _BYTE *v20;
  char *v21;
  char *v22;
  NSObject *v23;
  _BYTE *v24;
  int v25;
  CLWPZone *v26;
  uint64_t v28;
  _BYTE *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  _BYTE buf[12];
  char v34;
  int v35;
  _BYTE *v36;
  void *__p;
  __int16 v38;
  const char *v39;
  __int16 v40;
  _BYTE *v41;
  __int16 v42;
  int v43;

  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
  v4 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
  {
    sub_1004E5D0C(a2, &__p);
    v5 = SBYTE3(v41) >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136380675;
    *(_QWORD *)&buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "iB: Removing zone,%{private}s", buf, 0xCu);
    if (SBYTE3(v41) < 0)
      operator delete(__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
    v28 = qword_1022A0038;
    sub_1004E5D0C(a2, buf);
    if (v34 >= 0)
      v29 = buf;
    else
      v29 = *(_BYTE **)buf;
    v35 = 136380675;
    v36 = v29;
    _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, v28, 2, "iB: Removing zone,%{private}s", &v35, 12);
    v31 = v30;
    if (v34 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLBTLEBeaconProviderConcrete::removeProximityZone(const CLBTLEBeaconProvider_Type::ProximityZone &)", "%s\n", v31);
    if (v31 != (char *)&__p)
      free(v31);
  }
  v6 = sub_1007A2DB4(a1 + 272, a2);
  v7 = (uint64_t)v6;
  v8 = a1 + 280;
  if ((_QWORD *)(a1 + 280) == v6)
  {
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
    v17 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
    {
      sub_1004E5D0C(a2, &__p);
      v18 = SBYTE3(v41) >= 0 ? &__p : (void **)__p;
      *(_DWORD *)buf = 136380675;
      *(_QWORD *)&buf[4] = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#Warning Unable to remove zone,%{private}s, it wasn't found.", buf, 0xCu);
      if (SBYTE3(v41) < 0)
        operator delete(__p);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
      v19 = qword_1022A0038;
      sub_1004E5D0C(a2, buf);
      if (v34 >= 0)
        v20 = buf;
      else
        v20 = *(_BYTE **)buf;
      v35 = 136380675;
      v36 = v20;
      LODWORD(v32) = 12;
      _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, v19, 0, "#Warning Unable to remove zone,%{private}s, it wasn't found.", &v35, v32);
      v22 = v21;
      if (v34 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLBTLEBeaconProviderConcrete::removeProximityZone(const CLBTLEBeaconProvider_Type::ProximityZone &)", "%s\n", v22);
      if (v22 != (char *)&__p)
        free(v22);
    }
  }
  else
  {
    v9 = *((_DWORD *)v6 + 23);
    v10 = v9 != 0;
    v11 = v9 - 1;
    if (v11 == 0 || !v10)
    {
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
      v12 = qword_1022A0038;
      if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_INFO))
      {
        sub_1004E5D0C(a2, buf);
        v13 = v34 >= 0 ? buf : *(_BYTE **)buf;
        __p = (void *)68289283;
        v38 = 2082;
        v39 = "";
        v40 = 2081;
        v41 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"iB: Unregistering zone with Bluetooth, last client\", \"zone\":%{private, location:escape_only}s}", (uint8_t *)&__p, 0x1Cu);
        if (v34 < 0)
          operator delete(*(void **)buf);
      }
      if (*(_BYTE *)(v7 + 72))
      {
        v14 = *(_DWORD *)(a1 + 208);
        v15 = __OFSUB__(v14--, 1);
        *(_DWORD *)(a1 + 208) = v14;
        if ((v14 < 0) ^ v15 | (v14 == 0))
        {
          *(_QWORD *)(a1 + 232) = 0;
          sub_10016E3C4(*(_QWORD *)(a1 + 152));
        }
        v16 = *(_BYTE *)(v7 + 73) == 0;
        sub_10125401C((uint64_t **)(a1 + 272), v7);
        if (v16)
          return v8 != v7;
      }
      else
      {
        sub_10125401C((uint64_t **)(a1 + 272), v7);
      }
      v26 = sub_101274920(a2);
      objc_msgSend(*(id *)(a1 + 120), "stopTrackingZone:", v26);

      return v8 != v7;
    }
    *((_DWORD *)v6 + 23) = v11;
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
    v23 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_INFO))
    {
      sub_1004E5D0C(a2, buf);
      v24 = v34 >= 0 ? buf : *(_BYTE **)buf;
      v25 = *(_DWORD *)(v7 + 92);
      __p = (void *)68289539;
      v38 = 2082;
      v39 = "";
      v40 = 2081;
      v41 = v24;
      v42 = 1026;
      v43 = v25;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"iB: Decremented zone reference count, still clients\", \"zone\":%{private, location:escape_only}s, \"refCount\":%{public}d}", (uint8_t *)&__p, 0x22u);
      if (v34 < 0)
        operator delete(*(void **)buf);
    }
  }
  return v8 != v7;
}

id sub_101276144(uint64_t a1)
{
  id result;

  objc_msgSend(*(id *)(a1 + 120), "stopTrackingZones");
  sub_101253DE4(a1 + 272, *(char **)(a1 + 280));
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 272) = a1 + 280;
  *(_QWORD *)(a1 + 232) = 0;
  result = sub_10016E3C4(*(_QWORD *)(a1 + 152));
  *(_DWORD *)(a1 + 208) = 0;
  return result;
}

id sub_101276190(_QWORD *a1, double a2)
{
  void *v4;
  _QWORD v6[5];

  (*(void (**)(_QWORD *))(*a1 + 240))(a1);
  v4 = (void *)a1[5];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10127620C;
  v6[3] = &unk_10212ECA0;
  v6[4] = a1;
  return objc_msgSend(v4, "afterInterval:async:", v6, a2);
}

uint64_t sub_10127620C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 248))(*(_QWORD *)(a1 + 32));
}

void sub_101276220(uint64_t a1)
{
  int v2;
  NSObject *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  NSObject *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  NSObject *v18;
  NSObject *v19;
  dispatch_time_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint8_t *v25;
  _QWORD handler[5];
  _QWORD v27[5];
  int v28;
  int v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  uint8_t buf[4];
  int v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;

  v2 = *(_DWORD *)(a1 + 132);
  if (v2 <= 0)
  {
    *(_DWORD *)(a1 + 132) = 1;
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
    v12 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
    {
      v13 = *(_DWORD *)(a1 + 132);
      v15 = *(_QWORD *)(a1 + 232);
      v14 = *(_QWORD *)(a1 + 240);
      *(_DWORD *)buf = 67240705;
      v35 = v13;
      v36 = 2049;
      v37 = v14;
      v38 = 2049;
      v39 = v15;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "iB: Resuming scan, reference count,%{public}d,lastScan,%{private}.0lf,lastScheduled,%{private}.0lf", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
      v21 = *(_DWORD *)(a1 + 132);
      v23 = *(_QWORD *)(a1 + 232);
      v22 = *(_QWORD *)(a1 + 240);
      v28 = 67240705;
      v29 = v21;
      v30 = 2049;
      v31 = v22;
      v32 = 2049;
      v33 = v23;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 2, "iB: Resuming scan, reference count,%{public}d,lastScan,%{private}.0lf,lastScheduled,%{private}.0lf", &v28, 28);
      v25 = (uint8_t *)v24;
      sub_100512490("Generic", 1, 0, 2, "void CLBTLEBeaconProviderConcrete::unlockedStartScan()", "%s\n", v24);
      if (v25 != buf)
        free(v25);
    }
    sub_100197040();
    if (sub_100195F08())
      v16 = 2;
    else
      v16 = 1;
    v17 = *(void **)(a1 + 120);
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472;
    v27[2] = sub_101276D5C;
    v27[3] = &unk_1021ABC90;
    v27[4] = a1;
    objc_msgSend(v17, "startScanForBeaconTypes:updateHandler:", v16, v27);
    v18 = *(NSObject **)(a1 + 136);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_101277388;
    handler[3] = &unk_10212ECA0;
    handler[4] = a1;
    dispatch_source_set_event_handler(v18, handler);
    v19 = *(NSObject **)(a1 + 136);
    v20 = dispatch_time(0, 1000000000);
    dispatch_source_set_timer(v19, v20, 0x3B9ACA00uLL, 0);
    dispatch_resume(*(dispatch_object_t *)(a1 + 136));
  }
  else
  {
    *(_DWORD *)(a1 + 132) = v2 + 1;
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
    v3 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
    {
      v4 = *(_DWORD *)(a1 + 132);
      v6 = *(_QWORD *)(a1 + 232);
      v5 = *(_QWORD *)(a1 + 240);
      *(_DWORD *)buf = 67240705;
      v35 = v4;
      v36 = 2049;
      v37 = v5;
      v38 = 2049;
      v39 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "iB: Scan is already resumed, reference count,%{public}d,lastScan,%{private}.0lf,lastScheduled,%{private}.0lf", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
      v7 = *(_DWORD *)(a1 + 132);
      v9 = *(_QWORD *)(a1 + 232);
      v8 = *(_QWORD *)(a1 + 240);
      v28 = 67240705;
      v29 = v7;
      v30 = 2049;
      v31 = v8;
      v32 = 2049;
      v33 = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 2, "iB: Scan is already resumed, reference count,%{public}d,lastScan,%{private}.0lf,lastScheduled,%{private}.0lf", &v28, 28);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CLBTLEBeaconProviderConcrete::unlockedStartScan()", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
}

void sub_10127665C(uint64_t a1)
{
  int v2;
  uint64_t v3;
  BOOL v4;
  NSObject *v5;
  int v6;
  NSObject *v7;
  int v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  const char *v13;
  uint8_t *v14;
  int v15;
  int v16;
  uint8_t buf[4];
  int v18;

  v2 = *(_DWORD *)(a1 + 132);
  v3 = qword_1022A0030;
  v4 = __OFSUB__(v2--, 1);
  *(_DWORD *)(a1 + 132) = v2;
  if ((v2 < 0) ^ v4 | (v2 == 0))
  {
    if (v3 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
    v5 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
    {
      v6 = *(_DWORD *)(a1 + 132);
      *(_DWORD *)buf = 67240192;
      v18 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "iB: Suspending scan, reference count,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
      v9 = *(_DWORD *)(a1 + 132);
      v15 = 67240192;
      v16 = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 2, "iB: Suspending scan, reference count,%{public}d", &v15, 8);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CLBTLEBeaconProviderConcrete::unlockedStopScan()", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    sub_1012773B0(a1);
    sub_101277B94(a1);
    sub_101277E1C(a1);
    dispatch_suspend(*(dispatch_object_t *)(a1 + 136));
    objc_msgSend(*(id *)(a1 + 120), "stopScan");
  }
  else
  {
    if (v3 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
    v7 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
    {
      v8 = *(_DWORD *)(a1 + 132);
      *(_DWORD *)buf = 67240192;
      v18 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "iB: Scan is already suspended, reference count,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
      v12 = *(_DWORD *)(a1 + 132);
      v15 = 67240192;
      v16 = v12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 2, "iB: Scan is already suspended, reference count,%{public}d", &v15, 8);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLBTLEBeaconProviderConcrete::unlockedStopScan()", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
}

void sub_101276990(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
  v2 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "iB: Zone detection timer woke up", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 2, "iB: Zone detection timer woke up", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLBTLEBeaconProviderConcrete::onZoneDetectionTimer(CLPersistentTimer *)", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  sub_101273388(a1, 3);
}

void sub_101276B2C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if (*a3 == 3)
  {
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
    v4 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "iB: Received a wake event", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
      v7[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 2, "iB: Received a wake event", v7, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "void CLBTLEBeaconProviderConcrete::onDaemonStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
    sub_101273388(a1, 2);
  }
}

_QWORD *sub_101276CD4@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1015A2E04(a2, __str);
}

uint64_t sub_101276D4C()
{
  return 1;
}

uint64_t sub_101276D54()
{
  return 1;
}

void sub_101276D5C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  unsigned __int8 v6;
  NSObject *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  NSObject *v11;
  std::string *v12;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  std::string *v16;
  const char *v17;
  uint8_t *v18;
  int v19;
  std::string *v20;
  std::string v21;
  int v22;
  uint64_t (**v23)();
  void *__p[2];
  _OWORD v25[2];
  uint8_t buf[4];
  std::string *v27;

  v5 = *(_QWORD *)(a1 + 32);
  v6 = objc_msgSend(objc_msgSend(a2, "objectForKey:", CFSTR("typeMask")), "integerValue");
  if (a3)
  {
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
    v7 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446210;
      v27 = (std::string *)objc_msgSend(objc_msgSend(a3, "description"), "UTF8String");
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "An error,%{public}s, was received for a scan", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
      v13 = qword_1022A0038;
      LODWORD(v21.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)v21.__r_.__value_.__r.__words + 4) = (std::string::size_type)objc_msgSend(objc_msgSend(a3, "description"), "UTF8String");
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v13, 17, "An error,%{public}s, was received for a scan", &v21, 12);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 0, "void CLBTLEBeaconProviderConcrete::unlockedStartScan()_block_invoke", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
  }
  else if ((v6 & 3) != 0)
  {
    memset(&v21, 0, sizeof(v21));
    v22 = 0;
    v23 = off_10213F058;
    *(_OWORD *)__p = 0u;
    memset(v25, 0, 26);
    if (objc_msgSend(a2, "objectForKey:", CFSTR("beaconID")))
      std::string::assign(&v21, (const std::string::value_type *)objc_msgSend(objc_msgSend(objc_msgSend(a2, "objectForKey:", CFSTR("beaconID")), "UUIDString"), "UTF8String"));
    if (sub_101277290(objc_msgSend(a2, "objectForKey:", CFSTR("proximityUUID")), objc_msgSend(a2, "objectForKey:", CFSTR("major")), objc_msgSend(a2, "objectForKey:", CFSTR("minor")), (uint64_t)&v23))
    {
      LOWORD(v22) = (unsigned __int16)objc_msgSend(objc_msgSend(a2, "objectForKey:", CFSTR("rssi")), "shortValue");
      HIWORD(v22) = (unsigned __int16)objc_msgSend(objc_msgSend(a2, "objectForKey:", CFSTR("tx")), "shortValue");
      if (objc_msgSend(a2, "objectForKey:", CFSTR("discovered")))
      {
        objc_msgSend(objc_msgSend(a2, "objectForKey:", CFSTR("discovered")), "timeIntervalSinceReferenceDate");
        *(_QWORD *)&v25[1] = v8;
      }
      WORD4(v25[1]) = (unsigned __int16)objc_msgSend(objc_msgSend(a2, "objectForKey:", CFSTR("channel")), "shortValue");
      v9 = sub_101253CB4((int)v5 + 248, 0, 0, (__int128 *)&v21);
      v9[1] = v5 + 248;
      v10 = *(_QWORD *)(v5 + 248);
      *v9 = v10;
      *(_QWORD *)(v10 + 8) = v9;
      *(_QWORD *)(v5 + 248) = v9;
      ++*(_QWORD *)(v5 + 264);
    }
    else
    {
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
      v11 = qword_1022A0038;
      if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_FAULT))
      {
        v12 = &v21;
        if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v12 = (std::string *)v21.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136380675;
        v27 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Unable to convert advertisement region from bridge to native for device,%{private}s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0030 != -1)
          dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
        v16 = &v21;
        if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v16 = (std::string *)v21.__r_.__value_.__r.__words[0];
        v19 = 136380675;
        v20 = v16;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 17, "Unable to convert advertisement region from bridge to native for device,%{private}s", &v19, 12);
        v18 = (uint8_t *)v17;
        sub_100512490("Generic", 1, 0, 0, "void CLBTLEBeaconProviderConcrete::unlockedStartScan()_block_invoke", "%s\n", v17);
        if (v18 != buf)
          free(v18);
      }
    }
    v23 = off_10213F058;
    if (SBYTE7(v25[0]) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v21.__r_.__value_.__l.__data_);
  }
}

void sub_101277270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_101277338((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101277290(void *a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v7;

  *(_DWORD *)(a4 + 36) = 0;
  v7 = a1 != 0;
  if (a1)
  {
    *(_DWORD *)(a4 + 36) = 1;
    std::string::assign((std::string *)(a4 + 8), (const std::string::value_type *)objc_msgSend(objc_msgSend(a1, "UUIDString"), "UTF8String"));
  }
  if (a2)
  {
    *(_DWORD *)(a4 + 36) |= 2u;
    *(_WORD *)(a4 + 32) = (unsigned __int16)objc_msgSend(a2, "unsignedShortValue");
    if (!a3)
      return v7;
  }
  else
  {
    v7 = 1;
    if (!a3)
      return v7;
  }
  if (a2)
    v7 = v7;
  else
    v7 = 0;
  *(_DWORD *)(a4 + 36) |= 4u;
  *(_WORD *)(a4 + 34) = (unsigned __int16)objc_msgSend(a3, "unsignedShortValue");
  return v7;
}

uint64_t sub_101277338(uint64_t a1)
{
  *(_QWORD *)(a1 + 32) = off_10213F058;
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_101277388(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  sub_1012773B0(v1);
  sub_101277B94(v1);
}

void sub_1012773B0(uint64_t a1)
{
  double v2;
  _QWORD *v3;
  double v4;
  uint64_t i;
  int *v6;
  NSObject *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int v15;
  NSObject *v16;
  _BYTE *v17;
  NSObject *v18;
  _BYTE *v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  BOOL v24;
  uint64_t v25;
  _BYTE *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[12];
  char v33;
  _BYTE __p[12];
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  double v38;
  __int16 v39;
  uint64_t v40;
  _BYTE buf[48];
  __int128 v42;
  uint64_t (**v43)();
  __int128 v44;
  __int128 v45;
  int v46;
  int v47;
  char v48;

  v2 = sub_100078B88();
  if (*(int *)(a1 + 208) >= 1)
  {
    v3 = *(_QWORD **)(a1 + 272);
    if (v3 != (_QWORD *)(a1 + 280))
    {
      v4 = v2;
      do
      {
        if (*((_BYTE *)v3 + 72))
        {
          v30 = 0u;
          v31 = 0u;
          for (i = *(_QWORD *)(a1 + 256); i != a1 + 248; i = *(_QWORD *)(i + 8))
          {
            if (sub_100C33DF0((uint64_t)(v3 + 4), i + 48))
            {
              std::string::operator=((std::string *)&v30, (const std::string *)(i + 56));
              *((_QWORD *)&v31 + 1) = *(_QWORD *)(i + 80);
              v6 = (int *)(v3 + 11);
              if (*((_DWORD *)v3 + 22) == 2)
              {
LABEL_29:
                if (*((_BYTE *)v3 + 74))
                {
                  *((_BYTE *)v3 + 74) = 0;
                  v3[10] = 0;
                }
                goto LABEL_56;
              }
              v15 = 2;
              if (!*((_BYTE *)v3 + 74))
                goto LABEL_44;
              goto LABEL_43;
            }
          }
          v6 = (int *)(v3 + 11);
          if (*((_DWORD *)v3 + 22) == 4)
            goto LABEL_29;
          if (*((_BYTE *)v3 + 74))
          {
            if (v4 - *((double *)v3 + 10) >= 5.0)
            {
              v15 = 4;
LABEL_43:
              *((_BYTE *)v3 + 74) = 0;
              v3[10] = 0;
LABEL_44:
              *v6 = v15;
              if (qword_1022A0030 != -1)
                dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
              v18 = qword_1022A0038;
              if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
              {
                sub_1004E5D0C((uint64_t)(v3 + 4), __p);
                v19 = __p;
                if (v37 < 0)
                  v19 = *(_BYTE **)__p;
                v20 = *v6;
                v21 = *(_QWORD *)(a1 + 288);
                *(_DWORD *)buf = 68289795;
                *(_DWORD *)&buf[4] = 0;
                *(_WORD *)&buf[8] = 2082;
                *(_QWORD *)&buf[10] = "";
                *(_WORD *)&buf[18] = 2081;
                *(_QWORD *)&buf[20] = v19;
                *(_WORD *)&buf[28] = 1025;
                *(_DWORD *)&buf[30] = v20;
                *(_WORD *)&buf[34] = 2050;
                *(_QWORD *)&buf[36] = v21;
                _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"@iB: BE zone state transition\", \"zone\":%{private, location:escape_only}s, \"state\":%{private}d, \"totalZones\":%{public}lu}", buf, 0x2Cu);
                if (SHIBYTE(v37) < 0)
                  operator delete(*(void **)__p);
              }
              *(_QWORD *)buf = buf;
              *(_QWORD *)&buf[8] = buf;
              *(_QWORD *)&buf[16] = 0;
              *(_QWORD *)&buf[24] = off_10213F058;
              *(_OWORD *)&buf[32] = 0u;
              v42 = 0u;
              v43 = off_10213F058;
              v44 = 0u;
              v45 = 0u;
              v46 = 1;
              v48 = 1;
              std::string::operator=((std::string *)&buf[32], (const std::string *)(v3 + 5));
              *((_QWORD *)&v42 + 1) = v3[8];
              std::string::operator=((std::string *)&v44, (const std::string *)&v30);
              *((_QWORD *)&v45 + 1) = *((_QWORD *)&v31 + 1);
              v46 = *v6;
              v47 = sub_1012756C4(a1);
              *(_DWORD *)__p = 1;
              (*(void (**)(uint64_t, _BYTE *, _BYTE *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, __p, buf, 0, 0xFFFFFFFFLL, 0);
              v43 = off_10213F058;
              if (SBYTE7(v45) < 0)
                operator delete((void *)v44);
              *(_QWORD *)&buf[24] = off_10213F058;
              if (SBYTE7(v42) < 0)
                operator delete(*(void **)&buf[32]);
              sub_1007A1BE8((uint64_t *)buf);
              goto LABEL_56;
            }
            if (qword_1022A0030 != -1)
              dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
            v7 = qword_1022A0038;
            if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
            {
              sub_1004E5D0C((uint64_t)(v3 + 4), __p);
              v8 = __p;
              if (v37 < 0)
                v8 = *(_BYTE **)__p;
              v9 = v3[10];
              *(_DWORD *)buf = 136381443;
              *(_QWORD *)&buf[4] = v8;
              *(_WORD *)&buf[12] = 2049;
              *(_QWORD *)&buf[14] = v9;
              *(_WORD *)&buf[22] = 2049;
              *(double *)&buf[24] = v4;
              *(_WORD *)&buf[32] = 2049;
              *(_QWORD *)&buf[34] = 0x4014000000000000;
              _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "iB: Best effort zone,%{private}s, firstExit,%{private}f, now,%{private}f, has not reached exitThreshold,%{private}f", buf, 0x2Au);
              if (SHIBYTE(v37) < 0)
                operator delete(*(void **)__p);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0030 != -1)
                dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
              v10 = qword_1022A0038;
              sub_1004E5D0C((uint64_t)(v3 + 4), v32);
              v11 = v32;
              if (v33 < 0)
                v11 = *(_BYTE **)v32;
              v12 = v3[10];
              *(_DWORD *)__p = 136381443;
              *(_QWORD *)&__p[4] = v11;
              v35 = 2049;
              v36 = v12;
              v37 = 2049;
              v38 = v4;
              v39 = 2049;
              v40 = 0x4014000000000000;
              LODWORD(v29) = 42;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 2, "iB: Best effort zone,%{private}s, firstExit,%{private}f, now,%{private}f, has not reached exitThreshold,%{private}f", __p, v29);
              v14 = v13;
              if (v33 < 0)
                operator delete(*(void **)v32);
              sub_100512490("Generic", 1, 0, 2, "void CLBTLEBeaconProviderConcrete::unlockedPerformZoneDetectionWithCache()", "%s\n", v14);
              if (v14 != buf)
                free(v14);
            }
          }
          else
          {
            if (qword_1022A0030 != -1)
              dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
            v16 = qword_1022A0038;
            if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
            {
              sub_1004E5D0C((uint64_t)(v3 + 4), buf);
              v17 = buf;
              if (buf[23] < 0)
                v17 = *(_BYTE **)buf;
              *(_DWORD *)__p = 136380675;
              *(_QWORD *)&__p[4] = v17;
              _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "iB: Best effort zone,%{private}s, subject to exit", __p, 0xCu);
              if ((buf[23] & 0x80000000) != 0)
                operator delete(*(void **)buf);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0030 != -1)
                dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
              v25 = qword_1022A0038;
              sub_1004E5D0C((uint64_t)(v3 + 4), __p);
              v26 = __p;
              if (v37 < 0)
                v26 = *(_BYTE **)__p;
              *(_DWORD *)v32 = 136380675;
              *(_QWORD *)&v32[4] = v26;
              LODWORD(v29) = 12;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v25, 2, "iB: Best effort zone,%{private}s, subject to exit", v32, v29);
              v28 = v27;
              if (SHIBYTE(v37) < 0)
                operator delete(*(void **)__p);
              sub_100512490("Generic", 1, 0, 2, "void CLBTLEBeaconProviderConcrete::unlockedPerformZoneDetectionWithCache()", "%s\n", v28);
              if (v28 != buf)
                free(v28);
            }
            *((_BYTE *)v3 + 74) = 1;
            *((double *)v3 + 10) = v4;
          }
LABEL_56:
          if (SBYTE7(v31) < 0)
            operator delete((void *)v30);
        }
        v22 = (_QWORD *)v3[1];
        if (v22)
        {
          do
          {
            v23 = v22;
            v22 = (_QWORD *)*v22;
          }
          while (v22);
        }
        else
        {
          do
          {
            v23 = (_QWORD *)v3[2];
            v24 = *v23 == (_QWORD)v3;
            v3 = v23;
          }
          while (!v24);
        }
        v3 = v23;
      }
      while (v23 != (_QWORD *)(a1 + 280));
    }
  }
}

void sub_101277B30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_101277B94(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  char *v6;
  int v7;
  uint64_t v8;
  __int128 buf;
  uint64_t v10;
  uint64_t (**v11)();
  void *v12[2];
  __int128 v13;
  uint64_t (**v14)();
  void *__p[2];
  __int128 v16;
  int v17;
  char v18;

  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
  v2 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_QWORD *)(a1 + 264);
    LODWORD(buf) = 134349056;
    *(_QWORD *)((char *)&buf + 4) = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "iB: Posting notification with proximity devices,%{public}lu", (uint8_t *)&buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
    v4 = *(_QWORD *)(a1 + 264);
    v7 = 134349056;
    v8 = v4;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0038, 2, "iB: Posting notification with proximity devices,%{public}lu", &v7, 12);
    v6 = (char *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLBTLEBeaconProviderConcrete::unlockedPostAndClearScanCache()", "%s\n", v5);
    if (v6 != (char *)&buf)
      free(v6);
  }
  *(_QWORD *)&buf = &buf;
  *((_QWORD *)&buf + 1) = &buf;
  v10 = 0;
  v11 = off_10213F058;
  *(_OWORD *)v12 = 0u;
  v13 = 0u;
  v14 = off_10213F058;
  *(_OWORD *)__p = 0u;
  v16 = 0u;
  v17 = 1;
  v18 = 1;
  if (&buf != (__int128 *)(a1 + 248))
    sub_101253A88((uint64_t *)&buf, *(_QWORD *)(a1 + 256), a1 + 248);
  v7 = 0;
  (*(void (**)(uint64_t, int *, __int128 *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v7, &buf, 0, 0xFFFFFFFFLL, 0);
  sub_1007A1BE8((uint64_t *)(a1 + 248));
  v14 = off_10213F058;
  if (SBYTE7(v16) < 0)
    operator delete(__p[0]);
  v11 = off_10213F058;
  if (SBYTE7(v13) < 0)
    operator delete(v12[0]);
  sub_1007A1BE8((uint64_t *)&buf);
}

void sub_101277DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10079E8EC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101277E1C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  NSObject *v3;
  void **v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  void *__p[2];
  char v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  void **v15;

  if (*(int *)(a1 + 208) >= 1)
  {
    v1 = *(_QWORD **)(a1 + 272);
    v2 = (_QWORD *)(a1 + 280);
    if (v1 != (_QWORD *)(a1 + 280))
    {
      do
      {
        if (*((_BYTE *)v1 + 72) && *((_BYTE *)v1 + 74))
        {
          if (qword_1022A0030 != -1)
            dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
          v3 = qword_1022A0038;
          if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_INFO))
          {
            sub_1004E5D0C((uint64_t)(v1 + 4), __p);
            v4 = __p;
            if (v9 < 0)
              v4 = (void **)__p[0];
            *(_DWORD *)buf = 68289283;
            v11 = 0;
            v12 = 2082;
            v13 = "";
            v14 = 2081;
            v15 = v4;
            _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"iB: Resetting best effort zone exit state\", \"zone\":%{private, location:escape_only}s}", buf, 0x1Cu);
            if (v9 < 0)
              operator delete(__p[0]);
          }
          *((_BYTE *)v1 + 74) = 0;
          v1[10] = 0;
        }
        v5 = (_QWORD *)v1[1];
        if (v5)
        {
          do
          {
            v6 = v5;
            v5 = (_QWORD *)*v5;
          }
          while (v5);
        }
        else
        {
          do
          {
            v6 = (_QWORD *)v1[2];
            v7 = *v6 == (_QWORD)v1;
            v1 = v6;
          }
          while (!v7);
        }
        v1 = v6;
      }
      while (v6 != v2);
    }
  }
}

void sub_101277FD0(uint64_t a1, char a2)
{
  double Current;
  double v5;

  if (*(_BYTE *)(a1 + 224))
  {
    Current = CFAbsoluteTimeGetCurrent();
    v5 = Current;
    if ((a2 & 1) != 0 || vabdd_f64(Current, *(double *)(a1 + 232)) >= 120.0)
    {
      sub_1001F40D0(*(_QWORD *)(a1 + 152), Current + *(double *)(a1 + 216));
      *(double *)(a1 + 232) = v5;
    }
  }
}

BOOL sub_101278038(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  sub_10127665C(v1);
  return sub_100E3E6F0(v1 + 160);
}

uint64_t sub_101278658(uint64_t a1, void *a2, int a3)
{
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  NSObject *v12;
  id v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _BYTE v22[20];
  int v23;
  uint8_t buf[8];
  _BYTE v25[10];
  __int16 v26;
  id v27;
  __int16 v28;
  int v29;

  v23 = a3;
  v5 = *(void **)(a1 + 312);
  if (v5)
  {

    *(_QWORD *)(a1 + 312) = 0;
  }
  if (a2)
  {
    sub_100119F3C(v22);
    sub_1001F6B14((uint64_t)v22, "UUID", (uint64_t)objc_msgSend(objc_msgSend(a2, "proximityUUID"), "UUIDString"));
    if (objc_msgSend(a2, "major"))
    {
      *(_DWORD *)buf = objc_msgSend(objc_msgSend(a2, "major"), "intValue");
      sub_10011B4E4((uint64_t)v22, "major", buf);
    }
    if (objc_msgSend(a2, "minor"))
    {
      *(_DWORD *)buf = objc_msgSend(objc_msgSend(a2, "minor"), "intValue");
      sub_10011B4E4((uint64_t)v22, "minor", buf);
    }
    *(_DWORD *)(a1 + 320) = -1;
    if (v23 != -1)
    {
      sub_10011B4E4((uint64_t)v22, "power", &v23);
      *(_DWORD *)(a1 + 320) = v23;
    }
    sub_1001E4804(buf);
    sub_1000CADE4(*(uint64_t *)buf, "BeaconAdvertiserData", (uint64_t)v22);
    v6 = *(std::__shared_weak_count **)v25;
    if (*(_QWORD *)v25)
    {
      v7 = (unint64_t *)(*(_QWORD *)v25 + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    sub_1001E4804(buf);
    sub_100569514(*(uint64_t *)buf);
    v9 = *(std::__shared_weak_count **)v25;
    if (*(_QWORD *)v25)
    {
      v10 = (unint64_t *)(*(_QWORD *)v25 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
    v12 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_INFO))
    {
      v13 = objc_msgSend(objc_msgSend(a2, "description"), "UTF8String");
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v25 = 2082;
      *(_QWORD *)&v25[2] = "";
      v26 = 2081;
      v27 = v13;
      v28 = 1026;
      v29 = v23;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"iB: Storing beacon advertisement data\", \"beacon\":%{private, location:escape_only}s, \"power\":%{public}d}", buf, 0x22u);
    }
    *(_QWORD *)(a1 + 312) = objc_msgSend(a2, "copy");
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 264))(a1);
    sub_10011A5A8(v22);
  }
  else
  {
    sub_1001E4804(buf);
    sub_100525484(*(uint64_t *)buf, "BeaconAdvertiserData", 0xFFFFFFFFLL);
    v15 = *(std::__shared_weak_count **)v25;
    if (*(_QWORD *)v25)
    {
      v16 = (unint64_t *)(*(_QWORD *)v25 + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    sub_1001E4804(buf);
    sub_100569514(*(uint64_t *)buf);
    v18 = *(std::__shared_weak_count **)v25;
    if (*(_QWORD *)v25)
    {
      v19 = (unint64_t *)(*(_QWORD *)v25 + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    *(_DWORD *)(a1 + 320) = -1;
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1);
    return 1;
  }
  return v14;
}

void sub_1012789B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101278A10(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;

  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
  v2 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_INFO))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"iB: shutdown beacons and peripheral manager\"}", (uint8_t *)v4, 0x12u);
  }
  v3 = *(void **)(a1 + 296);
  if (v3)
  {
    objc_msgSend(v3, "stopAdvertising");

    *(_QWORD *)(a1 + 296) = 0;
    *(_QWORD *)(a1 + 304) = 0;
  }
}

uint64_t sub_101278B0C(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id v4;
  NSObject *v5;
  int v6;
  NSObject *v7;
  uint64_t result;
  NSObject *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  const char *v13;
  uint8_t *v14;
  id v15;
  NSObject *v16;
  id v17;
  int v18;
  NSObject *v19;
  id v20;
  int v21;
  _BOOL4 v22;
  uint64_t v23;
  id v24;
  int v25;
  const char *v26;
  uint8_t *v27;
  NSObject *v28;
  _BOOL4 v29;
  const char *v30;
  const char *v31;
  uint8_t *v32;
  const char *v33;
  uint8_t *v34;
  uint64_t v35;
  int v36;
  id v37;
  __int16 v38;
  int v39;
  uint8_t buf[4];
  _BYTE v41[14];
  __int16 v42;
  id v43;
  __int16 v44;
  int v45;

  if (!*(_QWORD *)(a1 + 312))
  {
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
    v7 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Start advertising called when we have no region", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
      LOWORD(v36) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 17, "Start advertising called when we have no region", &v36, 2);
      v32 = (uint8_t *)v31;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLBTLEBeaconProviderConcrete::startBeaconAdvertising()", "%s\n", v31);
      if (v32 != buf)
        free(v32);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1);
    return 0;
  }
  v2 = *(id *)(a1 + 296);
  if (v2
    || (*(_QWORD *)(a1 + 304) = -[CLPeripheralManagerDelegate initWithSilo:provider:]([CLPeripheralManagerDelegate alloc], "initWithSilo:provider:", *(_QWORD *)(a1 + 40), a1), v2 = objc_msgSend(objc_alloc((Class)CBPeripheralManager), "initWithDelegate:queue:", *(_QWORD *)(a1 + 304), objc_msgSend(*(id *)(a1 + 40), "queue")), (*(_QWORD *)(a1 + 296) = v2) != 0))
  {
    if (objc_msgSend(v2, "state") != (id)5)
    {
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
      v9 = qword_1022A0038;
      if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
      {
        v10 = objc_msgSend(*(id *)(a1 + 296), "state");
        *(_DWORD *)buf = 67240192;
        *(_DWORD *)v41 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning BT state not yet powered %{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0030 != -1)
          dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
        v11 = qword_1022A0038;
        v12 = objc_msgSend(*(id *)(a1 + 296), "state");
        v36 = 67240192;
        LODWORD(v37) = v12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 0, "#Warning BT state not yet powered %{public}d", &v36, 8);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLBTLEBeaconProviderConcrete::startBeaconAdvertising()", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
      return 1;
    }
    if (objc_msgSend(*(id *)(a1 + 296), "isAdvertising"))
    {
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
      v3 = qword_1022A0038;
      if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "iB: Stopping previous advertising", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0030 != -1)
          dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
        LOWORD(v36) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 2, "iB: Stopping previous advertising", &v36, 2);
        v34 = (uint8_t *)v33;
        sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLBTLEBeaconProviderConcrete::startBeaconAdvertising()", "%s\n", v33);
        if (v34 != buf)
          free(v34);
      }
      objc_msgSend(*(id *)(a1 + 296), "stopAdvertising");
    }
    if (*(_DWORD *)(a1 + 320) == -1)
    {
      v4 = 0;
    }
    else
    {
      v4 = objc_msgSend(objc_alloc((Class)NSNumber), "initWithInt:", *(unsigned int *)(a1 + 320));
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
      v5 = qword_1022A0038;
      if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_INFO))
      {
        v6 = *(_DWORD *)(a1 + 320);
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)v41 = 0;
        *(_WORD *)&v41[4] = 2082;
        *(_QWORD *)&v41[6] = "";
        v42 = 1026;
        LODWORD(v43) = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"iB: Setting beacon power\", \"power\":%{public}d}", buf, 0x18u);
      }
    }
    v15 = objc_msgSend(*(id *)(a1 + 312), "peripheralDataWithMeasuredPower:", v4);

    if (v15)
    {
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
      v16 = qword_1022A0038;
      if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_INFO))
      {
        v17 = objc_msgSend(objc_msgSend(*(id *)(a1 + 312), "description"), "UTF8String");
        v18 = *(_DWORD *)(a1 + 320);
        *(_DWORD *)buf = 68289539;
        *(_DWORD *)v41 = 0;
        *(_WORD *)&v41[4] = 2082;
        *(_QWORD *)&v41[6] = "";
        v42 = 2081;
        v43 = v17;
        v44 = 1026;
        v45 = v18;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"iB: Starting beacon advertising\", \"beacon\":%{private, location:escape_only}s, \"power\":%{public}d}", buf, 0x22u);
      }
      objc_msgSend(*(id *)(a1 + 296), "startAdvertising:", v15);
      return 1;
    }
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
    v19 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_FAULT))
    {
      v20 = objc_msgSend(objc_msgSend(*(id *)(a1 + 312), "description"), "UTF8String");
      v21 = *(_DWORD *)(a1 + 320);
      *(_DWORD *)buf = 136380931;
      *(_QWORD *)v41 = v20;
      *(_WORD *)&v41[8] = 1026;
      *(_DWORD *)&v41[10] = v21;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "Error starting beacon advertising %{private}s, power %{public}d", buf, 0x12u);
    }
    v22 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v22)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
      v23 = qword_1022A0038;
      v24 = objc_msgSend(objc_msgSend(*(id *)(a1 + 312), "description"), "UTF8String");
      v25 = *(_DWORD *)(a1 + 320);
      v36 = 136380931;
      v37 = v24;
      v38 = 1026;
      v39 = v25;
      LODWORD(v35) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v23, 17, "Error starting beacon advertising %{private}s, power %{public}d", &v36, v35);
      v27 = (uint8_t *)v26;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLBTLEBeaconProviderConcrete::startBeaconAdvertising()", "%s\n", v26);
      if (v27 == buf)
        return 0;
      goto LABEL_59;
    }
  }
  else
  {
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
    v28 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_FAULT, "Can't allocate peripheral manager", buf, 2u);
    }
    v29 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v29)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
      LOWORD(v36) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 17, "Can't allocate peripheral manager", &v36, 2);
      v27 = (uint8_t *)v30;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLBTLEBeaconProviderConcrete::startBeaconAdvertising()", "%s\n", v30);
      if (v27 == buf)
        return 0;
LABEL_59:
      free(v27);
      return 0;
    }
  }
  return result;
}

void sub_10127940C(id a1)
{
  qword_1022A0038 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

void sub_101279438(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t *sub_101279464(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)sub_1007A32B4((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    sub_1012794F8((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000145B0(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

uint64_t sub_1012794F8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t result;

  v5 = a1 + 8;
  v6 = operator new(0x60uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_101279578((uint64_t)v6 + 32, *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_10127955C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  char *v2;
  uint64_t v3;

  *v1 = 0;
  sub_101253FC0(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_101279578(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = off_10213F058;
  v4 = a1 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_100115CE4((_BYTE *)v4, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)v4 = v5;
  }
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_WORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 42) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 1;
  return a1;
}

BOOL sub_1012795F4()
{
  return os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_FAULT);
}

BOOL sub_101279614()
{
  uint64_t v0;

  return os_log_type_enabled(*(os_log_t *)(v0 + 56), OS_LOG_TYPE_INFO);
}

BOOL sub_101279624()
{
  uint64_t v0;

  return os_signpost_enabled(*(os_log_t *)(v0 + 56));
}

id sub_101279A38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = objc_opt_class(NSString, a2);
  if ((objc_opt_isKindOfClass(a2, v6) & 1) == 0)
    sub_101949CF0();
  v8 = objc_opt_class(NSString, v7);
  if ((objc_opt_isKindOfClass(a3, v8) & 1) == 0)
    sub_101949B84();
  return objc_msgSend(*(id *)(a1 + 32), "setValue:forHTTPHeaderField:", a3, a2);
}

void sub_10127A734(id a1)
{
  qword_1022A0208 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

_BYTE *sub_10127A760(_BYTE *a1)
{
  uint64_t v2;
  int v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  int v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  char v15;
  char v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  char v20;
  char v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  char v25;
  char v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  int v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  int v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  int v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  char v42;
  char v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  char v47;
  char v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  char v52;
  char v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  char v57;
  char v58;
  unint64_t *v59;
  uint64_t v61;
  std::__shared_weak_count *v62;
  BOOL v63;

  sub_10142044C((uint64_t)a1);
  *(_QWORD *)(v2 + 256) = 0;
  sub_100197040();
  if (sub_100195F08())
  {
    sub_1001E4804(&v61);
    v63 = 0;
    v3 = sub_1001E4874(v61, "CLOutdoorEstimatorKeepOnGnssMeasurement", &v63) ^ 1;
    if (v63)
      LOBYTE(v3) = 1;
    a1[256] = v3;
    v4 = v62;
    if (v62)
    {
      p_shared_owners = (unint64_t *)&v62->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    sub_1001E4804(&v61);
    v63 = 0;
    v7 = sub_1001E4874(v61, "CLOutdoorEstimatorKeepOnMotionActivity", &v63) ^ 1;
    if (v63)
      LOBYTE(v7) = 1;
    a1[257] = v7;
    v8 = v62;
    if (v62)
    {
      v9 = (unint64_t *)&v62->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    sub_1001E4804(&v61);
    v63 = 0;
    v11 = sub_1001E4874(v61, "CLOutdoorEstimatorKeepOnAlsEvidence", &v63) ^ 1;
    if (v63)
      LOBYTE(v11) = 1;
    a1[263] = v11;
    v12 = v62;
    if (v62)
    {
      v13 = (unint64_t *)&v62->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    sub_1001E4804(&v61);
    v63 = 0;
    v15 = sub_1001E4874(v61, "CLOutdoorEstimatorKeepOnCMGpsModelOutput", &v63);
    if (v63)
      v16 = v15;
    else
      v16 = 0;
    a1[260] = v16;
    v17 = v62;
    if (v62)
    {
      v18 = (unint64_t *)&v62->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    sub_1001E4804(&v61);
    v63 = 0;
    v20 = sub_1001E4874(v61, "CLOutdoorEstimatorKeepOnCMWifiModelOutput", &v63);
    if (v63)
      v21 = v20;
    else
      v21 = 0;
    a1[261] = v21;
    v22 = v62;
    if (v62)
    {
      v23 = (unint64_t *)&v62->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    sub_1001E4804(&v61);
    v63 = 0;
    v25 = sub_1001E4874(v61, "CLOutdoorEstimatorKeepOnCMAlsModelOutput", &v63);
    if (v63)
      v26 = v25;
    else
      v26 = 0;
    a1[262] = v26;
    v27 = v62;
    if (v62)
    {
      v28 = (unint64_t *)&v62->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      goto LABEL_97;
    }
  }
  else
  {
    sub_1001E4804(&v61);
    v63 = 0;
    v30 = sub_1001E4874(v61, "CLOutdoorEstimatorKeepOnGnssMeasurement", &v63) ^ 1;
    if (v63)
      LOBYTE(v30) = 1;
    a1[256] = v30;
    v31 = v62;
    if (v62)
    {
      v32 = (unint64_t *)&v62->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    sub_1001E4804(&v61);
    v63 = 0;
    v34 = sub_1001E4874(v61, "CLOutdoorEstimatorKeepOnMotionActivity", &v63) ^ 1;
    if (v63)
      LOBYTE(v34) = 1;
    a1[257] = v34;
    v35 = v62;
    if (v62)
    {
      v36 = (unint64_t *)&v62->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    sub_1001E4804(&v61);
    v63 = 0;
    v38 = sub_1001E4874(v61, "CLOutdoorEstimatorKeepOnAlsEvidence", &v63) ^ 1;
    if (v63)
      LOBYTE(v38) = 1;
    a1[263] = v38;
    v39 = v62;
    if (v62)
    {
      v40 = (unint64_t *)&v62->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    sub_1001E4804(&v61);
    v63 = 0;
    v42 = sub_1001E4874(v61, "CLOutdoorEstimatorKeepOnCMGpsModelOutput", &v63);
    if (v63)
      v43 = v42;
    else
      v43 = 0;
    a1[260] = v43;
    v44 = v62;
    if (v62)
    {
      v45 = (unint64_t *)&v62->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    sub_1001E4804(&v61);
    v63 = 0;
    v47 = sub_1001E4874(v61, "CLOutdoorEstimatorKeepOnCMWifiModelOutput", &v63);
    if (v63)
      v48 = v47;
    else
      v48 = 0;
    a1[261] = v48;
    v49 = v62;
    if (v62)
    {
      v50 = (unint64_t *)&v62->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    sub_1001E4804(&v61);
    v63 = 0;
    v52 = sub_1001E4874(v61, "CLOutdoorEstimatorKeepOnCMAlsModelOutput", &v63);
    if (v63)
      v53 = v52;
    else
      v53 = 0;
    a1[262] = v53;
    v54 = v62;
    if (v62)
    {
      v55 = (unint64_t *)&v62->__shared_owners_;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    sub_1001E4804(&v61);
    v63 = 0;
    v57 = sub_1001E4874(v61, "CLOutdoorEstimatorKeepOnGnssAvailability", &v63);
    if (v63)
      v58 = v57;
    else
      v58 = 0;
    a1[258] = v58;
    v27 = v62;
    if (v62)
    {
      v59 = (unint64_t *)&v62->__shared_owners_;
      do
        v29 = __ldaxr(v59);
      while (__stlxr(v29 - 1, v59));
LABEL_97:
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
  return a1;
}

void sub_10127AD18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  sub_1014204C0(v2);
  _Unwind_Resume(a1);
}

void sub_10127ADA8(uint64_t a1, int *a2)
{
  sub_101424A14(a1, *a2, a2[1]);
}

void sub_10127ADB4(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  int v7;
  double *v8;
  double v9;
  double *v10;
  double *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double *v18;
  uint64_t v19;
  double v20;
  NSObject *v21;
  char *v22;
  double *v23;
  unint64_t v24;
  double v25;
  unint64_t v26;
  double v27;
  NSObject *v28;
  char *v29;
  double *__p;
  double *v31;
  unint64_t v32;
  double v33;
  int v34;
  double v35;
  int v36;
  int v37;
  double v38;
  __int16 v39;
  int v40;
  __int16 v41;
  double v42;
  uint8_t buf[4];
  double v44;
  __int16 v45;
  int v46;
  __int16 v47;
  double v48;

  if (*(_BYTE *)(a1 + 256))
  {
    v32 = 0;
    v33 = 0.0;
    v34 = 0;
    v35 = 0.0;
    v36 = 0;
    __p = 0;
    v31 = 0;
    v3 = *(_QWORD *)(a2 + 24);
    v4 = *(_QWORD *)(a2 + 32);
    if (v3 != v4)
    {
      v7 = 0;
      v8 = 0;
      do
      {
        v9 = *(float *)(v3 + 16);
        if (fabs(v9) >= 2.22044605e-16)
        {
          if ((unint64_t)v8 >= v32)
          {
            v11 = __p;
            v12 = v8 - __p;
            v13 = v12 + 1;
            if ((unint64_t)(v12 + 1) >> 61)
              sub_100259694();
            v14 = v32 - (_QWORD)__p;
            if ((uint64_t)(v32 - (_QWORD)__p) >> 2 > v13)
              v13 = v14 >> 2;
            if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
              v15 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v15 = v13;
            if (v15)
            {
              v15 = (unint64_t)sub_10025E6A0((uint64_t)&v32, v15);
              v17 = v16;
              v11 = __p;
              v8 = v31;
            }
            else
            {
              v17 = 0;
            }
            v18 = (double *)(v15 + 8 * v12);
            *v18 = v9;
            v10 = v18 + 1;
            while (v8 != v11)
            {
              v19 = *((_QWORD *)v8-- - 1);
              *((_QWORD *)v18-- - 1) = v19;
            }
            __p = v18;
            v32 = v15 + 8 * v17;
            if (v11)
              operator delete(v11);
          }
          else
          {
            *v8 = v9;
            v10 = v8 + 1;
          }
          v31 = v10;
          if (*(float *)(v3 + 8) >= 0.5)
            v36 = ++v7;
          v8 = v10;
        }
        v3 += 28;
      }
      while (v3 != v4);
      if (__p != v8)
      {
        sub_1002075EC(__p, v8, (uint64_t)buf, 126 - 2 * __clz(v8 - __p), 1);
        v33 = a3;
        v34 = 3;
        sub_100197040();
        if (sub_100195F08())
        {
          v20 = *__p;
        }
        else
        {
          v23 = __p;
          v24 = v31 - __p;
          v25 = 0.0;
          if (v24 >= 8)
            v24 = 8;
          if (v24)
          {
            v26 = v24;
            do
            {
              v27 = *v23++;
              v25 = v25 + v27;
              --v26;
            }
            while (v26);
          }
          v20 = v25 / (double)v24;
        }
        v35 = v20;
        sub_101420B9C(a1, &v33);
        if (qword_1022A0190 != -1)
          dispatch_once(&qword_1022A0190, &stru_1021ABD50);
        v28 = qword_1022A0198;
        if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134284033;
          v44 = v35;
          v45 = 1025;
          v46 = v36;
          v47 = 2048;
          v48 = a3;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimatorController_feedGnssMeasurement,cn0dBHz,%{private}f,numTrackedSatellitesAboveElevationMask,%{private}d,currentTime,%f", buf, 0x1Cu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0190 != -1)
            dispatch_once(&qword_1022A0190, &stru_1021ABD50);
          v37 = 134284033;
          v38 = v35;
          v39 = 1025;
          v40 = v36;
          v41 = 2048;
          v42 = a3;
          v29 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "CLOutdoorEstimatorController_feedGnssMeasurement,cn0dBHz,%{private}f,numTrackedSatellitesAboveElevationMask,%{private}d,currentTime,%f", &v37, 28);
          sub_100512490("Generic", 1, 0, 2, "void CLOutdoorEstimatorController::feedGnssMeasurement(const CLOutdoorGnssLeechLocation &, const CFAbsoluteTime)", "%s\n", v29);
          if (v29 != (char *)buf)
            free(v29);
        }
        v8 = __p;
      }
      if (v8)
        operator delete(v8);
    }
  }
  else
  {
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_1021ABD50);
    v21 = qword_1022A0198;
    if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimatorController,CLOutdoorEstimatorTurnOffGnssMeasurement", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0190 != -1)
        dispatch_once(&qword_1022A0190, &stru_1021ABD50);
      LOWORD(v33) = 0;
      v22 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "CLOutdoorEstimatorController,CLOutdoorEstimatorTurnOffGnssMeasurement", &v33, 2);
      sub_100512490("Generic", 1, 0, 2, "void CLOutdoorEstimatorController::feedGnssMeasurement(const CLOutdoorGnssLeechLocation &, const CFAbsoluteTime)", "%s\n", v22);
      if (v22 != (char *)buf)
        free(v22);
    }
  }
}

void sub_10127B2D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10127B304(uint64_t a1, _DWORD *a2, double a3)
{
  NSObject *v5;
  double v6;
  int32x4_t v7;
  int32x4_t v8;
  int16x8_t v9;
  NSObject *v10;
  char *v11;
  char *v12;
  _WORD v13[8];
  uint8_t buf[8];
  int v15;
  unsigned __int32 v16;
  BOOL v17;
  char v18;
  char v19;
  char v20;
  BOOL v21;

  if (*(_BYTE *)(a1 + 259))
  {
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_1021ABD50);
    v5 = qword_1022A0198;
    if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimatorController,feedMapMatchingRouteHint", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0190 != -1)
        dispatch_once(&qword_1022A0190, &stru_1021ABD50);
      v13[0] = 0;
      v11 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "CLOutdoorEstimatorController,feedMapMatchingRouteHint", v13, 2);
      sub_100512490("Generic", 1, 0, 2, "void CLOutdoorEstimatorController::feedMapMatchingRouteHint(const CLMapsRouteHintData &, const CFAbsoluteTime)", "%s\n", v11);
      if (v11 != (char *)buf)
        free(v11);
    }
    v6 = sub_1001FCBB4();
    if (!sub_1002199F0((uint64_t)a2, v6, 6.0))
    {
      v7.i64[0] = *(_QWORD *)a2;
      v8 = vzip1q_s32(v7, v7);
      v8.i32[2] = *(_QWORD *)a2;
      v9 = (int16x8_t)vceqq_s32(v8, (int32x4_t)xmmword_101C48BC0);
      *(int8x8_t *)v9.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v9), (int8x8_t)0x1000100010001);
      v16 = vmovn_s16(v9).u32[0];
      v17 = v7.i32[1] == 0;
      v18 = (*a2 == 0) & ~sub_1002199F0((uint64_t)a2, v6, 6.0);
      v19 = (*a2 == 1) & ~sub_1002199F0((uint64_t)a2, v6, 6.0);
      v20 = (*a2 == 3) & ~sub_1002199F0((uint64_t)a2, v6, 6.0);
      v21 = sub_1008ABF50(a2, v6);
      *(double *)buf = a3;
      v15 = 4;
      sub_101424890();
    }
  }
  else
  {
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_1021ABD50);
    v10 = qword_1022A0198;
    if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimatorController,CLOutdoorEstimatorTurnOffMapMatchingRouteHint", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0190 != -1)
        dispatch_once(&qword_1022A0190, &stru_1021ABD50);
      v13[0] = 0;
      v12 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "CLOutdoorEstimatorController,CLOutdoorEstimatorTurnOffMapMatchingRouteHint", v13, 2);
      sub_100512490("Generic", 1, 0, 2, "void CLOutdoorEstimatorController::feedMapMatchingRouteHint(const CLMapsRouteHintData &, const CFAbsoluteTime)", "%s\n", v12);
      if (v12 != (char *)buf)
        free(v12);
    }
  }
}

void sub_10127B6C0(uint64_t a1, __int128 *a2, double a3)
{
  NSObject *v4;
  const char *v5;
  NSObject *v6;
  uint8_t *v7;
  double v8;
  int v9;
  __int128 v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  double v14;
  uint8_t buf[4];
  uint64_t v16;
  __int16 v17;
  double v18;

  if (*(_BYTE *)(a1 + 261))
  {
    v10 = *a2;
    v8 = a3;
    v9 = 7;
    sub_101423B58(a1, &v8);
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_1021ABD50);
    v4 = qword_1022A0198;
    if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134283777;
      v16 = *((_QWORD *)&v10 + 1);
      v17 = 2048;
      v18 = a3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimatorController_feedCMWifiModelOutput,wifiModelOutputEvidence,%{private}f,currentTime,%f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0190 != -1)
        dispatch_once(&qword_1022A0190, &stru_1021ABD50);
      v11 = 134283777;
      v12 = *((_QWORD *)&v10 + 1);
      v13 = 2048;
      v14 = a3;
      v5 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "CLOutdoorEstimatorController_feedCMWifiModelOutput,wifiModelOutputEvidence,%{private}f,currentTime,%f", &v11, 22, *(_QWORD *)&v8);
LABEL_19:
      v7 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "void CLOutdoorEstimatorController::feedCMWifiModelOutput(const CLOutdoorEstimator_Type::CMWiFiModelOutput &, const CFAbsoluteTime)", "%s\n", v5);
      if (v7 != buf)
        free(v7);
    }
  }
  else
  {
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_1021ABD50);
    v6 = qword_1022A0198;
    if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimatorController,CLOutdoorEstimatorTurnOffCMWifiModelOutput", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0190 != -1)
        dispatch_once(&qword_1022A0190, &stru_1021ABD50);
      LOWORD(v8) = 0;
      v5 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "CLOutdoorEstimatorController,CLOutdoorEstimatorTurnOffCMWifiModelOutput", &v8, 2, *(_QWORD *)&v8);
      goto LABEL_19;
    }
  }
}

void sub_10127B980(uint64_t a1, uint64_t a2, double a3)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  const char *v14;
  NSObject *v15;
  uint8_t *v16;
  _BYTE v17[24];
  _BYTE v18[24];
  uint8_t buf[4];
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  double v28;

  if (*(_BYTE *)(a1 + 263))
  {
    sub_101421D2C(a1, (double *)a2);
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_1021ABD50);
    v5 = qword_1022A0198;
    if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
    {
      v6 = *(_QWORD *)(a2 + 16);
      v7 = *(_QWORD *)(a2 + 24);
      v8 = *(unsigned __int8 *)(a2 + 32);
      v9 = *(_QWORD *)(a2 + 40);
      *(_DWORD *)buf = 134284545;
      v20 = v6;
      v21 = 2049;
      v22 = v7;
      v23 = 1025;
      v24 = v8;
      v25 = 1025;
      v26 = v9;
      v27 = 2048;
      v28 = a3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimatorController_feedAlsEvidence,alsTrustedLux,%{private}f,sunElevationAngleDegrees,%{private}f,isAstronomicalDaytime,%{private}d,daylightConfidence,%{private}d,currentTime,%f", buf, 0x2Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0190 != -1)
        dispatch_once(&qword_1022A0190, &stru_1021ABD50);
      v10 = *(_QWORD *)(a2 + 16);
      v11 = *(_QWORD *)(a2 + 24);
      v12 = *(unsigned __int8 *)(a2 + 32);
      v13 = *(_QWORD *)(a2 + 40);
      *(_DWORD *)v17 = 134284545;
      *(_QWORD *)&v17[4] = v10;
      *(_WORD *)&v17[12] = 2049;
      *(_QWORD *)&v17[14] = v11;
      *(_WORD *)&v17[22] = 1025;
      *(_DWORD *)v18 = v12;
      *(_WORD *)&v18[4] = 1025;
      *(_DWORD *)&v18[6] = v13;
      *(_WORD *)&v18[10] = 2048;
      *(double *)&v18[12] = a3;
      v14 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "CLOutdoorEstimatorController_feedAlsEvidence,alsTrustedLux,%{private}f,sunElevationAngleDegrees,%{private}f,isAstronomicalDaytime,%{private}d,daylightConfidence,%{private}d,currentTime,%f", v17, 44, *(_OWORD *)v17, *(_QWORD *)&v17[16], *(_OWORD *)v18, *(_QWORD *)&v18[16]);
LABEL_19:
      v16 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLOutdoorEstimatorController::feedAlsEvidence(const CLOutdoorEstimator_Type::AlsEvidence &, const CFAbsoluteTime)", "%s\n", v14);
      if (v16 != buf)
        free(v16);
    }
  }
  else
  {
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_1021ABD50);
    v15 = qword_1022A0198;
    if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimatorController,CLOutdoorEstimatorTurnOffAlsEvidence", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0190 != -1)
        dispatch_once(&qword_1022A0190, &stru_1021ABD50);
      *(_WORD *)v17 = 0;
      v14 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "CLOutdoorEstimatorController,CLOutdoorEstimatorTurnOffAlsEvidence", v17, 2, *(_OWORD *)v17, *(_QWORD *)&v17[16], *(_OWORD *)v18, *(_QWORD *)&v18[16]);
      goto LABEL_19;
    }
  }
}

void sub_10127BC84(id a1)
{
  qword_1022A0198 = (uint64_t)os_log_create("com.apple.locationd.Position", "Outdoor");
}

BOOL sub_10127BCB0()
{
  unint64_t v0;

  HIDWORD(v0) = -1030792151 * rand() + 85899344;
  LODWORD(v0) = HIDWORD(v0);
  return (v0 >> 2) < 0x28F5C29;
}

uint64_t sub_10127BCEC(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  NSDictionary *v10;
  NSObject *v11;
  const char *v13;
  uint8_t *v14;
  _QWORD v15[5];
  int v16;
  NSDictionary *v17;
  uint8_t buf[4];
  NSDictionary *v19;
  _QWORD v20[4];
  _QWORD v21[4];

  v20[0] = CFSTR("numAssociatedApCentroids");
  v21[0] = +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", a4);
  v20[1] = CFSTR("averageCentroidAgeInHours");
  LODWORD(v8) = llround(a1);
  v21[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v8);
  v20[2] = CFSTR("oldestCentroidAgeInHours");
  LODWORD(v9) = llround(a2);
  v21[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v9);
  v20[3] = CFSTR("isAssociated");
  v21[3] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a5);
  v10 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v21, v20, 4);
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021ABD70);
  v11 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138543362;
    v19 = v10;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Submitting CoreAnalytics event for the associated AP centroid database, %{public}@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021ABD70);
    v16 = 138543362;
    v17 = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "Submitting CoreAnalytics event for the associated AP centroid database, %{public}@", &v16, 12);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiAssociatedApCentroidDatabaseAnalytics::submitMetrics(const size_t, const double, const double, const BOOL)", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_10127BF74;
  v15[3] = &unk_102132010;
  v15[4] = v10;
  return AnalyticsSendEventLazy(CFSTR("com.apple.wifiAssociatedApCentroidDatabase.analytics"), v15);
}

uint64_t sub_10127BF74(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

void sub_10127BF7C(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

BOOL sub_10127BFA8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  NSObject *v6;
  std::string::size_type v7;
  uint64_t v8;
  const char *v9;
  std::string *v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  uint64_t i;
  NSObject *v15;
  std::string::size_type v16;
  _BOOL8 v17;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  int v23;
  double v24;
  double v25;
  int v26;
  double *v27;
  NSObject *v28;
  std::string::size_type v29;
  uint64_t v30;
  const char *v31;
  std::string *v32;
  double v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  double v37;
  int v38;
  uint64_t v39;
  std::string buf[68];

  v2 = *(_QWORD *)(a1 + 120);
  if (!v2)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v6 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      v7 = *(_QWORD *)(a1 + 248);
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 134349056;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,invalid bestParticle road", (uint8_t *)buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v8 = *(_QWORD *)(a1 + 248);
    v38 = 134349056;
    v39 = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,Unexpected,invalid bestParticle road", &v38, 12);
    v10 = (std::string *)v9;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMM::MMSnapData::fillCrumb()", "%s\n", v9);
    goto LABEL_57;
  }
  *(_DWORD *)(a1 + 520) = 1;
  v3 = *(_QWORD *)(a1 + 152);
  v4 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 392) = v3;
  *(_QWORD *)(a1 + 400) = v4;
  v5 = *(float *)(a1 + 144);
  *(double *)(a1 + 408) = v5;
  *(_QWORD *)(a1 + 528) = v3;
  *(_QWORD *)(a1 + 536) = v4;
  *(double *)(a1 + 544) = v5;
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(v2 + 20);
  if (*(char *)(v2 + 71) < 0)
    sub_100115CE4(buf, *(void **)(v2 + 48), *(_QWORD *)(v2 + 56));
  else
    buf[0] = *(std::string *)(v2 + 48);
  std::string::operator=((std::string *)(a1 + 368), buf);
  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf[0].__r_.__value_.__l.__data_);
  v11 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)v11;
  *(_BYTE *)(a1 + 601) = *(_BYTE *)(v11 + 19);
  LOBYTE(v11) = *(_BYTE *)(v11 + 18);
  v12 = *(_QWORD *)(a1 + 168);
  v13 = *(double *)(a1 + 176);
  *(float *)(a1 + 416) = v13;
  *(_BYTE *)(a1 + 602) = v11;
  *(_QWORD *)(a1 + 512) = v12;
  for (i = *(_QWORD *)(a1 + 208); i != *(_QWORD *)(a1 + 216); i += 72)
  {
    if (*(_DWORD *)(i + 64) == 1)
    {
      *(_QWORD *)(a1 + 472) = *(_QWORD *)(i + 16);
      *(_QWORD *)(a1 + 480) = *(_QWORD *)(i + 56);
      if (*(_BYTE *)(a1 + 712))
        *(_QWORD *)(a1 + 408) = *(_QWORD *)(a1 + 344);
      *(_BYTE *)(a1 + 505) = *(_BYTE *)(a1 + 745);
      v36 = 0;
      v37 = 0.0;
      sub_1010B9950((double *)(a1 + 672), &v37, (double *)&v36, *(double *)(a1 + 152), *(double *)(a1 + 160), *(double *)(a1 + 312), *(float *)(a1 + 144), *(double *)(a1 + 296), *(double *)(a1 + 304));
      v19 = *(_QWORD *)(a1 + 120);
      v17 = v19 != 0;
      if (v19)
      {
        v20 = *(int *)(v19 + 20);
        v21 = 0.5;
        v22 = 1.0;
        if ((_DWORD)v20 == 9 || (v23 = *(_DWORD *)(v19 + 72), v23 == 6))
        {
          v24 = 1.0;
        }
        else
        {
          v24 = 1.0;
          if (v23 != 255)
          {
            v25 = *(double *)(v19 + 96);
            if (v25 < 0.000001)
            {
              v25 = 1.0;
              if ((v20 & 0xFFFFFFFE) != 8)
              {
                v26 = *(unsigned __int8 *)(v19 + 16);
                if (v20 > 7)
                {
                  v25 = dbl_101BAFD30[v26 == 0];
                }
                else
                {
                  if (v26)
                    v27 = (double *)&unk_101C48C40;
                  else
                    v27 = (double *)&unk_101C48C80;
                  v25 = v27[v20];
                }
              }
            }
            v24 = v25 + 1.0;
            v21 = v25 * 0.5 + 1.0;
          }
        }
        *(double *)(a1 + 664) = v24;
        if (v37 >= 0.0)
          v22 = -1.0;
        v33 = v37 + v22 * v21;
        *(_QWORD *)(a1 + 488) = v36;
        *(double *)(a1 + 496) = v33;
      }
      else
      {
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
        v28 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
        {
          v29 = *(_QWORD *)(a1 + 248);
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 134349056;
          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v29;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,unable to determine roadWidth when filling crumb", (uint8_t *)buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
          v30 = *(_QWORD *)(a1 + 248);
          v38 = 134349056;
          v39 = v30;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,Unexpected,unable to determine roadWidth when filling crumb", &v38, 12);
          v32 = (std::string *)v31;
          sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMM::MMSnapData::fillCrumb()", "%s\n", v31);
          if (v32 != buf)
            free(v32);
        }
      }
      return v17;
    }
  }
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
  v15 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
  {
    v16 = *(_QWORD *)(a1 + 248);
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 134349056;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,RawGPSScore not available", (uint8_t *)buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v34 = *(_QWORD *)(a1 + 248);
    v38 = 134349056;
    v39 = v34;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,Unexpected,RawGPSScore not available", &v38, 12);
    v10 = (std::string *)v35;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMM::MMSnapData::fillCrumb()", "%s\n", v35);
LABEL_57:
    if (v10 != buf)
      free(v10);
  }
  return 0;
}

void sub_10127C5E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_10127C60C(uint64_t *a1, double *a2, double *a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  double v8;
  double v9;
  double v11;
  double *v12;

  v4 = *a1;
  if (!*a1)
  {
    *a2 = 0.0;
    v9 = 0.0;
    goto LABEL_12;
  }
  v5 = *(int *)(v4 + 20);
  if ((_DWORD)v5 == 9 || ((v6 = *(_DWORD *)(v4 + 72), v6 != 255) ? (v7 = v6 == 6) : (v7 = 1), v7))
  {
    v8 = dbl_101C42270[*(_BYTE *)(v4 + 16) == 0];
    if (a4)
      v8 = 1.0;
    *a2 = v8;
    v9 = v8 * 0.5;
    goto LABEL_12;
  }
  v11 = *(double *)(v4 + 96);
  *a2 = v11;
  if (v11 < 0.000001)
  {
    if ((v5 & 0xFFFFFFFE) == 8)
    {
      v11 = dbl_101BAFD30[*(_BYTE *)(v4 + 16) == 0];
      if (a4)
        v11 = 1.0;
      goto LABEL_27;
    }
    if (*(_BYTE *)(v4 + 16))
    {
      if (v5 >= 8)
      {
        v11 = 5.55000019;
        goto LABEL_27;
      }
      v12 = (double *)&unk_101C48C40;
    }
    else
    {
      if (v5 >= 8)
      {
        v11 = 7.4000001;
        goto LABEL_27;
      }
      v12 = (double *)&unk_101C48C80;
    }
    v11 = v12[v5];
LABEL_27:
    *a2 = v11;
  }
  *a3 = v11 * 0.5;
  if (!a4)
    return v4 != 0;
  *a2 = *a2 + 1.0;
  v9 = *a3 + 1.0;
LABEL_12:
  *a3 = v9;
  return v4 != 0;
}

void sub_10127C738(double *a1, uint64_t a2, uint64_t a3)
{
  int v5;
  double v6;
  double v7;
  double v8;
  BOOL v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  int v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  int v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  double v38;
  __int16 v39;
  int v40;
  uint8_t buf[4];
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  double v48;
  __int16 v49;
  int v50;

  v5 = *(unsigned __int8 *)(a2 + 504);
  if (*(_BYTE *)(a2 + 504))
  {
    if (!*(_BYTE *)(a3 + 504))
    {
      *a1 = 0.0;
      a1[1] = 0.0;
      a1[2] = 1.0;
    }
  }
  else if (*(_BYTE *)(a3 + 504))
  {
    *(_OWORD *)a1 = xmmword_101C16BA0;
    a1[2] = 0.0;
  }
  v6 = *(double *)(a2 + 264);
  v7 = -0.1;
  if (v6 >= 0.0)
  {
    v8 = *(double *)(a3 + 264);
    if (v8 >= 0.0)
      v7 = vabdd_f64(v6, v8) * 0.1;
  }
  if (v5)
    v9 = *(_BYTE *)(a2 + 505) == 0;
  else
    v9 = 0;
  if (v9)
    v10 = v7;
  else
    v10 = -v7;
  v11 = *a1;
  v12 = a1[1] + v10;
  if (v9)
    v7 = -v7;
  v13 = fmin(fmax(a1[2] + v7, 0.0), 1.0);
  v14 = fmin(fmax(v12, 0.0), 1.0);
  a1[1] = v14;
  a1[2] = v13;
  v15 = v13 * *(double *)(a2 + 296) + v14 * *(double *)(a2 + 392);
  v16 = v13 * *(double *)(a2 + 304) + v14 * *(double *)(a2 + 400);
  *a1 = v11 + 1.0;
  *(double *)(a2 + 392) = v15;
  *(double *)(a2 + 400) = v16;
  *(double *)(a2 + 568) = v15;
  *(double *)(a2 + 576) = v16;
  *(_DWORD *)(a2 + 520) = 3;
  if (v13 >= 1.0)
  {
    v17 = 0;
  }
  else
  {
    if (v14 < 1.0)
      goto LABEL_23;
    v17 = 1;
  }
  *(_DWORD *)(a2 + 520) = v17;
LABEL_23:
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
  v18 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
  {
    v19 = *(_QWORD *)(a2 + 248);
    v21 = *((_QWORD *)a1 + 1);
    v20 = *((_QWORD *)a1 + 2);
    v22 = *a1;
    v23 = *(_DWORD *)(a2 + 520);
    *(_DWORD *)buf = 134350080;
    v42 = v19;
    v43 = 2050;
    v44 = v20;
    v45 = 2050;
    v46 = v21;
    v47 = 2050;
    v48 = v22;
    v49 = 1026;
    v50 = v23;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,fRawWeight,%{public}.2lf,fSnapWeight,%{public}.2lf,fTimeInMode,%{public}.2lf,snapType,%{public}d", buf, 0x30u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v24 = *(_QWORD *)(a2 + 248);
    v26 = *((_QWORD *)a1 + 1);
    v25 = *((_QWORD *)a1 + 2);
    v27 = *a1;
    v28 = *(_DWORD *)(a2 + 520);
    v31 = 134350080;
    v32 = v24;
    v33 = 2050;
    v34 = v25;
    v35 = 2050;
    v36 = v26;
    v37 = 2050;
    v38 = v27;
    v39 = 1026;
    v40 = v28;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,fRawWeight,%{public}.2lf,fSnapWeight,%{public}.2lf,fTimeInMode,%{public}.2lf,snapType,%{public}d", &v31, 48);
    v30 = (uint8_t *)v29;
    sub_100512490("Generic", 1, 0, 2, "void CLParticleMM::MMPartialMatcher::getPartialMatchedSolution(MMSnapData &, const MMSnapData &)", "%s\n", v29);
    if (v30 != buf)
      free(v30);
  }
}

BOOL sub_10127CA50(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  NSObject *v7;
  double v8;
  double v9;
  const char *v10;
  uint8_t *v11;
  double v12;
  int v14;
  double v15;
  uint8_t buf[4];
  double v17;

  v3 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    if (!a1[136])
      sub_100349198(a1 + 136, (uint64_t *)a2);
    v5 = a1[134];
    if (v5 >= a1[135])
    {
      v6 = sub_1011247EC(a1 + 133, a2);
    }
    else
    {
      sub_101124910((uint64_t)(a1 + 135), a1[134], a2);
      v6 = v5 + 112;
      a1[134] = v5 + 112;
    }
    a1[134] = v6;
    v12 = *(double *)(a2 + 48);
    if (v12 < *((double *)a1 + 129))
      *((double *)a1 + 129) = v12;
    if (v12 > *((double *)a1 + 20))
      *((double *)a1 + 20) = v12;
  }
  else
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v7 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      v8 = *(double *)a1;
      *(_DWORD *)buf = 134349056;
      v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected, null road when trying to add particles into candidate", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v9 = *(double *)a1;
      v14 = 134349056;
      v15 = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,Unexpected, null road when trying to add particles into candidate", &v14, 12);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMM::MMCandidate::addParticle(const CLParticleMapMatcherCommon::Particle &)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
  return v3 != 0;
}

void sub_10127CC88(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 1072) = v2;
  _Unwind_Resume(a1);
}

BOOL sub_10127CC94(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v2 = *(_QWORD *)(a1 + 1072);
  v3 = *(_QWORD *)(a1 + 1064);
  if (v2 != v3)
  {
    v6 = *(_QWORD *)(a1 + 1088);
    sub_1004078E0((_QWORD *)v6);
    if (*(double *)(v6 + 40) <= 0.0)
    {
      v14 = 0.0;
      v16 = 1.0;
    }
    else
    {
      v7 = *(_QWORD *)(a1 + 1072);
      v8 = *(_QWORD *)(a1 + 1064);
      v9 = 0.0;
      if (v7 != v8)
      {
        v10 = 0x6DB6DB6DB6DB6DB7 * ((v7 - v8) >> 4);
        v11 = 0.0;
        do
        {
          v11 = v11 + *(double *)(v8 + 48);
          v8 += 112;
        }
        while (v8 != v7);
        v9 = v11 / (double)(unint64_t)v10;
      }
      v12 = *(_QWORD *)(a1 + 1088);
      sub_1004078E0((_QWORD *)v12);
      v13 = a2 / *(double *)(v12 + 40);
      if (v13 > 1.0)
        v13 = 1.0;
      if (v9 - v13 >= 0.0)
        v14 = v9 - v13;
      else
        v14 = 0.0;
      v15 = v9 + v13;
      if (v15 <= 1.0)
        v16 = v15;
      else
        v16 = 1.0;
    }
    v17 = *(_QWORD *)(a1 + 1064);
    v18 = *(_QWORD *)(a1 + 1072);
    if (v17 == v18)
    {
      v24 = *(_QWORD *)(a1 + 1064);
    }
    else
    {
      do
      {
        v19 = *(double *)(v17 + 48);
        if (v19 >= v14 && v19 <= v16)
        {
          ++*(_DWORD *)(a1 + 120);
          if (*(double *)(v17 + 56) > *(double *)(a1 + 64))
          {
            sub_100349198((_QWORD *)(a1 + 8), (uint64_t *)v17);
            v21 = *(_QWORD *)(v17 + 48);
            v22 = *(_OWORD *)(v17 + 32);
            *(_OWORD *)(a1 + 24) = *(_OWORD *)(v17 + 16);
            *(_OWORD *)(a1 + 40) = v22;
            *(_QWORD *)(a1 + 56) = v21;
            v23 = *(_OWORD *)(v17 + 56);
            *(_OWORD *)(a1 + 73) = *(_OWORD *)(v17 + 65);
            *(_OWORD *)(a1 + 64) = v23;
            if (v17 != a1 + 8)
              sub_100F5F1C8((char *)(a1 + 96), *(char **)(v17 + 88), *(_QWORD *)(v17 + 96), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(v17 + 96) - *(_QWORD *)(v17 + 88)) >> 3));
          }
        }
        v17 += 112;
      }
      while (v17 != v18);
      v24 = *(_QWORD *)(a1 + 1072);
      v17 = *(_QWORD *)(a1 + 1064);
    }
    *(_DWORD *)(a1 + 124) = -1227133513 * ((unint64_t)(v24 - v17) >> 4);
  }
  return v2 != v3;
}

BOOL sub_10127CE88(uint64_t a1, int *a2)
{
  _BOOL8 v2;
  BOOL v3;
  NSObject *v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  const char *v15;
  uint8_t *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  _BOOL4 v23;
  double v24;
  int v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  double v41;
  double v42;
  double v43;
  _BOOL4 v44;
  NSObject *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  double v51;
  double v52;
  _BOOL4 v53;
  double v55;
  NSObject *v56;
  uint64_t v57;
  NSObject *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  uint8_t *v73;
  uint64_t v74;
  const char *v75;
  uint8_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  const char *v82;
  uint8_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  const char *v88;
  uint8_t *v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  __int16 v93;
  _BYTE v94[10];
  uint64_t v95;
  __int16 v96;
  uint64_t v97;
  __int16 v98;
  _BYTE v99[10];
  _BYTE v100[14];
  __int16 v101;
  _BOOL4 v102;
  __int16 v103;
  _BOOL4 v104;
  __int16 v105;
  int v106;
  uint8_t buf[4];
  uint64_t v108;
  __int16 v109;
  _BYTE v110[10];
  uint64_t v111;
  __int16 v112;
  uint64_t v113;
  __int16 v114;
  _BYTE v115[10];
  _BYTE v116[14];
  __int16 v117;
  _BOOL4 v118;
  __int16 v119;
  _BOOL4 v120;
  __int16 v121;
  int v122;

  v2 = *(_BYTE *)(a1 + 152) == 0;
  if (*(_BYTE *)(a1 + 152))
    v3 = *(_BYTE *)(a1 + 153) == 0;
  else
    v3 = 1;
  if (v3)
    return v2;
  if (*(_DWORD *)(a1 + 124) == *(_DWORD *)(a1 + 1104))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v6 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v7 = *(_QWORD *)(a1 + 176);
      v8 = *(_DWORD *)(a1 + 124);
      v9 = *(_DWORD *)(a1 + 1104);
      v10 = *a2;
      *(_DWORD *)buf = 134349824;
      v108 = v7;
      v109 = 1026;
      *(_DWORD *)v110 = v8;
      *(_WORD *)&v110[4] = 1026;
      *(_DWORD *)&v110[6] = v9;
      LOWORD(v111) = 1026;
      *(_DWORD *)((char *)&v111 + 2) = v10;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,shallConsiderOutgoingCandidate,ambiguityCase,combined,%{public}d,secondBestCombined,%{public}d,sigEnv,%{public}d", buf, 0x1Eu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v11 = *(_QWORD *)(a1 + 176);
      v12 = *(_DWORD *)(a1 + 124);
      v13 = *(_DWORD *)(a1 + 1104);
      v14 = *a2;
      v91 = 134349824;
      v92 = v11;
      v93 = 1026;
      *(_DWORD *)v94 = v12;
      *(_WORD *)&v94[4] = 1026;
      *(_DWORD *)&v94[6] = v13;
      LOWORD(v95) = 1026;
      *(_DWORD *)((char *)&v95 + 2) = v14;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,shallConsiderOutgoingCandidate,ambiguityCase,combined,%{public}d,secondBestCombined,%{public}d,sigEnv,%{public}d", &v91, 30);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::MMCandidate::shallConsiderOutgoingCandidate(const CLSignalEnvironmentProvider_Type::SignalEnvironmentInfo &) const", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    return 0;
  }
  if (*(_DWORD *)(a1 + 1044) <= (signed int)(-1227133513 * ((*(_QWORD *)(a1 + 1072) - *(_QWORD *)(a1 + 1064)) >> 4)))
  {
    if (*(double *)(a1 + 360) <= 0.0)
      return 0;
    v26 = *(double *)(a1 + 272);
    if (v26 < 0.0 || (*a2 - 1) > 1)
      return 0;
    v27 = *(double *)(a1 + 768);
    v28 = *(double *)(a1 + 336);
    v29 = fmod(v27 - v28, 360.0);
    if (v29 < 0.0)
      v29 = v29 + 360.0;
    if (v29 > 180.0)
      v29 = v29 + -360.0;
    if (v29 > 75.0)
    {
      sub_1001C6800(v28 + v29 * 0.5);
      v31 = v30;
      v32 = fmod(*(double *)(a1 + 272) - v30, 360.0);
      if (v32 < 0.0)
        v32 = v32 + 360.0;
      if (v32 <= 180.0)
        v33 = v32;
      else
        v33 = v32 + -360.0;
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v34 = fabs(v33);
      v35 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        v36 = *(_QWORD *)(a1 + 176);
        v37 = *(_QWORD *)(a1 + 272);
        v38 = *(_QWORD *)(a1 + 336);
        v39 = *(_QWORD *)(a1 + 768);
        *(_DWORD *)buf = 134350592;
        v108 = v36;
        v109 = 2050;
        *(_QWORD *)v110 = v37;
        *(_WORD *)&v110[8] = 2050;
        v111 = v38;
        v112 = 2050;
        v113 = v39;
        v114 = 2050;
        *(double *)v115 = v31;
        *(_WORD *)&v115[8] = 2050;
        *(double *)v116 = v34;
        *(_WORD *)&v116[8] = 1026;
        *(_DWORD *)&v116[10] = v34 < 10.0;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,shallConsiderOutgoingCandidate,lowerOutgoingCountCase,course,%{public}.2lf,snapCourse,%{public}.2lf,outgoingSnapCourse,%{public}.2lf,approxCourseOfTurningRoad,%{public}.2lf,turningCourseDiff,%{public}.2lf,outgoingCondition,%{public}d", buf, 0x44u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
        v84 = *(_QWORD *)(a1 + 176);
        v85 = *(_QWORD *)(a1 + 272);
        v86 = *(_QWORD *)(a1 + 336);
        v87 = *(_QWORD *)(a1 + 768);
        v91 = 134350592;
        v92 = v84;
        v93 = 2050;
        *(_QWORD *)v94 = v85;
        *(_WORD *)&v94[8] = 2050;
        v95 = v86;
        v96 = 2050;
        v97 = v87;
        v98 = 2050;
        *(double *)v99 = v31;
        *(_WORD *)&v99[8] = 2050;
        *(double *)v100 = v34;
        *(_WORD *)&v100[8] = 1026;
        *(_DWORD *)&v100[10] = v34 < 10.0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,shallConsiderOutgoingCandidate,lowerOutgoingCountCase,course,%{public}.2lf,snapCourse,%{public}.2lf,outgoingSnapCourse,%{public}.2lf,approxCourseOfTurningRoad,%{public}.2lf,turningCourseDiff,%{public}.2lf,outgoingCondition,%{public}d", &v91, 68);
        v89 = (uint8_t *)v88;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::MMCandidate::shallConsiderOutgoingCandidate(const CLSignalEnvironmentProvider_Type::SignalEnvironmentInfo &) const", "%s\n", v88);
        if (v89 != buf)
          free(v89);
      }
      if (v34 < 10.0)
        return 1;
      v26 = *(double *)(a1 + 272);
      v27 = *(double *)(a1 + 768);
      v28 = *(double *)(a1 + 336);
    }
    v40 = fmod(v26 - v27, 360.0);
    if (v40 < 0.0)
      v40 = v40 + 360.0;
    if (v40 > 180.0)
      v40 = v40 + -360.0;
    v41 = fabs(v40);
    v42 = fmod(v26 - v28, 360.0);
    if (v42 < 0.0)
      v42 = v42 + 360.0;
    if (v42 > 180.0)
      v42 = v42 + -360.0;
    v43 = fabs(v42);
    v44 = v43 >= 15.0 && v41 < 15.0;
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v45 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v46 = *(_QWORD *)(a1 + 176);
      v47 = *(_QWORD *)(a1 + 272);
      v48 = *(_QWORD *)(a1 + 336);
      v49 = *(_QWORD *)(a1 + 768);
      v50 = *a2;
      *(_DWORD *)buf = 134350848;
      v108 = v46;
      v109 = 2050;
      *(_QWORD *)v110 = v47;
      *(_WORD *)&v110[8] = 2050;
      v111 = v48;
      v112 = 2050;
      v113 = v49;
      v114 = 1026;
      *(_DWORD *)v115 = v41 < 15.0;
      *(_WORD *)&v115[4] = 1026;
      *(_DWORD *)&v115[6] = v43 < 15.0;
      *(_WORD *)v116 = 1026;
      *(_DWORD *)&v116[2] = v50;
      *(_WORD *)&v116[6] = 1026;
      *(_DWORD *)&v116[8] = v44;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,shallConsiderOutgoingCandidate,lowerOutgoingCountCase,course,%{public}.2lf,snapCourse,%{public}.2lf,outgoingSnapCourse,%{public}.2lf,isCrumbCourseAlignedWithOutgoing,%{public}d,isCrumbCourseAlignedWithIncoming,%{public}d,sigEnv,%{public}d,outgoingCondition,%{public}d", buf, 0x42u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v77 = *(_QWORD *)(a1 + 176);
      v78 = *(_QWORD *)(a1 + 272);
      v79 = *(_QWORD *)(a1 + 336);
      v80 = *(_QWORD *)(a1 + 768);
      v81 = *a2;
      v91 = 134350848;
      v92 = v77;
      v93 = 2050;
      *(_QWORD *)v94 = v78;
      *(_WORD *)&v94[8] = 2050;
      v95 = v79;
      v96 = 2050;
      v97 = v80;
      v98 = 1026;
      *(_DWORD *)v99 = v41 < 15.0;
      *(_WORD *)&v99[4] = 1026;
      *(_DWORD *)&v99[6] = v43 < 15.0;
      *(_WORD *)v100 = 1026;
      *(_DWORD *)&v100[2] = v81;
      *(_WORD *)&v100[6] = 1026;
      *(_DWORD *)&v100[8] = v44;
      LODWORD(v90) = 66;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,shallConsiderOutgoingCandidate,lowerOutgoingCountCase,course,%{public}.2lf,snapCourse,%{public}.2lf,outgoingSnapCourse,%{public}.2lf,isCrumbCourseAlignedWithOutgoing,%{public}d,isCrumbCourseAlignedWithIncoming,%{public}d,sigEnv,%{public}d,outgoingCondition,%{public}d", &v91, v90);
      v83 = (uint8_t *)v82;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::MMCandidate::shallConsiderOutgoingCandidate(const CLSignalEnvironmentProvider_Type::SignalEnvironmentInfo &) const", "%s\n", v82);
      if (v83 != buf)
        free(v83);
    }
    return v44;
  }
  v17 = *(double *)(a1 + 336);
  v18 = *(double *)(a1 + 768);
  v19 = fmod(v17 - v18, 360.0);
  if (v19 < 0.0)
    v19 = v19 + 360.0;
  if (v19 > 180.0)
    v19 = v19 + -360.0;
  v20 = fabs(v19);
  v21 = *(double *)(a1 + 360);
  if (v21 <= 0.0 || (v22 = *(double *)(a1 + 272), v22 < 0.0))
  {
    v23 = 0;
    goto LABEL_23;
  }
  v51 = fmod(v22 - v18, 360.0);
  if (v51 < 0.0)
    v51 = v51 + 360.0;
  if (v51 > 180.0)
    v51 = v51 + -360.0;
  v52 = fabs(v51);
  v53 = *(double *)(a1 + 1048) >= 7.5;
  v23 = v52 < 25.0;
  if (v52 < 25.0)
    v53 = 1;
  if (v53 && v20 >= 45.0 && v52 >= 25.0)
  {
    if (v21 < 20.0)
    {
      v55 = fmod(v22 - v17, 360.0);
      v23 = 0;
      if (v55 < 0.0)
        v55 = v55 + 360.0;
      if (v55 > 180.0)
        v55 = v55 + -360.0;
      if (fabs(v55) < 10.0)
      {
        v25 = 1;
        goto LABEL_88;
      }
      goto LABEL_23;
    }
    v23 = 0;
  }
  if (!v53)
  {
LABEL_87:
    v25 = 0;
    goto LABEL_88;
  }
LABEL_23:
  if (*(double *)(a1 + 352) > 0.0)
  {
    v24 = *(double *)(a1 + 264);
    if (v24 >= 0.0 && v24 < 0.001)
      goto LABEL_87;
  }
  v25 = 0;
  if (!*(_BYTE *)(a1 + 396))
  {
LABEL_98:
    v2 = 1;
    goto LABEL_99;
  }
LABEL_88:
  if (*(double *)(a1 + 264) == 0.0 && !*(_BYTE *)(a1 + 396) && (v21 <= 0.0 || *(double *)(a1 + 272) < 0.0))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v56 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v57 = *(_QWORD *)(a1 + 176);
      *(_DWORD *)buf = 134349056;
      v108 = v57;
      _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,shallConsiderOutgoingCandidate,position dependent", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v74 = *(_QWORD *)(a1 + 176);
      v91 = 134349056;
      v92 = v74;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,shallConsiderOutgoingCandidate,position dependent", &v91, 12);
      v76 = (uint8_t *)v75;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::MMCandidate::shallConsiderOutgoingCandidate(const CLSignalEnvironmentProvider_Type::SignalEnvironmentInfo &) const", "%s\n", v75);
      if (v76 != buf)
        free(v76);
    }
    goto LABEL_98;
  }
  v2 = 0;
LABEL_99:
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
  v58 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
  {
    v59 = *(_QWORD *)(a1 + 176);
    v60 = *(_QWORD *)(a1 + 336);
    v61 = *(_QWORD *)(a1 + 768);
    v62 = *(_QWORD *)(a1 + 272);
    v63 = *(_QWORD *)(a1 + 1048);
    v64 = *(_QWORD *)(a1 + 360);
    *(_DWORD *)buf = 134351360;
    v108 = v59;
    v109 = 2050;
    *(_QWORD *)v110 = v60;
    *(_WORD *)&v110[8] = 2050;
    v111 = v61;
    v112 = 2050;
    v113 = v62;
    v114 = 2050;
    *(_QWORD *)v115 = v63;
    *(_WORD *)&v115[8] = 1026;
    *(_DWORD *)v116 = v2;
    *(_WORD *)&v116[4] = 2050;
    *(_QWORD *)&v116[6] = v64;
    v117 = 1026;
    v118 = v20 >= 45.0;
    v119 = 1026;
    v120 = v23;
    v121 = 1026;
    v122 = v25;
    _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,snapCourse,%{public}.2lf,outgoingSnapCourse,%{public}.2lf, crumbCourse,%{public}.2lf, outgoingDistanceFromIntersection,%{public}.2lf,outgoingCondition,%{public}d,crumbCourseUnc,%{public}.2lf,significantCourseChange,%{public}d,isCrumbCourseAlignedWithOutgoing,%{public}d, isCrumbCourseAlignedWithIncoming,%{public}d", buf, 0x56u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v66 = *(_QWORD *)(a1 + 176);
    v67 = *(_QWORD *)(a1 + 336);
    v68 = *(_QWORD *)(a1 + 768);
    v69 = *(_QWORD *)(a1 + 272);
    v70 = *(_QWORD *)(a1 + 1048);
    v71 = *(_QWORD *)(a1 + 360);
    v91 = 134351360;
    v92 = v66;
    v93 = 2050;
    *(_QWORD *)v94 = v67;
    *(_WORD *)&v94[8] = 2050;
    v95 = v68;
    v96 = 2050;
    v97 = v69;
    v98 = 2050;
    *(_QWORD *)v99 = v70;
    *(_WORD *)&v99[8] = 1026;
    *(_DWORD *)v100 = v2;
    *(_WORD *)&v100[4] = 2050;
    *(_QWORD *)&v100[6] = v71;
    v101 = 1026;
    v102 = v20 >= 45.0;
    v103 = 1026;
    v104 = v23;
    v105 = 1026;
    v106 = v25;
    LODWORD(v90) = 86;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,snapCourse,%{public}.2lf,outgoingSnapCourse,%{public}.2lf, crumbCourse,%{public}.2lf, outgoingDistanceFromIntersection,%{public}.2lf,outgoingCondition,%{public}d,crumbCourseUnc,%{public}.2lf,significantCourseChange,%{public}d,isCrumbCourseAlignedWithOutgoing,%{public}d, isCrumbCourseAlignedWithIncoming,%{public}d", &v91, v90);
    v73 = (uint8_t *)v72;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::MMCandidate::shallConsiderOutgoingCandidate(const CLSignalEnvironmentProvider_Type::SignalEnvironmentInfo &) const", "%s\n", v72);
    if (v73 != buf)
      free(v73);
  }
  return v2;
}

uint64_t sub_10127DB70(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  _QWORD *v4;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  double v20;
  uint64_t *v21;
  int v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  BOOL v29;
  uint64_t *v30;
  uint64_t v31;
  double **v32;
  double v33;
  double v34;
  double *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  double v39;
  double v40;
  int v41;
  int v42;
  double v43;
  int v44;
  double *v45;
  double v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  NSObject *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  int v78;
  int v79;
  int v80;
  int v81;
  uint64_t v82;
  const char *v83;
  char *v84;
  NSObject *v85;
  const char *v86;
  char *v87;
  NSObject *v88;
  const char *v89;
  NSObject *v90;
  const char *v91;
  NSObject *v92;
  const char *v93;
  NSObject *v94;
  const char *v95;
  char *v96;
  NSObject *v97;
  const char *v99;
  uint64_t v100;
  _OWORD *v101;
  _OWORD *v102;
  _QWORD *v103;
  unsigned int v104;
  _OWORD *v105;
  void *__src;
  std::string *__str;
  int v109;
  uint64_t **v110;
  double v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  double v117;
  _BYTE v118[22];
  __int16 v119;
  int v120;
  __int16 v121;
  int v122;
  __int16 v123;
  uint64_t v124;
  __int16 v125;
  int v126;
  __int16 v127;
  int v128;
  __int16 v129;
  uint64_t v130;
  __int16 v131;
  int v132;
  __int16 v133;
  uint64_t v134;
  __int16 v135;
  int v136;
  __int16 v137;
  int v138;
  __int16 v139;
  int v140;
  __int16 v141;
  int v142;
  __int16 v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  _BYTE buf[12];
  __int16 v148;
  uint64_t v149;
  __int16 v150;
  int v151;
  __int16 v152;
  int v153;
  __int16 v154;
  uint64_t v155;
  __int16 v156;
  int v157;
  __int16 v158;
  int v159;
  __int16 v160;
  uint64_t v161;
  __int16 v162;
  int v163;
  __int16 v164;
  uint64_t v165;
  __int16 v166;
  int v167;
  __int16 v168;
  int v169;
  __int16 v170;
  int v171;
  __int16 v172;
  int v173;
  __int16 v174;
  uint64_t v175;

  v3 = *((_QWORD *)a3 + 1);
  if (!*a2)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v85 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v3;
      _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected, geometry is null", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    *(_DWORD *)v118 = 134349056;
    *(_QWORD *)&v118[4] = v3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,Unexpected, geometry is null", v118, 12);
    v87 = (char *)v86;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMM::MMCandidateVector::assessCandidates(CLMapGeometryPtr, const CLMapCrumb &)", "%s\n", v86);
    goto LABEL_108;
  }
  if (!*(_QWORD *)(a1 + 24))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v88 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v3;
      _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected, zero candidates,assessCandidates", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    *(_DWORD *)v118 = 134349056;
    *(_QWORD *)&v118[4] = v3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,Unexpected, zero candidates,assessCandidates", v118, 12);
    v87 = (char *)v89;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMM::MMCandidateVector::assessCandidates(CLMapGeometryPtr, const CLMapCrumb &)", "%s\n", v89);
LABEL_108:
    if (v87 != buf)
      free(v87);
    return 0;
  }
  v4 = *(_QWORD **)(a1 + 8);
  v104 = 1;
  v103 = (_QWORD *)(a1 + 16);
  if (v4 != (_QWORD *)(a1 + 16))
  {
    v110 = (uint64_t **)(a1 + 8);
    __src = (char *)a3 + 152;
    __str = (std::string *)(a3 + 8);
    while (sub_10127CC94((uint64_t)(v4 + 7), 40.0))
    {
      v6 = *a3;
      v7 = a3[1];
      v8 = a3[3];
      *((_OWORD *)v4 + 16) = a3[2];
      *((_OWORD *)v4 + 17) = v8;
      *((_OWORD *)v4 + 14) = v6;
      *((_OWORD *)v4 + 15) = v7;
      v9 = a3[4];
      v10 = a3[5];
      v11 = a3[7];
      *((_OWORD *)v4 + 20) = a3[6];
      *((_OWORD *)v4 + 21) = v11;
      *((_OWORD *)v4 + 18) = v9;
      *((_OWORD *)v4 + 19) = v10;
      std::string::operator=((std::string *)(v4 + 44), __str);
      memcpy(v4 + 47, __src, 0x118uLL);
      v12 = v4[141];
      v13 = v4[140];
      if (v12 == v13)
      {
        v16 = 0.0;
      }
      else
      {
        v14 = 0x6DB6DB6DB6DB6DB7 * ((v12 - v13) >> 4);
        v15 = 0.0;
        do
        {
          v15 = v15 + *(double *)(v13 + 48);
          v13 += 112;
        }
        while (v13 != v12);
        v16 = v15 / (double)(unint64_t)v14;
      }
      v117 = v16;
      if (!sub_1010CEB60(*a2, (uint64_t)(v4 + 28), (double **)v4 + 143, *((_BYTE *)v4 + 48), &v117, 1))
      {
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
        v92 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134349056;
          *(_QWORD *)&buf[4] = v3;
          _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,interpolateOnRoad returned false, determining mean road position", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
          *(_DWORD *)v118 = 134349056;
          *(_QWORD *)&v118[4] = v3;
          LODWORD(v100) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,interpolateOnRoad returned false, determining mean road position", v118, v100);
          v87 = (char *)v93;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::MMCandidateVector::assessCandidates(CLMapGeometryPtr, const CLMapCrumb &)", "%s\n", v93);
          goto LABEL_108;
        }
        return 0;
      }
      v17 = *((double *)v4 + 136);
      if (*((_BYTE *)v4 + 48))
        v18 = 1.0 - v17;
      else
        v18 = *((double *)v4 + 136);
      v19 = v4[143];
      sub_1004078E0((_QWORD *)v19);
      v20 = v18 * *(double *)(v19 + 40);
      v114 = (uint64_t)&v114;
      v115 = &v114;
      v116 = 0;
      if (v20 <= 40.0)
      {
        if (((*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *, _QWORD, uint64_t, double, double))(*(_QWORD *)*a2 + 72))(*a2, &v114, v4 + 143, *((unsigned __int8 *)v4 + 48), 1, v17, v20 + 1.0) & 1) == 0)
        {
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
          v97 = qword_1022A00D8;
          if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 134349056;
            *(_QWORD *)&buf[4] = v3;
            _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,roadsConnected returned false, searching for connected candidates", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
            *(_DWORD *)v118 = 134349056;
            *(_QWORD *)&v118[4] = v3;
            LODWORD(v100) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,roadsConnected returned false, searching for connected candidates", v118, v100);
            v96 = (char *)v99;
            sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::MMCandidateVector::assessCandidates(CLMapGeometryPtr, const CLMapCrumb &)", "%s\n", v99);
LABEL_129:
            if (v96 != buf)
              free(v96);
          }
LABEL_123:
          sub_1011048CC(&v114);
          return 0;
        }
        v21 = v115;
        if (v115 != &v114)
        {
          v109 = 0;
          v22 = 0;
          v101 = v4 + 23;
          v102 = v4 + 146;
          v105 = v4 + 82;
          while (1)
          {
            v23 = (std::__shared_weak_count *)v21[5];
            v112 = v21[4];
            v113 = v23;
            if (v23)
            {
              p_shared_owners = (unint64_t *)&v23->__shared_owners_;
              do
                v25 = __ldxr(p_shared_owners);
              while (__stxr(v25 + 1, p_shared_owners));
            }
            sub_100F5C398((uint64_t)v118, (uint64_t)&v112, *((_BYTE *)v21 + 24));
            v26 = v113;
            if (v113)
            {
              v27 = (unint64_t *)&v113->__shared_owners_;
              do
                v28 = __ldaxr(v27);
              while (__stlxr(v28 - 1, v27));
              if (!v28)
              {
                ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
                std::__shared_weak_count::__release_weak(v26);
              }
            }
            if (!sub_100F5C3F4((uint64_t)v118, (uint64_t)(v4 + 4)))
            {
              v29 = v4[4] != *(_QWORD *)v118 || *((unsigned __int8 *)v4 + 48) == v118[16];
              if (v29)
                ++v22;
              if (sub_101123FF0((uint64_t)v110, (uint64_t)v118))
              {
                *(_QWORD *)buf = v118;
                v30 = sub_10129DF60(v110, (uint64_t)v118, (uint64_t)&unk_101B9EB60, (__int128 **)buf);
                v31 = v30[143];
                sub_1004078E0((_QWORD *)v31);
                v32 = (double **)(v30 + 143);
                if (*(double *)(v31 + 40) >= 40.0)
                {
                  v35 = *v32;
                  sub_1004078E0(*v32);
                  v34 = 1.0 - 40.0 / v35[5];
                  if (v118[16])
                  {
                    v34 = 0.0;
                    v33 = 40.0 / v35[5];
                  }
                  else
                  {
                    v33 = 1.0;
                  }
                }
                else
                {
                  v33 = 1.0;
                  v34 = 0.0;
                }
                v36 = v30[140];
                v37 = v30[141];
                if (v36 != v37)
                {
                  v38 = 0;
                  v39 = 0.0;
                  do
                  {
                    v40 = *(double *)(v36 + 48);
                    v41 = v40 >= v34 && v40 <= v33;
                    if (v40 < v34 || v40 > v33)
                      v40 = -0.0;
                    v39 = v39 + v40;
                    v38 += v41;
                    v36 += 112;
                  }
                  while (v36 != v37);
                  if (v38)
                  {
                    ++*((_DWORD *)v4 + 274);
                    *((_BYTE *)v4 + 209) = 1;
                    v42 = v38 - 1227133513 * ((v4[141] - v4[140]) >> 4);
                    if (v42 <= v109)
                    {
                      if (v42 == v109 || v42 > *((_DWORD *)v4 + 290))
                      {
                        *v102 = *(_OWORD *)v118;
                        *((_BYTE *)v4 + 1184) = v118[16];
                        *((_DWORD *)v4 + 290) = v42;
                      }
                      v42 = v109;
                    }
                    else
                    {
                      v43 = v39 / (double)v38;
                      v111 = v43;
                      *v102 = *v101;
                      *((_BYTE *)v4 + 1184) = *((_BYTE *)v4 + 200);
                      *v101 = *(_OWORD *)v118;
                      v44 = v118[16];
                      *((_BYTE *)v4 + 200) = v118[16];
                      *((_DWORD *)v4 + 275) = v38;
                      *((_DWORD *)v4 + 290) = *((_DWORD *)v4 + 45);
                      *((_DWORD *)v4 + 45) = v42;
                      *((double *)v4 + 139) = v43;
                      v45 = *v32;
                      sub_1004078E0(*v32);
                      v46 = 1.0 - v43;
                      if (v44)
                        v46 = v43;
                      *((double *)v4 + 138) = v46 * v45[5];
                      v47 = a3[7];
                      v49 = a3[4];
                      v48 = a3[5];
                      *((_OWORD *)v4 + 47) = a3[6];
                      *((_OWORD *)v4 + 48) = v47;
                      *((_OWORD *)v4 + 45) = v49;
                      *((_OWORD *)v4 + 46) = v48;
                      v50 = *a3;
                      v51 = a3[1];
                      v52 = a3[3];
                      *((_OWORD *)v4 + 43) = a3[2];
                      *((_OWORD *)v4 + 44) = v52;
                      *v105 = v50;
                      *((_OWORD *)v4 + 42) = v51;
                      std::string::operator=((std::string *)(v4 + 98), __str);
                      memcpy(v4 + 101, __src, 0x118uLL);
                      if (!sub_1010CEB60(*a2, (uint64_t)v105, v32, v118[16], &v111, 1))
                      {
                        if (qword_1022A00D0 != -1)
                          dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
                        v94 = qword_1022A00D8;
                        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
                        {
                          *(_DWORD *)buf = 134349056;
                          *(_QWORD *)&buf[4] = v3;
                          _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,interpolateOnRoad returned false, determining outgoing road position", buf, 0xCu);
                        }
                        if (sub_1001BFF7C(115, 2))
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_1022A00D0 != -1)
                            dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
                          v145 = 134349056;
                          v146 = v3;
                          LODWORD(v100) = 12;
                          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,interpolateOnRoad returned false, determining outgoing road position", &v145, v100);
                          v96 = (char *)v95;
                          sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::MMCandidateVector::assessCandidates(CLMapGeometryPtr, const CLMapCrumb &)", "%s\n", v95);
                          goto LABEL_129;
                        }
                        goto LABEL_123;
                      }
                    }
                    v109 = v42;
                  }
                }
              }
            }
            v21 = (uint64_t *)v21[1];
            if (v21 == &v114)
              goto LABEL_60;
          }
        }
      }
      v22 = 0;
      v109 = 0;
LABEL_60:
      *((_BYTE *)v4 + 208) = v22 > 1;
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v54 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        v55 = v4[4];
        v56 = *((unsigned __int8 *)v4 + 48);
        v57 = v4[15];
        v58 = *((unsigned __int8 *)v4 + 209);
        v59 = *((unsigned __int8 *)v4 + 208);
        v60 = v4[23];
        v61 = *((unsigned __int8 *)v4 + 200);
        v62 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v4[141] - v4[140]) >> 4);
        v63 = *((_DWORD *)v4 + 275);
        v65 = *((_DWORD *)v4 + 44);
        v64 = *((_DWORD *)v4 + 45);
        v66 = *((_DWORD *)v4 + 290);
        v67 = v4[146];
        *(_DWORD *)buf = 134352641;
        *(_QWORD *)&buf[4] = v3;
        v148 = 2049;
        v149 = v55;
        v150 = 1026;
        v151 = v56;
        v152 = 1026;
        v153 = v65;
        v154 = 2050;
        v155 = v57;
        v156 = 1026;
        v157 = v58;
        v158 = 1026;
        v159 = v59;
        v160 = 2049;
        v161 = v60;
        v162 = 1026;
        v163 = v61;
        v164 = 2050;
        v165 = v62;
        v166 = 1026;
        v167 = v63;
        v168 = 1026;
        v169 = v64;
        v170 = 1026;
        v171 = v109;
        v172 = 1026;
        v173 = v66;
        v174 = 2049;
        v175 = v67;
        _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,candidate,ID,%{private}llu,fwd,%{public}d,countArndMean,%{public}d,bestParticleScore,%{public}.9lf,isCombined,%{public}d,isMulti,%{public}d,combinedWith,%{private}llu,fwd,%{public}d,incomingCnt,%{public}lu,outgoingCnt,%{public}d,combinedCnt,%{public}d,bestCombinedCnt,%{public}d,secondBestCombinedCnt,%{public}d,secondCombinedWith,%{private}llu", buf, 0x74u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
        v70 = v4[4];
        v71 = *((unsigned __int8 *)v4 + 48);
        v72 = v4[15];
        v73 = *((unsigned __int8 *)v4 + 209);
        v74 = *((unsigned __int8 *)v4 + 208);
        v75 = v4[23];
        v76 = *((unsigned __int8 *)v4 + 200);
        v77 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v4[141] - v4[140]) >> 4);
        v78 = *((_DWORD *)v4 + 275);
        v80 = *((_DWORD *)v4 + 44);
        v79 = *((_DWORD *)v4 + 45);
        v81 = *((_DWORD *)v4 + 290);
        v82 = v4[146];
        *(_DWORD *)v118 = 134352641;
        *(_QWORD *)&v118[4] = v3;
        *(_WORD *)&v118[12] = 2049;
        *(_QWORD *)&v118[14] = v70;
        v119 = 1026;
        v120 = v71;
        v121 = 1026;
        v122 = v80;
        v123 = 2050;
        v124 = v72;
        v125 = 1026;
        v126 = v73;
        v127 = 1026;
        v128 = v74;
        v129 = 2049;
        v130 = v75;
        v131 = 1026;
        v132 = v76;
        v133 = 2050;
        v134 = v77;
        v135 = 1026;
        v136 = v78;
        v137 = 1026;
        v138 = v79;
        v139 = 1026;
        v140 = v109;
        v141 = 1026;
        v142 = v81;
        v143 = 2049;
        v144 = v82;
        LODWORD(v100) = 116;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,candidate,ID,%{private}llu,fwd,%{public}d,countArndMean,%{public}d,bestParticleScore,%{public}.9lf,isCombined,%{public}d,isMulti,%{public}d,combinedWith,%{private}llu,fwd,%{public}d,incomingCnt,%{public}lu,outgoingCnt,%{public}d,combinedCnt,%{public}d,bestCombinedCnt,%{public}d,secondBestCombinedCnt,%{public}d,secondCombinedWith,%{private}llu", v118, v100);
        v84 = (char *)v83;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::MMCandidateVector::assessCandidates(CLMapGeometryPtr, const CLMapCrumb &)", "%s\n", v83);
        if (v84 != buf)
          free(v84);
      }
      sub_1011048CC(&v114);
      v68 = (_QWORD *)v4[1];
      if (v68)
      {
        do
        {
          v69 = v68;
          v68 = (_QWORD *)*v68;
        }
        while (v68);
      }
      else
      {
        do
        {
          v69 = (_QWORD *)v4[2];
          v29 = *v69 == (_QWORD)v4;
          v4 = v69;
        }
        while (!v29);
      }
      v4 = v69;
      if (v69 == v103)
        return 1;
    }
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v90 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v3;
      _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,unable to determine best particle", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      *(_DWORD *)v118 = 134349056;
      *(_QWORD *)&v118[4] = v3;
      LODWORD(v100) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,unable to determine best particle", v118, v100);
      v87 = (char *)v91;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMM::MMCandidateVector::assessCandidates(CLMapGeometryPtr, const CLMapCrumb &)", "%s\n", v91);
      goto LABEL_108;
    }
    return 0;
  }
  return v104;
}

void sub_10127EB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  sub_1011048CC(&a29);
  _Unwind_Resume(a1);
}

uint64_t sub_10127EBF8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  const char *v24;
  uint8_t *v25;
  _QWORD v26[2];
  char v27;
  _QWORD v28[2];
  char v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  uint8_t buf[4];
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;

  v30 = 0;
  v31 = 0;
  if ((sub_10127F1D0(a1, (uint64_t)&v31, &v30) & 1) == 0)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v10 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      v11 = *a1;
      *(_DWORD *)buf = 134349056;
      v45 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,unexpectedly unable to find candidates,getSolutionCandidate", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v12 = *a1;
    v32 = 134349056;
    v33 = v12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,unexpectedly unable to find candidates,getSolutionCandidate", &v32, 12);
    goto LABEL_38;
  }
  v2 = v31;
  if (!v31 || !*(_QWORD *)(v31 + 8))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v14 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      v15 = *a1;
      *(_DWORD *)buf = 134349056;
      v45 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,unexpectedly, best candidate is nullptr", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v17 = *a1;
    v32 = 134349056;
    v33 = v17;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,unexpectedly, best candidate is nullptr", &v32, 12);
LABEL_38:
    v18 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 0, "const MMCandidate *const CLParticleMM::MMCandidateVector::getSolutionCandidate() const", "%s\n", v13);
    if (v18 != buf)
      free(v18);
    return 0;
  }
  v3 = v30;
  if (v30)
  {
    if (*(_QWORD *)(v30 + 8))
    {
      sub_10110E724((uint64_t *)(v31 + 8), (uint64_t)v28);
      sub_10110E724((uint64_t *)(v3 + 8), (uint64_t)v26);
      if (v26[0] == v28[0]
        && v27 != v29
        && *(_BYTE *)(v3 + 153)
        && *(_BYTE *)(v2 + 153)
        && *(_DWORD *)(v3 + 124) == *(_DWORD *)(v2 + 124)
        && sub_100F5C3F4(v3 + 128, (uint64_t)v28)
        && sub_100F5C3F4(v2 + 128, (uint64_t)v26)
        && 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v3 + 1072) - *(_QWORD *)(v3 + 1064)) >> 4) > (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v2 + 1072) - *(_QWORD *)(v2 + 1064)) >> 4)))
      {
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
        v4 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          v5 = *a1;
          v6 = -1227133513 * ((*(_QWORD *)(v2 + 1072) - *(_QWORD *)(v2 + 1064)) >> 4);
          v7 = -1227133513 * ((*(_QWORD *)(v3 + 1072) - *(_QWORD *)(v3 + 1064)) >> 4);
          v8 = *(_DWORD *)(v2 + 124);
          v9 = *(_DWORD *)(v3 + 124);
          *(_DWORD *)buf = 134350336;
          v45 = v5;
          v46 = 2050;
          v47 = v28[0];
          v48 = 1026;
          v49 = v6;
          v50 = 1026;
          v51 = v7;
          v52 = 1026;
          v53 = v8;
          v54 = 1026;
          v55 = v9;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,overrode bestCandidate with alternate,roadID,%{public}lld,bestIncoming,%{public}d,altBestIncoming,%{public}d,bestCombined,%{public}d,altBestCombined,%{public}d", buf, 0x2Eu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
          v19 = *a1;
          v20 = -1227133513 * ((*(_QWORD *)(v2 + 1072) - *(_QWORD *)(v2 + 1064)) >> 4);
          v21 = -1227133513 * ((*(_QWORD *)(v3 + 1072) - *(_QWORD *)(v3 + 1064)) >> 4);
          v22 = *(_DWORD *)(v2 + 124);
          v23 = *(_DWORD *)(v3 + 124);
          v32 = 134350336;
          v33 = v19;
          v34 = 2050;
          v35 = v28[0];
          v36 = 1026;
          v37 = v20;
          v38 = 1026;
          v39 = v21;
          v40 = 1026;
          v41 = v22;
          v42 = 1026;
          v43 = v23;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,overrode bestCandidate with alternate,roadID,%{public}lld,bestIncoming,%{public}d,altBestIncoming,%{public}d,bestCombined,%{public}d,altBestCombined,%{public}d", &v32, 46);
          v25 = (uint8_t *)v24;
          sub_100512490("Generic", 1, 0, 2, "const MMCandidate *const CLParticleMM::MMCandidateVector::getSolutionCandidate() const", "%s\n", v24);
          if (v25 != buf)
            free(v25);
        }
        return v3;
      }
    }
  }
  return v2;
}

_QWORD *sub_10127F1D0(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *result;
  uint64_t *v7;
  int v8;
  int v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  NSObject *v13;
  uint64_t v14;
  _BOOL4 v15;
  uint64_t v16;
  const char *v17;
  uint8_t *v18;
  int v19;
  uint64_t v20;
  uint8_t buf[4];
  uint64_t v22;

  if (a1[3])
  {
    result = sub_10127F454(a1);
    *(_QWORD *)a2 = result;
    if (!result)
      return result;
    if (result[1])
    {
      *a3 = 0;
      v7 = (uint64_t *)a1[1];
      if (v7 != a1 + 2)
      {
        v8 = 0;
        do
        {
          sub_10110E724((uint64_t *)(*(_QWORD *)a2 + 8), (uint64_t)buf);
          if (!sub_100F5C3F4((uint64_t)(v7 + 4), (uint64_t)buf))
          {
            v9 = *((_DWORD *)v7 + 45);
            if (v9 > v8)
            {
              *a3 = v7 + 7;
              v8 = v9;
            }
          }
          v10 = (uint64_t *)v7[1];
          if (v10)
          {
            do
            {
              v11 = v10;
              v10 = (uint64_t *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              v11 = (uint64_t *)v7[2];
              v12 = *v11 == (_QWORD)v7;
              v7 = v11;
            }
            while (!v12);
          }
          v7 = v11;
        }
        while (v11 != a1 + 2);
      }
      return (_QWORD *)(*(_QWORD *)a2 != 0);
    }
    return 0;
  }
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
  v13 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
  {
    v14 = *a1;
    *(_DWORD *)buf = 134349056;
    v22 = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,unexpectedly zero candidates,getAlternateBestCandidate", buf, 0xCu);
  }
  v15 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v15)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v16 = *a1;
    v19 = 134349056;
    v20 = v16;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,unexpectedly zero candidates,getAlternateBestCandidate", &v19, 12);
    v18 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMM::MMCandidateVector::getBestAndAlternateBestCandidate(const MMCandidate *&, const MMCandidate *&) const", "%s\n", v17);
    if (v18 != buf)
      free(v18);
    return 0;
  }
  return result;
}

_QWORD *sub_10127F454(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  _QWORD *result;
  int v5;
  uint64_t *v6;
  uint64_t *v7;
  BOOL v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint8_t *v13;
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  uint64_t v17;

  if (!a1[3])
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v9 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      v10 = *a1;
      *(_DWORD *)buf = 134349056;
      v17 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,unexpectedly zero candidates,getBestCandidate", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v11 = *a1;
      v14 = 134349056;
      v15 = v11;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,unexpectedly zero candidates,getBestCandidate", &v14, 12);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 0, "const MMCandidate *const CLParticleMM::MMCandidateVector::getBestCandidate() const", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    return 0;
  }
  v2 = (uint64_t *)a1[1];
  v3 = a1 + 2;
  if (v2 == a1 + 2)
    return 0;
  result = 0;
  v5 = 0;
  do
  {
    if (*((_DWORD *)v2 + 45) > v5)
    {
      v5 = *((_DWORD *)v2 + 45);
      result = v2 + 7;
    }
    v6 = (uint64_t *)v2[1];
    if (v6)
    {
      do
      {
        v7 = v6;
        v6 = (uint64_t *)*v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        v7 = (uint64_t *)v2[2];
        v8 = *v7 == (_QWORD)v2;
        v2 = v7;
      }
      while (!v8);
    }
    v2 = v7;
  }
  while (v7 != v3);
  return result;
}

double sub_10127F678(uint64_t *a1)
{
  uint64_t v2;
  double v3;
  uint64_t *v4;
  uint64_t *v5;
  _BOOL4 v6;
  double v7;
  uint64_t *v8;
  uint64_t *v9;
  BOOL v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v14;
  const char *v15;
  uint8_t *v16;
  int v17;
  uint64_t v18;
  uint8_t buf[4];
  uint64_t v20;

  if (a1[3])
  {
    v2 = sub_10127EBF8(a1);
    v3 = 0.0;
    if (v2)
    {
      v4 = (uint64_t *)(v2 + 8);
      if (*(_QWORD *)(v2 + 8))
      {
        v5 = (uint64_t *)a1[1];
        if (v5 != a1 + 2)
        {
          do
          {
            sub_10110E724(v4, (uint64_t)buf);
            v6 = sub_100F5C3F4((uint64_t)(v5 + 4), (uint64_t)buf);
            v7 = *((double *)v5 + 15);
            if (v7 <= v3)
              v7 = v3;
            if (!v6)
              v3 = v7;
            v8 = (uint64_t *)v5[1];
            if (v8)
            {
              do
              {
                v9 = v8;
                v8 = (uint64_t *)*v8;
              }
              while (v8);
            }
            else
            {
              do
              {
                v9 = (uint64_t *)v5[2];
                v10 = *v9 == (_QWORD)v5;
                v5 = v9;
              }
              while (!v10);
            }
            v5 = v9;
          }
          while (v9 != a1 + 2);
        }
      }
    }
  }
  else
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v11 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      v12 = *a1;
      *(_DWORD *)buf = 134349056;
      v20 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,unexpectedly zero candidates,getSecondBestCandidate", buf, 0xCu);
    }
    v3 = 0.0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v14 = *a1;
      v17 = 134349056;
      v18 = v14;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,unexpectedly zero candidates,getSecondBestCandidate", &v17, 12);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 0, "double CLParticleMM::MMCandidateVector::getBestParticleScoreForAlternateCandidate() const", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
  }
  return v3;
}

uint64_t sub_10127F8D8(double *a1, uint64_t *a2, double a3)
{
  uint64_t v5;
  uint64_t **v6;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  __int128 v34;
  uint64_t v35;
  __int128 *v36[2];
  std::__shared_weak_count *v37;
  int v38;
  __int16 v39;
  int v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  char v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  char v48;
  __int16 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _BYTE v66[64];
  __int16 v67;
  uint64_t v68;
  int v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[80];
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  _BYTE v92[64];
  __int16 v93;
  uint64_t v94;
  int v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  _BYTE v99[80];
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  _BYTE v103[32];
  __int128 v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  int v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  _BYTE v112[31];
  __int128 *v113[2];

  sub_10127FDA8((uint64_t)a1);
  v5 = *a2;
  v35 = a2[1];
  if (*a2 == v35)
  {
LABEL_32:
    *a1 = a3;
    return 1;
  }
  v6 = (uint64_t **)(a1 + 1);
  __asm { FMOV            V0.2D, #-1.0 }
  v34 = _Q0;
  while (1)
  {
    v12 = *(std::__shared_weak_count **)(v5 + 8);
    v110 = *(_QWORD *)v5;
    v111 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    sub_100F5C398((uint64_t)v112, (uint64_t)&v110, *(_BYTE *)(v5 + 20));
    v15 = v111;
    if (v111)
    {
      v16 = (unint64_t *)&v111->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    if (!sub_101123FF0((uint64_t)v6, (uint64_t)v112))
      break;
    v36[0] = (__int128 *)v112;
    v18 = sub_10129DF60(v6, (uint64_t)v112, (uint64_t)&unk_101B9EB60, v36);
    if (!sub_10127CA50(v18 + 7, v5))
      return 0;
LABEL_13:
    v5 += 112;
    if (v5 == v35)
      goto LABEL_32;
  }
  v36[0] = (__int128 *)0xBFF0000000000000;
  v36[1] = 0;
  v37 = 0;
  v38 = 0;
  v39 = 1;
  v40 = 0;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v48 = 1;
  v49 = 0;
  v51 = 0;
  v52 = 0;
  v50 = 0;
  v53 = v34;
  v54 = 0;
  v55 = 0;
  v56 = 0xBFF0000000000000;
  v68 = 0;
  v69 = 0;
  memset(&v66[32], 0, 32);
  v67 = 0;
  v70 = 0u;
  v71 = 0u;
  v72 = 0u;
  memset(v73, 0, 27);
  memset(&v73[32], 0, 48);
  v65 = 0u;
  memset(v66, 0, 30);
  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  v59 = 0u;
  v60 = 0u;
  v57 = 0u;
  v58 = 0u;
  v75 = 0xBFF0000000000000;
  v74 = 0;
  v76 = 0;
  v77 = 0;
  v78 = 0xBFF0000000000000;
  v79 = 0xBFF0000000000000;
  v80 = 0;
  v81 = 0;
  v82 = 0xBFF0000000000000;
  v94 = 0;
  v95 = 0;
  v93 = 0;
  memset(&v92[32], 0, 32);
  v98 = 0u;
  memset(v99, 0, 27);
  v96 = 0u;
  v97 = 0u;
  memset(&v99[32], 0, 48);
  v91 = 0u;
  memset(v92, 0, 30);
  v89 = 0u;
  v90 = 0u;
  v87 = 0u;
  v88 = 0u;
  v85 = 0u;
  v86 = 0u;
  v83 = 0u;
  v84 = 0u;
  v100 = 0;
  v101 = xmmword_101C16B90;
  v106 = 0;
  v107 = 0;
  v105 = 0;
  v104 = 0u;
  v102 = 0u;
  memset(v103, 0, sizeof(v103));
  v108 = 1;
  v109 = -1;
  if (sub_10127CA50((uint64_t *)v36, v5))
  {
    v36[0] = *(__int128 **)&a3;
    v113[0] = (__int128 *)v112;
    v19 = sub_10129DF60(v6, (uint64_t)v112, (uint64_t)&unk_101B9EB60, v113);
    sub_10127FE28((uint64_t)(v19 + 7), (uint64_t)v36);
    v20 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
    if (*((_QWORD *)&v104 + 1))
    {
      v21 = (unint64_t *)(*((_QWORD *)&v104 + 1) + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v113[0] = (__int128 *)&v103[8];
    sub_10083CC6C((void ***)v113);
    if (SHIBYTE(v88) < 0)
      operator delete(*((void **)&v87 + 1));
    if (SHIBYTE(v62) < 0)
      operator delete(*((void **)&v61 + 1));
    if ((_QWORD)v45)
    {
      *((_QWORD *)&v45 + 1) = v45;
      operator delete((void *)v45);
    }
    v23 = v37;
    if (v37)
    {
      v24 = (unint64_t *)&v37->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    goto LABEL_13;
  }
  v27 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
  if (*((_QWORD *)&v104 + 1))
  {
    v28 = (unint64_t *)(*((_QWORD *)&v104 + 1) + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v113[0] = (__int128 *)&v103[8];
  sub_10083CC6C((void ***)v113);
  if (SHIBYTE(v88) < 0)
    operator delete(*((void **)&v87 + 1));
  if (SHIBYTE(v62) < 0)
    operator delete(*((void **)&v61 + 1));
  if ((_QWORD)v45)
  {
    *((_QWORD *)&v45 + 1) = v45;
    operator delete((void *)v45);
  }
  v30 = v37;
  if (v37)
  {
    v31 = (unint64_t *)&v37->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  return 0;
}

void sub_10127FD84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  sub_10127FFD0((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_10127FDA8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v6 = 0;
  v7 = 0;
  v5 = &v6;
  v1 = (_QWORD *)(a1 + 16);
  v2 = (_QWORD *)(a1 + 8);
  sub_10129D208(a1 + 8, *(_QWORD **)(a1 + 16));
  v3 = v6;
  *(v1 - 1) = &v6;
  *v1 = v3;
  v4 = v7;
  v1[1] = v7;
  if (v4)
  {
    v3[2] = v1;
    v5 = &v6;
    v6 = 0;
    v7 = 0;
    v3 = 0;
  }
  else
  {
    *v2 = v1;
  }
  sub_10129D208((uint64_t)&v5, v3);
}

uint64_t sub_10127FE28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  int v22;
  __int128 v23;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  sub_100349198((_QWORD *)(a1 + 8), (uint64_t *)(a2 + 8));
  v4 = *(_QWORD *)(a2 + 56);
  v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 56) = v4;
  v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  *(_OWORD *)(a1 + 64) = v6;
  if (a1 != a2)
    sub_100F5F1C8((char *)(a1 + 96), *(char **)(a2 + 96), *(_QWORD *)(a2 + 104), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 3));
  v7 = *(_OWORD *)(a2 + 120);
  v8 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v8;
  *(_OWORD *)(a1 + 120) = v7;
  v9 = *(_OWORD *)(a2 + 248);
  v10 = *(_OWORD *)(a2 + 264);
  v11 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 264) = v10;
  *(_OWORD *)(a1 + 280) = v11;
  *(_OWORD *)(a1 + 248) = v9;
  v12 = *(_OWORD *)(a2 + 168);
  v13 = *(_OWORD *)(a2 + 184);
  v14 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 200) = v14;
  *(_OWORD *)(a1 + 184) = v13;
  *(_OWORD *)(a1 + 168) = v12;
  std::string::operator=((std::string *)(a1 + 296), (const std::string *)(a2 + 296));
  memcpy((void *)(a1 + 320), (const void *)(a2 + 320), 0x118uLL);
  v15 = *(_OWORD *)(a2 + 648);
  v17 = *(_OWORD *)(a2 + 600);
  v16 = *(_OWORD *)(a2 + 616);
  *(_OWORD *)(a1 + 632) = *(_OWORD *)(a2 + 632);
  *(_OWORD *)(a1 + 648) = v15;
  *(_OWORD *)(a1 + 600) = v17;
  *(_OWORD *)(a1 + 616) = v16;
  v18 = *(_OWORD *)(a2 + 712);
  v20 = *(_OWORD *)(a2 + 664);
  v19 = *(_OWORD *)(a2 + 680);
  *(_OWORD *)(a1 + 696) = *(_OWORD *)(a2 + 696);
  *(_OWORD *)(a1 + 712) = v18;
  *(_OWORD *)(a1 + 664) = v20;
  *(_OWORD *)(a1 + 680) = v19;
  std::string::operator=((std::string *)(a1 + 728), (const std::string *)(a2 + 728));
  memcpy((void *)(a1 + 752), (const void *)(a2 + 752), 0x118uLL);
  v21 = *(_OWORD *)(a2 + 1048);
  *(_OWORD *)(a1 + 1032) = *(_OWORD *)(a2 + 1032);
  *(_OWORD *)(a1 + 1048) = v21;
  if (a1 != a2)
    sub_10129E1B4(a1 + 1064, *(_QWORD *)(a2 + 1064), *(_QWORD *)(a2 + 1072), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 1072) - *(_QWORD *)(a2 + 1064)) >> 4));
  sub_100349198((_QWORD *)(a1 + 1088), (uint64_t *)(a2 + 1088));
  v22 = *(_DWORD *)(a2 + 1136);
  v23 = *(_OWORD *)(a2 + 1120);
  *(_OWORD *)(a1 + 1104) = *(_OWORD *)(a2 + 1104);
  *(_OWORD *)(a1 + 1120) = v23;
  *(_DWORD *)(a1 + 1136) = v22;
  return a1;
}

uint64_t sub_10127FFD0(uint64_t a1)
{
  void *v2;
  void **v4;

  sub_100261F44(a1 + 1088);
  v4 = (void **)(a1 + 1064);
  sub_10083CC6C(&v4);
  if (*(char *)(a1 + 751) < 0)
    operator delete(*(void **)(a1 + 728));
  if (*(char *)(a1 + 319) < 0)
    operator delete(*(void **)(a1 + 296));
  v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(_QWORD *)(a1 + 104) = v2;
    operator delete(v2);
  }
  sub_100261F44(a1 + 8);
  return a1;
}

uint64_t *sub_101280048@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(_WORD *)(a2 + 20) = 1;
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_BYTE *)(a2 + 80) = 0;
  v3 = *result;
  v4 = result[1];
  if (*result != v4)
  {
    v5 = 0.0;
    do
    {
      v6 = *(double *)(v3 + 56);
      if (v6 > v5)
      {
        result = sub_100349198((_QWORD *)a2, (uint64_t *)v3);
        v7 = *(_QWORD *)(v3 + 48);
        v8 = *(_OWORD *)(v3 + 32);
        *(_OWORD *)(a2 + 16) = *(_OWORD *)(v3 + 16);
        *(_OWORD *)(a2 + 32) = v8;
        *(_QWORD *)(a2 + 48) = v7;
        v9 = *(_OWORD *)(v3 + 56);
        *(_OWORD *)(a2 + 65) = *(_OWORD *)(v3 + 65);
        *(_OWORD *)(a2 + 56) = v9;
        if (v3 != a2)
          result = (uint64_t *)sub_100F5F1C8((char *)(a2 + 88), *(char **)(v3 + 88), *(_QWORD *)(v3 + 96), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(v3 + 96) - *(_QWORD *)(v3 + 88)) >> 3));
        v5 = v6;
      }
      v3 += 112;
    }
    while (v3 != v4);
  }
  return result;
}

void sub_101280150(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100F5EA24(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101280164(uint64_t **a1, uint64_t a2, double a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t j;
  NSObject *v13;
  uint64_t *v14;
  uint64_t i;
  const char *v16;
  uint8_t *v17;
  uint64_t *v18;
  uint64_t v20;
  int v21;
  double v22;
  uint8_t buf[4];
  double v24;

  v3 = *a1;
  v4 = a1[1];
  if (*a1 == v4)
  {
    v18 = a1[1];
    v11 = v18;
    return -1227133513 * ((unint64_t)((char *)v4 - (char *)v3) >> 4)
         + 1227133513 * ((unint64_t)((char *)v11 - (char *)v18) >> 4);
  }
  v8 = (uint64_t)(a1 + 2);
  v9 = *a1;
  do
  {
    if (!*v9)
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v13 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134349056;
        v24 = a3;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,particle road is null while eliminateParticlesWithRoadKey", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
        v21 = 134349056;
        v22 = a3;
        LODWORD(v20) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,Unexpected,particle road is null while eliminateParticlesWithRoadKey", &v21, v20);
        v17 = (uint8_t *)v16;
        sub_100512490("Generic", 1, 0, 0, "int CLParticleMM::MMParticleVector::eliminateParticlesWithRoadKey(const CFAbsoluteTime, const CLParticleMapMatcherCommon::RoadKey)", "%s\n", v16);
        if (v17 != buf)
          free(v17);
      }
      sub_10129E404((uint64_t)buf, (uint64_t)(v9 + 14), (uint64_t)a1[1], (uint64_t)v9);
      v11 = v14;
      for (i = (uint64_t)a1[1]; (uint64_t *)i != v11; sub_10083CCF0(v8, i))
        i -= 112;
      goto LABEL_16;
    }
    sub_10110E724(v9, (uint64_t)buf);
    if (sub_100F5C3F4((uint64_t)buf, a2))
    {
      sub_10129E404((uint64_t)buf, (uint64_t)(v9 + 14), (uint64_t)a1[1], (uint64_t)v9);
      v11 = v10;
      for (j = (uint64_t)a1[1]; (uint64_t *)j != v11; sub_10083CCF0(v8, j))
        j -= 112;
LABEL_16:
      a1[1] = v11;
      continue;
    }
    v9 += 14;
    v11 = a1[1];
  }
  while (v9 != v11);
  v18 = *a1;
  return -1227133513 * ((unint64_t)((char *)v4 - (char *)v3) >> 4)
       + 1227133513 * ((unint64_t)((char *)v11 - (char *)v18) >> 4);
}

BOOL sub_101280438(uint64_t *a1, double a2)
{
  double *v3;
  double *v4;
  double v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  long double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  long double v24;
  double v25;
  long double v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  _BOOL8 result;
  const char *v31;
  uint8_t *v32;
  int v33;
  double v34;
  __int16 v35;
  double v36;
  uint8_t buf[4];
  double v38;
  __int16 v39;
  double v40;

  v3 = (double *)*a1;
  v4 = (double *)a1[1];
  if ((double *)*a1 == v4)
  {
    v6 = 0.0;
  }
  else
  {
    v6 = 0.0;
    do
    {
      v3[7] = 0.0;
      v3[8] = 0.0;
      v3[9] = 0.0;
      v7 = *((_QWORD *)v3 + 11);
      v8 = *((_QWORD *)v3 + 12);
      v9 = 0.0;
      if (v7 != v8)
      {
        v10 = 0.0;
        do
        {
          if (*(_DWORD *)(v7 + 64) != 2)
          {
            v11 = *(double *)(v7 + 24);
            v12 = *(double *)v7 * v11;
            if (v9 > 0.0)
            {
              v13 = log(v9);
              v14 = log(v12);
              v12 = exp(v13 + v14);
            }
            v3[7] = v12;
            v10 = v10 + *(double *)(v7 + 16) * v11;
            v3[9] = v10;
            v9 = v12;
          }
          v7 += 72;
        }
        while (v7 != v8);
      }
      v6 = v6 + v9;
      v3 += 14;
    }
    while (v3 != v4);
    if (v6 > 0.0)
    {
      v15 = *a1;
      v16 = a1[1];
      if (*a1 != v16)
      {
        v17 = *a1;
        do
        {
          *(double *)(v17 + 64) = *(double *)(v17 + 56) / v6;
          v17 += 112;
        }
        while (v17 != v16);
        if (v15 != v16)
        {
          v18 = 0.0;
          do
          {
            sub_1012807BC(v15);
            v19 = *(_QWORD *)(v15 + 88);
            v20 = *(_QWORD *)(v15 + 96);
            if (v19 == v20)
              goto LABEL_26;
            v21 = 0.0;
            v22 = 0.0;
            do
            {
              if (*(_DWORD *)(v19 + 64) == 2)
              {
                v23 = *(double *)(v19 + 24);
                v22 = v22 + *(double *)v19 * v23;
                v21 = v21 + *(double *)(v19 + 16) * v23;
              }
              v19 += 72;
            }
            while (v19 != v20);
            if (v22 <= 0.0)
            {
LABEL_26:
              v22 = *(double *)(v15 + 56);
            }
            else
            {
              v24 = *(double *)(v15 + 56);
              if (v24 > 0.0)
              {
                v25 = log(v24);
                v26 = log(v22);
                v22 = exp(v26 + v25);
              }
              *(double *)(v15 + 56) = v22;
              *(double *)(v15 + 72) = v21 + *(double *)(v15 + 72);
            }
            v18 = v18 + v22;
            v15 += 112;
          }
          while (v15 != v16);
          if (v18 > 0.0)
          {
            v27 = *a1;
            v28 = a1[1];
            while (v27 != v28)
            {
              *(double *)(v27 + 64) = *(double *)(v27 + 56) / v18;
              v27 += 112;
            }
            return 1;
          }
        }
      }
      return 0;
    }
  }
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
  v29 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134349312;
    v38 = a2;
    v39 = 2050;
    v40 = v6;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,unable to normalizeLikelihoods, negative/zero totalScore after regular update,%{public}.8lf", buf, 0x16u);
  }
  result = sub_1001BFF7C(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v33 = 134349312;
    v34 = a2;
    v35 = 2050;
    v36 = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,unable to normalizeLikelihoods, negative/zero totalScore after regular update,%{public}.8lf", &v33, 22);
    v32 = (uint8_t *)v31;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMM::MMParticleVector::computeLikelihoods(const CFAbsoluteTime, BOOL)", "%s\n", v31);
    if (v32 != buf)
      free(v32);
    return 0;
  }
  return result;
}

uint64_t sub_1012807BC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  uint64_t v4;
  double v5;
  _BOOL4 v6;
  _BOOL4 v7;
  int v8;

  v1 = *(_QWORD *)(result + 88);
  v2 = *(_QWORD *)(result + 96);
  if (v1 != v2)
  {
    v3 = 0.0;
    v4 = *(_QWORD *)(result + 88);
    do
    {
      v5 = *(double *)(v4 + 24);
      if (*(_DWORD *)(v4 + 64) != 2)
        v5 = -0.0;
      v3 = v3 + v5;
      v4 += 72;
    }
    while (v4 != v2);
    v6 = (*(_QWORD *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) - 1 < 0xFFFFFFFFFFFFFLL;
    v7 = ((*(_QWORD *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF;
    if (v3 >= 0.0)
    {
      v7 = 0;
      v6 = 0;
    }
    if ((*(_QWORD *)&v3 & 0x7FFFFFFFFFFFFFFFLL) == 0)
      v6 = 1;
    v8 = (*(_QWORD *)&v3 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000 || v6;
    if ((*(_QWORD *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FF0000000000000)
      v8 = 1;
    if (((v8 | v7) & 1) == 0)
    {
      while (v1 != v2)
      {
        if (*(_DWORD *)(v1 + 64) == 2)
          *(double *)(v1 + 24) = *(double *)(v1 + 24) / v3;
        v1 += 72;
      }
    }
  }
  return result;
}

BOOL sub_10128087C(uint64_t *a1, double a2)
{
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  float *v9;
  double v10;
  double v11;
  double v12;
  float v13;
  float *v14;
  float *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  float *v21;
  int v22;
  _BOOL8 result;
  NSObject *v24;
  const char *v25;
  uint8_t *v26;
  NSObject *v27;
  const char *v28;
  int v29;
  double v30;
  __int16 v31;
  double v32;
  uint8_t buf[4];
  double v34;
  __int16 v35;
  double v36;

  v5 = a1 + 3;
  v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = (uint64_t)v4;
    operator delete(v4);
  }
  *v5 = 0;
  v5[1] = 0;
  v5[2] = 0;
  sub_1003908C0((void **)v5, 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 4));
  a1[7] = 0xBFF0000000000000;
  if (!sub_101280438(a1, a2))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v24 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      v34 = a2;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,unable to computeLikelihoods", buf, 0xCu);
    }
    result = sub_1001BFF7C(115, 0);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v29 = 134349056;
    v30 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,unable to computeLikelihoods", &v29, 12);
    v26 = (uint8_t *)v25;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMM::MMParticleVector::computeLikelihoodsAndCSWVector(const CFAbsoluteTime)", "%s\n", v25);
LABEL_43:
    if (v26 != buf)
      free(v26);
    return 0;
  }
  v6 = *a1;
  v7 = a1[1];
  if (*a1 == v7)
  {
    v10 = 0.0;
  }
  else
  {
    v8 = a1 + 5;
    v9 = (float *)a1[4];
    v10 = 0.0;
    v11 = 0.0;
    do
    {
      v12 = *(double *)(v6 + 64);
      v11 = v11 + v12;
      v13 = v11;
      if ((unint64_t)v9 >= *v8)
      {
        v15 = (float *)*v5;
        v16 = ((uint64_t)v9 - *v5) >> 2;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 62)
          sub_100259694();
        v18 = *v8 - (_QWORD)v15;
        if (v18 >> 1 > v17)
          v17 = v18 >> 1;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
          v19 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          v20 = (char *)sub_100260634((uint64_t)(a1 + 5), v19);
          v15 = (float *)a1[3];
          v9 = (float *)a1[4];
        }
        else
        {
          v20 = 0;
        }
        v21 = (float *)&v20[4 * v16];
        *v21 = v13;
        v14 = v21 + 1;
        while (v9 != v15)
        {
          v22 = *((_DWORD *)v9-- - 1);
          *((_DWORD *)v21-- - 1) = v22;
        }
        a1[3] = (uint64_t)v21;
        a1[4] = (uint64_t)v14;
        a1[5] = (uint64_t)&v20[4 * v19];
        if (v15)
          operator delete(v15);
      }
      else
      {
        *v9 = v13;
        v14 = v9 + 1;
      }
      v10 = v10 + v12 * v12;
      a1[4] = (uint64_t)v14;
      v6 += 112;
      v9 = v14;
    }
    while (v6 != v7);
    if (v10 > 0.0)
    {
      *((double *)a1 + 7) = 1.0 / v10;
      return 1;
    }
  }
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
  v27 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134349312;
    v34 = a2;
    v35 = 2050;
    v36 = v10;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,invalid Neffsum,%{public}.3lf", buf, 0x16u);
  }
  result = sub_1001BFF7C(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v29 = 134349312;
    v30 = a2;
    v31 = 2050;
    v32 = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,invalid Neffsum,%{public}.3lf", &v29, 22);
    v26 = (uint8_t *)v28;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMM::MMParticleVector::computeLikelihoodsAndCSWVector(const CFAbsoluteTime)", "%s\n", v28);
    goto LABEL_43;
  }
  return result;
}

uint64_t sub_101280D10(uint64_t a1, int a2, uint64_t *a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t i;
  uint64_t v15;
  float *v16;
  float *v17;
  unint64_t v18;
  unint64_t v19;
  float *v20;
  float *v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  BOOL v30;
  _BOOL8 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint8_t *v39;
  NSObject *v40;
  NSObject *v41;
  const char *v43;
  uint8_t *v44;
  const char *v45;
  int v46;
  double v47;
  __int16 v48;
  uint64_t v49;
  _OWORD __p[2];
  uint8_t buf[4];
  double v52;
  __int16 v53;
  uint64_t v54;

  *(_BYTE *)(a1 + 48) = 0;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = v4 - *(_QWORD *)a1;
  if (v4 == *(_QWORD *)a1)
    return 1;
  if (sub_10128087C((uint64_t *)a1, a4))
  {
    v10 = 0x6DB6DB6DB6DB6DB7 * (v5 >> 4);
    v12 = *a3;
    v11 = a3[1];
    *(_DWORD *)buf = 0;
    sub_100CB0348(__p, v10, buf);
    v13 = 0x9249249249249249 * ((v11 - v12) >> 4) + a2;
    if (v13)
    {
      for (i = 0; i != v13; ++i)
      {
        v15 = random();
        v16 = *(float **)(a1 + 24);
        v17 = *(float **)(a1 + 32);
        if (v17 != v16)
        {
          v18 = v17 - v16;
          v17 = *(float **)(a1 + 24);
          do
          {
            v19 = v18 >> 1;
            v20 = &v17[v18 >> 1];
            v22 = *v20;
            v21 = v20 + 1;
            v18 += ~(v18 >> 1);
            if (v22 < (float)((float)v15 * 4.6566e-10))
              v17 = v21;
            else
              v18 = v19;
          }
          while (v18);
        }
        ++*(_DWORD *)(*(_QWORD *)&__p[0] + (((char *)v17 - (char *)v16) << 30 >> 30));
      }
    }
    v24 = *(_QWORD *)a1;
    v23 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)a1 != v23)
    {
      v25 = 0;
      v26 = *(_QWORD *)&__p[0];
      do
      {
        if (v25 >= (*((_QWORD *)&__p[0] + 1) - v26) >> 2)
          break;
        if (*(int *)(v26 + 4 * v25) >= 1)
        {
          v27 = 0;
          v28 = a3[1];
          do
          {
            if (v28 >= a3[2])
            {
              v28 = sub_1011247EC(a3, v24);
            }
            else
            {
              sub_101124910((uint64_t)(a3 + 2), v28, v24);
              v28 += 112;
              a3[1] = v28;
            }
            a3[1] = v28;
            ++v27;
            v26 = *(_QWORD *)&__p[0];
          }
          while (v27 < *(_DWORD *)(*(_QWORD *)&__p[0] + 4 * v25));
          v23 = *(_QWORD *)(a1 + 8);
        }
        v24 += 112;
        ++v25;
      }
      while (v24 != v23);
    }
    v29 = 0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 4);
    v30 = v29 > a2;
    v31 = v29 <= a2;
    if (v30)
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v41 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134349312;
        v52 = a4;
        v53 = 1026;
        LODWORD(v54) = v29;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected number of particles after resampling,%{public}d", buf, 0x12u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_44;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v46 = 134349312;
      v47 = a4;
      v48 = 1026;
      LODWORD(v49) = v29;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,Unexpected number of particles after resampling,%{public}d", &v46, 18);
      v39 = (uint8_t *)v45;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMM::MMParticleVector::resample(const CFAbsoluteTime, const int, CLParticleMapMatcherCommon::ParticleVector &)", "%s\n", v45);
    }
    else
    {
      v32 = *(_QWORD *)a1;
      *(_QWORD *)a1 = *a3;
      *a3 = v32;
      v33 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = a3[1];
      a3[1] = v33;
      v34 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = a3[2];
      a3[2] = v34;
      *(_BYTE *)(a1 + 48) = 1;
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v35 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        v36 = *(_QWORD *)(a1 + 56);
        *(_DWORD *)buf = 134349312;
        v52 = a4;
        v53 = 2050;
        v54 = v36;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,Resampled,Neff,%{public}lf", buf, 0x16u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_44;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v37 = *(_QWORD *)(a1 + 56);
      v46 = 134349312;
      v47 = a4;
      v48 = 2050;
      v49 = v37;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,Resampled,Neff,%{public}lf", &v46, 22);
      v39 = (uint8_t *)v38;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::MMParticleVector::resample(const CFAbsoluteTime, const int, CLParticleMapMatcherCommon::ParticleVector &)", "%s\n", v38);
    }
    if (v39 != buf)
      free(v39);
LABEL_44:
    if (*(_QWORD *)&__p[0])
    {
      *((_QWORD *)&__p[0] + 1) = *(_QWORD *)&__p[0];
      operator delete(*(void **)&__p[0]);
    }
    return v31;
  }
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
  v40 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134349056;
    v52 = a4;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,unable to compute likelihoods and csw vector", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    LODWORD(__p[0]) = 134349056;
    *(double *)((char *)__p + 4) = a4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,unable to compute likelihoods and csw vector", __p, 12);
    v44 = (uint8_t *)v43;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMM::MMParticleVector::resample(const CFAbsoluteTime, const int, CLParticleMapMatcherCommon::ParticleVector &)", "%s\n", v43);
    if (v44 != buf)
      free(v44);
  }
  return 0;
}

void sub_101281398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_1012813D8(double *a1, uint64_t a2, double *a3, uint64_t a4)
{
  double v8;
  _BOOL8 v9;
  uint64_t v10;
  double v11;
  int v12;
  double v13;
  int v14;
  double *v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  char *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v26;
  double v27;
  _BYTE v28[12];
  _BYTE buf[1632];

  if (*(_QWORD *)a3)
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)buf = 0;
    *(_QWORD *)v28 = 0;
    sub_1010B9950(a1, (double *)buf, (double *)v28, a3[4], a3[5], *(double *)(a2 + 96), *((float *)a3 + 6), *(double *)(a2 + 80), *(double *)(a2 + 88));
    v8 = *a3;
    v9 = *(_QWORD *)a3 != 0;
    if (*(_QWORD *)a3)
    {
      v10 = *(int *)(*(_QWORD *)&v8 + 20);
      v11 = 0.5;
      if ((_DWORD)v10 != 9)
      {
        v12 = *(_DWORD *)(*(_QWORD *)&v8 + 72);
        if (v12 != 6 && v12 != 255)
        {
          v13 = *(double *)(*(_QWORD *)&v8 + 96);
          if (v13 < 0.000001)
          {
            v13 = 1.0;
            if ((v10 & 0xFFFFFFFE) != 8)
            {
              v14 = *(unsigned __int8 *)(*(_QWORD *)&v8 + 16);
              if (v10 > 7)
              {
                v13 = dbl_101BAFD30[v14 == 0];
              }
              else
              {
                if (v14)
                  v15 = (double *)&unk_101C48C40;
                else
                  v15 = (double *)&unk_101C48C80;
                v13 = v15[v10];
              }
            }
          }
          v11 = v13 * 0.5 + 1.0;
        }
      }
      v21 = a3[4];
      v22 = a3[5];
      v26 = v22;
      v27 = v21;
      if (*(double *)buf < 0.0)
        v11 = -v11;
      sub_100081058(a1, &v27, &v26, v21, v22, *(double *)(a2 + 96), *((float *)a3 + 6), v11);
      sub_10011E780(a1, (double *)(a4 + 40), (double *)(a4 + 32), (double *)(a4 + 48), v27, v26, *(double *)(a2 + 96), *(double *)(a2 + 80), *(double *)(a2 + 88), *(double *)(a2 + 96));
      if (*(_BYTE *)(a2 + 40))
      {
        v23 = *(double *)(a2 + 104);
        if (v23 >= 0.0 && *(double *)(a2 + 120) > 0.0)
        {
          v24 = fmod(v23 - *((float *)a3 + 6), 360.0);
          if (v24 < 0.0)
            v24 = v24 + 360.0;
          if (v24 > 180.0)
            v24 = v24 + -360.0;
          *(double *)(a4 + 56) = fabs(v24);
        }
      }
      sub_1005846E4(a2, a4);
    }
  }
  else
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v16 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      v17 = *(_QWORD *)(a2 + 200);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,NULL road when computing score", buf, 0xCu);
    }
    v9 = 0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v18 = *(_QWORD *)(a2 + 200);
      *(_DWORD *)v28 = 134349056;
      *(_QWORD *)&v28[4] = v18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,Unexpected,NULL road when computing score", v28, 12);
      v20 = (char *)v19;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMM::MMFilterData::calculateScoreAndVarFactor(const CLParticleMapMatcherCommon::CLMMMeasurementData &, const CLMapGeometry::DistanceQueryResult &, CLMapDataUtil::MapMatcherScore &)", "%s\n", v19);
      if (v20 != buf)
        free(v20);
      return 0;
    }
  }
  return v9;
}

BOOL sub_101281758(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _BOOL8 result;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  if (v4 == v3)
    return 0;
  while (1)
  {
    v31 = 0uLL;
    *(_QWORD *)&v32 = 0;
    *((_QWORD *)&v32 + 1) = 0x3FF0000000000000;
    v33 = 0u;
    v34 = 0u;
    LODWORD(v35) = 0;
    result = sub_1012813D8((double *)a1, a3, (double *)v3, (uint64_t)&v31);
    if (!result)
      break;
    LODWORD(v35) = a2;
    *((_QWORD *)&v32 + 1) = *(_QWORD *)(a3 + 128);
    v9 = *(_QWORD *)(v3 + 104);
    v10 = *(_QWORD *)(v3 + 96);
    if (v10 >= v9)
    {
      v15 = *(_QWORD *)(v3 + 88);
      v16 = 0x8E38E38E38E38E39 * ((uint64_t)(v10 - v15) >> 3);
      v17 = v16 + 1;
      if (v16 + 1 > 0x38E38E38E38E38ELL)
        sub_100259694();
      v18 = 0x8E38E38E38E38E39 * ((uint64_t)(v9 - v15) >> 3);
      if (2 * v18 > v17)
        v17 = 2 * v18;
      if (v18 >= 0x1C71C71C71C71C7)
        v19 = 0x38E38E38E38E38ELL;
      else
        v19 = v17;
      if (v19)
        v20 = (char *)sub_10029D26C(v3 + 104, v19);
      else
        v20 = 0;
      v21 = &v20[72 * v16];
      *(_OWORD *)v21 = v31;
      v22 = v32;
      v23 = v33;
      v24 = v34;
      *((_QWORD *)v21 + 8) = v35;
      *((_OWORD *)v21 + 2) = v23;
      *((_OWORD *)v21 + 3) = v24;
      *((_OWORD *)v21 + 1) = v22;
      v26 = *(char **)(v3 + 88);
      v25 = *(char **)(v3 + 96);
      v27 = v21;
      if (v25 != v26)
      {
        do
        {
          *(_OWORD *)(v27 - 72) = *(_OWORD *)(v25 - 72);
          v28 = *(_OWORD *)(v25 - 56);
          v29 = *(_OWORD *)(v25 - 40);
          v30 = *(_OWORD *)(v25 - 24);
          *((_DWORD *)v27 - 2) = *((_DWORD *)v25 - 2);
          *(_OWORD *)(v27 - 24) = v30;
          *(_OWORD *)(v27 - 40) = v29;
          *(_OWORD *)(v27 - 56) = v28;
          v27 -= 72;
          v25 -= 72;
        }
        while (v25 != v26);
        v25 = *(char **)(v3 + 88);
      }
      v14 = v21 + 72;
      *(_QWORD *)(v3 + 88) = v27;
      *(_QWORD *)(v3 + 96) = v21 + 72;
      *(_QWORD *)(v3 + 104) = &v20[72 * v19];
      if (v25)
        operator delete(v25);
    }
    else
    {
      *(_OWORD *)v10 = v31;
      v11 = v32;
      v12 = v33;
      v13 = v34;
      *(_QWORD *)(v10 + 64) = v35;
      *(_OWORD *)(v10 + 32) = v12;
      *(_OWORD *)(v10 + 48) = v13;
      *(_OWORD *)(v10 + 16) = v11;
      v14 = (char *)(v10 + 72);
    }
    *(_QWORD *)(v3 + 96) = v14;
    sub_10112329C((double *)v3);
    v3 += 112;
    if (v3 == v4)
      return 1;
  }
  return result;
}

uint64_t sub_101281978(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  double v3;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  double v18;
  double v19;
  unint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  char v30;
  char v31;
  unint64_t *v32;
  unint64_t v33;
  NSObject *v34;
  const char *v35;
  char *v36;
  NSObject *v37;
  const char *v38;
  NSObject *v39;
  const char *v40;
  NSObject *v41;
  const char *v43;
  char *v44;
  double v45;
  uint64_t v46;
  int v47;
  const char *v48;
  char *v49;
  const char *v50;
  double v51;
  uint64_t v52;
  const char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56[2];
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  int v60;
  double v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  int v65;
  _BYTE buf[12];
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  int v70;

  v3 = *(double *)(a1 + 384);
  if (*a2)
  {
    v57 = 0;
    v58 = 0;
    v59 = 0;
    sub_101111B50(&v57, 0x60uLL);
    if (*(double *)(a3 + 264) <= 0.0)
    {
      v15 = *(_QWORD *)(a1 + 40);
      v11 = 96;
      if (&v57 != (uint64_t *)(a1 + 40))
      {
        v16 = *(_QWORD *)(a1 + 48);
        v17 = 0x6DB6DB6DB6DB6DB7 * ((v16 - v15) >> 4);
        if (v17 <= 0x5F)
          sub_10129E1B4((uint64_t)&v57, v15, v16, v17);
      }
LABEL_47:
      if ((sub_101280D10(a1 + 40, v11, &v57, v3) & 1) == 0)
      {
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
        v34 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134349056;
          *(double *)&buf[4] = v3;
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,resample failed", buf, 0xCu);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_89;
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
        v60 = 134349056;
        v61 = v3;
        LODWORD(v55) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,resample failed", &v60, v55);
        v36 = (char *)v35;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::prepareCandidates(CLMapGeometryPtr, const MMSnapData &)", "%s\n", v35);
        goto LABEL_105;
      }
      if ((sub_10127F8D8((double *)(a1 + 104), (uint64_t *)(a1 + 40), v3) & 1) == 0)
      {
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
        v37 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134349056;
          *(double *)&buf[4] = v3;
          _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,candidate update failed", buf, 0xCu);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_89;
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
        v60 = 134349056;
        v61 = v3;
        LODWORD(v55) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,candidate update failed", &v60, v55);
        v36 = (char *)v38;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::prepareCandidates(CLMapGeometryPtr, const MMSnapData &)", "%s\n", v38);
        goto LABEL_105;
      }
      v26 = *a2;
      v27 = (std::__shared_weak_count *)a2[1];
      v56[0] = v26;
      v56[1] = (uint64_t)v27;
      if (v27)
      {
        p_shared_owners = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldxr(p_shared_owners);
        while (__stxr(v29 + 1, p_shared_owners));
      }
      v30 = sub_10127DB70(a1 + 104, v56, (__int128 *)(a1 + 376));
      v31 = v30;
      if (!v27)
        goto LABEL_56;
      v32 = (unint64_t *)&v27->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
        if ((v31 & 1) != 0)
          goto LABEL_57;
      }
      else
      {
LABEL_56:
        if ((v30 & 1) != 0)
        {
LABEL_57:
          if ((sub_1012825E0(a1, a3) & 1) != 0)
          {
            v14 = 1;
LABEL_90:
            *(_QWORD *)buf = &v57;
            sub_10083CC6C((void ***)buf);
            return v14;
          }
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
          v39 = qword_1022A00D8;
          if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 134349056;
            *(double *)&buf[4] = v3;
            _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,extractSolution failed", buf, 0xCu);
          }
          if (!sub_1001BFF7C(115, 2))
          {
LABEL_89:
            v14 = 0;
            goto LABEL_90;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
          v60 = 134349056;
          v61 = v3;
          LODWORD(v55) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,extractSolution failed", &v60, v55);
          v36 = (char *)v40;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::prepareCandidates(CLMapGeometryPtr, const MMSnapData &)", "%s\n", v40);
LABEL_105:
          if (v36 != buf)
            free(v36);
          goto LABEL_89;
        }
      }
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v41 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349056;
        *(double *)&buf[4] = v3;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,assessCandidates failed", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_89;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v60 = 134349056;
      v61 = v3;
      LODWORD(v55) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,assessCandidates failed", &v60, v55);
      v36 = (char *)v50;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::prepareCandidates(CLMapGeometryPtr, const MMSnapData &)", "%s\n", v50);
      goto LABEL_105;
    }
    if (*(_BYTE *)(a1 + 604))
      goto LABEL_4;
    if (*(double *)(a1 + 560) <= 0.0)
    {
      v11 = 96;
      v12 = 10;
    }
    else
    {
      v18 = *(double *)(a1 + 472);
      v11 = 96;
      v12 = 10;
      if (v18 >= 0.0 && v18 < 0.001)
      {
        if (*(double *)(a3 + 424) <= 0.0)
        {
          if (*(_BYTE *)(a3 + 468))
          {
LABEL_4:
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
            v7 = qword_1022A00D8;
            if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
            {
              v8 = *(_QWORD *)(a1 + 384);
              v9 = *(_QWORD *)(a1 + 472);
              v10 = *(unsigned __int8 *)(a1 + 604);
              *(_DWORD *)buf = 134349568;
              *(_QWORD *)&buf[4] = v8;
              v67 = 2050;
              v68 = v9;
              v69 = 1026;
              v70 = v10;
              _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,Reducing particles to half,speed,%{public}.1lf,static,%{public}d", buf, 0x1Cu);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
              v45 = *(double *)(a1 + 384);
              v46 = *(_QWORD *)(a1 + 472);
              v47 = *(unsigned __int8 *)(a1 + 604);
              v60 = 134349568;
              v61 = v45;
              v62 = 2050;
              v63 = v46;
              v64 = 1026;
              v65 = v47;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,Reducing particles to half,speed,%{public}.1lf,static,%{public}d", &v60, 28);
              v49 = (char *)v48;
              sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::prepareCandidates(CLMapGeometryPtr, const MMSnapData &)", "%s\n", v48);
              if (v49 != buf)
                free(v49);
            }
            v11 = 48;
            v12 = 5;
          }
        }
        else
        {
          v19 = *(double *)(a3 + 336);
          if (v19 < 0.001 && v19 >= 0.0 || *(_BYTE *)(a3 + 468) != 0)
            goto LABEL_4;
        }
      }
    }
    if (*(_BYTE *)(a3 + 504)
      && *(_BYTE *)(a3 + 232)
      && *(_QWORD *)(a3 + 120)
      && *(unsigned __int8 *)(a3 + 761) == *(unsigned __int8 *)(a1 + 897))
    {
      v22 = v58;
      do
      {
        if (v22 >= v59)
        {
          v22 = sub_1011247EC(&v57, a3 + 120);
        }
        else
        {
          sub_101124910((uint64_t)&v59, v22, a3 + 120);
          v22 += 112;
        }
        v58 = v22;
        --v12;
      }
      while (v12);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v23 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        v24 = *(_QWORD *)(a1 + 384);
        v25 = *(_QWORD *)(a3 + 176);
        *(_DWORD *)buf = 134349312;
        *(_QWORD *)&buf[4] = v24;
        v67 = 2050;
        v68 = v25;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,Added prior particle,score,%{public}.8lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
        v51 = *(double *)(a1 + 384);
        v52 = *(_QWORD *)(a3 + 176);
        v60 = 134349312;
        v61 = v51;
        v62 = 2050;
        v63 = v52;
        LODWORD(v55) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,Added prior particle,score,%{public}.8lf", &v60, v55);
        v54 = (char *)v53;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::prepareCandidates(CLMapGeometryPtr, const MMSnapData &)", "%s\n", v53);
        if (v54 != buf)
          free(v54);
      }
    }
    goto LABEL_47;
  }
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
  v13 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134349056;
    *(double *)&buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected, geometry is null", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v60 = 134349056;
    v61 = v3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,Unexpected, geometry is null", &v60, 12);
    v44 = (char *)v43;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMM::MMFilterData::prepareCandidates(CLMapGeometryPtr, const MMSnapData &)", "%s\n", v43);
    if (v44 != buf)
      free(v44);
  }
  return 0;
}

void sub_101282580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21)
{
  a21 = (void **)&a14;
  sub_10083CC6C(&a21);
  _Unwind_Resume(a1);
}

uint64_t sub_1012825E0(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  NSObject *v11;
  const char *v12;
  NSObject *v13;
  const char *v14;
  NSObject *v15;
  const char *v16;
  NSObject *v17;
  uint64_t v18;
  NSObject *v20;
  uint64_t *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  NSObject *v26;
  double v27;
  _BOOL4 v28;
  NSObject *v29;
  uint64_t v30;
  NSObject *v31;
  double *v32;
  double v33;
  double v34;
  double v35;
  int v36;
  char v37;
  int v38;
  _BOOL4 v39;
  NSObject *v40;
  int v41;
  double *v47;
  double *i;
  int v49;
  NSObject *v50;
  double v51;
  double v52;
  double v53;
  _BOOL4 v54;
  NSObject *v55;
  const char *v56;
  uint8_t *v57;
  uint64_t **v58;
  __int128 v59;
  char v60;
  _OWORD *v61;
  uint64_t *v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _QWORD *v69;
  double v70;
  double v71;
  double *v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double *v78;
  double *j;
  uint64_t *v80;
  double v81;
  double v82;
  double v83;
  NSObject *v84;
  const char *v85;
  uint8_t *v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  NSObject *v93;
  const char *v94;
  uint8_t *v95;
  NSObject *v96;
  NSObject *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  __int128 v102;
  std::__shared_weak_count *v103;
  unint64_t *p_shared_owners;
  unint64_t v105;
  double v107;
  double v108;
  float v109;
  NSObject *v110;
  uint64_t v111;
  uint64_t v112;
  NSObject *v113;
  const char *v114;
  NSObject *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  NSObject *v119;
  NSObject *v120;
  NSObject *v121;
  const char *v122;
  uint8_t *v123;
  const char *v124;
  NSObject *v125;
  uint64_t v126;
  double *v127;
  double v128;
  double v129;
  double v130;
  int v131;
  const char *v132;
  uint8_t *v133;
  const char *v134;
  uint8_t *v135;
  uint64_t v136;
  const char *v137;
  uint8_t *v138;
  const char *v139;
  uint8_t *v140;
  const char *v141;
  uint8_t *v142;
  double v143;
  double v144;
  double v145;
  double v146;
  double v147;
  NSObject *v148;
  const char *v149;
  uint64_t v150;
  double v151;
  const char *v152;
  uint8_t *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  const char *v157;
  uint8_t *v158;
  const char *v159;
  uint8_t *v160;
  const char *v161;
  const char *v162;
  uint8_t *v163;
  const char *v164;
  uint8_t *v165;
  const char *v166;
  const char *v167;
  uint8_t *v168;
  uint64_t v169;
  double *v170;
  uint64_t **v171;
  uint64_t *v172;
  _BYTE v173[24];
  uint64_t *v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t v177;
  __int128 v178;
  __int128 v179;
  int v180;
  double *v181;
  std::__shared_weak_count *v182;
  __int128 v183;
  __int128 v184;
  double v185;
  _OWORD v186[2];
  void *__p;
  _BYTE *v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  char v192;
  unint64_t v193;
  int v194;
  double v195;
  __int16 v196;
  double v197;
  __int16 v198;
  double v199;
  _QWORD v200[3];
  _BYTE v201[24];
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  unint64_t v208;
  char v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  _BYTE v213[22];
  __int16 v214;
  double v215;
  _BYTE v216[32];
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  uint64_t v224;
  _QWORD v225[35];
  uint8_t buf[48];
  _OWORD v227[6];
  unint64_t v228;
  char v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;

  v2 = *(double *)(a1 + 384);
  if (*(_QWORD *)(a1 + 48) == *(_QWORD *)(a1 + 40))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v8 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)&buf[4] = v2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,particle count,0", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    *(_DWORD *)v216 = 134349056;
    *(double *)&v216[4] = v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,Unexpected,particle count,0", v216, 12);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "%s\n", v9);
    goto LABEL_253;
  }
  if (!*(_QWORD *)(a1 + 128))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v11 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)&buf[4] = v2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,candidate count,0", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    *(_DWORD *)v216 = 134349056;
    *(double *)&v216[4] = v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,Unexpected,candidate count,0", v216, 12);
    v10 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "%s\n", v12);
    goto LABEL_253;
  }
  v5 = sub_10127EBF8((uint64_t *)(a1 + 104));
  if (!v5)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v13 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)&buf[4] = v2;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,bestCandidate is nullptr", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    *(_DWORD *)v216 = 134349056;
    *(double *)&v216[4] = v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,Unexpected,bestCandidate is nullptr", v216, 12);
    v10 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "%s\n", v14);
    goto LABEL_253;
  }
  v6 = v5;
  if (*(int *)(v5 + 124) <= 0)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v15 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)&buf[4] = v2;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,particles in candidate,0", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    *(_DWORD *)v216 = 134349056;
    *(double *)&v216[4] = v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,Unexpected,particles in candidate,0", v216, 12);
    v10 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "%s\n", v16);
    goto LABEL_253;
  }
  v172 = (uint64_t *)(v5 + 8);
  if (!*(_QWORD *)(v5 + 8))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v17 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)&buf[4] = v2;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,best particle road in best candidate is nullptr", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    *(_DWORD *)v216 = 134349056;
    *(double *)&v216[4] = v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,Unexpected,best particle road in best candidate is nullptr", v216, 12);
    v10 = (uint8_t *)v124;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "%s\n", v124);
LABEL_253:
    if (v10 != buf)
      free(v10);
    return 0;
  }
  if (*(_QWORD *)(a1 + 864))
  {
    sub_100346F9C((_QWORD *)(a1 + 864));
    *(_BYTE *)(a1 + 880) = 0;
  }
  v171 = (uint64_t **)(a1 + 864);
  v192 = 0;
  v190 = 0u;
  v191 = 0u;
  v189 = 0u;
  v193 = 0xBFF0000000000000;
  if (&v189 != (__int128 *)(v6 + 1064))
    sub_10129E1B4((uint64_t)&v189, *(_QWORD *)(v6 + 1064), *(_QWORD *)(v6 + 1072), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v6 + 1072) - *(_QWORD *)(v6 + 1064)) >> 4));
  if (*(_BYTE *)(v6 + 153))
  {
    if (*(_QWORD *)(a2 + 120) && *(_BYTE *)(a2 + 504))
    {
      sub_10110E724((uint64_t *)(a2 + 120), (uint64_t)buf);
      v7 = sub_100F5C3F4((uint64_t)buf, v6 + 128);
    }
    else
    {
      v7 = 0;
    }
    if (sub_101123FF0(a1 + 112, v6 + 128) && (v7 || sub_10127CE88(v6, (int *)(a1 + 792))))
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v20 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349312;
        *(double *)&buf[4] = v2;
        *(_WORD *)&buf[12] = 1026;
        *(_DWORD *)&buf[14] = v7;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,extractSolution,using outgoing particles,previous,%{public}d", buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
        *(_DWORD *)v216 = 134349312;
        *(double *)&v216[4] = v2;
        *(_WORD *)&v216[12] = 1026;
        *(_DWORD *)&v216[14] = v7;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,extractSolution,using outgoing particles,previous,%{public}d", v216, 18);
        v140 = (uint8_t *)v139;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "%s\n", v139);
        if (v140 != buf)
          free(v140);
      }
      *(_BYTE *)(a1 + 896) = 1;
      *(_QWORD *)buf = v6 + 128;
      v21 = sub_10129DF60((uint64_t **)(a1 + 112), v6 + 128, (uint64_t)&unk_101B9EB60, (__int128 **)buf);
      sub_10129E490((uint64_t *)&v189, *((uint64_t *)&v189 + 1), v21[140], v21[141], 0x6DB6DB6DB6DB6DB7 * ((v21[141] - v21[140]) >> 4));
    }
  }
  if (*((_QWORD *)&v189 + 1) == (_QWORD)v189)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v26 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)&buf[4] = v2;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,solutionParticleVector has zero particles", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      *(_DWORD *)v216 = 134349056;
      *(double *)&v216[4] = v2;
      LODWORD(v169) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,Unexpected,solutionParticleVector has zero particles", v216, v169);
      v135 = (uint8_t *)v134;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "%s\n", v134);
      if (v135 != buf)
        free(v135);
    }
    v18 = 0;
    goto LABEL_226;
  }
  v22 = *(_OWORD *)(v6 + 248);
  v219 = *(_OWORD *)(v6 + 232);
  v220 = v22;
  v23 = *(_OWORD *)(v6 + 184);
  *(_OWORD *)v216 = *(_OWORD *)(v6 + 168);
  *(_OWORD *)&v216[16] = v23;
  v24 = *(_OWORD *)(v6 + 216);
  v217 = *(_OWORD *)(v6 + 200);
  v218 = v24;
  v25 = *(_OWORD *)(v6 + 280);
  v221 = *(_OWORD *)(v6 + 264);
  v222 = v25;
  if (*(char *)(v6 + 319) < 0)
  {
    sub_100115CE4(&v223, *(void **)(v6 + 296), *(_QWORD *)(v6 + 304));
  }
  else
  {
    v223 = *(_OWORD *)(v6 + 296);
    v224 = *(_QWORD *)(v6 + 312);
  }
  memcpy(v225, (const void *)(v6 + 320), sizeof(v225));
  v27 = *(double *)(v6 + 360);
  v28 = v27 < 19.0 && v27 > 0.0;
  if (v28)
  {
    v225[5] = 0x4033000000000000;
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v29 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v30 = *(_QWORD *)(v6 + 360);
      *(_DWORD *)buf = 134349568;
      *(double *)&buf[4] = v2;
      *(_WORD *)&buf[12] = 2050;
      *(_QWORD *)&buf[14] = v30;
      *(_WORD *)&buf[22] = 2050;
      *(_QWORD *)&buf[24] = 0x4033000000000000;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,deweightCourse,courseUnc,%{public}.1lf,deweightUnc,%{public}.1lf", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v136 = *(_QWORD *)(v6 + 360);
      LODWORD(v200[0]) = 134349568;
      *(double *)((char *)v200 + 4) = v2;
      WORD2(v200[1]) = 2050;
      *(_QWORD *)((char *)&v200[1] + 6) = v136;
      HIWORD(v200[2]) = 2050;
      *(_QWORD *)v201 = 0x4033000000000000;
      LODWORD(v169) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,deweightCourse,courseUnc,%{public}.1lf,deweightUnc,%{public}.1lf", v200, v169);
      v138 = (uint8_t *)v137;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "%s\n", v137);
      if (v138 != buf)
        free(v138);
    }
  }
  if (sub_100408504(*(_QWORD *)(v6 + 8), 0, *(double *)(v6 + 56), 7.5))
    goto LABEL_83;
  if ((*(_DWORD *)(*v172 + 20) & 0xFFFFFFFE) != 8)
    goto LABEL_102;
  if (*(_QWORD *)(a2 + 120)
    && ((sub_10110E724(v172, (uint64_t)buf),
         sub_10110E724((uint64_t *)(a2 + 120), (uint64_t)v200),
         sub_100F5C3F4((uint64_t)buf, (uint64_t)v200))
     || *(_BYTE *)(a1 + 896)
     && (sub_10110E724((uint64_t *)(a2 + 120), (uint64_t)&v181), sub_100F5C3F4(v6 + 128, (uint64_t)&v181))))
  {
    v38 = 1;
    v39 = sub_100408504(*(_QWORD *)(v6 + 8), 1, *(double *)(v6 + 56), 3.75);
  }
  else
  {
    v38 = 0;
    v39 = 0;
  }
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
  v40 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134349568;
    *(double *)&buf[4] = v2;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = v39;
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = v38;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,invalidateCourse,particleIsOnSegmentsThatHasSmallCurves,%{public}d,particleInOnSameRoadAsPriorSnap,%{public}d", buf, 0x18u);
  }
  v41 = v38 & v39;
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    LODWORD(v200[0]) = 134349568;
    *(double *)((char *)v200 + 4) = v2;
    WORD2(v200[1]) = 1026;
    *(_DWORD *)((char *)&v200[1] + 6) = v39;
    WORD1(v200[2]) = 1026;
    HIDWORD(v200[2]) = v38;
    LODWORD(v169) = 24;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,invalidateCourse,particleIsOnSegmentsThatHasSmallCurves,%{public}d,particleInOnSameRoadAsPriorSnap,%{public}d", v200, v169);
    v142 = (uint8_t *)v141;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "%s\n", v141);
    if (v142 != buf)
      free(v142);
    if ((v41 & 1) != 0)
      goto LABEL_83;
LABEL_102:
    v37 = 0;
    if (!v28)
      goto LABEL_105;
    goto LABEL_103;
  }
  if (!v41)
    goto LABEL_102;
LABEL_83:
  *((_QWORD *)&v221 + 1) = 0xBFF0000000000000;
  v225[5] = 0xBFF0000000000000;
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
  v31 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
  {
    v32 = *(double **)(v6 + 1088);
    v33 = *v32;
    v34 = *(double *)(v6 + 56);
    sub_1004078E0(v32);
    v35 = v32[5];
    v36 = sub_100408414(*(uint64_t **)(v6 + 1088));
    *(_DWORD *)buf = 134349825;
    *(double *)&buf[4] = v2;
    *(_WORD *)&buf[12] = 2049;
    *(double *)&buf[14] = v33;
    *(_WORD *)&buf[22] = 2050;
    *(double *)&buf[24] = v34 * v35;
    *(_WORD *)&buf[32] = 1026;
    *(_DWORD *)&buf[34] = v36;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,Particle is on a curved section of road,%{private}lld,projection,%{public}.2lf,deweightCourse,%{public}d", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v126 = qword_1022A00D8;
    v127 = *(double **)(v6 + 1088);
    v128 = *v127;
    v129 = *(double *)(v6 + 56);
    sub_1004078E0(v127);
    v130 = v127[5];
    v131 = sub_100408414(*(uint64_t **)(v6 + 1088));
    LODWORD(v200[0]) = 134349825;
    *(double *)((char *)v200 + 4) = v2;
    WORD2(v200[1]) = 2049;
    *(double *)((char *)&v200[1] + 6) = v128;
    HIWORD(v200[2]) = 2050;
    *(double *)v201 = v129 * v130;
    *(_WORD *)&v201[8] = 1026;
    *(_DWORD *)&v201[10] = v131;
    LODWORD(v169) = 38;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v126, 2, "CLMMPED,%{public}.1lf,Particle is on a curved section of road,%{private}lld,projection,%{public}.2lf,deweightCourse,%{public}d", v200, v169);
    v133 = (uint8_t *)v132;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "%s\n", v132);
    if (v133 != buf)
      free(v133);
  }
  v37 = 1;
LABEL_103:
  memset(buf, 0, 24);
  *(_OWORD *)&buf[24] = xmmword_101BAFC90;
  buf[40] = 0;
  memset(v227, 0, 32);
  __asm { FMOV            V0.2D, #-1.0 }
  v227[2] = _Q0;
  v227[3] = _Q0;
  v227[4] = _Q0;
  v227[5] = _Q0;
  v228 = 0xBFF0000000000000;
  v229 = 0;
  v230 = _Q0;
  v231 = _Q0;
  v232 = _Q0;
  sub_1012854B0((uint64_t)buf, (uint64_t)v216, 0, 1.0);
  v47 = (double *)*((_QWORD *)&v189 + 1);
  for (i = (double *)v189; i != v47; i += 14)
  {
    memset(v200, 0, sizeof(v200));
    *(_QWORD *)v201 = 0x3FF0000000000000;
    *(_OWORD *)&v201[8] = 0u;
    v202 = 0u;
    LODWORD(v203) = 0;
    sub_1012813D8((double *)a1, (uint64_t)buf, i, (uint64_t)v200);
    LODWORD(v203) = 1;
    *(_QWORD *)v201 = 0x3FF0000000000000;
    sub_101285504(i, (uint64_t)v200);
    sub_10112329C(i);
  }
LABEL_105:
  sub_101280438((uint64_t *)&v189, v2);
  sub_101280048((uint64_t *)&v189, (uint64_t)&v181);
  if ((v37 & 1) == 0)
  {
    if (v181)
    {
      if (*(_BYTE *)(a2 + 504))
      {
        if (*(_QWORD *)(a2 + 120))
        {
          sub_10110E724((uint64_t *)(a2 + 120), (uint64_t)buf);
          sub_10110E724((uint64_t *)&v181, (uint64_t)v200);
          if (sub_100F5C3F4((uint64_t)buf, (uint64_t)v200))
          {
            v70 = v185;
            v71 = *(double *)(a2 + 168);
            v72 = v181;
            sub_1004078E0(v181);
            v73 = v72[5];
            v74 = *(double *)(a1 + 856);
            sub_1012856C8((uint64_t)v213, (uint64_t)&v189);
            v75 = (v70 - v71) * v73;
            v76 = v74 * 5.0;
            if (v75 <= v76)
            {
LABEL_235:
              sub_1012857D0((uint64_t)v213);
              goto LABEL_106;
            }
            memset(v200, 0, sizeof(v200));
            *(_OWORD *)v201 = xmmword_101BAFC90;
            v201[16] = 0;
            v202 = 0u;
            v203 = 0u;
            __asm { FMOV            V0.2D, #-1.0 }
            v204 = _Q0;
            v205 = _Q0;
            v206 = _Q0;
            v207 = _Q0;
            v208 = 0xBFF0000000000000;
            v209 = 0;
            v210 = _Q0;
            v211 = _Q0;
            v212 = _Q0;
            sub_1012854B0((uint64_t)v200, (uint64_t)v216, 0, 1.0);
            *((_QWORD *)&v205 + 1) = 0xBFF0000000000000;
            *((_QWORD *)&v206 + 1) = 0xBFF0000000000000;
            v78 = *(double **)v213;
            for (j = *(double **)&v213[8]; v78 != j; v78 += 14)
            {
              memset(buf, 0, 24);
              *(_QWORD *)&buf[24] = 0x3FF0000000000000;
              *(_OWORD *)&buf[32] = 0u;
              memset(v227, 0, 20);
              sub_1012813D8((double *)a1, (uint64_t)v200, v78, (uint64_t)buf);
              LODWORD(v227[1]) = 1;
              *(_QWORD *)&buf[24] = 0x3FF0000000000000;
              sub_101285504(v78, (uint64_t)buf);
              sub_10112329C(v78);
            }
            sub_101280048((uint64_t *)v213, (uint64_t)&v174);
            v80 = v174;
            if (v174)
            {
              v81 = *(double *)&v179;
              v82 = *(double *)(a2 + 168);
              sub_1004078E0(v174);
              v83 = (v81 - v82) * *((double *)v80 + 5);
              if (v83 >= v76)
                goto LABEL_234;
              sub_101285760((uint64_t)&v189, (uint64_t)v213);
              sub_10110E7C4((uint64_t)&v181, (uint64_t)&v174);
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
              v84 = qword_1022A00D8;
              if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 134349568;
                *(double *)&buf[4] = v2;
                *(_WORD *)&buf[12] = 2050;
                *(double *)&buf[14] = v75;
                *(_WORD *)&buf[22] = 2050;
                *(double *)&buf[24] = v83;
                _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,invalidated course and recomputed solution,changeInDistance,%{public}.2lf,newChangeInDistance,%{public}.2lf", buf, 0x20u);
              }
              if (!sub_1001BFF7C(115, 2))
                goto LABEL_234;
              bzero(buf, 0x65CuLL);
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
              v194 = 134349568;
              v195 = v2;
              v196 = 2050;
              v197 = v75;
              v198 = 2050;
              v199 = v83;
              LODWORD(v169) = 32;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,invalidated course and recomputed solution,changeInDistance,%{public}.2lf,newChangeInDistance,%{public}.2lf", &v194, v169);
              v86 = (uint8_t *)v85;
              sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "%s\n", v85);
            }
            else
            {
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
              v119 = qword_1022A00D8;
              if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134349056;
                *(double *)&buf[4] = v2;
                _os_log_impl((void *)&_mh_execute_header, v119, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,newParticle road is nullptr,1", buf, 0xCu);
              }
              if (!sub_1001BFF7C(115, 0))
                goto LABEL_234;
              bzero(buf, 0x65CuLL);
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
              v194 = 134349056;
              v195 = v2;
              LODWORD(v169) = 12;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,Unexpected,newParticle road is nullptr,1", &v194, v169);
              v86 = (uint8_t *)v161;
              sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "%s\n", v161);
            }
            if (v86 != buf)
              free(v86);
LABEL_234:
            sub_100F5EA24((uint64_t)&v174);
            goto LABEL_235;
          }
        }
      }
    }
  }
LABEL_106:
  if (!*(_BYTE *)(a2 + 504)
    || !*(_BYTE *)(v6 + 152)
    || !*(_BYTE *)(v6 + 153)
    || !v181
    || !*v172
    || !*(_QWORD *)(a2 + 120)
    || (sub_10110E724((uint64_t *)(a2 + 120), (uint64_t)buf),
        sub_10110E724((uint64_t *)&v181, (uint64_t)v200),
        sub_100F5C3F4((uint64_t)buf, (uint64_t)v200))
    || (sub_10110E724((uint64_t *)&v181, (uint64_t)&v174), !sub_100F5C3F4((uint64_t)&v174, v6 + 128))
    || (sub_10110E724(v172, (uint64_t)v213),
        sub_10110E724((uint64_t *)(a2 + 120), (uint64_t)&v194),
        !sub_100F5C3F4((uint64_t)v213, (uint64_t)&v194))
    || sub_101285814((uint64_t)&v181, (double *)a1, a2 + 120) <= *(double *)(a1 + 856) * 5.0)
  {
    v54 = 0;
    goto LABEL_135;
  }
  sub_1012856C8((uint64_t)&v174, (uint64_t)&v189);
  sub_10110E724((uint64_t *)&v181, (uint64_t)v173);
  v49 = sub_101280164(&v174, (uint64_t)v173, v2);
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
  v50 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134349312;
    *(double *)&buf[4] = v2;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = v49;
    _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,eliminated outgoing roadKey for local solution,%{public}d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    LODWORD(v200[0]) = 134349312;
    *(double *)((char *)v200 + 4) = v2;
    WORD2(v200[1]) = 1026;
    *(_DWORD *)((char *)&v200[1] + 6) = v49;
    LODWORD(v169) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,eliminated outgoing roadKey for local solution,%{public}d", v200, v169);
    v163 = (uint8_t *)v162;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "%s\n", v162);
    if (v163 != buf)
      free(v163);
  }
  if (v175 == v174)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v120 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349312;
      *(double *)&buf[4] = v2;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = v49;
      _os_log_impl((void *)&_mh_execute_header, v120, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,Number of particles 0 after eliminating particles on combined road,%{public}d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      LODWORD(v200[0]) = 134349312;
      *(double *)((char *)v200 + 4) = v2;
      WORD2(v200[1]) = 1026;
      *(_DWORD *)((char *)&v200[1] + 6) = v49;
      LODWORD(v169) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,Number of particles 0 after eliminating particles on combined road,%{public}d", v200, v169);
      v165 = (uint8_t *)v164;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "%s\n", v164);
      if (v165 != buf)
        free(v165);
    }
    v54 = 0;
    goto LABEL_264;
  }
  sub_101280048((uint64_t *)&v174, (uint64_t)v200);
  if (!v200[0])
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v121 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)&buf[4] = v2;
      _os_log_impl((void *)&_mh_execute_header, v121, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,newParticle road is nullptr,2", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_262;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    *(_DWORD *)v213 = 134349056;
    *(double *)&v213[4] = v2;
    LODWORD(v169) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,Unexpected,newParticle road is nullptr,2", v213, v169);
    v123 = (uint8_t *)v122;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "%s\n", v122);
    goto LABEL_329;
  }
  v51 = sub_101285814((uint64_t)v200, (double *)a1, a2 + 120);
  if (*(double *)(a1 + 472) < 0.75)
    goto LABEL_125;
  v52 = *(double *)(a1 + 856);
  if (v51 > v52 * 0.8)
    goto LABEL_125;
  if (v51 < v52 && !*(_BYTE *)(a1 + 897))
  {
    v143 = *(double *)(a1 + 480);
    v144 = *(float *)v201;
    v145 = *((float *)&v183 + 2);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v146 = vabdd_f64(v143, v144);
    v147 = vabdd_f64(v143, v145);
    v148 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349568;
      *(double *)&buf[4] = v2;
      *(_WORD *)&buf[12] = 2050;
      *(double *)&buf[14] = v146;
      *(_WORD *)&buf[22] = 2050;
      *(double *)&buf[24] = v147;
      _os_log_impl((void *)&_mh_execute_header, v148, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,use new particle, course check, crumbCourseDiffWithNewParticle,%{public}.1lf,crumbCourseDiffWithPreviousParticle,%{public}.1lf", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      *(_DWORD *)v213 = 134349568;
      *(double *)&v213[4] = v2;
      *(_WORD *)&v213[12] = 2050;
      *(double *)&v213[14] = v146;
      v214 = 2050;
      v215 = v147;
      LODWORD(v169) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,use new particle, course check, crumbCourseDiffWithNewParticle,%{public}.1lf,crumbCourseDiffWithPreviousParticle,%{public}.1lf", v213, v169);
      v168 = (uint8_t *)v167;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "%s\n", v167);
      if (v168 != buf)
        free(v168);
    }
    if (v146 < 35.0 && v147 > 60.0)
    {
LABEL_125:
      v53 = vabdd_f64(*(double *)(a1 + 480), *((float *)&v183 + 2));
      v54 = v53 < 30.0;
      sub_10110E7C4((uint64_t)&v181, (uint64_t)v200);
      sub_101285760((uint64_t)&v189, (uint64_t)&v174);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v55 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349312;
        *(double *)&buf[4] = v2;
        *(_WORD *)&buf[12] = 1026;
        *(_DWORD *)&buf[14] = v53 < 30.0;
        _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,new particle without the outgoing road accepted,courseIsUnreliable,%{public}d", buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
        *(_DWORD *)v213 = 134349312;
        *(double *)&v213[4] = v2;
        *(_WORD *)&v213[12] = 1026;
        *(_DWORD *)&v213[14] = v53 < 30.0;
        LODWORD(v169) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,new particle without the outgoing road accepted,courseIsUnreliable,%{public}d", v213, v169);
        v57 = (uint8_t *)v56;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "%s\n", v56);
        if (v57 != buf)
          free(v57);
      }
      goto LABEL_263;
    }
  }
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
  v125 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134349312;
    *(double *)&buf[4] = v2;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = v49;
    _os_log_impl((void *)&_mh_execute_header, v125, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,not using local solution without outgoing road,%{public}d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    *(_DWORD *)v213 = 134349312;
    *(double *)&v213[4] = v2;
    *(_WORD *)&v213[12] = 1026;
    *(_DWORD *)&v213[14] = v49;
    LODWORD(v169) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,not using local solution without outgoing road,%{public}d", v213, v169);
    v123 = (uint8_t *)v166;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "%s\n", v166);
LABEL_329:
    if (v123 != buf)
      free(v123);
  }
LABEL_262:
  v54 = 0;
LABEL_263:
  sub_100F5EA24((uint64_t)v200);
LABEL_264:
  sub_1012857D0((uint64_t)&v174);
LABEL_135:
  v58 = (uint64_t **)(a1 + 256);
  sub_100349198((_QWORD *)(a1 + 256), (uint64_t *)&v181);
  v59 = v184;
  *(_OWORD *)(a1 + 272) = v183;
  *(_OWORD *)(a1 + 288) = v59;
  *(double *)(a1 + 304) = v185;
  *(_OWORD *)(a1 + 312) = v186[0];
  *(_OWORD *)(a1 + 321) = *(_OWORD *)((char *)v186 + 9);
  if ((double **)(a1 + 256) != &v181)
    sub_100F5F1C8((char *)(a1 + 344), (char *)__p, (uint64_t)v188, 0x8E38E38E38E38E39 * ((v188 - (_BYTE *)__p) >> 3));
  *(_BYTE *)(a1 + 882) = 1;
  v60 = *(_BYTE *)(v6 + 152);
  if (v60)
  {
    v60 = *(_BYTE *)(v6 + 153);
    if (v60)
      v60 = *(_DWORD *)(v6 + 1044) > (int)(-1227133513 * ((*(_QWORD *)(v6 + 1072) - *(_QWORD *)(v6 + 1064)) >> 4));
  }
  *(_BYTE *)(a1 + 368) = v60;
  if (!*(_QWORD *)(a1 + 256))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v93 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)&buf[4] = v2;
      _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,best particle road is nullptr", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_216;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    LODWORD(v200[0]) = 134349056;
    *(double *)((char *)v200 + 4) = v2;
    LODWORD(v169) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,Unexpected,best particle road is nullptr", v200, v169);
    v95 = (uint8_t *)v94;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "%s\n", v94);
    goto LABEL_298;
  }
  v61 = (_OWORD *)(a1 + 376);
  v170 = (double *)(a1 + 312);
  if (*(_BYTE *)(a1 + 896)
    && (sub_10110E724((uint64_t *)(a1 + 256), (uint64_t)buf),
        v62 = (uint64_t *)(v6 + 128),
        sub_100F5C3F4(v6 + 128, (uint64_t)buf)))
  {
    v63 = *(_OWORD *)(v6 + 600);
    v64 = *(_OWORD *)(v6 + 616);
    v65 = *(_OWORD *)(v6 + 648);
    *(_OWORD *)(a1 + 408) = *(_OWORD *)(v6 + 632);
    *(_OWORD *)(a1 + 424) = v65;
    *v61 = v63;
    *(_OWORD *)(a1 + 392) = v64;
    v66 = *(_OWORD *)(v6 + 664);
    v67 = *(_OWORD *)(v6 + 680);
    v68 = *(_OWORD *)(v6 + 712);
    *(_OWORD *)(a1 + 472) = *(_OWORD *)(v6 + 696);
    *(_OWORD *)(a1 + 488) = v68;
    *(_OWORD *)(a1 + 440) = v66;
    *(_OWORD *)(a1 + 456) = v67;
    std::string::operator=((std::string *)(a1 + 504), (const std::string *)(v6 + 728));
    memcpy((void *)(a1 + 528), (const void *)(v6 + 752), 0x118uLL);
    if (*(_QWORD *)(v6 + 8))
    {
      v69 = (_QWORD *)(a1 + 864);
      sub_100349198(v171, v172);
      *(_BYTE *)(a1 + 880) = *(_BYTE *)(v6 + 28);
    }
    else
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v96 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134349056;
        *(double *)&buf[4] = v2;
      }
      v69 = (_QWORD *)(a1 + 864);
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
        LODWORD(v200[0]) = 134349056;
        *(double *)((char *)v200 + 4) = v2;
        LODWORD(v169) = 12;
        v160 = (uint8_t *)v159;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "%s\n", v159);
        if (v160 != buf)
          free(v160);
        v69 = (_QWORD *)(a1 + 864);
      }
    }
    if (*v69)
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v97 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        v98 = **v171;
        v99 = *v62;
        v100 = *(_QWORD *)v170;
        *(_DWORD *)buf = 134349825;
        *(double *)&buf[4] = v2;
        *(_WORD *)&buf[12] = 2049;
        *(_QWORD *)&buf[14] = v98;
        *(_WORD *)&buf[22] = 2049;
        *(_QWORD *)&buf[24] = v99;
        *(_WORD *)&buf[32] = 2050;
        *(_QWORD *)&buf[34] = v100;
        _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,Using outgoing,incomingID,%{private}lld,outgoingID,%{private}lld,score,%{public}.8lf", buf, 0x2Au);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
        v154 = **v171;
        v155 = *v62;
        v156 = *(_QWORD *)v170;
        LODWORD(v200[0]) = 134349825;
        *(double *)((char *)v200 + 4) = v2;
        WORD2(v200[1]) = 2049;
        *(_QWORD *)((char *)&v200[1] + 6) = v154;
        HIWORD(v200[2]) = 2049;
        *(_QWORD *)v201 = v155;
        *(_WORD *)&v201[8] = 2050;
        *(_QWORD *)&v201[10] = v156;
        LODWORD(v169) = 42;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,Using outgoing,incomingID,%{private}lld,outgoingID,%{private}lld,score,%{public}.8lf", v200, v169);
        v158 = (uint8_t *)v157;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "%s\n", v157);
        if (v158 != buf)
          free(v158);
      }
    }
  }
  else
  {
    v87 = *(_OWORD *)(v6 + 168);
    v88 = *(_OWORD *)(v6 + 184);
    v89 = *(_OWORD *)(v6 + 216);
    *(_OWORD *)(a1 + 408) = *(_OWORD *)(v6 + 200);
    *(_OWORD *)(a1 + 424) = v89;
    *v61 = v87;
    *(_OWORD *)(a1 + 392) = v88;
    v90 = *(_OWORD *)(v6 + 232);
    v91 = *(_OWORD *)(v6 + 248);
    v92 = *(_OWORD *)(v6 + 280);
    *(_OWORD *)(a1 + 472) = *(_OWORD *)(v6 + 264);
    *(_OWORD *)(a1 + 488) = v92;
    *(_OWORD *)(a1 + 440) = v90;
    *(_OWORD *)(a1 + 456) = v91;
    std::string::operator=((std::string *)(a1 + 504), (const std::string *)(v6 + 296));
    memcpy((void *)(a1 + 528), (const void *)(v6 + 320), 0x118uLL);
  }
  *(_BYTE *)(a1 + 881) = 0;
  memset(v227, 0, 64);
  memset(buf, 0, sizeof(buf));
  buf[20] = 1;
  *(_DWORD *)&buf[24] = 0;
  sub_1002B7674(a1 + 136, (__int128 *)buf);
  v101 = *(void **)(a1 + 224);
  v102 = *(_OWORD *)&buf[32];
  *(_OWORD *)(a1 + 152) = *(_OWORD *)&buf[16];
  *(_OWORD *)(a1 + 168) = v102;
  *(_QWORD *)(a1 + 184) = *(_QWORD *)&v227[0];
  *(_OWORD *)(a1 + 192) = *(_OWORD *)((char *)v227 + 8);
  *(_OWORD *)(a1 + 201) = *(_OWORD *)((char *)&v227[1] + 1);
  if (v101)
  {
    *(_QWORD *)(a1 + 232) = v101;
    operator delete(v101);
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 240) = 0;
  }
  *(_OWORD *)(a1 + 224) = *(_OWORD *)((char *)&v227[2] + 8);
  v103 = *(std::__shared_weak_count **)&buf[8];
  *(_QWORD *)(a1 + 240) = *((_QWORD *)&v227[3] + 1);
  memset((char *)&v227[2] + 8, 0, 24);
  if (v103)
  {
    p_shared_owners = (unint64_t *)&v103->__shared_owners_;
    do
      v105 = __ldaxr(p_shared_owners);
    while (__stlxr(v105 - 1, p_shared_owners));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  *(_QWORD *)(a1 + 248) = 0xBFF0000000000000;
  *(_BYTE *)(a1 + 848) = sub_101285840(a1, (double *)a2) ^ 1;
  *(_QWORD *)(a1 + 888) = *(_QWORD *)(a1 + 96);
  memset(v200, 0, sizeof(v200));
  *(_OWORD *)v201 = xmmword_101BAFC90;
  v201[16] = 0;
  v202 = 0u;
  v203 = 0u;
  __asm { FMOV            V0.2D, #-1.0 }
  v204 = _Q0;
  v205 = _Q0;
  v206 = _Q0;
  v207 = _Q0;
  v208 = 0xBFF0000000000000;
  v209 = 0;
  v210 = _Q0;
  v211 = _Q0;
  v212 = _Q0;
  sub_1012854B0((uint64_t)v200, a1 + 376, *(unsigned __int8 *)(a1 + 904), 1.0);
  if (v54)
  {
    *((_QWORD *)&v205 + 1) = 0xBFF0000000000000;
    *((_QWORD *)&v206 + 1) = 0xBFF0000000000000;
  }
  v174 = 0;
  v175 = 0;
  v176 = 0;
  v177 = 0x3FF0000000000000;
  v178 = 0u;
  v179 = 0u;
  v180 = 0;
  if (!sub_1012813D8((double *)a1, (uint64_t)v200, (double *)(a1 + 256), (uint64_t)&v174))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v113 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)&buf[4] = v2;
      _os_log_impl((void *)&_mh_execute_header, v113, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,unable to calculate score", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_216;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    *(_DWORD *)v213 = 134349056;
    *(double *)&v213[4] = v2;
    LODWORD(v169) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,Unexpected,unable to calculate score", v213, v169);
    v95 = (uint8_t *)v114;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "%s\n", v114);
    goto LABEL_298;
  }
  v180 = 1;
  v177 = 0x3FF0000000000000;
  sub_101285504((_QWORD *)(a1 + 256), (uint64_t)&v174);
  sub_10112329C((double *)(a1 + 256));
  if (sub_10127BFA8(a1 + 136))
  {
    *(_DWORD *)(a1 + 556) = 0;
    v107 = sub_10127F678((uint64_t *)(a1 + 104));
    if (v107 > 0.0)
    {
      v108 = *(double *)(a1 + 312) / v107;
      if (v108 > 1000000.0)
        v108 = 1000000.0;
      v109 = v108;
      *(float *)(a1 + 556) = v109;
    }
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v110 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v111 = **v58;
      v112 = *(_QWORD *)v170;
      *(_DWORD *)buf = 134349569;
      *(double *)&buf[4] = v2;
      *(_WORD *)&buf[12] = 2049;
      *(_QWORD *)&buf[14] = v111;
      *(_WORD *)&buf[22] = 2050;
      *(_QWORD *)&buf[24] = v112;
      _os_log_impl((void *)&_mh_execute_header, v110, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,bestParticleRoadID,%{private}lld,score,%{public}.8lf", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v150 = **v58;
      v151 = *v170;
      *(_DWORD *)v213 = 134349569;
      *(double *)&v213[4] = v2;
      *(_WORD *)&v213[12] = 2049;
      *(_QWORD *)&v213[14] = v150;
      v214 = 2050;
      v215 = v151;
      LODWORD(v169) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,bestParticleRoadID,%{private}lld,score,%{public}.8lf", v213, v169);
      v153 = (uint8_t *)v152;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "%s\n", v152);
      if (v153 != buf)
        free(v153);
    }
    v18 = 1;
    goto LABEL_217;
  }
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
  v115 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134349056;
    *(double *)&buf[4] = v2;
    _os_log_impl((void *)&_mh_execute_header, v115, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,unable to fill crumb", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    *(_DWORD *)v213 = 134349056;
    *(double *)&v213[4] = v2;
    LODWORD(v169) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,Unexpected,unable to fill crumb", v213, v169);
    v95 = (uint8_t *)v149;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "%s\n", v149);
LABEL_298:
    if (v95 != buf)
      free(v95);
  }
LABEL_216:
  v18 = 0;
LABEL_217:
  if (__p)
  {
    v188 = __p;
    operator delete(__p);
  }
  v116 = v182;
  if (v182)
  {
    v117 = (unint64_t *)&v182->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  if (SHIBYTE(v224) < 0)
    operator delete((void *)v223);
LABEL_226:
  if (*((_QWORD *)&v190 + 1))
  {
    *(_QWORD *)&v191 = *((_QWORD *)&v190 + 1);
    operator delete(*((void **)&v190 + 1));
  }
  *(_QWORD *)buf = &v189;
  sub_10083CC6C((void ***)buf);
  return v18;
}

void sub_10128534C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  sub_100F5EA24((uint64_t)&a61);
  sub_1012857D0((uint64_t)&a21);
  sub_100F5EA24((uint64_t)&a35);
  if (SLOBYTE(STACK[0x347]) < 0)
    operator delete((void *)STACK[0x330]);
  sub_1012857D0((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_1012854B0(uint64_t a1, uint64_t a2, int a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 56);
  v4 = *(_QWORD *)(a2 + 80);
  v6 = *(_QWORD *)(a2 + 96);
  v5 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 104) = v5;
  v8 = *(_QWORD *)(a2 + 184);
  v7 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 112) = v4;
  *(_QWORD *)(a1 + 120) = v7;
  *(double *)(a1 + 128) = a4;
  *(_QWORD *)(a1 + 136) = v6;
  *(_QWORD *)(a1 + 144) = v8;
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 228);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 216);
  *(int8x16_t *)(a1 + 184) = vextq_s8(*(int8x16_t *)(a2 + 16), *(int8x16_t *)(a2 + 16), 8uLL);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 8);
  sub_100583BE8(a1, a2, a3);
}

void sub_101285504(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char *v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  v5 = a1[11];
  v4 = a1[12];
  v6 = (void **)(a1 + 11);
  if (v5 == v4)
  {
LABEL_5:
    v8 = (uint64_t)(a1 + 13);
    v9 = a1[13];
    if (v4 >= v9)
    {
      v14 = 0x8E38E38E38E38E39 * ((uint64_t)(v4 - v5) >> 3);
      v15 = v14 + 1;
      if (v14 + 1 > 0x38E38E38E38E38ELL)
        sub_100259694();
      v16 = 0x8E38E38E38E38E39 * ((uint64_t)(v9 - v5) >> 3);
      if (2 * v16 > v15)
        v15 = 2 * v16;
      if (v16 >= 0x1C71C71C71C71C7)
        v17 = 0x38E38E38E38E38ELL;
      else
        v17 = v15;
      if (v17)
        v18 = (char *)sub_10029D26C(v8, v17);
      else
        v18 = 0;
      v22 = &v18[72 * v14];
      v23 = &v18[72 * v17];
      *(_OWORD *)v22 = *(_OWORD *)a2;
      v24 = *(_OWORD *)(a2 + 16);
      v25 = *(_OWORD *)(a2 + 32);
      v26 = *(_OWORD *)(a2 + 48);
      *((_QWORD *)v22 + 8) = *(_QWORD *)(a2 + 64);
      *((_OWORD *)v22 + 2) = v25;
      *((_OWORD *)v22 + 3) = v26;
      *((_OWORD *)v22 + 1) = v24;
      v13 = v22 + 72;
      v28 = (char *)a1[11];
      v27 = (char *)a1[12];
      if (v27 != v28)
      {
        do
        {
          *(_OWORD *)(v22 - 72) = *(_OWORD *)(v27 - 72);
          v29 = *(_OWORD *)(v27 - 56);
          v30 = *(_OWORD *)(v27 - 40);
          v31 = *(_OWORD *)(v27 - 24);
          *((_DWORD *)v22 - 2) = *((_DWORD *)v27 - 2);
          *(_OWORD *)(v22 - 24) = v31;
          *(_OWORD *)(v22 - 40) = v30;
          *(_OWORD *)(v22 - 56) = v29;
          v22 -= 72;
          v27 -= 72;
        }
        while (v27 != v28);
        v27 = (char *)*v6;
      }
      a1[11] = v22;
      a1[12] = v13;
      a1[13] = v23;
      if (v27)
        operator delete(v27);
    }
    else
    {
      *(_OWORD *)v4 = *(_OWORD *)a2;
      v10 = *(_OWORD *)(a2 + 16);
      v11 = *(_OWORD *)(a2 + 32);
      v12 = *(_OWORD *)(a2 + 48);
      *(_QWORD *)(v4 + 64) = *(_QWORD *)(a2 + 64);
      *(_OWORD *)(v4 + 32) = v11;
      *(_OWORD *)(v4 + 48) = v12;
      *(_OWORD *)(v4 + 16) = v10;
      v13 = (char *)(v4 + 72);
    }
    a1[12] = v13;
  }
  else
  {
    v7 = a1[11];
    while (*(_DWORD *)(v7 + 64) != *(_DWORD *)(a2 + 64))
    {
      v7 += 72;
      if (v7 == v4)
        goto LABEL_5;
    }
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v19 = *(_OWORD *)(a2 + 16);
    v20 = *(_OWORD *)(a2 + 32);
    v21 = *(_OWORD *)(a2 + 48);
    *(_DWORD *)(v7 + 64) = *(_DWORD *)(a2 + 64);
    *(_OWORD *)(v7 + 32) = v20;
    *(_OWORD *)(v7 + 48) = v21;
    *(_OWORD *)(v7 + 16) = v19;
  }
}

uint64_t sub_1012856C8(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  sub_10129D2C4((_QWORD *)a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4));
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  sub_10027205C((_QWORD *)(a1 + 24), *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 2);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  return a1;
}

void sub_101285748(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10083CC6C((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101285760(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_10129E1B4(a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4));
    sub_1002A3054((char *)(a1 + 24), *(char **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 2);
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  return a1;
}

uint64_t sub_1012857D0(uint64_t a1)
{
  void *v2;
  void **v4;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  v4 = (void **)a1;
  sub_10083CC6C(&v4);
  return a1;
}

long double sub_101285814(uint64_t a1, double *a2, uint64_t a3)
{
  if (*(_QWORD *)a3 && *(_QWORD *)a1)
    return sub_10011E634(a2, *(double *)(a1 + 32), *(double *)(a1 + 40), *(double *)(a3 + 32), *(double *)(a3 + 40), 0.0);
  else
    return -1.0;
}

uint64_t sub_101285840(uint64_t a1, double *a2)
{
  uint64_t v3;
  uint64_t v6;
  double v7;
  uint64_t v8;
  double v9;
  long double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  BOOL v19;
  double v20;
  NSObject *v21;
  NSObject *v22;
  const char *v23;
  uint8_t *v24;
  const char *v25;
  uint8_t *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  __int16 v30;
  double v31;
  __int16 v32;
  long double v33;
  __int16 v34;
  double v35;
  __int16 v36;
  double v37;
  uint8_t buf[4];
  uint64_t v39;
  __int16 v40;
  double v41;
  __int16 v42;
  long double v43;
  __int16 v44;
  double v45;
  __int16 v46;
  double v47;

  if (!*(_BYTE *)(a1 + 368) || *(double *)(a1 + 568) <= 0.0 || *(double *)(a1 + 480) < 0.0)
    return 1;
  v6 = *(_QWORD *)(a1 + 384);
  if (*(_BYTE *)(a1 + 276))
    v7 = 1.0 - *(double *)(a1 + 304);
  else
    v7 = *(double *)(a1 + 304);
  v8 = *(_QWORD *)(a1 + 256);
  sub_1004078E0((_QWORD *)v8);
  v9 = *(double *)(v8 + 40);
  v10 = sub_10011E634((double *)a1, *(double *)(a1 + 432), *(double *)(a1 + 440), a2[37], a2[38], *(double *)(a1 + 448));
  v11 = a2[68];
  v12 = *(double *)(a1 + 480);
  v13 = -1.0;
  if (v11 >= 0.0)
  {
    v14 = fmod(v12 - v11, 360.0);
    if (v14 < 0.0)
      v14 = v14 + 360.0;
    if (v14 > 180.0)
      v14 = v14 + -360.0;
    v13 = fabs(v14);
  }
  v15 = v7 * v9;
  v16 = fmod(v12 - *(float *)(a1 + 280), 360.0);
  if (v16 < 0.0)
    v16 = v16 + 360.0;
  if (v16 > 180.0)
    v16 = v16 + -360.0;
  v17 = fabs(v16);
  v18 = *(double *)(a1 + 568);
  if (v18 > 0.0 && v18 < 45.0 && v17 > 30.0)
  {
    v19 = 0;
LABEL_26:
    v3 = 1;
    if (v15 >= 0.0 && v15 < 35.0 && !v19)
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v21 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349312;
        v39 = v6;
        v40 = 2050;
        v41 = v15;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,not snapping course,reason,distanceToIntersection,%{public}.1lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
        v28 = 134349312;
        v29 = v6;
        v30 = 2050;
        v31 = v15;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,not snapping course,reason,distanceToIntersection,%{public}.1lf", &v28, 22);
        v26 = (uint8_t *)v25;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::shallUseSnapCourse(const MMSnapData &)", "%s\n", v25);
        if (v26 != buf)
          free(v26);
      }
      v3 = 0;
    }
    goto LABEL_35;
  }
  v20 = a2[54];
  v3 = 1;
  if (v20 > 0.0 && v20 < 45.0)
  {
    v19 = v13 <= 30.0;
    goto LABEL_26;
  }
LABEL_35:
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
  v22 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134350080;
    v39 = v6;
    v40 = 2050;
    v41 = v15;
    v42 = 2050;
    v43 = v10;
    v44 = 2050;
    v45 = v17;
    v46 = 2050;
    v47 = v13;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,distToNextMulti,%{public}.1lf,distFromPriorCrumb,%{public}.1lf,fabsCourseDiffWithSnap,%{public}.1lf,fabsCourseDiffWithPriorFullSnap,%{public}.1lf", buf, 0x34u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v28 = 134350080;
    v29 = v6;
    v30 = 2050;
    v31 = v15;
    v32 = 2050;
    v33 = v10;
    v34 = 2050;
    v35 = v17;
    v36 = 2050;
    v37 = v13;
    LODWORD(v27) = 52;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,distToNextMulti,%{public}.1lf,distFromPriorCrumb,%{public}.1lf,fabsCourseDiffWithSnap,%{public}.1lf,fabsCourseDiffWithPriorFullSnap,%{public}.1lf", &v28, v27);
    v24 = (uint8_t *)v23;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::shallUseSnapCourse(const MMSnapData &)", "%s\n", v23);
    if (v24 != buf)
      free(v24);
  }
  return v3;
}

uint64_t sub_101285D28(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v13;

  *(_QWORD *)a1 = off_102155EB8;
  *(_DWORD *)(a1 + 8) = 257;
  *(_BYTE *)(a1 + 12) = 0;
  *(_OWORD *)(a1 + 16) = xmmword_101BB7280;
  sub_1002433B8(a1 + 168);
  *(_QWORD *)(a1 + 208) = *a2;
  v4 = a2[1];
  *(_QWORD *)(a1 + 216) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_QWORD *)(a1 + 240) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v13 = _Q0;
  *(_OWORD *)(a1 + 224) = _Q0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  sub_101286008(a1 + 264);
  *(_BYTE *)(a1 + 1032) = 0;
  *(_QWORD *)(a1 + 1040) = a1 + 1040;
  *(_QWORD *)(a1 + 1048) = a1 + 1040;
  *(_QWORD *)(a1 + 1056) = 0;
  *(_BYTE *)(a1 + 1064) = 0;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_DWORD *)(a1 + 1104) = 0;
  *(_WORD *)(a1 + 1108) = 1;
  *(_DWORD *)(a1 + 1112) = 0;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(_BYTE *)(a1 + 1168) = 0;
  *(_QWORD *)(a1 + 1176) = 0;
  *(_QWORD *)(a1 + 1192) = 0;
  *(_QWORD *)(a1 + 1184) = 0;
  *(_DWORD *)(a1 + 1200) = 0;
  *(_DWORD *)(a1 + 1208) = 0;
  *(_BYTE *)(a1 + 1212) = 0;
  sub_1011234A8(a1 + 1216);
  *(_DWORD *)(a1 + 1752) = -1;
  *(_OWORD *)(a1 + 1760) = 0u;
  *(_DWORD *)(a1 + 1776) = 0;
  *(_QWORD *)(a1 + 1784) = a1 + 1784;
  *(_QWORD *)(a1 + 1792) = a1 + 1784;
  *(_QWORD *)(a1 + 1800) = 0;
  *(_QWORD *)(a1 + 1808) = a1 + 1808;
  *(_QWORD *)(a1 + 1816) = a1 + 1808;
  *(_QWORD *)(a1 + 1824) = 0;
  *(_QWORD *)(a1 + 1832) = 0x600000006;
  *(_QWORD *)(a1 + 1840) = 0;
  *(_QWORD *)(a1 + 1856) = 0;
  *(_QWORD *)(a1 + 1848) = 0;
  *(_QWORD *)(a1 + 1864) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 1872) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 1944) = 0;
  *(_OWORD *)(a1 + 1880) = 0u;
  *(_OWORD *)(a1 + 1896) = 0u;
  *(_OWORD *)(a1 + 1912) = 0u;
  *(_OWORD *)(a1 + 1928) = 0u;
  *(_OWORD *)(a1 + 1952) = v13;
  *(_DWORD *)(a1 + 2072) = 0;
  *(_OWORD *)(a1 + 2080) = 0u;
  *(_OWORD *)(a1 + 2096) = 0u;
  *(_QWORD *)(a1 + 2112) = 0x3FF0000000000000;
  *(_DWORD *)(a1 + 2120) = 180;
  *(_DWORD *)(a1 + 2144) = 0;
  *(_QWORD *)(a1 + 2128) = 0;
  *(_QWORD *)(a1 + 2136) = 0;
  *(_QWORD *)(a1 + 2200) = 0;
  *(_OWORD *)(a1 + 2168) = 0u;
  *(_OWORD *)(a1 + 2184) = 0u;
  *(_OWORD *)(a1 + 2152) = 0u;
  sub_101286184(a1);
  return a1;
}

void sub_101285F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD *a13, uint64_t a14, _Unwind_Exception *exception_object, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  void **v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;

  v26 = *(void **)(v19 + 2176);
  if (v26)
  {
    *(_QWORD *)(v19 + 2184) = v26;
    operator delete(v26);
  }
  v27 = *(_QWORD *)(v19 + 2088);
  *(_QWORD *)(v19 + 2088) = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v28 = *v21;
  *v21 = 0;
  if (v28)
    sub_10083CB34((uint64_t)v21, v28);
  a18 = v24;
  sub_10083CB88((void ***)&a18);
  a18 = v20;
  sub_10083CB88((void ***)&a18);
  sub_10083CBFC((void ***)&a18);
  v29 = *v25;
  if (*v25)
  {
    *(_QWORD *)(v19 + 1848) = v29;
    operator delete(v29);
  }
  sub_1001A5CBC(v23);
  sub_1001A5CBC(v22);
  if (*(char *)(v19 + 1431) < 0)
    operator delete(*(void **)(v19 + 1408));
  sub_10110BD7C(v19 + 1064);
  sub_1000F34E0(a13);
  sub_1012866D8(a14);
  sub_10083CC6C((void ***)&a18);
  sub_100261F44(v18);
  _Unwind_Resume(a1);
}

uint64_t sub_101286008(uint64_t a1)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 20) = 1;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 112) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = 0;
  *(_WORD *)(a1 + 140) = 1;
  *(_DWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 256) = _Q1;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 512) = 0;
  *(_DWORD *)(a1 + 520) = 0;
  *(_WORD *)(a1 + 504) = 0;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 587) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 454) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_QWORD *)(a1 + 656) = 0;
  *(_QWORD *)(a1 + 664) = 0xBFF0000000000000;
  sub_1002433B8(a1 + 672);
  *(_BYTE *)(a1 + 712) = 0;
  *(_QWORD *)(a1 + 720) = 0;
  *(_QWORD *)(a1 + 736) = 0;
  *(_QWORD *)(a1 + 728) = 0;
  *(_DWORD *)(a1 + 743) = 0;
  *(_QWORD *)(a1 + 752) = 0;
  *(_DWORD *)(a1 + 759) = 0;
  return a1;
}

void sub_10128614C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  void **v4;

  if (*(char *)(v1 + 391) < 0)
    operator delete(*(void **)(v1 + 368));
  sub_101949E5C(v4, v3, v2, v1);
  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

double sub_101286184(uint64_t a1)
{
  __int128 v2;
  void *v3;
  __int128 v4;
  void *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  void **v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  double result;
  _BYTE v29[112];
  __int128 v30;
  std::__shared_weak_count *v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  _OWORD v35[2];
  void *v36[2];
  uint64_t v37;
  char v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 __p;
  uint64_t v48;
  _BYTE v49[280];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  _BYTE v55[19];
  void **v56;

  *(_QWORD *)(a1 + 224) = 0xBFF0000000000000;
  sub_10129DEF4((void **)(a1 + 240));
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  memset(v29, 0, 24);
  v56 = (void **)v29;
  sub_10083CC6C(&v56);
  bzero(v29, 0x300uLL);
  sub_101286008((uint64_t)v29);
  sub_1002B7674(a1 + 264, (__int128 *)v29);
  v2 = *(_OWORD *)&v29[32];
  *(_OWORD *)(a1 + 280) = *(_OWORD *)&v29[16];
  *(_OWORD *)(a1 + 296) = v2;
  *(_QWORD *)(a1 + 312) = *(_QWORD *)&v29[48];
  *(_OWORD *)(a1 + 320) = *(_OWORD *)&v29[56];
  *(_OWORD *)(a1 + 329) = *(_OWORD *)&v29[65];
  v3 = *(void **)(a1 + 352);
  if (v3)
  {
    *(_QWORD *)(a1 + 360) = v3;
    operator delete(v3);
  }
  *(_OWORD *)(a1 + 352) = *(_OWORD *)&v29[88];
  *(_QWORD *)(a1 + 368) = *(_QWORD *)&v29[104];
  memset(&v29[88], 0, 24);
  *(_QWORD *)(a1 + 376) = v30;
  sub_1002B7674(a1 + 384, (__int128 *)((char *)&v30 + 8));
  v4 = v33;
  *(_OWORD *)(a1 + 400) = v32;
  *(_OWORD *)(a1 + 416) = v4;
  *(_QWORD *)(a1 + 432) = v34;
  *(_OWORD *)(a1 + 440) = v35[0];
  *(_OWORD *)(a1 + 449) = *(_OWORD *)((char *)v35 + 9);
  v5 = *(void **)(a1 + 472);
  if (v5)
  {
    *(_QWORD *)(a1 + 480) = v5;
    operator delete(v5);
  }
  *(_OWORD *)(a1 + 472) = *(_OWORD *)v36;
  *(_QWORD *)(a1 + 488) = v37;
  v36[1] = 0;
  v37 = 0;
  v36[0] = 0;
  *(_BYTE *)(a1 + 496) = v38;
  v6 = v44;
  *(_OWORD *)(a1 + 568) = v43;
  *(_OWORD *)(a1 + 584) = v6;
  v7 = v46;
  *(_OWORD *)(a1 + 600) = v45;
  *(_OWORD *)(a1 + 616) = v7;
  v8 = v40;
  *(_OWORD *)(a1 + 504) = v39;
  *(_OWORD *)(a1 + 520) = v8;
  v9 = v42;
  *(_OWORD *)(a1 + 536) = v41;
  *(_OWORD *)(a1 + 552) = v9;
  v10 = (void **)(a1 + 632);
  if (*(char *)(a1 + 655) < 0)
    operator delete(*v10);
  *(_OWORD *)v10 = __p;
  *(_QWORD *)(a1 + 648) = v48;
  HIBYTE(v48) = 0;
  LOBYTE(__p) = 0;
  memcpy((void *)(a1 + 656), v49, 0x118uLL);
  v11 = v51;
  *(_OWORD *)(a1 + 936) = v50;
  *(_OWORD *)(a1 + 952) = v11;
  *(_OWORD *)(a1 + 968) = v52;
  *(_QWORD *)(a1 + 984) = v53;
  sub_1002B7674(a1 + 992, &v54);
  *(_OWORD *)(a1 + 1008) = *(_OWORD *)v55;
  *(_DWORD *)(a1 + 1023) = *(_DWORD *)&v55[15];
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
  if (*((_QWORD *)&v54 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (SHIBYTE(v48) < 0)
    operator delete((void *)__p);
  if (v36[0])
  {
    v36[1] = v36[0];
    operator delete(v36[0]);
  }
  v15 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (*(_QWORD *)&v29[88])
  {
    *(_QWORD *)&v29[96] = *(_QWORD *)&v29[88];
    operator delete(*(void **)&v29[88]);
  }
  v18 = *(std::__shared_weak_count **)&v29[8];
  if (*(_QWORD *)&v29[8])
  {
    v19 = (unint64_t *)(*(_QWORD *)&v29[8] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  *(_BYTE *)(a1 + 1032) = 0;
  sub_1000F34E0((_QWORD *)(a1 + 1040));
  *(_DWORD *)(a1 + 1208) = 0;
  v29[0] = 0;
  memset(&v29[8], 0, 36);
  *(_WORD *)&v29[44] = 1;
  *(_DWORD *)&v29[48] = 0;
  memset(&v29[56], 0, 49);
  v31 = 0;
  v30 = 0uLL;
  LODWORD(v32) = 0;
  *(_QWORD *)(a1 + 1080) = 0;
  *(_OWORD *)(a1 + 1064) = *(_OWORD *)v29;
  sub_1002B7674(a1 + 1088, (__int128 *)&v29[24]);
  *(_OWORD *)(a1 + 1104) = *(_OWORD *)&v29[40];
  *(_OWORD *)(a1 + 1120) = *(_OWORD *)&v29[56];
  *(_QWORD *)(a1 + 1136) = *(_QWORD *)&v29[72];
  *(_OWORD *)(a1 + 1144) = *(_OWORD *)&v29[80];
  *(_OWORD *)(a1 + 1153) = *(_OWORD *)&v29[89];
  v21 = *(void **)(a1 + 1176);
  if (v21)
  {
    *(_QWORD *)(a1 + 1184) = v21;
    operator delete(v21);
  }
  *(_OWORD *)(a1 + 1176) = v30;
  *(_QWORD *)(a1 + 1192) = v31;
  v31 = 0;
  v30 = 0uLL;
  *(_DWORD *)(a1 + 1200) = v32;
  v22 = *(std::__shared_weak_count **)&v29[32];
  if (*(_QWORD *)&v29[32])
  {
    v23 = (unint64_t *)(*(_QWORD *)&v29[32] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  *(_BYTE *)(a1 + 1212) = 0;
  *(_QWORD *)(a1 + 1216) = 0;
  *(_DWORD *)(a1 + 1224) = 0;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1257) = 0u;
  sub_100F5F328(a1 + 1280);
  *(_DWORD *)(a1 + 1752) = -1;
  *(_OWORD *)(a1 + 1760) = 0u;
  *(_DWORD *)(a1 + 1776) = 0;
  *(_QWORD *)v29 = v29;
  *(_QWORD *)&v29[8] = v29;
  *(_QWORD *)&v29[16] = 0;
  sub_10129E9F4((uint64_t *)(a1 + 1784), v29);
  sub_1001A5CBC((uint64_t *)v29);
  *(_QWORD *)v29 = v29;
  *(_QWORD *)&v29[8] = v29;
  *(_QWORD *)&v29[16] = 0;
  sub_10129E9F4((uint64_t *)(a1 + 1808), v29);
  sub_1001A5CBC((uint64_t *)v29);
  *(_QWORD *)(a1 + 1832) = 0x600000006;
  v25 = *(void **)(a1 + 1840);
  if (v25)
  {
    *(_QWORD *)(a1 + 1848) = v25;
    operator delete(v25);
  }
  *(_QWORD *)(a1 + 1840) = 0;
  *(_QWORD *)(a1 + 1848) = 0;
  *(_QWORD *)(a1 + 1856) = 0;
  *(_QWORD *)(a1 + 1864) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 1872) = 0xBFF0000000000000;
  v26 = *(_QWORD *)(a1 + 1888);
  v27 = *(_QWORD *)(a1 + 1880);
  while (v26 != v27)
    v26 = sub_100261F44(v26 - 56);
  *(_QWORD *)(a1 + 1888) = v27;
  sub_101124E30((void **)(a1 + 1904));
  *(_QWORD *)(a1 + 1920) = 0;
  *(_OWORD *)(a1 + 1904) = 0u;
  memset(v29, 0, 24);
  v56 = (void **)v29;
  sub_10083CB88(&v56);
  sub_101124E30((void **)(a1 + 1928));
  *(_QWORD *)(a1 + 1944) = 0;
  *(_OWORD *)(a1 + 1928) = 0u;
  memset(v29, 0, 24);
  v56 = (void **)v29;
  sub_10083CB88(&v56);
  *(_DWORD *)(a1 + 2072) = 0;
  *(_QWORD *)(a1 + 2200) = 0;
  *(_QWORD *)(a1 + 1968) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 2048) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 1976) = 0u;
  *(_OWORD *)(a1 + 1992) = 0u;
  *(_OWORD *)(a1 + 2008) = 0u;
  *(_OWORD *)(a1 + 2024) = 0u;
  *(_QWORD *)(a1 + 2037) = 0;
  *(_QWORD *)(a1 + 2056) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 2064) = 0xBFF0000000000000;
  return result;
}

uint64_t sub_1012866D8(uint64_t a1)
{
  void *v2;
  void *v3;

  sub_100261F44(a1 + 728);
  if (*(char *)(a1 + 391) < 0)
    operator delete(*(void **)(a1 + 368));
  v2 = *(void **)(a1 + 208);
  if (v2)
  {
    *(_QWORD *)(a1 + 216) = v2;
    operator delete(v2);
  }
  sub_100261F44(a1 + 120);
  v3 = *(void **)(a1 + 88);
  if (v3)
  {
    *(_QWORD *)(a1 + 96) = v3;
    operator delete(v3);
  }
  return sub_100261F44(a1);
}

void sub_10128673C(uint64_t a1, char a2, char a3, int a4)
{
  const std::string::value_type *v7;
  uint64_t v8;
  int v9;
  int v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::string v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  __int128 v18;
  __int16 v19;
  __int128 v20;
  __int16 v21;
  int v22;
  int v23;
  uint8_t buf[8];
  std::__shared_weak_count *v25;

  if ((a2 & 1) != 0)
  {
    memset(&v14, 0, sizeof(v14));
    v15 = 0;
    v16 = 0x3FE0000000000000;
    v17 = 0;
    v18 = xmmword_101BDB710;
    v19 = 1;
    v20 = xmmword_101BDB720;
    v21 = 1;
    v22 = 0;
    v7 = "CLPedestrianMMBuildingGeometry";
    v8 = *(_QWORD *)(a1 + 208);
    if (v8 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 104))(v8))
      v7 = "CLPedestrianMMBuildingGeometryCycling";
    std::string::assign(&v14, v7);
    v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 16))(*(_QWORD *)(a1 + 208));
    HIBYTE(v17) = a3;
    LOBYTE(v17) = 1;
    *(double *)&v18 = (double)a4;
    v21 = 256;
    v22 = 1;
    sub_100197040();
    if ((sub_100195F08() & 1) != 0)
      goto LABEL_15;
    sub_1001E4804(buf);
    LOBYTE(v23) = 0;
    v9 = sub_1001E4874(*(uint64_t *)buf, "UseMapsBuildingTileStyleBasic", (BOOL *)&v23);
    v10 = (_BYTE)v23 ? v9 : 0;
    v11 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v10)
LABEL_15:
      v22 = 0;
    operator new();
  }
  operator new();
}

void sub_101286B44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101286BBC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  double v9;
  double v10;
  double v11;
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  const char *v19;
  NSObject *v20;
  double v21;
  uint64_t v22;
  int v28;
  NSObject *v29;
  NSObject *v30;
  const char *v31;
  uint8_t *v32;
  NSObject *v33;
  _BOOL4 v34;
  BOOL v35;
  int v36;
  _BOOL4 v37;
  double v38;
  NSObject *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  double v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  NSObject *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v58;
  const char *v59;
  const char *v60;
  uint8_t *v61;
  const char *v62;
  uint8_t *v63;
  uint64_t v64;
  const char *v65;
  uint8_t *v66;
  const char *v67;
  uint8_t *v68;
  const char *v69;
  const char *v70;
  uint8_t *v71;
  uint64_t v72;
  uint64_t v73;
  _OWORD *v74;
  int v75;
  uint64_t v76;
  __int16 v77;
  _BOOL4 v78;
  __int16 v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  __int16 v83;
  double v84;
  _OWORD v85[3];
  char v86;
  __int128 v87;
  _QWORD *v88;
  _QWORD v89[2];
  _BYTE v90[240];
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  std::string v99;
  _QWORD v100[35];
  char v101;
  char v102;
  char v103;
  uint8_t buf[4];
  uint64_t v105;
  __int16 v106;
  _BYTE v107[14];

  v4 = *(_QWORD *)(a2 + 8);
  a1[246] = 0xBFF0000000000000;
  *((_DWORD *)a1 + 512) = 0;
  *(_OWORD *)(a1 + 247) = 0u;
  *(_OWORD *)(a1 + 249) = 0u;
  *(_OWORD *)(a1 + 251) = 0u;
  *(_OWORD *)(a1 + 253) = 0u;
  *(uint64_t *)((char *)a1 + 2037) = 0;
  a1[257] = 0xBFF0000000000000;
  a1[258] = 0xBFF0000000000000;
  v6 = (_QWORD *)a1[26];
  v5 = (std::__shared_weak_count *)a1[27];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if (!v6)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v15 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      v16 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)buf = 134349056;
      v105 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,invalid geometry pointer, mapMatch", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v58 = *(_QWORD *)(a2 + 8);
      v81 = 134349056;
      v82 = v58;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,Unexpected,invalid geometry pointer, mapMatch", &v81, 12);
      v14 = (uint8_t *)v59;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::mapMatch(CLMapCrumb &)", "%s\n", v59);
      goto LABEL_120;
    }
    goto LABEL_21;
  }
  sub_1010CE3C0((uint64_t)v6);
  v6[1] = *(_QWORD *)(a2 + 8);
  (*(void (**)(_QWORD *))(*v6 + 96))(v6);
  sub_10130AB00(a2);
  v9 = 0.0;
  if (*((double *)a1 + 64) > 0.0)
  {
    v10 = *(double *)(a2 + 24);
    if (v10 < 0.0 || (v11 = *((double *)a1 + 66), v11 < 0.0))
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v12 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134349056;
        v105 = v4;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,unable to compute timeDiff", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
        v81 = 134349056;
        v82 = v4;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,unable to compute timeDiff", &v81, 12);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::mapMatch(CLMapCrumb &)", "%s\n", v13);
LABEL_120:
        if (v14 != buf)
          free(v14);
        goto LABEL_21;
      }
      goto LABEL_21;
    }
    if (v10 - v11 == 0.0)
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v18 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349056;
        v105 = v4;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,not matching, time betwen updates is 0.0", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
        v81 = 134349056;
        v82 = v4;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,not matching, time betwen updates is 0.0", &v81, 12);
        v14 = (uint8_t *)v19;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::mapMatch(CLMapCrumb &)", "%s\n", v19);
        goto LABEL_120;
      }
LABEL_21:
      v17 = 0;
      if (!v5)
        return v17;
      goto LABEL_112;
    }
    v9 = vabdd_f64(v10, v11);
    if (v9 > 5.0)
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v20 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349312;
        v105 = v4;
        v106 = 2050;
        *(double *)v107 = v9;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,filterReset, dT, %{public}.1lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
        v81 = 134349312;
        v82 = v4;
        v83 = 2050;
        v84 = v9;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,filterReset, dT, %{public}.1lf", &v81, 22);
        v71 = (uint8_t *)v70;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::mapMatch(CLMapCrumb &)", "%s\n", v70);
        if (v71 != buf)
          free(v71);
      }
      sub_101286184((uint64_t)a1);
      a1[267] = 0;
      a1[266] = 0;
      *((_DWORD *)a1 + 536) = 0;
      a1[269] = 0;
      a1[271] = 0;
      a1[270] = 0;
    }
  }
  v21 = sub_10130AB00(a2);
  if (((*(uint64_t (**)(uint64_t *, uint64_t, uint64_t *, double))(*a1 + 48))(a1, a2, a1 + 33, v21) & 1) == 0)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v29 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349056;
      v105 = v4;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,not matching", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v81 = 134349056;
      v82 = v4;
      LODWORD(v72) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,not matching", &v81, v72);
      v61 = (uint8_t *)v60;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::mapMatch(CLMapCrumb &)", "%s\n", v60);
      if (v61 != buf)
        free(v61);
    }
    v17 = 1;
    if (v5)
      goto LABEL_112;
    return v17;
  }
  v22 = (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 56))(a1, a2);
  (*(void (**)(_QWORD *, uint64_t))(*v6 + 32))(v6, v22);
  (*(void (**)(_QWORD *, uint64_t, double))(*v6 + 48))(v6, a2, 450.0);
  (*(void (**)(uint64_t *, uint64_t, uint64_t *))(*a1 + 32))(a1, a2, a1 + 33);
  sub_101287F40((uint64_t)a1, a2);
  sub_1002433B8((uint64_t)&v81);
  v86 = 0;
  memset(v85, 0, sizeof(v85));
  __asm { FMOV            V0.2D, #-1.0 }
  v87 = _Q0;
  v89[0] = 0;
  v89[1] = 0;
  v88 = v89;
  sub_101286008((uint64_t)v90);
  v103 = 0;
  v74 = a1 + 30;
  if ((sub_10128813C((uint64_t)a1, a1 + 30, (uint64_t)(a1 + 33), a2, 1, 0, (uint64_t)&v81) & 1) != 0)
    goto LABEL_64;
  sub_101288BBC(a1, a1 + 30, (uint64_t)(a1 + 33), (uint64_t)&v81, a2);
  sub_1012893A4((uint64_t)a1, a1 + 30, (uint64_t)(a1 + 33), (uint64_t)&v81, a2);
  if (((*(uint64_t (**)(uint64_t *, int *, uint64_t *))(*a1 + 72))(a1, &v81, a1 + 33) & 1) == 0)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v30 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349056;
      v105 = v4;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,filterReset, assessMatch failed", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_64;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v75 = 134349056;
    v76 = v4;
    LODWORD(v72) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,filterReset, assessMatch failed", &v75, v72);
    v32 = (uint8_t *)v31;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::mapMatch(CLMapCrumb &)", "%s\n", v31);
    goto LABEL_141;
  }
  if (((*(uint64_t (**)(uint64_t *, int *))(*a1 + 16))(a1, &v81) & 1) != 0)
  {
    v28 = 0;
    goto LABEL_65;
  }
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
  v33 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134349056;
    v105 = v4;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,filterReset, adjustSolutionforRoadWidth failed", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v75 = 134349056;
    v76 = v4;
    LODWORD(v72) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,filterReset, adjustSolutionforRoadWidth failed", &v75, v72);
    v32 = (uint8_t *)v69;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::mapMatch(CLMapCrumb &)", "%s\n", v69);
LABEL_141:
    if (v32 != buf)
      free(v32);
  }
LABEL_64:
  v28 = 1;
LABEL_65:
  v73 = (uint64_t)(a1 + 229);
  v34 = sub_1002199F0((uint64_t)(a1 + 229), *((double *)&v92 + 1), 6.0);
  v35 = v34;
  if (v34)
  {
    if ((v28 & 1) == 0)
    {
      v36 = sub_10128AF08((uint64_t)a1, (uint64_t)&v81, (uint64_t)(a1 + 33));
      v37 = v36;
      if (v36)
      {
        v38 = 1.0;
        if (*((double *)a1 + 64) > 0.0)
          v38 = v9;
        *((double *)a1 + 275) = *((double *)a1 + 275) + v38;
        v101 = 1;
        v100[2] = *((_QWORD *)&v97 + 1);
      }
      else
      {
        a1[275] = 0;
      }
      BYTE1(v100[14]) = v36;
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v39 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        v40 = a1[275];
        *(_DWORD *)buf = 134349568;
        v105 = v4;
        v106 = 1026;
        *(_DWORD *)v107 = v37;
        *(_WORD *)&v107[4] = 2050;
        *(_QWORD *)&v107[6] = v40;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,%{public}d,consecutiveAmbCount,%{public}.1lf", buf, 0x1Cu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
        v64 = a1[275];
        v75 = 134349568;
        v76 = v4;
        v77 = 1026;
        v78 = v37;
        v79 = 2050;
        v80 = v64;
        LODWORD(v72) = 28;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,%{public}d,consecutiveAmbCount,%{public}.1lf", &v75, v72, v73);
        v66 = (uint8_t *)v65;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::mapMatch(CLMapCrumb &)", "%s\n", v65);
        if (v66 != buf)
          free(v66);
      }
    }
    sub_10127C738((double *)a1 + 262, (uint64_t)v90, (uint64_t)(a1 + 33));
  }
  if ((v28 & 1) == 0)
  {
    v41 = (*(uint64_t (**)(uint64_t *, int *, uint64_t *))(*a1 + 80))(a1, &v81, a1 + 33);
    if (!(_DWORD)v41)
      goto LABEL_87;
  }
  v43 = a1[30];
  v42 = a1[31];
  sub_101286184((uint64_t)a1);
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
  v44 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134349312;
    v105 = v4;
    v106 = 1026;
    *(_DWORD *)v107 = v43 != v42;
    _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,filterReset,shallReset,wasInitialized,%{public}d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v75 = 134349312;
    v76 = v4;
    v77 = 1026;
    v78 = v43 != v42;
    LODWORD(v72) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,filterReset,shallReset,wasInitialized,%{public}d", &v75, v72);
    v63 = (uint8_t *)v62;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::mapMatch(CLMapCrumb &)", "%s\n", v62);
    if (v63 != buf)
      free(v63);
  }
  sub_10129D474((uint64_t)v85);
  sub_10129D4E4((uint64_t)&v81);
  v45 = *(_OWORD *)(a2 + 80);
  v95 = *(_OWORD *)(a2 + 64);
  v96 = v45;
  v46 = *(_OWORD *)(a2 + 112);
  v97 = *(_OWORD *)(a2 + 96);
  v98 = v46;
  v47 = *(_OWORD *)(a2 + 16);
  v91 = *(_OWORD *)a2;
  v92 = v47;
  v48 = *(_OWORD *)(a2 + 48);
  v93 = *(_OWORD *)(a2 + 32);
  v94 = v48;
  std::string::operator=(&v99, (const std::string *)(a2 + 128));
  v41 = (uint64_t)memcpy(v100, (const void *)(a2 + 152), sizeof(v100));
  if (v43 == v42)
    goto LABEL_87;
  v41 = (*(uint64_t (**)(uint64_t *, int *))(*a1 + 24))(a1, &v81);
  if ((v41 & 1) == 0)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v54 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      v105 = v4;
      _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,unable to re-initialize filter", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v75 = 134349056;
      v76 = v4;
      LODWORD(v72) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,unable to re-initialize filter", &v75, v72);
      v68 = (uint8_t *)v67;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::mapMatch(CLMapCrumb &)", "%s\n", v67);
      if (v68 != buf)
        free(v68);
    }
    v17 = 0;
  }
  else
  {
LABEL_87:
    sub_10128CD5C(v41, (uint64_t)&v81, (uint64_t **)a1 + 130);
    sub_10128CE14((uint64_t)a1, (uint64_t)&v81, (uint64_t)(a1 + 33), (uint64_t)(a1 + 133));
    if (!v35)
      sub_10128D1FC((uint64_t)a1, (uint64_t)&v81);
    if (LOBYTE(v100[14]))
    {
      v49 = *((double *)&v92 + 1);
      a1[29] = *((_QWORD *)&v92 + 1);
      if (*((_BYTE *)a1 + 10))
      {
        if (!v102
          && (LODWORD(v100[33]) <= 6 && ((0x58u >> SLOBYTE(v100[33])) & 1) != 0 && *((_BYTE *)a1 + 11)
           || !sub_1002199F0(v73, v49, 6.0)))
        {
          (*(void (**)(uint64_t *, int *, uint64_t *))(*a1 + 96))(a1, &v81, a1 + 33);
        }
      }
    }
    if (v74 != v85)
      sub_10129E1B4((uint64_t)v74, *(uint64_t *)&v85[0], *((uint64_t *)&v85[0] + 1), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)&v85[0] + 1) - *(_QWORD *)&v85[0]) >> 4));
    sub_10128D53C((uint64_t)(a1 + 33), (uint64_t)v90);
    v50 = v96;
    *(_OWORD *)(a2 + 64) = v95;
    *(_OWORD *)(a2 + 80) = v50;
    v51 = v98;
    *(_OWORD *)(a2 + 96) = v97;
    *(_OWORD *)(a2 + 112) = v51;
    v52 = v92;
    *(_OWORD *)a2 = v91;
    *(_OWORD *)(a2 + 16) = v52;
    v53 = v94;
    *(_OWORD *)(a2 + 32) = v93;
    *(_OWORD *)(a2 + 48) = v53;
    std::string::operator=((std::string *)(a2 + 128), &v99);
    memcpy((void *)(a2 + 152), v100, 0x118uLL);
    if (*(_BYTE *)(a2 + 264) && *(_BYTE *)(a2 + 265) && *(_DWORD *)(a2 + 280) == 3 && !*((_BYTE *)a1 + 12))
      *(_BYTE *)(a2 + 265) = 0;
    v17 = v28 ^ 1u;
  }
  sub_10129D780((uint64_t)&v81);
  if (v5)
  {
LABEL_112:
    v55 = (unint64_t *)&v5->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v17;
}

void sub_101287EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_101287F40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  _BOOL8 v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v4 = *(_QWORD *)(a1 + 1888);
  v5 = *(_QWORD *)(a1 + 1880);
  while (v4 != v5)
    v4 = sub_100261F44(v4 - 56);
  *(_QWORD *)(a1 + 1888) = v5;
  if (!*(_BYTE *)(a1 + 9))
    return 0;
  v6 = *(_QWORD *)(a1 + 208);
  v7 = *(std::__shared_weak_count **)(a1 + 216);
  v21 = v6;
  v22 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    v19 = v6;
    v20 = v7;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v19 = v6;
    v20 = 0;
  }
  v11 = sub_10111F4E0(a2, &v19, (double *)(a1 + 168), (_QWORD *)(a1 + 1832), (uint64_t *)(a1 + 1880), 0, 100.0);
  v12 = v20;
  if (v20)
  {
    v13 = (unint64_t *)&v20->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v22;
  if (v22)
  {
    v16 = (unint64_t *)&v22->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return v11;
}

void sub_101288078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100261F44((uint64_t)&a9);
  sub_100261F44((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_101288094(uint64_t a1)
{
  uint64_t v2;

  sub_1002433B8(a1);
  *(_OWORD *)(v2 + 40) = 0u;
  *(_BYTE *)(v2 + 88) = 0;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_QWORD *)(v2 + 120) = 0;
  *(_OWORD *)(v2 + 96) = _Q0;
  *(_QWORD *)(v2 + 112) = v2 + 120;
  *(_QWORD *)(v2 + 128) = 0;
  sub_101286008(v2 + 136);
  *(_BYTE *)(a1 + 904) = 0;
  return a1;
}

void sub_101288104(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v6;
  va_list va;

  va_start(va, a2);
  v4 = v3;
  sub_10129D208(v4, *(_QWORD **)(v2 + 120));
  v6 = *(void **)(v2 + 64);
  if (v6)
  {
    *(_QWORD *)(v2 + 72) = v6;
    operator delete(v6);
  }
  sub_10083CC6C((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10128813C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7)
{
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint8_t *v29;
  NSObject *v30;
  const char *v31;
  uint8_t *v32;
  NSObject *v33;
  int v34;
  NSObject *v35;
  unint64_t *v36;
  unint64_t v37;
  char v38;
  char v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  NSObject *v43;
  NSObject *v44;
  unint64_t *v45;
  unint64_t v46;
  const char *v48;
  const char *v49;
  uint8_t *v50;
  const char *v51;
  uint8_t *v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint8_t buf[4];
  uint64_t v66;

  v14 = *(_QWORD *)(a1 + 208);
  v13 = *(std::__shared_weak_count **)(a1 + 216);
  v57 = v14;
  v58 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  if (!v14)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v25 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      v26 = *(_QWORD *)(a4 + 8);
      *(_DWORD *)buf = 134349056;
      v66 = v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,invalid geometry pointer, prepareSolution", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_58;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v27 = *(_QWORD *)(a4 + 8);
    v61 = 134349056;
    v62 = v27;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,Unexpected,invalid geometry pointer, prepareSolution", &v61, 12);
    v29 = (uint8_t *)v28;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::prepareSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, CLMapCrumb &, BOOL, BOOL, MMFilterData &)", "%s\n", v28);
LABEL_89:
    if (v29 != buf)
      free(v29);
    goto LABEL_58;
  }
  v17 = *(_QWORD *)(a4 + 8);
  if ((uint64_t *)(a7 + 40) != a2)
    sub_10129E1B4(a7 + 40, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 4));
  v18 = *(_OWORD *)a4;
  v19 = *(_OWORD *)(a4 + 16);
  v20 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(a7 + 408) = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(a7 + 424) = v20;
  *(_OWORD *)(a7 + 376) = v18;
  *(_OWORD *)(a7 + 392) = v19;
  v21 = *(_OWORD *)(a4 + 64);
  v22 = *(_OWORD *)(a4 + 80);
  v23 = *(_OWORD *)(a4 + 112);
  *(_OWORD *)(a7 + 472) = *(_OWORD *)(a4 + 96);
  *(_OWORD *)(a7 + 488) = v23;
  *(_OWORD *)(a7 + 440) = v21;
  *(_OWORD *)(a7 + 456) = v22;
  std::string::operator=((std::string *)(a7 + 504), (const std::string *)(a4 + 128));
  memcpy((void *)(a7 + 528), (const void *)(a4 + 152), 0x118uLL);
  if (*(_QWORD *)(a7 + 48) != *(_QWORD *)(a7 + 40)
    || ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a7) & 1) != 0)
  {
    sub_10129D82C((uint64_t)&v61, a4, *(unsigned __int8 *)(a1 + 1032), 1.0);
    *(_BYTE *)(a7 + 904) = *(_BYTE *)(a1 + 1032);
    if (a6)
    {
      v63 = 0xBFF0000000000000;
      v64 = 0xBFF0000000000000;
    }
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, a4, a7, a3) & 1) != 0)
    {
      if (sub_101281758(a7, 1, (uint64_t)&v61))
      {
        v24 = 0;
LABEL_36:
        *(_BYTE *)(a7 + 897) = 0;
        if (a5)
        {
          v34 = sub_10128D6A0(a1, a7);
          *(_BYTE *)(a7 + 897) = v34;
          if (v34)
          {
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
            v35 = qword_1022A00D8;
            if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 134349056;
              v66 = v17;
              _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,using route hints", buf, 0xCu);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
              v59 = 134349056;
              v60 = v17;
              LODWORD(v54) = 12;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,using route hints", &v59, v54);
              v50 = (uint8_t *)v49;
              sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::prepareSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, CLMapCrumb &, BOOL, BOOL, MMFilterData &)", "%s\n", v49);
              if (v50 != buf)
                free(v50);
            }
          }
        }
        if ((v24 & 1) == 0)
        {
          v55 = v14;
          v56 = v13;
          if (v13)
          {
            v36 = (unint64_t *)&v13->__shared_owners_;
            do
              v37 = __ldxr(v36);
            while (__stxr(v37 + 1, v36));
          }
          v38 = sub_101281978(a7, &v55, a3);
          v39 = v38;
          if (!v13)
            goto LABEL_51;
          v40 = (unint64_t *)&v13->__shared_owners_;
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
            if ((v39 & 1) != 0)
              goto LABEL_52;
          }
          else
          {
LABEL_51:
            if ((v38 & 1) != 0)
            {
LABEL_52:
              v42 = 0;
              goto LABEL_67;
            }
          }
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
          v44 = qword_1022A00D8;
          if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 134349056;
            v66 = v17;
            _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,filterReset, prepareCandidates failed", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
            v59 = 134349056;
            v60 = v17;
            LODWORD(v54) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,filterReset, prepareCandidates failed", &v59, v54, v55, v56, v57);
            v52 = (uint8_t *)v51;
            sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::prepareSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, CLMapCrumb &, BOOL, BOOL, MMFilterData &)", "%s\n", v51);
            if (v52 != buf)
              free(v52);
          }
        }
        v42 = 1;
LABEL_67:
        v13 = v58;
        if (!v58)
          return v42;
        goto LABEL_68;
      }
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v33 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349056;
        v66 = v17;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,filterReset, update failed", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 2))
      {
LABEL_35:
        v24 = 1;
        goto LABEL_36;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v59 = 134349056;
      v60 = v17;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,filterReset, update failed", &v59, 12);
      v32 = (uint8_t *)v48;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::prepareSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, CLMapCrumb &, BOOL, BOOL, MMFilterData &)", "%s\n", v48);
    }
    else
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v30 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349056;
        v66 = v17;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,filterReset, prediction failed", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_35;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v59 = 134349056;
      v60 = v17;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,filterReset, prediction failed", &v59, 12);
      v32 = (uint8_t *)v31;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::prepareSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, CLMapCrumb &, BOOL, BOOL, MMFilterData &)", "%s\n", v31);
    }
    if (v32 != buf)
      free(v32);
    goto LABEL_35;
  }
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
  v43 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134349056;
    v66 = v17;
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,unable to initialize filter", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v61 = 134349056;
    v62 = v17;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,unable to initialize filter", &v61, 12);
    v29 = (uint8_t *)v53;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::prepareSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, CLMapCrumb &, BOOL, BOOL, MMFilterData &)", "%s\n", v53);
    goto LABEL_89;
  }
LABEL_58:
  v42 = 0;
  if (!v13)
    return v42;
LABEL_68:
  v45 = (unint64_t *)&v13->__shared_owners_;
  do
    v46 = __ldaxr(v45);
  while (__stlxr(v46 - 1, v45));
  if (!v46)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  return v42;
}

void sub_101288B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101288BBC(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t i;
  NSObject *v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint8_t *v25;
  uint64_t v26;
  double v27;
  double v28;
  double *v29;
  long double v30;
  long double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint8_t *v51;
  const char *v52;
  uint8_t *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  __int16 v57;
  long double v58;
  __int16 v59;
  long double v60;
  __int16 v61;
  double v62;
  __int16 v63;
  double v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  double v70;
  __int16 v71;
  uint64_t v72;
  __int16 v73;
  uint64_t v74;
  __int16 v75;
  uint64_t v76;
  __int16 v77;
  double v78;
  __int16 v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  __int16 v83;
  uint64_t v84;
  uint64_t *v85;
  float v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint8_t buf[4];
  uint64_t v93;
  __int16 v94;
  long double v95;
  __int16 v96;
  long double v97;
  __int16 v98;
  double v99;
  __int16 v100;
  double v101;
  __int16 v102;
  uint64_t v103;
  __int16 v104;
  uint64_t v105;
  __int16 v106;
  double v107;
  __int16 v108;
  uint64_t v109;
  __int16 v110;
  uint64_t v111;
  __int16 v112;
  uint64_t v113;
  __int16 v114;
  double v115;
  __int16 v116;
  uint64_t v117;

  v6 = a1[26];
  if (v6)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 104))(v6)
      && *(_BYTE *)(a4 + 897) != 0
      && a1[239] != a1[238]
      && *(_BYTE *)(a4 + 882) != 0)
    {
      if (*(_QWORD *)(a4 + 256))
      {
        if (*(_BYTE *)(a3 + 504))
        {
          v13 = a3 + 120;
          if (*(_QWORD *)(a3 + 120))
          {
            v14 = *(double *)(a5 + 192);
            if (v14 > 25.0 || v14 <= 0.0 || *(double *)(a5 + 104) < 0.0)
            {
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
              v19 = qword_1022A00D8;
              if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
              {
                v20 = *(_QWORD *)(a5 + 8);
                v21 = *(double *)(a5 + 192);
                *(_DWORD *)buf = 134349312;
                v93 = v20;
                v94 = 2050;
                v95 = v21;
                _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,checkForUserDeviationFromRoute skipped,courseUnc,%{public}.2lf", buf, 0x16u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A00D0 != -1)
                  dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
                v22 = *(_QWORD *)(a5 + 8);
                v23 = *(_QWORD *)(a5 + 192);
                v81 = 134349312;
                v82 = v22;
                v83 = 2050;
                v84 = v23;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,checkForUserDeviationFromRoute skipped,courseUnc,%{public}.2lf", &v81, 22);
                v25 = (uint8_t *)v24;
                sub_100512490("Generic", 1, 0, 2, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForUserDeviationFromRoute(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "%s\n", v24);
                if (v25 != buf)
                  free(v25);
              }
            }
            else
            {
              v15 = *(_QWORD *)(a5 + 8);
              sub_101288094((uint64_t)&v81);
              v16 = sub_10128813C((uint64_t)a1, a2, a3, a5, 0, 0, (uint64_t)&v81);
              if (v91)
                v17 = v16;
              else
                v17 = 1;
              if ((v17 & 1) == 0 && v85)
              {
                for (i = *(_QWORD *)(a4 + 344); i != *(_QWORD *)(a4 + 352); i += 72)
                {
                  if (*(_DWORD *)(i + 64) == 1)
                    goto LABEL_37;
                }
                i = 0;
LABEL_37:
                v26 = v89;
                if (v89 != v90)
                {
                  while (*(_DWORD *)(v26 + 64) != 1)
                  {
                    v26 += 72;
                    if (v26 == v90)
                      goto LABEL_62;
                  }
                  if (i)
                  {
                    v27 = *(double *)i;
                    if (*(double *)i > 0.0)
                    {
                      v28 = *(double *)v26;
                      v29 = (double *)(a1 + 21);
                      v30 = sub_101285814(a4 + 256, v29, v13);
                      v31 = sub_101285814((uint64_t)&v85, v29, v13);
                      v32 = v28 / v27;
                      v33 = fmod(*(double *)(a5 + 104) - v86, 360.0);
                      if (v33 < 0.0)
                        v33 = v33 + 360.0;
                      if (v33 > 180.0)
                        v33 = v33 + -360.0;
                      if (qword_1022A00D0 != -1)
                      {
                        v44 = v33;
                        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
                        v33 = v44;
                      }
                      v34 = fabs(v32);
                      v35 = fabs(v33);
                      v36 = qword_1022A00D8;
                      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
                      {
                        v37 = *(_QWORD *)(a4 + 288);
                        v38 = *(_QWORD *)(a4 + 296);
                        v39 = *(float *)(a4 + 280);
                        v40 = **(_QWORD **)(a4 + 256);
                        v41 = *v85;
                        *(_DWORD *)buf = 134352129;
                        v93 = v15;
                        v94 = 2050;
                        v95 = v30;
                        v96 = 2050;
                        v97 = v31;
                        v98 = 2050;
                        v99 = v35;
                        v100 = 2050;
                        v101 = v34;
                        v102 = 2049;
                        v103 = v37;
                        v104 = 2049;
                        v105 = v38;
                        v106 = 2050;
                        v107 = v39;
                        v108 = 2049;
                        v109 = v40;
                        v110 = 2049;
                        v111 = v87;
                        v112 = 2049;
                        v113 = v88;
                        v114 = 2050;
                        v115 = v86;
                        v116 = 2049;
                        v117 = v41;
                        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHints,solutionDiff,%{public}.2lf,newSolutionDiff,%{public}.2lf,courseDiffNewAndRawSolution,%{public}.2lf,factor,%{public}.5lf,bestParticle,%{private}.8lf,%{private}.8lf,%{public}.3lf,%{private}lld,newBestParticle,%{private}.8lf,%{private}.8lf,%{public}.3lf,%{private}lld", buf, 0x84u);
                      }
                      if (sub_1001BFF7C(115, 2))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_1022A00D0 != -1)
                          dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
                        v45 = *(_QWORD *)(a4 + 288);
                        v46 = *(_QWORD *)(a4 + 296);
                        v47 = *(float *)(a4 + 280);
                        v48 = **(_QWORD **)(a4 + 256);
                        v49 = *v85;
                        v55 = 134352129;
                        v56 = v15;
                        v57 = 2050;
                        v58 = v30;
                        v59 = 2050;
                        v60 = v31;
                        v61 = 2050;
                        v62 = v35;
                        v63 = 2050;
                        v64 = v34;
                        v65 = 2049;
                        v66 = v45;
                        v67 = 2049;
                        v68 = v46;
                        v69 = 2050;
                        v70 = v47;
                        v71 = 2049;
                        v72 = v48;
                        v73 = 2049;
                        v74 = v87;
                        v75 = 2049;
                        v76 = v88;
                        v77 = 2050;
                        v78 = v86;
                        v79 = 2049;
                        v80 = v49;
                        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,routeHints,solutionDiff,%{public}.2lf,newSolutionDiff,%{public}.2lf,courseDiffNewAndRawSolution,%{public}.2lf,factor,%{public}.5lf,bestParticle,%{private}.8lf,%{private}.8lf,%{public}.3lf,%{private}lld,newBestParticle,%{private}.8lf,%{private}.8lf,%{public}.3lf,%{private}lld", &v55, 132);
                        v51 = (uint8_t *)v50;
                        sub_100512490("Generic", 1, 0, 2, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForUserDeviationFromRoute(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "%s\n", v50);
                        if (v51 != buf)
                          free(v51);
                      }
                      if (v35 < 25.0 && v34 >= 2.0)
                      {
                        if (qword_1022A00D0 != -1)
                          dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
                        v43 = qword_1022A00D8;
                        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
                        {
                          *(_DWORD *)buf = 134349568;
                          v93 = v15;
                          v94 = 2050;
                          v95 = v34;
                          v96 = 2050;
                          v97 = v35;
                          _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,filter swapped with local filter without routeHints,local,factor,%{public}.5lf,courseDiffNewAndRawSolution,%{public}.2lf", buf, 0x20u);
                        }
                        if (sub_1001BFF7C(115, 2))
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_1022A00D0 != -1)
                            dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
                          v55 = 134349568;
                          v56 = v15;
                          v57 = 2050;
                          v58 = v34;
                          v59 = 2050;
                          v60 = v35;
                          LODWORD(v54) = 32;
                          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,filter swapped with local filter without routeHints,local,factor,%{public}.5lf,courseDiffNewAndRawSolution,%{public}.2lf", &v55, v54);
                          v53 = (uint8_t *)v52;
                          sub_100512490("Generic", 1, 0, 2, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForUserDeviationFromRoute(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "%s\n", v52);
                          if (v53 != buf)
                            free(v53);
                        }
                        sub_10128D7AC(a4, (__int128 *)&v81);
                      }
                    }
                  }
                }
              }
LABEL_62:
              sub_10129D780((uint64_t)&v81);
            }
          }
        }
      }
    }
  }
}

void sub_101289370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_10129D780((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_1012893A4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  BOOL v5;
  uint64_t v7;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  BOOL v22;
  float v23;
  double v24;
  double v25;
  double v26;
  double v27;
  _BOOL4 v28;
  NSObject *v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  char v35;
  char v36;
  double *v37;
  double *v38;
  double v39;
  double v40;
  double v41;
  double v43;
  double v44;
  double v46;
  NSObject *v47;
  float v48;
  double v49;
  double v50;
  double v51;
  NSObject *v52;
  const char *v53;
  char *v54;
  NSObject *v55;
  const char *v56;
  char *v57;
  NSObject *v58;
  const char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  NSObject *v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  BOOL v71;
  NSObject *v72;
  const char *v73;
  NSObject *v74;
  char v75;
  char v76;
  uint64_t v77;
  double v78;
  NSObject *v79;
  NSObject *v80;
  NSObject *v81;
  const char *v82;
  char *v83;
  NSObject *v84;
  const char *v85;
  char *v86;
  const char *v87;
  char *v88;
  const char *v89;
  char *v90;
  uint64_t v91;
  double v92;
  uint64_t v93;
  uint64_t v94;
  const char *v95;
  char *v96;
  const char *v97;
  char *v98;
  const char *v99;
  char *v100;
  double v101;
  uint64_t v102;
  const char *v103;
  char *v104;
  const char *v105;
  const char *v106;
  char *v107;
  uint64_t v108;
  _QWORD v109[2];
  uint64_t v110;
  double v111;
  _BYTE v112[12];
  __int16 v113;
  _BYTE v114[26];
  double v115;
  _BYTE v116[10];
  __int16 v117;
  uint64_t v118;
  __int16 v119;
  uint64_t v120;
  uint64_t v121[3];
  float v122;
  double v123;
  char v124;
  int v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  __int16 v129;
  double v130;
  __int16 v131;
  double v132;
  __int16 v133;
  uint64_t v134;
  __int16 v135;
  uint64_t v136;
  __int16 v137;
  double v138;
  _BYTE buf[68];
  __int16 v140;
  uint64_t v141;

  if (*(_BYTE *)(a4 + 882))
    v5 = *(_BYTE *)(a3 + 504) == 0;
  else
    v5 = 1;
  if (v5)
    return;
  v7 = a3 + 120;
  if (!*(_QWORD *)(a3 + 120))
    return;
  v12 = *(_QWORD *)(a1 + 208);
  if (v12)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 104))(v12))
      v13 = 6.0;
    else
      v13 = 10.0;
  }
  else
  {
    v13 = 10.0;
  }
  v14 = *(double *)(a5 + 24);
  v15 = -1.0;
  if (v14 >= 0.0)
  {
    v16 = *(double *)(a3 + 264);
    v17 = vabdd_f64(v14, v16);
    if (v16 >= 0.0)
      v15 = v17;
    else
      v15 = -1.0;
  }
  v18 = *(_QWORD *)(a5 + 8);
  v19 = sub_101285814(a4 + 256, (double *)(a1 + 168), v7);
  v20 = *(double *)(a4 + 856) * 0.2;
  if (v20 < 0.1)
    v20 = 0.1;
  if (v20 > 0.4)
    v20 = 0.4;
  if (v19 < v20)
    return;
  if (sub_1002199F0(a1 + 1832, *(double *)(a4 + 400), 6.0))
  {
    v21 = *(double *)(a4 + 856) * 3.0;
    v22 = v19 <= v21 || *(_QWORD *)(a4 + 256) == 0;
    if (!v22 && !*(_BYTE *)(a4 + 881))
    {
      v23 = *(float *)(a3 + 144);
      v24 = fmod((float)(v23 - *(float *)(a4 + 280)), 360.0);
      if (v24 < 0.0)
        v24 = v24 + 360.0;
      if (v24 <= 180.0)
        v25 = v24;
      else
        v25 = v24 + -360.0;
      v110 = 0;
      v111 = 0.0;
      sub_1010B9950((double *)(a1 + 168), &v111, (double *)&v110, *(double *)(a4 + 288), *(double *)(a4 + 296), 0.0, v23, *(double *)(a3 + 152), *(double *)(a3 + 160));
      v26 = fabs(v25);
      v27 = *(double *)(a1 + 2200);
      if (v27 <= 5.0)
      {
        if (v27 >= 10.0)
        {
          v28 = 1;
          goto LABEL_40;
        }
      }
      else
      {
        v28 = 1;
        if (v27 >= 10.0 || fabs(*(double *)(a4 + 616)) < 7.0)
        {
LABEL_40:
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
          v29 = qword_1022A00D8;
          if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
          {
            v30 = *(_QWORD *)(a1 + 2200);
            v31 = fabs(*(double *)(a4 + 616));
            v32 = *(_QWORD *)(a4 + 288);
            v33 = *(_QWORD *)(a4 + 296);
            *(_DWORD *)buf = 134350849;
            *(_QWORD *)&buf[4] = v18;
            *(_WORD *)&buf[12] = 1026;
            *(_DWORD *)&buf[14] = v28;
            *(_WORD *)&buf[18] = 2050;
            *(_QWORD *)&buf[20] = v30;
            *(_WORD *)&buf[28] = 2050;
            *(double *)&buf[30] = v31;
            *(_WORD *)&buf[38] = 2050;
            *(double *)&buf[40] = v26;
            *(_WORD *)&buf[48] = 2050;
            *(double *)&buf[50] = v111;
            *(_WORD *)&buf[58] = 2049;
            *(_QWORD *)&buf[60] = v32;
            v140 = 2049;
            v141 = v33;
            _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,solutionJumpCheck,shouldNotPropagateFromLastSnap,%{public}d,consecutiveAmbiguityEpochCount,%{public}.1lf,deltaAz,%{public}.2lf,courseDiffWithPriorSolution,%{public}.2lf,acrossTrack,%{public}.2lf,bestLL,%{private}.7lf,%{private}.7lf", buf, 0x4Eu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
            v91 = *(_QWORD *)(a1 + 2200);
            v92 = fabs(*(double *)(a4 + 616));
            v93 = *(_QWORD *)(a4 + 288);
            v94 = *(_QWORD *)(a4 + 296);
            *(_DWORD *)v112 = 134350849;
            *(_QWORD *)&v112[4] = v18;
            v113 = 1026;
            *(_DWORD *)v114 = v28;
            *(_WORD *)&v114[4] = 2050;
            *(_QWORD *)&v114[6] = v91;
            *(_WORD *)&v114[14] = 2050;
            *(double *)&v114[16] = v92;
            *(_WORD *)&v114[24] = 2050;
            v115 = v26;
            *(_WORD *)v116 = 2050;
            *(double *)&v116[2] = v111;
            v117 = 2049;
            v118 = v93;
            v119 = 2049;
            v120 = v94;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,solutionJumpCheck,shouldNotPropagateFromLastSnap,%{public}d,consecutiveAmbiguityEpochCount,%{public}.1lf,deltaAz,%{public}.2lf,courseDiffWithPriorSolution,%{public}.2lf,acrossTrack,%{public}.2lf,bestLL,%{private}.7lf,%{private}.7lf", v112, 78);
            v96 = (char *)v95;
            sub_100512490("Generic", 1, 0, 2, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "%s\n", v95);
            if (v96 != buf)
              free(v96);
          }
          if (!v28)
          {
            sub_100F5E8AC((uint64_t)v112, v7);
            v61 = *(_QWORD *)(a1 + 208);
            v62 = *(_QWORD *)(a1 + 216);
            v109[0] = v61;
            v109[1] = v62;
            if (v62)
            {
              v63 = (unint64_t *)(v62 + 8);
              do
                v64 = __ldxr(v63);
              while (__stxr(v64 + 1, v63));
            }
            v65 = &qword_1022A0000;
            if (v61)
            {
              v127 = 0;
              *(_QWORD *)buf = buf;
              *(_QWORD *)&buf[8] = buf;
              *(_QWORD *)&buf[16] = 0;
              (*(void (**)(uint64_t, _BYTE *, _BYTE *, int *, double, double))(*(_QWORD *)v61 + 56))(v61, v112, buf, &v127, *(double *)v116, *(double *)(a4 + 856));
              sub_1001A5CBC((uint64_t *)buf);
            }
            if (*(_QWORD *)v112)
            {
              v66 = v18;
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
              v67 = qword_1022A00D8;
              if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
              {
                v68 = *(_QWORD *)(a4 + 288);
                v69 = *(_QWORD *)(a4 + 296);
                *(_DWORD *)buf = 134350337;
                *(_QWORD *)&buf[4] = v18;
                *(_WORD *)&buf[12] = 2050;
                *(double *)&buf[14] = v19;
                *(_WORD *)&buf[22] = 2049;
                *(_QWORD *)&buf[24] = v68;
                *(_WORD *)&buf[32] = 2049;
                *(_QWORD *)&buf[34] = v69;
                *(_WORD *)&buf[42] = 2049;
                *(_QWORD *)&buf[44] = *(_QWORD *)&v114[18];
                *(_WORD *)&buf[52] = 2049;
                *(double *)&buf[54] = v115;
                _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,solutionJumpCheck,solution replaced with previous propagated solution,%{public}.2lf,bestLL,%{private}.7lf,%{private}.7lf,newLL,%{private}.7lf,%{private}.7lf", buf, 0x3Eu);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A00D0 != -1)
                  dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
                v101 = *(double *)(a4 + 288);
                v102 = *(_QWORD *)(a4 + 296);
                v127 = 134350337;
                v128 = v18;
                v129 = 2050;
                v130 = v19;
                v131 = 2049;
                v132 = v101;
                v133 = 2049;
                v134 = v102;
                v135 = 2049;
                v136 = *(_QWORD *)&v114[18];
                v137 = 2049;
                v138 = v115;
                LODWORD(v108) = 62;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,solutionJumpCheck,solution replaced with previous propagated solution,%{public}.2lf,bestLL,%{private}.7lf,%{private}.7lf,newLL,%{private}.7lf,%{private}.7lf", &v127, v108);
                v104 = (char *)v103;
                sub_100512490("Generic", 1, 0, 2, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "%s\n", v103);
                if (v104 != buf)
                  free(v104);
                v66 = v18;
                v65 = &qword_1022A0000;
              }
              sub_100F5E8AC((uint64_t)&v127, a4 + 256);
              sub_10110E7C4(a4 + 256, (uint64_t)v112);
              if (sub_10127BFA8(a4 + 136))
              {
                *(_BYTE *)(a4 + 881) = 1;
                *(_BYTE *)(a4 + 848) = 1;
              }
              else
              {
                sub_10110E7C4(a4 + 256, (uint64_t)&v127);
                if (qword_1022A00D0 != -1)
                  dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
                v84 = v65[27];
                if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134349056;
                  *(_QWORD *)&buf[4] = v66;
                  _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,solutionJumpCheck,solution replacement failed as unable to fillCrumb", buf, 0xCu);
                }
                if (sub_1001BFF7C(115, 0))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1022A00D0 != -1)
                    dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
                  v125 = 134349056;
                  v126 = v18;
                  LODWORD(v108) = 12;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,solutionJumpCheck,solution replacement failed as unable to fillCrumb", &v125, v108);
                  v107 = (char *)v106;
                  sub_100512490("Generic", 1, 0, 0, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "%s\n", v106);
                  if (v107 != buf)
                    free(v107);
                }
              }
              sub_100F5EA24((uint64_t)&v127);
            }
            else
            {
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
              v81 = qword_1022A00D8;
              if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134349056;
                *(_QWORD *)&buf[4] = v18;
                _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,solutionJumpCheck,solution replacement failed as returned particle has invalid road", buf, 0xCu);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A00D0 != -1)
                  dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
                v127 = 134349056;
                v128 = v18;
                LODWORD(v108) = 12;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,solutionJumpCheck,solution replacement failed as returned particle has invalid road", &v127, v108);
                v83 = (char *)v82;
                sub_100512490("Generic", 1, 0, 0, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "%s\n", v82);
                if (v83 != buf)
                  free(v83);
              }
            }
            sub_100261F44((uint64_t)v109);
            sub_100F5EA24((uint64_t)v112);
            return;
          }
          goto LABEL_46;
        }
      }
      v28 = fabs(v111) < v21 && v26 < 30.0;
      goto LABEL_40;
    }
  }
LABEL_46:
  if (v19 < 0.0 || v15 > 3.0 || v19 < 15.0 || v19 < v13 * *(double *)(a4 + 856))
    return;
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
  v34 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134349312;
    *(_QWORD *)&buf[4] = v18;
    *(_WORD *)&buf[12] = 2050;
    *(double *)&buf[14] = v19;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,solution jump detected, recomputing without course,solutionDiff,%{public}.2lf", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    *(_DWORD *)v112 = 134349312;
    *(_QWORD *)&v112[4] = v18;
    v113 = 2050;
    *(double *)v114 = v19;
    LODWORD(v108) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,solution jump detected, recomputing without course,solutionDiff,%{public}.2lf", v112, v108);
    v86 = (char *)v85;
    sub_100512490("Generic", 1, 0, 2, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "%s\n", v85);
    if (v86 != buf)
      free(v86);
  }
  sub_101288094((uint64_t)v112);
  v35 = sub_10128813C(a1, a2, a3, a5, 1, 1, (uint64_t)v112);
  if (v124)
    v36 = v35;
  else
    v36 = 1;
  if ((v36 & 1) == 0)
  {
    v46 = sub_101285814((uint64_t)v121, (double *)(a1 + 168), v7);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v47 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349568;
      *(_QWORD *)&buf[4] = v18;
      *(_WORD *)&buf[12] = 2050;
      *(double *)&buf[14] = v19;
      *(_WORD *)&buf[22] = 2050;
      *(double *)&buf[24] = v46;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,course,solutionDiff,%{public}.2lf,newSolutionDiff,%{public}.2lf", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v127 = 134349568;
      v128 = v18;
      v129 = 2050;
      v130 = v19;
      v131 = 2050;
      v132 = v46;
      LODWORD(v108) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,course,solutionDiff,%{public}.2lf,newSolutionDiff,%{public}.2lf", &v127, v108);
      v88 = (char *)v87;
      sub_100512490("Generic", 1, 0, 2, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "%s\n", v87);
      if (v88 != buf)
        free(v88);
    }
    if (v46 < v19 * 0.6)
    {
      sub_10128D7AC(a4, (__int128 *)v112);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v58 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)&buf[4] = v18;
        _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,filter swapped with local filter without course, solutionDiffCheck", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_178;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v127 = 134349056;
      v128 = v18;
      LODWORD(v108) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,filter swapped with local filter without course, solutionDiffCheck", &v127, v108);
      v60 = (char *)v59;
      sub_100512490("Generic", 1, 0, 2, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "%s\n", v59);
      goto LABEL_230;
    }
    if (vabdd_f64(v46, v19) < 2.0)
    {
      sub_10110E724((uint64_t *)(a4 + 256), (uint64_t)buf);
      sub_10110E724(v121, (uint64_t)&v127);
      if (!sub_100F5C3F4((uint64_t)buf, (uint64_t)&v127))
      {
        v48 = *(float *)(a3 + 144);
        v49 = fmod((float)(v48 - *(float *)(a4 + 280)), 360.0);
        if (v49 < 0.0)
          v49 = v49 + 360.0;
        if (v49 > 180.0)
          v49 = v49 + -360.0;
        v50 = fabs(v49);
        v51 = fmod((float)(v48 - v122), 360.0);
        if (v51 < 0.0)
          v51 = v51 + 360.0;
        if (v51 > 180.0)
          v51 = v51 + -360.0;
        if (v50 > 60.0 && fabs(v51) < 10.0)
        {
          sub_10128D7AC(a4, (__int128 *)v112);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
          v52 = qword_1022A00D8;
          if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 134349056;
            *(_QWORD *)&buf[4] = v18;
            _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,filter swapped with local filter without course, courseDiffCheck", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
            v127 = 134349056;
            v128 = v18;
            LODWORD(v108) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,filter swapped with local filter without course, courseDiffCheck", &v127, v108);
            v54 = (char *)v53;
            sub_100512490("Generic", 1, 0, 2, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "%s\n", v53);
            if (v54 != buf)
              free(v54);
          }
        }
      }
    }
  }
  sub_10129D780((uint64_t)v112);
  if (*(_BYTE *)(a4 + 897))
  {
    v37 = *(double **)(a1 + 1904);
    v38 = *(double **)(a1 + 1912);
    if (v37 == v38)
    {
      v40 = -1.0;
      v39 = -1.0;
    }
    else
    {
      v39 = -1.0;
      v40 = -1.0;
      do
      {
        v41 = sub_10011E634((double *)(a1 + 168), *(double *)(a3 + 152), *(double *)(a3 + 160), v37[10], v37[11], 0.0);
        if (v41 < v39 || v39 < 0.0)
          v39 = v41;
        v43 = fmod(v37[13] - *(float *)(a3 + 144), 360.0);
        if (v43 < 0.0)
          v43 = v43 + 360.0;
        if (v43 > 180.0)
          v43 = v43 + -360.0;
        v44 = fabs(v43);
        if (v44 < v40 || v40 < 0.0)
          v40 = v44;
        v37 += 33;
      }
      while (v37 != v38);
    }
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v70 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349568;
      *(_QWORD *)&buf[4] = v18;
      *(_WORD *)&buf[12] = 2050;
      *(double *)&buf[14] = v40;
      *(_WORD *)&buf[22] = 2050;
      *(double *)&buf[24] = v39;
      _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,solution jump detected,verifying routeHints,courseDiffBetweenPriorSolution,%{public}.2lf,distanceDiffBetweenPriorSolution,%{public}.2lf", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      *(_DWORD *)v112 = 134349568;
      *(_QWORD *)&v112[4] = v18;
      v113 = 2050;
      *(double *)v114 = v40;
      *(_WORD *)&v114[8] = 2050;
      *(double *)&v114[10] = v39;
      LODWORD(v108) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,solution jump detected,verifying routeHints,courseDiffBetweenPriorSolution,%{public}.2lf,distanceDiffBetweenPriorSolution,%{public}.2lf", v112, v108);
      v90 = (char *)v89;
      sub_100512490("Generic", 1, 0, 2, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "%s\n", v89);
      if (v90 != buf)
        free(v90);
    }
    if (v40 >= 30.0 || (v39 >= 4.0 ? (v71 = v39 < *(double *)(a4 + 856) + *(double *)(a4 + 856)) : (v71 = 1), !v71))
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v74 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349312;
        *(_QWORD *)&buf[4] = v18;
        *(_WORD *)&buf[12] = 2050;
        *(double *)&buf[14] = v19;
        _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,solution jump detected, recomputing without routeHints,solutionDiff,%{public}.2lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
        *(_DWORD *)v112 = 134349312;
        *(_QWORD *)&v112[4] = v18;
        v113 = 2050;
        *(double *)v114 = v19;
        LODWORD(v108) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,solution jump detected, recomputing without routeHints,solutionDiff,%{public}.2lf", v112, v108);
        v98 = (char *)v97;
        sub_100512490("Generic", 1, 0, 2, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "%s\n", v97);
        if (v98 != buf)
          free(v98);
      }
      sub_101288094((uint64_t)v112);
      v75 = sub_10128813C(a1, a2, a3, a5, 0, 1, (uint64_t)v112);
      if (v124)
        v76 = v75;
      else
        v76 = 1;
      v77 = v18;
      if ((v76 & 1) != 0)
        goto LABEL_178;
      v78 = sub_101285814((uint64_t)v121, (double *)(a1 + 168), v7);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v79 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349568;
        *(_QWORD *)&buf[4] = v18;
        *(_WORD *)&buf[12] = 2050;
        *(double *)&buf[14] = v19;
        *(_WORD *)&buf[22] = 2050;
        *(double *)&buf[24] = v78;
        _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHints,solutionDiff,%{public}.2lf,newSolutionDiff,%{public}.2lf", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
        v127 = 134349568;
        v128 = v18;
        v129 = 2050;
        v130 = v19;
        v131 = 2050;
        v132 = v78;
        LODWORD(v108) = 32;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,routeHints,solutionDiff,%{public}.2lf,newSolutionDiff,%{public}.2lf", &v127, v108);
        v100 = (char *)v99;
        sub_100512490("Generic", 1, 0, 2, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "%s\n", v99);
        if (v100 != buf)
          free(v100);
        v77 = v18;
      }
      if (v78 >= v123 * 1.5 || v78 <= v123 * 0.1)
        goto LABEL_178;
      sub_10128D7AC(a4, (__int128 *)v112);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v80 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)&buf[4] = v77;
        _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,filter swapped with local filter without routeHints", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_178;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v127 = 134349056;
      v128 = v18;
      LODWORD(v108) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,filter swapped with local filter without routeHints", &v127, v108);
      v60 = (char *)v105;
      sub_100512490("Generic", 1, 0, 2, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "%s\n", v105);
LABEL_230:
      if (v60 != buf)
        free(v60);
LABEL_178:
      sub_10129D780((uint64_t)v112);
      return;
    }
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v72 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v18;
      _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,solution jump detected,routeHints are OK, skipping recomputation", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      *(_DWORD *)v112 = 134349056;
      *(_QWORD *)&v112[4] = v18;
      LODWORD(v108) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,solution jump detected,routeHints are OK, skipping recomputation", v112, v108);
      v57 = (char *)v73;
      sub_100512490("Generic", 1, 0, 2, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "%s\n", v73);
LABEL_155:
      if (v57 != buf)
        free(v57);
    }
  }
  else
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v55 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v18;
      _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,solution jump detected,routeHints are not used", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      *(_DWORD *)v112 = 134349056;
      *(_QWORD *)&v112[4] = v18;
      LODWORD(v108) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,solution jump detected,routeHints are not used", v112, v108);
      v57 = (char *)v56;
      sub_100512490("Generic", 1, 0, 2, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "%s\n", v56);
      goto LABEL_155;
    }
  }
}

void sub_10128AE78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_10129D780((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10128AF08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v4;
  NSObject *v5;
  uint64_t v6;
  int v9;
  double v10;
  double v11;
  double v12;
  double v13;
  NSObject *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  double *v18;
  double *v19;
  unint64_t v20;
  double v21;
  double *v22;
  double v23;
  uint64_t v24;
  double v25;
  double v26;
  double *v27;
  double v28;
  double v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  int v34;
  double v35;
  _BOOL4 v36;
  _BOOL4 v37;
  NSObject *v38;
  const char *v39;
  char *v40;
  NSObject *v41;
  const char *v42;
  NSObject *v43;
  NSObject *v45;
  const char *v46;
  char *v47;
  double v48;
  double v49;
  double v50;
  NSObject *v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  double v56;
  NSObject *v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  NSObject *v62;
  int v63;
  int v64;
  const char *v65;
  double *v66;
  double *v67;
  uint64_t v68;
  double v69;
  double v70;
  NSObject *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  NSObject *v75;
  const char *v76;
  double v77;
  double *v78;
  uint64_t v79;
  uint64_t v80;
  NSObject *v81;
  const char *v82;
  char *v83;
  int v84;
  int v85;
  _QWORD *v86;
  _QWORD *v87;
  long double v88;
  double v89;
  double v90;
  double v91;
  long double v92;
  long double v93;
  double v94;
  __double2 v95;
  long double v96;
  double v97;
  NSObject *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  long double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  int v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  _BOOL4 v115;
  _BOOL4 v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  int v123;
  long double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  const char *v133;
  char *v134;
  int v135;
  NSObject *v136;
  NSObject *v137;
  const char *v138;
  const char *v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  double *v143;
  double *v144;
  unint64_t v145;
  double v146;
  double *v147;
  double v148;
  uint64_t v149;
  double v150;
  double v151;
  double *v152;
  double v153;
  double v154;
  uint64_t v155;
  double v156;
  double v157;
  double v158;
  int v159;
  double v160;
  _BOOL4 v161;
  _BOOL4 v162;
  const char *v163;
  char *v164;
  const char *v165;
  const char *v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  const char *v170;
  char *v171;
  uint64_t v172;
  double v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _BYTE v177[12];
  __int16 v178;
  _BYTE v179[46];
  _BYTE v180[10];
  _BYTE v181[10];
  int v182;
  __int16 v183;
  double v184;
  __int16 v185;
  double v186;
  __int16 v187;
  double v188;
  __int16 v189;
  _BOOL4 v190;
  __int16 v191;
  _BOOL4 v192;
  _BYTE buf[60];
  _BYTE v194[10];
  _BYTE v195[10];
  int v196;
  __int16 v197;
  double v198;
  __int16 v199;
  double v200;
  __int16 v201;
  double v202;
  __int16 v203;
  _BOOL4 v204;
  __int16 v205;
  _BOOL4 v206;

  if (*(_QWORD *)(a2 + 48) == *(_QWORD *)(a2 + 40))
    return 0;
  v4 = *(double *)(a2 + 384);
  if (*(_BYTE *)(a2 + 881))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v5 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)&buf[4] = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,isSolutionAmbiguous check,already ambiguous", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return 1;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    *(_DWORD *)v177 = 134349056;
    *(double *)&v177[4] = v4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,isSolutionAmbiguous check,already ambiguous", v177, 12);
    v47 = (char *)v139;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isSolutionAmbiguous(MMFilterData &, const MMSnapData &)", "%s\n", v139);
LABEL_225:
    if (v47 != buf)
      free(v47);
    return 1;
  }
  v9 = *(_DWORD *)(a2 + 792) - 2;
  v10 = 10.0;
  if (v9 <= 4)
    v10 = dbl_101C48C18[v9];
  v11 = *(double *)(a2 + 456) + *(double *)(a2 + 456);
  if (v11 >= v10)
    v11 = v10;
  if (v11 >= 7.0)
    v12 = v11;
  else
    v12 = 7.0;
  v13 = fabs(*(double *)(a2 + 632));
  if (*(_BYTE *)(a2 + 882))
  {
    sub_100785E0C((char *)(a1 + 2120), *(double *)(a2 + 608));
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v14 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v15 = *(_DWORD *)(a1 + 2144);
      v16 = *(_QWORD *)(a2 + 608);
      v17 = *(_QWORD *)(a1 + 2152);
      v18 = *(double **)(a1 + 2184);
      v19 = *(double **)(a1 + 2176);
      v20 = v18 - v19;
      v21 = 0.0;
      if (v18 == v19)
      {
        v32 = 0.0;
        v33 = 0.0;
      }
      else
      {
        v22 = *(double **)(a1 + 2176);
        do
        {
          v23 = *v22++;
          v21 = v21 + v23;
        }
        while (v22 != v18);
        v24 = 60;
        if (v20 < 0x3C)
          v24 = v20;
        v25 = 0.0;
        v26 = 0.0;
        if (v24)
        {
          v27 = *(double **)(a1 + 2176);
          do
          {
            v28 = *v27++;
            v26 = v26 + v28;
            --v24;
          }
          while (v24);
        }
        v29 = (double)v20;
        v30 = 30;
        if (v20 < 0x1E)
          v30 = v20;
        if (v30)
        {
          v25 = 0.0;
          do
          {
            v31 = *v19++;
            v25 = v25 + v31;
            --v30;
          }
          while (v30);
        }
        v32 = v21 / v29;
        v21 = v26 / v29;
        v33 = v25 / v29;
      }
      v34 = *(unsigned __int8 *)(a2 + 640);
      v35 = fabs(*(double *)(a2 + 616));
      v36 = *(_QWORD *)(a1 + 2088) != 0;
      v37 = *(_QWORD *)(a1 + 2080) != 0;
      *(_DWORD *)buf = 134352384;
      *(double *)&buf[4] = v4;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = v15;
      *(_WORD *)&buf[18] = 2050;
      *(_QWORD *)&buf[20] = v16;
      *(_WORD *)&buf[28] = 2050;
      *(_QWORD *)&buf[30] = v17;
      *(_WORD *)&buf[38] = 2050;
      *(double *)&buf[40] = v32;
      *(_WORD *)&buf[48] = 2050;
      *(_QWORD *)&buf[50] = v20;
      *(_WORD *)&buf[58] = 2050;
      *(double *)v194 = v21;
      *(_WORD *)&v194[8] = 2050;
      *(double *)v195 = v33;
      *(_WORD *)&v195[8] = 1026;
      v196 = v34;
      v197 = 2050;
      v198 = v35;
      v199 = 2050;
      v200 = v13;
      v201 = 2050;
      v202 = v12;
      v203 = 1026;
      v204 = v36;
      v205 = 1026;
      v206 = v37;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,AverageVarianceFactor,count,%{public}d,vf,%{public}.4lf,avf,%{public}.4lf,avfBuffer,%{public}.4lf,avfBufferCnt,%{public}zu,avfBuffer60,%{public}.4lf,avfBuffer30,%{public}.4lf,isUsable,%{public}d,deltaAz,%{public}.2lf,fabsAT,%{public}.2lf,threshold,%{public}.2lf,usingAPI,%{public}d,usingBuffer,%{public}d", buf, 0x7Eu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v140 = *(_DWORD *)(a1 + 2144);
      v141 = *(_QWORD *)(a2 + 608);
      v142 = *(_QWORD *)(a1 + 2152);
      v143 = *(double **)(a1 + 2184);
      v144 = *(double **)(a1 + 2176);
      v145 = v143 - v144;
      v146 = 0.0;
      if (v143 == v144)
      {
        v157 = 0.0;
        v158 = 0.0;
      }
      else
      {
        v147 = *(double **)(a1 + 2176);
        do
        {
          v148 = *v147++;
          v146 = v146 + v148;
        }
        while (v147 != v143);
        v149 = 60;
        if (v145 < 0x3C)
          v149 = v145;
        v150 = 0.0;
        v151 = 0.0;
        if (v149)
        {
          v152 = *(double **)(a1 + 2176);
          do
          {
            v153 = *v152++;
            v151 = v151 + v153;
            --v149;
          }
          while (v149);
        }
        v154 = (double)v145;
        v155 = 30;
        if (v145 < 0x1E)
          v155 = v145;
        if (v155)
        {
          v150 = 0.0;
          do
          {
            v156 = *v144++;
            v150 = v150 + v156;
            --v155;
          }
          while (v155);
        }
        v157 = v146 / v154;
        v146 = v151 / v154;
        v158 = v150 / v154;
      }
      v159 = *(unsigned __int8 *)(a2 + 640);
      v160 = fabs(*(double *)(a2 + 616));
      v161 = *(_QWORD *)(a1 + 2088) != 0;
      v162 = *(_QWORD *)(a1 + 2080) != 0;
      *(_DWORD *)v177 = 134352384;
      *(double *)&v177[4] = v4;
      v178 = 1026;
      *(_DWORD *)v179 = v140;
      *(_WORD *)&v179[4] = 2050;
      *(_QWORD *)&v179[6] = v141;
      *(_WORD *)&v179[14] = 2050;
      *(_QWORD *)&v179[16] = v142;
      *(_WORD *)&v179[24] = 2050;
      *(double *)&v179[26] = v157;
      *(_WORD *)&v179[34] = 2050;
      *(_QWORD *)&v179[36] = v145;
      *(_WORD *)&v179[44] = 2050;
      *(double *)v180 = v146;
      *(_WORD *)&v180[8] = 2050;
      *(double *)v181 = v158;
      *(_WORD *)&v181[8] = 1026;
      v182 = v159;
      v183 = 2050;
      v184 = v160;
      v185 = 2050;
      v186 = v13;
      v187 = 2050;
      v188 = v12;
      v189 = 1026;
      v190 = v161;
      v191 = 1026;
      v192 = v162;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,AverageVarianceFactor,count,%{public}d,vf,%{public}.4lf,avf,%{public}.4lf,avfBuffer,%{public}.4lf,avfBufferCnt,%{public}zu,avfBuffer60,%{public}.4lf,avfBuffer30,%{public}.4lf,isUsable,%{public}d,deltaAz,%{public}.2lf,fabsAT,%{public}.2lf,threshold,%{public}.2lf,usingAPI,%{public}d,usingBuffer,%{public}d", v177, 126);
      v164 = (char *)v163;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isSolutionAmbiguous(MMFilterData &, const MMSnapData &)", "%s\n", v163);
      if (v164 != buf)
        free(v164);
    }
  }
  if (!*(_QWORD *)(a1 + 2088) && !*(_QWORD *)(a1 + 2080))
    return 0;
  if (!sub_1002199F0(a1 + 1832, *(double *)(a2 + 400), 6.0))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v41 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)&buf[4] = v4;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,0,routeHintsAvailable,1", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    *(_DWORD *)v177 = 134349056;
    *(double *)&v177[4] = v4;
    LODWORD(v172) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,0,routeHintsAvailable,1", v177, v172);
    v40 = (char *)v42;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isSolutionAmbiguous(MMFilterData &, const MMSnapData &)", "%s\n", v42);
LABEL_249:
    if (v40 != buf)
      free(v40);
    return 0;
  }
  if (!*(_BYTE *)(a2 + 640))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v43 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)&buf[4] = v4;
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,0,isSnapUsable,0", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    *(_DWORD *)v177 = 134349056;
    *(double *)&v177[4] = v4;
    LODWORD(v172) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,0,isSnapUsable,0", v177, v172);
    v40 = (char *)v165;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isSolutionAmbiguous(MMFilterData &, const MMSnapData &)", "%s\n", v165);
    goto LABEL_249;
  }
  if (sub_100512A74(*(double *)(a2 + 432), *(double *)(a2 + 440), *(double *)(a2 + 528), *(double *)(a2 + 536), 0.0000001))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v38 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)&buf[4] = v4;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,0,sameAsRawGPS,1", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    *(_DWORD *)v177 = 134349056;
    *(double *)&v177[4] = v4;
    LODWORD(v172) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,0,sameAsRawGPS,1", v177, v172);
    v40 = (char *)v39;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isSolutionAmbiguous(MMFilterData &, const MMSnapData &)", "%s\n", v39);
    goto LABEL_249;
  }
  if (sub_1012904B4(a1, a2, a3))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v45 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)&buf[4] = v4;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,1,isHarshDigitizationCaseAtTurns,1", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return 1;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    *(_DWORD *)v177 = 134349056;
    *(double *)&v177[4] = v4;
    LODWORD(v172) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,1,isHarshDigitizationCaseAtTurns,1", v177, v172);
    v47 = (char *)v46;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isSolutionAmbiguous(MMFilterData &, const MMSnapData &)", "%s\n", v46);
    goto LABEL_225;
  }
  if (v13 > v12)
    goto LABEL_75;
  v56 = *(double *)(a1 + 2200);
  if (v56 > 3.0 && v56 < 20.0 && *(_BYTE *)(a3 + 505) && v13 > v12 * 0.85)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v57 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v58 = *(_QWORD *)(a1 + 2200);
      *(_DWORD *)buf = 134349824;
      *(double *)&buf[4] = v4;
      *(_WORD *)&buf[12] = 2050;
      *(double *)&buf[14] = v13;
      *(_WORD *)&buf[22] = 2050;
      *(double *)&buf[24] = v12 * 0.85;
      *(_WORD *)&buf[32] = 2050;
      *(_QWORD *)&buf[34] = v58;
      _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,1, previous solution was ambiguous and AT,%{public}.1lf,is over scaled threshold,%{public}.1lf,consecutiveAmbCnt,%{public}1lf", buf, 0x2Au);
    }
    if (!sub_1001BFF7C(115, 2))
      return 1;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v59 = *(_QWORD *)(a1 + 2200);
    *(_DWORD *)v177 = 134349824;
    *(double *)&v177[4] = v4;
    v178 = 2050;
    *(double *)v179 = v13;
    *(_WORD *)&v179[8] = 2050;
    *(double *)&v179[10] = v12 * 0.85;
    *(_WORD *)&v179[18] = 2050;
    *(_QWORD *)&v179[20] = v59;
    LODWORD(v172) = 42;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,1, previous solution was ambiguous and AT,%{public}.1lf,is over scaled threshold,%{public}.1lf,consecutiveAmbCnt,%{public}1lf", v177, v172);
    v47 = (char *)v60;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isSolutionAmbiguous(MMFilterData &, const MMSnapData &)", "%s\n", v60);
    goto LABEL_225;
  }
  if (!*(_BYTE *)(a2 + 640))
    goto LABEL_132;
  v66 = *(double **)(a1 + 2184);
  v67 = *(double **)(a1 + 2176);
  if (v66 == v67)
    goto LABEL_132;
  v68 = v66 - v67;
  v69 = 0.0;
  do
  {
    v70 = *v67++;
    v69 = v69 + v70;
  }
  while (v67 != v66);
  if (v69 / (double)(unint64_t)v68 <= 1.2)
  {
LABEL_132:
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v75 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349568;
      *(double *)&buf[4] = v4;
      *(_WORD *)&buf[12] = 2050;
      *(double *)&buf[14] = v13;
      *(_WORD *)&buf[22] = 2050;
      *(double *)&buf[24] = v12;
      _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,0,lowAcrossTrack,%{public}.1lf,threshold,%{public}.2lf", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    *(_DWORD *)v177 = 134349568;
    *(double *)&v177[4] = v4;
    v178 = 2050;
    *(double *)v179 = v13;
    *(_WORD *)&v179[8] = 2050;
    *(double *)&v179[10] = v12;
    LODWORD(v172) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,0,lowAcrossTrack,%{public}.1lf,threshold,%{public}.2lf", v177, v172);
    v40 = (char *)v76;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isSolutionAmbiguous(MMFilterData &, const MMSnapData &)", "%s\n", v76);
    goto LABEL_249;
  }
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
  v71 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
  {
    v72 = *(_DWORD *)(a1 + 2144);
    v73 = *(_QWORD *)(a2 + 608);
    v74 = *(_QWORD *)(a1 + 2152);
    *(_DWORD *)buf = 134349824;
    *(double *)&buf[4] = v4;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = v72;
    *(_WORD *)&buf[18] = 2050;
    *(_QWORD *)&buf[20] = v73;
    *(_WORD *)&buf[28] = 2050;
    *(_QWORD *)&buf[30] = v74;
    _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,1,averageVarianceFactor,count,%{public}d,vf,%{public}.4lf,avf,%{public}.4lf", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v167 = *(_DWORD *)(a1 + 2144);
    v168 = *(_QWORD *)(a2 + 608);
    v169 = *(_QWORD *)(a1 + 2152);
    *(_DWORD *)v177 = 134349824;
    *(double *)&v177[4] = v4;
    v178 = 1026;
    *(_DWORD *)v179 = v167;
    *(_WORD *)&v179[4] = 2050;
    *(_QWORD *)&v179[6] = v168;
    *(_WORD *)&v179[14] = 2050;
    *(_QWORD *)&v179[16] = v169;
    LODWORD(v172) = 38;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,1,averageVarianceFactor,count,%{public}d,vf,%{public}.4lf,avf,%{public}.4lf", v177, v172);
    v171 = (char *)v170;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isSolutionAmbiguous(MMFilterData &, const MMSnapData &)", "%s\n", v170);
    if (v171 != buf)
      free(v171);
  }
  v6 = 1;
  if (!*(_BYTE *)(a3 + 504) || *(_BYTE *)(a3 + 505))
    return v6;
LABEL_75:
  if (*(double *)(a2 + 568) > 0.0)
  {
    v48 = *(double *)(a2 + 480);
    if (v48 >= 0.0)
    {
      v49 = fmod(*(double *)(a2 + 680) - v48, 360.0);
      if (v49 < 0.0)
        v49 = v49 + 360.0;
      if (v49 > 180.0)
        v49 = v49 + -360.0;
      if ((!*(_BYTE *)(a3 + 505) || *(double *)(a1 + 2200) < 5.0) && *(double *)(a2 + 456) < 10.0)
      {
        v50 = fabs(v49);
        if (v50 < 18.0 && v13 <= v12 * 1.5)
        {
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
          v52 = qword_1022A00D8;
          if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
          {
            v53 = *(_QWORD *)(a2 + 456);
            *(_DWORD *)buf = 134350080;
            *(double *)&buf[4] = v4;
            *(_WORD *)&buf[12] = 2050;
            *(double *)&buf[14] = v50;
            *(_WORD *)&buf[22] = 2050;
            *(double *)&buf[24] = v13;
            *(_WORD *)&buf[32] = 2050;
            *(_QWORD *)&buf[34] = v53;
            *(_WORD *)&buf[42] = 2050;
            *(double *)&buf[44] = v12 * 1.5;
            _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,0,overridden based on course matching,%{public}.2lf,AT,%{public}.2lf,hunc,%{public}.2lf,threshold,%{public}.2lf", buf, 0x34u);
          }
          if (!sub_1001BFF7C(115, 2))
            return 0;
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
          v54 = *(_QWORD *)(a2 + 456);
          *(_DWORD *)v177 = 134350080;
          *(double *)&v177[4] = v4;
          v178 = 2050;
          *(double *)v179 = v50;
          *(_WORD *)&v179[8] = 2050;
          *(double *)&v179[10] = v13;
          *(_WORD *)&v179[18] = 2050;
          *(_QWORD *)&v179[20] = v54;
          *(_WORD *)&v179[28] = 2050;
          *(double *)&v179[30] = v12 * 1.5;
          LODWORD(v172) = 52;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,0,overridden based on course matching,%{public}.2lf,AT,%{public}.2lf,hunc,%{public}.2lf,threshold,%{public}.2lf", v177, v172);
          v40 = (char *)v55;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isSolutionAmbiguous(MMFilterData &, const MMSnapData &)", "%s\n", v55);
          goto LABEL_249;
        }
      }
    }
  }
  v61 = *(_QWORD *)(a2 + 256);
  if (v61 && (*(_BYTE *)(a1 + 12) || (*(_DWORD *)(v61 + 20) & 0xFFFFFFFE) == 8))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v62 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v63 = *(_DWORD *)(*(_QWORD *)(a2 + 256) + 20);
      *(_DWORD *)buf = 134349312;
      *(double *)&buf[4] = v4;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = v63;
      _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,skipping building checks for unknown roads,%{public}d", buf, 0x12u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 1;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v64 = *(_DWORD *)(*(_QWORD *)(a2 + 256) + 20);
    *(_DWORD *)v177 = 134349312;
    *(double *)&v177[4] = v4;
    v178 = 1026;
    *(_DWORD *)v179 = v64;
    LODWORD(v172) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,skipping building checks for unknown roads,%{public}d", v177, v172);
    v47 = (char *)v65;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isSolutionAmbiguous(MMFilterData &, const MMSnapData &)", "%s\n", v65);
    goto LABEL_225;
  }
  if (*(double *)(a2 + 456) + 30.0 <= 45.0)
    v77 = *(double *)(a2 + 456) + 30.0;
  else
    v77 = 45.0;
  v174 = 0;
  v175 = 0;
  v176 = 0;
  v78 = *(double **)(a1 + 2080);
  if (v78)
  {
    memset(buf, 0, 24);
    sub_100CCAF58(v78, (uint64_t *)buf, *(double *)(a2 + 432), *(double *)(a2 + 440), v77);
    sub_10129ED34(&v174, v174, *(uint64_t *)buf, *(uint64_t *)&buf[8], (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 6);
    sub_100CCAA8C(*(_QWORD *)(a1 + 2080), 0, 1, v4, *(CLLocationDegrees *)(a2 + 432), *(CLLocationDegrees *)(a2 + 440), *(double *)(*(_QWORD *)(a1 + 2080) + 176));
    *(_QWORD *)v177 = buf;
    sub_10129ECA8((void ***)v177);
  }
  else
  {
    sub_100E4D7B8(*(_QWORD *)(a1 + 2088), &v174, a2 + 376, v77);
  }
  v79 = v174;
  v80 = v175;
  if ((unint64_t)(v175 - v174) < 0x80)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v81 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349312;
      *(double *)&buf[4] = v4;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = (unint64_t)(v175 - v174) >> 6;
      _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,1,fewerThan2Buildings,%{public}d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      *(_DWORD *)v177 = 134349312;
      *(double *)&v177[4] = v4;
      v178 = 1026;
      *(_DWORD *)v179 = (unint64_t)(v175 - v174) >> 6;
      LODWORD(v172) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,1,fewerThan2Buildings,%{public}d", v177, v172);
      v83 = (char *)v82;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isSolutionAmbiguous(MMFilterData &, const MMSnapData &)", "%s\n", v82);
      goto LABEL_254;
    }
    goto LABEL_210;
  }
  if (v174 == v175)
  {
    v84 = 0;
    v85 = 0;
    goto LABEL_205;
  }
  v173 = v13;
  v84 = 0;
  v85 = 0;
  do
  {
    v87 = *(_QWORD **)(v79 + 8);
    v86 = *(_QWORD **)(v79 + 16);
    v88 = -1.0;
    if (v87 != v86)
    {
      v89 = 0.0;
      v90 = 0.0;
      v91 = 0.0;
      do
      {
        v92 = *(double *)v87;
        v93 = *((double *)v87 + 1);
        v87 += 2;
        v94 = atan2(v92, v93);
        if (v94 < 0.0)
          v94 = v94 + 6.28318531;
        v95 = __sincos_stret(v94);
        v89 = v89 + v95.__cosval;
        v90 = v90 + v95.__sinval;
        v91 = v91 + 1.0;
      }
      while (v87 != v86);
      if (v91 > 0.0)
      {
        v96 = atan2(v90 / v91, v89 / v91);
        sub_1001C6800(v96 * 57.2957795);
        v88 = v97;
      }
    }
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v98 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v99 = *(_QWORD *)(a2 + 432);
      v100 = *(_QWORD *)(a2 + 440);
      v101 = *(_QWORD *)(a2 + 480);
      *(_DWORD *)buf = 134351105;
      *(double *)&buf[4] = v4;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = (unint64_t)(v175 - v174) >> 6;
      *(_WORD *)&buf[18] = 2049;
      *(_QWORD *)&buf[20] = v99;
      *(_WORD *)&buf[28] = 2049;
      *(_QWORD *)&buf[30] = v100;
      *(_WORD *)&buf[38] = 2050;
      *(_QWORD *)&buf[40] = v101;
      *(_WORD *)&buf[48] = 1026;
      *(_DWORD *)&buf[50] = v85;
      *(_WORD *)&buf[54] = 1026;
      *(_DWORD *)&buf[56] = v84;
      *(_WORD *)v194 = 2050;
      *(double *)&v194[2] = v77;
      *(_WORD *)v195 = 2050;
      *(long double *)&v195[2] = v88;
      _os_log_impl((void *)&_mh_execute_header, v98, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,-1,buildingCount,%{public}d,latitude,%{private}.7lf,longitude,%{private}.7lf,course,%{public}.2lf,rightSideCount,%{public}d,leftSideCount,%{public}d,searchDistance,%{public}.2lf,averageBuildingDirection,%{public}.2lf", buf, 0x50u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v130 = *(_QWORD *)(a2 + 432);
      v131 = *(_QWORD *)(a2 + 440);
      v132 = *(_QWORD *)(a2 + 480);
      *(_DWORD *)v177 = 134351105;
      *(double *)&v177[4] = v4;
      v178 = 1026;
      *(_DWORD *)v179 = (unint64_t)(v175 - v174) >> 6;
      *(_WORD *)&v179[4] = 2049;
      *(_QWORD *)&v179[6] = v130;
      *(_WORD *)&v179[14] = 2049;
      *(_QWORD *)&v179[16] = v131;
      *(_WORD *)&v179[24] = 2050;
      *(_QWORD *)&v179[26] = v132;
      *(_WORD *)&v179[34] = 1026;
      *(_DWORD *)&v179[36] = v85;
      *(_WORD *)&v179[40] = 1026;
      *(_DWORD *)&v179[42] = v84;
      *(_WORD *)v180 = 2050;
      *(double *)&v180[2] = v77;
      *(_WORD *)v181 = 2050;
      *(long double *)&v181[2] = v88;
      LODWORD(v172) = 80;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,-1,buildingCount,%{public}d,latitude,%{private}.7lf,longitude,%{private}.7lf,course,%{public}.2lf,rightSideCount,%{public}d,leftSideCount,%{public}d,searchDistance,%{public}.2lf,averageBuildingDirection,%{public}.2lf", v177, v172);
      v134 = (char *)v133;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isSolutionAmbiguous(MMFilterData &, const MMSnapData &)", "%s\n", v133);
      if (v134 != buf)
        free(v134);
    }
    v102 = *(double *)(a2 + 480);
    sub_1001C6800(v88);
    v104 = v103;
    sub_1001C6800(v102);
    v106 = v105;
    sub_1001C6800(v102 + 90.0);
    if (v106 >= v107)
    {
      v108 = 1;
      if (v106 <= v104 || v104 <= v107)
        goto LABEL_182;
    }
    else if (v106 <= v104 && v104 <= v107)
    {
      v108 = 1;
      goto LABEL_182;
    }
    v109 = *(double *)(a2 + 480);
    sub_1001C6800(v88);
    v111 = v110;
    sub_1001C6800(v109 + 90.0);
    v113 = v112;
    sub_1001C6800(v109 + 180.0);
    v115 = v113 <= v111;
    if (v111 <= v114)
      v115 = 1;
    v116 = v113 <= v111;
    if (v111 > v114)
      v116 = 0;
    if (v113 < v114)
      v108 = v116;
    else
      v108 = v115;
LABEL_182:
    v117 = *(double *)(a2 + 480);
    sub_1001C6800(v88);
    v119 = v118;
    sub_1001C6800(v117 + 180.0);
    v121 = v120;
    sub_1001C6800(v117 + 270.0);
    if (v121 >= v122)
    {
      v123 = 1;
      if (v121 <= v119 || v119 <= v122)
        goto LABEL_194;
    }
    else if (v121 <= v119 && v119 <= v122)
    {
      v123 = 1;
      goto LABEL_194;
    }
    v124 = *(double *)(a2 + 480);
    sub_1001C6800(v88);
    v126 = v125;
    sub_1001C6800(v124 + 270.0);
    v128 = v127;
    sub_1001C6800(v124);
    if (v128 >= v129)
    {
      v123 = v128 <= v126;
      if (v126 <= v129)
        v123 = 1;
    }
    else
    {
      v123 = v128 <= v126;
      if (v126 > v129)
        v123 = 0;
    }
LABEL_194:
    v85 += v108;
    v84 += v123;
    v79 += 64;
  }
  while (v79 != v80);
  if (v85 && v84)
  {
    v135 = *(_DWORD *)(a2 + 792);
    if (v135 == 3)
    {
      v6 = 0;
      goto LABEL_211;
    }
    v6 = 0;
    if (v135 != 4 && v173 > v12 + v12)
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v137 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134350080;
        *(double *)&buf[4] = v4;
        *(_WORD *)&buf[12] = 1026;
        *(_DWORD *)&buf[14] = v85;
        *(_WORD *)&buf[18] = 1026;
        *(_DWORD *)&buf[20] = v84;
        *(_WORD *)&buf[24] = 2050;
        *(double *)&buf[26] = v173;
        *(_WORD *)&buf[34] = 2050;
        *(double *)&buf[36] = v12 + v12;
        _os_log_impl((void *)&_mh_execute_header, v137, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,1,buildingOnBothSides but AT too high,rightCount,%{public}d,leftCount,%{public}d,AT,%{public}.1lf,threshold,%{public}.1lf", buf, 0x2Cu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
        *(_DWORD *)v177 = 134350080;
        *(double *)&v177[4] = v4;
        v178 = 1026;
        *(_DWORD *)v179 = v85;
        *(_WORD *)&v179[4] = 1026;
        *(_DWORD *)&v179[6] = v84;
        *(_WORD *)&v179[10] = 2050;
        *(double *)&v179[12] = v173;
        *(_WORD *)&v179[20] = 2050;
        *(double *)&v179[22] = v12 + v12;
        LODWORD(v172) = 44;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,1,buildingOnBothSides but AT too high,rightCount,%{public}d,leftCount,%{public}d,AT,%{public}.1lf,threshold,%{public}.1lf", v177, v172);
        v83 = (char *)v138;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isSolutionAmbiguous(MMFilterData &, const MMSnapData &)", "%s\n", v138);
        goto LABEL_254;
      }
      goto LABEL_210;
    }
    goto LABEL_211;
  }
LABEL_205:
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
  v136 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134349568;
    *(double *)&buf[4] = v4;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = v85;
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = v84;
    _os_log_impl((void *)&_mh_execute_header, v136, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,1,buildingNotOnBothSides,rightCount,%{public}d,leftCount,%{public}d", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    *(_DWORD *)v177 = 134349568;
    *(double *)&v177[4] = v4;
    v178 = 1026;
    *(_DWORD *)v179 = v85;
    *(_WORD *)&v179[4] = 1026;
    *(_DWORD *)&v179[6] = v84;
    LODWORD(v172) = 24;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,1,buildingNotOnBothSides,rightCount,%{public}d,leftCount,%{public}d", v177, v172);
    v83 = (char *)v166;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isSolutionAmbiguous(MMFilterData &, const MMSnapData &)", "%s\n", v166);
LABEL_254:
    if (v83 != buf)
      free(v83);
  }
LABEL_210:
  v6 = 1;
LABEL_211:
  *(_QWORD *)buf = &v174;
  sub_10129ECA8((void ***)buf);
  return v6;
}

void sub_10128CCF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void **a39)
{
  a39 = (void **)&a20;
  sub_10129ECA8(&a39);
  _Unwind_Resume(a1);
}

void sub_10128CD5C(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t *v3;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;

  if (*(_BYTE *)(a2 + 882))
  {
    v3 = *(uint64_t **)(a2 + 256);
    if (v3)
    {
      v5 = *v3;
      v6 = *(unsigned __int8 *)(a2 + 276);
      v8 = a3[1];
      v7 = a3[2];
      if (!v7 || v5 != v8[2] || v6 != *((unsigned __int8 *)v8 + 24))
      {
        v9 = operator new(0x20uLL);
        v9[1] = v8;
        v9[2] = v5;
        *((_BYTE *)v9 + 24) = v6;
        *v9 = a3;
        *v8 = (uint64_t)v9;
        a3[1] = v9;
        a3[2] = (uint64_t *)((char *)v7 + 1);
        if ((int)v7 + 1 >= 51)
        {
          v10 = *a3;
          v11 = **a3;
          *(_QWORD *)(v11 + 8) = (*a3)[1];
          *(_QWORD *)v10[1] = v11;
          a3[2] = v7;
          operator delete(v10);
        }
      }
    }
  }
}

void sub_10128CE14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v5;
  double v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;
  const void *v14;
  uint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  long double v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  char *v25;
  int v26;
  uint64_t v27;
  __int128 buf;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _OWORD v32[2];
  void *__p;
  _BYTE *v34;
  uint64_t v35;

  if (*(_BYTE *)(a3 + 746))
    v5 = *(_QWORD *)(a3 + 120) == 0;
  else
    v5 = 0;
  if (!v5)
  {
    if (!*(_BYTE *)(a2 + 882))
    {
LABEL_22:
      if (*(_BYTE *)a4)
      {
        if (!*(_BYTE *)(a2 + 882)
          || (v20 = sub_10011E634((double *)(a1 + 168), *(double *)(a4 + 56), *(double *)(a4 + 64), *(double *)(a2 + 528), *(double *)(a2 + 536), *(double *)(a2 + 448)), *(long double *)(a4 + 8) = v20, v20 > 450.0))
        {
          *(_BYTE *)a4 = 0;
        }
      }
      return;
    }
    if (*(_QWORD *)(a2 + 256))
    {
      if (*(_BYTE *)(a3 + 746))
      {
        v9 = sub_10011E634((double *)(a1 + 168), *(double *)(a3 + 152), *(double *)(a3 + 160), *(double *)(a2 + 288), *(double *)(a2 + 296), *(double *)(a2 + 448));
        v10 = *(_QWORD *)(a3 + 128);
        *(_QWORD *)&buf = *(_QWORD *)(a3 + 120);
        *((_QWORD *)&buf + 1) = v10;
        if (v10)
        {
          v11 = (unint64_t *)(v10 + 8);
          do
            v12 = __ldxr(v11);
          while (__stxr(v12 + 1, v11));
        }
        v13 = *(_OWORD *)(a3 + 152);
        v29 = *(_OWORD *)(a3 + 136);
        v30 = v13;
        v31 = *(_QWORD *)(a3 + 168);
        v32[0] = *(_OWORD *)(a3 + 176);
        *(_OWORD *)((char *)v32 + 9) = *(_OWORD *)(a3 + 185);
        v34 = 0;
        v35 = 0;
        v14 = *(const void **)(a3 + 208);
        v15 = *(_QWORD *)(a3 + 216);
        __p = 0;
        sub_100F5F150(&__p, v14, v15, 0x8E38E38E38E38E39 * ((v15 - (uint64_t)v14) >> 3));
        v26 = 0;
        if (sub_10128DE14(a1, (uint64_t)&buf, &v26, v9))
        {
          *(_BYTE *)a4 = 1;
          *(_DWORD *)(a4 + 136) = v26;
          sub_100349198((_QWORD *)(a4 + 24), (uint64_t *)&buf);
          v16 = v30;
          *(_OWORD *)(a4 + 40) = v29;
          *(_OWORD *)(a4 + 56) = v16;
          *(_QWORD *)(a4 + 72) = v31;
          *(_OWORD *)(a4 + 80) = v32[0];
          *(_OWORD *)(a4 + 89) = *(_OWORD *)((char *)v32 + 9);
          if ((__int128 *)(a4 + 24) != &buf)
            sub_100F5F1C8((char *)(a4 + 112), (char *)__p, (uint64_t)v34, 0x8E38E38E38E38E39 * ((v34 - (_BYTE *)__p) >> 3));
          *(_QWORD *)(a4 + 16) = *(_QWORD *)(a3 + 248);
        }
        if (__p)
        {
          v34 = __p;
          operator delete(__p);
        }
        v17 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
        if (*((_QWORD *)&buf + 1))
        {
          v18 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
      }
      goto LABEL_22;
    }
  }
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
  v21 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
  {
    v22 = *(_QWORD *)(a2 + 384);
    LODWORD(buf) = 134349056;
    *(_QWORD *)((char *)&buf + 4) = v22;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected, prior or current snap is valid but bestparticle road is null", (uint8_t *)&buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v23 = *(_QWORD *)(a2 + 384);
    v26 = 134349056;
    v27 = v23;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,Unexpected, prior or current snap is valid but bestparticle road is null", &v26, 12);
    v25 = (char *)v24;
    sub_100512490("Generic", 1, 0, 0, "void CLParticleMM::CLParticleMapMatcherFilterBase::updateIntersectionInfo(const MMFilterData &, const MMSnapData &, CLParticleMapMatcherCommon::IntersectionInfo &)", "%s\n", v24);
    if (v25 != (char *)&buf)
      free(v25);
  }
}

void sub_10128D1D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10128D1FC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t result;
  double v6;
  double v7;
  double v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  double v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  double v52;
  uint8_t buf[4];
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  double v70;
  __int16 v71;
  uint64_t v72;
  __int16 v73;
  double v74;

  if (*(_BYTE *)(a2 + 640))
    v2 = *(_BYTE *)(a2 + 641) == 0;
  else
    v2 = 0;
  if (!v2)
    return 0;
  result = 0;
  v6 = *(double *)(a2 + 456);
  if (v6 < 400.0 && v6 > 0.0)
  {
    if (*(_BYTE *)(a2 + 368) && !*(_BYTE *)(a2 + 896))
      return 0;
    v7 = sub_10011E634((double *)(a1 + 168), *(double *)(a2 + 432), *(double *)(a2 + 440), *(double *)(a2 + 528), *(double *)(a2 + 536), 0.0);
    v8 = v7 / *(double *)(a2 + 456);
    if (v8 > 1.5)
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v9 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        v10 = *(_QWORD *)(a2 + 384);
        v11 = *(_QWORD *)(a2 + 432);
        v12 = *(_QWORD *)(a2 + 440);
        v13 = *(_QWORD *)(a2 + 480);
        v14 = *(_QWORD *)(a2 + 528);
        v15 = *(_QWORD *)(a2 + 536);
        v16 = *(_QWORD *)(a2 + 544);
        v17 = *(_QWORD *)(a2 + 448);
        v18 = *(_QWORD *)(a2 + 456);
        *(_DWORD *)buf = 134351617;
        v54 = v10;
        v55 = 2049;
        v56 = v11;
        v57 = 2049;
        v58 = v12;
        v59 = 2050;
        v60 = v17;
        v61 = 2050;
        v62 = v13;
        v63 = 2049;
        v64 = v14;
        v65 = 2049;
        v66 = v15;
        v67 = 2050;
        v68 = v16;
        v69 = 2050;
        v70 = v7;
        v71 = 2050;
        v72 = v18;
        v73 = 2050;
        v74 = v8;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,lat,%{private}.8lf,lon,%{private}.8lf,alt,%{public}.2lf,course,%{public}.1lf,snapLat,%{private}.8lf,snapLon,%{private}.8lf,snapCourse,%{public}.1lf,horizontalError,%{public}.2lf,hunc,%{public}.2lf,ratio,%{public}.2lf", buf, 0x70u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
        v20 = *(_QWORD *)(a2 + 384);
        v21 = *(_QWORD *)(a2 + 432);
        v22 = *(_QWORD *)(a2 + 440);
        v23 = *(_QWORD *)(a2 + 480);
        v24 = *(_QWORD *)(a2 + 528);
        v25 = *(_QWORD *)(a2 + 536);
        v26 = *(_QWORD *)(a2 + 544);
        v27 = *(_QWORD *)(a2 + 448);
        v28 = *(_QWORD *)(a2 + 456);
        v31 = 134351617;
        v32 = v20;
        v33 = 2049;
        v34 = v21;
        v35 = 2049;
        v36 = v22;
        v37 = 2050;
        v38 = v27;
        v39 = 2050;
        v40 = v23;
        v41 = 2049;
        v42 = v24;
        v43 = 2049;
        v44 = v25;
        v45 = 2050;
        v46 = v26;
        v47 = 2050;
        v48 = v7;
        v49 = 2050;
        v50 = v28;
        v51 = 2050;
        v52 = v8;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,lat,%{private}.8lf,lon,%{private}.8lf,alt,%{public}.2lf,course,%{public}.1lf,snapLat,%{private}.8lf,snapLon,%{private}.8lf,snapCourse,%{public}.1lf,horizontalError,%{public}.2lf,hunc,%{public}.2lf,ratio,%{public}.2lf", &v31, 112);
        v30 = (uint8_t *)v29;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::modifyHorizontalUncertainty(MMFilterData &)", "%s\n", v29);
        if (v30 != buf)
          free(v30);
      }
      v19 = v7 * 1.05;
      if (v7 * 1.05 > 400.0)
        v19 = 400.0;
      *(double *)(a2 + 456) = v19;
    }
    return 1;
  }
  return result;
}

uint64_t sub_10128D53C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  int v19;

  sub_100349198((_QWORD *)a1, (uint64_t *)a2);
  v4 = *(_QWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 48) = v4;
  v6 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 65) = *(_OWORD *)(a2 + 65);
  *(_OWORD *)(a1 + 56) = v6;
  if (a1 != a2)
    sub_100F5F1C8((char *)(a1 + 88), *(char **)(a2 + 88), *(_QWORD *)(a2 + 96), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a2 + 96) - *(_QWORD *)(a2 + 88)) >> 3));
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  sub_100349198((_QWORD *)(a1 + 120), (uint64_t *)(a2 + 120));
  v7 = *(_QWORD *)(a2 + 168);
  v8 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = v8;
  *(_QWORD *)(a1 + 168) = v7;
  v9 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 185) = *(_OWORD *)(a2 + 185);
  *(_OWORD *)(a1 + 176) = v9;
  if (a1 != a2)
    sub_100F5F1C8((char *)(a1 + 208), *(char **)(a2 + 208), *(_QWORD *)(a2 + 216), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a2 + 216) - *(_QWORD *)(a2 + 208)) >> 3));
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  v10 = *(_OWORD *)(a2 + 240);
  v11 = *(_OWORD *)(a2 + 256);
  v12 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 288) = v12;
  *(_OWORD *)(a1 + 240) = v10;
  *(_OWORD *)(a1 + 256) = v11;
  v13 = *(_OWORD *)(a2 + 304);
  v14 = *(_OWORD *)(a2 + 320);
  v15 = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 352) = v15;
  *(_OWORD *)(a1 + 304) = v13;
  *(_OWORD *)(a1 + 320) = v14;
  std::string::operator=((std::string *)(a1 + 368), (const std::string *)(a2 + 368));
  memcpy((void *)(a1 + 392), (const void *)(a2 + 392), 0x118uLL);
  v17 = *(_OWORD *)(a2 + 688);
  v16 = *(_OWORD *)(a2 + 704);
  v18 = *(_OWORD *)(a2 + 672);
  *(_QWORD *)(a1 + 720) = *(_QWORD *)(a2 + 720);
  *(_OWORD *)(a1 + 688) = v17;
  *(_OWORD *)(a1 + 704) = v16;
  *(_OWORD *)(a1 + 672) = v18;
  sub_100349198((_QWORD *)(a1 + 728), (uint64_t *)(a2 + 728));
  v19 = *(_DWORD *)(a2 + 759);
  *(_OWORD *)(a1 + 744) = *(_OWORD *)(a2 + 744);
  *(_DWORD *)(a1 + 759) = v19;
  return a1;
}

uint64_t sub_10128D6A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  if (!*(_BYTE *)(a1 + 9))
    goto LABEL_8;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) & 1) == 0)
  {
    v7 = *(_QWORD *)(a1 + 1912);
    v8 = *(_QWORD *)(a1 + 1904);
    if (v7 != v8)
    {
      do
      {
        v9 = v7 - 264;
        sub_100261F44(v7 - 56);
        v7 = v9;
      }
      while (v9 != v8);
    }
    LOBYTE(v6) = 0;
    goto LABEL_12;
  }
  v4 = *(_QWORD *)(a1 + 1904);
  v5 = *(_QWORD *)(a1 + 1912);
  if (v4 == v5)
  {
LABEL_8:
    LOBYTE(v6) = 0;
  }
  else
  {
    v6 = 0;
    while (vabdd_f64(*(double *)(v4 + 184), *(double *)(a2 + 400)) <= 0.01)
    {
      v6 |= sub_101281758(a2, 2, v4);
      v4 += 264;
      if (v4 == v5)
        return v6 & 1;
    }
    v11 = *(_QWORD *)(a1 + 1912);
    v8 = *(_QWORD *)(a1 + 1904);
    if (v11 != v8)
    {
      do
      {
        v12 = v11 - 264;
        sub_100261F44(v11 - 56);
        v11 = v12;
      }
      while (v12 != v8);
LABEL_12:
      *(_QWORD *)(a1 + 1912) = v8;
    }
  }
  return v6 & 1;
}

uint64_t sub_10128D7AC(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  if ((__int128 *)a1 == a2)
  {
    *(_OWORD *)(a1 + 88) = *(__int128 *)((char *)a2 + 88);
    *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
  }
  else
  {
    sub_10129E1B4(a1 + 40, *((_QWORD *)a2 + 5), *((_QWORD *)a2 + 6), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 4));
    sub_1002A3054((char *)(a1 + 64), *((char **)a2 + 8), *((_QWORD *)a2 + 9), (uint64_t)(*((_QWORD *)a2 + 9) - *((_QWORD *)a2 + 8)) >> 2);
    *(_OWORD *)(a1 + 88) = *(__int128 *)((char *)a2 + 88);
    *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
    sub_10129D890((uint64_t **)(a1 + 112), *((_QWORD **)a2 + 14), (_QWORD *)a2 + 15);
  }
  sub_10128D53C(a1 + 136, (uint64_t)a2 + 136);
  *(_BYTE *)(a1 + 904) = *((_BYTE *)a2 + 904);
  return a1;
}

double sub_10128D86C(uint64_t a1, uint64_t a2, double *a3)
{
  double v4;
  double v5;
  NSObject *v6;
  uint64_t v7;
  double v8;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  BOOL v15;
  double v16;
  double v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  double v22;
  double v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  double v29;
  uint8_t *v30;
  _BYTE v31[24];
  __int128 v32;
  uint8_t buf[4];
  uint64_t v34;
  __int16 v35;
  unint64_t v36;
  __int16 v37;
  double v38;
  __int16 v39;
  double v40;

  v4 = *(double *)(a2 + 24);
  if (v4 < 0.0 || (v5 = a3[33], v5 < 0.0))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v6 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      v7 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)buf = 134349312;
      v34 = v7;
      v35 = 2050;
      v36 = 0xBFF0000000000000;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,unexpected, negtive dT,%{public}.1lf", buf, 0x16u);
    }
    v8 = 0.0;
    if (!sub_1001BFF7C(115, 0))
      return v8;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v28 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)v31 = 134349312;
    *(_QWORD *)&v31[4] = v28;
    *(_WORD *)&v31[12] = 2050;
    *(_QWORD *)&v31[14] = 0xBFF0000000000000;
    v29 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,unexpected, negtive dT,%{public}.1lf", v31, 22);
    v27 = v30;
    sub_100512490("Generic", 1, 0, 0, "double CLParticleMM::CLParticleMapMatcherFilterBase::getDistanceTravelled(const CLMapCrumb &, const MMSnapData &)", "%s\n", v29);
LABEL_54:
    if (v27 != buf)
      free(v27);
    return v8;
  }
  v10 = vabdd_f64(v4, v5);
  v11 = -1.0;
  v12 = -1.0;
  if (*(double *)(a2 + 184) > 0.0)
  {
    v13 = *(double *)(a2 + 96);
    if (v13 >= 0.0)
    {
      if (v10 >= 2.2 || a3[53] <= 0.0)
      {
        v12 = *(double *)(a2 + 96);
      }
      else
      {
        v14 = a3[42];
        v15 = v14 < 0.0;
        v16 = (v13 + v14) * 0.5;
        if (v15)
          v12 = *(double *)(a2 + 96);
        else
          v12 = v16;
      }
    }
  }
  if (v12 < 0.0)
    v17 = 0.0;
  else
    v17 = v10 * v12;
  if (v10 >= 2.2)
  {
    v8 = v17;
  }
  else
  {
    v8 = v17;
    if (a3[40] > 0.0)
    {
      v11 = sub_10011E634((double *)(a1 + 168), *(double *)(a2 + 56), *(double *)(a2 + 64), a3[37], a3[38], *(double *)(a2 + 72));
      if (v11 > 300.0)
      {
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
        v18 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
        {
          v19 = *(_QWORD *)(a2 + 8);
          *(_DWORD *)buf = 134349568;
          v34 = v19;
          v35 = 2050;
          v36 = *(_QWORD *)&v11;
          v37 = 2050;
          v38 = v10;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "#Warning,CLMMPED,%{public}.1lf,Position jump,%{public}.1lf,dT,%{public}.1lf", buf, 0x20u);
        }
        v8 = -1.0;
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
          v20 = *(_QWORD *)(a2 + 8);
          *(_DWORD *)v31 = 134349568;
          *(_QWORD *)&v31[4] = v20;
          *(_WORD *)&v31[12] = 2050;
          *(double *)&v31[14] = v11;
          *(_WORD *)&v31[22] = 2050;
          v22 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "#Warning,CLMMPED,%{public}.1lf,Position jump,%{public}.1lf,dT,%{public}.1lf", v31, 32, *(_OWORD *)v31, *(_QWORD *)&v31[16], *(_QWORD *)&v10, v32);
LABEL_50:
          v27 = v21;
          sub_100512490("Generic", 1, 0, 2, "double CLParticleMM::CLParticleMapMatcherFilterBase::getDistanceTravelled(const CLMapCrumb &, const MMSnapData &)", "%s\n", v22);
          goto LABEL_54;
        }
        return v8;
      }
      if (v12 <= 0.0 || v11 < 0.0 || *(_BYTE *)(a2 + 228))
      {
        if (*(_BYTE *)(a2 + 228))
          v23 = v17;
        else
          v23 = v11;
        if (v11 >= 0.0)
          v8 = v23;
        else
          v8 = v17;
      }
      else
      {
        v8 = (v17 + v11) * 0.5;
      }
    }
  }
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
  v24 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
  {
    v25 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)buf = 134349824;
    v34 = v25;
    v35 = 2050;
    v36 = *(_QWORD *)&v8;
    v37 = 2050;
    v38 = v17;
    v39 = 2050;
    v40 = v11;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,predictionAndUpdate, distance,%{public}.1lf,distBasedOnSpeed,%{public}.1lf,distBasedOnPos,%{public}.1lf", buf, 0x2Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v26 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)v31 = 134349824;
    *(_QWORD *)&v31[4] = v26;
    *(_WORD *)&v31[12] = 2050;
    *(double *)&v31[14] = v8;
    *(_WORD *)&v31[22] = 2050;
    LOWORD(v32) = 2050;
    *(double *)((char *)&v32 + 2) = v11;
    v22 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,predictionAndUpdate, distance,%{public}.1lf,distBasedOnSpeed,%{public}.1lf,distBasedOnPos,%{public}.1lf", v31, 42, *(_QWORD *)v31, *(_OWORD *)&v31[8], *(_QWORD *)&v17, v32);
    goto LABEL_50;
  }
  return v8;
}

uint64_t sub_10128DE14(uint64_t a1, uint64_t a2, int *a3, double a4)
{
  unsigned int v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v16[3];
  uint64_t v17[3];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v20 = 0;
  v21 = 0;
  LODWORD(v22) = 0;
  WORD2(v22) = 1;
  DWORD2(v22) = 0;
  v24 = 0;
  v23 = 0uLL;
  sub_100349198(&v20, (uint64_t *)a2);
  BYTE4(v22) = *(_BYTE *)(a2 + 20);
  v24 = *(_QWORD *)(a2 + 48);
  v18 = 0;
  v19 = 0;
  v17[0] = (uint64_t)v17;
  v17[1] = (uint64_t)v17;
  v17[2] = 0;
  v16[0] = (uint64_t)v16;
  v16[1] = (uint64_t)v16;
  v16[2] = 0;
  *a3 = 0;
  v8 = (*(uint64_t (**)(uint64_t, uint64_t *, int *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, double))(*(_QWORD *)a1 + 88))(a1, &v20, a3, v17, v16, &v19, &v18, a4);
  if (*a3 > 1)
    v9 = v8;
  else
    v9 = 0;
  if ((v9 & 1) != 0)
  {
    sub_100349198((_QWORD *)a2, &v20);
    v10 = v23;
    *(_OWORD *)(a2 + 16) = v22;
    *(_OWORD *)(a2 + 32) = v10;
    *(_QWORD *)(a2 + 48) = v24;
    v11 = v18;
    *(_QWORD *)(a2 + 32) = v19;
    *(_QWORD *)(a2 + 40) = v11;
  }
  sub_1001A5CBC(v16);
  sub_1001A5CBC(v17);
  v12 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return v9;
}

void sub_10128DF58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  sub_1001A5CBC((uint64_t *)va);
  sub_1001A5CBC((uint64_t *)va1);
  sub_100261F44((uint64_t)va2);
  _Unwind_Resume(a1);
}

BOOL sub_10128DF7C(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, double *a5, double *a6, double a7)
{
  double v14;
  _BOOL8 result;
  NSObject *v16;
  uint64_t *v17;
  const char *v18;
  NSObject *v19;
  uint64_t *v20;
  uint8_t *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;
  __int16 v27;
  double v28;
  uint8_t buf[4];
  uint64_t v30;
  __int16 v31;
  uint64_t *v32;
  __int16 v33;
  double v34;

  v14 = a5[1];
  v22 = *(_QWORD *)&v14;
  if ((sub_10128E30C(a1, (double *)a4, v14, a7) & 1) == 0)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v16 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v17 = a2;
      if (*((char *)a2 + 23) < 0)
        v17 = (uint64_t *)*a2;
      *(_DWORD *)buf = 134349570;
      v30 = *(_QWORD *)&v14;
      v31 = 2082;
      v32 = v17;
      v33 = 2050;
      v34 = a7;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,moveParticle,failed,%{public}s,moveDistance,%{public}.1lf", buf, 0x20u);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    if (*((char *)a2 + 23) < 0)
      a2 = (uint64_t *)*a2;
    v23 = 134349570;
    v24 = *(_QWORD *)&v14;
    v25 = 2082;
    v26 = a2;
    v27 = 2050;
    v28 = a7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,moveParticle,failed,%{public}s,moveDistance,%{public}.1lf", &v23, 32);
LABEL_29:
    v21 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::moveParticleAndCheckDivergence(const std::string, const std::string, CLParticleMapMatcherCommon::Particle &, const double, const CLMapCrumb &, double &)", "%s\n", v18);
    if (v21 != buf)
      free(v21);
    return 0;
  }
  if (sub_10128EB44(&v22, a5, (double *)(a1 + 168), a6, *(double *)(a4 + 32), *(double *)(a4 + 40), *(float *)(a4 + 24)))
  {
    return 1;
  }
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
  v19 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
  {
    v20 = a3;
    if (*((char *)a3 + 23) < 0)
      v20 = (uint64_t *)*a3;
    *(_DWORD *)buf = 134349314;
    v30 = v22;
    v31 = 2082;
    v32 = v20;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf, no DOT,%{public}s,location or course diverged", buf, 0x16u);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    if (*((char *)a3 + 23) < 0)
      a3 = (uint64_t *)*a3;
    v23 = 134349314;
    v24 = v22;
    v25 = 2082;
    v26 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf, no DOT,%{public}s,location or course diverged", &v23, 22);
    goto LABEL_29;
  }
  return result;
}

uint64_t sub_10128E30C(uint64_t a1, double *a2, double a3, double a4)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  NSObject *v15;
  const char *v16;
  NSObject *v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  const char *v24;
  NSObject *v25;
  const char *v26;
  double v27;
  uint64_t v28;
  NSObject *v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v35;
  _QWORD *v36;
  const char *v37;
  uint64_t v38;
  int v39;
  double v40;
  __int16 v41;
  _QWORD *v42;
  __int16 v43;
  _QWORD *v44;
  __int16 v45;
  int v46;
  __int16 v47;
  double v48;
  uint8_t buf[4];
  double v50;
  __int16 v51;
  _QWORD *v52;
  __int16 v53;
  _QWORD *v54;
  __int16 v55;
  int v56;
  __int16 v57;
  double v58;

  v8 = *(_QWORD *)(a1 + 208);
  v9 = *(std::__shared_weak_count **)(a1 + 216);
  v38 = v8;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  if (!v8)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v15 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      v50 = a3;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,invalid geometry pointer, moveParticle", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_48;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v39 = 134349056;
    v40 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,Unexpected,invalid geometry pointer, moveParticle", &v39, 12, v38, v9);
    v14 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::moveParticle(CFAbsoluteTime, CLParticleMapMatcherCommon::Particle &, double) const", "%s\n", v16);
    goto LABEL_58;
  }
  if (((*(uint64_t (**)(uint64_t, double *, uint64_t, double))(*(_QWORD *)v8 + 88))(v8, a2, a1 + 1040, a4) & 1) == 0)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v17 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v18 = **(_QWORD ***)a2;
      v19 = (_QWORD *)*((_QWORD *)a2 + 6);
      v20 = *((unsigned __int8 *)a2 + 20);
      *(_DWORD *)buf = 134350081;
      v50 = a3;
      v51 = 2049;
      v52 = v18;
      v53 = 2050;
      v54 = v19;
      v55 = 1026;
      v56 = v20;
      v57 = 2050;
      v58 = a4;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,moveParticle,moveOnRoad returned false,roadID,%{private}lld,projection,%{public}.3lf,fwd,%{public}d,moveDistance,%{public}.2lf", buf, 0x30u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_48;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v21 = **(_QWORD ***)a2;
    v22 = (_QWORD *)*((_QWORD *)a2 + 6);
    v23 = *((unsigned __int8 *)a2 + 20);
    v39 = 134350081;
    v40 = a3;
    v41 = 2049;
    v42 = v21;
    v43 = 2050;
    v44 = v22;
    v45 = 1026;
    v46 = v23;
    v47 = 2050;
    v48 = a4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,moveParticle,moveOnRoad returned false,roadID,%{private}lld,projection,%{public}.3lf,fwd,%{public}d,moveDistance,%{public}.2lf", &v39, 48, v38, v9);
    v14 = (uint8_t *)v24;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::moveParticle(CFAbsoluteTime, CLParticleMapMatcherCommon::Particle &, double) const", "%s\n", v24);
    goto LABEL_58;
  }
  if (!*(_QWORD *)a2)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v25 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      v50 = a3;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,moveParticle,null road", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_48;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v39 = 134349056;
    v40 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,moveParticle,null road", &v39, 12, v38, v9);
    v14 = (uint8_t *)v26;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::moveParticle(CFAbsoluteTime, CLParticleMapMatcherCommon::Particle &, double) const", "%s\n", v26);
    goto LABEL_58;
  }
  if (sub_10011CE64(a2[4], a2[5]))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v12 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      v50 = a3;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,moveParticle,unexpected particle with snapLat == snapLon == 0", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_48;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v39 = 134349056;
    v40 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,moveParticle,unexpected particle with snapLat == snapLon == 0", &v39, 12, v38, v9);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::moveParticle(CFAbsoluteTime, CLParticleMapMatcherCommon::Particle &, double) const", "%s\n", v13);
LABEL_58:
    if (v14 != buf)
      free(v14);
LABEL_48:
    v28 = 0;
    goto LABEL_49;
  }
  v27 = a2[6];
  if (v27 < 0.0 || v27 > 1.0)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v29 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      v30 = (_QWORD *)*((_QWORD *)a2 + 6);
      v31 = **(_QWORD ***)a2;
      *(_DWORD *)buf = 134349569;
      v50 = a3;
      v51 = 2050;
      v52 = v30;
      v53 = 2049;
      v54 = v31;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,moveParticle,invalidProjection,%{public}.3lf,roadID,%{private}lld", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_48;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v35 = (_QWORD *)*((_QWORD *)a2 + 6);
    v36 = **(_QWORD ***)a2;
    v39 = 134349569;
    v40 = a3;
    v41 = 2050;
    v42 = v35;
    v43 = 2049;
    v44 = v36;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,moveParticle,invalidProjection,%{public}.3lf,roadID,%{private}lld", &v39, 32, v38, v9);
    v14 = (uint8_t *)v37;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::moveParticle(CFAbsoluteTime, CLParticleMapMatcherCommon::Particle &, double) const", "%s\n", v37);
    goto LABEL_58;
  }
  v28 = 1;
LABEL_49:
  if (v9)
  {
    v32 = (unint64_t *)&v9->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return v28;
}

void sub_10128EB1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_10128EB44(uint64_t *a1, double *a2, double *a3, double *a4, double a5, double a6, double a7)
{
  double v13;
  double v14;
  double v15;
  NSObject *v16;
  uint64_t v17;
  _BOOL8 result;
  uint64_t v19;
  const char *v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint8_t *v27;
  double v28;
  double v29;
  int v30;
  uint64_t v31;
  uint8_t buf[4];
  uint64_t v33;

  v13 = a2[38];
  v14 = fmod(v13 - a7, 360.0);
  if (v14 < 0.0)
    v14 = v14 + 360.0;
  if (v14 > 180.0)
    v14 = v14 + -360.0;
  v15 = fabs(v14);
  if (v15 <= 8.0)
  {
    if (v15 > *a4)
    {
      *a4 = v15;
      v13 = a2[38];
    }
    v28 = 0.0;
    v29 = 0.0;
    sub_1010B9950(a3, &v29, &v28, a2[36], a2[37], a2[9], v13, a5, a6);
    if (fabs(v29) <= 5.0)
    {
      if (fabs(v28) <= 45.0)
        return 1;
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v24 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        v25 = *a1;
        *(_DWORD *)buf = 134349056;
        v33 = v25;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf, along track too large, not suitable DOT assistance", buf, 0xCu);
      }
      result = sub_1001BFF7C(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
        v26 = *a1;
        v30 = 134349056;
        v31 = v26;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf, along track too large, not suitable DOT assistance", &v30, 12);
        goto LABEL_34;
      }
    }
    else
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v21 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        v22 = *a1;
        *(_DWORD *)buf = 134349056;
        v33 = v22;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf, across track too large, not suitable DOT assistance", buf, 0xCu);
      }
      result = sub_1001BFF7C(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
        v23 = *a1;
        v30 = 134349056;
        v31 = v23;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf, across track too large, not suitable DOT assistance", &v30, 12);
        goto LABEL_34;
      }
    }
  }
  else
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v16 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v17 = *a1;
      *(_DWORD *)buf = 134349056;
      v33 = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf, no DOT, course is not aligned", buf, 0xCu);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v19 = *a1;
      v30 = 134349056;
      v31 = v19;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf, no DOT, course is not aligned", &v30, 12);
LABEL_34:
      v27 = (uint8_t *)v20;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::checkDivergence(const CFAbsoluteTime &, double, double, double, const CLMapCrumb &, CLDistanceCalc &, double &)", "%s\n", v20);
      if (v27 != buf)
        free(v27);
      return 0;
    }
  }
  return result;
}

uint64_t sub_10128EFC0(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  if (*(double *)(a1 + 1968) <= 0.0
    || *(double *)(a1 + 2056) <= 0.0
    || *(double *)(a1 + 2064) <= 0.0
    || !*(_DWORD *)(a1 + 2048))
  {
    return 0;
  }
  v2 = *(_OWORD *)(a1 + 1968);
  v3 = *(_OWORD *)(a1 + 2000);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 1984);
  *(_OWORD *)(a2 + 32) = v3;
  *(_OWORD *)a2 = v2;
  v4 = *(_OWORD *)(a1 + 2016);
  v5 = *(_OWORD *)(a1 + 2032);
  v6 = *(_OWORD *)(a1 + 2048);
  *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 2064);
  *(_OWORD *)(a2 + 64) = v5;
  *(_OWORD *)(a2 + 80) = v6;
  *(_OWORD *)(a2 + 48) = v4;
  return 1;
}

double *sub_10128F028(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 1832) = *(_QWORD *)a2;
  if (a1 + 1832 != a2)
    sub_1008AFA64((char *)(a1 + 1840), *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3));
  *(_OWORD *)(a1 + 1864) = *(_OWORD *)(a2 + 32);
  return sub_100F5F0E8((double *)(a1 + 1952), *(double *)(a1 + 1872));
}

double sub_10128F090(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  double v4;
  BOOL v5;
  int v9;
  int v10;
  int v11;
  double v12;
  uint64_t v13;
  double v14;
  uint64_t *i;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  double v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  int v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31[3];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  int v36;
  __int16 v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v4 = -1.0;
  if (*(_BYTE *)(a3 + 264))
    v5 = *(_QWORD *)a2 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v34 = 0;
    v35 = 0;
    v36 = 0;
    v37 = 1;
    v38 = 0;
    v40 = 0;
    v41 = 0;
    v39 = 0;
    sub_100349198(&v34, (uint64_t *)a2);
    LOBYTE(v37) = *(_BYTE *)(a2 + 20);
    v41 = *(_QWORD *)(a2 + 48);
    v32 = 0;
    v33 = 0;
    v31[0] = (uint64_t)v31;
    v31[1] = (uint64_t)v31;
    v31[2] = 0;
    v28 = (uint64_t)&v28;
    v29 = &v28;
    v30 = 0;
    v27 = 0;
    v9 = (*(uint64_t (**)(uint64_t, uint64_t *, int *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, double))(*(_QWORD *)a1 + 88))(a1, &v34, &v27, v31, &v28, &v33, &v32, a4);
    if (v27 > 0)
      v10 = v9;
    else
      v10 = 0;
    if (v10 == 1)
    {
      v11 = *(unsigned __int8 *)(a2 + 20);
      v12 = *(double *)(a2 + 48);
      v13 = *(_QWORD *)a2;
      sub_1004078E0((_QWORD *)v13);
      v14 = 1.0 - v12;
      if (!v11)
        v14 = v12;
      v4 = v14 * *(double *)(v13 + 40);
      for (i = v29; i != &v28; i = (uint64_t *)i[1])
      {
        v17 = i[2];
        v16 = (std::__shared_weak_count *)i[3];
        if (v16)
        {
          p_shared_owners = (unint64_t *)&v16->__shared_owners_;
          do
            v19 = __ldxr(p_shared_owners);
          while (__stxr(v19 + 1, p_shared_owners));
        }
        sub_1004078E0((_QWORD *)v17);
        v20 = *(double *)(v17 + 40);
        if (v16)
        {
          v21 = (unint64_t *)&v16->__shared_owners_;
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        v4 = v4 + v20;
      }
    }
    sub_1001A5CBC(&v28);
    sub_1001A5CBC(v31);
    v23 = v35;
    if (v35)
    {
      v24 = (unint64_t *)&v35->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
  }
  return v4;
}

void sub_10128F290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va2;

  va_start(va2, a8);
  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v13 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  sub_1001A5CBC((uint64_t *)va);
  sub_1001A5CBC((uint64_t *)va1);
  sub_100261F44((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t sub_10128F2C4(uint64_t a1, _QWORD **a2, uint64_t a3, uint64_t a4, double *a5)
{
  uint64_t v5;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  __int128 v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  char v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 v28;
  _QWORD *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v35;
  std::__shared_weak_count *v36;
  __int128 v37;
  __int128 v38;
  _QWORD *v39;
  _OWORD v40[2];
  void *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  __int128 v47;
  __int128 v48;
  _QWORD *v49;
  _OWORD v50[2];
  void *__p;
  void *v52;
  uint64_t v53;

  v5 = (uint64_t)*a2;
  if (!*a2)
    return 0;
  v10 = *((_BYTE *)a2 + 20) ? 1.0 - *((double *)a2 + 6) : *((double *)a2 + 6);
  sub_1004078E0(*a2);
  if (v10 * *(double *)(v5 + 40) > 18.0)
  {
    v11 = *((_BYTE *)a2 + 20) ? *((double *)a2 + 6) : 1.0 - *((double *)a2 + 6);
    v12 = (uint64_t)*a2;
    sub_1004078E0(*a2);
    if (v11 * *(double *)(v12 + 40) > 36.0)
      return 0;
  }
  v14 = (std::__shared_weak_count *)a2[1];
  v45 = (uint64_t)*a2;
  v46 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  v17 = *((_OWORD *)a2 + 2);
  v47 = *((_OWORD *)a2 + 1);
  v48 = v17;
  v18 = a2[6];
  v50[0] = *(_OWORD *)(a2 + 7);
  *(_OWORD *)((char *)v50 + 9) = *(_OWORD *)((char *)a2 + 65);
  v49 = v18;
  __p = 0;
  v52 = 0;
  v19 = a2[11];
  v20 = (uint64_t)a2[12];
  v53 = 0;
  sub_100F5F150(&__p, v19, v20, 0x8E38E38E38E38E39 * ((v20 - (uint64_t)v19) >> 3));
  v21 = sub_10128F5A4(a1, (uint64_t)&v45, a3, 1, a5);
  if (__p)
  {
    v52 = __p;
    operator delete(__p);
  }
  v22 = v46;
  if (!v46)
    goto LABEL_20;
  v23 = (unint64_t *)&v46->__shared_owners_;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    if ((v21 & 1) != 0)
      return 1;
  }
  else
  {
LABEL_20:
    if ((v21 & 1) != 0)
      return 1;
  }
  v44 = 0x4051800000000000;
  v25 = (std::__shared_weak_count *)a2[1];
  v35 = (uint64_t)*a2;
  v36 = v25;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  v28 = *((_OWORD *)a2 + 2);
  v37 = *((_OWORD *)a2 + 1);
  v38 = v28;
  v39 = a2[6];
  v40[0] = *(_OWORD *)(a2 + 7);
  *(_OWORD *)((char *)v40 + 9) = *(_OWORD *)((char *)a2 + 65);
  v42 = 0;
  v43 = 0;
  v29 = a2[11];
  v30 = (uint64_t)a2[12];
  v41 = 0;
  sub_100F5F150(&v41, v29, v30, 0x8E38E38E38E38E39 * ((v30 - (uint64_t)v29) >> 3));
  v13 = sub_10128F5A4(a1, (uint64_t)&v35, a3, 0, (double *)&v44);
  if (v41)
  {
    v42 = v41;
    operator delete(v41);
  }
  v31 = v36;
  if (v36)
  {
    v32 = (unint64_t *)&v36->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  return v13;
}

void sub_10128F568(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100F5EA24((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10128F5A4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, double *a5)
{
  BOOL v10;
  char *v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  const void *v19;
  uint64_t v20;
  double v21;
  NSObject *v22;
  void **v23;
  void **v24;
  const char *v25;
  uint8_t *v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  NSObject *v31;
  void **v32;
  uint64_t v33;
  void **v34;
  uint64_t v35;
  const char *v36;
  uint8_t *v37;
  NSObject *v38;
  void **v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  void **v47;
  const char *v48;
  void *v49[2];
  char v50;
  int v51;
  double v52;
  __int16 v53;
  void **v54;
  __int16 v55;
  uint64_t v56;
  _BYTE v57[32];
  __int128 v58;
  uint64_t v59;
  _OWORD v60[2];
  void *__p;
  void *v62;
  uint64_t v63;
  uint8_t buf[4];
  double v65;
  __int16 v66;
  void **v67;
  __int16 v68;
  uint64_t v69;
  __int16 v70;
  uint64_t v71;

  if (!*(_QWORD *)a2)
    return 0;
  v10 = *(_BYTE *)(a2 + 20) == 0;
  if (a4)
    v11 = "next";
  else
    v11 = "prior";
  if (a4)
    v10 = *(_BYTE *)(a2 + 20) != 0;
  *(_BYTE *)(a2 + 20) = v10;
  v12 = sub_10128F090(a1, a2, a3, *a5);
  v13 = *(double *)(a3 + 96);
  sub_1015A2E04(v49, v11);
  v14 = *(double *)(a3 + 8);
  if (v12 < 0.0)
  {
    v15 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)v57 = *(_QWORD *)a2;
    *(_QWORD *)&v57[8] = v15;
    if (v15)
    {
      v16 = (unint64_t *)(v15 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v18 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v57[16] = *(_OWORD *)(a2 + 16);
    v58 = v18;
    v59 = *(_QWORD *)(a2 + 48);
    v60[0] = *(_OWORD *)(a2 + 56);
    *(_OWORD *)((char *)v60 + 9) = *(_OWORD *)(a2 + 65);
    v62 = 0;
    v63 = 0;
    v19 = *(const void **)(a2 + 88);
    v20 = *(_QWORD *)(a2 + 96);
    __p = 0;
    sub_100F5F150(&__p, v19, v20, 0x8E38E38E38E38E39 * ((v20 - (uint64_t)v19) >> 3));
    if ((sub_10128E30C(a1, (double *)v57, v14, 24.0) & 1) != 0)
    {
      v21 = fmod(*(float *)&v57[24] - *(double *)(a3 + 104), 360.0);
      if (v21 < 0.0)
        v21 = v21 + 360.0;
      if (v21 > 180.0)
        v21 = v21 + -360.0;
      if (fabs(v21) <= 8.0)
      {
        if (__p)
        {
          v62 = __p;
          operator delete(__p);
        }
        v44 = *(std::__shared_weak_count **)&v57[8];
        if (*(_QWORD *)&v57[8])
        {
          v45 = (unint64_t *)(*(_QWORD *)&v57[8] + 8);
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
        v27 = 0;
        goto LABEL_64;
      }
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v22 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        v23 = v49;
        if (v50 < 0)
          v23 = (void **)v49[0];
        *(_DWORD *)buf = 134349314;
        v65 = v14;
        v66 = 2082;
        v67 = v23;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,no DOT, too close to a %{public}s road with large direction change", buf, 0x16u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_56;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v24 = v49;
      if (v50 < 0)
        v24 = (void **)v49[0];
      v51 = 134349314;
      v52 = v14;
      v53 = 2082;
      v54 = v24;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,no DOT, too close to a %{public}s road with large direction change", &v51, 22);
      v26 = (uint8_t *)v25;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isCloseToMultiOutboundIntersection(CLParticleMapMatcherCommon::Particle, const CLMapCrumb &, const BOOL, double &) const", "%s\n", v25);
    }
    else
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v38 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        v39 = v49;
        if (v50 < 0)
          v39 = (void **)v49[0];
        *(_DWORD *)buf = 134349570;
        v65 = v14;
        v66 = 2082;
        v67 = v39;
        v68 = 2050;
        v69 = 0x4038000000000000;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,moveParticle failed for %{public}s particle,distance,%{public}.1lf", buf, 0x20u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_56;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v47 = v49;
      if (v50 < 0)
        v47 = (void **)v49[0];
      v51 = 134349570;
      v52 = v14;
      v53 = 2082;
      v54 = v47;
      v55 = 2050;
      v56 = 0x4038000000000000;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,moveParticle failed for %{public}s particle,distance,%{public}.1lf", &v51, 32);
      v26 = (uint8_t *)v48;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isCloseToMultiOutboundIntersection(CLParticleMapMatcherCommon::Particle, const CLMapCrumb &, const BOOL, double &) const", "%s\n", v48);
    }
    if (v26 != buf)
      free(v26);
LABEL_56:
    if (__p)
    {
      v62 = __p;
      operator delete(__p);
    }
    v40 = *(std::__shared_weak_count **)&v57[8];
    if (*(_QWORD *)&v57[8])
    {
      v41 = (unint64_t *)(*(_QWORD *)&v57[8] + 8);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    goto LABEL_63;
  }
  v28 = fabs(v13);
  if (v13 < 0.0)
    v28 = 3.0;
  v29 = v12 - v28;
  v30 = 36.0;
  if (a4)
    v30 = 18.0;
  if (v29 >= v30)
  {
    v27 = 0;
    *a5 = v12 + -1.0;
    goto LABEL_64;
  }
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
  v31 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
  {
    v32 = v49;
    if (v50 < 0)
      v32 = (void **)v49[0];
    v33 = *(_QWORD *)(a3 + 96);
    *(_DWORD *)buf = 134349826;
    v65 = v14;
    v66 = 2082;
    v67 = v32;
    v68 = 2050;
    v69 = *(_QWORD *)&v29;
    v70 = 2050;
    v71 = v33;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,no DOT,too close to %{public}s intersection,dist,%{public}.2lf,speed,%{public}.2lf", buf, 0x2Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v34 = v49;
    if (v50 < 0)
      v34 = (void **)v49[0];
    v35 = *(_QWORD *)(a3 + 96);
    *(_DWORD *)v57 = 134349826;
    *(double *)&v57[4] = v14;
    *(_WORD *)&v57[12] = 2082;
    *(_QWORD *)&v57[14] = v34;
    *(_WORD *)&v57[22] = 2050;
    *(double *)&v57[24] = v29;
    LOWORD(v58) = 2050;
    *(_QWORD *)((char *)&v58 + 2) = v35;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,no DOT,too close to %{public}s intersection,dist,%{public}.2lf,speed,%{public}.2lf", v57, 42);
    v37 = (uint8_t *)v36;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isCloseToMultiOutboundIntersection(CLParticleMapMatcherCommon::Particle, const CLMapCrumb &, const BOOL, double &) const", "%s\n", v36);
    if (v37 != buf)
      free(v37);
  }
LABEL_63:
  v27 = 1;
LABEL_64:
  if (v50 < 0)
    operator delete(v49[0]);
  return v27;
}

void sub_10128FD48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  sub_100F5EA24((uint64_t)&a22);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_10128FD98(uint64_t a1, double *a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  double v9;
  int v10;
  double v11;
  double v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  NSObject *v17;
  unint64_t *v18;
  unint64_t v19;
  const char *v21;
  _WORD v22[8];
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint8_t buf[1640];

  v6 = *(_QWORD *)(a1 + 208);
  v5 = *(std::__shared_weak_count **)(a1 + 216);
  v23 = v6;
  v24 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if (!v6)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v14 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "CLMMPED,Unexpected,invalid geometry pointer, getRoadsAtIntersection", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
    {
LABEL_23:
      v13 = 0;
      if (!v5)
        return v13;
      goto LABEL_24;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v22[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,Unexpected,invalid geometry pointer, getRoadsAtIntersection", v22, 2);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::getRoadsAtIntersection(const CFAbsoluteTime, const CLMapGeometry::DistanceQueryResult &, CLMapGeometry::ConnectedQueryResultList &)", "%s\n", v15);
LABEL_32:
    if (v16 != buf)
      free(v16);
    goto LABEL_23;
  }
  v9 = *a2;
  if (!*(_QWORD *)a2)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v17 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "CLMMPED,Unexpected,null road, getRoadsAtIntersection", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_23;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v22[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,Unexpected,null road, getRoadsAtIntersection", v22, 2);
    v16 = (uint8_t *)v21;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::getRoadsAtIntersection(const CFAbsoluteTime, const CLMapGeometry::DistanceQueryResult &, CLMapGeometry::ConnectedQueryResultList &)", "%s\n", v21);
    goto LABEL_32;
  }
  v10 = *((unsigned __int8 *)a2 + 20);
  v11 = a2[6];
  sub_1004078E0(*(_QWORD **)a2);
  v12 = 1.0 - v11;
  if (!v10)
    v12 = v11;
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, double *, BOOL, _QWORD, double, double))(*(_QWORD *)v6 + 72))(v6, a3, a2, v10 != 0, 0, v11, v12 * *(double *)(*(_QWORD *)&v9 + 40) + 5.0);
  if (v5)
  {
LABEL_24:
    v18 = (unint64_t *)&v5->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v13;
}

void sub_101290124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101290140(_QWORD *a1, uint64_t *a2, char a3, uint64_t *a4, double a5)
{
  int v10;
  int v11;
  double v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  NSObject *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  const char *v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  uint8_t buf[8];
  std::__shared_weak_count *v30;
  int v31;
  __int16 v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  if (*a1)
  {
    *(_QWORD *)buf = 0;
    v30 = 0;
    v31 = 0;
    v32 = 1;
    v33 = 0;
    v35 = 0;
    v36 = 0;
    v34 = 0;
    sub_100349198(buf, a2);
    LOBYTE(v32) = a3;
    v36 = a2[6];
    v10 = 30;
    while (1)
    {
      v11 = v32;
      v12 = *(double *)&v36;
      v13 = *(_QWORD *)buf;
      sub_1004078E0(*(_QWORD **)buf);
      v14 = 1.0 - v12;
      if (!v11)
        v14 = v12;
      v15 = v14 * *(double *)(v13 + 40);
      if (v15 > a5)
      {
LABEL_16:
        v18 = 1;
        goto LABEL_26;
      }
      a5 = a5 - v15;
      if ((_BYTE)v32)
        v16 = 1.0;
      else
        v16 = 0.0;
      sub_1011048CC(a4);
      if ((_BYTE)v32)
        v17 = 1.0;
      else
        v17 = 0.0;
      v36 = *(_QWORD *)&v17;
      v26 = (uint64_t)&v26;
      v27 = &v26;
      v28 = 0;
      v18 = (*(uint64_t (**)(_QWORD, uint64_t *, uint8_t *, double, double))(*(_QWORD *)*a1 + 72))(*a1, &v26, buf, v16, a5);
      if ((v18 & 1) == 0)
        goto LABEL_25;
      if (v28 >= 2)
        break;
      if (v28 != 1)
        goto LABEL_25;
      sub_100349198(buf, v27 + 4);
      LOBYTE(v32) = *((_BYTE *)v27 + 24);
      v36 = v27[6];
      sub_1011048CC(&v26);
      if (!--v10)
        goto LABEL_16;
    }
    if (&v26 != a4)
      sub_10129EA2C(a4, (uint64_t)v27, (uint64_t)&v26);
LABEL_25:
    sub_1011048CC(&v26);
LABEL_26:
    v20 = v30;
    if (v30)
    {
      p_shared_owners = (unint64_t *)&v30->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  else
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v19 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "CLMMPED,Unexpected,invalid geometry pointer, findMultiOutboundIntersection", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      LOWORD(v26) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,Unexpected,invalid geometry pointer, findMultiOutboundIntersection", &v26, 2);
      v25 = (uint8_t *)v24;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMM::findMultiOutboundIntersection(CLMapGeometryPtr, const CLMapGeometry::DistanceQueryResult &, BOOL, double, CLMapGeometry::ConnectedQueryResultList &)", "%s\n", v24);
      if (v25 != buf)
        free(v25);
    }
    return 0;
  }
  return v18;
}

void sub_101290484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_1011048CC((uint64_t *)va);
  sub_100261F44((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL sub_1012904B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  double v7;
  double v8;
  NSObject *v9;
  uint64_t v10;
  _BOOL8 v11;
  NSObject *v12;
  int v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  double v19;
  unint64_t *v20;
  unint64_t v21;
  char v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  char v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  BOOL v33;
  NSObject *v34;
  const char *v35;
  uint8_t *v36;
  NSObject *v37;
  NSObject *v38;
  NSObject *v39;
  uint64_t *v40;
  uint64_t v41;
  NSObject *v42;
  double *v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  unint64_t *v48;
  unint64_t v49;
  int v50;
  const char *v51;
  uint8_t *v52;
  uint64_t v53;
  const char *v54;
  const char *v55;
  uint8_t *v56;
  const char *v57;
  uint8_t *v58;
  const char *v59;
  uint8_t *v60;
  double *v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  const char *v66;
  uint8_t *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  uint64_t *v71;
  unint64_t v72;
  _QWORD v73[2];
  uint64_t v74[2];
  unint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  int v78;
  uint64_t v79;
  __int16 v80;
  double v81;
  __int16 v82;
  _BYTE v83[10];
  __int16 v84;
  unint64_t v85;
  __int16 v86;
  unint64_t v87;
  __int16 v88;
  double v89;
  __int16 v90;
  uint64_t v91;
  __int16 v92;
  double v93;
  __int16 v94;
  uint64_t v95;
  __int16 v96;
  int v97;
  uint8_t buf[4];
  uint64_t v99;
  __int16 v100;
  double v101;
  __int16 v102;
  _BYTE v103[10];
  __int16 v104;
  unint64_t v105;
  __int16 v106;
  unint64_t v107;
  __int16 v108;
  double v109;
  __int16 v110;
  uint64_t v111;
  __int16 v112;
  double v113;
  __int16 v114;
  uint64_t v115;
  __int16 v116;
  int v117;

  v6 = *(_QWORD *)(a2 + 384);
  *(_BYTE *)(a2 + 898) = 0;
  v7 = fmod(*(double *)(a2 + 480) - *(float *)(a2 + 280), 360.0);
  if (v7 < 0.0)
    v7 = v7 + 360.0;
  if (v7 > 180.0)
    v7 = v7 + -360.0;
  if ((*(_DWORD *)(a2 + 792) - 1) >= 2)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v12 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v13 = *(_DWORD *)(a2 + 792);
      *(_DWORD *)buf = 134349312;
      v99 = v6;
      v100 = 1026;
      LODWORD(v101) = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,harshDigitizationCheck skipped,signalEnv,%{public}d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v50 = *(_DWORD *)(a2 + 792);
      v78 = 134349312;
      v79 = v6;
      v80 = 1026;
      LODWORD(v81) = v50;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,harshDigitizationCheck skipped,signalEnv,%{public}d", &v78, 18);
      v52 = (uint8_t *)v51;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isHarshDigitizationCaseAtTurns(MMFilterData &, const MMSnapData &)", "%s\n", v51);
      if (v52 != buf)
        free(v52);
    }
    return *(_BYTE *)(a2 + 898) != 0;
  }
  else
  {
    v8 = fabs(v7);
    if (v8 <= 15.0 || fabs(*(double *)(a2 + 632)) < 1.0)
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v9 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        v10 = *(_QWORD *)(a2 + 632);
        *(_DWORD *)buf = 134349568;
        v99 = v6;
        v100 = 2050;
        v101 = v8;
        v102 = 2050;
        *(_QWORD *)v103 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,harshDigitizationCheck skipped,courseDiff,%{public}.3lf,acrossTrack,%{public}.3lf", buf, 0x20u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 0;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v53 = *(_QWORD *)(a2 + 632);
      v78 = 134349568;
      v79 = v6;
      v80 = 2050;
      v81 = v8;
      v82 = 2050;
      *(_QWORD *)v83 = v53;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,harshDigitizationCheck skipped,courseDiff,%{public}.3lf,acrossTrack,%{public}.3lf", &v78, 32);
      v36 = (uint8_t *)v54;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isHarshDigitizationCaseAtTurns(MMFilterData &, const MMSnapData &)", "%s\n", v54);
LABEL_99:
      if (v36 != buf)
        free(v36);
      return 0;
    }
    if (!*(_QWORD *)(a2 + 256))
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v34 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134349056;
        v99 = v6;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,invalid road pointer,isHarshDigitizationCaseAtTurns", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 0))
        return 0;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v78 = 134349056;
      v79 = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,Unexpected,invalid road pointer,isHarshDigitizationCaseAtTurns", &v78, 12);
      v36 = (uint8_t *)v35;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isHarshDigitizationCaseAtTurns(MMFilterData &, const MMSnapData &)", "%s\n", v35);
      goto LABEL_99;
    }
    v15 = *(_QWORD *)(a1 + 208);
    v16 = *(std::__shared_weak_count **)(a1 + 216);
    v76 = v15;
    v77 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    if (v15)
    {
      v19 = fmin(fmax(*(double *)(*(_QWORD *)(a2 + 256) + 96) + *(double *)(*(_QWORD *)(a2 + 256) + 96), 15.0), 45.0);
      v74[0] = (uint64_t)v74;
      v74[1] = (uint64_t)v74;
      v75 = 0;
      v73[0] = v15;
      v73[1] = v16;
      if (v16)
      {
        v20 = (unint64_t *)&v16->__shared_owners_;
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
      v22 = sub_101290140(v73, (uint64_t *)(a2 + 256), *(_BYTE *)(a2 + 276), v74, v19 + 0.5);
      if (v16)
      {
        v23 = (unint64_t *)&v16->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      if ((v22 & 1) != 0)
      {
        v70 = (uint64_t)&v70;
        v71 = &v70;
        v72 = 0;
        v25 = v77;
        v68 = v76;
        v69 = v77;
        if (v77)
        {
          v26 = (unint64_t *)&v77->__shared_owners_;
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
        }
        v28 = sub_101290140(&v68, (uint64_t *)(a2 + 256), *(_BYTE *)(a2 + 276) == 0, &v70, v19 + 0.5);
        if (v25)
        {
          v29 = (unint64_t *)&v25->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        if ((v28 & 1) != 0)
        {
          v31 = v75;
          v32 = v72;
          v33 = v75 > 1 || v72 > 1;
          if (v33
            || *(_BYTE *)(a3 + 762)
            && (v41 = *(_QWORD *)(a3 + 120), v40 = (uint64_t *)(a3 + 120), v41)
            && (sub_10110E724((uint64_t *)(a2 + 256), (uint64_t)buf),
                sub_10110E724(v40, (uint64_t)&v78),
                sub_100F5C3F4((uint64_t)buf, (uint64_t)&v78)))
          {
            *(_BYTE *)(a2 + 898) = 1;
          }
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
          v42 = qword_1022A00D8;
          if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
          {
            v43 = *(double **)(a2 + 256);
            v44 = *v43;
            v45 = *((_QWORD *)v43 + 12);
            v46 = *(_QWORD *)(a2 + 632);
            v47 = *(unsigned __int8 *)(a2 + 898);
            *(_DWORD *)buf = 134351617;
            v99 = v6;
            v100 = 2049;
            v101 = v44;
            v102 = 1026;
            *(_DWORD *)v103 = v31 > 1;
            *(_WORD *)&v103[4] = 1026;
            *(_DWORD *)&v103[6] = v32 > 1;
            v104 = 2050;
            v105 = v75;
            v106 = 2050;
            v107 = v72;
            v108 = 2050;
            v109 = v19;
            v110 = 2050;
            v111 = v45;
            v112 = 2050;
            v113 = v8;
            v114 = 2050;
            v115 = v46;
            v116 = 1026;
            v117 = v47;
            _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,harshDigitizationCheck,road,%{private}lld,isApproachingMulti,%{public}d,justCrossedMulti,%{public}d,nextList,%{public}lu,priorList,%{public}lu,threshold,%{public}.1lf,roadWidth,%{public}.1lf,courseDiff,%{public}.3lf,AT,%{public}.3lf,harshAmb,%{public}d", buf, 0x64u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
            v61 = *(double **)(a2 + 256);
            v62 = *v61;
            v63 = *((_QWORD *)v61 + 12);
            v64 = *(_QWORD *)(a2 + 632);
            v65 = *(unsigned __int8 *)(a2 + 898);
            v78 = 134351617;
            v79 = v6;
            v80 = 2049;
            v81 = v62;
            v82 = 1026;
            *(_DWORD *)v83 = v31 > 1;
            *(_WORD *)&v83[4] = 1026;
            *(_DWORD *)&v83[6] = v32 > 1;
            v84 = 2050;
            v85 = v75;
            v86 = 2050;
            v87 = v72;
            v88 = 2050;
            v89 = v19;
            v90 = 2050;
            v91 = v63;
            v92 = 2050;
            v93 = v8;
            v94 = 2050;
            v95 = v64;
            v96 = 1026;
            v97 = v65;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,harshDigitizationCheck,road,%{private}lld,isApproachingMulti,%{public}d,justCrossedMulti,%{public}d,nextList,%{public}lu,priorList,%{public}lu,threshold,%{public}.1lf,roadWidth,%{public}.1lf,courseDiff,%{public}.3lf,AT,%{public}.3lf,harshAmb,%{public}d", &v78, 100, v68, v69, v70, v71);
            v67 = (uint8_t *)v66;
            sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isHarshDigitizationCaseAtTurns(MMFilterData &, const MMSnapData &)", "%s\n", v66);
            if (v67 != buf)
              free(v67);
          }
          v11 = *(_BYTE *)(a2 + 898) != 0;
        }
        else
        {
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
          v39 = qword_1022A00D8;
          if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 134349056;
            v99 = v6;
            _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,findMultiOutboundIntersection returned false, searching for prior connected candidates", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
            v78 = 134349056;
            v79 = v6;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,findMultiOutboundIntersection returned false, searching for prior connected candidates", &v78, 12, v68, v69, v70, v71);
            v60 = (uint8_t *)v59;
            sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isHarshDigitizationCaseAtTurns(MMFilterData &, const MMSnapData &)", "%s\n", v59);
            if (v60 != buf)
              free(v60);
          }
          v11 = 0;
        }
        sub_1011048CC(&v70);
      }
      else
      {
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
        v38 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134349056;
          v99 = v6;
          _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,findMultiOutboundIntersection returned false, searching for next connected candidates", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
          v78 = 134349056;
          v79 = v6;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,findMultiOutboundIntersection returned false, searching for next connected candidates", &v78, 12);
          v58 = (uint8_t *)v57;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isHarshDigitizationCaseAtTurns(MMFilterData &, const MMSnapData &)", "%s\n", v57);
          if (v58 != buf)
            free(v58);
        }
        v11 = 0;
      }
      sub_1011048CC(v74);
      v16 = v77;
    }
    else
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v37 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134349056;
        v99 = v6;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,invalid geometry pointer,isHarshDigitizationCaseAtTurns", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
        v78 = 134349056;
        v79 = v6;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,Unexpected,invalid geometry pointer,isHarshDigitizationCaseAtTurns", &v78, 12);
        v56 = (uint8_t *)v55;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isHarshDigitizationCaseAtTurns(MMFilterData &, const MMSnapData &)", "%s\n", v55);
        if (v56 != buf)
          free(v56);
      }
      v11 = 0;
    }
    if (v16)
    {
      v48 = (unint64_t *)&v16->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  return v11;
}

void sub_101291240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  uint64_t v14;
  uint64_t v15;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  sub_1011048CC((uint64_t *)va);
  sub_1011048CC((uint64_t *)va1);
  sub_100261F44((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t sub_1012912B8(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  __n128 v9;
  _DWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  NSObject *v20;
  const char *v21;
  char *v22;
  uint64_t v23;
  int v24;
  _BOOL4 v25;
  uint64_t v26;
  double v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  NSObject *v33;
  const char *v34;
  char *v35;
  NSObject *v36;
  const char *v37;
  NSObject *v38;
  NSObject *v39;
  const char *v40;
  NSObject *v41;
  unint64_t *v42;
  unint64_t v43;
  const char *v45;
  char *v46;
  const char *v47;
  char *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  char v63;
  void *__p;
  void *v65;
  uint64_t v66;
  __int128 buf;
  uint64_t v68;

  v3 = a2 + 40;
  v2 = *(_QWORD *)(a2 + 40);
  a1[28] = *(_QWORD *)(a2 + 400);
  v4 = *(_QWORD *)(a2 + 384);
  if (*(_QWORD *)(a2 + 48) != v2)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v5 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 134349056;
      *(_QWORD *)((char *)&buf + 4) = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,initialized called on already initialized filter", (uint8_t *)&buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      LODWORD(v58) = 134349056;
      *(_QWORD *)((char *)&v58 + 4) = v4;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,initialized called on already initialized filter", &v58, 12);
      v46 = (char *)v45;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::initialize(MMFilterData &)", "%s\n", v45);
      if (v46 != (char *)&buf)
        free(v46);
    }
    return 0;
  }
  sub_10129DEF4((void **)(a2 + 40));
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  v68 = 0;
  buf = 0uLL;
  *(_QWORD *)&v58 = &buf;
  sub_10083CC6C((void ***)&v58);
  v9.n128_f64[0] = sub_10130AA74((double *)(v3 + 336));
  v53 = (uint64_t)&v53;
  v54 = &v53;
  v55 = 0;
  v10 = (_DWORD *)a1[26];
  v11 = (std::__shared_weak_count *)a1[27];
  v52 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  if (!v10)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v33 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 134349056;
      *(_QWORD *)((char *)&buf + 4) = v4;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,invalid geometry pointer, initialize", (uint8_t *)&buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_92;
    bzero(&buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    LODWORD(v58) = 134349056;
    *(_QWORD *)((char *)&v58 + 4) = v4;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,Unexpected,invalid geometry pointer, initialize", &v58, 12);
    v35 = (char *)v34;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::initialize(MMFilterData &)", "%s\n", v34);
    goto LABEL_111;
  }
  v9.n128_f64[0] = v9.n128_f64[0] * 4.0;
  if (v9.n128_f64[0] < 75.0)
    v9.n128_f64[0] = 75.0;
  if (v9.n128_f64[0] > 250.0)
    v9.n128_f64[0] = 250.0;
  v10[9] = 0;
  if (((*(uint64_t (**)(_DWORD *, uint64_t *, uint64_t, uint64_t, __n128))(*(_QWORD *)v10 + 64))(v10, &v53, v3 + 336, 1, v9) & 1) == 0)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v36 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 134349056;
      *(_QWORD *)((char *)&buf + 4) = v4;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,roadsWithinDistance returned false", (uint8_t *)&buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_92;
    bzero(&buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    LODWORD(v58) = 134349056;
    *(_QWORD *)((char *)&v58 + 4) = v4;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,roadsWithinDistance returned false", &v58, 12);
    v35 = (char *)v37;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::initialize(MMFilterData &)", "%s\n", v37);
    goto LABEL_111;
  }
  if (!v55)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v39 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 134349056;
      *(_QWORD *)((char *)&buf + 4) = v4;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,roadsWithinDistance returned 0 roads", (uint8_t *)&buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_92;
    bzero(&buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    LODWORD(v58) = 134349056;
    *(_QWORD *)((char *)&v58 + 4) = v4;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,roadsWithinDistance returned 0 roads", &v58, 12);
    v35 = (char *)v40;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::initialize(MMFilterData &)", "%s\n", v40);
    goto LABEL_111;
  }
  v14 = v54;
  if (v54 != &v53)
  {
    v51 = a2 + 56;
    while (1)
    {
      v58 = 0uLL;
      LODWORD(v59) = 0;
      WORD2(v59) = 1;
      DWORD2(v59) = 0;
      v65 = 0;
      v66 = 0;
      __p = 0;
      v60 = 0u;
      v61 = 0u;
      v62 = 0u;
      v63 = 0;
      sub_100349198(&v58, v14 + 2);
      v15 = *((_OWORD *)v14 + 2);
      v16 = *((_OWORD *)v14 + 3);
      *(_QWORD *)&v61 = v14[8];
      v59 = v15;
      v60 = v16;
      v17 = v58;
      if ((_QWORD)v58)
        break;
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v20 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 134349056;
        *(_QWORD *)((char *)&buf + 4) = v4;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected, NULL road at initialization", (uint8_t *)&buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
        v56 = 134349056;
        v57 = v4;
        LODWORD(v50) = 12;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,Unexpected, NULL road at initialization", &v56, v50);
        v22 = (char *)v21;
        sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::initialize(MMFilterData &)", "%s\n", v21);
        if (v22 != (char *)&buf)
          free(v22);
      }
LABEL_45:
      if (__p)
      {
        v65 = __p;
        operator delete(__p);
      }
      v30 = (std::__shared_weak_count *)*((_QWORD *)&v58 + 1);
      if (*((_QWORD *)&v58 + 1))
      {
        v31 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      if (!v17)
        goto LABEL_92;
      v14 = (uint64_t *)v14[1];
      if (v14 == &v53)
        goto LABEL_72;
    }
    v18 = *(_QWORD *)(a2 + 48);
    if (v18 >= *(_QWORD *)(a2 + 56))
    {
      v19 = sub_1011247EC((uint64_t *)v3, (uint64_t)&v58);
    }
    else
    {
      sub_101124910(v51, *(_QWORD *)(a2 + 48), (uint64_t)&v58);
      v19 = v18 + 112;
      *(_QWORD *)(a2 + 48) = v18 + 112;
    }
    *(_QWORD *)(a2 + 48) = v19;
    v23 = a1[26];
    if (!v23)
    {
LABEL_41:
      BYTE4(v59) ^= 1u;
      *((float *)&v59 + 2) = *((float *)&v59 + 2) + 180.0;
      sub_1001C6800(*((float *)&v59 + 2));
      *(float *)&v27 = v27;
      DWORD2(v59) = LODWORD(v27);
      v28 = *(_QWORD *)(a2 + 48);
      if (v28 >= *(_QWORD *)(a2 + 56))
      {
        v29 = sub_1011247EC((uint64_t *)v3, (uint64_t)&v58);
      }
      else
      {
        sub_101124910(v51, *(_QWORD *)(a2 + 48), (uint64_t)&v58);
        v29 = v28 + 112;
        *(_QWORD *)(a2 + 48) = v28 + 112;
      }
      *(_QWORD *)(a2 + 48) = v29;
      goto LABEL_45;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v23 + 104))(v23))
      goto LABEL_38;
    v24 = *(_DWORD *)(v58 + 88);
    if (v24 == 3)
    {
      v25 = 1;
      goto LABEL_39;
    }
    if (v24)
LABEL_38:
      v25 = 0;
    else
      v25 = *(unsigned __int8 *)(v58 + 80) != 0;
LABEL_39:
    v26 = a1[26];
    if (v26 && (v25 | (*(unsigned int (**)(uint64_t))(*(_QWORD *)v26 + 104))(v26) ^ 1) != 1)
      goto LABEL_45;
    goto LABEL_41;
  }
LABEL_72:
  if (*(_QWORD *)(a2 + 48) != *(_QWORD *)(a2 + 40))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v38 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 134349056;
      *(_QWORD *)((char *)&buf + 4) = v4;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,filter initialized", (uint8_t *)&buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      LODWORD(v58) = 134349056;
      *(_QWORD *)((char *)&v58 + 4) = v4;
      LODWORD(v50) = 12;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,filter initialized", &v58, v50);
      v48 = (char *)v47;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::initialize(MMFilterData &)", "%s\n", v47);
      if (v48 != (char *)&buf)
        free(v48);
    }
    v6 = 1;
    goto LABEL_93;
  }
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
  v41 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf) = 134349056;
    *(_QWORD *)((char *)&buf + 4) = v4;
    _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,zero particles at initialization", (uint8_t *)&buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    LODWORD(v58) = 134349056;
    *(_QWORD *)((char *)&v58 + 4) = v4;
    LODWORD(v50) = 12;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,Unexpected,zero particles at initialization", &v58, v50);
    v35 = (char *)v49;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::initialize(MMFilterData &)", "%s\n", v49);
LABEL_111:
    if (v35 != (char *)&buf)
      free(v35);
  }
LABEL_92:
  v6 = 0;
LABEL_93:
  if (v52)
  {
    v42 = (unint64_t *)&v52->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  sub_1001A5CBC(&v53);
  return v6;
}

void sub_101291F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_100261F44((uint64_t)va);
  sub_1001A5CBC((uint64_t *)va1);
  _Unwind_Resume(a1);
}

BOOL sub_101291F7C(uint64_t a1, double *a2, uint64_t a3, __n128 a4)
{
  double v5;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  double v12;
  double v13;
  double v14;

  v5 = a2[12];
  a4.n128_u64[0] = *(_QWORD *)(a1 + 24);
  if (a4.n128_f64[0] >= 0.0)
    goto LABEL_20;
  v8 = *(_QWORD *)(a1 + 208);
  if (v8)
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 104))(v8);
    a4.n128_u64[0] = 0.75;
    if (v9)
      a4.n128_f64[0] = 2.5;
  }
  else
  {
    a4.n128_u64[0] = 0.75;
  }
  if (a2[3] - *(double *)(a1 + 232) < 900.0)
  {
    v10 = *(_QWORD *)(a1 + 208);
    if (v10)
    {
      v11 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v10 + 104))(v10, a4);
      a4.n128_u64[0] = 0.375;
      if (v11)
        a4.n128_f64[0] = 1.25;
    }
    else
    {
      a4.n128_u64[0] = 0.375;
    }
  }
  if (a2[23] > 0.0 && a2[12] >= 0.0
    || *(double *)(a3 + 424) <= 0.0
    || (v12 = *(double *)(a3 + 336), v12 < 0.0)
    || (v13 = a2[3], v13 >= 0.0) && (v14 = *(double *)(a3 + 264), v14 >= 0.0) && vabdd_f64(v13, v14) > 2.2)
  {
LABEL_20:
    v12 = v5;
  }
  return v12 > a4.n128_f64[0] || *(_BYTE *)(a3 + 504) != 0;
}

BOOL sub_1012920A4(uint64_t a1, uint64_t a2)
{
  int v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  int v13;
  uint8_t buf[4];
  uint64_t v15;
  __int16 v16;
  int v17;

  v3 = *(unsigned __int8 *)(a1 + 8);
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
  v4 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)buf = 134349312;
    v15 = v5;
    v16 = 1026;
    v17 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,allowsNetworkUsage,%{public}d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v7 = *(_QWORD *)(a2 + 8);
    v10 = 134349312;
    v11 = v7;
    v12 = 1026;
    v13 = v3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,allowsNetworkUsage,%{public}d", &v10, 18);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::shallUseNetwork(const CLMapCrumb &)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  return v3 != 0;
}

void sub_101292278(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  BOOL v13;
  double v14;
  double v15;
  double v16;
  _BOOL4 v17;
  double v18;
  _BOOL4 v19;
  double v20;
  double v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  double v31;
  double v32;
  BOOL v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint8_t *v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  double v48;
  NSObject *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  double v54;
  double v55;
  double v56;
  NSObject *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  uint8_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  uint8_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80[2];
  unint64_t v81;
  int v82;
  uint64_t v83;
  __int16 v84;
  uint64_t v85;
  __int16 v86;
  uint64_t v87;
  uint8_t buf[4];
  uint64_t v89;
  __int16 v90;
  uint64_t v91;
  __int16 v92;
  uint64_t v93;

  v6 = *(double *)(a2 + 104);
  if (v6 > 0.0 && *(double *)(a2 + 192) <= 0.0)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v7 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v8 = *(_QWORD *)(a2 + 8);
      v9 = *(_QWORD *)(a2 + 104);
      v10 = *(_QWORD *)(a2 + 192);
      *(_DWORD *)buf = 134349568;
      v89 = v8;
      v90 = 2050;
      v91 = v9;
      v92 = 2050;
      v93 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLMMPED,match,%{public}.1lf,course invalidated as courseUnc was invalid,course,%{public}.2lf,courseUnc,%{public}.2lf", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v61 = *(_QWORD *)(a2 + 8);
      v62 = *(_QWORD *)(a2 + 104);
      v63 = *(_QWORD *)(a2 + 192);
      v82 = 134349568;
      v83 = v61;
      v84 = 2050;
      v85 = v62;
      v86 = 2050;
      v87 = v63;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,match,%{public}.1lf,course invalidated as courseUnc was invalid,course,%{public}.2lf,courseUnc,%{public}.2lf", &v82, 32);
      v65 = (uint8_t *)v64;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLParticleMM::CLPedestrianMapMatcherFilter::prefilterCourse(CLMapCrumb &, const MMSnapData &)", "%s\n", v64);
      if (v65 != buf)
        free(v65);
    }
    *(_QWORD *)(a2 + 104) = 0xBFF0000000000000;
    *(_QWORD *)(a2 + 192) = 0xBFF0000000000000;
    v6 = -1.0;
  }
  v11 = *(double *)(a3 + 264);
  if (v11 <= 0.0)
    return;
  v12 = *(double *)(a2 + 24);
  v13 = v12 < 0.0 || v11 < 0.0;
  v14 = vabdd_f64(v12, v11);
  if (v13)
    v15 = -1.0;
  else
    v15 = v14;
  v17 = *(double *)(a2 + 184) > 0.0 && (v16 = *(double *)(a2 + 96), v16 >= 0.0) && v16 < 0.001
     || *(_BYTE *)(a2 + 228) != 0;
  v18 = *(double *)(a2 + 192);
  v19 = v18 <= 0.0;
  if (v6 < 0.0)
    v19 = 1;
  if (v17 && v19 && v15 < 2.2)
  {
    v20 = *(double *)(a3 + 432);
    if (v20 < 90.0 && v20 > 0.0)
    {
      v21 = *(double *)(a3 + 344);
      if (v21 >= 0.0)
      {
        *(double *)(a2 + 104) = v21;
        *(double *)(a2 + 192) = v20;
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
        v22 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          v23 = *(_QWORD *)(a2 + 8);
          v24 = *(_QWORD *)(a2 + 104);
          v25 = *(_QWORD *)(a2 + 192);
          *(_DWORD *)buf = 134349568;
          v89 = v23;
          v90 = 2050;
          v91 = v24;
          v92 = 2050;
          v93 = v25;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "CLMMPED,match,%{public}.1lf,invalidCourseInfoUpdatedUsingPreviousEpochInfo,course,%{public}.2lf,courseUnc,%{public}.2lf", buf, 0x20u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_63;
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
        v26 = *(_QWORD *)(a2 + 8);
        v27 = *(_QWORD *)(a2 + 104);
        v28 = *(_QWORD *)(a2 + 192);
        v82 = 134349568;
        v83 = v26;
        v84 = 2050;
        v85 = v27;
        v86 = 2050;
        v87 = v28;
        LODWORD(v79) = 32;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,match,%{public}.1lf,invalidCourseInfoUpdatedUsingPreviousEpochInfo,course,%{public}.2lf,courseUnc,%{public}.2lf", &v82, v79);
        v30 = (uint8_t *)v29;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLParticleMM::CLPedestrianMapMatcherFilter::prefilterCourse(CLMapCrumb &, const MMSnapData &)", "%s\n", v29);
        goto LABEL_101;
      }
    }
  }
  if (v18 > 179.9 && v6 >= 0.0)
  {
    if (v15 >= 2.2
      || (v31 = *(double *)(a3 + 432), v31 >= 90.0)
      || v31 <= 0.0
      || *(double *)(a3 + 344) < 0.0
      || !*(_BYTE *)(a3 + 504)
      || !*(_QWORD *)(a3 + 120))
    {
      *(_QWORD *)(a2 + 104) = 0xBFF0000000000000;
      *(_QWORD *)(a2 + 192) = 0xBFF0000000000000;
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v43 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        v44 = *(_QWORD *)(a2 + 8);
        v45 = *(_QWORD *)(a2 + 104);
        v46 = *(_QWORD *)(a2 + 192);
        *(_DWORD *)buf = 134349568;
        v89 = v44;
        v90 = 2050;
        v91 = v45;
        v92 = 2050;
        v93 = v46;
        _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,courseInvalidated,course,%{public}.2lf,courseUnc,%{public}.2lf", buf, 0x20u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_63;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v66 = *(_QWORD *)(a2 + 8);
      v67 = *(_QWORD *)(a2 + 104);
      v68 = *(_QWORD *)(a2 + 192);
      v82 = 134349568;
      v83 = v66;
      v84 = 2050;
      v85 = v67;
      v86 = 2050;
      v87 = v68;
      LODWORD(v79) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,courseInvalidated,course,%{public}.2lf,courseUnc,%{public}.2lf", &v82, v79);
      v30 = (uint8_t *)v69;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLParticleMM::CLPedestrianMapMatcherFilter::prefilterCourse(CLMapCrumb &, const MMSnapData &)", "%s\n", v69);
LABEL_101:
      if (v30 != buf)
        free(v30);
      goto LABEL_63;
    }
    v80[0] = (uint64_t)v80;
    v80[1] = (uint64_t)v80;
    v81 = 0;
    sub_10128FD98(a1, (double *)(a3 + 120), (uint64_t)v80);
    v32 = *(double *)(a3 + 168);
    v33 = v32 >= 0.07 && v32 <= 0.93;
    if (v33 || v81 < 2)
    {
      *(_QWORD *)(a2 + 104) = *(_QWORD *)(a3 + 344);
      v56 = *(double *)(a3 + 432);
      if (v56 < 29.9)
        v56 = 29.9;
      *(double *)(a2 + 192) = v56;
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v57 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        v58 = *(_QWORD *)(a2 + 8);
        v59 = *(_QWORD *)(a2 + 104);
        v60 = *(_QWORD *)(a2 + 192);
        *(_DWORD *)buf = 134349568;
        v89 = v58;
        v90 = 2050;
        v91 = v59;
        v92 = 2050;
        v93 = v60;
        _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,highCourseUncDataReplacedWithPreviousEpochInfo,course,%{public}.2lf,courseUnc,%{public}.2lf", buf, 0x20u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_93;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v75 = *(_QWORD *)(a2 + 8);
      v76 = *(_QWORD *)(a2 + 104);
      v77 = *(_QWORD *)(a2 + 192);
      v82 = 134349568;
      v83 = v75;
      v84 = 2050;
      v85 = v76;
      v86 = 2050;
      v87 = v77;
      LODWORD(v79) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,highCourseUncDataReplacedWithPreviousEpochInfo,course,%{public}.2lf,courseUnc,%{public}.2lf", &v82, v79);
      v42 = (uint8_t *)v78;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLParticleMM::CLPedestrianMapMatcherFilter::prefilterCourse(CLMapCrumb &, const MMSnapData &)", "%s\n", v78);
    }
    else
    {
      *(_QWORD *)(a2 + 104) = 0xBFF0000000000000;
      *(_QWORD *)(a2 + 192) = 0xBFF0000000000000;
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v34 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        v35 = *(_QWORD *)(a2 + 8);
        v36 = *(_QWORD *)(a2 + 104);
        v37 = *(_QWORD *)(a2 + 192);
        *(_DWORD *)buf = 134349568;
        v89 = v35;
        v90 = 2050;
        v91 = v36;
        v92 = 2050;
        v93 = v37;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,courseInvalidated,particle near multioutbound intersection,course,%{public}.2lf,courseUnc,%{public}.2lf", buf, 0x20u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_93;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v38 = *(_QWORD *)(a2 + 8);
      v39 = *(_QWORD *)(a2 + 104);
      v40 = *(_QWORD *)(a2 + 192);
      v82 = 134349568;
      v83 = v38;
      v84 = 2050;
      v85 = v39;
      v86 = 2050;
      v87 = v40;
      LODWORD(v79) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,courseInvalidated,particle near multioutbound intersection,course,%{public}.2lf,courseUnc,%{public}.2lf", &v82, v79);
      v42 = (uint8_t *)v41;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLParticleMM::CLPedestrianMapMatcherFilter::prefilterCourse(CLMapCrumb &, const MMSnapData &)", "%s\n", v41);
    }
    if (v42 != buf)
      free(v42);
LABEL_93:
    sub_1011048CC(v80);
  }
LABEL_63:
  v47 = *(double *)(a2 + 192);
  v48 = *(double *)(a2 + 104);
  if (v47 > 0.0 && v48 >= 0.0)
  {
    if (v47 < 13.0)
    {
      *(_QWORD *)(a2 + 192) = 0x402A000000000000;
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v49 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        v50 = *(_QWORD *)(a2 + 8);
        v51 = *(_QWORD *)(a2 + 104);
        v52 = *(_QWORD *)(a2 + 192);
        *(_DWORD *)buf = 134349568;
        v89 = v50;
        v90 = 2050;
        v91 = v51;
        v92 = 2050;
        v93 = v52;
        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,courseUncFloorApplied,course,%{public}.2lf,courseUnc,%{public}.2lf", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
        v70 = *(_QWORD *)(a2 + 8);
        v71 = *(_QWORD *)(a2 + 104);
        v72 = *(_QWORD *)(a2 + 192);
        v82 = 134349568;
        v83 = v70;
        v84 = 2050;
        v85 = v71;
        v86 = 2050;
        v87 = v72;
        LODWORD(v79) = 32;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,courseUncFloorApplied,course,%{public}.2lf,courseUnc,%{public}.2lf", &v82, v79);
        v74 = (uint8_t *)v73;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLParticleMM::CLPedestrianMapMatcherFilter::prefilterCourse(CLMapCrumb &, const MMSnapData &)", "%s\n", v73);
        if (v74 != buf)
          free(v74);
      }
    }
    v47 = *(double *)(a2 + 192);
    v48 = *(double *)(a2 + 104);
  }
  if (v47 <= 0.0)
    goto LABEL_83;
  if (v48 < 0.0)
    goto LABEL_83;
  if (*(double *)(a3 + 432) <= 0.0)
    goto LABEL_83;
  v53 = *(double *)(a3 + 344);
  if (v53 < 0.0 || v15 >= 2.2)
    goto LABEL_83;
  v54 = fmod(v48 - v53, 360.0);
  if (v54 < 0.0)
    v54 = v54 + 360.0;
  if (v54 > 180.0)
    v54 = v54 + -360.0;
  v55 = fabs(v54);
  if (!*(_BYTE *)(a1 + 1032))
  {
    *(_BYTE *)(a1 + 1032) = v55 > 14.0;
    return;
  }
  if (v55 < 8.0)
LABEL_83:
    *(_BYTE *)(a1 + 1032) = 0;
}

void sub_101292EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1011048CC((uint64_t *)va);
  _Unwind_Resume(a1);
}

double sub_101292ECC(uint64_t a1, uint64_t a2, double *a3)
{
  double v4;
  double v5;
  NSObject *v6;
  uint64_t v7;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  const char *v17;
  uint8_t *v18;
  int v19;
  uint64_t v20;
  __int16 v21;
  unint64_t v22;
  uint8_t buf[4];
  uint64_t v24;
  __int16 v25;
  unint64_t v26;

  v4 = *(double *)(a2 + 24);
  if (v4 >= 0.0 && (v5 = a3[33], v5 >= 0.0))
  {
    v9 = (v4 - v5) * (v4 - v5);
    v10 = *(double *)(a2 + 184);
    v11 = 0.0;
    if (v10 <= 0.0 || (v12 = *(double *)(a2 + 96), v12 < 0.0) || (v13 = a3[53], v13 <= 0.0))
    {
      v15 = 0.0;
    }
    else
    {
      v14 = a3[42];
      v15 = 0.0;
      if (v14 >= 0.0)
      {
        v11 = v9 * ((v13 * v13 + v10 * v10) * 0.25);
        v15 = v9 * ((v12 + v14) * 0.5 * ((v12 + v14) * 0.5 * 0.25));
      }
    }
    return sqrt(v9 * 3.0 + v11 + v15);
  }
  else
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v6 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      v7 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)buf = 134349312;
      v24 = v7;
      v25 = 2050;
      v26 = 0xBFF0000000000000;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,unexpected, negtive dT,%{public}.1lf", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v16 = *(_QWORD *)(a2 + 8);
      v19 = 134349312;
      v20 = v16;
      v21 = 2050;
      v22 = 0xBFF0000000000000;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,unexpected, negtive dT,%{public}.1lf", &v19, 22);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 0, "virtual double CLParticleMM::CLPedestrianMapMatcherFilter::getProcessNoise(const CLMapCrumb &, const MMSnapData &)", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    return 0.0;
  }
}

uint64_t sub_10129315C(uint64_t a1, uint64_t *a2, uint64_t a3, double a4, double a5)
{
  int v9;
  __int128 *v10;
  _OWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  __int128 v15;
  const void *v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v35;
  std::__shared_weak_count *v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  _OWORD v40[2];
  void *__p;
  void *v42;
  uint64_t v43;

  if (!*(_BYTE *)(a3 + 504))
    return 0;
  if (*(_QWORD *)(a3 + 120))
  {
    v9 = 0;
    v10 = (__int128 *)(a3 + 136);
    v11 = (_OWORD *)(a3 + 176);
    v32 = (uint64_t)(a2 + 7);
    v33 = a2 + 5;
    while (1)
    {
      v12 = *(std::__shared_weak_count **)(a3 + 128);
      v35 = *(_QWORD *)(a3 + 120);
      v36 = v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
      }
      v15 = *(_OWORD *)(a3 + 152);
      v37 = *v10;
      v38 = v15;
      v39 = *(_QWORD *)(a3 + 168);
      v40[0] = *v11;
      *(_OWORD *)((char *)v40 + 9) = *(_OWORD *)(a3 + 185);
      v42 = 0;
      v43 = 0;
      v16 = *(const void **)(a3 + 208);
      v17 = *(_QWORD *)(a3 + 216);
      __p = 0;
      sub_100F5F150(&__p, v16, v17, 0x8E38E38E38E38E39 * ((v17 - (uint64_t)v16) >> 3));
      if (byte_1022FD418)
      {
        byte_1022FD418 = 0;
        v18 = *(float *)&dword_1022FD41C;
      }
      else
      {
        do
        {
          v19 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
          v20 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
          v21 = (float)(v20 * v20) + (float)(v19 * v19);
        }
        while (v21 >= 1.0);
        v18 = 0.0;
        if (v21 != 0.0)
        {
          v22 = sqrtf((float)(logf((float)(v20 * v20) + (float)(v19 * v19)) * -2.0) / v21);
          *(float *)&dword_1022FD41C = v20 * v22;
          byte_1022FD418 = 1;
          v18 = v19 * v22;
        }
      }
      if ((sub_10128E30C(a1, (double *)&v35, a4, v18 * a5 + 0.0) & 1) == 0)
        break;
      v23 = a2[6];
      if (v23 >= a2[7])
      {
        v24 = sub_1011247EC(v33, (uint64_t)&v35);
      }
      else
      {
        sub_101124910(v32, a2[6], (uint64_t)&v35);
        v24 = v23 + 112;
        a2[6] = v23 + 112;
      }
      a2[6] = v24;
      if (__p)
      {
        v42 = __p;
        operator delete(__p);
      }
      v25 = v36;
      if (v36)
      {
        v26 = (unint64_t *)&v36->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      if (++v9 == 12)
        return 12;
    }
    if (__p)
    {
      v42 = __p;
      operator delete(__p);
    }
    v29 = v36;
    if (v36)
    {
      v30 = (unint64_t *)&v36->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
  }
  return 0xFFFFFFFFLL;
}

void sub_101293440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v5;
  va_list va;

  va_start(va, a4);
  *(_QWORD *)(v4 + 48) = v5;
  sub_100F5EA24((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101293474(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  int v8;
  __int128 *v9;
  _OWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int128 v14;
  const void *v15;
  uint64_t v16;
  double v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v30;
  uint64_t *v31;
  unsigned int v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  _OWORD v40[2];
  void *__p;
  void *v42;
  uint64_t v43;

  if (*(_BYTE *)(a3 + 746))
  {
    v34 = 0;
    v8 = 0;
    v9 = (__int128 *)(a3 + 136);
    v10 = (_OWORD *)(a3 + 176);
    v30 = a2 + 56;
    v31 = (uint64_t *)(a2 + 40);
    while (1)
    {
      v11 = *(std::__shared_weak_count **)(a3 + 128);
      v35 = *(_QWORD *)(a3 + 120);
      v36 = v11;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      v14 = v9[1];
      v37 = *v9;
      v38 = v14;
      v39 = *((_QWORD *)v9 + 4);
      v40[0] = *v10;
      *(_OWORD *)((char *)v40 + 9) = *(_OWORD *)((char *)v10 + 9);
      v42 = 0;
      v43 = 0;
      v15 = *(const void **)(a3 + 208);
      v16 = *(_QWORD *)(a3 + 216);
      __p = 0;
      sub_100F5F150(&__p, v15, v16, 0x8E38E38E38E38E39 * ((v16 - (uint64_t)v15) >> 3));
      if (v35)
      {
        BYTE4(v37) ^= 1u;
        *((float *)&v37 + 2) = *((float *)&v37 + 2) + 180.0;
        sub_1001C6800(*((float *)&v37 + 2));
        *(float *)&v17 = v17;
        DWORD2(v37) = LODWORD(v17);
        if (byte_1022FD418)
        {
          byte_1022FD418 = 0;
          v18 = *(float *)&dword_1022FD41C;
        }
        else
        {
          do
          {
            v19 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
            v20 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
            v21 = (float)(v20 * v20) + (float)(v19 * v19);
          }
          while (v21 >= 1.0);
          v18 = 0.0;
          if (v21 != 0.0)
          {
            v22 = sqrtf((float)(logf((float)(v20 * v20) + (float)(v19 * v19)) * -2.0) / v21);
            *(float *)&dword_1022FD41C = v20 * v22;
            byte_1022FD418 = 1;
            v18 = v19 * v22;
          }
        }
        if ((sub_10128E30C(a1, (double *)&v35, *(double *)(a2 + 384), v18 * a4 + a5) & 1) != 0)
        {
          v23 = *(_QWORD *)(a2 + 48);
          if (v23 >= *(_QWORD *)(a2 + 56))
          {
            v24 = sub_1011247EC(v31, (uint64_t)&v35);
          }
          else
          {
            sub_101124910(v30, *(_QWORD *)(a2 + 48), (uint64_t)&v35);
            v24 = v23 + 112;
            *(_QWORD *)(a2 + 48) = v23 + 112;
          }
          v25 = 0;
          *(_QWORD *)(a2 + 48) = v24;
          ++v34;
        }
        else
        {
          v25 = 1;
        }
      }
      else
      {
        v25 = 4;
      }
      if (__p)
      {
        v42 = __p;
        operator delete(__p);
      }
      v26 = v36;
      if (v36)
      {
        v27 = (unint64_t *)&v36->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      if ((v25 | 4) != 4)
        break;
      if (++v8 == 3)
        return v34;
    }
    return -1;
  }
  else
  {
    return 0;
  }
}

void sub_101293770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  uint64_t v7;
  va_list va;

  va_start(va, a6);
  *(_QWORD *)(v6 + 48) = v7;
  sub_100F5EA24((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1012937A8(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  BOOL v3;
  uint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  int v10;

  if (*(_BYTE *)(a3 + 745))
    v3 = *(_QWORD *)a3 == 0;
  else
    v3 = 1;
  if (v3)
    return 0;
  v7 = a2 + 5;
  v8 = a2 + 7;
  v9 = a2[6];
  v10 = 4;
  do
  {
    if (v9 >= *v8)
    {
      v9 = sub_1011247EC(v7, a3);
    }
    else
    {
      sub_101124910((uint64_t)v8, v9, a3);
      v9 += 112;
      a2[6] = v9;
    }
    a2[6] = v9;
    --v10;
  }
  while (v10);
  return 4;
}

void sub_10129384C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 48) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_101293854(uint64_t a1, uint64_t *a2, uint64_t a3, double a4, double a5)
{
  BOOL v5;
  double v10;
  int v11;
  uint64_t result;
  double v13;
  double v14;
  int i;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  __int128 v19;
  const void *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  int v28;
  unsigned int v29;
  _QWORD *v30;
  std::__shared_weak_count *v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  _OWORD v35[2];
  void *__p;
  void *v37;
  uint64_t v38;

  if (*(_BYTE *)(a1 + 1064))
    v5 = *(_BYTE *)(a3 + 504) == 0;
  else
    v5 = 1;
  if (v5)
    return 0;
  v10 = sub_10011E634((double *)(a1 + 168), *(double *)(a3 + 392), *(double *)(a3 + 400), *(double *)(a1 + 1120), *(double *)(a1 + 1128), *(double *)(a3 + 312));
  if (*(int *)(a1 + 1200) < 1)
    return 0;
  v11 = 0;
  LODWORD(result) = 0;
  v13 = v10 + a5 + 0.0;
  if (v13 <= 0.0)
    v14 = 0.1;
  else
    v14 = v13;
  while (2)
  {
    v28 = v11;
    v29 = result;
    for (i = 0; i != 4; ++i)
    {
      v16 = *(std::__shared_weak_count **)(a1 + 1096);
      v30 = *(_QWORD **)(a1 + 1088);
      v31 = v16;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldxr(p_shared_owners);
        while (__stxr(v18 + 1, p_shared_owners));
      }
      v19 = *(_OWORD *)(a1 + 1120);
      v32 = *(_OWORD *)(a1 + 1104);
      v33 = v19;
      v34 = *(_QWORD *)(a1 + 1136);
      v35[0] = *(_OWORD *)(a1 + 1144);
      *(_OWORD *)((char *)v35 + 9) = *(_OWORD *)(a1 + 1153);
      v37 = 0;
      v38 = 0;
      v20 = *(const void **)(a1 + 1176);
      v21 = *(_QWORD *)(a1 + 1184);
      __p = 0;
      sub_100F5F150(&__p, v20, v21, 0x8E38E38E38E38E39 * ((v21 - (uint64_t)v20) >> 3));
      if (v30)
      {
        if ((sub_10128E30C(a1, (double *)&v30, a4, v14) & 1) != 0)
        {
          if (**(_QWORD **)(a1 + 1088) == *v30 && *(unsigned __int8 *)(a1 + 1108) != BYTE4(v32))
          {
            v24 = 0;
          }
          else
          {
            v22 = a2[6];
            if (v22 >= a2[7])
            {
              v23 = sub_1011247EC(a2 + 5, (uint64_t)&v30);
            }
            else
            {
              sub_101124910((uint64_t)(a2 + 7), a2[6], (uint64_t)&v30);
              v23 = v22 + 112;
              a2[6] = v22 + 112;
            }
            v24 = 0;
            a2[6] = v23;
            ++v29;
          }
        }
        else
        {
          v24 = 1;
        }
      }
      else
      {
        v24 = 7;
      }
      if (__p)
      {
        v37 = __p;
        operator delete(__p);
      }
      v25 = v31;
      if (v31)
      {
        v26 = (unint64_t *)&v31->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      if (v24 != 7 && v24)
        return 0xFFFFFFFFLL;
    }
    v11 = v28 + 1;
    result = v29;
    if (v28 + 1 < *(_DWORD *)(a1 + 1200))
      continue;
    break;
  }
  return result;
}

void sub_101293AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_100F5EA24((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101293B18(uint64_t a1, uint64_t *a2, uint64_t a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  int v34;
  __int16 v35;
  int v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  char v40;
  void *__p;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  __n128 *v47;
  __n128 **v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  int v55;
  __int16 v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  if (!*(_BYTE *)(a3 + 504))
    return 0;
  v53 = 0;
  v54 = 0;
  v55 = 0;
  v56 = 1;
  v57 = 0;
  v59 = 0;
  v60 = 0;
  v58 = 0;
  sub_100349198(&v53, (uint64_t *)(a3 + 120));
  LOBYTE(v56) = *(_BYTE *)(a3 + 140);
  v60 = *(_QWORD *)(a3 + 168);
  if (v53)
  {
    v51 = 0;
    v52 = 0;
    v50 = 0;
    v47 = (__n128 *)&v47;
    v48 = &v47;
    v49 = 0;
    v44 = (uint64_t)&v44;
    v45 = &v44;
    v46 = 0;
    sub_101293FB0(a1, (double *)&v53, &v50, &v44, &v47, &v52, &v51, 80.0);
    if ((uint64_t *)(a1 + 1808) != &v44)
      sub_10100C06C((uint64_t *)(a1 + 1808), (uint64_t)v45, (uint64_t)&v44);
    if ((__n128 **)(a1 + 1784) != &v47)
      sub_10100C06C((uint64_t *)(a1 + 1784), (uint64_t)v48, (uint64_t)&v47);
    v31 = a2 + 5;
    v8 = (uint64_t)v48;
    if (v48 == &v47)
    {
      v9 = 0;
LABEL_29:
      v18 = (uint64_t)v45;
      if (v45 == &v44)
        goto LABEL_48;
LABEL_30:
      v19 = 0;
      while (1)
      {
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v35 = 1;
        v36 = 0;
        v42 = 0;
        v43 = 0;
        __p = 0;
        v37 = 0u;
        v38 = 0u;
        v39 = 0u;
        v40 = 0;
        sub_100349198(&v32, (uint64_t *)(v18 + 16));
        *(_QWORD *)&v38 = *(_QWORD *)(v18 + 40);
        LOBYTE(v35) = *(_BYTE *)(v18 + 32);
        v20 = (v9 + 1);
        v21 = sub_10128E30C(a1, (double *)&v32, a4, (double)((int)v20 % 6) * 3.5);
        if ((v21 & 1) != 0)
        {
          v22 = a2[6];
          if (v22 >= a2[7])
          {
            v23 = sub_1011247EC(v31, (uint64_t)&v32);
          }
          else
          {
            sub_101124910((uint64_t)(a2 + 7), a2[6], (uint64_t)&v32);
            v23 = v22 + 112;
            a2[6] = v22 + 112;
          }
          a2[6] = v23;
          v9 = v20;
        }
        if (__p)
        {
          v42 = __p;
          operator delete(__p);
        }
        v24 = v33;
        if (v33)
        {
          p_shared_owners = (unint64_t *)&v33->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        if ((v21 & 1) == 0)
          break;
        if (++v19 == 6)
        {
          v18 = *(_QWORD *)(v18 + 8);
          if ((uint64_t *)v18 != &v44)
            goto LABEL_30;
          goto LABEL_48;
        }
      }
    }
    else
    {
      v9 = 0;
LABEL_9:
      v10 = 0;
      while (1)
      {
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v35 = 1;
        v36 = 0;
        v42 = 0;
        v43 = 0;
        __p = 0;
        v37 = 0u;
        v38 = 0u;
        v39 = 0u;
        v40 = 0;
        sub_100349198(&v32, (uint64_t *)(v8 + 16));
        *(_QWORD *)&v38 = *(_QWORD *)(v8 + 40);
        LOBYTE(v35) = *(_BYTE *)(v8 + 32);
        v11 = (v9 + 1);
        v12 = sub_10128E30C(a1, (double *)&v32, a4, (double)((int)v11 % 6) * 3.5);
        if ((v12 & 1) != 0)
        {
          v13 = a2[6];
          if (v13 >= a2[7])
          {
            v14 = sub_1011247EC(v31, (uint64_t)&v32);
          }
          else
          {
            sub_101124910((uint64_t)(a2 + 7), a2[6], (uint64_t)&v32);
            v14 = v13 + 112;
            a2[6] = v13 + 112;
          }
          a2[6] = v14;
          v9 = v11;
        }
        if (__p)
        {
          v42 = __p;
          operator delete(__p);
        }
        v15 = v33;
        if (v33)
        {
          v16 = (unint64_t *)&v33->__shared_owners_;
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        if ((v12 & 1) == 0)
          break;
        if (++v10 == 6)
        {
          v8 = *(_QWORD *)(v8 + 8);
          if ((__n128 **)v8 != &v47)
            goto LABEL_9;
          goto LABEL_29;
        }
      }
    }
    v9 = 0xFFFFFFFFLL;
LABEL_48:
    sub_1001A5CBC(&v44);
    sub_1001A5CBC((uint64_t *)&v47);
    goto LABEL_49;
  }
  v9 = 0xFFFFFFFFLL;
LABEL_49:
  v27 = v54;
  if (v54)
  {
    v28 = (unint64_t *)&v54->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  return v9;
}

void sub_101293F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  *(_QWORD *)(v29 + 48) = v30;
  sub_100F5EA24((uint64_t)&a12);
  sub_1001A5CBC(&a26);
  sub_1001A5CBC(&a29);
  sub_100261F44(v31 - 160);
  _Unwind_Resume(a1);
}

uint64_t sub_101293FB0(uint64_t a1, double *a2, _DWORD *a3, uint64_t *a4, __n128 **a5, _QWORD *a6, _QWORD *a7, double a8)
{
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  int v19;
  double v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  int v25;
  double v26;
  double v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  double v31;
  uint64_t *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  NSObject *v36;
  uint64_t *v37;
  __n128 v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  const char *v46;
  __n128 *v47;
  uint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  __n128 buf;
  char v54;
  uint64_t v55;
  char v56;

  v15 = *(_QWORD *)(a1 + 208);
  v16 = *(std::__shared_weak_count **)(a1 + 216);
  v51 = v15;
  v52 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  if (v15)
  {
    *a6 = 0;
    *a7 = 0;
    *a3 = 0;
    v19 = *((unsigned __int8 *)a2 + 20);
    v20 = a2[6];
    v21 = *a2;
    sub_1004078E0(*(_QWORD **)a2);
    v22 = 1.0 - v20;
    if (!v19)
      v22 = v20;
    v23 = v22 * *(double *)(*(_QWORD *)&v21 + 40);
    v24 = 1;
    if (v23 <= a8)
    {
      v25 = 0;
      v26 = a8 - v23;
      if (*((_BYTE *)a2 + 20))
        v27 = 1.0;
      else
        v27 = 0.0;
      while (1)
      {
        sub_1001A5CBC(a4);
        *a3 = 0;
        v29 = *(_QWORD **)(*(_QWORD *)a2 + 136);
        v28 = *(_QWORD **)(*(_QWORD *)a2 + 144);
        if (*((_BYTE *)a2 + 20))
        {
          if (v28 == v29)
          {
            *a6 = 0;
            v30 = 0;
          }
          else
          {
            *a6 = *(v28 - 2);
            v30 = *(v28 - 1);
          }
          v31 = 1.0;
        }
        else if (v28 == v29)
        {
          *a6 = 0;
          v31 = 0.0;
          v30 = 0;
        }
        else
        {
          *a6 = *v29;
          v30 = v29[1];
          v31 = 0.0;
        }
        *a7 = v30;
        a2[6] = v31;
        v48 = (uint64_t)&v48;
        v49 = &v48;
        v50 = 0;
        v24 = (*(uint64_t (**)(double, double))(*(_QWORD *)v51 + 72))(v27, v26);
        if ((v24 & 1) == 0)
          break;
        if (v50 >= 2)
        {
          buf = 0uLL;
          v56 = 0;
          v37 = v49;
          if (v49 != &v48)
          {
            do
            {
              v54 = *((_BYTE *)v37 + 24);
              v55 = v37[6];
              sub_100349198(&buf, v37 + 4);
              v56 = 1;
              v38 = sub_101008368((__n128 **)a4, &buf);
              ++*a3;
              v37 = (uint64_t *)v37[1];
            }
            while (v37 != &v48);
            v39 = (std::__shared_weak_count *)buf.n128_u64[1];
            if (buf.n128_u64[1])
            {
              v40 = (unint64_t *)(buf.n128_u64[1] + 8);
              do
                v41 = __ldaxr(v40);
              while (__stlxr(v41 - 1, v40));
              if (!v41)
              {
                ((void (*)(std::__shared_weak_count *, __n128))v39->__on_zero_shared)(v39, v38);
                std::__shared_weak_count::__release_weak(v39);
              }
            }
          }
          break;
        }
        if (v50 != 1)
          break;
        buf = 0uLL;
        v56 = 0;
        v54 = *((_BYTE *)v49 + 24);
        v55 = v49[6];
        sub_100349198(&buf, v49 + 4);
        v56 = 1;
        sub_101008368(a5, &buf);
        sub_100349198(a2, v49 + 4);
        v32 = v49;
        *((_BYTE *)a2 + 20) = *((_BYTE *)v49 + 24);
        *((_QWORD *)a2 + 6) = v32[6];
        v33 = (std::__shared_weak_count *)buf.n128_u64[1];
        if (buf.n128_u64[1])
        {
          v34 = (unint64_t *)(buf.n128_u64[1] + 8);
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        sub_1011048CC(&v48);
        if (++v25 == 30)
        {
          v24 = 1;
          goto LABEL_43;
        }
      }
      sub_1011048CC(&v48);
    }
  }
  else
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v36 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      buf.n128_u16[0] = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "CLMMPED,Unexpected,invalid geometry pointer, multiOutboundHelper", (uint8_t *)&buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      LOWORD(v48) = 0;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,Unexpected,invalid geometry pointer, multiOutboundHelper", &v48, 2);
      v47 = (__n128 *)v46;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::multiOutboundHelper(CLMapGeometry::DistanceQueryResult &, int &, double, CLMapGeometry::IntersectionQueryResultList &, CLMapGeometry::IntersectionQueryResultList &, double &, double &) const", "%s\n", v46);
      if (v47 != &buf)
        free(v47);
    }
    v24 = 0;
  }
LABEL_43:
  v42 = v52;
  if (v52)
  {
    v43 = (unint64_t *)&v52->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  return v24;
}

void sub_101294454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101294494(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  char v12;
  char v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  const char *v32;
  uint8_t *v33;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  std::__shared_weak_count *v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  double v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  int v57;
  uint8_t buf[64];
  __int128 v59;
  char v60;
  void *__p;
  void *v62;
  uint64_t v63;

  if (!*(_BYTE *)(a1 + 9))
    return 0;
  if (*(_QWORD *)(a1 + 1880) == *(_QWORD *)(a1 + 1888))
    return 0;
  v4 = *(_QWORD *)(a2 + 384);
  if (sub_1002199F0(a1 + 1832, *(double *)(a2 + 400), 2.5))
    return 0;
  v5 = *(_QWORD *)(a1 + 1880);
  v39 = *(_QWORD *)(a1 + 1888);
  if (v5 == v39)
    return 0;
  v6 = 0;
  while (2)
  {
    v7 = *(std::__shared_weak_count **)(v5 + 8);
    v41 = *(uint64_t **)v5;
    v42 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    v10 = *(_OWORD *)(v5 + 16);
    v11 = *(_OWORD *)(v5 + 32);
    v40 = v5;
    v45 = *(_QWORD *)(v5 + 48);
    v43 = v10;
    v44 = v11;
    v12 = 1;
    do
    {
      v13 = v12;
      memset(buf, 0, 20);
      *(_WORD *)&buf[20] = 1;
      *(_DWORD *)&buf[24] = 0;
      v62 = 0;
      v63 = 0;
      __p = 0;
      memset(&buf[32], 0, 32);
      v59 = 0u;
      v60 = 0;
      sub_100349198(buf, (uint64_t *)&v41);
      *(_OWORD *)&buf[16] = v43;
      *(_OWORD *)&buf[32] = v44;
      *(_QWORD *)&buf[48] = v45;
      if (byte_1022FD418)
      {
        byte_1022FD418 = 0;
        v14 = *(float *)&dword_1022FD41C;
      }
      else
      {
        do
        {
          v15 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
          v16 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
          v17 = (float)(v16 * v16) + (float)(v15 * v15);
        }
        while (v17 >= 1.0);
        v14 = 0.0;
        if (v17 != 0.0)
        {
          v18 = sqrtf((float)(logf((float)(v16 * v16) + (float)(v15 * v15)) * -2.0) / v17);
          *(float *)&dword_1022FD41C = v16 * v18;
          byte_1022FD418 = 1;
          v14 = v15 * v18;
        }
      }
      v19 = sub_10128E30C(a1, (double *)buf, *(double *)(a2 + 384), v14);
      if ((v19 & 1) != 0)
      {
        v20 = *(_QWORD *)(a2 + 48);
        if (v20 >= *(_QWORD *)(a2 + 56))
        {
          v21 = sub_1011247EC((uint64_t *)(a2 + 40), (uint64_t)buf);
        }
        else
        {
          sub_101124910(a2 + 56, *(_QWORD *)(a2 + 48), (uint64_t)buf);
          v21 = v20 + 112;
          *(_QWORD *)(a2 + 48) = v20 + 112;
        }
        *(_QWORD *)(a2 + 48) = v21;
        v6 = (v6 + 1);
      }
      if (__p)
      {
        v62 = __p;
        operator delete(__p);
      }
      v22 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v23 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      if ((v19 & 1) == 0)
      {
        v35 = v42;
        if (v42)
        {
          v36 = (unint64_t *)&v42->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        return 0xFFFFFFFFLL;
      }
      v12 = 0;
    }
    while ((v13 & 1) != 0);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v25 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v26 = *v41;
      *(_DWORD *)buf = 134350337;
      *(_QWORD *)&buf[4] = v4;
      *(_WORD *)&buf[12] = 2049;
      *(_QWORD *)&buf[14] = v44;
      *(_WORD *)&buf[22] = 2049;
      *(_QWORD *)&buf[24] = *((_QWORD *)&v44 + 1);
      *(_WORD *)&buf[32] = 2050;
      *(double *)&buf[34] = *((float *)&v43 + 2);
      *(_WORD *)&buf[42] = 2049;
      *(_QWORD *)&buf[44] = v26;
      *(_WORD *)&buf[52] = 1026;
      *(_DWORD *)&buf[54] = BYTE4(v43);
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHint,lat,%{private}.8lf,lon,%{private}.8lf,course,%{public}.3lf,rseg,%{private}lld,fwd,%{public}d", buf, 0x3Au);
    }
    v27 = v40;
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v31 = *v41;
      v46 = 134350337;
      v47 = v4;
      v48 = 2049;
      v49 = v44;
      v50 = 2049;
      v51 = *((_QWORD *)&v44 + 1);
      v52 = 2050;
      v53 = *((float *)&v43 + 2);
      v54 = 2049;
      v55 = v31;
      v56 = 1026;
      v57 = BYTE4(v43);
      LODWORD(v38) = 58;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,routeHint,lat,%{private}.8lf,lon,%{private}.8lf,course,%{public}.3lf,rseg,%{private}lld,fwd,%{public}d", &v46, v38);
      v33 = (uint8_t *)v32;
      sub_100512490("Generic", 1, 0, 2, "int CLParticleMM::CLPedestrianMapMatcherFilter::addRouteHintParticles(MMFilterData &, const MMSnapData &)", "%s\n", v32);
      if (v33 != buf)
        free(v33);
      v27 = v40;
    }
    v28 = v42;
    if (v42)
    {
      v29 = (unint64_t *)&v42->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v5 = v27 + 56;
    if (v5 != v39)
      continue;
    break;
  }
  return v6;
}

void sub_101294A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101294A40(uint64_t a1, uint64_t a2, uint64_t a3, double *a4)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  double *v15;
  double *v16;
  int v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  double v23;
  double v24;
  double v25;
  double v26;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  NSObject *v38;
  const char *v39;
  uint8_t *v40;
  NSObject *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v45;
  NSObject *v46;
  int v47;
  const char *v48;
  int v49;
  const char *v50;
  uint8_t *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  double v54;
  double v55;
  int v56;
  double v57;
  __int16 v58;
  int v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  int v63;
  __int16 v64;
  int v65;
  __int16 v66;
  int v67;
  __int16 v68;
  int v69;
  __int16 v70;
  int v71;
  __int16 v72;
  int v73;
  uint8_t buf[4];
  double v75;
  __int16 v76;
  int v77;
  __int16 v78;
  uint64_t v79;
  __int16 v80;
  int v81;
  __int16 v82;
  int v83;
  __int16 v84;
  int v85;
  __int16 v86;
  int v87;
  __int16 v88;
  int v89;
  __int16 v90;
  int v91;

  if (a4[33] <= 0.0)
    return 1;
  v8 = *(_QWORD *)(a1 + 208);
  v9 = *(std::__shared_weak_count **)(a1 + 216);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  if (!v8)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v38 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "CLMMPED,Unexpected,invalid geometry pointer, predict", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_46;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    LOWORD(v56) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,Unexpected,invalid geometry pointer, predict", &v56, 2);
    v40 = (uint8_t *)v39;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::predict(CLMapCrumb &, MMFilterData &, const MMSnapData &)", "%s\n", v39);
LABEL_64:
    if (v40 != buf)
      free(v40);
    goto LABEL_46;
  }
  v55 = *(double *)(a2 + 8);
  v13 = sub_10128D86C(a1, a2, a4);
  v14 = v13;
  if (v13 < 0.0)
    goto LABEL_46;
  *(double *)(a3 + 856) = v13;
  if (*(_QWORD *)(a3 + 48) == *(_QWORD *)(a3 + 40))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v41 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      v75 = v55;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,predict called with 0 particles", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_46;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v56 = 134349056;
    v57 = v55;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,predict called with 0 particles", &v56, 12);
    v40 = (uint8_t *)v48;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::predict(CLMapCrumb &, MMFilterData &, const MMSnapData &)", "%s\n", v48);
    goto LABEL_64;
  }
  v52 = *(_QWORD *)(a3 + 48) - *(_QWORD *)(a3 + 40);
  v53 = v9;
  v54 = sub_101292ECC(v12, a2, a4);
  v15 = *(double **)(a3 + 40);
  v16 = *(double **)(a3 + 48);
  if (v15 != v16)
  {
    v17 = 0;
    while (1)
    {
      if (byte_1022FD418)
      {
        byte_1022FD418 = 0;
        v18 = *(float *)&dword_1022FD41C;
      }
      else
      {
        do
        {
          v19 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
          v20 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
          v21 = (float)(v20 * v20) + (float)(v19 * v19);
        }
        while (v21 >= 1.0);
        v18 = 0.0;
        if (v21 != 0.0)
        {
          v22 = sqrtf((float)(logf((float)(v20 * v20) + (float)(v19 * v19)) * -2.0) / v21);
          *(float *)&dword_1022FD41C = v20 * v22;
          byte_1022FD418 = 1;
          v18 = v19 * v22;
        }
      }
      v23 = v18;
      v24 = v54 * v23;
      v25 = fabs(v23);
      if ((-252645135 * v17) <= 0xF0F0F0F)
        v24 = v25 * 34.0;
      v26 = v25 * 8.0;
      if ((-1171354717 * v17) > 0x1745D174 || v54 >= 8.0)
        v26 = v24;
      if ((sub_10128E30C(a1, v15, v55, v14 + v26) & 1) == 0)
        break;
      ++v17;
      v15 += 14;
      if (v15 == v16)
        goto LABEL_24;
    }
    v37 = 0;
LABEL_54:
    v9 = v53;
    goto LABEL_47;
  }
LABEL_24:
  v28 = sub_101293854(a1, (uint64_t *)a3, (uint64_t)a4, v55, v14);
  if (v28 != -1)
  {
    v29 = sub_101293B18(a1, (uint64_t *)a3, (uint64_t)a4, v55);
    if (v29 != -1)
    {
      v30 = sub_10129315C(a1, (uint64_t *)a3, (uint64_t)a4, v55, v54);
      if (v30 != -1)
      {
        v31 = sub_101293474(a1, a3, (uint64_t)a4, v54, v14);
        v32 = v31;
        if ((_DWORD)v31 != -1)
        {
          v33 = sub_1012937A8(v31, (_QWORD *)a3, (uint64_t)a4);
          v34 = sub_101294494(a1, a3);
          if (v34 != -1)
          {
            v35 = *(_QWORD **)(a3 + 40);
            v36 = *(_QWORD **)(a3 + 48);
            while (v35 != v36)
            {
              v35[7] = 0;
              v35[8] = 0;
              v35[9] = 0;
              v35[12] = v35[11];
              v35 += 14;
            }
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
            v45 = v52 >> 4;
            v46 = qword_1022A00D8;
            if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
            {
              v47 = -1227133513 * ((*(_QWORD *)(a3 + 48) - *(_QWORD *)(a3 + 40)) >> 4);
              *(_DWORD *)buf = 134351104;
              v75 = v55;
              v76 = 1026;
              v77 = v47;
              v78 = 2050;
              v79 = 0x6DB6DB6DB6DB6DB7 * v45;
              v80 = 1026;
              v81 = v28;
              v82 = 1026;
              v83 = v29;
              v84 = 1026;
              v85 = v30;
              v86 = 1026;
              v87 = v32;
              v88 = 1026;
              v89 = v33;
              v90 = 1026;
              v91 = v34;
              _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,prediction,%{public}d,NrParticles,%{public}lu,NrPriorIntersectionParticles,%{public}d,NrNewFwdIntersectionParticles,%{public}d,NrNewBiasedToPrior,%{public}d,NrNewBiasedToPriorOppositeDirection,%{public}d,NrNewAmbiguous,%{public}d,numNewRouteParticles,%{public}d", buf, 0x40u);
            }
            v9 = v53;
            if (!sub_1001BFF7C(115, 2))
            {
              v37 = 1;
              goto LABEL_47;
            }
            bzero(buf, 0x65CuLL);
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
            v49 = -1227133513 * ((*(_QWORD *)(a3 + 48) - *(_QWORD *)(a3 + 40)) >> 4);
            v56 = 134351104;
            v57 = v55;
            v58 = 1026;
            v59 = v49;
            v60 = 2050;
            v61 = 0x6DB6DB6DB6DB6DB7 * v45;
            v62 = 1026;
            v63 = v28;
            v64 = 1026;
            v65 = v29;
            v66 = 1026;
            v67 = v30;
            v68 = 1026;
            v69 = v32;
            v70 = 1026;
            v71 = v33;
            v72 = 1026;
            v73 = v34;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,prediction,%{public}d,NrParticles,%{public}lu,NrPriorIntersectionParticles,%{public}d,NrNewFwdIntersectionParticles,%{public}d,NrNewBiasedToPrior,%{public}d,NrNewBiasedToPriorOppositeDirection,%{public}d,NrNewAmbiguous,%{public}d,numNewRouteParticles,%{public}d", &v56, 64);
            v51 = (uint8_t *)v50;
            sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::predict(CLMapCrumb &, MMFilterData &, const MMSnapData &)", "%s\n", v50);
            if (v51 != buf)
              free(v51);
            v37 = 1;
            goto LABEL_54;
          }
        }
      }
    }
  }
LABEL_46:
  v37 = 0;
LABEL_47:
  if (v9)
  {
    v42 = (unint64_t *)&v9->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return v37;
}

void sub_101295268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1012952B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  __n128 *i;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  BOOL v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  NSObject *v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  int v37;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  char *v44;
  NSObject *v45;
  const char *v46;
  char *v47;
  NSObject *v48;
  NSObject *v49;
  int v50;
  double v51;
  uint64_t v52;
  double v53;
  double v54;
  double v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  __n128 *v60;
  unint64_t v61;
  uint64_t v62;
  __n128 *v63;
  unint64_t v64;
  double v65;
  double v66;
  NSObject *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  const char *v73;
  char *v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  NSObject *v82;
  uint64_t v83;
  double v84;
  __n128 v85;
  __n128 v86;
  uint64_t v87;
  double v88;
  const char *v89;
  char *v90;
  NSObject *v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  int v95;
  const char *v96;
  NSObject *v97;
  const char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  __n128 **v102;
  uint64_t v103;
  unint64_t v104;
  double v105;
  uint64_t v108;
  NSObject *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  double v115;
  uint64_t v116;
  uint64_t v117;
  __int128 v118;
  double v119;
  double v120;
  double v121;
  double v122;
  BOOL v123;
  double v125;
  NSObject *v126;
  double v127;
  uint64_t v128;
  int v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  _OWORD *v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  NSObject *v149;
  uint64_t v150;
  uint64_t v151;
  const char *v152;
  char *v153;
  double v154;
  uint64_t v155;
  int v156;
  const char *v157;
  double *v159;
  double v160;
  double v161;
  double v162;
  double *v163;
  double *v164;
  BOOL v165;
  double v166;
  double v167;
  _BOOL8 v169;
  unint64_t v170;
  NSObject *v171;
  const char *v172;
  char *v173;
  double v174;
  unint64_t v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  uint64_t v185;
  unint64_t *v186;
  unint64_t v187;
  __int128 v188;
  __int128 v189;
  uint64_t v190;
  NSObject *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  NSObject *v200;
  uint64_t v201;
  int v202;
  uint64_t v203;
  int v204;
  const char *v205;
  const char *v206;
  char *v207;
  const char *v208;
  char *v209;
  const char *v210;
  uint64_t v211;
  const char *v212;
  char *v213;
  const char *v214;
  char *v215;
  uint64_t v216;
  __int128 v217;
  uint64_t *v218;
  double v219;
  _OWORD *v220;
  uint64_t v221;
  double v222;
  uint64_t v223;
  int v224;
  __n128 *v225;
  __n128 **v226;
  unint64_t j;
  unint64_t v228;
  std::__shared_weak_count *v229;
  _BYTE v230[24];
  _OWORD *v231;
  _OWORD *v232;
  unint64_t v233;
  uint64_t v234;
  std::__shared_weak_count *v235;
  int v236;
  uint64_t v237;
  __int16 v238;
  uint64_t v239;
  __int16 v240;
  uint64_t v241;
  __int16 v242;
  uint64_t v243;
  __int16 v244;
  uint64_t v245;
  __int16 v246;
  uint64_t v247;
  __int16 v248;
  uint64_t v249;
  _BYTE v250[64];
  _BYTE v251[32];
  __int128 v252;
  _OWORD v253[2];
  __int128 v254;
  __int128 v255;
  _OWORD v256[2];
  uint64_t v257;
  std::__shared_weak_count *v258;
  __int128 v259;
  __int128 v260;
  uint64_t v261;
  _BYTE v262[32];
  _BYTE v263[30];
  __int16 v264;
  uint64_t v265;
  __int16 v266;
  uint64_t v267;
  _BYTE buf[12];
  __int16 v269;
  _BYTE v270[28];
  __int16 v271;
  double v272;
  __int16 v273;
  double v274;
  __int16 v275;
  double v276;
  __int16 v277;
  double v278;

  v5 = a1;
  v6 = *(_QWORD *)(a1 + 1912);
  v7 = *(_QWORD *)(a1 + 1904);
  if (v6 != v7)
  {
    sub_101124BE8(a1 + 1928, v7, v6, 0xF83E0F83E0F83E1 * ((v6 - v7) >> 3));
    v8 = *(_QWORD *)(v5 + 1912);
    v6 = *(_QWORD *)(v5 + 1904);
    if (v8 != v6)
    {
      do
      {
        v9 = v8 - 264;
        sub_100261F44(v8 - 56);
        v8 = v9;
      }
      while (v9 != v6);
    }
  }
  *(_QWORD *)(v5 + 1912) = v6;
  if (!*(_BYTE *)(v5 + 9))
    return 0;
  if (*(_QWORD *)(v5 + 1880) == *(_QWORD *)(v5 + 1888))
    return 0;
  v10 = *(_QWORD *)(a2 + 384);
  if (sub_1002199F0(v5 + 1832, *(double *)(a2 + 400), 2.5)
    || !sub_100F5F0D4((double *)(v5 + 1952), *(double *)(v5 + 1872), 60.0))
  {
    return 0;
  }
  v11 = *(_QWORD *)(v5 + 208);
  v12 = *(std::__shared_weak_count **)(v5 + 216);
  v234 = v11;
  v235 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  if (!v11)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v25 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v10;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,invalid geometry pointer, generateRouteHint", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      *(_DWORD *)v250 = 134349056;
      *(_QWORD *)&v250[4] = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,Unexpected,invalid geometry pointer, generateRouteHint", v250, 12);
      v207 = (char *)v206;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, const MMSnapData &)", "%s\n", v206);
      if (v207 != buf)
        free(v207);
    }
    v23 = 0;
    goto LABEL_302;
  }
  v231 = 0;
  v232 = 0;
  v233 = 0;
  v221 = v5;
  if (!*(_BYTE *)(a3 + 504))
    goto LABEL_184;
  sub_10110E724((uint64_t *)(a3 + 120), (uint64_t)v230);
  for (i = *(__n128 **)(v5 + 1880); ; i = (__n128 *)((char *)i + 56))
  {
    if (i == *(__n128 **)(v5 + 1888))
      goto LABEL_184;
    v16 = i->n128_u64[1];
    v228 = i->n128_u64[0];
    v229 = (std::__shared_weak_count *)v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    sub_100F5C398((uint64_t)buf, (uint64_t)&v228, i[1].n128_i8[4]);
    v19 = sub_100F5C3F4((uint64_t)v230, (uint64_t)buf);
    v20 = v229;
    if (v229)
    {
      v21 = (unint64_t *)&v229->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if (v19)
      break;
  }
  v26 = *(double *)(a2 + 400);
  v27 = -1.0;
  if (v26 >= 0.0)
  {
    v28 = *(double *)(a3 + 264);
    v29 = vabdd_f64(v26, v28);
    if (v28 >= 0.0)
      v27 = v29;
    else
      v27 = -1.0;
  }
  v30 = fmax(*(double *)(a2 + 856), 0.0) + (float)((float)random() * 4.6566e-10) * 0.25;
  if (v30 <= v27 * 6.0)
    v31 = v30;
  else
    v31 = v27 * 6.0;
  sub_100F5E8AC((uint64_t)v262, a3 + 120);
  v225 = (__n128 *)&v225;
  v226 = &v225;
  for (j = 0; i != *(__n128 **)(v5 + 1888); i = (__n128 *)((char *)i + 56))
    sub_1010069D4(&v225, i);
  v224 = 0;
  if (((*(uint64_t (**)(uint64_t, _BYTE *, __n128 **, int *, double, double))(*(_QWORD *)v234 + 56))(v234, v262, &v225, &v224, *(double *)&v263[16], v31) & 1) == 0)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v45 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v10;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHints,no meas,moveOnRouteRoads,failed as not enough route roads are available", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_82;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    *(_DWORD *)v250 = 134349056;
    *(_QWORD *)&v250[4] = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,routeHints,no meas,moveOnRouteRoads,failed as not enough route roads are available", v250, 12);
    v47 = (char *)v46;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, const MMSnapData &)", "%s\n", v46);
    goto LABEL_327;
  }
  if (j <= v224)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v48 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349568;
      *(_QWORD *)&buf[4] = v10;
      v269 = 1026;
      *(_DWORD *)v270 = v224;
      *(_WORD *)&v270[4] = 2050;
      *(_QWORD *)&v270[6] = j;
      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,routeHints,no meas,moveOnRouteRoads,route index,%{public}d,is more than number of route roads,%{public}ld", buf, 0x1Cu);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_82;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    *(_DWORD *)v250 = 134349568;
    *(_QWORD *)&v250[4] = v10;
    *(_WORD *)&v250[12] = 1026;
    *(_DWORD *)&v250[14] = v224;
    *(_WORD *)&v250[18] = 2050;
    *(_QWORD *)&v250[20] = j;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,routeHints,no meas,moveOnRouteRoads,route index,%{public}d,is more than number of route roads,%{public}ld", v250, 28);
    v47 = (char *)v210;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, const MMSnapData &)", "%s\n", v210);
    goto LABEL_327;
  }
  v32 = *(float *)&v262[24];
  v33 = 5.0;
  if (*(double *)&v263[16] <= 0.97 && *(double *)&v263[16] >= 0.03)
  {
    if (*(double *)(a2 + 568) <= 0.0 || (v34 = *(double *)(a2 + 480), v34 < 0.0))
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v49 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349312;
        *(_QWORD *)&buf[4] = v10;
        v269 = 2050;
        *(_QWORD *)v270 = 0x403E000000000000;
        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHints,no meas,moveOnRouteRoads,course deweighted,unc,%{public}.2lf", buf, 0x16u);
      }
      v33 = 30.0;
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
        *(_DWORD *)v250 = 134349312;
        *(_QWORD *)&v250[4] = v10;
        *(_WORD *)&v250[12] = 2050;
        *(_QWORD *)&v250[14] = 0x403E000000000000;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,routeHints,no meas,moveOnRouteRoads,course deweighted,unc,%{public}.2lf", v250, 22);
        v215 = (char *)v214;
        sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, const MMSnapData &)", "%s\n", v214);
        if (v215 != buf)
          free(v215);
      }
    }
    else
    {
      v35 = fmod(v34 - v32, 360.0);
      if (v35 < 0.0)
        v35 = v35 + 360.0;
      if (v35 > 180.0)
        v35 = v35 + -360.0;
      v36 = fabs(v35);
      v37 = *(_DWORD *)(v5 + 2072);
      if (v36 >= 135.0)
      {
        *(_DWORD *)(v5 + 2072) = v37 + 1;
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
        v91 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          v92 = *(_QWORD *)(a2 + 480);
          v93 = *(_DWORD *)(v5 + 2072);
          *(_DWORD *)buf = 134349824;
          *(_QWORD *)&buf[4] = v10;
          v269 = 2050;
          *(double *)v270 = v32;
          *(_WORD *)&v270[8] = 2050;
          *(_QWORD *)&v270[10] = v92;
          *(_WORD *)&v270[18] = 1026;
          *(_DWORD *)&v270[20] = v93;
          _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHints,no meas,moveOnRouteRoads,routeCourse,%{public}.1lf,is very different than crumb course,%{public}.1lf,rejection,%{public}d", buf, 0x26u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_82;
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
        v94 = *(_QWORD *)(a2 + 480);
        v95 = *(_DWORD *)(v5 + 2072);
        *(_DWORD *)v250 = 134349824;
        *(_QWORD *)&v250[4] = v10;
        *(_WORD *)&v250[12] = 2050;
        *(double *)&v250[14] = v32;
        *(_WORD *)&v250[22] = 2050;
        *(_QWORD *)&v250[24] = v94;
        *(_WORD *)&v250[32] = 1026;
        *(_DWORD *)&v250[34] = v95;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,routeHints,no meas,moveOnRouteRoads,routeCourse,%{public}.1lf,is very different than crumb course,%{public}.1lf,rejection,%{public}d", v250, 38);
        v47 = (char *)v96;
        sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, const MMSnapData &)", "%s\n", v96);
        goto LABEL_327;
      }
      if (v36 > 60.0 && v37 >= 1)
      {
        *(_DWORD *)(v5 + 2072) = v37 + 1;
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
        v200 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          v201 = *(_QWORD *)(a2 + 480);
          v202 = *(_DWORD *)(v5 + 2072);
          *(_DWORD *)buf = 134349824;
          *(_QWORD *)&buf[4] = v10;
          v269 = 2050;
          *(double *)v270 = v32;
          *(_WORD *)&v270[8] = 2050;
          *(_QWORD *)&v270[10] = v201;
          *(_WORD *)&v270[18] = 1026;
          *(_DWORD *)&v270[20] = v202;
          _os_log_impl((void *)&_mh_execute_header, v200, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHints,no meas,moveOnRouteRoads,routeCourse,%{public}.1lf,is different than crumb course,%{public}.1lf, and rejections are high,rejection,%{public}d", buf, 0x26u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_82;
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
        v203 = *(_QWORD *)(a2 + 480);
        v204 = *(_DWORD *)(v5 + 2072);
        *(_DWORD *)v250 = 134349824;
        *(_QWORD *)&v250[4] = v10;
        *(_WORD *)&v250[12] = 2050;
        *(double *)&v250[14] = v32;
        *(_WORD *)&v250[22] = 2050;
        *(_QWORD *)&v250[24] = v203;
        *(_WORD *)&v250[32] = 1026;
        *(_DWORD *)&v250[34] = v204;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,routeHints,no meas,moveOnRouteRoads,routeCourse,%{public}.1lf,is different than crumb course,%{public}.1lf, and rejections are high,rejection,%{public}d", v250, 38);
        v47 = (char *)v205;
        sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, const MMSnapData &)", "%s\n", v205);
LABEL_327:
        if (v47 != buf)
          free(v47);
LABEL_82:
        sub_1001A5CBC((uint64_t *)&v225);
        sub_100F5EA24((uint64_t)v262);
LABEL_295:
        v23 = 0;
        goto LABEL_301;
      }
      if (v36 > 80.0)
      {
        v39 = a3;
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
        v40 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          v41 = *(_QWORD *)(a2 + 480);
          *(_DWORD *)buf = 134349568;
          *(_QWORD *)&buf[4] = v10;
          v269 = 2050;
          *(double *)v270 = v32;
          *(_WORD *)&v270[8] = 2050;
          *(_QWORD *)&v270[10] = v41;
          _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHints,skipping,moveOnRouteRoads meas,routeCourse,%{public}.1lf,is somewhat different than crumb course,%{public}.1lf", buf, 0x20u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
          v42 = *(_QWORD *)(a2 + 480);
          *(_DWORD *)v250 = 134349568;
          *(_QWORD *)&v250[4] = v10;
          *(_WORD *)&v250[12] = 2050;
          *(double *)&v250[14] = v32;
          *(_WORD *)&v250[22] = 2050;
          *(_QWORD *)&v250[24] = v42;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,routeHints,skipping,moveOnRouteRoads meas,routeCourse,%{public}.1lf,is somewhat different than crumb course,%{public}.1lf", v250, 32);
          v44 = (char *)v43;
          sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, const MMSnapData &)", "%s\n", v43);
          if (v44 != buf)
            free(v44);
        }
        goto LABEL_183;
      }
    }
    v50 = v262[20];
    v51 = *(double *)&v263[16];
    v52 = *(_QWORD *)v262;
    sub_1004078E0(*(_QWORD **)v262);
    v53 = 1.0 - v51;
    if (!v50)
      v53 = v51;
    if (v53 * *(double *)(v52 + 40) >= 15.0)
      goto LABEL_168;
  }
  if (*(double *)(a2 + 568) <= 0.0)
    goto LABEL_168;
  v54 = *(double *)(a2 + 480);
  if (v54 < 0.0)
    goto LABEL_168;
  v222 = v33;
  v55 = fmod(v54 - v32, 360.0);
  if (v55 < 0.0)
    v55 = v55 + 360.0;
  if (v55 > 180.0)
    v55 = v55 + -360.0;
  v219 = fabs(v55);
  if (v219 <= 50.0)
  {
LABEL_167:
    v33 = v222;
    goto LABEL_168;
  }
  v56 = a3;
  v57 = 1;
  v58 = 2;
  while (1)
  {
    v59 = v224 + (uint64_t)v57;
    if (j > v59)
      break;
LABEL_143:
    ++v57;
    ++v58;
    if (v57 == 3)
    {
      a3 = v56;
      goto LABEL_167;
    }
  }
  v60 = (__n128 *)v226;
  if ((v59 & 0x80000000) != 0)
  {
    v62 = v224 + (uint64_t)v57;
    do
    {
      v60 = (__n128 *)v60->n128_u64[0];
      _CF = __CFADD__(v62++, 1);
    }
    while (!_CF);
  }
  else if ((_DWORD)v59)
  {
    v61 = v58 + v224;
    do
    {
      v60 = (__n128 *)v60->n128_u64[1];
      --v61;
    }
    while (v61 > 1);
  }
  if (v60 != (__n128 *)&v225)
  {
    v63 = v60 + 1;
    v64 = v60[1].n128_u64[0];
    if (v64)
    {
      v65 = fmod(v60[2].n128_f32[2] - v32, 360.0);
      if (v65 < 0.0)
        v65 = v65 + 360.0;
      if (v65 <= 180.0)
        v66 = v65;
      else
        v66 = v65 + -360.0;
      if (v66 >= 10.0 || (sub_1004078E0((_QWORD *)v64), *(double *)(v64 + 40) >= 7.0))
      {
        sub_1001C6800(v32 + v66 * 0.5);
        v76 = v75;
        v77 = *(double *)(a2 + 480);
        v78 = fmod(v77 - v60[2].n128_f32[2], 360.0);
        if (v78 < 0.0)
          v78 = v78 + 360.0;
        if (v78 > 180.0)
          v78 = v78 + -360.0;
        v79 = fabs(v78);
        v80 = fmod(v77 - v76, 360.0);
        if (v80 < 0.0)
          v80 = v80 + 360.0;
        if (v80 > 180.0)
          v80 = v80 + -360.0;
        v81 = fabs(v80);
        if (v79 < 25.0 || v81 < 15.0)
        {
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
          v82 = qword_1022A00D8;
          if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
          {
            v83 = *(_QWORD *)(a2 + 480);
            v84 = v60[2].n128_f32[2];
            *(_DWORD *)buf = 134350848;
            *(_QWORD *)&buf[4] = v10;
            v269 = 2050;
            *(_QWORD *)v270 = v83;
            *(_WORD *)&v270[8] = 2050;
            *(double *)&v270[10] = v84;
            *(_WORD *)&v270[18] = 2050;
            *(double *)&v270[20] = v32;
            v271 = 2050;
            v272 = v79;
            v273 = 2050;
            v274 = v76;
            v275 = 2050;
            v276 = v81;
            v277 = 2050;
            v278 = v219;
            _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHints,skipping,moveOnRouteRoads meas,crumb close to intersection and gpsCourse,%{public}.1lf,is matching with next road on route,%{public}.1lf,course,%{public}.1lf,nextCourseDiff,%{public}.1lf,approxCourseOfTurningRoad,%{public}.1lf,turningCourseDiff,%{public}.1lf,courseDiff,%{public}.1lf", buf, 0x52u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
            v87 = *(_QWORD *)(a2 + 480);
            v88 = v60[2].n128_f32[2];
            *(_DWORD *)v250 = 134350848;
            *(_QWORD *)&v250[4] = v10;
            *(_WORD *)&v250[12] = 2050;
            *(_QWORD *)&v250[14] = v87;
            *(_WORD *)&v250[22] = 2050;
            *(double *)&v250[24] = v88;
            *(_WORD *)&v250[32] = 2050;
            *(double *)&v250[34] = v32;
            *(_WORD *)&v250[42] = 2050;
            *(double *)&v250[44] = v79;
            *(_WORD *)&v250[52] = 2050;
            *(double *)&v250[54] = v76;
            *(_WORD *)&v250[62] = 2050;
            *(double *)v251 = v81;
            *(_WORD *)&v251[8] = 2050;
            *(double *)&v251[10] = v219;
            LODWORD(v216) = 82;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,routeHints,skipping,moveOnRouteRoads meas,crumb close to intersection and gpsCourse,%{public}.1lf,is matching with next road on route,%{public}.1lf,course,%{public}.1lf,nextCourseDiff,%{public}.1lf,approxCourseOfTurningRoad,%{public}.1lf,turningCourseDiff,%{public}.1lf,courseDiff,%{public}.1lf", v250, v216);
            v90 = (char *)v89;
            sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, const MMSnapData &)", "%s\n", v89);
            if (v90 != buf)
              free(v90);
          }
          sub_100349198(v262, (uint64_t *)&v60[1]);
          v85 = v60[2];
          v86 = v60[3];
          *(_QWORD *)&v263[16] = v60[4].n128_u64[0];
          *(__n128 *)&v262[16] = v85;
          *(__n128 *)v263 = v86;
          v32 = v60[2].n128_f32[2];
          v224 = v59;
        }
      }
      else
      {
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
        v67 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          v68 = v63->n128_u64[0];
          sub_1004078E0(v63->n128_u64[0]);
          v69 = *(_QWORD *)(v68 + 40);
          *(_DWORD *)buf = 134349824;
          *(_QWORD *)&buf[4] = v10;
          v269 = 1026;
          *(_DWORD *)v270 = v59;
          *(_WORD *)&v270[4] = 2050;
          *(double *)&v270[6] = v66;
          *(_WORD *)&v270[14] = 2050;
          *(_QWORD *)&v270[16] = v69;
          _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHints,moving on to next route road,nextRouteRoadIndex,%{public}d,angleBetweenTwoRoads,%{public}.2lf,length,%{public}.2lf", buf, 0x26u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
          v70 = qword_1022A00D8;
          v71 = v63->n128_u64[0];
          sub_1004078E0(v63->n128_u64[0]);
          v72 = *(_QWORD *)(v71 + 40);
          *(_DWORD *)v250 = 134349824;
          *(_QWORD *)&v250[4] = v10;
          *(_WORD *)&v250[12] = 1026;
          *(_DWORD *)&v250[14] = v59;
          *(_WORD *)&v250[18] = 2050;
          *(double *)&v250[20] = v66;
          *(_WORD *)&v250[28] = 2050;
          *(_QWORD *)&v250[30] = v72;
          LODWORD(v216) = 38;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v70, 2, "CLMMPED,%{public}.1lf,routeHints,moving on to next route road,nextRouteRoadIndex,%{public}d,angleBetweenTwoRoads,%{public}.2lf,length,%{public}.2lf", v250, v216);
          v74 = (char *)v73;
          sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, const MMSnapData &)", "%s\n", v73);
          if (v74 != buf)
            free(v74);
        }
      }
      v5 = v221;
      goto LABEL_143;
    }
  }
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
  v5 = v221;
  a3 = v56;
  v33 = v222;
  v97 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134349056;
    *(_QWORD *)&buf[4] = v10;
    _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,unexpected,routeHints,moving on to next route road,nullptr", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    *(_DWORD *)v250 = 134349056;
    *(_QWORD *)&v250[4] = v10;
    LODWORD(v216) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,unexpected,routeHints,moving on to next route road,nullptr", v250, v216);
    v99 = (char *)v98;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, const MMSnapData &)", "%s\n", v98);
    if (v99 != buf)
      free(v99);
    v5 = v221;
    a3 = v56;
    goto LABEL_167;
  }
LABEL_168:
  v100 = *(_QWORD *)v263;
  v101 = *(_QWORD *)&v263[8];
  v102 = v226;
  v103 = v224;
  if (v224 < 0)
  {
    do
    {
      v102 = (__n128 **)*v102;
      _CF = __CFADD__(v103++, 1);
    }
    while (!_CF);
  }
  else if (v224)
  {
    v104 = v224 + 1;
    do
    {
      v102 = (__n128 **)v102[1];
      --v104;
    }
    while (v104 > 1);
  }
  v39 = a3;
  v105 = sub_10011E634((double *)(v5 + 168), *(double *)v263, *(double *)&v263[8], *((double *)v102 + 6), *((double *)v102 + 7), 0.0);
  memset(v250, 0, 24);
  *(_OWORD *)&v250[24] = xmmword_101BAFC90;
  v250[40] = 0;
  *(_OWORD *)&v250[48] = 0u;
  *(_OWORD *)v251 = 0u;
  __asm { FMOV            V1.2D, #-1.0 }
  v255 = _Q1;
  *(_QWORD *)&v256[0] = 0xBFF0000000000000;
  v257 = 0;
  v258 = 0;
  LODWORD(v259) = 0;
  WORD2(v259) = 1;
  DWORD2(v259) = 0;
  v261 = 0;
  v260 = 0uLL;
  *(_QWORD *)&v251[16] = v100;
  *(_QWORD *)&v251[24] = v101;
  *(_QWORD *)&v252 = *(_QWORD *)(a2 + 448);
  *((double *)&v252 + 1) = v32;
  if (v105 < 8.0)
    v105 = 8.0;
  *(double *)v253 = v105;
  *((double *)v253 + 1) = v33;
  *(_QWORD *)&v253[1] = 0x3FF0000000000000;
  v108 = *(_QWORD *)(a2 + 560);
  *((_QWORD *)&v253[1] + 1) = *(_QWORD *)(a2 + 472);
  *(_QWORD *)&v254 = v108;
  BYTE8(v254) = *(_BYTE *)(a2 + 604);
  *(int8x16_t *)((char *)v256 + 8) = vextq_s8(*(int8x16_t *)(a2 + 392), *(int8x16_t *)(a2 + 392), 8uLL);
  *((_QWORD *)&v256[1] + 1) = *(_QWORD *)(a2 + 384);
  sub_1011230EC((uint64_t)v250, 0);
  sub_100349198(&v257, (uint64_t *)v262);
  v259 = *(_OWORD *)&v262[16];
  v260 = *(_OWORD *)v263;
  v261 = *(_QWORD *)&v263[16];
  sub_1011231F8((uint64_t *)&v231, (uint64_t)v250);
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
  v109 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
  {
    v110 = 0xF83E0F83E0F83E1 * ((uint64_t)(*(_QWORD *)(v5 + 1912) - *(_QWORD *)(v5 + 1904)) >> 3);
    *(_DWORD *)buf = 134350593;
    *(_QWORD *)&buf[4] = v10;
    v269 = 2049;
    *(_QWORD *)v270 = *(_QWORD *)&v251[16];
    *(_WORD *)&v270[8] = 2049;
    *(_QWORD *)&v270[10] = *(_QWORD *)&v251[24];
    *(_WORD *)&v270[18] = 2050;
    *(_QWORD *)&v270[20] = *((_QWORD *)&v252 + 1);
    v271 = 2050;
    v272 = *(double *)v253;
    v273 = 2050;
    v274 = *((double *)v253 + 1);
    v275 = 2050;
    v276 = *(double *)&v110;
    _os_log_impl((void *)&_mh_execute_header, v109, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHints,meas,moveOnRouteRoads,ll,%{private}.7lf,%{private}.7lf,course,%{public}.3lf,hunc,%{public}.3lf,cunc,%{public}.3lf,count,%{public}lu", buf, 0x48u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v211 = 0xF83E0F83E0F83E1 * ((uint64_t)(*(_QWORD *)(v221 + 1912) - *(_QWORD *)(v221 + 1904)) >> 3);
    v236 = 134350593;
    v237 = v10;
    v238 = 2049;
    v239 = *(_QWORD *)&v251[16];
    v240 = 2049;
    v241 = *(_QWORD *)&v251[24];
    v242 = 2050;
    v243 = *((_QWORD *)&v252 + 1);
    v244 = 2050;
    v245 = *(_QWORD *)&v253[0];
    v246 = 2050;
    v247 = *((_QWORD *)&v253[0] + 1);
    v248 = 2050;
    v249 = v211;
    LODWORD(v216) = 72;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,routeHints,meas,moveOnRouteRoads,ll,%{private}.7lf,%{private}.7lf,course,%{public}.3lf,hunc,%{public}.3lf,cunc,%{public}.3lf,count,%{public}lu", &v236, v216);
    v213 = (char *)v212;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, const MMSnapData &)", "%s\n", v212);
    if (v213 != buf)
      free(v213);
    v5 = v221;
  }
  sub_100261F44((uint64_t)&v257);
LABEL_183:
  sub_1001A5CBC((uint64_t *)&v225);
  sub_100F5EA24((uint64_t)v262);
  a3 = v39;
LABEL_184:
  v111 = (uint64_t)v231;
  v220 = v232;
  if (v232 != v231)
    goto LABEL_249;
  v112 = *(_QWORD *)(v5 + 1880);
  v223 = *(_QWORD *)(v5 + 1888);
  if (v112 == v223)
  {
LABEL_248:
    v111 = (uint64_t)v231;
    v220 = v232;
    v5 = v221;
    goto LABEL_249;
  }
  v113 = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v217 = _Q0;
  do
  {
    v115 = sub_10011E634((double *)(v221 + 168), *(double *)(v112 + 32), *(double *)(v112 + 40), *(double *)(a2 + 408), *(double *)(a2 + 416), 0.0);
    memset(v250, 0, 24);
    *(_OWORD *)&v250[24] = xmmword_101BAFC90;
    v250[40] = 0;
    *(_OWORD *)&v250[48] = 0u;
    *(_OWORD *)v251 = 0u;
    v255 = v217;
    *(_QWORD *)&v256[0] = 0xBFF0000000000000;
    LODWORD(v259) = 0;
    v257 = 0;
    v258 = 0;
    WORD2(v259) = 1;
    DWORD2(v259) = 0;
    v261 = 0;
    v260 = 0uLL;
    *(_OWORD *)&v251[16] = *(_OWORD *)(v112 + 32);
    *(_QWORD *)&v252 = *(_QWORD *)(a2 + 448);
    if (v115 < 8.0)
      v115 = 8.0;
    *((double *)&v252 + 1) = *(float *)(v112 + 24);
    *(double *)v253 = v115;
    *(_OWORD *)((char *)v253 + 8) = xmmword_101BB7280;
    v116 = *(_QWORD *)(a2 + 560);
    *((_QWORD *)&v253[1] + 1) = *(_QWORD *)(a2 + 472);
    *(_QWORD *)&v254 = v116;
    BYTE8(v254) = *(_BYTE *)(a2 + 604);
    *(int8x16_t *)((char *)v256 + 8) = vextq_s8(*(int8x16_t *)(a2 + 392), *(int8x16_t *)(a2 + 392), 8uLL);
    *((_QWORD *)&v256[1] + 1) = *(_QWORD *)(a2 + 384);
    sub_1011230EC((uint64_t)v250, 0);
    *(double *)&v253[1] = 1.0 / *((double *)v253 + 1);
    sub_100349198(&v257, (uint64_t *)v112);
    v117 = *(_QWORD *)(v112 + 48);
    v118 = *(_OWORD *)(v112 + 32);
    v259 = *(_OWORD *)(v112 + 16);
    v260 = v118;
    v261 = v117;
    if (*(double *)(a2 + 568) <= 0.0 || (v119 = *(double *)(a2 + 480), v119 < 0.0))
    {
      if (!*(_BYTE *)(a3 + 746))
        goto LABEL_209;
      v119 = *(double *)(a3 + 408);
      if (v119 < 0.0)
        goto LABEL_209;
    }
    v120 = fmod(v119 - *((double *)&v252 + 1), 360.0);
    if (v120 < 0.0)
      v120 = v120 + 360.0;
    v121 = v120 + -360.0;
    if (v120 <= 180.0)
      v121 = v120;
    v122 = fabs(v121);
    if (v122 < 135.0
      && (v122 > 60.0 ? (v123 = *(_DWORD *)(v221 + 2072) <= 0) : (v123 = 1),
          v123
       && (v122 > 80.0
         ? (_CF = (unint64_t)(0x6DB6DB6DB6DB6DB7
                                   * ((uint64_t)(*(_QWORD *)(v221 + 1888) - *(_QWORD *)(v221 + 1880)) >> 3)) >= 2)
         : (_CF = 0),
           !_CF)))
    {
      if (v121 == 0.0)
        v125 = *(double *)&v253[1];
      else
        v125 = 1.0 / v122;
      *(double *)&v253[1] = v125;
      sub_1011230EC((uint64_t)v250, 0);
      v133 = v232;
      if ((unint64_t)v232 >= v233)
      {
        v148 = sub_101124FDC((uint64_t *)&v231, (uint64_t)v250);
      }
      else
      {
        *v232 = *(_OWORD *)v250;
        v134 = *(_OWORD *)&v250[16];
        v135 = *(_OWORD *)&v250[32];
        v136 = *(_OWORD *)v251;
        v133[3] = *(_OWORD *)&v250[48];
        v133[4] = v136;
        v133[1] = v134;
        v133[2] = v135;
        v137 = *(_OWORD *)&v251[16];
        v138 = v252;
        v139 = v253[1];
        v133[7] = v253[0];
        v133[8] = v139;
        v133[5] = v137;
        v133[6] = v138;
        v140 = v254;
        v141 = v255;
        v142 = v256[1];
        v133[11] = v256[0];
        v133[12] = v142;
        v133[9] = v140;
        v133[10] = v141;
        *((_QWORD *)v133 + 26) = v257;
        v143 = v258;
        *((_QWORD *)v133 + 27) = v258;
        if (v143)
        {
          v144 = (unint64_t *)&v143->__shared_owners_;
          do
            v145 = __ldxr(v144);
          while (__stxr(v145 + 1, v144));
        }
        v146 = v259;
        v147 = v260;
        *((_QWORD *)v133 + 32) = v261;
        v133[14] = v146;
        v133[15] = v147;
        v148 = (uint64_t)v133 + 264;
      }
      v232 = (_OWORD *)v148;
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v149 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        v150 = 0xF83E0F83E0F83E1 * ((uint64_t)(*(_QWORD *)(v221 + 1912) - *(_QWORD *)(v221 + 1904)) >> 3);
        *(_DWORD *)buf = 134350849;
        *(_QWORD *)&buf[4] = v10;
        v269 = 2049;
        *(_QWORD *)v270 = *(_QWORD *)&v251[16];
        *(_WORD *)&v270[8] = 2049;
        *(_QWORD *)&v270[10] = *(_QWORD *)&v251[24];
        *(_WORD *)&v270[18] = 2050;
        *(_QWORD *)&v270[20] = *((_QWORD *)&v252 + 1);
        v271 = 2050;
        v272 = *(double *)v253;
        v273 = 2050;
        v274 = *((double *)v253 + 1);
        v275 = 2050;
        v276 = *(double *)&v150;
        v277 = 2050;
        v278 = *(double *)&v253[1];
        _os_log_impl((void *)&_mh_execute_header, v149, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHints,meas,projection,ll,%{private}.7lf,%{private}.7lf,course,%{public}.3lf,hunc,%{public}.3lf,cunc,%{public}.3lf,count,%{public}lu,confidence,%{public}.4lf", buf, 0x52u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
        v151 = 0xF83E0F83E0F83E1 * ((uint64_t)(*(_QWORD *)(v221 + 1912) - *(_QWORD *)(v221 + 1904)) >> 3);
        *(_DWORD *)v262 = 134350849;
        *(_QWORD *)&v262[4] = v10;
        *(_WORD *)&v262[12] = 2049;
        *(_QWORD *)&v262[14] = *(_QWORD *)&v251[16];
        *(_WORD *)&v262[22] = 2049;
        *(_QWORD *)&v262[24] = *(_QWORD *)&v251[24];
        *(_WORD *)v263 = 2050;
        *(_QWORD *)&v263[2] = *((_QWORD *)&v252 + 1);
        *(_WORD *)&v263[10] = 2050;
        *(_QWORD *)&v263[12] = *(_QWORD *)&v253[0];
        *(_WORD *)&v263[20] = 2050;
        *(_QWORD *)&v263[22] = *((_QWORD *)&v253[0] + 1);
        v264 = 2050;
        v265 = v151;
        v266 = 2050;
        v267 = *(_QWORD *)&v253[1];
        LODWORD(v216) = 82;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,routeHints,meas,projection,ll,%{private}.7lf,%{private}.7lf,course,%{public}.3lf,hunc,%{public}.3lf,cunc,%{public}.3lf,count,%{public}lu,confidence,%{public}.4lf", v262, v216);
        v153 = (char *)v152;
        sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, const MMSnapData &)", "%s\n", v152);
LABEL_239:
        if (v153 != buf)
          free(v153);
      }
    }
    else
    {
LABEL_209:
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v126 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        v127 = *(float *)(v112 + 24);
        v128 = *(_QWORD *)(a2 + 480);
        v129 = *(_DWORD *)(v221 + 2072);
        *(_DWORD *)buf = 134349824;
        *(_QWORD *)&buf[4] = v10;
        v269 = 2050;
        *(double *)v270 = v127;
        *(_WORD *)&v270[8] = 2050;
        *(_QWORD *)&v270[10] = v128;
        *(_WORD *)&v270[18] = 1026;
        *(_DWORD *)&v270[20] = v129;
        _os_log_impl((void *)&_mh_execute_header, v126, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHints, no meas, projection,routeCourse,%{public}.1lf,is very different than crumb course,%{public}.1lf,rejection,%{public}d", buf, 0x26u);
      }
      ++v113;
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
        v154 = *(float *)(v112 + 24);
        v155 = *(_QWORD *)(a2 + 480);
        v156 = *(_DWORD *)(v221 + 2072);
        *(_DWORD *)v262 = 134349824;
        *(_QWORD *)&v262[4] = v10;
        *(_WORD *)&v262[12] = 2050;
        *(double *)&v262[14] = v154;
        *(_WORD *)&v262[22] = 2050;
        *(_QWORD *)&v262[24] = v155;
        *(_WORD *)v263 = 1026;
        *(_DWORD *)&v263[2] = v156;
        LODWORD(v216) = 38;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,routeHints, no meas, projection,routeCourse,%{public}.1lf,is very different than crumb course,%{public}.1lf,rejection,%{public}d", v262, v216);
        v153 = (char *)v157;
        sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, const MMSnapData &)", "%s\n", v157);
        goto LABEL_239;
      }
    }
    v130 = v258;
    if (v258)
    {
      v131 = (unint64_t *)&v258->__shared_owners_;
      do
        v132 = __ldaxr(v131);
      while (__stlxr(v132 - 1, v131));
      if (!v132)
      {
        ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
        std::__shared_weak_count::__release_weak(v130);
      }
    }
    v112 += 56;
  }
  while (v112 != v223);
  if (v113 <= 0)
    goto LABEL_248;
  v5 = v221;
  v111 = (uint64_t)v231;
  v220 = v232;
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v221 + 1888) - *(_QWORD *)(v221 + 1880)) >> 3) == v113
    && v232 == v231)
  {
    v23 = 0;
    ++*(_DWORD *)(v221 + 2072);
    goto LABEL_301;
  }
LABEL_249:
  if (v220 == (_OWORD *)v111)
    goto LABEL_295;
  v218 = (uint64_t *)(v5 + 1904);
  v159 = (double *)(v5 + 168);
  *(_DWORD *)(v5 + 2072) = 0;
  v160 = -1.0;
  v161 = 0.0;
  v162 = -1.0;
  do
  {
    v163 = *(double **)(v5 + 1928);
    v164 = *(double **)(v5 + 1936);
    if (v163 == v164)
      goto LABEL_275;
    v165 = 1;
    do
    {
      v166 = vabdd_f64(v163[23], *(double *)(v111 + 184));
      if (v160 < 0.0)
        v160 = v166;
      v167 = sub_10011E634(v159, *(double *)(v111 + 80), *(double *)(v111 + 88), v163[10], v163[11], 0.0);
      if (v167 < v162 || v162 < 0.0)
        v162 = v167;
      if (v167 < 0.001)
      {
        v169 = *(double *)(v111 + 256) >= 0.2;
        *(_QWORD *)v262 = v262;
        *(_QWORD *)&v262[8] = v262;
        *(_QWORD *)&v262[16] = 0;
        if ((*(unsigned int (**)(uint64_t, _BYTE *, uint64_t, _BOOL8, _QWORD))(*(_QWORD *)v234 + 72))(v234, v262, v111 + 208, v169, 0))
        {
          v170 = *(_QWORD *)&v262[16];
          v165 = *(_QWORD *)&v262[16] > 1uLL;
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
          v171 = qword_1022A00D8;
          if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 134349568;
            *(_QWORD *)&buf[4] = v10;
            v269 = 1026;
            *(_DWORD *)v270 = v170 > 1;
            *(_WORD *)&v270[4] = 2050;
            *(_QWORD *)&v270[6] = *(_QWORD *)&v262[16];
            _os_log_impl((void *)&_mh_execute_header, v171, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHints,duplicate measurement check,measurementGood,%{public}d,vector,%{public}lu", buf, 0x1Cu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
            *(_DWORD *)v250 = 134349568;
            *(_QWORD *)&v250[4] = v10;
            *(_WORD *)&v250[12] = 1026;
            *(_DWORD *)&v250[14] = v170 > 1;
            *(_WORD *)&v250[18] = 2050;
            *(_QWORD *)&v250[20] = *(_QWORD *)&v262[16];
            LODWORD(v216) = 28;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,routeHints,duplicate measurement check,measurementGood,%{public}d,vector,%{public}lu", v250, v216);
            v173 = (char *)v172;
            sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, const MMSnapData &)", "%s\n", v172);
            if (v173 != buf)
              free(v173);
          }
        }
        sub_1011048CC((uint64_t *)v262);
      }
      v163 += 33;
    }
    while (v163 != v164);
    v5 = v221;
    if (v165)
    {
LABEL_275:
      v174 = *(double *)(v111 + 128);
      v175 = *(_QWORD *)(v5 + 1912);
      if (v175 >= *(_QWORD *)(v5 + 1920))
      {
        v190 = sub_101124FDC(v218, v111);
      }
      else
      {
        *(_OWORD *)v175 = *(_OWORD *)v111;
        v176 = *(_OWORD *)(v111 + 16);
        v177 = *(_OWORD *)(v111 + 32);
        v178 = *(_OWORD *)(v111 + 64);
        *(_OWORD *)(v175 + 48) = *(_OWORD *)(v111 + 48);
        *(_OWORD *)(v175 + 64) = v178;
        *(_OWORD *)(v175 + 16) = v176;
        *(_OWORD *)(v175 + 32) = v177;
        v179 = *(_OWORD *)(v111 + 80);
        v180 = *(_OWORD *)(v111 + 96);
        v181 = *(_OWORD *)(v111 + 128);
        *(_OWORD *)(v175 + 112) = *(_OWORD *)(v111 + 112);
        *(_OWORD *)(v175 + 128) = v181;
        *(_OWORD *)(v175 + 80) = v179;
        *(_OWORD *)(v175 + 96) = v180;
        v182 = *(_OWORD *)(v111 + 144);
        v183 = *(_OWORD *)(v111 + 160);
        v184 = *(_OWORD *)(v111 + 192);
        *(_OWORD *)(v175 + 176) = *(_OWORD *)(v111 + 176);
        *(_OWORD *)(v175 + 192) = v184;
        *(_OWORD *)(v175 + 144) = v182;
        *(_OWORD *)(v175 + 160) = v183;
        *(_QWORD *)(v175 + 208) = *(_QWORD *)(v111 + 208);
        v185 = *(_QWORD *)(v111 + 216);
        *(_QWORD *)(v175 + 216) = v185;
        if (v185)
        {
          v186 = (unint64_t *)(v185 + 8);
          do
            v187 = __ldxr(v186);
          while (__stxr(v187 + 1, v186));
        }
        v188 = *(_OWORD *)(v111 + 224);
        v189 = *(_OWORD *)(v111 + 240);
        *(_QWORD *)(v175 + 256) = *(_QWORD *)(v111 + 256);
        *(_OWORD *)(v175 + 224) = v188;
        *(_OWORD *)(v175 + 240) = v189;
        v190 = v175 + 264;
      }
      v161 = v161 + v174;
      *(_QWORD *)(v5 + 1912) = v190;
    }
    v111 += 264;
  }
  while ((_OWORD *)v111 != v220);
  if (v162 < 0.0 || v160 <= 0.0 || v160 >= 5.0 || v162 <= v160 * 6.0)
  {
    if (v161 > 0.0)
    {
      v195 = *(_QWORD *)(v5 + 1904);
      v196 = *(_QWORD *)(v5 + 1912);
      while (v195 != v196)
      {
        *(double *)(v195 + 128) = *(double *)(v195 + 128) / v161;
        v195 += 264;
      }
    }
    v23 = 1;
  }
  else
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v191 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349312;
      *(_QWORD *)&buf[4] = v10;
      v269 = 2050;
      *(double *)v270 = v162;
      _os_log_impl((void *)&_mh_execute_header, v191, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHints,jump in route hint measurement,%{public}.3lf,rejecting", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      *(_DWORD *)v250 = 134349312;
      *(_QWORD *)&v250[4] = v10;
      *(_WORD *)&v250[12] = 2050;
      *(double *)&v250[14] = v162;
      LODWORD(v216) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,routeHints,jump in route hint measurement,%{public}.3lf,rejecting", v250, v216);
      v209 = (char *)v208;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, const MMSnapData &)", "%s\n", v208);
      if (v209 != buf)
        free(v209);
      v5 = v221;
    }
    v192 = *(_QWORD *)(v5 + 1912);
    v193 = *(_QWORD *)(v5 + 1904);
    if (v192 != v193)
    {
      do
      {
        v194 = v192 - 264;
        sub_100261F44(v192 - 56);
        v192 = v194;
      }
      while (v194 != v193);
    }
    v23 = 0;
    *(_QWORD *)(v5 + 1912) = v193;
  }
LABEL_301:
  *(_QWORD *)buf = &v231;
  sub_10083CB88((void ***)buf);
LABEL_302:
  v197 = v235;
  if (v235)
  {
    v198 = (unint64_t *)&v235->__shared_owners_;
    do
      v199 = __ldaxr(v198);
    while (__stlxr(v199 - 1, v198));
    if (!v199)
    {
      ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
      std::__shared_weak_count::__release_weak(v197);
    }
  }
  return v23;
}

void sub_10129797C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,char a41)
{
  sub_1001A5CBC(&a30);
  sub_100F5EA24((uint64_t)&STACK[0x270]);
  STACK[0x2E0] = (unint64_t)&a38;
  sub_10083CB88((void ***)&STACK[0x2E0]);
  sub_100261F44((uint64_t)&a41);
  _Unwind_Resume(a1);
}

BOOL sub_101297A84(uint64_t a1, uint64_t a2, uint64_t a3, BOOL *a4)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _BOOL4 v13;
  _QWORD **v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  int v19;
  double v20;
  double v21;
  int v22;
  double v23;
  double v24;
  _BOOL4 v25;
  int v26;
  BOOL v27;
  NSObject *v28;
  _BOOL8 v29;
  uint64_t v30;
  double v31;
  double v32;
  int v33;
  double v34;
  int v35;
  double v36;
  uint64_t v37;
  double v38;
  double v39;
  BOOL v40;
  int v41;
  double v42;
  double v43;
  NSObject *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BOOL4 v48;
  int v49;
  int v50;
  char v51;
  int v52;
  NSObject *v53;
  uint64_t v54;
  int v55;
  double v56;
  double v57;
  BOOL v58;
  int v59;
  double v60;
  NSObject *v61;
  uint64_t v62;
  int v63;
  double v64;
  double v65;
  char v66;
  NSObject *v67;
  uint64_t v68;
  int v69;
  int v70;
  double v71;
  BOOL v72;
  double v73;
  double v74;
  NSObject *v75;
  uint64_t v76;
  double v77;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  NSObject *v85;
  uint64_t v86;
  int v87;
  double v88;
  NSObject *v89;
  uint64_t v90;
  int v91;
  double v92;
  NSObject *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  const char *v98;
  char *v99;
  double v100;
  double v101;
  double v102;
  NSObject *v103;
  uint64_t v104;
  int v105;
  NSObject *v106;
  uint64_t v107;
  int v108;
  char v109;
  NSObject *v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  int v114;
  const char *v115;
  char *v116;
  int v117;
  _BYTE *v118;
  NSObject *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  NSObject *v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  double v134;
  double v135;
  double v136;
  float v137;
  float v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _BOOL4 v142;
  const char *v143;
  char *v144;
  uint64_t v145;
  int v146;
  const char *v147;
  char *v148;
  const char *v149;
  char *v150;
  uint64_t v151;
  const char *v152;
  char *v153;
  uint64_t v154;
  int v155;
  const char *v156;
  char *v157;
  uint64_t v158;
  int v159;
  const char *v160;
  char *v161;
  uint64_t v162;
  int v163;
  const char *v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  const char *v174;
  char *v175;
  uint64_t v176;
  int v177;
  const char *v178;
  uint64_t v179;
  int v180;
  const char *v181;
  char *v182;
  uint64_t v183;
  const char *v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  void **v189;
  char *v190;
  char *v191;
  uint64_t v192;
  void *__dst[2];
  uint64_t v194;
  uint64_t v195;
  std::__shared_weak_count *v196;
  _BYTE __p[34];
  _BYTE v198[30];
  uint64_t v199;
  __int16 v200;
  uint64_t v201;
  __int16 v202;
  uint64_t v203;
  __int16 v204;
  uint64_t v205;
  __int16 v206;
  double v207;
  __int16 v208;
  double v209;
  _BYTE buf[34];
  _BYTE v211[30];
  uint64_t v212;
  __int16 v213;
  uint64_t v214;
  __int16 v215;
  uint64_t v216;
  __int16 v217;
  uint64_t v218;
  __int16 v219;
  double v220;
  __int16 v221;
  double v222;

  v8 = *(_QWORD *)(a2 + 248);
  *a4 = 0;
  v10 = *(_QWORD *)(a1 + 208);
  v9 = *(std::__shared_weak_count **)(a1 + 216);
  v195 = v10;
  v196 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  if (v10)
  {
    v13 = sub_1002199F0(a1 + 1832, *(double *)(a2 + 264), 6.0);
    if (!v13 || (v14 = (_QWORD **)(a2 + 120), (v15 = *(_QWORD *)(a2 + 120)) == 0))
    {
      v25 = 0;
      v27 = 0;
      goto LABEL_47;
    }
    v16 = 15.0;
    v17 = 25.0;
    if (*(_BYTE *)(a1 + 12))
    {
      v17 = 15.0;
      v16 = 5.0;
    }
    if (*(double *)(v15 + 96) * 1.5 >= 0.0)
      v16 = *(double *)(v15 + 96) * 1.5;
    if (v17 >= v16)
      v18 = v16;
    else
      v18 = v17;
    v19 = *(unsigned __int8 *)(a2 + 140);
    v20 = *(double *)(a2 + 168);
    sub_1004078E0(*(_QWORD **)(a2 + 120));
    v21 = 1.0 - v20;
    if (!v19)
      v21 = v20;
    v22 = *(unsigned __int8 *)(a2 + 140);
    v23 = *(double *)(a2 + 168);
    if (v21 * *(double *)(v15 + 40) >= v18)
    {
      v24 = 1.0 - v23;
      if (*(_BYTE *)(a2 + 140))
        v24 = *(double *)(a2 + 168);
      if (v24 < 0.99)
      {
        v25 = 0;
        v26 = 0;
LABEL_41:
        if (*(_BYTE *)(a1 + 12))
        {
          v35 = *(unsigned __int8 *)(a2 + 140);
          v36 = *(double *)(a2 + 168);
          v37 = *(_QWORD *)(a2 + 120);
          sub_1004078E0((_QWORD *)v37);
          v38 = 1.0 - v36;
          if (!v35)
            v38 = v36;
          if (v38 * *(double *)(v37 + 40) < v18)
          {
            v26 = 1;
            *a4 = 1;
          }
        }
        v27 = v26 != 0;
LABEL_47:
        *a4 = v27;
        v39 = *(double *)(a2 + 480);
        if (*(_BYTE *)(a2 + 760))
          v40 = 1;
        else
          v40 = *(_BYTE *)(a2 + 232) == 0;
        v41 = !v40;
        v42 = fabs(*(double *)(a3 + 480));
        if (*(_BYTE *)(a3 + 504))
          v43 = v42;
        else
          v43 = -1.0;
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
        v44 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          v45 = *(_QWORD *)(a2 + 248);
          v46 = *(_QWORD *)(a2 + 472);
          v47 = *(_QWORD *)(a2 + 496);
          v48 = *a4;
          *(_DWORD *)buf = 134350592;
          *(_QWORD *)&buf[4] = v45;
          *(_WORD *)&buf[12] = 2050;
          *(double *)&buf[14] = v39;
          *(_WORD *)&buf[22] = 2050;
          *(double *)&buf[24] = v43;
          *(_WORD *)&buf[32] = 1026;
          *(_DWORD *)v211 = v41;
          *(_WORD *)&v211[4] = 2050;
          *(_QWORD *)&v211[6] = v46;
          *(_WORD *)&v211[14] = 2050;
          *(_QWORD *)&v211[16] = v47;
          *(_WORD *)&v211[24] = 1026;
          *(_DWORD *)&v211[26] = v48;
          _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,evaluateMatch,oldOffRoadCount,fabsDeltaAz,%{public}.2lf,priorFabsDeltaAz,%{public}.2lf,atIntersection,%{public}d,varFactor,%{public}.2lf,acrossTrack,%{public}.2lf,isAmbiguous,%{public}d", buf, 0x40u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
          v139 = *(_QWORD *)(a2 + 248);
          v140 = *(_QWORD *)(a2 + 472);
          v141 = *(_QWORD *)(a2 + 496);
          v142 = *a4;
          *(_DWORD *)__p = 134350592;
          *(_QWORD *)&__p[4] = v139;
          *(_WORD *)&__p[12] = 2050;
          *(double *)&__p[14] = v39;
          *(_WORD *)&__p[22] = 2050;
          *(double *)&__p[24] = v43;
          *(_WORD *)&__p[32] = 1026;
          *(_DWORD *)v198 = v41;
          *(_WORD *)&v198[4] = 2050;
          *(_QWORD *)&v198[6] = v140;
          *(_WORD *)&v198[14] = 2050;
          *(_QWORD *)&v198[16] = v141;
          *(_WORD *)&v198[24] = 1026;
          *(_DWORD *)&v198[26] = v142;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,evaluateMatch,oldOffRoadCount,fabsDeltaAz,%{public}.2lf,priorFabsDeltaAz,%{public}.2lf,atIntersection,%{public}d,varFactor,%{public}.2lf,acrossTrack,%{public}.2lf,isAmbiguous,%{public}d", __p, 64);
          v144 = (char *)v143;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::evaluateMatch(const MMSnapData &, const MMSnapData &, BOOL &)", "%s\n", v143);
          if (v144 != buf)
            free(v144);
        }
        v49 = (int)*(double *)(a2 + 472);
        if (v39 < 25.0)
          v50 = 1;
        else
          v50 = v41;
        if (v50 == 1)
        {
          v51 = 0;
          v52 = 0;
          switch(v49)
          {
            case 0:
            case 1:
            case 2:
              goto LABEL_69;
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
              break;
            case 13:
              goto LABEL_70;
            case 14:
              goto LABEL_71;
            case 15:
            case 16:
              goto LABEL_67;
            case 17:
            case 18:
            case 19:
            case 20:
              goto LABEL_68;
            default:
              goto LABEL_72;
          }
        }
        else
        {
          v51 = 0;
          v52 = 0;
          switch(v49)
          {
            case 0:
            case 1:
            case 2:
LABEL_69:
              v51 = 0;
              v52 = -1;
              break;
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
              break;
            case 8:
            case 9:
            case 10:
LABEL_70:
              v51 = 1;
              v52 = 1;
              break;
            case 11:
            case 12:
LABEL_71:
              v52 = 2;
              goto LABEL_73;
            case 13:
            case 14:
            case 15:
            case 16:
LABEL_67:
              v52 = 3;
              goto LABEL_73;
            case 17:
            case 18:
            case 19:
            case 20:
LABEL_68:
              v52 = 4;
              goto LABEL_73;
            default:
LABEL_72:
              v52 = 10;
LABEL_73:
              v51 = 1;
              break;
          }
        }
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
        v53 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          v54 = *(_QWORD *)(a2 + 248);
          v55 = *(_DWORD *)(a1 + 1208);
          *(_DWORD *)buf = 134349568;
          *(_QWORD *)&buf[4] = v54;
          *(_WORD *)&buf[12] = 1026;
          *(_DWORD *)&buf[14] = v55;
          *(_WORD *)&buf[18] = 1026;
          *(_DWORD *)&buf[20] = v55 + v52;
          _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,varFactorCheck,oldOffRoadCount,%{public}d,newOffRoadCount,%{public}d", buf, 0x18u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
          v145 = *(_QWORD *)(a2 + 248);
          v146 = *(_DWORD *)(a1 + 1208);
          *(_DWORD *)__p = 134349568;
          *(_QWORD *)&__p[4] = v145;
          *(_WORD *)&__p[12] = 1026;
          *(_DWORD *)&__p[14] = v146;
          *(_WORD *)&__p[18] = 1026;
          *(_DWORD *)&__p[20] = v146 + v52;
          LODWORD(v192) = 24;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,varFactorCheck,oldOffRoadCount,%{public}d,newOffRoadCount,%{public}d", __p, v192);
          v148 = (char *)v147;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::evaluateMatch(const MMSnapData &, const MMSnapData &, BOOL &)", "%s\n", v147);
          if (v148 != buf)
            free(v148);
        }
        *(_DWORD *)(a1 + 1208) = (*(_DWORD *)(a1 + 1208) + v52) & ~((*(_DWORD *)(a1 + 1208) + v52) >> 31);
        v56 = *(double *)(a2 + 432);
        if (v56 <= 0.0
          || *(double *)(a2 + 344) < 0.0
          || *(double *)(a2 + 424) > 0.0
          && ((v57 = *(double *)(a2 + 336), v57 < 0.001) ? (v58 = v57 < 0.0) : (v58 = 1), !v58)
          || *(_BYTE *)(a2 + 468)
          || fabs(*(double *)(a2 + 496)) <= 25.0)
        {
LABEL_113:
          v64 = sub_10130AA74((double *)(a2 + 240));
          if (v64 >= 10.0)
            v65 = v64;
          else
            v65 = 10.0;
          if (v65 >= 50.0)
            v66 = 1;
          else
            v66 = v51;
          if ((v66 & 1) == 0)
          {
            if (fabs(*(double *)(a2 + 496)) <= 75.0 && fabs(*(double *)(a2 + 488)) <= 150.0)
            {
              v51 = 0;
            }
            else
            {
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
              v67 = qword_1022A00D8;
              if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
              {
                v68 = *(_QWORD *)(a2 + 248);
                v69 = *(_DWORD *)(a1 + 1208);
                *(_DWORD *)buf = 134349568;
                *(_QWORD *)&buf[4] = v68;
                *(_WORD *)&buf[12] = 1026;
                *(_DWORD *)&buf[14] = v69;
                *(_WORD *)&buf[18] = 1026;
                *(_DWORD *)&buf[20] = v69 + 1;
                _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,courseCheck,oldOffRoadCount,%{public}d,newOffRoadCount,%{public}d", buf, 0x18u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A00D0 != -1)
                  dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
                v154 = *(_QWORD *)(a2 + 248);
                v155 = *(_DWORD *)(a1 + 1208);
                *(_DWORD *)__p = 134349568;
                *(_QWORD *)&__p[4] = v154;
                *(_WORD *)&__p[12] = 1026;
                *(_DWORD *)&__p[14] = v155;
                *(_WORD *)&__p[18] = 1026;
                *(_DWORD *)&__p[20] = v155 + 1;
                LODWORD(v192) = 24;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,courseCheck,oldOffRoadCount,%{public}d,newOffRoadCount,%{public}d", __p, v192);
                v157 = (char *)v156;
                sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::evaluateMatch(const MMSnapData &, const MMSnapData &, BOOL &)", "%s\n", v156);
                if (v157 != buf)
                  free(v157);
              }
              ++*(_DWORD *)(a1 + 1208);
              v51 = 1;
            }
          }
          if (*(_BYTE *)(a2 + 601))
            v70 = v41;
          else
            v70 = 1;
          v71 = 40000.0;
          if (v70)
            v71 = 10000.0;
          if (*(_BYTE *)(a3 + 601))
            v72 = *(_BYTE *)(a3 + 504) == 0;
          else
            v72 = 1;
          if (v72)
            v73 = 10000.0;
          else
            v73 = v71;
          v74 = *(double *)(a2 + 496) * *(double *)(a2 + 496) + *(double *)(a2 + 488) * *(double *)(a2 + 488);
          if (v74 > v73)
          {
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
            v75 = qword_1022A00D8;
            if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
            {
              v76 = *(_QWORD *)(a2 + 248);
              *(_DWORD *)buf = 134349568;
              *(_QWORD *)&buf[4] = v76;
              *(_WORD *)&buf[12] = 2050;
              *(_QWORD *)&buf[14] = sqrt(v73);
              *(_WORD *)&buf[22] = 1026;
              *(_DWORD *)&buf[24] = v41;
              _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,stopSnapping,distance > %{public}.0lfm,Intersection,%{public}d", buf, 0x1Cu);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
              v151 = *(_QWORD *)(a2 + 248);
              *(_DWORD *)__p = 134349568;
              *(_QWORD *)&__p[4] = v151;
              *(_WORD *)&__p[12] = 2050;
              *(_QWORD *)&__p[14] = sqrt(v73);
              *(_WORD *)&__p[22] = 1026;
              *(_DWORD *)&__p[24] = v41;
              LODWORD(v192) = 28;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,stopSnapping,distance > %{public}.0lfm,Intersection,%{public}d", __p, v192);
              v153 = (char *)v152;
              sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::evaluateMatch(const MMSnapData &, const MMSnapData &, BOOL &)", "%s\n", v152);
              if (v153 != buf)
                free(v153);
            }
            v29 = 0;
            *(_BYTE *)(a1 + 1212) = 0;
            goto LABEL_247;
          }
          v77 = *(double *)(a2 + 336);
          if (v77 < 0.0 || *(double *)(a2 + 424) <= 0.0)
            v79 = *(double *)(a2 + 336);
          else
            v79 = (v77 + *(double *)(a3 + 336)) * 0.5;
          v80 = *(double *)(a2 + 264);
          v81 = -1.0;
          if (v80 >= 0.0)
          {
            v82 = *(double *)(a3 + 264);
            if (v82 >= 0.0)
              v81 = vabdd_f64(v80, v82);
          }
          if (*(_BYTE *)(a3 + 504))
          {
            if (*(_BYTE *)(a1 + 1212))
            {
              if (*(double *)(a2 + 472) > 13.0)
              {
                v83 = v79 * v81;
                v84 = sub_10011E634((double *)(a1 + 168), *(double *)(a3 + 392), *(double *)(a3 + 400), *(double *)(a2 + 392), *(double *)(a2 + 400), *(double *)(a2 + 312))- v83;
                if (v84 > 100.0)
                {
                  if (qword_1022A00D0 != -1)
                    dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
                  v85 = qword_1022A00D8;
                  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
                  {
                    v86 = *(_QWORD *)(a2 + 248);
                    v87 = *(_DWORD *)(a1 + 1208);
                    *(_DWORD *)buf = 134350080;
                    *(_QWORD *)&buf[4] = v86;
                    *(_WORD *)&buf[12] = 2050;
                    *(double *)&buf[14] = v84;
                    *(_WORD *)&buf[22] = 2050;
                    *(double *)&buf[24] = v83;
                    *(_WORD *)&buf[32] = 1026;
                    *(_DWORD *)v211 = v87;
                    *(_WORD *)&v211[4] = 1026;
                    *(_DWORD *)&v211[6] = v87 + 18;
                    _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,jumpDistanceCheck,%{public}.1lf,expectedDistanceTravelled,%{public}.1lf,oldOffRoadCount,%{public}d,newOffRoadCount,%{public}d", buf, 0x2Cu);
                  }
                  if (sub_1001BFF7C(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1022A00D0 != -1)
                      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
                    v162 = *(_QWORD *)(a2 + 248);
                    v163 = *(_DWORD *)(a1 + 1208);
                    *(_DWORD *)__p = 134350080;
                    *(_QWORD *)&__p[4] = v162;
                    *(_WORD *)&__p[12] = 2050;
                    *(double *)&__p[14] = v84;
                    *(_WORD *)&__p[22] = 2050;
                    *(double *)&__p[24] = v83;
                    *(_WORD *)&__p[32] = 1026;
                    *(_DWORD *)v198 = v163;
                    *(_WORD *)&v198[4] = 1026;
                    *(_DWORD *)&v198[6] = v163 + 18;
                    LODWORD(v192) = 44;
                    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,jumpDistanceCheck,%{public}.1lf,expectedDistanceTravelled,%{public}.1lf,oldOffRoadCount,%{public}d,newOffRoadCount,%{public}d", __p, v192);
                    v165 = (char *)v164;
                    sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::evaluateMatch(const MMSnapData &, const MMSnapData &, BOOL &)", "%s\n", v164);
                    if (v165 != buf)
                      free(v165);
                  }
                  *(_DWORD *)(a1 + 1208) += 18;
                  v51 = 1;
                }
              }
            }
          }
          if (v25 && v13)
          {
            v88 = *(_BYTE *)(a2 + 140) ? *(double *)(a2 + 168) : 1.0 - *(double *)(a2 + 168);
            if (v88 >= 0.99)
            {
              *(_DWORD *)(a1 + 1208) += (int)(v88 * 10.0);
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
              v89 = qword_1022A00D8;
              if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
              {
                v90 = *(_QWORD *)(a2 + 248);
                v91 = *(_DWORD *)(a1 + 1208);
                *(_DWORD *)buf = 134349824;
                *(_QWORD *)&buf[4] = v90;
                *(_WORD *)&buf[12] = 1026;
                *(_DWORD *)&buf[14] = v91;
                *(_WORD *)&buf[18] = 2050;
                *(double *)&buf[20] = v88;
                *(_WORD *)&buf[28] = 1026;
                *(_DWORD *)&buf[30] = (int)(v88 * 10.0);
                _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,evalauteMatch,offRoadCount,%{public}d,projection,%{public}.2lf,delta,%{public}d", buf, 0x22u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A00D0 != -1)
                  dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
                v158 = *(_QWORD *)(a2 + 248);
                v159 = *(_DWORD *)(a1 + 1208);
                *(_DWORD *)__p = 134349824;
                *(_QWORD *)&__p[4] = v158;
                *(_WORD *)&__p[12] = 1026;
                *(_DWORD *)&__p[14] = v159;
                *(_WORD *)&__p[18] = 2050;
                *(double *)&__p[20] = v88;
                *(_WORD *)&__p[28] = 1026;
                *(_DWORD *)&__p[30] = (int)(v88 * 10.0);
                LODWORD(v192) = 34;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,evalauteMatch,offRoadCount,%{public}d,projection,%{public}.2lf,delta,%{public}d", __p, v192);
                v161 = (char *)v160;
                sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::evaluateMatch(const MMSnapData &, const MMSnapData &, BOOL &)", "%s\n", v160);
                if (v161 != buf)
                  free(v161);
              }
              v51 = 1;
            }
          }
          if (*(_BYTE *)(a1 + 1212))
          {
            v92 = *(double *)(a2 + 472);
            if (v92 <= 70.0)
            {
              if (*(int *)(a1 + 1208) < 18)
              {
                if (v92 >= 6.5)
                  v109 = 1;
                else
                  v109 = v51;
                if ((v109 & 1) == 0)
                {
                  *(_DWORD *)(a1 + 1208) = 0;
                  if (qword_1022A00D0 != -1)
                    dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
                  v110 = qword_1022A00D8;
                  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
                  {
                    v111 = *(_QWORD *)(a2 + 248);
                    v112 = *(_DWORD *)(a1 + 1208);
                    *(_DWORD *)buf = 134349312;
                    *(_QWORD *)&buf[4] = v111;
                    *(_WORD *)&buf[12] = 1026;
                    *(_DWORD *)&buf[14] = v112;
                    _os_log_impl((void *)&_mh_execute_header, v110, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,reseting offRoadCount,%{public}d", buf, 0x12u);
                  }
                  if (sub_1001BFF7C(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1022A00D0 != -1)
                      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
                    v113 = *(_QWORD *)(a2 + 248);
                    v114 = *(_DWORD *)(a1 + 1208);
                    *(_DWORD *)__p = 134349312;
                    *(_QWORD *)&__p[4] = v113;
                    *(_WORD *)&__p[12] = 1026;
                    *(_DWORD *)&__p[14] = v114;
                    LODWORD(v192) = 18;
                    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,reseting offRoadCount,%{public}d", __p, v192);
                    v116 = (char *)v115;
                    sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::evaluateMatch(const MMSnapData &, const MMSnapData &, BOOL &)", "%s\n", v115);
                    if (v116 != buf)
                      free(v116);
                  }
                }
                goto LABEL_246;
              }
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
              v106 = qword_1022A00D8;
              if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
              {
                v107 = *(_QWORD *)(a2 + 248);
                v108 = *(_DWORD *)(a1 + 1208);
                *(_DWORD *)buf = 134349568;
                *(_QWORD *)&buf[4] = v107;
                *(_WORD *)&buf[12] = 1026;
                *(_DWORD *)&buf[14] = v108;
                *(_WORD *)&buf[18] = 1026;
                *(_DWORD *)&buf[20] = 18;
                _os_log_impl((void *)&_mh_execute_header, v106, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,stopSnapping,offRoadCount,%{public}d,threshold,%{public}d", buf, 0x18u);
              }
              if (!sub_1001BFF7C(115, 2))
                goto LABEL_206;
              bzero(buf, 0x65CuLL);
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
              v176 = *(_QWORD *)(a2 + 248);
              v177 = *(_DWORD *)(a1 + 1208);
              *(_DWORD *)__p = 134349568;
              *(_QWORD *)&__p[4] = v176;
              *(_WORD *)&__p[12] = 1026;
              *(_DWORD *)&__p[14] = v177;
              *(_WORD *)&__p[18] = 1026;
              *(_DWORD *)&__p[20] = 18;
              LODWORD(v192) = 24;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,stopSnapping,offRoadCount,%{public}d,threshold,%{public}d", __p, v192);
              v99 = (char *)v178;
              sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::evaluateMatch(const MMSnapData &, const MMSnapData &, BOOL &)", "%s\n", v178);
            }
            else
            {
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
              v93 = qword_1022A00D8;
              if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
              {
                v94 = *(_QWORD *)(a2 + 248);
                v95 = *(_QWORD *)(a2 + 472);
                *(_DWORD *)buf = 134349568;
                *(_QWORD *)&buf[4] = v94;
                *(_WORD *)&buf[12] = 2050;
                *(_QWORD *)&buf[14] = v95;
                *(_WORD *)&buf[22] = 2050;
                *(_QWORD *)&buf[24] = 0x4051800000000000;
                _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,stopSnapping,varFactor,%{public}.1lf,threshold,%{public}.1lf", buf, 0x20u);
              }
              if (!sub_1001BFF7C(115, 2))
                goto LABEL_206;
              bzero(buf, 0x65CuLL);
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
              v96 = *(_QWORD *)(a2 + 248);
              v97 = *(_QWORD *)(a2 + 472);
              *(_DWORD *)__p = 134349568;
              *(_QWORD *)&__p[4] = v96;
              *(_WORD *)&__p[12] = 2050;
              *(_QWORD *)&__p[14] = v97;
              *(_WORD *)&__p[22] = 2050;
              *(_QWORD *)&__p[24] = 0x4051800000000000;
              LODWORD(v192) = 32;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,stopSnapping,varFactor,%{public}.1lf,threshold,%{public}.1lf", __p, v192);
              v99 = (char *)v98;
              sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::evaluateMatch(const MMSnapData &, const MMSnapData &, BOOL &)", "%s\n", v98);
            }
            if (v99 != buf)
              free(v99);
LABEL_206:
            *(_BYTE *)(a1 + 1212) = 0;
            goto LABEL_246;
          }
          if ((v51 & 1) != 0)
          {
LABEL_246:
            v29 = *(_BYTE *)(a1 + 1212) != 0;
            goto LABEL_247;
          }
          v100 = 13.5;
          if (*(_BYTE *)(a2 + 588))
            v100 = 7.5;
          if (v64 > 7.5)
            v101 = 20.0;
          else
            v101 = v100;
          v102 = 30.0;
          if (v13)
          {
            if (*(_DWORD *)(a2 + 360) == 9)
            {
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
              v103 = qword_1022A00D8;
              if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
              {
                v104 = *(_QWORD *)(a2 + 248);
                v105 = *(_DWORD *)(a2 + 360);
                if (*(char *)(a2 + 391) < 0)
                {
                  sub_100115CE4(__p, *(void **)(a2 + 368), *(_QWORD *)(a2 + 376));
                }
                else
                {
                  *(_OWORD *)__p = *(_OWORD *)(a2 + 368);
                  *(_QWORD *)&__p[16] = *(_QWORD *)(a2 + 384);
                }
                v118 = __p;
                if (__p[23] < 0)
                  v118 = *(_BYTE **)__p;
                *(_DWORD *)buf = 134349570;
                *(_QWORD *)&buf[4] = v104;
                *(_WORD *)&buf[12] = 1026;
                *(_DWORD *)&buf[14] = v105;
                *(_WORD *)&buf[18] = 2082;
                *(_QWORD *)&buf[20] = v118;
                _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,startSnapping,shouldStartSnappingOnfrc,frc,%{public}d,name,%{public}s,using tighter-threshold", buf, 0x1Cu);
                if ((__p[23] & 0x80000000) != 0)
                  operator delete(*(void **)__p);
              }
              v101 = 5.0;
              v102 = 8.0;
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A00D0 != -1)
                  dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
                v186 = qword_1022A00D8;
                v187 = *(_QWORD *)(a2 + 248);
                v188 = *(_DWORD *)(a2 + 360);
                if (*(char *)(a2 + 391) < 0)
                {
                  sub_100115CE4(__dst, *(void **)(a2 + 368), *(_QWORD *)(a2 + 376));
                }
                else
                {
                  *(_OWORD *)__dst = *(_OWORD *)(a2 + 368);
                  v194 = *(_QWORD *)(a2 + 384);
                }
                v189 = __dst;
                if (v194 < 0)
                  v189 = (void **)__dst[0];
                *(_DWORD *)__p = 134349570;
                *(_QWORD *)&__p[4] = v187;
                *(_WORD *)&__p[12] = 1026;
                *(_DWORD *)&__p[14] = v188;
                *(_WORD *)&__p[18] = 2082;
                *(_QWORD *)&__p[20] = v189;
                LODWORD(v192) = 28;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v186, 2, "CLMMPED,%{public}.1lf,startSnapping,shouldStartSnappingOnfrc,frc,%{public}d,name,%{public}s,using tighter-threshold", __p, v192);
                v191 = v190;
                if (SHIBYTE(v194) < 0)
                  operator delete(__dst[0]);
                sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::evaluateMatch(const MMSnapData &, const MMSnapData &, BOOL &)", "%s\n", v191);
                if (v191 != buf)
                  free(v191);
              }
            }
            else
            {
              v117 = *(_DWORD *)(a2 + 656);
              if (v117 != 3)
              {
                v102 = v117 == 4 ? 30.0 : 18.0;
                if (v117 != 4)
                  v101 = 6.0;
              }
            }
          }
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
          v119 = qword_1022A00D8;
          if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
          {
            v120 = *(_QWORD *)(a2 + 248);
            v121 = *(_QWORD *)(a2 + 496);
            v122 = *(_QWORD *)(a2 + 472);
            v123 = *(_QWORD *)(a3 + 472);
            v124 = *(_QWORD *)(a2 + 336);
            v125 = *(_QWORD *)(a2 + 344);
            v126 = *(_QWORD *)(a3 + 336);
            v127 = *(_QWORD *)(a3 + 344);
            *(_DWORD *)buf = 134351872;
            *(_QWORD *)&buf[4] = v120;
            *(_WORD *)&buf[12] = 2050;
            *(double *)&buf[14] = v74;
            *(_WORD *)&buf[22] = 2050;
            *(_QWORD *)&buf[24] = v121;
            *(_WORD *)&buf[32] = 2050;
            *(double *)v211 = v65;
            *(_WORD *)&v211[8] = 2050;
            *(_QWORD *)&v211[10] = v122;
            *(_WORD *)&v211[18] = 2048;
            *(_QWORD *)&v211[20] = v123;
            *(_WORD *)&v211[28] = 2050;
            v212 = v124;
            v213 = 2050;
            v214 = v126;
            v215 = 2050;
            v216 = v125;
            v217 = 2050;
            v218 = v127;
            v219 = 2050;
            v220 = v39;
            v221 = 2050;
            v222 = v43;
            _os_log_impl((void *)&_mh_execute_header, v119, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,startSnapping criteria,distance2,%{public}.1lf,acrossTrack,%{public}.2lf,drms,%{public}.1lf,currentVF,%{public}.3lf,prioVF{public},%.3lf,curSpeed,%{public}.2lf,priorSpeed,%{public}.2lf,curCourse,%{public}.2lf,priorCourse,%{public}.2lf,fabsDeltaAz,%{public}.2lf,priorFabsDeltaAz,%{public}.2lf", buf, 0x7Au);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
            v166 = *(_QWORD *)(a2 + 248);
            v167 = *(_QWORD *)(a2 + 496);
            v168 = *(_QWORD *)(a2 + 472);
            v169 = *(_QWORD *)(a3 + 472);
            v170 = *(_QWORD *)(a2 + 336);
            v171 = *(_QWORD *)(a2 + 344);
            v172 = *(_QWORD *)(a3 + 336);
            v173 = *(_QWORD *)(a3 + 344);
            *(_DWORD *)__p = 134351872;
            *(_QWORD *)&__p[4] = v166;
            *(_WORD *)&__p[12] = 2050;
            *(double *)&__p[14] = v74;
            *(_WORD *)&__p[22] = 2050;
            *(_QWORD *)&__p[24] = v167;
            *(_WORD *)&__p[32] = 2050;
            *(double *)v198 = v65;
            *(_WORD *)&v198[8] = 2050;
            *(_QWORD *)&v198[10] = v168;
            *(_WORD *)&v198[18] = 2048;
            *(_QWORD *)&v198[20] = v169;
            *(_WORD *)&v198[28] = 2050;
            v199 = v170;
            v200 = 2050;
            v201 = v172;
            v202 = 2050;
            v203 = v171;
            v204 = 2050;
            v205 = v173;
            v206 = 2050;
            v207 = v39;
            v208 = 2050;
            v209 = v43;
            LODWORD(v192) = 122;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,startSnapping criteria,distance2,%{public}.1lf,acrossTrack,%{public}.2lf,drms,%{public}.1lf,currentVF,%{public}.3lf,prioVF{public},%.3lf,curSpeed,%{public}.2lf,priorSpeed,%{public}.2lf,curCourse,%{public}.2lf,priorCourse,%{public}.2lf,fabsDeltaAz,%{public}.2lf,priorFabsDeltaAz,%{public}.2lf", __p, v192);
            v175 = (char *)v174;
            sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::evaluateMatch(const MMSnapData &, const MMSnapData &, BOOL &)", "%s\n", v174);
            if (v175 != buf)
              free(v175);
          }
          if (*(_BYTE *)(a2 + 505))
            goto LABEL_239;
          if (v74 >= 400.0)
            goto LABEL_239;
          if (*(_BYTE *)(a3 + 505))
            goto LABEL_239;
          if (fabs(*(double *)(a2 + 496)) >= v101)
            goto LABEL_239;
          if (v65 >= 101.0)
            goto LABEL_239;
          v134 = *(double *)(a2 + 472);
          if (v134 >= 3.0)
            goto LABEL_239;
          v135 = *(double *)(a3 + 472);
          if (v135 >= 3.0
            || *(double *)(a2 + 336) <= 0.25
            || *(double *)(a3 + 336) <= 0.25
            || *(double *)(a2 + 344) < 0.0
            || *(double *)(a3 + 344) < 0.0
            || v39 >= v102
            || v43 >= v102)
          {
            goto LABEL_239;
          }
          v136 = *(double *)(a2 + 432);
          if (v136 >= 20.0 || v136 <= 0.0)
          {
            v137 = *(float *)(a2 + 420);
            v138 = 3.0;
          }
          else
          {
            if (v39 >= 40.0)
              goto LABEL_239;
            v137 = *(float *)(a2 + 420);
            v138 = 2.5;
          }
          if (v137 > v138 || v134 < 1.0 && v135 < 1.0 && (v137 == 0.0 || v137 > 1.1))
          {
            *(_BYTE *)(a1 + 1212) = 1;
            goto LABEL_240;
          }
LABEL_239:
          if (!*(_BYTE *)(a1 + 1212))
            goto LABEL_246;
LABEL_240:
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
          v128 = qword_1022A00D8;
          if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
          {
            v129 = *(_QWORD *)(a2 + 248);
            *(_DWORD *)buf = 134349056;
            *(_QWORD *)&buf[4] = v129;
            _os_log_impl((void *)&_mh_execute_header, v128, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,startSnapping", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
            v183 = *(_QWORD *)(a2 + 248);
            *(_DWORD *)__p = 134349056;
            *(_QWORD *)&__p[4] = v183;
            LODWORD(v192) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,startSnapping", __p, v192);
            v185 = (char *)v184;
            sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::evaluateMatch(const MMSnapData &, const MMSnapData &, BOOL &)", "%s\n", v184);
            if (v185 != buf)
              free(v185);
          }
          *(_DWORD *)(a1 + 1208) = 0;
          goto LABEL_246;
        }
        if (v41)
        {
          if (v39 <= 67.5)
            goto LABEL_113;
          if (v56 >= 20.0)
          {
            v59 = 4;
LABEL_107:
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
            v61 = qword_1022A00D8;
            if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
            {
              v62 = *(_QWORD *)(a2 + 248);
              v63 = *(_DWORD *)(a1 + 1208);
              *(_DWORD *)buf = 134349568;
              *(_QWORD *)&buf[4] = v62;
              *(_WORD *)&buf[12] = 1026;
              *(_DWORD *)&buf[14] = v63;
              *(_WORD *)&buf[18] = 1026;
              *(_DWORD *)&buf[20] = v63 + v59;
              _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,courseCheck,oldOffRoadCount,%{public}d,newOffRoadCount,%{public}d", buf, 0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
              v179 = *(_QWORD *)(a2 + 248);
              v180 = *(_DWORD *)(a1 + 1208);
              *(_DWORD *)__p = 134349568;
              *(_QWORD *)&__p[4] = v179;
              *(_WORD *)&__p[12] = 1026;
              *(_DWORD *)&__p[14] = v180;
              *(_WORD *)&__p[18] = 1026;
              *(_DWORD *)&__p[20] = v180 + v59;
              LODWORD(v192) = 24;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,courseCheck,oldOffRoadCount,%{public}d,newOffRoadCount,%{public}d", __p, v192);
              v182 = (char *)v181;
              sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::evaluateMatch(const MMSnapData &, const MMSnapData &, BOOL &)", "%s\n", v181);
              if (v182 != buf)
                free(v182);
            }
            *(_DWORD *)(a1 + 1208) += v59;
            v51 = 1;
            goto LABEL_113;
          }
          goto LABEL_100;
        }
        if (v56 >= 20.0)
        {
          if (v39 > 67.5)
            goto LABEL_100;
          if (v39 > 45.0)
            goto LABEL_103;
          v60 = 30.0;
        }
        else
        {
          if (v39 > 67.5)
          {
            v59 = 18;
            goto LABEL_107;
          }
          if (v39 > 45.0)
          {
LABEL_100:
            v59 = 6;
            goto LABEL_107;
          }
          if (v39 > 30.0)
          {
LABEL_103:
            v59 = 2;
            goto LABEL_107;
          }
          v60 = 20.0;
        }
        if (v39 <= v60)
          goto LABEL_113;
        v59 = 1;
        goto LABEL_107;
      }
    }
    v30 = (uint64_t)*v14;
    sub_1004078E0(*v14);
    v31 = 1.0 - v23;
    if (!v22)
      v31 = v23;
    v32 = v31 * *(double *)(v30 + 40);
    *(_QWORD *)buf = buf;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0;
    if (!(*(unsigned int (**)(uint64_t, _BYTE *, uint64_t, _QWORD, uint64_t, double, double))(*(_QWORD *)v10 + 72))(v10, buf, a2 + 120, *(unsigned __int8 *)(a2 + 140), 1, *(double *)(a2 + 168), v32 + 1.0))goto LABEL_35;
    if (*(_QWORD *)&buf[16])
    {
      if (*(_QWORD *)&buf[16] != 1
        || **v14 != *(_QWORD *)(*(_QWORD *)&buf[8] + 16)
        || (v33 = *(unsigned __int8 *)(a2 + 140), v33 == *(unsigned __int8 *)(*(_QWORD *)&buf[8] + 24)))
      {
LABEL_35:
        v25 = 0;
        v26 = 0;
LABEL_40:
        sub_1011048CC((uint64_t *)buf);
        goto LABEL_41;
      }
      v34 = *(double *)(a2 + 168);
    }
    else
    {
      v34 = *(double *)(a2 + 168);
      v33 = *(unsigned __int8 *)(a2 + 140);
    }
    if (!v33)
      v34 = 1.0 - v34;
    v25 = v34 >= 0.99;
    v26 = 1;
    goto LABEL_40;
  }
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
  v28 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134349056;
    *(_QWORD *)&buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,invalid geometry pointer, mapMatch", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    *(_DWORD *)__p = 134349056;
    *(_QWORD *)&__p[4] = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,Unexpected,invalid geometry pointer, mapMatch", __p, 12);
    v150 = (char *)v149;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::evaluateMatch(const MMSnapData &, const MMSnapData &, BOOL &)", "%s\n", v149);
    if (v150 != buf)
      free(v150);
  }
  v29 = 0;
LABEL_247:
  v130 = v196;
  if (v196)
  {
    v131 = (unint64_t *)&v196->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  return v29;
}

void sub_101299A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_101299B84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  BOOL v5;
  double result;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  if (*(_QWORD *)(a2 + 48) != *(_QWORD *)(a2 + 40))
  {
    v4 = (uint64_t *)a1;
    v9 = 0;
    v5 = sub_101297A84(a1, a2 + 136, a3, &v9);
    *(_BYTE *)(a2 + 640) = v5;
    *(_BYTE *)(a2 + 881) = (*(unsigned __int8 *)(a2 + 881) | v9) != 0;
    v4 += 152;
    sub_100F5EA54((uint64_t)v4, (__int128 *)(a2 + 376));
    if (sub_100F5EC98(v4, 0))
    {
      *(_BYTE *)(a2 + 640) = 0;
    }
    else if (v5)
    {
      return result;
    }
    *(_DWORD *)(a2 + 656) = 0;
    result = *(double *)(a2 + 432);
    v7 = *(_QWORD *)(a2 + 440);
    *(double *)(a2 + 528) = result;
    *(_QWORD *)(a2 + 536) = v7;
    v8 = *(_QWORD *)(a2 + 480);
    *(_QWORD *)(a2 + 544) = v8;
    *(double *)(a2 + 664) = result;
    *(_QWORD *)(a2 + 672) = v7;
    *(_QWORD *)(a2 + 680) = v8;
  }
  return result;
}

uint64_t sub_101299C54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  NSObject *v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  NSObject *v24;
  uint64_t v25;
  double v26;
  _BOOL8 v27;
  double v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint8_t *v37;
  _BYTE v38[24];
  uint64_t v39;
  uint8_t buf[4];
  uint64_t v41;
  __int16 v42;
  double v43;
  __int16 v44;
  uint64_t v45;

  if (*(_BYTE *)(a2 + 640))
  {
    *(_DWORD *)(a1 + 1752) = 0;
    *(_OWORD *)(a1 + 1760) = 0u;
    if (sub_10011CE64(*(double *)(a2 + 528), *(double *)(a2 + 536)))
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v6 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        v7 = *(_QWORD *)(a2 + 384);
        *(_DWORD *)buf = 134349056;
        v41 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,reset,snap coordinate is null island", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 2))
        return 1;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v8 = *(_QWORD *)(a2 + 384);
      *(_DWORD *)v38 = 134349056;
      *(_QWORD *)&v38[4] = v8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,reset,snap coordinate is null island", v38, 12, *(_OWORD *)v38, *(_QWORD *)&v38[16], v39);
LABEL_62:
      v37 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::shallReset(const MMFilterData &, const MMSnapData &)", "%s\n", v9);
      if (v37 != buf)
        free(v37);
      return 1;
    }
    if (sub_10129A4B0(a1, a2, a3))
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v15 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        v16 = *(_QWORD *)(a2 + 384);
        *(_DWORD *)buf = 134349056;
        v41 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,reset,solution hopping detected", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 2))
        return 1;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v17 = *(_QWORD *)(a2 + 384);
      *(_DWORD *)v38 = 134349056;
      *(_QWORD *)&v38[4] = v17;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,reset,solution hopping detected", v38, 12, *(_OWORD *)v38, *(_QWORD *)&v38[16], v39);
      goto LABEL_62;
    }
    return 0;
  }
  if (*(double *)(a2 + 608) > 70.0)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v10 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v11 = *(_QWORD *)(a2 + 384);
      v12 = *(double *)(a2 + 608);
      *(_DWORD *)buf = 134349568;
      v41 = v11;
      v42 = 2050;
      v43 = v12;
      v44 = 2050;
      v45 = 0x4051800000000000;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,Reseeding due to varFactor,%{public}.1lf,max,%{public}.1lf", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 1;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v13 = *(_QWORD *)(a2 + 384);
    v14 = *(_QWORD *)(a2 + 608);
    *(_DWORD *)v38 = 134349568;
    *(_QWORD *)&v38[4] = v13;
    *(_WORD *)&v38[12] = 2050;
    *(_QWORD *)&v38[14] = v14;
    *(_WORD *)&v38[22] = 2050;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,Reseeding due to varFactor,%{public}.1lf,max,%{public}.1lf", v38, 32, *(_OWORD *)v38, *(_QWORD *)&v38[16], 0x4051800000000000);
    goto LABEL_62;
  }
  v18 = *(_DWORD *)(a1 + 1752);
  if ((v18 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 1752) = v18 + 1;
    if (v18 >= 0x1E)
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v19 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        v20 = *(_QWORD *)(a2 + 384);
        *(_DWORD *)buf = 134349312;
        v41 = v20;
        v42 = 1026;
        LODWORD(v43) = 30;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,Reseeding as unable to match,max,%{public}d", buf, 0x12u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 1;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v21 = *(_QWORD *)(a2 + 384);
      *(_DWORD *)v38 = 134349312;
      *(_QWORD *)&v38[4] = v21;
      *(_WORD *)&v38[12] = 1026;
      *(_DWORD *)&v38[14] = 30;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,Reseeding as unable to match,max,%{public}d", v38, 18, *(_OWORD *)v38, *(_QWORD *)&v38[16], v39);
      goto LABEL_62;
    }
  }
  if (!*(_BYTE *)(a3 + 746))
    return 0;
  *(double *)(a1 + 1760) = *(double *)(a2 + 856) + *(double *)(a1 + 1760);
  v22 = sub_10011E634((double *)(a1 + 168), *(double *)(a3 + 392), *(double *)(a3 + 400), *(double *)(a2 + 528), *(double *)(a2 + 536), *(double *)(a2 + 448))+ *(double *)(a1 + 1768);
  *(double *)(a1 + 1768) = v22;
  v23 = *(double *)(a1 + 1760);
  if (v23 <= 80.0)
    return 0;
  if (v22 < 0.001)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v24 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v25 = *(_QWORD *)(a2 + 384);
      v26 = *(double *)(a1 + 1768);
      *(_DWORD *)buf = 134349312;
      v41 = v25;
      v42 = 2050;
      v43 = v26;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,accumulated snap distance is ~0, %{public}.3lf", buf, 0x16u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 1;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v35 = *(_QWORD *)(a2 + 384);
    v36 = *(_QWORD *)(a1 + 1768);
    *(_DWORD *)v38 = 134349312;
    *(_QWORD *)&v38[4] = v35;
    *(_WORD *)&v38[12] = 2050;
    *(_QWORD *)&v38[14] = v36;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,accumulated snap distance is ~0, %{public}.3lf", v38, 22, *(_OWORD *)v38, *(_QWORD *)&v38[16], v39);
    goto LABEL_62;
  }
  v29 = v23 / v22;
  v27 = v23 / v22 > 5.0;
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
  v30 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
  {
    v31 = *(_QWORD *)(a2 + 384);
    *(_DWORD *)buf = 134349312;
    v41 = v31;
    v42 = 2050;
    v43 = v29;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,Reseeding due to stuck at dead-end while observations move away, ratioDist, %{public}.3lf", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v32 = *(_QWORD *)(a2 + 384);
    *(_DWORD *)v38 = 134349312;
    *(_QWORD *)&v38[4] = v32;
    *(_WORD *)&v38[12] = 2050;
    *(double *)&v38[14] = v29;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,Reseeding due to stuck at dead-end while observations move away, ratioDist, %{public}.3lf", v38, 22);
    v34 = (uint8_t *)v33;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::shallReset(const MMFilterData &, const MMSnapData &)", "%s\n", v33);
    if (v34 != buf)
      free(v34);
  }
  return v27;
}

BOOL sub_10129A4B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v6;
  BOOL v7;
  uint64_t v8;
  double v9;
  _BOOL8 v10;
  uint64_t *v11;
  BOOL v13;
  uint64_t i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  double *v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  double *v29;
  uint64_t v30;
  double v31;
  double *v32;
  double v33;
  double v34;
  double v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  double v39;
  double v40;
  double v41;
  double *v42;
  double v43;
  uint64_t v44;
  double v45;
  double v46;
  double v47;
  uint64_t v48;
  double v49;
  int v50;
  NSObject *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 *v60;
  __int128 *v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 *v65;
  __int128 *v66;
  uint64_t v67;
  BOOL v68;
  NSObject *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  const char *v85;
  uint8_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  const char *v90;
  uint8_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  const char *v96;
  uint8_t *v97;
  uint64_t v98;
  _QWORD v99[2];
  uint64_t *v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  __int16 v104;
  _BYTE v105[28];
  __int16 v106;
  uint64_t v107;
  uint8_t buf[4];
  uint64_t v109;
  __int16 v110;
  _BYTE v111[28];
  __int16 v112;
  uint64_t v113;

  if (*(_BYTE *)(a2 + 882))
    v6 = *(_BYTE *)(a3 + 746) == 0;
  else
    v6 = 1;
  if (!v6
    && *(_QWORD *)(a3 + 120)
    && *(_QWORD *)(a2 + 256)
    && (sub_10110E724((uint64_t *)(a3 + 120), (uint64_t)buf),
        sub_10110E724((uint64_t *)(a2 + 256), (uint64_t)&v102),
        sub_100F5C3F4((uint64_t)buf, (uint64_t)&v102)))
  {
    ++*(_DWORD *)(a1 + 1776);
  }
  else
  {
    *(_DWORD *)(a1 + 1776) = 0;
  }
  if (*(_BYTE *)(a2 + 640))
    v7 = *(_BYTE *)(a3 + 504) == 0;
  else
    v7 = 1;
  if (v7)
    goto LABEL_20;
  v8 = *(_QWORD *)(a2 + 488);
  if (v8 == *(_QWORD *)(a3 + 352))
    goto LABEL_20;
  v9 = fmod(*(double *)(a2 + 680) - *(double *)(a3 + 544), 360.0);
  if (v9 < 0.0)
    v9 = v9 + 360.0;
  if (v9 > 180.0)
    v9 = v9 + -360.0;
  if (fabs(v9) < 45.0)
  {
LABEL_20:
    sub_1001A5CBC((uint64_t *)(a1 + 1808));
    v10 = 0;
    v11 = (uint64_t *)(a1 + 1784);
  }
  else
  {
    if (*(_QWORD *)(a1 + 1800) || (v15 = *(_QWORD *)(a1 + 1816), v15 == a1 + 1808))
    {
      v13 = 0;
    }
    else
    {
      do
      {
        v13 = v8 == **(_QWORD **)(v15 + 16);
        if (v8 == **(_QWORD **)(v15 + 16))
          break;
        v15 = *(_QWORD *)(v15 + 8);
      }
      while (v15 != a1 + 1808);
    }
    for (i = *(_QWORD *)(a1 + 1792); i != a1 + 1784; i = *(_QWORD *)(i + 8))
    {
      if (v8 == **(_QWORD **)(i + 16))
        goto LABEL_29;
    }
    if (v13)
      goto LABEL_29;
    v16 = *(_QWORD *)(a2 + 256);
    if (v16)
    {
      v17 = *(_QWORD *)(a3 + 120);
      if (v17)
      {
        v18 = *(_QWORD *)(a2 + 264);
        v100 = *(uint64_t **)(a2 + 256);
        v101 = v18;
        if (v18)
        {
          v19 = (unint64_t *)(v18 + 8);
          do
            v20 = __ldxr(v19);
          while (__stxr(v20 + 1, v19));
          v17 = *(_QWORD *)(a3 + 120);
        }
        v21 = *(_QWORD *)(a3 + 128);
        v99[0] = v17;
        v99[1] = v21;
        if (v21)
        {
          v22 = (unint64_t *)(v21 + 8);
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
        }
        v25 = v16 + 136;
        v24 = *(double **)(v16 + 136);
        v26 = 0.0;
        v27 = 0.0;
        v28 = 0.0;
        if (*(double **)(v25 + 8) != v24)
        {
          v27 = *v24;
          v28 = v24[1];
        }
        v30 = v17 + 136;
        v29 = *(double **)(v17 + 136);
        v31 = 0.0;
        if (*(double **)(v30 + 8) != v29)
        {
          v26 = *v29;
          v31 = v29[1];
        }
        if (sub_100512A74(v27, v28, v26, v31, 0.0000001))
          goto LABEL_63;
        v32 = (double *)v100[17];
        v33 = 0.0;
        v34 = 0.0;
        v35 = 0.0;
        if ((double *)v100[18] != v32)
        {
          v34 = *v32;
          v35 = v32[1];
        }
        v36 = *(_QWORD *)(v99[0] + 144);
        v37 = 0.0;
        if (v36 != *(_QWORD *)(v99[0] + 136))
        {
          v33 = *(double *)(v36 - 16);
          v37 = *(double *)(v36 - 8);
        }
        if (sub_100512A74(v34, v35, v33, v37, 0.0000001))
          goto LABEL_63;
        v38 = v100[18];
        v39 = 0.0;
        v40 = 0.0;
        v41 = 0.0;
        if (v38 != v100[17])
        {
          v40 = *(double *)(v38 - 16);
          v41 = *(double *)(v38 - 8);
        }
        v42 = *(double **)(v99[0] + 136);
        v43 = 0.0;
        if (*(double **)(v99[0] + 144) != v42)
        {
          v39 = *v42;
          v43 = v42[1];
        }
        if (sub_100512A74(v40, v41, v39, v43, 0.0000001))
          goto LABEL_63;
        v44 = v100[18];
        v45 = 0.0;
        v46 = 0.0;
        v47 = 0.0;
        if (v44 != v100[17])
        {
          v46 = *(double *)(v44 - 16);
          v47 = *(double *)(v44 - 8);
        }
        v48 = *(_QWORD *)(v99[0] + 144);
        v49 = 0.0;
        if (v48 != *(_QWORD *)(v99[0] + 136))
        {
          v45 = *(double *)(v48 - 16);
          v49 = *(double *)(v48 - 8);
        }
        if (sub_100512A74(v46, v47, v45, v49, 0.0000001))
LABEL_63:
          v50 = 1;
        else
          v50 = 0;
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
        v51 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          v52 = *(_QWORD *)(a2 + 384);
          v53 = *v100;
          v54 = *(_QWORD *)v99[0];
          *(_DWORD *)buf = 134349825;
          v109 = v52;
          v110 = 1026;
          *(_DWORD *)v111 = v50;
          *(_WORD *)&v111[4] = 2049;
          *(_QWORD *)&v111[6] = v53;
          *(_WORD *)&v111[14] = 2049;
          *(_QWORD *)&v111[16] = v54;
          _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,hopping check,connecting roads,%{public}d, current road %{private}lld,prior road %{private}lld", buf, 0x26u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
          v87 = *(_QWORD *)(a2 + 384);
          v88 = *v100;
          v89 = *(_QWORD *)v99[0];
          v102 = 134349825;
          v103 = v87;
          v104 = 1026;
          *(_DWORD *)v105 = v50;
          *(_WORD *)&v105[4] = 2049;
          *(_QWORD *)&v105[6] = v88;
          *(_WORD *)&v105[14] = 2049;
          *(_QWORD *)&v105[16] = v89;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,hopping check,connecting roads,%{public}d, current road %{private}lld,prior road %{private}lld", &v102, 38);
          v91 = (uint8_t *)v90;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::checkForSolutionHopping(const MMFilterData &, const MMSnapData &)", "%s\n", v90);
          if (v91 != buf)
            free(v91);
        }
        sub_100261F44((uint64_t)v99);
        sub_100261F44((uint64_t)&v100);
        if ((v50 & 1) != 0)
          goto LABEL_29;
      }
    }
    v55 = *(_QWORD *)(a3 + 120);
    if (v55)
    {
      v56 = *(_QWORD *)(a2 + 864);
      if (v56)
      {
        v57 = *(_QWORD *)(a3 + 128);
        v100 = *(uint64_t **)(a3 + 120);
        v101 = v57;
        if (v57)
        {
          v58 = (unint64_t *)(v57 + 8);
          do
            v59 = __ldxr(v58);
          while (__stxr(v59 + 1, v58));
          v56 = *(_QWORD *)(a2 + 864);
        }
        v62 = v56 + 136;
        v60 = *(__int128 **)(v56 + 136);
        v61 = *(__int128 **)(v62 + 8);
        v63 = 0uLL;
        v64 = 0uLL;
        if (v61 != v60)
        {
          if (*(_BYTE *)(a2 + 880))
            v64 = *v60;
          else
            v64 = *(v61 - 1);
        }
        v67 = v55 + 136;
        v65 = *(__int128 **)(v55 + 136);
        v66 = *(__int128 **)(v67 + 8);
        if (v66 != v65)
        {
          if (*(_BYTE *)(a3 + 140))
            v63 = *(v66 - 1);
          else
            v63 = *v65;
        }
        v68 = sub_100512A74(*(double *)&v64, *((double *)&v64 + 1), *(double *)&v63, *((double *)&v63 + 1), 0.0000001);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
        v69 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          v70 = *(_QWORD *)(a2 + 384);
          v71 = *v100;
          v72 = **(_QWORD **)(a2 + 864);
          v73 = **(_QWORD **)(a2 + 256);
          *(_DWORD *)buf = 134349825;
          v109 = v70;
          v110 = 2049;
          *(_QWORD *)v111 = v71;
          *(_WORD *)&v111[8] = 2049;
          *(_QWORD *)&v111[10] = v72;
          *(_WORD *)&v111[18] = 2049;
          *(_QWORD *)&v111[20] = v73;
          _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,hopping check,prior road, %{private}lld, connected to the incoming road, %{private}lld, of the current solution road, %{private}lld", buf, 0x2Au);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
          v92 = *(_QWORD *)(a2 + 384);
          v93 = *v100;
          v94 = **(_QWORD **)(a2 + 864);
          v95 = **(_QWORD **)(a2 + 256);
          v102 = 134349825;
          v103 = v92;
          v104 = 2049;
          *(_QWORD *)v105 = v93;
          *(_WORD *)&v105[8] = 2049;
          *(_QWORD *)&v105[10] = v94;
          *(_WORD *)&v105[18] = 2049;
          *(_QWORD *)&v105[20] = v95;
          LODWORD(v98) = 42;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,hopping check,prior road, %{private}lld, connected to the incoming road, %{private}lld, of the current solution road, %{private}lld", &v102, v98);
          v97 = (uint8_t *)v96;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::checkForSolutionHopping(const MMFilterData &, const MMSnapData &)", "%s\n", v96);
          if (v97 != buf)
            free(v97);
        }
        sub_100261F44((uint64_t)&v100);
        if (v68)
        {
LABEL_29:
          v10 = 0;
          goto LABEL_98;
        }
      }
    }
    v10 = sub_10011E634((double *)(a1 + 168), *(double *)(a3 + 528), *(double *)(a3 + 536), *(double *)(a2 + 664), *(double *)(a2 + 672), *(double *)(a2 + 448)) > 35.0|| *(_DWORD *)(a1 + 1776) > 15;
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v74 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v75 = *(_QWORD *)(a2 + 384);
      v76 = *(_QWORD *)(a3 + 544);
      v77 = *(_QWORD *)(a2 + 680);
      v78 = *(_QWORD *)(a2 + 488);
      v79 = *(_QWORD *)(a3 + 352);
      *(_DWORD *)buf = 134350081;
      v109 = v75;
      v110 = 2050;
      *(_QWORD *)v111 = v76;
      *(_WORD *)&v111[8] = 2050;
      *(_QWORD *)&v111[10] = v77;
      *(_WORD *)&v111[18] = 2049;
      *(_QWORD *)&v111[20] = v78;
      v112 = 2049;
      v113 = v79;
      _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,hopping between roads detected,priorfullSnapCourse,%{public}.1lf,currentFullSnapCourse,%{public}.1lf,priorId,%{private}llu,currentId,%{private}llu", buf, 0x34u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v80 = *(_QWORD *)(a2 + 384);
      v81 = *(_QWORD *)(a3 + 544);
      v82 = *(_QWORD *)(a2 + 680);
      v83 = *(_QWORD *)(a2 + 488);
      v84 = *(_QWORD *)(a3 + 352);
      v102 = 134350081;
      v103 = v80;
      v104 = 2050;
      *(_QWORD *)v105 = v81;
      *(_WORD *)&v105[8] = 2050;
      *(_QWORD *)&v105[10] = v82;
      *(_WORD *)&v105[18] = 2049;
      *(_QWORD *)&v105[20] = v83;
      v106 = 2049;
      v107 = v84;
      LODWORD(v98) = 52;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,hopping between roads detected,priorfullSnapCourse,%{public}.1lf,currentFullSnapCourse,%{public}.1lf,priorId,%{private}llu,currentId,%{private}llu", &v102, v98);
      v86 = (uint8_t *)v85;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::checkForSolutionHopping(const MMFilterData &, const MMSnapData &)", "%s\n", v85);
      if (v86 != buf)
        free(v86);
    }
LABEL_98:
    sub_1001A5CBC((uint64_t *)(a1 + 1784));
    v11 = (uint64_t *)(a1 + 1808);
  }
  sub_1001A5CBC(v11);
  return v10;
}

void sub_10129AE28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10129AE5C(uint64_t a1, uint64_t a2)
{
  double *v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v7;
  double v8;
  double v9;
  int v10;
  double v11;
  int v12;
  double *v13;
  NSObject *v14;
  double v15;
  double v16;
  const char *v17;
  NSObject *v18;
  double v19;
  NSObject *v20;
  double v21;
  double v22;
  uint8_t *v23;
  NSObject *v24;
  double v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v37;
  const char *v38;
  uint8_t *v39;
  double v40;
  uint64_t v41;
  int v42;
  const char *v43;
  uint8_t *v44;
  double v45;
  const char *v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  int v53;
  double v54;
  __int16 v55;
  _BYTE v56[10];
  __int16 v57;
  double v58;
  __int16 v59;
  double v60;
  uint8_t buf[4];
  double v62;
  __int16 v63;
  _BYTE v64[10];
  __int16 v65;
  double v66;
  __int16 v67;
  double v68;

  if (*(_QWORD *)(a2 + 48) == *(_QWORD *)(a2 + 40))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
    v14 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      v15 = *(double *)(a2 + 384);
      *(_DWORD *)buf = 134349056;
      v62 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,roadWithAdustment,number of particles are 0", buf, 0xCu);
    }
    v6 = 0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v16 = *(double *)(a2 + 384);
      v53 = 134349056;
      v54 = v16;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,roadWithAdustment,number of particles are 0", &v53, 12);
      goto LABEL_37;
    }
  }
  else
  {
    *(_QWORD *)(a2 + 696) = 0;
    *(_QWORD *)(a2 + 688) = 0;
    if (*(_BYTE *)(a2 + 640))
    {
      if (*(_QWORD *)(a2 + 256))
      {
        v51 = 0;
        v52 = 0.0;
        v4 = (double *)(a1 + 168);
        sub_1010B9950((double *)(a1 + 168), &v52, (double *)&v51, *(double *)(a2 + 664), *(double *)(a2 + 672), *(double *)(a2 + 448), *(double *)(a2 + 680), *(double *)(a2 + 432), *(double *)(a2 + 440));
        v5 = *(_QWORD *)(a2 + 256);
        v6 = v5 != 0;
        if (v5)
        {
          v7 = *(int *)(v5 + 20);
          v8 = 0.5;
          v9 = 1.0;
          if ((_DWORD)v7 != 9)
          {
            v10 = *(_DWORD *)(v5 + 72);
            if (v10 != 6 && v10 != 255)
            {
              v11 = *(double *)(v5 + 96);
              if (v11 < 0.000001)
              {
                v11 = 1.0;
                if ((v7 & 0xFFFFFFFE) != 8)
                {
                  v12 = *(unsigned __int8 *)(v5 + 16);
                  if (v7 > 7)
                  {
                    v11 = dbl_101BAFD30[v12 == 0];
                  }
                  else
                  {
                    if (v12)
                      v13 = (double *)&unk_101C48C40;
                    else
                      v13 = (double *)&unk_101C48C80;
                    v11 = v13[v7];
                  }
                }
              }
              v9 = v11 + 1.0;
              v8 = v11 * 0.5 + 1.0;
            }
          }
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
          v24 = qword_1022A00D8;
          if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
          {
            v25 = *(double *)(a2 + 384);
            v26 = *(_QWORD *)(a2 + 256);
            v27 = *(_DWORD *)(v26 + 20);
            LODWORD(v26) = *(unsigned __int8 *)(v26 + 16);
            *(_DWORD *)buf = 134350080;
            v62 = v25;
            v63 = 1026;
            *(_DWORD *)v64 = v27;
            *(_WORD *)&v64[4] = 1026;
            *(_DWORD *)&v64[6] = v26;
            v65 = 2050;
            v66 = v9;
            v67 = 2050;
            v68 = v52;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,frc,%{public}d,oneway,%{public}d,roadWidth,%{public}.1lf,acrossTrack,%{public}.3lf", buf, 0x2Cu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
            v40 = *(double *)(a2 + 384);
            v41 = *(_QWORD *)(a2 + 256);
            v42 = *(_DWORD *)(v41 + 20);
            LODWORD(v41) = *(unsigned __int8 *)(v41 + 16);
            v53 = 134350080;
            v54 = v40;
            v55 = 1026;
            *(_DWORD *)v56 = v42;
            *(_WORD *)&v56[4] = 1026;
            *(_DWORD *)&v56[6] = v41;
            v57 = 2050;
            v58 = v9;
            v59 = 2050;
            v60 = v52;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,frc,%{public}d,oneway,%{public}d,roadWidth,%{public}.1lf,acrossTrack,%{public}.3lf", &v53, 44);
            v44 = (uint8_t *)v43;
            sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::adjustSolutionforRoadWidth(MMFilterData &)", "%s\n", v43);
            if (v44 != buf)
              free(v44);
          }
          if (v9 >= 0.000001)
          {
            v28 = *(_QWORD *)(a2 + 528);
            v49 = *(_QWORD *)(a2 + 536);
            v50 = v28;
            if (sub_1002199F0(a1 + 1832, *(double *)(a2 + 400), 6.0))
            {
              v29 = *(_QWORD *)(a2 + 256);
              if (!v29 || (*(_DWORD *)(v29 + 20) & 0xFFFFFFFE) != 8)
              {
                if (qword_1022A00D0 != -1)
                  dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
                v30 = qword_1022A00D8;
                if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
                {
                  v31 = v9 + *(double *)(a1 + 16);
                  *(_DWORD *)buf = 134349312;
                  v62 = v9;
                  v63 = 2050;
                  *(double *)v64 = v31;
                  _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "CLMMPED,Road width inflated from,%{public}.1lf,to,%{public}.1lf", buf, 0x16u);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1022A00D0 != -1)
                    dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
                  v45 = v9 + *(double *)(a1 + 16);
                  v53 = 134349312;
                  v54 = v9;
                  v55 = 2050;
                  *(double *)v56 = v45;
                  LODWORD(v48) = 22;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,Road width inflated from,%{public}.1lf,to,%{public}.1lf", &v53, v48);
                  v47 = (uint8_t *)v46;
                  sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::adjustSolutionforRoadWidth(MMFilterData &)", "%s\n", v46);
                  if (v47 != buf)
                    free(v47);
                }
                v8 = v8 + *(double *)(a1 + 16) * 0.5;
              }
            }
            v32 = fabs(v52);
            if (v32 >= v8)
            {
              if (v52 >= 0.0)
                v35 = -(v32 - v8);
              else
                v35 = v32 - v8;
              sub_100081058(v4, (double *)&v50, (double *)&v49, *(double *)(a2 + 432), *(double *)(a2 + 440), *(double *)(a2 + 448), *(double *)(a2 + 680), v35);
              *(_DWORD *)(a2 + 656) = 2;
              v34 = v49;
              v33 = v50;
              *(_QWORD *)(a2 + 688) = v50;
              *(_QWORD *)(a2 + 696) = v34;
            }
            else
            {
              v33 = *(_QWORD *)(a2 + 432);
              v34 = *(_QWORD *)(a2 + 440);
            }
            *(_QWORD *)(a2 + 528) = v33;
            *(_QWORD *)(a2 + 536) = v34;
          }
        }
        return v6;
      }
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v20 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
      {
        v21 = *(double *)(a2 + 384);
        *(_DWORD *)buf = 134349056;
        v62 = v21;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,roadWithAdustment,road is nullptr", buf, 0xCu);
      }
      v6 = 0;
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
        v22 = *(double *)(a2 + 384);
        v53 = 134349056;
        v54 = v22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,roadWithAdustment,road is nullptr", &v53, 12);
LABEL_37:
        v23 = (uint8_t *)v17;
        sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::adjustSolutionforRoadWidth(MMFilterData &)", "%s\n", v17);
        if (v23 != buf)
          free(v23);
        return 0;
      }
    }
    else
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v18 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        v19 = *(double *)(a2 + 384);
        *(_DWORD *)buf = 134349056;
        v62 = v19;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,roadWithAdustment,snap invalid or frc = 9", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
        v37 = *(double *)(a2 + 384);
        v53 = 134349056;
        v54 = v37;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,roadWithAdustment,snap invalid or frc = 9", &v53, 12);
        v39 = (uint8_t *)v38;
        sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::adjustSolutionforRoadWidth(MMFilterData &)", "%s\n", v38);
        if (v39 != buf)
          free(v39);
      }
      return 1;
    }
  }
  return v6;
}

uint64_t sub_10129B75C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  NSObject *v18;
  const char *v19;
  uint8_t *v20;
  NSObject *v21;
  const char *v22;
  NSObject *v23;
  double v25;
  NSObject *v26;
  const char *v27;
  NSObject *v28;
  const char *v29;
  NSObject *v30;
  const char *v31;
  NSObject *v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  const char *v37;
  double v38;
  NSObject *v39;
  const char *v40;
  char v41;
  BOOL v42;
  BOOL v43;
  double v44;
  double v45;
  uint64_t v46;
  double v47;
  NSObject *v48;
  const char *v49;
  NSObject *v50;
  const char *v51;
  double v52;
  double v53;
  NSObject *v54;
  const char *v55;
  uint8_t *v56;
  BOOL v57;
  double v58;
  double v59;
  BOOL v60;
  double v61;
  double v62;
  BOOL v63;
  double v64;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  NSObject *v70;
  uint64_t v71;
  NSObject *v72;
  const char *v73;
  uint8_t *v74;
  const char *v75;
  uint64_t v76;
  const char *v77;
  uint8_t *v78;
  void *v79[2];
  char v80;
  void *v81[2];
  char v82;
  void *v83[2];
  char v84;
  _BYTE v85[112];
  unint64_t v86;
  void *v87[2];
  char v88;
  void *v89[2];
  char v90;
  uint64_t v91[3];
  float v92;
  __int128 v93;
  void *v94[2];
  char v95;
  void *__p[2];
  char v97;
  void *v98[2];
  char v99;
  _BYTE v100[9];
  double v101;
  double v102;
  _QWORD *v103[14];
  double v104;
  double v105;
  uint64_t v106;
  _BYTE v107[80];
  _BYTE v108[24];
  int v109;
  uint64_t v110;
  __int16 v111;
  _BYTE v112[18];
  __int16 v113;
  uint64_t v114;
  __int16 v115;
  uint64_t v116;
  __int16 v117;
  uint64_t v118;
  __int16 v119;
  uint64_t v120;
  __int16 v121;
  uint64_t v122;
  __int16 v123;
  uint64_t v124;
  __int16 v125;
  uint64_t v126;
  __int16 v127;
  uint64_t v128;
  __int16 v129;
  int v130;
  __int16 v131;
  int v132;
  __int16 v133;
  int v134;
  __int16 v135;
  int v136;
  __int16 v137;
  double v138;
  __int16 v139;
  int v140;
  __int16 v141;
  uint64_t v142;
  __int16 v143;
  double v144;
  __int16 v145;
  int v146;
  uint8_t buf[4];
  uint64_t v148;
  __int16 v149;
  _BYTE v150[18];
  __int16 v151;
  uint64_t v152;
  __int16 v153;
  uint64_t v154;
  __int16 v155;
  uint64_t v156;
  __int16 v157;
  uint64_t v158;
  __int16 v159;
  uint64_t v160;
  __int16 v161;
  uint64_t v162;
  __int16 v163;
  uint64_t v164;
  __int16 v165;
  uint64_t v166;
  __int16 v167;
  int v168;
  __int16 v169;
  int v170;
  __int16 v171;
  int v172;
  __int16 v173;
  int v174;
  __int16 v175;
  double v176;
  __int16 v177;
  int v178;
  __int16 v179;
  uint64_t v180;
  __int16 v181;
  double v182;
  __int16 v183;
  int v184;

  v3 = 0;
  *(_QWORD *)(a1 + 1968) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 2056) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 2064) = 0xBFF0000000000000;
  *(_QWORD *)v107 = 0xBFF0000000000000;
  v4 = a1 + 1968;
  *(_DWORD *)(a1 + 2048) = 0;
  *(_OWORD *)(a1 + 1976) = 0u;
  *(_OWORD *)(a1 + 1992) = 0u;
  *(_OWORD *)(a1 + 2008) = 0u;
  *(_OWORD *)(a1 + 2024) = 0u;
  *(_QWORD *)(a1 + 2037) = 0;
  *(_DWORD *)v108 = 0;
  memset(&v107[8], 0, 69);
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)&v108[8] = _Q0;
  if (*(double *)(a3 + 248) > 0.0)
  {
    v13 = (_QWORD *)(a2 + 256);
    v14 = *(_QWORD *)(a2 + 384);
    v106 = v14;
    v15 = *(double *)(a2 + 400);
    v16 = -1.0;
    if (v15 >= 0.0)
    {
      v17 = *(double *)(a3 + 264);
      _NF = v17 < 0.0;
      v16 = vabdd_f64(v15, v17);
      if (_NF)
        v16 = -1.0;
    }
    if (*v13)
    {
      if (v16 <= 0.0)
      {
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
        v23 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134349056;
          v148 = v14;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,invalid timeDiff,DOT", buf, 0xCu);
        }
        if (!sub_1001BFF7C(115, 0))
          return 0;
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
        v109 = 134349056;
        v110 = v106;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,Unexpected,invalid timeDiff,DOT", &v109, 12);
        v20 = (uint8_t *)v51;
        sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateDirectionOfTravelAssistance(const MMFilterData &, const MMSnapData &)", "%s\n", v51);
      }
      else
      {
        if (v16 > 1.5)
        {
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
          v18 = qword_1022A00D8;
          if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 134349056;
            v148 = v14;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,timeDiff too large,DOT", buf, 0xCu);
          }
          if (!sub_1001BFF7C(115, 2))
            return 0;
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
          v109 = 134349056;
          v110 = v106;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,timeDiff too large,DOT", &v109, 12);
          v20 = (uint8_t *)v19;
          sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateDirectionOfTravelAssistance(const MMFilterData &, const MMSnapData &)", "%s\n", v19);
          goto LABEL_117;
        }
        if (!*(_BYTE *)(a2 + 640) || *(_BYTE *)(a2 + 641))
        {
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
          v28 = qword_1022A00D8;
          if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 134349056;
            v148 = v14;
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf, no DOT, currentCrumb invalid", buf, 0xCu);
          }
          if (!sub_1001BFF7C(115, 2))
            return 0;
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
          v109 = 134349056;
          v110 = v106;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf, no DOT, currentCrumb invalid", &v109, 12);
          v20 = (uint8_t *)v29;
          sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateDirectionOfTravelAssistance(const MMFilterData &, const MMSnapData &)", "%s\n", v29);
        }
        else if (!*(_BYTE *)(a3 + 504) || *(_BYTE *)(a3 + 505))
        {
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
          v30 = qword_1022A00D8;
          if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 134349056;
            v148 = v14;
            _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf, no DOT, priorCrumb invalid", buf, 0xCu);
          }
          if (!sub_1001BFF7C(115, 2))
            return 0;
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
          v109 = 134349056;
          v110 = v106;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf, no DOT, priorCrumb invalid", &v109, 12);
          v20 = (uint8_t *)v31;
          sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateDirectionOfTravelAssistance(const MMFilterData &, const MMSnapData &)", "%s\n", v31);
        }
        else
        {
          v25 = *(double *)(a1 + 2272);
          if (v25 > 0.0 && vabdd_f64(v15, v25 + -1.0) < 0.9)
          {
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
            v26 = qword_1022A00D8;
            if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 134349056;
              v148 = v14;
              _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf, no DOT,feedback interval check", buf, 0xCu);
            }
            if (!sub_1001BFF7C(115, 2))
              return 0;
            bzero(buf, 0x65CuLL);
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
            v109 = 134349056;
            v110 = v106;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf, no DOT,feedback interval check", &v109, 12);
            v20 = (uint8_t *)v27;
            sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateDirectionOfTravelAssistance(const MMFilterData &, const MMSnapData &)", "%s\n", v27);
            goto LABEL_117;
          }
          if (*(_BYTE *)(a1 + 1064) && *(double *)(a1 + 1072) < 36.0)
          {
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
            v32 = qword_1022A00D8;
            if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
            {
              v33 = *(unsigned __int8 *)(a1 + 1064);
              v34 = *(_QWORD *)(a1 + 1072);
              *(_DWORD *)buf = 134349568;
              v148 = v14;
              v149 = 1026;
              *(_DWORD *)v150 = v33;
              *(_WORD *)&v150[4] = 2050;
              *(_QWORD *)&v150[6] = v34;
              _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf, no DOT, too close to prior intersection,transitiondetected,%{public}d,dist,%{public}.2lf", buf, 0x1Cu);
            }
            if (!sub_1001BFF7C(115, 2))
              return 0;
            bzero(buf, 0x65CuLL);
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
            v35 = *(unsigned __int8 *)(a1 + 1064);
            v36 = *(_QWORD *)(a1 + 1072);
            v109 = 134349568;
            v110 = v106;
            v111 = 1026;
            *(_DWORD *)v112 = v35;
            *(_WORD *)&v112[4] = 2050;
            *(_QWORD *)&v112[6] = v36;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf, no DOT, too close to prior intersection,transitiondetected,%{public}d,dist,%{public}.2lf", &v109, 28);
            v20 = (uint8_t *)v37;
            sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateDirectionOfTravelAssistance(const MMFilterData &, const MMSnapData &)", "%s\n", v37);
            goto LABEL_117;
          }
          v38 = fmod(*(double *)(a2 + 544) - *(double *)(a2 + 680), 360.0);
          if (v38 < 0.0)
            v38 = v38 + 360.0;
          if (v38 > 180.0)
            v38 = v38 + -360.0;
          if (fabs(v38) > 1.0)
          {
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
            v39 = qword_1022A00D8;
            if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 134349056;
              v148 = v14;
              _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf, no DOT, course not aligned to full snap", buf, 0xCu);
            }
            if (!sub_1001BFF7C(115, 2))
              return 0;
            bzero(buf, 0x65CuLL);
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
            v109 = 134349056;
            v110 = v106;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf, no DOT, course not aligned to full snap", &v109, 12);
            v20 = (uint8_t *)v40;
            sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateDirectionOfTravelAssistance(const MMFilterData &, const MMSnapData &)", "%s\n", v40);
            goto LABEL_117;
          }
          v105 = -1.0;
          if (sub_10128EB44(&v106, (double *)(a2 + 376), (double *)(a1 + 168), &v105, *(double *)(a3 + 528), *(double *)(a3 + 536), *(double *)(a3 + 544)))
          {
            v104 = 70.0;
            sub_100F5E8AC((uint64_t)v103, (uint64_t)v13);
            v41 = sub_10128F2C4(a1, v103, a2 + 376, 0, &v104);
            sub_100F5EA24((uint64_t)v103);
            if ((v41 & 1) != 0)
              return 0;
            sub_100F5E8AC((uint64_t)v100, (uint64_t)v13);
            sub_1015A2E04(v98, "lookBehindParticle");
            sub_1015A2E04(__p, "currentCrumb");
            v42 = sub_10128DF7C(a1, (uint64_t *)v98, (uint64_t *)__p, (uint64_t)v100, (double *)(a2 + 376), &v105, -15.0);
            if (v97 < 0)
              operator delete(__p[0]);
            if (v99 < 0)
              operator delete(v98[0]);
            if (v42)
            {
              sub_1015A2E04(v94, "Start");
              v43 = sub_10130C630(a2 + 376, (double *)(a1 + 168), (uint64_t *)v94, (double *)&v107[8], (double *)&v107[16], v101, v102);
              if (v95 < 0)
                operator delete(v94[0]);
              if (v43)
              {
                v44 = sub_10011E634((double *)(a1 + 168), *(double *)(a2 + 288), *(double *)(a2 + 296), v101, v102, *(double *)(a2 + 448));
                sub_100F5E8AC((uint64_t)v91, (uint64_t)v13);
                v45 = *(double *)(a2 + 472);
                if (v45 >= 0.0)
                {
                  v47 = fabs(v45);
                }
                else
                {
                  v46 = *(_QWORD *)(a1 + 208);
                  if (v46)
                  {
                    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v46 + 104))(v46))
                      v47 = 8.32;
                    else
                      v47 = 3.0;
                  }
                  else
                  {
                    v47 = 3.0;
                  }
                }
                v52 = v104;
                v53 = v104 - v47;
                if (v104 - v47 >= 18.0)
                {
                  sub_1015A2E04(v89, "predictedParticle");
                  sub_1015A2E04(v87, "currentCrumb");
                  v57 = sub_10128DF7C(a1, (uint64_t *)v89, (uint64_t *)v87, (uint64_t)v91, (double *)(a2 + 376), &v105, v47);
                  if (v88 < 0)
                    operator delete(v87[0]);
                  if (v90 < 0)
                    operator delete(v89[0]);
                  if (!v57)
                    goto LABEL_164;
                  *(_OWORD *)&v107[24] = v93;
                  v86 = 0xBFF0000000000000;
                  sub_10127C60C(v91, (double *)&v107[64], (double *)&v86, 1);
                  v58 = fmax(*(double *)&v107[64], 15.0);
                  if (v52 > v58 + 1.0)
                  {
                    sub_100F5E8AC((uint64_t)v85, (uint64_t)v13);
                    if (v52 - v58 >= v47 + 15.0)
                      v59 = v47 + 15.0;
                    else
                      v59 = v52 - v58;
                    sub_1015A2E04(v83, "lookAheadParticle");
                    sub_1015A2E04(v81, "currentCrumb");
                    v60 = sub_10128DF7C(a1, (uint64_t *)v83, (uint64_t *)v81, (uint64_t)v85, (double *)(a2 + 376), &v105, v59);
                    if (v82 < 0)
                      operator delete(v81[0]);
                    if (v84 < 0)
                      operator delete(v83[0]);
                    if (!v60)
                      goto LABEL_167;
                    v61 = fmin(v44, 15.0);
                    v62 = v105;
                    if (v105 < 3.0)
                      v62 = 3.0;
                    *(double *)&v107[40] = v61 + v59;
                    *(double *)&v107[56] = v62;
                    sub_1015A2E04(v79, "Predicted");
                    v63 = sub_10130C630(a2 + 376, (double *)(a1 + 168), (uint64_t *)v79, (double *)&v107[24], (double *)&v107[32], *(double *)&v107[24], *(double *)&v107[32]);
                    if (v80 < 0)
                      operator delete(v79[0]);
                    if (v63)
                    {
                      v64 = *(double *)(a2 + 384) + 1.0;
                      *(double *)&v107[48] = v92;
                      *(double *)v107 = v64;
                      __asm { FMOV            V1.2D, #1.0 }
                      *(float64x2_t *)&v108[8] = vaddq_f64(*(float64x2_t *)(a2 + 392), _Q1);
                      v107[73] = 0;
                      v107[74] = *(_BYTE *)(v91[0] + 17);
                      v107[72] = *(_BYTE *)(v91[0] + 18);
                      v107[75] = *(_BYTE *)(v91[0] + 19);
                      v107[76] = *(_DWORD *)(a2 + 496) == 0;
                      *(_DWORD *)v108 = 2;
                      v66 = *(_QWORD *)(a1 + 208);
                      if (v66 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v66 + 104))(v66))
                        *(_DWORD *)v108 = 3;
                      v67 = *(_OWORD *)v108;
                      *(_OWORD *)(v4 + 64) = *(_OWORD *)&v107[64];
                      *(_OWORD *)(v4 + 80) = v67;
                      *(_QWORD *)(v4 + 96) = *(_QWORD *)&v108[16];
                      v68 = *(_OWORD *)&v107[16];
                      *(_OWORD *)v4 = *(_OWORD *)v107;
                      *(_OWORD *)(v4 + 16) = v68;
                      v69 = *(_OWORD *)&v107[48];
                      *(_OWORD *)(v4 + 32) = *(_OWORD *)&v107[32];
                      *(_OWORD *)(v4 + 48) = v69;
                      *(_QWORD *)(a1 + 2272) = *(_QWORD *)&v108[16];
                      if (qword_1022A00D0 != -1)
                        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
                      v70 = qword_1022A00D8;
                      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
                      {
                        v71 = *(_QWORD *)(a2 + 472);
                        *(_DWORD *)buf = 134353921;
                        v148 = v106;
                        v149 = 2050;
                        *(_QWORD *)v150 = *(_QWORD *)v107;
                        *(_WORD *)&v150[8] = 2049;
                        *(_QWORD *)&v150[10] = *(_QWORD *)&v107[24];
                        v151 = 2049;
                        v152 = *(_QWORD *)&v107[32];
                        v153 = 2050;
                        v154 = *(_QWORD *)&v107[48];
                        v155 = 2050;
                        v156 = *(_QWORD *)&v107[56];
                        v157 = 2050;
                        v158 = *(_QWORD *)&v107[64];
                        v159 = 2049;
                        v160 = *(_QWORD *)&v107[8];
                        v161 = 2049;
                        v162 = *(_QWORD *)&v107[16];
                        v163 = 2050;
                        v164 = *(_QWORD *)&v107[40];
                        v165 = 2050;
                        v166 = v71;
                        v167 = 1026;
                        v168 = v107[73];
                        v169 = 1026;
                        v170 = v107[74];
                        v171 = 1026;
                        v172 = v107[72];
                        v173 = 1026;
                        v174 = v107[75];
                        v175 = 2050;
                        v176 = v58;
                        v177 = 1026;
                        v178 = v107[76];
                        v179 = 2050;
                        v180 = *(_QWORD *)&v108[16];
                        v181 = 2050;
                        v182 = v61;
                        v183 = 1026;
                        v184 = *(_DWORD *)v108;
                        _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,DOT,%{public}.1lf,lat,%{private}.7lf,lon,%{private}.7lf,course,%{public}.1lf,courseUnc,%{public}.1lf,rw,%{public}.1lf,startLat,%{private}.7lf,startLon,%{private}.7lf,length,%{public}.1lf,speed,%{public}.3lf,isOneWay,%{public}d,isRailWay,%{public}d,isTunnel,%{public}d,isBridge,%{public}d,distFromIntersection,%{public}.1lf,isFreeway,%{public}d,machContTime,%{public}.3lf,lookBehindDist,%{public}.2lf,type,%{public}d", buf, 0xB2u);
                      }
                      if (sub_1001BFF7C(115, 2))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_1022A00D0 != -1)
                          dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
                        v76 = *(_QWORD *)(a2 + 472);
                        v109 = 134353921;
                        v110 = v106;
                        v111 = 2050;
                        *(_QWORD *)v112 = *(_QWORD *)v107;
                        *(_WORD *)&v112[8] = 2049;
                        *(_QWORD *)&v112[10] = *(_QWORD *)&v107[24];
                        v113 = 2049;
                        v114 = *(_QWORD *)&v107[32];
                        v115 = 2050;
                        v116 = *(_QWORD *)&v107[48];
                        v117 = 2050;
                        v118 = *(_QWORD *)&v107[56];
                        v119 = 2050;
                        v120 = *(_QWORD *)&v107[64];
                        v121 = 2049;
                        v122 = *(_QWORD *)&v107[8];
                        v123 = 2049;
                        v124 = *(_QWORD *)&v107[16];
                        v125 = 2050;
                        v126 = *(_QWORD *)&v107[40];
                        v127 = 2050;
                        v128 = v76;
                        v129 = 1026;
                        v130 = v107[73];
                        v131 = 1026;
                        v132 = v107[74];
                        v133 = 1026;
                        v134 = v107[72];
                        v135 = 1026;
                        v136 = v107[75];
                        v137 = 2050;
                        v138 = v58;
                        v139 = 1026;
                        v140 = v107[76];
                        v141 = 2050;
                        v142 = *(_QWORD *)&v108[16];
                        v143 = 2050;
                        v144 = v61;
                        v145 = 1026;
                        v146 = *(_DWORD *)v108;
                        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf,DOT,%{public}.1lf,lat,%{private}.7lf,lon,%{private}.7lf,course,%{public}.1lf,courseUnc,%{public}.1lf,rw,%{public}.1lf,startLat,%{private}.7lf,startLon,%{private}.7lf,length,%{public}.1lf,speed,%{public}.3lf,isOneWay,%{public}d,isRailWay,%{public}d,isTunnel,%{public}d,isBridge,%{public}d,distFromIntersection,%{public}.1lf,isFreeway,%{public}d,machContTime,%{public}.3lf,lookBehindDist,%{public}.2lf,type,%{public}d", &v109, 178);
                        v78 = (uint8_t *)v77;
                        sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateDirectionOfTravelAssistance(const MMFilterData &, const MMSnapData &)", "%s\n", v77);
                        if (v78 != buf)
                          free(v78);
                      }
                      v3 = 1;
                    }
                    else
                    {
LABEL_167:
                      v3 = 0;
                    }
                    sub_100F5EA24((uint64_t)v85);
                    goto LABEL_165;
                  }
                  if (qword_1022A00D0 != -1)
                    dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
                  v72 = qword_1022A00D8;
                  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 134349056;
                    v148 = v106;
                    _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf, no DOT, current particle within the stopDistanceFromIntersection", buf, 0xCu);
                  }
                  if (!sub_1001BFF7C(115, 2))
                  {
LABEL_164:
                    v3 = 0;
LABEL_165:
                    sub_100F5EA24((uint64_t)v91);
                    goto LABEL_166;
                  }
                  bzero(buf, 0x65CuLL);
                  if (qword_1022A00D0 != -1)
                    dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
                  v109 = 134349056;
                  v110 = v106;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf, no DOT, current particle within the stopDistanceFromIntersection", &v109, 12);
                  v56 = (uint8_t *)v75;
                  sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateDirectionOfTravelAssistance(const MMFilterData &, const MMSnapData &)", "%s\n", v75);
                }
                else
                {
                  if (qword_1022A00D0 != -1)
                    dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
                  v54 = qword_1022A00D8;
                  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 134349312;
                    v148 = v106;
                    v149 = 2050;
                    *(double *)v150 = v53;
                    _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf, no DOT, predicted point is too close to intersection,dist,%{public}.2lf", buf, 0x16u);
                  }
                  if (!sub_1001BFF7C(115, 2))
                    goto LABEL_164;
                  bzero(buf, 0x65CuLL);
                  if (qword_1022A00D0 != -1)
                    dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
                  v109 = 134349312;
                  v110 = v106;
                  v111 = 2050;
                  *(double *)v112 = v53;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf, no DOT, predicted point is too close to intersection,dist,%{public}.2lf", &v109, 22);
                  v56 = (uint8_t *)v55;
                  sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateDirectionOfTravelAssistance(const MMFilterData &, const MMSnapData &)", "%s\n", v55);
                }
                if (v56 != buf)
                  free(v56);
                goto LABEL_164;
              }
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
              v50 = qword_1022A00D8;
              if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 134349056;
                v148 = v106;
                _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf, no DOT, computeSnapCoordinatesFromRawGPSCoordinates lookBehind returned false", buf, 0xCu);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A00D0 != -1)
                  dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
                v109 = 134349056;
                v110 = v106;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf, no DOT, computeSnapCoordinatesFromRawGPSCoordinates lookBehind returned false", &v109, 12);
                v74 = (uint8_t *)v73;
                sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateDirectionOfTravelAssistance(const MMFilterData &, const MMSnapData &)", "%s\n", v73);
                if (v74 != buf)
                  free(v74);
              }
            }
            v3 = 0;
LABEL_166:
            sub_100F5EA24((uint64_t)v100);
            return v3;
          }
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
          v48 = qword_1022A00D8;
          if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 134349056;
            v148 = v106;
            _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf, no DOT, priorCrumb location or course diverged", buf, 0xCu);
          }
          if (!sub_1001BFF7C(115, 2))
            return 0;
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
          v109 = 134349056;
          v110 = v106;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMPED,%{public}.1lf, no DOT, priorCrumb location or course diverged", &v109, 12);
          v20 = (uint8_t *)v49;
          sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateDirectionOfTravelAssistance(const MMFilterData &, const MMSnapData &)", "%s\n", v49);
        }
      }
    }
    else
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v21 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134349056;
        v148 = v14;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,invalid bestParticle road,DOT", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 0))
        return 0;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021ABE30);
      v109 = 134349056;
      v110 = v106;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMMPED,%{public}.1lf,Unexpected,invalid bestParticle road,DOT", &v109, 12);
      v20 = (uint8_t *)v22;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateDirectionOfTravelAssistance(const MMFilterData &, const MMSnapData &)", "%s\n", v22);
    }
LABEL_117:
    if (v20 != buf)
      free(v20);
    return 0;
  }
  return v3;
}

void sub_10129D044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  sub_100F5EA24((uint64_t)&a21);
  sub_100F5EA24((uint64_t)&a42);
  sub_100F5EA24((uint64_t)&a65);
  _Unwind_Resume(a1);
}

uint64_t sub_10129D168(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 2248);
  if (v2)
  {
    *(_QWORD *)(a1 + 2256) = v2;
    operator delete(v2);
  }
  return sub_10083C9D4(a1);
}

void sub_10129D198(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 2248);
  if (v2)
  {
    *(_QWORD *)(a1 + 2256) = v2;
    operator delete(v2);
  }
  sub_10083C9D4(a1);
  operator delete();
}

void sub_10129D1DC(id a1)
{
  qword_1022A00D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

void sub_10129D208(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_10129D208(a1, *a2);
    sub_10129D208(a1, a2[1]);
    sub_10129D250((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t sub_10129D250(uint64_t a1)
{
  void *v2;
  void **v4;

  sub_100261F44(a1 + 1112);
  v4 = (void **)(a1 + 1088);
  sub_10083CC6C(&v4);
  if (*(char *)(a1 + 775) < 0)
    operator delete(*(void **)(a1 + 752));
  if (*(char *)(a1 + 343) < 0)
    operator delete(*(void **)(a1 + 320));
  v2 = *(void **)(a1 + 120);
  if (v2)
  {
    *(_QWORD *)(a1 + 128) = v2;
    operator delete(v2);
  }
  return sub_100261F44(a1 + 32);
}

_QWORD *sub_10129D2C4(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_1004805CC(result, a4);
    result = (_QWORD *)sub_10129D348((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_10129D328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_10083CC6C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10129D348(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_101124910(a1, v4, v6);
      v6 += 112;
      v4 = v12 + 112;
      v12 += 112;
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_10129D3F0((uint64_t)v9);
  return v4;
}

void sub_10129D3DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10129D3F0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10129D3F0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_10129D424((uint64_t *)a1);
  return a1;
}

uint64_t *sub_10129D424(uint64_t *result)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)result[1];
  v1 = (uint64_t *)result[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *result;
    do
    {
      v3 -= 112;
      result = (uint64_t *)sub_10083CCF0(v5, v3);
    }
    while (v3 != v4);
  }
  return result;
}

void sub_10129D474(uint64_t a1)
{
  void *v2;
  _QWORD v3[3];
  void **v4;

  *(_BYTE *)(a1 + 48) = 0;
  sub_10129DEF4((void **)a1);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  memset(v3, 0, sizeof(v3));
  v4 = (void **)v3;
  sub_10083CC6C(&v4);
  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = 0xBFF0000000000000;
}

void sub_10129D4E4(uint64_t a1)
{
  __int128 v2;
  void *v3;
  __int128 v4;
  void *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  void **v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21[3];
  uint64_t v22;
  _OWORD v23[2];
  void *v24[2];
  uint64_t v25;
  uint64_t v26;
  __int128 v27[3];
  uint64_t v28;
  _OWORD v29[2];
  void *v30[2];
  uint64_t v31;
  char v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  void *__p[2];
  uint64_t v42;
  _BYTE v43[280];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  _BYTE v49[19];

  sub_10127FDA8(a1 + 104);
  bzero(v21, 0x300uLL);
  sub_101286008((uint64_t)v21);
  sub_1002B7674(a1 + 136, v21);
  v2 = v21[2];
  *(_OWORD *)(a1 + 152) = v21[1];
  *(_OWORD *)(a1 + 168) = v2;
  *(_QWORD *)(a1 + 184) = v22;
  *(_OWORD *)(a1 + 192) = v23[0];
  *(_OWORD *)(a1 + 201) = *(_OWORD *)((char *)v23 + 9);
  v3 = *(void **)(a1 + 224);
  if (v3)
  {
    *(_QWORD *)(a1 + 232) = v3;
    operator delete(v3);
  }
  *(_OWORD *)(a1 + 224) = *(_OWORD *)v24;
  *(_QWORD *)(a1 + 240) = v25;
  v24[1] = 0;
  v25 = 0;
  v24[0] = 0;
  *(_QWORD *)(a1 + 248) = v26;
  sub_1002B7674(a1 + 256, v27);
  v4 = v27[2];
  *(_OWORD *)(a1 + 272) = v27[1];
  *(_OWORD *)(a1 + 288) = v4;
  *(_QWORD *)(a1 + 304) = v28;
  *(_OWORD *)(a1 + 312) = v29[0];
  *(_OWORD *)(a1 + 321) = *(_OWORD *)((char *)v29 + 9);
  v5 = *(void **)(a1 + 344);
  if (v5)
  {
    *(_QWORD *)(a1 + 352) = v5;
    operator delete(v5);
  }
  *(_OWORD *)(a1 + 344) = *(_OWORD *)v30;
  *(_QWORD *)(a1 + 360) = v31;
  v30[1] = 0;
  v31 = 0;
  v30[0] = 0;
  *(_BYTE *)(a1 + 368) = v32;
  v6 = v38;
  *(_OWORD *)(a1 + 440) = v37;
  *(_OWORD *)(a1 + 456) = v6;
  v7 = v40;
  *(_OWORD *)(a1 + 472) = v39;
  *(_OWORD *)(a1 + 488) = v7;
  v8 = v34;
  *(_OWORD *)(a1 + 376) = v33;
  *(_OWORD *)(a1 + 392) = v8;
  v9 = v36;
  *(_OWORD *)(a1 + 408) = v35;
  *(_OWORD *)(a1 + 424) = v9;
  v10 = (void **)(a1 + 504);
  if (*(char *)(a1 + 527) < 0)
    operator delete(*v10);
  *(_OWORD *)v10 = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 520) = v42;
  HIBYTE(v42) = 0;
  LOBYTE(__p[0]) = 0;
  memcpy((void *)(a1 + 528), v43, 0x118uLL);
  v11 = v45;
  *(_OWORD *)(a1 + 808) = v44;
  *(_OWORD *)(a1 + 824) = v11;
  *(_OWORD *)(a1 + 840) = v46;
  *(_QWORD *)(a1 + 856) = v47;
  sub_1002B7674(a1 + 864, &v48);
  *(_OWORD *)(a1 + 880) = *(_OWORD *)v49;
  *(_DWORD *)(a1 + 895) = *(_DWORD *)&v49[15];
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
  if (*((_QWORD *)&v48 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (SHIBYTE(v42) < 0)
    operator delete(__p[0]);
  if (v30[0])
  {
    v30[1] = v30[0];
    operator delete(v30[0]);
  }
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v27[0] + 1);
  if (*((_QWORD *)&v27[0] + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v27[0] + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v24[0])
  {
    v24[1] = v24[0];
    operator delete(v24[0]);
  }
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v21[0] + 1);
  if (*((_QWORD *)&v21[0] + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v21[0] + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

uint64_t sub_10129D780(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void **v6;

  sub_100261F44(a1 + 864);
  if (*(char *)(a1 + 527) < 0)
    operator delete(*(void **)(a1 + 504));
  v2 = *(void **)(a1 + 344);
  if (v2)
  {
    *(_QWORD *)(a1 + 352) = v2;
    operator delete(v2);
  }
  sub_100261F44(a1 + 256);
  v3 = *(void **)(a1 + 224);
  if (v3)
  {
    *(_QWORD *)(a1 + 232) = v3;
    operator delete(v3);
  }
  sub_100261F44(a1 + 136);
  sub_10129D208(a1 + 112, *(_QWORD **)(a1 + 120));
  v4 = *(void **)(a1 + 64);
  if (v4)
  {
    *(_QWORD *)(a1 + 72) = v4;
    operator delete(v4);
  }
  v6 = (void **)(a1 + 40);
  sub_10083CC6C(&v6);
  return a1;
}

uint64_t sub_10129D82C(uint64_t a1, uint64_t a2, int a3, double a4)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = xmmword_101BAFC90;
  *(_BYTE *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 80) = _Q1;
  *(_OWORD *)(a1 + 96) = _Q1;
  *(_OWORD *)(a1 + 112) = _Q1;
  *(_OWORD *)(a1 + 128) = _Q1;
  *(_QWORD *)(a1 + 144) = 0xBFF0000000000000;
  *(_BYTE *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 160) = _Q1;
  *(_OWORD *)(a1 + 176) = _Q1;
  *(_OWORD *)(a1 + 192) = _Q1;
  sub_1012854B0(a1, a2, a3, a4);
  return a1;
}

uint64_t **sub_10129D890(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  __int128 v10;
  _QWORD *v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t *v17;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = v8;
    if (v8)
    {
      v16 = sub_10036C1BC((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          v10 = *((_OWORD *)v9 + 2);
          *((_BYTE *)v8 + 48) = *((_BYTE *)v9 + 48);
          *((_OWORD *)v8 + 2) = v10;
          sub_10127FE28((uint64_t)(v8 + 7), (uint64_t)(v9 + 7));
          sub_10129DA04(v5, v17);
          v8 = v16;
          v17 = v16;
          if (v16)
            v16 = sub_10036C1BC((uint64_t)v16);
          v11 = (_QWORD *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = (_QWORD *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v12 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)sub_10129DA88((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)sub_10129DADC((uint64_t)v5, (uint64_t)(a2 + 4));
      v13 = (_QWORD *)a2[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)a2[2];
          v12 = *v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_10129D9F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10129DA88((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_10129DA04(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;

  v5 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        v5 = (uint64_t **)v4;
        if (!sub_100F5C430((uint64_t)(a2 + 4), (uint64_t)(v4 + 4)))
          break;
        v4 = *v5;
        v6 = v5;
        if (!*v5)
          goto LABEL_8;
      }
      v4 = v5[1];
    }
    while (v4);
    v6 = v5 + 1;
  }
  else
  {
    v6 = a1 + 1;
  }
LABEL_8:
  sub_1000145B0(a1, (uint64_t)v5, v6, a2);
  return a2;
}

uint64_t sub_10129DA88(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  sub_10129D208(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    sub_10129D208(*(_QWORD *)a1, v2);
  }
  return a1;
}

uint64_t *sub_10129DADC(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t **v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t *v9[3];

  sub_10129DB9C(a1, a2, (uint64_t)v9);
  v4 = (uint64_t **)(a1 + 8);
  v3 = *(uint64_t **)(a1 + 8);
  if (v3)
  {
    v5 = v9[0] + 4;
    do
    {
      while (1)
      {
        v4 = (uint64_t **)v3;
        if (!sub_100F5C430((uint64_t)v5, (uint64_t)(v3 + 4)))
          break;
        v3 = *v4;
        v6 = v4;
        if (!*v4)
          goto LABEL_9;
      }
      v3 = v4[1];
    }
    while (v3);
    v6 = v4 + 1;
  }
  else
  {
    v6 = (uint64_t **)(a1 + 8);
  }
LABEL_9:
  sub_1000145B0((uint64_t **)a1, (uint64_t)v4, v6, v9[0]);
  v7 = v9[0];
  v9[0] = 0;
  sub_10129DEB0((uint64_t)v9, 0);
  return v7;
}

void sub_10129DB84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10129DEB0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_10129DB9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _OWORD *v6;
  uint64_t result;

  v5 = a1 + 8;
  v6 = operator new(0x4B0uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v6[2] = *(_OWORD *)a2;
  *((_QWORD *)v6 + 6) = *(_QWORD *)(a2 + 16);
  result = sub_10129DC14((uint64_t)v6 + 56, a2 + 24);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_10129DBFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10129DEB0(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_10129DC14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(_OWORD *)(a2 + 24);
  v8 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v8;
  *(_OWORD *)(a1 + 24) = v7;
  v9 = *(_OWORD *)(a2 + 64);
  v10 = *(_OWORD *)(a2 + 73);
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 73) = v10;
  *(_OWORD *)(a1 + 64) = v9;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  sub_100F5F150((_QWORD *)(a1 + 96), *(const void **)(a2 + 96), *(_QWORD *)(a2 + 104), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 3));
  v11 = *(_OWORD *)(a2 + 120);
  v12 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v12;
  *(_OWORD *)(a1 + 120) = v11;
  v13 = *(_OWORD *)(a2 + 248);
  v14 = *(_OWORD *)(a2 + 264);
  v15 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 264) = v14;
  *(_OWORD *)(a1 + 280) = v15;
  *(_OWORD *)(a1 + 248) = v13;
  v16 = *(_OWORD *)(a2 + 168);
  v17 = *(_OWORD *)(a2 + 184);
  v18 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 200) = v18;
  *(_OWORD *)(a1 + 184) = v17;
  *(_OWORD *)(a1 + 168) = v16;
  if (*(char *)(a2 + 319) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 296), *(void **)(a2 + 296), *(_QWORD *)(a2 + 304));
  }
  else
  {
    v19 = *(_OWORD *)(a2 + 296);
    *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
    *(_OWORD *)(a1 + 296) = v19;
  }
  memcpy((void *)(a1 + 320), (const void *)(a2 + 320), 0x118uLL);
  v20 = *(_OWORD *)(a2 + 600);
  v21 = *(_OWORD *)(a2 + 616);
  v22 = *(_OWORD *)(a2 + 648);
  *(_OWORD *)(a1 + 632) = *(_OWORD *)(a2 + 632);
  *(_OWORD *)(a1 + 648) = v22;
  *(_OWORD *)(a1 + 600) = v20;
  *(_OWORD *)(a1 + 616) = v21;
  v23 = *(_OWORD *)(a2 + 664);
  v24 = *(_OWORD *)(a2 + 680);
  v25 = *(_OWORD *)(a2 + 712);
  *(_OWORD *)(a1 + 696) = *(_OWORD *)(a2 + 696);
  *(_OWORD *)(a1 + 712) = v25;
  *(_OWORD *)(a1 + 664) = v23;
  *(_OWORD *)(a1 + 680) = v24;
  if (*(char *)(a2 + 751) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 728), *(void **)(a2 + 728), *(_QWORD *)(a2 + 736));
  }
  else
  {
    v26 = *(_OWORD *)(a2 + 728);
    *(_QWORD *)(a1 + 744) = *(_QWORD *)(a2 + 744);
    *(_OWORD *)(a1 + 728) = v26;
  }
  memcpy((void *)(a1 + 752), (const void *)(a2 + 752), 0x118uLL);
  v27 = *(_OWORD *)(a2 + 1048);
  *(_OWORD *)(a1 + 1032) = *(_OWORD *)(a2 + 1032);
  *(_OWORD *)(a1 + 1048) = v27;
  *(_QWORD *)(a1 + 1064) = 0;
  *(_QWORD *)(a1 + 1080) = 0;
  *(_QWORD *)(a1 + 1072) = 0;
  sub_10129D2C4((_QWORD *)(a1 + 1064), *(_QWORD *)(a2 + 1064), *(_QWORD *)(a2 + 1072), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 1072) - *(_QWORD *)(a2 + 1064)) >> 4));
  *(_QWORD *)(a1 + 1088) = *(_QWORD *)(a2 + 1088);
  v28 = *(_QWORD *)(a2 + 1096);
  *(_QWORD *)(a1 + 1096) = v28;
  if (v28)
  {
    v29 = (unint64_t *)(v28 + 8);
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  v31 = *(_OWORD *)(a2 + 1104);
  v32 = *(_OWORD *)(a2 + 1120);
  *(_DWORD *)(a1 + 1136) = *(_DWORD *)(a2 + 1136);
  *(_OWORD *)(a1 + 1120) = v32;
  *(_OWORD *)(a1 + 1104) = v31;
  return a1;
}

void sub_10129DE5C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;

  if (*(char *)(v1 + 319) < 0)
    operator delete(*v3);
  sub_100F5EA24(v2);
  _Unwind_Resume(a1);
}

void sub_10129DEB0(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_10129D250((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void sub_10129DEF4(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 112;
        sub_10083CCF0((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t *sub_10129DF60(uint64_t **a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_1011240E8((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_10129E008((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000145B0(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_10129DEB0((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t sub_10129E008@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t result;

  v5 = a1 + 8;
  v6 = operator new(0x4B0uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_10129E070((uint64_t)v6 + 32, *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_10129E058(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10129DEB0(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_10129E070(uint64_t a1, __int128 *a2)
{
  __int128 v3;

  v3 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v3;
  bzero((void *)(a1 + 48), 0x460uLL);
  *(_QWORD *)(a1 + 24) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 52) = 1;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_BYTE *)(a1 + 168) = 1;
  *(_QWORD *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 208) = _Q1;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_QWORD *)(a1 + 240) = 0xBFF0000000000000;
  *(_WORD *)(a1 + 456) = 0;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 539) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 406) = 0u;
  *(_QWORD *)(a1 + 616) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = _Q1;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_QWORD *)(a1 + 672) = 0xBFF0000000000000;
  *(_WORD *)(a1 + 888) = 0;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 971) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 838) = 0u;
  *(_QWORD *)(a1 + 1048) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 1056) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_DWORD *)(a1 + 1128) = 0;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_BYTE *)(a1 + 1152) = 1;
  *(_DWORD *)(a1 + 1160) = -1;
  return a1;
}

uint64_t sub_10129E1B4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;

  v8 = a1 + 16;
  v9 = *(void **)a1;
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) < a4)
  {
    sub_10129DEF4((void **)a1);
    if (a4 > 0x249249249249249)
      sub_100259694();
    v10 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4);
    if (v10 <= a4)
      v10 = a4;
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)) >= 0x124924924924924)
      v11 = 0x249249249249249;
    else
      v11 = v10;
    sub_1004805CC((_QWORD *)a1, v11);
    result = sub_10129D348(v8, a2, a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 4) < a4)
  {
    v13 = a2 + 16 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 4);
    sub_10129E354((uint64_t)&v17, a2, v13, (uint64_t)v9);
    result = sub_10129D348(v8, v13, a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = result;
    return result;
  }
  result = sub_10129E354((uint64_t)&v18, a2, a3, (uint64_t)v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 112;
      result = sub_10083CCF0(v8, v16);
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
  return result;
}

void sub_10129E344(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_10129E34C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_10129E354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    sub_100349198((_QWORD *)a4, (uint64_t *)v5);
    v7 = *(_QWORD *)(v5 + 48);
    v8 = *(_OWORD *)(v5 + 32);
    *(_OWORD *)(a4 + 16) = *(_OWORD *)(v5 + 16);
    *(_OWORD *)(a4 + 32) = v8;
    *(_QWORD *)(a4 + 48) = v7;
    v9 = *(_OWORD *)(v5 + 56);
    *(_OWORD *)(a4 + 65) = *(_OWORD *)(v5 + 65);
    *(_OWORD *)(a4 + 56) = v9;
    if (a4 != v5)
      sub_100F5F1C8((char *)(a4 + 88), *(char **)(v5 + 88), *(_QWORD *)(v5 + 96), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(v5 + 96) - *(_QWORD *)(v5 + 88)) >> 3));
    a4 += 112;
    v5 += 112;
  }
  while (v5 != v6);
  return v6;
}

uint64_t sub_10129E404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    sub_1002B7674(a4, (__int128 *)v5);
    v7 = *(_QWORD *)(v5 + 48);
    v8 = *(_OWORD *)(v5 + 32);
    *(_OWORD *)(a4 + 16) = *(_OWORD *)(v5 + 16);
    *(_OWORD *)(a4 + 32) = v8;
    *(_QWORD *)(a4 + 48) = v7;
    v9 = *(_OWORD *)(v5 + 56);
    *(_OWORD *)(a4 + 65) = *(_OWORD *)(v5 + 65);
    *(_OWORD *)(a4 + 56) = v9;
    sub_100006898(a4 + 88, (__n128 *)(v5 + 88));
    a4 += 112;
    v5 += 112;
  }
  while (v5 != v6);
  return v6;
}

uint64_t sub_10129E490(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  void *v26[2];
  char *v27;
  char *v28;
  uint64_t v29;

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = a3;
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v11 - v12) >> 4) >= a5)
    {
      v20 = v12 - a2;
      if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - a2) >> 4) >= a5)
      {
        v21 = a3 + 112 * a5;
      }
      else
      {
        v21 = a3 + 16 * ((uint64_t)(v12 - a2) >> 4);
        a1[1] = sub_10129E7F8(v9, v21, a4, *(_QWORD *)(v9 - 8));
        if (v20 < 1)
          return v5;
      }
      sub_10129E6A0((uint64_t)a1, v5, v12, v5 + 112 * a5);
      sub_10129E354((uint64_t)v26, v7, v21, v5);
    }
    else
    {
      v13 = *a1;
      v14 = a5 + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - *a1) >> 4);
      if (v14 > 0x249249249249249)
        sub_100259694();
      v15 = 0x6DB6DB6DB6DB6DB7 * ((a2 - v13) >> 4);
      v16 = 0x6DB6DB6DB6DB6DB7 * ((v10 - v13) >> 4);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x124924924924924)
        v18 = 0x249249249249249;
      else
        v18 = v17;
      v29 = v9;
      if (v18)
        v19 = (char *)sub_1002A7588(v9, v18);
      else
        v19 = 0;
      v22 = &v19[112 * v15];
      v26[0] = v19;
      v26[1] = v22;
      v27 = v22;
      v28 = &v19[112 * v18];
      v23 = 112 * a5;
      v24 = &v22[112 * a5];
      do
      {
        sub_101124910(v29, (uint64_t)v22, v7);
        v22 += 112;
        v7 += 112;
        v23 -= 112;
      }
      while (v23);
      v27 = v24;
      v5 = sub_10129E748(a1, v26, v5);
      sub_101124B74(v26);
    }
  }
  return v5;
}

void sub_10129E674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t sub_10129E6A0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  char v14;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = v6;
  if (v7 < a3)
  {
    v9 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      *(_OWORD *)v8 = *(_OWORD *)v9;
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      v10 = *(_OWORD *)(v9 + 16);
      v11 = *(_OWORD *)(v9 + 32);
      *(_QWORD *)(v8 + 48) = *(_QWORD *)(v9 + 48);
      *(_OWORD *)(v8 + 16) = v10;
      *(_OWORD *)(v8 + 32) = v11;
      v12 = *(_OWORD *)(v9 + 56);
      *(_OWORD *)(v8 + 65) = *(_OWORD *)(v9 + 65);
      *(_OWORD *)(v8 + 56) = v12;
      *(_QWORD *)(v8 + 96) = 0;
      *(_QWORD *)(v8 + 104) = 0;
      *(_QWORD *)(v8 + 88) = 0;
      *(_OWORD *)(v8 + 88) = *(_OWORD *)(v9 + 88);
      *(_QWORD *)(v8 + 104) = *(_QWORD *)(v9 + 104);
      *(_QWORD *)(v9 + 88) = 0;
      *(_QWORD *)(v9 + 96) = 0;
      *(_QWORD *)(v9 + 104) = 0;
      v8 += 112;
      v9 += 112;
    }
    while (v9 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return sub_10129E8A0((uint64_t)&v14, a2, v7, v6);
}

uint64_t sub_10129E748(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  sub_101124A24((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_10129E93C(v7, a3, a1[1], a2[2]);
  v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_10129E7F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_101124910(a1, v4, v6);
      v6 += 112;
      v4 = v12 + 112;
      v12 += 112;
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_10129D3F0((uint64_t)v9);
  return v4;
}

void sub_10129E88C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10129D3F0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10129E8A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  if (a3 != a2)
  {
    v7 = 0;
    do
    {
      v8 = a4 + v7;
      sub_1002B7674(a4 + v7 - 112, (__int128 *)(a3 + v7 - 112));
      v9 = *(_QWORD *)(a3 + v7 - 64);
      v10 = *(_OWORD *)(a3 + v7 - 80);
      *(_OWORD *)(v8 - 96) = *(_OWORD *)(a3 + v7 - 96);
      *(_OWORD *)(v8 - 80) = v10;
      *(_QWORD *)(v8 - 64) = v9;
      v11 = *(_OWORD *)(a3 + v7 - 56);
      *(_OWORD *)(v8 - 47) = *(_OWORD *)(a3 + v7 - 47);
      *(_OWORD *)(v8 - 56) = v11;
      sub_100006898(a4 + v7 - 24, (__n128 *)(a3 + v7 - 24));
      v7 -= 112;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

uint64_t sub_10129E93C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v12 = a4;
  v11 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  if (a2 != a3)
  {
    do
    {
      *(_OWORD *)v4 = *(_OWORD *)a2;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      v5 = *(_OWORD *)(a2 + 16);
      v6 = *(_OWORD *)(a2 + 32);
      *(_QWORD *)(v4 + 48) = *(_QWORD *)(a2 + 48);
      *(_OWORD *)(v4 + 16) = v5;
      *(_OWORD *)(v4 + 32) = v6;
      v7 = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(v4 + 65) = *(_OWORD *)(a2 + 65);
      *(_OWORD *)(v4 + 56) = v7;
      *(_QWORD *)(v4 + 96) = 0;
      *(_QWORD *)(v4 + 104) = 0;
      *(_QWORD *)(v4 + 88) = 0;
      *(_OWORD *)(v4 + 88) = *(_OWORD *)(a2 + 88);
      *(_QWORD *)(v4 + 104) = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = 0;
      *(_QWORD *)(a2 + 96) = 0;
      *(_QWORD *)(a2 + 104) = 0;
      v4 += 112;
      a2 += 112;
    }
    while (a2 != a3);
    v12 = v4;
  }
  v10 = 1;
  sub_10129D3F0((uint64_t)v9);
  return v4;
}

uint64_t sub_10129E9F4(uint64_t *a1, _QWORD *a2)
{
  sub_1001A5CBC(a1);
  return sub_100FC2BA4((uint64_t)a1, a1, a2);
}

uint64_t *sub_10129EA2C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;

  v4 = a2;
  v6 = (uint64_t *)a1[1];
  if (a2 != a3 && v6 != a1)
  {
    do
    {
      v7 = *(_QWORD *)(v4 + 16);
      *((_WORD *)v6 + 12) = *(_WORD *)(v4 + 24);
      v6[2] = v7;
      sub_100349198(v6 + 4, (uint64_t *)(v4 + 32));
      v6[6] = *(_QWORD *)(v4 + 48);
      v4 = *(_QWORD *)(v4 + 8);
      v6 = (uint64_t *)v6[1];
    }
    while (v4 != a3 && v6 != a1);
  }
  if (v6 == a1)
    return sub_10129EAD4((uint64_t)a1, a1, v4, a3);
  else
    return sub_10129EC2C((uint64_t)a1, v6, a1);
}

uint64_t *sub_10129EAD4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;

  if (a3 != a4)
  {
    v8 = operator new(0x38uLL);
    v9 = v8;
    *v8 = 0;
    v8[1] = 0;
    v10 = *(_QWORD *)(a3 + 16);
    *((_WORD *)v8 + 12) = *(_WORD *)(a3 + 24);
    v8[2] = v10;
    v11 = *(_QWORD *)(a3 + 40);
    v8[4] = *(_QWORD *)(a3 + 32);
    v8[5] = v11;
    if (v11)
    {
      v12 = (unint64_t *)(v11 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    v8[6] = *(_QWORD *)(a3 + 48);
    v14 = *(_QWORD *)(a3 + 8);
    v15 = 1;
    if (v14 != a4)
    {
      v16 = v8;
      do
      {
        v8 = operator new(0x38uLL);
        *v8 = v16;
        v8[1] = 0;
        v17 = *(_QWORD *)(v14 + 16);
        *((_WORD *)v8 + 12) = *(_WORD *)(v14 + 24);
        v8[2] = v17;
        v18 = *(_QWORD *)(v14 + 40);
        v8[4] = *(_QWORD *)(v14 + 32);
        v8[5] = v18;
        if (v18)
        {
          v19 = (unint64_t *)(v18 + 8);
          do
            v20 = __ldxr(v19);
          while (__stxr(v20 + 1, v19));
        }
        v8[6] = *(_QWORD *)(v14 + 48);
        v16[1] = v8;
        ++v15;
        v14 = *(_QWORD *)(v14 + 8);
        v16 = v8;
      }
      while (v14 != a4);
    }
    v21 = *a2;
    *(_QWORD *)(v21 + 8) = v9;
    *v9 = v21;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(_QWORD *)(a1 + 16) += v15;
    return v9;
  }
  return a2;
}

void sub_10129EC04(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  sub_101949EBC(v1);
  __cxa_rethrow();
}

void sub_10129EC18(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_10129EC2C(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  if (a2 != a3)
  {
    v4 = a2;
    v6 = *a3;
    v7 = *a2;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(*a3 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    do
    {
      v8 = (_QWORD *)v4[1];
      --*(_QWORD *)(a1 + 16);
      sub_100261F44((uint64_t)(v4 + 4));
      operator delete(v4);
      v4 = v8;
    }
    while (v8 != a3);
  }
  return a3;
}

void sub_10129ECA8(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_10129ECE8((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_10129ECE8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 64)
  {
    v4 = *(void **)(i - 56);
    if (v4)
    {
      *(_QWORD *)(i - 48) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

uint64_t sub_10129ED34(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[2];
  uint64_t v27;
  char *v28;
  uint64_t v29;

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = a3;
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if (a5 <= (uint64_t)(v11 - v12) >> 6)
    {
      v19 = v12 - a2;
      v20 = (uint64_t)(v12 - a2) >> 6;
      if (v20 >= a5)
      {
        v21 = a3 + (a5 << 6);
      }
      else
      {
        v21 = a3 + (v20 << 6);
        a1[1] = sub_10129F020(v9, v21, a4, *(_QWORD *)(v9 - 8));
        if (v19 < 1)
          return v5;
      }
      sub_10129EEDC((uint64_t)a1, v5, v12, v5 + (a5 << 6));
      sub_10129F1C8((uint64_t)v26, v7, v21, v5);
    }
    else
    {
      v13 = *a1;
      v14 = a5 + ((uint64_t)(v12 - *a1) >> 6);
      if (v14 >> 58)
        sub_100259694();
      v15 = (a2 - v13) >> 6;
      v16 = v10 - v13;
      if (v16 >> 5 > v14)
        v14 = v16 >> 5;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFC0)
        v17 = 0x3FFFFFFFFFFFFFFLL;
      else
        v17 = v14;
      v29 = v9;
      if (v17)
        v18 = (char *)sub_1002697F0(v9, v17);
      else
        v18 = 0;
      v22 = (uint64_t)&v18[64 * v15];
      v26[0] = v18;
      v26[1] = v22;
      v27 = v22;
      v28 = &v18[64 * v17];
      v23 = a5 << 6;
      v24 = v22 + (a5 << 6);
      do
      {
        sub_100CD0684(v29, v22, v7);
        v22 += 64;
        v7 += 64;
        v23 -= 64;
      }
      while (v23);
      v27 = v24;
      v5 = sub_10129EF70(a1, v26, v5);
      sub_100CD091C((uint64_t)v26);
    }
  }
  return v5;
}

void sub_10129EEB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t sub_10129EEDC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v11;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = v6;
  if (v7 < a3)
  {
    v9 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      *(_QWORD *)v8 = *(_QWORD *)v9;
      *(_QWORD *)(v8 + 16) = 0;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 8) = 0;
      *(_OWORD *)(v8 + 8) = *(_OWORD *)(v9 + 8);
      *(_QWORD *)(v8 + 24) = *(_QWORD *)(v9 + 24);
      *(_QWORD *)(v9 + 8) = 0;
      *(_QWORD *)(v9 + 16) = 0;
      *(_QWORD *)(v9 + 24) = 0;
      *(_OWORD *)(v8 + 32) = *(_OWORD *)(v9 + 32);
      *(_OWORD *)(v8 + 48) = *(_OWORD *)(v9 + 48);
      v8 += 64;
      v9 += 64;
    }
    while (v9 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return sub_10129F140((uint64_t)&v11, a2, v7, v6);
}

uint64_t sub_10129EF70(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  sub_100CD07DC((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_10129F3C8(v7, a3, a1[1], a2[2]);
  v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_10129F020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_100CD0684(a1, v4, v6);
      v6 += 64;
      v4 = v12 + 64;
      v12 += 64;
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_10129F0C8((uint64_t)v9);
  return v4;
}

void sub_10129F0B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10129F0C8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10129F0C8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_10129F0FC(a1);
  return a1;
}

void sub_10129F0FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    v3 = *(void **)(v1 - 56);
    if (v3)
    {
      *(_QWORD *)(v1 - 48) = v3;
      operator delete(v3);
    }
    v1 -= 64;
  }
}

uint64_t sub_10129F140(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;

  if (a3 != a2)
  {
    v7 = 0;
    do
    {
      v8 = a4 + v7;
      *(_QWORD *)(a4 + v7 - 64) = *(_QWORD *)(a3 + v7 - 64);
      sub_100006898(a4 + v7 - 56, (__n128 *)(a3 + v7 - 56));
      *(_OWORD *)(v8 - 32) = *(_OWORD *)(a3 + v7 - 32);
      *(_OWORD *)(v8 - 16) = *(_OWORD *)(a3 + v7 - 16);
      v7 -= 64;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

uint64_t sub_10129F1C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 == a3)
    return a2;
  v5 = a3;
  v6 = a2 + 16;
  do
  {
    v7 = v6 - 16;
    *(_QWORD *)a4 = *(_QWORD *)(v6 - 16);
    if (a4 != v6 - 16)
      sub_10129F258((_QWORD *)(a4 + 8), *(_QWORD **)(v6 - 8), *(_QWORD **)v6, (uint64_t)(*(_QWORD *)v6 - *(_QWORD *)(v6 - 8)) >> 4);
    *(_OWORD *)(a4 + 32) = *(_OWORD *)(v6 + 16);
    *(_OWORD *)(a4 + 48) = *(_OWORD *)(v6 + 32);
    a4 += 64;
    v6 += 64;
  }
  while (v7 + 64 != v5);
  return v5;
}

char *sub_10129F258(_QWORD *a1, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v8;
  char *result;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  __int128 v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;

  v6 = a2;
  v8 = a1[2];
  result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 4)
  {
    v17 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v17;
    v18 = (v17 - result) >> 4;
    if (v18 >= a4)
    {
      v24 = result;
      if (a2 != a3)
      {
        v25 = result;
        do
        {
          v26 = *(_OWORD *)v6;
          v6 += 2;
          *(_OWORD *)v25 = v26;
          v25 += 16;
          v24 += 16;
        }
        while (v6 != a3);
      }
      v16 = (char *)(v24 - result);
      v12 = result;
    }
    else
    {
      v19 = &a2[2 * v18];
      if (v12 != result)
      {
        v20 = 16 * v18;
        do
        {
          v21 = *(_OWORD *)v6;
          v6 += 2;
          *(_OWORD *)result = v21;
          result += 16;
          v20 -= 16;
        }
        while (v20);
      }
      v22 = v12;
      if (v19 != a3)
      {
        v23 = v12;
        do
        {
          *(_QWORD *)v23 = *v19;
          *((_QWORD *)v23 + 1) = v19[1];
          v22 += 16;
          v19 += 2;
          v23 += 16;
        }
        while (v19 != a3);
      }
      v16 = (char *)(v22 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60)
      sub_100259694();
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_1002AE87C(a1, v11);
    v14 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v14;
    v15 = v14;
    if (v6 != a3)
    {
      v15 = v12;
      do
      {
        *(_QWORD *)v15 = *v6;
        *((_QWORD *)v15 + 1) = v6[1];
        v15 += 16;
        v6 += 2;
      }
      while (v6 != a3);
    }
    v16 = (char *)(v15 - v12);
  }
  *v13 = &v16[(_QWORD)v12];
  return result;
}

uint64_t sub_10129F3C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_100CD0684(a1, v4, v6);
      v6 += 64;
      v4 = v12 + 64;
      v12 += 64;
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_10129F0C8((uint64_t)v9);
  return v4;
}

void sub_10129F45C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10129F0C8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_10129F470(_QWORD *result, uint64_t a2)
{
  *result = off_1021ABE60;
  result[1] = a2;
  return result;
}

uint64_t sub_10129F480(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_1001E4804(&v8);
  v3 = sub_1001E4B84(v8, "MaxHarvestPressures", a2);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

void sub_10129F504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10129F630(_QWORD *a1, int a2)
{
  *a1 = 0;
  if (a2)
    operator new();
  operator new();
}

void sub_10129F6DC(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

void sub_10129F724(_QWORD *a1)
{
  sub_10129F630(a1, 200);
}

uint64_t *sub_10129F72C(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

_QWORD **sub_10129F764(_QWORD **a1)
{
  sub_100008848((uint64_t)(a1 + 6), a1[7]);
  sub_100008848((uint64_t)(a1 + 3), a1[4]);
  sub_100008848((uint64_t)a1, a1[1]);
  return a1;
}

uint64_t sub_10129F7A8(_QWORD *a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021ABEA0);
  v2 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#wifitilecentroids, clear cache", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021ABEA0);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "#wifitilecentroids, clear cache", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiTileCacheLogic::clear()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 40))(*a1);
}

void sub_10129F948(id a1)
{
  qword_1022A0058 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

_WORD *sub_10129F974(uint64_t **a1, _QWORD *a2, uint64_t a3, uint64_t **a4)
{
  void **v6;
  _WORD *v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t v11;

  v6 = (void **)sub_100191690((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x40uLL);
    v9 = **a4;
    v7[24] = 0;
    *((_QWORD *)v7 + 4) = v9;
    *((_QWORD *)v7 + 5) = 0;
    *((_DWORD *)v7 + 13) = 0;
    *((_DWORD *)v7 + 14) = 0;
    sub_1000145B0(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

void sub_1012A0384(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

id sub_1012A03AC(uint64_t a1, void *a2)
{
  id result;

  if (objc_msgSend(a2, "isEqualToString:", CFSTR("WPPuckCompany")))
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) |= 1uLL;
  result = objc_msgSend(a2, "isEqualToString:", CFSTR("WPPuckBeaconNoRanging"));
  if ((_DWORD)result)
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) |= 2uLL;
  return result;
}

id sub_1012A08B8(uint64_t a1, void *a2, uint64_t a3)
{
  id result;
  uint64_t v7;
  id v8;
  id v9;
  CLWPZone *v10;

  result = objc_msgSend(objc_msgSend(a2, "advertisementData"), "isEqualToData:", *(_QWORD *)(a1 + 32));
  if (a3 && (_DWORD)result)
  {
    v7 = *(_QWORD *)(a1 + 56);
    if (v7 == 1)
    {
      if (objc_msgSend(a2, "major"))
      {
        v8 = objc_msgSend(objc_msgSend(a2, "major"), "integerValue");
        if (v8 != objc_msgSend(*(id *)(a1 + 40), "integerValue"))
          sub_10194A224();
      }
      if (objc_msgSend(a2, "minor"))
      {
        v9 = objc_msgSend(objc_msgSend(a2, "minor"), "integerValue");
        if (v9 != objc_msgSend(*(id *)(a1 + 48), "integerValue"))
          sub_10194A0B8();
      }
      v10 = -[CLWPZone initWithProximityUUID:major:minor:identifier:]([CLWPZone alloc], "initWithProximityUUID:major:minor:identifier:", objc_msgSend(a2, "proximityUUID"), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), objc_msgSend(a2, "identifier"));
      v7 = *(_QWORD *)(a1 + 56);
    }
    else
    {
      v10 = 0;
    }
    return (id)(*(uint64_t (**)(uint64_t, void *, uint64_t, CLWPZone *, _QWORD))(a3 + 16))(a3, a2, v7, v10, 0);
  }
  return result;
}

