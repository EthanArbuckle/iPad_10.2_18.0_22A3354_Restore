void sub_10080059C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,char *a40)
{
  a40 = &a20;
  sub_1006AB5A0((void ***)&a40);
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_10080066C(int a1@<W0>, int a2@<W1>, uint64_t a3@<X8>)
{
  std::string *v5;
  __int128 v6;
  std::string *p_p;
  std::string::size_type size;
  std::string *v9;
  std::string::size_type v10;
  int v11;
  std::string __p;
  std::string v13;
  std::string v14;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  if (((a2 | a1) & 0x80000000) == 0)
  {
    std::to_string(&v13, a1);
    v5 = std::string::append(&v13, ".");
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v14.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, a2);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v9 = std::string::append(&v14, (const std::string::value_type *)p_p, size);
    v10 = v9->__r_.__value_.__l.__size_;
    *(_QWORD *)a3 = v9->__r_.__value_.__r.__words[0];
    *(_QWORD *)(a3 + 8) = v10;
    *(_QWORD *)(a3 + 15) = *(std::string::size_type *)((char *)&v9->__r_.__value_.__r.__words[1] + 7);
    LOBYTE(v10) = *((_BYTE *)&v9->__r_.__value_.__s + 23);
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    v11 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(_BYTE *)(a3 + 23) = v10;
    if (v11 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
  }
}

void sub_10080075C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

id sub_1008007A8(uint64_t a1, void *a2)
{
  id result;
  NSObject *v5;
  id v6;
  id v7;
  uint64_t v8;
  id v9;
  const char *v10;
  uint8_t *v11;
  _QWORD v12[6];
  int v13;
  id v14;
  __int16 v15;
  id v16;
  uint8_t buf[4];
  id v18;
  __int16 v19;
  id v20;

  result = sub_1007FA3F0(a2);
  if ((_DWORD)result)
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102154B58);
    v5 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
    {
      v6 = objc_msgSend(*(id *)(a1 + 56), "UTF8String");
      *(_DWORD *)buf = 136380931;
      v18 = v6;
      v19 = 2113;
      v20 = objc_msgSend(a2, "attributes");
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#CLMA,%{private}s,purging asset,attributes,%{private}@", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102154B58);
      v8 = qword_1022A02A8;
      v9 = objc_msgSend(*(id *)(a1 + 56), "UTF8String");
      v13 = 136380931;
      v14 = v9;
      v15 = 2113;
      v16 = objc_msgSend(a2, "attributes");
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, 2, "#CLMA,%{private}s,purging asset,attributes,%{private}@", &v13, 22);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CLMobileAsset::purgeAsset(MAAsset *)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    v7 = a2;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_1008009EC;
    v12[3] = &unk_102154B28;
    v12[4] = a2;
    v12[5] = a1;
    return objc_msgSend(a2, "purge:", v12);
  }
  return result;
}

void sub_1008009EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  NSObject *v5;
  id v6;
  id v7;
  unsigned int v8;
  id v9;
  uint64_t v10;
  id v11;
  id v12;
  unsigned int v13;
  id v14;
  const char *v15;
  uint8_t *v16;
  NSObject *v17;
  id v18;
  id v19;
  unsigned int v20;
  id v21;
  uint64_t v22;
  id v23;
  id v24;
  unsigned int v25;
  id v26;
  const char *v27;
  int v28;
  id v29;
  __int16 v30;
  _BYTE v31[14];
  __int16 v32;
  _QWORD v33[2];
  uint8_t buf[4];
  id v35;
  __int16 v36;
  _BYTE v37[14];
  __int16 v38;
  _QWORD v39[201];

  v3 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    v4 = a2;
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102154B58);
    v5 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
    {
      v6 = objc_msgSend(*(id *)(v3 + 56), "UTF8String");
      v7 = objc_msgSend(*(id *)(a1 + 32), "assetId");
      v8 = objc_msgSend(*(id *)(a1 + 32), "state");
      v9 = objc_msgSend(*(id *)(a1 + 32), "attributes");
      *(_DWORD *)buf = 136381699;
      v35 = v6;
      v36 = 1026;
      *(_DWORD *)v37 = v4;
      *(_WORD *)&v37[4] = 2113;
      *(_QWORD *)&v37[6] = v7;
      v38 = 1025;
      LODWORD(v39[0]) = v8;
      WORD2(v39[0]) = 2113;
      *(_QWORD *)((char *)v39 + 6) = v9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#CLMA,%{private}s,asset purge failed,error,%{public}d,assetID,%{private}@,state,%{private}d,attributes,%{private}@", buf, 0x2Cu);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_16;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102154B58);
    v10 = qword_1022A02A8;
    v11 = objc_msgSend(*(id *)(v3 + 56), "UTF8String");
    v12 = objc_msgSend(*(id *)(a1 + 32), "assetId");
    v13 = objc_msgSend(*(id *)(a1 + 32), "state");
    v14 = objc_msgSend(*(id *)(a1 + 32), "attributes");
    v28 = 136381699;
    v29 = v11;
    v30 = 1026;
    *(_DWORD *)v31 = v4;
    *(_WORD *)&v31[4] = 2113;
    *(_QWORD *)&v31[6] = v12;
    v32 = 1025;
    LODWORD(v33[0]) = v13;
    WORD2(v33[0]) = 2113;
    *(_QWORD *)((char *)v33 + 6) = v14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 16, "#CLMA,%{private}s,asset purge failed,error,%{public}d,assetID,%{private}@,state,%{private}d,attributes,%{private}@", &v28, 44);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 0, "void CLMobileAsset::purgeAsset(MAAsset *)_block_invoke", "%s\n", v15);
    if (v16 == buf)
      goto LABEL_16;
LABEL_20:
    free(v16);
    goto LABEL_16;
  }
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_102154B58);
  v17 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
  {
    v18 = objc_msgSend(*(id *)(v3 + 56), "UTF8String");
    v19 = objc_msgSend(*(id *)(a1 + 32), "assetId");
    v20 = objc_msgSend(*(id *)(a1 + 32), "state");
    v21 = objc_msgSend(*(id *)(a1 + 32), "attributes");
    *(_DWORD *)buf = 136381443;
    v35 = v18;
    v36 = 2113;
    *(_QWORD *)v37 = v19;
    *(_WORD *)&v37[8] = 1025;
    *(_DWORD *)&v37[10] = v20;
    v38 = 2113;
    v39[0] = v21;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "#CLMA,%{private}s,asset purge succeeded,assetID,%{private}@,state,%{private}d,attributes,%{private}@", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102154B58);
    v22 = qword_1022A02A8;
    v23 = objc_msgSend(*(id *)(v3 + 56), "UTF8String");
    v24 = objc_msgSend(*(id *)(a1 + 32), "assetId");
    v25 = objc_msgSend(*(id *)(a1 + 32), "state");
    v26 = objc_msgSend(*(id *)(a1 + 32), "attributes");
    v28 = 136381443;
    v29 = v23;
    v30 = 2113;
    *(_QWORD *)v31 = v24;
    *(_WORD *)&v31[8] = 1025;
    *(_DWORD *)&v31[10] = v25;
    v32 = 2113;
    v33[0] = v26;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v22, 2, "#CLMA,%{private}s,asset purge succeeded,assetID,%{private}@,state,%{private}d,attributes,%{private}@", &v28, 38);
    v16 = (uint8_t *)v27;
    sub_100512490("Generic", 1, 0, 2, "void CLMobileAsset::purgeAsset(MAAsset *)_block_invoke", "%s\n", v27);
    if (v16 != buf)
      goto LABEL_20;
  }
LABEL_16:

}

void sub_100800E40(uint64_t a1, xpc_activity_t activity)
{
  uint64_t v2;
  xpc_activity_state_t state;
  NSObject *v4;
  id v5;
  NSObject *v6;
  int v7;
  NSObject *v8;
  id v9;
  uint64_t v10;
  id v11;
  const char *v12;
  uint8_t *v13;
  uint64_t v14;
  id v15;
  const char *v16;
  uint8_t *v17;
  _QWORD block[5];
  int v19;
  id v20;
  __int16 v21;
  int v22;
  uint8_t buf[4];
  id v24;
  __int16 v25;
  int v26;

  v2 = *(_QWORD *)(a1 + 32);
  state = xpc_activity_get_state(activity);
  if (state == 2)
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102154B58);
    v4 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v5 = objc_msgSend(*(id *)(v2 + 56), "UTF8String");
      *(_DWORD *)buf = 136380675;
      v24 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,asset purge activity handler triggered", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102154B58);
      v10 = qword_1022A02A8;
      v11 = objc_msgSend(*(id *)(v2 + 56), "UTF8String");
      v19 = 136380675;
      v20 = v11;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 0, "#CLMA,%{private}s,asset purge activity handler triggered", &v19, 12);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "void CLMobileAsset::registerAssetPurgeActivity()_block_invoke", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    v6 = objc_msgSend(objc_msgSend(*(id *)(v2 + 48), "silo"), "queue");
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1008011C4;
    block[3] = &unk_10212ECA0;
    block[4] = v2;
    dispatch_async(v6, block);
  }
  else
  {
    v7 = state;
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102154B58);
    v8 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = objc_msgSend(*(id *)(v2 + 56), "UTF8String");
      *(_DWORD *)buf = 136380931;
      v24 = v9;
      v25 = 1026;
      v26 = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,asset purge activity handler triggered with unexpected state %{public}d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102154B58);
      v14 = qword_1022A02A8;
      v15 = objc_msgSend(*(id *)(v2 + 56), "UTF8String");
      v19 = 136380931;
      v20 = v15;
      v21 = 1026;
      v22 = v7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v14, 0, "#CLMA,%{private}s,asset purge activity handler triggered with unexpected state %{public}d", &v19, 18);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "void CLMobileAsset::registerAssetPurgeActivity()_block_invoke", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
  }
}

void sub_1008011C4(uint64_t a1)
{
  sub_1008011CC(*(_QWORD *)(a1 + 32));
}

void sub_1008011CC(uint64_t a1)
{
  NSObject *v2;
  id v3;
  uint64_t v4;
  id v5;
  const char *v6;
  uint8_t *v7;
  id v8;
  _QWORD v9[6];
  int v10;
  id v11;
  uint8_t buf[4];
  id v13;

  if (*(_BYTE *)(a1 + 178))
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102154B58);
    v2 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v3 = objc_msgSend(*(id *)(a1 + 56), "UTF8String");
      *(_DWORD *)buf = 136380675;
      v13 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,asset purge aborted due to an asset download in progress", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102154B58);
      v4 = qword_1022A02A8;
      v5 = objc_msgSend(*(id *)(a1 + 56), "UTF8String");
      v10 = 136380675;
      v11 = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v4, 0, "#CLMA,%{private}s,asset purge aborted due to an asset download in progress", &v10, 12);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLMobileAsset::queryForAssetsToPurge()", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  else
  {
    v8 = objc_msgSend(objc_alloc((Class)MAAssetQuery), "initWithType:", *(_QWORD *)(a1 + 64));
    objc_msgSend(v8, "returnTypes:", 1);
    objc_msgSend(v8, "setDoNotBlockBeforeFirstUnlock:", 1);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1008013F8;
    v9[3] = &unk_102154B28;
    v9[4] = v8;
    v9[5] = a1;
    objc_msgSend(v8, "queryMetaData:", v9);
  }
}

void sub_1008013F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  _QWORD block[7];

  v4 = *(_QWORD *)(a1 + 40);
  v5 = objc_msgSend(objc_msgSend(*(id *)(v4 + 48), "silo"), "queue");
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100801478;
  block[3] = &unk_102153F50;
  block[5] = v4;
  block[6] = a2;
  block[4] = *(_QWORD *)(a1 + 32);
  dispatch_async(v5, block);
}

void sub_100801478(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  NSObject *v7;
  id v8;
  uint64_t v9;
  id v10;
  const char *v11;
  uint8_t *v12;
  id v13;
  id v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  NSObject *v20;
  id v21;
  id v22;
  unsigned int v23;
  id v24;
  NSObject *v25;
  id v26;
  id v27;
  unsigned int v28;
  id v29;
  uint64_t v30;
  id v31;
  id v32;
  unsigned int v33;
  id v34;
  const char *v35;
  uint8_t *v36;
  uint64_t v37;
  id v38;
  id v39;
  unsigned int v40;
  id v41;
  const char *v42;
  uint8_t *v43;
  id v44;
  NSObject *v45;
  id v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  id v52;
  const char *v53;
  uint64_t v54;
  id obj;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  int v61;
  id v62;
  __int16 v63;
  _BYTE v64[14];
  __int16 v65;
  id v66;
  uint8_t v67[128];
  uint8_t buf[4];
  id v69;
  __int16 v70;
  _BYTE v71[14];
  __int16 v72;
  id v73;

  v3 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(a1 + 48);
  v4 = v2 > 9;
  v5 = (1 << v2) & 0x205;
  if (v4 || v5 == 0)
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102154B58);
    v45 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v46 = objc_msgSend(*(id *)(v3 + 56), "UTF8String");
      v47 = *(_QWORD *)(a1 + 48);
      v48 = objc_msgSend(*(id *)(a1 + 32), "queryParams");
      *(_DWORD *)buf = 136381187;
      v69 = v46;
      v70 = 1026;
      *(_DWORD *)v71 = v47;
      *(_WORD *)&v71[4] = 2113;
      *(_QWORD *)&v71[6] = v48;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,asset purge query failed with error %{public}d,queryParams,%{private}@", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102154B58);
      v49 = qword_1022A02A8;
      v50 = objc_msgSend(*(id *)(v3 + 56), "UTF8String");
      v51 = *(_QWORD *)(a1 + 48);
      v52 = objc_msgSend(*(id *)(a1 + 32), "queryParams");
      v61 = 136381187;
      v62 = v50;
      v63 = 1026;
      *(_DWORD *)v64 = v51;
      *(_WORD *)&v64[4] = 2113;
      *(_QWORD *)&v64[6] = v52;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v49, 0, "#CLMA,%{private}s,asset purge query failed with error %{public}d,queryParams,%{private}@", &v61, 28);
      v12 = (uint8_t *)v53;
      sub_100512490("Generic", 1, 0, 2, "void CLMobileAsset::queryForAssetsToPurge()_block_invoke", "%s\n", v53);
      if (v12 != buf)
        goto LABEL_56;
    }
  }
  else
  {
    if (*(_BYTE *)(v3 + 178))
    {
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102154B58);
      v7 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
      {
        v8 = objc_msgSend(*(id *)(v3 + 56), "UTF8String");
        *(_DWORD *)buf = 136380675;
        v69 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,asset purge query aborted due to an asset download in progress", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 2))
        return;
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102154B58);
      v9 = qword_1022A02A8;
      v10 = objc_msgSend(*(id *)(v3 + 56), "UTF8String");
      v61 = 136380675;
      v62 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 0, "#CLMA,%{private}s,asset purge query aborted due to an asset download in progress", &v61, 12);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLMobileAsset::queryForAssetsToPurge()_block_invoke", "%s\n", v11);
      if (v12 == buf)
        return;
LABEL_56:
      free(v12);
      return;
    }
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    obj = objc_msgSend(*(id *)(a1 + 32), "results");
    v13 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v57, v67, 16);
    if (v13)
    {
      v14 = v13;
      v15 = &qword_1022A0000;
      v16 = &qword_1022A0000;
      v17 = *(_QWORD *)v58;
      do
      {
        v18 = 0;
        do
        {
          if (*(_QWORD *)v58 != v17)
            objc_enumerationMutation(obj);
          v19 = *(void **)(*((_QWORD *)&v57 + 1) + 8 * (_QWORD)v18);
          if ((*(unsigned int (**)(uint64_t, void *))(*(_QWORD *)v3 + 64))(v3, v19)
            && sub_1007FA3F0(v19))
          {
            if (v15[84] != -1)
              dispatch_once(&qword_1022A02A0, &stru_102154B58);
            v20 = v16[85];
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
            {
              v21 = objc_msgSend(*(id *)(v3 + 56), "UTF8String");
              v22 = objc_msgSend(v19, "assetId");
              v23 = objc_msgSend(v19, "state");
              v24 = objc_msgSend(v19, "attributes");
              *(_DWORD *)buf = 136381443;
              v69 = v21;
              v70 = 2113;
              *(_QWORD *)v71 = v22;
              v15 = &qword_1022A0000;
              *(_WORD *)&v71[8] = 1025;
              *(_DWORD *)&v71[10] = v23;
              v16 = &qword_1022A0000;
              v72 = 2113;
              v73 = v24;
              _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,attempting to purge asset,assetID,%{private}@,state,%{private}d,attributes,%{private}@", buf, 0x26u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (v15[84] != -1)
                dispatch_once(&qword_1022A02A0, &stru_102154B58);
              v37 = v16[85];
              v38 = objc_msgSend(*(id *)(v3 + 56), "UTF8String");
              v39 = objc_msgSend(v19, "assetId");
              v40 = objc_msgSend(v19, "state");
              v41 = objc_msgSend(v19, "attributes");
              v61 = 136381443;
              v62 = v38;
              v63 = 2113;
              *(_QWORD *)v64 = v39;
              *(_WORD *)&v64[8] = 1025;
              *(_DWORD *)&v64[10] = v40;
              v65 = 2113;
              v66 = v41;
              LODWORD(v54) = 38;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v37, 0, "#CLMA,%{private}s,attempting to purge asset,assetID,%{private}@,state,%{private}d,attributes,%{private}@", &v61, v54);
              v43 = (uint8_t *)v42;
              sub_100512490("Generic", 1, 0, 2, "void CLMobileAsset::queryForAssetsToPurge()_block_invoke", "%s\n", v42);
              if (v43 != buf)
                free(v43);
              v15 = &qword_1022A0000;
              v16 = &qword_1022A0000;
            }
            sub_1008007A8(v3, v19);
          }
          else
          {
            if (v15[84] != -1)
              dispatch_once(&qword_1022A02A0, &stru_102154B58);
            v25 = v16[85];
            if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
            {
              v26 = objc_msgSend(*(id *)(v3 + 56), "UTF8String");
              v27 = objc_msgSend(v19, "assetId");
              v28 = objc_msgSend(v19, "state");
              v29 = objc_msgSend(v19, "attributes");
              *(_DWORD *)buf = 136381443;
              v69 = v26;
              v15 = &qword_1022A0000;
              v70 = 2113;
              *(_QWORD *)v71 = v27;
              v16 = &qword_1022A0000;
              *(_WORD *)&v71[8] = 1025;
              *(_DWORD *)&v71[10] = v28;
              v72 = 2113;
              v73 = v29;
              _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,not purging asset,assetID,%{private}@,state,%{private}d,attributes,%{private}@", buf, 0x26u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (v15[84] != -1)
                dispatch_once(&qword_1022A02A0, &stru_102154B58);
              v30 = v16[85];
              v31 = objc_msgSend(*(id *)(v3 + 56), "UTF8String");
              v32 = objc_msgSend(v19, "assetId");
              v33 = objc_msgSend(v19, "state");
              v34 = objc_msgSend(v19, "attributes");
              v61 = 136381443;
              v62 = v31;
              v63 = 2113;
              *(_QWORD *)v64 = v32;
              *(_WORD *)&v64[8] = 1025;
              *(_DWORD *)&v64[10] = v33;
              v65 = 2113;
              v66 = v34;
              LODWORD(v54) = 38;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v30, 0, "#CLMA,%{private}s,not purging asset,assetID,%{private}@,state,%{private}d,attributes,%{private}@", &v61, v54);
              v36 = (uint8_t *)v35;
              sub_100512490("Generic", 1, 0, 2, "void CLMobileAsset::queryForAssetsToPurge()_block_invoke", "%s\n", v35);
              if (v36 != buf)
                free(v36);
              v15 = &qword_1022A0000;
              v16 = &qword_1022A0000;
            }
          }
          v18 = (char *)v18 + 1;
        }
        while (v14 != v18);
        v44 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v57, v67, 16);
        v14 = v44;
      }
      while (v44);
    }

  }
}

void sub_100801CC0(uint64_t a1)
{
  NSObject *v2;
  id v3;
  uint64_t v4;
  int v5;
  double v6;
  double v7;
  double v8;
  double v9;
  unsigned int v10;
  uint64_t i;
  void *v12;
  void *v13;
  NSObject *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  const char *v18;
  char *v19;
  const char *v20;
  char *v21;
  uint64_t v22;
  void *__p[2];
  uint64_t v24;
  uint64_t v25[3];
  char *v26;
  _BYTE *v27;
  char *v28;
  void **v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  int v40;
  _BYTE v41[28];
  __int128 v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  __int16 v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  _BYTE buf[14];
  uint64_t v75;
  int v76;
  __int16 v77;
  int v78;
  _DWORD v79[34];
  char v80;
  int v81;
  int v82;
  int v83;
  int v84;
  uint64_t v85;

  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_102154B58);
  v2 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = objc_msgSend(*(id *)(a1 + 56), "UTF8String");
    v4 = *(_QWORD *)(a1 + 112);
    *(_DWORD *)buf = 136380931;
    *(_QWORD *)&buf[4] = v3;
    *(_WORD *)&buf[12] = 2050;
    v75 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,reporting catalog download not triggered event,lastSuccessfulCatalogDownload,%{public}.1f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102154B58);
    v15 = qword_1022A02A8;
    v16 = objc_msgSend(*(id *)(a1 + 56), "UTF8String");
    v17 = *(_QWORD *)(a1 + 112);
    v40 = 136380931;
    *(_QWORD *)v41 = v16;
    *(_WORD *)&v41[8] = 2050;
    *(_QWORD *)&v41[10] = v17;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v15, 0, "#CLMA,%{private}s,reporting catalog download not triggered event,lastSuccessfulCatalogDownload,%{public}.1f", &v40, 22);
    v19 = (char *)v18;
    sub_100512490("Generic", 1, 0, 2, "void CLMobileAsset::reportDownloadNotTriggeredAwd()", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  *(_QWORD *)&v41[4] = 0xBFF0000000000000;
  *(_OWORD *)&v41[12] = 0u;
  v42 = 0u;
  v44 = -1;
  v43 = 0;
  v45 = -2;
  v46 = -1;
  v47 = -1;
  v48 = -1;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v53 = -1;
  v54 = -1;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  v59 = -1;
  v60 = -1;
  v58 = 0;
  v61 = 0;
  v62 = 0;
  v63 = 0;
  v64 = 0;
  v65 = -1;
  v66 = -1;
  v67 = 0;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v71 = -1;
  v72 = -1;
  v73 = 0;
  LOBYTE(v40) = 1;
  *(_QWORD *)&v41[4] = CFAbsoluteTimeGetCurrent();
  std::string::assign((std::string *)&v41[12], "com.apple.locationd");
  v5 = *(_DWORD *)(a1 + 72);
  DWORD2(v42) = 5;
  HIDWORD(v42) = v5;
  if (*(double *)&v41[4] > 0.0)
  {
    v6 = *(double *)(a1 + 104);
    if (v6 > 0.0)
      HIDWORD(v46) = llround((*(double *)&v41[4] - v6) / 86400.0);
  }
  if (*(double *)&v41[4] > 0.0)
  {
    v7 = *(double *)(a1 + 112);
    if (v7 > 0.0)
      LODWORD(v47) = llround((*(double *)&v41[4] - v7) / 86400.0);
  }
  if (*(double *)&v41[4] > 0.0)
  {
    v8 = *(double *)(a1 + 120);
    if (v8 > 0.0)
      HIDWORD(v47) = llround((*(double *)&v41[4] - v8) / 86400.0);
  }
  if (*(double *)&v41[4] <= 0.0 || (v9 = *(double *)(a1 + 128), v9 <= 0.0))
  {
    v10 = v48;
  }
  else
  {
    v10 = llround((*(double *)&v41[4] - v9) / 86400.0);
    v48 = v10;
  }
  LOBYTE(v49) = *(_BYTE *)(a1 + 136);
  *(_DWORD *)buf = 162;
  *(_DWORD *)&buf[8] = HIDWORD(v47);
  v79[0] = 0;
  v79[2] = 163;
  v79[4] = v10;
  v79[10] = 0;
  v79[12] = 164;
  v79[14] = HIDWORD(v46);
  v79[20] = 0;
  v79[22] = 165;
  v79[24] = v47;
  v79[30] = 0;
  v79[32] = 160;
  v80 = v49;
  v81 = 7;
  v82 = 161;
  v83 = v5;
  v84 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = (void **)&v26;
  LOBYTE(v30) = 0;
  v26 = (char *)operator new(0xF0uLL);
  v27 = v26;
  v28 = v26 + 240;
  v27 = (_BYTE *)sub_1006AB40C((uint64_t)&v28, (uint64_t)buf, (uint64_t)&v85, (uint64_t)v26);
  for (i = 208; i != -32; i -= 40)
    sub_1001F8644((uint64_t)&buf[i]);
  v12 = *(void **)(a1 + 240);
  memset(v25, 0, sizeof(v25));
  sub_1006AB68C(v25, (uint64_t)v26, (uint64_t)v27, 0xCCCCCCCCCCCCCCCDLL * ((v27 - v26) >> 3));
  objc_msgSend(v12, "setMeasurements:", sub_1006A7590(v25));
  *(_QWORD *)buf = v25;
  sub_1006AB5A0((void ***)buf);
  v13 = *(void **)(a1 + 240);
  if (byte_1023112B7 < 0)
  {
    sub_100115CE4(__p, (void *)xmmword_1023112A0, *((unint64_t *)&xmmword_1023112A0 + 1));
  }
  else
  {
    *(_OWORD *)__p = xmmword_1023112A0;
    v24 = unk_1023112B0;
  }
  objc_msgSend(v13, "submitEvent:", sub_1007FE6A8((__int128 *)__p));
  if (SHIBYTE(v24) < 0)
    operator delete(__p[0]);
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_102154B58);
  v14 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67241472;
    *(_DWORD *)&buf[4] = HIDWORD(v47);
    *(_WORD *)&buf[8] = 1026;
    *(_DWORD *)&buf[10] = v48;
    LOWORD(v75) = 1026;
    *(_DWORD *)((char *)&v75 + 2) = HIDWORD(v46);
    HIWORD(v75) = 1026;
    v76 = v47;
    v77 = 1026;
    v78 = v49;
    LOWORD(v79[0]) = 1026;
    *(_DWORD *)((char *)v79 + 2) = HIDWORD(v42);
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#CLMA,#careport,DownloadNotTriggered,MADownloadNotTriggeredDaysSinceLastAssetDownloadAttempt,%{public}d,MADownloadNotTriggeredDaysSinceLastAssetDownloadSuccess,%{public}d,MADownloadNotTriggeredDaysSinceLastCatalogDownloadAttempt,%{public}d,MADownloadNotTriggeredDaysSinceLastCatalogDownloadSuccess,%{public}d,MADownloadNotTriggeredAggressiveCriteriaUsed,%{public}d,MADownloadNotTriggeredAssetType,%{public}d", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102154B58);
    LODWORD(v29) = 67241472;
    HIDWORD(v29) = HIDWORD(v47);
    v30 = 1026;
    v31 = v48;
    v32 = 1026;
    v33 = HIDWORD(v46);
    v34 = 1026;
    v35 = v47;
    v36 = 1026;
    v37 = v49;
    v38 = 1026;
    v39 = HIDWORD(v42);
    LODWORD(v22) = 38;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 0, "#CLMA,#careport,DownloadNotTriggered,MADownloadNotTriggeredDaysSinceLastAssetDownloadAttempt,%{public}d,MADownloadNotTriggeredDaysSinceLastAssetDownloadSuccess,%{public}d,MADownloadNotTriggeredDaysSinceLastCatalogDownloadAttempt,%{public}d,MADownloadNotTriggeredDaysSinceLastCatalogDownloadSuccess,%{public}d,MADownloadNotTriggeredAggressiveCriteriaUsed,%{public}d,MADownloadNotTriggeredAssetType,%{public}d", &v29, v22);
    v21 = (char *)v20;
    sub_100512490("Generic", 1, 0, 2, "void CLMobileAsset::reportDownloadNotTriggeredAwd()", "%s\n", v20);
    if (v21 != buf)
      free(v21);
  }
  *(_QWORD *)buf = &v26;
  sub_1006AB5A0((void ***)buf);
  if (SHIBYTE(v70) < 0)
    operator delete(v68);
  if (SHIBYTE(v64) < 0)
    operator delete(v62);
  if (SHIBYTE(v58) < 0)
    operator delete(v56);
  if (SHIBYTE(v52) < 0)
    operator delete(v50);
  if (SBYTE7(v42) < 0)
    operator delete(*(void **)&v41[12]);
}

void sub_1008023A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  a63 = (uint64_t)&a18;
  sub_1006AB5A0((void ***)&a63);
  sub_1007FDDE0((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_10080243C(uint64_t a1)
{
  NSObject *v2;
  id v3;
  int v4;
  double v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  id v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  id v14;
  uint8_t buf[4];
  _BYTE v16[12];
  void *v17[2];
  __int128 v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  __int16 v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  void *__p;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;

  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_102154B58);
  v2 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = objc_msgSend(*(id *)(a1 + 56), "UTF8String");
    *(_DWORD *)buf = 136380675;
    *(_QWORD *)v16 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,reporting asset version info", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102154B58);
    v9 = qword_1022A02A8;
    v10 = objc_msgSend(*(id *)(a1 + 56), "UTF8String");
    v13 = 136380675;
    v14 = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 0, "#CLMA,%{private}s,reporting asset version info", &v13, 12);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLMobileAsset::reportVersionInfoAwd()", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  *(_QWORD *)&v16[4] = 0xBFF0000000000000;
  *(_OWORD *)v17 = 0u;
  v18 = 0u;
  v19 = 0;
  v20 = -1;
  v21 = -2;
  v22 = -1;
  v23 = -1;
  v24 = -1;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = -1;
  v30 = -1;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v35 = -1;
  v36 = -1;
  v34 = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v41 = -1;
  v42 = -1;
  v43 = 0;
  __p = 0;
  v45 = 0;
  v46 = 0;
  v47 = -1;
  v48 = -1;
  v49 = 0;
  buf[0] = 1;
  *(_QWORD *)&v16[4] = CFAbsoluteTimeGetCurrent();
  std::string::assign((std::string *)v17, "com.apple.locationd");
  v4 = *(_DWORD *)(a1 + 72);
  DWORD2(v18) = 6;
  HIDWORD(v18) = v4;
  if (*(double *)&v16[4] > 0.0)
  {
    v5 = *(double *)(a1 + 104);
    if (v5 > 0.0)
      HIDWORD(v22) = llround((*(double *)&v16[4] - v5) / 86400.0);
  }
  if (*(double *)&v16[4] > 0.0)
  {
    v6 = *(double *)(a1 + 112);
    if (v6 > 0.0)
      LODWORD(v23) = llround((*(double *)&v16[4] - v6) / 86400.0);
  }
  if (*(double *)&v16[4] > 0.0)
  {
    v7 = *(double *)(a1 + 120);
    if (v7 > 0.0)
      HIDWORD(v23) = llround((*(double *)&v16[4] - v7) / 86400.0);
  }
  if (*(double *)&v16[4] > 0.0)
  {
    v8 = *(double *)(a1 + 128);
    if (v8 > 0.0)
      v24 = llround((*(double *)&v16[4] - v8) / 86400.0);
  }
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)a1 + 40))(a1, buf);
  if (SHIBYTE(v46) < 0)
    operator delete(__p);
  if (SHIBYTE(v40) < 0)
    operator delete(v38);
  if (SHIBYTE(v34) < 0)
    operator delete(v32);
  if (SHIBYTE(v28) < 0)
    operator delete(v26);
  if (SBYTE7(v18) < 0)
    operator delete(v17[0]);
}

void sub_1008027A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  _Unwind_Resume(exception_object);
}

void sub_1008027C4(id a1)
{
  qword_1022A02A8 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

char *sub_1008027F0@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[55] < 0)
    return (char *)sub_100115CE4((_BYTE *)a2, *((void **)result + 4), *((_QWORD *)result + 5));
  *(_OWORD *)a2 = *((_OWORD *)result + 2);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)result + 6);
  return result;
}

_QWORD *sub_10080281C(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  __int128 v3;

  result = (_QWORD *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
    return sub_100115CE4(result, *(void **)(a2 + 32), *(_QWORD *)(a2 + 40));
  v3 = *(_OWORD *)(a2 + 32);
  result[2] = *(_QWORD *)(a2 + 48);
  *(_OWORD *)result = v3;
  return result;
}

void sub_10080284C(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

uint64_t sub_100802860(_QWORD *a1, _BYTE *a2, int a3)
{
  NSObject *v3;
  uint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  NSObject *v15;
  const char *v16;
  uint8_t *v17;
  NSObject *v18;
  const char *v20;
  uint8_t *v21;
  const char *v22;
  unint64_t v23;
  unint64_t v24;
  const char *v25;
  uint8_t *v26;
  double v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  void *__p;
  _BYTE *v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  __int16 v36;
  unint64_t v37;
  __int16 v38;
  unint64_t v39;
  uint8_t buf[24];
  unint64_t v41;

  *a2 = 0;
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[1] - *a1) >> 4)) <= 0x2A)
  {
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_102154BD8);
    v3 = qword_1022A00B8;
    if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "CLRS,CLRTD,too few points to detect", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00B0 != -1)
        dispatch_once(&qword_1022A00B0, &stru_102154BD8);
      LOWORD(v34) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 2, "CLRS,CLRTD,too few points to detect", &v34, 2);
      v21 = (uint8_t *)v20;
      sub_100512490("Generic", 1, 0, 2, "static BOOL CLRunningTrackDetector::detectRunningTrack(const std::vector<swan::RouteSmootherEpoch> &, BOOL &, const CLMotionActivity::Type)", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
    return 0;
  }
  __p = 0;
  v32 = 0;
  v33 = 0;
  if ((sub_100802FDC(a1, &__p) & 1) == 0)
  {
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_102154BD8);
    v15 = qword_1022A00B8;
    if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "CLRS,CLRTD,failed to convert input points to enu coordinates", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_35;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_102154BD8);
    LOWORD(v34) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 16, "CLRS,CLRTD,failed to convert input points to enu coordinates", &v34, 2);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 0, "static BOOL CLRunningTrackDetector::detectRunningTrack(const std::vector<swan::RouteSmootherEpoch> &, BOOL &, const CLMotionActivity::Type)", "%s\n", v16);
    goto LABEL_46;
  }
  v29 = 0;
  v30 = 0;
  if (!sub_100803368((float64x2_t **)&__p, &v30, &v29))
  {
LABEL_29:
    *a2 = 0;
    v4 = 1;
    goto LABEL_36;
  }
  v8 = v30;
  v9 = 0xAAAAAAAAAAAAAAABLL * ((v32 - (_BYTE *)__p) >> 3);
  if (v30 < v9)
  {
    v10 = v29;
    if (v29 < v9)
    {
      if (qword_1022A00B0 != -1)
        dispatch_once(&qword_1022A00B0, &stru_102154BD8);
      v11 = qword_1022A00B8;
      if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEBUG))
      {
        v12 = *(_QWORD *)(*a1 + 112 * v8);
        v13 = *(_QWORD *)(*a1 + 112 * v10);
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = v12;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v13;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "CLRS,CLRTD,loop detected from,%.1lf,to,%.1lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00B0 != -1)
          dispatch_once(&qword_1022A00B0, &stru_102154BD8);
        v23 = *(_QWORD *)(*a1 + 112 * v8);
        v24 = *(_QWORD *)(*a1 + 112 * v10);
        v34 = 134218240;
        v35 = v23;
        v36 = 2048;
        v37 = v24;
        LODWORD(v27) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 2, "CLRS,CLRTD,loop detected from,%.1lf,to,%.1lf", COERCE_DOUBLE(&v34), v27);
        v26 = (uint8_t *)v25;
        sub_100512490("Generic", 1, 0, 2, "static BOOL CLRunningTrackDetector::detectRunningTrack(const std::vector<swan::RouteSmootherEpoch> &, BOOL &, const CLMotionActivity::Type)", "%s\n", v25);
        if (v26 != buf)
          free(v26);
      }
      memset(buf, 0, sizeof(buf));
      sub_1002782D0(buf, (char *)__p + 24 * v8, (uint64_t)__p + 24 * v10, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(24 * (v10 - v8)) >> 3));
      v14 = sub_1008034E8((float64x2_t **)buf);
      if (*(_QWORD *)buf)
      {
        *(_QWORD *)&buf[8] = *(_QWORD *)buf;
        operator delete(*(void **)buf);
      }
      if (v14)
      {
        v4 = 1;
        *a2 = 1;
        sub_100803998(*a1 + 112 * v8, a3);
        goto LABEL_36;
      }
      goto LABEL_29;
    }
  }
  if (qword_1022A00B0 != -1)
    dispatch_once(&qword_1022A00B0, &stru_102154BD8);
  v18 = qword_1022A00B8;
  if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134218496;
    *(_QWORD *)&buf[4] = v8;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v29;
    *(_WORD *)&buf[22] = 2048;
    v41 = 0xAAAAAAAAAAAAAAABLL * ((v32 - (_BYTE *)__p) >> 3);
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "CLRS,CLRTD,loopStartIndex,%lu,loopEndIndex,%lu,out of enuCoordinates size,%lu", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_102154BD8);
    v34 = 134218496;
    v35 = v8;
    v36 = 2048;
    v37 = v29;
    v38 = 2048;
    v39 = 0xAAAAAAAAAAAAAAABLL * ((v32 - (_BYTE *)__p) >> 3);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 16, "CLRS,CLRTD,loopStartIndex,%lu,loopEndIndex,%lu,out of enuCoordinates size,%lu", &v34, 32, v28);
    v17 = (uint8_t *)v22;
    sub_100512490("Generic", 1, 0, 0, "static BOOL CLRunningTrackDetector::detectRunningTrack(const std::vector<swan::RouteSmootherEpoch> &, BOOL &, const CLMotionActivity::Type)", "%s\n", v22);
LABEL_46:
    if (v17 != buf)
      free(v17);
  }
LABEL_35:
  v4 = 0;
LABEL_36:
  if (__p)
  {
    v32 = __p;
    operator delete(__p);
  }
  return v4;
}

void sub_100802F8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100802FDC(_QWORD *a1, void **a2)
{
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  char *v23;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  uint8_t buf[4];
  uint64_t v40;
  __int16 v41;
  uint64_t v42;

  v4 = *(double *)(*a1 + 8);
  v5 = *(double *)(*a1 + 16);
  sub_100803C28(a2, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[1] - *a1) >> 4));
  v6 = *a1;
  v7 = a1[1];
  if (*a1 == v7)
    return 1;
  while (1)
  {
    v33 = 0;
    v34 = 0;
    v32 = 0;
    if (!sub_10011E780(dbl_102304AE8, (double *)&v34, (double *)&v33, (double *)&v32, v4, v5, 0.0, *(double *)(v6 + 8), *(double *)(v6 + 16), 0.0))break;
    v8 = v33;
    v9 = v34;
    v10 = v32;
    v12 = (char *)a2[1];
    v11 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v11)
    {
      v13 = 0xAAAAAAAAAAAAAAABLL * ((v12 - (_BYTE *)*a2) >> 3);
      v14 = v13 + 1;
      if (v13 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_100259694();
      v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (_QWORD)*a2) >> 3);
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x555555555555555)
        v16 = 0xAAAAAAAAAAAAAAALL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)sub_1002596A8((uint64_t)(a2 + 2), v16);
      else
        v17 = 0;
      v18 = &v17[24 * v13];
      *(_QWORD *)v18 = v9;
      *((_QWORD *)v18 + 1) = v8;
      *((_QWORD *)v18 + 2) = v10;
      v20 = (char *)*a2;
      v19 = (char *)a2[1];
      v21 = v18;
      if (v19 != *a2)
      {
        do
        {
          v22 = *(_OWORD *)(v19 - 24);
          *((_QWORD *)v21 - 1) = *((_QWORD *)v19 - 1);
          *(_OWORD *)(v21 - 24) = v22;
          v21 -= 24;
          v19 -= 24;
        }
        while (v19 != v20);
        v19 = (char *)*a2;
      }
      v23 = v18 + 24;
      *a2 = v21;
      a2[1] = v18 + 24;
      a2[2] = &v17[24 * v16];
      if (v19)
        operator delete(v19);
      a2[1] = v23;
    }
    else
    {
      *(_QWORD *)v12 = v34;
      *((_QWORD *)v12 + 1) = v8;
      *((_QWORD *)v12 + 2) = v10;
      a2[1] = v12 + 24;
    }
    v6 += 112;
    if (v6 == v7)
      return 1;
  }
  if (qword_1022A00B0 != -1)
    dispatch_once(&qword_1022A00B0, &stru_102154BD8);
  v25 = qword_1022A00B8;
  if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_INFO))
  {
    v26 = *(_QWORD *)(v6 + 8);
    v27 = *(_QWORD *)(v6 + 16);
    *(_DWORD *)buf = 134283777;
    v40 = v26;
    v41 = 2049;
    v42 = v27;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "CLRS,CLRTD,Warning,Could not convert LLA Coordinate %{private}.7lf,%{private}.7lf to ENU", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_102154BD8);
    v28 = *(_QWORD *)(v6 + 8);
    v29 = *(_QWORD *)(v6 + 16);
    v35 = 134283777;
    v36 = v28;
    v37 = 2049;
    v38 = v29;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 1, "CLRS,CLRTD,Warning,Could not convert LLA Coordinate %{private}.7lf,%{private}.7lf to ENU", &v35, 22);
    v31 = (uint8_t *)v30;
    sub_100512490("Generic", 1, 0, 2, "static BOOL CLRunningTrackDetector::convertLLA2ENU(const std::vector<swan::RouteSmootherEpoch> &, std::vector<std::array<double, 3>> &)", "%s\n", v30);
    if (v31 != buf)
      free(v31);
  }
  return 0;
}

uint64_t sub_100803368(float64x2_t **a1, unint64_t *a2, unint64_t *a3)
{
  float64x2_t *v3;
  float64x2_t *v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  float64x2_t v8;
  unint64_t v9;
  float64x2_t *v10;
  _BOOL4 v11;
  unint64_t v12;
  float64x2_t v13;
  int v15;
  double v16;
  float64x2_t v17;
  int v18;
  float64x2_t v19;
  double v20;

  v3 = *a1;
  v4 = a1[1];
  v5 = ((char *)v4 - (char *)*a1) / 24;
  v6 = 0;
  if (v4 == *a1)
  {
LABEL_9:
    if (v4 == v3)
    {
      v11 = 0;
    }
    else
    {
      v9 = 0;
      v10 = *a1;
      do
      {
        v11 = v5 <= v9;
        if (v5 <= v9)
          break;
        if (v5 <= v6)
        {
          v16 = (double)v5 + -100.0;
          if (v16 <= 0.0)
          {
LABEL_24:
            v15 = 0;
            v11 = 1;
            return v11 & v15;
          }
          v12 = v5 - 1;
          v17 = *(float64x2_t *)((char *)v3 + 24 * v5 - 24);
          v18 = 1;
          while (1)
          {
            v19 = vsubq_f64(v17, *v3);
            if (vaddvq_f64(vmulq_f64(v19, v19)) < 400.0)
              break;
            v20 = (double)v18;
            v3 = (float64x2_t *)((char *)v3 + 24);
            ++v18;
            if (v16 <= v20)
              goto LABEL_24;
          }
LABEL_25:
          *a2 = v9;
          *a3 = v12;
          v11 = 1;
          v15 = 1;
          return v11 & v15;
        }
        v12 = v6;
        v13 = vsubq_f64(v3[24 * v6 / 0x10], *v10);
        if (vaddvq_f64(vmulq_f64(v13, v13)) < 400.0 && v9 > 0x64)
          goto LABEL_25;
        v6 += 2;
        ++v9;
        v10 = (float64x2_t *)((char *)v10 + 24);
      }
      while (v5 > v9);
    }
    v15 = 0;
    return v11 & v15;
  }
  else
  {
    if (v5 <= 1)
      v7 = 1;
    else
      v7 = ((char *)v4 - (char *)*a1) / 24;
    while (v5 > v6)
    {
      v8 = vsubq_f64(v3[24 * v6 / 0x10], *v3);
      if (vaddvq_f64(vmulq_f64(v8, v8)) < 400.0)
        v6 += 2;
      if (!--v7)
        goto LABEL_9;
    }
    return 0;
  }
}

BOOL sub_1008034E8(float64x2_t **a1)
{
  float64x2_t *v1;
  float64x2_t *v2;
  unint64_t v3;
  NSObject *v4;
  _BOOL8 result;
  const char *v6;
  uint8_t *v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t *v10;
  float64x2_t v11;
  unsigned int v12;
  float64x2_t v13;
  int v14;
  NSObject *v15;
  NSObject *v16;
  const char *v17;
  uint8_t *v18;
  uint64_t v19;
  _DWORD v20[2];
  __int16 v21;
  unint64_t v22;
  uint8_t buf[4];
  unsigned int v24;
  __int16 v25;
  unint64_t v26;

  v2 = *a1;
  v1 = a1[1];
  v3 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1 - (char *)*a1) >> 3);
  if (v3 >= 0x64)
  {
    if (v2 == v1)
      goto LABEL_23;
    v8 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v3), 0);
    v9 = 0uLL;
    v10 = *a1;
    do
    {
      v11 = *v10;
      v10 = (float64x2_t *)((char *)v10 + 24);
      v9 = vaddq_f64(v9, vdivq_f64(v11, v8));
    }
    while (v10 != v1);
    if (v2 == v1)
    {
LABEL_23:
      v12 = 0;
LABEL_24:
      if (qword_1022A00B0 != -1)
        dispatch_once(&qword_1022A00B0, &stru_102154BD8);
      v15 = qword_1022A00B8;
      if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109376;
        v24 = v12;
        v25 = 2048;
        v26 = v3;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "CLRS,CLRTD,track detected,numOutOfBoundaryPoints,%d,numOfPoints,%lu", buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00B0 != -1)
          dispatch_once(&qword_1022A00B0, &stru_102154BD8);
        v20[0] = 67109376;
        v20[1] = v12;
        v21 = 2048;
        v22 = v3;
        LODWORD(v19) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 2, "CLRS,CLRTD,track detected,numOutOfBoundaryPoints,%d,numOfPoints,%lu", v20, v19);
        v18 = (uint8_t *)v17;
        sub_100512490("Generic", 1, 0, 2, "static BOOL CLRunningTrackDetector::isRunningTrackByDistToCenter(const std::vector<std::array<double, 3>> &)", "%s\n", v17);
        if (v18 != buf)
          free(v18);
      }
      return 1;
    }
    else
    {
      v12 = 0;
      while (1)
      {
        v13 = vsubq_f64(*v2, v9);
        v13.f64[0] = vaddvq_f64(vmulq_f64(v13, v13));
        v14 = v13.f64[0] < *(double *)&qword_102304AE0;
        if (v13.f64[0] > *(double *)&qword_102304AD8)
          v14 = 1;
        v12 += v14;
        if ((double)v12 / (double)v3 > 0.1)
          break;
        v2 = (float64x2_t *)((char *)v2 + 24);
        if (v2 == v1)
          goto LABEL_24;
      }
      if (qword_1022A00B0 != -1)
        dispatch_once(&qword_1022A00B0, &stru_102154BD8);
      v16 = qword_1022A00B8;
      if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109376;
        v24 = v12;
        v25 = 2048;
        v26 = v3;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "CLRS,CLRTD,non-track detected,numOutOfBoundaryPoints,%d,numOfPoints,%lu", buf, 0x12u);
      }
      result = sub_1001BFF7C(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00B0 != -1)
          dispatch_once(&qword_1022A00B0, &stru_102154BD8);
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 2, "CLRS,CLRTD,non-track detected,numOutOfBoundaryPoints,%d,numOfPoints,%lu", v20, 18);
        goto LABEL_10;
      }
    }
  }
  else
  {
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_102154BD8);
    v4 = qword_1022A00B8;
    if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLRS,CLRTD,Not enough points to detect loop", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00B0 != -1)
        dispatch_once(&qword_1022A00B0, &stru_102154BD8);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 2, "CLRS,CLRTD,Not enough points to detect loop");
LABEL_10:
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "static BOOL CLRunningTrackDetector::isRunningTrackByDistToCenter(const std::vector<std::array<double, 3>> &)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
      return 0;
    }
  }
  return result;
}

void sub_100803998(uint64_t a1, int a2)
{
  double v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  std::string::size_type size;
  std::string *v9;
  void *v10;
  void *v11;
  int v12;
  void **v13;
  uint64_t v14;
  NSDictionary *(*v15)(uint64_t);
  void *v16;
  void *__p[2];
  _BYTE v18[7];
  char v19;
  int v20;
  std::string v21;
  std::string v22;
  std::string v23;
  _DWORD v24[2];

  *(_DWORD *)((char *)v24 + 3) = 0;
  v24[0] = 0;
  if (!sub_10011CE88(*(double *)(a1 + 8), *(double *)(a1 + 16))
    || sub_10011CE64(*(double *)(a1 + 8), *(double *)(a1 + 16)))
  {
    return;
  }
  v4 = *(double *)(a1 + 16);
  std::to_string(&v22, round(*(double *)(a1 + 8) * 1000.0) / 1000.0);
  v5 = std::string::append(&v22, ",");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v21, round(v4 * 1000.0) / 1000.0);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v21;
  else
    v7 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v21.__r_.__value_.__r.__words[2]);
  else
    size = v21.__r_.__value_.__l.__size_;
  v9 = std::string::append(&v23, (const std::string::value_type *)v7, size);
  v10 = (void *)v9->__r_.__value_.__r.__words[0];
  v11 = (void *)v9->__r_.__value_.__l.__size_;
  v24[0] = v9->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v24 + 3) = *(_DWORD *)((char *)&v9->__r_.__value_.__r.__words[2] + 3);
  v12 = SHIBYTE(v9->__r_.__value_.__r.__words[2]);
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v22.__r_.__value_.__l.__data_);
    if ((v12 & 0x80000000) == 0)
      goto LABEL_15;
  }
  else if ((v12 & 0x80000000) == 0)
  {
LABEL_15:
    if (!v12)
      return;
    v13 = _NSConcreteStackBlock;
    v14 = 3321888768;
    v15 = sub_100803D04;
    v16 = &unk_102154BA8;
    __p[0] = v10;
    __p[1] = v11;
    *(_DWORD *)v18 = v24[0];
    *(_DWORD *)&v18[3] = *(_DWORD *)((char *)v24 + 3);
    v19 = v12;
    goto LABEL_20;
  }
  if (!v11)
    goto LABEL_22;
  v13 = _NSConcreteStackBlock;
  v14 = 3321888768;
  v15 = sub_100803D04;
  v16 = &unk_102154BA8;
  sub_100115CE4(__p, v10, (unint64_t)v11);
LABEL_20:
  v20 = a2;
  AnalyticsSendEventLazy(CFSTR("com.apple.locationd.TS"), &v13);
  if ((v19 & 0x80000000) == 0)
  {
    if ((v12 & 0x80000000) == 0)
      return;
    goto LABEL_22;
  }
  operator delete(__p[0]);
  if (v12 < 0)
LABEL_22:
    operator delete(v10);
}

void sub_100803BAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  void *v31;
  int v32;

  if (a18 < 0)
    operator delete(__p);
  if (v32 < 0)
    operator delete(v31);
  _Unwind_Resume(exception_object);
}

void sub_100803C28(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_100259694();
    v5 = ((_BYTE *)a1[1] - (_BYTE *)*a1) / 24;
    v6 = (char *)sub_1002596A8(v3, a2);
    v7 = &v6[24 * v5];
    v9 = &v6[24 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *(_OWORD *)(v10 - 24);
        *((_QWORD *)v12 - 1) = *((_QWORD *)v10 - 1);
        *(_OWORD *)(v12 - 24) = v13;
        v12 -= 24;
        v10 -= 24;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

NSDictionary *sub_100803D04(uint64_t a1)
{
  _QWORD *v2;
  _QWORD v4[2];
  _QWORD v5[2];

  v4[0] = CFSTR("tll");
  v2 = (_QWORD *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    v2 = (_QWORD *)*v2;
  v4[1] = CFSTR("workoutActivityType");
  v5[0] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v2);
  v5[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 56));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 2);
}

void sub_100803DB4(id a1)
{
  qword_1022A00B8 = (uint64_t)os_log_create("com.apple.locationd.Position", "RouteSmoother");
}

double sub_100803DE0()
{
  qword_102304AD8 = 0x40C500D851EB851FLL;
  qword_102304AE0 = 0x407CE40000000000;
  return sub_1002433B8((uint64_t)&unk_102304AE8);
}

void sub_100803E14(uint64_t a1)
{
  uint64_t v1;

  if (!*(_QWORD *)(a1 + 16))
  {
    v1 = getpid();
    proc_disable_cpumon(v1);
    operator new();
  }
  sub_10190A420();
}

void sub_10080406C()
{
  operator delete();
}

void sub_100804098(_OWORD *a1)
{
  *a1 = 0u;
  a1[1] = 0u;
  sub_100803E14((uint64_t)a1);
}

uint64_t sub_1008040C4(uint64_t a1)
{
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (!*(_QWORD *)(a1 + 16))
    sub_10190A594();
  v2 = 0;
  v3 = 1;
  do
  {
    v4 = v3;
    v5 = a1 + 8 * v2;
    v8 = *(_QWORD *)(v5 + 16);
    v7 = (uint64_t *)(v5 + 16);
    v6 = v8;
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    v9 = *v7;
    *(_BYTE *)(*v7 + 20) = 1;
    if (!*(_QWORD *)(a1 + 8 * v2))
    {
      sub_10055D4D0(v9);
      operator delete();
    }
    *(_QWORD *)(a1 + 8 * v2) = 0;
    *v7 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
    v3 = 0;
    v2 = 1;
  }
  while ((v4 & 1) != 0);
  v10 = getpid();
  return proc_set_cpumon_defaults(v10);
}

uint64_t sub_10080417C(uint64_t a1)
{
  sub_1008040C4(a1);
  return a1;
}

uint64_t sub_1008041A4(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  const char *v11;
  uint8_t *v12;
  int v13;
  double v14;
  uint8_t buf[4];
  double v16;

  if (qword_10229FD30 != -1)
    dispatch_once(&qword_10229FD30, &stru_102154BF8);
  v4 = qword_10229FD38;
  if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134217984;
    v16 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "dutyCycle,%f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD30 != -1)
      dispatch_once(&qword_10229FD30, &stru_102154BF8);
    v13 = 134217984;
    v14 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD38, 1, "dutyCycle,%f", COERCE_DOUBLE(&v13));
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLSensorTemperatureController::setLoad(float)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  if (!*(_QWORD *)(a1 + 16))
    sub_10190A708();
  v5 = 0;
  v6 = 1;
  do
  {
    v7 = v6;
    v8 = a1 + 8 * v5;
    v9 = *(_QWORD *)(v8 + 16);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    *(float *)(*(_QWORD *)(v8 + 16) + 16) = a2;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
    v6 = 0;
    v5 = 1;
  }
  while ((v7 & 1) != 0);
  return result;
}

void sub_1008043B8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  _Unwind_Resume(a1);
}

void sub_1008043C4(uint64_t a1)
{
  void *v2;
  unint64_t v3;
  void *v4;
  _OWORD *v5;
  void *v6;
  unint64_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  int v14;
  int v15;
  float v16;
  double v17;
  double v18;

  v2 = malloc_type_malloc(0x9007uLL, 0x186FBABEuLL);
  v3 = ((unint64_t)v2 + 4103) & 0xFFFFFFFFFFFFF000;
  *(_QWORD *)(v3 - 8) = v2;
  v4 = malloc_type_malloc(0x77uLL, 0x186FBABEuLL);
  v5 = (_OWORD *)(((unint64_t)v4 + 71) & 0xFFFFFFFFFFFFFFC0);
  *((_QWORD *)v5 - 1) = v4;
  v6 = malloc_type_malloc(0x9007uLL, 0x186FBABEuLL);
  v7 = ((unint64_t)v6 + 4103) & 0xFFFFFFFFFFFFF000;
  *(_QWORD *)(v7 - 8) = v6;
  v8 = malloc_type_malloc(0x247uLL, 0x186FBABEuLL);
  v9 = 0;
  v10 = ((unint64_t)v8 + 71) & 0xFFFFFFFFFFFFFFC0;
  *(_QWORD *)(v10 - 8) = v8;
  v11 = (_OWORD *)(v3 | 0x20);
  *(_QWORD *)&v12 = 0x5A5A5A5A5A5A5A5ALL;
  *((_QWORD *)&v12 + 1) = 0x5A5A5A5A5A5A5A5ALL;
  *(_QWORD *)&v13 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
  do
  {
    *(v11 - 2) = v12;
    *(v11 - 1) = v13;
    *v11 = v13;
    v11[1] = v12;
    v11 += 4;
    v9 += 8;
  }
  while (v9 < 0xFF9);
  *v5 = xmmword_101BC2340;
  v5[1] = xmmword_101BC2350;
  v5[2] = xmmword_101BC2360;
  do
  {
    while (1)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
      v14 = *(unsigned __int8 *)(a1 + 20);
      if (*(_BYTE *)(a1 + 20))
      {
        v15 = 2;
        v16 = 0.0;
      }
      else
      {
        v15 = 0;
        v16 = fminf(fmaxf(*(float *)(a1 + 16), 0.01), 1.0);
      }
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
      if (v14)
        break;
      v17 = sub_100078B88();
      sub_10135E500();
      v18 = sub_100078B88();
      usleep(((v18 - v17) * (float)(1.0 - v16) * 1000000.0 / v16));
    }
  }
  while (!v15);
  if (v3)
    free(*(void **)(v3 - 8));
  free(*((void **)v5 - 1));
  if (v7)
    free(*(void **)(v7 - 8));
  if (v10)
    free(*(void **)(v10 - 8));
  sub_10055D4D0(a1);
  operator delete();
}

void sub_1008045DC(id a1)
{
  qword_10229FD38 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Sensors");
}

BOOL sub_100804608()
{
  return os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_FAULT);
}

BOOL sub_10080461C()
{
  uint64_t v0;

  return os_log_type_enabled(*(os_log_t *)(v0 + 3384), OS_LOG_TYPE_INFO);
}

BOOL sub_10080462C()
{
  uint64_t v0;

  return os_signpost_enabled(*(os_log_t *)(v0 + 3384));
}

_QWORD *sub_100804638(_QWORD *a1, int a2)
{
  void *__p[2];
  char v6;

  sub_1015A2E04(__p, "");
  sub_100804724((uint64_t)a1, "VO2MaxRetrocomputeHistory", a2, (uint64_t)__p, 1, 30.0);
  if (v6 < 0)
    operator delete(__p[0]);
  *a1 = off_102154C28;
  a1[9] = off_102154CD8;
  sub_100E81598(a1 + 57, 0, 0);
  sub_100E81598(a1 + 59, 0, 0);
  sub_100E81598(a1 + 61, 0, 0);
  (*(void (**)(_QWORD *))(*a1 + 112))(a1);
  return a1;
}

void sub_1008046F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100804724(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  _QWORD *v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v16;
  uint64_t v17;
  __int16 v18;

  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v12 = (_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = off_10213DEB0;
  sub_10042776C((_QWORD *)(a1 + 8));
  *v12 = &off_10213DEF8;
  *(_QWORD *)a1 = off_1021551B8;
  *(_QWORD *)(a1 + 72) = off_102155260;
  sub_101137D40(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(_QWORD *)a1 = off_1021551B8;
  *(_QWORD *)(a1 + 72) = off_102155260;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_DWORD *)(a1 + 240) = 3;
  *(_QWORD *)(a1 + 368) = 0;
  *(_OWORD *)(a1 + 244) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 260) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 348) = 0u;
  *(_DWORD *)(a1 + 376) = 12000;
  *(_QWORD *)(a1 + 384) = off_10213DEB0;
  sub_10042776C((_QWORD *)(a1 + 392));
  *(_QWORD *)(a1 + 392) = &off_10213DEF8;
  v13 = *(_QWORD *)(a1 + 112);
  v17 = a1 + 112;
  (*(void (**)(void))(v13 + 16))();
  v18 = 256;
  if (!a3)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_100115CE4(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a4;
      v16 = *(_QWORD *)(a4 + 16);
    }
    sub_1011384BC(a1 + 72);
  }
  *(_QWORD *)(a1 + 232) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  return a1;
}

void sub_100804AF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;

  sub_10187E514((uint64_t)&a19);
  v24[48] = off_10213DEB0;
  sub_100427950(v27);
  sub_10047F6F4(v26);
  sub_101138068(a12);
  *v24 = off_10213DEB0;
  sub_100427950(v25);
  _Unwind_Resume(a1);
}

void sub_100804B9C()
{
  JUMPOUT(0x100804B7CLL);
}

_QWORD *sub_100804BA4(_QWORD *a1)
{
  uint64_t v2;

  a1[9] = off_102155260;
  v2 = (uint64_t)(a1 + 9);
  *a1 = off_1021551B8;
  a1[48] = off_10213DEB0;
  sub_100427950(a1 + 49);
  sub_10047F6F4(a1 + 22);
  sub_101138068(v2);
  *a1 = off_10213DEB0;
  sub_100427950(a1 + 1);
  return a1;
}

_QWORD *sub_100804C24(uint64_t a1)
{
  return sub_100804BA4((_QWORD *)(a1 - 72));
}

void sub_100804C2C(_QWORD *a1)
{
  sub_100804BA4(a1);
  operator delete();
}

void sub_100804C50(uint64_t a1)
{
  sub_100804BA4((_QWORD *)(a1 - 72));
  operator delete();
}

uint64_t sub_100804C78(uint64_t a1, uint64_t a2, sqlite3_int64 a3)
{
  uint64_t v5;
  sqlite3_stmt *v6;
  sqlite3_stmt *v7;
  sqlite3_stmt *v8;
  sqlite3_stmt *v9;
  sqlite3_stmt *v10;
  sqlite3_stmt *v11;
  sqlite3_stmt *v12;
  sqlite3_stmt *v13;
  sqlite3_stmt *v14;
  sqlite3_stmt *v15;
  sqlite3_stmt *v16;
  sqlite3_stmt *v17;
  sqlite3_stmt *v18;
  sqlite3_stmt *v19;
  sqlite3_stmt *v20;
  sqlite3_stmt *v21;
  sqlite3_stmt *v22;
  sqlite3_stmt *v23;
  sqlite3_stmt *v24;
  sqlite3_stmt *v25;
  sqlite3_stmt *v26;
  sqlite3_stmt *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;
  char out[40];

  v5 = a1;
  if (!sub_10008950C(a1 + 72))
    goto LABEL_28;
  sub_100087AF4((_QWORD *)(v5 + 472), &v31);
  memset(out, 0, 37);
  uuid_unparse((const unsigned __int8 *)(a2 + 64), out);
  v6 = (sqlite3_stmt *)sub_100026CC8(v31);
  if (!sub_1000890C4(v6, 1, *(double *)(a2 + 8)))
    goto LABEL_24;
  v7 = (sqlite3_stmt *)sub_100026CC8(v31);
  if (!sub_1000CD75C(v7, 2, *(_DWORD *)(a2 + 16)))
    goto LABEL_24;
  v8 = (sqlite3_stmt *)sub_100026CC8(v31);
  if (!sub_1000CD75C(v8, 3, *(_DWORD *)(a2 + 20)))
    goto LABEL_24;
  v9 = (sqlite3_stmt *)sub_100026CC8(v31);
  if (!sub_1000890C4(v9, 4, *(double *)(a2 + 24)))
    goto LABEL_24;
  v10 = (sqlite3_stmt *)sub_100026CC8(v31);
  if (!sub_1000890C4(v10, 5, *(double *)(a2 + 40)))
    goto LABEL_24;
  v11 = (sqlite3_stmt *)sub_100026CC8(v31);
  if (!sub_1000890C4(v11, 6, *(double *)(a2 + 56)))
    goto LABEL_24;
  v12 = (sqlite3_stmt *)sub_100026CC8(v31);
  if (!sub_1000C9E20(v12, 7, out))
    goto LABEL_24;
  v13 = (sqlite3_stmt *)sub_100026CC8(v31);
  if (!sub_1000890C4(v13, 8, *(double *)(a2 + 80)))
    goto LABEL_24;
  v14 = (sqlite3_stmt *)sub_100026CC8(v31);
  if (!sub_1000890C4(v14, 9, *(double *)(a2 + 48)))
    goto LABEL_24;
  v15 = (sqlite3_stmt *)sub_100026CC8(v31);
  if (!sub_10023C77C(v15, 10, *(_DWORD *)(a2 + 96)))
    goto LABEL_24;
  v16 = (sqlite3_stmt *)sub_100026CC8(v31);
  if (!sub_10023C77C(v16, 11, *(_DWORD *)(a2 + 100)))
    goto LABEL_24;
  v17 = (sqlite3_stmt *)sub_100026CC8(v31);
  if (!sub_10023C77C(v17, 12, *(_DWORD *)(a2 + 104)))
    goto LABEL_24;
  v18 = (sqlite3_stmt *)sub_100026CC8(v31);
  if (!sub_10023C77C(v18, 13, *(_DWORD *)(a2 + 108)))
    goto LABEL_24;
  v19 = (sqlite3_stmt *)sub_100026CC8(v31);
  if (!sub_1000890C4(v19, 14, *(double *)(a2 + 32)))
    goto LABEL_24;
  v20 = (sqlite3_stmt *)sub_100026CC8(v31);
  if (sub_1000890C4(v20, 15, *(double *)(a2 + 112))
    && (v21 = (sqlite3_stmt *)sub_100026CC8(v31), sub_1000890C4(v21, 16, *(double *)(a2 + 88)))
    && (v22 = (sqlite3_stmt *)sub_100026CC8(v31), sub_1000890C4(v22, 17, *(double *)(a2 + 120)))
    && (v23 = (sqlite3_stmt *)sub_100026CC8(v31), sub_1000890C4(v23, 18, *(double *)(a2 + 128)))
    && (v24 = (sqlite3_stmt *)sub_100026CC8(v31), sub_10023C77C(v24, 19, *(_DWORD *)(a2 + 136)))
    && (v25 = (sqlite3_stmt *)sub_100026CC8(v31), sub_1000890C4(v25, 20, *(double *)(a2 + 144)))
    && (v26 = (sqlite3_stmt *)sub_100026CC8(v31), sub_1000CC50C(v26, 21, a3)))
  {
    v5 = *(_QWORD *)(v5 + 80);
    v27 = (sqlite3_stmt *)sub_100026CC8(v31);
    LOBYTE(v5) = sub_10023C9B0(v5, v27);
    v28 = 0;
  }
  else
  {
LABEL_24:
    v28 = 1;
  }
  v29 = v31;
  v31 = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  if (v28)
LABEL_28:
    LOBYTE(v5) = 0;
  return v5 & 1;
}

void sub_100804F4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100804F78(uint64_t a1, int a2, uint64_t a3)
{
  sqlite3_stmt *v6;
  sqlite3_stmt *v7;
  sqlite3_stmt *v8;
  sqlite3_stmt *v9;
  sqlite3_stmt *v10;
  sqlite3_stmt *v11;
  sqlite3_stmt *v12;
  sqlite3_stmt *v13;
  sqlite3_stmt *v14;
  sqlite3_stmt *v15;
  const unsigned __int8 *v16;
  sqlite3_stmt *v17;
  sqlite3_stmt *v18;
  sqlite3_stmt *v19;
  sqlite3_stmt *v20;
  sqlite3_stmt *v21;
  sqlite3_stmt *v22;
  sqlite3_stmt *v23;
  sqlite3_stmt *v24;
  sqlite3_stmt *v25;
  sqlite3_stmt *v26;
  sqlite3_stmt *v27;
  sqlite3_stmt *v28;
  sqlite3_stmt *v29;
  uint64_t v30;
  uint64_t v32;

  if (!sub_10008950C(a1 + 72))
    return 109;
  sub_100087AF4((_QWORD *)(a1 + 488), &v32);
  v6 = (sqlite3_stmt *)sub_100026CC8(v32);
  if (sub_1000CD75C(v6, 1, a2))
  {
    v7 = (sqlite3_stmt *)sub_100026CC8(v32);
    if (sqlite3_step(v7) == 100)
    {
      v8 = (sqlite3_stmt *)sub_100026CC8(v32);
      *(_QWORD *)a3 = sqlite3_column_int(v8, 0);
      v9 = (sqlite3_stmt *)sub_100026CC8(v32);
      *(double *)(a3 + 8) = sqlite3_column_double(v9, 1);
      v10 = (sqlite3_stmt *)sub_100026CC8(v32);
      *(_DWORD *)(a3 + 16) = sqlite3_column_int(v10, 2);
      v11 = (sqlite3_stmt *)sub_100026CC8(v32);
      *(_DWORD *)(a3 + 20) = sqlite3_column_int(v11, 3);
      v12 = (sqlite3_stmt *)sub_100026CC8(v32);
      *(double *)(a3 + 24) = sqlite3_column_double(v12, 4);
      v13 = (sqlite3_stmt *)sub_100026CC8(v32);
      *(double *)(a3 + 40) = sqlite3_column_double(v13, 5);
      v14 = (sqlite3_stmt *)sub_100026CC8(v32);
      *(double *)(a3 + 56) = sqlite3_column_double(v14, 6);
      v15 = (sqlite3_stmt *)sub_100026CC8(v32);
      v16 = sqlite3_column_text(v15, 7);
      uuid_parse((const char *)v16, (unsigned __int8 *)(a3 + 64));
      v17 = (sqlite3_stmt *)sub_100026CC8(v32);
      *(double *)(a3 + 80) = sqlite3_column_double(v17, 8);
      v18 = (sqlite3_stmt *)sub_100026CC8(v32);
      *(double *)(a3 + 48) = sqlite3_column_double(v18, 9);
      v19 = (sqlite3_stmt *)sub_100026CC8(v32);
      *(_DWORD *)(a3 + 96) = sqlite3_column_int(v19, 10);
      v20 = (sqlite3_stmt *)sub_100026CC8(v32);
      *(_DWORD *)(a3 + 100) = sqlite3_column_int(v20, 11);
      v21 = (sqlite3_stmt *)sub_100026CC8(v32);
      *(_DWORD *)(a3 + 104) = sqlite3_column_int(v21, 12);
      v22 = (sqlite3_stmt *)sub_100026CC8(v32);
      *(_DWORD *)(a3 + 108) = sqlite3_column_int(v22, 13);
      v23 = (sqlite3_stmt *)sub_100026CC8(v32);
      *(double *)(a3 + 32) = sqlite3_column_double(v23, 14);
      v24 = (sqlite3_stmt *)sub_100026CC8(v32);
      *(double *)(a3 + 112) = sqlite3_column_double(v24, 15);
      v25 = (sqlite3_stmt *)sub_100026CC8(v32);
      *(double *)(a3 + 88) = sqlite3_column_double(v25, 16);
      v26 = (sqlite3_stmt *)sub_100026CC8(v32);
      *(double *)(a3 + 120) = sqlite3_column_double(v26, 17);
      v27 = (sqlite3_stmt *)sub_100026CC8(v32);
      *(double *)(a3 + 128) = sqlite3_column_double(v27, 18);
      v28 = (sqlite3_stmt *)sub_100026CC8(v32);
      *(_DWORD *)(a3 + 136) = sqlite3_column_int(v28, 19);
      v29 = (sqlite3_stmt *)sub_100026CC8(v32);
      *(double *)(a3 + 144) = sqlite3_column_double(v29, 20);
    }
  }
  v30 = v32;
  v32 = 0;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  return 100;
}

void sub_1008051C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008051E4(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = sub_1000CC4F4(a1[10]);
  if ((_DWORD)result)
  {
    sub_100805274((uint64_t)a1);
    sub_100634364(a1[10], "VO2MaxRetrocomputeHistory", (const char **)&off_102154D68, (const std::string::value_type **)&off_1022A4598, 0);
    a1[61] = sub_10063D314(a1[10], "SELECT * FROM VO2MaxRetrocomputeHistory WHERE algVersion = ? LIMIT 1");
    a1[62] = v3;
    a1[57] = sub_10063D314(a1[10], "INSERT INTO VO2MaxRetrocomputeHistory (startTime, algVersion, status, firstSampleDate, lastSampleDate, lastSessionTimestamp, lastSessionId, meanDelta, lastSampleDatePrevAlg, numUpdatedEstimates, numNewEstimates, numLostEstimates, numLostEstimatesAfterLastSession, firstSummaryDate, lastTimestampToHealthKit, meanPercentileDelta, highPercentileMaxDelta, estimateVariabilityDelta, unavailableReasons, availableStartTime) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
    a1[58] = v4;
    result = sub_10063D314(a1[10], "UPDATE VO2MaxRetrocomputeHistory SET startTime = ?, algVersion =?, status = ?, firstSampleDate = ?, lastSampleDate = ?, lastSessionTimestamp = ?, lastSessionId = ?, meanDelta = ?, lastSampleDatePrevAlg = ?, numUpdatedEstimates = ?, numNewEstimates = ?, numLostEstimates = ?, numLostEstimatesAfterLastSession = ?, firstSummaryDate = ?, lastTimestampToHealthKit = ?, meanPercentileDelta = ?, highPercentileMaxDelta = ?, estimateVariabilityDelta = ?, unavailableReasons = ?, availableStartTime = ? WHERE id = ?");
    a1[59] = result;
    a1[60] = v5;
  }
  return result;
}

BOOL sub_100805274(uint64_t a1)
{
  _BOOL8 result;
  const char *v3;
  int v4;
  __int16 v5;
  char v6;
  char v7;

  result = sub_100635B3C(*(_QWORD *)(a1 + 80), "VO2MaxRetrocomputeHistory");
  if (result)
  {
    v3 = "startTime";
    v4 = 5;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    sub_10063A8D4(*(_QWORD *)(a1 + 80), "VO2MaxRetrocomputeHistory", (uint64_t)"startTime", (uint64_t)&v3);
  }
  return result;
}

void sub_100805618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  uint64_t v59;

  if (a19 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a21);
  if (v59)
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
  sub_1018B38B4((uint64_t)&a59);
  _Unwind_Resume(a1);
}

void sub_1008056B0(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (sub_10008950C(a1 + 72))
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "DELETE FROM VO2MaxRetrocomputeHistory");
  if (qword_10229FEC0 != -1)
    dispatch_once(&qword_10229FEC0, &stru_102155188);
  v2 = qword_10229FEC8;
  if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[VO2MaxRetrocomputeHistory] Database inaccessible, unable to delete records.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEC0 != -1)
      dispatch_once(&qword_10229FEC0, &stru_102155188);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEC8, 0, "[VO2MaxRetrocomputeHistory] Database inaccessible, unable to delete records.", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLVO2MaxRetrocomputeRecorderDb::deleteAllRecordsUL()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
}

void sub_1008058A8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1008058D0(uint64_t a1)
{
  sub_1008056B0(a1 - 72);
}

uint64_t sub_1008058D8(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  sqlite3_stmt *v5;
  sqlite3_stmt *v6;
  sqlite3_stmt *v7;
  sqlite3_stmt *v8;
  sqlite3_stmt *v9;
  sqlite3_stmt *v10;
  sqlite3_stmt *v11;
  sqlite3_stmt *v12;
  sqlite3_stmt *v13;
  sqlite3_stmt *v14;
  sqlite3_stmt *v15;
  sqlite3_stmt *v16;
  sqlite3_stmt *v17;
  sqlite3_stmt *v18;
  sqlite3_stmt *v19;
  sqlite3_stmt *v20;
  sqlite3_stmt *v21;
  sqlite3_stmt *v22;
  sqlite3_stmt *v23;
  sqlite3_stmt *v24;
  uint64_t v25;
  sqlite3_stmt *v26;
  uint64_t v27;
  char out[40];

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_100087AF4((_QWORD *)(a1 + 456), &v27);
    memset(out, 0, 37);
    uuid_unparse((const unsigned __int8 *)(a2 + 64), out);
    v5 = (sqlite3_stmt *)sub_100026CC8(v27);
    if (sub_1000890C4(v5, 1, *(double *)(a2 + 8)))
    {
      v6 = (sqlite3_stmt *)sub_100026CC8(v27);
      if (sub_1000CD75C(v6, 2, *(_DWORD *)(a2 + 16)))
      {
        v7 = (sqlite3_stmt *)sub_100026CC8(v27);
        if (sub_1000CD75C(v7, 3, *(_DWORD *)(a2 + 20)))
        {
          v8 = (sqlite3_stmt *)sub_100026CC8(v27);
          if (sub_1000890C4(v8, 4, *(double *)(a2 + 24)))
          {
            v9 = (sqlite3_stmt *)sub_100026CC8(v27);
            if (sub_1000890C4(v9, 5, *(double *)(a2 + 40)))
            {
              v10 = (sqlite3_stmt *)sub_100026CC8(v27);
              if (sub_1000890C4(v10, 6, *(double *)(a2 + 56)))
              {
                v11 = (sqlite3_stmt *)sub_100026CC8(v27);
                if (sub_1000C9E20(v11, 7, out))
                {
                  v12 = (sqlite3_stmt *)sub_100026CC8(v27);
                  if (sub_1000890C4(v12, 8, *(double *)(a2 + 80)))
                  {
                    v13 = (sqlite3_stmt *)sub_100026CC8(v27);
                    if (sub_1000890C4(v13, 9, *(double *)(a2 + 48)))
                    {
                      v14 = (sqlite3_stmt *)sub_100026CC8(v27);
                      if (sub_10023C77C(v14, 10, *(_DWORD *)(a2 + 96)))
                      {
                        v15 = (sqlite3_stmt *)sub_100026CC8(v27);
                        if (sub_10023C77C(v15, 11, *(_DWORD *)(a2 + 100)))
                        {
                          v16 = (sqlite3_stmt *)sub_100026CC8(v27);
                          if (sub_10023C77C(v16, 12, *(_DWORD *)(a2 + 104)))
                          {
                            v17 = (sqlite3_stmt *)sub_100026CC8(v27);
                            if (sub_10023C77C(v17, 13, *(_DWORD *)(a2 + 108)))
                            {
                              v18 = (sqlite3_stmt *)sub_100026CC8(v27);
                              if (sub_1000890C4(v18, 14, *(double *)(a2 + 32)))
                              {
                                v19 = (sqlite3_stmt *)sub_100026CC8(v27);
                                if (sub_1000890C4(v19, 15, *(double *)(a2 + 112)))
                                {
                                  v20 = (sqlite3_stmt *)sub_100026CC8(v27);
                                  if (sub_1000890C4(v20, 16, *(double *)(a2 + 88)))
                                  {
                                    v21 = (sqlite3_stmt *)sub_100026CC8(v27);
                                    if (sub_1000890C4(v21, 17, *(double *)(a2 + 120)))
                                    {
                                      v22 = (sqlite3_stmt *)sub_100026CC8(v27);
                                      if (sub_1000890C4(v22, 18, *(double *)(a2 + 128)))
                                      {
                                        v23 = (sqlite3_stmt *)sub_100026CC8(v27);
                                        if (sub_10023C77C(v23, 19, *(_DWORD *)(a2 + 136)))
                                        {
                                          v24 = (sqlite3_stmt *)sub_100026CC8(v27);
                                          if (sub_1000890C4(v24, 20, *(double *)(a2 + 144)))
                                          {
                                            v25 = *(_QWORD *)(a1 + 80);
                                            v26 = (sqlite3_stmt *)sub_100026CC8(v27);
                                            sub_10023C9B0(v25, v26);
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    result = v27;
    v27 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_100805B6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100805B98(uint64_t a1, void *a2)
{
  NSObject *v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  size_t v8;
  std::string *v9;
  void **v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  void *v14;
  char v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v20;
  std::string *v21;
  void *v22[2];
  int64_t v23;
  std::string v24;
  void *__p[4];
  std::string buf[68];

  if (!sub_100635E80(*(_QWORD *)(a1 + 80), (char *)a2))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021552A0);
    v4 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Notice %{public}s needs autoincrement migration", (uint8_t *)buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021552A0);
      LODWORD(__p[0]) = 136446210;
      *(void **)((char *)__p + 4) = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice %{public}s needs autoincrement migration", __p, 12);
      v21 = (std::string *)v20;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLActivityRecorderDb<VO2MaxRetrocomputeHistory>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = VO2MaxRetrocomputeHistory, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
    memset(__p, 0, 24);
    sub_1015A2E04(buf, (char *)a2);
    v5 = std::string::append(buf, "AutoIncr");
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v23 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)v22 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    sub_1015A2E04(buf, (char *)a2);
    v7 = std::string::append(buf, "Index");
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    sub_10001E638(*(_QWORD *)(a1 + 80));
    if (SHIBYTE(__p[2]) >= 0)
      v8 = HIBYTE(__p[2]);
    else
      v8 = (size_t)__p[1];
    v9 = buf;
    sub_100259584((uint64_t)buf, v8 + 21);
    if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    if (v8)
    {
      if (SHIBYTE(__p[2]) >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      memmove(v9, v10, v8);
    }
    strcpy((char *)v9 + v8, "DROP TABLE IF EXISTS ");
    if (v23 >= 0)
      v11 = v22;
    else
      v11 = (void **)v22[0];
    if (v23 >= 0)
      v12 = HIBYTE(v23);
    else
      v12 = (std::string::size_type)v22[1];
    v13 = std::string::append(buf, (const std::string::value_type *)v11, v12);
    v14 = (void *)v13->__r_.__value_.__r.__words[0];
    v24.__r_.__value_.__r.__words[0] = v13->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v24.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    __p[0] = v14;
    __p[1] = v24.__r_.__value_.__l.__data_;
    *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v24.__r_.__value_.__r.__words + 7);
    HIBYTE(__p[2]) = v15;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      v15 = HIBYTE(__p[2]);
      v14 = __p[0];
    }
    if (v15 >= 0)
      v16 = (char *)__p;
    else
      v16 = (char *)v14;
    sub_1000CDA68(*(_QWORD *)(a1 + 80), v16);
  }
  v17 = *(_QWORD *)(a1 + 80);
  if (*(uint64_t *)(v17 + 88) <= 0)
    v18 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v18 = *(_QWORD *)(v17 + 88);
  sub_100053048(v17, v18);
  return 0;
}

void sub_100806D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a60 < 0)
    operator delete(a55);
  _Unwind_Resume(a1);
}

uint64_t sub_100807050(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *v13[2];
  uint64_t v14;
  _QWORD v15[8];
  void *v16[2];
  unsigned __int8 v17;

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v13);
  if ((SHIBYTE(v14) & 0x80000000) == 0)
  {
    if (HIBYTE(v14))
      goto LABEL_3;
LABEL_18:
    sub_10190A87C(v4);
    __break(1u);
  }
  v12 = v13[1];
  operator delete(v13[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_100263E50((uint64_t)v13);
    v6 = sub_100263F7C(&v14, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(v16, a1);
    if ((v17 & 0x80u) == 0)
      v7 = v16;
    else
      v7 = (void **)v16[0];
    if ((v17 & 0x80u) == 0)
      v8 = v17;
    else
      v8 = (uint64_t)v16[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v17 < 0)
      operator delete(v16[0]);
    v10 = a1[10];
    std::stringbuf::str(v16, v15);
    if ((v17 & 0x80u) == 0)
      v11 = (char *)v16;
    else
      v11 = (char *)v16[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

void sub_100807440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1008074B0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void *v9;
  void *v11[2];
  uint64_t v12;
  _QWORD v13[8];
  void *__p[2];
  unsigned __int8 v15;

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v11);
  if ((SHIBYTE(v12) & 0x80000000) == 0)
  {
    if (HIBYTE(v12))
      goto LABEL_3;
LABEL_18:
    sub_10190A9E8(v2);
    __break(1u);
  }
  v9 = v11[1];
  operator delete(v11[0]);
  if (!v9)
    goto LABEL_18;
LABEL_3:
  if (sub_10008950C(a1 + 9))
  {
    sub_100263E50((uint64_t)v11);
    v3 = sub_100263F7C(&v12, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v15 & 0x80u) == 0)
      v5 = v15;
    else
      v5 = (uint64_t)__p[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    v7 = a1[10];
    std::stringbuf::str(__p, v13);
    if ((v15 & 0x80u) == 0)
      v8 = (char *)__p;
    else
      v8 = (char *)__p[0];
    sub_1000CDA68(v7, v8);
  }
  return 2;
}

void sub_1008078E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a51 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_100807958(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  _BYTE v17[14];
  __int16 v18;
  _QWORD *v19;

  v3 = *(_QWORD *)(a1 + 112);
  v2 = a1 + 112;
  v4 = v2 - 40;
  v13 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_10008950C(v4))
    sub_100427D28(a1);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_1021552A0);
  v5 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    v6 = (_QWORD *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0)
      v6 = (_QWORD *)*v6;
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)v17 = 0;
    *(_WORD *)&v17[4] = 2082;
    *(_QWORD *)&v17[6] = "";
    v18 = 2082;
    v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(_QWORD *)(a1 + 216))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021552A0);
    v7 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      v8 = *(_QWORD *)(a1 + 216);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021552A0);
      v10 = *(_QWORD *)(a1 + 216);
      v14 = 134349056;
      v15 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", &v14, 12);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<VO2MaxRetrocomputeHistory>::setDatabaseAccessible() [T = VO2MaxRetrocomputeHistory, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  return 1;
}

void sub_100807F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_100807F78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v3 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v3;
  v4 = *(_OWORD *)(a3 + 32);
  v5 = *(_OWORD *)(a3 + 48);
  v6 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a2 + 80) = v6;
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)(a2 + 48) = v5;
  result = *(__n128 *)(a3 + 96);
  v8 = *(_OWORD *)(a3 + 112);
  v9 = *(_OWORD *)(a3 + 128);
  *(_QWORD *)(a2 + 144) = *(_QWORD *)(a3 + 144);
  *(_OWORD *)(a2 + 112) = v8;
  *(_OWORD *)(a2 + 128) = v9;
  *(__n128 *)(a2 + 96) = result;
  return result;
}

id *sub_100807FAC(uint64_t a1, uint64_t a2, char a3)
{
  int v6;
  double v7;
  double v8;
  double v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  double v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  double v17;
  double v18;
  double v19;
  NSObject *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v29;
  const char *v30;
  uint8_t *v31;
  double v32;
  const char *v33;
  uint8_t *v34;
  const char *v35;
  uint8_t *v36;
  double v37;
  id v38[2];
  int v39;
  double v40;
  __int16 v41;
  uint64_t v42;
  uint8_t buf[4];
  double v44;
  __int16 v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  int v49;
  __int128 v50;
  _DWORD v51[7];
  __int128 v52;
  __int128 v53;
  _BYTE v54[28];
  uint64_t v55;

  v38[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v38[1] = 0;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, a1 + 224, a2);
    return sub_100131740(v38);
  }
  if ((a3 & 1) == 0)
    sub_10001E638(*(_QWORD *)(a1 + 80));
  v47 = 0;
  v48 = 0.0;
  v49 = 3;
  v55 = 0;
  v50 = 0u;
  memset(v51, 0, sizeof(v51));
  v53 = 0u;
  memset(v54, 0, sizeof(v54));
  v52 = 0u;
  v6 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 104))(a1, &v47);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021552A0);
      v14 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021552A0);
        LOWORD(v39) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "Failed to insert record due to failure from reading the most recent entry.", &v39, 2);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<VO2MaxRetrocomputeHistory>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxRetrocomputeHistory, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
      goto LABEL_43;
    }
    v7 = *(double *)(a2 + 8);
    v8 = v48;
    v9 = v7 - v48;
    if (v7 - v48 < 0.0)
      v9 = -(v7 - v48);
    if (v9 > 604800.0)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021552A0);
      v10 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *(_QWORD *)(a2 + 8);
        *(_DWORD *)buf = 134349312;
        v44 = v48;
        v45 = 2050;
        v46 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021552A0);
        v29 = *(_QWORD *)(a2 + 8);
        v39 = 134349312;
        v40 = v48;
        v41 = 2050;
        v42 = v29;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", &v39, 22);
        v31 = (uint8_t *)v30;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxRetrocomputeHistory>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxRetrocomputeHistory, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v30);
        if (v31 != buf)
          free(v31);
      }
      CLWriteStackshot("Potential CM database inconsistency, time jump", 0);
      v7 = *(double *)(a2 + 8);
      v8 = v48;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021552A0);
        v12 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          v13 = *(double *)(a2 + 8);
          *(_DWORD *)buf = 134217984;
          v44 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_1021552A0);
          v32 = *(double *)(a2 + 8);
          v39 = 134217984;
          v40 = v32;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", COERCE_DOUBLE(&v39));
          v34 = (uint8_t *)v33;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxRetrocomputeHistory>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxRetrocomputeHistory, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v33);
          if (v34 != buf)
            free(v34);
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      v17 = v7 - v8;
      v18 = *(float *)(a1 + 136);
      if (qword_10229FC70 != -1)
      {
        v37 = *(float *)(a1 + 136);
        dispatch_once(&qword_10229FC70, &stru_1021552A0);
        v18 = v37;
      }
      v19 = v17 - v18;
      v20 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        v44 = v19;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021552A0);
        v39 = 134217984;
        v40 = v19;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", COERCE_DOUBLE(&v39));
        v36 = (uint8_t *)v35;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxRetrocomputeHistory>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxRetrocomputeHistory, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v35);
        if (v36 != buf)
          free(v36);
      }
      (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 96))(a1, v19);
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, &v47, a1 + 224, a2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  v21 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 240) = v21;
  v22 = *(_OWORD *)(a2 + 32);
  v23 = *(_OWORD *)(a2 + 48);
  v24 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 304) = v24;
  *(_OWORD *)(a1 + 256) = v22;
  *(_OWORD *)(a1 + 272) = v23;
  v25 = *(_OWORD *)(a2 + 96);
  v26 = *(_OWORD *)(a2 + 112);
  v27 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 336) = v26;
  *(_OWORD *)(a1 + 352) = v27;
  *(_OWORD *)(a1 + 320) = v25;
LABEL_43:
  if ((a3 & 1) == 0)
    sub_10001E99C(*(_QWORD *)(a1 + 80));
  return sub_100131740(v38);
}

void sub_100808740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10080876C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _Unwind_Exception *v13;
  void *__p[2];
  unsigned __int8 v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17))
      goto LABEL_3;
LABEL_18:
    v13 = (_Unwind_Exception *)sub_10190AB54(v4);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  v12 = v16[1];
  operator delete(v16[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_100263E50((uint64_t)v16);
    v6 = sub_100263F7C(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v15 & 0x80u) == 0)
      v8 = v15;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v18);
    if ((v15 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

uint64_t sub_1008089CC(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  _Unwind_Exception *v11;
  void *__p[2];
  unsigned __int8 v13;
  void *v14[2];
  uint64_t v15;
  _QWORD v16[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_10190ACC0(v2);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  v10 = v14[1];
  operator delete(v14[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_100263E50((uint64_t)v14);
    v4 = sub_100263F7C(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v13 & 0x80u) == 0)
      v6 = v13;
    else
      v6 = (uint64_t)__p[1];
    v7 = sub_100263F7C(v4, (uint64_t)v5, v6);
    sub_100263F7C(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    v8 = a1[10];
    std::stringbuf::str(__p, v16);
    if ((v13 & 0x80u) == 0)
      v9 = (char *)__p;
    else
      v9 = (char *)__p[0];
    sub_1000CDA68(v8, v9);
  }
  return result;
}

uint64_t sub_100808C04(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void *v10;
  _Unwind_Exception *v11;
  uint64_t v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_10190AE2C(v2);
    if (v12)
      (*(void (**)())(*(_QWORD *)v12 + 8))();
    sub_1018B38B4((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  v10 = v15[1];
  operator delete(v15[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  if (sub_10008950C(a1 + 9))
  {
    sub_100263E50((uint64_t)v15);
    v3 = sub_100263F7C(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v5 = v14;
    else
      v5 = (uint64_t)__p[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v7 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v8 = (char *)__p;
    else
      v8 = (char *)__p[0];
    sub_1000CDA68(v7, v8);
  }
  return 2;
}

uint64_t sub_100808E2C(uint64_t a1)
{
  return sub_100807958(a1 - 72);
}

void sub_100808E34(id a1)
{
  qword_10229FEC8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "VO2Max");
}

void sub_100808E60(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void *sub_100808E8C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1AF286BCA1AF287)
    sub_10025955C();
  return operator new(152 * a2);
}

uint64_t sub_1008093EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  sub_10013087C(a3, a1);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 6544) + 32))(*(_QWORD *)(a1 + 6544), a2);
}

void sub_100809438(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

void sub_10080944C()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_1008094E8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_100809500()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_10080958C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

id sub_100809718(id a1, SEL a2, id a3, id a4)
{
  id v6;
  id v7;
  unint64_t v8;
  unint64_t v9;
  id v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  NSObject *v17;
  NSObject *v18;
  int v19;
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  id v24;

  if (a4)
  {
    if (objc_msgSend(objc_msgSend(a3, "departureDate"), "compare:", objc_msgSend(a3, "arrivalDate")) == (id)-1)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102155348);
      v17 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
      {
        v19 = 68289283;
        v20 = 0;
        v21 = 2082;
        v22 = "";
        v23 = 2113;
        v24 = a3;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#slv Malformed visit\", \"visit\":%{private, location:escape_only}@}", (uint8_t *)&v19, 0x1Cu);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102155348);
      }
      v18 = qword_1022A01D8;
      if (os_signpost_enabled((os_log_t)qword_1022A01D8))
      {
        v19 = 68289283;
        v20 = 0;
        v21 = 2082;
        v22 = "";
        v23 = 2113;
        v24 = a3;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#slv Malformed visit", "{\"msg%{public}.0s\":\"#slv Malformed visit\", \"visit\":%{private, location:escape_only}@}", (uint8_t *)&v19, 0x1Cu);
      }
    }
    else
    {
      v6 = objc_msgSend(a4, "compare:", objc_msgSend(a3, "departureDate"));
      v7 = objc_msgSend(a4, "compare:", objc_msgSend(a3, "arrivalDate"));
      v8 = 0;
      if (objc_msgSend(a3, "hasArrivalDate") && v7 == (id)-1)
        v8 = (unint64_t)objc_msgSend(a3, "arrivalDate");
      v9 = 0;
      if (objc_msgSend(a3, "hasDepartureDate"))
      {
        if (v6 == (id)-1)
          v9 = (unint64_t)objc_msgSend(a3, "departureDate");
      }
      if (v8 | v9)
      {
        v10 = objc_alloc((Class)CLVisit);
        objc_msgSend(a3, "coordinate");
        v12 = v11;
        v14 = v13;
        objc_msgSend(a3, "horizontalAccuracy");
        return objc_msgSend(v10, "initWithCoordinate:horizontalAccuracy:arrivalDate:departureDate:detectionDate:placeInference:", v8, v9, objc_msgSend(a3, "detectionDate"), objc_msgSend(a3, "_placeInference"), v12, v14, v15);
      }
    }
  }
  return 0;
}

void sub_100809AAC(id a1)
{
  qword_102304B28 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLSignificantVisitManagerSilo"));
}

void sub_10080A0D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_10080A14C(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "settingsDidChange:", a2);
}

void sub_10080A158(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v6;
  void *v7[2];
  char v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  void *v15;
  char v16;
  void *v17;
  char v18;
  void *__p;
  char v20;
  uint64_t v21;

  v6 = *a2;
  sub_1001AF190((char *)v7, (__int128 *)a3);
  v21 = *(_QWORD *)(a3 + 184);
  objc_msgSend(a4, "onClientManagerNotification:data:", v6, v7);
  if (v20 < 0)
    operator delete(__p);
  if (v18 < 0)
    operator delete(v17);
  if (v16 < 0)
    operator delete(v15);
  if (v14 < 0)
    operator delete(v13);
  if (v12 < 0)
    operator delete(v11);
  if (v10 < 0)
    operator delete(v9);
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_10080A220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100010174((uint64_t)&a9);
  _Unwind_Resume(a1);
}

id sub_10080A234(uint64_t a1)
{
  void *v1;
  _QWORD v3[5];

  v1 = *(void **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10080E3A4;
  v3[3] = &unk_10212BB58;
  v3[4] = v1;
  return objc_msgSend(objc_msgSend(objc_msgSend(v1, "universe"), "silo"), "async:", v3);
}

id sub_10080A29C(uint64_t a1)
{
  void *v1;
  _QWORD v3[5];

  v1 = *(void **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10080E3AC;
  v3[3] = &unk_10212BB58;
  v3[4] = v1;
  return objc_msgSend(objc_msgSend(objc_msgSend(v1, "universe"), "silo"), "async:", v3);
}

id sub_10080A304(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setArmed:", 1);
  return objc_msgSend(*(id *)(a1 + 32), "checkForMonitoring");
}

BOOL sub_10080AE9C(id a1, id a2, NSDictionary *a3)
{
  double v4;
  double v5;
  NSObject *v6;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  id v12;

  objc_msgSend(objc_msgSend(a2, "detectionDate", a3), "timeIntervalSinceNow");
  v5 = v4;
  if (v4 <= -15.0)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102155348);
    v6 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v8[0] = 68289283;
      v8[1] = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2113;
      v12 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#slv Dropping old visit\", \"visit\":%{private, location:escape_only}@}", (uint8_t *)v8, 0x1Cu);
    }
  }
  return v5 > -15.0;
}

void sub_10080B568(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  const char *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint32_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  int v20;
  int v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  id v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  id v29;

  v2 = objc_msgSend(*(id *)(a1 + 32), "keyForClient:", *(_QWORD *)(a1 + 40));
  if (v2)
  {
    v3 = v2;
    if ((objc_msgSend(*(id *)(a1 + 32), "isClientWithKeyInterested:", v2) & 1) != 0)
    {
      v4 = objc_msgSend(*(id *)(a1 + 32), "authorizationDateForClientWithKey:", v3);
      v5 = +[CLVisit _visitWithVisit:authDate:](CLVisit, "_visitWithVisit:authDate:", *(_QWORD *)(a1 + 48), v4);
      if (v5)
      {
        v6 = v5;
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102155348);
        v7 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
        {
          v8 = objc_msgSend(v3, "UTF8String");
          objc_msgSend(v4, "timeIntervalSinceReferenceDate");
          v20 = 68289795;
          v21 = 0;
          v22 = 2082;
          v23 = "";
          v24 = 2082;
          v25 = v8;
          v26 = 2050;
          v27 = v9;
          v28 = 2113;
          v29 = v6;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#slv Delivering visit to client\", \"key\":%{public, location:escape_only}s, \"authDate_s\":\"%{public}.09f\", \"mangled\":%{private, location:escape_only}@}", (uint8_t *)&v20, 0x30u);
        }
        objc_msgSend(*(id *)(a1 + 40), "onSignificantLocationVisit:", v6);
        return;
      }
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102155348);
      v17 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        v18 = objc_msgSend(v3, "UTF8String");
        objc_msgSend(v4, "timeIntervalSinceReferenceDate");
        v20 = 68289538;
        v21 = 0;
        v22 = 2082;
        v23 = "";
        v24 = 2082;
        v25 = v18;
        v26 = 2050;
        v27 = v19;
        v13 = "{\"msg%{public}.0s\":\"#slv Client not authorized for visit\", \"key\":%{public, location:escape_only}s, \""
              "authDate_s\":\"%{public}.09f\"}";
        v14 = v17;
        v15 = OS_LOG_TYPE_DEFAULT;
        v16 = 38;
        goto LABEL_24;
      }
    }
    else
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102155348);
      v12 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
      {
        v20 = 68289282;
        v21 = 0;
        v22 = 2082;
        v23 = "";
        v24 = 2082;
        v25 = objc_msgSend(v3, "UTF8String");
        v13 = "{\"msg%{public}.0s\":\"#slv Not delivering visit to client... not interested\", \"key\":%{public, location:escape_only}s}";
        v14 = v12;
        v15 = OS_LOG_TYPE_DEBUG;
        v16 = 28;
LABEL_24:
        _os_log_impl((void *)&_mh_execute_header, v14, v15, v13, (uint8_t *)&v20, v16);
      }
    }
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102155348);
    v10 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      v20 = 68289026;
      v21 = 0;
      v22 = 2082;
      v23 = "";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#slv Cannot deliver a visit to a client without a key\"}", (uint8_t *)&v20, 0x12u);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102155348);
    }
    v11 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v20 = 68289026;
      v21 = 0;
      v22 = 2082;
      v23 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#slv Cannot deliver a visit to a client without a key", "{\"msg%{public}.0s\":\"#slv Cannot deliver a visit to a client without a key\"}", (uint8_t *)&v20, 0x12u);
    }
  }
}

void sub_10080BEF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10080C29C(uint64_t a1, uint64_t a2)
{
  return sub_1007C0048(a2, (uint64_t)+[CLClientKeyPath clientKeyPathWithLegacyClientKey:](CLClientKeyPath, "clientKeyPathWithLegacyClientKey:", *(_QWORD *)(a1 + 32)), 0);
}

id sub_10080C2D8(uint64_t a1)
{
  id result;
  int v3;

  v3 = 0;
  result = objc_msgSend(*(id *)(a1 + 32), "interestForClientKey:outInterest:", objc_msgSend(*(id *)(a1 + 40), "UTF8String"), &v3);
  if (v3 == 2)
  {
    sub_100525484((uint64_t)objc_msgSend(*(id *)(a1 + 32), "clientInterest"), (const char *)objc_msgSend(*(id *)(a1 + 40), "UTF8String"), 0xFFFFFFFFLL);
    sub_100525484((uint64_t)objc_msgSend(*(id *)(a1 + 32), "clientAuthDate"), (const char *)objc_msgSend(*(id *)(a1 + 40), "UTF8String"), 0xFFFFFFFFLL);
    return objc_msgSend(*(id *)(a1 + 32), "flushAll");
  }
  return result;
}

void sub_10080C580(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t buf[8];
  __int16 v8;
  const char *v9;
  __int16 v10;
  uint64_t v11;

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102155348);
  v2 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 68289283;
    *(_DWORD *)&buf[4] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2113;
    v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#slv Sending out visit\", \"visit\":%{private, location:escape_only}@}", buf, 0x1Cu);
  }
  objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "recentVisits"), "addObject:", *(_QWORD *)(a1 + 32));
  objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "universe"), "vendor"), "proxyForService:", CFSTR("CLApplicationLifecycleManager"));
  v4 = 0;
  v5 = 0;
  v6 = 0;
  sub_100525A8C((uint64_t)objc_msgSend(*(id *)(a1 + 40), "clientInterest"));
}

void sub_10080CA08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void **a17)
{
  a17 = (void **)&a14;
  sub_100259608(&a17);
  _Unwind_Resume(a1);
}

void sub_10080D224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,void **a39)
{
  sub_100010174((uint64_t)&a13);
  a39 = (void **)&a36;
  sub_100259608(&a39);
  _Unwind_Resume(a1);
}

void sub_10080D7C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void **a19)
{
  a19 = (void **)&a16;
  sub_100259608(&a19);
  _Unwind_Resume(a1);
}

void sub_10080D924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10011A5A8(&a9);
  _Unwind_Resume(a1);
}

void sub_10080D9D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

void sub_10080DE88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(exception_object);
}

void sub_10080E34C(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_10080E378(id a1)
{
  qword_1022A0248 = (uint64_t)os_log_create("com.apple.locationd.Core", "Simulation");
}

id sub_10080E3A4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "onInterestStoreTimer");
}

id sub_10080E3AC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "onAuthDateStoreTimer");
}

void sub_10080E3B4()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101BC2470;
      v1[3] = unk_101BC2480;
      v1[4] = xmmword_101BC2490;
      v1[0] = xmmword_101BC2450;
      v1[1] = unk_101BC2460;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_10080E488(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

uint64_t sub_10080E4A0()
{
  sub_1015A2E04(qword_102304B10, "SignificantVisitManager");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102304B10, (void *)&_mh_execute_header);
}

uint64_t sub_10080E4E4(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = sub_100FA04D8(a1, a2, a3, a4);
  *(_QWORD *)v5 = off_102155398;
  *(_QWORD *)(v5 + 304) = "";
  *(_WORD *)(v5 + 312) = 0;
  *(_QWORD *)(a1 + 320) = nullsub_34(0);
  return a1;
}

void sub_10080E530(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100FA05F0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10080E544(uint64_t a1, size_t *a2, int *a3)
{
  const std::string *v6;
  const char *v7;
  NSObject *v8;
  uint64_t v9;
  std::string *v10;
  int v11;
  uint64_t v12;
  off_t st_size;
  int v14;
  BOOL v15;
  NSObject *v16;
  std::string *v17;
  int v18;
  int *v19;
  char *v20;
  NSObject *v21;
  std::string *v22;
  NSObject *v23;
  std::string *v24;
  int v25;
  int *v26;
  char *v27;
  uint64_t v28;
  std::string *v29;
  int v30;
  int *v31;
  char *v32;
  const char *v33;
  uint8_t *v34;
  NSObject *v35;
  std::string *v36;
  int v37;
  int *v38;
  char *v39;
  NSObject *v41;
  std::string *v42;
  off_t v43;
  int v44;
  int *v45;
  char *v46;
  uint64_t v47;
  const char *v48;
  uint8_t *v49;
  uint64_t v50;
  std::string *v51;
  int v52;
  int *v53;
  char *v54;
  const char *v55;
  std::string *v56;
  const char *v57;
  uint8_t *v58;
  uint64_t v59;
  std::string *v60;
  int v61;
  int *v62;
  char *v63;
  const char *v64;
  uint8_t *v65;
  uint64_t v66;
  std::string *v67;
  off_t v68;
  int v69;
  int *v70;
  char *v71;
  const char *v72;
  uint8_t *v73;
  uint64_t v74;
  const char *v75;
  std::string v76;
  stat v77;
  int v78;
  std::string *v79;
  __int16 v80;
  _BYTE v81[24];
  uint8_t buf[4];
  std::string *v83;
  __int16 v84;
  _BYTE v85[24];

  sub_100FA2C30(a1, &v76);
  v6 = (const std::string *)(a1 + 8);
  v7 = (const char *)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
    v7 = (const char *)v6->__r_.__value_.__r.__words[0];
  if (sub_1000B78B0(v7))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102155460);
    v8 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v9 = a1 + 8;
      if (*(char *)(a1 + 31) < 0)
        v9 = v6->__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315138;
      v83 = (std::string *)v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "TILE: mmapTile, prefer local file name because it exists, %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102155460);
      v47 = a1 + 8;
      if (*(char *)(a1 + 31) < 0)
        v47 = v6->__r_.__value_.__r.__words[0];
      v78 = 136315138;
      v79 = (std::string *)v47;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: mmapTile, prefer local file name because it exists, %s", (const char *)&v78);
      v49 = (uint8_t *)v48;
      sub_100512490("Generic", 1, 0, 2, "void *CLTileFileWithTraversal::mmapTile(size_t &, int &)", "%s\n", v48);
      if (v49 != buf)
        free(v49);
    }
    std::string::operator=(&v76, v6);
  }
  if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &v76;
  else
    v10 = (std::string *)v76.__r_.__value_.__r.__words[0];
  v11 = open((const char *)v10, 0);
  *a3 = v11;
  if (v11 < 0)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102155460);
    v23 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v24 = &v76;
      else
        v24 = (std::string *)v76.__r_.__value_.__r.__words[0];
      v25 = *__error();
      v26 = __error();
      v27 = strerror(*v26);
      *(_DWORD *)buf = 136315650;
      v83 = v24;
      v84 = 1024;
      *(_DWORD *)v85 = v25;
      *(_WORD *)&v85[4] = 2080;
      *(_QWORD *)&v85[6] = v27;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_FAULT, "TILE: mmapTile, can't open, %s, errno, %d, %s", buf, 0x1Cu);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_60;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102155460);
    v28 = qword_1022A02D8;
    if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v29 = &v76;
    else
      v29 = (std::string *)v76.__r_.__value_.__r.__words[0];
    v30 = *__error();
    v31 = __error();
    v32 = strerror(*v31);
    v78 = 136315650;
    v79 = v29;
    v80 = 1024;
    *(_DWORD *)v81 = v30;
    *(_WORD *)&v81[4] = 2080;
    *(_QWORD *)&v81[6] = v32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v28, 17, "TILE: mmapTile, can't open, %s, errno, %d, %s", (const char *)&v78, 28, v75);
    v34 = (uint8_t *)v33;
    sub_100512490("Generic", 1, 0, 0, "void *CLTileFileWithTraversal::mmapTile(size_t &, int &)", "%s\n", v33);
    goto LABEL_88;
  }
  if (fstat(v11, &v77) == -1)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102155460);
    v35 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = &v76;
      else
        v36 = (std::string *)v76.__r_.__value_.__r.__words[0];
      v37 = *__error();
      v38 = __error();
      v39 = strerror(*v38);
      *(_DWORD *)buf = 136315650;
      v83 = v36;
      v84 = 1024;
      *(_DWORD *)v85 = v37;
      *(_WORD *)&v85[4] = 2080;
      *(_QWORD *)&v85[6] = v39;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_FAULT, "TILE: can't stat, %s, errno, %d, %s", buf, 0x1Cu);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_60;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102155460);
    v50 = qword_1022A02D8;
    if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v51 = &v76;
    else
      v51 = (std::string *)v76.__r_.__value_.__r.__words[0];
    v52 = *__error();
    v53 = __error();
    v54 = strerror(*v53);
    v78 = 136315650;
    v79 = v51;
    v80 = 1024;
    *(_DWORD *)v81 = v52;
    *(_WORD *)&v81[4] = 2080;
    *(_QWORD *)&v81[6] = v54;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v50, 17, "TILE: can't stat, %s, errno, %d, %s", (const char *)&v78, 28, v75);
    v34 = (uint8_t *)v55;
    sub_100512490("Generic", 1, 0, 0, "void *CLTileFileWithTraversal::mmapTile(size_t &, int &)", "%s\n", v55);
LABEL_88:
    if (v34 != buf)
      free(v34);
LABEL_60:
    v12 = 0;
    *a2 = 0;
    goto LABEL_61;
  }
  *a2 = 0;
  v12 = (uint64_t)mmap(0, v77.st_size, 1, 2, *a3, 0);
  st_size = v77.st_size;
  v14 = fstat(*a3, &v77);
  v15 = v14 != -1;
  if (v14 == -1)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102155480);
    v16 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT))
    {
      if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = &v76;
      else
        v17 = (std::string *)v76.__r_.__value_.__r.__words[0];
      v18 = *__error();
      v19 = __error();
      v20 = strerror(*v19);
      *(_DWORD *)buf = 136446722;
      v83 = v17;
      v84 = 1026;
      *(_DWORD *)v85 = v18;
      *(_WORD *)&v85[4] = 2082;
      *(_QWORD *)&v85[6] = v20;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "TILE: can't stat, %{public}s, errno, %{public}d, %{public}s", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102155480);
      v59 = qword_1022A0048;
      if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v60 = &v76;
      else
        v60 = (std::string *)v76.__r_.__value_.__r.__words[0];
      v61 = *__error();
      v62 = __error();
      v63 = strerror(*v62);
      v78 = 136446722;
      v79 = v60;
      v80 = 1026;
      *(_DWORD *)v81 = v61;
      *(_WORD *)&v81[4] = 2082;
      *(_QWORD *)&v81[6] = v63;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v59, 17, "TILE: can't stat, %{public}s, errno, %{public}d, %{public}s", &v78, 28);
      v65 = (uint8_t *)v64;
      sub_100512490("Generic", 1, 0, 0, "void *CLTileFileWithTraversal::mmapTile(size_t &, int &)", "%s\n", v64);
      if (v65 != buf)
        free(v65);
    }
  }
  if (st_size != v77.st_size)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102155480);
    v21 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT))
    {
      v22 = &v76;
      if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v22 = (std::string *)v76.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136446722;
      v83 = v22;
      v84 = 2050;
      *(_QWORD *)v85 = st_size;
      *(_WORD *)&v85[8] = 2050;
      *(_QWORD *)&v85[10] = v77.st_size;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "TILE: mmap file size changed, %{public}s, size before mmap, %{public}ld, size after mmap, %{public}lld", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102155480);
      v56 = &v76;
      if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v56 = (std::string *)v76.__r_.__value_.__r.__words[0];
      v78 = 136446722;
      v79 = v56;
      v80 = 2050;
      *(_QWORD *)v81 = st_size;
      *(_WORD *)&v81[8] = 2050;
      *(_QWORD *)&v81[10] = v77.st_size;
      LODWORD(v74) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 17, "TILE: mmap file size changed, %{public}s, size before mmap, %{public}ld, size after mmap, %{public}lld", &v78, v74);
      v58 = (uint8_t *)v57;
      sub_100512490("Generic", 1, 0, 0, "void *CLTileFileWithTraversal::mmapTile(size_t &, int &)", "%s\n", v57);
      if (v58 != buf)
        free(v58);
    }
    v15 = 0;
  }
  *a2 = v77.st_size;
  if (v12 == -1)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102155460);
    v41 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v42 = &v76;
      else
        v42 = (std::string *)v76.__r_.__value_.__r.__words[0];
      v43 = v77.st_size;
      v44 = *__error();
      v45 = __error();
      v46 = strerror(*v45);
      *(_DWORD *)buf = 136315906;
      v83 = v42;
      v84 = 2048;
      *(_QWORD *)v85 = v43;
      *(_WORD *)&v85[8] = 1024;
      *(_DWORD *)&v85[10] = v44;
      *(_WORD *)&v85[14] = 2080;
      *(_QWORD *)&v85[16] = v46;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_FAULT, "TILE: mmap failed, %s, size, %lld, errno, %d, %s", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102155460);
      v66 = qword_1022A02D8;
      if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v67 = &v76;
      else
        v67 = (std::string *)v76.__r_.__value_.__r.__words[0];
      v68 = v77.st_size;
      v69 = *__error();
      v70 = __error();
      v71 = strerror(*v70);
      v78 = 136315906;
      v79 = v67;
      v80 = 2048;
      *(_QWORD *)v81 = v68;
      *(_WORD *)&v81[8] = 1024;
      *(_DWORD *)&v81[10] = v69;
      *(_WORD *)&v81[14] = 2080;
      *(_QWORD *)&v81[16] = v71;
      LODWORD(v74) = 38;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v66, 17, "TILE: mmap failed, %s, size, %lld, errno, %d, %s", (const char *)&v78, v74, (_DWORD)v75, v76.__r_.__value_.__l.__data_);
      v73 = (uint8_t *)v72;
      sub_100512490("Generic", 1, 0, 0, "void *CLTileFileWithTraversal::mmapTile(size_t &, int &)", "%s\n", v72);
      if (v73 != buf)
        free(v73);
    }
    v12 = -1;
  }
  else if (v15)
  {
    goto LABEL_64;
  }
LABEL_61:
  close(*a3);
  *a3 = -1;
  if (v12 != -1)
    munmap((void *)v12, *a2);
  v12 = 0;
  *a2 = 0;
LABEL_64:
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v76.__r_.__value_.__l.__data_);
  return v12;
}

void sub_10080F128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10080F188(int a1, void *a2, size_t a3, int a4)
{
  uint64_t result;

  if ((a4 & 0x80000000) == 0)
    result = close(a4);
  if (a2)
    return munmap(a2, a3);
  return result;
}

uint64_t sub_10080F1CC(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  __int128 v8;
  std::string v10;
  __int128 v11;
  __int128 v12;

  v4 = (_OWORD *)(a2 + 24);
  v5 = sub_10080E544(a1, (size_t *)(a2 + 24), (int *)(a2 + 32));
  *(_QWORD *)(a2 + 40) = v5;
  if (v5)
    v6 = *(_QWORD *)(a2 + 24) == 0;
  else
    v6 = 1;
  v7 = !v6;
  if (v6)
  {
    sub_1015A2E04(&v10, "");
    *(_QWORD *)&v11 = 0;
    DWORD2(v11) = -1;
    v12 = 0uLL;
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(std::string *)a2 = v10;
    v8 = v12;
    *v4 = v11;
    v4[1] = v8;
  }
  else
  {
    *(_QWORD *)(a2 + 48) = 0;
    sub_100FA2C30(a1, &v10);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(std::string *)a2 = v10;
  }
  return v7;
}

uint64_t sub_10080F2AC(uint64_t a1, uint64_t a2)
{
  void *v2;
  size_t v4;
  _OWORD *v5;
  int v6;
  __int128 v7;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;

  v2 = *(void **)(a2 + 40);
  if (v2)
  {
    v5 = (_OWORD *)(a2 + 24);
    v4 = *(_QWORD *)(a2 + 24);
    v6 = *(_DWORD *)(a2 + 32);
    if ((v6 & 0x80000000) == 0)
      close(v6);
    munmap(v2, v4);
    sub_1015A2E04(&v9, "");
    *(_QWORD *)&v11 = 0;
    DWORD2(v11) = -1;
    v12 = 0uLL;
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(_OWORD *)a2 = v9;
    *(_QWORD *)(a2 + 16) = v10;
    v7 = v12;
    *v5 = v11;
    v5[1] = v7;
  }
  return 1;
}

uint64_t sub_10080F354(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  unint64_t v4;
  unint64_t v5;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  int v21;
  uint8_t buf[4];
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  int v27;

  v4 = a2[6];
  v5 = a2[3];
  if (v4 >= v5)
  {
    result = 0;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 43962;
  }
  else if (v5 >= v4 + 12)
  {
    sub_100CD5A8C((unsigned __int16 *)(a2[5] + v4), (uint64_t)a3);
    a2[6] += a3[1] + (unint64_t)a3[2] + 12;
    return 1;
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102155460);
    v8 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v9 = a2[3];
      v10 = a2[6];
      *(_DWORD *)buf = 134218496;
      v23 = v9;
      v24 = 2048;
      v25 = v10;
      v26 = 1024;
      v27 = 12;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "TILE: corrupt header, fileGetNextSection, size, %zd, readto, %lld, %d", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102155460);
      v12 = a2[3];
      v13 = a2[6];
      v16 = 134218496;
      v17 = v12;
      v18 = 2048;
      v19 = v13;
      v20 = 1024;
      v21 = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "TILE: corrupt header, fileGetNextSection, size, %zd, readto, %lld, %d", (size_t)&v16, 28);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLTileFileWithTraversal::fileGetNextSection(CLMappedFile &, CLTilesManager_Type::SectionHeader &)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    sub_100FA7E3C(a1);
    return 0;
  }
  return result;
}

uint64_t sub_10080F5BC(uint64_t a1, FILE *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  NSObject *v10;
  uint64_t v11;
  int v12;
  int v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  NSObject *v17;
  uint64_t v18;
  size_t v19;
  BOOL v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  int v27;
  unsigned int v28;
  int v29;
  const char *v30;
  size_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  size_t v36;
  uint64_t v37;
  NSObject *v38;
  uint64_t v39;
  double v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  int8x16_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  double v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  unsigned int v66;
  int v67;
  const char *v68;
  const char *v69;
  uint8_t *v70;
  uint64_t v71;
  const char *v72;
  uint8_t *v73;
  NSObject *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  const char *v78;
  uint8_t *v79;
  NSObject *v80;
  uint64_t v81;
  const char *v82;
  NSObject *v83;
  uint64_t v84;
  const char *v85;
  uint8_t *v86;
  size_t v87;
  NSObject *v88;
  NSObject *v89;
  NSObject *v90;
  uint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  const char *v96;
  uint8_t *v97;
  const char *v98;
  uint64_t v99;
  const char *v100;
  uint8_t *v101;
  uint64_t v102;
  const char *v103;
  uint8_t *v104;
  uint64_t v105;
  const char *v106;
  uint8_t *v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t *v111;
  uint64_t v112;
  _OWORD *v113;
  FILE *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t __ptr;
  int v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t v122;
  __int16 v123;
  int v124;
  _BYTE v125[10];
  __int128 v126;
  int v127;
  __int16 v128;
  unsigned int v129;
  __int16 v130;
  int v131;
  __int16 v132;
  const char *v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  _BYTE v144[28];
  _OWORD v145[13];
  uint8_t buf[4];
  _BYTE v147[30];
  __int16 v148;
  unsigned int v149;
  __int16 v150;
  int v151;
  __int16 v152;
  const char *v153;
  uint64_t v154;

  v5 = a1;
  v6 = *(_QWORD *)(a1 + 40);
  v122 = v6;
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  v123 = 256;
  v7 = a3[2];
  *(_OWORD *)(v5 + 304) = *(_OWORD *)a3;
  *(_QWORD *)(v5 + 320) = v7;
  *(_BYTE *)(v5 + 296) = 1;
  v8 = &qword_1022A0000;
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102155460);
  v9 = &qword_1022A0000;
  v10 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v11 = *a3;
    v12 = *((unsigned __int8 *)a3 + 8);
    v13 = *((unsigned __int8 *)a3 + 9);
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)v147 = v11;
    *(_WORD *)&v147[8] = 1024;
    *(_DWORD *)&v147[10] = v12;
    *(_WORD *)&v147[14] = 1024;
    *(_DWORD *)&v147[16] = v13;
    *(_WORD *)&v147[20] = 2048;
    *(_QWORD *)&v147[22] = sub_100129380((uint64_t)(a3 + 2));
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "TILE: traverseTileFile, start, message, %s, isHeadersOnly, %d, isBinarySearch, %d, macAddressToSearch, %012llx", buf, 0x22u);
    v9 = &qword_1022A0000;
    v8 = &qword_1022A0000;
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102155460);
    v92 = qword_1022A02D8;
    v93 = *a3;
    v94 = *((unsigned __int8 *)a3 + 8);
    v95 = *((unsigned __int8 *)a3 + 9);
    LODWORD(v145[0]) = 136315906;
    *(_QWORD *)((char *)v145 + 4) = v93;
    WORD6(v145[0]) = 1024;
    *(_DWORD *)((char *)v145 + 14) = v94;
    WORD1(v145[1]) = 1024;
    DWORD1(v145[1]) = v95;
    WORD4(v145[1]) = 2048;
    *(_QWORD *)((char *)&v145[1] + 10) = sub_100129380((uint64_t)(a3 + 2));
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v92, 2, "TILE: traverseTileFile, start, message, %s, isHeadersOnly, %d, isBinarySearch, %d, macAddressToSearch, %012llx", (const char *)v145, 34, v110, v112);
    v97 = (uint8_t *)v96;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLTileFileWithTraversal::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v96);
    v9 = &qword_1022A0000;
    v8 = &qword_1022A0000;
    if (v97 != buf)
      free(v97);
  }
  if (!a2)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102155460);
    v17 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "TILE: traverseTileFile, can't open tile", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_21;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102155460);
    LOWORD(v145[0]) = 0;
    LODWORD(v108) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "TILE: traverseTileFile, can't open tile", v145, v108);
    v16 = (uint8_t *)v98;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLTileFileWithTraversal::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v98);
    goto LABEL_116;
  }
  if (feof(a2))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102155460);
    v14 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "TILE: traverseTileFile, file is empty", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_21;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102155460);
    LOWORD(v145[0]) = 0;
    LODWORD(v108) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "TILE: traverseTileFile, file is empty", v145, v108);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLTileFileWithTraversal::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v15);
LABEL_116:
    if (v16 != buf)
      free(v16);
LABEL_21:
    v18 = 0;
    goto LABEL_108;
  }
  *(_QWORD *)((char *)v145 + 4) = 192;
  LODWORD(v145[0]) = 109498;
  HIDWORD(v145[0]) = 381;
  memset(&v145[1], 0, 28);
  *(int32x2_t *)((char *)&v145[2] + 12) = vdup_n_s32(0xC47A0000);
  DWORD1(v145[3]) = -998637568;
  memset((char *)&v145[3] + 8, 0, 148);
  LODWORD(v134) = 306106;
  *(_QWORD *)((char *)&v134 + 4) = 176;
  HIDWORD(v134) = 381;
  *(_DWORD *)&v144[16] = 0;
  *(_QWORD *)&v144[20] = 0;
  v135 = 0u;
  v136 = 0u;
  v117 = v6;
  if (!*(_BYTE *)(v5 + 296))
  {
LABEL_61:
    v18 = 1;
    goto LABEL_103;
  }
  v111 = &v154;
  v113 = &v147[12];
  v116 = 136316674;
  v114 = a2;
  v115 = v5;
  while (1)
  {
    if (feof(a2))
      goto LABEL_61;
    v120 = 0;
    v121 = 0;
    __ptr = 0;
    v119 = 0;
    v19 = fread(&__ptr, 1uLL, 0xCuLL, a2);
    sub_100CD5A8C((unsigned __int16 *)&__ptr, (uint64_t)&v120);
    v20 = v19 == 12;
    v18 = v19 != 12;
    if (!v20)
      goto LABEL_103;
    if (v8[90] != -1)
      dispatch_once(&qword_1022A02D0, &stru_102155460);
    v21 = v9[91];
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      v22 = v18;
      v23 = v8;
      v24 = v9;
      v25 = *a3;
      v26 = (unsigned __int16)v120;
      v27 = WORD1(v120);
      v29 = HIDWORD(v120);
      v28 = v121;
      v30 = sub_100F9F0FC(WORD1(v120));
      *(_DWORD *)buf = v116;
      *(_QWORD *)v147 = v25;
      *(_WORD *)&v147[8] = 2048;
      *(_QWORD *)&v147[10] = 12;
      *(_WORD *)&v147[18] = 1024;
      *(_DWORD *)&v147[20] = v26;
      *(_WORD *)&v147[24] = 1024;
      *(_DWORD *)&v147[26] = v27;
      v148 = 1024;
      v149 = v28;
      v150 = 1024;
      v151 = v29;
      v152 = 2080;
      v153 = v30;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "TILE: thisSection, message, %s, readBytes, %lu, section, signature, 0x%x, sectionId, %d, sizeBytes, %d, headerSizeBytes, %d, name, %s", buf, 0x38u);
      v6 = v117;
      v9 = v24;
      v8 = v23;
      v18 = v22;
      a2 = v114;
      v5 = v115;
    }
    if (sub_1001BFF7C(115, 2))
    {
      HIDWORD(v109) = v18;
      bzero(buf, 0x65CuLL);
      v61 = v8;
      if (v8[90] != -1)
        dispatch_once(&qword_1022A02D0, &stru_102155460);
      v62 = v9[91];
      v63 = *a3;
      v64 = (unsigned __int16)v120;
      v65 = WORD1(v120);
      v67 = HIDWORD(v120);
      v66 = v121;
      v68 = sub_100F9F0FC(WORD1(v120));
      v124 = v116;
      *(_QWORD *)v125 = v63;
      *(_WORD *)&v125[8] = 2048;
      *(_QWORD *)&v126 = 12;
      WORD4(v126) = 1024;
      *(_DWORD *)((char *)&v126 + 10) = v64;
      HIWORD(v126) = 1024;
      v127 = v65;
      v128 = 1024;
      v129 = v66;
      v130 = 1024;
      v131 = v67;
      v132 = 2080;
      v133 = v68;
      LODWORD(v109) = 56;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v62, 2, "TILE: thisSection, message, %s, readBytes, %lu, section, signature, 0x%x, sectionId, %d, sizeBytes, %d, headerSizeBytes, %d, name, %s", (const char *)&v124, v109, (_DWORD)v111, (_DWORD)v113, (_DWORD)v114, v115, (const char *)v116);
      v70 = (uint8_t *)v69;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLTileFileWithTraversal::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v69);
      v6 = v117;
      v9 = &qword_1022A0000;
      v8 = v61;
      if (v70 != buf)
        free(v70);
      v18 = HIDWORD(v108);
    }
    if ((unsigned __int16)v120 != 43962)
      break;
    v31 = HIDWORD(v120);
    v32 = HIDWORD(v120) + 12;
    v33 = v32 + v121;
    if (v33 > 0x640000B)
    {
      if (v8[90] != -1)
        dispatch_once(&qword_1022A02D0, &stru_102155460);
      v80 = v9[91];
      if (os_log_type_enabled(v80, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)v147 = v33;
        *(_WORD *)&v147[8] = 2048;
        *(_QWORD *)&v147[10] = 104857612;
        _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_FAULT, "TILE: invalid tile file, bad allocation size, totalBytesInSection, %lu, maxAllocationSize, %lu", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        v75 = v18;
        bzero(buf, 0x65CuLL);
        v76 = v8;
        if (v8[90] != -1)
          dispatch_once(&qword_1022A02D0, &stru_102155460);
        v81 = v9[91];
        v124 = 134218240;
        *(_QWORD *)v125 = v33;
        *(_WORD *)&v125[8] = 2048;
        *(_QWORD *)&v126 = 104857612;
        LODWORD(v108) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v81, 17, "TILE: invalid tile file, bad allocation size, totalBytesInSection, %lu, maxAllocationSize, %lu", &v124, v108);
        v79 = (uint8_t *)v82;
        sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLTileFileWithTraversal::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v82);
LABEL_78:
        if (v79 != buf)
          free(v79);
        v6 = v117;
        v8 = v76;
        v5 = v115;
        v18 = v75;
        goto LABEL_103;
      }
      goto LABEL_103;
    }
    v34 = malloc_type_malloc(HIDWORD(v120) + 12, 0xDF19E55uLL);
    v35 = v34;
    if (!v34)
    {
      if (v8[90] != -1)
        dispatch_once(&qword_1022A02D0, &stru_102155460);
      v83 = v9[91];
      if (os_log_type_enabled(v83, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)v147 = v32;
        _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_FAULT, "TILE: failed to allocate memory for, %lu", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (v8[90] != -1)
          dispatch_once(&qword_1022A02D0, &stru_102155460);
        v84 = v9[91];
        v124 = 134217984;
        *(_QWORD *)v125 = v32;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v84, 17, "TILE: failed to allocate memory for, %lu", &v124);
        v86 = (uint8_t *)v85;
        sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLTileFileWithTraversal::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v85);
        if (v86 != buf)
          free(v86);
        v6 = v117;
        v5 = v115;
      }
      goto LABEL_103;
    }
    v36 = fread((char *)v34 + 12, 1uLL, v31, a2);
    if (v36 != v31)
    {
      v87 = v36;
      if (v8[90] != -1)
        dispatch_once(&qword_1022A02D0, &stru_102155460);
      v88 = v9[91];
      if (os_log_type_enabled(v88, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)v147 = v87;
        *(_WORD *)&v147[8] = 2048;
        *(_QWORD *)&v147[10] = v31;
        _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_FAULT, "TILE: failed to read pSectionH, %lu, %lu", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (v8[90] != -1)
          dispatch_once(&qword_1022A02D0, &stru_102155460);
        v102 = v9[91];
        v124 = 134218240;
        *(_QWORD *)v125 = v87;
        *(_WORD *)&v125[8] = 2048;
        *(_QWORD *)&v126 = v31;
        LODWORD(v108) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v102, 17, "TILE: failed to read pSectionH, %lu, %lu", &v124, v108);
        v104 = (uint8_t *)v103;
        sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLTileFileWithTraversal::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v103);
        if (v104 != buf)
          free(v104);
        v6 = v117;
        v5 = v115;
      }
      free(v35);
      goto LABEL_102;
    }
    v37 = __ptr;
    *((_DWORD *)v35 + 2) = v119;
    *v35 = v37;
    if (v8[90] != -1)
      dispatch_once(&qword_1022A02D0, &stru_102155460);
    v38 = v9[91];
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109888;
      *(_DWORD *)v147 = (unsigned __int16)v120;
      *(_WORD *)&v147[4] = 1024;
      *(_DWORD *)&v147[6] = WORD1(v120);
      *(_WORD *)&v147[10] = 1024;
      *(_DWORD *)&v147[12] = HIDWORD(v120);
      *(_WORD *)&v147[16] = 1024;
      *(_DWORD *)&v147[18] = v121;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "TILE: section, signature, 0x%x, sectionId, %d, headerSizeBytes, %u, sizeBytes, %u", buf, 0x1Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v8[90] != -1)
        dispatch_once(&qword_1022A02D0, &stru_102155460);
      v71 = v9[91];
      v124 = 67109888;
      *(_DWORD *)v125 = (unsigned __int16)v120;
      *(_WORD *)&v125[4] = 1024;
      *(_DWORD *)&v125[6] = WORD1(v120);
      LOWORD(v126) = 1024;
      *(_DWORD *)((char *)&v126 + 2) = HIDWORD(v120);
      WORD3(v126) = 1024;
      DWORD2(v126) = v121;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v71, 2, "TILE: section, signature, 0x%x, sectionId, %d, headerSizeBytes, %u, sizeBytes, %u", &v124, 26, (_DWORD)v111, (_DWORD)v113);
      v73 = (uint8_t *)v72;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLTileFileWithTraversal::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v72);
      if (v73 != buf)
        free(v73);
    }
    v39 = ftell(a2);
    (*(void (**)(uint64_t, FILE *, uint64_t *, _QWORD *, uint64_t *))(*(_QWORD *)v5 + 112))(v5, a2, &v120, v35, a3);
    switch(WORD1(v120))
    {
      case 1u:
        v145[0] = *(_OWORD *)v35;
        v51 = *((_OWORD *)v35 + 1);
        v52 = *((_OWORD *)v35 + 2);
        v53 = *((_OWORD *)v35 + 4);
        v145[3] = *((_OWORD *)v35 + 3);
        v145[4] = v53;
        v145[1] = v51;
        v145[2] = v52;
        v54 = *((_OWORD *)v35 + 5);
        v55 = *((_OWORD *)v35 + 6);
        v56 = *((_OWORD *)v35 + 8);
        v145[7] = *((_OWORD *)v35 + 7);
        v145[8] = v56;
        v145[5] = v54;
        v145[6] = v55;
        v57 = *((_OWORD *)v35 + 9);
        v58 = *((_OWORD *)v35 + 10);
        v59 = *((_OWORD *)v35 + 11);
        *(_OWORD *)((char *)&v145[11] + 12) = *(_OWORD *)((char *)v35 + 188);
        v145[10] = v58;
        v145[11] = v59;
        v145[9] = v57;
        *(int8x8_t *)&v60 = sub_100CD5A90((uint64_t)v145, (uint64_t)v145);
        (*(void (**)(uint64_t, _OWORD *, double))(*(_QWORD *)v5 + 120))(v5, v145, v60);
        break;
      case 4u:
        v41 = *(_OWORD *)v35;
        v42 = *((_OWORD *)v35 + 1);
        v43 = *((_OWORD *)v35 + 3);
        v136 = *((_OWORD *)v35 + 2);
        v137 = v43;
        v135 = v42;
        v134 = v41;
        v44 = *((_OWORD *)v35 + 4);
        v45 = *((_OWORD *)v35 + 5);
        v46 = *((_OWORD *)v35 + 7);
        v140 = *((_OWORD *)v35 + 6);
        v141 = v46;
        v138 = v44;
        v139 = v45;
        v47 = *((_OWORD *)v35 + 8);
        v48 = *((_OWORD *)v35 + 9);
        v49 = *((_OWORD *)v35 + 10);
        *(_OWORD *)&v144[12] = *(_OWORD *)((char *)v35 + 172);
        v143 = v48;
        *(_OWORD *)v144 = v49;
        v142 = v47;
        v50 = sub_100CD5B3C((unsigned __int16 *)&v134, (uint64_t)&v134);
        (*(void (**)(uint64_t, __int128 *, int8x16_t))(*(_QWORD *)v5 + 128))(v5, &v134, v50);
        break;
      case 5u:
        *(_QWORD *)v147 = 184;
        *(_DWORD *)buf = 371642;
        *(_DWORD *)&v147[8] = 381;
        *v113 = 0u;
        v113[1] = 0u;
        *v111 = 0;
        v111[1] = 0;
        *((_DWORD *)v111 + 4) = 0;
        *(int8x8_t *)&v40 = sub_100F9F120((uint64_t)v35, (uint64_t)buf);
        (*(void (**)(uint64_t, uint8_t *, double))(*(_QWORD *)v5 + 168))(v5, buf, v40);
        break;
      default:
        goto LABEL_49;
    }
    if (*((_BYTE *)a3 + 8))
      *(_BYTE *)(v5 + 296) = 0;
LABEL_49:
    free(v35);
    if (fseek(a2, v39 + v121, 0))
    {
      if (v8[90] != -1)
        dispatch_once(&qword_1022A02D0, &stru_102155460);
      v89 = v9[91];
      if (os_log_type_enabled(v89, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)v147 = v39;
        *(_WORD *)&v147[8] = 1024;
        *(_DWORD *)&v147[10] = v121;
        _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_FAULT, "TILE: ERROR: failed to fseek to, currentFileOffset, %lu, %u", buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (v8[90] != -1)
          dispatch_once(&qword_1022A02D0, &stru_102155460);
        v105 = v9[91];
        v124 = 134218240;
        *(_QWORD *)v125 = v39;
        *(_WORD *)&v125[8] = 1024;
        LODWORD(v126) = v121;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v105, 17, "TILE: ERROR: failed to fseek to, currentFileOffset, %lu, %u", &v124, 18);
        v107 = (uint8_t *)v106;
        sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLTileFileWithTraversal::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v106);
        if (v107 != buf)
          free(v107);
        v6 = v117;
        v5 = v115;
      }
LABEL_102:
      v18 = 0;
      goto LABEL_103;
    }
    if (!*(_BYTE *)(v5 + 296))
      goto LABEL_61;
  }
  if (v8[90] != -1)
    dispatch_once(&qword_1022A02D0, &stru_102155460);
  v74 = v9[91];
  if (os_log_type_enabled(v74, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)v147 = 12;
    *(_WORD *)&v147[8] = 1024;
    *(_DWORD *)&v147[10] = (unsigned __int16)v120;
    *(_WORD *)&v147[14] = 1024;
    *(_DWORD *)&v147[16] = WORD1(v120);
    *(_WORD *)&v147[20] = 1024;
    *(_DWORD *)&v147[22] = v121;
    _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_FAULT, "TILE: Invalid section signature, readBytes, %lu, section, signature, 0x%x, sectionId, %d, sizeBytes, %d", buf, 0x1Eu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    v75 = v18;
    bzero(buf, 0x65CuLL);
    v76 = v8;
    if (v8[90] != -1)
      dispatch_once(&qword_1022A02D0, &stru_102155460);
    v77 = v9[91];
    v124 = 134218752;
    *(_QWORD *)v125 = 12;
    *(_WORD *)&v125[8] = 1024;
    LODWORD(v126) = (unsigned __int16)v120;
    WORD2(v126) = 1024;
    *(_DWORD *)((char *)&v126 + 6) = WORD1(v120);
    WORD5(v126) = 1024;
    HIDWORD(v126) = v121;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v77, 17, "TILE: Invalid section signature, readBytes, %lu, section, signature, 0x%x, sectionId, %d, sizeBytes, %d", &v124, 30, (_DWORD)v111, (_DWORD)v113);
    v79 = (uint8_t *)v78;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLTileFileWithTraversal::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v78);
    goto LABEL_78;
  }
LABEL_103:
  *(_BYTE *)(v5 + 296) = 0;
  if (v8[90] != -1)
    dispatch_once(&qword_1022A02D0, &stru_102155460);
  v90 = v9[91];
  if (os_log_type_enabled(v90, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_DEBUG, "TILE: traverseTileFile, done", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v8[90] != -1)
      dispatch_once(&qword_1022A02D0, &stru_102155460);
    v99 = v9[91];
    LOWORD(v124) = 0;
    LODWORD(v108) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v99, 2, "TILE: traverseTileFile, done", &v124, v108);
    v101 = (uint8_t *)v100;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLTileFileWithTraversal::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v100);
    if (v101 != buf)
      free(v101);
    v6 = v117;
  }
LABEL_108:
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  return v18;
}

void sub_100810A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100810AD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  const char *v8;
  uint8_t *v9;
  const char *v10;
  _DWORD v11[2];
  __int16 v12;
  const char *v13;
  uint8_t buf[4];
  unsigned int v15;
  __int16 v16;
  const char *v17;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102155460);
  v4 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(unsigned __int16 *)(a3 + 2);
    *(_DWORD *)buf = 67109378;
    v15 = v5;
    v16 = 2080;
    v17 = sub_100F9F0FC(v5);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "TILE: CLTileFile, sectionId, %d, %s", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102155460);
    v6 = qword_1022A02D8;
    v7 = *(unsigned __int16 *)(a3 + 2);
    v11[0] = 67109378;
    v11[1] = v7;
    v12 = 2080;
    v13 = sub_100F9F0FC(v7);
    LODWORD(v10) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v6, 2, "TILE: CLTileFile, sectionId, %d, %s", v11, v10);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLTileFileWithTraversal::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const TraverseDetails &)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
}

void sub_100810CB0(uint64_t a1, uint64_t a2)
{
  double v4;
  int v5;
  NSObject *v6;
  int v7;
  int v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  int v16;
  int v17;
  double v18;
  int v19;
  uint64_t v20;
  int v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  int v29;
  double v30;
  int v31;
  int v32;
  CFAbsoluteTime v33;
  const char *v34;
  uint8_t *v35;
  int v36;
  int v37;
  double v38;
  __int128 v39;
  _BYTE v40[24];
  _BYTE v41[12];
  _BYTE v42[10];
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  CFAbsoluteTime v48;
  uint8_t buf[4];
  int v50;
  __int16 v51;
  int v52;
  __int16 v53;
  int v54;
  __int16 v55;
  double v56;
  __int16 v57;
  double v58;
  __int16 v59;
  double v60;
  __int16 v61;
  double v62;
  __int16 v63;
  double v64;
  __int16 v65;
  double v66;
  __int16 v67;
  double v68;
  __int16 v69;
  int v70;
  __int16 v71;
  double v72;
  __int16 v73;
  int v74;
  __int16 v75;
  int v76;
  __int16 v77;
  double v78;

  v4 = (double)*(unint64_t *)(a2 + 56) - kCFAbsoluteTimeIntervalSince1970;
  v5 = *(_DWORD *)(a2 + 192);
  if (v5 < 1)
    v5 = 1209600;
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 12);
  *(int32x2_t *)(a1 + 52) = vrev64_s32(*(int32x2_t *)(a2 + 16));
  *(_QWORD *)(a1 + 64) = -1;
  *(double *)(a1 + 176) = v4;
  *(_DWORD *)(a1 + 200) = v5;
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102155460);
  v6 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v7 = *(_DWORD *)(a2 + 12);
    v8 = *(_DWORD *)(a2 + 16);
    v9 = *(float *)(a2 + 28);
    v10 = *(float *)(a2 + 32);
    v11 = *(float *)(a2 + 36);
    v12 = *(float *)(a2 + 40);
    v13 = *(float *)(a2 + 44);
    v14 = *(float *)(a2 + 48);
    v15 = *(float *)(a2 + 52);
    v16 = *(_DWORD *)(a2 + 20);
    v17 = *(_DWORD *)(a2 + 24);
    v18 = *(double *)(a1 + 176);
    v19 = *(_DWORD *)(a2 + 192);
    v36 = *(_DWORD *)(a1 + 200);
    *(_DWORD *)buf = 67112704;
    v50 = v7;
    v51 = 1024;
    v52 = v8;
    v53 = 1024;
    v54 = v16;
    v55 = 2048;
    v56 = v9;
    v57 = 2048;
    v58 = v10;
    v59 = 2048;
    v60 = v11;
    v61 = 2048;
    v62 = v12;
    v63 = 2048;
    v64 = v13;
    v65 = 2048;
    v66 = v14;
    v67 = 2048;
    v68 = v15;
    v69 = 1024;
    v70 = v17;
    v71 = 2048;
    v72 = v18;
    v73 = 1024;
    v74 = v19;
    v75 = 1024;
    v76 = v36;
    v77 = 2048;
    v78 = CFAbsoluteTimeGetCurrent() - v18;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "TILE: tile, version, %d, y, %u, x, %u, corner, %.8f, %.8f, detlas, %.2f, %.2f, altitude, %f,  minAltitude, %f, maxAltitude, %f, numOfInputPoints, %d, generationTime, %.1f, expirationAge, %d, %d, age, %.1lf", buf, 0x80u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102155460);
    v20 = qword_1022A02D8;
    v21 = *(_DWORD *)(a2 + 16);
    v22 = *(float *)(a2 + 28);
    v23 = *(float *)(a2 + 32);
    v24 = *(float *)(a2 + 36);
    v25 = *(float *)(a2 + 40);
    v26 = *(float *)(a2 + 44);
    v27 = *(float *)(a2 + 48);
    v28 = *(float *)(a2 + 52);
    v29 = *(_DWORD *)(a2 + 20);
    v30 = *(double *)(a1 + 176);
    v31 = *(_DWORD *)(a2 + 192);
    v32 = *(_DWORD *)(a1 + 200);
    v33 = CFAbsoluteTimeGetCurrent() - v30;
    LOWORD(v38) = 1024;
    *(_DWORD *)((char *)&v38 + 2) = v21;
    HIWORD(v38) = 1024;
    LODWORD(v39) = v29;
    WORD2(v39) = 2048;
    *(double *)((char *)&v39 + 6) = v22;
    HIWORD(v39) = 2048;
    *(_WORD *)v40 = 2048;
    *(double *)&v40[2] = v24;
    *(_WORD *)&v40[10] = 2048;
    *(double *)&v40[12] = v25;
    *(_WORD *)&v40[20] = 2048;
    *(_WORD *)&v40[22] = LOWORD(v26);
    *(_WORD *)v41 = 2048;
    *(double *)&v41[2] = v28;
    *(_WORD *)&v41[10] = 1024;
    *(_WORD *)v42 = 2048;
    *(double *)&v42[2] = v30;
    v43 = 1024;
    v44 = v31;
    v45 = 1024;
    v46 = v32;
    v47 = 2048;
    v48 = v33;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v20, 2, "TILE: tile, version, %d, y, %u, x, %u, corner, %.8f, %.8f, detlas, %.2f, %.2f, altitude, %f,  minAltitude, %f, maxAltitude, %f, numOfInputPoints, %d, generationTime, %.1f, expirationAge, %d, %d, age, %.1lf", &v37, 128, 67112704, v38, *(double *)&v39, *((double *)&v39 + 1), v23, *(double *)v40, *(double *)&v40[8], *(double *)&v40[16],
      *(_QWORD *)&v26 >> 16,
      v27,
      *(_DWORD *)v41,
      *(_DWORD *)&v41[8],
      *(double *)v42);
    v35 = (uint8_t *)v34;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLTileFileWithTraversal::onTraversingTileHeader(const CLTilesManager_Type::TileHeader &)", "%s\n", v34);
    if (v35 != buf)
      free(v35);
  }
}

void sub_100811080(uint64_t a1, uint64_t a2)
{
  double v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  NSObject *v8;
  void **v9;
  NSObject *v10;
  int v11;
  int v12;
  int v13;
  float v14;
  float v15;
  float v16;
  float v17;
  uint64_t v18;
  int v19;
  CFAbsoluteTime Current;
  uint64_t v21;
  double v22;
  uint64_t v23;
  __int128 *p_buf;
  char *v25;
  char *v26;
  uint64_t v27;
  int v28;
  int v29;
  float v30;
  float v31;
  float v32;
  float v33;
  uint64_t v34;
  int v35;
  CFAbsoluteTime v36;
  uint64_t v37;
  double v38;
  const char *v39;
  void **v40;
  __int128 buf;
  __int128 v42;
  _BYTE v43[12];
  _BYTE v44[20];
  int v45;
  __int16 v46;
  double v47;
  __int16 v48;
  uint64_t v49;
  int v50;
  __int128 *v51;
  void *__p;
  __int16 v53;
  int v54;
  __int16 v55;
  int v56;
  __int16 v57;
  double v58;
  __int16 v59;
  double v60;
  __int16 v61;
  double v62;
  __int16 v63;
  double v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  int v68;
  __int16 v69;
  double v70;
  __int16 v71;
  uint64_t v72;

  v4 = (double)*(unint64_t *)(a2 + 40) - kCFAbsoluteTimeIntervalSince1970;
  v5 = *(_QWORD *)(a2 + 188);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
    v6 = v5;
  else
    v6 = -1;
  v7 = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 12);
  *(int32x2_t *)(a1 + 52) = vrev64_s32(*(int32x2_t *)(a2 + 16));
  *(_QWORD *)(a1 + 64) = v6;
  *(double *)(a1 + 176) = v4;
  *(_DWORD *)(a1 + 200) = v7;
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102155460);
  v8 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    sub_100BCC240((unsigned int *)(a1 + 48), &__p);
    v9 = (SBYTE1(v58) & 0x80u) == 0 ? &__p : (void **)__p;
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "TILE: onTraversingTileHeaderKeyLatLon, tileid, %s", (uint8_t *)&buf, 0xCu);
    if (SBYTE1(v58) < 0)
      operator delete(__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102155460);
    v23 = qword_1022A02D8;
    sub_100BCC240((unsigned int *)(a1 + 48), &buf);
    if ((SBYTE7(v42) & 0x80u) == 0)
      p_buf = &buf;
    else
      p_buf = (__int128 *)buf;
    v50 = 136315138;
    v51 = p_buf;
    _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, v23, 2, "TILE: onTraversingTileHeaderKeyLatLon, tileid, %s", (const char *)&v50);
    v26 = v25;
    if (SBYTE7(v42) < 0)
      operator delete((void *)buf);
    sub_100512490("Generic", 1, 0, 2, "virtual void CLTileFileWithTraversal::onTraversingTileHeaderKeyLatLon(const CLTilesManager_Type::TileHeaderKeyLatLon &)", "%s\n", v26);
    if (v26 != (char *)&__p)
      free(v26);
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102155460);
  v10 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v12 = *(_DWORD *)(a2 + 12);
    v11 = *(_DWORD *)(a2 + 16);
    v13 = *(_DWORD *)(a2 + 20);
    v14 = *(float *)(a2 + 24);
    v15 = *(float *)(a2 + 28);
    v16 = *(float *)(a2 + 32);
    v17 = *(float *)(a2 + 36);
    v18 = *(_QWORD *)(a1 + 176);
    v19 = *(_DWORD *)(a2 + 176);
    Current = CFAbsoluteTimeGetCurrent();
    v21 = *(_QWORD *)(a2 + 188);
    v22 = Current - *(double *)(a1 + 176);
    LODWORD(__p) = 67111680;
    HIDWORD(__p) = v12;
    v53 = 1024;
    v54 = v11;
    v55 = 1024;
    v56 = v13;
    v57 = 2048;
    v58 = v14;
    v59 = 2048;
    v60 = v15;
    v61 = 2048;
    v62 = v16;
    v63 = 2048;
    v64 = v17;
    v65 = 2048;
    v66 = v18;
    v67 = 1024;
    v68 = v19;
    v69 = 2048;
    v70 = v22;
    v71 = 2048;
    v72 = v21;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "TILE: tile.keylatlon, version, %d, y, %u, x, %u, corner, %.8f, %.8f, detlas, %.2f, %.2f, generationTime, %.1f, expirationAge, %d, age, %.1lf, sec_key, %016llx", (uint8_t *)&__p, 0x60u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102155460);
    v27 = qword_1022A02D8;
    v28 = *(_DWORD *)(a2 + 16);
    v29 = *(_DWORD *)(a2 + 20);
    v31 = *(float *)(a2 + 24);
    v30 = *(float *)(a2 + 28);
    v33 = *(float *)(a2 + 32);
    v32 = *(float *)(a2 + 36);
    v34 = *(_QWORD *)(a1 + 176);
    v35 = *(_DWORD *)(a2 + 176);
    v36 = CFAbsoluteTimeGetCurrent();
    v37 = *(_QWORD *)(a2 + 188);
    v38 = v36 - *(double *)(a1 + 176);
    WORD4(buf) = 1024;
    *(_DWORD *)((char *)&buf + 10) = v28;
    HIWORD(buf) = 1024;
    LODWORD(v42) = v29;
    WORD2(v42) = 2048;
    *(double *)((char *)&v42 + 6) = v31;
    HIWORD(v42) = 2048;
    *(_WORD *)v43 = 2048;
    *(double *)&v43[2] = v33;
    *(_WORD *)&v43[10] = 2048;
    *(double *)v44 = v32;
    *(_WORD *)&v44[8] = 2048;
    *(_QWORD *)&v44[10] = v34;
    *(_WORD *)&v44[18] = 1024;
    v45 = v35;
    v46 = 2048;
    v47 = v38;
    v48 = 2048;
    v49 = v37;
    _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, v27, 2, "TILE: tile.keylatlon, version, %d, y, %u, x, %u, corner, %.8f, %.8f, detlas, %.2f, %.2f, generationTime, %.1f, expirationAge, %d, age, %.1lf, sec_key, %016llx", &buf, 96, 67111680, *((double *)&buf + 1), *(double *)&v42, *((double *)&v42 + 1), v30, *(double *)v43, *(_DWORD *)&v43[8], *(double *)&v44[4],
      *(_QWORD *)&v44[12]);
    v40 = (void **)v39;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLTileFileWithTraversal::onTraversingTileHeaderKeyLatLon(const CLTilesManager_Type::TileHeaderKeyLatLon &)", "%s\n", v39);
    if (v40 != &__p)
      free(v40);
  }
}

void sub_100811580(uint64_t a1, uint64_t a2)
{
  double v4;
  int v5;
  int v6;
  NSObject *v7;
  int v8;
  uint8_t *v9;
  uint8_t *v10;
  void *p_p;
  NSObject *v12;
  int v13;
  int v14;
  int v15;
  float v16;
  float v17;
  float v18;
  float v19;
  uint64_t v20;
  int v21;
  CFAbsoluteTime Current;
  double v23;
  uint64_t v24;
  int v25;
  void **v26;
  void **v27;
  _BYTE *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  int v32;
  int v33;
  float v34;
  float v35;
  float v36;
  float v37;
  uint64_t v38;
  int v39;
  CFAbsoluteTime v40;
  double v41;
  const char *v42;
  uint8_t *v43;
  void *__p;
  double v45;
  __int128 v46;
  _BYTE v47[12];
  _BYTE v48[18];
  __int16 v49;
  int v50;
  __int16 v51;
  double v52;
  _BYTE buf[12];
  __int16 v54;
  void *v55;
  char v56;
  int v57;
  void **v58;
  __int16 v59;
  _BYTE *v60;
  uint8_t v61[8];
  __int16 v62;
  int v63;
  __int16 v64;
  int v65;
  __int16 v66;
  double v67;
  __int16 v68;
  double v69;
  __int16 v70;
  double v71;
  __int16 v72;
  double v73;
  __int16 v74;
  uint64_t v75;
  __int16 v76;
  int v77;
  __int16 v78;
  double v79;

  v4 = (double)*(unint64_t *)(a2 + 40) - kCFAbsoluteTimeIntervalSince1970;
  v5 = *(_DWORD *)(a2 + 176);
  v6 = rand();
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 12);
  *(int32x2_t *)(a1 + 52) = vrev64_s32(*(int32x2_t *)(a2 + 16));
  *(_QWORD *)(a1 + 64) = -1;
  *(double *)(a1 + 176) = v4;
  *(_DWORD *)(a1 + 200) = v6 % 86400 + v5;
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102155460);
  v7 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    sub_100BCC240((unsigned int *)(a1 + 48), v61);
    v8 = SBYTE1(v67);
    v9 = *(uint8_t **)v61;
    sub_100BCC62C(a1 + 48, &__p);
    v10 = v61;
    if (v8 < 0)
      v10 = v9;
    if ((SBYTE7(v46) & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v10;
    v54 = 2080;
    v55 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TILE: tile.location, tileid, %s, serverName, %s", buf, 0x16u);
    if (SBYTE7(v46) < 0)
      operator delete(__p);
    if (SBYTE1(v67) < 0)
      operator delete(*(void **)v61);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(v61, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102155460);
    v24 = qword_1022A02D8;
    sub_100BCC240((unsigned int *)(a1 + 48), &__p);
    v25 = SBYTE7(v46);
    v26 = (void **)__p;
    sub_100BCC62C(a1 + 48, buf);
    v27 = &__p;
    if (v25 < 0)
      v27 = v26;
    if (v56 >= 0)
      v28 = buf;
    else
      v28 = *(_BYTE **)buf;
    v57 = 136315394;
    v58 = v27;
    v59 = 2080;
    v60 = v28;
    _os_log_send_and_compose_impl(2, 0, v61, 1628, &_mh_execute_header, v24, 2, "TILE: tile.location, tileid, %s, serverName, %s", (const char *)&v57, 22);
    v30 = v29;
    if (v56 < 0)
      operator delete(*(void **)buf);
    if (SBYTE7(v46) < 0)
      operator delete(__p);
    sub_100512490("Generic", 1, 0, 2, "virtual void CLTileFileWithTraversal::onTraversingTileHeaderLocation(const CLTilesManager_Type::TileHeaderLocation &)", "%s\n", v30);
    if (v30 != (char *)v61)
      free(v30);
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102155460);
  v12 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v13 = *(_DWORD *)(a2 + 12);
    v14 = *(_DWORD *)(a2 + 16);
    v15 = *(_DWORD *)(a2 + 20);
    v16 = *(float *)(a2 + 24);
    v17 = *(float *)(a2 + 28);
    v18 = *(float *)(a2 + 32);
    v19 = *(float *)(a2 + 36);
    v20 = *(_QWORD *)(a1 + 176);
    v21 = *(_DWORD *)(a2 + 176);
    Current = CFAbsoluteTimeGetCurrent();
    *(_DWORD *)v61 = 67111424;
    v23 = Current - *(double *)(a1 + 176);
    *(_DWORD *)&v61[4] = v13;
    v62 = 1024;
    v63 = v14;
    v64 = 1024;
    v65 = v15;
    v66 = 2048;
    v67 = v16;
    v68 = 2048;
    v69 = v17;
    v70 = 2048;
    v71 = v18;
    v72 = 2048;
    v73 = v19;
    v74 = 2048;
    v75 = v20;
    v76 = 1024;
    v77 = v21;
    v78 = 2048;
    v79 = v23;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "TILE: tile.location, version, %d, y, %u, x, %u, corner, %.8f, %.8f, detlas, %.2f, %.2f, generationTime, %.1f, expirationAge, %d, age, %.1lf", v61, 0x56u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(v61, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102155460);
    v31 = qword_1022A02D8;
    v32 = *(_DWORD *)(a2 + 16);
    v33 = *(_DWORD *)(a2 + 20);
    v34 = *(float *)(a2 + 24);
    v35 = *(float *)(a2 + 28);
    v36 = *(float *)(a2 + 32);
    v37 = *(float *)(a2 + 36);
    v38 = *(_QWORD *)(a1 + 176);
    v39 = *(_DWORD *)(a2 + 176);
    v40 = CFAbsoluteTimeGetCurrent();
    LODWORD(__p) = 67111424;
    v41 = v40 - *(double *)(a1 + 176);
    LOWORD(v45) = 1024;
    *(_DWORD *)((char *)&v45 + 2) = v32;
    HIWORD(v45) = 1024;
    LODWORD(v46) = v33;
    WORD2(v46) = 2048;
    *(double *)((char *)&v46 + 6) = v34;
    HIWORD(v46) = 2048;
    *(_WORD *)v47 = 2048;
    *(double *)&v47[2] = v36;
    *(_WORD *)&v47[10] = 2048;
    *(double *)v48 = v37;
    *(_WORD *)&v48[8] = 2048;
    *(_QWORD *)&v48[10] = v38;
    v49 = 1024;
    v50 = v39;
    v51 = 2048;
    v52 = v41;
    _os_log_send_and_compose_impl(2, 0, v61, 1628, &_mh_execute_header, v31, 2, "TILE: tile.location, version, %d, y, %u, x, %u, corner, %.8f, %.8f, detlas, %.2f, %.2f, generationTime, %.1f, expirationAge, %d, age, %.1lf", &__p, 86, 67111424, v45, *(double *)&v46, *((double *)&v46 + 1), v35, *(double *)v47, *(_DWORD *)&v47[8], *(double *)&v48[4]);
    v43 = (uint8_t *)v42;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLTileFileWithTraversal::onTraversingTileHeaderLocation(const CLTilesManager_Type::TileHeaderLocation &)", "%s\n", v42);
    if (v43 != v61)
      free(v43);
  }
}

void sub_100811B0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100811B44(uint64_t a1, _DWORD *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102155460);
  v4 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v5 = a2[1];
    v7 = a2[3];
    v6 = a2[4];
    *(_DWORD *)buf = 67109632;
    v18 = v5;
    v19 = 1024;
    v20 = v6;
    v21 = 1024;
    v22 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "TILE: tileMacIndexHeader, headerSizeBytes, %u, tileMacIndexHeader, entrySizeInBytes, %u, numOfEntries, %u", buf, 0x14u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102155460);
    v9 = a2[3];
    v8 = a2[4];
    v13 = 1024;
    v14 = v8;
    v15 = 1024;
    v16 = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: tileMacIndexHeader, headerSizeBytes, %u, tileMacIndexHeader, entrySizeInBytes, %u, numOfEntries, %u", &v12, 20, 67109632);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLTileFileWithTraversal::onTraversingTileIndexHeader(const CLTilesManager_Type::TileIndexMacHeader &)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  *(_DWORD *)(a1 + 292) = 0;
}

void sub_100811D2C(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  __int16 v13;
  int v14;
  int v15;
  __int16 v16;
  int v17;
  int v18;
  const char *v19;
  uint8_t *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint8_t buf[4];
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102155460);
  v4 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_DWORD *)(a1 + 292);
    v6 = *a2;
    v7 = a2[1];
    v8 = a2[2];
    v9 = a2[3];
    v10 = a2[4];
    v11 = a2[5];
    v12 = *(_DWORD *)(a2 + 6);
    *(_DWORD *)buf = 67110912;
    v27 = v5;
    v28 = 1024;
    v29 = v6;
    v30 = 1024;
    v31 = v7;
    v32 = 1024;
    v33 = v8;
    v34 = 1024;
    v35 = v9;
    v36 = 1024;
    v37 = v10;
    v38 = 1024;
    v39 = v11;
    v40 = 1024;
    v41 = v12;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "TILE: idx, %3u, mac,%x:%x:%x:%x:%x:%x, offset, %u", buf, 0x32u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102155460);
    v13 = *a2;
    v14 = a2[1];
    v15 = a2[2];
    v16 = a2[4];
    v17 = a2[5];
    v18 = *(_DWORD *)(a2 + 6);
    LOWORD(v22) = 1024;
    HIWORD(v22) = v13;
    LOWORD(v23) = HIWORD(v15);
    HIWORD(v23) = 1024;
    LOWORD(v24) = 1024;
    HIWORD(v24) = v16;
    HIWORD(v25) = HIWORD(v18);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: idx, %3u, mac,%x:%x:%x:%x:%x:%x, offset, %u", &v21, 50, 67110912, v22, v14, v23, v24, v17);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLTileFileWithTraversal::onTraversingTileIndexEntry(const CLTilesManager_Type::AccessPointIndexEntry &)", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  ++*(_DWORD *)(a1 + 292);
}

void sub_100811F9C(uint64_t a1, _DWORD *a2)
{
  NSObject *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;

  *(_DWORD *)(a1 + 292) = 0;
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102155460);
  v3 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v4 = a2[1];
    v6 = a2[3];
    v5 = a2[4];
    *(_DWORD *)buf = 67109632;
    v17 = v4;
    v18 = 1024;
    v19 = v5;
    v20 = 1024;
    v21 = v6;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "TILE: tileAccessPointTable, headerSizeBytes, %u, tileAccessPointTable, entrySizeInBytes, %u, numOfEntries, %u", buf, 0x14u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102155460);
    v8 = a2[3];
    v7 = a2[4];
    v12 = 1024;
    v13 = v7;
    v14 = 1024;
    v15 = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: tileAccessPointTable, headerSizeBytes, %u, tileAccessPointTable, entrySizeInBytes, %u, numOfEntries, %u", &v11, 20, 67109632);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLTileFileWithTraversal::onTraversingTileAPTableHeader(const CLTilesManager_Type::TileAccessPointTable &)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
}

void sub_100812180(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  __int16 v13;
  int v14;
  int v15;
  __int16 v16;
  int v17;
  unsigned int v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  __int128 v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  uint8_t buf[4];
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;

  v21 = 0;
  v22 = 0;
  sub_100FA6940(a1, *(_DWORD *)(a2 + 6) & 0xFFF, (*(_DWORD *)(a2 + 6) >> 12) & 0xFFF, (double *)&v22, (double *)&v21);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102155460);
  v4 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_DWORD *)(a1 + 292);
    v6 = *a2;
    v7 = a2[1];
    v8 = a2[2];
    v9 = a2[3];
    v10 = a2[4];
    v11 = a2[5];
    v12 = *(_DWORD *)(a2 + 6);
    *(_DWORD *)buf = 67111680;
    v33 = v5;
    v34 = 1024;
    v35 = v6;
    v36 = 1024;
    v37 = v7;
    v38 = 1024;
    v39 = v8;
    v40 = 1024;
    v41 = v9;
    v42 = 1024;
    v43 = v10;
    v44 = 1024;
    v45 = v11;
    v46 = 1024;
    v47 = v12 & 0xFFF;
    v48 = 1024;
    v49 = (v12 >> 12) & 0xFFF;
    v50 = 2048;
    v51 = v22;
    v52 = 2048;
    v53 = v21;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "TILE: mac, %3u, mac,%x:%x:%x:%x:%x:%x, y, %3d, x, %3d, loc, %14.10lf, %14.10lf", buf, 0x4Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102155460);
    v13 = *a2;
    v14 = a2[1];
    v15 = a2[2];
    v16 = a2[4];
    v17 = a2[5];
    v18 = *(_DWORD *)(a2 + 6);
    LOWORD(v24) = 1024;
    HIWORD(v24) = v13;
    LOWORD(v25) = HIWORD(v15);
    HIWORD(v25) = 1024;
    LOWORD(v26) = 1024;
    HIWORD(v26) = v16;
    LODWORD(v27) = v17;
    WORD2(v27) = 1024;
    *(_DWORD *)((char *)&v27 + 6) = v18 & 0xFFF;
    WORD5(v27) = 1024;
    HIDWORD(v27) = (v18 >> 12) & 0xFFF;
    v28 = 2048;
    v29 = v22;
    v30 = 2048;
    v31 = v21;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: mac, %3u, mac,%x:%x:%x:%x:%x:%x, y, %3d, x, %3d, loc, %14.10lf, %14.10lf", &v23, 76, v21, v22, 67111680, v24, v14, v25, v26, *(double *)&v27, *((double *)&v27 + 1));
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLTileFileWithTraversal::onTraversingTileAPTableEntry(const CLTilesManager_Type::AccessPointEntry &)", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  ++*(_DWORD *)(a1 + 292);
}

void *sub_100812460(uint64_t a1, FILE *a2, uint64_t a3, int a4, int a5, int a6)
{
  size_t v11;
  NSObject *v12;
  int v13;
  void *v14;
  int v15;
  int v16;
  NSObject *v17;
  const char *v18;
  size_t v19;
  int v20;
  NSObject *v21;
  const char *v23;
  uint8_t *v24;
  uint8_t *v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  uint8_t buf[4];
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;

  v11 = (a6 * a5);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102155460);
  v12 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v13 = *(unsigned __int16 *)(a3 + 2);
    *(_DWORD *)buf = 67109632;
    v32 = v13;
    v33 = 1024;
    v34 = a4;
    v35 = 1024;
    v36 = a5;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "TILE: read data, sectionId, %d, entriesOffset, %u, entriesNumToRead, %u", buf, 0x14u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102155460);
    v27 = 1024;
    v28 = a4;
    v29 = 1024;
    v30 = a5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: read data, sectionId, %d, entriesOffset, %u, entriesNumToRead, %u", &v26, 20, 67109632);
    v24 = (uint8_t *)v23;
    sub_100512490("Generic", 1, 0, 2, "void *CLTileFileWithTraversal::readDataEntries(FILE *, const CLTilesManager_Type::SectionHeader &, unsigned int, unsigned int, unsigned int)", "%s\n", v23);
    if (v24 != buf)
      free(v24);
  }
  v14 = malloc_type_malloc(v11, 0x734C1C5EuLL);
  if (v14)
  {
    v15 = fseek(a2, (a6 * a4), 1);
    if (v15)
    {
      v16 = v15;
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102155460);
      v17 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 67109376;
        v32 = a4;
        v33 = 1024;
        v34 = v16;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "TILE: ERROR: failed to skip entries pre read, %u, ret, %d", buf, 0xEu);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_22;
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102155460);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "TILE: ERROR: failed to skip entries pre read, %u, ret, %d", &v26);
LABEL_31:
      v25 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 0, "void *CLTileFileWithTraversal::readDataEntries(FILE *, const CLTilesManager_Type::SectionHeader &, unsigned int, unsigned int, unsigned int)", "%s\n", v18);
      if (v25 != buf)
        free(v25);
LABEL_22:
      free(v14);
      return 0;
    }
    v19 = fread(v14, 1uLL, v11, a2);
    if (v19 != v11)
    {
      v20 = v19;
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102155460);
      v21 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 67109376;
        v32 = v20;
        v33 = 1024;
        v34 = v11;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "TILE: ERROR: failed to read bytes, %u, %u", buf, 0xEu);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_22;
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102155460);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "TILE: ERROR: failed to read bytes, %u, %u", &v26);
      goto LABEL_31;
    }
  }
  return v14;
}

void sub_100812910(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_10081293C(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_10081358C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100813A10(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_100813A3C()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101BC2504;
      v1[3] = unk_101BC2514;
      v1[4] = xmmword_101BC2524;
      v1[0] = xmmword_101BC24E4;
      v1[1] = unk_101BC24F4;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_100813B10(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

void sub_1008141D0(id a1)
{
  qword_10229FE88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

void sub_1008141FC(_QWORD *a1@<X8>)
{
  char *v2;

  v2 = (char *)operator new(0xB8uLL);
  sub_100814244((uint64_t)v2);
  *a1 = v2 + 24;
  a1[1] = v2;
}

void sub_100814230(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_100814244(uint64_t a1)
{
  int64x2_t v1;
  __n128 result;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_1021554F0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)(a1 + 176) = 0;
  v1 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(int64x2_t *)(a1 + 24) = v1;
  *(int64x2_t *)(a1 + 40) = v1;
  *(int64x2_t *)(a1 + 56) = v1;
  *(int64x2_t *)(a1 + 72) = v1;
  *(int64x2_t *)(a1 + 88) = v1;
  *(int64x2_t *)(a1 + 104) = v1;
  *(_QWORD *)(a1 + 120) = -1;
  *(_DWORD *)(a1 + 128) = -1;
  *(int64x2_t *)(a1 + 136) = v1;
  __asm { FMOV            V0.2D, #-1.0 }
  *(__n128 *)(a1 + 160) = result;
  return result;
}

void sub_1008142A4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021554F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1008142B8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021554F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_1008142F4()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101BC2568;
      v1[3] = unk_101BC2578;
      v1[4] = xmmword_101BC2588;
      v1[0] = xmmword_101BC2548;
      v1[1] = unk_101BC2558;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_1008143C8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

void sub_1008143E0(id a1)
{
  operator new();
}

void sub_100814420()
{
  operator delete();
}

const void *sub_100814444(const void *a1)
{
  uint64_t v2;
  CFBundleRef *v3;
  std::string *p_p;
  CFStringRef v5;
  const __CFString *v6;
  CFTypeID v7;
  const __CFURL *v8;
  __CFNotificationCenter *DarwinNotifyCenter;
  std::string __p;

  v2 = sub_10055D44C(a1, "CLLocalization", 1, 1);
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  v3 = (CFBundleRef *)(v2 + 16);
  sub_1005854A0(&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v5 = sub_1001A48D8((char *)p_p);
  v6 = v5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v6)
      goto LABEL_12;
  }
  else if (!v5)
  {
    goto LABEL_12;
  }
  v7 = CFGetTypeID(v6);
  if (v7 == CFStringGetTypeID())
  {
    v8 = CFURLCreateWithFileSystemPath(kCFAllocatorDefault, v6, kCFURLPOSIXPathStyle, 0);
    if (v8)
    {
      *v3 = CFBundleCreate(kCFAllocatorDefault, v8);
      CFRelease(v8);
    }
  }
  CFRelease(v6);
LABEL_12:
  sub_100814598((uint64_t)a1);
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(DarwinNotifyCenter, a1, (CFNotificationCallback)sub_1008145D0, CFSTR("com.apple.language.changed"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  return a1;
}

void sub_100814564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_10055D4D0(v15);
  _Unwind_Resume(a1);
}

const __CFString *sub_100814598(uint64_t a1)
{
  const void *v2;
  const __CFString *result;

  v2 = *(const void **)(a1 + 24);
  if (v2)
    CFRelease(v2);
  result = sub_1001AC8C8(a1, *(__CFBundle **)(a1 + 16));
  *(_QWORD *)(a1 + 24) = result;
  return result;
}

uint64_t sub_1008145D0(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[16];
  __int16 v9;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102155550);
  v3 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "language changed - refreshing", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102155550);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "language changed - refreshing", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "static void CLLocalization::onLanguageChanged(CFNotificationCenterRef, void *, CFStringRef, const void *, CFDictionaryRef)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  *(_QWORD *)buf = a2;
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  v9 = 256;
  CFPreferencesSynchronize(CFSTR(".GlobalPreferences"), CFSTR("mobile"), kCFPreferencesAnyHost);
  sub_100814598(a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
}

void sub_1008147B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2)
    sub_10024F88C(exception_object);
  _Unwind_Resume(exception_object);
}

const __CFString *sub_1008147E4(uint64_t a1, __CFBundle *a2, const __CFString *a3, const __CFString *a4, int a5)
{
  const __CFString *result;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  void **v18;
  uint64_t v19;
  void **v20;
  const char *v21;
  const char *v22;
  NSObject *v23;
  NSObject *v24;
  void **v25;
  uint64_t v26;
  void **v27;
  NSObject *v28;
  void **v29;
  void **v30;
  void *__p[2];
  char v32;
  uint8_t buf[4];
  int v34;
  __int16 v35;
  const char *v36;
  __int16 v37;
  void **v38;

  if (qword_102304B38 != -1)
    dispatch_once(&qword_102304B38, &stru_102155530);
  result = sub_1001AC5C4(qword_102310CE0, a2, a4, a5);
  if (!a5 && !result)
  {
    v10 = -[__CFDictionary objectForKey:](CFBundleGetInfoDictionary(a2), "objectForKey:", a3);
    v12 = objc_opt_class(NSDictionary, v11);
    if ((objc_opt_isKindOfClass(v10, v12) & 1) != 0)
    {
      v13 = objc_msgSend(v10, "objectForKey:", a4);
      if (v13)
      {
        v15 = v13;
        v16 = objc_opt_class(NSString, v14);
        if ((objc_opt_isKindOfClass(v15, v16) & 1) != 0)
          return (const __CFString *)objc_msgSend(v15, "copy");
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102155570);
        v28 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
        {
          sub_1001A486C(a4, (uint64_t)__p);
          if (v32 >= 0)
            v29 = __p;
          else
            v29 = (void **)__p[0];
          *(_DWORD *)buf = 68289282;
          v34 = 0;
          v35 = 2082;
          v36 = "";
          v37 = 2082;
          v38 = v29;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"key does not contain a string value\", \"key\":%{public, location:escape_only}s}", buf, 0x1Cu);
          if (v32 < 0)
            operator delete(__p[0]);
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102155570);
        }
        v26 = qword_1022A01D8;
        if (!os_signpost_enabled((os_log_t)qword_1022A01D8))
          return 0;
        sub_1001A486C(a4, (uint64_t)__p);
        if (v32 >= 0)
          v30 = __p;
        else
          v30 = (void **)__p[0];
        *(_DWORD *)buf = 68289282;
        v34 = 0;
        v35 = 2082;
        v36 = "";
        v37 = 2082;
        v38 = v30;
        v21 = "key does not contain a string value";
        v22 = "{\"msg%{public}.0s\":\"key does not contain a string value\", \"key\":%{public, location:escape_only}s}";
      }
      else
      {
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102155570);
        v24 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
        {
          sub_1001A486C(a4, (uint64_t)__p);
          if (v32 >= 0)
            v25 = __p;
          else
            v25 = (void **)__p[0];
          *(_DWORD *)buf = 68289282;
          v34 = 0;
          v35 = 2082;
          v36 = "";
          v37 = 2082;
          v38 = v25;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"key is not present\", \"key\":%{public, location:escape_only}s}", buf, 0x1Cu);
          if (v32 < 0)
            operator delete(__p[0]);
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102155570);
        }
        v26 = qword_1022A01D8;
        if (!os_signpost_enabled((os_log_t)qword_1022A01D8))
          return 0;
        sub_1001A486C(a4, (uint64_t)__p);
        if (v32 >= 0)
          v27 = __p;
        else
          v27 = (void **)__p[0];
        *(_DWORD *)buf = 68289282;
        v34 = 0;
        v35 = 2082;
        v36 = "";
        v37 = 2082;
        v38 = v27;
        v21 = "key is not present";
        v22 = "{\"msg%{public}.0s\":\"key is not present\", \"key\":%{public, location:escape_only}s}";
      }
      v23 = v26;
    }
    else
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102155570);
      v17 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
      {
        sub_1001A486C(a3, (uint64_t)__p);
        if (v32 >= 0)
          v18 = __p;
        else
          v18 = (void **)__p[0];
        *(_DWORD *)buf = 68289282;
        v34 = 0;
        v35 = 2082;
        v36 = "";
        v37 = 2082;
        v38 = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"description dictionary key does not contain a dictionary value\", \"key\":%{public, location:escape_only}s}", buf, 0x1Cu);
        if (v32 < 0)
          operator delete(__p[0]);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102155570);
      }
      v19 = qword_1022A01D8;
      if (!os_signpost_enabled((os_log_t)qword_1022A01D8))
        return 0;
      sub_1001A486C(a3, (uint64_t)__p);
      if (v32 >= 0)
        v20 = __p;
      else
        v20 = (void **)__p[0];
      *(_DWORD *)buf = 68289282;
      v34 = 0;
      v35 = 2082;
      v36 = "";
      v37 = 2082;
      v38 = v20;
      v21 = "description dictionary key does not contain a dictionary value";
      v22 = "{\"msg%{public}.0s\":\"description dictionary key does not contain a dictionary value\", \"key\":%{public, l"
            "ocation:escape_only}s}";
      v23 = v19;
    }
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v23, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v21, v22, buf, 0x1Cu);
    if (v32 < 0)
      operator delete(__p[0]);
    return 0;
  }
  return result;
}

const __CFString *sub_100814D80(_QWORD *a1, const __CFString *a2)
{
  uint64_t v4;
  uint64_t v5;
  const __CFString *v6;
  const __CFString *v7;

  v4 = a1[3];
  (*(void (**)(_QWORD *))(*a1 + 16))(a1);
  v5 = a1[2];
  if (!v5)
  {
    v7 = 0;
    goto LABEL_12;
  }
  if (!v4)
  {
    sub_100814598((uint64_t)a1);
    v5 = a1[2];
    v4 = a1[3];
  }
  v6 = (const __CFString *)CFBundleCopyLocalizedStringForLocalization(v5, a2, 0, CFSTR("locationd"), v4);
  v7 = v6;
  if (v6)
  {
    if (CFStringCompare(v6, a2, 0x100uLL))
      goto LABEL_8;
    CFRelease(v7);
  }
  v7 = (const __CFString *)CFBundleCopyLocalizedStringForLocalization(a1[2], a2, 0, CFSTR("locationd-private"), v4);
  if (!v7)
  {
LABEL_10:
    v7 = (const __CFString *)CFBundleCopyLocalizedStringForLocalization(a1[2], a2, 0, CFSTR("locationd-footprint"), v4);
    goto LABEL_12;
  }
LABEL_8:
  if (CFStringCompare(v7, a2, 0x100uLL) == kCFCompareEqualTo)
  {
    CFRelease(v7);
    goto LABEL_10;
  }
LABEL_12:
  (*(void (**)(_QWORD *))(*a1 + 24))(a1);
  return v7;
}

void sub_100814EA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

const void *sub_100814EB4(uint64_t a1)
{
  const __CFArray *v2;
  const __CFArray *v3;
  const void *ValueAtIndex;
  NSObject *v5;
  char *v7;
  __int16 v8;
  uint64_t v9;
  __int16 v10;
  uint8_t buf[1640];

  v9 = a1;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v10 = 256;
  v2 = (const __CFArray *)CFPreferencesCopyValue(CFSTR("AppleLanguages"), CFSTR(".GlobalPreferences"), CFSTR("mobile"), kCFPreferencesAnyHost);
  v3 = v2;
  if (v2)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v2, 0);
    CFRetain(ValueAtIndex);
    CFRelease(v3);
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102155550);
    v5 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning could not get apple languages array", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102155550);
      v8 = 0;
      v7 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning could not get apple languages array", &v8, 2);
      sub_100512490("Generic", 1, 0, 2, "CFStringRef CLLocalization::copyUserPreferredLanguage()", "%s\n", v7);
      if (v7 != (char *)buf)
        free(v7);
    }
    ValueAtIndex = 0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return ValueAtIndex;
}

void sub_1008150C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1008150F0(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_10081511C(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

uint64_t sub_100815148(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned __int8 v6;
  unsigned __int8 v7[3];

  *(_QWORD *)(a1 + 16) = 20;
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 32) = &off_1021556D0;
  *(_QWORD *)a1 = off_102155880;
  *(_QWORD *)(a1 + 8) = &off_102155590;
  *(_DWORD *)(a1 + 40) = 1056964608;
  *(_DWORD *)(a1 + 48) = 0;
  v4 = a1 + 2528;
  bzero((void *)(a1 + 56), 0x9A8uLL);
  *(_OWORD *)(a1 + 2528) = xmmword_101BC26C8;
  *(_OWORD *)(a1 + 2544) = unk_101BC26D8;
  *(_OWORD *)(a1 + 2560) = xmmword_101BC26E8;
  *(_OWORD *)(v4 + 44) = *(__int128 *)((char *)&xmmword_101BC26E8 + 12);
  *(_QWORD *)(a1 + 2592) = 0;
  *(_QWORD *)(a1 + 2600) = a2;
  *(_DWORD *)(a1 + 2608) = 0;
  v6 = 0;
  sub_1018BF25C(v7, "RunningFormBypassIsRunning", &v6, 0);
  *(_BYTE *)(a1 + 2612) = v7[1];
  *(_WORD *)(a1 + 2613) = 0;
  nullsub_34(a1 + 2615);
  *(_OWORD *)(a1 + 2632) = 0u;
  *(_OWORD *)(a1 + 2648) = 0u;
  *(_OWORD *)(a1 + 2616) = 0u;
  *(_QWORD *)(a1 + 2664) = 0x200000002;
  return a1;
}

void sub_10081525C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  sub_10081FB1C(v2 + 43);
  sub_10081FA88(v2 + 37);
  sub_1004A4854(v2 + 31);
  sub_1004A4854(v2 + 25);
  sub_10047F660(v2 + 19);
  sub_10047F660(v2 + 13);
  sub_10047F660(v1);
  _Unwind_Resume(a1);
}

void sub_1008152BC(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  const char *v5;
  uint8_t *v6;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  int v14;

  LOBYTE(v7) = 0;
  sub_1018BF25C(buf, "RunningFormBypassIsRunning", (unsigned __int8 *)&v7, 0);
  *(_BYTE *)(a1 + 2612) = buf[1];
  if (qword_10229FF30 != -1)
    dispatch_once(&qword_10229FF30, &stru_102155810);
  v2 = qword_10229FF38;
  if (os_log_type_enabled((os_log_t)qword_10229FF38, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(unsigned __int8 *)(a1 + 2612);
    *(_DWORD *)buf = 136446466;
    v12 = "RunningFormBypassIsRunning";
    v13 = 1026;
    v14 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[FormModels] default - %{public}s: %{public}d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF30 != -1)
      dispatch_once(&qword_10229FF30, &stru_102155810);
    v4 = *(unsigned __int8 *)(a1 + 2612);
    v7 = 136446466;
    v8 = "RunningFormBypassIsRunning";
    v9 = 1026;
    v10 = v4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF38, 0, "[FormModels] default - %{public}s: %{public}d", &v7, 18);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLRunning::FormModels::enableFormMetrics()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
}

void sub_1008154AC(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *(_DWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  bzero((void *)(a1 + 456), 0x818uLL);
  v2 = *(void ***)(a1 + 64);
  v3 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 96) = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v5 = *(_QWORD *)(a1 + 72);
      v2 = (void **)(*(_QWORD *)(a1 + 64) + 8);
      *(_QWORD *)(a1 + 64) = v2;
      v4 = v5 - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v6 = 85;
  }
  else
  {
    if (v4 >> 3 != 2)
      goto LABEL_8;
    v6 = 170;
  }
  *(_QWORD *)(a1 + 88) = v6;
LABEL_8:
  v7 = *(void ***)(a1 + 112);
  v8 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 144) = 0;
  v9 = v8 - (_QWORD)v7;
  if (v9 >= 0x11)
  {
    do
    {
      operator delete(*v7);
      v10 = *(_QWORD *)(a1 + 120);
      v7 = (void **)(*(_QWORD *)(a1 + 112) + 8);
      *(_QWORD *)(a1 + 112) = v7;
      v9 = v10 - (_QWORD)v7;
    }
    while (v9 > 0x10);
  }
  if (v9 >> 3 == 1)
  {
    v11 = 85;
  }
  else
  {
    if (v9 >> 3 != 2)
      goto LABEL_15;
    v11 = 170;
  }
  *(_QWORD *)(a1 + 136) = v11;
LABEL_15:
  v12 = *(void ***)(a1 + 160);
  v13 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 192) = 0;
  v14 = v13 - (_QWORD)v12;
  if (v14 >= 0x11)
  {
    do
    {
      operator delete(*v12);
      v15 = *(_QWORD *)(a1 + 168);
      v12 = (void **)(*(_QWORD *)(a1 + 160) + 8);
      *(_QWORD *)(a1 + 160) = v12;
      v14 = v15 - (_QWORD)v12;
    }
    while (v14 > 0x10);
  }
  if (v14 >> 3 == 1)
  {
    v16 = 85;
  }
  else
  {
    if (v14 >> 3 != 2)
      goto LABEL_22;
    v16 = 170;
  }
  *(_QWORD *)(a1 + 184) = v16;
LABEL_22:
  v17 = *(void ***)(a1 + 208);
  v18 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 240) = 0;
  v19 = v18 - (_QWORD)v17;
  if (v19 >= 0x11)
  {
    do
    {
      operator delete(*v17);
      v20 = *(_QWORD *)(a1 + 216);
      v17 = (void **)(*(_QWORD *)(a1 + 208) + 8);
      *(_QWORD *)(a1 + 208) = v17;
      v19 = v20 - (_QWORD)v17;
    }
    while (v19 > 0x10);
  }
  if (v19 >> 3 == 1)
  {
    v21 = 128;
  }
  else
  {
    if (v19 >> 3 != 2)
      goto LABEL_29;
    v21 = 256;
  }
  *(_QWORD *)(a1 + 232) = v21;
LABEL_29:
  v22 = *(void ***)(a1 + 256);
  v23 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 288) = 0;
  v24 = v23 - (_QWORD)v22;
  if (v24 >= 0x11)
  {
    do
    {
      operator delete(*v22);
      v25 = *(_QWORD *)(a1 + 264);
      v22 = (void **)(*(_QWORD *)(a1 + 256) + 8);
      *(_QWORD *)(a1 + 256) = v22;
      v24 = v25 - (_QWORD)v22;
    }
    while (v24 > 0x10);
  }
  if (v24 >> 3 == 1)
  {
    v26 = 128;
  }
  else
  {
    if (v24 >> 3 != 2)
      return;
    v26 = 256;
  }
  *(_QWORD *)(a1 + 280) = v26;
}

uint64_t sub_1008156A0(uint64_t result, _QWORD *a2)
{
  *(_QWORD *)(result + 2664) = *a2;
  return result;
}

void sub_1008156AC(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  double v14;
  double v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  NSObject *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  void **v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void **v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void **v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  float v66;
  float v67;
  unint64_t v68;
  int64x2_t *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  float *v82;
  unint64_t v83;
  _QWORD *v84;
  unint64_t v85;
  unint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  float v92;
  float v93;
  float v94;
  double v95;
  float v96;
  float v97;
  double v98;
  double v99;
  uint64_t v100;
  float v101;
  float v102;
  float v103;
  double v104;
  NSObject *v105;
  uint64_t v106;
  double v107;
  unint64_t v108;
  double v109;
  const char *v110;
  char *v111;
  int v112;
  int v113;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  _QWORD *v126;
  double *v127;
  double *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  double *v140;
  _QWORD *v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  double *v146;
  _QWORD *v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  unint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  _QWORD *v160;
  double *v161;
  _QWORD *v162;
  _QWORD *v163;
  NSObject *v164;
  int v165;
  int v166;
  int v167;
  uint64_t v168;
  double v169;
  double v170;
  double v171;
  _QWORD *v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  float v177;
  double v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  float *v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  double v188;
  double v189;
  double v190;
  double v191;
  double v192;
  double v193;
  double v194;
  double v195;
  double v196;
  double v197;
  double v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  unint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  unint64_t v208;
  float v209;
  float v210;
  float v211;
  double v212;
  unint64_t v213;
  float v214;
  float v215;
  unint64_t v216;
  uint64_t v217;
  float v218;
  float v219;
  float v220;
  double v221;
  uint64_t v222;
  double v223;
  float v224;
  float v225;
  float v226;
  float v227;
  float v228;
  float v229;
  float v230;
  float v231;
  float v232;
  float v233;
  unsigned __int8 v234;
  float v235;
  float v236;
  float v237;
  double v238;
  float v239;
  float v240;
  double v241;
  double v242;
  double v243;
  double v244;
  double v245;
  double v246;
  double v247;
  double v248;
  double v249;
  float v250;
  float v251;
  float v252;
  double v253;
  double v254;
  double v255;
  double v256;
  double v257;
  double v258;
  double v259;
  double v260;
  double v261;
  float v262;
  double v263;
  double v264;
  double v265;
  uint64_t v266;
  double v267;
  uint64_t v268;
  float v269;
  float v270;
  float v271;
  float v272;
  float v273;
  uint64_t v274;
  float v275;
  double v276;
  float v277;
  unint64_t v278;
  uint64_t v279;
  _QWORD *v280;
  double *v281;
  _QWORD *v282;
  NSObject *v283;
  char *v284;
  float v285;
  float v286;
  int32x2_t v287;
  int32x2_t v288;
  float32x2_t v289;
  float32x2_t v290;
  float32x2_t v291;
  uint64_t v292;
  unint64_t v293;
  void **v294;
  uint64_t v295;
  unint64_t v296;
  uint64_t v297;
  uint64_t v298;
  float *v299;
  const char *v300;
  char *v301;
  float v302;
  float v303;
  float v304;
  int v305;
  double *v306;
  unsigned int v307;
  unsigned int v308;
  float v309;
  int32x2_t v310;
  double v311;
  double v312;
  double *v313;
  unsigned int v314;
  unsigned int v315;
  float v316;
  float v317;
  float v318;
  unsigned int v319;
  unsigned int v320;
  float v321;
  unsigned int v322;
  unsigned int v323;
  float v324;
  float v325;
  float v326;
  double v327;
  double v328;
  double v329;
  float v330;
  double v331;
  double v332;
  double v333;
  float v334;
  NSObject *v335;
  const char *v336;
  char *v337;
  const char *v338;
  char *v339;
  _QWORD *v340;
  int v341;
  int v342;
  const char *v343;
  char *v344;
  double v345;
  double v346;
  double v347;
  int v348;
  double v349;
  double v350;
  uint64_t v351;
  uint64_t v352;
  double *v353;
  double *v354;
  double v355;
  double v356;
  double v357;
  double v358;
  double v359;
  double v360;
  double v361;
  float v362;
  uint64_t v363;
  double v364;
  double v365;
  double v366;
  double v367;
  double v368;
  double v369;
  double v370;
  double v371;
  double v372;
  double v373;
  int v374;
  double *v375;
  float v376;
  float v377;
  float v378;
  double v379;
  double v380;
  double v381;
  _QWORD *v382;
  double v383;
  float v384;
  float v385;
  float v386;
  double v387;
  _QWORD *v388;
  float v389;
  double v390;
  double v391;
  double v392;
  double v393;
  double v394;
  double v395;
  double v396;
  double v397;
  double v398;
  double v399;
  double v400;
  char v401;
  double v402;
  double v403;
  double v404;
  _QWORD *v405;
  double v406;
  uint64_t v407;
  float *v408;
  double v409;
  double v410;
  __int128 v411;
  __int128 v412;
  __int16 v413[8];
  double v414[2];
  double v415;
  _QWORD v416[2];
  void *__p;
  void *v418;
  uint64_t v419;
  _BYTE v420[22];
  __int16 v421;
  double v422;
  __int16 v423;
  double v424;
  __n128 v425[2];
  __int128 v426;
  __int128 v427;
  __int128 v428;
  __int128 v429;
  __int128 v430;
  char v431;
  _BYTE buf[32];
  __int128 v433;

  v4 = a2;
  v6 = a2[1];
  if (a2[2] == v6)
  {
    v8 = a2 + 5;
    v7 = a2[5];
    goto LABEL_11;
  }
  v8 = a2 + 5;
  v7 = a2[5];
  v9 = a2[4];
  v10 = (unint64_t *)(v6 + 8 * (v9 / 0x49));
  v11 = *v10;
  v12 = *v10 + 56 * (v9 % 0x49);
  v13 = *(_QWORD *)(v6 + 8 * ((v7 + v9) / 0x49)) + 56 * ((v7 + v9) % 0x49);
  if (v12 == v13)
  {
LABEL_11:
    v14 = 0.0;
    goto LABEL_12;
  }
  v14 = 0.0;
  do
  {
    v15 = *(double *)(v12 + 48) - *(double *)(v12 + 40);
    if (v15 <= 0.0)
      v15 = -0.0;
    v12 += 56;
    if (v12 - v11 == 4088)
    {
      v16 = v10[1];
      ++v10;
      v11 = v16;
      v12 = v16;
    }
    v14 = v14 + v15;
  }
  while (v12 != v13);
LABEL_12:
  *(double *)(a1 + 448) = v14 / (double)v7;
  sub_100817AC0(a1, a3, (double *)(a1 + 456));
  v17 = a3[5];
  if (v17)
    v401 = sub_100D7B854(*(double *)(a1 + 464), *(double *)(*(_QWORD *)(a3[1] + 8 * ((v17 + a3[4] - 1) / 0x17uLL))+ 176 * ((v17 + a3[4] - 1) % 0x17uLL)+ 72), *(float *)(a1 + 2536));
  else
    v401 = 0;
  v18 = *(_DWORD *)(a1 + 48) + 1;
  *(_DWORD *)(a1 + 48) = v18;
  if (*v8 >= 0x101uLL && (v18 & 0xF) == 0)
  {
    *(_DWORD *)(a1 + 48) = 0;
    memset(v425, 0, 20);
    if (sub_100817E14(v4, (uint64_t)v425))
    {
      sub_1008182EC((_QWORD *)(a1 + 104), v425);
    }
    else
    {
      if (qword_10229FF30 != -1)
        dispatch_once(&qword_10229FF30, &stru_102155810);
      v19 = qword_10229FF38;
      if (os_log_type_enabled((os_log_t)qword_10229FF38, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "[FormModels] Failed to compute axis of rotation", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FF30 != -1)
          dispatch_once(&qword_10229FF30, &stru_102155810);
        *(_WORD *)v420 = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF38, 16, "[FormModels] Failed to compute axis of rotation", v420, 2);
        v337 = (char *)v336;
        sub_100512490("Generic", 1, 0, 0, "void CLRunning::FormModels::feedDeviceMotion(const DeviceMotionQueue &, const StepQueue &)", "%s\n", v336);
        if (v337 != buf)
          free(v337);
      }
    }
  }
  if (*(double *)(a1 + 464) > 0.0 && *v8 >= 0x201uLL)
  {
    v20 = v4[4] + *v8;
    v21 = v4[1];
    v22 = v4[2];
    v23 = (_QWORD *)(v21 + 8 * (v20 / 0x49));
    v24 = *v23 + 56 * (v20 % 0x49);
    if (v22 == v21)
      v24 = 0;
    v25 = v24 - *v23;
    v26 = 0x6DB6DB6DB6DB6DB7 * (v25 >> 3);
    if (v25 < 28729)
    {
      v45 = 585 - v26;
      v28 = &v23[-(v45 / 0x49)];
      v29 = *v28 + 56 * (73 * (v45 / 0x49) - v45) + 4032;
    }
    else
    {
      v27 = v26 - 513;
      v28 = &v23[v27 / 0x49];
      v29 = *v28 + 56 * (v27 % 0x49);
    }
    v425[0].n128_u64[0] = (unint64_t)v28;
    v425[0].n128_u64[1] = v29;
    if (v22 == v21)
      v46 = 0;
    else
      v46 = *v23 + 56 * (v20 % 0x49);
    *(_QWORD *)v420 = v23;
    *(_QWORD *)&v420[8] = v46;
    sub_100818398((uint64_t)v425, (uint64_t)v420, a1 + 1500, (uint64_t)buf);
    sub_100818538((_QWORD *)(a1 + 56), (__n128 *)buf);
    goto LABEL_56;
  }
  *(_QWORD *)(a1 + 440) = 0;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  v30 = *(void ***)(a1 + 64);
  v31 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 96) = 0;
  v32 = v31 - (_QWORD)v30;
  if (v32 >= 0x11)
  {
    do
    {
      operator delete(*v30);
      v33 = *(_QWORD *)(a1 + 72);
      v30 = (void **)(*(_QWORD *)(a1 + 64) + 8);
      *(_QWORD *)(a1 + 64) = v30;
      v32 = v33 - (_QWORD)v30;
    }
    while (v32 > 0x10);
  }
  if (v32 >> 3 == 1)
  {
    v34 = 85;
  }
  else
  {
    if (v32 >> 3 != 2)
      goto LABEL_37;
    v34 = 170;
  }
  *(_QWORD *)(a1 + 88) = v34;
LABEL_37:
  v35 = *(void ***)(a1 + 160);
  v36 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 192) = 0;
  v37 = v36 - (_QWORD)v35;
  if (v37 >= 0x11)
  {
    do
    {
      operator delete(*v35);
      v38 = *(_QWORD *)(a1 + 168);
      v35 = (void **)(*(_QWORD *)(a1 + 160) + 8);
      *(_QWORD *)(a1 + 160) = v35;
      v37 = v38 - (_QWORD)v35;
    }
    while (v37 > 0x10);
  }
  if (v37 >> 3 == 1)
  {
    v39 = 85;
    goto LABEL_43;
  }
  if (v37 >> 3 == 2)
  {
    v39 = 170;
LABEL_43:
    *(_QWORD *)(a1 + 184) = v39;
  }
  v40 = *(void ***)(a1 + 208);
  v41 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 240) = 0;
  v42 = v41 - (_QWORD)v40;
  if (v42 >= 0x11)
  {
    do
    {
      operator delete(*v40);
      v43 = *(_QWORD *)(a1 + 216);
      v40 = (void **)(*(_QWORD *)(a1 + 208) + 8);
      *(_QWORD *)(a1 + 208) = v40;
      v42 = v43 - (_QWORD)v40;
    }
    while (v42 > 0x10);
  }
  if (v42 >> 3 == 1)
  {
    v44 = 128;
  }
  else
  {
    if (v42 >> 3 != 2)
      goto LABEL_56;
    v44 = 256;
  }
  *(_QWORD *)(a1 + 232) = v44;
LABEL_56:
  v47 = *(_QWORD *)(a1 + 96);
  v405 = v4;
  if (v47 < 2)
    goto LABEL_70;
  v48 = *(_QWORD *)(a1 + 88);
  v49 = v48 + v47;
  v50 = *(_QWORD *)(a1 + 64);
  v51 = *(_QWORD *)(a1 + 72);
  v52 = (_QWORD *)(v50 + 8 * (v49 / 0xAA));
  v53 = *v52 + 24 * (v49 % 0xAA);
  if (v51 == v50)
    v53 = 0;
  v54 = v53 - *v52;
  v55 = 0xAAAAAAAAAAAAAAABLL * (v54 >> 3);
  if (v54 < 25)
  {
    v61 = 170 - v55;
    v62 = (170 - v55) / 0xAA;
    v58 = &v52[-v62];
    v59 = *v58;
    v60 = *v58 + 24 * (170 * v62 - v61) + 4056;
  }
  else
  {
    v56 = v55 - 1;
    v57 = (v55 - 1) / 0xAA;
    v58 = &v52[v57];
    v59 = *v58;
    v60 = *v58 + 24 * (v56 - 170 * v57);
  }
  v63 = v60 - v59;
  v64 = 0xAAAAAAAAAAAAAAABLL * ((v60 - v59) >> 3);
  if (v63 < 25)
    v65 = v58[-((170 - v64) / 0xAA)] + 24 * (170 * ((170 - v64) / 0xAA) - (170 - v64)) + 4056;
  else
    v65 = v58[(v64 - 1) / 0xAA] + 24 * ((v64 - 1) % 0xAA);
  v66 = *(float *)(v65 + 8);
  v67 = *(float *)(v60 + 8);
  if (v66 <= 0.0 && v67 > 0.0)
  {
    *(_OWORD *)(a1 + 392) = *(_OWORD *)(a1 + 416);
    *(_QWORD *)(a1 + 408) = *(_QWORD *)(a1 + 432);
    *(_QWORD *)(a1 + 416) = *(_QWORD *)v60;
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 432) = 0;
    goto LABEL_68;
  }
  if (v66 < 0.0
    || v67 >= 0.0
    || *(double *)(a1 + 392) <= 0.0
    || *(double *)(a1 + 408) <= 0.0
    || *(double *)(a1 + 416) <= 0.0
    || *(double *)(a1 + 432) <= 0.0)
  {
    goto LABEL_68;
  }
  v351 = v60;
  v431 = 0;
  v429 = 0u;
  v430 = 0u;
  v427 = 0u;
  v428 = 0u;
  v426 = 0u;
  memset(v425, 0, sizeof(v425));
  v126 = (_QWORD *)(v50 + 8 * (v48 / 0xAA));
  if (v51 == v50)
  {
    v127 = 0;
    v128 = 0;
  }
  else
  {
    v127 = (double *)(*v126 + 24 * (v48 % 0xAA));
    v128 = (double *)(*v52 + 24 * (v49 % 0xAA));
  }
  v139 = sub_1008185E4(v126, v127, v52, v128, (double *)(a1 + 400));
  v141 = v139;
  v142 = (uint64_t)v140;
  v143 = *(_QWORD *)(a1 + 88) + *(_QWORD *)(a1 + 96);
  v144 = *(_QWORD *)(a1 + 64);
  v145 = (_QWORD *)(v144 + 8 * (v143 / 0xAA));
  if (*(_QWORD *)(a1 + 72) == v144)
    v146 = 0;
  else
    v146 = (double *)(*v145 + 24 * (v143 % 0xAA));
  v147 = sub_1008186C8(v139, v140, v145, v146, (double *)(a1 + 424));
  v149 = v148;
  v150 = v4[4];
  v151 = v4[1];
  v152 = (_QWORD *)(v151 + 8 * (v150 / 0x49));
  if (v4[2] == v151)
  {
    v153 = 0;
    v156 = 0;
    v155 = (_QWORD *)(v151
                    + (((unint64_t)(((*v8 + v150) * (unsigned __int128)0x70381C0E070381C1uLL) >> 64) >> 2) & 0x1FFFFFFFFFFFFFF8));
  }
  else
  {
    v153 = *(_QWORD *)(v151 + 8 * (v150 / 0x49)) + 56 * (v150 % 0x49);
    v154 = *v8 + v150;
    v155 = (_QWORD *)(v151 + 8 * (v154 / 0x49));
    v156 = *v155 + 56 * (v154 % 0x49);
  }
  v382 = sub_1008187A8(v152, v153, v155, v156, (double *)(a1 + 400));
  v158 = v157;
  v159 = *(_DWORD *)(a1 + 2664);
  if (v159 == 1)
  {
    if (*(_DWORD *)(a1 + 2668) != 1)
    {
LABEL_167:
      v160 = sub_100818954(v141, v142, (uint64_t)v147, v149, a1);
      goto LABEL_170;
    }
  }
  else if (v159 || *(_DWORD *)(a1 + 2668))
  {
    goto LABEL_167;
  }
  v160 = sub_1008188A0(v141, v142, (uint64_t)v147, v149, a1);
LABEL_170:
  v362 = v67;
  v353 = (double *)v142;
  v354 = (double *)v149;
  v375 = v161;
  if (v160 >= v147 && (v160 != v147 || (unint64_t)v161 >= v149) || v161 == (double *)v142)
  {
    v162 = v147;
    v163 = v141;
    if (qword_10229FF30 != -1)
      dispatch_once(&qword_10229FF30, &stru_102155810);
    v164 = qword_10229FF38;
    if (os_log_type_enabled((os_log_t)qword_10229FF38, OS_LOG_TYPE_ERROR))
    {
      v165 = *(_DWORD *)(a1 + 2664);
      v166 = *(_DWORD *)(a1 + 2668);
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)&buf[4] = v165;
      *(_WORD *)&buf[8] = 1026;
      *(_DWORD *)&buf[10] = v166;
      _os_log_impl((void *)&_mh_execute_header, v164, OS_LOG_TYPE_ERROR, "[FormModels] Unable to determine swing extrema. Verify correct watch orientation: Wrist=%{public}d, Crown=%{public}d", buf, 0xEu);
    }
    v141 = v163;
    v147 = v162;
    if (sub_1001BFF7C(115, 0))
    {
      v340 = v141;
      bzero(buf, 0x65CuLL);
      if (qword_10229FF30 != -1)
        dispatch_once(&qword_10229FF30, &stru_102155810);
      v341 = *(_DWORD *)(a1 + 2664);
      v342 = *(_DWORD *)(a1 + 2668);
      *(_DWORD *)v420 = 67240448;
      *(_DWORD *)&v420[4] = v341;
      *(_WORD *)&v420[8] = 1026;
      *(_DWORD *)&v420[10] = v342;
      LODWORD(v345) = 14;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF38, 16, "[FormModels] Unable to determine swing extrema. Verify correct watch orientation: Wrist=%{public}d, Crown=%{public}d", v420, *(_QWORD *)&v345);
      v344 = (char *)v343;
      sub_100512490("Generic", 1, 0, 0, "void CLRunning::FormModels::feedDeviceMotion(const DeviceMotionQueue &, const StepQueue &)", "%s\n", v343);
      if (v344 != buf)
        free(v344);
      v141 = v340;
      v147 = v162;
    }
  }
  else
  {
    v431 = 1;
  }
  v167 = 0;
  v168 = *(_QWORD *)(a1 + 64);
  v169 = -1.79769313e308;
  v170 = 1.79769313e308;
  v171 = 0.0;
  v383 = 0.0;
  v172 = v141;
  v173 = v142;
LABEL_181:
  v174 = v173 - 4080;
  while (1)
  {
    if (*(_QWORD *)(a1 + 72) == v168)
    {
      v176 = 0;
    }
    else
    {
      v175 = *(_QWORD *)(a1 + 96) + *(_QWORD *)(a1 + 88);
      v176 = *(_QWORD *)(v168 + 8 * (v175 / 0xAA)) + 24 * (v175 % 0xAA);
    }
    if (v173 == v176 || (double *)v173 == v354)
      break;
    v171 = *(double *)v173;
    if (*(double *)v173 >= *v375)
    {
      v177 = fabsf(*(float *)(v173 + 8));
      v178 = *(float *)(v173 + 12);
      if (v169 < v178)
        v169 = *(float *)(v173 + 12);
      if (v170 > v178)
        v170 = *(float *)(v173 + 12);
      v171 = v177;
      v383 = v383 + v171;
      ++v167;
    }
    v173 += 24;
    v174 += 24;
    if (*v172 == v174)
    {
      v179 = v172[1];
      ++v172;
      v173 = v179;
      goto LABEL_181;
    }
  }
  v349 = v170;
  v350 = v169;
  v418 = 0;
  __p = 0;
  v419 = 0;
  *(_QWORD *)buf = v141;
  *(_QWORD *)&buf[8] = v142;
  *(_QWORD *)v420 = v147;
  *(_QWORD *)&v420[8] = v354;
  sub_100818A08((uint64_t **)buf, (uint64_t)v420, (float32x2_t **)&__p, v171);
  v348 = v167;
  if (v354 == (double *)v142)
    v180 = 0;
  else
    v180 = 170 * (v147 - v141)
         - 0x5555555555555555 * (((uint64_t)v354 - *v147) >> 3)
         + 0x5555555555555555 * ((v142 - *v141) >> 3);
  v352 = v180;
  v181 = *(_QWORD *)(a1 + 136);
  v182 = *(_QWORD *)(a1 + 112);
  v183 = (_QWORD *)(v182 + 8 * (v181 / 0xAA));
  if (*(_QWORD *)(a1 + 120) == v182)
    v184 = 0;
  else
    v184 = (float *)(*v183 + 24 * (v181 % 0xAA));
  v416[0] = v182 + 8 * (v181 / 0xAA);
  v416[1] = v184;
  v185 = v4[1];
  if (v4[2] == v185)
  {
    v187 = 0;
  }
  else
  {
    v186 = v4[5] + v4[4];
    v187 = *(_QWORD *)(v185 + 8 * (v186 / 0x49)) + 56 * (v186 % 0x49);
  }
  if (v187 == v158)
    v188 = 0.0;
  else
    v188 = *(double *)(v158 + 40);
  if (v352 < 1)
  {
    v189 = -1.79769313e308;
    v190 = 1.79769313e308;
    v313 = v353;
    v306 = v354;
    v310.i32[0] = *(_DWORD *)(a1 + 2536);
    v328 = *(double *)(a1 + 448);
    v329 = -1.0;
    goto LABEL_308;
  }
  v347 = *(double *)&v8;
  v407 = 0;
  v374 = 0;
  v189 = -1.79769313e308;
  v190 = 1.79769313e308;
  v191 = 0.0;
  v409 = 0.0;
  v192 = 0.0;
  v360 = 0.0;
  v361 = 0.0;
  v370 = 0.0;
  v371 = 0.0;
  v364 = 0.0;
  v365 = 0.0;
  v366 = -1.79769313e308;
  v367 = 0.0;
  v372 = 1.79769313e308;
  v373 = -1.79769313e308;
  v406 = 0.0;
  v193 = 0.0;
  v194 = 0.0;
  v368 = 0.0;
  v369 = -1.79769313e308;
  v195 = 0.0;
  v356 = 0.0;
  v357 = 0.0;
  v358 = 0.0;
  v359 = 0.0;
  v196 = 0.0;
  v363 = v352 & ~(v352 >> 63);
  v197 = 0.0;
  v198 = 0.0;
  v355 = 0.0;
  v408 = (float *)v353;
  do
  {
    v397 = v191;
    v399 = v197;
    v402 = v196;
    v403 = v198;
    v415 = *(double *)(v158 + 40);
    v199 = sub_10012C7A4((float *)v158);
    v202 = v199;
    v203 = v200;
    v204 = v201;
    v205 = *(_QWORD *)(a1 + 136) + *(_QWORD *)(a1 + 144);
    v206 = *(_QWORD *)(a1 + 112);
    v207 = (_QWORD *)(v206 + 8 * (v205 / 0xAA));
    v396 = v190;
    v394 = v192;
    v391 = v193;
    v392 = v195;
    if (*(_QWORD *)(a1 + 120) == v206)
      v208 = 0;
    else
      v208 = *v207 + 24 * (v205 % 0xAA);
    v209 = *(float *)(v158 + 28);
    v210 = *(float *)(v158 + 32);
    v211 = *(float *)(v158 + 36);
    v212 = v415;
    v395 = v189;
    v393 = v194;
    if ((float *)v208 == v184
      || (v213 = 170 * (v207 - v183)
               - 0x5555555555555555 * ((uint64_t)(v208 - *v207) >> 3)
               + 0x5555555555555555 * (((uint64_t)v184 - *v183) >> 3)) == 0)
    {
      v220 = *(float *)(v158 + 36);
      v218 = *(float *)(v158 + 32);
      v219 = *(float *)(v158 + 28);
      v221 = v409;
    }
    else
    {
      v385 = v201;
      v214 = v200;
      v215 = v199;
      v388 = v141;
      do
      {
        v216 = v213 >> 1;
        *(_QWORD *)buf = v183;
        *(_QWORD *)&buf[8] = v184;
        sub_1004CDD14(buf, v213 >> 1);
        v217 = *(_QWORD *)&buf[8];
        if (**(double **)&buf[8] < *(double *)(a1 + 400))
        {
          v184 = (float *)(*(_QWORD *)&buf[8] + 24);
          *(_QWORD *)&buf[8] += 24;
          v183 = *(_QWORD **)buf;
          if (v217 + 24 - **(_QWORD **)buf == 4080)
          {
            v183 = (_QWORD *)(*(_QWORD *)buf + 8);
            v184 = *(float **)(*(_QWORD *)buf + 8);
          }
          v216 = v213 + ~v216;
        }
        v213 = v216;
      }
      while (v216);
      v219 = *(float *)(v158 + 28);
      v218 = *(float *)(v158 + 32);
      v220 = *(float *)(v158 + 36);
      v141 = v388;
      v202 = v215;
      v203 = v214;
      v221 = v409;
      v204 = v385;
    }
    v410 = v221;
    v222 = 0;
    v379 = vabds_f32(v211, v204 * (float)((float)((float)(v204 * v211) + (float)(v203 * v210)) + (float)(v202 * v209)));
    v380 = v211;
    v381 = fabsf(v210);
    v223 = v212 - v188;
    v224 = v184[2];
    v225 = v184[3];
    v226 = v184[4];
    v227 = (float)((float)(v226 * v220) + (float)(v225 * v218)) + (float)(v224 * v219);
    v378 = v224 * v227;
    v389 = fabsf((float)((float)(v204 * (float)(v226 * v227)) + (float)(v203 * (float)(v225 * v227)))+ (float)(v202 * (float)(v224 * v227)));
    v377 = 1.0 - v389;
    v228 = *(float *)(v158 + 16);
    v229 = *(float *)(v158 + 20);
    v230 = *(float *)(v158 + 24);
    v231 = (float)((float)(v204 * v230) + (float)(v203 * v229)) + (float)(v202 * v228);
    v376 = v228 - (float)(v202 * v231);
    *(float *)v420 = v376;
    *(float *)&v420[4] = v229 - (float)(v203 * v231);
    *(float *)&v420[8] = v230 - (float)(v204 * v231);
    v232 = 0.0;
    do
    {
      v232 = v232 + (float)(*(float *)&v420[v222] * *(float *)&v420[v222]);
      v222 += 4;
    }
    while (v222 != 12);
    v386 = v408[2];
    v233 = v408[4];
    v384 = v408[3];
    v234 = atomic_load((unsigned __int8 *)&qword_102304B50);
    if ((v234 & 1) == 0)
    {
      v302 = v202;
      v303 = v203;
      v304 = v204;
      v305 = __cxa_guard_acquire(&qword_102304B50);
      v204 = v304;
      v203 = v303;
      v202 = v302;
      if (v305)
      {
        qword_102304B40 = 0x3F80000000000000;
        dword_102304B48 = 0;
        __cxa_guard_release(&qword_102304B50);
        v204 = v304;
        v203 = v303;
        v202 = v302;
      }
    }
    v235 = v202;
    v236 = v203;
    v237 = v204;
    v238 = sub_100818E10(*(float *)&qword_102304B40, *((float *)&qword_102304B40 + 1), *(float *)&dword_102304B48, v202, v203, v204);
    v239 = fabsf(v229);
    v240 = vabds_f32(v233, v233 * (float)((float)((float)(v237 * v233) + (float)(v384 * v236)) + (float)(v386 * v235)));
    v241 = (float)(*(float *)&v238 * 57.296);
    v242 = v389;
    if (v223 <= 0.0)
      v243 = 0.0;
    else
      v243 = v223 * (v397 + v389) * 0.5;
    v398 = v239;
    if (v223 <= 0.0)
      v244 = 0.0;
    else
      v244 = v223 * (v399 + v398) * 0.5;
    v400 = v231;
    v245 = v223 * (v402 + v231) * 0.5;
    if (v223 <= 0.0)
      v245 = 0.0;
    v246 = v406 + v245;
    if (v223 <= 0.0)
      v247 = 0.0;
    else
      v247 = v223 * (v403 + v241) * 0.5;
    v248 = v240;
    v406 = v406 + v245;
    v249 = fabs(v246);
    v250 = v235;
    v251 = v237;
    v387 = v241;
    v390 = v389;
    if (v415 >= *v375)
    {
      v262 = fabsf(v376);
      v263 = v223 * (v355 + v241) * 0.5;
      if (v223 <= 0.0)
        v263 = 0.0;
      v368 = v368 + v263;
      v264 = v223 * (v357 + v381) * 0.5;
      if (v223 <= 0.0)
        v264 = 0.0;
      v371 = v371 + v264;
      v361 = v361 + v262;
      ++v374;
      v265 = v223 * (v360 + v249) * 0.5;
      if (v223 <= 0.0)
        v265 = 0.0;
      v365 = v365 + v265;
      v355 = v241;
      v360 = v249;
      v357 = v381;
    }
    else
    {
      v252 = fabsf(sqrtf(v232));
      v253 = (float)(v378 * v377);
      if (v373 >= v253)
        v254 = v373;
      else
        v254 = (float)(v378 * v377);
      v255 = v372;
      if (v372 > v253)
        v255 = (float)(v378 * v377);
      v372 = v255;
      v373 = v254;
      v256 = v366;
      if (v366 < v379)
        v256 = v379;
      v366 = v256;
      v257 = v369;
      if (v369 < v380)
        v257 = v380;
      v369 = v257;
      v258 = v252;
      v259 = v223 * (v356 + v252) * 0.5;
      if (v223 <= 0.0)
        v259 = 0.0;
      v370 = v370 + v259;
      v260 = v223 * (v358 + v242) * 0.5;
      if (v223 <= 0.0)
        v260 = 0.0;
      v367 = v367 + v260;
      v261 = v223 * (v359 + v249) * 0.5;
      if (v223 <= 0.0)
        v261 = 0.0;
      v364 = v364 + v261;
      v358 = v242;
      v359 = v249;
      v356 = v258;
    }
    v67 = v362;
    v189 = v395;
    v190 = v396;
    v266 = 0;
    v195 = v392 + v243;
    v193 = v391 + v244;
    v194 = v393 + v247;
    v267 = v410 + v248;
    v268 = v407 + 1;
    v269 = *(float *)(v158 + 16);
    v270 = *(float *)(v158 + 20);
    v271 = *(float *)(v158 + 24);
    v272 = (float)((float)(v251 * v271) + (float)(v270 * v236)) + (float)(v269 * v250);
    *(float *)&v411 = v269 - (float)(v250 * v272);
    *((float *)&v411 + 1) = v270 - (float)(v236 * v272);
    *((float *)&v411 + 2) = v271 - (float)(v251 * v272);
    v273 = 0.0;
    do
    {
      v273 = v273 + (float)(*(float *)((char *)&v411 + v266) * *(float *)((char *)&v411 + v266));
      v266 += 4;
    }
    while (v266 != 12);
    v274 = 0;
    v404 = sqrtf(v273);
    v275 = 0.0;
    do
    {
      v275 = v275 + (float)(*(float *)(v158 + 28 + v274) * *(float *)(v158 + 28 + v274));
      v274 += 4;
    }
    while (v274 != 12);
    v276 = sqrtf(v275);
    if (v396 > v276)
      v190 = v276;
    v277 = (float)(v251 * *(float *)(v158 + 36)) + (float)(*(float *)(v158 + 32) * v236);
    if (v395 < (float)(v277 + (float)(*(float *)(v158 + 28) * v250)))
      v189 = (float)(v277 + (float)(*(float *)(v158 + 28) * v250));
    memset(v414, 0, 12);
    v278 = *(_QWORD *)(a1 + 136) + *(_QWORD *)(a1 + 144);
    v279 = *(_QWORD *)(a1 + 112);
    v280 = (_QWORD *)(v279 + 8 * (v278 / 0xAA));
    if (*(_QWORD *)(a1 + 120) == v279)
      v281 = 0;
    else
      v281 = (double *)(*v280 + 24 * (v278 % 0xAA));
    if ((sub_100818FD8(v416, v415, (uint64_t)v280, v281, v414) & 1) == 0)
    {
      v282 = v141;
      if (qword_10229FF30 != -1)
        dispatch_once(&qword_10229FF30, &stru_102155810);
      v283 = qword_10229FF38;
      if (os_log_type_enabled((os_log_t)qword_10229FF38, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v283, OS_LOG_TYPE_ERROR, "[FormModels] Failed to get primary axis of rotation", buf, 2u);
      }
      v141 = v282;
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FF30 != -1)
          dispatch_once(&qword_10229FF30, &stru_102155810);
        v413[0] = 0;
        LODWORD(v345) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF38, 16, "[FormModels] Failed to get primary axis of rotation", v413, *(_QWORD *)&v345);
        v301 = (char *)v300;
        sub_100512490("Generic", 1, 0, 0, "void CLRunning::FormModels::feedDeviceMotion(const DeviceMotionQueue &, const StepQueue &)", "%s\n", v300);
        if (v301 != buf)
          free(v301);
        v67 = v362;
        v141 = v282;
      }
    }
    v284 = (char *)__p + 12 * v407;
    v285 = vmlas_n_f32(vmuls_lane_f32(*(float *)(v158 + 36), *(float32x2_t *)((char *)v414 + 4), 1), *(float *)(v158 + 32), *((float *)v414 + 1))+ (float)(*(float *)v414 * *(float *)(v158 + 28));
    v286 = *(float *)v414 * v285;
    v287 = (int32x2_t)vmul_n_f32(*(float32x2_t *)((char *)v414 + 4), v285);
    v288 = *(int32x2_t *)(v284 + 4);
    v289.i32[0] = vdup_lane_s32(v287, 1).u32[0];
    v289.f32[1] = v286;
    v290.i32[0] = vdup_lane_s32(v288, 1).u32[0];
    v290.i32[1] = *(_DWORD *)v284;
    v291 = vmla_f32(vmul_f32((float32x2_t)v288, vneg_f32(v289)), v290, (float32x2_t)v287);
    *(float *)v287.i32 = (float)(*(float *)(v158 + 24) * 9.8067)
                       - vmlas_n_f32(-(float)(*(float *)v287.i32 * *(float *)v284), v286, *(float *)v288.i32);
    *(float32x2_t *)buf = vsub_f32(vmul_f32(*(float32x2_t *)(v158 + 16), (float32x2_t)vdup_n_s32(0x411CE80Au)), v291);
    *(_DWORD *)&buf[8] = v287.i32[0];
    v292 = *(_QWORD *)(a1 + 192);
    if (v292)
    {
      v293 = v292 + *(_QWORD *)(a1 + 184) - 1;
      v294 = *(void ***)(a1 + 160);
      if (*((double *)v294[v293 / 0xAA] + 3 * (v293 % 0xAA)) - v415 > 0.1)
      {
        v295 = *(_QWORD *)(a1 + 168);
        *(_QWORD *)(a1 + 192) = 0;
        v296 = v295 - (_QWORD)v294;
        if (v296 >= 0x11)
        {
          do
          {
            operator delete(*v294);
            v297 = *(_QWORD *)(a1 + 168);
            v294 = (void **)(*(_QWORD *)(a1 + 160) + 8);
            *(_QWORD *)(a1 + 160) = v294;
            v296 = v297 - (_QWORD)v294;
          }
          while (v296 > 0x10);
        }
        if (v296 >> 3 == 1)
        {
          v298 = 85;
        }
        else
        {
          if (v296 >> 3 != 2)
            goto LABEL_286;
          v298 = 170;
        }
        *(_QWORD *)(a1 + 184) = v298;
      }
    }
LABEL_286:
    sub_10081920C((_QWORD *)(a1 + 152), &v415, (uint64_t *)buf);
    v408 += 6;
    if ((float *)((char *)v408 - *v141) == (float *)4080)
    {
      v299 = (float *)v141[1];
      ++v141;
      v408 = v299;
    }
    v158 += 56;
    v409 = v267;
    if (v158 - *v382 == 4088)
    {
      v158 = v382[1];
      ++v382;
    }
    v192 = v394 + v404;
    ++v407;
    v197 = v398;
    v196 = v400;
    v188 = v415;
    v198 = v387;
    v191 = v390;
  }
  while (v268 != v363);
  v306 = v354;
  *(float *)&v307 = v364 + v365;
  *(float *)&v308 = v364;
  *(_QWORD *)((char *)&v428 + 4) = __PAIR64__(v308, v307);
  v309 = v365;
  *((float *)&v428 + 3) = v309;
  v310 = *(int32x2_t *)(a1 + 2536);
  v425[0].n128_u64[0] = (unint64_t)vrev64_s32(v310);
  v311 = 0.0;
  v312 = 0.0;
  v313 = v353;
  if (v348 >= 1)
    v312 = v383 / (double)v348;
  *(float *)&v314 = v312;
  *(float *)&v315 = v350 - v349;
  *(_QWORD *)&v426 = __PAIR64__(v315, v314);
  v316 = v366;
  v317 = v373 - v372;
  v425[1].n128_f32[3] = v316;
  v425[1].n128_f32[0] = v317;
  v318 = v193;
  *(float *)&v319 = v367;
  *(float *)&v320 = v195;
  v425[0].n128_u64[1] = __PAIR64__(v319, v320);
  v321 = v368;
  *((float *)&v426 + 2) = v318;
  *((float *)&v427 + 2) = v321;
  if (v374 >= 1)
    v311 = v361 / (double)v374;
  *(float *)&v322 = v311;
  *(float *)&v323 = v370;
  *(unint64_t *)((char *)v425[1].n128_u64 + 4) = __PAIR64__(v322, v323);
  v324 = v369;
  v325 = v371;
  *((float *)&v426 + 3) = v324;
  *(float *)&v427 = v325;
  v326 = v194;
  *((float *)&v427 + 1) = v326;
  if ((_DWORD)v363)
    v327 = v409 / (double)(int)v363;
  else
    v327 = 0.0;
  v330 = v327;
  *(float *)&v429 = v330;
  v328 = *(double *)(a1 + 448);
  *((double *)&v429 + 1) = *v375 + v328;
  v329 = sqrt(v192 / (double)v363);
LABEL_308:
  v331 = *(float *)v310.i32 * 100.0;
  *(double *)&v411 = v331;
  *((double *)&v411 + 1) = v329;
  *(double *)&v412 = v190;
  *((double *)&v412 + 1) = v189;
  v332 = *v313 + v328;
  v333 = v328 + *v306;
  if (v333 - v332 > 0.0)
  {
    v334 = 2.0 / (v333 - v332);
    *((float *)&v429 + 1) = v334;
  }
  v414[0] = 0.0;
  if (sub_100819304((double *)&v411, v414))
  {
    *(double *)buf = v414[0];
    *(double *)&buf[8] = v333;
    *(_OWORD *)&buf[16] = v411;
    v433 = v412;
    sub_1008193C4((_QWORD *)(a1 + 344), (uint64_t)buf);
  }
  else
  {
    if (qword_10229FF30 != -1)
      dispatch_once(&qword_10229FF30, &stru_102155810);
    v335 = qword_10229FF38;
    if (os_log_type_enabled((os_log_t)qword_10229FF38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218752;
      *(double *)&buf[4] = v331;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v329;
      *(_WORD *)&buf[22] = 2048;
      *(double *)&buf[24] = v190;
      LOWORD(v433) = 2048;
      *(double *)((char *)&v433 + 2) = v189;
      _os_log_impl((void *)&_mh_execute_header, v335, OS_LOG_TYPE_ERROR, "[FormModels] Invalid StrideLength features (%.f,%.f,%.f,%.f)", buf, 0x2Au);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF30 != -1)
        dispatch_once(&qword_10229FF30, &stru_102155810);
      *(_DWORD *)v420 = 134218752;
      *(double *)&v420[4] = v331;
      *(_WORD *)&v420[12] = 2048;
      *(double *)&v420[14] = v329;
      v421 = 2048;
      v422 = v190;
      v423 = 2048;
      v424 = v189;
      LODWORD(v345) = 42;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF38, 16, "[FormModels] Invalid StrideLength features (%.f,%.f,%.f,%.f)", COERCE_DOUBLE(v420), v345, v346, v347);
      v339 = (char *)v338;
      sub_100512490("Generic", 1, 0, 0, "void CLRunning::FormModels::feedDeviceMotion(const DeviceMotionQueue &, const StepQueue &)", "%s\n", v338);
      if (v339 != buf)
        free(v339);
      v67 = v362;
    }
  }
  *(double *)&v430 = v332;
  *((double *)&v430 + 1) = v333;
  sub_100819470((_QWORD *)(a1 + 296), (__int128 *)v425);
  if (__p)
  {
    v418 = __p;
    operator delete(__p);
  }
  v60 = v351;
LABEL_68:
  if (*(double *)(a1 + 432) < v67)
  {
    *(double *)(a1 + 432) = v67;
    *(_QWORD *)(a1 + 424) = *(_QWORD *)v60;
  }
LABEL_70:
  v68 = *(_QWORD *)(a1 + 192);
  if (v68 >= 0x101)
  {
    v69 = (int64x2_t *)(a1 + 328);
    do
    {
      if (!*(_QWORD *)(a1 + 336))
        break;
      v70 = *(_QWORD *)(a1 + 304);
      if (*(_QWORD *)(a1 + 312) == v70)
        v71 = 0;
      else
        v71 = *(_QWORD *)(v70 + 8 * (v69->i64[0] / 0x22uLL)) + 120 * (v69->i64[0] % 0x22uLL);
      v72 = *(_QWORD *)(a1 + 184);
      v73 = v72 / 0xAA;
      v74 = *(_QWORD *)(a1 + 160);
      if (*(_QWORD *)(a1 + 168) == v74)
      {
        v78 = 0;
        *(_QWORD *)buf = v74 + 8 * (v72 / 0xAA);
        *(_QWORD *)&buf[8] = 0;
        v77 = (_QWORD *)(v74 + 8 * ((v72 + v68) / 0xAA));
      }
      else
      {
        v75 = *(_QWORD *)(v74 + 8 * v73);
        *(_QWORD *)buf = v74 + 8 * v73;
        *(_QWORD *)&buf[8] = v75 + 24 * (v72 % 0xAA);
        v76 = v72 + v68;
        v77 = (_QWORD *)(v74 + 8 * (v76 / 0xAA));
        v78 = *v77 + 24 * (v76 % 0xAA);
      }
      v425[0].n128_u64[0] = (unint64_t)v77;
      v425[0].n128_u64[1] = v78;
      sub_100819570((uint64_t)buf, (uint64_t)v425, a1 + 472, (uint64_t)v420);
      v79 = v4[4];
      v80 = v79 / 0x49;
      v81 = v4[1];
      if (v4[2] == v81)
      {
        v82 = 0;
        v85 = 0;
        v84 = (_QWORD *)(v81
                       + (((unint64_t)(((*v8 + v79) * (unsigned __int128)0x70381C0E070381C1uLL) >> 64) >> 2) & 0x1FFFFFFFFFFFFFF8));
      }
      else
      {
        v82 = (float *)(*(_QWORD *)(v81 + 8 * (v79 / 0x49)) + 56 * (v79 % 0x49));
        v83 = *v8 + v79;
        v84 = (_QWORD *)(v81 + 8 * (v83 / 0x49));
        v85 = *v84 + 56 * (v83 % 0x49);
      }
      v86 = *(unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * ((*(_QWORD *)(a1 + 184) + 128) / 0xAAuLL))
                                + 24 * ((*(_QWORD *)(a1 + 184) + 128) % 0xAAuLL));
      if ((float *)v85 != v82)
      {
        v87 = v8;
        v88 = (_QWORD *)(v81 + 8 * v80);
        v89 = 73 * (v84 - v88)
            + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v85 - *v84) >> 3)
            - 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v82 - *v88) >> 3);
        if (v89)
        {
          do
          {
            v90 = v89 >> 1;
            *(_QWORD *)buf = v88;
            *(_QWORD *)&buf[8] = v82;
            sub_10081FEC4(buf, v89 >> 1);
            v91 = *(_QWORD *)&buf[8];
            if (*(double *)(*(_QWORD *)&buf[8] + 40) < *(double *)&v86)
            {
              v82 = (float *)(*(_QWORD *)&buf[8] + 56);
              *(_QWORD *)&buf[8] += 56;
              v88 = *(_QWORD **)buf;
              if (v91 + 56 - **(_QWORD **)buf == 4088)
              {
                v88 = (_QWORD *)(*(_QWORD *)buf + 8);
                v82 = *(float **)(*(_QWORD *)buf + 8);
              }
              v90 = v89 + ~v90;
            }
            v89 = v90;
          }
          while (v90);
          v4 = v405;
        }
        v8 = v87;
      }
      v92 = sub_10012C7A4(v82);
      v95 = *(double *)&v86 + *(double *)(a1 + 448);
      if (v95 > *(double *)(v71 + 88))
      {
        v96 = (float)((float)(v94 * *(float *)&v420[16]) + (float)(*(float *)&v420[12] * v93))
            + (float)(*(float *)&v420[8] * v92);
        v97 = fabsf(v96);
        if (*(double *)&qword_102304B60 <= 0.0)
        {
          v98 = v97;
        }
        else
        {
          v98 = v97;
          if (*(double *)&v86 - *(double *)&qword_102304B60 <= 0.0)
            v99 = 0.0;
          else
            v99 = (*(double *)&v86 - *(double *)&qword_102304B60) * (*(double *)&qword_102304B58 + v98) * 0.5;
          *(double *)&qword_102304B68 = *(double *)&qword_102304B68 + v99;
          *(double *)&v100 = v96;
          if (*(double *)&qword_1022A46C8 < *(double *)&v100)
            qword_1022A46C8 = v100;
          if (*(double *)&qword_1022A46D0 > *(double *)&v100)
            qword_1022A46D0 = v100;
        }
        qword_102304B58 = *(_QWORD *)&v98;
        qword_102304B60 = v86;
      }
      if (v95 >= *(double *)(v71 + 104))
      {
        v101 = *(double *)&qword_102304B68;
        v102 = *(double *)&qword_1022A46C8 - *(double *)&qword_1022A46D0;
        *(float *)(v71 + 60) = v102;
        *(float *)(v71 + 64) = v101;
        v103 = sub_1008196F4(a1, v71);
        if (qword_10229FF30 != -1)
          dispatch_once(&qword_10229FF30, &stru_102155810);
        v104 = (float)(v103 * 0.001);
        v105 = qword_10229FF38;
        if (os_log_type_enabled((os_log_t)qword_10229FF38, OS_LOG_TYPE_DEBUG))
        {
          v106 = *(_QWORD *)(v71 + 96);
          v107 = *(double *)&v86 + *(double *)(a1 + 448);
          *(_DWORD *)buf = 134349824;
          *(_QWORD *)&buf[4] = v106;
          *(_WORD *)&buf[12] = 2050;
          *(double *)&buf[14] = v107;
          *(_WORD *)&buf[22] = 2050;
          *(_QWORD *)&buf[24] = v86;
          LOWORD(v433) = 2048;
          *(double *)((char *)&v433 + 2) = v104;
          _os_log_impl((void *)&_mh_execute_header, v105, OS_LOG_TYPE_DEBUG, "[FormModels] VerticalOscillationEvent,startTime,%{public}.2f,endTime,%{public}.2f,timestamp,%{public}.2f,displacement,%.3f", buf, 0x2Au);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FF30 != -1)
            dispatch_once(&qword_10229FF30, &stru_102155810);
          v108 = *(_QWORD *)(v71 + 96);
          v109 = *(double *)&v86 + *(double *)(a1 + 448);
          v425[0].n128_u32[0] = 134349824;
          *(unint64_t *)((char *)v425[0].n128_u64 + 4) = v108;
          v425[0].n128_u16[6] = 2050;
          *(double *)((char *)&v425[0].n128_f64[1] + 6) = v109;
          v425[1].n128_u16[3] = 2050;
          v425[1].n128_u64[1] = v86;
          LOWORD(v426) = 2048;
          *(double *)((char *)&v426 + 2) = v104;
          LODWORD(v345) = 42;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF38, 2, "[FormModels] VerticalOscillationEvent,startTime,%{public}.2f,endTime,%{public}.2f,timestamp,%{public}.2f,displacement,%.3f", v425, *(_QWORD *)&v345);
          v111 = (char *)v110;
          sub_100512490("Generic", 1, 0, 2, "void CLRunning::FormModels::feedDeviceMotion(const DeviceMotionQueue &, const StepQueue &)", "%s\n", v110);
          if (v111 != buf)
            free(v111);
        }
        *v69 = vaddq_s64(*v69, (int64x2_t)xmmword_101B9DFC0);
        sub_100820ED0(a1 + 296, 1);
        if (*(_QWORD *)(a1 + 336))
          v71 = *(_QWORD *)(*(_QWORD *)(a1 + 304) + 8 * (*(_QWORD *)(a1 + 328) / 0x22uLL))
              + 120 * (*(_QWORD *)(a1 + 328) % 0x22uLL);
        if (*(_BYTE *)(v71 + 112))
        {
          *(_QWORD *)buf = v86;
          *(double *)&buf[8] = v104;
          sub_1008198D4((_QWORD *)(a1 + 248), buf);
        }
        qword_1022A46C8 = 0xFFEFFFFFFFFFFFFFLL;
        qword_1022A46D0 = 0x7FEFFFFFFFFFFFFFLL;
        qword_102304B58 = 0;
        qword_102304B60 = 0;
        qword_102304B68 = 0;
      }
      *(int64x2_t *)(a1 + 184) = vaddq_s64(*(int64x2_t *)(a1 + 184), (int64x2_t)xmmword_101B9DFC0);
      sub_10047FDC4(a1 + 152, 1);
      v68 = *(_QWORD *)(a1 + 192);
    }
    while (v68 > 0x100);
  }
  v112 = *(_DWORD *)(a1 + 2608) + 1;
  *(_DWORD *)(a1 + 2608) = v112;
  v113 = v112 & 7;
  if (*v8 >= 0x80uLL && v113 == 0)
  {
    v115 = v4[4] + *v8;
    v116 = v4[1];
    v117 = v4[2];
    v118 = (uint64_t *)(v116 + 8 * (v115 / 0x49));
    v119 = *v118;
    v120 = *v118 + 56 * (v115 % 0x49);
    if (v117 == v116)
      v120 = 0;
    v121 = v120 - v119;
    v122 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v120 - v119) >> 3);
    if (v121 < 7169)
    {
      v129 = 200 - v122;
      v124 = &v118[-(v129 / 0x49)];
      v125 = *v124 + 56 * (73 * (v129 / 0x49) - v129) + 4032;
    }
    else
    {
      v123 = v122 - 128;
      v124 = &v118[v123 / 0x49];
      v125 = *v124 + 56 * (v123 % 0x49);
    }
    v130 = v119 + 56 * (v115 % 0x49);
    if (v117 == v116)
      v131 = 0;
    else
      v131 = v130;
    sub_100821240((uint64_t)buf, v124, v125, v118, v131);
    *(_DWORD *)(a1 + 2608) = 0;
    if ((v401 & 1) != 0 || *(_BYTE *)(a1 + 2612))
      sub_100819990(a1, buf);
    sub_1005CBF30(buf);
  }
  v132 = *(_QWORD *)(a1 + 96);
  if (v132 >= 0x101)
  {
    do
    {
      *(_QWORD *)(a1 + 96) = v132 - 1;
      ++*(_QWORD *)(a1 + 88);
      sub_10047FDC4(a1 + 56, 1);
      v132 = *(_QWORD *)(a1 + 96);
    }
    while (v132 > 0x100);
  }
  v133 = *(_QWORD *)(a1 + 144);
  if (v133 >= 0x51)
  {
    do
    {
      *(_QWORD *)(a1 + 144) = v133 - 1;
      ++*(_QWORD *)(a1 + 136);
      sub_10047FDC4(a1 + 104, 1);
      v133 = *(_QWORD *)(a1 + 144);
    }
    while (v133 > 0x50);
  }
  v134 = *(_QWORD *)(a1 + 240);
  if (v134 >= 0x101)
  {
    do
    {
      *(_QWORD *)(a1 + 240) = v134 - 1;
      ++*(_QWORD *)(a1 + 232);
      sub_1004A57E8(a1 + 200, 1);
      v134 = *(_QWORD *)(a1 + 240);
    }
    while (v134 > 0x100);
  }
  v135 = *(_QWORD *)(a1 + 288);
  if (v135 >= 0x23)
  {
    do
    {
      ++*(_QWORD *)(a1 + 280);
      *(_QWORD *)(a1 + 288) = v135 - 1;
      sub_1004A57E8(a1 + 248, 1);
      v135 = *(_QWORD *)(a1 + 288);
    }
    while (v135 > 0x22);
  }
  v136 = *(_QWORD *)(a1 + 384);
  if (v136 >= 0x23)
  {
    do
    {
      ++*(_QWORD *)(a1 + 376);
      *(_QWORD *)(a1 + 384) = v136 - 1;
      sub_1004A527C(a1 + 344, 1);
      v136 = *(_QWORD *)(a1 + 384);
    }
    while (v136 > 0x22);
  }
  v137 = *(_QWORD *)(a1 + 2656);
  if (v137 >= 0x441)
  {
    do
    {
      v138 = *(_QWORD *)(a1 + 2648);
      *(_QWORD *)(a1 + 2656) = v137 - 1;
      *(_QWORD *)(a1 + 2648) = v138 + 1;
      sub_100821A24(a1 + 2616, 1);
      v137 = *(_QWORD *)(a1 + 2656);
    }
    while (v137 > 0x440);
  }
}

void sub_100817A6C(_Unwind_Exception *a1)
{
  void *v2;

  v2 = (void *)STACK[0x248];
  if (STACK[0x248])
  {
    STACK[0x250] = (unint64_t)v2;
    operator delete(v2);
  }
  _Unwind_Resume(a1);
}

void sub_100817AC0(uint64_t a1, _QWORD *a2, double *a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  double v12;
  uint64_t i;
  _OWORD v14[65];
  _OWORD v15[65];
  _BYTE __src[1028];
  _BYTE v17[1028];

  v4 = a2[5];
  if (v4)
  {
    v5 = a2[4];
    v6 = a2[1];
    v7 = *(double *)(*(_QWORD *)(v6 + 8 * ((v4 + v5 - 1) / 0x17)) + 176 * ((v4 + v5 - 1) % 0x17) + 8);
    if (*a3 != v7)
    {
      if (a2[2] == v6)
      {
        v8 = 0;
        v11 = 0;
        v10 = (_QWORD *)(v6 + 8 * ((v5 + v4) / 0x17));
      }
      else
      {
        v8 = *(_QWORD *)(v6 + 8 * (v5 / 0x17)) + 176 * (v5 % 0x17);
        v9 = v5 + v4;
        v10 = (_QWORD *)(v6 + 8 * (v9 / 0x17));
        v11 = *v10 + 176 * (v9 % 0x17);
      }
      v12 = sub_10081C1B4((_QWORD *)(v6 + 8 * (v5 / 0x17)), v8, v10, v11);
      if (v12 <= 0.0)
      {
        bzero(__src, 0x404uLL);
        bzero(v17, 0x404uLL);
      }
      else
      {
        sub_10081CB54(v17, v12 * 0.65);
        memset(v15, 0, 512);
        sub_10081CB54(v15, v12 * 1.15);
        memset(v14, 0, 512);
        sub_10081CB54(v14, v12 * 2.15);
        for (i = 0; i != 1028; i += 4)
          *(float *)&__src[i] = *(float *)((char *)v15 + i) + *(float *)((char *)v14 + i);
      }
      memcpy(a3 + 2, __src, 0x404uLL);
      memcpy((char *)a3 + 1044, v17, 0x404uLL);
      *a3 = v7;
      a3[1] = v12;
    }
  }
  else
  {
    bzero(a3, 0x818uLL);
  }
}

BOOL sub_100817E14(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  _DWORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  _DWORD *v28;
  _DWORD *v29;
  char *v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  float v34;
  float *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v58;
  uint64_t v59;
  int v60;
  float32x2_t v61;
  float v62;
  float32x2_t v63;
  float v64;
  void *__p;
  _DWORD *v66;
  char *v67;

  v2 = a1[5];
  if (v2 >= 0x100)
  {
    __p = 0;
    v66 = 0;
    v67 = 0;
    v63 = 0;
    v64 = 0.0;
    v4 = a1[4] + v2;
    v5 = a1[1];
    v6 = a1[2];
    v7 = (uint64_t *)(v5 + 8 * (v4 / 0x49));
    v8 = *v7;
    v9 = *v7 + 56 * (v4 % 0x49);
    if (v6 == v5)
      v9 = 0;
    v10 = v9 - v8;
    v11 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v9 - v8) >> 3);
    v58 = v2;
    if (v10 < 14337)
    {
      v15 = 328 - v11;
      v13 = &v7[-(v15 / 0x49)];
      v14 = *v13 + 56 * (73 * (v15 / 0x49) - v15) + 4032;
    }
    else
    {
      v12 = v11 - 256;
      v13 = &v7[v12 / 0x49];
      v14 = *v13 + 56 * (v12 % 0x49);
    }
    while (1)
    {
      if (v6 == v5)
      {
        v17 = 0;
      }
      else
      {
        v16 = a1[5] + a1[4];
        v17 = *(_QWORD *)(v5 + 8 * (v16 / 0x49)) + 56 * (v16 % 0x49);
      }
      if (v14 == v17)
        break;
      v18 = (uint64_t *)(v14 + 28);
      v19 = v66;
      if (v66 >= (_DWORD *)v67)
      {
        v22 = 0xAAAAAAAAAAAAAAABLL * (((char *)v66 - (_BYTE *)__p) >> 2);
        v23 = v22 + 1;
        if (v22 + 1 > 0x1555555555555555)
          sub_100259694();
        if (0x5555555555555556 * ((v67 - (_BYTE *)__p) >> 2) > v23)
          v23 = 0x5555555555555556 * ((v67 - (_BYTE *)__p) >> 2);
        if (0xAAAAAAAAAAAAAAABLL * ((v67 - (_BYTE *)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL)
          v24 = 0x1555555555555555;
        else
          v24 = v23;
        if (v24)
          v25 = (char *)sub_100821B78((uint64_t)&v67, v24);
        else
          v25 = 0;
        v26 = &v25[12 * v22];
        v27 = *v18;
        *((_DWORD *)v26 + 2) = *(_DWORD *)(v14 + 36);
        *(_QWORD *)v26 = v27;
        v29 = __p;
        v28 = v66;
        v30 = v26;
        if (v66 != __p)
        {
          do
          {
            v31 = *(_QWORD *)(v28 - 3);
            v28 -= 3;
            v32 = v28[2];
            *(_QWORD *)(v30 - 12) = v31;
            v30 -= 12;
            *((_DWORD *)v30 + 2) = v32;
          }
          while (v28 != v29);
          v28 = __p;
        }
        v21 = v26 + 12;
        __p = v30;
        v66 = v26 + 12;
        v67 = &v25[12 * v24];
        if (v28)
          operator delete(v28);
      }
      else
      {
        v20 = *v18;
        v66[2] = *(_DWORD *)(v14 + 36);
        *v19 = v20;
        v21 = (_DWORD *)v19 + 3;
      }
      v33 = 0;
      v66 = v21;
      do
      {
        v34 = sub_100533668(v14 + 28, v33);
        v35 = (float *)sub_100534E68((uint64_t)&v63, v33);
        *v35 = v34 + *v35;
        ++v33;
      }
      while (v33 != 3);
      v14 += 56;
      if (v14 - *v13 == 4088)
      {
        v36 = v13[1];
        ++v13;
        v14 = v36;
      }
      v5 = a1[1];
      v6 = a1[2];
    }
    v61 = vmul_f32(v63, (float32x2_t)vdup_n_s32(0x3B800000u));
    v62 = v64 * 0.0039062;
    sub_10081CA0C((uint64_t *)&__p, &v61, (uint64_t)&v59);
    v37 = a1[4] + a1[5];
    v38 = a1[1];
    v39 = (uint64_t *)(v38 + 8 * (v37 / 0x49));
    v40 = *v39;
    v41 = *v39 + 56 * (v37 % 0x49);
    if (a1[2] == v38)
      v41 = 0;
    v42 = v41 - v40;
    v43 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v41 - v40) >> 3);
    v2 = v58;
    if (v42 < 7169)
    {
      v49 = 200 - v43;
      v50 = (200 - v43) / 0x49uLL;
      v46 = &v39[-v50];
      v47 = *v46;
      v48 = *v46 + 56 * (73 * v50 - v49) + 4032;
    }
    else
    {
      v44 = v43 - 128;
      v45 = (v43 - 128) / 0x49uLL;
      v46 = &v39[v45];
      v47 = *v46;
      v48 = *v46 + 56 * (v44 - 73 * v45);
    }
    v51 = v59;
    v52 = v60;
    v53 = v48 - v47;
    v54 = 0x6DB6DB6DB6DB6DB7 * ((v48 - v47) >> 3);
    if (v53 < -55)
      v55 = v46[-((71 - v54) / 0x49uLL)] + 56 * (73 * ((71 - v54) / 0x49uLL) - (71 - v54)) + 4032;
    else
      v55 = v46[(v54 + 1) / 0x49uLL] + 56 * ((v54 + 1) % 0x49uLL);
    *(double *)a2 = (*(double *)(v48 + 40) + *(double *)(v55 + 40)) * 0.5;
    *(_QWORD *)(a2 + 8) = v51;
    *(_DWORD *)(a2 + 16) = v52;
    if (__p)
    {
      v66 = __p;
      operator delete(__p);
    }
  }
  return v2 > 0xFF;
}

void sub_1008182C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 sub_1008182EC(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 *v8;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10081FBB0(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = (__n128 *)(*(_QWORD *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  result = *a2;
  v8[1].n128_u64[0] = a2[1].n128_u64[0];
  *v8 = result;
  ++a1[5];
  return result;
}

void sub_100818398(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t i;
  float v14;
  float v15;
  float *v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v7 = *(_QWORD **)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = v8 - **(_QWORD **)a1;
  v10 = 0x6DB6DB6DB6DB6DB7 * (v9 >> 3);
  if (v9 < -7167)
    v11 = v7[-((-56 - v10) / 0x49uLL)] + 56 * (73 * ((-56 - v10) / 0x49uLL) - (-56 - v10)) + 4032;
  else
    v11 = v7[(v10 + 128) / 0x49uLL] + 56 * ((v10 + 128) % 0x49uLL);
  v12 = 0;
  v18 = *(unint64_t *)(v11 + 40);
  LODWORD(v19) = 0;
  while (v8 != *(_QWORD *)(a2 + 8))
  {
    for (i = 0; i != 3; ++i)
    {
      v14 = sub_100533668(v8 + 16, i);
      v15 = *(float *)(a3 + 4 * v12);
      v16 = (float *)sub_100534E68((uint64_t)&v18 + 8, i);
      *v16 = *v16 + (float)(v14 * v15);
    }
    v8 += 56;
    if (v8 - *v7 == 4088)
    {
      v17 = v7[1];
      ++v7;
      v8 = v17;
    }
    if (++v12 == 257)
    {
      *(_OWORD *)a4 = v18;
      *(_QWORD *)(a4 + 16) = v19;
      return;
    }
  }
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
}

__n128 sub_100818538(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 *v8;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10081FF78(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = (__n128 *)(*(_QWORD *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  result = *a2;
  v8[1].n128_u64[0] = a2[1].n128_u64[0];
  *v8 = result;
  ++a1[5];
  return result;
}

_QWORD *sub_1008185E4(_QWORD *a1, double *a2, _QWORD *a3, double *a4, double *a5)
{
  double *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v9;
  double *v10;
  _QWORD *v12;
  double *v13;

  v5 = a2;
  v6 = a1;
  if (a4 != a2)
  {
    v7 = 170 * (a3 - a1)
       - 0x5555555555555555 * (((uint64_t)a4 - *a3) >> 3)
       + 0x5555555555555555 * (((uint64_t)a2 - *a1) >> 3);
    if (v7)
    {
      do
      {
        v9 = v7 >> 1;
        v12 = v6;
        v13 = v5;
        sub_1004CDD14(&v12, v7 >> 1);
        v10 = v13;
        if (*v13 < *a5)
        {
          v5 = v13 + 3;
          v13 += 3;
          v6 = v12;
          if ((double *)((char *)v10 - *v12 + 24) == (double *)4080)
          {
            v6 = v12 + 1;
            v5 = (double *)v12[1];
          }
          v9 = v7 + ~v9;
        }
        v7 = v9;
      }
      while (v9);
    }
  }
  return v6;
}

_QWORD *sub_1008186C8(_QWORD *a1, double *a2, _QWORD *a3, double *a4, double *a5)
{
  double *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v9;
  _QWORD *v11;
  double *v12;

  v5 = a2;
  v6 = a1;
  if (a4 != a2)
  {
    v7 = 170 * (a3 - a1)
       - 0x5555555555555555 * (((uint64_t)a4 - *a3) >> 3)
       + 0x5555555555555555 * (((uint64_t)a2 - *a1) >> 3);
    if (v7)
    {
      do
      {
        v9 = v7 >> 1;
        v11 = v6;
        v12 = v5;
        sub_1004CDD14(&v11, v7 >> 1);
        if (*v12 < *a5)
        {
          v6 = v11;
          v5 = v12 + 3;
          if ((double *)((char *)v12 - *v11 + 24) == (double *)4080)
          {
            v6 = v11 + 1;
            v5 = (double *)v11[1];
          }
          v9 = v7 + ~v9;
        }
        v7 = v9;
      }
      while (v9);
    }
  }
  return v6;
}

_QWORD *sub_1008187A8(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4, double *a5)
{
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;

  v5 = a2;
  v6 = a1;
  if (a4 != a2)
  {
    v7 = 73 * (a3 - a1) + 0x6DB6DB6DB6DB6DB7 * ((a4 - *a3) >> 3) - 0x6DB6DB6DB6DB6DB7 * ((a2 - *a1) >> 3);
    if (v7)
    {
      do
      {
        v9 = v7 >> 1;
        v12 = v6;
        v13 = v5;
        sub_10081FEC4(&v12, v7 >> 1);
        v10 = v13;
        if (*(double *)(v13 + 40) < *a5)
        {
          v5 = v13 + 56;
          v13 += 56;
          v6 = v12;
          if (v10 + 56 - *v12 == 4088)
          {
            v6 = v12 + 1;
            v5 = v12[1];
          }
          v9 = v7 + ~v9;
        }
        v7 = v9;
      }
      while (v9);
    }
  }
  return v6;
}

_QWORD *sub_1008188A0(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  double v9;
  int v10;
  double v11;

  if (a2 != a4)
  {
    v5 = *result;
    v6 = a2;
    v7 = result;
    while (1)
    {
      v6 += 24;
      if (v6 - v5 == 4080)
      {
        v8 = v7[1];
        ++v7;
        v5 = v8;
        v6 = v8;
      }
      if (v6 == a4)
        return result;
      v9 = *(float *)(a2 + 8);
      v10 = *(_DWORD *)(a5 + 2664);
      if (v10 == 1)
      {
        if (*(_DWORD *)(a5 + 2668) != 1)
        {
LABEL_9:
          v11 = *(float *)(v6 + 8);
          goto LABEL_18;
        }
      }
      else
      {
        if (v10)
          goto LABEL_12;
        if (*(_DWORD *)(a5 + 2668))
          goto LABEL_9;
      }
      v9 = -v9;
LABEL_12:
      v11 = *(float *)(v6 + 8);
      if (v10 == 1)
      {
        if (*(_DWORD *)(a5 + 2668) == 1)
          goto LABEL_17;
      }
      else if (!v10 && !*(_DWORD *)(a5 + 2668))
      {
LABEL_17:
        v11 = -v11;
      }
LABEL_18:
      if (v9 <= v11)
      {
        result = v7;
        a2 = v6;
      }
    }
  }
  return result;
}

_QWORD *sub_100818954(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  double v9;
  int v10;
  double v11;

  if (a2 != a4)
  {
    v5 = *result;
    v6 = a2;
    v7 = result;
    while (1)
    {
      v6 += 24;
      if (v6 - v5 == 4080)
      {
        v8 = v7[1];
        ++v7;
        v5 = v8;
        v6 = v8;
      }
      if (v6 == a4)
        return result;
      v9 = *(float *)(v6 + 8);
      v10 = *(_DWORD *)(a5 + 2664);
      if (v10 == 1)
      {
        if (*(_DWORD *)(a5 + 2668) != 1)
        {
LABEL_9:
          v11 = *(float *)(a2 + 8);
          goto LABEL_18;
        }
      }
      else
      {
        if (v10)
          goto LABEL_12;
        if (*(_DWORD *)(a5 + 2668))
          goto LABEL_9;
      }
      v9 = -v9;
LABEL_12:
      v11 = *(float *)(a2 + 8);
      if (v10 == 1)
      {
        if (*(_DWORD *)(a5 + 2668) == 1)
          goto LABEL_17;
      }
      else if (!v10 && !*(_DWORD *)(a5 + 2668))
      {
LABEL_17:
        v11 = -v11;
      }
LABEL_18:
      if (v9 <= v11)
      {
        result = v7;
        a2 = v6;
      }
    }
  }
  return result;
}

BOOL sub_100818A08(uint64_t **a1, uint64_t a2, float32x2_t **a3, double a4)
{
  uint64_t *v4;
  uint64_t *v5;
  float32x2_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  float32x2_t v11;
  float v12;
  float32x2_t v13;
  float v14;
  float32x2_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  float v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  float32x2_t *v24;
  float32x2_t *v25;
  float32x2_t *v26;
  float32x2_t v27;
  __int32 v28;
  uint64_t *v29;
  float32x2_t *v30;
  float32x2_t v31;
  float v32;
  _QWORD *v33;
  float32x2_t *v34;
  float32x2_t v35;
  float v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  float32x2_t *v41;
  float32x2_t *v42;
  float32x2_t *v43;
  float32x2_t *v44;
  float32x2_t v45;
  __int32 v46;
  uint64_t *v48;
  uint64_t *v49;
  float32x2_t *__p;
  float32x2_t *v51;
  float32x2_t *v52;

  v4 = a1[1];
  v5 = *(uint64_t **)(a2 + 8);
  if (v4 != v5)
  {
    v48 = *(uint64_t **)(a2 + 8);
    v8 = 0;
    __p = 0;
    v51 = 0;
    v52 = 0;
    v9 = *a1;
    v10 = (uint64_t *)**a1;
    v11 = 0;
    v12 = 0.0;
    v13 = (float32x2_t)vdup_n_s32(0x409CE80Au);
    v14 = 0.0;
    v49 = v4;
    v15 = 0;
    do
    {
      v16 = (char *)v4 - (char *)v10;
      v17 = 0xAAAAAAAAAAAAAAABLL * (v4 - v10);
      if (v16 < 25)
        v18 = v9[-((170 - v17) / 0xAA)] + 24 * (170 * ((170 - v17) / 0xAA) - (170 - v17)) + 4056;
      else
        v18 = v9[(v17 - 1) / 0xAA] + 24 * ((v17 - 1) % 0xAA);
      v19 = *(double *)v4 - *(double *)v18;
      v15 = vadd_f32(v15, vmul_f32(vmul_n_f32(vadd_f32(*(float32x2_t *)(v18 + 8), (float32x2_t)v4[1]), v19), v13));
      v12 = v12 + (float)((float)((float)(*(float *)(v18 + 16) + *((float *)v4 + 4)) * v19) * 4.9033);
      if (v8 >= v52)
      {
        v20 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)__p) >> 2);
        v21 = v20 + 1;
        if (v20 + 1 > 0x1555555555555555)
          sub_100259694();
        if (0x5555555555555556 * (((char *)v52 - (char *)__p) >> 2) > v21)
          v21 = 0x5555555555555556 * (((char *)v52 - (char *)__p) >> 2);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v52 - (char *)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL)
          v22 = 0x1555555555555555;
        else
          v22 = v21;
        if (v22)
          v23 = (char *)sub_100821B78((uint64_t)&v52, v22);
        else
          v23 = 0;
        v24 = (float32x2_t *)&v23[12 * v20];
        *v24 = v15;
        v24[1].f32[0] = v12;
        v25 = v51;
        v26 = v24;
        if (v51 != __p)
        {
          do
          {
            v27 = *(float32x2_t *)((char *)v25 - 12);
            v25 = (float32x2_t *)((char *)v25 - 12);
            v28 = v25[1].i32[0];
            *(float32x2_t *)((char *)v26 - 12) = v27;
            v26 = (float32x2_t *)((char *)v26 - 12);
            v26[1].i32[0] = v28;
          }
          while (v25 != __p);
          v25 = __p;
        }
        v8 = (float32x2_t *)((char *)v24 + 12);
        __p = v26;
        v52 = (float32x2_t *)&v23[12 * v22];
        if (v25)
          operator delete(v25);
      }
      else
      {
        *v8 = v15;
        v8[1].f32[0] = v12;
        v8 = (float32x2_t *)((char *)v8 + 12);
      }
      v51 = v8;
      v4 += 3;
      v10 = (uint64_t *)*v9;
      if ((uint64_t *)((char *)v4 - *v9) == (uint64_t *)4080)
      {
        v29 = (uint64_t *)v9[1];
        ++v9;
        v10 = v29;
        v4 = v29;
      }
      v11 = vadd_f32(v11, v15);
      v14 = v14 + v12;
    }
    while (v4 != *(uint64_t **)(a2 + 8));
    v30 = __p;
    if (v8 != __p)
    {
      *(float *)&a4 = (float)(0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)__p) >> 2));
      v31 = vdiv_f32(v11, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a4, 0));
      v32 = v14 / *(float *)&a4;
      v33 = a3 + 2;
      v34 = a3[1];
      do
      {
        v35 = vsub_f32(*v30, v31);
        v36 = v30[1].f32[0] - v32;
        if ((unint64_t)v34 >= *v33)
        {
          v37 = 0xAAAAAAAAAAAAAAABLL * (((char *)v34 - (char *)*a3) >> 2);
          v38 = v37 + 1;
          if (v37 + 1 > 0x1555555555555555)
            sub_100259694();
          if (0x5555555555555556 * ((uint64_t)(*v33 - (_QWORD)*a3) >> 2) > v38)
            v38 = 0x5555555555555556 * ((uint64_t)(*v33 - (_QWORD)*a3) >> 2);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v33 - (_QWORD)*a3) >> 2) >= 0xAAAAAAAAAAAAAAALL)
            v39 = 0x1555555555555555;
          else
            v39 = v38;
          if (v39)
            v40 = (char *)sub_100821B78((uint64_t)(a3 + 2), v39);
          else
            v40 = 0;
          v41 = (float32x2_t *)&v40[12 * v37];
          *v41 = v35;
          v41[1].f32[0] = v36;
          v43 = *a3;
          v42 = a3[1];
          v44 = v41;
          if (v42 != *a3)
          {
            do
            {
              v45 = *(float32x2_t *)((char *)v42 - 12);
              v42 = (float32x2_t *)((char *)v42 - 12);
              v46 = v42[1].i32[0];
              *(float32x2_t *)((char *)v44 - 12) = v45;
              v44 = (float32x2_t *)((char *)v44 - 12);
              v44[1].i32[0] = v46;
            }
            while (v42 != v43);
            v42 = *a3;
          }
          v34 = (float32x2_t *)((char *)v41 + 12);
          *a3 = v44;
          a3[1] = (float32x2_t *)((char *)v41 + 12);
          a3[2] = (float32x2_t *)&v40[12 * v39];
          if (v42)
            operator delete(v42);
        }
        else
        {
          *v34 = v35;
          v34[1].f32[0] = v36;
          v34 = (float32x2_t *)((char *)v34 + 12);
        }
        a3[1] = v34;
        v30 = (float32x2_t *)((char *)v30 + 12);
      }
      while (v30 != v8);
      v30 = __p;
    }
    v5 = v48;
    v4 = v49;
    if (v30)
      operator delete(v30);
  }
  return v4 != v5;
}

void sub_100818DE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_100818E10(float a1, float a2, float a3, float a4, float a5, float a6)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  float v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  float v20;
  float v21;
  double result;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  float v27;

  v6 = a6;
  v7 = a5;
  v8 = a4;
  v9 = a3;
  v10 = a2;
  v11 = a1;
  v12 = 0;
  v25 = a1;
  v26 = a2;
  v27 = a3;
  v13 = 0.0;
  do
  {
    v13 = v13 + (float)(*(float *)((char *)&v25 + v12) * *(float *)((char *)&v25 + v12));
    v12 += 4;
  }
  while (v12 != 12);
  if (sqrtf(v13) > 0.00000011921)
  {
    v14 = 0;
    v15 = 0.0;
    do
    {
      v15 = v15 + (float)(*(float *)((char *)&v25 + v14) * *(float *)((char *)&v25 + v14));
      v14 += 4;
    }
    while (v14 != 12);
    v16 = sqrtf(v15);
    v11 = v11 / v16;
    v10 = a2 / v16;
    v9 = a3 / v16;
  }
  v17 = 0;
  v25 = a4;
  v26 = a5;
  v18 = 0.0;
  v27 = a6;
  do
  {
    v18 = v18 + (float)(*(float *)((char *)&v25 + v17) * *(float *)((char *)&v25 + v17));
    v17 += 4;
  }
  while (v17 != 12);
  if (sqrtf(v18) > 0.00000011921)
  {
    v19 = 0;
    v20 = 0.0;
    do
    {
      v20 = v20 + (float)(*(float *)((char *)&v25 + v19) * *(float *)((char *)&v25 + v19));
      v19 += 4;
    }
    while (v19 != 12);
    v21 = sqrtf(v20);
    v8 = a4 / v21;
    v7 = a5 / v21;
    v6 = a6 / v21;
  }
  *(float *)&result = acosf(fmaxf(fminf((float)((float)(v9 * v6) + (float)(v10 * v7)) + (float)(v11 * v8), 1.0), -1.0));
  if (*(float *)&result < 0.7854)
  {
    v23 = 0;
    v25 = (float)(v10 * v6) - (float)(v9 * v7);
    v26 = (float)(v9 * v8) - (float)(v11 * v6);
    v27 = (float)(v11 * v7) - (float)(v10 * v8);
    v24 = 0.0;
    do
    {
      v24 = v24 + (float)(*(float *)((char *)&v25 + v23) * *(float *)((char *)&v25 + v23));
      v23 += 4;
    }
    while (v23 != 12);
    *(float *)&result = asinf(fmaxf(fminf(sqrtf(v24), 1.0), -1.0));
  }
  return result;
}

uint64_t sub_100818FD8(_QWORD *a1, double a2, uint64_t a3, double *a4, _DWORD *a5)
{
  double *v5;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  double *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t i;
  double v24;
  double v25;
  double v26;
  float *v27;

  v5 = (double *)a1[1];
  if (v5 == a4)
    return 0;
  v8 = (_QWORD *)*a1;
  v9 = (uint64_t)v5 - *(_QWORD *)*a1;
  v10 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 3);
  if (v9 < -23)
  {
    v15 = 168 - v10;
    v16 = 168 - v10;
    v12 = &v8[-((168 - v10) / 0xAA)];
    v13 = *v12;
    v14 = (double *)(*v12 + 24 * (170 * (v16 / 0xAA) - v15) + 4056);
  }
  else
  {
    v11 = v10 + 1;
    v12 = &v8[(v10 + 1) / 0xAA];
    v13 = *v12;
    v14 = (double *)(*v12 + 24 * (v11 % 0xAA));
  }
  if (v14 != a4)
  {
    while (*v14 <= a2)
    {
      v8 = v12;
      v5 = v14;
      v17 = (uint64_t)v14 - v13;
      v18 = 0xAAAAAAAAAAAAAAABLL * (v17 >> 3);
      if (v17 < -23)
      {
        v21 = 168 - v18;
        v22 = (168 - v18) / 0xAA;
        v12 = &v8[-v22];
        v13 = *v12;
        v14 = (double *)(*v12 + 24 * (170 * v22 - v21) + 4056);
      }
      else
      {
        v19 = v18 + 1;
        v20 = (v18 + 1) / 0xAA;
        v12 = &v8[v20];
        v13 = *v12;
        v14 = (double *)(*v12 + 24 * (v19 - 170 * v20));
      }
      if (v14 == a4)
        goto LABEL_18;
    }
    *a1 = v8;
    a1[1] = v5;
    if (*v5 <= a2 && *v14 > a2)
    {
      for (i = 0; i != 3; ++i)
      {
        v24 = *v5;
        v25 = *(float *)sub_100534E68((uint64_t)(v5 + 1), i);
        v26 = *v14;
        v27 = (float *)sub_100534E68((uint64_t)(v14 + 1), i);
        *(float *)&v24 = sub_1002446AC(v24, v25, v26, *v27, a2);
        *(_DWORD *)sub_100534E68((uint64_t)a5, i) = LODWORD(v24);
      }
      return 1;
    }
    return 0;
  }
LABEL_18:
  *a1 = v8;
  a1[1] = v5;
  *a5 = *((_DWORD *)v5 + 2);
  a5[1] = *((_DWORD *)v5 + 3);
  a5[2] = *((_DWORD *)v5 + 4);
  return 1;
}

uint64_t sub_10081920C(_QWORD *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  v6 = a1[2];
  v7 = a1[1];
  v8 = 170 * ((v6 - v7) >> 3) - 1;
  if (v6 == v7)
    v8 = 0;
  v9 = a1[5] + a1[4];
  if (v8 == v9)
  {
    sub_10082028C(a1);
    v7 = a1[1];
    v9 = a1[5] + a1[4];
  }
  v10 = *(_QWORD *)(v7 + 8 * (v9 / 0xAA)) + 24 * (v9 % 0xAA);
  v11 = *((_DWORD *)a3 + 2);
  v12 = *a3;
  *(_QWORD *)v10 = *a2;
  *(_QWORD *)(v10 + 8) = v12;
  *(_DWORD *)(v10 + 16) = v11;
  v13 = a1[4];
  v14 = a1[5] + 1;
  a1[5] = v14;
  v15 = v13 + v14;
  v16 = a1[1];
  v17 = (_QWORD *)(v16 + 8 * (v15 / 0xAA));
  v18 = *v17 + 24 * (v15 % 0xAA);
  if (a1[2] == v16)
    v18 = 0;
  if (v18 == *v17)
    v18 = *(v17 - 1) + 4080;
  return v18 - 24;
}

uint64_t sub_100819304(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  uint64_t v7;
  double v8;
  _QWORD v9[5];

  v2 = *a1;
  if (*a1 == -1.0)
    return 0;
  v3 = a1[1];
  if (v3 == -1.0)
    return 0;
  v4 = a1[2];
  if (v4 == -1.0)
    return 0;
  v5 = a1[3];
  if (v5 == -1.0)
    return 0;
  v7 = 0;
  v9[0] = 0xC0013D70A3D70A3DLL;
  *(double *)&v9[1] = v2 * 0.01287;
  *(double *)&v9[2] = v3 * 1.742;
  *(double *)&v9[3] = v4 * 0.08599;
  *(double *)&v9[4] = v5 * -0.007325;
  v8 = 0.0;
  do
    v8 = v8 + *(double *)&v9[v7++];
  while (v7 != 5);
  *a2 = v8;
  return 1;
}

__n128 sub_1008193C4(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __n128 result;
  __int128 v10;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 85 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1008205A0(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x55)) + 48 * (v7 % 0x55);
  result = *(__n128 *)a2;
  v10 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v8 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v8 + 32) = v10;
  *(__n128 *)v8 = result;
  ++a1[5];
  return result;
}

uint64_t sub_100819470(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 34 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1008208B4(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x22)) + 120 * (v7 % 0x22);
  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  *(_OWORD *)(v8 + 32) = a2[2];
  *(_OWORD *)(v8 + 48) = v11;
  *(_OWORD *)v8 = v9;
  *(_OWORD *)(v8 + 16) = v10;
  v12 = a2[4];
  v13 = a2[5];
  v14 = a2[6];
  *(_QWORD *)(v8 + 112) = *((_QWORD *)a2 + 14);
  *(_OWORD *)(v8 + 80) = v13;
  *(_OWORD *)(v8 + 96) = v14;
  *(_OWORD *)(v8 + 64) = v12;
  v15 = a1[4];
  v16 = a1[5] + 1;
  a1[5] = v16;
  v17 = v15 + v16;
  v18 = a1[1];
  v19 = (_QWORD *)(v18 + 8 * (v17 / 0x22));
  v20 = *v19 + 120 * (v17 % 0x22);
  if (a1[2] == v18)
    v20 = 0;
  if (v20 == *v19)
    v20 = *(v19 - 1) + 4080;
  return v20 - 120;
}

void sub_100819570(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t i;
  float v14;
  float v15;
  float *v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v7 = *(_QWORD **)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = v8 - **(_QWORD **)a1;
  v10 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 3);
  if (v9 < -3071)
    v11 = (unint64_t *)(v7[-((41 - v10) / 0xAA)] + 24 * (170 * ((41 - v10) / 0xAA) - (41 - v10)) + 4056);
  else
    v11 = (unint64_t *)(v7[(v10 + 128) / 0xAA] + 24 * ((v10 + 128) % 0xAA));
  v12 = 0;
  v18 = *v11;
  LODWORD(v19) = 0;
  while (v8 != *(_QWORD *)(a2 + 8))
  {
    for (i = 0; i != 3; ++i)
    {
      v14 = *(float *)sub_100534E68(v8 + 8, i);
      v15 = *(float *)(a3 + 4 * v12);
      v16 = (float *)sub_100534E68((uint64_t)&v18 + 8, i);
      *v16 = *v16 + (float)(v14 * v15);
    }
    v8 += 24;
    if (v8 - *v7 == 4080)
    {
      v17 = v7[1];
      ++v7;
      v8 = v17;
    }
    if (++v12 == 257)
    {
      *(_OWORD *)a4 = v18;
      *(_QWORD *)(a4 + 16) = v19;
      return;
    }
  }
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
}

float sub_1008196F4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  float v5;
  unint64_t v6;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  _WORD v11[8];
  uint8_t buf[1640];

  if (*(_QWORD *)(a1 + 16))
  {
    v4 = 0;
    v5 = 0.0;
    do
    {
      v5 = v5 + sub_100820BC8((_QWORD *)a1, a2, v4++);
      v6 = *(_QWORD *)(a1 + 16);
    }
    while (v4 < v6);
    if (v6)
      return v5 + *(float *)(a1 + 40);
  }
  else
  {
    v5 = 0.0;
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102155850);
  v8 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Assertion failed: this->fForestSize > 0, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMRandomForestXGBoostedRegression.h, line 49,fForestSize is 0.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102155850);
    v11[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: this->fForestSize > 0, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMRandomForestXGBoostedRegression.h, line 49,fForestSize is 0.", v11, 2);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 0, "float CMRandomForestXGBoostedRegression<22>::evaluateForest(const float (&)[NFeat]) const [NFeat = 22]", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  return v5 + *(float *)(a1 + 40);
}

uint64_t sub_1008198D4(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100820F2C(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  *(_OWORD *)(*(_QWORD *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  v8 = a1[4];
  v9 = a1[5] + 1;
  a1[5] = v9;
  v10 = v8 + v9;
  v11 = a1[1];
  v12 = (_QWORD *)(v11 + 8 * (v10 >> 8));
  v13 = *v12 + 16 * v10;
  if (a1[2] == v11)
    v13 = 0;
  if (v13 == *v12)
    v13 = *(v12 - 1) + 4096;
  return v13 - 16;
}

BOOL sub_100819990(uint64_t a1, _QWORD *a2)
{
  int *v4;
  unsigned __int8 v5;
  void *v6;
  void *v7;
  void *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  NSObject *v26;
  _BOOL8 result;
  const char *v28;
  uint8_t *v29;
  NSObject *v30;
  const char *v31;
  NSObject *v32;
  const char *v33;
  NSObject *v34;
  const char *v35;
  NSObject *v36;
  const char *v37;
  NSObject *v38;
  const char *v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  double v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  float v58;
  int v59;
  int v60;
  char v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  double v65;
  double v66;
  int v67;
  NSObject *v68;
  const char *v69;
  uint8_t *v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  int v80;
  unsigned __int8 v81;
  unsigned __int8 v82;
  unsigned __int8 v83;
  int v84;
  int v85;
  double v86[7];
  _QWORD v87[7];
  _DWORD v88[2];
  __int16 v89;
  double v90;
  __int16 v91;
  double v92;
  __int16 v93;
  double v94;
  __int16 v95;
  double v96;
  __int16 v97;
  double v98;
  __int16 v99;
  double v100;
  __int16 v101;
  int v102;
  __int16 v103;
  int v104;
  __int16 v105;
  int v106;
  __int16 v107;
  int v108;
  __int16 v109;
  int v110;
  __int16 v111;
  double v112;
  uint8_t buf[8];
  _BYTE v114[20];
  __int16 v115;
  _BYTE v116[10];
  double v117;
  __int16 v118;
  double v119;
  __int16 v120;
  double v121;
  __int16 v122;
  int v123;
  __int16 v124;
  int v125;
  __int16 v126;
  int v127;
  __int16 v128;
  int v129;
  __int16 v130;
  int v131;
  __int16 v132;
  double v133;

  if (a2[5] < 0x80uLL)
  {
    if (qword_10229FF30 != -1)
      dispatch_once(&qword_10229FF30, &stru_102155810);
    v26 = qword_10229FF38;
    if (os_log_type_enabled((os_log_t)qword_10229FF38, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "[FormController] Has not received enough DeviceMotion samples", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF30 != -1)
        dispatch_once(&qword_10229FF30, &stru_102155810);
      LOWORD(v88[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF38, 2, "[FormController] Has not received enough DeviceMotion samples", v88, 2);
      v29 = (uint8_t *)v28;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLRunning::FormModels::calculateGroundContactTime(const DeviceMotionQueue &)", "%s\n", v28);
      goto LABEL_57;
    }
  }
  else
  {
    v4 = (int *)(a1 + 2664);
    nullsub_34(a1 + 2615);
    sub_101125270((uint64_t)buf);
    v5 = v114[16];
    if (v114[16])
    {
      v7 = *(void **)buf;
      v6 = *(void **)v114;
      v8 = *(void **)&v114[8];
      if (objc_msgSend(*(id *)v114, "count"))
      {
        if (objc_msgSend(v8, "count"))
        {
          if (objc_msgSend(v7, "count"))
          {
            objc_msgSend(objc_msgSend(v7, "objectAtIndexedSubscript:", 0), "doubleValue");
            v10 = v9;
            objc_msgSend(objc_msgSend(v6, "objectAtIndexedSubscript:", 0), "doubleValue");
            v12 = v11;
            objc_msgSend(objc_msgSend(v8, "objectAtIndexedSubscript:", 0), "doubleValue");
            v13 = v12 * 0.119790152 + 0.838394225;
            v15 = v14 * 0.10670507 + 1.08953965;
            if (v13 < v15)
            {
              v87[0] = 0;
              v87[1] = 0x3F80000000000000;
              v16 = a2[4];
              v17 = a2[1];
              v18 = a2[2];
              v19 = (uint64_t *)(v17 + 8 * (v16 / 0x49));
              v20 = 56 * (v16 % 0x49);
              *(double *)&v87[5] = v13 + *(double *)(*v19 + v20 + 40);
              v87[6] = 0;
              v86[0] = 0.0;
              v86[1] = 0.0078125;
              v21 = *v19;
              v86[5] = v15 + *(double *)(*v19 + v20 + 40);
              v86[6] = 0.0;
              if (v18 == v17)
              {
                v22 = 0;
                v25 = 0;
                v24 = (_QWORD *)(v17
                               + (((unint64_t)(((a2[5] + v16) * (unsigned __int128)0x70381C0E070381C1uLL) >> 64) >> 2) & 0x1FFFFFFFFFFFFFF8));
              }
              else
              {
                v22 = v21 + 56 * (v16 % 0x49);
                v23 = a2[5] + v16;
                v24 = (_QWORD *)(v17 + 8 * (v23 / 0x49));
                v25 = *v24 + 56 * (v23 % 0x49);
              }
              LOBYTE(v88[0]) = 0;
              v40 = sub_100822688(v19, v22, v24, v25, (uint64_t)v87);
              v42 = v40;
              v43 = v41;
              v44 = a2[4] + a2[5];
              v45 = a2[1];
              v46 = (_QWORD *)(v45 + 8 * (v44 / 0x49));
              if (a2[2] == v45)
                v47 = 0;
              else
                v47 = *v46 + 56 * (v44 % 0x49);
              v48 = sub_100822780(v40, v41, v46, v47, (uint64_t)v86);
              v50 = v49;
              if (v43 == v49)
                goto LABEL_71;
              v51 = v48;
              v52 = 0.0;
              v53 = v42;
              v54 = v43;
              do
              {
                sub_101125400(v54, (uint64_t)buf);
                v54 += 56;
                if (v54 - *v53 == 4088)
                {
                  v55 = v53[1];
                  ++v53;
                  v54 = v55;
                }
                v52 = v52 + *(float *)&v116[6];
              }
              while (v54 != v50);
              v56 = 73 * (v51 - v42)
                  + 0x6DB6DB6DB6DB6DB7 * ((v50 - *v51) >> 3)
                  - 0x6DB6DB6DB6DB6DB7 * ((v43 - *v42) >> 3);
              if (!v56)
LABEL_71:
                v57 = 0.0;
              else
                v57 = v52 / (double)(unint64_t)v56;
              v59 = *v4;
              if (*v4 != 2)
              {
                if (v59 == 1)
                {
                  if (v57 > 0.0)
                    goto LABEL_76;
                  goto LABEL_81;
                }
                if (v59)
                {
                  v61 = 0;
                  v60 = 0;
                  goto LABEL_82;
                }
              }
              if (v57 < 0.0)
              {
LABEL_76:
                v60 = 2;
                v61 = 1;
LABEL_82:
                v58 = v10 * 0.0446596108 + 0.251163363;
                v72 = v58;
                v62 = a2[1];
                v63 = a2[4];
                v64 = a2[5];
                v65 = *(double *)(*(_QWORD *)(v62 + 8 * (v63 / 0x49)) + 56 * (v63 % 0x49) + 40);
                v73 = v13 + v65;
                v74 = v15 + v65;
                v75 = v13;
                v76 = v15;
                v66 = *(double *)(a1 + 448);
                v77 = v65 + v66;
                v78 = v66
                    + *(double *)(*(_QWORD *)(v62 + 8 * ((v63 + v64 - 1) / 0x49)) + 56 * ((v63 + v64 - 1) % 0x49) + 40);
                v79 = v57;
                v80 = v60;
                v81 = v5;
                v82 = v61;
                v83 = 1;
                v67 = *(_DWORD *)(a1 + 2668);
                v84 = v59;
                v85 = v67;
                sub_10081F094((_QWORD *)(a1 + 2616), (uint64_t)&v72);
                if (qword_10229FF30 != -1)
                  dispatch_once(&qword_10229FF30, &stru_102155810);
                v68 = qword_10229FF38;
                if (os_log_type_enabled((os_log_t)qword_10229FF38, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 67112192;
                  *(_DWORD *)&buf[4] = v81;
                  *(_WORD *)v114 = 2048;
                  *(double *)&v114[2] = v72;
                  *(_WORD *)&v114[10] = 2048;
                  *(double *)&v114[12] = v73;
                  v115 = 2048;
                  *(double *)v116 = v74;
                  *(_WORD *)&v116[8] = 2048;
                  v117 = v75;
                  v118 = 2048;
                  v119 = v76;
                  v120 = 2048;
                  v121 = v77;
                  v122 = 1024;
                  v123 = v80;
                  v124 = 1024;
                  v125 = v82;
                  v126 = 1024;
                  v127 = v83;
                  v128 = 1024;
                  v129 = v84;
                  v130 = 1024;
                  v131 = v85;
                  v132 = 2048;
                  v133 = v79;
                  _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEBUG, "[FormController] GCT Prediction,isSuccessful,%d,groundContactTime,%.2f,initialContactTime,%.2f,toeOffTime,%.2f,relativeInitialContactTime,%.2f,relativeToeOffTime,%.2f,windowStartTime,%.2f,stepSide,%d,isValidSide,%d,isValidToeOff,%d,wristOrientation,%d,crownOrientation,%d, meanRotationZ, %.2f", buf, 0x6Cu);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_10229FF30 != -1)
                    dispatch_once(&qword_10229FF30, &stru_102155810);
                  v88[0] = 67112192;
                  v88[1] = v81;
                  v89 = 2048;
                  v90 = v72;
                  v91 = 2048;
                  v92 = v73;
                  v93 = 2048;
                  v94 = v74;
                  v95 = 2048;
                  v96 = v75;
                  v97 = 2048;
                  v98 = v76;
                  v99 = 2048;
                  v100 = v77;
                  v101 = 1024;
                  v102 = v80;
                  v103 = 1024;
                  v104 = v82;
                  v105 = 1024;
                  v106 = v83;
                  v107 = 1024;
                  v108 = v84;
                  v109 = 1024;
                  v110 = v85;
                  v111 = 2048;
                  v112 = v79;
                  LODWORD(v71) = 108;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF38, 2, "[FormController] GCT Prediction,isSuccessful,%d,groundContactTime,%.2f,initialContactTime,%.2f,toeOffTime,%.2f,relativeInitialContactTime,%.2f,relativeToeOffTime,%.2f,windowStartTime,%.2f,stepSide,%d,isValidSide,%d,isValidToeOff,%d,wristOrientation,%d,crownOrientation,%d, meanRotationZ, %.2f", v88, v71, v72, v73, v74, v75, v76, LODWORD(v77), LODWORD(v78),
                    LODWORD(v79),
                    v80,
                    v84,
                    v86[0]);
                  v70 = (uint8_t *)v69;
                  sub_100512490("Generic", 1, 0, 2, "BOOL CLRunning::FormModels::calculateGroundContactTime(const DeviceMotionQueue &)", "%s\n", v69);
                  if (v70 != buf)
                    free(v70);
                }
                if (sub_10081CF04(a1))
                {
                  sub_10163B538((uint64_t)&v72, (uint64_t)buf);
                  if (qword_1023118A8 != -1)
                    dispatch_once(&qword_1023118A8, &stru_102155830);
                  if (qword_1023118B0)
                    operator new();
                  PB::Base::~Base((PB::Base *)buf);
                }
                return 1;
              }
LABEL_81:
              v61 = 1;
              v60 = 1;
              goto LABEL_82;
            }
            if (qword_10229FF30 != -1)
              dispatch_once(&qword_10229FF30, &stru_102155810);
            v38 = qword_10229FF38;
            if (os_log_type_enabled((os_log_t)qword_10229FF38, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "[FormController] Just rejected a step prediction, TO before IC prediction", buf, 2u);
            }
            result = sub_1001BFF7C(115, 2);
            if (result)
            {
              bzero(buf, 0x65CuLL);
              if (qword_10229FF30 != -1)
                dispatch_once(&qword_10229FF30, &stru_102155810);
              LOWORD(v88[0]) = 0;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF38, 2, "[FormController] Just rejected a step prediction, TO before IC prediction", v88, 2);
              v29 = (uint8_t *)v39;
              sub_100512490("Generic", 1, 0, 2, "BOOL CLRunning::FormModels::calculateGroundContactTime(const DeviceMotionQueue &)", "%s\n", v39);
LABEL_57:
              if (v29 != buf)
                free(v29);
              return 0;
            }
          }
          else
          {
            if (qword_10229FF30 != -1)
              dispatch_once(&qword_10229FF30, &stru_102155810);
            v36 = qword_10229FF38;
            if (os_log_type_enabled((os_log_t)qword_10229FF38, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "[FormController] Ground contact time prediction failed", buf, 2u);
            }
            result = sub_1001BFF7C(115, 2);
            if (result)
            {
              bzero(buf, 0x65CuLL);
              if (qword_10229FF30 != -1)
                dispatch_once(&qword_10229FF30, &stru_102155810);
              LOWORD(v88[0]) = 0;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF38, 2, "[FormController] Ground contact time prediction failed", v88, 2);
              v29 = (uint8_t *)v37;
              sub_100512490("Generic", 1, 0, 2, "BOOL CLRunning::FormModels::calculateGroundContactTime(const DeviceMotionQueue &)", "%s\n", v37);
              goto LABEL_57;
            }
          }
        }
        else
        {
          if (qword_10229FF30 != -1)
            dispatch_once(&qword_10229FF30, &stru_102155810);
          v34 = qword_10229FF38;
          if (os_log_type_enabled((os_log_t)qword_10229FF38, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "[FormController] Toe off prediction failed", buf, 2u);
          }
          result = sub_1001BFF7C(115, 2);
          if (result)
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FF30 != -1)
              dispatch_once(&qword_10229FF30, &stru_102155810);
            LOWORD(v88[0]) = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF38, 2, "[FormController] Toe off prediction failed", v88, 2);
            v29 = (uint8_t *)v35;
            sub_100512490("Generic", 1, 0, 2, "BOOL CLRunning::FormModels::calculateGroundContactTime(const DeviceMotionQueue &)", "%s\n", v35);
            goto LABEL_57;
          }
        }
      }
      else
      {
        if (qword_10229FF30 != -1)
          dispatch_once(&qword_10229FF30, &stru_102155810);
        v32 = qword_10229FF38;
        if (os_log_type_enabled((os_log_t)qword_10229FF38, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "[FormController] Initial contact prediction failed", buf, 2u);
        }
        result = sub_1001BFF7C(115, 2);
        if (result)
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FF30 != -1)
            dispatch_once(&qword_10229FF30, &stru_102155810);
          LOWORD(v88[0]) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF38, 2, "[FormController] Initial contact prediction failed", v88, 2);
          v29 = (uint8_t *)v33;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLRunning::FormModels::calculateGroundContactTime(const DeviceMotionQueue &)", "%s\n", v33);
          goto LABEL_57;
        }
      }
    }
    else
    {
      if (qword_10229FF30 != -1)
        dispatch_once(&qword_10229FF30, &stru_102155810);
      v30 = qword_10229FF38;
      if (os_log_type_enabled((os_log_t)qword_10229FF38, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "[FormController] GroundContactTime - Classification Failed!", buf, 2u);
      }
      result = sub_1001BFF7C(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FF30 != -1)
          dispatch_once(&qword_10229FF30, &stru_102155810);
        LOWORD(v88[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF38, 2, "[FormController] GroundContactTime - Classification Failed!", v88, 2);
        v29 = (uint8_t *)v31;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLRunning::FormModels::calculateGroundContactTime(const DeviceMotionQueue &)", "%s\n", v31);
        goto LABEL_57;
      }
    }
  }
  return result;
}

void sub_10081A7E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  PB::Base::~Base((PB::Base *)&a49);
  _Unwind_Resume(a1);
}

void sub_10081A820(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  double v7;
  int v8;
  double v9;
  double v10;
  NSObject *v11;
  double v12;
  const char *v13;
  NSObject *v14;
  double v15;
  unint64_t v16;
  NSObject *v17;
  uint8_t *v18;
  uint64_t v19;
  unint64_t v20;
  const char *v21;
  uint8_t *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  __int16 v26;
  double v27;
  __int16 v28;
  int v29;
  __int16 v30;
  unint64_t v31;
  uint8_t buf[4];
  double v33;
  __int16 v34;
  double v35;
  __int16 v36;
  int v37;
  __int16 v38;
  unint64_t v39;

  v4 = *a2;
  v5 = a2[1];
  if (*a2 == v5)
  {
    v6 = 0;
LABEL_19:
    v12 = 0.0;
    goto LABEL_20;
  }
  v6 = 0;
  v7 = 0.0;
  do
  {
    v8 = *(_DWORD *)(v4 + 64);
    if (v8 >= 1)
    {
      v9 = *(double *)(v4 + 48) - *(double *)(v4 + 8);
      if (v9 > 0.0 && (double)*(int *)(v4 + 112) * 5.12 / v9 >= 0.5)
      {
        v7 = v7 + *(double *)(v4 + 56) / (double)v8 - *(double *)(v4 + 104);
        ++v6;
      }
    }
    v4 += 120;
  }
  while (v4 != v5);
  if (v6 <= 0)
    goto LABEL_19;
  v10 = v7 / (double)v6;
  if (v10 <= 2.0)
  {
    if (v10 >= -2.0)
    {
      v12 = v7 / (double)v6;
      goto LABEL_20;
    }
    if (qword_10229FF30 != -1)
      dispatch_once(&qword_10229FF30, &stru_102155810);
    v17 = qword_10229FF38;
    if (os_log_type_enabled((os_log_t)qword_10229FF38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      v33 = v10;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "[FormModels] StrideLength: Below min bias offset (%.2f)", buf, 0xCu);
    }
    v12 = -2.0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF30 != -1)
        dispatch_once(&qword_10229FF30, &stru_102155810);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF38, 16, "[FormModels] StrideLength: Below min bias offset (%.2f)");
      goto LABEL_35;
    }
  }
  else
  {
    if (qword_10229FF30 != -1)
      dispatch_once(&qword_10229FF30, &stru_102155810);
    v11 = qword_10229FF38;
    if (os_log_type_enabled((os_log_t)qword_10229FF38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      v33 = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "[FormModels] StrideLength: Above max bias offset (%.2f)", buf, 0xCu);
    }
    v12 = 2.0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF30 != -1)
        dispatch_once(&qword_10229FF30, &stru_102155810);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF38, 16, "[FormModels] StrideLength: Above max bias offset (%.2f)");
LABEL_35:
      v18 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 0, "void CLRunning::FormModels::feedCalibrationTracks(const std::vector<CLStrideCalEntry> &)", "%s\n", v13);
      if (v18 != buf)
        free(v18);
    }
  }
LABEL_20:
  if (qword_10229FF30 != -1)
    dispatch_once(&qword_10229FF30, &stru_102155810);
  v14 = qword_10229FF38;
  if (os_log_type_enabled((os_log_t)qword_10229FF38, OS_LOG_TYPE_DEBUG))
  {
    v15 = *(double *)(a1 + 2592);
    v16 = 0xEEEEEEEEEEEEEEEFLL * ((a2[1] - *a2) >> 3);
    *(_DWORD *)buf = 134218752;
    v33 = v15;
    v34 = 2048;
    v35 = v12;
    v36 = 1026;
    v37 = v6;
    v38 = 2050;
    v39 = v16;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "[FormModels] StrideLengthCalibration,prevStrideLengthBiasOffset,%.2f,newStrideLengthBiasOffset,%.2f,validCalibrationsCount,%{public}d,totalCalibrationTracks,%{public}lu,", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF30 != -1)
      dispatch_once(&qword_10229FF30, &stru_102155810);
    v19 = *(_QWORD *)(a1 + 2592);
    v20 = 0xEEEEEEEEEEEEEEEFLL * ((a2[1] - *a2) >> 3);
    v24 = 134218752;
    v25 = v19;
    v26 = 2048;
    v27 = v12;
    v28 = 1026;
    v29 = v6;
    v30 = 2050;
    v31 = v20;
    LODWORD(v23) = 38;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF38, 2, "[FormModels] StrideLengthCalibration,prevStrideLengthBiasOffset,%.2f,newStrideLengthBiasOffset,%.2f,validCalibrationsCount,%{public}d,totalCalibrationTracks,%{public}lu,", &v24, v23);
    v22 = (uint8_t *)v21;
    sub_100512490("Generic", 1, 0, 2, "void CLRunning::FormModels::feedCalibrationTracks(const std::vector<CLStrideCalEntry> &)", "%s\n", v21);
    if (v22 != buf)
      free(v22);
  }
  *(double *)(a1 + 2592) = v12;
}

void sub_10081AD44(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  double *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  double v39;
  NSObject *v40;
  const char *v41;
  uint8_t *v42;
  __int128 v43;
  double v44;
  int v45;
  double v46;
  double v47;
  int v48;
  double v49;
  uint8_t buf[4];
  double v51;

  v5 = a2[5];
  if (v5)
  {
    v47 = a4 + -3.1225;
    v46 = a4 + -3.1225 + -5.12;
    v8 = a2[4];
    v9 = a2[1];
    if (a2[2] == v9)
    {
      v10 = 0;
      v13 = 0;
      v12 = (_QWORD *)(v9 + 8 * ((v8 + v5) / 0x17));
    }
    else
    {
      v10 = *(_QWORD *)(v9 + 8 * (v8 / 0x17)) + 176 * (v8 % 0x17);
      v11 = v8 + v5;
      v12 = (_QWORD *)(v9 + 8 * (v11 / 0x17));
      v13 = *v12 + 176 * (v11 % 0x17);
    }
    LOBYTE(v43) = 0;
    v14 = sub_100821A80((_QWORD *)(v9 + 8 * (v8 / 0x17)), v10, v12, v13, &v46);
    v16 = v14;
    v17 = v15;
    v18 = a2[4] + a2[5];
    v19 = a2[1];
    v20 = (_QWORD *)(v19 + 8 * (v18 / 0x17));
    if (a2[2] == v19)
      v21 = 0;
    else
      v21 = *v20 + 176 * (v18 % 0x17);
    LOBYTE(v43) = 0;
    v22 = sub_100821A80(v14, v15, v20, v21, &v47);
    v24 = v23;
    v25 = a2[4];
    v26 = a2[1];
    v27 = a2[2];
    v28 = (_QWORD *)(v26 + 8 * (v25 / 0x17));
    if (v27 == v26)
      v29 = 0;
    else
      v29 = *v28 + 176 * (v25 % 0x17);
    if (v29 == v24)
    {
      v33 = &v47;
    }
    else
    {
      v30 = v24 - *v22;
      v31 = 0x2E8BA2E8BA2E8BA3 * (v30 >> 4);
      if (v30 < 177)
        v32 = v22[-((23 - v31) / 0x17uLL)] + 176 * (23 * ((23 - v31) / 0x17uLL) - (23 - v31)) + 3872;
      else
        v32 = v22[(v31 - 1) / 0x17uLL] + 176 * ((v31 - 1) % 0x17uLL);
      v33 = (double *)(v32 + 8);
    }
    if (v27 == v26)
      v34 = 0;
    else
      v34 = *v28 + 176 * (v25 % 0x17);
    v35 = *(_QWORD *)v33;
    sub_10081B288(a1, v28, v34, v16, v17, v22, v24, (_QWORD *)(a1 + 248), (uint64_t)&v43);
    if ((v45 - 1) < 2)
    {
      v37 = a2[5] + a2[4] - 1;
      v38 = *(_QWORD *)(a2[1] + 8 * (v37 / 0x17)) + 176 * (v37 % 0x17);
      if (sub_100D7B854(*(double *)(v38 + 80), *(double *)(v38 + 72), *(float *)(a1 + 2536)))
        v36 = 1;
      else
        v36 = 3;
    }
    else if (v45 == 3)
    {
      v36 = 2;
    }
    else if (v45 == 4)
    {
      v36 = 512;
    }
    else
    {
      v36 = 0;
    }
    v39 = sub_100C5CFAC(v44, 0.001);
    if (v39 < 0.0 || v39 > 0.25)
    {
      if (qword_10229FF30 != -1)
        dispatch_once(&qword_10229FF30, &stru_102155810);
      v40 = qword_10229FF38;
      if (os_log_type_enabled((os_log_t)qword_10229FF38, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        v51 = v39;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_INFO, "[FormModels] #warning: VerticalOscillation value out of range (%.2f)", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FF30 != -1)
          dispatch_once(&qword_10229FF30, &stru_102155810);
        v48 = 134217984;
        v49 = v39;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF38, 1, "[FormModels] #warning: VerticalOscillation value out of range (%.2f)", COERCE_DOUBLE(&v48));
        v42 = (uint8_t *)v41;
        sub_100512490("Generic", 1, 0, 2, "VerticalOscillationHKResult CLRunning::FormModels::aggregatedVerticalOscillationInWindow(const StepQueue &, CFAbsoluteTime) const", "%s\n", v41);
        if (v42 != buf)
          free(v42);
      }
      v36 |= 8u;
    }
    *(_DWORD *)a3 = v36;
    *(double *)(a3 + 8) = v39;
    *(_OWORD *)(a3 + 16) = v43;
    *(_QWORD *)(a3 + 32) = v35;
  }
  else
  {
    *(_DWORD *)a3 = 32;
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
  }
}

void sub_10081B288(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, unint64_t a5@<X4>, uint64_t *a6@<X5>, unint64_t a7@<X6>, _QWORD *a8@<X7>, uint64_t a9@<X8>)
{
  unint64_t v11;
  uint64_t *v12;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  NSObject *v20;
  NSObject *v21;
  int v22;
  int v23;
  unint64_t v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  double v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  double v38;
  uint64_t v39;
  double *v40;
  _QWORD *v41;
  double *v42;
  uint64_t v43;
  double v44;
  double *v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  const char *v50;
  uint8_t *v51;
  const char *v52;
  uint8_t *v53;
  char v55;
  BOOL v56;
  _WORD v58[8];
  uint8_t buf[1632];

  v11 = a5;
  v12 = a4;
  if (a4 < a6 || a4 == a6 && a5 < a7)
  {
    if (a8[5])
    {
      *(_QWORD *)a9 = 0;
      *(_QWORD *)(a9 + 8) = 0;
      *(_QWORD *)(a9 + 16) = 0;
      *(_DWORD *)(a9 + 24) = 2;
      v16 = a8[4];
      v17 = a8[1];
      v18 = (_QWORD *)(v17 + 8 * (v16 >> 8));
      if (a8[2] == v17)
        v19 = 0;
      else
        v19 = *v18 + 16 * v16;
      if (a5 == a7)
      {
        v48 = a9;
        *(_QWORD *)a9 = 0;
        *(_QWORD *)(a9 + 8) = 0;
LABEL_53:
        v49 = 3;
LABEL_54:
        *(_DWORD *)(v48 + 24) = v49;
        return;
      }
      v22 = 0;
      v23 = 0;
      v24 = *a4;
      v55 = 1;
      v56 = 0;
      v25 = 0.0;
      v26 = 0.0;
      v27 = 0.0;
      do
      {
        if (v11 != a3)
        {
          v28 = v11 - v24;
          v29 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v11 - v24) >> 4);
          if (v28 < -175)
          {
            v33 = 21 - v29;
            v31 = &v12[-(v33 / 0x17)];
            v32 = *v31 + 176 * (23 * (v33 / 0x17) - v33) + 3872;
          }
          else
          {
            v30 = v29 + 1;
            v31 = &v12[v30 / 0x17];
            v32 = *v31 + 176 * (v30 % 0x17);
          }
          v26 = sub_10081C1B4(a2, a3, v31, v32);
          v34 = *(double *)(v11 + 72);
          v25 = v25 + v34;
          ++v22;
          v56 = (*(_BYTE *)(v11 + 152) & 0xFD) == 1;
          v35 = sub_100D7B854(v26, v34, *(float *)(a1 + 2536));
          v24 = *v12;
          if (v35)
          {
            v36 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v11 - v24) >> 4);
            if ((uint64_t)(v11 - v24) < 177)
              v37 = v12[-((23 - v36) / 0x17uLL)] + 176 * (23 * ((23 - v36) / 0x17uLL) - (23 - v36)) + 3872;
            else
              v37 = v12[(v36 - 1) / 0x17uLL] + 176 * ((v36 - 1) % 0x17uLL);
            v38 = *(double *)(v37 + 8);
            v39 = a8[1];
            v40 = (double *)v19;
            v41 = v18;
LABEL_31:
            v42 = v40;
            while (1)
            {
              v43 = a8[2] == v39
                  ? 0
                  : *(_QWORD *)(v39 + 8 * ((a8[5] + a8[4]) >> 8))
                  + 16 * (*((_BYTE *)a8 + 40) + *((_BYTE *)a8 + 32));
              if (v42 == (double *)v43)
                break;
              v44 = *v42 + *(double *)(a1 + 448);
              if (v44 >= v38 && v44 < *(double *)(v11 + 8))
              {
                v27 = v27 + v42[1];
                ++v23;
                v19 = (uint64_t)v40;
                v18 = v41;
              }
              v42 += 2;
              v40 += 2;
              if ((double *)(*v41 + 4096) == v40)
              {
                v46 = (double *)v41[1];
                ++v41;
                v40 = v46;
                goto LABEL_31;
              }
            }
            v55 = 0;
          }
        }
        v11 += 176;
        if (v11 - v24 == 4048)
        {
          v47 = v12[1];
          ++v12;
          v24 = v47;
          v11 = v47;
        }
      }
      while (v11 != a7);
      v48 = a9;
      *(double *)a9 = v26;
      if (v22 <= 0)
        *(_QWORD *)(a9 + 8) = 0;
      else
        *(double *)(a9 + 8) = v25 / (double)v22;
      if ((v55 & 1) != 0)
        goto LABEL_53;
      if (v23 <= 0)
      {
        v49 = 2;
        goto LABEL_54;
      }
      if (v56)
      {
        v49 = 4;
        goto LABEL_54;
      }
      *(double *)(a9 + 16) = v27 / (double)v23;
      *(_DWORD *)(a9 + 24) = 0;
    }
    else
    {
      if (qword_10229FF30 != -1)
        dispatch_once(&qword_10229FF30, &stru_102155810);
      v20 = qword_10229FF38;
      if (os_log_type_enabled((os_log_t)qword_10229FF38, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "[FormModels] computeMeanBetween - Not enough metrics in window", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FF30 != -1)
          dispatch_once(&qword_10229FF30, &stru_102155810);
        v58[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF38, 1, "[FormModels] computeMeanBetween - Not enough metrics in window", v58, 2);
        v51 = (uint8_t *)v50;
        sub_100512490("Generic", 1, 0, 2, "FormModels::StepRangeAggregationResult CLRunning::FormModels::stepRangeMean(StepQueue::const_iterator, StepQueue::const_iterator, StepQueue::const_iterator, const deque<Timeseries> &) const", "%s\n", v50);
        if (v51 != buf)
          free(v51);
      }
      *(_QWORD *)a9 = 0;
      *(_QWORD *)(a9 + 8) = 0;
      *(_QWORD *)(a9 + 16) = 0;
      *(_DWORD *)(a9 + 24) = 2;
    }
  }
  else
  {
    if (qword_10229FF30 != -1)
      dispatch_once(&qword_10229FF30, &stru_102155810);
    v21 = qword_10229FF38;
    if (os_log_type_enabled((os_log_t)qword_10229FF38, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "[FormModels] computeMeanBetween - Invalid pedometer range", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF30 != -1)
        dispatch_once(&qword_10229FF30, &stru_102155810);
      v58[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF38, 1, "[FormModels] computeMeanBetween - Invalid pedometer range", v58, 2);
      v53 = (uint8_t *)v52;
      sub_100512490("Generic", 1, 0, 2, "FormModels::StepRangeAggregationResult CLRunning::FormModels::stepRangeMean(StepQueue::const_iterator, StepQueue::const_iterator, StepQueue::const_iterator, const deque<Timeseries> &) const", "%s\n", v52);
      if (v53 != buf)
        free(v53);
    }
    *(_QWORD *)a9 = 0;
    *(_QWORD *)(a9 + 8) = 0;
    *(_QWORD *)(a9 + 16) = 0;
    *(_DWORD *)(a9 + 24) = 1;
  }
}

void sub_10081B8F8(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  double *v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  double v37;
  double v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  double v62;
  double v63;
  uint64_t v64;
  double v65;
  double v66;
  int v67;
  int v68;
  double v69;
  uint64_t v70;
  int v71;
  int v72;
  BOOL v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  int v80;
  uint64_t v81;
  NSObject *v82;
  const char *v83;
  uint8_t *v84;
  uint64_t v85;
  __int128 v87;
  uint64_t v88;
  double v90;
  double v92;
  double v93;
  uint8_t buf[16];
  __int128 v95;
  double v96;
  uint64_t v97;
  double v98;
  __int128 v99;
  double v100;
  double v101;
  __int128 v102;
  uint64_t v103;
  int v104;
  char v105;
  _OWORD v106[2];
  __int128 v107;
  __int128 v108;

  v4 = a2[5];
  if (!v4)
  {
    *(_DWORD *)a3 = 32;
    *(_QWORD *)(a3 + 48) = 0;
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_BYTE *)(a3 + 40) = 0;
    return;
  }
  v93 = a4;
  v92 = a4 + -5.12;
  v5 = a2[4];
  v6 = a2[1];
  if (a2[2] == v6)
  {
    v7 = 0;
    v11 = 0;
    v12 = ((v5 + v4) * (unsigned __int128)0x642C8590B21642C9uLL) >> 64;
    v10 = (_QWORD *)(v6 + 8 * ((v12 + ((v5 + v4 - v12) >> 1)) >> 4));
  }
  else
  {
    v7 = *(_QWORD *)(v6 + 8 * (v5 / 0x17)) + 176 * (v5 % 0x17);
    v8 = ((v5 + v4) * (unsigned __int128)0x642C8590B21642C9uLL) >> 64;
    v9 = (v8 + ((v5 + v4 - v8) >> 1)) >> 4;
    v10 = (_QWORD *)(v6 + 8 * v9);
    v11 = *v10 + 176 * (v5 + v4 - 23 * v9);
  }
  LOBYTE(v106[0]) = 0;
  v13 = sub_100821A80((_QWORD *)(v6 + 8 * (v5 / 0x17)), v7, v10, v11, &v92);
  v15 = v13;
  v16 = v14;
  v17 = a2[4] + a2[5];
  v18 = a2[1];
  v19 = (_QWORD *)(v18 + 8 * (v17 / 0x17));
  if (a2[2] == v18)
    v20 = 0;
  else
    v20 = *v19 + 176 * (v17 % 0x17);
  LOBYTE(v106[0]) = 0;
  v21 = sub_100821A80(v13, v14, v19, v20, &v93);
  v88 = v22;
  v23 = a2;
  v24 = a2[1];
  if (a2[2] == v24)
    v25 = 0;
  else
    v25 = *(_QWORD *)(v24 + 8 * (a2[4] / 0x17uLL)) + 176 * (a2[4] % 0x17uLL);
  if (v25 == v22)
  {
    v29 = &v93;
    v30 = v15;
  }
  else
  {
    v26 = v22 - *v21;
    v27 = 0x2E8BA2E8BA2E8BA3 * (v26 >> 4);
    if (v26 < 177)
      v28 = v21[-((23 - v27) / 0x17uLL)] + 176 * (23 * ((23 - v27) / 0x17uLL) - (23 - v27)) + 3872;
    else
      v28 = v21[(v27 - 1) / 0x17uLL] + 176 * ((v27 - 1) % 0x17uLL);
    v30 = v15;
    v29 = (double *)(v28 + 8);
  }
  v31 = *(_QWORD *)v29;
  if (v16 != v22)
  {
    v85 = *(_QWORD *)v29;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36 = *v30;
    v37 = 0.0;
    __asm { FMOV            V0.2D, #-1.0 }
    v87 = _Q0;
    v43 = 0.0;
    v44 = 0.0;
    do
    {
      v45 = v16 - v36;
      v46 = 0x2E8BA2E8BA2E8BA3 * ((v16 - v36) >> 4);
      if (v45 < -175)
      {
        v50 = ((unint64_t)(21 - v46) * (unsigned __int128)0x642C8590B21642C9uLL) >> 64;
        v51 = (v50 + ((unint64_t)(21 - v46 - v50) >> 1)) >> 4;
        v49 = v30[-v51] + 176 * (v46 - 21 + 23 * v51) + 3872;
      }
      else
      {
        v47 = ((unint64_t)(v46 + 1) * (unsigned __int128)0x642C8590B21642C9uLL) >> 64;
        v48 = (v47 + ((unint64_t)(v46 + 1 - v47) >> 1)) >> 4;
        v49 = v30[v48] + 176 * (v46 + 1 - 23 * v48);
      }
      v52 = v23[4];
      v53 = v23[1];
      if (v23[2] == v53)
      {
        if (!v49)
          break;
        v55 = 0;
        v54 = (_QWORD *)(v53 + 8 * (v52 / 0x17));
      }
      else
      {
        if (v49 == *(_QWORD *)(v53 + 8 * ((v23[5] + v52) / 0x17)) + 176 * ((v23[5] + v52) % 0x17))
          break;
        v54 = (_QWORD *)(v53 + 8 * (v52 / 0x17));
        v55 = *v54 + 176 * (v52 % 0x17);
      }
      v90 = v37;
      if (v45 < -351)
      {
        v60 = 20 - v46;
        v57 = v30;
        v58 = &v30[-(v60 / 0x17)];
        v59 = *v58 + 176 * (23 * (v60 / 0x17) - v60) + 3872;
      }
      else
      {
        v56 = v46 + 2;
        v57 = v30;
        v58 = &v30[v56 / 0x17];
        v59 = *v58 + 176 * (v56 % 0x17);
      }
      v61 = *(_QWORD *)(v16 + 8);
      v62 = *(double *)(v16 + 72);
      v63 = sub_10081C1B4(v54, v55, v58, v59);
      v107 = 0u;
      v108 = 0u;
      memset(v106, 0, sizeof(v106));
      DWORD2(v107) = 1000;
      LODWORD(v108) = -1082130432;
      v64 = *(_QWORD *)(a1 + 2600);
      v65 = 0.0;
      v66 = 0.0;
      if (*(_BYTE *)(v64 + 80))
      {
        v67 = sub_10081C4FC((uint64_t)v106, (_QWORD *)v64, *(double *)(v16 + 8));
        v68 = v62 > 0.0 ? v67 : 0;
        if (v68 == 1)
          v66 = sub_100D7B970(1.0 / v62 * 2.23693991, *(double *)&v107 * 2.23693991);
      }
      if (*(_DWORD *)(v16 + 168) == 3 && v62 > 0.0)
      {
        v69 = 0.0;
        if (v63 > 0.0)
        {
          v69 = 1.0 / v62;
          v65 = 1.0 / v62 / v63 + 1.0 / v62 / v63;
        }
      }
      else
      {
        v69 = 0.0;
      }
      v70 = sub_100D7B800(v63, 1.0 / v69, *(float *)(a1 + 2536));
      v71 = v70;
      v72 = 0;
      v73 = v63 <= 0.0;
      if (v69 <= 0.0)
        v73 = 1;
      if (!v73 && v65 > 0.0)
      {
        if (v65 < 6.0)
          v72 = v70;
        else
          v72 = 0;
      }
      *(_OWORD *)buf = v87;
      v95 = v87;
      v102 = 0u;
      v97 = 0;
      v99 = 0u;
      v100 = v65;
      v101 = v69;
      v103 = v61;
      *(double *)&v102 = v63;
      v96 = v66;
      v98 = v65;
      v105 = v72;
      v104 = 1;
      sub_10081C768(v70, (uint64_t *)buf);
      if ((*(_BYTE *)(v16 + 152) & 0xFD) == 1)
        ++v34;
      v74 = -0.0;
      if (v72)
        v74 = v65;
      v16 += 176;
      v30 = v57;
      v36 = *v57;
      if (v16 - *v57 == 4048)
      {
        v30 = v57 + 1;
        v36 = v57[1];
        v16 = v36;
      }
      v23 = a2;
      v32 += v71 ^ 1;
      v43 = v43 + v63;
      v44 = v44 + v69;
      v35 += v72;
      v37 = v90 + v74;
      ++v33;
    }
    while (v16 != v88);
    if (v35)
      v75 = v37 / (double)v35;
    else
      v75 = 0.0;
    v31 = v85;
    if (v33)
    {
      v76 = v44 / (double)v33;
      if (v76 <= 0.0)
        v77 = 0.0;
      else
        v77 = 1.0 / v76;
      if (v35)
      {
        v78 = v43 / (double)v33;
        goto LABEL_66;
      }
    }
    else
    {
      v77 = 0.0;
      v78 = 0.0;
      if (v35)
      {
LABEL_66:
        v79 = 0.0;
        if (v32)
        {
          v80 = 10;
        }
        else if (v34)
        {
          v80 = 520;
        }
        else
        {
          v80 = 8;
          if (v75 > 0.0 && v75 <= 6.0)
          {
            v80 = 0;
            v79 = v75;
            v81 = a3;
LABEL_81:
            *(_DWORD *)v81 = v80;
            *(_QWORD *)(v81 + 8) = 0;
            *(double *)(v81 + 16) = v79;
            *(double *)(v81 + 24) = v78;
            *(double *)(v81 + 32) = v77;
            goto LABEL_82;
          }
          v79 = v75;
        }
        if (qword_10229FF30 != -1)
          dispatch_once(&qword_10229FF30, &stru_102155810);
        v82 = qword_10229FF38;
        if (os_log_type_enabled((os_log_t)qword_10229FF38, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134217984;
          *(double *)&buf[4] = v79;
          _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_INFO, "[FormModels] #warning: StrideLength value out of range (%.2f)", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FF30 != -1)
            dispatch_once(&qword_10229FF30, &stru_102155810);
          LODWORD(v106[0]) = 134217984;
          *(double *)((char *)v106 + 4) = v79;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF38, 1, "[FormModels] #warning: StrideLength value out of range (%.2f)", COERCE_DOUBLE(v106));
          v84 = (uint8_t *)v83;
          sub_100512490("Generic", 1, 0, 2, "StrideLengthHKResult CLRunning::FormModels::aggregatedStrideLengthInWindow(const StepQueue &, CFAbsoluteTime) const", "%s\n", v83);
          if (v84 != buf)
            free(v84);
        }
        v81 = a3;
        v31 = v85;
        goto LABEL_81;
      }
    }
  }
  v81 = a3;
  *(_DWORD *)a3 = 1;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
LABEL_82:
  *(_BYTE *)(v81 + 40) = 0;
  *(_QWORD *)(v81 + 48) = v31;
}

double sub_10081C1B4(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  double v4;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  double v11;
  unint64_t v12;
  double *v13;
  uint64_t v14;
  unint64_t v15;
  double v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  double v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  double v28;
  double v29;
  double v30;

  v4 = 0.0;
  if (a4 == a2)
    return v4;
  v8 = a4 - *a3;
  v9 = 0x2E8BA2E8BA2E8BA3 * (v8 >> 4);
  if (v9 + 23 * (a3 - a1) - 0x2E8BA2E8BA2E8BA3 * ((a2 - *a1) >> 4) < 4)
    return v4;
  v10 = v9 - 1;
  if (v8 <= 176)
  {
    v14 = ((unint64_t)(23 - v9) * (unsigned __int128)0x642C8590B21642C9uLL) >> 64;
    v15 = (v14 + ((unint64_t)(23 - v9 - v14) >> 1)) >> 4;
    v11 = *(double *)(a3[-v15] + 176 * (v9 - 23 + 23 * v15) + 3872);
    v12 = v9 - 3;
    goto LABEL_7;
  }
  v11 = *(double *)(a3[v10 / 0x17] + 176 * (v10 % 0x17));
  v12 = v9 - 3;
  if ((unint64_t)v8 < 0x211)
  {
LABEL_7:
    v13 = (double *)(a3[-((22 - v12) / 0x17)] + 176 * (23 * ((22 - v12) / 0x17) - (22 - v12)) + 3872);
    goto LABEL_8;
  }
  v13 = (double *)(a3[v12 / 0x17] + 176 * (v12 % 0x17));
LABEL_8:
  if (v11 - *v13 <= 10.24)
  {
    v16 = sub_10081CCD4(a1, a2, a3, a4);
    if (v8 < 177)
    {
      v19 = ((unint64_t)(23 - v9) * (unsigned __int128)0x642C8590B21642C9uLL) >> 64;
      v20 = (v19 + ((unint64_t)(23 - v9 - v19) >> 1)) >> 4;
      v17 = &a3[-v20];
      v18 = *v17 + 176 * (v9 - 23 + 23 * v20) + 3872;
    }
    else
    {
      v17 = &a3[v10 / 0x17];
      v18 = *v17 + 176 * (v10 % 0x17);
    }
    v21 = sub_10081CCD4(a1, a2, v17, v18);
    if (v8 < 353)
    {
      v26 = ((unint64_t)(24 - v9) * (unsigned __int128)0x642C8590B21642C9uLL) >> 64;
      v27 = (v26 + ((unint64_t)(24 - v9 - v26) >> 1)) >> 4;
      v24 = &a3[-v27];
      v25 = *v24 + 176 * (v9 - 24 + 23 * v27) + 3872;
    }
    else
    {
      v22 = ((unint64_t)(v9 - 2) * (unsigned __int128)0x642C8590B21642C9uLL) >> 64;
      v23 = (v22 + ((unint64_t)(v9 - 2 - v22) >> 1)) >> 4;
      v24 = &a3[v23];
      v25 = *v24 + 176 * (v9 - 2 - 23 * v23);
    }
    v28 = sub_10081CCD4(a1, a2, v24, v25);
    if (v16 > 0.0 && v21 > 0.0 && v28 > 0.0)
    {
      if (v16 >= v21)
        v29 = v21;
      else
        v29 = v16;
      if (v16 <= v21)
        v30 = v21;
      else
        v30 = v16;
      if (v30 < v28)
        v28 = v30;
      if (v29 <= v28)
        return v28;
      else
        return v29;
    }
  }
  return v4;
}

uint64_t sub_10081C4FC(uint64_t a1, _QWORD *a2, double a3)
{
  uint64_t v5;
  int v6;
  NSObject *v7;
  const char *v9;
  uint8_t *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;
  double v16;
  __int16 v17;
  int v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  uint8_t buf[4];
  double v26;
  __int16 v27;
  int v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;

  v5 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 24))(a2, a1);
  if ((v5 & 1) == 0)
  {
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    DWORD2(v13) = 1000;
    LODWORD(v14) = -1082130432;
    v6 = sub_10081CE94(a2, &v11);
    if (qword_10229FF30 != -1)
      dispatch_once(&qword_10229FF30, &stru_102155810);
    v7 = qword_10229FF38;
    if (os_log_type_enabled((os_log_t)qword_10229FF38, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134350080;
      v26 = a3;
      v27 = 1026;
      v28 = v6;
      v29 = 2050;
      v30 = *((_QWORD *)&v11 + 1);
      v31 = 1026;
      v32 = DWORD2(v12);
      v33 = 1026;
      v34 = DWORD2(v13);
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[FormController] #warning: Elevation lookup failed at t=%{public}.2f. lastEntry={exists,%{public}d,startTime,%{public}.2f,gradeType,%{public}d,source,%{public}d}", buf, 0x28u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF30 != -1)
        dispatch_once(&qword_10229FF30, &stru_102155810);
      v15 = 134350080;
      v16 = a3;
      v17 = 1026;
      v18 = v6;
      v19 = 2050;
      v20 = *((_QWORD *)&v11 + 1);
      v21 = 1026;
      v22 = DWORD2(v12);
      v23 = 1026;
      v24 = DWORD2(v13);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF38, 0, "[FormController] #warning: Elevation lookup failed at t=%{public}.2f. lastEntry={exists,%{public}d,startTime,%{public}.2f,gradeType,%{public}d,source,%{public}d}", &v15, 40);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "static BOOL CLRunning::FormModels::elevationLookup(CFAbsoluteTime, CLElevationChangeEntry &, const CLNatalieInput<CLElevationChangeEntry> &)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
  return v5;
}

void sub_10081C768(uint64_t a1, uint64_t *a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint8_t *v29;
  int v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  uint8_t buf[4];
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  uint64_t v67;
  __int16 v68;
  uint64_t v69;
  __int16 v70;
  uint64_t v71;
  __int16 v72;
  uint64_t v73;
  __int16 v74;
  uint64_t v75;
  __int16 v76;
  uint64_t v77;

  if (qword_10229FF30 != -1)
    dispatch_once(&qword_10229FF30, &stru_102155810);
  v3 = qword_10229FF38;
  if (os_log_type_enabled((os_log_t)qword_10229FF38, OS_LOG_TYPE_DEBUG))
  {
    v5 = a2[12];
    v4 = a2[13];
    v6 = *a2;
    v7 = a2[1];
    v8 = a2[2];
    v9 = a2[3];
    v10 = a2[7];
    v11 = a2[8];
    v12 = a2[4];
    v14 = a2[10];
    v13 = a2[11];
    v15 = a2[9];
    *(_DWORD *)buf = 134351872;
    v55 = v5;
    v56 = 2050;
    v57 = v4;
    v58 = 2048;
    v59 = v10;
    v60 = 2048;
    v61 = v6;
    v62 = 2048;
    v63 = v7;
    v64 = 2048;
    v65 = v8;
    v66 = 2048;
    v67 = v9;
    v68 = 2048;
    v69 = v15;
    v70 = 2048;
    v71 = v11;
    v72 = 2048;
    v73 = v12;
    v74 = 2048;
    v75 = v13;
    v76 = 2048;
    v77 = v14;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[FormModels] StrideLengthEvent,startTime,%{public}.2f,endTime,%{public}.2f,strideLengthFormBasedUncal,%.3f,heightCM,%.2f,horizontalAccelMagnitudeMeanSqrt,%.2f,rotationRateMagnitudeMin,%.2f,rotationRateGravityProjectionMax,%.2f,strideLengthSpeedBased,%.3f,strideLengthFormBasedCalibrated,%.3f,grade,%.2f,cadence,%.2f,speed,%.2f", buf, 0x7Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF30 != -1)
      dispatch_once(&qword_10229FF30, &stru_102155810);
    v17 = a2[12];
    v16 = a2[13];
    v18 = *a2;
    v19 = a2[1];
    v20 = a2[2];
    v21 = a2[3];
    v22 = a2[7];
    v23 = a2[8];
    v24 = a2[4];
    v25 = a2[10];
    v26 = a2[11];
    v27 = a2[9];
    v30 = 134351872;
    v31 = v17;
    v32 = 2050;
    v33 = v16;
    v34 = 2048;
    v35 = v22;
    v36 = 2048;
    v37 = v18;
    v38 = 2048;
    v39 = v19;
    v40 = 2048;
    v41 = v20;
    v42 = 2048;
    v43 = v21;
    v44 = 2048;
    v45 = v27;
    v46 = 2048;
    v47 = v23;
    v48 = 2048;
    v49 = v24;
    v50 = 2048;
    v51 = v26;
    v52 = 2048;
    v53 = v25;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF38, 2, "[FormModels] StrideLengthEvent,startTime,%{public}.2f,endTime,%{public}.2f,strideLengthFormBasedUncal,%.3f,heightCM,%.2f,horizontalAccelMagnitudeMeanSqrt,%.2f,rotationRateMagnitudeMin,%.2f,rotationRateGravityProjectionMax,%.2f,strideLengthSpeedBased,%.3f,strideLengthFormBasedCalibrated,%.3f,grade,%.2f,cadence,%.2f,speed,%.2f", &v30, 122);
    v29 = (uint8_t *)v28;
    sub_100512490("Generic", 1, 0, 2, "void CLRunning::FormModels::logStrideLengthResult(const StrideLengthResult &) const", "%s\n", v28);
    if (v29 != buf)
      free(v29);
  }
}

float sub_10081CA0C(uint64_t *a1, float32x2_t *a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v7;
  float32x2_t *v8;
  float v9;
  unint64_t i;
  int v11;
  int v12;
  int v13;
  __int128 v15;
  __int128 v16;
  int v17;
  _DWORD *v18;
  uint64_t v19;
  _OWORD v20[2];
  int v21;
  _DWORD v22[3];

  v17 = 0;
  v15 = 0u;
  v16 = 0u;
  v4 = *a1;
  if (a1[1] != *a1)
  {
    v7 = 0;
    do
    {
      v8 = (float32x2_t *)(v4 + 12 * v7);
      v9 = v8[1].f32[0] - a2[1].f32[0];
      v18 = (_DWORD *)vsub_f32(*v8, *a2);
      *(float *)&v19 = v9;
      sub_100821BBC((uint64_t)&v18, (uint64_t)v20);
      for (i = 0; i != 9; ++i)
        *((float *)&v15 + i) = sub_100821C40((uint64_t)v20, i) + *((float *)&v15 + i);
      ++v7;
      v4 = *a1;
    }
    while (v7 < 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2));
  }
  v20[0] = v15;
  v20[1] = v16;
  v21 = v17;
  sub_100821E18((uint64_t)v20, a3);
  v22[0] = v11;
  v22[1] = v12;
  v22[2] = v13;
  v18 = v22;
  v19 = a3;
  sub_1008223D8((uint64_t *)&v18, 0, 1uLL);
  sub_1008223D8((uint64_t *)&v18, 0, 2uLL);
  sub_1008223D8((uint64_t *)&v18, 1uLL, 2uLL);
  return *(float *)v22;
}

void sub_10081CB54(void *a1@<X8>, double a2@<D1>)
{
  double v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t i;
  float v14;
  double v15;
  double v16[257];
  double v17[257];

  v3 = a2 * 0.02;
  bzero(v17, 0x808uLL);
  bzero(v16, 0x808uLL);
  v4 = 0;
  v5 = 0.0;
  v6 = 0.0;
  do
  {
    v7 = (float)((float)(cosf((float)(int)v4 * 0.024544) * -0.46) + 0.54);
    v8 = (double)((int)v4 - 128);
    sub_1011A3268(v15 * v8);
    v10 = v9 * v7;
    v17[v4] = v10;
    v6 = v6 + v10;
    sub_1011A3268(v3 * v8);
    v12 = v11 * v7;
    v16[v4] = v12;
    v5 = v5 + v12;
    ++v4;
  }
  while (v4 != 257);
  bzero(a1, 0x404uLL);
  for (i = 0; i != 257; ++i)
  {
    v14 = v16[i] / v5 - v17[i] / v6;
    *((float *)a1 + i) = v14;
  }
}

double sub_10081CCD4(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  double result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  double v15;

  result = 0.0;
  if (a4 != a2)
  {
    v5 = a4 - *a3;
    v6 = 0x2E8BA2E8BA2E8BA3 * (v5 >> 4);
    if (v6 + 23 * (a3 - a1) - 0x2E8BA2E8BA2E8BA3 * ((a2 - *a1) >> 4) >= 2)
    {
      if (v5 < 177)
      {
        v11 = 23 - v6;
        v8 = &a3[-(v11 / 0x17)];
        v9 = *v8;
        v10 = *v8 + 176 * (23 * (v11 / 0x17) - v11) + 3872;
      }
      else
      {
        v7 = v6 - 1;
        v8 = &a3[v7 / 0x17];
        v9 = *v8;
        v10 = *v8 + 176 * (v7 % 0x17);
      }
      v12 = v10 - v9;
      v13 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v10 - v9) >> 4);
      if (v12 < 177)
        v14 = v8[-((23 - v13) / 0x17uLL)] + 176 * (23 * ((23 - v13) / 0x17uLL) - (23 - v13)) + 3872;
      else
        v14 = v8[(v13 - 1) / 0x17uLL] + 176 * ((v13 - 1) % 0x17uLL);
      v15 = *(double *)(v10 + 88) - *(double *)(v14 + 88);
      if (v15 > 0.0)
        return (double)(*(_DWORD *)(v10 + 24) - *(_DWORD *)(v14 + 24)) / v15;
    }
  }
  return result;
}

uint64_t sub_10081CE94(_QWORD *a1, _OWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v2 = a1[4];
  if (a1[5] == v2)
    return 0;
  v3 = a1[7] + a1[8];
  v4 = (_QWORD *)(v2 + 8 * (v3 >> 6));
  v5 = v3 & 0x3F;
  v6 = *v4 + (v5 << 6);
  if (v6 == *(_QWORD *)(v2 + ((a1[7] >> 3) & 0x1FFFFFFFFFFFFFF8)) + ((a1[7] & 0x3FLL) << 6))
    return 0;
  if (!v5)
    v6 = *(v4 - 1) + 4096;
  v7 = *(_OWORD *)(v6 - 64);
  v8 = *(_OWORD *)(v6 - 48);
  v9 = *(_OWORD *)(v6 - 16);
  a2[2] = *(_OWORD *)(v6 - 32);
  a2[3] = v9;
  *a2 = v7;
  a2[1] = v8;
  return 1;
}

uint64_t sub_10081CF04(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v7;
  std::__shared_weak_count *v8;

  if (!*(_BYTE *)(a1 + 2613))
  {
    v2 = sub_100127B9C();
    sub_100081C10(v2, &v7);
    sub_1001E4874(v7, "MotionLoggerLogGaitEvents", (BOOL *)(a1 + 2614));
    v3 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    *(_BYTE *)(a1 + 2613) = 1;
  }
  return *(unsigned __int8 *)(a1 + 2614);
}

void sub_10081CF98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10081CFAC(uint64_t result, uint64_t a2, _DWORD *a3, _QWORD *a4)
{
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;

  v5 = *(_DWORD *)(a2 + 24);
  if ((v5 - 1) < 2)
  {
    *a3 |= 1u;
    v7 = a4[5] + a4[4] - 1;
    v8 = *(_QWORD *)(a4[1] + 8 * (v7 / 0x17)) + 176 * (v7 % 0x17);
    result = sub_100D7B854(*(double *)(v8 + 80), *(double *)(v8 + 72), *(float *)(result + 2536));
    if ((result & 1) != 0)
      return result;
  }
  else if (v5 != 3)
  {
    if (v5 != 4)
      return result;
    v6 = 512;
    goto LABEL_7;
  }
  v6 = 2;
LABEL_7:
  *a3 |= v6;
  return result;
}

uint64_t sub_10081D064@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v5;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  NSObject *v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  int v61;
  double v62;
  double v64;
  NSObject *v65;
  __int128 v66;
  __int128 v67;
  const char *v68;
  uint8_t *v69;
  const char *v70;
  uint8_t *v71;
  char v72[8];
  double v73;
  double v74;
  _QWORD v75[2];
  double v76;
  _OWORD v77[2];
  __int128 v78;
  _OWORD v79[2];
  __int128 v80;
  __int128 v81;
  __int128 v82;
  _BYTE v83[32];
  __int128 v84;
  double v85;
  double v86;
  _DWORD v87[2];
  __int16 v88;
  double v89;
  __int16 v90;
  double v91;
  __int16 v92;
  double v93;
  __int16 v94;
  double v95;
  __int16 v96;
  double v97;
  uint8_t buf[4];
  int v99;
  __int16 v100;
  double v101;
  __int16 v102;
  double v103;
  __int16 v104;
  double v105;
  __int16 v106;
  double v107;
  __int16 v108;
  double v109;

  v5 = a2[5];
  if (v5)
  {
    v7 = (_QWORD *)result;
    v86 = a4;
    v85 = a4 + -5.12;
    v8 = a2[4];
    v9 = a2[1];
    if (a2[2] == v9)
    {
      v10 = 0;
      v13 = 0;
      v12 = (_QWORD *)(v9 + 8 * ((v8 + v5) / 0x17));
    }
    else
    {
      v10 = *(_QWORD *)(v9 + 8 * (v8 / 0x17)) + 176 * (v8 % 0x17);
      v11 = v8 + v5;
      v12 = (_QWORD *)(v9 + 8 * (v11 / 0x17));
      v13 = *v12 + 176 * (v11 % 0x17);
    }
    LOBYTE(v81) = 0;
    v14 = sub_100821A80((_QWORD *)(v9 + 8 * (v8 / 0x17)), v10, v12, v13, &v85);
    v16 = v14;
    v17 = v15;
    v18 = a2[4] + a2[5];
    v19 = a2[1];
    v20 = (_QWORD *)(v19 + 8 * (v18 / 0x17));
    if (a2[2] == v19)
      v21 = 0;
    else
      v21 = *v20 + 176 * (v18 % 0x17);
    LOBYTE(v81) = 0;
    v22 = sub_100821A80(v14, v15, v20, v21, &v86);
    v24 = v23 - *v22;
    v25 = 0x2E8BA2E8BA2E8BA3 * (v24 >> 4);
    if (v24 < -175)
    {
      v29 = 21 - v25;
      v27 = &v22[-(v29 / 0x17)];
      v28 = *v27 + 176 * (23 * (v29 / 0x17) - v29) + 3872;
    }
    else
    {
      v26 = v25 + 1;
      v27 = &v22[v26 / 0x17];
      v28 = *v27 + 176 * (v26 % 0x17);
    }
    v82 = 0u;
    memset(v83, 0, 28);
    v80 = 0u;
    v81 = 0u;
    v84 = 0uLL;
    memset(v79, 0, sizeof(v79));
    v78 = 0u;
    memset(v77, 0, sizeof(v77));
    v30 = v7[328];
    v31 = v7[331];
    v32 = (_QWORD *)(v30 + 8 * (v31 / 0x33));
    if (v7[329] == v30)
    {
      v33 = 0;
      v36 = 0;
      v35 = (_QWORD *)(v30 + 8 * ((v7[332] + v31) / 0x33));
    }
    else
    {
      v33 = *(_QWORD *)(v30 + 8 * (v31 / 0x33)) + 80 * (v31 % 0x33);
      v34 = v7[332] + v31;
      v35 = (_QWORD *)(v30 + 8 * (v34 / 0x33));
      v36 = *v35 + 80 * (v34 % 0x33);
    }
    LOBYTE(v87[0]) = 0;
    v37 = sub_1008224F8(v32, v33, v35, v36, &v85);
    v39 = v37;
    v40 = v38;
    v41 = v7[331] + v7[332];
    v42 = v7[328];
    v43 = (_QWORD *)(v42 + 8 * (v41 / 0x33));
    if (v7[329] == v42)
      v44 = 0;
    else
      v44 = *v43 + 80 * (v41 % 0x33);
    LOBYTE(v87[0]) = 0;
    v45 = sub_1008224F8(v37, v38, v43, v44, &v86);
    if ((sub_10081DA6C((uint64_t)v7, v79, v77, v39, v40, v45, v46) & 1) != 0)
    {
      v47 = a2[4];
      v48 = a2[1];
      v49 = (_QWORD *)(v48 + 8 * (v47 / 0x17));
      if (a2[2] == v48)
        v50 = 0;
      else
        v50 = *v49 + 176 * (v47 % 0x17);
      sub_10081B288((uint64_t)v7, v49, v50, v16, v17, v27, v28, v79, (uint64_t)v75);
      v52 = a2[4];
      v53 = a2[1];
      v54 = (_QWORD *)(v53 + 8 * (v52 / 0x17));
      if (a2[2] == v53)
        v55 = 0;
      else
        v55 = *v54 + 176 * (v52 % 0x17);
      sub_10081B288((uint64_t)v7, v54, v55, v16, v17, v27, v28, v77, (uint64_t)v72);
      sub_10081CFAC((uint64_t)v7, (uint64_t)v75, &v83[24], a2);
      sub_10081CFAC((uint64_t)v7, (uint64_t)v72, &v83[24], a2);
      if ((v83[24] & 1) == 0)
      {
        v56 = v76;
        v57 = v74;
        v58 = (v76 + v74) * 0.5;
        v59 = v76 / (v76 + v74);
        *(_QWORD *)&v84 = v75[0];
        *((double *)&v84 + 1) = v73;
        v60 = v74 / (v76 + v74);
        if (*((_QWORD *)&v80 + 1) | *((_QWORD *)&v78 + 1))
        {
          v62 = 0.0;
          if (v73 > 0.0)
            v62 = 1.0 / v73;
          if (v62 >= 4.0 || v58 >= 0.15 || v58 <= 0.05 || v62 <= 0.0)
          {
            if (v58 <= 0.4 && v58 > 0.05)
              v61 = 0;
            else
              v61 = 8;
          }
          else
          {
            v61 = 256;
          }
        }
        else
        {
          v61 = 1;
        }
        *((double *)&v81 + 1) = v76;
        *(double *)&v82 = v74;
        *((double *)&v82 + 1) = v76 / (v76 + v74);
        *(double *)v83 = v74 / (v76 + v74);
        *(double *)&v83[8] = v85;
        *(double *)&v83[16] = v86;
        *(_DWORD *)&v83[24] = v61;
        v64 = sub_100C5CFAC(v58, 0.001);
        *(double *)&v81 = v64;
        if (qword_10229FF30 != -1)
          dispatch_once(&qword_10229FF30, &stru_102155810);
        v65 = qword_10229FF38;
        if (os_log_type_enabled((os_log_t)qword_10229FF38, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67241472;
          v99 = v61;
          v100 = 2048;
          v101 = v56;
          v102 = 2048;
          v103 = v57;
          v104 = 2048;
          v105 = v59;
          v106 = 2048;
          v107 = v60;
          v108 = 2048;
          v109 = v64;
          _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEBUG, "[FormController] CLGaitEvents::HealthKitResult, groundContactTimeRejectionStatus,%{public}d,leftGroundContactTime,%.2f,rightGroundContactTime,%.2f,leftGroundContactTimePercentage,%.2f,rightGroundContactTimePercentage,%.2f,groundContactTime,%.2f", buf, 0x3Au);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FF30 != -1)
            dispatch_once(&qword_10229FF30, &stru_102155810);
          v87[0] = 67241472;
          v87[1] = v61;
          v88 = 2048;
          v89 = v56;
          v90 = 2048;
          v91 = v57;
          v92 = 2048;
          v93 = v59;
          v94 = 2048;
          v95 = v60;
          v96 = 2048;
          v97 = v64;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF38, 2, "[FormController] CLGaitEvents::HealthKitResult, groundContactTimeRejectionStatus,%{public}d,leftGroundContactTime,%.2f,rightGroundContactTime,%.2f,leftGroundContactTimePercentage,%.2f,rightGroundContactTimePercentage,%.2f,groundContactTime,%.2f", v87, 58);
          v71 = (uint8_t *)v70;
          sub_100512490("Generic", 1, 0, 2, "GroundContactTimeHKResult CLRunning::FormModels::aggregatedGroundContactTimeInWindow(const StepQueue &, CFAbsoluteTime)", "%s\n", v70);
          if (v71 != buf)
            free(v71);
        }
        if (sub_10081CF04((uint64_t)v7))
        {
          sub_10163B600(&v81, (uint64_t)buf);
          if (qword_1023118A8 != -1)
            dispatch_once(&qword_1023118A8, &stru_102155830);
          if (qword_1023118B0)
            operator new();
          PB::Base::~Base((PB::Base *)buf);
        }
      }
      v66 = *(_OWORD *)&v83[16];
      *(_OWORD *)(a3 + 32) = *(_OWORD *)v83;
      *(_OWORD *)(a3 + 48) = v66;
      *(_OWORD *)(a3 + 64) = v84;
      v67 = v82;
      *(_OWORD *)a3 = v81;
      *(_OWORD *)(a3 + 16) = v67;
    }
    else
    {
      if (qword_10229FF30 != -1)
        dispatch_once(&qword_10229FF30, &stru_102155810);
      v51 = qword_10229FF38;
      if (os_log_type_enabled((os_log_t)qword_10229FF38, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_ERROR, "[FormController] step aggregation failed", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FF30 != -1)
          dispatch_once(&qword_10229FF30, &stru_102155810);
        LOWORD(v87[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF38, 16, "[FormController] step aggregation failed", v87, 2);
        v69 = (uint8_t *)v68;
        sub_100512490("Generic", 1, 0, 0, "GroundContactTimeHKResult CLRunning::FormModels::aggregatedGroundContactTimeInWindow(const StepQueue &, CFAbsoluteTime)", "%s\n", v68);
        if (v69 != buf)
          free(v69);
      }
      *(_QWORD *)(a3 + 48) = 0;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)a3 = 0u;
      *(_DWORD *)(a3 + 56) = 1;
      *(_QWORD *)(a3 + 64) = 0;
      *(_QWORD *)(a3 + 72) = 0;
    }
    sub_1004A4854(v77);
    return sub_1004A4854(v79);
  }
  else
  {
    *(_QWORD *)(a3 + 48) = 0;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_DWORD *)(a3 + 56) = 32;
    *(_QWORD *)(a3 + 64) = 0;
    *(_QWORD *)(a3 + 72) = 0;
  }
  return result;
}

void sub_10081D9FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  sub_1004A4854((uint64_t *)va);
  sub_1004A4854(va1);
  _Unwind_Resume(a1);
}

uint64_t sub_10081DA6C(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unint64_t a5, _QWORD *a6, uint64_t *a7)
{
  NSObject *v7;
  uint64_t result;
  const char *v9;
  uint8_t *v10;
  __int128 v12;
  char *v13;
  int v14;
  int v15;
  char *v16;
  uint64_t v17;
  char *v18;
  double *v19;
  double v20;
  unint64_t v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  NSObject *v58;
  _QWORD *v59;
  const char *v60;
  uint8_t *v61;
  NSObject *v62;
  const char *v63;
  uint8_t *v64;
  double v65;
  __int128 v66;
  _QWORD *v67;
  char *v68;
  void *v70;
  uint64_t v71;
  _QWORD v72[2];
  int v73;
  unsigned __int8 v74;
  char *v75;
  char *v76;
  uint64_t v77;
  void *v78;
  char *v79;
  uint64_t v80;
  void *v81;
  _QWORD *v82;
  unint64_t v83;
  void *__p;
  _BYTE v85[20];
  __int16 v86;
  uint64_t v87;
  __int16 v88;
  int v89;
  uint8_t buf[8];
  _BYTE v91[20];
  __int16 v92;
  uint64_t v93;
  __int16 v94;
  int v95;

  v67 = a3;
  if (a7 == (uint64_t *)a5
    || 51 * (a6 - a4)
     - 0x3333333333333333 * (((uint64_t)a7 - *a6) >> 4)
     + 0x3333333333333333 * ((uint64_t)(a5 - *a4) >> 4) <= 3)
  {
    if (qword_10229FF30 != -1)
      dispatch_once(&qword_10229FF30, &stru_102155810);
    v7 = qword_10229FF38;
    if (os_log_type_enabled((os_log_t)qword_10229FF38, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "[FormController] Insufficient number of samples to aggregate", buf, 2u);
    }
    result = sub_1001BFF7C(115, 0);
    if ((_DWORD)result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF30 != -1)
        dispatch_once(&qword_10229FF30, &stru_102155810);
      LOWORD(__p) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF38, 16, "[FormController] Insufficient number of samples to aggregate", &__p, 2);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLRunning::FormModels::aggregateEventsOverStride(std::deque<Timeseries> &, std::deque<Timeseries> &, const std::deque<CLGaitEvents::LoggingModelOutput>::const_iterator, const std::deque<CLGaitEvents::LoggingModelOutput>::const_iterator)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
      return 0;
    }
    return result;
  }
  v78 = 0;
  v79 = 0;
  v80 = 0;
  v75 = 0;
  v76 = 0;
  v77 = 0;
  HIDWORD(v65) = sub_10081E560((_QWORD *)a1, 0, (char **)&v78, &v75, a4, a5, a6, a7);
  if ((BYTE4(v65) & 1) == 0)
  {
    if (qword_10229FF30 != -1)
      dispatch_once(&qword_10229FF30, &stru_102155810);
    v62 = qword_10229FF38;
    if (os_log_type_enabled((os_log_t)qword_10229FF38, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEBUG, "[FormController] Cannot process candidates for aggregation", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF30 != -1)
        dispatch_once(&qword_10229FF30, &stru_102155810);
      LOWORD(__p) = 0;
      LODWORD(v65) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF38, 2, "[FormController] Cannot process candidates for aggregation", &__p, *(_QWORD *)&v65);
      v64 = (uint8_t *)v63;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLRunning::FormModels::aggregateEventsOverStride(std::deque<Timeseries> &, std::deque<Timeseries> &, const std::deque<CLGaitEvents::LoggingModelOutput>::const_iterator, const std::deque<CLGaitEvents::LoggingModelOutput>::const_iterator)", "%s\n", v63);
      if (v64 != buf)
        free(v64);
    }
LABEL_105:
    v13 = v75;
    goto LABEL_106;
  }
  v13 = v75;
  v68 = v76;
  if (v75 != v76)
  {
    *(_QWORD *)&v12 = 67110144;
    v66 = v12;
    do
    {
      v14 = *(_DWORD *)v13;
      v15 = *((_DWORD *)v13 + 2);
      v16 = (char *)v78 + 48 * *(int *)v13;
      v17 = *((int *)v13 + 1) + 1;
      v18 = (char *)v78 + 48 * v17;
      v19 = (double *)(v79 - 48);
      if (v18 < v79)
        v19 = (double *)((char *)v78 + 48 * v17);
      v20 = v19[3];
      __p = 0;
      *(_QWORD *)v85 = 0;
      *(_QWORD *)&v85[8] = 0;
      v70 = 0;
      v71 = 0;
      v72[0] = 0;
      v81 = 0;
      v82 = 0;
      v83 = 0;
      v21 = 0xAAAAAAAAAAAAAAABLL * ((v18 - v16) >> 4);
      sub_100407BF8(&__p, v21);
      sub_100407BF8(&v70, v21);
      sub_100407BF8(&v81, v21);
      if (v14 != (_DWORD)v17)
      {
        do
        {
          v22 = *(char **)v85;
          if (*(_QWORD *)v85 >= *(_QWORD *)&v85[8])
          {
            v24 = (char *)__p;
            v25 = (uint64_t)(*(_QWORD *)v85 - (_QWORD)__p) >> 3;
            v26 = v25 + 1;
            if ((unint64_t)(v25 + 1) >> 61)
              goto LABEL_116;
            v27 = *(_QWORD *)&v85[8] - (_QWORD)__p;
            if ((uint64_t)(*(_QWORD *)&v85[8] - (_QWORD)__p) >> 2 > v26)
              v26 = v27 >> 2;
            if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
              v28 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v28 = v26;
            if (v28)
            {
              v29 = (char *)sub_10025E6A0((uint64_t)&v85[8], v28);
              v24 = (char *)__p;
              v22 = *(char **)v85;
            }
            else
            {
              v29 = 0;
            }
            v30 = &v29[8 * v25];
            *(_QWORD *)v30 = *(_QWORD *)v16;
            v23 = v30 + 8;
            while (v22 != v24)
            {
              v31 = *((_QWORD *)v22 - 1);
              v22 -= 8;
              *((_QWORD *)v30 - 1) = v31;
              v30 -= 8;
            }
            __p = v30;
            *(_QWORD *)v85 = v23;
            *(_QWORD *)&v85[8] = &v29[8 * v28];
            if (v24)
              operator delete(v24);
          }
          else
          {
            **(_QWORD **)v85 = *(_QWORD *)v16;
            v23 = v22 + 8;
          }
          *(_QWORD *)v85 = v23;
          v32 = (_QWORD *)v71;
          if ((unint64_t)v71 >= v72[0])
          {
            v34 = v70;
            v35 = (v71 - (uint64_t)v70) >> 3;
            v36 = v35 + 1;
            if ((unint64_t)(v35 + 1) >> 61)
              goto LABEL_116;
            v37 = v72[0] - (_QWORD)v70;
            if ((uint64_t)(v72[0] - (_QWORD)v70) >> 2 > v36)
              v36 = v37 >> 2;
            if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
              v38 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v38 = v36;
            if (v38)
            {
              v39 = (char *)sub_10025E6A0((uint64_t)v72, v38);
              v34 = v70;
              v32 = (_QWORD *)v71;
            }
            else
            {
              v39 = 0;
            }
            v40 = &v39[8 * v35];
            *(_QWORD *)v40 = *((_QWORD *)v16 + 1);
            v33 = v40 + 8;
            while (v32 != v34)
            {
              v41 = *--v32;
              *((_QWORD *)v40 - 1) = v41;
              v40 -= 8;
            }
            v70 = v40;
            v71 = (uint64_t)v33;
            v72[0] = &v39[8 * v38];
            if (v34)
              operator delete(v34);
          }
          else
          {
            *(_QWORD *)v71 = *((_QWORD *)v16 + 1);
            v33 = v32 + 1;
          }
          v71 = (uint64_t)v33;
          v42 = v82;
          if ((unint64_t)v82 >= v83)
          {
            v44 = v81;
            v45 = ((char *)v82 - (_BYTE *)v81) >> 3;
            v46 = v45 + 1;
            if ((unint64_t)(v45 + 1) >> 61)
LABEL_116:
              sub_100259694();
            v47 = v83 - (_QWORD)v81;
            if ((uint64_t)(v83 - (_QWORD)v81) >> 2 > v46)
              v46 = v47 >> 2;
            if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
              v48 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v48 = v46;
            if (v48)
            {
              v49 = (char *)sub_10025E6A0((uint64_t)&v83, v48);
              v44 = v81;
              v42 = v82;
            }
            else
            {
              v49 = 0;
            }
            v50 = &v49[8 * v45];
            *(_QWORD *)v50 = *((_QWORD *)v16 + 2);
            v43 = v50 + 8;
            while (v42 != v44)
            {
              v51 = *--v42;
              *((_QWORD *)v50 - 1) = v51;
              v50 -= 8;
            }
            v81 = v50;
            v82 = v43;
            v83 = (unint64_t)&v49[8 * v48];
            if (v44)
              operator delete(v44);
          }
          else
          {
            *v82 = *((_QWORD *)v16 + 2);
            v43 = v42 + 1;
          }
          v82 = v43;
          v16 += 48;
        }
        while (v16 != v18);
      }
      *(double *)buf = 0.0;
      *(_QWORD *)v91 = 0;
      *(_QWORD *)&v91[8] = 0;
      sub_10025EA00(buf, __p, *(uint64_t *)v85, (uint64_t)(*(_QWORD *)v85 - (_QWORD)__p) >> 3);
      v53 = sub_10081F244(*(double **)buf, *(double **)v91, v52);
      if (*(double *)buf != 0.0)
      {
        *(_QWORD *)v91 = *(_QWORD *)buf;
        operator delete(*(void **)buf);
      }
      *(double *)buf = 0.0;
      *(_QWORD *)v91 = 0;
      *(_QWORD *)&v91[8] = 0;
      sub_10025EA00(buf, v70, v71, (v71 - (uint64_t)v70) >> 3);
      v55 = sub_10081F244(*(double **)buf, *(double **)v91, v54);
      if (*(double *)buf != 0.0)
      {
        *(_QWORD *)v91 = *(_QWORD *)buf;
        operator delete(*(void **)buf);
      }
      *(double *)buf = 0.0;
      *(_QWORD *)v91 = 0;
      *(_QWORD *)&v91[8] = 0;
      sub_10025EA00(buf, v81, (uint64_t)v82, ((char *)v82 - (_BYTE *)v81) >> 3);
      v57 = sub_10081F244(*(double **)buf, *(double **)v91, v56);
      if (*(double *)buf != 0.0)
      {
        *(_QWORD *)v91 = *(_QWORD *)buf;
        operator delete(*(void **)buf);
      }
      if (v81)
      {
        v82 = v81;
        operator delete(v81);
      }
      if (v70)
      {
        v71 = (uint64_t)v70;
        operator delete(v70);
      }
      if (__p)
      {
        *(_QWORD *)v85 = __p;
        operator delete(__p);
      }
      v70 = *(void **)&v57;
      v71 = *(_QWORD *)&v53;
      *(double *)v72 = v55;
      *(double *)&v72[1] = v20;
      v73 = v15;
      v74 = 1;
      if (qword_10229FF30 != -1)
        dispatch_once(&qword_10229FF30, &stru_102155810);
      v58 = qword_10229FF38;
      if (os_log_type_enabled((os_log_t)qword_10229FF38, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = v66;
        *(_DWORD *)&buf[4] = v74;
        *(_WORD *)v91 = 2048;
        *(_QWORD *)&v91[2] = v70;
        *(_WORD *)&v91[10] = 2048;
        *(_QWORD *)&v91[12] = v71;
        v92 = 2048;
        v93 = v72[0];
        v94 = 1024;
        v95 = v73;
        _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEBUG, "[FormController] AggregatedGCT,isSuccessful,%d,groundContactTime,%.2f,initialContactTime,%.2f,toeOffTime,%.2f,stepSide,%d.", buf, 0x2Cu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FF30 != -1)
          dispatch_once(&qword_10229FF30, &stru_102155810);
        LODWORD(__p) = v66;
        HIDWORD(__p) = v74;
        *(_WORD *)v85 = 2048;
        *(_QWORD *)&v85[2] = v70;
        *(_WORD *)&v85[10] = 2048;
        *(_QWORD *)&v85[12] = v71;
        v86 = 2048;
        v87 = v72[0];
        v88 = 1024;
        v89 = v73;
        LODWORD(v65) = 44;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF38, 2, "[FormController] AggregatedGCT,isSuccessful,%d,groundContactTime,%.2f,initialContactTime,%.2f,toeOffTime,%.2f,stepSide,%d.", &__p, v65, *(double *)&v66, *((double *)&v66 + 1), (_DWORD)v67);
        v61 = (uint8_t *)v60;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLRunning::FormModels::aggregateEventsOverStride(std::deque<Timeseries> &, std::deque<Timeseries> &, const std::deque<CLGaitEvents::LoggingModelOutput>::const_iterator, const std::deque<CLGaitEvents::LoggingModelOutput>::const_iterator)", "%s\n", v60);
        if (v61 != buf)
          free(v61);
      }
      if (sub_10081CF04(a1))
      {
        sub_10163B5B4((uint64_t)&v70, (uint64_t)buf);
        if (qword_1023118A8 != -1)
          dispatch_once(&qword_1023118A8, &stru_102155830);
        if (qword_1023118B0)
          operator new();
        PB::Base::~Base((PB::Base *)buf);
      }
      *(double *)buf = v20 - *(double *)(a1 + 448);
      v59 = a2;
      if (v73 == 2 || (v59 = v67, v73 == 1))
        sub_10081EFD4(v59, buf, (uint64_t *)&v70);
      v13 += 12;
    }
    while (v13 != v68);
    goto LABEL_105;
  }
LABEL_106:
  if (v13)
  {
    v76 = v13;
    operator delete(v13);
  }
  if (v78)
  {
    v79 = (char *)v78;
    operator delete(v78);
  }
  return HIDWORD(v65);
}

void sub_10081E488(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40)
{
  if (__p)
    operator delete(__p);
  if (a27)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

BOOL sub_10081E560(_QWORD *a1, int a2, char **a3, char **a4, _QWORD *a5, unint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  unint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v32;
  unint64_t v33;
  double *v34;
  uint64_t v35;
  double v36;
  double *v37;
  double v38;
  int v39;
  int v40;
  _BOOL4 v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  int v55;
  char **v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  int v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  __int128 v76;
  __int128 v77;
  unint64_t v78;
  NSObject *v79;
  _BOOL8 result;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  char *v89;
  char *v90;
  char *v91;
  unint64_t v92;
  unint64_t v93;
  int v94;
  unint64_t v95;
  unint64_t v96;
  int v97;
  char *v98;
  char *v99;
  char *v100;
  char *v101;
  char *v102;
  __int128 v103;
  __int128 v104;
  int v105;
  _BOOL4 v106;
  char **v107;
  unint64_t v108;
  char *v109;
  char *v110;
  char *v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  int v121;
  const char *v122;
  uint8_t *v123;
  int v124;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v133;
  char **v134;
  int v135;
  int v136;
  _DWORD v137[4];
  uint8_t buf[4];
  int v139;

  if (a8 == (uint64_t *)a6)
  {
    LODWORD(v8) = 0;
    goto LABEL_80;
  }
  v8 = 51 * (a7 - a5)
     - 0x3333333333333333 * (((uint64_t)a8 - *a7) >> 4)
     + 0x3333333333333333 * ((uint64_t)(a6 - *a5) >> 4);
  if ((v8 - 1) >= 0x440)
  {
LABEL_80:
    if (qword_10229FF30 != -1)
      dispatch_once(&qword_10229FF30, &stru_102155810);
    v79 = qword_10229FF38;
    if (os_log_type_enabled((os_log_t)qword_10229FF38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v139 = v8;
      _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_ERROR, "[FormController] GCT Buffer Overload - numSamples: %d", buf, 8u);
    }
    result = sub_1001BFF7C(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF30 != -1)
        dispatch_once(&qword_10229FF30, &stru_102155810);
      v137[0] = 67109120;
      v137[1] = v8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF38, 16, "[FormController] GCT Buffer Overload - numSamples: %d", v137);
      v123 = (uint8_t *)v122;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLRunning::FormModels::processCandidates(AggregateType, std::vector<CLGaitEvents::PredictionCandidate> &, std::vector<CLGaitEvents::AggregationCandidate> &, const std::deque<CLGaitEvents::LoggingModelOutput>::const_iterator, const std::deque<CLGaitEvents::LoggingModelOutput>::const_iterator)", "%s\n", v122);
      if (v123 != buf)
        free(v123);
      return 0;
    }
    return result;
  }
  v124 = v8 - 1;
  sub_10081EF14((void **)a3, 51 * (a7 - a5)- 858993459 * (((uint64_t)a8 - *a7) >> 4)+ 858993459 * ((uint64_t)(a6 - *a5) >> 4));
  v13 = a5;
  v12 = a6;
  v15 = a7;
  v14 = a8;
  v16 = 0;
  v133 = 0;
  v17 = 0;
  v18 = 0;
  v126 = (uint64_t)(a4 + 2);
  v127 = (uint64_t)(a3 + 2);
  v19 = a5;
  v20 = a6;
  v21 = 1;
  v134 = a4;
LABEL_4:
  v128 = 51 * (v19 - v13);
  while (1)
  {
    v22 = v21;
    v23 = (uint64_t)v14 - *v15;
    v24 = 0xCCCCCCCCCCCCCCCDLL * (v23 >> 4);
    if (v23 < 81)
    {
      v29 = 51 - v24;
      v30 = (51 - v24) / 0x33;
      v27 = &v15[-v30];
      v28 = *v27 + 80 * (51 * v30 - v29) + 4000;
    }
    else
    {
      v25 = v24 - 1;
      v26 = (v24 - 1) / 0x33;
      v27 = &v15[v26];
      v28 = *v27 + 80 * (v25 - 51 * v26);
    }
    if (v19 >= v27 && (v19 != v27 || v20 >= v28))
      break;
    v32 = v20 - *v19;
    v33 = 0xCCCCCCCCCCCCCCCDLL * (v32 >> 4);
    if (v32 < -79)
      v34 = (double *)(v19[-((49 - v33) / 0x33)] + 80 * (v33 - 49 + 51 * ((49 - v33) / 0x33)) + 4000);
    else
      v34 = (double *)(v19[(v33 + 1) / 0x33] + 80 * ((v33 + 1) % 0x33));
    if (v20 == v12)
      LODWORD(v35) = 0;
    else
      v35 = v33 + v128 + 0x3333333333333333 * ((uint64_t)(v12 - *v13) >> 4);
    if (a2 == 2)
    {
      v37 = (double *)v20;
      goto LABEL_25;
    }
    if (a2 == 1)
    {
      v37 = (double *)(v20 + 16);
      v34 += 2;
      goto LABEL_25;
    }
    v36 = 0.0;
    if (!a2)
    {
      v37 = (double *)(v20 + 8);
      ++v34;
LABEL_25:
      v36 = *v34 - *v37;
    }
    v38 = fabs(v36);
    if (v38 > 0.03)
      ++v21;
    v39 = *(_DWORD *)(v20 + 64);
    if (v38 <= 0.03)
    {
      ++v16;
      if (v39 == 2)
      {
        v17 = (v17 + 1);
      }
      else if (v39 == 1)
      {
        ++v18;
      }
    }
    else
    {
      if (v16 >= 1)
      {
        if (v18 > (int)v17)
          v40 = 1;
        else
          v40 = 2;
        if (v18 == (_DWORD)v17)
          v41 = v17 != 0;
        else
          v41 = v40;
        v43 = v134[1];
        v42 = (unint64_t)v134[2];
        if ((unint64_t)v43 >= v42)
        {
          v45 = *v134;
          v46 = 0xAAAAAAAAAAAAAAABLL * ((v43 - *v134) >> 2);
          v47 = v46 + 1;
          if (v46 + 1 > 0x1555555555555555)
            sub_100259694();
          v135 = v22;
          v48 = v21;
          v49 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v42 - (_QWORD)v45) >> 2);
          if (2 * v49 > v47)
            v47 = 2 * v49;
          if (v49 >= 0xAAAAAAAAAAAAAAALL)
            v50 = 0x1555555555555555;
          else
            v50 = v47;
          if (v50)
          {
            v51 = (char *)sub_100821B78(v126, v50);
            v45 = *v134;
            v43 = v134[1];
          }
          else
          {
            v51 = 0;
          }
          v52 = &v51[12 * v46];
          *(_DWORD *)v52 = v133;
          *((_DWORD *)v52 + 1) = v35;
          *((_DWORD *)v52 + 2) = v41;
          v53 = v52;
          if (v43 == v45)
          {
            v56 = v134;
          }
          else
          {
            do
            {
              v54 = *(_QWORD *)(v43 - 12);
              v43 -= 12;
              v55 = *((_DWORD *)v43 + 2);
              *(_QWORD *)(v53 - 12) = v54;
              v53 -= 12;
              *((_DWORD *)v53 + 2) = v55;
            }
            while (v43 != v45);
            v56 = v134;
            v45 = *v134;
          }
          v44 = v52 + 12;
          *v56 = v53;
          v56[1] = v52 + 12;
          v56[2] = &v51[12 * v50];
          if (v45)
            operator delete(v45);
          v15 = a7;
          v14 = a8;
          v13 = a5;
          v12 = a6;
          v21 = v48;
          v22 = v135;
        }
        else
        {
          *(_DWORD *)v43 = v133;
          *((_DWORD *)v43 + 1) = v35;
          v44 = v43 + 12;
          *((_DWORD *)v43 + 2) = v41;
        }
        v134[1] = v44;
      }
      v16 = 0;
      v17 = 0;
      v18 = 0;
      v133 = v35 + 1;
    }
    v58 = *(_QWORD *)(v20 + 8);
    v57 = *(_QWORD *)(v20 + 16);
    v59 = *(double *)v20;
    v60 = *(_QWORD *)(v20 + 48);
    v61 = a3[1];
    v62 = a3[2];
    if (v61 >= v62)
    {
      v64 = 0xAAAAAAAAAAAAAAABLL * ((v61 - *a3) >> 4);
      v65 = v64 + 1;
      if (v64 + 1 > 0x555555555555555)
        goto LABEL_137;
      v136 = v21;
      v66 = v17;
      v67 = 0xAAAAAAAAAAAAAAABLL * ((v62 - *a3) >> 4);
      if (2 * v67 > v65)
        v65 = 2 * v67;
      if (v67 >= 0x2AAAAAAAAAAAAAALL)
        v68 = 0x555555555555555;
      else
        v68 = v65;
      if (v68)
      {
        v69 = v19;
        v70 = v22;
        v71 = (char *)sub_100313718(v127, v68);
        v22 = v70;
        v19 = v69;
      }
      else
      {
        v71 = 0;
      }
      v72 = &v71[48 * v64];
      *(_QWORD *)v72 = v58;
      *((_QWORD *)v72 + 1) = v57;
      *((double *)v72 + 2) = v59;
      *((_QWORD *)v72 + 3) = v60;
      *((_DWORD *)v72 + 8) = v39;
      *((_DWORD *)v72 + 9) = 0;
      *((_DWORD *)v72 + 10) = v22;
      v74 = *a3;
      v73 = a3[1];
      v75 = v72;
      if (v73 != *a3)
      {
        do
        {
          v76 = *((_OWORD *)v73 - 3);
          v77 = *((_OWORD *)v73 - 2);
          *(_OWORD *)(v75 - 20) = *(_OWORD *)(v73 - 20);
          *((_OWORD *)v75 - 3) = v76;
          *((_OWORD *)v75 - 2) = v77;
          v75 -= 48;
          v73 -= 48;
        }
        while (v73 != v74);
        v73 = *a3;
      }
      v63 = v72 + 48;
      *a3 = v75;
      a3[1] = v72 + 48;
      a3[2] = &v71[48 * v68];
      if (v73)
        operator delete(v73);
      v15 = a7;
      v14 = a8;
      v17 = v66;
      v13 = a5;
      v12 = a6;
      v21 = v136;
    }
    else
    {
      *(_QWORD *)v61 = v58;
      *((_QWORD *)v61 + 1) = v57;
      *((double *)v61 + 2) = v59;
      *((_QWORD *)v61 + 3) = v60;
      *((_DWORD *)v61 + 8) = v39;
      *((_DWORD *)v61 + 9) = 0;
      v63 = v61 + 48;
      *((_DWORD *)v61 + 10) = v22;
    }
    a3[1] = v63;
    v20 += 80;
    if (v20 - *v19 == 4080)
    {
      v78 = v19[1];
      ++v19;
      v20 = v78;
      goto LABEL_4;
    }
  }
  v81 = a1[328];
  if (a1[329] == v81)
  {
    v83 = 0;
  }
  else
  {
    v82 = a1[332] + a1[331];
    v83 = *(_QWORD *)(v81 + 8 * (v82 / 0x33)) + 80 * (v82 % 0x33);
  }
  if ((uint64_t *)v83 != v14)
  {
    v85 = v14[1];
    v84 = v14[2];
    v86 = *v14;
    v87 = v14[6];
    v88 = *((_DWORD *)v14 + 16);
    v89 = a3[1];
    v90 = a3[2];
    if (v89 >= v90)
    {
      v92 = 0xAAAAAAAAAAAAAAABLL * ((v89 - *a3) >> 4);
      v93 = v92 + 1;
      if (v92 + 1 > 0x555555555555555)
LABEL_137:
        sub_100259694();
      v94 = v17;
      v95 = 0xAAAAAAAAAAAAAAABLL * ((v90 - *a3) >> 4);
      if (2 * v95 > v93)
        v93 = 2 * v95;
      if (v95 >= 0x2AAAAAAAAAAAAAALL)
        v96 = 0x555555555555555;
      else
        v96 = v93;
      if (v96)
      {
        v97 = v21;
        v98 = (char *)sub_100313718(v127, v96);
        v22 = v97;
      }
      else
      {
        v98 = 0;
      }
      v99 = &v98[48 * v92];
      v100 = &v98[48 * v96];
      *(_QWORD *)v99 = v85;
      *((_QWORD *)v99 + 1) = v84;
      *((_QWORD *)v99 + 2) = v86;
      *((_QWORD *)v99 + 3) = v87;
      *((_DWORD *)v99 + 8) = v88;
      v99[36] = 1;
      *((_DWORD *)v99 + 10) = v22;
      v91 = v99 + 48;
      v102 = *a3;
      v101 = a3[1];
      if (v101 != *a3)
      {
        do
        {
          v103 = *((_OWORD *)v101 - 3);
          v104 = *((_OWORD *)v101 - 2);
          *(_OWORD *)(v99 - 20) = *(_OWORD *)(v101 - 20);
          *((_OWORD *)v99 - 3) = v103;
          *((_OWORD *)v99 - 2) = v104;
          v99 -= 48;
          v101 -= 48;
        }
        while (v101 != v102);
        v101 = *a3;
      }
      *a3 = v99;
      a3[1] = v91;
      a3[2] = v100;
      if (v101)
        operator delete(v101);
      LODWORD(v17) = v94;
    }
    else
    {
      *(_QWORD *)v89 = v85;
      *((_QWORD *)v89 + 1) = v84;
      *((_QWORD *)v89 + 2) = v86;
      *((_QWORD *)v89 + 3) = v87;
      *((_DWORD *)v89 + 8) = v88;
      v89[36] = 1;
      v91 = v89 + 48;
      *((_DWORD *)v89 + 10) = v21;
    }
    a3[1] = v91;
  }
  result = 1;
  if (v16 >= 2)
  {
    if (v18 > (int)v17)
      v105 = 1;
    else
      v105 = 2;
    if (v18 == (_DWORD)v17)
      v106 = v17 != 0;
    else
      v106 = v105;
    v107 = v134;
    v109 = v134[1];
    v108 = (unint64_t)v134[2];
    if ((unint64_t)v109 >= v108)
    {
      v111 = *v134;
      v112 = 0xAAAAAAAAAAAAAAABLL * ((v109 - *v134) >> 2);
      v113 = v112 + 1;
      if (v112 + 1 > 0x1555555555555555)
        sub_100259694();
      v114 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v108 - (_QWORD)v111) >> 2);
      if (2 * v114 > v113)
        v113 = 2 * v114;
      if (v114 >= 0xAAAAAAAAAAAAAAALL)
        v115 = 0x1555555555555555;
      else
        v115 = v113;
      if (v115)
      {
        v116 = (char *)sub_100821B78(v126, v115);
        v107 = v134;
        v117 = v116;
        v111 = *v134;
        v109 = v134[1];
      }
      else
      {
        v117 = 0;
      }
      v118 = &v117[12 * v112];
      v119 = &v117[12 * v115];
      *(_DWORD *)v118 = v133;
      *((_DWORD *)v118 + 1) = v124;
      *((_DWORD *)v118 + 2) = v106;
      v110 = v118 + 12;
      if (v109 != v111)
      {
        do
        {
          v120 = *(_QWORD *)(v109 - 12);
          v109 -= 12;
          v121 = *((_DWORD *)v109 + 2);
          *(_QWORD *)(v118 - 12) = v120;
          v118 -= 12;
          *((_DWORD *)v118 + 2) = v121;
        }
        while (v109 != v111);
        v111 = *v107;
      }
      *v107 = v118;
      v107[1] = v110;
      v107[2] = v119;
      if (v111)
      {
        operator delete(v111);
        v107 = v134;
      }
    }
    else
    {
      *(_DWORD *)v109 = v133;
      *((_DWORD *)v109 + 1) = v124;
      v110 = v109 + 12;
      *((_DWORD *)v109 + 2) = v106;
    }
    v107[1] = v110;
    return 1;
  }
  return result;
}

void sub_10081EF14(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a1) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556)
      sub_100259694();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_100313718(v3, a2);
    v7 = &v6[v5];
    v9 = &v6[48 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_OWORD *)v10 - 3);
        v14 = *((_OWORD *)v10 - 2);
        *(_OWORD *)(v12 - 20) = *(_OWORD *)(v10 - 20);
        *((_OWORD *)v12 - 3) = v13;
        *((_OWORD *)v12 - 2) = v14;
        v12 -= 48;
        v10 -= 48;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t sub_10081EFD4(_QWORD *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v6 = a1[2];
  v7 = a1[1];
  if (v6 == v7)
    v8 = 0;
  else
    v8 = 32 * (v6 - v7) - 1;
  v9 = a1[4];
  v10 = a1[5];
  v11 = v10 + v9;
  if (v8 == v10 + v9)
  {
    sub_100820F2C(a1);
    v9 = a1[4];
    v10 = a1[5];
    v7 = a1[1];
    v11 = v9 + v10;
  }
  v12 = (_QWORD *)(*(_QWORD *)(v7 + ((v11 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v11);
  v13 = *a3;
  *v12 = *a2;
  v12[1] = v13;
  v14 = v10 + 1;
  a1[5] = v14;
  v15 = v9 + v14;
  v16 = (_QWORD *)(v7 + 8 * (v15 >> 8));
  if ((_BYTE)v15)
    v17 = *v16 + 16 * v15;
  else
    v17 = *(v16 - 1) + 4096;
  return v17 - 16;
}

__n128 sub_10081F094(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 51 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100822874(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x33)) + 80 * (v7 % 0x33);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v10 = *(_OWORD *)(a2 + 32);
  v11 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v8 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v8 + 64) = v11;
  *(__n128 *)(v8 + 16) = result;
  *(_OWORD *)(v8 + 32) = v10;
  ++a1[5];
  return result;
}

void sub_10081F150(id a1)
{
  qword_10229FF38 = (uint64_t)os_log_create("com.apple.locationd.Motion", "RunningForm");
}

_QWORD *sub_10081F17C(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;

  if (a2)
  {
    v2 = (_QWORD *)*result;
    v3 = a2 + 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(result[1] - *(_QWORD *)*result) >> 4);
    if ((uint64_t)v3 < 1)
    {
      v5 = 22 - v3;
      v6 = &v2[-(v5 / 0x17)];
      *result = v6;
      v4 = *v6 + 176 * (23 * (v5 / 0x17) - v5) + 3872;
    }
    else
    {
      *result = &v2[v3 / 0x17];
      v4 = v2[v3 / 0x17] + 176 * (v3 % 0x17);
    }
    result[1] = v4;
  }
  return result;
}

double sub_10081F244(double *a1, double *a2, double a3)
{
  uint64_t v3;
  double *v4;
  unint64_t v5;
  double *v6;
  double *v8;
  double v9;
  uint64_t v10;
  double *v11;
  double v12;
  double v13;

  v3 = (char *)a2 - (char *)a1;
  if ((char *)a2 - (char *)a1 <= 7)
    sub_1018FE084();
  v4 = a1;
  v5 = (unint64_t)(v3 >> 3) >> 1;
  v6 = &a1[v5];
  if (v6 != a2)
    sub_100407418(a1, &a1[v5], a2, a3);
  if (((v3 >> 3) & 0x8000000000000001) == 1)
    return *v6;
  if ((unint64_t)v3 >= 0x10 && v5 != 1)
  {
    v8 = v4 + 1;
    v9 = *v4;
    v10 = 8 * v5 - 8;
    v11 = v4 + 1;
    do
    {
      v12 = *v11++;
      v13 = v12;
      if (v9 < v12)
      {
        v9 = v13;
        v4 = v8;
      }
      v8 = v11;
      v10 -= 8;
    }
    while (v10);
  }
  return *v4 + (*v6 - *v4) * 0.5;
}

void sub_10081F31C(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_10081F348()
{
  operator delete();
}

uint64_t sub_10081F35C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  float *v6;
  float v7;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  float v10;
  BOOL v11;
  unsigned __int16 *v12;
  int v13;
  NSObject *v15;
  NSObject *v16;
  const char *v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *v21;
  const char *v23;
  uint8_t *v24;
  const char *v25;
  uint8_t *v26;
  const char *v27;
  uint8_t *v28;
  uint8_t *v29;
  uint64_t v30;
  _QWORD v31[2];
  uint8_t buf[1640];

  if (*(_QWORD *)(a1 + 16) <= a3)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102155850);
    v15 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "Assertion failed: false, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMRandomForest.h, line 56,Index exceeds ensemble size.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102155850);
      LOWORD(v31[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: false, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMRandomForest.h, line 56,Index exceeds ensemble size.", v31, 2);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual int16_t CMRandomForest<22>::findLeaf(const float (&)[NFeat], size_t) const [NFeat = 22]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
    }
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102155850);
    v16 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "Error: Index exceeds ensemble size", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102155850);
      LOWORD(v31[0]) = 0;
      LODWORD(v30) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Error: Index exceeds ensemble size", v31, v30, v31[0]);
LABEL_67:
      v29 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "virtual int16_t CMRandomForest<22>::findLeaf(const float (&)[NFeat], size_t) const [NFeat = 22]", "%s\n", v17);
      if (v29 != buf)
        free(v29);
    }
  }
  else
  {
    v3 = 0;
    v4 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 16 * a3);
    while (v3 < v4[1])
    {
      v5 = *(unsigned __int16 *)(*v4 + 10 * v3 + 4);
      if (v5 >= 0x16)
      {
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102155850);
        v20 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "Assertion failed: false, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMRandomForest.h, line 65,Invalid decision tree, feature index exceeds feature array.", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_102155850);
          LOWORD(v31[0]) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: false, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMRandomForest.h, line 65,Invalid decision tree, feature index exceeds feature array.", v31, 2);
          v28 = (uint8_t *)v27;
          sub_100512490("Generic", 1, 0, 0, "virtual int16_t CMRandomForest<22>::findLeaf(const float (&)[NFeat], size_t) const [NFeat = 22]", "%s\n", v27);
          if (v28 != buf)
            free(v28);
        }
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102155850);
        v21 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "Error: Invalid decision tree, feature index exceeds feature array", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_102155850);
          LOWORD(v31[0]) = 0;
          LODWORD(v30) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Error: Invalid decision tree, feature index exceeds feature array", v31, v30, v31[0]);
          goto LABEL_67;
        }
        return -1;
      }
      v6 = (float *)(*v4 + 10 * v3);
      v7 = *(float *)(a2 + 4 * v5);
      v8 = (unsigned __int16 *)v6 + 3;
      v10 = *v6;
      v9 = (unsigned __int16 *)(v6 + 2);
      v11 = v7 > v10;
      if (v7 >= v10)
        v12 = v9;
      else
        v12 = v8;
      if (!v11)
        v9 = v8;
      if (*(_BYTE *)(a1 + 24))
        v9 = v12;
      v13 = (__int16)*v9;
      v3 = *v9;
      if (v13 < 0)
        return (__int16)~(_WORD)v3;
    }
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102155850);
    v18 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "Assertion failed: false, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMRandomForest.h, line 91,Invalid decision tree, child index exceeds node array.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102155850);
      LOWORD(v31[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: false, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMRandomForest.h, line 91,Invalid decision tree, child index exceeds node array.", v31, 2);
      v26 = (uint8_t *)v25;
      sub_100512490("Generic", 1, 0, 0, "virtual int16_t CMRandomForest<22>::findLeaf(const float (&)[NFeat], size_t) const [NFeat = 22]", "%s\n", v25);
      if (v26 != buf)
        free(v26);
    }
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102155850);
    v19 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "Error: Invalid decision tree, child index exceeds node array", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102155850);
      LOWORD(v31[0]) = 0;
      LODWORD(v30) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Error: Invalid decision tree, child index exceeds node array", v31, v30, v31[0]);
      goto LABEL_67;
    }
  }
  return -1;
}

uint64_t sub_10081FA88(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 17;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 34;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return sub_10002E778((uint64_t)a1);
}

uint64_t sub_10081FB1C(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 42;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 85;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return sub_10002E778((uint64_t)a1);
}

void sub_10081FBB0(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0xAA;
  v4 = v2 - 170;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_10081FE78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *sub_10081FEC4(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;

  if (a2)
  {
    v2 = (_QWORD *)*result;
    v3 = a2 + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(result[1] - *(_QWORD *)*result) >> 3);
    if ((uint64_t)v3 < 1)
    {
      v5 = 72 - v3;
      v6 = &v2[-(v5 / 0x49)];
      *result = v6;
      v4 = *v6 + 56 * (73 * (v5 / 0x49) - v5) + 4032;
    }
    else
    {
      *result = &v2[v3 / 0x49];
      v4 = v2[v3 / 0x49] + 56 * (v3 % 0x49);
    }
    result[1] = v4;
  }
  return result;
}

void sub_10081FF78(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0xAA;
  v4 = v2 - 170;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100820240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_10082028C(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0xAA;
  v4 = v2 - 170;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100820554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1008205A0(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x55;
  v4 = v2 - 85;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100820868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1008208B4(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x22;
  v4 = v2 - 34;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100820B7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

float sub_100820BC8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  int v5;
  float v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  _WORD v16[8];
  uint8_t buf[1640];

  v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
  v6 = 0.0;
  if (v5 != -1)
  {
    v7 = a1[4];
    if (*(_QWORD *)(v7 + 16 * a3 + 8) <= (unint64_t)(unsigned __int16)v5)
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102155850);
      v8 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Assertion failed: false, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMRandomForestRegression.h, line 58,Invalid decision tree, regression index exceeds array length.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102155850);
        v16[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: false, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMRandomForestRegression.h, line 58,Invalid decision tree, regression index exceeds array length.", v16, 2);
        v12 = (uint8_t *)v11;
        sub_100512490("Generic", 1, 0, 0, "float CMRandomForestRegression<22>::evaluateTree(const float (&)[NFeat], size_t) const [NFeat = 22]", "%s\n", v11);
        if (v12 != buf)
          free(v12);
      }
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102155850);
      v9 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Error: Invalid decision tree, regression index exceeds array length", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102155850);
        v16[0] = 0;
        LODWORD(v15) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Error: Invalid decision tree, regression index exceeds array length", v16, v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 2, "float CMRandomForestRegression<22>::evaluateTree(const float (&)[NFeat], size_t) const [NFeat = 22]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
    else
    {
      return *(float *)(*(_QWORD *)(v7 + 16 * a3) + 4 * (unsigned __int16)v5);
    }
  }
  return v6;
}

uint64_t sub_100820ED0(uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x22)
    a2 = 1;
  if (v2 < 0x44)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 34;
  }
  return v4 ^ 1u;
}

void sub_100820F2C(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1008211F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100821240(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  sub_100821284((_QWORD *)a1, a2, a3, a4, a5);
  return a1;
}

void sub_100821270(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10002E778(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100821284(_QWORD *a1, _QWORD *a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  unint64_t v5;

  if (a5 == a3)
    v5 = 0;
  else
    v5 = 73 * (a4 - a2) + 0x6DB6DB6DB6DB6DB7 * ((a5 - *a4) >> 3) - 0x6DB6DB6DB6DB6DB7 * ((a3 - *a2) >> 3);
  return sub_1008212E8(a1, a2, a3, v5);
}

_QWORD *sub_1008212E8(_QWORD *a1, _QWORD *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *result;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v8 = a1[1];
  v9 = a1[2];
  if (v9 == v8)
    v10 = 0;
  else
    v10 = 73 * ((v9 - v8) >> 3) - 1;
  v11 = a1[5] + a1[4];
  v12 = v10 - v11;
  if (a4 > v12)
  {
    sub_100821470(a1, a4 - v12);
    v8 = a1[1];
    v9 = a1[2];
    v11 = a1[4] + a1[5];
  }
  v13 = (_QWORD *)(v8 + 8 * (v11 / 0x49));
  if (v9 == v8)
    v14 = 0;
  else
    v14 = *v13 + 56 * (v11 % 0x49);
  v24 = (_QWORD *)(v8 + 8 * (v11 / 0x49));
  v25 = v14;
  result = sub_10081FEC4(&v24, a4);
  v16 = v25;
  if (v14 != v25)
  {
    v17 = v24;
    do
    {
      if (v13 == v17)
        v18 = v16;
      else
        v18 = *v13 + 4088;
      if (v14 == v18)
      {
        v18 = v14;
      }
      else
      {
        v19 = v14;
        do
        {
          *(_OWORD *)v19 = *(_OWORD *)a3;
          v20 = *(_OWORD *)(a3 + 16);
          v21 = *(_OWORD *)(a3 + 32);
          *(_QWORD *)(v19 + 48) = *(_QWORD *)(a3 + 48);
          *(_OWORD *)(v19 + 16) = v20;
          *(_OWORD *)(v19 + 32) = v21;
          a3 += 56;
          if (a3 - *a2 == 4088)
          {
            v22 = a2[1];
            ++a2;
            a3 = v22;
          }
          v19 += 56;
        }
        while (v19 != v18);
      }
      a1[5] += 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v18 - v14) >> 3);
      if (v13 == v17)
        break;
      v23 = v13[1];
      ++v13;
      v14 = v23;
    }
    while (v23 != v16);
  }
  return result;
}

void sub_100821470(_QWORD *a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t i;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int64_t v76;
  char *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  void *v88;
  void *__p[2];
  __int128 v90;
  _QWORD *v91;

  v3 = (char *)a1[2];
  v4 = (uint64_t)&v3[-a1[1]];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if (v5 % 0x49)
    v6 = v5 / 0x49 + 1;
  else
    v6 = v5 / 0x49;
  v7 = a1[4];
  if (v6 >= v7 / 0x49)
    v8 = v7 / 0x49;
  else
    v8 = v6;
  if (v6 <= v7 / 0x49)
  {
    for (a1[4] = v7 - 73 * v8; v8; --v8)
    {
      v16 = (_QWORD *)a1[1];
      v19 = *v16;
      v17 = (char *)(v16 + 1);
      v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1)
            v28 = 1;
          else
            v28 = (uint64_t)&v3[-*a1] >> 2;
          v29 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v28);
          v31 = &v29[8 * (v28 >> 2)];
          v32 = (uint64_t *)a1[1];
          v3 = v31;
          v33 = a1[2] - (_QWORD)v32;
          if (v33)
          {
            v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            v34 = 8 * (v33 >> 3);
            v35 = &v29[8 * (v28 >> 2)];
            do
            {
              v36 = *v32++;
              *(_QWORD *)v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            v3 = (char *)a1[2];
          }
        }
        else
        {
          v21 = v20 >> 3;
          v22 = v20 >> 3 < -1;
          v23 = (v20 >> 3) + 2;
          if (v22)
            v24 = v23;
          else
            v24 = v21 + 1;
          v25 = &v17[-8 * (v24 >> 1)];
          v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            v3 = (char *)a1[1];
          }
          v27 = &v3[-8 * (v24 >> 1)];
          v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(_QWORD *)v3 = v18;
      v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    v9 = v6 - v8;
    v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0xFF8uLL);
          sub_100212218(a1, __p);
          --v6;
          if (!--v9)
            goto LABEL_75;
        }
        for (i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0xFF8uLL);
          sub_100343094((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8)
            v64 = 72;
          else
            v64 = 73;
          v65 = v64 + a1[4];
          a1[4] = v65;
        }
        v8 = v6;
      }
      else
      {
LABEL_75:
        v65 = a1[4];
      }
      a1[4] = v65 - 73 * v8;
      if (v8)
      {
        v66 = (char *)a1[2];
        do
        {
          v67 = (_QWORD *)a1[1];
          v70 = *v67;
          v68 = (char *)(v67 + 1);
          v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1)
                v78 = 1;
              else
                v78 = (uint64_t)&v66[-*a1] >> 2;
              v79 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v78);
              v81 = &v79[8 * (v78 >> 2)];
              v82 = (uint64_t *)a1[1];
              v66 = v81;
              v83 = a1[2] - (_QWORD)v82;
              if (v83)
              {
                v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                v84 = 8 * (v83 >> 3);
                v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  v86 = *v82++;
                  *(_QWORD *)v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                v66 = (char *)a1[2];
              }
            }
            else
            {
              v72 = v71 >> 3;
              v22 = v71 >> 3 < -1;
              v73 = (v71 >> 3) + 2;
              if (v22)
                v74 = v73;
              else
                v74 = v72 + 1;
              v75 = &v68[-8 * (v74 >> 1)];
              v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                v66 = (char *)a1[1];
              }
              v77 = &v66[-8 * (v74 >> 1)];
              v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(_QWORD *)v66 = v69;
          v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v11 = v4 >> 3;
      v12 = v10 >> 2;
      if (v12 <= v9 + v11)
        v13 = v9 + v11;
      else
        v13 = v12;
      v14 = v11 - v8;
      v91 = a1 + 3;
      if (v13)
        v15 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v13);
      else
        v15 = 0;
      v38 = -73 * v8;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&v90 = __p[1];
      *((_QWORD *)&v90 + 1) = &v15[8 * v13];
      do
      {
        v88 = operator new(0xFF8uLL);
        sub_10003732C(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        v39 = (_QWORD *)a1[1];
        v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0])
                v48 = 1;
              else
                v48 = (v40 - (char *)__p[0]) >> 2;
              v49 = (char *)sub_10025E6A0((uint64_t)v91, v48);
              v51 = (uint64_t *)__p[1];
              v40 = &v49[8 * (v48 >> 2)];
              v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                v53 = 8 * (v52 >> 3);
                v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  v55 = *v51++;
                  *(_QWORD *)v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(_QWORD *)&v90 = v40;
              *((_QWORD *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                v40 = (char *)v90;
              }
            }
            else
            {
              v42 = v41 >> 3;
              v22 = v41 >> 3 < -1;
              v43 = (v41 >> 3) + 2;
              if (v22)
                v44 = v43;
              else
                v44 = v42 + 1;
              v45 = (char *)__p[1] - 8 * (v44 >> 1);
              v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                v40 = (char *)__p[1];
              }
              v47 = &v40[-8 * (v44 >> 1)];
              v40 = &v45[v46];
              __p[1] = v47;
              *(_QWORD *)&v90 = &v45[v46];
            }
          }
          *(_QWORD *)v40 = *v39;
          v40 = (char *)(v90 + 8);
          *(_QWORD *)&v90 = v90 + 8;
          v39 = (_QWORD *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      v57 = (_QWORD *)a1[2];
      v58 = -7 - (_QWORD)v57;
      while (v57 != (_QWORD *)a1[1])
      {
        --v57;
        v58 += 8;
        sub_1003431B0((uint64_t)__p, v57);
      }
      v59 = (char *)*a1;
      v60 = *(_OWORD *)__p;
      v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      v90 = v62;
      a1[4] += v38;
      if (v57 != (_QWORD *)v62)
        *(_QWORD *)&v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      if (v59)
        operator delete(v59);
    }
  }
}

void sub_1008219B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100821A24(uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x33)
    a2 = 1;
  if (v2 < 0x66)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 51;
  }
  return v4 ^ 1u;
}

_QWORD *sub_100821A80(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4, double *a5)
{
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;

  v5 = a2;
  v6 = a1;
  if (a4 != a2)
  {
    v7 = 23 * (a3 - a1) + 0x2E8BA2E8BA2E8BA3 * ((a4 - *a3) >> 4) - 0x2E8BA2E8BA2E8BA3 * ((a2 - *a1) >> 4);
    if (v7)
    {
      do
      {
        v9 = v7 >> 1;
        v12 = v6;
        v13 = v5;
        sub_10081F17C(&v12, v7 >> 1);
        v10 = v13;
        if (*(double *)(v13 + 8) < *a5)
        {
          v5 = v13 + 176;
          v13 += 176;
          v6 = v12;
          if (v10 + 176 - *v12 == 4048)
          {
            v6 = v12 + 1;
            v5 = v12[1];
          }
          v9 = v7 + ~v9;
        }
        v7 = v9;
      }
      while (v9);
    }
  }
  return v6;
}

void *sub_100821B78(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556)
    sub_10025955C();
  return operator new(12 * a2);
}

float *sub_100821BBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t i;
  unint64_t j;
  float v6;
  float v7;
  float *result;

  for (i = 0; i != 3; ++i)
  {
    for (j = 0; j != 3; ++j)
    {
      v6 = sub_100533668(a1, i);
      v7 = v6 * sub_100533668(a1, j);
      result = (float *)sub_100534AE0(a2, i, j);
      *result = v7;
    }
  }
  return result;
}

float sub_100821C40(uint64_t a1, unint64_t a2)
{
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  unint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint8_t buf[4];
  unint64_t v13;
  __int16 v14;
  uint64_t v15;

  if (a2 >= 9)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102155850);
    v5 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v13 = a2;
      v14 = 2048;
      v15 = 9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Assertion failed: ldx < M*N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMMatrix.h, line 84,invalid element %zu >= %zu.", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102155850);
      v8 = 134218240;
      v9 = a2;
      v10 = 2048;
      v11 = 9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: ldx < M*N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMMatrix.h, line 84,invalid element %zu >= %zu.", (size_t)&v8, 22);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "T CMMatrix<float, 3>::operator[](size_t) const [T = float, M = 3, N = 3]", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  return *(float *)(a1 + 4 * a2);
}

float *sub_100821E18(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  float v10;
  char v11;
  unint64_t v12;
  float *result;
  float v14;
  float v15;
  char v16;
  unint64_t v17;
  char v18;
  char v19;
  unint64_t v20;
  float *v21;
  float v22;
  float v23;
  float *v24;
  float v25;
  float v26;
  float *v27;
  float v28;
  float *v29;
  float v30;
  float v31;
  float *v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float *v40;
  float v41;
  float v42;
  BOOL v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float *v49;
  float *v50;
  float *v51;
  float *v52;
  float v53;
  float *v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  unint64_t i;
  float v62;
  float v63;
  unint64_t v64;
  float32x2_t v65;
  float v66;
  float32x2_t v67;
  float v68;
  float32x2_t v69;
  float v70;

  v4 = 0;
  *(_DWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  do
  {
    *(_DWORD *)sub_100534AE0(a2, v4, v4) = 1065353216;
    v5 = *(_DWORD *)sub_100534AE0(a1, v4, v4);
    *(_DWORD *)sub_100534E68((uint64_t)&v69, v4) = v5;
    v6 = *(_DWORD *)sub_100534AE0(a1, v4, v4);
    *(_DWORD *)sub_100534E68((uint64_t)&v67, v4) = v6;
    *(_DWORD *)sub_100534E68((uint64_t)&v65, v4++) = 0;
  }
  while (v4 != 3);
  v7 = 0;
  do
  {
    v8 = 0;
    v9 = 1;
    v10 = 0.0;
    do
    {
      v11 = v9;
      v12 = v8 + 1;
      do
      {
        result = (float *)sub_100534AE0(a1, v8, v12);
        v14 = *result;
        if (*result <= 0.0)
          v14 = -*result;
        v10 = v10 + v14;
        ++v12;
      }
      while (v12 != 3);
      v9 = 0;
      v8 = 1;
    }
    while ((v11 & 1) != 0);
    if (v10 == 0.0)
      break;
    v15 = 0.0;
    if (v7 <= 2)
      v15 = (float)(v10 * 0.2) / 9.0;
    v16 = 0;
    v17 = 0;
    v64 = v7 + 1;
    v18 = 1;
    do
    {
      v19 = v18;
      v20 = v17 + 1;
      do
      {
        v21 = (float *)sub_100534AE0(a1, v17, v20);
        v22 = *v21;
        if (*v21 <= 0.0)
          v22 = -*v21;
        v23 = v22 * 100.0;
        if (v7 < 4)
          goto LABEL_31;
        v24 = (float *)sub_100534E68((uint64_t)&v69, v17);
        v25 = v23 + *v24;
        if (v25 <= 0.0)
          v26 = -v25;
        else
          v26 = v23 + *v24;
        v27 = (float *)sub_100534E68((uint64_t)&v69, v17);
        v28 = *v27;
        if (*v27 <= 0.0)
          v28 = -*v27;
        if (v26 != v28)
          goto LABEL_31;
        v29 = (float *)sub_100534E68((uint64_t)&v69, v20);
        v30 = v23 + *v29;
        if (v30 <= 0.0)
          v31 = -v30;
        else
          v31 = v23 + *v29;
        v32 = (float *)sub_100534E68((uint64_t)&v69, v20);
        v33 = *v32;
        if (*v32 <= 0.0)
          v33 = -*v32;
        if (v31 == v33)
        {
          result = (float *)sub_100534AE0(a1, v17, v20);
          *result = 0.0;
        }
        else
        {
LABEL_31:
          result = (float *)sub_100534AE0(a1, v17, v20);
          v34 = *result;
          if (*result <= 0.0)
            v34 = -*result;
          if (v34 > v15)
          {
            v35 = *(float *)sub_100534E68((uint64_t)&v69, v20);
            v36 = v35 - *(float *)sub_100534E68((uint64_t)&v69, v17);
            v37 = v23 + v36;
            if ((float)(v23 + v36) <= 0.0)
              v37 = -(float)(v23 + v36);
            v38 = -v36;
            if (v36 > 0.0)
              v38 = v36;
            if (v37 == v38)
            {
              v39 = *(float *)sub_100534AE0(a1, v17, v20) / v36;
            }
            else
            {
              v40 = (float *)sub_100534AE0(a1, v17, v20);
              v41 = (float)(v36 * 0.5) / *v40;
              v42 = -v41;
              v43 = v41 < 0.0;
              if (v41 > 0.0)
                v42 = (float)(v36 * 0.5) / *v40;
              v44 = 1.0 / (float)(v42 + sqrtf((float)(v41 * v41) + 1.0));
              if (v43)
                v39 = -v44;
              else
                v39 = v44;
            }
            v45 = 1.0 / sqrtf((float)(v39 * v39) + 1.0);
            v46 = v39 * v45;
            v47 = (float)(v39 * v45) / (float)(v45 + 1.0);
            v48 = v39 * *(float *)sub_100534AE0(a1, v17, v20);
            v49 = (float *)sub_100534E68((uint64_t)&v65, v17);
            *v49 = *v49 - v48;
            v50 = (float *)sub_100534E68((uint64_t)&v65, v20);
            *v50 = v48 + *v50;
            v51 = (float *)sub_100534E68((uint64_t)&v69, v17);
            *v51 = *v51 - v48;
            v52 = (float *)sub_100534E68((uint64_t)&v69, v20);
            *v52 = v48 + *v52;
            *(_DWORD *)sub_100534AE0(a1, v17, v20) = 0;
            if ((v16 & 1) != 0)
            {
              v53 = *(float *)(a1 + 12);
              v54 = (float *)sub_100534AE0(a1, 0, v20);
              v55 = *v54;
              *(float *)(a1 + 12) = v53 - (float)(v46 * (float)(*v54 + (float)(v53 * v47)));
              *(float *)sub_100534AE0(a1, 0, v20) = v55 + (float)(v46 * (float)(v53 - (float)(v55 * v47)));
            }
            v56 = -v46;
            if (v17 + 1 < v20)
            {
              do
              {
                v57 = *(float *)sub_100534AE0(a1, v17, 1uLL);
                v58 = *(float *)(a1 + 28);
                *(float *)sub_100534AE0(a1, v17, 1uLL) = v57 + (float)(v56 * (float)(v58 + (float)(v57 * v47)));
                *(float *)(a1 + 28) = v58 + (float)(v46 * (float)(v57 - (float)(v58 * v47)));
              }
              while (v20 > 2);
            }
            if (v20 <= 1)
            {
              v59 = *(float *)sub_100534AE0(a1, v17, 2uLL);
              v60 = *(float *)sub_100534AE0(a1, v20, 2uLL);
              *(float *)sub_100534AE0(a1, v17, 2uLL) = v59 + (float)(v56 * (float)(v60 + (float)(v59 * v47)));
              *(float *)sub_100534AE0(a1, v20, 2uLL) = v60 + (float)(v46 * (float)(v59 - (float)(v60 * v47)));
            }
            for (i = 0; i != 3; ++i)
            {
              v62 = *(float *)sub_100534AE0(a2, i, v17);
              v63 = *(float *)sub_100534AE0(a2, i, v20);
              *(float *)sub_100534AE0(a2, i, v17) = v62 + (float)(v56 * (float)(v63 + (float)(v62 * v47)));
              result = (float *)sub_100534AE0(a2, i, v20);
              *result = v63 + (float)(v46 * (float)(v62 - (float)(v63 * v47)));
            }
          }
        }
        ++v20;
      }
      while (v20 != 3);
      v18 = 0;
      v16 = 1;
      v17 = 1;
    }
    while ((v19 & 1) != 0);
    v67 = vadd_f32(v65, v67);
    v68 = v66 + v68;
    v69 = v67;
    v70 = v68;
    v66 = 0.0;
    v65 = 0;
    ++v7;
  }
  while (v64 != 10);
  return result;
}

int *sub_1008223D8(uint64_t *a1, unint64_t a2, unint64_t a3)
{
  float v6;
  int *result;
  int *v8;
  int *v9;
  int v10;
  int *v11;
  int *v12;
  int v13;
  int *v14;
  int *v15;
  int v16;
  int *v17;
  int v18;

  v6 = *(float *)sub_100534E68(*a1, a2);
  result = (int *)sub_100534E68(*a1, a3);
  if (v6 < *(float *)result)
  {
    v8 = (int *)sub_100534E68(*a1, a2);
    v9 = (int *)sub_100534E68(*a1, a3);
    v10 = *v8;
    *v8 = *v9;
    *v9 = v10;
    v11 = (int *)sub_100534AE0(a1[1], 0, a2);
    v12 = (int *)sub_100534AE0(a1[1], 0, a3);
    v13 = *v11;
    *v11 = *v12;
    *v12 = v13;
    v14 = (int *)sub_100534AE0(a1[1], 1uLL, a2);
    v15 = (int *)sub_100534AE0(a1[1], 1uLL, a3);
    v16 = *v14;
    *v14 = *v15;
    *v15 = v16;
    v17 = (int *)sub_100534AE0(a1[1], 2uLL, a2);
    result = (int *)sub_100534AE0(a1[1], 2uLL, a3);
    v18 = *v17;
    *v17 = *result;
    *result = v18;
  }
  return result;
}

_QWORD *sub_1008224F8(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4, double *a5)
{
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;

  v5 = a2;
  v6 = a1;
  if (a4 != a2)
  {
    v7 = 51 * (a3 - a1) - 0x3333333333333333 * ((a4 - *a3) >> 4) + 0x3333333333333333 * ((a2 - *a1) >> 4);
    if (v7)
    {
      do
      {
        v9 = v7 >> 1;
        v12 = v6;
        v13 = v5;
        sub_1008225DC(&v12, v7 >> 1);
        v10 = v13;
        if (*(double *)(v13 + 48) < *a5)
        {
          v5 = v13 + 80;
          v13 += 80;
          v6 = v12;
          if (v10 + 80 - *v12 == 4080)
          {
            v6 = v12 + 1;
            v5 = v12[1];
          }
          v9 = v7 + ~v9;
        }
        v7 = v9;
      }
      while (v9);
    }
  }
  return v6;
}

_QWORD *sub_1008225DC(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;

  if (a2)
  {
    v2 = (_QWORD *)*result;
    v3 = a2 - 0x3333333333333333 * ((uint64_t)(result[1] - *(_QWORD *)*result) >> 4);
    if ((uint64_t)v3 < 1)
    {
      v5 = 50 - v3;
      v6 = &v2[-(v5 / 0x33)];
      *result = v6;
      v4 = *v6 + 80 * (51 * (v5 / 0x33) - v5) + 4000;
    }
    else
    {
      *result = &v2[v3 / 0x33];
      v4 = v2[v3 / 0x33] + 80 * (v3 % 0x33);
    }
    result[1] = v4;
  }
  return result;
}

_QWORD *sub_100822688(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;

  v5 = a2;
  v6 = a1;
  if (a4 != a2)
  {
    v7 = 73 * (a3 - a1) + 0x6DB6DB6DB6DB6DB7 * ((a4 - *a3) >> 3) - 0x6DB6DB6DB6DB6DB7 * ((a2 - *a1) >> 3);
    if (v7)
    {
      do
      {
        v9 = v7 >> 1;
        v12 = v6;
        v13 = v5;
        sub_10081FEC4(&v12, v7 >> 1);
        v10 = v13;
        if (*(double *)(v13 + 40) <= *(double *)(a5 + 40))
        {
          v5 = v13 + 56;
          v13 += 56;
          v6 = v12;
          if (v10 + 56 - *v12 == 4088)
          {
            v6 = v12 + 1;
            v5 = v12[1];
          }
          v9 = v7 + ~v9;
        }
        v7 = v9;
      }
      while (v9);
    }
  }
  return v6;
}

_QWORD *sub_100822780(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v9;
  _QWORD *v11;
  uint64_t v12;

  v5 = a2;
  v6 = a1;
  if (a4 != a2)
  {
    v7 = 73 * (a3 - a1) + 0x6DB6DB6DB6DB6DB7 * ((a4 - *a3) >> 3) - 0x6DB6DB6DB6DB6DB7 * ((a2 - *a1) >> 3);
    if (v7)
    {
      do
      {
        v9 = v7 >> 1;
        v11 = v6;
        v12 = v5;
        sub_10081FEC4(&v11, v7 >> 1);
        if (*(double *)(a5 + 40) > *(double *)(v12 + 40))
        {
          v6 = v11;
          v5 = v12 + 56;
          if (v12 + 56 - *v11 == 4088)
          {
            v6 = v11 + 1;
            v5 = v11[1];
          }
          v9 = v7 + ~v9;
        }
        v7 = v9;
      }
      while (v9);
    }
  }
  return v6;
}

void sub_100822874(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x33;
  v4 = v2 - 51;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100822B3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_100822B88(uint64_t a1, void *a2)
{
  __CFNotificationCenter *DarwinNotifyCenter;
  __CFNotificationCenter *v4;
  __CFNotificationCenter *v5;
  char v6;
  __CFNotificationCenter *v7;
  const __CFString *v8;
  __CFNotificationCenter *v9;
  const __CFString *v10;
  int v11;

  *(_QWORD *)sub_1008BCB50((const void *)a1, a2) = off_1021558E8;
  *(_QWORD *)(a1 + 128) = objc_msgSend((Class)off_1022A46D8[0](), "sharedInstance");
  *(_BYTE *)(a1 + 136) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 208))(a1);
  *(_BYTE *)(a1 + 137) = sub_100822E30();
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  sub_1005695B4(a1 + 160, CFSTR("com.apple.nanolifestyle.sessiontrackerapp"), 1, (uint64_t)CFSTR("mobile"));
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0xBFF0000000000000;
  *(_WORD *)(a1 + 312) = 0;
  *(_DWORD *)(a1 + 316) = 0;
  *(_BYTE *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 324) = 0;
  v11 = 0;
  sub_1004AD1D8((unsigned __int8 *)(a1 + 328), "OverrideFitnessTrackingChargerWithType", &v11, 0);
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(DarwinNotifyCenter, (const void *)a1, (CFNotificationCallback)sub_100822E84, CFSTR("NanoLifestylePrivacyPreferencesChangedNotification"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  v4 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(v4, (const void *)a1, (CFNotificationCallback)sub_1008230A4, CFSTR("NanoLifestyleSessionTrackerAppPreferencesChangedNotification"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  v5 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(v5, (const void *)a1, (CFNotificationCallback)sub_1008232C4, CFSTR("NanoLifestyleEnableFitnessDataCollectionSettingDidChangeNotification"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 216))(a1);
  sub_1008BD33C(a1, v6);
  v7 = CFNotificationCenterGetDarwinNotifyCenter();
  v8 = (const __CFString *)off_1022A46E0[0]();
  CFNotificationCenterAddObserver(v7, (const void *)a1, (CFNotificationCallback)sub_1008234E4, v8, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  v9 = CFNotificationCenterGetDarwinNotifyCenter();
  v10 = (const __CFString *)off_1022A46E8();
  CFNotificationCenterAddObserver(v9, (const void *)a1, (CFNotificationCallback)sub_1008234E4, v10, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  sub_100647FA8();
}

void sub_100822DE4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;

  v4 = v1[37];
  v1[37] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  sub_100569628(v2);
  sub_1008BCFFC(v1);
  _Unwind_Resume(a1);
}

id sub_100822E30()
{
  return objc_msgSend(objc_msgSend(objc_msgSend((Class)off_1022A46D8[0](), "sharedInstance"), "getActivePairedDevice"), "supportsCapability:", objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", CFSTR("C5DDE5DD-2FF7-4735-80A3-0108488556DE")));
}

void sub_100822E84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v10;
  NSObject *v11;
  id v12;
  _QWORD v13[9];
  os_activity_scope_state_s state;
  char v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;

  CLProfilingIdentify("CLFitnessTrackingNotifier::fitnessTrackingStateChanged");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertOutside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102155A18);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v15 = 1;
    v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFitnessTrackingNotifier::fitnessTrackingStateChanged", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102155A18);
    v11 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2082;
      v21 = "activity";
      v22 = 2050;
      v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFitnessTrackingNotifier::fitnessTrackingStateChanged\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v15 = 0;
  }
  v12 = objc_msgSend(*(id *)(a2 + 32), "silo");
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100826A4C;
  v13[3] = &unk_1021382B0;
  v13[4] = a2;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  objc_msgSend(v12, "sync:", v13);
  if (v15)
    os_activity_scope_leave(&state);
}

void sub_100823084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1008230A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v10;
  NSObject *v11;
  id v12;
  _QWORD v13[9];
  os_activity_scope_state_s state;
  char v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;

  CLProfilingIdentify("CLFitnessTrackingNotifierWatch::nanoLifestyleSessionTrackerAppPreferencesChanged");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertOutside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102155A18);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v15 = 1;
    v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFitnessTrackingNotifierWatch::nanoLifestyleSessionTrackerAppPreferencesChanged", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102155A18);
    v11 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2082;
      v21 = "activity";
      v22 = 2050;
      v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFitnessTrackingNotifierWatch::nanoLifestyleSessionTrackerAppPreferencesChanged\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v15 = 0;
  }
  v12 = objc_msgSend(*(id *)(a2 + 32), "silo");
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100826A8C;
  v13[3] = &unk_1021382B0;
  v13[4] = a2;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  objc_msgSend(v12, "sync:", v13);
  if (v15)
    os_activity_scope_leave(&state);
}

void sub_1008232A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1008232C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v10;
  NSObject *v11;
  id v12;
  _QWORD v13[9];
  os_activity_scope_state_s state;
  char v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;

  CLProfilingIdentify("CLFitnessTrackingNotifierWatch::nanoLifestyleEnableFitnessDataCollectionSettingChanged");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertOutside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102155A18);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v15 = 1;
    v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFitnessTrackingNotifierWatch::nanoLifestyleEnableFitnessDataCollectionSettingChanged", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102155A18);
    v11 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2082;
      v21 = "activity";
      v22 = 2050;
      v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFitnessTrackingNotifierWatch::nanoLifestyleEnableFitnessDataCollectionSettingChanged\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v15 = 0;
  }
  v12 = objc_msgSend(*(id *)(a2 + 32), "silo");
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100826A94;
  v13[3] = &unk_1021382B0;
  v13[4] = a2;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  objc_msgSend(v12, "sync:", v13);
  if (v15)
    os_activity_scope_leave(&state);
}

void sub_1008234C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1008234E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v10;
  NSObject *v11;
  id v12;
  _QWORD v13[9];
  os_activity_scope_state_s state;
  char v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;

  CLProfilingIdentify("CLFitnessTrackingNotifierWatch::pairingStateChanged");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertOutside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102155A18);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v15 = 1;
    v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFitnessTrackingNotifierWatch::pairingStateChanged", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102155A18);
    v11 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2082;
      v21 = "activity";
      v22 = 2050;
      v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFitnessTrackingNotifierWatch::pairingStateChanged\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v15 = 0;
  }
  v12 = objc_msgSend(*(id *)(a2 + 32), "silo");
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100826AD0;
  v13[3] = &unk_1021382B0;
  v13[4] = a2;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  objc_msgSend(v12, "sync:", v13);
  if (v15)
    os_activity_scope_leave(&state);
}

void sub_1008236E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100823704(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLFitnessTrackingNotifierWatch::onBatteryNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102155A18);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFitnessTrackingNotifierWatch::onBatteryNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102155A18);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFitnessTrackingNotifierWatch::onBatteryNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1008247B0((_DWORD *)a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1008238BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

id sub_1008238DC(_DWORD *a1)
{
  id result;
  int v3;
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  result = +[CMFitnessShared isDeviceSatellitePaired](CMFitnessShared, "isDeviceSatellitePaired");
  if ((_DWORD)result)
    v3 = 2;
  else
    v3 = 1;
  if (a1[38] != v3)
  {
    a1[38] = v3;
    if (qword_10229FF10 != -1)
      dispatch_once(&qword_10229FF10, &stru_102155A38);
    v4 = qword_10229FF18;
    if (os_log_type_enabled((os_log_t)qword_10229FF18, OS_LOG_TYPE_DEFAULT))
    {
      v5 = a1[38];
      *(_DWORD *)buf = 67240192;
      v11 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CM Satellite Pairing State,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF10 != -1)
        dispatch_once(&qword_10229FF10, &stru_102155A38);
      v6 = a1[38];
      v9[0] = 67240192;
      v9[1] = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF18, 0, "CM Satellite Pairing State,%{public}d", v9, 8);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLFitnessTrackingNotifierWatch::updateSatellitePairingState()", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    return (id)sub_100823ABC(a1);
  }
  return result;
}

uint64_t sub_100823ABC(_DWORD *a1)
{
  int v2;
  int v3;
  int v4;

  if (sub_100824C3C((uint64_t)a1))
    v2 = 2;
  else
    v2 = 1;
  sub_100824DB0((uint64_t)a1, a1 + 35, v2, 1);
  if (sub_100824CC0((uint64_t)a1))
    v3 = 2;
  else
    v3 = 1;
  sub_100824DB0((uint64_t)a1, a1 + 36, v3, 2);
  if (sub_100824D38((uint64_t)a1))
    v4 = 2;
  else
    v4 = 1;
  return sub_100824DB0((uint64_t)a1, a1 + 37, v4, 7);
}

uint64_t sub_100823B38(_QWORD *a1)
{
  __CFNotificationCenter *DarwinNotifyCenter;
  __CFNotificationCenter *v3;
  __CFNotificationCenter *v4;
  const __CFString *v5;
  __CFNotificationCenter *v6;
  const __CFString *v7;
  uint64_t v8;

  *a1 = off_1021558E8;
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(DarwinNotifyCenter, a1, CFSTR("NanoLifestylePrivacyPreferencesChangedNotification"), 0);
  v3 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(v3, a1, CFSTR("NanoLifestyleSessionTrackerAppPreferencesChangedNotification"), 0);
  v4 = CFNotificationCenterGetDarwinNotifyCenter();
  v5 = (const __CFString *)off_1022A46E0[0]();
  CFNotificationCenterRemoveObserver(v4, a1, v5, 0);
  v6 = CFNotificationCenterGetDarwinNotifyCenter();
  v7 = (const __CFString *)off_1022A46E8();
  CFNotificationCenterRemoveObserver(v6, a1, v7, 0);

  a1[16] = 0;
  v8 = a1[37];
  a1[37] = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  sub_100569628(a1 + 20);
  return sub_1008BCFFC(a1);
}

void sub_100823C18(_QWORD *a1)
{
  sub_100823B38(a1);
  operator delete();
}

BOOL sub_100823C3C(uint64_t a1)
{
  NSObject *v1;
  _BOOL8 result;
  void *v3;
  NSObject *v4;
  const char *v5;
  NSObject *v6;
  uint8_t *v7;
  const char *v8;
  uint8_t *v9;
  _QWORD v10[2];
  uint8_t buf[1640];

  if (*(_BYTE *)(a1 + 109))
  {
    if (qword_10229FF10 != -1)
      dispatch_once(&qword_10229FF10, &stru_102155A38);
    v1 = qword_10229FF18;
    if (os_log_type_enabled((os_log_t)qword_10229FF18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "#SystemState, Overriding device activation status check.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF10 != -1)
        dispatch_once(&qword_10229FF10, &stru_102155A38);
      LOWORD(v10[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF18, 0, "#SystemState, Overriding device activation status check.", v10, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLFitnessTrackingNotifierWatch::isDeviceActivated() const", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    return 1;
  }
  v3 = *(void **)(a1 + 128);
  if (v3)
  {
    if (objc_msgSend(v3, "pairingID"))
      return 1;
    if (qword_10229FF10 != -1)
      dispatch_once(&qword_10229FF10, &stru_102155A38);
    v4 = qword_10229FF18;
    if (os_log_type_enabled((os_log_t)qword_10229FF18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#SystemState, Unable to obtain pairing id, suspending activity tracking.", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF10 != -1)
        dispatch_once(&qword_10229FF10, &stru_102155A38);
      LOWORD(v10[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF18, 0, "#SystemState, Unable to obtain pairing id, suspending activity tracking.", v10, 2, v10[0]);
LABEL_27:
      v7 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLFitnessTrackingNotifierWatch::isDeviceActivated() const", "%s\n", v5);
      if (v7 != buf)
        free(v7);
      return 0;
    }
  }
  else
  {
    if (qword_10229FF10 != -1)
      dispatch_once(&qword_10229FF10, &stru_102155A38);
    v6 = qword_10229FF18;
    if (os_log_type_enabled((os_log_t)qword_10229FF18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#SystemState, Unable to query pairing id, suspending activity tracking.", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF10 != -1)
        dispatch_once(&qword_10229FF10, &stru_102155A38);
      LOWORD(v10[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF18, 0, "#SystemState, Unable to query pairing id, suspending activity tracking.", v10, 2, v10[0]);
      goto LABEL_27;
    }
  }
  return result;
}

BOOL sub_100823FE4()
{
  const __CFBoolean *v0;
  const __CFBoolean *v1;
  int Value;
  NSObject *v3;
  _BOOL8 result;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  _WORD v10[8];
  uint8_t buf[1640];

  v0 = (const __CFBoolean *)CFPreferencesCopyValue(CFSTR("EnableFitnessTracking"), CFSTR("com.apple.nanolifestyle.privacy"), CFSTR("mobile"), kCFPreferencesAnyHost);
  if (!v0)
  {
    if (qword_10229FF10 != -1)
      dispatch_once(&qword_10229FF10, &stru_102155A38);
    v7 = qword_10229FF18;
    if (os_log_type_enabled((os_log_t)qword_10229FF18, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "#SystemState, Failed to get fitness tracking state in Bridge->Motion&Fitness. It may not have been set yet. Assuming default.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF10 != -1)
        dispatch_once(&qword_10229FF10, &stru_102155A38);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF18, 1, "#SystemState, Failed to get fitness tracking state in Bridge->Motion&Fitness. It may not have been set yet. Assuming default.", v10, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLFitnessTrackingNotifierWatch::isFitnessTrackingEnabled() const", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    return 1;
  }
  v1 = v0;
  Value = CFBooleanGetValue(v0);
  CFRelease(v1);
  if (Value)
    return 1;
  if (qword_10229FF10 != -1)
    dispatch_once(&qword_10229FF10, &stru_102155A38);
  v3 = qword_10229FF18;
  if (os_log_type_enabled((os_log_t)qword_10229FF18, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#SystemState, Fitness tracking is disabled, suspending activity tracking.", buf, 2u);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF10 != -1)
      dispatch_once(&qword_10229FF10, &stru_102155A38);
    v10[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF18, 0, "#SystemState, Fitness tracking is disabled, suspending activity tracking.", v10, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLFitnessTrackingNotifierWatch::isFitnessTrackingEnabled() const", "%s\n", v5);
    if (v6 != buf)
      free(v6);
    return 0;
  }
  return result;
}

void sub_1008242E4(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  NSObject *v6;
  int v7;
  void *v8;
  ALActivityLog *v9;
  int v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  _DWORD v14[2];
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  uint8_t buf[4];
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;

  v2 = *(unsigned int *)(a1 + 316);
  v3 = sub_100186264(a1);
  BYTE4(v13) = v3;
  *(_WORD *)((char *)&v13 + 5) = *(_WORD *)(a1 + 136);
  if (BYTE5(v13))
  {
    v4 = sub_100186264(a1);
    if ((_DWORD)v2 == 3)
      v5 = 0;
    else
      v5 = v4;
  }
  else
  {
    v5 = 0;
  }
  HIBYTE(v13) = v5;
  if (qword_10229FF10 != -1)
    dispatch_once(&qword_10229FF10, &stru_102155A38);
  v6 = qword_10229FF18;
  if (os_log_type_enabled((os_log_t)qword_10229FF18, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_DWORD *)(a1 + 316);
    *(_DWORD *)buf = 67240960;
    v22 = v3;
    v23 = 1026;
    v24 = BYTE5(v13);
    v25 = 1026;
    v26 = v7;
    v27 = 1026;
    v28 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#SystemState, Watch, Enabled, %{public}d, DeviceActivated, %{public}d, OnCharger, %{public}d, allowed, %{public}d", buf, 0x1Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF10 != -1)
      dispatch_once(&qword_10229FF10, &stru_102155A38);
    v10 = *(_DWORD *)(a1 + 316);
    v14[0] = 67240960;
    v14[1] = v3;
    v15 = 1026;
    v16 = BYTE5(v13);
    v17 = 1026;
    v18 = v10;
    v19 = 1026;
    v20 = v5;
    LODWORD(v13) = 26;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF18, 0, "#SystemState, Watch, Enabled, %{public}d, DeviceActivated, %{public}d, OnCharger, %{public}d, allowed, %{public}d", v14, v13);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLFitnessTrackingNotifierWatch::notifyClients()", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  *(_DWORD *)buf = 0;
  if (sub_1001B7864(a1, (int *)buf, 1))
  {
    *(_DWORD *)buf = 0;
    (*(void (**)(uint64_t, uint8_t *, char *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, (char *)&v13 + 4, 1, 0xFFFFFFFFLL, 0);
  }
  v8 = objc_autoreleasePoolPush();
  v9 = objc_alloc_init(ALActivityLog);
  -[ALActivityLog setTimestamp:](v9, "setTimestamp:", CFAbsoluteTimeGetCurrent());
  -[ALActivityLog setFitnessTracking:](v9, "setFitnessTracking:", objc_alloc_init(ALCMFitnessTracking));
  -[ALCMFitnessTracking setFitnessTrackingEnabled:](-[ALActivityLog fitnessTracking](v9, "fitnessTracking"), "setFitnessTrackingEnabled:", BYTE4(v13));
  -[ALCMFitnessTracking setPowerSource:](-[ALActivityLog fitnessTracking](v9, "fitnessTracking"), "setPowerSource:", v2);
  objc_msgSend(-[CLServiceVendor proxyForService:](+[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance"), "proxyForService:", CFSTR("CLActivityLogger")), "logData:", v9);
  objc_autoreleasePoolPop(v8);
}

id sub_1008245EC(_BYTE *a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FF10 != -1)
    dispatch_once(&qword_10229FF10, &stru_102155A38);
  v2 = qword_10229FF18;
  if (os_log_type_enabled((os_log_t)qword_10229FF18, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#SystemState, Pairing state changed", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF10 != -1)
      dispatch_once(&qword_10229FF10, &stru_102155A38);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF18, 0, "#SystemState, Pairing state changed", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLFitnessTrackingNotifierWatch::pairingStateChanged(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  a1[136] = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 208))(a1);
  a1[137] = sub_100822E30();
  (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 224))(a1);
  return sub_1008238DC(a1);
}

void sub_1008247B0(_DWORD *a1, uint64_t a2, int *a3, uint64_t a4)
{
  int v5;
  int v6;
  int v8;
  NSObject *v9;
  int v10;
  int v11;
  NSObject *v12;
  double v13;
  uint8_t *v14;
  uint8_t *v15;
  NSObject *v17;
  int v18;
  int v19;
  double v20;
  uint8_t *v21;
  int v22;
  int v23;
  const char *v24;
  uint8_t *v25;
  uint64_t v26;
  int v27;
  int v28;
  __int16 v29;
  int v30;
  uint8_t buf[4];
  int v32;
  __int16 v33;
  int v34;

  if (*a3 == 7)
  {
    v5 = a1[83];
    v6 = a1[79];
    if (v6 != *(_DWORD *)(a4 + 12) || v5 != 0)
    {
      if (v5)
        v8 = a1[83];
      else
        v8 = *(_DWORD *)(a4 + 12);
      a1[79] = v8;
      if (qword_10229FF10 != -1)
        dispatch_once(&qword_10229FF10, &stru_102155A38);
      v9 = qword_10229FF18;
      if (os_log_type_enabled((os_log_t)qword_10229FF18, OS_LOG_TYPE_DEFAULT))
      {
        v10 = a1[83];
        v11 = a1[79];
        *(_DWORD *)buf = 67240448;
        v32 = v10;
        v33 = 1026;
        v34 = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#SystemState, OverrideChargerType, %{public}d, NotifyChargerType, %{public}d", buf, 0xEu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FF10 != -1)
          dispatch_once(&qword_10229FF10, &stru_102155A38);
        v22 = a1[83];
        v23 = a1[79];
        v27 = 67240448;
        v28 = v22;
        v29 = 1026;
        v30 = v23;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF18, 0, "#SystemState, OverrideChargerType, %{public}d, NotifyChargerType, %{public}d", &v27, 14);
        v25 = (uint8_t *)v24;
        sub_100512490("Generic", 1, 0, 2, "void CLFitnessTrackingNotifierWatch::onBatteryNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v24);
        if (v25 != buf)
          free(v25);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 224))(a1);
      v6 = a1[79];
    }
    if (v6 == 3)
    {
      if (qword_10229FF10 != -1)
        dispatch_once(&qword_10229FF10, &stru_102155A38);
      v12 = qword_10229FF18;
      if (os_log_type_enabled((os_log_t)qword_10229FF18, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#SystemState, Device on-charger, suspending activity tracking.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FF10 != -1)
          dispatch_once(&qword_10229FF10, &stru_102155A38);
        LOWORD(v27) = 0;
        LODWORD(v26) = 2;
        v13 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF18, 0, "#SystemState, Device on-charger, suspending activity tracking.", &v27, v26);
        v15 = v14;
        sub_100512490("Generic", 1, 0, 2, "void CLFitnessTrackingNotifierWatch::onBatteryNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v13);
LABEL_33:
        if (v15 != buf)
          free(v15);
      }
    }
  }
  else
  {
    if (qword_10229FF10 != -1)
      dispatch_once(&qword_10229FF10, &stru_102155A38);
    v17 = qword_10229FF18;
    if (os_log_type_enabled((os_log_t)qword_10229FF18, OS_LOG_TYPE_ERROR))
    {
      v18 = *a3;
      *(_DWORD *)buf = 67240192;
      v32 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "#SystemState, Un-handled notification,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF10 != -1)
        dispatch_once(&qword_10229FF10, &stru_102155A38);
      v19 = *a3;
      v27 = 67240192;
      v28 = v19;
      v20 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF18, 16, "#SystemState, Un-handled notification,%{public}d", &v27, 8);
      v15 = v21;
      sub_100512490("Generic", 1, 0, 0, "void CLFitnessTrackingNotifierWatch::onBatteryNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v20);
      goto LABEL_33;
    }
  }
}

id sub_100824C3C(uint64_t a1)
{
  NSNumber *v2;
  BOOL v4;

  v4 = 0;
  if (sub_1001E48E4(a1 + 160, (uint64_t)CFSTR("NLPredictedActivityStartEnableNotification"), &v4))
    v2 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v4);
  else
    v2 = 0;
  return +[CMFitnessShared isWorkoutStartReminderEnabledWhenDeviceIsSatellitePaired:isInMoveTimeMode:withCurrentSetting:](CMFitnessShared, "isWorkoutStartReminderEnabledWhenDeviceIsSatellitePaired:isInMoveTimeMode:withCurrentSetting:", *(_DWORD *)(a1 + 152) == 2, *(_DWORD *)(a1 + 116) == 2, v2);
}

id sub_100824CC0(uint64_t a1)
{
  NSNumber *v2;
  BOOL v4;

  v4 = 0;
  if (sub_1001E48E4(a1 + 160, (uint64_t)CFSTR("NLPredictedActivityEndEnableNotification"), &v4))
    v2 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v4);
  else
    v2 = 0;
  return +[CMFitnessShared isWorkoutEndReminderEnabledWhenDeviceIsInMoveTimeMode:withCurrentSetting:](CMFitnessShared, "isWorkoutEndReminderEnabledWhenDeviceIsInMoveTimeMode:withCurrentSetting:", *(_DWORD *)(a1 + 116) == 2, v2);
}

id sub_100824D38(uint64_t a1)
{
  NSNumber *v2;
  BOOL v4;

  v4 = 0;
  if (sub_1001E48E4(a1 + 160, (uint64_t)CFSTR("NLPredictedActivityResumeEnableNotification"), &v4))
    v2 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v4);
  else
    v2 = 0;
  return +[CMFitnessShared isWorkoutResumeReminderEnabledWhenDeviceIsInMoveTimeMode:withCurrentSetting:](CMFitnessShared, "isWorkoutResumeReminderEnabledWhenDeviceIsInMoveTimeMode:withCurrentSetting:", *(_DWORD *)(a1 + 116) == 2, v2);
}

uint64_t sub_100824DB0(uint64_t result, _DWORD *a2, int a3, int a4)
{
  uint64_t v6;
  NSObject *v7;
  _BOOL4 v8;
  int v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  _BOOL4 v17;

  v9 = a4;
  if (*a2 != a3)
  {
    v6 = result;
    *a2 = a3;
    v8 = a3 == 2;
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102155A58);
    v7 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289538;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 1026;
      v15 = a4;
      v16 = 1026;
      v17 = a3 == 2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Workout Alert Flag\", \"notification\":%{public}d, \"enabled\":%{public}hhd}", buf, 0x1Eu);
    }
    return (*(uint64_t (**)(uint64_t, int *, _BOOL4 *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 152))(v6, &v9, &v8, 1, 0xFFFFFFFFLL, 0);
  }
  return result;
}

uint64_t sub_100824EFC(_DWORD *a1)
{
  sub_1008BD5A0(a1);
  return sub_100823ABC(a1);
}

uint64_t sub_100824F20()
{
  unsigned int v0;
  uint64_t v1;
  _BYTE v3[143];
  BOOL v4;

  sub_100197040();
  if (!sub_10075D288())
    return 0;
  sub_1005695B4((uint64_t)v3, CFSTR("com.apple.nanolifestyle"), 1, (uint64_t)CFSTR("mobile"));
  v4 = 0;
  v0 = sub_1001E4874((uint64_t)v3, "AlwaysOnMotionSensorLogging", &v4);
  if (v4)
    v1 = v0;
  else
    v1 = 0;
  sub_100569628(v3);
  return v1;
}

void sub_100824FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100569628(&a9);
  _Unwind_Resume(a1);
}

void sub_100824FBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102155A18);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_102155A18);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData>::removeClient(int) [Notification_T = CLFitnessTrackingNotifier_Type::Notification, NotificationData_T = CLFitnessTrackingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

uint64_t sub_100825230(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022A46F0);
}

uint64_t sub_100825244(uint64_t a1, int a2, int *a3, char *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t *v29;
  char v30;
  uint64_t **v31;
  char v32;
  uint64_t **v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  const char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _BYTE v42[12];
  __int16 v43;
  int v44;
  _BYTE buf[12];
  __int16 v46;
  int v47;

  v41 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(_QWORD *)v42 = v10;
      v17 = *a3;
      v20 = *(_QWORD *)(v10 + 48);
      v19 = v10 + 48;
      v18 = v20;
      if (!v20)
        goto LABEL_31;
      v21 = v19;
      do
      {
        v22 = *(_DWORD *)(v18 + 28);
        v23 = v22 < v17;
        if (v22 >= v17)
          v24 = (uint64_t *)v18;
        else
          v24 = (uint64_t *)(v18 + 8);
        if (!v23)
          v21 = v18;
        v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28))
LABEL_31:
        v21 = v19;
      v25 = *(_QWORD *)(a1 + 64);
      if (!v25)
        goto LABEL_42;
      v26 = a1 + 64;
      do
      {
        v27 = *(_DWORD *)(v25 + 32);
        v28 = v27 < v17;
        if (v27 >= v17)
          v29 = (uint64_t *)v25;
        else
          v29 = (uint64_t *)(v25 + 8);
        if (!v28)
          v26 = v25;
        v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        v40 = v26;
        v34 = *(_QWORD *)(v26 + 56);
        v35 = *a4;
        *(_QWORD *)buf = &v41;
        *((_BYTE *)sub_1001AFE94((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v35;
        *(_DWORD *)buf = 0;
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _BYTE *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_100827A34();
        }
        if (v34)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        v40 = a1 + 64;
        v30 = byte_1022A46F1;
        HIDWORD(v39) = v17;
        *(_QWORD *)buf = (char *)&v39 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v30;
        HIDWORD(v39) = *a3;
        *(_QWORD *)buf = (char *)&v39 + 4;
        v31 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v31 + 8);
        v32 = *a4;
        HIDWORD(v39) = *a3;
        *(_QWORD *)buf = (char *)&v39 + 4;
        v33 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)buf = &v41;
        *((_BYTE *)sub_1001AFE94(v33 + 5, &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v32;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        *(_DWORD *)buf = *a3;
        sub_1000C6190((uint64_t **)(*(_QWORD *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102155A18);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v15;
    v46 = 1026;
    v47 = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  v16 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102155A18);
    v36 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v36 = (_QWORD *)*v36;
    *(_DWORD *)v42 = 136446466;
    *(_QWORD *)&v42[4] = v36;
    v43 = 1026;
    v44 = a2;
    LODWORD(v39) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
      v42,
      v39);
    v38 = (char *)v37;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLFitnessTrackingNotifier_Type::Notification, NotificationData_T = CLFitnessTrackingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v37);
    if (v38 != buf)
      free(v38);
    return 0;
  }
  return result;
}

BOOL sub_1008256A0(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102155A18);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102155A18);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLFitnessTrackingNotifier_Type::Notification, NotificationData_T = CLFitnessTrackingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

BOOL sub_100825920(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE buf[12];
  __int16 v36;
  void **v37;
  char v38;
  int v39;
  _QWORD *v40;
  __int16 v41;
  _BYTE *v42;
  void *__p[2];
  char v44;

  HIDWORD(v34) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009E904((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102155A18);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v44 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v36 = 2082;
                v37 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_102155A18);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v38 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v39 = 136446466;
                v40 = v29;
                v41 = 2082;
                v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                v33 = v32;
                if (v38 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLFitnessTrackingNotifier_Type::Notification, NotificationData_T = CLFitnessTrackingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v33);
                if (v33 != (char *)__p)
                  free(v33);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_100825CA8(uint64_t a1, int *a2, int *a3)
{
  _QWORD *v6;
  int v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  int v13;
  __int128 v14;
  int *v15;

  v6 = operator new(0x20uLL);
  v6[2] = 0;
  *v6 = off_102155A88;
  v6[1] = 0;
  v7 = *a3;
  *((_QWORD *)&v14 + 1) = v6;
  *((_DWORD *)v6 + 6) = v7;
  *(_QWORD *)&v14 = v6 + 3;
  v13 = *a2;
  v15 = &v13;
  v8 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v13, (uint64_t)&unk_101B9EB60, &v15);
  sub_1002B7674((uint64_t)(v8 + 8), &v14);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return 1;
}

void sub_100825D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100825D90(uint64_t a1, signed __int32 *a2, _DWORD *a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  os_activity_scope_state_s state;
  uint8_t buf[8];
  _BYTE v30[20];
  __int16 v31;
  _QWORD *v32;
  __int16 v33;
  std::__shared_weak_count *v34;
  _QWORD **v35;
  _QWORD *v36[3];
  std::__shared_weak_count *v37;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102155A18);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v30 = 2082;
      *(_QWORD *)&v30[2] = "";
      *(_WORD *)&v30[10] = 2082;
      *(_QWORD *)&v30[12] = "activity";
      v31 = 2082;
      v32 = v10;
      v33 = 2050;
      v34 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v35 = v36;
      memset(v36, 0, sizeof(v36));
      v37 = 0;
      sub_1004A6D60((uint64_t)buf, a2, (uint64_t)&v35);
      v14 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)buf);
      v18 = v34;
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v30, *(_QWORD **)&v30[8]);
      v21 = v37;
      if (v37)
      {
        v22 = (unint64_t *)&v37->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v35, v36[0]);
    }
    if (a4)
    {
      v24 = operator new(0x20uLL);
      v24[2] = 0;
      *v24 = off_102155A88;
      v24[1] = 0;
      *((_DWORD *)v24 + 6) = *a3;
      *(_QWORD *)buf = v24 + 3;
      *(_QWORD *)v30 = v24;
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)buf);
      v25 = *(std::__shared_weak_count **)v30;
      if (*(_QWORD *)v30)
      {
        v26 = (unint64_t *)(*(_QWORD *)v30 + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_100826C38();
    os_activity_scope_leave(&state);
  }
}

void sub_1008263C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_100826414(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102155A18);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102155A18);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData>::listClients() [Notification_T = CLFitnessTrackingNotifier_Type::Notification, NotificationData_T = CLFitnessTrackingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102155A18);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102155A18);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData>::listClients() [Notification_T = CLFitnessTrackingNotifier_Type::Notification, NotificationData_T = CLFitnessTrackingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_102155A18);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102155A18);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData>::listClients() [Notification_T = CLFitnessTrackingNotifier_Type::Notification, NotificationData_T = CLFitnessTrackingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

Class sub_1008269BC()
{
  Class result;

  if (qword_102304B78 != -1)
    dispatch_once(&qword_102304B78, &stru_1021559F8);
  result = objc_getClass("NRPairedDeviceRegistry");
  qword_102304B70 = (uint64_t)result;
  off_1022A46D8[0] = sub_100826A18;
  return result;
}

uint64_t sub_100826A18()
{
  return qword_102304B70;
}

void sub_100826A24(id a1)
{
  qword_102304B80 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/NanoRegistry.framework/NanoRegistry", 2);
}

uint64_t sub_100826A4C(uint64_t a1)
{
  return sub_1008BD488(*(_BYTE **)(a1 + 32));
}

void sub_100826A60(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_100826A8C(uint64_t a1)
{
  return sub_100823ABC(*(_DWORD **)(a1 + 32));
}

uint64_t sub_100826A94(uint64_t a1)
{
  uint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 32);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 232))(v1))
    v2 = 2;
  else
    v2 = 1;
  return sub_1008BD344(v1, v2);
}

id sub_100826AD0(uint64_t a1)
{
  return sub_1008245EC(*(_BYTE **)(a1 + 32));
}

uint64_t sub_100826AD8()
{
  uint64_t *v0;
  uint64_t result;

  if (qword_102304B78 != -1)
    dispatch_once(&qword_102304B78, &stru_1021559F8);
  v0 = (uint64_t *)dlsym((void *)qword_102304B80, "NRPairedDeviceRegistryDeviceDidPairDarwinNotification");
  if (v0)
  {
    result = *v0;
    qword_102304B88 = result;
  }
  else
  {
    result = qword_102304B88;
  }
  off_1022A46E0[0] = sub_100826B50;
  return result;
}

uint64_t sub_100826B50()
{
  return qword_102304B88;
}

uint64_t sub_100826B5C()
{
  uint64_t *v0;
  uint64_t result;

  if (qword_102304B78 != -1)
    dispatch_once(&qword_102304B78, &stru_1021559F8);
  v0 = (uint64_t *)dlsym((void *)qword_102304B80, "NRPairedDeviceRegistryDeviceDidUnpairDarwinNotification");
  if (v0)
  {
    result = *v0;
    qword_102304B90 = result;
  }
  else
  {
    result = qword_102304B90;
  }
  off_1022A46E8 = sub_100826BD4;
  return result;
}

uint64_t sub_100826BD4()
{
  return qword_102304B90;
}

void sub_100826BE0(id a1)
{
  qword_10229FF18 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Fitness");
}

void sub_100826C0C(id a1)
{
  qword_10229FE68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_100826C38()
{
  operator new();
}

void sub_100826CC8(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  id v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  const char *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  __int16 v54;
  int v55;
  uint8_t buf[4];
  _QWORD *v57;
  __int16 v58;
  int v59;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v51 = v9;
        v13 = sub_1008271E8(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, id, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 7);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v50 = v19;
              sub_10082709C(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v51 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 28);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 28);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v50 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102155A18);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                v57 = v25;
                v58 = 1026;
                v59 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_102155A18);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 7);
                v52 = 136446466;
                v53 = v45;
                v54 = 1026;
                v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                v48 = (uint8_t *)v47;
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLFitnessTrackingNotifier_Type::Notification, NotificationData_T = CLFitnessTrackingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v48 != buf)
                  free(v48);
              }
            }
          }
          while (v14 != v51 + 6);
        }
      }
    }
  }
}

_BYTE *sub_10082709C(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  int *v14;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    v9 = sub_1008271E8(a4, a2);
    v10 = *(_QWORD *)a3 + 80;
    v11 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v14 = (int *)(*(_QWORD *)a2 + 32);
    v12 = sub_1001AFE94(v11, v14, (uint64_t)&unk_101B9EB60, &v14);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v13);
  }
  return result;
}

void sub_100827178(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102155A88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10082718C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102155A88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1008271C8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

id sub_1008271E8(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = objc_opt_class(CLCppEncodableDataContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_100827260(a1);
  v6 = objc_opt_class(CLCppContainer, v4);
  if ((objc_opt_isKindOfClass(a1, v6) & 1) != 0)
    return sub_1008275E8(a1);
  else
    return 0;
}

id sub_100827260(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t buf[4];
  id v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  unint64_t v15;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return sub_100827994((uint64_t)&v8 + 7, a1);
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102155AC8);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v11 = v2;
      v12 = 2048;
      v13 = 0;
      v14 = 2080;
      v15 = 0x8000000101BDB6AALL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102155AC8);
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v9, v8, v9);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102155AC8);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v11 = v2;
      v12 = 2048;
      v13 = 0;
      v14 = 2080;
      v15 = 0x8000000101BDB6AALL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102155AC8);
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v9, v8, v9);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLFitnessTrackingNotifier_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

id sub_1008275E8(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102155AC8);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BDB6AALL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102155AC8);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102155AC8);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BDB6AALL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102155AC8);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLFitnessTrackingNotifier_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

id sub_100827994(uint64_t a1, void *a2)
{
  if (!objc_msgSend(a2, "cppObjectPtr")
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_10221B678))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)4)
      sub_10190B270();
    objc_msgSend(a2, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a2, "serialized"), "bytes"));
  }
  return objc_msgSend(a2, "cppObjectPtr");
}

void sub_100827A08(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_100827A34()
{
  operator new();
}

uint64_t sub_100827AC4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

uint64_t sub_100827D78(void *a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int v10;
  TRANSITPbLocationFingerprint *v12;
  uint64_t result;
  _QWORD v14[2];

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      if (v5++ >= 9)
      {
        LODWORD(v6) = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      LODWORD(v6) = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    if ((v6 & 0x7FFF8) == 8)
    {
      v12 = objc_alloc_init(TRANSITPbLocationFingerprint);
      objc_msgSend(a1, "addLocationFingerprint:", v12);

      v14[0] = 0;
      v14[1] = 0;
      if (!PBReaderPlaceMark(a2, v14) || (sub_100B67698((uint64_t)v12, a2) & 1) == 0)
        return 0;
      PBReaderRecallMark(a2, v14);
    }
    else
    {
      result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result)
        return result;
    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_100828350(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  NSObject *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  const char *v30;
  uint8_t *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  __int16 v35;
  uint64_t *v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  int v56;
  uint8_t buf[4];
  uint64_t v58;
  __int16 v59;
  uint64_t *v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  uint64_t v70;
  __int16 v71;
  uint64_t v72;
  __int16 v73;
  uint64_t v74;
  __int16 v75;
  uint64_t v76;
  __int16 v77;
  uint64_t v78;
  __int16 v79;
  int v80;

  v2 = *a1;
  v3 = a1[1];
  if (*a1 != v3)
  {
    do
    {
      if (qword_1022A00B0 != -1)
        dispatch_once(&qword_1022A00B0, &stru_102155B90);
      v5 = qword_1022A00B8;
      if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEFAULT))
      {
        if (*((char *)a2 + 23) >= 0)
          v6 = a2;
        else
          v6 = (uint64_t *)*a2;
        v7 = *v2;
        v8 = v2[1];
        v9 = v2[2];
        v10 = v2[3];
        v11 = v2[4];
        v12 = v2[5];
        v13 = v2[8];
        v14 = v2[9];
        v16 = v2[6];
        v15 = v2[7];
        v17 = *((unsigned __int8 *)v2 + 104);
        *(_DWORD *)buf = 134351875;
        v58 = v7;
        v59 = 2082;
        v60 = v6;
        v61 = 2049;
        v62 = v8;
        v63 = 2049;
        v64 = v9;
        v65 = 2049;
        v66 = v11;
        v67 = 2050;
        v68 = v13;
        v69 = 2049;
        v70 = v16;
        v71 = 2050;
        v72 = v10;
        v73 = 2050;
        v74 = v12;
        v75 = 2050;
        v76 = v14;
        v77 = 2050;
        v78 = v15;
        v79 = 1026;
        v80 = v17;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CLRS,%{public}.1lf,%{public}s,latitude,%{private}.8lf,longitude,%{private}.8lf,altitude,%{private}.2lf,speed,%{public}.2lf,course,%{private}.2lf,hunc,%{public}.2lf,vunc,%{public}.2lf,speedUnc,%{public}.2lf,courseUnc,%{public}.2lf,signalEnvironment,%{public}d", buf, 0x76u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00B0 != -1)
          dispatch_once(&qword_1022A00B0, &stru_102155B90);
        if (*((char *)a2 + 23) >= 0)
          v18 = a2;
        else
          v18 = (uint64_t *)*a2;
        v19 = *v2;
        v20 = v2[1];
        v21 = v2[2];
        v22 = v2[3];
        v23 = v2[4];
        v24 = v2[5];
        v25 = v2[8];
        v26 = v2[9];
        v28 = v2[6];
        v27 = v2[7];
        v29 = *((unsigned __int8 *)v2 + 104);
        v33 = 134351875;
        v34 = v19;
        v35 = 2082;
        v36 = v18;
        v37 = 2049;
        v38 = v20;
        v39 = 2049;
        v40 = v21;
        v41 = 2049;
        v42 = v23;
        v43 = 2050;
        v44 = v25;
        v45 = 2049;
        v46 = v28;
        v47 = 2050;
        v48 = v22;
        v49 = 2050;
        v50 = v24;
        v51 = 2050;
        v52 = v26;
        v53 = 2050;
        v54 = v27;
        v55 = 1026;
        v56 = v29;
        LODWORD(v32) = 118;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 0, "CLRS,%{public}.1lf,%{public}s,latitude,%{private}.8lf,longitude,%{private}.8lf,altitude,%{private}.2lf,speed,%{public}.2lf,course,%{private}.2lf,hunc,%{public}.2lf,vunc,%{public}.2lf,speedUnc,%{public}.2lf,courseUnc,%{public}.2lf,signalEnvironment,%{public}d", &v33, v32);
        v31 = (uint8_t *)v30;
        sub_100512490("Generic", 1, 0, 2, "static void CLRouteSmoother::outputPerEpochLog(const std::vector<swan::RouteSmootherEpoch> &, const std::string &)", "%s\n", v30);
        if (v31 != buf)
          free(v31);
      }
      v2 += 14;
    }
    while (v2 != v3);
  }
}

id sub_100828644(id result, uint64_t *a2)
{
  id v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  const char *v53;
  uint8_t *v54;
  uint64_t v55;
  id obj;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  int v65;
  uint64_t v66;
  __int16 v67;
  uint64_t *v68;
  __int16 v69;
  uint64_t v70;
  __int16 v71;
  uint64_t v72;
  __int16 v73;
  uint64_t v74;
  __int16 v75;
  uint64_t v76;
  __int16 v77;
  uint64_t v78;
  __int16 v79;
  uint64_t v80;
  __int16 v81;
  uint64_t v82;
  __int16 v83;
  uint64_t v84;
  __int16 v85;
  uint64_t v86;
  __int16 v87;
  unsigned int v88;
  __int16 v89;
  unsigned int v90;
  uint8_t buf[4];
  uint64_t v92;
  __int16 v93;
  uint64_t *v94;
  __int16 v95;
  uint64_t v96;
  __int16 v97;
  uint64_t v98;
  __int16 v99;
  uint64_t v100;
  __int16 v101;
  uint64_t v102;
  __int16 v103;
  uint64_t v104;
  __int16 v105;
  uint64_t v106;
  __int16 v107;
  uint64_t v108;
  __int16 v109;
  uint64_t v110;
  __int16 v111;
  uint64_t v112;
  __int16 v113;
  unsigned int v114;
  __int16 v115;
  unsigned int v116;
  _BYTE v117[128];

  obj = result;
  if (result)
  {
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    result = objc_msgSend(result, "countByEnumeratingWithState:objects:count:", &v61, v117, 16);
    if (result)
    {
      v3 = result;
      v4 = &qword_1022A0000;
      v5 = &qword_1022A0000;
      v6 = *(_QWORD *)v62;
      do
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v62 != v6)
            objc_enumerationMutation(obj);
          v8 = *(void **)(*((_QWORD *)&v61 + 1) + 8 * (_QWORD)v7);
          if (v8)
          {
            if (v4[22] != -1)
              dispatch_once(&qword_1022A00B0, &stru_102155B90);
            v9 = v5[23];
            if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
            {
              objc_msgSend(objc_msgSend(v8, "timestamp"), "timeIntervalSinceReferenceDate");
              v59 = v10;
              if (*((char *)a2 + 23) >= 0)
                v11 = a2;
              else
                v11 = (uint64_t *)*a2;
              objc_msgSend(v8, "latitude");
              v57 = v12;
              objc_msgSend(v8, "longitude");
              v14 = v13;
              objc_msgSend(v8, "altitude");
              v16 = v15;
              objc_msgSend(v8, "speed");
              v18 = v17;
              objc_msgSend(v8, "course");
              v20 = v19;
              objc_msgSend(v8, "horizontalAccuracy");
              v22 = v21;
              objc_msgSend(v8, "altitudeAccuracy");
              v24 = v23;
              objc_msgSend(v8, "speedAccuracy");
              v26 = v25;
              objc_msgSend(v8, "courseAccuracy");
              v28 = v27;
              v29 = objc_msgSend(v8, "signalEnvironmentType");
              v30 = objc_msgSend(v8, "locType");
              *(_DWORD *)buf = 134352131;
              v92 = v59;
              v93 = 2082;
              v94 = v11;
              v4 = &qword_1022A0000;
              v95 = 2049;
              v96 = v57;
              v97 = 2049;
              v98 = v14;
              v99 = 2049;
              v100 = v16;
              v101 = 2050;
              v102 = v18;
              v103 = 2049;
              v104 = v20;
              v105 = 2050;
              v106 = v22;
              v107 = 2050;
              v108 = v24;
              v109 = 2050;
              v110 = v26;
              v111 = 2050;
              v112 = v28;
              v113 = 1026;
              v114 = v29;
              v5 = &qword_1022A0000;
              v115 = 1026;
              v116 = v30;
              _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "CLRS,%{public}.1lf,%{public}s,latitude,%{private}.8lf,longitude,%{private}.8lf,altitude,%{private}.2lf,speed,%{public}.2lf,course,%{private}.2lf,hunc,%{public}.2lf,vunc,%{public}.2lf,speedUnc,%{public}.2lf,courseUnc,%{public}.2lf,signalEnvironment,%{public}d,locType,%{public}d", buf, 0x7Cu);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (v4[22] != -1)
                dispatch_once(&qword_1022A00B0, &stru_102155B90);
              v31 = v5[23];
              objc_msgSend(objc_msgSend(v8, "timestamp"), "timeIntervalSinceReferenceDate");
              v60 = v32;
              if (*((char *)a2 + 23) >= 0)
                v33 = a2;
              else
                v33 = (uint64_t *)*a2;
              objc_msgSend(v8, "latitude");
              v58 = v34;
              objc_msgSend(v8, "longitude");
              v36 = v35;
              objc_msgSend(v8, "altitude");
              v38 = v37;
              objc_msgSend(v8, "speed");
              v40 = v39;
              objc_msgSend(v8, "course");
              v42 = v41;
              objc_msgSend(v8, "horizontalAccuracy");
              v44 = v43;
              objc_msgSend(v8, "altitudeAccuracy");
              v46 = v45;
              objc_msgSend(v8, "speedAccuracy");
              v48 = v47;
              objc_msgSend(v8, "courseAccuracy");
              v50 = v49;
              v51 = objc_msgSend(v8, "signalEnvironmentType");
              v52 = objc_msgSend(v8, "locType");
              v65 = 134352131;
              v66 = v60;
              v67 = 2082;
              v68 = v33;
              v69 = 2049;
              v70 = v58;
              v71 = 2049;
              v72 = v36;
              v73 = 2049;
              v74 = v38;
              v75 = 2050;
              v76 = v40;
              v77 = 2049;
              v78 = v42;
              v79 = 2050;
              v80 = v44;
              v81 = 2050;
              v82 = v46;
              v83 = 2050;
              v84 = v48;
              v85 = 2050;
              v86 = v50;
              v87 = 1026;
              v88 = v51;
              v89 = 1026;
              v90 = v52;
              LODWORD(v55) = 124;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v31, 0, "CLRS,%{public}.1lf,%{public}s,latitude,%{private}.8lf,longitude,%{private}.8lf,altitude,%{private}.2lf,speed,%{public}.2lf,course,%{private}.2lf,hunc,%{public}.2lf,vunc,%{public}.2lf,speedUnc,%{public}.2lf,courseUnc,%{public}.2lf,signalEnvironment,%{public}d,locType,%{public}d", &v65, v55);
              v54 = (uint8_t *)v53;
              sub_100512490("Generic", 1, 0, 2, "static void CLRouteSmoother::outputPerEpochLog(NSArray<CLTripSegmentLocation *> *, const std::string &)", "%s\n", v53);
              if (v54 != buf)
                free(v54);
              v4 = &qword_1022A0000;
              v5 = &qword_1022A0000;
            }
          }
          v7 = (char *)v7 + 1;
        }
        while (v3 != v7);
        result = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v61, v117, 16);
        v3 = result;
      }
      while (result);
    }
  }
  return result;
}

void sub_100828AF0(uint64_t a1)
{
  char v2;
  int v3;
  char v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char v8;
  int v9;
  char v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  char v14;
  int v15;
  char v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  char v20;
  int v21;
  char v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  char v26;
  int v27;
  char v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  char v32;
  int v33;
  char v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  char v38;
  int v39;
  char v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  char v44;
  int v45;
  char v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  char v50;
  int v51;
  char v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  char v56;
  int v57;
  char v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  int v62;
  int v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  NSObject *v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  char v80;
  int v81;
  char v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  char v86;
  int v87;
  char v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  const char *v104;
  uint8_t *v105;
  uint64_t v106;
  _DWORD v107[2];
  __int16 v108;
  int v109;
  __int16 v110;
  int v111;
  __int16 v112;
  int v113;
  __int16 v114;
  int v115;
  __int16 v116;
  int v117;
  __int16 v118;
  int v119;
  __int16 v120;
  int v121;
  __int16 v122;
  int v123;
  __int16 v124;
  int v125;
  __int16 v126;
  int v127;
  __int16 v128;
  int v129;
  uint8_t buf[8];
  std::__shared_weak_count *v131;
  int v132;
  __int16 v133;
  int v134;
  __int16 v135;
  int v136;
  __int16 v137;
  int v138;
  __int16 v139;
  int v140;
  __int16 v141;
  int v142;
  __int16 v143;
  int v144;
  __int16 v145;
  int v146;
  __int16 v147;
  int v148;
  __int16 v149;
  int v150;

  sub_1001E4804(buf);
  v2 = *(_BYTE *)(a1 + 40);
  LOBYTE(v107[0]) = 0;
  v3 = sub_1001E4874(*(uint64_t *)buf, "EnablePerEpochSmoothLogOutput", (BOOL *)v107);
  v4 = v107[0];
  if (!v3)
    v4 = v2;
  *(_BYTE *)(a1 + 40) = v4;
  v5 = v131;
  if (v131)
  {
    p_shared_owners = (unint64_t *)&v131->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_1001E4804(buf);
  v8 = *(_BYTE *)(a1 + 41);
  LOBYTE(v107[0]) = 0;
  v9 = sub_1001E4874(*(uint64_t *)buf, "EnableMapMatchingBeforeSmoothing", (BOOL *)v107);
  v10 = v107[0];
  if (!v9)
    v10 = v8;
  *(_BYTE *)(a1 + 41) = v10;
  v11 = v131;
  if (v131)
  {
    v12 = (unint64_t *)&v131->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  sub_1001E4804(buf);
  v14 = *(_BYTE *)(a1 + 42);
  LOBYTE(v107[0]) = 0;
  v15 = sub_1001E4874(*(uint64_t *)buf, "CLRSAllowRouteReconstruction", (BOOL *)v107);
  v16 = v107[0];
  if (!v15)
    v16 = v14;
  *(_BYTE *)(a1 + 42) = v16;
  v17 = v131;
  if (v131)
  {
    v18 = (unint64_t *)&v131->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  sub_1001E4804(buf);
  v20 = *(_BYTE *)(a1 + 51);
  LOBYTE(v107[0]) = 0;
  v21 = sub_1001E4874(*(uint64_t *)buf, "fUseTripSegmentProcessorForReconstruction", (BOOL *)v107);
  v22 = v107[0];
  if (!v21)
    v22 = v20;
  *(_BYTE *)(a1 + 51) = v22;
  v23 = v131;
  if (v131)
  {
    v24 = (unint64_t *)&v131->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  sub_1001E4804(buf);
  v26 = *(_BYTE *)(a1 + 49);
  LOBYTE(v107[0]) = 0;
  v27 = sub_1001E4874(*(uint64_t *)buf, "CLRSForceRouteReconstruction", (BOOL *)v107);
  v28 = v107[0];
  if (!v27)
    v28 = v26;
  *(_BYTE *)(a1 + 49) = v28;
  v29 = v131;
  if (v131)
  {
    v30 = (unint64_t *)&v131->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  sub_1001E4804(buf);
  v32 = *(_BYTE *)(a1 + 50);
  LOBYTE(v107[0]) = 0;
  v33 = sub_1001E4874(*(uint64_t *)buf, "CLRSPreferCachedMapData", (BOOL *)v107);
  v34 = v107[0];
  if (!v33)
    v34 = v32;
  *(_BYTE *)(a1 + 50) = v34;
  v35 = v131;
  if (v131)
  {
    v36 = (unint64_t *)&v131->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  sub_1001E4804(buf);
  v38 = *(_BYTE *)(a1 + 48);
  LOBYTE(v107[0]) = 0;
  v39 = sub_1001E4874(*(uint64_t *)buf, "EnableRunningTrackDetectionDuringSmoothing", (BOOL *)v107);
  v40 = v107[0];
  if (!v39)
    v40 = v38;
  *(_BYTE *)(a1 + 48) = v40;
  v41 = v131;
  if (v131)
  {
    v42 = (unint64_t *)&v131->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  sub_1001E4804(buf);
  v44 = *(_BYTE *)(a1 + 43);
  LOBYTE(v107[0]) = 0;
  v45 = sub_1001E4874(*(uint64_t *)buf, "CLRSEnablePTSDuringReconstruction", (BOOL *)v107);
  v46 = v107[0];
  if (!v45)
    v46 = v44;
  *(_BYTE *)(a1 + 43) = v46;
  v47 = v131;
  if (v131)
  {
    v48 = (unint64_t *)&v131->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  sub_1001E4804(buf);
  v50 = *(_BYTE *)(a1 + 44);
  LOBYTE(v107[0]) = 0;
  v51 = sub_1001E4874(*(uint64_t *)buf, "CLRSEnableMapMatchingDuringReconstruction", (BOOL *)v107);
  v52 = v107[0];
  if (!v51)
    v52 = v50;
  *(_BYTE *)(a1 + 44) = v52;
  v53 = v131;
  if (v131)
  {
    v54 = (unint64_t *)&v131->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  sub_1001E4804(buf);
  v56 = *(_BYTE *)(a1 + 52);
  LOBYTE(v107[0]) = 0;
  v57 = sub_1001E4874(*(uint64_t *)buf, "CLRSUseXPCServiceForMapQuery", (BOOL *)v107);
  v58 = v107[0];
  if (!v57)
    v58 = v56;
  *(_BYTE *)(a1 + 52) = v58;
  v59 = v131;
  if (v131)
  {
    v60 = (unint64_t *)&v131->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (!*(_BYTE *)(a1 + 41))
  {
    sub_1001E4804(buf);
    v80 = *(_BYTE *)(a1 + 45);
    LOBYTE(v107[0]) = 0;
    v81 = sub_1001E4874(*(uint64_t *)buf, "EnableMapMatchingAfterSmoothing", (BOOL *)v107);
    v82 = v107[0];
    if (!v81)
      v82 = v80;
    *(_BYTE *)(a1 + 45) = v82;
    v83 = v131;
    if (v131)
    {
      v84 = (unint64_t *)&v131->__shared_owners_;
      do
        v85 = __ldaxr(v84);
      while (__stlxr(v85 - 1, v84));
      if (!v85)
      {
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        std::__shared_weak_count::__release_weak(v83);
      }
    }
    sub_1001E4804(buf);
    v86 = *(_BYTE *)(a1 + 46);
    LOBYTE(v107[0]) = 0;
    v87 = sub_1001E4874(*(uint64_t *)buf, "EnableReSmoothingAfterMapMatching", (BOOL *)v107);
    v88 = v107[0];
    if (!v87)
      v88 = v86;
    *(_BYTE *)(a1 + 46) = v88;
    v89 = v131;
    if (v131)
    {
      v90 = (unint64_t *)&v131->__shared_owners_;
      do
        v91 = __ldaxr(v90);
      while (__stlxr(v91 - 1, v90));
      if (!v91)
      {
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        std::__shared_weak_count::__release_weak(v89);
      }
    }
  }
  v106 = 0x3FF0000000000000;
  sub_1001E4804(buf);
  v62 = sub_1001FD98C(*(uint64_t *)buf, "CLRSDesiredTimeBetweenReconstructedPointsSeconds", &v106);
  v63 = v62;
  v64 = v131;
  if (!v131)
    goto LABEL_76;
  v65 = (unint64_t *)&v131->__shared_owners_;
  do
    v66 = __ldaxr(v65);
  while (__stlxr(v66 - 1, v65));
  if (v66)
  {
LABEL_76:
    if (!v62)
      goto LABEL_78;
    goto LABEL_77;
  }
  ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
  std::__shared_weak_count::__release_weak(v64);
  if (v63)
  {
LABEL_77:
    *(_QWORD *)(a1 + 56) = v106;
    *(_BYTE *)(a1 + 64) = 1;
  }
LABEL_78:
  if (qword_1022A00B0 != -1)
    dispatch_once(&qword_1022A00B0, &stru_102155B90);
  v67 = qword_1022A00B8;
  if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_INFO))
  {
    v68 = *(unsigned __int8 *)(a1 + 41);
    v69 = *(unsigned __int8 *)(a1 + 42);
    v70 = *(unsigned __int8 *)(a1 + 49);
    v71 = *(unsigned __int8 *)(a1 + 45);
    v72 = *(unsigned __int8 *)(a1 + 46);
    v73 = *(unsigned __int8 *)(a1 + 40);
    v74 = *(unsigned __int8 *)(a1 + 47);
    v75 = *(unsigned __int8 *)(a1 + 48);
    v76 = *(unsigned __int8 *)(a1 + 51);
    v77 = *(unsigned __int8 *)(a1 + 43);
    v78 = *(unsigned __int8 *)(a1 + 44);
    v79 = *(unsigned __int8 *)(a1 + 52);
    *(_DWORD *)buf = 67243008;
    *(_DWORD *)&buf[4] = v68;
    LOWORD(v131) = 1026;
    *(_DWORD *)((char *)&v131 + 2) = v69;
    HIWORD(v131) = 1026;
    v132 = v70;
    v133 = 1026;
    v134 = v71;
    v135 = 1026;
    v136 = v72;
    v137 = 1026;
    v138 = v73;
    v139 = 1026;
    v140 = v74;
    v141 = 1026;
    v142 = v75;
    v143 = 1026;
    v144 = v76;
    v145 = 1026;
    v146 = v77;
    v147 = 1026;
    v148 = v78;
    v149 = 1026;
    v150 = v79;
    _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_INFO, "CLRS,EnableMapMatchingBeforeSmoothing,%{public}d,AllowRouteReconstruction,%{public}d,ForceRouteReconstruction,%{public}d,EnableMapMatchingAfterSmoothing,%{public}d,EnableReSmoothingAfterMapMatching,%{public}d,EnablePerEpochSmoothLogOutput,%{public}d,EnableCornerDetectionDuringSmoothing,%{public}d,EnableRunningTrackDetectionDuringSmoothing,%{public}d,UseTripSegmentProcessorForReconstruction_,%{public}d,EnablePTSDuringReconstruction,%{public}d,EnableMapMatchingDuringReconstruction,%{public}d,fUseXPCServiceForMapQuery,%{public}d", buf, 0x4Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_102155B90);
    v92 = *(unsigned __int8 *)(a1 + 41);
    v93 = *(unsigned __int8 *)(a1 + 42);
    v94 = *(unsigned __int8 *)(a1 + 49);
    v95 = *(unsigned __int8 *)(a1 + 45);
    v96 = *(unsigned __int8 *)(a1 + 46);
    v97 = *(unsigned __int8 *)(a1 + 40);
    v98 = *(unsigned __int8 *)(a1 + 47);
    v99 = *(unsigned __int8 *)(a1 + 48);
    v100 = *(unsigned __int8 *)(a1 + 51);
    v101 = *(unsigned __int8 *)(a1 + 43);
    v102 = *(unsigned __int8 *)(a1 + 44);
    v103 = *(unsigned __int8 *)(a1 + 52);
    v107[0] = 67243008;
    v107[1] = v92;
    v108 = 1026;
    v109 = v93;
    v110 = 1026;
    v111 = v94;
    v112 = 1026;
    v113 = v95;
    v114 = 1026;
    v115 = v96;
    v116 = 1026;
    v117 = v97;
    v118 = 1026;
    v119 = v98;
    v120 = 1026;
    v121 = v99;
    v122 = 1026;
    v123 = v100;
    v124 = 1026;
    v125 = v101;
    v126 = 1026;
    v127 = v102;
    v128 = 1026;
    v129 = v103;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 1, "CLRS,EnableMapMatchingBeforeSmoothing,%{public}d,AllowRouteReconstruction,%{public}d,ForceRouteReconstruction,%{public}d,EnableMapMatchingAfterSmoothing,%{public}d,EnableReSmoothingAfterMapMatching,%{public}d,EnablePerEpochSmoothLogOutput,%{public}d,EnableCornerDetectionDuringSmoothing,%{public}d,EnableRunningTrackDetectionDuringSmoothing,%{public}d,UseTripSegmentProcessorForReconstruction_,%{public}d,EnablePTSDuringReconstruction,%{public}d,EnableMapMatchingDuringReconstruction,%{public}d,fUseXPCServiceForMapQuery,%{public}d", v107, 74);
    v105 = (uint8_t *)v104;
    sub_100512490("Generic", 1, 0, 2, "void CLRouteSmoother::readDefaultSettings()", "%s\n", v104);
    if (v105 != buf)
      free(v105);
  }
}

void sub_100829380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_1008293CC(uint64_t a1, uint64_t a2)
{
  id result;

  result = (id)objc_opt_class(MCProfileConnection, a2);
  if (result)
    return objc_msgSend(+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"), "isHealthDataSubmissionAllowed");
  return result;
}

uint64_t sub_100829408(_BYTE *a1, uint64_t a2, uint64_t a3, void **a4, unsigned int a5, int a6, unsigned int a7, id **a8)
{
  int v12;
  void **v13;
  CLOSTransaction *v14;
  void **v15;
  CLOSTransaction *v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  void *v22;
  BOOL v23;
  BOOL v24;
  NSObject *v25;
  NSObject *v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  id *v30;
  id *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  NSObject *v35;
  id v36;
  uint64_t v37;
  id v38;
  const char *v39;
  char *v40;
  NSObject *v41;
  id v42;
  id v43;
  const std::string::value_type *v44;
  std::string::size_type v45;
  std::string *v46;
  __int128 v47;
  BOOL v48;
  NSObject *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  const char *v54;
  char *v55;
  id v56;
  const char *v57;
  char *v58;
  BOOL v59;
  BOOL v60;
  NSObject *v61;
  double *v62;
  double *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 **v69;
  __int128 *v70;
  __int128 *v71;
  _OWORD *v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  _OWORD *v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 **v85;
  __int128 *v86;
  __int128 *v87;
  _OWORD *v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  NSObject *v94;
  uint64_t v95;
  unint64_t v96;
  double *v97;
  uint64_t v98;
  uint64_t v99;
  id *v100;
  id *v101;
  double *v102;
  double *v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  char v112;
  double v113;
  NSObject *v114;
  _BOOL8 v115;
  uint64_t v116;
  void *v117;
  BOOL v118;
  BOOL v119;
  double v120;
  NSObject *v121;
  uint64_t v122;
  NSObject *v123;
  NSObject *v125;
  const char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  const char *v130;
  char *v131;
  uint64_t v132;
  const char *v133;
  char *v134;
  const char *v135;
  char *v136;
  uint64_t v137;
  const char *v138;
  char *v139;
  uint64_t v140;
  const char *v141;
  char *v142;
  const char *v143;
  char *v144;
  const char *v145;
  char *v146;
  const char *v147;
  char *v148;
  uint64_t v149;
  CLOSTransaction *v150;
  char v152;
  _QWORD v156[9];
  unsigned int v157;
  char v158;
  char v159;
  std::string v160;
  std::string v161;
  _QWORD v162[9];
  unsigned int v163;
  char v164;
  char v165;
  std::string v166;
  void *v167[2];
  std::string::size_type v168;
  void *v169[2];
  uint64_t v170;
  std::string v171;
  void *v172[2];
  uint64_t v173;
  std::string v174;
  std::string v175;
  void *__p[2];
  char v177;
  _BYTE v178[30];
  _BYTE v179[10];
  double v180;
  int v181;
  unint64_t v182;
  __int16 v183;
  uint64_t v184;
  _BYTE __dst[24];
  _BYTE buf[30];
  _BYTE v187[10];
  double v188;

  sub_1015A2E04(__p, "CLRouteSmoother.smoothPoints");
  v12 = v177;
  v13 = (void **)__p[0];
  v14 = [CLOSTransaction alloc];
  if (v12 >= 0)
    v15 = __p;
  else
    v15 = v13;
  v16 = -[CLOSTransaction initWithDescription:](v14, "initWithDescription:", v15);
  if (v177 < 0)
    operator delete(__p[0]);
  sub_100828AF0((uint64_t)a1);
  if (qword_1022A00B0 != -1)
    dispatch_once(&qword_1022A00B0, &stru_102155B90);
  v17 = qword_1022A00B8;
  if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEFAULT))
  {
    v18 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 4);
    v19 = ((char *)a8[1] - (char *)*a8) >> 4;
    *(_DWORD *)buf = 67241216;
    *(_DWORD *)&buf[4] = a5;
    *(_WORD *)&buf[8] = 2050;
    *(_QWORD *)&buf[10] = v18;
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = a6;
    *(_WORD *)&buf[24] = 1026;
    *(_DWORD *)&buf[26] = a7;
    *(_WORD *)v187 = 2050;
    *(_QWORD *)&v187[2] = v19;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "CLRS,Starting smoother for workoutActivity,%{public}u,count,%{public}zu,shouldReconstructRoute,%{public}d,networkAccessAllowed,%{public}d,reconstructionIntervalData.size(),%{public}zu", buf, 0x28u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_102155B90);
    v128 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 4);
    v129 = ((char *)a8[1] - (char *)*a8) >> 4;
    *(_DWORD *)v178 = 67241216;
    *(_DWORD *)&v178[4] = a5;
    *(_WORD *)&v178[8] = 2050;
    *(_QWORD *)&v178[10] = v128;
    *(_WORD *)&v178[18] = 1026;
    *(_DWORD *)&v178[20] = a6;
    *(_WORD *)&v178[24] = 1026;
    *(_DWORD *)&v178[26] = a7;
    *(_WORD *)v179 = 2050;
    *(_QWORD *)&v179[2] = v129;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 0, "CLRS,Starting smoother for workoutActivity,%{public}u,count,%{public}zu,shouldReconstructRoute,%{public}d,networkAccessAllowed,%{public}d,reconstructionIntervalData.size(),%{public}zu", v178, 40);
    v131 = (char *)v130;
    sub_100512490("Generic", 1, 0, 2, "CLSmootherErrorCode CLRouteSmoother::smoothPoints(dispatch_queue_t, std::vector<swan::RouteSmootherEpoch> &, std::vector<CLClientLocation> &, CLMotionActivity::Type, const BOOL, const BOOL, std::vector<ReconstructionIntervalData> &)", "%s\n", v130);
    if (v131 != buf)
      free(v131);
  }
  v20 = sub_1001FCBB4();
  v21 = 1.0;
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 4)) >= 2)
    v21 = vabdd_f64(*(double *)(*(_QWORD *)a3 + 16 * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 4) - 112), **(double **)a3);
  sub_1015A2E04(&v175, "Input");
  sub_1015A2E04(&v174, "PreSmt");
  v22 = sub_1015A2E04(v172, "Sparse");
  if (a1[41])
  {
    if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
      v22 = sub_100115CE4(&v171, v174.__r_.__value_.__l.__data_, v174.__r_.__value_.__l.__size_);
    else
      v171 = v174;
    v23 = sub_10082B3BC((uint64_t)v22, (uint64_t *)&v171, a5, (_QWORD *)a3);
    v24 = v23;
    if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v171.__r_.__value_.__l.__data_);
      if (v24)
        goto LABEL_19;
    }
    else if (v23)
    {
LABEL_19:
      std::string::assign(&v175, "PostMM");
      goto LABEL_26;
    }
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_102155B90);
    v25 = qword_1022A00B8;
    if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "CLRS,CLMM mapMatching before smoothing failed", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00B0 != -1)
        dispatch_once(&qword_1022A00B0, &stru_102155B90);
      *(_WORD *)v178 = 0;
      LODWORD(v149) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 2, "CLRS,CLMM mapMatching before smoothing failed", v178, v149);
      v136 = (char *)v135;
      sub_100512490("Generic", 1, 0, 2, "CLSmootherErrorCode CLRouteSmoother::smoothPoints(dispatch_queue_t, std::vector<swan::RouteSmootherEpoch> &, std::vector<CLClientLocation> &, CLMotionActivity::Type, const BOOL, const BOOL, std::vector<ReconstructionIntervalData> &)", "%s\n", v135);
      if (v136 != buf)
        free(v136);
    }
  }
LABEL_26:
  if (qword_1022A00B0 != -1)
    dispatch_once(&qword_1022A00B0, &stru_102155B90);
  v26 = qword_1022A00B8;
  if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEBUG))
  {
    v27 = ((char *)a8[1] - (char *)*a8) >> 4;
    *(_DWORD *)buf = 134349056;
    *(_QWORD *)&buf[4] = v27;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "CLRS,reconstructionIntervalData,size,%{public}zu", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_102155B90);
    v132 = ((char *)a8[1] - (char *)*a8) >> 4;
    *(_DWORD *)v178 = 134349056;
    *(_QWORD *)&v178[4] = v132;
    LODWORD(v149) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 2, "CLRS,reconstructionIntervalData,size,%{public}zu", v178, v149);
    v134 = (char *)v133;
    sub_100512490("Generic", 1, 0, 2, "CLSmootherErrorCode CLRouteSmoother::smoothPoints(dispatch_queue_t, std::vector<swan::RouteSmootherEpoch> &, std::vector<CLClientLocation> &, CLMotionActivity::Type, const BOOL, const BOOL, std::vector<ReconstructionIntervalData> &)", "%s\n", v133);
    if (v134 != buf)
      free(v134);
  }
  v152 = a6;
  if ((a6 & 1) == 0 && !a1[49] || !a1[42])
  {
    if (*a8 == a8[1])
      goto LABEL_143;
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_102155B90);
    v28 = qword_1022A00B8;
    if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEFAULT))
    {
      v29 = ((char *)a8[1] - (char *)*a8) >> 4;
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v29;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "CLRS,reconstructionIntervalData,size,%{public}zu", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00B0 != -1)
        dispatch_once(&qword_1022A00B0, &stru_102155B90);
      v137 = ((char *)a8[1] - (char *)*a8) >> 4;
      *(_DWORD *)v178 = 134349056;
      *(_QWORD *)&v178[4] = v137;
      LODWORD(v149) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 0, "CLRS,reconstructionIntervalData,size,%{public}zu", v178, v149);
      v139 = (char *)v138;
      sub_100512490("Generic", 1, 0, 2, "CLSmootherErrorCode CLRouteSmoother::smoothPoints(dispatch_queue_t, std::vector<swan::RouteSmootherEpoch> &, std::vector<CLClientLocation> &, CLMotionActivity::Type, const BOOL, const BOOL, std::vector<ReconstructionIntervalData> &)", "%s\n", v138);
      if (v139 != buf)
        free(v139);
    }
    v150 = v16;
    a1[51] = 1;
    memset(v178, 0, 24);
    v31 = *a8;
    v30 = a8[1];
    if (*a8 == v30)
    {
      v33 = 0;
LABEL_114:
      sub_10083AFE0(__dst, v33 + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 4));
      v63 = *(double **)a3;
      v62 = *(double **)(a3 + 8);
      if (v62 == *(double **)a3)
      {
        *(_QWORD *)&__dst[8] = *(_QWORD *)__dst;
        v16 = v150;
        if (a8[1] != *a8)
        {
          v95 = 0;
          v96 = 0;
          do
          {
            sub_10083B1E8((uint64_t)__dst, *(uint64_t *)&__dst[8], *(char **)(*(_QWORD *)v178 + v95), *(char **)(*(_QWORD *)v178 + v95 + 8), 0x6DB6DB6DB6DB6DB7* ((uint64_t)(*(_QWORD *)(*(_QWORD *)v178 + v95 + 8) - *(_QWORD *)(*(_QWORD *)v178 + v95)) >> 4));
            ++v96;
            v95 += 24;
          }
          while (v96 < ((char *)a8[1] - (char *)*a8) >> 4);
        }
      }
      else
      {
        v64 = 0;
        v65 = 0;
        v66 = *(_QWORD *)v178;
        do
        {
          if (v65 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)&v178[8] - v66) >> 3))
          {
            v67 = *(_QWORD *)(v66 + 24 * v65 + 8);
            v68 = v67 - *(_QWORD *)(v66 + 24 * v65);
            if (v68)
            {
              if (*v63 >= *(double *)(v67 - 112))
              {
                sub_10082F22C(__dst, 0x6DB6DB6DB6DB6DB7 * (v68 >> 4) + v64);
                v66 = *(_QWORD *)v178;
                v69 = (__int128 **)(*(_QWORD *)v178 + 24 * v65);
                v70 = *v69;
                v71 = v69[1];
                if (v70 != v71)
                {
                  v72 = (_OWORD *)(*(_QWORD *)__dst + 112 * v64);
                  do
                  {
                    v73 = *v70;
                    v74 = v70[2];
                    v72[1] = v70[1];
                    v72[2] = v74;
                    *v72 = v73;
                    v75 = v70[3];
                    v76 = v70[4];
                    v77 = v70[5];
                    *(_OWORD *)((char *)v72 + 89) = *(__int128 *)((char *)v70 + 89);
                    v72[4] = v76;
                    v72[5] = v77;
                    v72[3] = v75;
                    ++v64;
                    v70 += 7;
                    v72 += 7;
                  }
                  while (v70 != v71);
                }
                ++v65;
              }
            }
          }
          v78 = *(_QWORD *)__dst;
          v79 = (_OWORD *)(*(_QWORD *)__dst + 112 * v64);
          v80 = *(_OWORD *)v63;
          v81 = *((_OWORD *)v63 + 1);
          v79[2] = *((_OWORD *)v63 + 2);
          v83 = *((_OWORD *)v63 + 4);
          v82 = *((_OWORD *)v63 + 5);
          v84 = *((_OWORD *)v63 + 3);
          *(_OWORD *)((char *)v79 + 89) = *(_OWORD *)((char *)v63 + 89);
          v79[4] = v83;
          v79[5] = v82;
          v79[3] = v84;
          *v79 = v80;
          v79[1] = v81;
          ++v64;
          v63 += 14;
        }
        while (v63 != v62);
        if (v65 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)&v178[8] - v66) >> 3))
        {
          do
          {
            sub_10082F22C(__dst, v64+ 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v66 + 24 * v65 + 8) - *(_QWORD *)(v66 + 24 * v65)) >> 4));
            v66 = *(_QWORD *)v178;
            v85 = (__int128 **)(*(_QWORD *)v178 + 24 * v65);
            v86 = *v85;
            v87 = v85[1];
            if (v86 != v87)
            {
              v88 = (_OWORD *)(*(_QWORD *)__dst + 112 * v64);
              do
              {
                v89 = *v86;
                v90 = v86[2];
                v88[1] = v86[1];
                v88[2] = v90;
                *v88 = v89;
                v91 = v86[3];
                v92 = v86[4];
                v93 = v86[5];
                *(_OWORD *)((char *)v88 + 89) = *(__int128 *)((char *)v86 + 89);
                v88[4] = v92;
                v88[5] = v93;
                v88[3] = v91;
                ++v64;
                v86 += 7;
                v88 += 7;
              }
              while (v86 != v87);
            }
            ++v65;
          }
          while (v65 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)&v178[8] - v66) >> 3));
          v78 = *(_QWORD *)__dst;
        }
        v16 = v150;
        if (v64 != 0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)&__dst[8] - v78) >> 4))
        {
          if (qword_1022A00B0 != -1)
            dispatch_once(&qword_1022A00B0, &stru_102155B90);
          v94 = qword_1022A00B8;
          if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(_QWORD *)&buf[4] = v64;
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)&__dst[8] - *(_QWORD *)__dst) >> 4);
            _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_ERROR, "CLRS,Unexpected need to resize route_epochs_expanded_vector,new size,%zu,original size,%zu", buf, 0x16u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A00B0 != -1)
              dispatch_once(&qword_1022A00B0, &stru_102155B90);
            v181 = 134218240;
            v182 = v64;
            v183 = 2048;
            v184 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)&__dst[8] - *(_QWORD *)__dst) >> 4);
            LODWORD(v149) = 22;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 16, "CLRS,Unexpected need to resize route_epochs_expanded_vector,new size,%zu,original size,%zu", (size_t)&v181, v149);
            v148 = (char *)v147;
            sub_100512490("Generic", 1, 0, 0, "CLSmootherErrorCode CLRouteSmoother::smoothPoints(dispatch_queue_t, std::vector<swan::RouteSmootherEpoch> &, std::vector<CLClientLocation> &, CLMotionActivity::Type, const BOOL, const BOOL, std::vector<ReconstructionIntervalData> &)", "%s\n", v147);
            if (v148 != buf)
              free(v148);
            v16 = v150;
          }
          sub_10082F464((uint64_t)__dst, v64);
        }
      }
      sub_100828350((uint64_t **)a3, (uint64_t *)&v175);
      v97 = *(double **)a3;
      *(_OWORD *)a3 = *(_OWORD *)__dst;
      *(_QWORD *)__dst = v97;
      *(_QWORD *)&__dst[8] = v97;
      v98 = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 16) = *(_QWORD *)&__dst[16];
      *(_QWORD *)&__dst[16] = v98;
      std::string::assign(&v175, "CombinedPreSmoothed");
      if (*(_QWORD *)__dst)
      {
        *(_QWORD *)&__dst[8] = *(_QWORD *)__dst;
        operator delete(*(void **)__dst);
      }
      *(_QWORD *)buf = v178;
      sub_10025E1F0((void ***)buf);
      goto LABEL_143;
    }
    v32 = 0;
    v33 = 0;
    v34 = 0;
    while (1)
    {
      memset(buf, 0, 24);
      sub_10082F0F0((uint64_t *)v178, (uint64_t)buf);
      if (*(_QWORD *)buf)
      {
        *(_QWORD *)&buf[8] = *(_QWORD *)buf;
        operator delete(*(void **)buf);
      }
      if ((unint64_t)objc_msgSend(*v31, "count") > 1)
        break;
      if (qword_1022A00B0 != -1)
        dispatch_once(&qword_1022A00B0, &stru_102155B90);
      v35 = qword_1022A00B8;
      if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEFAULT))
      {
        v36 = objc_msgSend(*v31, "count");
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = v34;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v36;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "CLRS,warning,interval %zu has fewer than 2 location samples, cannot reconstruct route,count,%zu", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00B0 != -1)
          dispatch_once(&qword_1022A00B0, &stru_102155B90);
        v37 = qword_1022A00B8;
        v38 = objc_msgSend(*v31, "count");
        *(_DWORD *)__dst = 134218240;
        *(_QWORD *)&__dst[4] = v34;
        *(_WORD *)&__dst[12] = 2048;
        *(_QWORD *)&__dst[14] = v38;
        LODWORD(v149) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v37, 0, "CLRS,warning,interval %zu has fewer than 2 location samples, cannot reconstruct route,count,%zu", (size_t)__dst, v149);
        v40 = (char *)v39;
        sub_100512490("Generic", 1, 0, 2, "CLSmootherErrorCode CLRouteSmoother::smoothPoints(dispatch_queue_t, std::vector<swan::RouteSmootherEpoch> &, std::vector<CLClientLocation> &, CLMotionActivity::Type, const BOOL, const BOOL, std::vector<ReconstructionIntervalData> &)", "%s\n", v39);
        if (v40 != buf)
          free(v40);
      }
LABEL_87:
      ++v34;
      v31 += 2;
      v32 += 24;
      if (v31 == v30)
        goto LABEL_114;
    }
    sub_1015A2E04(__dst, "Interval-");
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_102155B90);
    v41 = qword_1022A00B8;
    if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEFAULT))
    {
      if (*v31)
        v42 = objc_msgSend(*v31, "count");
      else
        v42 = 0;
      v43 = v31[1];
      if (v43)
        v43 = objc_msgSend(v43, "count");
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = v42;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v43;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "CLRS,reconstructRoute,intervalEpochs,locationSamples,size,%zu,odometrySamples,size,%zu", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00B0 != -1)
        dispatch_once(&qword_1022A00B0, &stru_102155B90);
      v52 = qword_1022A00B8;
      if (*v31)
        v53 = objc_msgSend(*v31, "count");
      else
        v53 = 0;
      v56 = v31[1];
      if (v56)
        v56 = objc_msgSend(v56, "count");
      v181 = 134218240;
      v182 = (unint64_t)v53;
      v183 = 2048;
      v184 = (uint64_t)v56;
      LODWORD(v149) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v52, 0, "CLRS,reconstructRoute,intervalEpochs,locationSamples,size,%zu,odometrySamples,size,%zu", (size_t)&v181, v149);
      v58 = (char *)v57;
      sub_100512490("Generic", 1, 0, 2, "CLSmootherErrorCode CLRouteSmoother::smoothPoints(dispatch_queue_t, std::vector<swan::RouteSmootherEpoch> &, std::vector<CLClientLocation> &, CLMotionActivity::Type, const BOOL, const BOOL, std::vector<ReconstructionIntervalData> &)", "%s\n", v57);
      if (v58 != buf)
        free(v58);
    }
    std::to_string((std::string *)buf, v34);
    if (__dst[23] >= 0)
      v44 = __dst;
    else
      v44 = *(const std::string::value_type **)__dst;
    if (__dst[23] >= 0)
      v45 = __dst[23];
    else
      v45 = *(_QWORD *)&__dst[8];
    v46 = std::string::insert((std::string *)buf, 0, v44, v45);
    v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
    v168 = v46->__r_.__value_.__r.__words[2];
    *(_OWORD *)v167 = v47;
    v46->__r_.__value_.__l.__size_ = 0;
    v46->__r_.__value_.__r.__words[2] = 0;
    v46->__r_.__value_.__r.__words[0] = 0;
    v48 = sub_10082C344((uint64_t)a1, (uint64_t)v167, a5, *(_QWORD *)v178 + v32, v31, a7);
    if (SHIBYTE(v168) < 0)
      operator delete(v167[0]);
    if ((buf[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)buf);
      if (v48)
      {
LABEL_84:
        v51 = *(_QWORD *)(*(_QWORD *)v178 + v32);
        v50 = *(_QWORD *)(*(_QWORD *)v178 + v32 + 8);
        if ((__dst[23] & 0x80000000) != 0)
          operator delete(*(void **)__dst);
        v33 += 0x6DB6DB6DB6DB6DB7 * ((v50 - v51) >> 4);
        goto LABEL_87;
      }
    }
    else if (v48)
    {
      goto LABEL_84;
    }
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_102155B90);
    v49 = qword_1022A00B8;
    if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v34;
      _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_ERROR, "CLRS,Interval Route Reconstruction before smoothing failed,interval,%zu", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00B0 != -1)
        dispatch_once(&qword_1022A00B0, &stru_102155B90);
      v181 = 134217984;
      v182 = v34;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 16, "CLRS,Interval Route Reconstruction before smoothing failed,interval,%zu", (size_t)&v181);
      v55 = (char *)v54;
      sub_100512490("Generic", 1, 0, 0, "CLSmootherErrorCode CLRouteSmoother::smoothPoints(dispatch_queue_t, std::vector<swan::RouteSmootherEpoch> &, std::vector<CLClientLocation> &, CLMotionActivity::Type, const BOOL, const BOOL, std::vector<ReconstructionIntervalData> &)", "%s\n", v54);
      if (v55 != buf)
        free(v55);
    }
    sub_101740774(a2, (uint64_t)"routesmoother", (uint64_t)"autostart_reconstruction_failure", 0);
    goto LABEL_84;
  }
  a1[51] = 0;
  *(_QWORD *)&v178[8] = 0;
  *(_QWORD *)v178 = 0;
  if (SHIBYTE(v173) < 0)
  {
    sub_100115CE4(v169, v172[0], (unint64_t)v172[1]);
  }
  else
  {
    *(_OWORD *)v169 = *(_OWORD *)v172;
    v170 = v173;
  }
  v59 = sub_10082C344((uint64_t)a1, (uint64_t)v169, a5, a3, (id *)v178, a7);
  v60 = v59;
  if (SHIBYTE(v170) < 0)
  {
    operator delete(v169[0]);
    if (v60)
      goto LABEL_105;
  }
  else if (v59)
  {
LABEL_105:
    std::string::assign(&v175, "Reconstructed");
    goto LABEL_143;
  }
  if (qword_1022A00B0 != -1)
    dispatch_once(&qword_1022A00B0, &stru_102155B90);
  v61 = qword_1022A00B8;
  if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_ERROR, "CLRS,Route Reconstruction before smoothing failed", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_102155B90);
    *(_WORD *)__dst = 0;
    LODWORD(v149) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 16, "CLRS,Route Reconstruction before smoothing failed", __dst, v149);
    v144 = (char *)v143;
    sub_100512490("Generic", 1, 0, 0, "CLSmootherErrorCode CLRouteSmoother::smoothPoints(dispatch_queue_t, std::vector<swan::RouteSmootherEpoch> &, std::vector<CLClientLocation> &, CLMotionActivity::Type, const BOOL, const BOOL, std::vector<ReconstructionIntervalData> &)", "%s\n", v143);
    if (v144 != buf)
      free(v144);
  }
  sub_101740774(a2, (uint64_t)"routesmoother", (uint64_t)"pasture_reconstruction_failure", 0);
LABEL_143:
  if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
    sub_100115CE4(&v166, v175.__r_.__value_.__l.__data_, v175.__r_.__value_.__l.__size_);
  else
    v166 = v175;
  v99 = sub_10082F4A8((uint64_t)a1);
  if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v166.__r_.__value_.__l.__data_);
  v100 = *a8;
  v101 = a8[1];
  if (*a8 != v101)
  {
    do
    {
      v102 = *(double **)a3;
      v103 = *(double **)(a3 + 8);
      while (v102 != v103)
      {
        if ((unint64_t)objc_msgSend(v100[1], "count") >= 2)
        {
          v104 = *v102;
          objc_msgSend(objc_msgSend(objc_msgSend(v100[1], "firstObject"), "cfAbsTimestamp"), "timeIntervalSinceReferenceDate");
          if (v104 >= v105)
          {
            v106 = *v102;
            objc_msgSend(objc_msgSend(objc_msgSend(v100[1], "lastObject"), "cfAbsTimestamp"), "timeIntervalSinceReferenceDate");
            if (v106 <= v107)
              *((_OWORD *)v102 + 2) = xmmword_101BAFEE0;
          }
        }
        if ((unint64_t)objc_msgSend(*v100, "count") >= 2)
        {
          v108 = *v102;
          objc_msgSend(objc_msgSend(objc_msgSend(*v100, "firstObject"), "timestamp"), "timeIntervalSinceReferenceDate");
          if (v108 >= v109)
          {
            v110 = *v102;
            objc_msgSend(objc_msgSend(objc_msgSend(*v100, "lastObject"), "timestamp"), "timeIntervalSinceReferenceDate");
            if (v110 <= v111)
              *((_OWORD *)v102 + 2) = xmmword_101BAFEE0;
          }
        }
        v102 += 14;
      }
      v100 += 2;
    }
    while (v100 != v101);
  }
  v112 = v152;
  if (a1[40]
    && (sub_1015A2E04(buf, "Smoothed"), sub_100828350((uint64_t **)a3, (uint64_t *)buf), (buf[23] & 0x80000000) != 0))
  {
    operator delete(*(void **)buf);
    if (v99)
      goto LABEL_164;
  }
  else if (v99)
  {
LABEL_164:
    v113 = 0.0;
    if (v20 >= 0.0)
      v113 = vabdd_f64(sub_1001FCBB4(), v20) * 1000.0;
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_102155B90);
    v114 = qword_1022A00B8;
    v115 = os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEFAULT);
    if (v115)
    {
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2050;
      *(_QWORD *)&buf[20] = v99;
      *(_WORD *)&buf[28] = 1026;
      *(_DWORD *)v187 = (int)v113;
      _os_log_impl((void *)&_mh_execute_header, v114, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRS,warning,smoother returned error\", \"smootherErrorCode\":%{public, location:CLSmootherErrorCode}lld, \"elapsedTime,msec\":%{public}d}", buf, 0x22u);
    }
    if (sub_1008293CC(v115, v116))
    {
      v162[0] = _NSConcreteStackBlock;
      v162[1] = 3221225472;
      v162[2] = sub_100832804;
      v162[3] = &unk_102155AE8;
      v163 = a5;
      *(double *)&v162[4] = v21;
      v162[5] = a3;
      *(double *)&v162[6] = v113;
      v164 = v152;
      v165 = a7;
      v162[7] = v99;
      v162[8] = a8;
      AnalyticsSendEventLazy(CFSTR("com.apple.routesmoother.SmootherResults"), v162);
    }
    goto LABEL_198;
  }
  if (!a1[45])
    goto LABEL_182;
  v117 = std::string::assign(&v174, "PostSmt");
  if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
    v117 = sub_100115CE4(&v161, v174.__r_.__value_.__l.__data_, v174.__r_.__value_.__l.__size_);
  else
    v161 = v174;
  v118 = sub_10082B3BC((uint64_t)v117, (uint64_t *)&v161, a5, (_QWORD *)a3);
  v119 = v118;
  if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v161.__r_.__value_.__l.__data_);
    if (v119)
    {
LABEL_179:
      if (a1[46])
      {
        std::string::assign(&v175, "PostMMRe");
        if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
          sub_100115CE4(&v160, v175.__r_.__value_.__l.__data_, v175.__r_.__value_.__l.__size_);
        else
          v160 = v175;
        v99 = sub_10082F4A8((uint64_t)a1);
        if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v160.__r_.__value_.__l.__data_);
        if (v99)
        {
          if (qword_1022A00B0 != -1)
            dispatch_once(&qword_1022A00B0, &stru_102155B90);
          v125 = qword_1022A00B8;
          if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v125, OS_LOG_TYPE_DEBUG, "CLRS,resmoother returned error", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A00B0 != -1)
              dispatch_once(&qword_1022A00B0, &stru_102155B90);
            *(_WORD *)v178 = 0;
            LODWORD(v149) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 2, "CLRS,resmoother returned error", v178, v149);
            v127 = (char *)v126;
            sub_100512490("Generic", 1, 0, 2, "CLSmootherErrorCode CLRouteSmoother::smoothPoints(dispatch_queue_t, std::vector<swan::RouteSmootherEpoch> &, std::vector<CLClientLocation> &, CLMotionActivity::Type, const BOOL, const BOOL, std::vector<ReconstructionIntervalData> &)", "%s\n", v126);
            if (v127 != buf)
              free(v127);
            v112 = v152;
          }
        }
        goto LABEL_183;
      }
LABEL_182:
      v99 = 0;
LABEL_183:
      sub_100832A3C((uint64_t **)a3, a4);
      v120 = 0.0;
      if (v20 >= 0.0)
        v120 = vabdd_f64(sub_1001FCBB4(), v20) * 1000.0;
      if (qword_1022A00B0 != -1)
        dispatch_once(&qword_1022A00B0, &stru_102155B90);
      v121 = qword_1022A00B8;
      if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEFAULT))
      {
        v122 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 4);
        *(_DWORD *)buf = 67241216;
        *(_DWORD *)&buf[4] = a5;
        *(_WORD *)&buf[8] = 2050;
        *(double *)&buf[10] = v21;
        *(_WORD *)&buf[18] = 2050;
        *(_QWORD *)&buf[20] = v122;
        *(_WORD *)&buf[28] = 2048;
        *(_QWORD *)v187 = v99;
        *(_WORD *)&v187[8] = 2050;
        v188 = v120;
        _os_log_impl((void *)&_mh_execute_header, v121, OS_LOG_TYPE_DEFAULT, "CLRS,Finished smoothing for workoutActivity,%{public}u,workoutDuration,%{public}.0lf,dataCount,%{public}zu,returnCode,%ld,elapsedTime,%{public}.0f,msec", buf, 0x30u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00B0 != -1)
          dispatch_once(&qword_1022A00B0, &stru_102155B90);
        v140 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 4);
        *(_DWORD *)v178 = 67241216;
        *(_DWORD *)&v178[4] = a5;
        *(_WORD *)&v178[8] = 2050;
        *(double *)&v178[10] = v21;
        *(_WORD *)&v178[18] = 2050;
        *(_QWORD *)&v178[20] = v140;
        *(_WORD *)&v178[28] = 2048;
        *(_QWORD *)v179 = v99;
        *(_WORD *)&v179[8] = 2050;
        v180 = v120;
        LODWORD(v149) = 48;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 0, "CLRS,Finished smoothing for workoutActivity,%{public}u,workoutDuration,%{public}.0lf,dataCount,%{public}zu,returnCode,%ld,elapsedTime,%{public}.0f,msec", v178, v149);
        v142 = (char *)v141;
        sub_100512490("Generic", 1, 0, 2, "CLSmootherErrorCode CLRouteSmoother::smoothPoints(dispatch_queue_t, std::vector<swan::RouteSmootherEpoch> &, std::vector<CLClientLocation> &, CLMotionActivity::Type, const BOOL, const BOOL, std::vector<ReconstructionIntervalData> &)", "%s\n", v141);
        if (v142 != buf)
          free(v142);
      }
      v156[0] = _NSConcreteStackBlock;
      v156[1] = 3221225472;
      v156[2] = sub_100832E44;
      v156[3] = &unk_102155AE8;
      v157 = a5;
      *(double *)&v156[4] = v21;
      v156[5] = a3;
      *(double *)&v156[6] = v120;
      v158 = v112;
      v159 = a7;
      v156[7] = v99;
      v156[8] = a8;
      AnalyticsSendEventLazy(CFSTR("com.apple.routesmoother.SmootherResults"), v156);
      goto LABEL_198;
    }
  }
  else if (v118)
  {
    goto LABEL_179;
  }
  if (qword_1022A00B0 != -1)
    dispatch_once(&qword_1022A00B0, &stru_102155B90);
  v123 = qword_1022A00B8;
  if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v123, OS_LOG_TYPE_DEBUG, "CLRS,CLMM mapMatching after smoothing failed", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_102155B90);
    *(_WORD *)v178 = 0;
    LODWORD(v149) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 2, "CLRS,CLMM mapMatching after smoothing failed", v178, v149);
    v146 = (char *)v145;
    sub_100512490("Generic", 1, 0, 2, "CLSmootherErrorCode CLRouteSmoother::smoothPoints(dispatch_queue_t, std::vector<swan::RouteSmootherEpoch> &, std::vector<CLClientLocation> &, CLMotionActivity::Type, const BOOL, const BOOL, std::vector<ReconstructionIntervalData> &)", "%s\n", v145);
    if (v146 != buf)
      free(v146);
  }
  v99 = 0;
LABEL_198:
  if (SHIBYTE(v173) < 0)
    operator delete(v172[0]);
  if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v174.__r_.__value_.__l.__data_);
  if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v175.__r_.__value_.__l.__data_);

  return v99;
}

void sub_10082B1A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a70;
  void *a71;
  char a72;
  void *a73;
  void *v73;

  if (a70 < 0)
    operator delete(__p);
  if (a72 < 0)
    operator delete(a71);
  if (SLOBYTE(STACK[0x207]) < 0)
    operator delete(a73);

  _Unwind_Resume(a1);
}

BOOL sub_10082B3BC(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD *a4)
{
  NSObject *v7;
  uint64_t *v8;
  uint64_t v9;
  char isTypePedestrian;
  char v11;
  _BOOL8 v12;
  NSObject *v13;
  NSObject *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t *v19;
  uint64_t v20;
  const char *v21;
  char *v22;
  const char *v23;
  char *v24;
  const char *v25;
  char *v26;
  uint64_t v27;
  id v28[2];
  std::__shared_weak_count *v29;
  char isTypeCycling;
  int v31;
  uint64_t *v32;
  __int16 v33;
  int v34;
  __int16 v35;
  uint64_t v36;
  _BYTE buf[18];
  __int16 v38;
  uint64_t v39;

  if (qword_1022A00B0 != -1)
    dispatch_once(&qword_1022A00B0, &stru_102155B90);
  v7 = qword_1022A00B8;
  if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEBUG))
  {
    v8 = a2;
    if (*((char *)a2 + 23) < 0)
      v8 = (uint64_t *)*a2;
    v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a4[1] - *a4) >> 4);
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = v8;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = a3;
    v38 = 2050;
    v39 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLRS,CLMM mapMatching,%{public}s,workout,%{public}u,dataCount,%{public}zu", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_102155B90);
    v19 = a2;
    if (*((char *)a2 + 23) < 0)
      v19 = (uint64_t *)*a2;
    v20 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a4[1] - *a4) >> 4);
    v31 = 136446722;
    v32 = v19;
    v33 = 1026;
    v34 = a3;
    v35 = 2050;
    v36 = v20;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 2, "CLRS,CLMM mapMatching,%{public}s,workout,%{public}u,dataCount,%{public}zu", &v31, 28);
    v22 = (char *)v21;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLRouteSmoother::mapMatchPoints(std::string, const CLMotionActivity::Type, std::vector<swan::RouteSmootherEpoch> &)", "%s\n", v21);
    if (v22 != buf)
      free(v22);
  }
  isTypeCycling = CLMotionActivity::isTypeCycling(a3);
  isTypePedestrian = CLMotionActivity::isTypePedestrian(a3);
  if (isTypeCycling)
    v11 = 1;
  else
    v11 = isTypePedestrian;
  if ((v11 & 1) != 0)
  {
    sub_1001FCBB4();
    sub_10083C7E4(&isTypeCycling, buf);
    v28[1] = *(id *)buf;
    v29 = *(std::__shared_weak_count **)&buf[8];
    v28[0] = 0;
    v12 = *(_QWORD *)buf != 0;
    if (*(_QWORD *)buf)
    {
      sub_1010CDF8C(*(uint64_t *)buf, 0, 0, 350);
      operator new();
    }
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_102155B90);
    v14 = qword_1022A00B8;
    if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "CLRS,CLMM,Failed to create geometry pointer", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00B0 != -1)
        dispatch_once(&qword_1022A00B0, &stru_102155B90);
      LOWORD(v31) = 0;
      LODWORD(v27) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 16, "CLRS,CLMM,Failed to create geometry pointer", &v31, v27);
      v26 = (char *)v25;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLRouteSmoother::mapMatchPoints(std::string, const CLMotionActivity::Type, std::vector<swan::RouteSmootherEpoch> &)", "%s\n", v25);
      if (v26 != buf)
        free(v26);
    }
    sub_100E3E4AC(v28);
    v15 = v29;
    if (v29)
    {
      p_shared_owners = (unint64_t *)&v29->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  else
  {
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_102155B90);
    v13 = qword_1022A00B8;
    if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "CLRS,CLMM,Unsupported activity type", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00B0 != -1)
        dispatch_once(&qword_1022A00B0, &stru_102155B90);
      LOWORD(v31) = 0;
      LODWORD(v27) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 2, "CLRS,CLMM,Unsupported activity type", &v31, v27);
      v24 = (char *)v23;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLRouteSmoother::mapMatchPoints(std::string, const CLMotionActivity::Type, std::vector<swan::RouteSmootherEpoch> &)", "%s\n", v23);
      if (v24 != buf)
        free(v24);
    }
    return 0;
  }
  return v12;
}

void sub_10082C278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,id a31,__int16 a32)
{
  sub_100E3E4AC(&a31);
  sub_100261F44((uint64_t)&a32);
  _Unwind_Resume(a1);
}

BOOL sub_10082C344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, id *a5, unsigned int a6)
{
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  unint64_t v18;
  double v19;
  double v20;
  NSObject *v21;
  uint64_t v22;
  int v23;
  id v24;
  id v25;
  double v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  void *i;
  void *v32;
  id v33;
  id v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  void **v53;
  _BOOL8 v54;
  int isTypeCycling;
  NSObject *v56;
  double *v57;
  double v58;
  double v59;
  double v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  double *v65;
  double v66;
  double v67;
  unint64_t v68;
  BOOL v69;
  int v70;
  int v71;
  double v72;
  double v73;
  double v74;
  double *v75;
  double *v76;
  CLLocationDegrees v77;
  double *v78;
  double v79;
  double v80;
  double v81;
  NSObject *v82;
  double v83;
  double v84;
  double v85;
  double v86;
  const char *v87;
  char *v88;
  NSObject *v89;
  double v90;
  double v91;
  double v92;
  double *v93;
  double *v94;
  double v95;
  _QWORD *v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  _QWORD *v107;
  _QWORD *v108;
  const std::locale::facet *v109;
  uint64_t v110;
  double v111;
  double *v112;
  double *v113;
  double *v114;
  uint64_t v115;
  double v116;
  uint64_t v117;
  double v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  double v122;
  NSObject *v123;
  double v124;
  uint64_t v125;
  unint64_t *v126;
  unint64_t v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  _QWORD *v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  char *v145;
  BOOL v146;
  BOOL v147;
  unint64_t *p_shared_owners;
  unint64_t v149;
  _OWORD *v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  _BYTE *v156;
  _OWORD *v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  char *v161;
  char *v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  char *v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  char *v174;
  double v175;
  double v176;
  double v177;
  double v178;
  double v179;
  double v180;
  double v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t *v184;
  unint64_t v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  _QWORD *v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  char *v197;
  char *v198;
  uint64_t v199;
  unint64_t *v200;
  unint64_t v201;
  char *v202;
  char *v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  uint64_t v211;
  uint64_t v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  int64x2_t v221;
  unint64_t v222;
  NSObject *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  uint64_t v235;
  uint64_t v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  int64x2_t v245;
  unint64_t v246;
  _OWORD *v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  _BYTE *v253;
  _OWORD *v254;
  uint64_t v255;
  unint64_t v256;
  unint64_t v257;
  char *v258;
  char *v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  char *v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  char *v271;
  std::__shared_weak_count *v272;
  unint64_t *v273;
  unint64_t v274;
  std::__shared_weak_count *v275;
  unint64_t *v276;
  unint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  const char *v281;
  char *v282;
  double v283;
  double v284;
  const char *v285;
  double v286;
  const char *v287;
  char *v288;
  NSObject *v289;
  const char *v290;
  char *v291;
  id v292;
  uint64_t v293;
  uint64_t v294;
  std::ios_base *v295;
  id v296;
  NSObject *v297;
  dispatch_time_t v298;
  NSObject *v299;
  NSObject *v300;
  void **v301;
  uint64_t v302;
  NSObject *v303;
  const char *v304;
  NSObject *v305;
  uint64_t v306;
  uint64_t v307;
  double v308;
  NSObject *v309;
  const char *v310;
  NSObject *v311;
  std::__shared_weak_count *v312;
  unint64_t *v313;
  unint64_t v314;
  double v316;
  NSObject *v317;
  void *v318;
  uint64_t v319;
  double *v320;
  id v321;
  int v322;
  int v323;
  int v324;
  id *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  int v329;
  id v330;
  id v331;
  double v332;
  const char *v333;
  char *v334;
  const char *v335;
  char *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  double *v340;
  id v341;
  uint64_t v342;
  int v343;
  int v344;
  const char *v345;
  char *v346;
  uint64_t v347;
  uint64_t v348;
  double v349;
  const char *v350;
  char *v351;
  const char *v352;
  char *v353;
  const char *v354;
  char *v355;
  uint64_t v356;
  double v357;
  double v358;
  unint64_t v359;
  double v360;
  double v361;
  unint64_t v363;
  uint64_t v364;
  void *context;
  void **v366;
  double v367;
  uint64_t v368;
  double v370;
  unint64_t v371;
  _QWORD v372[11];
  __int128 v373;
  void *v374;
  int v375;
  char v376;
  uint64_t v377[2];
  _QWORD *v378;
  std::__shared_weak_count *v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  std::string v385;
  void (*v386)(uint64_t, uint64_t);
  uint64_t v387;
  dispatch_semaphore_t v388;
  __int128 v389;
  __int16 v390;
  __int128 v391;
  __int16 v392;
  int v393;
  int64x2_t v394;
  unint64_t v395;
  void *__p;
  _BYTE *v397;
  unint64_t v398;
  _QWORD v399[6];
  _QWORD v400[6];
  uint64_t v401;
  uint64_t *v402;
  uint64_t v403;
  char v404;
  __int128 v405;
  __int128 v406;
  __int128 v407;
  __int128 v408;
  int v409;
  int v410;
  uint64_t v411;
  __int16 v412;
  uint64_t v413;
  __int16 v414;
  uint64_t v415;
  __int16 v416;
  uint64_t v417;
  __int16 v418;
  uint64_t v419;
  __int16 v420;
  uint64_t v421;
  _BYTE v422[64];
  __int128 v423;
  _BYTE v424[32];
  __int128 v425;
  __int128 v426;
  __int128 v427;
  int v428;
  void (__cdecl **v429)(std::ofstream *__hidden);
  uint8_t v430[128];
  _BYTE buf[24];
  _BYTE v432[20];
  _BYTE v433[20];
  double v434;
  _BYTE v435[6];
  __int16 v436;
  double v437;
  __int16 v438;
  double v439;

  v409 = a3;
  context = objc_autoreleasePoolPush();
  v361 = sub_1001FCBB4();
  v10 = 1.0;
  v11 = 1.0;
  if ((unint64_t)objc_msgSend(a5[1], "count") >= 2)
  {
    objc_msgSend(objc_msgSend(objc_msgSend(a5[1], "lastObject"), "cfAbsTimestamp"), "timeIntervalSinceReferenceDate");
    v13 = v12;
    objc_msgSend(objc_msgSend(objc_msgSend(a5[1], "firstObject"), "cfAbsTimestamp"), "timeIntervalSinceReferenceDate");
    v11 = vabdd_f64(v13, v14);
  }
  if ((unint64_t)objc_msgSend(*a5, "count") >= 2)
  {
    objc_msgSend(objc_msgSend(objc_msgSend(*a5, "lastObject"), "timestamp"), "timeIntervalSinceReferenceDate");
    v16 = v15;
    objc_msgSend(objc_msgSend(objc_msgSend(*a5, "firstObject"), "timestamp"), "timeIntervalSinceReferenceDate");
    v10 = vabdd_f64(v16, v17);
  }
  v18 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 4);
  v367 = 1.0;
  if (v18 >= 2)
    v367 = vabdd_f64(*(double *)(*(_QWORD *)a4 + 16 * ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 4) - 112), **(double **)a4);
  if (*(_BYTE *)(a1 + 51))
  {
    if (v11 >= v10)
      v19 = v11;
    else
      v19 = v10;
    v367 = v19;
    v18 = (unint64_t)objc_msgSend(*a5, "count");
  }
  if (!*(_BYTE *)(a1 + 64) || *(double *)(a1 + 56) < 1.0)
  {
    v20 = v367 / 10000.0;
    if (v367 / 10000.0 < 1.0)
      v20 = 1.0;
    if (v20 > 5.0)
      v20 = 5.0;
    *(double *)(a1 + 56) = v20;
    *(_BYTE *)(a1 + 64) = 1;
  }
  v359 = v18;
  if (qword_1022A00B0 != -1)
    dispatch_once(&qword_1022A00B0, &stru_102155B90);
  v21 = qword_1022A00B8;
  if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEFAULT))
  {
    v22 = a2;
    if (*(char *)(a2 + 23) < 0)
      v22 = *(_QWORD *)a2;
    v23 = *(unsigned __int8 *)(a1 + 51);
    if (*a5)
      v24 = objc_msgSend(*a5, "count");
    else
      v24 = 0;
    v25 = a5[1];
    if (v25)
      v25 = objc_msgSend(v25, "count");
    if (*(_BYTE *)(a1 + 64))
      v26 = *(double *)(a1 + 56);
    else
      v26 = 1.0;
    *(_DWORD *)buf = 136447746;
    *(_QWORD *)&buf[4] = v22;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = v23;
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = a3;
    *(_WORD *)v432 = 2050;
    *(_QWORD *)&v432[2] = v24;
    *(_WORD *)&v432[10] = 2050;
    *(_QWORD *)&v432[12] = v25;
    *(_WORD *)v433 = 2050;
    *(double *)&v433[2] = v367;
    *(_WORD *)&v433[10] = 2050;
    *(double *)&v433[12] = v26;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "CLRS,%{public}s,reconstructRoute,useTsp,%{public}d,workout,%{public}u,locationSamples,count,%{public}zu,odometrySamples,count,%{public}zu,workoutDurationSec,%{public}.1lf,fTimeBetweenReconstructedPointsSeconds,%{public}.1lf", buf, 0x40u);
  }
  v368 = a1;
  v366 = a5;
  v364 = a2;
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_102155B90);
    v325 = a5;
    v326 = a1;
    v327 = qword_1022A00B8;
    v328 = a2;
    if (*(char *)(a2 + 23) < 0)
      v328 = *(_QWORD *)a2;
    v329 = *(unsigned __int8 *)(a1 + 51);
    if (*a5)
    {
      v330 = objc_msgSend(*a5, "count");
      v325 = a5;
      v326 = a1;
    }
    else
    {
      v330 = 0;
    }
    v331 = v325[1];
    if (v331)
    {
      v331 = objc_msgSend(v331, "count");
      v326 = a1;
    }
    if (*(_BYTE *)(v326 + 64))
      v332 = *(double *)(v326 + 56);
    else
      v332 = 1.0;
    *(_DWORD *)v422 = 136447746;
    *(_QWORD *)&v422[4] = v328;
    *(_WORD *)&v422[12] = 1026;
    *(_DWORD *)&v422[14] = v329;
    *(_WORD *)&v422[18] = 1026;
    *(_DWORD *)&v422[20] = a3;
    *(_WORD *)&v422[24] = 2050;
    *(_QWORD *)&v422[26] = v330;
    *(_WORD *)&v422[34] = 2050;
    *(_QWORD *)&v422[36] = v331;
    *(_WORD *)&v422[44] = 2050;
    *(double *)&v422[46] = v367;
    *(_WORD *)&v422[54] = 2050;
    *(double *)&v422[56] = v332;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v327, 0, "CLRS,%{public}s,reconstructRoute,useTsp,%{public}d,workout,%{public}u,locationSamples,count,%{public}zu,odometrySamples,count,%{public}zu,workoutDurationSec,%{public}.1lf,fTimeBetweenReconstructedPointsSeconds,%{public}.1lf", v422, 64);
    v334 = (char *)v333;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLRouteSmoother::reconstructRoute(std::string, const CLMotionActivity::Type, std::vector<swan::RouteSmootherEpoch> &, ReconstructionIntervalData &, const BOOL)", "%s\n", v333);
    if (v334 != buf)
      free(v334);
  }
  v27 = objc_alloc_init((Class)NSMutableArray);
  if (*(_BYTE *)(a1 + 51))
  {
    v407 = 0u;
    v408 = 0u;
    v405 = 0u;
    v406 = 0u;
    v28 = *a5;
    v29 = objc_msgSend(*a5, "countByEnumeratingWithState:objects:count:", &v405, v430, 16);
    if (v29)
    {
      v30 = *(_QWORD *)v406;
      do
      {
        for (i = 0; i != v29; i = (char *)i + 1)
        {
          if (*(_QWORD *)v406 != v30)
            objc_enumerationMutation(v28);
          v32 = *(void **)(*((_QWORD *)&v405 + 1) + 8 * (_QWORD)i);
          v33 = objc_alloc((Class)CLTripSegmentLocation);
          v34 = objc_msgSend(v32, "timestamp");
          objc_msgSend(v32, "coordinate");
          v370 = v35;
          objc_msgSend(v32, "coordinate");
          v37 = v36;
          objc_msgSend(v32, "horizontalAccuracy");
          v39 = v38;
          objc_msgSend(v32, "course");
          v41 = v40;
          objc_msgSend(v32, "courseAccuracy");
          v43 = v42;
          objc_msgSend(v32, "speed");
          v45 = v44;
          objc_msgSend(v32, "speedAccuracy");
          v47 = v46;
          objc_msgSend(v32, "altitude");
          v49 = v48;
          objc_msgSend(v32, "verticalAccuracy");
          v51 = objc_msgSend(v33, "initWithTime:latitude:longitude:horizontalAccuracy:course:courseAccuracy:speed:speedAccuracy:altitude:altitudeAccuracy:locType:", v34, objc_msgSend(v32, "type"), v370, v37, v39, v41, v43, v45, v47, v49, v50);
          objc_msgSend(v51, "setSignalEnvironmentType:", objc_msgSend(v32, "signalEnvironmentType"));
          objc_msgSend(v27, "addObject:", v51);
        }
        v29 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v405, v430, 16);
      }
      while (v29);
    }
  }
  v52 = v368;
  if (*(_BYTE *)(v368 + 40))
  {
    if (*(_BYTE *)(v368 + 51))
      sub_100828644(v27, (uint64_t *)v364);
    else
      sub_100828350((uint64_t **)a4, (uint64_t *)v364);
    v52 = v368;
  }
  v401 = 0;
  v402 = &v401;
  v403 = 0x2020000000;
  v404 = 0;
  if (*(_BYTE *)(v52 + 51))
  {
    v53 = v366;
    if ((_DWORD)a3 == 4)
    {
      if (objc_msgSend(v27, "count"))
      {
        v292 = objc_msgSend(objc_alloc((Class)CLTripSegmentInputData), "initWithTripSegmentID:isFinalPart:modeOfTransport:tripLocations:startTripLocation:stopTripLocation:inertialOdometryData:", objc_alloc_init((Class)NSUUID), 1, 2, v27, objc_msgSend(v27, "firstObject"), objc_msgSend(v27, "lastObject"), v366[1]);
        *(_QWORD *)v422 = v293;
        *(_QWORD *)&v422[*(_QWORD *)(v293 - 24)] = v294;
        v295 = (std::ios_base *)&v422[*(_QWORD *)(*(_QWORD *)v422 - 24)];
        std::ios_base::init(v295, &v422[8]);
        v295[1].__vftable = 0;
        v295[1].__fmtflags_ = -1;
        std::filebuf::basic_filebuf(&v422[8]);
        v385.__r_.__value_.__r.__words[0] = 0;
        v385.__r_.__value_.__l.__size_ = (std::string::size_type)&v385;
        v385.__r_.__value_.__r.__words[2] = 0x3052000000;
        v386 = sub_100206E60;
        v387 = (uint64_t)sub_100207BA0;
        v388 = 0;
        v388 = dispatch_semaphore_create(0);
        v296 = objc_alloc_init((Class)CLTripSegmentProcessorOptions);
        objc_msgSend(v296, "setNetworkAccessAllowed:", a6);
        objc_msgSend(v296, "setRunInertialIntegrator:", *(unsigned __int8 *)(v368 + 43));
        objc_msgSend(v296, "setRunMapIntegrator:", *(unsigned __int8 *)(v368 + 44));
        if (!*(_BYTE *)(v368 + 64))
          sub_10028DF3C();
        objc_msgSend(v296, "setTimeBetweenReconstructedPointsSeconds:", *(double *)(v368 + 56));
        objc_msgSend(v296, "setTripSegmentRecorderLoggingDirectory:", CFSTR("/var/mobile/Library/Logs/locationd/routesmoother"));
        objc_msgSend(v296, "setUseParticleMapMatcherForSnappingInMapIntegrator:", 1);
        objc_msgSend(v296, "setUseXPCService:", *(unsigned __int8 *)(v368 + 52));
        v400[0] = _NSConcreteStackBlock;
        v400[1] = 3221225472;
        v400[2] = sub_1008338DC;
        v400[3] = &unk_102155B10;
        v400[4] = &v401;
        v400[5] = a4;
        v399[0] = _NSConcreteStackBlock;
        v399[1] = 3221225472;
        v399[2] = sub_1008342F8;
        v399[3] = &unk_102155B38;
        v399[4] = &v401;
        v399[5] = &v385;
        objc_msgSend(objc_alloc_init((Class)CLTripSegmentProcessorManager), "processTripSegmentData:withOptions:outputHandler:completionHandler:", v292, v296, v400, v399);
        v297 = *(NSObject **)(v385.__r_.__value_.__l.__size_ + 40);
        v298 = dispatch_time(0, 25000000000);
        if (dispatch_semaphore_wait(v297, v298))
        {
          *((_BYTE *)v402 + 24) = 1;
          if (qword_1022A00B0 != -1)
            dispatch_once(&qword_1022A00B0, &stru_102155B90);
          v299 = qword_1022A00B8;
          if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v299, OS_LOG_TYPE_ERROR, "CLRS,CLTSP,processTripSegmentData timed out", buf, 2u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A00B0 != -1)
              dispatch_once(&qword_1022A00B0, &stru_102155B90);
            LOWORD(v410) = 0;
            LODWORD(v356) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 16, "CLRS,CLTSP,processTripSegmentData timed out", &v410, v356);
            v351 = (char *)v350;
            sub_100512490("Generic", 1, 0, 0, "BOOL CLRouteSmoother::reconstructRoute(std::string, const CLMotionActivity::Type, std::vector<swan::RouteSmootherEpoch> &, ReconstructionIntervalData &, const BOOL)", "%s\n", v350);
            if (v351 != buf)
              free(v351);
            v53 = v366;
          }
        }
        if (*((_BYTE *)v402 + 24))
          sub_100833530(*v53, (char **)a4);
        v300 = *(NSObject **)(v385.__r_.__value_.__l.__size_ + 40);
        if (v300)
          dispatch_release(v300);
        _Block_object_dispose(&v385, 8);
        std::filebuf::~filebuf(&v422[8]);
        std::ios::~ios(&v429);
        v301 = (void **)v364;
        v302 = v368;
        goto LABEL_318;
      }
      if (qword_1022A00B0 != -1)
        dispatch_once(&qword_1022A00B0, &stru_102155B90);
      v309 = qword_1022A00B8;
      if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v309, OS_LOG_TYPE_ERROR, "CLRS,tslSampleArray count < 1, cannot reconstruct", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_316;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00B0 != -1)
        dispatch_once(&qword_1022A00B0, &stru_102155B90);
      *(_WORD *)v422 = 0;
      LODWORD(v356) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 16, "CLRS,tslSampleArray count < 1, cannot reconstruct", v422, v356);
      v291 = (char *)v310;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLRouteSmoother::reconstructRoute(std::string, const CLMotionActivity::Type, std::vector<swan::RouteSmootherEpoch> &, ReconstructionIntervalData &, const BOOL)", "%s\n", v310);
    }
    else
    {
      if ((_DWORD)a3 == 8 || (_DWORD)a3 == 6)
      {
        sub_100833530(*v366, (char **)a4);
        v54 = 1;
        goto LABEL_317;
      }
      if (qword_1022A00B0 != -1)
        dispatch_once(&qword_1022A00B0, &stru_102155B90);
      v303 = qword_1022A00B8;
      if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67240192;
        *(_DWORD *)&buf[4] = a3;
        _os_log_impl((void *)&_mh_execute_header, v303, OS_LOG_TYPE_DEFAULT, "CLRS,will not reconstruct route,not a supported workout type,%{public}u", buf, 8u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_316;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00B0 != -1)
        dispatch_once(&qword_1022A00B0, &stru_102155B90);
      *(_DWORD *)v422 = 67240192;
      *(_DWORD *)&v422[4] = a3;
      LODWORD(v356) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 0, "CLRS,will not reconstruct route,not a supported workout type,%{public}u", v422, v356);
      v291 = (char *)v304;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLRouteSmoother::reconstructRoute(std::string, const CLMotionActivity::Type, std::vector<swan::RouteSmootherEpoch> &, ReconstructionIntervalData &, const BOOL)", "%s\n", v304);
    }
LABEL_292:
    if (v291 != buf)
      free(v291);
    goto LABEL_316;
  }
  isTypeCycling = CLMotionActivity::isTypeCycling(a3);
  if (((CLMotionActivity::isTypePedestrian(a3) | isTypeCycling) & 1) == 0)
  {
    *((_BYTE *)v402 + 24) = 1;
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_102155B90);
    v289 = qword_1022A00B8;
    if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v289, OS_LOG_TYPE_DEBUG, "CLRS,reconstruction failed,unsupported activity type", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_316;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_102155B90);
    *(_WORD *)v422 = 0;
    LODWORD(v356) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 2, "CLRS,reconstruction failed,unsupported activity type", v422, v356);
    v291 = (char *)v290;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLRouteSmoother::reconstructRoute(std::string, const CLMotionActivity::Type, std::vector<swan::RouteSmootherEpoch> &, ReconstructionIntervalData &, const BOOL)", "%s\n", v290);
    goto LABEL_292;
  }
  v397 = 0;
  __p = 0;
  v398 = 0;
  v394 = 0uLL;
  v395 = 0;
  memset(&v385, 0, sizeof(v385));
  LODWORD(v386) = 0;
  v387 = 0x3FE0000000000000;
  LOWORD(v388) = 0;
  v389 = xmmword_101BDB710;
  v390 = 1;
  v391 = xmmword_101BDB720;
  v392 = 1;
  v393 = 0;
  std::string::assign(&v385, "CLRouteSmootherPedestrian");
  LODWORD(v386) = 2;
  v387 = 0x3FE0000000000000;
  LOWORD(v388) = 1;
  LOBYTE(v390) = a6;
  HIBYTE(v390) = *(_BYTE *)(v368 + 50);
  v391 = xmmword_101BDB730;
  if (qword_1022A00B0 != -1)
    dispatch_once(&qword_1022A00B0, &stru_102155B90);
  v56 = qword_1022A00B8;
  if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67240960;
    *(_DWORD *)&buf[4] = BYTE1(v388);
    *(_WORD *)&buf[8] = 2050;
    *(_QWORD *)&buf[10] = v387;
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = v388;
    *(_WORD *)v432 = 1026;
    *(_DWORD *)&v432[2] = v390;
    _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_INFO, "CLRS,reconstruction,CLGeoMapFeatureGeometrySettings,fUseXPCServiceForDataQuery,%{public}d,fIntersectionRoadSearchDistance,%{public}.1lf,fStoringRoadConnectionEnabled,%{public}d,fAllowNetworkTileDownload,%{public}d", buf, 0x1Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_102155B90);
    *(_DWORD *)v422 = 67240960;
    *(_DWORD *)&v422[4] = BYTE1(v388);
    *(_WORD *)&v422[8] = 2050;
    *(_QWORD *)&v422[10] = v387;
    *(_WORD *)&v422[18] = 1026;
    *(_DWORD *)&v422[20] = v388;
    *(_WORD *)&v422[24] = 1026;
    *(_DWORD *)&v422[26] = v390;
    LODWORD(v356) = 30;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 1, "CLRS,reconstruction,CLGeoMapFeatureGeometrySettings,fUseXPCServiceForDataQuery,%{public}d,fIntersectionRoadSearchDistance,%{public}.1lf,fStoringRoadConnectionEnabled,%{public}d,fAllowNetworkTileDownload,%{public}d", v422, v356);
    v336 = (char *)v335;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLRouteSmoother::reconstructRoute(std::string, const CLMotionActivity::Type, std::vector<swan::RouteSmootherEpoch> &, ReconstructionIntervalData &, const BOOL)", "%s\n", v335);
    if (v336 != buf)
      free(v336);
  }
  sub_10083C2D8((uint64_t **)&v385, &v383);
  sub_1001FCBB4();
  v57 = *(double **)a4;
  v357 = 0.0;
  v58 = 0.0;
  v59 = 0.0;
  v60 = 0.0;
  v61 = 0.0;
  v62 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
  if (!v62)
  {
LABEL_275:
    v301 = (void **)v364;
    v53 = v366;
    v302 = v368;
    if (v361 >= 0.0)
      v357 = vabdd_f64(sub_1001FCBB4(), v361) * 1000.0;
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_102155B90);
    v305 = qword_1022A00B8;
    if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEFAULT))
    {
      v306 = v364;
      if (*(char *)(v364 + 23) < 0)
        v306 = *(_QWORD *)v364;
      v307 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 4);
      if (*(_BYTE *)(v368 + 64))
        v308 = *(double *)(v368 + 56);
      else
        v308 = 1.0;
      *(_DWORD *)buf = 136448514;
      *(_QWORD *)&buf[4] = v306;
      *(_WORD *)&buf[12] = 2050;
      *(_QWORD *)&buf[14] = v307;
      *(_WORD *)&buf[22] = 2050;
      *(double *)v432 = v357;
      *(_WORD *)&v432[8] = 2050;
      *(double *)&v432[10] = v58;
      *(_WORD *)&v432[18] = 2050;
      *(double *)v433 = v59;
      *(_WORD *)&v433[8] = 2050;
      *(double *)&v433[10] = v60;
      *(_WORD *)&v433[18] = 2050;
      v434 = v61;
      *(_WORD *)v435 = 1026;
      *(_DWORD *)&v435[2] = v409;
      v436 = 2050;
      v437 = v308;
      v438 = 2050;
      v439 = v367;
      _os_log_impl((void *)&_mh_execute_header, v305, OS_LOG_TYPE_DEFAULT, "CLRS,type,%{public}s,reconstruction complete,dataCount,%{public}zu,totalElapsedTime,%{public}.0lf,msec,bufferMapDataElapsedTime,%{public}.0lf,msec,findRoadsNearElapsedTime,%{public}.0lf,msec,snapLocationsElapsedTime,%{public}.0lf,msec,buildRouteElapsedTime,%{public}.0lf,msec,workout,%{public}u,timeBetweenSamplesS,%{public}.1lf,workoutDurationSec,%{public}.1lf", buf, 0x62u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00B0 != -1)
        dispatch_once(&qword_1022A00B0, &stru_102155B90);
      v347 = v364;
      if (*(char *)(v364 + 23) < 0)
        v347 = *(_QWORD *)v364;
      v348 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 4);
      if (*(_BYTE *)(v368 + 64))
        v349 = *(double *)(v368 + 56);
      else
        v349 = 1.0;
      *(_DWORD *)v422 = 136448514;
      *(_QWORD *)&v422[4] = v347;
      *(_WORD *)&v422[12] = 2050;
      *(_QWORD *)&v422[14] = v348;
      *(_WORD *)&v422[22] = 2050;
      *(double *)&v422[24] = v357;
      *(_WORD *)&v422[32] = 2050;
      *(double *)&v422[34] = v58;
      *(_WORD *)&v422[42] = 2050;
      *(double *)&v422[44] = v59;
      *(_WORD *)&v422[52] = 2050;
      *(double *)&v422[54] = v60;
      *(_WORD *)&v422[62] = 2050;
      *(double *)&v423 = v61;
      WORD4(v423) = 1026;
      *(_DWORD *)((char *)&v423 + 10) = v409;
      HIWORD(v423) = 2050;
      *(double *)v424 = v349;
      *(_WORD *)&v424[8] = 2050;
      *(double *)&v424[10] = v367;
      LODWORD(v356) = 98;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 0, "CLRS,type,%{public}s,reconstruction complete,dataCount,%{public}zu,totalElapsedTime,%{public}.0lf,msec,bufferMapDataElapsedTime,%{public}.0lf,msec,findRoadsNearElapsedTime,%{public}.0lf,msec,snapLocationsElapsedTime,%{public}.0lf,msec,buildRouteElapsedTime,%{public}.0lf,msec,workout,%{public}u,timeBetweenSamplesS,%{public}.1lf,workoutDurationSec,%{public}.1lf", v422, v356);
      v353 = (char *)v352;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLRouteSmoother::reconstructRoute(std::string, const CLMotionActivity::Type, std::vector<swan::RouteSmootherEpoch> &, ReconstructionIntervalData &, const BOOL)", "%s\n", v352);
      if (v353 != buf)
        free(v353);
      v301 = (void **)v364;
      v53 = v366;
      v302 = v368;
    }
    if (&__p != (void **)a4)
      sub_10083C108((char *)a4, (char *)__p, (uint64_t)v397, 0x6DB6DB6DB6DB6DB7 * ((v397 - (_BYTE *)__p) >> 4));
    v70 = 0;
    goto LABEL_306;
  }
  v63 = 0;
  v363 = 0;
  v64 = 0x6DB6DB6DB6DB6DB7 * (v62 >> 4);
  v360 = 0.0;
  while (1)
  {
    v65 = &v57[14 * v63];
    v371 = v63 + 1;
    if (v64 > v63 + 1)
    {
      v66 = vabdd_f64(v57[14 * v63 + 14], *v65);
      v67 = vabdd_f64(*v65, v360);
      if (v66 < 2.0)
        v68 = v363 + 1;
      else
        v68 = 0;
      v69 = v66 < 5.0;
      v363 = v68;
      if (v68 > 0x1E)
        v69 = v67 < 30.0;
      if (v69)
      {
        v70 = 43;
        goto LABEL_229;
      }
      v360 = *v65;
    }
    v71 = sub_10083307C(&v409);
    v72 = 800.0;
    if (v71 == 3)
      v72 = 1600.0;
    v73 = v71 == 1 ? 400.0 : v72;
    v74 = sub_1001FCBB4();
    v75 = &v57[14 * v63];
    v77 = v75[1];
    v76 = v75 + 1;
    v78 = v76 + 1;
    if ((sub_100CC3880(v383, 1, 0, 0, *v65, v77, v76[1], v73) & 1) == 0)
      break;
    v79 = 0.0;
    if (v74 >= 0.0)
      v79 = vabdd_f64(sub_1001FCBB4(), v74) * 1000.0;
    v80 = sub_1001FCBB4();
    v380 = 0;
    v381 = 0;
    v382 = 0;
    sub_100CC3FC8(v383, (uint64_t)&v380, 1, *v76, *v78, v73);
    v81 = 0.0;
    if (v80 >= 0.0)
      v81 = vabdd_f64(sub_1001FCBB4(), v80) * 1000.0;
    if (v380 == v381)
    {
      if (qword_1022A00B0 != -1)
        dispatch_once(&qword_1022A00B0, &stru_102155B90);
      v89 = qword_1022A00B8;
      if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_INFO))
      {
        v90 = *v76;
        v91 = *v78;
        *(_DWORD *)buf = 134283777;
        *(double *)&buf[4] = v90;
        *(_WORD *)&buf[12] = 2049;
        *(double *)&buf[14] = v91;
        _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_INFO, "CLRS,no roads near location,%{private}.7lf,%{private}.7lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00B0 != -1)
          dispatch_once(&qword_1022A00B0, &stru_102155B90);
        v283 = *v76;
        v284 = *v78;
        *(_DWORD *)v422 = 134283777;
        *(double *)&v422[4] = v283;
        *(_WORD *)&v422[12] = 2049;
        *(double *)&v422[14] = v284;
        LODWORD(v356) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 1, "CLRS,no roads near location,%{private}.7lf,%{private}.7lf", v422, v356);
        v88 = (char *)v285;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLRouteSmoother::reconstructRoute(std::string, const CLMotionActivity::Type, std::vector<swan::RouteSmootherEpoch> &, ReconstructionIntervalData &, const BOOL)", "%s\n", v285);
        goto LABEL_240;
      }
    }
    else
    {
      if (qword_1022A00B0 != -1)
        dispatch_once(&qword_1022A00B0, &stru_102155B90);
      v82 = qword_1022A00B8;
      if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_INFO))
      {
        v83 = *v76;
        v84 = *v78;
        *(_DWORD *)buf = 134349569;
        *(_QWORD *)&buf[4] = (v381 - v380) >> 4;
        *(_WORD *)&buf[12] = 2049;
        *(double *)&buf[14] = v83;
        *(_WORD *)&buf[22] = 2049;
        *(double *)v432 = v84;
        _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_INFO, "CLRS,%{public}lu roads near location,%{private}.7lf,%{private}.7lf", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00B0 != -1)
          dispatch_once(&qword_1022A00B0, &stru_102155B90);
        v85 = *v76;
        v86 = *v78;
        *(_DWORD *)v422 = 134349569;
        *(_QWORD *)&v422[4] = (v381 - v380) >> 4;
        *(_WORD *)&v422[12] = 2049;
        *(double *)&v422[14] = v85;
        *(_WORD *)&v422[22] = 2049;
        *(double *)&v422[24] = v86;
        LODWORD(v356) = 32;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 1, "CLRS,%{public}lu roads near location,%{private}.7lf,%{private}.7lf", v422, v356);
        v88 = (char *)v87;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLRouteSmoother::reconstructRoute(std::string, const CLMotionActivity::Type, std::vector<swan::RouteSmootherEpoch> &, ReconstructionIntervalData &, const BOOL)", "%s\n", v87);
LABEL_240:
        if (v88 != buf)
          free(v88);
      }
    }
    v92 = sub_1001FCBB4();
    v378 = 0;
    v379 = 0;
    v93 = &v57[14 * v63];
    v95 = v93[6];
    v94 = v93 + 6;
    sub_100CC450C(v383, (uint64_t *)&v378, 1, *v65, *v76, *v78, v95, *(v94 - 3), v94[1]);
    v96 = v378;
    if (!v378)
    {
      if (qword_1022A00B0 != -1)
        dispatch_once(&qword_1022A00B0, &stru_102155B90);
      v123 = qword_1022A00B8;
      if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEFAULT))
      {
        v124 = *v65;
        *(_DWORD *)buf = 134349056;
        *(double *)&buf[4] = v124;
        _os_log_impl((void *)&_mh_execute_header, v123, OS_LOG_TYPE_DEFAULT, "CLRS,%{public}.1lf, destinationSnapPtr is null", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00B0 != -1)
          dispatch_once(&qword_1022A00B0, &stru_102155B90);
        v286 = *v65;
        *(_DWORD *)v422 = 134349056;
        *(double *)&v422[4] = v286;
        LODWORD(v356) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 0, "CLRS,%{public}.1lf, destinationSnapPtr is null", v422, v356);
        v288 = (char *)v287;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLRouteSmoother::reconstructRoute(std::string, const CLMotionActivity::Type, std::vector<swan::RouteSmootherEpoch> &, ReconstructionIntervalData &, const BOOL)", "%s\n", v287);
        if (v288 != buf)
          free(v288);
      }
      v70 = 1;
      goto LABEL_223;
    }
    v97 = v378[1];
    *(_QWORD *)v422 = *v378;
    *(_QWORD *)&v422[8] = v97;
    if (v97)
    {
      v98 = (unint64_t *)(v97 + 8);
      do
        v99 = __ldxr(v98);
      while (__stxr(v99 + 1, v98));
    }
    v100 = *((_OWORD *)v96 + 2);
    *(_OWORD *)&v422[16] = *((_OWORD *)v96 + 1);
    *(_OWORD *)&v422[32] = v100;
    v101 = *((_OWORD *)v96 + 3);
    v102 = *((_OWORD *)v96 + 4);
    v103 = *((_OWORD *)v96 + 6);
    *(_OWORD *)v424 = *((_OWORD *)v96 + 5);
    *(_OWORD *)&v424[16] = v103;
    *(_OWORD *)&v422[48] = v101;
    v423 = v102;
    v104 = *((_OWORD *)v96 + 7);
    v105 = *((_OWORD *)v96 + 8);
    v106 = *((_OWORD *)v96 + 9);
    v428 = *((_DWORD *)v96 + 40);
    v426 = v105;
    v427 = v106;
    v425 = v104;
    v107 = sub_100263F7C(&std::cout, (uint64_t)"getSingleShotSnap,", 18);
    v108 = (_QWORD *)std::ostream::operator<<(v107, *v65);
    std::ios_base::getloc((const std::ios_base *)((char *)v108 + *(_QWORD *)(*v108 - 24)));
    v109 = std::locale::use_facet((const std::locale *)buf, &std::ctype<char>::id);
    v110 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v109->__vftable[2].~facet_0)(v109, 10);
    std::locale::~locale((std::locale *)buf);
    std::ostream::put(v108, v110);
    std::ostream::flush(v108);
    v111 = 0.0;
    if (v92 >= 0.0)
      v111 = vabdd_f64(sub_1001FCBB4(), v92) * 1000.0;
    *(double *)&v424[24] = v57[14 * v63 + 8];
    DWORD2(v425) = 1;
    if ((_BYTE)v423 && *(double *)&v422[16] > 0.0 && *(_QWORD *)v422 && sub_10083AEA8((uint64_t)v422))
    {
      v113 = (double *)&v422[32];
      v112 = (double *)&v422[24];
      v114 = (double *)&v422[40];
    }
    else
    {
      v112 = v76;
      v113 = v76 + 1;
      v78 = (double *)&v422[32];
      v76 = (double *)&v422[24];
      v114 = v94;
      v94 = (double *)&v422[40];
    }
    *v76 = *v112;
    *v78 = *v113;
    *v94 = *v114;
    v115 = v394.i64[1];
    if (v394.i64[1] == v394.i64[0])
    {
      if (v394.i64[1] >= v395)
      {
        v136 = 0xCF3CF3CF3CF3CF3DLL * ((v394.i64[1] - v394.i64[0]) >> 3);
        if (0x9E79E79E79E79E7ALL * ((uint64_t)(v395 - v394.i64[0]) >> 3) <= v136 + 1)
          v137 = v136 + 1;
        else
          v137 = 0x9E79E79E79E79E7ALL * ((uint64_t)(v395 - v394.i64[0]) >> 3);
        if (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v395 - v394.i64[0]) >> 3) >= 0xC30C30C30C30C3)
          v138 = 0x186186186186186;
        else
          v138 = v137;
        *(_QWORD *)&v432[8] = &v395;
        v139 = (char *)sub_10083C750((uint64_t)&v395, v138);
        v140 = &v139[168 * v136];
        *(_QWORD *)&buf[8] = v140;
        *(_QWORD *)v432 = &v139[168 * v141];
        *(_QWORD *)v140 = *(_QWORD *)v422;
        v142 = *(_QWORD *)&v422[8];
        *((_QWORD *)v140 + 1) = *(_QWORD *)&v422[8];
        if (v142)
        {
          v143 = (unint64_t *)(v142 + 8);
          do
            v144 = __ldxr(v143);
          while (__stxr(v144 + 1, v143));
          v145 = *(char **)&buf[8];
        }
        else
        {
          v145 = &v139[168 * v136];
        }
        v227 = &v139[168 * v136];
        v228 = *(_OWORD *)&v422[32];
        *((_OWORD *)v227 + 1) = *(_OWORD *)&v422[16];
        *((_OWORD *)v227 + 2) = v228;
        v229 = *(_OWORD *)&v422[48];
        v230 = v423;
        v231 = *(_OWORD *)&v424[16];
        *((_OWORD *)v227 + 5) = *(_OWORD *)v424;
        *((_OWORD *)v227 + 6) = v231;
        *((_OWORD *)v227 + 3) = v229;
        *((_OWORD *)v227 + 4) = v230;
        v232 = v425;
        v233 = v426;
        v234 = v427;
        *((_DWORD *)v227 + 40) = v428;
        *((_OWORD *)v227 + 8) = v233;
        *((_OWORD *)v227 + 9) = v234;
        *((_OWORD *)v227 + 7) = v232;
        v135 = v140 + 168;
        *(_QWORD *)&buf[16] = v140 + 168;
        v235 = v394.i64[1];
        v236 = v394.i64[0];
        if (v394.i64[1] == v394.i64[0])
        {
          v245 = vdupq_n_s64(v394.u64[1]);
        }
        else
        {
          do
          {
            v237 = *(_OWORD *)(v235 - 168);
            v235 -= 168;
            *(_OWORD *)(v145 - 168) = v237;
            v145 -= 168;
            *(_QWORD *)v235 = 0;
            *(_QWORD *)(v235 + 8) = 0;
            v238 = *(_OWORD *)(v235 + 96);
            v240 = *(_OWORD *)(v235 + 48);
            v239 = *(_OWORD *)(v235 + 64);
            *((_OWORD *)v145 + 5) = *(_OWORD *)(v235 + 80);
            *((_OWORD *)v145 + 6) = v238;
            *((_OWORD *)v145 + 3) = v240;
            *((_OWORD *)v145 + 4) = v239;
            v242 = *(_OWORD *)(v235 + 128);
            v241 = *(_OWORD *)(v235 + 144);
            v243 = *(_OWORD *)(v235 + 112);
            *((_DWORD *)v145 + 40) = *(_DWORD *)(v235 + 160);
            *((_OWORD *)v145 + 8) = v242;
            *((_OWORD *)v145 + 9) = v241;
            *((_OWORD *)v145 + 7) = v243;
            v244 = *(_OWORD *)(v235 + 32);
            *((_OWORD *)v145 + 1) = *(_OWORD *)(v235 + 16);
            *((_OWORD *)v145 + 2) = v244;
          }
          while (v235 != v236);
          v245 = v394;
          v135 = *(_QWORD **)&buf[16];
        }
        v394.i64[0] = (uint64_t)v145;
        v394.i64[1] = (uint64_t)v135;
        *(int64x2_t *)&buf[8] = v245;
        v246 = v395;
        v395 = *(_QWORD *)v432;
        *(_QWORD *)v432 = v246;
        *(_QWORD *)buf = v245.i64[0];
        sub_10083C798((uint64_t)buf);
      }
      else
      {
        *(_QWORD *)v394.i64[1] = *(_QWORD *)v422;
        v125 = *(_QWORD *)&v422[8];
        *(_QWORD *)(v115 + 8) = *(_QWORD *)&v422[8];
        if (v125)
        {
          v126 = (unint64_t *)(v125 + 8);
          do
            v127 = __ldxr(v126);
          while (__stxr(v127 + 1, v126));
        }
        v128 = *(_OWORD *)&v422[32];
        *(_OWORD *)(v115 + 16) = *(_OWORD *)&v422[16];
        *(_OWORD *)(v115 + 32) = v128;
        v129 = *(_OWORD *)&v422[48];
        v130 = v423;
        v131 = *(_OWORD *)&v424[16];
        *(_OWORD *)(v115 + 80) = *(_OWORD *)v424;
        *(_OWORD *)(v115 + 96) = v131;
        *(_OWORD *)(v115 + 48) = v129;
        *(_OWORD *)(v115 + 64) = v130;
        v132 = v425;
        v133 = v426;
        v134 = v427;
        *(_DWORD *)(v115 + 160) = v428;
        *(_OWORD *)(v115 + 128) = v133;
        *(_OWORD *)(v115 + 144) = v134;
        *(_OWORD *)(v115 + 112) = v132;
        v135 = (_QWORD *)(v115 + 168);
      }
      v394.i64[1] = (uint64_t)v135;
      v247 = v397;
      if ((unint64_t)v397 >= v398)
      {
        v254 = __p;
        v255 = 0x6DB6DB6DB6DB6DB7 * ((v397 - (_BYTE *)__p) >> 4);
        v256 = v255 + 1;
        if ((unint64_t)(v255 + 1) > 0x249249249249249)
          sub_100259694();
        if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v398 - (_QWORD)__p) >> 4) > v256)
          v256 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v398 - (_QWORD)__p) >> 4);
        if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v398 - (_QWORD)__p) >> 4)) >= 0x124924924924924)
          v257 = 0x249249249249249;
        else
          v257 = v256;
        if (v257)
        {
          v258 = (char *)sub_1002A7588((uint64_t)&v398, v257);
          v247 = v397;
          v254 = __p;
        }
        else
        {
          v258 = 0;
        }
        v259 = &v258[112 * v255];
        v260 = *(_OWORD *)v65;
        v261 = *((_OWORD *)v65 + 2);
        *((_OWORD *)v259 + 1) = *((_OWORD *)v65 + 1);
        *((_OWORD *)v259 + 2) = v261;
        *(_OWORD *)v259 = v260;
        v262 = *((_OWORD *)v65 + 3);
        v263 = *((_OWORD *)v65 + 4);
        v264 = *((_OWORD *)v65 + 6);
        *((_OWORD *)v259 + 5) = *((_OWORD *)v65 + 5);
        *((_OWORD *)v259 + 6) = v264;
        *((_OWORD *)v259 + 3) = v262;
        *((_OWORD *)v259 + 4) = v263;
        if (v247 == v254)
        {
          v271 = &v258[112 * v255];
        }
        else
        {
          v265 = &v258[112 * v255];
          do
          {
            v266 = *(v247 - 7);
            v267 = *(v247 - 5);
            *((_OWORD *)v265 - 6) = *(v247 - 6);
            *((_OWORD *)v265 - 5) = v267;
            *((_OWORD *)v265 - 7) = v266;
            v268 = *(v247 - 4);
            v269 = *(v247 - 3);
            v270 = *(v247 - 2);
            v271 = v265 - 112;
            *(_OWORD *)(v265 - 23) = *(_OWORD *)((char *)v247 - 23);
            *((_OWORD *)v265 - 3) = v269;
            *((_OWORD *)v265 - 2) = v270;
            *((_OWORD *)v265 - 4) = v268;
            v247 -= 7;
            v265 -= 112;
          }
          while (v247 != v254);
        }
        v253 = v259 + 112;
        __p = v271;
        v397 = v259 + 112;
        v398 = (unint64_t)&v258[112 * v257];
        if (v254)
          operator delete(v254);
      }
      else
      {
        v248 = *(_OWORD *)v65;
        v249 = *((_OWORD *)v65 + 2);
        *((_OWORD *)v397 + 1) = *((_OWORD *)v65 + 1);
        v247[2] = v249;
        *v247 = v248;
        v250 = *((_OWORD *)v65 + 3);
        v251 = *((_OWORD *)v65 + 4);
        v252 = *((_OWORD *)v65 + 6);
        v247[5] = *((_OWORD *)v65 + 5);
        v247[6] = v252;
        v247[3] = v250;
        v247[4] = v251;
        v253 = v247 + 7;
      }
      v397 = v253;
      v70 = 43;
      goto LABEL_217;
    }
    v116 = sub_1001FCBB4();
    v117 = v394.i64[1];
    v118 = *(double *)&v422[16];
    if (vabdd_f64(*(double *)&v422[16], *(double *)(v394.i64[1] - 152)) < 5.0)
    {
LABEL_139:
      v150 = v397;
      if ((unint64_t)v397 >= v398)
      {
        v157 = __p;
        v158 = 0x6DB6DB6DB6DB6DB7 * ((v397 - (_BYTE *)__p) >> 4);
        v159 = v158 + 1;
        if ((unint64_t)(v158 + 1) > 0x249249249249249)
          sub_100259694();
        if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v398 - (_QWORD)__p) >> 4) > v159)
          v159 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v398 - (_QWORD)__p) >> 4);
        if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v398 - (_QWORD)__p) >> 4)) >= 0x124924924924924)
          v160 = 0x249249249249249;
        else
          v160 = v159;
        if (v160)
        {
          v161 = (char *)sub_1002A7588((uint64_t)&v398, v160);
          v150 = v397;
          v157 = __p;
        }
        else
        {
          v161 = 0;
        }
        v162 = &v161[112 * v158];
        v163 = *(_OWORD *)v65;
        v164 = *((_OWORD *)v65 + 2);
        *((_OWORD *)v162 + 1) = *((_OWORD *)v65 + 1);
        *((_OWORD *)v162 + 2) = v164;
        *(_OWORD *)v162 = v163;
        v165 = *((_OWORD *)v65 + 3);
        v166 = *((_OWORD *)v65 + 4);
        v167 = *((_OWORD *)v65 + 6);
        *((_OWORD *)v162 + 5) = *((_OWORD *)v65 + 5);
        *((_OWORD *)v162 + 6) = v167;
        *((_OWORD *)v162 + 3) = v165;
        *((_OWORD *)v162 + 4) = v166;
        if (v150 == v157)
        {
          v174 = &v161[112 * v158];
        }
        else
        {
          v168 = &v161[112 * v158];
          do
          {
            v169 = *(v150 - 7);
            v170 = *(v150 - 5);
            *((_OWORD *)v168 - 6) = *(v150 - 6);
            *((_OWORD *)v168 - 5) = v170;
            *((_OWORD *)v168 - 7) = v169;
            v171 = *(v150 - 4);
            v172 = *(v150 - 3);
            v173 = *(v150 - 2);
            v174 = v168 - 112;
            *(_OWORD *)(v168 - 23) = *(_OWORD *)((char *)v150 - 23);
            *((_OWORD *)v168 - 3) = v172;
            *((_OWORD *)v168 - 2) = v173;
            *((_OWORD *)v168 - 4) = v171;
            v150 -= 7;
            v168 -= 112;
          }
          while (v150 != v157);
        }
        v156 = v162 + 112;
        __p = v174;
        v397 = v162 + 112;
        v398 = (unint64_t)&v161[112 * v160];
        if (v157)
          operator delete(v157);
      }
      else
      {
        v151 = *(_OWORD *)v65;
        v152 = *((_OWORD *)v65 + 2);
        *((_OWORD *)v397 + 1) = *((_OWORD *)v65 + 1);
        v150[2] = v152;
        *v150 = v151;
        v153 = *((_OWORD *)v65 + 3);
        v154 = *((_OWORD *)v65 + 4);
        v155 = *((_OWORD *)v65 + 6);
        v150[5] = *((_OWORD *)v65 + 5);
        v150[6] = v155;
        v150[3] = v153;
        v150[4] = v154;
        v156 = v150 + 7;
      }
      v397 = v156;
      goto LABEL_158;
    }
    v119 = (std::__shared_weak_count *)v384;
    v377[0] = v383;
    v377[1] = v384;
    if (v384)
    {
      v120 = (unint64_t *)(v384 + 8);
      do
        v121 = __ldxr(v120);
      while (__stxr(v121 + 1, v120));
    }
    if (*(_BYTE *)(v368 + 64))
      v122 = *(double *)(v368 + 56);
    else
      v122 = 1.0;
    v146 = sub_100834878((double *)v368, (double *)(v117 - 168), (uint64_t)v422, v377, (uint64_t)&__p, LOBYTE(v57[14 * v63 + 13]), v118, v122);
    v147 = v146;
    if (!v119)
      goto LABEL_138;
    p_shared_owners = (unint64_t *)&v119->__shared_owners_;
    do
      v149 = __ldaxr(p_shared_owners);
    while (__stlxr(v149 - 1, p_shared_owners));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
      if (!v147)
        goto LABEL_139;
    }
    else
    {
LABEL_138:
      if (!v146)
        goto LABEL_139;
    }
LABEL_158:
    v358 = v81;
    v175 = v79;
    v176 = v111;
    v177 = v58;
    v178 = v59;
    v179 = v60;
    v180 = v61;
    v181 = 0.0;
    if (v116 >= 0.0)
      v181 = vabdd_f64(sub_1001FCBB4(), v116) * 1000.0;
    v182 = v394.i64[1];
    if (v394.i64[1] >= v395)
    {
      v194 = 0xCF3CF3CF3CF3CF3DLL * ((v394.i64[1] - v394.i64[0]) >> 3);
      v195 = v194 + 1;
      if (v194 + 1 > 0x186186186186186)
        sub_100259694();
      if (0x9E79E79E79E79E7ALL * ((uint64_t)(v395 - v394.i64[0]) >> 3) > v195)
        v195 = 0x9E79E79E79E79E7ALL * ((uint64_t)(v395 - v394.i64[0]) >> 3);
      if (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v395 - v394.i64[0]) >> 3) >= 0xC30C30C30C30C3)
        v196 = 0x186186186186186;
      else
        v196 = v195;
      *(_QWORD *)&v432[8] = &v395;
      if (v196)
        v197 = (char *)sub_10083C750((uint64_t)&v395, v196);
      else
        v197 = 0;
      v198 = &v197[168 * v194];
      *(_QWORD *)&buf[8] = v198;
      *(_QWORD *)v432 = &v197[168 * v196];
      *(_QWORD *)v198 = *(_QWORD *)v422;
      v199 = *(_QWORD *)&v422[8];
      *((_QWORD *)v198 + 1) = *(_QWORD *)&v422[8];
      if (v199)
      {
        v200 = (unint64_t *)(v199 + 8);
        do
          v201 = __ldxr(v200);
        while (__stxr(v201 + 1, v200));
        v202 = *(char **)&buf[8];
      }
      else
      {
        v202 = &v197[168 * v194];
      }
      v203 = &v197[168 * v194];
      v204 = *(_OWORD *)&v422[32];
      *((_OWORD *)v203 + 1) = *(_OWORD *)&v422[16];
      *((_OWORD *)v203 + 2) = v204;
      v205 = *(_OWORD *)&v422[48];
      v206 = v423;
      v207 = *(_OWORD *)&v424[16];
      *((_OWORD *)v203 + 5) = *(_OWORD *)v424;
      *((_OWORD *)v203 + 6) = v207;
      *((_OWORD *)v203 + 3) = v205;
      *((_OWORD *)v203 + 4) = v206;
      v208 = v425;
      v209 = v426;
      v210 = v427;
      *((_DWORD *)v203 + 40) = v428;
      *((_OWORD *)v203 + 8) = v209;
      *((_OWORD *)v203 + 9) = v210;
      *((_OWORD *)v203 + 7) = v208;
      v193 = v198 + 168;
      *(_QWORD *)&buf[16] = v198 + 168;
      v211 = v394.i64[1];
      v212 = v394.i64[0];
      if (v394.i64[1] == v394.i64[0])
      {
        v221 = vdupq_n_s64(v394.u64[1]);
      }
      else
      {
        do
        {
          v213 = *(_OWORD *)(v211 - 168);
          v211 -= 168;
          *(_OWORD *)(v202 - 168) = v213;
          v202 -= 168;
          *(_QWORD *)v211 = 0;
          *(_QWORD *)(v211 + 8) = 0;
          v214 = *(_OWORD *)(v211 + 96);
          v216 = *(_OWORD *)(v211 + 48);
          v215 = *(_OWORD *)(v211 + 64);
          *((_OWORD *)v202 + 5) = *(_OWORD *)(v211 + 80);
          *((_OWORD *)v202 + 6) = v214;
          *((_OWORD *)v202 + 3) = v216;
          *((_OWORD *)v202 + 4) = v215;
          v218 = *(_OWORD *)(v211 + 128);
          v217 = *(_OWORD *)(v211 + 144);
          v219 = *(_OWORD *)(v211 + 112);
          *((_DWORD *)v202 + 40) = *(_DWORD *)(v211 + 160);
          *((_OWORD *)v202 + 8) = v218;
          *((_OWORD *)v202 + 9) = v217;
          *((_OWORD *)v202 + 7) = v219;
          v220 = *(_OWORD *)(v211 + 32);
          *((_OWORD *)v202 + 1) = *(_OWORD *)(v211 + 16);
          *((_OWORD *)v202 + 2) = v220;
        }
        while (v211 != v212);
        v221 = v394;
        v193 = *(_QWORD **)&buf[16];
      }
      v394.i64[0] = (uint64_t)v202;
      v394.i64[1] = (uint64_t)v193;
      *(int64x2_t *)&buf[8] = v221;
      v222 = v395;
      v395 = *(_QWORD *)v432;
      *(_QWORD *)v432 = v222;
      *(_QWORD *)buf = v221.i64[0];
      sub_10083C798((uint64_t)buf);
    }
    else
    {
      *(_QWORD *)v394.i64[1] = *(_QWORD *)v422;
      v183 = *(_QWORD *)&v422[8];
      *(_QWORD *)(v182 + 8) = *(_QWORD *)&v422[8];
      if (v183)
      {
        v184 = (unint64_t *)(v183 + 8);
        do
          v185 = __ldxr(v184);
        while (__stxr(v185 + 1, v184));
      }
      v186 = *(_OWORD *)&v422[32];
      *(_OWORD *)(v182 + 16) = *(_OWORD *)&v422[16];
      *(_OWORD *)(v182 + 32) = v186;
      v187 = *(_OWORD *)&v422[48];
      v188 = v423;
      v189 = *(_OWORD *)&v424[16];
      *(_OWORD *)(v182 + 80) = *(_OWORD *)v424;
      *(_OWORD *)(v182 + 96) = v189;
      *(_OWORD *)(v182 + 48) = v187;
      *(_OWORD *)(v182 + 64) = v188;
      v190 = v425;
      v191 = v426;
      v192 = v427;
      *(_DWORD *)(v182 + 160) = v428;
      *(_OWORD *)(v182 + 128) = v191;
      *(_OWORD *)(v182 + 144) = v192;
      *(_OWORD *)(v182 + 112) = v190;
      v193 = (_QWORD *)(v182 + 168);
    }
    v394.i64[1] = (uint64_t)v193;
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_102155B90);
    v223 = qword_1022A00B8;
    if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_INFO))
    {
      v224 = *(_QWORD *)(v394.i64[1] - 144);
      v225 = *(_QWORD *)(v394.i64[1] - 136);
      v226 = *(_QWORD *)(v394.i64[1] - 128);
      *(_DWORD *)buf = 134284801;
      *(_QWORD *)&buf[4] = v224;
      *(_WORD *)&buf[12] = 2049;
      *(_QWORD *)&buf[14] = v225;
      *(_WORD *)&buf[22] = 2049;
      *(_QWORD *)v432 = v226;
      *(_WORD *)&v432[8] = 2049;
      *(_QWORD *)&v432[10] = *(_QWORD *)&v422[24];
      *(_WORD *)&v432[18] = 2049;
      *(_QWORD *)v433 = *(_QWORD *)&v422[32];
      *(_WORD *)&v433[8] = 2049;
      *(_QWORD *)&v433[10] = *(_QWORD *)&v422[40];
      _os_log_impl((void *)&_mh_execute_header, v223, OS_LOG_TYPE_INFO, "CLRS,startSnap,%{private}.8lf,%{private}.8lf,startCourse,%{private}.1lf,destSnap,%{private}.8lf,%{private}.8lf,destCourse,%{private}.2lf", buf, 0x3Eu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00B0 != -1)
        dispatch_once(&qword_1022A00B0, &stru_102155B90);
      v278 = *(_QWORD *)(v394.i64[1] - 144);
      v279 = *(_QWORD *)(v394.i64[1] - 136);
      v280 = *(_QWORD *)(v394.i64[1] - 128);
      v410 = 134284801;
      v411 = v278;
      v412 = 2049;
      v413 = v279;
      v414 = 2049;
      v415 = v280;
      v416 = 2049;
      v417 = *(_QWORD *)&v422[24];
      v418 = 2049;
      v419 = *(_QWORD *)&v422[32];
      v420 = 2049;
      v421 = *(_QWORD *)&v422[40];
      LODWORD(v356) = 62;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 1, "CLRS,startSnap,%{private}.8lf,%{private}.8lf,startCourse,%{private}.1lf,destSnap,%{private}.8lf,%{private}.8lf,destCourse,%{private}.2lf", &v410, v356);
      v282 = (char *)v281;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLRouteSmoother::reconstructRoute(std::string, const CLMotionActivity::Type, std::vector<swan::RouteSmootherEpoch> &, ReconstructionIntervalData &, const BOOL)", "%s\n", v281);
      if (v282 != buf)
        free(v282);
    }
    sub_100CC3214(v383);
    v70 = 0;
    v61 = v180 + v181;
    v60 = v179;
    v59 = v178;
    v58 = v177;
    v111 = v176;
    v79 = v175;
    v81 = v358;
LABEL_217:
    v272 = *(std::__shared_weak_count **)&v422[8];
    if (*(_QWORD *)&v422[8])
    {
      v273 = (unint64_t *)(*(_QWORD *)&v422[8] + 8);
      do
        v274 = __ldaxr(v273);
      while (__stlxr(v274 - 1, v273));
      if (!v274)
      {
        ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
        std::__shared_weak_count::__release_weak(v272);
      }
    }
    v60 = v60 + v111;
LABEL_223:
    v275 = v379;
    if (v379)
    {
      v276 = (unint64_t *)&v379->__shared_owners_;
      do
        v277 = __ldaxr(v276);
      while (__stlxr(v277 - 1, v276));
      if (!v277)
      {
        ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
        std::__shared_weak_count::__release_weak(v275);
      }
    }
    v58 = v58 + v79;
    v59 = v59 + v81;
    *(_QWORD *)buf = &v380;
    sub_1002A3684((void ***)buf);
LABEL_229:
    if (v70 != 43 && v70)
      goto LABEL_378;
    v57 = *(double **)a4;
    v64 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 4);
    ++v63;
    if (v64 <= v371)
      goto LABEL_275;
  }
  *((_BYTE *)v402 + 24) = 1;
  if (qword_1022A00B0 != -1)
    dispatch_once(&qword_1022A00B0, &stru_102155B90);
  v301 = (void **)v364;
  v53 = v366;
  v302 = v368;
  v311 = qword_1022A00B8;
  if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v311, OS_LOG_TYPE_DEFAULT, "CLRS,reconstruction failed,bufferMapData failed", buf, 2u);
  }
  if (!sub_1001BFF7C(115, 2))
  {
    v70 = 1;
    goto LABEL_306;
  }
  bzero(buf, 0x65CuLL);
  if (qword_1022A00B0 != -1)
    dispatch_once(&qword_1022A00B0, &stru_102155B90);
  *(_WORD *)v422 = 0;
  LODWORD(v356) = 2;
  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 0, "CLRS,reconstruction failed,bufferMapData failed", v422, v356);
  v355 = (char *)v354;
  sub_100512490("Generic", 1, 0, 2, "BOOL CLRouteSmoother::reconstructRoute(std::string, const CLMotionActivity::Type, std::vector<swan::RouteSmootherEpoch> &, ReconstructionIntervalData &, const BOOL)", "%s\n", v354);
  if (v355 != buf)
    free(v355);
  v70 = 1;
LABEL_378:
  v301 = (void **)v364;
  v53 = v366;
  v302 = v368;
LABEL_306:
  v312 = (std::__shared_weak_count *)v384;
  if (v384)
  {
    v313 = (unint64_t *)(v384 + 8);
    do
      v314 = __ldaxr(v313);
    while (__stlxr(v314 - 1, v313));
    if (!v314)
    {
      ((void (*)(std::__shared_weak_count *))v312->__on_zero_shared)(v312);
      std::__shared_weak_count::__release_weak(v312);
    }
  }
  if (SHIBYTE(v385.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v385.__r_.__value_.__l.__data_);
  *(_QWORD *)buf = &v394;
  sub_10083C268((void ***)buf);
  if (__p)
  {
    v397 = __p;
    operator delete(__p);
  }
  if (v70)
  {
LABEL_316:
    v54 = 0;
    goto LABEL_317;
  }
LABEL_318:
  v316 = 0.0;
  if (v361 >= 0.0)
    v316 = vabdd_f64(sub_1001FCBB4(), v361) * 1000.0;
  if (qword_1022A00B0 != -1)
    dispatch_once(&qword_1022A00B0, &stru_102155B90);
  v317 = qword_1022A00B8;
  if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEFAULT))
  {
    v318 = v301;
    if (*((char *)v301 + 23) < 0)
      v318 = *v301;
    v320 = *(double **)a4;
    v319 = *(_QWORD *)(a4 + 8);
    v321 = objc_msgSend(v53[1], "count");
    v322 = *(unsigned __int8 *)(v302 + 51);
    v323 = *((unsigned __int8 *)v402 + 24);
    *(_DWORD *)buf = 136448258;
    *(_QWORD *)&buf[4] = v318;
    *(_WORD *)&buf[12] = 2050;
    *(_QWORD *)&buf[14] = 0x6DB6DB6DB6DB6DB7 * ((v319 - (uint64_t)v320) >> 4);
    *(_WORD *)&buf[22] = 2050;
    *(_QWORD *)v432 = v321;
    *(_WORD *)&v432[8] = 2050;
    *(double *)&v432[10] = v316;
    *(_WORD *)&v432[18] = 1026;
    *(_DWORD *)v433 = v409;
    *(_WORD *)&v433[4] = 2050;
    *(double *)&v433[6] = v367;
    *(_WORD *)&v433[14] = 1026;
    *(_DWORD *)&v433[16] = v322;
    LOWORD(v434) = 1026;
    *(_DWORD *)((char *)&v434 + 2) = a6;
    HIWORD(v434) = 1026;
    *(_DWORD *)v435 = v323;
    _os_log_impl((void *)&_mh_execute_header, v317, OS_LOG_TYPE_DEFAULT, "CLRS,type,%{public}s,reconstruction complete,locationCount,%{public}zu,inertialOdometryCount,%{public}zu,totalElapsedTimeMs,%{public}.0lf,workout,%{public}u,workoutDurationSec,%{public}.1lf,fUseTripSegmentProcessorForReconstruction,%{public}d,networkAccessAllowed,%{public}d,reconstructionFailed,%{public}d", buf, 0x4Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_102155B90);
    v337 = v364;
    if (*(char *)(v364 + 23) < 0)
      v337 = *(_QWORD *)v364;
    v338 = qword_1022A00B8;
    v340 = *(double **)a4;
    v339 = *(_QWORD *)(a4 + 8);
    v341 = objc_msgSend(v366[1], "count");
    v342 = v339 - (_QWORD)v340;
    v324 = v409;
    v343 = *(unsigned __int8 *)(v368 + 51);
    v344 = *((unsigned __int8 *)v402 + 24);
    *(_DWORD *)v422 = 136448258;
    *(_QWORD *)&v422[4] = v337;
    *(_WORD *)&v422[12] = 2050;
    *(_QWORD *)&v422[14] = 0x6DB6DB6DB6DB6DB7 * (v342 >> 4);
    *(_WORD *)&v422[22] = 2050;
    *(_QWORD *)&v422[24] = v341;
    *(_WORD *)&v422[32] = 2050;
    *(double *)&v422[34] = v316;
    *(_WORD *)&v422[42] = 1026;
    *(_DWORD *)&v422[44] = v409;
    *(_WORD *)&v422[48] = 2050;
    *(double *)&v422[50] = v367;
    *(_WORD *)&v422[58] = 1026;
    *(_DWORD *)&v422[60] = v343;
    LOWORD(v423) = 1026;
    *(_DWORD *)((char *)&v423 + 2) = a6;
    WORD3(v423) = 1026;
    DWORD2(v423) = v344;
    LODWORD(v356) = 76;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v338, 0, "CLRS,type,%{public}s,reconstruction complete,locationCount,%{public}zu,inertialOdometryCount,%{public}zu,totalElapsedTimeMs,%{public}.0lf,workout,%{public}u,workoutDurationSec,%{public}.1lf,fUseTripSegmentProcessorForReconstruction,%{public}d,networkAccessAllowed,%{public}d,reconstructionFailed,%{public}d", v422, v356);
    v346 = (char *)v345;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLRouteSmoother::reconstructRoute(std::string, const CLMotionActivity::Type, std::vector<swan::RouteSmootherEpoch> &, ReconstructionIntervalData &, const BOOL)", "%s\n", v345);
    if (v346 != buf)
      free(v346);
    v301 = (void **)v364;
    v53 = v366;
    v302 = v368;
  }
  else
  {
    v324 = v409;
  }
  v372[0] = _NSConcreteStackBlock;
  v372[1] = 3321888768;
  v372[2] = sub_10083540C;
  v372[3] = &unk_102155B60;
  v372[5] = v302;
  v375 = v324;
  *(double *)&v372[6] = v367;
  *(double *)&v372[7] = v316;
  v372[8] = v359;
  v372[9] = v53;
  v372[10] = a4;
  v376 = a6;
  if (*((char *)v301 + 23) < 0)
  {
    sub_100115CE4(&v373, *v301, (unint64_t)v301[1]);
  }
  else
  {
    v373 = *(_OWORD *)v301;
    v374 = v301[2];
  }
  v372[4] = &v401;
  AnalyticsSendEventLazy(CFSTR("com.apple.routesmoother.ReconstructionResults"), v372);
  v54 = *((_BYTE *)v402 + 24) == 0;
  if (SHIBYTE(v374) < 0)
    operator delete((void *)v373);
LABEL_317:
  _Block_object_dispose(&v401, 8);
  objc_autoreleasePoolPop(context);
  return v54;
}

void sub_10082EF64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  char a72;
  void *v73;

  sub_100261F44((uint64_t)&a57);
  if (a64 < 0)
    operator delete(__p);
  STACK[0x330] = (unint64_t)&a72;
  sub_10083C268((void ***)&STACK[0x330]);
  v73 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v73;
    operator delete(v73);
  }
  _Block_object_dispose(&STACK[0x280], 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10082F0F0(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_100259694();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)sub_1002596A8(result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    sub_10083B0A0(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = sub_10025E974((uint64_t)v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_10082F218(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10025E974((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10082F22C(_QWORD *a1, unint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  unint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint8_t buf[4];
  unint64_t v14;
  __int16 v15;
  uint64_t v16;

  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[1] - *a1) >> 4) < a2)
  {
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_102155B90);
    v4 = qword_1022A00B8;
    if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_ERROR))
    {
      v5 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[1] - *a1) >> 4);
      *(_DWORD *)buf = 134218240;
      v14 = a2;
      v15 = 2048;
      v16 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "CLRS,Unexpected need to increase size of route_epochs_expanded_vector,new size,%zu,original size,%zu", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00B0 != -1)
        dispatch_once(&qword_1022A00B0, &stru_102155B90);
      v6 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[1] - *a1) >> 4);
      v9 = 134218240;
      v10 = a2;
      v11 = 2048;
      v12 = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 16, "CLRS,Unexpected need to increase size of route_epochs_expanded_vector,new size,%zu,original size,%zu", (size_t)&v9, 22);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "auto CLRouteSmoother::smoothPoints(dispatch_queue_t, std::vector<swan::RouteSmootherEpoch> &, std::vector<CLClientLocation> &, CLMotionActivity::Type, const BOOL, const BOOL, std::vector<ReconstructionIntervalData> &)::(anonymous class)::operator()(std::vector<swan::RouteSmootherEpoch> &, const size_t) const", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    sub_10082F464((uint64_t)a1, a2);
  }
}

void sub_10082F464(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_10083B5E4((char **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 112 * a2;
  }
}

uint64_t sub_10082F4A8(uint64_t a1)
{
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  double v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  NSObject *v16;
  NSObject *v17;
  double v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  char *v23;
  NSObject *v24;
  NSObject *v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  double v30;
  NSObject *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  int v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  char *v51;
  NSObject *v52;
  double v53;
  NSObject *v54;
  double v55;
  NSObject *v56;
  uint64_t v57;
  NSObject *v58;
  const char *v59;
  char *v60;
  NSObject *v61;
  uint64_t **v62;
  uint64_t **v63;
  uint64_t **v64;
  uint64_t **v65;
  int v66;
  _QWORD *v67;
  char *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  int *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  unint64_t *v104;
  unint64_t v105;
  char *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char *v113;
  unint64_t *v114;
  unint64_t v115;
  double v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unsigned __int8 *v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  unsigned __int8 *v127;
  unsigned __int8 *v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  char *v132;
  char *v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  char *v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  char *v145;
  unsigned __int8 *v146;
  unsigned __int8 *v147;
  uint64_t **v148;
  uint64_t **v149;
  uint64_t **v150;
  double v151;
  uint64_t **v152;
  uint64_t **v153;
  NSObject *v154;
  NSObject *v155;
  int v156;
  NSObject *v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  double v162;
  NSObject *v163;
  NSObject *v164;
  uint64_t v165;
  const char *v166;
  char *v167;
  const char *v168;
  char *v169;
  const char *v170;
  const char *v171;
  char *v172;
  const char *v173;
  char *v174;
  double v175;
  uint64_t v176;
  NSObject *v177;
  double v178;
  NSObject *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v183;
  uint64_t v184;
  const char *v185;
  char *v186;
  const char *v187;
  char *v188;
  const char *v189;
  char *v190;
  const char *v191;
  char *v192;
  uint64_t v193;
  const char *v194;
  char *v195;
  const char *v196;
  char *v197;
  const char *v198;
  char *v199;
  uint64_t v200;
  const char *v201;
  char *v202;
  const char *v203;
  char *v204;
  const char *v205;
  const char *v206;
  char *v207;
  const char *v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  __int16 v215[8];
  void *v216;
  unsigned __int8 *v217;
  char *v218;
  void *v219;
  void *__dst;
  uint64_t v221;
  void *v222;
  _BYTE *v223;
  uint64_t v224;
  void *v225;
  char *v226;
  char *v227;
  void *v228;
  char *v229;
  char *v230;
  void *v231;
  char *v232;
  char *v233;
  void *v234;
  char *v235;
  char *v236;
  unsigned __int8 v237;
  char v238[8];
  _QWORD *v239;
  char v240[8];
  _QWORD *v241;
  char v242[8];
  _QWORD *v243;
  char v244[8];
  _QWORD *v245;
  char v246[8];
  _QWORD *v247;
  _QWORD *v248;
  _QWORD *v249;
  _QWORD *v250;
  _QWORD *v251;
  _QWORD *v252;
  _QWORD *v253;
  _QWORD *v254;
  _QWORD *v255;
  _QWORD v256[3];
  char v257;
  void *v258;
  char v259;
  uint64_t *v260[3];
  _QWORD *v261[3];
  uint64_t *v262[4];
  uint64_t v263;
  char v264;
  void *__p;
  char *v266;
  char *v267;
  int v268;
  _BYTE v269[12];
  __int16 v270;
  uint64_t v271;
  __int16 v272;
  uint64_t v273;
  _BYTE v274[38];
  __int16 v275;
  uint64_t v276;
  _BYTE buf[48];
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  _QWORD *v282[3];
  _QWORD *v283[3];
  _QWORD *v284[13];
  _QWORD v285[14171];

  __chkstk_darwin(a1);
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v213 = v7;
  v9 = v8;
  v268 = v1;
  v10 = sub_1001FCBB4();
  if (qword_1022A00B0 != -1)
    dispatch_once(&qword_1022A00B0, &stru_102155B90);
  v11 = qword_1022A00B8;
  if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_INFO))
  {
    v12 = v6;
    if (*(char *)(v6 + 23) < 0)
      v12 = *(_QWORD *)v6;
    v13 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v4 + 8) - *(_QWORD *)v4) >> 4);
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = v12;
    *(_WORD *)&buf[12] = 2050;
    *(_QWORD *)&buf[14] = v13;
    *(_WORD *)&buf[22] = 1026;
    *(_DWORD *)&buf[24] = v2;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "CLRS,Smoothing,%{public}s,dataCount,%{public}zu,workout,%{public}u", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_102155B90);
    v183 = v6;
    if (*(char *)(v6 + 23) < 0)
      v183 = *(_QWORD *)v6;
    v184 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v4 + 8) - *(_QWORD *)v4) >> 4);
    *(_DWORD *)v274 = 136446722;
    *(_QWORD *)&v274[4] = v183;
    *(_WORD *)&v274[12] = 2050;
    *(_QWORD *)&v274[14] = v184;
    *(_WORD *)&v274[22] = 1026;
    *(_DWORD *)&v274[24] = v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 1, "CLRS,Smoothing,%{public}s,dataCount,%{public}zu,workout,%{public}u", v274, 28);
    v186 = (char *)v185;
    sub_100512490("Generic", 1, 0, 2, "CLSmootherErrorCode CLRouteSmoother::smoothPointsInternal(dispatch_queue_t, std::string, std::vector<swan::RouteSmootherEpoch> &, CLMotionActivity::Type)", "%s\n", v185);
    if (v186 != buf)
      free(v186);
  }
  if (v9[40])
    sub_100828350((uint64_t **)v4, (uint64_t *)v6);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v4 + 8) - *(_QWORD *)v4) >> 4)) <= 9)
  {
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_102155B90);
    v14 = qword_1022A00B8;
    if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "CLRS,too few points to smooth", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00B0 != -1)
        dispatch_once(&qword_1022A00B0, &stru_102155B90);
      *(_WORD *)v274 = 0;
      LODWORD(v210) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 2, "CLRS,too few points to smooth", v274, v210);
      v188 = (char *)v187;
      sub_100512490("Generic", 1, 0, 2, "CLSmootherErrorCode CLRouteSmoother::smoothPointsInternal(dispatch_queue_t, std::string, std::vector<swan::RouteSmootherEpoch> &, CLMotionActivity::Type)", "%s\n", v187);
      if (v188 != buf)
        free(v188);
    }
    return 2;
  }
  v266 = 0;
  __p = 0;
  v267 = 0;
  sub_1001FCBB4();
  v214 = v4;
  v212 = v6;
  if (v9[47])
  {
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_102155B90);
    v16 = qword_1022A00B8;
    if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "CLRS,CLCF,corner detection started", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00B0 != -1)
        dispatch_once(&qword_1022A00B0, &stru_102155B90);
      *(_WORD *)v274 = 0;
      LODWORD(v210) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 2, "CLRS,CLCF,corner detection started", v274, v210);
      v197 = (char *)v196;
      sub_100512490("Generic", 1, 0, 2, "CLSmootherErrorCode CLRouteSmoother::smoothPointsInternal(dispatch_queue_t, std::string, std::vector<swan::RouteSmootherEpoch> &, CLMotionActivity::Type)", "%s\n", v196);
      if (v197 != buf)
        free(v197);
    }
    if ((sub_100A9C42C((_QWORD *)v4) & 1) == 0)
    {
      if (qword_1022A00B0 != -1)
        dispatch_once(&qword_1022A00B0, &stru_102155B90);
      v17 = qword_1022A00B8;
      if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "CLRS,CLCF,corner detection failed", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00B0 != -1)
          dispatch_once(&qword_1022A00B0, &stru_102155B90);
        *(_WORD *)v274 = 0;
        LODWORD(v210) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 16, "CLRS,CLCF,corner detection failed", v274, v210);
        v207 = (char *)v206;
        sub_100512490("Generic", 1, 0, 0, "CLSmootherErrorCode CLRouteSmoother::smoothPointsInternal(dispatch_queue_t, std::string, std::vector<swan::RouteSmootherEpoch> &, CLMotionActivity::Type)", "%s\n", v206);
        if (v207 != buf)
          free(v207);
      }
    }
    v18 = 0.0;
    if (v10 >= 0.0)
      v18 = vabdd_f64(sub_1001FCBB4(), v10) * 1000.0;
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_102155B90);
    v19 = qword_1022A00B8;
    if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEBUG))
    {
      v20 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v4 + 8) - *(_QWORD *)v4) >> 4);
      *(_DWORD *)buf = 134349312;
      *(_QWORD *)&buf[4] = v20;
      *(_WORD *)&buf[12] = 2050;
      *(double *)&buf[14] = v18;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "CLRS,CLCF,corner detection completed,dataCount,%{public}zu,elapsedTime,%{public}.1f,msec", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00B0 != -1)
        dispatch_once(&qword_1022A00B0, &stru_102155B90);
      v21 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v4 + 8) - *(_QWORD *)v4) >> 4);
      *(_DWORD *)v274 = 134349312;
      *(_QWORD *)&v274[4] = v21;
      *(_WORD *)&v274[12] = 2050;
      *(double *)&v274[14] = v18;
      LODWORD(v210) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 2, "CLRS,CLCF,corner detection completed,dataCount,%{public}zu,elapsedTime,%{public}.1f,msec", v274, v210);
      v23 = (char *)v22;
      sub_100512490("Generic", 1, 0, 2, "CLSmootherErrorCode CLRouteSmoother::smoothPointsInternal(dispatch_queue_t, std::string, std::vector<swan::RouteSmootherEpoch> &, CLMotionActivity::Type)", "%s\n", v22);
      if (v23 != buf)
        free(v23);
    }
  }
  else
  {
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_102155B90);
    v24 = qword_1022A00B8;
    if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "CLRS,CLCF,corner detection disabled", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00B0 != -1)
        dispatch_once(&qword_1022A00B0, &stru_102155B90);
      *(_WORD *)v274 = 0;
      LODWORD(v210) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 2, "CLRS,CLCF,corner detection disabled", v274, v210);
      v204 = (char *)v203;
      sub_100512490("Generic", 1, 0, 2, "CLSmootherErrorCode CLRouteSmoother::smoothPointsInternal(dispatch_queue_t, std::string, std::vector<swan::RouteSmootherEpoch> &, CLMotionActivity::Type)", "%s\n", v203);
      if (v204 != buf)
        free(v204);
    }
  }
  if (qword_1022A00B0 != -1)
    dispatch_once(&qword_1022A00B0, &stru_102155B90);
  v25 = qword_1022A00B8;
  if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "CLRS,gap detection started", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_102155B90);
    *(_WORD *)v274 = 0;
    LODWORD(v210) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 2, "CLRS,gap detection started", v274, v210);
    v190 = (char *)v189;
    sub_100512490("Generic", 1, 0, 2, "CLSmootherErrorCode CLRouteSmoother::smoothPointsInternal(dispatch_queue_t, std::string, std::vector<swan::RouteSmootherEpoch> &, CLMotionActivity::Type)", "%s\n", v189);
    if (v190 != buf)
      free(v190);
  }
  v26 = *(uint64_t **)v4;
  v27 = *(_QWORD *)(v4 + 8);
  if (v27 != *(_QWORD *)v4)
  {
    v28 = 0;
    v29 = *(uint64_t **)v4;
    do
    {
      v30 = vabdd_f64(*(double *)&v26[14 * v28], *(double *)v29);
      if (v30 > 20.0)
      {
        if (qword_1022A00B0 != -1)
          dispatch_once(&qword_1022A00B0, &stru_102155B90);
        v31 = qword_1022A00B8;
        if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEBUG))
        {
          v32 = (uint64_t *)(*(_QWORD *)v4 + 112 * v28);
          v33 = *v32;
          v34 = v32[1];
          v35 = v32[2];
          *(_DWORD *)buf = 67241217;
          *(_DWORD *)&buf[4] = v28;
          *(_WORD *)&buf[8] = 2050;
          *(_QWORD *)&buf[10] = v33;
          *(_WORD *)&buf[18] = 2050;
          *(double *)&buf[20] = v30;
          *(_WORD *)&buf[28] = 2049;
          *(_QWORD *)&buf[30] = v34;
          *(_WORD *)&buf[38] = 2049;
          *(_QWORD *)&buf[40] = v35;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "CLRS,gap found,index,%{public}d,time,%{public}.1lf,gap,%{public}.1lf,lat,%{private}.7f,lon,%{private}.7f", buf, 0x30u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00B0 != -1)
            dispatch_once(&qword_1022A00B0, &stru_102155B90);
          v46 = (uint64_t *)(*(_QWORD *)v4 + 112 * v28);
          v47 = *v46;
          v48 = v46[1];
          v49 = v46[2];
          *(_DWORD *)v274 = 67241217;
          *(_DWORD *)&v274[4] = v28;
          *(_WORD *)&v274[8] = 2050;
          *(_QWORD *)&v274[10] = v47;
          *(_WORD *)&v274[18] = 2050;
          *(double *)&v274[20] = v30;
          *(_WORD *)&v274[28] = 2049;
          *(_QWORD *)&v274[30] = v48;
          v275 = 2049;
          v276 = v49;
          LODWORD(v210) = 48;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 2, "CLRS,gap found,index,%{public}d,time,%{public}.1lf,gap,%{public}.1lf,lat,%{private}.7f,lon,%{private}.7f", v274, v210);
          v51 = (char *)v50;
          sub_100512490("Generic", 1, 0, 2, "CLSmootherErrorCode CLRouteSmoother::smoothPointsInternal(dispatch_queue_t, std::string, std::vector<swan::RouteSmootherEpoch> &, CLMotionActivity::Type)", "%s\n", v50);
          if (v51 != buf)
            free(v51);
        }
        v36 = v266;
        if (v266 >= v267)
        {
          v38 = (char *)__p;
          v39 = (v266 - (_BYTE *)__p) >> 2;
          v40 = v39 + 1;
          if ((unint64_t)(v39 + 1) >> 62)
            sub_100259694();
          v41 = v267 - (_BYTE *)__p;
          if ((v267 - (_BYTE *)__p) >> 1 > v40)
            v40 = v41 >> 1;
          if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL)
            v42 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v42 = v40;
          if (v42)
          {
            v43 = (char *)sub_100260634((uint64_t)&v267, v42);
            v36 = v266;
            v38 = (char *)__p;
          }
          else
          {
            v43 = 0;
          }
          v44 = &v43[4 * v39];
          *(_DWORD *)v44 = v28;
          v37 = v44 + 4;
          while (v36 != v38)
          {
            v45 = *((_DWORD *)v36 - 1);
            v36 -= 4;
            *((_DWORD *)v44 - 1) = v45;
            v44 -= 4;
          }
          __p = v44;
          v266 = v37;
          v267 = &v43[4 * v42];
          if (v38)
            operator delete(v38);
        }
        else
        {
          *(_DWORD *)v266 = v28;
          v37 = v36 + 4;
        }
        v266 = v37;
        v26 = *(uint64_t **)v4;
        v27 = *(_QWORD *)(v4 + 8);
      }
      v29 = &v26[14 * v28++];
    }
    while (0x6DB6DB6DB6DB6DB7 * ((v27 - (uint64_t)v26) >> 4) > v28);
  }
  v264 = 0;
  if (v9[48])
  {
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_102155B90);
    v52 = qword_1022A00B8;
    if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEBUG, "CLRS,CLRTD,running track detection started", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00B0 != -1)
        dispatch_once(&qword_1022A00B0, &stru_102155B90);
      *(_WORD *)v274 = 0;
      LODWORD(v210) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 2, "CLRS,CLRTD,running track detection started", v274, v210);
      v199 = (char *)v198;
      sub_100512490("Generic", 1, 0, 2, "CLSmootherErrorCode CLRouteSmoother::smoothPointsInternal(dispatch_queue_t, std::string, std::vector<swan::RouteSmootherEpoch> &, CLMotionActivity::Type)", "%s\n", v198);
      if (v199 != buf)
        free(v199);
    }
    v53 = sub_1001FCBB4();
    if ((sub_100802860((_QWORD *)v4, &v264, v2) & 1) == 0)
    {
      if (qword_1022A00B0 != -1)
        dispatch_once(&qword_1022A00B0, &stru_102155B90);
      v54 = qword_1022A00B8;
      if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEBUG, "CLRS,CLRTD,Running track detection failed", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00B0 != -1)
          dispatch_once(&qword_1022A00B0, &stru_102155B90);
        *(_WORD *)v274 = 0;
        LODWORD(v210) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 2, "CLRS,CLRTD,Running track detection failed", v274, v210);
        v209 = (char *)v208;
        sub_100512490("Generic", 1, 0, 2, "CLSmootherErrorCode CLRouteSmoother::smoothPointsInternal(dispatch_queue_t, std::string, std::vector<swan::RouteSmootherEpoch> &, CLMotionActivity::Type)", "%s\n", v208);
        if (v209 != buf)
          free(v209);
      }
    }
    v55 = 0.0;
    if (v53 >= 0.0)
      v55 = vabdd_f64(sub_1001FCBB4(), v53) * 1000.0;
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_102155B90);
    v56 = qword_1022A00B8;
    if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEBUG))
    {
      v57 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v4 + 8) - *(_QWORD *)v4) >> 4);
      *(_DWORD *)buf = 134349312;
      *(_QWORD *)&buf[4] = v57;
      *(_WORD *)&buf[12] = 2050;
      *(double *)&buf[14] = v55;
      _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEBUG, "CLRS,CLRTD,running track detection completed,dataCount,%{public}zu,elapsedTime,%{public}.0lf,msec", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00B0 != -1)
        dispatch_once(&qword_1022A00B0, &stru_102155B90);
      v200 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v4 + 8) - *(_QWORD *)v4) >> 4);
      *(_DWORD *)v274 = 134349312;
      *(_QWORD *)&v274[4] = v200;
      *(_WORD *)&v274[12] = 2050;
      *(double *)&v274[14] = v55;
      LODWORD(v210) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 2, "CLRS,CLRTD,running track detection completed,dataCount,%{public}zu,elapsedTime,%{public}.0lf,msec", v274, v210);
      v202 = (char *)v201;
      sub_100512490("Generic", 1, 0, 2, "CLSmootherErrorCode CLRouteSmoother::smoothPointsInternal(dispatch_queue_t, std::string, std::vector<swan::RouteSmootherEpoch> &, CLMotionActivity::Type)", "%s\n", v201);
      if (v202 != buf)
        free(v202);
    }
    if (v264)
    {
      if (qword_1022A00B0 != -1)
        dispatch_once(&qword_1022A00B0, &stru_102155B90);
      v58 = qword_1022A00B8;
      if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEBUG, "CLRS,CLRTD,Running track detected!", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00B0 != -1)
          dispatch_once(&qword_1022A00B0, &stru_102155B90);
        *(_WORD *)v274 = 0;
        LODWORD(v210) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 2, "CLRS,CLRTD,Running track detected!", v274, v210);
        v60 = (char *)v59;
        sub_100512490("Generic", 1, 0, 2, "CLSmootherErrorCode CLRouteSmoother::smoothPointsInternal(dispatch_queue_t, std::string, std::vector<swan::RouteSmootherEpoch> &, CLMotionActivity::Type)", "%s\n", v59);
LABEL_380:
        if (v60 != buf)
          free(v60);
      }
    }
  }
  else
  {
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_102155B90);
    v61 = qword_1022A00B8;
    if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEBUG, "CLRS,CLRTD,running track detection disabled", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00B0 != -1)
        dispatch_once(&qword_1022A00B0, &stru_102155B90);
      *(_WORD *)v274 = 0;
      LODWORD(v210) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 2, "CLRS,CLRTD,running track detection disabled", v274, v210);
      v60 = (char *)v205;
      sub_100512490("Generic", 1, 0, 2, "CLSmootherErrorCode CLRouteSmoother::smoothPointsInternal(dispatch_queue_t, std::string, std::vector<swan::RouteSmootherEpoch> &, CLMotionActivity::Type)", "%s\n", v205);
      goto LABEL_380;
    }
  }
  sub_100836FF4((uint64_t)v256);
  v279 = xmmword_101BDB820;
  v280 = unk_101BDB830;
  v281 = xmmword_101BDB840;
  *(_OWORD *)buf = xmmword_101BDB7E0;
  *(_OWORD *)&buf[16] = unk_101BDB7F0;
  v278 = unk_101BDB810;
  *(_OWORD *)&buf[32] = xmmword_101BDB800;
  sub_10083BB00((uint64_t)&v254, buf, 7);
  v279 = xmmword_101BDB890;
  v280 = unk_101BDB8A0;
  v281 = xmmword_101BDB8B0;
  *(_OWORD *)buf = xmmword_101BDB850;
  *(_OWORD *)&buf[16] = unk_101BDB860;
  v278 = unk_101BDB880;
  *(_OWORD *)&buf[32] = xmmword_101BDB870;
  sub_10083BB00((uint64_t)&v252, buf, 7);
  v279 = xmmword_101BDB900;
  v280 = unk_101BDB910;
  v281 = xmmword_101BDB920;
  *(_OWORD *)buf = xmmword_101BDB8C0;
  *(_OWORD *)&buf[16] = unk_101BDB8D0;
  v278 = unk_101BDB8F0;
  *(_OWORD *)&buf[32] = xmmword_101BDB8E0;
  sub_10083BB00((uint64_t)&v250, buf, 7);
  v279 = xmmword_101BDB970;
  v280 = unk_101BDB980;
  v281 = xmmword_101BDB990;
  *(_OWORD *)buf = xmmword_101BDB930;
  *(_OWORD *)&buf[16] = unk_101BDB940;
  v278 = unk_101BDB960;
  *(_OWORD *)&buf[32] = xmmword_101BDB950;
  sub_10083BB00((uint64_t)&v248, buf, 7);
  v269[0] = 1;
  *(_QWORD *)buf = v269;
  v62 = sub_10083AF14(v262, v269, (uint64_t)&unk_101B9EB60, (_BYTE **)buf) + 5;
  if (v62 != &v254)
    sub_10083BB7C(v62, v254, &v255);
  v269[0] = 2;
  *(_QWORD *)buf = v269;
  v63 = sub_10083AF14(v262, v269, (uint64_t)&unk_101B9EB60, (_BYTE **)buf) + 5;
  if (v63 != &v252)
    sub_10083BB7C(v63, v252, &v253);
  v269[0] = 3;
  *(_QWORD *)buf = v269;
  v64 = sub_10083AF14(v262, v269, (uint64_t)&unk_101B9EB60, (_BYTE **)buf) + 5;
  if (v64 != &v250)
    sub_10083BB7C(v64, v250, &v251);
  v269[0] = 6;
  *(_QWORD *)buf = v269;
  v65 = sub_10083AF14(v262, v269, (uint64_t)&unk_101B9EB60, (_BYTE **)buf) + 5;
  if (v65 != &v248)
    sub_10083BB7C(v65, v248, &v249);
  *(_OWORD *)buf = xmmword_101BDBAA4;
  *(_OWORD *)&buf[16] = unk_101BDBAB4;
  *(_OWORD *)&buf[32] = xmmword_101BDBAC4;
  *(_QWORD *)&v278 = 0xA00000006;
  sub_10083B858((uint64_t)v246, buf, 7);
  *(_OWORD *)buf = xmmword_101BDB9A0;
  *(_OWORD *)&buf[16] = unk_101BDB9B0;
  *(_OWORD *)&buf[32] = xmmword_101BDB9C0;
  *(_QWORD *)&v278 = 0xA00000006;
  sub_10083B858((uint64_t)v244, buf, 7);
  *(_OWORD *)buf = xmmword_101BDB9A0;
  *(_OWORD *)&buf[16] = unk_101BDB9B0;
  *(_OWORD *)&buf[32] = xmmword_101BDB9C0;
  *(_QWORD *)&v278 = 0xA00000006;
  sub_10083B858((uint64_t)v242, buf, 7);
  *(_OWORD *)buf = xmmword_101BDB9D8;
  *(_OWORD *)&buf[16] = unk_101BDB9E8;
  *(_OWORD *)&buf[32] = xmmword_101BDB9F8;
  *(_QWORD *)&v278 = 0x3200000006;
  sub_10083B858((uint64_t)v240, buf, 7);
  *(_OWORD *)buf = xmmword_101BDBA10;
  *(_OWORD *)&buf[16] = unk_101BDBA20;
  *(_OWORD *)&buf[32] = xmmword_101BDBA30;
  *(_QWORD *)&v278 = 0xA00000006;
  sub_10083B858((uint64_t)v238, buf, 7);
  v66 = sub_10083307C(&v268);
  v237 = v66;
  v67 = &v245;
  v68 = v244;
  switch(v66)
  {
    case 1:
      break;
    case 2:
      v67 = &v243;
      v68 = v242;
      break;
    case 3:
      v67 = &v241;
      v68 = v240;
      break;
    case 6:
      v67 = &v239;
      v68 = v238;
      break;
    default:
      v67 = &v247;
      v68 = v246;
      break;
  }
  sub_10083BDE4(v260, *(_QWORD **)v68, v67);
  v69 = 0;
  v70 = 0;
  v234 = 0;
  v235 = 0;
  v236 = 0;
  v231 = 0;
  v232 = 0;
  v233 = 0;
  v228 = 0;
  v229 = 0;
  v230 = 0;
  v71 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v4 + 8) - *(_QWORD *)v4) >> 4);
  v72 = (int *)__p;
  v225 = 0;
  v226 = 0;
  v73 = (v266 - (_BYTE *)__p) >> 2;
  v227 = 0;
  do
  {
    v74 = v70;
    v75 = v71;
    v70 = v71;
    if (v73 != v69)
    {
      v70 = v72[v69];
      if (v71 >= v70)
        v75 = v72[v69];
      else
        v75 = v71;
    }
    v76 = v235;
    if (v235 >= v236)
    {
      v78 = (char *)v234;
      v79 = (v235 - (_BYTE *)v234) >> 3;
      v80 = v79 + 1;
      if ((unint64_t)(v79 + 1) >> 61)
        goto LABEL_393;
      v81 = v236 - (_BYTE *)v234;
      if ((v236 - (_BYTE *)v234) >> 2 > v80)
        v80 = v81 >> 2;
      if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8)
        v82 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v82 = v80;
      if (v82)
      {
        v83 = (char *)sub_10025E6A0((uint64_t)&v236, v82);
        v78 = (char *)v234;
        v76 = v235;
      }
      else
      {
        v83 = 0;
      }
      v84 = &v83[8 * v79];
      *(_QWORD *)v84 = v74;
      v77 = v84 + 8;
      while (v76 != v78)
      {
        v85 = *((_QWORD *)v76 - 1);
        v76 -= 8;
        *((_QWORD *)v84 - 1) = v85;
        v84 -= 8;
      }
      v234 = v84;
      v235 = v77;
      v236 = &v83[8 * v82];
      if (v78)
        operator delete(v78);
    }
    else
    {
      *(_QWORD *)v235 = v74;
      v77 = v76 + 8;
    }
    v235 = v77;
    v86 = v232;
    if (v232 >= v233)
    {
      v88 = (char *)v231;
      v89 = (v232 - (_BYTE *)v231) >> 3;
      v90 = v89 + 1;
      if ((unint64_t)(v89 + 1) >> 61)
        goto LABEL_393;
      v91 = v233 - (_BYTE *)v231;
      if ((v233 - (_BYTE *)v231) >> 2 > v90)
        v90 = v91 >> 2;
      if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8)
        v92 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v92 = v90;
      if (v92)
      {
        v93 = (char *)sub_10025E6A0((uint64_t)&v233, v92);
        v88 = (char *)v231;
        v86 = v232;
      }
      else
      {
        v93 = 0;
      }
      v94 = &v93[8 * v89];
      *(_QWORD *)v94 = v74;
      v87 = v94 + 8;
      while (v86 != v88)
      {
        v95 = *((_QWORD *)v86 - 1);
        v86 -= 8;
        *((_QWORD *)v94 - 1) = v95;
        v94 -= 8;
      }
      v231 = v94;
      v232 = v87;
      v233 = &v93[8 * v92];
      if (v88)
        operator delete(v88);
    }
    else
    {
      *(_QWORD *)v232 = v74;
      v87 = v86 + 8;
    }
    v232 = v87;
    v96 = v229;
    if (v229 >= v230)
    {
      v98 = (char *)v228;
      v99 = (v229 - (_BYTE *)v228) >> 3;
      v100 = v99 + 1;
      if ((unint64_t)(v99 + 1) >> 61)
        goto LABEL_393;
      v101 = v230 - (_BYTE *)v228;
      if ((v230 - (_BYTE *)v228) >> 2 > v100)
        v100 = v101 >> 2;
      if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFF8)
        v102 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v102 = v100;
      if (v102)
      {
        v103 = (char *)sub_10025E6A0((uint64_t)&v230, v102);
        v98 = (char *)v228;
        v96 = v229;
      }
      else
      {
        v103 = 0;
      }
      v104 = (unint64_t *)&v103[8 * v99];
      *v104 = v75;
      v97 = (char *)(v104 + 1);
      while (v96 != v98)
      {
        v105 = *((_QWORD *)v96 - 1);
        v96 -= 8;
        *--v104 = v105;
      }
      v228 = v104;
      v229 = v97;
      v230 = &v103[8 * v102];
      if (v98)
        operator delete(v98);
    }
    else
    {
      *(_QWORD *)v229 = v75;
      v97 = v96 + 8;
    }
    v229 = v97;
    v106 = v226;
    if (v226 >= v227)
    {
      v108 = (char *)v225;
      v109 = (v226 - (_BYTE *)v225) >> 3;
      v110 = v109 + 1;
      if ((unint64_t)(v109 + 1) >> 61)
LABEL_393:
        sub_100259694();
      v111 = v227 - (_BYTE *)v225;
      if ((v227 - (_BYTE *)v225) >> 2 > v110)
        v110 = v111 >> 2;
      if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFF8)
        v112 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v112 = v110;
      if (v112)
      {
        v113 = (char *)sub_10025E6A0((uint64_t)&v227, v112);
        v108 = (char *)v225;
        v106 = v226;
      }
      else
      {
        v113 = 0;
      }
      v114 = (unint64_t *)&v113[8 * v109];
      *v114 = v70;
      v107 = (char *)(v114 + 1);
      while (v106 != v108)
      {
        v115 = *((_QWORD *)v106 - 1);
        v106 -= 8;
        *--v114 = v115;
      }
      v225 = v114;
      v226 = v107;
      v227 = &v113[8 * v112];
      if (v108)
        operator delete(v108);
    }
    else
    {
      *(_QWORD *)v226 = v70;
      v107 = v106 + 8;
    }
    v226 = v107;
    v72 = (int *)__p;
    v73 = (v266 - (_BYTE *)__p) >> 2;
  }
  while (v73 > v69++);
  v117 = sub_1001FCBB4();
  v222 = 0;
  v223 = 0;
  v224 = 0;
  v219 = 0;
  __dst = 0;
  v221 = 0;
  sub_1008332D4(&v219, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v214 + 8) - *(_QWORD *)v214) >> 4));
  if (v232 != v231)
  {
    v118 = 0;
    v15 = 3;
    v211 = 134349568;
    do
    {
      v216 = 0;
      v217 = 0;
      v218 = 0;
      v119 = *((_QWORD *)v234 + v118);
      if (v119 >= *((_QWORD *)v228 + v118))
      {
LABEL_222:
        sub_1001FCBB4();
        v223 = v222;
        sub_1008332D4(&v222, 0x6DB6DB6DB6DB6DB7 * ((v217 - (_BYTE *)v216) >> 4));
        sub_100836FF4((uint64_t)buf);
        sub_10083ABF0((uint64_t)v285);
        swan::RouteSmoother::Configure(buf, v256);
        v147 = (unsigned __int8 *)v216;
        v146 = v217;
        while (v147 != v146)
        {
          *(_QWORD *)v269 = 0;
          if (v264)
          {
            *(_QWORD *)v274 = &v237;
            v148 = sub_10083AF14(v262, &v237, (uint64_t)&unk_101B9EB60, (_BYTE **)v274);
            *(_QWORD *)v274 = v147 + 104;
            v149 = sub_10083C048(v148 + 5, v147 + 104, (uint64_t)&unk_101B9EB60, (_BYTE **)v274);
            v151 = *((double *)v149 + 5);
            v150 = v149 + 5;
            v152 = (uint64_t **)&unk_101BDBA48;
            if (v151 > 2.0)
              v152 = v150;
          }
          else
          {
            *(_QWORD *)v274 = &v237;
            v153 = sub_10083AF14(v262, &v237, (uint64_t)&unk_101B9EB60, (_BYTE **)v274);
            *(_QWORD *)v274 = v147 + 104;
            v152 = sub_10083C048(v153 + 5, v147 + 104, (uint64_t)&unk_101B9EB60, (_BYTE **)v274) + 5;
          }
          *(_QWORD *)v269 = *v152;
          if (swan::RouteSmoother::Update(buf, v147, v269, &v263, &v222))
          {
            if (qword_1022A00B0 != -1)
              dispatch_once(&qword_1022A00B0, &stru_102155B90);
            v157 = qword_1022A00B8;
            if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)v274 = 0;
              _os_log_impl((void *)&_mh_execute_header, v157, OS_LOG_TYPE_ERROR, "CLRS,smoother is unhealthy", v274, 2u);
            }
            if (sub_1001BFF7C(115, 0))
            {
              bzero(v274, 0x65CuLL);
              if (qword_1022A00B0 != -1)
                dispatch_once(&qword_1022A00B0, &stru_102155B90);
              v215[0] = 0;
              LODWORD(v210) = 2;
              _os_log_send_and_compose_impl(2, 0, v274, 1628, &_mh_execute_header, qword_1022A00B8, 16, "CLRS,smoother is unhealthy", v215, v210);
              v169 = (char *)v170;
              sub_100512490("Generic", 1, 0, 0, "CLSmootherErrorCode CLRouteSmoother::smoothPointsInternal(dispatch_queue_t, std::string, std::vector<swan::RouteSmootherEpoch> &, CLMotionActivity::Type)", "%s\n", v170);
              if (v169 != v274)
                goto LABEL_285;
            }
            goto LABEL_237;
          }
          v147 += 112;
        }
        if (swan::RouteSmoother::Finish(buf, &v222))
        {
          if (qword_1022A00B0 != -1)
            dispatch_once(&qword_1022A00B0, &stru_102155B90);
          v154 = qword_1022A00B8;
          if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)v274 = 0;
            _os_log_impl((void *)&_mh_execute_header, v154, OS_LOG_TYPE_ERROR, "CLRS,smoother is unhealthy,could not finish", v274, 2u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(v274, 0x65CuLL);
            if (qword_1022A00B0 != -1)
              dispatch_once(&qword_1022A00B0, &stru_102155B90);
            *(_WORD *)v269 = 0;
            LODWORD(v210) = 2;
            _os_log_send_and_compose_impl(2, 0, v274, 1628, &_mh_execute_header, qword_1022A00B8, 16, "CLRS,smoother is unhealthy,could not finish", v269, v210);
            v169 = (char *)v168;
            sub_100512490("Generic", 1, 0, 0, "CLSmootherErrorCode CLRouteSmoother::smoothPointsInternal(dispatch_queue_t, std::string, std::vector<swan::RouteSmootherEpoch> &, CLMotionActivity::Type)", "%s\n", v168);
            if (v169 != v274)
LABEL_285:
              free(v169);
          }
LABEL_237:
          sub_101740774(v213, (uint64_t)"routesmoother", (uint64_t)"smoother_failure", 0);
LABEL_266:
          v156 = 1;
          v15 = 3;
          goto LABEL_267;
        }
        v158 = *((_QWORD *)v234 + v118);
        v159 = *((_QWORD *)v231 + v118) - v158;
        v160 = *((_QWORD *)v225 + v118) - v158;
        v161 = 0x6DB6DB6DB6DB6DB7 * ((v223 - (_BYTE *)v222) >> 4);
        if (v159 >= v161 || v160 > v161)
        {
          if (qword_1022A00B0 != -1)
            dispatch_once(&qword_1022A00B0, &stru_102155B90);
          v164 = qword_1022A00B8;
          if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v274 = 134218496;
            *(_QWORD *)&v274[4] = v159;
            *(_WORD *)&v274[12] = 2048;
            *(_QWORD *)&v274[14] = v160;
            *(_WORD *)&v274[22] = 2048;
            *(_QWORD *)&v274[24] = 0x6DB6DB6DB6DB6DB7 * ((v223 - (_BYTE *)v222) >> 4);
            _os_log_impl((void *)&_mh_execute_header, v164, OS_LOG_TYPE_ERROR, "CLRS,Indexing error,startToOutput,%zu,endToOutput,%zu,smoothedSegment,%zu", v274, 0x20u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(v274, 0x65CuLL);
            if (qword_1022A00B0 != -1)
              dispatch_once(&qword_1022A00B0, &stru_102155B90);
            *(_DWORD *)v269 = 134218496;
            *(_QWORD *)&v269[4] = v159;
            v270 = 2048;
            v271 = v160;
            v272 = 2048;
            v273 = 0x6DB6DB6DB6DB6DB7 * ((v223 - (_BYTE *)v222) >> 4);
            LODWORD(v210) = 32;
            _os_log_send_and_compose_impl(2, 0, v274, 1628, &_mh_execute_header, qword_1022A00B8, 16, "CLRS,Indexing error,startToOutput,%zu,endToOutput,%zu,smoothedSegment,%zu", (size_t)v269, v210, v211);
            v172 = (char *)v171;
            sub_100512490("Generic", 1, 0, 0, "CLSmootherErrorCode CLRouteSmoother::smoothPointsInternal(dispatch_queue_t, std::string, std::vector<swan::RouteSmootherEpoch> &, CLMotionActivity::Type)", "%s\n", v171);
            if (v172 != v274)
              free(v172);
          }
          sub_101740774(v213, (uint64_t)"routesmoother", (uint64_t)"segment_indexing_error", 0);
          goto LABEL_266;
        }
        sub_10083B1E8((uint64_t)&v219, (uint64_t)__dst, (char *)v222 + 112 * v159, (char *)v222 + 112 * v160, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(112 * (v160 - v159)) >> 4));
        v162 = 0.0;
        if (v10 >= 0.0)
          v162 = vabdd_f64(sub_1001FCBB4(), v10) * 1000.0;
        if (qword_1022A00B0 != -1)
          dispatch_once(&qword_1022A00B0, &stru_102155B90);
        v163 = qword_1022A00B8;
        if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)v274 = v211;
          *(_QWORD *)&v274[4] = v118 + 1;
          *(_WORD *)&v274[12] = 2050;
          *(_QWORD *)&v274[14] = 0x6DB6DB6DB6DB6DB7 * ((v217 - (_BYTE *)v216) >> 4);
          *(_WORD *)&v274[22] = 2050;
          *(double *)&v274[24] = v162;
          _os_log_impl((void *)&_mh_execute_header, v163, OS_LOG_TYPE_DEBUG, "CLRS,smoothed segment,#%{public}zu,dataCount,%{public}zu,elapsedTime,%{public}.0lf,msec", v274, 0x20u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(v274, 0x65CuLL);
          if (qword_1022A00B0 != -1)
            dispatch_once(&qword_1022A00B0, &stru_102155B90);
          *(_DWORD *)v269 = v211;
          *(_QWORD *)&v269[4] = v118 + 1;
          v270 = 2050;
          v271 = 0x6DB6DB6DB6DB6DB7 * ((v217 - (_BYTE *)v216) >> 4);
          v272 = 2050;
          v273 = *(_QWORD *)&v162;
          LODWORD(v210) = 32;
          _os_log_send_and_compose_impl(2, 0, v274, 1628, &_mh_execute_header, qword_1022A00B8, 2, "CLRS,smoothed segment,#%{public}zu,dataCount,%{public}zu,elapsedTime,%{public}.0lf,msec", v269, v210);
          v174 = (char *)v173;
          sub_100512490("Generic", 1, 0, 2, "CLSmootherErrorCode CLRouteSmoother::smoothPointsInternal(dispatch_queue_t, std::string, std::vector<swan::RouteSmootherEpoch> &, CLMotionActivity::Type)", "%s\n", v173);
          if (v174 != v274)
            free(v174);
        }
        v156 = 0;
LABEL_267:
        v165 = 0;
        v285[14159] = off_102155D60;
        v285[14118] = off_102155D60;
        v285[14077] = off_102155D60;
        do
        {
          v285[v165 + 14031] = off_102155D60;
          v285[v165 + 13990] = off_102155D60;
          v285[v165 + 13979] = off_102155D60;
          v285[v165 + 13938] = off_102155D60;
          v165 -= 138;
        }
        while (v165 != -14076);
        *(_QWORD *)buf = off_102155BC0;
        sub_10007CDDC((uint64_t)v284, v284[1]);
        sub_100008848((uint64_t)v283, v283[1]);
        sub_100008848((uint64_t)v282, v282[1]);
        if (SHIBYTE(v278) < 0)
          operator delete(*(void **)&buf[40]);
        *(_QWORD *)buf = off_102155C20;
        if ((buf[31] & 0x80000000) != 0)
          operator delete(*(void **)&buf[8]);
      }
      else
      {
        v120 = *(_QWORD *)v214 + 112 * v119;
        while (!sub_10011CE64(*(double *)(v120 + 8), *(double *)(v120 + 16)) && *(double *)(v120 + 24) > 0.0)
        {
          v121 = v217;
          if (v217 >= (unsigned __int8 *)v218)
          {
            v128 = (unsigned __int8 *)v216;
            v129 = 0x6DB6DB6DB6DB6DB7 * ((v217 - (_BYTE *)v216) >> 4);
            v130 = v129 + 1;
            if ((unint64_t)(v129 + 1) > 0x249249249249249)
              sub_100259694();
            if (0xDB6DB6DB6DB6DB6ELL * ((v218 - (_BYTE *)v216) >> 4) > v130)
              v130 = 0xDB6DB6DB6DB6DB6ELL * ((v218 - (_BYTE *)v216) >> 4);
            if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v218 - (_BYTE *)v216) >> 4)) >= 0x124924924924924)
              v131 = 0x249249249249249;
            else
              v131 = v130;
            if (v131)
            {
              v132 = (char *)sub_1002A7588((uint64_t)&v218, v131);
              v128 = (unsigned __int8 *)v216;
              v121 = v217;
            }
            else
            {
              v132 = 0;
            }
            v133 = &v132[112 * v129];
            v134 = *(_OWORD *)v120;
            v135 = *(_OWORD *)(v120 + 32);
            *((_OWORD *)v133 + 1) = *(_OWORD *)(v120 + 16);
            *((_OWORD *)v133 + 2) = v135;
            *(_OWORD *)v133 = v134;
            v136 = *(_OWORD *)(v120 + 48);
            v137 = *(_OWORD *)(v120 + 64);
            v138 = *(_OWORD *)(v120 + 96);
            *((_OWORD *)v133 + 5) = *(_OWORD *)(v120 + 80);
            *((_OWORD *)v133 + 6) = v138;
            *((_OWORD *)v133 + 3) = v136;
            *((_OWORD *)v133 + 4) = v137;
            if (v121 == v128)
            {
              v145 = &v132[112 * v129];
            }
            else
            {
              v139 = &v132[112 * v129];
              do
              {
                v140 = *((_OWORD *)v121 - 7);
                v141 = *((_OWORD *)v121 - 5);
                *((_OWORD *)v139 - 6) = *((_OWORD *)v121 - 6);
                *((_OWORD *)v139 - 5) = v141;
                *((_OWORD *)v139 - 7) = v140;
                v142 = *((_OWORD *)v121 - 4);
                v143 = *((_OWORD *)v121 - 3);
                v144 = *((_OWORD *)v121 - 2);
                v145 = v139 - 112;
                *(_OWORD *)(v139 - 23) = *(_OWORD *)(v121 - 23);
                *((_OWORD *)v139 - 3) = v143;
                *((_OWORD *)v139 - 2) = v144;
                *((_OWORD *)v139 - 4) = v142;
                v121 -= 112;
                v139 -= 112;
              }
              while (v121 != v128);
            }
            v127 = (unsigned __int8 *)(v133 + 112);
            v216 = v145;
            v217 = (unsigned __int8 *)(v133 + 112);
            v218 = &v132[112 * v131];
            if (v128)
              operator delete(v128);
          }
          else
          {
            v122 = *(_OWORD *)v120;
            v123 = *(_OWORD *)(v120 + 32);
            *((_OWORD *)v217 + 1) = *(_OWORD *)(v120 + 16);
            *((_OWORD *)v121 + 2) = v123;
            *(_OWORD *)v121 = v122;
            v124 = *(_OWORD *)(v120 + 48);
            v125 = *(_OWORD *)(v120 + 64);
            v126 = *(_OWORD *)(v120 + 96);
            *((_OWORD *)v121 + 5) = *(_OWORD *)(v120 + 80);
            *((_OWORD *)v121 + 6) = v126;
            *((_OWORD *)v121 + 3) = v124;
            *((_OWORD *)v121 + 4) = v125;
            v127 = v121 + 112;
          }
          v217 = v127;
          v120 += 112;
          if (v120 >= *(_QWORD *)v214 + 112 * *((_QWORD *)v228 + v118))
            goto LABEL_222;
        }
        if (qword_1022A00B0 != -1)
          dispatch_once(&qword_1022A00B0, &stru_102155B90);
        v155 = qword_1022A00B8;
        if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v155, OS_LOG_TYPE_ERROR, "CLRS,input data contains Null Island or non-positive horizontal uncertainty. Will not attempt to smooth.", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00B0 != -1)
            dispatch_once(&qword_1022A00B0, &stru_102155B90);
          *(_WORD *)v274 = 0;
          LODWORD(v210) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 16, "CLRS,input data contains Null Island or non-positive horizontal uncertainty. Will not attempt to smooth.", v274, v210);
          v167 = (char *)v166;
          sub_100512490("Generic", 1, 0, 0, "CLSmootherErrorCode CLRouteSmoother::smoothPointsInternal(dispatch_queue_t, std::string, std::vector<swan::RouteSmootherEpoch> &, CLMotionActivity::Type)", "%s\n", v166);
          if (v167 != buf)
            free(v167);
        }
        sub_101740774(v213, (uint64_t)"routesmoother", (uint64_t)"input_data_corrupted", 0);
        v156 = 1;
        v15 = 1;
      }
      if (v216)
      {
        v217 = (unsigned __int8 *)v216;
        operator delete(v216);
      }
      if (v156)
        goto LABEL_317;
      ++v118;
    }
    while (v118 < (v232 - (_BYTE *)v231) >> 3);
  }
  v175 = 0.0;
  v176 = v212;
  if (v117 >= 0.0)
    v175 = vabdd_f64(sub_1001FCBB4(), v117) * 1000.0;
  if (qword_1022A00B0 != -1)
    dispatch_once(&qword_1022A00B0, &stru_102155B90);
  v177 = qword_1022A00B8;
  if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134349312;
    *(_QWORD *)&buf[4] = (v232 - (_BYTE *)v231) >> 3;
    *(_WORD *)&buf[12] = 2050;
    *(double *)&buf[14] = v175;
    _os_log_impl((void *)&_mh_execute_header, v177, OS_LOG_TYPE_DEBUG, "CLRS,smoothing all segments completed,segmentCount,%{public}zu,elapsedTime,%{public}.0lf,msec", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_102155B90);
    *(_DWORD *)v274 = 134349312;
    *(_QWORD *)&v274[4] = (v232 - (_BYTE *)v231) >> 3;
    *(_WORD *)&v274[12] = 2050;
    *(double *)&v274[14] = v175;
    LODWORD(v210) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 2, "CLRS,smoothing all segments completed,segmentCount,%{public}zu,elapsedTime,%{public}.0lf,msec", v274, v210);
    v192 = (char *)v191;
    sub_100512490("Generic", 1, 0, 2, "CLSmootherErrorCode CLRouteSmoother::smoothPointsInternal(dispatch_queue_t, std::string, std::vector<swan::RouteSmootherEpoch> &, CLMotionActivity::Type)", "%s\n", v191);
    if (v192 != buf)
      free(v192);
  }
  v178 = 0.0;
  if (v10 >= 0.0)
    v178 = vabdd_f64(sub_1001FCBB4(), v10) * 1000.0;
  if (qword_1022A00B0 != -1)
    dispatch_once(&qword_1022A00B0, &stru_102155B90);
  v179 = qword_1022A00B8;
  if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEFAULT))
  {
    v180 = v212;
    if (*(char *)(v212 + 23) < 0)
      v180 = *(_QWORD *)v212;
    v181 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v214 + 8) - *(_QWORD *)v214) >> 4);
    *(_DWORD *)buf = 136446978;
    *(_QWORD *)&buf[4] = v180;
    *(_WORD *)&buf[12] = 2050;
    *(_QWORD *)&buf[14] = v181;
    *(_WORD *)&buf[22] = 2050;
    *(double *)&buf[24] = v178;
    *(_WORD *)&buf[32] = 1026;
    *(_DWORD *)&buf[34] = v268;
    _os_log_impl((void *)&_mh_execute_header, v179, OS_LOG_TYPE_DEFAULT, "CLRS,Smoother,type,%{public}s,dataCount,%{public}zu,elapsedTime,%{public}.0lf,msec,workout,%{public}u", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_102155B90);
    if (*(char *)(v212 + 23) < 0)
      v176 = *(_QWORD *)v212;
    v193 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v214 + 8) - *(_QWORD *)v214) >> 4);
    *(_DWORD *)v274 = 136446978;
    *(_QWORD *)&v274[4] = v176;
    *(_WORD *)&v274[12] = 2050;
    *(_QWORD *)&v274[14] = v193;
    *(_WORD *)&v274[22] = 2050;
    *(double *)&v274[24] = v178;
    *(_WORD *)&v274[32] = 1026;
    *(_DWORD *)&v274[34] = v268;
    LODWORD(v210) = 38;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 0, "CLRS,Smoother,type,%{public}s,dataCount,%{public}zu,elapsedTime,%{public}.0lf,msec,workout,%{public}u", v274, v210);
    v195 = (char *)v194;
    sub_100512490("Generic", 1, 0, 2, "CLSmootherErrorCode CLRouteSmoother::smoothPointsInternal(dispatch_queue_t, std::string, std::vector<swan::RouteSmootherEpoch> &, CLMotionActivity::Type)", "%s\n", v194);
    if (v195 != buf)
      free(v195);
  }
  if (&v219 != (void **)v214)
    sub_10083C108((char *)v214, (char *)v219, (uint64_t)__dst, 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)__dst - (_BYTE *)v219) >> 4));
  v15 = 0;
LABEL_317:
  if (v219)
  {
    __dst = v219;
    operator delete(v219);
  }
  if (v222)
  {
    v223 = v222;
    operator delete(v222);
  }
  if (v225)
  {
    v226 = (char *)v225;
    operator delete(v225);
  }
  if (v228)
  {
    v229 = (char *)v228;
    operator delete(v228);
  }
  if (v231)
  {
    v232 = (char *)v231;
    operator delete(v231);
  }
  if (v234)
  {
    v235 = (char *)v234;
    operator delete(v234);
  }
  sub_100008848((uint64_t)v238, v239);
  sub_100008848((uint64_t)v240, v241);
  sub_100008848((uint64_t)v242, v243);
  sub_100008848((uint64_t)v244, v245);
  sub_100008848((uint64_t)v246, v247);
  sub_100008848((uint64_t)&v248, v249);
  sub_100008848((uint64_t)&v250, v251);
  sub_100008848((uint64_t)&v252, v253);
  sub_100008848((uint64_t)&v254, v255);
  v256[0] = off_102155BC0;
  sub_10007CDDC((uint64_t)v262, v262[1]);
  sub_100008848((uint64_t)v261, v261[1]);
  sub_100008848((uint64_t)v260, v260[1]);
  if (v259 < 0)
    operator delete(v258);
  v256[0] = off_102155C20;
  if (v257 < 0)
    operator delete((void *)v256[1]);
  if (__p)
  {
    v266 = (char *)__p;
    operator delete(__p);
  }
  return v15;
}

void sub_100832548(_Unwind_Exception *a1)
{
  void *v2;

  v2 = (void *)STACK[0x3B0];
  if (STACK[0x3B0])
  {
    STACK[0x3B8] = (unint64_t)v2;
    operator delete(v2);
  }
  _Unwind_Resume(a1);
}

NSDictionary *sub_100832804(uint64_t a1)
{
  uint64_t v2;
  id v3;
  id *v4;
  id v5;
  _QWORD v7[11];
  _QWORD v8[11];

  v7[0] = CFSTR("workoutActivity");
  v8[0] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 72));
  v7[1] = CFSTR("workoutDurationSeconds");
  v8[1] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 32));
  v7[2] = CFSTR("outputDataCount");
  v8[2] = +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) - **(_QWORD **)(a1 + 40)) >> 4));
  v7[3] = CFSTR("processingTimeMsec");
  v8[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)*(double *)(a1 + 48));
  v7[4] = CFSTR("numEpochs");
  v8[4] = +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) - **(_QWORD **)(a1 + 40)) >> 4));
  v7[5] = CFSTR("smootherErrorCode");
  v8[5] = +[NSNumber numberWithLong:](NSNumber, "numberWithLong:", *(_QWORD *)(a1 + 56));
  v7[6] = CFSTR("shouldReconstructRoute");
  v8[6] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 76));
  v7[7] = CFSTR("networkAccessAllowed");
  v8[7] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 77));
  v7[8] = CFSTR("numReconstructionIntervals");
  v8[8] = +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) - **(_QWORD **)(a1 + 64)) >> 4);
  v7[9] = CFSTR("numBackgroundIOSamplesForFirstReconstructionInterval");
  v2 = **(_QWORD **)(a1 + 64);
  if ((unint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) - v2) < 0x11)
    v3 = 0;
  else
    v3 = objc_msgSend(*(id *)(v2 + 8), "count");
  v8[9] = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v3);
  v7[10] = CFSTR("numLocationSamplesForFirstReconstructionInterval");
  v4 = **(id ***)(a1 + 64);
  if (*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) - (_QWORD)v4 < 0x11uLL)
    v5 = 0;
  else
    v5 = objc_msgSend(*v4, "count");
  v8[10] = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v5);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v8, v7, 11);
}

void sub_100832A3C(uint64_t **a1, void **a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  NSObject *v15;
  int v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  const char *v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int16 v41[8];
  uint8_t buf[1632];

  a2[1] = *a2;
  sub_1008356E4(a2, 0x6DB6DB6DB6DB6DB7 * (((char *)a1[1] - (char *)*a1) >> 4));
  v4 = *a1;
  v5 = a1[1];
  if (*a1 != v5)
  {
    do
    {
      v6 = v4[1];
      v8 = v4[2];
      v7 = v4[3];
      v10 = v4[8];
      v9 = v4[9];
      v11 = v4[6];
      v39 = v4[7];
      v40 = *v4;
      v13 = v4[4];
      v12 = v4[5];
      v14 = *((char *)v4 + 104);
      if (v14 < 7 && ((0x5Fu >> v14) & 1) != 0)
      {
        v16 = dword_101BDBD94[v14];
      }
      else
      {
        if (qword_1022A00B0 != -1)
          dispatch_once(&qword_1022A00B0, &stru_102155B90);
        v15 = qword_1022A00B8;
        if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "CLRS,Unhandled signal environment type", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00B0 != -1)
            dispatch_once(&qword_1022A00B0, &stru_102155B90);
          v41[0] = 0;
          LODWORD(v38) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 16, "CLRS,Unhandled signal environment type", v41, v38);
          v37 = (uint8_t *)v36;
          sub_100512490("Generic", 1, 0, 0, "CLClientSignalEnvironmentType convertSignalEnvironmentToCLClientSignalEnvironmentType(const swan::SignalEnvironment)", "%s\n", v36);
          if (v37 != buf)
            free(v37);
        }
        v16 = 0;
      }
      v17 = (char *)a2[1];
      v18 = (char *)a2[2];
      if (v17 >= v18)
      {
        v20 = 0x6F96F96F96F96F97 * ((v17 - (_BYTE *)*a2) >> 2);
        v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) > 0x1A41A41A41A41A4)
          sub_100259694();
        v22 = 0x6F96F96F96F96F97 * ((v18 - (_BYTE *)*a2) >> 2);
        if (2 * v22 > v21)
          v21 = 2 * v22;
        if (v22 >= 0xD20D20D20D20D2)
          v23 = 0x1A41A41A41A41A4;
        else
          v23 = v21;
        if (v23)
          v24 = (char *)sub_10055B5BC((uint64_t)(a2 + 2), v23);
        else
          v24 = 0;
        v25 = &v24[156 * v20];
        *(_QWORD *)(v25 + 4) = v6;
        *(_QWORD *)(v25 + 12) = v8;
        *(_QWORD *)(v25 + 20) = v7;
        *(_QWORD *)(v25 + 28) = v13;
        *(_QWORD *)(v25 + 36) = v12;
        *(_QWORD *)(v25 + 44) = v10;
        *(_QWORD *)(v25 + 52) = v9;
        *(_QWORD *)(v25 + 60) = v11;
        *(_QWORD *)(v25 + 68) = v39;
        *(_QWORD *)(v25 + 76) = v40;
        *((_DWORD *)v25 + 35) = v16;
        v27 = (char *)*a2;
        v26 = (char *)a2[1];
        v28 = v25;
        if (v26 != *a2)
        {
          do
          {
            v29 = *(_OWORD *)(v26 - 156);
            *(_OWORD *)(v28 - 140) = *(_OWORD *)(v26 - 140);
            *(_OWORD *)(v28 - 156) = v29;
            v30 = *(_OWORD *)(v26 - 124);
            v31 = *(_OWORD *)(v26 - 108);
            v32 = *(_OWORD *)(v26 - 92);
            *(_OWORD *)(v28 - 76) = *(_OWORD *)(v26 - 76);
            *(_OWORD *)(v28 - 92) = v32;
            *(_OWORD *)(v28 - 108) = v31;
            *(_OWORD *)(v28 - 124) = v30;
            v33 = *(_OWORD *)(v26 - 60);
            v34 = *(_OWORD *)(v26 - 44);
            v35 = *(_OWORD *)(v26 - 28);
            *((_OWORD *)v28 - 1) = *((_OWORD *)v26 - 1);
            *(_OWORD *)(v28 - 28) = v35;
            *(_OWORD *)(v28 - 44) = v34;
            *(_OWORD *)(v28 - 60) = v33;
            v28 -= 156;
            v26 -= 156;
          }
          while (v26 != v27);
          v26 = (char *)*a2;
        }
        v19 = v25 + 156;
        *a2 = v28;
        a2[1] = v25 + 156;
        a2[2] = &v24[156 * v23];
        if (v26)
          operator delete(v26);
      }
      else
      {
        *(_QWORD *)(v17 + 4) = v6;
        *(_QWORD *)(v17 + 12) = v8;
        *(_QWORD *)(v17 + 20) = v7;
        *(_QWORD *)(v17 + 28) = v13;
        *(_QWORD *)(v17 + 36) = v12;
        *(_QWORD *)(v17 + 44) = v10;
        *(_QWORD *)(v17 + 52) = v9;
        *(_QWORD *)(v17 + 60) = v11;
        *(_QWORD *)(v17 + 68) = v39;
        *(_QWORD *)(v17 + 76) = v40;
        v19 = v17 + 156;
        *((_DWORD *)v17 + 35) = v16;
      }
      a2[1] = v19;
      v4 += 14;
    }
    while (v4 != v5);
  }
}

NSDictionary *sub_100832E44(uint64_t a1)
{
  uint64_t v2;
  id v3;
  id *v4;
  id v5;
  _QWORD v7[11];
  _QWORD v8[11];

  v7[0] = CFSTR("workoutActivity");
  v8[0] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 72));
  v7[1] = CFSTR("workoutDurationSeconds");
  v8[1] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 32));
  v7[2] = CFSTR("outputDataCount");
  v8[2] = +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) - **(_QWORD **)(a1 + 40)) >> 4));
  v7[3] = CFSTR("processingTimeMsec");
  v8[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)*(double *)(a1 + 48));
  v7[4] = CFSTR("numEpochs");
  v8[4] = +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) - **(_QWORD **)(a1 + 40)) >> 4));
  v7[5] = CFSTR("smootherErrorCode");
  v8[5] = +[NSNumber numberWithLong:](NSNumber, "numberWithLong:", *(_QWORD *)(a1 + 56));
  v7[6] = CFSTR("shouldReconstructRoute");
  v8[6] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 76));
  v7[7] = CFSTR("networkAccessAllowed");
  v8[7] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 77));
  v7[8] = CFSTR("numReconstructionIntervals");
  v8[8] = +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) - **(_QWORD **)(a1 + 64)) >> 4);
  v7[9] = CFSTR("numBackgroundIOSamplesForFirstReconstructionInterval");
  v2 = **(_QWORD **)(a1 + 64);
  if ((unint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) - v2) < 0x11)
    v3 = 0;
  else
    v3 = objc_msgSend(*(id *)(v2 + 8), "count");
  v8[9] = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v3);
  v7[10] = CFSTR("numLocationSamplesForFirstReconstructionInterval");
  v4 = **(id ***)(a1 + 64);
  if (*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) - (_QWORD)v4 < 0x11uLL)
    v5 = 0;
  else
    v5 = objc_msgSend(*v4, "count");
  v8[10] = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v5);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v8, v7, 11);
}

uint64_t sub_10083307C(int *a1)
{
  int v2;
  int v3;
  uint64_t result;
  NSObject *v5;
  int v6;
  _BOOL4 v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  _DWORD v11[4];
  uint8_t buf[4];
  int v13;

  v2 = *a1;
  if (*a1 <= 18239)
  {
    switch(v2)
    {
      case 4:
        return 1;
      case 6:
        return 3;
      case 8:
        return 2;
    }
  }
  else
  {
    if (v2 > 90602)
    {
      if (v2 == 90603)
        return 7;
      v3 = 519150;
    }
    else
    {
      if (v2 == 18240)
        return 4;
      v3 = 19150;
    }
    if (v2 == v3)
      return 6;
  }
  if (qword_1022A00B0 != -1)
    dispatch_once(&qword_1022A00B0, &stru_102155B90);
  v5 = qword_1022A00B8;
  if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_ERROR))
  {
    v6 = *a1;
    *(_DWORD *)buf = 67240192;
    v13 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "CLRS,Unhandled CLMotionActivity workout type,%{public}d", buf, 8u);
  }
  v7 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v7)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_102155B90);
    v8 = *a1;
    v11[0] = 67240192;
    v11[1] = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 16, "CLRS,Unhandled CLMotionActivity workout type,%{public}d", v11, 8);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 0, "swan::WorkoutType convertCLMotionActivityToWorkoutType(const CLMotionActivity::Type &)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
    return 0;
  }
  return result;
}

void sub_1008332D4(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - (_BYTE *)*a1) >> 4) < a2)
  {
    if (a2 >= 0x24924924924924ALL)
      sub_100259694();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_1002A7588(v3, a2);
    v7 = &v6[v5];
    v9 = &v6[112 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_OWORD *)v10 - 7);
        v14 = *((_OWORD *)v10 - 5);
        *((_OWORD *)v12 - 6) = *((_OWORD *)v10 - 6);
        *((_OWORD *)v12 - 5) = v14;
        *((_OWORD *)v12 - 7) = v13;
        v15 = *((_OWORD *)v10 - 4);
        v16 = *((_OWORD *)v10 - 3);
        v17 = *((_OWORD *)v10 - 2);
        *(_OWORD *)(v12 - 23) = *(_OWORD *)(v10 - 23);
        *((_OWORD *)v12 - 3) = v16;
        *((_OWORD *)v12 - 2) = v17;
        *((_OWORD *)v12 - 4) = v15;
        v12 -= 112;
        v10 -= 112;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t sub_1008333BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 0;
  *(_QWORD *)(a1 + 113576) = off_102155D60;
  *(_QWORD *)(a1 + 113248) = off_102155D60;
  *(_QWORD *)(a1 + 112920) = off_102155D60;
  v3 = a1 + 112608;
  do
  {
    *(_QWORD *)(v3 + v2 - 56) = off_102155D60;
    *(_QWORD *)(v3 + v2 - 384) = off_102155D60;
    *(_QWORD *)(v3 + v2 - 472) = off_102155D60;
    *(_QWORD *)(v3 + v2 - 800) = off_102155D60;
    v2 -= 1104;
  }
  while (v2 != -112608);
  *(_QWORD *)a1 = off_102155BC0;
  sub_10007CDDC(a1 + 200, *(_QWORD **)(a1 + 208));
  sub_100008848(a1 + 176, *(_QWORD **)(a1 + 184));
  sub_100008848(a1 + 152, *(_QWORD **)(a1 + 160));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  *(_QWORD *)a1 = off_102155C20;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_1008334B0(uint64_t a1)
{
  *(_QWORD *)a1 = off_102155BC0;
  sub_10007CDDC(a1 + 200, *(_QWORD **)(a1 + 208));
  sub_100008848(a1 + 176, *(_QWORD **)(a1 + 184));
  sub_100008848(a1 + 152, *(_QWORD **)(a1 + 160));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  *(_QWORD *)a1 = off_102155C20;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

id sub_100833530(void *a1, char **a2)
{
  id result;
  id v5;
  uint64_t v6;
  void *v12;
  void *v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  _BYTE v61[128];

  a2[1] = *a2;
  v57 = 0u;
  v58 = 0u;
  v59 = 0u;
  v60 = 0u;
  result = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v57, v61, 16);
  v5 = result;
  if (result)
  {
    v6 = *(_QWORD *)v58;
    __asm { FMOV            V0.2D, #-1.0 }
    v53 = _Q0;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v58 != v6)
          objc_enumerationMutation(a1);
        v13 = *(void **)(*((_QWORD *)&v57 + 1) + 8 * (_QWORD)v12);
        if (objc_msgSend(v13, "type") == 1
          || objc_msgSend(v13, "type") == 9
          || objc_msgSend(v13, "type") == 3
          || objc_msgSend(v13, "type") == 11)
        {
          objc_msgSend(v13, "horizontalAccuracy");
          if (v14 <= 50.0)
          {
            objc_msgSend(objc_msgSend(v13, "timestamp"), "timeIntervalSinceReferenceDate");
            v55 = v15;
            objc_msgSend(v13, "coordinate");
            v54 = v16;
            objc_msgSend(v13, "coordinate");
            v18 = v17;
            objc_msgSend(v13, "altitude");
            v20 = v19;
            objc_msgSend(v13, "speed");
            v22 = v21;
            objc_msgSend(v13, "course");
            v24 = v23;
            objc_msgSend(v13, "courseAccuracy");
            v26 = v25;
            objc_msgSend(v13, "verticalAccuracy");
            v27 = 0x40B3880000000000;
            if (v28 > 0.0)
            {
              objc_msgSend(v13, "verticalAccuracy");
              v27 = v29;
            }
            objc_msgSend(v13, "horizontalAccuracy");
            v31 = v30;
            objc_msgSend(v13, "speedAccuracy");
            v33 = v32;
            v56 = objc_msgSend(v13, "signalEnvironmentType");
            v34 = sub_100834138((int *)&v56);
            v35 = v34;
            v36 = (unint64_t)a2[1];
            v37 = (unint64_t)a2[2];
            if (v36 >= v37)
            {
              v39 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v36 - (_QWORD)*a2) >> 4);
              v40 = v39 + 1;
              if ((unint64_t)(v39 + 1) > 0x249249249249249)
                sub_100259694();
              v41 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v37 - (_QWORD)*a2) >> 4);
              if (2 * v41 > v40)
                v40 = 2 * v41;
              if (v41 >= 0x124924924924924)
                v42 = 0x249249249249249;
              else
                v42 = v40;
              if (v42)
                v43 = (char *)sub_1002A7588((uint64_t)(a2 + 2), v42);
              else
                v43 = 0;
              v44 = &v43[112 * v39];
              *(_QWORD *)v44 = v55;
              *((_QWORD *)v44 + 1) = v54;
              *((_QWORD *)v44 + 2) = v18;
              *((_QWORD *)v44 + 3) = v31;
              *((_QWORD *)v44 + 4) = v20;
              *((_QWORD *)v44 + 5) = v27;
              *((_QWORD *)v44 + 6) = v24;
              *((_QWORD *)v44 + 7) = v26;
              *((_QWORD *)v44 + 8) = v22;
              *((_QWORD *)v44 + 9) = v33;
              *((_OWORD *)v44 + 5) = v53;
              *((_QWORD *)v44 + 12) = 0xBFF0000000000000;
              v44[104] = v35;
              v46 = *a2;
              v45 = a2[1];
              v47 = v44;
              if (v45 != *a2)
              {
                do
                {
                  v48 = *((_OWORD *)v45 - 7);
                  v49 = *((_OWORD *)v45 - 5);
                  *((_OWORD *)v47 - 6) = *((_OWORD *)v45 - 6);
                  *((_OWORD *)v47 - 5) = v49;
                  *((_OWORD *)v47 - 7) = v48;
                  v50 = *((_OWORD *)v45 - 4);
                  v51 = *((_OWORD *)v45 - 3);
                  v52 = *((_OWORD *)v45 - 2);
                  *(_OWORD *)(v47 - 23) = *(_OWORD *)(v45 - 23);
                  *((_OWORD *)v47 - 3) = v51;
                  *((_OWORD *)v47 - 2) = v52;
                  *((_OWORD *)v47 - 4) = v50;
                  v47 -= 112;
                  v45 -= 112;
                }
                while (v45 != v46);
                v45 = *a2;
              }
              v38 = v44 + 112;
              *a2 = v47;
              a2[1] = v44 + 112;
              a2[2] = &v43[112 * v42];
              if (v45)
                operator delete(v45);
            }
            else
            {
              *(_QWORD *)v36 = v55;
              *(_QWORD *)(v36 + 8) = v54;
              *(_QWORD *)(v36 + 16) = v18;
              *(_QWORD *)(v36 + 24) = v31;
              *(_QWORD *)(v36 + 32) = v20;
              *(_QWORD *)(v36 + 40) = v27;
              *(_QWORD *)(v36 + 48) = v24;
              *(_QWORD *)(v36 + 56) = v26;
              *(_QWORD *)(v36 + 64) = v22;
              *(_QWORD *)(v36 + 72) = v33;
              *(_OWORD *)(v36 + 80) = v53;
              *(_QWORD *)(v36 + 96) = 0xBFF0000000000000;
              v38 = (char *)(v36 + 112);
              *(_BYTE *)(v36 + 104) = v34;
            }
            a2[1] = v38;
          }
        }
        v12 = (char *)v12 + 1;
      }
      while (v12 != v5);
      result = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v57, v61, 16);
      v5 = result;
    }
    while (result);
  }
  return result;
}

void sub_1008338DC(uint64_t a1, void *a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  NSObject *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  void *i;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  void **v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  const char *v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  uint8_t *v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  _BYTE v85[128];
  int v86;
  id v87;
  __int16 v88;
  uint64_t v89;
  __int16 v90;
  uint64_t v91;
  __int16 v92;
  uint64_t v93;
  __int16 v94;
  uint64_t v95;
  __int16 v96;
  unsigned int v97;
  __int16 v98;
  unsigned int v99;
  uint8_t buf[4];
  id v101;
  __int16 v102;
  uint64_t v103;
  __int16 v104;
  uint64_t v105;
  __int16 v106;
  uint64_t v107;
  __int16 v108;
  uint64_t v109;
  __int16 v110;
  unsigned int v111;
  __int16 v112;
  unsigned int v113;

  if (a2 && objc_msgSend(objc_msgSend(a2, "tripLocations"), "count"))
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    {
      if (qword_1022A00B0 != -1)
        dispatch_once(&qword_1022A00B0, &stru_102155B90);
      v4 = qword_1022A00B8;
      if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "CLRS,output received after timeout", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00B0 != -1)
          dispatch_once(&qword_1022A00B0, &stru_102155B90);
        LOWORD(v86) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 1, "CLRS,output received after timeout", &v86, 2);
        v6 = (uint8_t *)v5;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLRouteSmoother::reconstructRoute(std::string, const CLMotionActivity::Type, std::vector<swan::RouteSmootherEpoch> &, ReconstructionIntervalData &, const BOOL)_block_invoke", "%s\n", v5);
LABEL_52:
        if (v6 != buf)
          free(v6);
      }
    }
    else
    {
      v78 = a1;
      if (qword_1022A00B0 != -1)
        dispatch_once(&qword_1022A00B0, &stru_102155B90);
      v8 = qword_1022A00B8;
      if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEFAULT))
      {
        v9 = objc_msgSend(objc_msgSend(objc_msgSend(a2, "tripSegmentID"), "UUIDString"), "UTF8String");
        objc_msgSend(a2, "distance_m");
        v11 = v10;
        objc_msgSend(a2, "distanceUnc_m");
        v13 = v12;
        objc_msgSend(objc_msgSend(a2, "startDate"), "timeIntervalSinceReferenceDate");
        v15 = v14;
        objc_msgSend(objc_msgSend(a2, "endDate"), "timeIntervalSinceReferenceDate");
        *(_DWORD *)buf = 136447746;
        v101 = v9;
        v102 = 2050;
        v103 = v11;
        v104 = 2050;
        v105 = v13;
        v106 = 2050;
        v107 = v15;
        v108 = 2050;
        v109 = v16;
        v110 = 1026;
        v111 = objc_msgSend(a2, "modeOfTransport");
        v112 = 1026;
        v113 = objc_msgSend(objc_msgSend(a2, "tripLocations"), "count");
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "CLRS,Received trip output Data,ID,%{public}s,distance,%{public}.2lf,distance unc,%{public}.2lf,startTime,%{public}.2lf,endTime, %{public}.2lf,modeOfTransport,%{public}d,locations,%{public}d", buf, 0x40u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00B0 != -1)
          dispatch_once(&qword_1022A00B0, &stru_102155B90);
        v66 = qword_1022A00B8;
        v67 = objc_msgSend(objc_msgSend(objc_msgSend(a2, "tripSegmentID"), "UUIDString"), "UTF8String");
        objc_msgSend(a2, "distance_m");
        v69 = v68;
        objc_msgSend(a2, "distanceUnc_m");
        v71 = v70;
        objc_msgSend(objc_msgSend(a2, "startDate"), "timeIntervalSinceReferenceDate");
        v73 = v72;
        objc_msgSend(objc_msgSend(a2, "endDate"), "timeIntervalSinceReferenceDate");
        v86 = 136447746;
        v87 = v67;
        v88 = 2050;
        v89 = v69;
        v90 = 2050;
        v91 = v71;
        v92 = 2050;
        v93 = v73;
        v94 = 2050;
        v95 = v74;
        v96 = 1026;
        v97 = objc_msgSend(a2, "modeOfTransport");
        v98 = 1026;
        v99 = objc_msgSend(objc_msgSend(a2, "tripLocations"), "count");
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v66, 0, "CLRS,Received trip output Data,ID,%{public}s,distance,%{public}.2lf,distance unc,%{public}.2lf,startTime,%{public}.2lf,endTime, %{public}.2lf,modeOfTransport,%{public}d,locations,%{public}d", &v86, 64);
        v76 = (uint8_t *)v75;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLRouteSmoother::reconstructRoute(std::string, const CLMotionActivity::Type, std::vector<swan::RouteSmootherEpoch> &, ReconstructionIntervalData &, const BOOL)_block_invoke", "%s\n", v75);
        if (v76 != buf)
          free(v76);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) = **(_QWORD **)(a1 + 40);
      v83 = 0u;
      v84 = 0u;
      v81 = 0u;
      v82 = 0u;
      v17 = objc_msgSend(a2, "tripLocations");
      v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v81, v85, 16);
      if (v18)
      {
        v19 = *(_QWORD *)v82;
        __asm { FMOV            V0.2D, #-1.0 }
        v77 = _Q0;
        do
        {
          for (i = 0; i != v18; i = (char *)i + 1)
          {
            if (*(_QWORD *)v82 != v19)
              objc_enumerationMutation(v17);
            v26 = *(void **)(*((_QWORD *)&v81 + 1) + 8 * (_QWORD)i);
            objc_msgSend(objc_msgSend(v26, "timestamp"), "timeIntervalSinceReferenceDate");
            v80 = v27;
            objc_msgSend(v26, "latitude");
            v79 = v28;
            objc_msgSend(v26, "longitude");
            v30 = v29;
            objc_msgSend(v26, "altitude");
            v32 = v31;
            objc_msgSend(v26, "speed");
            v34 = v33;
            objc_msgSend(v26, "course");
            v36 = v35;
            objc_msgSend(v26, "courseAccuracy");
            v38 = v37;
            objc_msgSend(v26, "altitudeAccuracy");
            v39 = 0x40B3880000000000;
            if (v40 > 0.0)
            {
              objc_msgSend(v26, "altitudeAccuracy");
              v39 = v41;
            }
            objc_msgSend(v26, "horizontalAccuracy");
            v43 = v42;
            objc_msgSend(v26, "speedAccuracy");
            v45 = v44;
            *(_DWORD *)buf = objc_msgSend(v26, "signalEnvironmentType");
            v46 = sub_100834138((int *)buf);
            v47 = *(void ***)(v78 + 40);
            v48 = (char *)v47[1];
            v49 = (char *)v47[2];
            if (v48 >= v49)
            {
              v51 = 0x6DB6DB6DB6DB6DB7 * ((v48 - (_BYTE *)*v47) >> 4);
              v52 = v51 + 1;
              if ((unint64_t)(v51 + 1) > 0x249249249249249)
                sub_100259694();
              v53 = 0x6DB6DB6DB6DB6DB7 * ((v49 - (_BYTE *)*v47) >> 4);
              if (2 * v53 > v52)
                v52 = 2 * v53;
              if (v53 >= 0x124924924924924)
                v54 = 0x249249249249249;
              else
                v54 = v52;
              if (v54)
                v55 = (char *)sub_1002A7588((uint64_t)(v47 + 2), v54);
              else
                v55 = 0;
              v56 = &v55[112 * v51];
              *(_QWORD *)v56 = v80;
              *((_QWORD *)v56 + 1) = v79;
              *((_QWORD *)v56 + 2) = v30;
              *((_QWORD *)v56 + 3) = v43;
              *((_QWORD *)v56 + 4) = v32;
              *((_QWORD *)v56 + 5) = v39;
              *((_QWORD *)v56 + 6) = v36;
              *((_QWORD *)v56 + 7) = v38;
              *((_QWORD *)v56 + 8) = v34;
              *((_QWORD *)v56 + 9) = v45;
              *((_OWORD *)v56 + 5) = v77;
              *((_QWORD *)v56 + 12) = 0xBFF0000000000000;
              v56[104] = v46;
              v58 = (char *)*v47;
              v57 = (char *)v47[1];
              v59 = v56;
              if (v57 != *v47)
              {
                do
                {
                  v60 = *((_OWORD *)v57 - 7);
                  v61 = *((_OWORD *)v57 - 5);
                  *((_OWORD *)v59 - 6) = *((_OWORD *)v57 - 6);
                  *((_OWORD *)v59 - 5) = v61;
                  *((_OWORD *)v59 - 7) = v60;
                  v62 = *((_OWORD *)v57 - 4);
                  v63 = *((_OWORD *)v57 - 3);
                  v64 = *((_OWORD *)v57 - 2);
                  *(_OWORD *)(v59 - 23) = *(_OWORD *)(v57 - 23);
                  *((_OWORD *)v59 - 3) = v63;
                  *((_OWORD *)v59 - 2) = v64;
                  *((_OWORD *)v59 - 4) = v62;
                  v59 -= 112;
                  v57 -= 112;
                }
                while (v57 != v58);
                v57 = (char *)*v47;
              }
              v50 = v56 + 112;
              *v47 = v59;
              v47[1] = v56 + 112;
              v47[2] = &v55[112 * v54];
              if (v57)
                operator delete(v57);
            }
            else
            {
              *(_QWORD *)v48 = v80;
              *((_QWORD *)v48 + 1) = v79;
              *((_QWORD *)v48 + 2) = v30;
              *((_QWORD *)v48 + 3) = v43;
              *((_QWORD *)v48 + 4) = v32;
              *((_QWORD *)v48 + 5) = v39;
              *((_QWORD *)v48 + 6) = v36;
              *((_QWORD *)v48 + 7) = v38;
              *((_QWORD *)v48 + 8) = v34;
              *((_QWORD *)v48 + 9) = v45;
              *((_OWORD *)v48 + 5) = v77;
              *((_QWORD *)v48 + 12) = 0xBFF0000000000000;
              v50 = v48 + 112;
              v48[104] = v46;
            }
            v47[1] = v50;
          }
          v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v81, v85, 16);
        }
        while (v18);
      }
    }
  }
  else
  {
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_102155B90);
    v7 = qword_1022A00B8;
    if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CLRS,Received trip output Data,nil", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00B0 != -1)
        dispatch_once(&qword_1022A00B0, &stru_102155B90);
      LOWORD(v86) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 0, "CLRS,Received trip output Data,nil", &v86, 2);
      v6 = (uint8_t *)v65;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLRouteSmoother::reconstructRoute(std::string, const CLMotionActivity::Type, std::vector<swan::RouteSmootherEpoch> &, ReconstructionIntervalData &, const BOOL)_block_invoke", "%s\n", v65);
      goto LABEL_52;
    }
  }
}

uint64_t sub_100834138(int *a1)
{
  int v1;
  NSObject *v2;
  _BOOL4 v3;
  uint64_t v4;
  const char *v5;
  uint8_t *v6;
  _WORD v8[8];
  uint8_t buf[1640];

  v1 = *a1;
  if (*a1 < 7 && ((0x5Fu >> v1) & 1) != 0)
  {
    return (0x6000403020100uLL >> (8 * v1));
  }
  else
  {
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_102155B90);
    v2 = qword_1022A00B8;
    if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "CLRS,Unhandled CLClient signal environment type", buf, 2u);
    }
    v3 = sub_1001BFF7C(115, 0);
    LOBYTE(v4) = 0;
    if (v3)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00B0 != -1)
        dispatch_once(&qword_1022A00B0, &stru_102155B90);
      v8[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 16, "CLRS,Unhandled CLClient signal environment type", v8, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "swan::SignalEnvironment convertCLClientSignalEnvironmentTypeToSignalEnvironment(const CLClientSignalEnvironmentType &)", "%s\n", v5);
      if (v6 != buf)
        free(v6);
      LOBYTE(v4) = 0;
    }
  }
  return v4;
}

void sub_1008342F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint8_t *v5;
  double v6;
  uint8_t *v7;
  NSObject *v9;
  double v10;
  uint8_t *v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  uint64_t v17;
  _BYTE v18[12];
  uint8_t buf[4];
  uint64_t v20;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (*(_BYTE *)(v3 + 24))
  {
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_102155B90);
    v4 = qword_1022A00B8;
    if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "CLRS,Received completionHandler after timeout", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00B0 != -1)
        dispatch_once(&qword_1022A00B0, &stru_102155B90);
      *(_WORD *)v18 = 0;
      v6 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 1, "CLRS,Received completionHandler after timeout", v18, 2, *(_QWORD *)v18);
LABEL_10:
      v7 = v5;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLRouteSmoother::reconstructRoute(std::string, const CLMotionActivity::Type, std::vector<swan::RouteSmootherEpoch> &, ReconstructionIntervalData &, const BOOL)_block_invoke", "%s\n", v6);
LABEL_20:
      if (v7 != buf)
        free(v7);
    }
  }
  else if (a2)
  {
    *(_BYTE *)(v3 + 24) = 1;
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_102155B90);
    v9 = qword_1022A00B8;
    if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v20 = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "CLRS,Received error completionHandler,%@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00B0 != -1)
        dispatch_once(&qword_1022A00B0, &stru_102155B90);
      *(_DWORD *)v18 = 138412290;
      *(_QWORD *)&v18[4] = a2;
      v10 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 16, "CLRS,Received error completionHandler,%@", v18, 12);
      v7 = v11;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLRouteSmoother::reconstructRoute(std::string, const CLMotionActivity::Type, std::vector<swan::RouteSmootherEpoch> &, ReconstructionIntervalData &, const BOOL)_block_invoke", "%s\n", v10);
      goto LABEL_20;
    }
  }
  else
  {
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_102155B90);
    v12 = qword_1022A00B8;
    if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "CLRS,Received completionHandler", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00B0 != -1)
        dispatch_once(&qword_1022A00B0, &stru_102155B90);
      *(_WORD *)v18 = 0;
      v6 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 0, "CLRS,Received completionHandler", v18, 2, *(_QWORD *)v18);
      goto LABEL_10;
    }
  }
  v13 = *(NSObject **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  if (v13)
  {
    dispatch_semaphore_signal(v13);
  }
  else
  {
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_102155B90);
    v14 = qword_1022A00B8;
    if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "CLRS,Received completionHandler, semaphone is NULL", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00B0 != -1)
        dispatch_once(&qword_1022A00B0, &stru_102155B90);
      *(_WORD *)v18 = 0;
      LODWORD(v17) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 1, "CLRS,Received completionHandler, semaphone is NULL", v18, v17);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLRouteSmoother::reconstructRoute(std::string, const CLMotionActivity::Type, std::vector<swan::RouteSmootherEpoch> &, ReconstructionIntervalData &, const BOOL)_block_invoke", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
  }
}

_QWORD *sub_1008347F8(_QWORD *a1)
{
  uint64_t v2;

  std::filebuf::~filebuf(a1 + 1);
  std::ios::~ios(a1 + 52);
  return a1;
}

BOOL sub_100834850(uint64_t a1)
{
  return *(_BYTE *)(a1 + 64) && *(double *)(a1 + 16) > 0.0 && *(_QWORD *)a1 && sub_10083AEA8(a1);
}

BOOL sub_100834878(double *a1, double *a2, uint64_t a3, uint64_t *a4, uint64_t a5, char a6, double a7, double a8)
{
  BOOL v12;
  BOOL v18;
  double v19;
  double v20;
  double v21;
  NSObject *v22;
  _BOOL4 v23;
  double v24;
  _BOOL4 v25;
  uint64_t v26;
  _QWORD *v27;
  const char *v28;
  char *v29;
  NSObject *v30;
  _BOOL8 v31;
  double v33;
  double v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  char v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  const char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  int v49;
  double v50;
  int v51;
  int v52;
  double v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  double v71;
  int v72;
  double v73;
  double v74;
  double v75;
  double v76;
  uint64_t v77;
  double v78;
  _BOOL4 v79;
  int v80;
  NSObject *v81;
  const char *v82;
  const char *v83;
  char *v84;
  uint64_t v85;
  __int128 v86;
  int64x2_t v87;
  uint64_t v88[3];
  uint64_t v89;
  std::__shared_weak_count *v90;
  __int128 v91;
  int v92;
  double v93;
  __int128 __p;
  char *v95;
  _OWORD v96[5];
  _BYTE buf[12];
  __int16 v98;
  double v99;
  __int16 v100;
  _BOOL4 v101;
  __int16 v102;
  _BOOL4 v103;

  if (!*a4)
  {
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_102155B90);
    v30 = qword_1022A00B8;
    if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "CLRS,buildUserRouteSegmentUsingAstar,mapGeometryRoadBuffer is nullptr", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_102155B90);
    LOWORD(v96[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 16, "CLRS,buildUserRouteSegmentUsingAstar,mapGeometryRoadBuffer is nullptr", v96, 2);
    v29 = (char *)v82;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLRouteSmoother::buildUserRouteSegmentUsingAstar(const CFAbsoluteTime, const CLGeoMapSnapData &, const CLGeoMapSnapData &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, std::vector<swan::RouteSmootherEpoch> &, const double, const swan::SignalEnvironment)", "%s\n", v82);
    goto LABEL_115;
  }
  if (a7 >= 0.0 && *((_BYTE *)a2 + 64) != 0)
  {
    v12 = a2[2] <= 0.0 || *(_QWORD *)a2 == 0;
    if (!v12 && sub_10083AEA8((uint64_t)a2) && *(_BYTE *)(a3 + 64))
    {
      v18 = *(double *)(a3 + 16) <= 0.0 || *(_QWORD *)a3 == 0;
      if (!v18 && sub_10083AEA8(a3))
      {
        v19 = a2[13];
        v20 = *(double *)(a3 + 104);
        if (v19 <= 0.5)
        {
          if (v20 <= 0.5)
          {
            sub_1002433B8((uint64_t)buf);
            v33 = sub_10011E634((double *)buf, a2[3], a2[4], *(double *)(a3 + 24), *(double *)(a3 + 32), 0.0);
LABEL_50:
            v34 = v33 + v33;
            memset(v96, 0, 36);
            *(_OWORD *)((char *)&v96[2] + 8) = 0u;
            *(_OWORD *)((char *)&v96[3] + 8) = 0u;
            v91 = *(_OWORD *)(a3 + 24);
            v35 = (std::__shared_weak_count *)a4[1];
            v89 = *a4;
            v90 = v35;
            if (v35)
            {
              p_shared_owners = (unint64_t *)&v35->__shared_owners_;
              do
                v37 = __ldxr(p_shared_owners);
              while (__stxr(v37 + 1, p_shared_owners));
            }
            v38 = sub_100DF494C((uint64_t)v96, a1, a2, (uint64_t *)a3, &v89, (double *)&v91, *(uint64_t *)&v34, 1u, a7, a2[6], *(double *)(a3 + 48));
            v39 = v90;
            if (v90)
            {
              v40 = (unint64_t *)&v90->__shared_owners_;
              do
                v41 = __ldaxr(v40);
              while (__stlxr(v41 - 1, v40));
              if (!v41)
              {
                ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                std::__shared_weak_count::__release_weak(v39);
              }
            }
            if ((v38 & 1) != 0)
            {
              v42 = *((_QWORD *)&v96[0] + 1);
              v43 = *(_QWORD *)&v96[0];
              if (*((_QWORD *)&v96[0] + 1) - *(_QWORD *)&v96[0] < 0x11uLL)
              {
                *(_BYTE *)(**(_QWORD **)&v96[0] + 16) = *(double *)(a3 + 48) > a2[6];
              }
              else
              {
                sub_100DF772C((uint64_t *)v96, a1);
                v42 = *((_QWORD *)&v96[0] + 1);
                v43 = *(_QWORD *)&v96[0];
              }
              v47 = v42;
              if (v43 == v42)
                goto LABEL_109;
              v85 = a5;
              v48 = 0;
              v49 = 0;
              __p = 0uLL;
              v95 = 0;
              v50 = *(double *)(a3 + 16) - a2[2];
              v51 = llround(v50 / a8);
              if (v51 <= 1)
                v52 = 1;
              else
                v52 = v51;
              v87 = vdupq_n_s64(0x7FF8000000000000uLL);
              __asm { FMOV            V0.2D, #-1.0 }
              v86 = _Q0;
              do
              {
                v57 = v50 * (double)++v49 / (double)v52 + a2[2];
                if (v48 >= v95)
                {
                  v58 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v48[-__p] >> 4);
                  v59 = v58 + 1;
                  if ((unint64_t)(v58 + 1) > 0x249249249249249)
                    sub_100259694();
                  if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)&v95[-__p] >> 4) > v59)
                    v59 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)&v95[-__p] >> 4);
                  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v95[-__p] >> 4)) >= 0x124924924924924)
                    v60 = 0x249249249249249;
                  else
                    v60 = v59;
                  if (v60)
                    v61 = (char *)sub_1002A7588((uint64_t)&v95, v60);
                  else
                    v61 = 0;
                  v62 = &v61[112 * v58];
                  *(double *)v62 = v57;
                  *(int64x2_t *)(v62 + 8) = v87;
                  *(_OWORD *)(v62 + 24) = xmmword_101BDB740;
                  *(_OWORD *)(v62 + 40) = v86;
                  *(_OWORD *)(v62 + 56) = v86;
                  *(_OWORD *)(v62 + 72) = v86;
                  *(_OWORD *)(v62 + 88) = v86;
                  v62[104] = a6;
                  v63 = (char *)*((_QWORD *)&__p + 1);
                  v64 = (char *)__p;
                  v65 = v62;
                  if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
                  {
                    do
                    {
                      v66 = *((_OWORD *)v63 - 7);
                      v67 = *((_OWORD *)v63 - 5);
                      *((_OWORD *)v65 - 6) = *((_OWORD *)v63 - 6);
                      *((_OWORD *)v65 - 5) = v67;
                      *((_OWORD *)v65 - 7) = v66;
                      v68 = *((_OWORD *)v63 - 4);
                      v69 = *((_OWORD *)v63 - 3);
                      v70 = *((_OWORD *)v63 - 2);
                      *(_OWORD *)(v65 - 23) = *(_OWORD *)(v63 - 23);
                      *((_OWORD *)v65 - 3) = v69;
                      *((_OWORD *)v65 - 2) = v70;
                      *((_OWORD *)v65 - 4) = v68;
                      v65 -= 112;
                      v63 -= 112;
                    }
                    while (v63 != v64);
                    v63 = v64;
                  }
                  v48 = v62 + 112;
                  *(_QWORD *)&__p = v65;
                  *((_QWORD *)&__p + 1) = v62 + 112;
                  v95 = &v61[112 * v60];
                  if (v63)
                    operator delete(v63);
                }
                else
                {
                  *(double *)v48 = v57;
                  *(int64x2_t *)(v48 + 8) = v87;
                  *(_OWORD *)(v48 + 24) = xmmword_101BDB740;
                  *(_OWORD *)(v48 + 40) = v86;
                  *(_OWORD *)(v48 + 56) = v86;
                  *(_OWORD *)(v48 + 72) = v86;
                  *(_OWORD *)(v48 + 88) = v86;
                  v48[104] = a6;
                  v48 += 112;
                }
                *((_QWORD *)&__p + 1) = v48;
              }
              while (v49 != v52);
              v71 = sub_100835810((uint64_t *)v96, 0.0);
              v72 = *(unsigned __int8 *)(**(_QWORD **)&v96[0] + 16);
              v73 = a2[6];
              v74 = *a2;
              sub_1004078E0(*(_QWORD **)a2);
              if (!v72)
                v73 = 1.0 - v73;
              v75 = *(double *)(*(_QWORD *)&v74 + 40);
              if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)&v96[0] + 1) - 16) + 16))
                v76 = 1.0 - *(double *)(a3 + 48);
              else
                v76 = *(double *)(a3 + 48);
              v77 = *(_QWORD *)a3;
              sub_1004078E0((_QWORD *)v77);
              v78 = *(double *)(v77 + 40);
              memset(v88, 0, sizeof(v88));
              sub_1004F6C18((char *)v88, *(_QWORD **)&v96[0], *((_QWORD **)&v96[0] + 1), (uint64_t)(*((_QWORD *)&v96[0] + 1) - *(_QWORD *)&v96[0]) >> 4);
              v79 = sub_1008359A8(a1, (uint64_t *)&__p, v88, a2[6], v71 - v73 * v75 - v76 * v78, a8);
              *(_QWORD *)buf = v88;
              sub_1002A3684((void ***)buf);
              if (v79)
              {
                sub_100836F70(v80, (char **)&__p, (uint64_t)a2, v85);
              }
              else
              {
                if (qword_1022A00B0 != -1)
                  dispatch_once(&qword_1022A00B0, &stru_102155B90);
                v81 = qword_1022A00B8;
                if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134349056;
                  *(double *)&buf[4] = a7;
                  _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_ERROR, "CLRS,%{public}.1lf,unable to compute snap on constructed route", buf, 0xCu);
                }
                if (sub_1001BFF7C(115, 0))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1022A00B0 != -1)
                    dispatch_once(&qword_1022A00B0, &stru_102155B90);
                  v92 = 134349056;
                  v93 = a7;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 16, "CLRS,%{public}.1lf,unable to compute snap on constructed route", &v92, 12, v85);
                  v84 = (char *)v83;
                  sub_100512490("Generic", 1, 0, 0, "BOOL CLRouteSmoother::buildUserRouteSegmentUsingAstar(const CFAbsoluteTime, const CLGeoMapSnapData &, const CLGeoMapSnapData &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, std::vector<swan::RouteSmootherEpoch> &, const double, const swan::SignalEnvironment)", "%s\n", v83);
                  if (v84 != buf)
                    free(v84);
                }
              }
              if ((_QWORD)__p)
              {
                *((_QWORD *)&__p + 1) = __p;
                operator delete((void *)__p);
              }
              if (v79)
              {
                v42 = *((_QWORD *)&v96[0] + 1);
                v47 = *(_QWORD *)&v96[0];
LABEL_109:
                v31 = v47 != v42;
LABEL_111:
                *(_QWORD *)buf = v96;
                sub_1002A3684((void ***)buf);
                return v31;
              }
            }
            else
            {
              if (qword_1022A00B0 != -1)
                dispatch_once(&qword_1022A00B0, &stru_102155B90);
              v44 = qword_1022A00B8;
              if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134349056;
                *(double *)&buf[4] = a7;
                _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "CLRS,%{public}.1lf,unable to construct route", buf, 0xCu);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A00B0 != -1)
                  dispatch_once(&qword_1022A00B0, &stru_102155B90);
                LODWORD(__p) = 134349056;
                *(double *)((char *)&__p + 4) = a7;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 16, "CLRS,%{public}.1lf,unable to construct route", &__p, 12);
                v46 = (char *)v45;
                sub_100512490("Generic", 1, 0, 0, "BOOL CLRouteSmoother::buildUserRouteSegmentUsingAstar(const CFAbsoluteTime, const CLGeoMapSnapData &, const CLGeoMapSnapData &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, std::vector<swan::RouteSmootherEpoch> &, const double, const swan::SignalEnvironment)", "%s\n", v45);
                if (v46 != buf)
                  free(v46);
              }
            }
            v31 = 0;
            goto LABEL_111;
          }
        }
        else
        {
          if (v19 >= v20)
            v21 = a2[13];
          else
            v21 = *(double *)(a3 + 104);
          if (v20 > 0.5)
            v20 = v21;
          else
            v20 = a2[13];
        }
        v33 = v20 * vabdd_f64(*(double *)(a3 + 16), a2[2]);
        goto LABEL_50;
      }
    }
  }
  if (qword_1022A00B0 != -1)
    dispatch_once(&qword_1022A00B0, &stru_102155B90);
  v22 = qword_1022A00B8;
  if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_DEFAULT))
  {
    v23 = 0;
    v24 = a2[2];
    if (*((_BYTE *)a2 + 64) && v24 > 0.0 && *(_QWORD *)a2)
      v23 = sub_10083AEA8((uint64_t)a2);
    v25 = 0;
    if (*(_BYTE *)(a3 + 64) && *(double *)(a3 + 16) > 0.0 && *(_QWORD *)a3)
      v25 = sub_10083AEA8(a3);
    *(_DWORD *)buf = 134349824;
    *(double *)&buf[4] = a7;
    v98 = 2050;
    v99 = v24;
    v100 = 1026;
    v101 = v23;
    v102 = 1026;
    v103 = v25;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "CLRS,%{public}.3lf,buildUserRouteSegmentUsingAstar,invalid snap data,snapTime,%{public}.3lf,startSnapValid,%{public}d,destinationSnapValid,%{public}d", buf, 0x22u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_102155B90);
    v26 = qword_1022A00B8;
    v27 = (_QWORD *)*((_QWORD *)a2 + 2);
    LODWORD(v96[0]) = 134349824;
    *(double *)((char *)v96 + 4) = a7;
    WORD6(v96[0]) = 2050;
    *(_QWORD *)((char *)v96 + 14) = v27;
    WORD3(v96[1]) = 1026;
    DWORD2(v96[1]) = sub_100834850((uint64_t)a2);
    WORD6(v96[1]) = 1026;
    *(_DWORD *)((char *)&v96[1] + 14) = sub_100834850(a3);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 0, "CLRS,%{public}.3lf,buildUserRouteSegmentUsingAstar,invalid snap data,snapTime,%{public}.3lf,startSnapValid,%{public}d,destinationSnapValid,%{public}d", v96, 34);
    v29 = (char *)v28;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLRouteSmoother::buildUserRouteSegmentUsingAstar(const CFAbsoluteTime, const CLGeoMapSnapData &, const CLGeoMapSnapData &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, std::vector<swan::RouteSmootherEpoch> &, const double, const swan::SignalEnvironment)", "%s\n", v28);
LABEL_115:
    if (v29 != buf)
      free(v29);
  }
  return 0;
}

void sub_100835398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char *a43)
{
  if (__p)
    operator delete(__p);
  a43 = &a33;
  sub_1002A3684((void ***)&a43);
  _Unwind_Resume(a1);
}

NSDictionary *sub_10083540C(uint64_t a1)
{
  uint64_t v2;
  double v3;
  double v4;
  _QWORD *v5;
  _QWORD v7[11];
  _QWORD v8[11];

  v2 = *(_QWORD *)(a1 + 40);
  v7[0] = CFSTR("workoutActivity");
  v8[0] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 112));
  v7[1] = CFSTR("reconstructedIntervalDurationSeconds");
  v8[1] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 48));
  v7[2] = CFSTR("processingTimeMsec");
  v8[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)*(double *)(a1 + 56));
  v7[3] = CFSTR("numLocationSamplesInput");
  v8[3] = +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", *(_QWORD *)(a1 + 64));
  v7[4] = CFSTR("numBackgroundIOSamplesInput");
  v8[4] = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(*(id *)(*(_QWORD *)(a1 + 72) + 8), "count"));
  v7[5] = CFSTR("numReconstructedLocationSamplesOutput");
  v8[5] = +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) - **(_QWORD **)(a1 + 80)) >> 4));
  v7[6] = CFSTR("reconstructionYield");
  v3 = *(double *)(a1 + 48);
  v4 = 1.0;
  if (v3 > 0.0)
    v4 = (double)(unint64_t)(0x6DB6DB6DB6DB6DB7
                                  * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) - **(_QWORD **)(a1 + 80)) >> 4))
       / v3;
  v8[6] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v4);
  v7[7] = CFSTR("useTripSegmentProcessor");
  v8[7] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v2 + 51));
  v7[8] = CFSTR("networkAccessAllowed");
  v8[8] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 116));
  v7[9] = CFSTR("intervalLabel");
  v5 = (_QWORD *)(a1 + 88);
  if (*(char *)(a1 + 111) < 0)
    v5 = (_QWORD *)*v5;
  v8[9] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5);
  v7[10] = CFSTR("reconstructionFailed");
  v8[10] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v8, v7, 11);
}

_QWORD *sub_10083562C(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  __int128 v3;

  result = (_QWORD *)(a1 + 88);
  if (*(char *)(a2 + 111) < 0)
    return sub_100115CE4(result, *(void **)(a2 + 88), *(_QWORD *)(a2 + 96));
  v3 = *(_OWORD *)(a2 + 88);
  result[2] = *(_QWORD *)(a2 + 104);
  *(_OWORD *)result = v3;
  return result;
}

void sub_10083565C(uint64_t a1)
{
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
}

double sub_100835670(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a2 = *(_QWORD *)(a1 + 76);
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 4);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 44);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 60);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 20);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 36);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 52);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 68);
  *(_BYTE *)(a2 + 104) = sub_100834138((int *)(a1 + 140));
  result = 0.0;
  *(_OWORD *)(a2 + 80) = xmmword_101BDB750;
  return result;
}

void sub_1008356E4(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0x6F96F96F96F96F97 * ((v4 - (_BYTE *)*a1) >> 2) < a2)
  {
    if (a2 >= 0x1A41A41A41A41A5)
      sub_100259694();
    v5 = ((_BYTE *)a1[1] - (_BYTE *)*a1) / 156;
    v6 = (char *)sub_10055B5BC(v3, a2);
    v7 = &v6[156 * v5];
    v9 = &v6[156 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *(_OWORD *)(v10 - 156);
        *(_OWORD *)(v12 - 140) = *(_OWORD *)(v10 - 140);
        *(_OWORD *)(v12 - 156) = v13;
        v14 = *(_OWORD *)(v10 - 124);
        v15 = *(_OWORD *)(v10 - 108);
        v16 = *(_OWORD *)(v10 - 92);
        *(_OWORD *)(v12 - 76) = *(_OWORD *)(v10 - 76);
        *(_OWORD *)(v12 - 92) = v16;
        *(_OWORD *)(v12 - 108) = v15;
        *(_OWORD *)(v12 - 124) = v14;
        v17 = *(_OWORD *)(v10 - 60);
        v18 = *(_OWORD *)(v10 - 44);
        v19 = *(_OWORD *)(v10 - 28);
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        *(_OWORD *)(v12 - 28) = v19;
        *(_OWORD *)(v12 - 44) = v18;
        *(_OWORD *)(v12 - 60) = v17;
        v12 -= 156;
        v10 -= 156;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

double sub_100835810(uint64_t *a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  double v9;
  _QWORD **v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;

  v3 = *a1;
  v2 = a1[1];
  if (v2 == *a1)
    return 0.0;
  v6 = 0;
  v7 = 0;
  v8 = (v2 - *a1) >> 4;
  v9 = 0.0;
  do
  {
    v10 = *(_QWORD ***)(v3 + v6);
    if (v10)
    {
      if (a2 != 0.0 && v7 < v8 - 1 && *(_QWORD *)(v3 + v6 + 16))
      {
        v11 = sub_100DF4678((uint64_t)v10, 1);
        v12 = sub_100DF4678(*(_QWORD *)(v3 + v6 + 16), 0);
        v13 = fmod(v11 + -90.0 + 90.0 - v12 + 180.0, 360.0);
        if (v13 < 0.0)
          v13 = v13 + 360.0;
        v14 = v13 + -360.0;
        if (v13 <= 180.0)
          v14 = v13;
        v15 = fabs(v14);
        v16 = 0.0;
        if (v15 > 5.0 && v15 < 180.0)
          v16 = a2 / tan(v14 * 0.0174532925 * 0.5);
        v9 = v9 + v16 * -2.0;
        v10 = *(_QWORD ***)(v3 + v6);
      }
      v17 = (uint64_t)*v10;
      sub_1004078E0(*v10);
      v9 = v9 + *(double *)(v17 + 40);
      v3 = *a1;
      v2 = a1[1];
    }
    ++v7;
    v8 = (v2 - v3) >> 4;
    v6 += 16;
  }
  while (v7 < v8);
  return v9;
}

BOOL sub_1008359A8(double *a1, uint64_t *a2, uint64_t *a3, double a4, double a5, double a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  unint64_t v13;
  double v14;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t *v22;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  double v31;
  double v32;
  uint64_t v33;
  int v34;
  NSObject *v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  const char *v42;
  uint8_t *v43;
  uint64_t v44;
  const char *v45;
  uint8_t *v46;
  uint64_t v47;
  _QWORD **v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  uint64_t *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  double v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  double v60;
  char v61;
  double v62;
  double v63;
  NSObject *v64;
  const char *v65;
  uint8_t *v66;
  NSObject *v67;
  const char *v68;
  uint64_t v69;
  double v70;
  double *v71;
  double v72;
  double v73;
  double v74;
  NSObject *v75;
  unint64_t *v76;
  unint64_t v77;
  int v78;
  double v79;
  uint64_t v80;
  NSObject *v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  double *v86;
  double *v87;
  double v88;
  int v89;
  uint64_t v90;
  double v91;
  NSObject *v92;
  const char *v93;
  uint64_t v94;
  double v95;
  double *v96;
  double v97;
  double v98;
  long double v99;
  long double v100;
  uint64_t v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double *v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double *v111;
  double v112;
  double v113;
  double v114;
  double v115;
  NSObject *v116;
  const char *v117;
  uint64_t v118;
  const char *v119;
  uint8_t *v120;
  const char *v121;
  NSObject *v122;
  int v123;
  unint64_t v124;
  NSObject *v126;
  uint64_t v127;
  _QWORD **v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD **v133;
  uint64_t v134;
  unint64_t v135;
  int v136;
  unint64_t v137;
  const char *v138;
  uint8_t *v139;
  const char *v140;
  uint64_t v141;
  double v142;
  double v143;
  double v144;
  double v146;
  __int128 v147;
  _BOOL4 v149;
  uint64_t v150;
  long double __y;
  _QWORD v152[3];
  uint64_t v153;
  _BYTE v154[24];
  uint64_t v155;
  __int128 v156;
  uint64_t v157;
  __int16 v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char v162;
  __int128 v163;
  int v164;
  __int128 v165;
  __int128 v166;
  int v167;
  uint8_t buf[8];
  __int16 v169;
  _BYTE v170[18];

  v8 = a2[1];
  if (*a2 == v8 || a4 > 1.0 || ((v9 = *a3, v10 = a3[1], a4 >= 0.0) ? (_ZF = v9 == v10) : (_ZF = 1), _ZF))
  {
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_102155B90);
    v122 = qword_1022A00B8;
    if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_ERROR))
    {
      v123 = -1227133513 * ((unint64_t)(a2[1] - *a2) >> 4);
      v124 = (unint64_t)(a3[1] - *a3) >> 4;
      *(_DWORD *)buf = 67240704;
      *(_DWORD *)&buf[4] = v123;
      v169 = 1026;
      *(_DWORD *)v170 = v124;
      *(_WORD *)&v170[4] = 2050;
      *(double *)&v170[6] = a4;
      _os_log_impl((void *)&_mh_execute_header, v122, OS_LOG_TYPE_ERROR, "CLRS,snapLocationsOnRoads,invalid input,locations,%{public}d,roadVectors,%{public}d,startRoadProjection,%{public}.3lf", buf, 0x18u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_102155B90);
    v136 = -1227133513 * ((unint64_t)(a2[1] - *a2) >> 4);
    v137 = (unint64_t)(a3[1] - *a3) >> 4;
    LODWORD(v153) = 67240704;
    HIDWORD(v153) = v136;
    *(_WORD *)v154 = 1026;
    *(_DWORD *)&v154[2] = v137;
    *(_WORD *)&v154[6] = 2050;
    *(double *)&v154[8] = a4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 16, "CLRS,snapLocationsOnRoads,invalid input,locations,%{public}d,roadVectors,%{public}d,startRoadProjection,%{public}.3lf", &v153, 24);
    v139 = (uint8_t *)v138;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLRouteSmoother::snapLocationsOnRoads(std::vector<swan::RouteSmootherEpoch> &, const std::vector<CLRouteRoadPtr>, const double, const double, const double, const swan::SignalEnvironment)", "%s\n", v138);
    if (v139 == buf)
      return 0;
    goto LABEL_189;
  }
  v12 = 0;
  v13 = (unint64_t)(v10 - v9) >> 4;
  v14 = a5 / (double)(unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v8 - *a2) >> 4));
  v146 = v14 / a6;
  __asm { FMOV            V0.2D, #-1.0 }
  v147 = _Q0;
  while (2)
  {
    v19 = *a2;
    v20 = 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 4);
    v149 = v20 <= v12;
    if (v20 <= v12)
      return v149;
    v21 = 0;
    v22 = (uint64_t *)(v19 + 112 * v12);
    v23 = v14 * (double)((int)v12 + 1);
    v24 = a4;
    while (1)
    {
      v25 = *a3;
      if (v23 <= 0.0)
        break;
      v26 = *(_QWORD *)(v25 + 16 * v21);
      v27 = *(double *)v26;
      v28 = *(std::__shared_weak_count **)(v26 + 8);
      __y = *(double *)v26;
      v152[0] = v28;
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v30 = __ldxr(p_shared_owners);
        while (__stxr(v30 + 1, p_shared_owners));
      }
      if (v27 == 0.0)
      {
        if (qword_1022A00B0 != -1)
          dispatch_once(&qword_1022A00B0, &stru_102155B90);
        v35 = qword_1022A00B8;
        if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_ERROR))
        {
          v36 = *v22;
          *(_DWORD *)buf = 67240448;
          *(_DWORD *)&buf[4] = v13;
          v169 = 2050;
          *(_QWORD *)v170 = v36;
          _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "CLRS,road pointer invalid,count,%{public}d,locationTime,%{public}.3lf", buf, 0x12u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00B0 != -1)
            dispatch_once(&qword_1022A00B0, &stru_102155B90);
          v41 = *v22;
          LODWORD(v153) = 67240448;
          HIDWORD(v153) = v13;
          *(_WORD *)v154 = 2050;
          *(_QWORD *)&v154[2] = v41;
          LODWORD(v141) = 18;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 16, "CLRS,road pointer invalid,count,%{public}d,locationTime,%{public}.3lf", &v153, v141);
          v43 = (uint8_t *)v42;
          sub_100512490("Generic", 1, 0, 0, "BOOL CLRouteSmoother::snapLocationsOnRoads(std::vector<swan::RouteSmootherEpoch> &, const std::vector<CLRouteRoadPtr>, const double, const double, const double, const swan::SignalEnvironment)", "%s\n", v42);
          if (v43 != buf)
            free(v43);
        }
        v34 = 1;
        if (!v28)
          goto LABEL_45;
        goto LABEL_42;
      }
      sub_1004078E0(*(_QWORD **)&v27);
      v31 = 1.0 - v24;
      if (!*(_BYTE *)(*(_QWORD *)(*a3 + 16 * v21) + 16))
        v31 = v24;
      v32 = *(double *)(*(_QWORD *)&v27 + 40) * v31;
      if (v23 <= v32 + 0.000000001)
      {
        v34 = 12;
        if (v28)
          goto LABEL_42;
LABEL_45:
        if (v34)
          goto LABEL_57;
      }
      else
      {
        v33 = v21 + 1;
        if ((int)v33 >= (int)v13)
        {
          if (qword_1022A00B0 != -1)
            dispatch_once(&qword_1022A00B0, &stru_102155B90);
          v37 = qword_1022A00B8;
          if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_ERROR))
          {
            v38 = *v22;
            *(_DWORD *)buf = 67240448;
            *(_DWORD *)&buf[4] = v13;
            v169 = 2050;
            *(_QWORD *)v170 = v38;
            _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "CLRS,currentRoadIndex over candidate road size,count,%{public}d,locationTime,%{public}.3lf", buf, 0x12u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A00B0 != -1)
              dispatch_once(&qword_1022A00B0, &stru_102155B90);
            v44 = *v22;
            LODWORD(v153) = 67240448;
            HIDWORD(v153) = v13;
            *(_WORD *)v154 = 2050;
            *(_QWORD *)&v154[2] = v44;
            LODWORD(v141) = 18;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 16, "CLRS,currentRoadIndex over candidate road size,count,%{public}d,locationTime,%{public}.3lf", &v153, v141);
            v46 = (uint8_t *)v45;
            sub_100512490("Generic", 1, 0, 0, "BOOL CLRouteSmoother::snapLocationsOnRoads(std::vector<swan::RouteSmootherEpoch> &, const std::vector<CLRouteRoadPtr>, const double, const double, const double, const swan::SignalEnvironment)", "%s\n", v45);
            if (v46 != buf)
              free(v46);
          }
          v34 = 0;
          v23 = 0.0;
          if (*(_BYTE *)(*(_QWORD *)(*a3 + 16 * v21) + 16))
            v24 = 1.0;
          else
            v24 = 0.0;
          if (!v28)
            goto LABEL_45;
        }
        else
        {
          v34 = 0;
          v23 = v23 - v32;
          if (*(_BYTE *)(*(_QWORD *)(*a3 + 16 * v33) + 16))
            v24 = 0.0;
          else
            v24 = 1.0;
          ++v21;
          if (!v28)
            goto LABEL_45;
        }
LABEL_42:
        v39 = (unint64_t *)&v28->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (v40)
          goto LABEL_45;
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
        if (v34)
        {
LABEL_57:
          if (v34 != 12)
            return v149;
          v25 = *a3;
          break;
        }
      }
    }
    v47 = v21;
    v48 = *(_QWORD ***)(v25 + 16 * v21);
    v49 = (uint64_t)*v48;
    if (*v48)
    {
      sub_1004078E0(*v48);
      if (*(double *)(v49 + 40) != 0.0)
      {
        v153 = 0;
        *(_QWORD *)v154 = 0;
        *(_QWORD *)&v154[8] = 0xBFF0000000000000;
        *(_QWORD *)&v154[16] = 0;
        v155 = 0;
        v156 = v147;
        v157 = 0;
        v158 = 256;
        v160 = 0;
        v161 = 0;
        v159 = 0;
        v162 = 0;
        v163 = xmmword_101BAFC90;
        v164 = 0;
        v165 = 0u;
        v166 = 0u;
        v167 = 0;
        v50 = 16 * v21;
        v51 = **(_QWORD **)(*a3 + 16 * v47);
        sub_1004078E0((_QWORD *)v51);
        v52 = v23 / *(double *)(v51 + 40);
        v53 = *(uint64_t **)(*a3 + 16 * v47);
        v54 = *v53;
        v55 = (std::__shared_weak_count *)v53[1];
        if (*((_BYTE *)v53 + 16))
          v56 = v52;
        else
          v56 = -v52;
        if (v55)
        {
          v57 = (unint64_t *)&v55->__shared_owners_;
          do
            v58 = __ldxr(v57);
          while (__stxr(v58 + 1, v57));
        }
        if (v54)
        {
          v59 = (*(_QWORD *)(v54 + 144) - *(_QWORD *)(v54 + 136)) >> 4;
          if ((int)v59 <= 0)
          {
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_102155E38);
            v67 = qword_1022A00D8;
            if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,CoordinateCount is 0", buf, 2u);
            }
            v60 = 0.0;
            if (!sub_1001BFF7C(115, 2))
              goto LABEL_100;
            bzero(buf, 0x65CuLL);
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_102155E38);
            LOWORD(__y) = 0;
            LODWORD(v141) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,interpolateProjections,CoordinateCount is 0", &__y, v141);
            v66 = (uint8_t *)v68;
            sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "%s\n", v68);
          }
          else
          {
            v60 = 0.0;
            if ((_DWORD)v59 == 1)
            {
              v61 = 1;
              v62 = 0.0;
              v63 = 0.0;
              if (!v55)
                goto LABEL_105;
LABEL_102:
              v76 = (unint64_t *)&v55->__shared_owners_;
              do
                v77 = __ldaxr(v76);
              while (__stlxr(v77 - 1, v76));
              if (v77)
              {
LABEL_105:
                if ((v61 & 1) != 0)
                  goto LABEL_106;
LABEL_110:
                if (qword_1022A00B0 != -1)
                  dispatch_once(&qword_1022A00B0, &stru_102155B90);
                v81 = qword_1022A00B8;
                if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_ERROR))
                {
                  v82 = *v22;
                  *(_DWORD *)buf = 67240448;
                  *(_DWORD *)&buf[4] = v13;
                  v169 = 2050;
                  *(_QWORD *)v170 = v82;
                  _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_ERROR, "CLRS,interpolateOnRoad,interpolateProjections returned false,count,%{public}d,locationTime,%{public}.3lf", buf, 0x12u);
                }
                if (!sub_1001BFF7C(115, 0))
                {
                  v78 = 1;
                  goto LABEL_116;
                }
                bzero(buf, 0x65CuLL);
                if (qword_1022A00B0 != -1)
                  dispatch_once(&qword_1022A00B0, &stru_102155B90);
                v118 = *v22;
                LODWORD(__y) = 67240448;
                HIDWORD(__y) = v13;
                LOWORD(v152[0]) = 2050;
                *(_QWORD *)((char *)v152 + 2) = v118;
                LODWORD(v141) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00B8, 16, "CLRS,interpolateOnRoad,interpolateProjections returned false,count,%{public}d,locationTime,%{public}.3lf", &__y, v141);
                v120 = (uint8_t *)v119;
                sub_100512490("Generic", 1, 0, 0, "BOOL CLRouteSmoother::snapLocationsOnRoads(std::vector<swan::RouteSmootherEpoch> &, const std::vector<CLRouteRoadPtr>, const double, const double, const double, const swan::SignalEnvironment)", "%s\n", v119);
                ++v12;
                if (v120 != buf)
                  free(v120);
                v78 = 1;
              }
              else
              {
                ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                std::__shared_weak_count::__release_weak(v55);
                if ((v61 & 1) == 0)
                  goto LABEL_110;
LABEL_106:
                v78 = 0;
                v79 = v63 + 180.0;
                if (*(_BYTE *)(*(_QWORD *)(*a3 + v50) + 16))
                  v79 = v63;
                v80 = v19 + 112 * v12;
                *(double *)(v80 + 8) = v60;
                *(double *)(v80 + 16) = v62;
                *(double *)(v80 + 48) = v79;
                *(_QWORD *)(v80 + 56) = 0x4024000000000000;
                *(double *)(v80 + 64) = v146;
                *(_OWORD *)(v80 + 24) = xmmword_101BDB760;
                *(_QWORD *)(v80 + 40) = 0x4008000000000000;
                *(_OWORD *)(v80 + 72) = xmmword_101BDB770;
LABEL_116:
                ++v12;
              }
              v83 = *(std::__shared_weak_count **)v154;
              if (!*(_QWORD *)v154)
                goto LABEL_121;
              v84 = (unint64_t *)(*(_QWORD *)v154 + 8);
              do
                v85 = __ldaxr(v84);
              while (__stlxr(v85 - 1, v84));
              if (!v85)
              {
                ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                std::__shared_weak_count::__release_weak(v83);
                if (v78)
                  return v149;
              }
              else
              {
LABEL_121:
                if (v78)
                  return v149;
              }
              continue;
            }
            sub_1004078E0((_QWORD *)v54);
            v69 = (uint64_t)(*(_QWORD *)(v54 + 168) - *(_QWORD *)(v54 + 160)) >> 3;
            if (v69 == (_DWORD)v59 - 1)
            {
              sub_1004078E0((_QWORD *)v54);
              v70 = v24 + v56;
              if (v70 < 0.000001)
              {
                v71 = *(double **)(v54 + 136);
                v60 = *v71;
                v62 = v71[1];
                v72 = v71[2];
                v73 = v71[3];
                *(double *)buf = 0.0;
                v150 = 0;
                __y = 0.0;
                sub_10011E780(a1, (double *)buf, &__y, (double *)&v150, v60, v62, 0.0, v72, v73, 0.0);
LABEL_92:
                v74 = atan2(__y, *(long double *)buf);
                if (v74 < 0.0)
                  v74 = v74 + 6.28318531;
                v63 = v74 * 57.2957795;
LABEL_141:
                v61 = 1;
LABEL_101:
                if (!v55)
                  goto LABEL_105;
                goto LABEL_102;
              }
              if (v70 >= 0.999999)
              {
                v94 = *(_QWORD *)(v54 + 136) + 16 * v69;
                v60 = *(double *)v94;
                v62 = *(double *)(v94 + 8);
                v95 = sub_10073C714(a1, *(double *)(v94 - 16), *(double *)(v94 - 8), *(double *)v94, v62);
LABEL_140:
                v63 = v95;
                goto LABEL_141;
              }
              v86 = *(double **)(v54 + 160);
              v87 = *(double **)(v54 + 168);
              if (v86 == v87)
              {
LABEL_131:
                if (qword_1022A00D0 != -1)
                  dispatch_once(&qword_1022A00D0, &stru_102155E38);
                v92 = qword_1022A00D8;
                if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,Could not interpolate to intended projection", buf, 2u);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1022A00D0 != -1)
                    dispatch_once(&qword_1022A00D0, &stru_102155E38);
                  LOWORD(__y) = 0;
                  LODWORD(v141) = 2;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,interpolateProjections,Could not interpolate to intended projection", &__y, v141);
                  v66 = (uint8_t *)v93;
                  sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "%s\n", v93);
                  goto LABEL_165;
                }
              }
              else
              {
                v88 = 0.0;
                v89 = 2;
                v90 = 24;
                while (1)
                {
                  v91 = *v86 / *(double *)(v54 + 40);
                  if (vabdd_f64(v70, v88 + v91) < 0.000001)
                    break;
                  if (v88 + v91 > v70)
                  {
                    v106 = (double *)(*(_QWORD *)(v54 + 136) + v90);
                    v107 = *(v106 - 2);
                    v142 = *(v106 - 1);
                    v144 = *(v106 - 3);
                    v108 = sub_1010B9110(v107, *v106);
                    v109 = (v70 - v88) / v91;
                    sub_100080DCC(v107 + v108 * v109);
                    v62 = v110;
                    v111 = (double *)(*(_QWORD *)(v54 + 136) + v90);
                    v112 = *(v111 - 3);
                    v113 = *(v111 - 2);
                    v114 = *(v111 - 1);
                    v115 = *v111;
                    *(double *)buf = 0.0;
                    v150 = 0;
                    __y = 0.0;
                    sub_10011E780(a1, (double *)buf, &__y, (double *)&v150, v112, v113, 0.0, v114, v115, 0.0);
                    v60 = v144 + (v142 - v144) * v109;
                    goto LABEL_92;
                  }
                  ++v86;
                  v90 += 16;
                  ++v89;
                  v88 = v88 + v91;
                  if (v86 == v87)
                    goto LABEL_131;
                }
                if (v89 < (int)v59)
                {
                  v96 = (double *)(*(_QWORD *)(v54 + 136) + v90);
                  v60 = *(v96 - 1);
                  v62 = *v96;
                  v97 = *(v96 - 3);
                  v98 = *(v96 - 2);
                  *(double *)buf = 0.0;
                  v150 = 0;
                  __y = 0.0;
                  sub_10011E780(a1, (double *)buf, &__y, (double *)&v150, v97, v98, 0.0, v60, v62, 0.0);
                  v99 = __y;
                  v100 = *(double *)buf;
                  v101 = *(_QWORD *)(v54 + 136) + v90;
                  v102 = *(double *)(v101 + 8);
                  v103 = *(double *)(v101 + 16);
                  *(double *)buf = 0.0;
                  v150 = 0;
                  __y = 0.0;
                  sub_10011E780(a1, (double *)buf, &__y, (double *)&v150, v60, v62, 0.0, v102, v103, 0.0);
                  v104 = atan2(v99, v100);
                  if (v104 < 0.0)
                    v104 = v104 + 6.28318531;
                  v143 = v104 * 57.2957795;
                  v105 = atan2(__y, *(long double *)buf);
                  if (v105 < 0.0)
                    v105 = v105 + 6.28318531;
                  sub_100512AA0(v143, v105 * 57.2957795);
                  goto LABEL_140;
                }
                if (qword_1022A00D0 != -1)
                  dispatch_once(&qword_1022A00D0, &stru_102155E38);
                v116 = qword_1022A00D8;
                if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v116, OS_LOG_TYPE_ERROR, "CLMM,interpolateProjections,Could not interpolate, incorrect coordinateCount", buf, 2u);
                }
                v60 = 0.0;
                if (sub_1001BFF7C(115, 0))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1022A00D0 != -1)
                    dispatch_once(&qword_1022A00D0, &stru_102155E38);
                  LOWORD(__y) = 0;
                  LODWORD(v141) = 2;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,interpolateProjections,Could not interpolate, incorrect coordinateCount", &__y, v141);
                  v66 = (uint8_t *)v117;
                  sub_100512490("Generic", 1, 0, 0, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "%s\n", v117);
                  goto LABEL_165;
                }
              }
LABEL_100:
              v61 = 0;
              v62 = 0.0;
              v63 = 0.0;
              goto LABEL_101;
            }
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_102155E38);
            v75 = qword_1022A00D8;
            if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,inconsistent array size", buf, 2u);
            }
            if (!sub_1001BFF7C(115, 2))
              goto LABEL_100;
            bzero(buf, 0x65CuLL);
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_102155E38);
            LOWORD(__y) = 0;
            LODWORD(v141) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,interpolateProjections,inconsistent array size", &__y, v141);
            v66 = (uint8_t *)v121;
            sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "%s\n", v121);
          }
        }
        else
        {
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_102155E38);
          v64 = qword_1022A00D8;
          if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_ERROR, "CLMM, NULL road", buf, 2u);
          }
          v60 = 0.0;
          if (!sub_1001BFF7C(115, 0))
            goto LABEL_100;
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_102155E38);
          LOWORD(__y) = 0;
          LODWORD(v141) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM, NULL road", &__y, v141);
          v66 = (uint8_t *)v65;
          sub_100512490("Generic", 1, 0, 0, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "%s\n", v65);
        }
LABEL_165:
        if (v66 != buf)
          free(v66);
        goto LABEL_100;
      }
    }
    break;
  }
  if (qword_1022A00B0 != -1)
    dispatch_once(&qword_1022A00B0, &stru_102155B90);
  v126 = qword_1022A00B8;
  if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_ERROR))
  {
    v127 = *v22;
    v128 = *(_QWORD ***)(*a3 + 16 * v47);
    v129 = (uint64_t)*v128;
    if (*v128)
    {
      sub_1004078E0(*v128);
      v130 = *(_QWORD *)(v129 + 40);
    }
    else
    {
      v130 = 0xBFF0000000000000;
    }
    *(_DWORD *)buf = 67240704;
    *(_DWORD *)&buf[4] = v13;
    v169 = 2050;
    *(_QWORD *)v170 = v127;
    *(_WORD *)&v170[8] = 2050;
    *(_QWORD *)&v170[10] = v130;
    _os_log_impl((void *)&_mh_execute_header, v126, OS_LOG_TYPE_ERROR, "CLRS,road pointer invalid or zero length,count,%{public}d,locationTime,%{public}.3lf,roadLength,%{public}.2lf", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00B0 != -1)
      dispatch_once(&qword_1022A00B0, &stru_102155B90);
    v131 = qword_1022A00B8;
    v132 = *v22;
    v133 = *(_QWORD ***)(*a3 + 16 * v47);
    v134 = (uint64_t)*v133;
    if (*v133)
    {
      sub_1004078E0(*v133);
      v135 = *(_QWORD *)(v134 + 40);
    }
    else
    {
      v135 = 0xBFF0000000000000;
    }
    LODWORD(v153) = 67240704;
    HIDWORD(v153) = v13;
    *(_WORD *)v154 = 2050;
    *(_QWORD *)&v154[2] = v132;
    *(_WORD *)&v154[10] = 2050;
    *(_QWORD *)&v154[12] = v135;
    LODWORD(v141) = 28;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v131, 16, "CLRS,road pointer invalid or zero length,count,%{public}d,locationTime,%{public}.3lf,roadLength,%{public}.2lf", &v153, v141);
    v139 = (uint8_t *)v140;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLRouteSmoother::snapLocationsOnRoads(std::vector<swan::RouteSmootherEpoch> &, const std::vector<CLRouteRoadPtr>, const double, const double, const double, const swan::SignalEnvironment)", "%s\n", v140);
    if (v139 != buf)
LABEL_189:
      free(v139);
  }
  return 0;
}

void sub_100836F24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  sub_100261F44((uint64_t)&a45);
  _Unwind_Resume(a1);
}

char *sub_100836F70(int a1, char **a2, uint64_t a3, uint64_t a4)
{
  char *v6;
  char *v7;

  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    while (*(double *)(a3 + 16) >= *(double *)v6)
    {
      v6 += 112;
      if (v6 == v7)
      {
        v6 = a2[1];
        return sub_10083B1E8(a4, *(_QWORD *)(a4 + 8), v6, v7, 0x6DB6DB6DB6DB6DB7 * ((v7 - v6) >> 4));
      }
    }
  }
  return sub_10083B1E8(a4, *(_QWORD *)(a4 + 8), v6, v7, 0x6DB6DB6DB6DB6DB7 * ((v7 - v6) >> 4));
}

void sub_100836FC8(id a1)
{
  qword_1022A00B8 = (uint64_t)os_log_create("com.apple.locationd.Position", "RouteSmoother");
}

uint64_t sub_100836FF4(uint64_t a1)
{
  uint64_t i;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v8[2];
  __int128 v9;
  char v10;
  uint64_t v11[3];
  char v12;
  uint64_t v13[3];
  char v14;
  uint64_t v15[3];
  char v16;
  uint64_t v17[3];

  *(_QWORD *)a1 = off_102155C20;
  sub_1015A2E04((_QWORD *)(a1 + 8), "");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = off_102155BC0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 112) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 64) = xmmword_101BDBA50;
  *(_OWORD *)(a1 + 80) = unk_101BDBA60;
  *(_OWORD *)(a1 + 96) = xmmword_101BDBA70;
  *(_OWORD *)(a1 + 120) = xmmword_101BDBA88;
  *(_OWORD *)(a1 + 132) = *(__int128 *)((char *)&xmmword_101BDBA88 + 12);
  *(_QWORD *)&v7 = 0xA00000006;
  v4 = xmmword_101BDBAA4;
  v5 = unk_101BDBAB4;
  v6 = xmmword_101BDBAC4;
  sub_10083B858(a1 + 152, (unsigned __int8 *)&v4, 7);
  v8[0] = xmmword_101BDBB20;
  v8[1] = unk_101BDBB30;
  v9 = xmmword_101BDBB40;
  v4 = xmmword_101BDBAE0;
  v5 = unk_101BDBAF0;
  v6 = xmmword_101BDBB00;
  v7 = unk_101BDBB10;
  sub_10083BB00(a1 + 176, (unsigned __int8 *)&v4, 7);
  LOBYTE(v4) = 0;
  sub_1008385B8((uint64_t *)&v4 + 1, a1 + 176);
  LOBYTE(v6) = 1;
  sub_1008385B8((uint64_t *)&v6 + 1, a1 + 176);
  LOBYTE(v8[0]) = 2;
  sub_1008385B8((uint64_t *)v8 + 1, a1 + 176);
  LOBYTE(v9) = 3;
  sub_1008385B8((uint64_t *)&v9 + 1, a1 + 176);
  v10 = 4;
  sub_1008385B8(v11, a1 + 176);
  v12 = 5;
  sub_1008385B8(v13, a1 + 176);
  v14 = 6;
  sub_1008385B8(v15, a1 + 176);
  v16 = 7;
  sub_1008385B8(v17, a1 + 176);
  sub_1008388BC(a1 + 200, (unsigned __int8 *)&v4, 8);
  for (i = 0; i != -32; i -= 4)
    sub_100008848((uint64_t)&v17[i], (_QWORD *)v17[i + 1]);
  *(_BYTE *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 232) = xmmword_101BDB780;
  *(_OWORD *)(a1 + 248) = xmmword_101BDB790;
  *(_QWORD *)(a1 + 264) = 0x4006A09E667F3BCCLL;
  *(_OWORD *)(a1 + 272) = xmmword_101BDB7A0;
  *(_QWORD *)(a1 + 288) = 0x3FF921FF2E48E8A7;
  *(_BYTE *)(a1 + 296) = 0;
  return a1;
}

void sub_1008372B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t i;

  for (i = 0; i != -256; i -= 32)
    sub_100008848(v7 + i + 232, *(_QWORD **)(v7 + i + 240));
  sub_100008848(v4, *(_QWORD **)(v1 + 184));
  sub_100008848(v3, *(_QWORD **)(v1 + 160));
  if (*(char *)(v1 + 63) < 0)
    operator delete(*v6);
  *(_QWORD *)v1 = v5 + 16;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

void sub_100837360()
{
  JUMPOUT(0x100837318);
}

void sub_100837368()
{
  JUMPOUT(0x100837324);
}

void sub_100837370()
{
  JUMPOUT(0x100837330);
}

void sub_100837378(uint64_t a1)
{
  *(_QWORD *)a1 = off_102155BC0;
  sub_10007CDDC(a1 + 200, *(_QWORD **)(a1 + 208));
  sub_100008848(a1 + 176, *(_QWORD **)(a1 + 184));
  sub_100008848(a1 + 152, *(_QWORD **)(a1 + 160));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  *(_QWORD *)a1 = off_102155C20;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  operator delete();
}

uint64_t sub_100837408(uint64_t a1, uint64_t a2, char a3)
{
  const std::locale::facet *v4;
  unsigned __int8 v5;
  _QWORD *v6;
  std::string::size_type v7;
  std::string::size_type v8;
  std::string::size_type size;
  int64_t v10;
  std::string *p_str;
  _BYTE *v12;
  std::string *v13;
  _BYTE *v14;
  std::string *v15;
  std::string *v16;
  std::string *v17;
  std::string::size_type v18;
  uint64_t v19;
  std::string v21;
  std::string __str;
  char v23;
  void (__cdecl **v24[2])(std::ifstream *__hidden);
  _BYTE v25[408];
  uint64_t v26;

  *(_BYTE *)(a1 + 32) = a3;
  sub_100838A88(v24, a2, 8);
  if ((v25[(unint64_t)*(v24[0] - 3) + 16] & 5) != 0)
  {
    LOWORD(__str.__r_.__value_.__l.__data_) = 0;
    v21.__r_.__value_.__s.__data_[0] = 2;
    cnprint::CNPrinter::Print(&__str, &v21);
  }
  else
  {
    std::string::assign((std::string *)(a1 + 8), "");
    memset(&__str, 0, sizeof(__str));
    while (1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v24 + (unint64_t)*(v24[0] - 3)));
      v4 = std::locale::use_facet((const std::locale *)&v21, &std::ctype<char>::id);
      v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
      std::locale::~locale((std::locale *)&v21);
      v6 = sub_1004ACBE4(v24, (uint64_t)&__str, v5);
      v7 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      LOBYTE(v8) = *((_BYTE *)&__str.__r_.__value_.__s + 23);
      if ((*((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 32) & 5) != 0)
        break;
      size = __str.__r_.__value_.__l.__size_;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v10 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      else
        v10 = __str.__r_.__value_.__l.__size_;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_str = &__str;
      else
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      if (v10 >= 1)
      {
        v12 = (char *)p_str + v10;
        v13 = p_str;
        do
        {
          v14 = memchr(v13, 35, v10);
          if (!v14)
            break;
          if (*v14 == 35)
          {
            if (v14 != v12 && v14 - (_BYTE *)p_str != -1)
            {
              std::string::basic_string(&v21, &__str, 0, v14 - (_BYTE *)p_str, (std::allocator<char> *)&v23);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              __str = v21;
              v7 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
              size = v21.__r_.__value_.__l.__size_;
              v8 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
            }
            break;
          }
          v13 = (std::string *)(v14 + 1);
          v10 = v12 - (_BYTE *)v13;
        }
        while (v12 - (_BYTE *)v13 >= 1);
      }
      if ((v8 & 0x80u) != 0)
        v7 = size;
      sub_100259584((uint64_t)&v21, v7 + 1);
      if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v15 = &v21;
      else
        v15 = (std::string *)v21.__r_.__value_.__r.__words[0];
      if (v7)
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v16 = &__str;
        else
          v16 = (std::string *)__str.__r_.__value_.__r.__words[0];
        memmove(v15, v16, v7);
      }
      *(_WORD *)((char *)&v15->__r_.__value_.__l.__data_ + v7) = 10;
      if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = &v21;
      else
        v17 = (std::string *)v21.__r_.__value_.__r.__words[0];
      if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v18 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
      else
        v18 = v21.__r_.__value_.__l.__size_;
      std::string::append((std::string *)(a1 + 8), (const std::string::value_type *)v17, v18);
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v21.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  std::filebuf::~filebuf(v25);
  std::ios::~ios(&v26);
  return v19;
}

void sub_1008376FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23)
{
  sub_100838B94(&a23);
  _Unwind_Resume(a1);
}

uint64_t sub_100837764(uint64_t a1, const std::string::value_type *a2, char a3)
{
  *(_BYTE *)(a1 + 32) = a3;
  std::string::assign((std::string *)(a1 + 8), a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
}

uint64_t sub_100837798(uint64_t a1)
{
  int v2;
  _QWORD *v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  const std::locale::facet *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  void **v12;
  uint64_t *v13;
  unint64_t v14;
  _BOOL4 v15;
  uint64_t *v16;
  uint64_t **v17;
  uint64_t **v18;
  void **v19;
  uint64_t *v20;
  unint64_t v21;
  _BOOL4 v22;
  uint64_t *v23;
  uint64_t **v24;
  uint64_t **v25;
  void **v26;
  uint64_t *v27;
  unint64_t v28;
  _BOOL4 v29;
  uint64_t *v30;
  uint64_t **v31;
  uint64_t **v32;
  void **v33;
  uint64_t *v34;
  unint64_t v35;
  _BOOL4 v36;
  uint64_t *v37;
  uint64_t **v38;
  uint64_t **v39;
  void **v40;
  uint64_t *v41;
  unint64_t v42;
  _BOOL4 v43;
  uint64_t *v44;
  uint64_t **v45;
  uint64_t **v46;
  void **v47;
  uint64_t *v48;
  unint64_t v49;
  _BOOL4 v50;
  uint64_t *v51;
  uint64_t **v52;
  uint64_t **v53;
  void **v54;
  uint64_t *v55;
  uint64_t **v56;
  unint64_t v57;
  _BOOL4 v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t **v61;
  void **v62;
  uint64_t *v63;
  uint64_t **v64;
  unint64_t v65;
  _BOOL4 v66;
  uint64_t *v67;
  uint64_t *v68;
  int v69;
  char *v70;
  char *locale;
  BOOL v72;
  int *v75;
  int v79;
  int v80;
  char v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  unsigned int v89;
  void *v91[2];
  char v92;
  void *v93[2];
  char v94;
  void *v95[2];
  char v96;
  void *v97[2];
  char v98;
  void *v99[2];
  char v100;
  void *v101[2];
  char v102;
  void *v103[2];
  char v104;
  unsigned __int8 v105;
  void *__p[2];
  char v107;
  std::locale v108[2];
  __int128 v109;
  __int128 v110;
  uint64_t v111;

  if ((sub_100838BEC(a1, (std::string *)(a1 + 40), "input_locationd_data_file", "") & 1) == 0)
  {
    v7 = sub_100263F7C(&std::cout, (uint64_t)"Invalid input_locationd_data_file", 33);
    std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(_QWORD *)(*v7 - 24)));
    v8 = std::locale::use_facet(v108, &std::ctype<char>::id);
    v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
    std::locale::~locale(v108);
    std::ostream::put(v7, v9);
    std::ostream::flush(v7);
    v10 = 0;
    *(_BYTE *)(a1 + 296) = 0;
    return v10;
  }
  v2 = sub_100839624(a1, (_QWORD *)(a1 + 232), "vertical_process_noise_sigma_mps2");
  if ((v2 & 1) == 0)
    *(_QWORD *)(a1 + 232) = 0x3FB999999999999ALL;
  v108[0].__locale_ = 0;
  v108[1].__locale_ = 0;
  DWORD2(v109) = 0;
  *(_QWORD *)&v109 = 0;
  if (sub_100838C80(a1, v108, 7, "desired_lag_per_environment_array") != -1)
  {
    v3 = *(_QWORD **)(a1 + 152);
    if (v3 == (_QWORD *)(a1 + 160))
      goto LABEL_16;
    while (1)
    {
      v4 = *((unsigned __int8 *)v3 + 28);
      if (v4 > 6)
        break;
      *((_DWORD *)v3 + 8) = *((_DWORD *)&v108[0].__locale_ + v4);
      v5 = (_QWORD *)v3[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v3[2];
          v72 = *v6 == (_QWORD)v3;
          v3 = v6;
        }
        while (!v72);
      }
      v3 = v6;
      if (v6 == (_QWORD *)(a1 + 160))
        goto LABEL_16;
    }
  }
  v2 = 0;
LABEL_16:
  sub_1015A2E04(__p, "horizontal_process_noise_sigma_mps2_unknown");
  v105 = 0;
  v108[0].__locale_ = (std::locale::__imp *)&v105;
  v11 = sub_10083AF14((uint64_t **)(a1 + 200), &v105, (uint64_t)&unk_101B9EB60, v108);
  v111 = 0;
  v109 = 0u;
  v110 = 0u;
  *(_OWORD *)&v108[0].__locale_ = 0u;
  if (v107 >= 0)
    v12 = __p;
  else
    v12 = (void **)__p[0];
  if (sub_10083A7EC(a1, (uint64_t)v108, 7, (const std::string::value_type *)v12) == -1)
  {
    v15 = 0;
  }
  else
  {
    v13 = v11[5];
    if (v13 == (uint64_t *)(v11 + 6))
    {
      v15 = 1;
    }
    else
    {
      do
      {
        v14 = *((unsigned __int8 *)v13 + 32);
        v15 = v14 < 7;
        if (v14 > 6)
          break;
        v13[5] = (uint64_t)v108[v14].__locale_;
        v16 = (uint64_t *)v13[1];
        if (v16)
        {
          do
          {
            v17 = (uint64_t **)v16;
            v16 = (uint64_t *)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            v17 = (uint64_t **)v13[2];
            v72 = *v17 == v13;
            v13 = (uint64_t *)v17;
          }
          while (!v72);
        }
        v13 = (uint64_t *)v17;
      }
      while (v17 != v11 + 6);
    }
  }
  if (v107 < 0)
    operator delete(__p[0]);
  sub_1015A2E04(v103, "horizontal_process_noise_sigma_mps2_walking");
  v105 = 1;
  v108[0].__locale_ = (std::locale::__imp *)&v105;
  v18 = sub_10083AF14((uint64_t **)(a1 + 200), &v105, (uint64_t)&unk_101B9EB60, v108);
  v111 = 0;
  v109 = 0u;
  v110 = 0u;
  *(_OWORD *)&v108[0].__locale_ = 0u;
  if (v104 >= 0)
    v19 = v103;
  else
    v19 = (void **)v103[0];
  if (sub_10083A7EC(a1, (uint64_t)v108, 7, (const std::string::value_type *)v19) == -1)
  {
    v22 = 0;
  }
  else
  {
    v20 = v18[5];
    if (v20 == (uint64_t *)(v18 + 6))
    {
      v22 = 1;
    }
    else
    {
      do
      {
        v21 = *((unsigned __int8 *)v20 + 32);
        v22 = v21 < 7;
        if (v21 > 6)
          break;
        v20[5] = (uint64_t)v108[v21].__locale_;
        v23 = (uint64_t *)v20[1];
        if (v23)
        {
          do
          {
            v24 = (uint64_t **)v23;
            v23 = (uint64_t *)*v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            v24 = (uint64_t **)v20[2];
            v72 = *v24 == v20;
            v20 = (uint64_t *)v24;
          }
          while (!v72);
        }
        v20 = (uint64_t *)v24;
      }
      while (v24 != v18 + 6);
    }
  }
  if (v104 < 0)
    operator delete(v103[0]);
  sub_1015A2E04(v101, "horizontal_process_noise_sigma_mps2_running");
  v105 = 2;
  v108[0].__locale_ = (std::locale::__imp *)&v105;
  v25 = sub_10083AF14((uint64_t **)(a1 + 200), &v105, (uint64_t)&unk_101B9EB60, v108);
  v111 = 0;
  v109 = 0u;
  v110 = 0u;
  *(_OWORD *)&v108[0].__locale_ = 0u;
  if (v102 >= 0)
    v26 = v101;
  else
    v26 = (void **)v101[0];
  if (sub_10083A7EC(a1, (uint64_t)v108, 7, (const std::string::value_type *)v26) == -1)
  {
    v29 = 0;
  }
  else
  {
    v27 = v25[5];
    if (v27 == (uint64_t *)(v25 + 6))
    {
      v29 = 1;
    }
    else
    {
      do
      {
        v28 = *((unsigned __int8 *)v27 + 32);
        v29 = v28 < 7;
        if (v28 > 6)
          break;
        v27[5] = (uint64_t)v108[v28].__locale_;
        v30 = (uint64_t *)v27[1];
        if (v30)
        {
          do
          {
            v31 = (uint64_t **)v30;
            v30 = (uint64_t *)*v30;
          }
          while (v30);
        }
        else
        {
          do
          {
            v31 = (uint64_t **)v27[2];
            v72 = *v31 == v27;
            v27 = (uint64_t *)v31;
          }
          while (!v72);
        }
        v27 = (uint64_t *)v31;
      }
      while (v31 != v25 + 6);
    }
  }
  if (v102 < 0)
    operator delete(v101[0]);
  sub_1015A2E04(v99, "horizontal_process_noise_sigma_mps2_cycling");
  v105 = 3;
  v108[0].__locale_ = (std::locale::__imp *)&v105;
  v32 = sub_10083AF14((uint64_t **)(a1 + 200), &v105, (uint64_t)&unk_101B9EB60, v108);
  v111 = 0;
  v109 = 0u;
  v110 = 0u;
  *(_OWORD *)&v108[0].__locale_ = 0u;
  if (v100 >= 0)
    v33 = v99;
  else
    v33 = (void **)v99[0];
  if (sub_10083A7EC(a1, (uint64_t)v108, 7, (const std::string::value_type *)v33) == -1)
  {
    v36 = 0;
  }
  else
  {
    v34 = v32[5];
    if (v34 == (uint64_t *)(v32 + 6))
    {
      v36 = 1;
    }
    else
    {
      do
      {
        v35 = *((unsigned __int8 *)v34 + 32);
        v36 = v35 < 7;
        if (v35 > 6)
          break;
        v34[5] = (uint64_t)v108[v35].__locale_;
        v37 = (uint64_t *)v34[1];
        if (v37)
        {
          do
          {
            v38 = (uint64_t **)v37;
            v37 = (uint64_t *)*v37;
          }
          while (v37);
        }
        else
        {
          do
          {
            v38 = (uint64_t **)v34[2];
            v72 = *v38 == v34;
            v34 = (uint64_t *)v38;
          }
          while (!v72);
        }
        v34 = (uint64_t *)v38;
      }
      while (v38 != v32 + 6);
    }
  }
  if (v100 < 0)
    operator delete(v99[0]);
  sub_1015A2E04(v97, "horizontal_process_noise_sigma_mps2_swimming");
  v105 = 4;
  v108[0].__locale_ = (std::locale::__imp *)&v105;
  v39 = sub_10083AF14((uint64_t **)(a1 + 200), &v105, (uint64_t)&unk_101B9EB60, v108);
  v111 = 0;
  v109 = 0u;
  v110 = 0u;
  *(_OWORD *)&v108[0].__locale_ = 0u;
  if (v98 >= 0)
    v40 = v97;
  else
    v40 = (void **)v97[0];
  if (sub_10083A7EC(a1, (uint64_t)v108, 7, (const std::string::value_type *)v40) == -1)
  {
    v43 = 0;
  }
  else
  {
    v41 = v39[5];
    if (v41 == (uint64_t *)(v39 + 6))
    {
      v43 = 1;
    }
    else
    {
      do
      {
        v42 = *((unsigned __int8 *)v41 + 32);
        v43 = v42 < 7;
        if (v42 > 6)
          break;
        v41[5] = (uint64_t)v108[v42].__locale_;
        v44 = (uint64_t *)v41[1];
        if (v44)
        {
          do
          {
            v45 = (uint64_t **)v44;
            v44 = (uint64_t *)*v44;
          }
          while (v44);
        }
        else
        {
          do
          {
            v45 = (uint64_t **)v41[2];
            v72 = *v45 == v41;
            v41 = (uint64_t *)v45;
          }
          while (!v72);
        }
        v41 = (uint64_t *)v45;
      }
      while (v45 != v39 + 6);
    }
  }
  if (v98 < 0)
    operator delete(v97[0]);
  sub_1015A2E04(v95, "horizontal_process_noise_sigma_mps2_golfing");
  v105 = 5;
  v108[0].__locale_ = (std::locale::__imp *)&v105;
  v46 = sub_10083AF14((uint64_t **)(a1 + 200), &v105, (uint64_t)&unk_101B9EB60, v108);
  v111 = 0;
  v109 = 0u;
  v110 = 0u;
  *(_OWORD *)&v108[0].__locale_ = 0u;
  if (v96 >= 0)
    v47 = v95;
  else
    v47 = (void **)v95[0];
  if (sub_10083A7EC(a1, (uint64_t)v108, 7, (const std::string::value_type *)v47) == -1)
  {
    v50 = 0;
  }
  else
  {
    v48 = v46[5];
    if (v48 == (uint64_t *)(v46 + 6))
    {
      v50 = 1;
    }
    else
    {
      do
      {
        v49 = *((unsigned __int8 *)v48 + 32);
        v50 = v49 < 7;
        if (v49 > 6)
          break;
        v48[5] = (uint64_t)v108[v49].__locale_;
        v51 = (uint64_t *)v48[1];
        if (v51)
        {
          do
          {
            v52 = (uint64_t **)v51;
            v51 = (uint64_t *)*v51;
          }
          while (v51);
        }
        else
        {
          do
          {
            v52 = (uint64_t **)v48[2];
            v72 = *v52 == v48;
            v48 = (uint64_t *)v52;
          }
          while (!v72);
        }
        v48 = (uint64_t *)v52;
      }
      while (v52 != v46 + 6);
    }
  }
  if (v96 < 0)
    operator delete(v95[0]);
  sub_1015A2E04(v93, "horizontal_process_noise_sigma_mps2_downhillskiing");
  v105 = 6;
  v108[0].__locale_ = (std::locale::__imp *)&v105;
  v53 = sub_10083AF14((uint64_t **)(a1 + 200), &v105, (uint64_t)&unk_101B9EB60, v108);
  v111 = 0;
  v109 = 0u;
  v110 = 0u;
  *(_OWORD *)&v108[0].__locale_ = 0u;
  if (v94 >= 0)
    v54 = v93;
  else
    v54 = (void **)v93[0];
  if (sub_10083A7EC(a1, (uint64_t)v108, 7, (const std::string::value_type *)v54) == -1)
  {
    v58 = 0;
  }
  else
  {
    v55 = v53[5];
    v56 = v53 + 6;
    if (v55 == (uint64_t *)(v53 + 6))
    {
      v58 = 1;
    }
    else
    {
      do
      {
        v57 = *((unsigned __int8 *)v55 + 32);
        v58 = v57 < 7;
        if (v57 > 6)
          break;
        v55[5] = (uint64_t)v108[v57].__locale_;
        v59 = (uint64_t *)v55[1];
        if (v59)
        {
          do
          {
            v60 = v59;
            v59 = (uint64_t *)*v59;
          }
          while (v59);
        }
        else
        {
          do
          {
            v60 = (uint64_t *)v55[2];
            v72 = *v60 == (_QWORD)v55;
            v55 = v60;
          }
          while (!v72);
        }
        v55 = v60;
      }
      while (v60 != (uint64_t *)v56);
    }
  }
  if (v94 < 0)
    operator delete(v93[0]);
  sub_1015A2E04(v91, "horizontal_process_noise_sigma_mps2_outdoorwheelchair");
  v105 = 7;
  v108[0].__locale_ = (std::locale::__imp *)&v105;
  v61 = sub_10083AF14((uint64_t **)(a1 + 200), &v105, (uint64_t)&unk_101B9EB60, v108);
  v111 = 0;
  v109 = 0u;
  v110 = 0u;
  *(_OWORD *)&v108[0].__locale_ = 0u;
  if (v92 >= 0)
    v62 = v91;
  else
    v62 = (void **)v91[0];
  if (sub_10083A7EC(a1, (uint64_t)v108, 7, (const std::string::value_type *)v62) == -1)
  {
    v66 = 0;
  }
  else
  {
    v63 = v61[5];
    v64 = v61 + 6;
    if (v63 == (uint64_t *)(v61 + 6))
    {
      v66 = 1;
    }
    else
    {
      do
      {
        v65 = *((unsigned __int8 *)v63 + 32);
        v66 = v65 < 7;
        if (v65 > 6)
          break;
        v63[5] = (uint64_t)v108[v65].__locale_;
        v67 = (uint64_t *)v63[1];
        if (v67)
        {
          do
          {
            v68 = v67;
            v67 = (uint64_t *)*v67;
          }
          while (v67);
        }
        else
        {
          do
          {
            v68 = (uint64_t *)v63[2];
            v72 = *v68 == (_QWORD)v63;
            v63 = v68;
          }
          while (!v72);
        }
        v63 = v68;
      }
      while (v68 != (uint64_t *)v64);
    }
  }
  if (v92 < 0)
    operator delete(v91[0]);
  v108[0].__locale_ = 0;
  v108[1].__locale_ = 0;
  *(_QWORD *)&v109 = 0;
  if ((v2 & v15 & v22 & v29 & v36 & v43 & v50 & v58 & v66 & sub_100838BEC(a1, (std::string *)v108, "workout_type", "")) != 1)goto LABEL_205;
  v69 = BYTE7(v109);
  if ((SBYTE7(v109) & 0x80u) == 0)
    v70 = (char *)v108 + BYTE7(v109);
  else
    v70 = (char *)v108[0].__locale_ + (unint64_t)v108[1].__locale_;
  if ((SBYTE7(v109) & 0x80u) == 0)
    locale = (char *)v108;
  else
    locale = (char *)v108[0].__locale_;
  if (locale != v70)
  {
    do
    {
      *locale = __tolower(*locale);
      ++locale;
    }
    while (locale != v70);
    v69 = BYTE7(v109);
  }
  if ((v69 & 0x80) != 0)
  {
    if (v108[1].__locale_ == (std::locale::__imp *)7)
    {
      v75 = (int *)v108[0].__locale_;
      if (*(_DWORD *)v108[0].__locale_ != 1852534389 || *(_DWORD *)((char *)v108[0].__locale_ + 3) != 1853321070)
      {
        if (*(_DWORD *)v108[0].__locale_ != 1802264951 || *(_DWORD *)((char *)v108[0].__locale_ + 3) != 1735289195)
        {
          if (*(_DWORD *)v108[0].__locale_ != 1852732786 || *(_DWORD *)((char *)v108[0].__locale_ + 3) != 1735289198)
          {
LABEL_190:
            v79 = *v75;
            v80 = *(int *)((char *)v75 + 3);
            if (v79 == 1818458467 && v80 == 1735289196)
            {
              v82 = 3;
              goto LABEL_207;
            }
            goto LABEL_194;
          }
LABEL_202:
          v82 = 2;
          goto LABEL_207;
        }
LABEL_201:
        v82 = 1;
        goto LABEL_207;
      }
LABEL_198:
      v82 = 0;
      goto LABEL_207;
    }
  }
  else if (v69 == 7)
  {
    v72 = LODWORD(v108[0].__locale_) == 1852534389 && *(_DWORD *)((char *)&v108[0].__locale_ + 3) == 1853321070;
    if (!v72)
    {
      if (LODWORD(v108[0].__locale_) != 1802264951 || *(_DWORD *)((char *)&v108[0].__locale_ + 3) != 1735289195)
      {
        if (LODWORD(v108[0].__locale_) != 1852732786 || *(_DWORD *)((char *)&v108[0].__locale_ + 3) != 1735289198)
        {
          v75 = (int *)v108;
          goto LABEL_190;
        }
        goto LABEL_202;
      }
      goto LABEL_201;
    }
    goto LABEL_198;
  }
LABEL_194:
  if (sub_100839084(v108, "swimming"))
  {
    v82 = 4;
LABEL_207:
    *(_BYTE *)(a1 + 224) = v82;
    v83 = 1;
    goto LABEL_208;
  }
  if (sub_100839084(v108, "golfing"))
  {
    v82 = 5;
    goto LABEL_207;
  }
  if (sub_100839084(v108, "downhillskiing"))
  {
    v82 = 6;
    goto LABEL_207;
  }
  if (sub_100839084(v108, "outdoorwheelchair"))
  {
    v82 = 7;
    goto LABEL_207;
  }
LABEL_205:
  v83 = 0;
LABEL_208:
  v84 = sub_100839624(a1, (_QWORD *)(a1 + 240), "velocity_uncertainty_scale_factor");
  if ((v84 & 1) == 0)
    *(_QWORD *)(a1 + 240) = 0x3FF0000000000000;
  v85 = sub_100839624(a1, (_QWORD *)(a1 + 248), "vertical_speed_limit_mps");
  if ((v85 & 1) == 0)
    *(_QWORD *)(a1 + 248) = 0x4049000000000000;
  v86 = sub_100839624(a1, (_QWORD *)(a1 + 256), "minimum_driving_speed_that_requires_speed_uncertainty_floor_mps");
  if ((v86 & 1) == 0)
    *(_QWORD *)(a1 + 256) = 0x4024000000000000;
  v87 = sub_100839624(a1, (_QWORD *)(a1 + 264), "minimum_driving_speed_uncertainty_mps");
  if ((v87 & 1) == 0)
    *(_QWORD *)(a1 + 264) = 0x4006A09E667F3BCCLL;
  v88 = sub_100839624(a1, (_QWORD *)(a1 + 280), "speed_uncertainty_threshold_multiplier");
  if ((v88 & 1) == 0)
    *(_QWORD *)(a1 + 280) = 0x4000000000000000;
  v89 = sub_100839624(a1, (_QWORD *)(a1 + 288), "course_uncertainty_threshold_rad");
  if ((v89 & 1) == 0)
    *(_QWORD *)(a1 + 288) = 0x3FF921FF2E48E8A7;
  v10 = v83 & v84 & v85 & v86 & v87 & v88 & v89;
  *(_BYTE *)(a1 + 296) = v10;
  if (SBYTE7(v109) < 0)
    operator delete(v108[0].__locale_);
  return v10;
}

void sub_1008384E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1008385B8(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_10083860C(a1, *(unsigned __int8 **)a2, (unsigned __int8 *)(a2 + 8));
  return a1;
}

void sub_1008385F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100008848(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_10083860C(uint64_t *result, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v4;
  uint64_t **v5;
  uint64_t *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_100838690(v5, v6, v4 + 32, (_OWORD *)v4 + 2);
      v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(unsigned __int8 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (unsigned __int8 *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_100838690(uint64_t **a1, uint64_t *a2, unsigned __int8 *a3, _OWORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = sub_100838714(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    sub_1000145B0(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_100838714(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned __int8 *a5)
{
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((unsigned __int8 *)a2 + 32), v6 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((unsigned __int8 *)v10 + 32) < v15)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(unsigned __int8 *)(v16 + 32);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((unsigned __int8 *)a4 + 32))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(unsigned __int8 *)(v20 + 32);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t sub_1008388BC(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 32 * a3;
    do
    {
      sub_100838938((uint64_t **)a1, v4, a2, a2);
      a2 += 32;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_100838920(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10007CDDC(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100838938(uint64_t **a1, uint64_t *a2, unsigned __int8 *a3, _BYTE *a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  v6 = (uint64_t **)sub_100838714(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    sub_1008389B8((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000145B0(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *sub_1008389B8@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t *result;

  v5 = a1 + 8;
  v6 = operator new(0x40uLL);
  *(_QWORD *)(a3 + 8) = v5;
  *(_QWORD *)a3 = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *((_BYTE *)v6 + 32) = *a2;
  result = sub_1008385B8((uint64_t *)v6 + 5, (uint64_t)(a2 + 8));
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_100838A24(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD **v2;
  uint64_t v3;

  *v1 = 0;
  sub_100838A40(v3, v2);
  _Unwind_Resume(a1);
}

void sub_100838A40(uint64_t a1, _QWORD **a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    sub_100008848((uint64_t)(a2 + 5), a2[6]);
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

void (__cdecl ***sub_100838A88(void (__cdecl ***a1)(std::ifstream *__hidden this), uint64_t a2, int a3))(std::ifstream *__hidden this)
{
  _QWORD *v6;
  void (__cdecl **v7)(std::ifstream *__hidden);
  void (__cdecl **v8)(std::ifstream *__hidden);
  std::ios_base *v9;

  v6 = a1 + 2;
  *a1 = v7;
  *(_QWORD *)((char *)*(v7 - 3) + (_QWORD)a1) = v8;
  a1[1] = 0;
  v9 = (std::ios_base *)((char *)*(*a1 - 3) + (_QWORD)a1);
  std::ios_base::init(v9, a1 + 2);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf(v6);
  if (!std::filebuf::open(v6, a2, a3 | 8u))
    std::ios_base::clear((std::ios_base *)((char *)*(*a1 - 3) + (_QWORD)a1), *(_DWORD *)((char *)*(*a1 - 3) + (_QWORD)a1 + 32) | 4);
  return a1;
}

void sub_100838B5C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::istream::~istream(v1, v2 + 8);
  std::ios::~ios(v1 + 424);
  _Unwind_Resume(a1);
}

_QWORD *sub_100838B94(_QWORD *a1)
{
  uint64_t v2;

  std::filebuf::~filebuf(a1 + 2);
  std::ios::~ios(a1 + 53);
  return a1;
}

uint64_t sub_100838BEC(uint64_t a1, std::string *a2, const std::string::value_type *a3, char *__s)
{
  uint64_t v7;
  std::string __str;

  sub_1015A2E04(&__str, __s);
  v7 = sub_100839114(a1, (uint64_t)a2, a3);
  if ((v7 & 1) == 0)
    std::string::operator=(a2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return v7;
}

void sub_100838C64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100838C80(uint64_t a1, _DWORD *a2, int a3, const std::string::value_type *a4)
{
  uint64_t i;
  BOOL v8;
  BOOL v9;
  char *v10;
  char v12;
  __int16 v13;
  std::string v14;
  void *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  void *__p;
  char v21;
  void *v22[2];
  char v23;
  void *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  void **v29;
  char v30;
  _BYTE v31[16];
  void *v32;
  char v33;
  void *v34;
  char v35;
  __int128 v36;
  char v37;
  void *v38;
  char v39;
  void *v40[2];
  char v41;
  char __s[256];

  if (!sub_100839194(a1, __s, a4, ""))
  {
    if (*(_BYTE *)(a1 + 32))
    {
      LOWORD(v22[0]) = 0;
      v14.__r_.__value_.__s.__data_[0] = 2;
      cnprint::CNPrinter::Print(v22, &v14);
    }
    return 0xFFFFFFFFLL;
  }
  sub_1015A2E04(v40, __s);
  sub_100839E70((uint64_t)&v36, " ,;", 0, 0);
  sub_100839F04((uint64_t)v31, (uint64_t *)v40, &v36);
  sub_100839B44((uint64_t)v31, (char *)v22);
  for (i = 0; ; ++i)
  {
    sub_100839C34((uint64_t)v31, (char *)&v14);
    if (v19 && v28)
    {
      if (v17 != v26)
      {
        v8 = 0;
        goto LABEL_11;
      }
      v9 = v18 == v27;
    }
    else
    {
      v9 = v19 == v28;
    }
    v8 = v9;
LABEL_11:
    if (v21 < 0)
      operator delete(__p);
    if (v16 < 0)
      operator delete(v15);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
    if (v8)
      goto LABEL_36;
    if ((a3 & ~(a3 >> 31)) == i)
    {
      LOWORD(v14.__r_.__value_.__l.__data_) = 0;
      LOBYTE(v13) = 4;
      cnprint::CNPrinter::Print(&v14, &v13);
      goto LABEL_35;
    }
    if (!v28)
      __assert_rtn("dereference", "token_iterator.hpp", 59, "valid_");
    v10 = v30 >= 0 ? (char *)&v29 : (char *)v29;
    if ((sub_100839D78(a1, a2, v10) & 1) == 0)
      break;
    if (*(_BYTE *)(a1 + 32))
    {
      v13 = 0;
      v12 = 2;
      std::to_string(&v14, a2[1]);
      cnprint::CNPrinter::Print(&v13, &v12);
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v14.__r_.__value_.__l.__data_);
    }
    ++a2;
    sub_10083A7B0((uint64_t)v22);
  }
  LOWORD(v14.__r_.__value_.__l.__data_) = 0;
  LOBYTE(v13) = 4;
  if (!v28)
    __assert_rtn("dereference", "token_iterator.hpp", 59, "valid_");
  cnprint::CNPrinter::Print(&v14, &v13);
LABEL_35:
  i = 0xFFFFFFFFLL;
LABEL_36:
  if (v30 < 0)
    operator delete(v29);
  if (v25 < 0)
    operator delete(v24);
  if (v23 < 0)
    operator delete(v22[0]);
  if (v35 < 0)
    operator delete(v34);
  if (v33 < 0)
    operator delete(v32);
  if (v39 < 0)
    operator delete(v38);
  if (v37 < 0)
    operator delete((void *)v36);
  if (v41 < 0)
    operator delete(v40[0]);
  return i;
}

void sub_100839004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,int a62,__int16 a63)
{
  char a65;
  uint64_t v65;

  sub_100839D28((uint64_t)&a28);
  sub_10058D200((uint64_t)&a42);
  sub_1002FDAA0((uint64_t)&a52);
  if (a65 < 0)
    operator delete(*(void **)(v65 + 256));
  _Unwind_Resume(a1);
}

BOOL sub_100839084(_QWORD *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1)
        goto LABEL_10;
      a1 = (_QWORD *)*a1;
      return memcmp(a1, __s, v4) == 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1)
LABEL_10:
      sub_10035AD9C();
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

uint64_t sub_100839114(uint64_t a1, uint64_t a2, const std::string::value_type *a3)
{
  int v4;
  uint64_t result;
  std::string::value_type __s[256];

  v4 = a1;
  result = sub_100839194(a1, __s, a3, "");
  if ((_DWORD)result)
    return sub_100839564(v4, a2, __s);
  return result;
}

uint64_t sub_100839194(uint64_t a1, char *__dst, const std::string::value_type *a3, char *__src)
{
  const char *v4;
  std::string *v8;
  std::string *v9;
  std::string::size_type v10;
  char *v11;
  uint64_t v12;
  int v13;
  std::string *v14;
  int64_t size;
  std::string *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int v20;
  void *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  int v25;
  std::string *v26;
  int64_t v27;
  char v28;
  char *v29;
  int v30;
  void *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  int64_t v35;
  std::string::size_type v36;
  std::string::size_type v37;
  uint64_t i;
  std::string::size_type v39;
  std::string::value_type *__s;
  char v43;
  __int16 v44;
  std::string v45;

  v4 = __src;
  if (*(char *)(a1 + 31) < 0)
  {
    if (!*(_QWORD *)(a1 + 16))
      goto LABEL_71;
  }
  else if (!*(_BYTE *)(a1 + 31))
  {
    goto LABEL_71;
  }
  sub_1015A2E04(&v45, "\n");
  v8 = std::string::append(&v45, a3);
  v9 = std::string::append(v8, ":");
  v10 = *(unsigned __int8 *)(a1 + 31);
  __s = (std::string::value_type *)a3;
  if (*(char *)(a1 + 31) < 0)
  {
    v11 = *(char **)(a1 + 8);
    v12 = *(_QWORD *)(a1 + 16);
  }
  else
  {
    v11 = (char *)(a1 + 8);
    v12 = *(unsigned __int8 *)(a1 + 31);
  }
  v13 = SHIBYTE(v9->__r_.__value_.__r.__words[2]);
  if (v13 >= 0)
    v14 = v9;
  else
    v14 = (std::string *)v9->__r_.__value_.__r.__words[0];
  if (v13 >= 0)
    size = HIBYTE(v9->__r_.__value_.__r.__words[2]);
  else
    size = v9->__r_.__value_.__l.__size_;
  if (!size)
    goto LABEL_45;
  if (v12 >= size)
  {
    v19 = &v11[v12];
    v20 = v14->__r_.__value_.__s.__data_[0];
    v21 = v11;
    do
    {
      v22 = v12 - size;
      if (v22 == -1)
        break;
      v23 = (char *)memchr(v21, v20, v22 + 1);
      if (!v23)
        break;
      v24 = v23;
      if (!memcmp(v23, v14, size))
      {
        if (v24 != v19)
        {
          v35 = v24 - v11;
          if (v24 - v11 != -1)
            goto LABEL_46;
        }
        break;
      }
      v21 = v24 + 1;
      v12 = v19 - (v24 + 1);
    }
    while (v12 >= size);
  }
  std::string::assign(&v45, __s);
  v16 = std::string::append(&v45, ":");
  v10 = *(unsigned __int8 *)(a1 + 31);
  if (*(char *)(a1 + 31) < 0)
  {
    v17 = *(char **)(a1 + 8);
    v18 = *(_QWORD *)(a1 + 16);
  }
  else
  {
    v17 = (char *)(a1 + 8);
    v18 = *(unsigned __int8 *)(a1 + 31);
  }
  v25 = SHIBYTE(v16->__r_.__value_.__r.__words[2]);
  v26 = v25 >= 0 ? v16 : (std::string *)v16->__r_.__value_.__r.__words[0];
  v27 = v25 >= 0 ? HIBYTE(v16->__r_.__value_.__r.__words[2]) : v16->__r_.__value_.__l.__size_;
  if (v27)
  {
    if (v18 >= v27)
    {
      v29 = &v17[v18];
      v30 = v26->__r_.__value_.__s.__data_[0];
      v31 = v17;
      do
      {
        v32 = v18 - v27;
        if (v32 == -1)
          break;
        v33 = (char *)memchr(v31, v30, v32 + 1);
        if (!v33)
          break;
        v34 = v33;
        if (!memcmp(v33, v26, v27))
        {
          v28 = 1;
          if (v34 == v29 || v34 != v17)
            goto LABEL_68;
          goto LABEL_45;
        }
        v31 = v34 + 1;
        v18 = v29 - (v34 + 1);
      }
      while (v18 >= v27);
    }
    v28 = 1;
  }
  else
  {
LABEL_45:
    v35 = 0;
LABEL_46:
    v36 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v36 = v45.__r_.__value_.__l.__size_;
    v37 = v36 + v35;
    if ((v10 & 0x80) != 0)
LABEL_54:
      v10 = *(_QWORD *)(a1 + 16);
    while (v37 < v10
         && (*std::string::at((std::string *)(a1 + 8), v37) == 58
          || *std::string::at((std::string *)(a1 + 8), v37) == 32
          || *std::string::at((std::string *)(a1 + 8), v37) == 9))
    {
      ++v37;
      v10 = *(unsigned __int8 *)(a1 + 31);
      if ((v10 & 0x80) != 0)
        goto LABEL_54;
    }
    for (i = 0; i != 255; ++i)
    {
      if (*(char *)(a1 + 31) < 0)
        v39 = *(_QWORD *)(a1 + 16);
      else
        v39 = *(unsigned __int8 *)(a1 + 31);
      if (v37 + i >= v39)
        break;
      if (*std::string::at((std::string *)(a1 + 8), v37 + i) == 10)
        break;
      if (*std::string::at((std::string *)(a1 + 8), v37 + i) == 13)
        break;
      __dst[i] = *std::string::at((std::string *)(a1 + 8), v37 + i);
    }
    __dst[i] = 0;
    if (*(_BYTE *)(a1 + 32))
    {
      v44 = 0;
      v43 = 2;
      cnprint::CNPrinter::Print(&v44, &v43);
    }
    v28 = 0;
  }
LABEL_68:
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  v4 = __src;
  if ((v28 & 1) == 0)
    return 1;
LABEL_71:
  strncpy(__dst, v4, 0x100uLL);
  if (*(_BYTE *)(a1 + 32))
  {
    LOWORD(v45.__r_.__value_.__l.__data_) = 0;
    LOBYTE(v44) = 2;
    cnprint::CNPrinter::Print(&v45, &v44);
  }
  return 0;
}

void sub_10083953C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100839564(int a1, uint64_t a2, std::string::value_type *__s)
{
  std::string v5;

  memset(&v5, 0, sizeof(v5));
  std::string::assign(&v5, __s);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(std::string *)a2 = v5;
  return 1;
}

void sub_1008395C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void (**__p)(std::bad_cast *__hidden this), __int128 a11)
{
  char *exception_ptr;

  if (SHIBYTE(a11) < 0)
    operator delete(__p);
  if (a2 == 1)
  {
    exception_ptr = (char *)__cxa_get_exception_ptr(exception_object);
    __p = &off_10212A508;
    a11 = *(_OWORD *)(exception_ptr + 8);
    __cxa_begin_catch(exception_object);
    std::bad_cast::~bad_cast((std::bad_cast *)&__p);
    __cxa_end_catch();
    JUMPOUT(0x1008395B0);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100839624(uint64_t a1, _QWORD *a2, const std::string::value_type *a3)
{
  int v4;
  uint64_t result;
  char __dst[256];

  v4 = a1;
  result = sub_100839194(a1, __dst, a3, "");
  if ((_DWORD)result)
    return sub_1008396A4(v4, a2, __dst);
  return result;
}

uint64_t sub_1008396A4(int a1, _QWORD *a2, char *__s)
{
  uint64_t v5;
  unsigned __int8 *v6[2];
  std::bad_cast v7;
  void *v8;
  void *v9;

  v5 = 0;
  v6[0] = (unsigned __int8 *)__s;
  v6[1] = (unsigned __int8 *)&__s[strlen(__s)];
  if ((sub_10083979C(v6, (double *)&v5) & 1) == 0)
  {
    std::bad_cast::bad_cast(&v7);
    v7.__vftable = (std::bad_cast_vtbl *)&off_10212A508;
    sub_10026A9C8((uint64_t)&v7);
  }
  *a2 = v5;
  return 1;
}

void sub_100839734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::bad_cast a12, __int128 a13)
{
  char *exception_ptr;

  std::bad_cast::~bad_cast(&a12);
  if (a2 == 1)
  {
    exception_ptr = (char *)__cxa_get_exception_ptr(a1);
    a12.__vftable = (std::bad_cast_vtbl *)&off_10212A508;
    a13 = *(_OWORD *)(exception_ptr + 8);
    __cxa_begin_catch(a1);
    std::bad_cast::~bad_cast(&a12);
    __cxa_end_catch();
    JUMPOUT(0x1008396ECLL);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10083979C(unsigned __int8 **a1, double *a2)
{
  uint64_t result;
  unsigned int v5;

  if ((sub_100839810(*a1, a1[1], a2) & 1) != 0)
    return 1;
  result = sub_1008399A8((uint64_t *)a1, (uint64_t)a2);
  if ((_DWORD)result)
  {
    v5 = *(a1[1] - 1) - 43;
    if (v5 <= 0x3A)
    {
      if (((0x400000004000005uLL >> v5) & 1) != 0)
        return 0;
      else
        return result;
    }
  }
  return result;
}

uint64_t sub_100839810(unsigned __int8 *a1, unsigned __int8 *a2, double *a3)
{
  int v3;
  BOOL v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unint64_t v8;
  BOOL v9;
  int v10;
  unsigned __int8 *v11;
  BOOL v12;
  double v13;
  double v14;
  unint64_t v15;
  BOOL v16;
  int v17;
  unint64_t v18;
  int v19;

  if (a1 == a2)
    return 0;
  v3 = *a1;
  v4 = v3 == 45 || v3 == 43;
  v5 = (uint64_t)(v4 ? a1 + 1 : a1);
  v6 = &a2[-v5];
  if ((uint64_t)&a2[-v5] < 3)
    return 0;
  v8 = 0;
  v9 = 0;
  do
  {
    v10 = *(unsigned __int8 *)(v5 + v8);
    if (v10 != aNan_0[v8] && v10 != aNan[v8])
      break;
    v9 = v8++ > 1;
  }
  while (v8 != 3);
  if (!v9)
  {
    if (v6 == (unsigned __int8 *)3)
    {
      v18 = 0;
      v16 = 0;
      do
      {
        v19 = *(unsigned __int8 *)(v5 + v18);
        if (v19 != aInfinity_0[v18] && v19 != aInfinity[v18])
          break;
        v16 = v18++ > 1;
      }
      while (v18 != 3);
    }
    else
    {
      if (v6 != (unsigned __int8 *)8)
        return 0;
      v15 = 0;
      v16 = 0;
      do
      {
        v17 = *(unsigned __int8 *)(v5 + v15);
        if (v17 != aInfinity_0[v15] && v17 != aInfinity[v15])
          break;
        v16 = v15++ > 6;
      }
      while (v15 != 8);
    }
    if (v16)
    {
      v12 = v3 == 45;
      v13 = INFINITY;
      v14 = -INFINITY;
      goto LABEL_33;
    }
    return 0;
  }
  v11 = (unsigned __int8 *)(v5 + 3);
  if (v11 != a2 && (a2 - v11 < 2 || *v11 != 40 || *(a2 - 1) != 41))
    return 0;
  v12 = v3 == 45;
  v13 = NAN;
  v14 = NAN;
LABEL_33:
  if (v12)
    v13 = v14;
  *a3 = v13;
  return 1;
}

BOOL sub_1008399A8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;
  uint64_t v7;
  _QWORD *v8;
  _BOOL8 v9;
  _QWORD v11[2];
  std::ios_base v12;
  uint64_t v13;
  int v14;
  _QWORD __sb[8];

  std::streambuf::basic_streambuf(__sb);
  v4 = *a1;
  v5 = a1[1];
  __sb[0] = &off_102155C58;
  __sb[2] = v4;
  __sb[3] = v4;
  __sb[4] = v5;
  v11[1] = 0;
  std::ios_base::init(&v12, __sb);
  v13 = 0;
  v14 = -1;
  v6->__exceptions_ = 1;
  std::ios_base::clear(v6, v6->__rdstate_);
  v7 = v11[0];
  *(_DWORD *)((char *)&v11[1] + *(_QWORD *)(v11[0] - 24)) &= ~0x1000u;
  *(_QWORD *)((char *)&v11[2] + *(_QWORD *)(v7 - 24)) = 17;
  v8 = (_QWORD *)std::istream::operator>>(v11, a2);
  v9 = (*((_BYTE *)v8 + *(_QWORD *)(*v8 - 24) + 32) & 5) == 0 && std::istream::get(v11) == -1;
  std::istream::~istream(v11);
  std::streambuf::~streambuf(__sb);
  return v9;
}

void sub_100839AD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::istream::~istream(va);
  std::streambuf::~streambuf(v2 - 96);
  _Unwind_Resume(a1);
}

void sub_100839B20(uint64_t a1)
{
  std::streambuf::~streambuf(a1);
  operator delete();
}

void sub_100839B44(uint64_t a1@<X0>, char *a2@<X8>)
{
  void *v4[2];
  uint64_t v5;
  __int128 __p;
  uint64_t v7;
  uint64_t v8;
  char v9;

  if (*(char *)(a1 + 39) < 0)
  {
    sub_100115CE4(v4, *(void **)(a1 + 16), *(_QWORD *)(a1 + 24));
  }
  else
  {
    *(_OWORD *)v4 = *(_OWORD *)(a1 + 16);
    v5 = *(_QWORD *)(a1 + 32);
  }
  if (*(char *)(a1 + 63) < 0)
  {
    sub_100115CE4(&__p, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
  }
  else
  {
    __p = *(_OWORD *)(a1 + 40);
    v7 = *(_QWORD *)(a1 + 56);
  }
  v8 = *(_QWORD *)(a1 + 64);
  v9 = *(_BYTE *)(a1 + 72);
  sub_100839FE8(a2, (__int128 *)v4, *(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  if (SHIBYTE(v7) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v5) < 0)
    operator delete(v4[0]);
}

void sub_100839C08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100839C34(uint64_t a1@<X0>, char *a2@<X8>)
{
  void *v4[2];
  uint64_t v5;
  __int128 __p;
  uint64_t v7;
  uint64_t v8;
  char v9;

  if (*(char *)(a1 + 39) < 0)
  {
    sub_100115CE4(v4, *(void **)(a1 + 16), *(_QWORD *)(a1 + 24));
  }
  else
  {
    *(_OWORD *)v4 = *(_OWORD *)(a1 + 16);
    v5 = *(_QWORD *)(a1 + 32);
  }
  if (*(char *)(a1 + 63) < 0)
  {
    sub_100115CE4(&__p, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
  }
  else
  {
    __p = *(_OWORD *)(a1 + 40);
    v7 = *(_QWORD *)(a1 + 56);
  }
  v8 = *(_QWORD *)(a1 + 64);
  v9 = *(_BYTE *)(a1 + 72);
  sub_100839FE8(a2, (__int128 *)v4, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 8));
  if (SHIBYTE(v7) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v5) < 0)
    operator delete(v4[0]);
}

void sub_100839CFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100839D28(uint64_t a1)
{
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_100839D78(int a1, _DWORD *a2, char *__s)
{
  int v5;
  unsigned __int8 *v6[2];
  std::bad_cast v7;
  void *v8;
  void *v9;

  v5 = 0;
  v6[0] = (unsigned __int8 *)__s;
  v6[1] = (unsigned __int8 *)&__s[strlen(__s)];
  if ((sub_10083A3F8(v6, &v5) & 1) == 0)
  {
    std::bad_cast::bad_cast(&v7);
    v7.__vftable = (std::bad_cast_vtbl *)&off_10212A508;
    sub_10026A9C8((uint64_t)&v7);
  }
  *a2 = v5;
  return 1;
}

void sub_100839E08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::bad_cast a12, __int128 a13)
{
  char *exception_ptr;

  std::bad_cast::~bad_cast(&a12);
  if (a2 == 1)
  {
    exception_ptr = (char *)__cxa_get_exception_ptr(a1);
    a12.__vftable = (std::bad_cast_vtbl *)&off_10212A508;
    a13 = *(_OWORD *)(exception_ptr + 8);
    __cxa_begin_catch(a1);
    std::bad_cast::~bad_cast(&a12);
    __cxa_end_catch();
    JUMPOUT(0x100839DC0);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100839E70(uint64_t a1, char *a2, const std::string::value_type *a3, int a4)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  sub_1015A2E04((_QWORD *)(a1 + 24), a2);
  *(_WORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = a4;
  *(_BYTE *)(a1 + 56) = 0;
  if (a3)
    std::string::assign((std::string *)a1, a3);
  return a1;
}

void sub_100839ED0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100839F04(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  __int128 v8;
  _BYTE *v9;
  __int128 v10;
  uint64_t v11;

  if (*((char *)a2 + 23) >= 0)
    v5 = a2;
  else
    v5 = (uint64_t *)*a2;
  *(_QWORD *)a1 = v5;
  v6 = *((unsigned __int8 *)a2 + 23);
  if ((v6 & 0x80u) == 0)
    v7 = a2;
  else
    v7 = (uint64_t *)*a2;
  if ((v6 & 0x80u) != 0)
    v6 = a2[1];
  *(_QWORD *)(a1 + 8) = (char *)v7 + v6;
  if (*((char *)a3 + 23) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 16), *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v8 = *a3;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 16) = v8;
  }
  v9 = (_BYTE *)(a1 + 40);
  if (*((char *)a3 + 47) < 0)
  {
    sub_100115CE4(v9, *((void **)a3 + 3), *((_QWORD *)a3 + 4));
  }
  else
  {
    v10 = *(__int128 *)((char *)a3 + 24);
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a3 + 5);
    *(_OWORD *)v9 = v10;
  }
  v11 = *((_QWORD *)a3 + 6);
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a3 + 56);
  *(_QWORD *)(a1 + 64) = v11;
  return a1;
}

void sub_100839FCC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

char *sub_100839FE8(char *__dst, __int128 *a2, uint64_t a3, uint64_t a4)
{
  __int128 v8;
  _BYTE *v9;
  __int128 v10;
  uint64_t v11;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v8 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v8;
  }
  v9 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_100115CE4(v9, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v10 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)__dst + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)v9 = v10;
  }
  v11 = *((_QWORD *)a2 + 6);
  __dst[56] = *((_BYTE *)a2 + 56);
  *((_QWORD *)__dst + 6) = v11;
  *((_QWORD *)__dst + 8) = a3;
  *((_QWORD *)__dst + 9) = a4;
  __dst[80] = 0;
  *((_QWORD *)__dst + 11) = 0;
  *((_QWORD *)__dst + 12) = 0;
  *((_QWORD *)__dst + 13) = 0;
  sub_10083A0D8((uint64_t)__dst);
  return __dst;
}

void sub_10083A09C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10083A0D8(uint64_t result)
{
  uint64_t v1;
  std::string::value_type *v2;

  if (!*(_BYTE *)(result + 80))
  {
    v1 = result;
    v2 = *(std::string::value_type **)(result + 72);
    if (*(std::string::value_type **)(result + 64) == v2)
      result = 0;
    else
      result = sub_10083A124(result, (std::string::value_type **)(result + 64), v2, (std::string *)(result + 88));
    *(_BYTE *)(v1 + 80) = result;
  }
  return result;
}

uint64_t sub_10083A124(uint64_t a1, std::string::value_type **a2, std::string::value_type *a3, std::string *this)
{
  std::string::value_type *v8;
  _BOOL4 v9;
  BOOL v10;
  std::string::value_type *v11;
  uint64_t v12;
  _BOOL4 v13;
  std::string::value_type *v14;

  v8 = *a2;
  if (*(_DWORD *)(a1 + 52))
    goto LABEL_2;
  if (v8 == a3)
    return 0;
  while (1)
  {
    v9 = sub_10083A304(a1, *v8);
    v8 = *a2;
    if (!v9)
      break;
    *a2 = ++v8;
    if (v8 == a3)
    {
      v8 = a3;
      break;
    }
  }
  if (*(_DWORD *)(a1 + 52))
  {
LABEL_2:
    if (v8 != a3)
    {
      if (sub_10083A380(a1, *v8))
      {
        if (*(_BYTE *)(a1 + 56))
        {
          ++*a2;
          *(_BYTE *)(a1 + 56) = 0;
LABEL_25:
          sub_10026A8FC(this, v8, *a2, *a2 - v8);
          return 1;
        }
      }
      else if (*(_BYTE *)(a1 + 56) || !sub_10083A304(a1, **a2))
      {
        v13 = sub_10083A304(a1, **a2);
        v14 = *a2;
        if (v13)
        {
          *a2 = ++v14;
          v8 = v14;
        }
        while (v14 != a3 && !sub_10083A304(a1, *v14) && !sub_10083A380(a1, **a2))
        {
          v14 = *a2 + 1;
          *a2 = v14;
        }
      }
      *(_BYTE *)(a1 + 56) = 1;
      goto LABEL_25;
    }
    if (!*(_BYTE *)(a1 + 56))
    {
      v12 = 1;
      *(_BYTE *)(a1 + 56) = 1;
      sub_10026A8FC(this, a3, a3, 0);
      return v12;
    }
  }
  else if (v8 != a3)
  {
    v10 = sub_10083A380(a1, *v8);
    v11 = *a2;
    if (v10)
    {
      *a2 = v11 + 1;
    }
    else
    {
      while (v11 != a3 && !sub_10083A304(a1, *v11) && !sub_10083A380(a1, **a2))
      {
        v11 = *a2 + 1;
        *a2 = v11;
      }
    }
    goto LABEL_25;
  }
  return 0;
}

BOOL sub_10083A304(uint64_t a1, __darwin_ct_rune_t a2)
{
  BOOL v2;
  __uint32_t v3;

  if (*(char *)(a1 + 47) < 0)
  {
    if (*(_QWORD *)(a1 + 32))
      goto LABEL_3;
  }
  else if (*(_BYTE *)(a1 + 47))
  {
LABEL_3:
    v2 = std::string::find((const std::string *)(a1 + 24), a2, 0) == -1;
    return !v2;
  }
  if (!*(_BYTE *)(a1 + 49))
    return 0;
  if (a2 < 0)
    v3 = __maskrune(a2, 0x4000uLL);
  else
    v3 = _DefaultRuneLocale.__runetype[a2] & 0x4000;
  v2 = v3 == 0;
  return !v2;
}

BOOL sub_10083A380(uint64_t a1, __darwin_ct_rune_t a2)
{
  BOOL v2;
  __uint32_t v3;

  if (*(char *)(a1 + 23) < 0)
  {
    if (*(_QWORD *)(a1 + 8))
      goto LABEL_3;
  }
  else if (*(_BYTE *)(a1 + 23))
  {
LABEL_3:
    v2 = std::string::find((const std::string *)a1, a2, 0) == -1;
    return !v2;
  }
  if (!*(_BYTE *)(a1 + 48))
    return 0;
  if (a2 < 0)
    v3 = __maskrune(a2, 0x2000uLL);
  else
    v3 = _DefaultRuneLocale.__runetype[a2] & 0x2000;
  v2 = v3 == 0;
  return !v2;
}

uint64_t sub_10083A3F8(unsigned __int8 **a1, _DWORD *a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  int v5;
  uint64_t result;
  char v7[4];
  int v8;
  _DWORD *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;

  v3 = *a1;
  v2 = a1[1];
  if (*a1 == v2)
    return 0;
  v5 = *v3;
  if (v5 == 45 || v5 == 43)
    *a1 = ++v3;
  v7[0] = 0;
  v8 = 1;
  v9 = a2;
  v10 = v3;
  v11 = v2;
  result = sub_10083A47C((uint64_t)v7);
  if (v5 == 45)
    *a2 = -*a2;
  return result;
}

uint64_t sub_10083A47C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  int v4;
  const std::locale *v6;
  const std::locale::facet *v7;
  uint64_t v8;
  char *p_p;
  char v10;
  _BYTE *v11;
  _BYTE *v12;
  unsigned __int8 v13;
  _BYTE *v14;
  char v15;
  unsigned int v16;
  BOOL v17;
  char v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  int v22;
  _DWORD *v23;
  int v24;
  _BYTE *v25;
  void *__p;
  uint64_t v28;
  unsigned __int8 v29;
  std::locale v30;

  v1 = 0;
  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v2 - 1;
  v3 = *(_DWORD **)(a1 + 8);
  *v3 = 0;
  if (*(_QWORD *)(a1 + 16) <= (unint64_t)(v2 - 1))
  {
    v4 = *(unsigned __int8 *)(v2 - 1);
    if ((v4 - 58) < 0xFFFFFFF6)
      return 0;
    *v3 = v4 - 48;
    *(_QWORD *)(a1 + 24) = v2 - 2;
    std::locale::locale(&v30);
    v6 = std::locale::classic();
    if (std::locale::operator==(&v30, v6))
    {
      v1 = sub_10083A6F4(a1);
LABEL_45:
      std::locale::~locale(&v30);
      return v1;
    }
    v7 = std::locale::use_facet(&v30, &std::numpunct<char>::id);
    ((void (*)(void **__return_ptr))v7->__vftable[1].__on_zero_shared)(&__p);
    if ((char)v29 < 0)
    {
      v8 = v28;
      if (!v28)
        goto LABEL_42;
      p_p = (char *)__p;
    }
    else
    {
      v8 = v29;
      if (!v29)
        goto LABEL_42;
      p_p = (char *)&__p;
    }
    if (*p_p >= 1)
    {
      v10 = ((uint64_t (*)(const std::locale::facet *))v7->__vftable[1].~facet_0)(v7);
      v11 = *(_BYTE **)(a1 + 16);
      v12 = *(_BYTE **)(a1 + 24);
      if (v12 >= v11)
      {
        v13 = 0;
        v14 = __p;
        if ((v29 & 0x80u) == 0)
          v14 = &__p;
        v15 = *v14 - 1;
        do
        {
          if (v15)
          {
            v16 = *(_DWORD *)(a1 + 4);
            if (*(_BYTE *)a1)
              v17 = 1;
            else
              v17 = v16 > 0x19999999;
            v18 = v17;
            *(_BYTE *)a1 = v18;
            v19 = 10 * v16;
            *(_DWORD *)(a1 + 4) = 10 * v16;
            v20 = (char)*v12;
            if ((*v12 - 58) < 0xF6u)
              goto LABEL_47;
            v21 = v20 - 48;
            v22 = (v20 - 48) * v19;
            if (v21)
            {
              if ((v18 & 1) != 0)
                goto LABEL_47;
              if (((v21 * (unint64_t)v19) & 0xFFFFFFFF00000000) != 0)
                goto LABEL_47;
              v23 = *(_DWORD **)(a1 + 8);
              v24 = *v23;
              if (__CFADD__(v22, *v23))
                goto LABEL_47;
            }
            else
            {
              v23 = *(_DWORD **)(a1 + 8);
              v24 = *v23;
            }
            *v23 = v24 + v22;
            --v15;
          }
          else
          {
            if (*v12 != v10)
              goto LABEL_42;
            if (v12 == v11)
            {
LABEL_47:
              v1 = 0;
              goto LABEL_43;
            }
            if (v8 - 1 > (unint64_t)v13)
              ++v13;
            if ((v29 & 0x80u) == 0)
              v25 = &__p;
            else
              v25 = __p;
            v15 = v25[v13];
          }
          *(_QWORD *)(a1 + 24) = --v12;
        }
        while (v12 >= v11);
      }
      v1 = 1;
      goto LABEL_43;
    }
LABEL_42:
    v1 = sub_10083A6F4(a1);
LABEL_43:
    if ((char)v29 < 0)
      operator delete(__p);
    goto LABEL_45;
  }
  return v1;
}

void sub_10083A6C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::locale::~locale(&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_10083A6F4(uint64_t a1)
{
  unint64_t v1;
  _BYTE *v2;
  char v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  _DWORD *v10;
  int v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_BYTE **)(a1 + 24);
  if ((unint64_t)v2 < v1)
    return 1;
  v4 = *(_BYTE *)a1 != 0;
  while (1)
  {
    v5 = *(_DWORD *)(a1 + 4);
    v4 |= v5 > 0x19999999;
    *(_BYTE *)a1 = v4 & 1;
    v6 = 10 * v5;
    *(_DWORD *)(a1 + 4) = 10 * v5;
    v7 = (char)*v2;
    if ((*v2 - 58) < 0xF6u)
      break;
    v8 = v7 - 48;
    v9 = (v7 - 48) * v6;
    if (v8)
    {
      if ((v4 & 1) != 0)
        return 0;
      if (((v8 * (unint64_t)v6) & 0xFFFFFFFF00000000) != 0)
        return 0;
      v10 = *(_DWORD **)(a1 + 8);
      v11 = *v10;
      if (__CFADD__(v9, *v10))
        return 0;
    }
    else
    {
      v10 = *(_DWORD **)(a1 + 8);
      v11 = *v10;
    }
    *v10 = v11 + v9;
    *(_QWORD *)(a1 + 24) = --v2;
    if ((unint64_t)v2 < v1)
      return 1;
  }
  return 0;
}

uint64_t sub_10083A7B0(uint64_t a1)
{
  uint64_t result;

  if (!*(_BYTE *)(a1 + 80))
    sub_10190B3DC();
  result = sub_10083A124(a1, (std::string::value_type **)(a1 + 64), *(std::string::value_type **)(a1 + 72), (std::string *)(a1 + 88));
  *(_BYTE *)(a1 + 80) = result;
  return result;
}

uint64_t sub_10083A7EC(uint64_t a1, uint64_t a2, int a3, const std::string::value_type *a4)
{
  uint64_t i;
  BOOL v8;
  BOOL v9;
  char *v10;
  char v12;
  __int16 v13;
  std::string v14;
  void *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  void *__p;
  char v21;
  void *v22[2];
  char v23;
  void *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  void **v29;
  char v30;
  _BYTE v31[16];
  void *v32;
  char v33;
  void *v34;
  char v35;
  __int128 v36;
  char v37;
  void *v38;
  char v39;
  void *v40[2];
  char v41;
  char __s[256];

  if (!sub_100839194(a1, __s, a4, ""))
  {
    if (*(_BYTE *)(a1 + 32))
    {
      LOWORD(v22[0]) = 0;
      v14.__r_.__value_.__s.__data_[0] = 2;
      cnprint::CNPrinter::Print(v22, &v14);
    }
    return 0xFFFFFFFFLL;
  }
  sub_1015A2E04(v40, __s);
  sub_100839E70((uint64_t)&v36, " ,;", 0, 0);
  sub_100839F04((uint64_t)v31, (uint64_t *)v40, &v36);
  sub_100839B44((uint64_t)v31, (char *)v22);
  for (i = 0; ; ++i)
  {
    sub_100839C34((uint64_t)v31, (char *)&v14);
    if (v19 && v28)
    {
      if (v17 != v26)
      {
        v8 = 0;
        goto LABEL_11;
      }
      v9 = v18 == v27;
    }
    else
    {
      v9 = v19 == v28;
    }
    v8 = v9;
LABEL_11:
    if (v21 < 0)
      operator delete(__p);
    if (v16 < 0)
      operator delete(v15);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
    if (v8)
      goto LABEL_36;
    if ((a3 & ~(a3 >> 31)) == i)
    {
      LOWORD(v14.__r_.__value_.__l.__data_) = 0;
      LOBYTE(v13) = 4;
      cnprint::CNPrinter::Print(&v14, &v13);
      goto LABEL_35;
    }
    if (!v28)
      __assert_rtn("dereference", "token_iterator.hpp", 59, "valid_");
    v10 = v30 >= 0 ? (char *)&v29 : (char *)v29;
    if ((sub_1008396A4(a1, (_QWORD *)a2, v10) & 1) == 0)
      break;
    if (*(_BYTE *)(a1 + 32))
    {
      v13 = 0;
      v12 = 2;
      std::to_string(&v14, *(double *)(a2 + 8));
      cnprint::CNPrinter::Print(&v13, &v12);
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v14.__r_.__value_.__l.__data_);
    }
    a2 += 8;
    sub_10083A7B0((uint64_t)v22);
  }
  LOWORD(v14.__r_.__value_.__l.__data_) = 0;
  LOBYTE(v13) = 4;
  if (!v28)
    __assert_rtn("dereference", "token_iterator.hpp", 59, "valid_");
  cnprint::CNPrinter::Print(&v14, &v13);
LABEL_35:
  i = 0xFFFFFFFFLL;
LABEL_36:
  if (v30 < 0)
    operator delete(v29);
  if (v25 < 0)
    operator delete(v24);
  if (v23 < 0)
    operator delete(v22[0]);
  if (v35 < 0)
    operator delete(v34);
  if (v33 < 0)
    operator delete(v32);
  if (v39 < 0)
    operator delete(v38);
  if (v37 < 0)
    operator delete((void *)v36);
  if (v41 < 0)
    operator delete(v40[0]);
  return i;
}

void sub_10083AB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,int a62,__int16 a63)
{
  char a65;
  uint64_t v65;

  sub_100839D28((uint64_t)&a28);
  sub_10058D200((uint64_t)&a42);
  sub_1002FDAA0((uint64_t)&a52);
  if (a65 < 0)
    operator delete(*(void **)(v65 + 256));
  _Unwind_Resume(a1);
}

uint64_t sub_10083ABF0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = 0;
  v2 = 102;
  do
  {
    v3 = result + v1;
    *(_QWORD *)(v3 + 24) = 0x600000006;
    *(_QWORD *)v3 = off_102155D90;
    *(_OWORD *)(v3 + 8) = xmmword_101BDB7B0;
    *(_QWORD *)(v3 + 32) = result + v1 + 40;
    *(_QWORD *)(v3 + 352) = 0x100000006;
    *(_QWORD *)(v3 + 328) = off_102155D08;
    *(_OWORD *)(v3 + 336) = xmmword_101BDB7C0;
    *(_QWORD *)(v3 + 360) = result + v1 + 368;
    *(_QWORD *)(v3 + 440) = 0x600000006;
    *(_QWORD *)(v3 + 416) = off_102155D90;
    *(_OWORD *)(result + v1 + 424) = xmmword_101BDB7B0;
    *(_QWORD *)(v3 + 448) = result + v1 + 456;
    *(_QWORD *)(v3 + 768) = 0x600000006;
    *(_QWORD *)(v3 + 744) = off_102155D90;
    *(_OWORD *)(v3 + 752) = xmmword_101BDB7B0;
    v4 = result + v1 + 784;
    v1 += 1104;
    *(_QWORD *)(v3 + 776) = v4;
    --v2;
  }
  while (v2);
  *(_BYTE *)(result + 112608) = 0;
  *(_QWORD *)(result + 112640) = 0x600000006;
  *(_QWORD *)(result + 112616) = off_102155D90;
  *(_OWORD *)(result + 112624) = xmmword_101BDB7B0;
  *(_QWORD *)(result + 112648) = result + 112656;
  *(_QWORD *)(result + 112968) = 0x600000006;
  *(_QWORD *)(result + 112944) = off_102155D90;
  *(_OWORD *)(result + 112952) = xmmword_101BDB7B0;
  *(_QWORD *)(result + 112976) = result + 112984;
  *(_QWORD *)(result + 113296) = 0x100000006;
  *(_QWORD *)(result + 113272) = off_102155D08;
  *(_OWORD *)(result + 113280) = xmmword_101BDB7C0;
  *(_QWORD *)(result + 113304) = result + 113312;
  return result;
}

_QWORD *sub_10083AD04(_QWORD *result)
{
  *result = off_102155D60;
  return result;
}

void sub_10083AD18(_QWORD *a1)
{
  *a1 = off_102155D60;
  operator delete();
}

uint64_t sub_10083AD3C(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_10083AD48(uint64_t a1)
{
  char v1[6];

  sub_10083AD68(a1, v1);
}

void sub_10083AD68(uint64_t a1, char *a2)
{
  unsigned int v2;
  unsigned int v4;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= 2)
  {
    v4 = *(_DWORD *)(a1 + 12);
    if (v4 >= 2)
    {
      if (!a2)
        sub_10190B404();
      v6 = v4 + v2 - *(_DWORD *)(a1 + 20);
      if (v6 <= 0)
        sub_10190B42C();
      bzero(a2, *(unsigned int *)(a1 + 16));
      v7 = *(_DWORD *)(a1 + 16);
      if (v7 >= 3)
      {
        v8 = (v7 - 1);
        v9 = *(_QWORD *)(a1 + 32);
        v10 = 1;
        do
        {
          v11 = &a2[v10];
          if (!a2[v10])
          {
            v12 = *(_QWORD *)(v9 + 8 * v10);
            v13 = v10;
            do
            {
              v13 = v13 * v6 % (int)v8;
              v14 = *(_QWORD *)(v9 + 8 * v13);
              *(_QWORD *)(v9 + 8 * v13) = v12;
              *v11 = 1;
              v11 = &a2[v13];
              v12 = v14;
            }
            while (!*v11);
          }
          ++v10;
        }
        while (v10 != v8);
      }
    }
  }
}

void sub_10083AE38(_QWORD *a1)
{
  *a1 = off_102155D60;
  operator delete();
}

void sub_10083AE5C(uint64_t a1)
{
  char v1[36];

  sub_10083AD68(a1, v1);
}

BOOL sub_10083AEA8(uint64_t a1)
{
  return !sub_10011CE64(*(double *)(a1 + 24), *(double *)(a1 + 32))
      && sub_10011CE88(*(double *)(a1 + 24), *(double *)(a1 + 32));
}

void sub_10083AEE8(id a1)
{
  qword_1022A0008 = (uint64_t)os_log_create("com.apple.locationd.Position", "GpsAccessory");
}

uint64_t **sub_10083AF14(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, _BYTE **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  _BYTE *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((unsigned __int8 *)v6 + 32);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x40uLL);
    v11[32] = **a4;
    *((_QWORD *)v11 + 7) = 0;
    *((_QWORD *)v11 + 6) = 0;
    *((_QWORD *)v11 + 5) = v11 + 48;
    sub_1000145B0(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

_QWORD *sub_10083AFE0(_QWORD *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1004805CC(a1, a2);
    sub_10083B040((uint64_t)a1, a2);
  }
  return a1;
}

void sub_10083B024(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10083B040(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v10;

  v2 = *(_QWORD *)(result + 8);
  if (a2)
  {
    v3 = v2 + 112 * a2;
    v4 = v2 + 64;
    __asm { FMOV            V2.2D, #-1.0 }
    v10 = 112 * a2;
    do
    {
      *(_OWORD *)(v4 - 64) = xmmword_101BDB740;
      *(_OWORD *)(v4 - 48) = xmmword_101BDB7D0;
      *(_OWORD *)(v4 - 32) = xmmword_101BDB7D0;
      *(_OWORD *)(v4 - 16) = _Q2;
      *(_OWORD *)v4 = _Q2;
      *(_OWORD *)(v4 + 16) = _Q2;
      *(_QWORD *)(v4 + 32) = 0xBFF0000000000000;
      *(_QWORD *)(v4 + 40) = 0;
      v4 += 112;
      v10 -= 112;
    }
    while (v10);
  }
  else
  {
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(result + 8) = v3;
  return result;
}

uint64_t sub_10083B0A0(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_10083B114((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10083B114(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_10083B1B4((uint64_t)v11);
  return v9;
}

uint64_t sub_10083B1B4(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_10025E930(a1);
  return a1;
}

char *sub_10083B1E8(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  uint64_t v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  void *__p;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v11 - v12) >> 4) < a5)
  {
    v13 = *(void **)a1;
    v14 = a5 + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - *(_QWORD *)a1) >> 4);
    if (v14 > 0x249249249249249)
      sub_100259694();
    v15 = 0x6DB6DB6DB6DB6DB7 * ((__dst - (uint64_t)v13) >> 4);
    v16 = 0x6DB6DB6DB6DB6DB7 * ((v10 - (uint64_t)v13) >> 4);
    v17 = 2 * v16;
    if (2 * v16 <= v14)
      v17 = v14;
    if (v16 >= 0x124924924924924)
      v18 = 0x249249249249249;
    else
      v18 = v17;
    v45 = v9;
    if (v18)
      v19 = (char *)sub_1002A7588(v9, v18);
    else
      v19 = 0;
    v32 = &v19[112 * v15];
    __p = v19;
    v42 = v32;
    v44 = &v19[112 * v18];
    v33 = 112 * a5;
    v34 = &v32[112 * a5];
    do
    {
      v35 = *(_OWORD *)v7;
      v36 = *((_OWORD *)v7 + 2);
      *((_OWORD *)v32 + 1) = *((_OWORD *)v7 + 1);
      *((_OWORD *)v32 + 2) = v36;
      *(_OWORD *)v32 = v35;
      v37 = *((_OWORD *)v7 + 3);
      v38 = *((_OWORD *)v7 + 4);
      v39 = *((_OWORD *)v7 + 6);
      *((_OWORD *)v32 + 5) = *((_OWORD *)v7 + 5);
      *((_OWORD *)v32 + 6) = v39;
      *((_OWORD *)v32 + 3) = v37;
      *((_OWORD *)v32 + 4) = v38;
      v32 += 112;
      v7 += 112;
      v33 -= 112;
    }
    while (v33);
    v43 = v34;
    v5 = (char *)sub_10083B4EC((void **)a1, (uint64_t)&__p, v5);
    if (v43 != v42)
      v43 += -112
           - 112 * ((((unint64_t)(v43 - v42 - 112) >> 4) * (unsigned __int128)0x2492492492492493uLL) >> 64);
    if (__p)
      operator delete(__p);
    return v5;
  }
  v20 = v12 - __dst;
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - __dst) >> 4) >= a5)
  {
    v21 = &__src[112 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[112 * a5];
    v25 = &v23[-112 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_OWORD *)v25;
        v28 = *((_OWORD *)v25 + 2);
        *((_OWORD *)v26 + 1) = *((_OWORD *)v25 + 1);
        *((_OWORD *)v26 + 2) = v28;
        *(_OWORD *)v26 = v27;
        v29 = *((_OWORD *)v25 + 3);
        v30 = *((_OWORD *)v25 + 4);
        v31 = *((_OWORD *)v25 + 6);
        *((_OWORD *)v26 + 5) = *((_OWORD *)v25 + 5);
        *((_OWORD *)v26 + 6) = v31;
        *((_OWORD *)v26 + 3) = v29;
        *((_OWORD *)v26 + 4) = v30;
        v25 += 112;
        v26 += 112;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(v24, v5, v23 - v24 - 7);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7 - 7);
    return v5;
  }
  v21 = &__src[16 * ((uint64_t)(v12 - __dst) >> 4)];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[16 * ((uint64_t)(v12 - __dst) >> 4)], v22 - 7);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v20 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_10083B498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *sub_10083B4EC(void **a1, uint64_t a2, char *__src)
{
  void *v5;
  char *v6;
  void *v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE *v15;
  uint64_t v16;
  int64_t v17;
  char *v18;
  void *v19;
  void *v20;

  v5 = *(void **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v9 = *(_QWORD *)(a2 + 8);
    do
    {
      v10 = *((_OWORD *)v8 - 7);
      v11 = *((_OWORD *)v8 - 5);
      *(_OWORD *)(v9 - 96) = *((_OWORD *)v8 - 6);
      *(_OWORD *)(v9 - 80) = v11;
      *(_OWORD *)(v9 - 112) = v10;
      v12 = *((_OWORD *)v8 - 4);
      v13 = *((_OWORD *)v8 - 3);
      v14 = *((_OWORD *)v8 - 2);
      v7 = (void *)(v9 - 112);
      *(_OWORD *)(v9 - 23) = *(_OWORD *)(v8 - 23);
      *(_OWORD *)(v9 - 48) = v13;
      *(_OWORD *)(v9 - 32) = v14;
      *(_OWORD *)(v9 - 64) = v12;
      v8 -= 112;
      v9 -= 112;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v15 = a1[1];
  v16 = *(_QWORD *)(a2 + 16);
  v17 = v15 - __src;
  if (v15 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v17 - 7);
    v7 = *(void **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v16 + v17;
  v18 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v18;
  v19 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v19;
  v20 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v20;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

void sub_10083B5E4(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  uint64_t v26;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v6[-v7] >> 4) >= a2)
  {
    sub_10083B040((uint64_t)a1, a2);
  }
  else
  {
    v8 = 0x6DB6DB6DB6DB6DB7 * ((v7 - (uint64_t)*a1) >> 4);
    v9 = v8 + a2;
    if (v8 + a2 > 0x249249249249249)
      sub_100259694();
    v10 = 0x6DB6DB6DB6DB6DB7 * ((v5 - *a1) >> 4);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x124924924924924)
      v11 = 0x249249249249249;
    else
      v11 = v9;
    v26 = v4;
    if (v11)
      v12 = (char *)sub_1002A7588(v4, v11);
    else
      v12 = 0;
    v23 = v12;
    v24 = &v12[112 * v8];
    *(_QWORD *)&v25 = v24;
    *((_QWORD *)&v25 + 1) = &v12[112 * v11];
    sub_10083B7F8((uint64_t)&v23, a2);
    v14 = *a1;
    v13 = a1[1];
    v15 = v24;
    if (v13 == *a1)
    {
      v21 = a1[1];
    }
    else
    {
      do
      {
        v16 = *((_OWORD *)v13 - 7);
        v17 = *((_OWORD *)v13 - 5);
        *((_OWORD *)v15 - 6) = *((_OWORD *)v13 - 6);
        *((_OWORD *)v15 - 5) = v17;
        *((_OWORD *)v15 - 7) = v16;
        v18 = *((_OWORD *)v13 - 4);
        v19 = *((_OWORD *)v13 - 3);
        v20 = *((_OWORD *)v13 - 2);
        *(_OWORD *)(v15 - 23) = *(_OWORD *)(v13 - 23);
        *((_OWORD *)v15 - 3) = v19;
        *((_OWORD *)v15 - 2) = v20;
        *((_OWORD *)v15 - 4) = v18;
        v15 -= 112;
        v13 -= 112;
      }
      while (v13 != v14);
      v21 = *a1;
      v13 = a1[1];
    }
    *a1 = v15;
    v22 = a1[2];
    *(_OWORD *)(a1 + 1) = v25;
    *(_QWORD *)&v25 = v13;
    *((_QWORD *)&v25 + 1) = v22;
    v23 = v21;
    v24 = v21;
    if (v13 != v21)
      *(_QWORD *)&v25 = &v13[-112
                           - 112
                           * ((((unint64_t)(v13 - v21 - 112) >> 4) * (unsigned __int128)0x2492492492492493uLL) >> 64)];
    if (v21)
      operator delete(v21);
  }
}

void sub_10083B7A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10083B7F8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v10;

  v2 = *(_QWORD *)(result + 16);
  if (a2)
  {
    v3 = v2 + 112 * a2;
    v4 = v2 + 64;
    __asm { FMOV            V2.2D, #-1.0 }
    v10 = 112 * a2;
    do
    {
      *(_OWORD *)(v4 - 64) = xmmword_101BDB740;
      *(_OWORD *)(v4 - 48) = xmmword_101BDB7D0;
      *(_OWORD *)(v4 - 32) = xmmword_101BDB7D0;
      *(_OWORD *)(v4 - 16) = _Q2;
      *(_OWORD *)v4 = _Q2;
      *(_OWORD *)(v4 + 16) = _Q2;
      *(_QWORD *)(v4 + 32) = 0xBFF0000000000000;
      *(_QWORD *)(v4 + 40) = 0;
      v4 += 112;
      v10 -= 112;
    }
    while (v10);
  }
  else
  {
    v3 = *(_QWORD *)(result + 16);
  }
  *(_QWORD *)(result + 16) = v3;
  return result;
}

uint64_t sub_10083B858(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 8 * a3;
    do
    {
      sub_10083B8D4((uint64_t **)a1, v4, a2, (uint64_t *)a2);
      a2 += 8;
      v6 -= 8;
    }
    while (v6);
  }
  return a1;
}

void sub_10083B8BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100008848(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_10083B8D4(uint64_t **a1, uint64_t *a2, unsigned __int8 *a3, uint64_t *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = sub_10083B958(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v7 + 28) = *a4;
    sub_1000145B0(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_10083B958(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned __int8 *a5)
{
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((unsigned __int8 *)a2 + 28), v6 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((unsigned __int8 *)v10 + 28) < v15)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(unsigned __int8 *)(v16 + 28);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((unsigned __int8 *)a4 + 28))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(unsigned __int8 *)(v20 + 28);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t sub_10083BB00(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 16 * a3;
    do
    {
      sub_100838690((uint64_t **)a1, v4, a2, a2);
      a2 += 16;
      v6 -= 16;
    }
    while (v6);
  }
  return a1;
}

void sub_10083BB64(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100008848(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t **sub_10083BB7C(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v14 = result;
    v15 = v8;
    v16 = v8;
    if (v8)
    {
      v15 = sub_10036C1BC((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          *((_BYTE *)v8 + 32) = *((_BYTE *)v9 + 32);
          v8[5] = v9[5];
          sub_10083BCE4(v5, (uint64_t)v8);
          v8 = v15;
          v16 = v15;
          if (v15)
            v15 = sub_10036C1BC((uint64_t)v15);
          v10 = (_QWORD *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              v10 = (_QWORD *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v11 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v11);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)sub_10036C210((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)sub_10083BD50(v5, (_OWORD *)a2 + 2);
      v12 = (_QWORD *)a2[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)a2[2];
          v11 = *v13 == (_QWORD)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_10083BCD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10036C210((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10083BCE4(uint64_t **a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;

  v3 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        v3 = (uint64_t **)v4;
        if (*(unsigned __int8 *)(a2 + 32) >= *((unsigned __int8 *)v4 + 32))
          break;
        v4 = (uint64_t *)*v4;
        v5 = v3;
        if (!*v3)
          goto LABEL_8;
      }
      v4 = (uint64_t *)v4[1];
    }
    while (v4);
    v5 = v3 + 1;
  }
  else
  {
    v5 = a1 + 1;
  }
LABEL_8:
  sub_1000145B0(a1, (uint64_t)v3, v5, (uint64_t *)a2);
  return a2;
}

unsigned __int8 *sub_10083BD50(uint64_t **a1, _OWORD *a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;

  v4 = (unsigned __int8 *)operator new(0x30uLL);
  v5 = v4;
  *((_OWORD *)v4 + 2) = *a2;
  v6 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        v6 = (uint64_t **)v7;
        if (v4[32] >= *((unsigned __int8 *)v7 + 32))
          break;
        v7 = (uint64_t *)*v7;
        v8 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      v7 = (uint64_t *)v7[1];
    }
    while (v7);
    v8 = v6 + 1;
  }
  else
  {
    v8 = a1 + 1;
  }
LABEL_8:
  sub_1000145B0(a1, (uint64_t)v6, v8, (uint64_t *)v4);
  return v5;
}

uint64_t **sub_10083BDE4(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v14 = result;
    v15 = v8;
    v16 = v8;
    if (v8)
    {
      v15 = sub_10036C1BC((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          *((_BYTE *)v8 + 28) = *((_BYTE *)v9 + 28);
          *((_DWORD *)v8 + 8) = *((_DWORD *)v9 + 8);
          sub_10083BF4C(v5, (uint64_t)v8);
          v8 = v15;
          v16 = v15;
          if (v15)
            v15 = sub_10036C1BC((uint64_t)v15);
          v10 = (_QWORD *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              v10 = (_QWORD *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v11 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v11);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)sub_10036C210((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)sub_10083BFB8(v5, (_QWORD *)((char *)a2 + 28));
      v12 = (_QWORD *)a2[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)a2[2];
          v11 = *v13 == (_QWORD)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_10083BF38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10036C210((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10083BF4C(uint64_t **a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;

  v3 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        v3 = (uint64_t **)v4;
        if (*(unsigned __int8 *)(a2 + 28) >= *((unsigned __int8 *)v4 + 28))
          break;
        v4 = (uint64_t *)*v4;
        v5 = v3;
        if (!*v3)
          goto LABEL_8;
      }
      v4 = (uint64_t *)v4[1];
    }
    while (v4);
    v5 = v3 + 1;
  }
  else
  {
    v5 = a1 + 1;
  }
LABEL_8:
  sub_1000145B0(a1, (uint64_t)v3, v5, (uint64_t *)a2);
  return a2;
}

uint64_t *sub_10083BFB8(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;

  v4 = (uint64_t *)operator new(0x28uLL);
  v5 = *a2;
  *(uint64_t *)((char *)v4 + 28) = *a2;
  v6 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        v6 = (uint64_t **)v7;
        if (*((unsigned __int8 *)v7 + 28) <= v5)
          break;
        v7 = (uint64_t *)*v7;
        v8 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      v7 = (uint64_t *)v7[1];
    }
    while (v7);
    v8 = v6 + 1;
  }
  else
  {
    v8 = a1 + 1;
  }
LABEL_8:
  sub_1000145B0(a1, (uint64_t)v6, v8, v4);
  return v4;
}

uint64_t **sub_10083C048(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, _BYTE **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  _BYTE *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((unsigned __int8 *)v6 + 32);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x30uLL);
    v11[32] = **a4;
    *((_QWORD *)v11 + 5) = 0;
    sub_1000145B0(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

char *sub_10083C108(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  uint64_t v17;
  size_t v18;
  void *v19;
  char *v20;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - *(_QWORD *)result) >> 4) < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x249249249249249)
      sub_100259694();
    v10 = 0x6DB6DB6DB6DB6DB7 * (v8 >> 4);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x124924924924924)
      v12 = 0x249249249249249;
    else
      v12 = v11;
    result = sub_1004805CC(v7, v12);
    v14 = (char *)v7[1];
    v13 = (void **)(v7 + 1);
    v9 = v14;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v17 - 7;
      v19 = v9;
      v20 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v13 = (void **)(result + 8);
  v15 = (_BYTE *)*((_QWORD *)result + 1);
  if (0x6DB6DB6DB6DB6DB7 * ((v15 - v9) >> 4) >= a4)
    goto LABEL_16;
  v16 = &__src[16 * ((v15 - v9) >> 4)];
  if (v15 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 - v9 - 7);
    v9 = (char *)*v13;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v17 - 7;
    v19 = v9;
    v20 = v16;
LABEL_18:
    result = (char *)memmove(v19, v20, v18);
  }
LABEL_19:
  *v13 = &v9[v17];
  return result;
}

void sub_10083C268(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = sub_100261F44(v4 - 168);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *sub_10083C2D8@<X0>(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x178uLL);
  result = sub_10083C330(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_10083C31C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10083C330(_QWORD *a1, uint64_t **a2)
{
  uint64_t v3;

  a1[2] = 0;
  *a1 = off_102155DF8;
  a1[1] = 0;
  v3 = sub_100CC2D78((uint64_t)(a1 + 3), a2);
  a1[34] = 0;
  a1[35] = 0;
  a1[32] = 0;
  a1[33] = a1 + 34;
  a1[36] = a1 + 37;
  a1[37] = 0;
  a1[40] = 0;
  a1[41] = 0;
  a1[38] = 0;
  a1[39] = a1 + 40;
  a1[42] = 0xBFF0000000000000;
  *(_OWORD *)(v3 + 320) = 0u;
  *(_OWORD *)(v3 + 336) = 0u;
  return a1;
}

void sub_10083C398(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10083C3AC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102155DF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10083C3C0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102155DF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10083C3F4(uint64_t a1)
{
  char v2;

  return sub_10083C41C((uint64_t)&v2, a1 + 24);
}

uint64_t sub_10083C41C(uint64_t a1, uint64_t a2)
{
  void **v4;

  v4 = (void **)(a2 + 328);
  sub_1002A3684(&v4);
  sub_10083C674(a2 + 288, *(char **)(a2 + 296));
  sub_10083C6DC(a2 + 264, *(_QWORD **)(a2 + 272));
  sub_10083C6DC(a2 + 240, *(_QWORD **)(a2 + 248));
  sub_100E3E4AC((id *)(a2 + 232));
  return sub_10083C484(a2);
}

uint64_t sub_10083C484(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  uint8_t buf[1640];

  if (*(_QWORD *)(a1 + 88))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102155E38);
    v2 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLGCZ,destroy geocodec malloc zone,~CLGeoMapGeometry()", buf, 2u);
    }
    v3 = sub_1001BFF7C(115, 2);
    if ((_DWORD)v3)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102155E38);
      v9[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 0, "CLGCZ,destroy geocodec malloc zone,~CLGeoMapGeometry()", v9, 2);
      v8 = (uint8_t *)v7;
      v3 = sub_100512490("Generic", 1, 0, 2, "CLGeoMapGeometry::~CLGeoMapGeometry()", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    GEOResetGeoCodecsAllocator(v3);

    *(_QWORD *)(a1 + 88) = 0;
  }
  v4 = *(void **)(a1 + 96);
  if (v4)
  {

    *(_QWORD *)(a1 + 96) = 0;
  }
  v5 = *(void **)(a1 + 104);
  if (v5)
  {

    *(_QWORD *)(a1 + 104) = 0;
  }
  if (*(char *)(a1 + 151) < 0)
    operator delete(*(void **)(a1 + 128));
  sub_10055D4D0(a1);
  return a1;
}

void sub_10083C668(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_10083C674(uint64_t a1, char *a2)
{
  void **v4;

  if (a2)
  {
    sub_10083C674(a1, *(_QWORD *)a2);
    sub_10083C674(a1, *((_QWORD *)a2 + 1));
    v4 = (void **)(a2 + 80);
    sub_1002A3684(&v4);
    v4 = (void **)(a2 + 56);
    sub_1002A3684(&v4);
    operator delete(a2);
  }
}

void sub_10083C6DC(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_10083C6DC(a1, *a2);
    sub_10083C6DC(a1, a2[1]);
    sub_100261F44((uint64_t)(a2 + 6));
    operator delete(a2);
  }
}

void sub_10083C724(id a1)
{
  qword_1022A00D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

void *sub_10083C750(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x186186186186187)
    sub_10025955C();
  return operator new(168 * a2);
}

uint64_t sub_10083C798(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 168;
    sub_100261F44(i - 168);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_10083C7E4@<X0>(char *a1@<X1>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0xA78uLL);
  result = sub_10083C83C((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_10083C828(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10083C83C(uint64_t a1, char *a2)
{
  char v3;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_102155E68;
  v3 = *a2;
  sub_1010CDBC0(a1 + 24);
  *(_QWORD *)(a1 + 24) = &off_1021ACFA8;
  *(_BYTE *)(a1 + 2672) = v3;
  return a1;
}

void sub_10083C88C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10083C8A0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102155E68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10083C8B4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102155E68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10083C8E8(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_10083C8F8(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v3 = (std::__shared_weak_count *)a2[1];
  v10 = *a2;
  v11 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  sub_101285D28((uint64_t)a1, &v10);
  v6 = v11;
  if (v11)
  {
    v7 = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  *a1 = off_1021ABDA0;
  sub_1002433B8((uint64_t)(a1 + 276));
  a1[282] = 0;
  a1[281] = 0;
  a1[283] = 0;
  a1[284] = 0xBFF0000000000000;
  return a1;
}

void sub_10083C9B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10083C9D4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10083C9D4(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void **v10;

  *(_QWORD *)a1 = off_102155EB8;
  v2 = *(void **)(a1 + 2176);
  if (v2)
  {
    *(_QWORD *)(a1 + 2184) = v2;
    operator delete(v2);
  }
  v3 = *(_QWORD *)(a1 + 2088);
  *(_QWORD *)(a1 + 2088) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 2080);
  *(_QWORD *)(a1 + 2080) = 0;
  if (v4)
    sub_10083CB34(a1 + 2080, v4);
  v10 = (void **)(a1 + 1928);
  sub_10083CB88(&v10);
  v10 = (void **)(a1 + 1904);
  sub_10083CB88(&v10);
  v10 = (void **)(a1 + 1880);
  sub_10083CBFC(&v10);
  v5 = *(void **)(a1 + 1840);
  if (v5)
  {
    *(_QWORD *)(a1 + 1848) = v5;
    operator delete(v5);
  }
  sub_1001A5CBC((uint64_t *)(a1 + 1808));
  sub_1001A5CBC((uint64_t *)(a1 + 1784));
  if (*(char *)(a1 + 1431) < 0)
    operator delete(*(void **)(a1 + 1408));
  v6 = *(void **)(a1 + 1176);
  if (v6)
  {
    *(_QWORD *)(a1 + 1184) = v6;
    operator delete(v6);
  }
  sub_100261F44(a1 + 1088);
  sub_1000F34E0((_QWORD *)(a1 + 1040));
  sub_100261F44(a1 + 992);
  if (*(char *)(a1 + 655) < 0)
    operator delete(*(void **)(a1 + 632));
  v7 = *(void **)(a1 + 472);
  if (v7)
  {
    *(_QWORD *)(a1 + 480) = v7;
    operator delete(v7);
  }
  sub_100261F44(a1 + 384);
  v8 = *(void **)(a1 + 352);
  if (v8)
  {
    *(_QWORD *)(a1 + 360) = v8;
    operator delete(v8);
  }
  sub_100261F44(a1 + 264);
  v10 = (void **)(a1 + 240);
  sub_10083CC6C(&v10);
  sub_100261F44(a1 + 208);
  return a1;
}

uint64_t sub_10083CB2C(uint64_t a1)
{
  return a1 + 384;
}

void sub_10083CB34(uint64_t a1, uint64_t a2)
{
  void **v3;

  if (a2)
  {
    v3 = (void **)(a2 + 232);
    sub_1002A3684(&v3);
    sub_10083C484(a2);
    operator delete();
  }
}

void sub_10083CB88(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 264;
        sub_100261F44((uint64_t)(v4 - 56));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_10083CBFC(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = sub_100261F44(v4 - 56);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_10083CC6C(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 112;
        sub_10083CCF0((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_10083CCF0(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = *(void **)(a2 + 88);
  if (v3)
  {
    *(_QWORD *)(a2 + 96) = v3;
    operator delete(v3);
  }
  return sub_100261F44(a2);
}

BOOL sub_10083CD20(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  unsigned int v7;
  double v8;
  _OWORD v10[2];

  sub_10083CDA4(a1, a2, a3);
  v7 = *(unsigned __int16 *)(a1 + 6);
  if (v7 >= 0x100)
  {
    v8 = *(double *)(a2 + 48);
    *(double *)a4 = v8;
    memset(v10, 0, sizeof(v10));
    sub_10083CF74(a1, (uint64_t)v10, v8);
    *(_DWORD *)(a4 + 8) = sub_100DA2ECC(a1 + 3256, (uint64_t *)v10);
    *(_BYTE *)(a4 + 12) = sub_100DA3634((uint64_t)v10);
  }
  return v7 > 0xFF;
}

float sub_10083CDA4(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  uint64_t v13;
  float v14;
  float v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float result;
  float v24;
  float v25[9];
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  float v30;

  v6 = sub_10012C7A4((float *)a2);
  v8 = v7;
  v10 = v9;
  v29 = *(_QWORD *)(a2 + 16);
  v30 = *(float *)(a2 + 24);
  sub_100B61F44((float *)a2, v25);
  v26 = sub_1011A2C08((uint64_t)v25);
  v27 = v11;
  v28 = v12;
  v13 = v29;
  v14 = v30;
  v15 = sub_10083D0FC((float *)a1, (float *)a2);
  v16 = 0;
  v17 = 0.0;
  do
  {
    v17 = v17 + (float)(*(float *)((char *)&v29 + v16) * *(float *)((char *)&v29 + v16));
    v16 += 4;
  }
  while (v16 != 12);
  v18 = sqrtf(v17);
  v19 = -v6;
  if (*a3 == a3[1])
    v19 = v6;
  v24 = v19;
  v20 = (float)((float)(v8 * *((float *)&v13 + 1)) + (float)(v6 * *(float *)&v13)) + (float)(v10 * v14);
  sub_100687774((unsigned __int16 *)(a1 + 4), (uint64_t)&v26);
  v21 = v27;
  *(float *)(a1 + 3088) = v26 + *(float *)(a1 + 3088);
  ++*(_QWORD *)(a1 + 3096);
  *(float *)(a1 + 3104) = v21 + *(float *)(a1 + 3104);
  ++*(_QWORD *)(a1 + 3112);
  *(float *)(a1 + 3120) = v28 + *(float *)(a1 + 3120);
  ++*(_QWORD *)(a1 + 3128);
  *(float *)(a1 + 3136) = v18 + *(float *)(a1 + 3136);
  ++*(_QWORD *)(a1 + 3144);
  *(float *)(a1 + 3168) = fabsf(v15) + *(float *)(a1 + 3168);
  ++*(_QWORD *)(a1 + 3176);
  v22 = fabsf(v20) + *(float *)(a1 + 3152);
  ++*(_QWORD *)(a1 + 3160);
  *(float *)(a1 + 3152) = v22;
  sub_10083D1DC(a1 + 3200, v15, -v20);
  result = v24 + *(float *)(a1 + 3184);
  *(float *)(a1 + 3184) = result;
  ++*(_QWORD *)(a1 + 3192);
  return result;
}

void sub_10083CF74(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  unsigned __int16 *v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  float v9;
  float v10;
  uint64_t v11;
  int v12;
  float v13;
  float v14;
  unint64_t v15;
  float v16;
  float v17;
  unint64_t v18;
  float v19;
  float v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  _DWORD v25[3];
  _BYTE v26[36];

  *(double *)a2 = a3;
  v5 = (unsigned __int16 *)(a1 + 4);
  sub_10083D3B8();
  v23 = __PAIR64__(v7, v6);
  v24 = v8;
  v9 = sub_10083D28C(v5, (float32x2_t *)&v23, (uint64_t)v26);
  v11 = 0;
  *(float *)v25 = v9;
  v25[1] = v12;
  *(float *)&v25[2] = v10;
  v13 = 0.0;
  do
  {
    v14 = *(float *)&v25[v11];
    if (v14 < 0.0)
      v14 = -v14;
    v13 = v13 + v14;
    ++v11;
  }
  while (v11 != 3);
  *(float *)(a2 + 24) = (float)(1.0 - (float)(fabsf(v10) / v13)) * 100.0;
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 3088) = 0;
  *(_QWORD *)(a1 + 3096) = 0;
  *(_DWORD *)(a1 + 3104) = 0;
  *(_QWORD *)(a1 + 3112) = 0;
  *(_DWORD *)(a1 + 3120) = 0;
  *(_QWORD *)(a1 + 3128) = 0;
  v15 = *(_QWORD *)(a1 + 3144);
  v16 = 0.0;
  v17 = 0.0;
  if (v15)
    v17 = *(float *)(a1 + 3136) / (float)v15;
  *(float *)(a2 + 8) = v17;
  *(_DWORD *)(a1 + 3136) = 0;
  *(_QWORD *)(a1 + 3144) = 0;
  v18 = *(_QWORD *)(a1 + 3176);
  if (v18)
    v16 = *(float *)(a1 + 3168) / (float)v18;
  *(float *)(a2 + 16) = v16;
  *(_DWORD *)(a1 + 3168) = 0;
  *(_QWORD *)(a1 + 3176) = 0;
  v19 = 0.0;
  v20 = 0.0;
  v21 = *(_QWORD *)(a1 + 3160);
  if (v21)
    v20 = *(float *)(a1 + 3152) / (float)v21;
  *(float *)(a2 + 12) = v20;
  *(_DWORD *)(a1 + 3152) = 0;
  *(_QWORD *)(a1 + 3160) = 0;
  *(float *)(a2 + 20) = fabsf(sub_10083D408(a1 + 3200));
  *(_QWORD *)(a1 + 3248) = 0;
  *(_OWORD *)(a1 + 3200) = 0u;
  *(_OWORD *)(a1 + 3216) = 0u;
  *(_OWORD *)(a1 + 3228) = 0u;
  v22 = *(_QWORD *)(a1 + 3192);
  if (v22)
    v19 = *(float *)(a1 + 3184) / (float)v22;
  *(float *)(a2 + 28) = v19;
  *(_DWORD *)(a1 + 3184) = 0;
  *(_QWORD *)(a1 + 3192) = 0;
}

float sub_10083D0FC(float *a1, float *a2)
{
  unsigned __int8 v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float result;
  int v15;
  float *v16;

  v3 = atomic_load((unsigned __int8 *)&qword_102304BA8);
  if ((v3 & 1) == 0)
  {
    v16 = a2;
    v15 = __cxa_guard_acquire(&qword_102304BA8);
    a2 = v16;
    if (v15)
    {
      qword_102304B98 = 1065353216;
      dword_102304BA0 = 0;
      __cxa_guard_release(&qword_102304BA8);
      a2 = v16;
    }
  }
  v5 = a2[8];
  v4 = a2[9];
  v6 = a2[7];
  v7 = (float)(v5 * *(float *)&dword_102304BA0) - (float)(v4 * *((float *)&qword_102304B98 + 1));
  v8 = (float)(v4 * *(float *)&qword_102304B98) - (float)(v6 * *(float *)&dword_102304BA0);
  v9 = (float)(v6 * *((float *)&qword_102304B98 + 1)) - (float)(v5 * *(float *)&qword_102304B98);
  v10 = sub_10012C7A4(a2);
  v13 = -(float)((float)((float)(v8 * v11) + (float)(v10 * v7)) + (float)(v12 * v9));
  result = v13 - *a1;
  *a1 = v13;
  return result;
}

float sub_10083D1DC(uint64_t a1, float a2, float a3)
{
  float v3;
  float v4;
  uint64_t v5;
  float v6;
  float v7;
  float v8;
  float v9;
  uint64_t v10;
  float v11;
  float v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float result;

  v3 = *(float *)(a1 + 8);
  v4 = a2 - v3;
  v5 = *(_QWORD *)a1 + 1;
  v6 = v3 + (float)((float)(a2 - v3) / (float)(unint64_t)v5);
  v7 = *(float *)(a1 + 12) + (float)(v4 * (float)(a2 - v6));
  v8 = *(float *)(a1 + 24);
  v9 = a3 - v8;
  v10 = *(_QWORD *)(a1 + 16) + 1;
  v11 = v8 + (float)((float)(a3 - v8) / (float)(unint64_t)v10);
  v12 = *(float *)(a1 + 28) + (float)(v9 * (float)(a3 - v11));
  *(_QWORD *)a1 = v5;
  *(float *)(a1 + 8) = v6;
  *(float *)(a1 + 12) = v7;
  *(_QWORD *)(a1 + 16) = v10;
  *(float *)(a1 + 24) = v11;
  *(float *)(a1 + 28) = v12;
  v13 = *(_QWORD *)(a1 + 48) + 1;
  *(_QWORD *)(a1 + 48) = v13;
  v14 = *(float *)(a1 + 32);
  v15 = *(float *)(a1 + 36);
  v16 = (float)(a2 - v14) / (float)(unint64_t)v13;
  v17 = (float)(a3 - v15) / (float)(unint64_t)v13;
  *(float *)(a1 + 32) = v14 + v16;
  *(float *)(a1 + 36) = v15 + v17;
  result = *(float *)(a1 + 40)
         + (float)((float)((float)-*(float *)(a1 + 40) / (float)(unint64_t)v13)
                 + (float)((float)((float)((float)(unint64_t)v13 + -1.0) * v16) * v17));
  *(float *)(a1 + 40) = result;
  return result;
}

float sub_10083D28C(unsigned __int16 *a1, float32x2_t *a2, uint64_t a3)
{
  unint64_t v6;
  float32x2_t *v7;
  float v8;
  unint64_t i;
  int v10;
  int v11;
  int v12;
  __int128 v14;
  __int128 v15;
  int v16;
  _DWORD *v17;
  uint64_t v18;
  _OWORD v19[2];
  int v20;
  _DWORD v21[3];

  v16 = 0;
  v14 = 0u;
  v15 = 0u;
  if (a1[1])
  {
    v6 = 0;
    do
    {
      v7 = (float32x2_t *)sub_100687A34(a1, v6);
      v8 = v7[1].f32[0] - a2[1].f32[0];
      v17 = (_DWORD *)vsub_f32(*v7, *a2);
      *(float *)&v18 = v8;
      sub_100821BBC((uint64_t)&v17, (uint64_t)v19);
      for (i = 0; i != 9; ++i)
        *((float *)&v14 + i) = sub_100821C40((uint64_t)v19, i) + *((float *)&v14 + i);
      ++v6;
    }
    while (v6 < a1[1]);
  }
  v19[0] = v14;
  v19[1] = v15;
  v20 = v16;
  sub_100821E18((uint64_t)v19, a3);
  v21[0] = v10;
  v21[1] = v11;
  v21[2] = v12;
  v17 = v21;
  v18 = a3;
  sub_1008223D8((uint64_t *)&v17, 0, 1uLL);
  sub_1008223D8((uint64_t *)&v17, 0, 2uLL);
  sub_1008223D8((uint64_t *)&v17, 1uLL, 2uLL);
  return *(float *)v21;
}

float sub_10083D408(uint64_t a1)
{
  float v1;
  float v2;
  unint64_t v3;
  float v4;
  float result;
  unint64_t v6;

  v1 = 0.0;
  v2 = 0.0;
  if (*(_QWORD *)a1 >= 2uLL)
    v2 = *(float *)(a1 + 12) / (float)(unint64_t)(*(_QWORD *)a1 - 1);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 2)
    v1 = *(float *)(a1 + 28) / (float)(v3 - 1);
  v4 = v2 * v1;
  result = 0.0;
  if (v4 > 0.0)
  {
    v6 = *(_QWORD *)(a1 + 48);
    if (v6 >= 2)
      result = (float)((float)v6 / (float)((float)v6 + -1.0)) * *(float *)(a1 + 40);
    return result / sqrtf(v4);
  }
  return result;
}

_QWORD *sub_10083D488(_QWORD *a1)
{
  dispatch_queue_t v2;

  *a1 = 0;
  v2 = dispatch_queue_create("com.apple.CoreMotion.CLPressureBiasProxy", 0);
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = v2;
  return a1;
}

uint64_t sub_10083D4C4(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  dispatch_release(*(dispatch_object_t *)(a1 + 8));
  v2 = *(NSObject **)(a1 + 16);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 24);
  if (v3)
    _Block_release(v3);
  sub_10083D7F0((CLConnectionClient **)a1, 0);
  return a1;
}

void sub_10083D518(uint64_t a1)
{
  NSObject *v1;
  _QWORD block[5];

  v1 = *(NSObject **)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10083D570;
  block[3] = &unk_10212ECA0;
  block[4] = a1;
  dispatch_sync(v1, block);
}

uint64_t sub_10083D570(uint64_t result)
{
  if (!**(_QWORD **)(result + 32))
    operator new();
  return result;
}

void sub_10083D77C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_100261F44((uint64_t)&a9);
  sub_100261F44((uint64_t)&__p);
  _Unwind_Resume(a1);
}

CLConnectionClient *sub_10083D7F0(CLConnectionClient **a1, CLConnectionClient *a2)
{
  CLConnectionClient *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    CLConnectionClient::~CLConnectionClient(result);
    operator delete();
  }
  return result;
}

uint64_t sub_10083D82C(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v2;
  const __CFDictionary *Dictionary;
  NSObject *v4;
  NSObject *v5;
  const char *v7;
  uint8_t *v8;
  __int16 v9;
  _QWORD block[5];
  _OWORD v11[2];
  _BYTE v12[29];
  uint8_t v13[16];
  uint8_t buf[1640];

  v2 = *(_QWORD *)(a1 + 32);
  Dictionary = (const __CFDictionary *)CLConnectionMessage::getDictionary(*a2);
  sub_1001C1D6C((int)v13, Dictionary);
  if (*(_QWORD *)(v2 + 16)
    && *(_QWORD *)(v2 + 24)
    && !sub_10052A950((uint64_t)v13)
    && sub_100D03F44(v12, (uint64_t)v13))
  {
    v4 = *(NSObject **)(v2 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10083DA6C;
    block[3] = &unk_102155F40;
    block[4] = v2;
    v11[0] = *(_OWORD *)v12;
    *(_OWORD *)((char *)v11 + 13) = *(_OWORD *)&v12[13];
    dispatch_async(v4, block);
  }
  else
  {
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_102155F88);
    v5 = qword_10229FD78;
    if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Bad pressure bias from daemon.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD70 != -1)
        dispatch_once(&qword_10229FD70, &stru_102155F88);
      v9 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 16, "Bad pressure bias from daemon.", &v9, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLPressureBiasProxy::start()_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  return sub_10011A5A8(v13);
}

void sub_10083DA4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

uint64_t sub_10083DA6C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24), a1 + 40);
}

void sub_10083DA84(uint64_t a1)
{
  NSObject *v1;
  _QWORD block[5];

  v1 = *(NSObject **)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10083DADC;
  block[3] = &unk_10212ECA0;
  block[4] = a1;
  dispatch_sync(v1, block);
}

CLConnectionClient *sub_10083DADC(uint64_t a1)
{
  return sub_10083D7F0(*(CLConnectionClient ***)(a1 + 32), 0);
}

void sub_10083DAE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v3;
  _QWORD block[7];

  v3 = *(NSObject **)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10083DB44;
  block[3] = &unk_102155F68;
  block[5] = a3;
  block[6] = a1;
  block[4] = a2;
  dispatch_sync(v3, block);
}

void sub_10083DB44(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  NSObject *v4;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(const void **)(v2 + 24);
  if (v3)
    _Block_release(v3);
  *(_QWORD *)(v2 + 24) = _Block_copy(*(const void **)(a1 + 40));
  v4 = *(NSObject **)(v2 + 16);
  if (v4)
    dispatch_release(v4);
  *(_QWORD *)(v2 + 16) = *(_QWORD *)(a1 + 32);
  dispatch_retain(*(dispatch_object_t *)(a1 + 32));
}

void sub_10083DB94(id a1)
{
  qword_10229FD78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pressure");
}

_QWORD *sub_10083DBC0@<X0>(char *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_100487B64(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_10083DC0C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10083DC20(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  int *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  int *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  int *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  const char *v51;
  char *v52;
  uint64_t *v53;
  int v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  int v61;
  __int16 v62;
  int v63;
  __int16 v64;
  int v65;
  _BYTE buf[22];
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  int v70;
  __int16 v71;
  int v72;
  __int16 v73;
  int v74;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = xmmword_101BDBDF0;
  *(_OWORD *)(a1 + 32) = unk_101BDBE00;
  *(_OWORD *)(a1 + 80) = xmmword_101BDBDB0;
  v4 = (uint64_t *)(a1 + 80);
  *(_OWORD *)(a1 + 48) = xmmword_101BDBE10;
  *(_QWORD *)(a1 + 96) = 0x415BAF8000000000;
  v5 = (uint64_t *)(a1 + 96);
  *(_OWORD *)(a1 + 60) = *(__int128 *)((char *)&xmmword_101BDBE10 + 12);
  *(_OWORD *)(a1 + 104) = xmmword_101BDBDC0;
  v6 = (int *)(a1 + 104);
  v7 = sub_100127B9C();
  sub_100081C10(v7, buf);
  sub_1001FD98C(*(uint64_t *)buf, "VO2MaxAlertBlackoutDuration", v4);
  v8 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v9 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = sub_100127B9C();
  sub_100081C10(v11, buf);
  v53 = (uint64_t *)(a1 + 88);
  sub_1001FD98C(*(uint64_t *)buf, "VO2MaxRepeatAlertWindow", (void *)(a1 + 88));
  v12 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v13 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = sub_100127B9C();
  sub_100081C10(v15, buf);
  sub_1001FD98C(*(uint64_t *)buf, "VO2MaxAlertHistoricalEstimateWindow", v5);
  v16 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v17 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = sub_100127B9C();
  sub_100081C10(v19, buf);
  sub_1001E4B84(*(uint64_t *)buf, "VO2MaxAlertMaxHistoricalEstimates", v6);
  v20 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v21 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = sub_100127B9C();
  sub_100081C10(v23, buf);
  v24 = (int *)(a1 + 108);
  sub_1001E4B84(*(uint64_t *)buf, "VO2MaxAlertMinDaysWithEstimate", (_DWORD *)(a1 + 108));
  v25 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v26 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = sub_100127B9C();
  sub_100081C10(v28, buf);
  sub_1001E4B84(*(uint64_t *)buf, "VO2MaxAlertMinWorkoutsContrToEstimate", (_DWORD *)(a1 + 112));
  v29 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v30 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = sub_100127B9C();
  sub_100081C10(v32, buf);
  v33 = (int *)(a1 + 116);
  sub_1001E4B84(*(uint64_t *)buf, "VO2MaxAlertMinEstimatesSinceAlgChange", (_DWORD *)(a1 + 116));
  v34 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v35 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_102155FA8);
  v37 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    v38 = *v4;
    v39 = *v53;
    v40 = *v5;
    v41 = *v6;
    v42 = *v24;
    v43 = *v33;
    *(_DWORD *)buf = 134284801;
    *(_QWORD *)&buf[4] = v38;
    *(_WORD *)&buf[12] = 2049;
    *(_QWORD *)&buf[14] = v39;
    v67 = 2049;
    v68 = v40;
    v69 = 1025;
    v70 = v41;
    v71 = 1025;
    v72 = v42;
    v73 = 1025;
    v74 = v43;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "VO2MaxAlert,fAlertBlackoutDuration,%{private}.3f,fRepeatAlertWindow,%{private}.3f,fHistoricalEstimateWindow,%{private}.3f,fMaxHistoricalEstimatesForAlert,%{private}d,fMinDaysWithEstimate,%{private}d,fMinEstimatesSinceAlgChange,%{private}d", buf, 0x32u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102155FA8);
    v45 = *v4;
    v46 = *v53;
    v47 = *v5;
    v48 = *v6;
    v49 = *v24;
    v50 = *v33;
    v54 = 134284801;
    v55 = v45;
    v56 = 2049;
    v57 = v46;
    v58 = 2049;
    v59 = v47;
    v60 = 1025;
    v61 = v48;
    v62 = 1025;
    v63 = v49;
    v64 = 1025;
    v65 = v50;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "VO2MaxAlert,fAlertBlackoutDuration,%{private}.3f,fRepeatAlertWindow,%{private}.3f,fHistoricalEstimateWindow,%{private}.3f,fMaxHistoricalEstimatesForAlert,%{private}d,fMinDaysWithEstimate,%{private}d,fMinEstimatesSinceAlgChange,%{private}d", &v54, 50);
    v52 = (char *)v51;
    sub_100512490("Generic", 1, 0, 2, "CLVO2MaxAlertEvaluator::CLVO2MaxAlertEvaluator(std::shared_ptr<CLVO2MaxAlertRecorderDb>)", "%s\n", v51);
    if (v52 != buf)
      free(v52);
  }
  sub_100349198((_QWORD *)a1, a2);
  return a1;
}

void sub_10083E168(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

void sub_10083E1C8(_OWORD *a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  NSObject *v6;
  double v7;
  int v8;
  int v9;
  double v10;
  int v11;
  int v12;
  const char *v13;
  uint8_t *v14;
  _DWORD v15[2];
  __int16 v16;
  double v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  double v23;
  __int16 v24;
  int v25;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  *(_OWORD *)((char *)a1 + 60) = *(__int128 *)((char *)a2 + 44);
  a1[2] = v4;
  a1[3] = v5;
  a1[1] = v3;
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_102155FA8);
  v6 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_INFO))
  {
    v7 = *((float *)a2 + 5);
    v8 = *(_DWORD *)a2;
    v9 = *((_DWORD *)a2 + 1);
    *(_DWORD *)buf = 67175169;
    v21 = v8;
    v22 = 2049;
    v23 = v7;
    v24 = 1025;
    v25 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "VO2MaxAlert,gender,%{private}d,age,%{private}f,biologicalSex,%{private}d", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102155FA8);
    v10 = *((float *)a2 + 5);
    v11 = *(_DWORD *)a2;
    v12 = *((_DWORD *)a2 + 1);
    v15[0] = 67175169;
    v15[1] = v11;
    v16 = 2049;
    v17 = v10;
    v18 = 1025;
    v19 = v12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 1, "VO2MaxAlert,gender,%{private}d,age,%{private}f,biologicalSex,%{private}d", v15, 24);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "void CLVO2MaxAlertEvaluator::feedBodyMetrics(const CLBodyMetrics &)", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
}

void sub_10083E3D0(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  _BOOL4 v8;
  _BOOL4 v9;
  _BOOL4 v10;
  double v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  double v17;
  double v18;
  double *v19;
  double *v20;
  double v21;
  signed int v22;
  int v23;
  int v24;
  double v25;
  signed int v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  char *v33;
  _BOOL4 v34;
  int v35;
  int v36;
  BOOL v37;
  unint64_t v39;
  double v40;
  NSObject *v41;
  double v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  double v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  char *v52;
  uint64_t v53;
  _BOOL4 v54;
  unsigned int v55;
  _BOOL4 v56;
  unint64_t v57;
  _BOOL4 v58;
  _BOOL4 v59;
  _QWORD v60[3];
  void *__p;
  double *v62;
  uint64_t v63;
  char v64[8];
  double v65;
  int v66;
  _BYTE v67[20];
  _BYTE v68[10];
  __int16 v69;
  uint64_t v70;
  __int16 v71;
  double v72;
  __int16 v73;
  _BOOL4 v74;
  __int16 v75;
  double v76;
  __int16 v77;
  unint64_t v78;
  __int16 v79;
  int v80;
  __int16 v81;
  unsigned int v82;
  __int16 v83;
  _BOOL4 v84;
  __int16 v85;
  double v86;
  __int16 v87;
  int v88;
  __int16 v89;
  double v90;
  __int16 v91;
  unint64_t v92;
  __int16 v93;
  double v94;
  __int16 v95;
  _BOOL4 v96;
  __int16 v97;
  _BOOL4 v98;
  __int16 v99;
  uint64_t v100;
  _BYTE buf[24];
  _BYTE v102[10];
  __int16 v103;
  uint64_t v104;
  __int16 v105;
  double v106;
  __int16 v107;
  _BOOL4 v108;
  __int16 v109;
  double v110;
  __int16 v111;
  unint64_t v112;
  __int16 v113;
  int v114;
  __int16 v115;
  unsigned int v116;
  __int16 v117;
  _BOOL4 v118;
  __int16 v119;
  double v120;
  __int16 v121;
  int v122;
  __int16 v123;
  double v124;
  __int16 v125;
  unint64_t v126;
  __int16 v127;
  double v128;
  __int16 v129;
  _BOOL4 v130;
  __int16 v131;
  _BOOL4 v132;
  __int16 v133;
  uint64_t v134;

  v8 = sub_100CD8BF0((int)*(float *)(a1 + 36));
  v9 = sub_10051DBC4(*(_QWORD **)a1, (uint64_t)v64);
  v10 = v9 && v65 + *(double *)(a1 + 80) > a3;
  v11 = *(double *)(a1 + 96);
  __p = 0;
  v62 = 0;
  v63 = 0;
  v12 = sub_101125448();
  v13 = a3 - v11;
  v14 = sub_101125B3C(v12, &__p, 1);
  v15 = sub_10083EBF0(v14, 0);
  v17 = sub_10083EBF0(v16, 1);
  v18 = sub_1013263D8(*(_DWORD *)(a1 + 20), (int)*(float *)(a1 + 36));
  v19 = (double *)__p;
  v20 = v62;
  v58 = v9;
  if (v62 == __p)
  {
    v23 = 0;
    v24 = 0;
    v55 = 0;
    v56 = *(_DWORD *)(a1 + 108) < 1;
  }
  else
  {
    v21 = v18;
    v54 = v10;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    do
    {
      v25 = *(v20 - 15);
      v26 = vcvtmd_s64_f64((v25 + a4) / 86400.0);
      if (v22 < v26)
        ++v23;
      if (v22 <= v26)
        v22 = v26;
      if (v25 >= v15)
        ++v24;
      if (v21 > 0.0 && v25 < v17)
      {
        if (qword_10229FC90 != -1)
          dispatch_once(&qword_10229FC90, &stru_102155FA8);
        v27 = qword_10229FC98;
        if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
        {
          v28 = *((_QWORD *)v20 - 15);
          v29 = *((_QWORD *)v20 - 14);
          *(_DWORD *)buf = 134349568;
          *(_QWORD *)&buf[4] = v28;
          *(_WORD *)&buf[12] = 2050;
          *(_QWORD *)&buf[14] = v29;
          *(_WORD *)&buf[22] = 2050;
          *(double *)v102 = v21;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "VO2MaxAlert,HistoricalEstimateBiasAdjustment,startTime,%{public}.3f,estimatedVO2Max,%{public}.3f,biasAdjustment,%{public}.3f", buf, 0x20u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC90 != -1)
            dispatch_once(&qword_10229FC90, &stru_102155FA8);
          v30 = *((_QWORD *)v20 - 15);
          v31 = *((_QWORD *)v20 - 14);
          v66 = 134349568;
          *(_QWORD *)v67 = v30;
          *(_WORD *)&v67[8] = 2050;
          *(_QWORD *)&v67[10] = v31;
          *(_WORD *)&v67[18] = 2050;
          *(double *)v68 = v21;
          LODWORD(v53) = 32;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "VO2MaxAlert,HistoricalEstimateBiasAdjustment,startTime,%{public}.3f,estimatedVO2Max,%{public}.3f,biasAdjustment,%{public}.3f", &v66, v53);
          v33 = (char *)v32;
          sub_100512490("Generic", 1, 0, 2, "VO2MaxAlertResult CLVO2MaxAlertEvaluator::evaluateForAlert(CFAbsoluteTime, CFTimeInterval)", "%s\n", v32);
          if (v33 != buf)
            free(v33);
        }
        *(v20 - 14) = v21 + *(v20 - 14);
        v19 = (double *)__p;
      }
      v20 -= 18;
    }
    while (v20 != v19);
    v56 = v23 >= *(_DWORD *)(a1 + 108);
    v10 = v54;
    if (v20 == v62)
      v55 = 0;
    else
      v55 = *((_DWORD *)v20 + 28);
  }
  v34 = 0;
  v35 = !v8;
  v36 = *(_DWORD *)(a1 + 116);
  if (((v35 | v10) & 1) == 0)
  {
    v37 = v56 && v55 >= *(_DWORD *)(a1 + 112);
    if (v37 && v24 >= v36)
      v34 = sub_10083EDB8(a1, &__p);
  }
  v59 = v58 && v65 + *(double *)(a1 + 88) > a3;
  if (__p == v62)
    v39 = 0xBFF0000000000000;
  else
    v39 = *((_QWORD *)__p + 4);
  v57 = v39;
  sub_100CD89E0(v60);
  v40 = sub_100CD8DE4(v60, *(_DWORD *)(a1 + 20), (int)*(float *)(a1 + 36));
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_102155FA8);
  v41 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
  {
    v42 = v65;
    v43 = *(float *)(a1 + 36);
    if (!v58)
      v42 = 0.0;
    v44 = *(_QWORD *)(a1 + 80);
    v45 = *(_QWORD *)(a1 + 88);
    *(_DWORD *)buf = 67245057;
    *(_DWORD *)&buf[4] = v35;
    *(_WORD *)&buf[8] = 2049;
    *(double *)&buf[10] = v43;
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = v10;
    *(_WORD *)v102 = 2049;
    *(double *)&v102[2] = v42;
    v103 = 2049;
    v104 = v44;
    v105 = 2050;
    v106 = a3;
    v107 = 1026;
    v108 = v56;
    v109 = 2050;
    v110 = v13;
    v111 = 2050;
    v112 = 0x8E38E38E38E38E39 * (((char *)v62 - (_BYTE *)__p) >> 4);
    v113 = 1026;
    v114 = v23;
    v115 = 1026;
    v116 = v55;
    v117 = 1026;
    v118 = v24 >= v36;
    v119 = 2050;
    v120 = v15;
    v121 = 1026;
    v122 = v24;
    v123 = 2050;
    v124 = v17;
    v125 = 2049;
    v126 = v57;
    v127 = 2049;
    v128 = v40;
    v129 = 1025;
    v130 = v34;
    v131 = 1025;
    v132 = v59;
    v133 = 2049;
    v134 = v45;
    _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "VO2MaxAlert,ageOutOfRange,%{public}d,age,%{private}.3f,inBlackoutPeriod,%{public}d,mostRecentAlertStartTime,%{private}.3f,alertBlackoutDuration,%{private}.3f,estimateTime,%{public}.3f, sufficientDaysWithEstimate,%{public}d,queryFromTime,%{public}.3f,numberOfEstimates,%{public}lu,countDaysWithEstimate,%{public}d,numWorkoutsContrToLatestEstimate,%{public}d,sufficientEstimatesSinceAdaptiveModel,%{public}d, earliestTimestampSinceAdaptiveModel,%{public}.3f,countEstimatesSinceAdaptiveModel,%{public}d,earliestTimestampSinceHunterC,%{public}.3f,latestVO2Max,%{private}.3f,lowClassificationThreshold,%{private}.3f, shouldTriggerAlert,%{private}d,isRepeatAlert,%{private}d,repeatAlertWindow,%{private}.3f", buf, 0xA6u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102155FA8);
    v47 = *(float *)(a1 + 36);
    v48 = v65;
    if (!v58)
      v48 = 0.0;
    v49 = *(_QWORD *)(a1 + 80);
    v50 = *(_QWORD *)(a1 + 88);
    v66 = 67245057;
    *(_DWORD *)v67 = v35;
    *(_WORD *)&v67[4] = 2049;
    *(double *)&v67[6] = v47;
    *(_WORD *)&v67[14] = 1026;
    *(_DWORD *)&v67[16] = v10;
    *(_WORD *)v68 = 2049;
    *(double *)&v68[2] = v48;
    v69 = 2049;
    v70 = v49;
    v71 = 2050;
    v72 = a3;
    v73 = 1026;
    v74 = v56;
    v75 = 2050;
    v76 = v13;
    v77 = 2050;
    v78 = 0x8E38E38E38E38E39 * (((char *)v62 - (_BYTE *)__p) >> 4);
    v79 = 1026;
    v80 = v23;
    v81 = 1026;
    v82 = v55;
    v83 = 1026;
    v84 = v24 >= v36;
    v85 = 2050;
    v86 = v15;
    v87 = 1026;
    v88 = v24;
    v89 = 2050;
    v90 = v17;
    v91 = 2049;
    v92 = v57;
    v93 = 2049;
    v94 = v40;
    v95 = 1025;
    v96 = v34;
    v97 = 1025;
    v98 = v59;
    v99 = 2049;
    v100 = v50;
    LODWORD(v53) = 166;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "VO2MaxAlert,ageOutOfRange,%{public}d,age,%{private}.3f,inBlackoutPeriod,%{public}d,mostRecentAlertStartTime,%{private}.3f,alertBlackoutDuration,%{private}.3f,estimateTime,%{public}.3f, sufficientDaysWithEstimate,%{public}d,queryFromTime,%{public}.3f,numberOfEstimates,%{public}lu,countDaysWithEstimate,%{public}d,numWorkoutsContrToLatestEstimate,%{public}d,sufficientEstimatesSinceAdaptiveModel,%{public}d, earliestTimestampSinceAdaptiveModel,%{public}.3f,countEstimatesSinceAdaptiveModel,%{public}d,earliestTimestampSinceHunterC,%{public}.3f,latestVO2Max,%{private}.3f,lowClassificationThreshold,%{private}.3f, shouldTriggerAlert,%{private}d,isRepeatAlert,%{private}d,repeatAlertWindow,%{private}.3f", &v66, v53);
    v52 = (char *)v51;
    sub_100512490("Generic", 1, 0, 2, "VO2MaxAlertResult CLVO2MaxAlertEvaluator::evaluateForAlert(CFAbsoluteTime, CFTimeInterval)", "%s\n", v51);
    if (v52 != buf)
      free(v52);
  }
  *(_BYTE *)a2 = v34;
  *(_QWORD *)(a2 + 8) = v57;
  *(double *)(a2 + 16) = v40;
  v46 = a3;
  if (__p != v62)
    v46 = *(v62 - 15);
  *(double *)(a2 + 24) = v46;
  *(double *)(a2 + 32) = a3;
  *(_BYTE *)(a2 + 40) = v59;
  *(_QWORD *)buf = v60;
  sub_10025E1F0((void ***)buf);
  if (__p)
  {
    v62 = (double *)__p;
    operator delete(__p);
  }
}

void sub_10083EB94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char *a47)
{
  a47 = &a17;
  sub_10025E1F0((void ***)&a47);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

double sub_10083EBF0(uint64_t a1, int a2)
{
  uint64_t v3;
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  v3 = sub_101125448();
  if ((sub_101125D40(v3) & 1) == 0)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102155FA8);
    v4 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      v10 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "VO2MaxAlert,Unexpectedly not able to retrieve a session record since algorithm version %{public}.3d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_102155FA8);
      v8[0] = 67240192;
      v8[1] = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 16, "VO2MaxAlert,Unexpectedly not able to retrieve a session record since algorithm version %{public}.3d", v8, 8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "CFAbsoluteTime CLVO2MaxAlertEvaluator::getEarliestStartTimeSinceAlgorithmVersion(VO2MaxAlgorithmVersion) const", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  return 1.79769313e308;
}

BOOL sub_10083EDB8(uint64_t a1, _QWORD *a2)
{
  double v4;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  NSObject *v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v21;
  const char *v22;
  char *v23;
  int v24;
  __int128 v25;
  __int128 v26;
  double v27;
  _QWORD v28[3];
  int v29;
  uint64_t v30;
  __int16 v31;
  _BOOL4 v32;
  __int16 v33;
  _BOOL4 v34;
  __int16 v35;
  double v36;
  __int16 v37;
  double v38;
  __int16 v39;
  double v40;
  _BYTE buf[12];
  __int16 v42;
  _BOOL4 v43;
  __int16 v44;
  _BOOL4 v45;
  __int16 v46;
  double v47;
  __int16 v48;
  double v49;
  __int16 v50;
  double v51;

  sub_100CD89E0(v28);
  v4 = sub_100CD8C00(v28, *(_DWORD *)(a1 + 20), (int)*(float *)(a1 + 36));
  v24 = 0;
  __asm { FMOV            V0.2D, #1.0 }
  v25 = xmmword_101BDBDD0;
  v26 = _Q0;
  v27 = 0.0;
  v10 = a2[1];
  v11 = 0.0;
  if (v10 == *a2)
    goto LABEL_7;
  do
  {
    v12 = *(double *)(v10 - 112);
    v10 -= 144;
    sub_10083F10C((uint64_t)&v24, v12);
  }
  while (v10 != *a2);
  if (v24 < 1)
  {
LABEL_7:
    v13 = 0.0;
  }
  else
  {
    v13 = *((double *)&v25 + 1);
    if (v24 != 1)
    {
      v14 = *(double *)&v26 * *(double *)&v26 - *((double *)&v26 + 1);
      if (v14 > 0.0)
        v11 = sqrt(*(double *)&v26 * *(double *)&v26 / v14 * v27);
    }
  }
  v15 = *(double *)(v10 + 32);
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_102155FA8);
  v16 = v13 + v11;
  v17 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
  {
    v18 = *(_QWORD *)(*a2 + 24);
    *(_DWORD *)buf = 134350337;
    *(_QWORD *)&buf[4] = v18;
    v42 = 1025;
    v43 = v15 < v4;
    v44 = 1025;
    v45 = v16 < v4;
    v46 = 2049;
    v47 = v13;
    v48 = 2049;
    v49 = v11;
    v50 = 2049;
    v51 = v4;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "VO2MaxAlert,estimateTime,%{public}.3f,isCurrentEstimateLow,%{private}d,isRecentActivityLow,%{private}d,weightedAvg,%{private}.3f,std,%{private}.3f,lowAlertThreshold,%{private}.3f", buf, 0x36u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102155FA8);
    v21 = *(_QWORD *)(*a2 + 24);
    v29 = 134350337;
    v30 = v21;
    v31 = 1025;
    v32 = v15 < v4;
    v33 = 1025;
    v34 = v16 < v4;
    v35 = 2049;
    v36 = v13;
    v37 = 2049;
    v38 = v11;
    v39 = 2049;
    v40 = v4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "VO2MaxAlert,estimateTime,%{public}.3f,isCurrentEstimateLow,%{private}d,isRecentActivityLow,%{private}d,weightedAvg,%{private}.3f,std,%{private}.3f,lowAlertThreshold,%{private}.3f", &v29, 54);
    v23 = (char *)v22;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLVO2MaxAlertEvaluator::assessWhetherLow(const std::vector<VO2MaxOutput> &) const", "%s\n", v22);
    if (v23 != buf)
      free(v23);
  }
  v19 = v16 < v4 && v15 < v4;
  *(_QWORD *)buf = v28;
  sub_10025E1F0((void ***)buf);
  return v19;
}

void sub_10083F0E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void **a29)
{
  a29 = (void **)&a18;
  sub_10025E1F0(&a29);
  _Unwind_Resume(a1);
}

double sub_10083F10C(uint64_t a1, double result)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;

  if ((*(_DWORD *)a1)++)
  {
    v4 = *(double *)(a1 + 8);
    v3 = *(double *)(a1 + 16);
    v5 = *(double *)(a1 + 24) * v4;
    v6 = *(double *)(a1 + 32) * (v4 * v4);
    v7 = v5 + 1.0;
    if (v3 == result)
    {
      v8 = *(double *)(a1 + 16);
    }
    else
    {
      v8 = (result + v5 * v3) / (v5 + 1.0);
      *(double *)(a1 + 16) = v8;
    }
    v9 = ((result - v8) * (result - v8) + v5 * (*(double *)(a1 + 40) + (v3 - v8) * (v3 - v8))) / v7;
    result = v6 + 1.0;
    *(double *)(a1 + 24) = v7;
    *(double *)(a1 + 32) = v6 + 1.0;
    *(double *)(a1 + 40) = v9;
  }
  else
  {
    *(double *)(a1 + 16) = result;
  }
  return result;
}

void sub_10083F198(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_10083F1C4(uint64_t a1, char *a2, uint64_t *a3, double a4)
{
  char *v6;
  NSObject *v7;
  const char *v9;
  uint8_t *v10;
  __int16 v11;
  double v12;
  uint8_t buf[1640];

  v12 = a4;
  sub_10067D0DC(a1, a3, &v12);
  *(_QWORD *)a1 = off_102155FD8;
  sub_1015A2E04((_QWORD *)(a1 + 232), a2);
  sub_100E81598((_QWORD *)(a1 + 256), a1 + 64, 0);
  if (sub_1000CC4F4(a1 + 64))
  {
    v6 = (char *)(a1 + 232);
    if (*(char *)(a1 + 255) < 0)
      v6 = *(char **)(a1 + 232);
    sub_100634364(a1 + 64, v6, (const char **)&qword_102304BB0, 0, 0);
    sub_10067D20C(a1);
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102156008);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning Database is not valid; not initializing",
        buf,
        2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102156008);
      v11 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning Database is not valid; not initializing",
        &v11,
        2);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "CLNrCellLocationDatabase::CLNrCellLocationDatabase(const char *, const CLSqliteDatabase::SqliteProperties &, double)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
  return a1;
}

void sub_10083F3E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 255) < 0)
    operator delete(*v2);
  sub_10067D1C4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10083F41C(uint64_t a1)
{
  *(_QWORD *)a1 = off_102155FD8;
  if (*(char *)(a1 + 255) < 0)
    operator delete(*(void **)(a1 + 232));
  return sub_10067D1C4(a1);
}

void sub_10083F45C(uint64_t a1)
{
  sub_10083F41C(a1);
  operator delete();
}

char *sub_10083F480@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[255] < 0)
    return (char *)sub_100115CE4((_BYTE *)a2, *((void **)result + 29), *((_QWORD *)result + 30));
  *(_OWORD *)a2 = *(_OWORD *)(result + 232);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)result + 31);
  return result;
}

void sub_10083F4AC(uint64_t a1)
{
  sub_10083F524(a1);
}

void sub_10083F524(uint64_t a1)
{
  _QWORD *v2;
  size_t v3;
  _QWORD *v4;
  _QWORD *v5;
  const char *v6;
  size_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[8];
  void *__p[2];
  char v22;

  sub_100263E50((uint64_t)&v18);
  v2 = sub_100263F7C(&v19, (uint64_t)"SELECT ", 7);
  v3 = strlen("ROWID");
  v4 = sub_100263F7C(v2, (uint64_t)"ROWID", v3);
  v5 = sub_100263F7C(v4, (uint64_t)" FROM ", 6);
  v6 = (const char *)(a1 + 232);
  if (*(char *)(a1 + 255) < 0)
    v6 = *(const char **)v6;
  v7 = strlen(v6);
  v8 = sub_100263F7C(v5, (uint64_t)v6, v7);
  v9 = sub_100263F7C(v8, (uint64_t)" WHERE ", 7);
  v10 = sub_100263F7C(v9, (uint64_t)"MCC", 3);
  v11 = sub_100263F7C(v10, (uint64_t)"=? AND ", 7);
  v12 = sub_100263F7C(v11, (uint64_t)"MNC", 3);
  v13 = sub_100263F7C(v12, (uint64_t)"=? AND ", 7);
  v14 = sub_100263F7C(v13, (uint64_t)"TAC", 3);
  v15 = sub_100263F7C(v14, (uint64_t)"=? AND ", 7);
  v16 = sub_100263F7C(v15, (uint64_t)"CI", 2);
  sub_100263F7C(v16, (uint64_t)"=?", 2);
  std::stringbuf::str(__p, v20);
  if (v22 >= 0)
    v17 = (char *)__p;
  else
    v17 = (char *)__p[0];
  sub_1000CDA68(a1 + 64, v17);
}

void sub_10083F9D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  uint64_t v59;

  if (v59)
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
  sub_1018B38B4((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_10083FA30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  const char *v8;
  size_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  NSObject *v23;
  void **v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  sqlite3_stmt *v28;
  sqlite3_stmt *v29;
  sqlite3_stmt *v30;
  sqlite3_stmt *v31;
  sqlite3_stmt *v32;
  sqlite3_stmt *v33;
  sqlite3_stmt *v34;
  sqlite3_int64 v35;
  NSObject *v36;
  void **v37;
  uint64_t v38;
  NSObject *v39;
  void **v40;
  sqlite3_stmt *v41;
  uint64_t v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t v46;
  _BYTE *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  _BYTE *v51;
  char *v52;
  char *v53;
  const char *v54;
  void **v55;
  uint64_t v56;
  _BYTE *v57;
  char *v58;
  char *v59;
  sqlite3_int64 v60;
  _BYTE buf[12];
  __int16 v62;
  sqlite3_int64 v63;
  char v64;
  _BYTE v65[12];
  void *__p[2];
  char v67;
  _BYTE v68[12];
  __int16 v69;
  _BYTE v70[10];
  _QWORD v71[8];
  void *v72;
  char v73;
  _BYTE v74[152];

  v60 = 0;
  v6 = (_QWORD *)(a1 + 256);
  if (sub_100E815A0((_QWORD *)(a1 + 256)))
  {
LABEL_22:
    sub_100087AF4(v6, v65);
    v28 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v65);
    if (sub_1000CD75C(v28, 1, *(_DWORD *)a2)
      && (v29 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v65), sub_1000CD75C(v29, 2, *(_DWORD *)(a2 + 4)))
      && (v30 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v65), sub_1000CD75C(v30, 3, *(_DWORD *)(a2 + 8)))
      && (v31 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v65), sub_1000CC50C(v31, 4, *(_QWORD *)(a2 + 16)))
      && (v32 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v65), sub_1000CD75C(v32, 5, *(_DWORD *)(a2 + 24)))
      && (v33 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v65), sub_1000CD75C(v33, 6, *(_DWORD *)(a2 + 28))))
    {
      v34 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v65);
      sub_10023C9B0(a1 + 64, v34);
      v35 = sub_10063E99C(a1 + 64);
      v60 = v35;
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102156008);
      v36 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        sub_1005A2548((unsigned int *)a2, __p);
        v37 = v67 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)v68 = 136315394;
        *(_QWORD *)&v68[4] = v37;
        v69 = 2048;
        *(_QWORD *)v70 = v35;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "CELL_CEN: adding cell, %s, rowid, %lld", v68, 0x16u);
        if (v67 < 0)
          operator delete(__p[0]);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102156008);
        v56 = qword_1022A02D8;
        sub_1005A2548((unsigned int *)a2, v68);
        if (v70[9] >= 0)
          v57 = v68;
        else
          v57 = *(_BYTE **)v68;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v57;
        v62 = 2048;
        v63 = v35;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v56, 2, "CELL_CEN: adding cell, %s, rowid, %lld", buf, 22);
        v59 = v58;
        if ((v70[9] & 0x80000000) != 0)
          operator delete(*(void **)v68);
        sub_100512490("Generic", 1, 0, 2, "BOOL CLNrCellLocationDatabase::setLocation(const CLTelephonyService_Type::NrCell &, const CLDaemonLocation &)", "%s\n", v59);
        if (v59 != (char *)__p)
          free(v59);
      }
      v38 = sub_10067E190((_QWORD *)a1, &v60, a3);
    }
    else
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102156008);
      v39 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        sub_1005A2548((unsigned int *)a2, __p);
        v40 = v67 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)v68 = 136315138;
        *(_QWORD *)&v68[4] = v40;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_FAULT, "CELL_LOC: failed to bind %s", v68, 0xCu);
        if (v67 < 0)
          operator delete(__p[0]);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102156008);
        v46 = qword_1022A02D8;
        sub_1005A2548((unsigned int *)a2, v68);
        if (v70[9] >= 0)
          v47 = v68;
        else
          v47 = *(_BYTE **)v68;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v47;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v46, 17, "CELL_LOC: failed to bind %s", buf);
        v49 = v48;
        if ((v70[9] & 0x80000000) != 0)
          operator delete(*(void **)v68);
        sub_100512490("Generic", 1, 0, 0, "BOOL CLNrCellLocationDatabase::setLocation(const CLTelephonyService_Type::NrCell &, const CLDaemonLocation &)", "%s\n", v49);
        if (v49 != (char *)__p)
          free(v49);
      }
      v41 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v65);
      sqlite3_reset(v41);
      v38 = 0;
    }
    v42 = *(_QWORD *)v65;
    *(_QWORD *)v65 = 0;
    if (v42)
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
    return v38;
  }
  sub_100263E50((uint64_t)v68);
  v7 = sub_100263F7C(&v70[2], (uint64_t)"INSERT OR REPLACE INTO ", 23);
  v8 = (const char *)(a1 + 232);
  if (*(char *)(a1 + 255) < 0)
    v8 = *(const char **)v8;
  v9 = strlen(v8);
  v10 = sub_100263F7C(v7, (uint64_t)v8, v9);
  v11 = sub_100263F7C(v10, (uint64_t)" (", 2);
  v12 = sub_100263F7C(v11, (uint64_t)"MCC", 3);
  v13 = sub_100263F7C(v12, (uint64_t)", ", 2);
  v14 = sub_100263F7C(v13, (uint64_t)"MNC", 3);
  v15 = sub_100263F7C(v14, (uint64_t)", ", 2);
  v16 = sub_100263F7C(v15, (uint64_t)"TAC", 3);
  v17 = sub_100263F7C(v16, (uint64_t)", ", 2);
  v18 = sub_100263F7C(v17, (uint64_t)"CI", 2);
  v19 = sub_100263F7C(v18, (uint64_t)", ", 2);
  v20 = sub_100263F7C(v19, (uint64_t)"NRARFCN", 7);
  v21 = sub_100263F7C(v20, (uint64_t)", ", 2);
  v22 = sub_100263F7C(v21, (uint64_t)"PID", 3);
  sub_100263F7C(v22, (uint64_t)") VALUES (?, ?, ?, ?, ?, ?)", 27);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102156008);
  v23 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    std::stringbuf::str(__p, v71);
    v24 = v67 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v24;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "CELL_LOC: fInsertStatement [%s]", buf, 0xCu);
    if (v67 < 0)
      operator delete(__p[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102156008);
    v50 = qword_1022A02D8;
    std::stringbuf::str(buf, v71);
    if (v64 >= 0)
      v51 = buf;
    else
      v51 = *(_BYTE **)buf;
    *(_DWORD *)v65 = 136315138;
    *(_QWORD *)&v65[4] = v51;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v50, 2, "CELL_LOC: fInsertStatement [%s]", v65);
    v53 = v52;
    if (v64 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLNrCellLocationDatabase::setLocation(const CLTelephonyService_Type::NrCell &, const CLDaemonLocation &)", "%s\n", v53);
    if (v53 != (char *)__p)
      free(v53);
  }
  std::stringbuf::str(__p, v71);
  if (v67 >= 0)
    v25 = (char *)__p;
  else
    v25 = (char *)__p[0];
  *(_QWORD *)(a1 + 256) = sub_10063D314(a1 + 64, v25);
  *(_QWORD *)(a1 + 264) = v26;
  if (v67 < 0)
    operator delete(__p[0]);
  if (sub_100E815A0(v6))
  {
    *(_QWORD *)&v70[2] = v27;
    if (v73 < 0)
      operator delete(v72);
    std::streambuf::~streambuf(v71);
    std::ios::~ios(v74);
    goto LABEL_22;
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102156008);
  v43 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_FAULT, "Could not prepare cached insert statement", (uint8_t *)__p, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102156008);
    *(_WORD *)buf = 0;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Could not prepare cached insert statement", buf, 2);
    v55 = (void **)v54;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLNrCellLocationDatabase::setLocation(const CLTelephonyService_Type::NrCell &, const CLDaemonLocation &)", "%s\n", v54);
    if (v55 != __p)
      free(v55);
  }
  *(_QWORD *)&v70[2] = v44;
  if (v73 < 0)
    operator delete(v72);
  std::streambuf::~streambuf(v71);
  std::ios::~ios(v74);
  return 0;
}

void sub_100840438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a17)
    (*(void (**)(uint64_t))(*(_QWORD *)a17 + 8))(a17);
  _Unwind_Resume(a1);
}

void sub_1008404B8(uint64_t a1)
{
  sub_10083F524(a1);
}

void sub_1008404F8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  const char *v11;
  size_t v12;
  _QWORD *v13;
  _QWORD *v14;
  size_t v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[8];
  void *__p[2];
  char v22;

  sub_100263E50((uint64_t)&v18);
  v2 = sub_100263F7C(&v19, (uint64_t)"SELECT ", 7);
  v3 = sub_100263F7C(v2, (uint64_t)"MCC", 3);
  v4 = sub_100263F7C(v3, (uint64_t)", ", 2);
  v5 = sub_100263F7C(v4, (uint64_t)"MNC", 3);
  v6 = sub_100263F7C(v5, (uint64_t)", ", 2);
  v7 = sub_100263F7C(v6, (uint64_t)"TAC", 3);
  v8 = sub_100263F7C(v7, (uint64_t)", ", 2);
  v9 = sub_100263F7C(v8, (uint64_t)"CI", 2);
  v10 = sub_100263F7C(v9, (uint64_t)" FROM ", 6);
  v11 = (const char *)(a1 + 232);
  if (*(char *)(a1 + 255) < 0)
    v11 = *(const char **)v11;
  v12 = strlen(v11);
  v13 = sub_100263F7C(v10, (uint64_t)v11, v12);
  v14 = sub_100263F7C(v13, (uint64_t)" WHERE ", 7);
  v15 = strlen("ROWID");
  v16 = sub_100263F7C(v14, (uint64_t)"ROWID", v15);
  sub_100263F7C(v16, (uint64_t)"=?", 2);
  std::stringbuf::str(__p, v20);
  if (v22 >= 0)
    v17 = (char *)__p;
  else
    v17 = (char *)__p[0];
  sub_1000CDA68(a1 + 64, v17);
}

void sub_10084090C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  uint64_t v52;

  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  sub_1018B38B4((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_100840964(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_100840990()
{
  qword_102304BB0 = (uint64_t)"MCC";
  dword_102304BB8 = 1;
  word_102304BBC = 1;
  byte_102304BC0 = 0;
  byte_102304BD8 = 0;
  qword_102304BE0 = (uint64_t)"MNC";
  dword_102304BE8 = 1;
  word_102304BEC = 1;
  byte_102304BF0 = 0;
  byte_102304C08 = 0;
  qword_102304C10 = (uint64_t)"TAC";
  dword_102304C18 = 1;
  word_102304C1C = 1;
  byte_102304C20 = 0;
  byte_102304C38 = 0;
  qword_102304C40 = (uint64_t)"CI";
  dword_102304C48 = 1;
  word_102304C4C = 1;
  byte_102304C50 = 0;
  byte_102304C68 = 0;
  qword_102304C70 = (uint64_t)"NRARFCN";
  dword_102304C78 = 1;
  word_102304C7C = 1;
  byte_102304C80 = 0;
  byte_102304C98 = 0;
  qword_102304CA0 = (uint64_t)"PID";
  dword_102304CA8 = 1;
  word_102304CAC = 1;
  byte_102304CB0 = 0;
  byte_102304CC8 = 0;
  qword_102304CD0 = (uint64_t)"Timestamp";
  dword_102304CD8 = 2;
  word_102304CDC = 0;
  byte_102304CE0 = 0;
  byte_102304CF8 = 0;
  qword_102304D00 = (uint64_t)"Latitude";
  dword_102304D08 = 2;
  word_102304D0C = 0;
  byte_102304D10 = 0;
  byte_102304D28 = 0;
  qword_102304D30 = (uint64_t)"Longitude";
  dword_102304D38 = 2;
  word_102304D3C = 0;
  byte_102304D40 = 0;
  byte_102304D58 = 0;
  qword_102304D60 = (uint64_t)"HorizontalAccuracy";
  dword_102304D68 = 2;
  word_102304D6C = 0;
  byte_102304D70 = 0;
  byte_102304D88 = 0;
  qword_102304D90 = (uint64_t)"Altitude";
  dword_102304D98 = 2;
  word_102304D9C = 0;
  byte_102304DA0 = 0;
  byte_102304DB8 = 0;
  qword_102304DC0 = (uint64_t)"VerticalAccuracy";
  dword_102304DC8 = 2;
  word_102304DCC = 0;
  byte_102304DD0 = 0;
  byte_102304DE8 = 0;
  qword_102304DF0 = (uint64_t)"Speed";
  dword_102304DF8 = 2;
  word_102304DFC = 0;
  byte_102304E00 = 0;
  byte_102304E18 = 0;
  qword_102304E20 = (uint64_t)"Course";
  dword_102304E28 = 2;
  word_102304E2C = 0;
  byte_102304E30 = 0;
  byte_102304E48 = 0;
  qword_102304E50 = (uint64_t)"Confidence";
  dword_102304E58 = 1;
  word_102304E5C = 0;
  byte_102304E60 = 0;
  byte_102304E78 = 0;
  qword_102304E80 = 0;
  dword_102304E88 = 5;
  word_102304E8C = 0;
  byte_102304E90 = 0;
  byte_102304EA8 = 0;
}

void sub_100840B84(uint64_t a1)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 12) = 0xC00000046;
  *(_DWORD *)(a1 + 20) = 56;
  *(_QWORD *)(a1 + 24) = 0x3851B7173727C5ACLL;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 128) = 0;
  operator new();
}

void sub_100840C34(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 128);
  *(_QWORD *)(v1 + 128) = 0;
  if (v3)
    operator delete();
  _Unwind_Resume(exception_object);
}

id sub_100840C64(uint64_t a1)
{
  id result;
  uint64_t v3;

  result = objc_msgSend(objc_alloc((Class)CMNoMovementStateUpdate), "initWithState:startTime:", 0, CFAbsoluteTimeGetCurrent());
  *(_QWORD *)a1 = result;
  *(_DWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  v3 = *(_QWORD *)(a1 + 128);
  if (v3)
    *(_DWORD *)(v3 + 16) = 0;
  return result;
}

uint64_t sub_100840CD8(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = 0;
  if (v2)
    operator delete();
  return a1;
}

void sub_100840D28(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  double v8;
  double v9;
  int v10;
  int v11;
  double v12;
  double v13;
  const char *v14;
  uint8_t *v15;
  int v16;
  double v17;
  _BYTE v18[14];
  __int16 v19;
  double v20;
  uint8_t buf[4];
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  double v28;
  __int16 v29;
  double v30;

  v3 = *a2;
  *(_DWORD *)(a1 + 28) = *((_DWORD *)a2 + 4);
  *(_OWORD *)(a1 + 12) = v3;
  sub_100840C64(a1);
  if (qword_10229FFE0 != -1)
    dispatch_once(&qword_10229FFE0, &stru_102156028);
  v4 = qword_10229FFE8;
  if (os_log_type_enabled((os_log_t)qword_10229FFE8, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_DWORD *)(a1 + 12);
    v6 = *(_DWORD *)(a1 + 16);
    v7 = *(_DWORD *)(a1 + 20);
    v8 = *(float *)(a1 + 24);
    v9 = *(float *)(a1 + 28);
    *(_DWORD *)buf = 67110144;
    v22 = v5;
    v23 = 1024;
    v24 = v6;
    v25 = 1024;
    v26 = v7;
    v27 = 2048;
    v28 = v8;
    v29 = 2048;
    v30 = v9;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "[CLNoMovement] detector: parameters,epochsPerWindow,%d,epochStepSize,%d,detectionEpochThreshold,%d,userAccelVarSumThreshold,%f,rotationRateVarSumThreshold,%f", buf, 0x28u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFE0 != -1)
      dispatch_once(&qword_10229FFE0, &stru_102156028);
    v10 = *(_DWORD *)(a1 + 16);
    v11 = *(_DWORD *)(a1 + 20);
    v12 = *(float *)(a1 + 24);
    v13 = *(float *)(a1 + 28);
    LOWORD(v17) = 1024;
    *(_DWORD *)((char *)&v17 + 2) = v10;
    HIWORD(v17) = 1024;
    *(_DWORD *)v18 = v11;
    *(_WORD *)&v18[4] = 2048;
    *(double *)&v18[6] = v12;
    v19 = 2048;
    v20 = v13;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFE8, 2, "[CLNoMovement] detector: parameters,epochsPerWindow,%d,epochStepSize,%d,detectionEpochThreshold,%d,userAccelVarSumThreshold,%f,rotationRateVarSumThreshold,%f", &v16, 40, 67110144, v17, *(double *)v18);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLNoMovementDetector::setParameters(const CLNoMovement::Parameters)", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
}

uint64_t sub_100840F5C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  unint64_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  unint64_t v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  unint64_t v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  unint64_t v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  unint64_t v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  uint64_t v57;
  _BOOL4 v58;
  NSObject *v59;
  uint64_t v60;
  uint64_t v62;
  unint64_t v63;
  unsigned __int16 *v64;
  unint64_t v65;
  unint64_t v66;
  int v67;
  uint64_t v68;
  id v69;
  NSObject *v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  int v74;
  uint64_t v75;
  const char *v76;
  uint8_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  int v82;
  const char *v83;
  uint8_t *v84;
  double v85;
  int v86;
  uint64_t v87;
  __int16 v88;
  _BYTE v89[10];
  double v90;
  uint8_t buf[4];
  uint64_t v92;
  __int16 v93;
  _BYTE v94[10];
  double v95;

  v5 = a1 + 32;
  v4 = *(_QWORD *)(a1 + 32);
  v6 = *(float *)a2;
  v7 = *(float *)(a1 + 40);
  v8 = *(float *)(a1 + 44);
  v9 = *(float *)a2 - v7;
  *(_QWORD *)(a1 + 32) = v4 + 1;
  v10 = v7 + (float)(v9 / (float)(v4 + 1));
  v11 = v8 + (float)(v9 * (float)(v6 - v10));
  *(float *)(a1 + 40) = v10;
  *(float *)(a1 + 44) = v11;
  v12 = *(float *)(a2 + 4);
  v13 = *(float *)(a1 + 56);
  v14 = *(float *)(a1 + 60);
  v15 = v12 - v13;
  v16 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v16 + 1;
  v17 = v13 + (float)((float)(v12 - v13) / (float)(v16 + 1));
  v18 = v14 + (float)(v15 * (float)(v12 - v17));
  *(float *)(a1 + 56) = v17;
  *(float *)(a1 + 60) = v18;
  v19 = *(float *)(a2 + 8);
  v20 = *(float *)(a1 + 72);
  v21 = *(float *)(a1 + 76);
  v22 = v19 - v20;
  v23 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v23 + 1;
  v24 = v20 + (float)((float)(v19 - v20) / (float)(v23 + 1));
  v25 = v21 + (float)(v22 * (float)(v19 - v24));
  *(float *)(a1 + 72) = v24;
  *(float *)(a1 + 76) = v25;
  v26 = *(float *)(a2 + 12);
  v27 = *(float *)(a1 + 88);
  v28 = *(float *)(a1 + 92);
  v29 = v26 - v27;
  v30 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v30 + 1;
  v31 = v27 + (float)((float)(v26 - v27) / (float)(v30 + 1));
  v32 = v28 + (float)(v29 * (float)(v26 - v31));
  *(float *)(a1 + 88) = v31;
  *(float *)(a1 + 92) = v32;
  v33 = *(float *)(a2 + 16);
  v34 = *(float *)(a1 + 104);
  v35 = *(float *)(a1 + 108);
  v36 = v33 - v34;
  v37 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v37 + 1;
  v38 = v34 + (float)((float)(v33 - v34) / (float)(v37 + 1));
  v39 = v35 + (float)(v36 * (float)(v33 - v38));
  *(float *)(a1 + 104) = v38;
  *(float *)(a1 + 108) = v39;
  v40 = *(float *)(a2 + 20);
  v41 = *(float *)(a1 + 120);
  v42 = *(float *)(a1 + 124);
  v43 = v40 - v41;
  v44 = *(_QWORD *)(a1 + 112);
  v45 = v41 + (float)((float)(v40 - v41) / (float)(v44 + 1));
  *(_QWORD *)(v5 + 80) = v44 + 1;
  v46 = v42 + (float)(v43 * (float)(v40 - v45));
  *(float *)(v5 + 88) = v45;
  *(float *)(v5 + 92) = v46;
  if (v4 + 1 < 0xFF)
    return 0;
  ++*(_DWORD *)(a1 + 8);
  v47 = v11 / (float)v4;
  v48 = 0.0;
  v49 = v18 / (float)v16;
  if (v16 + 1 < 2)
    v49 = 0.0;
  v50 = v47 + v49;
  v51 = 0.0;
  if (v23 + 1 >= 2)
    v51 = v25 / (float)v23;
  v52 = v50 + v51;
  if (v30 + 1 >= 2)
    v48 = v32 / (float)v30;
  v53 = 0.0;
  v54 = v39 / (float)v37;
  if (v37 + 1 < 2)
    v54 = 0.0;
  v55 = v48 + v54;
  if (v44 + 1 >= 2)
    v53 = v46 / (float)v44;
  v56 = v55 + v53;
  v57 = *(_QWORD *)(a1 + 128);
  v58 = v52 < *(float *)(a1 + 24) && v56 < *(float *)(a1 + 28);
  *(_DWORD *)buf = v58;
  sub_1000E3564((unsigned __int16 *)(v57 + 16), buf);
  *(_BYTE *)v57 = 1;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  if (qword_10229FFE0 != -1)
    dispatch_once(&qword_10229FFE0, &stru_102156028);
  v59 = qword_10229FFE8;
  if (os_log_type_enabled((os_log_t)qword_10229FFE8, OS_LOG_TYPE_DEBUG))
  {
    v60 = *(_QWORD *)(a2 + 32);
    *(_DWORD *)buf = 134218496;
    v92 = v60;
    v93 = 2048;
    *(double *)v94 = v52;
    *(_WORD *)&v94[8] = 2048;
    v95 = v56;
    _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEBUG, "[CLNoMovement] detector: epoch stats,startTime,%f,accelVarSum,%f,rotationVarSum,%f", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFE0 != -1)
      dispatch_once(&qword_10229FFE0, &stru_102156028);
    v75 = *(_QWORD *)(a2 + 32);
    v86 = 134218496;
    v87 = v75;
    v88 = 2048;
    *(double *)v89 = v52;
    *(_WORD *)&v89[8] = 2048;
    v90 = v56;
    LODWORD(v85) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFE8, 2, "[CLNoMovement] detector: epoch stats,startTime,%f,accelVarSum,%f,rotationVarSum,%f", COERCE_DOUBLE(&v86), v85);
    v77 = (uint8_t *)v76;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLNoMovementDetector::computeWindowState(const CLNoMovement::DeviceMotionInput &)", "%s\n", v76);
    if (v77 != buf)
      free(v77);
  }
  if (*(_DWORD *)(a1 + 8) < *(_DWORD *)(a1 + 16))
    return 0;
  *(_DWORD *)(a1 + 8) = 0;
  v62 = *(_QWORD *)(a1 + 128);
  v63 = *(int *)(a1 + 12);
  v64 = (unsigned __int16 *)(v62 + 16);
  v65 = *(unsigned __int16 *)(v62 + 18);
  if (v65 < v63)
  {
    if (*(_WORD *)(v62 + 18))
    {
      v66 = 0;
      v67 = 0;
      do
        v67 += *(_DWORD *)sub_1000E3624(v64, v66++);
      while (v65 != v66);
      goto LABEL_32;
    }
LABEL_31:
    v67 = 0;
    goto LABEL_32;
  }
  if (v65 - v63 >= v65)
    goto LABEL_31;
  v67 = 0;
  do
    v67 += *(_DWORD *)sub_1000E3624((unsigned __int16 *)(v62 + 16), --v65);
  while (*(unsigned __int16 *)(v62 + 18) - v63 < v65);
LABEL_32:
  if (v67 < *(_DWORD *)(a1 + 20))
    v68 = 1;
  else
    v68 = 2;

  v69 = objc_msgSend(objc_alloc((Class)CMNoMovementStateUpdate), "initWithState:startTime:", v68, *(double *)(a2 + 32));
  *(_QWORD *)a1 = v69;
  if (qword_10229FFE0 != -1)
    dispatch_once(&qword_10229FFE0, &stru_102156028);
  v70 = qword_10229FFE8;
  if (os_log_type_enabled((os_log_t)qword_10229FFE8, OS_LOG_TYPE_DEBUG))
  {
    objc_msgSend(v69, "startTime");
    v72 = v71;
    v73 = objc_msgSend(v69, "state");
    v74 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 128) + 18);
    *(_DWORD *)buf = 134218752;
    v92 = v72;
    v93 = 1024;
    *(_DWORD *)v94 = v73;
    *(_WORD *)&v94[4] = 1024;
    *(_DWORD *)&v94[6] = v67;
    LOWORD(v95) = 1024;
    *(_DWORD *)((char *)&v95 + 2) = v74;
    _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEBUG, "[CLNoMovement] detector: compute window-state,startTime,%f,state,%d,bufferSum,%d,bufferSize,%d", buf, 0x1Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFE0 != -1)
      dispatch_once(&qword_10229FFE0, &stru_102156028);
    v78 = qword_10229FFE8;
    objc_msgSend(v69, "startTime");
    v80 = v79;
    v81 = objc_msgSend(v69, "state");
    v82 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 128) + 18);
    v86 = 134218752;
    v87 = v80;
    v88 = 1024;
    *(_DWORD *)v89 = v81;
    *(_WORD *)&v89[4] = 1024;
    *(_DWORD *)&v89[6] = v67;
    LOWORD(v90) = 1024;
    *(_DWORD *)((char *)&v90 + 2) = v82;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v78, 2, "[CLNoMovement] detector: compute window-state,startTime,%f,state,%d,bufferSum,%d,bufferSize,%d", COERCE_DOUBLE(&v86), 30);
    v84 = (uint8_t *)v83;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLNoMovementDetector::computeWindowState(const CLNoMovement::DeviceMotionInput &)", "%s\n", v83);
    if (v84 != buf)
      free(v84);
  }
  return 1;
}

void sub_1008415F0(id a1)
{
  qword_10229FFE8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "CheckIn");
}

void sub_10084161C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void *__p;
  uint8_t buf[8];

  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 12) = 0x20000000000;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_BYTE *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 120) = 1;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_BYTE *)(a1 + 176) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 184) = _Q1;
  *(_BYTE *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 208) = _Q1;
  *(_BYTE *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 232) = _Q1;
  *(_BYTE *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_DWORD *)(a1 + 312) = 1065353216;
  *(_QWORD *)(a1 + 320) = 0x100000005;
  *(_QWORD *)(a1 + 328) = 0;
  sub_100270E34(a1 + 336, a3);
  sub_100270E34(a1 + 368, a4);
  sub_100270E34(a1 + 400, a5);
  sub_100270E34(a1 + 432, a6);
  sub_100270E34(a1 + 464, a10);
  sub_100270E34(a1 + 496, a11);
  *(_QWORD *)(a1 + 552) = 0;
  *(_QWORD *)(a1 + 584) = 0;
  *(_BYTE *)(a1 + 592) = 0;
  *(_QWORD *)(a1 + 640) = 0;
  *(_QWORD *)(a1 + 600) = 0;
  *(_WORD *)(a1 + 608) = 0;
  *(_QWORD *)(a1 + 720) = 0;
  *(_QWORD *)(a1 + 680) = 0;
  *(_QWORD *)(a1 + 672) = 0;
  *(_WORD *)(a1 + 688) = 0;
  *(_QWORD *)(a1 + 752) = 0;
  *(_QWORD *)(a1 + 768) = 0;
  *(_QWORD *)(a1 + 760) = 0;
  *(_BYTE *)(a1 + 776) = 0;
  *(_DWORD *)(a1 + 780) = 1;
  *(_BYTE *)(a1 + 784) = 0;
  *(_QWORD *)(a1 + 792) = a2;
  *(_WORD *)(a1 + 800) = 0;
  *(_DWORD *)(a1 + 804) = 0;
  *(_QWORD *)(a1 + 808) = 0;
  *(_QWORD *)(a1 + 816) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 824) = 5;
  *(_QWORD *)(a1 + 832) = 0;
  *(_QWORD *)(a1 + 840) = sub_100238BE8;
  *(_QWORD *)(a1 + 848) = 0;
  *(_QWORD *)(a1 + 856) = sub_100856CF4;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_DWORD *)(a1 + 1276) = 255;
  *(_DWORD *)(a1 + 1040) = 0;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_QWORD *)(a1 + 1112) = 0;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(_BYTE *)(a1 + 1272) = 0;
  *(_WORD *)(a1 + 1296) = 0;
  *(_QWORD *)(a1 + 1288) = 0;
  *(_QWORD *)(a1 + 1280) = 0;
  sub_100856FE0(a1 + 1304);
  *(_DWORD *)(a1 + 2544) = 0;
  *(_QWORD *)(a1 + 2600) = 0;
  *(_OWORD *)(a1 + 2552) = 0u;
  *(_OWORD *)(a1 + 2568) = 0u;
  *(_OWORD *)(a1 + 2584) = 0u;
  *(_DWORD *)(a1 + 2608) = 1065353216;
  *(_WORD *)(a1 + 2616) = 0;
  *(_BYTE *)(a1 + 2618) = 0;
  sub_1015A2E04(&__p, "#GnssController state machine");
  *(_QWORD *)buf = a1;
  operator new();
}

void sub_100846550()
{
  __cxa_end_catch();
  JUMPOUT(0x100846558);
}

void sub_100846578()
{
  JUMPOUT(0x1008467ACLL);
}

void sub_100846580()
{
  JUMPOUT(0x1008467F8);
}

void sub_100846588()
{
  JUMPOUT(0x100846B20);
}

void sub_100846594()
{
  JUMPOUT(0x100846B50);
}

void sub_1008465A0()
{
  JUMPOUT(0x100846B80);
}

void sub_1008465AC()
{
  JUMPOUT(0x100846BB0);
}

void sub_1008465B8()
{
  JUMPOUT(0x100846BDCLL);
}

void sub_1008465C4()
{
  JUMPOUT(0x100846C08);
}

void sub_10084663C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, _QWORD **a19, uint64_t *a20,uint64_t **a21,uint64_t *a22,uint64_t *a23,uint64_t *a24,uint64_t *a25,uint64_t *a26,uint64_t *a27,uint64_t *a28,uint64_t *a29,uint64_t *a30,uint64_t a31,uint64_t *a32,uint64_t **a33,uint64_t *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t *a44,uint64_t *a45,_QWORD *a46,uint64_t *a47,uint64_t *a48,uint64_t **a49,_QWORD *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t *a56,uint64_t *a57,uint64_t *a58,_QWORD *a59,uint64_t *a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t *a64;
  uint64_t *a65;
  uint64_t a66;
  uint64_t a67;
  uint64_t *v67;
  _QWORD *v68;
  void **v69;
  uint64_t v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;

  if (SLOBYTE(STACK[0x267]) < 0)
    operator delete((void *)STACK[0x250]);
  v71 = v67[387];
  v67[387] = 0;
  if (v71)
    operator delete();
  v72 = *a20;
  *a20 = 0;
  if (v72)
    operator delete();
  v73 = (std::__shared_weak_count *)v67[384];
  if (v73)
    std::__shared_weak_count::__release_weak(v73);
  sub_100261F44((uint64_t)(v67 + 381));
  v74 = *v69;
  if (*v69)
  {
    v67[378] = (uint64_t)v74;
    operator delete(v74);
  }
  v75 = v67[345];
  v67[345] = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  sub_100859DEC(a67);
  sub_100859D78(a66);
  v76 = v67[321];
  v67[321] = 0;
  if (v76)
    (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
  v77 = v67[320];
  v67[320] = 0;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  sub_100739D18(a57, 0);
  sub_1008484E0(a18);
  v78 = v67 + 153;
  v79 = v67[157];
  v67[157] = 0;
  if (v79)
    operator delete();
  sub_100859D3C(a60, 0);
  sub_100859D00(a44, 0);
  sub_100859CC4(a45, 0);
  v80 = *v78;
  *v78 = 0;
  if (v80)
    sub_1004BAB48((uint64_t)(v67 + 153), v80);
  v81 = v67[152];
  v67[152] = 0;
  if (v81)
    (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
  sub_100859C88(a56, 0);
  v82 = v67[150];
  v67[150] = 0;
  if (v82)
    (*(void (**)(uint64_t))(*(_QWORD *)v82 + 8))(v82);
  v83 = v67[149];
  v67[149] = 0;
  if (v83)
    operator delete();
  sub_100859C4C(a47, 0);
  sub_100859C10(a48, 0);
  sub_100859BD4(a64, 0);
  sub_100859B64(a50, 0);
  sub_100859AF0(a23, 0);
  v84 = *a19;
  if (*a19 == v68)
  {
    v85 = 4;
    v84 = v68;
  }
  else
  {
    if (!v84)
      goto LABEL_32;
    v85 = 5;
  }
  (*(void (**)(void))(*v84 + 8 * v85))();
LABEL_32:
  v86 = v67[139];
  v67[139] = 0;
  if (v86)
    operator delete();
  sub_100859AB4(a24, 0);
  sub_100859A78(a58, 0);
  sub_100859A3C(a33, 0);
  sub_100859A00(a32, 0);
  sub_1008599C4(a34, 0);
  sub_100859988(a21, 0);
  v87 = *a49;
  *a49 = 0;
  if (v87)
    sub_100859908((uint64_t)a49, v87);
  sub_1008598CC(a65, 0);
  sub_100859890(v67 + 128, 0);
  sub_100261F44((uint64_t)(v67 + 126));
  sub_100859890(a25, 0);
  sub_100261F44(a31);
  sub_100859890(a26, 0);
  sub_100261F44(a51);
  sub_100859890(a27, 0);
  sub_100261F44(a52);
  sub_100859890(a28, 0);
  sub_100261F44(a53);
  sub_100859890(a29, 0);
  sub_100261F44(a54);
  sub_100859890(a30, 0);
  sub_100261F44(a55);
  v88 = v67[106];
  v67[106] = 0;
  if (v88)
    ((void (*)(void))v67[107])();
  v89 = v67[104];
  v67[104] = 0;
  if (v89)
    ((void (*)(void))v67[105])();
  sub_100859854(a22, 0);
  sub_100848540(v67 + 85);
  sub_100848540(v67 + 75);
  v90 = (_QWORD *)v67[73];
  if (v90 == a59)
  {
    v91 = 4;
    v93 = (_QWORD *)a16;
    v92 = (_QWORD *)a17;
  }
  else
  {
    v93 = (_QWORD *)a16;
    v92 = (_QWORD *)a17;
    if (!v90)
      goto LABEL_45;
    v91 = 5;
    a59 = (_QWORD *)v67[73];
  }
  (*(void (**)(void))(*a59 + 8 * v91))();
LABEL_45:
  v94 = (_QWORD *)v67[69];
  if (v94 == a46)
  {
    v95 = 4;
  }
  else
  {
    if (!v94)
      goto LABEL_50;
    v95 = 5;
    a46 = (_QWORD *)v67[69];
  }
  (*(void (**)(void))(*a46 + 8 * v95))();
LABEL_50:
  v96 = (_QWORD *)v67[65];
  if (v96 == (_QWORD *)a12)
  {
    v97 = 4;
    v96 = (_QWORD *)a12;
  }
  else
  {
    if (!v96)
      goto LABEL_55;
    v97 = 5;
  }
  (*(void (**)(void))(*v96 + 8 * v97))();
LABEL_55:
  v98 = (_QWORD *)v67[61];
  if (v98 == (_QWORD *)a13)
  {
    v99 = 4;
    v98 = (_QWORD *)a13;
  }
  else
  {
    if (!v98)
      goto LABEL_60;
    v99 = 5;
  }
  (*(void (**)(void))(*v98 + 8 * v99))();
LABEL_60:
  v100 = (_QWORD *)v67[57];
  if (v100 == (_QWORD *)a14)
  {
    v101 = 4;
    v100 = (_QWORD *)a14;
  }
  else
  {
    if (!v100)
      goto LABEL_65;
    v101 = 5;
  }
  (*(void (**)(void))(*v100 + 8 * v101))();
LABEL_65:
  v102 = (_QWORD *)v67[53];
  if (v102 == (_QWORD *)a15)
  {
    v103 = 4;
    v102 = (_QWORD *)a15;
  }
  else
  {
    if (!v102)
      goto LABEL_70;
    v103 = 5;
  }
  (*(void (**)(void))(*v102 + 8 * v103))();
LABEL_70:
  v104 = (_QWORD *)v67[49];
  if (v104 == v93)
  {
    v105 = 4;
    v104 = v93;
  }
  else
  {
    if (!v104)
      goto LABEL_75;
    v105 = 5;
  }
  (*(void (**)(void))(*v104 + 8 * v105))();
LABEL_75:
  v106 = (_QWORD *)v67[45];
  if (v106 == v92)
  {
    v107 = 4;
    v106 = v92;
  }
  else
  {
    if (!v106)
      goto LABEL_80;
    v107 = 5;
  }
  (*(void (**)(void))(*v106 + 8 * v107))();
LABEL_80:
  sub_100067A50((uint64_t)(v67 + 35));
  v108 = *v67;
  *v67 = 0;
  if (v108)
    (*(void (**)(uint64_t))(*(_QWORD *)v108 + 8))(v108);
  _Unwind_Resume(a1);
}

void sub_100846658(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12, _QWORD *a13, _QWORD *a14, _QWORD *a15, _QWORD *a16, _QWORD *a17, uint64_t a18, _QWORD **a19, uint64_t *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,_QWORD *a46,uint64_t a47,uint64_t a48,uint64_t *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,_QWORD *a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  uint64_t a65;
  uint64_t a66;
  uint64_t a67;
  uint64_t *v67;
  _QWORD *v68;
  void **v69;
  unint64_t *v70;
  uint64_t v71;
  unint64_t *v72;
  uint64_t v73;
  unint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;

  v70 = (unint64_t *)STACK[0x9E8];
  if ((unint64_t *)STACK[0x9E8] == &STACK[0x9D0])
  {
    v71 = 4;
    v70 = &STACK[0x9D0];
  }
  else
  {
    if (!v70)
      goto LABEL_6;
    v71 = 5;
  }
  (*(void (**)(void))(*v70 + 8 * v71))();
LABEL_6:
  v72 = (unint64_t *)STACK[0xA08];
  if ((unint64_t *)STACK[0xA08] == &STACK[0x9F0])
  {
    v73 = 4;
    v72 = &STACK[0x9F0];
  }
  else
  {
    if (!v72)
      goto LABEL_11;
    v73 = 5;
  }
  (*(void (**)(void))(*v72 + 8 * v73))();
LABEL_11:
  v74 = (unint64_t *)STACK[0xA28];
  if ((unint64_t *)STACK[0xA28] == &STACK[0xA10])
  {
    v75 = 4;
    v74 = &STACK[0xA10];
  }
  else
  {
    if (!v74)
      goto LABEL_16;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_16:
  if (SLOBYTE(STACK[0x267]) < 0)
    operator delete((void *)STACK[0x250]);
  v76 = v67[387];
  v67[387] = 0;
  if (v76)
    operator delete(v76, 0x1000C4077774924);
  v77 = *a20;
  *a20 = 0;
  if (v77)
    operator delete(v77, 0x1000C40EB620E2ELL);
  v78 = (std::__shared_weak_count *)v67[384];
  if (v78)
    std::__shared_weak_count::__release_weak(v78);
  sub_100261F44((uint64_t)(v67 + 381));
  v79 = *v69;
  if (*v69)
  {
    v67[378] = (uint64_t)v79;
    operator delete(v79);
  }
  v80 = v67[345];
  v67[345] = 0;
  if (v80)
    (*(void (**)(uint64_t))(*(_QWORD *)v80 + 8))(v80);
  sub_100859DEC(a67);
  sub_100859D78(a66);
  v81 = v67[321];
  v67[321] = 0;
  if (v81)
    (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
  v82 = v67[320];
  v67[320] = 0;
  if (v82)
    (*(void (**)(uint64_t))(*(_QWORD *)v82 + 8))(v82);
  sub_100739D18(a57, 0);
  sub_1008484E0(a18);
  v83 = v67 + 153;
  v84 = v67[157];
  v67[157] = 0;
  if (v84)
    operator delete(v84, 0x1000C40BDFB0063);
  sub_100859D3C(a60, 0);
  sub_100859D00(a44, 0);
  sub_100859CC4(a45, 0);
  v85 = *v83;
  *v83 = 0;
  if (v85)
    sub_1004BAB48(v67 + 153);
  v86 = v67[152];
  v67[152] = 0;
  if (v86)
    (*(void (**)(uint64_t))(*(_QWORD *)v86 + 8))(v86);
  sub_100859C88(a56, 0);
  v87 = v67[150];
  v67[150] = 0;
  if (v87)
    (*(void (**)(uint64_t))(*(_QWORD *)v87 + 8))(v87);
  v88 = v67[149];
  v67[149] = 0;
  if (v88)
    operator delete(v88, 0x1000C400A747E1ELL);
  sub_100859C4C(a47, 0);
  sub_100859C10(a48, 0);
  sub_100859BD4(a64, 0);
  sub_100859B64(a50, 0);
  sub_100859AF0(a23, 0);
  v89 = *a19;
  if (*a19 == v68)
  {
    v90 = 4;
    v89 = v68;
  }
  else
  {
    if (!v89)
      goto LABEL_47;
    v90 = 5;
  }
  (*(void (**)(void))(*v89 + 8 * v90))();
LABEL_47:
  v91 = v67[139];
  v67[139] = 0;
  if (v91)
    operator delete(v91, 0x1000C401E56706BLL);
  sub_100859AB4(a24, 0);
  sub_100859A78(a58, 0);
  sub_100859A3C(a33, 0);
  sub_100859A00(a32, 0);
  sub_1008599C4(a34, 0);
  sub_100859988(a21, 0);
  v92 = *a49;
  *a49 = 0;
  if (v92)
    sub_100859908(a49);
  sub_1008598CC(a65, 0);
  sub_100859890(v67 + 128, 0);
  sub_100261F44((uint64_t)(v67 + 126));
  sub_100859890(a25, 0);
  sub_100261F44(a31);
  sub_100859890(a26, 0);
  sub_100261F44(a51);
  sub_100859890(a27, 0);
  sub_100261F44(a52);
  sub_100859890(a28, 0);
  sub_100261F44(a53);
  sub_100859890(a29, 0);
  sub_100261F44(a54);
  sub_100859890(a30, 0);
  sub_100261F44(a55);
  v93 = v67[106];
  v67[106] = 0;
  if (v93)
    ((void (*)(void))v67[107])();
  v94 = v67[104];
  v67[104] = 0;
  if (v94)
    ((void (*)(void))v67[105])();
  sub_100859854(a22, 0);
  sub_100848540(v67 + 85);
  sub_100848540(v67 + 75);
  v95 = (_QWORD *)v67[73];
  if (v95 == a59)
  {
    v96 = 4;
    v98 = a16;
    v97 = a17;
  }
  else
  {
    v98 = a16;
    v97 = a17;
    if (!v95)
      goto LABEL_60;
    v96 = 5;
    a59 = (_QWORD *)v67[73];
  }
  (*(void (**)(void))(*a59 + 8 * v96))();
LABEL_60:
  v99 = (_QWORD *)v67[69];
  if (v99 == a46)
  {
    v100 = 4;
  }
  else
  {
    if (!v99)
      goto LABEL_65;
    v100 = 5;
    a46 = (_QWORD *)v67[69];
  }
  (*(void (**)(void))(*a46 + 8 * v100))();
LABEL_65:
  v101 = (_QWORD *)v67[65];
  if (v101 == a12)
  {
    v102 = 4;
    v101 = a12;
  }
  else
  {
    if (!v101)
      goto LABEL_70;
    v102 = 5;
  }
  (*(void (**)(void))(*v101 + 8 * v102))();
LABEL_70:
  v103 = (_QWORD *)v67[61];
  if (v103 == a13)
  {
    v104 = 4;
    v103 = a13;
  }
  else
  {
    if (!v103)
      goto LABEL_75;
    v104 = 5;
  }
  (*(void (**)(void))(*v103 + 8 * v104))();
LABEL_75:
  v105 = (_QWORD *)v67[57];
  if (v105 == a14)
  {
    v106 = 4;
    v105 = a14;
  }
  else
  {
    if (!v105)
      goto LABEL_80;
    v106 = 5;
  }
  (*(void (**)(void))(*v105 + 8 * v106))();
LABEL_80:
  v107 = (_QWORD *)v67[53];
  if (v107 == a15)
  {
    v108 = 4;
    v107 = a15;
  }
  else
  {
    if (!v107)
      goto LABEL_85;
    v108 = 5;
  }
  (*(void (**)(void))(*v107 + 8 * v108))();
LABEL_85:
  v109 = (_QWORD *)v67[49];
  if (v109 == v98)
  {
    v110 = 4;
    v109 = v98;
  }
  else
  {
    if (!v109)
      goto LABEL_90;
    v110 = 5;
  }
  (*(void (**)(void))(*v109 + 8 * v110))();
LABEL_90:
  v111 = (_QWORD *)v67[45];
  if (v111 == v97)
  {
    v112 = 4;
    v111 = v97;
  }
  else
  {
    if (!v111)
      goto LABEL_95;
    v112 = 5;
  }
  (*(void (**)(void))(*v111 + 8 * v112))();
LABEL_95:
  sub_100067A50(v67 + 35);
  v113 = *v67;
  *v67 = 0;
  if (v113)
    (*(void (**)(uint64_t))(*(_QWORD *)v113 + 8))(v113);
  JUMPOUT(0x100846C44);
}

void sub_100846C30(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_10024F88C(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t **sub_100846C4C(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  NSObject *v8;
  os_log_type_t v9;
  _QWORD *v10;
  char *v11;
  _BYTE *v12;
  uint64_t **result;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  char *v19;
  char *v20;
  void *v21[2];
  char v22;
  int v23;
  _BYTE __p[12];
  __int16 v25;
  unsigned int v26;
  __int16 v27;
  void **v28;
  _BYTE buf[12];
  __int16 v30;
  unsigned int v31;
  __int16 v32;
  _BYTE *v33;

  v23 = a2;
  if (a4 & 1 | (unint64_t)a3)
  {
    v4 = a4;
    v5 = a3;
    v7 = a2;
    v6 = a1;
    if (qword_1022A0070 == -1)
      goto LABEL_3;
  }
  else
  {
    sub_10190B8D0(qword_1022A0070 == -1);
    __break(1u);
  }
  dispatch_once(&qword_1022A0070, &stru_102156068);
LABEL_3:
  v8 = qword_1022A0078;
  v9 = *(_BYTE *)(v6 + 120);
  if (os_log_type_enabled((os_log_t)qword_1022A0078, v9))
  {
    v10 = (_QWORD *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0)
      v10 = (_QWORD *)*v10;
    if (v7 > 2)
      v11 = "StateUnknown";
    else
      v11 = (&off_102157B60)[v7];
    sub_1015A2E04(__p, v11);
    if (SBYTE3(v28) >= 0)
      v12 = __p;
    else
      v12 = *(_BYTE **)__p;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v10;
    v30 = 1024;
    v31 = v7;
    v32 = 2080;
    v33 = v12;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%sstate,%d,%s", buf, 0x1Cu);
    if (SBYTE3(v28) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v14 = (_QWORD *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0)
      v14 = (_QWORD *)*v14;
    if (v7 > 2)
      v15 = "StateUnknown";
    else
      v15 = (&off_102157B60)[v7];
    v16 = qword_1022A0078;
    v17 = *(unsigned __int8 *)(v6 + 120);
    sub_1015A2E04(v21, v15);
    if (v22 >= 0)
      v18 = v21;
    else
      v18 = (void **)v21[0];
    *(_DWORD *)__p = 136315650;
    *(_QWORD *)&__p[4] = v14;
    v25 = 1024;
    v26 = v7;
    v27 = 2080;
    v28 = v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, v17, "%sstate,%d,%s", __p, 28, (const char *)v21[0]);
    v20 = v19;
    if (v22 < 0)
      operator delete(v21[0]);
    sub_100512490("Generic", 1, 0, 2, "void CLStateMachine<CLGnssController>::setStateHandler(State, StateHandler) [T = CLGnssController]", "%s\n", v20);
    if (v20 != buf)
      free(v20);
  }
  *(_QWORD *)buf = &v23;
  result = sub_1000610B4((uint64_t **)(v6 + 8), &v23, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
  result[5] = v5;
  result[6] = v4;
  return result;
}

uint64_t sub_100846FD4(_QWORD *a1, int a2)
{
  uint64_t v2;
  NSObject *v4;
  const char *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  uint8_t *v10;
  _QWORD v11[2];
  uint8_t buf[1640];

  v2 = 2;
  switch(a2)
  {
    case 0:
      sub_100849EE4((uint64_t)a1);
      return v2;
    case 1:
      sub_100849F48(a1);
      return v2;
    case 4:
    case 6:
    case 8:
    case 10:
      return 0;
    case 5:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v4 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning,CLGnssController,Unexpected device connect event in NilrOnly state", buf, 2u);
      }
      v2 = 2;
      if (!sub_1001BFF7C(115, 2))
        return v2;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      LOWORD(v11[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,CLGnssController,Unexpected device connect event in NilrOnly state", v11, 2, v11[0]);
      break;
    case 7:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v6 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning,CLGnssController,Unexpected Ap Wake event in NilrOnly state", buf, 2u);
      }
      v2 = 2;
      if (!sub_1001BFF7C(115, 2))
        return v2;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      LOWORD(v11[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,CLGnssController,Unexpected Ap Wake event in NilrOnly state", v11, 2, v11[0]);
      break;
    case 11:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v7 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning,CLGnssController,Unexpected Emergency start in NilrOnly state", buf, 2u);
      }
      v2 = 2;
      if (!sub_1001BFF7C(115, 2))
        return v2;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      LOWORD(v11[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,CLGnssController,Unexpected Emergency start in NilrOnly state", v11, 2, v11[0]);
      break;
    case 13:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v8 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning,CLGnssController,Unexpected Nilr Begin event in NilrOnly state", buf, 2u);
      }
      v2 = 2;
      if (!sub_1001BFF7C(115, 2))
        return v2;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      LOWORD(v11[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,CLGnssController,Unexpected Nilr Begin event in NilrOnly state", v11, 2, v11[0]);
      break;
    case 14:
    case 17:
      return sub_10001491C((uint64_t)a1);
    case 15:
      sub_100848E34(a1);
      return v2;
    case 16:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v9 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning,CLGnssController,Unexpected Debounce Timeout event in NilrOnly state", buf, 2u);
      }
      v2 = 2;
      if (!sub_1001BFF7C(115, 2))
        return v2;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      LOWORD(v11[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,CLGnssController,Unexpected Debounce Timeout event in NilrOnly state", v11, 2, v11[0]);
      break;
    default:
      return v2;
  }
  v10 = (uint8_t *)v5;
  sub_100512490("Generic", 1, 0, 2, "CLGnssController::State CLGnssController::handler_NilrOnly(CLGnssController::Event)", "%s\n", v5);
  if (v10 != buf)
    free(v10);
  return 2;
}

void sub_100847580(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLGnssController::onClientManagerNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 792), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102156048);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssController::onClientManagerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102156048);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssController::onClientManagerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1008511A0((_QWORD *)a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100847738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

id sub_100847758(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  id result;
  unsigned int v5;
  _QWORD v6[19];

  v2 = 0;
  v6[0] = kCTDaemonReadyNotification;
  v6[1] = kCTConnectionInvalidatedNotification;
  v6[2] = CFSTR("kCLTelephonyServiceDisconnectedNotification");
  v6[3] = CFSTR("kHandsetInfoNotification");
  v6[4] = CFSTR("kCLTelephonyServiceConnectedNotification");
  v6[5] = CFSTR("kCellRefreshNotification");
  v6[6] = CFSTR("kSuplInitPayloadNotification");
  v6[7] = CFSTR("kSimStatusChangeNotification");
  v6[8] = CFSTR("kCLCellularTransmitStateNotification");
  v6[9] = CFSTR("kCellInfoNotification");
  v6[10] = CFSTR("kUplinkFreqBwNotification");
  v6[11] = CFSTR("kSubscriberMccAndMncNotification");
  v6[12] = CFSTR("kDataStatusNotification");
  v6[13] = CFSTR("kSubscriptionChangeNotification");
  v6[14] = CFSTR("kPrefDataSimChangedNotification");
  v6[15] = CFSTR("kTandemCapabilityNotification");
  v6[16] = CFSTR("kAltAccountConfiguredNotification");
  v6[17] = CFSTR("kAtLeastOneVoiceCallInProgress");
  v6[18] = CFSTR("kNoVoiceCallInProgress");
  do
  {
    v3 = *(_QWORD *)(a1 + 2560);
    sub_10013F950(&v5, v6[v2]);
    result = objc_msgSend(*(id *)(v3 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v3 + 8), sub_1001CFE7C(&v5), 0);
    ++v2;
  }
  while (v2 != 19);
  return result;
}

_QWORD *sub_100847908(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100270E34((uint64_t)v6, a2);
  sub_10085ACD8(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *sub_1008479A0(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100270E34((uint64_t)v6, a2);
  sub_10085AF04(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_100847A38(uint64_t *a1)
{
  int v2;
  int v3;
  _BOOL4 v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  int v8;
  unsigned __int8 v9;
  _BOOL4 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  unsigned __int8 v15;
  _BOOL4 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  int v20;
  unsigned __int8 v21;
  _BOOL4 v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  int v26;
  unsigned __int8 v27;
  _BOOL4 v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  int v32;
  unsigned __int8 v33;
  _BOOL4 v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  int v38;
  int v39;
  _BOOL4 v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  int v44;
  unsigned __int8 v45;
  _BOOL4 v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  int v50;
  unsigned __int8 v51;
  _BOOL4 v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  int v56;
  unsigned __int8 v57;
  _BOOL4 v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  int v62;
  int v63;
  unsigned __int8 v64;
  _BOOL4 v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  int v69;
  unsigned __int8 v70;
  int v71;
  _BOOL4 v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  int v76;
  int v77;
  NSObject *v78;
  int v79;
  uint64_t v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  BOOL v86;
  uint8_t buf[8];
  _BYTE v88[10];
  __int16 v89;
  int v90;
  __int16 v91;
  int v92;
  __int16 v93;
  int v94;
  __int16 v95;
  int v96;

  v2 = sub_10085501C();
  sub_1001E4804(buf);
  v86 = 0;
  v3 = sub_1001E4874(*(uint64_t *)buf, "GnssForceEnableGps", &v86);
  v4 = v86;
  v5 = *(std::__shared_weak_count **)v88;
  if (*(_QWORD *)v88)
  {
    v6 = (unint64_t *)(*(_QWORD *)v88 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v4)
    v8 = v3;
  else
    v8 = 0;
  sub_1001E4804(buf);
  v86 = 0;
  v9 = sub_1001E4874(*(uint64_t *)buf, "GnssForceEnableBeidou", &v86);
  v10 = v86;
  v11 = *(std::__shared_weak_count **)v88;
  if (*(_QWORD *)v88)
  {
    v12 = (unint64_t *)(*(_QWORD *)v88 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if ((v9 & v10) != 0)
    v14 = 4;
  else
    v14 = 0;
  v85 = v14;
  sub_1001E4804(buf);
  v86 = 0;
  v15 = sub_1001E4874(*(uint64_t *)buf, "GnssForceEnableGalileo", &v86);
  v16 = v86;
  v17 = *(std::__shared_weak_count **)v88;
  if (*(_QWORD *)v88)
  {
    v18 = (unint64_t *)(*(_QWORD *)v88 + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if ((v15 & v16) != 0)
    v20 = 8;
  else
    v20 = 0;
  v84 = v20;
  sub_1001E4804(buf);
  v86 = 0;
  v21 = sub_1001E4874(*(uint64_t *)buf, "GnssForceEnableGlonass", &v86);
  v22 = v86;
  v23 = *(std::__shared_weak_count **)v88;
  if (*(_QWORD *)v88)
  {
    v24 = (unint64_t *)(*(_QWORD *)v88 + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if ((v21 & v22) != 0)
    v26 = 2;
  else
    v26 = 0;
  v83 = v26;
  sub_1001E4804(buf);
  v86 = 0;
  v27 = sub_1001E4874(*(uint64_t *)buf, "GnssForceEnableQzss", &v86);
  v28 = v86;
  v29 = *(std::__shared_weak_count **)v88;
  if (*(_QWORD *)v88)
  {
    v30 = (unint64_t *)(*(_QWORD *)v88 + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if ((v27 & v28) != 0)
    v32 = 16;
  else
    v32 = 0;
  v82 = v32;
  sub_1001E4804(buf);
  v86 = 0;
  v33 = sub_1001E4874(*(uint64_t *)buf, "GnssForceEnableNavic", &v86);
  v34 = v86;
  v35 = *(std::__shared_weak_count **)v88;
  if (*(_QWORD *)v88)
  {
    v36 = (unint64_t *)(*(_QWORD *)v88 + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if ((v33 & v34) != 0)
    v38 = 32;
  else
    v38 = 0;
  v81 = v38;
  sub_1001E4804(buf);
  v86 = 0;
  v39 = sub_1001E4874(*(uint64_t *)buf, "GnssForceDisableGps", &v86);
  v40 = v86;
  v41 = *(std::__shared_weak_count **)v88;
  if (*(_QWORD *)v88)
  {
    v42 = (unint64_t *)(*(_QWORD *)v88 + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v40)
    v44 = v39;
  else
    v44 = 0;
  sub_1001E4804(buf);
  v86 = 0;
  v45 = sub_1001E4874(*(uint64_t *)buf, "GnssForceDisableBeidou", &v86);
  v46 = v86;
  v47 = *(std::__shared_weak_count **)v88;
  if (*(_QWORD *)v88)
  {
    v48 = (unint64_t *)(*(_QWORD *)v88 + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  if ((v45 & v46) != 0)
    v50 = 4;
  else
    v50 = 0;
  sub_1001E4804(buf);
  v86 = 0;
  v51 = sub_1001E4874(*(uint64_t *)buf, "GnssForceDisableGalileo", &v86);
  v52 = v86;
  v53 = *(std::__shared_weak_count **)v88;
  if (*(_QWORD *)v88)
  {
    v54 = (unint64_t *)(*(_QWORD *)v88 + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  if ((v51 & v52) != 0)
    v56 = 8;
  else
    v56 = 0;
  sub_1001E4804(buf);
  v86 = 0;
  v57 = sub_1001E4874(*(uint64_t *)buf, "GnssForceDisableGlonass", &v86);
  v58 = v86;
  v59 = *(std::__shared_weak_count **)v88;
  if (*(_QWORD *)v88)
  {
    v60 = (unint64_t *)(*(_QWORD *)v88 + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if ((v57 & v58) != 0)
    v62 = 2;
  else
    v62 = 0;
  sub_1001E4804(buf);
  v63 = v2;
  v86 = 0;
  v64 = sub_1001E4874(*(uint64_t *)buf, "GnssForceDisableQzss", &v86);
  v65 = v86;
  v66 = *(std::__shared_weak_count **)v88;
  if (*(_QWORD *)v88)
  {
    v67 = (unint64_t *)(*(_QWORD *)v88 + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  if ((v64 & v65) != 0)
    v69 = 16;
  else
    v69 = 0;
  sub_1001E4804(buf);
  v86 = 0;
  v70 = sub_1001E4874(*(uint64_t *)buf, "GnssForceDisableNavic", &v86);
  v71 = v50 | v44 | v56 | v62 | v69;
  v72 = v86;
  v73 = *(std::__shared_weak_count **)v88;
  if (*(_QWORD *)v88)
  {
    v74 = (unint64_t *)(*(_QWORD *)v88 + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  if ((v70 & v72) != 0)
    v76 = 32;
  else
    v76 = 0;
  v77 = v71 | v76;
  *((_DWORD *)a1 + 316) = (v71 | v76 | v63) & ~(v85 | v8 | v84 | v83 | v82 | v81);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v78 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v79 = *((_DWORD *)a1 + 316);
    *(_DWORD *)buf = 68290051;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v88 = 2082;
    *(_QWORD *)&v88[2] = "";
    v89 = 1025;
    v90 = v63;
    v91 = 1025;
    v92 = v85 | v8 | v84 | v83 | v82 | v81;
    v93 = 1025;
    v94 = v77;
    v95 = 1025;
    v96 = v79;
    _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"setDefaultBlockedGnssConstellationSetting\", \"platformDefaultBlockedConstellations\":0x%{private}04X, \"forceEnabledConstellations\":0x%{private}04X, \"forceBlockedConstellations\":0x%{private}04X, \"defaultBlockedConstellations\":0x%{private}04X}", buf, 0x2Au);
  }
  v80 = *a1;
  if (*a1)
  {
    *(_DWORD *)(v80 + 1280) = *((_DWORD *)a1 + 316);
    if (*((_BYTE *)a1 + 1271))
      *(_BYTE *)(v80 + 1288) = 1;
  }
}

void sub_100848160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    sub_10190BA48();
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10084825C(_QWORD *a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  if (*a2)
    operator new();
  *a2 = 0;
  v3 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void sub_100848308(uint64_t a1, _DWORD *a2, char *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLGnssController::onDaemonStatusNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 792), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102156048);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssController::onDaemonStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102156048);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssController::onDaemonStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100854EF4((_QWORD *)a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1008484C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008484E0(uint64_t a1)
{
  if (*(char *)(a1 + 1199) < 0)
    operator delete(*(void **)(a1 + 1176));
  if (*(char *)(a1 + 1175) < 0)
    operator delete(*(void **)(a1 + 1152));
  if (*(char *)(a1 + 1007) < 0)
    operator delete(*(void **)(a1 + 984));
  if (*(char *)(a1 + 983) < 0)
    operator delete(*(void **)(a1 + 960));
  return a1;
}

_QWORD *sub_100848540(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = a1 + 6;
  v3 = (_QWORD *)a1[9];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[5];
  if (v5 == a1 + 2)
  {
    v6 = 4;
    v5 = a1 + 2;
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

void sub_1008485C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  sub_10084161C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t *sub_1008485D4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t *v47;
  const char *v49;
  uint8_t *v50;
  _WORD v51[8];
  uint8_t buf[1640];

  objc_msgSend(*(id *)(a1[321] + 16), "unregister:forNotification:", *(_QWORD *)(a1[321] + 8), 4);
  objc_msgSend(*(id *)(a1[321] + 16), "unregister:forNotification:", *(_QWORD *)(a1[321] + 8), 0);
  sub_101754B48((id *)a1[146]);
  v2 = a1[345];
  if (v2)
  {
    objc_msgSend(*(id *)(v2 + 16), "unregister:forNotification:", *(_QWORD *)(v2 + 8), 15);
    v3 = a1[345];
    a1[345] = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#GnssController,deconstructed", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v51[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#GnssController,deconstructed", v51, 2);
    v50 = (uint8_t *)v49;
    sub_100512490("Generic", 1, 0, 2, "CLGnssController::~CLGnssController()", "%s\n", v49);
    if (v50 != buf)
      free(v50);
  }
  v5 = a1[387];
  a1[387] = 0;
  if (v5)
    operator delete();
  v6 = a1[386];
  a1[386] = 0;
  if (v6)
    operator delete();
  v7 = (std::__shared_weak_count *)a1[384];
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  sub_100261F44((uint64_t)(a1 + 381));
  v8 = (void *)a1[377];
  if (v8)
  {
    a1[378] = (uint64_t)v8;
    operator delete(v8);
  }
  v9 = a1[345];
  a1[345] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  sub_100859DEC((uint64_t)(a1 + 328));
  sub_100859D78((uint64_t)(a1 + 322));
  v10 = a1[321];
  a1[321] = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = a1[320];
  a1[320] = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  sub_100739D18(a1 + 319, 0);
  if (*((char *)a1 + 2503) < 0)
    operator delete((void *)a1[310]);
  if (*((char *)a1 + 2479) < 0)
    operator delete((void *)a1[307]);
  if (*((char *)a1 + 2311) < 0)
    operator delete((void *)a1[286]);
  if (*((char *)a1 + 2287) < 0)
    operator delete((void *)a1[283]);
  v12 = a1[157];
  a1[157] = 0;
  if (v12)
    operator delete();
  sub_100859D3C(a1 + 156, 0);
  sub_100859D00(a1 + 155, 0);
  sub_100859CC4(a1 + 154, 0);
  v13 = a1[153];
  a1[153] = 0;
  if (v13)
    sub_1004BAB48((uint64_t)(a1 + 153), v13);
  v14 = a1[152];
  a1[152] = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  sub_100859C88(a1 + 151, 0);
  v15 = a1[150];
  a1[150] = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = a1[149];
  a1[149] = 0;
  if (v16)
    operator delete();
  sub_100859C4C(a1 + 148, 0);
  sub_100859C10(a1 + 147, 0);
  sub_100859BD4(a1 + 146, 0);
  sub_100859B64(a1 + 145, 0);
  sub_100859AF0(a1 + 144, 0);
  v17 = (uint64_t *)a1[143];
  if (v17 == a1 + 140)
  {
    v18 = 4;
    v17 = a1 + 140;
  }
  else
  {
    if (!v17)
      goto LABEL_46;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_46:
  v19 = a1[139];
  a1[139] = 0;
  if (v19)
    operator delete();
  sub_100859AB4(a1 + 138, 0);
  sub_100859A78(a1 + 137, 0);
  sub_100859A3C((uint64_t **)a1 + 136, 0);
  sub_100859A00(a1 + 135, 0);
  sub_1008599C4(a1 + 134, 0);
  sub_100859988((uint64_t **)a1 + 133, 0);
  v20 = (uint64_t *)a1[132];
  a1[132] = 0;
  if (v20)
    sub_100859908((uint64_t)(a1 + 132), v20);
  sub_1008598CC(a1 + 131, 0);
  sub_100859890(a1 + 128, 0);
  sub_100261F44((uint64_t)(a1 + 126));
  sub_100859890(a1 + 125, 0);
  sub_100261F44((uint64_t)(a1 + 123));
  sub_100859890(a1 + 122, 0);
  sub_100261F44((uint64_t)(a1 + 120));
  sub_100859890(a1 + 119, 0);
  sub_100261F44((uint64_t)(a1 + 117));
  sub_100859890(a1 + 116, 0);
  sub_100261F44((uint64_t)(a1 + 114));
  sub_100859890(a1 + 113, 0);
  sub_100261F44((uint64_t)(a1 + 111));
  sub_100859890(a1 + 110, 0);
  sub_100261F44((uint64_t)(a1 + 108));
  v21 = a1[106];
  a1[106] = 0;
  if (v21)
    ((void (*)(void))a1[107])();
  v22 = a1[104];
  a1[104] = 0;
  if (v22)
    ((void (*)(void))a1[105])();
  sub_100859854(a1 + 95, 0);
  v23 = (uint64_t *)a1[94];
  if (v23 == a1 + 91)
  {
    v24 = 4;
    v23 = a1 + 91;
  }
  else
  {
    if (!v23)
      goto LABEL_59;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_59:
  v25 = (uint64_t *)a1[90];
  if (v25 == a1 + 87)
  {
    v26 = 4;
    v25 = a1 + 87;
  }
  else
  {
    if (!v25)
      goto LABEL_64;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_64:
  v27 = (uint64_t *)a1[84];
  if (v27 == a1 + 81)
  {
    v28 = 4;
    v27 = a1 + 81;
  }
  else
  {
    if (!v27)
      goto LABEL_69;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_69:
  v29 = (uint64_t *)a1[80];
  if (v29 == a1 + 77)
  {
    v30 = 4;
    v29 = a1 + 77;
  }
  else
  {
    if (!v29)
      goto LABEL_74;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_74:
  v31 = (uint64_t *)a1[73];
  if (v31 == a1 + 70)
  {
    v32 = 4;
    v31 = a1 + 70;
  }
  else
  {
    if (!v31)
      goto LABEL_79;
    v32 = 5;
  }
  (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_79:
  v33 = (uint64_t *)a1[69];
  if (v33 == a1 + 66)
  {
    v34 = 4;
    v33 = a1 + 66;
  }
  else
  {
    if (!v33)
      goto LABEL_84;
    v34 = 5;
  }
  (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_84:
  v35 = (uint64_t *)a1[65];
  if (v35 == a1 + 62)
  {
    v36 = 4;
    v35 = a1 + 62;
  }
  else
  {
    if (!v35)
      goto LABEL_89;
    v36 = 5;
  }
  (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_89:
  v37 = (uint64_t *)a1[61];
  if (v37 == a1 + 58)
  {
    v38 = 4;
    v37 = a1 + 58;
  }
  else
  {
    if (!v37)
      goto LABEL_94;
    v38 = 5;
  }
  (*(void (**)(void))(*v37 + 8 * v38))();
LABEL_94:
  v39 = (uint64_t *)a1[57];
  if (v39 == a1 + 54)
  {
    v40 = 4;
    v39 = a1 + 54;
  }
  else
  {
    if (!v39)
      goto LABEL_99;
    v40 = 5;
  }
  (*(void (**)(void))(*v39 + 8 * v40))();
LABEL_99:
  v41 = (uint64_t *)a1[53];
  if (v41 == a1 + 50)
  {
    v42 = 4;
    v41 = a1 + 50;
  }
  else
  {
    if (!v41)
      goto LABEL_104;
    v42 = 5;
  }
  (*(void (**)(void))(*v41 + 8 * v42))();
LABEL_104:
  v43 = (uint64_t *)a1[49];
  if (v43 == a1 + 46)
  {
    v44 = 4;
    v43 = a1 + 46;
  }
  else
  {
    if (!v43)
      goto LABEL_109;
    v44 = 5;
  }
  (*(void (**)(void))(*v43 + 8 * v44))();
LABEL_109:
  v45 = (uint64_t *)a1[45];
  if (v45 == a1 + 42)
  {
    v46 = 4;
    v45 = a1 + 42;
  }
  else
  {
    if (!v45)
      goto LABEL_114;
    v46 = 5;
  }
  (*(void (**)(void))(*v45 + 8 * v46))();
LABEL_114:
  sub_100067A50((uint64_t)(a1 + 35));
  v47 = (uint64_t *)*a1;
  *a1 = 0;
  if (v47)
    (*(void (**)(uint64_t *))(*v47 + 8))(v47);
  return a1;
}

void sub_100848D90(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100848DAC(uint64_t a1, int a2)
{
  _QWORD *result;

  result = *(_QWORD **)(a1 + 2552);
  if (result)
  {
    if (a2)
      return sub_10098BEFC(result);
    else
      return sub_10098C0B8(result);
  }
  return result;
}

void sub_100848DC4(uint64_t a1)
{
  NSObject *current_queue;
  _QWORD block[5];

  if (!*(_BYTE *)(a1 + 776))
  {
    if (sub_10075EC34())
    {
      current_queue = dispatch_get_current_queue();
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10084AD88;
      block[3] = &unk_10212ECA0;
      block[4] = a1;
      dispatch_async(current_queue, block);
    }
  }
}

uint64_t sub_100848E34(_QWORD *a1)
{
  NSObject *v2;
  _QWORD *v3;
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  int v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t result;
  const char *v16;
  uint8_t *v17;
  const char *v18;
  uint8_t *v19;
  _DWORD v20[4];
  _BYTE v21[24];
  _BYTE *v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint8_t buf[4];
  _BOOL4 v26;

  if (!a1[96])
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CLGnssController::applyDeviceOperatingContext invoked when gps is not running ", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      LOWORD(v20[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLGnssController::applyDeviceOperatingContext invoked when gps is not running ", v20, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssController::applyDeviceOperatingContext()", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
    goto LABEL_37;
  }
  if (!(*(unsigned int (**)(void))(*(_QWORD *)*a1 + 40))())
  {
    v8 = *((_DWORD *)a1 + 171);
    v9 = *((_DWORD *)a1 + 151);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v10 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240192;
      v26 = v8 != v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "CLGnssController::applyDeviceOperatingContext,device restart not initiated,assistance restart needed,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v20[0] = 67240192;
      v20[1] = v8 != v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLGnssController::applyDeviceOperatingContext,device restart not initiated,assistance restart needed,%{public}d", v20, 8);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssController::applyDeviceOperatingContext()", "%s\n", v18);
      if (v19 != buf)
        free(v19);
    }
    if (v8 != v9)
    {
      v11 = a1[94];
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 48))(v11);
      v12 = a1[80];
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 48))(v12);
    }
    goto LABEL_37;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLGnssController::applyDeviceOperatingContext,device restart initiated", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    LOWORD(v20[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLGnssController::applyDeviceOperatingContext,device restart initiated", v20, 2);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssController::applyDeviceOperatingContext()", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  sub_100270E34((uint64_t)v23, (uint64_t)(a1 + 91));
  sub_10023E678(a1, (uint64_t)v23);
  v3 = v24;
  if (v24 == v23)
  {
    v4 = 4;
    v3 = v23;
    goto LABEL_31;
  }
  if (v24)
  {
    v4 = 5;
LABEL_31:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  sub_100270E34((uint64_t)v21, (uint64_t)(a1 + 77));
  sub_10023E450((uint64_t)a1, (uint64_t)v21);
  v13 = v22;
  if (v22 == v21)
  {
    v14 = 4;
    v13 = v21;
  }
  else
  {
    if (!v22)
      goto LABEL_37;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_37:
  result = *a1;
  if (*a1)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 312))(result, (uint64_t)a1 + 604);
  return result;
}

void sub_100849364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  char *v20;
  char *v22;
  uint64_t v23;

  v22 = a16;
  if (a16 == v20)
  {
    v23 = 4;
    v22 = &a13;
  }
  else
  {
    if (!a16)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1008493C0(int *a1)
{
  tm *v2;
  tm *v3;
  NSObject *v4;
  int v5;
  int tm_yday;
  NSObject *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  const char *v12;
  uint8_t *v13;
  int v14;
  int v15;
  const char *v16;
  uint8_t *v17;
  uint64_t v18;
  time_t v19;
  int v20;
  _BYTE v21[10];
  int v22;
  uint8_t buf[4];
  _BYTE v24[10];
  int v25;

  v19 = 0;
  time(&v19);
  v2 = localtime(&v19);
  if (v2->tm_yday != *a1)
  {
    v3 = v2;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *a1;
      tm_yday = v3->tm_yday;
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)v24 = v5;
      *(_WORD *)&v24[4] = 1026;
      *(_DWORD *)&v24[6] = tm_yday;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#raven,resetRuntime,startYearDay,old,%{public}d,new,%{public}d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v14 = *a1;
      v15 = v3->tm_yday;
      v20 = 67240448;
      *(_DWORD *)v21 = v14;
      *(_WORD *)&v21[4] = 1026;
      *(_DWORD *)&v21[6] = v15;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#raven,resetRuntime,startYearDay,old,%{public}d,new,%{public}d", &v20, 14);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssController::RavenBudgetController::tryResetRuntime()", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
    *a1 = v3->tm_yday;
    *((_QWORD *)a1 + 1) = 0;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v8 = *((_QWORD *)a1 + 1);
    v9 = a1[4];
    *(_DWORD *)buf = 134349312;
    *(_QWORD *)v24 = v8;
    *(_WORD *)&v24[8] = 1026;
    v25 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#raven,todayRuntime,%{public}.1f,budget,%{public}d,sec", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v10 = *((_QWORD *)a1 + 1);
    v11 = a1[4];
    v20 = 134349312;
    *(_QWORD *)v21 = v10;
    *(_WORD *)&v21[8] = 1026;
    v22 = v11;
    LODWORD(v18) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#raven,todayRuntime,%{public}.1f,budget,%{public}d,sec", &v20, v18);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssController::RavenBudgetController::tryResetRuntime()", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
}

void sub_100849734(uint64_t a1)
{
  double v2;
  NSObject *v3;
  uint64_t v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  double v11;

  if (!*(_BYTE *)(a1 + 800))
  {
    v2 = sub_100849878(a1, 0);
    sub_1008521D0(a1);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v5[0] = 68289538;
      v5[1] = 0;
      v6 = 2082;
      v7 = "";
      v8 = 1026;
      v9 = 1;
      v10 = 2050;
      v11 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"GnssStopTimer\", \"run\":%{public}hhd, \"debounce\":\"%{public}f\"}", (uint8_t *)v5, 0x22u);
    }
    sub_1008523E8(a1 + 2624, 16, v2);
    *(_BYTE *)(a1 + 800) = 1;
    v4 = *(_QWORD *)(a1 + 1184);
    if (v4)
      sub_10003A15C(v4, 3, 1);
  }
}

double sub_100849878(uint64_t a1, int a2)
{
  double v4;
  unsigned int v5;
  double v6;
  _BOOL4 v7;
  int v8;
  int v9;
  BOOL v10;
  NSObject *v12;
  int v13;
  _BOOL4 v14;
  uint64_t v15;
  _BOOL4 v16;
  double v17;
  int v18;
  int v19;
  NSObject *v20;
  _BOOL4 v21;
  double v22;
  NSObject *v24;
  int v25;
  int v27;
  _BOOL4 v28;
  const char *v29;
  uint8_t *v30;
  _BOOL4 v31;
  const char *v32;
  uint8_t *v33;
  int v34;
  const char *v35;
  uint8_t *v36;
  uint64_t v37;
  int v38;
  _BYTE v39[10];
  _BYTE v40[6];
  __int16 v41;
  _BOOL4 v42;
  uint8_t buf[4];
  _BYTE v44[10];
  _BYTE v45[6];
  __int16 v46;
  _BOOL4 v47;

  v4 = sub_10075F1BC();
  v5 = *(_DWORD *)(a1 + 600) & 0xFFFFFFFE;
  v6 = sub_1001FCBB4() - *(double *)(a1 + 2776);
  v7 = !*(_BYTE *)(a1 + 1269) && !*(_BYTE *)(a1 + 784) && *(_BYTE *)(a1 + 2792) != 0;
  if (*(_BYTE *)(a1 + 80))
    v8 = v7;
  else
    v8 = 1;
  if (v6 > 1.0)
    v9 = v8;
  else
    v9 = 0;
  if (*(_BYTE *)(a1 + 1270))
    v10 = 1;
  else
    v10 = v5 == 10;
  if (!v10 && v9 == 0)
  {
    if (v6 <= 1.0)
      v19 = v8;
    else
      v19 = 0;
    if (v19 == 1)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v20 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v21 = *(_BYTE *)(a1 + 80) == 0;
        *(_DWORD *)buf = 67240704;
        *(_DWORD *)v44 = v21;
        *(_WORD *)&v44[4] = 1026;
        *(_DWORD *)&v44[6] = v7;
        *(_WORD *)v45 = 1026;
        *(_DWORD *)&v45[2] = 1;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "CLGnssController,min debounce,reason,noFix,%{public}d,lowBenefit,%{public}d,sessLength,%{public}d", buf, 0x14u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102156068);
        v31 = *(_BYTE *)(a1 + 80) == 0;
        v38 = 67240704;
        *(_DWORD *)v39 = v31;
        *(_WORD *)&v39[4] = 1026;
        *(_DWORD *)&v39[6] = v7;
        *(_WORD *)v40 = 1026;
        *(_DWORD *)&v40[2] = 1;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLGnssController,min debounce,reason,noFix,%{public}d,lowBenefit,%{public}d,sessLength,%{public}d", &v38, 20);
        v33 = (uint8_t *)v32;
        sub_100512490("Generic", 1, 0, 2, "double CLGnssController::computeDebounceDurationSeconds(const BOOL) const", "%s\n", v32);
        if (v33 != buf)
          free(v33);
      }
      v4 = *(double *)(a1 + 3104);
    }
    if (sub_10075F2EC())
    {
      v22 = *(double *)(a1 + 3104);
      if (*(_BYTE *)(a1 + 80))
      {
        if (!(sub_1001133C0(*(double *)(a1 + 88), *(double *)(a1 + 96)) ? v19 : 1))
          v22 = 30.0;
      }
      if (*(_BYTE *)(a1 + 176) && *(double *)(a1 + 184) + *(double *)(a1 + 192) * -2.0 > 50.0)
        v22 = 120.0;
      if (v22 >= (double)*(int *)(a1 + 804))
        v22 = (double)*(int *)(a1 + 804);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v24 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v25 = *(_DWORD *)(a1 + 804);
        *(_DWORD *)buf = 134349312;
        *(double *)v44 = v22;
        *(_WORD *)&v44[8] = 1026;
        *(_DWORD *)v45 = v25;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "CLGnssController,extended debounce,%{public}f,numFixesSinceFirst,%{public}d", buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102156068);
        v34 = *(_DWORD *)(a1 + 804);
        v38 = 134349312;
        *(double *)v39 = v22;
        *(_WORD *)&v39[8] = 1026;
        *(_DWORD *)v40 = v34;
        LODWORD(v37) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLGnssController,extended debounce,%{public}f,numFixesSinceFirst,%{public}d", &v38, v37);
        v36 = (uint8_t *)v35;
        sub_100512490("Generic", 1, 0, 2, "double CLGnssController::computeDebounceDurationSeconds(const BOOL) const", "%s\n", v35);
        if (v36 != buf)
          free(v36);
      }
      if (v4 < v22)
        v4 = v22;
    }
    if (a2)
    {
      if (v19)
        v16 = v4 <= *(double *)(a1 + 3104);
      else
        v16 = 0;
      v15 = a1;
      v17 = v6;
      v18 = v16;
      goto LABEL_61;
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v12 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v13 = *(unsigned __int8 *)(a1 + 1270);
      v14 = *(_BYTE *)(a1 + 80) == 0;
      *(_DWORD *)buf = 67240960;
      *(_DWORD *)v44 = v13;
      *(_WORD *)&v44[4] = 1026;
      *(_DWORD *)&v44[6] = v5 == 10;
      *(_WORD *)v45 = 1026;
      *(_DWORD *)&v45[2] = v14;
      v46 = 1026;
      v47 = v7;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "CLGnssController,skip debounce,reason,conformance,%{public}d,background,%{public}d,noFix,%{public}d,lowBenefit,%{public}d", buf, 0x1Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v27 = *(unsigned __int8 *)(a1 + 1270);
      v28 = *(_BYTE *)(a1 + 80) == 0;
      v38 = 67240960;
      *(_DWORD *)v39 = v27;
      *(_WORD *)&v39[4] = 1026;
      *(_DWORD *)&v39[6] = v5 == 10;
      *(_WORD *)v40 = 1026;
      *(_DWORD *)&v40[2] = v28;
      v41 = 1026;
      v42 = v7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLGnssController,skip debounce,reason,conformance,%{public}d,background,%{public}d,noFix,%{public}d,lowBenefit,%{public}d", &v38, 26);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "double CLGnssController::computeDebounceDurationSeconds(const BOOL) const", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v4 = 0.0;
    if (a2 && !*(_BYTE *)(a1 + 1270) && v5 != 10)
    {
      v15 = a1;
      v16 = v8;
      v17 = v6;
      v18 = 0;
LABEL_61:
      sub_1008557F4(v15, v16, v18, v17);
    }
  }
  return v4;
}

void sub_100849EE4(uint64_t a1)
{
  uint64_t *v2;
  _BYTE *v3;
  uint64_t v4;
  char *v5;

  v2 = *(uint64_t **)(a1 + 760);
  if (v2 && !*(_BYTE *)(a1 + 2617))
    sub_10171D0DC(v2);
  sub_10023DD10(a1);
  v3 = *(_BYTE **)(a1 + 1056);
  if (v3)
    sub_100234B84(v3);
  v4 = *(_QWORD *)(a1 + 1096);
  if (v4)
    sub_10023A210(v4);
  v5 = *(char **)(a1 + 1048);
  if (v5)
    sub_10022B10C(v5);
}

uint64_t sub_100849F48(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  sub_10023DD48((uint64_t)a1);
  v2 = a1[131];
  if (v2)
    sub_1000314C4(v2);
  v3 = a1[137];
  if (v3)
    sub_10023A3A8(v3);
  result = a1[132];
  if (result)
    return sub_100234D24();
  return result;
}

void sub_100849F94(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;

  *(_BYTE *)(a1 + 776) = 0;
  sub_10006028C(a1 + 2624, 3);
  v2 = *(_QWORD *)(a1 + 488);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v4[0] = 68289282;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    v7 = 2082;
    v8 = "clientStop";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s}", (uint8_t *)v4, 0x1Cu);
  }
}

uint64_t sub_10084A0A0(uint64_t a1)
{
  NSObject *v2;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289282;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    v7 = 2082;
    v8 = "shutdown";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s}", (uint8_t *)v4, 0x1Cu);
  }
  *(_BYTE *)(a1 + 776) = 0;
  return sub_10006028C(a1 + 2624, 4);
}

uint64_t (***sub_10084A198(uint64_t (***result)(), int a2))()
{
  uint64_t (***v2)();
  int v3;

  v2 = result;
  *((_DWORD *)result + 150) = a2;
  if (a2 != 11)
  {
    if (a2 == 10)
    {
      result = sub_10084ACA0((uint64_t)result);
      v3 = 1;
      goto LABEL_6;
    }
    if (a2)
      return result;
  }
  result = sub_10084ABB8((uint64_t)result);
  v3 = 0;
LABEL_6:
  *((_DWORD *)v2 + 151) = v3;
  return result;
}

uint64_t sub_10084A1EC(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLGnssController::handleDeviceDisconnect,disconnected", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLGnssController::handleDeviceDisconnect,disconnected", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssController::handleDeviceDisconnect()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  *(_BYTE *)(a1 + 8) = 0;
  return sub_10006028C(a1 + 2624, 6);
}

uint64_t sub_10084A38C(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLGnssController::handleDeviceConnect,connected", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLGnssController::handleDeviceConnect,connected", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssController::handleDeviceConnect()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  *(_BYTE *)(a1 + 8) = 1;
  return sub_10006028C(a1 + 2624, 5);
}

uint64_t sub_10084A530(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "CLGnssController::handleApWake", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "CLGnssController::handleApWake", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssController::handleApWake()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  *(_BYTE *)(a1 + 1272) = 0;
  return sub_10006028C(a1 + 2624, 7);
}

uint64_t sub_10084A6D0(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "CLGnssController::handleApSleep", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "CLGnssController::handleApSleep", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssController::handleApSleep()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  *(_BYTE *)(a1 + 1272) = 1;
  return sub_10006028C(a1 + 2624, 8);
}

uint64_t sub_10084A874(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLGnssController::handleNilrBegin", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLGnssController::handleNilrBegin", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssController::handleNilrBegin()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  *(_BYTE *)(a1 + 1297) = 1;
  return sub_10006028C(a1 + 2624, 13);
}

uint64_t sub_10084AA18(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLGnssController::handleNilrEnd", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLGnssController::handleNilrEnd", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssController::handleNilrEnd()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  *(_BYTE *)(a1 + 1297) = 0;
  return sub_10006028C(a1 + 2624, 14);
}

uint64_t (***sub_10084ABB8(uint64_t a1))()
{
  uint64_t (***v2)();
  uint64_t v3;
  uint64_t (***result)();
  uint64_t v5;
  uint64_t (**v6)();
  uint64_t v7;
  uint64_t (***v8)();

  v6 = off_102157798;
  v7 = a1;
  v8 = &v6;
  sub_100858318(&v6, (_QWORD *)(a1 + 616));
  v2 = v8;
  if (v8 == &v6)
  {
    v3 = 4;
    v2 = &v6;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v3 = 5;
  }
  (*v2)[v3]();
LABEL_6:
  v6 = off_102157818;
  v7 = a1;
  v8 = &v6;
  sub_100858318(&v6, (_QWORD *)(a1 + 648));
  result = v8;
  if (v8 == &v6)
  {
    v5 = 4;
    result = &v6;
  }
  else
  {
    if (!v8)
      return result;
    v5 = 5;
  }
  return (uint64_t (***)())(*result)[v5]();
}

uint64_t (***sub_10084ACA0(uint64_t a1))()
{
  uint64_t (***v2)();
  uint64_t v3;
  uint64_t (***result)();
  uint64_t v5;
  uint64_t (**v6)();
  uint64_t v7;
  uint64_t (***v8)();

  v6 = off_102157898;
  v7 = a1;
  v8 = &v6;
  sub_100858318(&v6, (_QWORD *)(a1 + 616));
  v2 = v8;
  if (v8 == &v6)
  {
    v3 = 4;
    v2 = &v6;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v3 = 5;
  }
  (*v2)[v3]();
LABEL_6:
  v6 = off_102157918;
  v7 = a1;
  v8 = &v6;
  sub_100858318(&v6, (_QWORD *)(a1 + 648));
  result = v8;
  if (v8 == &v6)
  {
    v5 = 4;
    result = &v6;
  }
  else
  {
    if (!v8)
      return result;
    v5 = 5;
  }
  return (uint64_t (***)())(*result)[v5]();
}

void sub_10084AD88(uint64_t a1)
{
  sub_10084AD90(*(_QWORD *)(a1 + 32));
}

void sub_10084AD90(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 1056);
  if (v2)
    sub_10132DDA4(v2);
  v3 = *(_QWORD *)(a1 + 1048);
  if (v3)
    sub_100EB0244(v3);
}

void sub_10084ADCC(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  _BOOL4 v5;
  _BOOL4 v6;
  NSObject *v7;
  int v8;
  NSObject *v9;
  std::string *v10;
  NSObject *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  int v22;
  __int128 v23;
  int v24;
  __int128 v25;
  int v26;
  __int128 v27;
  int v28;
  std::string __p;
  uint64_t buf;
  __int16 v31;
  const char *v32;
  __int16 v33;
  _BYTE v34[10];
  _BOOL4 v35;
  __int16 v36;
  _BOOL4 v37;

  v4 = (uint64_t)a1 + 1276;
  v5 = sub_100CD599C((uint64_t)a1 + 1276);
  v6 = sub_100CD599C((uint64_t)a2);
  v20 = *((unsigned __int8 *)a1 + 2544);
  *((_BYTE *)a1 + 2544) = sub_100CD593C((uint64_t)a2);
  *((_BYTE *)a1 + 2546) = sub_100CD597C((uint64_t)a2);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102156528);
  v7 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *((unsigned __int8 *)a1 + 2544);
    buf = 68289538;
    v31 = 2082;
    v32 = "";
    v33 = 1026;
    *(_DWORD *)v34 = v20;
    *(_WORD *)&v34[4] = 1026;
    *(_DWORD *)&v34[6] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#thumper, Updating emergency state\", \"wasInWifiEmergency\":%{public}d, \"fInWifiEmergency\":%{public}d}", (uint8_t *)&buf, 0x1Eu);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102156528);
  }
  v9 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    sub_100CD5278(a2, &__p);
    v10 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    buf = 68289794;
    v31 = 2082;
    v32 = "";
    v33 = 2082;
    *(_QWORD *)v34 = v10;
    *(_WORD *)&v34[8] = 1026;
    v35 = v5;
    v36 = 1026;
    v37 = v6;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"GnssEvent\", \"state\":%{public, location:escape_only}s, \"wasInEmergency\":%{public}hhd, \"inEmergencyNow\":%{public}hhd}", (uint8_t *)&buf, 0x28u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (!sub_100CD597C(v4) && sub_100CD597C((uint64_t)a2))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102156528);
    v11 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *((unsigned __int8 *)a1 + 1269);
      v13 = *((unsigned __int8 *)a1 + 1270);
      buf = 68289538;
      v31 = 2082;
      v32 = "";
      v33 = 1026;
      *(_DWORD *)v34 = v12;
      *(_WORD *)&v34[4] = 1026;
      *(_DWORD *)&v34[6] = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EmgContext\", \"SimulationMode\":%{public}d, \"ConformanceMode\":%{public}d}", (uint8_t *)&buf, 0x1Eu);
    }
    v14 = a1[147];
    if (v14)
      sub_10173AD04(v14);
    v15 = a1[148];
    if (v15)
      sub_101750830(v15);
  }
  v16 = *(_OWORD *)a2;
  *(_DWORD *)(v4 + 16) = a2[4];
  *(_OWORD *)v4 = v16;
  v17 = a1[131];
  if (v17)
  {
    v27 = *(_OWORD *)a2;
    v28 = a2[4];
    sub_100EB3284(v17, (uint64_t)&v27);
  }
  if (v5 || !v6)
  {
    v18 = *a1;
    if (!v5 || v6)
    {
      v21 = *(_OWORD *)a2;
      v22 = a2[4];
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v18 + 320))(v18, &v21);
    }
    else
    {
      v23 = *(_OWORD *)a2;
      v24 = a2[4];
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v18 + 320))(v18, &v23);
      sub_10006028C((uint64_t)(a1 + 328), 12);
      *((_BYTE *)a1 + 2545) = 0;
    }
  }
  else
  {
    sub_10006028C((uint64_t)(a1 + 328), 11);
    v19 = *a1;
    v25 = *(_OWORD *)a2;
    v26 = a2[4];
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v19 + 320))(v19, &v25);
    *(_BYTE *)(*a1 + 1096) = 1;
    *((_BYTE *)a1 + 2545) = 1;
  }
  if (v20 && !*((_BYTE *)a1 + 2544) && *((_DWORD *)a1 + 348) == 3 && *((_BYTE *)a1 + 1344))
  {
    if (a1[147])
    {
      sub_1017E1D24((uint64_t)(a1 + 163));
      sub_10173A0F4(a1[147], (uint64_t)(a1 + 163));
      sub_1017E2B94((uint64_t)(a1 + 163));
    }
  }
}

void sub_10084B1F0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  NSObject *v8;
  int v9;
  uint64_t v10;
  char v11;
  char v12;
  NSObject *v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  NSObject *v19;
  int v20;
  int v21;
  const char *v22;
  uint8_t *v23;
  _DWORD v24[4];
  uint8_t buf[8];
  __int16 v26;
  const char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;

  v6 = (uint64_t)(a1 + 322);
  if (sub_1001F8DEC(a1 + 322, (int *)a2))
  {
    *(_QWORD *)buf = a2;
    v7 = sub_10085EDC0(v6, (int *)a2, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    sub_10084B628((uint64_t)(v7 + 3), (uint64_t *)a2);
    *((_BYTE *)a1 + 1296) = *(_BYTE *)(a2 + 4);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v9 = *((unsigned __int8 *)a1 + 1296);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v26 = 2082;
      v27 = "";
      v28 = 1026;
      v29 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Emergency Settings\", \"HELO state\":%{public}hhd}", buf, 0x18u);
    }
    v10 = a1[131];
    if (v10)
      sub_100EB4638(v10, *(unsigned __int8 *)(a2 + 4));
    if (sub_1000C4240())
    {
      v11 = *((_BYTE *)a1 + 2616);
      *(_QWORD *)buf = a2;
      *((_BYTE *)sub_10085EDC0(v6, (int *)a2, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 29) = v11 ^ 1;
      v12 = *((_BYTE *)a1 + 2616);
      *(_QWORD *)buf = a2;
      *((_BYTE *)sub_10085EDC0(v6, (int *)a2, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 128) = v12;
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v13 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v14 = *(_DWORD *)a2;
        *(_QWORD *)buf = a2;
        v15 = *((unsigned __int8 *)sub_10085EDC0(v6, (int *)a2, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 29);
        *(_QWORD *)buf = a2;
        v16 = *((unsigned __int8 *)sub_10085EDC0(v6, (int *)a2, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 128);
        *(_DWORD *)buf = 68289794;
        *(_DWORD *)&buf[4] = 0;
        v26 = 2082;
        v27 = "";
        v28 = 1026;
        v29 = v14;
        v30 = 1026;
        v31 = v15;
        v32 = 1026;
        v33 = v16;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Emergency Settings\", \"sim\":%{public}d, \"enableEarlyReturnDuringEmergencyMode\":%{public}hhd, \"configureVerticalUncertainty\":%{public}hhd}", buf, 0x24u);
      }
    }
    v17 = *a1;
    *(_QWORD *)buf = a2;
    v18 = sub_10085EDC0(v6, (int *)a2, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v17 + 328))(v17, v18 + 3, a3);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v19 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v20 = *(_DWORD *)a2;
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "#Warning, Unexpected SimInstance,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v21 = *(_DWORD *)a2;
      v24[0] = 67240192;
      v24[1] = v21;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#Warning, Unexpected SimInstance,%{public}d", v24, 8);
      v23 = (uint8_t *)v22;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssController::handleEmergencySettingsChange(const CLEmergencyController::LocationSettings &, CLEmergencyController::SettingsChangedReason)", "%s\n", v22);
      if (v23 != buf)
        free(v23);
    }
  }
}

uint64_t sub_10084B628(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  v6 = *((_OWORD *)a2 + 5);
  v5 = *((_OWORD *)a2 + 6);
  v7 = *((_OWORD *)a2 + 4);
  *(_QWORD *)(a1 + 112) = a2[14];
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v5;
  *(_OWORD *)(a1 + 64) = v7;
  v8 = *((_OWORD *)a2 + 1);
  v9 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 48) = v9;
  *(_OWORD *)(a1 + 16) = v8;
  sub_1008584B8(a1 + 120, (uint64_t)(a2 + 15));
  std::string::operator=((std::string *)(a1 + 936), (const std::string *)a2 + 39);
  std::string::operator=((std::string *)(a1 + 960), (const std::string *)a2 + 40);
  v10 = a2[123];
  *(_DWORD *)(a1 + 992) = *((_DWORD *)a2 + 248);
  *(_QWORD *)(a1 + 984) = v10;
  v11 = a2[131];
  v13 = *(_OWORD *)(a2 + 127);
  v12 = *(_OWORD *)(a2 + 129);
  *(_OWORD *)(a1 + 1000) = *(_OWORD *)(a2 + 125);
  *(_OWORD *)(a1 + 1016) = v13;
  *(_OWORD *)(a1 + 1032) = v12;
  *(_QWORD *)(a1 + 1048) = v11;
  *(_BYTE *)(a1 + 1056) = *((_BYTE *)a2 + 1056);
  std::string::operator=((std::string *)(a1 + 1064), (const std::string *)(a2 + 133));
  v14 = *(_OWORD *)((char *)a2 + 1100);
  *(_OWORD *)(a1 + 1088) = *((_OWORD *)a2 + 68);
  *(_OWORD *)(a1 + 1100) = v14;
  if ((uint64_t *)a1 == a2)
  {
    *(_BYTE *)(a1 + 1144) = *((_BYTE *)a2 + 1144);
    std::string::operator=((std::string *)(a1 + 1152), (const std::string *)a2 + 48);
    v16 = *(_OWORD *)((char *)a2 + 1188);
    *(_OWORD *)(a1 + 1176) = *(_OWORD *)(a2 + 147);
    *(_OWORD *)(a1 + 1188) = v16;
  }
  else
  {
    sub_100858B44(a1 + 1120, (std::string *)a2[140], (__int128 *)a2[141], 0xAAAAAAAAAAAAAAABLL * ((a2[141] - a2[140]) >> 4));
    *(_BYTE *)(a1 + 1144) = *((_BYTE *)a2 + 1144);
    std::string::operator=((std::string *)(a1 + 1152), (const std::string *)a2 + 48);
    v15 = *(_OWORD *)(a2 + 147);
    *(_OWORD *)(a1 + 1188) = *(_OWORD *)((char *)a2 + 1188);
    *(_OWORD *)(a1 + 1176) = v15;
    sub_100858B44(a1 + 1208, (std::string *)a2[151], (__int128 *)a2[152], 0xAAAAAAAAAAAAAAABLL * ((a2[152] - a2[151]) >> 4));
  }
  std::string::operator=((std::string *)(a1 + 1232), (const std::string *)(a2 + 154));
  std::string::operator=((std::string *)(a1 + 1256), (const std::string *)(a2 + 157));
  std::string::operator=((std::string *)(a1 + 1280), (const std::string *)(a2 + 160));
  std::string::operator=((std::string *)(a1 + 1304), (const std::string *)(a2 + 163));
  return a1;
}

uint64_t sub_10084B7E8(_BYTE *a1, uint64_t a2)
{
  NSObject *v4;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  int v10;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v6[0] = 68289282;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    v9 = 1026;
    v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"NILR lockout status\", \"locked\":%{public}hhd}", (uint8_t *)v6, 0x18u);
  }
  a1[2547] = a2;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)a1 + 336))(*(_QWORD *)a1, a2);
  return sub_10006028C((uint64_t)(a1 + 2624), 17);
}

void sub_10084B8FC(uint64_t a1@<X0>, int a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  double v8;
  double v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  float v20;
  float v21;
  char v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  __int128 v28;

  *(_DWORD *)a4 = 0xFFFF;
  *(_QWORD *)(a4 + 12) = 0;
  *(_QWORD *)(a4 + 4) = 0;
  *(_OWORD *)(a4 + 20) = xmmword_101BAFC90;
  *(_QWORD *)(a4 + 36) = 0xBFF0000000000000;
  *(_QWORD *)(a4 + 44) = 0xBFF0000000000000;
  *(_QWORD *)(a4 + 52) = 0xBFF0000000000000;
  *(_QWORD *)(a4 + 60) = 0xBFF0000000000000;
  *(_QWORD *)(a4 + 68) = 0xBFF0000000000000;
  *(_QWORD *)(a4 + 76) = 0xBFF0000000000000;
  *(_DWORD *)(a4 + 84) = 0;
  *(_QWORD *)(a4 + 96) = 0;
  *(_QWORD *)(a4 + 104) = 0;
  *(_QWORD *)(a4 + 88) = 0xBFF0000000000000;
  *(_DWORD *)(a4 + 112) = 0;
  *(_QWORD *)(a4 + 116) = 0xBFF0000000000000;
  *(_DWORD *)(a4 + 124) = 0x7FFFFFFF;
  *(_QWORD *)(a4 + 136) = 0;
  *(_QWORD *)(a4 + 144) = 0;
  *(_BYTE *)(a4 + 152) = 0;
  *(_QWORD *)(a4 + 128) = 0;
  sub_10012A33C(a4 + 160);
  *(_QWORD *)(a4 + 76) = *(_QWORD *)(a1 + 8);
  *(_OWORD *)(a4 + 4) = *(_OWORD *)(a1 + 56);
  v8 = *(double *)(a1 + 80);
  *(double *)(a4 + 28) = *(double *)(a1 + 72) - v8;
  *(_DWORD *)(a4 + 132) = 1;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a4 + 44) = _Q1;
  if (*(_BYTE *)(a1 + 144))
    *(_OWORD *)(a4 + 44) = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(a4 + 60) = _Q1;
  if (*(_BYTE *)(a1 + 168))
    *(_OWORD *)(a4 + 60) = *(_OWORD *)(a1 + 176);
  v14 = *(double *)(a1 + 96);
  v15 = *(_QWORD *)(a1 + 104);
  *(double *)(a4 + 20) = v14;
  *(_QWORD *)(a4 + 36) = v15;
  *(_QWORD *)(a4 + 88) = 0x4020000000000000;
  if (v14 < 149.0)
    v16 = 1;
  else
    v16 = 9;
  *(_DWORD *)(a4 + 96) = v16;
  if (v14 >= 149.0)
    v17 = 72;
  else
    v17 = 90;
  *(_DWORD *)(a4 + 84) = v17;
  v18 = *(_DWORD *)(a1 + 140);
  if ((v18 - 3) < 2)
  {
    v19 = 75;
  }
  else if ((v18 - 1) > 1)
  {
    if (v14 >= 149.0)
      v19 = 50;
    else
      v19 = 75;
  }
  else
  {
    *(_DWORD *)(a4 + 84) = 68;
    v19 = 25;
  }
  *(_DWORD *)(a4 + 128) = v19;
  *(_OWORD *)(a4 + 184) = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(a4 + 504) = *(_QWORD *)(a1 + 32);
  *(float32x2_t *)(a4 + 200) = vcvt_f32_f64(*(float64x2_t *)(a1 + 112));
  v20 = *(double *)(a1 + 128);
  *(float *)(a4 + 208) = v20;
  *(_DWORD *)(a4 + 472) = *(_DWORD *)(a1 + 88);
  v21 = v8;
  *(float *)(a4 + 476) = v21;
  if (*(_DWORD *)(a1 + 292) == 3)
    v22 = 1;
  else
    v22 = a3;
  *(_BYTE *)(a4 + 672) = v22;
  if (*(_BYTE *)(a1 + 216))
  {
    *(_OWORD *)(a4 + 160) = *(_OWORD *)(a1 + 224);
    *(_QWORD *)(a4 + 176) = *(_QWORD *)(a1 + 240);
  }
  if (a2)
  {
    sub_100D02724(a1 + 248, &v28);
    sub_1002B7674(a4 + 680, &v28);
    v23 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
    if (*((_QWORD *)&v28 + 1))
    {
      v24 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
  }
  v26 = *(int *)(a1 + 288);
  if (v26 > 4)
    v27 = 0;
  else
    v27 = dword_101BE4814[v26];
  *(_DWORD *)(a4 + 696) = v27;
}

void sub_10084BB48(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100261F44(v1 + 680);
  _Unwind_Resume(a1);
}

uint64_t sub_10084BB5C(uint64_t a1, uint64_t *a2)
{
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  int v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  std::__shared_weak_count *v33;

  v14 = 0xFFFF;
  v16 = 0;
  v15 = 0;
  v17 = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  v18 = _Q0;
  v19 = _Q0;
  v20 = _Q0;
  v21 = 0;
  v23 = 0;
  v24 = 0;
  v22 = 0xBFF0000000000000;
  v25 = 0;
  v26 = 0xBFF0000000000000;
  v27 = 0x7FFFFFFF;
  v29 = 0;
  v30 = 0;
  v28 = 0;
  v31 = 0;
  sub_10012A33C(&v32);
  v9 = sub_10084CDA8(a1, a2, (uint64_t)&v14);
  v10 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return v9;
}

void sub_10084BC40(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100261F44(v1 + 680);
  _Unwind_Resume(a1);
}

void sub_10084BC54(_BYTE *a1, uint64_t a2)
{
  long double v4;
  double v5;
  double *v6;
  double v7;
  double v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  std::string *v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  std::string *v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  const char *v48;
  uint8_t *v49;
  std::string v50;
  const char *v51;
  uint8_t v52[4];
  _BYTE v53[14];
  __int16 v54;
  _BYTE v55[10];
  uint64_t v56;
  _BYTE v57[10];
  __int16 v58;
  _BYTE v59[10];
  double v60;
  _BYTE v61[10];
  __int16 v62;
  _BYTE v63[10];
  _BYTE v64[10];
  _BYTE v65[10];
  long double v66;
  uint64_t v67;
  int v68;
  __int16 v69;
  double v70;
  __int16 v71;
  uint64_t v72;
  __int16 v73;
  uint64_t v74;
  __int16 v75;
  uint64_t v76;
  __int16 v77;
  uint64_t v78;
  __int16 v79;
  uint64_t v80;
  __int16 v81;
  unint64_t v82;
  __int16 v83;
  unint64_t v84;
  __int16 v85;
  unint64_t v86;
  __int16 v87;
  int v88;
  __int16 v89;
  int v90;
  __int16 v91;
  int v92;
  __int16 v93;
  int v94;
  __int16 v95;
  int v96;
  __int16 v97;
  double v98;
  __int16 v99;
  int v100;
  __int16 v101;
  int v102;
  __int16 v103;
  unint64_t v104;
  __int16 v105;
  int v106;
  __int16 v107;
  int v108;
  __int16 v109;
  uint64_t v110;
  __int16 v111;
  uint64_t v112;
  __int16 v113;
  int v114;
  uint8_t buf[4];
  const char *v116;
  _BYTE v117[6];
  __int16 v118;
  uint64_t v119;
  __int16 v120;
  uint64_t v121;
  __int16 v122;
  uint64_t v123;
  __int16 v124;
  std::string *v125;
  __int16 v126;
  double v127;
  __int16 v128;
  uint64_t v129;
  __int16 v130;
  uint64_t v131;
  __int16 v132;
  double v133;
  __int16 v134;
  uint64_t v135;
  __int16 v136;
  long double v137;
  __int16 v138;
  int v139;
  __int16 v140;
  int v141;
  __int16 v142;
  double v143;
  __int16 v144;
  uint64_t v145;
  __int16 v146;
  uint64_t v147;
  _BYTE v148[20];
  __int16 v149;
  _BYTE v150[10];
  unint64_t v151;
  __int16 v152;
  unint64_t v153;
  __int16 v154;
  unint64_t v155;
  __int16 v156;
  int v157;
  __int16 v158;
  int v159;
  __int16 v160;
  int v161;
  __int16 v162;
  int v163;
  __int16 v164;
  int v165;
  __int16 v166;
  double v167;
  __int16 v168;
  int v169;
  __int16 v170;
  int v171;
  __int16 v172;
  unint64_t v173;
  __int16 v174;
  int v175;
  __int16 v176;
  int v177;
  __int16 v178;
  uint64_t v179;
  __int16 v180;
  uint64_t v181;
  __int16 v182;
  int v183;

  v51 = 0;
  sub_100073658((int *)&v51 + 1, &v51, *(double *)(a2 + 16));
  sub_1015A2E04(&v50, "TTF");
  if (!a1[2769])
  {
    if (fabs(*(double *)(a2 + 96)) < 30.0)
      *(_OWORD *)(*(_QWORD *)a1 + 1184) = *(_OWORD *)(a2 + 56);
    a1[2769] = 1;
  }
  if (a1[2768])
  {
    v4 = -1.0;
    if (a1[80])
    {
      v5 = *(double *)(a2 + 8) - *((double *)a1 + 5);
      v6 = (double *)*((_QWORD *)a1 + 149);
      if (v6)
        v4 = sub_10011E634(v6, *(double *)(a2 + 56), *(double *)(a2 + 64), *((double *)a1 + 11), *((double *)a1 + 12), *(double *)(a2 + 72));
    }
    else
    {
      v5 = 0.0;
    }
  }
  else
  {
    a1[2768] = 1;
    v7 = sub_1001FCBB4();
    v8 = *((double *)a1 + 347);
    std::string::assign(&v50, "TTFF");
    v5 = v7 - v8;
    *(_DWORD *)(*(_QWORD *)a1 + 208) = (int)v5;
    v4 = -1.0;
  }
  if (qword_1022A02F0 != -1)
    dispatch_once(&qword_1022A02F0, &stru_102156568);
  v9 = qword_1022A02F8;
  if (os_log_type_enabled((os_log_t)qword_1022A02F8, OS_LOG_TYPE_DEBUG))
  {
    v10 = *(_QWORD *)(a2 + 56);
    v11 = *(_QWORD *)(a2 + 64);
    if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = &v50;
    else
      v12 = (std::string *)v50.__r_.__value_.__r.__words[0];
    v13 = *(double *)(a2 + 80);
    v14 = *(double *)(a2 + 72) - v13;
    v15 = *(_QWORD *)(a2 + 96);
    v16 = *(_QWORD *)(a2 + 104);
    v17 = *(_QWORD *)(a2 + 152);
    v18 = *(_QWORD *)(a2 + 160);
    v19 = *(_QWORD *)(a2 + 176);
    v20 = *(_QWORD *)(a2 + 184);
    v21 = *(_QWORD *)(a2 + 112);
    v22 = *(_QWORD *)(a2 + 120);
    v23 = *(_QWORD *)(a2 + 128);
    v24 = *(float *)(a2 + 44);
    v26 = *(_QWORD *)(a2 + 200);
    v25 = *(_QWORD *)(a2 + 208);
    v27 = *(_DWORD *)(a2 + 292);
    *(_DWORD *)buf = 136324354;
    v116 = "CL-GPSsa";
    *(_WORD *)v117 = 1024;
    *(_DWORD *)&v117[2] = 1;
    v118 = 2048;
    v119 = v10;
    v120 = 2048;
    v121 = v11;
    v122 = 2048;
    v123 = v15;
    v124 = 2080;
    v125 = v12;
    v126 = 2048;
    v127 = v5;
    v128 = 2048;
    v129 = v17;
    v130 = 2048;
    v131 = v19;
    v132 = 2048;
    v133 = v14;
    v134 = 2048;
    v135 = v16;
    v136 = 2048;
    v137 = v4;
    v138 = 1024;
    v139 = HIDWORD(v51);
    v140 = 1024;
    v141 = (int)v51;
    v142 = 2048;
    v143 = v13;
    v144 = 2048;
    v145 = v18;
    v146 = 2048;
    v147 = v20;
    *(_WORD *)v148 = 2048;
    *(_QWORD *)&v148[2] = v21;
    *(_WORD *)&v148[10] = 2048;
    *(_QWORD *)&v148[12] = v22;
    v149 = 2048;
    *(_QWORD *)v150 = v23;
    *(_WORD *)&v150[8] = 2048;
    v151 = 0xBFF0000000000000;
    v152 = 2048;
    v153 = 0xBFF0000000000000;
    v154 = 2048;
    v155 = 0xBFF0000000000000;
    v156 = 1024;
    v157 = -1;
    v158 = 1024;
    v159 = -1;
    v160 = 1024;
    v161 = -1;
    v162 = 1024;
    v163 = -1;
    v164 = 1024;
    v165 = -1;
    v166 = 2048;
    v167 = v24;
    v168 = 1024;
    v169 = -1;
    v170 = 1024;
    v171 = -1;
    v172 = 2048;
    v173 = 0xBFF0000000000000;
    v174 = 1024;
    v175 = -1;
    v176 = 1024;
    v177 = 75;
    v178 = 2048;
    v179 = v26;
    v180 = 2048;
    v181 = v25;
    v182 = 1024;
    v183 = v27;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,%s,%.2lf,Speed,%.3lf,Course,%.4lf,Altitude,%.3lf,VerticalAccuracy,%.3lf,Distance,%.3lf,Week,%u,TowMs,%u,Undulation,%.3f,SpeedAccuracy,%.3lf,CourseAccuracy,%.4lf,A,%.3f,B,%.3f,AZ,%.4f,HDOP,%.1f,VDOP,%.1f,ODOM,%.3f,LP,%d,SA,%d,R,%d,VTOW,%d,CTOW,%d,TUNC,%.3f,NS,%d,MS,%d,AgeOfPowerMode,%.1lf,SQI,%d,integrity,%d,VerticalSpeed,%.3lf,VerticalSpeedAccuracy,%.3lf,imag,%d", buf, 0x140u);
  }
  v28 = sub_1001BFF7C(117, 2);
  if ((_DWORD)v28)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02F0 != -1)
      dispatch_once(&qword_1022A02F0, &stru_102156568);
    v30 = *(_QWORD *)(a2 + 56);
    v31 = *(_QWORD *)(a2 + 64);
    if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v32 = &v50;
    else
      v32 = (std::string *)v50.__r_.__value_.__r.__words[0];
    v33 = *(double *)(a2 + 80);
    v34 = *(double *)(a2 + 72) - v33;
    v35 = *(_QWORD *)(a2 + 96);
    v36 = *(_QWORD *)(a2 + 104);
    v37 = *(_QWORD *)(a2 + 152);
    v38 = *(_QWORD *)(a2 + 160);
    v39 = *(_QWORD *)(a2 + 176);
    v40 = *(_QWORD *)(a2 + 184);
    v41 = *(_QWORD *)(a2 + 112);
    v42 = *(_QWORD *)(a2 + 120);
    v43 = *(_QWORD *)(a2 + 128);
    v44 = *(float *)(a2 + 44);
    v46 = *(_QWORD *)(a2 + 200);
    v45 = *(_QWORD *)(a2 + 208);
    v47 = *(_DWORD *)(a2 + 292);
    *(_DWORD *)v52 = 136324354;
    *(_QWORD *)v53 = "CL-GPSsa";
    *(_WORD *)&v53[8] = 1024;
    *(_DWORD *)&v53[10] = 1;
    v54 = 2048;
    *(_QWORD *)v55 = v30;
    *(_WORD *)&v55[8] = 2048;
    v56 = v31;
    *(_WORD *)v57 = 2048;
    *(_QWORD *)&v57[2] = v35;
    v58 = 2080;
    *(_QWORD *)v59 = v32;
    *(_WORD *)&v59[8] = 2048;
    v60 = v5;
    *(_WORD *)v61 = 2048;
    *(_QWORD *)&v61[2] = v37;
    v62 = 2048;
    *(_QWORD *)v63 = v39;
    *(_WORD *)&v63[8] = 2048;
    *(double *)v64 = v34;
    *(_WORD *)&v64[8] = 2048;
    *(_QWORD *)v65 = v36;
    *(_WORD *)&v65[8] = 2048;
    v66 = v4;
    LOWORD(v67) = 1024;
    *(_DWORD *)((char *)&v67 + 2) = HIDWORD(v51);
    HIWORD(v67) = 1024;
    v68 = (int)v51;
    v69 = 2048;
    v70 = v33;
    v71 = 2048;
    v72 = v38;
    v73 = 2048;
    v74 = v40;
    v75 = 2048;
    v76 = v41;
    v77 = 2048;
    v78 = v42;
    v79 = 2048;
    v80 = v43;
    v81 = 2048;
    v82 = 0xBFF0000000000000;
    v83 = 2048;
    v84 = 0xBFF0000000000000;
    v85 = 2048;
    v86 = 0xBFF0000000000000;
    v87 = 1024;
    v88 = -1;
    v89 = 1024;
    v90 = -1;
    v91 = 1024;
    v92 = -1;
    v93 = 1024;
    v94 = -1;
    v95 = 1024;
    v96 = -1;
    v97 = 2048;
    v98 = v44;
    v99 = 1024;
    v100 = -1;
    v101 = 1024;
    v102 = -1;
    v103 = 2048;
    v104 = 0xBFF0000000000000;
    v105 = 1024;
    v106 = -1;
    v107 = 1024;
    v108 = 75;
    v109 = 2048;
    v110 = v46;
    v111 = 2048;
    v112 = v45;
    v113 = 1024;
    v114 = v47;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02F8, 2, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,%s,%.2lf,Speed,%.3lf,Course,%.4lf,Altitude,%.3lf,VerticalAccuracy,%.3lf,Distance,%.3lf,Week,%u,TowMs,%u,Undulation,%.3f,SpeedAccuracy,%.3lf,CourseAccuracy,%.4lf,A,%.3f,B,%.3f,AZ,%.4f,HDOP,%.1f,VDOP,%.1f,ODOM,%.3f,LP,%d,SA,%d,R,%d,VTOW,%d,CTOW,%d,TUNC,%.3f,NS,%d,MS,%d,AgeOfPowerMode,%.1lf,SQI,%d,integrity,%d,VerticalSpeed,%.3lf,VerticalSpeedAccuracy,%.3lf,imag,%d", (const char *)v52, 320, *(double *)&v50.__r_.__value_.__l.__data_, *(double *)&v50.__r_.__value_.__l.__size_, *(double *)&v50.__r_.__value_.__r.__words[2], v51);
    v49 = (uint8_t *)v48;
    v28 = sub_100512490("LOCATION", 1, 0, 2, "void CLGnssController::logGPS(const GNSS::PerEpochData &)", "%s\n", v48);
    if (v49 != buf)
      free(v49);
  }
  *(_DWORD *)buf = 0;
  CLMotionActivity::getInit((CLMotionActivity *)v28);
  BYTE6(v145) = 0;
  *(_DWORD *)((char *)&v145 + 2) = 0;
  *(_QWORD *)&v150[2] = 0;
  LODWORD(v147) = 0;
  memset(v148, 0, 17);
  sub_10084F134(a1, buf);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v29 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)v52 = 68293122;
    *(_WORD *)&v53[4] = 2082;
    *(_DWORD *)v53 = 0;
    *(_QWORD *)&v53[6] = "";
    v54 = 1026;
    *(_DWORD *)v55 = *(_DWORD *)buf;
    *(_WORD *)&v55[4] = 1026;
    *(_DWORD *)&v55[6] = HIDWORD(v116);
    LOWORD(v56) = 1026;
    *(_DWORD *)((char *)&v56 + 2) = *(_DWORD *)v117;
    HIWORD(v56) = 1026;
    *(_DWORD *)v57 = v119;
    *(_WORD *)&v57[4] = 1026;
    *(_DWORD *)&v57[6] = HIDWORD(v119);
    v58 = 1026;
    *(_DWORD *)v59 = BYTE3(v145);
    *(_WORD *)&v59[4] = 1026;
    *(_DWORD *)&v59[6] = BYTE4(v145);
    LOWORD(v60) = 1026;
    *(_DWORD *)((char *)&v60 + 2) = BYTE5(v145);
    HIWORD(v60) = 1026;
    *(_DWORD *)v61 = v147;
    *(_WORD *)&v61[4] = 1026;
    *(_DWORD *)&v61[6] = BYTE1(v147);
    v62 = 1026;
    *(_DWORD *)v63 = BYTE2(v147);
    *(_WORD *)&v63[4] = 1026;
    *(_DWORD *)&v63[6] = BYTE3(v147);
    *(_WORD *)v64 = 2050;
    *(_QWORD *)&v64[2] = *(_QWORD *)v148;
    *(_WORD *)v65 = 2050;
    *(_QWORD *)&v65[2] = *(_QWORD *)&v148[8];
    LOWORD(v66) = 1026;
    *(_DWORD *)((char *)&v66 + 2) = v148[16];
    HIWORD(v66) = 2050;
    v67 = *(_QWORD *)&v150[2];
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"PerEpoch\", \"signalEnvironment\":%{public}d, \"motionState\":%{public}d, \"motionConfidence\":%{public}d, \"mountedState\":%{public}d, \"mountedConfidence\":%{public}d, \"isRecentlyStepping\":%{public}d, \"isFullDutyCycleNeeded\":%{public}d, \"allowGnssIns\":%{public}d, \"wasAccelSent\":%{public}d, \"wasGyroSent\":%{public}d, \"wasPressureSent\":%{public}d, \"wasDemSent\":%{public}d, \"demAlt\":\"%{public}f\", \"demAltUnc\":\"%{public}f\", \"wasMapDotSent\":%{public}d, \"mapDot\":\"%{public}f\"}", v52, 0x7Eu);
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
}

void sub_10084C3AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10084C3D8(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  const char *v34;
  uint8_t *v35;
  int v36;
  const char *v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  int v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  int v63;
  uint8_t buf[4];
  const char *v65;
  __int16 v66;
  uint64_t v67;
  __int16 v68;
  uint64_t v69;
  __int16 v70;
  uint64_t v71;
  __int16 v72;
  uint64_t v73;
  __int16 v74;
  uint64_t v75;
  __int16 v76;
  int v77;
  __int16 v78;
  uint64_t v79;
  __int16 v80;
  uint64_t v81;
  __int16 v82;
  uint64_t v83;
  __int16 v84;
  uint64_t v85;
  __int16 v86;
  uint64_t v87;
  __int16 v88;
  uint64_t v89;
  __int16 v90;
  int v91;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102156548);
  v5 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a2 + 4);
    v7 = "Vendor";
    v8 = *(_QWORD *)(a2 + 12);
    v9 = *(_QWORD *)(a2 + 20);
    if (a3)
      v7 = "";
    v10 = *(_QWORD *)(a2 + 44);
    v11 = *(_QWORD *)(a2 + 60);
    v12 = *(unsigned __int8 *)(a2 + 672);
    v13 = *(_QWORD *)(a2 + 28);
    v14 = *(_QWORD *)(a2 + 36);
    v15 = *(_QWORD *)(a2 + 144);
    v16 = *(_QWORD *)(a2 + 52);
    v17 = *(_QWORD *)(a2 + 68);
    v18 = *(_QWORD *)(a2 + 76);
    v19 = *(unsigned __int8 *)(a2 + 792);
    *(_DWORD *)buf = 136449539;
    v65 = v7;
    v66 = 2049;
    v67 = v6;
    v68 = 2049;
    v69 = v8;
    v70 = 2050;
    v71 = v9;
    v72 = 2049;
    v73 = v10;
    v74 = 2049;
    v75 = v11;
    v76 = 1026;
    v77 = v12;
    v78 = 2049;
    v79 = v13;
    v80 = 2050;
    v81 = v14;
    v82 = 2049;
    v83 = v15;
    v84 = 2050;
    v85 = v16;
    v86 = 2050;
    v87 = v17;
    v88 = 2050;
    v89 = v18;
    v90 = 1026;
    v91 = v19;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "@ClxGps%{public}s, Fix, 1, ll, %{private}.7f, %{private}.7f, acc, %{public}.2f, speed, %{private}.1f, course, %{private}.1f, imag, %{public}d, alt, %{private}.1f, altunc, %{public}.1f, ellipsoidalAlt, %{private}.1f, speedUnc, %{public}.1f, courseUnc, %{public}.1f, timestamp, %{public}.3f, isGnssLocationService, %{public}d", buf, 0x86u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102156548);
    v20 = "Vendor";
    v21 = *(_QWORD *)(a2 + 4);
    v22 = *(_QWORD *)(a2 + 12);
    if (a3)
      v20 = "";
    v23 = *(_QWORD *)(a2 + 20);
    v24 = *(_QWORD *)(a2 + 44);
    v25 = *(_QWORD *)(a2 + 60);
    v26 = *(unsigned __int8 *)(a2 + 672);
    v27 = *(_QWORD *)(a2 + 28);
    v28 = *(_QWORD *)(a2 + 36);
    v29 = *(_QWORD *)(a2 + 144);
    v30 = *(_QWORD *)(a2 + 52);
    v31 = *(_QWORD *)(a2 + 68);
    v32 = *(_QWORD *)(a2 + 76);
    v33 = *(unsigned __int8 *)(a2 + 792);
    v36 = 136449539;
    v37 = v20;
    v38 = 2049;
    v39 = v21;
    v40 = 2049;
    v41 = v22;
    v42 = 2050;
    v43 = v23;
    v44 = 2049;
    v45 = v24;
    v46 = 2049;
    v47 = v25;
    v48 = 1026;
    v49 = v26;
    v50 = 2049;
    v51 = v27;
    v52 = 2050;
    v53 = v28;
    v54 = 2049;
    v55 = v29;
    v56 = 2050;
    v57 = v30;
    v58 = 2050;
    v59 = v31;
    v60 = 2050;
    v61 = v32;
    v62 = 1026;
    v63 = v33;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@ClxGps%{public}s, Fix, 1, ll, %{private}.7f, %{private}.7f, acc, %{public}.2f, speed, %{private}.1f, course, %{private}.1f, imag, %{public}d, alt, %{private}.1f, altunc, %{public}.1f, ellipsoidalAlt, %{private}.1f, speedUnc, %{public}.1f, courseUnc, %{public}.1f, timestamp, %{public}.3f, isGnssLocationService, %{public}d", &v36, 134);
    v35 = (uint8_t *)v34;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssController::logLocation(const GNSS::DaemonLocation &, BOOL)", "%s\n", v34);
    if (v35 != buf)
      free(v35);
  }
}

void sub_10084C714(_QWORD *a1, double a2)
{
  uint64_t *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  double v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  NSObject *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint8_t *v29;
  uint64_t v30;
  const char *v31;
  uint8_t *v32;
  uint64_t v33;
  _BYTE v34[24];
  uint8_t buf[4];
  _BYTE v36[18];

  v2 = a1 + 381;
  if (a1[381])
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v4 = *v2;
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)v36 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "constructRavenCtrl,fRavenController,exists,%{public}p,abort", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v5 = *v2;
      *(_DWORD *)v34 = 134349056;
      *(_QWORD *)&v34[4] = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "constructRavenCtrl,fRavenController,exists,%{public}p,abort", v34, 12, *(_OWORD *)v34, *(_QWORD *)&v34[16]);
LABEL_19:
      v13 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssController::constructRavenController(const CFTimeInterval)", "%s\n", v6);
      if (v13 != buf)
        free(v13);
    }
  }
  else
  {
    v9 = *((double *)a1 + 385);
    if (v9 >= 0.0)
    {
      if (v9 < a2)
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102156068);
        v14 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          v15 = a1[385];
          *(_DWORD *)buf = 134349312;
          *(double *)v36 = a2;
          *(_WORD *)&v36[8] = 2050;
          *(_QWORD *)&v36[10] = v15;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "constructRavenCtrl,start,now,%{public}.3f,toEnable,%{public}.3f", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102156068);
          v27 = a1[385];
          *(_DWORD *)v34 = 134349312;
          *(double *)&v34[4] = a2;
          *(_WORD *)&v34[12] = 2050;
          *(_QWORD *)&v34[14] = v27;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "constructRavenCtrl,start,now,%{public}.3f,toEnable,%{public}.3f", v34, 22);
          v29 = (uint8_t *)v28;
          sub_100512490("Generic", 1, 0, 2, "void CLGnssController::constructRavenController(const CFTimeInterval)", "%s\n", v28);
          if (v29 != buf)
            free(v29);
        }
        sub_100C84620(a1[99], (uint64_t)(a1 + 383), buf);
        sub_1002B7674((uint64_t)v2, (__int128 *)buf);
        v16 = *(std::__shared_weak_count **)&v36[4];
        if (*(_QWORD *)&v36[4])
        {
          v17 = (unint64_t *)(*(_QWORD *)&v36[4] + 8);
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        v19 = a1[381];
        v20 = a1[382];
        if (v20)
        {
          v21 = (unint64_t *)(v20 + 16);
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        a1[383] = v19;
        v23 = (std::__shared_weak_count *)a1[384];
        a1[384] = v20;
        if (v23)
          std::__shared_weak_count::__release_weak(v23);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102156068);
        v24 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          v25 = *v2;
          *(_DWORD *)buf = 134349056;
          *(_QWORD *)v36 = v25;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "constructRavenCtrl,finish,%{public}p", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102156068);
          v30 = *v2;
          *(_DWORD *)v34 = 134349056;
          *(_QWORD *)&v34[4] = v30;
          LODWORD(v33) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "constructRavenCtrl,finish,%{public}p", v34, v33);
          v32 = (uint8_t *)v31;
          sub_100512490("Generic", 1, 0, 2, "void CLGnssController::constructRavenController(const CFTimeInterval)", "%s\n", v31);
          if (v32 != buf)
            free(v32);
        }
        if (*v2)
        {
          sub_100C849CC(*v2);
          if (*a1)
            (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 256))(*a1);
          v26 = a1[386];
          if (v26)
          {
            *(double *)(v26 + 24) = a2;
            *(_BYTE *)(v26 + 32) = 1;
          }
        }
        else
        {
          a1[385] = 0x7FEFFFFFFFFFFFFFLL;
        }
        sub_10084D58C(a1);
      }
    }
    else
    {
      *((double *)a1 + 385) = a2 + 10.0;
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v10 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v11 = a1[385];
        *(_DWORD *)buf = 134349312;
        *(double *)v36 = a2;
        *(_WORD *)&v36[8] = 2050;
        *(_QWORD *)&v36[10] = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "constructRavenCtrl,deferred,now,%{public}.3f,toEnable,%{public}.3f", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102156068);
        v12 = a1[385];
        *(_DWORD *)v34 = 134349312;
        *(double *)&v34[4] = a2;
        *(_WORD *)&v34[12] = 2050;
        *(_QWORD *)&v34[14] = v12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "constructRavenCtrl,deferred,now,%{public}.3f,toEnable,%{public}.3f", v34, 22, *(_QWORD *)v34, *(_OWORD *)&v34[8]);
        goto LABEL_19;
      }
    }
  }
}

uint64_t sub_10084CDA8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  void *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  NSObject *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  const char *v39;
  uint8_t *v40;
  uint64_t v41;
  const char *v42;
  uint8_t *v43;
  const char *v44;
  uint8_t *v45;
  double v46;
  double v47;
  _OWORD v48[8];
  _OWORD v49[2];
  _BYTE v50[513];
  uint64_t v51;
  std::__shared_weak_count *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  char v59;
  std::__shared_weak_count *v60;
  void *__p;
  char v62;
  std::__shared_weak_count *v63;
  id v64;
  int v65;
  uint64_t v66;
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  uint64_t v70;
  __int16 v71;
  uint64_t v72;
  uint8_t buf[4];
  uint64_t v74;
  __int16 v75;
  uint64_t v76;
  __int16 v77;
  uint64_t v78;
  __int16 v79;
  uint64_t v80;
  _BYTE v81[96];
  __int128 v82;
  __int128 v83;
  _BYTE v84[28];
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  char v96;

  if (*(_BYTE *)(a1 + 784))
    return 0;
  if (!*(_QWORD *)(a1 + 360))
    return 0;
  v6 = *(_QWORD *)(a1 + 3048);
  if (!v6 || !sub_100C91410(v6))
    return 0;
  sub_100129CA0((uint64_t)v48);
  if (sub_100C91450(*(_QWORD *)(a1 + 3048), (uint64_t)v48, a3))
  {
    sub_100C94F80(*(_QWORD *)(a1 + 3048));
    sub_100C94AF8(*(_QWORD *)(a1 + 3048));
  }
  v3 = sub_100C93234(*(_QWORD *)(a1 + 3048), a2, (uint64_t)v48, a3);
  if ((_DWORD)v3)
  {
    *(_QWORD *)&v81[12] = 0;
    *(_QWORD *)&v81[4] = 0;
    *(_OWORD *)&v81[20] = xmmword_101BAFC90;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)&v81[36] = _Q0;
    *(_OWORD *)&v81[52] = _Q0;
    *(_OWORD *)&v81[68] = _Q0;
    *(_DWORD *)v81 = 0xFFFF;
    *(_DWORD *)&v81[84] = 0;
    *(_QWORD *)&v81[88] = 0xBFF0000000000000;
    v82 = 0uLL;
    *(_QWORD *)((char *)&v83 + 4) = 0xBFF0000000000000;
    LODWORD(v83) = 0;
    HIDWORD(v83) = 0x7FFFFFFF;
    memset(v84, 0, 25);
    sub_10012A33C(&v85);
    v82 = v48[6];
    v83 = v48[7];
    *(_OWORD *)v84 = v49[0];
    *(_OWORD *)&v84[12] = *(_OWORD *)((char *)v49 + 12);
    *(_OWORD *)&v81[32] = v48[2];
    *(_OWORD *)&v81[48] = v48[3];
    *(_OWORD *)&v81[64] = v48[4];
    *(_OWORD *)&v81[80] = v48[5];
    *(_OWORD *)v81 = v48[0];
    *(_OWORD *)&v81[16] = v48[1];
    memcpy(v14, v50, 0x201uLL);
    sub_100349198(&v88, &v51);
    v94 = v57;
    v95 = v58;
    v90 = v53;
    v91 = v54;
    v92 = v55;
    v93 = v56;
    v96 = v59;
    sub_100C94F80(*(_QWORD *)(a1 + 3048));
    sub_100C94AF8(*(_QWORD *)(a1 + 3048));
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v15 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      v16 = *a2;
      *(_DWORD *)buf = 134218752;
      v74 = v87;
      v75 = 2048;
      v76 = v16;
      v77 = 2048;
      v78 = *(_QWORD *)&v81[76];
      v79 = 2048;
      v80 = v86;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "#Raven,yield at,%.3lf,requested,%.3lf,deviceTimeOfFix,%.3lf,trueTimeOfFix,%.3lf", buf, 0x2Au);
    }
    v17 = sub_1001BFF7C(115, 2);
    if ((_DWORD)v17)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v41 = *a2;
      v65 = 134218752;
      v66 = v87;
      v67 = 2048;
      v68 = v41;
      v69 = 2048;
      v70 = *(_QWORD *)&v81[76];
      v71 = 2048;
      v72 = v86;
      LODWORD(v46) = 42;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Raven,yield at,%.3lf,requested,%.3lf,deviceTimeOfFix,%.3lf,trueTimeOfFix,%.3lf", COERCE_DOUBLE(&v65), v46, v47, *(double *)v48);
      v43 = (uint8_t *)v42;
      v17 = sub_100512490("Generic", 1, 0, 2, "BOOL CLGnssController::yieldRavenSolution(const CFTimeInterval &, const GNSS::DaemonLocation &)", "%s\n", v42);
      if (v43 != buf)
        free(v43);
    }
    sub_10084C3D8(v17, (uint64_t)v81, 1);
    v18 = *(_QWORD *)(a1 + 360);
    if (!v18)
      sub_10025FD1C();
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v18 + 48))(v18, v81);
    v19 = *(_QWORD *)(a1 + 2552);
    if (v19)
      sub_10098C810(v19, (uint64_t)v81);
    v20 = v89;
    if (v89)
    {
      p_shared_owners = (unint64_t *)&v89->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v23 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      v24 = *a2;
      *(_DWORD *)buf = 134217984;
      v74 = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "#Raven,no yield at,%.3lf", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v38 = *a2;
      *(_DWORD *)v81 = 134217984;
      *(_QWORD *)&v81[4] = v38;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Raven,no yield at,%.3lf", COERCE_DOUBLE(v81));
      v40 = (uint8_t *)v39;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGnssController::yieldRavenSolution(const CFTimeInterval &, const GNSS::DaemonLocation &)", "%s\n", v39);
      if (v40 != buf)
        free(v40);
    }
  }
  v25 = *(_QWORD *)(a1 + 3088);
  if (v25)
  {
    if (!*(_BYTE *)(v25 + 32))
    {
      v27 = *(double *)(v25 + 8);
      goto LABEL_33;
    }
    v26 = *(double *)(v25 + 24);
    if (v26 <= *(double *)a2)
    {
      v27 = *(double *)a2 + *(double *)(v25 + 8) - v26;
LABEL_33:
      if (!*(_BYTE *)(v25 + 20) || v27 > (double)*(int *)(v25 + 16))
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102156068);
        v28 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#raven,overDailyBudget,stop", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102156068);
          *(_WORD *)v81 = 0;
          LODWORD(v46) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#raven,overDailyBudget,stop", v81, *(_QWORD *)&v46);
          v45 = (uint8_t *)v44;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLGnssController::yieldRavenSolution(const CFTimeInterval &, const GNSS::DaemonLocation &)", "%s\n", v44);
          if (v45 != buf)
            free(v45);
        }
        sub_10001C254((_QWORD *)a1);
      }
    }
  }

  v29 = v63;
  if (v63)
  {
    v30 = (unint64_t *)&v63->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (v62 < 0)
    operator delete(__p);
  v32 = v60;
  if (v60)
  {
    v33 = (unint64_t *)&v60->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v52;
  if (v52)
  {
    v36 = (unint64_t *)&v52->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  return v3;
}

void sub_10084D54C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1004B4F0C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10084D58C(uint64_t *a1)
{
  uint64_t v1;
  std::string::size_type size;
  NSObject *v4;
  uint64_t v5;
  std::string::size_type v6;
  uint64_t v7;
  char *v8;
  std::string __p;
  unint64_t v10;
  uint8_t buf[8];
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *v15;

  v1 = a1[123];
  if (v1)
  {
    v10 = 0xBFF0000000000000;
    sub_10173F8D8(v1 + 24, (double *)&v10, &__p);
    if (a1[381])
    {
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = __p.__r_.__value_.__l.__size_;
      if (size)
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102156068);
        v4 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289282;
          *(_DWORD *)&buf[4] = 0;
          v12 = 2082;
          v13 = "";
          v14 = 2082;
          v15 = "#rof,injectRavenOrbitFile";
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
        }
        sub_100C8DBC8(a1[381], (uint64_t)&__p);
      }
    }
    v5 = *a1;
    if (*a1)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v6 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v6 = __p.__r_.__value_.__l.__size_;
      v7 = a1[123];
      v8 = (char *)(v7 + 24);
      if (*(char *)(v7 + 47) < 0)
        v8 = *(char **)v8;
      sub_1015A2E04(buf, v8);
      sub_100067B0C(v5 + 8, (const char *)buf, v6 == 0, 4, (double *)&v10);
      if (SBYTE3(v15) < 0)
        operator delete(*(void **)buf);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_10084D73C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10084D77C(uint64_t a1)
{
  double v2;
  double v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  uint64_t v10;
  uint8_t buf[4];
  uint64_t v12;

  v2 = sub_1001FCBB4();
  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(double *)(a1 + 24);
    if (v2 > v3)
      *(double *)(a1 + 8) = v2 - v3 + *(double *)(a1 + 8);
    *(_BYTE *)(a1 + 32) = 0;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 134349056;
    v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#raven,runtime,%{public}.1f,sec", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v6 = *(_QWORD *)(a1 + 8);
    v9 = 134349056;
    v10 = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#raven,runtime,%{public}.1f,sec", &v9, 12);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssController::RavenBudgetController::stopSession()", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
}

void sub_10084D958(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint8_t *v10;
  uint64_t v11;
  NSObject *v12;
  int v13;
  NSObject *v14;
  NSObject *v15;
  char v16;
  char v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  NSObject *v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  char v26;
  char v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  NSObject *v31;
  const char *v32;
  uint8_t *v33;
  const char *v34;
  uint8_t *v35;
  const char *v36;
  uint8_t *v37;
  uint64_t v38;
  int v39;
  int v40;
  uint8_t buf[8];
  _BYTE v42[10];
  __int16 v43;
  const char *v44;
  __int16 v45;
  int v46;

  v4 = *(_QWORD *)(a1 + 1248);
  if (v4)
    sub_100F6DFD0(v4, a2);
  v5 = *(_BYTE **)(a1 + 1256);
  if (v5)
    sub_100A0E608(v5, a2);
  if (*(_QWORD *)(a2 + 112) == 19)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_QWORD *)(a2 + 16);
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "handleHkWorkoutCallback,swimming,ignored,event,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v8 = *(_QWORD *)(a2 + 16);
      v39 = 67240192;
      v40 = v8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "handleHkWorkoutCallback,swimming,ignored,event,%{public}d", &v39, 8);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssController::handleHkWorkoutCallback(const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v9);
LABEL_56:
      if (v10 != buf)
        free(v10);
      return;
    }
    return;
  }
  v11 = *(_QWORD *)(a2 + 16);
  if (v11 == 1)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v14 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "handleHkWorkoutCallback,Stopped", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      LOWORD(v39) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "handleHkWorkoutCallback,Stopped", &v39, 2);
      v35 = (uint8_t *)v34;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssController::handleHkWorkoutCallback(const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v34);
      if (v35 != buf)
        free(v35);
    }
    if (**(_BYTE **)(a1 + 3096))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v15 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "handleHkWorkoutCallback,deconstructRavenController", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102156068);
        LOWORD(v39) = 0;
        LODWORD(v38) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "handleHkWorkoutCallback,deconstructRavenController", &v39, v38);
        v37 = (uint8_t *)v36;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssController::handleHkWorkoutCallback(const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v36);
        if (v37 != buf)
          free(v37);
      }
      sub_10001C254((_QWORD *)a1);
    }
    v13 = 0;
LABEL_35:
    **(_BYTE **)(a1 + 3096) = v13;
    if (*(_QWORD *)(a1 + 904))
    {
      sub_1001E4804(buf);
      LOBYTE(v39) = 0;
      v16 = sub_1001E4874(*(uint64_t *)buf, "EnableRteUpdateOnHkWorkoutSession", (BOOL *)&v39);
      if ((_BYTE)v39)
        v17 = 0;
      else
        v17 = v16;
      v18 = *(std::__shared_weak_count **)v42;
      if (!*(_QWORD *)v42)
        goto LABEL_43;
      v19 = (unint64_t *)(*(_QWORD *)v42 + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
        if ((v17 & 1) == 0)
          goto LABEL_44;
      }
      else
      {
LABEL_43:
        if ((v17 & 1) == 0)
        {
LABEL_44:
          sub_100221680(*(double **)(a1 + 904), v13, 0);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102156068);
          v21 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 68289538;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)v42 = 2082;
            *(_QWORD *)&v42[2] = "";
            v43 = 2082;
            v44 = "#rte,updateRteRofFileDownloadRateOnWorkoutOrFocusedNav";
            v45 = 1026;
            v46 = v13;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s, \"isHkWorkoutSession\":%{public}hhd}", buf, 0x22u);
          }
        }
      }
    }
    if (!*(_QWORD *)(a1 + 1000))
      return;
    sub_1001E4804(buf);
    LOBYTE(v39) = 0;
    v26 = sub_1001E4874(*(uint64_t *)buf, "EnableRteUpdateOnHkWorkoutSession", (BOOL *)&v39);
    if ((_BYTE)v39)
      v27 = 0;
    else
      v27 = v26;
    v28 = *(std::__shared_weak_count **)v42;
    if (!*(_QWORD *)v42)
      goto LABEL_67;
    v29 = (unint64_t *)(*(_QWORD *)v42 + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
      if ((v27 & 1) != 0)
        return;
    }
    else
    {
LABEL_67:
      if ((v27 & 1) != 0)
        return;
    }
    sub_100221680(*(double **)(a1 + 1000), v13, 1);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v31 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v42 = 2082;
      *(_QWORD *)&v42[2] = "";
      v43 = 2082;
      v44 = "#rof,updateRteRofFileDownloadRateOnWorkoutOrFocusedNav";
      v45 = 1026;
      v46 = v13;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s, \"isHkWorkoutSession\":%{public}hhd}", buf, 0x22u);
    }
    return;
  }
  if (!v11)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v12 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "handleHkWorkoutCallback,Started", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      LOWORD(v39) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "handleHkWorkoutCallback,Started", &v39, 2);
      v33 = (uint8_t *)v32;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssController::handleHkWorkoutCallback(const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v32);
      if (v33 != buf)
        free(v33);
    }
    v13 = 1;
    goto LABEL_35;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v22 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v23 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = v23;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "handleHkWorkoutCallback,Unhandled,eventType,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v24 = *(_QWORD *)(a2 + 16);
    v39 = 67240192;
    v40 = v24;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "handleHkWorkoutCallback,Unhandled,eventType,%{public}d", &v39, 8);
    v10 = (uint8_t *)v25;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssController::handleHkWorkoutCallback(const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v25);
    goto LABEL_56;
  }
}

void sub_10084E290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10084E2B0(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLGnssController::handleSleep,treat as a device disconnect event", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLGnssController::handleSleep,treat as a device disconnect event", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssController::handleSleep(CLGnssDeviceFacade::SleepLock)", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  *(_BYTE *)(a1 + 8) = 0;
  return sub_10006028C(a1 + 2624, 6);
}

void sub_10084E450(uint64_t *a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  uint64_t v10;
  void *__p[2];
  uint64_t v12;
  _WORD v13[8];
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  const char *v19;

  if (*a2)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289282;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2082;
      v19 = "injectassistancefile";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    v5 = *a1;
    v6 = *a2;
    if (*(char *)(*a2 + 47) < 0)
    {
      sub_100115CE4(__p, *(void **)(v6 + 24), *(_QWORD *)(v6 + 32));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)(v6 + 24);
      v12 = *(_QWORD *)(v6 + 40);
    }
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v5 + 72))(v5, __p);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
    v10 = a1[148];
    if (v10)
      sub_1017514B8(v10, 2);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "assistanceFile,null,invalid parameter", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v13[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "assistanceFile,null,invalid parameter", v13, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "void CLGnssController::handleAssistanceFileUpdated(std::shared_ptr<CLGnssAssistanceFile>)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
}

void sub_10084E6D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10084E6FC(uint64_t *a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  uint64_t v10;
  void *__p[2];
  uint64_t v12;
  _WORD v13[8];
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  const char *v19;

  if (*a2)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289282;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2082;
      v19 = "injectRealTimeEphemerisFile";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    v5 = *a1;
    v6 = *a2;
    if (*(char *)(*a2 + 47) < 0)
    {
      sub_100115CE4(__p, *(void **)(v6 + 24), *(_QWORD *)(v6 + 32));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)(v6 + 24);
      v12 = *(_QWORD *)(v6 + 40);
    }
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v5 + 160))(v5, __p);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
    v10 = a1[148];
    if (v10)
      sub_1017514B8(v10, 1);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "rteFile,null,invalid parameter", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v13[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "rteFile,null,invalid parameter", v13, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "void CLGnssController::handleAssistanceRteUpdated(std::shared_ptr<CLGnssAssistanceFile>)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
}

void sub_10084E984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10084E9A8(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if (*a2)
  {
    sub_10084D58C(a1);
    v3 = a1[148];
    if (v3)
      sub_1017514B8(v3, 4);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "#rof,null,invalid file parameter", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v7[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "#rof,null,invalid file parameter", v7, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "void CLGnssController::handleAssistanceRavenOrbitFileUpdated(std::shared_ptr<CLGnssAssistanceFile>)", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
}

void sub_10084EB74(uint64_t *a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  uint64_t v10;
  void *__p[2];
  uint64_t v12;
  _WORD v13[8];
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  const char *v19;

  if (*a2)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289282;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2082;
      v19 = "injectrtifile";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    v5 = *a1;
    v6 = *a2;
    if (*(char *)(*a2 + 47) < 0)
    {
      sub_100115CE4(__p, *(void **)(v6 + 24), *(_QWORD *)(v6 + 32));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)(v6 + 24);
      v12 = *(_QWORD *)(v6 + 40);
    }
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v5 + 176))(v5, __p);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
    v10 = a1[148];
    if (v10)
      sub_1017514B8(v10, 3);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "rtiFile,null,invalid parameter", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v13[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "rtiFile,null,invalid parameter", v13, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "void CLGnssController::handleAssistanceRtiUpdated(std::shared_ptr<CLGnssAssistanceFile>)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
}

void sub_10084EDFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10084EE20(_QWORD *a1)
{
  NSObject *v2;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289282;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    v7 = 2082;
    v8 = "injectapcfile";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s}", (uint8_t *)v4, 0x1Cu);
  }
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 192))(*a1);
}

void sub_10084EF18(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289282;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    v7 = 2082;
    v8 = "injectbroadcastephemerisfile";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s}", (uint8_t *)v4, 0x1Cu);
  }
  (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 208))(*a1);
  v3 = a1[148];
  if (v3)
    sub_1017514B8(v3, 1);
}

uint64_t sub_10084F020(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t result;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v6[0] = 68289282;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    v9 = 2082;
    v10 = "handleMeasurementFeatures";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s}", (uint8_t *)v6, 0x1Cu);
  }
  result = *(_QWORD *)(a1 + 552);
  if (result)
  {
    if (!*(_BYTE *)(a1 + 592))
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 48))(result, a2);
  }
  return result;
}

void sub_10084F134(_QWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = a1[136];
  if (v4)
    sub_1007942D0(v4, a2);
  v5 = a1[134];
  if (v5)
    sub_100A0D0D0(v5, (uint64_t)a2);
  v6 = a1[138];
  if (v6)
    sub_1017930DC(v6, (uint64_t)a2, 1.0);
  v7 = a1[144];
  if (v7)
    sub_1017E3FF0(v7, (uint64_t)a2, 1.0);
  v8 = a1[133];
  if (v8)
    sub_100B5ACF8(v8, (uint64_t)a2, 1.0);
}

void sub_10084F1B8(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  const char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  NSObject *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint8_t buf[4];
  int v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;

  v3 = (const char *)a2;
  switch(a2)
  {
    case 0u:
      if (*((_DWORD *)a3 + 20) == 1)
      {
        v5 = *a3;
        v6 = a3[1];
        v7 = a3[2];
        v8 = a3[3];
        v10 = a3[4];
        v9 = a3[5];
        v11 = a3[6];
        v22 = a3[7];
        v23 = *((_OWORD *)a3 + 4);
        v24 = a3[11];
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102156068);
        v12 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 68291843;
          v26 = 0;
          v27 = 2082;
          v28 = "";
          v29 = 2082;
          v30 = "DOT";
          v31 = 2050;
          v32 = v5;
          v33 = 2049;
          v34 = v8;
          v35 = 2049;
          v36 = v10;
          v37 = 2050;
          v38 = v11;
          v39 = 2050;
          v40 = v22;
          v41 = 2050;
          v42 = v23;
          v43 = 2049;
          v44 = v6;
          v45 = 2049;
          v46 = v7;
          v47 = 2050;
          v48 = v9;
          v49 = 2050;
          v50 = v24;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s, \"timestamp\":\"%{public}f\", \"lat\":\"%{private}.08f\", \"lon\":\"%{private}.08f\", \"directionOfTravel\":\"%{public}f\", \"directionOfTravelUnc\":\"%{public}f\", \"roadWidth\":\"%{public}f\", \"startLatitude\":\"%{private}.08f\", \"startLongitude\":\"%{private}.08f\", \"lengthOfLinearSegment\":\"%{public}f\", \"machtime\":\"%{public}f\"}", buf, 0x80u);
        }
        v13 = *(void (**)(void))(**(_QWORD **)a1 + 80);
        goto LABEL_13;
      }
      break;
    case 1u:
      v14 = *a3;
      v15 = a3[1];
      v16 = a3[2];
      v17 = a3[3];
      v18 = a3[4];
      v19 = a3[5];
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v20 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68290819;
        v26 = 0;
        v27 = 2082;
        v28 = "";
        v29 = 2082;
        v30 = "MMP";
        v31 = 2050;
        v32 = v14;
        v33 = 2049;
        v34 = v15;
        v35 = 2049;
        v36 = v16;
        v37 = 2050;
        v38 = v17;
        v39 = 2050;
        v40 = v18;
        v41 = 2050;
        v42 = v19;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s, \"timestamp\":\"%{public}f\", \"lat\":\"%{private}.08f\", \"lon\":\"%{private}.08f\", \"uncEllipseSemiMajor\":\"%{public}f\", \"uncEllipseSemiMinor\":\"%{public}f\", \"uncEllipseAzimuth\":\"%{public}f\"}", buf, 0x58u);
      }
      v13 = *(void (**)(void))(**(_QWORD **)a1 + 88);
LABEL_13:
      v13();
      break;
    case 2u:
    case 3u:
    case 6u:
      return;
    default:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v21 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68289282;
        v26 = 0;
        v27 = 2082;
        v28 = "";
        v29 = 2050;
        v30 = v3;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#Warning Unsupported notification\", \"notification\":%{public, location:CLGpsAssistant_Type::Notification}lld}", buf, 0x1Cu);
      }
      break;
  }
}

void sub_10084F598(double *a1, unsigned int a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  os_activity_scope_state_s state;
  char v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  uint64_t v17;

  CLProfilingIdentify("CLGnssController::setAccelData");
  objc_msgSend(objc_msgSend(*(id *)(a3 + 792), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102156048);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v9 = 1;
    v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssController::setAccelData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102156048);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2082;
      v15 = "activity";
      v16 = 2050;
      v17 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssController::setAccelData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v9 = 0;
  }
  sub_1008500C8(a3, a1, a2);
  if (v9)
    os_activity_scope_leave(&state);
}

void sub_10084F750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

BOOL sub_10084F770(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  NSObject *v11;
  _BOOL4 v12;
  _BOOL4 v13;
  int v14;
  NSObject *v15;
  _BOOL8 result;
  NSObject *v17;
  const char *v18;
  uint8_t *v19;
  const char *v20;
  const char *v21;
  uint8_t *v22;
  uint64_t v23;
  int v24;
  double v25;
  __int16 v26;
  double v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  uint8_t buf[4];
  double v35;
  __int16 v36;
  double v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;

  if (*a1)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v11 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134350080;
      v35 = a5;
      v36 = 2050;
      v37 = a6;
      v38 = 2050;
      v39 = a2;
      v40 = 2050;
      v41 = a3;
      v42 = 2050;
      v43 = a4;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning,GNSS_SEN,StartingSensorWhenAlreadyRunning,StoppingExisting,SampleRate,%{public}lf,ReportRate,%{public}lf,Callback,%{public}p,silo,%{public}p,context,%{public}p", buf, 0x34u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v24 = 134350080;
      v25 = a5;
      v26 = 2050;
      v27 = a6;
      v28 = 2050;
      v29 = a2;
      v30 = 2050;
      v31 = a3;
      v32 = 2050;
      v33 = a4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,GNSS_SEN,StartingSensorWhenAlreadyRunning,StoppingExisting,SampleRate,%{public}lf,ReportRate,%{public}lf,Callback,%{public}p,silo,%{public}p,context,%{public}p", &v24, 52);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGnssSensorAdapter<CLGyro, 0>::start(double, double, DataHandler, CLSilo *, void *) [SensorType = CLGyro, notification = 0]", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
  }
  if ((*(_QWORD *)&a6 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    goto LABEL_22;
  v12 = (*(_QWORD *)&a5 & 0x7FFFFFFFFFFFFFFFuLL) - 1 < 0xFFFFFFFFFFFFFLL;
  v13 = ((*(_QWORD *)&a5 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF;
  if (a5 >= 0.0)
  {
    v13 = 0;
    v12 = 0;
  }
  if ((*(_QWORD *)&a5 & 0x7FFFFFFFFFFFFFFFLL) == 0)
    v12 = 1;
  v14 = (*(_QWORD *)&a5 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000 || v12;
  if ((*(_QWORD *)&a5 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FF0000000000000)
    v14 = 1;
  if (a6 > a5 || ((v14 | v13) & 1) != 0 || a6 <= 0.0)
  {
LABEL_22:
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v15 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134349312;
      v35 = a5;
      v36 = 2050;
      v37 = a6;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "GNSS_SEN,InvalidParameters,sampleRate,%{public}lf,reportRate,%{public}lf", buf, 0x16u);
    }
    result = sub_1001BFF7C(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v24 = 134349312;
      v25 = a5;
      v26 = 2050;
      v27 = a6;
      LODWORD(v23) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "GNSS_SEN,InvalidParameters,sampleRate,%{public}lf,reportRate,%{public}lf", &v24, v23);
      v19 = (uint8_t *)v20;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLGnssSensorAdapter<CLGyro, 0>::start(double, double, DataHandler, CLSilo *, void *) [SensorType = CLGyro, notification = 0]", "%s\n", v20);
      goto LABEL_39;
    }
  }
  else
  {
    if (sub_10021C350())
      operator new();
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v17 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "GNSS_SEN,Could not get the sensor controller", buf, 2u);
    }
    result = sub_1001BFF7C(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      LOWORD(v24) = 0;
      LODWORD(v23) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "GNSS_SEN,Could not get the sensor controller", &v24, v23);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLGnssSensorAdapter<CLGyro, 0>::start(double, double, DataHandler, CLSilo *, void *) [SensorType = CLGyro, notification = 0]", "%s\n", v18);
LABEL_39:
      if (v19 != buf)
        free(v19);
      return 0;
    }
  }
  return result;
}

void sub_10084FD04(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_10024F88C(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_10084FD40(double *a1, unsigned int a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  os_activity_scope_state_s state;
  char v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  uint64_t v17;

  CLProfilingIdentify("CLGnssController::setGyroData");
  objc_msgSend(objc_msgSend(*(id *)(a3 + 792), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102156048);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v9 = 1;
    v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssController::setGyroData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102156048);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2082;
      v15 = "activity";
      v16 = 2050;
      v17 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssController::setGyroData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v9 = 0;
  }
  sub_100850934(a3, a1, a2);
  if (v9)
    os_activity_scope_leave(&state);
}

void sub_10084FEF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10084FF18(uint64_t *a1)
{
  uint64_t v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  v1 = *a1;
  if (*a1)
  {
    *a1 = 0;
    ((void (*)(uint64_t))a1[1])(v1);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v2 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "GNSS_SEN,Tried stopping when not running", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v5[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "GNSS_SEN,Tried stopping when not running", v5, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 0, "void CLGnssSensorAdapter<CLGyro, 0>::stop() [SensorType = CLGyro, notification = 0]", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
  }
}

void sub_1008500BC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_1008500C8(uint64_t a1, double *a2, unsigned int a3)
{
  NSObject *v4;
  const char *v5;
  char *v6;
  NSObject *v9;
  double v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  char *v14;
  double *v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  int v29;
  uint64_t v30;
  __int128 buf;
  char *v32;

  if (a3 - 101 > 0xFFFFFF9B)
  {
    if (sub_100850598(a2, a3, (uint64_t *)(a1 + 1224)))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v9 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v10 = *a2;
        LODWORD(buf) = 134349056;
        *(double *)((char *)&buf + 4) = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning,CLAccelerometer has sample before sleep,sampleTime,%{public}.6lf", (uint8_t *)&buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102156068);
        v11 = *(_QWORD *)a2;
        v29 = 134349056;
        v30 = v11;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,CLAccelerometer has sample before sleep,sampleTime,%{public}.6lf", &v29, 12);
        v6 = (char *)v12;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssController::setAccelData(const CLAccelerometer::Sample *, unsigned int)", "%s\n", v12);
        goto LABEL_19;
      }
    }
    else if (*(_QWORD *)(a1 + 1152))
    {
      buf = 0uLL;
      v32 = 0;
      sub_100803C28((void **)&buf, a3);
      v13 = 0;
      v14 = (char *)*((_QWORD *)&buf + 1);
      do
      {
        v15 = &a2[3 * v13];
        v16 = *(_QWORD *)v15;
        v18 = *((_DWORD *)v15 + 2);
        v17 = *((_DWORD *)v15 + 3);
        v19 = *((_DWORD *)v15 + 4);
        if (v14 >= v32)
        {
          v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v14[-buf] >> 3);
          v21 = v20 + 1;
          if (v20 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_100259694();
          if (0x5555555555555556 * ((uint64_t)&v32[-buf] >> 3) > v21)
            v21 = 0x5555555555555556 * ((uint64_t)&v32[-buf] >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v32[-buf] >> 3) >= 0x555555555555555)
            v22 = 0xAAAAAAAAAAAAAAALL;
          else
            v22 = v21;
          if (v22)
            v23 = (char *)sub_1002596A8((uint64_t)&v32, v22);
          else
            v23 = 0;
          v24 = &v23[24 * v20];
          *(_QWORD *)v24 = v16;
          v24[8] = 1;
          *((_DWORD *)v24 + 3) = v18;
          *((_DWORD *)v24 + 4) = v17;
          *((_DWORD *)v24 + 5) = v19;
          v25 = (char *)*((_QWORD *)&buf + 1);
          v26 = (char *)buf;
          v27 = v24;
          if (*((_QWORD *)&buf + 1) != (_QWORD)buf)
          {
            do
            {
              v28 = *(_OWORD *)(v25 - 24);
              *((_QWORD *)v27 - 1) = *((_QWORD *)v25 - 1);
              *(_OWORD *)(v27 - 24) = v28;
              v27 -= 24;
              v25 -= 24;
            }
            while (v25 != v26);
            v25 = (char *)buf;
          }
          v14 = v24 + 24;
          *(_QWORD *)&buf = v27;
          *((_QWORD *)&buf + 1) = v24 + 24;
          v32 = &v23[24 * v22];
          if (v25)
            operator delete(v25);
        }
        else
        {
          *(_QWORD *)v14 = v16;
          v14[8] = 1;
          *((_DWORD *)v14 + 3) = v18;
          *((_DWORD *)v14 + 4) = v17;
          *((_DWORD *)v14 + 5) = v19;
          v14 += 24;
        }
        *((_QWORD *)&buf + 1) = v14;
        ++v13;
      }
      while (v13 != a3);
      sub_1017E50AC(*(_QWORD *)(a1 + 1152), (uint64_t)&buf);
      if ((_QWORD)buf)
      {
        *((_QWORD *)&buf + 1) = buf;
        operator delete((void *)buf);
      }
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 67240192;
      DWORD1(buf) = a3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "numsamples,%{public}u", (uint8_t *)&buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v29 = 67240192;
      LODWORD(v30) = a3;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "numsamples,%{public}u", &v29, 8);
      v6 = (char *)v5;
      sub_100512490("Generic", 1, 0, 0, "void CLGnssController::setAccelData(const CLAccelerometer::Sample *, unsigned int)", "%s\n", v5);
LABEL_19:
      if (v6 != (char *)&buf)
        free(v6);
    }
  }
}

void sub_10085056C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_100850598(double *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _BOOL8 result;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  NSObject *v11;
  double v12;
  double v13;
  const char *v14;
  uint8_t *v15;
  __int128 v16;
  __int128 v17;
  char v18;
  int v19;
  double v20;
  __int16 v21;
  uint64_t v22;
  uint8_t buf[4];
  double v24;
  __int16 v25;
  uint64_t v26;

  v5 = *a3;
  if (!*a3)
    operator new();
  v18 = 0;
  v16 = 0u;
  v17 = 0u;
  if (!sub_10010FB90(v5, (uint64_t)&v16))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning,failed to get last wake up time", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    LOWORD(v19) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,failed to get last wake up time", &v19, 2);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "BOOL HaveSensorSampleBeforeSleep(const T *, unsigned int, std::unique_ptr<CLUtils::LiveTimeConverter> &) [T = CLAccelerometer::Sample]", "%s\n", v9);
    if (v10 != buf)
      free(v10);
    return 0;
  }
  if (!a2)
    return 0;
  v6 = a2;
  while (*a1 >= *((double *)&v17 + 1))
  {
    a1 += 3;
    if (!--v6)
      return 0;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v11 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v12 = *a1;
    *(_DWORD *)buf = 134349312;
    v24 = v12;
    v25 = 2050;
    v26 = *((_QWORD *)&v17 + 1);
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning,Sensor sample is before sleep,sampleTime,%{public}.6lf,wakeTime,%{public}.6lf", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v13 = *a1;
    v19 = 134349312;
    v20 = v13;
    v21 = 2050;
    v22 = *((_QWORD *)&v17 + 1);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,Sensor sample is before sleep,sampleTime,%{public}.6lf,wakeTime,%{public}.6lf", &v19, 22);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "BOOL HaveSensorSampleBeforeSleep(const T *, unsigned int, std::unique_ptr<CLUtils::LiveTimeConverter> &) [T = CLAccelerometer::Sample]", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  return 1;
}

void sub_100850934(uint64_t a1, double *a2, unsigned int a3)
{
  NSObject *v4;
  const char *v5;
  char *v6;
  NSObject *v9;
  double v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  char *v14;
  double *v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  int v29;
  uint64_t v30;
  __int128 buf;
  char *v32;

  if (a3 - 101 > 0xFFFFFF9B)
  {
    if (sub_100850E04(a2, a3, (uint64_t *)(a1 + 1224)))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v9 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v10 = *a2;
        LODWORD(buf) = 134349056;
        *(double *)((char *)&buf + 4) = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning,CLGyro has sample before sleep,sampleTime,%{public}.6lf", (uint8_t *)&buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102156068);
        v11 = *(_QWORD *)a2;
        v29 = 134349056;
        v30 = v11;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,CLGyro has sample before sleep,sampleTime,%{public}.6lf", &v29, 12);
        v6 = (char *)v12;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssController::setGyroData(const CLGyro::Sample *, unsigned int)", "%s\n", v12);
        goto LABEL_19;
      }
    }
    else if (*(_QWORD *)(a1 + 1152))
    {
      buf = 0uLL;
      v32 = 0;
      sub_100803C28((void **)&buf, a3);
      v13 = 0;
      v14 = (char *)*((_QWORD *)&buf + 1);
      do
      {
        v15 = &a2[3 * v13];
        v16 = *(_QWORD *)v15;
        v18 = *((_DWORD *)v15 + 2);
        v17 = *((_DWORD *)v15 + 3);
        v19 = *((_DWORD *)v15 + 4);
        if (v14 >= v32)
        {
          v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v14[-buf] >> 3);
          v21 = v20 + 1;
          if (v20 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_100259694();
          if (0x5555555555555556 * ((uint64_t)&v32[-buf] >> 3) > v21)
            v21 = 0x5555555555555556 * ((uint64_t)&v32[-buf] >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v32[-buf] >> 3) >= 0x555555555555555)
            v22 = 0xAAAAAAAAAAAAAAALL;
          else
            v22 = v21;
          if (v22)
            v23 = (char *)sub_1002596A8((uint64_t)&v32, v22);
          else
            v23 = 0;
          v24 = &v23[24 * v20];
          *(_QWORD *)v24 = v16;
          v24[8] = 2;
          *((_DWORD *)v24 + 3) = v18;
          *((_DWORD *)v24 + 4) = v17;
          *((_DWORD *)v24 + 5) = v19;
          v25 = (char *)*((_QWORD *)&buf + 1);
          v26 = (char *)buf;
          v27 = v24;
          if (*((_QWORD *)&buf + 1) != (_QWORD)buf)
          {
            do
            {
              v28 = *(_OWORD *)(v25 - 24);
              *((_QWORD *)v27 - 1) = *((_QWORD *)v25 - 1);
              *(_OWORD *)(v27 - 24) = v28;
              v27 -= 24;
              v25 -= 24;
            }
            while (v25 != v26);
            v25 = (char *)buf;
          }
          v14 = v24 + 24;
          *(_QWORD *)&buf = v27;
          *((_QWORD *)&buf + 1) = v24 + 24;
          v32 = &v23[24 * v22];
          if (v25)
            operator delete(v25);
        }
        else
        {
          *(_QWORD *)v14 = v16;
          v14[8] = 2;
          *((_DWORD *)v14 + 3) = v18;
          *((_DWORD *)v14 + 4) = v17;
          *((_DWORD *)v14 + 5) = v19;
          v14 += 24;
        }
        *((_QWORD *)&buf + 1) = v14;
        ++v13;
      }
      while (v13 != a3);
      sub_1017E50AC(*(_QWORD *)(a1 + 1152), (uint64_t)&buf);
      if ((_QWORD)buf)
      {
        *((_QWORD *)&buf + 1) = buf;
        operator delete((void *)buf);
      }
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 67240192;
      DWORD1(buf) = a3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "numsamples,%{public}u", (uint8_t *)&buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v29 = 67240192;
      LODWORD(v30) = a3;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "numsamples,%{public}u", &v29, 8);
      v6 = (char *)v5;
      sub_100512490("Generic", 1, 0, 0, "void CLGnssController::setGyroData(const CLGyro::Sample *, unsigned int)", "%s\n", v5);
LABEL_19:
      if (v6 != (char *)&buf)
        free(v6);
    }
  }
}

void sub_100850DD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_100850E04(double *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _BOOL8 result;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  NSObject *v11;
  double v12;
  double v13;
  const char *v14;
  uint8_t *v15;
  __int128 v16;
  __int128 v17;
  char v18;
  int v19;
  double v20;
  __int16 v21;
  uint64_t v22;
  uint8_t buf[4];
  double v24;
  __int16 v25;
  uint64_t v26;

  v5 = *a3;
  if (!*a3)
    operator new();
  v18 = 0;
  v16 = 0u;
  v17 = 0u;
  if (!sub_10010FB90(v5, (uint64_t)&v16))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning,failed to get last wake up time", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    LOWORD(v19) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,failed to get last wake up time", &v19, 2);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "BOOL HaveSensorSampleBeforeSleep(const T *, unsigned int, std::unique_ptr<CLUtils::LiveTimeConverter> &) [T = CLGyro::Sample]", "%s\n", v9);
    if (v10 != buf)
      free(v10);
    return 0;
  }
  if (!a2)
    return 0;
  v6 = a2;
  while (*a1 >= *((double *)&v17 + 1))
  {
    a1 += 3;
    if (!--v6)
      return 0;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v11 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v12 = *a1;
    *(_DWORD *)buf = 134349312;
    v24 = v12;
    v25 = 2050;
    v26 = *((_QWORD *)&v17 + 1);
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning,Sensor sample is before sleep,sampleTime,%{public}.6lf,wakeTime,%{public}.6lf", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v13 = *a1;
    v19 = 134349312;
    v20 = v13;
    v21 = 2050;
    v22 = *((_QWORD *)&v17 + 1);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,Sensor sample is before sleep,sampleTime,%{public}.6lf,wakeTime,%{public}.6lf", &v19, 22);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "BOOL HaveSensorSampleBeforeSleep(const T *, unsigned int, std::unique_ptr<CLUtils::LiveTimeConverter> &) [T = CLGyro::Sample]", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  return 1;
}

void sub_1008511A0(_QWORD *a1, uint64_t a2, int *a3, uint64_t a4)
{
  NSObject *v7;
  int v8;
  NSObject *v9;
  int v10;
  int v11;
  const char *v12;
  uint8_t *v13;
  int v14;
  const char *v15;
  uint8_t *v16;
  uint64_t v17;
  int v18;
  int v19;
  uint8_t buf[4];
  int v21;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v8 = *a3;
    *(_DWORD *)buf = 67240192;
    v21 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Settings Notification,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v11 = *a3;
    v18 = 67240192;
    v19 = v11;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Settings Notification,%{public}d", &v18, 8);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssController::onClientManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  if (*a3)
  {
    if (*a3 == 4)
    {
      sub_1008514D4(a1, *(_DWORD *)(a4 + 188));
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v9 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v10 = *a3;
        *(_DWORD *)buf = 67240192;
        v21 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning,unhandled notification,%{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102156068);
        v14 = *a3;
        v18 = 67240192;
        v19 = v14;
        LODWORD(v17) = 8;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,unhandled notification,%{public}d", &v18, v17);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssController::onClientManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
    }
  }
  else
  {
    sub_1008514FC(a1);
  }
}

void sub_1008514D4(_QWORD *a1, int a2)
{
  if (*((_DWORD *)a1 + 195) != a2)
  {
    *((_DWORD *)a1 + 195) = a2;
    if (a2)
    {
      if (a2 == 1)
        sub_1008515F4(a1);
    }
    else
    {
      sub_1008518A8(a1);
    }
  }
}

uint64_t sub_1008514FC(_QWORD *a1)
{
  NSObject *v2;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289282;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    v7 = 2082;
    v8 = "resetprivacyinfo";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s}", (uint8_t *)v4, 0x1Cu);
  }
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 296))(*a1);
}

void sub_1008515F4(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _WORD v13[8];
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  const char *v19;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v18 = 2082;
    v19 = "enablelocationservice";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 280))(*a1);
  sub_10006028C((uint64_t)(a1 + 328), 9);
  if (*((_BYTE *)a1 + 1269))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning,fIsSimulatorMode,1,cannot trigger assistance download", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v13[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,fIsSimulatorMode,1,cannot trigger assistance download", v13, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssController::enableLocationService()", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
  else
  {
    v6 = a1[110];
    if (v6)
      sub_101760870(v6, 1);
    v7 = a1[113];
    if (v7)
      sub_101760870(v7, 1);
    v8 = a1[125];
    if (v8)
      sub_101760870(v8, 1);
    v9 = a1[116];
    if (v9)
      sub_101760870(v9, 1);
    v10 = a1[119];
    if (v10)
      sub_101760870(v10, 1);
    v11 = a1[122];
    if (v11)
      sub_101760870(v11, 1);
    v12 = a1[128];
    if (v12)
      sub_101760870(v12, 1);
  }
}

uint64_t sub_1008518A8(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  const char *v9;

  sub_10006028C((uint64_t)(a1 + 328), 10);
  v2 = a1[131];
  if (v2)
    sub_100EB520C(v2);
  sub_10179F304((uint64_t)(a1 + 350));
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 68289282;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 2082;
    v9 = "disablelocationservice";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s}", (uint8_t *)v5, 0x1Cu);
  }
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 288))(*a1);
}

void sub_1008519C0(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[4];
  int v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  const char *v12;

  if (*a1)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v2 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289282;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2082;
      v12 = "resetcontrolplanestatus";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 344))(*a1);
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102156528);
    v3 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "NilrDbg,device not created yet", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102156528);
      v6[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 17, "NilrDbg,device not created yet", v6, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 0, "void CLGnssController::resetControlPlaneStatus()", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
}

void sub_100851BFC(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  _BOOL4 v6;
  int v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _DWORD v15[2];
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  int v27;

  *(_OWORD *)(a1 + 1328) = *(_OWORD *)(a2 + 4);
  *(_BYTE *)(a1 + 1344) = 1;
  *(int8x16_t *)(a1 + 1352) = vextq_s8(*(int8x16_t *)(a2 + 20), *(int8x16_t *)(a2 + 20), 8uLL);
  *(_QWORD *)(a1 + 1368) = *(_QWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 1392) = 3;
  *(_DWORD *)(a1 + 1452) = 0;
  *(_DWORD *)(a1 + 1400) = 12;
  v4 = *(_DWORD *)(a2 + 96);
  v5 = v4 == 10;
  v6 = (v4 & 0xFFFFFFF7) == 1;
  if (v4 == 11 || v4 == 4)
    v8 = 2;
  else
    v8 = 0;
  *(_DWORD *)(a1 + 1384) |= (v5 << 6) | v6 | v8;
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102156528);
  v9 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    v10 = *(_QWORD *)(a2 + 4);
    v11 = *(_QWORD *)(a2 + 12);
    v12 = *(_QWORD *)(a2 + 28);
    v13 = *(_QWORD *)(a2 + 20);
    v14 = *(_DWORD *)(a1 + 1384);
    v15[0] = 68290307;
    v15[1] = 0;
    v16 = 2082;
    v17 = "";
    v18 = 2049;
    v19 = v10;
    v20 = 2049;
    v21 = v11;
    v22 = 2049;
    v23 = v12;
    v24 = 2049;
    v25 = v13;
    v26 = 1025;
    v27 = v14;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#awd #thumper location log\", \"lat\":\"%{private}.08f\", \"lon\":\"%{private}.08f\", \"alt\":\"%{private}f\", \"accuracy\":\"%{private}f\", \"source\":%{private}u}", (uint8_t *)v15, 0x40u);
  }
}

void sub_100851D9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 1184);
  if (v2)
    sub_101750918(v2, a2);
}

double sub_100851DAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a1 + 1048);
  if (v2)
    *(_QWORD *)&result = sub_100EB5028(v2, a2).n128_u64[0];
  return result;
}

uint64_t sub_100851DBC(_QWORD *a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t result;
  NSObject *v6;
  _BOOL4 v7;
  const char *v8;
  uint8_t *v9;
  _WORD v10[8];
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289282;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 2082;
    v16 = "controlplanestatusreport";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*a1)
    return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 352))(*a1, a2);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102156528);
  v6 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "NilrDbg,device not created yet", buf, 2u);
  }
  v7 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v7)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102156528);
    v10[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 17, "NilrDbg,device not created yet", v10, 2);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLGnssController::getControlPlaneStatusReport(CLGnssControlPlaneStatusReport &)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
    return 0;
  }
  return result;
}

void sub_100852018(_DWORD *a1, int a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLGC,L1Context,Update,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v7[0] = 67240192;
    v7[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLGC,L1Context,Update,%{public}d", v7, 8);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssController::handleGnssBandL1Update(const CLGnssBandUseType)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  a1[4] = a2;
  sub_1001924EC(a1);
}

uint64_t sub_1008521D0(uint64_t a1)
{
  uint64_t result;
  int v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _DWORD v10[4];
  uint8_t buf[4];
  _BOOL4 v12;

  result = sub_10075F2EC();
  if ((_DWORD)result && *(_BYTE *)(a1 + 80))
  {
    result = sub_1001133C0(*(double *)(a1 + 88), *(double *)(a1 + 96));
    v3 = result;
    HIBYTE(v9) = (_DWORD)result != 0;
    if (*(_QWORD *)a1)
      *(_BYTE *)(*(_QWORD *)a1 + 1289) = (_DWORD)result != 0;
    if (*(_BYTE *)(a1 + 1269))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v4 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67240192;
        v12 = v3 != 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#cspb,storing in region as,%{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102156068);
        v10[0] = 67240192;
        v10[1] = v3 != 0;
        LODWORD(v9) = 8;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#cspb,storing in region as,%{public}d", v10, v9);
        v8 = (uint8_t *)v7;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssController::updateDeviceForChinaRegion()", "%s\n", v7);
        if (v8 != buf)
          free(v8);
      }
      v5 = sub_1001FD94C();
      sub_10011B47C(v5, "GnssSimulatorModeForRegionWithMoreBds", (_BYTE *)&v9 + 7);
      v6 = sub_1001FD94C();
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 944))(v6);
    }
  }
  return result;
}

void sub_1008523E8(uint64_t a1, signed int a2, double a3)
{
  NSObject *v4;
  NSObject *v7;
  _QWORD *v8;
  _BYTE *v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  signed int v17;
  BOOL v18;
  uint64_t *v19;
  NSObject *v20;
  uint64_t *v21;
  dispatch_time_t v22;
  NSObject *v23;
  os_log_type_t v24;
  _QWORD *v25;
  _BYTE *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  char *v31;
  NSObject *v32;
  _QWORD *v33;
  _BYTE *v34;
  _QWORD *v35;
  uint64_t v36;
  _BYTE *v37;
  char *v38;
  NSObject *v39;
  _QWORD *v40;
  NSObject *v41;
  NSObject *v42;
  NSObject *v43;
  _QWORD *v44;
  const char *v45;
  char *v46;
  double v47;
  _QWORD handler[5];
  unsigned int v49;
  unsigned int v50;
  _BYTE v51[12];
  __int16 v52;
  _BYTE *v53;
  char v54;
  _BYTE __p[12];
  __int16 v56;
  _BYTE *v57;
  __int16 v58;
  double v59;
  _BYTE buf[1634];

  v50 = a2;
  v4 = *(NSObject **)(a1 + 80);
  if (!v4)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v39 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v40 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v40 = (_QWORD *)*v40;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v40;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "%sInvoking timers without callback queue set", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v44 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v44 = (_QWORD *)*v44;
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v44;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "%sInvoking timers without callback queue set", __p);
      v46 = (char *)v45;
      sub_100512490("Generic", 1, 0, 0, "void CLStateMachine<CLGnssController>::setTimeoutEvent(Event, double) [T = CLGnssController]", "%s\n", v45);
      if (v46 != buf)
        free(v46);
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v41 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(_QWORD *)&buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
    }
    v42 = qword_1022A0078;
    if (os_signpost_enabled((os_log_t)qword_1022A0078))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(_QWORD *)&buf[30] = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v42, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
    }
    v43 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(_QWORD *)&buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/CLStateMachine.h", 173, "setTimeoutEvent");
    __break(1u);
  }
  if (a3 < 0.0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      v8 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v8 = (_QWORD *)*v8;
      sub_10023D9C4(a2, __p);
      if (v58 >= 0)
        v9 = __p;
      else
        v9 = *(_BYTE **)__p;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v8;
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v9;
      *(_WORD *)&buf[22] = 2050;
      *(double *)&buf[24] = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "%sCannot start timer, event, %{public}s, timeOutSec, %{public}.2f", buf, 0x20u);
      if (SHIBYTE(v58) < 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v10 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v10 = (_QWORD *)*v10;
      v11 = qword_1022A0078;
      sub_10023D9C4(a2, v51);
      if (v54 >= 0)
        v12 = v51;
      else
        v12 = *(_BYTE **)v51;
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = v10;
      v56 = 2082;
      v57 = v12;
      v58 = 2050;
      v59 = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 17, "%sCannot start timer, event, %{public}s, timeOutSec, %{public}.2f", __p, 32);
      v14 = v13;
      if (v54 < 0)
        operator delete(*(void **)v51);
LABEL_79:
      sub_100512490("Generic", 1, 0, 0, "void CLStateMachine<CLGnssController>::setTimeoutEvent(Event, double) [T = CLGnssController]", "%s\n", v14);
LABEL_80:
      if (v14 != buf)
        free(v14);
      return;
    }
    return;
  }
  v15 = *(_QWORD *)(a1 + 64);
  if (v15)
  {
    v16 = a1 + 64;
    do
    {
      v17 = *(_DWORD *)(v15 + 32);
      v18 = v17 < a2;
      if (v17 >= a2)
        v19 = (uint64_t *)v15;
      else
        v19 = (uint64_t *)(v15 + 8);
      if (!v18)
        v16 = v15;
      v15 = *v19;
    }
    while (*v19);
    if (v16 != a1 + 64 && *(_DWORD *)(v16 + 32) <= a2)
    {
      v20 = *(NSObject **)(v16 + 40);
      if (v20)
      {
LABEL_37:
        v22 = dispatch_time(0, (uint64_t)(a3 * 1000000000.0));
        dispatch_source_set_timer(v20, v22, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102156068);
        v23 = qword_1022A0078;
        v24 = *(_BYTE *)(a1 + 120);
        if (os_log_type_enabled((os_log_t)qword_1022A0078, v24))
        {
          v25 = (_QWORD *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0)
            v25 = (_QWORD *)*v25;
          sub_10023D9C4(v50, __p);
          if (v58 >= 0)
            v26 = __p;
          else
            v26 = *(_BYTE **)__p;
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = v25;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v26;
          *(_WORD *)&buf[22] = 2048;
          *(double *)&buf[24] = a3;
          _os_log_impl((void *)&_mh_execute_header, v23, v24, "%sevent,%s,timeout,%.2f", buf, 0x20u);
          if (SHIBYTE(v58) < 0)
            operator delete(*(void **)__p);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102156068);
          v27 = (_QWORD *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0)
            v27 = (_QWORD *)*v27;
          v28 = qword_1022A0078;
          v29 = *(unsigned __int8 *)(a1 + 120);
          sub_10023D9C4(v50, v51);
          if (v54 >= 0)
            v30 = v51;
          else
            v30 = *(_BYTE **)v51;
          *(_DWORD *)__p = 136315650;
          *(_QWORD *)&__p[4] = v27;
          v56 = 2080;
          v57 = v30;
          v58 = 2048;
          v59 = a3;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v28, v29, "%sevent,%s,timeout,%.2f", __p, 32, v47);
          v14 = v31;
          if (v54 < 0)
            operator delete(*(void **)v51);
          sub_100512490("Generic", 1, 0, 2, "void CLStateMachine<CLGnssController>::setTimeoutEvent(Event, double) [T = CLGnssController]", "%s\n", v14);
          goto LABEL_80;
        }
        return;
      }
    }
  }
  v21 = (uint64_t *)dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v4);
  if (v21)
  {
    v20 = v21;
    *(_QWORD *)buf = &v50;
    sub_100041CE0((uint64_t **)(a1 + 56), (int *)&v50, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[5] = v21;
    dispatch_source_set_timer(v20, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_10020F75C;
    handler[3] = &unk_10213D6C0;
    handler[4] = a1;
    v49 = v50;
    dispatch_source_set_event_handler(v20, handler);
    dispatch_resume(v20);
    goto LABEL_37;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v32 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    v33 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v33 = (_QWORD *)*v33;
    sub_10023D9C4(a2, buf);
    if (buf[23] >= 0)
      v34 = buf;
    else
      v34 = *(_BYTE **)buf;
    *(_DWORD *)__p = 136315394;
    *(_QWORD *)&__p[4] = v33;
    v56 = 2082;
    v57 = v34;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_FAULT, "%scannot create timer, event, %{public}s", __p, 0x16u);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v35 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v35 = (_QWORD *)*v35;
    v36 = qword_1022A0078;
    sub_10023D9C4(a2, __p);
    if (v58 >= 0)
      v37 = __p;
    else
      v37 = *(_BYTE **)__p;
    *(_DWORD *)v51 = 136315394;
    *(_QWORD *)&v51[4] = v35;
    v52 = 2082;
    v53 = v37;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v36, 17, "%scannot create timer, event, %{public}s", v51, 22);
    v14 = v38;
    if (SHIBYTE(v58) < 0)
      operator delete(*(void **)__p);
    goto LABEL_79;
  }
}

void sub_100852EB8(_QWORD *a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _DWORD v11[4];
  uint8_t buf[4];
  int v13;

  *((_BYTE *)a1 + 784) = a2;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    v13 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLGC,isAirborne,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v11[0] = 67240192;
    v11[1] = a2;
    v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLGC,isAirborne,%{public}d", v11, 8);
    sub_100512490("Generic", 1, 0, 2, "void CLGnssController::updateAirborneActivity(const BOOL)", "%s\n", v10);
    if (v10 != (char *)buf)
      free(v10);
  }
  if (*a1)
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 272))(*a1, a2);
  v5 = a1[138];
  if (v5)
    sub_101793BE8(v5, a2);
  v6 = a1[134];
  if (v6)
    sub_100A0E454(v6, a2);
  v7 = a1[136];
  if (v7)
    sub_1007942DC(v7, a2);
  v8 = a1[131];
  if (v8)
    sub_100EB5050(v8, a2);
  v9 = a1[144];
  if (v9)
    sub_1017E5BC0(v9, a2);
}

void sub_1008530D0(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  NSObject *v5;
  int v6;
  int v7;
  const char *v8;
  uint8_t *v9;
  const char *v10;
  uint8_t *v11;
  uint64_t v12;
  _DWORD v13[2];
  __int16 v14;
  int v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  int v19;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(unsigned __int8 *)(a1 + 1269);
    v4 = *(unsigned __int8 *)(a1 + 1270);
    *(_DWORD *)buf = 67109376;
    v17 = v3;
    v18 = 1024;
    v19 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLGnssController::handleOTADeleteRequest,fIsSimulatorMode,%d,fIsConformanceMode,%d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v6 = *(unsigned __int8 *)(a1 + 1269);
    v7 = *(unsigned __int8 *)(a1 + 1270);
    v13[0] = 67109376;
    v13[1] = v6;
    v14 = 1024;
    v15 = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLGnssController::handleOTADeleteRequest,fIsSimulatorMode,%d,fIsConformanceMode,%d", v13, 14);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssController::handleOTADeleteRequest()", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  if (*(_BYTE *)(a1 + 1269) || *(_BYTE *)(a1 + 1270))
  {
    if (*(_QWORD *)(a1 + 768))
    {
      *(_QWORD *)(a1 + 680) = *(_QWORD *)(a1 + 600);
      *(_WORD *)(a1 + 688) = *(_WORD *)(a1 + 608);
      sub_100858280((_QWORD *)(a1 + 696), a1 + 616);
      sub_100858280((_QWORD *)(a1 + 728), a1 + 648);
      *(_BYTE *)(a1 + 609) = 1;
      sub_10006028C(a1 + 2624, 15);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CLGnssController::handleOTADeleteRequest,simulator/conformance mode not enabled,do nothing", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      LOWORD(v13[0]) = 0;
      LODWORD(v12) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLGnssController::handleOTADeleteRequest,simulator/conformance mode not enabled,do nothing", v13, v12);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssController::handleOTADeleteRequest()", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
}

uint64_t sub_100853420(uint64_t a1, int a2)
{
  int v4;
  NSObject *v5;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[2];
  __int16 v10;
  int v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  int v15;

  v4 = sub_100192748(a1);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    v13 = a2;
    v14 = 1024;
    v15 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#clgda,handleGnssDisablementAssertRsp,status,%d,band,%d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v9[0] = 67109376;
    v9[1] = a2;
    v10 = 1024;
    v11 = v4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#clgda,handleGnssDisablementAssertRsp,status,%d,band,%d", v9, 14);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssController::handleGnssDisablementAssertRsp(const BOOL)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  return sub_100853604(a1 + 560, v4, a2);
}

uint64_t sub_100853604(uint64_t a1, int a2, char a3)
{
  uint64_t v3;
  char v5;
  int v6;

  v6 = a2;
  v5 = a3;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, int *, char *))(*(_QWORD *)v3 + 48))(v3, &v6, &v5);
}

void sub_100853644(_QWORD *a1, int a2)
{
  uint64_t v4;
  double *v5;
  NSObject *v6;
  char v7;
  char v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  double *v12;
  NSObject *v13;
  double *v14;
  NSObject *v15;
  BOOL v16;
  uint8_t buf[8];
  _BYTE v18[10];
  __int16 v19;
  const char *v20;
  __int16 v21;
  int v22;

  v4 = a1[154];
  if (v4)
    sub_100DA21E8(v4, a2);
  v5 = (double *)a1[110];
  if (v5)
  {
    sub_101762828(v5, a2);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v18 = 2082;
      *(_QWORD *)&v18[2] = "";
      v19 = 2082;
      v20 = "#ee,updateEeFileDownloadRateOnWorkoutOrFocusedNav";
      v21 = 1026;
      v22 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s, \"isFitnessSession\":%{public}hhd}", buf, 0x22u);
    }
  }
  sub_1001E4804(buf);
  v16 = 0;
  v7 = sub_1001E4874(*(uint64_t *)buf, "EnableRteUpdateOnFitnessSession", &v16);
  if (v16)
    v8 = 0;
  else
    v8 = v7;
  v9 = *(std::__shared_weak_count **)v18;
  if (!*(_QWORD *)v18)
    goto LABEL_15;
  v10 = (unint64_t *)(*(_QWORD *)v18 + 8);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if ((v8 & 1) != 0)
      return;
  }
  else
  {
LABEL_15:
    if ((v8 & 1) != 0)
      return;
  }
  v12 = (double *)a1[113];
  if (v12)
  {
    sub_100221680(v12, a2, 0);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v13 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v18 = 2082;
      *(_QWORD *)&v18[2] = "";
      v19 = 2082;
      v20 = "#rte,updateRteRofFileDownloadRateOnWorkoutOrFocusedNav";
      v21 = 1026;
      v22 = a2;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s, \"isFitnessSession\":%{public}hhd}", buf, 0x22u);
    }
  }
  v14 = (double *)a1[125];
  if (v14)
  {
    sub_100221680(v14, a2, 1);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v15 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v18 = 2082;
      *(_QWORD *)&v18[2] = "";
      v19 = 2082;
      v20 = "#rof,updateRteRofFileDownloadRateOnWorkoutOrFocusedNav";
      v21 = 1026;
      v22 = a2;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s, \"isFitnessSession\":%{public}hhd}", buf, 0x22u);
    }
  }
}

void sub_100853948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100853964(_QWORD *a1, int a2)
{
  uint64_t v4;
  double *v5;
  NSObject *v6;
  char v7;
  char v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  double *v12;
  NSObject *v13;
  double *v14;
  NSObject *v15;
  BOOL v16;
  uint8_t buf[8];
  _BYTE v18[10];
  __int16 v19;
  const char *v20;
  __int16 v21;
  int v22;

  v4 = a1[154];
  if (v4)
    sub_100DA2024(v4, a2);
  v5 = (double *)a1[110];
  if (v5)
  {
    sub_101762828(v5, a2);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v18 = 2082;
      *(_QWORD *)&v18[2] = "";
      v19 = 2082;
      v20 = "#ee,updateEeFileDownloadRateOnWorkoutOrFocusedNav";
      v21 = 1026;
      v22 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s, \"isTbtSession\":%{public}hhd}", buf, 0x22u);
    }
  }
  sub_1001E4804(buf);
  v16 = 0;
  v7 = sub_1001E4874(*(uint64_t *)buf, "EnableRteUpdateOnTbtSession", &v16);
  if (v16)
    v8 = 0;
  else
    v8 = v7;
  v9 = *(std::__shared_weak_count **)v18;
  if (!*(_QWORD *)v18)
    goto LABEL_15;
  v10 = (unint64_t *)(*(_QWORD *)v18 + 8);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if ((v8 & 1) != 0)
      return;
  }
  else
  {
LABEL_15:
    if ((v8 & 1) != 0)
      return;
  }
  v12 = (double *)a1[113];
  if (v12)
  {
    sub_100221680(v12, a2, 0);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v13 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v18 = 2082;
      *(_QWORD *)&v18[2] = "";
      v19 = 2082;
      v20 = "#rte,updateRteRofFileDownloadRateOnWorkoutOrFocusedNav";
      v21 = 1026;
      v22 = a2;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s, \"isTbtSession\":%{public}hhd}", buf, 0x22u);
    }
  }
  v14 = (double *)a1[125];
  if (v14)
  {
    sub_100221680(v14, a2, 1);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v15 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v18 = 2082;
      *(_QWORD *)&v18[2] = "";
      v19 = 2082;
      v20 = "#rof,updateRteRofFileDownloadRateOnWorkoutOrFocusedNav";
      v21 = 1026;
      v22 = a2;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s, \"isTbtSession\":%{public}hhd}", buf, 0x22u);
    }
  }
}

void sub_100853C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100853C84(uint64_t a1, uint64_t a2)
{
  int v4;
  NSObject *v5;
  int v6;
  int v7;
  uint64_t v8;
  NSObject *v9;
  int v10;
  int v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _DWORD v15[2];
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;

  if ((_DWORD)a2)
  {
    if (*(_BYTE *)(a1 + 2617))
    {
      sub_100854040(a1, 0);
      *(_BYTE *)(a1 + 592) = 1;
    }
    if (sub_1001936CC() && (a2 & 1) != 0)
    {
      v4 = 3;
      goto LABEL_13;
    }
  }
  else
  {
    if (*(_BYTE *)(a1 + 592))
    {
      *(_BYTE *)(a1 + 592) = 0;
      sub_100854040(a1, 1);
    }
    sub_1001936CC();
  }
  if (sub_1001936CC() | a2 ^ 1)
    v4 = 3;
  else
    v4 = 0;
LABEL_13:
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_DWORD *)(a1 + 2752);
    v7 = *(unsigned __int8 *)(a1 + 592);
    *(_DWORD *)buf = 67109632;
    v21 = v6;
    v22 = 1024;
    v23 = v4;
    v24 = 1026;
    v25 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#clgda,gnss,setAnyClientRegisteredForBasebandCausesL1Interference,curBand,%d,reqBand,%d,fIsBBL1InterferenceModePausedFrequencyAssertion,%{public}d", buf, 0x14u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v10 = *(_DWORD *)(a1 + 2752);
    v11 = *(unsigned __int8 *)(a1 + 592);
    v15[0] = 67109632;
    v15[1] = v10;
    v16 = 1024;
    v17 = v4;
    v18 = 1026;
    v19 = v11;
    v12 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#clgda,gnss,setAnyClientRegisteredForBasebandCausesL1Interference,curBand,%d,reqBand,%d,fIsBBL1InterferenceModePausedFrequencyAssertion,%{public}d", v15, 20);
    sub_100512490("Generic", 1, 0, 2, "void CLGnssController::setAnyClientRegisteredForBasebandCausesL1Interference(const BOOL)", "%s\n", v12);
    if (v12 != (char *)buf)
      free(v12);
  }
  v8 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (v4 != *(_DWORD *)(a1 + 2752))
    {
      *(_DWORD *)(a1 + 2752) = v4;
      sub_1001924EC((_DWORD *)a1);
      v8 = *(_QWORD *)a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 360))(v8, a2);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#clgda,gnss,setAnyClientRegisteredForBasebandCausesL1Interference,device does not exist", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      LOWORD(v15[0]) = 0;
      LODWORD(v14) = 2;
      v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#clgda,gnss,setAnyClientRegisteredForBasebandCausesL1Interference,device does not exist", v15, v14);
      sub_100512490("Generic", 1, 0, 2, "void CLGnssController::setAnyClientRegisteredForBasebandCausesL1Interference(const BOOL)", "%s\n", v13);
      if (v13 != (char *)buf)
        free(v13);
    }
  }
}

void sub_100854040(uint64_t a1, int a2)
{
  NSObject *v4;
  char *v5;
  _DWORD v6[4];
  uint8_t buf[4];
  int v8;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#tt,gnss,setAnyClientRegisteredWithBasebandTimeFreqTransferAssert,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v6[0] = 67109120;
    v6[1] = a2;
    v5 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#tt,gnss,setAnyClientRegisteredWithBasebandTimeFreqTransferAssert,%d", v6);
    sub_100512490("Generic", 1, 0, 2, "void CLGnssController::setAnyClientRegisteredWithBasebandTimeFreqTransferAssert(const BOOL)", "%s\n", v5);
    if (v5 != (char *)buf)
      free(v5);
  }
  if (*(unsigned __int8 *)(a1 + 2617) != a2
    && *(_QWORD *)(a1 + 760)
    && *(_QWORD *)(a1 + 768)
    && (sub_10075B9E0() || sub_10075B95C()))
  {
    sub_10171D0DC(*(uint64_t **)(a1 + 760));
    sub_10023A068(*(_BYTE **)(a1 + 760), a2);
  }
  *(_BYTE *)(a1 + 2617) = a2;
  if ((a2 & 1) == 0)
    *(_BYTE *)(a1 + 592) = 0;
}

BOOL sub_100854238(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 3048);
  return v2 && sub_100C95024(v2, a2);
}

uint64_t sub_100854264(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 2552);
  if (result)
    return sub_10098C800(result, a2);
  return result;
}

uint64_t sub_100854274(uint64_t *a1, char a2)
{
  uint64_t v4;

  v4 = a1[138];
  if (v4)
    sub_101794348(v4, a2);
  return sub_1008542AC(a1, a2);
}

uint64_t sub_1008542AC(uint64_t *a1, char a2)
{
  NSObject *v3;
  int v4;
  char v5;
  uint64_t v6;
  char v7;
  NSObject *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t result;
  char v14;
  char v15;
  NSObject *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  int v21;
  int v22;
  uint8_t buf[8];
  __int16 v24;
  const char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;

  *((_BYTE *)a1 + 2616) = a2;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v4 = *((unsigned __int8 *)a1 + 2616);
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    v24 = 2082;
    v25 = "";
    v26 = 1026;
    v27 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"issueEmergencySettingsUpdate\", \"isInDEMDeweightArea\":%{public}hhd}", buf, 0x18u);
  }
  v5 = *((_BYTE *)a1 + 2616);
  v6 = (uint64_t)(a1 + 322);
  v22 = 0;
  *(_QWORD *)buf = &v22;
  *((_BYTE *)sub_10085EDC0((uint64_t)(a1 + 322), &v22, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 29) = v5 ^ 1;
  v7 = *((_BYTE *)a1 + 2616);
  v22 = 0;
  *(_QWORD *)buf = &v22;
  *((_BYTE *)sub_10085EDC0((uint64_t)(a1 + 322), &v22, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 128) = v7;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v8 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v22 = 0;
    *(_QWORD *)buf = &v22;
    v9 = *((unsigned __int8 *)sub_10085EDC0((uint64_t)(a1 + 322), &v22, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 29);
    v21 = 0;
    *(_QWORD *)buf = &v21;
    v10 = *((unsigned __int8 *)sub_10085EDC0((uint64_t)(a1 + 322), &v21, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 128);
    *(_DWORD *)buf = 68289794;
    *(_DWORD *)&buf[4] = 0;
    v24 = 2082;
    v25 = "";
    v26 = 1026;
    v27 = 0;
    v28 = 1026;
    v29 = v9;
    v30 = 1026;
    v31 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Update Emergency Settings\", \"sim\":%{public}d, \"enableEarlyReturnDuringEmergencyMode\":%{public}hhd, \"configureVerticalUncertainty\":%{public}hhd}", buf, 0x24u);
  }
  v11 = *a1;
  v22 = 0;
  *(_QWORD *)buf = &v22;
  v12 = sub_10085EDC0((uint64_t)(a1 + 322), &v22, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v11 + 328))(v11, v12 + 3, 5);
  result = sub_1001DC538();
  if ((_DWORD)result)
  {
    v14 = *((_BYTE *)a1 + 2616);
    v22 = 1;
    *(_QWORD *)buf = &v22;
    *((_BYTE *)sub_10085EDC0((uint64_t)(a1 + 322), &v22, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 29) = v14 ^ 1;
    v15 = *((_BYTE *)a1 + 2616);
    v22 = 1;
    *(_QWORD *)buf = &v22;
    *((_BYTE *)sub_10085EDC0((uint64_t)(a1 + 322), &v22, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 128) = v15;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v16 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v22 = 1;
      *(_QWORD *)buf = &v22;
      v17 = *((unsigned __int8 *)sub_10085EDC0((uint64_t)(a1 + 322), &v22, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 29);
      v21 = 1;
      *(_QWORD *)buf = &v21;
      v18 = *((unsigned __int8 *)sub_10085EDC0((uint64_t)(a1 + 322), &v21, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 128);
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      v24 = 2082;
      v25 = "";
      v26 = 1026;
      v27 = 1;
      v28 = 1026;
      v29 = v17;
      v30 = 1026;
      v31 = v18;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Update Emergency Settings\", \"sim\":%{public}d, \"enableEarlyReturnDuringEmergencyMode\":%{public}hhd, \"configureVerticalUncertainty\":%{public}hhd}", buf, 0x24u);
    }
    v19 = *a1;
    v22 = 1;
    *(_QWORD *)buf = &v22;
    v20 = sub_10085EDC0(v6, &v22, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v19 + 328))(v19, v20 + 3, 5);
  }
  return result;
}

void sub_1008546F4(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint8_t buf[4];
  uint64_t v17;
  __int16 v18;
  uint64_t v19;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_QWORD *)(a2 + 4);
    v6 = *(_QWORD *)(a2 + 12);
    *(_DWORD *)buf = 134283777;
    v17 = v5;
    v18 = 2049;
    v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "forwardRelayedLocation location,lat,%{private}+.6f,lon,%{private}.6f>", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v8 = *(_QWORD *)(a2 + 4);
    v9 = *(_QWORD *)(a2 + 12);
    v12 = 134283777;
    v13 = v8;
    v14 = 2049;
    v15 = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "forwardRelayedLocation location,lat,%{private}+.6f,lon,%{private}.6f>", &v12, 22);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssController::forwardRelayedLocation(const CLDaemonLocation &)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  v7 = *(_QWORD *)(a1 + 1048);
  if (v7)
    sub_100EB2FB0(v7, (_OWORD *)a2);
}

void sub_1008548D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 2552);
  if (v2)
    sub_10098CA6C(v2, a2);
}

void sub_1008548E8(_DWORD *a1, uint64_t a2)
{
  unsigned __int8 v4;
  int v5;
  unsigned __int8 v6;
  int v7;
  int v8;
  unsigned __int8 v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned __int8 v14;
  int v15;
  unsigned __int8 v16;
  int v17;
  int v18;
  NSObject *v19;
  const char *v20;
  uint8_t *v21;
  _DWORD v22[4];
  uint8_t buf[4];
  int v24;

  buf[0] = 0;
  v4 = sub_1001E4874(a2, "IsBeidouDisabled", (BOOL *)buf);
  if ((v4 & (buf[0] != 0)) != 0)
    v5 = 4;
  else
    v5 = 0;
  buf[0] = 0;
  v6 = sub_1001E4874(a2, "IsGalileoDisabled", (BOOL *)buf);
  if ((v6 & (buf[0] != 0)) != 0)
    v7 = 8;
  else
    v7 = 0;
  v8 = v7 | v5;
  buf[0] = 0;
  v9 = sub_1001E4874(a2, "IsGlonassDisabled", (BOOL *)buf);
  if ((v9 & (buf[0] != 0)) != 0)
    v10 = 2;
  else
    v10 = 0;
  buf[0] = 0;
  v11 = sub_1001E4874(a2, "IsGpsDisabled", (BOOL *)buf);
  if (buf[0])
    v12 = v11;
  else
    v12 = 0;
  v13 = v8 | v10 | v12;
  buf[0] = 0;
  v14 = sub_1001E4874(a2, "IsQzssDisabled", (BOOL *)buf);
  if ((v14 & (buf[0] != 0)) != 0)
    v15 = 16;
  else
    v15 = 0;
  buf[0] = 0;
  v16 = sub_1001E4874(a2, "IsNavicDisabled", (BOOL *)buf);
  if ((v16 & (buf[0] != 0)) != 0)
    v17 = 32;
  else
    v17 = 0;
  v18 = v13 | v15 | v17;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v19 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    v24 = v18;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#GnssConstControl,setGnssConstellationSettingsFromMobileAssets,0x%{public}x", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v22[0] = 67240192;
    v22[1] = v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#GnssConstControl,setGnssConstellationSettingsFromMobileAssets,0x%{public}x", v22, 8);
    v21 = (uint8_t *)v20;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssController::setGnssConstellationSettingsFromMobileAssets(const CLNameValuePair &)", "%s\n", v20);
    if (v21 != buf)
      free(v21);
  }
  if (*(_QWORD *)a1)
    *(_DWORD *)(*(_QWORD *)a1 + 1280) = a1[316] | v18;
}

uint64_t *sub_100854BE8(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  if (*result)
  {
    *(_QWORD *)(v2 + 1304) = a2;
    *(_BYTE *)(v2 + 1312) = 1;
  }
  return result;
}

void sub_100854C00(uint64_t a1, uint64_t a2)
{
  unsigned __int16 v3;
  NSObject *v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  const char *v8;
  uint8_t *v9;
  _WORD v10[8];
  uint8_t buf[1640];

  if (*(_QWORD *)(a1 + 1024))
  {
    v3 = sub_1017A0084(a1 + 2800, a2);
    if (v3 >= 0x100u)
    {
      if ((_BYTE)v3)
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102156068);
        v4 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "knownACFileConfig,force download by MA", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102156068);
          v10[0] = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "knownACFileConfig,force download by MA", v10, 2);
          v7 = (uint8_t *)v6;
          sub_100512490("Generic", 1, 0, 2, "void CLGnssController::setGnssKnownACSettingsFromMobileAssets(const CLNameValuePair &)", "%s\n", v6);
          if (v7 != buf)
            free(v7);
        }
        sub_101760870(*(_QWORD *)(a1 + 1024), 1);
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102156068);
        v5 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "knownACFileConfig,stop download by MA", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102156068);
          v10[0] = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "knownACFileConfig,stop download by MA", v10, 2);
          v9 = (uint8_t *)v8;
          sub_100512490("Generic", 1, 0, 2, "void CLGnssController::setGnssKnownACSettingsFromMobileAssets(const CLNameValuePair &)", "%s\n", v8);
          if (v9 != buf)
            free(v9);
        }
        sub_1017610EC(*(_QWORD *)(a1 + 1024));
      }
    }
  }
}

void sub_100854EF4(_QWORD *a1, uint64_t a2, _DWORD *a3, char *a4)
{
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  NSObject *v9;
  int v10;
  _DWORD v11[2];
  __int16 v12;
  const char *v13;
  __int16 v14;
  int v15;

  if (*a3 == 15)
  {
    v6 = a1[154];
    if (v6)
      sub_100DA1C00(v6, *a4);
    v7 = (_BYTE *)a1[156];
    if (v7)
      sub_100F6E644(v7, *a4);
    v8 = a1[138];
    if (v8)
      sub_101793DA8(v8, *a4);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v10 = *a4;
      v11[0] = 68289282;
      v11[1] = 0;
      v12 = 2082;
      v13 = "";
      v14 = 1026;
      v15 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"onDaemonStatusNotification\", \"isBatterySaverModeEnabled\":%{public}hhd}", (uint8_t *)v11, 0x18u);
    }
  }
}

uint64_t sub_10085501C()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;

  if (sub_100241564())
    v0 = 0;
  else
    v0 = 2;
  if (sub_100241564())
    v1 = 0;
  else
    v1 = 16;
  v2 = v1 | v0;
  if (sub_100241564())
    v3 = 0;
  else
    v3 = 8;
  if (sub_10075FA4C())
    v4 = 0;
  else
    v4 = 4;
  v5 = v2 | v3 | v4;
  if (sub_10075FA90())
    v6 = 0;
  else
    v6 = 32;
  return v5 | v6;
}

void sub_100855094(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 2552))
    sub_10098CA7C();
}

void sub_1008550A4(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240192;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#timingadvance,isTimingAdvanceFeatureEnabled,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v7[0] = 67240192;
    v7[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#timingadvance,isTimingAdvanceFeatureEnabled,%{public}d", v7, 8);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssController::isTimingAdvanceFeatureEnabled(const BOOL)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  if (*(_QWORD *)a1)
    *(_BYTE *)(*(_QWORD *)a1 + 1290) = a2;
}

void sub_10085525C(uint64_t *a1, uint64_t a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "GnssAssistanceFile,MA-OTA,received notification", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GnssAssistanceFile,MA-OTA,received notification", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssController::setGnssAssistanceFileSettingsFromMobileAssets(const CLNameValuePair &)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  sub_100855440(a1 + 113, a2, "EnableGnssAssistanceRte");
  sub_100855440(a1 + 122, a2, "EnableGnssAssistanceBce");
  sub_100855440(a1 + 125, a2, "EnableGnssAssistanceRof");
  sub_100855440(a1 + 119, a2, "EnableGnssAssistanceApc");
}

void sub_100855440(uint64_t *a1, uint64_t a2, const char *a3)
{
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  uint64_t v8;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;

  if (*a1)
  {
    HIBYTE(v8) = 1;
    if ((sub_1001E4874(a2, a3, (BOOL *)&v8 + 7) & 1) == 0)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v5 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136446466;
        v14 = a3;
        v15 = 1024;
        v16 = HIBYTE(v8);
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "GnssAssistanceFile,MA-OTA,missing expected key,%{public}s,doEnable,%d", buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102156068);
        v9 = 136446466;
        v10 = a3;
        v11 = 1024;
        v12 = HIBYTE(v8);
        LODWORD(v8) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "GnssAssistanceFile,MA-OTA,missing expected key,%{public}s,doEnable,%d", &v9, v8);
        v7 = (uint8_t *)v6;
        sub_100512490("Generic", 1, 0, 2, "auto CLGnssController::setGnssAssistanceFileSettingsFromMobileAssets(const CLNameValuePair &)::(anonymous class)::operator()(std::unique_ptr<CLGnssAssistanceFileDownloader> &, const CLNameValuePair &, const char *const) const", "%s\n", v6);
        if (v7 != buf)
          free(v7);
      }
    }
    sub_101762EA0(*a1, HIBYTE(v8));
  }
}

void sub_100855640(uint64_t a1, char a2)
{
  NSObject *v3;
  int v4;
  int v5;
  char *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  *(_BYTE *)(a1 + 2792) = a2;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(unsigned __int8 *)(a1 + 2792);
    *(_DWORD *)buf = 67240192;
    v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "GnssDebounceUserBenefitLow,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v5 = *(unsigned __int8 *)(a1 + 2792);
    v7[0] = 67240192;
    v7[1] = v5;
    v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "GnssDebounceUserBenefitLow,%{public}d", v7, 8);
    sub_100512490("Generic", 1, 0, 2, "void CLGnssController::setGnssDebounceUserBenefitLow(const BOOL)", "%s\n", v6);
    if (v6 != (char *)buf)
      free(v6);
  }
}

void sub_1008557F4(uint64_t a1, int a2, int a3, double a4)
{
  int v8;
  double v9;
  double v10;

  if (*(_QWORD *)(a1 + 1184))
  {
    if (sub_1000FDB0C())
    {
      v8 = sub_1000C4240();
      if (v8)
      {
        v9 = 24.0;
        if (!a2)
        {
LABEL_18:
          sub_10175256C(*(double **)(a1 + 1184), v9, a4);
          return;
        }
      }
      if (!a2)
        return;
    }
    else
    {
      v8 = 0;
      if (!a2)
        return;
    }
    if ((sub_10075BBF4() & 1) != 0 || (v10 = 0.0, sub_1002416C0()))
    {
      if (sub_1000C4240())
        v10 = 6.0;
      else
        v10 = 0.0;
    }
    v9 = 30.0;
    if (!v8)
      v9 = v10;
    if (a3)
      v9 = v9 - *(double *)(a1 + 3104);
    if (v9 > 0.0)
      goto LABEL_18;
  }
}

uint64_t sub_1008558C4(uint64_t a1)
{
  _BOOL4 v2;
  _BOOL4 v3;
  std::__shared_weak_count *size;
  unint64_t *v5;
  unint64_t v6;
  NSObject *v7;
  std::string *v8;
  std::string *v9;
  const char *v10;
  std::string *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  std::string *v15;
  char *v16;
  std::string *v17;
  __int128 v18;
  __int128 *v19;
  __int128 v20;
  NSObject *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::string::size_type v27;
  void *v28;
  void **v29;
  std::string *v30;
  NSObject *v31;
  void **v32;
  std::string *v33;
  double Current;
  unsigned int v35;
  NSObject *v36;
  NSObject *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  void **v42;
  std::string *v43;
  const char *v44;
  std::string *v45;
  const char *v46;
  std::string *v47;
  std::string *v48;
  const char *v49;
  const char *v50;
  std::string *v51;
  const char *v52;
  std::string *v53;
  uint64_t v54;
  void *__p[2];
  uint64_t v56;
  std::string v57;
  int v58;
  double v59;
  __int16 v60;
  std::string *v61;
  void *v62[2];
  std::string::size_type v63;
  std::string buf[68];

  memset(&v57, 0, sizeof(v57));
  sub_1001E4804(buf);
  v2 = sub_1000BCB64((uint64_t)buf[0].__r_.__value_.__l.__data_, "GnssKnownACFileUrl", &v57);
  v3 = v2;
  size = (std::__shared_weak_count *)buf[0].__r_.__value_.__l.__size_;
  if (!buf[0].__r_.__value_.__l.__size_)
    goto LABEL_5;
  v5 = (unint64_t *)(buf[0].__r_.__value_.__l.__size_ + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 - 1, v5));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
    if (v3)
    {
LABEL_6:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v7 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v8 = &v57;
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v8 = (std::string *)v57.__r_.__value_.__r.__words[0];
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "knownACFile,user defined url %s", (uint8_t *)buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102156068);
        v9 = &v57;
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v9 = (std::string *)v57.__r_.__value_.__r.__words[0];
        LODWORD(v62[0]) = 136315138;
        *(void **)((char *)v62 + 4) = v9;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "knownACFile,user defined url %s", (const char *)v62);
        v11 = (std::string *)v10;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLGnssController::didKnownACSourceUrlChange()", "%s\n", v10);
LABEL_115:
        if (v11 != buf)
          free(v11);
        goto LABEL_28;
      }
      goto LABEL_28;
    }
  }
  else
  {
LABEL_5:
    if (v2)
      goto LABEL_6;
  }
  v12 = (void *)GEOURLString(65);
  v13 = v12;
  if (v12 && objc_msgSend(v12, "length"))
  {
    std::string::assign(&v57, (const std::string::value_type *)objc_msgSend(v13, "UTF8String"));
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v14 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v15 = &v57;
      if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v15 = (std::string *)v57.__r_.__value_.__r.__words[0];
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "knownACFile,source url is %s", (uint8_t *)buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v48 = &v57;
      if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v48 = (std::string *)v57.__r_.__value_.__r.__words[0];
      LODWORD(v62[0]) = 136315138;
      *(void **)((char *)v62 + 4) = v48;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "knownACFile,source url is %s", (const char *)v62);
      v11 = (std::string *)v49;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGnssController::didKnownACSourceUrlChange()", "%s\n", v49);
      goto LABEL_115;
    }
LABEL_28:
    v16 = (char *)sub_1001FD94C();
    sub_1000B7884(v16, (uint64_t)buf);
    v17 = std::string::append(buf, "ligl.bin");
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v63 = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)v62 = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    v19 = *(__int128 **)(a1 + 1008);
    if (!v19)
    {
      sub_10085F870((__int128 *)&v57, (__int128 *)v62, buf);
      sub_1002B7674(a1 + 1008, (__int128 *)buf);
      v23 = (std::__shared_weak_count *)buf[0].__r_.__value_.__l.__size_;
      if (buf[0].__r_.__value_.__l.__size_)
      {
        v24 = (unint64_t *)(buf[0].__r_.__value_.__l.__size_ + 8);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v22 = 1;
      goto LABEL_93;
    }
    if (*((char *)v19 + 23) < 0)
    {
      sub_100115CE4(__p, *(void **)v19, *((_QWORD *)v19 + 1));
    }
    else
    {
      v20 = *v19;
      v56 = *((_QWORD *)v19 + 2);
      *(_OWORD *)__p = v20;
    }
    v26 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
    else
      v27 = v57.__r_.__value_.__l.__size_;
    v28 = (void *)HIBYTE(v56);
    if (v56 < 0)
      v28 = __p[1];
    if ((void *)v27 == v28)
    {
      if (v56 >= 0)
        v29 = __p;
      else
        v29 = (void **)__p[0];
      if ((*((_BYTE *)&v57.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (memcmp(v57.__r_.__value_.__l.__data_, v29, v57.__r_.__value_.__l.__size_))
          goto LABEL_62;
      }
      else if (*((_BYTE *)&v57.__r_.__value_.__s + 23))
      {
        v30 = &v57;
        while (v30->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v29)
        {
          v30 = (std::string *)((char *)v30 + 1);
          v29 = (void **)((char *)v29 + 1);
          if (!--v26)
            goto LABEL_78;
        }
        goto LABEL_62;
      }
LABEL_78:
      v22 = 0;
LABEL_91:
      if (SHIBYTE(v56) < 0)
        operator delete(__p[0]);
LABEL_93:
      if (SHIBYTE(v63) < 0)
        operator delete(v62[0]);
      goto LABEL_95;
    }
LABEL_62:
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v31 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v32 = __p;
      if (v56 < 0)
        v32 = (void **)__p[0];
      v33 = &v57;
      if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v33 = (std::string *)v57.__r_.__value_.__r.__words[0];
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v32;
      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v33;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "knownACFile,url changed from, %s,to, %s", (uint8_t *)buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v42 = __p;
      if (v56 < 0)
        v42 = (void **)__p[0];
      v43 = &v57;
      if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v43 = (std::string *)v57.__r_.__value_.__r.__words[0];
      v58 = 136315394;
      v59 = *(double *)&v42;
      v60 = 2080;
      v61 = v43;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "knownACFile,url changed from, %s,to, %s", (const char *)&v58, 22);
      v45 = (std::string *)v44;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGnssController::didKnownACSourceUrlChange()", "%s\n", v44);
      if (v45 != buf)
        free(v45);
    }
    Current = CFAbsoluteTimeGetCurrent();
    if (vabdd_f64(Current, *(double *)(a1 + 1032)) >= 86400.0)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v37 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 134217984;
        *(double *)((char *)buf[0].__r_.__value_.__r.__words + 4) = Current;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "knownACFile,first url change at,%.1f", (uint8_t *)buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102156068);
        v58 = 134217984;
        v59 = Current;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "knownACFile,first url change at,%.1f", COERCE_DOUBLE(&v58));
        v51 = (std::string *)v50;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLGnssController::didKnownACSourceUrlChange()", "%s\n", v50);
        if (v51 != buf)
          free(v51);
      }
      *(double *)(a1 + 1032) = Current;
      *(_DWORD *)(a1 + 1040) = 1;
    }
    else
    {
      v35 = *(_DWORD *)(a1 + 1040) + 1;
      *(_DWORD *)(a1 + 1040) = v35;
      if (v35 >= 3)
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102156068);
        v36 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "knownACFile,url change limit hit", (uint8_t *)buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102156068);
          LOWORD(v58) = 0;
          LODWORD(v54) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "knownACFile,url change limit hit", &v58, v54);
          v53 = (std::string *)v52;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLGnssController::didKnownACSourceUrlChange()", "%s\n", v52);
          if (v53 != buf)
            free(v53);
        }
        goto LABEL_78;
      }
    }
    sub_10085F870((__int128 *)&v57, (__int128 *)v62, buf);
    sub_1002B7674(a1 + 1008, (__int128 *)buf);
    v38 = (std::__shared_weak_count *)buf[0].__r_.__value_.__l.__size_;
    if (buf[0].__r_.__value_.__l.__size_)
    {
      v39 = (unint64_t *)(buf[0].__r_.__value_.__l.__size_ + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    v22 = 1;
    goto LABEL_91;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v21 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "knownACFile, URL is nil or empty", (uint8_t *)buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    LOWORD(v62[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "knownACFile, URL is nil or empty", v62, 2);
    v47 = (std::string *)v46;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLGnssController::didKnownACSourceUrlChange()", "%s\n", v46);
    if (v47 != buf)
      free(v47);
  }
  v22 = 0;
LABEL_95:
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  return v22;
}

void sub_10085641C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a16 < 0)
    operator delete(__p);
  if (a32 < 0)
    operator delete(a27);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void sub_1008564BC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  NSObject *v8;
  uint64_t *v9;
  uint64_t *v10;
  _QWORD *v11;
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  uint8_t buf[8];
  _BYTE v17[10];
  __int16 v18;
  const char *v19;
  __int16 v20;
  uint64_t *v21;
  __int16 v22;
  _QWORD *v23;

  if (*(_QWORD *)(a1 + 1008))
  {
    sub_1001E4804(buf);
    v15 = 0;
    sub_1001FD98C(*(uint64_t *)buf, "GnssKnownACUpdateRateCellSeconds", &v15);
    v2 = *(std::__shared_weak_count **)v17;
    if (*(_QWORD *)v17)
    {
      v3 = (unint64_t *)(*(_QWORD *)v17 + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 - 1, v3));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    sub_1001E4804(buf);
    v15 = 0;
    sub_1001FD98C(*(uint64_t *)buf, "GnssKnownACUpdateRateWiFiSeconds", &v15);
    v5 = *(std::__shared_weak_count **)v17;
    if (*(_QWORD *)v17)
    {
      v6 = (unint64_t *)(*(_QWORD *)v17 + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v9 = *(uint64_t **)(a1 + 1008);
      v10 = v9;
      if (*((char *)v9 + 23) < 0)
        v10 = (uint64_t *)*v9;
      v11 = v9 + 3;
      if (*((char *)v9 + 47) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 68289795;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v17 = 2082;
      *(_QWORD *)&v17[2] = "";
      v18 = 2082;
      v19 = "knownACFile";
      v20 = 2081;
      v21 = v10;
      v22 = 2081;
      v23 = v11;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s, \"source\":%{private, location:escape_only}s, \"destination\":%{private, location:escape_only}s}", buf, 0x30u);
    }
    operator new();
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v12 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "knownACFile, exiting as KnownAC file ptr is null", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    LOWORD(v15) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "knownACFile, exiting as KnownAC file ptr is null", &v15, 2);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssController::modifyKnownACDownloader()", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
}

void sub_1008568E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *a16)
{
  char *v16;
  char *v17;
  uint64_t v18;

  v17 = a16;
  if (a16 == v16)
  {
    v18 = 4;
    v17 = &a13;
  }
  else
  {
    if (!a16)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  sub_100261F44((uint64_t)&a11);
  operator delete();
}

uint64_t sub_10085695C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  NSObject *v5;
  _QWORD *v6;
  const char *v7;
  NSObject *v8;
  _QWORD *v9;
  _QWORD *v11;
  const char *v12;
  uint8_t *v13;
  _QWORD *v14;
  const char *v15;
  uint8_t *v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  uint8_t buf[4];
  _QWORD *v21;

  v3 = *a2;
  if (*a2)
  {
    if (*(char *)(v3 + 47) < 0)
    {
      if (!*(_QWORD *)(v3 + 32))
        goto LABEL_23;
    }
    else if (!*(_BYTE *)(v3 + 47))
    {
      goto LABEL_23;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v6 = (_QWORD *)(*a2 + 24);
      if (*(char *)(*a2 + 47) < 0)
        v6 = (_QWORD *)*v6;
      *(_DWORD *)buf = 136446210;
      v21 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "file,%{public}s,ClassD", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v11 = (_QWORD *)(*a2 + 24);
      if (*(char *)(*a2 + 47) < 0)
        v11 = (_QWORD *)*v11;
      v18 = 136446210;
      v19 = v11;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "file,%{public}s,ClassD", &v18, 12);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGnssController::actOnKnownACDownload(std::shared_ptr<CLGnssAssistanceFile> &)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    v7 = (const char *)(*a2 + 24);
    if (*(char *)(*a2 + 47) < 0)
      v7 = *(const char **)v7;
    if (!sub_1005169DC(v7, 4))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v8 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v9 = (_QWORD *)(*a2 + 24);
        if (*(char *)(*a2 + 47) < 0)
          v9 = (_QWORD *)*v9;
        *(_DWORD *)buf = 136446210;
        v21 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning,cannot set protection class,assistance file,%{public}s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102156068);
        v14 = (_QWORD *)(*a2 + 24);
        if (*(char *)(*a2 + 47) < 0)
          v14 = (_QWORD *)*v14;
        v18 = 136446210;
        v19 = v14;
        LODWORD(v17) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,cannot set protection class,assistance file,%{public}s", &v18, v17);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLGnssController::actOnKnownACDownload(std::shared_ptr<CLGnssAssistanceFile> &)", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
    }
  }
LABEL_23:
  sub_10179E138(a1 + 2800);
  return sub_1008558C4(a1);
}

void sub_100856CF4(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  uint8_t buf[1640];

  if (a1)
  {
    v2 = sub_10021C350();
    if (v2)
    {
      sub_1000A4A6C(v2, 0, a1);
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v6 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "GNSS_SEN,Could not get the sensor to deregister from", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102156068);
        v9[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "GNSS_SEN,Could not get the sensor to deregister from", v9, 2);
        v8 = (uint8_t *)v7;
        sub_100512490("Generic", 1, 0, 0, "static void CLGnssSensorAdapter<CLGyro, 0>::DispatcherDeleter(Dispatcher *) [SensorType = CLGyro, notification = 0]", "%s\n", v7);
        if (v8 != buf)
          free(v8);
      }
    }
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "GNSS_SEN,Invalid dispatcher passed to Deleter", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v9[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "GNSS_SEN,Invalid dispatcher passed to Deleter", v9, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 0, "static void CLGnssSensorAdapter<CLGyro, 0>::DispatcherDeleter(Dispatcher *) [SensorType = CLGyro, notification = 0]", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
}

uint64_t sub_100856FE0(uint64_t a1)
{
  __int128 v8;

  *(_DWORD *)a1 = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 8) = _Q0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_BYTE *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = xmmword_101BAFEE0;
  *(_OWORD *)(a1 + 64) = _Q0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = 11;
  *(_QWORD *)(a1 + 100) = -1;
  *(_QWORD *)(a1 + 108) = -1;
  *(_OWORD *)(a1 + 120) = _Q0;
  *(_DWORD *)(a1 + 136) = 0;
  __asm { FMOV            V1.2S, #-1.0 }
  *(_QWORD *)(a1 + 140) = _D1;
  *(_DWORD *)(a1 + 148) = 26;
  *(_WORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 156) = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 188) = 4;
  *(_QWORD *)(a1 + 200) = -1;
  *(_OWORD *)(a1 + 248) = _Q0;
  *(_OWORD *)(a1 + 384) = xmmword_101C174D8;
  *(_OWORD *)(a1 + 400) = xmmword_101C174E8;
  *(_OWORD *)(a1 + 416) = xmmword_101C174F8;
  *(_OWORD *)(a1 + 428) = *(__int128 *)((char *)&xmmword_101C174F8 + 12);
  *(_OWORD *)(a1 + 320) = xmmword_101C17498;
  *(_OWORD *)(a1 + 336) = xmmword_101C174A8;
  *(_OWORD *)(a1 + 352) = xmmword_101C174B8;
  *(_OWORD *)(a1 + 368) = xmmword_101C174C8;
  *(_OWORD *)(a1 + 288) = xmmword_101C17478;
  *(_OWORD *)(a1 + 304) = xmmword_101C17488;
  *(_OWORD *)(a1 + 540) = xmmword_101C174D8;
  *(_OWORD *)(a1 + 556) = xmmword_101C174E8;
  *(_OWORD *)(a1 + 572) = xmmword_101C174F8;
  *(_OWORD *)(a1 + 476) = xmmword_101C17498;
  *(_OWORD *)(a1 + 492) = xmmword_101C174A8;
  *(_OWORD *)(a1 + 508) = xmmword_101C174B8;
  *(_OWORD *)(a1 + 524) = xmmword_101C174C8;
  *(_OWORD *)(a1 + 444) = xmmword_101C17478;
  *(_OWORD *)(a1 + 460) = xmmword_101C17488;
  *(_OWORD *)(a1 + 712) = xmmword_101C174E8;
  *(_OWORD *)(a1 + 728) = xmmword_101C174F8;
  *(_OWORD *)(a1 + 740) = *(__int128 *)((char *)&xmmword_101C174F8 + 12);
  *(_OWORD *)(a1 + 648) = xmmword_101C174A8;
  *(_OWORD *)(a1 + 664) = xmmword_101C174B8;
  *(_OWORD *)(a1 + 680) = xmmword_101C174C8;
  *(_OWORD *)(a1 + 696) = xmmword_101C174D8;
  *(_OWORD *)(a1 + 584) = *(__int128 *)((char *)&xmmword_101C174F8 + 12);
  *(_OWORD *)(a1 + 600) = xmmword_101C17478;
  *(_OWORD *)(a1 + 616) = xmmword_101C17488;
  *(_OWORD *)(a1 + 632) = xmmword_101C17498;
  *(_OWORD *)(a1 + 852) = xmmword_101C174D8;
  *(_OWORD *)(a1 + 868) = xmmword_101C174E8;
  *(_OWORD *)(a1 + 884) = xmmword_101C174F8;
  *(_OWORD *)(a1 + 788) = xmmword_101C17498;
  *(_OWORD *)(a1 + 804) = xmmword_101C174A8;
  *(_DWORD *)(a1 + 164) = -1;
  *(_WORD *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 170) = 0;
  *(_QWORD *)(a1 + 176) = -1;
  *(_BYTE *)(a1 + 184) = 0;
  *(_WORD *)(a1 + 196) = 0;
  *(_DWORD *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 212) = 0;
  *(_QWORD *)(a1 + 238) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_QWORD *)(a1 + 264) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 272) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 820) = xmmword_101C174B8;
  *(_OWORD *)(a1 + 836) = xmmword_101C174C8;
  *(_OWORD *)(a1 + 756) = xmmword_101C17478;
  *(_OWORD *)(a1 + 772) = xmmword_101C17488;
  *(_QWORD *)(a1 + 933) = 0;
  *(_QWORD *)(a1 + 928) = 0;
  *(_OWORD *)(a1 + 896) = *(__int128 *)((char *)&xmmword_101C174F8 + 12);
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 944) = xmmword_101BDBEE0;
  sub_1015A2E04((_QWORD *)(a1 + 960), "");
  sub_1015A2E04((_QWORD *)(a1 + 984), "");
  *(_DWORD *)(a1 + 1016) = 0;
  *(_QWORD *)(a1 + 1008) = 0;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_QWORD *)(a1 + 1040) = 0xBFF0000000000000;
  *(_QWORD *)&v8 = -1;
  *((_QWORD *)&v8 + 1) = -1;
  *(_QWORD *)(a1 + 1048) = -1;
  *(_DWORD *)(a1 + 1056) = -1;
  *(_QWORD *)(a1 + 1060) = 0;
  *(_QWORD *)(a1 + 1065) = 0;
  *(_DWORD *)(a1 + 1076) = -1;
  *(_QWORD *)(a1 + 1080) = 0;
  *(_DWORD *)(a1 + 1087) = 0;
  *(_OWORD *)(a1 + 1092) = 0u;
  *(_OWORD *)(a1 + 1108) = 0u;
  *(_OWORD *)(a1 + 1124) = 0u;
  *(_QWORD *)(a1 + 1140) = 0;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(_QWORD *)(a1 + 1232) = -1;
  *(_OWORD *)(a1 + 1216) = v8;
  *(_OWORD *)(a1 + 1200) = v8;
  return a1;
}

void sub_100857250(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 983) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_10085726C(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100857298(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_1008572C4(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_1008572F4()
{
  operator delete();
}

_QWORD *sub_100857308(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021560B8;
  result[1] = v3;
  return result;
}

uint64_t sub_10085733C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021560B8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100857358(uint64_t a1)
{
  return sub_10084A1EC(*(_QWORD *)(a1 + 8));
}

uint64_t sub_100857360(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10085739C()
{
}

void sub_1008573AC()
{
  operator delete();
}

_QWORD *sub_1008573C0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102156138;
  result[1] = v3;
  return result;
}

uint64_t sub_1008573F4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102156138;
  a2[1] = v2;
  return result;
}

uint64_t sub_100857410(uint64_t a1)
{
  return sub_10084A38C(*(_QWORD *)(a1 + 8));
}

uint64_t sub_100857418(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100857454()
{
}

void sub_100857464()
{
  operator delete();
}

_QWORD *sub_100857478(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021561B8;
  result[1] = v3;
  return result;
}

uint64_t sub_1008574AC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021561B8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1008574C8(uint64_t a1)
{
  return sub_10084A6D0(*(_QWORD *)(a1 + 8));
}

uint64_t sub_1008574D0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10085750C()
{
}

void sub_10085751C()
{
  operator delete();
}

_QWORD *sub_100857530(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102156238;
  result[1] = v3;
  return result;
}

uint64_t sub_100857564(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102156238;
  a2[1] = v2;
  return result;
}

uint64_t sub_100857580(uint64_t a1)
{
  return sub_10084A530(*(_QWORD *)(a1 + 8));
}

uint64_t sub_100857588(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1008575C4()
{
}

void sub_1008575D4()
{
  operator delete();
}

_QWORD *sub_1008575E8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021562B8;
  result[1] = v3;
  return result;
}

uint64_t sub_10085761C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021562B8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100857638(uint64_t a1)
{
  return sub_10084A874(*(_QWORD *)(a1 + 8));
}

uint64_t sub_100857640(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10085767C()
{
}

void sub_10085768C()
{
  operator delete();
}

_QWORD *sub_1008576A0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102156338;
  result[1] = v3;
  return result;
}

uint64_t sub_1008576D4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102156338;
  a2[1] = v2;
  return result;
}

uint64_t sub_1008576F0(uint64_t a1)
{
  return sub_10084AA18(*(_QWORD *)(a1 + 8));
}

uint64_t sub_1008576F8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100857734()
{
}

void sub_100857744()
{
  operator delete();
}

_QWORD *sub_100857758(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021563B8;
  result[1] = v3;
  return result;
}

uint64_t sub_10085778C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021563B8;
  a2[1] = v2;
  return result;
}

void sub_1008577A8(uint64_t a1)
{
  sub_1008530D0(*(_QWORD *)(a1 + 8));
}

uint64_t sub_1008577B0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1008577EC()
{
}

void sub_1008577FC()
{
  operator delete();
}

_QWORD *sub_100857810(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102156438;
  result[1] = v3;
  return result;
}

uint64_t sub_100857844(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102156438;
  a2[1] = v2;
  return result;
}

uint64_t sub_100857860(uint64_t a1)
{
  return sub_100853420(*(_QWORD *)(a1 + 8), 1);
}

uint64_t sub_10085786C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1008578A8()
{
}

void sub_1008578B8()
{
  operator delete();
}

_QWORD *sub_1008578CC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021564B8;
  result[1] = v3;
  return result;
}

uint64_t sub_100857900(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021564B8;
  a2[1] = v2;
  return result;
}

uint64_t sub_10085791C(uint64_t a1)
{
  return sub_100853420(*(_QWORD *)(a1 + 8), 0);
}

uint64_t sub_100857928(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100857964()
{
}

double sub_100857970(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  char v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  double result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int16 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int16 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;

  *(_DWORD *)a1 = *a2;
  v3 = *(_BYTE *)(a3 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)a3;
  *(_BYTE *)(a1 + 16) = v3;
  v5 = *(_OWORD *)(a3 + 80);
  v4 = *(_OWORD *)(a3 + 96);
  v6 = *(_QWORD *)(a3 + 112);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a3 + 64);
  *(_QWORD *)(a1 + 120) = v6;
  *(_OWORD *)(a1 + 104) = v4;
  *(_OWORD *)(a1 + 88) = v5;
  v7 = *(_OWORD *)(a3 + 16);
  v8 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a1 + 40) = v8;
  *(_OWORD *)(a1 + 24) = v7;
  v9 = *(_OWORD *)(a3 + 120);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a3 + 136);
  *(_OWORD *)(a1 + 128) = v9;
  result = 0.0;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_QWORD *)(a3 + 120) = 0;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a3 + 144);
  v11 = *(_OWORD *)(a3 + 152);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a3 + 168);
  *(_OWORD *)(a1 + 160) = v11;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_QWORD *)(a3 + 152) = 0;
  v12 = *(_OWORD *)(a3 + 176);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a3 + 192);
  *(_OWORD *)(a1 + 184) = v12;
  v13 = *(_OWORD *)(a3 + 208);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a3 + 224);
  *(_OWORD *)(a1 + 216) = v13;
  *(_OWORD *)(a3 + 216) = 0u;
  *(_QWORD *)(a3 + 208) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a3 + 232);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a3 + 248);
  *(_QWORD *)(a3 + 248) = 0;
  *(_OWORD *)(a3 + 232) = 0u;
  *(_DWORD *)(a1 + 264) = *(_DWORD *)(a3 + 256);
  v14 = *(_WORD *)(a3 + 264);
  *(_BYTE *)(a1 + 274) = *(_BYTE *)(a3 + 266);
  *(_WORD *)(a1 + 272) = v14;
  v15 = *(_OWORD *)(a3 + 272);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a3 + 288);
  *(_OWORD *)(a1 + 280) = v15;
  *(_QWORD *)(a3 + 272) = 0;
  *(_OWORD *)(a3 + 280) = 0u;
  v16 = *(_OWORD *)(a3 + 296);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a3 + 312);
  *(_OWORD *)(a1 + 304) = v16;
  *(_OWORD *)(a3 + 304) = 0u;
  *(_QWORD *)(a3 + 296) = 0;
  v17 = *(_OWORD *)(a3 + 320);
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a3 + 336);
  *(_OWORD *)(a1 + 328) = v17;
  *(_QWORD *)(a3 + 336) = 0;
  *(_OWORD *)(a3 + 320) = 0u;
  v18 = *(_OWORD *)(a3 + 344);
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a3 + 360);
  *(_OWORD *)(a1 + 352) = v18;
  v19 = *(_OWORD *)(a3 + 368);
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a3 + 384);
  *(_OWORD *)(a1 + 376) = v19;
  *(_QWORD *)(a3 + 384) = 0;
  *(_OWORD *)(a3 + 368) = 0u;
  *(_WORD *)(a1 + 400) = *(_WORD *)(a3 + 392);
  *(_QWORD *)(a1 + 408) = 0;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 408) = *(_OWORD *)(a3 + 400);
  *(_QWORD *)(a1 + 424) = *(_QWORD *)(a3 + 416);
  *(_QWORD *)(a3 + 416) = 0;
  *(_OWORD *)(a3 + 400) = 0u;
  v20 = *(_OWORD *)(a3 + 520);
  v22 = *(_OWORD *)(a3 + 472);
  v21 = *(_OWORD *)(a3 + 488);
  *(_OWORD *)(a1 + 512) = *(_OWORD *)(a3 + 504);
  *(_OWORD *)(a1 + 528) = v20;
  *(_OWORD *)(a1 + 480) = v22;
  *(_OWORD *)(a1 + 496) = v21;
  v24 = *(_OWORD *)(a3 + 552);
  v23 = *(_OWORD *)(a3 + 568);
  v25 = *(_OWORD *)(a3 + 536);
  *(_OWORD *)(a1 + 588) = *(_OWORD *)(a3 + 580);
  *(_OWORD *)(a1 + 560) = v24;
  *(_OWORD *)(a1 + 576) = v23;
  *(_OWORD *)(a1 + 544) = v25;
  v26 = *(_OWORD *)(a3 + 424);
  v27 = *(_OWORD *)(a3 + 456);
  *(_OWORD *)(a1 + 448) = *(_OWORD *)(a3 + 440);
  *(_OWORD *)(a1 + 464) = v27;
  *(_OWORD *)(a1 + 432) = v26;
  v28 = *(_WORD *)(a3 + 600);
  *(_BYTE *)(a1 + 610) = *(_BYTE *)(a3 + 602);
  *(_WORD *)(a1 + 608) = v28;
  v29 = *(_OWORD *)(a3 + 608);
  *(_QWORD *)(a1 + 632) = *(_QWORD *)(a3 + 624);
  *(_OWORD *)(a1 + 616) = v29;
  *(_QWORD *)(a3 + 608) = 0;
  *(_OWORD *)(a3 + 616) = 0u;
  v30 = *(_OWORD *)(a3 + 632);
  *(_QWORD *)(a1 + 656) = *(_QWORD *)(a3 + 648);
  *(_OWORD *)(a1 + 640) = v30;
  *(_OWORD *)(a3 + 640) = 0u;
  *(_QWORD *)(a3 + 632) = 0;
  v31 = *(_OWORD *)(a3 + 656);
  *(_QWORD *)(a1 + 680) = *(_QWORD *)(a3 + 672);
  *(_OWORD *)(a1 + 664) = v31;
  *(_QWORD *)(a3 + 672) = 0;
  *(_OWORD *)(a3 + 656) = 0u;
  v32 = *(_OWORD *)(a3 + 680);
  *(_QWORD *)(a1 + 704) = *(_QWORD *)(a3 + 696);
  *(_OWORD *)(a1 + 688) = v32;
  v33 = *(_OWORD *)(a3 + 704);
  *(_QWORD *)(a1 + 728) = *(_QWORD *)(a3 + 720);
  *(_OWORD *)(a1 + 712) = v33;
  *(_QWORD *)(a3 + 720) = 0;
  *(_OWORD *)(a3 + 704) = 0u;
  *(_WORD *)(a1 + 736) = *(_WORD *)(a3 + 728);
  *(_QWORD *)(a1 + 744) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 744) = *(_OWORD *)(a3 + 736);
  *(_QWORD *)(a1 + 760) = *(_QWORD *)(a3 + 752);
  *(_QWORD *)(a3 + 752) = 0;
  *(_OWORD *)(a3 + 736) = 0u;
  v34 = *(_OWORD *)(a3 + 856);
  v36 = *(_OWORD *)(a3 + 808);
  v35 = *(_OWORD *)(a3 + 824);
  *(_OWORD *)(a1 + 848) = *(_OWORD *)(a3 + 840);
  *(_OWORD *)(a1 + 864) = v34;
  *(_OWORD *)(a1 + 816) = v36;
  *(_OWORD *)(a1 + 832) = v35;
  v38 = *(_OWORD *)(a3 + 888);
  v37 = *(_OWORD *)(a3 + 904);
  v39 = *(_OWORD *)(a3 + 872);
  *(_OWORD *)(a1 + 924) = *(_OWORD *)(a3 + 916);
  *(_OWORD *)(a1 + 896) = v38;
  *(_OWORD *)(a1 + 912) = v37;
  *(_OWORD *)(a1 + 880) = v39;
  v40 = *(_OWORD *)(a3 + 760);
  v41 = *(_OWORD *)(a3 + 792);
  *(_OWORD *)(a1 + 784) = *(_OWORD *)(a3 + 776);
  *(_OWORD *)(a1 + 800) = v41;
  *(_OWORD *)(a1 + 768) = v40;
  v42 = *(_OWORD *)(a3 + 936);
  *(_QWORD *)(a1 + 960) = *(_QWORD *)(a3 + 952);
  *(_OWORD *)(a1 + 944) = v42;
  *(_OWORD *)(a3 + 944) = 0u;
  *(_QWORD *)(a3 + 936) = 0;
  v43 = *(_OWORD *)(a3 + 960);
  *(_QWORD *)(a1 + 984) = *(_QWORD *)(a3 + 976);
  *(_OWORD *)(a1 + 968) = v43;
  *(_OWORD *)(a3 + 968) = 0u;
  *(_QWORD *)(a3 + 960) = 0;
  v44 = *(_QWORD *)(a3 + 984);
  *(_DWORD *)(a1 + 1000) = *(_DWORD *)(a3 + 992);
  *(_QWORD *)(a1 + 992) = v44;
  v45 = *(_OWORD *)(a3 + 1000);
  v46 = *(_OWORD *)(a3 + 1016);
  v47 = *(_OWORD *)(a3 + 1032);
  *(_QWORD *)(a1 + 1056) = *(_QWORD *)(a3 + 1048);
  *(_OWORD *)(a1 + 1040) = v47;
  *(_OWORD *)(a1 + 1008) = v45;
  *(_OWORD *)(a1 + 1024) = v46;
  *(_BYTE *)(a1 + 1064) = *(_BYTE *)(a3 + 1056);
  v48 = *(_OWORD *)(a3 + 1064);
  *(_QWORD *)(a1 + 1088) = *(_QWORD *)(a3 + 1080);
  *(_OWORD *)(a1 + 1072) = v48;
  *(_OWORD *)(a3 + 1072) = 0u;
  *(_QWORD *)(a3 + 1064) = 0;
  v49 = *(_OWORD *)(a3 + 1088);
  *(_OWORD *)(a1 + 1108) = *(_OWORD *)(a3 + 1100);
  *(_OWORD *)(a1 + 1096) = v49;
  *(_QWORD *)(a1 + 1128) = 0;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1128) = *(_OWORD *)(a3 + 1120);
  *(_QWORD *)(a1 + 1144) = *(_QWORD *)(a3 + 1136);
  *(_QWORD *)(a3 + 1136) = 0;
  *(_OWORD *)(a3 + 1120) = 0u;
  *(_BYTE *)(a1 + 1152) = *(_BYTE *)(a3 + 1144);
  v50 = *(_OWORD *)(a3 + 1152);
  *(_QWORD *)(a1 + 1176) = *(_QWORD *)(a3 + 1168);
  *(_OWORD *)(a1 + 1160) = v50;
  *(_OWORD *)(a3 + 1160) = 0u;
  *(_QWORD *)(a3 + 1152) = 0;
  v51 = *(_OWORD *)(a3 + 1176);
  *(_OWORD *)(a1 + 1196) = *(_OWORD *)(a3 + 1188);
  *(_OWORD *)(a1 + 1184) = v51;
  *(_QWORD *)(a1 + 1216) = 0;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1216) = *(_OWORD *)(a3 + 1208);
  *(_QWORD *)(a1 + 1232) = *(_QWORD *)(a3 + 1224);
  *(_QWORD *)(a3 + 1224) = 0;
  *(_OWORD *)(a3 + 1208) = 0u;
  v52 = *(_OWORD *)(a3 + 1232);
  *(_QWORD *)(a1 + 1256) = *(_QWORD *)(a3 + 1248);
  *(_OWORD *)(a1 + 1240) = v52;
  *(_QWORD *)(a3 + 1232) = 0;
  *(_OWORD *)(a3 + 1240) = 0u;
  v53 = *(_OWORD *)(a3 + 1256);
  *(_QWORD *)(a1 + 1280) = *(_QWORD *)(a3 + 1272);
  *(_OWORD *)(a1 + 1264) = v53;
  *(_OWORD *)(a3 + 1264) = 0u;
  *(_QWORD *)(a3 + 1256) = 0;
  v54 = *(_OWORD *)(a3 + 1280);
  *(_QWORD *)(a1 + 1304) = *(_QWORD *)(a3 + 1296);
  *(_OWORD *)(a1 + 1288) = v54;
  *(_QWORD *)(a3 + 1296) = 0;
  *(_OWORD *)(a3 + 1280) = 0u;
  v55 = *(_OWORD *)(a3 + 1304);
  *(_QWORD *)(a1 + 1328) = *(_QWORD *)(a3 + 1320);
  *(_OWORD *)(a1 + 1312) = v55;
  *(_QWORD *)(a3 + 1320) = 0;
  *(_OWORD *)(a3 + 1304) = 0u;
  return result;
}

double sub_100857DA8(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 44) = 0;
  *(_QWORD *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 52) = 0;
  *(_QWORD *)(a1 + 56) = 0x402E000000000000;
  *(_BYTE *)(a1 + 64) = 1;
  *(_OWORD *)(a1 + 72) = xmmword_101BDBEB0;
  result = 0.0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 6;
  *(_BYTE *)(a1 + 146) = 1;
  *(_QWORD *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 224) = xmmword_101BDBEF0;
  *(_QWORD *)(a1 + 240) = 0x4024000000000000;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_WORD *)(a1 + 272) = 1;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_WORD *)(a1 + 304) = 257;
  *(_WORD *)(a1 + 316) = 0;
  *(_BYTE *)(a1 + 320) = 1;
  *(_DWORD *)(a1 + 324) = -115;
  *(_QWORD *)(a1 + 328) = 0x4000000000000000;
  *(_QWORD *)(a1 + 336) = 0x3E800000005;
  *(_WORD *)(a1 + 344) = 0;
  *(_WORD *)(a1 + 356) = 257;
  *(_BYTE *)(a1 + 360) = 1;
  *(_WORD *)(a1 + 364) = 257;
  *(_QWORD *)(a1 + 368) = 0x32000000018;
  *(_WORD *)(a1 + 376) = 0;
  *(_WORD *)(a1 + 380) = 0;
  *(_QWORD *)(a1 + 384) = 0x6400000005;
  *(_WORD *)(a1 + 392) = 256;
  *(_WORD *)(a1 + 396) = 0;
  *(_QWORD *)(a1 + 400) = -1;
  *(_WORD *)(a1 + 408) = 257;
  *(_BYTE *)(a1 + 412) = 1;
  *(_WORD *)(a1 + 416) = 0;
  *(_WORD *)(a1 + 428) = 257;
  *(_WORD *)(a1 + 432) = 0;
  *(_WORD *)(a1 + 444) = 257;
  *(_WORD *)(a1 + 448) = 0;
  *(_WORD *)(a1 + 460) = 257;
  *(_QWORD *)(a1 + 464) = 0x6400000002;
  *(_DWORD *)(a1 + 472) = 100;
  *(_WORD *)(a1 + 480) = 256;
  *(_BYTE *)(a1 + 482) = 1;
  *(_QWORD *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 560) = xmmword_101BDBEF0;
  *(_QWORD *)(a1 + 576) = 0x4024000000000000;
  *(_QWORD *)(a1 + 600) = 0;
  *(_QWORD *)(a1 + 584) = 0;
  *(_QWORD *)(a1 + 592) = 0;
  *(_WORD *)(a1 + 608) = 1;
  *(_QWORD *)(a1 + 632) = 0;
  *(_QWORD *)(a1 + 616) = 0;
  *(_QWORD *)(a1 + 624) = 0;
  *(_WORD *)(a1 + 640) = 257;
  *(_WORD *)(a1 + 652) = 0;
  *(_BYTE *)(a1 + 656) = 1;
  *(_DWORD *)(a1 + 660) = -115;
  *(_QWORD *)(a1 + 664) = 0x4000000000000000;
  *(_QWORD *)(a1 + 672) = 0x3E800000005;
  *(_WORD *)(a1 + 680) = 0;
  *(_WORD *)(a1 + 692) = 257;
  *(_BYTE *)(a1 + 696) = 1;
  *(_WORD *)(a1 + 700) = 257;
  *(_QWORD *)(a1 + 704) = 0x32000000018;
  *(_WORD *)(a1 + 712) = 0;
  *(_WORD *)(a1 + 716) = 0;
  *(_QWORD *)(a1 + 720) = 0x6400000005;
  *(_WORD *)(a1 + 728) = 256;
  *(_WORD *)(a1 + 732) = 0;
  *(_QWORD *)(a1 + 736) = -1;
  *(_WORD *)(a1 + 744) = 257;
  *(_BYTE *)(a1 + 748) = 1;
  *(_WORD *)(a1 + 752) = 0;
  *(_WORD *)(a1 + 764) = 257;
  *(_WORD *)(a1 + 768) = 0;
  *(_WORD *)(a1 + 780) = 257;
  *(_WORD *)(a1 + 784) = 0;
  *(_WORD *)(a1 + 796) = 257;
  *(_QWORD *)(a1 + 800) = 0x6400000002;
  *(_WORD *)(a1 + 144) = 256;
  *(_DWORD *)(a1 + 808) = 100;
  *(_QWORD *)(a1 + 308) = 0x32000000018;
  *(_QWORD *)(a1 + 348) = -1;
  *(_QWORD *)(a1 + 420) = -1;
  *(_QWORD *)(a1 + 436) = -1;
  *(_QWORD *)(a1 + 452) = -1;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_QWORD *)(a1 + 644) = 0x32000000018;
  *(_QWORD *)(a1 + 684) = -1;
  *(_QWORD *)(a1 + 756) = -1;
  *(_QWORD *)(a1 + 772) = -1;
  *(_QWORD *)(a1 + 788) = -1;
  return result;
}

uint64_t sub_100857FD0(uint64_t a1)
{
  void **v3;

  if (*(char *)(a1 + 1327) < 0)
    operator delete(*(void **)(a1 + 1304));
  if (*(char *)(a1 + 1303) < 0)
    operator delete(*(void **)(a1 + 1280));
  if (*(char *)(a1 + 1279) < 0)
    operator delete(*(void **)(a1 + 1256));
  if (*(char *)(a1 + 1255) < 0)
    operator delete(*(void **)(a1 + 1232));
  v3 = (void **)(a1 + 1208);
  sub_1003B01F4(&v3);
  if (*(char *)(a1 + 1175) < 0)
    operator delete(*(void **)(a1 + 1152));
  v3 = (void **)(a1 + 1120);
  sub_1003B01F4(&v3);
  if (*(char *)(a1 + 1087) < 0)
    operator delete(*(void **)(a1 + 1064));
  if (*(char *)(a1 + 983) < 0)
    operator delete(*(void **)(a1 + 960));
  if (*(char *)(a1 + 959) < 0)
    operator delete(*(void **)(a1 + 936));
  sub_1008580A0(a1 + 120);
  return a1;
}

uint64_t sub_1008580A0(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 616);
  sub_1008581A8(&v3);
  if (*(char *)(a1 + 607) < 0)
    operator delete(*(void **)(a1 + 584));
  if (*(char *)(a1 + 559) < 0)
    operator delete(*(void **)(a1 + 536));
  if (*(char *)(a1 + 535) < 0)
    operator delete(*(void **)(a1 + 512));
  if (*(char *)(a1 + 511) < 0)
    operator delete(*(void **)(a1 + 488));
  v3 = (void **)(a1 + 280);
  sub_1008581A8(&v3);
  if (*(char *)(a1 + 271) < 0)
    operator delete(*(void **)(a1 + 248));
  if (*(char *)(a1 + 223) < 0)
    operator delete(*(void **)(a1 + 200));
  if (*(char *)(a1 + 199) < 0)
    operator delete(*(void **)(a1 + 176));
  if (*(char *)(a1 + 175) < 0)
    operator delete(*(void **)(a1 + 152));
  v3 = (void **)(a1 + 112);
  sub_100259608(&v3);
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1008581A8(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        sub_10085822C((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_10085822C(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 79) < 0)
    operator delete(*(void **)(a2 + 56));
  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

_QWORD *sub_100858280(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100270E34((uint64_t)v6, a2);
  sub_100858318(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *sub_100858318(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_100858480(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_10085848C(id a1)
{
  qword_1022A0088 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

uint64_t sub_1008584B8(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int16 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int16 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  std::string::operator=((std::string *)a1, (const std::string *)a2);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  std::string::operator=((std::string *)(a1 + 32), (const std::string *)(a2 + 32));
  v4 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = v4;
  std::string::operator=((std::string *)(a1 + 88), (const std::string *)(a2 + 88));
  if (a1 != a2)
    sub_101892BBC(a1 + 112, *(std::string **)(a2 + 112), *(__int128 **)(a2 + 120), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 120) - *(_QWORD *)(a2 + 112)) >> 3));
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  v5 = *(_WORD *)(a2 + 144);
  *(_BYTE *)(a1 + 146) = *(_BYTE *)(a2 + 146);
  *(_WORD *)(a1 + 144) = v5;
  std::string::operator=((std::string *)(a1 + 152), (const std::string *)(a2 + 152));
  std::string::operator=((std::string *)(a1 + 176), (const std::string *)(a2 + 176));
  std::string::operator=((std::string *)(a1 + 200), (const std::string *)(a2 + 200));
  v6 = *(_QWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 240) = v6;
  std::string::operator=((std::string *)(a1 + 248), (const std::string *)(a2 + 248));
  *(_WORD *)(a1 + 272) = *(_WORD *)(a2 + 272);
  if (a1 != a2)
    sub_1008586C4(a1 + 280, *(std::string **)(a2 + 280), *(__int128 **)(a2 + 288), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 288) - *(_QWORD *)(a2 + 280)) >> 4));
  v7 = *(_OWORD *)(a2 + 304);
  v8 = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 336) = v8;
  *(_OWORD *)(a1 + 304) = v7;
  v9 = *(_OWORD *)(a2 + 352);
  v10 = *(_OWORD *)(a2 + 368);
  v11 = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 400) = v11;
  *(_OWORD *)(a1 + 352) = v9;
  *(_OWORD *)(a1 + 368) = v10;
  v12 = *(_OWORD *)(a2 + 416);
  v13 = *(_OWORD *)(a2 + 432);
  v14 = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 460) = *(_OWORD *)(a2 + 460);
  *(_OWORD *)(a1 + 432) = v13;
  *(_OWORD *)(a1 + 448) = v14;
  *(_OWORD *)(a1 + 416) = v12;
  v15 = *(_WORD *)(a2 + 480);
  *(_BYTE *)(a1 + 482) = *(_BYTE *)(a2 + 482);
  *(_WORD *)(a1 + 480) = v15;
  std::string::operator=((std::string *)(a1 + 488), (const std::string *)(a2 + 488));
  std::string::operator=((std::string *)(a1 + 512), (const std::string *)(a2 + 512));
  std::string::operator=((std::string *)(a1 + 536), (const std::string *)(a2 + 536));
  v16 = *(_QWORD *)(a2 + 576);
  *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
  *(_QWORD *)(a1 + 576) = v16;
  std::string::operator=((std::string *)(a1 + 584), (const std::string *)(a2 + 584));
  *(_WORD *)(a1 + 608) = *(_WORD *)(a2 + 608);
  if (a1 != a2)
    sub_1008586C4(a1 + 616, *(std::string **)(a2 + 616), *(__int128 **)(a2 + 624), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 624) - *(_QWORD *)(a2 + 616)) >> 4));
  v17 = *(_OWORD *)(a2 + 640);
  v18 = *(_OWORD *)(a2 + 672);
  *(_OWORD *)(a1 + 656) = *(_OWORD *)(a2 + 656);
  *(_OWORD *)(a1 + 672) = v18;
  *(_OWORD *)(a1 + 640) = v17;
  v19 = *(_OWORD *)(a2 + 688);
  v20 = *(_OWORD *)(a2 + 704);
  v21 = *(_OWORD *)(a2 + 736);
  *(_OWORD *)(a1 + 720) = *(_OWORD *)(a2 + 720);
  *(_OWORD *)(a1 + 736) = v21;
  *(_OWORD *)(a1 + 688) = v19;
  *(_OWORD *)(a1 + 704) = v20;
  v22 = *(_OWORD *)(a2 + 752);
  v23 = *(_OWORD *)(a2 + 768);
  v24 = *(_OWORD *)(a2 + 784);
  *(_OWORD *)(a1 + 796) = *(_OWORD *)(a2 + 796);
  *(_OWORD *)(a1 + 768) = v23;
  *(_OWORD *)(a1 + 784) = v24;
  *(_OWORD *)(a1 + 752) = v22;
  return a1;
}

void sub_1008586C4(uint64_t a1, std::string *__str, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  std::string *v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  std::string *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;

  v8 = a1 + 16;
  v9 = *(std::string **)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) < a4)
  {
    sub_100858844((void **)a1);
    if (a4 > 0x333333333333333)
      sub_100259694();
    v10 = 0x999999999999999ALL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4);
    if (v10 <= a4)
      v10 = a4;
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) >= 0x199999999999999)
      v11 = 0x333333333333333;
    else
      v11 = v10;
    sub_100364E14((_QWORD *)a1, v11);
    v12 = sub_1008588B0(v8, (__int128 *)__str, a3, *(char **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 4) < a4)
  {
    v13 = (std::string *)((char *)__str + 16 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 4));
    sub_100858AC4((int)&v17, __str, v13, v9);
    v12 = sub_1008588B0(v8, (__int128 *)v13, a3, *(char **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  sub_100858AC4((int)&v18, __str, (std::string *)a3, v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 80;
      sub_10085822C(v8, v16);
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_100858834(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_10085883C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_100858844(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 80;
        sub_10085822C((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *sub_1008588B0(uint64_t a1, __int128 *a2, __int128 *a3, char *__dst)
{
  char *v4;
  __int128 *v6;
  int v7;
  _QWORD v9[3];
  char v10;
  char *v11;
  char *v12;

  v4 = __dst;
  v11 = __dst;
  v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    v7 = a1;
    do
    {
      sub_100858958(v7, v4, v6);
      v6 += 5;
      v4 = v12 + 80;
      v12 += 80;
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_100858A40((uint64_t)v9);
  return v4;
}

void sub_100858944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100858A40((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_BYTE *sub_100858958(int a1, char *__dst, __int128 *a3)
{
  __int128 v5;
  __int128 v6;
  _BYTE *result;
  __int128 v8;

  if (*((char *)a3 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a3 + 2);
    *(_OWORD *)__dst = v5;
  }
  if (*((char *)a3 + 47) < 0)
  {
    sub_100115CE4(__dst + 24, *((void **)a3 + 3), *((_QWORD *)a3 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a3 + 24);
    *((_QWORD *)__dst + 5) = *((_QWORD *)a3 + 5);
    *(_OWORD *)(__dst + 24) = v6;
  }
  __dst[48] = *((_BYTE *)a3 + 48);
  result = __dst + 56;
  if (*((char *)a3 + 79) < 0)
    return sub_100115CE4(result, *((void **)a3 + 7), *((_QWORD *)a3 + 8));
  v8 = *(__int128 *)((char *)a3 + 56);
  *((_QWORD *)__dst + 9) = *((_QWORD *)a3 + 9);
  *(_OWORD *)result = v8;
  return result;
}

void sub_100858A0C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100858A40(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_100858A74((uint64_t *)a1);
  return a1;
}

void sub_100858A74(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 80;
      sub_10085822C(v5, v3);
    }
    while (v3 != v4);
  }
}

std::string *sub_100858AC4(int a1, std::string *__str, std::string *a3, std::string *this)
{
  std::string *v5;
  std::string *v6;

  v5 = __str;
  if (__str == a3)
    return __str;
  v6 = a3;
  do
  {
    std::string::operator=(this, v5);
    std::string::operator=(this + 1, v5 + 1);
    this[2].__r_.__value_.__s.__data_[0] = v5[2].__r_.__value_.__s.__data_[0];
    std::string::operator=((std::string *)((char *)this + 56), (std::string *)((char *)v5 + 56));
    this = (std::string *)((char *)this + 80);
    v5 = (std::string *)((char *)v5 + 80);
  }
  while (v5 != v6);
  return v6;
}

void sub_100858B44(uint64_t a1, std::string *__str, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  std::string *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  std::string *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;

  v8 = a1 + 16;
  v9 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) < a4)
  {
    sub_1003B0498((void **)a1);
    if (a4 > 0x555555555555555)
      sub_100259694();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
      v11 = 0x555555555555555;
    else
      v11 = v10;
    sub_100858CC4((_QWORD *)a1, v11);
    v12 = sub_100858D14(v8, (__int128 *)__str, a3, *(_QWORD **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 4) < a4)
  {
    v13 = (std::string *)((char *)__str + 16 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 4));
    sub_100858ED0((int)&v17, __str, v13, v9);
    v12 = sub_100858D14(v8, (__int128 *)v13, a3, *(_QWORD **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  sub_100858ED0((int)&v18, __str, (std::string *)a3, v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 48;
      sub_100302B68(v8, v16);
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_100858CB4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_100858CBC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_100858CC4(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x555555555555556)
    sub_100259694();
  result = (char *)sub_100313718((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

_QWORD *sub_100858D14(uint64_t a1, __int128 *a2, __int128 *a3, _QWORD *__dst)
{
  _QWORD *v4;
  __int128 *v6;
  int v7;
  _QWORD v9[3];
  char v10;
  void *v11;
  char *v12;

  v4 = __dst;
  v11 = __dst;
  v12 = (char *)__dst;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    v7 = a1;
    do
    {
      sub_100858DBC(v7, v4, v6);
      v6 += 3;
      v4 = v12 + 48;
      v12 += 48;
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_100858E4C((uint64_t)v9);
  return v4;
}

void sub_100858DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100858E4C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_BYTE *sub_100858DBC(int a1, _QWORD *__dst, __int128 *a3)
{
  __int128 v5;
  _BYTE *result;
  __int128 v7;

  if (*((char *)a3 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    __dst[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)__dst = v5;
  }
  result = __dst + 3;
  if (*((char *)a3 + 47) < 0)
    return sub_100115CE4(result, *((void **)a3 + 3), *((_QWORD *)a3 + 4));
  v7 = *(__int128 *)((char *)a3 + 24);
  __dst[5] = *((_QWORD *)a3 + 5);
  *(_OWORD *)result = v7;
  return result;
}

void sub_100858E30(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100858E4C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_100858E80((uint64_t *)a1);
  return a1;
}

void sub_100858E80(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 48;
      sub_100302B68(v5, v3);
    }
    while (v3 != v4);
  }
}

std::string *sub_100858ED0(int a1, std::string *__str, std::string *a3, std::string *this)
{
  std::string *v5;
  std::string *v6;

  v5 = __str;
  if (__str == a3)
    return __str;
  v6 = a3;
  do
  {
    std::string::operator=(this, v5);
    std::string::operator=(this + 1, v5 + 1);
    this += 2;
    v5 += 2;
  }
  while (v5 != v6);
  return v6;
}

void sub_100858F3C(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t i;
  uint64_t *v8;
  BOOL v9;
  uint64_t *v10;
  unint64_t v11;
  _QWORD *v12;

  v4 = a2;
  v6 = a1[1];
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v8 = (uint64_t *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8)
      v9 = a2 == a3;
    else
      v9 = 1;
    if (v9)
    {
      v10 = v8;
    }
    else
    {
      do
      {
        v11 = *((unsigned int *)v4 + 4);
        *((_DWORD *)v8 + 4) = v11;
        if (v8 != v4)
        {
          *((_DWORD *)v8 + 14) = *((_DWORD *)v4 + 14);
          sub_10085906C(v8 + 3, (uint64_t *)v4[5], 0);
          v11 = *((unsigned int *)v8 + 4);
        }
        v10 = (uint64_t *)*v8;
        v8[1] = v11;
        v12 = (_QWORD *)sub_100394D84((uint64_t)a1, v11, (_DWORD *)v8 + 4);
        sub_10012923C(a1, v8, v12);
        v4 = (uint64_t *)*v4;
        if (!v10)
          break;
        v8 = v10;
      }
      while (v4 != a3);
    }
    sub_100067A88((uint64_t)a1, v10);
  }
  while (v4 != a3)
  {
    sub_1008591FC(a1, (_DWORD *)v4 + 4);
    v4 = (uint64_t *)*v4;
  }
}

void sub_10085903C(void *a1)
{
  uint64_t v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  sub_100067A88(v1, v2);
  __cxa_rethrow();
}

void sub_100859058(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_10085906C(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t i;
  uint64_t *v8;
  unint64_t v9;
  __int128 v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t *v13;

  v6 = a1[1];
  if (!v6)
    goto LABEL_9;
  for (i = 0; i != v6; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v8 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      v9 = *((int *)a2 + 4);
      *((_DWORD *)v8 + 4) = v9;
      v10 = *(_OWORD *)((char *)a2 + 20);
      *((_OWORD *)v8 + 2) = *((_OWORD *)a2 + 2);
      *(_OWORD *)((char *)v8 + 20) = v10;
      v11 = (uint64_t *)*v8;
      v8[1] = v9;
      v12 = (_QWORD *)sub_100394D84((uint64_t)a1, v9, (_DWORD *)v8 + 4);
      sub_10012923C(a1, v8, v12);
      a2 = (uint64_t *)*a2;
      v8 = v11;
      if (!v11)
        goto LABEL_9;
    }
    do
    {
      v13 = (uint64_t *)*v8;
      operator delete(v8);
      v8 = v13;
    }
    while (v13);
  }
  else
  {
LABEL_9:
    while (a2 != a3)
    {
      sub_100859184(a1, (_OWORD *)a2 + 1);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_100859150(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_100859170(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

int *sub_100859184(_QWORD *a1, _OWORD *a2)
{
  int *v4;
  __int128 v5;
  unint64_t v6;
  _QWORD *v7;

  v4 = (int *)operator new(0x30uLL);
  v5 = a2[1];
  *((_OWORD *)v4 + 1) = *a2;
  *((_OWORD *)v4 + 2) = v5;
  v6 = v4[4];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = v6;
  v7 = (_QWORD *)sub_100394D84((uint64_t)a1, v6, v4 + 4);
  sub_10012923C(a1, v4, v7);
  return v4;
}

void sub_1008591E8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1008591FC(_QWORD *a1, _DWORD *a2)
{
  _QWORD *v3;
  unint64_t v4;
  _DWORD *v5;
  _QWORD *v6;
  _QWORD v8[3];

  sub_10085927C((uint64_t)a1, a2, (uint64_t)v8);
  v3 = (_QWORD *)v8[0];
  v5 = (_DWORD *)(v8[0] + 16);
  v4 = *(unsigned int *)(v8[0] + 16);
  *(_QWORD *)(v8[0] + 8) = v4;
  v6 = (_QWORD *)sub_100394D84((uint64_t)a1, v4, v5);
  sub_10012923C(a1, v3, v6);
  v8[0] = 0;
  sub_100859588((uint64_t)v8, 0);
  return v3;
}

void sub_100859264(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100859588((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_10085927C@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;

  v5 = a1 + 16;
  v6 = operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  *v6 = 0;
  v6[1] = 0;
  *((_DWORD *)v6 + 4) = *a2;
  result = sub_1008592FC((uint64_t)(v6 + 3), (uint64_t)(a2 + 2));
  *(_BYTE *)(a3 + 16) = 1;
  v6[1] = *((unsigned int *)v6 + 4);
  return result;
}

void sub_1008592E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100859588(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1008592FC(uint64_t a1, uint64_t a2)
{
  int *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_10012E444(a1, *(_QWORD *)(a2 + 8));
  for (i = *(int **)(a2 + 16); i; i = *(int **)i)
    sub_100859370(a1, i + 4, (_OWORD *)i + 1);
  return a1;
}

void sub_100859358(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100067AC4(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100859370(uint64_t a1, int *a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  __int128 v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v6;
  v12 = a3[1];
  *((_OWORD *)v10 + 1) = *a3;
  *((_OWORD *)v10 + 2) = v12;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_10012E444(a1, v18);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *v10 = *v20;
LABEL_38:
    *v20 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v19 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v21 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7)
        v21 %= v7;
    }
    else
    {
      v21 &= v7 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_100859574(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100859588(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_100067AC4((uint64_t)v2 + 24);
    operator delete(v2);
  }
}

void sub_1008595CC(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_1008595F8(id a1)
{
  qword_1022A02F8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Location_deprecated");
}

void sub_100859628(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100859650(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_100859690(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  void **v13;
  size_t v14;
  __int128 *v15;
  const void *v16;
  uint8_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = *a3;
  v10 = a3[1];
  *(_QWORD *)(a1 + 40) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v13 = (void **)(a1 + 96);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 2;
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(_QWORD *)(a2 + 8))
      goto LABEL_6;
LABEL_21:
    sub_10190C330(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8, v17, v18, v19, v20, v21, *((uint64_t *)&v21 + 1), v22, v23, v24, v25, v26,
      v27,
      v28,
      v29,
      v30,
      v31);
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/CLStateMachine.h", 60, "CLStateMachine");
    __break(1u);
    return;
  }
  if (!*(_BYTE *)(a2 + 23))
    goto LABEL_21;
LABEL_6:
  if (*(char *)(a2 + 23) >= 0)
    v14 = *(unsigned __int8 *)(a2 + 23);
  else
    v14 = *(_QWORD *)(a2 + 8);
  sub_100259584((uint64_t)&v21, v14 + 1);
  if (v22 >= 0)
    v15 = &v21;
  else
    v15 = (__int128 *)v21;
  if (v14)
  {
    if (*(char *)(a2 + 23) >= 0)
      v16 = (const void *)a2;
    else
      v16 = *(const void **)a2;
    memmove(v15, v16, v14);
  }
  *(_WORD *)((char *)v15 + v14) = 44;
  if (*(char *)(a1 + 119) < 0)
    operator delete(*v13);
  *(_OWORD *)v13 = v21;
  *(_QWORD *)(a1 + 112) = v22;
}

void sub_100859814(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD **v5;
  void **v6;
  _QWORD **v7;

  if (*(char *)(v1 + 119) < 0)
    operator delete(*v6);
  sub_100008848(v4, *v7);
  sub_100261F44(v3);
  sub_100008848(v2, *v5);
  _Unwind_Resume(a1);
}

uint64_t sub_100859854(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10171D0D8();
    operator delete();
  }
  return result;
}

uint64_t sub_100859890(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1017612C8();
    operator delete();
  }
  return result;
}

uint64_t sub_1008598CC(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100EB0240();
    operator delete();
  }
  return result;
}

void sub_100859908(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v3 = (uint64_t *)a2[6];
    if (v3 == a2 + 3)
    {
      v4 = 4;
      v3 = a2 + 3;
    }
    else
    {
      if (!v3)
        goto LABEL_8;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
    v5 = *a2;
    *a2 = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    operator delete();
  }
}

uint64_t *sub_100859988(uint64_t **a1, uint64_t *a2)
{
  uint64_t *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100B5ACF4(result);
    operator delete();
  }
  return result;
}

uint64_t sub_1008599C4(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100A0CCE8();
    operator delete();
  }
  return result;
}

uint64_t sub_100859A00(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_101429608();
    operator delete();
  }
  return result;
}

uint64_t *sub_100859A3C(uint64_t **a1, uint64_t *a2)
{
  uint64_t *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1007942CC(result);
    operator delete();
  }
  return result;
}

uint64_t sub_100859A78(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1017147B4();
    operator delete();
  }
  return result;
}

uint64_t sub_100859AB4(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1017930D8();
    operator delete();
  }
  return result;
}

uint64_t *sub_100859AF0(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *(_QWORD **)(v2 + 96);
    if (v3 == (_QWORD *)(v2 + 72))
    {
      v4 = 4;
      v3 = (_QWORD *)(v2 + 72);
    }
    else
    {
      if (!v3)
        goto LABEL_8;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
    operator delete();
  }
  return result;
}

_QWORD *sub_100859B64(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)*result;
  *result = a2;
  if (v2)
  {
    v3 = (_QWORD *)v2[3];
    if (v3 == v2)
    {
      v4 = 4;
      v3 = v2;
    }
    else
    {
      if (!v3)
        goto LABEL_8;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
    operator delete();
  }
  return result;
}

uint64_t sub_100859BD4(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_101754760();
    operator delete();
  }
  return result;
}

uint64_t sub_100859C10(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_101738158(result);
    operator delete();
  }
  return result;
}

uint64_t sub_100859C4C(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10174E004();
    operator delete();
  }
  return result;
}

uint64_t sub_100859C88(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10173C070();
    operator delete();
  }
  return result;
}

uint64_t sub_100859CC4(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100DA1BFC();
    operator delete();
  }
  return result;
}

uint64_t sub_100859D00(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1011A6DDC(result);
    operator delete();
  }
  return result;
}

uint64_t sub_100859D3C(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100F6DAC0();
    operator delete();
  }
  return result;
}

uint64_t sub_100859D78(uint64_t a1)
{
  void *v2;

  sub_100859DB0(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_100859DB0(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_100857FD0((uint64_t)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_100859DEC(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 56;
  sub_100859E54(*(_QWORD **)(a1 + 56), (_QWORD *)(a1 + 64), a1);
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  sub_100008848(v2, *(_QWORD **)(a1 + 64));
  sub_100261F44(a1 + 32);
  sub_100008848(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

uint64_t sub_100859E54(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      sub_10001C98C(a3, *((_DWORD *)v5 + 8));
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != a2);
  }
  return a3;
}

void sub_100859ED4()
{
  operator delete();
}

_QWORD *sub_100859EE8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021565F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100859F1C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021565F8;
  a2[1] = v2;
  return result;
}

BOOL sub_100859F38(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v11[3];
  _QWORD *v12;
  _BYTE v13[24];
  _BYTE *v14;

  sub_10085A12C((uint64_t)v11, a2);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = (uint64_t)v12;
  if (!v12)
    goto LABEL_4;
  if (v12 != v11)
  {
    v4 = (*(uint64_t (**)(void))(*v12 + 16))();
LABEL_4:
    v14 = (_BYTE *)v4;
    goto LABEL_6;
  }
  v14 = v13;
  (*(void (**)(_QWORD *, _BYTE *))(v11[0] + 24))(v11, v13);
LABEL_6:
  v5 = *(unsigned __int8 *)(v3 + 8);
  if (*(_BYTE *)(v3 + 8))
  {
    if (!v14)
      sub_10025FD1C();
    (*(void (**)(_BYTE *, _QWORD))(*(_QWORD *)v14 + 48))(v14, *(_QWORD *)v3);
  }
  v6 = v14;
  if (v14 == v13)
  {
    v7 = 4;
    v6 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_14;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_14:
  v8 = v12;
  if (v12 == v11)
  {
    v9 = 4;
    v8 = v11;
    goto LABEL_18;
  }
  if (v12)
  {
    v9 = 5;
LABEL_18:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return v5 != 0;
}

void sub_10085A070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  char *v18;
  uint64_t v19;

  v18 = a13;
  if (a13 == &a10)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_10085A0E4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10085A120()
{
}

uint64_t sub_10085A12C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void sub_10085A194()
{
  operator delete();
}

_QWORD *sub_10085A1A8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102156688;
  result[1] = v3;
  return result;
}

uint64_t sub_10085A1DC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102156688;
  a2[1] = v2;
  return result;
}

void sub_10085A1F8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  _QWORD *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8[2];
  uint64_t v9;

  v2 = *(_OWORD *)(a2 + 16);
  v5 = *(_OWORD *)a2;
  v6 = v2;
  v7 = *(_QWORD *)(a2 + 32);
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v3 + 12))
    v7 = v6;
  sub_10021CB2C(*(_QWORD *)v3 + 8, (uint64_t)&v5);
  v4 = *(_QWORD **)(v3 + 1168);
  v8[0] = v5;
  v8[1] = v6;
  v9 = v7;
  sub_10023C63C(v4, v8);
}

uint64_t sub_10085A268(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10085A2A4()
{
}

void sub_10085A2B4()
{
  operator delete();
}

_QWORD *sub_10085A2C8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102156718;
  result[1] = v3;
  return result;
}

uint64_t sub_10085A2FC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102156718;
  a2[1] = v2;
  return result;
}

void sub_10085A318(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD __dst[60];
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _OWORD v25[2];
  __int128 v26;
  uint64_t v27;
  __int128 __p;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _OWORD v41[2];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _OWORD v50[2];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _OWORD v59[2];
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  _OWORD v68[2];
  uint8_t buf[8];
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  _DWORD v78[39];
  _DWORD v79[39];
  _DWORD v80[39];
  _BYTE v81[28];

  memcpy(__dst, (const void *)a2, sizeof(__dst));
  v14 = *(_OWORD *)(a2 + 960);
  v15 = *(_QWORD *)(a2 + 976);
  *(_OWORD *)(a2 + 960) = 0u;
  *(_QWORD *)(a2 + 976) = 0;
  v16 = *(_OWORD *)(a2 + 984);
  v17 = *(_QWORD *)(a2 + 1000);
  *(_OWORD *)(a2 + 984) = 0u;
  *(_QWORD *)(a2 + 1000) = 0;
  *(_OWORD *)((char *)v25 + 12) = *(_OWORD *)(a2 + 1132);
  v25[0] = *(_OWORD *)(a2 + 1120);
  v24 = *(_OWORD *)(a2 + 1104);
  v23 = *(_OWORD *)(a2 + 1088);
  v22 = *(_OWORD *)(a2 + 1072);
  v21 = *(_OWORD *)(a2 + 1056);
  v20 = *(_OWORD *)(a2 + 1040);
  v4 = *(_OWORD *)(a2 + 1008);
  v19 = *(_OWORD *)(a2 + 1024);
  v18 = v4;
  v26 = *(_OWORD *)(a2 + 1152);
  v27 = *(_QWORD *)(a2 + 1168);
  v5 = *(_OWORD *)(a2 + 1176);
  *(_QWORD *)(a2 + 1176) = 0;
  *(_QWORD *)(a2 + 1168) = 0;
  *(_OWORD *)(a2 + 1152) = 0u;
  __p = v5;
  v29 = *(_QWORD *)(a2 + 1192);
  *(_QWORD *)(a2 + 1192) = 0;
  *(_QWORD *)(a2 + 1184) = 0;
  v30 = *(_OWORD *)(a2 + 1200);
  v31 = *(_OWORD *)(a2 + 1216);
  v32 = *(_QWORD *)(a2 + 1232);
  v6 = *(_QWORD *)(a1 + 8);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    LOWORD(v70) = 2082;
    *(_QWORD *)((char *)&v70 + 2) = "";
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#awd,fEmergencyAWD CB\"}", buf, 0x12u);
  }
  v66 = xmmword_101C174D8;
  v67 = xmmword_101C174E8;
  memset(v68, 0, 28);
  v62 = xmmword_101C17498;
  v63 = xmmword_101C174A8;
  v64 = xmmword_101C174B8;
  v65 = xmmword_101C174C8;
  v60 = xmmword_101C17478;
  v61 = xmmword_101C17488;
  v57 = xmmword_101C174D8;
  v58 = xmmword_101C174E8;
  memset(v59, 0, 28);
  v53 = xmmword_101C17498;
  v54 = xmmword_101C174A8;
  v55 = xmmword_101C174B8;
  v56 = xmmword_101C174C8;
  v51 = xmmword_101C17478;
  v52 = xmmword_101C17488;
  v48 = xmmword_101C174D8;
  v49 = xmmword_101C174E8;
  memset(v50, 0, 28);
  v44 = xmmword_101C17498;
  v45 = xmmword_101C174A8;
  v46 = xmmword_101C174B8;
  v47 = xmmword_101C174C8;
  v42 = xmmword_101C17478;
  v43 = xmmword_101C17488;
  v39 = xmmword_101C174D8;
  v40 = xmmword_101C174E8;
  memset(v41, 0, 28);
  v35 = xmmword_101C17498;
  v36 = xmmword_101C174A8;
  v37 = xmmword_101C174B8;
  v38 = xmmword_101C174C8;
  v33 = xmmword_101C17478;
  v34 = xmmword_101C17488;
  v8 = *(_QWORD *)(v6 + 1048);
  if (v8)
  {
    sub_100EB5A4C(v8, buf);
    v66 = v76;
    v67 = v77;
    v68[0] = *(_OWORD *)v78;
    *(_OWORD *)((char *)v68 + 12) = *(_OWORD *)&v78[3];
    v62 = v72;
    v63 = v73;
    v64 = v74;
    v65 = v75;
    v60 = v70;
    v61 = v71;
    v57 = *(_OWORD *)&v78[31];
    v58 = *(_OWORD *)&v78[35];
    v59[0] = *(_OWORD *)v79;
    *(_OWORD *)((char *)v59 + 12) = *(_OWORD *)&v79[3];
    v53 = *(_OWORD *)&v78[15];
    v54 = *(_OWORD *)&v78[19];
    v55 = *(_OWORD *)&v78[23];
    v56 = *(_OWORD *)&v78[27];
    v51 = *(_OWORD *)&v78[7];
    v52 = *(_OWORD *)&v78[11];
    v48 = *(_OWORD *)&v79[31];
    v49 = *(_OWORD *)&v79[35];
    v50[0] = *(_OWORD *)v80;
    *(_OWORD *)((char *)v50 + 12) = *(_OWORD *)&v80[3];
    v44 = *(_OWORD *)&v79[15];
    v45 = *(_OWORD *)&v79[19];
    v46 = *(_OWORD *)&v79[23];
    v47 = *(_OWORD *)&v79[27];
    v9 = buf[0];
    v10 = *(_QWORD *)buf & 0xFFFFFFFF00000000;
    v42 = *(_OWORD *)&v79[7];
    v43 = *(_OWORD *)&v79[11];
    v39 = *(_OWORD *)&v80[31];
    v40 = *(_OWORD *)&v80[35];
    v41[0] = *(_OWORD *)v81;
    *(_OWORD *)((char *)v41 + 12) = *(_OWORD *)&v81[12];
    v35 = *(_OWORD *)&v80[15];
    v36 = *(_OWORD *)&v80[19];
    v37 = *(_OWORD *)&v80[23];
    v38 = *(_OWORD *)&v80[27];
    v11 = *(_DWORD *)buf & 0xFFFF00;
    v12 = *(_QWORD *)buf >> 24;
    v33 = *(_OWORD *)&v80[7];
    v34 = *(_OWORD *)&v80[11];
  }
  else
  {
    v11 = 0;
    v10 = 0;
    LOBYTE(v12) = 0;
    v9 = 0;
  }
  *((_QWORD *)&__dst[17] + 1) = v10 | ((unint64_t)v12 << 24) | v11 | v9;
  *(_OWORD *)((char *)&__dst[26] + 12) = *(_OWORD *)((char *)v68 + 12);
  __dst[24] = v66;
  __dst[25] = v67;
  __dst[20] = v62;
  __dst[21] = v63;
  __dst[22] = v64;
  __dst[23] = v65;
  __dst[18] = v60;
  __dst[19] = v61;
  *(_OWORD *)((char *)&__dst[33] + 12) = v57;
  *(_OWORD *)((char *)&__dst[34] + 12) = v58;
  *(_OWORD *)((char *)&__dst[35] + 12) = v59[0];
  *(_OWORD *)((char *)&__dst[29] + 12) = v53;
  *(_OWORD *)((char *)&__dst[30] + 12) = v54;
  *(_OWORD *)((char *)&__dst[31] + 12) = v55;
  *(_OWORD *)((char *)&__dst[32] + 12) = v56;
  *(_OWORD *)((char *)&__dst[27] + 12) = v51;
  *(_OWORD *)((char *)&__dst[28] + 12) = v52;
  *(_OWORD *)((char *)&__dst[44] + 8) = v49;
  *(_OWORD *)((char *)&__dst[45] + 8) = v50[0];
  *(_OWORD *)((char *)&__dst[46] + 4) = *(_OWORD *)((char *)v50 + 12);
  *(_OWORD *)((char *)&__dst[40] + 8) = v45;
  *(_OWORD *)((char *)&__dst[41] + 8) = v46;
  *(_OWORD *)((char *)&__dst[42] + 8) = v47;
  *(_OWORD *)((char *)&__dst[43] + 8) = v48;
  *(_OWORD *)((char *)&__dst[36] + 8) = *(_OWORD *)((char *)v59 + 12);
  *(_OWORD *)((char *)&__dst[37] + 8) = v42;
  *(_OWORD *)((char *)&__dst[38] + 8) = v43;
  *(_OWORD *)((char *)&__dst[39] + 8) = v44;
  *(_OWORD *)((char *)&__dst[53] + 4) = v39;
  *(_OWORD *)((char *)&__dst[54] + 4) = v40;
  *(_OWORD *)((char *)&__dst[55] + 4) = v41[0];
  *(_OWORD *)((char *)&__dst[49] + 4) = v35;
  *(_OWORD *)((char *)&__dst[50] + 4) = v36;
  *(_OWORD *)((char *)&__dst[51] + 4) = v37;
  *(_OWORD *)((char *)&__dst[52] + 4) = v38;
  *(_OWORD *)((char *)&__dst[47] + 4) = v33;
  *(_OWORD *)((char *)&__dst[48] + 4) = v34;
  __dst[26] = v68[0];
  __dst[56] = *(_OWORD *)((char *)v41 + 12);
  if (sub_1002416C0())
  {
    BYTE8(__dst[9]) = *(_BYTE *)(v6 + 1296);
    if (v9)
      BYTE9(__dst[9]) = v12;
  }
  sub_10173A0F4(*(_QWORD *)(v6 + 1176), (uint64_t)__dst);
  if (SHIBYTE(v29) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v27) < 0)
    operator delete((void *)v26);
  if (SHIBYTE(v17) < 0)
    operator delete((void *)v16);
  if (SHIBYTE(v15) < 0)
    operator delete((void *)v14);
}

void sub_10085A8CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  void **v3;
  void **v4;
  va_list va;

  va_start(va, a2);
  if (SLOBYTE(STACK[0x4B7]) < 0)
    operator delete((void *)STACK[0x4A0]);
  sub_10190C47C(va, v4, v2, v3);
  _Unwind_Resume(a1);
}

uint64_t sub_10085A904(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10085A940()
{
}

_QWORD *sub_10085A94C(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10085AAB4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_10085AAC4()
{
  operator delete();
}

_QWORD *sub_10085AAD8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021567A8;
  return result;
}

void sub_10085AAFC(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021567A8;
}

void sub_10085AB14(uint64_t a1, uint64_t a2)
{
  void *v2;
  int v3;
  void *v4;
  int v5;
  void *v6;
  int v7;
  void *v8;
  int v9;
  NSObject *v10;
  _DWORD v11[2];
  __int16 v12;
  const char *v13;

  v2 = *(void **)(a2 + 960);
  v3 = *(char *)(a2 + 983);
  v4 = *(void **)(a2 + 984);
  *(_OWORD *)(a2 + 960) = 0u;
  *(_OWORD *)(a2 + 976) = 0u;
  v5 = *(char *)(a2 + 1007);
  *(_OWORD *)(a2 + 992) = 0u;
  v6 = *(void **)(a2 + 1152);
  v7 = *(char *)(a2 + 1175);
  *(_QWORD *)(a2 + 1152) = 0;
  *(_OWORD *)(a2 + 1160) = 0u;
  v8 = *(void **)(a2 + 1176);
  v9 = *(char *)(a2 + 1199);
  *(_QWORD *)(a2 + 1192) = 0;
  *(_OWORD *)(a2 + 1176) = 0u;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v10 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v11[0] = 68289026;
    v11[1] = 0;
    v12 = 2082;
    v13 = "";
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#awd,#Warning, Emergency AWD is disabled in simulator/conformance mode\"}", (uint8_t *)v11, 0x12u);
    if ((v9 & 0x80000000) == 0)
    {
LABEL_5:
      if ((v7 & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_11;
    }
  }
  else if ((v9 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(v8);
  if ((v7 & 0x80000000) == 0)
  {
LABEL_6:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v6);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_7:
    if ((v3 & 0x80000000) == 0)
      return;
LABEL_13:
    operator delete(v2);
    return;
  }
LABEL_12:
  operator delete(v4);
  if (v3 < 0)
    goto LABEL_13;
}

uint64_t sub_10085AC90(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10085ACCC()
{
}

_QWORD *sub_10085ACD8(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10085AE40(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_10085AE50()
{
  operator delete();
}

_QWORD *sub_10085AE64(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102156828;
  result[1] = v3;
  return result;
}

uint64_t sub_10085AE98(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102156828;
  a2[1] = v2;
  return result;
}

uint64_t sub_10085AEB4(uint64_t a1, uint64_t a2)
{
  return sub_10084F020(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_10085AEBC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10085AEF8()
{
}

_QWORD *sub_10085AF04(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10085B06C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_10085B078(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 40 * a3;
    do
    {
      sub_10085B0F8((uint64_t **)a1, v4, a2, a2);
      a2 += 10;
      v6 -= 40;
    }
    while (v6);
  }
  return a1;
}

void sub_10085B0E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10085B268(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_10085B0F8(uint64_t **a1, uint64_t *a2, int *a3, _DWORD *a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  v6 = (uint64_t **)sub_10034258C(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    sub_10085B178((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000145B0(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t sub_10085B178@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _DWORD *v6;
  uint64_t result;

  v5 = a1 + 8;
  v6 = operator new(0x48uLL);
  *(_QWORD *)(a3 + 8) = v5;
  *(_QWORD *)a3 = v6;
  *(_BYTE *)(a3 + 16) = 0;
  v6[8] = *a2;
  result = sub_100270E34((uint64_t)(v6 + 10), (uint64_t)(a2 + 2));
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_10085B1E4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *v1 = 0;
  sub_10085B200(v3, v2);
  _Unwind_Resume(a1);
}

void sub_10085B200(uint64_t a1, _QWORD *__p)
{
  _QWORD *v3;
  uint64_t v4;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = (_QWORD *)__p[8];
    if (v3 == __p + 5)
    {
      v4 = 4;
      v3 = __p + 5;
      goto LABEL_8;
    }
    if (v3)
    {
      v4 = 5;
LABEL_8:
      (*(void (**)(void))(*v3 + 8 * v4))();
    }
LABEL_9:
    operator delete(__p);
    return;
  }
  if (__p)
    goto LABEL_9;
}

void sub_10085B268(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;

  if (a2)
  {
    sub_10085B268(a1, *a2);
    sub_10085B268(a1, a2[1]);
    v4 = (_QWORD *)a2[8];
    if (v4 == a2 + 5)
    {
      v5 = 4;
      v4 = a2 + 5;
    }
    else
    {
      if (!v4)
      {
LABEL_8:
        operator delete(a2);
        return;
      }
      v5 = 5;
    }
    (*(void (**)(void))(*v4 + 8 * v5))();
    goto LABEL_8;
  }
}

void sub_10085B2DC()
{
  operator delete();
}

_QWORD *sub_10085B2F0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021568B8;
  result[1] = v3;
  return result;
}

uint64_t sub_10085B324(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021568B8;
  a2[1] = v2;
  return result;
}

void sub_10085B340(uint64_t a1, uint64_t a2)
{
  sub_100055FEC(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_10085B348(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10085B384()
{
}

void sub_10085B394()
{
  operator delete();
}

_QWORD *sub_10085B3A8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102156948;
  result[1] = v3;
  return result;
}

uint64_t sub_10085B3DC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102156948;
  a2[1] = v2;
  return result;
}

uint64_t sub_10085B3F8(uint64_t a1, uint64_t a2)
{
  return sub_10010D0F4(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_10085B400(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10085B43C()
{
}

void sub_10085B44C()
{
  operator delete();
}

_QWORD *sub_10085B460(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021569D8;
  result[1] = v3;
  return result;
}

uint64_t sub_10085B494(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021569D8;
  a2[1] = v2;
  return result;
}

void sub_10085B4B0(uint64_t a1, int *a2)
{
  double *v2;

  v2 = *(double **)(*(_QWORD *)(a1 + 8) + 880);
  if (v2)
    sub_101761E5C(v2, *a2);
}

uint64_t sub_10085B4C8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10085B504()
{
}

void sub_10085B514()
{
  operator delete();
}

_QWORD *sub_10085B528(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102156A68;
  result[1] = v3;
  return result;
}

uint64_t sub_10085B55C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102156A68;
  a2[1] = v2;
  return result;
}

void sub_10085B578(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;

  v2 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v3 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  sub_10084E2B0(v3);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    do
      v8 = __ldaxr(v6);
    while (__stlxr(v8 - 1, v6));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_10085B620(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;

  if (v1)
    sub_10190C4D8(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10085B638(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10085B674()
{
}

void sub_10085B684()
{
  operator delete();
}

_QWORD *sub_10085B698(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102156AF8;
  result[1] = v3;
  return result;
}

uint64_t sub_10085B6CC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102156AF8;
  a2[1] = v2;
  return result;
}

uint64_t sub_10085B6E8(uint64_t a1, int *a2)
{
  uint64_t result;
  int v3;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 424);
  if (result)
  {
    v3 = *a2;
    return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)result + 48))(result, &v3);
  }
  return result;
}

uint64_t sub_10085B724(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10085B760()
{
}

void sub_10085B770()
{
  operator delete();
}

_QWORD *sub_10085B784(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102156B88;
  result[1] = v3;
  return result;
}

uint64_t sub_10085B7B8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102156B88;
  a2[1] = v2;
  return result;
}

void sub_10085B7D4(uint64_t a1, unsigned __int8 *a2, char *a3)
{
  sub_1001D5BE0(*(_QWORD *)(a1 + 8), *a2, *a3);
}

uint64_t sub_10085B7E4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10085B820()
{
}

void sub_10085B830()
{
  operator delete();
}

_QWORD *sub_10085B844(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102156C18;
  result[1] = v3;
  return result;
}

uint64_t sub_10085B878(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102156C18;
  a2[1] = v2;
  return result;
}

__n128 sub_10085B894(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  _OWORD v7[9];

  v2 = a2[7];
  v7[6] = a2[6];
  v7[7] = v2;
  v7[8] = a2[8];
  v3 = a2[3];
  v7[2] = a2[2];
  v7[3] = v3;
  v4 = a2[5];
  v7[4] = a2[4];
  v7[5] = v4;
  v5 = a2[1];
  v7[0] = *a2;
  v7[1] = v5;
  sub_1000FD500(*(_QWORD **)(a1 + 8), (uint64_t)v7);
  return result;
}

uint64_t sub_10085B8E0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10085B91C()
{
}

void sub_10085B928(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 47) < 0)
      operator delete(*(void **)(a2 + 24));
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    operator delete();
  }
}

void sub_10085B980(uint64_t a1)
{
  sub_10085B928(a1 + 24, *(_QWORD *)(a1 + 24));
}

uint64_t sub_10085B988(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

void sub_10085B9CC()
{
  operator delete();
}

_QWORD *sub_10085B9E0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102156D08;
  result[1] = v3;
  return result;
}

uint64_t sub_10085BA14(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102156D08;
  a2[1] = v2;
  return result;
}

void sub_10085BA30(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t *v4;
  NSObject *v5;
  const char *v6;
  const char **v7;
  const char *v8;
  NSObject *v9;
  const char *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  const char **v16;
  const char *v17;
  uint8_t *v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22[2];
  int v23;
  const char **v24;
  uint8_t buf[4];
  const char *v26;

  v3 = *a2;
  v2 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v4 = *(uint64_t **)(a1 + 8);
  if (v3)
  {
    if (*(char *)(v3 + 47) < 0)
    {
      if (!*(_QWORD *)(v3 + 32))
        goto LABEL_23;
    }
    else if (!*(_BYTE *)(v3 + 47))
    {
      goto LABEL_23;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v6 = (const char *)(v3 + 24);
      if (*(char *)(v3 + 47) < 0)
        v6 = *(const char **)v6;
      *(_DWORD *)buf = 136446210;
      v26 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "file,%{public}s,ClassD", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v16 = (const char **)(v3 + 24);
      if (*(char *)(v3 + 47) < 0)
        v16 = (const char **)*v16;
      v23 = 136446210;
      v24 = v16;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "file,%{public}s,ClassD", &v23, 12);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "auto CLGnssController::CLGnssController(id<CLIntersiloUniverse>, LocationObserverCallback, MeasurementObserverCallback, DpoCallback, VendorLocationCallback, BasebandTimeTransferObserverCallback, RhythmicBatchedLocationCallback, BasebandCausesL1InterferenceModeAssertionCallback, OnGnssStopCallback, KnownACGnssLocationCallback)::(anonymous class)::operator()(std::shared_ptr<CLGnssAssistanceFile>) const", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    v7 = (const char **)(v3 + 24);
    v8 = (const char *)(v3 + 24);
    if (*(char *)(v3 + 47) < 0)
      v8 = *v7;
    if (!sub_1005169DC(v8, 4))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v9 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v10 = (const char *)(v3 + 24);
        if (*(char *)(v3 + 47) < 0)
          v10 = *v7;
        *(_DWORD *)buf = 136446210;
        v26 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning,cannot set protection class,assistance file,%{public}s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102156068);
        if (*(char *)(v3 + 47) < 0)
          v7 = (const char **)*v7;
        v23 = 136446210;
        v24 = v7;
        LODWORD(v21) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,cannot set protection class,assistance file,%{public}s", &v23, v21);
        v20 = (uint8_t *)v19;
        sub_100512490("Generic", 1, 0, 2, "auto CLGnssController::CLGnssController(id<CLIntersiloUniverse>, LocationObserverCallback, MeasurementObserverCallback, DpoCallback, VendorLocationCallback, BasebandTimeTransferObserverCallback, RhythmicBatchedLocationCallback, BasebandCausesL1InterferenceModeAssertionCallback, OnGnssStopCallback, KnownACGnssLocationCallback)::(anonymous class)::operator()(std::shared_ptr<CLGnssAssistanceFile>) const", "%s\n", v19);
        if (v20 != buf)
          free(v20);
      }
    }
  }
LABEL_23:
  v22[0] = v3;
  v22[1] = (uint64_t)v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  sub_10084E450(v4, v22);
  if (v2)
  {
    v13 = (unint64_t *)&v2->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_10085BE2C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10085BEA8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10085BEE4()
{
}

void sub_10085BEF4()
{
  operator delete();
}

_QWORD *sub_10085BF08(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102156D98;
  result[1] = v3;
  return result;
}

uint64_t sub_10085BF3C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102156D98;
  a2[1] = v2;
  return result;
}

void sub_10085BF58(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t *v4;
  NSObject *v5;
  const char *v6;
  const char **v7;
  const char *v8;
  NSObject *v9;
  const char *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  const char **v16;
  const char *v17;
  uint8_t *v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22[2];
  int v23;
  const char **v24;
  uint8_t buf[4];
  const char *v26;

  v3 = *a2;
  v2 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v4 = *(uint64_t **)(a1 + 8);
  if (v3)
  {
    if (*(char *)(v3 + 47) < 0)
    {
      if (!*(_QWORD *)(v3 + 32))
        goto LABEL_23;
    }
    else if (!*(_BYTE *)(v3 + 47))
    {
      goto LABEL_23;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v6 = (const char *)(v3 + 24);
      if (*(char *)(v3 + 47) < 0)
        v6 = *(const char **)v6;
      *(_DWORD *)buf = 136446210;
      v26 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "file,%{public}s,ClassD", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v16 = (const char **)(v3 + 24);
      if (*(char *)(v3 + 47) < 0)
        v16 = (const char **)*v16;
      v23 = 136446210;
      v24 = v16;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "file,%{public}s,ClassD", &v23, 12);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "auto CLGnssController::CLGnssController(id<CLIntersiloUniverse>, LocationObserverCallback, MeasurementObserverCallback, DpoCallback, VendorLocationCallback, BasebandTimeTransferObserverCallback, RhythmicBatchedLocationCallback, BasebandCausesL1InterferenceModeAssertionCallback, OnGnssStopCallback, KnownACGnssLocationCallback)::(anonymous class)::operator()(std::shared_ptr<CLGnssAssistanceFile>) const", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    v7 = (const char **)(v3 + 24);
    v8 = (const char *)(v3 + 24);
    if (*(char *)(v3 + 47) < 0)
      v8 = *v7;
    if (!sub_1005169DC(v8, 4))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v9 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v10 = (const char *)(v3 + 24);
        if (*(char *)(v3 + 47) < 0)
          v10 = *v7;
        *(_DWORD *)buf = 136446210;
        v26 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning,cannot set protection class for assistance file,%{public}s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102156068);
        if (*(char *)(v3 + 47) < 0)
          v7 = (const char **)*v7;
        v23 = 136446210;
        v24 = v7;
        LODWORD(v21) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,cannot set protection class for assistance file,%{public}s", &v23, v21);
        v20 = (uint8_t *)v19;
        sub_100512490("Generic", 1, 0, 2, "auto CLGnssController::CLGnssController(id<CLIntersiloUniverse>, LocationObserverCallback, MeasurementObserverCallback, DpoCallback, VendorLocationCallback, BasebandTimeTransferObserverCallback, RhythmicBatchedLocationCallback, BasebandCausesL1InterferenceModeAssertionCallback, OnGnssStopCallback, KnownACGnssLocationCallback)::(anonymous class)::operator()(std::shared_ptr<CLGnssAssistanceFile>) const", "%s\n", v19);
        if (v20 != buf)
          free(v20);
      }
    }
  }
LABEL_23:
  v22[0] = v3;
  v22[1] = (uint64_t)v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  sub_10084E6FC(v4, v22);
  if (v2)
  {
    v13 = (unint64_t *)&v2->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_10085C354(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10085C3D0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10085C40C()
{
}

uint64_t sub_10085C418@<X0>(__int128 *a1@<X1>, __int128 *a2@<X2>, _QWORD *a3@<X8>)
{
  char *v6;
  uint64_t result;

  v6 = (char *)operator new(0x48uLL);
  result = sub_10085C478((uint64_t)v6, a1, a2);
  *a3 = v6 + 24;
  a3[1] = v6;
  return result;
}

void sub_10085C464(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10085C478(uint64_t a1, __int128 *a2, __int128 *a3)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_102156E18;
  *(_QWORD *)(a1 + 8) = 0;
  sub_1000BE57C((char *)(a1 + 24), a2, a3);
  return a1;
}

void sub_10085C4B0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10085C4C4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102156E18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10085C4D8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102156E18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_10085C50C(uint64_t a1)
{
  char v1;

  sub_100302B68((uint64_t)&v1, a1 + 24);
}

void sub_10085C538()
{
  operator delete();
}

_QWORD *sub_10085C54C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102156E68;
  result[1] = v3;
  return result;
}

uint64_t sub_10085C580(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102156E68;
  a2[1] = v2;
  return result;
}

void sub_10085C59C(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t *v4;
  NSObject *v5;
  const char *v6;
  const char **v7;
  const char *v8;
  NSObject *v9;
  const char *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  const char **v16;
  const char *v17;
  uint8_t *v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  _QWORD v22[2];
  int v23;
  const char **v24;
  uint8_t buf[4];
  const char *v26;

  v3 = *a2;
  v2 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v4 = *(uint64_t **)(a1 + 8);
  if (v3)
  {
    if (*(char *)(v3 + 47) < 0)
    {
      if (!*(_QWORD *)(v3 + 32))
        goto LABEL_23;
    }
    else if (!*(_BYTE *)(v3 + 47))
    {
      goto LABEL_23;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v6 = (const char *)(v3 + 24);
      if (*(char *)(v3 + 47) < 0)
        v6 = *(const char **)v6;
      *(_DWORD *)buf = 136446210;
      v26 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "file,%{public}s,ClassD", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v16 = (const char **)(v3 + 24);
      if (*(char *)(v3 + 47) < 0)
        v16 = (const char **)*v16;
      v23 = 136446210;
      v24 = v16;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "file,%{public}s,ClassD", &v23, 12);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "auto CLGnssController::CLGnssController(id<CLIntersiloUniverse>, LocationObserverCallback, MeasurementObserverCallback, DpoCallback, VendorLocationCallback, BasebandTimeTransferObserverCallback, RhythmicBatchedLocationCallback, BasebandCausesL1InterferenceModeAssertionCallback, OnGnssStopCallback, KnownACGnssLocationCallback)::(anonymous class)::operator()(std::shared_ptr<CLGnssAssistanceFile>) const", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    v7 = (const char **)(v3 + 24);
    v8 = (const char *)(v3 + 24);
    if (*(char *)(v3 + 47) < 0)
      v8 = *v7;
    if (!sub_1005169DC(v8, 4))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v9 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v10 = (const char *)(v3 + 24);
        if (*(char *)(v3 + 47) < 0)
          v10 = *v7;
        *(_DWORD *)buf = 136446210;
        v26 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning,cannot set protection class for assistance file,%{public}s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102156068);
        if (*(char *)(v3 + 47) < 0)
          v7 = (const char **)*v7;
        v23 = 136446210;
        v24 = v7;
        LODWORD(v21) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,cannot set protection class for assistance file,%{public}s", &v23, v21);
        v20 = (uint8_t *)v19;
        sub_100512490("Generic", 1, 0, 2, "auto CLGnssController::CLGnssController(id<CLIntersiloUniverse>, LocationObserverCallback, MeasurementObserverCallback, DpoCallback, VendorLocationCallback, BasebandTimeTransferObserverCallback, RhythmicBatchedLocationCallback, BasebandCausesL1InterferenceModeAssertionCallback, OnGnssStopCallback, KnownACGnssLocationCallback)::(anonymous class)::operator()(std::shared_ptr<CLGnssAssistanceFile>) const", "%s\n", v19);
        if (v20 != buf)
          free(v20);
      }
    }
  }
LABEL_23:
  v22[0] = v3;
  v22[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  sub_10084E9A8(v4, v22);
  if (v2)
  {
    v13 = (unint64_t *)&v2->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_10085C998(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10085CA14(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10085CA50()
{
}

void sub_10085CA60()
{
  operator delete();
}

_QWORD *sub_10085CA74(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102156EE8;
  result[1] = v3;
  return result;
}

uint64_t sub_10085CAA8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102156EE8;
  a2[1] = v2;
  return result;
}

void sub_10085CAC4(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t *v4;
  NSObject *v5;
  const char *v6;
  const char **v7;
  const char *v8;
  NSObject *v9;
  const char *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  const char **v16;
  const char *v17;
  uint8_t *v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22[2];
  int v23;
  const char **v24;
  uint8_t buf[4];
  const char *v26;

  v3 = *a2;
  v2 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v4 = *(uint64_t **)(a1 + 8);
  if (v3)
  {
    if (*(char *)(v3 + 47) < 0)
    {
      if (!*(_QWORD *)(v3 + 32))
        goto LABEL_23;
    }
    else if (!*(_BYTE *)(v3 + 47))
    {
      goto LABEL_23;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v6 = (const char *)(v3 + 24);
      if (*(char *)(v3 + 47) < 0)
        v6 = *(const char **)v6;
      *(_DWORD *)buf = 136446210;
      v26 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "file,%{public}s,ClassD", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v16 = (const char **)(v3 + 24);
      if (*(char *)(v3 + 47) < 0)
        v16 = (const char **)*v16;
      v23 = 136446210;
      v24 = v16;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "file,%{public}s,ClassD", &v23, 12);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "auto CLGnssController::CLGnssController(id<CLIntersiloUniverse>, LocationObserverCallback, MeasurementObserverCallback, DpoCallback, VendorLocationCallback, BasebandTimeTransferObserverCallback, RhythmicBatchedLocationCallback, BasebandCausesL1InterferenceModeAssertionCallback, OnGnssStopCallback, KnownACGnssLocationCallback)::(anonymous class)::operator()(std::shared_ptr<CLGnssAssistanceFile>) const", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    v7 = (const char **)(v3 + 24);
    v8 = (const char *)(v3 + 24);
    if (*(char *)(v3 + 47) < 0)
      v8 = *v7;
    if (!sub_1005169DC(v8, 4))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v9 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v10 = (const char *)(v3 + 24);
        if (*(char *)(v3 + 47) < 0)
          v10 = *v7;
        *(_DWORD *)buf = 136446210;
        v26 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning,cannot set protection class for assistance file,%{public}s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102156068);
        if (*(char *)(v3 + 47) < 0)
          v7 = (const char **)*v7;
        v23 = 136446210;
        v24 = v7;
        LODWORD(v21) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,cannot set protection class for assistance file,%{public}s", &v23, v21);
        v20 = (uint8_t *)v19;
        sub_100512490("Generic", 1, 0, 2, "auto CLGnssController::CLGnssController(id<CLIntersiloUniverse>, LocationObserverCallback, MeasurementObserverCallback, DpoCallback, VendorLocationCallback, BasebandTimeTransferObserverCallback, RhythmicBatchedLocationCallback, BasebandCausesL1InterferenceModeAssertionCallback, OnGnssStopCallback, KnownACGnssLocationCallback)::(anonymous class)::operator()(std::shared_ptr<CLGnssAssistanceFile>) const", "%s\n", v19);
        if (v20 != buf)
          free(v20);
      }
    }
  }
LABEL_23:
  v22[0] = v3;
  v22[1] = (uint64_t)v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  sub_10084EB74(v4, v22);
  if (v2)
  {
    v13 = (unint64_t *)&v2->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_10085CEC0(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10085CF3C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10085CF78()
{
}

void sub_10085CF88()
{
  operator delete();
}

_QWORD *sub_10085CF9C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102156F68;
  result[1] = v3;
  return result;
}

uint64_t sub_10085CFD0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102156F68;
  a2[1] = v2;
  return result;
}

void sub_10085CFEC(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  _QWORD *v4;
  NSObject *v5;
  const char *v6;
  const char **v7;
  const char *v8;
  NSObject *v9;
  const char *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  const char **v13;
  const char *v14;
  uint8_t *v15;
  const char *v16;
  uint8_t *v17;
  uint64_t v18;
  int v19;
  const char **v20;
  uint8_t buf[4];
  const char *v22;

  v3 = *a2;
  v2 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v4 = *(_QWORD **)(a1 + 8);
  if (v3)
  {
    if (*(char *)(v3 + 47) < 0)
    {
      if (!*(_QWORD *)(v3 + 32))
        goto LABEL_23;
    }
    else if (!*(_BYTE *)(v3 + 47))
    {
      goto LABEL_23;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v6 = (const char *)(v3 + 24);
      if (*(char *)(v3 + 47) < 0)
        v6 = *(const char **)v6;
      *(_DWORD *)buf = 136446210;
      v22 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "file,%{public}s,ClassD", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v13 = (const char **)(v3 + 24);
      if (*(char *)(v3 + 47) < 0)
        v13 = (const char **)*v13;
      v19 = 136446210;
      v20 = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "file,%{public}s,ClassD", &v19, 12);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "auto CLGnssController::CLGnssController(id<CLIntersiloUniverse>, LocationObserverCallback, MeasurementObserverCallback, DpoCallback, VendorLocationCallback, BasebandTimeTransferObserverCallback, RhythmicBatchedLocationCallback, BasebandCausesL1InterferenceModeAssertionCallback, OnGnssStopCallback, KnownACGnssLocationCallback)::(anonymous class)::operator()(std::shared_ptr<CLGnssAssistanceFile>) const", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    v7 = (const char **)(v3 + 24);
    v8 = (const char *)(v3 + 24);
    if (*(char *)(v3 + 47) < 0)
      v8 = *v7;
    if (!sub_1005169DC(v8, 4))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v9 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v10 = (const char *)(v3 + 24);
        if (*(char *)(v3 + 47) < 0)
          v10 = *v7;
        *(_DWORD *)buf = 136446210;
        v22 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning,cannot set protection class for assistance file,%{public}s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102156068);
        if (*(char *)(v3 + 47) < 0)
          v7 = (const char **)*v7;
        v19 = 136446210;
        v20 = v7;
        LODWORD(v18) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,cannot set protection class for assistance file,%{public}s", &v19, v18);
        v17 = (uint8_t *)v16;
        sub_100512490("Generic", 1, 0, 2, "auto CLGnssController::CLGnssController(id<CLIntersiloUniverse>, LocationObserverCallback, MeasurementObserverCallback, DpoCallback, VendorLocationCallback, BasebandTimeTransferObserverCallback, RhythmicBatchedLocationCallback, BasebandCausesL1InterferenceModeAssertionCallback, OnGnssStopCallback, KnownACGnssLocationCallback)::(anonymous class)::operator()(std::shared_ptr<CLGnssAssistanceFile>) const", "%s\n", v16);
        if (v17 != buf)
          free(v17);
      }
    }
  }
LABEL_23:
  sub_10084EE20(v4);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_10085D39C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    sub_10190BA48();
  _Unwind_Resume(exception_object);
}

uint64_t sub_10085D3BC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10085D3F8()
{
}

void sub_10085D408()
{
  operator delete();
}

_QWORD *sub_10085D41C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102156FE8;
  result[1] = v3;
  return result;
}

uint64_t sub_10085D450(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102156FE8;
  a2[1] = v2;
  return result;
}

void sub_10085D46C(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  _QWORD *v4;
  NSObject *v5;
  const char *v6;
  const char **v7;
  const char *v8;
  NSObject *v9;
  const char *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  const char **v13;
  const char *v14;
  uint8_t *v15;
  const char *v16;
  uint8_t *v17;
  uint64_t v18;
  int v19;
  const char **v20;
  uint8_t buf[4];
  const char *v22;

  v3 = *a2;
  v2 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v4 = *(_QWORD **)(a1 + 8);
  if (v3)
  {
    if (*(char *)(v3 + 47) < 0)
    {
      if (!*(_QWORD *)(v3 + 32))
        goto LABEL_23;
    }
    else if (!*(_BYTE *)(v3 + 47))
    {
      goto LABEL_23;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v6 = (const char *)(v3 + 24);
      if (*(char *)(v3 + 47) < 0)
        v6 = *(const char **)v6;
      *(_DWORD *)buf = 136446210;
      v22 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "file,%{public}s,ClassD", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v13 = (const char **)(v3 + 24);
      if (*(char *)(v3 + 47) < 0)
        v13 = (const char **)*v13;
      v19 = 136446210;
      v20 = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "file,%{public}s,ClassD", &v19, 12);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "auto CLGnssController::CLGnssController(id<CLIntersiloUniverse>, LocationObserverCallback, MeasurementObserverCallback, DpoCallback, VendorLocationCallback, BasebandTimeTransferObserverCallback, RhythmicBatchedLocationCallback, BasebandCausesL1InterferenceModeAssertionCallback, OnGnssStopCallback, KnownACGnssLocationCallback)::(anonymous class)::operator()(std::shared_ptr<CLGnssAssistanceFile>) const", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    v7 = (const char **)(v3 + 24);
    v8 = (const char *)(v3 + 24);
    if (*(char *)(v3 + 47) < 0)
      v8 = *v7;
    if (!sub_1005169DC(v8, 4))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v9 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v10 = (const char *)(v3 + 24);
        if (*(char *)(v3 + 47) < 0)
          v10 = *v7;
        *(_DWORD *)buf = 136446210;
        v22 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning,cannot set protection class,assistance file,%{public}s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102156068);
        if (*(char *)(v3 + 47) < 0)
          v7 = (const char **)*v7;
        v19 = 136446210;
        v20 = v7;
        LODWORD(v18) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,cannot set protection class,assistance file,%{public}s", &v19, v18);
        v17 = (uint8_t *)v16;
        sub_100512490("Generic", 1, 0, 2, "auto CLGnssController::CLGnssController(id<CLIntersiloUniverse>, LocationObserverCallback, MeasurementObserverCallback, DpoCallback, VendorLocationCallback, BasebandTimeTransferObserverCallback, RhythmicBatchedLocationCallback, BasebandCausesL1InterferenceModeAssertionCallback, OnGnssStopCallback, KnownACGnssLocationCallback)::(anonymous class)::operator()(std::shared_ptr<CLGnssAssistanceFile>) const", "%s\n", v16);
        if (v17 != buf)
          free(v17);
      }
    }
  }
LABEL_23:
  sub_10084EF18(v4);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_10085D81C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    sub_10190BA48();
  _Unwind_Resume(exception_object);
}

uint64_t sub_10085D83C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10085D878()
{
}

void sub_10085D888()
{
  operator delete();
}

_QWORD *sub_10085D89C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102157068;
  result[1] = v3;
  return result;
}

uint64_t sub_10085D8D0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102157068;
  a2[1] = v2;
  return result;
}

void sub_10085D8EC(uint64_t a1, uint64_t a2)
{
  sub_100112220(*(_QWORD **)(a1 + 8), a2);
}

uint64_t sub_10085D8F4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10085D930()
{
}

void sub_10085D940()
{
  operator delete();
}

_QWORD *sub_10085D954(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021570F8;
  result[1] = v3;
  return result;
}

uint64_t sub_10085D988(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021570F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_10085D9A4(uint64_t a1, char *a2)
{
  return sub_100854274(*(uint64_t **)(a1 + 8), *a2);
}

uint64_t sub_10085D9B0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10085D9EC()
{
}

void sub_10085D9FC()
{
  operator delete();
}

_QWORD *sub_10085DA10(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102157178;
  result[1] = v3;
  return result;
}

uint64_t sub_10085DA44(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102157178;
  a2[1] = v2;
  return result;
}

void sub_10085DA60(uint64_t a1, double *a2, double *a3, double *a4)
{
  sub_10007277C(*(_QWORD **)(a1 + 8), *a2, *a3, *a4);
}

uint64_t sub_10085DA74(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10085DAB0()
{
}

void sub_10085DAC0()
{
  operator delete();
}

_QWORD *sub_10085DAD4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102157208;
  result[1] = v3;
  return result;
}

uint64_t sub_10085DB08(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102157208;
  a2[1] = v2;
  return result;
}

__n128 sub_10085DB24(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  _OWORD v7[9];

  v2 = a2[7];
  v7[6] = a2[6];
  v7[7] = v2;
  v7[8] = a2[8];
  v3 = a2[3];
  v7[2] = a2[2];
  v7[3] = v3;
  v4 = a2[5];
  v7[4] = a2[4];
  v7[5] = v4;
  v5 = a2[1];
  v7[0] = *a2;
  v7[1] = v5;
  sub_1000FD500(*(_QWORD **)(a1 + 8), (uint64_t)v7);
  return result;
}

uint64_t sub_10085DB70(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10085DBAC()
{
}

void sub_10085DBBC()
{
  operator delete();
}

_QWORD *sub_10085DBD0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102157288;
  result[1] = v3;
  return result;
}

uint64_t sub_10085DC04(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102157288;
  a2[1] = v2;
  return result;
}

void sub_10085DC20(uint64_t a1, uint64_t a2)
{
  sub_10084D958(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_10085DC28(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10085DC64()
{
}

void sub_10085DC74()
{
  operator delete();
}

_QWORD *sub_10085DC88(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102157318;
  result[1] = v3;
  return result;
}

uint64_t sub_10085DCBC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102157318;
  a2[1] = v2;
  return result;
}

void sub_10085DCD8(uint64_t a1, unsigned int *a2)
{
  sub_10023DD80(*(_QWORD **)(a1 + 8), *a2);
}

uint64_t sub_10085DCE4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10085DD20()
{
}

void sub_10085DD30()
{
  operator delete();
}

_QWORD *sub_10085DD44(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021573A8;
  result[1] = v3;
  return result;
}

uint64_t sub_10085DD78(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021573A8;
  a2[1] = v2;
  return result;
}

uint64_t sub_10085DD94(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  NSObject *v4;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  v3 = *(_QWORD **)(a1 + 8);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v6[0] = 68289282;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    v9 = 2082;
    v10 = "injectassistancepedometerspeed";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s}", (uint8_t *)v6, 0x1Cu);
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 104))(*v3, a2);
}

uint64_t sub_10085DE9C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10085DED8()
{
}

void sub_10085DEE8()
{
  operator delete();
}

_QWORD *sub_10085DEFC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102157438;
  result[1] = v3;
  return result;
}

uint64_t sub_10085DF30(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102157438;
  a2[1] = v2;
  return result;
}

uint64_t sub_10085DF4C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  NSObject *v4;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  v3 = *(_QWORD **)(a1 + 8);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v6[0] = 68289282;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    v9 = 2082;
    v10 = "injectassistancepedometerspeedconstraint";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s}", (uint8_t *)v6, 0x1Cu);
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 112))(*v3, a2);
}

uint64_t sub_10085E054(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10085E090()
{
}

void sub_10085E0A0()
{
  operator delete();
}

_QWORD *sub_10085E0B4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021574C8;
  result[1] = v3;
  return result;
}

uint64_t sub_10085E0E8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021574C8;
  a2[1] = v2;
  return result;
}

uint64_t sub_10085E104(uint64_t a1, double *a2, double *a3, int *a4)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 1112);
  if (result)
    return sub_100168414(result, *a4, *a2, *a3);
  return result;
}

uint64_t sub_10085E128(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10085E164()
{
}

void sub_10085E174()
{
  operator delete();
}

_QWORD *sub_10085E188(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102157558;
  result[1] = v3;
  return result;
}

uint64_t sub_10085E1BC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102157558;
  a2[1] = v2;
  return result;
}

void sub_10085E1D8(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  __int128 v15[8];
  _OWORD v16[2];
  _BYTE v17[513];
  uint64_t v18;
  std::__shared_weak_count *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  char v26;

  v4 = *(_OWORD *)(a2 + 112);
  v15[6] = *(_OWORD *)(a2 + 96);
  v15[7] = v4;
  v16[0] = *(_OWORD *)(a2 + 128);
  *(_OWORD *)((char *)v16 + 12) = *(_OWORD *)(a2 + 140);
  v5 = *(_OWORD *)(a2 + 48);
  v15[2] = *(_OWORD *)(a2 + 32);
  v15[3] = v5;
  v6 = *(_OWORD *)(a2 + 80);
  v15[4] = *(_OWORD *)(a2 + 64);
  v15[5] = v6;
  v7 = *(_OWORD *)(a2 + 16);
  v15[0] = *(_OWORD *)a2;
  v15[1] = v7;
  memcpy(v17, (const void *)(a2 + 160), sizeof(v17));
  v18 = *(_QWORD *)(a2 + 680);
  v8 = *(std::__shared_weak_count **)(a2 + 688);
  v19 = v8;
  *(_OWORD *)(a2 + 680) = 0u;
  v9 = *(_OWORD *)(a2 + 776);
  v24 = *(_OWORD *)(a2 + 760);
  v25 = v9;
  v10 = *(_OWORD *)(a2 + 712);
  v20 = *(_OWORD *)(a2 + 696);
  v21 = v10;
  v11 = *(_OWORD *)(a2 + 744);
  v22 = *(_OWORD *)(a2 + 728);
  v23 = v11;
  v26 = *(_BYTE *)(a2 + 792);
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 1048);
  if (v12)
  {
    sub_100EB2EE4(v12, v15);
    v8 = v19;
  }
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_10085E2E0(_Unwind_Exception *a1)
{
  if (STACK[0x2B0])
    sub_10190BA48();
  _Unwind_Resume(a1);
}

uint64_t sub_10085E2F8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10085E334()
{
}

void sub_10085E344()
{
  operator delete();
}

_QWORD *sub_10085E358(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021575E8;
  result[1] = v3;
  return result;
}

uint64_t sub_10085E38C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021575E8;
  a2[1] = v2;
  return result;
}

void sub_10085E3A8(uint64_t a1, unsigned int *a2, void *__src)
{
  unsigned int v4;
  uint64_t __dst[203];

  v4 = *a2;
  memcpy(__dst, __src, sizeof(__dst));
  sub_10084F1B8(*(_QWORD *)(a1 + 8), v4, __dst);
}

uint64_t sub_10085E3F8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10085E434()
{
}

void sub_10085E444()
{
  operator delete();
}

_QWORD *sub_10085E458(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102157678;
  result[1] = v3;
  return result;
}

uint64_t sub_10085E48C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102157678;
  a2[1] = v2;
  return result;
}

void sub_10085E4A8(uint64_t a1, int *a2, int **a3)
{
  int v3;
  _DWORD *v4;
  int *v5;
  int *v6;
  int v7;
  uint64_t **v8;
  uint64_t **v9;
  int v10;
  int *v11;

  v3 = *a2;
  v4 = *(_DWORD **)(a1 + 8);
  if (*(_QWORD *)v4)
  {
    *(_DWORD *)(*(_QWORD *)v4 + 472) = v3;
    v5 = *a3;
    v6 = a3[1];
    if (*a3 != v6)
    {
      do
      {
        v7 = *v5++;
        v10 = v7;
        v8 = (uint64_t **)(*(_QWORD *)v4 + 64);
        v11 = &v10;
        v9 = sub_100041CE0(v8, &v10, (uint64_t)&unk_101B9EB60, &v11);
        v9[5] = (uint64_t *)((char *)v9[5] + 1);
      }
      while (v5 != v6);
    }
  }
  sub_10000DB28(v4, v3);
}

uint64_t sub_10085E54C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10085E588()
{
}

void sub_10085E598()
{
  operator delete();
}

_QWORD *sub_10085E5AC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102157708;
  result[1] = v3;
  return result;
}

uint64_t sub_10085E5E0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102157708;
  a2[1] = v2;
  return result;
}

void sub_10085E5FC(uint64_t a1, int *a2)
{
  sub_100852018(*(_DWORD **)(a1 + 8), *a2);
}

uint64_t sub_10085E608(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10085E644()
{
}

uint64_t *sub_10085E650(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *i;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD v23[2];
  char v24;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (uint64_t *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = a1 + 16;
  v13 = operator new(0x548uLL);
  v23[0] = v13;
  v23[1] = a1 + 16;
  *v13 = 0;
  v13[1] = v6;
  sub_10085E8A4((uint64_t)(v13 + 2), a3);
  v24 = 1;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    sub_10012E444(a1, v19);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *(_QWORD *)v23[0] = *v20;
    *v20 = v23[0];
  }
  else
  {
    *(_QWORD *)v23[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v23[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v12;
    if (*(_QWORD *)v23[0])
    {
      v21 = *(_QWORD *)(*(_QWORD *)v23[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v21 >= v7)
          v21 %= v7;
      }
      else
      {
        v21 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v21) = v23[0];
    }
  }
  i = (uint64_t *)v23[0];
  v23[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_10085ED7C((uint64_t)v23, 0);
  return i;
}

void sub_10085E88C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10085ED7C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

double sub_10085E8A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  double result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v2 = a2 + 8;
  v4 = *(_BYTE *)(v2 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4;
  v6 = *(_OWORD *)(v2 + 80);
  v5 = *(_OWORD *)(v2 + 96);
  v7 = *(_QWORD *)(v2 + 112);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 120) = v7;
  *(_OWORD *)(a1 + 104) = v5;
  *(_OWORD *)(a1 + 88) = v6;
  v8 = *(_OWORD *)(v2 + 16);
  v9 = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(a1 + 40) = v9;
  *(_OWORD *)(a1 + 24) = v8;
  v10 = *(_OWORD *)(v2 + 120);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(v2 + 136);
  *(_OWORD *)(a1 + 128) = v10;
  result = 0.0;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_QWORD *)(v2 + 120) = 0;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(v2 + 144);
  v12 = *(_OWORD *)(v2 + 152);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(v2 + 168);
  *(_OWORD *)(a1 + 160) = v12;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_QWORD *)(v2 + 152) = 0;
  v13 = *(_OWORD *)(v2 + 176);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(v2 + 192);
  *(_OWORD *)(a1 + 184) = v13;
  v14 = *(_OWORD *)(v2 + 208);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(v2 + 224);
  *(_OWORD *)(a1 + 216) = v14;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_QWORD *)(v2 + 208) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(v2 + 232);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(v2 + 248);
  *(_QWORD *)(v2 + 248) = 0;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_DWORD *)(a1 + 264) = *(_DWORD *)(v2 + 256);
  LOWORD(v7) = *(_WORD *)(v2 + 264);
  *(_BYTE *)(a1 + 274) = *(_BYTE *)(v2 + 266);
  *(_WORD *)(a1 + 272) = v7;
  v15 = *(_OWORD *)(v2 + 272);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(v2 + 288);
  *(_OWORD *)(a1 + 280) = v15;
  *(_QWORD *)(v2 + 272) = 0;
  *(_OWORD *)(v2 + 280) = 0u;
  v16 = *(_OWORD *)(v2 + 296);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(v2 + 312);
  *(_OWORD *)(a1 + 304) = v16;
  *(_OWORD *)(v2 + 304) = 0u;
  *(_QWORD *)(v2 + 296) = 0;
  v17 = *(_OWORD *)(v2 + 320);
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(v2 + 336);
  *(_OWORD *)(a1 + 328) = v17;
  *(_QWORD *)(v2 + 336) = 0;
  *(_OWORD *)(v2 + 320) = 0u;
  v18 = *(_OWORD *)(v2 + 344);
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(v2 + 360);
  *(_OWORD *)(a1 + 352) = v18;
  v19 = *(_OWORD *)(v2 + 368);
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(v2 + 384);
  *(_OWORD *)(a1 + 376) = v19;
  *(_QWORD *)(v2 + 384) = 0;
  *(_OWORD *)(v2 + 368) = 0u;
  *(_WORD *)(a1 + 400) = *(_WORD *)(v2 + 392);
  *(_QWORD *)(a1 + 408) = 0;
  *(_OWORD *)(a1 + 416) = 0u;
  v20 = *(_QWORD *)(v2 + 408);
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(v2 + 400);
  *(_QWORD *)(a1 + 416) = v20;
  *(_QWORD *)(a1 + 424) = *(_QWORD *)(v2 + 416);
  *(_QWORD *)(v2 + 416) = 0;
  *(_OWORD *)(v2 + 400) = 0u;
  v21 = *(_OWORD *)(v2 + 488);
  v22 = *(_OWORD *)(v2 + 520);
  v23 = *(_OWORD *)(v2 + 472);
  *(_OWORD *)(a1 + 512) = *(_OWORD *)(v2 + 504);
  *(_OWORD *)(a1 + 528) = v22;
  *(_OWORD *)(a1 + 480) = v23;
  *(_OWORD *)(a1 + 496) = v21;
  v24 = *(_OWORD *)(v2 + 552);
  v25 = *(_OWORD *)(v2 + 568);
  v26 = *(_OWORD *)(v2 + 536);
  *(_OWORD *)(a1 + 588) = *(_OWORD *)(v2 + 580);
  *(_OWORD *)(a1 + 560) = v24;
  *(_OWORD *)(a1 + 576) = v25;
  *(_OWORD *)(a1 + 544) = v26;
  v27 = *(_OWORD *)(v2 + 424);
  v28 = *(_OWORD *)(v2 + 456);
  *(_OWORD *)(a1 + 448) = *(_OWORD *)(v2 + 440);
  *(_OWORD *)(a1 + 464) = v28;
  *(_OWORD *)(a1 + 432) = v27;
  LOWORD(v20) = *(_WORD *)(v2 + 600);
  *(_BYTE *)(a1 + 610) = *(_BYTE *)(v2 + 602);
  *(_WORD *)(a1 + 608) = v20;
  v29 = *(_OWORD *)(v2 + 608);
  *(_QWORD *)(a1 + 632) = *(_QWORD *)(v2 + 624);
  *(_OWORD *)(a1 + 616) = v29;
  *(_QWORD *)(v2 + 608) = 0;
  *(_OWORD *)(v2 + 616) = 0u;
  v30 = *(_OWORD *)(v2 + 632);
  *(_QWORD *)(a1 + 656) = *(_QWORD *)(v2 + 648);
  *(_OWORD *)(a1 + 640) = v30;
  *(_OWORD *)(v2 + 640) = 0u;
  *(_QWORD *)(v2 + 632) = 0;
  v31 = *(_OWORD *)(v2 + 656);
  *(_QWORD *)(a1 + 680) = *(_QWORD *)(v2 + 672);
  *(_OWORD *)(a1 + 664) = v31;
  *(_QWORD *)(v2 + 672) = 0;
  *(_OWORD *)(v2 + 656) = 0u;
  v32 = *(_OWORD *)(v2 + 680);
  *(_QWORD *)(a1 + 704) = *(_QWORD *)(v2 + 696);
  *(_OWORD *)(a1 + 688) = v32;
  v33 = *(_OWORD *)(v2 + 704);
  *(_QWORD *)(a1 + 728) = *(_QWORD *)(v2 + 720);
  *(_OWORD *)(a1 + 712) = v33;
  *(_QWORD *)(v2 + 720) = 0;
  *(_OWORD *)(v2 + 704) = 0u;
  *(_WORD *)(a1 + 736) = *(_WORD *)(v2 + 728);
  *(_QWORD *)(a1 + 744) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_QWORD *)(a1 + 744) = *(_QWORD *)(v2 + 736);
  *(_QWORD *)(a1 + 752) = *(_QWORD *)(v2 + 744);
  *(_QWORD *)(a1 + 760) = *(_QWORD *)(v2 + 752);
  *(_QWORD *)(v2 + 752) = 0;
  *(_OWORD *)(v2 + 736) = 0u;
  v34 = *(_OWORD *)(v2 + 824);
  v35 = *(_OWORD *)(v2 + 856);
  v36 = *(_OWORD *)(v2 + 808);
  *(_OWORD *)(a1 + 848) = *(_OWORD *)(v2 + 840);
  *(_OWORD *)(a1 + 864) = v35;
  *(_OWORD *)(a1 + 816) = v36;
  *(_OWORD *)(a1 + 832) = v34;
  v37 = *(_OWORD *)(v2 + 888);
  v38 = *(_OWORD *)(v2 + 904);
  v39 = *(_OWORD *)(v2 + 872);
  *(_OWORD *)(a1 + 924) = *(_OWORD *)(v2 + 916);
  *(_OWORD *)(a1 + 896) = v37;
  *(_OWORD *)(a1 + 912) = v38;
  *(_OWORD *)(a1 + 880) = v39;
  v40 = *(_OWORD *)(v2 + 760);
  v41 = *(_OWORD *)(v2 + 792);
  *(_OWORD *)(a1 + 784) = *(_OWORD *)(v2 + 776);
  *(_OWORD *)(a1 + 800) = v41;
  *(_OWORD *)(a1 + 768) = v40;
  v42 = *(_OWORD *)(v2 + 936);
  *(_QWORD *)(a1 + 960) = *(_QWORD *)(v2 + 952);
  *(_OWORD *)(a1 + 944) = v42;
  *(_OWORD *)(v2 + 944) = 0u;
  *(_QWORD *)(v2 + 936) = 0;
  v43 = *(_OWORD *)(v2 + 960);
  *(_QWORD *)(a1 + 984) = *(_QWORD *)(v2 + 976);
  *(_OWORD *)(a1 + 968) = v43;
  *(_OWORD *)(v2 + 968) = 0u;
  *(_QWORD *)(v2 + 960) = 0;
  v44 = *(_QWORD *)(v2 + 984);
  *(_DWORD *)(a1 + 1000) = *(_DWORD *)(v2 + 992);
  *(_QWORD *)(a1 + 992) = v44;
  v45 = *(_OWORD *)(v2 + 1000);
  v46 = *(_OWORD *)(v2 + 1016);
  v47 = *(_OWORD *)(v2 + 1032);
  *(_QWORD *)(a1 + 1056) = *(_QWORD *)(v2 + 1048);
  *(_OWORD *)(a1 + 1040) = v47;
  *(_OWORD *)(a1 + 1008) = v45;
  *(_OWORD *)(a1 + 1024) = v46;
  *(_BYTE *)(a1 + 1064) = *(_BYTE *)(v2 + 1056);
  v48 = *(_OWORD *)(v2 + 1064);
  *(_QWORD *)(a1 + 1088) = *(_QWORD *)(v2 + 1080);
  *(_OWORD *)(a1 + 1072) = v48;
  *(_OWORD *)(v2 + 1072) = 0u;
  *(_QWORD *)(v2 + 1064) = 0;
  v49 = *(_OWORD *)(v2 + 1088);
  *(_OWORD *)(a1 + 1108) = *(_OWORD *)(v2 + 1100);
  *(_OWORD *)(a1 + 1096) = v49;
  *(_QWORD *)(a1 + 1128) = 0;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_QWORD *)(a1 + 1128) = *(_QWORD *)(v2 + 1120);
  *(_QWORD *)(a1 + 1136) = *(_QWORD *)(v2 + 1128);
  *(_QWORD *)(a1 + 1144) = *(_QWORD *)(v2 + 1136);
  *(_QWORD *)(v2 + 1136) = 0;
  *(_OWORD *)(v2 + 1120) = 0u;
  *(_BYTE *)(a1 + 1152) = *(_BYTE *)(v2 + 1144);
  v50 = *(_OWORD *)(v2 + 1152);
  *(_QWORD *)(a1 + 1176) = *(_QWORD *)(v2 + 1168);
  *(_OWORD *)(a1 + 1160) = v50;
  *(_OWORD *)(v2 + 1160) = 0u;
  *(_QWORD *)(v2 + 1152) = 0;
  v51 = *(_OWORD *)(v2 + 1176);
  *(_OWORD *)(a1 + 1196) = *(_OWORD *)(v2 + 1188);
  *(_OWORD *)(a1 + 1184) = v51;
  *(_QWORD *)(a1 + 1216) = 0;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1216) = *(_OWORD *)(v2 + 1208);
  *(_QWORD *)(a1 + 1232) = *(_QWORD *)(v2 + 1224);
  *(_QWORD *)(v2 + 1224) = 0;
  *(_OWORD *)(v2 + 1208) = 0u;
  v52 = *(_OWORD *)(v2 + 1232);
  *(_QWORD *)(a1 + 1256) = *(_QWORD *)(v2 + 1248);
  *(_OWORD *)(a1 + 1240) = v52;
  *(_QWORD *)(v2 + 1232) = 0;
  *(_OWORD *)(v2 + 1240) = 0u;
  v53 = *(_OWORD *)(v2 + 1256);
  *(_QWORD *)(a1 + 1280) = *(_QWORD *)(v2 + 1272);
  *(_OWORD *)(a1 + 1264) = v53;
  *(_OWORD *)(v2 + 1264) = 0u;
  *(_QWORD *)(v2 + 1256) = 0;
  v54 = *(_OWORD *)(v2 + 1280);
  *(_QWORD *)(a1 + 1304) = *(_QWORD *)(v2 + 1296);
  *(_OWORD *)(a1 + 1288) = v54;
  *(_QWORD *)(v2 + 1296) = 0;
  *(_OWORD *)(v2 + 1280) = 0u;
  v55 = *(_OWORD *)(v2 + 1304);
  *(_QWORD *)(a1 + 1328) = *(_QWORD *)(v2 + 1320);
  *(_OWORD *)(a1 + 1312) = v55;
  *(_QWORD *)(v2 + 1320) = 0;
  *(_OWORD *)(v2 + 1304) = 0u;
  return result;
}

void sub_10085ED7C(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_100857FD0((uint64_t)v2 + 24);
    operator delete(v2);
  }
}

uint64_t *sub_10085EDC0(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *i;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[2];
  char v25;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (uint64_t *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = a1 + 16;
  v14 = operator new(0x548uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *v14 = 0;
  v14[1] = v7;
  sub_10085F014((uint64_t)(v14 + 2), *a4);
  v25 = 1;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_10012E444(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v13;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8)
          v22 %= v8;
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  i = (uint64_t *)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_10085ED7C((uint64_t)v24, 0);
  return i;
}

void sub_10085EFFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10085ED7C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_10085F014(uint64_t a1, _DWORD *a2)
{
  _OWORD *v3;
  __int128 v4;

  v3 = (_OWORD *)(a1 + 1012);
  *(_DWORD *)a1 = *a2;
  bzero((void *)(a1 + 16), 0x528uLL);
  *(_DWORD *)(a1 + 8) = 255;
  *(_DWORD *)(a1 + 12) = 257;
  *(_QWORD *)&v4 = 0x100000001;
  *((_QWORD *)&v4 + 1) = 0x100000001;
  *(_OWORD *)(a1 + 28) = v4;
  *(_QWORD *)(a1 + 52) = 0;
  *(_QWORD *)(a1 + 44) = 0;
  *(_QWORD *)(a1 + 57) = 0;
  *(_OWORD *)(a1 + 76) = v4;
  *(_QWORD *)(a1 + 100) = 0;
  *(_QWORD *)(a1 + 92) = 0;
  *(_QWORD *)(a1 + 105) = 0;
  *(_QWORD *)(a1 + 120) = 0x401C000000000000;
  sub_100857DA8(a1 + 128);
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_WORD *)(a1 + 992) = 7275;
  *(_QWORD *)(a1 + 996) = 0;
  *(_WORD *)(a1 + 1008) = 256;
  *v3 = xmmword_101BDBEC0;
  *(_QWORD *)(a1 + 1028) = 0x93A80018B8200;
  *(_WORD *)(a1 + 1036) = 256;
  *(_OWORD *)(a1 + 1040) = xmmword_101BDBEC0;
  *(_QWORD *)(a1 + 1056) = 0x93A80018B8200;
  *(_BYTE *)(a1 + 1064) = 0;
  *(_QWORD *)(a1 + 1072) = 0;
  *(_QWORD *)(a1 + 1088) = 0;
  *(_QWORD *)(a1 + 1080) = 0;
  *(_OWORD *)((char *)v3 + 84) = xmmword_101BDBED0;
  *(_QWORD *)(a1 + 1112) = 0xE1000015180;
  *(_DWORD *)(a1 + 1120) = 5184000;
  *(_QWORD *)(a1 + 1168) = 0;
  *(_QWORD *)(a1 + 1160) = 0;
  *(_QWORD *)(a1 + 1176) = 0;
  *(_QWORD *)(a1 + 1144) = 0;
  *(_QWORD *)(a1 + 1128) = 0;
  *(_QWORD *)(a1 + 1136) = 0;
  *(_BYTE *)(a1 + 1152) = 0;
  *(_OWORD *)(a1 + 1184) = xmmword_101BDBED0;
  *(_QWORD *)(a1 + 1200) = 0xE1000015180;
  *(_DWORD *)(a1 + 1208) = 5184000;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(_OWORD *)(a1 + 1312) = 0u;
  *(_QWORD *)(a1 + 1328) = 0;
  return a1;
}

void sub_10085F16C()
{
  operator delete();
}

_QWORD *sub_10085F180(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102157798;
  result[1] = v3;
  return result;
}

uint64_t sub_10085F1B4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102157798;
  a2[1] = v2;
  return result;
}

id sub_10085F1D0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  id result;

  v1 = *(_QWORD **)(a1 + 8);
  sub_10023E250((uint64_t)v1);
  v2 = v1[134];
  if (v2)
    sub_10022ECE8(v2);
  v3 = v1[135];
  if (v3)
    sub_100028EA4(v3);
  v4 = v1[138];
  if (v4)
    sub_10001FE6C(v4);
  v5 = (_QWORD *)v1[133];
  if (v5)
    sub_100013528(v5);
  result = (id)v1[136];
  if (result)
    return sub_100229B78((uint64_t)result);
  return result;
}

uint64_t sub_10085F238(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10085F274()
{
}

void sub_10085F284()
{
  operator delete();
}

_QWORD *sub_10085F298(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102157818;
  result[1] = v3;
  return result;
}

uint64_t sub_10085F2CC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102157818;
  a2[1] = v2;
  return result;
}

void sub_10085F2E8(uint64_t a1)
{
  uint64_t v1;
  _DWORD *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 8);
  sub_10023DD48(v1);
  v2 = *(_DWORD **)(v1 + 1088);
  if (v2)
    sub_100229D1C(v2);
  v3 = *(_BYTE **)(v1 + 1064);
  if (v3)
    sub_1000138D8(v3);
  v4 = *(_QWORD *)(v1 + 1104);
  if (v4)
    sub_100010B00(v4);
  v5 = *(_QWORD *)(v1 + 1080);
  if (v5)
    sub_100022DC8(v5);
  v6 = *(_QWORD *)(v1 + 1072);
  if (v6)
    sub_1000C6538(v6);
  if (*(_QWORD *)(v1 + 1152) && *(_BYTE *)(v1 + 1268))
  {
    sub_10084FF18((uint64_t *)(v1 + 848));
    sub_100238A38((uint64_t *)(v1 + 832));
    *(_BYTE *)(v1 + 1268) = 0;
  }
  sub_10023E2DC((_QWORD *)v1);
}

uint64_t sub_10085F370(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10085F3AC()
{
}

void sub_10085F3BC()
{
  operator delete();
}

_QWORD *sub_10085F3D0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102157898;
  result[1] = v3;
  return result;
}

uint64_t sub_10085F404(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102157898;
  a2[1] = v2;
  return result;
}

uint64_t sub_10085F420(uint64_t a1)
{
  return sub_10023E250(*(_QWORD *)(a1 + 8));
}

uint64_t sub_10085F428(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10085F464()
{
}

void sub_10085F474()
{
  operator delete();
}

_QWORD *sub_10085F488(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102157918;
  result[1] = v3;
  return result;
}

uint64_t sub_10085F4BC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102157918;
  a2[1] = v2;
  return result;
}

void sub_10085F4D8(uint64_t a1)
{
  _QWORD *v1;

  v1 = *(_QWORD **)(a1 + 8);
  sub_10023DD48((uint64_t)v1);
  sub_10023E2DC(v1);
}

uint64_t sub_10085F500(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10085F53C()
{
}

BOOL sub_10085F548(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
}

uint64_t sub_10085F564(uint64_t a1)
{
  uint64_t result;

  if ((*(unsigned int (**)(void))(*(_QWORD *)(a1 + 32) + 16))())
    (*(void (**)(_QWORD, _QWORD, _QWORD))(a1 + 40))(*(_QWORD *)(a1 + 48), *(unsigned int *)(a1 + 64), *(_QWORD *)(a1 + 56));
  result = *(_QWORD *)(a1 + 48);
  if (result)
    operator delete[]();
  return result;
}

void sub_10085F5C4(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v8;

  *a1 = off_1021D5F20;
  *a1 = off_102157A10;
  a1[1] = 0;
  v8 = a2;
  a1[5] = 0;
  a1[2] = v8;
  a1[3] = a3;
  a1[4] = a5;
  a1[6] = 0;
  operator new[]();
}

void sub_10085F700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  sub_100015E88(v11);
  _Unwind_Resume(a1);
}

BOOL sub_10085F728(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
}

__n128 sub_10085F744(uint64_t a1, uint64_t a2, __n128 *a3)
{
  __n128 *v3;
  __n128 result;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD v12[8];
  unsigned int v13;

  v3 = (__n128 *)(*(_QWORD *)(a1 + 56) + 24 * *(unsigned int *)(a1 + 64));
  result = *a3;
  v3[1].n128_u64[0] = a3[1].n128_u64[0];
  *v3 = result;
  v5 = *(_DWORD *)(a1 + 68);
  v6 = *(_DWORD *)(a1 + 64) + 1;
  *(_DWORD *)(a1 + 64) = v6;
  if (v6 >= v5)
  {
    v8 = *(_QWORD *)(a1 + 24);
    v7 = *(_QWORD *)(a1 + 32);
    v9 = *(_QWORD *)(a1 + 48);
    v10 = *(_QWORD *)(a1 + 56);
    v11 = *(void **)(a1 + 16);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_10085F810;
    v12[3] = &unk_1021579E0;
    v12[4] = v9;
    v12[5] = v8;
    v13 = v6;
    v12[6] = v10;
    v12[7] = v7;
    objc_msgSend(v11, "async:", v12);
    operator new[]();
  }
  return result;
}

uint64_t sub_10085F810(uint64_t a1)
{
  uint64_t result;

  if ((*(unsigned int (**)(void))(*(_QWORD *)(a1 + 32) + 16))())
    (*(void (**)(_QWORD, _QWORD, _QWORD))(a1 + 40))(*(_QWORD *)(a1 + 48), *(unsigned int *)(a1 + 64), *(_QWORD *)(a1 + 56));
  result = *(_QWORD *)(a1 + 48);
  if (result)
    operator delete[]();
  return result;
}

uint64_t sub_10085F870@<X0>(__int128 *a1@<X1>, __int128 *a2@<X2>, _QWORD *a3@<X8>)
{
  char *v6;
  uint64_t result;

  v6 = (char *)operator new(0x48uLL);
  result = sub_10085C478((uint64_t)v6, a1, a2);
  *a3 = v6 + 24;
  a3[1] = v6;
  return result;
}

void sub_10085F8BC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10085F8D4()
{
  operator delete();
}

_QWORD *sub_10085F8E8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102157A60;
  result[1] = v3;
  return result;
}

uint64_t sub_10085F91C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102157A60;
  a2[1] = v2;
  return result;
}

void sub_10085F938(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  NSObject *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9[2];
  _WORD v10[8];
  uint8_t buf[1640];

  v2 = (std::__shared_weak_count *)a2[1];
  v9[0] = *a2;
  v9[1] = (uint64_t)v2;
  *a2 = 0;
  a2[1] = 0;
  v3 = *(_QWORD *)(a1 + 8);
  if (sub_10085695C(v3, v9))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "knownACFile,calling modifyKnownACDownloader as source url has changed", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "knownACFile,calling modifyKnownACDownloader as source url has changed", v10, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "auto CLGnssController::modifyKnownACDownloader()::(anonymous class)::operator()(std::shared_ptr<CLGnssAssistanceFile>) const", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    sub_1008564BC(v3);
  }
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_10085FB20(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    sub_10190BA48();
  _Unwind_Resume(exception_object);
}

uint64_t sub_10085FB40(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10085FB7C()
{
}

uint64_t sub_10085FB88()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 16))(v0);
}

void sub_10085FB98(unint64_t *a1@<X8>)
{
  unint64_t v1;

  v1 = __ldaxr(a1);
  __stlxr(v1 - 1, a1);
}

BOOL sub_10085FBA8()
{
  return os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT);
}

BOOL sub_10085FBBC()
{
  uint64_t v0;

  return os_log_type_enabled(*(os_log_t *)(v0 + 120), OS_LOG_TYPE_INFO);
}

void sub_10085FBD4()
{
  std::__shared_weak_count *v0;

  std::__shared_weak_count::__release_weak(v0);
}

BOOL sub_10085FBE8()
{
  uint64_t v0;

  return os_signpost_enabled(*(os_log_t *)(v0 + 120));
}

BOOL sub_10085FBF4()
{
  return os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT);
}

BOOL sub_10085FC08()
{
  uint64_t v0;

  return os_log_type_enabled(*(os_log_t *)(v0 + 120), OS_LOG_TYPE_INFO);
}

BOOL sub_10085FC40()
{
  uint64_t v0;

  return os_signpost_enabled(*(os_log_t *)(v0 + 120));
}

BOOL sub_10085FC4C()
{
  uint64_t v0;

  return os_signpost_enabled(*(os_log_t *)(v0 + 120));
}

void sub_10085FC58()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_10085FCF4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_10085FD0C()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_10085FD98(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

void sub_10085FDB0()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101BDBF20;
      v1[3] = unk_101BDBF30;
      v1[4] = xmmword_101BDBF40;
      v1[0] = xmmword_101BDBF00;
      v1[1] = unk_101BDBF10;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_10085FE84(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

uint64_t sub_10085FE9C()
{
  sub_1015A2E04(qword_102304EB0, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102304EB0, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102304EC8, "GnssController");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102304EC8, (void *)&_mh_execute_header);
}

void sub_100860790(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

_QWORD *sub_1008607BC(_QWORD *a1, int a2)
{
  void *__p[2];
  char v6;

  sub_1015A2E04(__p, "");
  sub_1008608C0((uint64_t)a1, "SmoothedGaitMetricsHistory", a2, (uint64_t)__p, 1, 30.0);
  if (v6 < 0)
    operator delete(__p[0]);
  *a1 = off_102157BA8;
  a1[9] = off_102157C70;
  a1[44] = off_102157CC0;
  sub_100E81598(a1 + 45, 0, 0);
  sub_100E81598(a1 + 47, 0, 0);
  sub_100E81598(a1 + 49, 0, 0);
  sub_100E81598(a1 + 51, 0, 0);
  (*(void (**)(_QWORD *))(*a1 + 112))(a1);
  return a1;
}

void sub_100860894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008608C0(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  _QWORD *v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v16;
  uint64_t v17;
  __int16 v18;

  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v12 = (_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = off_102138DA8;
  sub_10042776C((_QWORD *)(a1 + 8));
  *v12 = &off_102138DD8;
  *(_QWORD *)a1 = off_102157F78;
  *(_QWORD *)(a1 + 72) = off_102158020;
  sub_101137D40(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(_QWORD *)a1 = off_102157F78;
  *(_QWORD *)(a1 + 72) = off_102158020;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 272) = 12000;
  *(_QWORD *)(a1 + 280) = off_102138DA8;
  sub_10042776C((_QWORD *)(a1 + 288));
  *(_QWORD *)(a1 + 288) = &off_102138DD8;
  v13 = *(_QWORD *)(a1 + 112);
  v17 = a1 + 112;
  (*(void (**)(void))(v13 + 16))();
  v18 = 256;
  if (!a3)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_100115CE4(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a4;
      v16 = *(_QWORD *)(a4 + 16);
    }
    sub_1011384BC(a1 + 72);
  }
  *(_QWORD *)(a1 + 232) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  return a1;
}

void sub_100860C7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;

  sub_10187E514((uint64_t)&a19);
  v24[35] = off_102138DA8;
  sub_100427950(v27);
  sub_10081FB1C(v26);
  sub_101138068(a12);
  *v24 = off_102138DA8;
  sub_100427950(v25);
  _Unwind_Resume(a1);
}

void sub_100860D20()
{
  JUMPOUT(0x100860D00);
}

_QWORD *sub_100860D28(_QWORD *a1)
{
  uint64_t v2;

  a1[9] = off_102158020;
  v2 = (uint64_t)(a1 + 9);
  *a1 = off_102157F78;
  a1[35] = off_102138DA8;
  sub_100427950(a1 + 36);
  sub_10081FB1C(a1 + 22);
  sub_101138068(v2);
  *a1 = off_102138DA8;
  sub_100427950(a1 + 1);
  return a1;
}

_QWORD *sub_100860DA8(uint64_t a1)
{
  return sub_100860D28((_QWORD *)(a1 - 72));
}

_QWORD *sub_100860DB0(uint64_t a1)
{
  return sub_100860D28((_QWORD *)(a1 - 352));
}

void sub_100860DB8(_QWORD *a1)
{
  sub_100860D28(a1);
  operator delete();
}

void sub_100860DDC(uint64_t a1)
{
  sub_100860D28((_QWORD *)(a1 - 72));
  operator delete();
}

void sub_100860E04(uint64_t a1)
{
  sub_100860D28((_QWORD *)(a1 - 352));
  operator delete();
}

uint64_t sub_100860E2C(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = sub_1000CC4F4(a1[10]);
  if ((_DWORD)result)
  {
    sub_100860ED8((uint64_t)a1);
    sub_1008610E8((uint64_t)a1);
    sub_100634364(a1[10], "SmoothedGaitMetricsHistory", (const char **)&off_102157D68, (const std::string::value_type **)&off_1022A4700, 0);
    a1[45] = sub_10063D314(a1[10], "DELETE FROM SmoothedGaitMetricsHistory WHERE startTime < ?");
    a1[46] = v3;
    a1[47] = sub_10063D314(a1[10], "SELECT * from SmoothedGaitMetricsHistory ORDER BY startTime ASC");
    a1[48] = v4;
    a1[49] = sub_10063D314(a1[10], "SELECT COUNT(*) FROM SmoothedGaitMetricsHistory");
    a1[50] = v5;
    result = sub_10063D314(a1[10], "INSERT INTO SmoothedGaitMetricsHistory (startTime, walkingSpeed, stepLength, cycleTime, distance, doubleSupportPercentage, asymmetryProbability, numGaitMetrics \t\t\t\t) VALUES (?, ?, ?, ?, ?, ?, ?, ?)");
    a1[51] = result;
    a1[52] = v6;
  }
  return result;
}

BOOL sub_100860ED8(uint64_t a1)
{
  _BOOL8 result;
  const char *v3;
  int v4;
  __int16 v5;
  char v6;
  char v7;

  result = sub_100635B3C(*(_QWORD *)(a1 + 80), "SmoothedGaitMetricsHistory");
  if (result)
  {
    v3 = "numGaitMetrics";
    v4 = 5;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    sub_10063A8D4(*(_QWORD *)(a1 + 80), "SmoothedGaitMetricsHistory", (uint64_t)"numGaitMetrics", (uint64_t)&v3);
  }
  return result;
}

BOOL sub_1008610E8(uint64_t a1)
{
  _BOOL8 result;
  const char *v3;
  int v4;
  __int16 v5;
  char v6;
  char v7;

  result = sub_100635B3C(*(_QWORD *)(a1 + 80), "SmoothedGaitMetricsHistory");
  if (result)
  {
    v3 = "numGaitMetrics";
    v4 = 5;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    sub_10063A8D4(*(_QWORD *)(a1 + 80), "SmoothedGaitMetricsHistory", (uint64_t)"numGaitMetrics", (uint64_t)&v3);
  }
  return result;
}

void sub_100861440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  if (a15 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a17);
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  sub_1018B38B4((uint64_t)&a55);
  _Unwind_Resume(a1);
}

uint64_t sub_1008614DC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  sqlite3_stmt *v5;
  sqlite3_stmt *v6;
  sqlite3_stmt *v7;
  sqlite3_stmt *v8;
  sqlite3_stmt *v9;
  sqlite3_stmt *v10;
  sqlite3_stmt *v11;
  sqlite3_stmt *v12;
  uint64_t v13;
  sqlite3_stmt *v14;
  NSObject *v15;
  const char *v16;
  uint8_t *v17;
  __int16 v18;
  uint64_t v19;
  uint8_t buf[1640];

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_100087AF4((_QWORD *)(a1 + 408), &v19);
    if (v19)
    {
      v5 = (sqlite3_stmt *)sub_100026CC8(v19);
      if (sub_1000890C4(v5, 1, *(double *)(a2 + 8)))
      {
        v6 = (sqlite3_stmt *)sub_100026CC8(v19);
        if (sub_1000890C4(v6, 2, *(float *)(a2 + 16)))
        {
          v7 = (sqlite3_stmt *)sub_100026CC8(v19);
          if (sub_1000890C4(v7, 3, *(float *)(a2 + 24)))
          {
            v8 = (sqlite3_stmt *)sub_100026CC8(v19);
            if (sub_1000890C4(v8, 4, *(float *)(a2 + 36)))
            {
              v9 = (sqlite3_stmt *)sub_100026CC8(v19);
              if (sub_1000890C4(v9, 5, *(float *)(a2 + 32)))
              {
                v10 = (sqlite3_stmt *)sub_100026CC8(v19);
                if (sub_1000890C4(v10, 6, *(float *)(a2 + 20)))
                {
                  v11 = (sqlite3_stmt *)sub_100026CC8(v19);
                  if (sub_1000890C4(v11, 7, *(float *)(a2 + 28)))
                  {
                    v12 = (sqlite3_stmt *)sub_100026CC8(v19);
                    if (sub_10023C77C(v12, 8, *(_DWORD *)(a2 + 40)))
                    {
                      v13 = *(_QWORD *)(a1 + 80);
                      v14 = (sqlite3_stmt *)sub_100026CC8(v19);
                      sub_10023C9B0(v13, v14);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_102157F48);
      v15 = qword_10229FE98;
      if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "[SmoothedGaitMetricsRecorderDb] Invalid SQL statement", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE90 != -1)
          dispatch_once(&qword_10229FE90, &stru_102157F48);
        v18 = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 16, "[SmoothedGaitMetricsRecorderDb] Invalid SQL statement", &v18, 2);
        v17 = (uint8_t *)v16;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLMobility::SmoothedGaitMetricsRecorderDb::insertRecordUL(const SmoothedGaitMetrics &, BOOL)", "%s\n", v16);
        if (v17 != buf)
          free(v17);
      }
    }
    result = v19;
    v19 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_100861790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

char *sub_1008617C0@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[111] < 0)
    return (char *)sub_100115CE4((_BYTE *)a2, *((void **)result + 11), *((_QWORD *)result + 12));
  *(_OWORD *)a2 = *(_OWORD *)(result + 88);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)result + 13);
  return result;
}

char *sub_1008617EC@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[39] < 0)
    return (char *)sub_100115CE4((_BYTE *)a2, *((void **)result + 2), *((_QWORD *)result + 3));
  *(_OWORD *)a2 = *((_OWORD *)result + 1);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)result + 4);
  return result;
}

uint64_t sub_100861818(uint64_t a1, void *a2)
{
  NSObject *v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  size_t v8;
  std::string *v9;
  void **v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  void *v14;
  char v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v20;
  std::string *v21;
  void *v22[2];
  int64_t v23;
  std::string v24;
  void *__p[4];
  std::string buf[68];

  if (!sub_100635E80(*(_QWORD *)(a1 + 80), (char *)a2))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102158060);
    v4 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Notice %{public}s needs autoincrement migration", (uint8_t *)buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102158060);
      LODWORD(__p[0]) = 136446210;
      *(void **)((char *)__p + 4) = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice %{public}s needs autoincrement migration", __p, 12);
      v21 = (std::string *)v20;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLActivityRecorderDb<CLMobility::SmoothedGaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = CLMobility::SmoothedGaitMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
    memset(__p, 0, 24);
    sub_1015A2E04(buf, (char *)a2);
    v5 = std::string::append(buf, "AutoIncr");
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v23 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)v22 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    sub_1015A2E04(buf, (char *)a2);
    v7 = std::string::append(buf, "Index");
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    sub_10001E638(*(_QWORD *)(a1 + 80));
    if (SHIBYTE(__p[2]) >= 0)
      v8 = HIBYTE(__p[2]);
    else
      v8 = (size_t)__p[1];
    v9 = buf;
    sub_100259584((uint64_t)buf, v8 + 21);
    if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    if (v8)
    {
      if (SHIBYTE(__p[2]) >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      memmove(v9, v10, v8);
    }
    strcpy((char *)v9 + v8, "DROP TABLE IF EXISTS ");
    if (v23 >= 0)
      v11 = v22;
    else
      v11 = (void **)v22[0];
    if (v23 >= 0)
      v12 = HIBYTE(v23);
    else
      v12 = (std::string::size_type)v22[1];
    v13 = std::string::append(buf, (const std::string::value_type *)v11, v12);
    v14 = (void *)v13->__r_.__value_.__r.__words[0];
    v24.__r_.__value_.__r.__words[0] = v13->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v24.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    __p[0] = v14;
    __p[1] = v24.__r_.__value_.__l.__data_;
    *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v24.__r_.__value_.__r.__words + 7);
    HIBYTE(__p[2]) = v15;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      v15 = HIBYTE(__p[2]);
      v14 = __p[0];
    }
    if (v15 >= 0)
      v16 = (char *)__p;
    else
      v16 = (char *)v14;
    sub_1000CDA68(*(_QWORD *)(a1 + 80), v16);
  }
  v17 = *(_QWORD *)(a1 + 80);
  if (*(uint64_t *)(v17 + 88) <= 0)
    v18 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v18 = *(_QWORD *)(v17 + 88);
  sub_100053048(v17, v18);
  return 0;
}

void sub_1008629B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a60 < 0)
    operator delete(a55);
  _Unwind_Resume(a1);
}

uint64_t sub_100862CD0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  NSObject *v9;
  const char *v11;
  uint8_t *v12;
  void *__p[2];
  unsigned __int8 v14;
  uint8_t buf[16];
  uint64_t v16;
  _QWORD v17[8];

  v2 = a1 + 9;
  if ((sub_10008950C(a1 + 9) & 1) != 0)
  {
    if (sub_10008950C(v2))
    {
      sub_100263E50((uint64_t)buf);
      v3 = sub_100263F7C(&v16, (uint64_t)"SELECT * FROM ", 14);
      (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
      if ((v14 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v14 & 0x80u) == 0)
        v5 = v14;
      else
        v5 = (uint64_t)__p[1];
      v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
      sub_100263F7C(v6, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY startTime ASC", 62);
      if ((char)v14 < 0)
        operator delete(__p[0]);
      v7 = a1[10];
      std::stringbuf::str(__p, v17);
      if ((v14 & 0x80u) == 0)
        v8 = (char *)__p;
      else
        v8 = (char *)__p[0];
      sub_1000CDA68(v7, v8);
    }
    return 100;
  }
  else
  {
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_102157F48);
    v9 = qword_10229FE98;
    if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "SmoothedGaitMetricsHistory not accessible", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_102157F48);
      LOWORD(__p[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 2, "SmoothedGaitMetricsHistory not accessible", __p, 2);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "virtual CMError CLMobility::SmoothedGaitMetricsRecorderDb::querySmoothedGaitMetricsInTimeRange(CFAbsoluteTime, CFAbsoluteTime, std::vector<SmoothedGaitMetrics> &) const", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    return 109;
  }
}

void sub_100863158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t sub_1008631BC(uint64_t *a1, uint64_t a2)
{
  sqlite3_stmt *v4;
  int v5;

  v4 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v5 = sqlite3_step(v4);
  if (v5 == 101)
    return 1;
  if (v5 != 100)
    return 2;
  sub_10086322C(a1, a2);
  return 0;
}

uint64_t sub_100863218(uint64_t a1)
{
  return sub_100862CD0((_QWORD *)(a1 - 352));
}

uint64_t sub_100863220(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_10086322C(a2, a3);
}

uint64_t sub_10086322C(uint64_t *a1, uint64_t a2)
{
  sqlite3_stmt *v4;
  sqlite3_stmt *v5;
  sqlite3_stmt *v6;
  float v7;
  sqlite3_stmt *v8;
  float v9;
  sqlite3_stmt *v10;
  float v11;
  sqlite3_stmt *v12;
  float v13;
  sqlite3_stmt *v14;
  float v15;
  sqlite3_stmt *v16;
  float v17;
  sqlite3_stmt *v18;
  uint64_t result;

  v4 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)a2 = sqlite3_column_int(v4, 0);
  v5 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 8) = sqlite3_column_double(v5, 1);
  v6 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v7 = sqlite3_column_double(v6, 2);
  *(float *)(a2 + 16) = v7;
  v8 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v9 = sqlite3_column_double(v8, 3);
  *(float *)(a2 + 24) = v9;
  v10 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v11 = sqlite3_column_double(v10, 4);
  *(float *)(a2 + 36) = v11;
  v12 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v13 = sqlite3_column_double(v12, 5);
  *(float *)(a2 + 32) = v13;
  v14 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v15 = sqlite3_column_double(v14, 6);
  *(float *)(a2 + 20) = v15;
  v16 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v17 = sqlite3_column_double(v16, 7);
  *(float *)(a2 + 28) = v17;
  v18 = (sqlite3_stmt *)sub_100026CC8(*a1);
  result = sqlite3_column_int(v18, 8);
  *(_DWORD *)(a2 + 40) = result;
  return result;
}

uint64_t sub_100863318(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  __int128 v15;
  NSObject *v16;
  const char *v18;
  uint8_t *v19;
  const char *v20;
  _WORD v21[8];
  _OWORD v22[3];
  _QWORD *v23;
  __int16 v24;
  uint8_t buf[1640];

  v5 = a1 + 14;
  v4 = a1[14];
  v6 = a1 + 9;
  v23 = a1 + 14;
  (*(void (**)(_QWORD *))(v4 + 16))(a1 + 14);
  v24 = 256;
  if ((sub_10008950C(v6) & 1) != 0)
  {
    LODWORD(v22[0]) = 0;
    memset((char *)v22 + 8, 0, 36);
    v7 = (*(uint64_t (**)(_QWORD *, _OWORD *))(*a1 + 104))(a1, v22);
    if (v7)
    {
      if (v7 == 1)
      {
        if (qword_10229FE90 != -1)
          dispatch_once(&qword_10229FE90, &stru_102157F48);
        v13 = qword_10229FE98;
        if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "[SmoothedGaitMetricsHistory] Most recent smoothed gait metrics: No recent records in database", buf, 2u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_33;
        bzero(buf, 0x65CuLL);
        if (qword_10229FE90 != -1)
          dispatch_once(&qword_10229FE90, &stru_102157F48);
        v21[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 2, "[SmoothedGaitMetricsHistory] Most recent smoothed gait metrics: No recent records in database", v21, 2);
        v10 = (uint8_t *)v14;
        sub_100512490("Generic", 1, 0, 2, "virtual CMError CLMobility::SmoothedGaitMetricsRecorderDb::mostRecentSmoothedGaitMetrics(SmoothedGaitMetrics &) const", "%s\n", v14);
      }
      else if (v7 == 2)
      {
        if (qword_10229FE90 != -1)
          dispatch_once(&qword_10229FE90, &stru_102157F48);
        v8 = qword_10229FE98;
        if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[SmoothedGaitMetricsHistory] Most recent smoothed gait metrics: Query error", buf, 2u);
        }
        if (!sub_1001BFF7C(115, 0))
          goto LABEL_33;
        bzero(buf, 0x65CuLL);
        if (qword_10229FE90 != -1)
          dispatch_once(&qword_10229FE90, &stru_102157F48);
        v21[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 16, "[SmoothedGaitMetricsHistory] Most recent smoothed gait metrics: Query error", v21, 2);
        v10 = (uint8_t *)v9;
        sub_100512490("Generic", 1, 0, 0, "virtual CMError CLMobility::SmoothedGaitMetricsRecorderDb::mostRecentSmoothedGaitMetrics(SmoothedGaitMetrics &) const", "%s\n", v9);
      }
      else
      {
        if (qword_10229FE90 != -1)
          dispatch_once(&qword_10229FE90, &stru_102157F48);
        v16 = qword_10229FE98;
        if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "[SmoothedGaitMetricsHistory] Most recent smoothed gait metrics: unexpected return type", buf, 2u);
        }
        if (!sub_1001BFF7C(115, 0))
          goto LABEL_33;
        bzero(buf, 0x65CuLL);
        if (qword_10229FE90 != -1)
          dispatch_once(&qword_10229FE90, &stru_102157F48);
        v21[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 16, "[SmoothedGaitMetricsHistory] Most recent smoothed gait metrics: unexpected return type", v21, 2);
        v10 = (uint8_t *)v20;
        sub_100512490("Generic", 1, 0, 0, "virtual CMError CLMobility::SmoothedGaitMetricsRecorderDb::mostRecentSmoothedGaitMetrics(SmoothedGaitMetrics &) const", "%s\n", v20);
      }
      if (v10 != buf)
        free(v10);
    }
    else
    {
      v15 = v22[1];
      *a2 = v22[0];
      a2[1] = v15;
      *(_OWORD *)((char *)a2 + 28) = *(_OWORD *)((char *)&v22[1] + 12);
    }
LABEL_33:
    v12 = 100;
    goto LABEL_34;
  }
  if (qword_10229FE90 != -1)
    dispatch_once(&qword_10229FE90, &stru_102157F48);
  v11 = qword_10229FE98;
  if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "[SmoothedGaitMetricsHistory] Database inaccessible, unable to query", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_102157F48);
    LOWORD(v22[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 2, "[SmoothedGaitMetricsHistory] Database inaccessible, unable to query", v22, 2);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "virtual CMError CLMobility::SmoothedGaitMetricsRecorderDb::mostRecentSmoothedGaitMetrics(SmoothedGaitMetrics &) const", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  v12 = 109;
LABEL_34:
  (*(void (**)(_QWORD *))(*v5 + 24))(v5);
  return v12;
}

void sub_1008638B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1008638EC(uint64_t a1, _OWORD *a2)
{
  return sub_100863318((_QWORD *)(a1 - 352), a2);
}

uint64_t sub_1008638F4(_QWORD *a1, uint64_t a2)
{
  return sub_10041B300(a1, a2, 0);
}

uint64_t sub_1008638FC(uint64_t a1, uint64_t a2)
{
  return sub_10041B300((_QWORD *)(a1 - 352), a2, 0);
}

uint64_t sub_100863908(uint64_t *a1, uint64_t a2)
{
  double Current;
  sqlite3_stmt *v5;
  uint64_t v6;
  sqlite3_stmt *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  if (*(double *)(*(_QWORD *)(a2 + 8) - 16) != 1.79769313e308 || !sub_10008950C(a1 + 9))
    return -1;
  sub_10001E638(a1[10]);
  Current = CFAbsoluteTimeGetCurrent();
  sub_100087AF4(a1 + 45, &v13);
  v5 = (sqlite3_stmt *)sub_100026CC8(v13);
  if (sub_1000890C4(v5, 1, Current - *(double *)(*(_QWORD *)(a2 + 8) - 24)))
  {
    v6 = a1[10];
    v7 = (sqlite3_stmt *)sub_100026CC8(v13);
    sub_10023C9B0(v6, v7);
    v8 = (*(int (**)(uint64_t *))(*a1 + 152))(a1);
  }
  else
  {
    v8 = -1;
  }
  sub_10001E99C(a1[10]);
  v9 = a1[10];
  if (*(uint64_t *)(v9 + 88) <= 0)
    v10 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v10 = *(_QWORD *)(v9 + 88);
  sub_100053048(v9, v10);
  v11 = v13;
  v13 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  return v8;
}

void sub_100863A10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100863A34(uint64_t a1, uint64_t a2)
{
  return sub_100863908((uint64_t *)(a1 - 72), a2);
}

uint64_t sub_100863A3C(uint64_t a1, char **a2)
{
  uint64_t result;
  char *v5;
  unint64_t v6;
  __int128 v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[48];
  uint64_t v22;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_100087AF4((_QWORD *)(a1 + 376), &v22);
    sub_10001E638(*(_QWORD *)(a1 + 80));
    *(_DWORD *)v21 = 0;
    memset(&v21[8], 0, 36);
    while (!sub_1008631BC(&v22, (uint64_t)v21))
    {
      v5 = a2[1];
      v6 = (unint64_t)a2[2];
      if ((unint64_t)v5 >= v6)
      {
        v9 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a2) >> 4);
        v10 = v9 + 1;
        if (v9 + 1 > 0x555555555555555)
          sub_100259694();
        v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (_QWORD)*a2) >> 4);
        if (2 * v11 > v10)
          v10 = 2 * v11;
        if (v11 >= 0x2AAAAAAAAAAAAAALL)
          v12 = 0x555555555555555;
        else
          v12 = v10;
        if (v12)
          v13 = (char *)sub_100313718((uint64_t)(a2 + 2), v12);
        else
          v13 = 0;
        v14 = &v13[48 * v9];
        v15 = *(_OWORD *)&v21[16];
        *(_OWORD *)v14 = *(_OWORD *)v21;
        *((_OWORD *)v14 + 1) = v15;
        *((_OWORD *)v14 + 2) = *(_OWORD *)&v21[32];
        v17 = *a2;
        v16 = a2[1];
        v18 = v14;
        if (v16 != *a2)
        {
          do
          {
            v19 = *((_OWORD *)v16 - 3);
            v20 = *((_OWORD *)v16 - 2);
            *(_OWORD *)(v18 - 20) = *(_OWORD *)(v16 - 20);
            *((_OWORD *)v18 - 3) = v19;
            *((_OWORD *)v18 - 2) = v20;
            v18 -= 48;
            v16 -= 48;
          }
          while (v16 != v17);
          v16 = *a2;
        }
        v8 = v14 + 48;
        *a2 = v18;
        a2[1] = v14 + 48;
        a2[2] = &v13[48 * v12];
        if (v16)
          operator delete(v16);
      }
      else
      {
        v7 = *(_OWORD *)&v21[16];
        *(_OWORD *)v5 = *(_OWORD *)v21;
        *((_OWORD *)v5 + 1) = v7;
        *((_OWORD *)v5 + 2) = *(_OWORD *)&v21[32];
        v8 = v5 + 48;
      }
      a2[1] = v8;
    }
    sub_10001E99C(*(_QWORD *)(a1 + 80));
    result = v22;
    v22 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_100863BF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 8))(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100863C24(uint64_t a1)
{
  uint64_t v1;
  sqlite3_stmt *v3;
  int v4;
  sqlite3_stmt *v5;
  uint64_t v6;
  uint64_t v8;

  if (!sub_10008950C(a1 + 72))
    return 0xFFFFFFFFLL;
  sub_100087AF4((_QWORD *)(a1 + 392), &v8);
  v3 = (sqlite3_stmt *)sub_100026CC8(v8);
  v4 = sqlite3_step(v3);
  if (v4 == 100)
  {
    v5 = (sqlite3_stmt *)sub_100026CC8(v8);
    v1 = sqlite3_column_int(v5, 0);
  }
  v6 = v8;
  v8 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (v4 != 100)
    return 0xFFFFFFFFLL;
  return v1;
}

void sub_100863CB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100863CDC(uint64_t a1)
{
  return sub_100863C24(a1 - 72);
}

uint64_t sub_100863CE4(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *__p[2];
  unsigned __int8 v14;
  uint64_t v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[10];
  char v19;
  uint64_t v20;

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if (SHIBYTE(v17) < 0)
  {
    v1 = v16[1];
    operator delete(v16[0]);
    if (v1)
    {
LABEL_3:
      if (sub_10008950C(a1 + 9))
      {
        sub_100263E50((uint64_t)v16);
        v5 = sub_100263F7C(&v17, (uint64_t)"SELECT * FROM ", 14);
        (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
        if ((v14 & 0x80u) == 0)
          v6 = __p;
        else
          v6 = (void **)__p[0];
        if ((v14 & 0x80u) == 0)
          v7 = v14;
        else
          v7 = (uint64_t)__p[1];
        v8 = sub_100263F7C(v5, (uint64_t)v6, v7);
        sub_100263F7C(v8, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
        if ((char)v14 < 0)
          operator delete(__p[0]);
        v9 = a1[10];
        std::stringbuf::str(__p, v18);
        if ((v14 & 0x80u) == 0)
          v10 = (char *)__p;
        else
          v10 = (char *)__p[0];
        sub_1000CDA68(v9, v10);
      }
      return 2;
    }
  }
  else if (HIBYTE(v17))
  {
    goto LABEL_3;
  }
  sub_10190C704(v4);
  v15 = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(void **)((char *)v16
  v17 = v11;
  if (v19 < 0)
    operator delete((void *)v18[8]);
  std::streambuf::~streambuf(v1);
  std::ios::~ios(&v20);
  return 2;
}

void sub_100864038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t sub_1008640A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  _BYTE v17[14];
  __int16 v18;
  _QWORD *v19;

  v3 = *(_QWORD *)(a1 + 112);
  v2 = a1 + 112;
  v4 = v2 - 40;
  v13 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_10008950C(v4))
    sub_100427D28(a1);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_102158060);
  v5 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    v6 = (_QWORD *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0)
      v6 = (_QWORD *)*v6;
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)v17 = 0;
    *(_WORD *)&v17[4] = 2082;
    *(_QWORD *)&v17[6] = "";
    v18 = 2082;
    v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(_QWORD *)(a1 + 216))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102158060);
    v7 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      v8 = *(_QWORD *)(a1 + 216);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102158060);
      v10 = *(_QWORD *)(a1 + 216);
      v14 = 134349056;
      v15 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", &v14, 12);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<CLMobility::SmoothedGaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::setDatabaseAccessible() [T = CLMobility::SmoothedGaitMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  return 1;
}

void sub_100864688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_1008646B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 28) = *(_OWORD *)(a3 + 28);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

id *sub_1008646CC(uint64_t a1, __int128 *a2, char a3)
{
  int v6;
  double v7;
  double v8;
  double v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  double v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  double v17;
  double v18;
  double v19;
  NSObject *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v24;
  const char *v25;
  uint8_t *v26;
  double v27;
  const char *v28;
  uint8_t *v29;
  const char *v30;
  uint8_t *v31;
  double v32;
  int v33;
  __int128 v34;
  __int128 v35;
  int v36;
  id v37[2];
  int v38;
  double v39;
  __int16 v40;
  uint64_t v41;
  uint8_t buf[4];
  double v43;
  __int16 v44;
  uint64_t v45;

  v37[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v37[1] = 0;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a1 + 72))(a1, a1 + 224, a2);
    return sub_100131740(v37);
  }
  if ((a3 & 1) == 0)
    sub_10001E638(*(_QWORD *)(a1 + 80));
  v33 = 0;
  v34 = 0u;
  v35 = 0u;
  v36 = 0;
  v6 = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)a1 + 104))(a1, &v33);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102158060);
      v14 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_102158060);
        LOWORD(v38) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "Failed to insert record due to failure from reading the most recent entry.", &v38, 2);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<CLMobility::SmoothedGaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLMobility::SmoothedGaitMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
      goto LABEL_43;
    }
    v7 = *((double *)a2 + 1);
    v8 = *(double *)&v34;
    v9 = v7 - *(double *)&v34;
    if (v7 - *(double *)&v34 < 0.0)
      v9 = -(v7 - *(double *)&v34);
    if (v9 > 604800.0)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102158060);
      v10 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *((_QWORD *)a2 + 1);
        *(_DWORD *)buf = 134349312;
        v43 = *(double *)&v34;
        v44 = 2050;
        v45 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_102158060);
        v24 = *((_QWORD *)a2 + 1);
        v38 = 134349312;
        v39 = *(double *)&v34;
        v40 = 2050;
        v41 = v24;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", &v38, 22);
        v26 = (uint8_t *)v25;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLMobility::SmoothedGaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLMobility::SmoothedGaitMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v25);
        if (v26 != buf)
          free(v26);
      }
      CLWriteStackshot("Potential CM database inconsistency, time jump", 0);
      v7 = *((double *)a2 + 1);
      v8 = *(double *)&v34;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_102158060);
        v12 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          v13 = *((double *)a2 + 1);
          *(_DWORD *)buf = 134217984;
          v43 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_102158060);
          v27 = *((double *)a2 + 1);
          v38 = 134217984;
          v39 = v27;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", COERCE_DOUBLE(&v38));
          v29 = (uint8_t *)v28;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLMobility::SmoothedGaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLMobility::SmoothedGaitMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v28);
          if (v29 != buf)
            free(v29);
        }
        (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      v17 = v7 - v8;
      v18 = *(float *)(a1 + 136);
      if (qword_10229FC70 != -1)
      {
        v32 = *(float *)(a1 + 136);
        dispatch_once(&qword_10229FC70, &stru_102158060);
        v18 = v32;
      }
      v19 = v17 - v18;
      v20 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        v43 = v19;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_102158060);
        v38 = 134217984;
        v39 = v19;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", COERCE_DOUBLE(&v38));
        v31 = (uint8_t *)v30;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLMobility::SmoothedGaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLMobility::SmoothedGaitMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v30);
        if (v31 != buf)
          free(v31);
      }
      (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 96))(a1, v19);
    }
    (*(void (**)(uint64_t, int *, uint64_t, __int128 *))(*(_QWORD *)a1 + 144))(a1, &v33, a1 + 224, a2);
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  v21 = *a2;
  v22 = a2[1];
  *(_OWORD *)(a1 + 252) = *(__int128 *)((char *)a2 + 28);
  *(_OWORD *)(a1 + 224) = v21;
  *(_OWORD *)(a1 + 240) = v22;
LABEL_43:
  if ((a3 & 1) == 0)
    sub_10001E99C(*(_QWORD *)(a1 + 80));
  return sub_100131740(v37);
}

void sub_100864E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100864E50(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _Unwind_Exception *v13;
  void *__p[2];
  unsigned __int8 v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17))
      goto LABEL_3;
LABEL_18:
    v13 = (_Unwind_Exception *)sub_10190C870(v4);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  v12 = v16[1];
  operator delete(v16[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_100263E50((uint64_t)v16);
    v6 = sub_100263F7C(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v15 & 0x80u) == 0)
      v8 = v15;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v18);
    if ((v15 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

uint64_t sub_1008650B0(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  _Unwind_Exception *v11;
  void *__p[2];
  unsigned __int8 v13;
  void *v14[2];
  uint64_t v15;
  _QWORD v16[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_10190C9DC(v2);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  v10 = v14[1];
  operator delete(v14[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_100263E50((uint64_t)v14);
    v4 = sub_100263F7C(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v13 & 0x80u) == 0)
      v6 = v13;
    else
      v6 = (uint64_t)__p[1];
    v7 = sub_100263F7C(v4, (uint64_t)v5, v6);
    sub_100263F7C(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    v8 = a1[10];
    std::stringbuf::str(__p, v16);
    if ((v13 & 0x80u) == 0)
      v9 = (char *)__p;
    else
      v9 = (char *)__p[0];
    sub_1000CDA68(v8, v9);
  }
  return result;
}

uint64_t sub_1008652E8(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void *v10;
  _Unwind_Exception *v11;
  uint64_t v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_10190CB48(v2);
    if (v12)
      (*(void (**)())(*(_QWORD *)v12 + 8))();
    sub_1018B38B4((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  v10 = v15[1];
  operator delete(v15[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  if (sub_10008950C(a1 + 9))
  {
    sub_100263E50((uint64_t)v15);
    v3 = sub_100263F7C(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v5 = v14;
    else
      v5 = (uint64_t)__p[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v7 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v8 = (char *)__p;
    else
      v8 = (char *)__p[0];
    sub_1000CDA68(v7, v8);
  }
  return 2;
}

uint64_t sub_100865510(uint64_t a1)
{
  return sub_1008640A0(a1 - 72);
}

void sub_100865518(id a1)
{
  qword_10229FE98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Mobility");
}

uint64_t sub_100865544(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    sub_10190CCB4(v4);
    sub_100259694();
  }
  v12 = v15[1];
  operator delete(v15[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_100263E50((uint64_t)v15);
    v6 = sub_100263F7C(&v16, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v8 = v14;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

void sub_100865854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;

  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  sub_1018B38B4((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_1008658BC(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_10086598C(id a1)
{
  qword_102304EF0 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLBacklightStateNotifierSilo"));
}

uint64_t sub_100865A40(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100865F78;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_102304F00 != -1)
    dispatch_once(&qword_102304F00, block);
  return qword_102310CE8;
}

void sub_100865D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_100865D50(uint64_t a1, int a2, __int128 *a3, uint64_t a4)
{
  void *v7;
  _QWORD v8[5];
  __int128 v9;
  uint64_t v10;
  __int128 __p;
  uint64_t v12;
  int v13;
  void *v14[2];
  uint64_t v15;
  __int128 __dst;
  uint64_t v17;

  if (*((char *)a3 + 23) < 0)
  {
    sub_100115CE4(&__dst, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    __dst = *a3;
    v17 = *((_QWORD *)a3 + 2);
  }
  if (*(char *)(a4 + 23) < 0)
  {
    sub_100115CE4(v14, *(void **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)v14 = *(_OWORD *)a4;
    v15 = *(_QWORD *)(a4 + 16);
  }
  v7 = *(void **)(a1 + 40);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3321888768;
  v8[2] = sub_100866338;
  v8[3] = &unk_102158180;
  v8[4] = a1;
  v13 = a2;
  if (SHIBYTE(v17) < 0)
  {
    sub_100115CE4(&v9, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v9 = __dst;
    v10 = v17;
  }
  if (SHIBYTE(v15) < 0)
  {
    sub_100115CE4(&__p, v14[0], (unint64_t)v14[1]);
  }
  else
  {
    __p = *(_OWORD *)v14;
    v12 = v15;
  }
  objc_msgSend(v7, "async:", v8);
  if (SHIBYTE(v12) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v10) < 0)
    operator delete((void *)v9);
  if (SHIBYTE(v15) < 0)
    operator delete(v14[0]);
  if (SHIBYTE(v17) < 0)
    operator delete((void *)__dst);
}

void sub_100865EB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  if (a19 < 0)
    operator delete(__p);
  if (a32 < 0)
    operator delete(a27);
  if (*(char *)(v32 - 41) < 0)
    operator delete(*(void **)(v32 - 64));
  _Unwind_Resume(exception_object);
}

void sub_100865F78()
{
  operator new();
}

void sub_100865FC0()
{
  operator delete();
}

uint64_t sub_100865FE4(uint64_t a1, void *a2)
{
  _QWORD *v3;
  unsigned __int8 v4;
  void *v5;
  _QWORD v7[5];
  unsigned __int8 v8;

  v3 = (_QWORD *)sub_1008660AC(a1, "CLBacklightStateNotifier", a2);
  *v3 = off_1021580B0;
  v3[14] = 0;
  *(_QWORD *)(a1 + 112) = -[CLBacklightStateNotifierAdapter initWithCLBacklightStateNotifier:]([CLBacklightStateNotifierAdapter alloc], "initWithCLBacklightStateNotifier:", a1);
  v4 = objc_msgSend(+[BLSBacklight sharedBacklight](BLSBacklight, "sharedBacklight"), "isAlwaysOnEnabled");
  v5 = *(void **)(a1 + 40);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100866544;
  v7[3] = &unk_1021468D0;
  v7[4] = a1;
  v8 = v4;
  objc_msgSend(v5, "async:", v7);
  return a1;
}

void sub_100866098(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100866148(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1008660AC(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_102158288;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_10086612C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100866148(uint64_t a1)
{
  *(_QWORD *)a1 = off_102158288;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_1008661BC(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021580B0;
  *(_BYTE *)(a1 + 108) = 1;

  *(_QWORD *)(a1 + 112) = 0;
  return sub_100866148(a1);
}

void sub_100866204(uint64_t a1)
{
  sub_1008661BC(a1);
  operator delete();
}

void sub_100866228(uint64_t a1)
{
  *(_BYTE *)(a1 + 108) = 1;

  *(_QWORD *)(a1 + 112) = 0;
}

_QWORD *sub_100866258@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1015A2E04(a2, __str);
}

uint64_t sub_1008662D0(uint64_t a1)
{
  objc_msgSend(+[BLSBacklight sharedBacklight](BLSBacklight, "sharedBacklight"), "addObserver:", *(_QWORD *)(a1 + 112));
  return 1;
}

uint64_t sub_100866304(uint64_t a1)
{
  objc_msgSend(+[BLSBacklight sharedBacklight](BLSBacklight, "sharedBacklight"), "removeObserver:", *(_QWORD *)(a1 + 112));
  return 1;
}

void sub_100866338(uint64_t a1)
{
  uint64_t v2;
  int v3;
  __int128 v4;
  uint64_t v5;
  __int128 __p;
  uint64_t v7;
  char v8;
  int v9;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = 0;
  if (sub_1001B7864(v2, &v3, 1))
  {
    v9 = 0;
    v3 = *(_DWORD *)(a1 + 88);
    if (*(char *)(a1 + 63) < 0)
    {
      sub_100115CE4(&v4, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
    }
    else
    {
      v4 = *(_OWORD *)(a1 + 40);
      v5 = *(_QWORD *)(a1 + 56);
    }
    if (*(char *)(a1 + 87) < 0)
    {
      sub_100115CE4(&__p, *(void **)(a1 + 64), *(_QWORD *)(a1 + 72));
    }
    else
    {
      __p = *(_OWORD *)(a1 + 64);
      v7 = *(_QWORD *)(a1 + 80);
    }
    v8 = 0;
    (*(void (**)(uint64_t, int *, int *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 152))(v2, &v9, &v3, 1, 0xFFFFFFFFLL, 0);
    if (SHIBYTE(v7) < 0)
      operator delete((void *)__p);
    if (SHIBYTE(v5) < 0)
      operator delete((void *)v4);
  }
}

void sub_100866434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_100866460(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  _BYTE *result;
  __int128 v6;

  if (*(char *)(a2 + 63) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 40), *(void **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v4;
  }
  result = (_BYTE *)(a1 + 64);
  if (*(char *)(a2 + 87) < 0)
    return sub_100115CE4(result, *(void **)(a2 + 64), *(_QWORD *)(a2 + 72));
  v6 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)result = v6;
  return result;
}

void sub_1008664E4(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 63) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void sub_100866500(uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

void sub_100866544(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  int v4;
  int v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;
  void *v11[2];
  void *__p[2];
  __int128 v13;
  char v14;

  v2 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)buf = 1;
  if (sub_1001B7864(v2, (int *)buf, 1))
  {
    if (qword_10229FC60 != -1)
      dispatch_once(&qword_10229FC60, &stru_102158258);
    v3 = qword_10229FC68;
    if (os_log_type_enabled((os_log_t)qword_10229FC68, OS_LOG_TYPE_INFO))
    {
      v4 = *(unsigned __int8 *)(a1 + 40);
      *(_DWORD *)buf = 67109120;
      v10 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "CLBacklightState, didChangeAlwaysOnEnabled, %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC60 != -1)
        dispatch_once(&qword_10229FC60, &stru_102158258);
      v5 = *(unsigned __int8 *)(a1 + 40);
      v8[0] = 67109120;
      v8[1] = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC68, 1, "CLBacklightState, didChangeAlwaysOnEnabled, %d", v8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLBacklightStateNotifier::notifyClientsAlwaysOnEnabled(BOOL)_block_invoke", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
    v8[0] = 1;
    *(_DWORD *)buf = 0;
    *(_OWORD *)v11 = 0u;
    *(_OWORD *)__p = 0u;
    v13 = 0u;
    v14 = *(_BYTE *)(a1 + 40);
    (*(void (**)(uint64_t, _DWORD *, uint8_t *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 152))(v2, v8, buf, 1, 0xFFFFFFFFLL, 0);
    if (SHIBYTE(v13) < 0)
      operator delete(__p[1]);
    if (SHIBYTE(__p[0]) < 0)
      operator delete(v11[0]);
  }
}

void sub_10086677C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1007217D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100866798(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  id v13;
  id v14;

  *(_QWORD *)a1 = &off_1021583D8;
  *(_QWORD *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]([CLNotifierClientAdapter alloc], "initWithClient:", a1);
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0)
    v12 = a3;
  else
    v12 = (uint64_t *)*a3;
  v13 = objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(_QWORD *)(a1 + 16) = v13;
  v14 = v13;
  if (a2)
    objc_msgSend(*(id *)(a1 + 16), "setDelegateEntityName:", a2);
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

void sub_10086686C()
{
  operator new();
}

void sub_100866918(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

void sub_100866954(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102158238);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_102158238);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLBacklightStateNotifier_Type::Notification, CLBacklightStateNotifier_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLBacklightStateNotifier_Type::Notification, NotificationData_T = CLBacklightStateNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

uint64_t sub_100866BC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022A4830);
}

BOOL sub_100866BDC(uint64_t a1, int a2, int *a3, char *a4)
{
  _BOOL8 result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  uint64_t *v28;
  char v29;
  uint64_t **v30;
  char v31;
  uint64_t **v32;
  uint64_t v33;
  char v34;
  _QWORD *v35;
  const char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  _BYTE v41[12];
  __int16 v42;
  int v43;
  _BYTE buf[24];
  void *__p[2];
  __int128 v46;
  char v47;

  v40 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      v39 = v10;
      v16 = *a3;
      v19 = *(_QWORD *)(v10 + 48);
      v18 = v10 + 48;
      v17 = v19;
      if (!v19)
        goto LABEL_31;
      v20 = v18;
      do
      {
        v21 = *(_DWORD *)(v17 + 28);
        v22 = v21 < v16;
        if (v21 >= v16)
          v23 = (uint64_t *)v17;
        else
          v23 = (uint64_t *)(v17 + 8);
        if (!v22)
          v20 = v17;
        v17 = *v23;
      }
      while (*v23);
      if (v20 == v18 || v16 < *(_DWORD *)(v20 + 28))
LABEL_31:
        v20 = v18;
      v24 = *(_QWORD *)(a1 + 64);
      if (!v24)
        goto LABEL_42;
      v25 = a1 + 64;
      do
      {
        v26 = *(_DWORD *)(v24 + 32);
        v27 = v26 < v16;
        if (v26 >= v16)
          v28 = (uint64_t *)v24;
        else
          v28 = (uint64_t *)(v24 + 8);
        if (!v27)
          v25 = v24;
        v24 = *v28;
      }
      while (*v28);
      if (v25 != a1 + 64 && v16 >= *(_DWORD *)(v25 + 32))
      {
        *(_QWORD *)v41 = v25;
        v33 = *(_QWORD *)(v25 + 56);
        v34 = *a4;
        *(_QWORD *)buf = &v40;
        *((_BYTE *)sub_1001AFE94((uint64_t **)(v25 + 40), &v40, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v34;
        *(_DWORD *)buf = 0;
        *(_OWORD *)&buf[8] = 0u;
        *(_OWORD *)__p = 0u;
        v46 = 0u;
        v47 = 0;
        if (v20 == v18
          && (*(unsigned int (**)(uint64_t, int *, _BYTE *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_100869244();
        }
        if (SHIBYTE(v46) < 0)
          operator delete(__p[1]);
        if (SHIBYTE(__p[0]) < 0)
          operator delete(*(void **)&buf[8]);
        if (v33)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        *(_QWORD *)v41 = a1 + 64;
        v29 = byte_1022A4831;
        HIDWORD(v38) = v16;
        *(_QWORD *)buf = (char *)&v38 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v29;
        HIDWORD(v38) = *a3;
        *(_QWORD *)buf = (char *)&v38 + 4;
        v30 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v30 + 8);
        v31 = *a4;
        HIDWORD(v38) = *a3;
        *(_QWORD *)buf = (char *)&v38 + 4;
        v32 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)buf = &v40;
        *((_BYTE *)sub_1001AFE94(v32 + 5, &v40, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v31;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v20 == v18)
      {
        *(_DWORD *)buf = *a3;
        sub_1000C6190((uint64_t **)(v39 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102158238);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v15;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  result = sub_1001BFF7C(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102158238);
    v35 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v35 = (_QWORD *)*v35;
    *(_DWORD *)v41 = 136446466;
    *(_QWORD *)&v41[4] = v35;
    v42 = 1026;
    v43 = a2;
    LODWORD(v38) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
      v41,
      v38);
    v37 = (char *)v36;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLBacklightStateNotifier_Type::Notification, CLBacklightStateNotifier_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLBacklightStateNotifier_Type::Notification, NotificationData_T = CLBacklightStateNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v36);
    if (v37 != buf)
      free(v37);
    return 0;
  }
  return result;
}

void sub_100867074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_1007217D0((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100867094(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102158238);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102158238);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLBacklightStateNotifier_Type::Notification, CLBacklightStateNotifier_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLBacklightStateNotifier_Type::Notification, NotificationData_T = CLBacklightStateNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

BOOL sub_100867314(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE buf[12];
  __int16 v36;
  void **v37;
  char v38;
  int v39;
  _QWORD *v40;
  __int16 v41;
  _BYTE *v42;
  void *__p[2];
  char v44;

  HIDWORD(v34) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009E904((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102158238);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v44 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v36 = 2082;
                v37 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_102158238);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v38 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v39 = 136446466;
                v40 = v29;
                v41 = 2082;
                v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                v33 = v32;
                if (v38 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLBacklightStateNotifier_Type::Notification, CLBacklightStateNotifier_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLBacklightStateNotifier_Type::Notification, NotificationData_T = CLBacklightStateNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v33);
                if (v33 != (char *)__p)
                  free(v33);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_10086769C(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;

  v5 = *(_QWORD *)(a1 + 64);
  v3 = a1 + 64;
  v4 = v5;
  if (!v5)
    return 0;
  v7 = *a2;
  v8 = v3;
  do
  {
    v9 = *(_DWORD *)(v4 + 32);
    v10 = v9 < v7;
    if (v9 >= v7)
      v11 = (uint64_t *)v4;
    else
      v11 = (uint64_t *)(v4 + 8);
    if (!v10)
      v8 = v4;
    v4 = *v11;
  }
  while (*v11);
  if (v8 == v3)
    return 0;
  if (v7 < *(_DWORD *)(v8 + 32))
    return 0;
  v12 = *(_QWORD *)(v8 + 64);
  if (!v12)
    return 0;
  *(_DWORD *)a3 = *(_DWORD *)v12;
  std::string::operator=((std::string *)(a3 + 8), (const std::string *)(v12 + 8));
  std::string::operator=((std::string *)(a3 + 32), (const std::string *)(v12 + 32));
  *(_BYTE *)(a3 + 56) = *(_BYTE *)(v12 + 56);
  return 1;
}

uint64_t sub_100867734(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t **v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  int v10;
  __int128 v11;
  int *v12;

  sub_100868B44(a3, &v11);
  v10 = *a2;
  v12 = &v10;
  v5 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v10, (uint64_t)&unk_101B9EB60, &v12);
  sub_1002B7674((uint64_t)(v5 + 8), &v11);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return 1;
}

void sub_1008677E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1008677F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  void *v5[2];
  void *__p[2];
  __int128 v7;
  char v8;

  v4 = 0;
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)__p = 0u;
  v7 = 0u;
  v8 = 0;
  (*(void (**)(uint64_t, uint64_t, int *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, a2, &v4, a3, a4, 0);
  if (SHIBYTE(v7) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v5[0]);
}

void sub_100867868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1007217D0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10086787C(uint64_t a1, signed __int32 *a2, uint64_t a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  os_activity_scope_state_s state;
  uint64_t buf;
  _BYTE v29[20];
  __int16 v30;
  _QWORD *v31;
  __int16 v32;
  std::__shared_weak_count *v33;
  _QWORD **v34;
  _QWORD *v35[3];
  std::__shared_weak_count *v36;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102158238);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      buf = 68289794;
      *(_WORD *)v29 = 2082;
      *(_QWORD *)&v29[2] = "";
      *(_WORD *)&v29[10] = 2082;
      *(_QWORD *)&v29[12] = "activity";
      v30 = 2082;
      v31 = v10;
      v32 = 2050;
      v33 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", (uint8_t *)&buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v34 = v35;
      memset(v35, 0, sizeof(v35));
      v36 = 0;
      sub_1004A6D60((uint64_t)&buf, a2, (uint64_t)&v34);
      v14 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)&buf);
      v18 = v33;
      if (v33)
      {
        p_shared_owners = (unint64_t *)&v33->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v29, *(_QWORD **)&v29[8]);
      v21 = v36;
      if (v36)
      {
        v22 = (unint64_t *)&v36->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v34, v35[0]);
    }
    if (a4)
    {
      sub_100868B44(a3, &buf);
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)&buf);
      v24 = *(std::__shared_weak_count **)v29;
      if (*(_QWORD *)v29)
      {
        v25 = (unint64_t *)(*(_QWORD *)v29 + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_100868558();
    os_activity_scope_leave(&state);
  }
}

void sub_100867E98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_100867EE4(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102158238);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102158238);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLBacklightStateNotifier_Type::Notification, CLBacklightStateNotifier_Type::NotificationData, char, char>::listClients() [Notification_T = CLBacklightStateNotifier_Type::Notification, NotificationData_T = CLBacklightStateNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102158238);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102158238);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLBacklightStateNotifier_Type::Notification, CLBacklightStateNotifier_Type::NotificationData, char, char>::listClients() [Notification_T = CLBacklightStateNotifier_Type::Notification, NotificationData_T = CLBacklightStateNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_102158238);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102158238);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLBacklightStateNotifier_Type::Notification, CLBacklightStateNotifier_Type::NotificationData, char, char>::listClients() [Notification_T = CLBacklightStateNotifier_Type::Notification, NotificationData_T = CLBacklightStateNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_100868490(uint64_t a1)
{
  sub_1008691E4(a1);
  operator delete();
}

id sub_1008684B4(uint64_t a1, uint64_t a2, void *a3)
{
  int v3;
  id result;
  int v6;

  v3 = a2;
  result = sub_100868DC0(a3, a2);
  if (result)
  {
    v6 = v3;
    return (id)(*(uint64_t (**)(_QWORD, int *, id, _QWORD))(a1 + 24))(0, &v6, result, *(_QWORD *)(a1 + 32));
  }
  return result;
}

void sub_100868500(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_10086852C(id a1)
{
  qword_10229FC68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Eclipse");
}

void sub_100868558()
{
  operator new();
}

void sub_100868658()
{
  uint64_t v0;
  void **v1;

  if (*(char *)(v0 + 31) < 0)
    operator delete(*v1);
  operator delete();
}

void sub_100868694(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  id v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  const char *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  __int16 v54;
  int v55;
  uint8_t buf[4];
  _QWORD *v57;
  __int16 v58;
  int v59;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v51 = v9;
        v13 = sub_100868DC0(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, id, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 7);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v50 = v19;
              sub_100868A68(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v51 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 28);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 28);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v50 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102158238);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                v57 = v25;
                v58 = 1026;
                v59 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_102158238);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 7);
                v52 = 136446466;
                v53 = v45;
                v54 = 1026;
                v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                v48 = (uint8_t *)v47;
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLBacklightStateNotifier_Type::Notification, CLBacklightStateNotifier_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLBacklightStateNotifier_Type::Notification, NotificationData_T = CLBacklightStateNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v48 != buf)
                  free(v48);
              }
            }
          }
          while (v14 != v51 + 6);
        }
      }
    }
  }
}

_BYTE *sub_100868A68(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  int *v14;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    v9 = sub_100868DC0(a4, a2);
    v10 = *(_QWORD *)a3 + 80;
    v11 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v14 = (int *)(*(_QWORD *)a2 + 32);
    v12 = sub_1001AFE94(v11, v14, (uint64_t)&unk_101B9EB60, &v14);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v13);
  }
  return result;
}

_QWORD *sub_100868B44@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x58uLL);
  result = sub_100868B9C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100868B88(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100868B9C(_QWORD *a1, uint64_t a2)
{
  char v4;

  a1[2] = 0;
  *a1 = off_102158368;
  a1[1] = 0;
  sub_100868C6C((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_100868BE8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100868BFC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102158368;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100868C10(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102158368;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_100868C44(uint64_t a1)
{
  char v1;

  sub_100868D1C((uint64_t)&v1, a1 + 24);
}

_BYTE *sub_100868C6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v5;
  __int128 v6;
  _BYTE *result;
  __int128 v8;

  *(_DWORD *)a2 = *(_DWORD *)a3;
  v5 = (_BYTE *)(a2 + 8);
  if (*(char *)(a3 + 31) < 0)
  {
    sub_100115CE4(v5, *(void **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
    *(_OWORD *)v5 = v6;
  }
  result = (_BYTE *)(a2 + 32);
  if (*(char *)(a3 + 55) < 0)
  {
    result = sub_100115CE4(result, *(void **)(a3 + 32), *(_QWORD *)(a3 + 40));
  }
  else
  {
    v8 = *(_OWORD *)(a3 + 32);
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(a3 + 48);
    *(_OWORD *)result = v8;
  }
  *(_BYTE *)(a2 + 56) = *(_BYTE *)(a3 + 56);
  return result;
}

void sub_100868D00(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_100868D1C(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 55) < 0)
    operator delete(*(void **)(a2 + 32));
  if (*(char *)(a2 + 31) < 0)
    operator delete(*(void **)(a2 + 8));
}

uint64_t sub_100868D60(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
  {
    if (*(char *)(v1 + 55) < 0)
      operator delete(*(void **)(v1 + 32));
    if (*(char *)(v1 + 31) < 0)
      operator delete(*(void **)(v1 + 8));
    operator delete();
  }
  return result;
}

id sub_100868DC0(void *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = objc_opt_class(CLCppContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_100868E0C(a1);
  else
    return 0;
}

id sub_100868E0C(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021583A8);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BE4A55 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021583A8);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021583A8);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BE4A55 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021583A8);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLBacklightStateNotifier_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

void sub_1008691B8(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t sub_1008691E4(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = &off_1021583D8;
  v2 = (id *)(a1 + 8);
  objc_msgSend(*(id *)(a1 + 16), "forget:", *(_QWORD *)(a1 + 8));

  objc_msgSend(*v2, "invalidate");
  *v2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void sub_100869244()
{
  operator new();
}

void sub_100869344()
{
  uint64_t v0;
  void **v1;

  if (*(char *)(v0 + 31) < 0)
    operator delete(*v1);
  operator delete();
}

uint64_t sub_100869380(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
  {
    if (*(char *)(v1 + 55) < 0)
      operator delete(*(void **)(v1 + 32));
    if (*(char *)(v1 + 31) < 0)
      operator delete(*(void **)(v1 + 8));
    operator delete();
  }
  return result;
}

uint64_t sub_1008693E0()
{
  uint64_t result;

  result = sub_1001E4BF4();
  if ((result & 0x10) != 0)
    operator new();
  return result;
}

void sub_100869428()
{
  operator delete();
}

void sub_100869450(uint64_t a1)
{
  sub_1009BAC4C(a1, (uint64_t)"CLPressure", 2);
}

void sub_1008696A8()
{
  operator delete();
}

void sub_10086974C(uint64_t a1, int *a2, _OWORD *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLPressure::onBias");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102158488);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLPressure::onBias", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102158488);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLPressure::onBias\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100869B60(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100869904(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100869924(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  _BOOL8 v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  os_activity_scope_state_s state;
  char v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;

  CLProfilingIdentify("CLPressure::onMotionStateObserverNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102158488);
  v7 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
  if (v7)
  {
    v12 = 1;
    v9 = _os_activity_create((void *)&_mh_execute_header, "CL: CLPressure::onMotionStateObserverNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v9, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102158488);
    v10 = qword_1022A0228;
    v7 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
    if (v7)
    {
      *(_DWORD *)buf = 68289538;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2082;
      v18 = "activity";
      v19 = 2050;
      v20 = a4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLPressure::onMotionStateObserverNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v12 = 0;
  }
  sub_10086A8B4(v7, v8, a2, a3);
  if (v12)
    os_activity_scope_leave(&state);
}

void sub_100869AD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100869AF8(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10083D514(result);
    operator delete();
  }
  return result;
}

void sub_100869B34(uint64_t a1, _OWORD *a2)
{
  uint64_t v2;
  int v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = 0;
  sub_100869B60(v2, (uint64_t)a2, &v3, a2);
}

void sub_100869B60(uint64_t a1, uint64_t a2, int *a3, _OWORD *a4)
{
  NSObject *v7;
  NSObject *v8;
  int v9;
  int v10;
  const char *v11;
  char *v12;
  uint64_t v13;
  const char *v14;
  char *v15;
  uint64_t v16;
  _QWORD v17[5];
  _OWORD v18[2];
  _DWORD v19[4];
  _BYTE buf[1624];

  if (qword_10229FD30 != -1)
    dispatch_once(&qword_10229FD30, &stru_1021584A8);
  v7 = qword_10229FD38;
  if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Received Bias Notification", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD30 != -1)
      dispatch_once(&qword_10229FD30, &stru_1021584A8);
    LOWORD(v19[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD38, 2, "Received Bias Notification", v19, 2);
    v15 = (char *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLPressure::onBias(int, const CLPressureBias_Type::Notification &, const CLPressureBias_Type::NotificationData &)", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  if (*a3)
  {
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_1021584C8);
    v8 = qword_10229FD78;
    if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_ERROR))
    {
      v9 = *a3;
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Unexpected pressure bias notification.notification,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD70 != -1)
        dispatch_once(&qword_10229FD70, &stru_1021584C8);
      v10 = *a3;
      v19[0] = 67240192;
      v19[1] = v10;
      LODWORD(v16) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 16, "Unexpected pressure bias notification.notification,%{public}d", v19, v16);
      v12 = (char *)v11;
      sub_100512490("Generic", 1, 0, 0, "void CLPressure::onBias(int, const CLPressureBias_Type::Notification &, const CLPressureBias_Type::NotificationData &)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  else
  {
    *(_OWORD *)buf = *a4;
    *(_OWORD *)&buf[13] = *(_OWORD *)((char *)a4 + 13);
    v13 = sub_100127B9C();
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_100869F4C;
    v17[3] = &unk_102155F40;
    v17[4] = a1;
    v18[0] = *(_OWORD *)buf;
    *(_OWORD *)((char *)v18 + 13) = *(_OWORD *)&buf[13];
    sub_1000A57FC(v13, (uint64_t)v17);
  }
}

_QWORD *sub_100869EB4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_102158420;
  v2 = a1[17];
  a1[17] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_100261F44((uint64_t)(a1 + 15));
  v3 = a1[6];
  a1[6] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_100869AF8(a1 + 5, 0);
  return sub_1009BAD18(a1);
}

void sub_100869F28(_QWORD *a1)
{
  sub_100869EB4(a1);
  operator delete();
}

uint64_t sub_100869F4C(uint64_t result)
{
  uint64_t v1;
  __int128 v2;

  v1 = *(_QWORD *)(result + 32);
  v2 = *(_OWORD *)(result + 40);
  *(_OWORD *)(v1 + 89) = *(_OWORD *)(result + 53);
  *(_OWORD *)(v1 + 76) = v2;
  if (*(float *)(result + 52) != 3.4028e38 || *(float *)(result + 44) != 0.0 || *(float *)(result + 48) != 0.0)
    *(_BYTE *)(v1 + 57) = 1;
  return result;
}

uint64_t sub_100869F9C(uint64_t a1, float *a2)
{
  uint64_t result;
  void *v4;
  id v5;
  float v6;

  result = *(_QWORD *)(a1 + 120);
  if (result)
  {
    v4 = (void *)(*(uint64_t (**)(uint64_t, const __CFString *))(*(_QWORD *)result + 24))(result, CFSTR("AppleVoltageDictionary"));
    v5 = objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("PRESSURE_TEMP"));
    objc_msgSend(v5, "floatValue");
    *a2 = v6 / 100.0;

    return v5 != 0;
  }
  return result;
}

double sub_10086A010(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  NSObject *v5;
  uint64_t v6;
  double v7;
  NSObject *v9;
  uint64_t v11;
  const char *v12;
  uint8_t *v13;
  const char *v14;
  uint8_t *v15;
  int v16;
  uint64_t v17;
  uint8_t buf[4];
  uint64_t v19;

  if (a2 > 1)
  {
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_1021584C8);
    v9 = qword_10229FD78;
    if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      LODWORD(v19) = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Unrecognized pressure notification %{public}d", buf, 8u);
    }
    v7 = 0.0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD70 != -1)
        dispatch_once(&qword_10229FD70, &stru_1021584C8);
      v16 = 67240192;
      LODWORD(v17) = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 17, "Unrecognized pressure notification %{public}d", &v16, 8);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 0, "virtual CFTimeInterval CLPressure::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
  }
  else
  {
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_1021584C8);
    v5 = qword_10229FD78;
    if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_INFO))
    {
      v6 = *a3;
      *(_DWORD *)buf = 134349056;
      v19 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Setting pressure data update interval to %{public}f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD70 != -1)
        dispatch_once(&qword_10229FD70, &stru_1021584C8);
      v11 = *a3;
      v16 = 134349056;
      v17 = v11;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 1, "Setting pressure data update interval to %{public}f", &v16, 12);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "virtual CFTimeInterval CLPressure::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    return sub_10086A330(a1);
  }
  return v7;
}

double sub_10086A330(uint64_t a1)
{
  int v2;
  char v3;
  double v4;
  char v5;
  double v6;
  BOOL v7;
  double v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  NSObject *v20;
  const char *v22;
  uint8_t *v23;
  uint64_t v24;
  char v25;
  int v26;
  uint64_t v27;
  uint8_t buf[1640];

  v2 = 0;
  v3 = 1;
  v4 = 0.0;
  do
  {
    v5 = v3;
    v6 = sub_1009BB6A0(a1, v2);
    if (v4 == 0.0 || (v6 > 0.0 ? (v7 = v6 < v4) : (v7 = 0), v7))
      v4 = v6;
    v3 = 0;
    v2 = 1;
  }
  while ((v5 & 1) != 0);
  *(_QWORD *)(a1 + 64) = 0;
  if (*(_QWORD *)(a1 + 40))
  {
    v8 = sub_1009BB6A0(a1, 1);
    v9 = *(_QWORD *)(a1 + 40);
    if (v8 == 0.0)
      sub_10083DA84(v9);
    else
      sub_10083D518(v9);
  }
  if (*(_QWORD *)(a1 + 48))
  {
    v10 = sub_1009BB6A0(a1, 1);
    v11 = *(_QWORD *)(a1 + 48);
    v13 = *(_QWORD *)(v11 + 8);
    v12 = *(void **)(v11 + 16);
    if (v10 == 0.0)
      objc_msgSend(v12, "unregister:forNotification:", v13, 0);
    else
      objc_msgSend(v12, "register:forNotification:registrationInfo:", v13, 0, 0);
  }
  v14 = (uint64_t *)(a1 + 120);
  if (!*(_QWORD *)(a1 + 120) && (sub_1001E4BF4() & 0x10) != 0)
  {
    v15 = (uint64_t *)sub_100A07FA0();
    v24 = 0x3100000020;
    v25 = 0;
    sub_1018E4078(v15, (uint64_t)&v24, (uint64_t *)buf);
    sub_1002B7674(a1 + 120, (__int128 *)buf);
    v16 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v17 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    sub_100A0A4BC(*(uint64_t **)(a1 + 120), (uint64_t)sub_10086A630, a1);
  }
  sub_10006B4E0(*v14, v4);
  v19 = sub_10006BC9C(*v14, v4);
  if (qword_10229FD70 != -1)
    dispatch_once(&qword_10229FD70, &stru_1021584C8);
  v20 = qword_10229FD78;
  if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134349056;
    *(_QWORD *)&buf[4] = v19;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Setting pressure batch interval to: %{public}ld us", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_1021584C8);
    v26 = 134349056;
    v27 = v19;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 1, "Setting pressure batch interval to: %{public}ld us", &v26, 12);
    v23 = (uint8_t *)v22;
    sub_100512490("Generic", 1, 0, 2, "CFTimeInterval CLPressure::setPressureUpdateInterval()", "%s\n", v22);
    if (v23 != buf)
      free(v23);
  }
  return v4;
}

void sub_10086A630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  float FloatValue;
  unint64_t TimeStamp;
  double v8;
  double v9;

  if (IOHIDEventGetType(a4) == 31)
  {
    FloatValue = IOHIDEventGetFloatValue(a4, 2031616);
    *(float *)&v9 = FloatValue;
    TimeStamp = IOHIDEventGetTimeStamp(a4);
    v8 = sub_100127828(TimeStamp);
    sub_10086AAC0(a1, &v9, &v8);
  }
}

void sub_10086A69C(uint64_t a1, int a2)
{
  uint64_t *v4;
  NSObject *v5;
  double v6;
  double v7;
  const char *v8;
  uint8_t *v9;
  uint64_t v10;
  int v11;
  double v12;
  uint8_t buf[4];
  _BYTE v14[12];

  if (sub_100760428())
  {
    v10 = 0x3FA0E5604189374CLL;
    if (a2)
      v4 = &v10;
    else
      v4 = (uint64_t *)&unk_101BE4A98;
    sub_1018BEA14(buf, "PressureTempMaxUpdateInterval", v4, 0);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)&v14[4];
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_1021584C8);
    v5 = qword_10229FD78;
    if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_INFO))
    {
      v6 = *(double *)(a1 + 112) * 1000.0;
      *(_DWORD *)buf = 134349056;
      *(double *)v14 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Temperature update interval set to %{public}f ms", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD70 != -1)
        dispatch_once(&qword_10229FD70, &stru_1021584C8);
      v7 = *(double *)(a1 + 112) * 1000.0;
      v11 = 134349056;
      v12 = v7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 1, "Temperature update interval set to %{public}f ms", &v11, 12);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLPressure::setFastTemperatureUpdateInterval(BOOL)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
}

void sub_10086A8B4(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  uint64_t v12;
  uint8_t buf[4];
  uint64_t v14;

  if (sub_100760428() && !*a3)
  {
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_1021584C8);
    v6 = qword_10229FD78;
    if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_DEBUG))
    {
      v7 = *(unsigned int *)(a4 + 8);
      *(_DWORD *)buf = 134349056;
      v14 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Notified of workout event type %{public}ld", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD70 != -1)
        dispatch_once(&qword_10229FD70, &stru_1021584C8);
      v8 = *(unsigned int *)(a4 + 8);
      v11 = 134349056;
      v12 = v8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 2, "Notified of workout event type %{public}ld", &v11, 12);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLPressure::onMotionStateObserverNotification(int, const CLMotionStateObserver_Type::Notification &, const CLMotionStateObserver_Type::NotificationData &)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    if (qword_102304F08 != -1)
      dispatch_once(&qword_102304F08, &stru_1021583F0);
    if (qword_102310CF0)
      sub_10086A69C(qword_102310CF0, *(_DWORD *)(a4 + 8) != 0);
  }
}

void sub_10086AAC0(uint64_t a1, double *a2, double *a3)
{
  double v6;
  double v7;
  double v8;
  int v9;
  NSObject *v10;
  int v11;
  CFAbsoluteTime Current;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  const char *v17;
  uint8_t *v18;
  const char *v19;
  uint8_t *v20;
  double v21;
  double v22;
  double v23;
  int v24;
  const char *v25;
  __int16 v26;
  double v27;
  __int16 v28;
  double v29;
  __int16 v30;
  double v31;
  __int16 v32;
  double v33;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  double v37;
  __int16 v38;
  double v39;
  __int16 v40;
  double v41;
  __int16 v42;
  double v43;
  CFAbsoluteTime v44;
  uint64_t v45;
  char v46;

  if (sub_1009BB6A0(a1, 0) != 0.0 || sub_1009BB6A0(a1, 1) != 0.0)
  {
    v6 = *a3;
    v22 = *a3;
    v7 = *a2;
    v23 = *a2;
    v8 = *(double *)(a1 + 64);
    if (v8 == 0.0 || v6 - v8 > *(double *)(a1 + 112))
    {
      v9 = sub_100869F9C(a1, (float *)(a1 + 72));
      if (qword_10229FD70 != -1)
        dispatch_once(&qword_10229FD70, &stru_1021584C8);
      v10 = qword_10229FD78;
      if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v35) = v9;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Pressure Temperature=%d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD70 != -1)
          dispatch_once(&qword_10229FD70, &stru_1021584C8);
        v24 = 67109120;
        LODWORD(v25) = v9;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 2, "Pressure Temperature=%d", &v24);
        v20 = (uint8_t *)v19;
        sub_100512490("Generic", 1, 0, 2, "void CLPressure::onPressureData(const CLMotionTypePressure &, const CLMotionTypeTimestamp &)", "%s\n", v19);
        if (v20 != buf)
          free(v20);
      }
      *(double *)(a1 + 64) = *a3;
    }
    v11 = *(_DWORD *)(a1 + 72);
    HIDWORD(v23) = v11;
    if (*(_BYTE *)(a1 + 56))
    {
      sub_1015EB864(buf);
      sub_101603660((uint64_t)buf);
      Current = CFAbsoluteTimeGetCurrent();
      v46 |= 1u;
      v44 = Current;
      sub_10166BEA4(v45);
      v13 = *(_QWORD *)(v45 + 8);
      *(_BYTE *)(v13 + 24) |= 1u;
      *(double *)(v13 + 8) = v6;
      v14 = *(_QWORD *)(v45 + 8);
      *(_BYTE *)(v14 + 24) |= 2u;
      *(_DWORD *)(v14 + 16) = LODWORD(v7);
      v15 = *(_QWORD *)(v45 + 8);
      *(_BYTE *)(v15 + 24) |= 4u;
      *(_DWORD *)(v15 + 20) = v11;
      if (qword_1023118A8 != -1)
        dispatch_once(&qword_1023118A8, &stru_1021584E8);
      if (qword_1023118B0)
        sub_101888B64(qword_1023118B0, (uint64_t)buf);
      sub_1015EE304((PB::Base *)buf);
    }
    if (sub_1009BB6A0(a1, 0) != 0.0)
      sub_10012AC18(a1, 0, (uint64_t)&v22, 16);
    if (*(_BYTE *)(a1 + 57))
      *(float *)&v23 = *(float *)&v23
                     + (float)((float)-(float)(*(float *)(a1 + 84)
                                             - (float)(*(float *)(a1 + 80)
                                                     * fminf(*(float *)(a1 + 88), *((float *)&v23 + 1))))
                             / -1000.0);
    if (sub_1009BB6A0(a1, 1) != 0.0)
      sub_10012AC18(a1, 1, (uint64_t)&v22, 16);
    if (qword_10229FD30 != -1)
      dispatch_once(&qword_10229FD30, &stru_1021584A8);
    v16 = qword_10229FD38;
    if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136316162;
      v35 = "Pressure";
      v36 = 2048;
      v37 = *(float *)&v23;
      v38 = 2048;
      v39 = *((float *)&v23 + 1);
      v40 = 2048;
      v41 = v22;
      v42 = 2048;
      v43 = *(float *)&v7;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "Type,%s,pressure,%.6f,temperature,%.3f,timestamp,%f,rawPressure,%.6f", buf, 0x34u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD30 != -1)
        dispatch_once(&qword_10229FD30, &stru_1021584A8);
      v24 = 136316162;
      v25 = "Pressure";
      v26 = 2048;
      v27 = *(float *)&v23;
      v28 = 2048;
      v29 = *((float *)&v23 + 1);
      v30 = 2048;
      v31 = v22;
      v32 = 2048;
      v33 = *(float *)&v7;
      LODWORD(v21) = 52;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD38, 2, "Type,%s,pressure,%.6f,temperature,%.3f,timestamp,%f,rawPressure,%.6f", (const char *)&v24, v21, v22, v23);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "void CLPressure::onPressureData(const CLMotionTypePressure &, const CLMotionTypeTimestamp &)", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
  }
}

void sub_10086B00C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_10086B02C(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_10086B058(id a1)
{
  qword_10229FD38 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Sensors");
}

void sub_10086B084(id a1)
{
  qword_10229FD78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pressure");
}

uint64_t sub_10086B0B4()
{
  unsigned __int8 v0;
  uint64_t result;

  v0 = atomic_load((unsigned __int8 *)&qword_102304F18);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_102304F18))
  {
    __cxa_atexit((void (*)(void *))sub_1004BAAE8, &qword_102304F10, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102304F18);
  }
  result = qword_102304F10;
  if (!qword_102304F10)
    operator new();
  return result;
}

uint64_t sub_10086B16C(unint64_t a1, _DWORD *a2)
{
  unint64_t v3;
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  int v8;
  unint64_t v9;
  uint8_t buf[4];
  unint64_t v11;

  v3 = a1;
  if (a1 >= 3)
  {
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_102158508);
    v4 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      v11 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "CLVPC,fromCLARSessionState,Received unhandled ar session state: %lu", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_102158508);
      v8 = 134217984;
      v9 = v3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVPC,fromCLARSessionState,Received unhandled ar session state: %lu", &v8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromCLARSessionState(const _CLARSessionState, CLP::LogEntry::Vision::ARSessionState &)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
    LODWORD(v3) = -1;
  }
  *a2 = v3;
  return 1;
}

void sub_10086B32C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_10086B338(void *a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  double v7;
  _BOOL4 v8;
  uint64_t v9;
  double v10;
  _BOOL4 v11;
  uint8x8_t v12;
  uint32x4_t *v13;
  __int32 v14;
  uint32x4_t v15;
  __int32 v16;
  __int32 v17;
  std::string *v18;
  uint8x8_t v19;
  uint32x4_t *v20;
  __int32 v21;
  uint32x4_t v22;
  std::string *v23;
  int *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  int v29;
  int *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  NSObject *v42;
  const char *v43;
  char *v44;
  NSObject *v45;
  const char *v46;
  uint64_t v47;
  __int32 v48;
  __int32 v49;
  unsigned __int8 v50;
  unsigned __int8 v51;
  unsigned __int8 v52;
  int v53;
  _BYTE v54[12];
  __int32 v55;
  unsigned __int8 v56;
  unsigned __int8 v57;
  unsigned __int8 v58;
  _BYTE __str[32];
  __int128 v60;
  __int128 v61;

  if (!a1)
  {
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_102158508);
    v42 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__str = 134283521;
      *(_QWORD *)&__str[4] = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "CLVPC,fromCLVIOEstimation,Invalid input pointer,estimation,%{private}p", __str, 0xCu);
    }
    result = sub_1001BFF7C(115, 0);
    if (!(_DWORD)result)
      return result;
    bzero(__str, 0x65CuLL);
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_102158508);
    *(_DWORD *)v54 = 134283521;
    *(_QWORD *)&v54[4] = 0;
    _os_log_send_and_compose_impl(2, 0, __str, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVPC,fromCLVIOEstimation,Invalid input pointer,estimation,%{private}p", v54, 12);
    v44 = (char *)v43;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromCLVIOEstimation(const _CLVIOEstimation *const, CLP::LogEntry::Vision::VIOEstimation *)", "%s\n", v43);
LABEL_47:
    if (v44 != __str)
      free(v44);
    return 0;
  }
  if (a2)
  {
    v53 = 0;
    sub_10086BB30(objc_msgSend(a1, "trackingState"), &v53);
    v4 = v53;
    if (!sub_100B31878(v53))
      __assert_rtn("set_tracking_state", "CLPVisionEvent.pb.h", 3498, "::CLP::LogEntry::Vision::VIOTrackingState_IsValid(value)");
    v5 = *(_DWORD *)(a2 + 88);
    *(_DWORD *)(a2 + 80) = v4;
    *(_DWORD *)(a2 + 88) = v5 | 3;
    v6 = *(_QWORD *)(a2 + 8);
    if (!v6)
      operator new();
    objc_msgSend(a1, "originTimestamp");
    v8 = sub_10086BCFC(v6, v7);
    *(_DWORD *)(a2 + 88) |= 4u;
    v9 = *(_QWORD *)(a2 + 16);
    if (!v9)
      operator new();
    objc_msgSend(a1, "timestamp");
    v11 = sub_10086BCFC(v9, v10);
    objc_msgSend(a1, "inertialStateInfo");
    *(_DWORD *)(a2 + 88) |= 8u;
    v13 = *(uint32x4_t **)(a2 + 24);
    if (!v13)
      operator new();
    v14 = v13[4].i32[0];
    v13->i64[1] = *(_QWORD *)v54;
    v12.i32[0] = *(_DWORD *)&v54[8];
    v15 = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v12));
    v13[1] = v15;
    v15.i32[0] = v55;
    v13[2] = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v15.i8));
    v16 = v57;
    v13[3].i32[0] = v56;
    v13[3].i32[1] = v16;
    v17 = v58;
    v13[4].i32[0] = v14 | 0xFFF;
    v13[3].i32[2] = v17;
    if (objc_msgSend(a1, "inertialState"))
    {
      sub_10035ACF4(__str, objc_msgSend(objc_msgSend(a1, "inertialState"), "bytes"), (size_t)objc_msgSend(objc_msgSend(a1, "inertialState"), "length"));
      *(_DWORD *)(a2 + 88) |= 0x10u;
      v18 = *(std::string **)(a2 + 32);
      if (v18 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      std::string::operator=(v18, (const std::string *)__str);
      if ((__str[23] & 0x80000000) != 0)
        operator delete(*(void **)__str);
    }
    objc_msgSend(a1, "inertialCovarianceInfo");
    *(_DWORD *)(a2 + 88) |= 0x20u;
    v20 = *(uint32x4_t **)(a2 + 40);
    if (!v20)
      operator new();
    v21 = v20[4].i32[0];
    v20->i64[1] = v47;
    v19.i32[0] = v48;
    v22 = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v19));
    v20[1] = v22;
    v22.i32[0] = v49;
    v20[2] = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v22.i8));
    v20[3].i32[0] = v50;
    v20[3].i32[1] = v51;
    v20[4].i32[0] = v21 | 0xFFF;
    v20[3].i32[2] = v52;
    if (objc_msgSend(a1, "inertialCovariance"))
    {
      sub_10035ACF4(__str, objc_msgSend(objc_msgSend(a1, "inertialCovariance"), "bytes"), (size_t)objc_msgSend(objc_msgSend(a1, "inertialCovariance"), "length"));
      *(_DWORD *)(a2 + 88) |= 0x40u;
      v23 = *(std::string **)(a2 + 48);
      if (v23 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      std::string::operator=(v23, (const std::string *)__str);
      if ((__str[23] & 0x80000000) != 0)
        operator delete(*(void **)__str);
    }
    *(_DWORD *)(a2 + 88) |= 0x80u;
    v24 = *(int **)(a2 + 56);
    if (!v24)
      operator new();
    objc_msgSend(a1, "cameraPose");
    *(_OWORD *)__str = v25;
    *(_OWORD *)&__str[16] = v26;
    v60 = v27;
    v61 = v28;
    v29 = sub_10086C2F8((uint64_t)__str, v24);
    *(_DWORD *)(a2 + 88) |= 0x100u;
    v30 = *(int **)(a2 + 64);
    if (!v30)
      operator new();
    objc_msgSend(a1, "cameraIntrinsics");
    *(_DWORD *)&__str[8] = v31;
    *(_DWORD *)&__str[24] = v32;
    *(_QWORD *)__str = v33;
    *(_QWORD *)&__str[16] = v34;
    DWORD2(v60) = v35;
    *(_QWORD *)&v60 = v36;
    v37 = sub_10086C704((uint64_t)__str, v30);
    objc_msgSend(a1, "cameraImageResolution");
    *(_DWORD *)(a2 + 88) |= 0x200u;
    v40 = *(_QWORD *)(a2 + 72);
    if (!v40)
      operator new();
    *(_DWORD *)(v40 + 28) |= 3u;
    result = (v8 && v11) & v29 & v37;
    *(_QWORD *)(v40 + 8) = v38;
    *(_QWORD *)(v40 + 16) = v39;
    return result;
  }
  if (qword_1022A00C0 != -1)
    dispatch_once(&qword_1022A00C0, &stru_102158508);
  v45 = qword_1022A00C8;
  if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__str = 134283521;
    *(_QWORD *)&__str[4] = 0;
    _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_ERROR, "CLVPC,fromCLVIOEstimation,Invalid output pointer,pEstimationMsg,%{private}p", __str, 0xCu);
  }
  result = sub_1001BFF7C(115, 0);
  if ((_DWORD)result)
  {
    bzero(__str, 0x65CuLL);
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_102158508);
    *(_DWORD *)v54 = 134283521;
    *(_QWORD *)&v54[4] = 0;
    _os_log_send_and_compose_impl(2, 0, __str, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVPC,fromCLVIOEstimation,Invalid output pointer,pEstimationMsg,%{private}p", v54, 12);
    v44 = (char *)v46;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromCLVIOEstimation(const _CLVIOEstimation *const, CLP::LogEntry::Vision::VIOEstimation *)", "%s\n", v46);
    goto LABEL_47;
  }
  return result;
}

void sub_10086BA88(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    operator delete();
  _Unwind_Resume(exception_object);
}

uint64_t sub_10086BB30(unsigned int a1, int *a2)
{
  int v3;
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  v3 = a1;
  if (a1 >= 5)
  {
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_102158508);
    v4 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v10 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "CLVPC,fromCV3DVIOTrackingState,Received unhandled vio tracking state: %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_102158508);
      v8[0] = 67109120;
      v8[1] = v3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVPC,fromCV3DVIOTrackingState,Received unhandled vio tracking state: %d", v8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromCV3DVIOTrackingState(const CV3DVIOTrackingState, CLP::LogEntry::Vision::VIOTrackingState &)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
    v3 = -1;
  }
  *a2 = v3;
  return 1;
}

void sub_10086BCF0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

BOOL sub_10086BCFC(uint64_t a1, double a2)
{
  NSObject *v5;
  _BOOL8 result;
  const char *v7;
  uint8_t *v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  _BOOL4 v16;
  uint64_t v17;
  NSObject *v18;
  const char *v19;
  uint8_t *v20;
  const char *v21;
  uint8_t *v22;
  uint64_t v23;
  _WORD v24[8];
  uint64_t v25;
  double v26;
  _BYTE v27[12];
  uint8_t buf[4];
  double v29;

  v26 = a2;
  if (a1)
  {
    *(_DWORD *)(a1 + 36) |= 2u;
    *(double *)(a1 + 16) = a2;
    if (a2 >= 0.0 && (*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    {
      *(_QWORD *)v27 = 0;
      v11 = sub_10086B0B4();
      v12 = sub_10010EA68(v11, &v26, (double *)v27);
      if (v12)
      {
        v13 = *(_QWORD *)v27;
        *(_DWORD *)(a1 + 36) |= 1u;
        *(_QWORD *)(a1 + 8) = v13;
      }
      else
      {
        if (qword_1022A00C0 != -1)
          dispatch_once(&qword_1022A00C0, &stru_102158508);
        v14 = qword_1022A00C8;
        if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "CLVPC,fromMachAbsoluteTime,convertMachAbsoluteToCFAbsolute_RealTime failed", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00C0 != -1)
            dispatch_once(&qword_1022A00C0, &stru_102158508);
          LOWORD(v25) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVPC,fromMachAbsoluteTime,convertMachAbsoluteToCFAbsolute_RealTime failed", &v25, 2);
          v20 = (uint8_t *)v19;
          sub_100512490("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromMachAbsoluteTime(const CFTimeInterval, CLP::LogEntry::Vision::TimeStamp *)", "%s\n", v19);
          if (v20 != buf)
            free(v20);
        }
      }
      v25 = 0;
      v15 = sub_10086B0B4();
      v16 = sub_10010F7EC(v15, &v26, (double *)&v25);
      if (v16)
      {
        v17 = v25;
        *(_DWORD *)(a1 + 36) |= 4u;
        *(_QWORD *)(a1 + 24) = v17;
      }
      else
      {
        if (qword_1022A00C0 != -1)
          dispatch_once(&qword_1022A00C0, &stru_102158508);
        v18 = qword_1022A00C8;
        if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "CLVPC,fromMachAbsoluteTime,convertMachAbsoluteToMachContinuous_RealTime failed", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00C0 != -1)
            dispatch_once(&qword_1022A00C0, &stru_102158508);
          v24[0] = 0;
          LODWORD(v23) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVPC,fromMachAbsoluteTime,convertMachAbsoluteToMachContinuous_RealTime failed", v24, v23);
          v22 = (uint8_t *)v21;
          sub_100512490("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromMachAbsoluteTime(const CFTimeInterval, CLP::LogEntry::Vision::TimeStamp *)", "%s\n", v21);
          if (v22 != buf)
            free(v22);
        }
      }
      return v12 && v16;
    }
    else
    {
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_102158508);
      v5 = qword_1022A00C8;
      if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134349056;
        v29 = a2;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "CLVPC,fromMachAbsoluteTime,Invalid input value,machAbsoluteTime,%{public}.3lf", buf, 0xCu);
      }
      result = sub_1001BFF7C(115, 0);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00C0 != -1)
          dispatch_once(&qword_1022A00C0, &stru_102158508);
        *(_DWORD *)v27 = 134349056;
        *(double *)&v27[4] = v26;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVPC,fromMachAbsoluteTime,Invalid input value,machAbsoluteTime,%{public}.3lf", v27, 12);
        v8 = (uint8_t *)v7;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromMachAbsoluteTime(const CFTimeInterval, CLP::LogEntry::Vision::TimeStamp *)", "%s\n", v7);
LABEL_22:
        if (v8 != buf)
          free(v8);
        return 0;
      }
    }
  }
  else
  {
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_102158508);
    v9 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134283521;
      v29 = 0.0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "CLVPC,fromMachAbsoluteTime,Invalid output pointer,pTimeStampMsg,%{private}p", buf, 0xCu);
    }
    result = sub_1001BFF7C(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_102158508);
      *(_DWORD *)v27 = 134283521;
      *(_QWORD *)&v27[4] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVPC,fromMachAbsoluteTime,Invalid output pointer,pTimeStampMsg,%{private}p", v27, 12);
      v8 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromMachAbsoluteTime(const CFTimeInterval, CLP::LogEntry::Vision::TimeStamp *)", "%s\n", v10);
      goto LABEL_22;
    }
  }
  return result;
}

void sub_10086C2EC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_10086C2F8(uint64_t a1, int *a2)
{
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  _BOOL4 v12;
  NSObject *v13;
  const char *v14;
  uint8_t *v15;
  NSObject *v16;
  const char *v18;
  uint8_t *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint8_t buf[4];
  uint64_t v24;

  if (a2)
  {
    v4 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 2);
    if (a2[4] >= 1)
    {
      v5 = 0;
      do
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v4 + 8 * v5) + 32))(*(_QWORD *)(*(_QWORD *)v4
                                                                                                  + 8 * v5));
        ++v5;
      }
      while (v5 < a2[4]);
    }
    a2[4] = 0;
    wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v4, 4);
    v6 = 0;
    LODWORD(v7) = 1;
    do
    {
      v8 = a2[5];
      v9 = a2[4];
      if ((int)v9 >= v8)
      {
        if (v8 == a2[6])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v4, v8 + 1);
          v8 = a2[5];
        }
        a2[5] = v8 + 1;
        sub_100871A70();
      }
      v10 = *((_QWORD *)a2 + 1);
      a2[4] = v9 + 1;
      v11 = sub_10087157C(a1, *(_QWORD *)(v10 + 8 * v9));
      v12 = v11;
      if (!v11)
      {
        if (qword_1022A00C0 != -1)
          dispatch_once(&qword_1022A00C0, &stru_102158508);
        v13 = qword_1022A00C8;
        if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67240192;
          LODWORD(v24) = v6;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "CLVPC,fromSimdFloat4x4,fromSimdFloat4(matrix.columns[%{public}d]) failed", buf, 8u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00C0 != -1)
            dispatch_once(&qword_1022A00C0, &stru_102158508);
          v21 = 67240192;
          LODWORD(v22) = v6;
          LODWORD(v20) = 8;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVPC,fromSimdFloat4x4,fromSimdFloat4(matrix.columns[%{public}d]) failed", &v21, v20);
          v15 = (uint8_t *)v14;
          sub_100512490("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromSimdFloat4x4(const simd_float4x4 &, CLP::LogEntry::Vision::simd_floatMxN *)", "%s\n", v14);
          if (v15 != buf)
            free(v15);
        }
      }
      v7 = v7 & v12;
      ++v6;
      a1 += 16;
    }
    while (v6 != 4);
  }
  else
  {
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_102158508);
    v16 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134283521;
      v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "CLVPC,fromSimdFloat4x4,Invalid output pointer,pMatrixMsg,%{private}p", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_102158508);
      v21 = 134283521;
      v22 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVPC,fromSimdFloat4x4,Invalid output pointer,pMatrixMsg,%{private}p", &v21, 12);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromSimdFloat4x4(const simd_float4x4 &, CLP::LogEntry::Vision::simd_floatMxN *)", "%s\n", v18);
      if (v19 != buf)
        free(v19);
    }
    return 0;
  }
  return v7;
}

void sub_10086C6EC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_10086C704(uint64_t a1, int *a2)
{
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  _BOOL4 v12;
  NSObject *v13;
  const char *v14;
  uint8_t *v15;
  NSObject *v16;
  const char *v18;
  uint8_t *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint8_t buf[4];
  uint64_t v24;

  if (a2)
  {
    v4 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 2);
    if (a2[4] >= 1)
    {
      v5 = 0;
      do
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v4 + 8 * v5) + 32))(*(_QWORD *)(*(_QWORD *)v4
                                                                                                  + 8 * v5));
        ++v5;
      }
      while (v5 < a2[4]);
    }
    a2[4] = 0;
    wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v4, 3);
    v6 = 0;
    LODWORD(v7) = 1;
    do
    {
      v8 = a2[5];
      v9 = a2[4];
      if ((int)v9 >= v8)
      {
        if (v8 == a2[6])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v4, v8 + 1);
          v8 = a2[5];
        }
        a2[5] = v8 + 1;
        sub_100871A70();
      }
      v10 = *((_QWORD *)a2 + 1);
      a2[4] = v9 + 1;
      v11 = sub_100871348(a1, *(_QWORD *)(v10 + 8 * v9));
      v12 = v11;
      if (!v11)
      {
        if (qword_1022A00C0 != -1)
          dispatch_once(&qword_1022A00C0, &stru_102158508);
        v13 = qword_1022A00C8;
        if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67240192;
          LODWORD(v24) = v6;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "CLVPC,fromSimdFloat3x3,fromSimdFloat3(matrix.columns[%{public}d]) failed", buf, 8u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00C0 != -1)
            dispatch_once(&qword_1022A00C0, &stru_102158508);
          v21 = 67240192;
          LODWORD(v22) = v6;
          LODWORD(v20) = 8;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVPC,fromSimdFloat3x3,fromSimdFloat3(matrix.columns[%{public}d]) failed", &v21, v20);
          v15 = (uint8_t *)v14;
          sub_100512490("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromSimdFloat3x3(const simd_float3x3 &, CLP::LogEntry::Vision::simd_floatMxN *)", "%s\n", v14);
          if (v15 != buf)
            free(v15);
        }
      }
      v7 = v7 & v12;
      ++v6;
      a1 += 16;
    }
    while (v6 != 3);
  }
  else
  {
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_102158508);
    v16 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134283521;
      v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "CLVPC,fromSimdFloat3x3,Invalid output pointer,pMatrixMsg,%{private}p", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_102158508);
      v21 = 134283521;
      v22 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVPC,fromSimdFloat3x3,Invalid output pointer,pMatrixMsg,%{private}p", &v21, 12);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromSimdFloat3x3(const simd_float3x3 &, CLP::LogEntry::Vision::simd_floatMxN *)", "%s\n", v18);
      if (v19 != buf)
        free(v19);
    }
    return 0;
  }
  return v7;
}

void sub_10086CAF8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_10086CB10(void *a1, uint64_t a2)
{
  uint64_t v4;
  double v5;
  _BOOL4 v6;
  uint64_t v7;
  _BOOL4 v8;
  int *v9;
  int v10;
  int *v11;
  unsigned int v12;
  uint64_t result;
  int v14;
  NSObject *v15;
  const char *v16;
  uint8_t *v17;
  NSObject *v18;
  const char *v19;
  int v20;
  uint64_t v21;
  uint8_t buf[4];
  uint64_t v23;

  if (!a1)
  {
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_102158508);
    v15 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134283521;
      v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "CLVPC,fromCLVLLocalizationResult,Invalid input pointer,localizationResult,%{private}p", buf, 0xCu);
    }
    result = sub_1001BFF7C(115, 0);
    if (!(_DWORD)result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_102158508);
    v20 = 134283521;
    v21 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVPC,fromCLVLLocalizationResult,Invalid input pointer,localizationResult,%{private}p", &v20, 12);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromCLVLLocalizationResult(const _CLVLLocalizationResult *const, CLP::LogEntry::Vision::VLLocalizationResult *)", "%s\n", v16);
LABEL_29:
    if (v17 != buf)
      free(v17);
    return 0;
  }
  if (a2)
  {
    *(_DWORD *)(a2 + 56) |= 1u;
    v4 = *(_QWORD *)(a2 + 8);
    if (!v4)
      operator new();
    objc_msgSend(a1, "timestamp");
    v6 = sub_10086BCFC(v4, v5);
    *(_DWORD *)(a2 + 56) |= 2u;
    v7 = *(_QWORD *)(a2 + 16);
    if (!v7)
      operator new();
    objc_msgSend(a1, "location");
    v8 = sub_10086CFFC((uint64_t)buf, v7);
    *(_DWORD *)(a2 + 56) |= 4u;
    v9 = *(int **)(a2 + 24);
    if (!v9)
      operator new();
    objc_msgSend(a1, "transform");
    v10 = sub_10086D258((uint64_t)buf, v9);
    *(_DWORD *)(a2 + 56) |= 8u;
    v11 = *(int **)(a2 + 32);
    if (!v11)
      operator new();
    objc_msgSend(a1, "covariance");
    v12 = sub_10086D664((uint64_t)buf, v11);
    objc_msgSend(a1, "confidence");
    result = (v6 && v8) & v10 & v12;
    *(_DWORD *)(a2 + 56) |= 0x10u;
    *(_DWORD *)(a2 + 48) = v14;
    return result;
  }
  if (qword_1022A00C0 != -1)
    dispatch_once(&qword_1022A00C0, &stru_102158508);
  v18 = qword_1022A00C8;
  if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134283521;
    v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "CLVPC,fromCLVLLocalizationResult,Invalid output pointer,pLocalizationResultMsg,%{private}p", buf, 0xCu);
  }
  result = sub_1001BFF7C(115, 0);
  if ((_DWORD)result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_102158508);
    v20 = 134283521;
    v21 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVPC,fromCLVLLocalizationResult,Invalid output pointer,pLocalizationResultMsg,%{private}p", &v20, 12);
    v17 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromCLVLLocalizationResult(const _CLVLLocalizationResult *const, CLP::LogEntry::Vision::VLLocalizationResult *)", "%s\n", v19);
    goto LABEL_29;
  }
  return result;
}

void sub_10086CF78(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    operator delete();
  _Unwind_Resume(exception_object);
}

BOOL sub_10086CFFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  uint64_t v11;
  uint8_t buf[4];
  uint64_t v13;

  if (a2)
  {
    *(_DWORD *)(a2 + 28) |= 1u;
    v4 = *(_QWORD *)(a2 + 8);
    if (!v4)
      operator new();
    result = sub_10086DF28((_OWORD *)a1, v4);
    v6 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)(a2 + 28) |= 2u;
    *(_QWORD *)(a2 + 16) = v6;
  }
  else
  {
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_102158508);
    v7 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134283521;
      v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "CLVPC,fromVLLocation,Invalid output pointer,pLocationMsg,%{private}p", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_102158508);
      v10 = 134283521;
      v11 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVPC,fromVLLocation,Invalid output pointer,pLocationMsg,%{private}p", &v10, 12);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromVLLocation(const VLLocation &, CLP::LogEntry::Vision::VLLocation *)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    return 0;
  }
  return result;
}

void sub_10086D21C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    operator delete();
  _Unwind_Resume(exception_object);
}

uint64_t sub_10086D258(uint64_t a1, int *a2)
{
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  _BOOL4 v12;
  NSObject *v13;
  const char *v14;
  uint8_t *v15;
  NSObject *v16;
  const char *v18;
  uint8_t *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint8_t buf[4];
  uint64_t v24;

  if (a2)
  {
    v4 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 2);
    if (a2[4] >= 1)
    {
      v5 = 0;
      do
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v4 + 8 * v5) + 32))(*(_QWORD *)(*(_QWORD *)v4
                                                                                                  + 8 * v5));
        ++v5;
      }
      while (v5 < a2[4]);
    }
    a2[4] = 0;
    wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v4, 4);
    v6 = 0;
    LODWORD(v7) = 1;
    do
    {
      v8 = a2[5];
      v9 = a2[4];
      if ((int)v9 >= v8)
      {
        if (v8 == a2[6])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v4, v8 + 1);
          v8 = a2[5];
        }
        a2[5] = v8 + 1;
        sub_100871AD0();
      }
      v10 = *((_QWORD *)a2 + 1);
      a2[4] = v9 + 1;
      v11 = sub_1008717B0(a1, *(_QWORD *)(v10 + 8 * v9));
      v12 = v11;
      if (!v11)
      {
        if (qword_1022A00C0 != -1)
          dispatch_once(&qword_1022A00C0, &stru_102158508);
        v13 = qword_1022A00C8;
        if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67240192;
          LODWORD(v24) = v6;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "CLVPC,fromSimdDouble4x4,fromSimdDouble4(matrix.columns[%{public}d]) failed", buf, 8u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00C0 != -1)
            dispatch_once(&qword_1022A00C0, &stru_102158508);
          v21 = 67240192;
          LODWORD(v22) = v6;
          LODWORD(v20) = 8;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVPC,fromSimdDouble4x4,fromSimdDouble4(matrix.columns[%{public}d]) failed", &v21, v20);
          v15 = (uint8_t *)v14;
          sub_100512490("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromSimdDouble4x4(const simd_double4x4 &, CLP::LogEntry::Vision::simd_doubleMxN *)", "%s\n", v14);
          if (v15 != buf)
            free(v15);
        }
      }
      v7 = v7 & v12;
      ++v6;
      a1 += 32;
    }
    while (v6 != 4);
  }
  else
  {
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_102158508);
    v16 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134283521;
      v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "CLVPC,fromSimdDouble4x4,Invalid output pointer,pMatrixMsg,%{private}p", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_102158508);
      v21 = 134283521;
      v22 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVPC,fromSimdDouble4x4,Invalid output pointer,pMatrixMsg,%{private}p", &v21, 12);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromSimdDouble4x4(const simd_double4x4 &, CLP::LogEntry::Vision::simd_doubleMxN *)", "%s\n", v18);
      if (v19 != buf)
        free(v19);
    }
    return 0;
  }
  return v7;
}

void sub_10086D64C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_10086D664(uint64_t a1, int *a2)
{
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  _BOOL4 v12;
  NSObject *v13;
  const char *v14;
  uint8_t *v15;
  NSObject *v16;
  const char *v18;
  uint8_t *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint8_t buf[4];
  uint64_t v24;

  if (a2)
  {
    v4 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 2);
    if (a2[4] >= 1)
    {
      v5 = 0;
      do
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v4 + 8 * v5) + 32))(*(_QWORD *)(*(_QWORD *)v4
                                                                                                  + 8 * v5));
        ++v5;
      }
      while (v5 < a2[4]);
    }
    a2[4] = 0;
    wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v4, 6);
    v6 = 0;
    LODWORD(v7) = 1;
    do
    {
      v8 = a2[5];
      v9 = a2[4];
      if ((int)v9 >= v8)
      {
        if (v8 == a2[6])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v4, v8 + 1);
          v8 = a2[5];
        }
        a2[5] = v8 + 1;
        sub_100871A10();
      }
      v10 = *((_QWORD *)a2 + 1);
      a2[4] = v9 + 1;
      v11 = sub_10086E168(a1, *(_QWORD *)(v10 + 8 * v9));
      v12 = v11;
      if (!v11)
      {
        if (qword_1022A00C0 != -1)
          dispatch_once(&qword_1022A00C0, &stru_102158508);
        v13 = qword_1022A00C8;
        if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67240192;
          LODWORD(v24) = v6;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "CLVPC,fromVLMatrixf6x6,fromVLVectorf6(matrix.v[%{public}d]) failed", buf, 8u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00C0 != -1)
            dispatch_once(&qword_1022A00C0, &stru_102158508);
          v21 = 67240192;
          LODWORD(v22) = v6;
          LODWORD(v20) = 8;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVPC,fromVLMatrixf6x6,fromVLVectorf6(matrix.v[%{public}d]) failed", &v21, v20);
          v15 = (uint8_t *)v14;
          sub_100512490("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromVLMatrixf6x6(const VLMatrixf6x6 &, CLP::LogEntry::Vision::VLMatrixfMxN *)", "%s\n", v14);
          if (v15 != buf)
            free(v15);
        }
      }
      v7 = v7 & v12;
      ++v6;
      a1 += 24;
    }
    while (v6 != 6);
  }
  else
  {
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_102158508);
    v16 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134283521;
      v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "CLVPC,fromVLMatrixf6x6,Invalid output pointer,pMatrixMsg,%{private}p", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_102158508);
      v21 = 134283521;
      v22 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVPC,fromVLMatrixf6x6,Invalid output pointer,pMatrixMsg,%{private}p", &v21, 12);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromVLMatrixf6x6(const VLMatrixf6x6 &, CLP::LogEntry::Vision::VLMatrixfMxN *)", "%s\n", v18);
      if (v19 != buf)
        free(v19);
    }
    return 0;
  }
  return v7;
}

void sub_10086DA58(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_10086DA70(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  uint8_t buf[1640];

  if ((sub_10086CB10(a1, a2) & 1) != 0)
  {
    if (objc_msgSend(a1, "debugInfo"))
    {
      *(_DWORD *)(a2 + 56) |= 0x20u;
      v4 = *(_QWORD *)(a2 + 40);
      if (!v4)
        operator new();
      return sub_10086DCC4(objc_msgSend(a1, "debugInfo"), v4);
    }
    else
    {
      return 1;
    }
  }
  else
  {
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_102158508);
    v6 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "CLVPC,fromCLVLLocalizationResultForHarvest,Failed in VL estimate conversion", buf, 2u);
    }
    result = sub_1001BFF7C(115, 0);
    if ((_DWORD)result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_102158508);
      v9[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVPC,fromCLVLLocalizationResultForHarvest,Failed in VL estimate conversion", v9, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromCLVLLocalizationResultForHarvest(const _CLVLLocalizationResult *const, CLP::LogEntry::Vision::VLLocalizationResult *)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
      return 0;
    }
  }
  return result;
}

void sub_10086DC88(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    operator delete();
  _Unwind_Resume(exception_object);
}

uint64_t sub_10086DCC4(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  uint64_t v10;
  uint8_t buf[4];
  uint64_t v12;

  if (a1)
  {
    if (objc_msgSend(a1, "maps488Details"))
    {
      *(_DWORD *)(a2 + 20) |= 1u;
      v4 = *(_QWORD *)(a2 + 8);
      if (!v4)
        operator new();
      return sub_10086E398(objc_msgSend(a1, "maps488Details"), v4);
    }
    else
    {
      return 1;
    }
  }
  else
  {
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_102158508);
    v6 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134283521;
      v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "CLVPC,fromVLLocalizationDebugInfo,Invalid input pointer,debugInfo,%{private}p", buf, 0xCu);
    }
    result = sub_1001BFF7C(115, 0);
    if ((_DWORD)result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_102158508);
      v9 = 134283521;
      v10 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVPC,fromVLLocalizationDebugInfo,Invalid input pointer,debugInfo,%{private}p", &v9, 12);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromVLLocalizationDebugInfo(const _CLVLLocalizationDebugInfo *const, CLP::LogEntry::Vision::VLLocalizationDebugInfo *)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
      return 0;
    }
  }
  return result;
}

void sub_10086DEEC(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    operator delete();
  _Unwind_Resume(exception_object);
}

BOOL sub_10086DF28(_OWORD *a1, uint64_t a2)
{
  int v4;
  int v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  const char *v11;
  uint8_t *v12;
  _OWORD v13[2];
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  uint64_t v17;

  if (a2)
  {
    *(_DWORD *)(a2 + 16) = 0;
    sub_1002E60A0(a2 + 8, 3);
    v4 = 0;
    v5 = *(_DWORD *)(a2 + 16);
    do
    {
      v6 = a1[1];
      v13[0] = *a1;
      v13[1] = v6;
      v7 = *((_QWORD *)v13 + (v4 & 3));
      if (v5 == *(_DWORD *)(a2 + 20))
      {
        sub_1002E60A0(a2 + 8, v5 + 1);
        v5 = *(_DWORD *)(a2 + 16);
      }
      v8 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 16) = v5 + 1;
      *(_QWORD *)(v8 + 8 * v5) = v7;
      ++v4;
      ++v5;
    }
    while (v4 != 3);
  }
  else
  {
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_102158508);
    v9 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134283521;
      v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "CLVPC,fromSimdDouble3,Invalid output pointer,pVectorMsg,%{private}p", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_102158508);
      v14 = 134283521;
      v15 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVPC,fromSimdDouble3,Invalid output pointer,pVectorMsg,%{private}p", &v14, 12);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromSimdDouble3(const simd_double3 &, CLP::LogEntry::Vision::simd_doubleM *)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  return a2 != 0;
}

void sub_10086E158(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  _Unwind_Resume(a1);
}

BOOL sub_10086E168(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  NSObject *v8;
  const char *v10;
  uint8_t *v11;
  int v12;
  uint64_t v13;
  uint8_t buf[4];
  uint64_t v15;

  if (a2)
  {
    *(_DWORD *)(a2 + 16) = 0;
    sub_1002A19E0(a2 + 8, 6);
    v4 = 0;
    v5 = *(_DWORD *)(a2 + 16);
    do
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (v5 == *(_DWORD *)(a2 + 20))
      {
        sub_1002A19E0(a2 + 8, v5 + 1);
        v5 = *(_DWORD *)(a2 + 16);
      }
      v7 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 16) = v5 + 1;
      *(_DWORD *)(v7 + 4 * v5) = v6;
      v4 += 4;
      ++v5;
    }
    while (v4 != 24);
  }
  else
  {
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_102158508);
    v8 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134283521;
      v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "CLVPC,fromVLVectorf6,Invalid output pointer,pVectorMsg,%{private}p", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_102158508);
      v12 = 134283521;
      v13 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVPC,fromVLVectorf6,Invalid output pointer,pVectorMsg,%{private}p", &v12, 12);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromVLVectorf6(const float (&)[6], CLP::LogEntry::Vision::VLVectorfM *)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
  return a2 != 0;
}

void sub_10086E388(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_10086E398(void *a1, uint64_t a2)
{
  void *v3;
  id v4;
  uint64_t *v5;
  char *v6;
  _QWORD *v7;
  int *v8;
  int v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t result;
  const char *v32;
  std::string *v33;
  NSObject *v34;
  char *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  id v41;
  uint64_t v42;
  char *v43;
  __int16 *v44;
  uint64_t v45;
  int *v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  id v58;
  id v59;
  id v60;
  std::string *v61;
  char *v62;
  __int16 *v63;
  uint64_t v64;
  int *v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;
  int v75;
  NSObject *v76;
  id v77;
  _DWORD *v78;
  int v79;
  unsigned int v80;
  int v81;
  uint64_t v82;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  uint64_t v93;
  int v94;
  int v95;
  int v96;
  uint64_t v97;
  int v98;
  int v99;
  int v100;
  NSObject *v101;
  char *v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  const char *v113;
  std::string *v114;
  uint64_t v115;
  const char *v116;
  std::string *v117;
  const char *v118;
  std::string *v119;
  uint64_t v120;
  int v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  _DWORD *v127;
  void *v128;
  int v129;
  uint64_t v130;
  std::string buf[68];

  if (a1)
  {
    v3 = a1;
    v4 = objc_msgSend(a1, "inliersCount");
    *(_DWORD *)(a2 + 276) |= 1u;
    *(_QWORD *)(a2 + 8) = v4;
    *(_DWORD *)(a2 + 24) = 0;
    *(_DWORD *)(a2 + 40) = 0;
    *(_DWORD *)(a2 + 56) = 0;
    v5 = &qword_1022A0000;
    v128 = v3;
    if (!objc_msgSend(v3, "inliersCount")
      || objc_msgSend(v3, "points2D") && objc_msgSend(v3, "points3D") && objc_msgSend(v3, "inlierIndices"))
    {
      v6 = (char *)objc_msgSend(v3, "points2D");
      v7 = objc_msgSend(v3, "points3D");
      v8 = (int *)objc_msgSend(v3, "inlierIndices");
      v9 = objc_msgSend(v3, "inliersCount");
      sub_1002A19E0(a2 + 16, 2 * v9);
      sub_1002E60A0(a2 + 32, 3 * v9);
      sub_1002A19E0(a2 + 48, v9);
      if (v9 < 1)
      {
        v122 = 1;
      }
      else
      {
        v10 = 0;
        v11 = (int *)(v6 + 4);
        v12 = 3 * v9;
        do
        {
          v13 = *(v11 - 1);
          v14 = *(_DWORD *)(a2 + 24);
          v15 = *(_DWORD *)(a2 + 28);
          if (v14 == v15)
          {
            sub_1002A19E0(a2 + 16, v14 + 1);
            v14 = *(_DWORD *)(a2 + 24);
            v15 = *(_DWORD *)(a2 + 28);
          }
          v16 = *(_QWORD *)(a2 + 16);
          v17 = v14 + 1;
          *(_DWORD *)(a2 + 24) = v14 + 1;
          *(_DWORD *)(v16 + 4 * v14) = v13;
          v18 = *v11;
          if (v14 + 1 == v15)
          {
            sub_1002A19E0(a2 + 16, v14 + 2);
            v17 = *(_DWORD *)(a2 + 24);
            v16 = *(_QWORD *)(a2 + 16);
          }
          *(_DWORD *)(a2 + 24) = v17 + 1;
          *(_DWORD *)(v16 + 4 * v17) = v18;
          v19 = v7[v10];
          v21 = *(_DWORD *)(a2 + 40);
          v20 = *(_DWORD *)(a2 + 44);
          if (v21 == v20)
          {
            sub_1002E60A0(a2 + 32, v21 + 1);
            v21 = *(_DWORD *)(a2 + 40);
            v20 = *(_DWORD *)(a2 + 44);
          }
          v22 = *(_QWORD *)(a2 + 32);
          v23 = v21 + 1;
          *(_DWORD *)(a2 + 40) = v21 + 1;
          *(_QWORD *)(v22 + 8 * v21) = v19;
          v24 = v7[(v10 + 1)];
          if (v21 + 1 == v20)
          {
            sub_1002E60A0(a2 + 32, v21 + 2);
            v22 = *(_QWORD *)(a2 + 32);
            v23 = *(_DWORD *)(a2 + 40);
            v20 = *(_DWORD *)(a2 + 44);
          }
          v25 = v23 + 1;
          *(_DWORD *)(a2 + 40) = v23 + 1;
          *(_QWORD *)(v22 + 8 * v23) = v24;
          v26 = v7[(v10 + 2)];
          if (v23 + 1 == v20)
          {
            sub_1002E60A0(a2 + 32, v23 + 2);
            v25 = *(_DWORD *)(a2 + 40);
            v22 = *(_QWORD *)(a2 + 32);
          }
          *(_DWORD *)(a2 + 40) = v25 + 1;
          *(_QWORD *)(v22 + 8 * v25) = v26;
          v27 = *v8;
          v28 = *(_DWORD *)(a2 + 56);
          if (v28 == *(_DWORD *)(a2 + 60))
          {
            sub_1002A19E0(a2 + 48, v28 + 1);
            v28 = *(_DWORD *)(a2 + 56);
          }
          v29 = *(_QWORD *)(a2 + 48);
          *(_DWORD *)(a2 + 56) = v28 + 1;
          *(_DWORD *)(v29 + 4 * v28) = v27;
          v10 += 3;
          v11 += 2;
          ++v8;
          v3 = v128;
        }
        while (v12 != v10);
        v122 = 1;
        v5 = &qword_1022A0000;
      }
    }
    else
    {
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_102158508);
      v34 = qword_1022A00C8;
      if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "CLVPC,fromVLLocalizationMaps488Details,Invalid inliers", (uint8_t *)buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00C0 != -1)
          dispatch_once(&qword_1022A00C0, &stru_102158508);
        LOWORD(v129) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVPC,fromVLLocalizationMaps488Details,Invalid inliers", &v129, 2);
        v119 = (std::string *)v118;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromVLLocalizationMaps488Details(const _CLVLLocalizationMaps488Details *const, CLP::LogEntry::Vision::VLLocalizationMaps488Details *)", "%s\n", v118);
        if (v119 != buf)
          free(v119);
      }
      v122 = 0;
    }
    v35 = (char *)objc_msgSend(v3, "slamOrigin");
    *(_DWORD *)(a2 + 72) = 0;
    sub_1002E60A0(a2 + 64, 6);
    v36 = 0;
    v37 = *(_DWORD *)(a2 + 72);
    do
    {
      v38 = *(_QWORD *)&v35[v36];
      if (v37 == *(_DWORD *)(a2 + 76))
      {
        sub_1002E60A0(a2 + 64, v37 + 1);
        v37 = *(_DWORD *)(a2 + 72);
      }
      v39 = *(_QWORD *)(a2 + 64);
      *(_DWORD *)(a2 + 72) = v37 + 1;
      *(_QWORD *)(v39 + 8 * v37) = v38;
      v36 += 8;
      ++v37;
    }
    while (v36 != 48);
    v40 = objc_msgSend(v3, "slamTracksCount");
    *(_DWORD *)(a2 + 276) |= 0x20u;
    *(_QWORD *)(a2 + 80) = v40;
    v41 = objc_msgSend(v3, "descriptorDimension");
    *(_DWORD *)(a2 + 276) |= 0x80u;
    *(_QWORD *)(a2 + 104) = v41;
    *(_DWORD *)(a2 + 96) = 0;
    v42 = *(_QWORD *)(a2 + 112);
    if ((_UNKNOWN *)v42 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      if (*(char *)(v42 + 23) < 0)
      {
        **(_BYTE **)v42 = 0;
        *(_QWORD *)(v42 + 8) = 0;
      }
      else
      {
        *(_BYTE *)v42 = 0;
        *(_BYTE *)(v42 + 23) = 0;
      }
    }
    *(_DWORD *)(a2 + 276) &= ~0x100u;
    *(_DWORD *)(a2 + 128) = 0;
    *(_DWORD *)(a2 + 144) = 0;
    *(_DWORD *)(a2 + 160) = 0;
    if (!objc_msgSend(v3, "slamTracksCount")
      || objc_msgSend(v3, "slamTracks")
      && (!objc_msgSend(v3, "descriptorDimension") || objc_msgSend(v3, "slamTrackDescriptors"))
      && objc_msgSend(v3, "slamTrackObservations")
      && (!objc_msgSend(v3, "totalObservationsCount") || objc_msgSend(v3, "slamTracks2D"))
      && (!objc_msgSend(v3, "totalObservationsCount") || objc_msgSend(v3, "slamTrackImageIndices")))
    {
      v43 = (char *)objc_msgSend(v3, "slamTracks");
      v44 = (__int16 *)objc_msgSend(v3, "slamTrackObservations");
      LODWORD(v45) = objc_msgSend(v3, "slamTracksCount");
      sub_1002A19E0(a2 + 88, 3 * v45);
      sub_1002A19E0(a2 + 120, v45);
      if ((int)v45 >= 1)
      {
        v45 = v45;
        v46 = (int *)(v43 + 8);
        do
        {
          v47 = *(v46 - 2);
          v49 = *(_DWORD *)(a2 + 96);
          v48 = *(_DWORD *)(a2 + 100);
          if (v49 == v48)
          {
            sub_1002A19E0(a2 + 88, v49 + 1);
            v49 = *(_DWORD *)(a2 + 96);
            v48 = *(_DWORD *)(a2 + 100);
          }
          v50 = *(_QWORD *)(a2 + 88);
          v51 = v49 + 1;
          *(_DWORD *)(a2 + 96) = v49 + 1;
          *(_DWORD *)(v50 + 4 * v49) = v47;
          v52 = *(v46 - 1);
          if (v49 + 1 == v48)
          {
            sub_1002A19E0(a2 + 88, v49 + 2);
            v50 = *(_QWORD *)(a2 + 88);
            v51 = *(_DWORD *)(a2 + 96);
            v48 = *(_DWORD *)(a2 + 100);
          }
          v53 = v51 + 1;
          *(_DWORD *)(a2 + 96) = v51 + 1;
          *(_DWORD *)(v50 + 4 * v51) = v52;
          v54 = *v46;
          if (v51 + 1 == v48)
          {
            sub_1002A19E0(a2 + 88, v51 + 2);
            v53 = *(_DWORD *)(a2 + 96);
            v50 = *(_QWORD *)(a2 + 88);
          }
          *(_DWORD *)(a2 + 96) = v53 + 1;
          *(_DWORD *)(v50 + 4 * v53) = v54;
          v55 = *v44;
          v56 = *(_DWORD *)(a2 + 128);
          if (v56 == *(_DWORD *)(a2 + 132))
          {
            sub_1002A19E0(a2 + 120, v56 + 1);
            v56 = *(_DWORD *)(a2 + 128);
          }
          v57 = *(_QWORD *)(a2 + 120);
          *(_DWORD *)(a2 + 128) = v56 + 1;
          *(_DWORD *)(v57 + 4 * v56) = v55;
          v46 += 3;
          ++v44;
          --v45;
        }
        while (v45);
      }
      v58 = objc_msgSend(v3, "descriptorDimension");
      v59 = objc_msgSend(v3, "slamTracksCount");
      v60 = objc_msgSend(v3, "slamTrackDescriptors");
      if (v60)
      {
        sub_10035ACF4(buf, v60, (_QWORD)v59 * (_QWORD)v58);
        *(_DWORD *)(a2 + 276) |= 0x100u;
        v61 = *(std::string **)(a2 + 112);
        if (v61 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        std::string::operator=(v61, buf);
        if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf[0].__r_.__value_.__l.__data_);
      }
      v62 = (char *)objc_msgSend(v3, "slamTracks2D");
      v63 = (__int16 *)objc_msgSend(v3, "slamTrackImageIndices");
      LODWORD(v64) = objc_msgSend(v3, "totalObservationsCount");
      sub_1002A19E0(a2 + 136, 2 * v64);
      sub_1002A19E0(a2 + 152, v64);
      if ((int)v64 >= 1)
      {
        v64 = v64;
        v65 = (int *)(v62 + 4);
        do
        {
          v66 = *(v65 - 1);
          v67 = *(_DWORD *)(a2 + 144);
          v68 = *(_DWORD *)(a2 + 148);
          if (v67 == v68)
          {
            sub_1002A19E0(a2 + 136, v67 + 1);
            v67 = *(_DWORD *)(a2 + 144);
            v68 = *(_DWORD *)(a2 + 148);
          }
          v69 = *(_QWORD *)(a2 + 136);
          v70 = v67 + 1;
          *(_DWORD *)(a2 + 144) = v67 + 1;
          *(_DWORD *)(v69 + 4 * v67) = v66;
          v71 = *v65;
          if (v67 + 1 == v68)
          {
            sub_1002A19E0(a2 + 136, v67 + 2);
            v70 = *(_DWORD *)(a2 + 144);
            v69 = *(_QWORD *)(a2 + 136);
          }
          *(_DWORD *)(a2 + 144) = v70 + 1;
          *(_DWORD *)(v69 + 4 * v70) = v71;
          v72 = *v63;
          v73 = *(_DWORD *)(a2 + 160);
          if (v73 == *(_DWORD *)(a2 + 164))
          {
            sub_1002A19E0(a2 + 152, v73 + 1);
            v73 = *(_DWORD *)(a2 + 160);
          }
          v74 = *(_QWORD *)(a2 + 152);
          *(_DWORD *)(a2 + 160) = v73 + 1;
          *(_DWORD *)(v74 + 4 * v73) = v72;
          v65 += 2;
          ++v63;
          --v64;
        }
        while (v64);
      }
      v75 = 1;
    }
    else
    {
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_102158508);
      v76 = v5[25];
      if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_ERROR, "CLVPC,fromVLLocalizationMaps488Details,Invalid slamTracks", (uint8_t *)buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00C0 != -1)
          dispatch_once(&qword_1022A00C0, &stru_102158508);
        v115 = v5[25];
        LOWORD(v129) = 0;
        LODWORD(v120) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v115, 16, "CLVPC,fromVLLocalizationMaps488Details,Invalid slamTracks", &v129, v120);
        v117 = (std::string *)v116;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromVLLocalizationMaps488Details(const _CLVLLocalizationMaps488Details *const, CLP::LogEntry::Vision::VLLocalizationMaps488Details *)", "%s\n", v116);
        if (v117 != buf)
          free(v117);
      }
      v75 = 0;
    }
    v77 = objc_msgSend(v3, "frameCount");
    *(_DWORD *)(a2 + 276) |= 0x1000u;
    *(_QWORD *)(a2 + 168) = v77;
    *(_DWORD *)(a2 + 184) = 0;
    *(_DWORD *)(a2 + 200) = 0;
    *(_DWORD *)(a2 + 216) = 0;
    *(_DWORD *)(a2 + 232) = 0;
    if (!objc_msgSend(v3, "frameCount")
      || objc_msgSend(v3, "perFrameVioStatusCodes")
      && objc_msgSend(v3, "perFrameVioPoses")
      && objc_msgSend(v3, "perFrameCalibrationMatrices")
      && objc_msgSend(v3, "perFrameDistortion"))
    {
      v127 = objc_msgSend(v3, "perFrameVioStatusCodes");
      v126 = (char *)objc_msgSend(v3, "perFrameVioPoses");
      v125 = (char *)objc_msgSend(v3, "perFrameCalibrationMatrices");
      v78 = objc_msgSend(v3, "perFrameDistortion");
      v79 = objc_msgSend(v3, "frameCount");
      sub_1002A19E0(a2 + 176, v79);
      sub_1002A19E0(a2 + 192, 12 * v79);
      sub_1002A19E0(a2 + 208, 9 * v79);
      v124 = a2 + 224;
      sub_1002A19E0(a2 + 224, 2 * v79);
      if (v79 < 1)
      {
        v100 = 1;
      }
      else
      {
        v121 = v75;
        v80 = 0;
        v81 = 0;
        v82 = 0;
        v123 = v79;
        do
        {
          v83 = v127[v82];
          v84 = *(_DWORD *)(a2 + 184);
          if (v84 == *(_DWORD *)(a2 + 188))
          {
            sub_1002A19E0(a2 + 176, v84 + 1);
            v84 = *(_DWORD *)(a2 + 184);
          }
          v85 = 0;
          v86 = *(_QWORD *)(a2 + 176);
          *(_DWORD *)(a2 + 184) = v84 + 1;
          *(_DWORD *)(v86 + 4 * v84) = v83;
          v87 = *(_DWORD *)(a2 + 200);
          do
          {
            v88 = *(_DWORD *)&v126[16 * (v81 & 0x3FFFFFFF) + v85];
            if (v87 == *(_DWORD *)(a2 + 204))
            {
              sub_1002A19E0(a2 + 192, v87 + 1);
              v87 = *(_DWORD *)(a2 + 200);
            }
            v89 = *(_QWORD *)(a2 + 192);
            *(_DWORD *)(a2 + 200) = v87 + 1;
            *(_DWORD *)(v89 + 4 * v87) = v88;
            v85 += 4;
            ++v87;
          }
          while (v85 != 48);
          v90 = 0;
          v91 = *(_DWORD *)(a2 + 216);
          v3 = v128;
          do
          {
            v92 = *(_DWORD *)&v125[4 * v80 + v90];
            if (v91 == *(_DWORD *)(a2 + 220))
            {
              sub_1002A19E0(a2 + 208, v91 + 1);
              v91 = *(_DWORD *)(a2 + 216);
            }
            v93 = *(_QWORD *)(a2 + 208);
            *(_DWORD *)(a2 + 216) = v91 + 1;
            *(_DWORD *)(v93 + 4 * v91) = v92;
            v90 += 4;
            ++v91;
          }
          while (v90 != 36);
          v94 = v78[2 * v82];
          v95 = *(_DWORD *)(a2 + 232);
          v96 = *(_DWORD *)(a2 + 236);
          if (v95 == v96)
          {
            sub_1002A19E0(v124, v95 + 1);
            v95 = *(_DWORD *)(a2 + 232);
            v96 = *(_DWORD *)(a2 + 236);
          }
          v97 = *(_QWORD *)(a2 + 224);
          v98 = v95 + 1;
          *(_DWORD *)(a2 + 232) = v95 + 1;
          *(_DWORD *)(v97 + 4 * v95) = v94;
          v99 = *(_DWORD *)((char *)v78 + ((8 * v82) | 4));
          if (v95 + 1 == v96)
          {
            sub_1002A19E0(v124, v95 + 2);
            v98 = *(_DWORD *)(a2 + 232);
            v97 = *(_QWORD *)(a2 + 224);
          }
          *(_DWORD *)(a2 + 232) = v98 + 1;
          *(_DWORD *)(v97 + 4 * v98) = v99;
          ++v82;
          v81 += 3;
          v80 += 9;
        }
        while (v82 != v123);
        v100 = 1;
        v75 = v121;
      }
    }
    else
    {
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_102158508);
      v101 = v5[25];
      if (os_log_type_enabled(v101, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_ERROR, "CLVPC,fromVLLocalizationMaps488Details,Invalid frames", (uint8_t *)buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00C0 != -1)
          dispatch_once(&qword_1022A00C0, &stru_102158508);
        v112 = v5[25];
        LOWORD(v129) = 0;
        LODWORD(v120) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v112, 16, "CLVPC,fromVLLocalizationMaps488Details,Invalid frames", &v129, v120);
        v114 = (std::string *)v113;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromVLLocalizationMaps488Details(const _CLVLLocalizationMaps488Details *const, CLP::LogEntry::Vision::VLLocalizationMaps488Details *)", "%s\n", v113);
        if (v114 != buf)
          free(v114);
      }
      v100 = 0;
    }
    v102 = (char *)objc_msgSend(v3, "resultPoseRotation");
    *(_DWORD *)(a2 + 248) = 0;
    sub_1002E60A0(a2 + 240, 9);
    v103 = 0;
    v104 = *(_DWORD *)(a2 + 248);
    do
    {
      v105 = *(_QWORD *)&v102[v103];
      if (v104 == *(_DWORD *)(a2 + 252))
      {
        sub_1002E60A0(a2 + 240, v104 + 1);
        v104 = *(_DWORD *)(a2 + 248);
      }
      v106 = *(_QWORD *)(a2 + 240);
      *(_DWORD *)(a2 + 248) = v104 + 1;
      *(_QWORD *)(v106 + 8 * v104) = v105;
      v103 += 8;
      ++v104;
    }
    while (v103 != 72);
    v107 = (char *)objc_msgSend(v3, "resultPoseTranslation");
    *(_DWORD *)(a2 + 264) = 0;
    sub_1002E60A0(a2 + 256, 3);
    v108 = 0;
    v109 = *(_DWORD *)(a2 + 264);
    do
    {
      v110 = *(_QWORD *)&v107[v108];
      if (v109 == *(_DWORD *)(a2 + 268))
      {
        sub_1002E60A0(a2 + 256, v109 + 1);
        v109 = *(_DWORD *)(a2 + 264);
      }
      v111 = *(_QWORD *)(a2 + 256);
      *(_DWORD *)(a2 + 264) = v109 + 1;
      *(_QWORD *)(v111 + 8 * v109) = v110;
      v108 += 8;
      ++v109;
    }
    while (v108 != 24);
    return v122 & v75 & v100;
  }
  else
  {
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_102158508);
    v30 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 134283521;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "CLVPC,fromVLLocalizationMaps488Details,Invalid input pointer,maps488Details,%{private}p", (uint8_t *)buf, 0xCu);
    }
    result = sub_1001BFF7C(115, 0);
    if ((_DWORD)result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_102158508);
      v129 = 134283521;
      v130 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVPC,fromVLLocalizationMaps488Details,Invalid input pointer,maps488Details,%{private}p", &v129, 12);
      v33 = (std::string *)v32;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromVLLocalizationMaps488Details(const _CLVLLocalizationMaps488Details *const, CLP::LogEntry::Vision::VLLocalizationMaps488Details *)", "%s\n", v32);
      if (v33 != buf)
        free(v33);
      return 0;
    }
  }
  return result;
}

void sub_10086F268(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_10086F2B8(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  _BOOL4 v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t result;
  NSObject *v21;
  const char *v22;
  int v23;
  const char *v24;
  char *v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint8_t buf[4];
  uint64_t v32;

  if (a2)
  {
    *(_DWORD *)buf = 0;
    sub_10086F714(*(_DWORD *)a1, buf);
    v4 = *(_DWORD *)buf;
    if (sub_100176D78(*(unsigned int *)buf))
    {
      v5 = *(_DWORD *)(a2 + 152);
      *(_DWORD *)(a2 + 48) = v4;
      *(_DWORD *)(a2 + 152) = v5 | 3;
      v6 = *(_QWORD *)(a2 + 8);
      if (!v6)
        operator new();
      v7 = sub_10086F8EC((_OWORD *)(a1 + 4), v6);
      v8 = *(_DWORD *)(a2 + 152);
      *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 20);
      *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 36);
      *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 52);
      *(_DWORD *)(a2 + 152) = v8 | 0x3FC;
      *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 68);
      *(_DWORD *)(a2 + 52) = *(_DWORD *)(a1 + 84);
      v9 = *(_QWORD *)(a1 + 88);
      *(_DWORD *)(a2 + 152) = v8 | 0xFFC;
      *(_QWORD *)(a2 + 88) = v9;
      v29 = 0;
      sub_10086FAC4(*(_DWORD *)(a1 + 96), &v29);
      v10 = v29;
      if (sub_100176BA4(v29))
      {
        v11 = *(_DWORD *)(a2 + 152);
        *(_DWORD *)(a2 + 104) = v10;
        *(_DWORD *)(a2 + 152) = v11 | 0x3000;
        v12 = *(_QWORD *)(a2 + 96);
        if (!v12)
          operator new();
        v13 = sub_10086F8EC((_OWORD *)(a1 + 100), v12);
        v14 = *(_QWORD *)(a1 + 116);
        v15 = *(_DWORD *)(a2 + 152);
        *(_DWORD *)(a2 + 152) = v15 | 0x4000;
        *(_QWORD *)(a2 + 112) = v14;
        v16 = *(_DWORD *)(a1 + 124);
        *(_DWORD *)(a2 + 152) = v15 | 0xC000;
        *(_DWORD *)(a2 + 108) = v16;
        v28 = 0;
        sub_10086FC90(*(_DWORD *)(a1 + 128), &v28);
        v17 = v28;
        if (sub_100176D94(v28))
        {
          *(_DWORD *)(a2 + 152) |= 0x10000u;
          *(_DWORD *)(a2 + 120) = v17;
          v27 = 0;
          sub_10086FE80(*(_DWORD *)(a1 + 132), &v27);
          v18 = v27;
          if (sub_10008D1F0(v27))
          {
            *(_DWORD *)(a2 + 152) |= 0x20000u;
            *(_DWORD *)(a2 + 124) = v18;
            v26 = 0;
            sub_10086FE80(*(_DWORD *)(a1 + 136), &v26);
            v19 = v26;
            if (sub_10008D1F0(v26))
            {
              result = v7 & v13;
              *(_DWORD *)(a2 + 152) |= 0x40000u;
              *(_DWORD *)(a2 + 128) = v19;
              return result;
            }
            v22 = "::CLP::LogEntry::PrivateData::ClientLocationReferenceFrameType_IsValid(value)";
            v23 = 14797;
            v24 = "set_raw_reference_frame";
          }
          else
          {
            v22 = "::CLP::LogEntry::PrivateData::ClientLocationReferenceFrameType_IsValid(value)";
            v23 = 14774;
            v24 = "set_reference_frame";
          }
        }
        else
        {
          v22 = "::CLP::LogEntry::PrivateData::DaemonLocation_LocationIntegrityType_IsValid(value)";
          v23 = 14751;
          v24 = "set_integrity";
        }
      }
      else
      {
        v22 = "::CLP::LogEntry::PrivateData::LocationType_IsValid(value)";
        v23 = 14642;
        v24 = "set_type";
      }
    }
    else
    {
      v22 = "::CLP::LogEntry::PrivateData::DaemonLocation_ClientLocationSuitabilityType_IsValid(value)";
      v23 = 14357;
      v24 = "set_suitability";
    }
    __assert_rtn(v24, "CLPPrivateDataShared.pb.h", v23, v22);
  }
  if (qword_1022A00C0 != -1)
    dispatch_once(&qword_1022A00C0, &stru_102158508);
  v21 = qword_1022A00C8;
  if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134283521;
    v32 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "CLVPC,fromCLDaemonLocation,Invalid output pointer, pLocationMsg,%{private}p", buf, 0xCu);
  }
  result = sub_1001BFF7C(115, 0);
  if ((_DWORD)result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_102158508);
    v29 = 134283521;
    v30 = 0;
    v25 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVPC,fromCLDaemonLocation,Invalid output pointer, pLocationMsg,%{private}p", &v29, 12);
    sub_100512490("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromCLDaemonLocation(const CLDaemonLocation &, CLP::LogEntry::PrivateData::DaemonLocation *)", "%s\n", v25);
    if (v25 != (char *)buf)
      free(v25);
    return 0;
  }
  return result;
}

void sub_10086F6C8(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    operator delete();
  _Unwind_Resume(exception_object);
}

uint64_t sub_10086F714(int a1, _DWORD *a2)
{
  int v3;
  NSObject *v5;
  char *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  v3 = a1;
  if ((a1 - 1) >= 2 && a1 != 0xFFFF)
  {
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_102158508);
    v5 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      v10 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLVPC,fromCLClientLocationSuitability,Received unhandled location suitability: %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_102158508);
      v8[0] = 67109120;
      v8[1] = v3;
      v7 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 2, "CLVPC,fromCLClientLocationSuitability,Received unhandled location suitability: %d", v8);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLVisionProtobufConverter::fromCLClientLocationSuitability(const CLClientLocationSuitability, CLP::LogEntry::PrivateData::DaemonLocation_ClientLocationSuitabilityType &)", "%s\n", v7);
      if (v7 != (char *)buf)
        free(v7);
    }
    v3 = 0;
  }
  *a2 = v3;
  return 1;
}

void sub_10086F8E0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

BOOL sub_10086F8EC(_OWORD *a1, uint64_t a2)
{
  NSObject *v3;
  char *v5;
  int v6;
  uint64_t v7;
  uint8_t buf[4];
  uint64_t v9;

  if (a2)
  {
    *(_DWORD *)(a2 + 28) |= 3u;
    *(_OWORD *)(a2 + 8) = *a1;
  }
  else
  {
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_102158508);
    v3 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134283521;
      v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "CLVPC,fromCLClientLocationCoordinate,Invalid output pointer,pCoordinateMsg,%{private}p", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_102158508);
      v6 = 134283521;
      v7 = 0;
      v5 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVPC,fromCLClientLocationCoordinate,Invalid output pointer,pCoordinateMsg,%{private}p", &v6, 12);
      sub_100512490("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromCLClientLocationCoordinate(const CLClientLocationCoordinate &, CLP::LogEntry::PrivateData::ClientLocationCoordinate *)", "%s\n", v5);
      if (v5 != (char *)buf)
        free(v5);
    }
  }
  return a2 != 0;
}

void sub_10086FAB8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_10086FAC4(unsigned int a1, unsigned int *a2)
{
  unsigned int v3;
  NSObject *v4;
  char *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  unsigned int v9;

  v3 = a1;
  if (a1 >= 0xE)
  {
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_102158508);
    v4 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v9 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "CLVPC,fromCLLocationType,Received unhandled location type: %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_102158508);
      v7[0] = 67109120;
      v7[1] = v3;
      v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVPC,fromCLLocationType,Received unhandled location type: %d", v7);
      sub_100512490("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromCLLocationType(const CLLocationType, CLP::LogEntry::PrivateData::LocationType &)", "%s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
    v3 = 0;
  }
  *a2 = v3;
  return 1;
}

void sub_10086FC84(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_10086FC90(int a1, int *a2)
{
  int v3;
  NSObject *v4;
  char *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  v3 = a1;
  if (((a1 - 25) > 0x32 || ((1 << (a1 - 25)) & 0x4000002000001) == 0) && a1)
  {
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_102158508);
    v4 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      v9 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLVPC,fromCLLocationIntegrity,Received unhandled location integrity: %u", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_102158508);
      v7[0] = 67109120;
      v7[1] = v3;
      v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 2, "CLVPC,fromCLLocationIntegrity,Received unhandled location integrity: %u", v7);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLVisionProtobufConverter::fromCLLocationIntegrity(const CLLocationIntegrity, CLP::LogEntry::PrivateData::DaemonLocation_LocationIntegrityType &)", "%s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
    v3 = -1;
  }
  *a2 = v3;
  return 1;
}

void sub_10086FE74(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_10086FE80(unsigned int a1, unsigned int *a2)
{
  unsigned int v3;
  NSObject *v4;
  char *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  unsigned int v9;

  v3 = a1;
  if (a1 >= 3)
  {
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_102158508);
    v4 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      v9 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLVPC,fromCLClientLocationReferenceFrame,Received unhandled location reference frame: %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_102158508);
      v7[0] = 67109120;
      v7[1] = v3;
      v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 2, "CLVPC,fromCLClientLocationReferenceFrame,Received unhandled location reference frame: %d", v7);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLVisionProtobufConverter::fromCLClientLocationReferenceFrame(const CLClientLocationReferenceFrame, CLP::LogEntry::PrivateData::ClientLocationReferenceFrameType &)", "%s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
    v3 = 0;
  }
  *a2 = v3;
  return 1;
}

void sub_100870040(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_10087004C(uint64_t a1, uint64_t a2)
{
  int v4;
  char v5;
  int v6;
  int v7;
  uint64_t v8;
  _BOOL4 v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  _BOOL4 v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  _BOOL4 v19;
  unsigned int v20;
  uint64_t v21;
  _BOOL4 v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t result;
  int v26;
  NSObject *v27;
  const char *v28;
  int v29;
  const char *v30;
  char *v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  uint8_t buf[4];
  uint64_t v37;

  if (a2)
  {
    v4 = *(_DWORD *)(a2 + 364);
    *(_OWORD *)(a2 + 8) = *(_OWORD *)a1;
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 16);
    *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 40);
    *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 48);
    v5 = *(_BYTE *)(a1 + 52);
    *(_DWORD *)(a2 + 364) = v4 | 0x1FF;
    *(_BYTE *)(a2 + 112) = v5;
    *(_DWORD *)buf = 0;
    sub_100870600(*(_DWORD *)(a1 + 56), buf);
    v6 = *(_DWORD *)buf;
    if (sub_10002A324(*(unsigned int *)buf))
    {
      v7 = *(_DWORD *)(a2 + 364);
      *(_DWORD *)(a2 + 60) = v6;
      *(_DWORD *)(a2 + 364) = v7 | 0x600;
      v8 = *(_QWORD *)(a2 + 64);
      if (!v8)
        operator new();
      v9 = sub_10086F8EC((_OWORD *)(a1 + 64), v8);
      v10 = *(_QWORD *)(a1 + 80);
      v11 = *(_DWORD *)(a2 + 364);
      *(_DWORD *)(a2 + 364) = v11 | 0x800;
      *(_QWORD *)(a2 + 72) = v10;
      v12 = *(_DWORD *)(a1 + 88);
      *(_DWORD *)(a2 + 364) = v11 | 0x1800;
      *(_DWORD *)(a2 + 80) = v12;
      *(_DWORD *)(a2 + 84) = *(_DWORD *)(a1 + 92);
      *(_BYTE *)(a2 + 113) = *(_BYTE *)(a1 + 96);
      *(_DWORD *)(a2 + 364) = v11 | 0x807800;
      v13 = *(_QWORD *)(a2 + 136);
      if (!v13)
        operator new();
      v14 = sub_1008707D0(a1 + 104, v13);
      *(_DWORD *)(a2 + 364) |= 0x8000u;
      v15 = *(_QWORD *)(a2 + 88);
      if (!v15)
        operator new();
      *(_DWORD *)(v15 + 28) |= 3u;
      *(_OWORD *)(v15 + 8) = *(_OWORD *)(a1 + 296);
      v34 = 0;
      sub_1008709B0(*(_DWORD *)(a1 + 312), &v34);
      v16 = v34;
      if (sub_100177AB4(v34))
      {
        v17 = *(_DWORD *)(a2 + 364);
        *(_DWORD *)(a2 + 96) = v16;
        *(_DWORD *)(a2 + 100) = *(_DWORD *)(a1 + 316);
        *(_DWORD *)(a2 + 364) = v17 | 0x70000;
        v18 = *(_QWORD *)(a2 + 104);
        if (!v18)
          operator new();
        v19 = sub_10086F8EC((_OWORD *)(a1 + 320), v18);
        *(_DWORD *)(a2 + 364) |= 0x180000u;
        *(_OWORD *)(a2 + 120) = *(_OWORD *)(a1 + 336);
        v33 = 0;
        sub_100870B80(*(_DWORD *)(a1 + 352), &v33);
        v20 = v33;
        if (sub_10008D1F0(v33))
        {
          *(_DWORD *)(a2 + 116) = v20;
          *(_BYTE *)(a2 + 114) = *(_BYTE *)(a1 + 356);
          *(_OWORD *)(a2 + 144) = *(_OWORD *)(a1 + 360);
          *(_OWORD *)(a2 + 160) = *(_OWORD *)(a1 + 376);
          *(_OWORD *)(a2 + 176) = *(_OWORD *)(a1 + 496);
          *(_BYTE *)(a2 + 115) = *(_BYTE *)(a1 + 512);
          *(_QWORD *)(a2 + 192) = *(_QWORD *)(a1 + 392);
          *(_QWORD *)(a2 + 200) = *(_QWORD *)(a1 + 416);
          *(_BYTE *)(a2 + 276) = *(_BYTE *)(a1 + 424);
          *(int8x8_t *)(a2 + 364) = vorr_s8(*(int8x8_t *)(a2 + 364), (int8x8_t)0x7FF600000);
          v21 = *(_QWORD *)(a2 + 208);
          if (!v21)
            operator new();
          v22 = sub_10086F8EC((_OWORD *)(a1 + 432), v21);
          v23 = *(_QWORD *)(a1 + 448);
          *(_DWORD *)(a2 + 368) |= 8u;
          *(_QWORD *)(a2 + 216) = v23;
          v32 = 0;
          sub_10086FE80(*(_DWORD *)(a1 + 456), &v32);
          v24 = v32;
          if (sub_10008D1F0(v32))
          {
            result = (v9 && v14 && v19) & v22;
            v26 = *(_DWORD *)(a2 + 368);
            *(_DWORD *)(a2 + 272) = v24;
            *(_DWORD *)(a2 + 368) = v26 | 0x70;
            *(_OWORD *)(a2 + 224) = *(_OWORD *)(a1 + 480);
            return result;
          }
          v28 = "::CLP::LogEntry::PrivateData::ClientLocationReferenceFrameType_IsValid(value)";
          v29 = 16200;
          v30 = "set_fused_reference_frame";
        }
        else
        {
          v28 = "::CLP::LogEntry::PrivateData::DaemonLocationPrivate_ClientLocationOriginDeviceType_IsValid(value)";
          v29 = 15829;
          v30 = "set_origin_device";
        }
      }
      else
      {
        v28 = "::CLP::LogEntry::PrivateData::DaemonLocationPrivate_UndulationModelType_IsValid(value)";
        v29 = 15698;
        v30 = "set_undulation_model";
      }
    }
    else
    {
      v28 = "::CLP::LogEntry::PrivateData::DaemonLocationPrivate_MatchQualityType_IsValid(value)";
      v29 = 15503;
      v30 = "set_match_quality";
    }
    __assert_rtn(v30, "CLPPrivateDataShared.pb.h", v29, v28);
  }
  if (qword_1022A00C0 != -1)
    dispatch_once(&qword_1022A00C0, &stru_102158508);
  v27 = qword_1022A00C8;
  if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134283521;
    v37 = 0;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "CLVPC,fromCLDaemonLocationPrivate,Invalid output pointer,pLocationPrivateMsg,%{private}p", buf, 0xCu);
  }
  result = sub_1001BFF7C(115, 0);
  if ((_DWORD)result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_102158508);
    v34 = 134283521;
    v35 = 0;
    v31 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVPC,fromCLDaemonLocationPrivate,Invalid output pointer,pLocationPrivateMsg,%{private}p", &v34, 12);
    sub_100512490("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromCLDaemonLocationPrivate(const CLDaemonLocationPrivate &, CLP::LogEntry::PrivateData::DaemonLocationPrivate *)", "%s\n", v31);
    if (v31 != (char *)buf)
      free(v31);
    return 0;
  }
  return result;
}

void sub_100870588(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    operator delete();
  _Unwind_Resume(exception_object);
}

uint64_t sub_100870600(int a1, _DWORD *a2)
{
  int v3;
  NSObject *v4;
  char *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  v3 = a1;
  if ((a1 - 1) >= 3)
  {
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_102158508);
    v4 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      v9 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLVPC,fromCLClientLocationMatchQuality,Received unhandled match quality: %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_102158508);
      v7[0] = 67109120;
      v7[1] = v3;
      v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 2, "CLVPC,fromCLClientLocationMatchQuality,Received unhandled match quality: %d", v7);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLVisionProtobufConverter::fromCLClientLocationMatchQuality(const CLClientLocationMatchQuality, CLP::LogEntry::PrivateData::DaemonLocationPrivate_MatchQualityType &)", "%s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
    v3 = 0;
  }
  *a2 = v3;
  return 1;
}

void sub_1008707C4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

BOOL sub_1008707D0(uint64_t a1, uint64_t a2)
{
  int v3;
  NSObject *v4;
  char *v6;
  int v7;
  uint64_t v8;
  uint8_t buf[4];
  uint64_t v10;

  if (a2)
  {
    v3 = *(_DWORD *)(a2 + 32);
    *(_OWORD *)(a2 + 8) = *(_OWORD *)a1;
    *(_WORD *)(a2 + 24) = *(_WORD *)(a1 + 16);
    *(_DWORD *)(a2 + 32) = v3 | 0xF;
  }
  else
  {
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_102158508);
    v4 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134283521;
      v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "CLVPC,fromCLMapMatcherData,Invalid output pointer,pMapMatcherDataMsg,%{private}p", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_102158508);
      v7 = 134283521;
      v8 = 0;
      v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVPC,fromCLMapMatcherData,Invalid output pointer,pMapMatcherDataMsg,%{private}p", &v7, 12);
      sub_100512490("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromCLMapMatcherData(const CLMapMatcherData &, CLP::LogEntry::PrivateData::MapMatcherData *)", "%s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
  }
  return a2 != 0;
}

void sub_1008709A4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_1008709B0(int a1, int *a2)
{
  int v3;
  NSObject *v4;
  char *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  v3 = a1;
  if ((a1 + 1) >= 4)
  {
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_102158508);
    v4 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v9 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "CLVPC,fromCLUndulationModelType,Received unhandled undulation model type: %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_102158508);
      v7[0] = 67109120;
      v7[1] = v3;
      v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVPC,fromCLUndulationModelType,Received unhandled undulation model type: %d", v7);
      sub_100512490("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromCLUndulationModelType(const CLUndulationModelType, CLP::LogEntry::PrivateData::DaemonLocationPrivate_UndulationModelType &)", "%s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
    v3 = -1;
  }
  *a2 = v3;
  return 1;
}

void sub_100870B74(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_100870B80(unsigned int a1, unsigned int *a2)
{
  unsigned int v3;
  NSObject *v4;
  char *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  unsigned int v9;

  v3 = a1;
  if (a1 >= 3)
  {
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_102158508);
    v4 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      v9 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLVPC,fromCLClientLocationOriginDevice,Received unhandled location origin device: %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_102158508);
      v7[0] = 67109120;
      v7[1] = v3;
      v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 2, "CLVPC,fromCLClientLocationOriginDevice,Received unhandled location origin device: %d", v7);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLVisionProtobufConverter::fromCLClientLocationOriginDevice(const CLClientLocationOriginDevice, CLP::LogEntry::PrivateData::DaemonLocationPrivate_ClientLocationOriginDeviceType &)", "%s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
    v3 = 0;
  }
  *a2 = v3;
  return 1;
}

void sub_100870D40(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

BOOL sub_100870D4C(uint64_t a1, double a2)
{
  NSObject *v5;
  _BOOL8 result;
  char *v7;
  NSObject *v8;
  uint64_t v9;
  _BOOL4 v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  _BOOL4 v14;
  uint64_t v15;
  NSObject *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  _WORD v20[8];
  uint64_t v21;
  double v22;
  _BYTE v23[12];
  uint8_t buf[4];
  double v25;

  v22 = a2;
  if (a1)
  {
    *(_DWORD *)(a1 + 44) |= 2u;
    *(double *)(a1 + 16) = a2;
    if (a2 >= 0.0 && (*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    {
      *(_QWORD *)v23 = 0;
      v9 = sub_10086B0B4();
      v10 = sub_10010EA68(v9, &v22, (double *)v23);
      if (v10)
      {
        v11 = *(_QWORD *)v23;
        *(_DWORD *)(a1 + 44) |= 1u;
        *(_QWORD *)(a1 + 8) = v11;
      }
      else
      {
        if (qword_1022A00C0 != -1)
          dispatch_once(&qword_1022A00C0, &stru_102158508);
        v12 = qword_1022A00C8;
        if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "CLVPC,fromMachAbsoluteTime,convertMachAbsoluteToCFAbsolute_RealTime failed", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00C0 != -1)
            dispatch_once(&qword_1022A00C0, &stru_102158508);
          LOWORD(v21) = 0;
          v17 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVPC,fromMachAbsoluteTime,convertMachAbsoluteToCFAbsolute_RealTime failed", &v21, 2);
          sub_100512490("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromMachAbsoluteTime(const CFTimeInterval, CLP::LogEntry::LogEntry_TimeStamp *)", "%s\n", v17);
          if (v17 != (char *)buf)
            free(v17);
        }
      }
      v21 = 0;
      v13 = sub_10086B0B4();
      v14 = sub_10010F7EC(v13, &v22, (double *)&v21);
      if (v14)
      {
        v15 = v21;
        *(_DWORD *)(a1 + 44) |= 4u;
        *(_QWORD *)(a1 + 24) = v15;
      }
      else
      {
        if (qword_1022A00C0 != -1)
          dispatch_once(&qword_1022A00C0, &stru_102158508);
        v16 = qword_1022A00C8;
        if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "CLVPC,fromMachAbsoluteTime,convertMachAbsoluteToMachContinuous_RealTime failed", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00C0 != -1)
            dispatch_once(&qword_1022A00C0, &stru_102158508);
          v20[0] = 0;
          LODWORD(v19) = 2;
          v18 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVPC,fromMachAbsoluteTime,convertMachAbsoluteToMachContinuous_RealTime failed", v20, v19);
          sub_100512490("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromMachAbsoluteTime(const CFTimeInterval, CLP::LogEntry::LogEntry_TimeStamp *)", "%s\n", v18);
          if (v18 != (char *)buf)
            free(v18);
        }
      }
      return v10 && v14;
    }
    else
    {
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_102158508);
      v5 = qword_1022A00C8;
      if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134349056;
        v25 = a2;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "CLVPC,fromMachAbsoluteTime,Invalid input value,machAbsoluteTime,%{public}.3lf", buf, 0xCu);
      }
      result = sub_1001BFF7C(115, 0);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00C0 != -1)
          dispatch_once(&qword_1022A00C0, &stru_102158508);
        *(_DWORD *)v23 = 134349056;
        *(double *)&v23[4] = v22;
        v7 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVPC,fromMachAbsoluteTime,Invalid input value,machAbsoluteTime,%{public}.3lf", v23, 12);
        sub_100512490("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromMachAbsoluteTime(const CFTimeInterval, CLP::LogEntry::LogEntry_TimeStamp *)", "%s\n", v7);
LABEL_22:
        if (v7 != (char *)buf)
          free(v7);
        return 0;
      }
    }
  }
  else
  {
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_102158508);
    v8 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134283521;
      v25 = 0.0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "CLVPC,fromMachAbsoluteTime,Invalid output pointer,pTimeStampMsg,%{private}p", buf, 0xCu);
    }
    result = sub_1001BFF7C(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_102158508);
      *(_DWORD *)v23 = 134283521;
      *(_QWORD *)&v23[4] = 0;
      v7 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVPC,fromMachAbsoluteTime,Invalid output pointer,pTimeStampMsg,%{private}p", v23, 12);
      sub_100512490("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromMachAbsoluteTime(const CFTimeInterval, CLP::LogEntry::LogEntry_TimeStamp *)", "%s\n", v7);
      goto LABEL_22;
    }
  }
  return result;
}

void sub_10087133C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

BOOL sub_100871348(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  NSObject *v8;
  const char *v10;
  uint8_t *v11;
  int v12;
  uint64_t v13;
  uint8_t buf[4];
  uint64_t v15;

  if (a2)
  {
    *(_DWORD *)(a2 + 16) = 0;
    sub_1002A19E0(a2 + 8, 3);
    v4 = 0;
    v5 = *(_DWORD *)(a2 + 16);
    do
    {
      v6 = *(_DWORD *)(a1 + 4 * (v4 & 3));
      if (v5 == *(_DWORD *)(a2 + 20))
      {
        sub_1002A19E0(a2 + 8, v5 + 1);
        v5 = *(_DWORD *)(a2 + 16);
      }
      v7 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 16) = v5 + 1;
      *(_DWORD *)(v7 + 4 * v5) = v6;
      ++v4;
      ++v5;
    }
    while (v4 != 3);
  }
  else
  {
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_102158508);
    v8 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134283521;
      v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "CLVPC,fromSimdFloat3,Invalid output pointer,pVectorMsg,%{private}p", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_102158508);
      v12 = 134283521;
      v13 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVPC,fromSimdFloat3,Invalid output pointer,pVectorMsg,%{private}p", &v12, 12);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromSimdFloat3(const simd_float3 &, CLP::LogEntry::Vision::simd_floatM *)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
  return a2 != 0;
}

void sub_10087156C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  _Unwind_Resume(a1);
}

BOOL sub_10087157C(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  NSObject *v8;
  const char *v10;
  uint8_t *v11;
  int v12;
  uint64_t v13;
  uint8_t buf[4];
  uint64_t v15;

  if (a2)
  {
    *(_DWORD *)(a2 + 16) = 0;
    sub_1002A19E0(a2 + 8, 4);
    v4 = 0;
    v5 = *(_DWORD *)(a2 + 16);
    do
    {
      v6 = *(_DWORD *)(a1 + 4 * (v4 & 3));
      if (v5 == *(_DWORD *)(a2 + 20))
      {
        sub_1002A19E0(a2 + 8, v5 + 1);
        v5 = *(_DWORD *)(a2 + 16);
      }
      v7 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 16) = v5 + 1;
      *(_DWORD *)(v7 + 4 * v5) = v6;
      ++v4;
      ++v5;
    }
    while (v4 != 4);
  }
  else
  {
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_102158508);
    v8 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134283521;
      v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "CLVPC,fromSimdFloat4,Invalid output pointer,pVectorMsg,%{private}p", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_102158508);
      v12 = 134283521;
      v13 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVPC,fromSimdFloat4,Invalid output pointer,pVectorMsg,%{private}p", &v12, 12);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromSimdFloat4(const simd_float4 &, CLP::LogEntry::Vision::simd_floatM *)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
  return a2 != 0;
}

void sub_1008717A0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  _Unwind_Resume(a1);
}

BOOL sub_1008717B0(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  const char *v10;
  uint8_t *v11;
  int v12;
  uint64_t v13;
  uint8_t buf[4];
  uint64_t v15;

  if (a2)
  {
    *(_DWORD *)(a2 + 16) = 0;
    sub_1002E60A0(a2 + 8, 4);
    v4 = 0;
    v5 = *(_DWORD *)(a2 + 16);
    do
    {
      v6 = *(_QWORD *)(a1 + 8 * (v4 & 3));
      if (v5 == *(_DWORD *)(a2 + 20))
      {
        sub_1002E60A0(a2 + 8, v5 + 1);
        v5 = *(_DWORD *)(a2 + 16);
      }
      v7 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 16) = v5 + 1;
      *(_QWORD *)(v7 + 8 * v5) = v6;
      ++v4;
      ++v5;
    }
    while (v4 != 4);
  }
  else
  {
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_102158508);
    v8 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134283521;
      v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "CLVPC,fromSimdDouble4,Invalid output pointer,pVectorMsg,%{private}p", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_102158508);
      v12 = 134283521;
      v13 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00C8, 16, "CLVPC,fromSimdDouble4,Invalid output pointer,pVectorMsg,%{private}p", &v12, 12);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromSimdDouble4(const simd_double4 &, CLP::LogEntry::Vision::simd_doubleM *)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
  return a2 != 0;
}

void sub_1008719D4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  _Unwind_Resume(a1);
}

void sub_1008719E4(id a1)
{
  qword_1022A00C8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Vision");
}

void sub_100871A10()
{
  operator new();
}

void sub_100871A4C()
{
  operator delete();
}

void sub_100871A70()
{
  operator new();
}

void sub_100871AAC()
{
  operator delete();
}

void sub_100871AD0()
{
  operator new();
}

void sub_100871B0C()
{
  operator delete();
}

void sub_100871BD4(id a1)
{
  qword_102304F38 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLPredictedWalkDistanceServiceWatchSilo"));
}

void sub_1008720E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100261F44((uint64_t)va);
  operator delete();
}

id sub_100872138(uint64_t a1, void *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[7];
  uint64_t v7;

  v2 = *(_OWORD *)(a1 + 80);
  v6[4] = *(_OWORD *)(a1 + 64);
  v6[5] = v2;
  v6[6] = *(_OWORD *)(a1 + 96);
  v7 = *(_QWORD *)(a1 + 112);
  v3 = *(_OWORD *)(a1 + 16);
  v6[0] = *(_OWORD *)a1;
  v6[1] = v3;
  v4 = *(_OWORD *)(a1 + 48);
  v6[2] = *(_OWORD *)(a1 + 32);
  v6[3] = v4;
  return objc_msgSend(a2, "onAddBout:", v6);
}

id sub_100872184(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _objc_msgSend(a4, "onUserInfoUpdate:data:", a2, a3);
}

id sub_10087245C(uint64_t a1, uint64_t a2)
{
  return sub_10061F764(120.0, a2, 21, *(void **)(a1 + 32), 300, 0, 0, 0, 0, 0);
}

void sub_1008728FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100872910(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FEA0 != -1)
    dispatch_once(&qword_10229FEA0, &stru_102158548);
  v2 = qword_10229FEA8;
  if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Aggregating bout records", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEA0 != -1)
      dispatch_once(&qword_10229FEA0, &stru_102158548);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEA8, 2, "Aggregating bout records", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "-[CLPredictedWalkDistanceServiceWatch setUpAggregationOnTimer]_block_invoke", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return sub_100414210(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56));
}

void sub_100872BC8(id a1)
{
  qword_10229FEA8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "PredictedWalkDistance");
}

void sub_100872BF4(uint64_t a1, _QWORD *a2)
{
  void *v3;
  void *v4;

  if (a2)
  {
    v3 = (void *)a2[41];
    if (v3)
    {
      a2[42] = v3;
      operator delete(v3);
    }
    sub_1000F34E0(a2 + 27);
    v4 = (void *)a2[24];
    if (v4)
    {
      a2[25] = v4;
      operator delete(v4);
    }
    sub_100261F44((uint64_t)a2);
    operator delete();
  }
}

uint64_t sub_100872C58()
{
  sub_1015A2E04(qword_102304F20, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102304F20, (void *)&_mh_execute_header);
}

void sub_100872D04(uint64_t a1, void *a2)
{
  id v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  id v11;
  double v12;
  id v13;
  NSDictionary *v14;
  uint64_t v15;
  id v16;

  v4 = objc_alloc((Class)CMAbsoluteAltitudeData);
  objc_msgSend(a2, "altitude");
  v6 = v5;
  objc_msgSend(a2, "accuracy");
  v8 = v7;
  objc_msgSend(a2, "precision");
  v10 = v9;
  v11 = objc_msgSend(a2, "statusInfo");
  objc_msgSend(a2, "timestamp");
  v13 = objc_msgSend(v4, "initWithAltitude:accuracy:precision:status:timestamp:", v11, v6, v8, v10, v12);
  v15 = CMAbsoluteAltitudeKey;
  v16 = v13;
  v14 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v16, &v15, 1);
  sub_1008758BC(a1, &v14);

}

void sub_100872FFC(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  _QWORD *v5;

  v5 = (_QWORD *)sub_1001B5A2C(a1, a2, a3, a4, a5);
  *v5 = off_102158578;
  v5[6] = 0;
  v5[7] = 0;
  v5[8] = 0;
  sub_1004FAEDC();
}

void sub_100873118(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *v2 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  sub_10002FA68(v1);
  _Unwind_Resume(a1);
}

void sub_100873148(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLElevationSubscription::onOdometerUpdate");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 8), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102158648);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLElevationSubscription::onOdometerUpdate", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102158648);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLElevationSubscription::onOdometerUpdate\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100874D14(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100873300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100873324(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_102158578;

  objc_msgSend(*(id *)(a1 + 64), "setValid:", 0);
  v2 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  objc_msgSend(*(id *)(a1 + 72), "invalidate");

  *(_QWORD *)(a1 + 72) = 0;
  v3 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_10002FA68(a1);
}

void sub_1008733B8(uint64_t a1)
{
  sub_100873324(a1);
  operator delete();
}

_QWORD *sub_1008733DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t (***v11)();
  uint64_t v12;
  _QWORD *result;
  uint64_t v14;
  _QWORD v15[3];
  _QWORD *v16;
  _QWORD v17[3];
  _QWORD *v18;
  _QWORD v19[3];
  _QWORD *v20;
  uint64_t (**v21)();
  _QWORD v22[2];
  uint64_t (***v23)();
  _QWORD v24[3];
  _QWORD *v25;
  _QWORD v26[3];
  uint64_t v27;
  _QWORD v28[3];
  uint64_t v29;
  _QWORD v30[3];
  uint64_t v31;
  _QWORD v32[3];
  uint64_t v33;
  _QWORD v34[3];
  uint64_t v35;

  v24[0] = off_102158698;
  v24[1] = sub_100873844;
  v24[2] = 0;
  v25 = v24;
  sub_1015A2E04(v26, "kCLConnectionMessageSignificantElevationUpdate");
  sub_1008759BC((uint64_t)&v27, (uint64_t)v24);
  v21 = off_102158698;
  v22[0] = sub_100873C48;
  v22[1] = 0;
  v23 = &v21;
  sub_1015A2E04(v28, "kCLConnectionMessageFilteredElevationUpdate");
  sub_1008759BC((uint64_t)&v29, (uint64_t)&v21);
  v19[0] = off_102158748;
  v19[1] = sub_10087405C;
  v19[2] = 0;
  v20 = v19;
  sub_1015A2E04(v30, "kCLConnectionMessageSignificantElevationDeltaQuery");
  sub_1008759BC((uint64_t)&v31, (uint64_t)v19);
  v17[0] = off_102158698;
  v17[1] = sub_10087444C;
  v17[2] = 0;
  v18 = v17;
  sub_1015A2E04(v32, "kCLConnectionMessageAbsoluteAltitudeUpdate");
  sub_1008759BC((uint64_t)&v33, (uint64_t)v17);
  v15[0] = off_102158748;
  v15[1] = sub_100874848;
  v15[2] = 0;
  v16 = v15;
  sub_1015A2E04(v34, "kCLConnectionMessageElevationProfileQuery");
  sub_1008759BC((uint64_t)&v35, (uint64_t)v15);
  sub_100875F50(a1, (unsigned __int8 *)v26, 5);
  v2 = 35;
  do
  {
    v3 = (_QWORD *)v26[v2 - 1];
    if (&v24[v2] == v3)
    {
      v3 = &v24[v2];
      v4 = 4;
    }
    else
    {
      if (!v3)
        goto LABEL_7;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_7:
    if (SHIBYTE((&v23)[v2]) < 0)
      operator delete((void *)v22[v2]);
    v2 -= 7;
  }
  while (v2 * 8);
  v5 = v16;
  if (v16 == v15)
  {
    v6 = 4;
    v5 = v15;
LABEL_14:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  else if (v16)
  {
    v6 = 5;
    goto LABEL_14;
  }
  v7 = v18;
  if (v18 == v17)
  {
    v8 = 4;
    v7 = v17;
LABEL_19:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  else if (v18)
  {
    v8 = 5;
    goto LABEL_19;
  }
  v9 = v20;
  if (v20 == v19)
  {
    v10 = 4;
    v9 = v19;
LABEL_24:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  else if (v20)
  {
    v10 = 5;
    goto LABEL_24;
  }
  v11 = v23;
  if (v23 == &v21)
  {
    v12 = 4;
    v11 = &v21;
LABEL_29:
    (*v11)[v12]();
  }
  else if (v23)
  {
    v12 = 5;
    goto LABEL_29;
  }
  result = v25;
  if (v25 == v24)
  {
    v14 = 4;
    result = v24;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v14))();
  }
  else if (v25)
  {
    v14 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v14))();
  }
  return result;
}

void sub_1008736C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, char a13, uint64_t a14, uint64_t a15, char *a16, char a17, uint64_t a18, uint64_t a19, char *a20,char a21,uint64_t a22,uint64_t a23,char *a24,char a25,uint64_t a26,uint64_t a27,char *a28,char a29)
{
  uint64_t i;
  uint64_t *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;

  for (i = 224; i != -56; i -= 56)
    sub_1004E21A4((uint64_t)(&a29 + i));
  v31 = a12;
  if (a12 == &a9)
  {
    v32 = 4;
    v31 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_8;
    v32 = 5;
  }
  (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_8:
  v33 = a16;
  if (a16 == &a13)
  {
    v34 = 4;
    v33 = &a13;
  }
  else
  {
    if (!a16)
      goto LABEL_13;
    v34 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v33 + 8 * v34))();
LABEL_13:
  v35 = a20;
  if (a20 == &a17)
  {
    v36 = 4;
    v35 = &a17;
  }
  else
  {
    if (!a20)
      goto LABEL_18;
    v36 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v35 + 8 * v36))();
LABEL_18:
  v37 = a24;
  if (a24 == &a21)
  {
    v38 = 4;
    v37 = &a21;
  }
  else
  {
    if (!a24)
      goto LABEL_23;
    v38 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v37 + 8 * v38))();
LABEL_23:
  v39 = a28;
  if (a28 == &a25)
  {
    v40 = 4;
    v39 = &a25;
  }
  else
  {
    if (!a28)
      goto LABEL_28;
    v40 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v39 + 8 * v40))();
LABEL_28:
  _Unwind_Resume(a1);
}

void sub_100873844(uint64_t a1, int a2)
{
  id v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  const char *v12;
  char *v13;
  const char *v14;
  char *v15;
  uint64_t v16;
  _WORD v17[8];
  uint64_t v18;
  NSNumber *v19;
  unsigned int v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  _BYTE buf[12];
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  int v30;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_10229FD70 != -1)
    dispatch_once(&qword_10229FD70, &stru_102158668);
  v5 = qword_10229FD78;
  if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)buf = 138412802;
    *(_QWORD *)&buf[4] = v6;
    v27 = 2048;
    v28 = a1;
    v29 = 1024;
    v30 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "SignificantElevation subscription changed, %@, %p, %d", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_102158668);
    v11 = *(_QWORD *)(a1 + 24);
    v20 = 138412802;
    v21 = v11;
    v22 = 2048;
    v23 = a1;
    v24 = 1024;
    v25 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 0, "SignificantElevation subscription changed, %@, %p, %d", &v20, 28);
    v13 = (char *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLElevationSubscription::handleRequestSignificantElevationUpdate(BOOL, const CLNameValuePair &)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  v20 = 0;
  if ((sub_100874F84(a1, (int *)&v20) & 1) != 0)
  {
    sub_1001A638C(a1);
    v7 = *(_QWORD *)(a1 + 48);
    v9 = *(_QWORD *)(v7 + 8);
    v8 = *(void **)(v7 + 16);
    if (a2)
      objc_msgSend(v8, "register:forNotification:registrationInfo:", v9, 6, 0);
    else
      objc_msgSend(v8, "unregister:forNotification:", v9, 6);
  }
  else
  {
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_102158668);
    v10 = qword_10229FD78;
    if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning Failed to subscribe to significant elevation updates.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD70 != -1)
        dispatch_once(&qword_10229FD70, &stru_102158668);
      v17[0] = 0;
      LODWORD(v16) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 0, "#Warning Failed to subscribe to significant elevation updates.", v17, v16);
      v15 = (char *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLElevationSubscription::handleRequestSignificantElevationUpdate(BOOL, const CLNameValuePair &)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    v18 = CMErrorMessage;
    v19 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v20);
    *(_QWORD *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v19, &v18, 1);
    sub_10087505C(a1, buf);
  }

}

void sub_100873C08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100873C48(uint64_t a1, int a2)
{
  id v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  _WORD v13[8];
  uint64_t v14;
  _UNKNOWN **v15;
  uint8_t buf[1640];
  uint64_t v17;
  _UNKNOWN **v18;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (!sub_1004FA344(*(_QWORD *)(a1 + 8)) || (sub_1001E4BF4() & 0x10) == 0)
  {
    v17 = CMErrorMessage;
    v18 = &off_10221B6A8;
    *(_QWORD *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v18, &v17, 1);
    sub_1008750FC(a1, buf);
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_102158668);
    v5 = qword_10229FD78;
    if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning Failed to subscribe to filtered elevation updates.", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_8;
    bzero(buf, 0x65CuLL);
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_102158668);
    v13[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 0, "#Warning Failed to subscribe to filtered elevation updates.", v13, 2);
    v11 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLElevationSubscription::handleRequestFilteredElevationUpdate(BOOL, const CLNameValuePair &)", "%s\n", v12);
LABEL_24:
    if (v11 != buf)
      free(v11);
    goto LABEL_8;
  }
  if ((sub_1001BBC08(a1) & 1) != 0)
  {
    sub_1001A638C(a1);
    v6 = *(_QWORD *)(a1 + 48);
    v8 = *(_QWORD *)(v6 + 8);
    v7 = *(void **)(v6 + 16);
    if (a2)
    {
      objc_msgSend(v7, "register:forNotification:registrationInfo:", v8, 3, 0);
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8), 7, 0);
    }
    else
    {
      objc_msgSend(v7, "unregister:forNotification:", v8, 3);
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8), 7);
    }
    goto LABEL_8;
  }
  v14 = CMErrorMessage;
  v15 = &off_10221B6C0;
  *(_QWORD *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v15, &v14, 1);
  sub_1008750FC(a1, buf);
  if (qword_10229FD70 != -1)
    dispatch_once(&qword_10229FD70, &stru_102158668);
  v9 = qword_10229FD78;
  if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning Not authorized for filtered elevation updates.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_102158668);
    v13[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 0, "#Warning Not authorized for filtered elevation updates.", v13, 2);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLElevationSubscription::handleRequestFilteredElevationUpdate(BOOL, const CLNameValuePair &)", "%s\n", v10);
    goto LABEL_24;
  }
LABEL_8:

}

void sub_100874010(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10087405C(uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSSet *v8;
  void *DictionaryOfClasses;
  void *v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  CLConnectionMessage *v22;
  NSObject *v23;
  CLConnectionMessage *v24;
  const char *v25;
  uint8_t *v26;
  uint64_t v27;
  _QWORD v28[5];
  std::__shared_weak_count *v29;
  __int16 v30[6];
  unsigned int v31;
  uint64_t v32;
  _UNKNOWN **v33;
  id buf[205];
  uint64_t v35;
  NSNumber *v36;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  v31 = 0;
  if ((sub_100874F84(a1, (int *)&v31) & 1) != 0)
  {
    v6 = objc_opt_class(CMMotionTimeRange, v5);
    v8 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v6, objc_opt_class(NSString, v7), 0);
    DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*(CLConnectionMessage **)a2, v8);
    v10 = DictionaryOfClasses;
    if (DictionaryOfClasses
      && (v11 = CMSignificantElevationKeyQueryTimeRange,
          objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CMSignificantElevationKeyQueryTimeRange)))
    {
      sub_100131938(buf, (uint64_t)"CLDaemonClient.OdometerNotifier.SignificantElevationDeltaQuery", 0);
      v12 = objc_msgSend(v10, "objectForKeyedSubscript:", v11);
      v13 = *(void **)(*(_QWORD *)(a1 + 48) + 16);
      v14 = objc_msgSend(v12, "startDate");
      v15 = objc_msgSend(v12, "endDate");
      v28[0] = _NSConcreteStackBlock;
      v28[1] = 3321888768;
      v28[2] = sub_10087519C;
      v28[3] = &unk_102158598;
      v16 = *(std::__shared_weak_count **)(a2 + 8);
      v28[4] = *(_QWORD *)a2;
      v29 = v16;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldxr(p_shared_owners);
        while (__stxr(v18 + 1, p_shared_owners));
      }
      objc_msgSend(v13, "querySignificantElevationDeltaFromDate:toDate:withReply:", v14, v15, v28);
      v19 = v29;
      if (v29)
      {
        v20 = (unint64_t *)&v29->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      sub_100131740(buf);
    }
    else
    {
      if (qword_10229FD70 != -1)
        dispatch_once(&qword_10229FD70, &stru_102158668);
      v23 = qword_10229FD78;
      if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_FAULT))
      {
        LOWORD(buf[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_FAULT, "Programmer error: Wrong parameters were passed.", (uint8_t *)buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD70 != -1)
          dispatch_once(&qword_10229FD70, &stru_102158668);
        v30[0] = 0;
        LODWORD(v27) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 17, "Programmer error: Wrong parameters were passed.", v30, v27);
        v26 = (uint8_t *)v25;
        sub_100512490("Generic", 1, 0, 0, "void CLElevationSubscription::handleMessageSignificantElevationDeltaQuery(std::shared_ptr<CLConnectionMessage>)", "%s\n", v25);
        if (v26 != (uint8_t *)buf)
          free(v26);
      }
      v24 = *(CLConnectionMessage **)a2;
      v32 = CMErrorMessage;
      v33 = &off_10221B6D8;
      +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v33, &v32, 1);
      CLConnectionMessage::sendReply(v24);
    }
  }
  else
  {
    v22 = *(CLConnectionMessage **)a2;
    v35 = CMErrorMessage;
    v36 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v31);
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v36, &v35, 1);
    CLConnectionMessage::sendReply(v22);
  }

}

void sub_1008743F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10087444C(_QWORD *a1, int a2)
{
  id v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  const char *v11;
  char *v12;
  const char *v13;
  char *v14;
  uint64_t v15;
  _WORD v16[8];
  uint64_t v17;
  NSNumber *v18;
  unsigned int v19;
  uint64_t v20;
  __int16 v21;
  _QWORD *v22;
  __int16 v23;
  int v24;
  _BYTE buf[12];
  __int16 v26;
  _QWORD *v27;
  __int16 v28;
  int v29;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_10229FD70 != -1)
    dispatch_once(&qword_10229FD70, &stru_102158668);
  v5 = qword_10229FD78;
  if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_DEFAULT))
  {
    v6 = a1[3];
    *(_DWORD *)buf = 138412802;
    *(_QWORD *)&buf[4] = v6;
    v26 = 2048;
    v27 = a1;
    v28 = 1024;
    v29 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "AbsoluteAltitude subscription changed, %@, %p, %d", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_102158668);
    v10 = a1[3];
    v19 = 138412802;
    v20 = v10;
    v21 = 2048;
    v22 = a1;
    v23 = 1024;
    v24 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 0, "AbsoluteAltitude subscription changed, %@, %p, %d", &v19, 28);
    v12 = (char *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLElevationSubscription::handleRequestAbsoluteAltitudeUpdate(BOOL, const CLNameValuePair &)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  v19 = 0;
  if ((sub_1008754E0((uint64_t)a1, &v19) & 1) != 0)
  {
    sub_1001A638C((uint64_t)a1);
    v7 = (void *)a1[7];
    v8 = a1[8];
    if (a2)
    {
      objc_msgSend(v7, "registerClient:forNotification:", v8, 1);
      sub_1008757AC((uint64_t)a1);
    }
    else
    {
      objc_msgSend(v7, "unregisterClient:forNotification:", v8, 1);
    }
  }
  else
  {
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_102158668);
    v9 = qword_10229FD78;
    if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning Failed to subscribe to absolute altitude updates.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD70 != -1)
        dispatch_once(&qword_10229FD70, &stru_102158668);
      v16[0] = 0;
      LODWORD(v15) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 0, "#Warning Failed to subscribe to absolute altitude updates.", v16, v15);
      v14 = (char *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLElevationSubscription::handleRequestAbsoluteAltitudeUpdate(BOOL, const CLNameValuePair &)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    v17 = CMErrorMessage;
    v18 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v19);
    *(_QWORD *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v18, &v17, 1);
    sub_10087570C((uint64_t)a1, buf);
  }

}

void sub_100874810(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100874848(uint64_t a1, uint64_t a2)
{
  id v4;
  char v5;
  CLConnectionMessage *v6;
  void *Dictionary;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  CLConnectionMessage *v17;
  NSObject *v18;
  CLConnectionMessage *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  const char *v31;
  uint8_t *v32;
  _QWORD v33[5];
  std::__shared_weak_count *v34;
  __int16 v35[6];
  unsigned int v36;
  uint64_t v37;
  _UNKNOWN **v38;
  uint64_t v39;
  _UNKNOWN **v40;
  id buf[205];
  uint64_t v42;
  NSNumber *v43;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  v36 = 0;
  v5 = sub_100874F84(a1, (int *)&v36);
  v6 = *(CLConnectionMessage **)a2;
  if ((v5 & 1) != 0)
  {
    Dictionary = (void *)CLConnectionMessage::getDictionary(*(CLConnectionMessage **)a2);
    v8 = Dictionary;
    if (Dictionary
      && (v9 = objc_msgSend(Dictionary, "objectForKeyedSubscript:", CMElevationProfileKeyQueryStartTime)) != 0
      && (v10 = objc_msgSend(v8, "objectForKeyedSubscript:", CMElevationProfileKeyQueryEndTime)) != 0
      && (v11 = CMElevationProfileKeyQueryFromRecordId,
          objc_msgSend(v8, "objectForKeyedSubscript:", CMElevationProfileKeyQueryFromRecordId))
      && (v12 = CMElevationProfileKeyQueryBatchSize,
          objc_msgSend(v8, "objectForKeyedSubscript:", CMElevationProfileKeyQueryBatchSize)))
    {
      objc_msgSend(v9, "doubleValue");
      v14 = v13;
      objc_msgSend(v10, "doubleValue");
      v16 = v15;
      if (v14 <= v15)
      {
        v20 = objc_msgSend(objc_alloc((Class)NSDate), "initWithTimeIntervalSinceReferenceDate:", v14);
        v21 = objc_msgSend(objc_alloc((Class)NSDate), "initWithTimeIntervalSinceReferenceDate:", v16);
        v22 = objc_msgSend(v8, "objectForKeyedSubscript:", v11);
        v23 = objc_msgSend(v8, "objectForKeyedSubscript:", v12);
        sub_100131938(buf, (uint64_t)"CLDaemonClient.ElevationProfileQuery", 0);
        v24 = *(void **)(a1 + 56);
        v33[0] = _NSConcreteStackBlock;
        v33[1] = 3321888768;
        v33[2] = sub_100875290;
        v33[3] = &unk_1021585C8;
        v25 = *(std::__shared_weak_count **)(a2 + 8);
        v33[4] = *(_QWORD *)a2;
        v34 = v25;
        if (v25)
        {
          p_shared_owners = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldxr(p_shared_owners);
          while (__stxr(v27 + 1, p_shared_owners));
        }
        objc_msgSend(v24, "queryElevationsFromDate:toDate:withBatchSize:fromRecordId:withReply:", v20, v21, v23, v22, v33);

        v28 = v34;
        if (v34)
        {
          v29 = (unint64_t *)&v34->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        sub_100131740(buf);
      }
      else
      {
        v17 = *(CLConnectionMessage **)a2;
        v37 = CMErrorMessage;
        v38 = &off_10221B6D8;
        +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v38, &v37, 1);
        CLConnectionMessage::sendReply(v17);
      }
    }
    else
    {
      if (qword_10229FD70 != -1)
        dispatch_once(&qword_10229FD70, &stru_102158668);
      v18 = qword_10229FD78;
      if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_FAULT))
      {
        LOWORD(buf[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "Programmer error: Wrong parameters were passed.", (uint8_t *)buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD70 != -1)
          dispatch_once(&qword_10229FD70, &stru_102158668);
        v35[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 17, "Programmer error: Wrong parameters were passed.", v35, 2);
        v32 = (uint8_t *)v31;
        sub_100512490("Generic", 1, 0, 0, "void CLElevationSubscription::handleMessageElevationProfileQuery(std::shared_ptr<CLConnectionMessage>)", "%s\n", v31);
        if (v32 != (uint8_t *)buf)
          free(v32);
      }
      v19 = *(CLConnectionMessage **)a2;
      v39 = CMErrorMessage;
      v40 = &off_10221B6D8;
      +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v40, &v39, 1);
      CLConnectionMessage::sendReply(v19);
    }
  }
  else
  {
    v42 = CMErrorMessage;
    v43 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v36);
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v43, &v42, 1);
    CLConnectionMessage::sendReply(v6);
  }

}

void sub_100874CA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100874D14(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  int v5;
  id v7;
  id v8;
  NSDictionary *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  id v13;

  v5 = *a3;
  if (*a3 == 3 || v5 == 7)
  {
    v7 = objc_msgSend(objc_alloc((Class)CMSignificantElevationSample), "initWithFilteredElevation:", a4);
    v10 = CMFilteredElevationKeySample;
    v11 = v7;
    v9 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v11, &v10, 1);

    sub_100874EDC(a1, &v9);
  }
  else if (v5 == 6)
  {
    v8 = objc_msgSend(objc_alloc((Class)CMSignificantElevationSample), "initWithSignificantElevation:", a4);
    v12 = CMSignificantElevationKeySample;
    v13 = v8;
    v9 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v13, &v12, 1);

    sub_100874E34(a1, &v9);
  }
}

void sub_100874E34(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_100876330(&off_1021587B8, a2, &v6);
  sub_10011A678(a1, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100874EC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100874EDC(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_100876330(&off_1021587C0, a2, &v6);
  sub_10011A678(a1, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100874F70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100874F84(uint64_t a1, int *a2)
{
  char v4;
  char v5;
  int v6;
  uint64_t result;
  void *__p;
  char v9;

  if (sub_1001BBC08(a1))
  {
    sub_100197040();
    if (sub_100195F08())
    {
      sub_1015A2E04(&__p, "com.apple.locationd.natalimetry");
      v4 = sub_1002255E0(a1);
      v5 = v4;
      if (v9 < 0)
      {
        operator delete(__p);
        if ((v5 & 1) == 0)
        {
LABEL_13:
          v6 = 110;
          goto LABEL_14;
        }
      }
      else if ((v4 & 1) == 0)
      {
        goto LABEL_13;
      }
    }
    else if ((sub_1001E4BF4() & 0x10) == 0)
    {
LABEL_12:
      v6 = 109;
      goto LABEL_14;
    }
    if ((sub_1004FA344(*(_QWORD *)(a1 + 8)) & 1) != 0)
      return 1;
    goto LABEL_12;
  }
  v6 = 111;
LABEL_14:
  result = 0;
  *a2 = v6;
  return result;
}

void sub_100875040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10087505C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  v2 = *(_QWORD *)(a1 + 32);
  sub_1004E6BA4(&off_1021587B8, a2, &v6);
  (*(void (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v2 + 24))(v2, &v6, 0);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1008750E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1008750FC(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  v2 = *(_QWORD *)(a1 + 32);
  sub_1004E6BA4(&off_1021587C0, a2, &v6);
  (*(void (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v2 + 24))(v2, &v6, 0);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100875188(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10087519C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _UNKNOWN **v9;

  if (a2)
  {
    v6 = CMSignificantElevationKeySample;
    v7 = a2;
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v7, &v6, 1);
    v3 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 32);
    v8 = CMErrorMessage;
    v9 = &off_10221B6A8;
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v9, &v8, 1);
    v3 = v4;
  }
  return CLConnectionMessage::sendReply(v3);
}

uint64_t sub_100875264(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_100875288(uint64_t a1)
{
  return sub_100261F44(a1 + 32);
}

void sub_100875290(uint64_t a1, void *a2, unsigned int a3, unsigned int a4)
{
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  id v19;
  double v20;
  id v21;
  uint64_t v22;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _QWORD v29[3];
  _QWORD v30[3];
  _BYTE v31[128];
  uint64_t v32;
  _UNKNOWN **v33;

  if (a2)
  {
    v6 = objc_alloc_init((Class)NSMutableArray);
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v7 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v25, v31, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v26;
      do
      {
        v10 = 0;
        do
        {
          if (*(_QWORD *)v26 != v9)
            objc_enumerationMutation(a2);
          v11 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * (_QWORD)v10);
          v12 = objc_alloc((Class)CMAbsoluteAltitudeData);
          objc_msgSend(v11, "altitude");
          v14 = v13;
          objc_msgSend(v11, "accuracy");
          v16 = v15;
          objc_msgSend(v11, "precision");
          v18 = v17;
          v19 = objc_msgSend(v11, "statusInfo");
          objc_msgSend(v11, "timestamp");
          v21 = objc_msgSend(v12, "initWithAltitude:accuracy:precision:status:timestamp:", v19, v14, v16, v18, v20);
          objc_msgSend(v6, "addObject:", v21);

          v10 = (char *)v10 + 1;
        }
        while (v8 != v10);
        v8 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v25, v31, 16);
      }
      while (v8);
    }
    v30[0] = v6;
    v29[0] = CMElevationProfileKeyAltitudeArray;
    v29[1] = CMElevationProfileKeyLastBatch;
    v30[1] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a3);
    v29[2] = CMElevationProfileKeyQueryFromRecordId;
    v30[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a4);
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v30, v29, 3);
    CLConnectionMessage::sendReply(*(_QWORD *)(a1 + 32));

  }
  else
  {
    v22 = *(_QWORD *)(a1 + 32);
    v32 = CMErrorMessage;
    v33 = &off_10221B6A8;
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v33, &v32, 1);
    CLConnectionMessage::sendReply(v22);
  }
}

uint64_t sub_1008754E0(uint64_t a1, _DWORD *a2)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  const char *v11;
  char *v12;
  int v13;
  uint64_t v14;
  _BYTE __p[12];
  char v16;

  v4 = sub_1001BBC08(a1);
  sub_1015A2E04(__p, "com.apple.locationd.absolute_altimeter");
  v5 = sub_1002255E0(a1);
  if (v16 < 0)
    operator delete(*(void **)__p);
  v6 = v4 | v5;
  if ((v6 & 1) == 0)
  {
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_102158668);
    v7 = qword_10229FD78;
    if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_ERROR))
    {
      v8 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)__p = 138543362;
      *(_QWORD *)&__p[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%{public}@ is not entitled for motion updates", __p, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_10229FD70 != -1)
        dispatch_once(&qword_10229FD70, &stru_102158668);
      v10 = *(_QWORD *)(a1 + 24);
      v13 = 138543362;
      v14 = v10;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_10229FD78, 16, "%{public}@ is not entitled for motion updates", &v13, 12);
      v12 = (char *)v11;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLElevationSubscription::isQualifiedForAbsoluteAltitude(CMError &)", "%s\n", v11);
      if (v12 != __p)
        free(v12);
    }
    *a2 = 111;
  }
  return v6;
}

void sub_1008756E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10087570C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  v2 = *(_QWORD *)(a1 + 32);
  sub_1004E6BA4(&off_1021587C8, a2, &v6);
  (*(void (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v2 + 24))(v2, &v6, 0);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100875798(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_1008757AC(uint64_t a1)
{
  id v2;
  id result;
  id v4;
  uint64_t v5;
  void *v6;
  float v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];

  v2 = objc_msgSend(*(id *)(a1 + 72), "arrayForKey:defaultValue:", CFSTR("ElevationThresholds"), 0);
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (result)
  {
    v4 = result;
    v5 = *(_QWORD *)v9;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v9 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)v6), "floatValue");
        objc_msgSend(*(id *)(a1 + 56), "registerClient:forElevationThreshold:", *(_QWORD *)(a1 + 64), 1.79769313e308, v7);
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      v4 = result;
    }
    while (result);
  }
  return result;
}

void sub_1008758BC(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_100876330(&off_1021587C8, a2, &v6);
  sub_10011A678(a1, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100875950(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100875964(id a1)
{
  qword_10229FE88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

void sub_100875990(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_1008759BC(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void sub_100875A20(id a1)
{
  qword_10229FD78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pressure");
}

__n128 sub_100875A4C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_102158698;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100875A88(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_102158698;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100875AAC(uint64_t a1, uint64_t a2, __int128 *a3)
{
  sub_100875AFC(a1 + 8, a2, a3);
}

uint64_t sub_100875AB4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100875AF0()
{
}

void sub_100875AFC(uint64_t a1, uint64_t a2, __int128 *a3)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v6 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  sub_100875B80(a1, a2, (CLConnectionMessage **)&v6);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100875B68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
    sub_1018FBC0C(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100875B80(uint64_t a1, uint64_t a2, CLConnectionMessage **a3)
{
  NSSet *v6;
  const __CFDictionary *DictionaryOfClasses;
  void (*v8)(_QWORD *, BOOL, uint8_t *);
  uint64_t v9;
  _QWORD *v10;
  NSObject *v11;
  NSObject *v12;
  BOOL v14;
  uint8_t v15[16];
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;

  v6 = (NSSet *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  DictionaryOfClasses = (const __CFDictionary *)CLConnectionMessage::getDictionaryOfClasses(*a3, v6);
  sub_1001C1D6C((int)v15, DictionaryOfClasses);
  v14 = 0;
  if ((sub_1001E4874((uint64_t)v15, "kCLConnectionMessageSubscribeKey", &v14) & 1) != 0)
  {
    v8 = *(void (**)(_QWORD *, BOOL, uint8_t *))a1;
    v9 = *(_QWORD *)(a1 + 8);
    v10 = (_QWORD *)(a2 + (v9 >> 1));
    if ((v9 & 1) != 0)
      v8 = *(void (**)(_QWORD *, BOOL, uint8_t *))(*v10 + v8);
    v8(v10, v14, v15);
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102158708);
    v11 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289026;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_102158708);
    }
    v12 = qword_1022A01C8;
    if (os_signpost_enabled((os_log_t)qword_1022A01C8))
    {
      *(_DWORD *)buf = 68289026;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Couldn't get value for kCLConnectionMessageSubscribeKey key", "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
    }
  }
  return sub_10011A5A8(v15);
}

void sub_100875D68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

void sub_100875D84(id a1)
{
  qword_1022A01C8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

__n128 sub_100875DB0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_102158748;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100875DEC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_102158748;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100875E10(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_100875E60(a1 + 8, a2, a3);
}

uint64_t sub_100875E18(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100875E54()
{
}

void sub_100875E60(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  void (*v5)(_QWORD *, uint64_t *);
  uint64_t v6;
  _QWORD *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v4 = *a3;
  v3 = (std::__shared_weak_count *)a3[1];
  v15 = v3;
  *a3 = 0;
  a3[1] = 0;
  v5 = *(void (**)(_QWORD *, uint64_t *))a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(void (**)(_QWORD *, uint64_t *))(*v7 + v5);
  v16 = v4;
  v17 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v5(v7, &v16);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_100875F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100261F44((uint64_t)&a11);
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100875F50(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 56 * a3;
    do
    {
      sub_100875FC8(a1, a2, (__int128 *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_100875FB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E6A98(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100875FC8(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_10025A024(a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((sub_10025A4CC(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  sub_100876248(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_10012E444(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_1004E69F0((uint64_t)v25, 0);
  return i;
}

void sub_100876230(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004E69F0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_100876248@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = sub_1008762BC(v8 + 2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1008762A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E69F0(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_1008762BC(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_100270E34((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_100876314(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100876330@<X0>(char **a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_1004E6C04(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_10087637C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100876434(id a1)
{
  qword_102304F48 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLWatchOrientationSettingsNotifierSilo"));
}

uint64_t sub_1008764E8(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100876E8C;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_102304F68 != -1)
    dispatch_once(&qword_102304F68, block);
  return qword_102310CF8;
}

void sub_100876688(id a1)
{
  sub_100197040();
  if (sub_100195F08())
    byte_102304F58 = 1;
}

const void *sub_1008766B0(const void *a1, void *a2)
{
  _QWORD *v3;
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  v3 = (_QWORD *)sub_100876884((uint64_t)a1, "CLWatchOrientationSettingsNotifier", a2);
  *v3 = off_102158820;
  sub_100876920((uint64_t)v3);
  sub_100876DAC(a1);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_102158998);
  v4 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Watch Orientation,Orientation Notifier Instantiated", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102158998);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "Watch Orientation,Orientation Notifier Instantiated", v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "CLWatchOrientationSettingsNotifier::CLWatchOrientationSettingsNotifier(id<CLIntersiloUniverse>)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return a1;
}

void sub_10087686C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100876E18(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100876884(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_1021589C8;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_100876904(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_100876920(uint64_t a1)
{
  int v2;
  _BOOL4 v3;
  NSObject *v4;
  int v5;
  _BOOL4 v6;
  NSObject *v7;
  _BOOL4 v8;
  NSObject *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  const char *v14;
  uint8_t *v15;
  const char *v16;
  uint8_t *v17;
  const char *v18;
  uint8_t *v19;
  uint64_t v20;
  _DWORD v21[2];
  __int16 v22;
  int v23;
  uint8_t buf[4];
  int v25;
  __int16 v26;
  int v27;

  HIBYTE(v20) = 0;
  v2 = sub_100515900(CFSTR("invertUI"), CFSTR("com.apple.nano"), (_BYTE *)&v20 + 7);
  if (HIBYTE(v20))
  {
    v3 = v2 == 0;
  }
  else
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102158998);
    v4 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Watch Orientation,Crown orientation setting key is invalid, defaulting to crown on right (not inverted)", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102158998);
      LOWORD(v21[0]) = 0;
      LODWORD(v20) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 16, "Watch Orientation,Crown orientation setting key is invalid, defaulting to crown on right (not inverted)", v21, v20);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 0, "void CLWatchOrientationSettingsNotifier::queryOrientationSettings()", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
    v3 = 1;
  }
  *(_DWORD *)(a1 + 116) = v3;
  HIBYTE(v20) = 0;
  v5 = sub_100515900(CFSTR("wornOnRightArm"), CFSTR("com.apple.nano"), (_BYTE *)&v20 + 7);
  if (HIBYTE(v20))
  {
    v6 = v5 != 0;
  }
  else
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102158998);
    v7 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Watch Orientation,Wrist orientation setting key is invalid, defaulting to left wrist", buf, 2u);
    }
    v8 = sub_1001BFF7C(115, 0);
    v6 = 0;
    if (v8)
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102158998);
      LOWORD(v21[0]) = 0;
      LODWORD(v20) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 16, "Watch Orientation,Wrist orientation setting key is invalid, defaulting to left wrist", v21, v20);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 0, "void CLWatchOrientationSettingsNotifier::queryOrientationSettings()", "%s\n", v18);
      if (v19 != buf)
        free(v19);
      v6 = 0;
    }
  }
  *(_DWORD *)(a1 + 112) = v6;
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_102158998);
  v9 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
  {
    v11 = *(_DWORD *)(a1 + 112);
    v10 = *(_DWORD *)(a1 + 116);
    *(_DWORD *)buf = 67240448;
    v25 = v10;
    v26 = 1026;
    v27 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Watch Orientation,crown,%{public}d,wrist,%{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102158998);
    v13 = *(_DWORD *)(a1 + 112);
    v12 = *(_DWORD *)(a1 + 116);
    v21[0] = 67240448;
    v21[1] = v12;
    v22 = 1026;
    v23 = v13;
    LODWORD(v20) = 14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "Watch Orientation,crown,%{public}d,wrist,%{public}d", v21, v20);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLWatchOrientationSettingsNotifier::queryOrientationSettings()", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
}

void sub_100876DAC(const void *a1)
{
  __CFNotificationCenter *DarwinNotifyCenter;

  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(DarwinNotifyCenter, a1, (CFNotificationCallback)sub_1008775F4, CFSTR("com.apple.nano.invertUIChangedNotification"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  CFNotificationCenterAddObserver(DarwinNotifyCenter, a1, (CFNotificationCallback)sub_1008775F4, CFSTR("com.apple.nano.wristOrientationChangedNotification"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
}

uint64_t sub_100876E18(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021589C8;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_100876E8C()
{
  operator new();
}

void sub_100876ED4()
{
  operator delete();
}

uint64_t sub_100876EF8(_BYTE *a1)
{
  *(_QWORD *)a1 = off_102158820;
  sub_100876F54(a1);
  return sub_100876E18((uint64_t)a1);
}

void sub_100876F30(_BYTE *a1)
{
  sub_100876EF8(a1);
  operator delete();
}

void sub_100876F54(_BYTE *a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_102158998);
  v2 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Watch Orientation,Orientation Notifier is shutting down.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102158998);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "Watch Orientation,Orientation Notifier is shutting down.", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLWatchOrientationSettingsNotifier::shutdown()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  sub_1008770F4(a1);
  a1[108] = 1;
}

void sub_1008770F4(const void *a1)
{
  __CFNotificationCenter *DarwinNotifyCenter;

  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(DarwinNotifyCenter, a1, CFSTR("com.apple.nano.invertUIChangedNotification"), 0);
  CFNotificationCenterRemoveObserver(DarwinNotifyCenter, a1, CFSTR("com.apple.nano.wristOrientationChangedNotification"), 0);
}

_QWORD *sub_100877140@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1015A2E04(a2, __str);
}

uint64_t sub_1008771B8(_QWORD *a1, int *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  uint64_t v8;
  int v9;
  int v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  int v14[2];
  __int16 v15;
  int v16;
  uint8_t buf[8];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_102158998);
  v4 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    v14[0] = *a2;
    v5 = v14[0];
    v6 = sub_1001B7864((uint64_t)a1, v14, 1);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v5;
    LOWORD(v18) = 1024;
    *(_DWORD *)((char *)&v18 + 2) = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Watch Orientation,Added client for %d, count %d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102158998);
    v8 = qword_10229FC78;
    v9 = *a2;
    v13 = v9;
    v10 = sub_1001B7864((uint64_t)a1, &v13, 1);
    v14[0] = 67109376;
    v14[1] = v9;
    v15 = 1024;
    v16 = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, 2, "Watch Orientation,Added client for %d, count %d", v14, 14);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLWatchOrientationSettingsNotifier::registerForNotificationInternal(const CLWatchOrientationSettingsNotifier_Type::Notification &)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  v19 = 0;
  v20 = 0;
  *(_QWORD *)buf = a1[14];
  v18 = 0;
  v14[0] = 0;
  (*(void (**)(_QWORD *, int *, uint8_t *, uint64_t, uint64_t, _QWORD))(*a1 + 152))(a1, v14, buf, 1, 0xFFFFFFFFLL, 0);
  return 1;
}

uint64_t sub_1008773F0(uint64_t a1, int *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  uint64_t v8;
  int v9;
  int v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  int v14[2];
  __int16 v15;
  int v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  int v20;

  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_102158998);
  v4 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    v14[0] = *a2;
    v5 = v14[0];
    v6 = sub_1001B7864(a1, v14, 1);
    *(_DWORD *)buf = 67109376;
    v18 = v5;
    v19 = 1024;
    v20 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Watch Orientation,Removed client for %d, count %d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102158998);
    v8 = qword_10229FC78;
    v9 = *a2;
    v13 = v9;
    v10 = sub_1001B7864(a1, &v13, 1);
    v14[0] = 67109376;
    v14[1] = v9;
    v15 = 1024;
    v16 = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, 2, "Watch Orientation,Removed client for %d, count %d", v14, 14);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLWatchOrientationSettingsNotifier::unregisterForNotificationInternal(const CLWatchOrientationSettingsNotifier_Type::Notification &)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  return 1;
}

void sub_1008775F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v10;
  NSObject *v11;
  id v12;
  _QWORD v13[9];
  os_activity_scope_state_s state;
  char v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;

  CLProfilingIdentify("CLWatchOrientationSettingsNotifier::onOrientationSettingsChanged");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertOutside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102158978);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v15 = 1;
    v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWatchOrientationSettingsNotifier::onOrientationSettingsChanged", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102158978);
    v11 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2082;
      v21 = "activity";
      v22 = 2050;
      v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWatchOrientationSettingsNotifier::onOrientationSettingsChanged\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v15 = 0;
  }
  v12 = objc_msgSend(*(id *)(a2 + 32), "silo");
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100879544;
  v13[3] = &unk_1021382B0;
  v13[4] = a2;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  objc_msgSend(v12, "sync:", v13);
  if (v15)
    os_activity_scope_leave(&state);
}

void sub_1008777F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100877814()
{
  operator new();
}

void sub_1008778C0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

uint64_t sub_1008778FC(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  id v13;
  id v14;

  *(_QWORD *)a1 = off_102158B18;
  *(_QWORD *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]([CLNotifierClientAdapter alloc], "initWithClient:", a1);
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0)
    v12 = a3;
  else
    v12 = (uint64_t *)*a3;
  v13 = objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(_QWORD *)(a1 + 16) = v13;
  v14 = v13;
  if (a2)
    objc_msgSend(*(id *)(a1 + 16), "setDelegateEntityName:", a2);
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

void sub_1008779D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102158978);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_102158978);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData>::removeClient(int) [Notification_T = CLWatchOrientationSettingsNotifier_Type::Notification, NotificationData_T = CLWatchOrientationSettingsNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

uint64_t sub_100877C44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022A49B8);
}

uint64_t sub_100877C58(uint64_t a1, int a2, int *a3, char *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t *v29;
  char v30;
  uint64_t **v31;
  char v32;
  uint64_t **v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  const char *v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _BYTE v42[12];
  __int16 v43;
  int v44;
  uint8_t buf[1640];

  v41 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(_QWORD *)v42 = v10;
      v17 = *a3;
      v20 = *(_QWORD *)(v10 + 48);
      v19 = v10 + 48;
      v18 = v20;
      if (!v20)
        goto LABEL_31;
      v21 = v19;
      do
      {
        v22 = *(_DWORD *)(v18 + 28);
        v23 = v22 < v17;
        if (v22 >= v17)
          v24 = (uint64_t *)v18;
        else
          v24 = (uint64_t *)(v18 + 8);
        if (!v23)
          v21 = v18;
        v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28))
LABEL_31:
        v21 = v19;
      v25 = *(_QWORD *)(a1 + 64);
      if (!v25)
        goto LABEL_42;
      v26 = a1 + 64;
      do
      {
        v27 = *(_DWORD *)(v25 + 32);
        v28 = v27 < v17;
        if (v27 >= v17)
          v29 = (uint64_t *)v25;
        else
          v29 = (uint64_t *)(v25 + 8);
        if (!v28)
          v26 = v25;
        v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        v40 = v26;
        v34 = *(_QWORD *)(v26 + 56);
        v35 = *a4;
        *(_QWORD *)buf = &v41;
        *((_BYTE *)sub_1001AFE94((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v35;
        memset(buf, 0, 32);
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, uint8_t *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_10087A058();
        }
        if (v34)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        v40 = a1 + 64;
        v30 = byte_1022A49B9;
        HIDWORD(v39) = v17;
        *(_QWORD *)buf = (char *)&v39 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v30;
        HIDWORD(v39) = *a3;
        *(_QWORD *)buf = (char *)&v39 + 4;
        v31 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v31 + 8);
        v32 = *a4;
        HIDWORD(v39) = *a3;
        *(_QWORD *)buf = (char *)&v39 + 4;
        v33 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)buf = &v41;
        *((_BYTE *)sub_1001AFE94(v33 + 5, &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v32;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        *(_DWORD *)buf = *a3;
        sub_1000C6190((uint64_t **)(*(_QWORD *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102158978);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v15;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  v16 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102158978);
    v36 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v36 = (_QWORD *)*v36;
    *(_DWORD *)v42 = 136446466;
    *(_QWORD *)&v42[4] = v36;
    v43 = 1026;
    v44 = a2;
    LODWORD(v39) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
      v42,
      v39);
    v38 = (uint8_t *)v37;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLWatchOrientationSettingsNotifier_Type::Notification, NotificationData_T = CLWatchOrientationSettingsNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v37);
    if (v38 != buf)
      free(v38);
    return 0;
  }
  return result;
}

BOOL sub_1008780B8(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102158978);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102158978);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLWatchOrientationSettingsNotifier_Type::Notification, NotificationData_T = CLWatchOrientationSettingsNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

BOOL sub_100878338(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE buf[12];
  __int16 v36;
  void **v37;
  char v38;
  int v39;
  _QWORD *v40;
  __int16 v41;
  _BYTE *v42;
  void *__p[2];
  char v44;

  HIDWORD(v34) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009E904((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102158978);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v44 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v36 = 2082;
                v37 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_102158978);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v38 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v39 = 136446466;
                v40 = v29;
                v41 = 2082;
                v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                v33 = v32;
                if (v38 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLWatchOrientationSettingsNotifier_Type::Notification, NotificationData_T = CLWatchOrientationSettingsNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v33);
                if (v33 != (char *)__p)
                  free(v33);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_1008786C0(uint64_t a1, int *a2, _OWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t *v10;
  _OWORD *v11;
  __int128 v12;

  v5 = *(_QWORD *)(a1 + 64);
  v3 = a1 + 64;
  v4 = v5;
  if (!v5)
    return 0;
  v6 = *a2;
  v7 = v3;
  do
  {
    v8 = *(_DWORD *)(v4 + 32);
    v9 = v8 < v6;
    if (v8 >= v6)
      v10 = (uint64_t *)v4;
    else
      v10 = (uint64_t *)(v4 + 8);
    if (!v9)
      v7 = v4;
    v4 = *v10;
  }
  while (*v10);
  if (v7 == v3)
    return 0;
  if (v6 < *(_DWORD *)(v7 + 32))
    return 0;
  v11 = *(_OWORD **)(v7 + 64);
  if (!v11)
    return 0;
  v12 = v11[1];
  *a3 = *v11;
  a3[1] = v12;
  return 1;
}

uint64_t sub_100878720(uint64_t a1, int *a2, _OWORD *a3)
{
  char *v6;
  __int128 v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  int v13;
  __int128 v14;
  int *v15;

  v6 = (char *)operator new(0x38uLL);
  v7 = a3[1];
  *(_OWORD *)(v6 + 24) = *a3;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = off_102158AA8;
  *((_QWORD *)v6 + 1) = 0;
  *(_OWORD *)(v6 + 40) = v7;
  *(_QWORD *)&v14 = v6 + 24;
  *((_QWORD *)&v14 + 1) = v6;
  v13 = *a2;
  v15 = &v13;
  v8 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v13, (uint64_t)&unk_101B9EB60, &v15);
  sub_1002B7674((uint64_t)(v8 + 8), &v14);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return 1;
}

void sub_1008787F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10087880C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _OWORD v5[2];

  memset(v5, 0, sizeof(v5));
  return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, a2, v5, a3, a4, 0);
}

void sub_100878848(uint64_t a1, signed __int32 *a2, _OWORD *a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  char *v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  os_activity_scope_state_s state;
  uint8_t buf[8];
  _BYTE v31[20];
  __int16 v32;
  _QWORD *v33;
  __int16 v34;
  std::__shared_weak_count *v35;
  _QWORD **v36;
  _QWORD *v37[3];
  std::__shared_weak_count *v38;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102158978);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v31 = 2082;
      *(_QWORD *)&v31[2] = "";
      *(_WORD *)&v31[10] = 2082;
      *(_QWORD *)&v31[12] = "activity";
      v32 = 2082;
      v33 = v10;
      v34 = 2050;
      v35 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v36 = v37;
      memset(v37, 0, sizeof(v37));
      v38 = 0;
      sub_1004A6D60((uint64_t)buf, a2, (uint64_t)&v36);
      v14 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)buf);
      v18 = v35;
      if (v35)
      {
        p_shared_owners = (unint64_t *)&v35->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v31, *(_QWORD **)&v31[8]);
      v21 = v38;
      if (v38)
      {
        v22 = (unint64_t *)&v38->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v36, v37[0]);
    }
    if (a4)
    {
      v24 = (char *)operator new(0x38uLL);
      *((_QWORD *)v24 + 1) = 0;
      *((_QWORD *)v24 + 2) = 0;
      *(_QWORD *)v24 = off_102158AA8;
      v25 = a3[1];
      *(_OWORD *)(v24 + 24) = *a3;
      *(_OWORD *)(v24 + 40) = v25;
      *(_QWORD *)buf = v24 + 24;
      *(_QWORD *)v31 = v24;
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)buf);
      v26 = *(std::__shared_weak_count **)v31;
      if (*(_QWORD *)v31)
      {
        v27 = (unint64_t *)(*(_QWORD *)v31 + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_1008795A4();
    os_activity_scope_leave(&state);
  }
}

void sub_100878E84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_100878ED0(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102158978);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102158978);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData>::listClients() [Notification_T = CLWatchOrientationSettingsNotifier_Type::Notification, NotificationData_T = CLWatchOrientationSettingsNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102158978);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102158978);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData>::listClients() [Notification_T = CLWatchOrientationSettingsNotifier_Type::Notification, NotificationData_T = CLWatchOrientationSettingsNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_102158978);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102158978);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData>::listClients() [Notification_T = CLWatchOrientationSettingsNotifier_Type::Notification, NotificationData_T = CLWatchOrientationSettingsNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_10087947C(uint64_t a1)
{
  sub_100879FF8(a1);
  operator delete();
}

id sub_1008794A0(uint64_t a1, uint64_t a2, void *a3)
{
  int v3;
  id result;
  int v6;

  v3 = a2;
  result = sub_100879B54(a3, a2);
  if (result)
  {
    v6 = v3;
    return (id)(*(uint64_t (**)(_QWORD, int *, id, _QWORD))(a1 + 24))(0, &v6, result, *(_QWORD *)(a1 + 32));
  }
  return result;
}

void sub_1008794EC(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100879518(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_100879544(uint64_t a1)
{
  _QWORD *v1;
  int v3;
  _QWORD v4[4];

  v1 = *(_QWORD **)(a1 + 32);
  sub_100876920((uint64_t)v1);
  v4[0] = v1[14];
  memset(&v4[1], 0, 24);
  v3 = 0;
  return (*(uint64_t (**)(_QWORD *, int *, _QWORD *, uint64_t, uint64_t, _QWORD))(*v1 + 152))(v1, &v3, v4, 1, 0xFFFFFFFFLL, 0);
}

void sub_1008795A4()
{
  operator new();
}

void sub_100879634(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  id v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  const char *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  __int16 v54;
  int v55;
  uint8_t buf[4];
  _QWORD *v57;
  __int16 v58;
  int v59;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v51 = v9;
        v13 = sub_100879B54(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, id, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 7);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v50 = v19;
              sub_100879A08(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v51 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 28);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 28);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v50 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102158978);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                v57 = v25;
                v58 = 1026;
                v59 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_102158978);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 7);
                v52 = 136446466;
                v53 = v45;
                v54 = 1026;
                v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                v48 = (uint8_t *)v47;
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLWatchOrientationSettingsNotifier_Type::Notification, NotificationData_T = CLWatchOrientationSettingsNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v48 != buf)
                  free(v48);
              }
            }
          }
          while (v14 != v51 + 6);
        }
      }
    }
  }
}

_BYTE *sub_100879A08(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  int *v14;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    v9 = sub_100879B54(a4, a2);
    v10 = *(_QWORD *)a3 + 80;
    v11 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v14 = (int *)(*(_QWORD *)a2 + 32);
    v12 = sub_1001AFE94(v11, v14, (uint64_t)&unk_101B9EB60, &v14);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v13);
  }
  return result;
}

void sub_100879AE4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102158AA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100879AF8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102158AA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100879B34(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

id sub_100879B54(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = objc_opt_class(CLCppEncodableDataContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_100879BCC(a1);
  v6 = objc_opt_class(CLCppContainer, v4);
  if ((objc_opt_isKindOfClass(a1, v6) & 1) != 0)
    return sub_100879D84(a1);
  else
    return 0;
}

id sub_100879BCC(void *a1)
{
  id v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v7;
  char v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return sub_100879F58((uint64_t)&v8, a1);
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102158AE8);
    v3 = qword_10229FC38;
    if (!os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
      return 0;
    *(_DWORD *)buf = 134218498;
    v10 = v2;
    v11 = 2048;
    v12 = 0;
    v13 = 2080;
    v14 = 0x8000000101BE501ALL & 0x7FFFFFFFFFFFFFFFLL;
    v4 = v3;
    v5 = OS_LOG_TYPE_ERROR;
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102158AE8);
    v7 = qword_10229FC38;
    if (!os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
      return 0;
    *(_DWORD *)buf = 134218498;
    v10 = v2;
    v11 = 2048;
    v12 = 0;
    v13 = 2080;
    v14 = 0x8000000101BE501ALL & 0x7FFFFFFFFFFFFFFFLL;
    v4 = v7;
    v5 = OS_LOG_TYPE_FAULT;
  }
  _os_log_impl((void *)&_mh_execute_header, v4, v5, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
  return 0;
}

id sub_100879D84(void *a1)
{
  id v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v7;
  int v8;
  id v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  unint64_t v13;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102158AE8);
    v3 = qword_10229FC38;
    if (!os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
      return 0;
    v8 = 134218498;
    v9 = v2;
    v10 = 2048;
    v11 = 0;
    v12 = 2080;
    v13 = 0x8000000101BE501ALL & 0x7FFFFFFFFFFFFFFFLL;
    v4 = v3;
    v5 = OS_LOG_TYPE_ERROR;
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102158AE8);
    v7 = qword_10229FC38;
    if (!os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
      return 0;
    v8 = 134218498;
    v9 = v2;
    v10 = 2048;
    v11 = 0;
    v12 = 2080;
    v13 = 0x8000000101BE501ALL & 0x7FFFFFFFFFFFFFFFLL;
    v4 = v7;
    v5 = OS_LOG_TYPE_FAULT;
  }
  _os_log_impl((void *)&_mh_execute_header, v4, v5, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", (uint8_t *)&v8, 0x20u);
  return 0;
}

id sub_100879F58(uint64_t a1, void *a2)
{
  if (!objc_msgSend(a2, "cppObjectPtr")
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_10221B6F0))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)32)
      sub_10190D128();
    objc_msgSend(a2, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a2, "serialized"), "bytes"));
  }
  return objc_msgSend(a2, "cppObjectPtr");
}

void sub_100879FCC(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t sub_100879FF8(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = off_102158B18;
  v2 = (id *)(a1 + 8);
  objc_msgSend(*(id *)(a1 + 16), "forget:", *(_QWORD *)(a1 + 8));

  objc_msgSend(*v2, "invalidate");
  *v2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void sub_10087A058()
{
  operator new();
}

uint64_t sub_10087A0E8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

uint64_t sub_10087A108(uint64_t a1)
{
  BOOL *v2;
  float *v8;
  uint64_t v9;
  _BYTE *v10;
  char v11;
  char v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  float *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  NSObject *v29;
  int v30;
  _BOOL4 v31;
  double v32;
  double v33;
  _BOOL4 v35;
  double v36;
  double v37;
  const char *v38;
  uint8_t *v39;
  double v40;
  double v41;
  double v42;
  __int16 v43;
  double v44;
  uint8_t buf[8];
  std::__shared_weak_count *v46;
  double v47;
  __int16 v48;
  double v49;

  *(_QWORD *)a1 = off_102158B40;
  *(_BYTE *)(a1 + 13) = 1;
  v2 = (BOOL *)(a1 + 13);
  *(_DWORD *)(a1 + 8) = 1065353216;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(a1 + 16) = _D0;
  v8 = (float *)(a1 + 16);
  sub_1008A4D88(a1 + 24, 2065, 0);
  v9 = sub_100127B9C();
  sub_100081C10(v9, buf);
  v10 = (_BYTE *)(a1 + 12);
  v11 = sub_1001E4874(*(uint64_t *)buf, "EnableStepperLoadCal", (BOOL *)(a1 + 12));
  v12 = v11;
  v13 = v46;
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      if ((v12 & 1) != 0)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  if ((v11 & 1) == 0)
LABEL_6:
    *v10 = 0;
LABEL_7:
  v16 = sub_100127B9C();
  sub_100081C10(v16, buf);
  sub_1001E4874(*(uint64_t *)buf, "EnableStepperHRModel", v2);
  v17 = v46;
  if (v46)
  {
    v18 = (unint64_t *)&v46->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = sub_100127B9C();
  sub_100081C10(v20, buf);
  sub_100526804(*(uint64_t *)buf, "StairModelMetsScale", v8);
  v21 = v46;
  if (v46)
  {
    v22 = (unint64_t *)&v46->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = sub_100127B9C();
  sub_100081C10(v24, buf);
  v25 = (float *)(a1 + 20);
  sub_100526804(*(uint64_t *)buf, "StepperVO2MaxScalingFactor", (float *)(a1 + 20));
  v26 = v46;
  if (v46)
  {
    v27 = (unint64_t *)&v46->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_102158B80);
  v29 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    v30 = *v10;
    v31 = *v2;
    v32 = *v8;
    v33 = *v25;
    *(_DWORD *)buf = 67109888;
    *(_DWORD *)&buf[4] = v30;
    LOWORD(v46) = 1024;
    *(_DWORD *)((char *)&v46 + 2) = v31;
    HIWORD(v46) = 2048;
    v47 = v32;
    v48 = 2048;
    v49 = v33;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "Stair Climbing, load calibration, %d, HR mode, %d, mets scaling factor, %f, VO2max scaling factor, %f", buf, 0x22u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102158B80);
    v35 = *v2;
    v36 = *v8;
    v37 = *v25;
    v40 = COERCE_DOUBLE(__PAIR64__(*v10, 67109888));
    LOWORD(v41) = 1024;
    *(_DWORD *)((char *)&v41 + 2) = v35;
    HIWORD(v41) = 2048;
    v42 = v36;
    v43 = 2048;
    v44 = v37;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "Stair Climbing, load calibration, %d, HR mode, %d, mets scaling factor, %f, VO2max scaling factor, %f", &v40, 34, v40, v41);
    v39 = (uint8_t *)v38;
    sub_100512490("Generic", 1, 0, 2, "CLNatalieStairClimbingModel::CLNatalieStairClimbingModel()", "%s\n", v38);
    if (v39 != buf)
      free(v39);
  }
  return a1;
}

void sub_10087A4F8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_10087A53C(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10087A53C(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[12];
  if (v3)
  {
    a1[13] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[9];
  if (v4)
  {
    a1[10] = v4;
    operator delete(v4);
  }
  sub_100261F44((uint64_t)(a1 + 7));
  v5 = (void *)a1[3];
  if (v5)
  {
    a1[4] = v5;
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_10087A5A8(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  _BYTE v6[232];

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 48) + 48))(*(_QWORD *)(a3 + 48));
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(_QWORD, _BYTE *, double))(**(_QWORD **)(a3 + 48) + 24))(*(_QWORD *)(a3 + 48), v6, a1);
    if (v6[208])
      return sub_1004C5730(*(_QWORD *)(a3 + 8));
  }
  return result;
}

uint64_t sub_10087A640(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 48))(*(_QWORD *)(a2 + 8));
}

void sub_10087A650(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  double v11;
  float v12;
  float v13;
  NSObject *v14;
  double v15;
  float v16;
  double v17;
  double v18;
  double v19;
  float v20;
  float v21;
  float v22;
  float v23;
  NSObject *v24;
  int v25;
  NSObject *v26;
  double v27;
  int v28;
  float v29;
  NSObject *v30;
  double v31;
  double v32;
  const char *v33;
  uint8_t *v34;
  double v35;
  const char *v36;
  uint8_t *v37;
  const char *v38;
  uint8_t *v39;
  double v40;
  const char *v41;
  uint8_t *v42;
  double v43;
  double v44;
  double v45;
  int v46;
  double v47;
  __int16 v48;
  double v49;
  __int16 v50;
  double v51;
  __int16 v52;
  double v53;
  __int16 v54;
  double v55;
  __int16 v56;
  double v57;
  uint8_t buf[4];
  double v59;
  __int16 v60;
  double v61;
  __int16 v62;
  double v63;
  __int16 v64;
  double v65;
  __int16 v66;
  double v67;
  __int16 v68;
  double v69;

  v6 = *(float *)(a2 + 1368);
  v7 = *(float *)(a2 + 1372);
  v8 = *(float *)(a2 + 1376);
  v9 = *(float *)(a2 + 1380);
  v10 = *(float *)(a2 + 304);
  v11 = *(double *)(a2 + 128);
  HIBYTE(v45) = 0;
  v12 = (float)(fmaxf(v10, 0.0) * 4.5665) + 2.9705;
  if (v10 <= 0.0)
    v13 = 2.1;
  else
    v13 = v12;
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_102158B80);
  v14 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    v15 = *(double *)(a2 + 600);
    *(_DWORD *)buf = 134218752;
    v59 = v11;
    v60 = 2048;
    v61 = v10;
    v62 = 2048;
    v63 = v13;
    v64 = 2048;
    v65 = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Stair Climbing, Work Rate Model, timestamp, %f, step frequency, %f, WRMETS, %f, sinceLastGood, %f", buf, 0x2Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102158B80);
    v32 = *(double *)(a2 + 600);
    v46 = 134218752;
    v47 = v11;
    v48 = 2048;
    v49 = v10;
    v50 = 2048;
    v51 = v13;
    v52 = 2048;
    v53 = v32;
    LODWORD(v43) = 42;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "Stair Climbing, Work Rate Model, timestamp, %f, step frequency, %f, WRMETS, %f, sinceLastGood, %f", COERCE_DOUBLE(&v46), v43, v44, v45);
    v34 = (uint8_t *)v33;
    sub_100512490("Generic", 1, 0, 2, "virtual CLMetsInfo CLNatalieStairClimbingModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v33);
    if (v34 != buf)
      free(v34);
  }
  if (*(_BYTE *)(a1 + 13) && sub_100219944(a2) && *(double *)(a2 + 600) < *(double *)a2)
  {
    v16 = *(double *)(a2 + 560);
    v17 = v16;
    v18 = v8;
    v19 = v9;
    v20 = (v19 - v16) / (v19 - v18);
    v21 = v6 * sub_10108B14C(v20, v7);
    v22 = *(float *)(a1 + 20);
    if (qword_10229FC90 != -1)
    {
      LODWORD(v45) = *(_DWORD *)(a1 + 20);
      dispatch_once(&qword_10229FC90, &stru_102158B80);
      v22 = *(float *)&v45;
    }
    v23 = v21 * v22;
    v24 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134219264;
      v59 = v11;
      v60 = 2048;
      v61 = v17;
      v62 = 2048;
      v63 = v19;
      v64 = 2048;
      v65 = v18;
      v66 = 2048;
      v67 = v6;
      v68 = 2048;
      v69 = v23;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "Stair Climbing, HR Rate Model, timestamp, %f, catherine(cpm), %f, catherinemax(cpm), %f, catherinemin(cpm), %f, vo2max(METs), %f, METS, %f", buf, 0x3Eu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_102158B80);
      v46 = 134219264;
      v47 = v11;
      v48 = 2048;
      v49 = v17;
      v50 = 2048;
      v51 = v19;
      v52 = 2048;
      v53 = v18;
      v54 = 2048;
      v55 = v6;
      v56 = 2048;
      v57 = v23;
      LODWORD(v43) = 62;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "Stair Climbing, HR Rate Model, timestamp, %f, catherine(cpm), %f, catherinemax(cpm), %f, catherinemin(cpm), %f, vo2max(METs), %f, METS, %f", COERCE_DOUBLE(&v46), v43, v44, v45);
      v39 = (uint8_t *)v38;
      sub_100512490("Generic", 1, 0, 2, "virtual CLMetsInfo CLNatalieStairClimbingModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v38);
      if (v39 != buf)
        free(v39);
    }
    if (*(_BYTE *)(a1 + 12))
    {
      sub_1008A4D8C((char *)(a1 + 24), a2, (_BYTE *)&v45 + 7, v11, v23, v13);
      *(_DWORD *)(a1 + 8) = v25;
    }
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102158B80);
    v26 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
    {
      v27 = *(float *)(a1 + 8);
      *(_DWORD *)buf = 134219008;
      v59 = v11;
      v60 = 2048;
      v61 = v23;
      v62 = 2048;
      v63 = v13;
      v64 = 2048;
      v65 = v27;
      v66 = 1024;
      LODWORD(v67) = HIBYTE(v45);
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "Stair Climbing, timestamp, %f, HRMETs, %f, WRMETs, %f, calibrationValue, %f, loadCalStatus, %d", buf, 0x30u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_102158B80);
      v40 = *(float *)(a1 + 8);
      v46 = 134219008;
      v47 = v11;
      v48 = 2048;
      v49 = v23;
      v50 = 2048;
      v51 = v13;
      v52 = 2048;
      v53 = v40;
      v54 = 1024;
      LODWORD(v55) = HIBYTE(v45);
      LODWORD(v43) = 48;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "Stair Climbing, timestamp, %f, HRMETs, %f, WRMETs, %f, calibrationValue, %f, loadCalStatus, %d", COERCE_DOUBLE(&v46), v43, v44, v45);
      v42 = (uint8_t *)v41;
      sub_100512490("Generic", 1, 0, 2, "virtual CLMetsInfo CLNatalieStairClimbingModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v41);
      if (v42 != buf)
        free(v42);
    }
    v28 = 1;
    v29 = v23;
  }
  else
  {
    v28 = 0;
    v23 = v13 * *(float *)(a1 + 8);
    v29 = 0.0;
  }
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_102158B80);
  v30 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    v31 = *(float *)(a1 + 16);
    *(_DWORD *)buf = 134218496;
    v59 = v11;
    v60 = 2048;
    v61 = v23;
    v62 = 2048;
    v63 = v31;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "Stair Climbing, timestamp, %f, finalMETS, %f, fMetsScaling, %f", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102158B80);
    v35 = *(float *)(a1 + 16);
    v46 = 134218496;
    v47 = v11;
    v48 = 2048;
    v49 = v23;
    v50 = 2048;
    v51 = v35;
    LODWORD(v43) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "Stair Climbing, timestamp, %f, finalMETS, %f, fMetsScaling, %f", COERCE_DOUBLE(&v46), v43, v44);
    v37 = (uint8_t *)v36;
    sub_100512490("Generic", 1, 0, 2, "virtual CLMetsInfo CLNatalieStairClimbingModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v36);
    if (v37 != buf)
      free(v37);
  }
  *(float *)a3 = v29;
  *(float *)(a3 + 4) = v13;
  *(_DWORD *)(a3 + 8) = 0;
  *(float *)(a3 + 12) = v13;
  *(_DWORD *)(a3 + 16) = 0;
  *(float *)(a3 + 20) = v23 * *(float *)(a1 + 16);
  *(_DWORD *)(a3 + 24) = v28;
  *(_DWORD *)(a3 + 28) = 0;
  *(_QWORD *)(a3 + 32) = 0xA00000003;
}

_QWORD *sub_10087AE74(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *a1 = off_102158B40;
  v2 = (void *)a1[18];
  if (v2)
  {
    a1[19] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[15];
  if (v3)
  {
    a1[16] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[12];
  if (v4)
  {
    a1[13] = v4;
    operator delete(v4);
  }
  sub_100261F44((uint64_t)(a1 + 10));
  v5 = (void *)a1[6];
  if (v5)
  {
    a1[7] = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_10087AEE8(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *a1 = off_102158B40;
  v2 = (void *)a1[18];
  if (v2)
  {
    a1[19] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[15];
  if (v3)
  {
    a1[16] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[12];
  if (v4)
  {
    a1[13] = v4;
    operator delete(v4);
  }
  sub_100261F44((uint64_t)(a1 + 10));
  v5 = (void *)a1[6];
  if (v5)
  {
    a1[7] = v5;
    operator delete(v5);
  }
  operator delete();
}

void sub_10087AF6C(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_10087AF98(int a1)
{
  if (a1)
    operator new();
  operator new();
}

void sub_10087B0C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
    sub_10190D298(a10);
  operator delete();
}

_QWORD *sub_10087B114(_QWORD *result, uint64_t a2)
{
  *result = off_102158BB0;
  result[1] = a2;
  return result;
}

void sub_10087B124(uint64_t a1, uint64_t a2)
{
  id v3;
  id v4;
  void **v5;
  id v6;
  NSData *v7;
  NSObject *v8;
  id v9;
  uint64_t v10;
  id v11;
  const char *v12;
  uint8_t *v13;
  id v14;
  void *v15;
  id v16;
  int v17;
  id v18;
  uint8_t buf[16];
  uint64_t v20;

  v3 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLClientManager"));
  v4 = objc_msgSend(v3, "syncgetNonSystemLocationClientKey");
  if (v4)
  {
    sub_1015A2E04(buf, (char *)objc_msgSend(v4, "UTF8String"));
    v5 = (void **)(a2 + 48);
    if (*(char *)(a2 + 71) < 0)
      operator delete(*v5);
    *(_OWORD *)v5 = *(_OWORD *)buf;
    *(_QWORD *)(a2 + 64) = v20;
  }
  else
  {
    std::string::assign((std::string *)(a2 + 48), "");
  }
  v6 = objc_msgSend(v3, "syncgetLocationClientKeys");
  if (objc_msgSend(v6, "count"))
  {
    v16 = 0;
    v7 = +[NSJSONSerialization dataWithJSONObject:options:error:](NSJSONSerialization, "dataWithJSONObject:options:error:", objc_msgSend(v6, "allObjects"), 1, &v16);
    if (v16)
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_102158C08);
      v8 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
      {
        v9 = objc_msgSend(objc_msgSend(v16, "description"), "UTF8String");
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#warning: error serializing json data, error, %s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_102158C08);
        v10 = qword_1022A0208;
        v11 = objc_msgSend(objc_msgSend(v16, "description"), "UTF8String");
        v17 = 136315138;
        v18 = v11;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 0, "#warning: error serializing json data, error, %s", (const char *)&v17);
        v13 = (uint8_t *)v12;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLPolicyTripExternal::applyBundleId(CLTracksHarvestDataType::HarvestData &)", "%s\n", v12);
        if (v13 != buf)
          free(v13);
      }
    }
    else
    {
      v14 = objc_msgSend(objc_alloc((Class)NSString), "initWithData:encoding:", v7, 4);
      v15 = v14;
      if (v14)
      {
        std::string::assign((std::string *)(a2 + 72), (const std::string::value_type *)objc_msgSend(v14, "UTF8String"));

      }
    }
  }
  else
  {
    std::string::assign((std::string *)(a2 + 72), "");
  }
}

uint64_t sub_10087B3E0()
{
  return 0;
}

__n128 sub_10087B3E8@<Q0>(uint64_t a1@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  CLMotionActivity v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  CLMotionActivity::init(&v6);
  v2 = v9;
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 112) = v2;
  *(_QWORD *)(a1 + 128) = v10;
  v3 = *(_OWORD *)&v6.isVehicleConnected;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)&v6.isStanding;
  *(_OWORD *)(a1 + 48) = v3;
  v4 = v7;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)&v6.vehicleType;
  *(_OWORD *)(a1 + 80) = v4;
  result = *(__n128 *)&v6.mountedConfidence;
  *(_OWORD *)a1 = *(_OWORD *)&v6.type;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

id sub_10087B44C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v3;
  uint64_t v5;
  void **v6;

  v3 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor", 0, 0, 0), "proxyForService:", CFSTR("CLTelephonyService")), "syncgetServingCells:addNeighborCells:", &v5, a3);
  v6 = (void **)&v5;
  sub_10087B4F8(&v6);
  return v3;
}

void sub_10087B4B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_10087B4F8(&a12);
  _Unwind_Resume(a1);
}

void sub_10087B4CC(id a1)
{
  qword_1022A0208 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

void sub_10087B4F8(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 696;
        sub_1005A9904((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_10087B57C(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  if (*(_BYTE *)(a1 + 696))
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v4 = *(_OWORD *)(a2 + 16);
    v5 = *(_OWORD *)(a2 + 32);
    v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
    *(_OWORD *)(a1 + 32) = v5;
    *(_OWORD *)(a1 + 48) = v6;
    *(_OWORD *)(a1 + 16) = v4;
    *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
    if (a1 != a2)
      sub_1002A3054((char *)(a1 + 88), *(char **)(a2 + 88), *(_QWORD *)(a2 + 96), (uint64_t)(*(_QWORD *)(a2 + 96) - *(_QWORD *)(a2 + 88)) >> 2);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    v7 = *(_OWORD *)(a2 + 128);
    v8 = *(_OWORD *)(a2 + 144);
    v9 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v9;
    *(_OWORD *)(a1 + 128) = v7;
    *(_OWORD *)(a1 + 144) = v8;
    v10 = *(_OWORD *)(a2 + 192);
    v11 = *(_OWORD *)(a2 + 208);
    v12 = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 240) = v12;
    *(_OWORD *)(a1 + 192) = v10;
    *(_OWORD *)(a1 + 208) = v11;
    v13 = *(_OWORD *)(a2 + 256);
    v14 = *(_OWORD *)(a2 + 272);
    v15 = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 300) = *(_OWORD *)(a2 + 300);
    *(_OWORD *)(a1 + 272) = v14;
    *(_OWORD *)(a1 + 288) = v15;
    *(_OWORD *)(a1 + 256) = v13;
    std::string::operator=((std::string *)(a1 + 320), (const std::string *)(a2 + 320));
    v17 = *(_OWORD *)(a2 + 360);
    v16 = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 344) = *(_OWORD *)(a2 + 344);
    *(_OWORD *)(a1 + 360) = v17;
    *(_OWORD *)(a1 + 376) = v16;
    v18 = *(_OWORD *)(a2 + 440);
    v20 = *(_OWORD *)(a2 + 392);
    v19 = *(_OWORD *)(a2 + 408);
    *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
    *(_OWORD *)(a1 + 440) = v18;
    *(_OWORD *)(a1 + 392) = v20;
    *(_OWORD *)(a1 + 408) = v19;
    v22 = *(_OWORD *)(a2 + 472);
    v21 = *(_OWORD *)(a2 + 488);
    v23 = *(_OWORD *)(a2 + 456);
    *(_DWORD *)(a1 + 504) = *(_DWORD *)(a2 + 504);
    *(_OWORD *)(a1 + 472) = v22;
    *(_OWORD *)(a1 + 488) = v21;
    *(_OWORD *)(a1 + 456) = v23;
    v24 = *(_OWORD *)(a2 + 640);
    v25 = *(_OWORD *)(a2 + 656);
    v26 = *(_OWORD *)(a2 + 672);
    *(_DWORD *)(a1 + 688) = *(_DWORD *)(a2 + 688);
    *(_OWORD *)(a1 + 656) = v25;
    *(_OWORD *)(a1 + 672) = v26;
    *(_OWORD *)(a1 + 640) = v24;
    v27 = *(_OWORD *)(a2 + 576);
    v28 = *(_OWORD *)(a2 + 592);
    v29 = *(_OWORD *)(a2 + 624);
    *(_OWORD *)(a1 + 608) = *(_OWORD *)(a2 + 608);
    *(_OWORD *)(a1 + 624) = v29;
    *(_OWORD *)(a1 + 576) = v27;
    *(_OWORD *)(a1 + 592) = v28;
    v30 = *(_OWORD *)(a2 + 512);
    v31 = *(_OWORD *)(a2 + 528);
    v32 = *(_OWORD *)(a2 + 560);
    *(_OWORD *)(a1 + 544) = *(_OWORD *)(a2 + 544);
    *(_OWORD *)(a1 + 560) = v32;
    *(_OWORD *)(a1 + 512) = v30;
    *(_OWORD *)(a1 + 528) = v31;
  }
  else
  {
    sub_10087B718(a1, a2);
    *(_BYTE *)(a1 + 696) = 1;
  }
  return a1;
}

uint64_t sub_10087B6D0(uint64_t a1)
{
  void *v2;

  if (*(_BYTE *)(a1 + 696))
  {
    if (*(char *)(a1 + 343) < 0)
      operator delete(*(void **)(a1 + 320));
    v2 = *(void **)(a1 + 88);
    if (v2)
    {
      *(_QWORD *)(a1 + 96) = v2;
      operator delete(v2);
    }
  }
  return a1;
}

uint64_t sub_10087B718(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_OWORD *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  v7 = a2 + 80;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v8 = a1 + 88;
  *(_QWORD *)(a1 + 104) = 0;
  sub_10027205C((_QWORD *)(a1 + 88), *(const void **)(a2 + 88), *(_QWORD *)(a2 + 96), (uint64_t)(*(_QWORD *)(a2 + 96) - *(_QWORD *)(a2 + 88)) >> 2);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(v7 + 32);
  v9 = *(_OWORD *)(v7 + 48);
  v10 = *(_OWORD *)(v7 + 64);
  v11 = *(_OWORD *)(v7 + 80);
  *(_OWORD *)(v8 + 88) = *(_OWORD *)(v7 + 96);
  *(_OWORD *)(v8 + 72) = v11;
  *(_OWORD *)(v8 + 56) = v10;
  *(_OWORD *)(v8 + 40) = v9;
  v12 = *(_OWORD *)(v7 + 112);
  v13 = *(_OWORD *)(v7 + 128);
  v14 = *(_OWORD *)(v7 + 144);
  *(_OWORD *)(v8 + 152) = *(_OWORD *)(v7 + 160);
  *(_OWORD *)(v8 + 136) = v14;
  *(_OWORD *)(v8 + 120) = v13;
  *(_OWORD *)(v8 + 104) = v12;
  v15 = *(_OWORD *)(v7 + 176);
  v16 = *(_OWORD *)(v7 + 192);
  v17 = *(_OWORD *)(v7 + 208);
  *(_OWORD *)(v8 + 212) = *(_OWORD *)(v7 + 220);
  *(_OWORD *)(v8 + 200) = v17;
  *(_OWORD *)(v8 + 184) = v16;
  *(_OWORD *)(v8 + 168) = v15;
  v18 = (_BYTE *)(v8 + 232);
  if (*(char *)(v7 + 263) < 0)
  {
    sub_100115CE4(v18, *(void **)(a2 + 320), *(_QWORD *)(a2 + 328));
  }
  else
  {
    v19 = *(_OWORD *)(v7 + 240);
    *(_QWORD *)(v8 + 248) = *(_QWORD *)(v7 + 256);
    *(_OWORD *)v18 = v19;
  }
  v20 = *(_OWORD *)(a2 + 344);
  v21 = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
  *(_OWORD *)(a1 + 376) = v21;
  *(_OWORD *)(a1 + 344) = v20;
  v22 = *(_OWORD *)(a2 + 392);
  v23 = *(_OWORD *)(a2 + 408);
  v24 = *(_OWORD *)(a2 + 440);
  *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
  *(_OWORD *)(a1 + 440) = v24;
  *(_OWORD *)(a1 + 392) = v22;
  *(_OWORD *)(a1 + 408) = v23;
  v25 = *(_OWORD *)(a2 + 456);
  v26 = *(_OWORD *)(a2 + 472);
  v27 = *(_OWORD *)(a2 + 488);
  *(_DWORD *)(a1 + 504) = *(_DWORD *)(a2 + 504);
  *(_OWORD *)(a1 + 472) = v26;
  *(_OWORD *)(a1 + 488) = v27;
  *(_OWORD *)(a1 + 456) = v25;
  v28 = *(_OWORD *)(a2 + 512);
  v29 = *(_OWORD *)(a2 + 528);
  v30 = *(_OWORD *)(a2 + 560);
  *(_OWORD *)(a1 + 544) = *(_OWORD *)(a2 + 544);
  *(_OWORD *)(a1 + 560) = v30;
  *(_OWORD *)(a1 + 512) = v28;
  *(_OWORD *)(a1 + 528) = v29;
  v31 = *(_OWORD *)(a2 + 576);
  v32 = *(_OWORD *)(a2 + 592);
  v33 = *(_OWORD *)(a2 + 624);
  *(_OWORD *)(a1 + 608) = *(_OWORD *)(a2 + 608);
  *(_OWORD *)(a1 + 624) = v33;
  *(_OWORD *)(a1 + 576) = v31;
  *(_OWORD *)(a1 + 592) = v32;
  v34 = *(_OWORD *)(a2 + 640);
  v35 = *(_OWORD *)(a2 + 656);
  v36 = *(_OWORD *)(a2 + 672);
  *(_DWORD *)(a1 + 688) = *(_DWORD *)(a2 + 688);
  *(_OWORD *)(a1 + 656) = v35;
  *(_OWORD *)(a1 + 672) = v36;
  *(_OWORD *)(a1 + 640) = v34;
  return a1;
}

void sub_10087B888(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 96) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

id sub_10087CE74(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102158C68);
  v2 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#diagnosticManager Interruption handler called", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102158C68);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "#diagnosticManager Interruption handler called", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "-[CLDiagnosticManager listener:shouldAcceptNewConnection:]_block_invoke", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }

  return objc_msgSend(*(id *)(a1 + 32), "setConnection:", 0);
}

id sub_10087D01C(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102158C68);
  v2 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#diagnosticManager Invalidation handler called", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102158C68);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "#diagnosticManager Invalidation handler called", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "-[CLDiagnosticManager listener:shouldAcceptNewConnection:]_block_invoke", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }

  return objc_msgSend(*(id *)(a1 + 32), "setConnection:", 0);
}

void sub_10087D554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10087D5C0(id a1)
{
  void **v1;
  NSString *v2;
  void *v3[2];
  char v4;
  void *__p[2];
  char v6;

  sub_1015A2E04(v3, "mobile");
  sub_100584960((uint64_t *)v3, __p);
  if (v6 >= 0)
    v1 = __p;
  else
    v1 = (void **)__p[0];
  v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v1);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v4 < 0)
    operator delete(v3[0]);
  qword_102304F70 = (uint64_t)objc_msgSend(objc_alloc((Class)NSURL), "initWithString:", -[NSString stringByAppendingPathComponent:](v2, "stringByAppendingPathComponent:", objc_msgSend(&off_102220528, "componentsJoinedByString:", CFSTR("/"))));
}

void sub_10087D688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void sub_10087D71C(id a1)
{
  qword_102304F80 = objc_opt_new(NSDateFormatter);
  objc_msgSend((id)qword_102304F80, "setDateFormat:", CFSTR("yyyy-MM-dd_HH-mm-ss"));
}

void sub_10087D7B8(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_10087D7E4(id a1)
{
  qword_1022A01C8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

uint64_t *sub_10087D810(uint64_t *a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  uint8_t buf[4];
  uint64_t v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;

  *a1 = a2;
  *((_DWORD *)a1 + 2) = 0;
  *(uint64_t *)((char *)a1 + 12) = 0x500000000;
  a1[5] = 0x400000000;
  if (!a2 || *(unsigned __int8 *)(a2 + 16) >= 5u)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102158CC8);
    v4 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v5 = *a1;
      v6 = *(unsigned __int8 *)(*a1 + 16);
      *(_DWORD *)buf = 134218496;
      v18 = v5;
      v19 = 1024;
      v20 = v6;
      v21 = 1024;
      v22 = 4;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Assertion failed: (fIirFilterParams != __null) && (fIirFilterParams->filterOrder <= kMaxFilterOrder), file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMIirFilter.cpp, line 17,IirFilterParams,%p,filterOrder,%d,maxFilterOrder,%d.", buf, 0x18u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102158CC8);
      v7 = *a1;
      v8 = *(unsigned __int8 *)(*a1 + 16);
      v11 = 134218496;
      v12 = v7;
      v13 = 1024;
      v14 = v8;
      v15 = 1024;
      v16 = 4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: (fIirFilterParams != __null) && (fIirFilterParams->filterOrder <= kMaxFilterOrder), file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMIirFilter.cpp, line 17,IirFilterParams,%p,filterOrder,%d,maxFilterOrder,%d.", &v11, 24);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 0, "CMIirFilter::CMIirFilter(const CMIirFilterParams *)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
  *((_DWORD *)a1 + 3) = 0;
  *((_DWORD *)a1 + 10) = 0;
  return a1;
}

uint64_t sub_10087DA38(uint64_t result)
{
  *(_DWORD *)(result + 12) = 0;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

unsigned __int16 *sub_10087DA48(unsigned __int16 *result, float a2)
{
  unsigned __int16 *v2;
  uint64_t v3;
  unsigned __int16 *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  int v16;
  float v17;
  float v18;
  float v19;
  unint64_t v20;

  v2 = result;
  v4 = result + 6;
  v3 = result[6];
  v5 = result[7];
  v6 = *((unsigned int *)result + 4);
  if (v3 + v5 >= v6)
    v7 = *((unsigned int *)result + 4);
  else
    v7 = 0;
  *(float *)&v4[2 * (v3 + v5 - v7) + 4] = a2;
  if (v6 <= v5)
  {
    v8 = v3 + 1;
    if (v8 < v6)
      LOWORD(v6) = 0;
    *v4 = v8 - v6;
  }
  else
  {
    result[7] = v5 + 1;
    v5 = (unsigned __int16)(v5 + 1);
  }
  v9 = *(unsigned __int8 *)(*(_QWORD *)result + 16);
  v10 = result[21];
  if (v10 >= v9)
  {
    v14 = 0;
    *((_DWORD *)result + 2) = 0;
    do
    {
      v15 = v14;
      v16 = v14;
      v17 = *(float *)(**(_QWORD **)v2 + 4 * v14);
      v18 = *((float *)v2 + 2) + (float)(v17 * *(float *)sub_1004784C4(v4, v5 + ~(unint64_t)v14));
      *((float *)v2 + 2) = v18;
      if (v16)
      {
        v19 = *(float *)(*(_QWORD *)(*(_QWORD *)v2 + 8) + 4 * v15);
        v18 = *((float *)v2 + 2) - (float)(v19 * *(float *)sub_1004784C4(v2 + 20, v10 - v15));
        *((float *)v2 + 2) = v18;
      }
      v14 = v15 + 1;
    }
    while (v9 >= (v15 + 1));
    *((float *)v2 + 2) = v18 / **(float **)(*(_QWORD *)v2 + 8);
    return sub_10087DBE8(v2 + 20, (_DWORD *)v2 + 2);
  }
  else
  {
    v11 = result[20];
    v12 = *((unsigned int *)result + 11);
    if (v11 + v10 >= v12)
      v13 = *((unsigned int *)result + 11);
    else
      v13 = 0;
    *(float *)&result[2 * (v11 + v10 - v13) + 24] = a2;
    if (v12 <= v10)
    {
      v20 = v11 + 1;
      if (v20 < v12)
        LOWORD(v12) = 0;
      result[20] = v20 - v12;
    }
    else
    {
      result[21] = v10 + 1;
    }
    *((float *)result + 2) = a2;
  }
  return result;
}

unsigned __int16 *sub_10087DBE8(unsigned __int16 *result, _DWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = result[1];
  v3 = *((unsigned int *)result + 1);
  v4 = *result;
  if (v4 + v2 >= v3)
    v5 = *((unsigned int *)result + 1);
  else
    v5 = 0;
  *(_DWORD *)&result[2 * (v4 + v2 - v5) + 4] = *a2;
  if (v3 <= v2)
  {
    if (v4 + 1 < v3)
      LOWORD(v3) = 0;
    *result = v4 + 1 - v3;
  }
  else
  {
    result[1] = v2 + 1;
  }
  return result;
}

void sub_10087DC3C(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_10087DC68(_QWORD *a1@<X8>)
{
  unsigned __int8 v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;

  v2 = atomic_load((unsigned __int8 *)&qword_102304FD0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_102304FD0))
  {
    __cxa_atexit((void (*)(void *))sub_10087DD70, &qword_102304FC0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102304FD0);
  }
  if (!qword_102304FC0 || !sub_1000CC504(qword_102304FC0))
  {
    sub_10088118C((unsigned __int8 *)&qword_102304F90, &v9);
    sub_1002B7674((uint64_t)&qword_102304FC0, &v9);
    v3 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
    if (*((_QWORD *)&v9 + 1))
    {
      v4 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
  v6 = *(_QWORD *)algn_102304FC8;
  *a1 = qword_102304FC0;
  a1[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
}

void sub_10087DD74(_QWORD *a1@<X8>)
{
  unsigned __int8 v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;

  v2 = atomic_load((unsigned __int8 *)&qword_102304FE8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_102304FE8))
  {
    __cxa_atexit((void (*)(void *))sub_10087DD70, &qword_102304FD8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102304FE8);
  }
  if (!qword_102304FD8 || !sub_1000CC504(qword_102304FD8))
  {
    sub_10088118C((unsigned __int8 *)&qword_102304FA8, &v9);
    sub_1002B7674((uint64_t)&qword_102304FD8, &v9);
    v3 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
    if (*((_QWORD *)&v9 + 1))
    {
      v4 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
  v6 = unk_102304FE0;
  *a1 = qword_102304FD8;
  a1[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
}

uint64_t sub_10087DE7C(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unsigned __int8 *v4;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const std::string::value_type *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  void *v17;
  __int16 v18;
  __int128 __p;
  uint64_t v20;
  uint64_t v21;
  void *__dst[2];
  uint64_t v23;

  v4 = a2;
  if ((char)a2[23] < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a2;
    v23 = *((_QWORD *)a2 + 2);
  }
  v17 = (void *)(&_mh_execute_header + 2);
  v18 = 256;
  if (*((char *)a3 + 23) < 0)
  {
    sub_100115CE4(&__p, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    __p = *a3;
    v20 = *((_QWORD *)a3 + 2);
  }
  v21 = 0;
  sub_10104D224(a1, (__int128 *)__dst, (uint64_t *)&v17, -1.0);
  if (SHIBYTE(v20) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v23) < 0)
    operator delete(__dst[0]);
  *(_QWORD *)a1 = off_102158CF8;
  sub_1015A2E04(&v17, "ff:ff:ff:ff:ff:ff");
  *(_QWORD *)(a1 + 256) = sub_1000CC740((uint64_t)&v17);
  if (SBYTE7(__p) < 0)
    operator delete(v17);
  sub_1002433B8(a1 + 264);
  sub_100B22B5C(a1 + 304);
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  sub_1015A2E04((_QWORD *)(a1 + 376), "UnknownHarvest");
  v6 = v4[23];
  v7 = *((_QWORD *)v4 + 1);
  if ((v6 & 0x80u) == 0)
    v8 = v4[23];
  else
    v8 = *((_QWORD *)v4 + 1);
  v9 = qword_102304F98;
  if (byte_102304FA7 >= 0)
    v9 = byte_102304FA7;
  if (v8 != v9)
    goto LABEL_29;
  if (byte_102304FA7 >= 0)
    v10 = &qword_102304F90;
  else
    v10 = (uint64_t *)qword_102304F90;
  if ((v6 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v4, v10, *((_QWORD *)v4 + 1)))
      goto LABEL_29;
LABEL_41:
    v11 = "GpsHarvest";
LABEL_44:
    std::string::assign((std::string *)(a1 + 376), v11);
    goto LABEL_45;
  }
  if (!v4[23])
    goto LABEL_41;
  v11 = "GpsHarvest";
  v12 = v4;
  v13 = v4[23];
  while (*v12 == *(unsigned __int8 *)v10)
  {
    ++v12;
    v10 = (uint64_t *)((char *)v10 + 1);
    if (!--v13)
      goto LABEL_44;
  }
LABEL_29:
  v14 = qword_102304FB0;
  if (byte_102304FBF >= 0)
    v14 = byte_102304FBF;
  if (v8 != v14)
    goto LABEL_45;
  if (byte_102304FBF >= 0)
    v15 = &qword_102304FA8;
  else
    v15 = (uint64_t *)qword_102304FA8;
  if ((v6 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v4, v15, v7))
      goto LABEL_45;
    goto LABEL_43;
  }
  if (!(_DWORD)v6)
  {
LABEL_43:
    v11 = "WifiHarvest";
    goto LABEL_44;
  }
  v11 = "WifiHarvest";
  while (*v4 == *(unsigned __int8 *)v15)
  {
    ++v4;
    v15 = (uint64_t *)((char *)v15 + 1);
    if (!--v6)
      goto LABEL_44;
  }
LABEL_45:
  sub_100B22B8C(a1 + 304, (const std::string *)(a1 + 376));
  return a1;
}

void sub_10087E110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10087E19C(uint64_t a1)
{
  *(_QWORD *)a1 = off_10219C0C8;
  if (*(char *)(a1 + 255) < 0)
    operator delete(*(void **)(a1 + 232));
  return sub_10067D1C4(a1);
}

_QWORD *sub_10087E1DC@<X0>(__int128 *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100881310((unsigned __int8 *)&qword_102304F90, a1, a2);
}

_QWORD *sub_10087E208@<X0>(__int128 *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100881310((unsigned __int8 *)&qword_102304FA8, a1, a2);
}

uint64_t sub_10087E234(uint64_t a1)
{
  uint64_t *v2;
  __int128 v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  double Current;
  double v18;
  double v19;
  NSObject *v20;
  int v21;
  _BYTE *v22;
  _BYTE *v23;
  std::string *p_p;
  void *v25;
  int v26;
  std::string::size_type v27;
  std::string *v28;
  std::string *v29;
  char *v30;
  double v32;
  __int128 v33;
  int v34;
  uint64_t v35;
  std::string v36;
  std::string __p;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[32];
  __int128 v43;
  __int128 v44;
  _OWORD v45[2];
  _BYTE v46[16];
  _QWORD *v47;
  _BYTE v48[12];
  __int16 v49;
  double v50;
  __int16 v51;
  std::string *v52;
  __int16 v53;
  int v54;
  uint8_t buf[4];
  _BYTE *v56;
  __int16 v57;
  double v58;
  __int16 v59;
  std::string *v60;
  __int16 v61;
  int v62;

  sub_10104E70C(a1, (uint64_t)v46);
  v2 = sub_1000A3224();
  v4 = v47;
  if (v47)
  {
    v34 = *((_DWORD *)v2 + 2);
    v35 = a1 + 376;
    *(_QWORD *)&v3 = 136315906;
    v33 = v3;
    do
    {
      v5 = v4[3];
      v6 = 0xAAAAAAAAAAAAAAABLL * ((v4[4] - v5) >> 6);
      v7 = v6 > v34;
      v8 = v6 - v34;
      if (v7)
      {
        v9 = v5 + 192 * v8;
        v10 = *(_OWORD *)(v9 + 24);
        v38 = *(_OWORD *)(v9 + 8);
        v39 = v10;
        v11 = *(_OWORD *)(v9 + 40);
        v12 = *(_OWORD *)(v9 + 56);
        v13 = *(_OWORD *)(v9 + 88);
        *(_OWORD *)v42 = *(_OWORD *)(v9 + 72);
        *(_OWORD *)&v42[16] = v13;
        v40 = v11;
        v41 = v12;
        v14 = *(_OWORD *)(v9 + 104);
        v15 = *(_OWORD *)(v9 + 120);
        v16 = *(_OWORD *)(v9 + 136);
        *(_OWORD *)((char *)v45 + 12) = *(_OWORD *)(v9 + 148);
        v44 = v15;
        v45[0] = v16;
        v43 = v14;
        Current = CFAbsoluteTimeGetCurrent();
        v18 = *(double *)&v42[12];
        if (qword_1022A0280 != -1)
          dispatch_once(&qword_1022A0280, &stru_102158D28);
        v19 = Current - v18;
        v20 = off_1022A0288;
        if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEBUG))
        {
          std::operator+<char>(v48, "WifiAssociatedApHarvestDatabase, ", v35);
          v21 = SHIBYTE(v51);
          v22 = *(_BYTE **)v48;
          sub_1000C2254(v4 + 2, &__p);
          v23 = v48;
          if (v21 < 0)
            v23 = v22;
          p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = v33;
          v56 = v23;
          v57 = 2048;
          v58 = v19;
          v59 = 2080;
          v60 = p_p;
          v61 = 1024;
          v62 = v34;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "%s, deleting samples older than %.1f(s) for mac %s to keep maximum %d samples", buf, 0x26u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v51) < 0)
            operator delete(*(void **)v48);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0280 != -1)
            dispatch_once(&qword_1022A0280, &stru_102158D28);
          v25 = off_1022A0288;
          std::operator+<char>(&__p, "WifiAssociatedApHarvestDatabase, ", v35);
          v26 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          v27 = __p.__r_.__value_.__r.__words[0];
          sub_1000C2254(v4 + 2, &v36);
          v28 = &__p;
          if (v26 < 0)
            v28 = (std::string *)v27;
          v29 = &v36;
          if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v29 = (std::string *)v36.__r_.__value_.__r.__words[0];
          *(_DWORD *)v48 = v33;
          *(_QWORD *)&v48[4] = v28;
          v49 = 2048;
          v50 = v19;
          v51 = 2080;
          v52 = v29;
          v53 = 1024;
          v54 = v34;
          LODWORD(v32) = 38;
          v30 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v25, 2, "%s, deleting samples older than %.1f(s) for mac %s to keep maximum %d samples", v48, v32, (const char *)v33, DWORD2(v33));
          if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v36.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          sub_100512490("Generic", 1, 0, 2, "void CLWifiAssociatedApHarvestDatabase::deleteOldSamplesBeyondThresholdForEachAssociatedAp()", "%s\n", v30);
          if (v30 != (char *)buf)
            free(v30);
        }
        sub_10104DD78(a1);
      }
      v4 = (_QWORD *)*v4;
    }
    while (v4);
  }
  return sub_1008813BC((uint64_t)v46);
}

void sub_10087E60C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  sub_1008813BC((uint64_t)&a45);
  _Unwind_Resume(a1);
}

uint64_t sub_10087E668(uint64_t a1)
{
  unint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  double Current;
  _QWORD *v8;
  double v9;
  double v10;
  NSObject *v11;
  int v12;
  _BYTE *v13;
  _BYTE *v14;
  std::string *v15;
  void *v17;
  int v18;
  std::string::size_type v19;
  std::string *v20;
  std::string *v21;
  char *v22;
  const char *v23;
  std::string v24;
  std::string v25;
  _BYTE v26[16];
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[5];
  _BYTE v31[12];
  __int16 v32;
  _QWORD *v33;
  __int16 v34;
  std::string *v35;
  __int16 v36;
  double v37;
  __int16 v38;
  int v39;
  _BYTE __p[12];
  __int16 v41;
  _QWORD *v42;
  __int16 v43;
  std::string *v44;
  __int16 v45;
  double v46;
  __int16 v47;
  int v48;

  sub_10104E70C(a1, (uint64_t)v30);
  v2 = *((int *)sub_1000A3224() + 3);
  if (v30[3] > v2)
  {
    sub_100881438((uint64_t)v26, (uint64_t)v30);
    if (v28)
    {
      v3 = v27;
      v4 = (_QWORD *)*v27;
      if (*v27)
      {
        do
        {
          if (*(double *)(v4[4] - 108) < *(double *)(v3[4] - 108))
            v3 = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
      v5 = v3[2];
    }
    else
    {
      sub_1015A2E04(__p, "ff:ff:ff:ff:ff:ff");
      v5 = sub_1000CC740((uint64_t)__p);
      if (SHIBYTE(v43) < 0)
        operator delete(*(void **)__p);
    }
    v29 = v5;
    sub_1008813BC((uint64_t)v26);
    v6 = sub_10087EAD8(v30, &v29);
    Current = CFAbsoluteTimeGetCurrent();
    v8 = sub_1000254D8(v30, &v29);
    if (!v8)
      sub_100263950("unordered_map::at: key not found");
    v9 = *(double *)(v8[4] - 108);
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102158D28);
    v10 = Current - v9;
    v11 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEBUG))
    {
      std::operator+<char>(v31, "WifiAssociatedApHarvestDatabase, ", a1 + 376);
      v12 = SHIBYTE(v34);
      v13 = *(_BYTE **)v31;
      sub_1000C2254(&v29, &v25);
      v14 = v31;
      if (v12 < 0)
        v14 = v13;
      if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v15 = &v25;
      else
        v15 = (std::string *)v25.__r_.__value_.__r.__words[0];
      *(_DWORD *)__p = 136316162;
      *(_QWORD *)&__p[4] = v14;
      v41 = 2048;
      v42 = v6;
      v43 = 2080;
      v44 = v15;
      v45 = 2048;
      v46 = v10;
      v47 = 1024;
      v48 = v2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "%s, deleting all %zu samples for mac %s that was last harvested %.1f(s) ago to keep maximum %d distinct APs", __p, 0x30u);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
      if (SHIBYTE(v34) < 0)
        operator delete(*(void **)v31);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102158D28);
      v17 = off_1022A0288;
      std::operator+<char>(&v25, "WifiAssociatedApHarvestDatabase, ", a1 + 376);
      v18 = SHIBYTE(v25.__r_.__value_.__r.__words[2]);
      v19 = v25.__r_.__value_.__r.__words[0];
      sub_1000C2254(&v29, &v24);
      v20 = &v25;
      if (v18 < 0)
        v20 = (std::string *)v19;
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v24;
      else
        v21 = (std::string *)v24.__r_.__value_.__r.__words[0];
      *(_DWORD *)v31 = 136316162;
      *(_QWORD *)&v31[4] = v20;
      v32 = 2048;
      v33 = v6;
      v34 = 2080;
      v35 = v21;
      v36 = 2048;
      v37 = v10;
      v38 = 1024;
      v39 = v2;
      v22 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v17, 2, "%s, deleting all %zu samples for mac %s that was last harvested %.1f(s) ago to keep maximum %d distinct APs", v31, 48, v23, *(double *)&v24.__r_.__value_.__l.__data_, LODWORD(v24.__r_.__value_.__r.__words[1]));
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v24.__r_.__value_.__l.__data_);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
      sub_100512490("Generic", 1, 0, 2, "void CLWifiAssociatedApHarvestDatabase::deleteAssociatedApThatHasNotBeenHarvestedForTheLongestTimeIfNecessary()", "%s\n", v22);
      if (v22 != __p)
        free(v22);
    }
    sub_10104E16C(a1);
  }
  return sub_1008813BC((uint64_t)v30);
}

void sub_10087EA4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  sub_1008813BC((uint64_t)&a27);
  _Unwind_Resume(a1);
}

_QWORD *sub_10087EAD8(_QWORD *a1, _QWORD *a2)
{
  _QWORD *result;
  _QWORD *v5;

  result = sub_1000254D8(a1, a2);
  if (result)
  {
    v5 = sub_1000254D8(a1, a2);
    if (!v5)
      sub_100263950("unordered_map::at: key not found");
    return (_QWORD *)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5[4] - v5[3]) >> 6));
  }
  return result;
}

void sub_10087EB34(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  double v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  NSObject *v12;
  uint64_t *v13;
  uint64_t *v14;
  int v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  void **v20;
  uint64_t v21;
  int v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  void **v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31[2];
  char v32;
  void *__p[2];
  char v34;
  _BYTE v35[12];
  __int16 v36;
  unint64_t v37;
  __int16 v38;
  unint64_t v39;
  __int16 v40;
  void **v41;
  uint8_t buf[4];
  _BYTE *v43;
  __int16 v44;
  unint64_t v45;
  __int16 v46;
  unint64_t v47;
  __int16 v48;
  void **v49;

  if (sub_1000254D8(a2, a3))
  {
    v6 = sub_1001FCBB4();
    if (v6 - *(double *)(a1 + 368) >= 600.0)
    {
      *(double *)(a1 + 368) = v6;
      v7 = sub_1000254D8(a2, a3);
      if (!v7)
        sub_100263950("unordered_map::at: key not found");
      v8 = v7;
      if (v7[4] != v7[3])
      {
        v9 = 0;
        v30 = a1 + 376;
        v10 = &qword_1022A0000;
        v11 = &qword_1022A0000;
        do
        {
          if (v10[80] != -1)
            dispatch_once(&qword_1022A0280, &stru_102158D28);
          v12 = v11[81];
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            std::operator+<char>(v35, "WifiAssociatedApHarvestDatabase, ", v30);
            v13 = v11;
            v14 = v10;
            v15 = SHIBYTE(v38);
            v16 = *(_BYTE **)v35;
            v18 = v8[3];
            v17 = v8[4];
            sub_100ED9F98(v18 + 192 * v9, __p);
            v19 = v35;
            if (v15 < 0)
              v19 = v16;
            *(_DWORD *)buf = 136315907;
            v43 = v19;
            v20 = __p;
            if (v34 < 0)
              v20 = (void **)__p[0];
            v44 = 2048;
            v45 = v9 + 1;
            v46 = 2048;
            v47 = 0xAAAAAAAAAAAAAAABLL * ((v17 - v18) >> 6);
            v48 = 2081;
            v49 = v20;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%s, harvest sample %zu / %zu, %{private}s", buf, 0x2Au);
            if (v34 < 0)
              operator delete(__p[0]);
            v10 = v14;
            if (SHIBYTE(v38) < 0)
              operator delete(*(void **)v35);
            v11 = v13;
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (v10[80] != -1)
              dispatch_once(&qword_1022A0280, &stru_102158D28);
            v21 = v11[81];
            std::operator+<char>(__p, "WifiAssociatedApHarvestDatabase, ", v30);
            v22 = v34;
            v23 = (void **)__p[0];
            v25 = v8[3];
            v24 = v8[4];
            sub_100ED9F98(v25 + 192 * v9, v31);
            v26 = __p;
            if (v22 < 0)
              v26 = v23;
            *(_DWORD *)v35 = 136315907;
            ++v9;
            *(_QWORD *)&v35[4] = v26;
            v27 = v31;
            if (v32 < 0)
              v27 = (void **)v31[0];
            v36 = 2048;
            v37 = v9;
            v38 = 2048;
            v39 = 0xAAAAAAAAAAAAAAABLL * ((v24 - v25) >> 6);
            v40 = 2081;
            v41 = v27;
            LODWORD(v29) = 42;
            v28 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v21, 0, "%s, harvest sample %zu / %zu, %{private}s", v35, v29);
            if (v32 < 0)
              operator delete(v31[0]);
            if (v34 < 0)
              operator delete(__p[0]);
            sub_100512490("Generic", 1, 0, 2, "void CLWifiAssociatedApHarvestDatabase::logAllHarvestSamplesOfCurrentAssociatedApIfPossible(const std::unordered_map<CLMacAddress, std::vector<CLWifiHarvestDatabaseEntry>> &, const CLMacAddress &)", "%s\n", v28);
            if (v28 != (char *)buf)
              free(v28);
          }
          else
          {
            ++v9;
          }
        }
        while (v9 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8[4] - v8[3]) >> 6));
      }
    }
  }
}

void sub_10087EEDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10087EF14(uint64_t a1, _QWORD *a2)
{
  double v4;
  _QWORD *v5;
  unint64_t v6;
  NSObject *v7;
  _BYTE *v8;
  void *v9;
  _BYTE *v10;
  char *v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  double v22;
  _QWORD *v23;
  uint64_t v24;
  double v25;
  _QWORD *v26;
  uint64_t v27;
  NSObject *v28;
  _BYTE *v29;
  _QWORD *v30;
  std::string *v31;
  int v32;
  std::string::size_type v33;
  std::string *v34;
  std::string *v35;
  void *v36;
  std::string *v37;
  std::string *v38;
  _QWORD *v39;
  unint64_t v40;
  int v41;
  std::string::size_type v42;
  std::string *v43;
  std::string *v44;
  char *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  void *v51;
  std::string v52;
  std::string v53;
  std::string v54;
  std::string v55;
  double v56;
  _BYTE v57[16];
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE v61[16];
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE buf[12];
  __int16 v66;
  unint64_t v67;
  __int16 v68;
  unint64_t v69;
  __int16 v70;
  _QWORD *v71;
  __int16 v72;
  std::string *v73;
  __int16 v74;
  _QWORD *v75;
  __int16 v76;
  std::string *v77;
  __int16 v78;
  std::string *v79;
  __int16 v80;
  _QWORD *v81;
  __int16 v82;
  double v83;
  __int16 v84;
  double v85;
  int v86;
  _BYTE *v87;
  _QWORD *v88;
  unint64_t v89;
  _BYTE __p[12];
  __int16 v91;
  unint64_t v92;
  __int16 v93;
  unint64_t v94;
  __int16 v95;
  _QWORD *v96;
  __int16 v97;
  std::string *v98;
  __int16 v99;
  _QWORD *v100;
  __int16 v101;
  std::string *v102;
  __int16 v103;
  std::string *v104;
  __int16 v105;
  _QWORD *v106;
  __int16 v107;
  double v108;
  __int16 v109;
  double v110;

  if (sub_1000CC504(a1))
  {
    v4 = sub_1001FCBB4();
    if (v4 - *(double *)(a1 + 360) >= 10.0)
    {
      *(double *)(a1 + 360) = v4;
      sub_10104E70C(a1, (uint64_t)&v86);
      v5 = v88;
      if (v88)
      {
        v6 = 0;
        do
        {
          v6 -= 0x5555555555555555 * ((uint64_t)(v5[4] - v5[3]) >> 6);
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        v6 = 0;
      }
      v12 = v89;
      sub_100881438((uint64_t)v61, (uint64_t)&v86);
      if (v63)
      {
        v13 = v62;
        v14 = (_QWORD *)*v62;
        if (*v62)
        {
          do
          {
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13[4] - v13[3]) >> 6) < 0xAAAAAAAAAAAAAAABLL
                                                                          * ((uint64_t)(v14[4] - v14[3]) >> 6))
              v13 = v14;
            v14 = (_QWORD *)*v14;
          }
          while (v14);
        }
        v15 = v13[2];
      }
      else
      {
        sub_1015A2E04(__p, "ff:ff:ff:ff:ff:ff");
        v15 = sub_1000CC740((uint64_t)__p);
        if (SHIBYTE(v93) < 0)
          operator delete(*(void **)__p);
      }
      v64 = v15;
      sub_1008813BC((uint64_t)v61);
      v16 = sub_10087EAD8(&v86, &v64);
      sub_100881438((uint64_t)v57, (uint64_t)&v86);
      if (v59)
      {
        v17 = v58;
        v18 = (_QWORD *)*v58;
        if (*v58)
        {
          do
          {
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18[4] - v18[3]) >> 6) < 0xAAAAAAAAAAAAAAABLL
                                                                          * ((uint64_t)(v17[4] - v17[3]) >> 6))
              v17 = v18;
            v18 = (_QWORD *)*v18;
          }
          while (v18);
        }
        v19 = v17[2];
      }
      else
      {
        sub_1015A2E04(__p, "ff:ff:ff:ff:ff:ff");
        v19 = sub_1000CC740((uint64_t)__p);
        if (SHIBYTE(v93) < 0)
          operator delete(*(void **)__p);
      }
      v60 = v19;
      sub_1008813BC((uint64_t)v57);
      v20 = sub_10087EAD8(&v86, &v60);
      v21 = sub_10087EAD8(&v86, a2);
      v22 = -1.0;
      if (sub_1000254D8(&v86, a2))
      {
        v23 = sub_1000254D8(&v86, a2);
        if (!v23)
          sub_100263950("unordered_map::at: key not found");
        v24 = v23[3];
        if (v24 != v23[4])
          v22 = (CFAbsoluteTimeGetCurrent() - *(double *)(v24 + 84)) / 3600.0;
      }
      v25 = -1.0;
      if (sub_1000254D8(&v86, a2))
      {
        v26 = sub_1000254D8(&v86, a2);
        if (!v26)
          sub_100263950("unordered_map::at: key not found");
        v27 = v26[4];
        if (v26[3] != v27)
          v25 = CFAbsoluteTimeGetCurrent() - *(double *)(v27 - 108);
      }
      v56 = v25;
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102158D28);
      v28 = off_1022A0288;
      if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEBUG))
      {
        v29 = buf;
        std::operator+<char>(buf, "WifiAssociatedApHarvestDatabase, ", a1 + 376);
        v46 = v21;
        v48 = v20;
        v50 = a2;
        if (v68 < 0)
          v29 = *(_BYTE **)buf;
        sub_1000C2254(&v64, &v55);
        v30 = v16;
        if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v31 = &v55;
        else
          v31 = (std::string *)v55.__r_.__value_.__r.__words[0];
        sub_1000C2254(&v60, &v54);
        v32 = SHIBYTE(v54.__r_.__value_.__r.__words[2]);
        v33 = v54.__r_.__value_.__r.__words[0];
        sub_1000C2254(v50, &v53);
        v34 = &v54;
        if (v32 < 0)
          v34 = (std::string *)v33;
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v35 = &v53;
        else
          v35 = (std::string *)v53.__r_.__value_.__r.__words[0];
        *(_DWORD *)__p = 136317699;
        *(_QWORD *)&__p[4] = v29;
        v91 = 2049;
        v92 = v12;
        v93 = 2049;
        v94 = v6;
        v95 = 2049;
        v16 = v30;
        v96 = v30;
        v97 = 2080;
        v98 = v31;
        v99 = 2049;
        v21 = v46;
        v20 = v48;
        v100 = v48;
        v101 = 2080;
        v102 = v34;
        v103 = 2081;
        v104 = v35;
        v105 = 2049;
        v106 = v46;
        v107 = 2049;
        v108 = v22;
        v109 = 2049;
        v110 = v25;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "%s, %{private}zu APs, %{private}zu total samples, max samples: %{private}zu (%s), min samples: %{private}zu (%s), current associated AP %{private}s has %{private}zu samples and oldest sample age of %{private}.1f hours, latest sample age of %{private}.1f seconds", __p, 0x70u);
        if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v53.__r_.__value_.__l.__data_);
        a2 = v50;
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v54.__r_.__value_.__l.__data_);
        if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v55.__r_.__value_.__l.__data_);
        if (SHIBYTE(v68) < 0)
          operator delete(*(void **)buf);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A0280 != -1)
          dispatch_once(&qword_1022A0280, &stru_102158D28);
        v36 = off_1022A0288;
        v37 = &v55;
        std::operator+<char>(&v55, "WifiAssociatedApHarvestDatabase, ", a1 + 376);
        v49 = v20;
        v51 = v36;
        v47 = v21;
        if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v37 = (std::string *)v55.__r_.__value_.__r.__words[0];
        v38 = &v54;
        sub_1000C2254(&v64, &v54);
        v39 = v16;
        v40 = v12;
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v38 = (std::string *)v54.__r_.__value_.__r.__words[0];
        sub_1000C2254(&v60, &v53);
        v41 = SHIBYTE(v53.__r_.__value_.__r.__words[2]);
        v42 = v53.__r_.__value_.__r.__words[0];
        sub_1000C2254(a2, &v52);
        v43 = &v53;
        if (v41 < 0)
          v43 = (std::string *)v42;
        v44 = &v52;
        if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v44 = (std::string *)v52.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136317699;
        *(_QWORD *)&buf[4] = v37;
        v66 = 2049;
        v12 = v40;
        v67 = v40;
        v68 = 2049;
        v69 = v6;
        v70 = 2049;
        v71 = v39;
        v72 = 2080;
        v73 = v38;
        v74 = 2049;
        v75 = v49;
        v76 = 2080;
        v77 = v43;
        v78 = 2081;
        v79 = v44;
        v80 = 2049;
        v81 = v47;
        v82 = 2049;
        v83 = v22;
        v84 = 2049;
        v85 = v25;
        v45 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v51, 2, "%s, %{private}zu APs, %{private}zu total samples, max samples: %{private}zu (%s), min samples: %{private}zu (%s), current associated AP %{private}s has %{private}zu samples and oldest sample age of %{private}.1f hours, latest sample age of %{private}.1f seconds", buf, 112);
        if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v52.__r_.__value_.__l.__data_);
        if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v53.__r_.__value_.__l.__data_);
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v54.__r_.__value_.__l.__data_);
        if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v55.__r_.__value_.__l.__data_);
        sub_100512490("Generic", 1, 0, 2, "void CLWifiAssociatedApHarvestDatabase::logDatabaseInfoAndSubmitMetricsIfPossible(const CLMacAddress &)", "%s\n", v45);
        if (v45 != __p)
          free(v45);
      }
      sub_100B22B94(a1 + 304, v12, v6, &v56, v22);
      sub_10087EB34(a1, &v86, a2);
      sub_1008813BC((uint64_t)&v86);
    }
  }
  else
  {
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102158D28);
    v7 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEFAULT))
    {
      std::operator+<char>(__p, "WifiAssociatedApHarvestDatabase, ", a1 + 376);
      v8 = v93 >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%s, #warning, could not log database info as it is invalid", buf, 0xCu);
      if (SHIBYTE(v93) < 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102158D28);
      v9 = off_1022A0288;
      std::operator+<char>(buf, "WifiAssociatedApHarvestDatabase, ", a1 + 376);
      if (v68 >= 0)
        v10 = buf;
      else
        v10 = *(_BYTE **)buf;
      v86 = 136315138;
      v87 = v10;
      v11 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v9, 0, "%s, #warning, could not log database info as it is invalid", (const char *)&v86);
      if (SHIBYTE(v68) < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 2, "void CLWifiAssociatedApHarvestDatabase::logDatabaseInfoAndSubmitMetricsIfPossible(const CLMacAddress &)", "%s\n", v11);
      if (v11 != __p)
        free(v11);
    }
  }
}

void sub_10087F7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  sub_1008813BC((uint64_t)&a53);
  _Unwind_Resume(a1);
}

uint64_t sub_10087F8DC(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  std::string::size_type v5;
  NSObject *v6;
  int v7;
  _BYTE *v8;
  _BYTE *v9;
  std::string *v10;
  void *v11;
  int v12;
  std::string::size_type v13;
  std::string *v14;
  std::string *v15;
  char *v16;
  NSObject *v17;
  int v18;
  _BYTE *v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;
  double *v23;
  char *v24;
  double *v25;
  char *v26;
  double v27;
  BOOL v28;
  double v29;
  double v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  double v42;
  double v43;
  double v44;
  NSObject *v45;
  int v46;
  _BYTE *v47;
  _BYTE *v48;
  std::string *v49;
  void *v50;
  int v51;
  std::string::size_type v52;
  std::string *v53;
  std::string *v54;
  NSObject *v55;
  int v56;
  _BYTE *v57;
  _BYTE *v58;
  std::string *p_p;
  NSObject *v61;
  int v62;
  _BYTE *v63;
  _BYTE *v64;
  std::string *v65;
  void *v66;
  int v67;
  _BYTE *v68;
  _BYTE *v69;
  std::string *v70;
  char *v71;
  void *v72;
  int v73;
  std::string::size_type v74;
  std::string *v75;
  std::string *v76;
  void *v77;
  int v78;
  std::string::size_type v79;
  std::string *v80;
  std::string *v81;
  char *v82;
  std::string v83;
  uint64_t v84;
  _BYTE v85[32];
  _BYTE v86[32];
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  _OWORD v91[2];
  std::string __p;
  std::string v93;
  _BYTE buf[32];
  _BYTE v95[32];
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  _OWORD v100[94];

  v84 = *a2;
  if (sub_1000CC504(a1))
  {
    sub_100094164(a1, &v93);
    v4 = *((int *)sub_1000A3224() + 2);
    v5 = v93.__r_.__value_.__r.__words[0];
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v93.__r_.__value_.__l.__size_ - v93.__r_.__value_.__r.__words[0]) >> 6) >= v4)
    {
      if (v93.__r_.__value_.__r.__words[0] != v93.__r_.__value_.__l.__size_
        && v93.__r_.__value_.__r.__words[0] + 192 != v93.__r_.__value_.__l.__size_)
      {
        v23 = (double *)(v93.__r_.__value_.__r.__words[0] + 276);
        do
        {
          v24 = (char *)v23 - 84;
          v25 = v23 + 24;
          v27 = *v23;
          v26 = (char *)v23 + 108;
          if (*(double *)(v5 + 84) < v27)
            v5 = (std::string::size_type)v24;
          v28 = v26 == (char *)v93.__r_.__value_.__l.__size_;
          v23 = v25;
        }
        while (!v28);
      }
      v29 = *(double *)((char *)a2 + 84) - *(double *)(v5 + 84);
      v30 = *((double *)sub_1000A3224() + 4);
      if (v29 >= v30)
      {
        if (qword_1022A0280 != -1)
          dispatch_once(&qword_1022A0280, &stru_102158D28);
        v55 = off_1022A0288;
        if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEFAULT))
        {
          std::operator+<char>(v85, "WifiAssociatedApHarvestDatabase, ", a1 + 376);
          v56 = v85[23];
          v57 = *(_BYTE **)v85;
          sub_1000C2254(&v84, &__p);
          v58 = v85;
          if (v56 < 0)
            v58 = v57;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = v58;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = p_p;
          *(_WORD *)&buf[22] = 2048;
          *(double *)&buf[24] = v29;
          *(_WORD *)v95 = 2048;
          *(double *)&v95[2] = v30;
          _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "%s, will harvest for associated AP %s as timelapse %.1lf >= threshold %.1lf", buf, 0x2Au);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if ((v85[23] & 0x80000000) != 0)
            operator delete(*(void **)v85);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_89;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0280 != -1)
          dispatch_once(&qword_1022A0280, &stru_102158D28);
        v72 = off_1022A0288;
        std::operator+<char>(&__p, "WifiAssociatedApHarvestDatabase, ", a1 + 376);
        v73 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        v74 = __p.__r_.__value_.__r.__words[0];
        sub_1000C2254(&v84, &v83);
        v75 = &__p;
        if (v73 < 0)
          v75 = (std::string *)v74;
        if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v76 = &v83;
        else
          v76 = (std::string *)v83.__r_.__value_.__r.__words[0];
        *(_DWORD *)v85 = 136315906;
        *(_QWORD *)&v85[4] = v75;
        *(_WORD *)&v85[12] = 2080;
        *(_QWORD *)&v85[14] = v76;
        *(_WORD *)&v85[22] = 2048;
        *(double *)&v85[24] = v29;
        *(_WORD *)v86 = 2048;
        *(double *)&v86[2] = v30;
        v16 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v72, 0, "%s, will harvest for associated AP %s as timelapse %.1lf >= threshold %.1lf", v85, 42, *(double *)&v83.__r_.__value_.__l.__data_, *(double *)&v83.__r_.__value_.__l.__size_);
        if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v83.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        v31 = *(_OWORD *)(v5 + 24);
        *(_OWORD *)buf = *(_OWORD *)(v5 + 8);
        *(_OWORD *)&buf[16] = v31;
        v32 = *(_OWORD *)(v5 + 40);
        v33 = *(_OWORD *)(v5 + 56);
        v34 = *(_OWORD *)(v5 + 88);
        v96 = *(_OWORD *)(v5 + 72);
        v97 = v34;
        *(_OWORD *)v95 = v32;
        *(_OWORD *)&v95[16] = v33;
        v35 = *(_OWORD *)(v5 + 104);
        v36 = *(_OWORD *)(v5 + 120);
        v37 = *(_OWORD *)(v5 + 136);
        *(_OWORD *)((char *)v100 + 12) = *(_OWORD *)(v5 + 148);
        v99 = v36;
        v100[0] = v37;
        v98 = v35;
        v38 = *(_OWORD *)(a2 + 15);
        v89 = *(_OWORD *)(a2 + 13);
        v90 = v38;
        v91[0] = *(_OWORD *)(a2 + 17);
        *(_OWORD *)((char *)v91 + 12) = *(_OWORD *)((char *)a2 + 148);
        v39 = *(_OWORD *)(a2 + 7);
        *(_OWORD *)v86 = *(_OWORD *)(a2 + 5);
        *(_OWORD *)&v86[16] = v39;
        v40 = *(_OWORD *)(a2 + 11);
        v87 = *(_OWORD *)(a2 + 9);
        v88 = v40;
        v41 = *(_OWORD *)(a2 + 3);
        *(_OWORD *)v85 = *(_OWORD *)(a2 + 1);
        *(_OWORD *)&v85[16] = v41;
        sub_10011E258((double *)(a1 + 264), (uint64_t)buf, (uint64_t)v85);
        v43 = v42;
        v44 = *((double *)sub_1000521B8() + 10);
        if (v43 <= v44)
        {
          if (qword_1022A0280 != -1)
            dispatch_once(&qword_1022A0280, &stru_102158D28);
          v61 = off_1022A0288;
          if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEFAULT))
          {
            std::operator+<char>(v85, "WifiAssociatedApHarvestDatabase, ", a1 + 376);
            v62 = v85[23];
            v63 = *(_BYTE **)v85;
            sub_1000C2254(&v84, &__p);
            v64 = v85;
            if (v62 < 0)
              v64 = v63;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v65 = &__p;
            else
              v65 = (std::string *)__p.__r_.__value_.__r.__words[0];
            *(_DWORD *)buf = 136316162;
            *(_QWORD *)&buf[4] = v64;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = v65;
            *(_WORD *)&buf[22] = 2048;
            *(_QWORD *)&buf[24] = 0xAAAAAAAAAAAAAAABLL
                                * ((uint64_t)(v93.__r_.__value_.__l.__size_ - v93.__r_.__value_.__r.__words[0]) >> 6);
            *(_WORD *)v95 = 2048;
            *(double *)&v95[2] = v29;
            *(_WORD *)&v95[10] = 2048;
            *(double *)&v95[12] = v43;
            _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, "%s, will not harvest for associated AP %s as it has %lu samples, timelapse %.1lf, distance %.1lf", buf, 0x34u);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if ((v85[23] & 0x80000000) != 0)
              operator delete(*(void **)v85);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0280 != -1)
              dispatch_once(&qword_1022A0280, &stru_102158D28);
            v77 = off_1022A0288;
            std::operator+<char>(&__p, "WifiAssociatedApHarvestDatabase, ", a1 + 376);
            v78 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
            v79 = __p.__r_.__value_.__r.__words[0];
            sub_1000C2254(&v84, &v83);
            v80 = &__p;
            if (v78 < 0)
              v80 = (std::string *)v79;
            if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v81 = &v83;
            else
              v81 = (std::string *)v83.__r_.__value_.__r.__words[0];
            *(_DWORD *)v85 = 136316162;
            *(_QWORD *)&v85[4] = v80;
            *(_WORD *)&v85[12] = 2080;
            *(_QWORD *)&v85[14] = v81;
            *(_WORD *)&v85[22] = 2048;
            *(_QWORD *)&v85[24] = 0xAAAAAAAAAAAAAAABLL
                                * ((uint64_t)(v93.__r_.__value_.__l.__size_ - v93.__r_.__value_.__r.__words[0]) >> 6);
            *(_WORD *)v86 = 2048;
            *(double *)&v86[2] = v29;
            *(_WORD *)&v86[10] = 2048;
            *(double *)&v86[12] = v43;
            v82 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v77, 0, "%s, will not harvest for associated AP %s as it has %lu samples, timelapse %.1lf, distance %.1lf", v85, 52, v83.__r_.__value_.__r.__words[0], *(double *)&v83.__r_.__value_.__l.__size_, *(double *)&v83.__r_.__value_.__r.__words[2]);
            if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v83.__r_.__value_.__l.__data_);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiAssociatedApHarvestDatabase::shouldAddHarvestSample(const CLWifiHarvestDatabaseEntry &)", "%s\n", v82);
            if (v82 != buf)
              free(v82);
          }
          v22 = 0;
          goto LABEL_90;
        }
        if (qword_1022A0280 != -1)
          dispatch_once(&qword_1022A0280, &stru_102158D28);
        v45 = off_1022A0288;
        if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEFAULT))
        {
          std::operator+<char>(v85, "WifiAssociatedApHarvestDatabase, ", a1 + 376);
          v46 = v85[23];
          v47 = *(_BYTE **)v85;
          sub_1000C2254(&v84, &__p);
          v48 = v85;
          if (v46 < 0)
            v48 = v47;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v49 = &__p;
          else
            v49 = (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = v48;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v49;
          *(_WORD *)&buf[22] = 2048;
          *(double *)&buf[24] = v43;
          *(_WORD *)v95 = 2048;
          *(double *)&v95[2] = v44;
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "%s, will harvest for associated AP %s as distance %.1lf greater than threshold %.1lf", buf, 0x2Au);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if ((v85[23] & 0x80000000) != 0)
            operator delete(*(void **)v85);
        }
        if (!sub_1001BFF7C(115, 2))
        {
LABEL_89:
          v22 = 1;
LABEL_90:
          if (v93.__r_.__value_.__r.__words[0])
          {
            v93.__r_.__value_.__l.__size_ = v93.__r_.__value_.__r.__words[0];
            operator delete(v93.__r_.__value_.__l.__data_);
          }
          return v22;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1022A0280 != -1)
          dispatch_once(&qword_1022A0280, &stru_102158D28);
        v50 = off_1022A0288;
        std::operator+<char>(&__p, "WifiAssociatedApHarvestDatabase, ", a1 + 376);
        v51 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        v52 = __p.__r_.__value_.__r.__words[0];
        sub_1000C2254(&v84, &v83);
        v53 = &__p;
        if (v51 < 0)
          v53 = (std::string *)v52;
        if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v54 = &v83;
        else
          v54 = (std::string *)v83.__r_.__value_.__r.__words[0];
        *(_DWORD *)v85 = 136315906;
        *(_QWORD *)&v85[4] = v53;
        *(_WORD *)&v85[12] = 2080;
        *(_QWORD *)&v85[14] = v54;
        *(_WORD *)&v85[22] = 2048;
        *(double *)&v85[24] = v43;
        *(_WORD *)v86 = 2048;
        *(double *)&v86[2] = v44;
        v16 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v50, 0, "%s, will harvest for associated AP %s as distance %.1lf greater than threshold %.1lf", v85, 42, *(double *)&v83.__r_.__value_.__l.__data_, *(double *)&v83.__r_.__value_.__l.__size_);
        if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v83.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102158D28);
      v6 = off_1022A0288;
      if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEFAULT))
      {
        std::operator+<char>(v85, "WifiAssociatedApHarvestDatabase, ", a1 + 376);
        v7 = v85[23];
        v8 = *(_BYTE **)v85;
        sub_1000C2254(&v84, &__p);
        v9 = v85;
        if (v7 < 0)
          v9 = v8;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = v9;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v10;
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)&buf[24] = 0xAAAAAAAAAAAAAAABLL
                            * ((uint64_t)(v93.__r_.__value_.__l.__size_ - v93.__r_.__value_.__r.__words[0]) >> 6);
        *(_WORD *)v95 = 1024;
        *(_DWORD *)&v95[2] = v4;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%s, will harvest for associated AP %s as it has %lu samples, less than threshold %d", buf, 0x26u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if ((v85[23] & 0x80000000) != 0)
          operator delete(*(void **)v85);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_89;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102158D28);
      v11 = off_1022A0288;
      std::operator+<char>(&__p, "WifiAssociatedApHarvestDatabase, ", a1 + 376);
      v12 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      v13 = __p.__r_.__value_.__r.__words[0];
      sub_1000C2254(&v84, &v83);
      v14 = &__p;
      if (v12 < 0)
        v14 = (std::string *)v13;
      if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v15 = &v83;
      else
        v15 = (std::string *)v83.__r_.__value_.__r.__words[0];
      *(_DWORD *)v85 = 136315906;
      *(_QWORD *)&v85[4] = v14;
      *(_WORD *)&v85[12] = 2080;
      *(_QWORD *)&v85[14] = v15;
      *(_WORD *)&v85[22] = 2048;
      *(_QWORD *)&v85[24] = 0xAAAAAAAAAAAAAAABLL
                          * ((uint64_t)(v93.__r_.__value_.__l.__size_ - v93.__r_.__value_.__r.__words[0]) >> 6);
      *(_WORD *)v86 = 1024;
      *(_DWORD *)&v86[2] = v4;
      v16 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 0, "%s, will harvest for associated AP %s as it has %lu samples, less than threshold %d", v85, 38, v83.__r_.__value_.__r.__words[0], LODWORD(v83.__r_.__value_.__r.__words[1]));
      if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v83.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiAssociatedApHarvestDatabase::shouldAddHarvestSample(const CLWifiHarvestDatabaseEntry &)", "%s\n", v16);
    if (v16 != buf)
      free(v16);
    goto LABEL_89;
  }
  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_102158D28);
  v17 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEFAULT))
  {
    std::operator+<char>(buf, "WifiAssociatedApHarvestDatabase, ", a1 + 376);
    v18 = buf[23];
    v19 = *(_BYTE **)buf;
    sub_1000C2254(&v84, (std::string *)v85);
    v20 = buf;
    if (v18 < 0)
      v20 = v19;
    if (v85[23] >= 0)
      v21 = v85;
    else
      v21 = *(_BYTE **)v85;
    LODWORD(v93.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v93.__r_.__value_.__r.__words + 4) = (std::string::size_type)v20;
    WORD2(v93.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v93.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v21;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%s, #warning, will not harvest for associated AP %s as database is invalid", (uint8_t *)&v93, 0x16u);
    if ((v85[23] & 0x80000000) != 0)
      operator delete(*(void **)v85);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102158D28);
    v66 = off_1022A0288;
    std::operator+<char>(v85, "WifiAssociatedApHarvestDatabase, ", a1 + 376);
    v67 = v85[23];
    v68 = *(_BYTE **)v85;
    sub_1000C2254(&v84, &v93);
    v69 = v85;
    if (v67 < 0)
      v69 = v68;
    if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v70 = &v93;
    else
      v70 = (std::string *)v93.__r_.__value_.__r.__words[0];
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v69;
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v70;
    v71 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v66, 0, "%s, #warning, will not harvest for associated AP %s as database is invalid", (const char *)&__p, 22);
    if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v93.__r_.__value_.__l.__data_);
    if ((v85[23] & 0x80000000) != 0)
      operator delete(*(void **)v85);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiAssociatedApHarvestDatabase::shouldAddHarvestSample(const CLWifiHarvestDatabaseEntry &)", "%s\n", v71);
    if (v71 != buf)
      free(v71);
  }
  return 0;
}

void sub_1008806A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *__p,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100880774(uint64_t a1, uint64_t *a2)
{
  NSObject *v5;
  int v6;
  void **v7;
  void **v8;
  void **v9;
  void *v10;
  int v11;
  void **v12;
  void **v13;
  _BYTE *v14;
  char *v15;
  void *__p[2];
  char v17;
  _BYTE buf[12];
  __int16 v19;
  void **v20;
  char v21;
  int v22;
  void **v23;
  __int16 v24;
  _BYTE *v25;
  void *v26[2];
  char v27;

  if ((sub_10087F8DC(a1, a2) & 1) != 0)
    return sub_100880AA0(a1, a2);
  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_102158D28);
  v5 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEFAULT))
  {
    std::operator+<char>(v26, "WifiAssociatedApHarvestDatabase, ", a1 + 376);
    v6 = v27;
    v7 = (void **)v26[0];
    sub_100ED9F98((uint64_t)a2, __p);
    v8 = v26;
    if (v6 < 0)
      v8 = v7;
    if (v17 >= 0)
      v9 = __p;
    else
      v9 = (void **)__p[0];
    *(_DWORD *)buf = 136315395;
    *(_QWORD *)&buf[4] = v8;
    v19 = 2081;
    v20 = v9;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%s, skip adding associated AP harvest sample: %{private}s", buf, 0x16u);
    if (v17 < 0)
      operator delete(__p[0]);
    if (v27 < 0)
      operator delete(v26[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(v26, 0x65CuLL);
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102158D28);
    v10 = off_1022A0288;
    std::operator+<char>(__p, "WifiAssociatedApHarvestDatabase, ", a1 + 376);
    v11 = v17;
    v12 = (void **)__p[0];
    sub_100ED9F98((uint64_t)a2, buf);
    v13 = __p;
    if (v11 < 0)
      v13 = v12;
    if (v21 >= 0)
      v14 = buf;
    else
      v14 = *(_BYTE **)buf;
    v22 = 136315395;
    v23 = v13;
    v24 = 2081;
    v25 = v14;
    v15 = (char *)_os_log_send_and_compose_impl(2, 0, v26, 1628, &_mh_execute_header, v10, 0, "%s, skip adding associated AP harvest sample: %{private}s", &v22, 22);
    if (v21 < 0)
      operator delete(*(void **)buf);
    if (v17 < 0)
      operator delete(__p[0]);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiAssociatedApHarvestDatabase::addHarvestSampleIfNecessary(const CLWifiHarvestDatabaseEntry &)", "%s\n", v15);
    if (v15 != (char *)v26)
      free(v15);
  }
  return 0;
}

void sub_100880A68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100880AA0(uint64_t a1, _QWORD *a2)
{
  NSObject *v4;
  int v5;
  void **v6;
  void **v7;
  const char *v8;
  uint64_t v9;
  uint64_t *v10;
  NSObject *v11;
  int v12;
  void **v13;
  _BOOL4 v14;
  void **v15;
  const char *v16;
  void *v18;
  int v19;
  _BYTE *v20;
  _BYTE *v21;
  _BYTE *v22;
  char *v23;
  void *v24;
  int v25;
  _BYTE *v26;
  _BOOL4 v27;
  _BYTE *v28;
  const char *v29;
  char *v30;
  const char *v31;
  _BYTE buf[12];
  __int16 v33;
  const char *v34;
  char v35;
  int v36;
  _BYTE *v37;
  __int16 v38;
  _BYTE *v39;
  void *__p[2];
  char v41;
  _BYTE v42[12];
  __int16 v43;
  const char *v44;
  char v45;

  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_102158D28);
  v4 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEFAULT))
  {
    std::operator+<char>(__p, "WifiAssociatedApHarvestDatabase, ", a1 + 376);
    v5 = v41;
    v6 = (void **)__p[0];
    sub_100ED9F98((uint64_t)a2, v42);
    v7 = __p;
    if (v5 < 0)
      v7 = v6;
    if (v45 >= 0)
      v8 = v42;
    else
      v8 = *(const char **)v42;
    *(_DWORD *)buf = 136315395;
    *(_QWORD *)&buf[4] = v7;
    v33 = 2081;
    v34 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%s, adding associated AP harvest sample: %{private}s", buf, 0x16u);
    if (v45 < 0)
      operator delete(*(void **)v42);
    if (v41 < 0)
      operator delete(__p[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102158D28);
    v18 = off_1022A0288;
    std::operator+<char>(v42, "WifiAssociatedApHarvestDatabase, ", a1 + 376);
    v19 = v45;
    v20 = *(_BYTE **)v42;
    sub_100ED9F98((uint64_t)a2, buf);
    v21 = v42;
    if (v19 < 0)
      v21 = v20;
    if (v35 >= 0)
      v22 = buf;
    else
      v22 = *(_BYTE **)buf;
    v36 = 136315395;
    v37 = v21;
    v38 = 2081;
    v39 = v22;
    v23 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v18, 0, "%s, adding associated AP harvest sample: %{private}s", &v36, 22);
    if (v35 < 0)
      operator delete(*(void **)buf);
    if (v45 < 0)
      operator delete(*(void **)v42);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiAssociatedApHarvestDatabase::addHarvestSample(const CLWifiHarvestDatabaseEntry &)", "%s\n", v23);
    if (v23 != (char *)__p)
      free(v23);
  }
  *(_QWORD *)(a1 + 256) = *a2;
  v9 = sub_10104D4B0(a1);
  if ((v9 & 1) != 0)
  {
    v10 = sub_1000A3224();
    __p[0] = COERCE_VOID_(sub_1000A14F8(v10));
    sub_10067D760(a1, (uint64_t)__p);
    sub_10087E234(a1);
    sub_10087E668(a1);
  }
  else
  {
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102158D28);
    v11 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEFAULT))
    {
      std::operator+<char>(__p, "WifiAssociatedApHarvestDatabase, ", a1 + 376);
      v12 = v41;
      v13 = (void **)__p[0];
      v14 = sub_1000CC504(a1);
      v15 = __p;
      v16 = "invalid";
      if (v12 < 0)
        v15 = v13;
      if (v14)
        v16 = "valid";
      *(_DWORD *)v42 = 136315394;
      *(_QWORD *)&v42[4] = v15;
      v43 = 2080;
      v44 = v16;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%s, #warning, could not insert associated AP harvest sample into %s database!", v42, 0x16u);
      if (v41 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102158D28);
      v24 = off_1022A0288;
      std::operator+<char>(v42, "WifiAssociatedApHarvestDatabase, ", a1 + 376);
      v25 = v45;
      v26 = *(_BYTE **)v42;
      v27 = sub_1000CC504(a1);
      v28 = v42;
      v29 = "invalid";
      if (v25 < 0)
        v28 = v26;
      if (v27)
        v29 = "valid";
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v28;
      v33 = 2080;
      v34 = v29;
      LODWORD(v31) = 22;
      v30 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v24, 0, "%s, #warning, could not insert associated AP harvest sample into %s database!", buf, v31);
      if (v45 < 0)
        operator delete(*(void **)v42);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiAssociatedApHarvestDatabase::addHarvestSample(const CLWifiHarvestDatabaseEntry &)", "%s\n", v30);
      if (v30 != (char *)__p)
        free(v30);
    }
  }
  return v9;
}

void sub_100880FA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  if (*(char *)(v24 - 89) < 0)
    operator delete(*(void **)(v24 - 112));
  _Unwind_Resume(exception_object);
}

void sub_100880FE4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *__p[3];

  if (sub_100880774(a1, a2))
  {
    v4 = *a2;
    sub_100094164(a1, __p);
    v4 = *a2;
    sub_100CDAD4C(__p, &v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_100881050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10088106C(uint64_t a1)
{
  *(_QWORD *)a1 = off_102158CF8;
  if (*(char *)(a1 + 399) < 0)
    operator delete(*(void **)(a1 + 376));
  if (*(char *)(a1 + 359) < 0)
    operator delete(*(void **)(a1 + 336));
  *(_QWORD *)a1 = off_10219C0C8;
  if (*(char *)(a1 + 255) < 0)
    operator delete(*(void **)(a1 + 232));
  return sub_10067D1C4(a1);
}

void sub_1008810DC(uint64_t a1)
{
  *(_QWORD *)a1 = off_102158CF8;
  if (*(char *)(a1 + 399) < 0)
    operator delete(*(void **)(a1 + 376));
  if (*(char *)(a1 + 359) < 0)
    operator delete(*(void **)(a1 + 336));
  *(_QWORD *)a1 = off_10219C0C8;
  if (*(char *)(a1 + 255) < 0)
    operator delete(*(void **)(a1 + 232));
  sub_10067D1C4(a1);
  operator delete();
}

void sub_100881160(id a1)
{
  off_1022A0288 = os_log_create("com.apple.locationd.Utility", "Database");
}

_QWORD *sub_10088118C@<X0>(unsigned __int8 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x1A8uLL);
  result = sub_1008811E4(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1008811D0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1008811E4(_QWORD *a1, unsigned __int8 *a2)
{
  char v4;

  a1[2] = 0;
  *a1 = off_102158D58;
  a1[1] = 0;
  sub_10088129C((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_100881230(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100881244(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102158D58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100881258(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102158D58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10088128C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_10088129C(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  void *__p[2];
  char v6;

  sub_1015A2E04(__p, "");
  sub_10087DE7C(a2, a3, (__int128 *)__p);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_1008812F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100881310@<X0>(unsigned __int8 *a1@<X1>, __int128 *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x1A8uLL);
  result = sub_100881370(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_10088135C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100881370(_QWORD *a1, unsigned __int8 *a2, __int128 *a3)
{
  a1[2] = 0;
  *a1 = off_102158D58;
  a1[1] = 0;
  sub_10087DE7C((uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1008813A8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1008813BC(uint64_t a1)
{
  void *v2;

  sub_1008813F4(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_1008813F4(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (void *)v2[3];
      if (v4)
      {
        v2[4] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_100881438(uint64_t a1, uint64_t a2)
{
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_10012E444(a1, *(_QWORD *)(a2 + 8));
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    sub_1008814AC(a1, i + 2, i + 2);
  return a1;
}

void sub_100881494(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1008813BC(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1008814AC(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v24;

  v7 = sub_100129380((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v8)
          {
            if (sub_10009483C(v13 + 2, a2))
              return v13;
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9)
                v14 %= v9;
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  sub_100881714(a1, v8, a3, (uint64_t)&v24);
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_10012E444(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *v24 = *v21;
    *v21 = v24;
  }
  else
  {
    *v24 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*v24)
    {
      v22 = *(_QWORD *)(*v24 + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v22 >= v9)
          v22 %= v9;
      }
      else
      {
        v22 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24;
    }
  }
  v13 = v24;
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_1008816F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *__p, uint64_t a11)
{
  if (__p)
    sub_1008817BC((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100881714@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  const void *v9;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (const void *)a3[1];
  v8[2] = *a3;
  v8[3] = 0;
  v8[4] = 0;
  v8[5] = 0;
  result = sub_1007B4CDC(v8 + 3, v9, a3[2], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[2] - (_QWORD)v9) >> 6));
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1008817A0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *v1 = 0;
  sub_1008817BC(v3, v2);
  _Unwind_Resume(a1);
}

void sub_1008817BC(uint64_t a1, _QWORD *__p)
{
  void *v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = (void *)__p[3];
    if (v3)
    {
      __p[4] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void sub_100881808()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_1008818A4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_1008818BC()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_100881948(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

uint64_t sub_100881960()
{
  sub_1015A2E04(&qword_102304F90, "WifiAssociatedApHarvestTable");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102304F90, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102304FA8, "WifiAssociatedApWifiHarvestTable");
  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102304FA8, (void *)&_mh_execute_header);
}

double sub_1008819DC(_QWORD *a1)
{
  _QWORD *v1;
  double result;

  v1 = sub_100D03FF0(a1);
  *v1 = off_102158DA8;
  *((_OWORD *)v1 + 1) = 0u;
  *((_OWORD *)v1 + 2) = 0u;
  *((_OWORD *)v1 + 3) = 0u;
  *((_OWORD *)v1 + 4) = 0u;
  *(_OWORD *)((char *)v1 + 76) = 0u;
  *(_QWORD *)((char *)v1 + 92) = 1065353216;
  *((_DWORD *)v1 + 25) = 0;
  *((_WORD *)v1 + 54) = 0;
  *((_BYTE *)v1 + 110) = 0;
  *(_QWORD *)&result = 0x1E00000000;
  v1[14] = 0x1E00000000;
  *((_BYTE *)v1 + 152) = 1;
  v1[21] = 0x1E00000000;
  *((_DWORD *)v1 + 41) = 1031798784;
  return result;
}

void sub_100881A44(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned __int16 *v7;
  char v8;

  v3 = *(_BYTE *)(a2 + 74);
  if (v3)
  {
    *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 4);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 20);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 48);
    v4 = *(unsigned int *)(a2 + 64);
    *(_QWORD *)(a1 + 76) = v4;
    *(_DWORD *)(a1 + 86) = *(_DWORD *)(a2 + 68);
    *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 72) != 0;
    v5 = *(unsigned __int8 *)(a2 + 73);
    v6 = *(_QWORD *)(a2 + 56);
    *(_DWORD *)(a1 + 112) = 0;
    v7 = (unsigned __int16 *)(a1 + 112);
    *(_BYTE *)(a1 + 85) = v5 != 0;
    *(_QWORD *)(a1 + 68) = v6;
    *(_BYTE *)(a1 + 110) = v3;
    if ((v4 - 1) <= 0x1C)
      sub_100881B30(v7, v4);
    v8 = 1;
  }
  else
  {
    v8 = 0;
  }
  *(_BYTE *)(a1 + 90) = v8;
}

void sub_100881B30(unsigned __int16 *a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  _DWORD v11[2];
  __int16 v12;
  int v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  int v17;

  if (a1[1] || *a1)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102158E08);
    v4 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v5 = a1[1];
      v6 = *a1;
      *(_DWORD *)buf = 67109376;
      v15 = v5;
      v16 = 1024;
      v17 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Assertion failed: fHeadAndSize.fSize == 0 && fHeadAndSize.fHead == 0, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 78,size,%u,head,%u.", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102158E08);
      v7 = a1[1];
      v8 = *a1;
      v11[0] = 67109376;
      v11[1] = v7;
      v12 = 1024;
      v13 = v8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: fHeadAndSize.fSize == 0 && fHeadAndSize.fHead == 0, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 78,size,%u,head,%u.", v11, 14);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 0, "void CMQueue<BOOL>::setCapacity(size_t) [T = BOOL]", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
  if (a2)
    *((_DWORD *)a1 + 1) = a2;
}

void sub_100881D1C(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  NSObject *v7;
  double v8;
  double v9;
  double v10;
  NSObject *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  NSObject *v18;
  double v19;
  double v20;
  double v21;
  int v22;
  int v23;
  double v24;
  int v25;
  int v26;
  int v27;
  const char *v28;
  uint8_t *v29;
  double v30;
  double v31;
  double v32;
  const char *v33;
  uint8_t *v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  const char *v41;
  uint8_t *v42;
  double v43;
  double v44;
  double v45;
  int v46;
  int v47;
  double v48;
  const char *v49;
  uint8_t *v50;
  double v51;
  int v52;
  double v53;
  __int16 v54;
  double v55;
  _BYTE v56[10];
  __int16 v57;
  _BYTE v58[10];
  _BYTE v59[10];
  double v60;
  uint8_t buf[4];
  _BYTE v62[10];
  double v63;
  _BYTE v64[10];
  __int16 v65;
  _BYTE v66[10];
  _BYTE v67[10];
  double v68;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102158E08);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_DWORD *)(a1 + 52);
    v4 = *(_DWORD *)(a1 + 56);
    v5 = *(_DWORD *)(a1 + 60);
    v6 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)buf = 67109888;
    *(_DWORD *)v62 = v3;
    *(_WORD *)&v62[4] = 1024;
    *(_DWORD *)&v62[6] = v4;
    LOWORD(v63) = 1024;
    *(_DWORD *)((char *)&v63 + 2) = v5;
    HIWORD(v63) = 1024;
    *(_DWORD *)v64 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "configuration: low band = [%d %d] high band [%d %d]", buf, 0x1Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102158E08);
    v25 = *(_DWORD *)(a1 + 56);
    v26 = *(_DWORD *)(a1 + 60);
    v27 = *(_DWORD *)(a1 + 64);
    WORD2(v53) = 1024;
    HIWORD(v53) = v25;
    *(_DWORD *)((char *)&v55 + 2) = v26;
    HIWORD(v55) = 1024;
    *(_DWORD *)v56 = v27;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "configuration: low band = [%d %d] high band [%d %d]", &v52, 26, 67109888, HIDWORD(v53));
    v29 = (uint8_t *)v28;
    sub_100512490("Generic", 1, 0, 2, "void CMOnBodyDetector::printParameters() const", "%s\n", v28);
    if (v29 != buf)
      free(v29);
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102158E08);
  v7 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v8 = *(float *)(a1 + 40);
    v9 = *(float *)(a1 + 44);
    v10 = *(float *)(a1 + 48);
    *(_DWORD *)buf = 134218496;
    *(double *)v62 = v8;
    *(_WORD *)&v62[8] = 2048;
    v63 = v9;
    *(_WORD *)v64 = 2048;
    *(double *)&v64[2] = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "configuration: classifierMinLowPower = %f, classifierMaxLowPower = %f, classifierMaxHighPower = %f", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102158E08);
    v30 = *(float *)(a1 + 40);
    v31 = *(float *)(a1 + 44);
    v32 = *(float *)(a1 + 48);
    v52 = 134218496;
    v53 = v30;
    v54 = 2048;
    v55 = v31;
    *(_WORD *)v56 = 2048;
    *(double *)&v56[2] = v32;
    LODWORD(v51) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "configuration: classifierMinLowPower = %f, classifierMaxLowPower = %f, classifierMaxHighPower = %f", COERCE_DOUBLE(&v52), v51);
    v34 = (uint8_t *)v33;
    sub_100512490("Generic", 1, 0, 2, "void CMOnBodyDetector::printParameters() const", "%s\n", v33);
    if (v34 != buf)
      free(v34);
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102158E08);
  v11 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v12 = *(float *)(a1 + 16);
    v13 = *(float *)(a1 + 20);
    v14 = *(float *)(a1 + 24);
    v15 = *(float *)(a1 + 28);
    v16 = *(float *)(a1 + 32);
    v17 = *(float *)(a1 + 36);
    *(_DWORD *)buf = 134219264;
    *(double *)v62 = v12;
    *(_WORD *)&v62[8] = 2048;
    v63 = v13;
    *(_WORD *)v64 = 2048;
    *(double *)&v64[2] = v14;
    v65 = 2048;
    *(double *)v66 = v15;
    *(_WORD *)&v66[8] = 2048;
    *(double *)v67 = v16;
    *(_WORD *)&v67[8] = 2048;
    v68 = v17;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "configuration: theta = [%.2f %.2f %.2f %.2f %.2f %.2f]", buf, 0x3Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102158E08);
    v35 = *(float *)(a1 + 16);
    v36 = *(float *)(a1 + 20);
    v37 = *(float *)(a1 + 24);
    v38 = *(float *)(a1 + 28);
    v39 = *(float *)(a1 + 32);
    v40 = *(float *)(a1 + 36);
    v52 = 134219264;
    v53 = v35;
    v54 = 2048;
    v55 = v36;
    *(_WORD *)v56 = 2048;
    *(double *)&v56[2] = v37;
    v57 = 2048;
    *(double *)v58 = v38;
    *(_WORD *)&v58[8] = 2048;
    *(double *)v59 = v39;
    *(_WORD *)&v59[8] = 2048;
    v60 = v40;
    LODWORD(v51) = 62;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "configuration: theta = [%.2f %.2f %.2f %.2f %.2f %.2f]", COERCE_DOUBLE(&v52), v51);
    v42 = (uint8_t *)v41;
    sub_100512490("Generic", 1, 0, 2, "void CMOnBodyDetector::printParameters() const", "%s\n", v41);
    if (v42 != buf)
      free(v42);
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102158E08);
  v18 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v19 = *(float *)(a1 + 68);
    v20 = *(double *)(a1 + 76);
    v21 = *(float *)(a1 + 86);
    v22 = *(unsigned __int8 *)(a1 + 84);
    v23 = *(unsigned __int8 *)(a1 + 85);
    v24 = *(float *)(a1 + 72);
    *(_DWORD *)buf = 134219264;
    *(double *)v62 = v19;
    *(_WORD *)&v62[8] = 2048;
    v63 = v20;
    *(_WORD *)v64 = 2048;
    *(double *)&v64[2] = v21;
    v65 = 1024;
    *(_DWORD *)v66 = v22;
    *(_WORD *)&v66[4] = 1024;
    *(_DWORD *)&v66[6] = v23;
    *(_WORD *)v67 = 2048;
    *(double *)&v67[2] = v24;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "configuration: oddsThreshold = %f, medianFilterSize = %zu, confidenceThreshold = %f, useHysteresis = %d, useAngleOverride = %d, angleMetricThreshold = %f", buf, 0x36u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102158E08);
    v43 = *(float *)(a1 + 68);
    v44 = *(double *)(a1 + 76);
    v45 = *(float *)(a1 + 86);
    v46 = *(unsigned __int8 *)(a1 + 84);
    v47 = *(unsigned __int8 *)(a1 + 85);
    v48 = *(float *)(a1 + 72);
    v52 = 134219264;
    v53 = v43;
    v54 = 2048;
    v55 = v44;
    *(_WORD *)v56 = 2048;
    *(double *)&v56[2] = v45;
    v57 = 1024;
    *(_DWORD *)v58 = v46;
    *(_WORD *)&v58[4] = 1024;
    *(_DWORD *)&v58[6] = v47;
    *(_WORD *)v59 = 2048;
    *(double *)&v59[2] = v48;
    LODWORD(v51) = 54;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "configuration: oddsThreshold = %f, medianFilterSize = %zu, confidenceThreshold = %f, useHysteresis = %d, useAngleOverride = %d, angleMetricThreshold = %f", COERCE_DOUBLE(&v52), *(size_t *)&v51);
    v50 = (uint8_t *)v49;
    sub_100512490("Generic", 1, 0, 2, "void CMOnBodyDetector::printParameters() const", "%s\n", v49);
    if (v50 != buf)
      free(v50);
  }
}

uint64_t sub_100882454(uint64_t result)
{
  *(_DWORD *)(result + 92) = 1065353216;
  *(_WORD *)(result + 108) = 0;
  *(_DWORD *)(result + 112) = 0;
  return result;
}

void sub_100882468(uint64_t a1, float a2, float a3)
{
  float v3;
  float v5;

  v3 = a2 * 100.0;
  if ((float)(a2 * 100.0) <= (float)(*(float *)(a1 + 44) * 100.0) && v3 >= (float)(*(float *)(a1 + 40) * 100.0))
  {
    v5 = a3 * 100.0;
    if (!sub_100E394FC(*(unsigned __int8 *)(a1 + 110)) || v5 <= (float)(*(float *)(a1 + 48) * 100.0))
      expf((float)((float)((float)((float)(*(float *)(a1 + 16) + (float)(*(float *)(a1 + 20) * v3))+ (float)(*(float *)(a1 + 24) * v5))+ (float)((float)(v3 * *(float *)(a1 + 28)) * v5))+ (float)((float)(v3 * *(float *)(a1 + 32)) * v3))+ (float)((float)(v5 * *(float *)(a1 + 36)) * v5));
  }
}

uint64_t sub_10088252C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int16 v9;
  __int16 v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  BOOL v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  float v20;
  BOOL v21;
  char v22;
  float v23;
  float v24;
  const char *v26;
  uint8_t *v27;
  _WORD v28[8];
  uint8_t buf[1640];

  if (!*(_BYTE *)(a1 + 90))
  {
    v4 = 0;
    v3 = 3;
    return v3 | (v4 << 32);
  }
  if (*(_BYTE *)(a1 + 91))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102158E08);
    v2 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Accel saturation detected, forcing OnBody.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102158E08);
      v28[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Accel saturation detected, forcing OnBody.", v28, 2);
      v27 = (uint8_t *)v26;
      sub_100512490("Generic", 1, 0, 2, "CLOnBodyNotifier_Type::CLOnBodyDetectionResult CMOnBodyDetector::detect()", "%s\n", v26);
      if (v27 != buf)
        free(v27);
      v4 = 1;
      v3 = 1;
    }
    else
    {
      v3 = 1;
      v4 = 1;
    }
    return v3 | (v4 << 32);
  }
  sub_100882468(a1, *(float *)(a1 + 96), *(float *)(a1 + 100));
  *(_DWORD *)(a1 + 92) = v5;
  if (*(_BYTE *)(a1 + 85))
  {
    sub_10087DBE8((unsigned __int16 *)(a1 + 168), (_DWORD *)(a1 + 104));
    *(_BYTE *)(a1 + 152) = 1;
  }
  v6 = *(unsigned __int16 *)(a1 + 112);
  v7 = *(unsigned __int16 *)(a1 + 114);
  v8 = *(unsigned int *)(a1 + 116);
  if (*(_WORD *)(a1 + 114) && (_DWORD)v8 == (_DWORD)v7)
  {
    v9 = v6 + 1;
    if (v6 + 1 >= v7)
      v10 = *(_WORD *)(a1 + 114);
    else
      v10 = 0;
    LOWORD(v6) = v9 - v10;
    *(_WORD *)(a1 + 112) = v6;
    LOWORD(v11) = v7 - 1;
    *(_WORD *)(a1 + 114) = v7 - 1;
    LODWORD(v7) = (unsigned __int16)(v7 - 1);
  }
  else
  {
    LOWORD(v11) = *(_WORD *)(a1 + 114);
  }
  v12 = (unsigned __int16)v6 + (unint64_t)(unsigned __int16)v11;
  if (v12 >= v8)
    v13 = v8;
  else
    v13 = 0;
  *(_BYTE *)(a1 + v12 - v13 + 120) = *(float *)(a1 + 92) > *(float *)(a1 + 68);
  if (v8 <= v7)
  {
    if ((unint64_t)(unsigned __int16)v6 + 1 < v8)
      LOWORD(v8) = 0;
    *(_WORD *)(a1 + 112) = v6 + 1 - v8;
  }
  else
  {
    LOWORD(v11) = v11 + 1;
    *(_WORD *)(a1 + 114) = v11;
  }
  v14 = *(unsigned __int16 *)(a1 + 108);
  v15 = (unsigned __int16)v11 <= v14;
  if ((unsigned __int16)v11 > v14)
  {
    *(_WORD *)(a1 + 108) = v14 + 1;
    v18 = *(unsigned __int8 *)(a1 + 84);
    v3 = 3;
    goto LABEL_43;
  }
  if ((_WORD)v11)
  {
    v16 = 0;
    v17 = 0;
    do
    {
      v17 += *(unsigned __int8 *)sub_100882CA4((unsigned __int16 *)(a1 + 112), v16++);
      v11 = *(unsigned __int16 *)(a1 + 114);
    }
    while (v16 < v11);
    if (*(_BYTE *)(a1 + 84))
    {
      v18 = 1;
      if (!v17)
      {
LABEL_40:
        v3 = 0;
        v15 = 0;
        v20 = 1.0 - *(float *)(a1 + 92);
        if (!v18)
          goto LABEL_49;
        goto LABEL_44;
      }
      goto LABEL_42;
    }
    v19 = *(unsigned __int16 *)(a1 + 114);
  }
  else
  {
    LOWORD(v11) = *(unsigned __int8 *)(a1 + 84);
    if (*(_BYTE *)(a1 + 84))
    {
      LOWORD(v11) = 0;
      v18 = 1;
      goto LABEL_40;
    }
    v19 = 0;
    v17 = 0;
  }
  v18 = 0;
  if (v17 < (unint64_t)(v19 + 1) >> 1)
    goto LABEL_40;
LABEL_42:
  v3 = 1;
LABEL_43:
  v20 = *(float *)(a1 + 92);
  if (!v18)
  {
LABEL_49:
    v4 = v20 > *(float *)(a1 + 86);
    goto LABEL_50;
  }
LABEL_44:
  if (*(_BYTE *)sub_100882CA4((unsigned __int16 *)(a1 + 112), (unsigned __int16)v11 - 1))
    v21 = 0;
  else
    v21 = v15;
  if (!v21)
    goto LABEL_49;
  v4 = 0;
LABEL_50:
  v22 = !v15;
  if (!*(_BYTE *)(a1 + 85))
    v22 = 1;
  if ((v22 & 1) == 0)
  {
    if (*(_BYTE *)(a1 + 152))
      sub_1004786E8(a1 + 152);
    v23 = *(float *)(a1 + 156);
    v24 = *(float *)(a1 + 72);
    if (v23 > v24)
      v4 = 1;
    else
      v4 = v4;
    v3 = v23 <= v24;
  }
  return v3 | (v4 << 32);
}

float sub_100882904(unsigned __int16 *a1)
{
  unint64_t v1;
  unint64_t v2;
  int v3;
  unsigned __int16 *v4;
  unsigned __int16 *v5;
  unsigned __int16 *v6;
  float v7;
  float *v8;
  float v9;
  float *v10;
  float v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  float v16;
  float v17;
  _BYTE v19[4];
  float v20;
  float v21;
  int v22;
  __int16 v23;
  __int16 v24;
  int v25;
  _DWORD v26[256];

  v1 = 0;
  v2 = 0;
  v3 = 0;
  v25 = 256;
  v22 = 1031798784;
  v4 = a1 + 538;
  v5 = a1 + 1062;
  v6 = a1 + 14;
  do
  {
    v7 = *(float *)sub_1004784C4(v4, v1);
    v8 = (float *)sub_1004784C4(v5, v1);
    v9 = sqrtf((float)(v7 * v7) + (float)(*v8 * *v8));
    v10 = (float *)sub_1004784C4(v6, v1);
    v11 = atan2f(*v10, v9);
    v12 = v2 + (unsigned __int16)v3;
    if (v12 >= 0x100)
      v13 = -256;
    else
      v13 = 0;
    *(float *)&v26[v13 + v12] = v11;
    if ((unsigned __int16)v3 >= 0xFFu)
      v14 = -256;
    else
      v14 = 0;
    v15 = v3 + v14;
    if (v2 > 0xFF)
      v3 = v15 + 1;
    else
      ++v2;
    ++v1;
  }
  while (v1 != 256);
  v24 = v2;
  v23 = v3;
  v19[0] = 1;
  sub_1004786E8((uint64_t)v19);
  v16 = v21;
  if (v19[0])
    sub_1004786E8((uint64_t)v19);
  v17 = v20;
  if (v20 <= 0.0)
    v17 = -v20;
  return sqrtf(v16) / v17;
}

BOOL sub_100882A7C(unsigned __int16 *a1)
{
  unint64_t v1;
  unsigned int v2;
  unsigned __int16 *v3;
  unsigned __int16 *v4;
  unsigned __int16 *v5;
  float *v6;
  float v7;
  float *v8;
  float v9;
  float *v10;

  v1 = 0;
  v2 = 0;
  v3 = a1 + 14;
  v4 = a1 + 538;
  v5 = a1 + 1062;
  do
  {
    v6 = (float *)sub_1004784C4(v3, v1);
    v7 = *v6 * *v6;
    v8 = (float *)sub_1004784C4(v4, v1);
    v9 = v7 + (float)(*v8 * *v8);
    v10 = (float *)sub_1004784C4(v5, v1);
    if (sqrtf(v9 + (float)(*v10 * *v10)) > 10.0)
      ++v2;
    ++v1;
  }
  while (v1 != 256);
  return v2 > 0xE6;
}

void sub_100882B28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v10;
  unsigned int v11;
  int v12;
  float v13;
  float v14;
  float *v15;
  float *v16;
  float v17;
  unsigned int v18;
  unsigned int v19;
  float *v20;
  float v21;
  float *v22;
  float v23;

  if (*(_DWORD *)(a2 + 8) == 100)
  {
    *(_BYTE *)(a1 + 91) = sub_100882A7C((unsigned __int16 *)a2);
    v10 = *(_DWORD *)(a1 + 52);
    v11 = *(_DWORD *)(a1 + 56);
    v12 = *(unsigned __int8 *)(a1 + 110);
    v13 = 0.0;
    v14 = 0.0;
    if (v10 <= v11)
    {
      v15 = (float *)(a4 + 4 * (int)v10);
      v16 = (float *)(a6 + 4 * (int)v10);
      do
      {
        v17 = *v16;
        if (v12 == 18)
          v17 = v17 - *v15;
        v14 = v14 + v17;
        ++v15;
        ++v10;
        ++v16;
      }
      while (v11 >= v10);
    }
    *(float *)(a1 + 96) = v14;
    v18 = *(_DWORD *)(a1 + 60);
    v19 = *(_DWORD *)(a1 + 64);
    if (v18 <= v19)
    {
      v20 = (float *)(a4 + 4 * (int)v18);
      v21 = 0.0;
      v22 = (float *)(a6 + 4 * (int)v18);
      do
      {
        v23 = *v22;
        if (v12 == 18)
          v23 = v23 - *v20;
        v21 = v21 + v23;
        ++v20;
        ++v18;
        ++v22;
      }
      while (v19 >= v18);
      v13 = v21 * 0.125;
    }
    *(float *)(a1 + 96) = v14 * 0.125;
    *(float *)(a1 + 100) = v13;
    *(float *)(a1 + 104) = sub_100882904((unsigned __int16 *)a2);
  }
}

_QWORD *sub_100882C2C(_QWORD *a1)
{
  *a1 = off_102158DA8;
  return sub_100D0400C(a1);
}

void sub_100882C3C(_QWORD *a1)
{
  *a1 = off_102158DA8;
  sub_100D0400C(a1);
  operator delete();
}

BOOL sub_100882C6C(uint64_t a1, int a2)
{
  return a2 == 100;
}

void sub_100882C78(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_100882CA4(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  NSObject *v7;
  int v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  unint64_t v13;
  __int16 v14;
  int v15;
  uint8_t buf[4];
  unint64_t v17;
  __int16 v18;
  int v19;

  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102158E08);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 134218240;
      v17 = a2;
      v18 = 1024;
      v19 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102158E08);
      v9 = *((_DWORD *)a1 + 1);
      v12 = 134218240;
      v13 = a2;
      v14 = 1024;
      v15 = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", (size_t)&v12, 18);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "const T &CMQueue<BOOL>::operator[](const size_t) const [T = BOOL]", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
  v4 = *a1 + a2;
  v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5)
    v5 = 0;
  return (uint64_t)a1 + v4 - v5 + 8;
}

uint64_t sub_100882E9C(uint64_t a1, uint64_t a2, int a3, char a4, char a5)
{
  uint64_t v9;
  uint64_t v10;
  double v12;

  v9 = sub_1005821F4(a1, a3);
  *(_QWORD *)v9 = off_102158E38;
  *(_QWORD *)(v9 + 200) = off_102158EA0;
  sub_100DA368C(v9 + 200, *(unsigned __int8 *)(v9 + 8), a5);
  *(_QWORD *)a1 = off_102158E38;
  *(_QWORD *)(a1 + 200) = off_102158EA0;
  *(_BYTE *)(a1 + 274) = a4;
  *(_BYTE *)(a1 + 275) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  v10 = sub_10021C350();
  v12 = sub_1009EC168(v10, (double *)(a1 + 24));
  sub_100AD74E8(a1 + 288, &v12, a1 + 16, a2);
  return a1;
}

void sub_100882F50(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100582BD8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100882F78(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = off_102158E38;
  a1[25] = off_102158EA0;
  v2 = a1 + 25;
  sub_100DA39A4((uint64_t)(a1 + 25));
  sub_100DA3700(v2);
  sub_100DA374C(v2);
  sub_100AD7554(a1 + 36);
  sub_100DA36BC(v2);
  return sub_100582BD8((uint64_t)a1);
}

uint64_t sub_100882FE0(uint64_t a1)
{
  return sub_100882F78((_QWORD *)(a1 - 200));
}

void sub_100882FE8(_QWORD *a1)
{
  sub_100882F78(a1);
  operator delete();
}

void sub_10088300C(uint64_t a1)
{
  sub_100882F78((_QWORD *)(a1 - 200));
  operator delete();
}

uint64_t sub_100883034(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  double v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1 + 288;
  sub_100AD7584(a1 + 288);
  if (*(_BYTE *)(a1 + 274))
  {
    sub_100DA39D4(a1 + 200);
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v5 = 0xBFF0000000000000;
    v4 = sub_100078B88();
    sub_100AD8E68(v2, (double *)&v7, (double *)&v6, (double *)&v5, &v4);
  }
  sub_100DA3814(a1 + 200);
  sub_100DA38F0(a1 + 200);
  v7 = 2;
  result = sub_1005837B8(a1, &v7);
  *(_BYTE *)(a1 + 275) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  return result;
}

_QWORD *sub_1008830DC(uint64_t a1)
{
  _QWORD *v1;

  v1 = (_QWORD *)(a1 + 200);
  sub_100DA39A4(a1 + 200);
  sub_100DA3700(v1);
  return sub_100DA374C(v1);
}

void sub_10088310C(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  if (qword_10229FD20 != -1)
    dispatch_once(&qword_10229FD20, &stru_102158F08);
  v4 = qword_10229FD28;
  if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Application state changed, %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_102158F08);
    v7[0] = 67109120;
    v7[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 1, "Application state changed, %d", v7);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLSensorFusionServiceLegacy::applicationStateChanged(BOOL)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  *(_BYTE *)(a1 + 275) = a2 ^ 1;
}

void sub_1008832C0(uint64_t a1, uint64_t a2)
{
  float v4;
  uint64_t v5;
  uint64_t v6;
  float32x4_t v7;
  float32x2_t v8;
  float v9;
  int v10;
  uint64_t v11;
  float32x4_t v12;
  __int16 v13;
  __int16 v14;
  double v15;
  double v16;
  double v17;
  NSObject *v18;
  NSObject *v19;
  const char *v20;
  uint8_t *v21;
  const char *v22;
  uint8_t *v23;
  double v24;
  _DWORD v25[17];
  uint64_t v26;
  int v27;
  char v28;
  uint64_t v29;
  _BYTE v30[12];
  uint8_t buf[16];
  double v32;

  v4 = *(float *)(a2 + 12);
  *(double *)buf = *(float *)(a2 + 8);
  v5 = a1 + 304;
  v6 = a1 + 288;
  v24 = v4;
  *(double *)v30 = *(float *)(a2 + 16);
  sub_100AD7680(a1 + 288, (float64x2_t *)buf, (uint64_t)&v24, (double *)v30, (_QWORD *)a2);
  v7.i64[0] = *(_QWORD *)(a1 + 464);
  if (*(double *)v7.i64 <= 0.0)
  {
    v8 = 0;
    v9 = 0.0;
  }
  else
  {
    sub_100AD855C((double *)buf, (double *)v5);
    v7 = (float32x4_t)vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)(a1 + 472)), *(float64x2_t *)buf);
    v8 = vcvt_f32_f64((float64x2_t)v7);
    *(double *)v7.i64 = *(float *)(a1 + 480) - v32;
    v9 = *(double *)v7.i64;
  }
  v10 = *(_DWORD *)(a1 + 452);
  *(_OWORD *)v25 = 0uLL;
  v24 = -1.0;
  v11 = *(_QWORD *)(v5 + 140);
  sub_10012C97C((float32x4_t *)v25, v7);
  memset(&v25[4], 0, 36);
  *(_OWORD *)&v25[13] = xmmword_101BB2F90;
  v26 = 0x1FF00000000;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v24 = *(double *)a2;
  v12 = *(float32x4_t *)(v5 + 16);
  *(float32x4_t *)buf = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)v5), (float64x2_t)v12);
  sub_10012C97C((float32x4_t *)buf, v12);
  *(_OWORD *)v25 = *(_OWORD *)buf;
  *(float32x2_t *)&v25[4] = v8;
  *(float *)&v25[6] = v9;
  *(_QWORD *)&v25[7] = v11;
  v25[9] = v10;
  WORD2(v26) = 511;
  *(_OWORD *)&v25[10] = xmmword_101BB2FA0;
  v25[14] = -1082130432;
  v13 = HIWORD(v26) & 0xFFE7;
  if (*(_BYTE *)(a1 + 252))
    v13 = HIWORD(v26) & 0xFFE7 | 0x10;
  HIWORD(v26) = v13;
  if (sub_100AD757C(v6))
    v14 = 256;
  else
    v14 = 0;
  HIWORD(v26) = HIWORD(v26) & 0xFEFF | v14;
  v27 = 3;
  v29 = 0;
  v28 = *(_BYTE *)(a2 + 22);
  v15 = *(double *)a2;
  v16 = *(double *)(a1 + 280);
  if (v16 != 0.0)
  {
    v17 = v15 - v16;
    if (v15 - v16 > 0.100000001)
    {
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_102158F08);
      v18 = qword_10229FD28;
      if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        *(double *)&buf[4] = v17;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Large time gap, %lf", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD20 != -1)
          dispatch_once(&qword_10229FD20, &stru_102158F08);
        *(_DWORD *)v30 = 134217984;
        *(double *)&v30[4] = v17;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 1, "Large time gap, %lf", COERCE_DOUBLE(v30));
        v21 = (uint8_t *)v20;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLSensorFusionServiceLegacy::feedGyroData(const CLGyro::Sample *)", "%s\n", v20);
        if (v21 != buf)
          free(v21);
      }
      if (*(_BYTE *)(a1 + 275))
      {
        if (qword_10229FD20 != -1)
          dispatch_once(&qword_10229FD20, &stru_102158F08);
        v19 = qword_10229FD28;
        if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Reset while backgrounded", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD20 != -1)
            dispatch_once(&qword_10229FD20, &stru_102158F08);
          *(_WORD *)v30 = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 0, "Reset while backgrounded", v30, 2);
          v23 = (uint8_t *)v22;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLSensorFusionServiceLegacy::feedGyroData(const CLGyro::Sample *)", "%s\n", v22);
          if (v23 != buf)
            free(v23);
        }
        sub_100AD7584(v6);
      }
    }
  }
  *(double *)(a1 + 280) = v15;
  sub_100582E8C(a1, (uint64_t)&v24);
}

void sub_100883770(uint64_t a1, uint64_t a2)
{
  sub_1008832C0(a1 - 200, a2);
}

double sub_100883778(uint64_t a1, float32x2_t *a2, float *a3)
{
  return sub_100AD814C(a1 + 288, a2, a3);
}

double sub_100883780(uint64_t a1, float32x2_t *a2, float *a3)
{
  return sub_100AD814C(a1 + 88, a2, a3);
}

void sub_100883788(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  double v4;
  double v5;

  v2 = *(float *)(a2 + 12);
  v5 = *(float *)(a2 + 8);
  v3 = *(float *)(a2 + 16);
  v4 = v2;
  sub_100AD8E68(a1 + 288, &v5, &v4, &v3, (_QWORD *)a2);
}

void sub_1008837D4(uint64_t a1, uint64_t a2)
{
  sub_100883788(a1 - 200, a2);
}

void sub_1008837DC(id a1)
{
  qword_10229FD28 = (uint64_t)os_log_create("com.apple.locationd.Motion", "DeviceMotion");
}

void sub_100883808(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_1022A0190 != -1)
    dispatch_once(&qword_1022A0190, &stru_102158F28);
  v2 = qword_1022A0198;
  if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Unregistering for ALS", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_102158F28);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 1, "Unregistering for ALS", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLAmbientLightCollector::CLAmbientLightCollectorImpl::unregisterForAmbientLight()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  v3 = *(void **)(a1 + 24);
  if (v3)
  {
    objc_msgSend(v3, "unregisterNotificationForKeys:", &off_102220558);
    objc_msgSend(*(id *)(a1 + 24), "registerNotificationBlock:", 0);

    *(_QWORD *)(a1 + 24) = 0;
  }
}

void sub_1008839C4(uint64_t a1)
{
  NSObject *v2;
  _BOOL4 v3;
  id v4;
  _BOOL4 v5;
  const char *v6;
  uint8_t *v7;
  _QWORD v8[5];
  _DWORD v9[4];
  uint8_t buf[4];
  _BOOL4 v11;

  if (qword_1022A0190 != -1)
    dispatch_once(&qword_1022A0190, &stru_102158F28);
  v2 = qword_1022A0198;
  if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_INFO))
  {
    v3 = *(_QWORD *)(a1 + 24) != 0;
    *(_DWORD *)buf = 67109120;
    v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Registering for ALS, hasExistingRegistration, %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_102158F28);
    v5 = *(_QWORD *)(a1 + 24) != 0;
    v9[0] = 67109120;
    v9[1] = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 1, "Registering for ALS, hasExistingRegistration, %d", v9);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLAmbientLightCollector::CLAmbientLightCollectorImpl::registerForAmbientLight(BOOL)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  if (!*(_QWORD *)(a1 + 24))
  {
    v4 = objc_alloc_init((Class)BrightnessSystemClient);
    *(_QWORD *)(a1 + 24) = v4;
    if (v4)
    {
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      v8[2] = sub_100023224;
      v8[3] = &unk_10214D320;
      v8[4] = a1;
      objc_msgSend(v4, "registerNotificationBlock:forProperties:", v8, &off_102220540);
      objc_msgSend(*(id *)(a1 + 24), "setProperty:forKey:", (id)CFMakeCollectable(kCFBooleanTrue), CFSTR("ActivateALS"));
    }
  }
}

void sub_100883C0C()
{
  operator new();
}

uint64_t *sub_100883C64(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    sub_100883CD8((uint64_t)a1, v2);
  return a1;
}

void sub_100883C98(uint64_t *a1)
{
  sub_1008839C4(*a1);
}

void sub_100883CA4(uint64_t *a1)
{
  sub_100883808(*a1);
}

void sub_100883CAC(id a1)
{
  qword_1022A0198 = (uint64_t)os_log_create("com.apple.locationd.Position", "Outdoor");
}

void sub_100883CD8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100883808(a2);
    operator delete();
  }
}

CFTypeRef sub_100883D24(int a1, char *name, uint64_t a3)
{
  const __CFDictionary *v4;
  io_service_t MatchingService;
  io_object_t v6;
  CFTypeRef CFProperty;

  v4 = IOServiceNameMatching(name);
  if (!v4)
    return 0;
  MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v4);
  if (!MatchingService)
    return 0;
  v6 = MatchingService;
  CFProperty = IORegistryEntryCreateCFProperty(MatchingService, (CFStringRef)+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a3), kCFAllocatorDefault, 0);
  IOObjectRelease(v6);
  return CFProperty;
}

const void *sub_100883DAC(int a1)
{
  CFTypeRef v1;
  const void *v2;
  CFTypeID v3;
  NSObject *v4;
  NSObject *v5;
  const char *v7;
  uint8_t *v8;
  const char *v9;
  uint8_t *v10;
  _WORD v11[8];
  uint8_t buf[1640];

  v1 = sub_100883D24(a1, "compass", (uint64_t)"compass-calibration");
  if (!v1)
  {
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_102158F48);
    v5 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Invalid cpas data.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_102158F48);
      v11[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 1, "Invalid cpas data.", v11, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "CFDataRef CLMagnetometerCoexistenceLocal::copyCompassCalibrationData()", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    return 0;
  }
  v2 = v1;
  v3 = CFGetTypeID(v1);
  if (v3 != CFDataGetTypeID())
  {
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_102158F48);
    v4 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "The cpas data is not a CFData type.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_102158F48);
      v11[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 1, "The cpas data is not a CFData type.", v11, 2);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "CFDataRef CLMagnetometerCoexistenceLocal::copyCompassCalibrationData()", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    CFRelease(v2);
    return 0;
  }
  return v2;
}

BOOL sub_1008840AC(int a1)
{
  const __CFData *v1;
  const __CFData *v2;
  const UInt8 *BytePtr;
  UInt8 *v4;
  CFIndex Length;
  CFIndex v6;
  int v7;
  int v9;
  NSObject *v11;
  uint8_t *v12;
  double v13;
  NSObject *v14;
  _BOOL8 v15;
  NSObject *v16;
  double v17;
  uint8_t *v18;
  uint8_t *v19;
  unint64_t v20;
  const __CFData *v21;
  const __CFData *v22;
  const UInt8 *v23;
  const UInt8 *v24;
  const __CFData *v25;
  const __CFData *v26;
  CFTypeID v27;
  const UInt8 *v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  int v32;
  NSObject *v33;
  NSObject *v35;
  NSObject *v36;
  const char *v37;
  uint8_t *v38;
  NSObject *v39;
  uint64_t v40;
  const char *v41;
  uint8_t *v42;
  NSObject *v43;
  const char *v44;
  uint8_t *v45;
  const char *v46;
  uint8_t *v47;
  const char *v48;
  int v49;
  CFIndex v50;
  __int16 v51;
  unint64_t v52;
  uint8_t buf[4];
  CFIndex v54;
  __int16 v55;
  unint64_t v56;

  v1 = (const __CFData *)sub_100883DAC(a1);
  if (v1)
  {
    v2 = v1;
    BytePtr = CFDataGetBytePtr(v1);
    if (!BytePtr)
    {
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_102158F48);
      v16 = qword_10229FD48;
      if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#Warning Cpas pointer is NULL.", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_52;
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_102158F48);
      LOWORD(v49) = 0;
      v17 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 0, "#Warning Cpas pointer is NULL.", &v49, 2);
      v19 = v18;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLMagnetometerCoexistenceLocal::deviceStillHasOriginalCamera()", "%s\n", v17);
      goto LABEL_97;
    }
    v4 = (UInt8 *)BytePtr;
    Length = CFDataGetLength(v2);
    if (Length < 2)
      goto LABEL_47;
    v6 = Length;
    v7 = sub_100368AC4(v4);
    if (v7 == 5 && v6 == 76)
    {
      v20 = 5;
    }
    else
    {
      v9 = v7;
      if (v7 != 6 || v6 != 76)
      {
        if (qword_10229FD40 != -1)
          dispatch_once(&qword_10229FD40, &stru_102158F48);
        v11 = qword_10229FD48;
        if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 67109120;
          LODWORD(v54) = v9;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Unexpected cpas version: %u.", buf, 8u);
        }
        if (!sub_1001BFF7C(115, 0))
          goto LABEL_52;
        bzero(buf, 0x65CuLL);
        if (qword_10229FD40 != -1)
          dispatch_once(&qword_10229FD40, &stru_102158F48);
        v13 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 17, "Unexpected cpas version: %u.", &v49);
        goto LABEL_96;
      }
      v20 = 8;
    }
    v21 = CFDataCreate(kCFAllocatorDefault, v4 + 2, v20);
    if (!v21)
    {
LABEL_47:
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_102158F48);
      v33 = qword_10229FD48;
      if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_FAULT, "Original serial number data is NULL.", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_52;
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_102158F48);
      v13 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 17, "Original serial number data is NULL.");
LABEL_96:
      v19 = v12;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLMagnetometerCoexistenceLocal::deviceStillHasOriginalCamera()", "%s\n", v13);
LABEL_97:
      if (v19 != buf)
        free(v19);
LABEL_52:
      v22 = 0;
LABEL_53:
      v15 = 0;
      v26 = v2;
      goto LABEL_54;
    }
    v22 = v21;
    v23 = CFDataGetBytePtr(v21);
    if (!v23)
    {
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_102158F48);
      v36 = qword_10229FD48;
      if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_FAULT, "Original serial number pointer is NULL.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD40 != -1)
          dispatch_once(&qword_10229FD40, &stru_102158F48);
        LOWORD(v49) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 17, "Original serial number pointer is NULL.", &v49, 2);
        v38 = (uint8_t *)v37;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLMagnetometerCoexistenceLocal::deviceStillHasOriginalCamera()", "%s\n", v37);
        if (v38 != buf)
          free(v38);
      }
      goto LABEL_53;
    }
    v24 = v23;
    v25 = (const __CFData *)sub_100883D24((int)v23, "AppleH4CamIn", (uint64_t)"BackCameraSerialNumber");
    v26 = v25;
    if (!v25 || (v27 = CFGetTypeID(v25), v27 != CFDataGetTypeID()))
    {
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_102158F48);
      v35 = qword_10229FD48;
      if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_FAULT, "Invalid back camera serial number data.", buf, 2u);
      }
      v15 = 0;
      if (!sub_1001BFF7C(115, 0))
      {
LABEL_63:
        CFRelease(v2);
        if (!v26)
        {
LABEL_55:
          if (v22)
            CFRelease(v22);
          return v15;
        }
LABEL_54:
        CFRelease(v26);
        goto LABEL_55;
      }
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_102158F48);
      LOWORD(v49) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 17, "Invalid back camera serial number data.", &v49, 2);
      v47 = (uint8_t *)v46;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLMagnetometerCoexistenceLocal::deviceStillHasOriginalCamera()", "%s\n", v46);
      if (v47 != buf)
        free(v47);
LABEL_103:
      v15 = 0;
      goto LABEL_63;
    }
    if (CFDataGetLength(v26) == v20)
    {
      v28 = CFDataGetBytePtr(v26);
      if (v28)
      {
        if (*v24 == *v28)
        {
          v29 = 1;
          do
          {
            v30 = v29;
            if (v20 == v29)
              break;
            v31 = v24[v29];
            v32 = v28[v29++];
          }
          while (v31 == v32);
          v15 = v30 >= v20;
          goto LABEL_63;
        }
        goto LABEL_103;
      }
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_102158F48);
      v43 = qword_10229FD48;
      if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_FAULT, "Current serial number data is NULL.", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_88;
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_102158F48);
      LOWORD(v49) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 17, "Current serial number data is NULL.", &v49, 2);
      v42 = (uint8_t *)v48;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLMagnetometerCoexistenceLocal::deviceStillHasOriginalCamera()", "%s\n", v48);
      if (v42 == buf)
      {
LABEL_88:
        CFRelease(v2);
        v15 = 0;
        goto LABEL_54;
      }
    }
    else
    {
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_102158F48);
      v39 = qword_10229FD48;
      if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 134218240;
        v54 = CFDataGetLength(v26);
        v55 = 2048;
        v56 = v20;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_FAULT, "Incorrect back camera serial number length. Actual length %ld. Expected length %lu.", buf, 0x16u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_88;
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_102158F48);
      v40 = qword_10229FD48;
      v49 = 134218240;
      v50 = CFDataGetLength(v26);
      v51 = 2048;
      v52 = v20;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v40, 17, "Incorrect back camera serial number length. Actual length %ld. Expected length %lu.", &v49, 22);
      v42 = (uint8_t *)v41;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLMagnetometerCoexistenceLocal::deviceStillHasOriginalCamera()", "%s\n", v41);
      if (v42 == buf)
        goto LABEL_88;
    }
    free(v42);
    goto LABEL_88;
  }
  if (qword_10229FD40 != -1)
    dispatch_once(&qword_10229FD40, &stru_102158F48);
  v14 = qword_10229FD48;
  if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning Cpas data is NULL.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_102158F48);
    LOWORD(v49) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 0, "#Warning Cpas data is NULL.", &v49, 2);
    v45 = (uint8_t *)v44;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLMagnetometerCoexistenceLocal::deviceStillHasOriginalCamera()", "%s\n", v44);
    if (v45 != buf)
      free(v45);
  }
  return 0;
}

NSNumber *sub_100884C04(int a1)
{
  const __CFNumber *v1;
  const __CFNumber *v2;
  CFTypeID v3;
  NSObject *v4;
  NSObject *v5;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  uint64_t v12;
  _DWORD v13[2];
  __int16 v14;
  int v15;
  uint8_t buf[4];
  int Type;
  __int16 v18;
  int v19;

  v1 = (const __CFNumber *)sub_100883D24(a1, "AppleH4CamIn", (uint64_t)"BackCameraModuleFocusActuatorID");
  v2 = v1;
  HIDWORD(v12) = -1;
  if (v1 && (v3 = CFGetTypeID(v1), v3 == CFNumberGetTypeID()))
  {
    if (CFNumberGetType(v2) == kCFNumberSInt32Type)
    {
      if (!CFNumberGetValue(v2, kCFNumberSInt32Type, (char *)&v12 + 4))
        HIDWORD(v12) = -1;
    }
    else
    {
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_102158F48);
      v5 = qword_10229FD48;
      if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67109376;
        Type = CFNumberGetType(v2);
        v18 = 1024;
        v19 = 3;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "VCM actuator ID data type %d does not match expected type %d", buf, 0xEu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD40 != -1)
          dispatch_once(&qword_10229FD40, &stru_102158F48);
        v9 = qword_10229FD48;
        v13[0] = 67109376;
        v13[1] = CFNumberGetType(v2);
        v14 = 1024;
        v15 = 3;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 1, "VCM actuator ID data type %d does not match expected type %d", v13, 14);
        v11 = (uint8_t *)v10;
        sub_100512490("Generic", 1, 0, 2, "NSNumber *CLMagnetometerCoexistenceLocal::cameraVcmId()", "%s\n", v10);
        if (v11 != buf)
          free(v11);
      }
    }
  }
  else
  {
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_102158F48);
    v4 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Bailing while checking VCM actuator ID.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_102158F48);
      LOWORD(v13[0]) = 0;
      LODWORD(v12) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 1, "Bailing while checking VCM actuator ID.", v13, v12);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "NSNumber *CLMagnetometerCoexistenceLocal::cameraVcmId()", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    if (!v2)
      return 0;
  }
  CFRelease(v2);
  if (HIDWORD(v12) != -1)
    return +[NSNumber numberWithInt:](NSNumber, "numberWithInt:");
  return 0;
}

id sub_100884FA8(int a1)
{
  const __CFData *v1;
  const __CFData *v2;
  const UInt8 *BytePtr;
  unsigned __int8 *v4;
  CFIndex Length;
  CFIndex v6;
  int v7;
  id v8;
  id v9;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  const char *v16;
  uint8_t *v17;
  const char *v18;
  uint8_t *v19;
  _WORD v20[8];
  uint8_t buf[1640];

  v1 = (const __CFData *)sub_100883DAC(a1);
  if (v1)
  {
    v2 = v1;
    BytePtr = CFDataGetBytePtr(v1);
    if (BytePtr)
    {
      v4 = (unsigned __int8 *)BytePtr;
      Length = CFDataGetLength(v2);
      if (Length >= 2)
      {
        v6 = Length;
        v7 = sub_100368AC4(v4);
        v8 = -[__CFData mutableCopy](v2, "mutableCopy");
        v9 = v8;
        if (v8)
        {
          if (v7 == 5 && v6 == 76)
          {
            v12 = 5;
          }
          else
          {
            if (v7 != 6 || v6 != 76)
              goto LABEL_27;
            v12 = 8;
          }
          objc_msgSend(v8, "resetBytesInRange:", 2, v12);
        }
LABEL_27:
        CFRelease(v2);
        return v9;
      }
    }
    else
    {
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_102158F48);
      v14 = qword_10229FD48;
      if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning CPAS pointer is NULL.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD40 != -1)
          dispatch_once(&qword_10229FD40, &stru_102158F48);
        v20[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 0, "#Warning CPAS pointer is NULL.", v20, 2);
        v19 = (uint8_t *)v18;
        sub_100512490("Generic", 1, 0, 2, "NSData *CLMagnetometerCoexistenceLocal::sanitizedCompassCalibrationData()", "%s\n", v18);
        if (v19 != buf)
          free(v19);
      }
    }
    v9 = 0;
    goto LABEL_27;
  }
  if (qword_10229FD40 != -1)
    dispatch_once(&qword_10229FD40, &stru_102158F48);
  v13 = qword_10229FD48;
  if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#Warning CPAS data is NULL.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_102158F48);
    v20[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 0, "#Warning CPAS data is NULL.", v20, 2);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "NSData *CLMagnetometerCoexistenceLocal::sanitizedCompassCalibrationData()", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  return 0;
}

void sub_100885328(id a1)
{
  qword_10229FD48 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

void sub_1008853F8(id a1)
{
  qword_102304FF0 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLLocationCorrectiveCompensatorSilo"));
}

uint64_t sub_100885828(uint64_t a1, void *a2, uint64_t a3)
{
  NSObject *v6;
  NSData *v7;
  NSObject *v8;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  double v23;
  double v24;
  uint64_t v25;
  double v26;
  double v27;
  NSObject *v28;
  NSNumber *v29;
  uint64_t v30;
  id v31;
  uint64_t v33;
  const char *v34;
  char *v35;
  const char *v36;
  char *v37;
  uint64_t v38;
  _OWORD v39[8];
  _OWORD v40[2];
  double v41[5];
  uint64_t v42;
  _QWORD v43[2];
  _QWORD v44[2];
  uint8_t v45[4];
  _BYTE v46[14];
  __int16 v47;
  int v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  int v52;
  __int16 v53;
  _BYTE *v54;
  __int16 v55;
  double v56;
  __int16 v57;
  uint64_t v58;
  _BYTE buf[96];
  _BYTE v60[32];
  _BYTE v61[1512];

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102158FB0);
  v6 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = objc_msgSend(objc_msgSend(a2, "coarseMetadata"), "dictionaryRepresentation");
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#compensation GeoLocation coarseMetaData: %@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102158FB0);
    v33 = qword_1022A01D8;
    *(_DWORD *)v45 = 138412290;
    *(_QWORD *)v46 = objc_msgSend(objc_msgSend(a2, "coarseMetadata"), "dictionaryRepresentation");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v33, 2, "#compensation GeoLocation coarseMetaData: %@", v45, 12);
    v35 = (char *)v34;
    sub_100512490("Generic", 1, 0, 2, "-[CLLocationCorrectiveCompensator snapLocation:withReply:]_block_invoke", "%s\n", v34);
    if (v35 != buf)
      free(v35);
  }
  v42 = 0;
  v7 = +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", objc_msgSend(a2, "coarseMetadata"), 1, &v42);
  if (v42)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102158FB0);
    v8 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v42;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#compensation GeoLocation coarseMetaData encoding failed, error, %@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102158FB0);
      *(_DWORD *)v45 = 138412290;
      *(_QWORD *)v46 = v42;
      LODWORD(v38) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 16, "#compensation GeoLocation coarseMetaData encoding failed, error, %@", v45, v38);
      v37 = (char *)v36;
      sub_100512490("Generic", 1, 0, 0, "-[CLLocationCorrectiveCompensator snapLocation:withReply:]_block_invoke", "%s\n", v36);
      if (v37 != buf)
        free(v37);
    }
  }
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)&buf[44] = _Q0;
  *(_OWORD *)&buf[60] = _Q0;
  *(_DWORD *)buf = 0xFFFF;
  *(_DWORD *)&buf[84] = 0;
  *(_QWORD *)&buf[88] = 0xBFF0000000000000;
  *(_QWORD *)&v60[20] = 0xBFF0000000000000;
  *(_DWORD *)v60 = 0;
  *(_DWORD *)&v60[28] = 0x7FFFFFFF;
  memset(v61, 0, 25);
  objc_msgSend(objc_msgSend(a2, "latLng"), "lat");
  *(_QWORD *)&buf[4] = v14;
  objc_msgSend(objc_msgSend(a2, "latLng"), "lng");
  *(_QWORD *)&buf[12] = v15;
  objc_msgSend(objc_msgSend(a2, "latLng"), "lat");
  *(_QWORD *)&v60[4] = v16;
  objc_msgSend(objc_msgSend(a2, "latLng"), "lng");
  *(_QWORD *)&v60[12] = v17;
  objc_msgSend(a2, "timestamp");
  *(_QWORD *)&buf[76] = v18;
  *(double *)&buf[28] = (double)(int)objc_msgSend(a2, "altitude");
  objc_msgSend(a2, "horizontalAccuracy");
  *(_QWORD *)&buf[20] = v19;
  objc_msgSend(a2, "verticalAccuracy");
  *(_QWORD *)&buf[36] = v20;
  v21 = objc_msgSend(a2, "referenceFrame");
  if (v21 <= 2)
    *(_DWORD *)&v61[4] = v21;
  objc_msgSend(a2, "speed");
  *(_QWORD *)&buf[44] = v22;
  objc_msgSend(a2, "course");
  if (v23 < 360.0)
  {
    objc_msgSend(a2, "course");
    if (v24 >= 0.0)
    {
      objc_msgSend(a2, "course");
      *(_QWORD *)&buf[60] = v25;
    }
  }
  sub_1002433B8((uint64_t)v41);
  sub_10011E258(v41, a1 + 40, (uint64_t)buf);
  v27 = v26;
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102158FB0);
  v28 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v45 = 68290563;
    *(_DWORD *)v46 = 0;
    *(_WORD *)&v46[4] = 2082;
    *(_QWORD *)&v46[6] = "";
    v47 = 1040;
    v48 = 156;
    v49 = 2097;
    v50 = a1 + 40;
    v51 = 1040;
    v52 = 156;
    v53 = 2097;
    v54 = buf;
    v55 = 2050;
    v56 = v27;
    v57 = 2050;
    v58 = a3;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Location #compensation Snapping\", \"Input\":%{private, location:CLClientLocation}.*P, \"Output\":%{private, location:CLClientLocation}.*P, \"distance\":\"%{public}f\", \"GeoResultCode\":%{public}ld}", v45, 0x46u);
  }
  v43[0] = CFSTR("Distance");
  v29 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v27);
  v43[1] = CFSTR("GeoResultCode");
  v44[0] = v29;
  v44[1] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", a3);
  AnalyticsSendEvent(CFSTR("com.apple.locationd.ccmetric"), +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v44, v43, 2));
  v30 = *(_QWORD *)(a1 + 32);
  v31 = objc_alloc((Class)CLLocation);
  v39[6] = *(_OWORD *)v60;
  v39[7] = *(_OWORD *)&v60[16];
  v40[0] = *(_OWORD *)v61;
  *(_OWORD *)((char *)v40 + 12) = *(_OWORD *)&v61[12];
  v39[2] = *(_OWORD *)&buf[32];
  v39[3] = *(_OWORD *)&buf[48];
  v39[4] = *(_OWORD *)&buf[64];
  v39[5] = *(_OWORD *)&buf[80];
  v39[0] = *(_OWORD *)buf;
  v39[1] = *(_OWORD *)&buf[16];
  return (*(uint64_t (**)(uint64_t, id, BOOL, NSData *))(v30 + 16))(v30, objc_msgSend(v31, "initWithClientLocation:", v39), ((a3 - 1) & 0xFFFFFFFFFFFFFFFDLL) == 0, v7);
}

void sub_100885E48(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

uint64_t sub_100886358(_BYTE *a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  int v11;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  TRANSITPbRegionPreloadTile *v19;
  uint64_t v20;
  _QWORD v21[2];

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  while (2)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v8 = v7 + 1;
      if (v7 == -1 || v8 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      if (v5++ >= 9)
      {
        LODWORD(v6) = 0;
        v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      LODWORD(v6) = 0;
LABEL_13:
    if (v11 || (v6 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    switch((unsigned __int16)(v6 >> 3))
    {
      case 1u:
        a1[48] |= 1u;
        v13 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v13 <= 0xFFFFFFFFFFFFFFF7 && v13 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v14 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v13);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v13 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v14 = 0;
        }
        v20 = 8;
        goto LABEL_43;
      case 2u:
        a1[48] |= 2u;
        v16 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v16 <= 0xFFFFFFFFFFFFFFF7 && v16 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v14 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v14 = 0;
        }
        v20 = 16;
        goto LABEL_43;
      case 3u:
        a1[48] |= 4u;
        v17 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v17 <= 0xFFFFFFFFFFFFFFF7 && v17 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v14 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v14 = 0;
        }
        v20 = 24;
        goto LABEL_43;
      case 4u:
        a1[48] |= 8u;
        v18 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v18 <= 0xFFFFFFFFFFFFFFF7 && v18 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v14 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v18);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v18 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v14 = 0;
        }
        v20 = 32;
LABEL_43:
        *(_QWORD *)&a1[v20] = v14;
        goto LABEL_44;
      case 5u:
        v19 = objc_alloc_init(TRANSITPbRegionPreloadTile);
        objc_msgSend(a1, "addTiles:", v19);

        v21[0] = 0;
        v21[1] = 0;
        if (PBReaderPlaceMark(a2, v21) && (sub_1005119C8((uint64_t)v19, a2) & 1) != 0)
        {
          PBReaderRecallMark(a2, v21);
LABEL_44:
          if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          continue;
        }
        return 0;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        goto LABEL_44;
    }
  }
}

_OWORD *sub_100887078(_OWORD *a1, uint64_t a2)
{
  a1[1] = 0u;
  *a1 = 0u;
  sub_100270E34((uint64_t)(a1 + 2), a2);
  return a1;
}

void sub_1008870B8(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;

  v5 = v1[3];
  v1[3] = 0;
  if (v5)
    operator delete();
  sub_10190D2D8(v3, v2, v1);
  _Unwind_Resume(a1);
}

BOOL sub_1008870F8(_QWORD *a1, int a2)
{
  uint64_t v2;

  switch(a2)
  {
    case 0:
      v2 = 1;
      if (!*a1)
        operator new();
      return v2;
    case 1:
      if (!a1[1])
        operator new();
      return *a1 || a1[1] || a1[2] || a1[3] != 0;
    case 2:
      if (!a1[2])
        operator new();
      return *a1 || a1[1] || a1[2] || a1[3] != 0;
    case 3:
      if (!a1[3])
        operator new();
      return *a1 || a1[1] || a1[2] || a1[3] != 0;
    default:
      return *a1 || a1[1] || a1[2] || a1[3] != 0;
  }
}

void sub_100887350()
{
  operator delete();
}

BOOL sub_100887390(uint64_t *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 result;

  switch(a2)
  {
    case 0:
      v3 = *a1;
      *a1 = 0;
      if (v3)
        goto LABEL_9;
      goto LABEL_11;
    case 1:
      v4 = a1[1];
      a1[1] = 0;
      if (v4)
        goto LABEL_9;
      break;
    case 2:
      v5 = a1[2];
      a1[2] = 0;
      if (v5)
        goto LABEL_9;
      break;
    case 3:
      v6 = a1[3];
      a1[3] = 0;
      if (v6)
LABEL_9:
        operator delete();
      return result;
    default:
      break;
  }
  if (*a1)
    return 1;
LABEL_11:
  if (a1[1] || a1[2])
    return 1;
  return a1[3] != 0;
}

uint64_t sub_100887474(uint64_t result, uint64_t a2)
{
  uint64_t *v3;
  int v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD v12[8];
  __int128 v13;
  __int128 v14;
  int v15;

  v3 = (uint64_t *)result;
  v4 = 0;
  v5 = (int *)(result + 64);
  v6 = result + 72;
  while (2)
  {
    switch(v4)
    {
      case 0:
        result = *v3;
        if (!*v3)
          goto LABEL_16;
        result = sub_100EADC58(result, a2, (uint64_t)&v13);
        if (!(_DWORD)result)
          goto LABEL_16;
        v12[4] = v13;
        v12[5] = v14;
        v15 = 0;
        v7 = v3[7];
        if (!v7)
          goto LABEL_22;
        v8 = *(uint64_t (**)(void))(*(_QWORD *)v7 + 48);
        goto LABEL_15;
      case 1:
        result = v3[1];
        if (!result)
          goto LABEL_16;
        result = sub_1005326EC(result, a2, v5, v6, (uint64_t)&v13);
        if (!(_DWORD)result)
          goto LABEL_16;
        v12[2] = v13;
        v12[3] = v14;
        v15 = 1;
        v9 = v3[7];
        if (!v9)
          goto LABEL_22;
        v8 = *(uint64_t (**)(void))(*(_QWORD *)v9 + 48);
        goto LABEL_15;
      case 2:
        result = v3[2];
        if (!result)
          goto LABEL_16;
        result = sub_10083CD20(result, a2, v5, (uint64_t)&v13);
        if (!(_DWORD)result)
          goto LABEL_16;
        v12[6] = v13;
        v12[7] = v14;
        v15 = 2;
        v10 = v3[7];
        if (!v10)
          goto LABEL_22;
        v8 = *(uint64_t (**)(void))(*(_QWORD *)v10 + 48);
LABEL_15:
        result = v8();
LABEL_16:
        if (++v4 == 4)
          return result;
        continue;
      case 3:
        result = v3[3];
        if (!result)
          return result;
        result = sub_10077EBEC(result, a2, (uint64_t)&v13);
        if (!(_DWORD)result)
          return result;
        v12[0] = v13;
        v12[1] = v14;
        v15 = 3;
        v11 = v3[7];
        if (!v11)
LABEL_22:
          sub_10025FD1C();
        return (*(uint64_t (**)(uint64_t, int *, _OWORD *))(*(_QWORD *)v11 + 48))(v11, &v15, v12);
      default:
        goto LABEL_16;
    }
  }
}

void *sub_10088761C(void *a1)
{
  return sub_10019EB74(objc_msgSend(a1, "path"));
}

id sub_100887630(void *a1)
{
  id v2;

  v2 = objc_alloc_init((Class)NSMutableData);
  objc_msgSend(v2, "setLength:", 20);
  CC_SHA1(objc_msgSend(a1, "bytes"), (CC_LONG)objc_msgSend(a1, "length"), (unsigned __int8 *)objc_msgSend(v2, "mutableBytes"));
  return v2;
}

uint64_t sub_1008876A0(void *a1)
{
  uint64_t v2;
  NSObject *v3;
  int *v4;
  char *v5;
  uint8_t buf[4];
  int v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  char *v12;
  __int16 v13;
  void *v14;

  v2 = open_dprotected_np((const char *)objc_msgSend(a1, "UTF8String"), 521, 2, 0, 416);
  if ((_DWORD)v2 == -1)
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102158FD0);
    v3 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
    {
      v4 = __error();
      v5 = strerror(*v4);
      *(_DWORD *)buf = 68289539;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2082;
      v12 = v5;
      v13 = 2113;
      v14 = a1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning open failed\", \"errno\":%{public, location:escape_only}s, \"path\":%{private, location:escape_only}@}", buf, 0x26u);
    }
  }
  return v2;
}

uint64_t sub_1008877CC(void *a1)
{
  uint64_t v2;
  NSObject *v3;
  int *v4;
  char *v5;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  char *v11;
  __int16 v12;
  void *v13;

  v2 = open((const char *)objc_msgSend(a1, "UTF8String"), 0);
  if ((_DWORD)v2 == -1)
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102158FD0);
    v3 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
    {
      v4 = __error();
      v5 = strerror(*v4);
      v7[0] = 68289539;
      v7[1] = 0;
      v8 = 2082;
      v9 = "";
      v10 = 2082;
      v11 = v5;
      v12 = 2113;
      v13 = a1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning open failed\", \"errno\":%{public, location:escape_only}s, \"path\":%{private, location:escape_only}@}", (uint8_t *)v7, 0x26u);
    }
  }
  return v2;
}

BOOL sub_1008878E8(void *a1, void *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  id v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  void *v17;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  void *v23;
  __int16 v24;
  void *v25;

  v6 = sub_1008876A0(a1);
  v7 = sub_1008877CC(a2);
  if ((_DWORD)v6 == -1 || (v8 = v7, (_DWORD)v7 == -1))
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102158FD0);
    v14 = qword_1022A0208;
    v10 = 0;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289539;
      v19 = 0;
      v20 = 2082;
      v21 = "";
      v22 = 2113;
      v23 = a1;
      v24 = 2113;
      v25 = a2;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning failed to concatenate files\", \"leading\":%{private, location:escape_only}@, \"trailing\":%{private, location:escape_only}@}", buf, 0x26u);
      return 0;
    }
  }
  else
  {
    v9 = objc_msgSend(objc_alloc((Class)NSData), "_cl_initWithFileDescriptor:", v7);
    v10 = 1;
    v11 = objc_msgSend(objc_alloc((Class)NSFileHandle), "initWithFileDescriptor:closeOnDealloc:", v6, 1);
    objc_msgSend(v11, "writeData:", v9);

    close(v8);
    if (a3
      && -[NSFileManager fileExistsAtPath:](+[NSFileManager defaultManager](NSFileManager, "defaultManager"), "fileExistsAtPath:", a2))
    {
      v17 = 0;
      -[NSFileManager removeItemAtPath:error:](+[NSFileManager defaultManager](NSFileManager, "defaultManager"), "removeItemAtPath:error:", a2, &v17);
      if (v17)
      {
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_102158FD0);
        v12 = qword_1022A0208;
        if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 68289539;
          v19 = 0;
          v20 = 2082;
          v21 = "";
          v22 = 2113;
          v23 = a2;
          v24 = 2113;
          v25 = v17;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"failed to remove fs item\", \"path\":%{private, location:escape_only}@, \"error\":%{private, location:escape_only}@}", buf, 0x26u);
          if (qword_1022A0200 != -1)
            dispatch_once(&qword_1022A0200, &stru_102158FD0);
        }
        v13 = qword_1022A0208;
        if (os_signpost_enabled((os_log_t)qword_1022A0208))
        {
          *(_DWORD *)buf = 68289539;
          v19 = 0;
          v20 = 2082;
          v21 = "";
          v22 = 2113;
          v23 = a2;
          v24 = 2113;
          v25 = v17;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "failed to remove fs item", "{\"msg%{public}.0s\":\"failed to remove fs item\", \"path\":%{private, location:escape_only}@, \"error\":%{private, location:escape_only}@}", buf, 0x26u);
        }
      }
      else
      {
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_102158FD0);
        v15 = qword_1022A0208;
        if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 68289283;
          v19 = 0;
          v20 = 2082;
          v21 = "";
          v22 = 2113;
          v23 = a2;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"removed fs item\", \"path\":%{private, location:escape_only}@}", buf, 0x1Cu);
        }
      }
      return v17 == 0;
    }
  }
  return v10;
}

void sub_100887C8C(id a1)
{
  qword_1022A0208 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

uint64_t sub_100887CBC(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  const char *v12;
  uint8_t *v13;
  const char *v14;
  uint8_t *v15;
  const char *v16;
  uint8_t *v17;
  const char *v18;
  uint8_t *v19;
  const char *v20;
  uint8_t *v21;
  uint64_t v22;
  BOOL v23[15];
  char v24;
  BOOL v25[16];
  BOOL v26[16];
  _QWORD v27[2];
  _QWORD v28[2];
  _QWORD v29[2];
  uint8_t buf[1640];

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102158FF0);
  v3 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Fence: CLFenceSettingsOta - Updating settings via OTA.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102158FF0);
    LOWORD(v29[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: CLFenceSettingsOta - Updating settings via OTA.", v29, 2);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLFenceSettingsOta::updateSettings(const CLNameValuePair &)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  sub_10108C204();
  sub_100119F3C(v29);
  if (sub_100006BB4(a2, "Geofence", v29))
  {
    sub_100119F3C(v28);
    if (sub_100006BB4((uint64_t)v29, "GeofenceClassifier", v28))
    {
      v26[0] = 0;
      if (sub_1001E4874((uint64_t)v28, "usePreciseFencesForAll", v26))
        byte_1022FCB60 = v26[0];
      if (sub_1001E4874((uint64_t)v28, "usePreciseFencesForHelperFence", v26))
        byte_1022FCB61 = v26[0];
      if (sub_1001E4874((uint64_t)v28, "useVisitEventsForSignificationMonitoring", v26))
        byte_1022FCB62 = v26[0];
      *(_QWORD *)buf = 0;
      if (sub_1001FD98C((uint64_t)v28, "fenceEffectiveMinimumRadiusHighAccuracy", buf))
        qword_1022FCB68 = *(_QWORD *)buf;
      if (sub_1001FD98C((uint64_t)v28, "fenceEffectiveMinimumRadiusHighAccuracyUrban", buf))
        qword_1022FCB70 = *(_QWORD *)buf;
      if (sub_1001FD98C((uint64_t)v28, "fenceEffectiveMinimumRadiusNormalAccuracy", buf))
        qword_1022FCB78 = *(_QWORD *)buf;
      if (sub_1001FD98C((uint64_t)v28, "helperFenceRadiusScaleFactor", buf))
        qword_1022FCB80 = *(_QWORD *)buf;
      if (sub_1001FD98C((uint64_t)v28, "maxRadiusForLocationType", buf))
        qword_1022FCB88 = *(_QWORD *)buf;
      if (sub_1001FD98C((uint64_t)v28, "maxRadiusForEnvironmentType", buf))
        qword_1022FCB90 = *(_QWORD *)buf;
      if (sub_1001FD98C((uint64_t)v28, "largeFenceExitRadiusOffset", buf))
        qword_1022FCB98 = *(_QWORD *)buf;
      if (sub_1001FD98C((uint64_t)v28, "largeFenceEntryRadiusOffset", buf))
        qword_1022FCBA0 = *(_QWORD *)buf;
      if (sub_1001FD98C((uint64_t)v28, "unknownFineMediumFenceExitRadiusOffset", buf))
        qword_1022FCBA8 = *(_QWORD *)buf;
      if (sub_1001FD98C((uint64_t)v28, "fineMediumFenceExitRadiusOffsetForCellWifiOn", buf))
        qword_1022FCBB0 = *(_QWORD *)buf;
      if (sub_1001FD98C((uint64_t)v28, "fineMediumFenceExitRadiusOffsetForCellWifiOff", buf))
        qword_1022FCBB8 = *(_QWORD *)buf;
      if (sub_1001FD98C((uint64_t)v28, "fineMediumFenceExitRadiusOffsetForLacWifiOn", buf))
        qword_1022FCBC0 = *(_QWORD *)buf;
      if (sub_1001FD98C((uint64_t)v28, "fineMediumFenceExitRadiusOffsetForLacWifiOff", buf))
        qword_1022FCBC8 = *(_QWORD *)buf;
      if (sub_1001FD98C((uint64_t)v28, "fineMediumFenceExitRadiusOffsetOnCoarse", buf))
        qword_1022FCBD0 = *(_QWORD *)buf;
      if (sub_1001FD98C((uint64_t)v28, "fineMediumFenceEntryRadiusScaleFactorOnCoarse", buf))
        qword_1022FCBD8 = *(_QWORD *)buf;
      if (sub_1001FD98C((uint64_t)v28, "fineMediumFenceExitRadiusOffsetWifi", buf))
        qword_1022FCBE0 = *(_QWORD *)buf;
      if (sub_1001FD98C((uint64_t)v28, "fineMediumFenceGpsExitRadiusOffsetWifiOn", buf))
        qword_1022FCBE8 = *(_QWORD *)buf;
      if (sub_1001FD98C((uint64_t)v28, "fineMediumFenceGpsExitRadiusOffsetWifiOff", buf))
        qword_1022FCBF0 = *(_QWORD *)buf;
      if (sub_1001FD98C((uint64_t)v28, "fineMediumPreciseFenceGpsExitRadiusOffsetWifiOn", buf))
        qword_1022FCBF8 = *(_QWORD *)buf;
      if (sub_1001FD98C((uint64_t)v28, "fineMediumPreciseFenceGpsExitRadiusOffsetWifiOff", buf))
        qword_1022FCC00 = *(_QWORD *)buf;
      if (sub_1001FD98C((uint64_t)v28, "fineMediumFenceExitAccurateLocationUncFactor", buf))
        qword_1022FCC08 = *(_QWORD *)buf;
      if (sub_1001FD98C((uint64_t)v28, "fineMediumFenceEntryAccurateLocationUncFactor", buf))
        qword_1022FCC10 = *(_QWORD *)buf;
      if (sub_1001FD98C((uint64_t)v28, "fineMediumFenceExitInaccurateLocationUncFactor", buf))
        qword_1022FCC18 = *(_QWORD *)buf;
      if (sub_1001FD98C((uint64_t)v28, "fineMediumFenceEntryInaccurateLocationUncFactor", buf))
        qword_1022FCC20 = *(_QWORD *)buf;
      if (sub_1001FD98C((uint64_t)v28, "loiFenceRadiusChangeThreshold", buf))
        qword_1022FCC28 = *(_QWORD *)buf;
      if (sub_1001FD98C((uint64_t)v28, "loiFenceDistanceChangeThreshold", buf))
        qword_1022FCC30 = *(_QWORD *)buf;
      if (sub_1001FD98C((uint64_t)v28, "locationSignificantChangeMinInterval", buf))
        qword_1022FCC38 = *(_QWORD *)buf;
      if (sub_1001FD98C((uint64_t)v28, "locationSignificantChangeMinDistance", buf))
        qword_1022FCC40 = *(_QWORD *)buf;
      if (sub_1001FD98C((uint64_t)v28, "locationSignificantChangeLowAccuracyThreshold", buf))
        qword_1022FCC48 = *(_QWORD *)buf;
      if (sub_1001FD98C((uint64_t)v28, "accurateLocationThreshold", buf))
        qword_1022FCC50 = *(_QWORD *)buf;
      if (sub_1001FD98C((uint64_t)v28, "accurateGpsLocationPaddingThreshold", buf))
        qword_1022FCC58 = *(_QWORD *)buf;
      if (sub_1001FD98C((uint64_t)v28, "gpsHAccMultiplicationFactor", buf))
        qword_1022FCC60 = *(_QWORD *)buf;
      if (sub_1001FD98C((uint64_t)v28, "pipelineHAccMultiplicationFactor", buf))
        qword_1022FCC68 = *(_QWORD *)buf;
      if (sub_1001FD98C((uint64_t)v28, "cellHAccMultiplicationFactor", buf))
        qword_1022FCC70 = *(_QWORD *)buf;
      if (sub_1001FD98C((uint64_t)v28, "locationSessionStartWindowSec", buf))
        qword_1022FCC78 = *(_QWORD *)buf;
      if (sub_1001FD98C((uint64_t)v28, "locationSessionIntervalFromLastLocationSec", buf))
        qword_1022FCC80 = *(_QWORD *)buf;
      if (sub_1001FD98C((uint64_t)v28, "minWifiUnc", buf))
        qword_1022FCC88 = *(_QWORD *)buf;
      if (sub_1001FD98C((uint64_t)v28, "minGpsUnc", buf))
        qword_1022FCC90 = *(_QWORD *)buf;
      if (sub_1001FD98C((uint64_t)v28, "maxHorizontalAccuracy", buf))
        qword_1022FCC98 = *(_QWORD *)buf;
      if (sub_1001FD98C((uint64_t)v28, "cellTypeMinimumHorizontalAccuracy", buf))
        qword_1022FCCA0 = *(_QWORD *)buf;
      if (sub_1001FD98C((uint64_t)v28, "circularEmergencyFenceOffset", buf))
        qword_1022FCCA8 = *(_QWORD *)buf;
      if (sub_1001FD98C((uint64_t)v28, "polygonalEntryLocationAccuracyThreshold", buf))
        qword_1022FCCB8 = *(_QWORD *)buf;
      if (sub_1001FD98C((uint64_t)v28, "polygonalEntryLocationAccuracyScaleFactor", buf))
        qword_1022FCCC0 = *(_QWORD *)buf;
      if (sub_1001FD98C((uint64_t)v28, "polygonalExitLocationAccuracyScaleFactor", buf))
        qword_1022FCCC8 = *(_QWORD *)buf;
      if (sub_1001FD98C((uint64_t)v28, "polygonalExitHysteresisBuffer", buf))
        qword_1022FCCD0 = *(_QWORD *)buf;
      if (sub_1001E4874((uint64_t)v28, "useMiLo", v26))
        byte_1022FCCD8 = v26[0];
      if (sub_1001E4874((uint64_t)v28, "collectMiLoHomeLoiMetricsForInternalUsers", v26))
        byte_1022FCCD9 = v26[0];
      if (sub_1001E4874((uint64_t)v28, "collectMiLoHomeLoiMetricsForAllUsers", v26))
        byte_1022FCCDA = v26[0];
      if (sub_1001FD98C((uint64_t)v28, "maxMiLoAge", buf))
        qword_1022FCCE0 = *(_QWORD *)buf;
      if (sub_1001FD98C((uint64_t)v28, "homeLoiProbabilityThreshold", buf))
        qword_1022FCCE8 = *(_QWORD *)buf;
      if (sub_1001FD98C((uint64_t)v28, "maxWaitTimeToReceiveMiLoEventUpdate", buf))
        qword_1022FCCF0 = *(_QWORD *)buf;
      if (sub_1001FD98C((uint64_t)v28, "maxGpsHomeLoiExitTimeDiff", buf))
        qword_1022FCCF8 = *(_QWORD *)buf;
      if (sub_1001E4874((uint64_t)v28, "collectGpsOpportunisticallyForMiLoMetrics", v26))
        byte_1022FCD00 = v26[0];
      if (sub_1001E4874((uint64_t)v28, "inflateGpsUncertaintyOnExitForSignalStrength", v26))
        byte_1022FCD01 = v26[0];
      LODWORD(v27[0]) = 0;
      if (sub_1001E4B84((uint64_t)v28, "gnssConvergenceShortCount", v27))
        dword_1022FCD04 = v27[0];
      if (sub_1001E4B84((uint64_t)v28, "gnssConvergenceLongCount", v27))
        dword_1022FCD08 = v27[0];
    }
    else
    {
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102158FF0);
      v7 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Fence: CLFenceSettingsOta - \"Geofence::GeofenceClassifier\" not available", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_102158FF0);
        LOWORD(v27[0]) = 0;
        LODWORD(v22) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: CLFenceSettingsOta - \"Geofence::GeofenceClassifier\" not available", v27, v22);
        v15 = (uint8_t *)v14;
        sub_100512490("Generic", 1, 0, 2, "void CLFenceSettingsOta::updateSettings(const CLNameValuePair &)", "%s\n", v14);
        if (v15 != buf)
          free(v15);
      }
    }
    sub_100119F3C(v27);
    if (sub_100006BB4((uint64_t)v29, "GeofenceEPNO", v27))
    {
      *(_DWORD *)v26 = 0;
      *(_QWORD *)buf = 0;
      v25[0] = 0;
      if (sub_100526244((uint64_t)v27, "numTiles", v26))
        dword_1022FCD10 = *(_DWORD *)v26;
      if (sub_1001FD98C((uint64_t)v27, "radiusFactorEntryThreshold", buf))
        qword_1022FCD18 = *(_QWORD *)buf;
      if (sub_1001FD98C((uint64_t)v27, "radiusFactor", buf))
        qword_1022FCD20 = *(_QWORD *)buf;
      if (sub_1001FD98C((uint64_t)v27, "maxRadius", buf))
        qword_1022FCD28 = *(_QWORD *)buf;
      if (sub_1001FD98C((uint64_t)v27, "minRadius", buf))
        qword_1022FCD30 = *(_QWORD *)buf;
      if (sub_1001FD98C((uint64_t)v27, "currentlySeenReachThreshold", buf))
        qword_1022FCD38 = *(_QWORD *)buf;
      if (sub_1001E4874((uint64_t)v27, "throttleEpnoWakes", v25))
        byte_1022FCD40 = v25[0];
    }
    else
    {
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102158FF0);
      v8 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Fence: CLFenceSettingsOta - \"Geofence::GeofenceEPNO\" not available", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_102158FF0);
        *(_WORD *)v26 = 0;
        LODWORD(v22) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: CLFenceSettingsOta - \"Geofence::GeofenceEPNO\" not available", v26, v22);
        v17 = (uint8_t *)v16;
        sub_100512490("Generic", 1, 0, 2, "void CLFenceSettingsOta::updateSettings(const CLNameValuePair &)", "%s\n", v16);
        if (v17 != buf)
          free(v17);
      }
    }
    sub_100119F3C(v26);
    if (sub_100006BB4((uint64_t)v29, "GeofenceGpsUncertaintyInflation", v26))
    {
      v23[0] = 0;
      if (sub_1001E4874((uint64_t)v26, "inflateGpsLocationsIfSignalStrengthNotReported", v23))
        byte_1022FCD48 = v23[0];
      *(_DWORD *)v25 = 0;
      if (sub_1001E4B84((uint64_t)v26, "minimumNumberOfTrackedSignalsStrong", v25))
        dword_1022FCD50 = *(_DWORD *)v25;
      if (sub_1001E4B84((uint64_t)v26, "minimumNumberOfTrackedSignals", v25))
        dword_1022FCD4C = *(_DWORD *)v25;
      *(_QWORD *)buf = 0;
      if (sub_1001FD98C((uint64_t)v26, "signalStrengthStrong", buf))
        qword_1022FCD58 = *(_QWORD *)buf;
      if (sub_1001FD98C((uint64_t)v26, "horizontalAccuracyForWeakSignals", buf))
        qword_1022FCD60 = *(_QWORD *)buf;
    }
    else
    {
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102158FF0);
      v9 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Fence: CLFenceSettingsOta - \"Geofence::GeofenceGpsUncertaintyInflation\" not available", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_102158FF0);
        *(_WORD *)v25 = 0;
        LODWORD(v22) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: CLFenceSettingsOta - \"Geofence::GeofenceGpsUncertaintyInflation\" not available", v25, v22);
        v19 = (uint8_t *)v18;
        sub_100512490("Generic", 1, 0, 2, "void CLFenceSettingsOta::updateSettings(const CLNameValuePair &)", "%s\n", v18);
        if (v19 != buf)
          free(v19);
      }
    }
    sub_100119F3C(v25);
    if (sub_100006BB4((uint64_t)v29, "GeofenceFastEntry", v25))
    {
      v24 = 0;
      *(_QWORD *)buf = 0;
      *(_DWORD *)v23 = 0;
      if (sub_1001E4874((uint64_t)v25, "enabled", (BOOL *)&v24))
        byte_1022FCD68 = v24;
      if (sub_1001FD98C((uint64_t)v25, "convergenceTimerIntervalNearMax", buf))
        qword_1022FCD70 = *(_QWORD *)buf;
      if (sub_1001FD98C((uint64_t)v25, "convergenceTimerIntervalNearMin", buf))
        qword_1022FCD78 = *(_QWORD *)buf;
      if (sub_1001FD98C((uint64_t)v25, "convergenceTimerIntervalAdjacent", buf))
        qword_1022FCD80 = *(_QWORD *)buf;
      if (sub_1001FD98C((uint64_t)v25, "convergenceStateDistanceThresholdNear", buf))
        qword_1022FCD88 = *(_QWORD *)buf;
      if (sub_1001FD98C((uint64_t)v25, "convergenceStateDistanceThresholdAdjacent", buf))
        qword_1022FCD90 = *(_QWORD *)buf;
      if (sub_1001E4B84((uint64_t)v25, "maximumLocationBufferSize", v23))
        dword_1022FCD98 = *(_DWORD *)v23;
      if (sub_1001E4B84((uint64_t)v25, "converganceAttemptsPerWindow", v23))
        dword_1022FCD9C = *(_DWORD *)v23;
      if (sub_1001FD98C((uint64_t)v25, "convergenceBudgetWindow", buf))
        qword_1022FCDA0 = *(_QWORD *)buf;
      if (sub_1001FD98C((uint64_t)v25, "convergenceAttemptMaxDuration", buf))
        qword_1022FCDA8 = *(_QWORD *)buf;
      if (sub_1001FD98C((uint64_t)v25, "convergenceAttemptMaxGNSSDuration", buf))
        qword_1022FCDB0 = *(_QWORD *)buf;
    }
    else
    {
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102158FF0);
      v10 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Fence: CLFenceSettingsOta - \"Geofence::GeofenceFastEntry\" not available", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_102158FF0);
        *(_WORD *)v23 = 0;
        LODWORD(v22) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: CLFenceSettingsOta - \"Geofence::GeofenceFastEntry\" not available", v23, v22);
        v21 = (uint8_t *)v20;
        sub_100512490("Generic", 1, 0, 2, "void CLFenceSettingsOta::updateSettings(const CLNameValuePair &)", "%s\n", v20);
        if (v21 != buf)
          free(v21);
      }
    }
    sub_10011A5A8(v25);
    sub_10011A5A8(v26);
    sub_10011A5A8(v27);
    sub_10011A5A8(v28);
  }
  else
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102158FF0);
    v4 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Fence: CLFenceSettingsOta - \"Geofence\" not available", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102158FF0);
      LOWORD(v28[0]) = 0;
      LODWORD(v22) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: CLFenceSettingsOta - \"Geofence\" not available", v28, v22);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceSettingsOta::updateSettings(const CLNameValuePair &)", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  return sub_10011A5A8(v29);
}

void sub_10088935C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  uint64_t v12;
  va_list va2;
  uint64_t v14;
  uint64_t v15;
  va_list va3;
  uint64_t v17;
  va_list va4;

  va_start(va4, a5);
  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v12 = va_arg(va3, _QWORD);
  v14 = va_arg(va3, _QWORD);
  va_copy(va4, va3);
  v15 = va_arg(va4, _QWORD);
  v17 = va_arg(va4, _QWORD);
  sub_10011A5A8((uint64_t *)va);
  sub_10011A5A8((uint64_t *)va1);
  sub_10011A5A8((uint64_t *)va2);
  sub_10011A5A8((uint64_t *)va3);
  sub_10011A5A8(va4);
  _Unwind_Resume(a1);
}

void sub_1008893FC(id a1)
{
  qword_1022A0068 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeoFencing");
}

void sub_100889600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100889618(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "hasChanges");
  if ((_DWORD)result)
    return _objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "save:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  return result;
}

void sub_100889724(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_10088973C(_QWORD *a1)
{
  id v2;
  id v3;

  v2 = objc_msgSend(objc_alloc((Class)NSFetchRequest), "initWithEntityName:", a1[4]);
  objc_msgSend(v2, "setPredicate:", +[NSCompoundPredicate andPredicateWithSubpredicates:](NSCompoundPredicate, "andPredicateWithSubpredicates:", a1[5]));
  v3 = objc_msgSend(objc_alloc((Class)NSBatchDeleteRequest), "initWithFetchRequest:", v2);
  objc_msgSend(*(id *)(a1[6] + 8), "executeRequest:error:", v3, *(_QWORD *)(a1[7] + 8) + 40);

}

void sub_1008898E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_100889914(uint64_t a1)
{
  id v2;
  __int128 v3;
  id v4;
  _QWORD v5[4];
  __int128 v6;
  __int128 v7;

  v4 = objc_alloc_init((Class)NSFetchRequest);
  objc_msgSend(v4, "setEntity:", +[NSEntityDescription entityForName:inManagedObjectContext:](NSEntityDescription, "entityForName:inManagedObjectContext:", *(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8)));
  objc_msgSend(v4, "setPredicate:", +[NSCompoundPredicate andPredicateWithSubpredicates:](NSCompoundPredicate, "andPredicateWithSubpredicates:", *(_QWORD *)(a1 + 48)));
  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 8), "executeFetchRequest:error:", v4, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1008899E4;
  v5[3] = &unk_102159068;
  v3 = *(_OWORD *)(a1 + 64);
  v6 = *(_OWORD *)(a1 + 32);
  v7 = v3;
  objc_msgSend(v2, "enumerateObjectsUsingBlock:", v5);

}

id sub_1008899E4(uint64_t a1, void *a2)
{
  NSString *v4;
  id result;

  v4 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("managedObject of class %@ must respond to convert selector"), NSClassFromString(*(NSString **)(a1 + 32)));
  if ((objc_opt_respondsToSelector(a2, "convert") & 1) == 0)
    -[NSAssertionHandler handleFailureInMethod:object:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInMethod:object:file:lineNumber:description:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 40), CFSTR("CLStore.m"), 102, v4);
  result = objc_msgSend(a2, "performSelector:", "convert");
  if (result)
    return objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "addObject:", result);
  return result;
}

void sub_100889BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 64), 8);
  _Unwind_Resume(a1);
}

id sub_100889BC4(_QWORD *a1)
{
  NSFetchRequest *v2;
  id result;

  v2 = +[NSFetchRequest fetchRequestWithEntityName:](NSFetchRequest, "fetchRequestWithEntityName:", a1[4]);
  -[NSFetchRequest setPredicate:](v2, "setPredicate:", +[NSCompoundPredicate andPredicateWithSubpredicates:](NSCompoundPredicate, "andPredicateWithSubpredicates:", a1[5]));
  result = objc_msgSend(*(id *)(a1[6] + 8), "countForFetchRequest:error:", v2, *(_QWORD *)(a1[8] + 8) + 40);
  *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24) = result;
  return result;
}

void sub_100889CEC(id a1)
{
  qword_102305000 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLLocationStreamerSilo"));
}

void sub_100889D5C(id a1)
{
  uint64_t v1;

  if (objc_opt_class(IDSService, v1))
  {
    sub_100197040();
    if (sub_100760428())
    {
      sub_100197040();
      if (sub_10019DF90())
        byte_102305010 = 1;
    }
  }
}

void sub_10088A290()
{
  uint64_t v0;

  if (*(char *)(v0 - 89) < 0)
    operator delete(*(void **)(v0 - 112));
  operator delete();
}

id sub_10088A2DC(uint64_t a1)
{
  NSObject *v2;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;

  if (qword_1022A01E0 != -1)
    dispatch_once(&qword_1022A01E0, &stru_102159118);
  v2 = qword_1022A01E8;
  if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_INFO))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Stop timer fired\"}", (uint8_t *)v4, 0x12u);
  }
  return objc_msgSend(*(id *)(a1 + 32), "stopLocation");
}

id sub_10088A3BC(uint64_t a1)
{
  NSObject *v2;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;

  if (qword_1022A01E0 != -1)
    dispatch_once(&qword_1022A01E0, &stru_102159118);
  v2 = qword_1022A01E8;
  if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_INFO))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Motion alarm stop timer fired\"}", (uint8_t *)v4, 0x12u);
  }
  return objc_msgSend(*(id *)(a1 + 32), "stopMotionAlarm");
}

id sub_10088A49C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _objc_msgSend(a4, "onLocationNotification:withData:", a2, a3);
}

id sub_10088A4AC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _objc_msgSend(a4, "onMotionStateNotification:withData:", a2, a3);
}

id sub_10088A4BC(uint64_t a1)
{
  NSObject *v2;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;

  if (qword_1022A01E0 != -1)
    dispatch_once(&qword_1022A01E0, &stru_102159118);
  v2 = qword_1022A01E8;
  if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_INFO))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Repeating motion state\"}", (uint8_t *)v4, 0x12u);
  }
  return objc_msgSend(*(id *)(a1 + 32), "sendMotionState");
}

id sub_10088A59C(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "sendAliveAgainMessage");
  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "aliveAgainThrottleTimer"), "invalidate");
  return objc_msgSend(*(id *)(a1 + 32), "setAliveAgainThrottleTimer:", 0);
}

uint64_t *sub_10088A6B0(uint64_t **a1, uint64_t *a2)
{
  uint64_t *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10088CAF0(result);
    operator delete();
  }
  return result;
}

void sub_10088B1F4(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 8), "setNextFireDelay:", *(double *)(a1 + 16));
  operator new();
}

void sub_10088B2C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(a1);
}

void sub_10088C02C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10088CA00(id a1)
{
  qword_1022A01E8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Streaming");
}

uint64_t sub_10088CA2C(uint64_t a1, __int128 *a2, void *a3, uint64_t a4, double a5)
{
  id v9;
  __int128 v10;

  *(_QWORD *)a1 = 0;
  v9 = objc_msgSend(a3, "newTimer");
  *(_QWORD *)(a1 + 8) = v9;
  *(double *)(a1 + 16) = a5;
  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 24), *(void **)a2, *((_QWORD *)a2 + 1));
    v9 = *(id *)(a1 + 8);
  }
  else
  {
    v10 = *a2;
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 24) = v10;
  }
  objc_msgSend(v9, "setHandler:", a4);
  return a1;
}

void sub_10088CAB4(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  void **v2;
  uint64_t v4;

  if (*((char *)v1 + 47) < 0)
    operator delete(*v2);
  v4 = *v1;
  *v1 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10088CAF0(uint64_t *a1)
{
  uint64_t v2;

  objc_msgSend((id)a1[1], "invalidate");

  if (*((char *)a1 + 47) < 0)
    operator delete((void *)a1[3]);
  v2 = *a1;
  *a1 = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_10088CB4C()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101BE51A0;
      v1[3] = unk_101BE51B0;
      v1[4] = xmmword_101BE51C0;
      v1[0] = xmmword_101BE5180;
      v1[1] = unk_101BE5190;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_10088CC20(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

double sub_10088CC38()
{
  double result;

  result = 30.0;
  qword_102305020 = 0x403E000000000000;
  return result;
}

uint64_t sub_10088CC50(uint64_t a1, uint64_t a2)
{
  _QWORD v3[5];

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10088CCA8;
  v3[3] = &unk_102131FE8;
  v3[4] = a2;
  return AnalyticsSendEventLazy(CFSTR("com.apple.CoreMotion.MotionStateBoutMetrics"), v3);
}

NSDictionary *sub_10088CCA8(uint64_t a1)
{
  double v2;
  double v3;
  _QWORD v5[3];
  _QWORD v6[3];

  v5[0] = CFSTR("boutType");
  v6[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 1));
  v5[1] = CFSTR("duration");
  *(float *)&v2 = (float)*(unint64_t *)(*(_QWORD *)(a1 + 32) + 2);
  v6[1] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v2);
  v5[2] = CFSTR("timeSinceLastBout");
  *(float *)&v3 = (float)*(unint64_t *)(*(_QWORD *)(a1 + 32) + 10);
  v6[2] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v3);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v6, v5, 3);
}

uint64_t sub_10088CD7C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_10088CE50(id a1)
{
  qword_102305028 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLCorrectiveCompensatedLocationProviderSilo"));
}

uint64_t sub_10088CF04(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10088D398;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_102305038 != -1)
    dispatch_once(&qword_102305038, block);
  return qword_102310D18;
}

id sub_10088D0C4(id *a1, uint64_t a2)
{
  double v9;
  NSObject *v10;
  id v12;
  _QWORD v13[6];
  _OWORD v14[8];
  _OWORD v15[2];
  _BYTE v16[96];
  __int128 v17;
  __int128 v18;
  _BYTE v19[28];
  uint64_t buf;
  __int16 v21;
  const char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  _BYTE *v26;

  *(_QWORD *)&v16[4] = 0;
  *(_QWORD *)&v16[12] = 0;
  *(_OWORD *)&v16[20] = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)&v16[36] = _Q0;
  *(_OWORD *)&v16[52] = _Q0;
  *(_OWORD *)&v16[68] = _Q0;
  *(_DWORD *)v16 = 0xFFFF;
  *(_DWORD *)&v16[84] = 0;
  *(_QWORD *)&v16[88] = 0xBFF0000000000000;
  v17 = 0uLL;
  *(_QWORD *)((char *)&v18 + 4) = 0xBFF0000000000000;
  LODWORD(v18) = 0;
  HIDWORD(v18) = 0x7FFFFFFF;
  memset(v19, 0, 25);
  if ((*((unsigned int (**)(id *, _BYTE *))*a1 + 29))(a1, v16)
    && sub_100182290((uint64_t)v16)
    && (v9 = *(double *)&v16[20], *(double *)&v16[20] > 0.0))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021593A0);
    v10 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
    {
      buf = 68289539;
      v21 = 2082;
      v22 = "";
      v23 = 1040;
      v24 = 156;
      v25 = 2097;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#cclp passing cached location to reply\", \"location\":%{private, location:CLClientLocation}.*P}", (uint8_t *)&buf, 0x22u);
    }
    v14[6] = v17;
    v14[7] = v18;
    v15[0] = *(_OWORD *)v19;
    *(_OWORD *)((char *)v15 + 12) = *(_OWORD *)&v19[12];
    v14[2] = *(_OWORD *)&v16[32];
    v14[3] = *(_OWORD *)&v16[48];
    v14[4] = *(_OWORD *)&v16[64];
    v14[5] = *(_OWORD *)&v16[80];
    v14[0] = *(_OWORD *)v16;
    v14[1] = *(_OWORD *)&v16[16];
    return (id)(*(uint64_t (**)(uint64_t, uint64_t, _OWORD *))(a2 + 16))(a2, 1, v14);
  }
  else
  {
    v12 = objc_msgSend(objc_msgSend(a1[4], "vendor", v9), "proxyForService:forClient:", CFSTR("CLLocationController"), CFSTR("CLCorrectiveCompensatedLocationProvider"));
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_10088F0CC;
    v13[3] = &unk_1021592D0;
    v13[4] = a2;
    v13[5] = a1;
    return objc_msgSend(v12, "fetchLocationWithReply:", v13);
  }
}

uint64_t sub_10088D2F4(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _QWORD v9[4];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD v18[2];

  v3 = *(_QWORD *)(a1 + 32);
  v4 = a3[7];
  v16 = a3[6];
  v17 = v4;
  v18[0] = a3[8];
  *(_OWORD *)((char *)v18 + 12) = *(__int128 *)((char *)a3 + 140);
  v5 = a3[3];
  v12 = a3[2];
  v13 = v5;
  v6 = a3[5];
  v14 = a3[4];
  v15 = v6;
  v7 = a3[1];
  v10 = *a3;
  v11 = v7;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1008915B4;
  v9[3] = &unk_10214CAA0;
  return (*(uint64_t (**)(uint64_t, uint64_t, id))(v3 + 16))(v3, a2, objc_msgSend(v9, "copy"));
}

void sub_10088D398()
{
  operator new();
}

void sub_10088D3E0()
{
  operator delete();
}

void sub_10088D404(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD *v10;
  id v11;
  __int128 v12;
  _QWORD v13[5];

  *(_QWORD *)sub_1006DAF10(a1, "correctiveCompensated", a2) = off_102159190;
  v3 = objc_msgSend(objc_alloc((Class)CLSettingsMirror), "initInUniverse:", *(_QWORD *)(a1 + 32));
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 120) = v3;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "silo"), "newTimer");
  *(_QWORD *)(a1 + 152) = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "silo"), "newTimer");
  v4 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "silo"), "newTimer");
  *(_QWORD *)(a1 + 208) = off_102141E98;
  *(_QWORD *)(a1 + 160) = v4;
  __asm { FMOV            V0.2D, #-1.0 }
  v12 = _Q0;
  *(_OWORD *)(a1 + 168) = _Q0;
  *(_BYTE *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 202) = 0;
  v10 = operator new(0x20uLL);
  v10[2] = 0;
  *v10 = off_102141ED0;
  v10[1] = 0;
  *((_DWORD *)v10 + 6) = 31337;
  *(_QWORD *)(a1 + 208) = off_102152D70;
  *(_QWORD *)(a1 + 216) = v10 + 3;
  *(_QWORD *)(a1 + 224) = v10;
  *(_QWORD *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 240) = 0xFFFF;
  *(_QWORD *)(a1 + 252) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_OWORD *)(a1 + 260) = xmmword_101BAFC90;
  *(_OWORD *)(a1 + 276) = v12;
  *(_OWORD *)(a1 + 292) = v12;
  *(_OWORD *)(a1 + 308) = v12;
  *(_DWORD *)(a1 + 324) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 328) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 356) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 364) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_BYTE *)(a1 + 392) = 0;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10088D794;
  v13[3] = &unk_102154268;
  v13[4] = a1;
  objc_msgSend(*(id *)(a1 + 120), "setSettingsChangeHandler:", v13);
  sub_10088D79C(a1);
  v11 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLLocationCorrectiveCompensator"));
  *(_QWORD *)(a1 + 192) = v11;
  objc_msgSend(v11, "registerDelegate:inSilo:", sub_1001E5288(a1 + 208), objc_msgSend(*(id *)(a1 + 32), "silo"));
  *(_BYTE *)(a1 + 200) = 0;
  sub_1009AD8C0();
}

void sub_10088D728(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;

  sub_1007A1B98(v2);
  v5 = *(_QWORD *)(v1 + 136);
  *(_QWORD *)(v1 + 136) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *v3;
  *v3 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  sub_1006DB4AC(v1);
  _Unwind_Resume(a1);
}

void sub_10088D794(uint64_t a1)
{
  sub_10088D79C(*(_QWORD *)(a1 + 32));
}

void sub_10088D79C(uint64_t a1)
{
  double v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  NSObject *v15;
  double v16;
  NSObject *v17;
  double v18;
  NSObject *v19;
  const char *v20;
  uint8_t *v21;
  const char *v22;
  uint8_t *v23;
  const char *v24;
  uint8_t *v25;
  uint64_t v26;
  _WORD v27[8];
  uint8_t buf[4];
  int v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;

  v2 = *(double *)(a1 + 168);
  objc_msgSend(*(id *)(a1 + 120), "doubleForKey:defaultValue:", CFSTR("CCLP.CorrectiveCompensationInterval"), 900.0);
  *(_QWORD *)(a1 + 168) = v3;
  v4 = *(double *)(a1 + 176);
  objc_msgSend(*(id *)(a1 + 120), "doubleForKey:defaultValue:", CFSTR("CCLP.ApparentCorrectiveCompensationInterval"), 1.79769313e308);
  *(_QWORD *)(a1 + 176) = v5;
  *(_BYTE *)(a1 + 184) = objc_msgSend(*(id *)(a1 + 120), "BOOLForKey:defaultValue:", CFSTR("CCLP.CorrectiveCompensationClaimsOriginalAccuracy"), 0);
  *(_BYTE *)(a1 + 201) = objc_msgSend(*(id *)(a1 + 120), "BOOLForKey:defaultValue:", CFSTR("CCLP.ClockAlignmentTestModeEnabled"), 0);
  *(_BYTE *)(a1 + 204) = objc_msgSend(*(id *)(a1 + 120), "BOOLForKey:defaultValue:", CFSTR("CCLP.EnableClockAlignment"), 0);
  if (*(_BYTE *)(a1 + 201))
    *(_QWORD *)(a1 + 168) = 0x405E000000000000;
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_1021593A0);
  v6 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_QWORD *)(a1 + 168);
    v8 = *(_QWORD *)(a1 + 176);
    v9 = *(unsigned __int8 *)(a1 + 184);
    v10 = *(unsigned __int8 *)(a1 + 201);
    v11 = *(unsigned __int8 *)(a1 + 204);
    v12 = 0x4059000000000000;
    if (!*(_BYTE *)(a1 + 201))
      v12 = 0x4088600000000000;
    v13 = 0x4064000000000000;
    if (!*(_BYTE *)(a1 + 201))
      v13 = 0x4092C00000000000;
    *(_DWORD *)buf = 68290818;
    v30 = 2082;
    v29 = 0;
    v31 = "";
    v32 = 2050;
    v33 = v7;
    v34 = 2050;
    v35 = v8;
    v36 = 1026;
    v37 = v9;
    v38 = 1026;
    v39 = v10;
    v40 = 1026;
    v41 = v11;
    v42 = 2050;
    v43 = v12;
    v44 = 2050;
    v45 = v13;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Update #compensation #settings for CCLP\", \"CorrectiveCompensationInterval\":\"%{public}f\", \"ApparentCorrectiveCompensationInterval\":\"%{public}f\", \"CorrectiveCompensationClaimsOriginalAccuracy\":%{public}hhd, \"ClockAlignmentTestModeEnabled\":%{public}hhd, \"EnableClockAlignment\":%{public}hhd, \"CorrectiveCompensationIntervalLowerBound\":\"%{public}f\", \"CorrectiveCompensationIntervalUpperBound\":\"%{public}f\"}", buf, 0x4Cu);
  }
  if (*(double *)(a1 + 168) != v2)
  {
    objc_msgSend(*(id *)(a1 + 144), "nextFireDelay");
    if (v14 != 1.79769313e308)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021593A0);
      v15 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "#cclp CorrectiveCompensationInterval changed. Reset CompensationTimer.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_1021593A0);
        v27[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "#cclp CorrectiveCompensationInterval changed. Reset CompensationTimer.", v27, 2);
        v21 = (uint8_t *)v20;
        sub_100512490("Generic", 1, 0, 2, "void CLCorrectiveCompensatedLocationProvider::refreshSettings()", "%s\n", v20);
        if (v21 != buf)
          free(v21);
      }
      objc_msgSend(*(id *)(a1 + 144), "setNextFireDelay:", 0.0);
    }
  }
  v16 = *(double *)(a1 + 176);
  if (v16 != v4)
  {
    if (v16 > *(double *)(a1 + 168))
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021593A0);
      v17 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "#warning #cclp ApparentCorrectiveCompensationInterval greater than CorrectiveCompensationInterval", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_1021593A0);
        v27[0] = 0;
        LODWORD(v26) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "#warning #cclp ApparentCorrectiveCompensationInterval greater than CorrectiveCompensationInterval", v27, v26);
        v25 = (uint8_t *)v24;
        sub_100512490("Generic", 1, 0, 2, "void CLCorrectiveCompensatedLocationProvider::refreshSettings()", "%s\n", v24);
        if (v25 != buf)
          free(v25);
      }
      *(_QWORD *)(a1 + 176) = 0x7FEFFFFFFFFFFFFFLL;
    }
    objc_msgSend(*(id *)(a1 + 144), "nextFireDelay");
    if (v18 != 1.79769313e308)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021593A0);
      v19 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "#cclp ApparentCorrectiveCompensationInterval changed. Reset ApparentCompensationTimer.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_1021593A0);
        v27[0] = 0;
        LODWORD(v26) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "#cclp ApparentCorrectiveCompensationInterval changed. Reset ApparentCompensationTimer.", v27, v26);
        v23 = (uint8_t *)v22;
        sub_100512490("Generic", 1, 0, 2, "void CLCorrectiveCompensatedLocationProvider::refreshSettings()", "%s\n", v22);
        if (v23 != buf)
          free(v23);
      }
      objc_msgSend(*(id *)(a1 + 152), "setNextFireDelay:", 0.0);
    }
  }
}

void sub_10088DD84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLCorrectiveCompensatedLocationProvider::onSimulationNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102159380);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLCorrectiveCompensatedLocationProvider::onSimulationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102159380);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLCorrectiveCompensatedLocationProvider::onSimulationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100890730(a4, v6, v7, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10088DF34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10088DF54(uint64_t a1, unsigned int *a2, uint64_t a3, id *a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id *v19;

  CLProfilingIdentify("CLCorrectiveCompensatedLocationProvider::onLocationNotification");
  objc_msgSend(objc_msgSend(a4[4], "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102159380);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLCorrectiveCompensatedLocationProvider::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102159380);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLCorrectiveCompensatedLocationProvider::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100890594(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10088E10C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

id sub_10088E12C(uint64_t a1)
{
  return sub_10088E134(*(_QWORD *)(a1 + 32));
}

id sub_10088E134(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  id result;
  unsigned int *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  uint64_t v13;
  uint8_t buf[4];
  uint64_t v15;

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_1021593A0);
  v2 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend(*(id *)(a1 + 40), "currentLatchedAbsoluteTimestamp");
    *(_DWORD *)buf = 134217984;
    v15 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#cclp CompensationTimer fired at : %f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021593A0);
    v8 = qword_1022A01D8;
    objc_msgSend(*(id *)(a1 + 40), "currentLatchedAbsoluteTimestamp");
    v12 = 134217984;
    v13 = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, 0, "#cclp CompensationTimer fired at : %f", COERCE_DOUBLE(&v12));
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLCorrectiveCompensatedLocationProvider::onCompensationTimer()", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  result = objc_msgSend(*(id *)(a1 + 144), "setNextFireDelay:", 1.79769313e308);
  v5 = (unsigned int *)qword_102310D00;
  v6 = qword_102310D08;
  while (v5 != (unsigned int *)v6)
  {
    *(_DWORD *)buf = *v5;
    if (sub_1001B7864(a1, (int *)buf, 1))
    {
      result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 128) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8), *v5, 0);
      v7 = 1;
    }
    else
    {
      (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a1 + 120))(a1, v5);
      result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 128) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8), *v5);
      v7 = 0;
    }
    *(_BYTE *)(a1 + 203) = v7;
    ++v5;
  }
  return result;
}

void sub_10088E380(uint64_t a1)
{
  sub_10088E388(*(_QWORD *)(a1 + 32));
}

void sub_10088E388(uint64_t a1)
{
  uint64_t v2;
  double v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _BYTE v14[76];
  uint64_t v15;
  double v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  void *__p;
  char v20;
  std::__shared_weak_count *v21;
  id v22;
  uint64_t buf;
  __int16 v24;
  const char *v25;

  sub_100129CA0((uint64_t)v14);
  LODWORD(buf) = 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t *, _BYTE *))(*(_QWORD *)a1 + 128))(a1, &buf, v14) & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 40), "currentLatchedAbsoluteTimestamp");
    v15 = v2;
    v16 = *(double *)(a1 + 168) * 1.33333333;
    LODWORD(buf) = 0;
    sub_10011BAC4((char *)a1, (signed __int32 *)&buf, (uint64_t)v14, 1, 0xFFFFFFFFLL, 0);
    v3 = *(double *)(a1 + 176);
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021593A0);
    v4 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
    {
      buf = 68289026;
      v24 = 2082;
      v25 = "";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#cclp ceasing apparent #compensation rate increase monitoring due to no cached message\"}", (uint8_t *)&buf, 0x12u);
    }
    v3 = 1.79769313e308;
  }
  objc_msgSend(*(id *)(a1 + 152), "setNextFireDelay:", v3);

  v5 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v20 < 0)
    operator delete(__p);
  v8 = v18;
  if (v18)
  {
    v9 = (unint64_t *)&v18->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = v17;
  if (v17)
  {
    v12 = (unint64_t *)&v17->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_10088E5A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004B4F0C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10088E5D4(uint64_t a1)
{
  sub_10088E5DC(*(_QWORD *)(a1 + 32));
}

void sub_10088E5DC(uint64_t a1)
{
  NSObject *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  NSObject *v22;
  const char *v23;
  char *v24;
  unsigned int v25[4];
  _BYTE buf[48];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _OWORD v32[35];
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  void *__p;
  char v36;
  std::__shared_weak_count *v37;
  id v38;

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_1021593A0);
  v2 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289539;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 1040;
    *(_DWORD *)&buf[20] = 156;
    *(_WORD *)&buf[24] = 2097;
    *(_QWORD *)&buf[26] = a1 + 240;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#cclp UpdateLastReceivedLocationTimer fired. Using location\", \"location\":%{private, location:CLClientLocation}.*P}", buf, 0x22u);
  }
  objc_msgSend(*(id *)(a1 + 160), "setNextFireDelay:", 1.79769313e308);
  if ((sub_100182290(a1 + 240) & 1) != 0)
  {
    sub_100129CA0((uint64_t)buf);
    v3 = *(_OWORD *)(a1 + 352);
    v30 = *(_OWORD *)(a1 + 336);
    v31 = v3;
    v32[0] = *(_OWORD *)(a1 + 368);
    *(_OWORD *)((char *)v32 + 12) = *(_OWORD *)(a1 + 380);
    v4 = *(_OWORD *)(a1 + 288);
    *(_OWORD *)&buf[32] = *(_OWORD *)(a1 + 272);
    v27 = v4;
    v5 = *(_OWORD *)(a1 + 320);
    v28 = *(_OWORD *)(a1 + 304);
    v29 = v5;
    v6 = *(_OWORD *)(a1 + 256);
    *(_OWORD *)buf = *(_OWORD *)(a1 + 240);
    *(_OWORD *)&buf[16] = v6;
    *(_DWORD *)(a1 + 240) = 0xFFFF;
    *(_QWORD *)(a1 + 244) = 0;
    *(_QWORD *)(a1 + 252) = 0;
    __asm { FMOV            V1.2D, #-1.0 }
    *(_OWORD *)(a1 + 260) = xmmword_101BAFC90;
    *(_OWORD *)(a1 + 276) = _Q1;
    *(_OWORD *)(a1 + 292) = _Q1;
    *(_OWORD *)(a1 + 308) = _Q1;
    *(_DWORD *)(a1 + 324) = 0;
    *(_DWORD *)(a1 + 352) = 0;
    *(_QWORD *)(a1 + 328) = 0xBFF0000000000000;
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 344) = 0;
    *(_QWORD *)(a1 + 356) = 0xBFF0000000000000;
    *(_DWORD *)(a1 + 364) = 0x7FFFFFFF;
    *(_QWORD *)(a1 + 376) = 0;
    *(_QWORD *)(a1 + 384) = 0;
    *(_QWORD *)(a1 + 368) = 0;
    *(_BYTE *)(a1 + 392) = 0;
    v25[0] = 0;
    sub_100890594((id *)a1, v12, v25, (uint64_t)buf);

    v13 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    if (v36 < 0)
      operator delete(__p);
    v16 = v34;
    if (v34)
    {
      v17 = (unint64_t *)&v34->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = v33;
    if (v33)
    {
      v20 = (unint64_t *)&v33->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021593A0);
    v22 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#cclp #warning UpdateLastReceivedLocationTimer handler early return. LastReceivedLocation is invalid.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021593A0);
      LOWORD(v25[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "#cclp #warning UpdateLastReceivedLocationTimer handler early return. LastReceivedLocation is invalid.", v25, 2);
      v24 = (char *)v23;
      sub_100512490("Generic", 1, 0, 2, "void CLCorrectiveCompensatedLocationProvider::onUpdateLastReceivedLocationTimer()", "%s\n", v23);
      if (v24 != buf)
        free(v24);
    }
  }
}

void sub_10088E990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2)
    sub_10024F88C(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_10088E9BC(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 136) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8), 13);
  objc_msgSend(*(id *)(a1 + 160), "invalidate");

  *(_QWORD *)(a1 + 160) = 0;
  objc_msgSend(*(id *)(a1 + 152), "invalidate");

  *(_QWORD *)(a1 + 152) = 0;
  objc_msgSend(*(id *)(a1 + 144), "invalidate");

  *(_QWORD *)(a1 + 144) = 0;
  objc_msgSend(*(id *)(a1 + 120), "invalidate");

  *(_QWORD *)(a1 + 120) = 0;
}

BOOL sub_10088EA38(uint64_t a1, int a2, unsigned int *a3, __int128 *a4)
{
  _DWORD *v7;
  _BOOL8 v8;
  NSObject *v9;
  id v10;
  const char *v11;
  NSObject *v12;
  const char *v13;
  uint64_t v15;
  const char *v16;
  const char *v17;
  char *v18;
  int v19;
  int v20;
  const char *v21;
  _BYTE buf[18];
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  id v26;
  __int16 v27;
  const char *v28;

  v19 = a2;
  v7 = (_DWORD *)qword_102310D00;
  if (qword_102310D00 != qword_102310D08)
  {
    while (*v7 != *a3)
    {
      if (++v7 == (_DWORD *)qword_102310D08)
      {
        v7 = (_DWORD *)qword_102310D08;
        break;
      }
    }
  }
  if (v7 == (_DWORD *)qword_102310D08)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021593A0);
    v12 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      v13 = sub_1001B49F8(*a3);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "#cclp registering for un-supported notification: %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021593A0);
      v15 = qword_1022A01D8;
      v16 = sub_1001B49F8(*a3);
      v20 = 136315138;
      v21 = v16;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v15, 17, "#cclp registering for un-supported notification: %s", (const char *)&v20);
      v18 = (char *)v17;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLCorrectiveCompensatedLocationProvider::registerForNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::RegInfo &)", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    return 0;
  }
  else
  {
    v8 = sub_100129730(a1, a2, (int *)a3, a4);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021593A0);
    v9 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)buf = &v19;
      v10 = objc_msgSend(sub_1000823D0((uint64_t **)(a1 + 80), &v19, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[8], "description");
      v11 = sub_1001B49F8(*a3);
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      v23 = 2050;
      v24 = a2;
      v25 = 2114;
      v26 = v10;
      v27 = 2082;
      v28 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#cclp registration\", \"client-id\":%{public}ld, \"client\":%{public, location:escape_only}@, \"notification\":%{public, location:escape_only}s}", buf, 0x30u);
    }
  }
  return v8;
}

uint64_t sub_10088ED44(uint64_t a1, unsigned int *a2)
{
  double v4;
  NSObject *v5;
  const char *v6;
  NSObject *v7;
  const char *v8;
  int v10;
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *v15;

  sub_1001B3B80();
  objc_msgSend(*(id *)(a1 + 144), "nextFireDelay");
  if (v4 == 1.79769313e308)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021593A0);
    v7 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v8 = sub_1001B49F8(*a2);
      v10 = 68289282;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2082;
      v15 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#cclp registering to FLC\", \"notification\":%{public, location:escape_only}s}", (uint8_t *)&v10, 0x1Cu);
    }
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 128) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8), *a2, 0);
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021593A0);
    v5 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v6 = sub_1001B49F8(*a2);
      v10 = 68289282;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2082;
      v15 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#cclp skip registering to FLC - timer locked(no need to source location from FLC)\", \"notification\":%{public, location:escape_only}s}", (uint8_t *)&v10, 0x1Cu);
    }
  }
  return 1;
}

uint64_t sub_10088EF00(uint64_t a1, unsigned int *a2)
{
  double v4;
  NSObject *v5;
  const char *v6;
  NSObject *v7;
  const char *v8;
  int v10;
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *v15;

  sub_10003DFD4(a1);
  objc_msgSend(*(id *)(a1 + 144), "nextFireDelay");
  if (v4 == 1.79769313e308)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021593A0);
    v7 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v8 = sub_1001B49F8(*a2);
      v10 = 68289282;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2082;
      v15 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#cclp unregistering from FLC\", \"notification\":%{public, location:escape_only}s}", (uint8_t *)&v10, 0x1Cu);
    }
    (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a1 + 120))(a1, a2);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 128) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8), *a2);
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021593A0);
    v5 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v6 = sub_1001B49F8(*a2);
      v10 = 68289282;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2082;
      v15 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#cclp skip unregistering from FLC - timer locked(will get unsubcribed after receiving snapped result)\", \"notification\":%{public, location:escape_only}s}", (uint8_t *)&v10, 0x1Cu);
    }
  }
  return 1;
}

void sub_10088F0CC(uint64_t a1, int a2, uint64_t a3)
{
  id *v5;
  NSObject *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  NSObject *v16;
  uint64_t v17;
  const char *v18;
  char *v19;
  unsigned int v20[4];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _OWORD v29[2];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[28];
  _BYTE buf[48];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _OWORD v45[35];
  std::__shared_weak_count *v46;
  std::__shared_weak_count *v47;
  void *__p;
  char v49;
  std::__shared_weak_count *v50;
  id v51;

  v5 = *(id **)(a1 + 40);
  (*(void (**)(__int128 *__return_ptr, uint64_t))(a3 + 16))(&v30, a3);
  if (a2 && sub_100182290((uint64_t)&v30) && *(double *)((char *)&v31 + 4) >= 0.0)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021593A0);
    v6 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 1040;
      *(_DWORD *)&buf[20] = 156;
      *(_WORD *)&buf[24] = 2097;
      *(_QWORD *)&buf[26] = &v30;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#cclp perform snapping on location by LC\", \"location\":%{private, location:CLClientLocation}.*P}", buf, 0x22u);
    }
    sub_100129CA0((uint64_t)buf);
    v43 = v36;
    v44 = v37;
    v45[0] = *(_OWORD *)v38;
    *(_OWORD *)((char *)v45 + 12) = *(_OWORD *)&v38[12];
    *(_OWORD *)&buf[32] = v32;
    v40 = v33;
    v41 = v34;
    v42 = v35;
    *(_OWORD *)buf = v30;
    *(_OWORD *)&buf[16] = v31;
    v20[0] = 0;
    sub_10088F4D0(v5, v20, (uint64_t)buf, *(_QWORD *)(a1 + 32));

    v7 = v50;
    if (v50)
    {
      p_shared_owners = (unint64_t *)&v50->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    if (v49 < 0)
      operator delete(__p);
    v10 = v47;
    if (v47)
    {
      v11 = (unint64_t *)&v47->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = v46;
    if (v46)
    {
      v14 = (unint64_t *)&v46->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021593A0);
    v16 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "#warning #cclp LocationController has no location", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021593A0);
      LOWORD(v20[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 1, "#warning #cclp LocationController has no location", v20, 2);
      v19 = (char *)v18;
      sub_100512490("Generic", 1, 0, 2, "void CLCorrectiveCompensatedLocationProvider::fetchCorrectiveCompensatedLocation(void (^)(BOOL, CLDaemonLocation))_block_invoke", "%s\n", v18);
      if (v19 != buf)
        free(v19);
    }
    v17 = *(_QWORD *)(a1 + 32);
    v27 = v36;
    v28 = v37;
    v29[0] = *(_OWORD *)v38;
    *(_OWORD *)((char *)v29 + 12) = *(_OWORD *)&v38[12];
    v23 = v32;
    v24 = v33;
    v25 = v34;
    v26 = v35;
    v21 = v30;
    v22 = v31;
    (*(void (**)(void))(v17 + 16))();
  }
}

void sub_10088F4A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  if (a2)
    sub_10024F88C(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_10088F4D0(id *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  const char *v9;
  _DWORD *v10;
  double v11;
  NSObject *v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  const char *v16;
  uint8_t *v17;
  NSObject *v18;
  const char *v19;
  double v20;
  NSObject *v21;
  const char *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  NSObject *v30;
  char v31;
  NSObject *v32;
  const char *v33;
  uint8_t *v34;
  NSObject *v35;
  const char *v36;
  char v37;
  uint64_t v38;
  NSObject *v39;
  id v40;
  id v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  id v46;
  uint64_t v47;
  const char *v48;
  const char *v49;
  uint8_t *v50;
  uint64_t v51;
  const char *v52;
  const char *v53;
  uint64_t v54;
  const char *v55;
  const char *v56;
  uint8_t *v57;
  const char *v58;
  uint8_t *v59;
  const char *v60;
  uint8_t *v61;
  _QWORD v62[6];
  _QWORD v63[192];
  char v64;
  _OWORD v65[8];
  _OWORD v66[2];
  _WORD v67[8];
  int v68;
  const char *v69;
  uint8_t buf[4];
  const char *v71;

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_1021593A0);
  v8 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
  {
    v9 = sub_1001B49F8(*a2);
    *(_DWORD *)buf = 136315138;
    v71 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "#cclp try performLocationSnapping - Notification: %s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021593A0);
    v47 = qword_1022A01D8;
    v48 = sub_1001B49F8(*a2);
    v68 = 136315138;
    v69 = v48;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v47, 1, "#cclp try performLocationSnapping - Notification: %s", (const char *)&v68);
    v50 = (uint8_t *)v49;
    sub_100512490("Generic", 1, 0, 2, "void CLCorrectiveCompensatedLocationProvider::performLocationSnapping(const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, void (^)(BOOL, CLDaemonLocation))", "%s\n", v49);
    if (v50 != buf)
      free(v50);
  }
  v10 = (_DWORD *)qword_102310D00;
  if (qword_102310D00 != qword_102310D08)
  {
    while (*v10 != *a2)
    {
      if (++v10 == (_DWORD *)qword_102310D08)
      {
        v10 = (_DWORD *)qword_102310D08;
        break;
      }
    }
  }
  if (v10 == (_DWORD *)qword_102310D08)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021593A0);
    v18 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      v19 = sub_1001B49F8(*a2);
      *(_DWORD *)buf = 136315138;
      v71 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "#cclp received location notification for un-supported notification: %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021593A0);
      v51 = qword_1022A01D8;
      v52 = sub_1001B49F8(*a2);
      v68 = 136315138;
      v69 = v52;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v51, 17, "#cclp received location notification for un-supported notification: %s", (const char *)&v68);
      v17 = (uint8_t *)v53;
      sub_100512490("Generic", 1, 0, 0, "void CLCorrectiveCompensatedLocationProvider::performLocationSnapping(const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, void (^)(BOOL, CLDaemonLocation))", "%s\n", v53);
      goto LABEL_74;
    }
  }
  else
  {
    objc_msgSend(a1[18], "nextFireDelay");
    if (v11 == 1.79769313e308)
    {
      objc_msgSend(a1[20], "nextFireDelay");
      if (v20 == 1.79769313e308)
      {
        if (*a2 == 9)
        {
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_1021593A0);
          v30 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "#cclp skip performLocationSnapping location-unavailable", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_1021593A0);
            LOWORD(v68) = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 1, "#cclp skip performLocationSnapping location-unavailable", &v68, 2);
            v59 = (uint8_t *)v58;
            sub_100512490("Generic", 1, 0, 2, "void CLCorrectiveCompensatedLocationProvider::performLocationSnapping(const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, void (^)(BOOL, CLDaemonLocation))", "%s\n", v58);
            if (v59 != buf)
              free(v59);
          }
          *(_DWORD *)buf = 9;
          (*((void (**)(id *, uint8_t *, uint64_t, uint64_t, uint64_t, _QWORD))*a1 + 19))(a1, buf, a3, 1, 0xFFFFFFFFLL, 0);
        }
        else if ((sub_100182290(a3) & 1) != 0)
        {
          sub_100129CA0((uint64_t)&v68);
          *(_DWORD *)buf = 0;
          v31 = (*((uint64_t (**)(id *, uint8_t *, int *))*a1 + 16))(a1, buf, &v68);
          if (*((_BYTE *)a1 + 200))
          {
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_1021593A0);
            v32 = qword_1022A01D8;
            if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "#cclp skip performLocationSnapping already in-progres", buf, 2u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A01D0 != -1)
                dispatch_once(&qword_1022A01D0, &stru_1021593A0);
              v67[0] = 0;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 1, "#cclp skip performLocationSnapping already in-progres", v67, 2);
              v34 = (uint8_t *)v33;
              sub_100512490("Generic", 1, 0, 2, "void CLCorrectiveCompensatedLocationProvider::performLocationSnapping(const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, void (^)(BOOL, CLDaemonLocation))", "%s\n", v33);
              if (v34 != buf)
                free(v34);
            }
          }
          else
          {
            v37 = v31;
            v38 = *(_QWORD *)(a3 + 20);
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_1021593A0);
            v39 = qword_1022A01D8;
            if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "#cclp dispatching call to CitySnapper", buf, 2u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A01D0 != -1)
                dispatch_once(&qword_1022A01D0, &stru_1021593A0);
              v67[0] = 0;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 1, "#cclp dispatching call to CitySnapper", v67, 2);
              v61 = (uint8_t *)v60;
              sub_100512490("Generic", 1, 0, 2, "void CLCorrectiveCompensatedLocationProvider::performLocationSnapping(const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, void (^)(BOOL, CLDaemonLocation))", "%s\n", v60);
              if (v61 != buf)
                free(v61);
            }
            *((_BYTE *)a1 + 200) = 1;
            v40 = a1[24];
            v41 = objc_alloc((Class)CLLocation);
            v42 = *(_OWORD *)(a3 + 112);
            v65[6] = *(_OWORD *)(a3 + 96);
            v65[7] = v42;
            v66[0] = *(_OWORD *)(a3 + 128);
            *(_OWORD *)((char *)v66 + 12) = *(_OWORD *)(a3 + 140);
            v43 = *(_OWORD *)(a3 + 48);
            v65[2] = *(_OWORD *)(a3 + 32);
            v65[3] = v43;
            v44 = *(_OWORD *)(a3 + 80);
            v65[4] = *(_OWORD *)(a3 + 64);
            v65[5] = v44;
            v45 = *(_OWORD *)(a3 + 16);
            v65[0] = *(_OWORD *)a3;
            v65[1] = v45;
            v46 = objc_msgSend(v41, "initWithClientLocation:", v65);
            v62[0] = _NSConcreteStackBlock;
            v62[1] = 3321888768;
            v62[2] = sub_100890AB0;
            v62[3] = &unk_1021592F8;
            v62[5] = a1;
            sub_10011D234((uint64_t)v63, (uint64_t)&v68);
            v64 = v37;
            v63[191] = v38;
            v62[4] = a4;
            objc_msgSend(v40, "snapLocation:withReply:", v46, v62);
            sub_1004B4F0C((uint64_t)v63);
          }
          sub_1004B4F0C((uint64_t)&v68);
        }
        else
        {
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_1021593A0);
          v35 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#cclp skip snapping #warning invalid location.", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_1021593A0);
            LOWORD(v68) = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "#cclp skip snapping #warning invalid location.", &v68, 2);
            v17 = (uint8_t *)v36;
            sub_100512490("Generic", 1, 0, 2, "void CLCorrectiveCompensatedLocationProvider::performLocationSnapping(const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, void (^)(BOOL, CLDaemonLocation))", "%s\n", v36);
            goto LABEL_74;
          }
        }
      }
      else
      {
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_1021593A0);
        v21 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
        {
          v22 = sub_1001B49F8(*a2);
          *(_DWORD *)buf = 136315138;
          v71 = v22;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#cclp skip notification: %s. UpdateLastReceivedLocationTimer scheduled", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_1021593A0);
          v54 = qword_1022A01D8;
          v55 = sub_1001B49F8(*a2);
          v68 = 136315138;
          v69 = v55;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v54, 0, "#cclp skip notification: %s. UpdateLastReceivedLocationTimer scheduled", (const char *)&v68);
          v57 = (uint8_t *)v56;
          sub_100512490("Generic", 1, 0, 2, "void CLCorrectiveCompensatedLocationProvider::performLocationSnapping(const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, void (^)(BOOL, CLDaemonLocation))", "%s\n", v56);
          if (v57 != buf)
            free(v57);
        }
        if (*a2 != 9)
        {
          v23 = *(_OWORD *)(a3 + 16);
          *((_OWORD *)a1 + 15) = *(_OWORD *)a3;
          *((_OWORD *)a1 + 16) = v23;
          v24 = *(_OWORD *)(a3 + 32);
          v25 = *(_OWORD *)(a3 + 48);
          v26 = *(_OWORD *)(a3 + 80);
          *((_OWORD *)a1 + 19) = *(_OWORD *)(a3 + 64);
          *((_OWORD *)a1 + 20) = v26;
          *((_OWORD *)a1 + 17) = v24;
          *((_OWORD *)a1 + 18) = v25;
          v27 = *(_OWORD *)(a3 + 96);
          v28 = *(_OWORD *)(a3 + 112);
          v29 = *(_OWORD *)(a3 + 128);
          *(_OWORD *)((char *)a1 + 380) = *(_OWORD *)(a3 + 140);
          *((_OWORD *)a1 + 22) = v28;
          *((_OWORD *)a1 + 23) = v29;
          *((_OWORD *)a1 + 21) = v27;
        }
      }
    }
    else
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021593A0);
      v12 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        v13 = sub_1001B49F8(*a2);
        *(_DWORD *)buf = 136315138;
        v71 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#cclp skip notification: %s. CompensationTimer scheduled", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_1021593A0);
        v14 = qword_1022A01D8;
        v15 = sub_1001B49F8(*a2);
        v68 = 136315138;
        v69 = v15;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v14, 0, "#cclp skip notification: %s. CompensationTimer scheduled", (const char *)&v68);
        v17 = (uint8_t *)v16;
        sub_100512490("Generic", 1, 0, 2, "void CLCorrectiveCompensatedLocationProvider::performLocationSnapping(const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, void (^)(BOOL, CLDaemonLocation))", "%s\n", v16);
LABEL_74:
        if (v17 != buf)
          free(v17);
      }
    }
  }
}

void sub_100890140(_Unwind_Exception *a1)
{
  sub_1004B4F0C((uint64_t)&STACK[0x700]);
  _Unwind_Resume(a1);
}

double sub_10089017C(uint64_t a1)
{
  double v1;
  int v3;
  double v4;
  double v5;
  int v6;
  double v7;
  int v8;
  double v9;
  double v10;
  NSObject *v11;
  const char *v12;
  double v13;
  NSObject *v14;
  NSObject *v15;
  uint8_t *v17;
  __int128 v18;
  uint8_t buf[4];
  double v20;

  v1 = *(double *)(a1 + 168);
  if (!*(_BYTE *)(a1 + 204))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021593A0);
    v11 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "#cclp: Clock Alignment disabled by default settings. Using default CC interval", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021593A0);
      LOWORD(v18) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 1, "#cclp: Clock Alignment disabled by default settings. Using default CC interval", &v18, 2, v18);
      goto LABEL_42;
    }
    return v1;
  }
  v3 = *(unsigned __int8 *)(a1 + 201);
  if (v1 == 900.0)
    goto LABEL_5;
  if (*(_BYTE *)(a1 + 201))
  {
    v3 = 1;
LABEL_5:
    if (v3)
      v4 = 100.0;
    else
      v4 = 780.0;
    objc_msgSend(*(id *)(a1 + 40), "currentLatchedAbsoluteTimestamp");
    v6 = (int)v5;
    v7 = *(double *)(a1 + 168);
    v8 = v6 % (int)v7;
    if (v8 <= (int)(v1 - v4))
    {
      v13 = v7 - (double)v8;
      if (v4 >= v13)
        v1 = v4;
      else
        v1 = v13;
    }
    else
    {
      v9 = 160.0;
      if (!v3)
        v9 = 1200.0;
      v10 = -((double)v8 - v7 * 2.0);
      if (v10 >= v9)
        v1 = v9;
      else
        v1 = v10;
    }
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021593A0);
    v14 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v20 = v1;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#cclp: next fire delay: %f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021593A0);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "#cclp: next fire delay: %f");
LABEL_42:
      v17 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "CFTimeInterval CLCorrectiveCompensatedLocationProvider::computeNextFireDelayToMaximizeAlignment()", "%s\n", v12);
      if (v17 != buf)
        free(v17);
      return v1;
    }
    return v1;
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_1021593A0);
  v15 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "#cclp: Clock Alignment disabled. Either TestMode should be enabled or CompensationInterval should be 15m. Check #compensation #settings", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021593A0);
    LOWORD(v18) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 1, "#cclp: Clock Alignment disabled. Either TestMode should be enabled or CompensationInterval should be 15m. Check #compensation #settings", &v18, 2, v18);
    goto LABEL_42;
  }
  return v1;
}

void sub_100890594(id *a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  NSObject *v7;
  const char *v8;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  uint64_t v17;

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_1021593A0);
  v7 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = sub_1001B49F8(*a3);
    v9[0] = 68289795;
    v9[1] = 0;
    v10 = 2082;
    v11 = "";
    v12 = 2082;
    v13 = v8;
    v14 = 1040;
    v15 = 156;
    v16 = 2097;
    v17 = a4;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#cclp onLocationNotification\", \"Notification\":%{public, location:escape_only}s, \"location\":%{private, location:CLClientLocation}.*P}", (uint8_t *)v9, 0x2Cu);
  }
  sub_10088F4D0(a1, a3, a4, 0);
}

void sub_1008906BC(uint64_t a1, signed __int32 *a2, uint64_t a3, int a4, uint64_t a5, int a6)
{
  double v12;

  objc_msgSend(*(id *)(a1 + 144), "nextFireDelay");
  if (v12 != 1.79769313e308)
    sub_10190D4E4();
  sub_10011BAC4((char *)a1, a2, a3, a4, a5, a6);
}

void sub_100890730(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v6;
  const char *v7;
  double v8;
  double v9;
  double v10;
  NSObject *v11;
  const char *v12;
  const char *v13;
  uint8_t *v14;
  const char *v15;
  uint8_t *v16;
  int v17;
  const char *v18;
  uint8_t buf[4];
  const char *v20;

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_1021593A0);
  v6 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    if (*(_BYTE *)(a4 + 824))
      v7 = "enabled";
    else
      v7 = "disabled";
    *(_DWORD *)buf = 136315138;
    v20 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#cclp Simulation %s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021593A0);
    if (*(_BYTE *)(a4 + 824))
      v12 = "enabled";
    else
      v12 = "disabled";
    v17 = 136315138;
    v18 = v12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "#cclp Simulation %s", (const char *)&v17);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "void CLCorrectiveCompensatedLocationProvider::onSimulationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  objc_msgSend(*(id *)(a1 + 144), "nextFireDelay");
  if (v8 == 1.79769313e308 && !*(_BYTE *)(a1 + 203))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021593A0);
    v11 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#cclp CompensationTimer not scheduled and not subscribed to FLC", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021593A0);
      LOWORD(v17) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "#cclp CompensationTimer not scheduled and not subscribed to FLC", &v17, 2);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "void CLCorrectiveCompensatedLocationProvider::onSimulationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
  }
  else
  {
    v9 = 3.0;
    if (!*(_BYTE *)(a4 + 824))
      v9 = 4.0;
    objc_msgSend(*(id *)(a1 + 160), "setNextFireDelay:", v9);
    objc_msgSend(*(id *)(a1 + 144), "nextFireDelay");
    if (v10 != 1.79769313e308)
    {
      *(_BYTE *)(a1 + 202) = *(_BYTE *)(a4 + 824);
      objc_msgSend(*(id *)(a1 + 144), "setNextFireDelay:", 0.0);
    }
  }
}

void sub_100890AB0(uint64_t a1, void *a2, int a3, void *a4)
{
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  NSObject *v14;
  int v15;
  NSObject *v16;
  NSObject *v17;
  unsigned int *v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  NSObject *v23;
  const char *v24;
  uint8_t *v25;
  NSObject *v26;
  const char *v27;
  uint8_t *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  const char *v38;
  uint8_t *v39;
  const char *v40;
  uint8_t *v41;
  uint64_t v42;
  _OWORD v43[8];
  _OWORD v44[35];
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  void *__p;
  char v48;
  std::__shared_weak_count *v49;
  void *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _BYTE v55[32];
  __int128 v56;
  __int128 v57;
  _OWORD v58[2];
  int v59;
  double v60;
  uint8_t buf[48];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  _OWORD v67[94];

  v7 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    objc_msgSend(a2, "clientLocation");
  }
  else
  {
    memset(v67, 0, 28);
    v66 = 0u;
    v65 = 0u;
    v64 = 0u;
    v63 = 0u;
    v62 = 0u;
    memset(buf, 0, sizeof(buf));
  }
  v56 = v65;
  v57 = v66;
  v58[0] = v67[0];
  *(_OWORD *)((char *)v58 + 12) = *(_OWORD *)((char *)v67 + 12);
  v53 = *(_OWORD *)&buf[32];
  v54 = v62;
  *(_OWORD *)v55 = v63;
  *(_OWORD *)&v55[16] = v64;
  v51 = *(_OWORD *)buf;
  v52 = *(_OWORD *)&buf[16];
  *(_BYTE *)(v7 + 200) = 0;
  objc_msgSend(*(id *)(v7 + 40), "currentLatchedAbsoluteTimestamp");
  v9 = v8;
  v10 = *(double *)(a1 + 124);
  v11 = *(double *)(v7 + 168);
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_1021593A0);
  v12 = vabdd_f64(v9, v10);
  v13 = v11 * 1.33333333;
  v14 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    v15 = *(unsigned __int8 *)(a1 + 1584);
    *(_DWORD *)buf = 68290563;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = a3;
    *(_WORD *)&buf[24] = 2050;
    *(double *)&buf[26] = v12;
    *(_WORD *)&buf[34] = 1026;
    *(_DWORD *)&buf[36] = v12 < v13;
    *(_WORD *)&buf[40] = 1026;
    *(_DWORD *)&buf[42] = v15;
    *(_WORD *)&buf[46] = 1040;
    LODWORD(v62) = 156;
    WORD2(v62) = 2097;
    *(_QWORD *)((char *)&v62 + 6) = &v51;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#cclp snapLocation reply\", \"permanent\":%{public}hhd, \"cacheAge\":\"%{public}f\", \"cacheAgeLessThanExtendedInterval\":%{public}hhd, \"hasCachedLocation\":%{public}hhd, \"location\":%{private, location:CLClientLocation}.*P}", buf, 0x3Eu);
  }
  if ((a3 & 1) != 0 || !*(_BYTE *)(a1 + 1584) || v12 >= v13)
  {
    LODWORD(v56) = 12;
    *(double *)&v55[24] = vabdd_f64(v9, *(double *)&v55[12]) + *(double *)(v7 + 168) * 1.33333333;
    if (*(_BYTE *)(v7 + 184))
      *(_QWORD *)((char *)&v52 + 4) = *(_QWORD *)(a1 + 1576);
    sub_100129CA0((uint64_t)v43);
    v43[6] = v56;
    v43[7] = v57;
    v44[0] = v58[0];
    *(_OWORD *)((char *)v44 + 12) = *(_OWORD *)((char *)v58 + 12);
    v43[2] = v53;
    v43[3] = v54;
    v43[4] = *(_OWORD *)v55;
    v43[5] = *(_OWORD *)&v55[16];
    v43[0] = v51;
    v43[1] = v52;
    if (a4)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021593A0);
      v16 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#cclp Encoded coarse meta data available", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_1021593A0);
        LOWORD(v59) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "#cclp Encoded coarse meta data available", &v59, 2);
        v39 = (uint8_t *)v38;
        sub_100512490("Generic", 1, 0, 2, "void CLCorrectiveCompensatedLocationProvider::performLocationSnapping(const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, void (^)(BOOL, CLDaemonLocation))_block_invoke", "%s\n", v38);
        if (v39 != buf)
          free(v39);
      }
      sub_10089143C(&v50, a4);
    }
    if (*(_QWORD *)(a1 + 32))
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021593A0);
      v17 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "#cclp delivering compensated location to reply block", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_1021593A0);
        LOWORD(v59) = 0;
        LODWORD(v42) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 1, "#cclp delivering compensated location to reply block", &v59, v42);
        v41 = (uint8_t *)v40;
        sub_100512490("Generic", 1, 0, 2, "void CLCorrectiveCompensatedLocationProvider::performLocationSnapping(const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, void (^)(BOOL, CLDaemonLocation))_block_invoke", "%s\n", v40);
        if (v41 != buf)
          free(v41);
      }
      (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    }
    *(_DWORD *)buf = 0;
    (*(void (**)(uint64_t, uint8_t *, _OWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v7 + 152))(v7, buf, v43, 1, 0xFFFFFFFFLL, 0);
    objc_msgSend(*(id *)(v7 + 152), "setNextFireDelay:", *(double *)(v7 + 176));
    v18 = (unsigned int *)qword_102310D00;
    v19 = qword_102310D08;
    while (v18 != (unsigned int *)v19)
      objc_msgSend(*(id *)(*(_QWORD *)(v7 + 128) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(v7 + 128) + 8), *v18++);
    *(_BYTE *)(v7 + 203) = 0;
    if (*(_BYTE *)(v7 + 202))
    {
      *(_BYTE *)(v7 + 202) = 0;
      v20 = (float)((float)rand() * 4.6566e-10);
      v21 = *(double *)(v7 + 168);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021593A0);
      v22 = v20 * v21 + 1.0;
      v23 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        *(double *)&buf[4] = v22;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#cclp Simulation started. Random next fire delay: %f", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_1021593A0);
        v59 = 134217984;
        v60 = v22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "#cclp Simulation started. Random next fire delay: %f", COERCE_DOUBLE(&v59));
        v25 = (uint8_t *)v24;
        sub_100512490("Generic", 1, 0, 2, "void CLCorrectiveCompensatedLocationProvider::performLocationSnapping(const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, void (^)(BOOL, CLDaemonLocation))_block_invoke", "%s\n", v24);
        if (v25 != buf)
          free(v25);
      }
    }
    else
    {
      v22 = sub_10089017C(v7);
    }
    objc_msgSend(*(id *)(v7 + 144), "setNextFireDelay:", v22);

    v29 = v49;
    if (v49)
    {
      p_shared_owners = (unint64_t *)&v49->__shared_owners_;
      do
        v31 = __ldaxr(p_shared_owners);
      while (__stlxr(v31 - 1, p_shared_owners));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    if (v48 < 0)
      operator delete(__p);
    v32 = v46;
    if (v46)
    {
      v33 = (unint64_t *)&v46->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    v35 = v45;
    if (v45)
    {
      v36 = (unint64_t *)&v45->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021593A0);
    v26 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "#cclp snapLocation expecting a improved location", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021593A0);
      LOWORD(v43[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 1, "#cclp snapLocation expecting a improved location", v43, 2);
      v28 = (uint8_t *)v27;
      sub_100512490("Generic", 1, 0, 2, "void CLCorrectiveCompensatedLocationProvider::performLocationSnapping(const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, void (^)(BOOL, CLDaemonLocation))_block_invoke", "%s\n", v27);
      if (v28 != buf)
        free(v28);
    }
  }
}

void sub_1008913F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_1004B4F0C((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_10089143C(void **a1, void *a2)
{
  id v3;
  void *v4;

  v3 = a2;
  v4 = *a1;
  *a1 = v3;

}

void sub_10089146C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_10089147C(uint64_t a1, uint64_t a2)
{
  return sub_10011D234(a1 + 48, a2 + 48);
}

uint64_t sub_100891488(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_102159190;
  sub_1007A1B98((uint64_t)(a1 + 26));
  v2 = a1[17];
  a1[17] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[16];
  a1[16] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_1006DB4AC(a1);
}

void sub_1008914E8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_102159190;
  sub_1007A1B98((uint64_t)(a1 + 26));
  v2 = a1[17];
  a1[17] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[16];
  a1[16] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_1006DB4AC(a1);
  operator delete();
}

void sub_10089155C(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100891588(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

__n128 sub_1008915B4@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;

  v2 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a2 + 112) = v2;
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(a2 + 140) = *(_OWORD *)(a1 + 172);
  v3 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 48) = v3;
  v4 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 80) = v4;
  result = *(__n128 *)(a1 + 32);
  v6 = *(_OWORD *)(a1 + 48);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v6;
  return result;
}

uint64_t sub_1008915E8()
{
  _OWORD *v0;

  qword_102310D00 = 0;
  qword_102310D08 = 0;
  qword_102310D10 = 0;
  v0 = operator new(0x20uLL);
  qword_102310D08 = (uint64_t)(v0 + 2);
  qword_102310D10 = (uint64_t)(v0 + 2);
  *v0 = xmmword_101BE51E0;
  v0[1] = unk_101BE51F0;
  qword_102310D00 = (uint64_t)v0;
  return __cxa_atexit((void (*)(void *))sub_10088CD7C, &qword_102310D00, (void *)&_mh_execute_header);
}

void sub_100891694(id a1)
{
  BOOL v1;

  sub_100197040();
  v1 = 1;
  if ((sub_100195F08() & 1) == 0)
  {
    sub_100197040();
    if ((sub_10075C0C4() & 1) == 0)
    {
      sub_100197040();
      if ((sub_1001B796C() & 2) != 0)
        v1 = 0;
    }
  }
  byte_102305058 = v1;
}

void sub_100891780(id a1)
{
  qword_102305068 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLCachedLocationControllerSilo"));
}

uint64_t sub_10089183C(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100891B58;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_102305078 != -1)
    dispatch_once(&qword_102305078, block);
  return qword_102310D20;
}

void sub_10089199C()
{
  operator new();
}

void sub_100891A48(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

uint64_t sub_100891A84(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  id v13;
  id v14;

  *(_QWORD *)a1 = off_102159678;
  *(_QWORD *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]([CLNotifierClientAdapter alloc], "initWithClient:", a1);
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0)
    v12 = a3;
  else
    v12 = (uint64_t *)*a3;
  v13 = objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(_QWORD *)(a1 + 16) = v13;
  v14 = v13;
  if (a2)
    objc_msgSend(*(id *)(a1 + 16), "setDelegateEntityName:", a2);
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

void sub_100891B58()
{
  operator new();
}

void sub_100891BA0()
{
  operator delete();
}

void sub_100891BC4(uint64_t a1, void *a2)
{
  id v4;
  id v5;
  _QWORD v6[5];

  *(_QWORD *)a1 = off_102159620;
  sub_10089209C(a1 + 8, "CachedLocationController", a2);
  *(_QWORD *)a1 = off_102159438;
  *(_QWORD *)(a1 + 8) = off_102159490;
  sub_100E4F1B4(a1 + 120, "Traffic", *(_QWORD *)(a1 + 40));
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0x4072C00000000000;
  *(_DWORD *)(a1 + 360) = 0;
  sub_100A989EC(a1 + 368, *(_QWORD *)(a1 + 40));
  sub_101449BC0((_QWORD *)(a1 + 552), *(_QWORD *)(a1 + 40));
  sub_100F9A698(a1 + 568, a1 + 552);
  *(_QWORD *)(a1 + 792) = objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "vendor"), "proxyForService:", CFSTR("CLClientAuthorizationCache"));
  v4 = objc_msgSend(*(id *)(a1 + 48), "newTimer");
  *(_QWORD *)(a1 + 336) = v4;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100892138;
  v6[3] = &unk_10212ECA0;
  v6[4] = a1;
  objc_msgSend(v4, "setHandler:", v6);
  v5 = -[CLRouteListener initInUniverse:withDelegate:]([CLRouteListener alloc], "initInUniverse:withDelegate:", a2, a1);
  *(_QWORD *)(a1 + 544) = v5;
  objc_msgSend(v5, "enable");
  sub_1001B6A0C();
}

void sub_100891FF0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_100A98A44(v4);
  v7 = *(_QWORD *)(v2 + 328);
  *(_QWORD *)(v2 + 328) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(v2 + 320);
  *(_QWORD *)(v2 + 320) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *v5;
  *v5 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  sub_100BCD638(v3);
  sub_1008922E4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10089209C(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_1021596A0;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_10089211C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_100892138(uint64_t a1)
{
  sub_100892140(*(_QWORD *)(a1 + 32));
}

void sub_100892140(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102159648);
  v2 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "CLC: Debounce timer fired, stopping", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102159648);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "CLC: Debounce timer fired, stopping", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLCachedLocationController::onTransitDebounceTimer()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  sub_10089251C(a1, 0, 1.79769313e308);
}

uint64_t sub_1008922E4(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021596A0;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_100892358(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = off_102159438;
  a1[1] = off_102159490;
  v2 = (uint64_t)(a1 + 1);
  sub_100892450((uint64_t)a1);
  sub_100A98A44(a1 + 46);
  v3 = a1[41];
  a1[41] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[40];
  a1[40] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = a1[39];
  a1[39] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  sub_100BCD638((uint64_t)(a1 + 15));
  sub_1008922E4(v2);
  return a1;
}

_QWORD *sub_1008923FC(uint64_t a1)
{
  return sub_100892358((_QWORD *)(a1 - 8));
}

void sub_100892404(_QWORD *a1)
{
  sub_100892358(a1);
  operator delete();
}

void sub_100892428(uint64_t a1)
{
  sub_100892358((_QWORD *)(a1 - 8));
  operator delete();
}

void sub_100892450(uint64_t a1)
{
  sub_10089251C(a1, 0, 1.79769313e308);
  objc_msgSend(*(id *)(a1 + 336), "invalidate");

  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 352) = 0x4072C00000000000;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 312) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 312) + 8), 4);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 312) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 312) + 8), 14);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 320) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 320) + 8), 4);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 320) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 320) + 8), 2);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 328) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 328) + 8), 4);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 328) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 328) + 8), 1);
  objc_msgSend(*(id *)(a1 + 544), "disable");

  *(_QWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 792) = 0;
}

void sub_10089251C(uint64_t a1, uint64_t a2, double a3)
{
  int v6;
  double v7;
  NSObject *v8;
  double v9;
  NSObject *v10;
  _BOOL8 v11;
  uint8_t *v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  double v17;
  char *v18;
  char *v19;
  NSObject *v20;
  _BOOL8 v21;
  _QWORD *v22;
  int v23;
  uint8_t *v24;
  uint8_t *v25;
  _BYTE *v26;
  double v32;
  const char *v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  int v38;
  _BYTE *v39;
  _BYTE *v40;
  _BYTE *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  _BYTE v45[12];
  __int16 v46;
  double v47;
  char v48;
  int v49;
  _BYTE *v50;
  __int16 v51;
  _BYTE *v52;
  _BYTE v53[12];
  __int16 v54;
  double v55;
  char v56;
  uint8_t buf[16];
  __int16 v58;
  int v59;
  int v60;

  v6 = *(_DWORD *)(a1 + 344);
  v7 = *(double *)(a1 + 352);
  *(double *)(a1 + 352) = a3;
  if (v7 != a3)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102159648);
    v8 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v9 = -1.0;
      if (a3 != 1.79769313e308)
        v9 = a3;
      *(_DWORD *)buf = 134283521;
      *(double *)&buf[4] = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "CLC: Debounce changed to %{private}lf [s]", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102159648);
      v32 = -1.0;
      if (a3 != 1.79769313e308)
        v32 = a3;
      *(_DWORD *)v53 = 134283521;
      *(double *)&v53[4] = v32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "CLC: Debounce changed to %{private}lf [s]", v53, 12);
      v34 = (uint8_t *)v33;
      sub_100512490("Generic", 1, 0, 2, "void CLCachedLocationController::setStateAndUpdateDebounceTimout(CLCachedLocationController_Type::CachedLocationState, CFTimeInterval)", "%s\n", v33);
      if (v34 != buf)
        free(v34);
    }
    if ((_DWORD)a2 == 1)
      objc_msgSend(*(id *)(a1 + 336), "setNextFireDelay:", *(double *)(a1 + 352));
  }
  if (v6 == (_DWORD)a2)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102159648);
    v10 = qword_1022A0028;
    v11 = os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG);
    if (v11)
    {
      sub_100892D40(v11, *(unsigned int *)(a1 + 344), buf);
      if (v59 >= 0)
        v12 = buf;
      else
        v12 = *(uint8_t **)buf;
      v13 = *(double *)(a1 + 352);
      if (v13 == 1.79769313e308)
        v13 = -1.0;
      *(_DWORD *)v53 = 136380931;
      *(_QWORD *)&v53[4] = v12;
      v54 = 2049;
      v55 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "CLC: Already in state %{private}s, %{private}lf", v53, 0x16u);
      if (SHIBYTE(v59) < 0)
        operator delete(*(void **)buf);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102159648);
      v15 = qword_1022A0028;
      sub_100892D40(v14, *(unsigned int *)(a1 + 344), v53);
      if (v56 >= 0)
        v16 = v53;
      else
        v16 = *(_BYTE **)v53;
      v17 = *(double *)(a1 + 352);
      if (v17 == 1.79769313e308)
        v17 = -1.0;
      *(_DWORD *)v45 = 136380931;
      *(_QWORD *)&v45[4] = v16;
      v46 = 2049;
      v47 = v17;
      LODWORD(v44) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v15, 2, "CLC: Already in state %{private}s, %{private}lf", v45, v44);
      v19 = v18;
      if (v56 < 0)
        operator delete(*(void **)v53);
      sub_100512490("Generic", 1, 0, 2, "void CLCachedLocationController::setStateAndUpdateDebounceTimout(CLCachedLocationController_Type::CachedLocationState, CFTimeInterval)", "%s\n", v19);
      if (v19 != (char *)buf)
        free(v19);
    }
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102159648);
    v20 = qword_1022A0028;
    v21 = os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG);
    if (v21)
    {
      v22 = sub_100892D40(v21, *(unsigned int *)(a1 + 344), buf);
      v23 = SHIBYTE(v59);
      v24 = *(uint8_t **)buf;
      sub_100892D40((uint64_t)v22, a2, v53);
      v25 = buf;
      if (v23 < 0)
        v25 = v24;
      if (v56 >= 0)
        v26 = v53;
      else
        v26 = *(_BYTE **)v53;
      *(_DWORD *)v45 = 136380931;
      *(_QWORD *)&v45[4] = v25;
      v46 = 2081;
      v47 = *(double *)&v26;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "CLC: Cached Location changed state from %{private}s to %{private}s", v45, 0x16u);
      if (v56 < 0)
        operator delete(*(void **)v53);
      if (SHIBYTE(v59) < 0)
        operator delete(*(void **)buf);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102159648);
      v36 = qword_1022A0028;
      v37 = sub_100892D40(v35, *(unsigned int *)(a1 + 344), v53);
      v38 = v56;
      v39 = *(_BYTE **)v53;
      sub_100892D40((uint64_t)v37, a2, v45);
      v40 = v53;
      if (v38 < 0)
        v40 = v39;
      if (v48 >= 0)
        v41 = v45;
      else
        v41 = *(_BYTE **)v45;
      v49 = 136380931;
      v50 = v40;
      v51 = 2081;
      v52 = v41;
      LODWORD(v44) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v36, 2, "CLC: Cached Location changed state from %{private}s to %{private}s", &v49, v44);
      v43 = v42;
      if (v48 < 0)
        operator delete(*(void **)v45);
      if (v56 < 0)
        operator delete(*(void **)v53);
      sub_100512490("Generic", 1, 0, 2, "void CLCachedLocationController::setStateAndUpdateDebounceTimout(CLCachedLocationController_Type::CachedLocationState, CFTimeInterval)", "%s\n", v43);
      if (v43 != (char *)buf)
        free(v43);
    }
    *(_DWORD *)(a1 + 344) = a2;
    if ((_DWORD)a2 == 1)
    {
      sub_100A98A48((int *)(a1 + 368), 1);
      __asm { FMOV            V0.2D, #-1.0 }
      *(_OWORD *)buf = _Q0;
      v59 = 0;
      v60 = 0;
      v58 = 0;
      sub_1001B3AF0();
    }
    objc_msgSend(*(id *)(a1 + 336), "setNextFireDelay:", 1.79769313e308);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 312) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 312) + 8), 22);
    sub_100A98A48((int *)(a1 + 368), 0);
    *(_DWORD *)buf = *(_DWORD *)(a1 + 344);
    *(_DWORD *)v53 = 1;
    (*(void (**)(uint64_t, _BYTE *, uint8_t *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(a1 + 8) + 152))(a1 + 8, v53, buf, 0, 0xFFFFFFFFLL, 0);
  }
}

void sub_100892BF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100892C28(uint64_t a1)
{
  sub_100892450(a1 - 8);
}

_QWORD *sub_100892C30@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1015A2E04(a2, __str);
}

_QWORD *sub_100892CA8@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1015A2E04(a2, __str);
}

uint64_t sub_100892D20()
{
  return 1;
}

uint64_t sub_100892D28()
{
  return 1;
}

uint64_t sub_100892D30()
{
  return 1;
}

uint64_t sub_100892D38()
{
  return 1;
}

_QWORD *sub_100892D40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  char *v3;
  uint64_t v5;

  if (!(_DWORD)a2)
  {
    v3 = "Off";
    return sub_1015A2E04(a3, v3);
  }
  if ((_DWORD)a2 == 1)
  {
    v3 = "Active";
    return sub_1015A2E04(a3, v3);
  }
  v5 = sub_10190D7D8(a1, a2);
  return (_QWORD *)sub_100892D74(v5);
}

void sub_100892D74(uint64_t a1, double a2)
{
  NSObject *v4;
  double v5;
  const char *v11;
  uint8_t *v12;
  double v13[2];
  uint8_t buf[4];
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102159648);
  v4 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "CLC: Received start route", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102159648);
    LOWORD(v13[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "CLC: Received start route", v13, 2);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLCachedLocationController::onStartTransitRoute(CFTimeInterval, const CLClientLocationCoordinate &)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  v5 = a2 * 1.5;
  if (a2 * 1.5 < a2 + 600.0)
    v5 = a2 + 600.0;
  sub_10089251C(a1, 1, v5);
  if (*(_DWORD *)(a1 + 348) != 1)
  {
    *(_DWORD *)(a1 + 348) = 1;
    *(_DWORD *)buf = 1;
    LODWORD(v13[0]) = 2;
    (*(void (**)(uint64_t, double *, uint8_t *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(a1 + 8) + 152))(a1 + 8, v13, buf, 0, 0xFFFFFFFFLL, 0);
  }
  *(_DWORD *)buf = 0xFFFF;
  v16 = 0;
  v15 = 0;
  v17 = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  v18 = _Q0;
  v19 = _Q0;
  v20 = _Q0;
  v21 = 0;
  v23 = 0;
  v24 = 0;
  v22 = 0xBFF0000000000000;
  v25 = 0;
  v26 = 0xBFF0000000000000;
  v27 = 0x7FFFFFFF;
  v29 = 0;
  v30 = 0;
  v28 = 0;
  v31 = 0;
  v13[0] = CFAbsoluteTimeGetCurrent();
  sub_100F9A69C((_QWORD *)(a1 + 568), (uint64_t)buf, v13);
}

void sub_100892FF0(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _DWORD v5[4];
  uint8_t buf[1640];

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102159648);
  v2 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "CLC: Received end route", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102159648);
    LOWORD(v5[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "CLC: Received end route", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLCachedLocationController::onEndTransitRoute()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  sub_10089251C(a1, 0, 1.79769313e308);
  if (*(_DWORD *)(a1 + 348))
  {
    *(_DWORD *)(a1 + 348) = 0;
    *(_DWORD *)buf = 0;
    v5[0] = 2;
    (*(void (**)(uint64_t, _DWORD *, uint8_t *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(a1 + 8) + 152))(a1 + 8, v5, buf, 0, 0xFFFFFFFFLL, 0);
  }
}

id sub_1008931D0(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "vendor"), "proxyForService:", CFSTR("CLAccessoryLocationProvider")), "syncSetNavigationStateChange:", a2);
}

void sub_100893204(uint64_t a1, int a2)
{
  NSObject *v4;
  int v5;
  int v6;
  NSObject *v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  _DWORD v14[2];
  __int16 v15;
  int v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  int v20;

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102159648);
  v4 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_DWORD *)(a1 + 360);
    *(_DWORD *)buf = 67240448;
    v18 = a2;
    v19 = 1026;
    v20 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLC: Suspend for exception, %{public}#x, oldExceptions %{public}#x", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102159648);
    v8 = *(_DWORD *)(a1 + 360);
    v14[0] = 67240448;
    v14[1] = a2;
    v15 = 1026;
    v16 = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "CLC: Suspend for exception, %{public}#x, oldExceptions %{public}#x", v14, 14);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLCachedLocationController::suspendForException(CLCachedLocationController::CacheException)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  v6 = *(_DWORD *)(a1 + 360);
  if (v6)
  {
    *(_DWORD *)(a1 + 360) = v6 | a2;
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102159648);
    v7 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "CLC: Suspend", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102159648);
      LOWORD(v14[0]) = 0;
      LODWORD(v13) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "CLC: Suspend", v14, v13);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLCachedLocationController::suspendForException(CLCachedLocationController::CacheException)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    *(_DWORD *)(a1 + 360) |= a2;
    sub_10089251C(a1, 0, 1.79769313e308);
    objc_msgSend(*(id *)(a1 + 544), "disable");
  }
}

void sub_10089353C(uint64_t a1, int a2)
{
  NSObject *v4;
  int v5;
  BOOL v6;
  NSObject *v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  _DWORD v14[2];
  __int16 v15;
  int v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  int v20;

  if (*(_DWORD *)(a1 + 360))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102159648);
    v4 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v5 = *(_DWORD *)(a1 + 360);
      *(_DWORD *)buf = 67240448;
      v18 = a2;
      v19 = 1026;
      v20 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLC: Resume for exception, %{public}#x, oldExceptions %{public}#x", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102159648);
      v8 = *(_DWORD *)(a1 + 360);
      v14[0] = 67240448;
      v14[1] = a2;
      v15 = 1026;
      v16 = v8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "CLC: Resume for exception, %{public}#x, oldExceptions %{public}#x", v14, 14);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLCachedLocationController::resumeForException(CacheException)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    v6 = (*(_DWORD *)(a1 + 360) & ~a2) == 0;
    *(_DWORD *)(a1 + 360) &= ~a2;
    if (v6)
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102159648);
      v7 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLC: Resume", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102159648);
        LOWORD(v14[0]) = 0;
        LODWORD(v13) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "CLC: Resume", v14, v13);
        v12 = (uint8_t *)v11;
        sub_100512490("Generic", 1, 0, 2, "void CLCachedLocationController::resumeForException(CacheException)", "%s\n", v11);
        if (v12 != buf)
          free(v12);
      }
      objc_msgSend(*(id *)(a1 + 544), "enable");
      objc_msgSend(*(id *)(a1 + 544), "notifyFromLastInfo");
    }
  }
}

void sub_100893860(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021595F0);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_1021595F0);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLCachedLocationController_Type::Notification, NotificationData_T = CLCachedLocationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

uint64_t sub_100893AD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022A4E40);
}

uint64_t sub_100893AE8(uint64_t a1, int a2, int *a3, char *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t *v29;
  char v30;
  uint64_t **v31;
  char v32;
  uint64_t **v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  const char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _BYTE v42[12];
  __int16 v43;
  int v44;
  _BYTE buf[12];
  __int16 v46;
  int v47;

  v41 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(_QWORD *)v42 = v10;
      v17 = *a3;
      v20 = *(_QWORD *)(v10 + 48);
      v19 = v10 + 48;
      v18 = v20;
      if (!v20)
        goto LABEL_31;
      v21 = v19;
      do
      {
        v22 = *(_DWORD *)(v18 + 28);
        v23 = v22 < v17;
        if (v22 >= v17)
          v24 = (uint64_t *)v18;
        else
          v24 = (uint64_t *)(v18 + 8);
        if (!v23)
          v21 = v18;
        v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28))
LABEL_31:
        v21 = v19;
      v25 = *(_QWORD *)(a1 + 64);
      if (!v25)
        goto LABEL_42;
      v26 = a1 + 64;
      do
      {
        v27 = *(_DWORD *)(v25 + 32);
        v28 = v27 < v17;
        if (v27 >= v17)
          v29 = (uint64_t *)v25;
        else
          v29 = (uint64_t *)(v25 + 8);
        if (!v28)
          v26 = v25;
        v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        v40 = v26;
        v34 = *(_QWORD *)(v26 + 56);
        v35 = *a4;
        *(_QWORD *)buf = &v41;
        *((_BYTE *)sub_1001AFE94((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v35;
        *(_DWORD *)buf = 0;
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _BYTE *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_100896188();
        }
        if (v34)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        v40 = a1 + 64;
        v30 = byte_1022A4E41;
        HIDWORD(v39) = v17;
        *(_QWORD *)buf = (char *)&v39 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v30;
        HIDWORD(v39) = *a3;
        *(_QWORD *)buf = (char *)&v39 + 4;
        v31 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v31 + 8);
        v32 = *a4;
        HIDWORD(v39) = *a3;
        *(_QWORD *)buf = (char *)&v39 + 4;
        v33 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)buf = &v41;
        *((_BYTE *)sub_1001AFE94(v33 + 5, &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v32;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        *(_DWORD *)buf = *a3;
        sub_1000C6190((uint64_t **)(*(_QWORD *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021595F0);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v15;
    v46 = 1026;
    v47 = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  v16 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021595F0);
    v36 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v36 = (_QWORD *)*v36;
    *(_DWORD *)v42 = 136446466;
    *(_QWORD *)&v42[4] = v36;
    v43 = 1026;
    v44 = a2;
    LODWORD(v39) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
      v42,
      v39);
    v38 = (char *)v37;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLCachedLocationController_Type::Notification, NotificationData_T = CLCachedLocationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v37);
    if (v38 != buf)
      free(v38);
    return 0;
  }
  return result;
}

BOOL sub_100893F44(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021595F0);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021595F0);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLCachedLocationController_Type::Notification, NotificationData_T = CLCachedLocationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

BOOL sub_1008941C4(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE buf[12];
  __int16 v36;
  void **v37;
  char v38;
  int v39;
  _QWORD *v40;
  __int16 v41;
  _BYTE *v42;
  void *__p[2];
  char v44;

  HIDWORD(v34) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009E904((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021595F0);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v44 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v36 = 2082;
                v37 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_1021595F0);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v38 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v39 = 136446466;
                v40 = v29;
                v41 = 2082;
                v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                v33 = v32;
                if (v38 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLCachedLocationController_Type::Notification, NotificationData_T = CLCachedLocationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v33);
                if (v33 != (char *)__p)
                  free(v33);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_10089454C(uint64_t a1, int *a2, int *a3)
{
  _QWORD *v6;
  int v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  int v13;
  __int128 v14;
  int *v15;

  v6 = operator new(0x20uLL);
  v6[2] = 0;
  *v6 = off_102159780;
  v6[1] = 0;
  v7 = *a3;
  *((_QWORD *)&v14 + 1) = v6;
  *((_DWORD *)v6 + 6) = v7;
  *(_QWORD *)&v14 = v6 + 3;
  v13 = *a2;
  v15 = &v13;
  v8 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v13, (uint64_t)&unk_101B9EB60, &v15);
  sub_1002B7674((uint64_t)(v8 + 8), &v14);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return 1;
}

void sub_100894620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100894634(uint64_t a1, signed __int32 *a2, _DWORD *a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  os_activity_scope_state_s state;
  uint8_t buf[8];
  _BYTE v30[20];
  __int16 v31;
  _QWORD *v32;
  __int16 v33;
  std::__shared_weak_count *v34;
  _QWORD **v35;
  _QWORD *v36[3];
  std::__shared_weak_count *v37;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021595F0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v30 = 2082;
      *(_QWORD *)&v30[2] = "";
      *(_WORD *)&v30[10] = 2082;
      *(_QWORD *)&v30[12] = "activity";
      v31 = 2082;
      v32 = v10;
      v33 = 2050;
      v34 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v35 = v36;
      memset(v36, 0, sizeof(v36));
      v37 = 0;
      sub_1004A6D60((uint64_t)buf, a2, (uint64_t)&v35);
      v14 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)buf);
      v18 = v34;
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v30, *(_QWORD **)&v30[8]);
      v21 = v37;
      if (v37)
      {
        v22 = (unint64_t *)&v37->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v35, v36[0]);
    }
    if (a4)
    {
      v24 = operator new(0x20uLL);
      v24[2] = 0;
      *v24 = off_102159780;
      v24[1] = 0;
      *((_DWORD *)v24 + 6) = *a3;
      *(_QWORD *)buf = v24 + 3;
      *(_QWORD *)v30 = v24;
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)buf);
      v25 = *(std::__shared_weak_count **)v30;
      if (*(_QWORD *)v30)
      {
        v26 = (unint64_t *)(*(_QWORD *)v30 + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_10089538C();
    os_activity_scope_leave(&state);
  }
}

void sub_100894C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_100894CB8(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021595F0);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021595F0);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::listClients() [Notification_T = CLCachedLocationController_Type::Notification, NotificationData_T = CLCachedLocationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021595F0);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021595F0);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::listClients() [Notification_T = CLCachedLocationController_Type::Notification, NotificationData_T = CLCachedLocationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_1021595F0);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021595F0);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::listClients() [Notification_T = CLCachedLocationController_Type::Notification, NotificationData_T = CLCachedLocationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_100895264(uint64_t a1)
{
  sub_10089532C(a1);
  operator delete();
}

void sub_100895288(uint64_t a1, uint64_t a2, void *a3)
{
  int v3;
  uint64_t v5;
  int v6;

  v3 = a2;
  sub_10089593C(a3, a2);
  if (v5)
  {
    v6 = v3;
    (*(void (**)(_QWORD, int *, uint64_t, _QWORD))(a1 + 24))(0, &v6, v5, *(_QWORD *)(a1 + 32));
  }
}

void sub_1008952D4(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100895300(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

uint64_t sub_10089532C(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = off_102159678;
  v2 = (id *)(a1 + 8);
  objc_msgSend(*(id *)(a1 + 16), "forget:", *(_QWORD *)(a1 + 8));

  objc_msgSend(*v2, "invalidate");
  *v2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void sub_10089538C()
{
  operator new();
}

void sub_10089541C(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  const char *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  __int16 v54;
  int v55;
  uint8_t buf[4];
  _QWORD *v57;
  __int16 v58;
  int v59;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v51 = v9;
        sub_10089593C(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, uint64_t, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 7);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v50 = v19;
              sub_1008957F0(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v51 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 28);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 28);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v50 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021595F0);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                v57 = v25;
                v58 = 1026;
                v59 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_1021595F0);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 7);
                v52 = 136446466;
                v53 = v45;
                v54 = 1026;
                v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                v48 = (uint8_t *)v47;
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLCachedLocationController_Type::Notification, NotificationData_T = CLCachedLocationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v48 != buf)
                  free(v48);
              }
            }
          }
          while (v14 != v51 + 6);
        }
      }
    }
  }
}

_BYTE *sub_1008957F0(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t **v13;
  uint64_t v14;
  int *v15;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v14) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    sub_10089593C(a4, a2);
    v10 = v9;
    v11 = *(_QWORD *)a3 + 80;
    v12 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v15 = (int *)(*(_QWORD *)a2 + 32);
    v13 = sub_1001AFE94(v12, v15, (uint64_t)&unk_101B9EB60, &v15);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v14, v10, v11, v13 + 4);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v14);
  }
  return result;
}

void sub_1008958CC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102159780;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1008958E0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102159780;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10089591C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

void sub_10089593C(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = objc_opt_class(CLCppEncodableDataContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
  {
    sub_1008959B4(a1);
  }
  else
  {
    v5 = objc_opt_class(CLCppContainer, v4);
    if ((objc_opt_isKindOfClass(a1, v5) & 1) != 0)
      sub_100895D3C(a1);
  }
}

void sub_1008959B4(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
  {
    sub_1008960E8((uint64_t)&v7 + 7, a1);
    return;
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021597C0);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BE5471 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_1021597C0);
      LODWORD(v8) = 134218498;
      HIDWORD(v8) = (_DWORD)v2;
      LODWORD(v7) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, v7, v8);
LABEL_21:
      v6 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLCachedLocationController_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v4);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021597C0);
    v5 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BE5471 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_1021597C0);
      LODWORD(v8) = 134218498;
      HIDWORD(v8) = (_DWORD)v2;
      LODWORD(v7) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, v7, v8);
      goto LABEL_21;
    }
  }
}

id sub_100895D3C(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021597C0);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BE5471 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021597C0);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021597C0);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BE5471 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021597C0);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLCachedLocationController_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

void sub_1008960E8(uint64_t a1, void *a2)
{
  void *v3;

  if (objc_msgSend(a2, "cppObjectPtr")
    || !objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_10221B708))
  {
    goto LABEL_5;
  }
  if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") == (id)4)
  {
    objc_msgSend(a2, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a2, "serialized"), "bytes"));
LABEL_5:
    objc_msgSend(a2, "cppObjectPtr");
    return;
  }
  v3 = (void *)sub_10190D94C();
  sub_10089615C(v3);
}

void sub_10089615C(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_100896188()
{
  operator new();
}

uint64_t sub_100896218(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

uint64_t sub_100896238()
{
  sub_1015A2E04(&qword_102305040, "com.apple.locationd.bundle-/System/Library/LocationBundles/Traffic.bundle");
  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102305040, (void *)&_mh_execute_header);
}

NSDictionary *sub_10089627C()
{
  _QWORD v1[2];
  const __CFString *v2;
  const __CFString *v3;
  const __CFString *v4;
  const __CFString *v5;
  _QWORD v6[3];
  _QWORD v7[3];
  _QWORD v8[4];
  _QWORD v9[13];
  _QWORD v10[9];
  _QWORD v11[9];

  v10[0] = CFSTR("/System/Library/PrivateFrameworks/BulletinBoard.framework");
  v9[0] = CFSTR("/System/Library/LocationBundles/AppSuggestions.bundle");
  v9[1] = CFSTR("/System/Library/LocationBundles/CalendarLocation.bundle");
  v9[2] = CFSTR("/System/Library/LocationBundles/DestinationdLocationBundleiOS.bundle");
  v9[3] = CFSTR("/System/Library/LocationBundles/DoNotDisturb.bundle");
  v9[4] = CFSTR("/System/Library/LocationBundles/ExposureNotificationBundle.bundle");
  v9[5] = CFSTR("/System/Library/LocationBundles/MapsAnnouncements.bundle");
  v9[6] = CFSTR("/System/Library/LocationBundles/NavdLocationBundleiOS.bundle");
  v9[7] = CFSTR("/System/Library/LocationBundles/Oos.bundle");
  v9[8] = CFSTR("/System/Library/LocationBundles/PassbookRelevancy.bundle");
  v9[9] = CFSTR("/System/Library/LocationBundles/RemindersAlerts.bundle");
  v9[10] = CFSTR("/System/Library/LocationBundles/SafetyAlerts.bundle");
  v9[11] = CFSTR("/System/Library/LocationBundles/ShortcutsLocation.bundle");
  v9[12] = CFSTR("/System/Library/LocationBundles/Wea.bundle");
  v11[0] = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v9, 13);
  v10[1] = CFSTR("/System/Library/LocationBundles/Traffic.bundle");
  v8[0] = CFSTR("/System/Library/LocationBundles/IonosphereHarvest.bundle");
  v8[1] = CFSTR("/System/Library/LocationBundles/AltimeterHarvest.bundle");
  v8[2] = CFSTR("/System/Library/LocationBundles/GeocorrectionDLocationBundle.bundle");
  v8[3] = CFSTR("/System/Library/LocationBundles/TraceHarvest.bundle");
  v11[1] = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v8, 4);
  v10[2] = CFSTR("/System/Library/PrivateFrameworks/MobileWiFi.framework");
  v7[0] = CFSTR("/System/Library/LocationBundles/UWBRegulatory.bundle");
  v7[1] = CFSTR("/System/Library/LocationBundles/WRMLinkSelection.bundle");
  v7[2] = CFSTR("/System/Library/PrivateFrameworks/NetworkServiceProxy.framework");
  v11[2] = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v7, 3);
  v10[3] = CFSTR("/System/Library/LocationBundles/SystemCustomization.bundle");
  v6[0] = CFSTR("/System/Library/PrivateFrameworks/ChronoCore.framework");
  v6[1] = CFSTR("/System/Library/LocationBundles/CountryTracker.bundle");
  v6[2] = CFSTR("/System/Library/PrivateFrameworks/ClockPoster.framework");
  v11[3] = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v6, 3);
  v10[4] = CFSTR("/System/Library/PrivateFrameworks/CoreParsec.framework");
  v5 = CFSTR("/System/Library/LocationBundles/eSIMTravelBuddy.bundle");
  v11[4] = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v5, 1);
  v10[5] = CFSTR("/System/Library/PrivateFrameworks/HomeKitDaemon.framework");
  v4 = CFSTR("/System/Library/LocationBundles/CarPlayHomeLocation.bundle");
  v11[5] = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v4, 1);
  v10[6] = CFSTR("/System/Library/PrivateFrameworks/DeviceManagement.framework");
  v3 = CFSTR("/System/Library/PrivateFrameworks/MDM.framework");
  v11[6] = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v3, 1);
  v10[7] = CFSTR("/System/Library/PrivateFrameworks/FMF.framework");
  v2 = CFSTR("/System/Library/LocationBundles/SafetyMonitorLocationBundle.bundle");
  v11[7] = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v2, 1);
  v10[8] = CFSTR("/System/Library/LocationBundles/Routine.bundle");
  v1[0] = CFSTR("/System/Library/LocationBundles/Milod.bundle");
  v1[1] = CFSTR("/System/Library/LocationBundles/FedMobility.bundle");
  v11[8] = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v1, 2);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v11, v10, 9);
}

NSArray *sub_1008965CC()
{
  _QWORD v1[12];

  v1[0] = CFSTR("/System/Library/LocationBundles/PassbookMerchantLookup.bundle");
  v1[1] = CFSTR("/System/Library/Frameworks/CoreTelephony.framework");
  v1[2] = CFSTR("/System/Library/LocationBundles/CompassCalibration.bundle");
  v1[3] = CFSTR("/System/Library/LocationBundles/Emergency SOS.bundle");
  v1[4] = CFSTR("/System/Library/PrivateFrameworks/WirelessDiagnostics.framework");
  v1[5] = CFSTR("/System/Library/LocationBundles/MotionCalibration.bundle");
  v1[6] = CFSTR("/System/Library/LocationBundles/TimeZone.bundle");
  v1[7] = CFSTR("/System/Library/PrivateFrameworks/FindMyDevice.framework");
  v1[8] = CFSTR("/System/Library/LocationBundles/WifiCalling.bundle");
  v1[9] = CFSTR("/System/Library/LocationBundles/Bifrost.bundle");
  v1[10] = CFSTR("/System/Library/LocationBundles/ClipServicesLocation.bundle");
  v1[11] = CFSTR("/System/Library/LocationBundles/AppGenius.bundle");
  return +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v1, 12);
}

NSArray *sub_1008966CC()
{
  _QWORD v1[3];

  v1[0] = CFSTR("/System/Library/Frameworks/CoreWLAN.framework");
  v1[1] = CFSTR("/System/Library/LocationBundles/CarbonAnalytics.bundle");
  v1[2] = CFSTR("/System/Library/LocationBundles/NanoCompassAlerts.bundle");
  return +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v1, 3);
}

void sub_1008967F4(id a1)
{
  qword_102305080 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLTileDownloadSchedulingServiceSilo"));
}

void sub_100896E5C(void *a1, uint64_t a2)
{
  BOOL v4;
  uint64_t v5;

  xpc_dictionary_set_string(a1, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
  xpc_dictionary_set_BOOL(a1, XPC_ACTIVITY_ALLOW_BATTERY, 1);
  xpc_dictionary_set_BOOL(a1, XPC_ACTIVITY_PREVENT_DEVICE_SLEEP, 1);
  v4 = a2 == 2;
  if (a2 == 2)
    v5 = 60;
  else
    v5 = 30;
  xpc_dictionary_set_BOOL(a1, XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY, v4);
  xpc_dictionary_set_string(a1, XPC_ACTIVITY_NETWORK_TRANSFER_DIRECTION, XPC_ACTIVITY_NETWORK_TRANSFER_DIRECTION_DOWNLOAD);
  xpc_dictionary_set_uint64(a1, XPC_ACTIVITY_GRACE_PERIOD, v5);
  xpc_dictionary_set_BOOL(a1, XPC_ACTIVITY_REQUIRES_CLASS_C, 1);
}

void sub_100896F48(uint64_t a1, xpc_activity_t activity)
{
  xpc_activity_state_t state;
  NSObject *v5;
  id v6;
  NSObject *v7;
  xpc_activity_state_t v8;
  const char *v9;
  uint8_t *v10;
  uint64_t v11;
  xpc_activity_state_t v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  _QWORD v16[5];
  int v17;
  xpc_activity_state_t v18;
  uint8_t buf[4];
  xpc_activity_state_t v20;

  state = xpc_activity_get_state(activity);
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102159800);
  v5 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240192;
    LODWORD(v20) = state;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#tiledownloadscheduler, callback, %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102159800);
    v17 = 67240192;
    LODWORD(v18) = state;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#tiledownloadscheduler, callback, %{public}d", &v17, 8);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "-[CLTileDownloadSchedulingService scheduleDownloadsWithWifiConnectivity]_block_invoke", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  if (state == 2)
  {
    v6 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo");
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_1008972BC;
    v16[3] = &unk_10212BB58;
    v16[4] = *(_QWORD *)(a1 + 32);
    objc_msgSend(v6, "async:", v16);
    if (!xpc_activity_set_state(activity, 5))
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102159800);
      v7 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
      {
        v8 = xpc_activity_get_state(activity);
        *(_DWORD *)buf = 134349056;
        v20 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "#tiledownloadscheduler, failed to mark activity as done. current state, %{public}ld", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102159800);
        v11 = qword_1022A0028;
        v12 = xpc_activity_get_state(activity);
        v17 = 134349056;
        v18 = v12;
        LODWORD(v15) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 17, "#tiledownloadscheduler, failed to mark activity as done. current state, %{public}ld", &v17, v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "-[CLTileDownloadSchedulingService scheduleDownloadsWithWifiConnectivity]_block_invoke", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

id sub_1008972BC(uint64_t a1)
{
  NSObject *v2;
  id v3;
  id v4;
  id result;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  const char *v11;
  uint8_t *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  int v18;
  id v19;
  uint8_t buf[4];
  id v21;

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102159800);
  v2 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v3 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "clients"), "count");
    *(_DWORD *)buf = 134349056;
    v21 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#tiledownloadscheduler, run, wifi connectivity, client count, %{public}ld", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102159800);
    v9 = qword_1022A0028;
    v10 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "clients"), "count");
    v18 = 134349056;
    v19 = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 2, "#tiledownloadscheduler, run, wifi connectivity, client count, %{public}ld", &v18, 12);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "-[CLTileDownloadSchedulingService scheduleDownloadsWithWifiConnectivity]_block_invoke", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  objc_msgSend(*(id *)(a1 + 32), "setHasRegisteredForWifiConnectivity:", 0);
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v4 = objc_msgSend(*(id *)(a1 + 32), "clients");
  result = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (result)
  {
    v6 = result;
    v7 = *(_QWORD *)v14;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v14 != v7)
          objc_enumerationMutation(v4);
        objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)v8), "onScheduledTileDownloadWithReachabilityRequirement:", 2);
        v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      result = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      v6 = result;
    }
    while (result);
  }
  return result;
}

void sub_1008975BC(uint64_t a1, xpc_activity_t activity)
{
  xpc_activity_state_t state;
  NSObject *v5;
  id v6;
  NSObject *v7;
  xpc_activity_state_t v8;
  const char *v9;
  uint8_t *v10;
  uint64_t v11;
  xpc_activity_state_t v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  _QWORD v16[5];
  int v17;
  xpc_activity_state_t v18;
  uint8_t buf[4];
  xpc_activity_state_t v20;

  state = xpc_activity_get_state(activity);
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102159800);
  v5 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240192;
    LODWORD(v20) = state;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#tiledownloadscheduler, callback, %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102159800);
    v17 = 67240192;
    LODWORD(v18) = state;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#tiledownloadscheduler, callback, %{public}d", &v17, 8);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "-[CLTileDownloadSchedulingService scheduleDownloadsWithCellularConnectivity]_block_invoke", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  if (state == 2)
  {
    v6 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo");
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_100897930;
    v16[3] = &unk_10212BB58;
    v16[4] = *(_QWORD *)(a1 + 32);
    objc_msgSend(v6, "async:", v16);
    if (!xpc_activity_set_state(activity, 5))
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102159800);
      v7 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
      {
        v8 = xpc_activity_get_state(activity);
        *(_DWORD *)buf = 134349056;
        v20 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "#tiledownloadscheduler, failed to mark activity as done. current state, %{public}ld", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102159800);
        v11 = qword_1022A0028;
        v12 = xpc_activity_get_state(activity);
        v17 = 134349056;
        v18 = v12;
        LODWORD(v15) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 17, "#tiledownloadscheduler, failed to mark activity as done. current state, %{public}ld", &v17, v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "-[CLTileDownloadSchedulingService scheduleDownloadsWithCellularConnectivity]_block_invoke", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

id sub_100897930(uint64_t a1)
{
  NSObject *v2;
  id v3;
  id v4;
  id result;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  const char *v11;
  uint8_t *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  int v18;
  id v19;
  uint8_t buf[4];
  id v21;

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102159800);
  v2 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v3 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "clients"), "count");
    *(_DWORD *)buf = 134349056;
    v21 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#tiledownloadscheduler, run, cellular connectivity, client count, %{public}ld", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102159800);
    v9 = qword_1022A0028;
    v10 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "clients"), "count");
    v18 = 134349056;
    v19 = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 2, "#tiledownloadscheduler, run, cellular connectivity, client count, %{public}ld", &v18, 12);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "-[CLTileDownloadSchedulingService scheduleDownloadsWithCellularConnectivity]_block_invoke", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  objc_msgSend(*(id *)(a1 + 32), "setHasRegisteredForCellularConnectivity:", 0);
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v4 = objc_msgSend(*(id *)(a1 + 32), "clients");
  result = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (result)
  {
    v6 = result;
    v7 = *(_QWORD *)v14;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v14 != v7)
          objc_enumerationMutation(v4);
        objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)v8), "onScheduledTileDownloadWithReachabilityRequirement:", 1);
        v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      result = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      v6 = result;
    }
    while (result);
  }
  return result;
}

void sub_100897C18(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

BOOL sub_100897C44(uint64_t a1)
{
  return *(_DWORD *)(a1 + 52) != 0;
}

BOOL sub_100897C64(uint64_t a1)
{
  return *(_DWORD *)(a1 + 52) == 0;
}

uint64_t sub_100897C7C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 64);
}

BOOL sub_100897C88(uint64_t a1)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  unint64_t v5;
  unsigned int v6;

  v2 = *(unsigned __int16 *)(a1 + 22);
  if (*(unsigned __int16 *)(a1 + 22) <= 3u)
    v3 = 3;
  else
    v3 = *(unsigned __int16 *)(a1 + 22);
  if (v3 - 3 < v2)
  {
    v4 = 0;
    v5 = v2 - 1;
    do
    {
      if (*(float *)sub_1004784C4((unsigned __int16 *)(a1 + 20), v5) <= 18.0)
        ++v4;
      v6 = *(unsigned __int16 *)(a1 + 22);
      if (v6 <= 3)
        v6 = 3;
      --v5;
    }
    while ((int)v5 + 2 > (int)(v6 - 2));
    if (!*(_BYTE *)(a1 + 84))
    {
      if (v4 >= 3)
        return *(_BYTE *)(a1 + 64) == 0;
      return 0;
    }
    return sub_100897D70(a1, v4);
  }
  v4 = 0;
  if (*(_BYTE *)(a1 + 84))
    return sub_100897D70(a1, v4);
  return 0;
}

BOOL sub_100897D70(uint64_t a1, unsigned int a2)
{
  double Current;
  _BOOL8 v5;
  double v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  double v13;
  int v14;
  double v15;
  __int16 v16;
  uint64_t v17;
  uint8_t buf[4];
  double v19;
  __int16 v20;
  uint64_t v21;

  Current = CFAbsoluteTimeGetCurrent();
  if (*(_WORD *)(a1 + 22)
    && *(float *)sub_1004784C4((unsigned __int16 *)(a1 + 20), *(unsigned __int16 *)(a1 + 22) - 1) > *(float *)(a1 + 80))
  {
    *(_QWORD *)(a1 + 72) = 0x7FEFFFFFFFFFFFFFLL;
  }
  v5 = 0;
  if (a2 >= 3 && !*(_BYTE *)(a1 + 64))
  {
    v6 = *(double *)(a1 + 72);
    v5 = Current > v6;
    if (Current > v6)
    {
      if (Current - v6 <= 180.0)
        return 0;
      if (qword_10229FD70 != -1)
        dispatch_once(&qword_10229FD70, &stru_102159910);
      v7 = qword_10229FD78;
      if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_DEFAULT))
      {
        v8 = *(_QWORD *)(a1 + 72);
        *(_DWORD *)buf = 134218240;
        v19 = Current;
        v20 = 2048;
        v21 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "pressure quality check for good wet barometer mitigation should be applied,now,%f,lastUnknownToGoodSatifiedTimestamp,%f", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD70 != -1)
          dispatch_once(&qword_10229FD70, &stru_102159910);
        v10 = *(_QWORD *)(a1 + 72);
        v14 = 134218240;
        v15 = Current;
        v16 = 2048;
        v17 = v10;
        LODWORD(v13) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 0, "pressure quality check for good wet barometer mitigation should be applied,now,%f,lastUnknownToGoodSatifiedTimestamp,%f", COERCE_DOUBLE(&v14), v13);
        v12 = (uint8_t *)v11;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLPressureQualityController::checkForGoodWetBarometerMitigationShouldBeApplied(const int) const", "%s\n", v11);
        if (v12 != buf)
          free(v12);
      }
      Current = 1.79769313e308;
    }
    *(double *)(a1 + 72) = Current;
  }
  return v5;
}

BOOL sub_100897FC8(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  int v5;
  unsigned __int16 *v6;
  unint64_t v7;
  int v8;

  v1 = *(unsigned __int16 *)(a1 + 22);
  if (*(unsigned __int16 *)(a1 + 22) <= 1u)
    v2 = 1;
  else
    v2 = *(unsigned __int16 *)(a1 + 22);
  if (v2 > v1)
    return 0;
  v5 = 0;
  v6 = (unsigned __int16 *)(a1 + 20);
  v7 = v1 - 1;
  do
  {
    if (*(float *)sub_1004784C4(v6, v7) >= 275.0)
      ++v5;
    v8 = *(unsigned __int16 *)(a1 + 22);
    if (v8 <= 1)
      v8 = 1;
    --v7;
  }
  while ((int)v7 + 2 > v8);
  return v5 != 0;
}

BOOL sub_100898060(uint64_t a1)
{
  uint64_t v1;
  int v2;
  unsigned int v4;
  unsigned __int16 *v5;
  unint64_t v6;
  unsigned int v7;

  v1 = *(unsigned __int16 *)(a1 + 22);
  if (*(unsigned __int16 *)(a1 + 22) <= 5u)
    v2 = 5;
  else
    v2 = *(unsigned __int16 *)(a1 + 22);
  if (v2 - 5 >= v1)
    return 0;
  v4 = 0;
  v5 = (unsigned __int16 *)(a1 + 20);
  v6 = v1 - 1;
  do
  {
    if (*(float *)sub_1004784C4(v5, v6) < 275.0)
      ++v4;
    v7 = *(unsigned __int16 *)(a1 + 22);
    if (v7 <= 5)
      v7 = 5;
    --v6;
  }
  while ((int)v6 + 2 > (int)(v7 - 4));
  return v4 > 2;
}

BOOL sub_10089810C(uint64_t a1)
{
  uint64_t v1;
  int v2;
  unsigned int v4;
  unsigned __int16 *v5;
  unint64_t v6;
  int v7;
  unsigned int v8;

  v1 = *(unsigned __int16 *)(a1 + 22);
  if (*(unsigned __int16 *)(a1 + 22) <= 5u)
    v2 = 5;
  else
    v2 = *(unsigned __int16 *)(a1 + 22);
  if (v2 - 5 >= v1)
    return 0;
  v4 = 0;
  v5 = (unsigned __int16 *)(a1 + 20);
  v6 = v1 - 1;
  do
  {
    v7 = *(float *)sub_1004784C4(v5, v6) > *(float *)(a1 + 80) && *(float *)sub_1004784C4(v5, v6) < 275.0;
    v4 += v7;
    v8 = *(unsigned __int16 *)(a1 + 22);
    if (v8 <= 5)
      v8 = 5;
    --v6;
  }
  while ((int)v6 + 2 > (int)(v8 - 4));
  return v4 > 2;
}

void sub_1008981E0(uint64_t a1)
{
  CFAbsoluteTime Current;
  NSObject *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  CFAbsoluteTime v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  uint8_t buf[4];
  CFAbsoluteTime v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;

  Current = CFAbsoluteTimeGetCurrent();
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 56) = -1082130432;
  if (qword_10229FD70 != -1)
    dispatch_once(&qword_10229FD70, &stru_102159910);
  v3 = qword_10229FD78;
  if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_DEBUG))
  {
    v4 = *(unsigned __int8 *)(a1 + 60);
    v5 = *(unsigned __int8 *)(a1 + 16);
    *(_DWORD *)buf = 134218496;
    v17 = Current;
    v18 = 1024;
    v19 = v4;
    v20 = 1024;
    v21 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "pressure quality state reset,timestamp,%f,old,%d,new,%d", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_102159910);
    v6 = *(unsigned __int8 *)(a1 + 60);
    v7 = *(unsigned __int8 *)(a1 + 16);
    v10 = 134218496;
    v11 = Current;
    v12 = 1024;
    v13 = v6;
    v14 = 1024;
    v15 = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 2, "pressure quality state reset,timestamp,%f,old,%d,new,%d", COERCE_DOUBLE(&v10), 24);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLPressureQualityController::reset(const EInWorkout *)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  *(_BYTE *)(a1 + 60) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0x7FEFFFFFFFFFFFFFLL;
}

uint64_t sub_1008983EC(uint64_t a1)
{
  int v2;
  float v3;
  NSObject *v4;
  int v5;
  double v6;
  int v8;
  double v9;
  const char *v10;
  uint8_t *v11;
  double v12;
  _DWORD v13[2];
  __int16 v14;
  double v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  double v19;

  *(_QWORD *)a1 = &unk_102159820;
  *(_QWORD *)(a1 + 8) = 10;
  *(_WORD *)(a1 + 16) = 512;
  *(_QWORD *)(a1 + 20) = 0x500000000;
  *(_QWORD *)(a1 + 48) = 3212836864;
  *(_DWORD *)(a1 + 56) = -1082130432;
  *(_BYTE *)(a1 + 60) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0x7FEFFFFFFFFFFFFFLL;
  v2 = sub_100761DF0();
  *(_BYTE *)(a1 + 84) = v2;
  v3 = 54.0;
  if (v2)
    v3 = 35.0;
  *(float *)(a1 + 80) = v3;
  if (qword_10229FD70 != -1)
    dispatch_once(&qword_10229FD70, &stru_102159910);
  v4 = qword_10229FD78;
  if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(unsigned __int8 *)(a1 + 84);
    v6 = *(float *)(a1 + 80);
    *(_DWORD *)buf = 67109376;
    v17 = v5;
    v18 = 2048;
    v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "init pressure quality controller,deviceModelRequiresWetBarometerMitigation,%d,unknownFromGoodThreshold,%f", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_102159910);
    v8 = *(unsigned __int8 *)(a1 + 84);
    v9 = *(float *)(a1 + 80);
    v13[0] = 67109376;
    v13[1] = v8;
    v14 = 2048;
    v15 = v9;
    LODWORD(v12) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 0, "init pressure quality controller,deviceModelRequiresWetBarometerMitigation,%d,unknownFromGoodThreshold,%f", v13, v12);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "CLPressureQualityController::CLPressureQualityController()", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  return a1;
}

uint64_t sub_100898634(uint64_t result, int a2, int a3, float a4)
{
  BOOL v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  if (a4 != -1.0 && a3 != 0)
  {
    v5 = a4 <= 18.0 && a2 <= 0;
    if (!v5 || a3 == 6)
    {
      v7 = *(unsigned __int16 *)(result + 20);
      v8 = *(unsigned __int16 *)(result + 22);
      v9 = *(unsigned int *)(result + 24);
      if (v7 + v8 >= v9)
        v10 = *(unsigned int *)(result + 24);
      else
        v10 = 0;
      *(float *)(result + 20 + 4 * (v7 + v8 - v10) + 8) = a4;
      if (v9 <= v8)
      {
        v11 = v7 + 1;
        if (v11 < v9)
          LOWORD(v9) = 0;
        *(_WORD *)(result + 20) = v11 - v9;
      }
      else
      {
        *(_WORD *)(result + 22) = v8 + 1;
      }
    }
  }
  return result;
}

uint64_t sub_1008986AC(uint64_t a1, int a2, int a3, __int16 a4, float a5)
{
  uint64_t result;
  char v11;
  char v12;

  *(_DWORD *)(a1 + 52) = a3;
  *(float *)(a1 + 48) = a5;
  result = sub_10023195C(a1, 1, (uint64_t)&v12);
  if (a3)
  {
    result = sub_100898634(a1, a2, a3, a5);
    *(_BYTE *)(a1 + 64) |= (a4 & 0x1000) != 0;
    if (*(_WORD *)(a1 + 22))
      return sub_10023195C(a1, 0, (uint64_t)&v11);
  }
  return result;
}

void sub_100898744(id a1)
{
  qword_10229FD78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pressure");
}

void sub_100898770(uint64_t a1)
{
  CFAbsoluteTime Current;
  NSObject *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  CFAbsoluteTime v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  uint8_t buf[4];
  CFAbsoluteTime v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;

  Current = CFAbsoluteTimeGetCurrent();
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a1 + 48);
  if (qword_10229FD70 != -1)
    dispatch_once(&qword_10229FD70, &stru_102159910);
  v3 = qword_10229FD78;
  if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_DEBUG))
  {
    v4 = *(unsigned __int8 *)(a1 + 60);
    v5 = *(unsigned __int8 *)(a1 + 16);
    *(_DWORD *)buf = 134218496;
    v17 = Current;
    v18 = 1024;
    v19 = v4;
    v20 = 1024;
    v21 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "pressure quality state transition,timestamp,%f,old,%d,new,%d", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_102159910);
    v6 = *(unsigned __int8 *)(a1 + 60);
    v7 = *(unsigned __int8 *)(a1 + 16);
    v10 = 134218496;
    v11 = Current;
    v12 = 1024;
    v13 = v6;
    v14 = 1024;
    v15 = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 2, "pressure quality state transition,timestamp,%f,old,%d,new,%d", COERCE_DOUBLE(&v10), 24);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLPressureQualityController::setResult(const T *) [T = CLPressureQualityController::EInWorkout]", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a1 + 16);
}

void sub_100898974(uint64_t a1)
{
  CFAbsoluteTime Current;
  NSObject *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  CFAbsoluteTime v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  uint8_t buf[4];
  CFAbsoluteTime v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;

  Current = CFAbsoluteTimeGetCurrent();
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a1 + 48);
  if (qword_10229FD70 != -1)
    dispatch_once(&qword_10229FD70, &stru_102159910);
  v3 = qword_10229FD78;
  if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_DEBUG))
  {
    v4 = *(unsigned __int8 *)(a1 + 60);
    v5 = *(unsigned __int8 *)(a1 + 16);
    *(_DWORD *)buf = 134218496;
    v17 = Current;
    v18 = 1024;
    v19 = v4;
    v20 = 1024;
    v21 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "pressure quality state transition,timestamp,%f,old,%d,new,%d", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_102159910);
    v6 = *(unsigned __int8 *)(a1 + 60);
    v7 = *(unsigned __int8 *)(a1 + 16);
    v10 = 134218496;
    v11 = Current;
    v12 = 1024;
    v13 = v6;
    v14 = 1024;
    v15 = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 2, "pressure quality state transition,timestamp,%f,old,%d,new,%d", COERCE_DOUBLE(&v10), 24);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLPressureQualityController::setResult(const T *) [T = CLPressureQualityController::ETransition]", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a1 + 16);
}

void sub_100899064(id a1)
{
  NSObject *v1;
  const char *v2;
  uint8_t *v3;
  _WORD v4[8];
  uint8_t buf[1640];

  if (qword_1022A0150 != -1)
    dispatch_once(&qword_1022A0150, &stru_102159998);
  v1 = qword_1022A0158;
  if (os_log_type_enabled((os_log_t)qword_1022A0158, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "xpc interruption handler", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0150 != -1)
      dispatch_once(&qword_1022A0150, &stru_102159998);
    v4[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0158, 1, "xpc interruption handler", v4, 2);
    v3 = (uint8_t *)v2;
    sub_100512490("Generic", 1, 0, 2, "-[CLGatheringXPCServer listener:shouldAcceptNewConnection:]_block_invoke", "%s\n", v2);
    if (v3 != buf)
      free(v3);
  }
}

void sub_1008991E8(id a1)
{
  NSObject *v1;
  const char *v2;
  uint8_t *v3;
  _WORD v4[8];
  uint8_t buf[1640];

  if (qword_1022A0150 != -1)
    dispatch_once(&qword_1022A0150, &stru_102159998);
  v1 = qword_1022A0158;
  if (os_log_type_enabled((os_log_t)qword_1022A0158, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "xpc invalidation handler", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0150 != -1)
      dispatch_once(&qword_1022A0150, &stru_102159998);
    v4[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0158, 1, "xpc invalidation handler", v4, 2);
    v3 = (uint8_t *)v2;
    sub_100512490("Generic", 1, 0, 2, "-[CLGatheringXPCServer listener:shouldAcceptNewConnection:]_block_invoke", "%s\n", v2);
    if (v3 != buf)
      free(v3);
  }
}

uint64_t sub_10089953C(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  id v9;
  uint8_t buf[4];
  id v11;

  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "fetchAllBleAdvertisements");
  if (qword_1022A0150 != -1)
    dispatch_once(&qword_1022A0150, &stru_102159998);
  v3 = qword_1022A0158;
  if (os_log_type_enabled((os_log_t)qword_1022A0158, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v11 = objc_msgSend(v2, "count");
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "fetch'd %zu advertisements from volatile store", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0150 != -1)
      dispatch_once(&qword_1022A0150, &stru_102159998);
    v5 = qword_1022A0158;
    v8 = 134217984;
    v9 = objc_msgSend(v2, "count");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v5, 0, "fetch'd %zu advertisements from volatile store", (size_t)&v8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "-[CLGatheringXPCServer fetchAdvertisementsWithCompletion:]_block_invoke", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t sub_1008998EC(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id v4;
  __n128 v5;
  uint64_t v8;
  id v9;
  const char *v10;
  uint8_t *v11;
  double v12;
  uint64_t v13;
  NSErrorUserInfoKey v14;
  const __CFString *v15;
  int v16;
  id v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  double v21;
  uint8_t buf[4];
  id v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  double v27;

  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "fetchAllBleAdvertisements");
  v12 = 0.0;
  v13 = 0;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "fetchFromStatisticsNumberOfAdvs:accumulatedTime:", &v13, &v12);
  if (qword_1022A0150 != -1)
    dispatch_once(&qword_1022A0150, &stru_102159998);
  v3 = qword_1022A0158;
  if (os_log_type_enabled((os_log_t)qword_1022A0158, OS_LOG_TYPE_DEFAULT))
  {
    v4 = objc_msgSend(v2, "count");
    *(_DWORD *)buf = 134218496;
    v23 = v4;
    v24 = 2048;
    v25 = v13;
    v26 = 2048;
    v27 = v12;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "fetch'd %zu advertisements from volatile store, N %zu, T %.1f", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0150 != -1)
      dispatch_once(&qword_1022A0150, &stru_102159998);
    v8 = qword_1022A0158;
    v9 = objc_msgSend(v2, "count");
    v16 = 134218496;
    v17 = v9;
    v18 = 2048;
    v19 = v13;
    v20 = 2048;
    v21 = v12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, 0, "fetch'd %zu advertisements from volatile store, N %zu, T %.1f", (size_t)&v16, 32, v12);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "-[CLGatheringXPCServer fetchAdvertisementsDetailedWithCompletion:]_block_invoke", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  v5.n128_f64[0] = v12;
  if (v12 == 0.0 && v13 != 0)
  {
    v14 = NSLocalizedDescriptionKey;
    v15 = CFSTR("received advertisements without scanning?");
    +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v15, &v14, 1, v12));
    v5.n128_f64[0] = v12;
  }
  return (*(uint64_t (**)(__n128))(*(_QWORD *)(a1 + 40) + 16))(v5);
}

uint64_t sub_100899DB4(_QWORD *a1)
{
  NSErrorUserInfoKey v3;
  const __CFString *v4;

  if ((objc_msgSend(*(id *)(a1[4] + 24), "getEnablementStatus") & 1) != 0)
  {
    objc_msgSend(*(id *)(a1[4] + 24), "stop");
    objc_msgSend(*(id *)(a1[4] + 40), "overrideWithConfiguration:", a1[6]);
    objc_msgSend(*(id *)(a1[4] + 24), "run");
    return (*(uint64_t (**)(_QWORD, _QWORD))(a1[5] + 16))(a1[5], 0);
  }
  else
  {
    v3 = NSLocalizedDescriptionKey;
    v4 = CFSTR("CLGatheringBluetoothClient disabled");
    +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v4, &v3, 1));
    return (*(uint64_t (**)(void))(a1[5] + 16))();
  }
}

void sub_100899EE4(id a1)
{
  qword_1022A0158 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gathering");
}

long double sub_100899F7C(uint64_t a1, float64x2_t *a2)
{
  NSObject *v3;
  float64_t v4;
  float64_t v5;
  float64_t v6;
  float64_t v7;
  float64x2_t v8;
  NSObject *v9;
  float64_t v11;
  float64_t v12;
  float64_t v13;
  float64_t v14;
  const char *v15;
  uint8_t *v16;
  const char *v17;
  uint8_t *v18;
  uint64_t v19;
  int v20;
  float64_t v21;
  __int16 v22;
  float64_t v23;
  __int16 v24;
  float64_t v25;
  __int16 v26;
  float64_t v27;
  uint8_t buf[4];
  float64_t v29;
  __int16 v30;
  float64_t v31;
  __int16 v32;
  float64_t v33;
  __int16 v34;
  float64_t v35;

  if (qword_10229FC40 != -1)
    dispatch_once(&qword_10229FC40, &stru_1021599D8);
  v3 = qword_10229FC48;
  if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_DEFAULT))
  {
    v5 = a2->f64[0];
    v4 = a2->f64[1];
    v6 = a2[1].f64[0];
    v7 = a2[1].f64[1];
    *(_DWORD *)buf = 134284289;
    v29 = v4;
    v30 = 2049;
    v31 = v5;
    v32 = 2049;
    v33 = v6;
    v34 = 2049;
    v35 = v7;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "CLMobility::SteadinessModelBalance::Features,intermediateBoutsAsymmetryPercentageMedian,%{private}.3f,intermediateBoutsAsymmetryPercentageCv,%{private}.3f,intermediateBoutsDoubleSupportPercentageMedian,%{private}.3f,intermediateBoutsDoubleSupportPercentageStd,%{private}.3f", buf, 0x2Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC40 != -1)
      dispatch_once(&qword_10229FC40, &stru_1021599D8);
    v12 = a2->f64[0];
    v11 = a2->f64[1];
    v13 = a2[1].f64[0];
    v14 = a2[1].f64[1];
    v20 = 134284289;
    v21 = v11;
    v22 = 2049;
    v23 = v12;
    v24 = 2049;
    v25 = v13;
    v26 = 2049;
    v27 = v14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 0, "CLMobility::SteadinessModelBalance::Features,intermediateBoutsAsymmetryPercentageMedian,%{private}.3f,intermediateBoutsAsymmetryPercentageCv,%{private}.3f,intermediateBoutsDoubleSupportPercentageMedian,%{private}.3f,intermediateBoutsDoubleSupportPercentageStd,%{private}.3f", &v20, 42);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "double CLMobility::SteadinessModelBalance::runSteadinessModel(const Features &) const", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  v8 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*a2, v8), (int32x4_t)vceqq_f64(a2[1], v8)))) & 1) == 0)
    return sub_1009FF680(a2);
  if (qword_10229FC40 != -1)
    dispatch_once(&qword_10229FC40, &stru_1021599D8);
  v9 = qword_10229FC48;
  if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Rejection: CLMobilitySteadinessModelBalance missing required feature inputs", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC40 != -1)
      dispatch_once(&qword_10229FC40, &stru_1021599D8);
    LOWORD(v20) = 0;
    LODWORD(v19) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 1, "Rejection: CLMobilitySteadinessModelBalance missing required feature inputs", &v20, v19);
    v18 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 2, "double CLMobility::SteadinessModelBalance::runSteadinessModel(const Features &) const", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
  return -INFINITY;
}

double sub_10089A2D0(double a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  double *v9;
  double *v10;
  double v11;
  int v13;
  int v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  int v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  NSObject *v36;
  double v37;
  const char *v39;
  char *v40;
  void *v41;
  char *v42;
  char *v43;
  void *__p;
  char *v45;
  char *v46;
  void *v47;
  double *v48;
  uint64_t v49;
  int v50;
  double v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  _BYTE buf[12];
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v64;

  v47 = 0;
  v48 = 0;
  v49 = 0;
  v4 = *a3;
  v5 = a3[1];
  *(_QWORD *)buf = &v47;
  if (v4 == v5)
  {
    __p = 0;
    v45 = 0;
    v46 = 0;
    v41 = 0;
    v42 = 0;
    v43 = 0;
  }
  else
  {
    v6 = a1 + -2419200.0;
    do
    {
      v7 = *(double *)(v4 + 8);
      if (v7 < a1 && v7 >= v6)
        sub_1007264EC((void ***)buf, (_OWORD *)v4);
      v4 += 224;
    }
    while (v4 != v5);
    v9 = (double *)v47;
    v10 = v48;
    __p = 0;
    v45 = 0;
    v46 = 0;
    v41 = 0;
    v42 = 0;
    v43 = 0;
    if (v47 != v48)
    {
      do
      {
        v11 = v9[2] - v9[1];
        if (v11 <= 600.0 && v11 > 60.0)
        {
          v13 = *((_DWORD *)v9 + 13);
          if (v13)
            v14 = 42;
          else
            v14 = -1;
          if ((v14 & *((_DWORD *)v9 + 49)) == 0)
          {
            v15 = v45;
            if (v45 >= v46)
            {
              v17 = (char *)__p;
              v18 = (v45 - (_BYTE *)__p) >> 3;
              v19 = v18 + 1;
              if ((unint64_t)(v18 + 1) >> 61)
                goto LABEL_75;
              v20 = v46 - (_BYTE *)__p;
              if ((v46 - (_BYTE *)__p) >> 2 > v19)
                v19 = v20 >> 2;
              if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
                v21 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v21 = v19;
              if (v21)
              {
                v22 = (char *)sub_10025E6A0((uint64_t)&v46, v21);
                v17 = (char *)__p;
                v15 = v45;
              }
              else
              {
                v22 = 0;
              }
              v23 = &v22[8 * v18];
              *(double *)v23 = v9[15];
              v16 = v23 + 8;
              while (v15 != v17)
              {
                v24 = *((_QWORD *)v15 - 1);
                v15 -= 8;
                *((_QWORD *)v23 - 1) = v24;
                v23 -= 8;
              }
              __p = v23;
              v45 = v16;
              v46 = &v22[8 * v21];
              if (v17)
                operator delete(v17);
            }
            else
            {
              *(double *)v45 = v9[15];
              v16 = v15 + 8;
            }
            v45 = v16;
            v13 = *((_DWORD *)v9 + 13);
          }
          if (v13)
            v25 = 42;
          else
            v25 = -1;
          if ((v25 & *((_DWORD *)v9 + 51)) == 0)
          {
            v26 = v42;
            if (v42 >= v43)
            {
              v28 = (char *)v41;
              v29 = (v42 - (_BYTE *)v41) >> 3;
              v30 = v29 + 1;
              if ((unint64_t)(v29 + 1) >> 61)
LABEL_75:
                sub_100259694();
              v31 = v43 - (_BYTE *)v41;
              if ((v43 - (_BYTE *)v41) >> 2 > v30)
                v30 = v31 >> 2;
              if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
                v32 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v32 = v30;
              if (v32)
              {
                v33 = (char *)sub_10025E6A0((uint64_t)&v43, v32);
                v28 = (char *)v41;
                v26 = v42;
              }
              else
              {
                v33 = 0;
              }
              v34 = &v33[8 * v29];
              *(double *)v34 = v9[17];
              v27 = v34 + 8;
              while (v26 != v28)
              {
                v35 = *((_QWORD *)v26 - 1);
                v26 -= 8;
                *((_QWORD *)v34 - 1) = v35;
                v34 -= 8;
              }
              v41 = v34;
              v42 = v27;
              v43 = &v33[8 * v32];
              if (v28)
                operator delete(v28);
            }
            else
            {
              *(double *)v42 = v9[17];
              v27 = v26 + 8;
            }
            v42 = v27;
          }
        }
        v9 += 28;
      }
      while (v9 != v10);
    }
  }
  if (qword_10229FC40 != -1)
    dispatch_once(&qword_10229FC40, &stru_1021599D8);
  v36 = qword_10229FC48;
  if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134349824;
    *(double *)&buf[4] = a1;
    v59 = 2050;
    v60 = 0x6DB6DB6DB6DB6DB7 * (((char *)v48 - (_BYTE *)v47) >> 5);
    v61 = 2050;
    v62 = (v45 - (_BYTE *)__p) >> 3;
    v63 = 2050;
    v64 = (v42 - (_BYTE *)v41) >> 3;
    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "SteadinessModelBalance::extractFeatures,classificationTime,%{public}.2f,numBouts,%{public}lu,doubleSupportPercentages,%{public}lu,asymmetryPercentages,%{public}lu", buf, 0x2Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC40 != -1)
      dispatch_once(&qword_10229FC40, &stru_1021599D8);
    v50 = 134349824;
    v51 = a1;
    v52 = 2050;
    v53 = 0x6DB6DB6DB6DB6DB7 * (((char *)v48 - (_BYTE *)v47) >> 5);
    v54 = 2050;
    v55 = (v45 - (_BYTE *)__p) >> 3;
    v56 = 2050;
    v57 = (v42 - (_BYTE *)v41) >> 3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 2, "SteadinessModelBalance::extractFeatures,classificationTime,%{public}.2f,numBouts,%{public}lu,doubleSupportPercentages,%{public}lu,asymmetryPercentages,%{public}lu", &v50, 42);
    v40 = (char *)v39;
    sub_100512490("Generic", 1, 0, 2, "Features CLMobility::SteadinessModelBalance::extractFeatures(CFAbsoluteTime, const std::vector<BoutMetrics> &) const", "%s\n", v39);
    if (v40 != buf)
      free(v40);
  }
  sub_101082068((uint64_t *)&v41);
  v37 = sub_101081E44((double **)&v41);
  sub_101082068((uint64_t *)&__p);
  sub_101081D90((double **)&__p);
  if (v41)
  {
    v42 = (char *)v41;
    operator delete(v41);
  }
  if (__p)
  {
    v45 = (char *)__p;
    operator delete(__p);
  }
  if (v47)
  {
    v48 = (double *)v47;
    operator delete(v47);
  }
  return v37;
}

void sub_10089A80C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void sub_10089A85C(id a1)
{
  qword_10229FC48 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Steadiness");
}

uint64_t sub_10089A888()
{
  uint64_t result;

  result = qword_102310D28;
  if (qword_102310D28)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)qword_102310D28 + 8))(qword_102310D28);
  return result;
}

void sub_10089A8A4(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;

  if ((byte_102305090 & 1) == 0)
  {
    byte_102305090 = 1;
    v4 = wireless_diagnostics::google::protobuf::internal::VerifyVersion((wireless_diagnostics::google::protobuf::internal *)0x1E9808, 2005000, (int)"/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPPrivateDataCapture.pb.cc", a4);
    sub_10043FA90(v4, v5, v6, v7);
    sub_100DA4728(v8, v9, v10, v11);
    sub_1009F78B0(v12, v13, v14, v15);
    sub_10133CDFC(v16, v17, v18, v19);
    sub_10065E3A8(v20, v21, v22, v23);
    sub_10168CD90(v24, v25, v26, v27);
    sub_100BF9A4C(v28, v29, v30, v31);
    sub_100F36330(v32, v33, v34, v35);
    sub_100ACC690(v36, v37, v38, v39);
    sub_1013AE7E0(v40, v41, v42, v43);
    sub_1011EFDB0(v44, v45, v46, v47);
    sub_1009A3F08(v48, v49, v50, v51);
    sub_100E8E674(v52, v53, v54, v55);
    operator new();
  }
}

uint64_t sub_10089A9C0(_QWORD *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  const char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  const char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  const char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  const char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  const char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  const char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  const char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  const char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  const char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  const char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  const char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  const char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  const char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  const char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  const char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  const char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  const char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  const char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  const char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  const char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  const char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  const char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  const char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  const char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  const char *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  const char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  const char *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  const char *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  const char *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  const char *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  const char *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  const char *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  const char *v236;
  uint64_t result;

  v5 = sub_100443560((uint64_t)a1, a2, a3, a4);
  a1[1] = v5;
  v9 = sub_100444464(v5, v6, v7, v8);
  a1[2] = v9;
  v13 = sub_1004452B0(v9, v10, v11, v12);
  a1[3] = v13;
  v17 = sub_10044D5E4(v13, v14, v15, v16);
  a1[4] = v17;
  v21 = sub_100450DDC(v17, v18, v19, v20);
  a1[5] = v21;
  v25 = sub_100451E54(v21, v22, v23, v24);
  a1[6] = v25;
  v29 = sub_1004556D4(v25, v26, v27, v28);
  a1[7] = v29;
  v33 = sub_100455E14(v29, v30, v31, v32);
  a1[8] = v33;
  v37 = sub_100456318(v33, v34, v35, v36);
  a1[9] = v37;
  v41 = sub_100457A90(v37, v38, v39, v40);
  a1[10] = v41;
  v45 = sub_10045E0C8(v41, v42, v43, v44);
  a1[11] = v45;
  v49 = sub_10045F14C(v45, v46, v47, v48);
  a1[12] = v49;
  v53 = sub_100DBA024(v49, v50, v51, v52);
  a1[13] = v53;
  v57 = sub_100460570(v53, v54, v55, v56);
  a1[14] = v57;
  v61 = sub_100460CC0(v57, v58, v59, v60);
  a1[15] = v61;
  v65 = sub_100463F1C(v61, v62, v63, v64);
  a1[16] = v65;
  v69 = sub_100466118(v65, v66, v67, v68);
  a1[17] = v69;
  v73 = sub_10044D5E4(v69, v70, v71, v72);
  a1[18] = v73;
  v77 = sub_100468728(v73, v74, v75, v76);
  a1[19] = v77;
  v81 = sub_10046A514(v77, v78, v79, v80);
  a1[20] = v81;
  v85 = sub_100458D24(v81, v82, v83, v84);
  a1[21] = v85;
  v89 = sub_10046C1D4(v85, v86, v87, v88);
  a1[22] = v89;
  v93 = sub_10045A468(v89, v90, v91, v92);
  a1[23] = v93;
  v97 = sub_10045C124(v93, v94, v95, v96);
  a1[24] = v97;
  v101 = sub_10045B41C(v97, v98, v99, v100);
  a1[25] = v101;
  v105 = sub_100466AB8(v101, v102, v103, v104);
  a1[26] = v105;
  v109 = sub_100469440(v105, v106, v107, v108);
  a1[27] = v109;
  v113 = sub_10046CE34(v109, v110, v111, v112);
  a1[28] = v113;
  v117 = sub_10046EC5C(v113, v114, v115, v116);
  a1[29] = v117;
  v121 = sub_100471DEC(v117, v118, v119, v120);
  a1[30] = v121;
  v125 = sub_100473640(v121, v122, v123, v124);
  a1[31] = v125;
  v129 = sub_100453D28(v125, v126, v127, v128);
  a1[32] = v129;
  v133 = sub_100474B2C(v129, v130, v131, v132);
  a1[33] = v133;
  v137 = sub_1013B39F8(v133, v134, v135, v136);
  a1[34] = v137;
  v141 = sub_1004759E0(v137, v138, v139, v140);
  a1[35] = v141;
  v145 = sub_100F4A0BC(v141, v142, v143, v144);
  a1[36] = v145;
  v149 = sub_1009F7CA4(v145, v146, v147, v148);
  a1[37] = v149;
  v153 = sub_100BF9E28(v149, v150, v151, v152);
  a1[38] = v153;
  v157 = sub_10168D0F8(v153, v154, v155, v156);
  a1[39] = v157;
  v161 = sub_100ACC984(v157, v158, v159, v160);
  a1[40] = v161;
  v165 = sub_1011F07F8(v161, v162, v163, v164);
  a1[41] = v165;
  v169 = sub_10065E7E0(v165, v166, v167, v168);
  a1[42] = v169;
  v173 = sub_10133D3D0(v169, v170, v171, v172);
  a1[43] = v173;
  v177 = sub_100EA209C(v173, v174, v175, v176);
  a1[44] = v177;
  v181 = sub_1009A61BC(v177, v178, v179, v180);
  a1[45] = v181;
  v185 = sub_1009A681C(v181, v182, v183, v184);
  a1[46] = v185;
  v189 = sub_1009A7014(v185, v186, v187, v188);
  a1[47] = v189;
  v193 = sub_1009A77E8(v189, v190, v191, v192);
  a1[48] = v193;
  v197 = sub_1009A7E34(v193, v194, v195, v196);
  a1[49] = v197;
  v201 = sub_1009A8B78(v197, v198, v199, v200);
  a1[50] = v201;
  v205 = sub_1009A92B8(v201, v202, v203, v204);
  a1[51] = v205;
  v209 = sub_1009A9A88(v205, v206, v207, v208);
  a1[52] = v209;
  v213 = sub_1009AA59C(v209, v210, v211, v212);
  a1[53] = v213;
  v217 = sub_1009AAD30(v213, v214, v215, v216);
  a1[54] = v217;
  v221 = sub_1009AB4AC(v217, v218, v219, v220);
  a1[55] = v221;
  v225 = sub_1009ABA1C(v221, v222, v223, v224);
  a1[56] = v225;
  v229 = sub_1009AC040(v225, v226, v227, v228);
  a1[57] = v229;
  v233 = sub_1009AC768(v229, v230, v231, v232);
  a1[58] = v233;
  result = sub_1009ACF08(v233, v234, v235, v236);
  a1[59] = result;
  return result;
}

void sub_10089ABB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _DWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  _BYTE v127[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v127, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPPrivateDataCapture.pb.cc", 2535);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v127, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v126, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v127);
  }
  v5 = *(_DWORD *)(a2 + 488);
  if ((_BYTE)v5)
  {
    if ((v5 & 1) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 1u;
      v6 = *(_QWORD *)(a1 + 8);
      if (!v6)
        operator new();
      v7 = *(_QWORD *)(a2 + 8);
      if (!v7)
        v7 = *(_QWORD *)(qword_102310D28 + 8);
      sub_100443310(v6, v7);
      v5 = *(_DWORD *)(a2 + 488);
    }
    if ((v5 & 2) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 2u;
      v8 = *(_QWORD *)(a1 + 16);
      if (!v8)
        operator new();
      v9 = *(_QWORD *)(a2 + 16);
      if (!v9)
        v9 = *(_QWORD *)(qword_102310D28 + 16);
      sub_100444214(v8, v9);
      v5 = *(_DWORD *)(a2 + 488);
    }
    if ((v5 & 4) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 4u;
      v10 = *(_QWORD *)(a1 + 24);
      if (!v10)
        operator new();
      v11 = *(_QWORD *)(a2 + 24);
      if (!v11)
        v11 = *(_QWORD *)(qword_102310D28 + 24);
      sub_100445064(v10, v11);
      v5 = *(_DWORD *)(a2 + 488);
    }
    if ((v5 & 8) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 8u;
      v12 = *(_QWORD *)(a1 + 32);
      if (!v12)
        operator new();
      v13 = *(_QWORD *)(a2 + 32);
      if (!v13)
        v13 = *(_QWORD *)(qword_102310D28 + 32);
      sub_10044D074(v12, v13);
      v5 = *(_DWORD *)(a2 + 488);
    }
    if ((v5 & 0x10) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 0x10u;
      v14 = *(_QWORD *)(a1 + 40);
      if (!v14)
        operator new();
      v15 = *(_QWORD *)(a2 + 40);
      if (!v15)
        v15 = *(_QWORD *)(qword_102310D28 + 40);
      sub_100450B84(v14, v15);
      v5 = *(_DWORD *)(a2 + 488);
    }
    if ((v5 & 0x20) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 0x20u;
      v16 = *(_QWORD *)(a1 + 48);
      if (!v16)
        operator new();
      v17 = *(_QWORD *)(a2 + 48);
      if (!v17)
        v17 = *(_QWORD *)(qword_102310D28 + 48);
      sub_100451C04(v16, v17);
      v5 = *(_DWORD *)(a2 + 488);
    }
    if ((v5 & 0x40) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 0x40u;
      v18 = *(_QWORD *)(a1 + 56);
      if (!v18)
        operator new();
      v19 = *(_QWORD *)(a2 + 56);
      if (!v19)
        v19 = *(_QWORD *)(qword_102310D28 + 56);
      sub_10045547C(v18, v19);
      v5 = *(_DWORD *)(a2 + 488);
    }
    if ((v5 & 0x80) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 0x80u;
      v20 = *(_QWORD *)(a1 + 64);
      if (!v20)
        operator new();
      v21 = *(_QWORD *)(a2 + 64);
      if (!v21)
        v21 = *(_QWORD *)(qword_102310D28 + 64);
      sub_100455D24(v20, v21);
      v5 = *(_DWORD *)(a2 + 488);
    }
  }
  if ((v5 & 0xFF00) != 0)
  {
    if ((v5 & 0x100) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 0x100u;
      v22 = *(_QWORD *)(a1 + 72);
      if (!v22)
        operator new();
      v23 = *(_QWORD *)(a2 + 72);
      if (!v23)
        v23 = *(_QWORD *)(qword_102310D28 + 72);
      sub_1004560EC(v22, v23);
      v5 = *(_DWORD *)(a2 + 488);
    }
    if ((v5 & 0x200) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 0x200u;
      v24 = *(_QWORD *)(a1 + 80);
      if (!v24)
        operator new();
      v25 = *(_QWORD *)(a2 + 80);
      if (!v25)
        v25 = *(_QWORD *)(qword_102310D28 + 80);
      sub_100457830(v24, v25);
      v5 = *(_DWORD *)(a2 + 488);
    }
    if ((v5 & 0x400) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 0x400u;
      v26 = *(_QWORD *)(a1 + 88);
      if (!v26)
        operator new();
      v27 = *(_QWORD *)(a2 + 88);
      if (!v27)
        v27 = *(_QWORD *)(qword_102310D28 + 88);
      sub_10045DCB8(v26, v27);
      v5 = *(_DWORD *)(a2 + 488);
    }
    if ((v5 & 0x800) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 0x800u;
      v28 = *(_QWORD *)(a1 + 96);
      if (!v28)
        operator new();
      v29 = *(_QWORD *)(a2 + 96);
      if (!v29)
        v29 = *(_QWORD *)(qword_102310D28 + 96);
      sub_10045EF70(v28, v29);
      v5 = *(_DWORD *)(a2 + 488);
    }
    if ((v5 & 0x1000) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 0x1000u;
      v30 = *(_QWORD *)(a1 + 104);
      if (!v30)
        operator new();
      v31 = *(_QWORD *)(a2 + 104);
      if (!v31)
        v31 = *(_QWORD *)(qword_102310D28 + 104);
      sub_100DB9B00(v30, v31);
      v5 = *(_DWORD *)(a2 + 488);
    }
    if ((v5 & 0x2000) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 0x2000u;
      v32 = *(_QWORD *)(a1 + 112);
      if (!v32)
        operator new();
      v33 = *(_QWORD *)(a2 + 112);
      if (!v33)
        v33 = *(_QWORD *)(qword_102310D28 + 112);
      sub_100460320(v32, v33);
      v5 = *(_DWORD *)(a2 + 488);
    }
    if ((v5 & 0x4000) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 0x4000u;
      v34 = *(_QWORD *)(a1 + 120);
      if (!v34)
        operator new();
      v35 = *(_QWORD *)(a2 + 120);
      if (!v35)
        v35 = *(_QWORD *)(qword_102310D28 + 120);
      sub_100460B5C(v34, v35);
      v5 = *(_DWORD *)(a2 + 488);
    }
    if ((v5 & 0x8000) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 0x8000u;
      v36 = *(_QWORD *)(a1 + 128);
      if (!v36)
        operator new();
      v37 = *(_QWORD *)(a2 + 128);
      if (!v37)
        v37 = *(_QWORD *)(qword_102310D28 + 128);
      sub_100463CA0(v36, v37);
      v5 = *(_DWORD *)(a2 + 488);
    }
  }
  if ((v5 & 0xFF0000) != 0)
  {
    if ((v5 & 0x10000) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 0x10000u;
      v38 = *(_QWORD *)(a1 + 136);
      if (!v38)
        operator new();
      v39 = *(_QWORD *)(a2 + 136);
      if (!v39)
        v39 = *(_QWORD *)(qword_102310D28 + 136);
      sub_100465E74(v38, v39);
      v5 = *(_DWORD *)(a2 + 488);
    }
    if ((v5 & 0x20000) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 0x20000u;
      v40 = *(_QWORD *)(a1 + 144);
      if (!v40)
        operator new();
      v41 = *(_QWORD *)(a2 + 144);
      if (!v41)
        v41 = *(_QWORD *)(qword_102310D28 + 144);
      sub_10044D074(v40, v41);
      v5 = *(_DWORD *)(a2 + 488);
    }
    if ((v5 & 0x40000) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 0x40000u;
      v42 = *(_QWORD *)(a1 + 152);
      if (!v42)
        operator new();
      v43 = *(_QWORD *)(a2 + 152);
      if (!v43)
        v43 = *(_QWORD *)(qword_102310D28 + 152);
      sub_1004683BC(v42, v43);
      v5 = *(_DWORD *)(a2 + 488);
    }
    if ((v5 & 0x80000) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 0x80000u;
      v44 = *(_QWORD *)(a1 + 160);
      if (!v44)
        operator new();
      v45 = *(_QWORD *)(a2 + 160);
      if (!v45)
        v45 = *(_QWORD *)(qword_102310D28 + 160);
      sub_10046A3A4(v44, v45);
      v5 = *(_DWORD *)(a2 + 488);
    }
    if ((v5 & 0x100000) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 0x100000u;
      v46 = *(_QWORD *)(a1 + 168);
      if (!v46)
        operator new();
      v47 = *(_QWORD *)(a2 + 168);
      if (!v47)
        v47 = *(_QWORD *)(qword_102310D28 + 168);
      sub_100458AD0(v46, v47);
      v5 = *(_DWORD *)(a2 + 488);
    }
    if ((v5 & 0x200000) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 0x200000u;
      v48 = *(_QWORD *)(a1 + 176);
      if (!v48)
        operator new();
      v49 = *(_QWORD *)(a2 + 176);
      if (!v49)
        v49 = *(_QWORD *)(qword_102310D28 + 176);
      sub_10046BEB8(v48, v49);
      v5 = *(_DWORD *)(a2 + 488);
    }
    if ((v5 & 0x400000) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 0x400000u;
      v50 = *(_QWORD *)(a1 + 184);
      if (!v50)
        operator new();
      v51 = *(_QWORD *)(a2 + 184);
      if (!v51)
        v51 = *(_QWORD *)(qword_102310D28 + 184);
      sub_10045A204(v50, v51);
      v5 = *(_DWORD *)(a2 + 488);
    }
    if ((v5 & 0x800000) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 0x800000u;
      v52 = *(_QWORD *)(a1 + 192);
      if (!v52)
        operator new();
      v53 = *(_QWORD *)(a2 + 192);
      if (!v53)
        v53 = *(_QWORD *)(qword_102310D28 + 192);
      sub_10045BD9C(v52, v53);
      v5 = *(_DWORD *)(a2 + 488);
    }
  }
  if (HIBYTE(v5))
  {
    if ((v5 & 0x1000000) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 0x1000000u;
      v54 = *(_QWORD *)(a1 + 200);
      if (!v54)
        operator new();
      v55 = *(_QWORD *)(a2 + 200);
      if (!v55)
        v55 = *(_QWORD *)(qword_102310D28 + 200);
      sub_10045B0B8(v54, v55);
      v5 = *(_DWORD *)(a2 + 488);
    }
    if ((v5 & 0x2000000) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 0x2000000u;
      v56 = *(_QWORD *)(a1 + 208);
      if (!v56)
        operator new();
      v57 = *(_QWORD *)(a2 + 208);
      if (!v57)
        v57 = *(_QWORD *)(qword_102310D28 + 208);
      sub_100466864(v56, v57);
      v5 = *(_DWORD *)(a2 + 488);
    }
    if ((v5 & 0x4000000) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 0x4000000u;
      v58 = *(_QWORD *)(a1 + 216);
      if (!v58)
        operator new();
      v59 = *(_QWORD *)(a2 + 216);
      if (!v59)
        v59 = *(_QWORD *)(qword_102310D28 + 216);
      sub_1004691E4(v58, v59);
      v5 = *(_DWORD *)(a2 + 488);
    }
    if ((v5 & 0x8000000) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 0x8000000u;
      v60 = *(_QWORD *)(a1 + 224);
      if (!v60)
        operator new();
      v61 = *(_QWORD *)(a2 + 224);
      if (!v61)
        v61 = *(_QWORD *)(qword_102310D28 + 224);
      sub_10046CCD4(v60, v61);
      v5 = *(_DWORD *)(a2 + 488);
    }
    if ((v5 & 0x10000000) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 0x10000000u;
      v62 = *(_QWORD *)(a1 + 232);
      if (!v62)
        operator new();
      v63 = *(_QWORD *)(a2 + 232);
      if (!v63)
        v63 = *(_QWORD *)(qword_102310D28 + 232);
      sub_10046E904(v62, v63);
      v5 = *(_DWORD *)(a2 + 488);
    }
    if ((v5 & 0x20000000) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 0x20000000u;
      v64 = *(_QWORD *)(a1 + 240);
      if (!v64)
        operator new();
      v65 = *(_QWORD *)(a2 + 240);
      if (!v65)
        v65 = *(_QWORD *)(qword_102310D28 + 240);
      sub_100471B6C(v64, v65);
      v5 = *(_DWORD *)(a2 + 488);
    }
    if ((v5 & 0x40000000) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 0x40000000u;
      v66 = *(_QWORD *)(a1 + 248);
      if (!v66)
        operator new();
      v67 = *(_QWORD *)(a2 + 248);
      if (!v67)
        v67 = *(_QWORD *)(qword_102310D28 + 248);
      sub_100473378(v66, v67);
      v5 = *(_DWORD *)(a2 + 488);
    }
    if ((v5 & 0x80000000) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 0x80000000;
      v68 = *(_QWORD *)(a1 + 256);
      if (!v68)
        operator new();
      v69 = *(_QWORD *)(a2 + 256);
      if (!v69)
        v69 = *(_QWORD *)(qword_102310D28 + 256);
      sub_100453AD4(v68, v69);
    }
  }
  v70 = *(_DWORD *)(a2 + 492);
  if ((_BYTE)v70)
  {
    if ((v70 & 1) != 0)
    {
      *(_DWORD *)(a1 + 492) |= 1u;
      v71 = *(_QWORD *)(a1 + 264);
      if (!v71)
        operator new();
      v72 = *(_QWORD *)(a2 + 264);
      if (!v72)
        v72 = *(_QWORD *)(qword_102310D28 + 264);
      sub_1004746D8(v71, v72);
      v70 = *(_DWORD *)(a2 + 492);
    }
    if ((v70 & 2) != 0)
    {
      *(_DWORD *)(a1 + 492) |= 2u;
      v73 = *(_QWORD *)(a1 + 272);
      if (!v73)
        operator new();
      v74 = *(_QWORD *)(a2 + 272);
      if (!v74)
        v74 = *(_QWORD *)(qword_102310D28 + 272);
      sub_1013B3618(v73, v74);
      v70 = *(_DWORD *)(a2 + 492);
    }
    if ((v70 & 4) != 0)
    {
      *(_DWORD *)(a1 + 492) |= 4u;
      v75 = *(_QWORD *)(a1 + 280);
      if (!v75)
        operator new();
      v76 = *(_QWORD *)(a2 + 280);
      if (!v76)
        v76 = *(_QWORD *)(qword_102310D28 + 280);
      sub_100475800(v75, v76);
      v70 = *(_DWORD *)(a2 + 492);
    }
    if ((v70 & 8) != 0)
    {
      *(_DWORD *)(a1 + 492) |= 8u;
      v77 = *(_QWORD *)(a1 + 288);
      if (!v77)
        operator new();
      v78 = *(_QWORD *)(a2 + 288);
      if (!v78)
        v78 = *(_QWORD *)(qword_102310D28 + 288);
      sub_100F49CA0(v77, v78);
      v70 = *(_DWORD *)(a2 + 492);
    }
    if ((v70 & 0x10) != 0)
    {
      *(_DWORD *)(a1 + 492) |= 0x10u;
      v79 = *(_QWORD *)(a1 + 296);
      if (!v79)
        operator new();
      v80 = *(_QWORD *)(a2 + 296);
      if (!v80)
        v80 = *(_QWORD *)(qword_102310D28 + 296);
      sub_1009F7A54(v79, v80);
      v70 = *(_DWORD *)(a2 + 492);
    }
    if ((v70 & 0x20) != 0)
    {
      *(_DWORD *)(a1 + 492) |= 0x20u;
      v81 = *(_QWORD *)(a1 + 304);
      if (!v81)
        operator new();
      v82 = *(_QWORD *)(a2 + 304);
      if (!v82)
        v82 = *(_QWORD *)(qword_102310D28 + 304);
      sub_100BF9B24(v81, v82);
      v70 = *(_DWORD *)(a2 + 492);
    }
    if ((v70 & 0x40) != 0)
    {
      *(_DWORD *)(a1 + 492) |= 0x40u;
      v83 = *(_QWORD *)(a1 + 312);
      if (!v83)
        operator new();
      v84 = *(_QWORD *)(a2 + 312);
      if (!v84)
        v84 = *(_QWORD *)(qword_102310D28 + 312);
      sub_10168CF84(v83, v84);
      v70 = *(_DWORD *)(a2 + 492);
    }
    if ((v70 & 0x80) != 0)
    {
      *(_DWORD *)(a1 + 492) |= 0x80u;
      v85 = *(_QWORD *)(a1 + 320);
      if (!v85)
        operator new();
      v86 = *(_QWORD *)(a2 + 320);
      if (!v86)
        v86 = *(_QWORD *)(qword_102310D28 + 320);
      sub_100ACC820(v85, v86);
      v70 = *(_DWORD *)(a2 + 492);
    }
  }
  if ((v70 & 0xFF00) != 0)
  {
    if ((v70 & 0x100) != 0)
    {
      *(_DWORD *)(a1 + 492) |= 0x100u;
      v87 = *(_QWORD *)(a1 + 328);
      if (!v87)
        operator new();
      v88 = *(_QWORD *)(a2 + 328);
      if (!v88)
        v88 = *(_QWORD *)(qword_102310D28 + 328);
      sub_1011F0358(v87, v88);
      v70 = *(_DWORD *)(a2 + 492);
    }
    if ((v70 & 0x200) != 0)
    {
      *(_DWORD *)(a1 + 492) |= 0x200u;
      v89 = *(_QWORD *)(a1 + 336);
      if (!v89)
        operator new();
      v90 = *(_QWORD *)(a2 + 336);
      if (!v90)
        v90 = *(_QWORD *)(qword_102310D28 + 336);
      sub_10065E674(v89, v90);
      v70 = *(_DWORD *)(a2 + 492);
    }
    if ((v70 & 0x400) != 0)
    {
      *(_DWORD *)(a1 + 492) |= 0x400u;
      v91 = *(_QWORD *)(a1 + 344);
      if (!v91)
        operator new();
      v92 = *(_QWORD *)(a2 + 344);
      if (!v92)
        v92 = *(_QWORD *)(qword_102310D28 + 344);
      sub_10133D0D4(v91, v92);
      v70 = *(_DWORD *)(a2 + 492);
    }
    if ((v70 & 0x800) != 0)
    {
      *(_DWORD *)(a1 + 492) |= 0x800u;
      v93 = *(_QWORD *)(a1 + 352);
      if (!v93)
        operator new();
      v94 = *(_QWORD *)(a2 + 352);
      if (!v94)
        v94 = *(_QWORD *)(qword_102310D28 + 352);
      sub_100EA174C(v93, v94);
      v70 = *(_DWORD *)(a2 + 492);
    }
    if ((v70 & 0x1000) != 0)
    {
      *(_DWORD *)(a1 + 492) |= 0x1000u;
      v95 = *(_QWORD *)(a1 + 360);
      if (!v95)
        operator new();
      v96 = *(_QWORD *)(a2 + 360);
      if (!v96)
        v96 = *(_QWORD *)(qword_102310D28 + 360);
      sub_1009A6020(v95, v96);
      v70 = *(_DWORD *)(a2 + 492);
    }
    if ((v70 & 0x2000) != 0)
    {
      *(_DWORD *)(a1 + 492) |= 0x2000u;
      v97 = *(_QWORD *)(a1 + 368);
      if (!v97)
        operator new();
      v98 = *(_QWORD *)(a2 + 368);
      if (!v98)
        v98 = *(_QWORD *)(qword_102310D28 + 368);
      sub_1009A6624(v97, v98);
      v70 = *(_DWORD *)(a2 + 492);
    }
    if ((v70 & 0x4000) != 0)
    {
      *(_DWORD *)(a1 + 492) |= 0x4000u;
      v99 = *(_QWORD *)(a1 + 376);
      if (!v99)
        operator new();
      v100 = *(_QWORD *)(a2 + 376);
      if (!v100)
        v100 = *(_QWORD *)(qword_102310D28 + 376);
      sub_1009A6E8C(v99, v100);
      v70 = *(_DWORD *)(a2 + 492);
    }
    if ((v70 & 0x8000) != 0)
    {
      v101 = *(_DWORD *)(a2 + 480);
      if (!sub_10008D1F0(v101))
        sub_10190DAC0();
      *(_DWORD *)(a1 + 492) |= 0x8000u;
      *(_DWORD *)(a1 + 480) = v101;
      v70 = *(_DWORD *)(a2 + 492);
    }
  }
  if ((v70 & 0xFF0000) != 0)
  {
    if ((v70 & 0x10000) != 0)
    {
      *(_DWORD *)(a1 + 492) |= 0x10000u;
      v102 = *(_QWORD *)(a1 + 384);
      if (!v102)
        operator new();
      v103 = *(_QWORD *)(a2 + 384);
      if (!v103)
        v103 = *(_QWORD *)(qword_102310D28 + 384);
      sub_1009A7640(v102, v103);
      v70 = *(_DWORD *)(a2 + 492);
    }
    if ((v70 & 0x20000) != 0)
    {
      *(_DWORD *)(a1 + 492) |= 0x20000u;
      v104 = *(_QWORD *)(a1 + 392);
      if (!v104)
        operator new();
      v105 = *(_QWORD *)(a2 + 392);
      if (!v105)
        v105 = *(_QWORD *)(qword_102310D28 + 392);
      sub_1009A7C8C(v104, v105);
      v70 = *(_DWORD *)(a2 + 492);
    }
    if ((v70 & 0x40000) != 0)
    {
      *(_DWORD *)(a1 + 492) |= 0x40000u;
      v106 = *(_QWORD *)(a1 + 400);
      if (!v106)
        operator new();
      v107 = *(_QWORD *)(a2 + 400);
      if (!v107)
        v107 = *(_QWORD *)(qword_102310D28 + 400);
      sub_1009A8934(v106, v107);
      v70 = *(_DWORD *)(a2 + 492);
    }
    if ((v70 & 0x80000) != 0)
    {
      *(_DWORD *)(a1 + 492) |= 0x80000u;
      v108 = *(_QWORD *)(a1 + 408);
      if (!v108)
        operator new();
      v109 = *(_QWORD *)(a2 + 408);
      if (!v109)
        v109 = *(_QWORD *)(qword_102310D28 + 408);
      sub_1009A90D8(v108, v109);
      v70 = *(_DWORD *)(a2 + 492);
    }
    if ((v70 & 0x100000) != 0)
    {
      *(_DWORD *)(a1 + 492) |= 0x100000u;
      v110 = *(_QWORD *)(a1 + 416);
      if (!v110)
        operator new();
      v111 = *(_QWORD *)(a2 + 416);
      if (!v111)
        v111 = *(_QWORD *)(qword_102310D28 + 416);
      sub_1009A98C0(v110, v111);
      v70 = *(_DWORD *)(a2 + 492);
    }
    if ((v70 & 0x200000) != 0)
    {
      *(_DWORD *)(a1 + 492) |= 0x200000u;
      v112 = *(_QWORD *)(a1 + 424);
      if (!v112)
        operator new();
      v113 = *(_QWORD *)(a2 + 424);
      if (!v113)
        v113 = *(_QWORD *)(qword_102310D28 + 424);
      sub_1009AA3E8(v112, v113);
      v70 = *(_DWORD *)(a2 + 492);
    }
    if ((v70 & 0x400000) != 0)
    {
      *(_DWORD *)(a1 + 492) |= 0x400000u;
      v114 = *(_DWORD **)(a1 + 432);
      if (!v114)
        operator new();
      v115 = *(_QWORD *)(a2 + 432);
      if (!v115)
        v115 = *(_QWORD *)(qword_102310D28 + 432);
      sub_1009AAAE4(v114, v115);
      v70 = *(_DWORD *)(a2 + 492);
    }
    if ((v70 & 0x800000) != 0)
    {
      *(_DWORD *)(a1 + 492) |= 0x800000u;
      v116 = *(_QWORD *)(a1 + 440);
      if (!v116)
        operator new();
      v117 = *(_QWORD *)(a2 + 440);
      if (!v117)
        v117 = *(_QWORD *)(qword_102310D28 + 440);
      sub_1009AB33C(v116, v117);
      v70 = *(_DWORD *)(a2 + 492);
    }
  }
  if (HIBYTE(v70))
  {
    if ((v70 & 0x1000000) != 0)
    {
      *(_DWORD *)(a1 + 492) |= 0x1000000u;
      v118 = *(_QWORD *)(a1 + 448);
      if (!v118)
        operator new();
      v119 = *(_QWORD *)(a2 + 448);
      if (!v119)
        v119 = *(_QWORD *)(qword_102310D28 + 448);
      sub_1009AB87C(v118, v119);
      v70 = *(_DWORD *)(a2 + 492);
    }
    if ((v70 & 0x2000000) != 0)
    {
      *(_DWORD *)(a1 + 492) |= 0x2000000u;
      v120 = *(_QWORD *)(a1 + 456);
      if (!v120)
        operator new();
      v121 = *(_QWORD *)(a2 + 456);
      if (!v121)
        v121 = *(_QWORD *)(qword_102310D28 + 456);
      sub_1009ABE80(v120, v121);
      v70 = *(_DWORD *)(a2 + 492);
    }
    if ((v70 & 0x4000000) != 0)
    {
      *(_DWORD *)(a1 + 492) |= 0x4000000u;
      v122 = *(_QWORD *)(a1 + 464);
      if (!v122)
        operator new();
      v123 = *(_QWORD *)(a2 + 464);
      if (!v123)
        v123 = *(_QWORD *)(qword_102310D28 + 464);
      sub_1009AC564(v122, v123);
      v70 = *(_DWORD *)(a2 + 492);
    }
    if ((v70 & 0x8000000) != 0)
    {
      *(_DWORD *)(a1 + 492) |= 0x8000000u;
      v124 = *(_QWORD *)(a1 + 472);
      if (!v124)
        operator new();
      v125 = *(_QWORD *)(a2 + 472);
      if (!v125)
        v125 = *(_QWORD *)(qword_102310D28 + 472);
      sub_1009ACD38(v124, v125);
    }
  }
}

void sub_10089C1C8()
{
  operator delete();
}

void sub_10089C514(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  JUMPOUT(0x10089C50CLL);
}

void sub_10089C528(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102159A08;
  sub_100165B34(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

uint64_t sub_10089C558(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = qword_102310D28;
  if (!qword_102310D28)
  {
    sub_10089A8A4(0, a2, a3, a4);
    return qword_102310D28;
  }
  return result;
}

void sub_10089C584()
{
  operator new();
}

uint64_t sub_10089C620(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;

  v1 = result;
  v2 = *(_DWORD *)(result + 488);
  if ((_BYTE)v2)
  {
    if ((v2 & 1) != 0)
    {
      result = *(_QWORD *)(result + 8);
      if (result)
      {
        result = sub_1004435CC(result);
        v2 = *(_DWORD *)(v1 + 488);
      }
    }
    if ((v2 & 2) != 0)
    {
      result = *(_QWORD *)(v1 + 16);
      if (result)
      {
        result = sub_1004444D0(result);
        v2 = *(_DWORD *)(v1 + 488);
      }
    }
    if ((v2 & 4) != 0)
    {
      result = *(_QWORD *)(v1 + 24);
      if (result)
      {
        result = sub_10044531C(result);
        v2 = *(_DWORD *)(v1 + 488);
      }
    }
    if ((v2 & 8) != 0)
    {
      result = *(_QWORD *)(v1 + 32);
      if (result)
      {
        result = sub_10044D660(result);
        v2 = *(_DWORD *)(v1 + 488);
      }
    }
    if ((v2 & 0x10) != 0)
    {
      result = *(_QWORD *)(v1 + 40);
      if (result)
      {
        result = sub_100450E44(result);
        v2 = *(_DWORD *)(v1 + 488);
      }
    }
    if ((v2 & 0x20) != 0)
    {
      result = *(_QWORD *)(v1 + 48);
      if (result)
      {
        result = sub_100451EBC(result);
        v2 = *(_DWORD *)(v1 + 488);
      }
    }
    if ((v2 & 0x40) != 0)
    {
      result = *(_QWORD *)(v1 + 56);
      if (result)
      {
        result = sub_10045573C(result);
        v2 = *(_DWORD *)(v1 + 488);
      }
    }
    if ((v2 & 0x80) != 0)
    {
      result = *(_QWORD *)(v1 + 64);
      if (result)
      {
        result = sub_100455E78(result);
        v2 = *(_DWORD *)(v1 + 488);
      }
    }
  }
  if ((v2 & 0xFF00) != 0)
  {
    if ((v2 & 0x100) != 0)
    {
      result = *(_QWORD *)(v1 + 72);
      if (result)
      {
        result = sub_100456388(result);
        v2 = *(_DWORD *)(v1 + 488);
      }
    }
    if ((v2 & 0x200) != 0)
    {
      result = *(_QWORD *)(v1 + 80);
      if (result)
      {
        result = sub_100457AF8(result);
        v2 = *(_DWORD *)(v1 + 488);
      }
    }
    if ((v2 & 0x400) != 0)
    {
      result = *(_QWORD *)(v1 + 88);
      if (result)
      {
        result = sub_10045E140(result);
        v2 = *(_DWORD *)(v1 + 488);
      }
    }
    if ((v2 & 0x800) != 0)
    {
      result = *(_QWORD *)(v1 + 96);
      if (result)
      {
        result = sub_10045F1BC(result);
        v2 = *(_DWORD *)(v1 + 488);
      }
    }
    if ((v2 & 0x1000) != 0)
    {
      result = *(_QWORD *)(v1 + 104);
      if (result)
      {
        result = sub_100DBA0B0(result);
        v2 = *(_DWORD *)(v1 + 488);
      }
    }
    if ((v2 & 0x2000) != 0)
    {
      result = *(_QWORD *)(v1 + 112);
      if (result)
      {
        result = sub_1004605DC(result);
        v2 = *(_DWORD *)(v1 + 488);
      }
    }
    if ((v2 & 0x4000) != 0)
    {
      result = *(_QWORD *)(v1 + 120);
      if (result)
      {
        result = sub_100460D24(result);
        v2 = *(_DWORD *)(v1 + 488);
      }
    }
    if ((v2 & 0x8000) != 0)
    {
      result = *(_QWORD *)(v1 + 128);
      if (result)
      {
        result = sub_100463F84(result);
        v2 = *(_DWORD *)(v1 + 488);
      }
    }
  }
  if ((v2 & 0xFF0000) != 0)
  {
    if ((v2 & 0x10000) != 0)
    {
      result = *(_QWORD *)(v1 + 136);
      if (result)
      {
        result = sub_100466184(result);
        v2 = *(_DWORD *)(v1 + 488);
      }
    }
    if ((v2 & 0x20000) != 0)
    {
      result = *(_QWORD *)(v1 + 144);
      if (result)
      {
        result = sub_10044D660(result);
        v2 = *(_DWORD *)(v1 + 488);
      }
    }
    if ((v2 & 0x40000) != 0)
    {
      result = *(_QWORD *)(v1 + 152);
      if (result)
      {
        result = sub_10046879C(result);
        v2 = *(_DWORD *)(v1 + 488);
      }
    }
    if ((v2 & 0x80000) != 0)
    {
      result = *(_QWORD *)(v1 + 160);
      if (result)
      {
        result = sub_10046A578(result);
        v2 = *(_DWORD *)(v1 + 488);
      }
    }
    if ((v2 & 0x100000) != 0)
    {
      result = *(_QWORD *)(v1 + 168);
      if (result)
      {
        result = sub_100458D8C(result);
        v2 = *(_DWORD *)(v1 + 488);
      }
    }
    if ((v2 & 0x200000) != 0)
    {
      result = *(_QWORD *)(v1 + 176);
      if (result)
      {
        result = sub_10046C248(result);
        v2 = *(_DWORD *)(v1 + 488);
      }
    }
    if ((v2 & 0x400000) != 0)
    {
      result = *(_QWORD *)(v1 + 184);
      if (result)
      {
        result = sub_10045A4D0(result);
        v2 = *(_DWORD *)(v1 + 488);
      }
    }
    if ((v2 & 0x800000) != 0)
    {
      result = *(_QWORD *)(v1 + 192);
      if (result)
      {
        result = sub_10045C1A0(result);
        v2 = *(_DWORD *)(v1 + 488);
      }
    }
  }
  if (HIBYTE(v2))
  {
    if ((v2 & 0x1000000) != 0)
    {
      result = *(_QWORD *)(v1 + 200);
      if (result)
      {
        result = sub_10045B490(result);
        v2 = *(_DWORD *)(v1 + 488);
      }
    }
    if ((v2 & 0x2000000) != 0)
    {
      result = *(_QWORD *)(v1 + 208);
      if (result)
      {
        result = sub_100466B24(result);
        v2 = *(_DWORD *)(v1 + 488);
      }
    }
    if ((v2 & 0x4000000) != 0)
    {
      result = *(_QWORD *)(v1 + 216);
      if (result)
      {
        result = sub_1004694AC(result);
        v2 = *(_DWORD *)(v1 + 488);
      }
    }
    if ((v2 & 0x8000000) != 0)
    {
      result = *(_QWORD *)(v1 + 224);
      if (result)
      {
        result = sub_10046CEA0(result);
        v2 = *(_DWORD *)(v1 + 488);
      }
    }
    if ((v2 & 0x10000000) != 0)
    {
      result = *(_QWORD *)(v1 + 232);
      if (result)
      {
        result = sub_10046ECD0(result);
        v2 = *(_DWORD *)(v1 + 488);
      }
    }
    if ((v2 & 0x20000000) != 0)
    {
      result = *(_QWORD *)(v1 + 240);
      if (result)
      {
        result = sub_100471E5C(result);
        v2 = *(_DWORD *)(v1 + 488);
      }
    }
    if ((v2 & 0x40000000) != 0)
    {
      result = *(_QWORD *)(v1 + 248);
      if (result)
      {
        result = sub_1004736B0(result);
        v2 = *(_DWORD *)(v1 + 488);
      }
    }
    if ((v2 & 0x80000000) != 0)
    {
      result = *(_QWORD *)(v1 + 256);
      if (result)
        result = sub_100453D90(result);
    }
  }
  v3 = *(_DWORD *)(v1 + 492);
  if ((_BYTE)v3)
  {
    if ((v3 & 1) != 0)
    {
      result = *(_QWORD *)(v1 + 264);
      if (result)
      {
        result = sub_100474BA0(result);
        v3 = *(_DWORD *)(v1 + 492);
      }
    }
    if ((v3 & 2) != 0)
    {
      result = *(_QWORD *)(v1 + 272);
      if (result)
      {
        result = sub_1013B3A74(result);
        v3 = *(_DWORD *)(v1 + 492);
      }
    }
    if ((v3 & 4) != 0)
    {
      result = *(_QWORD *)(v1 + 280);
      if (result)
      {
        result = sub_100475A58(result);
        v3 = *(_DWORD *)(v1 + 492);
      }
    }
    if ((v3 & 8) != 0)
    {
      result = *(_QWORD *)(v1 + 288);
      if (result)
      {
        result = sub_100F4A130(result);
        v3 = *(_DWORD *)(v1 + 492);
      }
    }
    if ((v3 & 0x10) != 0)
    {
      result = *(_QWORD *)(v1 + 296);
      if (result)
      {
        result = sub_1009F7D08(result);
        v3 = *(_DWORD *)(v1 + 492);
      }
    }
    if ((v3 & 0x20) != 0)
    {
      result = *(_QWORD *)(v1 + 304);
      if (result)
      {
        result = sub_100BF9E98(result);
        v3 = *(_DWORD *)(v1 + 492);
      }
    }
    if ((v3 & 0x40) != 0)
    {
      result = *(_QWORD *)(v1 + 312);
      if (result)
      {
        result = (uint64_t)sub_10168D15C((std::string *)result);
        v3 = *(_DWORD *)(v1 + 492);
      }
    }
    if ((v3 & 0x80) != 0)
    {
      result = *(_QWORD *)(v1 + 320);
      if (result)
      {
        result = sub_100ACC9E8(result);
        v3 = *(_DWORD *)(v1 + 492);
      }
    }
  }
  if ((v3 & 0xFF00) != 0)
  {
    if ((v3 & 0x100) != 0)
    {
      result = *(_QWORD *)(v1 + 328);
      if (result)
      {
        result = sub_1011F0870(result);
        v3 = *(_DWORD *)(v1 + 492);
      }
    }
    if ((v3 & 0x200) != 0)
    {
      result = *(_QWORD *)(v1 + 336);
      if (result)
      {
        result = sub_10065E844(result);
        v3 = *(_DWORD *)(v1 + 492);
      }
    }
    if ((v3 & 0x400) != 0)
    {
      result = *(_QWORD *)(v1 + 344);
      if (result)
      {
        result = sub_10133D440(result);
        v3 = *(_DWORD *)(v1 + 492);
      }
    }
    if ((v3 & 0x800) != 0)
    {
      result = *(_QWORD *)(v1 + 352);
      if (result)
      {
        result = sub_100EA2130(result);
        v3 = *(_DWORD *)(v1 + 492);
      }
    }
    if ((v3 & 0x1000) != 0)
    {
      result = *(_QWORD *)(v1 + 360);
      if (result)
      {
        result = sub_1009A6224(result);
        v3 = *(_DWORD *)(v1 + 492);
      }
    }
    if ((v3 & 0x2000) != 0)
    {
      result = *(_QWORD *)(v1 + 368);
      if (result)
      {
        result = sub_1009A6884(result);
        v3 = *(_DWORD *)(v1 + 492);
      }
    }
    if ((v3 & 0x4000) != 0)
    {
      result = *(_QWORD *)(v1 + 376);
      if (result)
      {
        result = sub_1009A7088(result);
        v3 = *(_DWORD *)(v1 + 492);
      }
    }
    *(_DWORD *)(v1 + 480) = 0;
  }
  if ((v3 & 0xFF0000) != 0)
  {
    if ((v3 & 0x10000) != 0)
    {
      result = *(_QWORD *)(v1 + 384);
      if (result)
      {
        result = sub_1009A7850(result);
        v3 = *(_DWORD *)(v1 + 492);
      }
    }
    if ((v3 & 0x20000) != 0)
    {
      result = *(_QWORD *)(v1 + 392);
      if (result)
      {
        result = sub_1009A7E9C(result);
        v3 = *(_DWORD *)(v1 + 492);
      }
    }
    if ((v3 & 0x40000) != 0)
    {
      result = *(_QWORD *)(v1 + 400);
      if (result)
      {
        result = sub_1009A8BDC(result);
        v3 = *(_DWORD *)(v1 + 492);
      }
    }
    if ((v3 & 0x80000) != 0)
    {
      result = *(_QWORD *)(v1 + 408);
      if (result)
      {
        result = sub_1009A9320(result);
        v3 = *(_DWORD *)(v1 + 492);
      }
    }
    if ((v3 & 0x100000) != 0)
    {
      result = *(_QWORD *)(v1 + 416);
      if (result)
      {
        result = sub_1009A9AFC(result);
        v3 = *(_DWORD *)(v1 + 492);
      }
    }
    if ((v3 & 0x200000) != 0)
    {
      result = *(_QWORD *)(v1 + 424);
      if (result)
      {
        result = sub_1009AA600(result);
        v3 = *(_DWORD *)(v1 + 492);
      }
    }
    if ((v3 & 0x400000) != 0)
    {
      result = *(_QWORD *)(v1 + 432);
      if (result)
      {
        result = sub_1009AADA4(result);
        v3 = *(_DWORD *)(v1 + 492);
      }
    }
    if ((v3 & 0x800000) != 0)
    {
      result = *(_QWORD *)(v1 + 440);
      if (result)
      {
        result = sub_1009AB51C(result);
        v3 = *(_DWORD *)(v1 + 492);
      }
    }
  }
  if (HIBYTE(v3))
  {
    if ((v3 & 0x1000000) != 0)
    {
      result = *(_QWORD *)(v1 + 448);
      if (result)
      {
        result = sub_1009ABA90(result);
        v3 = *(_DWORD *)(v1 + 492);
      }
    }
    if ((v3 & 0x2000000) != 0)
    {
      result = *(_QWORD *)(v1 + 456);
      if (result)
      {
        result = sub_1009AC0B4(result);
        v3 = *(_DWORD *)(v1 + 492);
      }
    }
    if ((v3 & 0x4000000) != 0)
    {
      result = *(_QWORD *)(v1 + 464);
      if (result)
      {
        result = sub_1009AC7D8(result);
        v3 = *(_DWORD *)(v1 + 492);
      }
    }
    if ((v3 & 0x8000000) != 0)
    {
      result = *(_QWORD *)(v1 + 472);
      if (result)
        result = sub_1009ACF6C(result);
    }
  }
  *(_QWORD *)(v1 + 488) = 0;
  return result;
}

uint64_t sub_10089CB20(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unint64_t *v5;
  unint64_t *v6;
  char *v7;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v9;
  int v10;
  uint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  BOOL v20;
  int v21;
  _BYTE *v22;
  uint64_t v23;
  char *v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  _BYTE *v31;
  uint64_t v32;
  char *v33;
  int v34;
  int v35;
  int v36;
  unsigned int v37;
  int v38;
  int v39;
  _BYTE *v40;
  uint64_t v41;
  char *v42;
  int v43;
  int v44;
  int v45;
  unsigned int v46;
  int v47;
  int v48;
  _BYTE *v49;
  uint64_t v50;
  char *v51;
  int v52;
  int v53;
  int v54;
  unsigned int v55;
  int v56;
  int v57;
  _BYTE *v58;
  uint64_t v59;
  char *v60;
  int v61;
  int v62;
  int v63;
  unsigned int v64;
  int v65;
  int v66;
  _BYTE *v67;
  uint64_t v68;
  char *v69;
  int v70;
  int v71;
  int v72;
  unsigned int v73;
  int v74;
  int v75;
  _BYTE *v76;
  uint64_t v77;
  char *v78;
  int v79;
  int v80;
  int v81;
  unsigned int v82;
  int v83;
  int v84;
  _BYTE *v85;
  uint64_t v86;
  char *v87;
  int v88;
  int v89;
  int v90;
  unsigned int v91;
  int v92;
  int v93;
  _BYTE *v94;
  uint64_t v95;
  char *v96;
  int v97;
  int v98;
  int v99;
  unsigned int v100;
  int v101;
  int v102;
  _BYTE *v103;
  uint64_t v104;
  char *v105;
  int v106;
  int v107;
  int v108;
  unsigned int v109;
  int v110;
  int v111;
  _BYTE *v112;
  uint64_t v113;
  char *v114;
  int v115;
  int v116;
  int v117;
  unsigned int v118;
  int v119;
  int v120;
  _BYTE *v121;
  uint64_t v122;
  char *v123;
  int v124;
  int v125;
  int v126;
  unsigned int v127;
  int v128;
  int v129;
  _BYTE *v130;
  uint64_t v131;
  char *v132;
  int v133;
  int v134;
  int v135;
  unsigned int v136;
  int v137;
  int v138;
  _BYTE *v139;
  uint64_t v140;
  char *v141;
  int v142;
  int v143;
  int v144;
  unsigned int v145;
  int v146;
  int v147;
  unsigned __int8 *v148;
  uint64_t v149;
  char *v150;
  int v151;
  int v152;
  int v153;
  unsigned int v154;
  int v155;
  int v156;
  unsigned __int8 *v157;
  uint64_t v158;
  char *v159;
  int v160;
  int v161;
  int v162;
  unsigned int v163;
  int v164;
  int v165;
  unsigned __int8 *v166;
  uint64_t v167;
  char *v168;
  int v169;
  int v170;
  int v171;
  unsigned int v172;
  int v173;
  int v174;
  unsigned __int8 *v175;
  uint64_t v176;
  char *v177;
  int v178;
  int v179;
  int v180;
  unsigned int v181;
  int v182;
  int v183;
  unsigned __int8 *v184;
  uint64_t v185;
  char *v186;
  int v187;
  int v188;
  int v189;
  unsigned int v190;
  int v191;
  int v192;
  unsigned __int8 *v193;
  uint64_t v194;
  char *v195;
  int v196;
  int v197;
  int v198;
  unsigned int v199;
  int v200;
  int v201;
  unsigned __int8 *v202;
  uint64_t v203;
  char *v204;
  int v205;
  int v206;
  int v207;
  unsigned int v208;
  int v209;
  int v210;
  unsigned __int8 *v211;
  uint64_t v212;
  char *v213;
  int v214;
  int v215;
  int v216;
  unsigned int v217;
  int v218;
  int v219;
  unsigned __int8 *v220;
  uint64_t v221;
  char *v222;
  int v223;
  int v224;
  int v225;
  unsigned int v226;
  int v227;
  int v228;
  unsigned __int8 *v229;
  uint64_t v230;
  char *v231;
  int v232;
  int v233;
  int v234;
  unsigned int v235;
  int v236;
  int v237;
  unsigned __int8 *v238;
  uint64_t v239;
  char *v240;
  int v241;
  int v242;
  int v243;
  unsigned int v244;
  int v245;
  int v246;
  unsigned __int8 *v247;
  uint64_t v248;
  char *v249;
  int v250;
  int v251;
  int v252;
  unsigned int v253;
  int v254;
  int v255;
  unsigned __int8 *v256;
  uint64_t v257;
  char *v258;
  int v259;
  int v260;
  int v261;
  unsigned int v262;
  int v263;
  int v264;
  unsigned __int8 *v265;
  uint64_t v266;
  char *v267;
  int v268;
  int v269;
  int v270;
  unsigned int v271;
  int v272;
  int v273;
  unsigned __int8 *v274;
  uint64_t v275;
  char *v276;
  int v277;
  int v278;
  int v279;
  unsigned int v280;
  int v281;
  int v282;
  unsigned __int8 *v283;
  uint64_t v284;
  char *v285;
  int v286;
  int v287;
  int v288;
  unsigned int v289;
  int v290;
  int v291;
  unsigned __int8 *v292;
  uint64_t v293;
  char *v294;
  int v295;
  int v296;
  int v297;
  unsigned int v298;
  int v299;
  int v300;
  unsigned __int8 *v301;
  uint64_t v302;
  char *v303;
  int v304;
  int v305;
  int v306;
  unsigned int v307;
  int v308;
  int v309;
  unsigned __int8 *v310;
  uint64_t v311;
  char *v312;
  int v313;
  int v314;
  int v315;
  unsigned int v316;
  int v317;
  int v318;
  unsigned __int8 *v319;
  uint64_t v320;
  char *v321;
  int v322;
  int v323;
  int v324;
  unsigned int v325;
  int v326;
  int v327;
  unsigned __int8 *v328;
  uint64_t v329;
  char *v330;
  int v331;
  int v332;
  int v333;
  unsigned int v334;
  int v335;
  int v336;
  unsigned __int8 *v337;
  uint64_t v338;
  char *v339;
  int v340;
  int v341;
  int v342;
  unsigned int v343;
  int v344;
  int v345;
  unsigned __int8 *v346;
  uint64_t v347;
  char *v348;
  int v349;
  int v350;
  int v351;
  unsigned int v352;
  int v353;
  int v354;
  unsigned __int8 *v355;
  uint64_t v356;
  char *v357;
  int v358;
  int v359;
  int v360;
  unsigned int v361;
  int v362;
  int v363;
  unsigned __int8 *v364;
  uint64_t v365;
  char *v366;
  int v367;
  int v368;
  int v369;
  unsigned int v370;
  int v371;
  int v372;
  unsigned __int8 *v373;
  uint64_t v374;
  char *v375;
  int v376;
  int v377;
  int v378;
  unsigned int v379;
  int v380;
  int v381;
  unsigned __int8 *v382;
  uint64_t v383;
  char *v384;
  int v385;
  int v386;
  int v387;
  unsigned int v388;
  int v389;
  int v390;
  unsigned __int8 *v391;
  uint64_t v392;
  char *v393;
  int v394;
  int v395;
  int v396;
  unsigned int v397;
  int v398;
  int v399;
  unsigned __int8 *v400;
  uint64_t v401;
  char *v402;
  int v403;
  int v404;
  int v405;
  unsigned int v406;
  int v407;
  int v408;
  unsigned __int8 *v409;
  uint64_t v410;
  char *v411;
  int v412;
  int v413;
  int v414;
  unsigned int v415;
  int v416;
  int v417;
  unsigned __int8 *v418;
  uint64_t v419;
  char *v420;
  int v421;
  int v422;
  int v423;
  unsigned int v424;
  int v425;
  int v426;
  unsigned __int8 *v427;
  uint64_t v428;
  char *v429;
  int v430;
  int v431;
  int v432;
  unsigned int v433;
  int v434;
  int v435;
  unsigned __int8 *v436;
  unsigned int v437;
  uint64_t result;
  unsigned __int8 *v439;
  uint64_t v440;
  char *v441;
  int v442;
  int v443;
  int v444;
  unsigned int v445;
  int v446;
  int v447;
  unsigned __int8 *v448;
  uint64_t v449;
  char *v450;
  int v451;
  int v452;
  int v453;
  unsigned int v454;
  int v455;
  int v456;
  unsigned __int8 *v457;
  uint64_t v458;
  char *v459;
  int v460;
  int v461;
  int v462;
  unsigned int v463;
  int v464;
  int v465;
  unsigned __int8 *v466;
  uint64_t v467;
  char *v468;
  int v469;
  int v470;
  int v471;
  unsigned int v472;
  int v473;
  int v474;
  unsigned __int8 *v475;
  uint64_t v476;
  char *v477;
  int v478;
  int v479;
  int v480;
  unsigned int v481;
  int v482;
  int v483;
  unsigned __int8 *v484;
  uint64_t v485;
  char *v486;
  int v487;
  int v488;
  int v489;
  unsigned int v490;
  int v491;
  int v492;
  unsigned __int8 *v493;
  int *v494;
  char *v495;
  int v496;
  int v497;
  int v498;
  unsigned int v499;
  int v500;
  int v501;
  unsigned __int8 *v502;
  uint64_t v503;
  char *v504;
  int v505;
  int v506;
  int v507;
  unsigned int v508;
  int v509;
  int v510;
  unsigned __int8 *v511;
  uint64_t v512;
  char *v513;
  int v514;
  int v515;
  int v516;
  unsigned int v517;
  int v518;
  int v519;
  unsigned __int8 *v520;
  uint64_t v521;
  char *v522;
  int v523;
  int v524;
  int v525;
  unsigned int v526;
  int v527;
  int v528;
  unsigned __int8 *v529;
  uint64_t v530;
  char *v531;
  int v532;
  int v533;
  int v534;
  unsigned int v535;
  int v536;
  int v537;
  unsigned __int8 *v538;
  uint64_t v539;
  char *v540;
  int v541;
  int v542;
  int v543;
  unsigned int v544;
  int v545;
  int v546;
  unsigned int v547;

  v5 = (unint64_t *)((char *)this + 8);
  v6 = (unint64_t *)((char *)this + 16);
  while (1)
  {
    v7 = (char *)*v5;
    if (*v5 < *v6 && (*v7 & 0x80000000) == 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v7;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v7 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
      goto LABEL_7;
    }
    TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + 8) = (_DWORD)TagFallback;
    if (!(_DWORD)TagFallback)
      return 1;
LABEL_7:
    v9 = TagFallback >> 3;
    switch(TagFallback >> 3)
    {
      case 1u:
        v10 = TagFallback & 7;
        if (v10 != 2)
          goto LABEL_135;
        *(_DWORD *)(a1 + 488) |= 1u;
        v11 = *(_QWORD *)(a1 + 8);
        if (!v11)
          operator new();
        v547 = 0;
        v12 = (char *)*v5;
        if (*v5 >= *v6 || *v12 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0;
        }
        else
        {
          v547 = *v12;
          *v5 = (unint64_t)(v12 + 1);
        }
        v15 = *((_DWORD *)this + 14);
        v16 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v15 + 1;
        if (v15 >= v16)
          return 0;
        v17 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_100443648(v11, this, v18) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v17);
        v19 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v19, 1);
        v21 = v19 - 1;
        if (v21 < 0 == v20)
          *((_DWORD *)this + 14) = v21;
        v22 = (_BYTE *)*v5;
        if (*v5 >= *v6 || *v22 != 18)
          continue;
        *v5 = (unint64_t)(v22 + 1);
        goto LABEL_147;
      case 2u:
        v10 = TagFallback & 7;
        if (v10 != 2)
          goto LABEL_135;
LABEL_147:
        *(_DWORD *)(a1 + 488) |= 2u;
        v23 = *(_QWORD *)(a1 + 16);
        if (!v23)
          operator new();
        v547 = 0;
        v24 = (char *)*v5;
        if (*v5 >= *v6 || *v24 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0;
        }
        else
        {
          v547 = *v24;
          *v5 = (unint64_t)(v24 + 1);
        }
        v25 = *((_DWORD *)this + 14);
        v26 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v25 + 1;
        if (v25 >= v26)
          return 0;
        v27 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_10044454C(v23, this, v28) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v27);
        v29 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v29, 1);
        v30 = v29 - 1;
        if (v30 < 0 == v20)
          *((_DWORD *)this + 14) = v30;
        v31 = (_BYTE *)*v5;
        if (*v5 >= *v6 || *v31 != 26)
          continue;
        *v5 = (unint64_t)(v31 + 1);
LABEL_161:
        *(_DWORD *)(a1 + 488) |= 4u;
        v32 = *(_QWORD *)(a1 + 24);
        if (!v32)
          operator new();
        v547 = 0;
        v33 = (char *)*v5;
        if (*v5 >= *v6 || *v33 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0;
        }
        else
        {
          v547 = *v33;
          *v5 = (unint64_t)(v33 + 1);
        }
        v34 = *((_DWORD *)this + 14);
        v35 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v34 + 1;
        if (v34 >= v35)
          return 0;
        v36 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_100445398(v32, this, v37) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v36);
        v38 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v38, 1);
        v39 = v38 - 1;
        if (v39 < 0 == v20)
          *((_DWORD *)this + 14) = v39;
        v40 = (_BYTE *)*v5;
        if (*v5 >= *v6 || *v40 != 34)
          continue;
        *v5 = (unint64_t)(v40 + 1);
LABEL_175:
        *(_DWORD *)(a1 + 488) |= 8u;
        v41 = *(_QWORD *)(a1 + 32);
        if (!v41)
          operator new();
        v547 = 0;
        v42 = (char *)*v5;
        if (*v5 >= *v6 || *v42 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0;
        }
        else
        {
          v547 = *v42;
          *v5 = (unint64_t)(v42 + 1);
        }
        v43 = *((_DWORD *)this + 14);
        v44 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v43 + 1;
        if (v43 >= v44)
          return 0;
        v45 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_10044D794(v41, this, v46) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v45);
        v47 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v47, 1);
        v48 = v47 - 1;
        if (v48 < 0 == v20)
          *((_DWORD *)this + 14) = v48;
        v49 = (_BYTE *)*v5;
        if (*v5 >= *v6 || *v49 != 42)
          continue;
        *v5 = (unint64_t)(v49 + 1);
LABEL_189:
        *(_DWORD *)(a1 + 488) |= 0x10u;
        v50 = *(_QWORD *)(a1 + 40);
        if (!v50)
          operator new();
        v547 = 0;
        v51 = (char *)*v5;
        if (*v5 >= *v6 || *v51 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0;
        }
        else
        {
          v547 = *v51;
          *v5 = (unint64_t)(v51 + 1);
        }
        v52 = *((_DWORD *)this + 14);
        v53 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v52 + 1;
        if (v52 >= v53)
          return 0;
        v54 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_100450EA4(v50, this, v55) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v54);
        v56 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v56, 1);
        v57 = v56 - 1;
        if (v57 < 0 == v20)
          *((_DWORD *)this + 14) = v57;
        v58 = (_BYTE *)*v5;
        if (*v5 >= *v6 || *v58 != 50)
          continue;
        *v5 = (unint64_t)(v58 + 1);
LABEL_203:
        *(_DWORD *)(a1 + 488) |= 0x20u;
        v59 = *(_QWORD *)(a1 + 48);
        if (!v59)
          operator new();
        v547 = 0;
        v60 = (char *)*v5;
        if (*v5 >= *v6 || *v60 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0;
        }
        else
        {
          v547 = *v60;
          *v5 = (unint64_t)(v60 + 1);
        }
        v61 = *((_DWORD *)this + 14);
        v62 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v61 + 1;
        if (v61 >= v62)
          return 0;
        v63 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_100451F1C(v59, this, v64) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v63);
        v65 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v65, 1);
        v66 = v65 - 1;
        if (v66 < 0 == v20)
          *((_DWORD *)this + 14) = v66;
        v67 = (_BYTE *)*v5;
        if (*v5 >= *v6 || *v67 != 58)
          continue;
        *v5 = (unint64_t)(v67 + 1);
LABEL_217:
        *(_DWORD *)(a1 + 488) |= 0x40u;
        v68 = *(_QWORD *)(a1 + 56);
        if (!v68)
          operator new();
        v547 = 0;
        v69 = (char *)*v5;
        if (*v5 >= *v6 || *v69 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0;
        }
        else
        {
          v547 = *v69;
          *v5 = (unint64_t)(v69 + 1);
        }
        v70 = *((_DWORD *)this + 14);
        v71 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v70 + 1;
        if (v70 >= v71)
          return 0;
        v72 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1004557AC(v68, this, v73) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v72);
        v74 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v74, 1);
        v75 = v74 - 1;
        if (v75 < 0 == v20)
          *((_DWORD *)this + 14) = v75;
        v76 = (_BYTE *)*v5;
        if (*v5 >= *v6 || *v76 != 66)
          continue;
        *v5 = (unint64_t)(v76 + 1);
LABEL_231:
        *(_DWORD *)(a1 + 488) |= 0x80u;
        v77 = *(_QWORD *)(a1 + 64);
        if (!v77)
          operator new();
        v547 = 0;
        v78 = (char *)*v5;
        if (*v5 >= *v6 || *v78 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0;
        }
        else
        {
          v547 = *v78;
          *v5 = (unint64_t)(v78 + 1);
        }
        v79 = *((_DWORD *)this + 14);
        v80 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v79 + 1;
        if (v79 >= v80)
          return 0;
        v81 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_100455EA4(v77, this, v82) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v81);
        v83 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v83, 1);
        v84 = v83 - 1;
        if (v84 < 0 == v20)
          *((_DWORD *)this + 14) = v84;
        v85 = (_BYTE *)*v5;
        if (*v5 >= *v6 || *v85 != 74)
          continue;
        *v5 = (unint64_t)(v85 + 1);
LABEL_245:
        *(_DWORD *)(a1 + 488) |= 0x100u;
        v86 = *(_QWORD *)(a1 + 72);
        if (!v86)
          operator new();
        v547 = 0;
        v87 = (char *)*v5;
        if (*v5 >= *v6 || *v87 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0;
        }
        else
        {
          v547 = *v87;
          *v5 = (unint64_t)(v87 + 1);
        }
        v88 = *((_DWORD *)this + 14);
        v89 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v88 + 1;
        if (v88 >= v89)
          return 0;
        v90 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1004563C0(v86, this, v91) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v90);
        v92 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v92, 1);
        v93 = v92 - 1;
        if (v93 < 0 == v20)
          *((_DWORD *)this + 14) = v93;
        v94 = (_BYTE *)*v5;
        if (*v5 >= *v6 || *v94 != 82)
          continue;
        *v5 = (unint64_t)(v94 + 1);
LABEL_259:
        *(_DWORD *)(a1 + 488) |= 0x200u;
        v95 = *(_QWORD *)(a1 + 80);
        if (!v95)
          operator new();
        v547 = 0;
        v96 = (char *)*v5;
        if (*v5 >= *v6 || *v96 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0;
        }
        else
        {
          v547 = *v96;
          *v5 = (unint64_t)(v96 + 1);
        }
        v97 = *((_DWORD *)this + 14);
        v98 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v97 + 1;
        if (v97 >= v98)
          return 0;
        v99 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_100457B58(v95, this, v100) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v99);
        v101 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v101, 1);
        v102 = v101 - 1;
        if (v102 < 0 == v20)
          *((_DWORD *)this + 14) = v102;
        v103 = (_BYTE *)*v5;
        if (*v5 >= *v6 || *v103 != 90)
          continue;
        *v5 = (unint64_t)(v103 + 1);
LABEL_273:
        *(_DWORD *)(a1 + 488) |= 0x400u;
        v104 = *(_QWORD *)(a1 + 88);
        if (!v104)
          operator new();
        v547 = 0;
        v105 = (char *)*v5;
        if (*v5 >= *v6 || *v105 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0;
        }
        else
        {
          v547 = *v105;
          *v5 = (unint64_t)(v105 + 1);
        }
        v106 = *((_DWORD *)this + 14);
        v107 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v106 + 1;
        if (v106 >= v107)
          return 0;
        v108 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_10045E1EC(v104, this, v109) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v108);
        v110 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v110, 1);
        v111 = v110 - 1;
        if (v111 < 0 == v20)
          *((_DWORD *)this + 14) = v111;
        v112 = (_BYTE *)*v5;
        if (*v5 >= *v6 || *v112 != 98)
          continue;
        *v5 = (unint64_t)(v112 + 1);
LABEL_287:
        *(_DWORD *)(a1 + 488) |= 0x800u;
        v113 = *(_QWORD *)(a1 + 96);
        if (!v113)
          operator new();
        v547 = 0;
        v114 = (char *)*v5;
        if (*v5 >= *v6 || *v114 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0;
        }
        else
        {
          v547 = *v114;
          *v5 = (unint64_t)(v114 + 1);
        }
        v115 = *((_DWORD *)this + 14);
        v116 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v115 + 1;
        if (v115 >= v116)
          return 0;
        v117 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_10045F1F8(v113, this, v118) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v117);
        v119 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v119, 1);
        v120 = v119 - 1;
        if (v120 < 0 == v20)
          *((_DWORD *)this + 14) = v120;
        v121 = (_BYTE *)*v5;
        if (*v5 >= *v6 || *v121 != 106)
          continue;
        *v5 = (unint64_t)(v121 + 1);
LABEL_301:
        *(_DWORD *)(a1 + 488) |= 0x1000u;
        v122 = *(_QWORD *)(a1 + 104);
        if (!v122)
          operator new();
        v547 = 0;
        v123 = (char *)*v5;
        if (*v5 >= *v6 || *v123 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0;
        }
        else
        {
          v547 = *v123;
          *v5 = (unint64_t)(v123 + 1);
        }
        v124 = *((_DWORD *)this + 14);
        v125 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v124 + 1;
        if (v124 >= v125)
          return 0;
        v126 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1000F6FF0(v122, this, v127) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v126);
        v128 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v128, 1);
        v129 = v128 - 1;
        if (v129 < 0 == v20)
          *((_DWORD *)this + 14) = v129;
        v130 = (_BYTE *)*v5;
        if (*v5 >= *v6 || *v130 != 114)
          continue;
        *v5 = (unint64_t)(v130 + 1);
LABEL_315:
        *(_DWORD *)(a1 + 488) |= 0x2000u;
        v131 = *(_QWORD *)(a1 + 112);
        if (!v131)
          operator new();
        v547 = 0;
        v132 = (char *)*v5;
        if (*v5 >= *v6 || *v132 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0;
        }
        else
        {
          v547 = *v132;
          *v5 = (unint64_t)(v132 + 1);
        }
        v133 = *((_DWORD *)this + 14);
        v134 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v133 + 1;
        if (v133 >= v134)
          return 0;
        v135 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_100460658(v131, this, v136) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v135);
        v137 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v137, 1);
        v138 = v137 - 1;
        if (v138 < 0 == v20)
          *((_DWORD *)this + 14) = v138;
        v139 = (_BYTE *)*v5;
        if (*v5 >= *v6 || *v139 != 122)
          continue;
        *v5 = (unint64_t)(v139 + 1);
LABEL_329:
        *(_DWORD *)(a1 + 488) |= 0x4000u;
        v140 = *(_QWORD *)(a1 + 120);
        if (!v140)
          operator new();
        v547 = 0;
        v141 = (char *)*v5;
        if (*v5 >= *v6 || *v141 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0;
        }
        else
        {
          v547 = *v141;
          *v5 = (unint64_t)(v141 + 1);
        }
        v142 = *((_DWORD *)this + 14);
        v143 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v142 + 1;
        if (v142 >= v143)
          return 0;
        v144 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_100460D50(v140, this, v145) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v144);
        v146 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v146, 1);
        v147 = v146 - 1;
        if (v147 < 0 == v20)
          *((_DWORD *)this + 14) = v147;
        v148 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v148 != 130 || v148[1] != 1)
          continue;
        *v5 = (unint64_t)(v148 + 2);
LABEL_344:
        *(_DWORD *)(a1 + 488) |= 0x8000u;
        v149 = *(_QWORD *)(a1 + 128);
        if (!v149)
          operator new();
        v547 = 0;
        v150 = (char *)*v5;
        if (*v5 >= *v6 || *v150 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0;
        }
        else
        {
          v547 = *v150;
          *v5 = (unint64_t)(v150 + 1);
        }
        v151 = *((_DWORD *)this + 14);
        v152 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v151 + 1;
        if (v151 >= v152)
          return 0;
        v153 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_100463FE4(v149, this, v154) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v153);
        v155 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v155, 1);
        v156 = v155 - 1;
        if (v156 < 0 == v20)
          *((_DWORD *)this + 14) = v156;
        v157 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v157 != 138 || v157[1] != 1)
          continue;
        *v5 = (unint64_t)(v157 + 2);
LABEL_359:
        *(_DWORD *)(a1 + 488) |= 0x10000u;
        v158 = *(_QWORD *)(a1 + 136);
        if (!v158)
          operator new();
        v547 = 0;
        v159 = (char *)*v5;
        if (*v5 >= *v6 || *v159 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0;
        }
        else
        {
          v547 = *v159;
          *v5 = (unint64_t)(v159 + 1);
        }
        v160 = *((_DWORD *)this + 14);
        v161 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v160 + 1;
        if (v160 >= v161)
          return 0;
        v162 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1004661E8(v158, this, v163) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v162);
        v164 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v164, 1);
        v165 = v164 - 1;
        if (v165 < 0 == v20)
          *((_DWORD *)this + 14) = v165;
        v166 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v166 != 146 || v166[1] != 1)
          continue;
        *v5 = (unint64_t)(v166 + 2);
LABEL_374:
        *(_DWORD *)(a1 + 488) |= 0x20000u;
        v167 = *(_QWORD *)(a1 + 144);
        if (!v167)
          operator new();
        v547 = 0;
        v168 = (char *)*v5;
        if (*v5 >= *v6 || *v168 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0;
        }
        else
        {
          v547 = *v168;
          *v5 = (unint64_t)(v168 + 1);
        }
        v169 = *((_DWORD *)this + 14);
        v170 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v169 + 1;
        if (v169 >= v170)
          return 0;
        v171 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_10044D794(v167, this, v172) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v171);
        v173 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v173, 1);
        v174 = v173 - 1;
        if (v174 < 0 == v20)
          *((_DWORD *)this + 14) = v174;
        v175 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v175 != 154 || v175[1] != 1)
          continue;
        *v5 = (unint64_t)(v175 + 2);
LABEL_389:
        *(_DWORD *)(a1 + 488) |= 0x40000u;
        v176 = *(_QWORD *)(a1 + 152);
        if (!v176)
          operator new();
        v547 = 0;
        v177 = (char *)*v5;
        if (*v5 >= *v6 || *v177 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0;
        }
        else
        {
          v547 = *v177;
          *v5 = (unint64_t)(v177 + 1);
        }
        v178 = *((_DWORD *)this + 14);
        v179 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v178 + 1;
        if (v178 >= v179)
          return 0;
        v180 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_100468828(v176, this, v181) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v180);
        v182 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v182, 1);
        v183 = v182 - 1;
        if (v183 < 0 == v20)
          *((_DWORD *)this + 14) = v183;
        v184 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v184 != 162 || v184[1] != 1)
          continue;
        *v5 = (unint64_t)(v184 + 2);
LABEL_404:
        *(_DWORD *)(a1 + 488) |= 0x80000u;
        v185 = *(_QWORD *)(a1 + 160);
        if (!v185)
          operator new();
        v547 = 0;
        v186 = (char *)*v5;
        if (*v5 >= *v6 || *v186 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0;
        }
        else
        {
          v547 = *v186;
          *v5 = (unint64_t)(v186 + 1);
        }
        v187 = *((_DWORD *)this + 14);
        v188 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v187 + 1;
        if (v187 >= v188)
          return 0;
        v189 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_10046A5AC(v185, this, v190) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v189);
        v191 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v191, 1);
        v192 = v191 - 1;
        if (v192 < 0 == v20)
          *((_DWORD *)this + 14) = v192;
        v193 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v193 != 170 || v193[1] != 1)
          continue;
        *v5 = (unint64_t)(v193 + 2);
LABEL_419:
        *(_DWORD *)(a1 + 488) |= 0x100000u;
        v194 = *(_QWORD *)(a1 + 168);
        if (!v194)
          operator new();
        v547 = 0;
        v195 = (char *)*v5;
        if (*v5 >= *v6 || *v195 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0;
        }
        else
        {
          v547 = *v195;
          *v5 = (unint64_t)(v195 + 1);
        }
        v196 = *((_DWORD *)this + 14);
        v197 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v196 + 1;
        if (v196 >= v197)
          return 0;
        v198 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_100458DEC(v194, this, v199) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v198);
        v200 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v200, 1);
        v201 = v200 - 1;
        if (v201 < 0 == v20)
          *((_DWORD *)this + 14) = v201;
        v202 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v202 != 178 || v202[1] != 1)
          continue;
        *v5 = (unint64_t)(v202 + 2);
LABEL_434:
        *(_DWORD *)(a1 + 488) |= 0x200000u;
        v203 = *(_QWORD *)(a1 + 176);
        if (!v203)
          operator new();
        v547 = 0;
        v204 = (char *)*v5;
        if (*v5 >= *v6 || *v204 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0;
        }
        else
        {
          v547 = *v204;
          *v5 = (unint64_t)(v204 + 1);
        }
        v205 = *((_DWORD *)this + 14);
        v206 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v205 + 1;
        if (v205 >= v206)
          return 0;
        v207 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_10046C2E0(v203, this, v208) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v207);
        v209 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v209, 1);
        v210 = v209 - 1;
        if (v210 < 0 == v20)
          *((_DWORD *)this + 14) = v210;
        v211 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v211 != 186 || v211[1] != 1)
          continue;
        *v5 = (unint64_t)(v211 + 2);
LABEL_449:
        *(_DWORD *)(a1 + 488) |= 0x400000u;
        v212 = *(_QWORD *)(a1 + 184);
        if (!v212)
          operator new();
        v547 = 0;
        v213 = (char *)*v5;
        if (*v5 >= *v6 || *v213 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0;
        }
        else
        {
          v547 = *v213;
          *v5 = (unint64_t)(v213 + 1);
        }
        v214 = *((_DWORD *)this + 14);
        v215 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v214 + 1;
        if (v214 >= v215)
          return 0;
        v216 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_10045A530(v212, this, v217) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v216);
        v218 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v218, 1);
        v219 = v218 - 1;
        if (v219 < 0 == v20)
          *((_DWORD *)this + 14) = v219;
        v220 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v220 != 194 || v220[1] != 1)
          continue;
        *v5 = (unint64_t)(v220 + 2);
LABEL_464:
        *(_DWORD *)(a1 + 488) |= 0x800000u;
        v221 = *(_QWORD *)(a1 + 192);
        if (!v221)
          operator new();
        v547 = 0;
        v222 = (char *)*v5;
        if (*v5 >= *v6 || *v222 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0;
        }
        else
        {
          v547 = *v222;
          *v5 = (unint64_t)(v222 + 1);
        }
        v223 = *((_DWORD *)this + 14);
        v224 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v223 + 1;
        if (v223 >= v224)
          return 0;
        v225 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_10045C21C(v221, this, v226) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v225);
        v227 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v227, 1);
        v228 = v227 - 1;
        if (v228 < 0 == v20)
          *((_DWORD *)this + 14) = v228;
        v229 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v229 != 202 || v229[1] != 1)
          continue;
        *v5 = (unint64_t)(v229 + 2);
LABEL_479:
        *(_DWORD *)(a1 + 488) |= 0x1000000u;
        v230 = *(_QWORD *)(a1 + 200);
        if (!v230)
          operator new();
        v547 = 0;
        v231 = (char *)*v5;
        if (*v5 >= *v6 || *v231 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0;
        }
        else
        {
          v547 = *v231;
          *v5 = (unint64_t)(v231 + 1);
        }
        v232 = *((_DWORD *)this + 14);
        v233 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v232 + 1;
        if (v232 >= v233)
          return 0;
        v234 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_10045B538(v230, this, v235) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v234);
        v236 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v236, 1);
        v237 = v236 - 1;
        if (v237 < 0 == v20)
          *((_DWORD *)this + 14) = v237;
        v238 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v238 != 210 || v238[1] != 1)
          continue;
        *v5 = (unint64_t)(v238 + 2);
LABEL_494:
        *(_DWORD *)(a1 + 488) |= 0x2000000u;
        v239 = *(_QWORD *)(a1 + 208);
        if (!v239)
          operator new();
        v547 = 0;
        v240 = (char *)*v5;
        if (*v5 >= *v6 || *v240 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0;
        }
        else
        {
          v547 = *v240;
          *v5 = (unint64_t)(v240 + 1);
        }
        v241 = *((_DWORD *)this + 14);
        v242 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v241 + 1;
        if (v241 >= v242)
          return 0;
        v243 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_100466BA0(v239, this, v244) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v243);
        v245 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v245, 1);
        v246 = v245 - 1;
        if (v246 < 0 == v20)
          *((_DWORD *)this + 14) = v246;
        v247 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v247 != 218 || v247[1] != 1)
          continue;
        *v5 = (unint64_t)(v247 + 2);
LABEL_509:
        *(_DWORD *)(a1 + 488) |= 0x4000000u;
        v248 = *(_QWORD *)(a1 + 216);
        if (!v248)
          operator new();
        v547 = 0;
        v249 = (char *)*v5;
        if (*v5 >= *v6 || *v249 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0;
        }
        else
        {
          v547 = *v249;
          *v5 = (unint64_t)(v249 + 1);
        }
        v250 = *((_DWORD *)this + 14);
        v251 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v250 + 1;
        if (v250 >= v251)
          return 0;
        v252 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_100469528(v248, this, v253) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v252);
        v254 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v254, 1);
        v255 = v254 - 1;
        if (v255 < 0 == v20)
          *((_DWORD *)this + 14) = v255;
        v256 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v256 != 226 || v256[1] != 1)
          continue;
        *v5 = (unint64_t)(v256 + 2);
LABEL_524:
        *(_DWORD *)(a1 + 488) |= 0x8000000u;
        v257 = *(_QWORD *)(a1 + 224);
        if (!v257)
          operator new();
        v547 = 0;
        v258 = (char *)*v5;
        if (*v5 >= *v6 || *v258 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0;
        }
        else
        {
          v547 = *v258;
          *v5 = (unint64_t)(v258 + 1);
        }
        v259 = *((_DWORD *)this + 14);
        v260 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v259 + 1;
        if (v259 >= v260)
          return 0;
        v261 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_10046CED4(v257, this, v262) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v261);
        v263 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v263, 1);
        v264 = v263 - 1;
        if (v264 < 0 == v20)
          *((_DWORD *)this + 14) = v264;
        v265 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v265 != 234 || v265[1] != 1)
          continue;
        *v5 = (unint64_t)(v265 + 2);
LABEL_539:
        *(_DWORD *)(a1 + 488) |= 0x10000000u;
        v266 = *(_QWORD *)(a1 + 232);
        if (!v266)
          operator new();
        v547 = 0;
        v267 = (char *)*v5;
        if (*v5 >= *v6 || *v267 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0;
        }
        else
        {
          v547 = *v267;
          *v5 = (unint64_t)(v267 + 1);
        }
        v268 = *((_DWORD *)this + 14);
        v269 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v268 + 1;
        if (v268 >= v269)
          return 0;
        v270 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_10046ED74(v266, this, v271) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v270);
        v272 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v272, 1);
        v273 = v272 - 1;
        if (v273 < 0 == v20)
          *((_DWORD *)this + 14) = v273;
        v274 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v274 != 242 || v274[1] != 1)
          continue;
        *v5 = (unint64_t)(v274 + 2);
LABEL_554:
        *(_DWORD *)(a1 + 488) |= 0x20000000u;
        v275 = *(_QWORD *)(a1 + 240);
        if (!v275)
          operator new();
        v547 = 0;
        v276 = (char *)*v5;
        if (*v5 >= *v6 || *v276 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0;
        }
        else
        {
          v547 = *v276;
          *v5 = (unint64_t)(v276 + 1);
        }
        v277 = *((_DWORD *)this + 14);
        v278 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v277 + 1;
        if (v277 >= v278)
          return 0;
        v279 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_100471EE0(v275, this, v280) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v279);
        v281 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v281, 1);
        v282 = v281 - 1;
        if (v282 < 0 == v20)
          *((_DWORD *)this + 14) = v282;
        v283 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v283 != 250 || v283[1] != 1)
          continue;
        *v5 = (unint64_t)(v283 + 2);
LABEL_569:
        *(_DWORD *)(a1 + 488) |= 0x40000000u;
        v284 = *(_QWORD *)(a1 + 248);
        if (!v284)
          operator new();
        v547 = 0;
        v285 = (char *)*v5;
        if (*v5 >= *v6 || *v285 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0;
        }
        else
        {
          v547 = *v285;
          *v5 = (unint64_t)(v285 + 1);
        }
        v286 = *((_DWORD *)this + 14);
        v287 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v286 + 1;
        if (v286 >= v287)
          return 0;
        v288 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_100473730(v284, this, v289) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v288);
        v290 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v290, 1);
        v291 = v290 - 1;
        if (v291 < 0 == v20)
          *((_DWORD *)this + 14) = v291;
        v292 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v292 != 130 || v292[1] != 2)
          continue;
        *v5 = (unint64_t)(v292 + 2);
LABEL_584:
        *(_DWORD *)(a1 + 488) |= 0x80000000;
        v293 = *(_QWORD *)(a1 + 256);
        if (!v293)
          operator new();
        v547 = 0;
        v294 = (char *)*v5;
        if (*v5 >= *v6 || *v294 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0;
        }
        else
        {
          v547 = *v294;
          *v5 = (unint64_t)(v294 + 1);
        }
        v295 = *((_DWORD *)this + 14);
        v296 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v295 + 1;
        if (v295 >= v296)
          return 0;
        v297 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_100453DF0(v293, this, v298) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v297);
        v299 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v299, 1);
        v300 = v299 - 1;
        if (v300 < 0 == v20)
          *((_DWORD *)this + 14) = v300;
        v301 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v301 != 138 || v301[1] != 2)
          continue;
        *v5 = (unint64_t)(v301 + 2);
LABEL_599:
        *(_DWORD *)(a1 + 492) |= 1u;
        v302 = *(_QWORD *)(a1 + 264);
        if (!v302)
          operator new();
        v547 = 0;
        v303 = (char *)*v5;
        if (*v5 >= *v6 || *v303 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0;
        }
        else
        {
          v547 = *v303;
          *v5 = (unint64_t)(v303 + 1);
        }
        v304 = *((_DWORD *)this + 14);
        v305 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v304 + 1;
        if (v304 >= v305)
          return 0;
        v306 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_100474C8C(v302, this, v307) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v306);
        v308 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v308, 1);
        v309 = v308 - 1;
        if (v309 < 0 == v20)
          *((_DWORD *)this + 14) = v309;
        v310 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v310 != 146 || v310[1] != 2)
          continue;
        *v5 = (unint64_t)(v310 + 2);
LABEL_614:
        *(_DWORD *)(a1 + 492) |= 2u;
        v311 = *(_QWORD *)(a1 + 272);
        if (!v311)
          operator new();
        v547 = 0;
        v312 = (char *)*v5;
        if (*v5 >= *v6 || *v312 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0;
        }
        else
        {
          v547 = *v312;
          *v5 = (unint64_t)(v312 + 1);
        }
        v313 = *((_DWORD *)this + 14);
        v314 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v313 + 1;
        if (v313 >= v314)
          return 0;
        v315 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1013B3B3C(v311, this, v316) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v315);
        v317 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v317, 1);
        v318 = v317 - 1;
        if (v318 < 0 == v20)
          *((_DWORD *)this + 14) = v318;
        v319 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v319 != 154 || v319[1] != 2)
          continue;
        *v5 = (unint64_t)(v319 + 2);
LABEL_629:
        *(_DWORD *)(a1 + 492) |= 4u;
        v320 = *(_QWORD *)(a1 + 280);
        if (!v320)
          operator new();
        v547 = 0;
        v321 = (char *)*v5;
        if (*v5 >= *v6 || *v321 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0;
        }
        else
        {
          v547 = *v321;
          *v5 = (unint64_t)(v321 + 1);
        }
        v322 = *((_DWORD *)this + 14);
        v323 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v322 + 1;
        if (v322 >= v323)
          return 0;
        v324 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_100475A7C(v320, this, v325) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v324);
        v326 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v326, 1);
        v327 = v326 - 1;
        if (v327 < 0 == v20)
          *((_DWORD *)this + 14) = v327;
        v328 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v328 != 226 || v328[1] != 62)
          continue;
        *v5 = (unint64_t)(v328 + 2);
LABEL_644:
        *(_DWORD *)(a1 + 492) |= 8u;
        v329 = *(_QWORD *)(a1 + 288);
        if (!v329)
          operator new();
        v547 = 0;
        v330 = (char *)*v5;
        if (*v5 >= *v6 || *v330 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0;
        }
        else
        {
          v547 = *v330;
          *v5 = (unint64_t)(v330 + 1);
        }
        v331 = *((_DWORD *)this + 14);
        v332 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v331 + 1;
        if (v331 >= v332)
          return 0;
        v333 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_100F4A1DC(v329, this, v334) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v333);
        v335 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v335, 1);
        v336 = v335 - 1;
        if (v336 < 0 == v20)
          *((_DWORD *)this + 14) = v336;
        v337 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v337 != 242 || v337[1] != 62)
          continue;
        *v5 = (unint64_t)(v337 + 2);
LABEL_659:
        *(_DWORD *)(a1 + 492) |= 0x10u;
        v338 = *(_QWORD *)(a1 + 296);
        if (!v338)
          operator new();
        v547 = 0;
        v339 = (char *)*v5;
        if (*v5 >= *v6 || *v339 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0;
        }
        else
        {
          v547 = *v339;
          *v5 = (unint64_t)(v339 + 1);
        }
        v340 = *((_DWORD *)this + 14);
        v341 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v340 + 1;
        if (v340 >= v341)
          return 0;
        v342 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1009F7E00(v338, this, v343) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v342);
        v344 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v344, 1);
        v345 = v344 - 1;
        if (v345 < 0 == v20)
          *((_DWORD *)this + 14) = v345;
        v346 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v346 != 250 || v346[1] != 62)
          continue;
        *v5 = (unint64_t)(v346 + 2);
LABEL_674:
        *(_DWORD *)(a1 + 492) |= 0x20u;
        v347 = *(_QWORD *)(a1 + 304);
        if (!v347)
          operator new();
        v547 = 0;
        v348 = (char *)*v5;
        if (*v5 >= *v6 || *v348 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0;
        }
        else
        {
          v547 = *v348;
          *v5 = (unint64_t)(v348 + 1);
        }
        v349 = *((_DWORD *)this + 14);
        v350 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v349 + 1;
        if (v349 >= v350)
          return 0;
        v351 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_100BF9F00(v347, this, v352) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v351);
        v353 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v353, 1);
        v354 = v353 - 1;
        if (v354 < 0 == v20)
          *((_DWORD *)this + 14) = v354;
        v355 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v355 != 130 || v355[1] != 63)
          continue;
        *v5 = (unint64_t)(v355 + 2);
LABEL_689:
        *(_DWORD *)(a1 + 492) |= 0x40u;
        v356 = *(_QWORD *)(a1 + 312);
        if (!v356)
          operator new();
        v547 = 0;
        v357 = (char *)*v5;
        if (*v5 >= *v6 || *v357 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0;
        }
        else
        {
          v547 = *v357;
          *v5 = (unint64_t)(v357 + 1);
        }
        v358 = *((_DWORD *)this + 14);
        v359 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v358 + 1;
        if (v358 >= v359)
          return 0;
        v360 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_10168D234(v356, this, v361) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v360);
        v362 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v362, 1);
        v363 = v362 - 1;
        if (v363 < 0 == v20)
          *((_DWORD *)this + 14) = v363;
        v364 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v364 != 146 || v364[1] != 63)
          continue;
        *v5 = (unint64_t)(v364 + 2);
LABEL_704:
        *(_DWORD *)(a1 + 492) |= 0x80u;
        v365 = *(_QWORD *)(a1 + 320);
        if (!v365)
          operator new();
        v547 = 0;
        v366 = (char *)*v5;
        if (*v5 >= *v6 || *v366 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0;
        }
        else
        {
          v547 = *v366;
          *v5 = (unint64_t)(v366 + 1);
        }
        v367 = *((_DWORD *)this + 14);
        v368 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v367 + 1;
        if (v367 >= v368)
          return 0;
        v369 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_100ACCA74(v365, this, v370) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v369);
        v371 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v371, 1);
        v372 = v371 - 1;
        if (v372 < 0 == v20)
          *((_DWORD *)this + 14) = v372;
        v373 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v373 != 162 || v373[1] != 63)
          continue;
        *v5 = (unint64_t)(v373 + 2);
LABEL_719:
        *(_DWORD *)(a1 + 492) |= 0x100u;
        v374 = *(_QWORD *)(a1 + 328);
        if (!v374)
          operator new();
        v547 = 0;
        v375 = (char *)*v5;
        if (*v5 >= *v6 || *v375 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0;
        }
        else
        {
          v547 = *v375;
          *v5 = (unint64_t)(v375 + 1);
        }
        v376 = *((_DWORD *)this + 14);
        v377 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v376 + 1;
        if (v376 >= v377)
          return 0;
        v378 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1011F0C88(v374, this, v379) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v378);
        v380 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v380, 1);
        v381 = v380 - 1;
        if (v381 < 0 == v20)
          *((_DWORD *)this + 14) = v381;
        v382 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v382 != 178 || v382[1] != 63)
          continue;
        *v5 = (unint64_t)(v382 + 2);
LABEL_734:
        *(_DWORD *)(a1 + 492) |= 0x200u;
        v383 = *(_QWORD *)(a1 + 336);
        if (!v383)
          operator new();
        v547 = 0;
        v384 = (char *)*v5;
        if (*v5 >= *v6 || *v384 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0;
        }
        else
        {
          v547 = *v384;
          *v5 = (unint64_t)(v384 + 1);
        }
        v385 = *((_DWORD *)this + 14);
        v386 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v385 + 1;
        if (v385 >= v386)
          return 0;
        v387 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_10065E908(v383, this, v388) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v387);
        v389 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v389, 1);
        v390 = v389 - 1;
        if (v390 < 0 == v20)
          *((_DWORD *)this + 14) = v390;
        v391 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v391 != 194 || v391[1] != 63)
          continue;
        *v5 = (unint64_t)(v391 + 2);
LABEL_749:
        *(_DWORD *)(a1 + 492) |= 0x400u;
        v392 = *(_QWORD *)(a1 + 344);
        if (!v392)
          operator new();
        v547 = 0;
        v393 = (char *)*v5;
        if (*v5 >= *v6 || *v393 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0;
        }
        else
        {
          v547 = *v393;
          *v5 = (unint64_t)(v393 + 1);
        }
        v394 = *((_DWORD *)this + 14);
        v395 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v394 + 1;
        if (v394 >= v395)
          return 0;
        v396 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_10133D68C(v392, this, v397) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v396);
        v398 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v398, 1);
        v399 = v398 - 1;
        if (v399 < 0 == v20)
          *((_DWORD *)this + 14) = v399;
        v400 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v400 != 202 || v400[1] != 63)
          continue;
        *v5 = (unint64_t)(v400 + 2);
LABEL_764:
        *(_DWORD *)(a1 + 492) |= 0x800u;
        v401 = *(_QWORD *)(a1 + 352);
        if (!v401)
          operator new();
        v547 = 0;
        v402 = (char *)*v5;
        if (*v5 >= *v6 || *v402 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0;
        }
        else
        {
          v547 = *v402;
          *v5 = (unint64_t)(v402 + 1);
        }
        v403 = *((_DWORD *)this + 14);
        v404 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v403 + 1;
        if (v403 >= v404)
          return 0;
        v405 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_100EA2334(v401, this, v406) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v405);
        v407 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v407, 1);
        v408 = v407 - 1;
        if (v408 < 0 == v20)
          *((_DWORD *)this + 14) = v408;
        v409 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v409 != 130 || v409[1] != 125)
          continue;
        *v5 = (unint64_t)(v409 + 2);
LABEL_779:
        *(_DWORD *)(a1 + 492) |= 0x1000u;
        v410 = *(_QWORD *)(a1 + 360);
        if (!v410)
          operator new();
        v547 = 0;
        v411 = (char *)*v5;
        if (*v5 >= *v6 || *v411 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0;
        }
        else
        {
          v547 = *v411;
          *v5 = (unint64_t)(v411 + 1);
        }
        v412 = *((_DWORD *)this + 14);
        v413 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v412 + 1;
        if (v412 >= v413)
          return 0;
        v414 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1009A6260(v410, this, v415) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v414);
        v416 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v416, 1);
        v417 = v416 - 1;
        if (v417 < 0 == v20)
          *((_DWORD *)this + 14) = v417;
        v418 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v418 != 138 || v418[1] != 125)
          continue;
        *v5 = (unint64_t)(v418 + 2);
LABEL_794:
        *(_DWORD *)(a1 + 492) |= 0x2000u;
        v419 = *(_QWORD *)(a1 + 368);
        if (!v419)
          operator new();
        v547 = 0;
        v420 = (char *)*v5;
        if (*v5 >= *v6 || *v420 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0;
        }
        else
        {
          v547 = *v420;
          *v5 = (unint64_t)(v420 + 1);
        }
        v421 = *((_DWORD *)this + 14);
        v422 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v421 + 1;
        if (v421 >= v422)
          return 0;
        v423 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1009A68C4(v419, this, v424) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v423);
        v425 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v425, 1);
        v426 = v425 - 1;
        if (v426 < 0 == v20)
          *((_DWORD *)this + 14) = v426;
        v427 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v427 != 146 || v427[1] != 125)
          continue;
        *v5 = (unint64_t)(v427 + 2);
LABEL_809:
        *(_DWORD *)(a1 + 492) |= 0x4000u;
        v428 = *(_QWORD *)(a1 + 376);
        if (!v428)
          operator new();
        v547 = 0;
        v429 = (char *)*v5;
        if (*v5 >= *v6 || *v429 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0;
        }
        else
        {
          v547 = *v429;
          *v5 = (unint64_t)(v429 + 1);
        }
        v430 = *((_DWORD *)this + 14);
        v431 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v430 + 1;
        if (v430 >= v431)
          return 0;
        v432 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1009A70A8(v428, this, v433) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v432);
        v434 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v434, 1);
        v435 = v434 - 1;
        if (v435 < 0 == v20)
          *((_DWORD *)this + 14) = v435;
        v14 = *v6;
        v436 = (unsigned __int8 *)*v5;
        if ((int)(*v6 - *v5) <= 1 || *v436 != 152 || v436[1] != 125)
          continue;
        v13 = (char *)(v436 + 2);
        *v5 = (unint64_t)v13;
LABEL_824:
        v547 = 0;
        if ((unint64_t)v13 >= v14 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547);
          if (!(_DWORD)result)
            return result;
          v437 = v547;
        }
        else
        {
          v437 = *v13;
          *v5 = (unint64_t)(v13 + 1);
        }
        if (sub_10008D1F0(v437))
        {
          if (!sub_10008D1F0(v437))
            sub_10190DAC0();
          *(_DWORD *)(a1 + 492) |= 0x8000u;
          *(_DWORD *)(a1 + 480) = v437;
        }
        v439 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) < 2 || *v439 != 162 || v439[1] != 125)
          continue;
        *v5 = (unint64_t)(v439 + 2);
LABEL_836:
        *(_DWORD *)(a1 + 492) |= 0x10000u;
        v440 = *(_QWORD *)(a1 + 384);
        if (!v440)
          operator new();
        v547 = 0;
        v441 = (char *)*v5;
        if (*v5 >= *v6 || *v441 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0;
        }
        else
        {
          v547 = *v441;
          *v5 = (unint64_t)(v441 + 1);
        }
        v442 = *((_DWORD *)this + 14);
        v443 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v442 + 1;
        if (v442 >= v443)
          return 0;
        v444 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1009A788C(v440, this, v445) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v444);
        v446 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v446, 1);
        v447 = v446 - 1;
        if (v447 < 0 == v20)
          *((_DWORD *)this + 14) = v447;
        v448 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v448 != 170 || v448[1] != 125)
          continue;
        *v5 = (unint64_t)(v448 + 2);
LABEL_851:
        *(_DWORD *)(a1 + 492) |= 0x20000u;
        v449 = *(_QWORD *)(a1 + 392);
        if (!v449)
          operator new();
        v547 = 0;
        v450 = (char *)*v5;
        if (*v5 >= *v6 || *v450 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0;
        }
        else
        {
          v547 = *v450;
          *v5 = (unint64_t)(v450 + 1);
        }
        v451 = *((_DWORD *)this + 14);
        v452 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v451 + 1;
        if (v451 >= v452)
          return 0;
        v453 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1009A7ED8(v449, this, v454) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v453);
        v455 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v455, 1);
        v456 = v455 - 1;
        if (v456 < 0 == v20)
          *((_DWORD *)this + 14) = v456;
        v457 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v457 != 178 || v457[1] != 125)
          continue;
        *v5 = (unint64_t)(v457 + 2);
LABEL_866:
        *(_DWORD *)(a1 + 492) |= 0x40000u;
        v458 = *(_QWORD *)(a1 + 400);
        if (!v458)
          operator new();
        v547 = 0;
        v459 = (char *)*v5;
        if (*v5 >= *v6 || *v459 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0;
        }
        else
        {
          v547 = *v459;
          *v5 = (unint64_t)(v459 + 1);
        }
        v460 = *((_DWORD *)this + 14);
        v461 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v460 + 1;
        if (v460 >= v461)
          return 0;
        v462 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1009A8C28(v458, this, v463) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v462);
        v464 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v464, 1);
        v465 = v464 - 1;
        if (v465 < 0 == v20)
          *((_DWORD *)this + 14) = v465;
        v466 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v466 != 186 || v466[1] != 125)
          continue;
        *v5 = (unint64_t)(v466 + 2);
LABEL_881:
        *(_DWORD *)(a1 + 492) |= 0x80000u;
        v467 = *(_QWORD *)(a1 + 408);
        if (!v467)
          operator new();
        v547 = 0;
        v468 = (char *)*v5;
        if (*v5 >= *v6 || *v468 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0;
        }
        else
        {
          v547 = *v468;
          *v5 = (unint64_t)(v468 + 1);
        }
        v469 = *((_DWORD *)this + 14);
        v470 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v469 + 1;
        if (v469 >= v470)
          return 0;
        v471 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1009A9360(v467, this, v472) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v471);
        v473 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v473, 1);
        v474 = v473 - 1;
        if (v474 < 0 == v20)
          *((_DWORD *)this + 14) = v474;
        v475 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v475 != 194 || v475[1] != 125)
          continue;
        *v5 = (unint64_t)(v475 + 2);
LABEL_896:
        *(_DWORD *)(a1 + 492) |= 0x100000u;
        v476 = *(_QWORD *)(a1 + 416);
        if (!v476)
          operator new();
        v547 = 0;
        v477 = (char *)*v5;
        if (*v5 >= *v6 || *v477 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0;
        }
        else
        {
          v547 = *v477;
          *v5 = (unint64_t)(v477 + 1);
        }
        v478 = *((_DWORD *)this + 14);
        v479 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v478 + 1;
        if (v478 >= v479)
          return 0;
        v480 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1009A9B50(v476, this, v481) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v480);
        v482 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v482, 1);
        v483 = v482 - 1;
        if (v483 < 0 == v20)
          *((_DWORD *)this + 14) = v483;
        v484 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v484 != 202 || v484[1] != 125)
          continue;
        *v5 = (unint64_t)(v484 + 2);
LABEL_911:
        *(_DWORD *)(a1 + 492) |= 0x200000u;
        v485 = *(_QWORD *)(a1 + 424);
        if (!v485)
          operator new();
        v547 = 0;
        v486 = (char *)*v5;
        if (*v5 >= *v6 || *v486 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0;
        }
        else
        {
          v547 = *v486;
          *v5 = (unint64_t)(v486 + 1);
        }
        v487 = *((_DWORD *)this + 14);
        v488 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v487 + 1;
        if (v487 >= v488)
          return 0;
        v489 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1009AA634(v485, this, v490) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v489);
        v491 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v491, 1);
        v492 = v491 - 1;
        if (v492 < 0 == v20)
          *((_DWORD *)this + 14) = v492;
        v493 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v493 != 210 || v493[1] != 125)
          continue;
        *v5 = (unint64_t)(v493 + 2);
LABEL_926:
        *(_DWORD *)(a1 + 492) |= 0x400000u;
        v494 = *(int **)(a1 + 432);
        if (!v494)
          operator new();
        v547 = 0;
        v495 = (char *)*v5;
        if (*v5 >= *v6 || *v495 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0;
        }
        else
        {
          v547 = *v495;
          *v5 = (unint64_t)(v495 + 1);
        }
        v496 = *((_DWORD *)this + 14);
        v497 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v496 + 1;
        if (v496 >= v497)
          return 0;
        v498 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1009AAE34(v494, this, v499) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v498);
        v500 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v500, 1);
        v501 = v500 - 1;
        if (v501 < 0 == v20)
          *((_DWORD *)this + 14) = v501;
        v502 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v502 != 218 || v502[1] != 125)
          continue;
        *v5 = (unint64_t)(v502 + 2);
LABEL_941:
        *(_DWORD *)(a1 + 492) |= 0x800000u;
        v503 = *(_QWORD *)(a1 + 440);
        if (!v503)
          operator new();
        v547 = 0;
        v504 = (char *)*v5;
        if (*v5 >= *v6 || *v504 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0;
        }
        else
        {
          v547 = *v504;
          *v5 = (unint64_t)(v504 + 1);
        }
        v505 = *((_DWORD *)this + 14);
        v506 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v505 + 1;
        if (v505 >= v506)
          return 0;
        v507 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1009AB568(v503, this, v508) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v507);
        v509 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v509, 1);
        v510 = v509 - 1;
        if (v510 < 0 == v20)
          *((_DWORD *)this + 14) = v510;
        v511 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v511 != 226 || v511[1] != 125)
          continue;
        *v5 = (unint64_t)(v511 + 2);
LABEL_956:
        *(_DWORD *)(a1 + 492) |= 0x1000000u;
        v512 = *(_QWORD *)(a1 + 448);
        if (!v512)
          operator new();
        v547 = 0;
        v513 = (char *)*v5;
        if (*v5 >= *v6 || *v513 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0;
        }
        else
        {
          v547 = *v513;
          *v5 = (unint64_t)(v513 + 1);
        }
        v514 = *((_DWORD *)this + 14);
        v515 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v514 + 1;
        if (v514 >= v515)
          return 0;
        v516 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1009ABAE0(v512, this, v517) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v516);
        v518 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v518, 1);
        v519 = v518 - 1;
        if (v519 < 0 == v20)
          *((_DWORD *)this + 14) = v519;
        v520 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v520 != 234 || v520[1] != 125)
          continue;
        *v5 = (unint64_t)(v520 + 2);
LABEL_971:
        *(_DWORD *)(a1 + 492) |= 0x2000000u;
        v521 = *(_QWORD *)(a1 + 456);
        if (!v521)
          operator new();
        v547 = 0;
        v522 = (char *)*v5;
        if (*v5 >= *v6 || *v522 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0;
        }
        else
        {
          v547 = *v522;
          *v5 = (unint64_t)(v522 + 1);
        }
        v523 = *((_DWORD *)this + 14);
        v524 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v523 + 1;
        if (v523 >= v524)
          return 0;
        v525 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1009AC104(v521, this, v526) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v525);
        v527 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v527, 1);
        v528 = v527 - 1;
        if (v528 < 0 == v20)
          *((_DWORD *)this + 14) = v528;
        v529 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v529 != 242 || v529[1] != 125)
          continue;
        *v5 = (unint64_t)(v529 + 2);
LABEL_986:
        *(_DWORD *)(a1 + 492) |= 0x4000000u;
        v530 = *(_QWORD *)(a1 + 464);
        if (!v530)
          operator new();
        v547 = 0;
        v531 = (char *)*v5;
        if (*v5 >= *v6 || *v531 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0;
        }
        else
        {
          v547 = *v531;
          *v5 = (unint64_t)(v531 + 1);
        }
        v532 = *((_DWORD *)this + 14);
        v533 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v532 + 1;
        if (v532 >= v533)
          return 0;
        v534 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1009AC85C(v530, this, v535) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v534);
        v536 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v536, 1);
        v537 = v536 - 1;
        if (v537 < 0 == v20)
          *((_DWORD *)this + 14) = v537;
        v538 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v538 != 250 || v538[1] != 125)
          continue;
        *v5 = (unint64_t)(v538 + 2);
LABEL_1001:
        *(_DWORD *)(a1 + 492) |= 0x8000000u;
        v539 = *(_QWORD *)(a1 + 472);
        if (!v539)
          operator new();
        v547 = 0;
        v540 = (char *)*v5;
        if (*v5 >= *v6 || *v540 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0;
        }
        else
        {
          v547 = *v540;
          *v5 = (unint64_t)(v540 + 1);
        }
        v541 = *((_DWORD *)this + 14);
        v542 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v541 + 1;
        if (v541 >= v542)
          return 0;
        v543 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1009ACFA8(v539, this, v544) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v543);
        v545 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v545, 1);
        v546 = v545 - 1;
        if (v546 < 0 == v20)
          *((_DWORD *)this + 14) = v546;
        if (*v5 == *v6 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
        break;
      case 3u:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_161;
        goto LABEL_135;
      case 4u:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_175;
        goto LABEL_135;
      case 5u:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_189;
        goto LABEL_135;
      case 6u:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_203;
        goto LABEL_135;
      case 7u:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_217;
        goto LABEL_135;
      case 8u:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_231;
        goto LABEL_135;
      case 9u:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_245;
        goto LABEL_135;
      case 0xAu:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_259;
        goto LABEL_135;
      case 0xBu:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_273;
        goto LABEL_135;
      case 0xCu:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_287;
        goto LABEL_135;
      case 0xDu:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_301;
        goto LABEL_135;
      case 0xEu:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_315;
        goto LABEL_135;
      case 0xFu:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_329;
        goto LABEL_135;
      case 0x10u:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_344;
        goto LABEL_135;
      case 0x11u:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_359;
        goto LABEL_135;
      case 0x12u:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_374;
        goto LABEL_135;
      case 0x13u:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_389;
        goto LABEL_135;
      case 0x14u:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_404;
        goto LABEL_135;
      case 0x15u:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_419;
        goto LABEL_135;
      case 0x16u:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_434;
        goto LABEL_135;
      case 0x17u:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_449;
        goto LABEL_135;
      case 0x18u:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_464;
        goto LABEL_135;
      case 0x19u:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_479;
        goto LABEL_135;
      case 0x1Au:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_494;
        goto LABEL_135;
      case 0x1Bu:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_509;
        goto LABEL_135;
      case 0x1Cu:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_524;
        goto LABEL_135;
      case 0x1Du:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_539;
        goto LABEL_135;
      case 0x1Eu:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_554;
        goto LABEL_135;
      case 0x1Fu:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_569;
        goto LABEL_135;
      case 0x20u:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_584;
        goto LABEL_135;
      case 0x21u:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_599;
        goto LABEL_135;
      case 0x22u:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_614;
        goto LABEL_135;
      case 0x23u:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_629;
LABEL_135:
        if (v10 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
      default:
        switch(v9)
        {
          case 0x7D0u:
            v10 = TagFallback & 7;
            if (v10 == 2)
              goto LABEL_779;
            goto LABEL_135;
          case 0x7D1u:
            v10 = TagFallback & 7;
            if (v10 == 2)
              goto LABEL_794;
            goto LABEL_135;
          case 0x7D2u:
            v10 = TagFallback & 7;
            if (v10 == 2)
              goto LABEL_809;
            goto LABEL_135;
          case 0x7D3u:
            v10 = TagFallback & 7;
            if ((TagFallback & 7) != 0)
              goto LABEL_135;
            v13 = (char *)*v5;
            v14 = *v6;
            break;
          case 0x7D4u:
            v10 = TagFallback & 7;
            if (v10 == 2)
              goto LABEL_836;
            goto LABEL_135;
          case 0x7D5u:
            v10 = TagFallback & 7;
            if (v10 == 2)
              goto LABEL_851;
            goto LABEL_135;
          case 0x7D6u:
            v10 = TagFallback & 7;
            if (v10 == 2)
              goto LABEL_866;
            goto LABEL_135;
          case 0x7D7u:
            v10 = TagFallback & 7;
            if (v10 == 2)
              goto LABEL_881;
            goto LABEL_135;
          case 0x7D8u:
            v10 = TagFallback & 7;
            if (v10 == 2)
              goto LABEL_896;
            goto LABEL_135;
          case 0x7D9u:
            v10 = TagFallback & 7;
            if (v10 == 2)
              goto LABEL_911;
            goto LABEL_135;
          case 0x7DAu:
            v10 = TagFallback & 7;
            if (v10 == 2)
              goto LABEL_926;
            goto LABEL_135;
          case 0x7DBu:
            v10 = TagFallback & 7;
            if (v10 == 2)
              goto LABEL_941;
            goto LABEL_135;
          case 0x7DCu:
            v10 = TagFallback & 7;
            if (v10 == 2)
              goto LABEL_956;
            goto LABEL_135;
          case 0x7DDu:
            v10 = TagFallback & 7;
            if (v10 == 2)
              goto LABEL_971;
            goto LABEL_135;
          case 0x7DEu:
            v10 = TagFallback & 7;
            if (v10 == 2)
              goto LABEL_986;
            goto LABEL_135;
          case 0x7DFu:
            v10 = TagFallback & 7;
            if (v10 == 2)
              goto LABEL_1001;
            goto LABEL_135;
          default:
            switch(v9)
            {
              case 0x3ECu:
                v10 = TagFallback & 7;
                if (v10 == 2)
                  goto LABEL_644;
                goto LABEL_135;
              case 0x3EEu:
                v10 = TagFallback & 7;
                if (v10 == 2)
                  goto LABEL_659;
                goto LABEL_135;
              case 0x3EFu:
                v10 = TagFallback & 7;
                if (v10 == 2)
                  goto LABEL_674;
                goto LABEL_135;
              case 0x3F0u:
                v10 = TagFallback & 7;
                if (v10 == 2)
                  goto LABEL_689;
                goto LABEL_135;
              case 0x3F2u:
                v10 = TagFallback & 7;
                if (v10 == 2)
                  goto LABEL_704;
                goto LABEL_135;
              case 0x3F4u:
                v10 = TagFallback & 7;
                if (v10 == 2)
                  goto LABEL_719;
                goto LABEL_135;
              case 0x3F6u:
                v10 = TagFallback & 7;
                if (v10 == 2)
                  goto LABEL_734;
                goto LABEL_135;
              case 0x3F8u:
                v10 = TagFallback & 7;
                if (v10 == 2)
                  goto LABEL_749;
                goto LABEL_135;
              case 0x3F9u:
                v10 = TagFallback & 7;
                if (v10 == 2)
                  goto LABEL_764;
                goto LABEL_135;
              default:
                v10 = TagFallback & 7;
                goto LABEL_135;
            }
        }
        goto LABEL_824;
    }
  }
}

void sub_1008A0BB4()
{
  operator delete();
}

uint64_t sub_1008A0F00(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v5 = result;
  v6 = *(_DWORD *)(result + 488);
  if ((v6 & 1) != 0)
  {
    v7 = *(_QWORD *)(result + 8);
    if (!v7)
      v7 = *(_QWORD *)(qword_102310D28 + 8);
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    v6 = *(_DWORD *)(v5 + 488);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_40;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v8 = *(_QWORD *)(v5 + 16);
  if (!v8)
    v8 = *(_QWORD *)(qword_102310D28 + 16);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_43;
  }
LABEL_40:
  v9 = *(_QWORD *)(v5 + 24);
  if (!v9)
    v9 = *(_QWORD *)(qword_102310D28 + 24);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v9, a2, a4);
  v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_46;
  }
LABEL_43:
  v10 = *(_QWORD *)(v5 + 32);
  if (!v10)
    v10 = *(_QWORD *)(qword_102310D28 + 32);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v10, a2, a4);
  v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_49;
  }
LABEL_46:
  v11 = *(_QWORD *)(v5 + 40);
  if (!v11)
    v11 = *(_QWORD *)(qword_102310D28 + 40);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v11, a2, a4);
  v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_52;
  }
LABEL_49:
  v12 = *(_QWORD *)(v5 + 48);
  if (!v12)
    v12 = *(_QWORD *)(qword_102310D28 + 48);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v12, a2, a4);
  v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_55;
  }
LABEL_52:
  v13 = *(_QWORD *)(v5 + 56);
  if (!v13)
    v13 = *(_QWORD *)(qword_102310D28 + 56);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, v13, a2, a4);
  v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_58;
  }
LABEL_55:
  v14 = *(_QWORD *)(v5 + 64);
  if (!v14)
    v14 = *(_QWORD *)(qword_102310D28 + 64);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, v14, a2, a4);
  v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_61;
  }
LABEL_58:
  v15 = *(_QWORD *)(v5 + 72);
  if (!v15)
    v15 = *(_QWORD *)(qword_102310D28 + 72);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, v15, a2, a4);
  v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_64;
  }
LABEL_61:
  v16 = *(_QWORD *)(v5 + 80);
  if (!v16)
    v16 = *(_QWORD *)(qword_102310D28 + 80);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, v16, a2, a4);
  v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_67;
  }
LABEL_64:
  v17 = *(_QWORD *)(v5 + 88);
  if (!v17)
    v17 = *(_QWORD *)(qword_102310D28 + 88);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, v17, a2, a4);
  v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_70;
  }
LABEL_67:
  v18 = *(_QWORD *)(v5 + 96);
  if (!v18)
    v18 = *(_QWORD *)(qword_102310D28 + 96);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, v18, a2, a4);
  v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_73;
  }
LABEL_70:
  v19 = *(_QWORD *)(v5 + 104);
  if (!v19)
    v19 = *(_QWORD *)(qword_102310D28 + 104);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD, v19, a2, a4);
  v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_76;
  }
LABEL_73:
  v20 = *(_QWORD *)(v5 + 112);
  if (!v20)
    v20 = *(_QWORD *)(qword_102310D28 + 112);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE, v20, a2, a4);
  v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x4000) == 0)
  {
LABEL_16:
    if ((v6 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_79;
  }
LABEL_76:
  v21 = *(_QWORD *)(v5 + 120);
  if (!v21)
    v21 = *(_QWORD *)(qword_102310D28 + 120);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF, v21, a2, a4);
  v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x8000) == 0)
  {
LABEL_17:
    if ((v6 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_82;
  }
LABEL_79:
  v22 = *(_QWORD *)(v5 + 128);
  if (!v22)
    v22 = *(_QWORD *)(qword_102310D28 + 128);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10, v22, a2, a4);
  v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x10000) == 0)
  {
LABEL_18:
    if ((v6 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_85;
  }
LABEL_82:
  v23 = *(_QWORD *)(v5 + 136);
  if (!v23)
    v23 = *(_QWORD *)(qword_102310D28 + 136);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x11, v23, a2, a4);
  v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x20000) == 0)
  {
LABEL_19:
    if ((v6 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_88;
  }
LABEL_85:
  v24 = *(_QWORD *)(v5 + 144);
  if (!v24)
    v24 = *(_QWORD *)(qword_102310D28 + 144);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x12, v24, a2, a4);
  v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x40000) == 0)
  {
LABEL_20:
    if ((v6 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_91;
  }
LABEL_88:
  v25 = *(_QWORD *)(v5 + 152);
  if (!v25)
    v25 = *(_QWORD *)(qword_102310D28 + 152);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x13, v25, a2, a4);
  v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x80000) == 0)
  {
LABEL_21:
    if ((v6 & 0x100000) == 0)
      goto LABEL_22;
    goto LABEL_94;
  }
LABEL_91:
  v26 = *(_QWORD *)(v5 + 160);
  if (!v26)
    v26 = *(_QWORD *)(qword_102310D28 + 160);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x14, v26, a2, a4);
  v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x100000) == 0)
  {
LABEL_22:
    if ((v6 & 0x200000) == 0)
      goto LABEL_23;
    goto LABEL_97;
  }
LABEL_94:
  v27 = *(_QWORD *)(v5 + 168);
  if (!v27)
    v27 = *(_QWORD *)(qword_102310D28 + 168);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x15, v27, a2, a4);
  v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x200000) == 0)
  {
LABEL_23:
    if ((v6 & 0x400000) == 0)
      goto LABEL_24;
    goto LABEL_100;
  }
LABEL_97:
  v28 = *(_QWORD *)(v5 + 176);
  if (!v28)
    v28 = *(_QWORD *)(qword_102310D28 + 176);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x16, v28, a2, a4);
  v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x400000) == 0)
  {
LABEL_24:
    if ((v6 & 0x800000) == 0)
      goto LABEL_25;
    goto LABEL_103;
  }
LABEL_100:
  v29 = *(_QWORD *)(v5 + 184);
  if (!v29)
    v29 = *(_QWORD *)(qword_102310D28 + 184);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x17, v29, a2, a4);
  v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x800000) == 0)
  {
LABEL_25:
    if ((v6 & 0x1000000) == 0)
      goto LABEL_26;
    goto LABEL_106;
  }
LABEL_103:
  v30 = *(_QWORD *)(v5 + 192);
  if (!v30)
    v30 = *(_QWORD *)(qword_102310D28 + 192);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x18, v30, a2, a4);
  v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v6 & 0x2000000) == 0)
      goto LABEL_27;
    goto LABEL_109;
  }
LABEL_106:
  v31 = *(_QWORD *)(v5 + 200);
  if (!v31)
    v31 = *(_QWORD *)(qword_102310D28 + 200);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x19, v31, a2, a4);
  v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v6 & 0x4000000) == 0)
      goto LABEL_28;
    goto LABEL_112;
  }
LABEL_109:
  v32 = *(_QWORD *)(v5 + 208);
  if (!v32)
    v32 = *(_QWORD *)(qword_102310D28 + 208);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1A, v32, a2, a4);
  v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v6 & 0x8000000) == 0)
      goto LABEL_29;
    goto LABEL_115;
  }
LABEL_112:
  v33 = *(_QWORD *)(v5 + 216);
  if (!v33)
    v33 = *(_QWORD *)(qword_102310D28 + 216);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1B, v33, a2, a4);
  v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x8000000) == 0)
  {
LABEL_29:
    if ((v6 & 0x10000000) == 0)
      goto LABEL_30;
    goto LABEL_118;
  }
LABEL_115:
  v34 = *(_QWORD *)(v5 + 224);
  if (!v34)
    v34 = *(_QWORD *)(qword_102310D28 + 224);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1C, v34, a2, a4);
  v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x10000000) == 0)
  {
LABEL_30:
    if ((v6 & 0x20000000) == 0)
      goto LABEL_31;
    goto LABEL_121;
  }
LABEL_118:
  v35 = *(_QWORD *)(v5 + 232);
  if (!v35)
    v35 = *(_QWORD *)(qword_102310D28 + 232);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1D, v35, a2, a4);
  v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x20000000) == 0)
  {
LABEL_31:
    if ((v6 & 0x40000000) == 0)
      goto LABEL_32;
    goto LABEL_124;
  }
LABEL_121:
  v36 = *(_QWORD *)(v5 + 240);
  if (!v36)
    v36 = *(_QWORD *)(qword_102310D28 + 240);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1E, v36, a2, a4);
  v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x40000000) == 0)
  {
LABEL_32:
    if ((v6 & 0x80000000) == 0)
      goto LABEL_130;
    goto LABEL_127;
  }
LABEL_124:
  v37 = *(_QWORD *)(v5 + 248);
  if (!v37)
    v37 = *(_QWORD *)(qword_102310D28 + 248);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1F, v37, a2, a4);
  if ((*(_DWORD *)(v5 + 488) & 0x80000000) != 0)
  {
LABEL_127:
    v38 = *(_QWORD *)(v5 + 256);
    if (!v38)
      v38 = *(_QWORD *)(qword_102310D28 + 256);
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x20, v38, a2, a4);
  }
LABEL_130:
  v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 1) != 0)
  {
    v40 = *(_QWORD *)(v5 + 264);
    if (!v40)
      v40 = *(_QWORD *)(qword_102310D28 + 264);
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x21, v40, a2, a4);
    v39 = *(_DWORD *)(v5 + 492);
    if ((v39 & 2) == 0)
    {
LABEL_132:
      if ((v39 & 4) == 0)
        goto LABEL_133;
      goto LABEL_165;
    }
  }
  else if ((v39 & 2) == 0)
  {
    goto LABEL_132;
  }
  v41 = *(_QWORD *)(v5 + 272);
  if (!v41)
    v41 = *(_QWORD *)(qword_102310D28 + 272);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x22, v41, a2, a4);
  v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 4) == 0)
  {
LABEL_133:
    if ((v39 & 8) == 0)
      goto LABEL_134;
    goto LABEL_168;
  }
LABEL_165:
  v42 = *(_QWORD *)(v5 + 280);
  if (!v42)
    v42 = *(_QWORD *)(qword_102310D28 + 280);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x23, v42, a2, a4);
  v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 8) == 0)
  {
LABEL_134:
    if ((v39 & 0x10) == 0)
      goto LABEL_135;
    goto LABEL_171;
  }
LABEL_168:
  v43 = *(_QWORD *)(v5 + 288);
  if (!v43)
    v43 = *(_QWORD *)(qword_102310D28 + 288);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3EC, v43, a2, a4);
  v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 0x10) == 0)
  {
LABEL_135:
    if ((v39 & 0x20) == 0)
      goto LABEL_136;
    goto LABEL_174;
  }
LABEL_171:
  v44 = *(_QWORD *)(v5 + 296);
  if (!v44)
    v44 = *(_QWORD *)(qword_102310D28 + 296);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3EE, v44, a2, a4);
  v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 0x20) == 0)
  {
LABEL_136:
    if ((v39 & 0x40) == 0)
      goto LABEL_137;
    goto LABEL_177;
  }
LABEL_174:
  v45 = *(_QWORD *)(v5 + 304);
  if (!v45)
    v45 = *(_QWORD *)(qword_102310D28 + 304);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3EF, v45, a2, a4);
  v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 0x40) == 0)
  {
LABEL_137:
    if ((v39 & 0x80) == 0)
      goto LABEL_138;
    goto LABEL_180;
  }
LABEL_177:
  v46 = *(_QWORD *)(v5 + 312);
  if (!v46)
    v46 = *(_QWORD *)(qword_102310D28 + 312);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3F0, v46, a2, a4);
  v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 0x80) == 0)
  {
LABEL_138:
    if ((v39 & 0x100) == 0)
      goto LABEL_139;
    goto LABEL_183;
  }
LABEL_180:
  v47 = *(_QWORD *)(v5 + 320);
  if (!v47)
    v47 = *(_QWORD *)(qword_102310D28 + 320);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3F2, v47, a2, a4);
  v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 0x100) == 0)
  {
LABEL_139:
    if ((v39 & 0x200) == 0)
      goto LABEL_140;
    goto LABEL_186;
  }
LABEL_183:
  v48 = *(_QWORD *)(v5 + 328);
  if (!v48)
    v48 = *(_QWORD *)(qword_102310D28 + 328);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3F4, v48, a2, a4);
  v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 0x200) == 0)
  {
LABEL_140:
    if ((v39 & 0x400) == 0)
      goto LABEL_141;
    goto LABEL_189;
  }
LABEL_186:
  v49 = *(_QWORD *)(v5 + 336);
  if (!v49)
    v49 = *(_QWORD *)(qword_102310D28 + 336);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3F6, v49, a2, a4);
  v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 0x400) == 0)
  {
LABEL_141:
    if ((v39 & 0x800) == 0)
      goto LABEL_142;
    goto LABEL_192;
  }
LABEL_189:
  v50 = *(_QWORD *)(v5 + 344);
  if (!v50)
    v50 = *(_QWORD *)(qword_102310D28 + 344);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3F8, v50, a2, a4);
  v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 0x800) == 0)
  {
LABEL_142:
    if ((v39 & 0x1000) == 0)
      goto LABEL_143;
    goto LABEL_195;
  }
LABEL_192:
  v51 = *(_QWORD *)(v5 + 352);
  if (!v51)
    v51 = *(_QWORD *)(qword_102310D28 + 352);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3F9, v51, a2, a4);
  v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 0x1000) == 0)
  {
LABEL_143:
    if ((v39 & 0x2000) == 0)
      goto LABEL_144;
    goto LABEL_198;
  }
LABEL_195:
  v52 = *(_QWORD *)(v5 + 360);
  if (!v52)
    v52 = *(_QWORD *)(qword_102310D28 + 360);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x7D0, v52, a2, a4);
  v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 0x2000) == 0)
  {
LABEL_144:
    if ((v39 & 0x4000) == 0)
      goto LABEL_145;
    goto LABEL_201;
  }
LABEL_198:
  v53 = *(_QWORD *)(v5 + 368);
  if (!v53)
    v53 = *(_QWORD *)(qword_102310D28 + 368);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x7D1, v53, a2, a4);
  v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 0x4000) == 0)
  {
LABEL_145:
    if ((v39 & 0x8000) == 0)
      goto LABEL_146;
    goto LABEL_204;
  }
LABEL_201:
  v54 = *(_QWORD *)(v5 + 376);
  if (!v54)
    v54 = *(_QWORD *)(qword_102310D28 + 376);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x7D2, v54, a2, a4);
  v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 0x8000) == 0)
  {
LABEL_146:
    if ((v39 & 0x10000) == 0)
      goto LABEL_147;
    goto LABEL_205;
  }
LABEL_204:
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x7D3, *(_DWORD *)(v5 + 480), (int)a2, a4);
  v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 0x10000) == 0)
  {
LABEL_147:
    if ((v39 & 0x20000) == 0)
      goto LABEL_148;
    goto LABEL_208;
  }
LABEL_205:
  v55 = *(_QWORD *)(v5 + 384);
  if (!v55)
    v55 = *(_QWORD *)(qword_102310D28 + 384);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x7D4, v55, a2, a4);
  v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 0x20000) == 0)
  {
LABEL_148:
    if ((v39 & 0x40000) == 0)
      goto LABEL_149;
    goto LABEL_211;
  }
LABEL_208:
  v56 = *(_QWORD *)(v5 + 392);
  if (!v56)
    v56 = *(_QWORD *)(qword_102310D28 + 392);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x7D5, v56, a2, a4);
  v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 0x40000) == 0)
  {
LABEL_149:
    if ((v39 & 0x80000) == 0)
      goto LABEL_150;
    goto LABEL_214;
  }
LABEL_211:
  v57 = *(_QWORD *)(v5 + 400);
  if (!v57)
    v57 = *(_QWORD *)(qword_102310D28 + 400);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x7D6, v57, a2, a4);
  v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 0x80000) == 0)
  {
LABEL_150:
    if ((v39 & 0x100000) == 0)
      goto LABEL_151;
    goto LABEL_217;
  }
LABEL_214:
  v58 = *(_QWORD *)(v5 + 408);
  if (!v58)
    v58 = *(_QWORD *)(qword_102310D28 + 408);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x7D7, v58, a2, a4);
  v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 0x100000) == 0)
  {
LABEL_151:
    if ((v39 & 0x200000) == 0)
      goto LABEL_152;
    goto LABEL_220;
  }
LABEL_217:
  v59 = *(_QWORD *)(v5 + 416);
  if (!v59)
    v59 = *(_QWORD *)(qword_102310D28 + 416);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x7D8, v59, a2, a4);
  v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 0x200000) == 0)
  {
LABEL_152:
    if ((v39 & 0x400000) == 0)
      goto LABEL_153;
    goto LABEL_223;
  }
LABEL_220:
  v60 = *(_QWORD *)(v5 + 424);
  if (!v60)
    v60 = *(_QWORD *)(qword_102310D28 + 424);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x7D9, v60, a2, a4);
  v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 0x400000) == 0)
  {
LABEL_153:
    if ((v39 & 0x800000) == 0)
      goto LABEL_154;
    goto LABEL_226;
  }
LABEL_223:
  v61 = *(_QWORD *)(v5 + 432);
  if (!v61)
    v61 = *(_QWORD *)(qword_102310D28 + 432);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x7DA, v61, a2, a4);
  v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 0x800000) == 0)
  {
LABEL_154:
    if ((v39 & 0x1000000) == 0)
      goto LABEL_155;
    goto LABEL_229;
  }
LABEL_226:
  v62 = *(_QWORD *)(v5 + 440);
  if (!v62)
    v62 = *(_QWORD *)(qword_102310D28 + 440);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x7DB, v62, a2, a4);
  v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 0x1000000) == 0)
  {
LABEL_155:
    if ((v39 & 0x2000000) == 0)
      goto LABEL_156;
    goto LABEL_232;
  }
LABEL_229:
  v63 = *(_QWORD *)(v5 + 448);
  if (!v63)
    v63 = *(_QWORD *)(qword_102310D28 + 448);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x7DC, v63, a2, a4);
  v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 0x2000000) == 0)
  {
LABEL_156:
    if ((v39 & 0x4000000) == 0)
      goto LABEL_157;
    goto LABEL_235;
  }
LABEL_232:
  v64 = *(_QWORD *)(v5 + 456);
  if (!v64)
    v64 = *(_QWORD *)(qword_102310D28 + 456);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x7DD, v64, a2, a4);
  v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 0x4000000) == 0)
  {
LABEL_157:
    if ((v39 & 0x8000000) == 0)
      return result;
    goto LABEL_238;
  }
LABEL_235:
  v65 = *(_QWORD *)(v5 + 464);
  if (!v65)
    v65 = *(_QWORD *)(qword_102310D28 + 464);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x7DE, v65, a2, a4);
  if ((*(_DWORD *)(v5 + 492) & 0x8000000) != 0)
  {
LABEL_238:
    v66 = *(_QWORD *)(v5 + 472);
    if (!v66)
      v66 = *(_QWORD *)(qword_102310D28 + 472);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x7DF, v66, a2, a4);
  }
  return result;
}

void sub_1008A1964(uint64_t a1, void *lpsrc)
{
  sub_10089ABB4(a1, (uint64_t)lpsrc);
}

uint64_t sub_1008A19B0()
{
  return 1;
}

_QWORD *sub_1008A19B8@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.PrivateData.PrivateDataCapture");
}

uint64_t sub_1008A19C8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 484);
}

double sub_1008A1AE0(uint64_t a1, uint64_t a2)
{
  double result;

  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_102159A98;
  *(_QWORD *)(a1 + 8) = off_102159B40;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = a2;
  *(_QWORD *)(a1 + 296) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  return result;
}

