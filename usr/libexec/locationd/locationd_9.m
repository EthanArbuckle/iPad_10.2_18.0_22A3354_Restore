void sub_10054E8DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  sub_100261F44((uint64_t)&a13);
  sub_100261F44((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_10054E900(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLGNSSStateQueryAssertion::handleGnssStatusUpdateNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 16), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102142E10);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGNSSStateQueryAssertion::handleGnssStatusUpdateNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102142E10);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGNSSStateQueryAssertion::handleGnssStatusUpdateNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10054EC7C(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10054EAB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10054EAD8(uint64_t a1)
{
  sub_10054EAE0(*(_QWORD *)(a1 + 32));
}

void sub_10054EAE0(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102142E30);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#CLGNSSStateQueryAssertion,bbGnssStatusQueryReportingTimeout", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102142E30);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#CLGNSSStateQueryAssertion,bbGnssStatusQueryReportingTimeout", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLGNSSStateQueryAssertion::bbGnssStatusQueryReportingTimeout()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  sub_10054DFC8(a1, (double *)(a1 + 24));
}

void sub_10054EC7C(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  double *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  const char *v16;
  uint8_t *v17;
  int v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint8_t buf[4];
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;

  if (*a3 == 45)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a4 + 1488);
    v5 = (double *)(a1 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a4 + 1504);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102142DF0);
    v6 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_QWORD *)(a1 + 24);
      v8 = *(_QWORD *)(a1 + 32);
      v9 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 134284033;
      v25 = v7;
      v26 = 2049;
      v27 = v8;
      v28 = 2049;
      v29 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#CLGNSSStateQueryAssertion,daemon,handleGnssStatusUpdateNotification,gnssStart,%{private}.3lf,gnssStop,%{private}.3lf,gnssYield,%{private}.3lf", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_102142DF0);
      v11 = *(_QWORD *)(a1 + 24);
      v12 = *(_QWORD *)(a1 + 32);
      v13 = *(_QWORD *)(a1 + 40);
      v18 = 134284033;
      v19 = v11;
      v20 = 2049;
      v21 = v12;
      v22 = 2049;
      v23 = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "#CLGNSSStateQueryAssertion,daemon,handleGnssStatusUpdateNotification,gnssStart,%{private}.3lf,gnssStop,%{private}.3lf,gnssYield,%{private}.3lf", &v18, 32);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLGNSSStateQueryAssertion::handleGnssStatusUpdateNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    sub_10054DFC8(a1, v5);
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102142DF0);
    v10 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#CLGNSSStateQueryAssertion,daemon,not handleGnssStatusUpdateNotification", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_102142DF0);
      LOWORD(v18) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "#CLGNSSStateQueryAssertion,daemon,not handleGnssStatusUpdateNotification", &v18, 2);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "void CLGNSSStateQueryAssertion::handleGnssStatusUpdateNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
  }
}

void sub_10054EFBC(id a1)
{
  qword_1022A01C8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_10054EFE8(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_10054F014(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

_QWORD *sub_10054F040@<X0>(char *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_100487B64(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_10054F08C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100550AE8(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

uint64_t sub_100550B14(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  unsigned __int8 v6;
  unsigned __int8 v8;

  *(_QWORD *)a1 = &off_102142E80;
  v4 = *a2;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v4;
  if (*((char *)a2 + 47) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 32), *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(a1 + 32) = v5;
  }
  *(_DWORD *)(a1 + 56) = *((_DWORD *)a2 + 12);
  *(_BYTE *)(a1 + 64) = 0;
  v6 = atomic_load((unsigned __int8 *)&qword_102301B20);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_102301B20))
  {
    v8 = 0;
    sub_1018BF25C((unsigned __int8 *)&unk_102301B18, "ResumeRemindersModelDebugLogging", &v8, 0);
    __cxa_guard_release(&qword_102301B20);
  }
  *(_BYTE *)(a1 + 64) = byte_102301B19;
  return a1;
}

void sub_100550C00(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  __cxa_guard_abort(&qword_102301B20);
  if (*(char *)(v1 + 55) < 0)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

void sub_100550C28(uint64_t a1, double *a2)
{
  _DWORD *v4;
  unsigned __int8 v5;
  NSObject *v6;
  _QWORD *v7;
  NSObject *v8;
  _QWORD *v9;
  _QWORD *v10;
  const char *v11;
  uint8_t *v12;
  _QWORD *v13;
  const char *v14;
  uint8_t *v15;
  double v16;
  uint64_t v17;
  void *__p;
  void *v19;
  _DWORD *v20;
  int v21;
  _QWORD *v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  double v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  double v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  _QWORD v42[19];
  __int16 v43;
  __int128 v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  _QWORD v48[6];
  char v49;
  __int128 v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  int v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  _BYTE v63[25];
  int v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  int v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  int v74;
  uint64_t v75;
  __int16 v76;
  __int128 v77;
  __int128 v78;
  char v79;
  _BYTE v80[11];
  int v81;
  unint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  _BYTE v103[72];
  unint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  char v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  unint64_t v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  int v127;
  unint64_t v128;
  __int16 v129;
  int v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;

  v4 = operator new(4uLL);
  __p = v4;
  *v4 = 5;
  v19 = v4 + 1;
  v20 = v4 + 1;
  v43 = 0;
  *(_OWORD *)v42 = xmmword_101BB1ED0;
  memset(&v42[2], 0, 135);
  v44 = xmmword_101BB1ED0;
  v45 = 0;
  v46 = 0;
  v48[0] = 0;
  v47 = 0;
  *(_QWORD *)((char *)v48 + 5) = 0;
  *(_QWORD *)((char *)&v48[1] + 6) = 0;
  v49 = 0;
  memset(&v48[3], 0, 24);
  v50 = xmmword_101BB1ED0;
  v51 = 0;
  v52 = 0;
  v53 = 0xFFEFFFFFFFFFFFFFLL;
  v64 = 0;
  v54 = 0u;
  v55 = 0u;
  v56 = 0u;
  v57 = 0u;
  v58 = 0u;
  v59 = 0;
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  memset(v63, 0, sizeof(v63));
  v65 = 0;
  v66 = 0;
  v67 = 0xFFEFFFFFFFFFFFFFLL;
  v68 = 0;
  v69 = 0;
  v75 = 0;
  v76 = 0;
  v81 = 0;
  v74 = 0;
  v72 = 0u;
  v73 = 0u;
  v70 = 0u;
  v71 = 0u;
  v78 = 0u;
  v77 = 0u;
  v79 = 0;
  memset(v80, 0, sizeof(v80));
  v82 = 0xFFEFFFFFFFFFFFFFLL;
  v101 = 0u;
  v100 = 0u;
  v99 = 0u;
  v98 = 0u;
  v97 = 0u;
  v96 = 0u;
  v95 = 0u;
  v94 = 0u;
  v93 = 0u;
  v92 = 0u;
  v91 = 0u;
  v90 = 0u;
  v89 = 0u;
  v88 = 0u;
  v87 = 0u;
  v86 = 0u;
  v85 = 0u;
  v84 = 0u;
  v83 = 0u;
  v102 = 0;
  *(_QWORD *)v103 = 0xFFEFFFFFFFFFFFFFLL;
  memset(&v103[8], 0, 64);
  v104 = 0xFFEFFFFFFFFFFFFFLL;
  v105 = 0;
  v106 = 0;
  v107 = 0;
  v108 = 0;
  v109 = 0xFFEFFFFFFFFFFFFFLL;
  v111 = 0;
  v110 = 0;
  v112 = 0x80000000800000;
  v114 = 0;
  v113 = 0;
  v115 = xmmword_101BB1EE0;
  v116 = 0x80000000800000;
  v117 = 0u;
  v118 = 0u;
  v119 = 0;
  v120 = 0xFFEFFFFFFFFFFFFFLL;
  v121 = 0u;
  v122 = 0u;
  v123 = 0u;
  v124 = 0u;
  v125 = 0u;
  v126 = 0u;
  v127 = 0;
  v128 = 0xFFEFFFFFFFFFFFFFLL;
  v129 = 0;
  v130 = 0;
  v131 = 0xFFEFFFFFFFFFFFFFLL;
  v132 = 7;
  v133 = 0xFFEFFFFFFFFFFFFFLL;
  v134 = 0;
  v136 = 0;
  v135 = 0;
  v137 = 0;
  if (sub_1000D03AC(a2, &__p, (uint64_t)v42))
  {
    v37 = *(_OWORD *)v103;
    v38 = *(_OWORD *)&v103[16];
    v39 = *(_OWORD *)&v103[32];
    v40 = *(_OWORD *)&v103[48];
    v41 = *(_QWORD *)&v103[64];
    if (*(double *)v103 > *(double *)(a1 + 24))
    {
      v5 = atomic_load((unsigned __int8 *)&qword_102301B38);
      if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_102301B38))
      {
        *(_DWORD *)buf = 0;
        sub_1004AD1D8((unsigned __int8 *)&byte_102301B28, "ResumeRemindersClassificationOverride", buf, 0);
        __cxa_guard_release(&qword_102301B38);
      }
      if (byte_102301B28)
        *(_QWORD *)&v38 = dword_102301B2C;
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102142FA8);
      v6 = qword_10229FE68;
      if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
      {
        v7 = (_QWORD *)(a1 + 32);
        if (*(char *)(a1 + 55) < 0)
          v7 = (_QWORD *)*v7;
        *(_DWORD *)buf = 136315906;
        v30 = v7;
        v31 = 2048;
        v32 = v37;
        v33 = 2048;
        v34 = v38;
        v35 = 2048;
        v36 = *((float *)&v38 + 2);
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "[resume reminders] model %s, adding tier2 entry,startTime,%f,type,%zu,confidence,%f", buf, 0x2Au);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_102142FA8);
        v13 = (_QWORD *)(a1 + 32);
        if (*(char *)(a1 + 55) < 0)
          v13 = (_QWORD *)*v13;
        v21 = 136315906;
        v22 = v13;
        v23 = 2048;
        v24 = v37;
        v25 = 2048;
        v26 = v38;
        v27 = 2048;
        v28 = *((float *)&v38 + 2);
        LODWORD(v16) = 42;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "[resume reminders] model %s, adding tier2 entry,startTime,%f,type,%zu,confidence,%f", (const char *)&v21, v16, v17, *(double *)&__p);
        v15 = (uint8_t *)v14;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLWorkoutResumeReminders::DefaultActivityModel::update(const CLWorkoutPredictorInputs &)", "%s\n", v14);
        if (v15 != buf)
          free(v15);
      }
      sub_1005512BC((_QWORD *)(a1 + 72), (uint64_t)&v37);
    }
  }
  else
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102142FA8);
    v8 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_ERROR))
    {
      v9 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v9 = (_QWORD *)*v9;
      *(_DWORD *)buf = 136315138;
      v30 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[resume reminders] model %s, failed to get tier2 source", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102142FA8);
      v10 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v10 = (_QWORD *)*v10;
      LODWORD(v37) = 136315138;
      *(_QWORD *)((char *)&v37 + 4) = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 16, "[resume reminders] model %s, failed to get tier2 source", (const char *)&v37);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "virtual void CLWorkoutResumeReminders::DefaultActivityModel::update(const CLWorkoutPredictorInputs &)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
}

void sub_100551280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  __cxa_guard_abort(&qword_102301B38);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1005512BC(_QWORD *a1, uint64_t a2)
{
  unint64_t v3;

  sub_1005549C4(a1, a2);
  v3 = a1[5];
  if (v3 >= 0x78)
  {
    ++a1[4];
    a1[5] = v3 - 1;
    sub_100554D9C((uint64_t)a1, 1);
  }
}

uint64_t sub_10055130C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  NSObject *v11;
  _QWORD *v12;
  uint64_t v13;
  std::string *v14;
  std::string *v15;
  std::string *p_p;
  _QWORD *v18;
  uint64_t v19;
  std::string::size_type v20;
  std::string *v21;
  std::string *v22;
  std::string *v23;
  char *v24;
  char *v25;
  void *v26[2];
  const char *v27;
  std::string v28;
  std::string __p;
  std::string v30;
  std::string v31;
  std::string v32;
  _OWORD v33[3];
  __int128 v34[3];
  __int128 v35[3];
  std::string v36;
  std::string *v37;
  __int16 v38;
  std::string *v39;
  __int16 v40;
  std::string *v41;
  uint8_t buf[4];
  _QWORD *v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  std::string *v47;
  __int16 v48;
  std::string *v49;
  __int16 v50;
  std::string *v51;
  _QWORD v52[3];
  _QWORD *v53;
  _QWORD v54[3];
  _QWORD *v55;
  _QWORD v56[3];
  _QWORD *v57;

  v4 = (_QWORD *)(a1 + 72);
  v56[0] = off_102142FD8;
  v56[1] = a1;
  v57 = v56;
  sub_1005519E4((_QWORD *)(a1 + 72), (uint64_t)&unk_101BB6028, (uint64_t)v56, v35);
  v5 = v57;
  if (v57 == v56)
  {
    v6 = 4;
    v5 = v56;
  }
  else
  {
    if (!v57)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  v54[0] = off_102142FD8;
  v54[1] = a1;
  v55 = v54;
  sub_1005519E4(v4, (uint64_t)&unk_101BB6040, (uint64_t)v54, v34);
  v7 = v55;
  if (v55 == v54)
  {
    v8 = 4;
    v7 = v54;
  }
  else
  {
    if (!v55)
      goto LABEL_11;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_11:
  v52[0] = off_102142FD8;
  v52[1] = a1;
  v53 = v52;
  sub_1005519E4(v4, (uint64_t)&unk_101BB6058, (uint64_t)v52, v33);
  v9 = v53;
  if (v53 == v52)
  {
    v10 = 4;
    v9 = v52;
  }
  else
  {
    if (!v53)
      goto LABEL_16;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_16:
  if (*(_BYTE *)(a1 + 64))
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102142FA8);
    v11 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
    {
      v12 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v12 = (_QWORD *)*v12;
      v13 = *(_QWORD *)(a1 + 8);
      sub_1015A2E04(&v32, "ActivityTentative");
      sub_100551AE8((const void **)&v32.__r_.__value_.__l.__data_, (uint64_t)v35 + 8, &v36);
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = &v36;
      else
        v14 = (std::string *)v36.__r_.__value_.__r.__words[0];
      sub_1015A2E04(&v30, "ActivityConfident");
      v15 = &v31;
      sub_100551AE8((const void **)&v30.__r_.__value_.__l.__data_, (uint64_t)v34 + 8, &v31);
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v15 = (std::string *)v31.__r_.__value_.__r.__words[0];
      sub_1015A2E04(&v28, "ActivityRetraction");
      sub_100551AE8((const void **)&v28.__r_.__value_.__l.__data_, (uint64_t)v33 + 8, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136316162;
      v43 = v12;
      v44 = 2048;
      v45 = v13;
      v46 = 2080;
      v47 = v14;
      v48 = 2080;
      v49 = v15;
      v50 = 2080;
      v51 = p_p;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "[resume reminders] model,%s,workout,%zu,%s,%s,%s", buf, 0x34u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28.__r_.__value_.__l.__data_);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v31.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v36.__r_.__value_.__l.__data_);
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v32.__r_.__value_.__l.__data_);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102142FA8);
      v18 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v18 = (_QWORD *)*v18;
      v19 = qword_10229FE68;
      v20 = *(_QWORD *)(a1 + 8);
      sub_1015A2E04(&v31, "ActivityTentative");
      v21 = &v32;
      sub_100551AE8((const void **)&v31.__r_.__value_.__l.__data_, (uint64_t)v35 + 8, &v32);
      if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v21 = (std::string *)v32.__r_.__value_.__r.__words[0];
      sub_1015A2E04(&__p, "ActivityConfident");
      v22 = &v30;
      sub_100551AE8((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)v34 + 8, &v30);
      if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v22 = (std::string *)v30.__r_.__value_.__r.__words[0];
      sub_1015A2E04(v26, "ActivityRetraction");
      sub_100551AE8((const void **)v26, (uint64_t)v33 + 8, &v28);
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v23 = &v28;
      else
        v23 = (std::string *)v28.__r_.__value_.__r.__words[0];
      LODWORD(v36.__r_.__value_.__l.__data_) = 136316162;
      *(std::string::size_type *)((char *)v36.__r_.__value_.__r.__words + 4) = (std::string::size_type)v18;
      WORD2(v36.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&v36.__r_.__value_.__r.__words[1] + 6) = v20;
      HIWORD(v36.__r_.__value_.__r.__words[2]) = 2080;
      v37 = v21;
      v38 = 2080;
      v39 = v22;
      v40 = 2080;
      v41 = v23;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v19, 2, "[resume reminders] model,%s,workout,%zu,%s,%s,%s", (const char *)&v36, 52, (const char *)v26[0], (const char *)v26[1], v27);
      v25 = v24;
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28.__r_.__value_.__l.__data_);
      if (SHIBYTE(v27) < 0)
        operator delete(v26[0]);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v32.__r_.__value_.__l.__data_);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v31.__r_.__value_.__l.__data_);
      sub_100512490("Generic", 1, 0, 2, "virtual Result CLWorkoutResumeReminders::DefaultActivityModel::run() const", "%s\n", v25);
      if (v25 != (char *)buf)
        free(v25);
    }
  }
  return sub_100552208(a1, v4, v35, v34, v33, a2);
}

void sub_100551880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a16 < 0)
    operator delete(__p);
  if (a31 < 0)
    operator delete(a26);
  if (a25 < 0)
    operator delete(a20);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  _Unwind_Resume(a1);
}

_QWORD *sub_1005519E4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _DWORD *a4@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  _QWORD *result;
  uint64_t v10;
  _BYTE v11[24];
  _BYTE *v12;

  *a4 = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  sub_100270E34((uint64_t)v11, a3);
  v8.n128_f64[0] = sub_100554DF8(a1, v6, v7, (uint64_t)v11, (uint64_t)(a4 + 2));
  result = v12;
  if (v12 == v11)
  {
    v10 = 4;
    result = v11;
  }
  else
  {
    if (!v12)
      return result;
    v10 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(__n128))(*result + 8 * v10))(v8);
}

void sub_100551AA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_100551AE8(const void **a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  size_t v6;
  std::string *v7;
  const void *v8;
  std::string *v9;
  std::string::size_type size;
  std::string *v11;
  size_t v12;
  std::string *v13;
  const void *v14;
  std::string *v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  size_t v19;
  std::string *v20;
  const void *v21;
  std::string *v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  size_t v26;
  std::string *v27;
  const void *v28;
  std::string *v29;
  std::string::size_type v30;
  std::string *v31;
  __int128 v32;
  int v33;
  std::string::size_type v34;
  std::string *v35;
  std::string *v36;
  std::string *v37;
  std::string::size_type v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  __int128 v42;
  std::string *v43;
  std::string::size_type v44;
  std::string *v45;
  __int128 v46;
  std::string *v47;
  __int128 v48;
  std::string *v49;
  std::string::size_type v50;
  std::string *v51;
  std::string v52;
  std::string v53;
  std::string v54;
  std::string v55;
  std::string v56;
  std::string v57;
  std::string v58;
  std::string v59;
  std::string v60;

  if (*((char *)a1 + 23) >= 0)
    v6 = *((unsigned __int8 *)a1 + 23);
  else
    v6 = (size_t)a1[1];
  v7 = &v59;
  sub_100259584((uint64_t)&v59, v6 + 2);
  if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v7 = (std::string *)v59.__r_.__value_.__r.__words[0];
  if (v6)
  {
    if (*((char *)a1 + 23) >= 0)
      v8 = a1;
    else
      v8 = *a1;
    memmove(v7, v8, v6);
  }
  strcpy((char *)v7 + v6, "M,");
  std::to_string(&v58, *(_QWORD *)(a2 + 16));
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = &v58;
  else
    v9 = (std::string *)v58.__r_.__value_.__r.__words[0];
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v58.__r_.__value_.__r.__words[2]);
  else
    size = v58.__r_.__value_.__l.__size_;
  v11 = std::string::append(&v59, (const std::string::value_type *)v9, size);
  v60 = *v11;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  if (*((char *)a1 + 23) >= 0)
    v12 = *((unsigned __int8 *)a1 + 23);
  else
    v12 = (size_t)a1[1];
  v13 = &v58;
  sub_100259584((uint64_t)&v58, v12 + 2);
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v13 = (std::string *)v58.__r_.__value_.__r.__words[0];
  if (v12)
  {
    if (*((char *)a1 + 23) >= 0)
      v14 = a1;
    else
      v14 = *a1;
    memmove(v13, v14, v12);
  }
  strcpy((char *)v13 + v12, "N,");
  std::to_string(&v57, *(_QWORD *)(a2 + 24));
  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &v57;
  else
    v15 = (std::string *)v57.__r_.__value_.__r.__words[0];
  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
  else
    v16 = v57.__r_.__value_.__l.__size_;
  v17 = std::string::append(&v58, (const std::string::value_type *)v15, v16);
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  if (*((char *)a1 + 23) >= 0)
    v19 = *((unsigned __int8 *)a1 + 23);
  else
    v19 = (size_t)a1[1];
  v20 = &v57;
  sub_100259584((uint64_t)&v57, v19 + 5);
  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v20 = (std::string *)v57.__r_.__value_.__r.__words[0];
  if (v19)
  {
    if (*((char *)a1 + 23) >= 0)
      v21 = a1;
    else
      v21 = *a1;
    memmove(v20, v21, v19);
  }
  strcpy((char *)v20 + v19, "Time,");
  std::to_string(&v56, *(double *)a2);
  if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = &v56;
  else
    v22 = (std::string *)v56.__r_.__value_.__r.__words[0];
  if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
  else
    v23 = v56.__r_.__value_.__l.__size_;
  v24 = std::string::append(&v57, (const std::string::value_type *)v22, v23);
  v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  if (*((char *)a1 + 23) >= 0)
    v26 = *((unsigned __int8 *)a1 + 23);
  else
    v26 = (size_t)a1[1];
  v27 = &v56;
  sub_100259584((uint64_t)&v56, v26 + 8);
  if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v27 = (std::string *)v56.__r_.__value_.__r.__words[0];
  if (v26)
  {
    if (*((char *)a1 + 23) >= 0)
      v28 = a1;
    else
      v28 = *a1;
    memmove(v27, v28, v26);
  }
  strcpy((char *)v27 + v26, "Matches,");
  std::to_string(&v55, *(_DWORD *)(a2 + 8));
  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v29 = &v55;
  else
    v29 = (std::string *)v55.__r_.__value_.__r.__words[0];
  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v30 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
  else
    v30 = v55.__r_.__value_.__l.__size_;
  v31 = std::string::append(&v56, (const std::string::value_type *)v29, v30);
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v57.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  v33 = SHIBYTE(v60.__r_.__value_.__r.__words[2]);
  if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v34 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
  else
    v34 = v60.__r_.__value_.__l.__size_;
  v35 = &v52;
  sub_100259584((uint64_t)&v52, v34 + 1);
  if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v35 = (std::string *)v52.__r_.__value_.__r.__words[0];
  if (v34)
  {
    if (v33 >= 0)
      v36 = &v60;
    else
      v36 = (std::string *)v60.__r_.__value_.__r.__words[0];
    memmove(v35, v36, v34);
  }
  *(_WORD *)((char *)&v35->__r_.__value_.__l.__data_ + v34) = 44;
  if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v37 = &v59;
  else
    v37 = (std::string *)v59.__r_.__value_.__r.__words[0];
  if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v38 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
  else
    v38 = v59.__r_.__value_.__l.__size_;
  v39 = std::string::append(&v52, (const std::string::value_type *)v37, v38);
  v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  v53.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  v41 = std::string::append(&v53, ",");
  v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
  v54.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v42;
  v41->__r_.__value_.__l.__size_ = 0;
  v41->__r_.__value_.__r.__words[2] = 0;
  v41->__r_.__value_.__r.__words[0] = 0;
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v43 = &v58;
  else
    v43 = (std::string *)v58.__r_.__value_.__r.__words[0];
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v44 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
  else
    v44 = v58.__r_.__value_.__l.__size_;
  v45 = std::string::append(&v54, (const std::string::value_type *)v43, v44);
  v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
  v55.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v46;
  v45->__r_.__value_.__l.__size_ = 0;
  v45->__r_.__value_.__r.__words[2] = 0;
  v45->__r_.__value_.__r.__words[0] = 0;
  v47 = std::string::append(&v55, ",");
  v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
  v56.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v48;
  v47->__r_.__value_.__l.__size_ = 0;
  v47->__r_.__value_.__r.__words[2] = 0;
  v47->__r_.__value_.__r.__words[0] = 0;
  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v49 = &v57;
  else
    v49 = (std::string *)v57.__r_.__value_.__r.__words[0];
  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v50 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
  else
    v50 = v57.__r_.__value_.__l.__size_;
  v51 = std::string::append(&v56, (const std::string::value_type *)v49, v50);
  *a3 = *v51;
  v51->__r_.__value_.__l.__size_ = 0;
  v51->__r_.__value_.__r.__words[2] = 0;
  v51->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v33 & 0x80000000) == 0)
      return;
LABEL_127:
    operator delete(v60.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v59.__r_.__value_.__l.__data_);
  if (v33 < 0)
    goto LABEL_127;
}

void sub_10055207C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  uint64_t v49;

  if (a42 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a28 < 0)
    operator delete(a23);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  if (a49 < 0)
    operator delete(a44);
  if (*(char *)(v49 - 137) < 0)
    operator delete(*(void **)(v49 - 160));
  if (*(char *)(v49 - 105) < 0)
    operator delete(*(void **)(v49 - 128));
  if (*(char *)(v49 - 73) < 0)
    operator delete(*(void **)(v49 - 96));
  _Unwind_Resume(exception_object);
}

void sub_100552174(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a30 < 0)
    operator delete(__p);
  if (a37 < 0)
    JUMPOUT(0x100552148);
  JUMPOUT(0x10055214CLL);
}

void sub_1005521A0()
{
  JUMPOUT(0x10055214CLL);
}

void sub_1005521A8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  if (a34 < 0)
    operator delete(__p);
  if (*(char *)(v34 - 137) < 0)
    JUMPOUT(0x100552158);
  JUMPOUT(0x10055215CLL);
}

void sub_1005521D4()
{
  JUMPOUT(0x10055215CLL);
}

void sub_1005521DC()
{
  uint64_t v0;

  if (*(char *)(v0 - 137) < 0)
    operator delete(*(void **)(v0 - 160));
  if (*(char *)(v0 - 105) < 0)
    JUMPOUT(0x100552168);
  JUMPOUT(0x10055216CLL);
}

uint64_t sub_100552208@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, __int128 *a3@<X2>, __int128 *a4@<X3>, _OWORD *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  double v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  double v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  *(_QWORD *)a6 = 0;
  *(_DWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = 0xBFF0000000000000;
  *(_DWORD *)(a6 + 24) = 0;
  v7 = a2[5];
  if (v7)
  {
    v8 = result;
    v9 = *(_DWORD *)(result + 56);
    if (v9 == 1)
    {
      v17 = *(_QWORD *)(*(_QWORD *)(a2[1] + 8 * ((v7 + a2[4] - 1) / 0x38uLL)) + 72 * ((v7 + a2[4] - 1) % 0x38uLL));
      v18 = *(_QWORD *)(result + 8);
      v12 = operator new(0x30uLL);
      v19 = a5[1];
      *v12 = *a5;
      v12[1] = v19;
      v12[2] = a5[2];
      if (*((double *)v12 + 1) == -1.0)
      {
        v20 = 0;
        v18 = 0;
      }
      else
      {
        v20 = *(_DWORD *)v12;
        v17 = *((_QWORD *)v12 + 1);
      }
      *(_QWORD *)a6 = v18;
      *(_DWORD *)(a6 + 8) = v20;
      *(_QWORD *)(a6 + 16) = v17;
    }
    else
    {
      if (v9)
      {
LABEL_15:
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
        *(_DWORD *)(a6 + 24) = result;
        return result;
      }
      v10 = *(double *)(*(_QWORD *)(a2[1] + 8 * ((v7 + a2[4] - 1) / 0x38uLL)) + 72 * ((v7 + a2[4] - 1) % 0x38uLL));
      v11 = *(_QWORD *)(result + 8);
      v21 = *a4;
      v22 = a4[1];
      v23 = a4[2];
      v24 = *a3;
      v25 = a3[1];
      v26 = a3[2];
      v12 = operator new(0x60uLL);
      v13 = 0;
      v12[2] = v23;
      v12[3] = v24;
      v12[4] = v25;
      v12[5] = v26;
      *v12 = v21;
      v12[1] = v22;
      while (1)
      {
        v14 = *((double *)&v12[v13] + 1);
        if (v14 != -1.0)
          break;
        v13 += 3;
        if (v13 == 6)
        {
          v11 = 0;
          v15 = 0;
          v14 = v10;
          goto LABEL_11;
        }
      }
      v15 = v12[v13];
LABEL_11:
      *(_QWORD *)a6 = v11;
      *(_DWORD *)(a6 + 8) = v15;
      *(double *)(a6 + 16) = v14;
    }
    *(_DWORD *)(a6 + 24) = 0;
    operator delete(v12);
    goto LABEL_15;
  }
  return result;
}

uint64_t sub_10055240C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  NSObject *v11;
  _QWORD *v12;
  uint64_t v13;
  std::string *v14;
  std::string *v15;
  std::string *p_p;
  _QWORD *v18;
  uint64_t v19;
  std::string::size_type v20;
  std::string *v21;
  std::string *v22;
  std::string *v23;
  char *v24;
  char *v25;
  void *v26[2];
  const char *v27;
  std::string v28;
  std::string __p;
  std::string v30;
  std::string v31;
  std::string v32;
  _OWORD v33[3];
  __int128 v34[3];
  __int128 v35[3];
  std::string v36;
  std::string *v37;
  __int16 v38;
  std::string *v39;
  __int16 v40;
  std::string *v41;
  uint8_t buf[4];
  _QWORD *v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  std::string *v47;
  __int16 v48;
  std::string *v49;
  __int16 v50;
  std::string *v51;
  _QWORD v52[3];
  _QWORD *v53;
  _QWORD v54[3];
  _QWORD *v55;
  _QWORD v56[3];
  _QWORD *v57;

  v4 = (_QWORD *)(a1 + 72);
  v56[0] = off_102143068;
  v57 = v56;
  sub_1005519E4((_QWORD *)(a1 + 72), (uint64_t)&unk_101BB6070, (uint64_t)v56, v35);
  v5 = v57;
  if (v57 == v56)
  {
    v6 = 4;
    v5 = v56;
  }
  else
  {
    if (!v57)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  v54[0] = off_102143068;
  v55 = v54;
  sub_1005519E4(v4, (uint64_t)&unk_101BB6088, (uint64_t)v54, v34);
  v7 = v55;
  if (v55 == v54)
  {
    v8 = 4;
    v7 = v54;
  }
  else
  {
    if (!v55)
      goto LABEL_11;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_11:
  v52[0] = off_102143068;
  v53 = v52;
  sub_1005519E4(v4, (uint64_t)&unk_101BB6058, (uint64_t)v52, v33);
  v9 = v53;
  if (v53 == v52)
  {
    v10 = 4;
    v9 = v52;
  }
  else
  {
    if (!v53)
      goto LABEL_16;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_16:
  if (*(_BYTE *)(a1 + 64))
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102142FA8);
    v11 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
    {
      v12 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v12 = (_QWORD *)*v12;
      v13 = *(_QWORD *)(a1 + 16);
      sub_1015A2E04(&v32, "WalkingTentative");
      sub_100551AE8((const void **)&v32.__r_.__value_.__l.__data_, (uint64_t)v35 + 8, &v36);
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = &v36;
      else
        v14 = (std::string *)v36.__r_.__value_.__r.__words[0];
      sub_1015A2E04(&v30, "WalkingConfident");
      v15 = &v31;
      sub_100551AE8((const void **)&v30.__r_.__value_.__l.__data_, (uint64_t)v34 + 8, &v31);
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v15 = (std::string *)v31.__r_.__value_.__r.__words[0];
      sub_1015A2E04(&v28, "WalkingRetraction");
      sub_100551AE8((const void **)&v28.__r_.__value_.__l.__data_, (uint64_t)v33 + 8, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136316162;
      v43 = v12;
      v44 = 2048;
      v45 = v13;
      v46 = 2080;
      v47 = v14;
      v48 = 2080;
      v49 = v15;
      v50 = 2080;
      v51 = p_p;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "[resume reminders] model,%s,workout,%zu,%s,%s,%s", buf, 0x34u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28.__r_.__value_.__l.__data_);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v31.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v36.__r_.__value_.__l.__data_);
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v32.__r_.__value_.__l.__data_);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102142FA8);
      v18 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v18 = (_QWORD *)*v18;
      v19 = qword_10229FE68;
      v20 = *(_QWORD *)(a1 + 16);
      sub_1015A2E04(&v31, "WalkingTentative");
      v21 = &v32;
      sub_100551AE8((const void **)&v31.__r_.__value_.__l.__data_, (uint64_t)v35 + 8, &v32);
      if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v21 = (std::string *)v32.__r_.__value_.__r.__words[0];
      sub_1015A2E04(&__p, "WalkingConfident");
      v22 = &v30;
      sub_100551AE8((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)v34 + 8, &v30);
      if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v22 = (std::string *)v30.__r_.__value_.__r.__words[0];
      sub_1015A2E04(v26, "WalkingRetraction");
      sub_100551AE8((const void **)v26, (uint64_t)v33 + 8, &v28);
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v23 = &v28;
      else
        v23 = (std::string *)v28.__r_.__value_.__r.__words[0];
      LODWORD(v36.__r_.__value_.__l.__data_) = 136316162;
      *(std::string::size_type *)((char *)v36.__r_.__value_.__r.__words + 4) = (std::string::size_type)v18;
      WORD2(v36.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&v36.__r_.__value_.__r.__words[1] + 6) = v20;
      HIWORD(v36.__r_.__value_.__r.__words[2]) = 2080;
      v37 = v21;
      v38 = 2080;
      v39 = v22;
      v40 = 2080;
      v41 = v23;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v19, 2, "[resume reminders] model,%s,workout,%zu,%s,%s,%s", (const char *)&v36, 52, (const char *)v26[0], (const char *)v26[1], v27);
      v25 = v24;
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28.__r_.__value_.__l.__data_);
      if (SHIBYTE(v27) < 0)
        operator delete(v26[0]);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v32.__r_.__value_.__l.__data_);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v31.__r_.__value_.__l.__data_);
      sub_100512490("Generic", 1, 0, 2, "virtual Result CLWorkoutResumeReminders::WalkModel::run() const", "%s\n", v25);
      if (v25 != (char *)buf)
        free(v25);
    }
  }
  return sub_100552208(a1, v4, v35, v34, v33, a2);
}

void sub_100552980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a16 < 0)
    operator delete(__p);
  if (a31 < 0)
    operator delete(a26);
  if (a25 < 0)
    operator delete(a20);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  _Unwind_Resume(a1);
}

void sub_100552AE4(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  NSObject *v5;
  _QWORD *v6;
  NSObject *v7;
  _QWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  _QWORD *v15;
  const char *v16;
  uint8_t *v17;
  double v18;
  double v19;
  void *__p;
  void *v21;
  _DWORD *v22;
  int v23;
  _QWORD *v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  uint8_t buf[4];
  _QWORD *v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  _QWORD v39[19];
  __int16 v40;
  __int128 v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  _QWORD v45[3];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  __int128 v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  int v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  _BYTE v63[25];
  int v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  int v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  int v74;
  uint64_t v75;
  __int16 v76;
  __int128 v77;
  __int128 v78;
  char v79;
  _BYTE v80[11];
  int v81;
  unint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  unint64_t v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  unint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  char v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  unint64_t v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  int v131;
  unint64_t v132;
  __int16 v133;
  int v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  char v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;

  v4 = operator new(4uLL);
  __p = v4;
  *v4 = 3;
  v21 = v4 + 1;
  v22 = v4 + 1;
  v40 = 0;
  *(_OWORD *)v39 = xmmword_101BB1ED0;
  memset(&v39[2], 0, 135);
  v41 = xmmword_101BB1ED0;
  v42 = 0;
  v43 = 0;
  v45[0] = 0;
  v44 = 0;
  *(_QWORD *)((char *)v45 + 5) = 0;
  *(_QWORD *)((char *)&v45[1] + 6) = 0;
  v48 = 0;
  v49 = 0;
  v46 = 0;
  v47 = 0;
  v50 = xmmword_101BB1ED0;
  v51 = 0;
  v52 = 0;
  v53 = 0xFFEFFFFFFFFFFFFFLL;
  v64 = 0;
  v54 = 0u;
  v55 = 0u;
  v56 = 0u;
  v57 = 0u;
  v58 = 0u;
  v59 = 0;
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  memset(v63, 0, sizeof(v63));
  v65 = 0;
  v66 = 0;
  v67 = 0xFFEFFFFFFFFFFFFFLL;
  v68 = 0;
  v69 = 0;
  v75 = 0;
  v76 = 0;
  v81 = 0;
  v74 = 0;
  v72 = 0u;
  v73 = 0u;
  v70 = 0u;
  v71 = 0u;
  v78 = 0u;
  v77 = 0u;
  v79 = 0;
  memset(v80, 0, sizeof(v80));
  v82 = 0xFFEFFFFFFFFFFFFFLL;
  v101 = 0u;
  v100 = 0u;
  v99 = 0u;
  v98 = 0u;
  v97 = 0u;
  v96 = 0u;
  v95 = 0u;
  v94 = 0u;
  v93 = 0u;
  v92 = 0u;
  v91 = 0u;
  v90 = 0u;
  v89 = 0u;
  v88 = 0u;
  v87 = 0u;
  v86 = 0u;
  v85 = 0u;
  v84 = 0u;
  v83 = 0u;
  v102 = 0;
  v103 = 0xFFEFFFFFFFFFFFFFLL;
  v104 = 0u;
  v105 = 0u;
  v106 = 0u;
  v107 = 0u;
  v108 = 0xFFEFFFFFFFFFFFFFLL;
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v112 = 0;
  v113 = 0xFFEFFFFFFFFFFFFFLL;
  v115 = 0;
  v114 = 0;
  v116 = 0x80000000800000;
  v118 = 0;
  v117 = 0;
  v119 = xmmword_101BB1EE0;
  v120 = 0x80000000800000;
  v121 = 0u;
  v122 = 0u;
  v123 = 0;
  v124 = 0xFFEFFFFFFFFFFFFFLL;
  v125 = 0u;
  v126 = 0u;
  v127 = 0u;
  v128 = 0u;
  v129 = 0u;
  v130 = 0u;
  v131 = 0;
  v132 = 0xFFEFFFFFFFFFFFFFLL;
  v133 = 0;
  v134 = 0;
  v135 = 0xFFEFFFFFFFFFFFFFLL;
  v136 = 7;
  v137 = 0xFFEFFFFFFFFFFFFFLL;
  v138 = 0;
  v140 = 0;
  v139 = 0;
  v141 = 0;
  if (sub_1000D03AC((double *)a2, &__p, (uint64_t)v39))
  {
    if (*((double *)&v50 + 1) <= *(double *)(a1 + 24))
      goto LABEL_19;
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102142FA8);
    v5 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
    {
      v6 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v6 = (_QWORD *)*v6;
      *(_DWORD *)buf = 136315906;
      v32 = v6;
      v33 = 2048;
      v34 = *((_QWORD *)&v50 + 1);
      v35 = 2048;
      v36 = v47;
      v37 = 2048;
      v38 = v48;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[resume reminders] model %s, adding hr entry,startTime,%f,bpm,%f,confidence,%f", buf, 0x2Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102142FA8);
      v15 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v15 = (_QWORD *)*v15;
      v23 = 136315906;
      v24 = v15;
      v25 = 2048;
      v26 = *((_QWORD *)&v50 + 1);
      v27 = 2048;
      v28 = v47;
      v29 = 2048;
      v30 = v48;
      LODWORD(v18) = 42;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "[resume reminders] model %s, adding hr entry,startTime,%f,bpm,%f,confidence,%f", (const char *)&v23, v18, v19, *(double *)&__p);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLWorkoutResumeReminders::HRModel::update(const CLWorkoutPredictorInputs &)", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
    sub_1005530FC((_QWORD *)(a1 + 72), (uint64_t)&v46);
  }
  else
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102142FA8);
    v7 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_ERROR))
    {
      v8 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v8 = (_QWORD *)*v8;
      *(_DWORD *)buf = 136315138;
      v32 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "[resume reminders] model %s, failed to get hr source", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102142FA8);
      v12 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v12 = (_QWORD *)*v12;
      v23 = 136315138;
      v24 = v12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 16, "[resume reminders] model %s, failed to get hr source", (const char *)&v23);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 0, "virtual void CLWorkoutResumeReminders::HRModel::update(const CLWorkoutPredictorInputs &)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
  v9 = *(_OWORD *)(a2 + 328);
  v10 = *(_OWORD *)(a2 + 344);
  v11 = *(_OWORD *)(a2 + 360);
  *(_OWORD *)(a1 + 164) = *(_OWORD *)(a2 + 372);
  *(_OWORD *)(a1 + 152) = v11;
  *(_OWORD *)(a1 + 136) = v10;
  *(_OWORD *)(a1 + 120) = v9;
LABEL_19:
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
}

void sub_1005530D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005530FC(_QWORD *a1, uint64_t a2)
{
  unint64_t v3;

  sub_1005550F0(a1, a2);
  v3 = a1[5];
  if (v3 >= 0x78)
  {
    ++a1[4];
    a1[5] = v3 - 1;
    sub_100555498((uint64_t)a1, 1);
  }
}

uint64_t sub_10055314C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  NSObject *v9;
  _QWORD *v10;
  uint64_t v11;
  std::string *p_p;
  _QWORD *v14;
  uint64_t v15;
  std::string::size_type v16;
  std::string *v17;
  char *v18;
  char *v19;
  void *v20[2];
  char v21;
  std::string v22;
  _OWORD v23[3];
  __int128 v24[3];
  std::string __p;
  std::string *v26;
  uint8_t buf[4];
  _QWORD *v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  std::string *v32;
  _QWORD v33[3];
  _QWORD *v34;
  _QWORD v35[3];
  _QWORD *v36;

  v4 = (_QWORD *)(a1 + 72);
  v35[0] = off_1021430E8;
  v35[1] = a1;
  v36 = v35;
  sub_100553570((_QWORD *)(a1 + 72), (uint64_t)&unk_101BB60E0, (uint64_t)v35, v24);
  v5 = v36;
  if (v36 == v35)
  {
    v6 = 4;
    v5 = v35;
  }
  else
  {
    if (!v36)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  v33[0] = off_1021430E8;
  v33[1] = a1;
  v34 = v33;
  sub_100553570(v4, (uint64_t)&unk_101BB6058, (uint64_t)v33, v23);
  v7 = v34;
  if (v34 == v33)
  {
    v8 = 4;
    v7 = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_11;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_11:
  if (*(_BYTE *)(a1 + 64))
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102142FA8);
    v9 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v10 = (_QWORD *)*v10;
      v11 = *(_QWORD *)(a1 + 8);
      sub_1015A2E04(&v22, "HRConfident");
      sub_100551AE8((const void **)&v22.__r_.__value_.__l.__data_, (uint64_t)v24 + 8, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315650;
      v28 = v10;
      v29 = 2048;
      v30 = v11;
      v31 = 2080;
      v32 = p_p;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "[resume reminders] model,%s,workout,%zu,%s", buf, 0x20u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v22.__r_.__value_.__l.__data_);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102142FA8);
      v14 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v14 = (_QWORD *)*v14;
      v15 = qword_10229FE68;
      v16 = *(_QWORD *)(a1 + 8);
      sub_1015A2E04(v20, "HRConfident");
      sub_100551AE8((const void **)v20, (uint64_t)v24 + 8, &v22);
      if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = &v22;
      else
        v17 = (std::string *)v22.__r_.__value_.__r.__words[0];
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v14;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v16;
      HIWORD(__p.__r_.__value_.__r.__words[2]) = 2080;
      v26 = v17;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v15, 2, "[resume reminders] model,%s,workout,%zu,%s", (const char *)&__p, 32, (const char *)v20[0]);
      v19 = v18;
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v22.__r_.__value_.__l.__data_);
      if (v21 < 0)
        operator delete(v20[0]);
      sub_100512490("Generic", 1, 0, 2, "virtual Result CLWorkoutResumeReminders::HRModel::run() const", "%s\n", v19);
      if (v19 != (char *)buf)
        free(v19);
    }
  }
  return sub_100553674(a1, v4, v24, v24, v23, a2);
}

void sub_1005534E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100553570@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _DWORD *a4@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  _QWORD *result;
  uint64_t v10;
  _BYTE v11[24];
  _BYTE *v12;

  *a4 = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  sub_100270E34((uint64_t)v11, a3);
  v8.n128_f64[0] = sub_1005554F4(a1, v6, v7, (uint64_t)v11, (uint64_t)(a4 + 2));
  result = v12;
  if (v12 == v11)
  {
    v10 = 4;
    result = v11;
  }
  else
  {
    if (!v12)
      return result;
    v10 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(__n128))(*result + 8 * v10))(v8);
}

void sub_100553634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_100553674@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, __int128 *a3@<X2>, __int128 *a4@<X3>, _OWORD *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  double v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  double v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  *(_QWORD *)a6 = 0;
  *(_DWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = 0xBFF0000000000000;
  *(_DWORD *)(a6 + 24) = 0;
  v7 = a2[5];
  if (v7)
  {
    v8 = result;
    v9 = *(_DWORD *)(result + 56);
    if (v9 == 1)
    {
      v17 = *(_QWORD *)(*(_QWORD *)(a2[1] + (((unint64_t)(v7 + a2[4] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8))
                      + (((v7 + a2[4] - 1) & 0x3F) << 6)
                      + 40);
      v18 = *(_QWORD *)(result + 8);
      v12 = operator new(0x30uLL);
      v19 = a5[1];
      *v12 = *a5;
      v12[1] = v19;
      v12[2] = a5[2];
      if (*((double *)v12 + 1) == -1.0)
      {
        v20 = 0;
        v18 = 0;
      }
      else
      {
        v20 = *(_DWORD *)v12;
        v17 = *((_QWORD *)v12 + 1);
      }
      *(_QWORD *)a6 = v18;
      *(_DWORD *)(a6 + 8) = v20;
      *(_QWORD *)(a6 + 16) = v17;
    }
    else
    {
      if (v9)
      {
LABEL_15:
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
        *(_DWORD *)(a6 + 24) = result;
        return result;
      }
      v10 = *(double *)(*(_QWORD *)(a2[1] + (((unint64_t)(v7 + a2[4] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8))
                      + (((v7 + a2[4] - 1) & 0x3F) << 6)
                      + 40);
      v11 = *(_QWORD *)(result + 8);
      v21 = *a4;
      v22 = a4[1];
      v23 = a4[2];
      v24 = *a3;
      v25 = a3[1];
      v26 = a3[2];
      v12 = operator new(0x60uLL);
      v13 = 0;
      v12[2] = v23;
      v12[3] = v24;
      v12[4] = v25;
      v12[5] = v26;
      *v12 = v21;
      v12[1] = v22;
      while (1)
      {
        v14 = *((double *)&v12[v13] + 1);
        if (v14 != -1.0)
          break;
        v13 += 3;
        if (v13 == 6)
        {
          v11 = 0;
          v15 = 0;
          v14 = v10;
          goto LABEL_11;
        }
      }
      v15 = v12[v13];
LABEL_11:
      *(_QWORD *)a6 = v11;
      *(_DWORD *)(a6 + 8) = v15;
      *(double *)(a6 + 16) = v14;
    }
    *(_DWORD *)(a6 + 24) = 0;
    operator delete(v12);
    goto LABEL_15;
  }
  return result;
}

_QWORD *sub_100553848(_QWORD *a1, uint64_t a2, uint64_t a3, double a4)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = a2;
  a1[4] = 66;
  a1[5] = 0x7FEFFFFFFFFFFFFFLL;
  sub_1005538A4(a1, a3, a4);
  return a1;
}

void sub_10055388C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100544EF4((void ***)va);
  _Unwind_Resume(a1);
}

void sub_1005538A4(_QWORD *a1, uint64_t a2, double a3)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t buf[16];
  double v14;
  void *__p[2];
  int v16;
  _DWORD v17[4];

  if (a1[4] == a2)
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102142FA8);
    v4 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[resume reminders] already selected workout %ld", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102142FA8);
      v17[0] = 134217984;
      *(_QWORD *)&v17[1] = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "[resume reminders] already selected workout %ld", v17);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutResumeReminders::Detector::createModelsForWorkout(CMWorkoutType, CFAbsoluteTime)", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    a1[4] = a2;
    v9 = (_QWORD *)*a1;
    v10 = (_QWORD *)a1[1];
    while (v10 != v9)
    {
      v12 = *--v10;
      v11 = v12;
      *v10 = 0;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
    }
    a1[1] = v9;
    switch(a2)
    {
      case 1:
      case 2:
      case 15:
      case 16:
      case 17:
      case 18:
      case 24:
        *(_QWORD *)buf = a2;
        *(_QWORD *)&buf[8] = 1;
        v14 = a3;
        sub_1015A2E04(__p, "WalkModel");
        v16 = 0;
        operator new();
      case 3:
      case 4:
        *(_QWORD *)buf = a2;
        *(_QWORD *)&buf[8] = 4;
        v14 = a3;
        sub_1015A2E04(__p, "DefaultActivityModel");
        v16 = 0;
        sub_100554680();
      case 5:
      case 6:
      case 7:
      case 8:
      case 10:
      case 11:
      case 13:
      case 14:
      case 20:
      case 21:
      case 22:
      case 23:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
        *(_QWORD *)buf = a2;
        *(_QWORD *)&buf[8] = 0;
        v14 = a3;
        sub_1015A2E04(__p, "HRModel");
        v16 = 0;
        operator new();
      case 9:
        *(int64x2_t *)buf = vdupq_n_s64(9uLL);
        v14 = a3;
        sub_1015A2E04(__p, "DefaultActivityModel");
        v16 = 0;
        sub_100554680();
      case 12:
        *(int64x2_t *)buf = vdupq_n_s64(0xCuLL);
        v14 = a3;
        sub_1015A2E04(__p, "DefaultActivityModel");
        v16 = 0;
        sub_100554680();
      case 19:
        *(int64x2_t *)buf = vdupq_n_s64(0x13uLL);
        v14 = a3;
        sub_1015A2E04(__p, "DefaultActivityModel");
        v16 = 0;
        sub_100554680();
      default:
        return;
    }
  }
}

void sub_100554044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v23;

  v23 = *(_QWORD *)(v21 - 128);
  *(_QWORD *)(v21 - 128) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 32))(v23);
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 32))(a12);
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t **sub_100554238(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  void **v6;

  v2 = *a1;
  v3 = a1[1];
  while (v2 != v3)
  {
    v4 = *v2;
    *v2 = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
    ++v2;
  }
  v6 = (void **)a1;
  sub_100544EF4(&v6);
  return a1;
}

double *sub_1005542A4@<X0>(double *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  double *v5;
  int v6;
  double v7;
  double v8;
  _BYTE v9[28];

  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0xBFF0000000000000;
  *(_DWORD *)(a2 + 24) = 0;
  v3 = *(_QWORD **)result;
  v4 = (_QWORD *)*((_QWORD *)result + 1);
  if (*(_QWORD **)result != v4)
  {
    v5 = result;
    v6 = 0;
    do
    {
      (**(void (***)(_QWORD, _QWORD))*v3)(*v3, *((_QWORD *)v5 + 3));
      result = (double *)(*(_QWORD *(**)(_BYTE *__return_ptr))(*(_QWORD *)*v3 + 8))(v9);
      if (*(int *)&v9[8] >= v6)
      {
        *(_OWORD *)a2 = *(_OWORD *)v9;
        *(_OWORD *)(a2 + 12) = *(_OWORD *)&v9[12];
        v6 = *(_DWORD *)(a2 + 8);
      }
      if ((v6 - 1) <= 1)
      {
        v7 = *(double *)(a2 + 16);
        if (v7 >= v5[5])
          v7 = v5[5];
        v5[5] = v7;
      }
      ++v3;
    }
    while (v3 != v4);
    if (v6)
    {
      v8 = v5[5];
    }
    else
    {
      v5[5] = 1.79769313e308;
      v8 = 1.79769313e308;
    }
    if (v8 == 1.79769313e308)
      v8 = *(double *)(a2 + 16);
    *(double *)(a2 + 16) = v8;
  }
  return result;
}

void sub_1005543A4(uint64_t **a1, int a2)
{
  NSObject *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102142FA8);
  v4 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v12 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[resume reminders] setting detection mode to %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102142FA8);
    v10[0] = 67109120;
    v10[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "[resume reminders] setting detection mode to %d", v10);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutResumeReminders::Detector::setMode(DetectionMode)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  v5 = *a1;
  v6 = a1[1];
  while (v5 != v6)
  {
    v7 = *v5++;
    *(_DWORD *)(v7 + 56) = a2;
  }
}

uint64_t sub_100554568(char **a1, uint64_t *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  int64x2_t v21;
  char *v22;
  uint64_t v23;
  int64x2_t v24;
  char *v25;
  uint64_t v26;

  v6 = (unint64_t)a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v10 = (v7 - *a1) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      sub_100259694();
    v11 = v5 - (_QWORD)*a1;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v26 = result;
    if (v13)
      v14 = (char *)sub_10025E6A0(result, v13);
    else
      v14 = 0;
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    v25 = v16;
    v17 = *a2;
    *a2 = 0;
    *(_QWORD *)v15 = v17;
    v9 = v15 + 8;
    v24.i64[1] = (uint64_t)(v15 + 8);
    v19 = *a1;
    v18 = a1[1];
    if (v18 == *a1)
    {
      v21 = vdupq_n_s64((unint64_t)v18);
    }
    else
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *(_QWORD *)v18 = 0;
        *((_QWORD *)v15 - 1) = v20;
        v15 -= 8;
      }
      while (v18 != v19);
      v21 = *(int64x2_t *)a1;
      v9 = (char *)v24.i64[1];
      v16 = v25;
    }
    *a1 = v15;
    a1[1] = v9;
    v24 = v21;
    v22 = a1[2];
    a1[2] = v16;
    v25 = v22;
    v23 = v21.i64[0];
    result = sub_100555754((uint64_t)&v23);
  }
  else
  {
    v8 = *a2;
    *a2 = 0;
    *(_QWORD *)v7 = v8;
    v9 = v7 + 8;
  }
  a1[1] = v9;
  return result;
}

void sub_100554680()
{
  operator new();
}

void sub_1005546EC()
{
  operator delete();
}

uint64_t sub_100554710(uint64_t a1)
{
  *(_QWORD *)a1 = off_102142EB8;
  sub_10055489C((_QWORD *)(a1 + 72));
  *(_QWORD *)a1 = &off_102142E80;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  return a1;
}

void sub_100554760(uint64_t a1)
{
  *(_QWORD *)a1 = off_102142EB8;
  sub_10055489C((_QWORD *)(a1 + 72));
  *(_QWORD *)a1 = &off_102142E80;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  operator delete();
}

uint64_t sub_1005547C0(uint64_t a1)
{
  *(_QWORD *)a1 = off_102142F28;
  sub_100554930((_QWORD *)(a1 + 72));
  *(_QWORD *)a1 = &off_102142E80;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  return a1;
}

void sub_100554810(uint64_t a1)
{
  *(_QWORD *)a1 = off_102142F28;
  sub_100554930((_QWORD *)(a1 + 72));
  *(_QWORD *)a1 = &off_102142E80;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  operator delete();
}

void sub_100554870(id a1)
{
  qword_10229FE68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

uint64_t sub_10055489C(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 28;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 56;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return sub_10002E778((uint64_t)a1);
}

uint64_t sub_100554930(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 32;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 64;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return sub_10002E778((uint64_t)a1);
}

__n128 sub_1005549C4(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 56 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100554A88(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x38)) + 72 * (v7 % 0x38);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v10 = *(_OWORD *)(a2 + 32);
  v11 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(v8 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(v8 + 32) = v10;
  *(_OWORD *)(v8 + 48) = v11;
  *(__n128 *)(v8 + 16) = result;
  ++a1[5];
  return result;
}

void sub_100554A88(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x38;
  v4 = v2 - 56;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFC0uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFC0uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFC0uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100554D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100554D9C(uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x38)
    a2 = 1;
  if (v2 < 0x70)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 56;
  }
  return v4 ^ 1u;
}

double sub_100554DF8@<D0>(_QWORD *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  double result;
  uint64_t v24;

  *(_QWORD *)a5 = 0xBFF0000000000000;
  *(_DWORD *)(a5 + 8) = 0;
  v10 = a1[4];
  v9 = a1[5];
  *(_BYTE *)(a5 + 32) = v9 >= a3;
  *(_QWORD *)(a5 + 16) = a2;
  *(_QWORD *)(a5 + 24) = a3;
  v11 = v10 + v9;
  v12 = (v10 + v9) / 0x38;
  v13 = a1[1];
  v14 = a1[2];
  v15 = (_QWORD *)(v13 + 8 * v12);
  if (v14 == v13)
    v16 = 0;
  else
    v16 = *v15 + 72 * (v11 - 56 * v12);
  if (a3 <= 1)
    v17 = 1;
  else
    v17 = a3;
  for (i = v17 - 1; ; --i)
  {
    v19 = v14 == v13 ? 0 : *(_QWORD *)(v13 + 8 * (a1[4] / 0x38uLL)) + 72 * (a1[4] % 0x38uLL);
    if (v16 == v19)
      break;
    v20 = v16;
    if (v16 == *v15)
      v20 = *(v15 - 1) + 4032;
    v21 = *(_QWORD *)(a4 + 24);
    if (!v21)
      sub_10025FD1C();
    v22 = *(int *)(a5 + 8)
        + (unint64_t)(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 48))(v21, v20 - 72);
    *(_DWORD *)(a5 + 8) = v22;
    if (a2 <= v22)
    {
      if (v16 == *v15)
        v16 = *(v15 - 1) + 4032;
      result = *(double *)(v16 - 72);
      *(double *)a5 = result;
      return result;
    }
    if (!i)
      return result;
    if (v16 == *v15)
    {
      v24 = *--v15;
      v16 = v24 + 4032;
    }
    v16 -= 72;
    v13 = a1[1];
    v14 = a1[2];
  }
  return result;
}

void sub_100554F7C()
{
  operator delete();
}

_QWORD *sub_100554F90(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102142FD8;
  result[1] = v3;
  return result;
}

uint64_t sub_100554FC4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102142FD8;
  a2[1] = v2;
  return result;
}

BOOL sub_100554FE0(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16) == *(_QWORD *)(a2 + 16);
}

uint64_t sub_100554FF8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100555034()
{
}

void sub_100555044()
{
  operator delete();
}

_QWORD *sub_100555058()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_102143068;
  return result;
}

void sub_10055507C(uint64_t a1, _QWORD *a2)
{
  *a2 = off_102143068;
}

BOOL sub_100555094(uint64_t a1, uint64_t a2)
{
  return (unint64_t)(*(_QWORD *)(a2 + 16) - 1) < 2;
}

uint64_t sub_1005550A8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1005550E4()
{
}

__n128 sub_1005550F0(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 8 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100555184(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) + ((v7 & 0x3F) << 6);
  result = *(__n128 *)a2;
  v10 = *(_OWORD *)(a2 + 16);
  v11 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v8 + 48) = v11;
  *(__n128 *)v8 = result;
  *(_OWORD *)(v8 + 16) = v10;
  ++a1[5];
  return result;
}

void sub_100555184(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x40;
  v4 = v2 - 64;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_10055544C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100555498(uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x40)
    a2 = 1;
  if (v2 < 0x80)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 64;
  }
  return v4 ^ 1u;
}

double sub_1005554F4@<D0>(_QWORD *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  double result;
  uint64_t v24;

  *(_QWORD *)a5 = 0xBFF0000000000000;
  *(_DWORD *)(a5 + 8) = 0;
  v10 = a1[4];
  v9 = a1[5];
  *(_BYTE *)(a5 + 32) = v9 >= a3;
  *(_QWORD *)(a5 + 16) = a2;
  *(_QWORD *)(a5 + 24) = a3;
  v11 = v10 + v9;
  v12 = (v10 + v9) >> 6;
  v13 = a1[1];
  v14 = a1[2];
  v15 = (_QWORD *)(v13 + 8 * v12);
  if (v14 == v13)
    v16 = 0;
  else
    v16 = *v15 + ((unint64_t)(v11 & 0x3F) << 6);
  if (a3 <= 1)
    v17 = 1;
  else
    v17 = a3;
  for (i = v17 - 1; ; --i)
  {
    v19 = v14 == v13 ? 0 : *(_QWORD *)(v13 + ((a1[4] >> 3) & 0x1FFFFFFFFFFFFFF8)) + ((a1[4] & 0x3FLL) << 6);
    if (v16 == v19)
      break;
    v20 = v16;
    if (v16 == *v15)
      v20 = *(v15 - 1) + 4096;
    v21 = *(_QWORD *)(a4 + 24);
    if (!v21)
      sub_10025FD1C();
    v22 = *(int *)(a5 + 8)
        + (unint64_t)(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 48))(v21, v20 - 64);
    *(_DWORD *)(a5 + 8) = v22;
    if (a2 <= v22)
    {
      if (v16 == *v15)
        v16 = *(v15 - 1) + 4096;
      result = *(double *)(v16 - 24);
      *(double *)a5 = result;
      return result;
    }
    if (!i)
      return result;
    if (v16 == *v15)
    {
      v24 = *--v15;
      v16 = v24 + 4096;
    }
    v16 -= 64;
    v13 = a1[1];
    v14 = a1[2];
  }
  return result;
}

void sub_10055564C()
{
  operator delete();
}

_QWORD *sub_100555660(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021430E8;
  result[1] = v3;
  return result;
}

uint64_t sub_100555694(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021430E8;
  a2[1] = v2;
  return result;
}

BOOL sub_1005556B0(uint64_t a1, uint64_t a2)
{
  float *v2;
  float v3;

  v2 = *(float **)(a1 + 8);
  v3 = (v2[37] - *(double *)(a2 + 8)) / (v2[37] - v2[36]);
  return (float)(sub_10108B14C(v3, v2[35]) * v2[34]) > 4.4021;
}

uint64_t sub_10055570C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100555748()
{
}

uint64_t sub_100555754(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_100555C40(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_1021431B0);
  v2 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLGLS,GNSSLocationService,invalidation handler", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_1021431B0);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "CLGLS,GNSSLocationService,invalidation handler", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "-[CLGnssLocationXPCServiceManager getConnection]_block_invoke", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 32);
  if (v4)
  {

    v3 = *(_QWORD *)(a1 + 32);
  }
  *(_QWORD *)(v3 + 32) = 0;
}

void sub_100555DE8(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_1021431B0);
  v2 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLGLS,GNSSLocationService,interruption handler", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_1021431B0);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "CLGLS,GNSSLocationService,interruption handler", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "-[CLGnssLocationXPCServiceManager getConnection]_block_invoke", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 9) = 1;
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 32);
  if (v4)
  {
    objc_msgSend(v4, "invalidate");

    v3 = *(_QWORD *)(a1 + 32);
  }
  *(_QWORD *)(v3 + 32) = 0;
}

void sub_100556380(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_1021431B0);
  v4 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLGLS,reconfigureRavenIfNeeded,completed,success,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_1021431B0);
    v7[0] = 67240192;
    v7[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "CLGLS,reconfigureRavenIfNeeded,completed,success,%{public}d", v7, 8);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "-[CLGnssLocationXPCServiceManager reconfigureRavenIfNeeded]_block_invoke", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 9) = 0;
}

void sub_100556550(id a1, NSError *a2)
{
  NSObject *v3;
  uint64_t v4;
  const char *v5;
  uint8_t *v6;
  int v7;
  NSString *v8;
  uint8_t buf[4];
  NSString *v10;

  if (a2)
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_1021431B0);
    v3 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v10 = -[NSError localizedDescription](a2, "localizedDescription");
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "CLGLS,getSynchronousRemoteObjectProxy error %{public}@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_1021431B0);
      v4 = qword_1022A00A8;
      v7 = 138543362;
      v8 = -[NSError localizedDescription](a2, "localizedDescription");
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v4, 16, "CLGLS,getSynchronousRemoteObjectProxy error %{public}@", &v7, 12);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "-[CLGnssLocationXPCServiceManager getSynchronousRemoteObjectProxy]_block_invoke", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
}

uint64_t sub_100556AB8(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "reset");
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t sub_100556CF0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_100556ED8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10055727C(id a1)
{
  qword_1022A00A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Raven");
}

void sub_1005572A8()
{
  operator new();
}

void sub_100557300()
{
  operator delete();
}

void sub_100557324(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a1 = off_1021431E0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = a2;
  *(_QWORD *)(a1 + 56) = a3;
  sub_100647FA8();
}

void sub_1005575D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (a15 < 0)
    operator delete(__p);
  v18 = v15[5];
  v15[5] = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = v15[4];
  v15[4] = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = v15[3];
  v15[3] = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = v15[2];
  v15[2] = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = *v16;
  *v16 = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  _Unwind_Resume(exception_object);
}

void sub_100557698(uint64_t a1, _DWORD *a2, int *a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLNetworkLocationProvider::onStatusNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102143238);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLNetworkLocationProvider::onStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102143238);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLNetworkLocationProvider::onStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1007163AC(a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100557860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100557880(uint64_t a1, _DWORD *a2, uint64_t a3, id *a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id *v19;

  CLProfilingIdentify("CLNetworkLocationProvider::onManagerNotification");
  objc_msgSend(objc_msgSend(a4[4], "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102143238);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLNetworkLocationProvider::onManagerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102143238);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLNetworkLocationProvider::onManagerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100716788(a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100557A48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100557A68(uint64_t a1, int *a2, unsigned __int8 *a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLNetworkLocationProvider::onCompanionNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102143238);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLNetworkLocationProvider::onCompanionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102143238);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLNetworkLocationProvider::onCompanionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100716DBC(a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100557C30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100557C50(uint64_t a1, _DWORD *a2, int *a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLNetworkLocationProvider::onDataProtectionNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102143238);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLNetworkLocationProvider::onDataProtectionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102143238);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLNetworkLocationProvider::onDataProtectionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1007173A8(a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100557E18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100557E38(uint64_t a1, int *a2, void **a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLNetworkLocationProvider::onTelephonyNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102143238);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLNetworkLocationProvider::onTelephonyNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102143238);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLNetworkLocationProvider::onTelephonyNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1007173FC(a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100558000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

id sub_100558020(uint64_t a1)
{
  return objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 56), "vendor"), "proxyForService:", CFSTR("CLDaemonStatus")), "syncgetReachability");
}

BOOL sub_100558044(uint64_t a1)
{
  return objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 56), "vendor"), "proxyForService:", CFSTR("CLDataProtectionManager")), "syncgetDataAvailability") != 1;
}

id sub_100558078(uint64_t a1)
{
  id v1;
  uint64_t *v2;

  v1 = objc_msgSend(objc_msgSend(*(id *)(a1 + 56), "vendor"), "proxyForService:", CFSTR("CLClientManager"));
  if (byte_102301B57 >= 0)
    v2 = &qword_102301B40;
  else
    v2 = (uint64_t *)qword_102301B40;
  return objc_msgSend(v1, "resetNotificationConsumedForIdentifier:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v2));
}

_QWORD *sub_1005580D4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = off_1021431E0;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[3];
  a1[3] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = a1[2];
  a1[2] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = a1[1];
  a1[1] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return a1;
}

void sub_100558178(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = off_1021431E0;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[3];
  a1[3] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = a1[2];
  a1[2] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = a1[1];
  a1[1] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  operator delete();
}

void sub_10055822C(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_100558258()
{
  sub_1015A2E04(&qword_102301B40, "NetworkLocationProvider");
  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102301B40, (void *)&_mh_execute_header);
}

uint64_t sub_10055829C(uint64_t a1)
{
  sub_100126B34(a1 + 3016);
  sub_100126A1C(a1 + 808);
  sub_100126D5C(a1);
  return a1;
}

void sub_1005582D4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  const char *v9;
  NSObject *v10;
  const char *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  int *v17;
  char v18;
  NSObject *v19;
  const char *v20;
  const char *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  NSObject *v25;
  char *v26;
  const char *v27;
  char *v28;
  uint64_t v29;
  const char *v30;
  const char *v31;
  char *v32;
  uint64_t v33;
  _WORD __src[260];
  uint64_t v35;
  std::__shared_weak_count *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  char v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _OWORD v52[2];
  int v53;
  const char *v54;
  __int16 v55;
  const char *v56;
  _BYTE buf[32];
  __int128 v58;
  _BYTE v59[28];
  const char *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  _BYTE v66[513];
  uint64_t v67;
  std::__shared_weak_count *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  char v75;

  v4 = a1 + 5092;
  sub_10013128C((_DWORD *)a2, a1);
  if (*(_BYTE *)(v4 + 1356)
    && (*(int *)(a1 + 6472) > 0 || *(int *)(a1 + 6476) > 0 || *(int *)(a1 + 6480) > 0)
    && *(_BYTE *)(a1 + 810))
  {
    if (sub_100182290(a1 + 5016))
    {
      v5 = *(_OWORD *)(a1 + 5064);
      v51 = *(_OWORD *)(a1 + 5048);
      v52[0] = v5;
      *(_OWORD *)((char *)v52 + 12) = *(_OWORD *)(a1 + 5076);
      v6 = *(_OWORD *)(a1 + 5032);
      v49 = *(_OWORD *)(a1 + 5016);
      v50 = v6;
      v7 = *(_OWORD *)(a1 + 5116);
      v8 = *(_OWORD *)(a1 + 5148);
      v46 = *(_OWORD *)(a1 + 5132);
      v47 = v8;
      v48 = *(_QWORD *)(a1 + 5164);
      v44 = *(_OWORD *)(a1 + 5100);
      v45 = v7;
      v9 = *(const char **)(a1 + 6456);
      sub_100BF965C(a1 + 5016, (uint64_t)__src);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_102143380);
      v10 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *(const char **)v4;
        *(_DWORD *)buf = 134349312;
        *(_QWORD *)&buf[4] = v9;
        *(_WORD *)&buf[12] = 2050;
        *(_QWORD *)&buf[14] = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "@WifiFlow, reissue, time, %{public}.1f, last, %{public}.1f", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_102143380);
        v27 = *(const char **)v4;
        v53 = 134349312;
        v54 = v9;
        v55 = 2050;
        v56 = v27;
        v28 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@WifiFlow, reissue, time, %{public}.1f, last, %{public}.1f", &v53, 22);
        sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::NotifyClients::HandleEvent::operator()(const Events::Client::UpdateTimer &) const", "%s\n", v28);
        if (v28 != buf)
          free(v28);
      }
      v58 = v51;
      *(_OWORD *)v59 = v52[0];
      *(_OWORD *)&v59[12] = *(_OWORD *)((char *)v52 + 12);
      *(_OWORD *)buf = v49;
      *(_OWORD *)&buf[16] = v50;
      v60 = v9;
      v62 = v45;
      v63 = v46;
      v64 = v47;
      v65 = v48;
      v61 = v44;
      memcpy(v66, __src, sizeof(v66));
      v67 = v35;
      v68 = v36;
      if (v36)
      {
        p_shared_owners = (unint64_t *)&v36->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      v73 = v41;
      v74 = v42;
      v69 = v37;
      v70 = v38;
      v71 = v39;
      v72 = v40;
      v75 = v43;
      sub_1005589C8(a2 + 1992, (uint64_t)buf);
      v14 = v68;
      if (v68)
      {
        v15 = (unint64_t *)&v68->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      ++*(_DWORD *)(*(_QWORD *)(a2 + 6496) + 236);
      v17 = (int *)(a2 + 6516);
      *(_QWORD *)(a2 + 6528) = sub_100223BB8(a2 + 6516);
      *(_BYTE *)(a2 + 6536) = v18;
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_102143380);
      v19 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
      {
        v20 = sub_10006F774(*(_DWORD *)(a2 + 6528));
        v21 = sub_10006F774(*v17);
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = v20;
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v21;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "@WifiFlow, inter-locreq state update per update timer event, staging, %{public}s, current, %{public}s", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_102143380);
        v29 = qword_1022A0058;
        v30 = sub_10006F774(*(_DWORD *)(a2 + 6528));
        v31 = sub_10006F774(*v17);
        v53 = 136446466;
        v54 = v30;
        v55 = 2082;
        v56 = v31;
        LODWORD(v33) = 22;
        v32 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v29, 1, "@WifiFlow, inter-locreq state update per update timer event, staging, %{public}s, current, %{public}s", &v53, v33);
        sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::NotifyClients::HandleEvent::operator()(const Events::Client::UpdateTimer &) const", "%s\n", v32);
        if (v32 != buf)
          free(v32);
      }
      v22 = v36;
      if (v36)
      {
        v23 = (unint64_t *)&v36->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
    }
    else
    {
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_102143380);
      v25 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "@WifiFlow, reissue, invalid location, #CloneMe", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_102143380);
        __src[0] = 0;
        v26 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@WifiFlow, reissue, invalid location, #CloneMe", __src, 2);
        sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::NotifyClients::HandleEvent::operator()(const Events::Client::UpdateTimer &) const", "%s\n", v26);
        if (v26 != buf)
          free(v26);
      }
    }
  }
}

void sub_100558974(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100261F44((uint64_t)&STACK[0x218]);
  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1005589C8(uint64_t a1, uint64_t a2)
{
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v4 = *(unsigned __int8 *)(a1 + 800);
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  v6 = *(_OWORD *)(a2 + 80);
  v8 = *(_OWORD *)(a2 + 32);
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 48) = v7;
  v10 = *(_OWORD *)(a2 + 112);
  v9 = *(_OWORD *)(a2 + 128);
  v11 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 + 140);
  *(_OWORD *)(a1 + 112) = v10;
  *(_OWORD *)(a1 + 128) = v9;
  *(_OWORD *)(a1 + 96) = v11;
  memcpy((void *)(a1 + 160), (const void *)(a2 + 160), 0x201uLL);
  v12 = (__int128 *)(a2 + 680);
  if (v4)
  {
    sub_1002B7674(a1 + 680, v12);
    v14 = *(_OWORD *)(a2 + 712);
    v13 = *(_OWORD *)(a2 + 728);
    *(_OWORD *)(a1 + 696) = *(_OWORD *)(a2 + 696);
    *(_OWORD *)(a1 + 712) = v14;
    *(_OWORD *)(a1 + 728) = v13;
    v16 = *(_OWORD *)(a2 + 760);
    v15 = *(_OWORD *)(a2 + 776);
    v17 = *(_OWORD *)(a2 + 744);
    *(_BYTE *)(a1 + 792) = *(_BYTE *)(a2 + 792);
    *(_OWORD *)(a1 + 760) = v16;
    *(_OWORD *)(a1 + 776) = v15;
    *(_OWORD *)(a1 + 744) = v17;
  }
  else
  {
    *(_QWORD *)(a1 + 680) = *(_QWORD *)(a2 + 680);
    *(_QWORD *)(a1 + 688) = *(_QWORD *)(a2 + 688);
    *(_QWORD *)v12 = 0;
    *(_QWORD *)(a2 + 688) = 0;
    v18 = *(_OWORD *)(a2 + 696);
    v19 = *(_OWORD *)(a2 + 728);
    *(_OWORD *)(a1 + 712) = *(_OWORD *)(a2 + 712);
    *(_OWORD *)(a1 + 728) = v19;
    *(_OWORD *)(a1 + 696) = v18;
    v20 = *(_OWORD *)(a2 + 744);
    v21 = *(_OWORD *)(a2 + 760);
    v22 = *(_OWORD *)(a2 + 776);
    *(_BYTE *)(a1 + 792) = *(_BYTE *)(a2 + 792);
    *(_OWORD *)(a1 + 760) = v21;
    *(_OWORD *)(a1 + 776) = v22;
    *(_OWORD *)(a1 + 744) = v20;
    *(_BYTE *)(a1 + 800) = 1;
  }
  return a1;
}

uint64_t sub_100558AC8@<X0>(unsigned int a1@<W0>, __int16 a2@<W1>, _QWORD *a3@<X8>)
{
  const char *v6;
  size_t v7;
  _QWORD *v8;
  const char *v9;
  size_t v10;
  uint64_t v11;
  _QWORD v13[2];
  uint64_t v14;
  _QWORD v15[10];
  char v16;
  uint64_t v17;

  sub_100263E50((uint64_t)v13);
  v6 = sub_1000A9998(a1);
  v7 = strlen(v6);
  sub_100263F7C(&v14, (uint64_t)v6, v7);
  if ((a2 & 0xFF00) != 0)
  {
    v8 = sub_100263F7C(&v14, (uint64_t)"-", 1);
    v9 = sub_100FFEBFC((char)a2);
    v10 = strlen(v9);
    sub_100263F7C(v8, (uint64_t)v9, v10);
  }
  std::stringbuf::str(a3, v15);
  *(_QWORD *)((char *)v13
  v14 = v11;
  if (v16 < 0)
    operator delete((void *)v15[8]);
  std::streambuf::~streambuf(v15);
  return std::ios::~ios(&v17);
}

void sub_100558BE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100558BF8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _DWORD v4[202];
  uint64_t v5;
  uint64_t v6;

  sub_10013128C(v4, a1);
  if (*(_BYTE *)(a1 + 6448) && (*(int *)(a1 + 6472) > 0 || *(int *)(a1 + 6476) > 0 || *(int *)(a1 + 6480) > 0))
    sub_10006DF18(a1, 1, a2);
  else
    sub_100130C4C(a2, (uint64_t)v4);
  sub_100126B34((uint64_t)&v6);
  sub_100126A1C((uint64_t)&v5);
  sub_100126D5C((uint64_t)v4);
}

void sub_100558CE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10055829C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100558D00(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char *v35;
  char *v36;
  double v37;
  char *v38;
  double v39;
  NSObject *v40;
  NSObject *v41;
  NSObject *v42;
  NSObject *v43;
  _DWORD *v44;
  NSObject *v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  unint64_t v50;
  char *v51;
  _DWORD *v52;
  uint64_t v53;
  char *__p;
  __int128 v55;
  int v56;
  uint64_t v57;
  __int16 v58;
  unint64_t v59;
  _BYTE buf[1596];

  sub_10013128C(a2, a1);
  if (*(_BYTE *)(a1 + 6448))
  {
    if (*(int *)(a1 + 6484) >= 1)
    {
      __p = 0;
      v55 = 0uLL;
      v4 = *(_QWORD *)(a1 + 1632);
      v5 = *(_QWORD *)(a1 + 1640);
      if (v4 != v5)
      {
        v53 = a1;
        v6 = 0;
        do
        {
          if (*(double *)(v4 + 20) >= 0.0)
          {
            if ((unint64_t)v6 >= *((_QWORD *)&v55 + 1))
            {
              v14 = __p;
              v15 = 0x6F96F96F96F96F97 * ((v6 - __p) >> 2);
              v16 = v15 + 1;
              if ((unint64_t)(v15 + 1) > 0x1A41A41A41A41A4)
                sub_100259694();
              if (0xDF2DF2DF2DF2DF2ELL * ((uint64_t)(*((_QWORD *)&v55 + 1) - (_QWORD)__p) >> 2) > v16)
                v16 = 0xDF2DF2DF2DF2DF2ELL * ((uint64_t)(*((_QWORD *)&v55 + 1) - (_QWORD)__p) >> 2);
              if ((unint64_t)(0x6F96F96F96F96F97 * ((uint64_t)(*((_QWORD *)&v55 + 1) - (_QWORD)__p) >> 2)) >= 0xD20D20D20D20D2)
                v17 = 0x1A41A41A41A41A4;
              else
                v17 = v16;
              if (v17)
              {
                v18 = (char *)sub_10055B5BC((uint64_t)&v55 + 8, v17);
                v14 = __p;
                v6 = (char *)v55;
              }
              else
              {
                v18 = 0;
              }
              v19 = &v18[156 * v15];
              v20 = *(_OWORD *)(v4 + 16);
              *(_OWORD *)v19 = *(_OWORD *)v4;
              *((_OWORD *)v19 + 1) = v20;
              v21 = *(_OWORD *)(v4 + 32);
              v22 = *(_OWORD *)(v4 + 48);
              v23 = *(_OWORD *)(v4 + 80);
              *((_OWORD *)v19 + 4) = *(_OWORD *)(v4 + 64);
              *((_OWORD *)v19 + 5) = v23;
              *((_OWORD *)v19 + 2) = v21;
              *((_OWORD *)v19 + 3) = v22;
              v24 = *(_OWORD *)(v4 + 96);
              v25 = *(_OWORD *)(v4 + 112);
              v26 = *(_OWORD *)(v4 + 128);
              *(_OWORD *)(v19 + 140) = *(_OWORD *)(v4 + 140);
              *((_OWORD *)v19 + 7) = v25;
              *((_OWORD *)v19 + 8) = v26;
              *((_OWORD *)v19 + 6) = v24;
              if (v6 == v14)
              {
                v35 = &v18[156 * v15];
              }
              else
              {
                v27 = &v18[156 * v15];
                do
                {
                  v28 = *(_OWORD *)(v6 - 156);
                  *(_OWORD *)(v27 - 140) = *(_OWORD *)(v6 - 140);
                  *(_OWORD *)(v27 - 156) = v28;
                  v29 = *(_OWORD *)(v6 - 124);
                  v30 = *(_OWORD *)(v6 - 108);
                  v31 = *(_OWORD *)(v6 - 92);
                  *(_OWORD *)(v27 - 76) = *(_OWORD *)(v6 - 76);
                  *(_OWORD *)(v27 - 92) = v31;
                  *(_OWORD *)(v27 - 108) = v30;
                  *(_OWORD *)(v27 - 124) = v29;
                  v32 = *(_OWORD *)(v6 - 60);
                  v33 = *(_OWORD *)(v6 - 44);
                  v34 = *(_OWORD *)(v6 - 28);
                  v35 = v27 - 156;
                  *((_OWORD *)v27 - 1) = *((_OWORD *)v6 - 1);
                  *(_OWORD *)(v27 - 28) = v34;
                  *(_OWORD *)(v27 - 44) = v33;
                  *(_OWORD *)(v27 - 60) = v32;
                  v6 -= 156;
                  v27 -= 156;
                }
                while (v6 != v14);
              }
              v6 = v19 + 156;
              __p = v35;
              *((_QWORD *)&v55 + 1) = &v18[156 * v17];
              if (v14)
                operator delete(v14);
            }
            else
            {
              v7 = *(_OWORD *)(v4 + 16);
              *(_OWORD *)v6 = *(_OWORD *)v4;
              *((_OWORD *)v6 + 1) = v7;
              v8 = *(_OWORD *)(v4 + 32);
              v9 = *(_OWORD *)(v4 + 48);
              v10 = *(_OWORD *)(v4 + 80);
              *((_OWORD *)v6 + 4) = *(_OWORD *)(v4 + 64);
              *((_OWORD *)v6 + 5) = v10;
              *((_OWORD *)v6 + 2) = v8;
              *((_OWORD *)v6 + 3) = v9;
              v11 = *(_OWORD *)(v4 + 96);
              v12 = *(_OWORD *)(v4 + 112);
              v13 = *(_OWORD *)(v4 + 128);
              *(_OWORD *)(v6 + 140) = *(_OWORD *)(v4 + 140);
              *((_OWORD *)v6 + 7) = v12;
              *((_OWORD *)v6 + 8) = v13;
              *((_OWORD *)v6 + 6) = v11;
              v6 += 156;
            }
            *(_QWORD *)&v55 = v6;
          }
          v4 += 184;
        }
        while (v4 != v5);
        v36 = __p;
        if (__p != v6)
        {
          v52 = a2;
          v37 = *(double *)(__p + 76);
          v38 = __p;
          do
          {
            v39 = v37;
            if (!sub_10011CE88(*(double *)(v38 + 4), *(double *)(v38 + 12)))
            {
              if (qword_1022A0050 != -1)
                dispatch_once(&qword_1022A0050, &stru_102143380);
              v40 = qword_1022A0058;
              if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_FAULT))
              {
                *(_DWORD *)buf = 68289539;
                *(_DWORD *)&buf[4] = 0;
                *(_WORD *)&buf[8] = 2082;
                *(_QWORD *)&buf[10] = "";
                *(_WORD *)&buf[18] = 1040;
                *(_DWORD *)&buf[20] = 156;
                *(_WORD *)&buf[24] = 2097;
                *(_QWORD *)&buf[26] = v36;
                _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Invalid batched location\", \"location\":%{private, location:CLClientLocation}.*P}", buf, 0x22u);
                if (qword_1022A0050 != -1)
                  dispatch_once(&qword_1022A0050, &stru_102143380);
              }
              v41 = qword_1022A0058;
              if (os_signpost_enabled((os_log_t)qword_1022A0058))
              {
                *(_DWORD *)buf = 68289539;
                *(_DWORD *)&buf[4] = 0;
                *(_WORD *)&buf[8] = 2082;
                *(_QWORD *)&buf[10] = "";
                *(_WORD *)&buf[18] = 1040;
                *(_DWORD *)&buf[20] = 156;
                *(_WORD *)&buf[24] = 2097;
                *(_QWORD *)&buf[26] = v36;
                _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v41, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Invalid batched location", "{\"msg%{public}.0s\":\"Invalid batched location\", \"location\":%{private, location:CLClientLocation}.*P}", buf, 0x22u);
              }
            }
            v37 = *(double *)(v38 + 76);
            if (v39 > v37)
            {
              if (qword_1022A0050 != -1)
                dispatch_once(&qword_1022A0050, &stru_102143380);
              v42 = qword_1022A0058;
              if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_FAULT))
              {
                *(_DWORD *)buf = 68289539;
                *(_DWORD *)&buf[4] = 0;
                *(_WORD *)&buf[8] = 2082;
                *(_QWORD *)&buf[10] = "";
                *(_WORD *)&buf[18] = 2049;
                *(double *)&buf[20] = v39;
                *(_WORD *)&buf[28] = 2049;
                *(double *)&buf[30] = v37;
                _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Batched locations are supposed to be ordered from oldest to more recent\", \"t0\":\"%{private}f\", \"t1\":\"%{private}f\"}", buf, 0x26u);
                if (qword_1022A0050 != -1)
                  dispatch_once(&qword_1022A0050, &stru_102143380);
              }
              v43 = qword_1022A0058;
              if (os_signpost_enabled((os_log_t)qword_1022A0058))
              {
                *(_DWORD *)buf = 68289539;
                *(_DWORD *)&buf[4] = 0;
                *(_WORD *)&buf[8] = 2082;
                *(_QWORD *)&buf[10] = "";
                *(_WORD *)&buf[18] = 2049;
                *(double *)&buf[20] = v39;
                *(_WORD *)&buf[28] = 2049;
                *(double *)&buf[30] = v37;
                _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v43, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Batched locations are supposed to be ordered from oldest to more recent", "{\"msg%{public}.0s\":\"Batched locations are supposed to be ordered from oldest to more recent\", \"t0\":\"%{private}f\", \"t1\":\"%{private}f\"}", buf, 0x26u);
              }
            }
            v38 += 156;
            v36 += 156;
          }
          while (v38 != v6);
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_102143380);
          v44 = v52;
          v45 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
          {
            v46 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(_QWORD *)(v53 + 1640) - *(_QWORD *)(v53 + 1632)) >> 3);
            *(_DWORD *)buf = 134349312;
            *(_QWORD *)&buf[4] = 0x6F96F96F96F96F97 * ((uint64_t)(v55 - (_QWORD)__p) >> 2);
            *(_WORD *)&buf[12] = 2050;
            *(_QWORD *)&buf[14] = v46;
            _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "WsbCalc, filter, live, %{public}lu, groups, %{public}lu", buf, 0x16u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_102143380);
            v50 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(_QWORD *)(v53 + 1640) - *(_QWORD *)(v53 + 1632)) >> 3);
            v56 = 134349312;
            v57 = 0x6F96F96F96F96F97 * ((uint64_t)(v55 - (_QWORD)__p) >> 2);
            v58 = 2050;
            v59 = v50;
            v51 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "WsbCalc, filter, live, %{public}lu, groups, %{public}lu", &v56, 22);
            sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::NotifyClients::HandleEvent::operator()(const Events::Wifi::Wsb &) const", "%s\n", v51);
            if (v51 != buf)
              free(v51);
            v44 = v52;
          }
          v47 = *((_QWORD *)v44 + 812);
          v48 = *(_DWORD *)(v47 + 244);
          v49 = *(_DWORD *)(v47 + 248);
          *(_OWORD *)&buf[8] = v55;
          *(_DWORD *)(v47 + 244) = v48 + 1;
          *(_DWORD *)(v47 + 248) = v49 - 1762037865 * (((_QWORD)v55 - (_QWORD)__p) >> 2);
          v55 = 0uLL;
          *(_QWORD *)buf = __p;
          sub_100261E30((uint64_t)(v44 + 700), (__n128 *)buf);
          if (*(_QWORD *)buf)
          {
            *(_QWORD *)&buf[8] = *(_QWORD *)buf;
            operator delete(*(void **)buf);
          }
          v6 = 0;
        }
        if (v6)
          operator delete(v6);
      }
    }
  }
}

void sub_10055948C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  if (__p)
    operator delete(__p);
  sub_10055829C(a11);
  _Unwind_Resume(a1);
}

void sub_1005594DC(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char *v35;
  NSObject *v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  unint64_t v41;
  char *v42;
  _DWORD *v43;
  char *__p;
  __int128 v45;
  int v46;
  uint64_t v47;
  __int16 v48;
  unint64_t v49;
  _BYTE buf[1632];

  v3 = sub_10013128C(a2, a1);
  v4 = *(_QWORD *)(a1 + 1632);
  v5 = *(_QWORD *)(a1 + 1640);
  if (v4 != v5)
  {
    v43 = v3;
    __p = 0;
    v6 = 0;
    v45 = 0uLL;
    do
    {
      if (*(double *)(v4 + 20) >= 0.0)
      {
        if ((unint64_t)v6 >= *((_QWORD *)&v45 + 1))
        {
          v14 = __p;
          v15 = 0x6F96F96F96F96F97 * ((v6 - __p) >> 2);
          v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) > 0x1A41A41A41A41A4)
            sub_100259694();
          if (0xDF2DF2DF2DF2DF2ELL * ((uint64_t)(*((_QWORD *)&v45 + 1) - (_QWORD)__p) >> 2) > v16)
            v16 = 0xDF2DF2DF2DF2DF2ELL * ((uint64_t)(*((_QWORD *)&v45 + 1) - (_QWORD)__p) >> 2);
          if ((unint64_t)(0x6F96F96F96F96F97 * ((uint64_t)(*((_QWORD *)&v45 + 1) - (_QWORD)__p) >> 2)) >= 0xD20D20D20D20D2)
            v17 = 0x1A41A41A41A41A4;
          else
            v17 = v16;
          if (v17)
          {
            v18 = (char *)sub_10055B5BC((uint64_t)&v45 + 8, v17);
            v14 = __p;
            v6 = (char *)v45;
          }
          else
          {
            v18 = 0;
          }
          v19 = &v18[156 * v15];
          v20 = *(_OWORD *)(v4 + 16);
          *(_OWORD *)v19 = *(_OWORD *)v4;
          *((_OWORD *)v19 + 1) = v20;
          v21 = *(_OWORD *)(v4 + 32);
          v22 = *(_OWORD *)(v4 + 48);
          v23 = *(_OWORD *)(v4 + 80);
          *((_OWORD *)v19 + 4) = *(_OWORD *)(v4 + 64);
          *((_OWORD *)v19 + 5) = v23;
          *((_OWORD *)v19 + 2) = v21;
          *((_OWORD *)v19 + 3) = v22;
          v24 = *(_OWORD *)(v4 + 96);
          v25 = *(_OWORD *)(v4 + 112);
          v26 = *(_OWORD *)(v4 + 128);
          *(_OWORD *)(v19 + 140) = *(_OWORD *)(v4 + 140);
          *((_OWORD *)v19 + 7) = v25;
          *((_OWORD *)v19 + 8) = v26;
          *((_OWORD *)v19 + 6) = v24;
          if (v6 == v14)
          {
            v35 = &v18[156 * v15];
          }
          else
          {
            v27 = &v18[156 * v15];
            do
            {
              v28 = *(_OWORD *)(v6 - 156);
              *(_OWORD *)(v27 - 140) = *(_OWORD *)(v6 - 140);
              *(_OWORD *)(v27 - 156) = v28;
              v29 = *(_OWORD *)(v6 - 124);
              v30 = *(_OWORD *)(v6 - 108);
              v31 = *(_OWORD *)(v6 - 92);
              *(_OWORD *)(v27 - 76) = *(_OWORD *)(v6 - 76);
              *(_OWORD *)(v27 - 92) = v31;
              *(_OWORD *)(v27 - 108) = v30;
              *(_OWORD *)(v27 - 124) = v29;
              v32 = *(_OWORD *)(v6 - 60);
              v33 = *(_OWORD *)(v6 - 44);
              v34 = *(_OWORD *)(v6 - 28);
              v35 = v27 - 156;
              *((_OWORD *)v27 - 1) = *((_OWORD *)v6 - 1);
              *(_OWORD *)(v27 - 28) = v34;
              *(_OWORD *)(v27 - 44) = v33;
              *(_OWORD *)(v27 - 60) = v32;
              v6 -= 156;
              v27 -= 156;
            }
            while (v6 != v14);
          }
          v6 = v19 + 156;
          __p = v35;
          *((_QWORD *)&v45 + 1) = &v18[156 * v17];
          if (v14)
            operator delete(v14);
        }
        else
        {
          v7 = *(_OWORD *)(v4 + 16);
          *(_OWORD *)v6 = *(_OWORD *)v4;
          *((_OWORD *)v6 + 1) = v7;
          v8 = *(_OWORD *)(v4 + 32);
          v9 = *(_OWORD *)(v4 + 48);
          v10 = *(_OWORD *)(v4 + 80);
          *((_OWORD *)v6 + 4) = *(_OWORD *)(v4 + 64);
          *((_OWORD *)v6 + 5) = v10;
          *((_OWORD *)v6 + 2) = v8;
          *((_OWORD *)v6 + 3) = v9;
          v11 = *(_OWORD *)(v4 + 96);
          v12 = *(_OWORD *)(v4 + 112);
          v13 = *(_OWORD *)(v4 + 128);
          *(_OWORD *)(v6 + 140) = *(_OWORD *)(v4 + 140);
          *((_OWORD *)v6 + 7) = v12;
          *((_OWORD *)v6 + 8) = v13;
          *((_OWORD *)v6 + 6) = v11;
          v6 += 156;
        }
        *(_QWORD *)&v45 = v6;
      }
      v4 += 184;
    }
    while (v4 != v5);
    if (__p != v6)
    {
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_102143380);
      v36 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
      {
        v37 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(_QWORD *)(a1 + 1640) - *(_QWORD *)(a1 + 1632)) >> 3);
        *(_DWORD *)buf = 134349312;
        *(_QWORD *)&buf[4] = 0x6F96F96F96F96F97 * ((uint64_t)(v45 - (_QWORD)__p) >> 2);
        *(_WORD *)&buf[12] = 2050;
        *(_QWORD *)&buf[14] = v37;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "WsbCalc, filter, reproc, %{public}lu, groups, %{public}lu", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_102143380);
        v41 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(_QWORD *)(a1 + 1640) - *(_QWORD *)(a1 + 1632)) >> 3);
        v46 = 134349312;
        v47 = 0x6F96F96F96F96F97 * ((uint64_t)(v45 - (_QWORD)__p) >> 2);
        v48 = 2050;
        v49 = v41;
        v42 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "WsbCalc, filter, reproc, %{public}lu, groups, %{public}lu", &v46, 22);
        sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::NotifyClients::HandleEvent::operator()(const Events::ReprocessWifiScanBuffer &) const", "%s\n", v42);
        if (v42 != buf)
          free(v42);
      }
      v38 = *((_QWORD *)v43 + 812);
      v39 = *(_DWORD *)(v38 + 244);
      v40 = *(_DWORD *)(v38 + 248);
      *(_OWORD *)&buf[8] = v45;
      *(_DWORD *)(v38 + 244) = v39 + 1;
      *(_DWORD *)(v38 + 248) = v40 - 1762037865 * (((_QWORD)v45 - (_QWORD)__p) >> 2);
      v45 = 0uLL;
      *(_QWORD *)buf = __p;
      sub_100261E30((uint64_t)(v43 + 700), (__n128 *)buf);
      if (*(_QWORD *)buf)
      {
        *(_QWORD *)&buf[8] = *(_QWORD *)buf;
        operator delete(*(void **)buf);
      }
      v6 = 0;
    }
    if (v6)
      operator delete(v6);
  }
}

void sub_1005599A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  sub_10055829C(a11);
  _Unwind_Resume(a1);
}

void sub_1005599E8(_DWORD *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  int v7;
  uint64_t v8;
  _OWORD *v9;
  int v10;
  char *v11;
  uint8_t buf[8];
  char v13;
  uint8_t *v14;

  sub_10013128C((_DWORD *)a3, (uint64_t)a1);
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_102143380);
  v6 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *a2;
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "@WifiFlow, alsreply, aps, error, tag, %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_102143380);
    v10 = *a2;
    LODWORD(v14) = 67240192;
    HIDWORD(v14) = v10;
    v11 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@WifiFlow, alsreply, aps, error, tag, %{public}d", &v14, 8);
    sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::NotifyClients::HandleEvent::operator()(const Events::Network::AlsError &) const", "%s\n", v11);
    if (v11 != (char *)buf)
      free(v11);
  }
  if (((int)a1[1618] > 0 || (int)a1[1619] > 0 || (int)a1[1620] >= 1) && sub_10007099C(a1 + 1510))
  {
    if (!*(_BYTE *)(a3 + 1987))
      *(_BYTE *)(a3 + 1987) = 1;
    v8 = *(_QWORD *)(a3 + 6496);
    ++*(_DWORD *)(v8 + 240);
    sub_1015A2E04(buf, "alsError");
    v14 = buf;
    v9 = sub_10006F6DC((uint64_t **)(v8 + 256), (const void **)buf, (uint64_t)&unk_101B9EB60, (_OWORD **)&v14);
    ++*((_DWORD *)v9 + 14);
    if (v13 < 0)
      operator delete(*(void **)buf);
  }
}

void sub_100559C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  sub_10055829C(v16);
  _Unwind_Resume(a1);
}

void sub_100559C90(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7;
  _OWORD *v8;
  void *__p[2];
  char v10;
  void **v11;

  sub_10013128C((_DWORD *)a3, a1);
  if (*(int *)(a1 + 6472) >= 1 && *a2 != 0)
  {
    if (!*(_BYTE *)(a3 + 1987))
      *(_BYTE *)(a3 + 1987) = 1;
    v7 = *(_QWORD *)(a3 + 6496);
    ++*(_DWORD *)(v7 + 240);
    sub_1015A2E04(__p, "wifiPoweredOff");
    v11 = __p;
    v8 = sub_10006F6DC((uint64_t **)(v7 + 256), (const void **)__p, (uint64_t)&unk_101B9EB60, (_OWORD **)&v11);
    ++*((_DWORD *)v8 + 14);
    if (v10 < 0)
      operator delete(__p[0]);
  }
}

void sub_100559D54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  sub_10055829C(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_100559D80(uint64_t a1)
{
  sub_100261F44(a1 + 6544);
  sub_100126B34(a1 + 3016);
  sub_100126A1C(a1 + 808);
  sub_100126D5C(a1);
  return a1;
}

void sub_100559DC4(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      sub_100559EA0(a1, prime);
  }
}

void sub_100559EA0(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t **v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  void *v11;
  uint64_t *i;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;

  if (a2)
  {
    if (a2 >> 61)
      sub_10025955C();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(uint64_t ***)(a1 + 16);
    if (v7)
    {
      v8 = (unint64_t)v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      for (i = *v7; *v7; i = *v7)
      {
        v13 = i[1];
        if (v10 > 1)
        {
          if (v13 >= a2)
            v13 %= a2;
        }
        else
        {
          v13 &= a2 - 1;
        }
        if (v13 == v8)
        {
          v7 = (uint64_t **)i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
        {
          v14 = *i;
          v15 = i;
          if (*i)
          {
            while (1)
            {
              v21 = i[2];
              v16 = sub_100129380((uint64_t)&v21);
              v20 = *(_QWORD *)(v14 + 16);
              v17 = sub_100129380((uint64_t)&v20);
              v18 = (uint64_t *)*v15;
              if (v16 != v17)
                break;
              v14 = *v18;
              v15 = (uint64_t *)*v15;
              if (!*v18)
              {
                v19 = 0;
                goto LABEL_30;
              }
            }
            v19 = (uint64_t *)*v15;
            v18 = v15;
          }
          else
          {
            v19 = 0;
            v18 = i;
          }
LABEL_30:
          *v7 = v19;
          *v18 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v13);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v13) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
          v7 = (uint64_t **)i;
          v8 = v13;
        }
      }
    }
  }
  else
  {
    v11 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v11)
      operator delete(v11);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

_QWORD *sub_10055A084(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;

  sub_10055A0E0((uint64_t)a1, a2, (uint64_t)&v4);
  return sub_100135B00(a1, v4);
}

void sub_10055A0BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    sub_10055A1C0((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10055A0E0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _BYTE *v8;
  __int128 v9;
  uint64_t result;
  uint64_t v11;

  v5 = a1 + 16;
  v6 = (char *)operator new(0x68uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  v7 = *a2;
  *((_QWORD *)v6 + 2) = *a2;
  v8 = v6 + 24;
  if (*((char *)a2 + 31) < 0)
  {
    sub_100115CE4(v8, (void *)a2[1], a2[2]);
    v7 = *((_QWORD *)v6 + 2);
  }
  else
  {
    *(_OWORD *)v8 = *(_OWORD *)(a2 + 1);
    *((_QWORD *)v6 + 5) = a2[3];
  }
  v9 = *((_OWORD *)a2 + 3);
  *((_OWORD *)v6 + 3) = *((_OWORD *)a2 + 2);
  *((_OWORD *)v6 + 4) = v9;
  *((_OWORD *)v6 + 5) = *((_OWORD *)a2 + 4);
  *((_QWORD *)v6 + 12) = a2[10];
  *(_BYTE *)(a3 + 16) = 1;
  v11 = v7;
  result = sub_100129380((uint64_t)&v11);
  *((_QWORD *)v6 + 1) = result;
  return result;
}

void sub_10055A1A4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_10055A1C0(v3, v2);
  _Unwind_Resume(a1);
}

void sub_10055A1C0(uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 47) < 0)
      operator delete(__p[3]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void sub_10055A20C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *a1;
  if (*a1 != a2)
    sub_10055A264((uint64_t *)a2, *(_QWORD *)v3, *(_QWORD *)(v3 + 8), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 3));
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(v3 + 24);
}

void sub_10055A264(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = (uint64_t)(a1 + 2);
  v9 = *a1;
  if (0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 3) < a4)
  {
    sub_1000ADC24(a1);
    if (a4 > 0x2E8BA2E8BA2E8BALL)
      sub_100259694();
    v10 = 0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 3)) >= 0x1745D1745D1745DLL)
      v11 = 0x2E8BA2E8BA2E8BALL;
    else
      v11 = v10;
    sub_1002A2F6C(a1, v11);
    v12 = sub_10055A3F8(v8, a2, a3, a1[1]);
    goto LABEL_11;
  }
  if (0x2E8BA2E8BA2E8BA3 * ((a1[1] - v9) >> 3) < a4)
  {
    v13 = a2 + 8 * ((a1[1] - v9) >> 3);
    sub_10055A558(a2, v13, v9);
    v12 = sub_10055A3F8(v8, v13, a3, a1[1]);
LABEL_11:
    a1[1] = v12;
    return;
  }
  sub_10055A558(a2, a3, v9);
  v15 = v14;
  v16 = a1[1];
  if (v16 != v14)
  {
    do
    {
      if (*(char *)(v16 - 57) < 0)
        operator delete(*(void **)(v16 - 80));
      v16 -= 88;
    }
    while (v16 != v15);
  }
  a1[1] = v15;
}

void sub_10055A3E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_10055A3F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_10055A3F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  __int128 *v6;
  uint64_t v7;
  _BYTE *v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[3];
  char v16;
  uint64_t v17;
  uint64_t v18;

  v4 = a4;
  v17 = a4;
  v18 = a4;
  v15[0] = a1;
  v15[1] = &v17;
  v15[2] = &v18;
  v16 = 0;
  if (a2 != a3)
  {
    v6 = (__int128 *)(a2 + 8);
    do
    {
      v7 = (uint64_t)v6 - 8;
      *(_QWORD *)v4 = *((_QWORD *)v6 - 1);
      v8 = (_BYTE *)(v4 + 8);
      if (*((char *)v6 + 23) < 0)
      {
        sub_100115CE4(v8, *(void **)v6, *((_QWORD *)v6 + 1));
        v10 = v18;
      }
      else
      {
        v9 = *v6;
        *(_QWORD *)(v4 + 24) = *((_QWORD *)v6 + 2);
        *(_OWORD *)v8 = v9;
        v10 = v4;
      }
      v11 = *(__int128 *)((char *)v6 + 24);
      v12 = *(__int128 *)((char *)v6 + 40);
      v13 = *(__int128 *)((char *)v6 + 56);
      *(_QWORD *)(v4 + 80) = *((_QWORD *)v6 + 9);
      *(_OWORD *)(v4 + 48) = v12;
      *(_OWORD *)(v4 + 64) = v13;
      *(_OWORD *)(v4 + 32) = v11;
      v4 = v10 + 88;
      v18 = v10 + 88;
      v6 = (__int128 *)((char *)v6 + 88);
    }
    while (v7 + 88 != a3);
  }
  v16 = 1;
  sub_10055A4E0((uint64_t)v15);
  return v4;
}

void sub_10055A4CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10055A4E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10055A4E0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_10055A514(a1);
  return a1;
}

void sub_10055A514(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 57) < 0)
      operator delete(*(void **)(v1 - 80));
    v1 -= 88;
  }
}

uint64_t sub_10055A558(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v4 = a1;
  if (a1 == a2)
    return a1;
  v5 = a2;
  do
  {
    *(_QWORD *)a3 = *(_QWORD *)v4;
    std::string::operator=((std::string *)(a3 + 8), (const std::string *)(v4 + 8));
    v7 = *(_OWORD *)(v4 + 48);
    v6 = *(_OWORD *)(v4 + 64);
    v8 = *(_OWORD *)(v4 + 32);
    *(_QWORD *)(a3 + 80) = *(_QWORD *)(v4 + 80);
    *(_OWORD *)(a3 + 48) = v7;
    *(_OWORD *)(a3 + 64) = v6;
    *(_OWORD *)(a3 + 32) = v8;
    a3 += 88;
    v4 += 88;
  }
  while (v4 != v5);
  return v5;
}

void sub_10055A5D8()
{
  __assert_rtn("forced_return", "forced_return.hpp", 38, "false");
}

uint64_t sub_10055A600(uint64_t a1)
{
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_10055A640(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  int v8;
  uint64_t v9;
  void *__p[2];
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unsigned __int8 v16;

  sub_10031F08C(&v9, a2);
  sub_100126D5C(*(_QWORD *)a1);
  v3 = *(_QWORD *)a1;
  *(_BYTE *)(v3 + 8) = 0;
  *(_BYTE *)(v3 + 96) = 0;
  if (v16)
  {
    *(_QWORD *)(v3 + 8) = v9;
    v4 = v11;
    *(_OWORD *)(v3 + 16) = *(_OWORD *)__p;
    *(_QWORD *)(v3 + 32) = v4;
    __p[1] = 0;
    v11 = 0;
    __p[0] = 0;
    v5 = v15;
    v6 = v12;
    v7 = v13;
    *(_OWORD *)(v3 + 72) = v14;
    *(_OWORD *)(v3 + 56) = v7;
    *(_OWORD *)(v3 + 40) = v6;
    *(_QWORD *)(v3 + 88) = v5;
    *(_BYTE *)(v3 + 96) = 1;
    v8 = v16;
    **(_DWORD **)a1 = *(_DWORD *)(a1 + 8);
    if (v8)
    {
      if (SHIBYTE(v11) < 0)
        operator delete(__p[0]);
    }
  }
  else
  {
    **(_DWORD **)a1 = *(_DWORD *)(a1 + 8);
  }
}

void sub_10055A700(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  int v7;
  void **v8;

  v5 = 0uLL;
  v6 = 0;
  sub_10055A7B8(&v5, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  v7 = *(_DWORD *)(a2 + 24);
  sub_100126D5C(*(_QWORD *)a1);
  v4 = *(_QWORD *)a1;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_OWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 24) = v6;
  v5 = 0uLL;
  v6 = 0;
  *(_DWORD *)(v4 + 32) = v7;
  **(_DWORD **)a1 = *(_DWORD *)(a1 + 8);
  v8 = (void **)&v5;
  sub_100279AA4(&v8);
}

_QWORD *sub_10055A7B8(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_1002A2F6C(result, a4);
    result = (_QWORD *)sub_10055A3F8((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_10055A81C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_100279AA4(&a9);
  _Unwind_Resume(a1);
}

void sub_10055A83C(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8;
  void **v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  void **v14;
  void **v15;
  void **v16;
  char v17;
  char v18;
  void **v19;

  v8 = a1 + 16;
  v9 = *(void ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    sub_100132440((void ***)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      sub_100259694();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    sub_100259C18((_QWORD *)a1, v11);
    v12 = sub_10055A9BC(v8, a2, a3, *(_QWORD **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = &a2[(uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3];
    sub_10055AAFC((uint64_t)&v17, a2, v13, (uint64_t *)v9);
    v12 = sub_10055A9BC(v8, v13, a3, *(_QWORD **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  sub_10055AAFC((uint64_t)&v18, a2, a3, (uint64_t *)v9);
  v15 = v14;
  v16 = *(void ***)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 3;
      v19 = v16;
      sub_100279AA4(&v19);
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_10055A9AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_10055A9B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_QWORD *sub_10055A9BC(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t *v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      sub_10055A7B8(v4, *v6, v6[1], 0x2E8BA2E8BA2E8BA3 * ((v6[1] - *v6) >> 3));
      v4 = v11 + 3;
      v11 += 3;
      v6 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  sub_10055AA80((uint64_t)v8);
  return v4;
}

void sub_10055AA6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10055AA80((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10055AA80(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_10055AAB4(a1);
  return a1;
}

void sub_10055AAB4(uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = **(void ****)(a1 + 16);
  v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 3;
    v3 = v1;
    sub_100279AA4(&v3);
  }
}

uint64_t *sub_10055AAFC(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (v5 != a4)
        sub_10055A264(a4, *v5, v5[1], 0x2E8BA2E8BA2E8BA3 * ((v5[1] - *v5) >> 3));
      v5 += 3;
      a4 += 3;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t sub_10055AB7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = a1 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_100115CE4((_BYTE *)v4, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)v4 = v5;
  }
  v6 = *(_OWORD *)(a2 + 40);
  v7 = *(_OWORD *)(a2 + 56);
  v8 = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v8;
  *(_OWORD *)(a1 + 56) = v7;
  *(_OWORD *)(a1 + 40) = v6;
  return a1;
}

char *sub_10055ABFC(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0xD37A6F4DE9BD37A7 * ((v8 - *(_QWORD *)result) >> 3) < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x1642C8590B21642)
      sub_100259694();
    v10 = 0xD37A6F4DE9BD37A7 * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0xB21642C8590B21)
      v12 = 0x1642C8590B21642;
    else
      v12 = v11;
    result = sub_10055AD54(v7, v12);
    v14 = (char *)v7[1];
    v13 = (void **)(v7 + 1);
    v9 = v14;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v13 = (void **)(result + 8);
  v15 = (_BYTE *)*((_QWORD *)result + 1);
  if (0xD37A6F4DE9BD37A7 * ((v15 - v9) >> 3) >= a4)
    goto LABEL_16;
  v16 = &__src[8 * ((v15 - v9) >> 3)];
  if (v15 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 - v9);
    v9 = (char *)*v13;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v13 = &v9[v17];
  return result;
}

char *sub_10055AD54(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x1642C8590B21643)
    sub_100259694();
  result = (char *)sub_10055ADA8((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[184 * v4];
  return result;
}

void *sub_10055ADA8(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1642C8590B21643)
    sub_10025955C();
  return operator new(184 * a2);
}

void sub_10055ADF0(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  if (*(unsigned __int8 *)(a1 + 88) == *(unsigned __int8 *)(a2 + 88))
  {
    if (*(_BYTE *)(a1 + 88))
    {
      v4 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 13) = *(_QWORD *)(a2 + 13);
      *(_OWORD *)a1 = v4;
      std::string::operator=((std::string *)(a1 + 24), (const std::string *)(a2 + 24));
      sub_10055AECC(a1 + 48, a2 + 48);
    }
  }
  else if (*(_BYTE *)(a1 + 88))
  {
    sub_10055AE7C(a1);
  }
  else
  {
    sub_10055AFA0(a1, (__int128 *)a2);
    *(_BYTE *)(a1 + 88) = 1;
  }
}

void sub_10055AE7C(uint64_t a1)
{
  void *v2;

  if (*(_BYTE *)(a1 + 88))
  {
    if (*(_BYTE *)(a1 + 80))
    {
      v2 = *(void **)(a1 + 56);
      if (v2)
      {
        *(_QWORD *)(a1 + 64) = v2;
        operator delete(v2);
      }
    }
    if (*(char *)(a1 + 47) < 0)
      operator delete(*(void **)(a1 + 24));
    *(_BYTE *)(a1 + 88) = 0;
  }
}

void sub_10055AECC(uint64_t a1, uint64_t a2)
{
  void *v3;

  if (*(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32))
  {
    if (*(_BYTE *)(a1 + 32))
      sub_10055AF58((_BYTE *)a1, a2);
  }
  else if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(void **)(a1 + 8);
    if (v3)
    {
      *(_QWORD *)(a1 + 16) = v3;
      operator delete(v3);
    }
    *(_BYTE *)(a1 + 32) = 0;
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    sub_10027205C((_QWORD *)(a1 + 8), *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
    *(_BYTE *)(a1 + 32) = 1;
  }
}

_BYTE *sub_10055AF58(_BYTE *a1, uint64_t a2)
{
  *a1 = *(_BYTE *)a2;
  if (a1 != (_BYTE *)a2)
    sub_1002A3054(a1 + 8, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  return a1;
}

uint64_t sub_10055AFA0(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;

  v4 = *a2;
  *(_QWORD *)(a1 + 13) = *(_QWORD *)((char *)a2 + 13);
  *(_OWORD *)a1 = v4;
  if (*((char *)a2 + 47) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 24), *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(a1 + 24) = v5;
  }
  sub_10055B034(a1 + 48, (uint64_t)(a2 + 3));
  return a1;
}

void sub_10055B018(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10055B034(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 32) = 0;
  sub_10055B07C((_QWORD *)a1, a2);
  return a1;
}

void sub_10055B060(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 32))
    sub_1018FF45C(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10055B07C(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;

  if (*(_BYTE *)(a2 + 32))
  {
    v2 = result;
    *(_BYTE *)result = *(_BYTE *)a2;
    result[2] = 0;
    result[3] = 0;
    result[1] = 0;
    result = sub_10027205C(result + 1, *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
    *((_BYTE *)v2 + 32) = 1;
  }
  return result;
}

void sub_10055B0CC(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48))
  {
    if (*(_BYTE *)(a1 + 48))
    {
      if (a1 != a2)
      {
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
        sub_1001261BC((_QWORD *)a1, *(_QWORD **)(a2 + 16), 0);
      }
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    }
  }
  else if (*(_BYTE *)(a1 + 48))
  {
    sub_100067AC4(a1);
    *(_BYTE *)(a1 + 48) = 0;
  }
  else
  {
    sub_10012E3D0(a1, a2);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_BYTE *)(a1 + 48) = 1;
  }
}

void sub_10055B158(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48))
  {
    if (*(_BYTE *)(a1 + 48))
    {
      if (a1 != a2)
      {
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
        sub_1001261BC((_QWORD *)a1, *(_QWORD **)(a2 + 16), 0);
      }
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
    }
  }
  else if (*(_BYTE *)(a1 + 48))
  {
    sub_100067AC4(a1);
    *(_BYTE *)(a1 + 48) = 0;
  }
  else
  {
    sub_10012E3D0(a1, a2);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
    *(_BYTE *)(a1 + 48) = 1;
  }
}

__n128 sub_10055B1E4(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __n128 result;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  if (*(unsigned __int8 *)(a1 + 800) == *(unsigned __int8 *)(a2 + 800))
  {
    if (*(_BYTE *)(a1 + 800))
    {
      v4 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v4;
      v5 = *(_OWORD *)(a2 + 32);
      v6 = *(_OWORD *)(a2 + 48);
      v7 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v7;
      *(_OWORD *)(a1 + 32) = v5;
      *(_OWORD *)(a1 + 48) = v6;
      v8 = *(_OWORD *)(a2 + 96);
      v9 = *(_OWORD *)(a2 + 112);
      v10 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 + 140);
      *(_OWORD *)(a1 + 112) = v9;
      *(_OWORD *)(a1 + 128) = v10;
      *(_OWORD *)(a1 + 96) = v8;
      memcpy((void *)(a1 + 160), (const void *)(a2 + 160), 0x201uLL);
      sub_100349198((_QWORD *)(a1 + 680), (uint64_t *)(a2 + 680));
      v12 = *(_OWORD *)(a2 + 712);
      v11 = *(_OWORD *)(a2 + 728);
      *(_OWORD *)(a1 + 696) = *(_OWORD *)(a2 + 696);
      *(_OWORD *)(a1 + 712) = v12;
      *(_OWORD *)(a1 + 728) = v11;
      v14 = *(_OWORD *)(a2 + 760);
      result = *(__n128 *)(a2 + 776);
      v15 = *(_OWORD *)(a2 + 744);
      *(_BYTE *)(a1 + 792) = *(_BYTE *)(a2 + 792);
      *(_OWORD *)(a1 + 760) = v14;
      *(__n128 *)(a1 + 776) = result;
      *(_OWORD *)(a1 + 744) = v15;
    }
  }
  else if (*(_BYTE *)(a1 + 800))
  {
    sub_100261F44(a1 + 680);
    *(_BYTE *)(a1 + 800) = 0;
  }
  else
  {
    v16 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v16;
    v17 = *(_OWORD *)(a2 + 32);
    v18 = *(_OWORD *)(a2 + 48);
    v19 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v19;
    *(_OWORD *)(a1 + 32) = v17;
    *(_OWORD *)(a1 + 48) = v18;
    v20 = *(_OWORD *)(a2 + 96);
    v21 = *(_OWORD *)(a2 + 112);
    v22 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 + 140);
    *(_OWORD *)(a1 + 112) = v21;
    *(_OWORD *)(a1 + 128) = v22;
    *(_OWORD *)(a1 + 96) = v20;
    memcpy((void *)(a1 + 160), (const void *)(a2 + 160), 0x201uLL);
    *(_QWORD *)(a1 + 680) = *(_QWORD *)(a2 + 680);
    v23 = *(_QWORD *)(a2 + 688);
    *(_QWORD *)(a1 + 688) = v23;
    if (v23)
    {
      v24 = (unint64_t *)(v23 + 8);
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    v26 = *(_OWORD *)(a2 + 696);
    v27 = *(_OWORD *)(a2 + 728);
    *(_OWORD *)(a1 + 712) = *(_OWORD *)(a2 + 712);
    *(_OWORD *)(a1 + 728) = v27;
    *(_OWORD *)(a1 + 696) = v26;
    result = *(__n128 *)(a2 + 744);
    v28 = *(_OWORD *)(a2 + 760);
    v29 = *(_OWORD *)(a2 + 776);
    *(_BYTE *)(a1 + 792) = *(_BYTE *)(a2 + 792);
    *(_OWORD *)(a1 + 760) = v28;
    *(_OWORD *)(a1 + 776) = v29;
    *(__n128 *)(a1 + 744) = result;
    *(_BYTE *)(a1 + 800) = 1;
  }
  return result;
}

void sub_10055B34C(uint64_t a1, uint64_t a2)
{
  void *v3;

  if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (a1 != a2)
    {
      if (*(_BYTE *)(a1 + 24))
        sub_10055B410((char *)a1, *(char **)a2, *(_QWORD *)(a2 + 8), 0x6F96F96F96F96F97 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2));
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v3;
      operator delete(v3);
    }
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    sub_10055B604((_QWORD *)a1, *(const void **)a2, *(_QWORD *)(a2 + 8), 0x6F96F96F96F96F97 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2));
    *(_BYTE *)(a1 + 24) = 1;
  }
}

char *sub_10055B410(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0x6F96F96F96F96F97 * ((v8 - *(_QWORD *)result) >> 2) < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x1A41A41A41A41A4)
      sub_100259694();
    v10 = 0x6F96F96F96F96F97 * (v8 >> 2);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0xD20D20D20D20D2)
      v12 = 0x1A41A41A41A41A4;
    else
      v12 = v11;
    result = sub_10055B568(v7, v12);
    v14 = (char *)v7[1];
    v13 = (void **)(v7 + 1);
    v9 = v14;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v13 = (void **)(result + 8);
  v15 = (_BYTE *)*((_QWORD *)result + 1);
  if (0x6F96F96F96F96F97 * ((v15 - v9) >> 2) >= a4)
    goto LABEL_16;
  v16 = &__src[4 * ((v15 - v9) >> 2)];
  if (v15 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 - v9);
    v9 = (char *)*v13;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v13 = &v9[v17];
  return result;
}

char *sub_10055B568(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x1A41A41A41A41A5)
    sub_100259694();
  result = (char *)sub_10055B5BC((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[156 * v4];
  return result;
}

void *sub_10055B5BC(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1A41A41A41A41A5)
    sub_10025955C();
  return operator new(156 * a2);
}

_QWORD *sub_10055B604(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_10055B568(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_10055B660(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10055B67C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  if (*(unsigned __int8 *)(a1 + 144) == *(unsigned __int8 *)(a2 + 144))
  {
    if (*(_BYTE *)(a1 + 144))
    {
      v4 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
      *(_QWORD *)a1 = v4;
      std::string::operator=((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      v5 = *(_OWORD *)(a2 + 72);
      v6 = *(_OWORD *)(a2 + 88);
      v7 = *(_OWORD *)(a2 + 100);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 100) = v7;
      *(_OWORD *)(a1 + 88) = v6;
      *(_OWORD *)(a1 + 72) = v5;
      std::string::operator=((std::string *)(a1 + 120), (const std::string *)(a2 + 120));
    }
  }
  else if (*(_BYTE *)(a1 + 144))
  {
    sub_10055B730(a1);
  }
  else
  {
    sub_10055B778(a1, (uint64_t *)a2);
    *(_BYTE *)(a1 + 144) = 1;
  }
}

void sub_10055B730(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 144))
  {
    if (*(char *)(a1 + 143) < 0)
      operator delete(*(void **)(a1 + 120));
    if (*(char *)(a1 + 39) < 0)
      operator delete(*(void **)(a1 + 16));
    *(_BYTE *)(a1 + 144) = 0;
  }
}

uint64_t sub_10055B778(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _BYTE *v9;
  __int128 v10;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  if (*((char *)a2 + 39) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 16), (void *)a2[2], a2[3]);
  }
  else
  {
    v5 = *((_OWORD *)a2 + 1);
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_OWORD *)(a1 + 16) = v5;
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
  v6 = *(_OWORD *)(a2 + 7);
  v7 = *(_OWORD *)(a2 + 9);
  v8 = *(_OWORD *)(a2 + 11);
  *(_OWORD *)(a1 + 100) = *(_OWORD *)((char *)a2 + 100);
  *(_OWORD *)(a1 + 88) = v8;
  *(_OWORD *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 56) = v6;
  v9 = (_BYTE *)(a1 + 120);
  if (*((char *)a2 + 143) < 0)
  {
    sub_100115CE4(v9, (void *)a2[15], a2[16]);
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 15);
    *(_QWORD *)(a1 + 136) = a2[17];
    *(_OWORD *)v9 = v10;
  }
  return a1;
}

void sub_10055B838(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10055B854(_QWORD *a1, char **a2, char *a3, char *a4, char *a5)
{
  unint64_t v5;

  if (a5 == a3)
    v5 = 0;
  else
    v5 = ((uint64_t)&a5[-*(_QWORD *)a4] >> 4) + 32 * (a4 - (char *)a2) - ((a3 - *a2) >> 4);
  return sub_10055B888(a1, a2, a3, v5);
}

_QWORD *sub_10055B888(_QWORD *a1, char **a2, char *a3, unint64_t a4)
{
  unint64_t v7;
  char *v8;
  char **v9;
  __int128 *v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char **v21;
  char *v22;
  char **v23;
  char *v24;
  _QWORD v25[2];
  char *v26;
  uint64_t v27;

  v23 = a2;
  v24 = a3;
  v7 = a1[5];
  if (v7 >= a4)
  {
    v16 = a1[4];
    v17 = a1[1];
    v18 = (char *)(v17 + 8 * (v16 >> 8));
    if (a1[2] == v17)
      v19 = 0;
    else
      v19 = *(_QWORD *)v18 + 16 * v16;
    v25[0] = a2;
    v25[1] = a3;
    v21 = (char **)sub_1004CE854((uint64_t)v25, a4);
    v26 = v18;
    v27 = v19;
    sub_1004CEA34(a2, a3, v21, v22, (uint64_t)&v26);
    return (_QWORD *)sub_1001266D4((uint64_t)a1, v26, v27);
  }
  else
  {
    v9 = (char **)sub_1004CE854((uint64_t)&v23, v7);
    v10 = (__int128 *)v8;
    v11 = a1[4];
    v12 = a1[1];
    v13 = (char *)(v12 + 8 * (v11 >> 8));
    if (a1[2] == v12)
      v14 = 0;
    else
      v14 = *(_QWORD *)v13 + 16 * v11;
    v26 = v13;
    v27 = v14;
    sub_1004CEA34(v23, v24, v9, v8, (uint64_t)&v26);
    return sub_10055B9A4(a1, v9, v10, a4 - a1[5]);
  }
}

_QWORD *sub_10055B9A4(_QWORD *a1, _QWORD *a2, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  __int128 v19;
  __int128 *v20;
  uint64_t v21;
  _QWORD v22[2];

  v8 = a1[1];
  v9 = a1[2];
  if (v9 == v8)
    v10 = 0;
  else
    v10 = 32 * (v9 - v8) - 1;
  v11 = a1[5] + a1[4];
  v12 = v10 - v11;
  if (a4 > v12)
  {
    sub_10055BAD0(a1, a4 - v12);
    v8 = a1[1];
    v9 = a1[2];
    v11 = a1[4] + a1[5];
  }
  v13 = (_QWORD *)(v8 + 8 * (v11 >> 8));
  if (v9 == v8)
    v14 = 0;
  else
    v14 = *v13 + 16 * v11;
  v22[0] = v8 + 8 * (v11 >> 8);
  v22[1] = v14;
  result = sub_1004CE854((uint64_t)v22, a4);
  while (v14 != v16)
  {
    v17 = (_OWORD *)(v13 == result ? v16 : *v13 + 4096);
    if ((_OWORD *)v14 == v17)
    {
      v17 = (_OWORD *)v14;
    }
    else
    {
      v18 = (_OWORD *)v14;
      do
      {
        v19 = *a3++;
        *v18 = v19;
        if ((__int128 *)((char *)a3 - *a2) == (__int128 *)4096)
        {
          v20 = (__int128 *)a2[1];
          ++a2;
          a3 = v20;
        }
        ++v18;
      }
      while (v18 != v17);
    }
    a1[5] += ((uint64_t)v17 - v14) >> 4;
    if (v13 == result)
      break;
    v21 = v13[1];
    ++v13;
    v14 = v21;
  }
  return result;
}

void sub_10055BAD0(_QWORD *a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t i;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int64_t v76;
  char *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  void *v88;
  void *__p[2];
  __int128 v90;
  _QWORD *v91;

  v3 = (char *)a1[2];
  v4 = (uint64_t)&v3[-a1[1]];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if ((_BYTE)v5)
    v6 = (v5 >> 8) + 1;
  else
    v6 = v5 >> 8;
  v7 = a1[4];
  if (v6 >= v7 >> 8)
    v8 = v7 >> 8;
  else
    v8 = v6;
  if (v6 <= v7 >> 8)
  {
    for (a1[4] = v7 - (v8 << 8); v8; --v8)
    {
      v16 = (_QWORD *)a1[1];
      v19 = *v16;
      v17 = (char *)(v16 + 1);
      v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1)
            v28 = 1;
          else
            v28 = (uint64_t)&v3[-*a1] >> 2;
          v29 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v28);
          v31 = &v29[8 * (v28 >> 2)];
          v32 = (uint64_t *)a1[1];
          v3 = v31;
          v33 = a1[2] - (_QWORD)v32;
          if (v33)
          {
            v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            v34 = 8 * (v33 >> 3);
            v35 = &v29[8 * (v28 >> 2)];
            do
            {
              v36 = *v32++;
              *(_QWORD *)v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            v3 = (char *)a1[2];
          }
        }
        else
        {
          v21 = v20 >> 3;
          v22 = v20 >> 3 < -1;
          v23 = (v20 >> 3) + 2;
          if (v22)
            v24 = v23;
          else
            v24 = v21 + 1;
          v25 = &v17[-8 * (v24 >> 1)];
          v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            v3 = (char *)a1[1];
          }
          v27 = &v3[-8 * (v24 >> 1)];
          v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(_QWORD *)v3 = v18;
      v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    v9 = v6 - v8;
    v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          sub_100212218(a1, __p);
          --v6;
          if (!--v9)
            goto LABEL_75;
        }
        for (i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          sub_100343094((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8)
            v64 = 255;
          else
            v64 = 256;
          v65 = v64 + a1[4];
          a1[4] = v65;
        }
        v8 = v6;
      }
      else
      {
LABEL_75:
        v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 8);
      if (v8)
      {
        v66 = (char *)a1[2];
        do
        {
          v67 = (_QWORD *)a1[1];
          v70 = *v67;
          v68 = (char *)(v67 + 1);
          v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1)
                v78 = 1;
              else
                v78 = (uint64_t)&v66[-*a1] >> 2;
              v79 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v78);
              v81 = &v79[8 * (v78 >> 2)];
              v82 = (uint64_t *)a1[1];
              v66 = v81;
              v83 = a1[2] - (_QWORD)v82;
              if (v83)
              {
                v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                v84 = 8 * (v83 >> 3);
                v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  v86 = *v82++;
                  *(_QWORD *)v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                v66 = (char *)a1[2];
              }
            }
            else
            {
              v72 = v71 >> 3;
              v22 = v71 >> 3 < -1;
              v73 = (v71 >> 3) + 2;
              if (v22)
                v74 = v73;
              else
                v74 = v72 + 1;
              v75 = &v68[-8 * (v74 >> 1)];
              v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                v66 = (char *)a1[1];
              }
              v77 = &v66[-8 * (v74 >> 1)];
              v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(_QWORD *)v66 = v69;
          v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v11 = v4 >> 3;
      v12 = v10 >> 2;
      if (v12 <= v9 + v11)
        v13 = v9 + v11;
      else
        v13 = v12;
      v14 = v11 - v8;
      v91 = a1 + 3;
      if (v13)
        v15 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v13);
      else
        v15 = 0;
      v38 = v8 << 8;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&v90 = __p[1];
      *((_QWORD *)&v90 + 1) = &v15[8 * v13];
      do
      {
        v88 = operator new(0x1000uLL);
        sub_10003732C(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        v39 = (_QWORD *)a1[1];
        v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0])
                v48 = 1;
              else
                v48 = (v40 - (char *)__p[0]) >> 2;
              v49 = (char *)sub_10025E6A0((uint64_t)v91, v48);
              v51 = (uint64_t *)__p[1];
              v40 = &v49[8 * (v48 >> 2)];
              v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                v53 = 8 * (v52 >> 3);
                v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  v55 = *v51++;
                  *(_QWORD *)v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(_QWORD *)&v90 = v40;
              *((_QWORD *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                v40 = (char *)v90;
              }
            }
            else
            {
              v42 = v41 >> 3;
              v22 = v41 >> 3 < -1;
              v43 = (v41 >> 3) + 2;
              if (v22)
                v44 = v43;
              else
                v44 = v42 + 1;
              v45 = (char *)__p[1] - 8 * (v44 >> 1);
              v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                v40 = (char *)__p[1];
              }
              v47 = &v40[-8 * (v44 >> 1)];
              v40 = &v45[v46];
              __p[1] = v47;
              *(_QWORD *)&v90 = &v45[v46];
            }
          }
          *(_QWORD *)v40 = *v39;
          v40 = (char *)(v90 + 8);
          *(_QWORD *)&v90 = v90 + 8;
          v39 = (_QWORD *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      v57 = (_QWORD *)a1[2];
      v58 = -7 - (_QWORD)v57;
      while (v57 != (_QWORD *)a1[1])
      {
        --v57;
        v58 += 8;
        sub_1003431B0((uint64_t)__p, v57);
      }
      v59 = (char *)*a1;
      v60 = *(_OWORD *)__p;
      v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      v90 = v62;
      a1[4] -= v38;
      if (v57 != (_QWORD *)v62)
        *(_QWORD *)&v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      if (v59)
        operator delete(v59);
    }
  }
}

void sub_10055BFE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10055C058(_QWORD *a1, _QWORD *a2)
{
  unint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  unint64_t v6;
  _QWORD *v7;
  _BYTE *v8;

  if (a1 != a2)
  {
    v3 = a2[4];
    v4 = a2[1];
    if (a2[2] == v4)
    {
      v5 = 0;
      v8 = 0;
      v7 = (_QWORD *)(v4 + ((((a2[5] + v3) * (unsigned __int128)0x4EC4EC4EC4EC4EC5uLL) >> 64) & 0x7FFFFFFFFFFFFFF8));
    }
    else
    {
      v5 = (_BYTE *)(*(_QWORD *)(v4 + 8 * (v3 / 0x1A)) + 156 * (v3 % 0x1A));
      v6 = a2[5] + v3;
      v7 = (_QWORD *)(v4 + 8 * (v6 / 0x1A));
      v8 = (_BYTE *)(*v7 + 156 * (v6 % 0x1A));
    }
    sub_10055C10C(a1, (_QWORD *)(v4 + 8 * (v3 / 0x1A)), v5, v7, v8);
  }
  return a1;
}

_QWORD *sub_10055C10C(_QWORD *a1, _QWORD *a2, _BYTE *a3, _QWORD *a4, _BYTE *a5)
{
  unint64_t v5;

  if (a5 == a3)
    v5 = 0;
  else
    v5 = 26 * (a4 - a2)
       + 0x6F96F96F96F96F97 * ((uint64_t)&a5[-*a4] >> 2)
       - 0x6F96F96F96F96F97 * ((uint64_t)&a3[-*a2] >> 2);
  return sub_10055C170(a1, a2, a3, v5);
}

_QWORD *sub_10055C170(_QWORD *a1, _QWORD *a2, _BYTE *a3, unint64_t a4)
{
  unint64_t v8;
  _BYTE **v9;
  _BYTE *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  _BYTE **v20;
  _BYTE *v21;
  _QWORD *v22;
  _BYTE *v23;

  v8 = a1[5];
  if (v8 >= a4)
  {
    v15 = a1[4];
    v16 = a1[1];
    v17 = (_QWORD *)(v16 + 8 * (v15 / 0x1A));
    if (a1[2] == v16)
      v18 = 0;
    else
      v18 = *v17 + 156 * (v15 % 0x1A);
    v22 = a2;
    v23 = a3;
    sub_10055C5F4(&v22, a4);
    v20 = (_BYTE **)v22;
    v21 = v23;
    v22 = v17;
    v23 = (_BYTE *)v18;
    sub_10055C6A8(a2, a3, v20, v21, (uint64_t)&v22);
    return (_QWORD *)sub_10055C468((uint64_t)a1, v22, (uint64_t)v23);
  }
  else
  {
    v22 = a2;
    v23 = a3;
    sub_10055C5F4(&v22, v8);
    v9 = (_BYTE **)v22;
    v10 = v23;
    v11 = a1[4];
    v12 = a1[1];
    v13 = (_QWORD *)(v12 + 8 * (v11 / 0x1A));
    if (a1[2] == v12)
      v14 = 0;
    else
      v14 = *v13 + 156 * (v11 % 0x1A);
    v22 = v13;
    v23 = (_BYTE *)v14;
    sub_10055C6A8(a2, a3, v9, v10, (uint64_t)&v22);
    return sub_10055C2C8(a1, v9, v10, a4 - a1[5]);
  }
}

_QWORD *sub_10055C2C8(_QWORD *a1, _QWORD *a2, _OWORD *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *result;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _OWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;

  v8 = a1[1];
  v9 = a1[2];
  if (v9 == v8)
    v10 = 0;
  else
    v10 = 26 * ((v9 - v8) >> 3) - 1;
  v11 = a1[5] + a1[4];
  v12 = v10 - v11;
  if (a4 > v12)
  {
    sub_10018EF04(a1, a4 - v12);
    v8 = a1[1];
    v9 = a1[2];
    v11 = a1[4] + a1[5];
  }
  v13 = (_QWORD *)(v8 + 8 * (v11 / 0x1A));
  if (v9 == v8)
    v14 = 0;
  else
    v14 = *v13 + 156 * (v11 % 0x1A);
  v29 = (_QWORD *)(v8 + 8 * (v11 / 0x1A));
  v30 = v14;
  result = sub_10055C5F4(&v29, a4);
  v16 = v30;
  if (v14 != v30)
  {
    v17 = v29;
    do
    {
      if (v13 == v17)
        v18 = v16;
      else
        v18 = *v13 + 4056;
      if (v14 == v18)
      {
        v18 = v14;
      }
      else
      {
        v19 = (_OWORD *)v14;
        do
        {
          v20 = a3[1];
          *v19 = *a3;
          v19[1] = v20;
          v21 = a3[2];
          v22 = a3[3];
          v23 = a3[5];
          v19[4] = a3[4];
          v19[5] = v23;
          v19[2] = v21;
          v19[3] = v22;
          v24 = a3[6];
          v25 = a3[7];
          v26 = a3[8];
          *(_OWORD *)((char *)v19 + 140) = *(_OWORD *)((char *)a3 + 140);
          v19[7] = v25;
          v19[8] = v26;
          v19[6] = v24;
          a3 = (_OWORD *)((char *)a3 + 156);
          if ((_OWORD *)((char *)a3 - *a2) == (_OWORD *)4056)
          {
            v27 = (_OWORD *)a2[1];
            ++a2;
            a3 = v27;
          }
          v19 = (_OWORD *)((char *)v19 + 156);
        }
        while (v19 != (_OWORD *)v18);
      }
      a1[5] += 0x6F96F96F96F96F97 * ((uint64_t)(v18 - v14) >> 2);
      if (v13 == v17)
        break;
      v28 = v13[1];
      ++v13;
      v14 = v28;
    }
    while (v28 != v16);
  }
  return result;
}

uint64_t sub_10055C468(uint64_t result, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD v16[2];

  v3 = (_QWORD *)result;
  v4 = *(_QWORD *)(result + 32);
  v5 = v4 + *(_QWORD *)(result + 40);
  v6 = *(_QWORD *)(result + 8);
  v7 = *(_QWORD *)(result + 16);
  v8 = (_QWORD *)(v6 + 8 * (v5 / 0x1A));
  if (v7 == v6)
    v9 = 0;
  else
    v9 = *v8 + 156 * (v5 % 0x1A);
  if (v9 != a3)
  {
    v10 = 26 * (v8 - a2) + 0x6F96F96F96F96F97 * ((uint64_t)(v9 - *v8) >> 2);
    v11 = (a3 - *a2) >> 2;
    v12 = v10 - 0x6F96F96F96F96F97 * v11;
    if (v12 >= 1)
    {
      v13 = (_QWORD *)(v6 + 8 * (v4 / 0x1A));
      if (v7 == v6)
        v14 = 0;
      else
        v14 = *v13 + 156 * (v4 % 0x1A);
      if (a3 == v14)
        v15 = 0;
      else
        v15 = 26 * (a2 - v13) + 0x6F96F96F96F96F97 * v11 - 0x6F96F96F96F96F97 * ((uint64_t)(v14 - *v13) >> 2);
      v16[0] = v13;
      v16[1] = v14;
      sub_10055C5F4(v16, v15);
      v3[5] -= v12;
      do
        result = sub_10047F974(v3, 1);
      while ((result & 1) != 0);
    }
  }
  return result;
}

_QWORD *sub_10055C5F4(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;

  if (a2)
  {
    v2 = (_QWORD *)*result;
    v3 = a2 + 0x6F96F96F96F96F97 * ((uint64_t)(result[1] - *(_QWORD *)*result) >> 2);
    if ((uint64_t)v3 < 1)
    {
      v5 = 25 - v3;
      v6 = &v2[-(v5 / 0x1A)];
      *result = v6;
      v4 = *v6 + 156 * (26 * (v5 / 0x1A) - v5) + 3900;
    }
    else
    {
      *result = &v2[v3 / 0x1A];
      v4 = v2[v3 / 0x1A] + 156 * (v3 % 0x1A);
    }
    result[1] = v4;
  }
  return result;
}

double sub_10055C6A8(_QWORD *a1, _BYTE *a2, _BYTE **a3, _BYTE *a4, uint64_t a5)
{
  void **v7;
  char *v8;
  _QWORD *v10;
  _BYTE *i;
  _BYTE *v12;
  double result;
  uint64_t v14;
  __int128 v15;

  v7 = *(void ***)a5;
  v8 = *(char **)(a5 + 8);
  if (a1 != a3)
  {
    v10 = a1 + 1;
    for (i = (_BYTE *)(*a1 + 4056); ; i = v12 + 4056)
    {
      sub_10055C738(a2, v8, i, v7, &v14);
      v8 = (char *)*((_QWORD *)&v15 + 1);
      v7 = (void **)v15;
      *(_QWORD *)a5 = v15;
      *(_QWORD *)(a5 + 8) = v8;
      if (v10 == a3)
        break;
      v12 = (_BYTE *)*v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  sub_10055C738(a2, v8, a4, v7, &v14);
  result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void *sub_10055C738@<X0>(_BYTE *__src@<X1>, char *__dst@<X4>, _BYTE *a3@<X2>, void **a4@<X3>, _QWORD *a5@<X8>)
{
  void **v6;
  _BYTE *v7;
  _BYTE *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void *result;
  char *v14;

  v6 = a4;
  v7 = __src;
  if (__src == a3)
  {
    v9 = __src;
  }
  else
  {
    v9 = a3;
    v6 = a4 + 1;
    v10 = (char *)*a4;
    while (1)
    {
      v11 = 0x6F96F96F96F96F97 * ((v10 - __dst + 4056) >> 2);
      v12 = 0x6F96F96F96F96F97 * ((v9 - v7) >> 2) >= v11 ? v11 : 0x6F96F96F96F96F97 * ((v9 - v7) >> 2);
      if (v12)
        result = memmove(__dst, v7, 156 * v12);
      v7 += 156 * v12;
      if (v7 == v9)
        break;
      v14 = (char *)*v6++;
      v10 = v14;
      __dst = v14;
    }
    __dst += 156 * v12;
    if ((char *)*(v6 - 1) + 4056 == __dst)
      __dst = (char *)*v6;
    else
      --v6;
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = __dst;
  return result;
}

void sub_10055C824(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        sub_100279AA4(&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void **sub_10055C894(void **a1)
{
  void **v3;

  sub_100067AC4((uint64_t)(a1 + 3));
  v3 = a1;
  sub_10055C824(&v3);
  return a1;
}

_QWORD *sub_10055C8D0(_QWORD *a1)
{
  *a1 = off_102143308;
  sub_1004A4854(a1 + 1);
  return a1;
}

void sub_10055C904(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102143268;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10055C918(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102143268;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_10055C94C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021432B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10055C960(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021432B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_10055C994(_QWORD *a1)
{
  *a1 = off_102143308;
  sub_1004A4854(a1 + 1);
  operator delete();
}

void sub_10055C9D8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102143340;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10055C9EC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102143340;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

__n128 sub_10055CA20(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 240) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 208) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_QWORD *)(a2 + 8) = a2 + 16;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = a2 + 64;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = a2 + 88;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = a2 + 112;
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = a2 + 136;
  *(_QWORD *)(a2 + 184) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a2 + 152) = a2 + 160;
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = a2 + 184;
  *(_DWORD *)(a2 + 248) = 0;
  *(_OWORD *)(a2 + 216) = 0u;
  *(_OWORD *)(a2 + 232) = 0u;
  *(_OWORD *)(a2 + 200) = 0u;
  *(_QWORD *)(a2 + 256) = a2 + 264;
  *(_QWORD *)(a2 + 264) = 0;
  *(_QWORD *)(a2 + 272) = 0;
  *(_QWORD *)(a2 + 280) = 0;
  *(_QWORD *)(a2 + 288) = 0;
  *(_QWORD *)(a2 + 296) = 0xBFF0000000000000;
  __asm { FMOV            V0.2D, #-1.0 }
  *(__n128 *)(a2 + 304) = result;
  return result;
}

void sub_10055CAE0(uint64_t a1, uint64_t a2)
{
  sub_100090AE4(a2 + 256, *(char **)(a2 + 264));
  sub_100090AE4(a2 + 176, *(char **)(a2 + 184));
  sub_1001275FC(a2 + 152, *(_QWORD **)(a2 + 160));
  sub_100090AE4(a2 + 128, *(char **)(a2 + 136));
  sub_100090AE4(a2 + 104, *(char **)(a2 + 112));
  sub_100090AE4(a2 + 80, *(char **)(a2 + 88));
  sub_100090AE4(a2 + 56, *(char **)(a2 + 64));
  sub_100090AE4(a2 + 32, *(char **)(a2 + 40));
  sub_100090AE4(a2 + 8, *(char **)(a2 + 16));
}

void sub_10055CB64(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t sub_10055CBA8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 144))
  {
    if (*(char *)(a1 + 143) < 0)
      operator delete(*(void **)(a1 + 120));
    if (*(char *)(a1 + 39) < 0)
      operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t sub_10055CBF0(uint64_t a1)
{
  void *v2;

  if (*(_BYTE *)(a1 + 88))
  {
    if (*(_BYTE *)(a1 + 80))
    {
      v2 = *(void **)(a1 + 56);
      if (v2)
      {
        *(_QWORD *)(a1 + 64) = v2;
        operator delete(v2);
      }
    }
    if (*(char *)(a1 + 47) < 0)
      operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void sub_10055CC40(id a1)
{
  qword_1022A0058 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

_QWORD *sub_10055CC6C(_QWORD *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_100259C18(result, a4);
    result = sub_10055A9BC((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_10055CCD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_10055C824(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_10055CCF0(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_10055AD54(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_10055CD4C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_BYTE *sub_10055CD68(_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[88] = 0;
  if (*(_BYTE *)(a2 + 88))
  {
    sub_10055AFA0((uint64_t)a1, (__int128 *)a2);
    a1[88] = 1;
  }
  return a1;
}

void sub_10055CDA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055CBF0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10055CDBC(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 48) = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    sub_10012E3D0(a1, a2);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_BYTE *)(a1 + 48) = 1;
  }
  return a1;
}

void sub_10055CE08(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 48))
    sub_100067AC4(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10055CE24(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 48) = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    sub_10012E3D0(a1, a2);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
    *(_BYTE *)(a1 + 48) = 1;
  }
  return a1;
}

void sub_10055CE70(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 48))
    sub_100067AC4(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10055CE8C(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  sub_10055CED4((_QWORD *)a1, a2);
  return a1;
}

void sub_10055CEB8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
    sub_1018FF474(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10055CED4(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;

  if (*(_BYTE *)(a2 + 24))
  {
    v2 = result;
    *result = 0;
    result[1] = 0;
    result[2] = 0;
    result = sub_10055B604(result, *(const void **)a2, *(_QWORD *)(a2 + 8), 0x6F96F96F96F96F97 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2));
    *((_BYTE *)v2 + 24) = 1;
  }
  return result;
}

_BYTE *sub_10055CF30(_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[144] = 0;
  if (*(_BYTE *)(a2 + 144))
  {
    sub_10055B778((uint64_t)a1, (uint64_t *)a2);
    a1[144] = 1;
  }
  return a1;
}

void sub_10055CF70(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055CBA8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10055CF84(uint64_t a1, __int128 *a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  sub_10028DFB8((_OWORD *)a1, a2);
  return a1;
}

void sub_10055CFB0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
    sub_1018FF48C((void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10055CFCC(_QWORD *a1, char *a2, __int128 *a3, char *a4, __int128 *a5)
{
  unint64_t v5;

  if (a5 == a3)
    v5 = 0;
  else
    v5 = (((uint64_t)a5 - *(_QWORD *)a4) >> 4) + 32 * (a4 - a2) - (((uint64_t)a3 - *(_QWORD *)a2) >> 4);
  return sub_10055B9A4(a1, a2, a3, v5);
}

_QWORD *sub_10055D000(_QWORD *a1, _QWORD *a2, _OWORD *a3, _QWORD *a4, _OWORD *a5)
{
  unint64_t v5;

  if (a5 == a3)
    v5 = 0;
  else
    v5 = 26 * (a4 - a2)
       + 0x6F96F96F96F96F97 * (((uint64_t)a5 - *a4) >> 2)
       - 0x6F96F96F96F96F97 * (((uint64_t)a3 - *a2) >> 2);
  return sub_10055C2C8(a1, a2, a3, v5);
}

uint64_t *sub_10055D064(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)sub_10019C424((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    sub_10055D0F8((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000145B0(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

_BYTE *sub_10055D0F8@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  _BYTE *result;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = v6 + 32;
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    result = sub_100115CE4(result, *(void **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
    *(_OWORD *)result = v9;
  }
  *((_DWORD *)v6 + 14) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_10055D180(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_100279070(v3, v2);
  _Unwind_Resume(a1);
}

void sub_10055D19C(void **a1)
{
  operator delete(*a1);
}

void sub_10055D1A4()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_10055D240(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_10055D258()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_10055D2E4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

uint64_t sub_10055D2FC(uint64_t result)
{
  byte_102301B58 = result;
  return result;
}

void sub_10055D308(_QWORD *a1)
{
  *a1 = off_1021433B0;
  operator new();
}

uint64_t sub_10055D450(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)a1 = off_1021433B0;
  pthread_mutex_destroy(*(pthread_mutex_t **)(a1 + 8));
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(void **)(v2 + 104);
  if (v3)
  {
    free(v3);
    v2 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(v2 + 104) = 0;
  }
  objc_msgSend(*(id *)(v2 + 64), "assertInside");

  if (*(_QWORD *)(a1 + 8))
    operator delete();
  return a1;
}

void sub_10055D4D4(uint64_t a1)
{
  sub_10055D450(a1);
  operator delete();
}

BOOL sub_10055D4F8(uint64_t a1, int a2)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 8) + 64), "assertInside");
  return *(_DWORD *)(*(_QWORD *)(a1 + 8) + 72) == a2;
}

BOOL sub_10055D534(uint64_t a1)
{
  pthread_t v2;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 8) + 64), "assertInside");
  v2 = *(pthread_t *)(*(_QWORD *)(a1 + 8) + 80);
  return v2 != pthread_self();
}

uint64_t sub_10055D570(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

pthread_cond_t **sub_10055D578(pthread_cond_t **a1)
{
  pthread_cond_t *v2;

  v2 = (pthread_cond_t *)malloc_type_malloc(0x30uLL, 0x1000040EED21634uLL);
  *a1 = v2;
  pthread_cond_init(v2, 0);
  return a1;
}

pthread_cond_t **sub_10055D5BC(pthread_cond_t **a1)
{
  pthread_cond_destroy(*a1);
  free(*a1);
  return a1;
}

void sub_10055D5F4(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_10055D620(uint64_t a1)
{
  sub_10055D668(a1);
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 6152) = 0;
  *(_QWORD *)(a1 + 12304) = 0;
  *(_QWORD *)(a1 + 12344) = 0;
  *(_QWORD *)(a1 + 12336) = 0;
  *(_QWORD *)(a1 + 12392) = 0;
  *(_QWORD *)(a1 + 12384) = 0;
  *(_BYTE *)(a1 + 12408) = 1;
}

void sub_10055D668(uint64_t a1)
{
  unint64_t v2;
  _BYTE *v3;
  unint64_t v4;

  if (*(_QWORD *)(a1 + 12344) <= *(_QWORD *)(a1 + 12392))
    v2 = *(_QWORD *)(a1 + 12392);
  else
    v2 = *(_QWORD *)(a1 + 12344);
  v3 = (_BYTE *)(a1 + 12408);
  if (*(_BYTE *)(a1 + 12408))
    v4 = 0;
  else
    v4 = 5;
  if (v2 > v4)
  {
    do
      sub_10055D6EC((_QWORD *)a1, v4++);
    while (v2 != v4);
  }
  *(_QWORD *)(a1 + 12344) = 0;
  *(_QWORD *)(a1 + 12336) = 0;
  *(_QWORD *)(a1 + 12392) = 0;
  *(_QWORD *)(a1 + 12384) = 0;
  *v3 = 1;
}

void sub_10055D6EC(_QWORD *a1, signed int a2)
{
  _BOOL4 v4;
  unint64_t v5;
  uint64_t v6;
  float *v7;
  float v8;
  float v9;
  float v13;
  double v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  int v21;
  void (*v22)(uint64_t *, _QWORD);
  float v23;
  uint64_t v24;
  int v25;
  float v26;
  float v27;

  v4 = 0;
  v26 = 0.0;
  v27 = 0.0;
  v5 = (unint64_t)(a1[1542] + a2) % a1[1544];
  v6 = a1[1539];
  v7 = (float *)(v6 + 48 * v5);
  v8 = v7[2];
  v9 = v7[9];
  if (v8 > v7[3] && v7[8] > 8.0 && v9 > 12.0 && v7[10] > 12.0)
    v4 = (float)(*(float *)(v6 + 48 * v5 + 28) * 0.013486) < 0.001;
  if (v4
    && (v13 = *(float *)(v6 + 48 * v5 + 20),
        v14 = (float)(sqrtf(v8 * 0.013486) * 980.0) / ((float)(v13 * v13) * 3.14159265 * 3.14159265),
        v14 > 0.00800000038)
    && (v15 = sub_10055E944((uint64_t)a1, (uint64_t)(a1 + 1539), a2), (int)v15 >= 2))
  {
    v25 = 1;
    v24 = *(_QWORD *)v7;
    v16 = (unint64_t)(a1[1548] + a2) % a1[1550];
    v17 = a1[1545];
    if (*(float *)(v17 + 48 * v16 + 8) > *(float *)(v17 + 48 * v16 + 12)
      && (v18 = *(float *)(v17 + 48 * v16 + 36), v18 > 4.0)
      && (int)sub_10055E944(v15, (uint64_t)(a1 + 1545), a2) >= 2
      && (v19 = log10f(v9) + -0.565,
          v20 = log10f(v18) + -0.325,
          (float)((float)((float)((float)(v19 * -7.8237) * v20) + (float)((float)(v19 * 9.8052) * v19))
                + (float)((float)(v20 * 4.529) * v20)) >= 3.36))
    {
      v23 = v14;
      v26 = v23;
      v27 = v13;
    }
    else
    {
      v25 = -2;
    }
  }
  else
  {
    if ((float)(*(float *)(v6 + 48 * v5 + 16) * 0.013486) <= 0.0001)
      v21 = 0;
    else
      v21 = -1;
    v25 = v21;
    v24 = *(_QWORD *)v7;
  }
  v22 = (void (*)(uint64_t *, _QWORD))a1[1552];
  if (v22)
    v22(&v24, a1[1553]);
}

void sub_10055D94C(unsigned __int16 *a1, uint64_t *a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  __int128 v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a3 > 0.0)
  {
    v13 = v6;
    v14 = v5;
    v15 = v3;
    v16 = v4;
    sub_10055D9B4(a1, a3);
    v10 = *a2;
    *(double *)&v11 = a3;
    *((_QWORD *)&v11 + 1) = v10;
    v12 = *((_DWORD *)a2 + 2);
    sub_10021C2E4(a1, &v11);
    sub_10055DDF0((uint64_t)a1, a3);
  }
}

void sub_10055D9B4(unsigned __int16 *a1, double a2)
{
  unsigned __int16 *v4;
  unint64_t v5;
  unint64_t v6;
  NSObject *v7;
  unint64_t v8;
  unint64_t v9;
  float v10;
  const char *v11;
  unsigned __int16 *v12;
  unint64_t v13;
  unint64_t v14;
  NSObject *v15;
  unint64_t v16;
  unint64_t v17;
  float v18;
  uint8_t *v19;
  uint8_t buf[4];
  double v21;

  if (a1[1])
  {
    v4 = a1 + 4;
    v5 = a1[1] + (unint64_t)*a1 - 1;
    v6 = *((unsigned int *)a1 + 1);
    if (v5 < v6)
      v6 = 0;
    if (*(double *)&v4[12 * (v5 - v6)] + 1.0 < a2)
    {
      if (qword_10229FFF0 != -1)
        dispatch_once(&qword_10229FFF0, &stru_102143488);
      v7 = off_10229FFF8;
      if (os_log_type_enabled((os_log_t)off_10229FFF8, OS_LOG_TYPE_INFO))
      {
        v8 = *a1 + (unint64_t)a1[1] - 1;
        v9 = *((unsigned int *)a1 + 1);
        if (v8 < v9)
          v9 = 0;
        v10 = a2 - *(double *)&v4[12 * (v8 - v9)];
        *(_DWORD *)buf = 134217984;
        v21 = v10;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Resetting detector, %.1f seconds without an accel sample", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_26;
      bzero(buf, 0x65CuLL);
      if (qword_10229FFF0 != -1)
        dispatch_once(&qword_10229FFF0, &stru_102143488);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FFF8, 1, "Resetting detector, %.1f seconds without an accel sample");
LABEL_31:
      v19 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CMTremorDetection::checkForGap(CFAbsoluteTime)", "%s\n", v11);
      if (v19 != buf)
        free(v19);
LABEL_26:
      sub_10055D668((uint64_t)a1);
      *(_DWORD *)a1 = 0;
      *((_DWORD *)a1 + 1538) = 0;
      *((_QWORD *)a1 + 1538) = 0;
      *((_QWORD *)a1 + 1543) = 0;
      *((_QWORD *)a1 + 1542) = 0;
      *((_QWORD *)a1 + 1549) = 0;
      *((_QWORD *)a1 + 1548) = 0;
      *((_BYTE *)a1 + 12408) = 1;
      return;
    }
  }
  if (a1[3077])
  {
    v12 = a1 + 3080;
    v13 = a1[3077] + (unint64_t)a1[3076] - 1;
    v14 = *((unsigned int *)a1 + 1539);
    if (v13 < v14)
      v14 = 0;
    if (*(double *)&v12[12 * (v13 - v14)] + 1.0 < a2)
    {
      if (qword_10229FFF0 != -1)
        dispatch_once(&qword_10229FFF0, &stru_102143488);
      v15 = off_10229FFF8;
      if (os_log_type_enabled((os_log_t)off_10229FFF8, OS_LOG_TYPE_INFO))
      {
        v16 = a1[3076] + (unint64_t)a1[3077] - 1;
        v17 = *((unsigned int *)a1 + 1539);
        if (v16 < v17)
          v17 = 0;
        v18 = a2 - *(double *)&v12[12 * (v16 - v17)];
        *(_DWORD *)buf = 134217984;
        v21 = v18;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Resetting detector, %.1f seconds without a gyro sample", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_26;
      bzero(buf, 0x65CuLL);
      if (qword_10229FFF0 != -1)
        dispatch_once(&qword_10229FFF0, &stru_102143488);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FFF8, 1, "Resetting detector, %.1f seconds without a gyro sample");
      goto LABEL_31;
    }
  }
}

void sub_10055DDF0(uint64_t a1, double a2)
{
  double *v3;
  uint64_t v4;
  double v5;

  if (!*(_QWORD *)(a1 + 12304))
    *(_QWORD *)(a1 + 12304) = 1280 * (1000 * (uint64_t)a2 / 1280) + 1280;
  if (*(_DWORD *)(a1 + 4) == *(unsigned __int16 *)(a1 + 2))
  {
    v3 = (double *)sub_10055E504((unsigned __int16 *)a1, 0x80uLL);
    v4 = *(_QWORD *)(a1 + 12304);
    if (v4 >= 1)
    {
      v5 = (double)v4 / 1000.0;
      if (*v3 >= v5)
      {
        if (*v3 < (double)(v4 + 640) / 1000.0)
        {
          sub_10055DEF0(a1, v5);
          v4 = *(_QWORD *)(a1 + 12304);
        }
        *(_QWORD *)(a1 + 12304) = v4 + 1280;
      }
    }
  }
}

unsigned __int16 *sub_10055DEB0(unsigned __int16 *result, uint64_t *a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  if (a3 > 0.0)
  {
    v8 = v3;
    v9 = v4;
    v5 = *a2;
    *(double *)&v6 = a3;
    *((_QWORD *)&v6 + 1) = v5;
    v7 = *((_DWORD *)a2 + 2);
    return sub_10021C2E4(result + 3076, &v6);
  }
  return result;
}

void sub_10055DEF0(uint64_t a1, double a2)
{
  unint64_t v4;
  signed int i;
  __int128 v6[3];

  if (*(_DWORD *)(a1 + 6156) == *(unsigned __int16 *)(a1 + 6154)
    && *(_DWORD *)(a1 + 4) == *(unsigned __int16 *)(a1 + 2))
  {
    sub_10055E068(a1, (unsigned __int16 *)a1, 273, (uint64_t)v6, a2);
    sub_10055DFF8((_QWORD *)(a1 + 12312), v6);
    sub_10055E068(a1, (unsigned __int16 *)(a1 + 6152), 1, (uint64_t)v6, a2);
    sub_10055DFF8((_QWORD *)(a1 + 12360), v6);
    v4 = *(_QWORD *)(a1 + 12344);
    if (v4 <= *(_QWORD *)(a1 + 12392))
      v4 = *(_QWORD *)(a1 + 12392);
    if (v4 >= 9)
    {
      if (*(_BYTE *)(a1 + 12408))
      {
        for (i = 0; i != 4; ++i)
          sub_10055D6EC((_QWORD *)a1, i);
        *(_BYTE *)(a1 + 12408) = 0;
      }
      sub_10055D6EC((_QWORD *)a1, 4);
    }
  }
}

uint64_t sub_10055DFF8(_QWORD *a1, __int128 *a2)
{
  unint64_t v2;
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  unint64_t v6;

  v2 = a1[5];
  if (v2)
  {
    v3 = (_OWORD *)(*a1 + 48 * ((a1[3] + a1[4]) % v2));
    v4 = *a2;
    v5 = a2[1];
    *(_OWORD *)((char *)v3 + 28) = *(__int128 *)((char *)a2 + 28);
    *v3 = v4;
    v3[1] = v5;
    v6 = a1[4];
    if (v6 == a1[5])
    {
      v2 = 0;
      a1[3] = (a1[3] + 1) % v6;
    }
    else
    {
      a1[4] = v6 + 1;
      return 1;
    }
  }
  return v2;
}

void sub_10055E068(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, __int16 a3@<W2>, uint64_t a4@<X8>, double a5@<D0>)
{
  int v7;
  uint64_t v8;
  int v9;
  float *v10;
  float v11;
  int v12;
  double v13;
  int v14;
  uint64_t v15;
  double v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  uint64_t v22;
  BOOL v23;
  int v24;
  float v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  float v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  int v35;
  int v36;
  int v37;
  int v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  _OWORD v52[32];

  sub_10055E7F0(a1, v52, a2, a3);
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = 0;
  *(double *)a4 = a5;
  v7 = dword_102301B7C;
  v8 = dword_102301B7C;
  v9 = dword_102301B7C + 1;
  if (dword_102301B7C + 1 < dword_102301B80)
  {
    v10 = (float *)v52 + dword_102301B7C + 1;
    do
    {
      v11 = *v10++;
      if (v11 >= *((float *)v52 + v7))
        v7 = v9;
      ++v9;
    }
    while (dword_102301B80 != v9);
  }
  if (v7 >= 0)
    v12 = v7;
  else
    v12 = v7 + 1;
  v13 = (double)(v12 >> 1);
  v14 = (int)(v13 + -0.001);
  if (v14 <= 1)
    v15 = 1;
  else
    v15 = v14;
  v16 = v13 + 0.001;
  do
  {
    if ((int)v15 <= (int)v16 + 1)
    {
      v17 = 0;
      v18 = v15;
      do
      {
        if (!v17 || *((float *)v52 + v18) >= *((float *)v52 + v17))
          v17 = v18;
        v23 = v18++ <= (int)v16;
      }
      while (v23);
    }
    else
    {
      v17 = 0;
    }
  }
  while (!v17);
  v19 = (2 * v7) | 1;
  v20 = *((float *)v52 + v19);
  v21 = *((float *)v52 + 2 * v7);
  v22 = 2 * v7 - 1;
  if (v20 <= v21 || v21 <= *((float *)v52 + v22))
  {
    v23 = *((float *)v52 + v22) <= v21 || v21 <= v20;
    if (v23)
      LODWORD(v19) = 2 * v7;
    else
      LODWORD(v19) = 2 * v7 - 1;
  }
  v24 = 3 * v7;
  v25 = *((float *)v52 + 3 * v7 + 1);
  v26 = 3 * v7;
  v27 = *((float *)v52 + v26);
  v28 = v26 - 1;
  if (v25 <= v27 || v27 <= *((float *)v52 + v28))
  {
    v29 = *((float *)v52 + v28);
    if (v27 > v25 && v29 > v27)
    {
      v31 = v26 - 2;
      if (*((float *)v52 + v31) <= v29)
        v24 = v28;
      else
        v24 = v31;
    }
  }
  else if (*((float *)v52 + v26 + 2) <= v25)
  {
    v24 = 3 * v7 + 1;
  }
  else
  {
    v24 = v26 + 2;
  }
  v32 = dword_102301B84;
  v33 = dword_102301B88;
  v34 = *(float *)&dword_102301B8C;
  if (dword_102301B84 >= dword_102301B88)
  {
    v36 = 0;
    v35 = 0;
    v43 = 0.0;
    v42 = 0.0;
  }
  else
  {
    v35 = 0;
    v36 = 0;
    v37 = -v24;
    v38 = -(int)v19;
    v39 = 0.0;
    v40 = 0.0;
    v41 = 0.0;
    v42 = 0.0;
    v43 = 0.0;
    do
    {
      v44 = v32 - v7;
      if ((int)v32 - v7 < 0)
        v44 = v7 - v32;
      if (v44 >= 2)
      {
        v45 = v38 + v32;
        if (v38 + (int)v32 < 0)
          v45 = -v45;
        if (v45 >= 2)
        {
          v46 = v37 + v32;
          if (v37 + (int)v32 < 0)
            v46 = -v46;
          if (v46 >= 2)
          {
            v47 = *((float *)v52 + v32);
            if (v47 >= v41)
            {
              *(float *)(a4 + 12) = v47;
              v41 = v47;
            }
            v43 = v43 + v47;
            ++v36;
            if (v32 < v8)
            {
              if (v47 >= v40)
              {
                *(float *)(a4 + 28) = v47;
                v40 = v47;
              }
              v42 = v42 + v47;
              ++v35;
            }
          }
        }
      }
      v48 = *((float *)v52 + v32);
      if (v48 > v39)
      {
        *(float *)(a4 + 16) = v48;
        *(float *)(a4 + 24) = v34 * (float)(int)v32;
        v39 = v48;
      }
      ++v32;
    }
    while (v33 != v32);
  }
  v49 = *((float *)v52 + v7);
  *(float *)(a4 + 8) = v49;
  *(float *)(a4 + 20) = v34 * (float)v7;
  v50 = v49 / (float)(v43 / (float)v36);
  v51 = *((float *)v52 + v17);
  *(float *)(a4 + 32) = v50;
  *(float *)(a4 + 36) = v49 / (float)(v42 / (float)v35);
  *(float *)(a4 + 40) = v49 / v51;
}

void sub_10055E3A0(uint64_t a1, _DWORD *a2, unsigned __int16 *a3, int a4)
{
  int v7;
  unint64_t v8;
  unint64_t i;
  int v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  _BYTE v15[2200];
  unsigned __int16 v16[516];

  *(_QWORD *)v16 = 0x10000000000;
  sub_1014022D8(v15);
  v7 = 0;
  v8 = 0;
  for (i = 0; i != 256; ++i)
  {
    if (a4 == 256)
    {
      v10 = *(_DWORD *)(sub_10055E504(a3, i) + 16);
    }
    else if (a4 == 16)
    {
      v10 = *(_DWORD *)(sub_10055E504(a3, i) + 12);
    }
    else
    {
      v10 = 0;
      if (a4 == 1)
        v10 = *(_DWORD *)(sub_10055E504(a3, i) + 8);
    }
    v11 = v8 + (unsigned __int16)v7;
    if (v11 >= 0x100)
      v12 = -256;
    else
      v12 = 0;
    *(_DWORD *)&v16[2 * v12 + 4 + 2 * v11] = v10;
    if (v8 > 0xFF)
    {
      if ((unsigned __int16)v7 >= 0xFFu)
        v13 = -256;
      else
        v13 = 0;
      v14 = v7 + v13;
      v7 = v14 + 1;
      v16[0] = v14 + 1;
    }
    else
    {
      v16[1] = ++v8;
    }
  }
  sub_10055E700(v16);
  sub_1014022DC((uint64_t)v15, a2, v16);
}

uint64_t sub_10055E504(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  NSObject *v7;
  int v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  unint64_t v13;
  __int16 v14;
  int v15;
  uint8_t buf[4];
  unint64_t v17;
  __int16 v18;
  int v19;

  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021434C8);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 134218240;
      v17 = a2;
      v18 = 1024;
      v19 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021434C8);
      v9 = *((_DWORD *)a1 + 1);
      v12 = 134218240;
      v13 = a2;
      v14 = 1024;
      v15 = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", (size_t)&v12, 18);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "const T &CMQueue<CMTremorDetection::SensorSample>::operator[](const size_t) const [T = CMTremorDetection::SensorSample]", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
  v4 = *a1 + a2;
  v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5)
    v5 = 0;
  return (uint64_t)&a1[12 * (v4 - v5) + 4];
}

float *sub_10055E700(unsigned __int16 *a1)
{
  unint64_t v2;
  unint64_t v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float *result;

  v2 = 0;
  v3 = 255;
  do
  {
    v4 = (float)(cosf((float)(int)v2 * 0.02464) * -0.46) + 0.54;
    v5 = v4 * *(float *)sub_1004784C4(a1, v2);
    *(float *)sub_1004784C4(a1, v2) = v5;
    v6 = v4 * *(float *)sub_1004784C4(a1, v3);
    *(float *)sub_1004784C4(a1, v3) = v6;
    ++v2;
    --v3;
  }
  while (v2 != 128);
  v7 = *(float *)sub_1004784C4(a1, 0x80uLL) * 0.99997;
  result = (float *)sub_1004784C4(a1, 0x80uLL);
  *result = v7;
  return result;
}

float32x4_t sub_10055E7F0(uint64_t a1, _OWORD *a2, unsigned __int16 *a3, __int16 a4)
{
  float32x4_t result;
  unint64_t i;
  unint64_t j;
  unint64_t k;
  _DWORD v11[128];

  result.i64[0] = 0;
  a2[30] = 0u;
  a2[31] = 0u;
  a2[28] = 0u;
  a2[29] = 0u;
  a2[26] = 0u;
  a2[27] = 0u;
  a2[24] = 0u;
  a2[25] = 0u;
  a2[22] = 0u;
  a2[23] = 0u;
  a2[20] = 0u;
  a2[21] = 0u;
  a2[18] = 0u;
  a2[19] = 0u;
  a2[16] = 0u;
  a2[17] = 0u;
  a2[14] = 0u;
  a2[15] = 0u;
  a2[12] = 0u;
  a2[13] = 0u;
  a2[10] = 0u;
  a2[11] = 0u;
  a2[8] = 0u;
  a2[9] = 0u;
  a2[6] = 0u;
  a2[7] = 0u;
  a2[4] = 0u;
  a2[5] = 0u;
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  if ((a4 & 1) != 0)
  {
    sub_10055E3A0(a1, v11, a3, 1);
    for (i = 0; i != 512; i += 16)
    {
      result = vmlaq_f32((float32x4_t)a2[i / 0x10], *(float32x4_t *)&v11[i / 4], *(float32x4_t *)&v11[i / 4]);
      a2[i / 0x10] = result;
    }
  }
  if ((a4 & 0x10) != 0)
  {
    sub_10055E3A0(a1, v11, a3, 16);
    for (j = 0; j != 512; j += 16)
    {
      result = vmlaq_f32((float32x4_t)a2[j / 0x10], *(float32x4_t *)&v11[j / 4], *(float32x4_t *)&v11[j / 4]);
      a2[j / 0x10] = result;
    }
  }
  if ((a4 & 0x100) != 0)
  {
    sub_10055E3A0(a1, v11, a3, 256);
    for (k = 0; k != 512; k += 16)
    {
      result = vmlaq_f32((float32x4_t)a2[k / 0x10], *(float32x4_t *)&v11[k / 4], *(float32x4_t *)&v11[k / 4]);
      a2[k / 0x10] = result;
    }
  }
  return result;
}

uint64_t sub_10055E944(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  float v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v3 = a3 - 4;
  v4 = *(_DWORD *)(a2 + 32);
  if (v4 - 9 < (int)(a3 - 4))
    v3 = v4 - 9;
  v5 = v3 & ~(v3 >> 31);
  v6 = v4 - 1;
  if (v6 >= (int)v5 + 8)
    v7 = v5 + 8;
  else
    v7 = v6;
  if ((int)v5 > v7)
    return 1;
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(float *)(*(_QWORD *)a2 + 48 * ((v9 + (int)a3) % v10) + 24);
  v12 = (v7 + 1);
  v13 = a3 - (unint64_t)v5;
  v14 = v9 + v5;
  v15 = v5 - v12;
  result = 1;
  do
  {
    if (v13)
    {
      if (vabds_f32(*(float *)(*(_QWORD *)a2 + 48 * (v14 % v10) + 24), v11) < 0.5)
        result = (result + 1);
    }
    --v13;
    ++v14;
  }
  while (!__CFADD__(v15++, 1));
  return result;
}

void sub_10055E9F8(id a1)
{
  off_10229FFF8 = os_log_create("com.apple.locationd.Motion", "MovementDisorder");
}

void sub_10055EA24(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_10055EA50()
{
  float v0;
  float v1;
  float v2;
  float v3;

  v0 = sub_100D043B4(100, 0x80uLL, 3.0);
  dword_102301B7C = sub_100D041E0(v0);
  v1 = sub_100D043B4(100, 0x80uLL, 7.25);
  dword_102301B80 = sub_100D041E0(v1);
  v2 = sub_100D043B4(100, 0x80uLL, 0.75);
  dword_102301B84 = sub_100D041E0(v2);
  v3 = sub_100D043B4(100, 0x80uLL, 10.0);
  dword_102301B88 = sub_100D041E0(v3);
  dword_102301B8C = sub_100D043E4(100, 0x80uLL);
}

uint64_t sub_10055EAE4()
{
  if (qword_102301B90 != -1)
    dispatch_once(&qword_102301B90, &stru_1021434E8);
  return qword_1023108B0;
}

void sub_10055EB24(id a1)
{
  operator new();
}

void sub_10055EB64()
{
  operator delete();
}

uint64_t sub_10055EB88(uint64_t a1)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  sub_1015A2E04((_QWORD *)(a1 + 40), "");
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = 1065353216;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 1065353216;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_DWORD *)(a1 + 176) = 1065353216;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 216) = 1065353216;
  sub_10055EC70(a1);
  return a1;
}

void sub_10055EC34(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_100067AC4(v5);
  sub_100067AC4(v6);
  sub_100067AC4(v4);
  sub_100067AC4(v3);
  if (*(char *)(v1 + 63) < 0)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

void sub_10055EC70(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    BTAccessoryManagerDeregisterCustomMessageClient(v2, off_1022A2BC8);
    BTAccessoryManagerRemoveCallbacks(*(_QWORD *)(a1 + 8), &off_1022A2BA8);
    *(_QWORD *)(a1 + 8) = 0;
  }
  *(_QWORD *)a1 = 0;
  v3 = BTSessionAttachWithQueue("CLAudioAccessoryInterface", off_1022A2BD0, a1, &_dispatch_main_q);
  if (v3)
  {
    v4 = v3;
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102143568);
    v5 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      v10 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] Failed to register BT session callback. Error: %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_102143568);
      v8[0] = 67240192;
      v8[1] = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 16, "[CLAudioAccessoryInterface] Failed to register BT session callback. Error: %{public}d", v8, 8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "void CLAudioAccessoryInterface::attachBTSession()", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
}

void sub_10055EE80(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  NSObject *v4;
  _QWORD *v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  const char *v9;
  uint8_t *v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  char __str[8];
  uint64_t v15;
  __int16 v16;
  uint8_t buf[4];
  _QWORD *v18;

  if (a2)
  {
    *(_QWORD *)__str = 0;
    v15 = 0;
    v16 = 0;
    snprintf(__str, 0x12uLL, "%02x:%02x:%02x:%02x:%02x:%02x", a2, BYTE1(a2), BYTE2(a2), BYTE3(a2), BYTE4(a2), BYTE5(a2));
    v3 = (_QWORD *)(a1 + 40);
    std::string::assign((std::string *)(a1 + 40), __str);
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102143568);
    v4 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEFAULT))
    {
      v5 = (_QWORD *)(a1 + 40);
      if (*(char *)(a1 + 63) < 0)
        v5 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136380675;
      v18 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[CLAudioAccessoryInterface] BT address of the current device is %{private}s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_102143568);
      if (*(char *)(a1 + 63) < 0)
        v3 = (_QWORD *)*v3;
      v12 = 136380675;
      v13 = v3;
      LODWORD(v11) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 0, "[CLAudioAccessoryInterface] BT address of the current device is %{private}s", &v12, v11);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLAudioAccessoryInterface::setBTAddress(uint64_t)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    sub_10055F1F8(a1);
  }
  else
  {
    std::string::assign((std::string *)(a1 + 40), "");
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102143568);
    v6 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[CLAudioAccessoryInterface] clear the BT address", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_102143568);
      *(_WORD *)__str = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 0, "[CLAudioAccessoryInterface] clear the BT address", __str, 2);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLAudioAccessoryInterface::setBTAddress(uint64_t)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }

    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
  }
}

void sub_10055F1F8(uint64_t a1)
{
  CFRunLoopRef Current;
  uint64_t v3;
  uint64_t *v4;
  int v5;
  _QWORD *v6;
  NSObject *v7;
  const char *v8;
  int v9;
  int v10;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint8_t *v15;
  int v16;
  int v17;
  NSObject *v18;
  uint64_t v19;
  int DeviceId;
  int v21;
  NSObject *v22;
  uint64_t **i;
  const char *v24;
  uint8_t *v25;
  const char *v26;
  uint8_t *v27;
  int v28;
  uint64_t v29;
  _BYTE v30[6];
  _QWORD v31[5];
  int v32;
  uint64_t *v33;
  __int16 v34;
  int v35;
  uint8_t buf[4];
  uint64_t v37;
  __int16 v38;
  int v39;

  Current = CFRunLoopGetCurrent();
  sub_100127B9C();
  if (Current != (CFRunLoopRef)sub_1001AD8D0())
  {
    v3 = sub_100127B9C();
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472;
    v31[2] = sub_10055F9A0;
    v31[3] = &unk_10212ECA0;
    v31[4] = a1;
    sub_1000A50A8(v3, (uint64_t)v31);
    return;
  }
  if (!*(_QWORD *)a1)
  {
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102143568);
    v7 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] refresh device handle - invalid BT session", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_102143568);
      LOWORD(v32) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 16, "[CLAudioAccessoryInterface] refresh device handle - invalid BT session", &v32, 2);
      goto LABEL_40;
    }
    return;
  }
  v4 = (uint64_t *)(a1 + 40);
  v5 = *(char *)(a1 + 63);
  if (v5 < 0)
  {
    if (*(_QWORD *)(a1 + 48) == 17)
    {
      v6 = (_QWORD *)*v4;
LABEL_18:
      v9 = BTDeviceAddressFromString(v6, v30);
      if (v9)
      {
        v10 = v9;
        if (qword_10229FD80 != -1)
          dispatch_once(&qword_10229FD80, &stru_102143568);
        v11 = qword_10229FD88;
        if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_ERROR))
        {
          v12 = a1 + 40;
          if (*(char *)(a1 + 63) < 0)
            v12 = *v4;
          *(_DWORD *)buf = 136380931;
          v37 = v12;
          v38 = 1026;
          v39 = v10;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] refresh device handle - Failed to convert %{private}s into a valid BT address. Error: %{public}d", buf, 0x12u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD80 != -1)
            dispatch_once(&qword_10229FD80, &stru_102143568);
          if (*(char *)(a1 + 63) < 0)
            v4 = (uint64_t *)*v4;
          v32 = 136380931;
          v33 = v4;
          v34 = 1026;
          v35 = v10;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 16, "[CLAudioAccessoryInterface] refresh device handle - Failed to convert %{private}s into a valid BT address. Error: %{public}d", &v32, 18);
          v25 = (uint8_t *)v24;
          sub_100512490("Generic", 1, 0, 0, "void CLAudioAccessoryInterface::refreshBTDevice()", "%s\n", v24);
          if (v25 != buf)
            free(v25);
        }
        if (v10 == 1)
          sub_10055EC70(a1);
        return;
      }
      v16 = BTDeviceFromAddress(*(_QWORD *)a1, v30, a1 + 16);
      if (v16)
      {
        v17 = v16;
        *(_QWORD *)(a1 + 16) = 0;
        *(_DWORD *)(a1 + 24) = 0;
        if (qword_10229FD80 != -1)
          dispatch_once(&qword_10229FD80, &stru_102143568);
        v18 = qword_10229FD88;
        if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_ERROR))
        {
          v19 = a1 + 40;
          if (*(char *)(a1 + 63) < 0)
            v19 = *v4;
          *(_DWORD *)buf = 136380931;
          v37 = v19;
          v38 = 1026;
          v39 = v17;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] refresh device handle - Failed to get the device handle with BT address %{private}s. Error: %{public}d", buf, 0x12u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD80 != -1)
            dispatch_once(&qword_10229FD80, &stru_102143568);
          if (*(char *)(a1 + 63) < 0)
            v4 = (uint64_t *)*v4;
          v32 = 136380931;
          v33 = v4;
          v34 = 1026;
          v35 = v17;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 16, "[CLAudioAccessoryInterface] refresh device handle - Failed to get the device handle with BT address %{private}s. Error: %{public}d", &v32, 18);
LABEL_40:
          v15 = (uint8_t *)v8;
          sub_100512490("Generic", 1, 0, 0, "void CLAudioAccessoryInterface::refreshBTDevice()", "%s\n", v8);
          if (v15 != buf)
            free(v15);
          return;
        }
      }
      else
      {
        v29 = 0;
        v28 = 0;
        DeviceId = BTDeviceGetDeviceId(*(_QWORD *)(a1 + 16), (char *)&v29 + 4, &v29, a1 + 24, &v28);
        if (DeviceId)
        {
          v21 = DeviceId;
          *(_DWORD *)(a1 + 24) = 0;
          if (qword_10229FD80 != -1)
            dispatch_once(&qword_10229FD80, &stru_102143568);
          v22 = qword_10229FD88;
          if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67240192;
            LODWORD(v37) = v21;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] refresh device handle - Failed to get the product ID. Error: %{public}d", buf, 8u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FD80 != -1)
              dispatch_once(&qword_10229FD80, &stru_102143568);
            v32 = 67240192;
            LODWORD(v33) = v21;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 16, "[CLAudioAccessoryInterface] refresh device handle - Failed to get the product ID. Error: %{public}d", &v32, 8);
            v27 = (uint8_t *)v26;
            sub_100512490("Generic", 1, 0, 0, "void CLAudioAccessoryInterface::refreshBTDevice()", "%s\n", v26);
            if (v27 != buf)
              free(v27);
          }
        }
        sub_10055F9A8(a1);
        for (i = *(uint64_t ***)(a1 + 160); i; i = (uint64_t **)*i)
          ((void (*)(_QWORD, uint64_t *))i[3])(0, i[2]);
      }
      return;
    }
  }
  else if (v5 == 17)
  {
    v6 = (_QWORD *)(a1 + 40);
    goto LABEL_18;
  }
  if (qword_10229FD80 != -1)
    dispatch_once(&qword_10229FD80, &stru_102143568);
  v13 = qword_10229FD88;
  if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_ERROR))
  {
    v14 = a1 + 40;
    if (*(char *)(a1 + 63) < 0)
      v14 = *v4;
    *(_DWORD *)buf = 136380675;
    v37 = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] refresh device handle - invalid BT address %{private}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102143568);
    if (*(char *)(a1 + 63) < 0)
      v4 = (uint64_t *)*v4;
    v32 = 136380675;
    v33 = v4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 16, "[CLAudioAccessoryInterface] refresh device handle - invalid BT address %{private}s", &v32, 12);
    goto LABEL_40;
  }
}

uint64_t sub_10055F9A0(uint64_t a1)
{
  return sub_10055F1F8(*(_QWORD *)(a1 + 32));
}

void sub_10055F9A8(uint64_t a1)
{
  CFRunLoopRef Current;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  NSObject *v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  int v14;
  NSObject *v15;
  const char *v16;
  const char *v17;
  const char *v18;
  NSObject *v19;
  const char *v20;
  uint8_t *v21;
  const char *v22;
  const char *v23;
  const char *v24;
  uint8_t *v25;
  const char *v26;
  const char *v27;
  const char *v28;
  uint8_t *v29;
  uint64_t v30;
  _QWORD v31[5];
  int v32;
  const char *v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  int v37;
  uint8_t buf[4];
  const char *v39;
  __int16 v40;
  const char *v41;
  __int16 v42;
  int v43;

  Current = CFRunLoopGetCurrent();
  sub_100127B9C();
  if (Current != (CFRunLoopRef)sub_1001AD8D0())
  {
    v3 = sub_100127B9C();
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472;
    v31[2] = sub_10056072C;
    v31[3] = &unk_10212ECA0;
    v31[4] = a1;
    sub_1000A50A8(v3, (uint64_t)v31);
    return;
  }
  if (*(_QWORD *)(a1 + 16))
  {
    if (*(char *)(a1 + 63) < 0)
      v4 = *(_QWORD *)(a1 + 48);
    else
      v4 = *(unsigned __int8 *)(a1 + 63);
    if (v4 == 17)
    {
      v7 = *(_QWORD *)(a1 + 88);
      v8 = *(_QWORD *)(a1 + 128);
      v9 = BTAccessoryManagerRemoteTimeSyncEnable(*(_QWORD *)(a1 + 8));
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_102143568);
      v10 = qword_10229FD88;
      if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEFAULT))
      {
        v11 = "disable";
        if (v7)
          v11 = "enable";
        *(_DWORD *)buf = 136446722;
        v39 = v11;
        if (v9)
          v12 = "failed";
        else
          v12 = "succeeded";
        v40 = 2082;
        v41 = v12;
        v42 = 1026;
        v43 = v9;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[CLAudioAccessoryInterface] %{public}s high precision TimeSync %{public}s. Status: %{public}d", buf, 0x1Cu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD80 != -1)
          dispatch_once(&qword_10229FD80, &stru_102143568);
        v22 = "disable";
        if (v7)
          v22 = "enable";
        v32 = 136446722;
        v33 = v22;
        if (v9)
          v23 = "failed";
        else
          v23 = "succeeded";
        v34 = 2082;
        v35 = v23;
        v36 = 1026;
        v37 = v9;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 0, "[CLAudioAccessoryInterface] %{public}s high precision TimeSync %{public}s. Status: %{public}d", &v32, 28);
        v25 = (uint8_t *)v24;
        sub_100512490("Generic", 1, 0, 2, "void CLAudioAccessoryInterface::updateTimeSync()", "%s\n", v24);
        if (v25 != buf)
          free(v25);
      }
      if (!v7)
      {
        if (v8)
          v13 = 0xFFFFFFFFLL;
        else
          v13 = 0;
        v14 = BTAccessoryManagerSensorStreamTimeSyncEnable(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), v13);
        if (qword_10229FD80 != -1)
          dispatch_once(&qword_10229FD80, &stru_102143568);
        v15 = qword_10229FD88;
        if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEFAULT))
        {
          v16 = "disable";
          if (v8)
            v16 = "enable";
          *(_DWORD *)buf = 136446722;
          v39 = v16;
          if (v14)
            v17 = "failed";
          else
            v17 = "succeeded";
          v40 = 2082;
          v41 = v17;
          v42 = 1026;
          v43 = v14;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "[CLAudioAccessoryInterface] %{public}s low precision TimeSync %{public}s. Status: %{public}d", buf, 0x1Cu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD80 != -1)
            dispatch_once(&qword_10229FD80, &stru_102143568);
          v26 = "disable";
          if (v8)
            v26 = "enable";
          v32 = 136446722;
          v33 = v26;
          if (v14)
            v27 = "failed";
          else
            v27 = "succeeded";
          v34 = 2082;
          v35 = v27;
          v36 = 1026;
          v37 = v14;
          LODWORD(v30) = 28;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 0, "[CLAudioAccessoryInterface] %{public}s low precision TimeSync %{public}s. Status: %{public}d", &v32, v30);
          v29 = (uint8_t *)v28;
          sub_100512490("Generic", 1, 0, 2, "void CLAudioAccessoryInterface::updateTimeSync()", "%s\n", v28);
          if (v29 != buf)
            free(v29);
        }
        if (!v8)
        {

          *(_QWORD *)(a1 + 32) = 0;
        }
      }
      return;
    }
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102143568);
    v18 = (const char *)(a1 + 40);
    v19 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_ERROR))
    {
      v20 = (const char *)(a1 + 40);
      if (*(char *)(a1 + 63) < 0)
        v20 = *(const char **)v18;
      *(_DWORD *)buf = 136380675;
      v39 = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] update TimeSync failed due to invalid BT address %{private}s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_102143568);
      if (*(char *)(a1 + 63) < 0)
        v18 = *(const char **)v18;
      v32 = 136380675;
      v33 = v18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 16, "[CLAudioAccessoryInterface] update TimeSync failed due to invalid BT address %{private}s", &v32, 12);
LABEL_55:
      v21 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "void CLAudioAccessoryInterface::updateTimeSync()", "%s\n", v6);
      if (v21 != buf)
        free(v21);
    }
  }
  else
  {
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102143568);
    v5 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] update TimeSync failed due to invalid BT device", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_102143568);
      LOWORD(v32) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 16, "[CLAudioAccessoryInterface] update TimeSync failed due to invalid BT device", &v32, 2);
      goto LABEL_55;
    }
  }
}

uint64_t sub_1005600B4(_QWORD *a1, uint64_t a2)
{
  NSObject *v3;
  const char *v4;
  NSObject *v5;
  uint64_t v6;
  BOOL v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  char *v17;
  uint8_t buf[4];
  char *v19;
  char __str[8];
  uint64_t v21;
  __int16 v22;

  if (!*a1)
    return 1;
  *(_QWORD *)__str = 0;
  v21 = 0;
  v22 = 0;
  snprintf(__str, 0x12uLL, "%02x:%02x:%02x:%02x:%02x:%02x", a2, BYTE1(a2), BYTE2(a2), BYTE3(a2), BYTE4(a2), BYTE5(a2));
  v15 = 0;
  if (BTDeviceAddressFromString(__str, &v14))
  {
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102143568);
    v3 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136380675;
      v19 = __str;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] isSpatialAudioSupported - Failed to convert %{private}s into a valid BT address", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      return 1;
    bzero(buf, 0x65CuLL);
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102143568);
    v16 = 136380675;
    v17 = __str;
    LODWORD(v13) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 16, "[CLAudioAccessoryInterface] isSpatialAudioSupported - Failed to convert %{private}s into a valid BT address", &v16, v13);
    goto LABEL_38;
  }
  if (BTDeviceFromAddress(*a1, &v14, &v15))
  {
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102143568);
    v5 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136380675;
      v19 = __str;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] isSpatialAudioSupported - Failed to get the device handle with BT address %{private}s", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      return 1;
    bzero(buf, 0x65CuLL);
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102143568);
    v16 = 136380675;
    v17 = __str;
    LODWORD(v13) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 16, "[CLAudioAccessoryInterface] isSpatialAudioSupported - Failed to get the device handle with BT address %{private}s", &v16, v13);
LABEL_38:
    v12 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLAudioAccessoryInterface::isSpatialAudioSupported(uint64_t) const", "%s\n", v4);
    if (v12 != buf)
      free(v12);
    return 1;
  }
  v14 = 2;
  if (BTAccessoryManagerGetSpatialAudioPlatformSupport(a1[1], v15, &v14))
    v8 = 0;
  else
    v8 = v14 == 1;
  v6 = v8;
  if (!v8)
  {
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102143568);
    v9 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136380675;
      v19 = __str;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[CLAudioAccessoryInterface] isSpatialAudioSupported - not supported for device %{private}s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_102143568);
      v16 = 136380675;
      v17 = __str;
      LODWORD(v13) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 0, "[CLAudioAccessoryInterface] isSpatialAudioSupported - not supported for device %{private}s", &v16, v13);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLAudioAccessoryInterface::isSpatialAudioSupported(uint64_t) const", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
  return v6;
}

void sub_10056054C(uint64_t a1, uint64_t a2, int a3)
{
  CFRunLoopRef Current;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[6];
  char v10;
  uint64_t v11;

  v11 = a2;
  Current = CFRunLoopGetCurrent();
  sub_100127B9C();
  if (Current == (CFRunLoopRef)sub_1001AD8D0())
  {
    if (a3)
    {
      sub_100212418((_QWORD *)(a1 + 104), &v11);
      v8 = a1 + 64;
    }
    else
    {
      sub_100212418((_QWORD *)(a1 + 64), &v11);
      v8 = a1 + 104;
    }
    sub_1001AB0C8(v8, &v11, &v11);
    sub_10055F9A8(a1);
  }
  else
  {
    v7 = sub_100127B9C();
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10056061C;
    v9[3] = &unk_102143508;
    v9[4] = a1;
    v9[5] = a2;
    v10 = a3;
    sub_1000A50A8(v7, (uint64_t)v9);
  }
}

uint64_t sub_10056061C(uint64_t a1)
{
  return sub_10056054C(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
}

void sub_10056062C(uint64_t a1, uint64_t a2)
{
  CFRunLoopRef Current;
  uint64_t v5;
  _QWORD v6[6];
  uint64_t v7;

  v7 = a2;
  Current = CFRunLoopGetCurrent();
  sub_100127B9C();
  if (Current == (CFRunLoopRef)sub_1001AD8D0())
  {
    sub_100212418((_QWORD *)(a1 + 64), &v7);
    sub_100212418((_QWORD *)(a1 + 104), &v7);
    sub_10055F9A8(a1);
  }
  else
  {
    v5 = sub_100127B9C();
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1005606D8;
    v6[3] = &unk_102143528;
    v6[4] = a1;
    v6[5] = a2;
    sub_1000A50A8(v5, (uint64_t)v6);
  }
}

uint64_t sub_1005606D8(uint64_t a1)
{
  return sub_10056062C(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void sub_1005606E4(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  sub_100561D20(a5, a3, a2, a4);
}

void sub_1005606F8(uint64_t a1, uint64_t a2, int a3, _BYTE *a4, unint64_t a5, uint64_t a6)
{
  if (a3 == 1024)
    sub_100562828(a6, a2, a4, a5);
}

void sub_100560714(uint64_t a1, int a2, int a3, _QWORD *a4)
{
  sub_100561614(a4, a1, a2, a3);
}

uint64_t sub_10056072C(uint64_t a1)
{
  return sub_10055F9A8(*(_QWORD *)(a1 + 32));
}

id sub_100560734(uint64_t a1, uint64_t a2)
{
  void *v3;
  id result;
  double v6;
  NSObject *v7;
  const char *v8;
  NSObject *v9;
  uint8_t *v10;
  _QWORD v11[2];
  uint8_t buf[1640];

  v3 = *(void **)(a1 + 32);
  if (v3 && objc_msgSend(v3, "lockState") == 2)
  {
    *(_DWORD *)buf = 0;
    return objc_msgSend(*(id *)(a1 + 32), "convertFromDomainToMachAbsoluteTime:withFlags:", a2, buf);
  }
  v6 = sub_1001FCBB4();
  if (v6 - *(double *)&qword_102301B98 <= 1.0)
    return 0;
  if (*(_QWORD *)(a1 + 32))
  {
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102143568);
    v7 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] TimeSync error! Clock not locked", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_20;
    bzero(buf, 0x65CuLL);
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102143568);
    LOWORD(v11[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 16, "[CLAudioAccessoryInterface] TimeSync error! Clock not locked", v11, 2, v11[0]);
  }
  else
  {
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102143568);
    v9 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] TimeSync error! No TimeSync clock", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_20;
    bzero(buf, 0x65CuLL);
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102143568);
    LOWORD(v11[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 16, "[CLAudioAccessoryInterface] TimeSync error! No TimeSync clock", v11, 2, v11[0]);
  }
  v10 = (uint8_t *)v8;
  sub_100512490("Generic", 1, 0, 0, "uint64_t CLAudioAccessoryInterface::convertTimeSyncTimestamp(uint64_t) const", "%s\n", v8);
  if (v10 != buf)
    free(v10);
LABEL_20:
  result = 0;
  qword_102301B98 = *(_QWORD *)&v6;
  return result;
}

void sub_1005609FC(uint64_t a1, int *a2, int *a3)
{
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  int v9;
  int v10;
  NSObject *v11;
  const __CFString *v12;
  NSObject *v13;
  const __CFString *isa;
  int v15;
  int v16;
  NSObject *v17;
  NSObject *v18;
  uint64_t v19;
  const __CFString *v20;
  uint64_t v21;
  const __CFString *v22;
  unsigned int v23;
  uint8_t *v24;
  const char *v25;
  uint8_t *v26;
  uint64_t v27;
  const __CFString *v28;
  uint64_t v29;
  const __CFString *v30;
  const char *v31;
  uint8_t *v32;
  uint64_t v33;
  _BYTE v34[22];
  uint8_t buf[4];
  const __CFString *v36;
  __int16 v37;
  const __CFString *v38;

  *a3 = 3;
  *a2 = 3;
  if (*(_QWORD *)(a1 + 16))
  {
    if (*(char *)(a1 + 63) < 0)
      v6 = *(_QWORD *)(a1 + 48);
    else
      v6 = *(unsigned __int8 *)(a1 + 63);
    if (v6 == 17)
    {
      HIDWORD(v33) = -1;
      v9 = BTAccessoryManagerGetInEarDetectionEnable(*(_QWORD *)(a1 + 8));
      if (v9)
      {
        v10 = v9;
        if (qword_10229FD80 != -1)
          dispatch_once(&qword_10229FD80, &stru_102143568);
        v11 = qword_10229FD88;
        if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67240192;
          LODWORD(v36) = v10;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] in ear status - failed to get IED setting. Error: %{public}d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD80 != -1)
            dispatch_once(&qword_10229FD80, &stru_102143568);
          *(_DWORD *)v34 = 67240192;
          *(_DWORD *)&v34[4] = v10;
          LODWORD(v33) = 8;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 16, "[CLAudioAccessoryInterface] in ear status - failed to get IED setting. Error: %{public}d", v34, v33, *(_OWORD *)v34);
LABEL_58:
          v24 = (uint8_t *)v8;
          sub_100512490("Generic", 1, 0, 0, "void CLAudioAccessoryInterface::getInEarStatus(BTAccessoryInEarStatus &, BTAccessoryInEarStatus &) const", "%s\n", v8);
          if (v24 != buf)
            free(v24);
        }
      }
      else
      {
        v15 = BTAccessoryManagerGetInEarStatus(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), a2, a3);
        if (v15)
        {
          v16 = v15;
          if (qword_10229FD80 != -1)
            dispatch_once(&qword_10229FD80, &stru_102143568);
          v17 = qword_10229FD88;
          if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67240192;
            LODWORD(v36) = v16;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] in ear status - failed to get inear status. Error: %{public}d", buf, 8u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FD80 != -1)
              dispatch_once(&qword_10229FD80, &stru_102143568);
            *(_DWORD *)v34 = 67240192;
            *(_DWORD *)&v34[4] = v16;
            LODWORD(v33) = 8;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 16, "[CLAudioAccessoryInterface] in ear status - failed to get inear status. Error: %{public}d", v34, v33);
            v26 = (uint8_t *)v25;
            sub_100512490("Generic", 1, 0, 0, "void CLAudioAccessoryInterface::getInEarStatus(BTAccessoryInEarStatus &, BTAccessoryInEarStatus &) const", "%s\n", v25);
            if (v26 != buf)
              free(v26);
          }
          *a3 = 3;
          *a2 = 3;
        }
        else
        {
          if (qword_10229FD80 != -1)
            dispatch_once(&qword_10229FD80, &stru_102143568);
          v18 = qword_10229FD88;
          if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEFAULT))
          {
            v19 = *a2;
            if (v19 > 3)
              v20 = CFSTR("?");
            else
              v20 = *(&off_102143588 + v19);
            v21 = *a3;
            if (v21 > 3)
              v22 = CFSTR("?");
            else
              v22 = *(&off_102143588 + v21);
            *(_DWORD *)buf = 138543618;
            v36 = v20;
            v37 = 2114;
            v38 = v22;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "[CLAudioAccessoryInterface] in ear status - Primary:%{public}@, Secondary:%{public}@", buf, 0x16u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FD80 != -1)
              dispatch_once(&qword_10229FD80, &stru_102143568);
            v27 = *a2;
            if (v27 > 3)
              v28 = CFSTR("?");
            else
              v28 = *(&off_102143588 + v27);
            v29 = *a3;
            if (v29 > 3)
              v30 = CFSTR("?");
            else
              v30 = *(&off_102143588 + v29);
            *(_DWORD *)v34 = 138543618;
            *(_QWORD *)&v34[4] = v28;
            *(_WORD *)&v34[12] = 2114;
            *(_QWORD *)&v34[14] = v30;
            LODWORD(v33) = 22;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 0, "[CLAudioAccessoryInterface] in ear status - Primary:%{public}@, Secondary:%{public}@", v34, v33);
            v32 = (uint8_t *)v31;
            sub_100512490("Generic", 1, 0, 2, "void CLAudioAccessoryInterface::getInEarStatus(BTAccessoryInEarStatus &, BTAccessoryInEarStatus &) const", "%s\n", v31);
            if (v32 != buf)
              free(v32);
          }
          if (!*a2)
          {
            v23 = *(_DWORD *)(a1 + 24) - 8202;
            if (v23 <= 0x15 && ((1 << v23) & 0x202001) != 0)
              *a3 = 0;
          }
        }
      }
    }
    else
    {
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_102143568);
      v12 = (const __CFString *)(a1 + 40);
      v13 = qword_10229FD88;
      if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_ERROR))
      {
        isa = (const __CFString *)(a1 + 40);
        if (*(char *)(a1 + 63) < 0)
          isa = (const __CFString *)v12->isa;
        *(_DWORD *)buf = 136380675;
        v36 = isa;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] in ear status - invalid BT address %{private}s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD80 != -1)
          dispatch_once(&qword_10229FD80, &stru_102143568);
        if (*(char *)(a1 + 63) < 0)
          v12 = (const __CFString *)v12->isa;
        *(_DWORD *)v34 = 136380675;
        *(_QWORD *)&v34[4] = v12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 16, "[CLAudioAccessoryInterface] in ear status - invalid BT address %{private}s", v34, 12, *(_OWORD *)v34);
        goto LABEL_58;
      }
    }
  }
  else
  {
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102143568);
    v7 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] in ear status - invalid BT device", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_102143568);
      *(_WORD *)v34 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 16, "[CLAudioAccessoryInterface] in ear status - invalid BT device", v34, 2, *(_OWORD *)v34);
      goto LABEL_58;
    }
  }
}

BOOL sub_1005612B0()
{
  int v1;
  int v2;

  if (qword_102301B90 != -1)
    dispatch_once(&qword_102301B90, &stru_1021434E8);
  v2 = 0;
  v1 = 0;
  sub_1005609FC(qword_1023108B0, &v2, &v1);
  return v2 == 0;
}

_QWORD *sub_100561318(uint64_t a1, uint64_t (*a2)(_QWORD, uint64_t), uint64_t a3)
{
  _QWORD *result;
  uint64_t v6;
  uint64_t *v7;

  v6 = a3;
  v7 = &v6;
  result = sub_10056588C(a1 + 144, &v6, (uint64_t)&unk_101B9EB60, &v7);
  result[3] = a2;
  if (*(_QWORD *)(a1 + 16))
    return (_QWORD *)a2(0, v6);
  return result;
}

_QWORD *sub_100561380(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t *v6;

  v5 = a3;
  v6 = &v5;
  result = sub_10056588C(a1 + 184, &v5, (uint64_t)&unk_101B9EB60, &v6);
  result[3] = a2;
  return result;
}

uint64_t *sub_1005613D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = a2;
  sub_100212418((_QWORD *)(a1 + 184), &v4);
  return sub_100212418((_QWORD *)(a1 + 144), &v4);
}

uint64_t sub_100561410(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t **i;
  NSObject *v6;
  uint64_t *v7;
  uint64_t *v8;
  const char *v9;
  uint8_t *v10;
  uint64_t v11;
  _DWORD v12[2];
  __int16 v13;
  uint64_t *v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  uint64_t *v18;

  for (i = *(uint64_t ***)(result + 200); i; i = (uint64_t **)*i)
  {
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102143568);
    v6 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEBUG))
    {
      v7 = i[2];
      *(_DWORD *)buf = 67109378;
      v16 = a2;
      v17 = 2112;
      v18 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "[HeadphoneUsage] notifyClientsWithData,event %d,client %@", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_102143568);
      v8 = i[2];
      v12[0] = 67109378;
      v12[1] = a2;
      v13 = 2112;
      v14 = v8;
      LODWORD(v11) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 2, "[HeadphoneUsage] notifyClientsWithData,event %d,client %@", v12, v11);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLAudioAccessoryInterface::notifyClientsWithData(Event, NSDictionary *)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t *))i[3])(a2, a3, i[2]);
  }
  return result;
}

void sub_100561614(_QWORD *a1, uint64_t a2, int a3, int a4)
{
  NSObject *v8;
  const char *v9;
  NSObject *v10;
  int Default;
  int v12;
  NSObject *v13;
  const char *v14;
  int v15;
  int v16;
  NSObject *v17;
  int v18;
  int v19;
  NSObject *v20;
  uint8_t *v21;
  const char *v22;
  const char *v23;
  uint8_t *v24;
  const char *v25;
  uint8_t *v26;
  const char *v27;
  uint8_t *v28;
  uint64_t v29;
  _BYTE v30[12];
  uint8_t buf[4];
  const char *v32;

  dispatch_assert_queue_V2((dispatch_queue_t)&_dispatch_main_q);
  if ((a3 & 0xFFFFFFFD) != 0)
    return;
  if (a3 == 2 || !a3 && a4)
  {
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102143568);
    v8 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEFAULT))
    {
      v9 = "attaching BT session failed";
      if (a4 == 2)
        v9 = "BT session terminated";
      *(_DWORD *)buf = 136446210;
      v32 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[CLAudioAccessoryInterface] %{public}s. Re-attaching......", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_102143568);
      v22 = "attaching BT session failed";
      if (a4 == 2)
        v22 = "BT session terminated";
      *(_DWORD *)v30 = 136446210;
      *(_QWORD *)&v30[4] = v22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 0, "[CLAudioAccessoryInterface] %{public}s. Re-attaching......", v30, 12);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 2, "void CLAudioAccessoryInterface::btSessionEventHandler(BTSession, BTSessionEvent, BTResult)", "%s\n", v23);
      if (v24 != buf)
        free(v24);
    }
    sub_10055EC70((uint64_t)a1);
    return;
  }
  *a1 = a2;
  if (qword_10229FD80 != -1)
    dispatch_once(&qword_10229FD80, &stru_102143568);
  v10 = qword_10229FD88;
  if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[CLAudioAccessoryInterface] BT session attached", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102143568);
    *(_WORD *)v30 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 0, "[CLAudioAccessoryInterface] BT session attached", v30, 2);
    v26 = (uint8_t *)v25;
    sub_100512490("Generic", 1, 0, 2, "void CLAudioAccessoryInterface::btSessionEventHandler(BTSession, BTSessionEvent, BTResult)", "%s\n", v25);
    if (v26 != buf)
      free(v26);
  }
  Default = BTAccessoryManagerGetDefault(*a1, a1 + 1);
  if (Default)
  {
    v12 = Default;
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102143568);
    v13 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      LODWORD(v32) = v12;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] Accessory Mananger unavailable. Status %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_102143568);
      *(_DWORD *)v30 = 67240192;
      *(_DWORD *)&v30[4] = v12;
      LODWORD(v29) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 16, "[CLAudioAccessoryInterface] Accessory Mananger unavailable. Status %{public}d", v30, v29, *(_QWORD *)v30);
LABEL_43:
      v21 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 0, "void CLAudioAccessoryInterface::btSessionEventHandler(BTSession, BTSessionEvent, BTResult)", "%s\n", v14);
      if (v21 != buf)
        free(v21);
    }
  }
  else
  {
    sub_10055F9A8((uint64_t)a1);
    v15 = BTAccessoryManagerAddCallbacks(a1[1], &off_1022A2BD8, a1);
    if (v15)
    {
      v16 = v15;
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_102143568);
      v17 = qword_10229FD88;
      if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67240192;
        LODWORD(v32) = v16;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] Failed to register BT accessory callback.  Status %{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD80 != -1)
          dispatch_once(&qword_10229FD80, &stru_102143568);
        *(_DWORD *)v30 = 67240192;
        *(_DWORD *)&v30[4] = v16;
        LODWORD(v29) = 8;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 16, "[CLAudioAccessoryInterface] Failed to register BT accessory callback.  Status %{public}d", v30, v29);
        v28 = (uint8_t *)v27;
        sub_100512490("Generic", 1, 0, 0, "void CLAudioAccessoryInterface::btSessionEventHandler(BTSession, BTSessionEvent, BTResult)", "%s\n", v27);
        if (v28 != buf)
          free(v28);
      }
    }
    v18 = BTAccessoryManagerRegisterCustomMessageClient(a1[1], &off_1022A2BF8, 1024, a1);
    if (!v18)
    {
      sub_10055F1F8((uint64_t)a1);
      return;
    }
    v19 = v18;
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102143568);
    v20 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      LODWORD(v32) = v19;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] Failed to register for custom callback. BTResult: %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_102143568);
      *(_DWORD *)v30 = 67240192;
      *(_DWORD *)&v30[4] = v19;
      LODWORD(v29) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 16, "[CLAudioAccessoryInterface] Failed to register for custom callback. BTResult: %{public}d", v30, v29, *(_QWORD *)v30);
      goto LABEL_43;
    }
  }
}

void sub_100561D20(uint64_t a1, uint64_t a2, int a3, int a4)
{
  CFRunLoopRef Current;
  uint64_t v9;
  NSObject *v10;
  uint64_t **i;
  NSObject *v12;
  int TimeSyncId;
  int v14;
  NSObject *v15;
  uint8_t *v16;
  double v17;
  NSObject *v18;
  uint64_t **j;
  NSObject *v20;
  void *v21;
  NSObject *v22;
  uint8_t *v23;
  id v24;
  id v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint8_t *v30;
  NSObject *v31;
  const char *v32;
  uint8_t *v33;
  const char *v34;
  uint8_t *v35;
  const char *v36;
  uint8_t *v37;
  const char *v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[6];
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  uint8_t buf[4];
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;

  Current = CFRunLoopGetCurrent();
  sub_100127B9C();
  if (Current != (CFRunLoopRef)sub_1001AD8D0())
  {
    v9 = sub_100127B9C();
    v42[0] = _NSConcreteStackBlock;
    v42[1] = 3221225472;
    v42[2] = sub_100562818;
    v42[3] = &unk_102143548;
    v42[4] = a1;
    v42[5] = a2;
    v43 = a3;
    v44 = a4;
    sub_1000A50A8(v9, (uint64_t)v42);
    return;
  }
  switch(a3)
  {
    case 5:
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_102143568);
      v10 = qword_10229FD88;
      if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134283521;
        v52 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[CLAudioAccessoryInterface] BT_ACCESSORY_SETTINGS_CHANGED device:%{private}p", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD80 != -1)
          dispatch_once(&qword_10229FD80, &stru_102143568);
        v45 = 134283521;
        v46 = a2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 0, "[CLAudioAccessoryInterface] BT_ACCESSORY_SETTINGS_CHANGED device:%{private}p", &v45, 12);
        v33 = (uint8_t *)v32;
        sub_100512490("Generic", 1, 0, 2, "void CLAudioAccessoryInterface::accessoryEventHandler(BTDevice, BTAccessoryEvent, BTAccessoryState)", "%s\n", v32);
        if (v33 != buf)
          free(v33);
      }
      for (i = *(uint64_t ***)(a1 + 160); i; i = (uint64_t **)*i)
        ((void (*)(_QWORD, uint64_t *))i[3])(0, i[2]);
      return;
    case 6:
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_102143568);
      v18 = qword_10229FD88;
      if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134283521;
        v52 = a2;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "[CLAudioAccessoryInterface] BT_ACCESSORY_IN_EAR_STATUS_CHANGED device:%{private}p", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD80 != -1)
          dispatch_once(&qword_10229FD80, &stru_102143568);
        v45 = 134283521;
        v46 = a2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 0, "[CLAudioAccessoryInterface] BT_ACCESSORY_IN_EAR_STATUS_CHANGED device:%{private}p", &v45, 12);
        v37 = (uint8_t *)v36;
        sub_100512490("Generic", 1, 0, 2, "void CLAudioAccessoryInterface::accessoryEventHandler(BTDevice, BTAccessoryEvent, BTAccessoryState)", "%s\n", v36);
        if (v37 != buf)
          free(v37);
      }
      for (j = *(uint64_t ***)(a1 + 160); j; j = (uint64_t **)*j)
        ((void (*)(_QWORD, uint64_t *))j[3])(0, j[2]);
      return;
    case 7:
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_102143568);
      v12 = qword_10229FD88;
      if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134283521;
        v52 = a2;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[CLAudioAccessoryInterface] TIMESYNC_AVAILABLE device:%{private}p", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD80 != -1)
          dispatch_once(&qword_10229FD80, &stru_102143568);
        v45 = 134283521;
        v46 = a2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 0, "[CLAudioAccessoryInterface] TIMESYNC_AVAILABLE device:%{private}p", &v45, 12);
        v35 = (uint8_t *)v34;
        sub_100512490("Generic", 1, 0, 2, "void CLAudioAccessoryInterface::accessoryEventHandler(BTDevice, BTAccessoryEvent, BTAccessoryState)", "%s\n", v34);
        if (v35 != buf)
          free(v35);
      }
      if (+[TSClockManager sharedClockManager](TSClockManager, "sharedClockManager"))
      {
        v41 = 0;
        TimeSyncId = BTAccessoryManagerGetTimeSyncId(*(_QWORD *)(a1 + 8), a2, &v41);
        if (TimeSyncId)
        {
          v14 = TimeSyncId;
          if (qword_10229FD80 != -1)
            dispatch_once(&qword_10229FD80, &stru_102143568);
          v15 = qword_10229FD88;
          if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67240192;
            LODWORD(v52) = v14;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] Get TimeSync ID failed result:%{public}d", buf, 8u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FD80 != -1)
              dispatch_once(&qword_10229FD80, &stru_102143568);
            v45 = 67240192;
            LODWORD(v46) = v14;
            LODWORD(v40) = 8;
            v17 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 16, "[CLAudioAccessoryInterface] Get TimeSync ID failed result:%{public}d", &v45, v40);
LABEL_51:
            v23 = v16;
            sub_100512490("Generic", 1, 0, 0, "void CLAudioAccessoryInterface::accessoryEventHandler(BTDevice, BTAccessoryEvent, BTAccessoryState)", "%s\n", v17);
LABEL_52:
            if (v23 != buf)
              free(v23);
          }
        }
        else
        {

          v24 = +[TSClockManager sharedClockManager](TSClockManager, "sharedClockManager");
          v25 = objc_msgSend(v24, "clockWithClockIdentifier:", v41);
          *(_QWORD *)(a1 + 32) = v25;
          if (v25)
          {
            if (qword_10229FD80 != -1)
              dispatch_once(&qword_10229FD80, &stru_102143568);
            v26 = qword_10229FD88;
            if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEFAULT))
            {
              v27 = *(_QWORD *)(a1 + 32);
              *(_DWORD *)buf = 134284033;
              v52 = a2;
              v53 = 2049;
              v54 = v41;
              v55 = 2049;
              v56 = v27;
              _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "[CLAudioAccessoryInterface] Got TimeSync ID device:%{private}p tsID:0x%{private}llx clock:%{private}p", buf, 0x20u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_10229FD80 != -1)
                dispatch_once(&qword_10229FD80, &stru_102143568);
              v28 = *(_QWORD *)(a1 + 32);
              v45 = 134284033;
              v46 = a2;
              v47 = 2049;
              v48 = v41;
              v49 = 2049;
              v50 = v28;
              LODWORD(v40) = 32;
              v29 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 0, "[CLAudioAccessoryInterface] Got TimeSync ID device:%{private}p tsID:0x%{private}llx clock:%{private}p", &v45, v40);
              v23 = v30;
              sub_100512490("Generic", 1, 0, 2, "void CLAudioAccessoryInterface::accessoryEventHandler(BTDevice, BTAccessoryEvent, BTAccessoryState)", "%s\n", v29);
              goto LABEL_52;
            }
          }
          else
          {
            if (qword_10229FD80 != -1)
              dispatch_once(&qword_10229FD80, &stru_102143568);
            v31 = qword_10229FD88;
            if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "[CLAuDioAccessoryInterface] Failed to get the TimeSync clock", buf, 2u);
            }
            if (sub_1001BFF7C(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_10229FD80 != -1)
                dispatch_once(&qword_10229FD80, &stru_102143568);
              LOWORD(v45) = 0;
              LODWORD(v40) = 2;
              v17 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 16, "[CLAuDioAccessoryInterface] Failed to get the TimeSync clock", &v45, v40);
              goto LABEL_51;
            }
          }
        }
      }
      else
      {
        if (qword_10229FD80 != -1)
          dispatch_once(&qword_10229FD80, &stru_102143568);
        v22 = qword_10229FD88;
        if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] Failed to get the TimeSync clock manager", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD80 != -1)
            dispatch_once(&qword_10229FD80, &stru_102143568);
          LOWORD(v45) = 0;
          LODWORD(v40) = 2;
          v17 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 16, "[CLAudioAccessoryInterface] Failed to get the TimeSync clock manager", &v45, v40);
          goto LABEL_51;
        }
      }
      return;
    case 8:
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_102143568);
      v20 = qword_10229FD88;
      if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134283521;
        v52 = a2;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] TIMESYNC_NOT_AVAILABLE device:%{private}p", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD80 != -1)
          dispatch_once(&qword_10229FD80, &stru_102143568);
        v45 = 134283521;
        v46 = a2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 16, "[CLAudioAccessoryInterface] TIMESYNC_NOT_AVAILABLE device:%{private}p", &v45, 12);
        v39 = (uint8_t *)v38;
        sub_100512490("Generic", 1, 0, 0, "void CLAudioAccessoryInterface::accessoryEventHandler(BTDevice, BTAccessoryEvent, BTAccessoryState)", "%s\n", v38);
        if (v39 != buf)
          free(v39);
      }
      v21 = *(void **)(a1 + 32);
      if (v21)
      {

        *(_QWORD *)(a1 + 32) = 0;
      }
      return;
    default:
      return;
  }
}

uint64_t sub_100562818(uint64_t a1)
{
  return sub_100561D20(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48), *(unsigned int *)(a1 + 52));
}

void sub_100562828(uint64_t a1, uint64_t a2, _BYTE *a3, unint64_t a4)
{
  __int16 v4;
  NSObject *v8;
  NSMutableDictionary *v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  const char *v14;
  uint8_t *v15;
  const char *v16;
  uint8_t *v17;
  const char *v18;
  uint8_t *v19;
  const char *v20;
  uint8_t *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint8_t buf[4];
  uint64_t v26;

  v4 = a4;
  if (sub_100562DB0(a3, a4))
  {
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102143568);
    v8 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[HeadphoneUsage] Interface: Bluetooth daily usage event received. Parsing data.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_102143568);
      LOWORD(v23) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 0, "[HeadphoneUsage] Interface: Bluetooth daily usage event received. Parsing data.", &v23, 2);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLAudioAccessoryInterface::dailyUsageEventHandler(BTDevice, BTData, size_t)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    v9 = sub_10056352C((uint64_t)a3, v4);
    if (v9)
    {
      v10 = (uint64_t)v9;
      if (!sub_100564CE4(*(_QWORD *)(a1 + 8), a2, v9))
      {
        if (qword_10229FD80 != -1)
          dispatch_once(&qword_10229FD80, &stru_102143568);
        v11 = qword_10229FD88;
        if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "[HeadphoneUsage] Error retrieving serial numbers, will omit from message.", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD80 != -1)
            dispatch_once(&qword_10229FD80, &stru_102143568);
          LOWORD(v23) = 0;
          LODWORD(v22) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 16, "[HeadphoneUsage] Error retrieving serial numbers, will omit from message.", &v23, v22);
          v21 = (uint8_t *)v20;
          sub_100512490("Generic", 1, 0, 0, "void CLAudioAccessoryInterface::dailyUsageEventHandler(BTDevice, BTData, size_t)", "%s\n", v20);
          if (v21 != buf)
            free(v21);
        }
      }
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_102143568);
      v12 = qword_10229FD88;
      if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138477827;
        v26 = v10;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "[HeadphoneUsage] Interface: Parsed metrics: %{private}@", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD80 != -1)
          dispatch_once(&qword_10229FD80, &stru_102143568);
        v23 = 138477827;
        v24 = v10;
        LODWORD(v22) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 1, "[HeadphoneUsage] Interface: Parsed metrics: %{private}@", &v23, v22);
        v17 = (uint8_t *)v16;
        sub_100512490("Generic", 1, 0, 2, "void CLAudioAccessoryInterface::dailyUsageEventHandler(BTDevice, BTData, size_t)", "%s\n", v16);
        if (v17 != buf)
          free(v17);
      }
      sub_100561410(a1, 1, v10);
    }
    else
    {
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_102143568);
      v13 = qword_10229FD88;
      if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "[HeadphoneUsage] Error forming metric dictionary, aborting.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD80 != -1)
          dispatch_once(&qword_10229FD80, &stru_102143568);
        LOWORD(v23) = 0;
        LODWORD(v22) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 16, "[HeadphoneUsage] Error forming metric dictionary, aborting.", &v23, v22);
        v19 = (uint8_t *)v18;
        sub_100512490("Generic", 1, 0, 0, "void CLAudioAccessoryInterface::dailyUsageEventHandler(BTDevice, BTData, size_t)", "%s\n", v18);
        if (v19 != buf)
          free(v19);
      }
    }
  }
}

BOOL sub_100562DB0(_BYTE *a1, unint64_t a2)
{
  NSObject *v2;
  _BOOL4 v3;
  _BOOL8 result;
  uint8_t *v5;
  double v6;
  uint8_t *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  NSObject *v12;
  NSObject *v13;
  uint8_t *v14;
  double v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  _BOOL4 v19;
  const char *v20;
  uint8_t *v21;
  int v22;
  uint8_t buf[4];
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;

  if (a2 <= 5)
  {
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102143568);
    v2 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "[HeadphoneUsage] isValidDailyUsageMessage: Invalid header size", buf, 2u);
    }
    v3 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v3)
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_102143568);
      v6 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 16, "[HeadphoneUsage] isValidDailyUsageMessage: Invalid header size");
LABEL_10:
      v7 = v5;
      sub_100512490("Generic", 1, 0, 0, "static BOOL BT::CLAudioAccessoryHelper::isValidDailyUsageMessage(BTData _Nonnull, size_t)", "%s\n", v6);
LABEL_38:
      if (v7 != buf)
        free(v7);
      return 0;
    }
    return result;
  }
  if (*a1 != 4)
  {
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102143568);
    v13 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "[HeadphoneUsage] Ignoring, not an AACP Log Message ", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102143568);
    v15 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 2, "[HeadphoneUsage] Ignoring, not an AACP Log Message ");
LABEL_37:
    v7 = v14;
    sub_100512490("Generic", 1, 0, 2, "static BOOL BT::CLAudioAccessoryHelper::isValidDailyUsageMessage(BTData _Nonnull, size_t)", "%s\n", v15);
    goto LABEL_38;
  }
  v8 = a1[3] & 0x3F;
  if (v8 != 1)
  {
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102143568);
    v16 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      v24 = v8;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "[HeadphoneUsage] isValidDailyUsageMessage: Ignoring message type (%d) that is not DailyUsage", buf, 8u);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102143568);
    v15 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 2, "[HeadphoneUsage] isValidDailyUsageMessage: Ignoring message type (%d) that is not DailyUsage", &v22);
    goto LABEL_37;
  }
  v9 = a1[5];
  if ((v9 - 7) > 1)
  {
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102143568);
    v17 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      v24 = v9;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "[HeadphoneUsage] Unexpected AWD version %d", buf, 8u);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102143568);
    v15 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 1, "[HeadphoneUsage] Unexpected AWD version %d", &v22);
    goto LABEL_37;
  }
  v10 = word_101BB65C0[15 * a1[5] + 1];
  v11 = (unsigned __int16)(a2 - 4);
  if (v11 == v10)
  {
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102143568);
    v12 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "[HeadphoneUsage] Bluetooth message passed sanity checks.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_102143568);
      LOWORD(v22) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 2, "[HeadphoneUsage] Bluetooth message passed sanity checks.", &v22, 2);
      v21 = (uint8_t *)v20;
      sub_100512490("Generic", 1, 0, 2, "static BOOL BT::CLAudioAccessoryHelper::isValidDailyUsageMessage(BTData _Nonnull, size_t)", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
    return 1;
  }
  else
  {
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102143568);
    v18 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67109888;
      v24 = v9;
      v25 = 1024;
      v26 = 1;
      v27 = 1024;
      v28 = v10;
      v29 = 1024;
      v30 = v11;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "[HeadphoneUsage] Unexpected AWD data length for AWDVersion %d: type %d expected len %d actual %d. Header mismatch with Bluetooth likely.", buf, 0x1Au);
    }
    v19 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v19)
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_102143568);
      v6 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 17, "[HeadphoneUsage] Unexpected AWD data length for AWDVersion %d: type %d expected len %d actual %d. Header mismatch with Bluetooth likely.", &v22, 26);
      goto LABEL_10;
    }
  }
  return result;
}

NSMutableDictionary *sub_10056352C(uint64_t a1, __int16 a2)
{
  unsigned __int16 v2;
  const void *v3;
  size_t v4;
  size_t v5;
  NSMutableDictionary *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  unsigned int v9;
  _BYTE __dst[3];
  unsigned __int16 v12;
  unsigned __int16 v13;
  unsigned __int16 v14;
  unsigned __int16 v15;
  unsigned __int16 v16;
  unsigned __int16 v17;
  unsigned __int16 v18;
  unsigned __int16 v19;
  unsigned __int16 v20;
  unsigned __int16 v21;
  unsigned __int16 v22;
  unsigned __int16 v23;
  unsigned __int16 v24;
  unsigned __int16 v25;
  unsigned __int16 v26;
  unsigned __int16 v27;
  unsigned __int16 v28;
  unsigned __int16 v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  char v33;
  char v34;
  char v35;
  char v36;
  unsigned int v37;
  unsigned int v38;
  unsigned __int16 v39;
  unsigned __int8 v40;
  unsigned int v41;
  unsigned __int16 v42;
  unsigned __int16 v43;
  unsigned __int16 v44;
  unsigned __int16 v45;
  unsigned __int16 v46;
  unsigned __int16 v47;
  unsigned __int16 v48;
  unsigned __int16 v49;
  unsigned __int16 v50;
  unsigned __int16 v51;
  unsigned __int16 v52;
  unsigned __int16 v53;
  unsigned __int8 v54;
  unsigned __int8 v55;
  unsigned __int8 v56;
  char v57;
  char v58;
  char v59;
  char v60;
  unsigned int v61;
  unsigned int v62;
  unsigned __int16 v63;
  unsigned __int8 v64;
  unsigned int v65;
  unsigned __int16 v66;
  unsigned __int16 v67;
  unsigned __int16 v68;
  unsigned __int16 v69;
  unsigned __int16 v70;
  unsigned __int16 v71;
  unsigned __int16 v72;
  unsigned __int16 v73;
  unsigned __int16 v74;
  unsigned __int16 v75;
  unsigned __int16 v76;
  unsigned __int16 v77;
  unsigned __int16 v78;
  unsigned __int16 v79;
  unsigned __int16 v80;
  unsigned __int16 v81;
  unsigned __int16 v82;
  unsigned int v83;
  unsigned __int16 v84;
  unsigned __int8 v85;
  unsigned __int16 v86;
  unsigned __int16 v87;
  char v88;
  char v89;
  char v90;
  char v91;
  unsigned __int16 v92;
  char v93;
  char v94;
  unsigned int v95;
  unsigned __int16 v96;
  unsigned __int16 v97;
  unsigned __int16 v98;
  unsigned __int16 v99;
  unsigned __int16 v100;
  unsigned __int16 v101;
  unsigned __int16 v102;
  unsigned __int16 v103;
  unsigned __int16 v104;
  unsigned __int16 v105;
  unsigned __int16 v106;
  _DWORD v107[6];
  unsigned __int16 v108;
  unsigned __int16 v109;
  unsigned __int16 v110;
  unsigned __int16 v111;
  unsigned __int16 v112;
  unsigned __int16 v113;
  _WORD v114[3];
  char v115;
  char v116;
  char v117;
  char v118;
  char v119;
  char v120;
  char v121;
  _BYTE v122[18];
  unsigned int v123;
  unsigned __int16 v124;
  unsigned __int16 v125;
  unsigned __int16 v126;
  unsigned __int16 v127;
  _WORD v128[3];
  char v129;
  char v130;
  char v131;
  char v132;
  char v133;
  char v134;
  char v135;
  _BYTE v136[18];
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  unsigned __int16 v144;
  unsigned __int16 v145;
  unsigned __int16 v146;
  unsigned __int16 v147;
  unsigned __int16 v148;
  unsigned __int16 v149;
  unsigned __int16 v150;
  unsigned __int16 v151;
  unsigned __int16 v152;
  unsigned __int16 v153;
  unsigned __int16 v154;
  unsigned __int16 v155;
  unsigned __int16 v156;
  unsigned __int16 v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int v162;
  unsigned int v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  unsigned __int8 v172;
  unsigned __int8 v173;
  unsigned int v174;
  unsigned __int8 v175;
  unsigned __int8 v176;
  unsigned __int8 v177;
  unsigned __int8 v178;
  unsigned __int8 v179;
  unsigned int v180;
  unsigned __int8 v181;
  _BYTE v182[69];
  _QWORD v183[163];
  _QWORD v184[163];

  v2 = a2 - 4;
  v3 = (const void *)(a1 + 4);
  v4 = (unsigned __int16)(a2 - 4);
  if (v4 <= 0x2D4)
    v5 = 725 - (unsigned __int16)(a2 - 4);
  else
    v5 = 0;
  bzero(&__dst[v2], v5);
  memcpy(__dst, v3, v4);
  v183[0] = CFSTR("bud_type");
  v184[0] = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", __dst[0]);
  v183[1] = CFSTR("awd_length");
  v184[1] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v12);
  v183[2] = CFSTR("awd_version");
  v184[2] = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", __dst[1]);
  v183[3] = CFSTR("status");
  v184[3] = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", __dst[2]);
  v183[4] = CFSTR("signature");
  v184[4] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v13);
  v183[5] = CFSTR("product_id");
  v184[5] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v14);
  v183[6] = CFSTR("sw_version");
  v184[6] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v15);
  v183[7] = CFSTR("case_hw_version");
  v184[7] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v16);
  v183[8] = CFSTR("case_sw_version");
  v184[8] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v17);
  v183[9] = CFSTR("a2dp_time_mode_off_l");
  v184[9] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v18);
  v183[10] = CFSTR("a2dp_time_mode_anc_l");
  v184[10] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v19);
  v183[11] = CFSTR("a2dp_time_mode_trcy_l");
  v184[11] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v20);
  v183[12] = CFSTR("a2dp_time_mode_unused_l");
  v184[12] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v21);
  v183[13] = CFSTR("hfp_time_off_l");
  v184[13] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v22);
  v183[14] = CFSTR("hfp_time_anc_l");
  v184[14] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v23);
  v183[15] = CFSTR("hfp_time_trcy_l");
  v184[15] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v24);
  v183[16] = CFSTR("hfp_time_unused_l");
  v184[16] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v25);
  v183[17] = CFSTR("idle_time_off_l");
  v184[17] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v26);
  v183[18] = CFSTR("idle_time_anc_l");
  v184[18] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v27);
  v183[19] = CFSTR("idle_time_trcy_l");
  v184[19] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v28);
  v183[20] = CFSTR("idle_time_unused_l");
  v184[20] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v29);
  v183[21] = CFSTR("a2dp_battery_usage_l");
  v184[21] = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v30);
  v183[22] = CFSTR("hfp_battery_usage_l");
  v184[22] = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v31);
  v183[23] = CFSTR("idle_battery_usage_l");
  v184[23] = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v32);
  v183[24] = CFSTR("a2dp_bud_temp_max_l");
  v184[24] = +[NSNumber numberWithChar:](NSNumber, "numberWithChar:", v33);
  v183[25] = CFSTR("hfp_bud_temp_max_l");
  v184[25] = +[NSNumber numberWithChar:](NSNumber, "numberWithChar:", v34);
  v183[26] = CFSTR("a2dp_bud_temp_avg_l");
  v184[26] = +[NSNumber numberWithChar:](NSNumber, "numberWithChar:", v35);
  v183[27] = CFSTR("hfp_bud_temp_avg_l");
  v184[27] = +[NSNumber numberWithChar:](NSNumber, "numberWithChar:", v36);
  v183[28] = CFSTR("time_out_of_ear_idle_l");
  v184[28] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v37);
  v183[29] = CFSTR("time_out_of_ear_incase_l");
  v184[29] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v38);
  v183[30] = CFSTR("ied_activated_count_l");
  v184[30] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v39);
  v183[31] = CFSTR("fw_update_retry_count_l");
  v184[31] = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v40);
  v183[32] = CFSTR("bud_charging_cycle_l");
  v184[32] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v41);
  v183[33] = CFSTR("a2dp_time_mode_off_r");
  v184[33] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v42);
  v183[34] = CFSTR("a2dp_time_mode_anc_r");
  v184[34] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v43);
  v183[35] = CFSTR("a2dp_time_mode_trcy_r");
  v184[35] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v44);
  v183[36] = CFSTR("a2dp_time_mode_unused_r");
  v184[36] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v45);
  v183[37] = CFSTR("hfp_time_off_r");
  v184[37] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v46);
  v183[38] = CFSTR("hfp_time_anc_r");
  v184[38] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v47);
  v183[39] = CFSTR("hfp_time_trcy_r");
  v184[39] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v48);
  v183[40] = CFSTR("hfp_time_unused_r");
  v184[40] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v49);
  v183[41] = CFSTR("idle_time_off_r");
  v184[41] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v50);
  v183[42] = CFSTR("idle_time_anc_r");
  v184[42] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v51);
  v183[43] = CFSTR("idle_time_trcy_r");
  v184[43] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v52);
  v183[44] = CFSTR("idle_time_unused_r");
  v184[44] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v53);
  v183[45] = CFSTR("a2dp_battery_usage_r");
  v184[45] = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v54);
  v183[46] = CFSTR("hfp_battery_usage_r");
  v184[46] = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v55);
  v183[47] = CFSTR("idle_battery_usage_r");
  v184[47] = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v56);
  v183[48] = CFSTR("a2dp_bud_temp_max_r");
  v184[48] = +[NSNumber numberWithChar:](NSNumber, "numberWithChar:", v57);
  v183[49] = CFSTR("hfp_bud_temp_max_r");
  v184[49] = +[NSNumber numberWithChar:](NSNumber, "numberWithChar:", v58);
  v183[50] = CFSTR("a2dp_bud_temp_avg_r");
  v184[50] = +[NSNumber numberWithChar:](NSNumber, "numberWithChar:", v59);
  v183[51] = CFSTR("hfp_bud_temp_avg_r");
  v184[51] = +[NSNumber numberWithChar:](NSNumber, "numberWithChar:", v60);
  v183[52] = CFSTR("time_out_of_ear_idle_r");
  v184[52] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v61);
  v183[53] = CFSTR("time_out_of_ear_incase_r");
  v184[53] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v62);
  v183[54] = CFSTR("ied_activated_count_r");
  v184[54] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v63);
  v183[55] = CFSTR("fw_update_retry_count_r");
  v184[55] = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v64);
  v183[56] = CFSTR("bud_charging_cycle_r");
  v184[56] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v65);
  v183[57] = CFSTR("a2dp_time_both_in_ear_off");
  v184[57] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v66);
  v183[58] = CFSTR("a2dp_time_both_in_ear_anc");
  v184[58] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v67);
  v183[59] = CFSTR("a2dp_time_both_in_ear_trcy");
  v184[59] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v68);
  v183[60] = CFSTR("a2dp_time_both_in_ear_unused");
  v184[60] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v69);
  v183[61] = CFSTR("hfp_time_both_in_ear_off");
  v184[61] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v70);
  v183[62] = CFSTR("hfp_time_both_in_ear_anc");
  v184[62] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v71);
  v183[63] = CFSTR("hfp_time_both_in_ear_trcy");
  v184[63] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v72);
  v183[64] = CFSTR("hfp_time_both_in_ear_unused");
  v184[64] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v73);
  v183[65] = CFSTR("idle_time_both_in_ear_off");
  v184[65] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v74);
  v183[66] = CFSTR("idle_time_both_in_ear_anc");
  v184[66] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v75);
  v183[67] = CFSTR("idle_time_both_in_ear_trcy");
  v184[67] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v76);
  v183[68] = CFSTR("idle_time_both_in_ear_unused");
  v184[68] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v77);
  v183[69] = CFSTR("time_both_out_of_ear_idle");
  v184[69] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v78);
  v183[70] = CFSTR("time_out_of_ear_both_incase");
  v184[70] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v79);
  v183[71] = CFSTR("hs_on_acc_cnt");
  v184[71] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v80);
  v183[72] = CFSTR("siri_on_source_cnt");
  v184[72] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v81);
  v183[73] = CFSTR("siri_on_accessory_cnt");
  v184[73] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v82);
  v183[74] = CFSTR("total_time_in_connect_session");
  v184[74] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v83);
  v183[75] = CFSTR("bud_swap_count");
  v184[75] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v84);
  v183[76] = CFSTR("bud_daily_charging_soc_delta_l");
  v184[76] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v86);
  v183[77] = CFSTR("bud_daily_charging_soc_delta_r");
  v184[77] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v87);
  v183[78] = CFSTR("bud_max_daily_temp_during_chr_l");
  v184[78] = +[NSNumber numberWithChar:](NSNumber, "numberWithChar:", v88);
  v183[79] = CFSTR("bud_max_daily_temp_during_chr_r");
  v184[79] = +[NSNumber numberWithChar:](NSNumber, "numberWithChar:", v89);
  v183[80] = CFSTR("bud_avg_daily_temp_during_chr_l");
  v184[80] = +[NSNumber numberWithChar:](NSNumber, "numberWithChar:", v90);
  v183[81] = CFSTR("bud_avg_daily_temp_during_chr_r");
  v184[81] = +[NSNumber numberWithChar:](NSNumber, "numberWithChar:", v91);
  v183[82] = CFSTR("case_soc_delta_bud_chr");
  v184[82] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v92);
  v183[83] = CFSTR("case_temp_max_while_discharging");
  v184[83] = +[NSNumber numberWithChar:](NSNumber, "numberWithChar:", v93);
  v183[84] = CFSTR("case_temp_avg_daily");
  v184[84] = +[NSNumber numberWithChar:](NSNumber, "numberWithChar:", v94);
  v183[85] = CFSTR("case_at_maxchr_time_in_day");
  v184[85] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v95);
  v183[86] = CFSTR("case_charging_cycle");
  v184[86] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v96);
  v183[87] = CFSTR("source_conn_productid_1");
  v184[87] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v97);
  v183[88] = CFSTR("source_conn_productid_2");
  v184[88] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v98);
  v183[89] = CFSTR("source_conn_productid_3");
  v184[89] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v99);
  v183[90] = CFSTR("source_conn_productid_4");
  v184[90] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v100);
  v183[91] = CFSTR("source_conn_productid_5");
  v184[91] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v101);
  v183[92] = CFSTR("source_conn_time_1");
  v184[92] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v102);
  v183[93] = CFSTR("source_conn_time_2");
  v184[93] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v103);
  v183[94] = CFSTR("source_conn_time_3");
  v184[94] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v104);
  v183[95] = CFSTR("source_conn_time_4");
  v184[95] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v105);
  v183[96] = CFSTR("source_conn_time_5");
  v184[96] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v106);
  v183[97] = CFSTR("sw_version_ext");
  v184[97] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v107[5]);
  v183[98] = CFSTR("triangle_conn_time");
  v184[98] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v108);
  v183[99] = CFSTR("hw_version");
  v184[99] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v109);
  v183[100] = CFSTR("double_tap_cnt_l");
  v184[100] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v110);
  v183[101] = CFSTR("single_tap_cnt_l");
  v184[101] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v111);
  v183[102] = CFSTR("press_hold_l");
  v184[102] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v112);
  v183[103] = CFSTR("ied_detect_l");
  v184[103] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v113);
  v183[104] = CFSTR("crash_cnt_l");
  v184[104] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v114[2]);
  v183[105] = CFSTR("bud_mileage_l");
  v184[105] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)&v122[14]);
  v183[106] = CFSTR("first_time_use_l");
  v184[106] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v123);
  v183[107] = CFSTR("double_tap_cnt_r");
  v184[107] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v124);
  v183[108] = CFSTR("single_tap_cnt_r");
  v184[108] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v125);
  v183[109] = CFSTR("press_hold_r");
  v184[109] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v126);
  v183[110] = CFSTR("ied_detect_r");
  v184[110] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v127);
  v183[111] = CFSTR("crash_cnt_r");
  v184[111] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v128[2]);
  v183[112] = CFSTR("bud_mileage_r");
  v184[112] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)&v136[14]);
  v183[113] = CFSTR("first_time_use_r");
  v184[113] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v137);
  v183[114] = CFSTR("scp_active_time");
  v184[114] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v138);
  v183[115] = CFSTR("scp_ohd_time");
  v184[115] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v139);
  v183[116] = CFSTR("scp_fwup_time");
  v184[116] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v140);
  v183[117] = CFSTR("scp_idle_time");
  v184[117] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v141);
  v183[118] = CFSTR("scp_ttop_time");
  v184[118] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v142);
  v183[119] = CFSTR("scp_prioff_time");
  v184[119] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v143);
  v183[120] = CFSTR("scp_up_to_active");
  v184[120] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v144);
  v183[121] = CFSTR("scp_up_to_ohd");
  v184[121] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v145);
  v183[122] = CFSTR("scp_up_to_fwup");
  v184[122] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v146);
  v183[123] = CFSTR("scp_up_to_idle");
  v184[123] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v147);
  v183[124] = CFSTR("scp_up_to_ttop");
  v184[124] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v148);
  v183[125] = CFSTR("scp_down_to_ohd");
  v184[125] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v149);
  v183[126] = CFSTR("scp_down_to_fwup");
  v184[126] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v150);
  v183[127] = CFSTR("scp_down_to_idle");
  v184[127] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v151);
  v183[128] = CFSTR("scp_down_to_ttop");
  v184[128] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v152);
  v183[129] = CFSTR("scp_down_to_prioff");
  v184[129] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v153);
  v183[130] = CFSTR("scp_bt_disc");
  v184[130] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v154);
  v183[131] = CFSTR("scp_bt_conn");
  v184[131] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v155);
  v183[132] = CFSTR("scp_bt_a2dp");
  v184[132] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v156);
  v183[133] = CFSTR("scp_bt_call");
  v184[133] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v157);
  v183[134] = CFSTR("scp_scp_b2p_timeout");
  v184[134] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v158);
  v183[135] = CFSTR("scp_scp_b2p_tx_retry");
  v184[135] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v159);
  v183[136] = CFSTR("scp_scp_b2p_rx_error");
  v184[136] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v160);
  v183[137] = CFSTR("scp_scp_b2p_tx_raw");
  v184[137] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v161);
  v183[138] = CFSTR("scp_scp_b2p_rx_raw");
  v184[138] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v162);
  v183[139] = CFSTR("scp_pri_b2p_timeout");
  v184[139] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v163);
  v183[140] = CFSTR("scp_pri_b2p_tx_retry");
  v184[140] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v164);
  v183[141] = CFSTR("scp_pri_b2p_rx_error");
  v184[141] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v165);
  v183[142] = CFSTR("scp_pri_b2p_tx_raw");
  v184[142] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v166);
  v183[143] = CFSTR("scp_pri_b2p_rx_raw");
  v184[143] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v167);
  v183[144] = CFSTR("scp_chun_tx_error");
  v184[144] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v168);
  v183[145] = CFSTR("scp_chun_rx_error");
  v184[145] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v169);
  v183[146] = CFSTR("scp_chun_unlock");
  v184[146] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v170);
  v183[147] = CFSTR("scp_chun_missed_frame");
  v184[147] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v171);
  v183[148] = CFSTR("appleID_paired_count");
  v184[148] = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v172);
  v183[149] = CFSTR("uvlo_count_l");
  v184[149] = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v173);
  v183[150] = CFSTR("time_since_last_uvlo_l");
  v184[150] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v174);
  v183[151] = CFSTR("low_batt_signal_count_l");
  v184[151] = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v175);
  v183[152] = CFSTR("num_sessions_l");
  v184[152] = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v176);
  v183[153] = CFSTR("flash_pe_count_l");
  v184[153] = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v177);
  v183[154] = CFSTR("bud_color_l");
  v184[154] = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v178);
  v183[155] = CFSTR("uvlo_count_r");
  v184[155] = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v179);
  v183[156] = CFSTR("time_since_last_uvlo_r");
  v184[156] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v180);
  v183[157] = CFSTR("low_batt_signal_count_r");
  v184[157] = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v181);
  v183[158] = CFSTR("num_sessions_r");
  v184[158] = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v182[58]);
  v183[159] = CFSTR("flash_pe_count_r");
  v184[159] = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v182[59]);
  v183[160] = CFSTR("bud_color_r");
  v184[160] = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v182[60]);
  v183[161] = CFSTR("case_charge_event_count");
  v184[161] = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v85);
  v183[162] = CFSTR("system_color");
  v184[162] = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v182[61]);
  v6 = +[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v184, v183, 163));
  sub_100565458((uint64_t)CFSTR("array_rfu"), 5, 4u, (uint64_t)v107, v6, 0);
  sub_100565458((uint64_t)CFSTR("ied_histogram_l"), 2, 2u, (uint64_t)v114, v6, 0);
  sub_100565458((uint64_t)CFSTR("a2dp_time_ext_l"), 4, 2u, (uint64_t)&v115, v6, 0);
  sub_100565458((uint64_t)CFSTR("hfp_time_ext_l"), 4, 2u, (uint64_t)&v116, v6, 0);
  sub_100565458((uint64_t)CFSTR("idle_time_ext_l"), 4, 2u, (uint64_t)&v117, v6, 0);
  sub_100565458((uint64_t)CFSTR("a2dp_battery_usage_ext_l"), 8, 2u, (uint64_t)&v118, v6, 0);
  sub_100565458((uint64_t)CFSTR("hfp_battery_usage_ext_l"), 8, 2u, (uint64_t)&v119, v6, 0);
  sub_100565458((uint64_t)CFSTR("idle_battery_usage_ext_l"), 8, 2u, (uint64_t)&v120, v6, 0);
  sub_100565458((uint64_t)CFSTR("array_rfu_l"), 5, 4u, (uint64_t)&v121, v6, 0);
  sub_100565458((uint64_t)CFSTR("volume_his_l"), 7, 2u, (uint64_t)v122, v6, 0);
  sub_100565458((uint64_t)CFSTR("ied_histogram_r"), 2, 2u, (uint64_t)v128, v6, 0);
  sub_100565458((uint64_t)CFSTR("a2dp_time_ext_r"), 4, 2u, (uint64_t)&v129, v6, 0);
  sub_100565458((uint64_t)CFSTR("hfp_time_ext_r"), 4, 2u, (uint64_t)&v130, v6, 0);
  sub_100565458((uint64_t)CFSTR("idle_time_ext_r"), 4, 2u, (uint64_t)&v131, v6, 0);
  sub_100565458((uint64_t)CFSTR("a2dp_battery_usage_ext_r"), 8, 2u, (uint64_t)&v132, v6, 0);
  sub_100565458((uint64_t)CFSTR("hfp_battery_usage_ext_r"), 8, 2u, (uint64_t)&v133, v6, 0);
  sub_100565458((uint64_t)CFSTR("idle_battery_usage_ext_r"), 8, 2u, (uint64_t)&v134, v6, 0);
  sub_100565458((uint64_t)CFSTR("array_rfu_r"), 5, 4u, (uint64_t)&v135, v6, 0);
  sub_100565458((uint64_t)CFSTR("volume_his_r"), 7, 2u, (uint64_t)v136, v6, 0);
  v7 = 0;
  v8 = (unsigned __int16 *)v182;
  do
  {
    -[NSMutableDictionary setObject:forKeyedSubscript:](v6, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *((unsigned __int8 *)v8 - 71)), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("bud_start_soc_at_undock_l_%u"), v7));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v6, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *((unsigned __int8 *)v8 - 70)), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("bud_end_soc_at_dock_l_%u"), v7));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v6, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)((char *)v8 - 69)), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("length_of_session_l_%u"), v7));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v6, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *((unsigned __int8 *)v8 - 2)), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("bud_start_soc_at_undock_r_%u"), v7));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v6, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *((unsigned __int8 *)v8 - 1)), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("bud_end_soc_at_dock_r_%u"), v7));
    v9 = *v8;
    v8 += 2;
    -[NSMutableDictionary setObject:forKeyedSubscript:](v6, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v9), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("length_of_session_r_%u"), v7++));
  }
  while (v7 != 15);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v6, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v182[62]), CFSTR("case_hw_version_maj"));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v6, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v182[63]), CFSTR("case_hw_version_min"));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v6, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v182[64]), CFSTR("case_hw_version_rev"));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v6, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v182[65]), CFSTR("case_sw_version_maj"));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v6, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v182[66]), CFSTR("case_sw_version_min"));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v6, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v182[67]), CFSTR("case_sw_version_rev"));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v6, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v182[68]), CFSTR("appleID_hijack_cnt"));
  return v6;
}

BOOL sub_100564CE4(uint64_t a1, uint64_t a2, void *a3)
{
  id v6;
  int AccessoryInfo;
  BOOL v8;
  int v9;
  NSObject *v10;
  _BOOL4 v11;
  _BOOL8 result;
  uint8_t *v13;
  double v14;
  NSObject *v15;
  double v16;
  uint8_t *v17;
  uint8_t *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  char isKindOfClass;
  id v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  _BOOL4 v36;
  NSObject *v37;
  _BOOL4 v38;
  NSObject *v39;
  _BOOL4 v40;
  uint64_t v41;
  int v42;
  _QWORD v43[3];
  uint8_t buf[4];
  _QWORD v45[204];

  if (!a1)
  {
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102143568);
    v15 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      v45[0] = a2;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "[HeadphoneUsage] BT Accessory Manager no longer exists, cannot retrieve serial numbers,device:%@", buf, 0xCu);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102143568);
    v42 = 138412290;
    v43[0] = a2;
    v16 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 2, "[HeadphoneUsage] BT Accessory Manager no longer exists, cannot retrieve serial numbers,device:%@", &v42, 12);
    v18 = v17;
    sub_100512490("Generic", 1, 0, 2, "static BOOL BT::CLAudioAccessoryHelper::addSerialNumbersToDict(BTAccessoryManager _Nonnull, BTDevice _Nonnull, NSMutableDictionary * _Nonnull)", "%s\n", v16);
LABEL_56:
    if (v18 != buf)
      free(v18);
    return 0;
  }
  v6 = objc_msgSend(objc_alloc((Class)NSMutableData), "initWithLength:", 1000);
  v41 = 0;
  AccessoryInfo = BTAccessoryManagerGetAccessoryInfo(a1, a2, objc_msgSend(v6, "mutableBytes"), &v41, objc_msgSend(v6, "length"));
  if (AccessoryInfo)
    v8 = 1;
  else
    v8 = v41 == 0;
  if (v8)
  {
    v9 = AccessoryInfo;

    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102143568);
    v10 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109376;
      LODWORD(v45[0]) = v9;
      WORD2(v45[0]) = 2048;
      *(_QWORD *)((char *)v45 + 6) = v41;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "[HeadphoneUsage] Error: Unable to retrieve data,status:%d,infoLen:%zu", buf, 0x12u);
    }
    v11 = sub_1001BFF7C(115, 0);
    result = 0;
    if (!v11)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102143568);
    v42 = 67109376;
    LODWORD(v43[0]) = v9;
    WORD2(v43[0]) = 2048;
    *(_QWORD *)((char *)v43 + 6) = v41;
    v14 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 16, "[HeadphoneUsage] Error: Unable to retrieve data,status:%d,infoLen:%zu", &v42, 18);
    goto LABEL_55;
  }
  objc_msgSend(v6, "setLength:");
  v19 = +[NSJSONSerialization JSONObjectWithData:options:error:](NSJSONSerialization, "JSONObjectWithData:options:error:", v6, 0, 0);

  v21 = objc_opt_class(NSDictionary, v20);
  isKindOfClass = objc_opt_isKindOfClass(v19, v21);
  if ((isKindOfClass & 1) == 0)
  {
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102143568);
    v35 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "[HeadphoneUsage] Error: Accessory info dictionary is of unexpected class.", buf, 2u);
    }
    v36 = sub_1001BFF7C(115, 0);
    result = 0;
    if (!v36)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102143568);
    LOWORD(v42) = 0;
    v14 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 16, "[HeadphoneUsage] Error: Accessory info dictionary is of unexpected class.", &v42, 2);
    goto LABEL_55;
  }
  v23 = objc_msgSend(v19, "objectForKeyedSubscript:", CFSTR("AACPVersionInfo"));
  v25 = objc_opt_class(NSArray, v24);
  if ((objc_opt_isKindOfClass(v23, v25) & 1) == 0 || (unint64_t)objc_msgSend(v23, "count") < 0xA)
  {
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102143568);
    v37 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "[HeadphoneUsage] Error: AACPVersionInfo array of unexpected type or size.", buf, 2u);
    }
    v38 = sub_1001BFF7C(115, 0);
    result = 0;
    if (!v38)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102143568);
    LOWORD(v42) = 0;
    v14 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 16, "[HeadphoneUsage] Error: AACPVersionInfo array of unexpected type or size.", &v42, 2);
    goto LABEL_55;
  }
  v26 = objc_msgSend(v23, "objectAtIndex:", 3);
  v27 = objc_msgSend(v23, "objectAtIndex:", 8);
  v28 = objc_msgSend(v23, "objectAtIndex:", 9);
  v30 = objc_opt_class(NSString, v29);
  if ((objc_opt_isKindOfClass(v26, v30) & 1) != 0)
  {
    v32 = objc_opt_class(NSString, v31);
    if ((objc_opt_isKindOfClass(v27, v32) & 1) != 0)
    {
      v34 = objc_opt_class(NSString, v33);
      if ((objc_opt_isKindOfClass(v28, v34) & 1) != 0)
      {
        objc_msgSend(a3, "setObject:forKeyedSubscript:", v26, CFSTR("serial_number_system"));
        objc_msgSend(a3, "setObject:forKeyedSubscript:", v27, CFSTR("serial_number_left"));
        objc_msgSend(a3, "setObject:forKeyedSubscript:", v28, CFSTR("serial_number_right"));
        return 1;
      }
    }
  }
  if (qword_10229FD80 != -1)
    dispatch_once(&qword_10229FD80, &stru_102143568);
  v39 = qword_10229FD88;
  if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "[HeadphoneUsage] Error: Expected serial number as NSString*, got different type.", buf, 2u);
  }
  v40 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v40)
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102143568);
    LOWORD(v42) = 0;
    v14 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 16, "[HeadphoneUsage] Error: Expected serial number as NSString*, got different type.", &v42, 2);
LABEL_55:
    v18 = v13;
    sub_100512490("Generic", 1, 0, 0, "static BOOL BT::CLAudioAccessoryHelper::addSerialNumbersToDict(BTAccessoryManager _Nonnull, BTDevice _Nonnull, NSMutableDictionary * _Nonnull)", "%s\n", v14);
    goto LABEL_56;
  }
  return result;
}

void sub_10056542C(id a1)
{
  qword_10229FD88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Accessory");
}

void sub_100565458(uint64_t a1, int a2, unsigned int a3, uint64_t a4, void *a5, int a6)
{
  NSObject *v7;
  const char *v8;
  unsigned int v12;
  unsigned int v14;
  int v15;
  unint64_t v16;
  NSNumber *v17;
  NSObject *v18;
  uint8_t *v19;
  _BYTE v20[24];
  uint8_t buf[4];
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  void *v26;

  if (a3 - 9 > 0xFFFFFFF7)
  {
    if (a1 && a4 && a5)
    {
      v12 = a3 * a2;
      if (a3 * a2)
      {
        v14 = 0;
        v15 = a3 - 1;
        do
        {
          switch(v15)
          {
            case 0:
              v16 = *(unsigned __int8 *)(a4 + v14);
              break;
            case 1:
              v16 = *(unsigned __int16 *)(a4 + v14);
              break;
            case 2:
              v16 = *(unsigned __int16 *)(a4 + v14) | ((unint64_t)*(unsigned __int8 *)(a4 + v14 + 2) << 16);
              break;
            case 3:
              v16 = *(unsigned int *)(a4 + v14);
              break;
            case 4:
              v16 = *(unsigned int *)(a4 + v14) | ((unint64_t)*(unsigned __int8 *)(a4 + v14 + 4) << 32);
              break;
            case 5:
              v16 = *(unsigned int *)(a4 + v14) | ((unint64_t)*(unsigned __int8 *)(a4 + v14 + 4) << 32) | ((unint64_t)*(unsigned __int8 *)(a4 + v14 + 5) << 40);
              break;
            case 6:
              v16 = *(unsigned int *)(a4 + v14) | ((unint64_t)*(unsigned __int8 *)(a4 + v14 + 4) << 32) | ((unint64_t)*(unsigned __int8 *)(a4 + v14 + 5) << 40) | ((unint64_t)*(unsigned __int8 *)(a4 + v14 + 6) << 48);
              break;
            case 7:
              v16 = *(_QWORD *)(a4 + v14);
              break;
            default:
              v16 = 0;
              break;
          }
          if (a6)
            v17 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", v16);
          else
            v17 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v16);
          objc_msgSend(a5, "setObject:forKey:", v17, +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@_%u"), a1, v14 / a3));
          v14 += a3;
        }
        while (v14 < v12);
      }
    }
    else
    {
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_102143568);
      v18 = qword_10229FD88;
      if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412802;
        v22 = a1;
        v23 = 2048;
        v24 = a4;
        v25 = 2112;
        v26 = a5;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "[HeadphoneUsage] addExpandedArrayToDictionary: Invalid parameters. arrayName: %@, array: %p, dict: %@", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD80 != -1)
          dispatch_once(&qword_10229FD80, &stru_102143568);
        *(_DWORD *)v20 = 138412802;
        *(_QWORD *)&v20[4] = a1;
        *(_WORD *)&v20[12] = 2048;
        *(_QWORD *)&v20[14] = a4;
        *(_WORD *)&v20[22] = 2112;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 16, "[HeadphoneUsage] addExpandedArrayToDictionary: Invalid parameters. arrayName: %@, array: %p, dict: %@", v20, 32, *(_OWORD *)v20, *(_QWORD *)&v20[16], a5);
        goto LABEL_39;
      }
    }
  }
  else
  {
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102143568);
    v7 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v22) = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "[HeadphoneUsage] addExpandedArrayToDictionary: Invalid value for bytesPerEntry: %u", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_102143568);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 16, "[HeadphoneUsage] addExpandedArrayToDictionary: Invalid value for bytesPerEntry: %u", v20);
LABEL_39:
      v19 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "static void BT::CLAudioAccessoryHelper::addExpandedArrayToDictionary(NSString * _Nonnull, uint32_t, uint8_t, uint8_t * _Nonnull, NSMutableDictionary * _Nonnull, BOOL)", "%s\n", v8);
      if (v19 != buf)
        free(v19);
    }
  }
}

_QWORD *sub_10056588C(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD **v12;
  _QWORD *i;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      for (i = *v12; i; i = (_QWORD *)*i)
      {
        v14 = i[1];
        if (v14 == v9)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10)
              v14 %= v10;
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v9;
  i[2] = **a4;
  i[3] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    v17 = 1;
    if (v10 >= 3)
      v17 = (v10 & (v10 - 1)) != 0;
    v18 = v17 | (2 * v10);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_10012E444(a1, v20);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10)
        v23 %= v10;
    }
    else
    {
      v23 &= v10 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_100565ACC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100565C38(id a1)
{
  qword_102301BA0 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLLocationStreamingConnectionManagerSilo"));
}

void sub_100565CA8(id a1)
{
  uint64_t v1;

  if (objc_opt_class(IDSService, v1))
  {
    sub_100197040();
    if (sub_10019DF90() || (sub_100197040(), sub_100195F08()))
      byte_102301BB0 = 1;
  }
}

id sub_100565EA0(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "pairedDeviceIsNearby:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 9));
}

id sub_1005660C4(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "pairedDeviceIsNearby:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 9));
}

void sub_10056623C(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  __int16 v7;
  uint64_t v8;

  if (a2)
  {
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_102143778);
    v3 = qword_1022A01E8;
    if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_DEFAULT))
    {
      v4[0] = 68289282;
      v4[1] = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2114;
      v8 = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"failed to activate #Rapport link\", \"Error\":%{public, location:escape_only}@}", (uint8_t *)v4, 0x1Cu);
    }
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 8) = 1;
  }
}

id sub_10056633C(uint64_t a1, void *a2)
{
  const char *v4;
  const char *v5;
  NSObject *v6;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  id v16;

  if (objc_msgSend(a2, "model"))
    v4 = (const char *)objc_msgSend(objc_msgSend(a2, "model"), "UTF8String");
  else
    v4 = "Unknown Model";
  if (objc_msgSend(a2, "name"))
    v5 = (const char *)objc_msgSend(objc_msgSend(a2, "name"), "UTF8String");
  else
    v5 = "Unknown Name";
  if (qword_1022A01E0 != -1)
    dispatch_once(&qword_1022A01E0, &stru_102143778);
  v6 = qword_1022A01E8;
  if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_DEBUG))
  {
    v8[0] = 68289795;
    v8[1] = 0;
    v9 = 2082;
    v10 = "";
    v11 = 2082;
    v12 = v4;
    v13 = 2081;
    v14 = v5;
    v15 = 2082;
    v16 = objc_msgSend(objc_msgSend(a2, "effectiveIdentifier"), "UTF8String");
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#Rapport discovered nearby device\", \"model\":%{public, location:escape_only}s, \"name\":%{private, location:escape_only}s, \"effectiveID\":%{public, location:escape_only}s}", (uint8_t *)v8, 0x30u);
  }
  return objc_msgSend(*(id *)(a1 + 32), "updateNearbyStatusWithCompanionLinkDevice:didConnect:", a2, 1);
}

id sub_1005664B0(uint64_t a1, void *a2)
{
  const char *v4;
  const char *v5;
  NSObject *v6;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  id v16;

  if (objc_msgSend(a2, "model"))
    v4 = (const char *)objc_msgSend(objc_msgSend(a2, "model"), "UTF8String");
  else
    v4 = "Unknown Model";
  if (objc_msgSend(a2, "name"))
    v5 = (const char *)objc_msgSend(objc_msgSend(a2, "name"), "UTF8String");
  else
    v5 = "Unknown Name";
  if (qword_1022A01E0 != -1)
    dispatch_once(&qword_1022A01E0, &stru_102143778);
  v6 = qword_1022A01E8;
  if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_DEBUG))
  {
    v8[0] = 68289795;
    v8[1] = 0;
    v9 = 2082;
    v10 = "";
    v11 = 2082;
    v12 = v4;
    v13 = 2081;
    v14 = v5;
    v15 = 2082;
    v16 = objc_msgSend(objc_msgSend(a2, "effectiveIdentifier"), "UTF8String");
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#Rapport lost nearby device\", \"model\":%{public, location:escape_only}s, \"name\":%{private, location:escape_only}s, \"effectiveID\":%{public, location:escape_only}s}", (uint8_t *)v8, 0x30u);
  }
  return objc_msgSend(*(id *)(a1 + 32), "updateNearbyStatusWithCompanionLinkDevice:didConnect:", a2, 0);
}

void sub_100566624(uint64_t a1, void *a2)
{
  id v4;
  id v5;
  void *v6;
  NSObject *v7;
  signed int v8;
  uint64_t v9;
  int v10;
  int v11;
  void *v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  id v16;
  _QWORD v17[6];
  uint8_t buf[8];
  __int16 v19;
  const char *v20;
  __int16 v21;
  id v22;
  __int16 v23;
  signed int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;

  v4 = objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("kCLLocationStreamingMessageKeyPayload"));
  v5 = objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("kCLLocationStreamingMessageKeyType"));
  if (v5)
  {
    v6 = v5;
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_102143778);
    v7 = qword_1022A01E8;
    if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v19 = 2082;
      v20 = "";
      v21 = 2082;
      v22 = objc_msgSend(v6, "UTF8String");
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#Rapport Got message\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    v8 = objc_msgSend(objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("kCLLocationStreamingMessageKeyVersion")), "intValue");
    sub_100566A0C();
    sub_1015A2E04(buf, (char *)objc_msgSend(v6, "UTF8String"));
    v9 = sub_10019C4C0((uint64_t)&qword_102301BC0, (const void **)buf);
    if (SBYTE3(v22) < 0)
      operator delete(*(void **)buf);
    if ((uint64_t *)v9 == &qword_102301BC8)
    {
      v10 = -1;
      v11 = -1;
    }
    else
    {
      v11 = *(_DWORD *)(v9 + 56);
      v10 = *(_DWORD *)(v9 + 60);
      if (v8 >= v11 && v8 <= v10)
      {
        v12 = *(void **)(a1 + 32);
        v17[0] = _NSConcreteStackBlock;
        v17[1] = 3221225472;
        v17[2] = sub_100566AA0;
        v17[3] = &unk_102143668;
        v17[4] = v6;
        v17[5] = v4;
        objc_msgSend(v12, "withClients:", v17);
        return;
      }
    }
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_102143778);
    v15 = qword_1022A01E8;
    if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_DEFAULT))
    {
      v16 = objc_msgSend(v6, "UTF8String");
      *(_DWORD *)buf = 68290050;
      *(_DWORD *)&buf[4] = 0;
      v19 = 2082;
      v20 = "";
      v21 = 2082;
      v22 = v16;
      v23 = 1026;
      v24 = v8;
      v25 = 1026;
      v26 = v11;
      v27 = 1026;
      v28 = v10;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Received message of unsupported version\", \"type\":%{public, location:escape_only}s, \"declared version\":%{public}d, \"minimum version\":%{public}d, \"maximum version\":%{public}d}", buf, 0x2Eu);
    }
  }
  else
  {
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_102143778);
    v13 = qword_1022A01E8;
    if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289283;
      *(_DWORD *)&buf[4] = 0;
      v19 = 2082;
      v20 = "";
      v21 = 2113;
      v22 = a2;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#Rapport Missing message type\", \"message\":%{private, location:escape_only}@}", buf, 0x1Cu);
      if (qword_1022A01E0 != -1)
        dispatch_once(&qword_1022A01E0, &stru_102143778);
    }
    v14 = qword_1022A01E8;
    if (os_signpost_enabled((os_log_t)qword_1022A01E8))
    {
      *(_DWORD *)buf = 68289283;
      *(_DWORD *)&buf[4] = 0;
      v19 = 2082;
      v20 = "";
      v21 = 2113;
      v22 = a2;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Rapport Missing message type", "{\"msg%{public}.0s\":\"#Rapport Missing message type\", \"message\":%{private, location:escape_only}@}", buf, 0x1Cu);
    }
  }
}

void sub_1005669E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100566A0C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_102301BD8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_102301BD8))
  {
    qword_102301BD0 = 0;
    qword_102301BC8 = 0;
    qword_102301BC0 = (uint64_t)&qword_102301BC8;
    __cxa_atexit((void (*)(void *))sub_1005687E0, &qword_102301BC0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102301BD8);
  }
  if (qword_102301BE0 != -1)
    dispatch_once(&qword_102301BE0, &stru_102143798);
}

id sub_100566AA0(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "receivedMessageOfType:withPayload:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void sub_100566C84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v4;
  NSObject *v5;
  NSObject *v7;
  int v8;
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  uint64_t v13;

  if (a3)
  {
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_102143778);
    v4 = qword_1022A01E8;
    if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_ERROR))
    {
      v8 = 68289282;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2114;
      v13 = a3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"IDS service failed to initialize\", \"Error\":%{public, location:escape_only}@}", (uint8_t *)&v8, 0x1Cu);
      if (qword_1022A01E0 != -1)
        dispatch_once(&qword_1022A01E0, &stru_102143778);
    }
    v5 = qword_1022A01E8;
    if (os_signpost_enabled((os_log_t)qword_1022A01E8))
    {
      v8 = 68289282;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2114;
      v13 = a3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "IDS service failed to initialize", "{\"msg%{public}.0s\":\"IDS service failed to initialize\", \"Error\":%{public, location:escape_only}@}", (uint8_t *)&v8, 0x1Cu);
    }
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "setService:", a2);
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_102143778);
    v7 = qword_1022A01E8;
    if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_DEFAULT))
    {
      v8 = 68289026;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"IDS became available so resuming silo\"}", (uint8_t *)&v8, 0x12u);
    }
    objc_msgSend(*(id *)(a1 + 40), "resume");
  }
}

id sub_100567574(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "failedToSendMessage:withError:isFatal:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48) == 0);
}

void sub_100567918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

id sub_100567948(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  id v4;
  void *v5;
  _QWORD *v6;
  NSObject *v7;
  int v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  _QWORD v13[5];
  _QWORD v14[6];
  uint8_t buf[4];
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  _BYTE v20[14];
  __int16 v21;
  id v22;

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40) = a2;
  if (a2)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 0;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24))
  {
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_102143778);
    v3 = qword_1022A01E8;
    if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_INFO))
    {
      v4 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "messageType"), "UTF8String");
      *(_DWORD *)buf = 68289282;
      v16 = 0;
      v17 = 2082;
      v18 = "";
      v19 = 2082;
      *(_QWORD *)v20 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#Rapport Send success\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100567BB8;
    v13[3] = &unk_1021435F0;
    v5 = *(void **)(a1 + 40);
    v13[4] = *(_QWORD *)(a1 + 32);
    v6 = v13;
  }
  else
  {
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_102143778);
    v7 = qword_1022A01E8;
    if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
      v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
      v10 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "messageType"), "UTF8String");
      *(_DWORD *)buf = 68289794;
      v16 = 0;
      v17 = 2082;
      v18 = "";
      v19 = 1026;
      *(_DWORD *)v20 = v8;
      *(_WORD *)&v20[4] = 2114;
      *(_QWORD *)&v20[6] = v9;
      v21 = 2082;
      v22 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning #Rapport failed to send event\", \"writtenToNetworkStack\":%{public}d, \"error\":%{public, location:escape_only}@, \"type\":%{public, location:escape_only}s}", buf, 0x2Cu);
    }
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_100567BA0;
    v14[3] = &unk_102143708;
    v5 = *(void **)(a1 + 40);
    v11 = *(_QWORD *)(a1 + 48);
    v14[4] = *(_QWORD *)(a1 + 32);
    v14[5] = v11;
    v6 = v14;
  }
  return objc_msgSend(v5, "withClients:", v6);
}

id sub_100567BA0(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "failedToSendMessage:withError:isFatal:", *(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), 0);
}

id sub_100567BB8(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "successfullySentMessage:", *(_QWORD *)(a1 + 32));
}

id sub_100567BC4(_QWORD *a1, void *a2)
{
  return _objc_msgSend(a2, "failedToSendMessage:withError:isFatal:", a1[4], *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40), *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) == 0);
}

void sub_100568214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_100568238(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "receivedMessageOfType:withPayload:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

id sub_1005686B8(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "failedToSendMessage:withError:isFatal:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 0);
}

id sub_1005686C8(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "successfullySentMessage:", *(_QWORD *)(a1 + 32));
}

void sub_1005687B4(id a1)
{
  qword_1022A01E8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Streaming");
}

uint64_t sub_1005687E0(uint64_t a1)
{
  sub_100090AE4(a1, *(char **)(a1 + 8));
  return a1;
}

void sub_100568808(id a1)
{
  void *__p[2];
  char v2;
  void **v3;

  sub_100197040();
  if (sub_10019DF90())
  {
    sub_1015A2E04(__p, (char *)objc_msgSend(CFSTR("kCLLocationStreamingMessageTypeRequestLocation"), "UTF8String"));
    v3 = __p;
    *((_QWORD *)sub_100318A40((uint64_t **)&qword_102301BC0, (const void **)__p, (uint64_t)&unk_101B9EB60, (_OWORD **)&v3)
    + 7) = 0;
    if (v2 < 0)
      operator delete(__p[0]);
    sub_1015A2E04(__p, (char *)objc_msgSend(CFSTR("kCLLocationStreamingMessageTypeSetMotionAlarm"), "UTF8String"));
    v3 = __p;
    *((_QWORD *)sub_100318A40((uint64_t **)&qword_102301BC0, (const void **)__p, (uint64_t)&unk_101B9EB60, (_OWORD **)&v3)
    + 7) = 0;
    if (v2 < 0)
      operator delete(__p[0]);
  }
  sub_100197040();
  if (sub_100195F08())
  {
    sub_1015A2E04(__p, (char *)objc_msgSend(CFSTR("kCLLocationStreamingMessageTypeLocation"), "UTF8String"));
    v3 = __p;
    *((_QWORD *)sub_100318A40((uint64_t **)&qword_102301BC0, (const void **)__p, (uint64_t)&unk_101B9EB60, (_OWORD **)&v3)
    + 7) = 0;
    if (v2 < 0)
      operator delete(__p[0]);
    sub_1015A2E04(__p, (char *)objc_msgSend(CFSTR("kCLLocationStreamingMessageTypeAliveAgain"), "UTF8String"));
    v3 = __p;
    *((_QWORD *)sub_100318A40((uint64_t **)&qword_102301BC0, (const void **)__p, (uint64_t)&unk_101B9EB60, (_OWORD **)&v3)
    + 7) = 0;
    if (v2 < 0)
      operator delete(__p[0]);
    sub_1015A2E04(__p, (char *)objc_msgSend(CFSTR("kCLLocationStreamingMessageTypeMotionAlarmUpdate"), "UTF8String"));
    v3 = __p;
    *((_QWORD *)sub_100318A40((uint64_t **)&qword_102301BC0, (const void **)__p, (uint64_t)&unk_101B9EB60, (_OWORD **)&v3)
    + 7) = 0;
    if (v2 < 0)
      operator delete(__p[0]);
  }
}

void sub_1005689F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

Class sub_100568A24()
{
  Class result;

  if (qword_102301BF0 != -1)
    dispatch_once(&qword_102301BF0, &stru_1021437B8);
  result = objc_getClass("NRPairedDeviceRegistry");
  qword_102301BE8 = (uint64_t)result;
  off_1022A2C60 = sub_100568A80;
  return result;
}

uint64_t sub_100568A80()
{
  return qword_102301BE8;
}

void sub_100568A8C(id a1)
{
  qword_102301BF8 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/NanoRegistry.framework/NanoRegistry", 2);
}

uint64_t sub_100568AB4()
{
  uint64_t *v0;
  uint64_t result;

  if (qword_102301BF0 != -1)
    dispatch_once(&qword_102301BF0, &stru_1021437B8);
  v0 = (uint64_t *)dlsym((void *)qword_102301BF8, "NRDevicePropertySystemVersion");
  if (v0)
  {
    result = *v0;
    qword_102301C00 = result;
  }
  else
  {
    result = qword_102301C00;
  }
  off_1022A2C68 = sub_100568B2C;
  return result;
}

uint64_t sub_100568B2C()
{
  return qword_102301C00;
}

void sub_100568B38(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_100568B64()
{
  operator new();
}

void sub_100568C74(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_rethrow();
}

void sub_100568C80(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_100568CB4(_QWORD *a1)
{
  *a1 = off_102143808;
  sub_100261F44((uint64_t)(a1 + 17));
  return sub_100AD16D0(a1);
}

void sub_100568CE4(_QWORD *a1)
{
  *a1 = off_102143808;
  sub_100261F44((uint64_t)(a1 + 17));
  sub_100AD16D0(a1);
  operator delete();
}

void sub_100568D2C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100568D54(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

uint64_t sub_100568D94(uint64_t a1, const __CFString *a2, char a3, uint64_t a4)
{
  _QWORD *v8;
  void **v9;
  const char *v10;
  passwd *v11;
  NSObject *v12;
  __int128 *v13;
  std::string *v14;
  __int128 v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  const std::string::value_type *p_p;
  std::string::size_type v21;
  std::string *v22;
  std::string::size_type v23;
  char v24;
  uint64_t v25;
  std::string *v26;
  __int128 v27;
  const std::string::value_type *v28;
  std::string::size_type v29;
  std::string *v30;
  __int128 v31;
  const std::string::value_type *v32;
  std::string::size_type v33;
  std::string *v34;
  std::string::size_type v35;
  char v36;
  uint64_t v37;
  passwd *v38;
  passwd *v39;
  uid_t pw_uid;
  gid_t pw_gid;
  BOOL v42;
  __int128 *v44;
  std::string *v45;
  void *v46[2];
  uint64_t v47;
  void *__p;
  std::string::size_type v49;
  unsigned __int8 v50;
  void *v51;
  std::string::size_type v52;
  unsigned __int8 v53;
  void *__dst[2];
  uint64_t v55;
  std::string v56;
  __int128 v57;
  uint64_t v58;
  std::string v59;
  _QWORD v60[2];
  std::string buf[68];

  v8 = sub_100119D70((_QWORD *)a1);
  *v8 = off_102143C48;
  *((_BYTE *)v8 + 16) = 0;
  *(_OWORD *)(v8 + 3) = 0u;
  v9 = (void **)(v8 + 3);
  *(_OWORD *)(v8 + 5) = 0u;
  *(_OWORD *)(v8 + 7) = 0u;
  v8[10] = a4;
  v8[11] = -1;
  *((_BYTE *)v8 + 96) = a3;
  sub_100119D70(v8 + 13);
  *(_QWORD *)(a1 + 104) = &off_102144010;
  sub_100119D70((_QWORD *)(a1 + 120));
  *(_QWORD *)(a1 + 120) = &off_102144010;
  *(_QWORD *)(a1 + 72) = a2;
  CFRetain(a2);
  CFRetain(*(CFTypeRef *)(a1 + 80));
  sub_1001A486C(*(const __CFString **)(a1 + 80), (uint64_t)&v57);
  if (v58 >= 0)
    v10 = (const char *)&v57;
  else
    v10 = (const char *)v57;
  v11 = getpwnam(v10);
  if (v11)
  {
    *(_QWORD *)(a1 + 88) = *(_QWORD *)&v11->pw_uid;
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021443E8);
    v12 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v13 = &v57;
      if (v58 < 0)
        v13 = (__int128 *)v57;
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "could not read user %{public}s uid/gid", (uint8_t *)buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021443E8);
      v44 = &v57;
      if (v58 < 0)
        v44 = (__int128 *)v57;
      LODWORD(v59.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)v59.__r_.__value_.__r.__words + 4) = (std::string::size_type)v44;
      v45 = (std::string *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "could not read user %{public}s uid/gid", &v59, 12);
      sub_100512490("Generic", 1, 0, 0, "CLPreferences::CLPreferences(CFStringRef, BOOL, CFStringRef)", "%s\n", (const char *)v45);
      if (v45 != buf)
        free(v45);
    }
  }
  if (SHIBYTE(v58) < 0)
  {
    sub_100115CE4(__dst, (void *)v57, *((unint64_t *)&v57 + 1));
  }
  else
  {
    *(_OWORD *)__dst = v57;
    v55 = v58;
  }
  sub_100584960((uint64_t *)__dst, &v56);
  v14 = std::string::append(&v56, "/Library/Preferences/");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  sub_1001A486C(a2, (uint64_t)&v51);
  if ((v53 & 0x80u) == 0)
    v16 = (const std::string::value_type *)&v51;
  else
    v16 = (const std::string::value_type *)v51;
  if ((v53 & 0x80u) == 0)
    v17 = v53;
  else
    v17 = v52;
  v18 = std::string::append(&v59, v16, v17);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  buf[0].__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  sub_1015A2E04(&__p, ".plist");
  if ((v50 & 0x80u) == 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p;
  if ((v50 & 0x80u) == 0)
    v21 = v50;
  else
    v21 = v49;
  v22 = std::string::append(buf, p_p, v21);
  v23 = v22->__r_.__value_.__r.__words[0];
  v60[0] = v22->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v60 + 7) = *(std::string::size_type *)((char *)&v22->__r_.__value_.__r.__words[1] + 7);
  v24 = HIBYTE(v22->__r_.__value_.__r.__words[2]);
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v9);
  v25 = v60[0];
  *(_QWORD *)(a1 + 24) = v23;
  *(_QWORD *)(a1 + 32) = v25;
  *(_QWORD *)(a1 + 39) = *(_QWORD *)((char *)v60 + 7);
  *(_BYTE *)(a1 + 47) = v24;
  if ((char)v50 < 0)
    operator delete(__p);
  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf[0].__r_.__value_.__l.__data_);
  if ((char)v53 < 0)
    operator delete(v51);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  if (SHIBYTE(v55) < 0)
    operator delete(__dst[0]);
  if (SHIBYTE(v58) < 0)
  {
    sub_100115CE4(v46, (void *)v57, *((unint64_t *)&v57 + 1));
  }
  else
  {
    *(_OWORD *)v46 = v57;
    v47 = v58;
  }
  sub_100584AF0((uint64_t)v46, &v56);
  v26 = std::string::append(&v56, "/");
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  sub_1001A486C(a2, (uint64_t)&v51);
  if ((v53 & 0x80u) == 0)
    v28 = (const std::string::value_type *)&v51;
  else
    v28 = (const std::string::value_type *)v51;
  if ((v53 & 0x80u) == 0)
    v29 = v53;
  else
    v29 = v52;
  v30 = std::string::append(&v59, v28, v29);
  v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  buf[0].__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  sub_1015A2E04(&__p, ".plist");
  if ((v50 & 0x80u) == 0)
    v32 = (const std::string::value_type *)&__p;
  else
    v32 = (const std::string::value_type *)__p;
  if ((v50 & 0x80u) == 0)
    v33 = v50;
  else
    v33 = v49;
  v34 = std::string::append(buf, v32, v33);
  v35 = v34->__r_.__value_.__r.__words[0];
  v60[0] = v34->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v60 + 7) = *(std::string::size_type *)((char *)&v34->__r_.__value_.__r.__words[1] + 7);
  v36 = HIBYTE(v34->__r_.__value_.__r.__words[2]);
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  v37 = v60[0];
  *(_QWORD *)(a1 + 48) = v35;
  *(_QWORD *)(a1 + 56) = v37;
  *(_QWORD *)(a1 + 63) = *(_QWORD *)((char *)v60 + 7);
  *(_BYTE *)(a1 + 71) = v36;
  if ((char)v50 < 0)
    operator delete(__p);
  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf[0].__r_.__value_.__l.__data_);
  if ((char)v53 < 0)
    operator delete(v51);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47) < 0)
    operator delete(v46[0]);
  v38 = getpwnam("root");
  v42 = 0;
  if (v38)
  {
    v39 = v38;
    pw_uid = v38->pw_uid;
    if (pw_uid == getuid())
    {
      pw_gid = v39->pw_gid;
      if (pw_gid == getgid())
        v42 = 1;
    }
  }
  *(_BYTE *)(a1 + 16) = v42;
  sub_100569514(a1);
  if (SHIBYTE(v58) < 0)
    operator delete((void *)v57);
  return a1;
}

void sub_10056937C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  void **v66;

  if (a48 < 0)
    operator delete(__p);
  sub_10011A56C(v65);
  sub_10011A56C(v64);
  if (*(char *)(v63 + 71) < 0)
    operator delete(*(void **)(v63 + 48));
  if (*(char *)(v63 + 47) < 0)
    operator delete(*v66);
  sub_10011A56C((_QWORD *)v63);
  _Unwind_Resume(a1);
}

BOOL sub_100569514(uint64_t a1)
{
  _QWORD *v2;
  int v3;

  os_unfair_lock_lock((os_unfair_lock_t)&unk_102301C08);
  v2 = (_QWORD *)(a1 + 48);
  if (*(char *)(a1 + 71) < 0)
    v2 = (_QWORD *)*v2;
  sub_10003CE20(a1 + 120, (uint64_t)v2);
  v3 = CFPreferencesSynchronize(*(CFStringRef *)(a1 + 72), *(CFStringRef *)(a1 + 80), kCFPreferencesAnyHost);
  if (*(_BYTE *)(a1 + 16))
    sub_100569650(a1, 0);
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_102301C08);
  return v3 != 0;
}

void sub_100569598(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_102301C08);
  _Unwind_Resume(a1);
}

_QWORD *sub_1005695B8(uint64_t a1)
{
  *(_QWORD *)a1 = off_102143C48;
  CFRelease(*(CFTypeRef *)(a1 + 72));
  CFRelease(*(CFTypeRef *)(a1 + 80));
  sub_10011A56C((_QWORD *)(a1 + 120));
  sub_10011A56C((_QWORD *)(a1 + 104));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return sub_10011A56C((_QWORD *)a1);
}

void sub_10056962C(uint64_t a1)
{
  sub_1005695B8(a1);
  operator delete();
}

void sub_100569650(uint64_t a1, int a2)
{
  const char **v3;
  int v4;
  const char *v5;
  NSObject *v6;
  void *v7;
  int v8;
  uint64_t v9;
  int v10;
  stat *v11;
  NSObject *v12;
  const char *v13;
  gid_t v14;
  int v15;
  char **v16;
  char *v17;
  __CFString *v18;
  __CFString *v19;
  char *v20;
  __CFString *v21;
  const char *v22;
  const char *v23;
  NSObject *v24;
  char *v25;
  int v26;
  int *v27;
  char *v28;
  const char *v29;
  NSObject *v30;
  char *v31;
  int v32;
  int *v33;
  char *v34;
  uint64_t v35;
  int v36;
  int *v37;
  char *v38;
  int v39;
  int v40;
  char *v41;
  uint64_t v42;
  char *v43;
  int v44;
  int *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  stat v49;
  int v50;
  void *v51;
  __int16 v52;
  uid_t st_uid;
  __int16 v54;
  _BYTE v55[10];
  __int16 v56;
  int v57;
  __int16 v58;
  int st_mode;
  __int16 v60;
  int v61;
  stat buf[11];

  if (*(_BYTE *)(a1 + 96))
    return;
  if (a2)
  {
    v3 = (const char **)(a1 + 24);
    v4 = *(char *)(a1 + 47);
    v5 = (const char *)(a1 + 24);
    if (v4 < 0)
      v5 = *v3;
    if (stat(v5, &v49))
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021443E8);
      v6 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
      {
        v7 = v3;
        if (*(char *)(a1 + 47) < 0)
          v7 = (void *)*v3;
        v8 = *__error();
        buf[0].st_dev = 136315394;
        *(_QWORD *)&buf[0].st_mode = v7;
        WORD2(buf[0].st_ino) = 1024;
        *(_DWORD *)((char *)&buf[0].st_ino + 6) = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning could not check %s (errno %d)", (uint8_t *)buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021443E8);
        v9 = qword_1022A02D8;
        if (*(char *)(a1 + 47) < 0)
          v3 = (const char **)*v3;
        v10 = *__error();
        v50 = 136315394;
        v51 = v3;
        v52 = 1024;
        st_uid = v10;
        v11 = (stat *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 0, "#Warning could not check %s (errno %d)", (const char *)&v50, 18);
        sub_100512490("Generic", 1, 0, 2, "void CLPreferences::setFileAttributes(BOOL)", "%s\n");
LABEL_68:
        if (v11 != buf)
          free(v11);
        return;
      }
      return;
    }
    if (v49.st_uid == *(_DWORD *)(a1 + 88) && v49.st_gid == *(_DWORD *)(a1 + 92) && (~v49.st_mode & 0x1B6) == 0)
      return;
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021443E8);
    v12 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      v13 = (const char *)(a1 + 24);
      if (*(char *)(a1 + 47) < 0)
        v13 = *v3;
      v14 = *(_DWORD *)(a1 + 88);
      v15 = *(_DWORD *)(a1 + 92);
      buf[0].st_dev = 136316674;
      *(_QWORD *)&buf[0].st_mode = v13;
      WORD2(buf[0].st_ino) = 1024;
      *(_DWORD *)((char *)&buf[0].st_ino + 6) = v49.st_uid;
      HIWORD(buf[0].st_uid) = 1024;
      buf[0].st_gid = v14;
      LOWORD(buf[0].st_rdev) = 1024;
      *(dev_t *)((char *)&buf[0].st_rdev + 2) = v49.st_gid;
      *((_WORD *)&buf[0].st_rdev + 3) = 1024;
      LODWORD(buf[0].st_atimespec.tv_sec) = v15;
      WORD2(buf[0].st_atimespec.tv_sec) = 1024;
      *(_DWORD *)((char *)&buf[0].st_atimespec.tv_sec + 6) = v49.st_mode;
      WORD1(buf[0].st_atimespec.tv_nsec) = 1024;
      HIDWORD(buf[0].st_atimespec.tv_nsec) = 438;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning %s attributes incorrect (uid %d vs %d, gid %d vs %d, mode 0x%x vs 0x%x, resetting", (uint8_t *)buf, 0x30u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021443E8);
      if (*(char *)(a1 + 47) < 0)
        v3 = (const char **)*v3;
      v39 = *(_DWORD *)(a1 + 88);
      v40 = *(_DWORD *)(a1 + 92);
      v50 = 136316674;
      v51 = v3;
      v52 = 1024;
      st_uid = v49.st_uid;
      v54 = 1024;
      *(_DWORD *)v55 = v39;
      *(_WORD *)&v55[4] = 1024;
      *(_DWORD *)&v55[6] = v49.st_gid;
      v56 = 1024;
      v57 = v40;
      v58 = 1024;
      st_mode = v49.st_mode;
      v60 = 1024;
      v61 = 438;
      v41 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning %s attributes incorrect (uid %d vs %d, gid %d vs %d, mode 0x%x vs 0x%x, resetting", (const char *)&v50, 48, v49.st_dev, LODWORD(v49.st_ino), v49.st_uid, v49.st_rdev, LODWORD(v49.st_atimespec.tv_sec));
      sub_100512490("Generic", 1, 0, 2, "void CLPreferences::setFileAttributes(BOOL)", "%s\n", v41);
      if (v41 != (char *)buf)
        free(v41);
    }
  }
  v16 = (char **)(a1 + 24);
  v17 = (char *)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    v17 = *v16;
  v18 = (__CFString *)sub_1001A48D8(v17);
  if (v18)
  {
    v19 = v18;
    v20 = (char *)objc_msgSend(-[__CFString pathComponents](v18, "pathComponents"), "count") - 1;
    if ((unint64_t)v20 >= 2)
    {
      v21 = v19;
      do
      {
        v21 = (__CFString *)-[__CFString stringByDeletingLastPathComponent](v21, "stringByDeletingLastPathComponent");
        if ((-[__CFString isEqualToString:](v21, "isEqualToString:", CFSTR("/var")) & 1) == 0
          && (-[__CFString isEqualToString:](v21, "isEqualToString:", CFSTR("/tmp")) & 1) == 0
          && !lstat((const char *)-[__CFString fileSystemRepresentation](v21, "fileSystemRepresentation"), buf)
          && (buf[0].st_mode & 0xF000) == 0xA000)
        {
          sub_1018FFD48();
        }
        --v20;
      }
      while ((unint64_t)v20 > 1);
    }
    CFRelease(v19);
  }
  v22 = (const char *)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    v22 = *v16;
  if (!lstat(v22, &v49))
  {
    v23 = (const char *)(a1 + 24);
    if (*(char *)(a1 + 47) < 0)
      v23 = *v16;
    if (lchmod(v23, 0x1B6u))
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021443E8);
      v24 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        v25 = (char *)(a1 + 24);
        if (*(char *)(a1 + 47) < 0)
          v25 = *v16;
        v26 = *__error();
        v27 = __error();
        v28 = strerror(*v27);
        buf[0].st_dev = 136446722;
        *(_QWORD *)&buf[0].st_mode = v25;
        WORD2(buf[0].st_ino) = 1026;
        *(_DWORD *)((char *)&buf[0].st_ino + 6) = v26;
        HIWORD(buf[0].st_uid) = 2082;
        *(_QWORD *)&buf[0].st_gid = v28;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "could not lchmod %{public}s errno %{public}d (%{public}s)", (uint8_t *)buf, 0x1Cu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021443E8);
        v42 = qword_1022A02D8;
        v43 = (char *)(a1 + 24);
        if (*(char *)(a1 + 47) < 0)
          v43 = *v16;
        v44 = *__error();
        v45 = __error();
        v46 = strerror(*v45);
        v50 = 136446722;
        v51 = v43;
        v52 = 1026;
        st_uid = v44;
        v54 = 2082;
        *(_QWORD *)v55 = v46;
        LODWORD(v48) = 28;
        v47 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v42, 17, "could not lchmod %{public}s errno %{public}d (%{public}s)", &v50, v48);
        sub_100512490("Generic", 1, 0, 0, "void CLPreferences::setFileAttributes(BOOL)", "%s\n", v47);
        if (v47 != (char *)buf)
          free(v47);
      }
    }
    v29 = (const char *)(a1 + 24);
    if (*(char *)(a1 + 47) < 0)
      v29 = *v16;
    if (lchown(v29, *(_DWORD *)(a1 + 88), *(_DWORD *)(a1 + 92)))
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021443E8);
      v30 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        v31 = (char *)(a1 + 24);
        if (*(char *)(a1 + 47) < 0)
          v31 = *v16;
        v32 = *__error();
        v33 = __error();
        v34 = strerror(*v33);
        buf[0].st_dev = 136446722;
        *(_QWORD *)&buf[0].st_mode = v31;
        WORD2(buf[0].st_ino) = 1026;
        *(_DWORD *)((char *)&buf[0].st_ino + 6) = v32;
        HIWORD(buf[0].st_uid) = 2082;
        *(_QWORD *)&buf[0].st_gid = v34;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_FAULT, "could not lchown %{public}s errno %{public}d (%{public}s)", (uint8_t *)buf, 0x1Cu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021443E8);
        v35 = qword_1022A02D8;
        if (*(char *)(a1 + 47) < 0)
          v16 = (char **)*v16;
        v36 = *__error();
        v37 = __error();
        v38 = strerror(*v37);
        v50 = 136446722;
        v51 = v16;
        v52 = 1026;
        st_uid = v36;
        v54 = 2082;
        *(_QWORD *)v55 = v38;
        LODWORD(v48) = 28;
        v11 = (stat *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v35, 17, "could not lchown %{public}s errno %{public}d (%{public}s)", &v50, v48);
        sub_100512490("Generic", 1, 0, 0, "void CLPreferences::setFileAttributes(BOOL)", "%s\n");
        goto LABEL_68;
      }
    }
  }
}

uint64_t sub_100569F08(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

const __CFArray *sub_100569F10(CFStringRef *a1)
{
  const __CFArray *result;
  const __CFArray *v3;

  result = CFPreferencesCopyKeyList(a1[9], a1[10], kCFPreferencesCurrentHost);
  if (result)
  {
    v3 = result;
    CFPreferencesSetMultiple(0, result, a1[9], a1[10], kCFPreferencesCurrentHost);
    CFRelease(v3);
    return (const __CFArray *)((uint64_t (*)(CFStringRef *))(*a1)[26].data)(a1);
  }
  return result;
}

uint64_t sub_100569F90(CFStringRef *a1, CFStringRef key)
{
  CFPreferencesSetValue(key, 0, a1[9], a1[10], kCFPreferencesCurrentHost);
  return ((uint64_t (*)(CFStringRef *))(*a1)[26].data)(a1);
}

CFIndex sub_100569FD4(uint64_t a1)
{
  const __CFArray *v1;
  const __CFArray *v2;
  CFIndex Count;

  v1 = CFPreferencesCopyKeyList(*(CFStringRef *)(a1 + 72), *(CFStringRef *)(a1 + 80), kCFPreferencesCurrentHost);
  if (!v1)
    return 0;
  v2 = v1;
  Count = CFArrayGetCount(v1);
  CFRelease(v2);
  return Count;
}

uint64_t sub_10056A028()
{
  NSObject *v0;
  const char *v2;
  uint8_t *v3;
  _WORD v4[8];
  uint8_t buf[1640];

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021443E8);
  v0 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "***not supported***", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021443E8);
    v4[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "***not supported***", v4, 2);
    v3 = (uint8_t *)v2;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLPreferences::serialize(CFDataRef *) const", "%s\n", v2);
    if (v3 != buf)
      free(v3);
  }
  return 0;
}

uint64_t sub_10056A1B0()
{
  NSObject *v0;
  const char *v2;
  uint8_t *v3;
  _WORD v4[8];
  uint8_t buf[1640];

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021443E8);
  v0 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "***not supported***", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021443E8);
    v4[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "***not supported***", v4, 2);
    v3 = (uint8_t *)v2;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLPreferences::serializeBinary(CFDataRef *) const", "%s\n", v2);
    if (v3 != buf)
      free(v3);
  }
  return 0;
}

uint64_t sub_10056A338()
{
  NSObject *v0;
  const char *v2;
  uint8_t *v3;
  _WORD v4[8];
  uint8_t buf[1640];

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021443E8);
  v0 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "***not supported***", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021443E8);
    v4[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "***not supported***", v4, 2);
    v3 = (uint8_t *)v2;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLPreferences::deserialize(const CFDataRef)", "%s\n", v2);
    if (v3 != buf)
      free(v3);
  }
  return 0;
}

void sub_10056A4C0(const __CFString *a1, uint64_t a2)
{
  CFTypeRef cf;

  cf = 0;
  if ((*(unsigned int (**)(uint64_t, const __CFString *, CFTypeRef *))(*(_QWORD *)a2 + 912))(a2, a1, &cf))
  {
    sub_10052B0C8(a1, (const __CFString *)cf);
    CFRelease(cf);
  }
}

void sub_10056A51C(CFStringRef *a1)
{
  const __CFArray *v2;
  const __CFArray *v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];
  CFRange v9;

  if (qword_1022A02E0 != -1)
    dispatch_once(&qword_1022A02E0, &stru_102144408);
  if (os_log_type_enabled((os_log_t)qword_1022A02E8, OS_LOG_TYPE_DEBUG))
  {
    if (!sub_10052A950((uint64_t)(a1 + 15)))
      sub_10052AAA8((uint64_t)(a1 + 15));
    v2 = CFPreferencesCopyKeyList(a1[9], a1[10], kCFPreferencesCurrentHost);
    v3 = v2;
    if (v2 && CFArrayGetCount(v2))
    {
      v9.length = CFArrayGetCount(v3);
      v9.location = 0;
      CFArrayApplyFunction(v3, v9, (CFArrayApplierFunction)sub_10056A4C0, a1);
      CFRelease(v3);
      if (!sub_10052A950((uint64_t)(a1 + 13)))
        sub_10052AAA8((uint64_t)(a1 + 13));
    }
    else
    {
      if (qword_1022A02E0 != -1)
        dispatch_once(&qword_1022A02E0, &stru_102144408);
      v4 = qword_1022A02E8;
      if (os_log_type_enabled((os_log_t)qword_1022A02E8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "\t<empty>", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02E0 != -1)
          dispatch_once(&qword_1022A02E0, &stru_102144408);
        v7[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02E8, 2, "\t<empty>", v7, 2);
        v6 = (uint8_t *)v5;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLPreferences::print() const", "%s\n", v5);
        if (v6 != buf)
          free(v6);
      }
      if (v3)
        CFRelease(v3);
    }
  }
}

id sub_10056A79C(uint64_t a1)
{
  id v2;
  CFDictionaryRef v3;

  v2 = objc_msgSend((id)sub_10011A5AC(a1 + 104), "mutableCopy");
  v3 = CFPreferencesCopyMultiple(0, *(CFStringRef *)(a1 + 72), *(CFStringRef *)(a1 + 80), kCFPreferencesCurrentHost);
  objc_msgSend(v2, "addEntriesFromDictionary:", v3);
  CFRelease(v3);
  os_unfair_lock_lock((os_unfair_lock_t)&unk_102301C08);
  objc_msgSend(v2, "addEntriesFromDictionary:", sub_10011A5AC(a1 + 120));
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_102301C08);
  return v2;
}

void sub_10056A830(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_102301C08);
  _Unwind_Resume(a1);
}

void sub_10056A848()
{
  NSObject *v0;
  const char *v1;
  uint8_t *v2;
  _WORD v3[8];
  uint8_t buf[1640];

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021443E8);
  v0 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "***not supported***", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021443E8);
    v3[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "***not supported***", v3, 2);
    v2 = (uint8_t *)v1;
    sub_100512490("Generic", 1, 0, 0, "virtual void CLPreferences::merge(const CLPreferences &, BOOL)", "%s\n", v1);
    if (v2 != buf)
      free(v2);
  }
}

uint64_t sub_10056A9CC()
{
  NSObject *v0;
  const char *v2;
  uint8_t *v3;
  _WORD v4[8];
  uint8_t buf[1640];

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021443E8);
  v0 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "***not supported***", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021443E8);
    v4[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "***not supported***", v4, 2);
    v3 = (uint8_t *)v2;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLPreferences::loadFromFile(const char *)", "%s\n", v2);
    if (v3 != buf)
      free(v3);
  }
  return 0;
}

uint64_t sub_10056AB54()
{
  NSObject *v0;
  const char *v2;
  uint8_t *v3;
  _WORD v4[8];
  uint8_t buf[1640];

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021443E8);
  v0 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "***not supported***", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021443E8);
    v4[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "***not supported***", v4, 2);
    v3 = (uint8_t *)v2;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLPreferences::saveToFile(const char *) const", "%s\n", v2);
    if (v3 != buf)
      free(v3);
  }
  return 0;
}

uint64_t sub_10056ACDC()
{
  NSObject *v0;
  const char *v2;
  uint8_t *v3;
  _WORD v4[8];
  uint8_t buf[1640];

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021443E8);
  v0 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "***not supported***", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021443E8);
    v4[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "***not supported***", v4, 2);
    v3 = (uint8_t *)v2;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLPreferences::saveToBinaryFile(const char *) const", "%s\n", v2);
    if (v3 != buf)
      free(v3);
  }
  return 0;
}

void sub_10056AE64(uint64_t a1, CFStringRef key, CFPropertyListRef value)
{
  NSObject *v5;
  _BYTE *v6;
  int v7;
  void **v8;
  void **v9;
  void **v10;
  uint64_t v11;
  void **v12;
  int v13;
  void **v14;
  void **v15;
  void **v16;
  char *v17;
  char *v18;
  void *v19[2];
  char v20;
  void *__p[2];
  char v22;
  void *v23[2];
  char v24;
  _BYTE v25[12];
  __int16 v26;
  void **v27;
  __int16 v28;
  void **v29;
  uint8_t buf[4];
  _BYTE *v31;
  __int16 v32;
  void **v33;
  __int16 v34;
  void **v35;

  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021443E8);
    v5 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v6 = v25;
      sub_1001A486C(key, (uint64_t)v25);
      if (v28 < 0)
        v6 = *(_BYTE **)v25;
      sub_1001A486C(*(const __CFString **)(a1 + 72), (uint64_t)v23);
      v7 = v24;
      v8 = (void **)v23[0];
      sub_1001A486C(*(const __CFString **)(a1 + 80), (uint64_t)__p);
      v9 = v23;
      if (v7 < 0)
        v9 = v8;
      if (v22 >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      *(_DWORD *)buf = 136446722;
      v31 = v6;
      v32 = 2082;
      v33 = v9;
      v34 = 2082;
      v35 = v10;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Attempt to set key %{public}s for read-only preferences %{public}s/%{public}s!", buf, 0x20u);
      if (v22 < 0)
        operator delete(__p[0]);
      if (v24 < 0)
        operator delete(v23[0]);
      if (SHIBYTE(v28) < 0)
        operator delete(*(void **)v25);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021443E8);
      v11 = qword_1022A02D8;
      sub_1001A486C(key, (uint64_t)v23);
      if (v24 >= 0)
        v12 = v23;
      else
        v12 = (void **)v23[0];
      sub_1001A486C(*(const __CFString **)(a1 + 72), (uint64_t)__p);
      v13 = v22;
      v14 = (void **)__p[0];
      sub_1001A486C(*(const __CFString **)(a1 + 80), (uint64_t)v19);
      v15 = __p;
      if (v13 < 0)
        v15 = v14;
      if (v20 >= 0)
        v16 = v19;
      else
        v16 = (void **)v19[0];
      *(_DWORD *)v25 = 136446722;
      *(_QWORD *)&v25[4] = v12;
      v26 = 2082;
      v27 = v15;
      v28 = 2082;
      v29 = v16;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 17, "Attempt to set key %{public}s for read-only preferences %{public}s/%{public}s!", v25, 32);
      v18 = v17;
      if (v20 < 0)
        operator delete(v19[0]);
      if (v22 < 0)
        operator delete(__p[0]);
      if (v24 < 0)
        operator delete(v23[0]);
      sub_100512490("Generic", 1, 0, 0, "virtual void CLPreferences::setInternal(const CFStringRef, const CFTypeRef)", "%s\n", v18);
      if (v18 != (char *)buf)
        free(v18);
    }
  }
  else
  {
    CFPreferencesSetValue(key, value, *(CFStringRef *)(a1 + 72), *(CFStringRef *)(a1 + 80), kCFPreferencesCurrentHost);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 848))(a1);
  }
}

void sub_10056B1D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

void sub_10056B244()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_1022A02D0 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021443E8);
    }
    v1 = qword_1022A02D8;
    if (os_signpost_enabled((os_log_t)qword_1022A02D8))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021443E8);
    }
    v2 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLPreferences.mm", 327, "containsInternal");
LABEL_11:
    dispatch_once(&qword_1022A02D0, &stru_1021443E8);
  }
}

const __CFString *sub_10056B464()
{
  return CFSTR("OtherPref");
}

void sub_10056B470(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_10056B49C(id a1)
{
  qword_1022A02E8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Direct_deprecated");
}

void sub_10056B4C8()
{
  operator new();
}

void sub_10056B560()
{
  operator delete();
}

uint64_t sub_10056B584()
{
  if (qword_102301C10 != -1)
    dispatch_once(&qword_102301C10, &stru_102144428);
  return qword_1023108C8;
}

_QWORD *sub_10056B5C8(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_102144458;
  v2 = (uint64_t)(a1 + 5);
  sub_10056F484(a1 + 13);
  sub_10056F484(a1 + 7);
  sub_100261F44(v2);
  return sub_1009BAD18(a1);
}

void sub_10056B614(_QWORD *a1)
{
  sub_10056B5C8(a1);
  operator delete();
}

BOOL sub_10056B638()
{
  const __CFDictionary *v0;
  io_service_t MatchingService;
  io_service_t v2;

  v0 = IOServiceMatching("AppleEmbeddedBluetoothSensors");
  MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v0);
  v2 = MatchingService;
  if (MatchingService)
    IOObjectRelease(MatchingService);
  return v2 != 0;
}

void sub_10056B68C(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  NSObject *v9;
  _UNKNOWN **v10;
  _UNKNOWN **v11;
  NSObject *v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int v16;
  const char *v17;
  uint8_t *v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  BOOL v22;
  _QWORD v23[6];
  char v24;
  _DWORD v25[4];
  uint8_t buf[8];
  std::__shared_weak_count *v27;

  if (sub_10056B638())
  {
    if (!*(_QWORD *)(a1 + 40))
    {
      v4 = sub_100127B9C();
      v23[0] = _NSConcreteStackBlock;
      v23[1] = 3321888768;
      v23[2] = sub_10056BAE4;
      v23[3] = &unk_102144488;
      v23[4] = a1;
      v23[5] = 0x100000FF00;
      v24 = 0;
      sub_1000A50A8(v4, (uint64_t)v23);
    }
    v22 = 0;
    v5 = sub_100127B9C();
    sub_100081C10(v5, buf);
    sub_1001E4874(*(uint64_t *)buf, "DeviceMotionLiteForceDebug", &v22);
    v6 = v27;
    if (v27)
    {
      p_shared_owners = (unint64_t *)&v27->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    if (*(_BYTE *)(a1 + 170) && v22 && a2)
    {
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_1021444D0);
      v9 = qword_10229FD28;
      if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Forcing debug mode", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD20 != -1)
          dispatch_once(&qword_10229FD20, &stru_1021444D0);
        LOWORD(v25[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 0, "Forcing debug mode", v25, 2);
        v20 = (uint8_t *)v19;
        sub_100512490("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::configureDeviceMotionLite(CLMotionTypeDeviceMotionLiteConfigure)", "%s\n", v19);
        if (v20 != buf)
          free(v20);
      }
      v10 = &off_10221B150;
    }
    else
    {
      v11 = &off_10221B138;
      if (a2 == 1)
        v11 = &off_10221B168;
      if (a2 == 2)
        v10 = &off_10221B150;
      else
        v10 = v11;
    }
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_1021444D0);
    v12 = qword_10229FD28;
    if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_INFO))
    {
      v13 = objc_msgSend(v10, "intValue");
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Setting DeviceMotionLite ReportInterval to %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_1021444D0);
      v15 = qword_10229FD28;
      v16 = objc_msgSend(v10, "intValue");
      v25[0] = 67240192;
      v25[1] = v16;
      LODWORD(v21) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v15, 1, "Setting DeviceMotionLite ReportInterval to %{public}d", v25, v21);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::configureDeviceMotionLite(CLMotionTypeDeviceMotionLiteConfigure)", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    (*(void (**)(_QWORD, const __CFString *, _UNKNOWN **))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), CFSTR("ReportInterval"), v10);
    v14 = *(uint64_t **)(a1 + 40);
    if (a2)
      sub_100A0A4BC(v14, (uint64_t)sub_10056BB9C, a1);
    else
      sub_100A0A4BC(v14, 0, 0);
  }
}

void sub_10056BAC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10056BAE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  __int128 v8;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(uint64_t **)(v1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_DWORD *)(a1 + 48);
  sub_1018E4078(v2, (uint64_t)&v6, (uint64_t *)&v8);
  sub_1002B7674(v1 + 40, &v8);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
  if (*((_QWORD *)&v8 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  sub_100A0A4BC(*(uint64_t **)(v1 + 40), (uint64_t)sub_10056BB9C, v1);
  sub_100A0A6B8(*(_QWORD *)(v1 + 40), (uint64_t)sub_10056BBA0, v1);
  sub_10056BC00(v1);
}

void sub_10056BBA0(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];

  v2 = sub_100127B9C();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10056BE08;
  v3[3] = &unk_10212ECA0;
  v3[4] = a1;
  sub_1000A50A8(v2, (uint64_t)v3);
}

void sub_10056BC00(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  const char *v4;
  const char *v5;
  uint8_t *v6;
  int v7;
  const char *v8;
  uint8_t buf[4];
  const char *v10;

  *(_BYTE *)(a1 + 170) = objc_msgSend((id)(*(uint64_t (**)(_QWORD, const __CFString *))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), CFSTR("UsesCompass")), "BOOLValue");
  if (qword_10229FD20 != -1)
    dispatch_once(&qword_10229FD20, &stru_1021444D0);
  v2 = qword_10229FD28;
  if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(a1 + 170))
      v3 = "is";
    else
      v3 = "is not";
    *(_DWORD *)buf = 136446210;
    v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "DeviceMotionLite %{public}s using compass", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_1021444D0);
    if (*(_BYTE *)(a1 + 170))
      v4 = "is";
    else
      v4 = "is not";
    v7 = 136446210;
    v8 = v4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 0, "DeviceMotionLite %{public}s using compass", &v7, 12);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::refreshUsingCompass()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
}

void sub_10056BE08(uint64_t a1)
{
  sub_10056BC00(*(_QWORD *)(a1 + 32));
}

uint64_t sub_10056BE10(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unsigned __int8 v6;
  NSObject *v7;
  int v8;
  int v9;
  int32x2_t v10;
  float32x2_t v11;
  uint64_t v12;
  char v13;
  float32x2_t v14;
  char v15;
  __int16 *v16;
  int32x2_t v17;
  NSObject *v18;
  uint64_t v19;
  float v20;
  uint64_t v22;
  const char *v23;
  char *v24;
  int v25;
  int v26;
  const char *v27;
  char *v28;
  uint64_t v29;
  double v30[2];
  uint64_t v31;
  unint64_t v32;
  float32x2_t v33;
  uint64_t v34;
  __int128 buf;
  float v36;
  _BYTE v37[12];

  v6 = *(_BYTE *)(a3 + 1) - *(_BYTE *)(a1 + 153);
  if (v6 >= 2u)
  {
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_1021444D0);
    v7 = qword_10229FD28;
    if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *(unsigned __int8 *)(a1 + 153);
      v9 = *(unsigned __int8 *)(a3 + 1);
      LODWORD(buf) = 67240448;
      DWORD1(buf) = v8;
      WORD4(buf) = 1026;
      *(_DWORD *)((char *)&buf + 10) = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Jump in message sequence number: last=%{public}d, this=%{public}d", (uint8_t *)&buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_1021444D0);
      v25 = *(unsigned __int8 *)(a1 + 153);
      v26 = *(unsigned __int8 *)(a3 + 1);
      LODWORD(v31) = 67240448;
      HIDWORD(v31) = v25;
      LOWORD(v32) = 1026;
      *(_DWORD *)((char *)&v32 + 2) = v26;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FD28, 0, "Jump in message sequence number: last=%{public}d, this=%{public}d", &v31, 14);
      v28 = (char *)v27;
      sub_100512490("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::handleRawSensorV2Msg(uint64_t, RawSensorV2Msg &)", "%s\n", v27);
      if (v28 != (char *)&buf)
        free(v28);
    }
  }
  *(_BYTE *)(a1 + 153) = *(_BYTE *)(a3 + 1);
  v34 = 0;
  v31 = *(_QWORD *)(a1 + 160);
  v32 = a2;
  v10.i32[0] = *(__int16 *)(a3 + 6);
  v10.i32[1] = *(__int16 *)(a3 + 8);
  v11 = (float32x2_t)vdup_n_s32(0x37800000u);
  v33 = vmul_f32(vmul_f32(vcvt_f32_s32(v10), (float32x2_t)0x4200000042000000), v11);
  *(float *)&v34 = (float)((float)*(__int16 *)(a3 + 10) * 32.0) * 0.000015259;
  *(double *)&buf = (double)a2;
  sub_10012AC18(a1, 4, (uint64_t)&v31, 32);
  v12 = 0;
  v13 = 1;
  v14 = (float32x2_t)vdup_n_s32(0x457A0000u);
  do
  {
    v15 = v13;
    *(_QWORD *)&buf = *(_QWORD *)(a1 + 160) + 5000 * v12;
    *((_QWORD *)&buf + 1) = a2;
    v36 = (float)*(__int16 *)(a3 + 24) / 100.0;
    v16 = (__int16 *)(a3 + 6 * v12);
    v17.i32[0] = v16[6];
    v17.i32[1] = v16[7];
    *(float32x2_t *)v37 = vmul_f32(vmul_f32(vcvt_f32_s32(v17), v14), v11);
    *(float *)&v37[8] = (float)((float)v16[8] * 4000.0) * 0.000015259;
    v30[0] = (double)a2;
    sub_10012AC18(a1, 5, (uint64_t)&buf, 32);
    v13 = 0;
    v12 = 1;
  }
  while ((v15 & 1) != 0);
  *(_QWORD *)(a1 + 160) += 10000 * v6;
  if (qword_10229FD20 != -1)
    dispatch_once(&qword_10229FD20, &stru_1021444D0);
  v18 = qword_10229FD28;
  if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
  {
    v19 = *(_QWORD *)(a1 + 160);
    LODWORD(buf) = 134349056;
    *(_QWORD *)((char *)&buf + 4) = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "Updating mag timestamp to %{public}llu", (uint8_t *)&buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_1021444D0);
    v22 = *(_QWORD *)(a1 + 160);
    LODWORD(v30[0]) = 134349056;
    *(_QWORD *)((char *)v30 + 4) = v22;
    LODWORD(v29) = 12;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "Updating mag timestamp to %{public}llu", v30, v29);
    v24 = (char *)v23;
    sub_100512490("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::handleRawSensorV2Msg(uint64_t, RawSensorV2Msg &)", "%s\n", v23);
    if (v24 != (char *)&buf)
      free(v24);
  }
  *(_QWORD *)&v37[4] = 0;
  *(_QWORD *)&buf = *(_QWORD *)(a1 + 160);
  *((_QWORD *)&buf + 1) = a2;
  v20 = (float)*(__int16 *)(a3 + 28) * 0.075;
  v36 = (float)*(__int16 *)(a3 + 26) * 0.075;
  *(float *)v37 = v20;
  *(float *)&v37[4] = (float)*(__int16 *)(a3 + 30) * 0.075;
  v30[0] = (double)a2;
  return sub_10012AC18(a1, 6, (uint64_t)&buf, 32);
}

float sub_10056C300@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  float v4;
  float v5;
  float v6;
  double v7;
  float v8;
  int v9;
  float result;

  v4 = *(float *)(a3 + 4);
  v5 = *(float *)(a3 + 8);
  v6 = sqrtf(fmaxf((float)((float)(1.0 - (float)(*(float *)a3 * *(float *)a3)) - (float)(v4 * v4)) - (float)(v5 * v5), 0.0));
  v7 = *(float *)a3;
  v8 = (float)*(__int16 *)(a3 + 20) / 1000.0;
  v9 = *(__int16 *)(a3 + 22);
  *(_OWORD *)(a4 + 88) = 0u;
  *(_OWORD *)(a4 + 104) = 0u;
  *(double *)a4 = v6;
  *(double *)(a4 + 8) = v7;
  *(double *)(a4 + 16) = v4;
  *(double *)(a4 + 24) = v5;
  *(float32x4_t *)(a4 + 32) = vdivq_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)(a3 + 12))), (float32x4_t)vdupq_n_s32(0x447A0000u));
  result = (float)v9 / 1000.0;
  *(float *)(a4 + 48) = v8;
  *(float *)(a4 + 52) = result;
  *(_QWORD *)(a4 + 56) = 0;
  *(_QWORD *)(a4 + 64) = 0;
  *(_QWORD *)(a4 + 72) = 0;
  *(_QWORD *)(a4 + 80) = a2;
  *(_BYTE *)(a4 + 88) = *(_BYTE *)(a1 + 170);
  *(_QWORD *)(a4 + 100) = 0;
  *(_QWORD *)(a4 + 92) = 0;
  *(_QWORD *)(a4 + 107) = 0;
  return result;
}

void sub_10056C3A4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  int v6;
  NSObject *v7;
  int v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  _DWORD v12[2];
  __int16 v13;
  int v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  int v18;

  v6 = *(_BYTE *)(a3 + 24) & 0xC0;
  if (qword_10229FD20 != -1)
    dispatch_once(&qword_10229FD20, &stru_1021444D0);
  v7 = qword_10229FD28;
  if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
  {
    v8 = *(unsigned __int8 *)(a3 + 24);
    *(_DWORD *)buf = 67240448;
    v16 = v6;
    v17 = 1026;
    v18 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "FusedWithStatus msgType,%{public}u,infoByte,%{public}u", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_1021444D0);
    v9 = *(unsigned __int8 *)(a3 + 24);
    v12[0] = 67240448;
    v12[1] = v6;
    v13 = 1026;
    v14 = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "FusedWithStatus msgType,%{public}u,infoByte,%{public}u", v12, 14);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::handleFusedSizedStruct(uint64_t, FusedStructWithStatus &)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  if (v6 == 64)
    sub_10056C5A4(a1, a2, a3);
  else
    sub_10056CF14(a1, a2, a3);
}

void sub_10056C5A4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  int v6;
  NSObject *v7;
  int v8;
  uint64_t v9;
  void **v10;
  void **v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  NSObject *v18;
  int v19;
  void **v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t i;
  int64x2_t v25;
  uint64_t v26;
  char *v27;
  NSObject *v28;
  NSObject *v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  const char *v39;
  char *v40;
  int v41;
  const char *v42;
  char *v43;
  uint64_t v44;
  const char *v45;
  char *v46;
  const char *v47;
  char *v48;
  char *v49;
  const char *v50;
  char *v51;
  uint64_t v52;
  int v53;
  char *v54;
  char __str[4];
  _BYTE v56[10];
  __int16 v57;
  uint64_t v58;
  uint8_t v59[240];
  _BYTE buf[14];
  __int16 v61;
  uint64_t v62;

  v6 = *(unsigned __int8 *)(a3 + 25);
  if (qword_10229FD20 != -1)
    dispatch_once(&qword_10229FD20, &stru_1021444D0);
  v7 = qword_10229FD28;
  if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_INFO))
  {
    v8 = *(unsigned __int8 *)(a1 + 168);
    v9 = *(_QWORD *)(a1 + 144);
    *(_DWORD *)buf = 67240704;
    *(_DWORD *)&buf[4] = v6;
    *(_WORD *)&buf[8] = 1026;
    *(_DWORD *)&buf[10] = v8;
    v61 = 2050;
    v62 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "On-start data from remote seqNo,%{public}u,fLastOnStartDebugSeqNo,%{public}u,bufferSize,%{public}zu", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_1021444D0);
    v37 = *(unsigned __int8 *)(a1 + 168);
    v38 = *(_QWORD *)(a1 + 144);
    *(_DWORD *)__str = 67240704;
    *(_DWORD *)v56 = v6;
    *(_WORD *)&v56[4] = 1026;
    *(_DWORD *)&v56[6] = v37;
    v57 = 2050;
    v58 = v38;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 1, "On-start data from remote seqNo,%{public}u,fLastOnStartDebugSeqNo,%{public}u,bufferSize,%{public}zu", __str, 24);
    v40 = (char *)v39;
    sub_100512490("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::handleOnStartFragment(uint64_t, FusedStructWithStatus &)", "%s\n", v39);
    if (v40 != buf)
      free(v40);
  }
  v10 = *(void ***)(a1 + 112);
  if (v6)
  {
    v11 = *(void ***)(a1 + 120);
    goto LABEL_16;
  }
  v11 = *(void ***)(a1 + 120);
  *(_QWORD *)(a1 + 144) = 0;
  v12 = (char *)v11 - (char *)v10;
  if ((unint64_t)((char *)v11 - (char *)v10) >= 0x11)
  {
    do
    {
      operator delete(*v10);
      v11 = *(void ***)(a1 + 120);
      v10 = (void **)(*(_QWORD *)(a1 + 112) + 8);
      *(_QWORD *)(a1 + 112) = v10;
      v12 = (char *)v11 - (char *)v10;
    }
    while ((unint64_t)((char *)v11 - (char *)v10) > 0x10);
  }
  v13 = v12 >> 3;
  if (v13 == 1)
  {
    v14 = 2048;
    goto LABEL_14;
  }
  if (v13 == 2)
  {
    v14 = 4096;
LABEL_14:
    *(_QWORD *)(a1 + 136) = v14;
  }
  *(_BYTE *)(a1 + 168) = 0;
LABEL_16:
  v15 = *(_QWORD *)(a1 + 136) + *(_QWORD *)(a1 + 144);
  v16 = (char *)&v10[v15 >> 12];
  if (v11 == v10)
    v17 = 0;
  else
    v17 = *(_QWORD *)v16 + (v15 & 0xFFF);
  sub_10056F518((int64x2_t *)(a1 + 104), v16, v17, (char *)a3, (char *)(a3 + 24), 0x18uLL);
  if ((v6 - *(_BYTE *)(a1 + 168)) >= 2u)
  {
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_1021444D0);
    v18 = qword_10229FD28;
    if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEFAULT))
    {
      v19 = *(unsigned __int8 *)(a1 + 168);
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)&buf[4] = v6;
      *(_WORD *)&buf[8] = 1026;
      *(_DWORD *)&buf[10] = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Jump in on-start sequence numbers last,%{public}u,this,%{public}u", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_1021444D0);
      v41 = *(unsigned __int8 *)(a1 + 168);
      *(_DWORD *)__str = 67240448;
      *(_DWORD *)v56 = v6;
      *(_WORD *)&v56[4] = 1026;
      *(_DWORD *)&v56[6] = v41;
      LODWORD(v52) = 14;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 0, "Jump in on-start sequence numbers last,%{public}u,this,%{public}u", __str, v52);
      v43 = (char *)v42;
      sub_100512490("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::handleOnStartFragment(uint64_t, FusedStructWithStatus &)", "%s\n", v42);
      if (v43 != buf)
        free(v43);
    }
    v20 = *(void ***)(a1 + 112);
    v21 = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 144) = 0;
    v22 = v21 - (_QWORD)v20;
    if (v22 >= 0x11)
    {
      do
      {
        operator delete(*v20);
        v23 = *(_QWORD *)(a1 + 120);
        v20 = (void **)(*(_QWORD *)(a1 + 112) + 8);
        *(_QWORD *)(a1 + 112) = v20;
        v22 = v23 - (_QWORD)v20;
      }
      while (v22 > 0x10);
    }
    goto LABEL_46;
  }
  if (*(_QWORD *)(a1 + 144) >= 0xF0uLL)
  {
    for (i = 0; i != 240; ++i)
    {
      v25 = vaddq_s64(*(int64x2_t *)(a1 + 136), (int64x2_t)xmmword_101B9DFC0);
      v59[i] = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + ((*(_QWORD *)(a1 + 136) >> 9) & 0x7FFFFFFFFFFFF8))
                        + (*(_QWORD *)(a1 + 136) & 0xFFFLL));
      *(int64x2_t *)(a1 + 136) = v25;
      sub_1005707AC(a1 + 104, 1);
    }
    *(double *)buf = (double)a2;
    sub_10012AC18(a1, 9, (uint64_t)v59, 240);
    v26 = 0;
    v27 = __str;
    do
    {
      snprintf(v27, 3uLL, "%02hhX", v59[v26++]);
      v27 += 2;
    }
    while (v26 != 240);
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_1021444D0);
    v28 = qword_10229FD28;
    if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = __str;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "OnStartMsg: %{public}s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_1021444D0);
      v53 = 136446210;
      v54 = __str;
      LODWORD(v52) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 0, "OnStartMsg: %{public}s", &v53, v52);
      v48 = (char *)v47;
      sub_100512490("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::handleOnStartFragment(uint64_t, FusedStructWithStatus &)", "%s\n", v47);
      if (v48 != buf)
        free(v48);
    }
    if (!*(_QWORD *)(a1 + 144))
      goto LABEL_57;
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_1021444D0);
    v29 = qword_10229FD28;
    if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_INFO))
    {
      v30 = *(_QWORD *)(a1 + 144);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v30;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "Discarding %{public}zu bytes from onstart packet", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_1021444D0);
      v49 = *(char **)(a1 + 144);
      v53 = 134349056;
      v54 = v49;
      LODWORD(v52) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 1, "Discarding %{public}zu bytes from onstart packet", &v53, v52);
      v51 = (char *)v50;
      sub_100512490("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::handleOnStartFragment(uint64_t, FusedStructWithStatus &)", "%s\n", v50);
      if (v51 != buf)
        free(v51);
    }
    v31 = *(void ***)(a1 + 112);
    v32 = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 144) = 0;
    v22 = v32 - (_QWORD)v31;
    if (v22 >= 0x11)
    {
      do
      {
        operator delete(*v31);
        v33 = *(_QWORD *)(a1 + 120);
        v31 = (void **)(*(_QWORD *)(a1 + 112) + 8);
        *(_QWORD *)(a1 + 112) = v31;
        v22 = v33 - (_QWORD)v31;
      }
      while (v22 > 0x10);
    }
LABEL_46:
    if (v22 >> 3 == 1)
    {
      v34 = 2048;
    }
    else
    {
      if (v22 >> 3 != 2)
      {
LABEL_57:
        *(_BYTE *)(a1 + 168) = 0;
        return;
      }
      v34 = 4096;
    }
    *(_QWORD *)(a1 + 136) = v34;
    goto LABEL_57;
  }
  if (qword_10229FD20 != -1)
    dispatch_once(&qword_10229FD20, &stru_1021444D0);
  v35 = qword_10229FD28;
  if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
  {
    v36 = *(_QWORD *)(a1 + 144);
    *(_DWORD *)buf = 134349056;
    *(_QWORD *)&buf[4] = v36;
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "Accumulated %{public}zu bytes for onstart packet", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_1021444D0);
    v44 = *(_QWORD *)(a1 + 144);
    *(_DWORD *)__str = 134349056;
    *(_QWORD *)v56 = v44;
    LODWORD(v52) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "Accumulated %{public}zu bytes for onstart packet", __str, v52);
    v46 = (char *)v45;
    sub_100512490("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::handleOnStartFragment(uint64_t, FusedStructWithStatus &)", "%s\n", v45);
    if (v46 != buf)
      free(v46);
  }
  *(_BYTE *)(a1 + 168) = v6;
}

uint64_t sub_10056CF14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v6;
  __int16 v7;
  unsigned int v8;
  int v9;
  int v10;
  NSObject *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  const char *v16;
  NSObject *v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  NSObject *v22;
  const char *v24;
  char *v25;
  int v26;
  int v27;
  char *v28;
  double v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  int v38;
  int v39;
  _BYTE v40[10];
  uint64_t v41;
  _BYTE v42[10];
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  double v46;
  __int16 v47;
  double v48;
  __int16 v49;
  double v50;
  __int16 v51;
  double v52;
  __int16 v53;
  double v54;
  __int16 v55;
  double v56;
  __int16 v57;
  int v58;
  __int16 v59;
  int v60;
  __int16 v61;
  int v62;
  __int16 v63;
  int v64;
  __int16 v65;
  int v66;
  __int16 v67;
  int v68;
  __int16 v69;
  int v70;
  __int16 v71;
  int v72;
  __int16 v73;
  int v74;
  __int16 v75;
  uint64_t v76;
  _BYTE buf[14];
  uint64_t v78;
  _BYTE v79[10];
  __int16 v80;
  uint64_t v81;
  __int16 v82;
  double v83;
  __int16 v84;
  double v85;
  __int16 v86;
  double v87;
  __int16 v88;
  double v89;
  __int16 v90;
  double v91;
  __int16 v92;
  double v93;
  __int16 v94;
  int v95;
  __int16 v96;
  int v97;
  __int16 v98;
  int v99;
  __int16 v100;
  int v101;
  __int16 v102;
  int v103;
  __int16 v104;
  int v105;
  __int16 v106;
  int v107;
  __int16 v108;
  int v109;
  __int16 v110;
  int v111;
  __int16 v112;
  uint64_t v113;

  v37 = 0;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v30 = 0u;
  sub_10056C300(a1, a2, a3, (uint64_t)&v30);
  v7 = *(_WORD *)(a3 + 24);
  v6 = (unsigned __int8 *)(a3 + 24);
  LOWORD(v37) = v7;
  BYTE2(v37) = v6[2];
  v8 = *v6;
  v9 = (v8 >> 4) & 3;
  v10 = v8 & 0xF;
  LOWORD(v8) = ((v8 >> 4) & 3) - *(unsigned __int8 *)(a1 + 169) + 4;
  if ((v8 - ((v8 + ((unsigned __int16)(v8 & 0xC000) >> 14)) & 0xFC)) == 1)
  {
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_1021444D0);
    v11 = qword_10229FD28;
    if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
    {
      v12 = *(unsigned __int8 *)(a1 + 169);
      v13 = *v6;
      *(_DWORD *)buf = 67240960;
      *(_DWORD *)&buf[4] = v12;
      *(_WORD *)&buf[8] = 1026;
      *(_DWORD *)&buf[10] = v9;
      LOWORD(v78) = 1026;
      *(_DWORD *)((char *)&v78 + 2) = v10;
      HIWORD(v78) = 1026;
      *(_DWORD *)v79 = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "handleFusedStruct(WithStatus) fLastFusedSeqNo,%{public}u,seqNo,%{public}u,rtc,%{public}u,byte,%{public}u", buf, 0x1Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_1021444D0);
      v14 = *(unsigned __int8 *)(a1 + 169);
      v15 = *v6;
      v39 = 67240960;
      *(_DWORD *)v40 = v14;
      *(_WORD *)&v40[4] = 1026;
      *(_DWORD *)&v40[6] = v9;
      LOWORD(v41) = 1026;
      *(_DWORD *)((char *)&v41 + 2) = v10;
      HIWORD(v41) = 1026;
      *(_DWORD *)v42 = v15;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "handleFusedStruct(WithStatus) fLastFusedSeqNo,%{public}u,seqNo,%{public}u,rtc,%{public}u,byte,%{public}u", &v39, 26);
LABEL_28:
      v28 = (char *)v16;
      sub_100512490("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::handleFusedStruct(uint64_t, FusedStructWithStatus &)", "%s\n", v16);
      if (v28 != buf)
        free(v28);
    }
  }
  else
  {
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_1021444D0);
    v17 = qword_10229FD28;
    if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEFAULT))
    {
      v18 = *(unsigned __int8 *)(a1 + 169);
      v19 = *v6;
      *(_DWORD *)buf = 67240960;
      *(_DWORD *)&buf[4] = v18;
      *(_WORD *)&buf[8] = 1026;
      *(_DWORD *)&buf[10] = v9;
      LOWORD(v78) = 1026;
      *(_DWORD *)((char *)&v78 + 2) = v10;
      HIWORD(v78) = 1026;
      *(_DWORD *)v79 = v19;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Jump in fused packet sequence number last,%{public}u,this,%{public}u,rtc,%{public}u,byte,%{public}u", buf, 0x1Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_1021444D0);
      v26 = *(unsigned __int8 *)(a1 + 169);
      v27 = *v6;
      v39 = 67240960;
      *(_DWORD *)v40 = v26;
      *(_WORD *)&v40[4] = 1026;
      *(_DWORD *)&v40[6] = v9;
      LOWORD(v41) = 1026;
      *(_DWORD *)((char *)&v41 + 2) = v10;
      HIWORD(v41) = 1026;
      *(_DWORD *)v42 = v27;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 0, "Jump in fused packet sequence number last,%{public}u,this,%{public}u,rtc,%{public}u,byte,%{public}u", &v39, 26);
      goto LABEL_28;
    }
  }
  *(_BYTE *)(a1 + 169) = v9;
  v20 = BYTE2(v37);
  v21 = BYTE1(v37);
  if (qword_10229FD20 != -1)
    dispatch_once(&qword_10229FD20, &stru_1021444D0);
  v22 = qword_10229FD28;
  if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134222848;
    *(_QWORD *)&buf[4] = *((_QWORD *)&v30 + 1);
    *(_WORD *)&buf[12] = 2048;
    v78 = v31;
    *(_WORD *)v79 = 2048;
    *(_QWORD *)&v79[2] = *((_QWORD *)&v31 + 1);
    v80 = 2048;
    v81 = v30;
    v82 = 2048;
    v83 = *(float *)&v32;
    v84 = 2048;
    v85 = *((float *)&v32 + 1);
    v86 = 2048;
    v87 = *((float *)&v32 + 2);
    v88 = 2048;
    v89 = *((float *)&v32 + 3);
    v90 = 2048;
    v91 = *(float *)&v33;
    v92 = 2048;
    v93 = *((float *)&v33 + 1);
    v94 = 1024;
    v95 = (v21 >> 4) & 1;
    v96 = 1024;
    v97 = (v21 >> 3) & 1;
    v98 = 1024;
    v99 = (v21 >> 2) & 1;
    v100 = 1024;
    v101 = v20 & 1;
    v102 = 1024;
    v103 = (v21 >> 1) & 1;
    v104 = 1024;
    v105 = v21 & 1;
    v106 = 1024;
    v107 = (v20 >> 2) & 1;
    v108 = 1024;
    v109 = (v20 >> 1) & 1;
    v110 = 1024;
    v111 = v9;
    v112 = 2048;
    v113 = a2;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "[CLDeviceMotionLiteService] q.x,%.10f,q.y,%.10f,q.z,%.10f,q.w,%.10f,userAccel.x,%.10f,userAccel.y,%.10f,userAccel.z,%.10f,rotationRate.x,%.10f,rotationRate.y,%.10f,rotationRate.z,%.10f,biasEstimation,%d,yawCorrection,%d,gravityCorrection,%d,initialized,%d,accelSaturated,%d,gyroSaturated,%d,compassCalibration,%d,gyroCalibration,%d,seqNo,%d,timestamp,%llu", buf, 0xA6u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_1021444D0);
    v39 = 134222848;
    *(_QWORD *)v40 = *((_QWORD *)&v30 + 1);
    *(_WORD *)&v40[8] = 2048;
    v41 = v31;
    *(_WORD *)v42 = 2048;
    *(_QWORD *)&v42[2] = *((_QWORD *)&v31 + 1);
    v43 = 2048;
    v44 = v30;
    v45 = 2048;
    v46 = *(float *)&v32;
    v47 = 2048;
    v48 = *((float *)&v32 + 1);
    v49 = 2048;
    v50 = *((float *)&v32 + 2);
    v51 = 2048;
    v52 = *((float *)&v32 + 3);
    v53 = 2048;
    v54 = *(float *)&v33;
    v55 = 2048;
    v56 = *((float *)&v33 + 1);
    v57 = 1024;
    v58 = (v21 >> 4) & 1;
    v59 = 1024;
    v60 = (v21 >> 3) & 1;
    v61 = 1024;
    v62 = (v21 >> 2) & 1;
    v63 = 1024;
    v64 = v20 & 1;
    v65 = 1024;
    v66 = (v21 >> 1) & 1;
    v67 = 1024;
    v68 = v21 & 1;
    v69 = 1024;
    v70 = (v20 >> 2) & 1;
    v71 = 1024;
    v72 = (v20 >> 1) & 1;
    v73 = 1024;
    v74 = v9;
    v75 = 2048;
    v76 = a2;
    LODWORD(v29) = 166;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "[CLDeviceMotionLiteService] q.x,%.10f,q.y,%.10f,q.z,%.10f,q.w,%.10f,userAccel.x,%.10f,userAccel.y,%.10f,userAccel.z,%.10f,rotationRate.x,%.10f,rotationRate.y,%.10f,rotationRate.z,%.10f,biasEstimation,%d,yawCorrection,%d,gravityCorrection,%d,initialized,%d,accelSaturated,%d,gyroSaturated,%d,compassCalibration,%d,gyroCalibration,%d,seqNo,%d,timestamp,%llu", COERCE_DOUBLE(&v39), v29, *(double *)&v30, *((double *)&v30 + 1), *(double *)&v31, *((double *)&v31 + 1), *(double *)&v32, *((double *)&v32 + 1), *(double *)&v33,
      *((double *)&v33 + 1),
      (_DWORD)v34,
      DWORD2(v34),
      (_DWORD)v35,
      DWORD2(v35),
      (_DWORD)v36,
      DWORD2(v36),
      v37,
      v38);
    v25 = (char *)v24;
    sub_100512490("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::handleFusedStruct(uint64_t, FusedStructWithStatus &)", "%s\n", v24);
    if (v25 != buf)
      free(v25);
  }
  *(double *)buf = (double)(unint64_t)a2;
  return sub_10012AC18(a1, 0, (uint64_t)&v30, 120);
}

uint64_t sub_10056D60C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v5;
  const char *v7;
  char *v8;
  double v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  double v27;
  __int16 v28;
  double v29;
  __int16 v30;
  double v31;
  __int16 v32;
  double v33;
  __int16 v34;
  double v35;
  __int16 v36;
  double v37;
  __int16 v38;
  uint64_t v39;
  _BYTE buf[12];
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  double v48;
  __int16 v49;
  double v50;
  __int16 v51;
  double v52;
  __int16 v53;
  double v54;
  __int16 v55;
  double v56;
  __int16 v57;
  double v58;
  __int16 v59;
  uint64_t v60;

  v17 = 0;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v10 = 0u;
  sub_10056C300(a1, a2, a3, (uint64_t)&v10);
  if (qword_10229FD20 != -1)
    dispatch_once(&qword_10229FD20, &stru_1021444D0);
  v5 = qword_10229FD28;
  if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134220544;
    *(_QWORD *)&buf[4] = *((_QWORD *)&v10 + 1);
    v41 = 2048;
    v42 = v11;
    v43 = 2048;
    v44 = *((_QWORD *)&v11 + 1);
    v45 = 2048;
    v46 = v10;
    v47 = 2048;
    v48 = *(float *)&v12;
    v49 = 2048;
    v50 = *((float *)&v12 + 1);
    v51 = 2048;
    v52 = *((float *)&v12 + 2);
    v53 = 2048;
    v54 = *((float *)&v12 + 3);
    v55 = 2048;
    v56 = *(float *)&v13;
    v57 = 2048;
    v58 = *((float *)&v13 + 1);
    v59 = 2048;
    v60 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "q.x,%.10f,q.y,%.10f,q.z,%.10f,q.w,%.10f,userAccel.x,%.10f,userAccel.y,%.10f,userAccel.z,%.10f,rotationRate.x,%.10f,rotationRate.y,%.10f,rotationRate.z,%.10f,timestamp,%llu", buf, 0x70u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_1021444D0);
    v18 = 134220544;
    v19 = *((_QWORD *)&v10 + 1);
    v20 = 2048;
    v21 = v11;
    v22 = 2048;
    v23 = *((_QWORD *)&v11 + 1);
    v24 = 2048;
    v25 = v10;
    v26 = 2048;
    v27 = *(float *)&v12;
    v28 = 2048;
    v29 = *((float *)&v12 + 1);
    v30 = 2048;
    v31 = *((float *)&v12 + 2);
    v32 = 2048;
    v33 = *((float *)&v12 + 3);
    v34 = 2048;
    v35 = *(float *)&v13;
    v36 = 2048;
    v37 = *((float *)&v13 + 1);
    v38 = 2048;
    v39 = a2;
    LODWORD(v9) = 112;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "q.x,%.10f,q.y,%.10f,q.z,%.10f,q.w,%.10f,userAccel.x,%.10f,userAccel.y,%.10f,userAccel.z,%.10f,rotationRate.x,%.10f,rotationRate.y,%.10f,rotationRate.z,%.10f,timestamp,%llu", COERCE_DOUBLE(&v18), v9, *(double *)&v10, *((double *)&v10 + 1), *(double *)&v11, *((double *)&v11 + 1), *(double *)&v12, *((double *)&v12 + 1), *(double *)&v13, *((double *)&v13 + 1),
      (_QWORD)v14);
    v8 = (char *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::handleFusedStruct(uint64_t, FusedStruct &)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  *(double *)buf = (double)(unint64_t)a2;
  return sub_10012AC18(a1, 0, (uint64_t)&v10, 120);
}

uint64_t sub_10056D904(uint64_t a1, unint64_t a2, uint64_t a3)
{
  NSObject *v6;
  const char *v8;
  uint8_t *v9;
  _WORD v10[8];
  uint8_t buf[8];

  if (qword_10229FD20 != -1)
    dispatch_once(&qword_10229FD20, &stru_1021444D0);
  v6 = qword_10229FD28;
  if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Sysdiagnose packet. Write out the data!", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_1021444D0);
    v10[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 0, "Sysdiagnose packet. Write out the data!", v10, 2);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::handleSysdiagnoseMsg(uint64_t, SysDiagnoseMsg &)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  *(double *)buf = (double)a2;
  return sub_10012AC18(a1, 7, a3, 1);
}

uint64_t sub_10056DAC4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  NSObject *v6;
  const char *v8;
  uint8_t *v9;
  _WORD v10[8];
  uint8_t buf[8];

  if (qword_10229FD20 != -1)
    dispatch_once(&qword_10229FD20, &stru_1021444D0);
  v6 = qword_10229FD28;
  if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Session metrics packet. Push it to the right place", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_1021444D0);
    v10[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 0, "Session metrics packet. Push it to the right place", v10, 2);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::handleSessionMetricsMsg(uint64_t, SessionMetricsMsg &)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  *(double *)buf = (double)a2;
  return sub_10012AC18(a1, 8, a3, 1);
}

void sub_10056DC84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t TimeStamp;
  BOOL v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  _WORD v11[8];
  int64_t v12;
  float32x2_t *v13;
  uint8_t buf[1640];

  TimeStamp = IOHIDEventGetTimeStamp(a4);
  v12 = 0;
  v13 = 0;
  IOHIDEventGetVendorDefinedData(a4, &v13, &v12);
  if (v13)
    v7 = v12 <= 0;
  else
    v7 = 1;
  if (v7)
  {
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_1021444D0);
    v8 = qword_10229FD28;
    if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Empty payload, returning", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_1021444D0);
      v11[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 1, "Empty payload, returning", v11, 2);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::onDeviceMotionLiteEvent(void *, void *, IOHIDEventRef)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
  else
  {
    sub_10056DE4C(a1, TimeStamp, v13, v12);
  }
}

void sub_10056DE4C(uint64_t a1, unint64_t a2, float32x2_t *a3, unint64_t a4)
{
  NSObject *v8;
  float v9;
  float v10;
  int v11;
  int v12;
  int v13;
  int16x4_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  NSObject *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  void **v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  const char *v33;
  char *v34;
  NSObject *v35;
  int v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  char *v41;
  NSObject *v42;
  int v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  int v51;
  NSObject *v52;
  uint64_t v53;
  char v54;
  NSObject *v55;
  uint64_t v56;
  NSObject *v57;
  uint64_t v58;
  NSObject *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  NSObject *v63;
  NSObject *v64;
  uint64_t v65;
  NSObject *v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  char *v70;
  uint64_t v71;
  const char *v72;
  char *v73;
  uint64_t v74;
  const char *v75;
  char *v76;
  const char *v77;
  char *v78;
  uint64_t v79;
  const char *v80;
  char *v81;
  uint64_t v82;
  const char *v83;
  char *v84;
  const char *v85;
  char *v86;
  const char *v87;
  char *v88;
  int v89;
  int v90;
  uint64_t v91;
  const char *v92;
  char *v93;
  int v94;
  const char *v95;
  int v96;
  int v97;
  const char *v98;
  char *v99;
  uint64_t v100;
  const char *v101;
  char *v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  _BYTE v108[24];
  __int16 v109;
  uint64_t v110;
  _BYTE buf[24];
  _BYTE v112[24];
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  unint64_t v121;
  _DWORD v122[8];

  if (qword_10229FD20 != -1)
    dispatch_once(&qword_10229FD20, &stru_1021444D0);
  v8 = qword_10229FD28;
  if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134349056;
    *(_QWORD *)&buf[4] = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "DeviceMotionLite,VendorData,size,%{public}ld", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_1021444D0);
    *(_DWORD *)v108 = 134349056;
    *(_QWORD *)&v108[4] = a4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "DeviceMotionLite,VendorData,size,%{public}ld", v108, 12);
    v88 = (char *)v87;
    sub_100512490("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::handleDeviceMotionLiteEvent(uint64_t, uint8_t *, size_t)", "%s\n", v87);
    if (v88 != buf)
      free(v88);
  }
  switch(a4)
  {
    case 0x30uLL:
      v9 = a3[1].f32[0];
      v10 = a3[1].f32[1];
      v11 = a3[2].i16[0];
      v12 = a3[2].i16[1];
      v13 = a3[2].i16[2];
      v14.i16[0] = a3[2].i16[3];
      v15 = a3[3].i16[2];
      v16 = a3[3].i16[3];
      v17 = a3[4].i16[0];
      v18 = a3[4].i16[2];
      v14.i16[1] = a3[3].i16[0];
      v14.i16[2] = a3[3].i16[1];
      v19 = a3[4].i16[3];
      v14.i16[3] = a3[4].i16[1];
      memset(v122, 0, sizeof(v122));
      *(double *)buf = v10;
      *(float64x2_t *)&buf[8] = vcvtq_f64_f32(*a3);
      *(double *)v112 = v9;
      *(float32x4_t *)&v112[8] = vdivq_f32(vcvtq_f32_s32(vmovl_s16(v14)), (float32x4_t)vdupq_n_s32(0x447A0000u));
      v113 = (float)v18 / 1000.0;
      v114 = (float)v19 / 1000.0;
      v115 = (float)v11;
      v116 = (float)v12;
      v117 = (float)v13;
      v118 = (float)v15;
      v119 = (float)v16;
      v120 = (float)v17;
      v121 = a2;
      *(_QWORD *)&v122[1] = 0;
      *(_QWORD *)&v122[3] = 0;
      *(_QWORD *)((char *)&v122[4] + 3) = 0;
      *(double *)v108 = (double)a2;
      sub_10012AC18(a1, 1, (uint64_t)buf, 120);
      return;
    case 0x1BuLL:
      sub_10056C3A4(a1, a2, (uint64_t)a3);
      return;
    case 0x18uLL:
      sub_10056D60C(a1, a2, (uint64_t)a3);
      return;
  }
  if (a4 < 0x3D)
  {
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_1021444D0);
    v32 = qword_10229FD28;
    if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = a4;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_FAULT, "DeviceMotionLite: unhandled size %{public}ld", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_1021444D0);
    *(_DWORD *)v108 = 134349056;
    *(_QWORD *)&v108[4] = a4;
    LODWORD(v103) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 17, "DeviceMotionLite: unhandled size %{public}ld", v108, v103);
    v34 = (char *)v33;
    sub_100512490("Generic", 1, 0, 0, "void CLDeviceMotionLiteService::handleDeviceMotionLiteEvent(uint64_t, uint8_t *, size_t)", "%s\n", v33);
LABEL_158:
    if (v34 != buf)
      free(v34);
    return;
  }
  if (qword_10229FD20 != -1)
    dispatch_once(&qword_10229FD20, &stru_1021444D0);
  v20 = qword_10229FD28;
  if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
  {
    v21 = a3->u8[0];
    v22 = a3->u8[1];
    v23 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)&buf[4] = a4;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v21;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v22;
    *(_WORD *)v112 = 2048;
    *(_QWORD *)&v112[2] = v23;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "DeviceMotionLite debug fragment, paylaodSize=%lu, fLength=%d, fSequence=%d, fragBufferLen=%lu", buf, 0x22u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_1021444D0);
    v89 = a3->u8[0];
    v90 = a3->u8[1];
    v91 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)v108 = 134218752;
    *(_QWORD *)&v108[4] = a4;
    *(_WORD *)&v108[12] = 1024;
    *(_DWORD *)&v108[14] = v89;
    *(_WORD *)&v108[18] = 1024;
    *(_DWORD *)&v108[20] = v90;
    v109 = 2048;
    v110 = v91;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "DeviceMotionLite debug fragment, paylaodSize=%lu, fLength=%d, fSequence=%d, fragBufferLen=%lu", v108, 34, v104, v105);
    v93 = (char *)v92;
    sub_100512490("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::handleDeviceMotionLiteEvent(uint64_t, uint8_t *, size_t)", "%s\n", v92);
    if (v93 != buf)
      free(v93);
  }
  v24 = a3->u8[0];
  if (a4 - 29 == v24)
  {
    if (*(_QWORD *)(a1 + 96))
    {
      if ((_DWORD)v24 != 64 && (_DWORD)v24 != 32)
      {
        if (qword_10229FD20 != -1)
          dispatch_once(&qword_10229FD20, &stru_1021444D0);
        v37 = qword_10229FD28;
        if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
        {
          v38 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)buf = 134217984;
          *(_QWORD *)&buf[4] = v38;
          _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "Not dropping %lu bytes in fragment buffer", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD20 != -1)
            dispatch_once(&qword_10229FD20, &stru_1021444D0);
          v39 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)v108 = 134217984;
          *(_QWORD *)&v108[4] = v39;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "Not dropping %lu bytes in fragment buffer", v108);
          v41 = (char *)v40;
          sub_100512490("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::handleDeviceMotionLiteEvent(uint64_t, uint8_t *, size_t)", "%s\n", v40);
          if (v41 != buf)
            free(v41);
        }
        goto LABEL_57;
      }
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_1021444D0);
      v25 = qword_10229FD28;
      if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEFAULT))
      {
        v26 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = v26;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Dropping remaining %lu bytes in fragment buffer", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD20 != -1)
          dispatch_once(&qword_10229FD20, &stru_1021444D0);
        v100 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)v108 = 134217984;
        *(_QWORD *)&v108[4] = v100;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 0, "Dropping remaining %lu bytes in fragment buffer", v108);
        v102 = (char *)v101;
        sub_100512490("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::handleDeviceMotionLiteEvent(uint64_t, uint8_t *, size_t)", "%s\n", v101);
        if (v102 != buf)
          free(v102);
      }
      v27 = *(void ***)(a1 + 64);
      v28 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 96) = 0;
      v29 = v28 - (_QWORD)v27;
      if (v29 >= 0x11)
      {
        do
        {
          operator delete(*v27);
          v30 = *(_QWORD *)(a1 + 72);
          v27 = (void **)(*(_QWORD *)(a1 + 64) + 8);
          *(_QWORD *)(a1 + 64) = v27;
          v29 = v30 - (_QWORD)v27;
        }
        while (v29 > 0x10);
      }
      if (v29 >> 3 == 1)
      {
        v31 = 2048;
        goto LABEL_56;
      }
      if (v29 >> 3 == 2)
      {
        v31 = 4096;
LABEL_56:
        *(_QWORD *)(a1 + 88) = v31;
      }
    }
LABEL_57:
    if ((a3->i8[1] - *(_BYTE *)(a1 + 152)) >= 2u)
    {
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_1021444D0);
      v42 = qword_10229FD28;
      if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEFAULT))
      {
        v43 = *(unsigned __int8 *)(a1 + 153);
        v44 = a3->u8[1];
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&buf[4] = v43;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v44;
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "Jump in packet sequence number: last=%d, this=%d", buf, 0xEu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD20 != -1)
          dispatch_once(&qword_10229FD20, &stru_1021444D0);
        v96 = *(unsigned __int8 *)(a1 + 153);
        v97 = a3->u8[1];
        *(_DWORD *)v108 = 67109376;
        *(_DWORD *)&v108[4] = v96;
        *(_WORD *)&v108[8] = 1024;
        *(_DWORD *)&v108[10] = v97;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 0, "Jump in packet sequence number: last=%d, this=%d", v108, 14);
        v99 = (char *)v98;
        sub_100512490("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::handleDeviceMotionLiteEvent(uint64_t, uint8_t *, size_t)", "%s\n", v98);
        if (v99 != buf)
          free(v99);
      }
    }
    *(_BYTE *)(a1 + 152) = a3->i8[1];
    sub_10056C3A4(a1, a2, (uint64_t)a3 + 2);
    v45 = *(_QWORD *)(a1 + 88) + *(_QWORD *)(a1 + 96);
    v46 = *(_QWORD *)(a1 + 64);
    v47 = (char *)(v46 + 8 * (v45 >> 12));
    if (*(_QWORD *)(a1 + 72) == v46)
      v48 = 0;
    else
      v48 = *(_QWORD *)v47 + (v45 & 0xFFF);
    sub_10056F518((int64x2_t *)(a1 + 56), v47, v48, (char *)&a3[3] + 5, (char *)&a3[3] + a3->u8[0] + 5, a3->u8[0]);
    while (1)
    {
      v49 = *(_QWORD *)(a1 + 96);
      if (!v49)
        return;
      v50 = *(_QWORD *)(a1 + 88);
      v51 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + ((v50 >> 9) & 0x7FFFFFFFFFFFF8)) + (v50 & 0xFFF));
      switch(v51)
      {
        case 2:
          LOBYTE(v106) = 2;
          *(_QWORD *)(a1 + 88) = v50 + 1;
          *(_QWORD *)(a1 + 96) = v49 - 1;
          sub_1005707AC(a1 + 56, 1);
          if (qword_10229FD20 != -1)
            dispatch_once(&qword_10229FD20, &stru_1021444D0);
          v55 = qword_10229FD28;
          if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
          {
            v56 = *(_QWORD *)(a1 + 96);
            *(_DWORD *)buf = 134217984;
            *(_QWORD *)&buf[4] = v56;
            _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEBUG, "called event handler function, remaining bytes: %lu", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FD20 != -1)
              dispatch_once(&qword_10229FD20, &stru_1021444D0);
            v71 = *(_QWORD *)(a1 + 96);
            *(_DWORD *)v108 = 134217984;
            *(_QWORD *)&v108[4] = v71;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "called event handler function, remaining bytes: %lu", v108);
            v73 = (char *)v72;
            sub_100512490("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::handleDeviceMotionLiteEvent(uint64_t, uint8_t *, size_t)", "%s\n", v72);
            if (v73 != buf)
              free(v73);
          }
          sub_10056D904(a1, a2, (uint64_t)&v106);
          break;
        case 3:
          LOBYTE(v106) = 3;
          *(_QWORD *)(a1 + 88) = v50 + 1;
          *(_QWORD *)(a1 + 96) = v49 - 1;
          sub_1005707AC(a1 + 56, 1);
          if (qword_10229FD20 != -1)
            dispatch_once(&qword_10229FD20, &stru_1021444D0);
          v57 = qword_10229FD28;
          if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
          {
            v58 = *(_QWORD *)(a1 + 96);
            *(_DWORD *)buf = 134217984;
            *(_QWORD *)&buf[4] = v58;
            _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEBUG, "called event handler function, remaining bytes: %lu", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FD20 != -1)
              dispatch_once(&qword_10229FD20, &stru_1021444D0);
            v74 = *(_QWORD *)(a1 + 96);
            *(_DWORD *)v108 = 134217984;
            *(_QWORD *)&v108[4] = v74;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "called event handler function, remaining bytes: %lu", v108);
            v76 = (char *)v75;
            sub_100512490("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::handleDeviceMotionLiteEvent(uint64_t, uint8_t *, size_t)", "%s\n", v75);
            if (v76 != buf)
              free(v76);
          }
          sub_10056DAC4(a1, a2, (uint64_t)&v106);
          break;
        case 5:
          if (v49 <= 0x1F)
          {
            if (qword_10229FD20 != -1)
              dispatch_once(&qword_10229FD20, &stru_1021444D0);
            v52 = qword_10229FD28;
            if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
            {
              v53 = *(_QWORD *)(a1 + 96);
              *(_DWORD *)buf = 134218240;
              *(_QWORD *)&buf[4] = v53;
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = 32;
              _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEBUG, "Skipping, buffer size %lu < packet size %lu", buf, 0x16u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_10229FD20 != -1)
                dispatch_once(&qword_10229FD20, &stru_1021444D0);
              v79 = *(_QWORD *)(a1 + 96);
              *(_DWORD *)v108 = 134218240;
              *(_QWORD *)&v108[4] = v79;
              *(_WORD *)&v108[12] = 2048;
              *(_QWORD *)&v108[14] = 32;
              LODWORD(v103) = 22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "Skipping, buffer size %lu < packet size %lu", v108, v103);
              v81 = (char *)v80;
              sub_100512490("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::handleDeviceMotionLiteEvent(uint64_t, uint8_t *, size_t)", "%s\n", v80);
              if (v81 != buf)
                free(v81);
            }
            v54 = 0;
            goto LABEL_112;
          }
          v60 = 0;
          while (1)
          {
            v61 = *(_QWORD *)(a1 + 96);
            if (!v61)
              break;
            v62 = *(_QWORD *)(a1 + 88);
            v108[v60] = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + ((v62 >> 9) & 0x7FFFFFFFFFFFF8)) + (v62 & 0xFFF));
            *(_QWORD *)(a1 + 88) = v62 + 1;
            *(_QWORD *)(a1 + 96) = v61 - 1;
            sub_1005707AC(a1 + 56, 1);
            if (++v60 == 32)
              goto LABEL_105;
          }
          if (qword_10229FD20 != -1)
            dispatch_once(&qword_10229FD20, &stru_1021444D0);
          v63 = qword_10229FD28;
          if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "Zero size struct, or somehow ring buffer size ran out", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FD20 != -1)
              dispatch_once(&qword_10229FD20, &stru_1021444D0);
            LOWORD(v106) = 0;
            LODWORD(v103) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 0, "Zero size struct, or somehow ring buffer size ran out", &v106, v103);
            v86 = (char *)v85;
            sub_100512490("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::handleDeviceMotionLiteEvent(uint64_t, uint8_t *, size_t)", "%s\n", v85);
            if (v86 != buf)
              free(v86);
          }
LABEL_105:
          if (qword_10229FD20 != -1)
            dispatch_once(&qword_10229FD20, &stru_1021444D0);
          v64 = qword_10229FD28;
          if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
          {
            v65 = *(_QWORD *)(a1 + 96);
            *(_DWORD *)buf = 134217984;
            *(_QWORD *)&buf[4] = v65;
            _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEBUG, "called event handler function, remaining bytes: %lu", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FD20 != -1)
              dispatch_once(&qword_10229FD20, &stru_1021444D0);
            v82 = *(_QWORD *)(a1 + 96);
            v106 = 134217984;
            v107 = v82;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "called event handler function, remaining bytes: %lu", &v106);
            v84 = (char *)v83;
            sub_100512490("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::handleDeviceMotionLiteEvent(uint64_t, uint8_t *, size_t)", "%s\n", v83);
            if (v84 != buf)
              free(v84);
          }
          sub_10056BE10(a1, a2, (uint64_t)v108);
          break;
        default:
          if (qword_10229FD20 != -1)
            dispatch_once(&qword_10229FD20, &stru_1021444D0);
          v59 = qword_10229FD28;
          if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v51;
            _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEBUG, "Unknown msgType: %d", buf, 8u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FD20 != -1)
              dispatch_once(&qword_10229FD20, &stru_1021444D0);
            *(_DWORD *)v108 = 67109120;
            *(_DWORD *)&v108[4] = v51;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "Unknown msgType: %d", v108);
            v78 = (char *)v77;
            sub_100512490("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::handleDeviceMotionLiteEvent(uint64_t, uint8_t *, size_t)", "%s\n", v77);
            if (v78 != buf)
              free(v78);
          }
          *(int64x2_t *)(a1 + 88) = vaddq_s64(*(int64x2_t *)(a1 + 88), (int64x2_t)xmmword_101B9DFC0);
          sub_1005707AC(a1 + 56, 1);
          break;
      }
      v54 = 1;
LABEL_112:
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_1021444D0);
      v66 = qword_10229FD28;
      if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
      {
        v67 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&buf[4] = v51;
        *(_WORD *)&buf[8] = 2048;
        *(_QWORD *)&buf[10] = v67;
        _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEBUG, "msgType=%d, fragBufferLength=%lu\n", buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD20 != -1)
          dispatch_once(&qword_10229FD20, &stru_1021444D0);
        v68 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)v108 = 67109376;
        *(_DWORD *)&v108[4] = v51;
        *(_WORD *)&v108[8] = 2048;
        *(_QWORD *)&v108[10] = v68;
        LODWORD(v103) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "msgType=%d, fragBufferLength=%lu\n", v108, v103);
        v70 = (char *)v69;
        sub_100512490("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::handleDeviceMotionLiteEvent(uint64_t, uint8_t *, size_t)", "%s\n", v69);
        if (v70 != buf)
          free(v70);
      }
      if ((v54 & 1) == 0)
        return;
    }
  }
  if (qword_10229FD20 != -1)
    dispatch_once(&qword_10229FD20, &stru_1021444D0);
  v35 = qword_10229FD28;
  if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEFAULT))
  {
    v36 = a3->u8[0];
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v36;
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "Received invalid payload length %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_1021444D0);
    v94 = a3->u8[0];
    *(_DWORD *)v108 = 67109120;
    *(_DWORD *)&v108[4] = v94;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 0, "Received invalid payload length %d", v108);
    v34 = (char *)v95;
    sub_100512490("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::handleDeviceMotionLiteEvent(uint64_t, uint8_t *, size_t)", "%s\n", v95);
    goto LABEL_158;
  }
}

void sub_10056F458(id a1)
{
  qword_10229FD28 = (uint64_t)os_log_create("com.apple.locationd.Motion", "DeviceMotion");
}

uint64_t sub_10056F484(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 2048;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 4096;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return sub_10002E778((uint64_t)a1);
}

_QWORD *sub_10056F518(int64x2_t *a1, char *a2, uint64_t a3, char *a4, char *a5, unint64_t a6)
{
  unint64_t v6;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char v28;
  _BYTE *v29;
  _QWORD *v30;
  _BYTE *v31;
  _BYTE *v32;
  _QWORD *v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  _QWORD *v38;
  _BYTE *v39;
  _BYTE *v40;
  void **v41;
  uint64_t v42;
  size_t v43;
  _BYTE *v44;
  unint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  const void **v49;
  char *v50;
  const void **v51;
  char *v52;
  uint64_t v53;
  _QWORD *v54;
  char *v55;
  char *v56;
  char *v57;
  const void **v58;
  char *v59;
  uint64_t v60;
  uint64_t *v61;
  int64_t v62;
  size_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v68;
  __int128 v69;
  __int128 v70;

  v6 = a6;
  v10 = a1[2].u64[0];
  v11 = v10 >> 12;
  v12 = a1->i64[1];
  v13 = a1[1].i64[0];
  v14 = (char *)(v12 + 8 * (v10 >> 12));
  if (v13 == v12)
    v15 = 0;
  else
    v15 = *(_QWORD *)v14 + (a1[2].i64[0] & 0xFFF);
  if (a3 == v15)
    v16 = 0;
  else
    v16 = a3 + ((a2 - v14) << 9) - (v15 + *(_QWORD *)a2) + *(_QWORD *)v14;
  v17 = a1[2].i64[1];
  if (v16 >= v17 - v16)
  {
    v20 = ((v13 - v12) << 9) - 1;
    if (v13 == v12)
      v20 = 0;
    v21 = v10 + v17;
    v22 = v20 - v21;
    if (a6 > v22)
    {
      sub_10056FEA8(a1, a6 - v22);
      v17 = a1[2].i64[1];
      v12 = a1->i64[1];
      v13 = a1[1].i64[0];
      v21 = a1[2].i64[0] + v17;
    }
    v23 = (_QWORD *)(v12 + 8 * (v21 >> 12));
    if (v13 == v12)
      v24 = 0;
    else
      v24 = (char *)(*v23 + (v21 & 0xFFF));
    *(_QWORD *)&v68 = v12 + 8 * (v21 >> 12);
    *((_QWORD *)&v68 + 1) = v24;
    v45 = v17 - v16;
    if (v17 - v16 < v6)
    {
      v46 = &a5[v17 - v16 - v6];
      if (v45 < v6 >> 1)
        v46 = &a4[v45];
      if (v46 != a5)
      {
        v47 = v46;
        do
        {
          *v24++ = *v47;
          if (&v24[-*v23] == (char *)4096)
          {
            v48 = (char *)v23[1];
            ++v23;
            v24 = v48;
          }
          ++v47;
          ++a1[2].i64[1];
        }
        while (v47 != a5);
        a5 = v46;
      }
      v6 = v17 - v16;
    }
    if (v6)
    {
      v49 = (const void **)sub_100570430((uint64_t)&v68, v6);
      v51 = v49;
      v52 = v50;
      v53 = *((_QWORD *)&v68 + 1);
      if (*((char **)&v68 + 1) != v50)
      {
        v54 = v49;
        v55 = v50;
        do
        {
          *v24++ = *v55;
          if (&v24[-*v23] == (char *)4096)
          {
            v56 = (char *)v23[1];
            ++v23;
            v24 = v56;
          }
          if (&(++v55)[-*v54] == (char *)4096)
          {
            v57 = (char *)v54[1];
            ++v54;
            v55 = v57;
          }
          ++a1[2].i64[1];
          v53 = *((_QWORD *)&v68 + 1);
        }
        while (v55 != *((char **)&v68 + 1));
      }
      if (v6 < v45)
      {
        v58 = (const void **)sub_100570430((uint64_t)&v68, v45);
        sub_1005705BC(v58, v59, v51, v52, (const void **)v68, *((char **)&v68 + 1), (const void ***)&v69);
        v53 = *((_QWORD *)&v70 + 1);
        v68 = v70;
      }
      if (a5 != a4)
      {
        v61 = (uint64_t *)(v68 - 8);
        v60 = *(_QWORD *)v68;
        while (1)
        {
          v62 = v53 - v60;
          if (a5 - a4 >= v62)
            v63 = v62;
          else
            v63 = a5 - a4;
          a5 -= v63;
          if (v63)
            memmove((void *)(v53 - v63), a5, v63);
          if (a5 == a4)
            break;
          v64 = *v61--;
          v60 = v64;
          v53 = v64 + 4096;
        }
      }
    }
  }
  else
  {
    if (a6 > v10)
    {
      sub_10056F97C((void **)a1, a6 - v10);
      v10 = a1[2].u64[0];
      v12 = a1->i64[1];
      v13 = a1[1].i64[0];
      v11 = v10 >> 12;
    }
    v18 = (_QWORD *)(v12 + 8 * v11);
    if (v13 == v12)
      v19 = 0;
    else
      v19 = *v18 + (v10 & 0xFFF);
    *(_QWORD *)&v68 = v12 + 8 * v11;
    *((_QWORD *)&v68 + 1) = v19;
    if (v6 > v16)
    {
      v25 = &a4[v6 - v16];
      if (v16 < v6 >> 1)
        v25 = &a5[-v16];
      if (v25 != a4)
      {
        v26 = v25;
        do
        {
          if (v19 == *v18)
          {
            v27 = *--v18;
            v19 = v27 + 4096;
          }
          v28 = *--v26;
          *(_BYTE *)--v19 = v28;
          a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_101BB2F70);
        }
        while (v26 != a4);
        a4 = v25;
      }
      v6 = v16;
    }
    if (v6)
    {
      v30 = sub_10056FE44((uint64_t)&v68, v6);
      v31 = v29;
      v32 = (_BYTE *)*((_QWORD *)&v68 + 1);
      if (*((_BYTE **)&v68 + 1) != v29)
      {
        v33 = v30;
        v34 = v29;
        do
        {
          if (v19 == *v18)
          {
            v35 = *--v18;
            v19 = v35 + 4096;
          }
          if (v34 == (_BYTE *)*v33)
          {
            v36 = *--v33;
            v34 = (_BYTE *)(v36 + 4096);
          }
          v37 = *--v34;
          *(_BYTE *)--v19 = v37;
          a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_101BB2F70);
          v32 = (_BYTE *)*((_QWORD *)&v68 + 1);
        }
        while (v34 != *((_BYTE **)&v68 + 1));
      }
      if (v6 < v16)
      {
        v38 = sub_10056FE44((uint64_t)&v68, v16);
        v69 = v68;
        sub_100570494(v30, v31, (_BYTE **)v38, v39, (void ***)&v69);
        v32 = (_BYTE *)*((_QWORD *)&v69 + 1);
        v68 = v69;
      }
      if (a4 != a5)
      {
        v41 = (void **)(v68 + 8);
        v40 = *(_BYTE **)v68;
        while (1)
        {
          v42 = v40 - v32 + 4096;
          if (a5 - a4 >= v42)
            v43 = v42;
          else
            v43 = a5 - a4;
          if (v43)
            memmove(v32, a4, v43);
          a4 += v43;
          if (a4 == a5)
            break;
          v44 = *v41++;
          v40 = v44;
          v32 = v44;
        }
      }
    }
  }
  v65 = a1->i64[1];
  if (a1[1].i64[0] == v65)
    v66 = 0;
  else
    v66 = *(_QWORD *)(v65 + 8 * ((unint64_t)a1[2].i64[0] >> 12)) + (a1[2].i64[0] & 0xFFF);
  *(_QWORD *)&v69 = v65 + 8 * ((unint64_t)a1[2].i64[0] >> 12);
  *((_QWORD *)&v69 + 1) = v66;
  return sub_10056FE44((uint64_t)&v69, v16);
}

void sub_10056F97C(void **a1, unint64_t a2)
{
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  void **v19;
  _BYTE *v20;
  uint64_t v21;
  unint64_t v22;
  void **v23;
  unint64_t v24;
  char *v25;
  char *i;
  int64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  int64_t v33;
  char *v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void *v43;
  char *v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  int64_t v50;
  char *v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  void *v65;
  void *v66;
  void *__p[2];
  char *v68;
  char *v69;
  _QWORD *v70;

  v3 = a1[1];
  v4 = a1[2];
  v5 = v4 - v3;
  if (v4 == v3)
    v6 = a2 + 1;
  else
    v6 = a2;
  if (v4 == v3)
    v7 = 0;
  else
    v7 = ((v4 - v3) << 9) - 1;
  if ((v6 & 0xFFF) != 0)
    v8 = (v6 >> 12) + 1;
  else
    v8 = v6 >> 12;
  v9 = (uint64_t)a1[4];
  v10 = v7 - ((_QWORD)a1[5] + v9);
  if (v8 >= v10 >> 12)
    v11 = v10 >> 12;
  else
    v11 = v8;
  if (v8 <= v10 >> 12)
  {
    for (a1[4] = (void *)(v9 + (v11 << 12)); v11; --v11)
    {
      v19 = (void **)a1[2];
      __p[0] = *(v19 - 1);
      a1[2] = v19 - 1;
      sub_100343094((uint64_t)a1, __p);
    }
  }
  else
  {
    v12 = (uint64_t)(a1 + 3);
    v13 = v8 - v11;
    v14 = (_BYTE *)a1[3] - (_BYTE *)*a1;
    if (v8 - v11 <= (v14 >> 3) - (v5 >> 3))
    {
      if (v13)
      {
        if (v3 == *a1)
        {
LABEL_30:
          v22 = v13;
          do
          {
            __p[0] = operator new(0x1000uLL);
            sub_100212218(a1, __p);
            --v22;
          }
          while (v22);
          v11 += v13;
          v9 = (uint64_t)a1[4];
        }
        else
        {
          while (1)
          {
            __p[0] = operator new(0x1000uLL);
            sub_100343094((uint64_t)a1, __p);
            v20 = a1[1];
            v21 = (_BYTE *)a1[2] - v20 == 8 ? 4095 : 4096;
            v9 = (uint64_t)a1[4] + v21;
            a1[4] = (void *)v9;
            if (!--v13)
              break;
            if (v20 == *a1)
              goto LABEL_30;
          }
        }
      }
      for (a1[4] = (void *)(v9 + (v11 << 12)); v11; --v11)
      {
        v23 = (void **)a1[2];
        __p[0] = *(v23 - 1);
        a1[2] = v23 - 1;
        sub_100343094((uint64_t)a1, __p);
      }
    }
    else
    {
      v15 = v4 == v3;
      v16 = v8 << 12;
      if (v14 >> 2 <= v13 + (v5 >> 3))
        v17 = v13 + (v5 >> 3);
      else
        v17 = v14 >> 2;
      v70 = a1 + 3;
      if (v17)
        v18 = (char *)sub_10025E6A0(v12, v17);
      else
        v18 = 0;
      v24 = v16 - v15;
      __p[0] = v18;
      __p[1] = v18;
      v68 = v18;
      v69 = &v18[8 * v17];
      do
      {
        v66 = operator new(0x1000uLL);
        sub_10003732C(__p, &v66);
        --v13;
      }
      while (v13);
      v25 = (char *)a1[2];
      for (i = v68; v11; --v11)
      {
        if (i == v69)
        {
          v27 = (char *)__p[1] - (char *)__p[0];
          if (__p[1] <= __p[0])
          {
            if (i == __p[0])
              v35 = 1;
            else
              v35 = (i - (char *)__p[0]) >> 2;
            v36 = (char *)sub_10025E6A0((uint64_t)v70, v35);
            v38 = (uint64_t *)__p[1];
            i = &v36[8 * (v35 >> 2)];
            v39 = v68 - (char *)__p[1];
            if (v68 != __p[1])
            {
              i = &v36[8 * (v35 >> 2) + (v39 & 0xFFFFFFFFFFFFFFF8)];
              v40 = 8 * (v39 >> 3);
              v41 = &v36[8 * (v35 >> 2)];
              do
              {
                v42 = *v38++;
                *(_QWORD *)v41 = v42;
                v41 += 8;
                v40 -= 8;
              }
              while (v40);
            }
            v43 = __p[0];
            __p[0] = v36;
            __p[1] = &v36[8 * (v35 >> 2)];
            v68 = i;
            v69 = &v36[8 * v37];
            if (v43)
            {
              operator delete(v43);
              i = v68;
            }
          }
          else
          {
            v28 = v27 >> 3;
            v29 = v27 >> 3 < -1;
            v30 = (v27 >> 3) + 2;
            if (v29)
              v31 = v30;
            else
              v31 = v28 + 1;
            v32 = (char *)__p[1] - 8 * (v31 >> 1);
            v33 = i - (char *)__p[1];
            if (i != __p[1])
            {
              memmove((char *)__p[1] - 8 * (v31 >> 1), __p[1], i - (char *)__p[1]);
              i = (char *)__p[1];
            }
            v34 = &i[-8 * (v31 >> 1)];
            i = &v32[v33];
            __p[1] = v34;
            v68 = &v32[v33];
          }
        }
        *(_QWORD *)i = *((_QWORD *)v25 - 1);
        i = v68 + 8;
        v68 += 8;
        v25 = (char *)a1[2] - 8;
        a1[2] = v25;
      }
      v44 = (char *)a1[1];
      if (v44 == v25)
      {
        v44 = v25;
      }
      else
      {
        do
        {
          if (i == v69)
          {
            v45 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (i == __p[0])
                v52 = 1;
              else
                v52 = (i - (char *)__p[0]) >> 2;
              v53 = (char *)sub_10025E6A0((uint64_t)v70, v52);
              v55 = (uint64_t *)__p[1];
              i = &v53[8 * (v52 >> 2)];
              v56 = v68 - (char *)__p[1];
              if (v68 != __p[1])
              {
                i = &v53[8 * (v52 >> 2) + (v56 & 0xFFFFFFFFFFFFFFF8)];
                v57 = 8 * (v56 >> 3);
                v58 = &v53[8 * (v52 >> 2)];
                do
                {
                  v59 = *v55++;
                  *(_QWORD *)v58 = v59;
                  v58 += 8;
                  v57 -= 8;
                }
                while (v57);
              }
              v60 = __p[0];
              __p[0] = v53;
              __p[1] = &v53[8 * (v52 >> 2)];
              v68 = i;
              v69 = &v53[8 * v54];
              if (v60)
              {
                operator delete(v60);
                i = v68;
              }
            }
            else
            {
              v46 = v45 >> 3;
              v29 = v45 >> 3 < -1;
              v47 = (v45 >> 3) + 2;
              if (v29)
                v48 = v47;
              else
                v48 = v46 + 1;
              v49 = (char *)__p[1] - 8 * (v48 >> 1);
              v50 = i - (char *)__p[1];
              if (i != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v48 >> 1), __p[1], i - (char *)__p[1]);
                i = (char *)__p[1];
              }
              v51 = &i[-8 * (v48 >> 1)];
              i = &v49[v50];
              __p[1] = v51;
              v68 = &v49[v50];
            }
          }
          v61 = *(_QWORD *)v44;
          v44 += 8;
          *(_QWORD *)i = v61;
          i = v68 + 8;
          v68 += 8;
        }
        while (v44 != a1[2]);
        v25 = (char *)a1[1];
      }
      v62 = v69;
      v63 = (char *)a1[3];
      v64 = (char *)a1[4];
      a1[2] = i;
      a1[3] = v62;
      v65 = *a1;
      *(_OWORD *)a1 = *(_OWORD *)__p;
      __p[0] = v65;
      __p[1] = v25;
      v68 = v44;
      v69 = v63;
      a1[4] = &v64[v24];
      if (v44 != v25)
        v68 = &v44[(v25 - v44 + 7) & 0xFFFFFFFFFFFFFFF8];
      if (v65)
        operator delete(v65);
    }
  }
}

void sub_10056FDD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10056FE44(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = *(_QWORD **)a1;
  if (a2)
  {
    v4 = *(_QWORD *)(a1 + 8) - *result + a2;
    if (v4 < 1)
      result -= (unint64_t)(4095 - v4) >> 12;
    else
      result += (unint64_t)v4 >> 12;
  }
  return result;
}

void sub_10056FEA8(_QWORD *a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t i;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int64_t v76;
  char *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  void *v88;
  void *__p[2];
  __int128 v90;
  _QWORD *v91;

  v3 = (char *)a1[2];
  v4 = (uint64_t)&v3[-a1[1]];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if ((v5 & 0xFFF) != 0)
    v6 = (v5 >> 12) + 1;
  else
    v6 = v5 >> 12;
  v7 = a1[4];
  if (v6 >= v7 >> 12)
    v8 = v7 >> 12;
  else
    v8 = v6;
  if (v6 <= v7 >> 12)
  {
    for (a1[4] = v7 - (v8 << 12); v8; --v8)
    {
      v16 = (_QWORD *)a1[1];
      v19 = *v16;
      v17 = (char *)(v16 + 1);
      v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1)
            v28 = 1;
          else
            v28 = (uint64_t)&v3[-*a1] >> 2;
          v29 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v28);
          v31 = &v29[8 * (v28 >> 2)];
          v32 = (uint64_t *)a1[1];
          v3 = v31;
          v33 = a1[2] - (_QWORD)v32;
          if (v33)
          {
            v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            v34 = 8 * (v33 >> 3);
            v35 = &v29[8 * (v28 >> 2)];
            do
            {
              v36 = *v32++;
              *(_QWORD *)v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            v3 = (char *)a1[2];
          }
        }
        else
        {
          v21 = v20 >> 3;
          v22 = v20 >> 3 < -1;
          v23 = (v20 >> 3) + 2;
          if (v22)
            v24 = v23;
          else
            v24 = v21 + 1;
          v25 = &v17[-8 * (v24 >> 1)];
          v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            v3 = (char *)a1[1];
          }
          v27 = &v3[-8 * (v24 >> 1)];
          v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(_QWORD *)v3 = v18;
      v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    v9 = v6 - v8;
    v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          sub_100212218(a1, __p);
          --v6;
          if (!--v9)
            goto LABEL_75;
        }
        for (i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          sub_100343094((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8)
            v64 = 4095;
          else
            v64 = 4096;
          v65 = v64 + a1[4];
          a1[4] = v65;
        }
        v8 = v6;
      }
      else
      {
LABEL_75:
        v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 12);
      if (v8)
      {
        v66 = (char *)a1[2];
        do
        {
          v67 = (_QWORD *)a1[1];
          v70 = *v67;
          v68 = (char *)(v67 + 1);
          v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1)
                v78 = 1;
              else
                v78 = (uint64_t)&v66[-*a1] >> 2;
              v79 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v78);
              v81 = &v79[8 * (v78 >> 2)];
              v82 = (uint64_t *)a1[1];
              v66 = v81;
              v83 = a1[2] - (_QWORD)v82;
              if (v83)
              {
                v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                v84 = 8 * (v83 >> 3);
                v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  v86 = *v82++;
                  *(_QWORD *)v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                v66 = (char *)a1[2];
              }
            }
            else
            {
              v72 = v71 >> 3;
              v22 = v71 >> 3 < -1;
              v73 = (v71 >> 3) + 2;
              if (v22)
                v74 = v73;
              else
                v74 = v72 + 1;
              v75 = &v68[-8 * (v74 >> 1)];
              v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                v66 = (char *)a1[1];
              }
              v77 = &v66[-8 * (v74 >> 1)];
              v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(_QWORD *)v66 = v69;
          v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v11 = v4 >> 3;
      v12 = v10 >> 2;
      if (v12 <= v9 + v11)
        v13 = v9 + v11;
      else
        v13 = v12;
      v14 = v11 - v8;
      v91 = a1 + 3;
      if (v13)
        v15 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v13);
      else
        v15 = 0;
      v38 = v8 << 12;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&v90 = __p[1];
      *((_QWORD *)&v90 + 1) = &v15[8 * v13];
      do
      {
        v88 = operator new(0x1000uLL);
        sub_10003732C(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        v39 = (_QWORD *)a1[1];
        v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0])
                v48 = 1;
              else
                v48 = (v40 - (char *)__p[0]) >> 2;
              v49 = (char *)sub_10025E6A0((uint64_t)v91, v48);
              v51 = (uint64_t *)__p[1];
              v40 = &v49[8 * (v48 >> 2)];
              v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                v53 = 8 * (v52 >> 3);
                v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  v55 = *v51++;
                  *(_QWORD *)v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(_QWORD *)&v90 = v40;
              *((_QWORD *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                v40 = (char *)v90;
              }
            }
            else
            {
              v42 = v41 >> 3;
              v22 = v41 >> 3 < -1;
              v43 = (v41 >> 3) + 2;
              if (v22)
                v44 = v43;
              else
                v44 = v42 + 1;
              v45 = (char *)__p[1] - 8 * (v44 >> 1);
              v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                v40 = (char *)__p[1];
              }
              v47 = &v40[-8 * (v44 >> 1)];
              v40 = &v45[v46];
              __p[1] = v47;
              *(_QWORD *)&v90 = &v45[v46];
            }
          }
          *(_QWORD *)v40 = *v39;
          v40 = (char *)(v90 + 8);
          *(_QWORD *)&v90 = v90 + 8;
          v39 = (_QWORD *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      v57 = (_QWORD *)a1[2];
      v58 = -7 - (_QWORD)v57;
      while (v57 != (_QWORD *)a1[1])
      {
        --v57;
        v58 += 8;
        sub_1003431B0((uint64_t)__p, v57);
      }
      v59 = (char *)*a1;
      v60 = *(_OWORD *)__p;
      v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      v90 = v62;
      a1[4] -= v38;
      if (v57 != (_QWORD *)v62)
        *(_QWORD *)&v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      if (v59)
        operator delete(v59);
    }
  }
}

void sub_1005703BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100570430(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = *(_QWORD **)a1;
  if (a2)
  {
    v4 = *(_QWORD *)(a1 + 8) - a2 - *result;
    if (v4 < 1)
      result -= (unint64_t)(4095 - v4) >> 12;
    else
      result += (unint64_t)v4 >> 12;
  }
  return result;
}

void ****sub_100570494(_QWORD *a1, _BYTE *a2, _BYTE **a3, _BYTE *a4, void ***a5)
{
  _QWORD *v7;
  _BYTE *i;
  _BYTE *v9;
  void ***v11;

  v11 = a5;
  if (a1 != a3)
  {
    v7 = a1 + 1;
    for (i = (_BYTE *)(*a1 + 4096); ; i = v9 + 4096)
    {
      sub_100570508(&v11, a2, i);
      if (v7 == a3)
        break;
      v9 = (_BYTE *)*v7++;
      a2 = v9;
    }
    a2 = *a3;
  }
  return sub_100570508(&v11, a2, a4);
}

void ****sub_100570508(void ****result, _BYTE *__src, _BYTE *a3)
{
  void ***v3;
  void **v4;
  void **v5;
  _BYTE *v7;
  void ****v8;
  void **v9;
  char *v10;
  uint64_t v11;
  size_t v12;
  void **v13;

  v3 = *result;
  v5 = **result;
  v4 = (*result)[1];
  if (__src != a3)
  {
    v7 = __src;
    v8 = result;
    v10 = (char *)*v5++;
    v9 = (void **)v10;
    while (1)
    {
      v11 = (char *)v9 - (char *)v4 + 4096;
      if (a3 - v7 >= v11)
        v12 = v11;
      else
        v12 = a3 - v7;
      if (v12)
        result = (void ****)memmove(v4, v7, v12);
      v7 += v12;
      if (v7 == a3)
        break;
      v13 = (void **)*v5++;
      v9 = v13;
      v4 = v13;
    }
    v4 = (void **)((char *)v4 + v12);
    if ((char *)*(v5 - 1) + 4096 == (char *)v4)
      v4 = (void **)*v5;
    else
      --v5;
    v3 = *v8;
  }
  *v3 = v5;
  v3[1] = v4;
  return result;
}

void *sub_1005705BC@<X0>(const void **a1@<X1>, char *a2@<X2>, const void **a3@<X3>, char *a4@<X4>, const void **a5@<X5>, char *a6@<X6>, const void ***a7@<X8>)
{
  const void **v8;
  _BYTE *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  size_t v18;
  void *result;
  uint64_t v20;
  char *v21;
  const void **v22;
  char *v23;
  _BYTE *v24;
  char *v25;
  char *v26;
  size_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  size_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  size_t v38;
  uint64_t v39;
  char *v40;

  v8 = a5;
  if (a1 == a3)
  {
    if (a2 == a4)
      goto LABEL_46;
    v35 = (uint64_t)*a5;
    v36 = a4;
    while (1)
    {
      v37 = &a6[-v35];
      if (v36 - a2 >= (uint64_t)v37)
        v38 = (size_t)v37;
      else
        v38 = v36 - a2;
      v36 -= v38;
      a6 -= v38;
      if (v38)
        result = memmove(a6, v36, v38);
      if (v36 == a2)
        break;
      v39 = (uint64_t)*--v8;
      v35 = v39;
      a6 = (char *)(v39 + 4096);
    }
    goto LABEL_44;
  }
  v14 = *a3;
  if (*a3 != a4)
  {
    v15 = (uint64_t)*a5;
    v16 = a4;
    while (1)
    {
      v17 = &a6[-v15];
      if (v16 - v14 >= (uint64_t)v17)
        v18 = (size_t)v17;
      else
        v18 = v16 - v14;
      v16 -= v18;
      a6 -= v18;
      if (v18)
        result = memmove(a6, v16, v18);
      if (v16 == v14)
        break;
      v20 = (uint64_t)*--v8;
      v15 = v20;
      a6 = (char *)(v20 + 4096);
    }
    if ((char *)*v8 + 4096 == a6)
    {
      v21 = (char *)v8[1];
      ++v8;
      a6 = v21;
    }
  }
  v22 = a3 - 1;
  if (a3 - 1 != a1)
  {
    v23 = (char *)*v8;
    do
    {
      v24 = *v22;
      v25 = (char *)*v22 + 4096;
      while (1)
      {
        v26 = (char *)(a6 - v23);
        if (v25 - v24 >= (uint64_t)v26)
          v27 = (size_t)v26;
        else
          v27 = v25 - v24;
        v25 -= v27;
        a6 -= v27;
        if (v27)
          result = memmove(a6, v25, v27);
        if (v25 == v24)
          break;
        v28 = (char *)*--v8;
        v23 = v28;
        a6 = v28 + 4096;
      }
      v23 = (char *)*v8;
      if ((char *)*v8 + 4096 == a6)
      {
        v29 = (char *)v8[1];
        ++v8;
        v23 = v29;
        a6 = v29;
      }
      --v22;
    }
    while (v22 != a1);
  }
  v30 = (char *)*a1 + 4096;
  if (v30 != a2)
  {
    v31 = (uint64_t)*v8;
    while (1)
    {
      v32 = &a6[-v31];
      if (v30 - a2 >= (uint64_t)v32)
        v33 = (size_t)v32;
      else
        v33 = v30 - a2;
      v30 -= v33;
      a6 -= v33;
      if (v33)
        result = memmove(a6, v30, v33);
      if (v30 == a2)
        break;
      v34 = (uint64_t)*--v8;
      v31 = v34;
      a6 = (char *)(v34 + 4096);
    }
LABEL_44:
    if ((char *)*v8 + 4096 == a6)
    {
      v40 = (char *)v8[1];
      ++v8;
      a6 = v40;
    }
  }
LABEL_46:
  *a7 = a3;
  a7[1] = (const void **)a4;
  a7[2] = v8;
  a7[3] = (const void **)a6;
  return result;
}

uint64_t sub_1005707AC(uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x1000)
    a2 = 1;
  if (v2 < 0x2000)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 4096;
  }
  return v4 ^ 1u;
}

id sub_100570808(uint64_t a1, unsigned int *a2, _OWORD *a3, void *a4)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v12[12];

  v4 = *a2;
  v5 = a3[9];
  v12[8] = a3[8];
  v12[9] = v5;
  v6 = a3[11];
  v12[10] = a3[10];
  v12[11] = v6;
  v7 = a3[5];
  v12[4] = a3[4];
  v12[5] = v7;
  v8 = a3[7];
  v12[6] = a3[6];
  v12[7] = v8;
  v9 = a3[1];
  v12[0] = *a3;
  v12[1] = v9;
  v10 = a3[3];
  v12[2] = a3[2];
  v12[3] = v10;
  return objc_msgSend(a4, "onCompanionNotification:data:", v4, v12);
}

void sub_100570C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100261F44((uint64_t)&a9);
  sub_100261F44((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_100570CDC(id a1)
{
  qword_10229FE88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

void sub_100570D08(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102144520;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100570D1C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102144520;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_100570D58(id a1)
{
  operator new();
}

void sub_100570DD4()
{
  operator delete();
}

void sub_100570DF8()
{
  NSObject *v0;
  const char *v1;
  uint8_t *v2;
  _WORD v3[8];
  uint8_t buf[1640];

  if (qword_1023108D0)
  {
    *(_QWORD *)buf = 0;
    (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)qword_1023108D0 + 968))(qword_1023108D0, buf);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)qword_1023108D0 + 944))(qword_1023108D0) & 1) == 0)
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102144978);
      v0 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "could not store cached data ", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102144978);
        v3[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "could not store cached data ", v3, 2);
        v2 = (uint8_t *)v1;
        sub_100512490("Generic", 1, 0, 0, "static void CLDaemonCache::shutdownInstance()", "%s\n", v1);
        if (v2 != buf)
          free(v2);
      }
    }
  }
}

uint64_t sub_100570FB0(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  int v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  NSObject *v9;
  const char *v11;
  uint8_t *v12;
  _WORD v13[7];
  BOOL v14;
  uint8_t buf[8];
  std::__shared_weak_count *v16;

  v3 = (_QWORD *)sub_100585634(a1, a2, "cache", 1, 0, 2);
  *v3 = off_102144590;
  sub_10055D44C(v3 + 16, "CLDaemonCache", 1, 1);
  v14 = 0;
  sub_1001E4804(buf);
  v4 = sub_1001E4874(*(uint64_t *)buf, "ClearLocationCache", &v14);
  if (v14)
    v5 = v4;
  else
    v5 = 0;
  v6 = v16;
  if (!v16)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v5)
      return a1;
  }
  else
  {
LABEL_8:
    if (!v5)
      return a1;
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102144978);
  v9 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning clearing location cache", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102144978);
    v13[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning clearing location cache", v13, 2);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "CLDaemonCache::CLDaemonCache(id<CLIntersiloUniverse>)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  sub_100525288(a1);
  return a1;
}

void sub_100571200(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10055D4D0(v2);
  sub_100585DD4(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10057123C(_QWORD *a1)
{
  *a1 = off_102144590;
  sub_10055D4D0(a1 + 16);
  return sub_100585DD4((uint64_t)a1);
}

void sub_10057126C(_QWORD *a1)
{
  *a1 = off_102144590;
  sub_10055D4D0(a1 + 16);
  sub_100585DD4((uint64_t)a1);
  operator delete();
}

uint64_t sub_1005712B0()
{
  NSObject *v0;
  const char *v2;
  uint8_t *v3;
  _WORD v4[8];
  uint8_t buf[1640];

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102144998);
  v0 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "*** CLDaemonCache::refresh not supported ***", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102144998);
    v4[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 1, "*** CLDaemonCache::refresh not supported ***", v4, 2);
    v3 = (uint8_t *)v2;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLDaemonCache::refresh()", "%s\n", v2);
    if (v3 != buf)
      free(v3);
  }
  return 0;
}

uint64_t sub_100571438(uint64_t a1, const void *a2)
{
  uint64_t v4;

  v4 = a1 + 128;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 128) + 16))(a1 + 128);
  sub_100525A5C((CFMutableDictionaryRef *)a1, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
}

void sub_1005714A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1005714BC(uint64_t a1, const void *a2)
{
  uint64_t v4;
  _BOOL8 v5;

  v4 = a1 + 128;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 128) + 16))(a1 + 128);
  v5 = sub_100527A58(a1, a2);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  return v5;
}

void sub_100571534(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100571548(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v6;

  v6 = a1 + 128;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 128) + 16))(a1 + 128);
  sub_10052A798(a1, a2, a3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
}

void sub_1005715C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005715D4(uint64_t a1, double *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[7];
  __int16 v8;

  v5 = a1 + 128;
  v4 = *(_QWORD *)(a1 + 128);
  v7[5] = a1 + 128;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 128);
  v8 = 256;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10057168C;
  v7[3] = &unk_10212ECA0;
  v7[4] = a1;
  sub_100585ED4(a1, a2, (uint64_t)v7);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
}

void sub_100571678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10057168C(uint64_t a1)
{
  return sub_100571694(*(_QWORD *)(a1 + 32));
}

uint64_t sub_100571694(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 128;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 128) + 16))(a1 + 128);
  sub_100586288(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

void sub_1005716F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100571708(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_100571734(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_100571760(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  _BOOL4 v8;
  NSObject *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  int v14;
  double v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  _BOOL4 v20;
  uint64_t v21;
  double v22;
  float v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  int v34;
  double v35;
  int v36;
  const char *v37;
  NSObject *v38;
  uint8_t *v39;
  _BYTE v40[24];
  __int128 v41;
  __int128 v42;
  uint8_t buf[4];
  double v44;
  __int16 v45;
  double v46;
  __int16 v47;
  double v48;
  __int16 v49;
  double v50;
  __int16 v51;
  int v52;
  __int16 v53;
  double v54;
  __int16 v55;
  int v56;
  __int16 v57;
  int v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  int v62;
  __int16 v63;
  _BOOL4 v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  double v68;
  __int16 v69;
  double v70;
  __int16 v71;
  double v72;
  __int16 v73;
  int v74;
  __int16 v75;
  uint64_t v76;
  __int16 v77;
  _BOOL4 v78;
  __int16 v79;
  int v80;
  __int16 v81;
  int v82;
  __int16 v83;
  int v84;
  __int16 v85;
  double v86;

  if (*(_BYTE *)(a2 + 352))
  {
    v8 = sub_100571C80((_BYTE *)a1, a2);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102144A08);
    v9 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
    {
      v10 = *(float *)a3;
      v11 = *(float *)(a3 + 4);
      v12 = *(float *)(a3 + 12);
      v13 = *(float *)(a3 + 20);
      v14 = *(_DWORD *)(a3 + 24);
      v15 = *(float *)(a3 + 28);
      v16 = *(_DWORD *)(a3 + 32);
      v17 = *(_DWORD *)(a3 + 36);
      v18 = *(_QWORD *)(a2 + 344);
      v19 = *(_DWORD *)(a2 + 288);
      v20 = *(double *)(a2 + 616) > 0.0;
      v21 = *(_QWORD *)(a2 + 656);
      v22 = *(float *)(a2 + 296);
      v23 = *(double *)(a2 + 560);
      v24 = *(_DWORD *)(a2 + 400);
      v25 = *(_QWORD *)(a2 + 408);
      v26 = *(unsigned __int8 *)(a1 + 88);
      v27 = *(unsigned __int8 *)(a1 + 89);
      v28 = *(unsigned __int8 *)(a1 + 90);
      v29 = *(float *)(a1 + 92);
      *(_DWORD *)buf = 134223360;
      v44 = v10;
      v45 = 2048;
      v46 = v11;
      v47 = 2048;
      v48 = v12;
      v49 = 2048;
      v50 = v13;
      v51 = 1024;
      v52 = v14;
      v53 = 2048;
      v54 = v15;
      v55 = 1024;
      v56 = v16;
      v57 = 1024;
      v58 = v17;
      v59 = 2048;
      v60 = v18;
      v61 = 1024;
      v62 = v19;
      v63 = 1024;
      v64 = v20;
      v65 = 2048;
      v66 = v21;
      v67 = 2048;
      v68 = v22;
      v69 = 2048;
      v70 = v23;
      v71 = 2048;
      v72 = a4;
      v73 = 1024;
      v74 = v24;
      v75 = 2048;
      v76 = v25;
      v77 = 1024;
      v78 = v8;
      v79 = 1024;
      v80 = v26;
      v81 = 1024;
      v82 = v27;
      v83 = 1024;
      v84 = v28;
      v85 = 2048;
      v86 = v29;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "GenericWorkoutCalorieModel,metHR,%f,metsWR,%f,metsPE,%f,userMets,%f,userMetsSource,%d,truthMets,%f,truthMetsSource,%d,PEType,%d,workout,%lu,actNoOverride,%d,gpsAvail,%d,rawGpsSpeed,%f,vm,%f,hr,%f,fhr,%f,steps,%d,pedDistance,%f,useFloor,%d,usePed,%d,gpsFloor,%d,motionFloor,%d,floor,%f", buf, 0xB6u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_102144A08);
      v30 = *(float *)a3;
      v31 = *(float *)(a3 + 4);
      v32 = *(float *)(a3 + 12);
      v33 = *(float *)(a3 + 20);
      v34 = *(_DWORD *)(a3 + 24);
      v35 = *(float *)(a3 + 28);
      v36 = *(_DWORD *)(a3 + 32);
      *(_DWORD *)v40 = 134223360;
      *(double *)&v40[4] = v30;
      *(_WORD *)&v40[12] = 2048;
      *(double *)&v40[14] = v31;
      *(_WORD *)&v40[22] = 2048;
      LOWORD(v41) = 2048;
      *(double *)((char *)&v41 + 2) = v33;
      WORD5(v41) = 1024;
      HIDWORD(v41) = v34;
      LOWORD(v42) = 2048;
      *(double *)((char *)&v42 + 2) = v35;
      WORD5(v42) = 1024;
      HIDWORD(v42) = v36;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "GenericWorkoutCalorieModel,metHR,%f,metsWR,%f,metsPE,%f,userMets,%f,userMetsSource,%d,truthMets,%f,truthMetsSource,%d,PEType,%d,workout,%lu,actNoOverride,%d,gpsAvail,%d,rawGpsSpeed,%f,vm,%f,hr,%f,fhr,%f,steps,%d,pedDistance,%f,useFloor,%d,usePed,%d,gpsFloor,%d,motionFloor,%d,floor,%f", v40, 182, *(_OWORD *)v40, *(_QWORD *)&v40[16], *(_QWORD *)&v32, v41, v42);
LABEL_19:
      v39 = (uint8_t *)v37;
      sub_100512490("Generic", 1, 0, 2, "void CLCalorieGenericWorkoutModel::logResults(const CLNatalieModelInput &, const CLMetsInfo &, float) const", "%s\n", v37);
      if (v39 != buf)
        free(v39);
    }
  }
  else
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102144A08);
    v38 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "Generic Calorie Workout Model is running out of session?", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_102144A08);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 1, "Generic Calorie Workout Model is running out of session?");
      goto LABEL_19;
    }
  }
}

BOOL sub_100571C80(_BYTE *a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _BOOL8 result;
  CLMotionActivity v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v4 = *(_OWORD *)(a2 + 232);
  v5 = *(_OWORD *)(a2 + 248);
  v15 = *(_QWORD *)(a2 + 280);
  v6 = *(_OWORD *)(a2 + 168);
  v7 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)&v11.isStanding = *(_OWORD *)(a2 + 184);
  *(_OWORD *)&v11.isVehicleConnected = v7;
  *(_OWORD *)&v11.vehicleType = *(_OWORD *)(a2 + 216);
  v12 = v4;
  *(_OWORD *)&v11.type = *(_OWORD *)(a2 + 152);
  *(_OWORD *)&v11.mountedConfidence = v6;
  v8 = *(_OWORD *)(a2 + 264);
  v13 = v5;
  v14 = v8;
  if ((CLMotionActivity::isInVehicle(&v11) & 1) != 0)
    return 0;
  if (a1[90] && *(float *)(a2 + 296) > 1.0)
    return 1;
  if (!a1[89])
    return *(double *)(a2 + 408) > 0.0 && a1[91] != 0;
  result = 1;
  if (*(double *)(a2 + 656) <= 0.447039992 && *(double *)(a2 + 616) > 0.0)
    return *(double *)(a2 + 408) > 0.0 && a1[91] != 0;
  return result;
}

void sub_100571D58(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  float v6;
  float v7;
  float v8;
  float v9;
  double v10;
  double v11;
  _BOOL4 v12;
  float v13;
  char v14;
  int v16;
  float v17;
  float v18;
  int v19;
  float v20;
  int v21;
  float v22;

  sub_100571F04(a1, a2, a3);
  v6 = *(float *)(a2 + 1368);
  v7 = *(float *)(a2 + 1372);
  v8 = *(double *)(a2 + 560);
  v9 = (*(float *)(a2 + 1380) - v8) / (*(float *)(a2 + 1380) - *(float *)(a2 + 1376));
  if (sub_100219944(a2) && (sub_100219944(a2) & 1) != 0)
  {
    v10 = *(double *)(a2 + 600);
    v11 = *(double *)a2;
    v12 = sub_100571C80((_BYTE *)a1, a2);
    if (v10 < v11)
    {
      v13 = v6 * sub_10108B14C(v9, v7);
      v14 = 1;
      goto LABEL_7;
    }
  }
  else
  {
    v12 = sub_100571C80((_BYTE *)a1, a2);
  }
  v14 = 0;
  v13 = 0.0;
LABEL_7:
  if ((float)(1.0 - v9) <= 0.3 || v13 <= *(float *)(a3 + 4))
  {
    v17 = *(float *)(a3 + 20);
    v16 = *(_DWORD *)(a3 + 24);
    v18 = *(float *)(a3 + 28);
    v19 = *(_DWORD *)(a3 + 32);
  }
  else
  {
    v16 = 1;
    v17 = v13;
    v18 = v13;
    v19 = 1;
  }
  *(float *)a3 = v13;
  *(_DWORD *)(a3 + 24) = v16;
  *(_DWORD *)(a3 + 32) = v19;
  if (v12)
  {
    v20 = *(float *)(a1 + 92);
    if (v20 > v17)
    {
      *(_DWORD *)(a3 + 24) = 3;
      v17 = v20;
    }
  }
  *(float *)&v21 = 2.1;
  if (v17 <= 2.1)
  {
    if ((v14 & 1) == 0)
      v21 = *(int *)(a1 + 92);
    *(_DWORD *)(a3 + 24) = 3;
    v17 = *(float *)&v21;
  }
  if (v17 < 2.1)
    v17 = 2.1;
  *(float *)(a3 + 20) = v17;
  if (v18 < 2.1)
    v18 = 2.1;
  *(float *)(a3 + 28) = v18;
  v22 = *(float *)(a3 + 12);
  if (v22 < 2.1)
    v22 = 2.1;
  *(float *)(a3 + 12) = v22;
  sub_100571760(a1, a2, a3, 1.0 - v9);
}

double sub_100571F04@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  __int128 v5;
  int v6;
  _OWORD v7[2];
  uint64_t v8;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 3;
  *(_QWORD *)(a3 + 32) = 3;
  if (*(_BYTE *)(a1 + 88))
  {
    sub_100572110(a1, a2, (uint64_t)v7);
    result = *(double *)v7;
    v5 = v7[1];
    *(_OWORD *)a3 = v7[0];
    *(_OWORD *)(a3 + 16) = v5;
    *(_QWORD *)(a3 + 32) = v8;
  }
  else
  {
    sub_1006B2E70();
    *(_DWORD *)(a3 + 4) = v6;
    *(_DWORD *)(a3 + 12) = v6;
    *(_DWORD *)(a3 + 20) = v6;
    *(_DWORD *)(a3 + 28) = v6;
    *(_DWORD *)(a3 + 24) = 0;
    result = COERCE_DOUBLE(&_mh_execute_header);
    *(_QWORD *)(a3 + 32) = &_mh_execute_header;
  }
  return result;
}

uint64_t sub_100571F90(uint64_t a1, uint64_t a2, double a3)
{
  int v6;
  int v7;
  unsigned int v8;

  if (sub_10009DBC8(a1 + 48, a2, a3))
    v6 = sub_101401A48(a1 + 8, a2);
  else
    v6 = 0;
  if (*(_BYTE *)(a1 + 89))
    v7 = (*(uint64_t (**)(_QWORD, double))(**(_QWORD **)(a2 + 16) + 48))(*(_QWORD *)(a2 + 16), a3);
  else
    v7 = 1;
  v8 = (*(uint64_t (**)(_QWORD, double))(**(_QWORD **)(a2 + 8) + 48))(*(_QWORD *)(a2 + 8), a3);
  if (v6)
    return v7 & v8;
  else
    return 0;
}

uint64_t sub_100572038(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t result;
  BOOL v7;
  _BYTE v8[232];

  sub_10009EB6C(a1 + 48, a2, a3);
  nullsub_1532(a1 + 8, a2, a3);
  if (!(*(unsigned int (**)(_QWORD, double))(**(_QWORD **)(a2 + 48) + 48))(*(_QWORD *)(a2 + 48), a3)
    || ((result = (*(uint64_t (**)(_QWORD, _BYTE *, double))(**(_QWORD **)(a2 + 48) + 24))(*(_QWORD *)(a2 + 48), v8, a3), (_DWORD)result)? (v7 = v8[208] == 0): (v7 = 0), !v7))
  {
    result = sub_1004C5730(*(_QWORD *)(a2 + 8));
    if (*(_BYTE *)(a1 + 89))
      return sub_1004C5730(*(_QWORD *)(a2 + 16));
  }
  return result;
}

float sub_100572110@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  float *v6;
  __int128 v7;
  float result;
  float v9[10];
  char v10;
  float v11;

  sub_10022B974(a1 + 48, a2);
  sub_101401A58(a1 + 8, a2, (uint64_t)v9);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 3;
  *(_QWORD *)(a3 + 32) = 3;
  if (sub_10004DD7C(*(unsigned int *)(a2 + 288)) && v11 > v9[1])
    v6 = (float *)&v10;
  else
    v6 = v9;
  v7 = *((_OWORD *)v6 + 1);
  *(_OWORD *)a3 = *(_OWORD *)v6;
  *(_OWORD *)(a3 + 16) = v7;
  *(_QWORD *)(a3 + 32) = *((_QWORD *)v6 + 4);
  result = *(float *)(a3 + 4);
  *(float *)(a3 + 20) = result;
  *(float *)(a3 + 28) = result;
  *(_DWORD *)(a3 + 24) = 0;
  *(_DWORD *)(a3 + 32) = 0;
  return result;
}

_QWORD *sub_1005721C4(_QWORD *a1)
{
  *a1 = off_1021449C8;
  a1[6] = off_10218CA60;
  sub_100261F44((uint64_t)(a1 + 9));
  sub_100261F44((uint64_t)(a1 + 7));
  return a1;
}

void sub_100572210(_QWORD *a1)
{
  *a1 = off_1021449C8;
  a1[6] = off_10218CA60;
  sub_100261F44((uint64_t)(a1 + 9));
  sub_100261F44((uint64_t)(a1 + 7));
  operator delete();
}

void sub_10057226C(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_100572298(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = a1 + 8;
  sub_1005722E4((uint64_t **)a1);
  return a1;
}

void sub_1005722CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100008848(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1005722E4(uint64_t **a1)
{
  int v2;
  std::string *v3;
  __int128 v4;
  BOOL v5;
  std::string v8;
  void *__p[2];
  std::string::size_type v10;

  sub_1015A2E04(__p, "WifiCentroidOverrides");
  sub_100572794(a1, (std::string::size_type)__p);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  v2 = 1;
  do
  {
    std::to_string(&v8, v2);
    v3 = std::string::insert(&v8, 0, "WifiCentroidOverrides");
    v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    v10 = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v8.__r_.__value_.__l.__data_);
    v5 = sub_100572794(a1, (std::string::size_type)__p);
    if (SHIBYTE(v10) < 0)
      operator delete(__p[0]);
  }
  while (v2++ != 100 && v5);
}

void sub_1005723BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005723F4(uint64_t **a1, std::string::size_type a2, uint64_t a3)
{
  NSObject *v6;
  int v7;
  std::string::size_type v8;
  std::string::size_type v9;
  std::string *v10;
  uint64_t v11;
  int v12;
  std::string::size_type v13;
  std::string::size_type v14;
  std::string *v15;
  char *v16;
  char *v17;
  std::string v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::string v26;
  std::string __p;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  uint8_t buf[4];
  std::string::size_type v34;
  __int16 v35;
  std::string *v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;

  memset(&v26, 0, sizeof(v26));
  v24 = 0;
  v25 = 0;
  v23 = 0;
  if (sub_1000BCB64(a3, "mac", &v26)
    && sub_1001FD98C(a3, "lat", &v25)
    && sub_1001FD98C(a3, "lon", &v24)
    && sub_1001FD98C(a3, "acc", &v23))
  {
    v22 = sub_1000CC740((uint64_t)&v26);
    sub_100033C18(v22, (uint64_t)&v19);
    *((_QWORD *)&v19 + 1) = v25;
    v20 = v24;
    v21 = v23;
    sub_100190354(a1, &v22, &v22, &v19);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102144A28);
    v6 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(char *)(a2 + 23);
      v8 = *(_QWORD *)a2;
      sub_1000C2254(&v22, &__p);
      v9 = v7 >= 0 ? a2 : v8;
      v10 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136381699;
      v34 = v9;
      v35 = 2081;
      v36 = v10;
      v37 = 2049;
      v38 = v25;
      v39 = 2049;
      v40 = v24;
      v41 = 2049;
      v42 = v23;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning, WifiCentroidOverrides, found defaults write %{private}s: %{private}s, latlon %{private}.7f, %{private}.7f, acc %{private}.1f", buf, 0x34u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102144A28);
      v11 = qword_1022A0048;
      v12 = *(char *)(a2 + 23);
      v13 = *(_QWORD *)a2;
      sub_1000C2254(&v22, &v18);
      if (v12 >= 0)
        v14 = a2;
      else
        v14 = v13;
      if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v15 = &v18;
      else
        v15 = (std::string *)v18.__r_.__value_.__r.__words[0];
      LODWORD(__p.__r_.__value_.__l.__data_) = 136381699;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v14;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2081;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v15;
      HIWORD(__p.__r_.__value_.__r.__words[2]) = 2049;
      v28 = v25;
      v29 = 2049;
      v30 = v24;
      v31 = 2049;
      v32 = v23;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 0, "#Warning, WifiCentroidOverrides, found defaults write %{private}s: %{private}s, latlon %{private}.7f, %{private}.7f, acc %{private}.1f", &__p, 52);
      v17 = v16;
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v18.__r_.__value_.__l.__data_);
      sub_100512490("Generic", 1, 0, 2, "void CLWifiCentroidDefaultsWriteOverrides::processWifiCentroidOverrideNameValuePair(const std::string &, const CLNameValuePair &)", "%s\n", v17);
      if (v17 != (char *)buf)
        free(v17);
    }
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
}

void sub_100572764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_100572794(uint64_t **a1, std::string::size_type a2)
{
  const char *v4;
  _BOOL8 v5;
  _BOOL8 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v11;
  std::__shared_weak_count *v12;
  _QWORD v13[2];

  sub_100119F3C(v13);
  sub_1001E4804(&v11);
  if (*(char *)(a2 + 23) >= 0)
    v4 = (const char *)a2;
  else
    v4 = *(const char **)a2;
  v5 = sub_100006BB4(v11, v4, v13);
  v6 = v5;
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (!v6)
        goto LABEL_10;
      goto LABEL_9;
    }
  }
  if (v5)
LABEL_9:
    sub_1005723F4(a1, a2, (uint64_t)v13);
LABEL_10:
  sub_10011A5A8(v13);
  return v6;
}

void sub_100572858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

void sub_100572880(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

uint64_t sub_1005728AC(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = a1 + 8;
  sub_100572900((_OWORD *)a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_1005728E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100008848(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *sub_100572900(_OWORD *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = (_QWORD *)result + 1;
    do
    {
      result = sub_100572984(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

_OWORD *sub_100572984(uint64_t **a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t *v6;
  _OWORD *v7;
  uint64_t **v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_100572A20(a1, a2, &v14, &v13, a3);
  v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x88uLL);
    v9 = *(_OWORD *)(a4 + 80);
    v7[6] = *(_OWORD *)(a4 + 64);
    v7[7] = v9;
    *((_QWORD *)v7 + 16) = *(_QWORD *)(a4 + 96);
    v10 = *(_OWORD *)(a4 + 16);
    v7[2] = *(_OWORD *)a4;
    v7[3] = v10;
    v11 = *(_OWORD *)(a4 + 48);
    v7[4] = *(_OWORD *)(a4 + 32);
    v7[5] = v11;
    sub_1000145B0(a1, v14, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *sub_100572A20(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, _QWORD *a5)
{
  _QWORD *v9;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD *v18;

  v9 = a1 + 1;
  if (a1 + 1 == a2 || sub_100191720(a5, a2 + 4))
  {
    if ((_QWORD *)*a1 == a2)
    {
      v12 = a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    v11 = (_QWORD *)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (_QWORD *)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (_QWORD *)v16[2];
        v17 = *v12 == (_QWORD)v16;
        v16 = v12;
      }
      while (v17);
    }
    if (sub_100191720(v12 + 4, a5))
      goto LABEL_16;
    return sub_100191690((uint64_t)a1, a3, a5);
  }
  if (sub_100191720(a2 + 4, a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (_QWORD *)a2[1];
      do
      {
        v15 = v14;
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = a2;
      do
      {
        v15 = (_QWORD *)v18[2];
        v17 = *v15 == (_QWORD)v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!sub_100191720(a5, v15 + 4))
        return sub_100191690((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  *a3 = a2;
  *a4 = (uint64_t)a2;
  return a4;
}

void sub_100572C48(id a1)
{
  qword_102301C38 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLVO2MaxServiceSilo"));
}

void sub_1005731F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10057343C(id a1)
{
  sub_100197040();
  if (sub_1000C4240())
    byte_102301C48 = 1;
}

void sub_100573D14()
{
  operator delete();
}

id sub_100573D90(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _objc_msgSend(a4, "onUserInfoUpdate:data:", a2, a3);
}

id sub_100573DA0(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "forceClearHistoryDatabase");
}

id sub_100573DA8(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "updateBypassParameters");
}

void sub_1005740BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  sub_100131740(&a9);
  _Unwind_Resume(a1);
}

void sub_100574528(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_102301C70);
  _Unwind_Resume(a1);
}

NSDictionary *sub_100574548(uint64_t a1)
{
  float v2;
  unint64_t v3;
  unint64_t v4;
  NSDictionary *v5;
  void *__p;
  _BYTE *v8;
  uint64_t v9;
  _QWORD v10[12];
  _QWORD v11[12];

  v10[0] = CFSTR("age_bin");
  v2 = *(float *)(*(_QWORD *)(a1 + 32) + 172);
  v8 = 0;
  v9 = 0;
  __p = 0;
  sub_10027205C(&__p, (const void *)qword_102301C58, unk_102301C60, (unk_102301C60 - qword_102301C58) >> 2);
  if (v8 == __p)
  {
    v3 = 0;
  }
  else
  {
    v3 = 0;
    v4 = (v8 - (_BYTE *)__p) >> 2;
    if (v4 <= 1)
      v4 = 1;
    while (*((float *)__p + v3) < v2)
    {
      if (v4 == ++v3)
      {
        v3 = v4;
        break;
      }
    }
  }
  v11[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v3);
  v10[1] = CFSTR("biologicalSex");
  v11[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 156));
  v11[2] = &off_10221B180;
  v10[2] = CFSTR("currentAlgVersion");
  v10[3] = CFSTR("reasonIneligible");
  v11[3] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 176));
  v10[4] = CFSTR("status");
  v11[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 60));
  v10[5] = CFSTR("estimateAverageDelta");
  v11[5] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 120));
  v10[6] = CFSTR("estimateVariabilityDelta");
  v11[6] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 168));
  v10[7] = CFSTR("highPercentileEstimateDelta");
  v11[7] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 160));
  v10[8] = CFSTR("meanPercentileDelta");
  v11[8] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 128));
  v10[9] = CFSTR("newEstimateN");
  v11[9] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 140));
  v10[10] = CFSTR("numUpdatedEstimatesTotal");
  v11[10] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 136));
  v10[11] = CFSTR("removeEstimateN");
  v11[11] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 144));
  v5 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v11, v10, 12);
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  return v5;
}

void sub_1005747A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  _Unwind_Resume(exception_object);
}

void sub_100574C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100574C7C(uint64_t a1, xpc_activity_t activity)
{
  NSObject *v4;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  xpc_object_t v8;
  int64_t int64;
  NSObject *v10;
  const char *v11;
  const char *v12;
  const char *v13;
  uint8_t *v14;
  int64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint8_t *v20;
  int v21;
  const char *v22;
  __int16 v23;
  int64_t v24;
  __int16 v25;
  uint64_t v26;
  uint8_t buf[4];
  const char *state;
  __int16 v29;
  int64_t v30;
  __int16 v31;
  uint64_t v32;

  if (xpc_activity_get_state(activity))
  {
    objc_msgSend(*(id *)(a1 + 32), "onRetrocomputePreprocessingActivity:", activity);
    if (xpc_activity_get_state(activity) == 2 && !xpc_activity_set_state(activity, 4))
    {
      if (qword_10229FEC0 != -1)
        dispatch_once(&qword_10229FEC0, &stru_102144B90);
      v4 = qword_10229FEC8;
      if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 134349056;
        state = (const char *)xpc_activity_get_state(activity);
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Failed to mark VO2MaxRetrocomputePreProcessing activity as Continue. Current state is %{public}ld", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FEC0 != -1)
          dispatch_once(&qword_10229FEC0, &stru_102144B90);
        v5 = qword_10229FEC8;
        v21 = 134349056;
        v22 = (const char *)xpc_activity_get_state(activity);
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v5, 17, "Failed to mark VO2MaxRetrocomputePreProcessing activity as Continue. Current state is %{public}ld", &v21, 12);
        v7 = (uint8_t *)v6;
        sub_100512490("Generic", 1, 0, 0, "-[CLVO2MaxService scheduleRetrocomputePreprocessing]_block_invoke", "%s\n", v6);
        if (v7 != buf)
          free(v7);
      }
    }
  }
  else
  {
    v8 = xpc_activity_copy_criteria(activity);
    if (!v8)
      v8 = xpc_dictionary_create(0, 0, 0);
    int64 = xpc_dictionary_get_int64(v8, XPC_ACTIVITY_DELAY);
    if (int64 == *(_QWORD *)(a1 + 40))
    {
      if (qword_10229FEC0 != -1)
        dispatch_once(&qword_10229FEC0, &stru_102144B90);
      v10 = qword_10229FEC8;
      if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *(const char **)(a1 + 40);
        *(_DWORD *)buf = 134349056;
        state = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "XPC_CHECK_IN: VO2MaxRetrocomputePreProcessing already scheduled with a delay of %{public}lld seconds", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FEC0 != -1)
          dispatch_once(&qword_10229FEC0, &stru_102144B90);
        v12 = *(const char **)(a1 + 40);
        v21 = 134349056;
        v22 = v12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEC8, 0, "XPC_CHECK_IN: VO2MaxRetrocomputePreProcessing already scheduled with a delay of %{public}lld seconds", &v21, 12);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 2, "-[CLVO2MaxService scheduleRetrocomputePreprocessing]_block_invoke", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
    else
    {
      v15 = int64;
      if (qword_10229FEC0 != -1)
        dispatch_once(&qword_10229FEC0, &stru_102144B90);
      v16 = qword_10229FEC8;
      if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_DEFAULT))
      {
        v17 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 136446722;
        state = "com.apple.locationd.VO2Max.RetrocomputePreprocessing";
        v29 = 2050;
        v30 = v15;
        v31 = 2050;
        v32 = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "XPC_CHECK_IN: %{public}s: Overwriting previous delay (%{public}lld) with a new delay of %{public}lld seconds", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FEC0 != -1)
          dispatch_once(&qword_10229FEC0, &stru_102144B90);
        v18 = *(_QWORD *)(a1 + 40);
        v21 = 136446722;
        v22 = "com.apple.locationd.VO2Max.RetrocomputePreprocessing";
        v23 = 2050;
        v24 = v15;
        v25 = 2050;
        v26 = v18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEC8, 0, "XPC_CHECK_IN: %{public}s: Overwriting previous delay (%{public}lld) with a new delay of %{public}lld seconds", &v21, 32);
        v20 = (uint8_t *)v19;
        sub_100512490("Generic", 1, 0, 2, "-[CLVO2MaxService scheduleRetrocomputePreprocessing]_block_invoke", "%s\n", v19);
        if (v20 != buf)
          free(v20);
      }
      xpc_dictionary_set_int64(v8, XPC_ACTIVITY_DELAY, *(_QWORD *)(a1 + 40));
      xpc_dictionary_set_int64(v8, XPC_ACTIVITY_GRACE_PERIOD, XPC_ACTIVITY_INTERVAL_1_HOUR);
      xpc_dictionary_set_string(v8, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
      xpc_dictionary_set_BOOL(v8, XPC_ACTIVITY_REQUIRES_CLASS_B, 1);
      xpc_dictionary_set_BOOL(v8, XPC_ACTIVITY_ALLOW_BATTERY, 1);
      xpc_activity_set_criteria(activity, v8);
    }
    xpc_release(v8);
  }
}

void sub_10057548C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100576FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  _Block_object_dispose(&a41, 8);
  _Block_object_dispose(&STACK[0x850], 8);
  sub_100261F44((uint64_t)&a45);
  _Unwind_Resume(a1);
}

__n128 sub_100577088(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1005770AC(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  sub_1005805F4(&v1);
}

void sub_1005770D4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  NSObject *v5;
  const char *v6;
  char *v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  id v27;
  id v28;
  id v29;
  id v30;
  const char *v31;
  char *v32;
  const char *v33;
  char *v34;
  id v35;
  NSObject *v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[24];
  id v47;
  __int16 v48;
  id v49;
  __int16 v50;
  id v51;
  uint8_t v52[128];
  _BYTE buf[24];
  id v54;
  _BYTE v55[12];
  _BYTE v56[20];
  uint64_t v57;

  if (a4)
  {
    if (objc_msgSend(a4, "code") == (id)6)
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
      if (qword_10229FEC0 != -1)
        dispatch_once(&qword_10229FEC0, &stru_102144B90);
      v5 = qword_10229FEC8;
      if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "HealthKit VO2Max query failed due to device lock", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_57;
      bzero(buf, 0x65CuLL);
      if (qword_10229FEC0 != -1)
        dispatch_once(&qword_10229FEC0, &stru_102144B90);
      *(_WORD *)v46 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEC8, 0, "HealthKit VO2Max query failed due to device lock", v46, 2);
      v7 = (char *)v6;
      sub_100512490("Generic", 1, 0, 2, "-[CLVO2MaxService executeRetrocomputePreprocessing:]_block_invoke", "%s\n", v6);
      if (v7 == buf)
        goto LABEL_57;
LABEL_61:
      free(v7);
      goto LABEL_57;
    }
    if (qword_10229FEC0 != -1)
      dispatch_once(&qword_10229FEC0, &stru_102144B90);
    v36 = qword_10229FEC8;
    if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = objc_msgSend(a4, "code");
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "HealthKit VO2Max query encountered error,%{public}ld", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FEC0 != -1)
        dispatch_once(&qword_10229FEC0, &stru_102144B90);
      v37 = qword_10229FEC8;
      *(_DWORD *)v46 = 134349056;
      *(_QWORD *)&v46[4] = objc_msgSend(a4, "code");
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v37, 16, "HealthKit VO2Max query encountered error,%{public}ld", v46, 12);
      v7 = (char *)v38;
      sub_100512490("Generic", 1, 0, 0, "-[CLVO2MaxService executeRetrocomputePreprocessing:]_block_invoke", "%s\n", v38);
      if (v7 != buf)
        goto LABEL_61;
    }
  }
  else
  {
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v8 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v42, v52, 16);
    if (v8)
    {
      v9 = *(_QWORD *)v43;
      do
      {
        v10 = 0;
        do
        {
          if (*(_QWORD *)v43 != v9)
            objc_enumerationMutation(a3);
          v11 = *(void **)(*((_QWORD *)&v42 + 1) + 8 * (_QWORD)v10);
          objc_msgSend(objc_msgSend(v11, "quantity"), "doubleValueForUnit:", +[HKUnit unitFromString:](HKUnit, "unitFromString:", CFSTR("ml/(kg*min)")));
          v13 = v12;
          if (qword_10229FEC0 != -1)
            dispatch_once(&qword_10229FEC0, &stru_102144B90);
          v14 = qword_10229FEC8;
          if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_DEFAULT))
          {
            v15 = objc_msgSend(objc_msgSend(v11, "startDate"), "description");
            v16 = objc_msgSend(objc_msgSend(v11, "endDate"), "description");
            v17 = objc_msgSend(objc_msgSend(v11, "metadata"), "description");
            v18 = objc_msgSend(objc_msgSend(v11, "sourceRevision"), "description");
            *(_DWORD *)buf = 134284547;
            *(_QWORD *)&buf[4] = v13;
            *(_WORD *)&buf[12] = 2113;
            *(_QWORD *)&buf[14] = v15;
            *(_WORD *)&buf[22] = 2113;
            v54 = v16;
            *(_WORD *)v55 = 2113;
            *(_QWORD *)&v55[2] = v17;
            *(_WORD *)&v55[10] = 2113;
            *(_QWORD *)v56 = v18;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Retrieved sample... VO2Max: %{private}f, startTime: %{private}@, endTime: %{private}@, metadata: %{private}@, sourceRevision: %{private}@", buf, 0x34u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FEC0 != -1)
              dispatch_once(&qword_10229FEC0, &stru_102144B90);
            v26 = qword_10229FEC8;
            v27 = objc_msgSend(objc_msgSend(v11, "startDate"), "description");
            v28 = objc_msgSend(objc_msgSend(v11, "endDate"), "description");
            v29 = objc_msgSend(objc_msgSend(v11, "metadata"), "description");
            v30 = objc_msgSend(objc_msgSend(v11, "sourceRevision"), "description");
            *(_DWORD *)v46 = 134284547;
            *(_QWORD *)&v46[4] = v13;
            *(_WORD *)&v46[12] = 2113;
            *(_QWORD *)&v46[14] = v27;
            *(_WORD *)&v46[22] = 2113;
            v47 = v28;
            v48 = 2113;
            v49 = v29;
            v50 = 2113;
            v51 = v30;
            LODWORD(v39) = 52;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 0, "Retrieved sample... VO2Max: %{private}f, startTime: %{private}@, endTime: %{private}@, metadata: %{private}@, sourceRevision: %{private}@", v46, v39);
            v32 = (char *)v31;
            sub_100512490("Generic", 1, 0, 2, "-[CLVO2MaxService executeRetrocomputePreprocessing:]_block_invoke", "%s\n", v31);
            if (v32 != buf)
              free(v32);
          }
          if (objc_msgSend(v11, "metadata")
            && objc_msgSend(objc_msgSend(v11, "metadata"), "objectForKeyedSubscript:", HKMetadataKeySyncIdentifier)
            && objc_msgSend(objc_msgSend(v11, "metadata"), "objectForKeyedSubscript:", HKMetadataKeySyncVersion))
          {
            objc_msgSend(objc_msgSend(v11, "startDate"), "timeIntervalSinceReferenceDate");
            *(_QWORD *)buf = v19;
            objc_msgSend(objc_msgSend(v11, "endDate"), "timeIntervalSinceReferenceDate");
            *(_QWORD *)&buf[8] = v20;
            *(_QWORD *)&buf[16] = v13;
            v54 = 0;
            *(_QWORD *)v55 = 0;
            v55[8] = objc_msgSend(objc_msgSend(objc_msgSend(v11, "metadata"), "objectForKeyedSubscript:", HKMetadataKeySyncVersion), "intValue");
            *(_DWORD *)&v55[8] = v55[8];
            sub_1015A2E04(&v56[4], "");
            if (objc_msgSend(v11, "sourceRevision") && objc_msgSend(objc_msgSend(v11, "sourceRevision"), "source"))
            {
              sub_1015A2E04(v46, (char *)objc_msgSend(objc_msgSend(objc_msgSend(objc_msgSend(v11, "sourceRevision"), "source"), "bundleIdentifier"), "UTF8String"));
              if (SHIBYTE(v57) < 0)
                operator delete(*(void **)&v56[4]);
              *(_OWORD *)&v56[4] = *(_OWORD *)v46;
              v57 = *(_QWORD *)&v46[16];
            }
            objc_msgSend(objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", objc_msgSend(objc_msgSend(v11, "metadata"), "objectForKeyedSubscript:", HKMetadataKeySyncIdentifier)), "getUUIDBytes:", &v54);
            v21 = *(uint64_t **)(*(_QWORD *)(a1 + 48) + 8);
            v22 = v21 + 6;
            v23 = v21[7];
            if (v23 >= v21[8])
            {
              v24 = sub_1005806F0(v22, (__int128 *)buf);
            }
            else
            {
              sub_100580680((uint64_t)v22, (__int128 *)buf);
              v24 = v23 + 72;
            }
            v21[7] = v24;
            if (SHIBYTE(v57) < 0)
              operator delete(*(void **)&v56[4]);
          }
          else
          {
            if (qword_10229FEC0 != -1)
              dispatch_once(&qword_10229FEC0, &stru_102144B90);
            v25 = qword_10229FEC8;
            if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Will not attempt to retrocompute sample due to missing metadata", buf, 2u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_10229FEC0 != -1)
                dispatch_once(&qword_10229FEC0, &stru_102144B90);
              *(_WORD *)v46 = 0;
              LODWORD(v39) = 2;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEC8, 0, "Will not attempt to retrocompute sample due to missing metadata", v46, v39);
              v34 = (char *)v33;
              sub_100512490("Generic", 1, 0, 2, "-[CLVO2MaxService executeRetrocomputePreprocessing:]_block_invoke", "%s\n", v33);
              if (v34 != buf)
                free(v34);
            }
          }
          v10 = (char *)v10 + 1;
        }
        while (v8 != v10);
        v35 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v42, v52, 16);
        v8 = v35;
      }
      while (v35);
    }
  }
LABEL_57:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1005779A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;

  if (a64 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

id sub_1005779D8(uint64_t a1)
{
  NSObject *v2;
  id result;
  NSObject *v4;
  xpc_activity_state_t state;
  uint64_t v6;
  unsigned __int8 v7;
  const int64_t *v8;
  const char *v9;
  uint8_t *v10;
  uint64_t v11;
  xpc_activity_state_t v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  xpc_activity_state_t v17;
  uint8_t buf[4];
  xpc_activity_state_t v19;

  dispatch_release(*(dispatch_object_t *)(a1 + 32));
  if (!xpc_activity_should_defer(*(xpc_activity_t *)(a1 + 40)))
  {
LABEL_13:
    v6 = *(_QWORD *)(a1 + 56);
    if (!*(_BYTE *)(*(_QWORD *)(v6 + 8) + 24))
    {
      v7 = objc_msgSend(*(id *)(a1 + 48), "retrocomputeForSamples:withRetrocomputeHistory:", *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 48, *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 48);
      v6 = *(_QWORD *)(a1 + 56);
      if ((v7 & 2) != 0)
      {
        *(_BYTE *)(*(_QWORD *)(v6 + 8) + 24) = 1;
        v6 = *(_QWORD *)(a1 + 56);
      }
    }
    if (*(_BYTE *)(*(_QWORD *)(v6 + 8) + 24))
      v8 = &XPC_ACTIVITY_INTERVAL_30_MIN;
    else
      v8 = &XPC_ACTIVITY_INTERVAL_1_DAY;
    result = objc_msgSend(*(id *)(a1 + 48), "resetRetrocomputePreProcessingActivity:withDelay:", *(_QWORD *)(a1 + 40), *v8);
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24))
      return objc_msgSend(*(id *)(a1 + 48), "sendRetroComputeAnalytics");
    return result;
  }
  if (qword_10229FEC0 != -1)
    dispatch_once(&qword_10229FEC0, &stru_102144B90);
  v2 = qword_10229FEC8;
  if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Attempting to defer VO2MaxRetrocomputePreProcessing activity", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEC0 != -1)
      dispatch_once(&qword_10229FEC0, &stru_102144B90);
    LOWORD(v16) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEC8, 0, "Attempting to defer VO2MaxRetrocomputePreProcessing activity", &v16, 2);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "-[CLVO2MaxService executeRetrocomputePreprocessing:]_block_invoke", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  result = (id)xpc_activity_set_state(*(xpc_activity_t *)(a1 + 40), 3);
  if ((result & 1) == 0)
  {
    if (qword_10229FEC0 != -1)
      dispatch_once(&qword_10229FEC0, &stru_102144B90);
    v4 = qword_10229FEC8;
    if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_FAULT))
    {
      state = xpc_activity_get_state(*(xpc_activity_t *)(a1 + 40));
      *(_DWORD *)buf = 134349056;
      v19 = state;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Failed to mark VO2MaxRetrocomputePreProcessing activity as deferred. Current state is %{public}ld", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FEC0 != -1)
        dispatch_once(&qword_10229FEC0, &stru_102144B90);
      v11 = qword_10229FEC8;
      v12 = xpc_activity_get_state(*(xpc_activity_t *)(a1 + 40));
      v16 = 134349056;
      v17 = v12;
      LODWORD(v15) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 17, "Failed to mark VO2MaxRetrocomputePreProcessing activity as deferred. Current state is %{public}ld", &v16, v15);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 0, "-[CLVO2MaxService executeRetrocomputePreprocessing:]_block_invoke", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    goto LABEL_13;
  }
  return result;
}

uint64_t sub_100577D68(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(result + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(result + 88) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_100577D8C(uint64_t a1)
{
  return sub_100261F44(a1 + 80);
}

void sub_10057874C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100579E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  _QWORD *v28;

  v28 = (_QWORD *)a17;
  a17 = 0;
  if (v28)
    sub_10058208C((uint64_t)&a17, v28);
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a23)
  {
    a24 = (uint64_t)a23;
    operator delete(a23);
  }
  if (a26)
  {
    a27 = (uint64_t)a26;
    operator delete(a26);
  }
  sub_10057A1D0((uint64_t)&STACK[0x300]);
  _Unwind_Resume(a1);
}

void sub_100579F98()
{
  operator new();
}

void sub_10057A078(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100261F44((uint64_t)&a9);
  sub_100261F44((uint64_t)&a11);
  operator delete();
}

uint64_t sub_10057A0AC(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE *v13;
  __int128 v14;

  v4 = *a2;
  *(_OWORD *)(a1 + 9) = *(__int128 *)((char *)a2 + 9);
  *(_OWORD *)a1 = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  sub_10055CCF0((_QWORD *)(a1 + 32), *((const void **)a2 + 4), *((_QWORD *)a2 + 5), 0xD37A6F4DE9BD37A7 * ((uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3));
  *(_OWORD *)(a1 + 56) = *(__int128 *)((char *)a2 + 56);
  v5 = *(__int128 *)((char *)a2 + 72);
  v6 = *(__int128 *)((char *)a2 + 88);
  v7 = *(__int128 *)((char *)a2 + 104);
  *(_OWORD *)(a1 + 120) = *(__int128 *)((char *)a2 + 120);
  *(_OWORD *)(a1 + 104) = v7;
  *(_OWORD *)(a1 + 88) = v6;
  *(_OWORD *)(a1 + 72) = v5;
  v8 = *(__int128 *)((char *)a2 + 136);
  v9 = *(__int128 *)((char *)a2 + 152);
  v10 = *(__int128 *)((char *)a2 + 168);
  *(_OWORD *)(a1 + 184) = *(__int128 *)((char *)a2 + 184);
  *(_OWORD *)(a1 + 168) = v10;
  *(_OWORD *)(a1 + 152) = v9;
  *(_OWORD *)(a1 + 136) = v8;
  v11 = *(__int128 *)((char *)a2 + 200);
  v12 = *(__int128 *)((char *)a2 + 216);
  *(_OWORD *)(a1 + 228) = *(__int128 *)((char *)a2 + 228);
  *(_OWORD *)(a1 + 216) = v12;
  *(_OWORD *)(a1 + 200) = v11;
  v13 = (_BYTE *)(a1 + 248);
  if (*((char *)a2 + 271) < 0)
  {
    sub_100115CE4(v13, *((void **)a2 + 31), *((_QWORD *)a2 + 32));
  }
  else
  {
    v14 = *(__int128 *)((char *)a2 + 248);
    *(_QWORD *)(a1 + 264) = *((_QWORD *)a2 + 33);
    *(_OWORD *)v13 = v14;
  }
  *(_DWORD *)(a1 + 272) = *((_DWORD *)a2 + 68);
  return a1;
}

void sub_10057A1B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10057A1D0(uint64_t a1)
{
  void *v2;

  if (*(char *)(a1 + 271) < 0)
    operator delete(*(void **)(a1 + 248));
  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_10057A464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10057B3C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  if (__p)
    operator delete(__p);
  a39 = (uint64_t)&a21;
  sub_100582124((void ***)&a39);
  a39 = (uint64_t)&a24;
  sub_100582124((void ***)&a39);
  _Unwind_Resume(a1);
}

uint64_t sub_10057B460(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_OWORD *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  v7 = *(_OWORD *)(a2 + 80);
  v8 = *(_OWORD *)(a2 + 96);
  v9 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v9;
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 96) = v8;
  v10 = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = v10;
  v11 = a1 + 160;
  if (*(char *)(a2 + 183) < 0)
  {
    sub_100115CE4((_BYTE *)v11, *(void **)(a2 + 160), *(_QWORD *)(a2 + 168));
  }
  else
  {
    v12 = *(_OWORD *)(a2 + 160);
    *(_QWORD *)(v11 + 16) = *(_QWORD *)(a2 + 176);
    *(_OWORD *)v11 = v12;
  }
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  return a1;
}

void sub_10057BA90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  sub_100131740(&a11);
  _Unwind_Resume(a1);
}

id sub_10057BF54(uint64_t a1, char a2, uint64_t a3)
{
  NSObject *v4;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  uint64_t v13;
  uint8_t buf[4];
  uint64_t v15;

  if ((a2 & 1) != 0)
  {
    if (qword_10229FEC0 != -1)
      dispatch_once(&qword_10229FEC0, &stru_102144B90);
    v4 = qword_10229FEC8;
    if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Retrocomputed VO2Max sample successfully pushed to HKHealthStore", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FEC0 != -1)
        dispatch_once(&qword_10229FEC0, &stru_102144B90);
      LOWORD(v12) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEC8, 0, "Retrocomputed VO2Max sample successfully pushed to HKHealthStore", &v12, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "-[CLVO2MaxService saveStagingOutputToHealthKit:activity:]_block_invoke", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    return objc_msgSend(*(id *)(a1 + 32), "onRetrocomputeHealthKitSampleSavedWithStartTime:activity:", *(_QWORD *)(a1 + 40), *(double *)(a1 + 48));
  }
  else
  {
    if (qword_10229FEC0 != -1)
      dispatch_once(&qword_10229FEC0, &stru_102144B90);
    v7 = qword_10229FEC8;
    if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v15 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Retrocomputed VO2Max sample failed to push to HKHealthStore, %{public}@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FEC0 != -1)
        dispatch_once(&qword_10229FEC0, &stru_102144B90);
      v12 = 138543362;
      v13 = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEC8, 16, "Retrocomputed VO2Max sample failed to push to HKHealthStore, %{public}@", &v12, 12);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "-[CLVO2MaxService saveStagingOutputToHealthKit:activity:]_block_invoke", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    return objc_msgSend(*(id *)(a1 + 32), "onRetrocomputeHealthKitSampleFailed:", *(_QWORD *)(a1 + 40));
  }
}

id sub_10057C244(uint64_t a1, char a2, uint64_t a3)
{
  NSObject *v4;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  uint64_t v13;
  uint8_t buf[4];
  uint64_t v15;

  if ((a2 & 1) != 0)
  {
    if (qword_10229FEC0 != -1)
      dispatch_once(&qword_10229FEC0, &stru_102144B90);
    v4 = qword_10229FEC8;
    if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Retrocomputed VO2Max sample successfully pushed to HKHealthStore", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FEC0 != -1)
        dispatch_once(&qword_10229FEC0, &stru_102144B90);
      LOWORD(v12) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEC8, 0, "Retrocomputed VO2Max sample successfully pushed to HKHealthStore", &v12, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "-[CLVO2MaxService saveStagingOutputToHealthKit:activity:]_block_invoke", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    return objc_msgSend(*(id *)(a1 + 32), "onRetrocomputeHealthKitSampleSavedWithStartTime:activity:", *(_QWORD *)(a1 + 40), *(double *)(a1 + 48));
  }
  else
  {
    if (qword_10229FEC0 != -1)
      dispatch_once(&qword_10229FEC0, &stru_102144B90);
    v7 = qword_10229FEC8;
    if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v15 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Retrocomputed VO2Max sample failed to push to HKHealthStore, %{public}@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FEC0 != -1)
        dispatch_once(&qword_10229FEC0, &stru_102144B90);
      v12 = 138543362;
      v13 = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEC8, 16, "Retrocomputed VO2Max sample failed to push to HKHealthStore, %{public}@", &v12, 12);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "-[CLVO2MaxService saveStagingOutputToHealthKit:activity:]_block_invoke", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    return objc_msgSend(*(id *)(a1 + 32), "onRetrocomputeHealthKitSampleFailed:", *(_QWORD *)(a1 + 40));
  }
}

void sub_10057C9E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10057CF58(uint64_t a1, _xpc_activity_s *a2)
{
  NSObject *v3;
  uint64_t v4;
  const char *v5;
  uint8_t *v6;
  int v7;
  const char *v8;
  __int16 v9;
  xpc_activity_state_t v10;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  xpc_activity_state_t state;

  objc_msgSend(*(id *)(a1 + 32), "onRetryTriggerRetrocompute:", a2);
  if (xpc_activity_get_state(a2) == 2 && !xpc_activity_set_state(a2, 4))
  {
    if (qword_10229FEC0 != -1)
      dispatch_once(&qword_10229FEC0, &stru_102144B90);
    v3 = qword_10229FEC8;
    if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446466;
      v12 = "com.apple.locationd.VO2Max.RetrocomputeRetryTrigger";
      v13 = 2050;
      state = xpc_activity_get_state(a2);
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Failed to mark %{public}s activity as Continue. Current state is %{public}ld", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FEC0 != -1)
        dispatch_once(&qword_10229FEC0, &stru_102144B90);
      v4 = qword_10229FEC8;
      v7 = 136446466;
      v8 = "com.apple.locationd.VO2Max.RetrocomputeRetryTrigger";
      v9 = 2050;
      v10 = xpc_activity_get_state(a2);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v4, 17, "Failed to mark %{public}s activity as Continue. Current state is %{public}ld", &v7, 22);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "-[CLVO2MaxService retryTriggerRetrocompute]_block_invoke", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
}

void sub_10057DDEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  sub_100131740(&a11);
  _Unwind_Resume(a1);
}

void sub_10057E2B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10057E57C(uint64_t a1, _xpc_activity_s *a2)
{
  NSObject *v3;
  uint64_t v4;
  const char *v5;
  uint8_t *v6;
  int v7;
  xpc_activity_state_t v8;
  uint8_t buf[4];
  xpc_activity_state_t state;

  objc_msgSend(*(id *)(a1 + 32), "onRetryHealthKitDeleteSamples:", a2);
  if (xpc_activity_get_state(a2) == 2 && !xpc_activity_set_state(a2, 4))
  {
    if (qword_10229FEC0 != -1)
      dispatch_once(&qword_10229FEC0, &stru_102144B90);
    v3 = qword_10229FEC8;
    if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134349056;
      state = xpc_activity_get_state(a2);
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Failed to mark activity as Continue. Current state is %{public}ld", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FEC0 != -1)
        dispatch_once(&qword_10229FEC0, &stru_102144B90);
      v4 = qword_10229FEC8;
      v7 = 134349056;
      v8 = xpc_activity_get_state(a2);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v4, 17, "Failed to mark activity as Continue. Current state is %{public}ld", &v7, 12);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "-[CLVO2MaxService retryHealthKitDeleteSamples]_block_invoke", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
}

void sub_10057EA7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

void sub_10057F2BC(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  uint8_t *v13;
  uint64_t v14;
  _DWORD v15[2];
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;

  if (qword_10229FEC0 != -1)
    dispatch_once(&qword_10229FEC0, &stru_102144B90);
  v8 = qword_10229FEC8;
  if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109634;
    v21 = a2;
    v22 = 2048;
    v23 = a3;
    v24 = 2112;
    v25 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Delete HK Sessions,success,%d,deletedObjectCount,%lu,error,%@", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEC0 != -1)
      dispatch_once(&qword_10229FEC0, &stru_102144B90);
    v15[0] = 67109634;
    v15[1] = a2;
    v16 = 2048;
    v17 = a3;
    v18 = 2112;
    v19 = a4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEC8, 2, "Delete HK Sessions,success,%d,deletedObjectCount,%lu,error,%@", v15, 28);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "-[CLVO2MaxService deleteSessionsFromHealthKit:withRetry:]_block_invoke", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  if (a2)
  {
    if (qword_10229FEC0 != -1)
      dispatch_once(&qword_10229FEC0, &stru_102144B90);
    v9 = qword_10229FEC8;
    if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Successfully deleted samples from HKHealthStore", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FEC0 != -1)
        dispatch_once(&qword_10229FEC0, &stru_102144B90);
      LOWORD(v15[0]) = 0;
      LODWORD(v14) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEC8, 1, "Successfully deleted samples from HKHealthStore", v15, v14);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "-[CLVO2MaxService deleteSessionsFromHealthKit:withRetry:]_block_invoke", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 124) = 1;
  }
  else if (*(_BYTE *)(a1 + 48))
  {
    objc_msgSend(*(id *)(a1 + 40), "retryHealthKitDeleteSamples");
  }
}

void sub_100580138(id a1)
{
  qword_10229FEC8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "VO2Max");
}

Class sub_100580164()
{
  Class result;

  if (qword_102301C80 != -1)
    dispatch_once(&qword_102301C80, &stru_102144BB0);
  result = objc_getClass("NRPairedDeviceRegistry");
  qword_102301C78 = (uint64_t)result;
  off_1022A2D90 = sub_1005801C0;
  return result;
}

uint64_t sub_1005801C0()
{
  return qword_102301C78;
}

void sub_1005801CC(id a1)
{
  qword_102301C88 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/NanoRegistry.framework/NanoRegistry", 2);
}

_QWORD *sub_1005801F4@<X0>(unsigned __int8 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x1C0uLL);
  result = sub_10058024C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100580238(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10058024C(_QWORD *a1, unsigned __int8 *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_102144BE0;
  sub_101412C28(a1 + 3, *a2);
  return a1;
}

void sub_100580288(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10058029C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102144BE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1005802B0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102144BE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1005802E4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

_QWORD *sub_1005802F4@<X0>(unsigned __int8 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x1E0uLL);
  result = sub_10058034C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100580338(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10058034C(_QWORD *a1, unsigned __int8 *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_102144C30;
  sub_100681294(a1 + 3, *a2);
  return a1;
}

void sub_100580388(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10058039C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102144C30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1005803B0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102144C30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1005803E4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

_QWORD *sub_1005803F4@<X0>(unsigned __int8 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x208uLL);
  result = sub_10058044C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100580438(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10058044C(_QWORD *a1, unsigned __int8 *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_102144C80;
  sub_1011E9EC0(a1 + 3, *a2);
  return a1;
}

void sub_100580488(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10058049C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102144C80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1005804B0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102144C80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1005804E4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

_QWORD *sub_1005804F4@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x28uLL);
  result = sub_10058054C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100580538(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10058054C(_QWORD *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_102144CD0;
  sub_100131938(a1 + 3, *a2, 0);
  return a1;
}

void sub_10058058C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1005805A0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102144CD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1005805B4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102144CD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

id *sub_1005805E8(uint64_t a1)
{
  return sub_100131740((id *)(a1 + 24));
}

void sub_1005805F4(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_100580634((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_100580634(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 72)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

_BYTE *sub_100580680(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _BYTE *result;
  __int128 v7;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *a2;
  v5 = a2[1];
  *(_OWORD *)(v3 + 28) = *(__int128 *)((char *)a2 + 28);
  *(_OWORD *)v3 = v4;
  *(_OWORD *)(v3 + 16) = v5;
  result = (_BYTE *)(v3 + 48);
  if (*((char *)a2 + 71) < 0)
  {
    result = sub_100115CE4(result, *((void **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v7 = a2[3];
    *(_QWORD *)(v3 + 64) = *((_QWORD *)a2 + 8);
    *(_OWORD *)result = v7;
  }
  *(_QWORD *)(a1 + 8) = v3 + 72;
  return result;
}

void sub_1005806E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1005806F0(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  _BYTE *v14;
  __int128 v15;
  uint64_t v16;
  _QWORD v18[2];
  char *v19;
  char *v20;
  uint64_t *v21;

  v3 = *a1;
  v4 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x38E38E38E38E38ELL)
    sub_100259694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x8E38E38E38E38E39 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x1C71C71C71C71C7)
    v9 = 0x38E38E38E38E38ELL;
  else
    v9 = v5;
  v21 = a1 + 2;
  if (v9)
    v10 = (char *)sub_10029D26C(v7, v9);
  else
    v10 = 0;
  v11 = &v10[72 * v4];
  v18[0] = v10;
  v18[1] = v11;
  v19 = v11;
  v20 = &v10[72 * v9];
  v12 = *a2;
  v13 = a2[1];
  *(_OWORD *)(v11 + 28) = *(__int128 *)((char *)a2 + 28);
  *(_OWORD *)v11 = v12;
  *((_OWORD *)v11 + 1) = v13;
  v14 = v11 + 48;
  if (*((char *)a2 + 71) < 0)
  {
    sub_100115CE4(v14, *((void **)a2 + 6), *((_QWORD *)a2 + 7));
    v11 = v19;
  }
  else
  {
    v15 = a2[3];
    *((_QWORD *)v11 + 8) = *((_QWORD *)a2 + 8);
    *(_OWORD *)v14 = v15;
  }
  v19 = v11 + 72;
  sub_10058083C(a1, v18);
  v16 = a1[1];
  sub_1005809DC((uint64_t)v18);
  return v16;
}

void sub_100580828(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1005809DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10058083C(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1005808B0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1005808B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _QWORD v14[3];
  char v15;
  __int128 v16;
  __int128 v17;

  v7 = a7;
  *(_QWORD *)&v17 = a6;
  *((_QWORD *)&v17 + 1) = a7;
  v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 72);
      v11 = *(_OWORD *)(a3 - 56);
      *(_OWORD *)(v9 - 44) = *(_OWORD *)(a3 - 44);
      *(_OWORD *)(v9 - 56) = v11;
      *(_OWORD *)(v9 - 72) = v10;
      v12 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v12;
      v9 -= 72;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 72;
      a3 -= 72;
    }
    while (a3 != a5);
    *((_QWORD *)&v17 + 1) = v9;
  }
  v15 = 1;
  sub_100580964((uint64_t)v14);
  return a6;
}

uint64_t sub_100580964(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_100580998(a1);
  return a1;
}

void sub_100580998(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 71) < 0)
      operator delete(*(void **)(v1 + 48));
    v1 += 72;
  }
}

uint64_t sub_1005809DC(uint64_t a1)
{
  sub_100580A10(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_100580A10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 72;
      *(_QWORD *)(a1 + 16) = v2 - 72;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        v5 = *(_QWORD *)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

void sub_100580A64(uint64_t a1, double *a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  unint64_t v23;
  double *v24;
  double *v25;
  double v26;
  double *v27;
  double v28;
  double *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  double v33;
  double v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  unint64_t v42;
  double v43;
  double *v44;
  double *v45;
  double v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  double v50;
  double v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 *v58;
  __int128 *v59;
  __int128 *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  double v66;
  double v67;
  __int128 v68;
  __int128 v69;
  double v70;
  double v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  double *v75;
  BOOL v77;
  uint64_t v78;
  unint64_t v79;
  double *v80;
  double v81;
  uint64_t v82;
  uint64_t v83;
  double *v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  int64_t v88;
  int64_t v89;
  int64_t v90;
  uint64_t v91;
  unint64_t v92;
  double v93;
  unint64_t v94;
  uint64_t v95;
  _OWORD *v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  int64_t v102;
  uint64_t v103;
  unint64_t v104;
  _OWORD *v105;
  uint64_t v106;
  uint64_t v107;
  int64_t v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  unint64_t v116;
  double v117;
  uint64_t v118;
  _OWORD *v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  uint64_t v128;
  double v129;
  uint64_t v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;

__n128 sub_10058154C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  double v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  result.n128_u64[0] = *(_QWORD *)(a2 + 8);
  v4 = *(double *)(a3 + 8);
  if (result.n128_f64[0] >= *(double *)(a1 + 8))
  {
    if (v4 < result.n128_f64[0])
    {
      v29 = *(_OWORD *)(a2 + 32);
      v33 = *(_OWORD *)(a2 + 48);
      v37 = *(_OWORD *)(a2 + 64);
      v21 = *(__n128 *)a2;
      v25 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      v8 = *(_OWORD *)(a3 + 64);
      v10 = *(_OWORD *)(a3 + 16);
      v9 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(a2 + 64) = v8;
      *(_OWORD *)(a2 + 16) = v10;
      *(_OWORD *)(a2 + 32) = v9;
      *(_OWORD *)(a3 + 48) = v33;
      *(_OWORD *)(a3 + 64) = v37;
      result.n128_u64[1] = v21.n128_u64[1];
      *(__n128 *)a3 = v21;
      *(_OWORD *)(a3 + 16) = v25;
      *(_OWORD *)(a3 + 32) = v29;
      result.n128_u64[0] = *(_QWORD *)(a2 + 8);
      if (result.n128_f64[0] < *(double *)(a1 + 8))
      {
        v30 = *(_OWORD *)(a1 + 32);
        v34 = *(_OWORD *)(a1 + 48);
        v38 = *(_OWORD *)(a1 + 64);
        v22 = *(__n128 *)a1;
        v26 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v11 = *(_OWORD *)(a2 + 64);
        v13 = *(_OWORD *)(a2 + 16);
        v12 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 64) = v11;
        *(_OWORD *)(a1 + 16) = v13;
        *(_OWORD *)(a1 + 32) = v12;
        *(_OWORD *)(a2 + 48) = v34;
        *(_OWORD *)(a2 + 64) = v38;
        result = v22;
        *(__n128 *)a2 = v22;
        *(_OWORD *)(a2 + 16) = v26;
        *(_OWORD *)(a2 + 32) = v30;
      }
    }
  }
  else
  {
    if (v4 >= result.n128_f64[0])
    {
      v31 = *(_OWORD *)(a1 + 32);
      v35 = *(_OWORD *)(a1 + 48);
      v39 = *(_OWORD *)(a1 + 64);
      v23 = *(__n128 *)a1;
      v27 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v14 = *(_OWORD *)(a2 + 64);
      v16 = *(_OWORD *)(a2 + 16);
      v15 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = v14;
      *(_OWORD *)(a1 + 16) = v16;
      *(_OWORD *)(a1 + 32) = v15;
      *(_OWORD *)(a2 + 48) = v35;
      *(_OWORD *)(a2 + 64) = v39;
      result.n128_u64[1] = v23.n128_u64[1];
      *(__n128 *)a2 = v23;
      *(_OWORD *)(a2 + 16) = v27;
      *(_OWORD *)(a2 + 32) = v31;
      result.n128_u64[0] = *(_QWORD *)(a3 + 8);
      if (result.n128_f64[0] >= *(double *)(a2 + 8))
        return result;
      v28 = *(_OWORD *)(a2 + 32);
      v32 = *(_OWORD *)(a2 + 48);
      v36 = *(_OWORD *)(a2 + 64);
      v20 = *(__n128 *)a2;
      v24 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      v17 = *(_OWORD *)(a3 + 64);
      v19 = *(_OWORD *)(a3 + 16);
      v18 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(a2 + 64) = v17;
      *(_OWORD *)(a2 + 16) = v19;
      *(_OWORD *)(a2 + 32) = v18;
    }
    else
    {
      v28 = *(_OWORD *)(a1 + 32);
      v32 = *(_OWORD *)(a1 + 48);
      v36 = *(_OWORD *)(a1 + 64);
      v20 = *(__n128 *)a1;
      v24 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      v5 = *(_OWORD *)(a3 + 64);
      v7 = *(_OWORD *)(a3 + 16);
      v6 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(a1 + 64) = v5;
      *(_OWORD *)(a1 + 16) = v7;
      *(_OWORD *)(a1 + 32) = v6;
    }
    *(_OWORD *)(a3 + 48) = v32;
    *(_OWORD *)(a3 + 64) = v36;
    result = v20;
    *(__n128 *)a3 = v20;
    *(_OWORD *)(a3 + 16) = v24;
    *(_OWORD *)(a3 + 32) = v28;
  }
  return result;
}

BOOL sub_10058172C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 *v20;
  __int128 *v21;
  __int128 *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  double v28;
  double v29;
  __int128 v30;
  __int128 v31;
  double v32;
  double v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 72) < *(double *)(a1 + 8))
      {
        v48 = *(_OWORD *)(a1 + 32);
        v54 = *(_OWORD *)(a1 + 48);
        v60 = *(_OWORD *)(a1 + 64);
        v36 = *(_OWORD *)a1;
        v42 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 80);
        v6 = *(_OWORD *)(a2 - 16);
        v8 = *(_OWORD *)(a2 - 64);
        v7 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 64) = v6;
        *(_OWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a1 + 32) = v7;
        *(_OWORD *)(a2 - 32) = v54;
        *(_OWORD *)(a2 - 16) = v60;
        *(_OWORD *)(a2 - 80) = v36;
        *(_OWORD *)(a2 - 64) = v42;
        *(_OWORD *)(a2 - 48) = v48;
      }
      return result;
    case 3uLL:
      sub_10058154C(a1, a1 + 80, a2 - 80);
      return 1;
    case 4uLL:
      sub_100581AC0(a1, a1 + 80, a1 + 160, a2 - 80);
      return 1;
    case 5uLL:
      v20 = (__int128 *)(a1 + 80);
      v21 = (__int128 *)(a1 + 160);
      v22 = (__int128 *)(a1 + 240);
      sub_100581AC0(a1, a1 + 80, a1 + 160, a1 + 240);
      if (*(double *)(a2 - 72) >= *(double *)(a1 + 248))
        return 1;
      v50 = *(_OWORD *)(a1 + 272);
      v56 = *(_OWORD *)(a1 + 288);
      v61 = *(_OWORD *)(a1 + 304);
      v38 = *v22;
      v44 = *(_OWORD *)(a1 + 256);
      *v22 = *(_OWORD *)(a2 - 80);
      v23 = *(_OWORD *)(a2 - 16);
      v25 = *(_OWORD *)(a2 - 64);
      v24 = *(_OWORD *)(a2 - 48);
      *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 - 32);
      *(_OWORD *)(a1 + 304) = v23;
      *(_OWORD *)(a1 + 256) = v25;
      *(_OWORD *)(a1 + 272) = v24;
      *(_OWORD *)(a2 - 32) = v56;
      *(_OWORD *)(a2 - 16) = v61;
      *(_OWORD *)(a2 - 80) = v38;
      *(_OWORD *)(a2 - 64) = v44;
      *(_OWORD *)(a2 - 48) = v50;
      if (*(double *)(a1 + 248) >= *(double *)(a1 + 168))
        return 1;
      v51 = *(_OWORD *)(a1 + 192);
      v57 = *(_OWORD *)(a1 + 208);
      v62 = *(_OWORD *)(a1 + 224);
      v39 = *v21;
      v45 = *(_OWORD *)(a1 + 176);
      v26 = *(_OWORD *)(a1 + 288);
      *(_OWORD *)(a1 + 192) = *(_OWORD *)(a1 + 272);
      *(_OWORD *)(a1 + 208) = v26;
      *(_OWORD *)(a1 + 224) = *(_OWORD *)(a1 + 304);
      v27 = *(_OWORD *)(a1 + 256);
      *v21 = *v22;
      *(_OWORD *)(a1 + 176) = v27;
      *(_OWORD *)(a1 + 288) = v57;
      *(_OWORD *)(a1 + 304) = v62;
      *(_OWORD *)(a1 + 256) = v45;
      *(_OWORD *)(a1 + 272) = v51;
      v28 = *(double *)(a1 + 168);
      v29 = *(double *)(a1 + 88);
      *v22 = v39;
      if (v28 >= v29)
        return 1;
      v52 = *(_OWORD *)(a1 + 112);
      v58 = *(_OWORD *)(a1 + 128);
      v63 = *(_OWORD *)(a1 + 144);
      v40 = *v20;
      v46 = *(_OWORD *)(a1 + 96);
      v30 = *(_OWORD *)(a1 + 208);
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a1 + 192);
      *(_OWORD *)(a1 + 128) = v30;
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a1 + 224);
      v31 = *(_OWORD *)(a1 + 176);
      *v20 = *v21;
      *(_OWORD *)(a1 + 96) = v31;
      *(_OWORD *)(a1 + 208) = v58;
      *(_OWORD *)(a1 + 224) = v63;
      *(_OWORD *)(a1 + 176) = v46;
      *(_OWORD *)(a1 + 192) = v52;
      v32 = *(double *)(a1 + 88);
      v33 = *(double *)(a1 + 8);
      *v21 = v40;
      if (v32 >= v33)
        return 1;
      v53 = *(_OWORD *)(a1 + 32);
      v59 = *(_OWORD *)(a1 + 48);
      v64 = *(_OWORD *)(a1 + 64);
      v41 = *(_OWORD *)a1;
      v47 = *(_OWORD *)(a1 + 16);
      v34 = *(_OWORD *)(a1 + 128);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 112);
      *(_OWORD *)(a1 + 48) = v34;
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a1 + 144);
      v35 = *(_OWORD *)(a1 + 96);
      *(_OWORD *)a1 = *v20;
      *(_OWORD *)(a1 + 16) = v35;
      *(_OWORD *)(a1 + 128) = v59;
      *(_OWORD *)(a1 + 144) = v64;
      *(_OWORD *)(a1 + 96) = v47;
      *(_OWORD *)(a1 + 112) = v53;
      result = 1;
      *v20 = v41;
      return result;
    default:
      v9 = a1 + 160;
      sub_10058154C(a1, a1 + 80, a1 + 160);
      v10 = a1 + 240;
      if (a1 + 240 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(double *)(v10 + 8);
    if (v13 < *(double *)(v9 + 8))
    {
      v14 = *(_QWORD *)v10;
      v37 = *(_OWORD *)(v10 + 16);
      v43 = *(_OWORD *)(v10 + 32);
      v49 = *(_OWORD *)(v10 + 48);
      v55 = *(_OWORD *)(v10 + 64);
      v15 = v11;
      while (1)
      {
        v16 = a1 + v15;
        v17 = *(_OWORD *)(a1 + v15 + 208);
        *(_OWORD *)(v16 + 272) = *(_OWORD *)(a1 + v15 + 192);
        *(_OWORD *)(v16 + 288) = v17;
        *(_OWORD *)(v16 + 304) = *(_OWORD *)(a1 + v15 + 224);
        v18 = *(_OWORD *)(a1 + v15 + 176);
        *(_OWORD *)(v16 + 240) = *(_OWORD *)(a1 + v15 + 160);
        *(_OWORD *)(v16 + 256) = v18;
        if (v15 == -160)
          break;
        v15 -= 80;
        if (v13 >= *(double *)(v16 + 88))
        {
          v19 = a1 + v15 + 240;
          goto LABEL_12;
        }
      }
      v19 = a1;
LABEL_12:
      *(_QWORD *)v19 = v14;
      *(double *)(v19 + 8) = v13;
      *(_OWORD *)(v19 + 16) = v37;
      *(_OWORD *)(v19 + 32) = v43;
      *(_OWORD *)(v19 + 48) = v49;
      *(_OWORD *)(v19 + 64) = v55;
      if (++v12 == 8)
        return v10 + 80 == a2;
    }
    v9 = v10;
    v11 += 80;
    v10 += 80;
    if (v10 == a2)
      return 1;
  }
}

__n128 sub_100581AC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __n128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  sub_10058154C(a1, a2, a3);
  result.n128_u64[0] = *(_QWORD *)(a4 + 8);
  if (result.n128_f64[0] < *(double *)(a3 + 8))
  {
    v24 = *(_OWORD *)(a3 + 32);
    v27 = *(_OWORD *)(a3 + 48);
    v30 = *(_OWORD *)(a3 + 64);
    v18 = *(_OWORD *)a3;
    v21 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    v9 = *(_OWORD *)(a4 + 64);
    v11 = *(_OWORD *)(a4 + 16);
    v10 = *(_OWORD *)(a4 + 32);
    *(_OWORD *)(a3 + 48) = *(_OWORD *)(a4 + 48);
    *(_OWORD *)(a3 + 64) = v9;
    *(_OWORD *)(a3 + 16) = v11;
    *(_OWORD *)(a3 + 32) = v10;
    *(_OWORD *)(a4 + 48) = v27;
    *(_OWORD *)(a4 + 64) = v30;
    result.n128_u64[1] = *((_QWORD *)&v18 + 1);
    *(_OWORD *)a4 = v18;
    *(_OWORD *)(a4 + 16) = v21;
    *(_OWORD *)(a4 + 32) = v24;
    result.n128_u64[0] = *(_QWORD *)(a3 + 8);
    if (result.n128_f64[0] < *(double *)(a2 + 8))
    {
      v25 = *(_OWORD *)(a2 + 32);
      v28 = *(_OWORD *)(a2 + 48);
      v31 = *(_OWORD *)(a2 + 64);
      v19 = *(_OWORD *)a2;
      v22 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      v12 = *(_OWORD *)(a3 + 64);
      v14 = *(_OWORD *)(a3 + 16);
      v13 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(a2 + 64) = v12;
      *(_OWORD *)(a2 + 16) = v14;
      *(_OWORD *)(a2 + 32) = v13;
      *(_OWORD *)(a3 + 48) = v28;
      *(_OWORD *)(a3 + 64) = v31;
      result.n128_u64[1] = *((_QWORD *)&v19 + 1);
      *(_OWORD *)a3 = v19;
      *(_OWORD *)(a3 + 16) = v22;
      *(_OWORD *)(a3 + 32) = v25;
      result.n128_u64[0] = *(_QWORD *)(a2 + 8);
      if (result.n128_f64[0] < *(double *)(a1 + 8))
      {
        v26 = *(_OWORD *)(a1 + 32);
        v29 = *(_OWORD *)(a1 + 48);
        v32 = *(_OWORD *)(a1 + 64);
        v20 = *(__n128 *)a1;
        v23 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v15 = *(_OWORD *)(a2 + 64);
        v17 = *(_OWORD *)(a2 + 16);
        v16 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 64) = v15;
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 32) = v16;
        *(_OWORD *)(a2 + 48) = v29;
        *(_OWORD *)(a2 + 64) = v32;
        result = v20;
        *(__n128 *)a2 = v20;
        *(_OWORD *)(a2 + 16) = v23;
        *(_OWORD *)(a2 + 32) = v26;
      }
    }
  }
  return result;
}

char *sub_100581C30(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char *v36;
  uint64_t v37;
  char *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  void *__p;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if ((uint64_t)(0xD37A6F4DE9BD37A7 * ((uint64_t)(v11 - v12) >> 3)) < a5)
  {
    v13 = *(void **)a1;
    v14 = a5 - 0x2C8590B21642C859 * ((uint64_t)(v12 - *(_QWORD *)a1) >> 3);
    if (v14 > 0x1642C8590B21642)
      sub_100259694();
    v15 = 0xD37A6F4DE9BD37A7 * ((__dst - (uint64_t)v13) >> 3);
    v16 = 0xD37A6F4DE9BD37A7 * ((v10 - (uint64_t)v13) >> 3);
    v17 = 2 * v16;
    if (2 * v16 <= v14)
      v17 = v14;
    if (v16 >= 0xB21642C8590B21)
      v18 = 0x1642C8590B21642;
    else
      v18 = v17;
    v53 = v9;
    if (v18)
      v19 = (char *)sub_10055ADA8(v9, v18);
    else
      v19 = 0;
    v36 = &v19[184 * v15];
    __p = v19;
    v50 = v36;
    v52 = &v19[184 * v18];
    v37 = 184 * a5;
    v38 = &v36[184 * a5];
    do
    {
      v39 = *(_OWORD *)v7;
      v40 = *((_OWORD *)v7 + 1);
      v41 = *((_OWORD *)v7 + 3);
      *((_OWORD *)v36 + 2) = *((_OWORD *)v7 + 2);
      *((_OWORD *)v36 + 3) = v41;
      *(_OWORD *)v36 = v39;
      *((_OWORD *)v36 + 1) = v40;
      v42 = *((_OWORD *)v7 + 4);
      v43 = *((_OWORD *)v7 + 5);
      v44 = *((_OWORD *)v7 + 7);
      *((_OWORD *)v36 + 6) = *((_OWORD *)v7 + 6);
      *((_OWORD *)v36 + 7) = v44;
      *((_OWORD *)v36 + 4) = v42;
      *((_OWORD *)v36 + 5) = v43;
      v45 = *((_OWORD *)v7 + 8);
      v46 = *((_OWORD *)v7 + 9);
      v47 = *((_OWORD *)v7 + 10);
      *((_QWORD *)v36 + 22) = *((_QWORD *)v7 + 22);
      *((_OWORD *)v36 + 9) = v46;
      *((_OWORD *)v36 + 10) = v47;
      *((_OWORD *)v36 + 8) = v45;
      v36 += 184;
      v7 += 184;
      v37 -= 184;
    }
    while (v37);
    v51 = v38;
    v5 = (char *)sub_100581F60((void **)a1, (uint64_t)&__p, v5);
    if (v51 != v50)
      v51 = &v50[(v51 - v50 - 184) % 0xB8uLL];
    if (__p)
      operator delete(__p);
    return v5;
  }
  v20 = v12 - __dst;
  if ((uint64_t)(0xD37A6F4DE9BD37A7 * ((uint64_t)(v12 - __dst) >> 3)) >= a5)
  {
    v21 = &__src[184 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[184 * a5];
    v25 = &v23[-184 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_OWORD *)v25;
        v28 = *((_OWORD *)v25 + 1);
        v29 = *((_OWORD *)v25 + 3);
        *((_OWORD *)v26 + 2) = *((_OWORD *)v25 + 2);
        *((_OWORD *)v26 + 3) = v29;
        *(_OWORD *)v26 = v27;
        *((_OWORD *)v26 + 1) = v28;
        v30 = *((_OWORD *)v25 + 4);
        v31 = *((_OWORD *)v25 + 5);
        v32 = *((_OWORD *)v25 + 7);
        *((_OWORD *)v26 + 6) = *((_OWORD *)v25 + 6);
        *((_OWORD *)v26 + 7) = v32;
        *((_OWORD *)v26 + 4) = v30;
        *((_OWORD *)v26 + 5) = v31;
        v33 = *((_OWORD *)v25 + 8);
        v34 = *((_OWORD *)v25 + 9);
        v35 = *((_OWORD *)v25 + 10);
        *((_QWORD *)v26 + 22) = *((_QWORD *)v25 + 22);
        *((_OWORD *)v26 + 9) = v34;
        *((_OWORD *)v26 + 10) = v35;
        *((_OWORD *)v26 + 8) = v33;
        v25 += 184;
        v26 += 184;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v5[184 * a5], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[8 * ((uint64_t)(v12 - __dst) >> 3)];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[8 * ((uint64_t)(v12 - __dst) >> 3)], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v20 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_100581F08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *sub_100581F60(void **a1, uint64_t a2, char *__src)
{
  void *v5;
  char *v6;
  void *v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE *v19;
  uint64_t v20;
  int64_t v21;
  char *v22;
  void *v23;
  void *v24;

  v5 = *(void **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v9 = *(_QWORD *)(a2 + 8);
    do
    {
      v10 = *(_OWORD *)(v8 - 184);
      v11 = *(_OWORD *)(v8 - 168);
      v12 = *(_OWORD *)(v8 - 152);
      *(_OWORD *)(v9 - 136) = *(_OWORD *)(v8 - 136);
      *(_OWORD *)(v9 - 152) = v12;
      *(_OWORD *)(v9 - 168) = v11;
      *(_OWORD *)(v9 - 184) = v10;
      v13 = *(_OWORD *)(v8 - 120);
      v14 = *(_OWORD *)(v8 - 104);
      v15 = *(_OWORD *)(v8 - 88);
      *(_OWORD *)(v9 - 72) = *(_OWORD *)(v8 - 72);
      *(_OWORD *)(v9 - 88) = v15;
      *(_OWORD *)(v9 - 104) = v14;
      *(_OWORD *)(v9 - 120) = v13;
      v16 = *(_OWORD *)(v8 - 56);
      v17 = *(_OWORD *)(v8 - 40);
      v18 = *(_OWORD *)(v8 - 24);
      v7 = (void *)(v9 - 184);
      *(_QWORD *)(v9 - 8) = *((_QWORD *)v8 - 1);
      *(_OWORD *)(v9 - 24) = v18;
      *(_OWORD *)(v9 - 40) = v17;
      *(_OWORD *)(v9 - 56) = v16;
      v8 -= 184;
      v9 -= 184;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v19 = a1[1];
  v20 = *(_QWORD *)(a2 + 16);
  v21 = v19 - __src;
  if (v19 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v19 - __src);
    v7 = *(void **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v20 + v21;
  v22 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v22;
  v23 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v23;
  v24 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v24;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

void sub_10058208C(uint64_t a1, _QWORD *a2)
{
  void *v3;
  void *v4;
  void *v5;

  if (a2)
  {
    v3 = (void *)a2[156];
    if (v3)
    {
      a2[157] = v3;
      operator delete(v3);
    }
    sub_100261F44((uint64_t)(a2 + 154));
    sub_10050C79C(a2 + 148);
    sub_100261F44((uint64_t)(a2 + 143));
    v4 = (void *)a2[133];
    if (v4)
    {
      a2[134] = v4;
      operator delete(v4);
    }
    v5 = (void *)a2[130];
    if (v5)
    {
      a2[131] = v5;
      operator delete(v5);
    }
    sub_101480AF4(a2 + 17);
    sub_10034111C(a2 + 9);
    operator delete();
  }
}

void sub_100582124(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_100582164((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_100582164(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 192)
  {
    if (*(char *)(i - 9) < 0)
      operator delete(*(void **)(i - 32));
  }
  a1[1] = v2;
}

uint64_t sub_1005821B0()
{
  sub_1015A2E04(qword_102301C20, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102301C20, (void *)&_mh_execute_header);
}

uint64_t sub_1005821F4(uint64_t a1, int a2)
{
  BOOL *v3;
  uint64_t *v4;
  _QWORD *v5;
  NSObject *v6;
  int v7;
  uint64_t v8;
  char v9;
  char v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  double v37;
  NSObject *v38;
  uint64_t v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  int v51;
  const char *v52;
  char *v53;
  uint64_t v54;
  const char *v55;
  char *v56;
  uint64_t v57;
  _QWORD v58[4];
  NSString *v59;
  BOOL v60;
  _BYTE buf[616];
  uint64_t v62;
  uint64_t v63;
  char v64;
  _BYTE v65[24];

  *(_QWORD *)a1 = off_102144D20;
  *(_BYTE *)(a1 + 8) = 0;
  v3 = (BOOL *)(a1 + 8);
  *(_DWORD *)(a1 + 12) = a2;
  *(_OWORD *)(a1 + 16) = xmmword_101BB6BA0;
  v4 = (uint64_t *)(a1 + 16);
  *(_OWORD *)(a1 + 32) = xmmword_101BB6BA0;
  v5 = (_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 76) = 0u;
  *(_QWORD *)(a1 + 96) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  sub_10012C97C((float32x4_t *)(a1 + 104), (float32x4_t)0);
  *(_DWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 156) = xmmword_101BB2F90;
  *(_QWORD *)(a1 + 172) = 0x1FF00000000;
  *(_DWORD *)(a1 + 180) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  if (qword_10229FD20 != -1)
    dispatch_once(&qword_10229FD20, &stru_102144D98);
  v6 = qword_10229FD28;
  if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
  {
    v7 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Starting device motion service %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_102144D98);
    v51 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)v65 = 67240192;
    *(_DWORD *)&v65[4] = v51;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "Starting device motion service %{public}d", v65, 8);
    v53 = (char *)v52;
    sub_100512490("Generic", 1, 0, 2, "CLSensorFusionService::CLSensorFusionService(int)", "%s\n", v52);
    if (v53 != buf)
      free(v53);
  }
  v8 = sub_100127B9C();
  sub_100081C10(v8, buf);
  v9 = sub_1001E4874(*(uint64_t *)buf, "LogDeviceMotion", v3);
  v10 = v9;
  v11 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v12 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if ((v10 & 1) != 0)
        goto LABEL_12;
      goto LABEL_11;
    }
  }
  if ((v9 & 1) == 0)
LABEL_11:
    *v3 = 0;
LABEL_12:
  sub_100127B9C();
  v60 = sub_1009CF94C();
  v14 = sub_100127B9C();
  sub_100081C10(v14, buf);
  sub_1001E4874(*(uint64_t *)buf, "DeviceMotionUseThrottledInterval", &v60);
  v15 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v16 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = sub_100127B9C();
  sub_100081C10(v18, buf);
  v19 = sub_1001FD98C(*(uint64_t *)buf, "DeviceMotionAccelerometerUpdateInterval", v4);
  v20 = v19;
  v21 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v22 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
      if ((v20 & 1) != 0)
        goto LABEL_23;
      goto LABEL_22;
    }
  }
  if ((v19 & 1) == 0)
LABEL_22:
    *v4 = qword_101BB6BB0[!v60];
LABEL_23:
  v24 = sub_100127B9C();
  sub_100081C10(v24, buf);
  v25 = sub_1001FD98C(*(uint64_t *)buf, "DeviceMotionGyroUpdateInterval", (void *)(a1 + 24));
  v26 = v25;
  v27 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v28 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
      if ((v26 & 1) != 0)
        goto LABEL_29;
      goto LABEL_28;
    }
  }
  if ((v25 & 1) == 0)
LABEL_28:
    *(_QWORD *)(a1 + 24) = qword_101BB6BC0[!v60];
LABEL_29:
  v30 = sub_100127B9C();
  sub_100081C10(v30, buf);
  v31 = sub_1001FD98C(*(uint64_t *)buf, "DeviceMotionCompassUpdateInterval", v5);
  v32 = v31;
  v33 = *(std::__shared_weak_count **)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_33;
  v34 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  if (v35)
  {
LABEL_33:
    if ((v31 & 1) != 0)
      goto LABEL_35;
    goto LABEL_34;
  }
  ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
  std::__shared_weak_count::__release_weak(v33);
  if ((v32 & 1) == 0)
LABEL_34:
    *v5 = 0x3F847AE147AE147BLL;
LABEL_35:
  v36 = sub_10021C350();
  v37 = sub_1009EC168(v36, (double *)(a1 + 24));
  if (qword_10229FD20 != -1)
    dispatch_once(&qword_10229FD20, &stru_102144D98);
  v38 = qword_10229FD28;
  if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
  {
    v39 = *v4;
    *(_DWORD *)buf = 134349312;
    *(double *)&buf[4] = v37;
    *(_WORD *)&buf[12] = 2050;
    *(_QWORD *)&buf[14] = v39;
    _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "GyroUpdateInterval,%{public}.4f,AccelerometerUpdateInterval,%{public}.4f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_102144D98);
    v54 = *v4;
    *(_DWORD *)v65 = 134349312;
    *(double *)&v65[4] = v37;
    *(_WORD *)&v65[12] = 2050;
    *(_QWORD *)&v65[14] = v54;
    LODWORD(v57) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "GyroUpdateInterval,%{public}.4f,AccelerometerUpdateInterval,%{public}.4f", v65, v57);
    v56 = (char *)v55;
    sub_100512490("Generic", 1, 0, 2, "CLSensorFusionService::CLSensorFusionService(int)", "%s\n", v55);
    if (v56 != buf)
      free(v56);
  }
  if (*v3)
  {
    *(_QWORD *)v65 = off_102171570;
    *(_QWORD *)&v65[8] = CFAbsoluteTimeGetCurrent();
    v40 = v37;
    *(float *)&v65[20] = v40;
    v41 = sub_1011B78D4();
    sub_1011B8DB0(v41, (uint64_t)v65);
    sub_1015EB864(buf);
    sub_101604D08((uint64_t)buf);
    v64 |= 1u;
    v62 = *(_QWORD *)&v65[8];
    v42 = v63;
    *(_BYTE *)(v63 + 12) |= 1u;
    *(float *)(v42 + 8) = v40;
    if (qword_1023118A8 != -1)
      dispatch_once(&qword_1023118A8, &stru_102144DB8);
    if (qword_1023118B0)
      sub_101888B64(qword_1023118B0, (uint64_t)buf);
    sub_1015EE304((PB::Base *)buf);
  }
  sub_100127B9C();
  if (sub_1009CF94C())
  {
    v43 = sub_100127B9C();
    sub_100081C10(v43, buf);
    v65[0] = 0;
    v44 = sub_1001E4874(*(uint64_t *)buf, "DumpGyroCalibrationDatabaseOnDeviceMotionStart", v65);
    if (v65[0])
      v45 = v44;
    else
      v45 = 0;
    v46 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v47 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
        if (!v45)
          return a1;
        goto LABEL_55;
      }
    }
    if (v45)
    {
LABEL_55:
      -[NSDate timeIntervalSinceReferenceDate](+[NSDate date](NSDate, "date"), "timeIntervalSinceReferenceDate");
      v58[0] = _NSConcreteStackBlock;
      v58[1] = 3221225472;
      v58[2] = sub_100582A28;
      v58[3] = &unk_102144D68;
      v59 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%.0f"), v49);
      objc_msgSend(objc_msgSend(objc_msgSend((id)sub_100128CC8(), "vendor"), "proxyForService:", CFSTR("CLGyroCalibrationDatabase")), "dumpDatabase:onCompletion:", v59, v58);
    }
  }
  return a1;
}

void sub_1005829E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100582A28(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint8_t *v6;
  int v7;
  uint64_t v8;
  uint8_t buf[4];
  uint64_t v10;

  if (qword_10229FD20 != -1)
    dispatch_once(&qword_10229FD20, &stru_102144D98);
  v2 = qword_10229FD28;
  if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Dumped gyro cal database with id %@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_102144D98);
    v4 = *(_QWORD *)(a1 + 32);
    v7 = 138412290;
    v8 = v4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "Dumped gyro cal database with id %@", &v7, 12);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "CLSensorFusionService::CLSensorFusionService(int)_block_invoke", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
}

uint64_t sub_100582BD8(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  *(_QWORD *)a1 = off_102144D20;
  if (qword_10229FD20 != -1)
    dispatch_once(&qword_10229FD20, &stru_102144D98);
  v2 = qword_10229FD28;
  if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)buf = 67240192;
    v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Stopping device motion service %{public}#x", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_102144D98);
    v5 = *(_DWORD *)(a1 + 12);
    v8[0] = 67240192;
    v8[1] = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "Stopping device motion service %{public}#x", v8, 8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "virtual CLSensorFusionService::~CLSensorFusionService()", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return a1;
}

void sub_100582D98(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

double sub_100582DAC(uint64_t a1, double *a2)
{
  double result;

  result = *a2;
  *(double *)(a1 + 40) = *a2;
  return result;
}

void sub_100582DB8(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  __int128 v5;

  v4 = (os_unfair_lock_s *)(a1 + 88);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 88));
  *(_QWORD *)a2 = *(_QWORD *)(a1 + 96);
  if (a1 + 96 != a2)
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 104);
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(a1 + 120);
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 124);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 128);
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a1 + 132);
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a1 + 136);
  *(_DWORD *)(a2 + 44) = *(_DWORD *)(a1 + 140);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 144);
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(a1 + 148);
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 152);
  *(_QWORD *)(a2 + 60) = *(_QWORD *)(a1 + 156);
  *(_DWORD *)(a2 + 68) = *(_DWORD *)(a1 + 164);
  *(_DWORD *)(a2 + 72) = *(_DWORD *)(a1 + 168);
  *(_DWORD *)(a2 + 76) = *(_DWORD *)(a1 + 172);
  *(_DWORD *)(a2 + 80) = *(_DWORD *)(a1 + 176);
  v5 = *(_OWORD *)(a1 + 180);
  *(_DWORD *)(a2 + 100) = *(_DWORD *)(a1 + 196);
  *(_OWORD *)(a2 + 84) = v5;
  os_unfair_lock_unlock(v4);
}

void sub_100582E8C(uint64_t a1, uint64_t a2)
{
  void (*v4)(uint64_t, _QWORD, _QWORD);
  __int128 v5;

  sub_100582F7C(a1, a2);
  v4 = *(void (**)(uint64_t, _QWORD, _QWORD))(a1 + 56);
  if (v4)
    v4(a2, *(unsigned int *)(a1 + 12), *(_QWORD *)(a1 + 64));
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 88));
  *(_QWORD *)(a1 + 96) = *(_QWORD *)a2;
  if (a1 + 96 != a2)
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 156) = *(_QWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 100);
  *(_OWORD *)(a1 + 180) = v5;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 88));
}

void sub_100582F7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  NSObject *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  double v32;
  CFAbsoluteTime Current;
  double v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  int v84;
  int v85;
  int v86;
  int v87;
  uint64_t v88;
  double v89;
  const char *v90;
  uint8_t *v91;
  uint8_t buf[4];
  double v93;
  __int16 v94;
  double v95;
  __int16 v96;
  double v97;
  __int16 v98;
  double v99;
  __int16 v100;
  double v101;
  __int16 v102;
  double v103;
  __int16 v104;
  double v105;
  __int16 v106;
  double v107;
  __int16 v108;
  double v109;
  __int16 v110;
  double v111;
  __int16 v112;
  double v113;
  __int16 v114;
  double v115;
  __int16 v116;
  double v117;
  __int16 v118;
  double v119;
  __int16 v120;
  double v121;
  __int16 v122;
  double v123;
  __int16 v124;
  double v125;
  __int16 v126;
  double v127;
  __int16 v128;
  int v129;
  __int16 v130;
  int v131;
  __int16 v132;
  int v133;
  __int16 v134;
  int v135;
  __int16 v136;
  uint64_t v137;
  __int16 v138;
  double v139;
  __int16 v140;
  double v141;
  __int16 v142;
  double v143;
  uint64_t v144;
  uint64_t v145;
  char v146;
  _BYTE v147[22];
  __int16 v148;
  double v149;
  _BYTE v150[40];
  _BYTE v151[12];
  double v152;
  __int16 v153;
  _BYTE v154[10];
  double v155;
  __int16 v156;
  double v157;
  __int16 v158;
  double v159;
  __int16 v160;
  double v161;
  __int16 v162;
  double v163;
  __int16 v164;
  double v165;
  __int16 v166;
  double v167;
  __int16 v168;
  double v169;
  __int16 v170;
  int v171;
  __int16 v172;
  int v173;
  __int16 v174;
  int v175;
  __int16 v176;
  int v177;
  __int16 v178;
  uint64_t v179;
  __int16 v180;
  double v181;
  __int16 v182;
  double v183;
  __int16 v184;
  double v185;

  if (*(double *)(a1 + 96) <= 0.0)
  {
    v4 = 0;
  }
  else if ((((*(unsigned __int16 *)(a1 + 178) ^ *(unsigned __int16 *)(a2 + 82)) >> 8) & 1) != 0)
  {
    v4 = 0;
  }
  else
  {
    v4 = 2;
  }
  v5 = sub_100078B88();
  v6 = *(double *)a2;
  if (qword_10229FD20 != -1)
    dispatch_once(&qword_10229FD20, &stru_102144D98);
  v7 = v5 - v6;
  v8 = qword_10229FD28;
  if (os_log_type_enabled((os_log_t)qword_10229FD28, (os_log_type_t)v4))
  {
    v9 = *(float *)(a2 + 8);
    v10 = *(float *)(a2 + 12);
    v11 = *(float *)(a2 + 16);
    v12 = *(float *)(a2 + 20);
    v13 = *(float *)(a2 + 24);
    v14 = *(float *)(a2 + 28);
    v15 = *(float *)(a2 + 32);
    v16 = (float)(*(float *)(a2 + 36) * 57.296);
    v17 = (float)(*(float *)(a2 + 40) * 57.296);
    v18 = (float)(*(float *)(a2 + 44) * 57.296);
    v19 = *(float *)(a2 + 48);
    v20 = *(float *)(a2 + 52);
    v21 = *(float *)(a2 + 56);
    v22 = *(float *)(a2 + 68);
    v23 = *(float *)(a2 + 72);
    v24 = *(float *)(a2 + 76);
    v25 = *(float *)(a2 + 60);
    v26 = *(float *)(a2 + 64);
    v27 = *(char *)(a2 + 80);
    v28 = *(_DWORD *)(a2 + 84);
    v29 = *(unsigned __int8 *)(a2 + 81);
    v30 = *(unsigned __int16 *)(a2 + 82);
    v31 = *(_QWORD *)(a2 + 96);
    v32 = *(double *)a2;
    *(_DWORD *)buf = 134224384;
    v93 = v9;
    v94 = 2048;
    v95 = v10;
    v96 = 2048;
    v97 = v11;
    v98 = 2048;
    v99 = v12;
    v100 = 2048;
    v101 = v13;
    v102 = 2048;
    v103 = v14;
    v104 = 2048;
    v105 = v15;
    v106 = 2048;
    v107 = v16;
    v108 = 2048;
    v109 = v17;
    v110 = 2048;
    v111 = v18;
    v112 = 2048;
    v113 = v19;
    v114 = 2048;
    v115 = v20;
    v116 = 2048;
    v117 = v21;
    v118 = 2048;
    v119 = v22;
    v120 = 2048;
    v121 = v23;
    v122 = 2048;
    v123 = v24;
    v124 = 2048;
    v125 = v25;
    v126 = 2048;
    v127 = v26;
    v128 = 1026;
    v129 = v27;
    v130 = 1026;
    v131 = v28;
    v132 = 1026;
    v133 = v29;
    v134 = 1026;
    v135 = v30;
    v136 = 2050;
    v137 = v31;
    v138 = 2050;
    v139 = v32;
    v140 = 2050;
    v141 = v5;
    v142 = 2050;
    v143 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, (os_log_type_t)v4, "[CLSensorFusionService] q.x,%10.10f,q.y,%10.10f,q.z,%10.10f,q.w,%10.10f,userAccel.x,%10.10f,userAccel.y,%10.10f,userAccel.z,%10.10f,rotationRate.x,%10.10f,rotationRate.y,%10.10f,rotationRate.z,%10.10f,magneticField.x,%10.10f,magneticField.y,%10.10f,magneticField.z,%10.10f,magBiasEstVar.x,%10.10f,magBiasEstVar.y,%10.10f,magBiasEstVar.z,%10.10f,heading,%.3f,accuracy,%.3f,level,%{public}d,variant,%{public}d,mode,%{public}d,status,%{public}#02x,clientID,%{public}llu,timestamp,%{public}lf,now,%{public}lf,latency,%{public}lf", buf, 0xF6u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_102144D98);
    v66 = *(float *)(a2 + 8);
    v67 = *(float *)(a2 + 12);
    v68 = *(float *)(a2 + 16);
    v69 = *(float *)(a2 + 20);
    v70 = *(float *)(a2 + 24);
    v71 = *(float *)(a2 + 28);
    v72 = *(float *)(a2 + 32);
    v73 = (float)(*(float *)(a2 + 36) * 57.296);
    v74 = (float)(*(float *)(a2 + 40) * 57.296);
    v75 = (float)(*(float *)(a2 + 44) * 57.296);
    v76 = *(float *)(a2 + 48);
    v77 = *(float *)(a2 + 52);
    v78 = *(float *)(a2 + 56);
    v79 = *(float *)(a2 + 68);
    v80 = *(float *)(a2 + 72);
    v81 = *(float *)(a2 + 76);
    v82 = *(float *)(a2 + 60);
    v83 = *(float *)(a2 + 64);
    v84 = *(char *)(a2 + 80);
    v85 = *(_DWORD *)(a2 + 84);
    v86 = *(unsigned __int8 *)(a2 + 81);
    v87 = *(unsigned __int16 *)(a2 + 82);
    v88 = *(_QWORD *)(a2 + 96);
    v89 = *(double *)a2;
    *(_DWORD *)v147 = 134224384;
    *(double *)&v147[4] = v66;
    *(_WORD *)&v147[12] = 2048;
    *(double *)&v147[14] = v67;
    v148 = 2048;
    v149 = v68;
    *(_WORD *)v150 = 2048;
    *(double *)&v150[2] = v69;
    *(_WORD *)&v150[10] = 2048;
    *(double *)&v150[12] = v70;
    *(_WORD *)&v150[20] = 2048;
    *(double *)&v150[22] = v71;
    *(_WORD *)&v150[30] = 2048;
    *(double *)&v150[32] = v72;
    *(_WORD *)v151 = 2048;
    *(double *)&v151[2] = v73;
    *(_WORD *)&v151[10] = 2048;
    v152 = v74;
    v153 = 2048;
    *(double *)v154 = v75;
    *(_WORD *)&v154[8] = 2048;
    v155 = v76;
    v156 = 2048;
    v157 = v77;
    v158 = 2048;
    v159 = v78;
    v160 = 2048;
    v161 = v79;
    v162 = 2048;
    v163 = v80;
    v164 = 2048;
    v165 = v81;
    v166 = 2048;
    v167 = v82;
    v168 = 2048;
    v169 = v83;
    v170 = 1026;
    v171 = v84;
    v172 = 1026;
    v173 = v85;
    v174 = 1026;
    v175 = v86;
    v176 = 1026;
    v177 = v87;
    v178 = 2050;
    v179 = v88;
    v180 = 2050;
    v181 = v89;
    v182 = 2050;
    v183 = v5;
    v184 = 2050;
    v185 = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, v4, "[CLSensorFusionService] q.x,%10.10f,q.y,%10.10f,q.z,%10.10f,q.w,%10.10f,userAccel.x,%10.10f,userAccel.y,%10.10f,userAccel.z,%10.10f,rotationRate.x,%10.10f,rotationRate.y,%10.10f,rotationRate.z,%10.10f,magneticField.x,%10.10f,magneticField.y,%10.10f,magneticField.z,%10.10f,magBiasEstVar.x,%10.10f,magBiasEstVar.y,%10.10f,magBiasEstVar.z,%10.10f,heading,%.3f,accuracy,%.3f,level,%{public}d,variant,%{public}d,mode,%{public}d,status,%{public}#02x,clientID,%{public}llu,timestamp,%{public}lf,now,%{public}lf,latency,%{public}lf", v147, 246);
    v91 = (uint8_t *)v90;
    sub_100512490("Generic", 1, 0, 2, "void CLSensorFusionService::logSample(const CLSensorFusionService::Sample *)", "%s\n", v90);
    if (v91 != buf)
      free(v91);
  }
  if (*(_BYTE *)(a1 + 8))
  {
    *(_QWORD *)v147 = off_102171830;
    Current = CFAbsoluteTimeGetCurrent();
    v34 = *(double *)a2;
    *(CFAbsoluteTime *)&v147[8] = Current;
    v149 = v34;
    *(_OWORD *)v150 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)&v150[16] = *(_QWORD *)(a2 + 24);
    LODWORD(Current) = *(_DWORD *)(a2 + 32);
    *(float32x2_t *)&v150[28] = vmul_f32(*(float32x2_t *)(a2 + 36), (float32x2_t)vdup_n_s32(0x42652EE1u));
    *(float *)&v34 = *(float *)(a2 + 44) * 57.296;
    *(_DWORD *)&v150[24] = LODWORD(Current);
    *(_DWORD *)&v150[36] = LODWORD(v34);
    *(_QWORD *)v151 = *(_QWORD *)(a2 + 48);
    LODWORD(v34) = *(_DWORD *)(a2 + 60);
    *(_DWORD *)&v151[8] = *(_DWORD *)(a2 + 56);
    LOBYTE(v152) = *(_BYTE *)(a2 + 80);
    LODWORD(Current) = *(_DWORD *)(a2 + 64);
    HIDWORD(v152) = LODWORD(v34);
    *(_DWORD *)&v154[2] = LODWORD(Current);
    v35 = *(unsigned __int8 *)(a2 + 81);
    *(_DWORD *)&v154[6] = *(_DWORD *)(a2 + 84);
    LODWORD(v155) = v35;
    HIDWORD(v155) = *(_QWORD *)(a2 + 96);
    v156 = *(_WORD *)(a2 + 82);
    v36 = sub_1011B78D4();
    sub_1011B8DB0(v36, (uint64_t)v147);
    sub_1015EB864(buf);
    sub_101604FC4((uint64_t)buf);
    v146 |= 1u;
    v144 = *(_QWORD *)&v147[8];
    v37 = v145;
    v38 = *(double *)a2;
    *(_DWORD *)(v145 + 124) |= 0x10u;
    *(double *)(v37 + 40) = v38;
    v39 = v145;
    v40 = *(float *)(a2 + 8);
    *(_DWORD *)(v145 + 124) |= 2u;
    *(double *)(v39 + 16) = v40;
    v41 = v145;
    v42 = *(float *)(a2 + 12);
    *(_DWORD *)(v145 + 124) |= 4u;
    *(double *)(v41 + 24) = v42;
    v43 = v145;
    v44 = *(float *)(a2 + 16);
    *(_DWORD *)(v145 + 124) |= 8u;
    *(double *)(v43 + 32) = v44;
    v45 = v145;
    v46 = *(float *)(a2 + 20);
    *(_DWORD *)(v145 + 124) |= 1u;
    *(double *)(v45 + 8) = v46;
    v47 = v145;
    LODWORD(v46) = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(v145 + 124) |= 0x40000u;
    *(_DWORD *)(v47 + 100) = LODWORD(v46);
    v48 = v145;
    LODWORD(v46) = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(v145 + 124) |= 0x80000u;
    *(_DWORD *)(v48 + 104) = LODWORD(v46);
    v49 = v145;
    LODWORD(v46) = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(v145 + 124) |= 0x100000u;
    *(_DWORD *)(v49 + 108) = LODWORD(v46);
    v50 = v145;
    *(float *)&v46 = *(float *)(a2 + 36) * 57.296;
    *(_DWORD *)(v145 + 124) |= 0x2000u;
    *(_DWORD *)(v50 + 80) = LODWORD(v46);
    v51 = v145;
    *(float *)&v46 = *(float *)(a2 + 40) * 57.296;
    *(_DWORD *)(v145 + 124) |= 0x4000u;
    *(_DWORD *)(v51 + 84) = LODWORD(v46);
    v52 = v145;
    *(float *)&v46 = *(float *)(a2 + 44) * 57.296;
    *(_DWORD *)(v145 + 124) |= 0x8000u;
    *(_DWORD *)(v52 + 88) = LODWORD(v46);
    v53 = v145;
    LODWORD(v46) = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(v145 + 124) |= 0x100u;
    *(_DWORD *)(v53 + 60) = LODWORD(v46);
    v54 = v145;
    LODWORD(v46) = *(_DWORD *)(a2 + 52);
    *(_DWORD *)(v145 + 124) |= 0x200u;
    *(_DWORD *)(v54 + 64) = LODWORD(v46);
    v55 = v145;
    LODWORD(v46) = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(v145 + 124) |= 0x400u;
    *(_DWORD *)(v55 + 68) = LODWORD(v46);
    v56 = v145;
    v57 = *(char *)(a2 + 80);
    *(_DWORD *)(v145 + 124) |= 0x80u;
    *(_DWORD *)(v56 + 56) = v57;
    v58 = v145;
    LODWORD(v46) = *(_DWORD *)(a2 + 60);
    *(_DWORD *)(v145 + 124) |= 0x800u;
    *(_DWORD *)(v58 + 72) = LODWORD(v46);
    v59 = v145;
    LODWORD(v46) = *(_DWORD *)(a2 + 64);
    *(_DWORD *)(v145 + 124) |= 0x20u;
    *(_DWORD *)(v59 + 48) = LODWORD(v46);
    v60 = v145;
    v61 = *(unsigned __int8 *)(a2 + 81);
    *(_DWORD *)(v145 + 124) |= 0x1000u;
    *(_DWORD *)(v60 + 76) = v61;
    v62 = v145;
    v63 = *(_QWORD *)(a2 + 96);
    *(_DWORD *)(v145 + 124) |= 0x40u;
    *(_DWORD *)(v62 + 52) = v63;
    v64 = v145;
    LODWORD(v63) = *(unsigned __int16 *)(a2 + 82);
    *(_DWORD *)(v145 + 124) |= 0x10000u;
    *(_DWORD *)(v64 + 92) = v63;
    v65 = v145;
    LODWORD(v63) = *(_DWORD *)(a2 + 84);
    *(_DWORD *)(v145 + 124) |= 0x200000u;
    *(_DWORD *)(v65 + 112) = v63;
    if (qword_1023118A8 != -1)
      dispatch_once(&qword_1023118A8, &stru_102144DB8);
    if (qword_1023118B0)
      sub_101888B64(qword_1023118B0, (uint64_t)buf);
    sub_1015EE304((PB::Base *)buf);
  }
}

void sub_100583798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005837B8(uint64_t result, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  uint64_t v10;
  uint8_t buf[4];
  uint64_t v12;

  *(_QWORD *)(result + 48) = *a2;
  v2 = (uint64_t *)(result + 48);
  if (*(_QWORD *)(result + 72))
  {
    v3 = result;
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_102144D98);
    v4 = qword_10229FD28;
    if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_INFO))
    {
      v5 = *v2;
      *(_DWORD *)buf = 134349056;
      v12 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Set device motion sensor status %{public}ld", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_102144D98);
      v6 = *v2;
      v9 = 134349056;
      v10 = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 1, "Set device motion sensor status %{public}ld", &v9, 12);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLSensorFusionService::updateSensorStatus(const SensorStatus &)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    return (*(uint64_t (**)(uint64_t *, _QWORD))(v3 + 72))(v2, *(_QWORD *)(v3 + 80));
  }
  return result;
}

void sub_100583988(id a1)
{
  qword_10229FD28 = (uint64_t)os_log_create("com.apple.locationd.Motion", "DeviceMotion");
}

uint64_t sub_1005839B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint8_t *v10;
  int v12;
  uint64_t v13;
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;

  v3 = a2;
  if (!*(_BYTE *)(a3 + 352))
    return a2;
  v5 = sub_100793C68(a2, 2u);
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_102144E30);
  v6 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_INFO))
  {
    v7 = *(_QWORD *)(a3 + 120);
    *(_DWORD *)buf = 134218496;
    v19 = v7;
    v20 = 1026;
    v21 = v3;
    v22 = 1026;
    v23 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Overriding youth type for generic workout, beginTime, %f, before, %{public}d, after, %{public}d", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102144E30);
    v8 = *(_QWORD *)(a3 + 120);
    v12 = 134218496;
    v13 = v8;
    v14 = 1026;
    v15 = v3;
    v16 = 1026;
    v17 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 1, "Overriding youth type for generic workout, beginTime, %f, before, %{public}d, after, %{public}d", &v12, 24);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "virtual CLMotionActivity::TypeYouth CLFitnessYouthGenericWorkoutOverride::doOverride(CLMotionActivity::TypeYouth, const CLNatalieModelInput &)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  return v5;
}

void sub_100583BBC(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_100583BE8(uint64_t a1, uint64_t a2, int a3)
{
  double v6;
  double v8;
  double v9;
  double v10;
  __int128 v11;
  double v12;
  double v13;
  BOOL v14;
  double v15;
  double v16;
  double v17;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  __int16 v29;
  _BYTE v30[39];

  v29 = 0;
  sub_10130AAB0(a2, (BOOL *)&v29 + 1, &v29);
  v28 = -1.0;
  v6 = -1.0;
  if (HIBYTE(v29))
    _ZF = v29 == 0;
  else
    _ZF = 1;
  if (!_ZF)
  {
    v6 = *(double *)(a2 + 192) + 1.414;
    v28 = v6;
  }
  if (*(double *)(a2 + 200) > 0.0 && (v8 = *(double *)(a2 + 208), v8 > 0.0) && (v9 = *(double *)(a2 + 216), v9 >= 0.0))
  {
    *(_QWORD *)v30 = *(_QWORD *)(a2 + 200);
    v26 = v9;
    v27 = v8;
    sub_100583DFC(a1, (double *)v30, &v27, &v26, &v28);
    v16 = *(double *)a1;
    v12 = *(double *)(a1 + 8);
  }
  else
  {
    v10 = *(double *)(a2 + 80);
    memset(&v30[7], 0, 32);
    v11 = *(_OWORD *)&v30[16];
    *(_OWORD *)(a1 + 41) = *(_OWORD *)v30;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_BYTE *)(a1 + 40) = 0;
    *(_OWORD *)(a1 + 57) = v11;
    *(_QWORD *)(a1 + 72) = *(_QWORD *)&v30[31];
    v12 = v10 * v10 * 0.5;
    *(double *)a1 = v12;
    *(double *)(a1 + 8) = v12;
    v13 = v6 * v6;
    v14 = v6 <= 0.0;
    v15 = -1.0;
    if (!v14)
      v15 = v13;
    *(double *)(a1 + 24) = v15;
    v16 = v12;
  }
  v17 = *(double *)(a2 + 96);
  if (v17 > 19.4444444 && v16 + v12 < 25.0)
  {
    __asm { FMOV            V1.2D, #25.0 }
    *(_OWORD *)a1 = _Q1;
    *(_QWORD *)(a1 + 16) = 0;
    v12 = 25.0;
    v16 = 25.0;
  }
  if (v16 + v12 < 156.25)
  {
    *(int64x2_t *)a1 = vdupq_n_s64(0x4063880000000000uLL);
    *(_QWORD *)(a1 + 16) = 0;
  }
  v22 = *(double *)(a1 + 24);
  if (a3 && v22 > 0.0)
  {
    v23 = 3.0;
    if (*(_BYTE *)(a2 + 228))
      v23 = 15.0;
    if (v17 == 0.0)
      v24 = 15.0;
    else
      v24 = v23;
    v25 = sqrt(v22) + v24;
    v22 = v25 * v25;
    *(double *)(a1 + 24) = v25 * v25;
  }
  if (v22 > 0.0 && v22 < 42.25)
    *(_QWORD *)(a1 + 24) = 0x4045200000000000;
  sub_10058413C(a1);
}

void sub_100583DFC(uint64_t a1, double *a2, double *a3, double *a4, double *a5)
{
  __int128 v5;
  double v6;
  NSObject *v7;
  double v10;
  double v11;
  long double v12;
  double v13;
  double v14;
  long double v15;
  double v16;
  const char *v17;
  uint8_t *v18;
  _WORD v19[8];
  uint8_t buf[1640];

  memset(&buf[7], 0, 32);
  *(_OWORD *)(a1 + 24) = xmmword_101BAFC90;
  v5 = *(_OWORD *)&buf[16];
  *(_OWORD *)(a1 + 41) = *(_OWORD *)buf;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 57) = v5;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)&buf[31];
  if (*a2 > 0.0 && *a3 > 0.0 && (v6 = *a4, *a4 >= 0.0))
  {
    v10 = *a2 / 2.45;
    v11 = *a3 / 2.45;
    if (v6 > 0.0)
    {
      v12 = tan(v6 * -2.0 * 0.0174532925);
      v13 = sqrt((v10 * v10 - v11 * v11) * (v10 * v10 - v11 * v11) * 0.25 * (v12 * v12) / (v12 * v12 + 1.0));
      *(double *)(a1 + 16) = v13;
      v14 = v10 * v10 + v11 * v11;
      v15 = (v13 + v13) / v12;
      v11 = (v14 + v15) * 0.5;
      v10 = (v14 - v15) * 0.5;
    }
    *(double *)a1 = v11;
    *(double *)(a1 + 8) = v10;
    v16 = -1.0;
    if (*a5 > 0.0)
      v16 = *a5 * *a5;
    *(double *)(a1 + 24) = v16;
  }
  else
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102144E70);
    v7 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "invalid inputs", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102144E70);
      v19[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "invalid inputs", v19, 2);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 0, "void CLMapDataUtil::CovarInvDet::init(const double &, const double &, const double &, const double &)", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
  }
}

uint64_t sub_100584090(uint64_t result, double *a2, double *a3)
{
  double v3;
  double v4;
  _BYTE v5[39];

  memset(&v5[7], 0, 32);
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = 0;
  *(_OWORD *)(result + 24) = xmmword_101BAFC90;
  *(_BYTE *)(result + 40) = 0;
  *(_OWORD *)(result + 41) = *(_OWORD *)v5;
  *(_OWORD *)(result + 57) = *(_OWORD *)&v5[16];
  *(_QWORD *)(result + 72) = 0;
  v3 = *a2 * *a2 * 0.5;
  *(double *)result = v3;
  *(double *)(result + 8) = v3;
  v4 = -1.0;
  if (*a3 > 0.0)
    v4 = *a3 * *a3;
  *(double *)(result + 24) = v4;
  return result;
}

void sub_10058413C(uint64_t a1)
{
  double v1;
  double v2;
  double v3;
  NSObject *v4;
  const char *v5;
  NSObject *v6;
  NSObject *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  NSObject *v14;
  double v15;
  double v16;
  NSObject *v17;
  uint8_t *v18;
  _QWORD v19[2];
  uint8_t buf[1640];

  v1 = *(double *)a1;
  if (*(double *)a1 <= 0.0)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102144E70);
    v6 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "fVarEast <= 0.0", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102144E70);
      LOWORD(v19[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 17, "fVarEast <= 0.0", v19, 2, v19[0]);
      goto LABEL_49;
    }
    return;
  }
  v2 = *(double *)(a1 + 8);
  if (v2 <= 0.0)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102144E70);
    v7 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "fVarNorth <= 0.0", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102144E70);
      LOWORD(v19[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 17, "fVarNorth <= 0.0", v19, 2, v19[0]);
      goto LABEL_49;
    }
    return;
  }
  v3 = *(double *)(a1 + 16);
  if (v3 >= 0.0)
  {
    v8 = *(double *)(a1 + 24);
    if (v8 <= 0.0 || v8 >= 32400.0)
    {
      *(_QWORD *)(a1 + 24) = 0xBFF0000000000000;
      *(_BYTE *)(a1 + 40) = 0;
      v15 = -v3;
      v16 = v1 * v2 - v3 * v3;
      *(double *)(a1 + 32) = v16;
      *(double *)(a1 + 48) = v2;
      *(double *)(a1 + 56) = v15;
      *(double *)(a1 + 64) = v1;
      if (v16 != 0.0)
      {
        *(double *)(a1 + 48) = v2 / v16;
        *(double *)(a1 + 56) = v15 / v16;
        *(double *)(a1 + 64) = v1 / v16;
        return;
      }
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102144E70);
      v17 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "CLMM, Unexpected determinant of 0", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        return;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 == -1)
      {
LABEL_35:
        LOWORD(v19[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 17, "CLMM, Unexpected determinant of 0", v19, 2, v19[0]);
LABEL_49:
        v18 = (uint8_t *)v5;
        sub_100512490("Generic", 1, 0, 0, "void CLMapDataUtil::CovarInvDet::calcInvAndDet()", "%s\n", v5);
        if (v18 != buf)
          free(v18);
        return;
      }
    }
    else
    {
      *(_BYTE *)(a1 + 40) = 1;
      v9 = v2 * v8;
      v10 = -(v8 * v3);
      *(double *)(a1 + 48) = v2 * v8;
      *(double *)(a1 + 56) = v10;
      v11 = v1 * v8;
      v12 = v1 * v2 - v3 * v3;
      *(double *)(a1 + 64) = v11;
      *(double *)(a1 + 72) = v12;
      v13 = v12 * v8;
      *(double *)(a1 + 32) = v12 * v8;
      if (v12 * v8 != 0.0)
      {
        *(double *)(a1 + 48) = v9 / v13;
        *(double *)(a1 + 56) = v10 / v13;
        *(double *)(a1 + 64) = v11 / v13;
        *(double *)(a1 + 72) = v12 / v13;
        return;
      }
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102144E70);
      v14 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "CLMM, Unexpected determinant of 0", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        return;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 == -1)
        goto LABEL_35;
    }
    dispatch_once(&qword_1022A00D0, &stru_102144E70);
    goto LABEL_35;
  }
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_102144E70);
  v4 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "fVarEastNorth < 0.0", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102144E70);
    LOWORD(v19[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 17, "fVarEastNorth < 0.0", v19, 2, v19[0]);
    goto LABEL_49;
  }
}

void sub_1005846E4(uint64_t a1, uint64_t a2)
{
  double v2;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  long double v13;
  _WORD v14[8];
  uint8_t buf[1640];

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v2 = *(double *)(a1 + 32);
  if (v2 <= 0.0)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102144E70);
    v10 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "determinant <= 0.0", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102144E70);
      v14[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 17, "determinant <= 0.0", v14, 2);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "void CLMapDataUtil::CovarInvDet::calculateScoreAndVarFactor(MapMatcherScore &) const", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  else
  {
    v4 = *(double *)(a1 + 48);
    v5 = *(double *)(a1 + 56);
    v6 = *(double *)(a1 + 64);
    if (*(_BYTE *)(a1 + 40))
    {
      v7 = v5 * ((*(double *)(a2 + 32) + *(double *)(a2 + 32)) * *(double *)(a2 + 40))
         + *(double *)(a2 + 32) * *(double *)(a2 + 32) * v4
         + *(double *)(a2 + 40) * *(double *)(a2 + 40) * v6
         + *(double *)(a2 + 56) * *(double *)(a2 + 56) * *(double *)(a1 + 72);
      v8 = v7 / 3.0;
      v9 = 248.050213;
    }
    else
    {
      v7 = v5 * ((*(double *)(a2 + 32) + *(double *)(a2 + 32)) * *(double *)(a2 + 40))
         + *(double *)(a2 + 32) * *(double *)(a2 + 32) * v4
         + *(double *)(a2 + 40) * *(double *)(a2 + 40) * v6;
      v8 = v7 * 0.5;
      v9 = 39.4784176;
    }
    v13 = exp(v7 * -0.5);
    *(double *)(a2 + 16) = v8;
    *(long double *)a2 = v13 / sqrt(v2 * v9);
  }
}

void sub_100584934(id a1)
{
  qword_1022A00D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

void sub_100584960(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  CFStringRef v3;
  CFStringRef v4;
  char *v5;
  const __CFURL *v6;
  const __CFURL *v7;
  const __CFString *v8;
  const __CFString *v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v12[2];

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*((char *)a1 + 23) < 0)
  {
    if (!a1[1])
    {
LABEL_7:
      v3 = (CFStringRef)CFCopyUserName();
      goto LABEL_8;
    }
    a1 = (uint64_t *)*a1;
  }
  else if (!*((_BYTE *)a1 + 23))
  {
    goto LABEL_7;
  }
  v3 = sub_1001A48D8((char *)a1);
LABEL_8:
  v4 = v3;
  sub_100197040();
  if (sub_10075D288() && (v5 = getenv("_SET_CLPERSISTENTSTORE_TEST_PATH")) != 0)
  {
    v12[0] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5);
    v12[1] = v4;
    sub_1015A2E04(&v10, (char *)-[NSString UTF8String](+[NSString pathWithComponents:](NSString, "pathWithComponents:", +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v12, 2)), "UTF8String"));
    *(_OWORD *)a2 = v10;
    a2[2] = v11;
  }
  else if (v4)
  {
    v6 = (const __CFURL *)CFCopyHomeDirectoryURLForUser(v4);
    v7 = v6;
    if (v6)
    {
      v8 = CFURLCopyFileSystemPath(v6, kCFURLPOSIXPathStyle);
      v9 = v8;
      if (v8)
      {
        sub_1001A486C(v8, (uint64_t)&v10);
        *(_OWORD *)a2 = v10;
        a2[2] = v11;
        CFRelease(v9);
      }
      CFRelease(v7);
    }
    CFRelease(v4);
  }
}

void sub_100584AC0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_100584AF0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  const __CFString *v4;
  unint64_t v5;
  std::string *v6;
  __int128 v7;
  int v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  std::string *v11;
  std::string::size_type size;
  int v13;
  std::string v14;
  std::string v15;

  v3 = a2;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  LODWORD(a2) = *(char *)(a1 + 23);
  if ((a2 & 0x80000000) != 0)
  {
    if (*(_QWORD *)(a1 + 8))
    {
LABEL_3:
      if ((a2 & 0x80) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((_BYTE)a2)
  {
    goto LABEL_3;
  }
  v4 = (const __CFString *)CFGetUserName();
  sub_1001A486C(v4, (uint64_t)&v15);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(_OWORD *)a1 = *(_OWORD *)&v15.__r_.__value_.__l.__data_;
  v5 = v15.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a1 + 16) = *((_QWORD *)&v15.__r_.__value_.__l + 2);
  a2 = (_QWORD *)HIBYTE(v5);
  if ((a2 & 0x80) == 0)
  {
LABEL_4:
    if (!(_BYTE)a2)
      return;
    goto LABEL_11;
  }
LABEL_10:
  if (!*(_QWORD *)(a1 + 8))
    return;
LABEL_11:
  sub_100584C48(&v14);
  v6 = std::string::append(&v14, "/private/var/Managed Preferences/");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = *(char *)(a1 + 23);
  if (v8 >= 0)
    v9 = (const std::string::value_type *)a1;
  else
    v9 = *(const std::string::value_type **)a1;
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(a1 + 23);
  else
    v10 = *(_QWORD *)(a1 + 8);
  v11 = std::string::append(&v15, v9, v10);
  size = v11->__r_.__value_.__l.__size_;
  *v3 = v11->__r_.__value_.__r.__words[0];
  v3[1] = size;
  *(_QWORD *)((char *)v3 + 15) = *(std::string::size_type *)((char *)&v11->__r_.__value_.__r.__words[1] + 7);
  LOBYTE(size) = *((_BYTE *)&v11->__r_.__value_.__s + 23);
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  v13 = SHIBYTE(v15.__r_.__value_.__r.__words[2]);
  *((_BYTE *)v3 + 23) = size;
  if (v13 < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
}

void sub_100584C14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

double sub_100584C48@<D0>(_QWORD *a1@<X8>)
{
  double result;
  __int128 v3;
  uint64_t v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (qword_102301C98 != -1)
    dispatch_once(&qword_102301C98, &stru_102144E90);
  if (qword_102301C90)
  {
    sub_1001A486C((const __CFString *)qword_102301C90, (uint64_t)&v3);
    result = *(double *)&v3;
    *(_OWORD *)a1 = v3;
    a1[2] = v4;
  }
  return result;
}

void sub_100584CC0(int a1@<W0>, std::string *a2@<X8>)
{
  std::string *v3;
  __int128 v4;
  std::string *v5;
  void *v6;
  std::string *v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  uint64_t v11[2];
  char v12;
  uint64_t v13[2];
  char v14;
  void *__p[2];
  char v16;
  std::string v17;
  std::string v18;

  if (a1 == 2)
  {
    sub_1015A2E04(v11, "mobile");
    sub_100584960(v11, &v18);
    v7 = std::string::append(&v18, "/Library/locationd/ColdStorage/");
    *a2 = *v7;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
    if (v12 < 0)
    {
      v6 = (void *)v11[0];
      goto LABEL_19;
    }
  }
  else if (a1 == 1)
  {
    sub_1015A2E04(v13, "mobile");
    sub_100584960(v13, &v17);
    v3 = std::string::append(&v17, "/Library/locationd/ColdStorage/");
    v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    v5 = std::string::append(&v18, "cold_encryptedB.db");
    *a2 = *v5;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
    if (v14 < 0)
    {
      v6 = (void *)v13[0];
LABEL_19:
      operator delete(v6);
    }
  }
  else
  {
    sub_1015A2E04(__p, "root");
    sub_100584960((uint64_t *)__p, &v17);
    v8 = std::string::append(&v17, "/Library/Caches/locationd/");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    v10 = std::string::append(&v18, "cold_encryptedB.db");
    *a2 = *v10;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
    if (v16 < 0)
    {
      v6 = __p[0];
      goto LABEL_19;
    }
  }
}

void sub_100584E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  if (*(char *)(v32 - 25) < 0)
    operator delete(*(void **)(v32 - 48));
  if (a32 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

void sub_100584F4C(int a1@<W0>, std::string *a2@<X8>)
{
  const std::string::value_type *v4;
  std::string::size_type v5;
  std::string *v6;
  void *v7;
  NSObject *v8;
  std::string *v9;
  NSObject *v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  std::string *v13;
  void *__p[2];
  char v15;
  uint64_t v16[2];
  char v17;
  std::string v18;
  uint64_t v19;
  std::string::size_type v20;
  unsigned __int8 v21;

  if (a1 == 3)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021452C0);
    v8 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      v18.__r_.__value_.__r.__words[0] = 0x304020100;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "no mutable store path for type, %{public}d", (uint8_t *)&v18, 8u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_29;
    bzero(&v18, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021452C0);
    v19 = 0x304020100;
    v9 = (std::string *)_os_log_send_and_compose_impl(2, 0, &v18, 1628, &_mh_execute_header, qword_1022A02D8, 0, "no mutable store path for type, %{public}d", &v19, 8);
    sub_100512490("Generic", 1, 0, 2, "static std::string CLPersistentStore::getMutableStorePath(CLPersistentStoreType)", "%s\n", (const char *)v9);
    goto LABEL_47;
  }
  if (a1)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021452C0);
    v10 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      LODWORD(v18.__r_.__value_.__l.__data_) = 67240192;
      HIDWORD(v18.__r_.__value_.__r.__words[0]) = a1;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "could not get mutable store path for type, %{public}d", (uint8_t *)&v18, 8u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_29;
    bzero(&v18, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021452C0);
    LODWORD(v19) = 67240192;
    HIDWORD(v19) = a1;
    v9 = (std::string *)_os_log_send_and_compose_impl(2, 0, &v18, 1628, &_mh_execute_header, qword_1022A02D8, 17, "could not get mutable store path for type, %{public}d", &v19, 8);
    sub_100512490("Generic", 1, 0, 0, "static std::string CLPersistentStore::getMutableStorePath(CLPersistentStoreType)", "%s\n", (const char *)v9);
LABEL_47:
    if (v9 != &v18)
      free(v9);
LABEL_29:
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    return;
  }
  if (sub_10075F4B4())
  {
    sub_1015A2E04(v16, "mobile");
    sub_100584960(v16, &v18);
    sub_1015A2E04(&v19, "/Library/Caches/locationd/");
    if ((v21 & 0x80u) == 0)
      v4 = (const std::string::value_type *)&v19;
    else
      v4 = (const std::string::value_type *)v19;
    if ((v21 & 0x80u) == 0)
      v5 = v21;
    else
      v5 = v20;
    v6 = std::string::append(&v18, v4, v5);
    *a2 = *v6;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    if ((char)v21 < 0)
      operator delete((void *)v19);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
    if (v17 < 0)
    {
      v7 = (void *)v16[0];
LABEL_43:
      operator delete(v7);
    }
  }
  else
  {
    sub_1015A2E04(__p, "root");
    sub_100584960((uint64_t *)__p, &v18);
    sub_1015A2E04(&v19, "/Library/Caches/locationd/");
    if ((v21 & 0x80u) == 0)
      v11 = (const std::string::value_type *)&v19;
    else
      v11 = (const std::string::value_type *)v19;
    if ((v21 & 0x80u) == 0)
      v12 = v21;
    else
      v12 = v20;
    v13 = std::string::append(&v18, v11, v12);
    *a2 = *v13;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if ((char)v21 < 0)
      operator delete((void *)v19);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
    if (v15 < 0)
    {
      v7 = __p[0];
      goto LABEL_43;
    }
  }
}

void sub_100585388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 - 57) < 0)
    operator delete(*(void **)(v28 - 80));
  if (a28 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  _Unwind_Resume(exception_object);
}

void sub_100585420(std::string *a1@<X8>)
{
  std::string *v2;
  std::string v3;

  sub_100584C48(&v3);
  v2 = std::string::append(&v3, "/System/Library/Frameworks/CoreLocation.framework/Support/");
  *a1 = *v2;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
}

void sub_100585484(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005854A0(std::string *a1@<X8>)
{
  std::string *v2;
  std::string v3;

  sub_100584C48(&v3);
  v2 = std::string::append(&v3, "/System/Library/Frameworks/CoreLocation.framework");
  *a1 = *v2;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
}

void sub_100585504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100585520(id a1)
{
  qword_102301C90 = (uint64_t)CFSTR("/");
}

void sub_100585534(std::string *a1@<X8>)
{
  std::string *v2;
  void *__p[2];
  char v4;
  std::string v5;

  sub_1015A2E04(__p, "mobile");
  sub_100584960((uint64_t *)__p, &v5);
  v2 = std::string::append(&v5, "/Library/locationd/");
  *a1 = *v2;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_1005855BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1005855F0@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, (char *)-[NSString UTF8String](-[NSString stringByAppendingString:](-[NSFileManager currentDirectoryPath](+[NSFileManager defaultManager](NSFileManager, "defaultManager"), "currentDirectoryPath"), "stringByAppendingString:", CFSTR("/")), "UTF8String"));
}

uint64_t sub_100585634(uint64_t a1, uint64_t a2, char *a3, int a4, int a5, int a6)
{
  _QWORD *v12;
  void **v13;
  void **v14;
  NSObject *v15;
  NSObject *v16;
  _BYTE *v17;
  uid_t v18;
  gid_t v19;
  NSObject *v20;
  void *v21;
  NSObject *v22;
  void *v23;
  void **v24;
  std::string::size_type v25;
  std::string *v26;
  std::string::size_type v27;
  char v28;
  uint64_t v29;
  NSObject *v30;
  void *v31;
  void *v32;
  NSObject *v33;
  void *v34;
  NSObject *v35;
  void *v36;
  const char *v37;
  uid_t v38;
  gid_t v39;
  const void **v41;
  void *__p[2];
  unsigned __int8 v43;
  _QWORD v44[2];
  _BYTE buf[28];

  v12 = sub_100119D70((_QWORD *)a1);
  *v12 = off_102144EC0;
  v12[2] = a2;
  *((_BYTE *)v12 + 24) = 0;
  *((_DWORD *)v12 + 7) = a4;
  v12[4] = 0xBFF0000000000000;
  v12[5] = 0;
  v41 = (const void **)(v12 + 6);
  sub_1015A2E04(v12 + 6, a3);
  *(_OWORD *)(a1 + 72) = 0u;
  v13 = (void **)(a1 + 72);
  v14 = (void **)(a1 + 96);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  objc_msgSend(*(id *)(a1 + 16), "silo");
  switch(a4)
  {
    case 0:
      sub_100585420((std::string *)buf);
      goto LABEL_14;
    case 1:
      sub_100584F4C(a5, (std::string *)buf);
      goto LABEL_14;
    case 2:
      sub_100585534((std::string *)buf);
      goto LABEL_14;
    case 3:
      sub_1005855F0(buf);
      goto LABEL_14;
    case 4:
      sub_100584CC0(2, (std::string *)buf);
LABEL_14:
      if (*(char *)(a1 + 95) < 0)
        operator delete(*v13);
      *(_OWORD *)v13 = *(_OWORD *)buf;
      *(_QWORD *)(a1 + 88) = *(_QWORD *)&buf[16];
      break;
    default:
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021452E0);
      v15 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 1026;
        *(_DWORD *)&buf[20] = a4;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unknown persistent domain\", \"domain\":%{public}d}", buf, 0x18u);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_1021452E0);
      }
      v16 = qword_1022A01D8;
      if (os_signpost_enabled((os_log_t)qword_1022A01D8))
      {
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 1026;
        *(_DWORD *)&buf[20] = a4;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Unknown persistent domain", "{\"msg%{public}.0s\":\"Unknown persistent domain\", \"domain\":%{public}d}", buf, 0x18u);
      }
      break;
  }
  if (*(char *)(a1 + 95) < 0)
  {
    if (!*(_QWORD *)(a1 + 80))
      goto LABEL_70;
    v17 = *v13;
  }
  else
  {
    v17 = (_BYTE *)(a1 + 72);
    if (!*(_BYTE *)(a1 + 95))
      goto LABEL_70;
  }
  v18 = getuid();
  v19 = getgid();
  if (!sub_100512E84(v17, v18, v19))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021452E0);
    v20 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
    {
      v21 = (void *)(a1 + 72);
      if (*(char *)(a1 + 95) < 0)
        v21 = *v13;
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"could not create path\", \"path\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021452E0);
    }
    v22 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v23 = (void *)(a1 + 72);
      if (*(char *)(a1 + 95) < 0)
        v23 = *v13;
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = v23;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v22, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "could not create path", "{\"msg%{public}.0s\":\"could not create path\", \"path\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
  }
  sub_1003625F4((const void **)(a1 + 72), v41, (uint64_t)buf);
  sub_1015A2E04(__p, ".plist");
  if ((v43 & 0x80u) == 0)
    v24 = __p;
  else
    v24 = (void **)__p[0];
  if ((v43 & 0x80u) == 0)
    v25 = v43;
  else
    v25 = (std::string::size_type)__p[1];
  v26 = std::string::append((std::string *)buf, (const std::string::value_type *)v24, v25);
  v27 = v26->__r_.__value_.__r.__words[0];
  v44[0] = v26->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v44 + 7) = *(std::string::size_type *)((char *)&v26->__r_.__value_.__r.__words[1] + 7);
  v28 = HIBYTE(v26->__r_.__value_.__r.__words[2]);
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 119) < 0)
    operator delete(*v14);
  v29 = v44[0];
  *(_QWORD *)(a1 + 96) = v27;
  *(_QWORD *)(a1 + 104) = v29;
  *(_QWORD *)(a1 + 111) = *(_QWORD *)((char *)v44 + 7);
  *(_BYTE *)(a1 + 119) = v28;
  if ((char)v43 < 0)
    operator delete(__p[0]);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_1021452E0);
  v30 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
  {
    v31 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v31 = *v14;
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2082;
    *(_QWORD *)&buf[20] = v31;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"accessing data\", \"file\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  v32 = (void *)(a1 + 96);
  if (*(char *)(a1 + 119) < 0)
    v32 = *v14;
  if (((*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)a1 + 816))(a1, v32) & 1) == 0)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021452E0);
    v33 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
    {
      v34 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v34 = *v14;
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = v34;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"file does not exist (or cannot be accessed), starting fresh\", \"file\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021452E0);
    }
    v35 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v36 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v36 = *v14;
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = v36;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v35, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "file does not exist (or cannot be accessed), starting fresh", "{\"msg%{public}.0s\":\"file does not exist (or cannot be accessed), starting fresh\", \"file\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
  }
  if (a4 == 2)
  {
    v37 = (const char *)(a1 + 72);
    if (*(char *)(a1 + 95) < 0)
      v37 = (const char *)*v13;
    v38 = getuid();
    v39 = getgid();
    sub_100512F7C(v37, v38, v39, 0x1EDu);
  }
LABEL_70:
  *(_BYTE *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 120) = a6;
  return a1;
}

void sub_100585D24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;
  void **v24;
  void **v25;

  if (*(char *)(v23 + 119) < 0)
    operator delete(*v25);
  if (*(char *)(v23 + 95) < 0)
    operator delete(*v24);
  if (*(char *)(v23 + 71) < 0)
    operator delete(*a9);
  sub_10011A56C((_QWORD *)v23);
  _Unwind_Resume(a1);
}

_QWORD *sub_100585DD4(uint64_t a1)
{
  uint64_t (**v2)();

  v2 = off_102144EC0;
  *(_QWORD *)a1 = off_102144EC0;
  if ((*(_DWORD *)(a1 + 28) - 1) <= 3)
  {
    sub_10023C0E0(a1);
    v2 = *(uint64_t (***)())a1;
  }
  ((void (*)(uint64_t))v2[120])(a1);
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  return sub_10011A56C((_QWORD *)a1);
}

void sub_100585E60(uint64_t a1)
{
  sub_100585DD4(a1);
  operator delete();
}

NSString *sub_100585E84(uint64_t a1)
{
  _QWORD *v1;

  v1 = (_QWORD *)(a1 + 72);
  if (*(char *)(a1 + 95) < 0)
    v1 = (_QWORD *)*v1;
  return +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v1);
}

void sub_100585EA8(uint64_t a1)
{
  uint64_t v1;

  v1 = 0;
  sub_100585ED4(a1, (double *)&v1, (uint64_t)&stru_102145288);
}

void sub_100585ED4(uint64_t a1, double *a2, uint64_t a3)
{
  double v4;
  id v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  _QWORD *v15;
  uint64_t v16;
  const char *v17;
  uint8_t *v18;
  double v19;
  int v20;
  _QWORD *v21;
  __int16 v22;
  uint64_t v23;
  uint8_t buf[4];
  _QWORD *v25;
  __int16 v26;
  uint64_t v27;

  v4 = *a2;
  *(double *)(a1 + 32) = *a2;
  if (v4 <= 0.0)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021452C0);
    v10 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v11 = (_QWORD *)(a1 + 48);
      if (*(char *)(a1 + 71) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136315138;
      v25 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "disabling auto-store for %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021452C0);
      v12 = (_QWORD *)(a1 + 48);
      if (*(char *)(a1 + 71) < 0)
        v12 = (_QWORD *)*v12;
      v20 = 136315138;
      v21 = v12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "disabling auto-store for %s", (const char *)&v20);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLPersistentStore::setStoreInterval(const CFTimeInterval &, CLSiloBlock)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    objc_msgSend(*(id *)(a1 + 40), "invalidate");

    *(_QWORD *)(a1 + 40) = 0;
  }
  else
  {
    if (!a3)
      sub_1018FFF14();
    if (!*(_QWORD *)(a1 + 40))
    {
      v6 = objc_msgSend(objc_msgSend(*(id *)(a1 + 16), "silo"), "newTimer");
      *(_QWORD *)(a1 + 40) = v6;
      objc_msgSend(v6, "setHandler:", a3);
    }
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021452C0);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 48);
      if (*(char *)(a1 + 71) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 136315394;
      v25 = v8;
      v26 = 2048;
      v27 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "scheduling to auto-store %s every %.3fs", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021452C0);
      v15 = (_QWORD *)(a1 + 48);
      if (*(char *)(a1 + 71) < 0)
        v15 = (_QWORD *)*v15;
      v16 = *(_QWORD *)(a1 + 32);
      v20 = 136315394;
      v21 = v15;
      v22 = 2048;
      v23 = v16;
      LODWORD(v19) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "scheduling to auto-store %s every %.3fs", (const char *)&v20, v19);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLPersistentStore::setStoreInterval(const CFTimeInterval &, CLSiloBlock)", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    objc_msgSend(*(id *)(a1 + 40), "setNextFireDelay:", *(double *)(a1 + 32));
  }
}

id sub_100586288(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 944))(a1);
  return objc_msgSend(*(id *)(a1 + 40), "setNextFireDelay:", *(double *)(a1 + 32));
}

void sub_1005862B8(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1005862E4(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_1005863B4(id a1)
{
  qword_102301CA0 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLHomeKitProviderSilo"));
}

uint64_t sub_100586468(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100587B14;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_102301CB8 != -1)
    dispatch_once(&qword_102301CB8, block);
  return qword_102301CC0;
}

void sub_100586678(uint64_t a1, char a2)
{
  int v2;
  _BYTE v3[72];
  void *__p;
  void *v5;
  uint64_t v6;

  v3[8] = 0;
  v3[64] = 0;
  v5 = 0;
  v6 = 0;
  __p = 0;
  v3[0] = a2;
  v2 = 0;
  (*(void (**)(uint64_t, int *, _BYTE *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v2, v3, 1, 0xFFFFFFFFLL, 0);
  if (__p)
  {
    v5 = __p;
    operator delete(__p);
  }
}

void sub_1005866E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100586790(uint64_t a1)
{
  uint64_t result;
  NSObject *v3;
  _BOOL4 v4;
  const char *v5;
  uint8_t *v6;
  int v7;
  uint64_t v8;
  uint8_t buf[4];
  uint64_t v10;

  if (!a1)
    return 1;
  if (a1 == 1)
    return 2;
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_102145450);
  v3 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    v10 = a1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Unknown WPHomeKitType %ld", buf, 0xCu);
  }
  v4 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v4)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102145450);
    v7 = 134217984;
    v8 = a1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "Unknown WPHomeKitType %ld", &v7);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 0, "CLHomeKitProvider_Type::HomeKitType (anonymous namespace)::getHomeKitType(WPHomeKitType)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
    return 0;
  }
  return result;
}

void sub_100586960(uint64_t a1, void *a2, int a3, void *a4, int a5, int a6, double a7)
{
  NSObject *v14;
  NSObject *v15;
  const char *v16;
  std::string *v17;
  NSObject *v18;
  const char *v19;
  NSObject *v20;
  const char *v21;
  _BYTE *v22;
  uint64_t v23;
  int v24;
  NSObject *v25;
  std::string *v26;
  uint64_t v27;
  std::string *v28;
  std::string *v29;
  char *v30;
  int v31;
  int v32;
  char *v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  __int16 v37;
  __int16 *v38;
  unint64_t v39;
  char v40;
  __int16 v41;
  uint64_t v42;
  char v43;
  char v44;
  char *v45;
  int v46;
  NSObject *v47;
  std::string *v48;
  uint64_t v49;
  std::string *v50;
  std::string *v51;
  unsigned int v52;
  int v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  const char *v58;
  std::string *v59;
  uint64_t v60;
  __int16 v61;
  char v62;
  int v63;
  __int16 v64;
  int v65;
  std::string v66;
  int v67;
  __int16 v68;
  int v69;
  int v70;
  std::string *v71;
  std::string buf;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  char v76;
  void *__p;
  void *v78;
  uint64_t v79;

  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_102145450);
  v14 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 138478595;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)objc_msgSend(a2, "UUIDString");
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2113;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)objc_msgSend(a4, "description");
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 1025;
    LODWORD(v73) = a5;
    WORD2(v73) = 1025;
    *(_DWORD *)((char *)&v73 + 6) = a6;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "found device %{private}@, data: %{private}@, rssi: %{private}d, type: %{private}d", (uint8_t *)&buf, 0x22u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102145450);
    v57 = qword_1022A02A8;
    LODWORD(v66.__r_.__value_.__l.__data_) = 138478595;
    *(std::string::size_type *)((char *)v66.__r_.__value_.__r.__words + 4) = (std::string::size_type)objc_msgSend(a2, "UUIDString");
    WORD2(v66.__r_.__value_.__r.__words[1]) = 2113;
    *(std::string::size_type *)((char *)&v66.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)objc_msgSend(a4, "description");
    HIWORD(v66.__r_.__value_.__r.__words[2]) = 1025;
    v67 = a5;
    v68 = 1025;
    v69 = a6;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v57, 2, "found device %{private}@, data: %{private}@, rssi: %{private}d, type: %{private}d", &v66, 34);
    v59 = (std::string *)v58;
    sub_100512490("Generic", 1, 0, 2, "void CLHomeKitProvider::onHomeKitDeviceFound(NSUUID *, CLHomeKitProvider_Type::HAPVersion, NSData *, int, cl::chrono::CFAbsoluteTimeClock::time_point, CLHomeKitProvider_Type::HomeKitType)", "%s\n", v58);
    if (v59 != &buf)
      free(v59);
  }
  if (!a4)
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102145450);
    v18 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#Warning Got a device notification but not device data", (uint8_t *)&buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(&buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102145450);
    LOWORD(v66.__r_.__value_.__l.__data_) = 0;
    LODWORD(v60) = 2;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A02A8, 0, "#Warning Got a device notification but not device data", &v66, v60);
    v17 = (std::string *)v19;
    sub_100512490("Generic", 1, 0, 2, "void CLHomeKitProvider::onHomeKitDeviceFound(NSUUID *, CLHomeKitProvider_Type::HAPVersion, NSData *, int, cl::chrono::CFAbsoluteTimeClock::time_point, CLHomeKitProvider_Type::HomeKitType)", "%s\n", v19);
    goto LABEL_35;
  }
  if (a3 == 2)
  {
    if ((unint64_t)objc_msgSend(a4, "length") <= 0x10)
    {
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102145450);
      v20 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#Warning Found invalid HomeKit device. Data length was invalid", (uint8_t *)&buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return;
      bzero(&buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102145450);
      LOWORD(v66.__r_.__value_.__l.__data_) = 0;
      LODWORD(v60) = 2;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A02A8, 0, "#Warning Found invalid HomeKit device. Data length was invalid", &v66, v60);
      v17 = (std::string *)v21;
      sub_100512490("Generic", 1, 0, 2, "BOOL (anonymous namespace)::addToScanCache(std::vector<CLHomeKitProvider_Type::HomeKitDevice> &, NSUUID *, NSData *, int, cl::chrono::CFAbsoluteTimeClock::time_point, CLHomeKitProvider_Type::HomeKitType) [HomeKitType = (anonymous namespace)::HomeKitManufacturerData]", "%s\n", v21);
      goto LABEL_35;
    }
    v30 = (char *)objc_msgSend(a4, "bytes");
    v31 = sub_100587F58((uint64_t)v30);
    if (v31 != 9)
    {
      v46 = v31;
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102145450);
      v47 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
      {
        sub_100588018((unsigned __int16 *)v30, v46, 1, &buf);
        v48 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &buf
            : (std::string *)buf.__r_.__value_.__r.__words[0];
        LODWORD(v66.__r_.__value_.__l.__data_) = 136380675;
        *(std::string::size_type *)((char *)v66.__r_.__value_.__r.__words + 4) = (std::string::size_type)v48;
        _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "#Warning Found invalid HomeKit device: %{private}s", (uint8_t *)&v66, 0xCu);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
      }
      if (!sub_1001BFF7C(115, 2))
        return;
      bzero(&buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102145450);
      v49 = qword_1022A02A8;
      sub_100588018((unsigned __int16 *)v30, v46, 1, &v66);
      if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v50 = &v66;
      else
        v50 = (std::string *)v66.__r_.__value_.__r.__words[0];
      v70 = 136380675;
      v71 = v50;
      LODWORD(v60) = 12;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v49, 0, "#Warning Found invalid HomeKit device: %{private}s", &v70, v60);
      v17 = v51;
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v66.__r_.__value_.__l.__data_);
      sub_100512490("Generic", 1, 0, 2, "BOOL (anonymous namespace)::addToScanCache(std::vector<CLHomeKitProvider_Type::HomeKitDevice> &, NSUUID *, NSData *, int, cl::chrono::CFAbsoluteTimeClock::time_point, CLHomeKitProvider_Type::HomeKitType) [HomeKitType = (anonymous namespace)::HomeKitManufacturerData]", "%s\n", (const char *)v17);
      goto LABEL_81;
    }
    v32 = 0;
    *(double *)&buf.__r_.__value_.__l.__data_ = a7;
    v70 = a5;
    v65 = a6;
    v64 = 0;
    if ((((v30[3] + 115) >> 5) | (8 * (v30[3] + 115))) <= 7u)
      v32 = dword_101BB6DAC[(char)(((v30[3] + 115) >> 5) | (8 * (v30[3] + 115)))];
    v33 = v30 + 2;
    v63 = v32;
    v34 = v30[4] & 1;
    v62 = v34;
    v35 = *(unsigned __int16 *)(v30 + 9);
    v36 = *(unsigned int *)(v30 + 5);
    LODWORD(v66.__r_.__value_.__l.__data_) = *(_DWORD *)(v30 + 5);
    WORD2(v66.__r_.__value_.__r.__words[0]) = v35;
    if (*(unsigned __int16 *)(v30 + 11) >= 0x10u)
      v37 = 16;
    else
      v37 = *(_WORD *)(v30 + 11);
    v61 = v37;
    v38 = (__int16 *)(v30 + 13);
    v39 = *(_QWORD *)(a1 + 136);
    if (v39 >= *(_QWORD *)(a1 + 144))
    {
      v45 = sub_10058B9DC((void **)(a1 + 128), &v64, v33, &v63, &v62, (int *)&v66, &v61, v38, v30 + 15, v30 + 16, (uint64_t *)&buf, &v70, &v65);
    }
    else
    {
      v40 = *v33;
      v41 = *v38;
      v42 = v36 | (v35 << 32);
      v43 = v30[15];
      v44 = v30[16];
      *(_BYTE *)v39 = 2;
      *(_DWORD *)(v39 + 1) = v42;
      *(_WORD *)(v39 + 5) = WORD2(v42);
      *(_WORD *)(v39 + 8) = v37;
      *(double *)(v39 + 16) = a7;
      *(_DWORD *)(v39 + 24) = a5;
      *(_WORD *)(v39 + 28) = 0;
      *(_BYTE *)(v39 + 30) = v40;
      *(_DWORD *)(v39 + 32) = v32;
      *(_BYTE *)(v39 + 36) = v34;
      *(_WORD *)(v39 + 38) = v41;
      *(_BYTE *)(v39 + 40) = v43;
      *(_BYTE *)(v39 + 41) = v44;
      *(_BYTE *)(v39 + 44) = 1;
      *(_DWORD *)(v39 + 48) = a6;
      v45 = (char *)(v39 + 56);
      *(_BYTE *)(v39 + 52) = 1;
    }
    *(_QWORD *)(a1 + 136) = v45;
    goto LABEL_89;
  }
  if (a3 != 1)
    return;
  if ((unint64_t)objc_msgSend(a4, "length") > 8)
  {
    v22 = objc_msgSend(a4, "bytes");
    v23 = (uint64_t)v22;
    if (v22[8])
    {
      v24 = 0;
LABEL_39:
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102145450);
      v25 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
      {
        sub_10058B384(v23, v24, &buf);
        v26 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &buf
            : (std::string *)buf.__r_.__value_.__r.__words[0];
        LODWORD(v66.__r_.__value_.__l.__data_) = 136380675;
        *(std::string::size_type *)((char *)v66.__r_.__value_.__r.__words + 4) = (std::string::size_type)v26;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#Warning Found invalid HomeKit device: %{private}s", (uint8_t *)&v66, 0xCu);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
      }
      if (!sub_1001BFF7C(115, 2))
        return;
      bzero(&buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102145450);
      v27 = qword_1022A02A8;
      sub_10058B384(v23, v24, &v66);
      if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v28 = &v66;
      else
        v28 = (std::string *)v66.__r_.__value_.__r.__words[0];
      v70 = 136380675;
      v71 = v28;
      LODWORD(v60) = 12;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v27, 0, "#Warning Found invalid HomeKit device: %{private}s", &v70, v60);
      v17 = v29;
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v66.__r_.__value_.__l.__data_);
      sub_100512490("Generic", 1, 0, 2, "BOOL (anonymous namespace)::addToScanCache(std::vector<CLHomeKitProvider_Type::HomeKitDevice> &, NSUUID *, NSData *, int, cl::chrono::CFAbsoluteTimeClock::time_point, CLHomeKitProvider_Type::HomeKitType) [HomeKitType = (anonymous namespace)::HomeKitServiceData]", "%s\n", (const char *)v17);
LABEL_81:
      if (v17 != &buf)
        goto LABEL_36;
      return;
    }
    v52 = *((unsigned __int16 *)v22 + 3);
    if (!*((_WORD *)v22 + 3))
    {
      v24 = 1;
      goto LABEL_39;
    }
    *(double *)&buf.__r_.__value_.__l.__data_ = a7;
    v70 = a5;
    v53 = *(_DWORD *)v22;
    WORD2(v66.__r_.__value_.__r.__words[0]) = *((_WORD *)v22 + 2);
    LODWORD(v66.__r_.__value_.__l.__data_) = v53;
    if (v52 >= 0x10)
      LOWORD(v52) = 16;
    LOWORD(v65) = v52;
    sub_10058B824((void **)(a1 + 128), (int *)&v66, (__int16 *)&v65, (uint64_t *)&buf, &v70);
    v45 = *(char **)(a1 + 136);
LABEL_89:
    buf.__r_.__value_.__s.__data_[8] = 0;
    v76 = 0;
    v78 = 0;
    v79 = 0;
    __p = 0;
    v54 = *(_OWORD *)(v45 - 56);
    v55 = *(_OWORD *)(v45 - 40);
    v56 = *(_OWORD *)(v45 - 24);
    v75 = *((_QWORD *)v45 - 1);
    v74 = v56;
    v73 = v55;
    *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = v54;
    v76 = 1;
    LODWORD(v66.__r_.__value_.__l.__data_) = 1;
    (*(void (**)(uint64_t, std::string *, std::string *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v66, &buf, 1, 0xFFFFFFFFLL, 0);
    if (__p)
    {
      v78 = __p;
      operator delete(__p);
    }
    return;
  }
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_102145450);
  v15 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#Warning Found invalid HomeKit device. Data length was invalid", (uint8_t *)&buf, 2u);
  }
  if (!sub_1001BFF7C(115, 2))
    return;
  bzero(&buf, 0x65CuLL);
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_102145450);
  LOWORD(v66.__r_.__value_.__l.__data_) = 0;
  LODWORD(v60) = 2;
  _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A02A8, 0, "#Warning Found invalid HomeKit device. Data length was invalid", &v66, v60);
  v17 = (std::string *)v16;
  sub_100512490("Generic", 1, 0, 2, "BOOL (anonymous namespace)::addToScanCache(std::vector<CLHomeKitProvider_Type::HomeKitDevice> &, NSUUID *, NSData *, int, cl::chrono::CFAbsoluteTimeClock::time_point, CLHomeKitProvider_Type::HomeKitType) [HomeKitType = (anonymous namespace)::HomeKitServiceData]", "%s\n", v16);
LABEL_35:
  if (v17 != &buf)
LABEL_36:
    free(v17);
}

void sub_1005874A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100587840(uint64_t a1, void *a2, int a3)
{
  NSObject *v5;
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  id v10;
  __int16 v11;
  int v12;
  uint8_t buf[4];
  id v14;
  __int16 v15;
  int v16;

  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_102145450);
  v5 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 138543618;
    v14 = objc_msgSend(a2, "description");
    v15 = 1024;
    v16 = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "HomeKit error: %{public}@ for type: %d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102145450);
    v6 = qword_1022A02A8;
    v9 = 138543618;
    v10 = objc_msgSend(a2, "description");
    v11 = 1024;
    v12 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v6, 17, "HomeKit error: %{public}@ for type: %d", &v9, 18);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 0, "void CLHomeKitProvider::onHomeKitScanningError(NSError *, CLHomeKitProvider_Type::HomeKitType)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
}

void sub_100587B14()
{
  operator new();
}

void sub_100587B5C()
{
  operator delete();
}

uint64_t sub_100587B80(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  _QWORD v6[5];

  v3 = sub_100587CCC(a1, "CLHomeKitProvider", a2);
  *(_QWORD *)v3 = off_102145330;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_QWORD *)(a1 + 160) = objc_msgSend(*(id *)(v3 + 40), "newTimer");
  v4 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 112) = -[CLHomeKitDelegate initWithProvider:]([CLHomeKitDelegate alloc], "initWithProvider:", a1);
  *(_QWORD *)(a1 + 120) = objc_msgSend(objc_alloc((Class)WPHomeKit), "initWithDelegate:queue:", *(_QWORD *)(a1 + 112), objc_msgSend(v4, "queue"));
  *(_QWORD *)(a1 + 152) = objc_msgSend(objc_alloc((Class)CBCentralManager), "initWithDelegate:queue:", *(_QWORD *)(a1 + 112), objc_msgSend(v4, "queue"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100587D68;
  v6[3] = &unk_10212ECA0;
  v6[4] = a1;
  objc_msgSend(*(id *)(a1 + 160), "setHandler:", v6);
  return a1;
}

void sub_100587CA4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 136) = v4;
    operator delete(v4);
  }
  sub_100587E4C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100587CCC(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_102145480;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_100587D4C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

id sub_100587D68(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  sub_100587DB0((_QWORD *)v1);
  return objc_msgSend(*(id *)(v1 + 160), "setNextFireTime:", (*(double *)&qword_102301CB0 + j__CFAbsoluteTimeGetCurrent() * 1000.0) / 1000.0);
}

void sub_100587DB0(_QWORD *a1)
{
  void *v1;
  void *v2;
  int v3;
  _BYTE v4[72];
  void *__p;
  void *v6;
  uint64_t v7;

  v1 = (void *)a1[16];
  v2 = (void *)a1[17];
  if (v1 != v2)
  {
    v4[8] = 0;
    v4[64] = 0;
    __p = v1;
    v6 = v2;
    a1[16] = 0;
    a1[17] = 0;
    v7 = a1[18];
    a1[18] = 0;
    v3 = 2;
    (*(void (**)(_QWORD *, int *, _BYTE *, uint64_t, uint64_t, _QWORD))(*a1 + 152))(a1, &v3, v4, 1, 0xFFFFFFFFLL, 0);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
}

void sub_100587E30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100587E4C(uint64_t a1)
{
  *(_QWORD *)a1 = off_102145480;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_100587EC0(_QWORD *a1)
{
  void *v2;

  *a1 = off_102145330;
  v2 = (void *)a1[16];
  if (v2)
  {
    a1[17] = v2;
    operator delete(v2);
  }
  return sub_100587E4C((uint64_t)a1);
}

void sub_100587EFC(id *a1)
{
  objc_msgSend(a1[20], "invalidate");

  a1[20] = 0;
  objc_msgSend(a1[15], "invalidate");

  a1[15] = 0;
  a1[14] = 0;

  a1[19] = 0;
}

uint64_t sub_100587F58(uint64_t a1)
{
  char v1;
  unsigned int v2;

  if (*(_WORD *)a1 == 76)
  {
    if (*(_BYTE *)(a1 + 2) == 6)
    {
      v1 = *(_BYTE *)(a1 + 3);
      if ((v1 & 0x1F) == 0xD)
      {
        v2 = (((v1 + 115) >> 5) | (8 * (v1 + 115)));
        if (v2 > 7 || v2 == 4)
        {
          return 3;
        }
        else if (*(unsigned __int8 *)(a1 + 4) > 1u)
        {
          return 4;
        }
        else if (*(_WORD *)(a1 + 11))
        {
          if (*(_WORD *)(a1 + 13))
          {
            if (*(_BYTE *)(a1 + 15))
            {
              if (*(_BYTE *)(a1 + 16) == 2)
                return 9;
              else
                return 8;
            }
            else
            {
              return 7;
            }
          }
          else
          {
            return 6;
          }
        }
        else
        {
          return 5;
        }
      }
      else
      {
        return 2;
      }
    }
    else
    {
      return 1;
    }
  }
  else
  {
    return 0;
  }
}

double sub_100588018@<D0>(unsigned __int16 *a1@<X0>, int a2@<W1>, int a3@<W2>, std::string *a4@<X8>)
{
  std::string *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  std::string::size_type size;
  std::string *v13;
  __int128 v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  void *v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  std::string::size_type v35;
  std::string *v36;
  __int128 v37;
  double result;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  __int128 v42;
  std::string *v43;
  std::string::size_type v44;
  std::string *v45;
  __int128 v46;
  std::string *v47;
  __int128 v48;
  std::string *v49;
  __int128 v50;
  std::string *v51;
  std::string::size_type v52;
  std::string *v53;
  __int128 v54;
  std::string *v55;
  __int128 v56;
  std::string *v57;
  std::string::size_type v58;
  std::string *v59;
  __int128 v60;
  const std::string::value_type *v61;
  std::string::size_type v62;
  std::string *v63;
  __int128 v64;
  std::string *v65;
  __int128 v66;
  std::string *v67;
  std::string::size_type v68;
  std::string *v69;
  __int128 v70;
  std::string *v71;
  __int128 v72;
  std::string *v73;
  std::string::size_type v74;
  std::string *v75;
  __int128 v76;
  std::string *v77;
  __int128 v78;
  std::string *v79;
  __int128 v80;
  std::string *v81;
  std::string::size_type v82;
  std::string *v83;
  __int128 v84;
  std::string *v85;
  __int128 v86;
  std::string *v87;
  std::string::size_type v88;
  std::string *v89;
  __int128 v90;
  std::string *v91;
  __int128 v92;
  std::string *v93;
  __int128 v94;
  std::string *v95;
  std::string::size_type v96;
  std::string *v97;
  __int128 v98;
  std::string v99;
  std::string v100;
  std::string v101;
  std::string v102;
  std::string v103;
  std::string v104;
  std::string v105;
  __int128 v106;
  int64_t v107;
  std::string v108;

  memset(&v108, 0, sizeof(v108));
  switch(a2)
  {
    case 0:
      std::string::assign(&v108, "Invalid Company Identifier");
      if (!a3)
        goto LABEL_164;
      std::to_string(&v103, *a1);
      v7 = std::string::insert(&v103, 0, " got: ");
      v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v104.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      v9 = std::string::append(&v104, " expected: ");
      v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v105.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v102, 76);
      if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v11 = &v102;
      else
        v11 = (std::string *)v102.__r_.__value_.__r.__words[0];
      if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v102.__r_.__value_.__r.__words[2]);
      else
        size = v102.__r_.__value_.__l.__size_;
      v13 = std::string::append(&v105, (const std::string::value_type *)v11, size);
      v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v107 = v13->__r_.__value_.__r.__words[2];
      v106 = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      if (v107 >= 0)
        v15 = (const std::string::value_type *)&v106;
      else
        v15 = (const std::string::value_type *)v106;
      if (v107 >= 0)
        v16 = HIBYTE(v107);
      else
        v16 = *((_QWORD *)&v106 + 1);
      goto LABEL_153;
    case 1:
      std::string::assign(&v108, "Invalid Type");
      if (!a3)
        goto LABEL_164;
      std::to_string(&v103, *((unsigned __int8 *)a1 + 2));
      v39 = std::string::insert(&v103, 0, " got: ");
      v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      v104.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v40;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      v41 = std::string::append(&v104, " exptected: ");
      v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      v105.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v42;
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v102, 6);
      if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v43 = &v102;
      else
        v43 = (std::string *)v102.__r_.__value_.__r.__words[0];
      if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v44 = HIBYTE(v102.__r_.__value_.__r.__words[2]);
      else
        v44 = v102.__r_.__value_.__l.__size_;
      v45 = std::string::append(&v105, (const std::string::value_type *)v43, v44);
      v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
      v107 = v45->__r_.__value_.__r.__words[2];
      v106 = v46;
      v45->__r_.__value_.__l.__size_ = 0;
      v45->__r_.__value_.__r.__words[2] = 0;
      v45->__r_.__value_.__r.__words[0] = 0;
      if (v107 >= 0)
        v15 = (const std::string::value_type *)&v106;
      else
        v15 = (const std::string::value_type *)v106;
      if (v107 >= 0)
        v16 = HIBYTE(v107);
      else
        v16 = *((_QWORD *)&v106 + 1);
      goto LABEL_153;
    case 2:
      std::string::assign(&v108, "Invalid Remaining Length");
      if (!a3)
        goto LABEL_164;
      std::to_string(&v103, *((_BYTE *)a1 + 3) & 0x1F);
      v17 = std::string::insert(&v103, 0, " got: ");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v104.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v104, " expected: ");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v105.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v102, 13);
      if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v102;
      else
        v21 = (std::string *)v102.__r_.__value_.__r.__words[0];
      if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v102.__r_.__value_.__r.__words[2]);
      else
        v22 = v102.__r_.__value_.__l.__size_;
      v23 = std::string::append(&v105, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v107 = v23->__r_.__value_.__r.__words[2];
      v106 = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      if (v107 >= 0)
        v15 = (const std::string::value_type *)&v106;
      else
        v15 = (const std::string::value_type *)v106;
      if (v107 >= 0)
        v16 = HIBYTE(v107);
      else
        v16 = *((_QWORD *)&v106 + 1);
      goto LABEL_153;
    case 3:
      std::string::assign(&v108, "Invalid Advertising Interval and Length");
      if (!a3)
        goto LABEL_164;
      std::to_string(&v105, *((unsigned __int8 *)a1 + 3));
      v25 = std::string::insert(&v105, 0, ": ");
      v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v107 = v25->__r_.__value_.__r.__words[2];
      v106 = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      if (v107 >= 0)
        v27 = (const std::string::value_type *)&v106;
      else
        v27 = (const std::string::value_type *)v106;
      if (v107 >= 0)
        v28 = HIBYTE(v107);
      else
        v28 = *((_QWORD *)&v106 + 1);
      std::string::append(&v108, v27, v28);
      if (SHIBYTE(v107) < 0)
        operator delete((void *)v106);
      if ((SHIBYTE(v105.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_164;
      v29 = (void *)v105.__r_.__value_.__r.__words[0];
      break;
    case 4:
      std::string::assign(&v108, "Invalid Status Flags");
      if (!a3)
        goto LABEL_164;
      std::to_string(&v103, *((unsigned __int8 *)a1 + 4) >> 1);
      v30 = std::string::insert(&v103, 0, " got: ");
      v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      v104.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      v32 = std::string::append(&v104, " expected: ");
      v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v105.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v102, 0);
      if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v34 = &v102;
      else
        v34 = (std::string *)v102.__r_.__value_.__r.__words[0];
      if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = HIBYTE(v102.__r_.__value_.__r.__words[2]);
      else
        v35 = v102.__r_.__value_.__l.__size_;
      v36 = std::string::append(&v105, (const std::string::value_type *)v34, v35);
      v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v107 = v36->__r_.__value_.__r.__words[2];
      v106 = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      if (v107 >= 0)
        v15 = (const std::string::value_type *)&v106;
      else
        v15 = (const std::string::value_type *)v106;
      if (v107 >= 0)
        v16 = HIBYTE(v107);
      else
        v16 = *((_QWORD *)&v106 + 1);
      goto LABEL_153;
    case 5:
      std::string::assign(&v108, "Invalid Accessory Category Identifier");
      if (!a3)
        goto LABEL_164;
      std::to_string(&v101, 1);
      v47 = std::string::insert(&v101, 0, " (out of range [");
      v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
      v102.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v48;
      v47->__r_.__value_.__l.__size_ = 0;
      v47->__r_.__value_.__r.__words[2] = 0;
      v47->__r_.__value_.__r.__words[0] = 0;
      v49 = std::string::append(&v102, " - ");
      v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
      v103.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v50;
      v49->__r_.__value_.__l.__size_ = 0;
      v49->__r_.__value_.__r.__words[2] = 0;
      v49->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v100, 0xFFFF);
      if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v51 = &v100;
      else
        v51 = (std::string *)v100.__r_.__value_.__r.__words[0];
      if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v52 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
      else
        v52 = v100.__r_.__value_.__l.__size_;
      v53 = std::string::append(&v103, (const std::string::value_type *)v51, v52);
      v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
      v104.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v54;
      v53->__r_.__value_.__l.__size_ = 0;
      v53->__r_.__value_.__r.__words[2] = 0;
      v53->__r_.__value_.__r.__words[0] = 0;
      v55 = std::string::append(&v104, "]): ");
      v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
      v105.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v56;
      v55->__r_.__value_.__l.__size_ = 0;
      v55->__r_.__value_.__r.__words[2] = 0;
      v55->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v99, *(unsigned __int16 *)((char *)a1 + 11));
      if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v57 = &v99;
      else
        v57 = (std::string *)v99.__r_.__value_.__r.__words[0];
      if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v58 = HIBYTE(v99.__r_.__value_.__r.__words[2]);
      else
        v58 = v99.__r_.__value_.__l.__size_;
      v59 = std::string::append(&v105, (const std::string::value_type *)v57, v58);
      v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
      v107 = v59->__r_.__value_.__r.__words[2];
      v106 = v60;
      v59->__r_.__value_.__l.__size_ = 0;
      v59->__r_.__value_.__r.__words[2] = 0;
      v59->__r_.__value_.__r.__words[0] = 0;
      if (v107 >= 0)
        v61 = (const std::string::value_type *)&v106;
      else
        v61 = (const std::string::value_type *)v106;
      if (v107 >= 0)
        v62 = HIBYTE(v107);
      else
        v62 = *((_QWORD *)&v106 + 1);
      goto LABEL_124;
    case 6:
      std::string::assign(&v108, "Invalid Global State Number");
      if (!a3)
        goto LABEL_164;
      std::to_string(&v101, 1);
      v63 = std::string::insert(&v101, 0, " (out of range [");
      v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
      v102.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v64;
      v63->__r_.__value_.__l.__size_ = 0;
      v63->__r_.__value_.__r.__words[2] = 0;
      v63->__r_.__value_.__r.__words[0] = 0;
      v65 = std::string::append(&v102, " - ");
      v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
      v103.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v66;
      v65->__r_.__value_.__l.__size_ = 0;
      v65->__r_.__value_.__r.__words[2] = 0;
      v65->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v100, 0xFFFF);
      if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v67 = &v100;
      else
        v67 = (std::string *)v100.__r_.__value_.__r.__words[0];
      if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v68 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
      else
        v68 = v100.__r_.__value_.__l.__size_;
      v69 = std::string::append(&v103, (const std::string::value_type *)v67, v68);
      v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
      v104.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v70;
      v69->__r_.__value_.__l.__size_ = 0;
      v69->__r_.__value_.__r.__words[2] = 0;
      v69->__r_.__value_.__r.__words[0] = 0;
      v71 = std::string::append(&v104, "]): ");
      v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
      v105.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v72;
      v71->__r_.__value_.__l.__size_ = 0;
      v71->__r_.__value_.__r.__words[2] = 0;
      v71->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v99, *(unsigned __int16 *)((char *)a1 + 13));
      if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v73 = &v99;
      else
        v73 = (std::string *)v99.__r_.__value_.__r.__words[0];
      if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v74 = HIBYTE(v99.__r_.__value_.__r.__words[2]);
      else
        v74 = v99.__r_.__value_.__l.__size_;
      v75 = std::string::append(&v105, (const std::string::value_type *)v73, v74);
      v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
      v107 = v75->__r_.__value_.__r.__words[2];
      v106 = v76;
      v75->__r_.__value_.__l.__size_ = 0;
      v75->__r_.__value_.__r.__words[2] = 0;
      v75->__r_.__value_.__r.__words[0] = 0;
      if (v107 >= 0)
        v61 = (const std::string::value_type *)&v106;
      else
        v61 = (const std::string::value_type *)v106;
      if (v107 >= 0)
        v62 = HIBYTE(v107);
      else
        v62 = *((_QWORD *)&v106 + 1);
      goto LABEL_124;
    case 7:
      std::string::assign(&v108, "Invalid Configuration Number");
      if (!a3)
        goto LABEL_164;
      std::to_string(&v101, 1);
      v77 = std::string::insert(&v101, 0, " (out of range [");
      v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
      v102.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v78;
      v77->__r_.__value_.__l.__size_ = 0;
      v77->__r_.__value_.__r.__words[2] = 0;
      v77->__r_.__value_.__r.__words[0] = 0;
      v79 = std::string::append(&v102, " - ");
      v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
      v103.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v80;
      v79->__r_.__value_.__l.__size_ = 0;
      v79->__r_.__value_.__r.__words[2] = 0;
      v79->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v100, 255);
      if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v81 = &v100;
      else
        v81 = (std::string *)v100.__r_.__value_.__r.__words[0];
      if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v82 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
      else
        v82 = v100.__r_.__value_.__l.__size_;
      v83 = std::string::append(&v103, (const std::string::value_type *)v81, v82);
      v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
      v104.__r_.__value_.__r.__words[2] = v83->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v84;
      v83->__r_.__value_.__l.__size_ = 0;
      v83->__r_.__value_.__r.__words[2] = 0;
      v83->__r_.__value_.__r.__words[0] = 0;
      v85 = std::string::append(&v104, "]): ");
      v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
      v105.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v86;
      v85->__r_.__value_.__l.__size_ = 0;
      v85->__r_.__value_.__r.__words[2] = 0;
      v85->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v99, *((unsigned __int8 *)a1 + 15));
      if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v87 = &v99;
      else
        v87 = (std::string *)v99.__r_.__value_.__r.__words[0];
      if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v88 = HIBYTE(v99.__r_.__value_.__r.__words[2]);
      else
        v88 = v99.__r_.__value_.__l.__size_;
      v89 = std::string::append(&v105, (const std::string::value_type *)v87, v88);
      v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
      v107 = v89->__r_.__value_.__r.__words[2];
      v106 = v90;
      v89->__r_.__value_.__l.__size_ = 0;
      v89->__r_.__value_.__r.__words[2] = 0;
      v89->__r_.__value_.__r.__words[0] = 0;
      if (v107 >= 0)
        v61 = (const std::string::value_type *)&v106;
      else
        v61 = (const std::string::value_type *)v106;
      if (v107 >= 0)
        v62 = HIBYTE(v107);
      else
        v62 = *((_QWORD *)&v106 + 1);
LABEL_124:
      std::string::append(&v108, v61, v62);
      if (SHIBYTE(v107) < 0)
        operator delete((void *)v106);
      if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v99.__r_.__value_.__l.__data_);
      if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v105.__r_.__value_.__l.__data_);
      if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v104.__r_.__value_.__l.__data_);
      if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v100.__r_.__value_.__l.__data_);
      if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v103.__r_.__value_.__l.__data_);
      if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v102.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v101.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_164;
      v29 = (void *)v101.__r_.__value_.__r.__words[0];
      break;
    case 8:
      std::string::assign(&v108, "Invalid Compatible Version");
      if (!a3)
        goto LABEL_164;
      std::to_string(&v103, *((unsigned __int8 *)a1 + 16));
      v91 = std::string::insert(&v103, 0, " got ");
      v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
      v104.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v92;
      v91->__r_.__value_.__l.__size_ = 0;
      v91->__r_.__value_.__r.__words[2] = 0;
      v91->__r_.__value_.__r.__words[0] = 0;
      v93 = std::string::append(&v104, " expected ");
      v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
      v105.__r_.__value_.__r.__words[2] = v93->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v94;
      v93->__r_.__value_.__l.__size_ = 0;
      v93->__r_.__value_.__r.__words[2] = 0;
      v93->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v102, 2);
      if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v95 = &v102;
      else
        v95 = (std::string *)v102.__r_.__value_.__r.__words[0];
      if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v96 = HIBYTE(v102.__r_.__value_.__r.__words[2]);
      else
        v96 = v102.__r_.__value_.__l.__size_;
      v97 = std::string::append(&v105, (const std::string::value_type *)v95, v96);
      v98 = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
      v107 = v97->__r_.__value_.__r.__words[2];
      v106 = v98;
      v97->__r_.__value_.__l.__size_ = 0;
      v97->__r_.__value_.__r.__words[2] = 0;
      v97->__r_.__value_.__r.__words[0] = 0;
      if (v107 >= 0)
        v15 = (const std::string::value_type *)&v106;
      else
        v15 = (const std::string::value_type *)v106;
      if (v107 >= 0)
        v16 = HIBYTE(v107);
      else
        v16 = *((_QWORD *)&v106 + 1);
LABEL_153:
      std::string::append(&v108, v15, v16);
      if (SHIBYTE(v107) < 0)
        operator delete((void *)v106);
      if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v102.__r_.__value_.__l.__data_);
      if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v105.__r_.__value_.__l.__data_);
      if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v104.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v103.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_164;
      v29 = (void *)v103.__r_.__value_.__r.__words[0];
      break;
    case 9:
      sub_1015A2E04(a4, "Valid");
      if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v108.__r_.__value_.__l.__data_);
      return result;
    default:
      goto LABEL_164;
  }
  operator delete(v29);
LABEL_164:
  result = *(double *)&v108.__r_.__value_.__l.__data_;
  *a4 = v108;
  return result;
}

void sub_100588A98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;

  if (*(char *)(v47 - 73) < 0)
    operator delete(*(void **)(v47 - 96));
  if (a33 < 0)
    operator delete(__p);
  if (*(char *)(v47 - 105) < 0)
    operator delete(*(void **)(v47 - 128));
  if (a47 < 0)
    operator delete(a42);
  if (a40 < 0)
    operator delete(a35);
  if (*(char *)(v47 - 49) < 0)
    operator delete(*(void **)(v47 - 72));
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100588CC8@<X0>(int *a1@<X1>, _QWORD *a2@<X8>)
{
  return sub_1015A2E04(a2, off_1021455C0[*a1]);
}

uint64_t sub_100588CE0()
{
  return 1;
}

uint64_t sub_100588CE8(id *a1)
{
  uint64_t v3;

  v3 = 0x100000002;
  if ((int)sub_1001B7864((uint64_t)a1, (int *)&v3, 2) <= 0)
  {
    objc_msgSend(a1[15], "stopScanningForType:", 1);
    objc_msgSend(a1[15], "stopScanningForType:", 0);
    objc_msgSend(a1[19], "stopScan");
    objc_msgSend(a1[20], "setNextFireDelay:", 1.79769313e308);
  }
  return 1;
}

void sub_100588D8C(_QWORD *a1)
{
  void *v2;

  *a1 = off_102145330;
  v2 = (void *)a1[16];
  if (v2)
  {
    a1[17] = v2;
    operator delete(v2);
  }
  sub_100587E4C((uint64_t)a1);
  operator delete();
}

void sub_100588DDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102145430);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_102145430);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLHomeKitProvider_Type::Notification, NotificationData_T = CLHomeKitProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

uint64_t sub_100589050(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022A2F18);
}

BOOL sub_100589064(uint64_t a1, int a2, int *a3, char *a4)
{
  _BOOL8 result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  uint64_t *v28;
  char v29;
  uint64_t **v30;
  char v31;
  uint64_t **v32;
  uint64_t v33;
  char v34;
  _QWORD *v35;
  const char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  _BYTE v41[12];
  __int16 v42;
  int v43;
  _BYTE buf[12];
  __int16 v45;
  int v46;
  char v47;
  void *__p;
  void *v49;
  uint64_t v50;

  v40 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      v39 = v10;
      v16 = *a3;
      v19 = *(_QWORD *)(v10 + 48);
      v18 = v10 + 48;
      v17 = v19;
      if (!v19)
        goto LABEL_31;
      v20 = v18;
      do
      {
        v21 = *(_DWORD *)(v17 + 28);
        v22 = v21 < v16;
        if (v21 >= v16)
          v23 = (uint64_t *)v17;
        else
          v23 = (uint64_t *)(v17 + 8);
        if (!v22)
          v20 = v17;
        v17 = *v23;
      }
      while (*v23);
      if (v20 == v18 || v16 < *(_DWORD *)(v20 + 28))
LABEL_31:
        v20 = v18;
      v24 = *(_QWORD *)(a1 + 64);
      if (!v24)
        goto LABEL_42;
      v25 = a1 + 64;
      do
      {
        v26 = *(_DWORD *)(v24 + 32);
        v27 = v26 < v16;
        if (v26 >= v16)
          v28 = (uint64_t *)v24;
        else
          v28 = (uint64_t *)(v24 + 8);
        if (!v27)
          v25 = v24;
        v24 = *v28;
      }
      while (*v28);
      if (v25 != a1 + 64 && v16 >= *(_DWORD *)(v25 + 32))
      {
        *(_QWORD *)v41 = v25;
        v33 = *(_QWORD *)(v25 + 56);
        v34 = *a4;
        *(_QWORD *)buf = &v40;
        *((_BYTE *)sub_1001AFE94((uint64_t **)(v25 + 40), &v40, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v34;
        buf[0] = 0;
        buf[8] = 0;
        v47 = 0;
        __p = 0;
        v49 = 0;
        v50 = 0;
        if (v20 == v18)
        {
          if ((*(unsigned int (**)(uint64_t, int *, _BYTE *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
            sub_10058BBB4();
          if (__p)
          {
            v49 = __p;
            operator delete(__p);
          }
        }
        if (v33)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        *(_QWORD *)v41 = a1 + 64;
        v29 = byte_1022A2F19;
        HIDWORD(v38) = v16;
        *(_QWORD *)buf = (char *)&v38 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v29;
        HIDWORD(v38) = *a3;
        *(_QWORD *)buf = (char *)&v38 + 4;
        v30 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v30 + 8);
        v31 = *a4;
        HIDWORD(v38) = *a3;
        *(_QWORD *)buf = (char *)&v38 + 4;
        v32 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)buf = &v40;
        *((_BYTE *)sub_1001AFE94(v32 + 5, &v40, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v31;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v20 == v18)
      {
        *(_DWORD *)buf = *a3;
        sub_1000C6190((uint64_t **)(v39 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102145430);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v15;
    v45 = 1026;
    v46 = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  result = sub_1001BFF7C(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102145430);
    v35 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v35 = (_QWORD *)*v35;
    *(_DWORD *)v41 = 136446466;
    *(_QWORD *)&v41[4] = v35;
    v42 = 1026;
    v43 = a2;
    LODWORD(v38) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
      v41,
      v38);
    v37 = (char *)v36;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLHomeKitProvider_Type::Notification, NotificationData_T = CLHomeKitProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v36);
    if (v37 != buf)
      free(v37);
    return 0;
  }
  return result;
}

void sub_1005894EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p)
{
  uint64_t v26;

  if (__p)
  {
    *(_QWORD *)(v26 + 80) = __p;
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100589514(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102145430);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102145430);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLHomeKitProvider_Type::Notification, NotificationData_T = CLHomeKitProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

BOOL sub_100589794(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE buf[12];
  __int16 v36;
  void **v37;
  char v38;
  int v39;
  _QWORD *v40;
  __int16 v41;
  _BYTE *v42;
  void *__p[2];
  char v44;

  HIDWORD(v34) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009E904((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102145430);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v44 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v36 = 2082;
                v37 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_102145430);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v38 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v39 = 136446466;
                v40 = v29;
                v41 = 2082;
                v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                v33 = v32;
                if (v38 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLHomeKitProvider_Type::Notification, NotificationData_T = CLHomeKitProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v33);
                if (v33 != (char *)__p)
                  free(v33);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_100589B1C(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v5 = *(_QWORD *)(a1 + 64);
  v3 = a1 + 64;
  v4 = v5;
  if (!v5)
    return 0;
  v6 = *a2;
  v7 = v3;
  do
  {
    v8 = *(_DWORD *)(v4 + 32);
    v9 = v8 < v6;
    if (v8 >= v6)
      v10 = (uint64_t *)v4;
    else
      v10 = (uint64_t *)(v4 + 8);
    if (!v9)
      v7 = v4;
    v4 = *v10;
  }
  while (*v10);
  if (v7 == v3)
    return 0;
  if (v6 < *(_DWORD *)(v7 + 32))
    return 0;
  v11 = *(_QWORD *)(v7 + 64);
  if (!v11)
    return 0;
  *(_OWORD *)a3 = *(_OWORD *)v11;
  v12 = *(_OWORD *)(v11 + 16);
  v13 = *(_OWORD *)(v11 + 32);
  v14 = *(_OWORD *)(v11 + 48);
  *(_BYTE *)(a3 + 64) = *(_BYTE *)(v11 + 64);
  *(_OWORD *)(a3 + 32) = v13;
  *(_OWORD *)(a3 + 48) = v14;
  *(_OWORD *)(a3 + 16) = v12;
  if (v11 != a3)
    sub_10058BCF8((char *)(a3 + 72), *(char **)(v11 + 72), *(_QWORD *)(v11 + 80), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v11 + 80) - *(_QWORD *)(v11 + 72)) >> 3));
  return 1;
}

uint64_t sub_100589BD0(uint64_t a1, int *a2, __int128 *a3)
{
  uint64_t **v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  int v10;
  __int128 v11;
  int *v12;

  sub_10058AF18(a3, &v11);
  v10 = *a2;
  v12 = &v10;
  v5 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v10, (uint64_t)&unk_101B9EB60, &v12);
  sub_1002B7674((uint64_t)(v5 + 8), &v11);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return 1;
}

void sub_100589C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100589C90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BYTE v4[72];
  void *__p;
  void *v6;
  uint64_t v7;

  v4[0] = 0;
  v4[8] = 0;
  v4[64] = 0;
  v6 = 0;
  v7 = 0;
  __p = 0;
  (*(void (**)(uint64_t, uint64_t, _BYTE *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, a2, v4, a3, a4, 0);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_100589CF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100589D0C(uint64_t a1, signed __int32 *a2, __int128 *a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  os_activity_scope_state_s state;
  uint64_t buf;
  _BYTE v29[20];
  __int16 v30;
  _QWORD *v31;
  __int16 v32;
  std::__shared_weak_count *v33;
  _QWORD **v34;
  _QWORD *v35[3];
  std::__shared_weak_count *v36;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102145430);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      buf = 68289794;
      *(_WORD *)v29 = 2082;
      *(_QWORD *)&v29[2] = "";
      *(_WORD *)&v29[10] = 2082;
      *(_QWORD *)&v29[12] = "activity";
      v30 = 2082;
      v31 = v10;
      v32 = 2050;
      v33 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", (uint8_t *)&buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v34 = v35;
      memset(v35, 0, sizeof(v35));
      v36 = 0;
      sub_1004A6D60((uint64_t)&buf, a2, (uint64_t)&v34);
      v14 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)&buf);
      v18 = v33;
      if (v33)
      {
        p_shared_owners = (unint64_t *)&v33->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v29, *(_QWORD **)&v29[8]);
      v21 = v36;
      if (v36)
      {
        v22 = (unint64_t *)&v36->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v34, v35[0]);
    }
    if (a4)
    {
      sub_10058AF18(a3, &buf);
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)&buf);
      v24 = *(std::__shared_weak_count **)v29;
      if (*(_QWORD *)v29)
      {
        v25 = (unint64_t *)(*(_QWORD *)v29 + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_10058A974();
    os_activity_scope_leave(&state);
  }
}

void sub_10058A328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_10058A374(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102145430);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102145430);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::listClients() [Notification_T = CLHomeKitProvider_Type::Notification, NotificationData_T = CLHomeKitProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102145430);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102145430);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::listClients() [Notification_T = CLHomeKitProvider_Type::Notification, NotificationData_T = CLHomeKitProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_102145430);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102145430);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::listClients() [Notification_T = CLHomeKitProvider_Type::Notification, NotificationData_T = CLHomeKitProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_10058A91C(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_10058A948(id a1)
{
  qword_1022A02A8 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

void sub_10058A974()
{
  operator new();
}

void sub_10058AA44()
{
  operator delete();
}

void sub_10058AA68(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  id v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  const char *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  __int16 v54;
  int v55;
  uint8_t buf[4];
  _QWORD *v57;
  __int16 v58;
  int v59;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v51 = v9;
        v13 = sub_10058B138(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, id, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 7);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v50 = v19;
              sub_10058AE3C(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v51 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 28);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 28);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v50 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102145430);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                v57 = v25;
                v58 = 1026;
                v59 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_102145430);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 7);
                v52 = 136446466;
                v53 = v45;
                v54 = 1026;
                v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                v48 = (uint8_t *)v47;
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLHomeKitProvider_Type::Notification, NotificationData_T = CLHomeKitProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v48 != buf)
                  free(v48);
              }
            }
          }
          while (v14 != v51 + 6);
        }
      }
    }
  }
}

_BYTE *sub_10058AE3C(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  int *v14;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    v9 = sub_10058B138(a4, a2);
    v10 = *(_QWORD *)a3 + 80;
    v11 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v14 = (int *)(*(_QWORD *)a2 + 32);
    v12 = sub_1001AFE94(v11, v14, (uint64_t)&unk_101B9EB60, &v14);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v13);
  }
  return result;
}

uint64_t sub_10058AF18@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x78uLL);
  result = sub_10058AF70((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_10058AF5C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10058AF70(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  char v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = off_102145560;
  v3 = a2[2];
  v4 = a2[3];
  v5 = *((_BYTE *)a2 + 64);
  v7 = *a2;
  v6 = a2[1];
  *(_QWORD *)(a1 + 96) = 0;
  v8 = a1 + 96;
  *(_OWORD *)(v8 - 72) = v7;
  *(_BYTE *)(v8 - 8) = v5;
  *(_OWORD *)(v8 - 24) = v4;
  *(_OWORD *)(v8 - 40) = v3;
  *(_OWORD *)(v8 - 56) = v6;
  *(_OWORD *)(v8 + 8) = 0u;
  sub_10058B070((_QWORD *)v8, *((const void **)a2 + 9), *((_QWORD *)a2 + 10), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)a2 + 10) - *((_QWORD *)a2 + 9)) >> 3));
  return a1;
}

void sub_10058AFF8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10058B00C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102145560;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10058B020(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102145560;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_10058B054(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(_QWORD *)(a1 + 104) = v2;
    operator delete(v2);
  }
}

_QWORD *sub_10058B070(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_100365B18(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_10058B0CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10058B0E8(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
  {
    v2 = *(void **)(v1 + 72);
    if (v2)
    {
      *(_QWORD *)(v1 + 80) = v2;
      operator delete(v2);
    }
    operator delete();
  }
  return result;
}

id sub_10058B138(void *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = objc_opt_class(CLCppContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_10058B184(a1);
  else
    return 0;
}

id sub_10058B184(void *a1)
{
  id v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v7;
  int v8;
  id v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  unint64_t v13;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021455A0);
    v3 = qword_10229FC38;
    if (!os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
      return 0;
    v8 = 134218498;
    v9 = v2;
    v10 = 2048;
    v11 = 0;
    v12 = 2080;
    v13 = 0x8000000101BB6D7CLL & 0x7FFFFFFFFFFFFFFFLL;
    v4 = v3;
    v5 = OS_LOG_TYPE_ERROR;
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021455A0);
    v7 = qword_10229FC38;
    if (!os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
      return 0;
    v8 = 134218498;
    v9 = v2;
    v10 = 2048;
    v11 = 0;
    v12 = 2080;
    v13 = 0x8000000101BB6D7CLL & 0x7FFFFFFFFFFFFFFFLL;
    v4 = v7;
    v5 = OS_LOG_TYPE_FAULT;
  }
  _os_log_impl((void *)&_mh_execute_header, v4, v5, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", (uint8_t *)&v8, 0x20u);
  return 0;
}

void sub_10058B358(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_10058B384(uint64_t a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  std::string::size_type size;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  void *v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  std::string::size_type v27;
  std::string *v28;
  __int128 v29;
  const std::string::value_type *v30;
  std::string::size_type v31;
  std::string v32;
  std::string v33;
  std::string v34;
  std::string v35;
  std::string v36;
  std::string v37;
  std::string v38;
  __int128 v39;
  int64_t v40;

  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  if (a2)
  {
    if (a2 == 1)
    {
      std::string::assign(a3, "Invalid Accessory Category Identifier");
      std::to_string(&v34, 1);
      v5 = std::string::insert(&v34, 0, " (out of range [");
      v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v35.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      v7 = std::string::append(&v35, " - ");
      v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v36.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v33, 0xFFFF);
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v9 = &v33;
      else
        v9 = (std::string *)v33.__r_.__value_.__r.__words[0];
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
      else
        size = v33.__r_.__value_.__l.__size_;
      v11 = std::string::append(&v36, (const std::string::value_type *)v9, size);
      v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      v37.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      v13 = std::string::append(&v37, "]): ");
      v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v38.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v32, *(unsigned __int16 *)(a1 + 6));
      if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v15 = &v32;
      else
        v15 = (std::string *)v32.__r_.__value_.__r.__words[0];
      if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v16 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
      else
        v16 = v32.__r_.__value_.__l.__size_;
      v17 = std::string::append(&v38, (const std::string::value_type *)v15, v16);
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v40 = v17->__r_.__value_.__r.__words[2];
      v39 = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      if (v40 >= 0)
        v19 = (const std::string::value_type *)&v39;
      else
        v19 = (const std::string::value_type *)v39;
      if (v40 >= 0)
        v20 = HIBYTE(v40);
      else
        v20 = *((_QWORD *)&v39 + 1);
      std::string::append(a3, v19, v20);
      if (SHIBYTE(v40) < 0)
        operator delete((void *)v39);
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v32.__r_.__value_.__l.__data_);
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v38.__r_.__value_.__l.__data_);
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v37.__r_.__value_.__l.__data_);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v36.__r_.__value_.__l.__data_);
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v35.__r_.__value_.__l.__data_);
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      {
        v21 = (void *)v34.__r_.__value_.__r.__words[0];
LABEL_59:
        operator delete(v21);
      }
    }
  }
  else
  {
    std::string::assign(a3, "Invalid Status Flags");
    std::to_string(&v36, *(unsigned __int8 *)(a1 + 8));
    v22 = std::string::insert(&v36, 0, " got: ");
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    v24 = std::string::append(&v37, " expected: ");
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v35, 0);
    if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v26 = &v35;
    else
      v26 = (std::string *)v35.__r_.__value_.__r.__words[0];
    if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
    else
      v27 = v35.__r_.__value_.__l.__size_;
    v28 = std::string::append(&v38, (const std::string::value_type *)v26, v27);
    v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v40 = v28->__r_.__value_.__r.__words[2];
    v39 = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    if (v40 >= 0)
      v30 = (const std::string::value_type *)&v39;
    else
      v30 = (const std::string::value_type *)v39;
    if (v40 >= 0)
      v31 = HIBYTE(v40);
    else
      v31 = *((_QWORD *)&v39 + 1);
    std::string::append(a3, v30, v31);
    if (SHIBYTE(v40) < 0)
      operator delete((void *)v39);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    {
      v21 = (void *)v36.__r_.__value_.__r.__words[0];
      goto LABEL_59;
    }
  }
}

void sub_10058B6CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;
  uint64_t v48;

  if (*(char *)(v48 - 57) < 0)
    operator delete(*(void **)(v48 - 80));
  if (a33 < 0)
    operator delete(__p);
  if (*(char *)(v48 - 89) < 0)
    operator delete(*(void **)(v48 - 112));
  if (a47 < 0)
    operator delete(a42);
  if (a40 < 0)
    operator delete(a35);
  if (*(char *)(v47 + 23) < 0)
    operator delete(*(void **)v47);
  _Unwind_Resume(exception_object);
}

char *sub_10058B824(void **a1, int *a2, __int16 *a3, uint64_t *a4, int *a5)
{
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  unint64_t v13;
  __int16 v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  int v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  __int16 v27;
  int v28;
  __int16 v29;
  uint64_t v30;
  char *v31;
  int v32;
  char *v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  v12 = a1[2];
  v10 = (uint64_t)(a1 + 2);
  v11 = v12;
  v13 = *(_QWORD *)(v10 - 8);
  if (v13 >= (unint64_t)v12)
  {
    v20 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v13 - (_QWORD)*a1) >> 3);
    v21 = v20 + 1;
    if ((unint64_t)(v20 + 1) > 0x492492492492492)
      sub_100259694();
    v22 = 0x6DB6DB6DB6DB6DB7 * ((v11 - (_BYTE *)*a1) >> 3);
    if (2 * v22 > v21)
      v21 = 2 * v22;
    if (v22 >= 0x249249249249249)
      v23 = 0x492492492492492;
    else
      v23 = v21;
    v24 = (char *)sub_10025B800(v10, v23);
    v25 = &v24[56 * v20];
    v26 = *a4;
    v27 = *((_WORD *)a2 + 2);
    v28 = *a2;
    v29 = *a3;
    v31 = &v24[56 * v30];
    v32 = *a5;
    *v25 = 1;
    *(_DWORD *)(v25 + 1) = v28;
    *(_WORD *)(v25 + 5) = v27;
    *((_WORD *)v25 + 4) = v29;
    *((_QWORD *)v25 + 2) = v26;
    *((_DWORD *)v25 + 6) = v32;
    v25[28] = 0;
    v25[44] = 0;
    v25[48] = 0;
    v25[52] = 0;
    v19 = v25 + 56;
    v34 = (char *)*a1;
    v33 = (char *)a1[1];
    if (v33 != *a1)
    {
      do
      {
        v35 = *(_OWORD *)(v33 - 56);
        v36 = *(_OWORD *)(v33 - 40);
        v37 = *(_OWORD *)(v33 - 24);
        *((_QWORD *)v25 - 1) = *((_QWORD *)v33 - 1);
        *(_OWORD *)(v25 - 24) = v37;
        *(_OWORD *)(v25 - 40) = v36;
        *(_OWORD *)(v25 - 56) = v35;
        v25 -= 56;
        v33 -= 56;
      }
      while (v33 != v34);
      v33 = (char *)*a1;
    }
    *a1 = v25;
    a1[1] = v19;
    a1[2] = v31;
    if (v33)
      operator delete(v33);
  }
  else
  {
    v14 = *((_WORD *)a2 + 2);
    v15 = *a2;
    v16 = *a3;
    v17 = *a4;
    v18 = *a5;
    *(_BYTE *)v13 = 1;
    *(_DWORD *)(v13 + 1) = v15;
    *(_WORD *)(v13 + 5) = v14;
    *(_WORD *)(v13 + 8) = v16;
    *(_QWORD *)(v13 + 16) = v17;
    *(_DWORD *)(v13 + 24) = v18;
    *(_BYTE *)(v13 + 28) = 0;
    *(_BYTE *)(v13 + 44) = 0;
    *(_BYTE *)(v13 + 48) = 0;
    v19 = (char *)(v13 + 56);
    *(_BYTE *)(v13 + 52) = 0;
  }
  a1[1] = v19;
  return v19 - 56;
}

char *sub_10058B9DC(void **a1, __int16 *a2, char *a3, int *a4, _BYTE *a5, int *a6, __int16 *a7, __int16 *a8, _BYTE *a9, _BYTE *a10, uint64_t *a11, int *a12, int *a13)
{
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  __int16 v24;
  char v25;
  char *v26;
  int v27;
  uint64_t v28;
  char *v29;
  BOOL v30;
  __int16 v31;
  int v32;
  __int16 v33;
  __int16 v34;
  uint64_t v35;
  int v36;
  int v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;

  v14 = (char *)*a1;
  v15 = 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v16 = v15 + 1;
  if ((unint64_t)(v15 + 1) > 0x492492492492492)
    sub_100259694();
  v20 = (uint64_t)(a1 + 2);
  v21 = 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[2] - v14) >> 3);
  if (2 * v21 > v16)
    v16 = 2 * v21;
  if (v21 >= 0x249249249249249)
    v22 = 0x492492492492492;
  else
    v22 = v16;
  v23 = (char *)sub_10025B800(v20, v22);
  v24 = *a2;
  v25 = *a3;
  v26 = &v23[56 * v15];
  v27 = *a4;
  v29 = &v23[56 * v28];
  v30 = *a5 != 0;
  v31 = *((_WORD *)a6 + 2);
  v32 = *a6;
  v33 = *a7;
  v34 = *a8;
  LOBYTE(v23) = *a9;
  LOBYTE(v28) = *a10;
  v35 = *a11;
  v36 = *a12;
  v37 = *a13;
  *v26 = 2;
  *(_DWORD *)(v26 + 1) = v32;
  *(_WORD *)(v26 + 5) = v31;
  *((_WORD *)v26 + 4) = v33;
  *((_QWORD *)v26 + 2) = v35;
  *((_DWORD *)v26 + 6) = v36;
  *((_WORD *)v26 + 14) = v24;
  v26[30] = v25;
  *((_DWORD *)v26 + 8) = v27;
  v26[36] = v30;
  *((_WORD *)v26 + 19) = v34;
  v26[40] = (char)v23;
  v26[41] = v28;
  v26[44] = 1;
  *((_DWORD *)v26 + 12) = v37;
  v26[52] = 1;
  v38 = v26 + 56;
  v40 = (char *)*a1;
  v39 = (char *)a1[1];
  if (v39 != *a1)
  {
    do
    {
      v41 = *(_OWORD *)(v39 - 56);
      v42 = *(_OWORD *)(v39 - 40);
      v43 = *(_OWORD *)(v39 - 24);
      *((_QWORD *)v26 - 1) = *((_QWORD *)v39 - 1);
      *(_OWORD *)(v26 - 24) = v43;
      *(_OWORD *)(v26 - 40) = v42;
      *(_OWORD *)(v26 - 56) = v41;
      v26 -= 56;
      v39 -= 56;
    }
    while (v39 != v40);
    v39 = (char *)*a1;
  }
  *a1 = v26;
  a1[1] = v38;
  a1[2] = v29;
  if (v39)
    operator delete(v39);
  return v38;
}

void sub_10058BBB4()
{
  operator new();
}

void sub_10058BC84()
{
  operator delete();
}

uint64_t sub_10058BCA8(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
  {
    v2 = *(void **)(v1 + 72);
    if (v2)
    {
      *(_QWORD *)(v1 + 80) = v2;
      operator delete(v2);
    }
    operator delete();
  }
  return result;
}

char *sub_10058BCF8(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - *(_QWORD *)result) >> 3) < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x492492492492492)
      sub_100259694();
    v10 = 0x6DB6DB6DB6DB6DB7 * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x249249249249249)
      v12 = 0x492492492492492;
    else
      v12 = v11;
    result = sub_100365B18(v7, v12);
    v14 = (char *)v7[1];
    v13 = (void **)(v7 + 1);
    v9 = v14;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v13 = (void **)(result + 8);
  v15 = (_BYTE *)*((_QWORD *)result + 1);
  if (0x6DB6DB6DB6DB6DB7 * ((v15 - v9) >> 3) >= a4)
    goto LABEL_16;
  v16 = &__src[8 * ((v15 - v9) >> 3)];
  if (v15 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 - v9);
    v9 = (char *)*v13;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v13 = &v9[v17];
  return result;
}

double sub_10058BE50()
{
  double v0;
  double result;

  v0 = (double)(int)objc_msgSend(&off_10221B1B0, "intValue") * 0.625;
  result = v0 + (double)(int)objc_msgSend(&off_10221B1C8, "intValue") * 0.625;
  *(double *)&qword_102301CB0 = result;
  return result;
}

unsigned __int8 *sub_10058BEA0(unsigned __int8 *a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  int *v8;
  int *v9;
  double *v10;
  CLMotionActivity *v11;
  CLMotionActivity *Init;
  CLMotionActivity *v13;
  int *v19;
  _BYTE *v20;
  NSObject *v21;
  int v22;
  int v23;
  int v24;
  double v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  double *v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  NSObject *v43;
  NSObject *v44;
  NSObject *v45;
  NSObject *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  _QWORD v55[5];
  _QWORD handler[5];
  int out_token[4];
  uint64_t v58;
  void **v59;
  uint8_t buf[32];
  int v61;
  __int16 v62;
  double v63;
  __int16 v64;
  int v65;

  *(_QWORD *)a1 = off_1021455E8;
  *((_QWORD *)a1 + 1) = off_102145780;
  *((_QWORD *)a1 + 2) = off_1021457C0;
  *((_QWORD *)a1 + 3) = off_1021457F0;
  *((_QWORD *)a1 + 4) = off_102145828;
  *((_QWORD *)a1 + 5) = a2;
  *((_QWORD *)a1 + 6) = *a3;
  v4 = a1 + 48;
  v5 = a3[1];
  *((_QWORD *)a1 + 7) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *((_QWORD *)a1 + 9) = 0;
  *((_QWORD *)a1 + 8) = a1 + 72;
  v54 = a1 + 64;
  *((_QWORD *)a1 + 10) = 0;
  *((_QWORD *)a1 + 11) = 0;
  *((_QWORD *)a1 + 15) = 0;
  *((_QWORD *)a1 + 14) = a1 + 120;
  *((_QWORD *)a1 + 12) = 0;
  *((_QWORD *)a1 + 13) = 0;
  *((_QWORD *)a1 + 16) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  v51 = a1 + 136;
  v52 = a1 + 112;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *((_DWORD *)a1 + 46) = 0;
  *((_WORD *)a1 + 94) = 257;
  *((_QWORD *)a1 + 24) = 0x4FFFFFFFFLL;
  *((_DWORD *)a1 + 50) = 2;
  v8 = (int *)(a1 + 200);
  *((_QWORD *)a1 + 26) = 0xBFF0000000000000;
  *((_WORD *)a1 + 108) = 0;
  *((_DWORD *)a1 + 55) = 0;
  a1[224] = 0;
  *((_DWORD *)a1 + 57) = 0;
  *((_DWORD *)a1 + 58) = 0;
  *((_DWORD *)a1 + 59) = 25;
  v9 = (int *)(a1 + 236);
  *((_QWORD *)a1 + 31) = 0x40EFA40000000000;
  v10 = (double *)(a1 + 248);
  *((_WORD *)a1 + 128) = 0;
  *((_QWORD *)a1 + 33) = 0;
  v53 = a1 + 88;
  sub_10058C888((uint64_t)a1, (uint64_t)(a1 + 272));
  Init = (CLMotionActivity *)CLMotionActivity::getInit(v11);
  v13 = (CLMotionActivity *)CLMotionActivity::getInit(Init);
  CLMotionActivity::getInit(v13);
  *((_WORD *)a1 + 400) = 257;
  a1[802] = 0;
  *((_QWORD *)a1 + 101) = 0xBFF0000000000000;
  *((_DWORD *)a1 + 204) = 0xFFFF;
  *(_QWORD *)(a1 + 828) = 0;
  *(_QWORD *)(a1 + 820) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 836) = xmmword_101BAFC90;
  *(_OWORD *)(a1 + 852) = _Q1;
  *(_OWORD *)(a1 + 868) = _Q1;
  *(_OWORD *)(a1 + 884) = _Q1;
  *((_DWORD *)a1 + 225) = 0;
  *((_QWORD *)a1 + 113) = 0xBFF0000000000000;
  *((_QWORD *)a1 + 115) = 0;
  *((_QWORD *)a1 + 114) = 0;
  *((_DWORD *)a1 + 232) = 0;
  *(_QWORD *)(a1 + 932) = 0xBFF0000000000000;
  *((_DWORD *)a1 + 235) = 0x7FFFFFFF;
  *((_QWORD *)a1 + 119) = 0;
  *((_QWORD *)a1 + 118) = 0;
  a1[968] = 0;
  *((_QWORD *)a1 + 120) = 0;
  *((_WORD *)a1 + 486) = 0;
  a1[974] = 0;
  *((int64x2_t *)a1 + 61) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *((_QWORD *)a1 + 124) = 0;
  *((double *)a1 + 126) = (*(double (**)(unsigned __int8 *))(*(_QWORD *)a1 + 64))(a1);
  *((_QWORD *)a1 + 129) = 0;
  *((_QWORD *)a1 + 128) = 0;
  *((_QWORD *)a1 + 127) = a1 + 1024;
  *((_OWORD *)a1 + 65) = 0u;
  *((_OWORD *)a1 + 66) = 0u;
  a1[1072] = 0;
  sub_100523A94((uint64_t)(a1 + 1080), (uint64_t)a1);
  *((_WORD *)a1 + 604) = 0;
  a1[1210] = 0;
  memset(buf, 0, sizeof(buf));
  v61 = 1065353216;
  sub_100592FE8(out_token, 0xAuLL, (uint64_t)buf);
  v19 = (int *)(a1 + 196);
  sub_100593154((void **)a1 + 11);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)out_token;
  *((_QWORD *)a1 + 13) = v58;
  v58 = 0;
  memset(out_token, 0, sizeof(out_token));
  v59 = (void **)out_token;
  sub_100592F78(&v59);
  sub_100067AC4((uint64_t)buf);
  if (((*(uint64_t (**)(_QWORD, unsigned __int8 *))(**((_QWORD **)a1 + 6) + 120))(*((_QWORD *)a1 + 6), a1 + 196) & 1) == 0)*v19 = 4;
  if (((*(uint64_t (**)(_QWORD, unsigned __int8 *))(*(_QWORD *)*v4 + 128))(*v4, a1 + 200) & 1) == 0)
    *v8 = 2;
  if (((*(uint64_t (**)(_QWORD, unsigned __int8 *))(*(_QWORD *)*v4 + 152))(*v4, a1 + 236) & 1) == 0)
    *v9 = 25;
  v20 = a1 + 1072;
  if (((*(uint64_t (**)(_QWORD, unsigned __int8 *))(*(_QWORD *)*v4 + 144))(*v4, a1 + 248) & 1) == 0)
    *v10 = 64800.0;
  if (((*(uint64_t (**)(_QWORD, unsigned __int8 *))(*(_QWORD *)*v4 + 136))(*v4, a1 + 1072) & 1) == 0)
    *v20 = 0;
  if (((*(uint64_t (**)(_QWORD, unsigned __int8 *))(**((_QWORD **)a1 + 6) + 160))(*((_QWORD *)a1 + 6), a1 + 240) & 1) == 0)*((_DWORD *)a1 + 60) = 300;
  if (((*(uint64_t (**)(_QWORD, unsigned __int8 *))(**((_QWORD **)a1 + 6) + 168))(*((_QWORD *)a1 + 6), a1 + 1000) & 1) == 0)*((_QWORD *)a1 + 125) = 0x40D5180000000000;
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021459F8);
  v21 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    v22 = *v20;
    v23 = *v19;
    v24 = *v8;
    v25 = *v10;
    v26 = *v9;
    *(_DWORD *)buf = 68290307;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 1025;
    *(_DWORD *)&buf[20] = v22;
    *(_WORD *)&buf[24] = 1025;
    *(_DWORD *)&buf[26] = v23;
    *(_WORD *)&buf[30] = 1025;
    v61 = v24;
    v62 = 2049;
    v63 = v25;
    v64 = 1025;
    v65 = v26;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"HarvestController-Contruct\", \"isHarvestAllLocations\":%{private}hhd, \"highThermalThreshold\":%{private}d, \"lowThermalThreshold\":%{private}d, \"maxHarvestAge_s\":\"%{private}.09f\", \"maxHarvestPointsPer\":%{private}d}", buf, 0x34u);
  }
  (*(void (**)(_QWORD, unsigned __int8 *))(**((_QWORD **)a1 + 6) + 40))(*((_QWORD *)a1 + 6), a1);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v4 + 200))(*v4, 0);
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v4 + 184))(*v4, 13);
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v4 + 184))(*v4, 15);
  v27 = *v4;
  sub_10013F950(buf, kCTCallStatusChangeNotification);
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v27 + 272))(v27, buf);
  v28 = sub_1001FD94C();
  sub_1001E48E4(v28, (uint64_t)CFSTR("PrivateMode"), (BOOL *)a1 + 185);
  v29 = (*(double (**)(unsigned __int8 *))(*(_QWORD *)a1 + 64))(a1);
  v30 = sub_1001FD94C();
  v31 = (double *)(a1 + 992);
  if (!sub_1001FD9FC(v30, (uint64_t)CFSTR("LastPrune"), a1 + 992) || (v32 = *v31, *v31 < 1.0))
  {
    *v31 = v29;
    v32 = v29;
  }
  v33 = *v10 - vabdd_f64(v29, v32);
  if (v33 >= 3.0)
    v34 = v33;
  else
    v34 = 3.0;
  v35 = *v4;
  sub_1015A2E04(buf, "HarvestPruneTimer");
  (*(void (**)(int *__return_ptr, uint64_t, uint8_t *, void (*)(uint64_t, uint64_t), unsigned __int8 *, id, double, double))(*(_QWORD *)v35 + 264))(out_token, v35, buf, sub_10058C904, a1, objc_msgSend(*((id *)a1 + 5), "silo", a1 + 1024, a1 + 272, v51, v52, v53, v54), v29 + v34, *((double *)a1 + 31));
  sub_1002B7674((uint64_t)(a1 + 1040), (__int128 *)out_token);
  v36 = *(std::__shared_weak_count **)&out_token[2];
  if (*(_QWORD *)&out_token[2])
  {
    v37 = (unint64_t *)(*(_QWORD *)&out_token[2] + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if ((char)buf[23] < 0)
    operator delete(*(void **)buf);
  v39 = *v4;
  sub_1015A2E04(buf, "HarvestUnlockTimer");
  (*(void (**)(int *__return_ptr, uint64_t, uint8_t *, void (*)(uint64_t, uint64_t), unsigned __int8 *, id, double))(*(_QWORD *)v39 + 264))(out_token, v39, buf, sub_10058CAC4, a1, objc_msgSend(*((id *)a1 + 5), "silo"), v29 + *((double *)a1 + 125));
  sub_1002B7674((uint64_t)(a1 + 1056), (__int128 *)out_token);
  v40 = *(std::__shared_weak_count **)&out_token[2];
  if (*(_QWORD *)&out_token[2])
  {
    v41 = (unint64_t *)(*(_QWORD *)&out_token[2] + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  if ((char)buf[23] < 0)
    operator delete(*(void **)buf);
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021459F8);
  v43 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 68289283;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2049;
    *(double *)&buf[20] = v34;
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#pruneTimer\", \"nextPruneTime_s\":\"%{private}.09f\"}", buf, 0x1Cu);
  }
  *((_QWORD *)a1 + 26) = 0;
  *((_WORD *)a1 + 108) = 0;
  sub_100197040();
  if (sub_10075D288())
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021459F8);
    v44 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"registering for internal notifications\"}", buf, 0x12u);
    }
    *(_DWORD *)buf = 0;
    v45 = objc_msgSend(objc_msgSend(*((id *)a1 + 5), "silo"), "queue");
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_10058CC84;
    handler[3] = &unk_102145848;
    handler[4] = a1;
    notify_register_dispatch("CLHarvestController-upload", (int *)buf, v45, handler);
    out_token[0] = 0;
    v46 = objc_msgSend(objc_msgSend(*((id *)a1 + 5), "silo"), "queue");
    v55[0] = _NSConcreteStackBlock;
    v55[1] = 3221225472;
    v55[2] = sub_10058CE4C;
    v55[3] = &unk_102145848;
    v55[4] = a1;
    notify_register_dispatch("CLHarvestController-prune", out_token, v46, v55);
  }
  *((double *)a1 + 48) = v29;
  sub_10058CF7C(a1);
  v48 = qword_102301CC8;
  v49 = qword_102301CD0;
  while (v48 != v49)
  {
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v4 + 56))(*v4, v48);
    v48 += 24;
  }
  sub_10058D018((uint64_t)a1, v47);
  return a1;
}

void sub_10058C790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char **a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;
  uint64_t v37;
  void *v39;

  v39 = *(void **)(v36 + 1184);
  if (v39)
  {
    *(_QWORD *)(v36 + 1192) = v39;
    operator delete(v39);
  }
  sub_100261F44(a15);
  sub_100261F44(a16);
  sub_100090AE4(v36 + 1016, *a9);
  sub_10058D200(a10);
  sub_100261F44(v36 + 168);
  sub_100261F44(v36 + 152);
  sub_100261F44(a11);
  sub_100008848(a12, *(_QWORD **)(v36 + 120));
  __p = a13;
  sub_100592F78((void ***)&__p);
  sub_100592F30(a14, *(_QWORD **)(v36 + 72));
  sub_100261F44(v37);
  _Unwind_Resume(a1);
}

double sub_10058C888@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  __int128 v4;
  uint64_t v5;

  *(_QWORD *)(a2 + 8) = 0xBFF0000000000000;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 76) = 0u;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_BYTE *)a2 = 1;
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)a1 + 16))(&v4);
  result = *(double *)&v4;
  *(_OWORD *)(a2 + 40) = v4;
  *(_QWORD *)(a2 + 56) = v5;
  return result;
}

void sub_10058C8F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10058D200(v1);
  _Unwind_Resume(a1);
}

void sub_10058C904(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  NSObject *v4;
  os_activity_scope_state_s state;
  char v6;
  uint8_t buf[4];
  int v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  uint64_t v14;

  CLProfilingIdentify("CLHarvestController::onPruneTimer");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 40), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102145A18);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v6 = 1;
    v3 = _os_activity_create((void *)&_mh_execute_header, "CL: CLHarvestController::onPruneTimer", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v3, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102145A18);
    v4 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2082;
      v12 = "activity";
      v13 = 2050;
      v14 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLHarvestController::onPruneTimer\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v6 = 0;
  }
  sub_100591954((double *)a2);
  if (v6)
    os_activity_scope_leave(&state);
}

void sub_10058CAA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10058CAC4(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  NSObject *v4;
  os_activity_scope_state_s state;
  char v6;
  uint8_t buf[4];
  int v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  uint64_t v14;

  CLProfilingIdentify("CLHarvestController::onUploadTimer");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 40), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102145A18);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v6 = 1;
    v3 = _os_activity_create((void *)&_mh_execute_header, "CL: CLHarvestController::onUploadTimer", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v3, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102145A18);
    v4 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2082;
      v12 = "activity";
      v13 = 2050;
      v14 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLHarvestController::onUploadTimer\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v6 = 0;
  }
  sub_100591AAC(a2);
  if (v6)
    os_activity_scope_leave(&state);
}

void sub_10058CC64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10058CC84(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _DWORD v3[2];
  __int16 v4;
  const char *v5;

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021459F8);
  v2 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 68289026;
    v3[1] = 0;
    v4 = 2082;
    v5 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLHarvestController-upload\"}", (uint8_t *)v3, 0x12u);
  }
  sub_10058CD64(v1);
}

void sub_10058CD64(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  *(double *)(a1 + 1008) = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v2 = *(_QWORD **)(a1 + 64);
  v3 = (_QWORD *)(a1 + 72);
  if (v2 != (_QWORD *)(a1 + 72))
  {
    do
    {
      v4 = objc_autoreleasePoolPush();
      sub_100D05024(v2[5]);
      objc_autoreleasePoolPop(v4);
      v5 = (_QWORD *)v2[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v2[2];
          v7 = *v6 == (_QWORD)v2;
          v2 = v6;
        }
        while (!v7);
      }
      v2 = v6;
    }
    while (v6 != v3);
  }
  sub_1005915EC(a1);
  v8 = *(_QWORD **)(a1 + 64);
  if (v8 != v3)
  {
    do
    {
      sub_100D059E0(v8[5]);
      v9 = (_QWORD *)v8[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v8[2];
          v7 = *v10 == (_QWORD)v8;
          v8 = v10;
        }
        while (!v7);
      }
      v8 = v10;
    }
    while (v10 != v3);
  }
}

void sub_10058CE4C(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021459F8);
  v2 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 68289026;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLHarvestController-prune\"}", (uint8_t *)v7, 0x12u);
  }
  v3 = *(_QWORD **)(v1 + 64);
  if (v3 != (_QWORD *)(v1 + 72))
  {
    do
    {
      sub_100D05770((unsigned int *)v3[5]);
      v4 = (_QWORD *)v3[1];
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (_QWORD *)v3[2];
          v6 = *v5 == (_QWORD)v3;
          v3 = v5;
        }
        while (!v6);
      }
      v3 = v5;
    }
    while (v5 != (_QWORD *)(v1 + 72));
  }
}

void sub_10058CF7C(unsigned __int8 *a1)
{
  int v2;
  int v3;
  double v4;
  uint64_t v5;
  double v6;

  v2 = a1[257];
  v3 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)a1 + 104))(a1);
  a1[257] = v3;
  if (v2 != v3)
  {
    (*(void (**)(unsigned __int8 *))(*(_QWORD *)a1 + 64))(a1);
    v5 = 368;
    if (!v2)
      v5 = 376;
    *(double *)&a1[v5] = v4 - *((double *)a1 + 48) + *(double *)&a1[v5];
    *((double *)a1 + 48) = v4;
    if (a1[257])
      v6 = sub_1005913DC((uint64_t)a1);
    else
      v6 = 1.79769313e308;
    sub_100590FC4((uint64_t)a1, v6);
  }
}

void sub_10058D018(uint64_t a1, uint64_t a2)
{
  id v3;
  unsigned int v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  unsigned int v10;

  if (objc_opt_class(MCProfileConnection, a2))
  {
    v3 = +[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection");
    v4 = objc_msgSend(v3, "effectiveBoolValueForSetting:", MCFeatureDiagnosticsSubmissionAllowed);
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021459F8);
    v5 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      v10 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "MCProfile DiagnosticsSubmissionAllowed: %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021459F8);
      v8[0] = 67109120;
      v8[1] = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 1, "MCProfile DiagnosticsSubmissionAllowed: %d", v8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLHarvestController::fetchManagedConfigurationDiagnosticsSubmissionAllowed()", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
    *(_BYTE *)(a1 + 1210) = v4 == 1;
  }
  else
  {
    *(_BYTE *)(a1 + 1210) = 0;
  }
}

uint64_t sub_10058D200(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_10058D244(uint64_t a1)
{
  void *v2;
  void **v4;

  *(_QWORD *)a1 = off_1021455E8;
  *(_QWORD *)(a1 + 8) = off_102145780;
  *(_QWORD *)(a1 + 16) = off_1021457C0;
  *(_QWORD *)(a1 + 24) = off_1021457F0;
  *(_QWORD *)(a1 + 32) = off_102145828;
  sub_10058D32C(a1);
  v2 = *(void **)(a1 + 1184);
  if (v2)
  {
    *(_QWORD *)(a1 + 1192) = v2;
    operator delete(v2);
  }
  sub_100261F44(a1 + 1056);
  sub_100261F44(a1 + 1040);
  sub_100090AE4(a1 + 1016, *(char **)(a1 + 1024));
  if (*(char *)(a1 + 335) < 0)
    operator delete(*(void **)(a1 + 312));
  if (*(char *)(a1 + 311) < 0)
    operator delete(*(void **)(a1 + 288));
  sub_100261F44(a1 + 168);
  sub_100261F44(a1 + 152);
  sub_100261F44(a1 + 136);
  sub_100008848(a1 + 112, *(_QWORD **)(a1 + 120));
  v4 = (void **)(a1 + 88);
  sub_100592F78(&v4);
  sub_100592F30(a1 + 64, *(_QWORD **)(a1 + 72));
  sub_100261F44(a1 + 48);
  return a1;
}

void sub_10058D32C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[4];

  sub_10058D920(a1, 0);
  v2 = *(_QWORD **)(a1 + 64);
  if (v2 != (_QWORD *)(a1 + 72))
  {
    do
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v2[5] + 80))(v2[5]);
      v3 = (_QWORD *)v2[1];
      if (v3)
      {
        do
        {
          v4 = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          v4 = (_QWORD *)v2[2];
          v5 = *v4 == (_QWORD)v2;
          v2 = v4;
        }
        while (!v5);
      }
      v2 = v4;
    }
    while (v4 != (_QWORD *)(a1 + 72));
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 168) + 16))(*(_QWORD *)(a1 + 168));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 16))(*(_QWORD *)(a1 + 136));
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 192))(*(_QWORD *)(a1 + 48), 13);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 192))(*(_QWORD *)(a1 + 48), 15);
  v6 = *(_QWORD *)(a1 + 48);
  sub_10013F950(v8, kCTCallStatusChangeNotification);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v6 + 288))(v6, v8);
  *(_BYTE *)(a1 + 972) = 0;
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 48) + 208))(*(_QWORD *)(a1 + 48), 0);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 48))(*(_QWORD *)(a1 + 48));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48));
  v7 = sub_1001FD94C();
  sub_10018A534(v7, CFSTR("LastPrune"), (const void *)(a1 + 992));

  *(_QWORD *)(a1 + 264) = 0;
}

uint64_t sub_10058D488(uint64_t a1)
{
  return sub_10058D244(a1 - 8);
}

uint64_t sub_10058D490(uint64_t a1)
{
  return sub_10058D244(a1 - 16);
}

uint64_t sub_10058D498(uint64_t a1)
{
  return sub_10058D244(a1 - 24);
}

uint64_t sub_10058D4A0(uint64_t a1)
{
  return sub_10058D244(a1 - 32);
}

void sub_10058D4A8(uint64_t a1)
{
  sub_10058D244(a1);
  operator delete();
}

void sub_10058D4CC(uint64_t a1)
{
  sub_10058D244(a1 - 8);
  operator delete();
}

void sub_10058D4F4(uint64_t a1)
{
  sub_10058D244(a1 - 16);
  operator delete();
}

void sub_10058D51C(uint64_t a1)
{
  sub_10058D244(a1 - 24);
  operator delete();
}

void sub_10058D544(uint64_t a1)
{
  sub_10058D244(a1 - 32);
  operator delete();
}

void sub_10058D56C(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t **a5)
{
  _QWORD *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  NSObject *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint8_t buf[4];
  int v22;
  __int16 v23;
  const char *v24;

  v9 = a1 + 21;
  sub_100349198(a1 + 21, a2);
  sub_100349198(a1 + 17, a3);
  sub_100349198(a1 + 19, a4);
  v10 = *a5;
  v11 = a5[1];
  while (v10 != v11)
  {
    v12 = v10[1];
    v19 = *v10;
    v20 = (std::__shared_weak_count *)v12;
    if (v12)
    {
      v13 = (unint64_t *)(v12 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    sub_10058D764((uint64_t)a1, &v19);
    v15 = v20;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v10 += 2;
  }
  (*(void (**)(_QWORD *))(*a1 + 48))(a1);
  if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[21] + 40))(a1[21]) & 1) != 0)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)*v9 + 72))(*v9);
    (*(void (**)(_QWORD))(*(_QWORD *)a1[17] + 72))(a1[17]);
  }
  else
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021459F8);
    v18 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"gps harvesting is not supported\"}", buf, 0x12u);
    }
  }
}

void sub_10058D748(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t **sub_10058D764(uint64_t a1, uint64_t *a2)
{
  uint64_t **v4;
  uint64_t **result;
  int v6;
  int *v7;

  v6 = sub_100201404(*a2);
  v7 = &v6;
  v4 = sub_100200B98((uint64_t **)(a1 + 64), &v6, (uint64_t)&unk_101B9EB60, &v7);
  sub_100349198(v4 + 5, a2);
  v7 = &v6;
  result = sub_100041CE0((uint64_t **)(a1 + 112), &v6, (uint64_t)&unk_101B9EB60, &v7);
  result[5] = (uint64_t *)0x7FEFFFFFFFFFFFFFLL;
  return result;
}

void sub_10058D7F8(uint64_t a1)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 168) + 88))(*(_QWORD *)(a1 + 168));
  sub_10052496C(a1 + 1080);
}

void sub_10058D828(uint64_t a1)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 152) + 88))(*(_QWORD *)(a1 + 152));
  sub_10052496C(a1 + 1064);
}

double sub_10058D858(uint64_t a1)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 168) + 96))(*(_QWORD *)(a1 + 168));
  return sub_1005249A8((double *)(a1 + 1080));
}

double sub_10058D888(uint64_t a1)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 152) + 96))(*(_QWORD *)(a1 + 152));
  return sub_1005249A8((double *)(a1 + 1064));
}

double sub_10058D8B8(uint64_t a1)
{
  return *(double *)(a1 + 248);
}

double sub_10058D8C0(uint64_t a1)
{
  return *(double *)(a1 + 224);
}

uint64_t sub_10058D8C8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 236);
}

uint64_t sub_10058D8D0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 212);
}

uint64_t sub_10058D8D8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 240);
}

uint64_t sub_10058D8E0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 216);
}

uint64_t sub_10058D8E8(uint64_t a1)
{
  return a1 + 208;
}

uint64_t sub_10058D8F0(uint64_t a1)
{
  return a1 + 200;
}

uint64_t sub_10058D8F8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 232);
}

uint64_t sub_10058D900(uint64_t a1)
{
  return *(unsigned int *)(a1 + 224);
}

uint64_t sub_10058D908(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 188);
}

uint64_t sub_10058D910(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 189);
}

uint64_t sub_10058D918(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 181);
}

uint64_t sub_10058D920(uint64_t result, int a2)
{
  _QWORD **v2;
  _QWORD *v3;
  uint64_t v4;

  if (*(unsigned __int8 *)(result + 187) != a2)
  {
    v2 = (_QWORD **)result;
    *(_BYTE *)(result + 187) = a2;
    v3 = *(_QWORD **)(result + 48);
    if (a2)
      v4 = 80;
    else
      v4 = 88;
    (*(void (**)(void))(*v3 + v4))();
    (*(void (**)(void))(*v2[6] + v4))();
    (*(void (**)(void))(*v2[6] + v4))();
    return ((uint64_t (*)(_QWORD **))(*v2)[5])(v2);
  }
  return result;
}

uint64_t sub_10058D9B0(uint64_t result, int a2)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t (*v4)(void);
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  int v22;
  int v23;
  __int16 v24;
  const char *v25;

  v2 = result;
  switch(a2)
  {
    case 1:
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021459F8);
      v3 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
      {
        v22 = 68289026;
        v23 = 0;
        v24 = 2082;
        v25 = "";
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvester registering for location leech notifications\"}", (uint8_t *)&v22, 0x12u);
      }
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 48) + 232))(*(_QWORD *)(v2 + 48), 5);
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 48) + 232))(*(_QWORD *)(v2 + 48), 13);
      v4 = *(uint64_t (**)(void))(**(_QWORD **)(v2 + 48) + 232);
      goto LABEL_23;
    case 4:
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021459F8);
      v5 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
      {
        v22 = 68289026;
        v23 = 0;
        v24 = 2082;
        v25 = "";
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvester #msim registering for telephony notifications\"}", (uint8_t *)&v22, 0x12u);
      }
      v6 = *(_QWORD *)(v2 + 48);
      sub_10013F950(&v22, CFSTR("kCellInfoNotification"));
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v6 + 272))(v6, &v22);
      v7 = *(_QWORD *)(v2 + 48);
      sub_10013F950(&v22, CFSTR("kSimInfoChangedNotification"));
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v7 + 272))(v7, &v22);
      v8 = *(_QWORD *)(v2 + 48);
      sub_10013F950(&v22, CFSTR("kServingCellChangedNotification"));
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v8 + 272))(v8, &v22);
      v9 = *(_QWORD *)(v2 + 48);
      sub_10013F950(&v22, CFSTR("kServingNetworkChangedNotification"));
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v9 + 272))(v9, &v22);
      v10 = *(_QWORD *)(v2 + 48);
      sub_10013F950(&v22, CFSTR("kSubscriptionsInUseNotification"));
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v10 + 272))(v10, &v22);
      v11 = *(_QWORD *)(v2 + 48);
      sub_10013F950(&v22, CFSTR("kRegistrationDisplayStatusNotification"));
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v11 + 272))(v11, &v22);
      goto LABEL_17;
    case 5:
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021459F8);
      v12 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
      {
        v22 = 68289026;
        v23 = 0;
        v24 = 2082;
        v25 = "";
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvester registering for #legacy telephony notifications\"}", (uint8_t *)&v22, 0x12u);
      }
      v13 = *(_QWORD *)(v2 + 48);
      sub_10013F950(&v22, kCTCellMonitorUpdateNotification);
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v13 + 280))(v13, &v22);
      v14 = *(_QWORD *)(v2 + 48);
      sub_10013F950(&v22, kCTRegistrationCellChangedNotification);
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v14 + 280))(v14, &v22);
      v15 = *(_QWORD *)(v2 + 48);
      sub_10013F950(&v22, kCTRegistrationNewServingNetworkNotification);
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v15 + 280))(v15, &v22);
      v16 = *(_QWORD *)(v2 + 48);
      sub_10013F950(&v22, CFSTR("kSubscriptionsInUseNotification"));
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v16 + 280))(v16, &v22);
LABEL_17:
      v17 = *(_QWORD *)(v2 + 48);
      sub_10013F950(&v22, CFSTR("kTimingAdvanceInfoNotification"));
      result = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v17 + 272))(v17, &v22);
      break;
    case 6:
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021459F8);
      v18 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
      {
        v22 = 68289026;
        v23 = 0;
        v24 = 2082;
        v25 = "";
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvester registering for PassKit notifications\"}", (uint8_t *)&v22, 0x12u);
      }
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v2 + 48) + 368))(*(_QWORD *)(v2 + 48), 0);
      v4 = *(uint64_t (**)(void))(**(_QWORD **)(v2 + 48) + 368);
LABEL_23:
      result = v4();
      break;
    case 7:
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021459F8);
      v19 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
      {
        v22 = 68289026;
        v23 = 0;
        v24 = 2082;
        v25 = "";
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvester registering for leech visit notifications\"}", (uint8_t *)&v22, 0x12u);
      }
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 48) + 392))(*(_QWORD *)(v2 + 48));
      break;
    case 8:
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021459F8);
      v20 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
      {
        v22 = 68289026;
        v23 = 0;
        v24 = 2082;
        v25 = "";
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvester registering for wifi notificatons\"}", (uint8_t *)&v22, 0x12u);
      }
      v21 = *(_QWORD *)(v2 + 48);
      v22 = 3;
      result = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v21 + 328))(v21, &v22);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10058DFE8(uint64_t result, int a2)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t (*v4)(void);
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, int *);
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *v21;
  int v22;
  int v23;
  __int16 v24;
  const char *v25;

  v2 = result;
  switch(a2)
  {
    case 1:
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021459F8);
      v3 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
      {
        v22 = 68289026;
        v23 = 0;
        v24 = 2082;
        v25 = "";
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvester unregistering for location notifications\"}", (uint8_t *)&v22, 0x12u);
      }
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 48) + 240))(*(_QWORD *)(v2 + 48), 5);
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 48) + 240))(*(_QWORD *)(v2 + 48), 13);
      v4 = *(uint64_t (**)(void))(**(_QWORD **)(v2 + 48) + 240);
      return v4();
    case 4:
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021459F8);
      v5 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
      {
        v22 = 68289026;
        v23 = 0;
        v24 = 2082;
        v25 = "";
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvester unregistering for telephony notifications\"}", (uint8_t *)&v22, 0x12u);
      }
      v6 = *(_QWORD *)(v2 + 48);
      sub_10013F950(&v22, CFSTR("kCellInfoNotification"));
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v6 + 288))(v6, &v22);
      v7 = *(_QWORD *)(v2 + 48);
      sub_10013F950(&v22, CFSTR("kSimInfoChangedNotification"));
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v7 + 288))(v7, &v22);
      v8 = *(_QWORD *)(v2 + 48);
      sub_10013F950(&v22, CFSTR("kServingCellChangedNotification"));
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v8 + 288))(v8, &v22);
      v9 = *(_QWORD *)(v2 + 48);
      sub_10013F950(&v22, CFSTR("kServingNetworkChangedNotification"));
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v9 + 288))(v9, &v22);
      v10 = *(_QWORD *)(v2 + 48);
      sub_10013F950(&v22, CFSTR("kSubscriptionsInUseNotification"));
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v10 + 288))(v10, &v22);
      v11 = *(_QWORD *)(v2 + 48);
      sub_10013F950(&v22, CFSTR("kRegistrationDisplayStatusNotification"));
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v11 + 288))(v11, &v22);
      v12 = *(_QWORD *)(v2 + 48);
      sub_10013F950(&v22, CFSTR("kTimingAdvanceInfoNotification"));
      v13 = *(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v12 + 288);
      goto LABEL_17;
    case 5:
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021459F8);
      v14 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
      {
        v22 = 68289026;
        v23 = 0;
        v24 = 2082;
        v25 = "";
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvester unregistering for #legacy telephony notifications\"}", (uint8_t *)&v22, 0x12u);
      }
      v15 = *(_QWORD *)(v2 + 48);
      sub_10013F950(&v22, kCTCellMonitorUpdateNotification);
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v15 + 296))(v15, &v22);
      v16 = *(_QWORD *)(v2 + 48);
      sub_10013F950(&v22, kCTRegistrationCellChangedNotification);
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v16 + 296))(v16, &v22);
      v17 = *(_QWORD *)(v2 + 48);
      sub_10013F950(&v22, kCTRegistrationNewServingNetworkNotification);
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v17 + 296))(v17, &v22);
      v12 = *(_QWORD *)(v2 + 48);
      sub_10013F950(&v22, CFSTR("kSubscriptionsInUseNotification"));
      v13 = *(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v12 + 296);
LABEL_17:
      v18 = v12;
      goto LABEL_34;
    case 6:
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021459F8);
      v19 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
      {
        v22 = 68289026;
        v23 = 0;
        v24 = 2082;
        v25 = "";
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvester unregistering for PassKit notifications\"}", (uint8_t *)&v22, 0x12u);
      }
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v2 + 48) + 376))(*(_QWORD *)(v2 + 48), 0);
      v4 = *(uint64_t (**)(void))(**(_QWORD **)(v2 + 48) + 376);
      return v4();
    case 7:
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021459F8);
      v20 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
      {
        v22 = 68289026;
        v23 = 0;
        v24 = 2082;
        v25 = "";
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvester unregistering for leech visit notifications\"}", (uint8_t *)&v22, 0x12u);
      }
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 48) + 400))(*(_QWORD *)(v2 + 48));
    case 8:
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021459F8);
      v21 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
      {
        v22 = 68289026;
        v23 = 0;
        v24 = 2082;
        v25 = "";
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvester unregistering for wifi notificatons\"}", (uint8_t *)&v22, 0x12u);
      }
      v18 = *(_QWORD *)(v2 + 48);
      v22 = 3;
      v13 = *(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v18 + 336);
LABEL_34:
      result = v13(v18, &v22);
      break;
    default:
      return result;
  }
  return result;
}

void sub_10058E620(uint64_t a1, signed int a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v7;
  signed int v8;
  BOOL v9;
  uint64_t *v10;
  NSObject *v11;
  void **v12;
  uint64_t v13;
  void **v14;
  const char *v15;
  const char *v16;
  NSObject *v17;
  NSObject *v18;
  uint64_t v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  void **v28;
  void *__p[2];
  char v30;
  signed int v31;
  uint8_t buf[4];
  int v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  void **v39;

  v31 = a2;
  v5 = *(_QWORD *)(a1 + 72);
  if (!v5)
    goto LABEL_11;
  v7 = a1 + 72;
  do
  {
    v8 = *(_DWORD *)(v5 + 32);
    v9 = v8 < a2;
    if (v8 >= a2)
      v10 = (uint64_t *)v5;
    else
      v10 = (uint64_t *)(v5 + 8);
    if (!v9)
      v7 = v5;
    v5 = *v10;
  }
  while (*v10);
  if (v7 != a1 + 72 && *(_DWORD *)(v7 + 32) <= a2)
  {
    if (sub_100270BB8((_QWORD *)(*(_QWORD *)(a1 + 88) + 40 * a3), (unsigned int *)&v31))
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021459F8);
      v18 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_FAULT))
      {
        v19 = v31;
        sub_100C4F064(a3, __p);
        if (v30 >= 0)
          v20 = __p;
        else
          v20 = (void **)__p[0];
        *(_DWORD *)buf = 68289539;
        v33 = 0;
        v34 = 2082;
        v35 = "";
        v36 = 2050;
        v37 = v19;
        v38 = 2081;
        v39 = v20;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"SubHarvester re-registered for notification\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"harvestNotificationType\":%{private, location:escape_only}s}", buf, 0x26u);
        if (v30 < 0)
          operator delete(__p[0]);
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_1021459F8);
      }
      v21 = qword_1022A0208;
      if (os_signpost_enabled((os_log_t)qword_1022A0208))
      {
        v22 = v31;
        sub_100C4F064(a3, __p);
        if (v30 >= 0)
          v23 = __p;
        else
          v23 = (void **)__p[0];
        *(_DWORD *)buf = 68289539;
        v33 = 0;
        v34 = 2082;
        v35 = "";
        v36 = 2050;
        v37 = v22;
        v38 = 2081;
        v39 = v23;
        v15 = "SubHarvester re-registered for notification";
        v16 = "{\"msg%{public}.0s\":\"SubHarvester re-registered for notification\", \"subHarvester\":%{public, location:"
              "CLSubHarvesterIdentifier}lld, \"harvestNotificationType\":%{private, location:escape_only}s}";
        v17 = v21;
        goto LABEL_26;
      }
    }
    else
    {
      v24 = *(_QWORD *)(a1 + 88) + 40 * a3;
      v25 = *(_QWORD *)(v24 + 24);
      sub_100271BA8(v24, (unsigned int *)&v31, &v31);
      if (!v25)
        sub_10058D9B0(a1, a3);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021459F8);
      v26 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
      {
        v27 = v31;
        sub_100C4F064(a3, __p);
        if (v30 >= 0)
          v28 = __p;
        else
          v28 = (void **)__p[0];
        *(_DWORD *)buf = 68289539;
        v33 = 0;
        v34 = 2082;
        v35 = "";
        v36 = 2050;
        v37 = v27;
        v38 = 2081;
        v39 = v28;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"subharvester registered for notification\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"harvestNotificationType\":%{private, location:escape_only}s}", buf, 0x26u);
        goto LABEL_27;
      }
    }
  }
  else
  {
LABEL_11:
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021459F8);
    v11 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_FAULT))
    {
      sub_100C4F064(a3, __p);
      if (v30 >= 0)
        v12 = __p;
      else
        v12 = (void **)__p[0];
      *(_DWORD *)buf = 68289539;
      v33 = 0;
      v34 = 2082;
      v35 = "";
      v36 = 2050;
      v37 = a2;
      v38 = 2081;
      v39 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unknown SubHarvester registering for notification\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"harvestNotificationType\":%{private, location:escape_only}s}", buf, 0x26u);
      if (v30 < 0)
        operator delete(__p[0]);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021459F8);
    }
    v13 = qword_1022A0208;
    if (os_signpost_enabled((os_log_t)qword_1022A0208))
    {
      sub_100C4F064(a3, __p);
      if (v30 >= 0)
        v14 = __p;
      else
        v14 = (void **)__p[0];
      *(_DWORD *)buf = 68289539;
      v33 = 0;
      v34 = 2082;
      v35 = "";
      v36 = 2050;
      v37 = a2;
      v38 = 2081;
      v39 = v14;
      v15 = "Unknown SubHarvester registering for notification";
      v16 = "{\"msg%{public}.0s\":\"Unknown SubHarvester registering for notification\", \"subHarvester\":%{public, locat"
            "ion:CLSubHarvesterIdentifier}lld, \"harvestNotificationType\":%{private, location:escape_only}s}";
      v17 = v13;
LABEL_26:
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v15, v16, buf, 0x26u);
LABEL_27:
      if (v30 < 0)
        operator delete(__p[0]);
    }
  }
}

void sub_10058EB20(uint64_t a1, signed int a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v7;
  signed int v8;
  BOOL v9;
  uint64_t *v10;
  NSObject *v11;
  void **v12;
  NSObject *v13;
  void **v14;
  NSObject *v15;
  uint64_t v16;
  void **v17;
  void *__p[2];
  char v19;
  signed int v20;
  uint8_t buf[4];
  int v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  void **v28;

  v20 = a2;
  v5 = *(_QWORD *)(a1 + 72);
  if (!v5)
    goto LABEL_11;
  v7 = a1 + 72;
  do
  {
    v8 = *(_DWORD *)(v5 + 32);
    v9 = v8 < a2;
    if (v8 >= a2)
      v10 = (uint64_t *)v5;
    else
      v10 = (uint64_t *)(v5 + 8);
    if (!v9)
      v7 = v5;
    v5 = *v10;
  }
  while (*v10);
  if (v7 != a1 + 72 && *(_DWORD *)(v7 + 32) <= a2)
  {
    if (sub_100270BB8((_QWORD *)(*(_QWORD *)(a1 + 88) + 40 * a3), (unsigned int *)&v20))
    {
      sub_1005931F4((_QWORD *)(*(_QWORD *)(a1 + 88) + 40 * a3), (unsigned int *)&v20);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021459F8);
      v15 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
      {
        v16 = v20;
        sub_100C4F064(a3, __p);
        v17 = v19 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 68289539;
        v22 = 0;
        v23 = 2082;
        v24 = "";
        v25 = 2050;
        v26 = v16;
        v27 = 2081;
        v28 = v17;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"subharvester unregistered for notification\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"harvestNotificationType\":%{private, location:escape_only}s}", buf, 0x26u);
        if (v19 < 0)
          operator delete(__p[0]);
      }
      if (!*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40 * a3 + 24))
        sub_10058DFE8(a1, a3);
    }
  }
  else
  {
LABEL_11:
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021459F8);
    v11 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_FAULT))
    {
      sub_100C4F064(a3, __p);
      if (v19 >= 0)
        v12 = __p;
      else
        v12 = (void **)__p[0];
      *(_DWORD *)buf = 68289539;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 2050;
      v26 = a2;
      v27 = 2081;
      v28 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unknown SubHarvester unregistering for notification\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"harvestNotificationType\":%{private, location:escape_only}s}", buf, 0x26u);
      if (v19 < 0)
        operator delete(__p[0]);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021459F8);
    }
    v13 = qword_1022A0208;
    if (os_signpost_enabled((os_log_t)qword_1022A0208))
    {
      sub_100C4F064(a3, __p);
      if (v19 >= 0)
        v14 = __p;
      else
        v14 = (void **)__p[0];
      *(_DWORD *)buf = 68289539;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 2050;
      v26 = a2;
      v27 = 2081;
      v28 = v14;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Unknown SubHarvester unregistering for notification", "{\"msg%{public}.0s\":\"Unknown SubHarvester unregistering for notification\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"harvestNotificationType\":%{private, location:escape_only}s}", buf, 0x26u);
      if (v19 < 0)
        operator delete(__p[0]);
    }
  }
}

uint64_t sub_10058EEA8(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;

  v2 = *(_QWORD **)(result + 64);
  v3 = (_QWORD *)(result + 72);
  if (v2 != (_QWORD *)(result + 72))
  {
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v2[5] + 88))(v2[5], a2);
      v5 = (_QWORD *)v2[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v2[2];
          v7 = *v6 == (_QWORD)v2;
          v2 = v6;
        }
        while (!v7);
      }
      v2 = v6;
    }
    while (v6 != v3);
  }
  return result;
}

uint64_t sub_10058EF28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  int v7;
  BOOL v8;
  char v9;
  int v10;
  double v11;
  double v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  NSObject *v17;
  double v19;
  double v20;
  double v21;
  double v22;
  _QWORD v23[2];
  _QWORD v24[2];
  uint8_t buf[4];
  int v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  double v34;
  __int16 v35;
  double v36;
  __int16 v37;
  double v38;
  __int16 v39;
  double v40;

  sub_100119F3C(v24);
  sub_100119F3C(v23);
  v6 = sub_10000CA44(a2, "Locations");
  v7 = v6;
  v8 = *(double *)(a3 + 20) < 0.0 || v6 < 1;
  if (v8)
    goto LABEL_37;
  v9 = 0;
  v10 = 1;
  do
  {
    v21 = 0.0;
    v22 = 0.0;
    v19 = 0.0;
    v20 = 0.0;
    sub_100006BB4(a2, "Locations", v24);
    if (sub_1001FD98C((uint64_t)v24, "LatitudeMin", &v22)
      && sub_1001FD98C((uint64_t)v24, "LatitudeMax", &v21)
      && sub_1001FD98C((uint64_t)v24, "LongitudeMin", &v20)
      && sub_1001FD98C((uint64_t)v24, "LongitudeMax", &v19)
      && sub_100006BB4((uint64_t)v24, "Rules", v23))
    {
      v11 = *(double *)(a3 + 4);
      if (v22 <= v11 && v21 >= v11)
      {
        v12 = *(double *)(a3 + 12);
        if (v20 <= v12 && v19 >= v12)
        {
          if (qword_1022A0200 != -1)
            dispatch_once(&qword_1022A0200, &stru_1021459F8);
          v13 = qword_1022A0208;
          if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
          {
            v14 = *(_QWORD *)(a3 + 4);
            v15 = *(_QWORD *)(a3 + 12);
            *(_DWORD *)buf = 68290563;
            v26 = 0;
            v27 = 2082;
            v28 = "";
            v29 = 2049;
            v30 = v14;
            v31 = 2049;
            v32 = v15;
            v33 = 2049;
            v34 = v22;
            v35 = 2049;
            v36 = v20;
            v37 = 2049;
            v38 = v21;
            v39 = 2049;
            v40 = v19;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"applying bounding-box-specific overrides\", \"lat\":\"%{private}f\", \"lon\":\"%{private}f\", \"latMin\":\"%{private}f\", \"lonMin\":\"%{private}f\", \"latMax\":\"%{private}f\", \"lonMax\":\"%{private}f\"}", buf, 0x4Eu);
          }
          v9 = 1;
        }
      }
    }
    else
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021459F8);
      v16 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 68289283;
        v26 = 0;
        v27 = 2082;
        v28 = "";
        v29 = 1025;
        LODWORD(v30) = v10 - 1;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"location-specific entry is incomplete\", \"incompleteEntry\":%{private}d}", buf, 0x18u);
      }
    }
    if ((v9 & 1) != 0)
      break;
    if (*(double *)(a3 + 20) < 0.0)
      break;
    v8 = v10++ < v7;
  }
  while (v8);
  if ((v9 & 1) == 0)
  {
LABEL_37:
    if (sub_100006BB4(a2, "Default", v23))
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021459F8);
      v17 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68289026;
        v26 = 0;
        v27 = 2082;
        v28 = "";
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"applying overrides\"}", buf, 0x12u);
      }
    }
    else
    {
      sub_10052502C((uint64_t)v23, a2);
    }
  }
  sub_10058EEA8(a1, (uint64_t)v23);
  sub_10011A5A8(v23);
  return sub_10011A5A8(v24);
}

void sub_10058F338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

uint64_t sub_10058F368(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint64_t v4;
  _BYTE v6[16];
  uint8_t buf[4];
  int v8;
  __int16 v9;
  const char *v10;

  sub_100119F3C(v6);
  if ((*(unsigned int (**)(_QWORD, _BYTE *))(**(_QWORD **)(a1 + 48) + 112))(*(_QWORD *)(a1 + 48), v6))
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021459F8);
    v2 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289026;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      v3 = "{\"msg%{public}.0s\":\"found default overrides - applying\"}";
LABEL_15:
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, v3, buf, 0x12u);
    }
  }
  else if ((*(unsigned int (**)(_QWORD, _BYTE *))(**(_QWORD **)(a1 + 48) + 360))(*(_QWORD *)(a1 + 48), v6))
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021459F8);
    v2 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289026;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      v3 = "{\"msg%{public}.0s\":\"found network overrides - applying\"}";
      goto LABEL_15;
    }
  }
  else
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021459F8);
    v2 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289026;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      v3 = "{\"msg%{public}.0s\":\"no overrides found in daemon settings or network settings\"}";
      goto LABEL_15;
    }
  }
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 168) + 56))(*(_QWORD *)(a1 + 168));
  sub_10058EF28(a1, (uint64_t)v6, v4);
  return sub_10011A5A8(v6);
}

void sub_10058F584(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

_BYTE *sub_10058F5A0(_BYTE *result, int a2)
{
  if (result[185] != a2)
  {
    result[185] = a2;
    return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 40))(result);
  }
  return result;
}

uint64_t sub_10058F5C4()
{
  std::__shared_weak_count *v0;
  unint64_t *v1;
  unint64_t v2;
  id v3;
  uint64_t v4;
  void *i;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::string::size_type size;
  unint64_t v12;
  void **v13;
  std::string *p_s1;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  id v18;
  std::string *v19;
  NSObject *v20;
  uint64_t v22;
  id v23;
  std::string *v24;
  const char *v25;
  char *v26;
  const char *v27;
  char *v28;
  std::string __s1;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  void *__p[2];
  unsigned __int8 v35;
  BOOL v36;
  int v37;
  id v38;
  __int16 v39;
  std::string *v40;
  uint8_t v41[128];
  _BYTE buf[1628];

  v36 = 0;
  sub_1001E4804(buf);
  sub_1001E4874(*(uint64_t *)buf, "EnableHarvestingForLocationSimulation", &v36);
  v0 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v1 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 - 1, v1));
    if (!v2)
    {
      ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
      std::__shared_weak_count::__release_weak(v0);
    }
  }
  if (v36)
  {
    sub_1015A2E04(__p, "http://localhost:8008");
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v3 = objc_msgSend(&off_1022203A8, "countByEnumeratingWithState:objects:count:", &v30, v41, 16);
    if (v3)
    {
      v4 = *(_QWORD *)v31;
      while (2)
      {
        for (i = 0; i != v3; i = (char *)i + 1)
        {
          if (*(_QWORD *)v31 != v4)
            objc_enumerationMutation(&off_1022203A8);
          v6 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * (_QWORD)i);
          memset(&__s1, 0, sizeof(__s1));
          sub_1001E4804(buf);
          sub_1000BD5F0(*(uint64_t *)buf, (uint64_t)v6, &__s1);
          v7 = *(std::__shared_weak_count **)&buf[8];
          if (*(_QWORD *)&buf[8])
          {
            v8 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v9 = __ldaxr(v8);
            while (__stlxr(v9 - 1, v8));
            if (!v9)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
          v10 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
          if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
          else
            size = __s1.__r_.__value_.__l.__size_;
          v12 = v35;
          if ((v35 & 0x80u) != 0)
            v12 = (unint64_t)__p[1];
          if (size != v12)
            goto LABEL_37;
          if ((v35 & 0x80u) == 0)
            v13 = __p;
          else
            v13 = (void **)__p[0];
          if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
          {
            v15 = (void *)__s1.__r_.__value_.__r.__words[0];
            if (memcmp(__s1.__r_.__value_.__l.__data_, v13, __s1.__r_.__value_.__l.__size_))
              goto LABEL_37;
            operator delete(v15);
          }
          else if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
          {
            p_s1 = &__s1;
            while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v13)
            {
              p_s1 = (std::string *)((char *)p_s1 + 1);
              v13 = (void **)((char *)v13 + 1);
              if (!--v10)
                goto LABEL_34;
            }
LABEL_37:
            if (qword_1022A0200 != -1)
              dispatch_once(&qword_1022A0200, &stru_1021459F8);
            v17 = qword_1022A0208;
            if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
            {
              v18 = objc_msgSend(v6, "UTF8String");
              v19 = &__s1;
              if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v19 = (std::string *)__s1.__r_.__value_.__r.__words[0];
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = v18;
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = v19;
              _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "Collection endpoint for: %s  set to : %s. Should be localhost:8008", buf, 0x16u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0200 != -1)
                dispatch_once(&qword_1022A0200, &stru_1021459F8);
              v22 = qword_1022A0208;
              v23 = objc_msgSend(v6, "UTF8String");
              v24 = &__s1;
              if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v24 = (std::string *)__s1.__r_.__value_.__r.__words[0];
              v37 = 136315394;
              v38 = v23;
              v39 = 2080;
              v40 = v24;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v22, 2, "Collection endpoint for: %s  set to : %s. Should be localhost:8008", (const char *)&v37, 22);
              v26 = (char *)v25;
              sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLHarvestController::isHarvestingAllowedForLocationSimulation() const", "%s\n", v25);
              if (v26 != buf)
                free(v26);
            }
            if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__s1.__r_.__value_.__l.__data_);
            v16 = 0;
            goto LABEL_54;
          }
LABEL_34:
          ;
        }
        v3 = objc_msgSend(&off_1022203A8, "countByEnumeratingWithState:objects:count:", &v30, v41, 16);
        v16 = 1;
        if (v3)
          continue;
        break;
      }
    }
    else
    {
      v16 = 1;
    }
LABEL_54:
    if ((char)v35 < 0)
      operator delete(__p[0]);
  }
  else
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021459F8);
    v20 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "EnableHarvestingForLocationSimulation not set to True.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021459F8);
      LOWORD(__p[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 2, "EnableHarvestingForLocationSimulation not set to True.", __p, 2);
      v28 = (char *)v27;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLHarvestController::isHarvestingAllowedForLocationSimulation() const", "%s\n", v27);
      if (v28 != buf)
        free(v28);
    }
    return 0;
  }
  return v16;
}

void sub_10058FB20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  if (a17 < 0)
    operator delete(__p);
  if (a31 < 0)
    operator delete(a26);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10058FB94(uint64_t a1)
{
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 224))(*(_QWORD *)(a1 + 48)) & 1) != 0
    || ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 216))(*(_QWORD *)(a1 + 48)) & 1) != 0)
  {
    return 1;
  }
  else
  {
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 168) + 80))(*(_QWORD *)(a1 + 168));
  }
}

uint64_t sub_10058FBF4(uint64_t a1, int a2)
{
  uint64_t result;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  _QWORD v8[5];
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;

  result = sub_1001B7910();
  if ((result & 0x400000) != 0 && *(unsigned __int8 *)(a1 + 1209) != a2)
  {
    if (a2)
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021459F8);
      v5 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 68289026;
        v10 = 0;
        v11 = 2082;
        v12 = "";
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"starting motion activity monitoring\"}", buf, 0x12u);
      }
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 248))(*(_QWORD *)(a1 + 48), 2);
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 248))(*(_QWORD *)(a1 + 48), 3);
      v6 = *(_QWORD *)(a1 + 48);
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      v8[2] = sub_10058FE2C;
      v8[3] = &unk_102145868;
      v8[4] = a1;
      result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 352))(v6, v8);
    }
    else
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021459F8);
      v7 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 68289026;
        v10 = 0;
        v11 = 2082;
        v12 = "";
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"stopping motion activity monitoring\"}", buf, 0x12u);
      }
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 256))(*(_QWORD *)(a1 + 48), 2);
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 256))(*(_QWORD *)(a1 + 48), 3);
      CLMotionActivity::init((CLMotionActivity *)(a1 + 392));
      CLMotionActivity::init((CLMotionActivity *)(a1 + 528));
      result = CLMotionActivity::init((CLMotionActivity *)(a1 + 664));
      *(_BYTE *)(a1 + 802) = 0;
      *(_QWORD *)(a1 + 808) = 0xBFF0000000000000;
    }
    *(_BYTE *)(a1 + 1209) = a2;
  }
  return result;
}

void sub_10058FE2C(uint64_t a1, double *a2)
{
  int v3;
  uint64_t v4;
  NSObject *v5;
  double v6;
  uint64_t v7;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  double v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  int v16;

  v3 = *a2 > 0.0 && a2[1] < 0.0;
  v4 = *(_QWORD *)(a1 + 32);
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021459F8);
  v5 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    v6 = *a2;
    v7 = *((_QWORD *)a2 + 1);
    v8[0] = 68289795;
    v8[1] = 0;
    v9 = 2082;
    v10 = "";
    v11 = 2049;
    v12 = v6;
    v13 = 2049;
    v14 = v7;
    v15 = 1025;
    v16 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"fetched most recent connection\", \"startTime\":\"%{private}f\", \"endTime\":\"%{private}f\", \"vehicleConnected\":%{private}hhd}", (uint8_t *)v8, 0x2Cu);
  }
  sub_10058FF60(v4, v3);
}

void sub_10058FF60(uint64_t a1, int a2)
{
  NSObject *v4;
  double v5;
  NSObject *v6;
  int v7;
  int v8;
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;

  if (*(double *)(a1 + 808) >= 0.0)
  {
    if (*(unsigned __int8 *)(a1 + 802) == a2)
      return;
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021459F8);
    v6 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
    {
      v7 = *(unsigned __int8 *)(a1 + 802);
      v8 = 68289539;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 1025;
      v13 = v7;
      v14 = 1025;
      v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"vehicle connected state changed\", \"oldVehicleConnectionState\":%{private}d, \"newVehicleConnectionState\":%{private}d}", (uint8_t *)&v8, 0x1Eu);
    }
    *(_BYTE *)(a1 + 802) = a2;
    v5 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  }
  else
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021459F8);
    v4 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
    {
      v8 = 68289283;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 1025;
      v13 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"vehicle connected state changed, was unknown\", \"newVehicleConnectionState\":%{private}d}", (uint8_t *)&v8, 0x18u);
    }
    *(_BYTE *)(a1 + 802) = a2;
    v5 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1) + -60.0;
  }
  *(double *)(a1 + 808) = v5;
}

uint64_t sub_100590144(uint64_t result, int a2)
{
  char v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  int v7;
  int v8;
  __int16 v9;
  const char *v10;

  if (*(unsigned __int8 *)(result + 1208) != a2)
  {
    v2 = a2;
    v3 = result;
    if (a2)
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021459F8);
      v4 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
      {
        v7 = 68289026;
        v8 = 0;
        v9 = 2082;
        v10 = "";
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"starting battery monitoring\"}", (uint8_t *)&v7, 0x12u);
      }
      v5 = 23;
    }
    else
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021459F8);
      v6 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
      {
        v7 = 68289026;
        v8 = 0;
        v9 = 2082;
        v10 = "";
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"stopping battery monitoring\"}", (uint8_t *)&v7, 0x12u);
      }
      v5 = 24;
    }
    result = (*(uint64_t (**)(void))(**(_QWORD **)(v3 + 48) + 8 * v5))();
    *(_BYTE *)(v3 + 1208) = v2;
  }
  return result;
}

void sub_1005902D8(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  NSObject *v5;
  _BOOL4 v6;
  uint64_t v7;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;

  ++*(_DWORD *)(a1 + 336);
  LODWORD(v3) = *(_DWORD *)(a1 + 232);
  if ((_DWORD)v3 != *a2)
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021459F8);
    v5 = qword_1022A0208;
    v6 = os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO);
    v3 = *a2;
    if (v6)
    {
      v7 = *(unsigned int *)(a1 + 232);
      v8[0] = 68289539;
      v8[1] = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2049;
      v12 = v7;
      v13 = 2049;
      v14 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Reachability changed state\", \"oldReachability\":%{private, location:CLDaemonStatus_Type::Reachability}lld, \"newReachability\":%{private, location:CLDaemonStatus_Type::Reachability}lld}", (uint8_t *)v8, 0x26u);
      LODWORD(v3) = *a2;
    }
  }
  *(_DWORD *)(a1 + 232) = v3;
}

BOOL sub_1005903FC(uint64_t a1)
{
  double v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;

  v2 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v3 = sub_100FC30F0();
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 168) + 104))(*(_QWORD *)(a1 + 168)) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1) & 1) != 0
    || v3[1] && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1) & 1) != 0)
  {
    return 1;
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1) & 1) != 0)
    return 1;
  LOBYTE(v4) = *(_BYTE *)(a1 + 800);
  if (v2 - (double)v4 < 60.0 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1) & 1) != 0)
    return 1;
  LOBYTE(v5) = *(_BYTE *)(a1 + 801);
  return v2 - (double)v5 < 60.0;
}

uint64_t sub_1005904E4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 972);
}

uint64_t sub_1005904EC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 320))(*(_QWORD *)(a1 + 48));
}

void sub_1005904FC(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;

  v1 = *(_QWORD **)(a1 + 64);
  v2 = (_QWORD *)(a1 + 72);
  if (v1 != (_QWORD *)(a1 + 72))
  {
    do
    {
      sub_100D058B4((unsigned int *)v1[5]);
      v3 = (_QWORD *)v1[1];
      if (v3)
      {
        do
        {
          v4 = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          v4 = (_QWORD *)v1[2];
          v5 = *v4 == (_QWORD)v1;
          v1 = v4;
        }
        while (!v5);
      }
      v1 = v4;
    }
    while (v4 != v2);
  }
}

uint64_t sub_100590564(uint64_t **a1, uint64_t a2, int a3)
{
  NSObject *v6;
  unsigned __int8 *v7;
  uint8_t buf[8];
  __int16 v10;
  const char *v11;
  __int16 v12;
  unsigned __int8 *v13;
  __int16 v14;
  int v15;

  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021459F8);
  v6 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(a2 + 23) >= 0)
      v7 = (unsigned __int8 *)a2;
    else
      v7 = *(unsigned __int8 **)a2;
    *(_DWORD *)buf = 68289538;
    *(_DWORD *)&buf[4] = 0;
    v10 = 2082;
    v11 = "";
    v12 = 2082;
    v13 = v7;
    v14 = 1026;
    v15 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"update authorization\", \"clientKey\":%{public, location:escape_only}s, \"isAuthorized\":%{public}hhd}", buf, 0x22u);
  }
  if (sub_100304CA0(qword_102301CC8, qword_102301CD0, (unsigned __int8 **)a2) == qword_102301CD0)
    sub_10190025C();
  *(_QWORD *)buf = a2;
  *((_BYTE *)sub_100593228(a1 + 127, (const void **)a2, (uint64_t)&unk_101B9EB60, (__int128 **)buf) + 56) = a3;
  return ((uint64_t (*)(uint64_t **))(*a1)[5])(a1);
}

uint64_t sub_1005906D8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1210);
}

__n128 sub_1005906E0(uint64_t a1, uint64_t a2)
{
  double v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  ++*(_DWORD *)(a1 + 352);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 80))(*(_QWORD *)(a1 + 136));
  if (sub_100523AD4(a1 + 1080))
  {
    v4 = *(double *)(a2 + 76) - *(double *)(a1 + 892);
    if (v4 < 3.0)
      sub_100524950(a1 + 1080, v4);
    if ((sub_1004CA4F0(a1 + 1080) & 1) == 0
      && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 96))(*(_QWORD *)(a1 + 48)))
    {
      sub_1005249F8(a1 + 1080);
    }
  }
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 816) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 832) = v5;
  v6 = *(_OWORD *)(a2 + 32);
  v7 = *(_OWORD *)(a2 + 48);
  v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 880) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 896) = v8;
  *(_OWORD *)(a1 + 848) = v6;
  *(_OWORD *)(a1 + 864) = v7;
  result = *(__n128 *)(a2 + 96);
  v10 = *(_OWORD *)(a2 + 112);
  v11 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 956) = *(_OWORD *)(a2 + 140);
  *(_OWORD *)(a1 + 928) = v10;
  *(_OWORD *)(a1 + 944) = v11;
  *(__n128 *)(a1 + 912) = result;
  return result;
}

double sub_1005907B4(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)&result = sub_1005906E0(a1 - 32, a2).n128_u64[0];
  return result;
}

void sub_1005907BC(uint64_t a1, int a2, int a3, uint64_t a4)
{
  _QWORD v8[6];
  int v9;
  int v10;

  ++*(_DWORD *)(a1 + 356);
  sub_100201040(a1);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 152) + 88))(*(_QWORD *)(a1 + 152), a4);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100590864;
  v8[3] = &unk_102145888;
  v9 = a2;
  v10 = a3;
  v8[4] = a1;
  v8[5] = a4;
  sub_100200A5C(a1, 2u, (uint64_t)v8);
  sub_100200E2C(a1);
}

uint64_t sub_100590864(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = sub_100201404(*a2);
  sub_100200CD0(v4, v5);
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, *(unsigned int *)(a1 + 48), *(unsigned int *)(a1 + 52), *(_QWORD *)(a1 + 40));
}

void sub_1005908B8(uint64_t a1, int a2, int a3, uint64_t a4)
{
  sub_1005907BC(a1 - 32, a2, a3, a4);
}

uint64_t sub_1005908C0(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  const char *v5;
  int v6;
  const char *v7;
  uint64_t v8;
  float v9;
  _DWORD v11[2];
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;

  ++*(_DWORD *)(a1 + 340);
  if (*(unsigned __int8 *)(a1 + 217) != *(unsigned __int8 *)(a2 + 9))
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021459F8);
    v4 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
    {
      v5 = "Connected";
      v6 = *(unsigned __int8 *)(a1 + 217);
      if (*(_BYTE *)(a2 + 9))
        v7 = "Connected";
      else
        v7 = "Disconnected";
      v11[0] = 68289539;
      if (!v6)
        v5 = "Disconnected";
      v11[1] = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2081;
      v15 = v7;
      v16 = 2081;
      v17 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Battery changed state\", \"oldBatteryState\":%{private, location:escape_only}s, \"newBatteryState\":%{private, location:escape_only}s}", (uint8_t *)v11, 0x26u);
    }
  }
  v8 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 224) = v8;
  v9 = *(double *)(a1 + 208);
  sub_100524A04(a1 + 1080, *(unsigned __int8 *)(a1 + 217), v9);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 136) + 88))(*(_QWORD *)(a1 + 136), a1 + 208);
}

void sub_100590A38(uint64_t a1, int a2)
{
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  NSObject *v9;
  int v10;
  NSObject *v11;
  int v12;
  int v13;
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  int v18;

  ++*(_DWORD *)(a1 + 344);
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021459F8);
  v4 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    v13 = 68289282;
    v14 = 0;
    v15 = 2082;
    v16 = "";
    v17 = 1026;
    v18 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"onThermalStatusNotification\", \"thermalLevel\":%{public}d}", (uint8_t *)&v13, 0x18u);
  }
  v5 = *(unsigned __int8 *)(a1 + 188);
  v6 = *(unsigned __int8 *)(a1 + 189);
  *(_DWORD *)(a1 + 192) = a2;
  v7 = *(_DWORD *)(a1 + 196);
  if (v7 <= a2)
  {
    v8 = 0;
    *(_BYTE *)(a1 + 189) = 0;
    if (v7 >= a2)
      goto LABEL_11;
    v8 = 0;
    *(_BYTE *)(a1 + 188) = 0;
  }
  else
  {
    if (*(_DWORD *)(a1 + 200) < a2)
      return;
    *(_WORD *)(a1 + 188) = 257;
    v8 = 1;
  }
  if (v5 != v8)
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021459F8);
    v9 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
    {
      v10 = *(unsigned __int8 *)(a1 + 188);
      v13 = 68289283;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 1025;
      v18 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"thermal (low cpu tasks) transition\", \"acceptable\":%{private}hhd}", (uint8_t *)&v13, 0x18u);
    }
    if (v6 == *(unsigned __int8 *)(a1 + 189))
      goto LABEL_22;
    goto LABEL_18;
  }
LABEL_11:
  if (v6 != v8)
  {
LABEL_18:
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021459F8);
    v11 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
    {
      v12 = *(unsigned __int8 *)(a1 + 189);
      v13 = 68289283;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 1025;
      v18 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"thermal (high cpu tasks) transition\", \"acceptable\":%{private}hhd}", (uint8_t *)&v13, 0x18u);
    }
LABEL_22:
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  }
}

uint64_t sub_100590CD8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 184);
}

uint64_t sub_100590CE0(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  int v4;
  const char *v5;
  NSObject *v6;
  os_log_type_t v7;
  uint32_t v8;
  int v9;
  uint64_t v10;
  int v11;
  NSObject *v12;
  uint64_t v13;
  int v14;
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  int v19;

  if (*(int *)(a1 + 192) >= 10)
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021459F8);
    v2 = qword_1022A0208;
    result = os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO);
    if ((_DWORD)result)
    {
      v4 = *(_DWORD *)(a1 + 192);
      v14 = 68289283;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 1025;
      v19 = v4;
      v5 = "{\"msg%{public}.0s\":\"thermal level is too high - no network request\", \"thermalLevel\":%{private}d}";
      v6 = v2;
      v7 = OS_LOG_TYPE_INFO;
      v8 = 24;
LABEL_23:
      _os_log_impl((void *)&_mh_execute_header, v6, v7, v5, (uint8_t *)&v14, v8);
      return 0;
    }
    return result;
  }
  v9 = *(_DWORD *)(a1 + 232);
  if (v9 == 1)
  {
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 224))(a1);
    if (v11)
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021459F8);
      v12 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
      {
        v14 = 68289026;
        v15 = 0;
        v16 = 2082;
        v17 = "";
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"currently have active or held calls - no network requests over cellular\"}", (uint8_t *)&v14, 0x12u);
      }
    }
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 312))(*(_QWORD *)(a1 + 48)) != 5)
      return v11 ^ 1u;
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021459F8);
    v13 = qword_1022A0208;
    result = os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO);
    if ((_DWORD)result)
    {
      v14 = 68289026;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v5 = "{\"msg%{public}.0s\":\"currently roaming - no network requests over cellular\"}";
      v6 = v13;
      v7 = OS_LOG_TYPE_INFO;
      goto LABEL_22;
    }
  }
  else
  {
    if (v9)
      return 1;
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021459F8);
    v10 = qword_1022A0208;
    result = os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG);
    if ((_DWORD)result)
    {
      v14 = 68289026;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v5 = "{\"msg%{public}.0s\":\"no data available - no network requests\"}";
      v6 = v10;
      v7 = OS_LOG_TYPE_DEBUG;
LABEL_22:
      v8 = 18;
      goto LABEL_23;
    }
  }
  return result;
}

void sub_100590FC4(uint64_t a1, double a2)
{
  double v2;
  uint64_t v3;
  const char *v4;
  NSObject *v6;
  os_log_type_t v7;
  uint32_t v8;
  double v9;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  double v19;
  __int16 v20;
  uint64_t v21;

  v2 = a2;
  if (*(double *)(a1 + 976) == a2)
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021459F8);
    v3 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      v14 = 68289283;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2049;
      v19 = v2;
      v4 = "{\"msg%{public}.0s\":\"#uploadTimer already set to this time\", \"uploadTimerFireTime_s\":\"%{private}.09f\"}";
LABEL_11:
      v6 = v3;
      v7 = OS_LOG_TYPE_DEBUG;
LABEL_12:
      v8 = 28;
LABEL_13:
      _os_log_impl((void *)&_mh_execute_header, v6, v7, v4, (uint8_t *)&v14, v8);
    }
  }
  else if (*(_BYTE *)(a1 + 973))
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021459F8);
    v3 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      v14 = 68289283;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2049;
      v19 = v2;
      v4 = "{\"msg%{public}.0s\":\"#uploadTimer locked, ignoring timer update request\", \"uploadTimerFireTime_s\":\"%{private}.09f\"}";
      goto LABEL_11;
    }
  }
  else if (*(_BYTE *)(a1 + 257))
  {
    v9 = *(double *)(a1 + 984);
    if (v9 != 1.79769313e308 && v9 + 3.0 > v2)
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021459F8);
      v11 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
      {
        v14 = 68289539;
        v15 = 0;
        v16 = 2082;
        v17 = "";
        v18 = 2049;
        v19 = v2;
        v20 = 2049;
        v21 = 0x4008000000000000;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#uploadTimer fired twice quickly, adding delay\", \"uploadTimerFireTime_s\":\"%{private}.09f\", \"uploadDelay_s\":\"%{private}.09f\"}", (uint8_t *)&v14, 0x26u);
      }
      v2 = *(double *)(a1 + 984) + 3.0;
    }
    (*(void (**)(_QWORD, double))(**(_QWORD **)(a1 + 1056) + 24))(*(_QWORD *)(a1 + 1056), v2);
    *(double *)(a1 + 976) = v2;
    if (v2 == 1.79769313e308)
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021459F8);
      v12 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
      {
        v14 = 68289026;
        v15 = 0;
        v16 = 2082;
        v17 = "";
        v4 = "{\"msg%{public}.0s\":\"#uploadTimer disabled\"}";
        v6 = v12;
        v7 = OS_LOG_TYPE_DEFAULT;
        v8 = 18;
        goto LABEL_13;
      }
    }
    else
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021459F8);
      v13 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
      {
        v14 = 68289283;
        v15 = 0;
        v16 = 2082;
        v17 = "";
        v18 = 2049;
        v19 = v2;
        v4 = "{\"msg%{public}.0s\":\"#uploadTimer fire date set\", \"uploadTimerFireTime_s\":\"%{private}.09f\"}";
        v6 = v13;
        v7 = OS_LOG_TYPE_DEFAULT;
        goto LABEL_12;
      }
    }
  }
  else
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021459F8);
    v3 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      v14 = 68289283;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2049;
      v19 = v2;
      v4 = "{\"msg%{public}.0s\":\"Upload requirements not met, ignoring #uploadTimer update request\", \"uploadTimerFire"
           "Time_s\":\"%{private}.09f\"}";
      goto LABEL_11;
    }
  }
}

double sub_1005913DC(uint64_t a1)
{
  double *v1;
  double v2;
  double *v3;
  double *v4;
  BOOL v5;
  NSObject *v6;
  char *v8;
  int v9;
  double v10;
  uint8_t buf[4];
  double v12;

  v1 = *(double **)(a1 + 112);
  if (v1 == (double *)(a1 + 120))
  {
    v2 = 1.79769313e308;
  }
  else
  {
    v2 = 1.79769313e308;
    do
    {
      if (v1[5] < v2)
        v2 = v1[5];
      v3 = (double *)*((_QWORD *)v1 + 1);
      if (v3)
      {
        do
        {
          v4 = v3;
          v3 = *(double **)v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          v4 = (double *)*((_QWORD *)v1 + 2);
          v5 = *(_QWORD *)v4 == (_QWORD)v1;
          v1 = v4;
        }
        while (!v5);
      }
      v1 = v4;
    }
    while (v4 != (double *)(a1 + 120));
  }
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021459F8);
  v6 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134217984;
    v12 = v2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "getNextUploadTime: min time: %f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021459F8);
    v9 = 134217984;
    v10 = v2;
    v8 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 1, "getNextUploadTime: min time: %f", COERCE_DOUBLE(&v9));
    sub_100512490("Generic", 1, 0, 2, "CFAbsoluteTime CLHarvestController::getNextUploadTime()", "%s\n", v8);
    if (v8 != (char *)buf)
      free(v8);
  }
  return v2;
}

void sub_1005915EC(uint64_t a1)
{
  int v2;
  double v3;
  uint64_t v4;
  NSObject *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  _OWORD *v16;
  __int128 v17;
  int v18;
  __int128 v19;
  _BYTE v20[32];
  _BYTE v21[24];
  _BYTE v22[24];
  __int128 v23;
  __int128 v24;

  v2 = *(unsigned __int8 *)(a1 + 257);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v4 = 368;
  if (!v2)
    v4 = 376;
  *(double *)(a1 + v4) = v3 - *(double *)(a1 + 384) + *(double *)(a1 + v4);
  *(double *)(a1 + 384) = v3;
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021459F8);
  v5 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_DWORD *)(a1 + 336);
    v7 = *(_DWORD *)(a1 + 340);
    v8 = *(_DWORD *)(a1 + 344);
    v9 = *(_DWORD *)(a1 + 348);
    v10 = *(_DWORD *)(a1 + 352);
    v11 = *(_DWORD *)(a1 + 356);
    v12 = *(_DWORD *)(a1 + 360);
    v13 = *(_QWORD *)(a1 + 368);
    v14 = *(_QWORD *)(a1 + 376);
    *(_QWORD *)v20 = 68291331;
    *(_WORD *)&v20[8] = 2082;
    *(_QWORD *)&v20[10] = "";
    *(_WORD *)&v20[18] = 1025;
    *(_DWORD *)&v20[20] = v6;
    *(_WORD *)&v20[24] = 1025;
    *(_DWORD *)&v20[26] = v7;
    *(_WORD *)&v20[30] = 1025;
    *(_DWORD *)v21 = v8;
    *(_WORD *)&v21[4] = 1025;
    *(_DWORD *)&v21[6] = v9;
    *(_WORD *)&v21[10] = 1025;
    *(_DWORD *)&v21[12] = v10;
    *(_WORD *)&v21[16] = 1025;
    *(_DWORD *)&v21[18] = v11;
    *(_WORD *)&v21[22] = 1025;
    *(_DWORD *)v22 = v12;
    *(_WORD *)&v22[4] = 2049;
    *(_QWORD *)&v22[6] = v13;
    *(_WORD *)&v22[14] = 2049;
    *(_QWORD *)&v22[16] = v14;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"MainHarvesterMetrics\", \"reachabilityNotifications\":%{private}d, \"batteryNotifications\":%{private}d, \"thermalNotifications\":%{private}d, \"locationNotifications\":%{private}d, \"rawsGpsNotifications\":%{private}d, \"validatedGpsNotifications\":%{private}d, \"managerNotifications\":%{private}d, \"durationMinimumUploadRequirementsMet\":\"%{private}f\", \"durationMinimumUploadRequirementsNotMet\":\"%{private}f\"}", v20, 0x50u);
  }
  *(double *)(a1 + 280) = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  sub_10058C888(a1, (uint64_t)v20);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)v20;
  v15 = (void **)(a1 + 288);
  if (*(char *)(a1 + 311) < 0)
    operator delete(*v15);
  *(_OWORD *)v15 = *(_OWORD *)&v20[16];
  *(_QWORD *)(a1 + 304) = *(_QWORD *)v21;
  v21[7] = 0;
  v20[16] = 0;
  v16 = (_OWORD *)(a1 + 312);
  if (*(char *)(a1 + 335) < 0)
  {
    operator delete(*(void **)(a1 + 312));
    v18 = v21[7];
    *v16 = *(_OWORD *)&v21[8];
    *(_QWORD *)(a1 + 328) = *(_QWORD *)v22;
    v22[7] = 0;
    v21[8] = 0;
    v19 = v23;
    *(_OWORD *)(a1 + 336) = *(_OWORD *)&v22[8];
    *(_OWORD *)(a1 + 352) = v19;
    *(_OWORD *)(a1 + 368) = v24;
    if (v18 < 0)
      operator delete(*(void **)&v20[16]);
  }
  else
  {
    *v16 = *(_OWORD *)&v21[8];
    *(_QWORD *)(a1 + 328) = *(_QWORD *)v22;
    v17 = v23;
    *(_OWORD *)(a1 + 336) = *(_OWORD *)&v22[8];
    *(_OWORD *)(a1 + 352) = v17;
    *(_OWORD *)(a1 + 368) = v24;
  }
}

double sub_100591838(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  double result;

  v2 = a1 + 836;
  v3 = *(_QWORD **)(a1 + 64);
  v4 = (_QWORD *)(a1 + 72);
  if (v3 != (_QWORD *)(a1 + 72))
  {
    do
    {
      sub_100D058B4((unsigned int *)v3[5]);
      v5 = (_QWORD *)v3[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v3[2];
          _ZF = *v6 == (_QWORD)v3;
          v3 = v6;
        }
        while (!_ZF);
      }
      v3 = v6;
    }
    while (v6 != v4);
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 152) + 64))(*(_QWORD *)(a1 + 152));
  *(_DWORD *)(a1 + 816) = 0xFFFF;
  *(_QWORD *)(a1 + 828) = 0;
  *(_QWORD *)(a1 + 820) = 0;
  result = -1.0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)v2 = xmmword_101BAFC90;
  *(_OWORD *)(v2 + 16) = _Q1;
  *(_OWORD *)(v2 + 32) = _Q1;
  *(_OWORD *)(v2 + 48) = _Q1;
  *(_DWORD *)(a1 + 900) = 0;
  *(_QWORD *)(a1 + 904) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 920) = 0;
  *(_QWORD *)(a1 + 912) = 0;
  *(_DWORD *)(a1 + 928) = 0;
  *(_QWORD *)(v2 + 96) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 940) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 944) = 0;
  *(_QWORD *)(a1 + 960) = 0;
  *(_QWORD *)(a1 + 952) = 0;
  *(_BYTE *)(a1 + 968) = 0;
  return result;
}

BOOL sub_10059191C(uint64_t a1)
{
  return *(_DWORD *)(a1 + 664) == 6;
}

BOOL sub_10059192C(uint64_t a1)
{
  return *(_DWORD *)(a1 + 664) == 8;
}

BOOL sub_10059193C(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 664);
  return v1 == 4 || v1 == 41;
}

void sub_100591954(double *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  _DWORD v10[2];
  __int16 v11;
  const char *v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;

  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021459F8);
  v2 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((_QWORD *)a1 + 124);
    v4 = *((_QWORD *)a1 + 31);
    v10[0] = 68289539;
    v10[1] = 0;
    v11 = 2082;
    v12 = "";
    v13 = 2049;
    v14 = v3;
    v15 = 2049;
    v16 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#pruneTimer fired\", \"lastPruneTime_s\":\"%{private}.09f\", \"maxHarvestAge_s\":\"%{private}.09f\"}", (uint8_t *)v10, 0x26u);
  }
  a1[124] = (*(double (**)(double *))(*(_QWORD *)a1 + 64))(a1);
  v5 = (_QWORD *)*((_QWORD *)a1 + 8);
  v6 = a1 + 9;
  if (v5 != v6)
  {
    do
    {
      sub_100D05770((unsigned int *)v5[5]);
      v7 = (_QWORD *)v5[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v5[2];
          v9 = *v8 == (_QWORD)v5;
          v5 = v8;
        }
        while (!v9);
      }
      v5 = v8;
    }
    while (v8 != v6);
  }
}

void sub_100591AAC(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  int v4;
  int v5;
  __int16 v6;
  const char *v7;

  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021459F8);
  v2 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
  {
    v4 = 68289026;
    v5 = 0;
    v6 = 2082;
    v7 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#uploadTimer fired\"}", (uint8_t *)&v4, 0x12u);
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) & 1) != 0)
  {
    sub_10058CD64(a1);
  }
  else
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021459F8);
    v3 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
    {
      v4 = 68289026;
      v5 = 0;
      v6 = 2082;
      v7 = "";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#uploadTimer upload requirements not met, skipping upload\"}", (uint8_t *)&v4, 0x12u);
    }
  }
}

void sub_100591C2C(uint64_t a1, signed int a2, double a3)
{
  uint64_t v3;
  uint64_t v6;
  signed int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  const char *v14;
  NSObject *v15;
  uint32_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  unsigned int v21;
  uint8_t buf[8];
  __int16 v23;
  const char *v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  double v28;
  __int16 v29;
  double v30;

  v21 = a2;
  v3 = *(_QWORD *)(a1 + 72);
  if (!v3)
    goto LABEL_11;
  v6 = a1 + 72;
  do
  {
    v7 = *(_DWORD *)(v3 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v3;
    else
      v9 = (uint64_t *)(v3 + 8);
    if (!v8)
      v6 = v3;
    v3 = *v9;
  }
  while (*v9);
  if (v6 == a1 + 72 || *(_DWORD *)(v6 + 32) > a2)
  {
LABEL_11:
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021459F8);
    v10 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      v23 = 2082;
      v24 = "";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unknown SubHarvester notifying of #uploadTimer fire date.\"}", buf, 0x12u);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021459F8);
    }
    v11 = qword_1022A0208;
    if (os_signpost_enabled((os_log_t)qword_1022A0208))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      v23 = 2082;
      v24 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Unknown SubHarvester notifying of #uploadTimer fire date.", "{\"msg%{public}.0s\":\"Unknown SubHarvester notifying of #uploadTimer fire date.\"}", buf, 0x12u);
    }
    return;
  }
  *(_QWORD *)buf = &v21;
  if (*((double *)sub_100041CE0((uint64_t **)(a1 + 112), (int *)&v21, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 5) != a3)
  {
    *(_QWORD *)buf = &v21;
    *((double *)sub_100041CE0((uint64_t **)(a1 + 112), (int *)&v21, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 5) = a3;
    if (a3 == 1.79769313e308)
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021459F8);
      v13 = qword_1022A0208;
      if (!os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
        goto LABEL_34;
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v23 = 2082;
      v24 = "";
      v25 = 2050;
      v26 = v21;
      v14 = "{\"msg%{public}.0s\":\"#uploadTimer invalid time reported\", \"subHarvester\":%{public, location:CLSubHarves"
            "terIdentifier}lld}";
      v15 = v13;
      v16 = 28;
    }
    else
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021459F8);
      v17 = qword_1022A0208;
      if (!os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
        goto LABEL_34;
      v18 = v21;
      v19 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
      *(_DWORD *)buf = 68289795;
      *(_DWORD *)&buf[4] = 0;
      v23 = 2082;
      v24 = "";
      v25 = 2050;
      v26 = v18;
      v27 = 2049;
      v28 = a3;
      v29 = 2049;
      v30 = a3 - v19;
      v14 = "{\"msg%{public}.0s\":\"#uploadTimer upload time set\", \"subHarvester\":%{public, location:CLSubHarvesterIde"
            "ntifier}lld, \"notifiedAttemptTime_s\":\"%{private}.09f\", \"timeUntilAttempt_s\":\"%{private}.09f\"}";
      v15 = v17;
      v16 = 48;
    }
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, v14, buf, v16);
LABEL_34:
    if (*(_BYTE *)(a1 + 973))
    {
      *(_BYTE *)(a1 + 974) = 1;
    }
    else
    {
      v20 = sub_1005913DC(a1);
      sub_100590FC4(a1, v20);
    }
    return;
  }
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021459F8);
  v12 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    v23 = 2082;
    v24 = "";
    v25 = 2050;
    v26 = v21;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"next attempt time is equal to existing attempt time\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
  }
}

_QWORD *sub_100592064@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  CLKeychainItemWrapper *v4;
  NSString *v5;
  NSDateComponents *v6;
  id v7;
  id v8;
  id v9;
  uint64_t i;
  unsigned __int8 md[20];

  if (!*(_QWORD *)(a1 + 264))
  {
    v4 = -[CLKeychainItemWrapper initWithIdentifier:keyType:]([CLKeychainItemWrapper alloc], "initWithIdentifier:keyType:", CFSTR("HarvesterMetricsUUID"), kSecAttrAccount);
    v5 = -[CLKeychainItemWrapper objectForKey:](v4, "objectForKey:", kSecValueData);
    if (!v5)
    {
      v5 = -[NSUUID UUIDString](+[NSUUID UUID](NSUUID, "UUID"), "UUIDString");
      -[CLKeychainItemWrapper setObject:forKey:](v4, "setObject:forKey:", &__kCFBooleanTrue, kSecAttrIsInvisible);
      -[CLKeychainItemWrapper setObject:forKey:](v4, "setObject:forKey:", kSecAttrAccessibleAlwaysThisDeviceOnly, kSecAttrAccessible);
      -[CLKeychainItemWrapper setObject:forKey:](v4, "setObject:forKey:", v5, kSecValueData);
    }
    *(_QWORD *)(a1 + 264) = v5;

  }
  v6 = -[NSCalendar components:fromDate:](+[NSCalendar currentCalendar](NSCalendar, "currentCalendar"), "components:fromDate:", 12, +[NSDate date](NSDate, "date"));
  -[NSDateComponents setMonth:](v6, "setMonth:", -[NSDateComponents month](v6, "month") > 6);
  v7 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%@%ld%ld"), *(_QWORD *)(a1 + 264), -[NSDateComponents year](v6, "year"), -[NSDateComponents month](v6, "month"));
  v8 = objc_msgSend(v7, "dataUsingEncoding:", 4);

  CC_SHA1(objc_msgSend(v8, "bytes"), (CC_LONG)objc_msgSend(v8, "length"), md);
  v9 = +[NSMutableString string](NSMutableString, "string");
  for (i = 0; i != 20; ++i)
    objc_msgSend(v9, "appendFormat:", CFSTR("%02x"), md[i]);
  return sub_1015A2E04(a2, (char *)objc_msgSend(v9, "UTF8String"));
}

void sub_100592290(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  NSObject *v8;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  _QWORD v12[5];
  int v13;
  int v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  const char *v18;

  if (*a4)
    return;
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021459F8);
  v8 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289026;
    v16 = 0;
    v17 = 2082;
    v18 = "";
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"data protection is becoming re-enabled\"}", buf, 0x12u);
  }
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10059259C;
  v12[3] = &unk_1021458A8;
  v13 = a2;
  v14 = a3;
  v12[4] = a4;
  sub_100200A5C(a1, 9u, (uint64_t)v12);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) & 1) != 0)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1056) + 16))(*(_QWORD *)(a1 + 1056));
    if ((*(double (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1) - *(double *)(a1 + 1008) >= *(double *)(a1 + 1000))
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021459F8);
      v11 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68289026;
        v16 = 0;
        v17 = 2082;
        v18 = "";
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"starting DataProtection-initiated upload\"}", buf, 0x12u);
      }
      sub_10058CD64(a1);
    }
    else
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021459F8);
      v9 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68289026;
        v16 = 0;
        v17 = 2082;
        v18 = "";
        v10 = "{\"msg%{public}.0s\":\"uploaded too recently, skipping DataProtection-initiated upload\"}";
LABEL_17:
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, v10, buf, 0x12u);
      }
    }
  }
  else
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021459F8);
    v9 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289026;
      v16 = 0;
      v17 = 2082;
      v18 = "";
      v10 = "{\"msg%{public}.0s\":\"upload requirements not met, skipping DataProtection-initiated upload\"}";
      goto LABEL_17;
    }
  }
}

uint64_t sub_10059259C(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)*a2 + 48))(*a2, *(unsigned int *)(a1 + 40), a1 + 44, *(_QWORD *)(a1 + 32));
}

void sub_1005925BC(_BYTE *a1, int a2, int a3, uint64_t a4)
{
  _OWORD *v8;
  NSObject *v9;
  int v10;
  int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  double v18;
  BOOL v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  BOOL v33;
  int v34;
  uint64_t v35;
  _QWORD v36[5];
  int v37;
  int v38;
  uint8_t buf[4];
  int v40;
  __int16 v41;
  const char *v42;
  __int16 v43;
  int v44;
  __int16 v45;
  _BYTE *v46;
  __int16 v47;
  int v48;
  __int16 v49;
  uint64_t v50;

  if (a3 == 2)
  {
    sub_10058FF60((uint64_t)a1, *(unsigned __int8 *)(a4 + 48));
    v20 = (uint64_t)(a1 + 1080);
    if (a1[802])
      sub_1005245E4(v20);
    else
      sub_100524790(v20);
    *(_OWORD *)(a1 + 392) = *(_OWORD *)a4;
    v21 = *(_OWORD *)(a4 + 16);
    v22 = *(_OWORD *)(a4 + 32);
    v23 = *(_OWORD *)(a4 + 64);
    *(_OWORD *)(a1 + 440) = *(_OWORD *)(a4 + 48);
    *(_OWORD *)(a1 + 456) = v23;
    *(_OWORD *)(a1 + 408) = v21;
    *(_OWORD *)(a1 + 424) = v22;
    v24 = *(_OWORD *)(a4 + 80);
    v25 = *(_OWORD *)(a4 + 96);
    v26 = *(_OWORD *)(a4 + 112);
    *((_QWORD *)a1 + 65) = *(_QWORD *)(a4 + 128);
    *(_OWORD *)(a1 + 488) = v25;
    *(_OWORD *)(a1 + 504) = v26;
    *(_OWORD *)(a1 + 472) = v24;
    *((_QWORD *)a1 + 49) = *((_QWORD *)a1 + 60);
    v27 = *(_OWORD *)(a4 + 80);
    v28 = *(_OWORD *)(a4 + 96);
    v29 = *(_OWORD *)(a4 + 112);
    *((_QWORD *)a1 + 82) = *(_QWORD *)(a4 + 128);
    *((_OWORD *)a1 + 39) = v28;
    *((_OWORD *)a1 + 40) = v29;
    *((_OWORD *)a1 + 38) = v27;
    v30 = *(_OWORD *)(a4 + 16);
    v31 = *(_OWORD *)(a4 + 32);
    v32 = *(_OWORD *)(a4 + 64);
    *((_OWORD *)a1 + 36) = *(_OWORD *)(a4 + 48);
    *((_OWORD *)a1 + 37) = v32;
    *((_OWORD *)a1 + 34) = v30;
    *((_OWORD *)a1 + 35) = v31;
    *((_OWORD *)a1 + 33) = *(_OWORD *)a4;
    goto LABEL_26;
  }
  if (a3 == 3)
  {
    if (*((_DWORD *)a1 + 166) == *(_DWORD *)a4)
      return;
    v8 = a1 + 664;
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021459F8);
    v9 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68290051;
      v40 = 0;
      v41 = 2082;
      v42 = "";
      v43 = 1040;
      v44 = 136;
      v45 = 2097;
      v46 = a1 + 664;
      v47 = 1040;
      v48 = 136;
      v49 = 2097;
      v50 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"dominant motion activity changed\", \"oldDominantActivity\":%{private, location:CLMotionActivity}.*P, \"newDominantActivity\":%{private, location:CLMotionActivity}.*P}", buf, 0x32u);
    }
    v10 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 136))(a1);
    v11 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 144))(a1);
    *v8 = *(_OWORD *)a4;
    v12 = *(_OWORD *)(a4 + 64);
    v14 = *(_OWORD *)(a4 + 16);
    v13 = *(_OWORD *)(a4 + 32);
    *(_OWORD *)(a1 + 712) = *(_OWORD *)(a4 + 48);
    *(_OWORD *)(a1 + 728) = v12;
    *(_OWORD *)(a1 + 680) = v14;
    *(_OWORD *)(a1 + 696) = v13;
    v16 = *(_OWORD *)(a4 + 96);
    v15 = *(_OWORD *)(a4 + 112);
    v17 = *(_OWORD *)(a4 + 80);
    *((_QWORD *)a1 + 99) = *(_QWORD *)(a4 + 128);
    *(_OWORD *)(a1 + 760) = v16;
    *(_OWORD *)(a1 + 776) = v15;
    *(_OWORD *)(a1 + 744) = v17;
    v18 = (*(double (**)(_BYTE *))(*(_QWORD *)a1 + 64))(a1);
    if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)a1 + 136))(a1))
    {
      v19 = 1;
    }
    else
    {
      if (!v10)
        goto LABEL_17;
      v19 = v18 != 0.0;
    }
    a1[800] = v19;
LABEL_17:
    if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)a1 + 144))(a1))
    {
      v33 = 1;
    }
    else
    {
      if (!v11)
      {
LABEL_22:
        v34 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 128))(a1);
        v35 = (uint64_t)(a1 + 1080);
        if (v34)
          sub_100524278(v35);
        else
          sub_100524424(v35);
        (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 40))(a1);
        goto LABEL_26;
      }
      v33 = v18 != 0.0;
    }
    a1[801] = v33;
    goto LABEL_22;
  }
LABEL_26:
  v36[0] = _NSConcreteStackBlock;
  v36[1] = 3221225472;
  v36[2] = sub_1005928E4;
  v36[3] = &unk_1021458A8;
  v37 = a2;
  v38 = a3;
  v36[4] = a4;
  sub_100200A5C((uint64_t)a1, 3u, (uint64_t)v36);
}

uint64_t sub_1005928E4(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)*a2 + 32))(*a2, *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44), *(_QWORD *)(a1 + 32));
}

void sub_100592900(unsigned __int8 *a1, int a2, int a3, int *a4)
{
  NSObject *v8;
  int v9;
  _QWORD v10[5];
  int v11;
  int v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  int v18;

  switch(a3)
  {
    case 6:
      sub_1005902D8((uint64_t)a1, a4 + 1);
      break;
    case 7:
      sub_1005908C0((uint64_t)a1, (uint64_t)a4);
      break;
    case 8:
      a1[184] = *(_BYTE *)a4;
      break;
    case 13:
      sub_100590A38((uint64_t)a1, *a4);
      break;
    case 15:
      a1[256] = *(_BYTE *)a4;
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021459F8);
      v8 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
      {
        v9 = a1[256];
        *(_DWORD *)buf = 68289283;
        v14 = 0;
        v15 = 2082;
        v16 = "";
        v17 = 1025;
        v18 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"battery save mode state update\", \"batterySaverEnabled\":%{private}hhd}", buf, 0x18u);
      }
      (*(void (**)(unsigned __int8 *))(*(_QWORD *)a1 + 40))(a1);
      break;
    default:
      break;
  }
  sub_10058CF7C(a1);
  sub_100201040((uint64_t)a1);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100592B00;
  v10[3] = &unk_1021458A8;
  v11 = a2;
  v12 = a3;
  v10[4] = a4;
  sub_100200A5C((uint64_t)a1, 0, (uint64_t)v10);
  sub_100200E2C((uint64_t)a1);
}

uint64_t sub_100592B00(uint64_t a1, uint64_t *a2)
{
  return sub_100D04BD8(*a2, *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44), *(_QWORD *)(a1 + 32));
}

void sub_100592B14(uint64_t a1, uint64_t a2, void *a3)
{
  NSObject *v6;
  _QWORD v7[7];
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  _BOOL4 v13;
  __int16 v14;
  id v15;

  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021459F8);
  v6 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    objc_msgSend(a3, "type");
    *(_DWORD *)buf = 68289539;
    v9 = 0;
    v10 = 2082;
    v11 = "";
    v12 = 1025;
    v13 = a3 != 0;
    v14 = 2049;
    v15 = objc_msgSend(a3, "type");
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"onVisit\", \"validLocationOfInterest\":%{private}hhd, \"locationOfInterestType\":%{private, location:RTLocationOfInterestType}lld}", buf, 0x22u);
  }
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100592C78;
  v7[3] = &unk_1021458F0;
  v7[5] = a3;
  v7[6] = a1;
  v7[4] = a2;
  sub_100200A5C(a1, 7u, (uint64_t)v7);
}

uint64_t sub_100592C78(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;

  v4 = a1[6];
  v5 = sub_100201404(*a2);
  sub_100200CD0(v4, v5);
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)*a2 + 64))(*a2, a1[4], a1[5]);
}

void sub_100592CC8(uint64_t a1, int a2, _QWORD *a3)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v9[5];
  std::__shared_weak_count *v10;
  int v11;

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3321888768;
  v9[2] = sub_100592D98;
  v9[3] = &unk_102145910;
  v11 = a2;
  v3 = (std::__shared_weak_count *)a3[1];
  v9[4] = *a3;
  v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  sub_100200A5C(a1, 6u, (uint64_t)v9);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_100592D84(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

void sub_100592D98(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v3 = *a2;
  v4 = *(unsigned int *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 32);
  v5 = *(std::__shared_weak_count **)(a1 + 40);
  v12 = v6;
  v13 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v3 + 56))(v3, v4, &v12);
  v9 = v13;
  if (v13)
  {
    v10 = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_100592E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100592E40(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_100592E64(uint64_t a1)
{
  return sub_100261F44(a1 + 32);
}

uint64_t sub_100592E6C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 408))(*(_QWORD *)(a1 + 48));
}

uint64_t sub_100592E7C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 104))(*(_QWORD *)(a1 + 48));
}

uint64_t sub_100592E8C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 188);
}

uint64_t sub_100592E94(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 256);
}

uint64_t sub_100592E9C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 72))(*(_QWORD *)(a1 + 48));
}

void sub_100592EAC(id a1)
{
  qword_1022A0208 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

void sub_100592ED8(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100592F04(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_100592F30(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_100592F30(a1, *a2);
    sub_100592F30(a1, a2[1]);
    sub_100261F44((uint64_t)(a2 + 5));
    operator delete(a2);
  }
}

void sub_100592F78(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = sub_100067AC4(v4 - 40);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *sub_100592FE8(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_100593090(a1, a2);
    v6 = a1[1];
    v7 = 5 * a2;
    v8 = v6 + 40 * a2;
    v9 = 8 * v7;
    do
    {
      sub_1005930E0(v6, a3);
      v6 += 40;
      v9 -= 40;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_100593070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_100592F78(&a9);
  _Unwind_Resume(a1);
}

char *sub_100593090(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x666666666666667)
    sub_100259694();
  result = (char *)sub_100357184((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[40 * v4];
  return result;
}

uint64_t sub_1005930E0(uint64_t a1, uint64_t a2)
{
  unsigned int *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_10012E444(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned int **)(a2 + 16); i; i = *(unsigned int **)i)
    sub_100271BA8(a1, i + 4, i + 4);
  return a1;
}

void sub_10059313C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100067AC4(v1);
  _Unwind_Resume(a1);
}

void sub_100593154(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v1;
    if ((void *)v3 != v1)
    {
      do
        v3 = sub_100067AC4(v3 - 40);
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_1005931B0(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_100261F44((uint64_t)v2 + 40);
    operator delete(v2);
  }
}

uint64_t *sub_1005931F4(_QWORD *a1, unsigned int *a2)
{
  uint64_t *result;

  result = sub_100270BB8(a1, a2);
  if (result)
  {
    sub_1002123D8(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t *sub_100593228(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)sub_10019C424((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    sub_1005932BC((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000145B0(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

_BYTE *sub_1005932BC@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  _BYTE *result;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = v6 + 32;
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    result = sub_100115CE4(result, *(void **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
    *(_OWORD *)result = v9;
  }
  v6[56] = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_100593344(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_100279070(v3, v2);
  _Unwind_Resume(a1);
}

void sub_100593394()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101BB6E20;
      v1[3] = unk_101BB6E30;
      v1[4] = xmmword_101BB6E40;
      v1[0] = xmmword_101BB6E00;
      v1[1] = unk_101BB6E10;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_100593468(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

uint64_t sub_100593480()
{
  uint64_t v0;
  __int128 v2;
  _QWORD v3[3];
  _QWORD v4[3];
  _QWORD v5[3];
  _QWORD v6[3];
  __int128 v7;

  sub_1015A2E04(&v2, "com.apple.locationd.bundle-/System/Library/LocationBundles/AppGenius.bundle");
  sub_1015A2E04(v3, "com.apple.locationd.bundle-/System/Library/LocationBundles/Traffic.bundle");
  sub_1015A2E04(v4, "com.apple.locationd.bundle-/System/Library/LocationBundles/AltimeterHarvest.bundle");
  sub_1015A2E04(v5, "com.apple.locationd.bundle-/System/Library/LocationBundles/TraceHarvest.bundle");
  sub_1015A2E04(v6, "com.apple.locationd.bundle-/System/Library/LocationBundles/IonosphereHarvest.bundle");
  qword_102301CC8 = 0;
  qword_102301CD0 = 0;
  qword_102301CD8 = 0;
  qword_102301CC8 = (uint64_t)operator new(0x78uLL);
  qword_102301CD0 = qword_102301CC8;
  qword_102301CD8 = qword_102301CC8 + 120;
  v0 = 0;
  qword_102301CD0 = (uint64_t)sub_10028E070((uint64_t)&qword_102301CD8, &v2, &v7, (char *)qword_102301CC8);
  do
  {
    if (SHIBYTE(v6[v0 + 2]) < 0)
      operator delete((void *)v6[v0]);
    v0 -= 3;
  }
  while (v0 != -15);
  return __cxa_atexit((void (*)(void *))sub_1005164BC, &qword_102301CC8, (void *)&_mh_execute_header);
}

void sub_1005935D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  uint64_t v11;
  uint64_t v13;

  qword_102301CD0 = v11;
  sub_100259608(&a9);
  v13 = 0;
  while (1)
  {
    if (*(&a11 + v13 + 119) < 0)
      operator delete(*(void **)(&a11 + v13 + 96));
    v13 -= 24;
    if (v13 == -120)
      _Unwind_Resume(a1);
  }
}

uint64_t sub_10059364C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v5;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  __int128 v10;
  uint64_t v11;
  uint8_t buf[1640];

  v10 = *(_OWORD *)a3;
  v11 = *(_QWORD *)(a3 + 16);
  if ((_DWORD)a2 && !sub_100D878F0(a1))
  {
    if (qword_10229FF40 != -1)
      dispatch_once(&qword_10229FF40, &stru_102145B58);
    v5 = qword_10229FF48;
    if (os_log_type_enabled((os_log_t)qword_10229FF48, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Minimum distance not reached, overriding notification with kCMWorkoutLocationTypeIndoor", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF40 != -1)
        dispatch_once(&qword_10229FF40, &stru_102145B58);
      v9[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF48, 0, "Minimum distance not reached, overriding notification with kCMWorkoutLocationTypeIndoor", v9, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLIndoorOutdoorDetectorPhone::notifyIndoorOutdoorState(BOOL, const CLIndoorOutdoorProtocol::IndoorOutdoorResult &) const", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    *(_QWORD *)&v10 = 1;
  }
  return sub_100D8798C(a1, a2, &v10);
}

void sub_10059381C(uint64_t a1)
{
  sub_10059386C(a1);
  operator delete();
}

void sub_100593840(id a1)
{
  qword_10229FF48 = (uint64_t)os_log_create("com.apple.locationd.Motion", "IndoorOutdoor");
}

uint64_t sub_10059386C(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_102183E70;
  if (*(char *)(a1 + 639) < 0)
    operator delete(*(void **)(a1 + 616));
  sub_1005938E4(a1 + 512);
  v2 = *(void **)(a1 + 464);
  if (v2)
  {
    *(_QWORD *)(a1 + 472) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 463) < 0)
    operator delete(*(void **)(a1 + 440));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_1005938E4(uint64_t a1)
{
  void *v2;
  void *v3;
  void **v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(_QWORD *)(a1 + 56) = v3;
    operator delete(v3);
  }
  v5 = (void **)(a1 + 24);
  sub_10059394C(&v5);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_10059394C(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        sub_1005939D0((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1005939D0(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;

  v3 = *(void **)(a2 + 32);
  if (v3)
  {
    *(_QWORD *)(a2 + 40) = v3;
    operator delete(v3);
  }
  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v4;
    operator delete(v4);
  }
}

double sub_100593A14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)a1 = &off_102145B88;
  result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  return result;
}

_QWORD *sub_100593A3C(_QWORD *a1)
{
  NSObject *v2;
  void **v3;
  _QWORD *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v9;
  uint8_t *v10;
  void *__p[2];
  char v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  void **v18;
  __int16 v19;
  _QWORD *v20;

  *a1 = &off_102145B88;
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102145C08);
  v2 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 24))(__p, a1);
    v3 = (void **)__p[0];
    if (v12 >= 0)
      v3 = __p;
    v4 = a1 + 3;
    if (*((char *)a1 + 47) < 0)
      v4 = (_QWORD *)*v4;
    *(_DWORD *)buf = 68289538;
    v14 = 0;
    v15 = 2082;
    v16 = "";
    v17 = 2082;
    v18 = v3;
    v19 = 2082;
    v20 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLGnssExtensions,releasing assertion\", \"client\":%{public, location:escape_only}s, \"reason\":%{public, location:escape_only}s}", buf, 0x26u);
    if (v12 < 0)
      operator delete(__p[0]);
  }
  if (a1[10])
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102145C08);
    v5 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#wigo,off,CLGnssExtensions", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_102145C08);
      LOWORD(__p[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "#wigo,off,CLGnssExtensions", __p, 2);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "virtual CLDaemonGnssExtensionsClient::~CLDaemonGnssExtensionsClient()", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    AnalyticsSendEventLazy(CFSTR("com.apple.locationd.position.GNSS.WIGO"), &stru_102145BB0);
    objc_msgSend(*(id *)(a1[10] + 16), "unregister:forNotification:", *(_QWORD *)(a1[10] + 8), 0);
    v6 = a1[10];
    a1[10] = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  else
  {
    a1[10] = 0;
  }
  v7 = a1[9];
  a1[9] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  if (*((char *)a1 + 71) < 0)
    operator delete((void *)a1[6]);
  if (*((char *)a1 + 47) < 0)
    operator delete((void *)a1[3]);
  sub_10008ABA0(a1);
  return a1;
}

void sub_100593D40(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

NSDictionary *__cdecl sub_100593D4C(id a1)
{
  return (NSDictionary *)&off_10221FA98;
}

void sub_100593D5C(_QWORD *a1)
{
  sub_100593A3C(a1);
  operator delete();
}

void sub_100593D80(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  NSObject *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  const char *v12;
  uint8_t *v13;
  std::__shared_weak_count *v14;
  __int16 v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  NSDictionary *v18;
  uint8_t buf[1640];
  _UNKNOWN **v20;
  uint64_t v21;

  v20 = &off_10221B1F8;
  v21 = a2;
  v18 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v21, &v20, 1);
  sub_10059582C("kCLConnectionMessageGnssExtensionsClientError", &v18, &v16);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v14 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
    CLConnection::sendMessage(v3);
    if (v14)
    {
      v6 = (unint64_t *)&v14->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102145C08);
    v8 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "fConnection invalid", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_102145C08);
      v15 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 16, "fConnection invalid", &v15, 2);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 0, "void CLDaemonGnssExtensionsClient::sendErrorMessage(const NSString *) const", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
  }
  v9 = v17;
  if (v17)
  {
    v10 = (unint64_t *)&v17->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_100593FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10059401C(uint64_t a1, CLConnectionMessage **a2)
{
  _QWORD *v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  NSObject *v9;
  CLConnectionMessage *v10;
  CLConnectionMessage *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  CLConnectionMessage *v16[2];
  uint8_t buf[4];
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  uint64_t v24;

  v4 = (_QWORD *)CLConnectionMessage::name(*a2);
  v5 = *((char *)v4 + 23);
  if (v5 < 0)
  {
    if (v4[1] != 40)
    {
LABEL_7:
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_102145C08);
      v6 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
      {
        v7 = CLConnectionMessage::name(*a2);
        if (*(char *)(v7 + 23) >= 0)
          v8 = (const char *)v7;
        else
          v8 = *(const char **)v7;
        *(_DWORD *)buf = 68289282;
        v18 = 0;
        v19 = 2082;
        v20 = "";
        v21 = 2082;
        v22 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,CLGnssExtensions,unrecognized message\", \"message\":%{public, location:escape_only}s}", buf, 0x1Cu);
      }
      return;
    }
    v4 = (_QWORD *)*v4;
  }
  else if (v5 != 40)
  {
    goto LABEL_7;
  }
  if (memcmp(v4, "kCLConnectionMessageGnssExtensionsClient", 0x28uLL))
    goto LABEL_7;
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102145C08);
  v9 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289538;
    v18 = 0;
    v19 = 2082;
    v20 = "";
    v21 = 2082;
    v22 = "kCLConnectionMessageGnssExtensionsClient";
    v23 = 2050;
    v24 = a1;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLGnssExtensions\", \"message\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
  }
  v10 = *a2;
  v11 = a2[1];
  v16[0] = v10;
  v16[1] = v11;
  if (v11)
  {
    v12 = (unint64_t *)((char *)v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  sub_100594278(a1, v16);
  if (v11)
  {
    v14 = (unint64_t *)((char *)v11 + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v11 + 16))(v11);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v11);
    }
  }
}

void sub_100594264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100594278(uint64_t a1, CLConnectionMessage **a2)
{
  NSObject *v4;
  void **v5;
  char v6;
  char v7;
  void *Dictionary;
  void *v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  const std::string::value_type *v14;
  _QWORD *v15;
  NSObject *v16;
  void **v17;
  NSObject *v18;
  const char *v19;
  uint8_t *v20;
  NSObject *v21;
  void **v22;
  NSObject *v23;
  void **v24;
  NSObject *v25;
  void **v26;
  NSObject *v27;
  void **v28;
  void **v29;
  NSObject *v30;
  void **v31;
  void *__p[2];
  uint64_t v33;
  std::string __str;
  uint8_t buf[8];
  __int16 v36;
  const char *v37;
  __int16 v38;
  void **v39;
  __int16 v40;
  _QWORD *v41;

  if (*(char *)(a1 + 47) < 0)
  {
    if (*(_QWORD *)(a1 + 32))
      goto LABEL_3;
  }
  else if (*(_BYTE *)(a1 + 47))
  {
LABEL_3:
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102145C08);
    v4 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(__p, a1);
      if (v33 >= 0)
        v5 = __p;
      else
        v5 = (void **)__p[0];
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v36 = 2082;
      v37 = "";
      v38 = 2082;
      v39 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLGnssExtensions\", \"assertion already taken by\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (SHIBYTE(v33) < 0)
        operator delete(__p[0]);
    }
    sub_100593D80(a1, (uint64_t)CFSTR("Assertion already taken"));
    return;
  }
  sub_1015A2E04(buf, "com.apple.locationd.gnss-extensions");
  v6 = sub_100594ED4((_QWORD *)a1, (uint64_t *)buf);
  v7 = v6;
  if ((SBYTE3(v39) & 0x80000000) == 0)
  {
    if ((v6 & 1) != 0)
      goto LABEL_15;
LABEL_23:
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102145C08);
    v16 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(__p, a1);
      v17 = v33 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v36 = 2082;
      v37 = "";
      v38 = 2082;
      v39 = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLGnssExtensions,not entitled,ignoring\", \"client\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (SHIBYTE(v33) < 0)
        operator delete(__p[0]);
    }
    sub_100593D80(a1, (uint64_t)CFSTR("missing entitlement: com.apple.locationd.gnss-extensions"));
    return;
  }
  operator delete(*(void **)buf);
  if ((v7 & 1) == 0)
    goto LABEL_23;
LABEL_15:
  Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
  v9 = Dictionary;
  if (Dictionary)
  {
    v10 = objc_msgSend(Dictionary, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessagePurposeKey"));
    v11 = objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageBundleIdentifierKey"));
    v12 = objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageBundlePathKey"));
    if (v11)
    {
      v13 = v12;
      if (v12)
      {
        if (v10)
        {
          if (objc_msgSend(v10, "length"))
          {
            v14 = (const std::string::value_type *)objc_msgSend(v10, "UTF8String");
            v15 = (_QWORD *)(a1 + 24);
            std::string::assign((std::string *)(a1 + 24), v14);
            if (objc_msgSend(v11, "length"))
            {
              sub_1015A2E04(&__str, (char *)objc_msgSend(v11, "UTF8String"));
              sub_1001AE67C(&__str, (uint64_t)buf);
              sub_1001A885C((uint64_t)buf, (uint64_t)__p);
              goto LABEL_79;
            }
            if (objc_msgSend(v13, "length"))
            {
              sub_1015A2E04(&__str, (char *)objc_msgSend(v13, "UTF8String"));
              sub_1001B8590(&__str, (uint64_t)buf);
              sub_1001A885C((uint64_t)buf, (uint64_t)__p);
LABEL_79:
              v29 = (void **)(a1 + 48);
              if (*(char *)(a1 + 71) < 0)
                operator delete(*v29);
              *(_OWORD *)v29 = *(_OWORD *)__p;
              *(_QWORD *)(a1 + 64) = v33;
              HIBYTE(v33) = 0;
              LOBYTE(__p[0]) = 0;
              sub_100010174((uint64_t)buf);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              sub_100E087CC();
            }
            if (qword_1022A01C0 != -1)
              dispatch_once(&qword_1022A01C0, &stru_102145C08);
            v30 = qword_1022A01C8;
            if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
            {
              (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(__p, a1);
              if (v33 >= 0)
                v31 = __p;
              else
                v31 = (void **)__p[0];
              if (*(char *)(a1 + 47) < 0)
                v15 = (_QWORD *)*v15;
              *(_DWORD *)buf = 68289538;
              *(_DWORD *)&buf[4] = 0;
              v36 = 2082;
              v37 = "";
              v38 = 2082;
              v39 = v31;
              v40 = 2082;
              v41 = v15;
              _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLGnssExtensions,no beneficiary,request denined\", \"requested by\":%{public, location:escape_only}s, \"reason\":%{public, location:escape_only}s}", buf, 0x26u);
              if (SHIBYTE(v33) < 0)
                operator delete(__p[0]);
            }
            sub_100593D80(a1, (uint64_t)CFSTR("null beneficiary client key"));
            if (*(char *)(a1 + 47) < 0)
            {
              **(_BYTE **)(a1 + 24) = 0;
              *(_QWORD *)(a1 + 32) = 0;
            }
            else
            {
              *(_BYTE *)(a1 + 24) = 0;
              *(_BYTE *)(a1 + 47) = 0;
            }
          }
          else
          {
            if (qword_1022A01C0 != -1)
              dispatch_once(&qword_1022A01C0, &stru_102145C08);
            v27 = qword_1022A01C8;
            if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
            {
              (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(__p, a1);
              v28 = v33 >= 0 ? __p : (void **)__p[0];
              *(_DWORD *)buf = 68289282;
              *(_DWORD *)&buf[4] = 0;
              v36 = 2082;
              v37 = "";
              v38 = 2082;
              v39 = v28;
              _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLGnssExtensions,empty reason,request denined\", \"requested by\":%{public, location:escape_only}s}", buf, 0x1Cu);
              if (SHIBYTE(v33) < 0)
                operator delete(__p[0]);
            }
            sub_100593D80(a1, (uint64_t)CFSTR("empty reason"));
          }
        }
        else
        {
          if (qword_1022A01C0 != -1)
            dispatch_once(&qword_1022A01C0, &stru_102145C08);
          v25 = qword_1022A01C8;
          if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
          {
            (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(__p, a1);
            v26 = v33 >= 0 ? __p : (void **)__p[0];
            *(_DWORD *)buf = 68289282;
            *(_DWORD *)&buf[4] = 0;
            v36 = 2082;
            v37 = "";
            v38 = 2082;
            v39 = v26;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLGnssExtensions,missing reason,request denined\", \"requested by\":%{public, location:escape_only}s}", buf, 0x1Cu);
            if (SHIBYTE(v33) < 0)
              operator delete(__p[0]);
          }
          sub_100593D80(a1, (uint64_t)CFSTR("missing reason"));
        }
      }
      else
      {
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_102145C08);
        v23 = qword_1022A01C8;
        if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
        {
          (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(__p, a1);
          v24 = v33 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)buf = 68289282;
          *(_DWORD *)&buf[4] = 0;
          v36 = 2082;
          v37 = "";
          v38 = 2082;
          v39 = v24;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLGnssExtensions,missing bundlePath,request denined\", \"requested by\":%{public, location:escape_only}s}", buf, 0x1Cu);
          if (SHIBYTE(v33) < 0)
            operator delete(__p[0]);
        }
        sub_100593D80(a1, (uint64_t)CFSTR("missing bundlePath"));
      }
    }
    else
    {
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_102145C08);
      v21 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
      {
        (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(__p, a1);
        v22 = v33 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        v36 = 2082;
        v37 = "";
        v38 = 2082;
        v39 = v22;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLGnssExtensions,missing bundleID,request denined\", \"requested by\":%{public, location:escape_only}s}", buf, 0x1Cu);
        if (SHIBYTE(v33) < 0)
          operator delete(__p[0]);
      }
      sub_100593D80(a1, (uint64_t)CFSTR("missing bundleID"));
    }
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102145C08);
    v18 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "GnssExtension dictionary empty", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_102145C08);
      LOWORD(__p[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 16, "GnssExtension dictionary empty", __p, 2);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 0, "void CLDaemonGnssExtensionsClient::handleMessageGnssExtensionAssertion(std::shared_ptr<CLConnectionMessage>)", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
  }
}

void sub_100594E84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  sub_100010174((uint64_t)&a22);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100594ED4(_QWORD *a1, uint64_t *a2)
{
  uint64_t isEntitled;
  NSObject *v5;
  void **v6;
  uint64_t *v7;
  void *__p[2];
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  void **v16;
  __int16 v17;
  uint64_t *v18;
  __int16 v19;
  int v20;

  isEntitled = CLConnection::isEntitled(a1[1], a2);
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102145C08);
  v5 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
  {
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 24))(__p, a1);
    if (v10 >= 0)
      v6 = __p;
    else
      v6 = (void **)__p[0];
    if (*((char *)a2 + 23) >= 0)
      v7 = a2;
    else
      v7 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68289794;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 2082;
    v16 = v6;
    v17 = 2082;
    v18 = v7;
    v19 = 1026;
    v20 = isEntitled;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLGnssExtensions\", \"requested by\":%{public, location:escape_only}s, \"entitlement\":%{public, location:escape_only}s, \"entitled\":%{public}hhd}", buf, 0x2Cu);
    if (v10 < 0)
      operator delete(__p[0]);
  }
  return isEntitled;
}

void sub_100595038(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLDaemonGnssExtensionsClient::onGnssLocationNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 16), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102145C28);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDaemonGnssExtensionsClient::onGnssLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102145C28);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDaemonGnssExtensionsClient::onGnssLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100595354(a4, v6, v7, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1005951E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

NSDictionary *__cdecl sub_100595208(id a1)
{
  return (NSDictionary *)&off_10221FAC0;
}

NSDictionary *sub_100595214(unsigned int *a1)
{
  uint64_t v2;
  uint64_t v3;
  NSNumber *v4;
  NSNumber *v5;
  double v6;
  NSNumber *v7;
  double v8;
  NSNumber *v9;
  double v10;
  NSNumber *v11;
  double v12;

  v2 = *a1;
  if (v2 < 6)
    v3 = v2 + 1;
  else
    v3 = 0;
  v4 = +[NSNumber numberWithLong:](NSNumber, "numberWithLong:", v3);
  v5 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a1[1]);
  LODWORD(v6) = a1[2];
  v7 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v6);
  LODWORD(v8) = a1[3];
  v9 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v8);
  LODWORD(v10) = a1[4];
  v11 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v10);
  LODWORD(v12) = a1[5];
  return +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", v4, CFSTR("satSystem"), v5, CFSTR("satId"), v7, CFSTR("elevationDeg"), v9, CFSTR("azimuthDeg"), v11, CFSTR("l1Cn0"), +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v12), CFSTR("l5Cn0"), +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned __int8 *)a1 + 24)), CFSTR("isTracked"), +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned __int8 *)a1 + 25)), CFSTR("isPhaseTracked"), 0);
}

void sub_100595354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  NSObject *v7;
  id v8;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  NSObject *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  const char *v21;
  uint8_t *v22;
  const char *v23;
  uint8_t *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  __int16 v27;
  NSDictionary *v28;
  unsigned int v29[8];
  uint64_t v30;
  std::__shared_weak_count *v31;
  _QWORD v32[3];
  _QWORD v33[3];
  uint8_t buf[4];
  _BOOL4 v35;

  v6 = *(_QWORD *)(a4 + 680);
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102145C08);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    v35 = v6 != 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CLGnssExtensions, onGnssLocationNotification, %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102145C08);
    LODWORD(v30) = 67240192;
    HIDWORD(v30) = v6 != 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "CLGnssExtensions, onGnssLocationNotification, %{public}d", &v30, 8);
    v22 = (uint8_t *)v21;
    sub_100512490("Generic", 1, 0, 2, "void CLDaemonGnssExtensionsClient::onGnssLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v21);
    if (v22 != buf)
      free(v22);
  }
  if (v6)
  {
    v8 = +[NSMutableArray array](NSMutableArray, "array");
    v9 = *(_QWORD *)(a4 + 680);
    v10 = *(_OWORD **)v9;
    v11 = *(_OWORD **)(v9 + 8);
    while (v10 != v11)
    {
      *(_OWORD *)v29 = *v10;
      *(_OWORD *)&v29[3] = *(_OWORD *)((char *)v10 + 12);
      objc_msgSend(v8, "addObject:", sub_100595214(v29));
      v10 = (_OWORD *)((char *)v10 + 28);
    }
    v32[0] = CFSTR("type");
    v32[1] = CFSTR("version");
    v33[0] = &off_10221B210;
    v33[1] = &off_10221B228;
    v32[2] = CFSTR("data");
    v33[2] = v8;
    v28 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v33, v32, 3);
    sub_10059588C("kCLConnectionMessageGnssExtensionsData", &v28, &v30);
    v12 = *(_QWORD *)(a1 + 8);
    if (v12)
    {
      v26 = v31;
      if (v31)
      {
        p_shared_owners = (unint64_t *)&v31->__shared_owners_;
        do
          v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
      }
      CLConnection::sendMessage(v12);
      if (v26)
      {
        v15 = (unint64_t *)&v26->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
    }
    else
    {
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_102145C08);
      v17 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "fConnection invalid", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_102145C08);
        v27 = 0;
        LODWORD(v25) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 16, "fConnection invalid", &v27, v25);
        v24 = (uint8_t *)v23;
        sub_100512490("Generic", 1, 0, 0, "void CLDaemonGnssExtensionsClient::onGnssLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v23);
        if (v24 != buf)
          free(v24);
      }
    }
    v18 = v31;
    if (v31)
    {
      v19 = (unint64_t *)&v31->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
}

void sub_1005957A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1005957D4(id a1)
{
  qword_1022A01C8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_100595800(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

_QWORD *sub_10059582C@<X0>(char *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_100487B64(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_100595878(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10059588C@<X0>(char *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_100487B64(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1005958D8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100595974(id a1)
{
  qword_102301CE0 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLTelephonyServiceSilo"));
}

uint64_t sub_100595A28(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10059C8C0;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_102301CF0 != -1)
    dispatch_once(&qword_102301CF0, block);
  return qword_1023108D8;
}

BOOL sub_100595B9C(uint64_t a1, BOOL *a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  int v7;
  _BOOL8 v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  NSObject *v12;
  const char *v14;
  uint8_t *v15;
  uint64_t v16;
  _WORD v17[8];
  uint8_t buf[4];
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  int v23;

  if (!*(_BYTE *)(a1 + 160))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    v4 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v5 = *(unsigned __int8 *)(a1 + 160);
      *(_DWORD *)buf = 68289282;
      v19 = 0;
      v20 = 2082;
      v21 = "";
      v22 = 1026;
      v23 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"DaemonNotReady for CT SPI\", \"fDaemonReady\":%{public}hhd}", buf, 0x18u);
    }
  }
  v6 = *(_QWORD *)(a1 + 144);
  if (v6)
  {
    HIBYTE(v16) = 0;
    v7 = _CTServerConnectionIsAnyCallActiveOrHeld(v6, (char *)&v16 + 7);
    v8 = v7 == 0;
    if (v7)
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146180);
      v9 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "_CTServerConnectionIsAnyCallActiveOrHeld failed", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102146180);
        v17[0] = 0;
        LODWORD(v16) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "_CTServerConnectionIsAnyCallActiveOrHeld failed", v17, v16);
        v11 = (uint8_t *)v10;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLTelephonyService::getActiveCall(BOOL &)", "%s\n", v10);
        if (v11 != buf)
          free(v11);
      }
    }
    else
    {
      *a2 = HIBYTE(v16) == 1;
    }
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    v12 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "currently not connected to telephony service", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146180);
      v17[0] = 0;
      LODWORD(v16) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "currently not connected to telephony service", v17, v16);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLTelephonyService::getActiveCall(BOOL &)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    return 0;
  }
  return v8;
}

uint64_t sub_100596068(uint64_t a1)
{
  unsigned __int8 v2;
  NSObject *v3;
  int v4;
  const __CFDictionary *v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  NSObject *v9;
  char *v10;
  NSObject *v11;
  uint64_t v13;
  _DWORD v14[4];
  uint8_t buf[4];
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  int v20;

  v2 = atomic_load((unsigned __int8 *)&qword_102301D10);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_102301D10))
  {
    v13 = sub_100197040();
    byte_102301D08 = sub_10075C58C(v13);
    __cxa_guard_release(&qword_102301D10);
  }
  if (!byte_102301D08)
    return 0;
  if (!*(_BYTE *)(a1 + 160))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    v3 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v4 = *(unsigned __int8 *)(a1 + 160);
      *(_DWORD *)buf = 68289282;
      v16 = 0;
      v17 = 2082;
      v18 = "";
      v19 = 1026;
      v20 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"DaemonNotReady for CT SPI\", \"fDaemonReady\":%{public}hhd}", buf, 0x18u);
    }
  }
  if (!*(_QWORD *)(a1 + 144))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    v9 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "currently not connected to telephony service", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    LOWORD(v14[0]) = 0;
    v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "currently not connected to telephony service", v14, 2);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLTelephonyService::getCampOnlyState()", "%s\n", v10);
    goto LABEL_32;
  }
  v5 = (const __CFDictionary *)sub_100596A54(a1);
  if (!v5)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    v11 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Can't get camp only state", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    LOWORD(v14[0]) = 0;
    v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Can't get camp only state", v14, 2);
    sub_100512490("Generic", 1, 0, 0, "BOOL CLTelephonyService::getCampOnlyState()", "%s\n", v10);
LABEL_32:
    if (v10 != (char *)buf)
      free(v10);
    return 0;
  }
  sub_1001C1D6C((int)buf, v5);
  v14[0] = 0;
  v6 = sub_1001C1194((uint64_t)buf, (uint64_t)CFSTR("kCTCampOnly"), v14);
  v7 = v14[0];
  CFRelease(v5);
  if (v7 == 1)
    v8 = v6;
  else
    v8 = 0;
  sub_10011A5A8(buf);
  return v8;
}

void sub_100596464(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_102301D10);
  _Unwind_Resume(a1);
}

void sub_1005964D4(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFTypeRef v16;
  CFTypeRef v17;
  const void *v18;
  CFDictionaryRef v19;
  const __CFDictionary *v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  const char *v29;
  char *v30;
  _BYTE values[24];
  CFTypeRef v32;
  _BYTE v33[10];
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  _BYTE buf[32];
  _BYTE v39[10];
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102146200);
  v4 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a2 + 24);
    v6 = *(_DWORD *)a2;
    v7 = *(_DWORD *)(a2 + 4);
    v8 = *(unsigned __int8 *)(a2 + 32);
    v9 = *(_DWORD *)(a2 + 8);
    v10 = *(_DWORD *)(a2 + 12);
    v11 = *(_DWORD *)(a2 + 16);
    v12 = *(unsigned __int8 *)(a2 + 33);
    *(_DWORD *)buf = 134285313;
    *(_QWORD *)&buf[4] = v5;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = v6;
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = v7;
    *(_WORD *)&buf[24] = 1026;
    *(_DWORD *)&buf[26] = v8;
    *(_WORD *)&buf[30] = 1026;
    *(_DWORD *)v39 = v9;
    *(_WORD *)&v39[4] = 1026;
    *(_DWORD *)&v39[6] = v10;
    v40 = 1026;
    v41 = v11;
    v42 = 1026;
    v43 = v12;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#timingadvance,currentTimeStamp,%{private}f,lte_ta_val,%{public}d,lte_connection_state,%{public}d,isLte,%{public}d,nr5g_ta_val,%{public}d,nr5g_connection_state,%{public}d,nr5g_ta_offset,%{public}d,isNr,%{public}d", buf, 0x36u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102146200);
    v21 = *(_QWORD *)(a2 + 24);
    v22 = *(_DWORD *)a2;
    v23 = *(_DWORD *)(a2 + 4);
    v24 = *(unsigned __int8 *)(a2 + 32);
    v25 = *(_DWORD *)(a2 + 8);
    v26 = *(_DWORD *)(a2 + 12);
    v27 = *(_DWORD *)(a2 + 16);
    v28 = *(unsigned __int8 *)(a2 + 33);
    *(_DWORD *)values = 134285313;
    *(_QWORD *)&values[4] = v21;
    *(_WORD *)&values[12] = 1026;
    *(_DWORD *)&values[14] = v22;
    *(_WORD *)&values[18] = 1026;
    *(_DWORD *)&values[20] = v23;
    LOWORD(v32) = 1026;
    *(_DWORD *)((char *)&v32 + 2) = v24;
    HIWORD(v32) = 1026;
    *(_DWORD *)v33 = v25;
    *(_WORD *)&v33[4] = 1026;
    *(_DWORD *)&v33[6] = v26;
    v34 = 1026;
    v35 = v27;
    v36 = 1026;
    v37 = v28;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "#timingadvance,currentTimeStamp,%{private}f,lte_ta_val,%{public}d,lte_connection_state,%{public}d,isLte,%{public}d,nr5g_ta_val,%{public}d,nr5g_connection_state,%{public}d,nr5g_ta_offset,%{public}d,isNr,%{public}d", values, 54);
    v30 = (char *)v29;
    sub_100512490("Generic", 1, 0, 2, "void CLTelephonyService::updateTAInfo(CLEurekaCommon_Type::TAData_t)", "%s\n", v29);
    if (v30 != buf)
      free(v30);
  }
  v13 = sub_100528980((unsigned int *)a2);
  v14 = sub_1005289B8((void *)(a2 + 24));
  v15 = sub_100528980((unsigned int *)(a2 + 8));
  v16 = sub_10023EC34((_BYTE *)(a2 + 32));
  v17 = sub_10023EC34((_BYTE *)(a2 + 33));
  v18 = v17;
  if (v13 && v14 && v15 && v16 && v17)
  {
    *(_OWORD *)buf = *(_OWORD *)off_102146010;
    *(_OWORD *)&buf[16] = *(_OWORD *)off_102146020;
    *(_QWORD *)v39 = CFSTR("kTimingAdvanceisNRKey");
    *(_QWORD *)values = v13;
    *(_QWORD *)&values[8] = v15;
    *(_QWORD *)&values[16] = v14;
    v32 = v16;
    *(_QWORD *)v33 = v17;
    v19 = CFDictionaryCreate(0, (const void **)buf, (const void **)values, 5, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    v20 = v19;
    (*(void (**)(uint64_t, const __CFString *, CFDictionaryRef))(*(_QWORD *)a1 + 256))(a1, CFSTR("kTimingAdvanceInfoNotification"), v19);
  }
  else if (!v13)
  {
    goto LABEL_14;
  }
  CFRelease(v13);
LABEL_14:
  if (v14)
    CFRelease(v14);
  if (v15)
    CFRelease(v15);
  if (v16)
    CFRelease(v16);
  if (v18)
    CFRelease(v18);
}

void sub_100596858(uint64_t a1, unsigned int a2, unsigned int a3)
{
  NSObject *v6;
  NSObject *v7;
  int v8;
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  unsigned int v13;
  __int16 v14;
  unsigned int v15;

  if (*(_QWORD *)(a1 + 152))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    v6 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v8 = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 1026;
      v13 = a2;
      v14 = 1026;
      v15 = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLTelephonyService assertCommCenter\", \"client\":%{public}d, \"level\":%{public}d}", (uint8_t *)&v8, 0x1Eu);
    }
    sub_10103D1E4(*(_QWORD *)(a1 + 152), a2, a3);
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v8 = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 1026;
      v13 = a2;
      v14 = 1026;
      v15 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLTelephonyService assert skipped\", \"client\":%{public}d, \"level\":%{public}d}", (uint8_t *)&v8, 0x1Eu);
    }
  }
}

uint64_t sub_100596A54(uint64_t a1)
{
  uint64_t result;
  unint64_t v2;
  int v3;
  unint64_t v4;
  NSObject *v5;
  char *v6;
  uint64_t v7;
  _DWORD v8[2];
  __int16 v9;
  int v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  int v14;

  result = *(_QWORD *)(a1 + 144);
  if (result)
  {
    v7 = 0;
    v2 = _CTServerConnectionCopyRegistrationInfo(result, &v7);
    v3 = v2;
    v4 = HIDWORD(v2);
    if (v2)
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146180);
      v5 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 67240448;
        v12 = v3;
        v13 = 1026;
        v14 = v4;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Registration dictionary copy returned: %{public}d %{public}d", buf, 0xEu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102146180);
        v8[0] = 67240448;
        v8[1] = v3;
        v9 = 1026;
        v10 = v4;
        v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Registration dictionary copy returned: %{public}d %{public}d", v8, 14);
        sub_100512490("Generic", 1, 0, 0, "CFDictionaryRef CLTelephonyService::copyRegistrationInfoDictionary()", "%s\n", v6);
        if (v6 != (char *)buf)
          free(v6);
      }
    }
    return v7;
  }
  return result;
}

id sub_100596CB4(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102146180);
  v4 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v6[0] = 68289026;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#irat CLTelephonyService fetching Irat-StreamingInfo\"}", (uint8_t *)v6, 0x12u);
  }
  return sub_10103D6E4(*(void ***)(a1 + 152), a2);
}

uint64_t sub_100596DC8(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  int v13;
  CFIndex Count;
  NSObject *v15;
  CFIndex v16;
  const void *v17;
  const void *ValueAtIndex;
  CFTypeID v19;
  NSObject *v20;
  NSObject *v21;
  CFTypeID TypeID;
  unint64_t v23;
  uint64_t v24;
  NSObject *v25;
  _BYTE *v26;
  uint64_t v27;
  CFTypeID v28;
  const char *v29;
  char *v30;
  const char *v31;
  char *v32;
  uint64_t v33;
  _BYTE *v34;
  char *v35;
  char *v36;
  NSObject *v37;
  uint64_t v38;
  NSObject *v39;
  const char *v40;
  char *v41;
  unsigned int *i;
  NSObject *v43;
  _BYTE *v44;
  uint64_t v45;
  _BYTE *v46;
  char *v47;
  char *v48;
  NSObject *v49;
  uint64_t v50;
  const char *v52;
  char *v53;
  uint64_t v54;
  const char *v55;
  char *v56;
  const char *v57;
  char *v58;
  const char *v59;
  char *v60;
  uint64_t v61;
  const void *v62;
  int v63;
  unsigned int v64;
  CFDictionaryRef v65;
  void *v66;
  void *v67;
  uint64_t v68;
  unsigned __int8 v69;
  CFArrayRef theArray;
  _BYTE v71[12];
  char v72;
  int v73;
  _BYTE *v74;
  _BYTE v75[14];
  __int16 v76;
  CFArrayRef v77;
  __int16 v78;
  int v79;
  void *v80;
  void *v81;
  void *__p;
  char v83;
  _BYTE buf[24];
  __int16 v85;
  int v86;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102146180);
  v4 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CELL_LOC: getting detected cells", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    *(_WORD *)v75 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "CELL_LOC: getting detected cells", v75, 2);
    v53 = (char *)v52;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLTelephonyService::getDetectedCells(std::vector<CLCell> &)", "%s\n", v52);
    if (v53 != buf)
      free(v53);
  }
  theArray = 0;
  v69 = 0;
  v66 = 0;
  v67 = 0;
  v68 = 0;
  v6 = *a2;
  v5 = a2[1];
  if (v5 != *a2)
  {
    do
    {
      v5 -= 696;
      sub_1005A9904((uint64_t)(a2 + 2), v5);
    }
    while (v5 != v6);
  }
  a2[1] = v6;
  if (!*(_BYTE *)(a1 + 160))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v8 = *(unsigned __int8 *)(a1 + 160);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 1026;
      *(_DWORD *)&buf[20] = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"DaemonNotReady for CT SPI\", \"fDaemonReady\":%{public}hhd}", buf, 0x18u);
    }
  }
  v9 = *(_QWORD *)(a1 + 144);
  if (v9)
  {
    v10 = _CTServerConnectionCellMonitorCopyCellInfo(v9, &v69, &theArray);
    if ((_DWORD)v10)
      v11 = 1;
    else
      v11 = v69 == 0;
    v12 = v11 || theArray == 0;
    v13 = !v12;
    v64 = v13;
    if (v12)
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146180);
      v39 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109888;
        *(_DWORD *)&buf[4] = v10;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = HIDWORD(v10);
        *(_WORD *)&buf[14] = 2048;
        *(_QWORD *)&buf[16] = theArray;
        v85 = 1024;
        v86 = v69;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "#Warning CELL_LOC: _CTServerConnectionCellMonitorCopyCellInfo failed err(%d,%d) cellsArray(%p) valid(%d)", buf, 0x1Eu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102146180);
        *(_DWORD *)v75 = 67109888;
        *(_DWORD *)&v75[4] = v10;
        *(_WORD *)&v75[8] = 1024;
        *(_DWORD *)&v75[10] = HIDWORD(v10);
        v76 = 2048;
        v77 = theArray;
        v78 = 1024;
        v79 = v69;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning CELL_LOC: _CTServerConnectionCellMonitorCopyCellInfo failed err(%d,%d) cellsArray(%p) valid(%d)", v75, 30, v62, v63);
        v41 = (char *)v40;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLTelephonyService::getDetectedCells(std::vector<CLCell> &)", "%s\n", v40);
        if (v41 != buf)
          free(v41);
      }
    }
    else
    {
      Count = CFArrayGetCount(theArray);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146180);
      v15 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = Count;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "CELL_LOC: processing %d dictionaries (detected)", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102146180);
        *(_DWORD *)v75 = 67109120;
        *(_DWORD *)&v75[4] = Count;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "CELL_LOC: processing %d dictionaries (detected)", v75);
        v60 = (char *)v59;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLTelephonyService::getDetectedCells(std::vector<CLCell> &)", "%s\n", v59);
        if (v60 != buf)
          free(v60);
      }
      if (Count >= 1)
      {
        v16 = 0;
        v17 = (const void *)kCTCellMonitorDerivedMCC;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(theArray, v16);
          v19 = CFGetTypeID(ValueAtIndex);
          if (v19 == CFDictionaryGetTypeID())
          {
            v65 = (CFDictionaryRef)ValueAtIndex;
            if (CFDictionaryContainsKey((CFDictionaryRef)ValueAtIndex, v17))
            {
              if (qword_1022A02D0 != -1)
                dispatch_once(&qword_1022A02D0, &stru_102146180);
              v20 = qword_1022A02D8;
              if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "CELL_LOC: derivedMCC dictionary", buf, 2u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A02D0 != -1)
                  dispatch_once(&qword_1022A02D0, &stru_102146180);
                *(_WORD *)v75 = 0;
                LODWORD(v61) = 2;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "CELL_LOC: derivedMCC dictionary", v75, v61);
                v32 = (char *)v31;
                sub_100512490("Generic", 1, 0, 2, "BOOL CLTelephonyService::getDetectedCells(std::vector<CLCell> &)", "%s\n", v31);
                if (v32 != buf)
                  free(v32);
              }
              sub_1005A0C80(&v65, (uint64_t)&v66);
            }
            else
            {
              sub_1001C4194((uint64_t)v75, &v65);
              if (*(_DWORD *)&v75[4] == 2)
              {
                v23 = a2[1];
                if (v23 >= a2[2])
                {
                  v24 = sub_1005A9E3C(a2, (uint64_t)v75);
                }
                else
                {
                  sub_1005A9F60((uint64_t)(a2 + 2), a2[1], (uint64_t)v75);
                  v24 = v23 + 696;
                  a2[1] = v23 + 696;
                }
                a2[1] = v24;
              }
              if (qword_1022A02D0 != -1)
                dispatch_once(&qword_1022A02D0, &stru_102146180);
              v25 = qword_1022A02D8;
              if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
              {
                sub_101347C78((unsigned int *)v75, buf);
                v26 = buf;
                if (buf[23] < 0)
                  v26 = *(_BYTE **)buf;
                *(_DWORD *)v71 = 136315138;
                *(_QWORD *)&v71[4] = v26;
                _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "CELL_LOC: Adding cell, %s", v71, 0xCu);
                if ((buf[23] & 0x80000000) != 0)
                  operator delete(*(void **)buf);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A02D0 != -1)
                  dispatch_once(&qword_1022A02D0, &stru_102146180);
                v33 = qword_1022A02D8;
                sub_101347C78((unsigned int *)v75, v71);
                v34 = v71;
                if (v72 < 0)
                  v34 = *(_BYTE **)v71;
                v73 = 136315138;
                v74 = v34;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v33, 2, "CELL_LOC: Adding cell, %s", (const char *)&v73);
                v36 = v35;
                if (v72 < 0)
                  operator delete(*(void **)v71);
                sub_100512490("Generic", 1, 0, 2, "BOOL CLTelephonyService::getDetectedCells(std::vector<CLCell> &)", "%s\n", v36);
                if (v36 != buf)
                  free(v36);
              }
              if (v83 < 0)
                operator delete(__p);
              if (v80)
              {
                v81 = v80;
                operator delete(v80);
              }
            }
          }
          else
          {
            if (qword_1022A02D0 != -1)
              dispatch_once(&qword_1022A02D0, &stru_102146180);
            v21 = qword_1022A02D8;
            if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
            {
              TypeID = CFDictionaryGetTypeID();
              *(_DWORD *)buf = 134349056;
              *(_QWORD *)&buf[4] = TypeID;
              _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "CELL_LOC: Invalid dictionary %{public}ld", buf, 0xCu);
            }
            if (sub_1001BFF7C(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A02D0 != -1)
                dispatch_once(&qword_1022A02D0, &stru_102146180);
              v27 = qword_1022A02D8;
              v28 = CFDictionaryGetTypeID();
              *(_DWORD *)v75 = 134349056;
              *(_QWORD *)&v75[4] = v28;
              LODWORD(v61) = 12;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v27, 17, "CELL_LOC: Invalid dictionary %{public}ld", v75, v61);
              v30 = (char *)v29;
              sub_100512490("Generic", 1, 0, 0, "BOOL CLTelephonyService::getDetectedCells(std::vector<CLCell> &)", "%s\n", v29);
              if (v30 != buf)
                free(v30);
            }
          }
          ++v16;
        }
        while (Count != v16);
      }
      if (v67 != v66)
      {
        for (i = (unsigned int *)*a2; i != (unsigned int *)a2[1]; i += 174)
        {
          if (i[2] - 3 <= 2)
          {
            sub_101348DA8((uint64_t)i, (uint64_t)&v66);
            if (qword_1022A02D0 != -1)
              dispatch_once(&qword_1022A02D0, &stru_102146180);
            v43 = qword_1022A02D8;
            if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
            {
              sub_101347C78(i, buf);
              v44 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
              *(_DWORD *)v75 = 136315138;
              *(_QWORD *)&v75[4] = v44;
              _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "CELL_LOC: Updating Cell, %s", v75, 0xCu);
              if ((buf[23] & 0x80000000) != 0)
                operator delete(*(void **)buf);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A02D0 != -1)
                dispatch_once(&qword_1022A02D0, &stru_102146180);
              v45 = qword_1022A02D8;
              sub_101347C78(i, v75);
              v46 = v75;
              if (SHIBYTE(v77) < 0)
                v46 = *(_BYTE **)v75;
              *(_DWORD *)v71 = 136315138;
              *(_QWORD *)&v71[4] = v46;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v45, 2, "CELL_LOC: Updating Cell, %s", v71);
              v48 = v47;
              if (SHIBYTE(v77) < 0)
                operator delete(*(void **)v75);
              sub_100512490("Generic", 1, 0, 2, "BOOL CLTelephonyService::getDetectedCells(std::vector<CLCell> &)", "%s\n", v48);
              if (v48 != buf)
                free(v48);
            }
          }
        }
      }
    }
    if (theArray)
      CFRelease(theArray);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    v49 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v50 = 0x66FD0EB66FD0EB67 * ((a2[1] - *a2) >> 3);
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v50;
      _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEBUG, "CELL_LOC: detected cells,%lu", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146180);
      v54 = 0x66FD0EB66FD0EB67 * ((a2[1] - *a2) >> 3);
      *(_DWORD *)v75 = 134217984;
      *(_QWORD *)&v75[4] = v54;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "CELL_LOC: detected cells,%lu", v75);
      v56 = (char *)v55;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLTelephonyService::getDetectedCells(std::vector<CLCell> &)", "%s\n", v55);
      if (v56 != buf)
        free(v56);
    }
    v38 = v64;
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    v37 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "currently not connected to telephony service", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146180);
      *(_WORD *)v75 = 0;
      LODWORD(v61) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "currently not connected to telephony service", v75, v61);
      v58 = (char *)v57;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLTelephonyService::getDetectedCells(std::vector<CLCell> &)", "%s\n", v57);
      if (v58 != buf)
        free(v58);
    }
    v38 = 0;
  }
  if (v66)
  {
    v67 = v66;
    operator delete(v66);
  }
  return v38;
}

void sub_100597D20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100597DE0(uint64_t a1)
{
  _BOOL4 v1;
  CFTypeRef cf1;

  cf1 = 0;
  v1 = sub_10059FD58(a1, (uint64_t)&cf1);
  if (v1)
    return sub_10059F9F4(v1, (const __CFString *)cf1);
  else
    return 11;
}

uint64_t sub_100597E3C(uint64_t a1, int a2)
{
  __CFString *v2;
  id v3;

  v2 = (__CFString *)sub_10096D514(a1 + 176, a2);
  v3 = -[__CFString length](v2, "length");
  if (v3)
    return sub_10059F9F4((int)v3, v2);
  else
    return 11;
}

uint64_t sub_100597EB4(uint64_t a1, int a2)
{
  _UNKNOWN **v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_10096D504(a1 + 176, a2);
  v4 = sub_1000901D8(v3);
  v5 = v4;
  if (v4 <= 3 && (_DWORD)v4 != 2)
  {
    if (sub_100596068(a1))
      return 7;
    else
      return v5;
  }
  return v5;
}

uint64_t sub_100597F84(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102146100);
  v4 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLTelephonyService, Refresh Cell Monitor", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102146100);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "CLTelephonyService, Refresh Cell Monitor", v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLTelephonyService::refreshCellMonitorForSim(SimInstance)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  sub_10023138C(a1 + 176, a2);
  return 1;
}

void sub_1005981A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_1005981BC(uint64_t a1, std::string *a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  _BOOL8 v8;
  const char *v9;
  uint8_t *v10;
  NSObject *v11;
  const char *v13;
  uint8_t *v14;
  _WORD v15[8];
  CFTypeRef cf[2];
  uint8_t buf[4];
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  int v22;

  if (!*(_BYTE *)(a1 + 160))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    v4 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v5 = *(unsigned __int8 *)(a1 + 160);
      *(_DWORD *)buf = 68289282;
      v18 = 0;
      v19 = 2082;
      v20 = "";
      v21 = 1026;
      v22 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"DaemonNotReady for CT SPI\", \"fDaemonReady\":%{public}hhd}", buf, 0x18u);
    }
  }
  v6 = *(_QWORD *)(a1 + 144);
  if (!v6)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    v11 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "currently not connected to telephony service", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146180);
      LOWORD(cf[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "currently not connected to telephony service", cf, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLTelephonyService::getServingOperator(std::string &)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    return 0;
  }
  cf[0] = 0;
  if (_CTServerConnectionCopyOperatorName(v6, cf))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "_CTServerConnectionCopyOperatorName failed", buf, 2u);
    }
    v8 = 0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146180);
      v15[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "_CTServerConnectionCopyOperatorName failed", v15, 2);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLTelephonyService::getServingOperator(std::string &)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
      v8 = 0;
    }
    goto LABEL_26;
  }
  if (!cf[0])
    return 0;
  v8 = sub_1001C0048((const __CFString *)cf[0], a2);
LABEL_26:
  if (cf[0])
    CFRelease(cf[0]);
  return v8;
}

void sub_100598604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100598698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_1005986B4(uint64_t a1, std::string *a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  _BOOL8 v8;
  const char *v9;
  uint8_t *v10;
  NSObject *v11;
  const char *v13;
  uint8_t *v14;
  _WORD v15[8];
  CFTypeRef cf[2];
  uint8_t buf[4];
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  int v22;

  if (!*(_BYTE *)(a1 + 160))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    v4 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v5 = *(unsigned __int8 *)(a1 + 160);
      *(_DWORD *)buf = 68289282;
      v18 = 0;
      v19 = 2082;
      v20 = "";
      v21 = 1026;
      v22 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"DaemonNotReady for CT SPI\", \"fDaemonReady\":%{public}hhd}", buf, 0x18u);
    }
  }
  v6 = *(_QWORD *)(a1 + 144);
  if (!v6)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    v11 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "currently not connected to telephony service", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146180);
      LOWORD(cf[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "currently not connected to telephony service", cf, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLTelephonyService::getServingProviderFromCarrierBundle(std::string &)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    return 0;
  }
  cf[0] = 0;
  if (_CTServerConnectionCopyProviderNameUsingCarrierBundle(v6, cf))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "_CTServerConnectionCopyProviderNameUsingCarrierBundle failed", buf, 2u);
    }
    v8 = 0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146180);
      v15[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "_CTServerConnectionCopyProviderNameUsingCarrierBundle failed", v15, 2);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLTelephonyService::getServingProviderFromCarrierBundle(std::string &)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
      v8 = 0;
    }
    goto LABEL_26;
  }
  if (!cf[0])
    return 0;
  v8 = sub_1001C0048((const __CFString *)cf[0], a2);
LABEL_26:
  if (cf[0])
    CFRelease(cf[0]);
  return v8;
}

BOOL sub_100598AA8(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  int SignalStrength;
  _BOOL8 v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  NSObject *v12;
  const char *v14;
  uint8_t *v15;
  _WORD v16[6];
  _QWORD v17[2];
  uint8_t buf[4];
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  int v23;

  if (!*(_BYTE *)(a1 + 160))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    v4 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v5 = *(unsigned __int8 *)(a1 + 160);
      *(_DWORD *)buf = 68289282;
      v19 = 0;
      v20 = 2082;
      v21 = "";
      v22 = 1026;
      v23 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"DaemonNotReady for CT SPI\", \"fDaemonReady\":%{public}hhd}", buf, 0x18u);
    }
  }
  v6 = *(_QWORD *)(a1 + 144);
  if (v6)
  {
    v17[0] = 0;
    SignalStrength = _CTServerConnectionGetSignalStrength(v6, a2, (char *)v17 + 4, v17);
    v8 = SignalStrength == 0;
    if (SignalStrength)
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146180);
      v9 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "_CTServerConnectionGetSignalStrength failed", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102146180);
        v16[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "_CTServerConnectionGetSignalStrength failed", v16, 2);
        v11 = (uint8_t *)v10;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLTelephonyService::getSignalStrength(int &)", "%s\n", v10);
        if (v11 != buf)
          free(v11);
      }
    }
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    v12 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "currently not connected to telephony service", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146180);
      WORD2(v17[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "currently not connected to telephony service", (char *)v17 + 4, 2);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLTelephonyService::getSignalStrength(int &)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    return 0;
  }
  return v8;
}

BOOL sub_100599038(uint64_t a1, char *cStr)
{
  NSObject *v4;
  int v5;
  CFStringRef v6;
  uint64_t v7;
  _BOOL8 v8;
  NSObject *v9;
  NSObject *v10;
  const char *v12;
  uint8_t *v13;
  const char *v14;
  uint8_t *v15;
  _WORD v16[8];
  uint8_t buf[4];
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  int v22;

  if (!*(_BYTE *)(a1 + 160))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    v4 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v5 = *(unsigned __int8 *)(a1 + 160);
      *(_DWORD *)buf = 68289282;
      v18 = 0;
      v19 = 2082;
      v20 = "";
      v21 = 1026;
      v22 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"DaemonNotReady for CT SPI\", \"fDaemonReady\":%{public}hhd}", buf, 0x18u);
    }
  }
  if (*(_QWORD *)(a1 + 144))
  {
    v6 = sub_1001A48D8(cStr);
    v7 = _CTServerConnectionResetModemWithCrashLogs(*(_QWORD *)(a1 + 144), v6, 1);
    v8 = v7 == 0;
    if (v7)
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146180);
      v9 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "_CTServerConnectionResetModemWithCrashLogs failed", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102146180);
        v16[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "_CTServerConnectionResetModemWithCrashLogs failed", v16, 2);
        v13 = (uint8_t *)v12;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLTelephonyService::resetModem(const char *)", "%s\n", v12);
        if (v13 != buf)
          free(v13);
      }
    }
    if (v6)
      CFRelease(v6);
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    v10 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "currently not connected to telephony service", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146180);
      v16[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "currently not connected to telephony service", v16, 2);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLTelephonyService::resetModem(const char *)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    return 0;
  }
  return v8;
}

BOOL sub_100599418(uint64_t a1, char *cStr)
{
  NSObject *v4;
  int v5;
  CFStringRef v6;
  uint64_t v7;
  _BOOL8 v8;
  NSObject *v9;
  NSObject *v10;
  const char *v12;
  uint8_t *v13;
  const char *v14;
  uint8_t *v15;
  _WORD v16[8];
  uint8_t buf[4];
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  int v22;

  if (!*(_BYTE *)(a1 + 160))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    v4 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v5 = *(unsigned __int8 *)(a1 + 160);
      *(_DWORD *)buf = 68289282;
      v18 = 0;
      v19 = 2082;
      v20 = "";
      v21 = 1026;
      v22 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"DaemonNotReady for CT SPI\", \"fDaemonReady\":%{public}hhd}", buf, 0x18u);
    }
  }
  if (*(_QWORD *)(a1 + 144))
  {
    v6 = sub_1001A48D8(cStr);
    v7 = _CTServerConnectionDumpBasebandState(*(_QWORD *)(a1 + 144), v6);
    v8 = v7 == 0;
    if (v7)
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146180);
      v9 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "_CTServerConnectionDumpBasebandState failed", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102146180);
        v16[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "_CTServerConnectionDumpBasebandState failed", v16, 2);
        v13 = (uint8_t *)v12;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLTelephonyService::dumpLog(const char *)", "%s\n", v12);
        if (v13 != buf)
          free(v13);
      }
    }
    if (v6)
      CFRelease(v6);
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    v10 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "currently not connected to telephony service", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146180);
      v16[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "currently not connected to telephony service", v16, 2);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLTelephonyService::dumpLog(const char *)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    return 0;
  }
  return v8;
}

BOOL sub_1005997EC(uint64_t a1, uint64_t *a2, int a3)
{
  _BOOL8 result;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  if (!sub_1005A1140(a1, a2, a3) || a2[1] != *a2)
    return 1;
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102146180);
  v5 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning CELL_LOC: can't figure out the serving cell", buf, 2u);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning CELL_LOC: can't figure out the serving cell", v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLTelephonyService::getServingCells(std::vector<CLCell> &, BOOL)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
    return 0;
  }
  return result;
}

uint64_t sub_1005999B4(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 224))(a1)
    && (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 232))(a1, a2 + 4))
  {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 240))(a1, a2 + 8, a2 + 12);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100599A28(unsigned int a1)
{
  char v2;
  unsigned int v3;
  unsigned int v4;

  v2 = sub_1001DC538();
  v3 = a1 != 0;
  if (a1 > 1)
    v3 = 255;
  if (a1)
    v4 = 255;
  else
    v4 = 0;
  if ((v2 & 1) != 0)
    return v3;
  else
    return v4;
}

BOOL sub_100599A6C(unsigned int a1)
{
  char v2;
  uint64_t v3;

  v2 = sub_1001DC538();
  v3 = 1;
  if (a1)
    v3 = 2;
  if (a1 > 1)
    v3 = 0;
  if ((v2 & 1) != 0)
    return v3;
  else
    return a1 == 0;
}

uint64_t sub_100599AB0(uint64_t a1)
{
  unsigned int v1;

  if (a1 == 2)
    v1 = 1;
  else
    v1 = 255;
  if (a1 == 1)
    return 0;
  else
    return v1;
}

uint64_t sub_100599AC8(int a1)
{
  uint64_t v1;

  v1 = 1;
  if (a1 == 1)
    v1 = 2;
  if (a1 == 255)
    return 0;
  else
    return v1;
}

uint64_t sub_100599AE0(int a1)
{
  unsigned int v1;

  if (a1 == 255)
    v1 = 255;
  else
    v1 = 0;
  if ((a1 - 2) >= 2)
    return v1;
  else
    return 1;
}

uint64_t sub_100599B00(uint64_t result)
{
  if ((_DWORD)result != 1)
  {
    if ((_DWORD)result == 255)
      return result;
    if ((_DWORD)result != 3)
      return 0;
  }
  return 1;
}

int *sub_100599B28(int *a1, int a2, __int128 *a3, __int128 *a4, uint64_t a5)
{
  __int128 v8;
  __int128 v9;
  NSObject *v10;
  int v11;
  NSObject *v12;
  int v13;
  NSObject *v14;
  int v15;
  int v17;
  const char *v18;
  uint8_t *v19;
  int v20;
  const char *v21;
  uint8_t *v22;
  int v23;
  const char *v24;
  uint8_t *v25;
  uint64_t v26;
  int v27;
  int v28;
  uint8_t buf[4];
  int v30;

  *a1 = a2;
  if (*((char *)a3 + 23) < 0)
  {
    sub_100115CE4((_BYTE *)a1 + 8, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v8 = *a3;
    *((_QWORD *)a1 + 3) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 2) = v8;
  }
  *((_BYTE *)a1 + 32) = 1;
  if (*((char *)a4 + 23) < 0)
  {
    sub_100115CE4((_BYTE *)a1 + 40, *(void **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v9 = *a4;
    *((_QWORD *)a1 + 7) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(a1 + 10) = v9;
  }
  *((_BYTE *)a1 + 64) = 1;
  sub_100119F3C(a1 + 18);
  *((_BYTE *)a1 + 88) = 1;
  sub_100119F3C(a1 + 24);
  *((_BYTE *)a1 + 112) = 1;
  sub_100119F3C(a1 + 30);
  *((_BYTE *)a1 + 136) = 1;
  if (!sub_100219D08(a5, (uint64_t)CFSTR("Location"), (_QWORD *)a1 + 9))
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021461A0);
    v10 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v11 = *a1;
      *(_DWORD *)buf = 67240192;
      v30 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#BundleInfo,constructor,unable to get location dict,descriptor,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021461A0);
      v17 = *a1;
      v27 = 67240192;
      v28 = v17;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 0, "#BundleInfo,constructor,unable to get location dict,descriptor,%{public}d", &v27, 8);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 2, "CLTelephonyService_Type::BundleInfo::BundleInfo(BundleDescriptor, const std::string &, const std::string &, const CLNameValuePair &)", "%s\n", v18);
      if (v19 != buf)
        free(v19);
    }
  }
  if (!sub_100219D08(a5, (uint64_t)CFSTR("SUPL"), (_QWORD *)a1 + 12))
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021461A0);
    v12 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v13 = *a1;
      *(_DWORD *)buf = 67240192;
      v30 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#BundleInfo,constructor,unable to get SUPL dict,descriptor,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021461A0);
      v20 = *a1;
      v27 = 67240192;
      v28 = v20;
      LODWORD(v26) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 0, "#BundleInfo,constructor,unable to get SUPL dict,descriptor,%{public}d", &v27, v26);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "CLTelephonyService_Type::BundleInfo::BundleInfo(BundleDescriptor, const std::string &, const std::string &, const CLNameValuePair &)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
  }
  if (!sub_100219D08(a5, (uint64_t)CFSTR("LocationSecondaryOverlay"), (_QWORD *)a1 + 15))
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021461A0);
    v14 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v15 = *a1;
      *(_DWORD *)buf = 67240192;
      v30 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#BundleInfo,constructor,unable to get secondary settings dict,descriptor,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021461A0);
      v23 = *a1;
      v27 = 67240192;
      v28 = v23;
      LODWORD(v26) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 0, "#BundleInfo,constructor,unable to get secondary settings dict,descriptor,%{public}d", &v27, v26);
      v25 = (uint8_t *)v24;
      sub_100512490("Generic", 1, 0, 2, "CLTelephonyService_Type::BundleInfo::BundleInfo(BundleDescriptor, const std::string &, const std::string &, const CLNameValuePair &)", "%s\n", v24);
      if (v25 != buf)
        free(v25);
    }
  }
  return a1;
}

void sub_10059A088(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_10011A5A8(v6);
  sub_10011A5A8(v5);
  sub_10011A5A8(v4);
  if (*(char *)(v1 + 63) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

const __CFString *sub_10059A0FC(int *a1)
{
  NSObject *v3;
  int v4;
  int v5;
  char *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  if ((*a1 - 2) < 2)
    return CFSTR("kSlotTwo");
  if (*a1 != 255)
    return CFSTR("kSlotOne");
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_1021461A0);
  v3 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
  {
    if (*a1 == 255)
      v4 = 255;
    else
      v4 = 0;
    if ((*a1 - 2) < 2)
      v4 = 1;
    *(_DWORD *)buf = 67240192;
    v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#BundleInfo,getKeyForSim,unexpected sim,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021461A0);
    v5 = *a1;
    if ((*a1 - 2) >= 2)
    {
      if (v5 != 255)
        v5 = 0;
    }
    else
    {
      v5 = 1;
    }
    v7[0] = 67240192;
    v7[1] = v5;
    v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#BundleInfo,getKeyForSim,unexpected sim,%{public}d", v7, 8);
    sub_100512490("Generic", 1, 0, 0, "CFStringRef CLTelephonyService_Type::BundleInfo::getKeyForSim() const", "%s\n", v6);
    if (v6 != (char *)buf)
      free(v6);
  }
  return 0;
}

const __CFString *sub_10059A31C(int *a1)
{
  int v1;
  NSObject *v5;
  int v6;
  int v7;
  char *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  v1 = *a1;
  if (*a1 == 1 || v1 == 3)
    return CFSTR("Operator");
  if (v1 != 255)
    return CFSTR("Carrier");
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_1021461A0);
  v5 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
  {
    v6 = *a1;
    if (*a1 != 1)
    {
      if (v6 == 255)
      {
LABEL_17:
        *(_DWORD *)buf = 67240192;
        v11 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#BundleInfo,getKeyForBundleType,unexpected bundle type,%{public}d", buf, 8u);
        goto LABEL_18;
      }
      if (v6 != 3)
      {
        v6 = 0;
        goto LABEL_17;
      }
    }
    v6 = 1;
    goto LABEL_17;
  }
LABEL_18:
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021461A0);
    v7 = *a1;
    if (*a1 == 1)
      goto LABEL_25;
    if (v7 == 255)
      goto LABEL_27;
    if (v7 == 3)
LABEL_25:
      v7 = 1;
    else
      v7 = 0;
LABEL_27:
    v9[0] = 67240192;
    v9[1] = v7;
    v8 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#BundleInfo,getKeyForBundleType,unexpected bundle type,%{public}d", v9, 8);
    sub_100512490("Generic", 1, 0, 0, "CFStringRef CLTelephonyService_Type::BundleInfo::getKeyForBundleType() const", "%s\n", v8);
    if (v8 != (char *)buf)
      free(v8);
  }
  return 0;
}

void sub_10059A548(int *a1, CFTypeRef cf1, const __CFDictionary *a3)
{
  NSObject *v6;
  int v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  CFTypeRef v12;
  __int16 v13;
  int v14;
  uint8_t buf[4];
  CFTypeRef v16;
  __int16 v17;
  int v18;

  if (CFEqual(cf1, CFSTR("Location")))
  {
    sub_10059A7FC((uint64_t)a1, a3);
  }
  else if (CFEqual(cf1, CFSTR("SUPL")))
  {
    sub_10059A858((uint64_t)a1, a3);
  }
  else if (CFEqual(cf1, CFSTR("LocationSecondaryOverlay")))
  {
    sub_10059A8B4((uint64_t)a1, a3);
  }
  else
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021461A0);
    v6 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
    {
      v7 = *a1;
      *(_DWORD *)buf = 138478083;
      v16 = cf1;
      v17 = 1026;
      v18 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#BundleInfo,setDict,called with unexpected dictName,%{private}@,descriptor,%{public}d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021461A0);
      v8 = *a1;
      v11 = 138478083;
      v12 = cf1;
      v13 = 1026;
      v14 = v8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#BundleInfo,setDict,called with unexpected dictName,%{private}@,descriptor,%{public}d", &v11, 18);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 0, "void CLTelephonyService_Type::BundleInfo::setDict(CFStringRef, NSDictionary *)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
}

uint64_t sub_10059A7FC(uint64_t a1, const __CFDictionary *a2)
{
  _BYTE v4[16];

  *(_BYTE *)(a1 + 88) = 1;
  sub_1001C1D6C((int)v4, a2);
  sub_10052502C(a1 + 72, (uint64_t)v4);
  return sub_10011A5A8(v4);
}

void sub_10059A844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10011A5A8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10059A858(uint64_t a1, const __CFDictionary *a2)
{
  _BYTE v4[16];

  *(_BYTE *)(a1 + 112) = 1;
  sub_1001C1D6C((int)v4, a2);
  sub_10052502C(a1 + 96, (uint64_t)v4);
  return sub_10011A5A8(v4);
}

void sub_10059A8A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10011A5A8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10059A8B4(uint64_t a1, const __CFDictionary *a2)
{
  _BYTE v4[16];

  *(_BYTE *)(a1 + 136) = 1;
  sub_1001C1D6C((int)v4, a2);
  sub_10052502C(a1 + 120, (uint64_t)v4);
  return sub_10011A5A8(v4);
}

void sub_10059A8FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10011A5A8(&a9);
  _Unwind_Resume(a1);
}

const __CFString *sub_10059A910(uint64_t a1, void *a2)
{
  NSObject *v4;
  int v5;
  const __CFString *result;
  const __CFString *v7;
  const __CFString *v8;
  _QWORD *v9;
  NSString *v10;
  _QWORD *v11;
  NSString *v12;
  const void *v13;
  CFPropertyListRef v14;
  const void *v15;
  CFPropertyListRef v16;
  const void *v17;
  NSDictionary *v18;
  id v19;
  int v20;
  char *v21;
  _QWORD v22[5];
  _QWORD v23[5];
  _DWORD v24[4];
  uint8_t buf[4];
  int v26;

  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_1021461A0);
  v4 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_DWORD *)a1;
    *(_DWORD *)buf = 67240192;
    v26 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#BundleInfo,writeToDict,descriptor,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021461A0);
    v20 = *(_DWORD *)a1;
    v24[0] = 67240192;
    v24[1] = v20;
    v21 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 2, "#BundleInfo,writeToDict,descriptor,%{public}d", v24, 8);
    sub_100512490("Generic", 1, 0, 2, "void CLTelephonyService_Type::BundleInfo::writeToDict(NSMutableDictionary *) const", "%s\n", v21);
    if (v21 != (char *)buf)
      free(v21);
  }
  result = sub_10059A0FC((int *)a1);
  if (result)
  {
    v7 = result;
    result = sub_10059A31C((int *)a1);
    if (result)
    {
      v8 = result;
      v9 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v9 = (_QWORD *)*v9;
      v10 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v9);
      v11 = (_QWORD *)(a1 + 40);
      if (*(char *)(a1 + 63) < 0)
        v11 = (_QWORD *)*v11;
      v12 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v11);
      v13 = (const void *)sub_10011A5AC(a1 + 72);
      v14 = (id)CFPropertyListCreateDeepCopy(kCFAllocatorDefault, v13, 1uLL);
      v15 = (const void *)sub_10011A5AC(a1 + 96);
      v16 = (id)CFPropertyListCreateDeepCopy(kCFAllocatorDefault, v15, 1uLL);
      v17 = (const void *)sub_10011A5AC(a1 + 120);
      v22[0] = CFSTR("kBundleIDKey");
      v22[1] = CFSTR("kBundleVersionKey");
      v23[0] = v10;
      v23[1] = v12;
      v22[2] = CFSTR("Location");
      v22[3] = CFSTR("SUPL");
      v23[2] = v14;
      v23[3] = v16;
      v22[4] = CFSTR("LocationSecondaryOverlay");
      v23[4] = (id)CFPropertyListCreateDeepCopy(kCFAllocatorDefault, v17, 1uLL);
      v18 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v23, v22, 5);
      v19 = objc_msgSend(a2, "objectForKey:", v7);
      if (!v19)
      {
        v19 = objc_alloc_init((Class)NSMutableDictionary);
        objc_msgSend(a2, "setObject:forKey:", v19, v7);
      }
      return (const __CFString *)objc_msgSend(v19, "setObject:forKey:", v18, v8);
    }
  }
  return result;
}

void sub_10059AC3C(uint64_t a1, void *a2)
{
  NSObject *v4;
  int v5;
  const __CFString *v6;
  const __CFString *v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  CFPropertyListRef DeepCopy;
  id v14;
  CFPropertyListRef v15;
  id v16;
  CFPropertyListRef v17;
  id v18;
  NSObject *v19;
  int v20;
  NSObject *v21;
  int v22;
  NSObject *v23;
  int v24;
  int v25;
  int v26;
  NSObject *v27;
  int v28;
  int v29;
  NSObject *v30;
  int v31;
  int v32;
  int v33;
  NSObject *v34;
  int v35;
  int v36;
  int v37;
  int v38;
  NSObject *v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  const char *v54;
  char *v55;
  const char *v56;
  char *v57;
  int v58;
  const char *v59;
  int v60;
  int v61;
  const char *v62;
  int v63;
  int v64;
  int v65;
  const char *v66;
  int v67;
  const char *v68;
  const char *v69;
  const char *v70;
  uint64_t v71;
  int v72;
  int v73;
  __int16 v74;
  int v75;
  uint64_t buf;
  __int16 v77;
  int v78;

  sub_10059BC60(a1);
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_1021461A0);
  v4 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_DWORD *)a1;
    LODWORD(buf) = 67240192;
    HIDWORD(buf) = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#BundleInfo,readFromDict,descriptor,%{public}d", (uint8_t *)&buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021461A0);
    v53 = *(_DWORD *)a1;
    v72 = 67240192;
    v73 = v53;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A02A8, 2, "#BundleInfo,readFromDict,descriptor,%{public}d", &v72, 8);
    v55 = (char *)v54;
    sub_100512490("Generic", 1, 0, 2, "void CLTelephonyService_Type::BundleInfo::readFromDict(NSDictionary *)", "%s\n", v54);
    if (v55 != (char *)&buf)
      free(v55);
  }
  v6 = sub_10059A0FC((int *)a1);
  if (v6)
  {
    v7 = sub_10059A31C((int *)a1);
    if (v7)
    {
      v8 = objc_msgSend(a2, "objectForKey:", v6);
      if (v8)
      {
        v9 = objc_msgSend(v8, "objectForKey:", v7);
        v10 = v9;
        if (v9)
        {
          v11 = objc_msgSend(v9, "objectForKey:", CFSTR("kBundleIDKey"));
          if (v11)
          {
            std::string::assign((std::string *)(a1 + 8), (const std::string::value_type *)objc_msgSend(v11, "UTF8String"));
            v12 = objc_msgSend(v10, "objectForKey:", CFSTR("Location"));
            if (v12)
            {
              DeepCopy = CFPropertyListCreateDeepCopy(kCFAllocatorDefault, v12, 1uLL);
              sub_100524E10(&buf, DeepCopy);
              sub_10052502C(a1 + 72, (uint64_t)&buf);
              sub_10011A5A8(&buf);
              CFRelease(DeepCopy);
              v14 = objc_msgSend(v10, "objectForKey:", CFSTR("SUPL"));
              if (v14)
              {
                v15 = CFPropertyListCreateDeepCopy(kCFAllocatorDefault, v14, 1uLL);
                sub_100524E10(&buf, v15);
                sub_10052502C(a1 + 96, (uint64_t)&buf);
                sub_10011A5A8(&buf);
                CFRelease(v15);
                v16 = objc_msgSend(v10, "objectForKey:", CFSTR("LocationSecondaryOverlay"));
                if (v16)
                {
                  v17 = CFPropertyListCreateDeepCopy(kCFAllocatorDefault, v16, 1uLL);
                  sub_100524E10(&buf, v17);
                  sub_10052502C(a1 + 120, (uint64_t)&buf);
                  sub_10011A5A8(&buf);
                  CFRelease(v17);
                  v18 = objc_msgSend(v10, "objectForKey:", CFSTR("kBundleVersionKey"));
                  if (v18)
                  {
                    std::string::assign((std::string *)(a1 + 40), (const std::string::value_type *)objc_msgSend(v18, "UTF8String"));
                    return;
                  }
                  if (qword_1022A02A0 != -1)
                    dispatch_once(&qword_1022A02A0, &stru_1021461A0);
                  v39 = qword_1022A02A8;
                  if (!os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
                  {
LABEL_135:
                    if (!sub_1001BFF7C(115, 0))
                      return;
                    bzero(&buf, 0x65CuLL);
                    if (qword_1022A02A0 != -1)
                      dispatch_once(&qword_1022A02A0, &stru_1021461A0);
                    v63 = *(_DWORD *)a1;
                    if ((*(_DWORD *)a1 - 2) >= 2)
                    {
                      v64 = *(_DWORD *)a1;
                      if (v63 == 255)
                        goto LABEL_190;
                      v64 = 0;
                    }
                    else
                    {
                      v64 = 1;
                    }
                    if (v63 == 1)
                    {
LABEL_187:
                      v67 = 1;
LABEL_194:
                      v72 = 67240448;
                      v73 = v64;
                      v74 = 1026;
                      v75 = v67;
                      LODWORD(v71) = 14;
                      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#BundleInfo,readFromDict,no entry for bundle Version,sim,%{public}d,bundle type,%{public}d", &v72, v71);
                      v57 = (char *)v70;
                      sub_100512490("Generic", 1, 0, 0, "void CLTelephonyService_Type::BundleInfo::readFromDict(NSDictionary *)", "%s\n", v70);
LABEL_195:
                      if (v57 != (char *)&buf)
                        free(v57);
                      return;
                    }
                    if (v63 != 255)
                    {
                      if (v63 != 3)
                      {
                        v67 = 0;
                        goto LABEL_194;
                      }
                      goto LABEL_187;
                    }
LABEL_190:
                    v67 = 255;
                    goto LABEL_194;
                  }
                  v40 = *(_DWORD *)a1;
                  if ((*(_DWORD *)a1 - 2) >= 2)
                  {
                    v41 = *(_DWORD *)a1;
                    if (v40 == 255)
                      goto LABEL_125;
                    v41 = 0;
                  }
                  else
                  {
                    v41 = 1;
                  }
                  if (v40 == 1)
                  {
LABEL_117:
                    v48 = 1;
LABEL_134:
                    LODWORD(buf) = 67240448;
                    HIDWORD(buf) = v41;
                    v77 = 1026;
                    v78 = v48;
                    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "#BundleInfo,readFromDict,no entry for bundle Version,sim,%{public}d,bundle type,%{public}d", (uint8_t *)&buf, 0xEu);
                    goto LABEL_135;
                  }
                  if (v40 != 255)
                  {
                    if (v40 != 3)
                    {
                      v48 = 0;
                      goto LABEL_134;
                    }
                    goto LABEL_117;
                  }
LABEL_125:
                  v48 = 255;
                  goto LABEL_134;
                }
                if (qword_1022A02A0 != -1)
                  dispatch_once(&qword_1022A02A0, &stru_1021461A0);
                v34 = qword_1022A02A8;
                if (!os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
                {
LABEL_128:
                  if (!sub_1001BFF7C(115, 0))
                    return;
                  bzero(&buf, 0x65CuLL);
                  if (qword_1022A02A0 != -1)
                    dispatch_once(&qword_1022A02A0, &stru_1021461A0);
                  v51 = *(_DWORD *)a1;
                  if ((*(_DWORD *)a1 - 2) >= 2)
                  {
                    v52 = *(_DWORD *)a1;
                    if (v51 == 255)
                      goto LABEL_181;
                    v52 = 0;
                  }
                  else
                  {
                    v52 = 1;
                  }
                  if (v51 == 1)
                  {
LABEL_178:
                    v65 = 1;
LABEL_192:
                    v72 = 67240448;
                    v73 = v52;
                    v74 = 1026;
                    v75 = v65;
                    LODWORD(v71) = 14;
                    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#BundleInfo,readFromDict,no entry for secondary settings dict,sim,%{public}d,bundle type,%{public}d", &v72, v71);
                    v57 = (char *)v69;
                    sub_100512490("Generic", 1, 0, 0, "void CLTelephonyService_Type::BundleInfo::readFromDict(NSDictionary *)", "%s\n", v69);
                    goto LABEL_195;
                  }
                  if (v51 != 255)
                  {
                    if (v51 != 3)
                    {
                      v65 = 0;
                      goto LABEL_192;
                    }
                    goto LABEL_178;
                  }
LABEL_181:
                  v65 = 255;
                  goto LABEL_192;
                }
                v35 = *(_DWORD *)a1;
                if ((*(_DWORD *)a1 - 2) >= 2)
                {
                  v36 = *(_DWORD *)a1;
                  if (v35 == 255)
                    goto LABEL_111;
                  v36 = 0;
                }
                else
                {
                  v36 = 1;
                }
                if (v35 == 1)
                {
LABEL_103:
                  v45 = 1;
LABEL_127:
                  LODWORD(buf) = 67240448;
                  HIDWORD(buf) = v36;
                  v77 = 1026;
                  v78 = v45;
                  _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "#BundleInfo,readFromDict,no entry for secondary settings dict,sim,%{public}d,bundle type,%{public}d", (uint8_t *)&buf, 0xEu);
                  goto LABEL_128;
                }
                if (v35 != 255)
                {
                  if (v35 != 3)
                  {
                    v45 = 0;
                    goto LABEL_127;
                  }
                  goto LABEL_103;
                }
LABEL_111:
                v45 = 255;
                goto LABEL_127;
              }
              if (qword_1022A02A0 != -1)
                dispatch_once(&qword_1022A02A0, &stru_1021461A0);
              v30 = qword_1022A02A8;
              if (!os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
              {
LABEL_120:
                if (!sub_1001BFF7C(115, 0))
                  return;
                bzero(&buf, 0x65CuLL);
                if (qword_1022A02A0 != -1)
                  dispatch_once(&qword_1022A02A0, &stru_1021461A0);
                v49 = *(_DWORD *)a1;
                if ((*(_DWORD *)a1 - 2) >= 2)
                {
                  v50 = *(_DWORD *)a1;
                  if (v49 == 255)
                    goto LABEL_168;
                  v50 = 0;
                }
                else
                {
                  v50 = 1;
                }
                if (v49 == 1)
                {
LABEL_165:
                  v61 = 1;
LABEL_189:
                  v72 = 67240448;
                  v73 = v50;
                  v74 = 1026;
                  v75 = v61;
                  LODWORD(v71) = 14;
                  _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#BundleInfo,readFromDict,no entry for SUPL dict,sim,%{public}d,bundle type,%{public}d", &v72, v71);
                  v57 = (char *)v68;
                  sub_100512490("Generic", 1, 0, 0, "void CLTelephonyService_Type::BundleInfo::readFromDict(NSDictionary *)", "%s\n", v68);
                  goto LABEL_195;
                }
                if (v49 != 255)
                {
                  if (v49 != 3)
                  {
                    v61 = 0;
                    goto LABEL_189;
                  }
                  goto LABEL_165;
                }
LABEL_168:
                v61 = 255;
                goto LABEL_189;
              }
              v31 = *(_DWORD *)a1;
              if ((*(_DWORD *)a1 - 2) >= 2)
              {
                v32 = *(_DWORD *)a1;
                if (v31 == 255)
                  goto LABEL_97;
                v32 = 0;
              }
              else
              {
                v32 = 1;
              }
              if (v31 == 1)
              {
LABEL_89:
                v42 = 1;
LABEL_119:
                LODWORD(buf) = 67240448;
                HIDWORD(buf) = v32;
                v77 = 1026;
                v78 = v42;
                _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "#BundleInfo,readFromDict,no entry for SUPL dict,sim,%{public}d,bundle type,%{public}d", (uint8_t *)&buf, 0xEu);
                goto LABEL_120;
              }
              if (v31 != 255)
              {
                if (v31 != 3)
                {
                  v42 = 0;
                  goto LABEL_119;
                }
                goto LABEL_89;
              }
LABEL_97:
              v42 = 255;
              goto LABEL_119;
            }
            if (qword_1022A02A0 != -1)
              dispatch_once(&qword_1022A02A0, &stru_1021461A0);
            v27 = qword_1022A02A8;
            if (!os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
            {
LABEL_106:
              if (!sub_1001BFF7C(115, 0))
                return;
              bzero(&buf, 0x65CuLL);
              if (qword_1022A02A0 != -1)
                dispatch_once(&qword_1022A02A0, &stru_1021461A0);
              v46 = *(_DWORD *)a1;
              if ((*(_DWORD *)a1 - 2) >= 2)
              {
                v47 = *(_DWORD *)a1;
                if (v46 == 255)
                  goto LABEL_159;
                v47 = 0;
              }
              else
              {
                v47 = 1;
              }
              if (v46 == 1)
              {
LABEL_158:
                v60 = 1;
LABEL_180:
                v72 = 67240448;
                v73 = v47;
                v74 = 1026;
                v75 = v60;
                LODWORD(v71) = 14;
                _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#BundleInfo,readFromDict,no entry for location dict,sim,%{public}d,bundle type,%{public}d", &v72, v71);
                v57 = (char *)v66;
                sub_100512490("Generic", 1, 0, 0, "void CLTelephonyService_Type::BundleInfo::readFromDict(NSDictionary *)", "%s\n", v66);
                goto LABEL_195;
              }
              if (v46 != 255)
              {
                if (v46 != 3)
                {
                  v60 = 0;
                  goto LABEL_180;
                }
                goto LABEL_158;
              }
LABEL_159:
              v60 = 255;
              goto LABEL_180;
            }
            v28 = *(_DWORD *)a1;
            if ((*(_DWORD *)a1 - 2) >= 2)
            {
              v29 = *(_DWORD *)a1;
              if (v28 == 255)
                goto LABEL_83;
              v29 = 0;
            }
            else
            {
              v29 = 1;
            }
            if (v28 == 1)
            {
LABEL_77:
              v38 = 1;
LABEL_105:
              LODWORD(buf) = 67240448;
              HIDWORD(buf) = v29;
              v77 = 1026;
              v78 = v38;
              _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "#BundleInfo,readFromDict,no entry for location dict,sim,%{public}d,bundle type,%{public}d", (uint8_t *)&buf, 0xEu);
              goto LABEL_106;
            }
            if (v28 != 255)
            {
              if (v28 != 3)
              {
                v38 = 0;
                goto LABEL_105;
              }
              goto LABEL_77;
            }
LABEL_83:
            v38 = 255;
            goto LABEL_105;
          }
          if (qword_1022A02A0 != -1)
            dispatch_once(&qword_1022A02A0, &stru_1021461A0);
          v23 = qword_1022A02A8;
          if (!os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
          {
LABEL_92:
            if (!sub_1001BFF7C(115, 0))
              return;
            bzero(&buf, 0x65CuLL);
            if (qword_1022A02A0 != -1)
              dispatch_once(&qword_1022A02A0, &stru_1021461A0);
            v43 = *(_DWORD *)a1;
            if ((*(_DWORD *)a1 - 2) >= 2)
            {
              v44 = *(_DWORD *)a1;
              if (v43 == 255)
                goto LABEL_150;
              v44 = 0;
            }
            else
            {
              v44 = 1;
            }
            if (v43 == 1)
            {
LABEL_149:
              v58 = 1;
LABEL_167:
              v72 = 67240448;
              v73 = v44;
              v74 = 1026;
              v75 = v58;
              LODWORD(v71) = 14;
              _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#BundleInfo,readFromDict,no entry for bundle ID,sim,%{public}d,bundle type,%{public}d", &v72, v71);
              v57 = (char *)v62;
              sub_100512490("Generic", 1, 0, 0, "void CLTelephonyService_Type::BundleInfo::readFromDict(NSDictionary *)", "%s\n", v62);
              goto LABEL_195;
            }
            if (v43 != 255)
            {
              if (v43 != 3)
              {
                v58 = 0;
                goto LABEL_167;
              }
              goto LABEL_149;
            }
LABEL_150:
            v58 = 255;
            goto LABEL_167;
          }
          v24 = *(_DWORD *)a1;
          if ((*(_DWORD *)a1 - 2) >= 2)
          {
            v25 = *(_DWORD *)a1;
            if (v24 == 255)
              goto LABEL_62;
            v25 = 0;
          }
          else
          {
            v25 = 1;
          }
          if (v24 == 1)
          {
LABEL_56:
            v33 = 1;
LABEL_91:
            LODWORD(buf) = 67240448;
            HIDWORD(buf) = v25;
            v77 = 1026;
            v78 = v33;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "#BundleInfo,readFromDict,no entry for bundle ID,sim,%{public}d,bundle type,%{public}d", (uint8_t *)&buf, 0xEu);
            goto LABEL_92;
          }
          if (v24 != 255)
          {
            if (v24 != 3)
            {
              v33 = 0;
              goto LABEL_91;
            }
            goto LABEL_56;
          }
LABEL_62:
          v33 = 255;
          goto LABEL_91;
        }
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021461A0);
        v21 = qword_1022A02A8;
        if (!os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
        {
LABEL_65:
          if (!sub_1001BFF7C(115, 0))
            return;
          bzero(&buf, 0x65CuLL);
          if (qword_1022A02A0 != -1)
            dispatch_once(&qword_1022A02A0, &stru_1021461A0);
          v37 = *(_DWORD *)a1;
          if (*(_DWORD *)a1 != 1)
          {
            if (v37 == 255)
            {
LABEL_152:
              v72 = 67240192;
              v73 = v37;
              LODWORD(v71) = 8;
              _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#BundleInfo,readFromDict,no entry for this bundle type,%{public}d", &v72, v71);
              v57 = (char *)v59;
              sub_100512490("Generic", 1, 0, 0, "void CLTelephonyService_Type::BundleInfo::readFromDict(NSDictionary *)", "%s\n", v59);
              goto LABEL_195;
            }
            if (v37 != 3)
            {
              v37 = 0;
              goto LABEL_152;
            }
          }
          v37 = 1;
          goto LABEL_152;
        }
        v22 = *(_DWORD *)a1;
        if (*(_DWORD *)a1 != 1)
        {
          if (v22 == 255)
          {
LABEL_64:
            LODWORD(buf) = 67240192;
            HIDWORD(buf) = v22;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "#BundleInfo,readFromDict,no entry for this bundle type,%{public}d", (uint8_t *)&buf, 8u);
            goto LABEL_65;
          }
          if (v22 != 3)
          {
            v22 = 0;
            goto LABEL_64;
          }
        }
        v22 = 1;
        goto LABEL_64;
      }
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021461A0);
      v19 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
      {
        v20 = *(_DWORD *)a1;
        if ((*(_DWORD *)a1 - 2) >= 2)
        {
          if (v20 != 255)
            v20 = 0;
        }
        else
        {
          v20 = 1;
        }
        LODWORD(buf) = 67240192;
        HIDWORD(buf) = v20;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "#BundleInfo,readFromDict,no entry for this sim,%{public}d", (uint8_t *)&buf, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021461A0);
        v26 = *(_DWORD *)a1;
        if ((*(_DWORD *)a1 - 2) >= 2)
        {
          if (v26 != 255)
            v26 = 0;
        }
        else
        {
          v26 = 1;
        }
        v72 = 67240192;
        v73 = v26;
        LODWORD(v71) = 8;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#BundleInfo,readFromDict,no entry for this sim,%{public}d", &v72, v71);
        v57 = (char *)v56;
        sub_100512490("Generic", 1, 0, 0, "void CLTelephonyService_Type::BundleInfo::readFromDict(NSDictionary *)", "%s\n", v56);
        goto LABEL_195;
      }
    }
  }
}

void sub_10059BC3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

uint64_t sub_10059BC60(uint64_t a1)
{
  int v3;
  std::string v4;
  char v5;
  std::string v6;
  char v7;
  _BYTE v8[24];
  _BYTE v9[24];
  _BYTE v10[24];

  sub_1005A93C8((uint64_t)&v3, *(_DWORD *)a1);
  *(_DWORD *)a1 = v3;
  std::string::operator=((std::string *)(a1 + 8), &v4);
  *(_BYTE *)(a1 + 32) = v5;
  std::string::operator=((std::string *)(a1 + 40), &v6);
  *(_BYTE *)(a1 + 64) = v7;
  sub_10052502C(a1 + 72, (uint64_t)v8);
  *(_BYTE *)(a1 + 88) = v8[16];
  sub_10052502C(a1 + 96, (uint64_t)v9);
  *(_BYTE *)(a1 + 112) = v9[16];
  sub_10052502C(a1 + 120, (uint64_t)v10);
  *(_BYTE *)(a1 + 136) = v10[16];
  return sub_1005A94C0((uint64_t)&v3);
}

void sub_10059BD10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1005A94C0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10059C8C0()
{
  operator new();
}

void sub_10059C908()
{
  operator delete();
}

void sub_10059C92C(uint64_t a1, void *a2)
{
  uint64_t v4;
  id *v5;
  _QWORD *v6;
  id v12;
  __CFNotificationCenter *LocalCenter;
  NSObject *v14;
  int v15;
  int v16;
  const char *v17;
  uint8_t *v18;
  _QWORD v19[5];
  _DWORD v20[4];
  uint8_t buf[8];

  v4 = sub_10059CD9C(a1, "CLTelephonyService", a2);
  *(_QWORD *)v4 = off_102145EB8;
  *(_QWORD *)(v4 + 112) = 0;
  v5 = (id *)(v4 + 112);
  *(_QWORD *)(v4 + 120) = 0;
  *(_QWORD *)(v4 + 128) = 0;
  *(_DWORD *)(v4 + 136) = -1;
  *(_QWORD *)(v4 + 144) = 0;
  v6 = (_QWORD *)(v4 + 144);
  *(_QWORD *)(v4 + 152) = 0;
  *(_WORD *)(v4 + 160) = 0;
  __asm { FMOV            V0.2S, #-1.0 }
  *(_QWORD *)(v4 + 164) = _D0;
  sub_10095DFA4(v4 + 176, a2);
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  sub_10059CE38((CFRunLoopSourceRef *)a1);
  v12 = objc_msgSend(*(id *)(a1 + 40), "newTimer");
  *(_QWORD *)(a1 + 112) = v12;
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_10059D418;
  v19[3] = &unk_10212ECA0;
  v19[4] = a1;
  objc_msgSend(v12, "setHandler:", v19);
  if (!*v6 && !sub_10059D970(a1))
    objc_msgSend(*v5, "setNextFireDelay:", 1.0);
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterAddObserver(LocalCenter, (const void *)a1, (CFNotificationCallback)sub_10059D45C, CFSTR("com.apple.locationd.DumpDiagnostics"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  sub_100197040();
  *(_DWORD *)(a1 + 172) = sub_1001AA9A8();
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102146180);
  v14 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v15 = *(_DWORD *)(a1 + 172);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "CELL_LOC: fHardwareType, %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    v16 = *(_DWORD *)(a1 + 172);
    v20[0] = 67109120;
    v20[1] = v16;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "CELL_LOC: fHardwareType, %d", v20);
    v18 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 2, "CLTelephonyService::CLTelephonyService(id<CLIntersiloUniverse>)", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
  operator new();
}

void sub_10059CD00(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(v1 + 720);
  *(_QWORD *)(v1 + 720) = 0;
  if (v6)
    operator delete();
  v7 = *v4;
  *v4 = 0;
  if (v7)
    operator delete();
  sub_10095E1E4(v3);
  sub_1005A95E0(v2, 0);
  sub_10059D67C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10059CD9C(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_102146250;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_10059CE1C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_10059CE38(CFRunLoopSourceRef *a1)
{
  const __CFDictionary *v2;
  io_service_t MatchingService;
  io_service_t v4;
  kern_return_t v5;
  kern_return_t v6;
  NSObject *v7;
  const char *v8;
  NSObject *v9;
  IONotificationPort *v10;
  IONotificationPort *v11;
  kern_return_t v12;
  kern_return_t v13;
  NSObject *v14;
  NSObject *v15;
  CFRunLoopSourceRef RunLoopSource;
  __CFRunLoop *v17;
  NSObject *v18;
  uint8_t *v19;
  io_connect_t connect[2];
  int v21;
  const char *v22;
  uint8_t buf[4];
  const char *v24;

  *(_QWORD *)connect = 0;
  v2 = IOServiceMatching("AppleBaseband");
  MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v2);
  if (MatchingService)
  {
    v4 = MatchingService;
    v5 = IOServiceOpen(MatchingService, mach_task_self_, 0, &connect[1]);
    if (v5)
    {
      v6 = v5;
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146180);
      v7 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v24) = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Could not open service (%#x)", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102146180);
        v21 = 67109120;
        LODWORD(v22) = v6;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Could not open service (%#x)", &v21);
LABEL_48:
        v19 = (uint8_t *)v8;
        sub_100512490("Generic", 1, 0, 2, "void CLTelephonyService::registerBasebandNotifications()", "%s\n", v8);
        if (v19 != buf)
          free(v19);
      }
    }
    else
    {
      v10 = IONotificationPortCreate(kIOMainPortDefault);
      if (v10)
      {
        v11 = v10;
        v12 = IOServiceAddInterestNotification(v10, v4, "IOGeneralInterest", (IOServiceInterestCallback)sub_1005A37D8, a1, connect);
        if (v12)
        {
          v13 = v12;
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_102146180);
          v14 = qword_1022A02D8;
          if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 67109120;
            LODWORD(v24) = v13;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Could not add interest notification on service: %#x", buf, 8u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A02D0 != -1)
              dispatch_once(&qword_1022A02D0, &stru_102146180);
            v21 = 67109120;
            LODWORD(v22) = v13;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Could not add interest notification on service: %#x", &v21);
            goto LABEL_48;
          }
        }
        else
        {
          RunLoopSource = IONotificationPortGetRunLoopSource(v11);
          a1[15] = RunLoopSource;
          if (RunLoopSource)
          {
            v17 = (__CFRunLoop *)sub_100193530();
            CFRunLoopAddSource(v17, a1[15], kCFRunLoopCommonModes);
            return;
          }
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_102146180);
          v18 = qword_1022A02D8;
          if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "Could not create run loop source", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A02D0 != -1)
              dispatch_once(&qword_1022A02D0, &stru_102146180);
            LOWORD(v21) = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Could not create run loop source");
            goto LABEL_48;
          }
        }
      }
      else
      {
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102146180);
        v15 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "Could not create notification port", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_102146180);
          LOWORD(v21) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Could not create notification port", &v21, 2);
          goto LABEL_48;
        }
      }
    }
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    v9 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      v24 = "AppleBaseband";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Could not find %s service", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146180);
      v21 = 136315138;
      v22 = "AppleBaseband";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Could not find %s service", &v21);
      goto LABEL_48;
    }
  }
}

id sub_10059D418(id result)
{
  uint64_t v1;

  v1 = *((_QWORD *)result + 4);
  if (!*(_QWORD *)(v1 + 144))
  {
    result = (id)sub_10059D970(*((_QWORD *)result + 4));
    if ((result & 1) == 0)
      return objc_msgSend(*(id *)(v1 + 112), "setNextFireDelay:", 1.0);
  }
  return result;
}

void sub_10059D45C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v10;
  NSObject *v11;
  id v12;
  _QWORD v13[9];
  os_activity_scope_state_s state;
  char v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;

  CLProfilingIdentify("CLTelephonyService::onDumpDiagnostics");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertOutside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021460C0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v15 = 1;
    v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLTelephonyService::onDumpDiagnostics", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021460C0);
    v11 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2082;
      v21 = "activity";
      v22 = 2050;
      v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLTelephonyService::onDumpDiagnostics\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v15 = 0;
  }
  v12 = objc_msgSend(*(id *)(a2 + 32), "silo");
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1005A9518;
  v13[3] = &unk_1021382B0;
  v13[4] = a2;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  objc_msgSend(v12, "sync:", v13);
  if (v15)
    os_activity_scope_leave(&state);
}

void sub_10059D65C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10059D67C(uint64_t a1)
{
  *(_QWORD *)a1 = off_102146250;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_10059D6F0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_102145EB8;
  v2 = a1[90];
  a1[90] = 0;
  if (v2)
    operator delete();
  v3 = a1[88];
  a1[88] = 0;
  if (v3)
    operator delete();
  sub_10095E1E4(a1 + 22);
  sub_1005A95E0(a1 + 19, 0);
  return sub_10059D67C((uint64_t)a1);
}

void sub_10059D76C(_QWORD *a1)
{
  sub_10059D6F0(a1);
  operator delete();
}

uint64_t sub_10059D790(uint64_t a1)
{
  __CFRunLoop *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  if (*(_QWORD *)(a1 + 120))
  {
    v2 = (__CFRunLoop *)sub_100193530();
    CFRunLoopRemoveSource(v2, *(CFRunLoopSourceRef *)(a1 + 120), kCFRunLoopCommonModes);
    *(_QWORD *)(a1 + 120) = 0;
  }
  objc_msgSend(*(id *)(a1 + 112), "invalidate");

  *(_QWORD *)(a1 + 112) = 0;
  v3 = *(void **)(a1 + 712);
  if (v3)
  {
    objc_msgSend(v3, "shutdown");
    v4 = *(_QWORD *)(a1 + 704);
    *(_QWORD *)(a1 + 704) = 0;
    if (v4)
      operator delete();

    *(_QWORD *)(a1 + 712) = 0;
  }
  v5 = *(void **)(a1 + 728);
  if (v5)
  {
    objc_msgSend(v5, "shutdown");
    v6 = *(_QWORD *)(a1 + 720);
    *(_QWORD *)(a1 + 720) = 0;
    if (v6)
      operator delete();

    *(_QWORD *)(a1 + 728) = 0;
  }
  return sub_10059D850(a1);
}

uint64_t sub_10059D850(uint64_t a1)
{
  const void *v2;
  const void *v3;

  *(_DWORD *)(a1 + 136) = -1;
  v2 = *(const void **)(a1 + 128);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 128) = 0;
  }
  v3 = *(const void **)(a1 + 144);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 144) = 0;
  }
  return 1;
}

const void **sub_10059D898(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v7[6];

  v7[0] = CFSTR("kCLTelephonyServiceResetNotification");
  v7[1] = CFSTR("kCLTelephonyServiceConnectedNotification");
  v7[2] = CFSTR("kCLTelephonyServiceDisconnectedNotification");
  v7[3] = CFSTR("kCallStatusChangeNotification");
  v7[4] = CFSTR("kAtLeastOneVoiceCallInProgress");
  v7[5] = CFSTR("kNoVoiceCallInProgress");
  if (!-[NSArray containsObject:](+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v7, 6), "containsObject:", a2))sub_101900784();
  if (a3)
    sub_10190075C();
  return sub_10018BDE4(a1, a2, 0);
}

BOOL sub_10059D970(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  std::string *p_p;
  std::string *v7;
  const char *v8;
  uint8_t *v9;
  std::string __p;
  CFTypeRef cf;
  _QWORD v12[5];
  int v13;
  std::string *v14;
  uint8_t buf[4];
  std::string *v16;

  v12[0] = 0;
  v12[1] = a1;
  memset(&v12[2], 0, 24);
  v2 = _CTServerConnectionCreate(kCFAllocatorDefault, sub_1000521C4, v12);
  *(_QWORD *)(a1 + 144) = v2;
  if (v2)
  {
    v3 = sub_100193530();
    _CTServerConnectionAddToRunLoop(v2, v3, kCFRunLoopCommonModes);
    _CTServerConnectionRegisterForNotification(*(_QWORD *)(a1 + 144), kCTDaemonReadyNotification);
    _CTServerConnectionRegisterForNotification(*(_QWORD *)(a1 + 144), kCTConnectionInvalidatedNotification);
    _CTServerConnectionRegisterForNotification(*(_QWORD *)(a1 + 144), kCTIndicatorRadioTransmitNotification);
    _CTServerConnectionRegisterForNotification(*(_QWORD *)(a1 + 144), kCTCellMonitorUpdateNotification);
    _CTServerConnectionRegisterForNotification(*(_QWORD *)(a1 + 144), kCTCallStatusChangeNotification);
    _CTServerConnectionRegisterForNotification(*(_QWORD *)(a1 + 144), kCTRegistrationCellChangedNotification);
    _CTServerConnectionRegisterForNotification(*(_QWORD *)(a1 + 144), kCTRadioModuleUplinkChangedNotification);
    if (sub_100762350() || (sub_1001DF9C4() & 1) != 0 || sub_1001DC9E0())
      _CTServerConnectionRegisterForNotification(*(_QWORD *)(a1 + 144), kCTCellularTransmitStateNotification);
    sub_10059DD18(a1);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG) || sub_1001BFF7C(115, 2))
    {
      cf = 0;
      sub_1015A2E04(&__p, "unknown");
      _CTServerConnectionCopyFirmwareVersion(*(_QWORD *)(a1 + 144), &cf);
      if (cf)
      {
        sub_1001C0048((const __CFString *)cf, &__p);
        CFRelease(cf);
        cf = 0;
      }
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146180);
      v4 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315138;
        v16 = p_p;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CT Version: %s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102146180);
        v7 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v7 = (std::string *)__p.__r_.__value_.__r.__words[0];
        v13 = 136315138;
        v14 = v7;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "CT Version: %s", (const char *)&v13);
        v9 = (uint8_t *)v8;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLTelephonyService::setupTelephony()", "%s\n", v8);
        if (v9 != buf)
          free(v9);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  return v2 != 0;
}

void sub_10059DCF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10059DD18(uint64_t a1)
{
  NSObject *v2;
  void **v3;
  uint64_t v5;
  _BYTE *v6;
  char *v7;
  char *v8;
  _BYTE buf[12];
  char v10;
  int v11;
  _BYTE *v12;
  void *__p[2];
  char v14;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102146180);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    sub_1001A486C(CFSTR("kCLTelephonyServiceConnectedNotification"), (uint64_t)__p);
    v3 = v14 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "sending notification for %s", buf, 0xCu);
    if (v14 < 0)
      operator delete(__p[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    v5 = qword_1022A02D8;
    sub_1001A486C(CFSTR("kCLTelephonyServiceConnectedNotification"), (uint64_t)buf);
    if (v10 >= 0)
      v6 = buf;
    else
      v6 = *(_BYTE **)buf;
    v11 = 136315138;
    v12 = v6;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v5, 2, "sending notification for %s", (const char *)&v11);
    v8 = v7;
    if (v10 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLTelephonyService::onTelephonyReady()", "%s\n", v8);
    if (v8 != (char *)__p)
      free(v8);
  }
  (*(void (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)a1 + 264))(a1, CFSTR("kCLTelephonyServiceConnectedNotification"), 0);
  sub_1002395D4(a1);
  sub_10059DF60(a1);
  return 1;
}

void sub_10059DF60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  double v6;
  uint8_t *v7;
  uint8_t *v8;
  NSObject *v9;
  double v10;
  uint8_t *v11;
  const char *v12;
  uint8_t *v13;
  uint64_t v14;
  int v15;
  int v16;
  __int16 v17;
  int v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  int v22;

  *(_BYTE *)(a1 + 161) = 0;
  v2 = *(_QWORD *)(a1 + 144);
  if (v2)
  {
    HIBYTE(v14) = 0;
    v3 = _CTServerConnectionIsInHomeCountry(v2, (char *)&v14 + 7);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102146100);
    v4 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      v20 = HIBYTE(v14);
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "refreshInHomeCountry, inHC, %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102146100);
      v15 = 67109120;
      v16 = HIBYTE(v14);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "refreshInHomeCountry, inHC, %d", &v15);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "void CLTelephonyService::refreshInHomeCountry()", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    if (!(_DWORD)v3)
    {
      *(_BYTE *)(a1 + 161) = HIBYTE(v14) == 1;
      goto LABEL_27;
    }
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102146100);
    v5 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240448;
      v20 = v3;
      v21 = 1026;
      v22 = HIDWORD(v3);
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "_CTServerConnectionIsInHomeCountry failed (%{public}d, %{public}d)", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102146100);
      v15 = 67240448;
      v16 = v3;
      v17 = 1026;
      v18 = HIDWORD(v3);
      LODWORD(v14) = 14;
      v6 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "_CTServerConnectionIsInHomeCountry failed (%{public}d, %{public}d)", &v15, v14);
      v8 = v7;
      sub_100512490("Generic", 1, 0, 0, "void CLTelephonyService::refreshInHomeCountry()", "%s\n", v6);
LABEL_24:
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102146100);
    v9 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "no server connection available", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102146100);
      LOWORD(v15) = 0;
      LODWORD(v14) = 2;
      v10 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "no server connection available", &v15, v14);
      v8 = v11;
      sub_100512490("Generic", 1, 0, 2, "void CLTelephonyService::refreshInHomeCountry()", "%s\n", v10);
      goto LABEL_24;
    }
  }
LABEL_27:
  sub_10059F318((_BYTE *)a1);
}

uint64_t sub_10059E3C8(uint64_t a1, int a2)
{
  const void *v4;
  NSObject *v5;
  void **v6;
  uint64_t v8;
  _BYTE *v9;
  char *v10;
  char *v11;
  _BYTE buf[12];
  char v13;
  int v14;
  _BYTE *v15;
  void *__p[2];
  char v17;

  *(_DWORD *)(a1 + 136) = -1;
  v4 = *(const void **)(a1 + 128);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 128) = 0;
  }
  if (a2)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    v5 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      sub_1001A486C(CFSTR("kCLTelephonyServiceDisconnectedNotification"), (uint64_t)__p);
      v6 = v17 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "sending notification for %s", buf, 0xCu);
      if (v17 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146180);
      v8 = qword_1022A02D8;
      sub_1001A486C(CFSTR("kCLTelephonyServiceDisconnectedNotification"), (uint64_t)buf);
      if (v13 >= 0)
        v9 = buf;
      else
        v9 = *(_BYTE **)buf;
      v14 = 136315138;
      v15 = v9;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v8, 2, "sending notification for %s", (const char *)&v14);
      v11 = v10;
      if (v13 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLTelephonyService::onTelephonyInvalid(BOOL)", "%s\n", v11);
      if (v11 != (char *)__p)
        free(v11);
    }
    (*(void (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)a1 + 264))(a1, CFSTR("kCLTelephonyServiceDisconnectedNotification"), 0);
  }
  return 1;
}

void sub_10059E620(uint64_t a1, float a2, float a3)
{
  NSObject *v6;
  CFNumberRef v7;
  CFNumberRef v8;
  CFTypeRef v9;
  const void *v10;
  CFDictionaryRef v11;
  const __CFDictionary *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  void *values[4];
  uint8_t buf[16];
  const __CFString *v18;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021461E0);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#imd,handleUplinkFreqBwUpdate", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021461E0);
    LOWORD(values[0]) = 0;
    LODWORD(v15) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#imd,handleUplinkFreqBwUpdate", values, v15);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "void CLTelephonyService::handleUplinkFreqBwUpdate(float, float)", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  HIBYTE(v15) = 1;
  *(double *)buf = a2;
  v7 = sub_1005289B8(buf);
  *(double *)buf = a3;
  v8 = sub_1005289B8(buf);
  v9 = sub_10023EC34((_BYTE *)&v15 + 7);
  v10 = v9;
  if (v7 && v8 && v9)
  {
    *(_OWORD *)buf = *(_OWORD *)off_102145FD0;
    v18 = CFSTR("kUplinkBwKey");
    values[0] = (void *)v9;
    values[1] = v7;
    values[2] = v8;
    v11 = CFDictionaryCreate(0, (const void **)buf, (const void **)values, 3, &kCFCopyStringDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    v12 = v11;
    (*(void (**)(uint64_t, const __CFString *, CFDictionaryRef))(*(_QWORD *)a1 + 256))(a1, CFSTR("kUplinkFreqBwNotification"), v11);
  }
  else if (!v7)
  {
    goto LABEL_12;
  }
  CFRelease(v7);
LABEL_12:
  if (v8)
    CFRelease(v8);
  if (v10)
    CFRelease(v10);
}

uint64_t sub_10059E898(uint64_t a1, const __CFDictionary *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  NSObject *v7;
  _BYTE *v8;
  NSObject *v9;
  CFTypeRef v10;
  NSObject *v11;
  const char *v12;
  char *v13;
  NSObject *v14;
  CFDictionaryRef v15;
  NSObject *v16;
  NSObject *v17;
  const char *v19;
  char *v20;
  uint64_t v21;
  _BYTE *v22;
  char *v23;
  char *v24;
  const char *v25;
  char *v26;
  const char *v27;
  char *v28;
  const char *v29;
  char *v30;
  const char *v31;
  char *v32;
  uint64_t v33;
  CFTypeRef cf1;
  _BYTE v35[16];
  void *keys;
  _BYTE v37[12];
  char v38;
  _BYTE values[12];
  _BYTE buf[12];
  char v41;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021461E0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    *(_QWORD *)&buf[4] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#cts,notification,%{public}@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021461E0);
    *(_DWORD *)v37 = 138543362;
    *(_QWORD *)&v37[4] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#cts,notification,%{public}@", v37, 12);
    v20 = (char *)v19;
    sub_100512490("Generic", 1, 0, 2, "void CLTelephonyService::notifyCellularTransmiteState(CFDictionaryRef)", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  sub_1001C1D6C((int)v35, a2);
  cf1 = 0;
  v5 = sub_1001C3D30((uint64_t)v35, kKeyCTCellularTransmitState, &cf1);
  if (cf1)
    v6 = v5;
  else
    v6 = 0;
  if (v6 == 1)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021461E0);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      sub_1001A486C((const __CFString *)cf1, (uint64_t)buf);
      v8 = v41 >= 0 ? buf : *(_BYTE **)buf;
      *(_DWORD *)v37 = 136446210;
      *(_QWORD *)&v37[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#cts,state,%{public}s", v37, 0xCu);
      if (v41 < 0)
        operator delete(*(void **)buf);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021461E0);
      v21 = qword_1022A0078;
      sub_1001A486C((const __CFString *)cf1, (uint64_t)v37);
      if (v38 >= 0)
        v22 = v37;
      else
        v22 = *(_BYTE **)v37;
      *(_DWORD *)values = 136446210;
      *(_QWORD *)&values[4] = v22;
      LODWORD(v33) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v21, 0, "#cts,state,%{public}s", values, v33);
      v24 = v23;
      if (v38 < 0)
        operator delete(*(void **)v37);
      sub_100512490("Generic", 1, 0, 2, "void CLTelephonyService::notifyCellularTransmiteState(CFDictionaryRef)", "%s\n", v24);
      if (v24 != buf)
        free(v24);
    }
    *(_QWORD *)values = 0;
    keys = CFSTR("kCLCellularTransmitStateNotification");
    if (CFEqual(cf1, kCTCellularTransmitStateConnected))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021461E0);
      v9 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#cts,state,connected", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021461E0);
        *(_WORD *)v37 = 0;
        LODWORD(v33) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#cts,state,connected", v37, v33);
        v26 = (char *)v25;
        sub_100512490("Generic", 1, 0, 2, "void CLTelephonyService::notifyCellularTransmiteState(CFDictionaryRef)", "%s\n", v25);
        if (v26 != buf)
          free(v26);
      }
      buf[0] = 1;
      v10 = sub_10023EC34(buf);
    }
    else
    {
      if (!CFEqual(cf1, kCTCellularTransmitStateIdle))
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021461E0);
        v17 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "#cts,state,unknown", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021461E0);
          *(_WORD *)v37 = 0;
          LODWORD(v33) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#cts,state,unknown", v37, v33);
          v32 = (char *)v31;
          sub_100512490("Generic", 1, 0, 2, "void CLTelephonyService::notifyCellularTransmiteState(CFDictionaryRef)", "%s\n", v31);
          if (v32 != buf)
            free(v32);
        }
        goto LABEL_54;
      }
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021461E0);
      v14 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "#cts,state,idle", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021461E0);
        *(_WORD *)v37 = 0;
        LODWORD(v33) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#cts,state,idle", v37, v33);
        v30 = (char *)v29;
        sub_100512490("Generic", 1, 0, 2, "void CLTelephonyService::notifyCellularTransmiteState(CFDictionaryRef)", "%s\n", v29);
        if (v30 != buf)
          free(v30);
      }
      buf[0] = 0;
      v10 = sub_10023EC34(buf);
    }
    *(_QWORD *)values = v10;
    v15 = CFDictionaryCreate(0, (const void **)&keys, (const void **)values, 1, &kCFCopyStringDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    if (v15)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021461E0);
      v16 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v15;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#cts,state,notify,%{public}@", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021461E0);
        *(_DWORD *)v37 = 138543362;
        *(_QWORD *)&v37[4] = v15;
        LODWORD(v33) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#cts,state,notify,%{public}@", v37, v33);
        v28 = (char *)v27;
        sub_100512490("Generic", 1, 0, 2, "void CLTelephonyService::notifyCellularTransmiteState(CFDictionaryRef)", "%s\n", v27);
        if (v28 != buf)
          free(v28);
      }
      (*(void (**)(uint64_t, const __CFString *, CFDictionaryRef))(*(_QWORD *)a1 + 256))(a1, CFSTR("kCLCellularTransmitStateNotification"), v15);
      CFRelease(v15);
    }
LABEL_54:
    if (*(_QWORD *)values)
      CFRelease(*(CFTypeRef *)values);
    return sub_10011A5A8(v35);
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021461E0);
  v11 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning,#cts,state,keyNotPresent", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021461E0);
    *(_WORD *)v37 = 0;
    LODWORD(v33) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,#cts,state,keyNotPresent", v37, v33);
    v13 = (char *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLTelephonyService::notifyCellularTransmiteState(CFDictionaryRef)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  return sub_10011A5A8(v35);
}

void sub_10059F2D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

void sub_10059F318(_BYTE *a1)
{
  void *v2;
  CFDictionaryRef v3;
  const __CFDictionary *v4;
  void *values;
  void *keys;

  v2 = (void *)sub_10023EC34(a1 + 161);
  values = v2;
  keys = CFSTR("kInHomeCountryKey");
  v3 = CFDictionaryCreate(0, (const void **)&keys, (const void **)&values, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  v4 = v3;
  (*(void (**)(_BYTE *, const __CFString *, CFDictionaryRef))(*(_QWORD *)a1 + 256))(a1, CFSTR("kInHomeCountryLegacyNotification"), v3);
  if (v2)
    CFRelease(v2);
}

uint64_t sub_10059F3DC(_QWORD *a1, int *a2)
{
  uint64_t v2;
  uint64_t v5;
  NSObject *v6;
  const __CFString *v7;
  void **v8;
  const void *v9;
  uint64_t v11;
  const __CFString *v12;
  _BYTE *v13;
  char *v14;
  char *v15;
  void *__dst[2];
  uint64_t v17;
  _BYTE buf[12];
  char v19;
  int v20;
  _BYTE *v21;
  void *__p[2];
  uint64_t v23;

  v2 = a1[18];
  if (v2)
  {
    v5 = sub_1001DEC98(a2);
    _CTServerConnectionRegisterForNotification(v2, v5);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102146100);
    v6 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v7 = (const __CFString *)sub_1001DEC98(a2);
      sub_1001A486C(v7, (uint64_t)__p);
      v8 = v23 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CLTelephonyService,registerForNotificationInternal,%s", buf, 0xCu);
      if (SHIBYTE(v23) < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102146100);
      v11 = qword_1022A0028;
      v12 = (const __CFString *)sub_1001DEC98(a2);
      sub_1001A486C(v12, (uint64_t)buf);
      if (v19 >= 0)
        v13 = buf;
      else
        v13 = *(_BYTE **)buf;
      v20 = 136315138;
      v21 = v13;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v11, 2, "CLTelephonyService,registerForNotificationInternal,%s", (const char *)&v20);
      v15 = v14;
      if (v19 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLTelephonyService::registerForNotificationInternal(const CLTelephonyService_Type::Notification &)", "%s\n", v15);
      if (v15 != (char *)__p)
        free(v15);
    }
    v9 = (const void *)sub_1001DEC98(a2);
    if (CFEqual(v9, CFSTR("kInHomeCountryLegacyNotification")))
      sub_10059DF60((uint64_t)a1);
    (*(void (**)(void **__return_ptr, _QWORD *, int *))(*a1 + 160))(__p, a1, a2);
    if (SHIBYTE(v23) < 0)
    {
      sub_100115CE4(__dst, __p[0], (unint64_t)__p[1]);
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)__p;
      v17 = v23;
    }
    sub_10096BDF8((uint64_t)(a1 + 22), (uint64_t)__dst);
    if (SHIBYTE(v17) < 0)
      operator delete(__dst[0]);
    if (SHIBYTE(v23) < 0)
      operator delete(__p[0]);
  }
  return 1;
}

void sub_10059F6A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10059F6E4(_QWORD *a1, int *a2)
{
  uint64_t v2;
  uint64_t v5;
  NSObject *v6;
  const __CFString *v7;
  void **v8;
  uint64_t v10;
  const __CFString *v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  void *__dst[2];
  uint64_t v16;
  _BYTE buf[12];
  char v18;
  int v19;
  _BYTE *v20;
  void *__p[2];
  uint64_t v22;

  v2 = a1[18];
  if (v2)
  {
    v5 = sub_1001DEC98(a2);
    _CTServerConnectionUnregisterForNotification(v2, v5);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102146100);
    v6 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v7 = (const __CFString *)sub_1001DEC98(a2);
      sub_1001A486C(v7, (uint64_t)__p);
      v8 = v22 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CLTelephonyService,unregisterForNotificationInternal,%s", buf, 0xCu);
      if (SHIBYTE(v22) < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102146100);
      v10 = qword_1022A0028;
      v11 = (const __CFString *)sub_1001DEC98(a2);
      sub_1001A486C(v11, (uint64_t)buf);
      if (v18 >= 0)
        v12 = buf;
      else
        v12 = *(_BYTE **)buf;
      v19 = 136315138;
      v20 = v12;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v10, 2, "CLTelephonyService,unregisterForNotificationInternal,%s", (const char *)&v19);
      v14 = v13;
      if (v18 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLTelephonyService::unregisterForNotificationInternal(const CLTelephonyService_Type::Notification &)", "%s\n", v14);
      if (v14 != (char *)__p)
        free(v14);
    }
    (*(void (**)(void **__return_ptr, _QWORD *, int *))(*a1 + 160))(__p, a1, a2);
    if (SHIBYTE(v22) < 0)
    {
      sub_100115CE4(__dst, __p[0], (unint64_t)__p[1]);
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)__p;
      v16 = v22;
    }
    sub_10096BFFC((uint64_t)(a1 + 22), (unsigned __int8 *)__dst);
    if (SHIBYTE(v16) < 0)
      operator delete(__dst[0]);
    if (SHIBYTE(v22) < 0)
      operator delete(__p[0]);
  }
  return 1;
}

void sub_10059F990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_10059F9CC@<W0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  const __CFString *v3;

  v3 = (const __CFString *)sub_1001DEC98(a1);
  return sub_1001A486C(v3, a2);
}

uint64_t sub_10059F9F4(int a1, const __CFString *cf1)
{
  NSObject *v4;
  void **v5;
  uint64_t v6;
  _BYTE *v7;
  char *v8;
  char *v9;
  _BYTE buf[12];
  char v11;
  int v12;
  _BYTE *v13;
  void *__p[2];
  char v15;

  if (CFEqual(cf1, kCTRegistrationRadioAccessTechnologyGSM))
    return 0;
  if (CFEqual(cf1, kCTRegistrationRadioAccessTechnologyUTRAN2))
    return 9;
  if (CFEqual(cf1, kCTRegistrationRadioAccessTechnologyGSMCompact))
    return 1;
  if (CFEqual(cf1, kCTRegistrationRadioAccessTechnologyUTRAN))
    return 2;
  if (CFEqual(cf1, kCTRegistrationRadioAccessTechnologyCDMA1x))
    return 3;
  if (CFEqual(cf1, kCTRegistrationRadioAccessTechnologyCDMAEVDO))
    return 4;
  if (CFEqual(cf1, kCTRegistrationRadioAccessTechnologyCDMAHybrid)
    || CFEqual(cf1, kCTRegistrationRadioAccessTechnologyeHRPD))
  {
    return 5;
  }
  if (CFEqual(cf1, kCTRegistrationRadioAccessTechnologyLTE))
    return 6;
  if (CFEqual(cf1, kCTRegistrationRadioAccessTechnologyNR))
    return 10;
  if (!CFEqual(cf1, kCTRegistrationRadioAccessTechnologyUnknown))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    v4 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      sub_1001A486C(cf1, (uint64_t)__p);
      v5 = v15 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "CELL_LOC: unknown registration technology, %{public}s", buf, 0xCu);
      if (v15 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146180);
      v6 = qword_1022A02D8;
      sub_1001A486C(cf1, (uint64_t)buf);
      if (v11 >= 0)
        v7 = buf;
      else
        v7 = *(_BYTE **)buf;
      v12 = 136446210;
      v13 = v7;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v6, 17, "CELL_LOC: unknown registration technology, %{public}s", &v12, 12);
      v9 = v8;
      if (v11 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 0, "RadioAccessTechnology CLTelephonyService::fromRadioAccessTechnology(CFStringRef)", "%s\n", v9);
      if (v9 != (char *)__p)
        free(v9);
    }
  }
  return 11;
}

BOOL sub_10059FD58(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  _BOOL4 v8;
  _BOOL8 result;
  double v10;
  uint8_t *v11;
  uint8_t *v12;
  NSObject *v13;
  double v14;
  uint8_t *v15;
  _WORD v16[8];
  uint8_t buf[4];
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  int v22;

  if (!*(_BYTE *)(a1 + 160))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    v4 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v5 = *(unsigned __int8 *)(a1 + 160);
      *(_DWORD *)buf = 68289282;
      v18 = 0;
      v19 = 2082;
      v20 = "";
      v21 = 1026;
      v22 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"DaemonNotReady for CT SPI\", \"fDaemonReady\":%{public}hhd}", buf, 0x18u);
    }
  }
  v6 = *(_QWORD *)(a1 + 144);
  if (v6)
  {
    if (!_CTServerConnectionGetRadioAccessTechnology(v6, a2))
      return 1;
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "_CTServerConnectionGetRadioAccessTechnology failed", buf, 2u);
    }
    v8 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v8)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146180);
      v16[0] = 0;
      v10 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "_CTServerConnectionGetRadioAccessTechnology failed", v16, 2);
      v12 = v11;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLTelephonyService::getRadioAccessTechnology(CFStringRef &)", "%s\n", v10);
LABEL_24:
      if (v12 != buf)
        free(v12);
      return 0;
    }
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    v13 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "currently not connected to telephony service", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146180);
      v16[0] = 0;
      v14 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "currently not connected to telephony service", v16, 2);
      v12 = v15;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLTelephonyService::getRadioAccessTechnology(CFStringRef &)", "%s\n", v14);
      goto LABEL_24;
    }
  }
  return result;
}

BOOL sub_1005A00C4(uint64_t a1, SInt32 *a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  NSObject *v12;
  const char *v14;
  uint8_t *v15;
  _WORD v16[8];
  CFStringRef str[2];
  uint8_t buf[4];
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  int v23;

  if (!*(_BYTE *)(a1 + 160))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    v4 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v5 = *(unsigned __int8 *)(a1 + 160);
      *(_DWORD *)buf = 68289282;
      v19 = 0;
      v20 = 2082;
      v21 = "";
      v22 = 1026;
      v23 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"DaemonNotReady for CT SPI\", \"fDaemonReady\":%{public}hhd}", buf, 0x18u);
    }
  }
  v6 = *(_QWORD *)(a1 + 144);
  if (!v6)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    v12 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "currently not connected to telephony service", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146180);
      LOWORD(str[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "currently not connected to telephony service", str, 2);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLTelephonyService::getServingMcc(int &)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    return 0;
  }
  str[0] = 0;
  v7 = _CTServerConnectionCopyCountryCode(v6, str);
  v8 = v7 == 0;
  if (v7)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    v9 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "_CTServerConnectionCopyCountryCode failed", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146180);
      v16[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "_CTServerConnectionCopyCountryCode failed", v16, 2);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLTelephonyService::getServingMcc(int &)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    goto LABEL_25;
  }
  if (!str[0])
    return 0;
  *a2 = CFStringGetIntValue(str[0]);
LABEL_25:
  if (str[0])
    CFRelease(str[0]);
  return v8;
}

BOOL sub_1005A0470(uint64_t a1, SInt32 *a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  NSObject *v12;
  const char *v14;
  uint8_t *v15;
  _WORD v16[8];
  CFStringRef str[2];
  uint8_t buf[4];
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  int v23;

  if (!*(_BYTE *)(a1 + 160))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    v4 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v5 = *(unsigned __int8 *)(a1 + 160);
      *(_DWORD *)buf = 68289282;
      v19 = 0;
      v20 = 2082;
      v21 = "";
      v22 = 1026;
      v23 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"DaemonNotReady for CT SPI\", \"fDaemonReady\":%{public}hhd}", buf, 0x18u);
    }
  }
  v6 = *(_QWORD *)(a1 + 144);
  if (!v6)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    v12 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "currently not connected to telephony service", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146180);
      LOWORD(str[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "currently not connected to telephony service", str, 2);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLTelephonyService::getServingMnc(int &)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    return 0;
  }
  str[0] = 0;
  v7 = _CTServerConnectionCopyNetworkCode(v6, str);
  v8 = v7 == 0;
  if (v7)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    v9 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "_CTServerConnectionCopyNetworkCode failed", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146180);
      v16[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "_CTServerConnectionCopyNetworkCode failed", v16, 2);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLTelephonyService::getServingMnc(int &)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    goto LABEL_25;
  }
  if (!str[0])
    return 0;
  *a2 = CFStringGetIntValue(str[0]);
LABEL_25:
  if (str[0])
    CFRelease(str[0]);
  return v8;
}

BOOL sub_1005A081C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  int v7;
  uint64_t v8;
  NSObject *v9;
  _BOOL4 v10;
  _BOOL8 result;
  uint8_t *v12;
  double v13;
  NSObject *v14;
  double v15;
  uint8_t *v16;
  uint8_t *v17;
  NSObject *v18;
  _BOOL4 v19;
  _QWORD v20[2];
  uint8_t buf[4];
  int v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;

  if (!*(_BYTE *)(a1 + 160))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    v6 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v7 = *(unsigned __int8 *)(a1 + 160);
      *(_DWORD *)buf = 68289282;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 1026;
      v26 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"DaemonNotReady for CT SPI\", \"fDaemonReady\":%{public}hhd}", buf, 0x18u);
    }
  }
  v8 = *(_QWORD *)(a1 + 144);
  if (v8)
  {
    if (_CTServerConnectionGetLocationAreaCode(v8, a2))
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146180);
      v9 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "_CTServerConnectionGetLocationAreaCode failed", buf, 2u);
      }
      v10 = sub_1001BFF7C(115, 0);
      result = 0;
      if (v10)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102146180);
        LOWORD(v20[0]) = 0;
        v13 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "_CTServerConnectionGetLocationAreaCode failed", v20, 2, v20[0]);
LABEL_33:
        v17 = v12;
        sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLTelephonyService::getServingCellLacCi(int &, int &)", "%s\n", v13);
LABEL_34:
        if (v17 != buf)
          free(v17);
        return 0;
      }
    }
    else
    {
      if (!_CTServerConnectionGetCellID(*(_QWORD *)(a1 + 144), a3))
        return 1;
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146180);
      v18 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "_CTServerConnectionGetCellID failed", buf, 2u);
      }
      v19 = sub_1001BFF7C(115, 0);
      result = 0;
      if (v19)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102146180);
        LOWORD(v20[0]) = 0;
        v13 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "_CTServerConnectionGetCellID failed", v20, 2, v20[0]);
        goto LABEL_33;
      }
    }
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    v14 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "currently not connected to telephony service", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146180);
      LOWORD(v20[0]) = 0;
      v15 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "currently not connected to telephony service", v20, 2);
      v17 = v16;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLTelephonyService::getServingCellLacCi(int &, int &)", "%s\n", v15);
      goto LABEL_34;
    }
  }
  return result;
}

uint64_t sub_1005A0C80(CFDictionaryRef *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  int v5;
  NSObject *v6;
  unint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  NSObject *v10;
  char *v11;
  _DWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  int v19;
  char *v20;
  uint64_t v22;
  int v23;
  _BYTE v24[20];
  int v25;
  int v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  uint8_t buf[4];
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;

  v25 = 0;
  sub_1001C1D6C((int)v24, *a1);
  v3 = kCTCellMonitorDerivedMCC;
  v4 = sub_10052A8CC((uint64_t)v24);
  if (v4 >= 1)
  {
    v5 = 0;
    v23 = 67240448;
    do
    {
      if (sub_1001C1194((uint64_t)v24, v3, &v25))
      {
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102146180);
        v6 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67109632;
          v33 = v5;
          v34 = 1024;
          v35 = v4;
          v36 = 1024;
          v37 = v25;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CELL_LOC: Adding MCC %d / %d : %d", buf, 0x14u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_102146180);
          v26 = 67109632;
          v27 = v5;
          v28 = 1024;
          v29 = v4;
          v30 = 1024;
          v31 = v25;
          v20 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "CELL_LOC: Adding MCC %d / %d : %d", &v26, 20, v23);
          sub_100512490("Generic", 1, 0, 2, "static void CLTelephonyService::derivedMccFromMonitorDict(const CFDictionaryRef &, DerivedMccVector &)", "%s\n", v20);
          if (v20 != (char *)buf)
            free(v20);
        }
        v8 = *(_DWORD **)(a2 + 8);
        v7 = *(_QWORD *)(a2 + 16);
        if ((unint64_t)v8 >= v7)
        {
          v12 = *(_DWORD **)a2;
          v13 = ((uint64_t)v8 - *(_QWORD *)a2) >> 2;
          v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 62)
            sub_100259694();
          v15 = v7 - (_QWORD)v12;
          if (v15 >> 1 > v14)
            v14 = v15 >> 1;
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
            v16 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v16 = v14;
          if (v16)
          {
            v17 = (char *)sub_100260634(a2 + 16, v16);
            v12 = *(_DWORD **)a2;
            v8 = *(_DWORD **)(a2 + 8);
          }
          else
          {
            v17 = 0;
          }
          v18 = &v17[4 * v13];
          *(_DWORD *)v18 = v25;
          v9 = v18 + 4;
          while (v8 != v12)
          {
            v19 = *--v8;
            *((_DWORD *)v18 - 1) = v19;
            v18 -= 4;
          }
          *(_QWORD *)a2 = v18;
          *(_QWORD *)(a2 + 8) = v9;
          *(_QWORD *)(a2 + 16) = &v17[4 * v16];
          if (v12)
            operator delete(v12);
        }
        else
        {
          *v8 = v25;
          v9 = v8 + 1;
        }
        *(_QWORD *)(a2 + 8) = v9;
      }
      else
      {
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102146180);
        v10 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = v23;
          v33 = v5;
          v34 = 1026;
          v35 = v4;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "CELL_LOC: can't get MCC %{public}d / %{public}d", buf, 0xEu);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_102146180);
          v26 = v23;
          v27 = v5;
          v28 = 1026;
          v29 = v4;
          LODWORD(v22) = 14;
          v11 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "CELL_LOC: can't get MCC %{public}d / %{public}d", &v26, v22);
          sub_100512490("Generic", 1, 0, 0, "static void CLTelephonyService::derivedMccFromMonitorDict(const CFDictionaryRef &, DerivedMccVector &)", "%s\n", v11);
          if (v11 != (char *)buf)
            free(v11);
        }
      }
      ++v5;
    }
    while (v5 != v4);
  }
  return sub_10011A5A8(v24);
}

void sub_1005A10D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005A1100(uint64_t a1)
{
  void *v2;

  if (*(char *)(a1 + 343) < 0)
    operator delete(*(void **)(a1 + 320));
  v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(_QWORD *)(a1 + 96) = v2;
    operator delete(v2);
  }
  return a1;
}

BOOL sub_1005A1140(uint64_t a1, uint64_t *a2, int a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  NSObject *v10;
  uint64_t v11;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  const char *v16;
  uint8_t *v17;
  CFTypeRef cf;
  int v19;
  uint64_t v20;
  uint8_t buf[4];
  uint64_t v22;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102146180);
  v6 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CELL_LOC: getting current serving cell", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    LOWORD(v19) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "CELL_LOC: getting current serving cell", &v19, 2);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLTelephonyService::extractServingCellsFromDictionary(std::vector<CLCell> &, BOOL)", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  cf = 0;
  v8 = *a2;
  v7 = a2[1];
  if (v7 != *a2)
  {
    do
    {
      v7 -= 696;
      sub_1005A9904((uint64_t)(a2 + 2), v7);
    }
    while (v7 != v8);
  }
  a2[1] = v8;
  if (sub_10003697C(a1, (uint64_t *)&cf))
    v9 = sub_1001C2218(a2, (CFArrayRef)cf, a3);
  else
    v9 = 0;
  if (cf)
    CFRelease(cf);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102146180);
  v10 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v11 = 0x66FD0EB66FD0EB67 * ((a2[1] - *a2) >> 3);
    *(_DWORD *)buf = 134217984;
    v22 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "CELL_LOC: getting current serving cells %lu", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    v15 = 0x66FD0EB66FD0EB67 * ((a2[1] - *a2) >> 3);
    v19 = 134217984;
    v20 = v15;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "CELL_LOC: getting current serving cells %lu", &v19);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLTelephonyService::extractServingCellsFromDictionary(std::vector<CLCell> &, BOOL)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  return v9;
}

uint64_t sub_1005A14D8()
{
  return 0;
}

BOOL sub_1005A14E0(CFDictionaryRef *a1, _DWORD *a2)
{
  __int128 v3;
  _BOOL8 v4;
  NSObject *v5;
  void **v6;
  uint64_t v8;
  uint8_t *v9;
  char *v10;
  const char *v11;
  uint8_t v12[16];
  uint8_t buf[8];
  __int16 v14;
  void **v15;
  char v16;
  _DWORD v17[2];
  __int16 v18;
  uint8_t *v19;
  void *__p[2];
  char v21;

  sub_1001C1D6C((int)v12, *a1);
  *(_QWORD *)&v3 = -1;
  *((_QWORD *)&v3 + 1) = -1;
  *((_OWORD *)a2 + 1) = v3;
  *(_OWORD *)a2 = v3;
  sub_1001C1D70((uint64_t)v12, "scdmaCellFromCellMonitorDict");
  sub_1001C1194((uint64_t)v12, kCTCellMonitorMCC, a2);
  sub_1001C1194((uint64_t)v12, kCTCellMonitorMNC, a2 + 1);
  sub_1001C1194((uint64_t)v12, kCTCellMonitorLAC, a2 + 2);
  sub_1001C1194((uint64_t)v12, kCTCellMonitorCellId, a2 + 3);
  sub_1001C1194((uint64_t)v12, kCTCellMonitorUARFCN, a2 + 4);
  sub_1001C1194((uint64_t)v12, kCTCellMonitorARFCN, a2 + 4);
  sub_1001C1194((uint64_t)v12, kCTCellMonitorPSC, a2 + 5);
  sub_1001C1194((uint64_t)v12, kCTCellMonitorSCN, a2 + 5);
  sub_1001C1194((uint64_t)v12, kCTCellMonitorRSCP, a2 + 6);
  sub_1001C1194((uint64_t)v12, kCTCellMonitorECN0, a2 + 7);
  v4 = 0;
  if ((int)*a2 >= 1 && (a2[1] & 0x80000000) == 0)
    v4 = a2[3] >= 0;
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102146180);
  v5 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    sub_1005A18B4(a2, __p);
    v6 = v21 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)&buf[4] = v4;
    v14 = 2080;
    v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CELL_LOC: got cell from dict, result, %d, %s", buf, 0x12u);
    if (v21 < 0)
      operator delete(__p[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    v8 = qword_1022A02D8;
    sub_1005A18B4(a2, buf);
    if (v16 >= 0)
      v9 = buf;
    else
      v9 = *(uint8_t **)buf;
    v17[0] = 67109378;
    v17[1] = v4;
    v18 = 2080;
    v19 = v9;
    LODWORD(v11) = 18;
    v10 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v8, 2, "CELL_LOC: got cell from dict, result, %d, %s", v17, v11);
    if (v16 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "static BOOL CLTelephonyService::scdmaCellFromCellMonitorDict(const CFDictionaryRef &, ScdmaCell &)", "%s\n", v10);
    if (v10 != (char *)__p)
      free(v10);
  }
  sub_10011A5A8(v12);
  return v4;
}

void sub_1005A188C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005A18B4@<X0>(unsigned int *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  void *__p[2];
  char v25;
  _QWORD v26[2];
  uint64_t v27;
  _QWORD v28[10];
  char v29;
  uint64_t v30;

  sub_100263E50((uint64_t)v26);
  v4 = sub_100263F7C(&v27, (uint64_t)"[", 1);
  v5 = sub_100263F7C(v4, (uint64_t)" MCC=", 5);
  v6 = (_QWORD *)std::ostream::operator<<(v5, *a1);
  v7 = sub_100263F7C(v6, (uint64_t)" AND MNC=", 9);
  v8 = (_QWORD *)std::ostream::operator<<(v7, a1[1]);
  v9 = sub_100263F7C(v8, (uint64_t)" AND LAC=", 9);
  v10 = (_QWORD *)std::ostream::operator<<(v9, a1[2]);
  v11 = sub_100263F7C(v10, (uint64_t)" AND CI=", 8);
  v12 = (_QWORD *)std::ostream::operator<<(v11, a1[3]);
  v13 = sub_100263F7C(v12, (uint64_t)" AND UARFCN=", 12);
  v14 = (_QWORD *)std::ostream::operator<<(v13, a1[4]);
  v15 = sub_100263F7C(v14, (uint64_t)" AND PSC=", 9);
  v16 = (_QWORD *)std::ostream::operator<<(v15, a1[5]);
  v17 = sub_100263F7C(v16, (uint64_t)" AND RSCP=", 10);
  v18 = (_QWORD *)std::ostream::operator<<(v17, a1[6]);
  v19 = sub_100263F7C(v18, (uint64_t)" AND ECN0=", 10);
  v20 = (_QWORD *)std::ostream::operator<<(v19, a1[7]);
  sub_100263F7C(v20, (uint64_t)" ]", 2);
  std::stringbuf::str(__p, v28);
  if (v25 >= 0)
    v21 = (char *)__p;
  else
    v21 = (char *)__p[0];
  sub_1015A2E04(a2, v21);
  if (v25 < 0)
    operator delete(__p[0]);
  *(_QWORD *)((char *)v26
  v27 = v22;
  if (v29 < 0)
    operator delete((void *)v28[8]);
  std::streambuf::~streambuf(v28);
  return std::ios::~ios(&v30);
}

void sub_1005A1A70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

BOOL sub_1005A1AA0(CFDictionaryRef *a1, _DWORD *a2)
{
  __int128 v3;
  _BOOL8 v4;
  NSObject *v5;
  void **v6;
  uint64_t v8;
  uint8_t *v9;
  char *v10;
  const char *v11;
  uint8_t v12[16];
  uint8_t buf[8];
  __int16 v14;
  void **v15;
  char v16;
  _DWORD v17[2];
  __int16 v18;
  uint8_t *v19;
  void *__p[2];
  char v21;

  sub_1001C1D6C((int)v12, *a1);
  *(_QWORD *)&v3 = -1;
  *((_QWORD *)&v3 + 1) = -1;
  *((_OWORD *)a2 + 1) = v3;
  *(_OWORD *)a2 = v3;
  sub_1001C1D70((uint64_t)v12, "gsmCellFromCellMonitorDict");
  sub_1001C1194((uint64_t)v12, kCTCellMonitorMCC, a2);
  sub_1001C1194((uint64_t)v12, kCTCellMonitorMNC, a2 + 1);
  sub_1001C1194((uint64_t)v12, kCTCellMonitorLAC, a2 + 2);
  sub_1001C1194((uint64_t)v12, kCTCellMonitorCellId, a2 + 3);
  sub_1001C1194((uint64_t)v12, kCTCellMonitorUARFCN, a2 + 4);
  sub_1001C1194((uint64_t)v12, kCTCellMonitorARFCN, a2 + 4);
  sub_1001C1194((uint64_t)v12, kCTCellMonitorPSC, a2 + 5);
  sub_1001C1194((uint64_t)v12, kCTCellMonitorSCN, a2 + 5);
  sub_1001C1194((uint64_t)v12, kCTCellMonitorRSCP, a2 + 6);
  sub_1001C1194((uint64_t)v12, kCTCellMonitorECN0, a2 + 7);
  v4 = 0;
  if ((int)*a2 >= 1 && (a2[1] & 0x80000000) == 0)
    v4 = a2[3] >= 0;
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102146180);
  v5 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    sub_1005A18B4(a2, __p);
    v6 = v21 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)&buf[4] = v4;
    v14 = 2080;
    v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CELL_LOC: got cell from dict, result, %d, %s", buf, 0x12u);
    if (v21 < 0)
      operator delete(__p[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    v8 = qword_1022A02D8;
    sub_1005A18B4(a2, buf);
    if (v16 >= 0)
      v9 = buf;
    else
      v9 = *(uint8_t **)buf;
    v17[0] = 67109378;
    v17[1] = v4;
    v18 = 2080;
    v19 = v9;
    LODWORD(v11) = 18;
    v10 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v8, 2, "CELL_LOC: got cell from dict, result, %d, %s", v17, v11);
    if (v16 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "static BOOL CLTelephonyService::gsmCellFromCellMonitorDict(const CFDictionaryRef &, Cell &)", "%s\n", v10);
    if (v10 != (char *)__p)
      free(v10);
  }
  sub_10011A5A8(v12);
  return v4;
}

void sub_1005A1E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

BOOL sub_1005A1E74(CFDictionaryRef *a1, uint64_t a2)
{
  int v3;
  NSObject *v4;
  _BYTE *v5;
  _BOOL8 v7;
  NSObject *v8;
  uint64_t v10;
  _BYTE *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  CFTypeRef cf1;
  uint8_t v16[16];
  _BYTE buf[12];
  char v18;
  int v19;
  _BYTE *v20;
  _BYTE __p[20];
  char v22;

  sub_1001C1D6C((int)v16, *a1);
  sub_1001C1D70((uint64_t)v16, "nrCellFromCellMonitorDict");
  *(_OWORD *)&__p[4] = 0uLL;
  *(_QWORD *)(a2 + 64) = -1;
  *(_QWORD *)(a2 + 72) = -1;
  *(_DWORD *)(a2 + 8) = -1;
  *(_QWORD *)(a2 + 16) = -1;
  *(_QWORD *)(a2 + 24) = -1;
  *(_DWORD *)(a2 + 32) = -1;
  *(_QWORD *)a2 = -1;
  *(_OWORD *)(a2 + 36) = *(_OWORD *)__p;
  *(_DWORD *)(a2 + 52) = *(_DWORD *)&__p[16];
  *(_QWORD *)(a2 + 56) = -1;
  *(_QWORD *)(a2 + 80) = 0xFFFFFFFF00000000;
  *(_DWORD *)(a2 + 88) = -1;
  sub_1001C1194((uint64_t)v16, kCTCellMonitorMCC, (_DWORD *)a2);
  sub_1001C1194((uint64_t)v16, kCTCellMonitorMNC, (_DWORD *)(a2 + 4));
  sub_1001C1194((uint64_t)v16, kCTCellMonitorTAC, (_DWORD *)(a2 + 8));
  sub_100526324((uint64_t)v16, kCTCellMonitorCellId, (_QWORD *)(a2 + 16));
  sub_1001C1194((uint64_t)v16, kCTCellMonitorNRARFCN, (_DWORD *)(a2 + 24));
  cf1 = 0;
  sub_1001C3D30((uint64_t)v16, kCTCellMonitorCellType, &cf1);
  if (CFEqual(cf1, kCTCellMonitorCellTypeServing))
    sub_1001C1194((uint64_t)v16, kCTCellMonitorPID, (_DWORD *)(a2 + 28));
  if (CFEqual(cf1, kCTCellMonitorCellTypeNeighbor))
    sub_1001C1194((uint64_t)v16, kCTCellMonitorPCI, (_DWORD *)(a2 + 28));
  sub_1001C1194((uint64_t)v16, kCTCellMonitorRSRP, (_DWORD *)(a2 + 56));
  sub_1001C1194((uint64_t)v16, kCTCellMonitorRSRQ, (_DWORD *)(a2 + 60));
  sub_1001C1194((uint64_t)v16, kCTCellMonitorBandInfo, (_DWORD *)(a2 + 32));
  sub_1001C1194((uint64_t)v16, kCTCellMonitorSCS, (_DWORD *)(a2 + 64));
  sub_1001C1194((uint64_t)v16, kCTCellMonitorGSCN, (_DWORD *)(a2 + 68));
  sub_1001C1194((uint64_t)v16, kCTCellMonitorBandwidth, (_DWORD *)(a2 + 72));
  sub_1001C1194((uint64_t)v16, kCTCellMonitorNeighborType, (_DWORD *)(a2 + 84));
  sub_1001C1194((uint64_t)v16, kCTCellMonitorPMax, (_DWORD *)(a2 + 76));
  sub_1001C1194((uint64_t)v16, kCTCellMonitorThroughput, (_DWORD *)(a2 + 80));
  sub_1001C1194((uint64_t)v16, kCTCellMonitorBWPSupport, (_DWORD *)(a2 + 88));
  v14 = 0;
  if (sub_1001C1194((uint64_t)v16, kCTCellMonitorSectorLat, (_DWORD *)&v14 + 1))
  {
    if (sub_1001C1194((uint64_t)v16, kCTCellMonitorSectorLong, &v14))
    {
      v3 = v14;
      if (v14)
      {
        *(double *)(a2 + 40) = (double)SHIDWORD(v14) * 0.0000694444444;
        *(double *)(a2 + 48) = (double)v3 * 0.0000694444444;
      }
    }
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102146200);
  v4 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    sub_1005A2548((unsigned int *)a2, __p);
    v5 = v22 >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "nrCell populated from CT: %s", buf, 0xCu);
    if (v22 < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102146200);
    v10 = qword_1022A0048;
    sub_1005A2548((unsigned int *)a2, buf);
    if (v18 >= 0)
      v11 = buf;
    else
      v11 = *(_BYTE **)buf;
    v19 = 136315138;
    v20 = v11;
    v12 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v10, 2, "nrCell populated from CT: %s", (const char *)&v19);
    if (v18 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "static BOOL CLTelephonyService::nrCellFromCellMonitorDict(const CFDictionaryRef &, NrCell &)", "%s\n", v12);
    if (v12 != __p)
      free(v12);
  }
  v7 = *(int *)a2 > 0 && *(int *)(a2 + 4) >= 0;
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102146200);
  v8 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "nrCell is valid from CT: %d", __p, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102146200);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v7;
    v13 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0048, 2, "nrCell is valid from CT: %d", buf);
    sub_100512490("Generic", 1, 0, 2, "static BOOL CLTelephonyService::nrCellFromCellMonitorDict(const CFDictionaryRef &, NrCell &)", "%s\n", v13);
    if (v13 != __p)
      free(v13);
  }
  sub_10011A5A8(v16);
  return v7;
}

void sub_1005A2514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005A2548@<X0>(unsigned int *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  char *v29;
  uint64_t v30;
  void *__p[2];
  char v33;
  _QWORD v34[2];
  uint64_t v35;
  _QWORD v36[10];
  char v37;
  uint64_t v38;

  sub_100263E50((uint64_t)v34);
  v4 = sub_100263F7C(&v35, (uint64_t)"[", 1);
  v5 = sub_100263F7C(v4, (uint64_t)" MCC=", 5);
  v6 = (_QWORD *)std::ostream::operator<<(v5, *a1);
  v7 = sub_100263F7C(v6, (uint64_t)" AND MNC=", 9);
  v8 = (_QWORD *)std::ostream::operator<<(v7, a1[1]);
  v9 = sub_100263F7C(v8, (uint64_t)" AND TAC=", 9);
  v10 = (_QWORD *)std::ostream::operator<<(v9, a1[2]);
  v11 = sub_100263F7C(v10, (uint64_t)" AND CI=", 8);
  v12 = (_QWORD *)std::ostream::operator<<(v11, *((_QWORD *)a1 + 2));
  v13 = sub_100263F7C(v12, (uint64_t)" AND NRARFCN=", 13);
  v14 = (_QWORD *)std::ostream::operator<<(v13, a1[6]);
  v15 = sub_100263F7C(v14, (uint64_t)" AND PID=", 9);
  v16 = (_QWORD *)std::ostream::operator<<(v15, a1[7]);
  v17 = sub_100263F7C(v16, (uint64_t)" AND RSCP=", 10);
  v18 = (_QWORD *)std::ostream::operator<<(v17, a1[14]);
  v19 = sub_100263F7C(v18, (uint64_t)" AND ECN0=", 10);
  v20 = (_QWORD *)std::ostream::operator<<(v19, a1[15]);
  v21 = sub_100263F7C(v20, (uint64_t)" AND BANDINFO=", 14);
  v22 = (_QWORD *)std::ostream::operator<<(v21, a1[8]);
  v23 = sub_100263F7C(v22, (uint64_t)" AND SCS=", 9);
  v24 = (_QWORD *)std::ostream::operator<<(v23, a1[16]);
  v25 = sub_100263F7C(v24, (uint64_t)" AND GSCN=", 10);
  v26 = (_QWORD *)std::ostream::operator<<(v25, a1[17]);
  v27 = sub_100263F7C(v26, (uint64_t)" AND BANDWIDTH=", 15);
  v28 = (_QWORD *)std::ostream::operator<<(v27, a1[18]);
  sub_100263F7C(v28, (uint64_t)" ]", 2);
  std::stringbuf::str(__p, v36);
  if (v33 >= 0)
    v29 = (char *)__p;
  else
    v29 = (char *)__p[0];
  sub_1015A2E04(a2, v29);
  if (v33 < 0)
    operator delete(__p[0]);
  *(_QWORD *)((char *)v34
  v35 = v30;
  if (v37 < 0)
    operator delete((void *)v36[8]);
  std::streambuf::~streambuf(v36);
  return std::ios::~ios(&v38);
}

void sub_1005A2764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

BOOL sub_1005A2794(CFDictionaryRef *a1, uint64_t a2)
{
  __int128 v8;
  unsigned int v9;
  _BOOL8 v10;
  NSObject *v11;
  std::string *v12;
  int v13;
  NSObject *v14;
  CFAbsoluteTime Current;
  double v16;
  double v17;
  NSObject *v18;
  CFAbsoluteTime v19;
  double v20;
  double v21;
  NSObject *v22;
  int v23;
  int v24;
  std::string *v25;
  NSObject *v26;
  int v27;
  int v28;
  std::string *v29;
  NSObject *v30;
  std::string *v31;
  uint64_t v33;
  std::string *v34;
  std::string *v35;
  std::string *v36;
  std::string *v37;
  std::string *v38;
  int v39;
  std::string *v40;
  double v41;
  double v42;
  double v43;
  CFTypeRef v44;
  CFTypeRef cf;
  uint64_t v46;
  _BYTE v47[16];
  int v48;
  std::string *v49;
  __int16 v50;
  int v51;
  std::string buf[68];
  std::string v53;

  sub_1001C1D6C((int)v47, *a1);
  v46 = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 172) = 0;
  *(_QWORD *)(a2 + 164) = 0;
  *(_DWORD *)(a2 + 180) = 0;
  *(_QWORD *)(a2 + 196) = 0;
  *(_QWORD *)(a2 + 212) = 0;
  *(_QWORD *)(a2 + 204) = 0;
  *(_BYTE *)(a2 + 220) = 0;
  *(_DWORD *)(a2 + 68) = 0xFFFF;
  *(_OWORD *)(a2 + 88) = xmmword_101BAFC90;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a2 + 104) = _Q1;
  *(_OWORD *)(a2 + 120) = _Q1;
  *(_OWORD *)(a2 + 136) = _Q1;
  *(_DWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 156) = 0xBFF0000000000000;
  *(_QWORD *)(a2 + 184) = 0xBFF0000000000000;
  *(_QWORD *)(a2 + 224) = 0x30000000BLL;
  *(_QWORD *)&v8 = -1;
  *((_QWORD *)&v8 + 1) = -1;
  *(_QWORD *)(a2 + 48) = -1;
  *(_DWORD *)(a2 + 192) = 0x7FFFFFFF;
  *(_DWORD *)a2 = -1;
  *(_DWORD *)(a2 + 232) = -1;
  *(_DWORD *)(a2 + 56) = -1;
  *(_OWORD *)(a2 + 32) = v8;
  *(_DWORD *)(a2 + 376) = 0;
  *(_QWORD *)(a2 + 360) = 0;
  *(_QWORD *)(a2 + 368) = 0;
  *(_QWORD *)(a2 + 400) = 0;
  *(_QWORD *)(a2 + 408) = 0;
  *(_QWORD *)(a2 + 392) = 0;
  *(_BYTE *)(a2 + 416) = 0;
  *(_DWORD *)(a2 + 264) = 0xFFFF;
  *(_QWORD *)(a2 + 268) = 0;
  *(_QWORD *)(a2 + 276) = 0;
  *(_OWORD *)(a2 + 284) = xmmword_101BAFC90;
  *(_OWORD *)(a2 + 300) = _Q1;
  *(_OWORD *)(a2 + 316) = _Q1;
  *(_OWORD *)(a2 + 332) = _Q1;
  *(_DWORD *)(a2 + 348) = 0;
  *(_QWORD *)(a2 + 352) = 0xBFF0000000000000;
  *(_QWORD *)(a2 + 380) = 0xBFF0000000000000;
  *(_DWORD *)(a2 + 388) = 0x7FFFFFFF;
  sub_1001C1D70((uint64_t)v47, "cdmaCellFromCellMonitorDict");
  cf = 0;
  if ((sub_1001C3D30((uint64_t)v47, kCTCellMonitorCellRadioAccessTechnology, &cf) & 1) == 0)
  {
    *(_DWORD *)(a2 + 224) = 11;
LABEL_19:
    v10 = 1;
    goto LABEL_20;
  }
  if (!cf)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    v14 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Unsupported kCTCellMonitorCellRadioAccessTechnology, no cfstring", (uint8_t *)buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146180);
      LOWORD(v53.__r_.__value_.__l.__data_) = 0;
      v36 = (std::string *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Unsupported kCTCellMonitorCellRadioAccessTechnology, no cfstring", &v53, 2);
      sub_100512490("Generic", 1, 0, 0, "static BOOL CLTelephonyService::cdmaCellFromCellMonitorDict(const CFDictionaryRef &, CdmaCell &)", "%s\n", (const char *)v36);
      if (v36 != buf)
        free(v36);
    }
    goto LABEL_19;
  }
  *(_DWORD *)(a2 + 224) = sub_1001C42E4(cf);
  memset(&v53, 0, sizeof(v53));
  sub_1001C0048((const __CFString *)cf, &v53);
  v9 = *(_DWORD *)(a2 + 224) - 3;
  v10 = v9 < 3;
  if (v9 >= 3)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    v11 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v12 = &v53;
      if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v12 = (std::string *)v53.__r_.__value_.__r.__words[0];
      v13 = *(_DWORD *)(a2 + 224);
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446466;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1026;
      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Unsupported kCTCellMonitorCellRadioAccessTechnology, it's not CDMA! %{public}s %{public}d", (uint8_t *)buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146180);
      v38 = &v53;
      if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v38 = (std::string *)v53.__r_.__value_.__r.__words[0];
      v39 = *(_DWORD *)(a2 + 224);
      v48 = 136446466;
      v49 = v38;
      v50 = 1026;
      v51 = v39;
      v40 = (std::string *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Unsupported kCTCellMonitorCellRadioAccessTechnology, it's not CDMA! %{public}s %{public}d", &v48, 18);
      sub_100512490("Generic", 1, 0, 0, "static BOOL CLTelephonyService::cdmaCellFromCellMonitorDict(const CFDictionaryRef &, CdmaCell &)", "%s\n", (const char *)v40);
      if (v40 != buf)
        free(v40);
    }
  }
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
LABEL_20:
  sub_1001C1194((uint64_t)v47, kCTCellMonitorBandClass, (_DWORD *)(a2 + 48));
  sub_1001C1194((uint64_t)v47, kCTCellMonitorBaseStationId, (_DWORD *)(a2 + 44));
  if (sub_1001C1194((uint64_t)v47, kCTCellMonitorBaseStationLat, (_DWORD *)&v46 + 1)
    && sub_1001C1194((uint64_t)v47, kCTCellMonitorBaseStationLong, &v46))
  {
    *(_QWORD *)(a2 + 88) = 0;
    Current = CFAbsoluteTimeGetCurrent();
    v16 = (double)SHIDWORD(v46);
    *(CFAbsoluteTime *)(a2 + 144) = Current;
    v17 = (double)(int)v46 * 0.0000694444444;
    *(double *)(a2 + 72) = v16 * 0.0000694444444;
    *(double *)(a2 + 80) = v17;
    *(_DWORD *)(a2 + 200) = 1;
  }
  v44 = 0;
  if (sub_1001C3D30((uint64_t)v47, kCTCellMonitorCellType, &v44))
  {
    if (v44)
    {
      *(_DWORD *)(a2 + 228) = sub_1001C441C(v44);
      memset(buf, 0, 24);
      sub_1001C0048((const __CFString *)v44, buf);
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    else
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146180);
      v18 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "Unsupported kCTCellMonitorCellType, no cfstring", (uint8_t *)buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102146180);
        LOWORD(v53.__r_.__value_.__l.__data_) = 0;
        LODWORD(v41) = 2;
        v37 = (std::string *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Unsupported kCTCellMonitorCellType, no cfstring", &v53, *(_QWORD *)&v41);
        sub_100512490("Generic", 1, 0, 0, "static BOOL CLTelephonyService::cdmaCellFromCellMonitorDict(const CFDictionaryRef &, CdmaCell &)", "%s\n", (const char *)v37);
        if (v37 != buf)
          free(v37);
      }
    }
  }
  sub_1001C1194((uint64_t)v47, kCTCellMonitorChannelNumber, (_DWORD *)(a2 + 52));
  sub_1001C1194((uint64_t)v47, kCTCellMonitorMCC, (_DWORD *)a2);
  sub_1001C1194((uint64_t)v47, kCTCellMonitorMNC, (_DWORD *)(a2 + 232));
  sub_1001C1194((uint64_t)v47, kCTCellMonitorNID, (_DWORD *)(a2 + 36));
  sub_1001C1194((uint64_t)v47, kCTCellMonitorPNOffset, (_DWORD *)(a2 + 56));
  sub_1001C1194((uint64_t)v47, kCTCellMonitorSID, (_DWORD *)(a2 + 32));
  sub_1001C1194((uint64_t)v47, kCTCellMonitorZoneId, (_DWORD *)(a2 + 40));
  sub_1000BD5F0((uint64_t)v47, kCTCellMonitorSectorId, (std::string *)(a2 + 240));
  if (sub_1001C1194((uint64_t)v47, kCTCellMonitorSectorLat, (_DWORD *)&v46 + 1)
    && sub_1001C1194((uint64_t)v47, kCTCellMonitorSectorLong, &v46)
    && v46)
  {
    *(_QWORD *)(a2 + 284) = 0;
    v19 = CFAbsoluteTimeGetCurrent();
    v20 = (double)SHIDWORD(v46);
    *(CFAbsoluteTime *)(a2 + 340) = v19;
    v21 = (double)(int)v46 * 0.0000694444444;
    *(double *)(a2 + 268) = v20 * 0.0000694444444;
    *(double *)(a2 + 276) = v21;
    *(_DWORD *)(a2 + 396) = 1;
  }
  sub_1001C1194((uint64_t)v47, kCTCellMonitorLtmOffset, (_DWORD *)(a2 + 420));
  sub_1001C1194((uint64_t)v47, kCTCellMonitorDayLightSaving, (_DWORD *)(a2 + 424));
  v42 = 0.0;
  v43 = 0.0;
  if (sub_1001FD9FC((uint64_t)v47, kCTCellMonitorEcio, &v43))
  {
    *(_DWORD *)(a2 + 60) = (int)v43;
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    v22 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v23 = *(_DWORD *)(a2 + 60);
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 67109376;
      HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v23;
      LOWORD(buf[0].__r_.__value_.__r.__words[1]) = 2048;
      *(double *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 2) = v43;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "kCTCellMonitorEcio: %d, %.1lf", (uint8_t *)buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146180);
      v24 = *(_DWORD *)(a2 + 60);
      LODWORD(v53.__r_.__value_.__l.__data_) = 67109376;
      HIDWORD(v53.__r_.__value_.__r.__words[0]) = v24;
      LOWORD(v53.__r_.__value_.__r.__words[1]) = 2048;
      *(double *)((char *)&v53.__r_.__value_.__r.__words[1] + 2) = v43;
      LODWORD(v41) = 18;
      v25 = (std::string *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "kCTCellMonitorEcio: %d, %.1lf", &v53, v41);
      sub_100512490("Generic", 1, 0, 2, "static BOOL CLTelephonyService::cdmaCellFromCellMonitorDict(const CFDictionaryRef &, CdmaCell &)", "%s\n", (const char *)v25);
      if (v25 != buf)
        free(v25);
    }
  }
  else
  {
    *(_DWORD *)(a2 + 60) = 0;
  }
  if (sub_1001FD9FC((uint64_t)v47, kCTCellMonitorEcioFiltered, &v42))
  {
    *(_DWORD *)(a2 + 64) = (int)v42;
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    v26 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v27 = *(_DWORD *)(a2 + 64);
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 67109376;
      HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v27;
      LOWORD(buf[0].__r_.__value_.__r.__words[1]) = 2048;
      *(double *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 2) = v42;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "kCTCellMonitorEcioFiltered: %d, %.1lf", (uint8_t *)buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146180);
      v28 = *(_DWORD *)(a2 + 64);
      LODWORD(v53.__r_.__value_.__l.__data_) = 67109376;
      HIDWORD(v53.__r_.__value_.__r.__words[0]) = v28;
      LOWORD(v53.__r_.__value_.__r.__words[1]) = 2048;
      *(double *)((char *)&v53.__r_.__value_.__r.__words[1] + 2) = v42;
      LODWORD(v41) = 18;
      v29 = (std::string *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "kCTCellMonitorEcioFiltered: %d, %.1lf", &v53, v41);
      sub_100512490("Generic", 1, 0, 2, "static BOOL CLTelephonyService::cdmaCellFromCellMonitorDict(const CFDictionaryRef &, CdmaCell &)", "%s\n", (const char *)v29);
      if (v29 != buf)
        free(v29);
    }
  }
  else
  {
    *(_DWORD *)(a2 + 64) = 0;
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102146180);
  v30 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    sub_1005A3550((unsigned int *)a2, buf);
    v31 = (buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? buf
        : (std::string *)buf[0].__r_.__value_.__r.__words[0];
    LODWORD(v53.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v53.__r_.__value_.__r.__words + 4) = (std::string::size_type)v31;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "CELL_LOC: got cell from dict, %s", (uint8_t *)&v53, 0xCu);
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    v33 = qword_1022A02D8;
    sub_1005A3550((unsigned int *)a2, &v53);
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v34 = &v53;
    else
      v34 = (std::string *)v53.__r_.__value_.__r.__words[0];
    v48 = 136315138;
    v49 = v34;
    v35 = (std::string *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v33, 2, "CELL_LOC: got cell from dict, %s", (const char *)&v48);
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v53.__r_.__value_.__l.__data_);
    sub_100512490("Generic", 1, 0, 2, "static BOOL CLTelephonyService::cdmaCellFromCellMonitorDict(const CFDictionaryRef &, CdmaCell &)", "%s\n", (const char *)v35);
    if (v35 != buf)
      free(v35);
  }
  sub_10011A5A8(v47);
  return v10;
}

void sub_1005A34DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  if (*(char *)(v9 - 105) < 0)
    operator delete(*(void **)(v9 - 128));
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005A3550@<X0>(unsigned int *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  unsigned int *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  void *__p[2];
  char v41;
  _QWORD v42[2];
  uint64_t v43;
  _QWORD v44[10];
  char v45;
  uint64_t v46;

  sub_100263E50((uint64_t)v42);
  v4 = sub_100263F7C(&v43, (uint64_t)"[", 1);
  v5 = sub_100263F7C(v4, (uint64_t)" MCC=", 5);
  if (*((_QWORD *)a1 + 2) == *((_QWORD *)a1 + 1))
    v6 = a1;
  else
    v6 = (unsigned int *)*((_QWORD *)a1 + 1);
  v7 = (_QWORD *)std::ostream::operator<<(v5, *v6);
  v8 = sub_100263F7C(v7, (uint64_t)" Derived=", 9);
  v9 = (_QWORD *)std::ostream::operator<<(v8, (uint64_t)(*((_QWORD *)a1 + 2) - *((_QWORD *)a1 + 1)) >> 2);
  v10 = sub_100263F7C(v9, (uint64_t)" AND SID=", 9);
  v11 = (_QWORD *)std::ostream::operator<<(v10, a1[8]);
  v12 = sub_100263F7C(v11, (uint64_t)" AND NID=", 9);
  v13 = (_QWORD *)std::ostream::operator<<(v12, a1[9]);
  v14 = sub_100263F7C(v13, (uint64_t)" AND BSID=", 10);
  v15 = (_QWORD *)std::ostream::operator<<(v14, a1[11]);
  v16 = sub_100263F7C(v15, (uint64_t)" AND ZONEID=", 12);
  v17 = (_QWORD *)std::ostream::operator<<(v16, a1[10]);
  v18 = sub_100263F7C(v17, (uint64_t)" AND PNOFFSET=", 14);
  v19 = (_QWORD *)std::ostream::operator<<(v18, a1[14]);
  v20 = sub_100263F7C(v19, (uint64_t)" AND RSCP=", 10);
  v21 = (_QWORD *)std::ostream::operator<<(v20, a1[15]);
  v22 = sub_100263F7C(v21, (uint64_t)" AND ECN0=", 10);
  v23 = (_QWORD *)std::ostream::operator<<(v22, a1[16]);
  v24 = sub_100263F7C(v23, (uint64_t)" AND BANDCLASS=", 15);
  v25 = (_QWORD *)std::ostream::operator<<(v24, a1[12]);
  v26 = sub_100263F7C(v25, (uint64_t)" AND CHANNEL=", 13);
  v27 = (_QWORD *)std::ostream::operator<<(v26, a1[13]);
  v28 = sub_100263F7C(v27, (uint64_t)" AND SectorID='", 15);
  v31 = *((_QWORD *)a1 + 30);
  v30 = (uint64_t)(a1 + 60);
  v29 = v31;
  v32 = *(char *)(v30 + 23);
  if (v32 >= 0)
    v33 = v30;
  else
    v33 = v29;
  if (v32 >= 0)
    v34 = *(unsigned __int8 *)(v30 + 23);
  else
    v34 = *(_QWORD *)(v30 + 8);
  v35 = sub_100263F7C(v28, v33, v34);
  v36 = sub_100263F7C(v35, (uint64_t)"'", 1);
  sub_100263F7C(v36, (uint64_t)" ]", 2);
  std::stringbuf::str(__p, v44);
  if (v41 >= 0)
    v37 = (char *)__p;
  else
    v37 = (char *)__p[0];
  sub_1015A2E04(a2, v37);
  if (v41 < 0)
    operator delete(__p[0]);
  *(_QWORD *)((char *)v42
  v43 = v38;
  if (v45 < 0)
    operator delete((void *)v44[8]);
  std::streambuf::~streambuf(v44);
  return std::ios::~ios(&v46);
}

void sub_1005A37A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_1005A37D8(uint64_t a1, int a2, int a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  id v10;
  _QWORD v11[6];
  int v12;
  int v13;
  os_activity_scope_state_s state;
  char v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;

  CLProfilingIdentify("CLTelephonyService::basebandDetectCallback");
  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "silo"), "assertOutside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021460C0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v15 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLTelephonyService::basebandDetectCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021460C0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2082;
      v21 = "activity";
      v22 = 2050;
      v23 = a1;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLTelephonyService::basebandDetectCallback\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v15 = 0;
  }
  v10 = objc_msgSend(*(id *)(a1 + 32), "silo");
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1005A9580;
  v11[3] = &unk_102143548;
  v12 = a2;
  v13 = a3;
  v11[4] = a1;
  v11[5] = a4;
  objc_msgSend(v10, "sync:", v11);
  if (v15)
    os_activity_scope_leave(&state);
}

void sub_1005A39D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, os_activity_scope_state_s state, char a17)
{
  if (a17)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005A39F0(uint64_t a1, void *a2, void *a3)
{
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  uint8_t *v12;
  char *v13;
  NSObject *v14;
  unsigned __int8 v15;
  int v16;
  int v17;
  NSObject *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  const char *v22;
  uint8_t *v23;
  int v24;
  NSObject *v25;
  unsigned int v26;
  uint64_t v27;
  const char *v28;
  NSObject *v30;
  unsigned int v31;
  uint64_t v32;
  NSObject *v33;
  unsigned int v34;
  uint64_t v35;
  const char *v36;
  uint8_t *v37;
  _QWORD v38[2];
  uint8_t buf[4];
  unsigned int v40;

  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 4) = 0x400000000;
  *(_WORD *)(a1 + 12) = 256;
  *(_BYTE *)(a1 + 14) = 0;
  *(_DWORD *)(a1 + 16) = 255;
  if (a3)
  {
    if (a2)
    {
      if (objc_msgSend(a2, "slotID") != (id)1 && objc_msgSend(a2, "slotID") != (id)2 && objc_msgSend(a2, "slotID"))
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102146220);
        v6 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          v40 = objc_msgSend(a2, "slotID");
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,CLCTEmergencyMode,InvalidSubscriptionSlot,slot,%d", buf, 8u);
        }
        if (!sub_1001BFF7C(115, 0))
          return a1;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102146220);
        v7 = qword_1022A0088;
        objc_msgSend(a2, "slotID");
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 16, "#ctcl,#cterror,CLCTEmergencyMode,InvalidSubscriptionSlot,slot,%d", v38);
        goto LABEL_32;
      }
      if ((sub_1001DC538() & 1) == 0 && objc_msgSend(a2, "slotID") == (id)2)
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102146220);
        v10 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          v40 = objc_msgSend(a2, "slotID");
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,CLCTEmergencyMode,Unexpected CTSubscriptionSlot Info received %d", buf, 8u);
        }
        if (!sub_1001BFF7C(115, 0))
          return a1;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102146220);
        v11 = qword_1022A0088;
        objc_msgSend(a2, "slotID");
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 16, "#ctcl,#cterror,CLCTEmergencyMode,Unexpected CTSubscriptionSlot Info received %d", v38);
        goto LABEL_32;
      }
      v13 = (char *)objc_msgSend(a2, "slotID");
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102146220);
      v14 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning,#ctcl,CLCTEmergencyMode,context,nil", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102146220);
        LOWORD(v38[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#Warning,#ctcl,CLCTEmergencyMode,context,nil", v38, 2);
        v37 = (uint8_t *)v36;
        sub_100512490("Generic", 1, 0, 2, "CLTelephonyService_Type::CLCTEmergencyMode::CLCTEmergencyMode(CTXPCServiceSubscriptionContext *, CTEmergencyMode *)", "%s\n", v36);
        if (v37 != buf)
          free(v37);
      }
      v13 = 0;
    }
    if (!objc_msgSend(a3, "type")
      || objc_msgSend(a3, "type") == (id)1
      || objc_msgSend(a3, "type") == (id)2
      || objc_msgSend(a3, "type") == (id)3
      || objc_msgSend(a3, "type") == (id)4
      || objc_msgSend(a3, "type") == (id)5)
    {
      if (!objc_msgSend(a3, "state")
        || objc_msgSend(a3, "state") == (id)1
        || objc_msgSend(a3, "state") == (id)2
        || objc_msgSend(a3, "state") == (id)3
        || objc_msgSend(a3, "state") == (id)5
        || objc_msgSend(a3, "state") == (id)4)
      {
        *(_BYTE *)a1 = objc_msgSend(a3, "enabled");
        if ((objc_msgSend(a3, "isEmergencyText") & 1) != 0)
          v15 = 1;
        else
          v15 = objc_msgSend(a3, "isStewieActive");
        *(_BYTE *)(a1 + 12) = v15;
        *(_BYTE *)(a1 + 13) = objc_msgSend(a3, "isEmergencySetup");
        *(_BYTE *)(a1 + 14) = objc_msgSend(a3, "isStewieActive");
        if ((sub_1001DC538() & 1) != 0)
        {
          if ((unint64_t)(v13 - 1) > 1)
            v16 = 255;
          else
            v16 = v13 != (char *)1;
        }
        else if (v13 == (char *)1)
        {
          v16 = 0;
        }
        else
        {
          v16 = 255;
        }
        *(_DWORD *)(a1 + 16) = v16;
        switch((unint64_t)objc_msgSend(a3, "type"))
        {
          case 0uLL:
            *(_DWORD *)(a1 + 4) = 0;
            break;
          case 1uLL:
            v17 = 1;
            goto LABEL_79;
          case 2uLL:
            v17 = 2;
            goto LABEL_79;
          case 3uLL:
            v17 = 3;
            goto LABEL_79;
          case 4uLL:
            v17 = 4;
            goto LABEL_79;
          case 5uLL:
            v17 = 5;
LABEL_79:
            *(_DWORD *)(a1 + 4) = v17;
            break;
          default:
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_102146220);
            v18 = qword_1022A0088;
            if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
            {
              v19 = objc_msgSend(a3, "type");
              *(_DWORD *)buf = 67109120;
              v40 = v19;
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,CLCTEmergencyMode,InvalidEmergencyModeType,%d", buf, 8u);
            }
            if (sub_1001BFF7C(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0080 != -1)
                dispatch_once(&qword_1022A0080, &stru_102146220);
              v20 = qword_1022A0088;
              v21 = objc_msgSend(a3, "type");
              LODWORD(v38[0]) = 67109120;
              HIDWORD(v38[0]) = v21;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v20, 16, "#ctcl,#cterror,CLCTEmergencyMode,InvalidEmergencyModeType,%d", v38);
              v23 = (uint8_t *)v22;
              sub_100512490("Generic", 1, 0, 0, "CLTelephonyService_Type::CLCTEmergencyMode::CLCTEmergencyMode(CTXPCServiceSubscriptionContext *, CTEmergencyMode *)", "%s\n", v22);
              if (v23 != buf)
                free(v23);
            }
            break;
        }
        switch((unint64_t)objc_msgSend(a3, "state"))
        {
          case 0uLL:
            *(_DWORD *)(a1 + 8) = 0;
            return a1;
          case 1uLL:
            v24 = 1;
            goto LABEL_97;
          case 2uLL:
            v24 = 2;
            goto LABEL_97;
          case 3uLL:
            v24 = 3;
            goto LABEL_97;
          case 4uLL:
            v24 = 5;
            goto LABEL_97;
          case 5uLL:
            v24 = 4;
LABEL_97:
            *(_DWORD *)(a1 + 8) = v24;
            return a1;
          default:
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_102146220);
            v25 = qword_1022A0088;
            if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
            {
              v26 = objc_msgSend(a3, "state");
              *(_DWORD *)buf = 67109120;
              v40 = v26;
              _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,CLCTEmergencyMode,InvalidEmergencyModeState,%d", buf, 8u);
            }
            if (!sub_1001BFF7C(115, 0))
              return a1;
            bzero(buf, 0x65CuLL);
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_102146220);
            v27 = qword_1022A0088;
            objc_msgSend(a3, "state");
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v27, 16, "#ctcl,#cterror,CLCTEmergencyMode,InvalidEmergencyModeState,%d", v38);
            break;
        }
      }
      else
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102146220);
        v33 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
        {
          v34 = objc_msgSend(a3, "state");
          *(_DWORD *)buf = 67109120;
          v40 = v34;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,CLCTEmergencyMode,InvalidEmergencyModeState,state,%d", buf, 8u);
        }
        if (!sub_1001BFF7C(115, 0))
          return a1;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102146220);
        v35 = qword_1022A0088;
        objc_msgSend(a3, "state");
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v35, 16, "#ctcl,#cterror,CLCTEmergencyMode,InvalidEmergencyModeState,state,%d", v38);
      }
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102146220);
      v30 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        v31 = objc_msgSend(a3, "type");
        *(_DWORD *)buf = 67109120;
        v40 = v31;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,CLCTEmergencyMode,InvalidEmergencyMode,emergencyMode,%d", buf, 8u);
      }
      if (!sub_1001BFF7C(115, 0))
        return a1;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102146220);
      v32 = qword_1022A0088;
      objc_msgSend(a3, "type");
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v32, 16, "#ctcl,#cterror,CLCTEmergencyMode,InvalidEmergencyMode,emergencyMode,%d", v38);
    }
    v12 = (uint8_t *)v28;
    sub_100512490("Generic", 1, 0, 0, "CLTelephonyService_Type::CLCTEmergencyMode::CLCTEmergencyMode(CTXPCServiceSubscriptionContext *, CTEmergencyMode *)", "%s\n", v28);
    if (v12 == buf)
      return a1;
    goto LABEL_33;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102146220);
  v9 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,CLCTEmergencyMode,mode,nil", buf, 2u);
  }
  if (!sub_1001BFF7C(115, 0))
    return a1;
  bzero(buf, 0x65CuLL);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102146220);
  LOWORD(v38[0]) = 0;
  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ctcl,#cterror,CLCTEmergencyMode,mode,nil", v38, 2, v38[0]);
LABEL_32:
  v12 = (uint8_t *)v8;
  sub_100512490("Generic", 1, 0, 0, "CLTelephonyService_Type::CLCTEmergencyMode::CLCTEmergencyMode(CTXPCServiceSubscriptionContext *, CTEmergencyMode *)", "%s\n", v8);
  if (v12 != buf)
LABEL_33:
    free(v12);
  return a1;
}

uint64_t sub_1005A4610(uint64_t a1, const __CFDictionary *a2)
{
  int v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  unsigned int v9;
  NSObject *v10;
  const char *v11;
  NSObject *v12;
  const char *v13;
  const char *v14;
  __int16 v15;
  __int16 v16;
  unsigned int v17;
  uint64_t v18;
  _BYTE v19[16];
  int v20;
  unsigned int v21;
  uint8_t buf[4];
  unsigned int v23;

  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 4) = 0x400000000;
  *(_WORD *)(a1 + 12) = 256;
  *(_BYTE *)(a1 + 14) = 0;
  *(_DWORD *)(a1 + 16) = 255;
  sub_1001C1D6C((int)v19, a2);
  v18 = 0;
  v17 = 0;
  v16 = 0;
  v15 = 0;
  if (sub_1001E48E4((uint64_t)v19, (uint64_t)CFSTR("kEmergencyModeEnabledKey"), (BOOL *)&v16 + 1)
    && sub_1001E48E4((uint64_t)v19, (uint64_t)CFSTR("kEmergencyTextKey"), (BOOL *)&v16)
    && sub_1001C1194((uint64_t)v19, (uint64_t)CFSTR("kSimInstanceKey"), &v18)
    && sub_1001C1194((uint64_t)v19, (uint64_t)CFSTR("kEmergencyModeKey"), (_DWORD *)&v18 + 1)
    && sub_1001C1194((uint64_t)v19, (uint64_t)CFSTR("kEmergencyModeStateKey"), &v17)
    && sub_1001E48E4((uint64_t)v19, (uint64_t)CFSTR("kIsStewieActiveKey"), (BOOL *)&v15)
    && (sub_1001E48E4((uint64_t)v19, (uint64_t)CFSTR("kEmergencySetupKey"), (BOOL *)&v15 + 1) & 1) != 0)
  {
    v3 = v18;
    if (v18 < 2 || (_DWORD)v18 == 255)
    {
      if (HIDWORD(v18) < 6)
      {
        v9 = v17;
        if (v17 < 6)
        {
          *(_DWORD *)(a1 + 4) = HIDWORD(v18);
          *(_DWORD *)(a1 + 8) = v9;
          *(_BYTE *)a1 = HIBYTE(v16);
          *(_BYTE *)(a1 + 12) = v16;
          *(_DWORD *)(a1 + 16) = v3;
          *(_BYTE *)(a1 + 13) = HIBYTE(v15);
          *(_BYTE *)(a1 + 14) = v15;
          goto LABEL_24;
        }
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021461A0);
        v10 = qword_1022A02A8;
        if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          v23 = v17;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#clct,CLCTEmergencyMode, Unexpected CLCTEmergencyModeState received %d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02A0 != -1)
            dispatch_once(&qword_1022A02A0, &stru_1021461A0);
          v20 = 67109120;
          v21 = v17;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#clct,CLCTEmergencyMode, Unexpected CLCTEmergencyModeState received %d", &v20);
          v6 = (uint8_t *)v11;
          sub_100512490("Generic", 1, 0, 0, "CLTelephonyService_Type::CLCTEmergencyMode::CLCTEmergencyMode(CFDictionaryRef)", "%s\n", v11);
          goto LABEL_46;
        }
      }
      else
      {
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021461A0);
        v4 = qword_1022A02A8;
        if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          v23 = HIDWORD(v18);
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#clct,CLCTEmergencyMode, Unexpected CLCTEmergencyModeType received %d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02A0 != -1)
            dispatch_once(&qword_1022A02A0, &stru_1021461A0);
          v20 = 67109120;
          v21 = HIDWORD(v18);
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#clct,CLCTEmergencyMode, Unexpected CLCTEmergencyModeType received %d", &v20);
          v6 = (uint8_t *)v5;
          sub_100512490("Generic", 1, 0, 0, "CLTelephonyService_Type::CLCTEmergencyMode::CLCTEmergencyMode(CFDictionaryRef)", "%s\n", v5);
LABEL_46:
          if (v6 != buf)
            free(v6);
        }
      }
    }
    else
    {
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021461A0);
      v12 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v23 = v18;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#clct,CLCTEmergencyMode,InvalidSim,%d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021461A0);
        v20 = 67109120;
        v21 = v18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#clct,CLCTEmergencyMode,InvalidSim,%d", &v20);
        v6 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "CLTelephonyService_Type::CLCTEmergencyMode::CLCTEmergencyMode(CFDictionaryRef)", "%s\n", v13);
        goto LABEL_46;
      }
    }
  }
  else
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021461A0);
    v7 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#clct,CLCTEmergencyMode, couldn't get value for  sim or  CLCTEmergencyMode", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021461A0);
      LOWORD(v20) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#clct,CLCTEmergencyMode, couldn't get value for  sim or  CLCTEmergencyMode", &v20, 2);
      v6 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 0, "CLTelephonyService_Type::CLCTEmergencyMode::CLCTEmergencyMode(CFDictionaryRef)", "%s\n", v14);
      goto LABEL_46;
    }
  }
LABEL_24:
  sub_10011A5A8(v19);
  return a1;
}

void sub_1005A4CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

NSDictionary *sub_1005A4D00(unsigned __int8 *a1)
{
  _QWORD v3[7];
  _QWORD v4[7];

  v3[0] = CFSTR("kEmergencyModeEnabledKey");
  v4[0] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *a1);
  v3[1] = CFSTR("kEmergencyTextKey");
  v4[1] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a1[12]);
  v3[2] = CFSTR("kSimInstanceKey");
  v4[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a1 + 4));
  v3[3] = CFSTR("kEmergencyModeKey");
  v4[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a1 + 1));
  v3[4] = CFSTR("kEmergencyModeStateKey");
  v4[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a1 + 2));
  v3[5] = CFSTR("kIsStewieActiveKey");
  v4[5] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a1[14]);
  v3[6] = CFSTR("kEmergencySetupKey");
  v4[6] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a1[13]);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 7);
}

_QWORD *sub_1005A4E30@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  char *v5;

  v4 = *(int *)(a1 + 4);
  if (v4 > 5)
    v5 = "UnknownMode";
  else
    v5 = off_102146438[v4];
  return sub_1015A2E04(a2, v5);
}

_QWORD *sub_1005A4E60@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  char *v5;

  v4 = *(int *)(a1 + 8);
  if (v4 > 5)
    v5 = "UnknownModeState";
  else
    v5 = off_102146468[v4];
  return sub_1015A2E04(a2, v5);
}

uint64_t sub_1005A4E90(uint64_t a1, unsigned int a2, void *a3, void *a4)
{
  id v7;
  char v8;
  uint64_t v9;
  _BOOL8 v10;
  id v11;

  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (a3)
    std::string::assign((std::string *)a1, (const std::string::value_type *)objc_msgSend(a3, "UTF8String"));
  if (a4)
    std::string::assign((std::string *)(a1 + 24), (const std::string::value_type *)objc_msgSend(a4, "UTF8String"));
  if (a2 != 255)
  {
    v7 = objc_alloc((Class)CTXPCServiceSubscriptionContext);
    v8 = sub_1001DC538();
    v9 = 1;
    if (a2)
      v9 = 2;
    if (a2 > 1)
      v9 = 0;
    if ((v8 & 1) != 0)
      v10 = v9;
    else
      v10 = a2 == 0;
    v11 = objc_msgSend(v7, "initWithSlot:", v10);
    std::string::assign((std::string *)(a1 + 48), (const std::string::value_type *)objc_msgSend(objc_msgSend(objc_msgSend(v11, "uuid"), "UUIDString"), "UTF8String"));

  }
  return a1;
}

void sub_1005A4F68(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1005A4F80(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1005A4F80(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_1005A4FD0(uint64_t a1, const __CFDictionary *a2)
{
  std::string *v3;
  std::string *v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  NSObject *v8;
  const char *v9;
  NSObject *v10;
  const char *v12;
  _WORD v13[8];
  uint8_t v14[16];
  uint8_t buf[1640];

  *(_OWORD *)(a1 + 48) = 0u;
  v3 = (std::string *)(a1 + 48);
  *(_QWORD *)(a1 + 64) = 0;
  v4 = (std::string *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  sub_1001C1D6C((int)v14, a2);
  if (sub_1000BD5F0((uint64_t)v14, (uint64_t)CFSTR("kImsiKey"), (std::string *)a1))
  {
    if (sub_1000BD5F0((uint64_t)v14, (uint64_t)CFSTR("kImeiKey"), v4))
    {
      if (!sub_1000BD5F0((uint64_t)v14, (uint64_t)CFSTR("kUuidKey"), v3))
      {
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021461A0);
        v5 = qword_1022A02A8;
        if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#clct,CLCTMobileEquipmentInfo, couldn't get value for uuid", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02A0 != -1)
            dispatch_once(&qword_1022A02A0, &stru_1021461A0);
          v13[0] = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#clct,CLCTMobileEquipmentInfo, couldn't get value for uuid", v13, 2);
          v7 = (uint8_t *)v6;
          sub_100512490("Generic", 1, 0, 0, "CLTelephonyService_Type::CLCTMobileEquipmentInfo::CLCTMobileEquipmentInfo(CFDictionaryRef)", "%s\n", v6);
LABEL_29:
          if (v7 != buf)
            free(v7);
        }
      }
    }
    else
    {
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021461A0);
      v10 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#clct,CLCTMobileEquipmentInfo, couldn't get value for imei", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021461A0);
        v13[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#clct,CLCTMobileEquipmentInfo, couldn't get value for imei", v13, 2);
        v7 = (uint8_t *)v12;
        sub_100512490("Generic", 1, 0, 0, "CLTelephonyService_Type::CLCTMobileEquipmentInfo::CLCTMobileEquipmentInfo(CFDictionaryRef)", "%s\n", v12);
        goto LABEL_29;
      }
    }
  }
  else
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021461A0);
    v8 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#clct,CLCTMobileEquipmentInfo, couldn't get value for imsi", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021461A0);
      v13[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#clct,CLCTMobileEquipmentInfo, couldn't get value for imsi", v13, 2);
      v7 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 0, "CLTelephonyService_Type::CLCTMobileEquipmentInfo::CLCTMobileEquipmentInfo(CFDictionaryRef)", "%s\n", v9);
      goto LABEL_29;
    }
  }
  sub_10011A5A8(v14);
  return a1;
}

void sub_1005A542C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  void **v6;
  void **v7;
  va_list va;

  va_start(va, a5);
  sub_10011A5A8(va);
  if (*(char *)(v5 + 71) < 0)
    operator delete(*v7);
  if (*(char *)(v5 + 47) < 0)
    operator delete(*v6);
  if (*(char *)(v5 + 23) < 0)
    operator delete(*(void **)v5);
  _Unwind_Resume(a1);
}

NSDictionary *sub_1005A5488(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t *v3;
  _QWORD *v4;
  _QWORD v6[3];
  _QWORD v7[3];

  v6[0] = CFSTR("kImeiKey");
  v2 = a1 + 3;
  if (*((char *)a1 + 47) < 0)
    v2 = (_QWORD *)*v2;
  v7[0] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v2);
  v6[1] = CFSTR("kImsiKey");
  v3 = a1;
  if (*((char *)a1 + 23) < 0)
    v3 = (uint64_t *)*a1;
  v7[1] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3);
  v6[2] = CFSTR("kUuidKey");
  v4 = a1 + 6;
  if (*((char *)a1 + 71) < 0)
    v4 = (_QWORD *)*v4;
  v7[2] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v4);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v7, v6, 3);
}

std::string *sub_1005A556C(std::string *a1, void *a2)
{
  _QWORD *v4;
  NSObject *v5;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  uint8_t buf[1640];

  v4 = sub_1015A2E04(a1, "");
  *((_WORD *)v4 + 12) = 0;
  *((_BYTE *)v4 + 26) = 0;
  if (a2)
  {
    if (objc_msgSend(a2, "registrationDisplayStatus"))
      std::string::assign(a1, (const std::string::value_type *)objc_msgSend(objc_msgSend(a2, "registrationDisplayStatus"), "UTF8String"));
    a1[1].__r_.__value_.__s.__data_[0] = objc_msgSend(a2, "isInHomeCountry");
    a1[1].__r_.__value_.__s.__data_[1] = objc_msgSend(a2, "changedDueToSimRemoval");
    a1[1].__r_.__value_.__s.__data_[2] = objc_msgSend(a2, "isRegistrationForcedHome");
  }
  else
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021461A0);
    v5 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#clct,CLCTRegistrationDisplayStatus, status is null", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021461A0);
      v9[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#clct,CLCTRegistrationDisplayStatus, status is null", v9, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "CLTelephonyService_Type::CLCTRegistrationDisplayStatus::CLCTRegistrationDisplayStatus(CTRegistrationDisplayStatus *)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  return a1;
}

void sub_1005A5768(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *sub_1005A5788(std::string *a1, const __CFDictionary *a2)
{
  _QWORD *v4;
  BOOL *v5;
  BOOL *v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  NSObject *v10;
  const char *v11;
  NSObject *v12;
  const char *v13;
  NSObject *v14;
  const char *v16;
  _WORD v17[8];
  uint8_t v18[16];
  uint8_t buf[1640];

  v4 = sub_1015A2E04(a1, "");
  *((_WORD *)v4 + 12) = 0;
  v5 = (BOOL *)(v4 + 3);
  *((_BYTE *)v4 + 26) = 0;
  v6 = (BOOL *)v4 + 26;
  sub_1001C1D6C((int)v18, a2);
  if (sub_1000BD5F0((uint64_t)v18, (uint64_t)CFSTR("kRegistrationStatusKey"), a1))
  {
    if ((sub_1001E48E4((uint64_t)v18, (uint64_t)CFSTR("kRegistrationInHomeCountryKey"), v5) & 1) != 0)
    {
      if ((sub_1001E48E4((uint64_t)v18, (uint64_t)CFSTR("kRegistrationChangedDueToSimRemovalKey"), v5 + 1) & 1) != 0)
      {
        if ((sub_1001E48E4((uint64_t)v18, (uint64_t)CFSTR("kRegistrationIsForcedRegisteredHomeKey"), v6) & 1) == 0)
        {
          if (qword_1022A02A0 != -1)
            dispatch_once(&qword_1022A02A0, &stru_1021461A0);
          v7 = qword_1022A02A8;
          if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#clct,CLCTRegistrationDisplayStatus, couldn't get value for isRegistrationForcedHome", buf, 2u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A02A0 != -1)
              dispatch_once(&qword_1022A02A0, &stru_1021461A0);
            v17[0] = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#clct,CLCTRegistrationDisplayStatus, couldn't get value for isRegistrationForcedHome", v17, 2);
            v9 = (uint8_t *)v8;
            sub_100512490("Generic", 1, 0, 0, "CLTelephonyService_Type::CLCTRegistrationDisplayStatus::CLCTRegistrationDisplayStatus(CFDictionaryRef)", "%s\n", v8);
LABEL_38:
            if (v9 != buf)
              free(v9);
          }
        }
      }
      else
      {
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021461A0);
        v14 = qword_1022A02A8;
        if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "#clct,CLCTRegistrationDisplayStatus, couldn't get value for changedDueToSimRemoval", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02A0 != -1)
            dispatch_once(&qword_1022A02A0, &stru_1021461A0);
          v17[0] = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#clct,CLCTRegistrationDisplayStatus, couldn't get value for changedDueToSimRemoval", v17, 2);
          v9 = (uint8_t *)v16;
          sub_100512490("Generic", 1, 0, 0, "CLTelephonyService_Type::CLCTRegistrationDisplayStatus::CLCTRegistrationDisplayStatus(CFDictionaryRef)", "%s\n", v16);
          goto LABEL_38;
        }
      }
    }
    else
    {
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021461A0);
      v12 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#clct,CLCTRegistrationDisplayStatus, couldn't get value for isInHomeCountry", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021461A0);
        v17[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#clct,CLCTRegistrationDisplayStatus, couldn't get value for isInHomeCountry", v17, 2);
        v9 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "CLTelephonyService_Type::CLCTRegistrationDisplayStatus::CLCTRegistrationDisplayStatus(CFDictionaryRef)", "%s\n", v13);
        goto LABEL_38;
      }
    }
  }
  else
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021461A0);
    v10 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#clct,CLCTRegistrationDisplayStatus, couldn't get value for registrationDisplayStatus", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021461A0);
      v17[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#clct,CLCTRegistrationDisplayStatus, couldn't get value for registrationDisplayStatus", v17, 2);
      v9 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "CLTelephonyService_Type::CLCTRegistrationDisplayStatus::CLCTRegistrationDisplayStatus(CFDictionaryRef)", "%s\n", v11);
      goto LABEL_38;
    }
  }
  sub_10011A5A8(v18);
  return a1;
}

void sub_1005A5D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_10011A5A8(va);
  if (*(char *)(v5 + 23) < 0)
    operator delete(*(void **)v5);
  _Unwind_Resume(a1);
}

NSDictionary *sub_1005A5D60(uint64_t *a1)
{
  uint64_t *v2;
  _QWORD v4[4];
  _QWORD v5[4];

  v4[0] = CFSTR("kRegistrationStatusKey");
  v2 = a1;
  if (*((char *)a1 + 23) < 0)
    v2 = (uint64_t *)*a1;
  v5[0] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v2);
  v4[1] = CFSTR("kRegistrationInHomeCountryKey");
  v5[1] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned __int8 *)a1 + 24));
  v4[2] = CFSTR("kRegistrationChangedDueToSimRemovalKey");
  v5[2] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned __int8 *)a1 + 25));
  v4[3] = CFSTR("kRegistrationIsForcedRegisteredHomeKey");
  v5[3] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned __int8 *)a1 + 26));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 4);
}

uint64_t sub_1005A5E4C(uint64_t a1, int a2)
{
  int v2;
  NSObject *v3;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  v2 = a2 + 2;
  if ((a2 + 2) < 0xD && ((0x1EF7u >> v2) & 1) != 0)
    return dword_101BB7140[v2];
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_1021461A0);
  v3 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#clct,CLCTDataStatus, invalid value for CTWirelessAccessTechnology", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021461A0);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#clct,CLCTDataStatus, invalid value for CTWirelessAccessTechnology", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 0, "CLCTWirelessAccessTechnology CLTelephonyService_Type::CLCTDataStatus::getWirelessAccessTechnology(CTWirelessAccessTechnology)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  return 4294967294;
}

uint64_t sub_1005A5FFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  v2 = a2;
  if (a2 >= 0x12)
  {
    if ((_DWORD)a2 == 18)
      v2 = 18;
    else
      v2 = 0;
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021461A0);
    v4 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#clct,CLCTDataStatus, invalid value for CTDataIndicatorStatus", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021461A0);
      v7[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#clct,CLCTDataStatus, invalid value for CTDataIndicatorStatus", v7, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "CLCTDataIndicatorStatus CLTelephonyService_Type::CLCTDataStatus::getDataIndicatorStatus(CTDataIndicatorStatus)", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  return v2;
}

uint64_t sub_1005A61A0(uint64_t a1, void *a2)
{
  id v4;
  id v5;
  id v6;
  NSObject *v7;
  const char *v9;
  uint8_t *v10;
  _WORD v11[8];
  uint8_t buf[1640];

  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 16) = -2;
  *(_WORD *)(a1 + 20) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  if (a2)
  {
    *(_BYTE *)a1 = objc_msgSend(a2, "attached");
    *(_BYTE *)(a1 + 12) = objc_msgSend(a2, "roamAllowed");
    *(_BYTE *)(a1 + 20) = objc_msgSend(a2, "dataPlanSignalingReductionOverride");
    *(_BYTE *)(a1 + 21) = objc_msgSend(a2, "cellularDataPossible");
    *(_DWORD *)(a1 + 24) = objc_msgSend(a2, "activeContexts");
    *(_DWORD *)(a1 + 28) = objc_msgSend(a2, "totalActiveContexts");
    *(_BYTE *)(a1 + 32) = objc_msgSend(a2, "inHomeCountry");
    v4 = objc_msgSend(a2, "radioTechnology");
    *(_DWORD *)(a1 + 16) = sub_1005A5E4C((uint64_t)v4, (int)v4);
    v5 = objc_msgSend(a2, "indicator");
    *(_DWORD *)(a1 + 4) = sub_1005A5FFC((uint64_t)v5, (uint64_t)v5);
    v6 = objc_msgSend(a2, "indicatorOverride");
    *(_DWORD *)(a1 + 8) = sub_1005A5FFC((uint64_t)v6, (uint64_t)v6);
  }
  else
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021461A0);
    v7 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#clct,CLCTDataStatus, status is null", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021461A0);
      v11[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#clct,CLCTDataStatus, status is null", v11, 2);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 0, "CLTelephonyService_Type::CLCTDataStatus::CLCTDataStatus(CTDataStatus *)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
  return a1;
}

uint64_t sub_1005A63F0(uint64_t a1, const __CFDictionary *a2)
{
  _DWORD *v3;
  BOOL *v4;
  BOOL *v5;
  _DWORD *v6;
  BOOL *v7;
  NSObject *v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  NSObject *v12;
  const char *v13;
  NSObject *v14;
  const char *v15;
  NSObject *v16;
  const char *v17;
  NSObject *v18;
  const char *v19;
  NSObject *v20;
  const char *v21;
  NSObject *v22;
  const char *v23;
  NSObject *v24;
  const char *v25;
  NSObject *v26;
  const char *v28;
  _WORD v29[8];
  _DWORD v30[4];
  _DWORD v31[4];
  _DWORD v32[4];
  uint8_t v33[16];
  uint8_t buf[1640];

  *(_QWORD *)(a1 + 4) = 0;
  v3 = (_DWORD *)(a1 + 4);
  *(_BYTE *)(a1 + 12) = 0;
  v4 = (BOOL *)(a1 + 12);
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 16) = -2;
  *(_WORD *)(a1 + 20) = 0;
  v5 = (BOOL *)(a1 + 20);
  *(_QWORD *)(a1 + 24) = 0;
  v6 = (_DWORD *)(a1 + 24);
  *(_BYTE *)(a1 + 32) = 0;
  v7 = (BOOL *)(a1 + 32);
  sub_1001C1D6C((int)v33, a2);
  if ((sub_1001E48E4((uint64_t)v33, (uint64_t)CFSTR("kDataAttachedKey"), (BOOL *)a1) & 1) != 0)
  {
    v32[0] = 0;
    if ((sub_1001C1194((uint64_t)v33, (uint64_t)CFSTR("kDataIndicatorKey"), v32) & 1) != 0)
    {
      *v3 = v32[0];
      v31[0] = 0;
      if ((sub_1001C1194((uint64_t)v33, (uint64_t)CFSTR("kDataIndicatorOverrideKey"), v31) & 1) != 0)
      {
        *(_DWORD *)(a1 + 8) = v31[0];
        if ((sub_1001E48E4((uint64_t)v33, (uint64_t)CFSTR("kDataRoamAllowedKey"), v4) & 1) != 0)
        {
          v30[0] = 0;
          if ((sub_1001C1194((uint64_t)v33, (uint64_t)CFSTR("kDataRadioAccessTechnologyKey"), v30) & 1) != 0)
          {
            *(_DWORD *)(a1 + 16) = v30[0];
            if ((sub_1001E48E4((uint64_t)v33, (uint64_t)CFSTR("kDataPlanSignalingReductionOverrideKey"), v5) & 1) != 0)
            {
              if ((sub_1001E48E4((uint64_t)v33, (uint64_t)CFSTR("kDataCellularDataPossibleKey"), (BOOL *)(a1 + 21)) & 1) != 0)
              {
                if ((sub_1000B1180((uint64_t)v33, (uint64_t)CFSTR("kDataActiveContextsKey"), v6) & 1) != 0)
                {
                  if ((sub_1000B1180((uint64_t)v33, (uint64_t)CFSTR("kDataTotalActiveContextsKey"), (_DWORD *)(a1 + 28)) & 1) != 0)
                  {
                    if ((sub_1001E48E4((uint64_t)v33, (uint64_t)CFSTR("kDataInHomeCountryKey"), v7) & 1) == 0)
                    {
                      if (qword_1022A02A0 != -1)
                        dispatch_once(&qword_1022A02A0, &stru_1021461A0);
                      v8 = qword_1022A02A8;
                      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
                      {
                        *(_WORD *)buf = 0;
                        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#clct,CLCTDataStatus, couldn't get value for totalActiveContexts", buf, 2u);
                      }
                      if (sub_1001BFF7C(115, 0))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_1022A02A0 == -1)
                          goto LABEL_89;
                        goto LABEL_92;
                      }
                    }
                  }
                  else
                  {
                    if (qword_1022A02A0 != -1)
                      dispatch_once(&qword_1022A02A0, &stru_1021461A0);
                    v26 = qword_1022A02A8;
                    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "#clct,CLCTDataStatus, couldn't get value for totalActiveContexts", buf, 2u);
                    }
                    if (sub_1001BFF7C(115, 0))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_1022A02A0 == -1)
                      {
LABEL_89:
                        v29[0] = 0;
                        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#clct,CLCTDataStatus, couldn't get value for totalActiveContexts", v29, 2);
                        v11 = (uint8_t *)v28;
                        sub_100512490("Generic", 1, 0, 0, "CLTelephonyService_Type::CLCTDataStatus::CLCTDataStatus(CFDictionaryRef)", "%s\n", v28);
LABEL_90:
                        if (v11 != buf)
                          free(v11);
                        goto LABEL_87;
                      }
LABEL_92:
                      dispatch_once(&qword_1022A02A0, &stru_1021461A0);
                      goto LABEL_89;
                    }
                  }
                }
                else
                {
                  if (qword_1022A02A0 != -1)
                    dispatch_once(&qword_1022A02A0, &stru_1021461A0);
                  v24 = qword_1022A02A8;
                  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "#clct,CLCTDataStatus, couldn't get value for activeContexts", buf, 2u);
                  }
                  if (sub_1001BFF7C(115, 0))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1022A02A0 != -1)
                      dispatch_once(&qword_1022A02A0, &stru_1021461A0);
                    v29[0] = 0;
                    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#clct,CLCTDataStatus, couldn't get value for activeContexts", v29, 2);
                    v11 = (uint8_t *)v25;
                    sub_100512490("Generic", 1, 0, 0, "CLTelephonyService_Type::CLCTDataStatus::CLCTDataStatus(CFDictionaryRef)", "%s\n", v25);
                    goto LABEL_90;
                  }
                }
              }
              else
              {
                if (qword_1022A02A0 != -1)
                  dispatch_once(&qword_1022A02A0, &stru_1021461A0);
                v22 = qword_1022A02A8;
                if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "#clct,CLCTDataStatus, couldn't get value for cellularDataPossible", buf, 2u);
                }
                if (sub_1001BFF7C(115, 0))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1022A02A0 != -1)
                    dispatch_once(&qword_1022A02A0, &stru_1021461A0);
                  v29[0] = 0;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#clct,CLCTDataStatus, couldn't get value for cellularDataPossible", v29, 2);
                  v11 = (uint8_t *)v23;
                  sub_100512490("Generic", 1, 0, 0, "CLTelephonyService_Type::CLCTDataStatus::CLCTDataStatus(CFDictionaryRef)", "%s\n", v23);
                  goto LABEL_90;
                }
              }
            }
            else
            {
              if (qword_1022A02A0 != -1)
                dispatch_once(&qword_1022A02A0, &stru_1021461A0);
              v20 = qword_1022A02A8;
              if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "#clct,CLCTDataStatus, couldn't get value for dataPlanSignalingReductionOverride", buf, 2u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A02A0 != -1)
                  dispatch_once(&qword_1022A02A0, &stru_1021461A0);
                v29[0] = 0;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#clct,CLCTDataStatus, couldn't get value for dataPlanSignalingReductionOverride", v29, 2);
                v11 = (uint8_t *)v21;
                sub_100512490("Generic", 1, 0, 0, "CLTelephonyService_Type::CLCTDataStatus::CLCTDataStatus(CFDictionaryRef)", "%s\n", v21);
                goto LABEL_90;
              }
            }
          }
          else
          {
            if (qword_1022A02A0 != -1)
              dispatch_once(&qword_1022A02A0, &stru_1021461A0);
            v18 = qword_1022A02A8;
            if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "#clct,CLCTDataStatus, couldn't get value for radioTechnologyType", buf, 2u);
            }
            if (sub_1001BFF7C(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A02A0 != -1)
                dispatch_once(&qword_1022A02A0, &stru_1021461A0);
              v29[0] = 0;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#clct,CLCTDataStatus, couldn't get value for radioTechnologyType", v29, 2);
              v11 = (uint8_t *)v19;
              sub_100512490("Generic", 1, 0, 0, "CLTelephonyService_Type::CLCTDataStatus::CLCTDataStatus(CFDictionaryRef)", "%s\n", v19);
              goto LABEL_90;
            }
          }
        }
        else
        {
          if (qword_1022A02A0 != -1)
            dispatch_once(&qword_1022A02A0, &stru_1021461A0);
          v16 = qword_1022A02A8;
          if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "#clct,CLCTDataStatus, couldn't get value for roamAllowed", buf, 2u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A02A0 != -1)
              dispatch_once(&qword_1022A02A0, &stru_1021461A0);
            LOWORD(v30[0]) = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#clct,CLCTDataStatus, couldn't get value for roamAllowed", v30, 2);
            v11 = (uint8_t *)v17;
            sub_100512490("Generic", 1, 0, 0, "CLTelephonyService_Type::CLCTDataStatus::CLCTDataStatus(CFDictionaryRef)", "%s\n", v17);
            goto LABEL_90;
          }
        }
      }
      else
      {
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021461A0);
        v14 = qword_1022A02A8;
        if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "#clct,CLCTDataStatus, couldn't get value for indicatorOverrideType", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02A0 != -1)
            dispatch_once(&qword_1022A02A0, &stru_1021461A0);
          LOWORD(v30[0]) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#clct,CLCTDataStatus, couldn't get value for indicatorOverrideType", v30, 2);
          v11 = (uint8_t *)v15;
          sub_100512490("Generic", 1, 0, 0, "CLTelephonyService_Type::CLCTDataStatus::CLCTDataStatus(CFDictionaryRef)", "%s\n", v15);
          goto LABEL_90;
        }
      }
    }
    else
    {
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021461A0);
      v12 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#clct,CLCTDataStatus, couldn't get value for indicatorType", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021461A0);
        LOWORD(v31[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#clct,CLCTDataStatus, couldn't get value for indicatorType", v31, 2);
        v11 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "CLTelephonyService_Type::CLCTDataStatus::CLCTDataStatus(CFDictionaryRef)", "%s\n", v13);
        goto LABEL_90;
      }
    }
  }
  else
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021461A0);
    v9 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#clct,CLCTDataStatus, couldn't get value for attached", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021461A0);
      LOWORD(v32[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#clct,CLCTDataStatus, couldn't get value for attached", v32, 2);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "CLTelephonyService_Type::CLCTDataStatus::CLCTDataStatus(CFDictionaryRef)", "%s\n", v10);
      goto LABEL_90;
    }
  }
LABEL_87:
  sub_10011A5A8(v33);
  return a1;
}

void sub_1005A712C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

NSDictionary *sub_1005A7180(unsigned __int8 *a1)
{
  _QWORD v3[10];
  _QWORD v4[10];

  v3[0] = CFSTR("kDataAttachedKey");
  v4[0] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *a1);
  v3[1] = CFSTR("kDataIndicatorKey");
  v4[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a1 + 1));
  v3[2] = CFSTR("kDataIndicatorOverrideKey");
  v4[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a1 + 2));
  v3[3] = CFSTR("kDataRoamAllowedKey");
  v4[3] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a1[12]);
  v3[4] = CFSTR("kDataRadioAccessTechnologyKey");
  v4[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a1 + 4));
  v3[5] = CFSTR("kDataPlanSignalingReductionOverrideKey");
  v4[5] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a1[20]);
  v3[6] = CFSTR("kDataCellularDataPossibleKey");
  v4[6] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a1[21]);
  v3[7] = CFSTR("kDataActiveContextsKey");
  v4[7] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)a1 + 6));
  v3[8] = CFSTR("kDataTotalActiveContextsKey");
  v4[8] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)a1 + 7));
  v3[9] = CFSTR("kDataInHomeCountryKey");
  v4[9] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a1[32]);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 10);
}

uint64_t sub_1005A7304(uint64_t a1, void *a2)
{
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  *(_WORD *)a1 = 0;
  if (a2)
  {
    *(_BYTE *)a1 = objc_msgSend(a2, "isRegisteredForSMS");
    *(_BYTE *)(a1 + 1) = objc_msgSend(a2, "isRegisteredForVoice");
  }
  else
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021461A0);
    v4 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#clct,CLCTImsRegStatus, status is null", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021461A0);
      v8[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#clct,CLCTImsRegStatus, status is null", v8, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "CLTelephonyService_Type::CLCTImsRegStatus::CLCTImsRegStatus(CTIMSRegistrationStatus *)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  return a1;
}

BOOL *sub_1005A74C0(BOOL *a1, const __CFDictionary *a2)
{
  BOOL *v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  const char *v9;
  _WORD v10[8];
  uint8_t v11[16];
  uint8_t buf[1640];

  *(_WORD *)a1 = 0;
  v3 = a1 + 1;
  sub_1001C1D6C((int)v11, a2);
  if ((sub_1001E48E4((uint64_t)v11, (uint64_t)CFSTR("kIsRegisteredForSmsOverImsKey"), a1) & 1) != 0)
  {
    if ((sub_1001E48E4((uint64_t)v11, (uint64_t)CFSTR("kIsRegisteredForVoiceOverImsKey"), v3) & 1) == 0)
    {
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021461A0);
      v4 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#clct,CLCTImsRegStatus, couldn't get value for RegisteredForVoiceOverIms", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021461A0);
        v10[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#clct,CLCTImsRegStatus, couldn't get value for RegisteredForVoiceOverIms", v10, 2);
        v6 = (uint8_t *)v5;
        sub_100512490("Generic", 1, 0, 0, "CLTelephonyService_Type::CLCTImsRegStatus::CLCTImsRegStatus(CFDictionaryRef)", "%s\n", v5);
LABEL_20:
        if (v6 != buf)
          free(v6);
      }
    }
  }
  else
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021461A0);
    v7 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#clct,CLCTImsRegStatus, couldn't get value for RegisteredForSmsOverIms", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021461A0);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#clct,CLCTImsRegStatus, couldn't get value for RegisteredForSmsOverIms", v10, 2);
      v6 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 0, "CLTelephonyService_Type::CLCTImsRegStatus::CLCTImsRegStatus(CFDictionaryRef)", "%s\n", v9);
      goto LABEL_20;
    }
  }
  sub_10011A5A8(v11);
  return a1;
}

void sub_1005A77C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

NSDictionary *sub_1005A77EC(unsigned __int8 *a1)
{
  NSNumber *v2;
  _QWORD v4[2];
  _QWORD v5[2];

  v4[0] = CFSTR("kIsRegisteredForSmsOverImsKey");
  v2 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *a1);
  v4[1] = CFSTR("kIsRegisteredForVoiceOverImsKey");
  v5[0] = v2;
  v5[1] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a1[1]);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 2);
}

uint64_t sub_1005A788C(uint64_t a1, void *a2)
{
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  *(_WORD *)a1 = 0;
  *(_BYTE *)(a1 + 2) = 0;
  if (a2)
  {
    *(_BYTE *)a1 = objc_msgSend(objc_msgSend(a2, "userDataPreferred"), "BOOLValue");
    *(_BYTE *)(a1 + 1) = objc_msgSend(objc_msgSend(a2, "userDefaultVoice"), "BOOLValue");
    *(_BYTE *)(a1 + 2) = objc_msgSend(a2, "isSimPresent");
  }
  else
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021461A0);
    v4 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#clct,CLCTXPCServiceSubscriptionContext, context is null", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021461A0);
      v8[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#clct,CLCTXPCServiceSubscriptionContext, context is null", v8, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "CLTelephonyService_Type::CLCTXPCServiceSubscriptionContext::CLCTXPCServiceSubscriptionContext(CTXPCServiceSubscriptionContext *)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  return a1;
}

BOOL *sub_1005A7A60(BOOL *a1, const __CFDictionary *a2)
{
  BOOL *v3;
  BOOL *v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  NSObject *v8;
  const char *v9;
  NSObject *v10;
  const char *v12;
  _WORD v13[8];
  uint8_t v14[16];
  uint8_t buf[1640];

  *(_WORD *)a1 = 0;
  v3 = a1 + 1;
  a1[2] = 0;
  v4 = a1 + 2;
  sub_1001C1D6C((int)v14, a2);
  if ((sub_1001E48E4((uint64_t)v14, (uint64_t)CFSTR("kUserDataPreferredKey"), a1) & 1) != 0)
  {
    if ((sub_1001E48E4((uint64_t)v14, (uint64_t)CFSTR("kUserDefaultVoiceKey"), v3) & 1) != 0)
    {
      if ((sub_1001E48E4((uint64_t)v14, (uint64_t)CFSTR("kSimPresentKey"), v4) & 1) == 0)
      {
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021461A0);
        v5 = qword_1022A02A8;
        if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#clct,CLCTXPCServiceSubscriptionContext, couldn't get value for isSimPresent", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02A0 != -1)
            dispatch_once(&qword_1022A02A0, &stru_1021461A0);
          v13[0] = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#clct,CLCTXPCServiceSubscriptionContext, couldn't get value for isSimPresent", v13, 2);
          v7 = (uint8_t *)v6;
          sub_100512490("Generic", 1, 0, 0, "CLTelephonyService_Type::CLCTXPCServiceSubscriptionContext::CLCTXPCServiceSubscriptionContext(CFDictionaryRef)", "%s\n", v6);
LABEL_29:
          if (v7 != buf)
            free(v7);
        }
      }
    }
    else
    {
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021461A0);
      v10 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#clct,CLCTXPCServiceSubscriptionContext, couldn't get value for userDefaultVoice", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021461A0);
        v13[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#clct,CLCTXPCServiceSubscriptionContext, couldn't get value for userDefaultVoice", v13, 2);
        v7 = (uint8_t *)v12;
        sub_100512490("Generic", 1, 0, 0, "CLTelephonyService_Type::CLCTXPCServiceSubscriptionContext::CLCTXPCServiceSubscriptionContext(CFDictionaryRef)", "%s\n", v12);
        goto LABEL_29;
      }
    }
  }
  else
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021461A0);
    v8 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#clct,CLCTXPCServiceSubscriptionContext, couldn't get value for userDataPreferred", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021461A0);
      v13[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#clct,CLCTXPCServiceSubscriptionContext, couldn't get value for userDataPreferred", v13, 2);
      v7 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 0, "CLTelephonyService_Type::CLCTXPCServiceSubscriptionContext::CLCTXPCServiceSubscriptionContext(CFDictionaryRef)", "%s\n", v9);
      goto LABEL_29;
    }
  }
  sub_10011A5A8(v14);
  return a1;
}

void sub_1005A7EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

NSDictionary *sub_1005A7ED4(unsigned __int8 *a1)
{
  _QWORD v3[3];
  _QWORD v4[3];

  v3[0] = CFSTR("kUserDataPreferredKey");
  v4[0] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *a1);
  v3[1] = CFSTR("kUserDefaultVoiceKey");
  v4[1] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a1[1]);
  v3[2] = CFSTR("kSimPresentKey");
  v4[2] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a1[2]);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 3);
}

void sub_1005A7F94()
{
  operator new();
}

void sub_1005A80D0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

uint64_t sub_1005A8130(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  id v13;
  id v14;

  *(_QWORD *)a1 = off_1021463A0;
  *(_QWORD *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]([CLNotifierClientAdapter alloc], "initWithClient:", a1);
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0)
    v12 = a3;
  else
    v12 = (uint64_t *)*a3;
  v13 = objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(_QWORD *)(a1 + 16) = v13;
  v14 = v13;
  if (a2)
    objc_msgSend(*(id *)(a1 + 16), "setDelegateEntityName:", a2);
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

void sub_1005A8204(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021460C0);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_1021460C0);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLTelephonyService_Type::Notification, NotificationData_T = CLTelephonyService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

BOOL sub_1005A8478(uint64_t a1, int a2, unsigned int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v14 = sub_1001CFE7C(a3);
    v17 = *(_QWORD *)(v6 + 48);
    v16 = v6 + 48;
    v15 = v17;
    if (!v17)
      goto LABEL_29;
    v18 = v16;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v14;
      if (v19 >= v14)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v16 || v14 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v16;
    return v18 != v16;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021460C0);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021460C0);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLTelephonyService_Type::Notification, NotificationData_T = CLTelephonyService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

BOOL sub_1005A86FC(char *a1, int a2, unsigned int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  int v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  int v20;
  uint64_t v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE buf[12];
  __int16 v36;
  void **v37;
  char v38;
  int v39;
  _QWORD *v40;
  __int16 v41;
  _BYTE *v42;
  void *__p[2];
  char v44;

  HIDWORD(v34) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v12 = sub_1001CFE7C(a3);
        v15 = (char *)*((_QWORD *)v8 + 6);
        v14 = v8 + 48;
        v13 = v15;
        if (v15)
        {
          v16 = v14;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v12;
            if (v17 >= v12)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v14 && v12 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = sub_1001CFE7C(a3);
            sub_10009E904((uint64_t)(v14 - 8), (int *)__p);
            v20 = sub_1001CFE7C(a3);
            v21 = *((_QWORD *)a1 + 8);
            if (!v21)
              goto LABEL_33;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v21 + 32);
              v24 = v23 < v20;
              if (v23 >= v20)
                v25 = (uint64_t *)v21;
              else
                v25 = (uint64_t *)(v21 + 8);
              if (!v24)
                v22 = (char *)v21;
              v21 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v20 >= *((_DWORD *)v22 + 8))
            {
              sub_10009E904((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, unsigned int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021460C0);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, unsigned int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v44 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v36 = 2082;
                v37 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_1021460C0);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, unsigned int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v38 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v39 = 136446466;
                v40 = v29;
                v41 = 2082;
                v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                v33 = v32;
                if (v38 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLTelephonyService_Type::Notification, NotificationData_T = CLTelephonyService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v33);
                if (v33 != (char *)__p)
                  free(v33);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

void sub_1005A8A98(uint64_t a1, unsigned int *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t *v10;

  v3 = sub_1001CFE7C(a2);
  v6 = *(_QWORD *)(a1 + 64);
  v5 = a1 + 64;
  v4 = v6;
  if (v6)
  {
    v7 = v5;
    do
    {
      v8 = *(_DWORD *)(v4 + 32);
      v9 = v8 < v3;
      if (v8 >= v3)
        v10 = (uint64_t *)v4;
      else
        v10 = (uint64_t *)(v4 + 8);
      if (!v9)
        v7 = v4;
      v4 = *v10;
    }
    while (*v10);
    if (v7 != v5 && v3 >= *(_DWORD *)(v7 + 32))
      sub_100346F9C((_QWORD *)(v7 + 64));
  }
}

uint64_t sub_1005A8B08(uint64_t a1, unsigned int *a2, const void **a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  CFTypeRef *v13;
  CFTypeRef v14;
  const void *v15;
  const void *v17;

  v5 = sub_1001CFE7C(a2);
  v8 = *(_QWORD *)(a1 + 64);
  v7 = a1 + 64;
  v6 = v8;
  if (!v8)
    return 0;
  v9 = v7;
  do
  {
    v10 = *(_DWORD *)(v6 + 32);
    v11 = v10 < v5;
    if (v10 >= v5)
      v12 = (uint64_t *)v6;
    else
      v12 = (uint64_t *)(v6 + 8);
    if (!v11)
      v9 = v6;
    v6 = *v12;
  }
  while (*v12);
  if (v9 == v7)
    return 0;
  if (v5 < *(_DWORD *)(v9 + 32))
    return 0;
  v13 = *(CFTypeRef **)(v9 + 64);
  if (!v13)
    return 0;
  v14 = *v13;
  if (*v13)
    CFRetain(*v13);
  v15 = *a3;
  *a3 = v14;
  v17 = v15;
  sub_1001358BC(&v17);
  return 1;
}

uint64_t sub_1005A8BAC(uint64_t a1, unsigned int *a2, const void **a3)
{
  uint64_t **v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  int v10;
  __int128 v11;
  int *v12;

  sub_1005A97E0(a3, &v11);
  v10 = sub_1001CFE7C(a2);
  v12 = &v10;
  v5 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v10, (uint64_t)&unk_101B9EB60, &v12);
  sub_1002B7674((uint64_t)(v5 + 8), &v11);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return 1;
}

void sub_1005A8C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

const void **sub_1005A8C74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const void *v5;

  v5 = 0;
  (*(void (**)(uint64_t, uint64_t, const void **, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, a2, &v5, a3, a4, 0);
  return sub_1001358BC(&v5);
}

void sub_1005A8CBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1001358BC((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1005A8CD0(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021460C0);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021460C0);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::listClients() [Notification_T = CLTelephonyService_Type::Notification, NotificationData_T = CLTelephonyService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021460C0);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021460C0);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::listClients() [Notification_T = CLTelephonyService_Type::Notification, NotificationData_T = CLTelephonyService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_1021460C0);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021460C0);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::listClients() [Notification_T = CLTelephonyService_Type::Notification, NotificationData_T = CLTelephonyService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_1005A927C(uint64_t a1)
{
  sub_1005AA0E8(a1);
  operator delete();
}

void sub_1005A92A0(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1005A92CC(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_1005A92F8(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_1005A9324(id a1)
{
  operator new();
}

void sub_1005A9370(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1005A939C(id a1)
{
  qword_1022A02A8 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

uint64_t sub_1005A93C8(uint64_t a1, int a2)
{
  *(_DWORD *)a1 = a2;
  sub_1015A2E04((_QWORD *)(a1 + 8), (char *)objc_msgSend(CFSTR("kBundleIDUnavailable"), "UTF8String"));
  *(_BYTE *)(a1 + 32) = 0;
  sub_1015A2E04((_QWORD *)(a1 + 40), (char *)objc_msgSend(CFSTR("kBundleVersionUnavailable"), "UTF8String"));
  *(_BYTE *)(a1 + 64) = 0;
  sub_100119F3C(a1 + 72);
  *(_BYTE *)(a1 + 88) = 0;
  sub_100119F3C(a1 + 96);
  *(_BYTE *)(a1 + 112) = 0;
  sub_100119F3C(a1 + 120);
  *(_BYTE *)(a1 + 136) = 0;
  return a1;
}

void sub_1005A9468(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = v4;
  sub_10011A5A8(v6);
  sub_10011A5A8(v5);
  if (*(char *)(v1 + 63) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1005A94C0(uint64_t a1)
{
  sub_10011A5A8(a1 + 120);
  sub_10011A5A8(a1 + 96);
  sub_10011A5A8(a1 + 72);
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

BOOL sub_1005A9518(uint64_t a1)
{
  return sub_100599418(*(_QWORD *)(a1 + 32), "CoreLocation debugging");
}

void sub_1005A9528(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_1005A9554(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

uint64_t sub_1005A9580(uint64_t result)
{
  if (*(_DWORD *)(result + 52) == -469794816)
    return (*(uint64_t (**)(_QWORD, const __CFString *, _QWORD))(**(_QWORD **)(result + 32) + 264))(*(_QWORD *)(result + 32), CFSTR("kCLTelephonyServiceResetNotification"), 0);
  return result;
}

void sub_1005A95B4(id a1)
{
  qword_1022A0088 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

uint64_t *sub_1005A95E0(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    sub_100008848(v2 + 16, *(_QWORD **)(v2 + 24));
    operator delete();
  }
  return result;
}

uint64_t *sub_1005A9630(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t **v4;
  uint64_t *v5;
  int v6;
  uint64_t **v7;
  int v8;
  uint64_t *v10;
  uint64_t v11;

  sub_1005A96E4(a1, a2, (uint64_t)&v10);
  v3 = v10;
  v4 = (uint64_t **)(a1 + 8);
  v5 = *(uint64_t **)(a1 + 8);
  if (v5)
  {
    v6 = *((_DWORD *)v10 + 8);
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 8);
        if (v6 >= v8)
          break;
        v5 = *v7;
        v4 = v7;
        if (!*v7)
          goto LABEL_10;
      }
      if (v8 >= v6)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v4 = v7 + 1;
        goto LABEL_10;
      }
    }
    v10 = 0;
    if (v3)
      sub_1004A5EA0((uint64_t)&v11, (_QWORD **)v3);
  }
  else
  {
    v7 = (uint64_t **)(a1 + 8);
LABEL_10:
    sub_1000145B0((uint64_t **)a1, (uint64_t)v7, v4, v10);
    return v10;
  }
  return (uint64_t *)v7;
}

uint64_t sub_1005A96E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t result;

  v5 = a1 + 8;
  v6 = operator new(0x58uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_1005A9764((uint64_t)v6 + 32, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1005A9748(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD **v2;
  uint64_t v3;

  *v1 = 0;
  sub_1004A5EA0(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1005A9764(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_DWORD *)a1 = sub_1001CFE7C((unsigned int *)a2);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = (_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v5;
  v6 = a1 + 16;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  if (v7)
  {
    *(_QWORD *)(v5 + 16) = v6;
    *(_QWORD *)(a2 + 8) = v4;
    *v4 = 0;
    *(_QWORD *)(a2 + 24) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v6;
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

_QWORD *sub_1005A97E0@<X0>(const void **a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x20uLL);
  result = sub_1005A9838(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1005A9824(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1005A9838(_QWORD *a1, const void **a2)
{
  const void *v3;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_102146330;
  v3 = *a2;
  a1[3] = *a2;
  if (v3)
    CFRetain(v3);
  return a1;
}

void sub_1005A987C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1005A9890(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102146330;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1005A98A4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102146330;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_1005A98D8(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_1005A9904(uint64_t a1, uint64_t a2)
{
  void *v3;

  if (*(char *)(a2 + 343) < 0)
    operator delete(*(void **)(a2 + 320));
  v3 = *(void **)(a2 + 88);
  if (v3)
  {
    *(_QWORD *)(a2 + 96) = v3;
    operator delete(v3);
  }
}

uint64_t sub_1005A9948(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  void *v46[5];

  v3 = *a1;
  v4 = 0x66FD0EB66FD0EB67 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x5E293205E29320)
    sub_100259694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x66FD0EB66FD0EB67 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2F149902F14990)
    v9 = 0x5E293205E29320;
  else
    v9 = v5;
  v46[4] = a1 + 2;
  if (v9)
    v10 = (char *)sub_1005A9B68(v7, v9);
  else
    v10 = 0;
  v11 = &v10[696 * v4];
  v46[0] = v10;
  v46[1] = v11;
  v46[3] = &v10[696 * v9];
  v12 = *(_OWORD *)(a2 + 16);
  v13 = *(_OWORD *)(a2 + 32);
  v14 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v11 + 60) = *(_OWORD *)(a2 + 60);
  *((_OWORD *)v11 + 2) = v13;
  *((_OWORD *)v11 + 3) = v14;
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v12;
  v16 = *(_DWORD *)(a2 + 80);
  v15 = a2 + 80;
  *((_DWORD *)v11 + 20) = v16;
  v11 += 80;
  *((_QWORD *)v11 + 2) = 0;
  *((_QWORD *)v11 + 3) = 0;
  *((_QWORD *)v11 + 1) = 0;
  *(_OWORD *)(v11 + 8) = *(_OWORD *)(v15 + 8);
  *((_QWORD *)v11 + 3) = *(_QWORD *)(v15 + 24);
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 24) = 0;
  *(_QWORD *)(v15 + 8) = 0;
  v17 = *(_OWORD *)(v15 + 96);
  v19 = *(_OWORD *)(v15 + 48);
  v18 = *(_OWORD *)(v15 + 64);
  *((_OWORD *)v11 + 5) = *(_OWORD *)(v15 + 80);
  *((_OWORD *)v11 + 6) = v17;
  *((_OWORD *)v11 + 3) = v19;
  *((_OWORD *)v11 + 4) = v18;
  v20 = *(_OWORD *)(v15 + 160);
  v22 = *(_OWORD *)(v15 + 112);
  v21 = *(_OWORD *)(v15 + 128);
  *((_OWORD *)v11 + 9) = *(_OWORD *)(v15 + 144);
  *((_OWORD *)v11 + 10) = v20;
  *((_OWORD *)v11 + 7) = v22;
  *((_OWORD *)v11 + 8) = v21;
  v24 = *(_OWORD *)(v15 + 192);
  v23 = *(_OWORD *)(v15 + 208);
  v25 = *(_OWORD *)(v15 + 176);
  *(_OWORD *)(v11 + 220) = *(_OWORD *)(v15 + 220);
  *((_OWORD *)v11 + 12) = v24;
  *((_OWORD *)v11 + 13) = v23;
  *((_OWORD *)v11 + 11) = v25;
  *((_OWORD *)v11 + 2) = *(_OWORD *)(v15 + 32);
  v26 = *(_OWORD *)(v15 + 240);
  *((_QWORD *)v11 + 32) = *(_QWORD *)(v15 + 256);
  *((_OWORD *)v11 + 15) = v26;
  *(_QWORD *)(v15 + 248) = 0;
  *(_QWORD *)(v15 + 256) = 0;
  *(_QWORD *)(v15 + 240) = 0;
  v27 = *(_OWORD *)(v15 + 360);
  v29 = *(_OWORD *)(v15 + 312);
  v28 = *(_OWORD *)(v15 + 328);
  *(_OWORD *)(v11 + 344) = *(_OWORD *)(v15 + 344);
  *(_OWORD *)(v11 + 360) = v27;
  *(_OWORD *)(v11 + 312) = v29;
  *(_OWORD *)(v11 + 328) = v28;
  v30 = *(_OWORD *)(v15 + 264);
  v31 = *(_OWORD *)(v15 + 296);
  *(_OWORD *)(v11 + 280) = *(_OWORD *)(v15 + 280);
  *(_OWORD *)(v11 + 296) = v31;
  *(_OWORD *)(v11 + 264) = v30;
  v33 = *(_OWORD *)(v15 + 392);
  v32 = *(_OWORD *)(v15 + 408);
  v34 = *(_OWORD *)(v15 + 376);
  *((_DWORD *)v11 + 106) = *(_DWORD *)(v15 + 424);
  *(_OWORD *)(v11 + 392) = v33;
  *(_OWORD *)(v11 + 408) = v32;
  *(_OWORD *)(v11 + 376) = v34;
  v35 = *(_OWORD *)(v15 + 432);
  v36 = *(_OWORD *)(v15 + 448);
  v37 = *(_OWORD *)(v15 + 480);
  *((_OWORD *)v11 + 29) = *(_OWORD *)(v15 + 464);
  *((_OWORD *)v11 + 30) = v37;
  *((_OWORD *)v11 + 27) = v35;
  *((_OWORD *)v11 + 28) = v36;
  v38 = *(_OWORD *)(v15 + 496);
  v39 = *(_OWORD *)(v15 + 512);
  v40 = *(_OWORD *)(v15 + 544);
  *((_OWORD *)v11 + 33) = *(_OWORD *)(v15 + 528);
  *((_OWORD *)v11 + 34) = v40;
  *((_OWORD *)v11 + 31) = v38;
  *((_OWORD *)v11 + 32) = v39;
  v41 = *(_OWORD *)(v15 + 560);
  v42 = *(_OWORD *)(v15 + 576);
  v43 = *(_OWORD *)(v15 + 592);
  *((_DWORD *)v11 + 152) = *(_DWORD *)(v15 + 608);
  *((_OWORD *)v11 + 36) = v42;
  *((_OWORD *)v11 + 37) = v43;
  *((_OWORD *)v11 + 35) = v41;
  v46[2] = v11 + 616;
  sub_1001C3750(a1, v46);
  v44 = a1[1];
  sub_1001C37C4(v46);
  return v44;
}

void sub_1005A9B54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1001C37C4((void **)va);
  _Unwind_Resume(a1);
}

void *sub_1005A9B68(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x5E293205E29321)
    sub_10025955C();
  return operator new(696 * a2);
}

uint64_t sub_1005A9BB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _OWORD *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  BOOL v42;
  uint64_t v43;
  _QWORD v45[3];
  char v46;
  __int128 v47;
  __int128 v48;

  v7 = a7;
  *(_QWORD *)&v48 = a6;
  *((_QWORD *)&v48 + 1) = a7;
  v47 = v48;
  v45[0] = a1;
  v45[1] = &v47;
  v45[2] = &v48;
  if (a3 == a5)
  {
    v43 = a6;
  }
  else
  {
    v8 = a3 - 696;
    do
    {
      v9 = v7 - 696;
      *(_OWORD *)v9 = *(_OWORD *)v8;
      v10 = *(_OWORD *)(v8 + 16);
      v11 = *(_OWORD *)(v8 + 32);
      v12 = *(_OWORD *)(v8 + 48);
      *(_OWORD *)(v9 + 60) = *(_OWORD *)(v8 + 60);
      *(_OWORD *)(v9 + 32) = v11;
      *(_OWORD *)(v9 + 48) = v12;
      *(_OWORD *)(v9 + 16) = v10;
      *(_DWORD *)(v9 + 80) = *(_DWORD *)(v8 + 80);
      v13 = v7 - 616;
      *(_QWORD *)(v13 + 16) = 0;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 8) = 0;
      *(_OWORD *)(v13 + 8) = *(_OWORD *)(v8 + 88);
      *(_QWORD *)(v13 + 24) = *(_QWORD *)(v8 + 104);
      *(_QWORD *)(v8 + 96) = 0;
      *(_QWORD *)(v8 + 104) = 0;
      *(_QWORD *)(v8 + 88) = 0;
      v14 = *(_OWORD *)(v8 + 176);
      v16 = *(_OWORD *)(v8 + 128);
      v15 = *(_OWORD *)(v8 + 144);
      *(_OWORD *)(v13 + 80) = *(_OWORD *)(v8 + 160);
      *(_OWORD *)(v13 + 96) = v14;
      *(_OWORD *)(v13 + 48) = v16;
      *(_OWORD *)(v13 + 64) = v15;
      v17 = *(_OWORD *)(v8 + 240);
      v19 = *(_OWORD *)(v8 + 192);
      v18 = *(_OWORD *)(v8 + 208);
      *(_OWORD *)(v13 + 144) = *(_OWORD *)(v8 + 224);
      *(_OWORD *)(v13 + 160) = v17;
      *(_OWORD *)(v13 + 112) = v19;
      *(_OWORD *)(v13 + 128) = v18;
      v21 = *(_OWORD *)(v8 + 272);
      v20 = *(_OWORD *)(v8 + 288);
      v22 = *(_OWORD *)(v8 + 256);
      *(_OWORD *)(v13 + 220) = *(_OWORD *)(v8 + 300);
      *(_OWORD *)(v13 + 192) = v21;
      *(_OWORD *)(v13 + 208) = v20;
      *(_OWORD *)(v13 + 176) = v22;
      *(_OWORD *)(v13 + 32) = *(_OWORD *)(v8 + 112);
      v23 = *(_OWORD *)(v8 + 320);
      *(_QWORD *)(v13 + 256) = *(_QWORD *)(v8 + 336);
      *(_OWORD *)(v13 + 240) = v23;
      *(_QWORD *)(v8 + 328) = 0;
      *(_QWORD *)(v8 + 336) = 0;
      *(_QWORD *)(v8 + 320) = 0;
      v24 = (_OWORD *)(v7 - 352);
      v25 = *(_OWORD *)(v8 + 424);
      v27 = *(_OWORD *)(v8 + 392);
      v26 = *(_OWORD *)(v8 + 408);
      *(_OWORD *)(v7 - 256) = *(_OWORD *)(v8 + 440);
      v24[4] = v26;
      v24[5] = v25;
      v24[3] = v27;
      v28 = *(_OWORD *)(v8 + 344);
      v29 = *(_OWORD *)(v8 + 376);
      v24[1] = *(_OWORD *)(v8 + 360);
      v24[2] = v29;
      *v24 = v28;
      v31 = *(_OWORD *)(v8 + 472);
      v30 = *(_OWORD *)(v8 + 488);
      v32 = *(_OWORD *)(v8 + 456);
      *(_DWORD *)(v7 - 192) = *(_DWORD *)(v8 + 504);
      *(_OWORD *)(v7 - 224) = v31;
      *(_OWORD *)(v7 - 208) = v30;
      *(_OWORD *)(v7 - 240) = v32;
      v33 = *(_OWORD *)(v8 + 512);
      v34 = *(_OWORD *)(v8 + 528);
      v35 = *(_OWORD *)(v8 + 544);
      *(_OWORD *)(v7 - 136) = *(_OWORD *)(v8 + 560);
      *(_OWORD *)(v7 - 152) = v35;
      *(_OWORD *)(v7 - 168) = v34;
      *(_OWORD *)(v7 - 184) = v33;
      v36 = *(_OWORD *)(v8 + 576);
      v37 = *(_OWORD *)(v8 + 592);
      v38 = *(_OWORD *)(v8 + 608);
      *(_OWORD *)(v7 - 72) = *(_OWORD *)(v8 + 624);
      *(_OWORD *)(v7 - 88) = v38;
      *(_OWORD *)(v7 - 104) = v37;
      *(_OWORD *)(v7 - 120) = v36;
      v39 = *(_OWORD *)(v8 + 640);
      v40 = *(_OWORD *)(v8 + 656);
      v41 = *(_OWORD *)(v8 + 672);
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(v8 + 688);
      *(_OWORD *)(v7 - 24) = v41;
      *(_OWORD *)(v7 - 40) = v40;
      *(_OWORD *)(v7 - 56) = v39;
      v7 = *((_QWORD *)&v48 + 1) - 696;
      *((_QWORD *)&v48 + 1) -= 696;
      v42 = v8 == a5;
      v8 -= 696;
    }
    while (!v42);
    v43 = v48;
  }
  v46 = 1;
  sub_1005A9D74((uint64_t)v45);
  return v43;
}

uint64_t sub_1005A9D74(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1005A9DA8((uint64_t *)a1);
  return a1;
}

void sub_1005A9DA8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_1005A9904(v3, v1);
      v1 += 696;
    }
    while (v1 != v2);
  }
}

void sub_1005A9DF8(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 696;
    sub_1005A9904(v4, i - 696);
  }
}

uint64_t sub_1005A9E3C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0x66FD0EB66FD0EB67 * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x5E293205E29320)
    sub_100259694();
  if (0xCDFA1D6CDFA1D6CELL * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0xCDFA1D6CDFA1D6CELL * ((a1[2] - *a1) >> 3);
  if ((unint64_t)(0x66FD0EB66FD0EB67 * ((a1[2] - *a1) >> 3)) >= 0x2F149902F14990)
    v6 = 0x5E293205E29320;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)sub_1005A9B68((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[696 * v3];
  v13 = &v7[696 * v6];
  sub_1005A9F60((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 696;
  sub_1001C3750(a1, &v10);
  v8 = a1[1];
  sub_1001C37C4(&v10);
  return v8;
}

void sub_1005A9F4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1001C37C4((void **)va);
  _Unwind_Resume(a1);
}

__n128 sub_1005A9F60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __n128 result;
  __int128 v36;
  __int128 v37;

  *(_OWORD *)a2 = *(_OWORD *)a3;
  v5 = *(_OWORD *)(a3 + 16);
  v6 = *(_OWORD *)(a3 + 32);
  v7 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 60) = *(_OWORD *)(a3 + 60);
  *(_OWORD *)(a2 + 32) = v6;
  *(_OWORD *)(a2 + 48) = v7;
  *(_OWORD *)(a2 + 16) = v5;
  v8 = a3 + 80;
  *(_DWORD *)(a2 + 80) = *(_DWORD *)(a3 + 80);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  v9 = a2 + 88;
  *(_QWORD *)(a2 + 104) = 0;
  sub_10027205C((_QWORD *)(a2 + 88), *(const void **)(a3 + 88), *(_QWORD *)(a3 + 96), (uint64_t)(*(_QWORD *)(a3 + 96) - *(_QWORD *)(a3 + 88)) >> 2);
  *(_OWORD *)(v9 + 24) = *(_OWORD *)(v8 + 32);
  v10 = *(_OWORD *)(v8 + 48);
  v11 = *(_OWORD *)(v8 + 64);
  v12 = *(_OWORD *)(v8 + 80);
  *(_OWORD *)(v9 + 88) = *(_OWORD *)(v8 + 96);
  *(_OWORD *)(v9 + 72) = v12;
  *(_OWORD *)(v9 + 56) = v11;
  *(_OWORD *)(v9 + 40) = v10;
  v13 = *(_OWORD *)(v8 + 112);
  v14 = *(_OWORD *)(v8 + 128);
  v15 = *(_OWORD *)(v8 + 144);
  *(_OWORD *)(v9 + 152) = *(_OWORD *)(v8 + 160);
  *(_OWORD *)(v9 + 136) = v15;
  *(_OWORD *)(v9 + 120) = v14;
  *(_OWORD *)(v9 + 104) = v13;
  v16 = *(_OWORD *)(v8 + 176);
  v17 = *(_OWORD *)(v8 + 192);
  v18 = *(_OWORD *)(v8 + 208);
  *(_OWORD *)(v9 + 212) = *(_OWORD *)(v8 + 220);
  *(_OWORD *)(v9 + 200) = v18;
  *(_OWORD *)(v9 + 184) = v17;
  *(_OWORD *)(v9 + 168) = v16;
  v19 = (_BYTE *)(v9 + 232);
  if (*(char *)(v8 + 263) < 0)
  {
    sub_100115CE4(v19, *(void **)(a3 + 320), *(_QWORD *)(a3 + 328));
  }
  else
  {
    v20 = *(_OWORD *)(v8 + 240);
    *(_QWORD *)(v9 + 248) = *(_QWORD *)(v8 + 256);
    *(_OWORD *)v19 = v20;
  }
  v21 = *(_OWORD *)(a3 + 344);
  v22 = *(_OWORD *)(a3 + 376);
  *(_OWORD *)(a2 + 360) = *(_OWORD *)(a3 + 360);
  *(_OWORD *)(a2 + 376) = v22;
  *(_OWORD *)(a2 + 344) = v21;
  v23 = *(_OWORD *)(a3 + 392);
  v24 = *(_OWORD *)(a3 + 408);
  v25 = *(_OWORD *)(a3 + 440);
  *(_OWORD *)(a2 + 424) = *(_OWORD *)(a3 + 424);
  *(_OWORD *)(a2 + 440) = v25;
  *(_OWORD *)(a2 + 392) = v23;
  *(_OWORD *)(a2 + 408) = v24;
  v26 = *(_OWORD *)(a3 + 456);
  v27 = *(_OWORD *)(a3 + 472);
  v28 = *(_OWORD *)(a3 + 488);
  *(_DWORD *)(a2 + 504) = *(_DWORD *)(a3 + 504);
  *(_OWORD *)(a2 + 472) = v27;
  *(_OWORD *)(a2 + 488) = v28;
  *(_OWORD *)(a2 + 456) = v26;
  v29 = *(_OWORD *)(a3 + 512);
  v30 = *(_OWORD *)(a3 + 528);
  v31 = *(_OWORD *)(a3 + 560);
  *(_OWORD *)(a2 + 544) = *(_OWORD *)(a3 + 544);
  *(_OWORD *)(a2 + 560) = v31;
  *(_OWORD *)(a2 + 512) = v29;
  *(_OWORD *)(a2 + 528) = v30;
  v32 = *(_OWORD *)(a3 + 576);
  v33 = *(_OWORD *)(a3 + 592);
  v34 = *(_OWORD *)(a3 + 624);
  *(_OWORD *)(a2 + 608) = *(_OWORD *)(a3 + 608);
  *(_OWORD *)(a2 + 624) = v34;
  *(_OWORD *)(a2 + 576) = v32;
  *(_OWORD *)(a2 + 592) = v33;
  result = *(__n128 *)(a3 + 640);
  v36 = *(_OWORD *)(a3 + 656);
  v37 = *(_OWORD *)(a3 + 672);
  *(_DWORD *)(a2 + 688) = *(_DWORD *)(a3 + 688);
  *(_OWORD *)(a2 + 656) = v36;
  *(_OWORD *)(a2 + 672) = v37;
  *(__n128 *)(a2 + 640) = result;
  return result;
}

void sub_1005AA0CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 96) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005AA0E8(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = off_1021463A0;
  v2 = (id *)(a1 + 8);
  objc_msgSend(*(id *)(a1 + 16), "forget:", *(_QWORD *)(a1 + 8));

  objc_msgSend(*v2, "invalidate");
  *v2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void sub_1005AA148()
{
  operator new();
}

void sub_1005AA1E4()
{
  operator delete();
}

const void **sub_1005AA208(uint64_t a1)
{
  const void **result;

  result = *(const void ***)(a1 + 32);
  if (result)
  {
    sub_1001358BC(result);
    operator delete();
  }
  return result;
}

float sub_1005AA23C(float **a1, int a2)
{
  int v2;
  float *v3;
  float v4;
  float v5;
  float *v6;
  float v7;
  float v8;
  int v9;
  float result;
  float v11;
  float v12;
  float *v13;
  float v14;
  float v15;
  float v16;
  float v17;

  if (a2 <= 1)
    v2 = 1;
  else
    v2 = a2;
  v3 = a1[1];
  if (*a1 == v3)
  {
    v5 = 0.0;
    v4 = 0.0;
  }
  else
  {
    v4 = 0.0;
    v5 = 0.0;
    v6 = *a1;
    do
    {
      v8 = *v6;
      v7 = v6[1];
      v6 += 2;
      v4 = v4 + (float)(v7 * v8);
      v5 = v5 + (float)(v8 * v8);
    }
    while (v6 != v3);
  }
  v9 = 0;
  result = v4 / fmaxf(v5, 0.0001);
  do
  {
    if (*a1 == v3)
    {
      v12 = 0.0;
      v11 = 0.0;
    }
    else
    {
      v11 = 0.0;
      v12 = 0.0;
      v13 = *a1;
      do
      {
        v15 = *v13;
        v14 = v13[1];
        v13 += 2;
        v16 = fabsf(v14 - (float)(v15 * result));
        if (v16 <= 0.0001)
          v17 = 10000.0;
        else
          v17 = 1.0 / v16;
        v11 = v11 + (float)((float)(v14 * v17) * v15);
        v12 = v12 + (float)((float)(v15 * v17) * v15);
      }
      while (v13 != v3);
    }
    ++v9;
    result = v11 / fmaxf(v12, 0.0001);
  }
  while (v9 != v2);
  return result;
}

uint64_t sub_1005AA304(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1)
    v2 = a1 - 8;
  else
    v2 = 0;
  return sub_1005AAFF0(v2, a2);
}

double sub_1005AA314(uint64_t a1)
{
  uint64_t v1;
  double result;

  v1 = a1 - 8;
  if (!a1)
    v1 = 0;
  result = 0.0;
  *(_QWORD *)(v1 + 896) = 0;
  *(_DWORD *)(v1 + 904) = 0;
  return result;
}

int *sub_1005AA334(int *result)
{
  int *v1;
  int v2;

  if (result)
    v1 = result - 2;
  else
    v1 = 0;
  *((_QWORD *)v1 + 112) = 0;
  v1[226] = 0;
  if (*((_WORD *)v1 + 23))
  {
    result = (int *)sub_1004784C4((unsigned __int16 *)v1 + 22, 0);
    v2 = *result;
  }
  else
  {
    v2 = 0;
  }
  v1[229] = v2;
  v1[230] = 0;
  return result;
}

uint64_t sub_1005AA38C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1)
    v2 = a1 - 8;
  else
    v2 = 0;
  return sub_1005AB0C8(v2, a2);
}

double sub_1005AA39C(uint64_t a1)
{
  uint64_t v1;
  double result;

  v1 = a1 - 8;
  if (!a1)
    v1 = 0;
  result = 0.0;
  *(_QWORD *)(v1 + 896) = 0;
  *(_DWORD *)(v1 + 904) = 0;
  return result;
}

uint64_t sub_1005AA3B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1)
    v2 = a1 - 8;
  else
    v2 = 0;
  return sub_1005AB364(v2, a2);
}

double sub_1005AA3C8(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 16) = 13;
  *(_WORD *)(a1 + 24) = 512;
  *(_QWORD *)a1 = off_1021465E0;
  *(_QWORD *)(a1 + 8) = &unk_102146498;
  *(_BYTE *)(a1 + 28) = 1;
  *(_QWORD *)(a1 + 44) = 0xC00000000;
  *(_DWORD *)(a1 + 40) = 1031798784;
  *(_BYTE *)(a1 + 100) = 1;
  *(_DWORD *)(a1 + 120) = 6;
  *(_QWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 148) = 1;
  *(_DWORD *)(a1 + 168) = 6;
  *(_QWORD *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 196) = 1;
  *(_DWORD *)(a1 + 216) = 47;
  *(_QWORD *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 408) = 1;
  *(_QWORD *)(a1 + 424) = 0x400000000;
  *(_DWORD *)(a1 + 420) = 0;
  *(_QWORD *)(a1 + 448) = off_10215FBA0;
  *(_QWORD *)(a1 + 456) = 0x4039000000000000;
  *(_OWORD *)(a1 + 464) = xmmword_101BB7190;
  *(_DWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  *(_BYTE *)(a1 + 512) = 1;
  *(_QWORD *)(a1 + 528) = 0x4B00000000;
  *(_DWORD *)(a1 + 524) = 0;
  *(_QWORD *)(a1 + 840) = 0;
  *(_QWORD *)(a1 + 848) = 0;
  *(_QWORD *)(a1 + 856) = 0xC08F380000000000;
  *(_QWORD *)(a1 + 864) = 0xC08F380000000000;
  *(_BYTE *)(a1 + 872) = 0;
  *(_QWORD *)(a1 + 880) = 0;
  *(_BYTE *)(a1 + 888) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 896) = xmmword_101BB71A0;
  *(_DWORD *)(a1 + 912) = 0;
  *(_QWORD *)(a1 + 916) = 0;
  return result;
}

uint64_t sub_1005AA4D4(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v4;
  BOOL v5;
  int v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  int v16;

  v4 = *(_DWORD *)(a1 + 908);
  v5 = __OFSUB__(v4, 1);
  v6 = v4 - 1;
  if (v6 < 0 == v5)
  {
    result = 0;
    *(_DWORD *)(a1 + 908) = v6;
    return result;
  }
  v8 = *(unsigned __int16 *)(a1 + 214);
  if (*(_DWORD *)(a1 + 216) != (_DWORD)v8)
    return 0;
  if (*(_WORD *)(a1 + 214))
  {
    v11 = 0;
    LODWORD(v12) = 0;
    do
      v12 = *(int *)sub_1000E3624((unsigned __int16 *)(a1 + 212), v11++) + (uint64_t)(int)v12;
    while (v8 != v11);
    v13 = *(_DWORD *)(a1 + 216);
    v14 = 100 * v12;
  }
  else
  {
    v13 = 0;
    v14 = 0;
  }
  v15 = v14 / v13;
  if ((int)v15 <= 19)
  {
    result = 0;
    *(_DWORD *)(a1 + 912) = 0;
    return result;
  }
  v16 = *(_DWORD *)(a1 + 912);
  *(_DWORD *)(a1 + 912) = v16 + 1;
  if (v15 < 0x4C)
    return 0;
  result = 0;
  if (v16 >= 46 && !*(_DWORD *)(a2 + 20) && !*(_BYTE *)(a2 + 80) && *(int *)(a2 + 16) >= 5)
  {
    *a3 = v16 + 1 + (int)(float)((float)v13 * 0.2);
    return 1;
  }
  return result;
}

uint64_t sub_1005AA600(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unsigned __int16 *v4;

  v1 = *(unsigned __int16 *)(a1 + 18);
  if (!*(_WORD *)(a1 + 18))
    return 0;
  v2 = 0;
  LODWORD(v3) = 0;
  v4 = (unsigned __int16 *)(a1 + 16);
  do
    v3 = (*(_DWORD *)sub_1000E3624(v4, v2++) + v3);
  while (v1 != v2);
  return v3;
}

uint64_t sub_1005AA660(uint64_t a1, double *a2)
{
  _DWORD *v4;
  float v5;
  _BOOL4 v6;
  _BOOL4 v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  float v15;
  double v16;
  BOOL v17;
  double v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  NSObject *v29;
  int v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  int v35;
  double v36;
  uint64_t v37;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  double v44;
  const char *v45;
  void **v46;
  int v47;
  int v48;
  int v49;
  double v50;
  double v51;
  double v52;
  double v53;
  __int128 v54;
  _BYTE v55[28];
  double v56;
  int v57;
  void *__p;
  void *v59;
  char *v60;
  _DWORD v61[2];
  __int16 v62;
  int v63;
  __int16 v64;
  int v65;
  __int16 v66;
  int v67;
  __int16 v68;
  int v69;
  __int16 v70;
  double v71;
  __int16 v72;
  double v73;
  __int16 v74;
  _BOOL4 v75;
  __int16 v76;
  int v77;
  __int16 v78;
  double v79;
  __int16 v80;
  int v81;
  __int16 v82;
  uint64_t v83;
  __int16 v84;
  int v85;
  __int16 v86;
  double v87;
  void *buf;
  __int16 v89;
  int v90;
  __int16 v91;
  int v92;
  __int16 v93;
  int v94;
  __int16 v95;
  int v96;
  __int16 v97;
  double v98;
  __int16 v99;
  double v100;
  __int16 v101;
  _BOOL4 v102;
  __int16 v103;
  int v104;
  __int16 v105;
  double v106;
  __int16 v107;
  int v108;
  __int16 v109;
  uint64_t v110;
  __int16 v111;
  int v112;
  __int16 v113;
  double v114;
  _OWORD v115[7];
  __int128 v116;
  _BYTE v117[23];
  __int16 v118;
  __int128 v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  _QWORD v123[6];
  char v124;
  __int128 v125;
  uint64_t v126;
  int v127;
  unint64_t v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  int v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  _BYTE v138[25];
  int v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  int v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  int v149;
  uint64_t v150;
  __int16 v151;
  __int128 v152;
  __int128 v153;
  char v154;
  _BYTE v155[11];
  int v156;
  unint64_t v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  uint64_t v177;
  unint64_t v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  unint64_t v183;
  uint64_t v184;
  int v185;
  uint64_t v186;
  char v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  __int128 v194;
  uint64_t v195;
  __int128 v196;
  __int128 v197;
  uint64_t v198;
  unint64_t v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  int v206;
  unint64_t v207;
  __int16 v208;
  int v209;
  unint64_t v210;
  uint64_t v211;
  unint64_t v212;
  char v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;

  v4 = operator new(0xCuLL);
  v59 = v4 + 3;
  v60 = (char *)(v4 + 3);
  *(_QWORD *)v4 = 7;
  v4[2] = 8;
  __p = v4;
  sub_100955CE0(a1 + 448, (uint64_t)a2);
  v115[0] = xmmword_101BB1ED0;
  v118 = 0;
  memset(&v115[1], 0, 96);
  v116 = 0u;
  memset(v117, 0, sizeof(v117));
  v119 = xmmword_101BB1ED0;
  v120 = 0;
  v121 = 0;
  v122 = 0;
  v123[0] = 0;
  *(_QWORD *)((char *)v123 + 5) = 0;
  *(_QWORD *)((char *)&v123[1] + 6) = 0;
  v124 = 0;
  memset(&v123[3], 0, 24);
  v125 = xmmword_101BB1ED0;
  v126 = 0;
  v127 = 0;
  v128 = 0xFFEFFFFFFFFFFFFFLL;
  v139 = 0;
  v129 = 0u;
  v130 = 0u;
  v131 = 0u;
  v132 = 0u;
  v133 = 0u;
  v134 = 0;
  v135 = 0u;
  v136 = 0u;
  v137 = 0u;
  memset(v138, 0, sizeof(v138));
  v140 = 0;
  v141 = 0;
  v142 = 0xFFEFFFFFFFFFFFFFLL;
  v143 = 0;
  v144 = 0;
  v150 = 0;
  v151 = 0;
  v156 = 0;
  v149 = 0;
  v147 = 0u;
  v148 = 0u;
  v145 = 0u;
  v146 = 0u;
  v153 = 0u;
  v152 = 0u;
  v154 = 0;
  memset(v155, 0, sizeof(v155));
  v157 = 0xFFEFFFFFFFFFFFFFLL;
  v176 = 0u;
  v175 = 0u;
  v174 = 0u;
  v173 = 0u;
  v172 = 0u;
  v171 = 0u;
  v170 = 0u;
  v169 = 0u;
  v168 = 0u;
  v167 = 0u;
  v166 = 0u;
  v165 = 0u;
  v164 = 0u;
  v163 = 0u;
  v162 = 0u;
  v161 = 0u;
  v160 = 0u;
  v159 = 0u;
  v158 = 0u;
  v177 = 0;
  v178 = 0xFFEFFFFFFFFFFFFFLL;
  v179 = 0u;
  v180 = 0u;
  v181 = 0u;
  v182 = 0u;
  v183 = 0xFFEFFFFFFFFFFFFFLL;
  v184 = 0;
  v185 = 0;
  v186 = 0;
  v187 = 0;
  v188 = 0xFFEFFFFFFFFFFFFFLL;
  v190 = 0;
  v189 = 0;
  v191 = 0x80000000800000;
  v193 = 0;
  v192 = 0;
  v194 = xmmword_101BB1EE0;
  v195 = 0x80000000800000;
  v196 = 0u;
  v197 = 0u;
  v198 = 0;
  v199 = 0xFFEFFFFFFFFFFFFFLL;
  v200 = 0u;
  v201 = 0u;
  v202 = 0u;
  v203 = 0u;
  v204 = 0u;
  v205 = 0u;
  v206 = 0;
  v207 = 0xFFEFFFFFFFFFFFFFLL;
  v208 = 0;
  v209 = 0;
  v210 = 0xFFEFFFFFFFFFFFFFLL;
  v211 = 7;
  v212 = 0xFFEFFFFFFFFFFFFFLL;
  v213 = 0;
  v215 = 0;
  v214 = 0;
  v216 = 0;
  if ((sub_1000D03AC(a2, &__p, (uint64_t)v115) & 1) != 0)
  {
    if (*(float *)&v192 >= *(float *)&v189)
      v5 = *(float *)&v189;
    else
      v5 = *(float *)&v192;
    v48 = BYTE8(v167) & 0xFD;
    v6 = v171 < 2 && v48 != 1;
    LODWORD(buf) = v6;
    sub_1000E3564((unsigned __int16 *)(a1 + 116), &buf);
    *(_BYTE *)(a1 + 100) = 1;
    LODWORD(buf) = v171 < 2;
    sub_1000E3564((unsigned __int16 *)(a1 + 164), &buf);
    *(_BYTE *)(a1 + 148) = 1;
    if ((_DWORD)v171)
      v7 = 0;
    else
      v7 = v48 != 1;
    LODWORD(buf) = v7;
    sub_1000E3564((unsigned __int16 *)(a1 + 212), &buf);
    v8 = v5 * 57.296;
    v9 = *(unsigned __int16 *)(a1 + 44);
    *(_BYTE *)(a1 + 196) = 1;
    v10 = *(unsigned __int16 *)(a1 + 46);
    v11 = *(unsigned int *)(a1 + 48);
    if (v9 + v10 >= v11)
      v12 = *(unsigned int *)(a1 + 48);
    else
      v12 = 0;
    *(float *)(a1 + 44 + 4 * (v9 + v10 - v12) + 8) = *((float *)&v189 + 1) * 57.296;
    if (v11 <= v10)
    {
      v13 = v9 + 1;
      if (v13 < v11)
        LOWORD(v11) = 0;
      *(_WORD *)(a1 + 44) = v13 - v11;
    }
    else
    {
      *(_WORD *)(a1 + 46) = v10 + 1;
    }
    *(_BYTE *)(a1 + 28) = 1;
    LODWORD(buf) = v8 > 10.0;
    sub_1000E3564((unsigned __int16 *)(a1 + 424), &buf);
    *(_BYTE *)(a1 + 408) = 1;
    v14 = *(unsigned __int16 *)(a1 + 118);
    if (*(_DWORD *)(a1 + 120) == v14
      && *(_DWORD *)(a1 + 48) == *(unsigned __int16 *)(a1 + 46)
      && *(_DWORD *)(a1 + 428) == *(unsigned __int16 *)(a1 + 426))
    {
      v50 = 0.0;
      v51 = 0.0;
      LODWORD(v53) = 0;
      v52 = 0.0;
      v54 = xmmword_101BB71B0;
      *(_QWORD *)v55 = 0xC08F380000000000;
      v55[8] = 0;
      *(_QWORD *)&v55[16] = 0;
      v55[24] = 0;
      LOBYTE(v56) = 0;
      HIDWORD(v56) = 0;
      v57 = 0;
      if (*(_BYTE *)(a1 + 28))
      {
        sub_1004786E8(a1 + 28);
        v14 = *(unsigned __int16 *)(a1 + 118);
      }
      v15 = *(float *)(a1 + 36);
      LOBYTE(v56) = v48 == 1;
      v16 = sqrt(v15);
      v17 = v15 <= 0.0;
      v18 = 0.0;
      if (!v17)
        v18 = v16;
      v50 = v8;
      v51 = v18;
      HIDWORD(v52) = v171;
      LODWORD(v53) = DWORD1(v116);
      if (v14)
      {
        v19 = 0;
        v20 = 0;
        v21 = v14;
        do
          v20 += *(_DWORD *)sub_1000E3624((unsigned __int16 *)(a1 + 116), v19++);
        while (v21 != v19);
      }
      else
      {
        v20 = 0;
      }
      LODWORD(v52) = v20;
      v22 = *(_OWORD *)(a1 + 864);
      v54 = *(_OWORD *)(a1 + 848);
      *(_OWORD *)v55 = v22;
      *(_OWORD *)&v55[9] = *(_OWORD *)(a1 + 873);
      v23 = *(unsigned __int16 *)(a1 + 166);
      if (*(_WORD *)(a1 + 166))
      {
        v24 = 0;
        v25 = 0;
        do
          v25 += *(_DWORD *)sub_1000E3624((unsigned __int16 *)(a1 + 164), v24++);
        while (v23 != v24);
      }
      else
      {
        v25 = 0;
      }
      HIDWORD(v56) = v25;
      v26 = *(unsigned __int16 *)(a1 + 426);
      if (*(_WORD *)(a1 + 426))
      {
        v27 = 0;
        v28 = 0;
        do
          v28 += *(_DWORD *)sub_1000E3624((unsigned __int16 *)(a1 + 424), v27++);
        while (v26 != v27);
      }
      else
      {
        v28 = 0;
      }
      v57 = v28;
      sub_10023195C(a1 + 8, 0, (uint64_t)&v50);
      v49 = 0;
      if (sub_1005AA4D4(a1, (uint64_t)&v50, &v49))
      {
        *(_DWORD *)(a1 + 904) = v49;
        sub_10023195C(a1 + 8, 4, (uint64_t)&buf);
      }
      v47 = *(unsigned __int8 *)(a1 + 24);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102146638);
      v29 = qword_10229FE68;
      if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_INFO))
      {
        v30 = *(_DWORD *)(a1 + 896);
        v31 = *(_DWORD *)(a1 + 900);
        v32 = *(unsigned __int16 *)(a1 + 214);
        if (*(_WORD *)(a1 + 214))
        {
          v33 = 0;
          v34 = 0;
          do
            v34 += *(_DWORD *)sub_1000E3624((unsigned __int16 *)(a1 + 212), v33++);
          while (v32 != v33);
        }
        else
        {
          v34 = 0;
        }
        v35 = *(_DWORD *)(a1 + 904);
        v36 = *(float *)(a1 + 920);
        LODWORD(buf) = 67112448;
        HIDWORD(buf) = v47;
        v89 = 1024;
        v90 = v30;
        v91 = 1024;
        v92 = v31;
        v93 = 1024;
        v94 = v34;
        v95 = 1024;
        v96 = v35;
        v97 = 2048;
        v98 = v51;
        v99 = 2048;
        v100 = v50;
        v101 = 1024;
        v102 = v48 == 1;
        v103 = 1024;
        v104 = HIDWORD(v52);
        v105 = 2048;
        v106 = *(float *)&v53;
        v107 = 1024;
        v108 = LODWORD(v52);
        v109 = 2048;
        v110 = *(_QWORD *)v55;
        v111 = 1024;
        v112 = v55[8];
        v113 = 2048;
        v114 = v36;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "IndoorPedStop,state,%d,headingCnt,%d,stepCount,%d,zeroStepCount,%d,likelyExitCount,%d,longStd,%f,shortStd,%f,rails,%d,currentSteps,%d,vm,%f,recentZeroSteps,%d,exertionDelta,%f,exertionIsLow,%d,headingDelta,%f", (uint8_t *)&buf, 0x6Au);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_102146638);
        v39 = qword_10229FE68;
        v40 = *(_DWORD *)(a1 + 896);
        v41 = *(_DWORD *)(a1 + 900);
        v42 = sub_1005AA600(a1 + 196);
        v43 = *(_DWORD *)(a1 + 904);
        v44 = *(float *)(a1 + 920);
        v61[0] = 67112448;
        v61[1] = v47;
        v62 = 1024;
        v63 = v40;
        v64 = 1024;
        v65 = v41;
        v66 = 1024;
        v67 = v42;
        v68 = 1024;
        v69 = v43;
        v70 = 2048;
        v71 = v51;
        v72 = 2048;
        v73 = v50;
        v74 = 1024;
        v75 = v48 == 1;
        v76 = 1024;
        v77 = HIDWORD(v52);
        v78 = 2048;
        v79 = *(float *)&v53;
        v80 = 1024;
        v81 = LODWORD(v52);
        v82 = 2048;
        v83 = *(_QWORD *)v55;
        v84 = 1024;
        v85 = v55[8];
        v86 = 2048;
        v87 = v44;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v39, 1, "IndoorPedStop,state,%d,headingCnt,%d,stepCount,%d,zeroStepCount,%d,likelyExitCount,%d,longStd,%f,shortStd,%f,rails,%d,currentSteps,%d,vm,%f,recentZeroSteps,%d,exertionDelta,%f,exertionIsLow,%d,headingDelta,%f", v61, 106, v48, LODWORD(v50), LODWORD(v51), v52, v53, (_DWORD)v54, DWORD2(v54), *(double *)v55,
          *(_DWORD *)&v55[8],
          *(double *)&v55[16],
          *(_DWORD *)&v55[24],
          v56);
        v46 = (void **)v45;
        sub_100512490("Generic", 1, 0, 2, "virtual CLWorkoutPredictor_Type::WorkoutStopDetectionEvent CLTreadmillWorkoutStopModel::update(const CLWorkoutPredictorInputs &)", "%s\n", v45);
        if (v46 != &buf)
          free(v46);
      }
      if (*(_BYTE *)(a1 + 24) == 4)
      {
        v37 = 1;
        goto LABEL_58;
      }
    }
  }
  else
  {
    sub_1015A2E04(&buf, "TreadmillStop");
    sub_101069F5C(a2, (uint64_t *)&buf, (uint64_t)&__p);
    if (SBYTE1(v94) < 0)
      operator delete(buf);
  }
  v37 = 0;
LABEL_58:
  if (__p)
  {
    v59 = __p;
    operator delete(__p);
  }
  return v37;
}

void sub_1005AAF7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005AAFF0(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  char v4;

  if (*(double *)(a2 + 8) <= 30.0)
  {
    v2 = *(_DWORD *)(result + 896);
    *(_DWORD *)(result + 896) = v2 + 1;
    v3 = *(_DWORD *)(result + 900) + *(_DWORD *)(a2 + 20);
    *(_DWORD *)(result + 900) = v3;
    if (v2 >= 70 && v3 >= 181)
      return sub_10023195C(result + 8, 1, (uint64_t)&v4);
  }
  else
  {
    *(_QWORD *)(result + 896) = 0;
  }
  return result;
}

uint64_t sub_1005AB060(uint64_t a1, uint64_t a2)
{
  int v2;
  double v3;
  double v4;
  _BOOL4 v5;
  double v6;

  v2 = *(_DWORD *)(a2 + 16);
  if (v2 < 5 || (v3 = *(double *)(a2 + 40), v3 == -999.0))
  {
    v5 = 0;
  }
  else
  {
    v4 = *(double *)(a2 + 48);
    v5 = v4 == -999.0;
    v6 = v4 - v3;
    if (v6 < -10.0)
      v5 = 1;
    if (v4 == -999.0)
      v5 = 0;
    if (v6 == -999.0)
      v5 = 0;
  }
  return *(int *)(a2 + 88) > 0 && v2 > 0 || v5;
}

uint64_t sub_1005AB0C8(uint64_t a1, uint64_t a2)
{
  float v4;
  float v5;
  float v6;
  _BOOL4 v7;
  _BOOL4 v8;
  _BOOL4 v9;
  BOOL v10;
  float v11;
  float v12;
  uint64_t result;
  uint64_t v14;
  char *v15;
  int v16;
  float v17;
  char v18;
  char v19;

  ++*(_DWORD *)(a1 + 904);
  v4 = *(float *)(a1 + 916);
  if (*(_WORD *)(a1 + 46))
    v5 = *(float *)sub_1004784C4((unsigned __int16 *)(a1 + 44), *(unsigned __int16 *)(a1 + 46) - 1);
  else
    v5 = 0.0;
  v6 = vabds_f32(v4, v5);
  if (*(float *)(a1 + 920) >= v6)
    v6 = *(float *)(a1 + 920);
  *(float *)(a1 + 920) = v6;
  v7 = *(double *)(a2 + 8) > 30.0 && *(double *)a2 > 5.0;
  v8 = *(double *)(a2 + 32) <= -1.0 || *(_BYTE *)(a2 + 56) != 0;
  if (*(_DWORD *)(a2 + 20))
    v9 = 0;
  else
    v9 = *(_BYTE *)(a2 + 80) == 0;
  if (v7 || v8 || (*(float *)(a2 + 24) >= 1.5 ? (v10 = !v9) : (v10 = 0), !v10))
    ++*(_DWORD *)(a1 + 896);
  if (v6 <= 0.0)
  {
    v12 = 40.0;
  }
  else
  {
    v11 = 180.0 / v6;
    if (v11 <= 1.0)
      v12 = 40.0;
    else
      v12 = v11 * 40.0;
  }
  result = sub_1005AB268(a1, a2);
  if ((_DWORD)result)
  {
    v14 = a1 + 8;
    v15 = &v19;
    v16 = 2;
    return sub_10023195C(v14, v16, (uint64_t)v15);
  }
  v17 = v12 / 2.56;
  if (v12 >= 70.0)
    v17 = 27.344;
  if (v17 < (float)*(int *)(a1 + 896))
  {
    v14 = a1 + 8;
    v15 = &v18;
    v16 = 3;
    return sub_10023195C(v14, v16, (uint64_t)v15);
  }
  return result;
}

uint64_t sub_1005AB268(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  _BOOL4 v6;
  int v7;
  _BOOL4 v8;
  _BOOL4 v9;
  double v10;

  v2 = *(double *)(a2 + 40);
  v3 = -999.0;
  if (v2 == -999.0)
  {
    v6 = 0;
  }
  else
  {
    v4 = *(double *)(a2 + 48);
    v3 = v4 - v2;
    if (v4 == -999.0)
      v5 = -999.0;
    else
      v5 = v4 - v2;
    v6 = v5 != -999.0;
    if (v4 == -999.0)
      v3 = -999.0;
  }
  if (*(double *)a2 >= 10.0)
    v7 = 0;
  else
    v7 = *(_DWORD *)(a2 + 20) + *(_DWORD *)(a1 + 900);
  v8 = 0;
  *(_DWORD *)(a1 + 900) = v7;
  if (v3 > -40.0 && *(int *)(a1 + 904) >= 71 && v6)
    v8 = *(float *)(a1 + 920) < 180.0 && *(unsigned __int8 *)(a1 + 24) != 3;
  v9 = v3 < 0.0;
  v10 = v3 * v3 * 0.05 + 60.0;
  if (v10 <= 60.0)
    v9 = 0;
  if (!v6 || !v9)
    v10 = 60.0;
  return v10 < (double)v7 || v8;
}

uint64_t sub_1005AB364(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  char *v6;
  int v7;
  _BOOL4 v8;
  int v9;
  char v11;
  char v12;

  ++*(_DWORD *)(a1 + 904);
  result = sub_1005AB268(a1, a2);
  if ((_DWORD)result)
  {
    v5 = a1 + 8;
    v6 = &v12;
    v7 = 2;
    return sub_10023195C(v5, v7, (uint64_t)v6);
  }
  v8 = *(int *)(a2 + 20) >= 1 && *(double *)a2 > 10.0;
  v9 = *(int *)(a2 + 84) > 0 || v8;
  if (*(int *)(a1 + 904) >= 59 && v9 != 0)
  {
    v5 = a1 + 8;
    v6 = &v11;
    v7 = 5;
    return sub_10023195C(v5, v7, (uint64_t)v6);
  }
  return result;
}

_QWORD *sub_1005AB400(_QWORD *a1)
{
  void *v2;

  *a1 = off_1021465E0;
  a1[56] = off_10215FBA0;
  v2 = (void *)a1[61];
  if (v2)
  {
    a1[62] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1005AB44C(_QWORD *a1)
{
  void *v2;

  *a1 = off_1021465E0;
  a1[56] = off_10215FBA0;
  v2 = (void *)a1[61];
  if (v2)
  {
    a1[62] = v2;
    operator delete(v2);
  }
  operator delete();
}

void sub_1005AB4A8(id a1)
{
  qword_10229FE68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_1005AB4D4(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1005AB588(id a1)
{
  qword_102301D28 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLWifiServiceSilo"));
}

BOOL sub_1005AB7B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 824) + 16))(a1 + 824);
  v3 = *(_QWORD *)(a1 + 312);
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 824) + 24))(v2);
  return v3 != 0;
}

void sub_1005AB8B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v14 - 40) = v13;
  sub_100279AA4((void ***)(v14 - 40));
  a10 = (void **)&a13;
  sub_100279AA4(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_1005AB8E0(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v14[3];
  uint64_t v15[5];
  __int16 v16;
  void ***v17;

  v6 = a1 + 824;
  v15[3] = a1 + 824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 824) + 16))(a1 + 824);
  v16 = 256;
  if (*(_BYTE *)(a1 + 246))
    sub_1005B6E9C(a1, 0);
  v7 = *a2;
  v8 = a2[1];
  v9 = 0x2E8BA2E8BA2E8BA3 * ((v8 - *a2) >> 3);
  memset(v15, 0, 24);
  sub_1005C94A0(v15, v7, v8, v9);
  v10 = *a3;
  v11 = a3[1];
  v12 = 0x2E8BA2E8BA2E8BA3 * ((v11 - *a3) >> 3);
  memset(v14, 0, sizeof(v14));
  sub_1005C94A0(v14, v10, v11, v12);
  sub_1005B7C20(a1, v15, (uint64_t *)v14);
  *(_QWORD *)(a1 + 248) = 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 3) + 0x2E8BA2E8BA2E8BA3 * ((a3[1] - *a3) >> 3);
  if (*(_BYTE *)(a1 + 244))
    sub_1005B6E9C(a1, 1);
  v17 = v14;
  sub_100279AA4((void ***)&v17);
  v14[0] = (void **)v15;
  sub_100279AA4(v14);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
}

void sub_1005ABA2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1005ABB1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100279AA4((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005ABB40(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  const void *v5;

  v4 = a1 + 824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 824) + 16))(a1 + 824);
  v5 = *(const void **)(a1 + 528);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a1 + 528) = 0;
  }
  if (sub_1005C3E3C(a1, a2, (CFTypeRef *)(a1 + 528), 0))
    sub_1005BEEC0(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
}

void sub_1005ABBD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005ABBEC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  const void *v5;

  v4 = a1 + 824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 824) + 16))(a1 + 824);
  v5 = *(const void **)(a1 + 520);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a1 + 520) = 0;
  }
  if (sub_1005C3E3C(a1, a2, (CFTypeRef *)(a1 + 520), 1))
    sub_1005BEEC0(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
}

void sub_1005ABC84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1005ABCF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100279AA4((void ***)va);
  _Unwind_Resume(a1);
}

void sub_1005ABD70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100279AA4((void ***)va);
  _Unwind_Resume(a1);
}

void sub_1005ABEF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(v15 - 40) = v14;
  sub_100279AA4((void ***)(v15 - 40));
  *(_QWORD *)(v15 - 40) = &a14;
  sub_100279AA4((void ***)(v15 - 40));
  _Unwind_Resume(a1);
}

void sub_1005ABFBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a23)
  {
    if (a15 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005AC04C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a17)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005AC070@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 __p;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  _QWORD *v16;
  __int16 v17;

  v4 = a1 + 103;
  v16 = a1 + 103;
  (*(void (**)(_QWORD *))(a1[103] + 16))(a1 + 103);
  v17 = 256;
  v9 = qword_1023114A0;
  if (byte_1023114A8[23] < 0)
  {
    sub_100115CE4(&__p, *(void **)byte_1023114A8, *(unint64_t *)&byte_1023114A8[8]);
  }
  else
  {
    __p = *(_OWORD *)byte_1023114A8;
    v11 = *(_QWORD *)&byte_1023114A8[16];
  }
  v12 = xmmword_1023114C0;
  v13 = xmmword_1023114D0;
  v14 = xmmword_1023114E0;
  v15 = qword_1023114F0;
  if (sub_1005C16F8(a1))
  {
    sub_100CF2670((uint64_t)&v9, (uint64_t)&v6);
    *(_OWORD *)a2 = v6;
    *(_QWORD *)(a2 + 16) = v7;
    *(_OWORD *)(a2 + 24) = v8;
    *(_BYTE *)(a2 + 40) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 40) = 0;
  }
  if (SHIBYTE(v11) < 0)
    operator delete((void *)__p);
  return (*(uint64_t (**)(_QWORD *))(*v4 + 24))(v4);
}

void sub_1005AC17C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  sub_10187E514(v21 - 56);
  _Unwind_Resume(a1);
}

uint64_t sub_1005AC1D4(uint64_t a1, int a2)
{
  uint64_t v4;
  void **v6[3];
  uint64_t v7[5];
  __int16 v8;
  void ***v9;

  v4 = a1 + 824;
  v7[3] = a1 + 824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 824) + 16))(a1 + 824);
  v8 = 256;
  memset(v7, 0, 24);
  memset(v6, 0, sizeof(v6));
  sub_1005B7C20(a1, v7, (uint64_t *)v6);
  if (a2)
    *(_QWORD *)(a1 + 248) = 0;
  v9 = v6;
  sub_100279AA4((void ***)&v9);
  v6[0] = (void **)v7;
  sub_100279AA4(v6);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
}

void sub_1005AC290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v16 - 56) = v15;
  sub_100279AA4((void ***)(v16 - 56));
  sub_100279AA4(&a9);
  sub_10187E514((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_1005AC370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a13)
    sub_10190092C((uint64_t)&a10);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005AC440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005AC4CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10027740C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1005AC4E0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  double Current;
  double v6;
  unsigned int v7;
  char *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  char *v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  NSObject *v17;
  const char *v18;
  NSObject *v19;
  int v20;
  int v21;
  uint64_t v22;
  NSObject *v24;
  NSObject *v25;
  _BYTE *v26;
  unsigned int v27;
  const char *v28;
  int v29;
  _BOOL4 v30;
  uint64_t v31;
  NSObject *v32;
  __CFRunLoop *v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  const char *v39;
  uint64_t v40;
  const char *v41;
  uint8_t *v42;
  const char *v43;
  uint8_t *v44;
  uint64_t v45;
  void **v46;
  unsigned int v47;
  const char *v48;
  int v49;
  _BOOL4 v50;
  uint64_t v51;
  char *v52;
  const char *v53;
  uint8_t *v54;
  uint64_t v55;
  void *v56[2];
  char v57;
  uint64_t v58;
  __int16 v59;
  _BYTE __p[24];
  int v61;
  __int16 v62;
  _BOOL4 v63;
  __int16 v64;
  uint64_t v65;
  uint8_t buf[4];
  _BYTE v67[20];
  int v68;
  __int16 v69;
  _BOOL4 v70;
  __int16 v71;
  uint64_t v72;

  v4 = a1 + 824;
  v58 = a1 + 824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 824) + 16))(a1 + 824);
  v59 = 256;
  if (!*(_QWORD *)(a1 + 312))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v14 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "WifiScan, skip, null device, #KvCheck", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_37;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    *(_WORD *)__p = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "WifiScan, skip, null device, #KvCheck", __p, 2);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiService::startScan(CLWifiService_Type::ScanParameters)", "%s\n", v15);
    goto LABEL_71;
  }
  if (!*(_QWORD *)(a1 + 296))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v17 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "WifiScan, skip, null dpc, #KvCheck", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_37;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    *(_WORD *)__p = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "WifiScan, skip, null dpc, #KvCheck", __p, 2);
    v16 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiService::startScan(CLWifiService_Type::ScanParameters)", "%s\n", v18);
    goto LABEL_71;
  }
  Current = CFAbsoluteTimeGetCurrent();
  v6 = Current - *(double *)(a1 + 744);
  if (v6 < 10.0)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v19 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
    {
      v20 = sub_100EF0E88((uint64_t)a2);
      v21 = *(_DWORD *)(a1 + 752);
      *(_DWORD *)buf = 67240704;
      *(_DWORD *)v67 = v20;
      *(_WORD *)&v67[4] = 2050;
      *(double *)&v67[6] = v6;
      *(_WORD *)&v67[14] = 1026;
      *(_DWORD *)&v67[16] = v21;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "WifiScan, skip, cooloff, type, %{public}d, since, %{public}.1lf, error, %{public}d", buf, 0x18u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_37;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v36 = qword_1022A0048;
    v37 = sub_100EF0E88((uint64_t)a2);
    v38 = *(_DWORD *)(a1 + 752);
    *(_DWORD *)__p = 67240704;
    *(_DWORD *)&__p[4] = v37;
    *(_WORD *)&__p[8] = 2050;
    *(double *)&__p[10] = v6;
    *(_WORD *)&__p[18] = 1026;
    *(_DWORD *)&__p[20] = v38;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v36, 1, "WifiScan, skip, cooloff, type, %{public}d, since, %{public}.1lf, error, %{public}d", __p, 24);
    v16 = (uint8_t *)v39;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiService::startScan(CLWifiService_Type::ScanParameters)", "%s\n", v39);
LABEL_71:
    if (v16 != buf)
      free(v16);
LABEL_37:
    v22 = 0;
    goto LABEL_38;
  }
  buf[0] = sub_100EF0E88((uint64_t)a2);
  sub_1000A881C((unsigned int *)(a1 + 756), (char *)buf);
  if (sub_1001DFAE8())
  {
    sub_100119F3C(buf);
    v7 = sub_100EF0E88((uint64_t)a2);
    v8 = (char *)sub_1000A9998(v7);
    sub_1005285B4((uint64_t)buf, "scan", v8);
    __p[0] = sub_100792DA4((uint64_t)a2);
    sub_10011B47C((uint64_t)buf, "low_priority", __p);
    __p[0] = sub_100CD598C((uint64_t)a2);
    sub_10011B47C((uint64_t)buf, "passive", __p);
    sub_1001DFAF4((uint64_t)buf, (uint64_t)"locationd");
    sub_10011A5A8(buf);
  }
  if (*(_QWORD *)(a1 + 368) < 7uLL)
  {
    if (*(_BYTE *)(a1 + 232))
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146A30);
      v24 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "override scan, passive scans only...", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102146A30);
        *(_WORD *)__p = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "override scan, passive scans only...", __p, 2);
        v54 = (uint8_t *)v53;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiService::startScan(CLWifiService_Type::ScanParameters)", "%s\n", v53);
        if (v54 != buf)
          free(v54);
      }
      sub_100EF0E90((uint64_t)a2, 2);
    }
    sub_1005C3650((_QWORD *)(a1 + 328), a2);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v25 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      sub_100EF0E98((char *)a2, (uint64_t)__p);
      v26 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
      v27 = sub_100EF0E88((uint64_t)a2);
      v28 = sub_1000A9998(v27);
      v29 = sub_100792DA4((uint64_t)a2);
      v30 = sub_100CD598C((uint64_t)a2);
      v31 = *(_QWORD *)(a1 + 368);
      *(_DWORD *)buf = 136447234;
      *(_QWORD *)v67 = v26;
      *(_WORD *)&v67[8] = 2082;
      *(_QWORD *)&v67[10] = v28;
      *(_WORD *)&v67[18] = 1026;
      v68 = v29;
      v69 = 1026;
      v70 = v30;
      v71 = 2050;
      v72 = v31;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "WifiScan, enqueue, %{public}s, %{public}s, lowpri, %{public}d, passive, %{public}d, pending, %{public}lu", buf, 0x2Cu);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_55;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v45 = qword_1022A0048;
    sub_100EF0E98((char *)a2, (uint64_t)v56);
    if (v57 >= 0)
      v46 = v56;
    else
      v46 = (void **)v56[0];
    v47 = sub_100EF0E88((uint64_t)a2);
    v48 = sub_1000A9998(v47);
    v49 = sub_100792DA4((uint64_t)a2);
    v50 = sub_100CD598C((uint64_t)a2);
    v51 = *(_QWORD *)(a1 + 368);
    *(_DWORD *)__p = 136447234;
    *(_QWORD *)&__p[4] = v46;
    *(_WORD *)&__p[12] = 2082;
    *(_QWORD *)&__p[14] = v48;
    *(_WORD *)&__p[22] = 1026;
    v61 = v49;
    v62 = 1026;
    v63 = v50;
    v64 = 2050;
    v65 = v51;
    LODWORD(v55) = 44;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v45, 0, "WifiScan, enqueue, %{public}s, %{public}s, lowpri, %{public}d, passive, %{public}d, pending, %{public}lu", __p, v55);
    v13 = v52;
    if (v57 < 0)
      operator delete(v56[0]);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiService::startScan(CLWifiService_Type::ScanParameters)", "%s\n", v13);
    if (v13 == (char *)buf)
      goto LABEL_55;
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v9 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
    {
      v10 = *(_QWORD *)(a1 + 368);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)v67 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "WifiScan, skip, maxed, %{public}ld", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_55;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v11 = *(_QWORD *)(a1 + 368);
    *(_DWORD *)__p = 134349056;
    *(_QWORD *)&__p[4] = v11;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "WifiScan, skip, maxed, %{public}ld", __p, 12);
    v13 = (char *)v12;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiService::startScan(CLWifiService_Type::ScanParameters)", "%s\n", v12);
    if (v13 == (char *)buf)
      goto LABEL_55;
  }
  free(v13);
LABEL_55:
  if (Current - *(double *)(a1 + 408) <= 3.0)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v34 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      v35 = *(_QWORD *)(a1 + 408);
      *(_DWORD *)buf = 134349312;
      *(_QWORD *)v67 = v35;
      *(_WORD *)&v67[8] = 2050;
      *(_QWORD *)&v67[10] = 0x4008000000000000;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "WifiScan, misc, inprogress, last, %{public}.1f, interval, %{public}.1f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      v40 = *(_QWORD *)(a1 + 408);
      *(_DWORD *)__p = 134349312;
      *(_QWORD *)&__p[4] = v40;
      *(_WORD *)&__p[12] = 2050;
      *(_QWORD *)&__p[14] = 0x4008000000000000;
      LODWORD(v55) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "WifiScan, misc, inprogress, last, %{public}.1f, interval, %{public}.1f", __p, v55);
      v42 = (uint8_t *)v41;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiService::startScan(CLWifiService_Type::ScanParameters)", "%s\n", v41);
      if (v42 != buf)
        free(v42);
    }
  }
  else
  {
    WiFiDeviceClientRegisterScanUpdateCallback(*(_QWORD *)(a1 + 312), sub_100083EA4, 1, a1);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v32 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "WifiDpc, signal", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      *(_WORD *)__p = 0;
      LODWORD(v55) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "WifiDpc, signal", __p, v55);
      v44 = (uint8_t *)v43;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiService::startScan(CLWifiService_Type::ScanParameters)", "%s\n", v43);
      if (v44 != buf)
        free(v44);
    }
    CFRunLoopSourceSignal(*(CFRunLoopSourceRef *)(a1 + 296));
    v33 = (__CFRunLoop *)sub_100193530();
    CFRunLoopWakeUp(v33);
  }
  v22 = 1;
LABEL_38:
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  return v22;
}

void sub_1005AD218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_10187E514((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_1005AD2E4(_QWORD *a1, int a2)
{
  _QWORD *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  _QWORD block[5];
  char v14;
  _QWORD *v15;
  __int16 v16;
  _DWORD v17[4];
  uint8_t buf[4];
  int v19;

  v4 = a1 + 103;
  v15 = a1 + 103;
  (*(void (**)(_QWORD *))(a1[103] + 16))(a1 + 103);
  v16 = 256;
  if (a1[37] && a1[92])
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146A30);
    v5 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      v19 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "IMD: quiesceWifi, %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146A30);
      v17[0] = 67109120;
      v17[1] = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "IMD: quiesceWifi, %d", v17);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLWifiService::quiesceWifi(BOOL)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    v6 = a1[92];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1005C6BCC;
    block[3] = &unk_1021468D0;
    block[4] = a1;
    v14 = a2;
    dispatch_async(v6, block);
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146A30);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning IMD: ignore quiesceWifi configuration, shutdown", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146A30);
      LOWORD(v17[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning IMD: ignore quiesceWifi configuration, shutdown", v17, 2);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLWifiService::quiesceWifi(BOOL)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 24))(v4);
}

void sub_1005AD64C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005AD6BC(uint64_t a1, uint64_t a2, int a3, int a4)
{
  const __CFArray *v8;
  CFIndex Count;
  CFIndex v10;
  const void *ValueAtIndex;
  NSObject *v12;
  NSObject *v13;
  int v14;
  unint64_t v15;
  int *v16;
  _DWORD *v17;
  NSObject *v18;
  int *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  int *v25;
  int v26;
  unint64_t v27;
  int *v28;
  _DWORD *v29;
  int *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  int *v36;
  int v37;
  const char *v38;
  uint8_t *v39;
  const char *v40;
  uint8_t *v41;
  const char *v42;
  uint8_t *v43;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  CFNumberRef cf;
  int v50;
  _BYTE v51[16];
  uint64_t v52;
  __int16 v53;
  int valuePtr;
  int v55;
  CFIndex v56;
  __int16 v57;
  CFIndex v58;
  __int16 v59;
  int v60;
  uint8_t buf[4];
  CFIndex v62;
  __int16 v63;
  CFIndex v64;
  __int16 v65;
  int v66;

  valuePtr = 27;
  v52 = a1 + 824;
  v47 = a1 + 824;
  (*(void (**)(void))(*(_QWORD *)(a1 + 824) + 16))();
  v53 = 256;
  cf = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
  v8 = (const __CFArray *)WiFiDeviceClientCopyProperty(*(_QWORD *)(a1 + 312));
  Count = CFArrayGetCount(v8);
  if (Count >= 1)
  {
    v10 = 0;
    v48 = a2 + 16;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v8, v10);
      if ((const void *)CFDictionaryGetTypeID() == ValueAtIndex)
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021469D0);
        v12 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "WifiMgr, WiFiDeviceClientCopyProperty, invalid object in APPLE80211_IOC_SUPPORTED_CHANNELS", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_1021469D0);
          LOWORD(v55) = 0;
          LODWORD(v45) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 17, "WifiMgr, WiFiDeviceClientCopyProperty, invalid object in APPLE80211_IOC_SUPPORTED_CHANNELS", &v55, v45);
          v39 = (uint8_t *)v38;
          sub_100512490("Generic", 1, 0, 0, "void CLWifiService::getSupportedChannels(std::vector<int> &, BOOL, BOOL)", "%s\n", v38);
          if (v39 != buf)
            free(v39);
        }
        CFShow(ValueAtIndex);
      }
      else
      {
        sub_1001C1D6C((int)v51, (CFDictionaryRef)ValueAtIndex);
        v50 = -1;
        if (sub_1001C1194((uint64_t)v51, (uint64_t)CFSTR("SUP_CHANNEL"), &v50))
        {
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_102146A30);
          v13 = qword_1022A02D8;
          if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 134218496;
            v62 = v10;
            v63 = 2048;
            v64 = Count;
            v65 = 1024;
            v66 = v50;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "WIFI: index, %ld, %ld, channel, %d", buf, 0x1Cu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A02D0 != -1)
              dispatch_once(&qword_1022A02D0, &stru_102146A30);
            v55 = 134218496;
            v56 = v10;
            v57 = 2048;
            v58 = Count;
            v59 = 1024;
            v60 = v50;
            LODWORD(v45) = 28;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "WIFI: index, %ld, %ld, channel, %d", &v55, v45, v46);
            v41 = (uint8_t *)v40;
            sub_100512490("Generic", 1, 0, 2, "void CLWifiService::getSupportedChannels(std::vector<int> &, BOOL, BOOL)", "%s\n", v40);
            if (v41 != buf)
              free(v41);
          }
          v14 = v50;
          if (a3 && v50 <= 14)
          {
            v16 = *(int **)(a2 + 8);
            v15 = *(_QWORD *)(a2 + 16);
            if ((unint64_t)v16 >= v15)
            {
              v19 = *(int **)a2;
              v20 = ((uint64_t)v16 - *(_QWORD *)a2) >> 2;
              v21 = v20 + 1;
              if ((unint64_t)(v20 + 1) >> 62)
                goto LABEL_80;
              v22 = v15 - (_QWORD)v19;
              if (v22 >> 1 > v21)
                v21 = v22 >> 1;
              if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
                v23 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v23 = v21;
              if (v23)
              {
                v24 = (char *)sub_100260634(v48, v23);
                v19 = *(int **)a2;
                v16 = *(int **)(a2 + 8);
                v14 = v50;
              }
              else
              {
                v24 = 0;
              }
              v25 = (int *)&v24[4 * v20];
              *v25 = v14;
              v17 = v25 + 1;
              while (v16 != v19)
              {
                v26 = *--v16;
                *--v25 = v26;
              }
              *(_QWORD *)a2 = v25;
              *(_QWORD *)(a2 + 8) = v17;
              *(_QWORD *)(a2 + 16) = &v24[4 * v23];
              if (v19)
                operator delete(v19);
            }
            else
            {
              *v16 = v50;
              v17 = v16 + 1;
            }
            *(_QWORD *)(a2 + 8) = v17;
            v14 = v50;
          }
          if (a4 && v14 >= 15)
          {
            v28 = *(int **)(a2 + 8);
            v27 = *(_QWORD *)(a2 + 16);
            if ((unint64_t)v28 >= v27)
            {
              v30 = *(int **)a2;
              v31 = ((uint64_t)v28 - *(_QWORD *)a2) >> 2;
              v32 = v31 + 1;
              if ((unint64_t)(v31 + 1) >> 62)
LABEL_80:
                sub_100259694();
              v33 = v27 - (_QWORD)v30;
              if (v33 >> 1 > v32)
                v32 = v33 >> 1;
              if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
                v34 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v34 = v32;
              if (v34)
              {
                v35 = (char *)sub_100260634(v48, v34);
                v30 = *(int **)a2;
                v28 = *(int **)(a2 + 8);
                v14 = v50;
              }
              else
              {
                v35 = 0;
              }
              v36 = (int *)&v35[4 * v31];
              *v36 = v14;
              v29 = v36 + 1;
              while (v28 != v30)
              {
                v37 = *--v28;
                *--v36 = v37;
              }
              *(_QWORD *)a2 = v36;
              *(_QWORD *)(a2 + 8) = v29;
              *(_QWORD *)(a2 + 16) = &v35[4 * v34];
              if (v30)
                operator delete(v30);
            }
            else
            {
              *v28 = v14;
              v29 = v28 + 1;
            }
            *(_QWORD *)(a2 + 8) = v29;
          }
        }
        else
        {
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_1021469D0);
          v18 = qword_1022A0048;
          if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "WifiManager, WiFiDeviceClientCopyProperty, invalid APPLE80211KEY_SUP_CHANNEL", buf, 2u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0040 != -1)
              dispatch_once(&qword_1022A0040, &stru_1021469D0);
            LOWORD(v55) = 0;
            LODWORD(v45) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 17, "WifiManager, WiFiDeviceClientCopyProperty, invalid APPLE80211KEY_SUP_CHANNEL", &v55, v45);
            v43 = (uint8_t *)v42;
            sub_100512490("Generic", 1, 0, 0, "void CLWifiService::getSupportedChannels(std::vector<int> &, BOOL, BOOL)", "%s\n", v42);
            if (v43 != buf)
              free(v43);
          }
          CFShow(ValueAtIndex);
        }
        sub_10011A5A8(v51);
      }
      ++v10;
    }
    while (v10 != Count);
  }
  if (cf)
    CFRelease(cf);
  if (v8)
    CFRelease(v8);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 24))(v47);
}

void sub_1005ADDB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_10011A5A8((uint64_t *)va);
  sub_10187E514((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1005ADE28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL4 v5;
  int v6;
  NSObject *v7;
  NSObject *v8;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  uint8_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  __int16 v17;
  int v18;
  int v19;
  __int16 v20;
  int v21;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  int v25;

  v4 = a1 + 824;
  v16 = a1 + 824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 824) + 16))(a1 + 824);
  v17 = 256;
  v15 = 0;
  WiFiManagerClientSetPower(*(_QWORD *)(a1 + 304), a2);
  if (sub_1005B9880(a1, &v15))
  {
    v5 = v15;
    if (v15 == (_DWORD)a2)
    {
      v6 = 1;
      goto LABEL_10;
    }
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v7 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240448;
      v23 = a2;
      v24 = 1026;
      v25 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "WifiMgr, WiFiManagerClientSetPower, fail, request, %{public}d, query, %{public}d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      v18 = 67240448;
      v19 = a2;
      v20 = 1026;
      v21 = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "WifiMgr, WiFiManagerClientSetPower, fail, request, %{public}d, query, %{public}d", &v18, 14);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLWifiService::setPower(BOOL)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
  }
  v6 = 0;
LABEL_10:
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021469D0);
  v8 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67240448;
    v23 = a2;
    v24 = 1026;
    v25 = v6;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "WifiMgr, WiFiManagerClientSetPower, request, %{public}d, %{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v18 = 67240448;
    v19 = a2;
    v20 = 1026;
    v21 = v6;
    LODWORD(v14) = 14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "WifiMgr, WiFiManagerClientSetPower, request, %{public}d, %{public}d", &v18, v14);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiService::setPower(BOOL)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  return 1;
}

void sub_1005AE1B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005AE20C(uint64_t a1, int a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v9;
  uint8_t *v10;
  int v11;
  _DWORD v12[4];
  uint8_t buf[4];
  int v14;

  v11 = a2;
  v4 = a1 + 824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 824) + 16))(a1 + 824);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102146A30);
  v5 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    v14 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "setBackgroundExitScanCount, %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146A30);
    v12[0] = 67109120;
    v12[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "setBackgroundExitScanCount, %d", v12);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiService::setBackgroundExitScanCount(int)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  if (*(_QWORD *)(a1 + 312))
  {
    sub_100119F3C(buf);
    sub_10011B5B8((uint64_t)buf, CFSTR("IO80211InterfaceBGScanLostNetTO"), &v11);
    v6 = *(_QWORD *)(a1 + 312);
    v7 = sub_10011A5AC((uint64_t)buf);
    WiFiDeviceClientSetProperty(v6, CFSTR("IO80211InterfaceBGScanParams"), v7);
    sub_10011A5A8(buf);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
}

void sub_1005AE440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1005AE4A0(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  uint8_t buf[1640];

  v4 = a1 + 824;
  v11 = a1 + 824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 824) + 16))(a1 + 824);
  v12 = 256;
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (a2)
      WiFiManagerClientEnable(v5);
    else
      WiFiManagerClientDisable(v5);
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146A30);
    v6 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning no wifi interface available", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146A30);
      v10 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning no wifi interface available", &v10, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiService::setAutoJoin(BOOL)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  return v5 != 0;
}

void sub_1005AE68C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005AE6B4(uint64_t a1, void *a2, uint64_t *a3)
{
  _QWORD *v5;
  CFRunLoopSourceRef *v6;
  uint64_t v7;
  NSObject *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::string *p_p;
  uint64_t v13;
  dispatch_queue_t v14;
  CFRunLoopSourceRef v15;
  NSObject *v16;
  __CFRunLoop *v17;
  char v18;
  char v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _BYTE *v23;
  char v24;
  char v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  NSObject *v29;
  const char *v30;
  char *v31;
  id v32;
  NSObject *v33;
  CLMetricEventBins *v34;
  CLMetricEventBins *v35;
  CLMetricEventBins *v36;
  NSObject *v37;
  const char *v39;
  char *v40;
  std::string *v41;
  const char *v42;
  const char *v43;
  char *v44;
  const char *v45;
  char *v46;
  uint64_t v47;
  _QWORD v48[5];
  std::string __p;
  int v50;
  uint64_t v51;
  CFRunLoopSourceContext context;
  __int128 buf;
  char v54;

  v5 = sub_10103AD28(a1, (uint64_t)"CLWifiService", a2);
  *v5 = off_1021466A8;
  *((_OWORD *)v5 + 7) = 0u;
  *((_OWORD *)v5 + 8) = 0u;
  *((_OWORD *)v5 + 9) = 0u;
  *((_OWORD *)v5 + 10) = 0u;
  *((_OWORD *)v5 + 11) = 0u;
  *((_OWORD *)v5 + 12) = 0u;
  *((_OWORD *)v5 + 13) = 0u;
  *(_OWORD *)((char *)v5 + 217) = 0u;
  *(_WORD *)((char *)v5 + 233) = 255;
  *(_QWORD *)((char *)v5 + 236) = 0xE1000000000;
  *((_WORD *)v5 + 122) = 0;
  *((_BYTE *)v5 + 246) = 0;
  v5[31] = 0;
  sub_1015A2E04(&buf, "60:c5:47:4f:51:1d");
  *(_QWORD *)(a1 + 256) = sub_1000CC740((uint64_t)&buf);
  sub_1015A2E04(&context, "60:c5:47:4d:cd:6f");
  *(_QWORD *)(a1 + 264) = sub_1000CC740((uint64_t)&context);
  sub_1015A2E04(&__p, "60:c5:47:4f:51:1c");
  *(_QWORD *)(a1 + 272) = sub_1000CC740((uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(context.retain) < 0)
    operator delete((void *)context.version);
  if (v54 < 0)
    operator delete((void *)buf);
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0xBFF0000000000000;
  v6 = (CFRunLoopSourceRef *)(a1 + 296);
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 384) = xmmword_101BB7280;
  *(_OWORD *)(a1 + 400) = xmmword_101BAFC90;
  *(_BYTE *)(a1 + 416) = -1;
  *(_BYTE *)(a1 + 544) = 0;
  *(_BYTE *)(a1 + 632) = 0;
  *(_QWORD *)(a1 + 640) = 0;
  *(_BYTE *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_BYTE *)(a1 + 648) = 1;
  *(_QWORD *)(a1 + 712) = 0;
  *(_QWORD *)(a1 + 704) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_QWORD *)(a1 + 688) = 0;
  *(_QWORD *)(a1 + 696) = a1 + 704;
  *(_DWORD *)(a1 + 732) = 0;
  *(_QWORD *)(a1 + 736) = 0;
  *(_QWORD *)(a1 + 720) = 0;
  *(_BYTE *)(a1 + 728) = 0;
  *(const CFTimeInterval *)(a1 + 744) = -kCFAbsoluteTimeIntervalSince1970;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_DWORD *)(a1 + 816) = 0;
  sub_10055D44C(a1 + 824, "CLWifiService internal state", 1, 1);
  v7 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 840) = v7;
  memset(&__p, 0, sizeof(__p));
  sub_1001E4804(&buf);
  v8 = sub_1000BCB64(buf, "WifiExcludedAp", &__p);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
  if (*((_QWORD *)&buf + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if ((_DWORD)v8)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v8 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = p_p;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "WifiService, gExcludedAP, %{public}s", (uint8_t *)&buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      v41 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v41 = (std::string *)__p.__r_.__value_.__r.__words[0];
      LODWORD(context.version) = 136446210;
      *(CFIndex *)((char *)&context.version + 4) = (CFIndex)v41;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "WifiService, gExcludedAP, %{public}s", &context, 12);
      v8 = v42;
      sub_100512490("Generic", 1, 0, 2, "CLWifiService::CLWifiService(id<CLIntersiloUniverse>, std::unique_ptr<IExternal>)", "%s\n", v42);
      if (v8 != &buf)
        free(v8);
    }
    v13 = sub_1000CC740((uint64_t)&__p);
    if (!byte_102301D60)
      byte_102301D60 = 1;
    qword_102301D58 = v13;
  }
  v14 = dispatch_queue_create("CLWifiService scanning", 0);
  *(_QWORD *)(a1 + 736) = v14;
  if (v14)
  {
    context.version = 0;
    context.info = (void *)a1;
    memset(&context.retain, 0, 56);
    context.perform = (void (__cdecl *)(void *))sub_1005AF4C8;
    v15 = CFRunLoopSourceCreate(kCFAllocatorDefault, 0, &context);
    *v6 = v15;
    if (!v15)
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      v16 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "WifiService, ctor, fDpcSource is NULL", (uint8_t *)&buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021469D0);
        LOWORD(v50) = 0;
        LODWORD(v47) = 2;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "WifiService, ctor, fDpcSource is NULL", &v50, v47);
        v46 = (char *)v45;
        sub_100512490("Generic", 1, 0, 0, "CLWifiService::CLWifiService(id<CLIntersiloUniverse>, std::unique_ptr<IExternal>)", "%s\n", v45);
        if (v46 != (char *)&buf)
          free(v46);
      }
    }
    v17 = (__CFRunLoop *)sub_100193530();
    CFRunLoopAddSource(v17, *v6, kCFRunLoopCommonModes);
    sub_1001E4804(&buf);
    v18 = sub_1001FD98C(buf, "WifiMaxAge", (void *)(a1 + 384));
    v19 = v18;
    v20 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
    if (!*((_QWORD *)&buf + 1))
      goto LABEL_34;
    v21 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
      if ((v19 & 1) != 0)
        goto LABEL_36;
    }
    else
    {
LABEL_34:
      if ((v18 & 1) != 0)
      {
LABEL_36:
        sub_1001E4804(&buf);
        v23 = (_BYTE *)(a1 + 232);
        v24 = sub_1001E4874(buf, "WifiPassiveScansOnly", (BOOL *)(a1 + 232));
        v25 = v24;
        v26 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
        if (!*((_QWORD *)&buf + 1))
          goto LABEL_40;
        v27 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
          if ((v25 & 1) != 0)
          {
LABEL_41:
            if (*v23)
            {
              if (qword_1022A0040 != -1)
                dispatch_once(&qword_1022A0040, &stru_1021469D0);
              v29 = qword_1022A0048;
              if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
              {
                LOWORD(buf) = 0;
                _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "WifiService, passive scans only", (uint8_t *)&buf, 2u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(&buf, 0x65CuLL);
                if (qword_1022A0040 != -1)
                  dispatch_once(&qword_1022A0040, &stru_1021469D0);
                LOWORD(v50) = 0;
                LODWORD(v47) = 2;
                _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "WifiService, passive scans only", &v50, v47);
                v31 = (char *)v30;
                sub_100512490("Generic", 1, 0, 2, "CLWifiService::CLWifiService(id<CLIntersiloUniverse>, std::unique_ptr<IExternal>)", "%s\n", v30);
                if (v31 != (char *)&buf)
                  free(v31);
              }
            }
LABEL_55:
            sub_1005AF6C0(a1);
            sub_1005B0DD8(a1);
            v32 = objc_msgSend(*(id *)(a1 + 40), "newTimer");
            *(_QWORD *)(a1 + 640) = v32;
            v48[0] = _NSConcreteStackBlock;
            v48[1] = 3221225472;
            v48[2] = sub_1005B1920;
            v48[3] = &unk_10212ECA0;
            v48[4] = a1;
            objc_msgSend(v32, "setHandler:", v48);
            objc_msgSend(*(id *)(a1 + 640), "setNextFireDelay:", 90.0);
            v8 = &qword_1022A0000;
            if (qword_1022A0050 == -1)
              goto LABEL_56;
            goto LABEL_70;
          }
        }
        else
        {
LABEL_40:
          if ((v24 & 1) != 0)
            goto LABEL_41;
        }
        *v23 = 0;
        goto LABEL_55;
      }
    }
    *(_QWORD *)(a1 + 384) = 0x4014000000000000;
    goto LABEL_36;
  }
  sub_101900950();
  abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/WifiService/CLWifiService.mm", 367, "CLWifiService");
  __break(1u);
LABEL_70:
  dispatch_once(&qword_1022A0050, &stru_1021469F0);
LABEL_56:
  v33 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf) = 134349056;
    *(_QWORD *)((char *)&buf + 4) = 0x4056800000000000;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "WsbClients, timer, %{public}0.f", (uint8_t *)&buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (v8[10].isa != (Class)-1)
      dispatch_once(&qword_1022A0050, &stru_1021469F0);
    v50 = 134349056;
    v51 = 0x4056800000000000;
    LODWORD(v47) = 12;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "WsbClients, timer, %{public}0.f", &v50, v47);
    v40 = (char *)v39;
    sub_100512490("Generic", 1, 0, 2, "CLWifiService::CLWifiService(id<CLIntersiloUniverse>, std::unique_ptr<IExternal>)", "%s\n", v39);
    if (v40 != (char *)&buf)
      free(v40);
  }
  v34 = -[CLMetricEventBins initWithInternalName:binPeriod:aggregationPeriod:atCurrentTime:andSubmit:]([CLMetricEventBins alloc], "initWithInternalName:binPeriod:aggregationPeriod:atCurrentTime:andSubmit:", CFSTR("scanW"), 5, 3600, 1, CFAbsoluteTimeGetCurrent());
  *(_QWORD *)(a1 + 656) = v34;
  sub_100197040();
  -[CLMetricEventBins setDimensionInt:](v34, "setDimensionInt:", sub_1007573A8());
  v35 = -[CLMetricEventBins initWithInternalName:binPeriod:aggregationPeriod:atCurrentTime:andSubmit:]([CLMetricEventBins alloc], "initWithInternalName:binPeriod:aggregationPeriod:atCurrentTime:andSubmit:", CFSTR("scanA"), 5, 3600, 1, CFAbsoluteTimeGetCurrent());
  *(_QWORD *)(a1 + 664) = v35;
  sub_100197040();
  -[CLMetricEventBins setDimensionInt:](v35, "setDimensionInt:", sub_1007573A8());
  v36 = -[CLMetricEventBins initWithAnalyticsEvent:binPeriod:atCurrentTime:]([CLMetricEventBins alloc], "initWithAnalyticsEvent:binPeriod:atCurrentTime:", CFSTR("com.apple.locationd.context.wifiscanbins"), 30, CFAbsoluteTimeGetCurrent());
  *(_QWORD *)(a1 + 672) = v36;
  sub_100197040();
  -[CLMetricEventBins provideMetricDimensions:](v36, "provideMetricDimensions:", +[NSDictionary dictionaryWithObject:forKey:](NSDictionary, "dictionaryWithObject:forKey:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_1007573A8()), CFSTR("isSuperWsb")));
  objc_msgSend(*(id *)(a1 + 672), "provideIntervalDistributions:", &off_1022203C0);
  if (sub_1010676B0())
  {
    sub_1005B1E1C(a1);
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v37 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "AONSense, not registering for aonsensed scans as it is not enabled", (uint8_t *)&buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      LOWORD(v50) = 0;
      LODWORD(v47) = 2;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "AONSense, not registering for aonsensed scans as it is not enabled", &v50, v47);
      v44 = (char *)v43;
      sub_100512490("Generic", 1, 0, 2, "CLWifiService::CLWifiService(id<CLIntersiloUniverse>, std::unique_ptr<IExternal>)", "%s\n", v43);
      if (v44 != (char *)&buf)
        free(v44);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1005AF2E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;

  if (a23 < 0)
    operator delete(__p);
  v47 = *(_QWORD *)(v44 + 840);
  *(_QWORD *)(v44 + 840) = 0;
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  sub_10055D4D0(v45);
  sub_100008848(v44 + 696, *(_QWORD **)(v44 + 704));
  if (*(_BYTE *)(v44 + 632))
  {
    if (*(char *)(v44 + 575) < 0)
      operator delete(*(void **)(v44 + 552));
  }
  a39 = (void *)(v44 + 496);
  sub_100279AA4((void ***)&a39);
  a39 = (void *)(v44 + 464);
  sub_100279AA4((void ***)&a39);
  a39 = (void *)(v44 + 432);
  sub_100279AA4((void ***)&a39);
  sub_1005C81E4((_QWORD *)(v44 + 328));
  sub_10103ADEC((_QWORD *)v44);
  _Unwind_Resume(a1);
}

void sub_1005AF430()
{
  operator new();
}

void sub_1005AF4A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_1005AF4C8(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  id v4;
  _QWORD v5[5];
  os_activity_scope_state_s state;
  char v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  CLProfilingIdentify("CLWifiService::onDpcSource");
  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "silo"), "assertOutside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021469B0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v7 = 1;
    v2 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiService::onDpcSource", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v2, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021469B0);
    v3 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2082;
      v13 = "activity";
      v14 = 2050;
      v15 = a1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiService::onDpcSource\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v7 = 0;
  }
  v4 = objc_msgSend(*(id *)(a1 + 32), "silo");
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1005C7E34;
  v5[3] = &unk_10212ECA0;
  v5[4] = a1;
  objc_msgSend(v4, "sync:", v5);
  if (v7)
    os_activity_scope_leave(&state);
}

void sub_1005AF6A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, os_activity_scope_state_s state, char a15)
{
  if (a15)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1005AF6C0(uint64_t a1)
{
  int v2;
  uint64_t v3;
  NSObject *v4;
  CFNumberRef v5;
  NSObject *v6;
  CFNumberRef v7;
  NSObject *v8;
  __CFDictionary *v9;
  NSObject *v10;
  __CFDictionary *v11;
  NSObject *v12;
  __CFDictionary *v13;
  NSObject *v14;
  __CFDictionary *v15;
  NSObject *v16;
  __CFDictionary *v17;
  NSObject *v18;
  __CFDictionary *v19;
  NSObject *v20;
  __CFDictionary *v21;
  NSObject *v22;
  __CFDictionary *v23;
  NSObject *v24;
  __CFDictionary *v25;
  NSObject *v26;
  __CFDictionary *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  NSObject *v31;
  _BOOL4 v32;
  __CFDictionary *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  NSObject *v37;
  _BOOL4 v38;
  __CFDictionary *v39;
  NSObject *v40;
  const char *v41;
  uint8_t *v42;
  const char *v43;
  uint8_t *v44;
  const char *v45;
  uint8_t *v46;
  const char *v47;
  uint8_t *v48;
  const char *v49;
  uint8_t *v50;
  const char *v51;
  uint8_t *v52;
  const char *v53;
  uint8_t *v54;
  const char *v55;
  uint8_t *v56;
  const char *v57;
  uint8_t *v58;
  const char *v59;
  uint8_t *v60;
  const char *v61;
  uint8_t *v62;
  const char *v63;
  uint8_t *v64;
  const char *v65;
  uint8_t *v66;
  const char *v67;
  uint8_t *v68;
  const char *v69;
  uint8_t *v70;
  uint64_t v71;
  int *v72[2];
  _OWORD v73[3];
  int v74;
  int v75;
  _OWORD v76[3];
  int v77;
  int v78;
  _OWORD v79[2];
  uint64_t v80;
  uint64_t v81;
  _OWORD v82[2];
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  uint64_t v88;
  int v89;
  int v90;
  _OWORD v91[2];
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  _OWORD v97[2];
  int v98;
  int v99;
  _BYTE v100[28];
  int v101;
  _OWORD v102[2];
  uint64_t v103;
  int valuePtr;
  _BYTE v105[32];
  __int128 v106;
  int v107;
  int v108;
  uint8_t buf[8];
  __int16 v110;
  uint64_t v111;

  v2 = sub_1005C197C();
  v3 = sub_1005C1A1C();
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102146A30);
  valuePtr = 0;
  v4 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v2;
    v110 = 2048;
    v111 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "wifi scan iterations %d dwell time is %lldms", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146A30);
    *(_DWORD *)v105 = 67109376;
    *(_DWORD *)&v105[4] = v2;
    *(_WORD *)&v105[8] = 2048;
    *(_QWORD *)&v105[10] = v3;
    LODWORD(v71) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "wifi scan iterations %d dwell time is %lldms", v105, v71);
    v42 = (uint8_t *)v41;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiService::createScanOptions()", "%s\n", v41);
    if (v42 != buf)
      free(v42);
  }
  valuePtr = 2;
  v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
  *(_QWORD *)(a1 + 112) = v5;
  if (!v5)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v6 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "failed to initialize fScanTypePassive", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      *(_WORD *)v105 = 0;
      LODWORD(v71) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "failed to initialize fScanTypePassive", v105, v71);
      v44 = (uint8_t *)v43;
      sub_100512490("Generic", 1, 0, 0, "void CLWifiService::createScanOptions()", "%s\n", v43);
      if (v44 != buf)
        free(v44);
    }
  }
  valuePtr = 1;
  v7 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
  *(_QWORD *)(a1 + 120) = v7;
  if (!v7)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v8 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "failed to initialize fScanTypeActive", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      *(_WORD *)v105 = 0;
      LODWORD(v71) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "failed to initialize fScanTypeActive", v105, v71);
      v46 = (uint8_t *)v45;
      sub_100512490("Generic", 1, 0, 0, "void CLWifiService::createScanOptions()", "%s\n", v45);
      if (v46 != buf)
        free(v46);
    }
  }
  v102[0] = xmmword_101BB72A0;
  v102[1] = unk_101BB72B0;
  *(_QWORD *)buf = v102;
  *(_QWORD *)v105 = &v103;
  v9 = sub_1005C1AC0(a1, v2, 1, 30, (int **)buf, (int **)v105, 50, 2, 1);
  *(_QWORD *)(a1 + 152) = v9;
  if (!v9)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v10 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "failed to initialize fScanOptionsHarvest5GhzSet1", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      *(_WORD *)v105 = 0;
      LODWORD(v71) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "failed to initialize fScanOptionsHarvest5GhzSet1", v105, v71);
      v48 = (uint8_t *)v47;
      sub_100512490("Generic", 1, 0, 0, "void CLWifiService::createScanOptions()", "%s\n", v47);
      if (v48 != buf)
        free(v48);
    }
  }
  *(_OWORD *)v100 = xmmword_101BB72C0;
  *(_OWORD *)&v100[12] = *(__int128 *)((char *)&xmmword_101BB72C0 + 12);
  *(_QWORD *)buf = v100;
  *(_QWORD *)v105 = &v101;
  v11 = sub_1005C1AC0(a1, v2, 1, 30, (int **)buf, (int **)v105, 50, 2, 1);
  *(_QWORD *)(a1 + 160) = v11;
  if (!v11)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v12 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "failed to initialize fScanOptionsHarvest5GhzSet2", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      *(_WORD *)v105 = 0;
      LODWORD(v71) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "failed to initialize fScanOptionsHarvest5GhzSet2", v105, v71);
      v50 = (uint8_t *)v49;
      sub_100512490("Generic", 1, 0, 0, "void CLWifiService::createScanOptions()", "%s\n", v49);
      if (v50 != buf)
        free(v50);
    }
  }
  v98 = 165;
  v97[0] = xmmword_101BB72DC;
  v97[1] = unk_101BB72EC;
  *(_QWORD *)buf = v97;
  *(_QWORD *)v105 = &v99;
  v13 = sub_1005C1AC0(a1, v2, 1, 30, (int **)buf, (int **)v105, 50, 2, 1);
  *(_QWORD *)(a1 + 168) = v13;
  if (!v13)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v14 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "failed to initialize fScanOptionsHarvest5GhzSet3", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      *(_WORD *)v105 = 0;
      LODWORD(v71) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "failed to initialize fScanOptionsHarvest5GhzSet3", v105, v71);
      v52 = (uint8_t *)v51;
      sub_100512490("Generic", 1, 0, 0, "void CLWifiService::createScanOptions()", "%s\n", v51);
      if (v52 != buf)
        free(v52);
    }
  }
  v95 = 11;
  v94 = 0x600000001;
  *(_QWORD *)buf = &v94;
  *(_QWORD *)v105 = &v96;
  v15 = sub_1005C1AC0(a1, v2, 1, 14, (int **)buf, (int **)v105, v3, 0, 0);
  *(_QWORD *)(a1 + 136) = v15;
  if (!v15)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v16 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "failed to initialize fScanOptionsHarvest2GhzSet1", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      *(_WORD *)v105 = 0;
      LODWORD(v71) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "failed to initialize fScanOptionsHarvest2GhzSet1", v105, v71);
      v54 = (uint8_t *)v53;
      sub_100512490("Generic", 1, 0, 0, "void CLWifiService::createScanOptions()", "%s\n", v53);
      if (v54 != buf)
        free(v54);
    }
  }
  v92 = 0xD0000000CLL;
  v91[0] = xmmword_101BB7300;
  v91[1] = unk_101BB7310;
  *(_QWORD *)buf = v91;
  *(_QWORD *)v105 = &v93;
  v17 = sub_1005C1AC0(a1, v2, 1, 14, (int **)buf, (int **)v105, v3, 0, 0);
  *(_QWORD *)(a1 + 144) = v17;
  if (!v17)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v18 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "failed to initialize fScanOptionsHarvest2GhzSet2", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      *(_WORD *)v105 = 0;
      LODWORD(v71) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "failed to initialize fScanOptionsHarvest2GhzSet2", v105, v71);
      v56 = (uint8_t *)v55;
      sub_100512490("Generic", 1, 0, 0, "void CLWifiService::createScanOptions()", "%s\n", v55);
      if (v56 != buf)
        free(v56);
    }
  }
  v89 = 11;
  v88 = 0x600000001;
  *(_QWORD *)buf = &v88;
  *(_QWORD *)v105 = &v90;
  v19 = sub_1005C1AC0(a1, v2, 1, 14, (int **)buf, (int **)v105, 50, 0, 0);
  *(_QWORD *)(a1 + 128) = v19;
  if (!v19)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v20 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "failed to initialize fScanOptionsFast", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      *(_WORD *)v105 = 0;
      LODWORD(v71) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "failed to initialize fScanOptionsFast", v105, v71);
      v58 = (uint8_t *)v57;
      sub_100512490("Generic", 1, 0, 0, "void CLWifiService::createScanOptions()", "%s\n", v57);
      if (v58 != buf)
        free(v58);
    }
  }
  v86 = 11;
  v85 = 0x600000001;
  *(_QWORD *)buf = &v85;
  *(_QWORD *)v105 = &v87;
  v21 = sub_1005C1AC0(a1, v2, 1, 14, (int **)buf, (int **)v105, v3, 0, 0);
  *(_QWORD *)(a1 + 176) = v21;
  if (!v21)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v22 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "failed to initialize fScanOptionsStage1", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      *(_WORD *)v105 = 0;
      LODWORD(v71) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "failed to initialize fScanOptionsStage1", v105, v71);
      v60 = (uint8_t *)v59;
      sub_100512490("Generic", 1, 0, 0, "void CLWifiService::createScanOptions()", "%s\n", v59);
      if (v60 != buf)
        free(v60);
    }
  }
  v83 = 0xD0000000CLL;
  v82[0] = xmmword_101BB7300;
  v82[1] = unk_101BB7310;
  *(_QWORD *)buf = v82;
  *(_QWORD *)v105 = &v84;
  v23 = sub_1005C1AC0(a1, v2, 1, 14, (int **)buf, (int **)v105, v3, 0, 0);
  *(_QWORD *)(a1 + 184) = v23;
  if (!v23)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v24 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "failed to initialize fScanOptionsStage2", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      *(_WORD *)v105 = 0;
      LODWORD(v71) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "failed to initialize fScanOptionsStage2", v105, v71);
      v62 = (uint8_t *)v61;
      sub_100512490("Generic", 1, 0, 0, "void CLWifiService::createScanOptions()", "%s\n", v61);
      if (v62 != buf)
        free(v62);
    }
  }
  v80 = 0xA10000009DLL;
  v79[0] = xmmword_101BB7328;
  v79[1] = unk_101BB7338;
  *(_QWORD *)buf = v79;
  *(_QWORD *)v105 = &v81;
  v25 = sub_1005C1AC0(a1, v2, 1, 30, (int **)buf, (int **)v105, v3, 0, 0);
  *(_QWORD *)(a1 + 192) = v25;
  if (!v25)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v26 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "failed to initialize fScanOptions5GhzStage1", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      *(_WORD *)v105 = 0;
      LODWORD(v71) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "failed to initialize fScanOptions5GhzStage1", v105, v71);
      v64 = (uint8_t *)v63;
      sub_100512490("Generic", 1, 0, 0, "void CLWifiService::createScanOptions()", "%s\n", v63);
      if (v64 != buf)
        free(v64);
    }
  }
  v107 = 13;
  *(_OWORD *)v105 = xmmword_101BB7350;
  *(_OWORD *)&v105[16] = unk_101BB7360;
  v106 = xmmword_101BB7370;
  *(_QWORD *)buf = v105;
  *(_QWORD *)&v76[0] = &v108;
  v27 = sub_1005C1AC0(a1, v2, 1, 14, (int **)buf, (int **)v76, v3, 0, 0);
  v29 = xmmword_101BB7370;
  v28 = unk_101BB7360;
  v30 = xmmword_101BB7350;
  *(_QWORD *)(a1 + 200) = v27;
  if (!v27)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v31 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "failed to initialize fScanOptionsNormal", buf, 2u);
    }
    v32 = sub_1001BFF7C(115, 0);
    v28 = unk_101BB7360;
    v30 = xmmword_101BB7350;
    v29 = xmmword_101BB7370;
    if (v32)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      LOWORD(v76[0]) = 0;
      LODWORD(v71) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "failed to initialize fScanOptionsNormal", v76, v71);
      v66 = (uint8_t *)v65;
      sub_100512490("Generic", 1, 0, 0, "void CLWifiService::createScanOptions()", "%s\n", v65);
      if (v66 != buf)
        free(v66);
      v28 = unk_101BB7360;
      v30 = xmmword_101BB7350;
      v29 = xmmword_101BB7370;
    }
  }
  v77 = 13;
  v76[0] = v30;
  v76[1] = v28;
  v76[2] = v29;
  *(_QWORD *)buf = v76;
  *(_QWORD *)&v73[0] = &v78;
  v33 = sub_1005C1AC0(a1, 3, 1, 14, (int **)buf, (int **)v73, v3, 0, 0);
  v35 = xmmword_101BB7370;
  v34 = unk_101BB7360;
  v36 = xmmword_101BB7350;
  *(_QWORD *)(a1 + 208) = v33;
  if (!v33)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v37 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "failed to initialize fScanOptionsThorough", buf, 2u);
    }
    v38 = sub_1001BFF7C(115, 0);
    v34 = unk_101BB7360;
    v36 = xmmword_101BB7350;
    v35 = xmmword_101BB7370;
    if (v38)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      LOWORD(v73[0]) = 0;
      LODWORD(v71) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "failed to initialize fScanOptionsThorough", v73, v71);
      v68 = (uint8_t *)v67;
      sub_100512490("Generic", 1, 0, 0, "void CLWifiService::createScanOptions()", "%s\n", v67);
      if (v68 != buf)
        free(v68);
      v34 = unk_101BB7360;
      v36 = xmmword_101BB7350;
      v35 = xmmword_101BB7370;
    }
  }
  v74 = 13;
  v73[0] = v36;
  v73[1] = v34;
  v73[2] = v35;
  *(_QWORD *)buf = v73;
  v72[0] = &v75;
  v39 = sub_1005C1AC0(a1, v2, 1, 14, (int **)buf, v72, v3, (uint64_t)*(double *)(a1 + 384), 0);
  *(_QWORD *)(a1 + 216) = v39;
  if (!v39)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v40 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "failed to initialize fScanOptionsCached", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      LOWORD(v72[0]) = 0;
      LODWORD(v71) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "failed to initialize fScanOptionsCached", v72, v71);
      v70 = (uint8_t *)v69;
      sub_100512490("Generic", 1, 0, 0, "void CLWifiService::createScanOptions()", "%s\n", v69);
      if (v70 != buf)
        free(v70);
    }
  }
  *(_QWORD *)(a1 + 224) = 0;
}

uint64_t sub_1005B0DD8(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const __CFArray *v9;
  const __CFArray *v10;
  NSObject *v11;
  NSObject *v12;
  const void *ValueAtIndex;
  CFTypeID v14;
  NSObject *v15;
  const __CFString *InterfaceName;
  void **v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *v21;
  NSObject *v22;
  NSObject *v23;
  uint64_t v24;
  NSObject *v25;
  int v26;
  int v27;
  BOOL v28;
  _BOOL4 v29;
  std::string *v30;
  void *v32;
  std::string v33;
  void *__p;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  uint8_t v43[8];
  __int16 v44;
  const char *v45;
  __int16 v46;
  _BOOL4 v47;
  __int16 v48;
  std::string *v49;
  __int16 v50;
  uint64_t v51;
  uint8_t buf[4];
  int v53;
  __int16 v54;
  _BYTE v55[18];
  char v56;
  int v57;
  unsigned __int8 v58;
  _BYTE v59[32];
  uint64_t v60;

  v2 = a1 + 824;
  v41 = a1 + 824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 824) + 16))(a1 + 824);
  v42 = 256;
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021469D0);
  v3 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289026;
    v53 = 0;
    v54 = 2082;
    *(_QWORD *)v55 = "";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"WifiMgr, allocateWifiArtifacts\"}", buf, 0x12u);
  }
  *(_BYTE *)(a1 + 246) = 0;
  v4 = *(const void **)(a1 + 320);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 320) = 0;
  }
  v5 = *(_QWORD *)(a1 + 312);
  if (v5)
  {
    WiFiDeviceClientRegisterPowerCallback(v5, 0, a1);
    WiFiDeviceClientRegisterResumeScanCallback(*(_QWORD *)(a1 + 312), 0, a1);
    WiFiDeviceClientRegisterExtendedLinkCallback(*(_QWORD *)(a1 + 312), 0, a1);
    WiFiDeviceClientRegisterBssidChangeCallback(*(_QWORD *)(a1 + 312), 0, a1);
    WiFiDeviceClientRegisterBgScanSuspendResumeCallback(*(_QWORD *)(a1 + 312), 0, a1);
    WiFiDeviceClientRegisterScanUpdateCallback(*(_QWORD *)(a1 + 312), 0, 1, 0);
    WiFiDeviceClientRegisterLQMCallback(*(_QWORD *)(a1 + 312), 0, a1);
    WiFiDeviceClientRegister24GHzNetworkInCriticalStateCallback(*(_QWORD *)(a1 + 312), 0, a1);
    CFRelease(*(CFTypeRef *)(a1 + 312));
    *(_QWORD *)(a1 + 312) = 0;
  }
  v6 = *(_QWORD *)(a1 + 304);
  if (v6)
    goto LABEL_12;
  v7 = WiFiManagerClientCreate(kCFAllocatorDefault, 0);
  *(_QWORD *)(a1 + 304) = v7;
  if (v7)
  {
    v8 = sub_100193530();
    WiFiManagerClientScheduleWithRunLoop(v7, v8, kCFRunLoopCommonModes);
    WiFiManagerClientRegisterServerRestartCallback(*(_QWORD *)(a1 + 304), sub_1005B3A74, a1);
    WiFiManagerClientRegisterWowStateChangedCallback(*(_QWORD *)(a1 + 304), sub_1005B3C78, a1);
    WiFiManagerClientRegisterDeviceAttachmentCallback(*(_QWORD *)(a1 + 304), sub_1005B3E84, a1);
    WiFiManagerClientRegisterBackgroundScanCallback(*(_QWORD *)(a1 + 304), sub_1005B3F04, a1);
    v6 = *(_QWORD *)(a1 + 304);
LABEL_12:
    v9 = (const __CFArray *)WiFiManagerClientCopyDevices(v6);
    v10 = v9;
    if (v9)
    {
      if (!CFArrayGetCount(v9))
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021469D0);
        v11 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 68289026;
          v53 = 0;
          v54 = 2082;
          *(_QWORD *)v55 = "";
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"WifiMgr, wifi zero devices\"}", buf, 0x12u);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_1021469D0);
        }
        v12 = qword_1022A0048;
        if (os_signpost_enabled((os_log_t)qword_1022A0048))
        {
          *(_DWORD *)buf = 68289026;
          v53 = 0;
          v54 = 2082;
          *(_QWORD *)v55 = "";
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "WifiMgr, wifi zero devices", "{\"msg%{public}.0s\":\"WifiMgr, wifi zero devices\"}", buf, 0x12u);
        }
        sub_1005B22A4(a1, (uint64_t)"DevicesZero");
      }
      ValueAtIndex = CFArrayGetValueAtIndex(v10, 0);
      *(_QWORD *)(a1 + 312) = ValueAtIndex;
      if (ValueAtIndex && (v14 = CFGetTypeID(ValueAtIndex), v14 == WiFiDeviceClientGetTypeID()))
      {
        CFRetain(*(CFTypeRef *)(a1 + 312));
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021469D0);
        v15 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
        {
          InterfaceName = (const __CFString *)WiFiDeviceClientGetInterfaceName(*(_QWORD *)(a1 + 312));
          sub_1001A486C(InterfaceName, (uint64_t)&__p);
          v17 = v35 >= 0 ? &__p : (void **)__p;
          *(_DWORD *)buf = 68289282;
          v53 = 0;
          v54 = 2082;
          *(_QWORD *)v55 = "";
          *(_WORD *)&v55[8] = 2082;
          *(_QWORD *)&v55[10] = v17;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"WifiMgr, allocation \", \"wifi interface\":%{public, location:escape_only}s}", buf, 0x1Cu);
          if (SHIBYTE(v35) < 0)
            operator delete(__p);
        }
        WiFiDeviceClientRegisterPowerCallback(*(_QWORD *)(a1 + 312), sub_1005B411C, a1);
        WiFiDeviceClientRegisterResumeScanCallback(*(_QWORD *)(a1 + 312), sub_1005B4320, a1);
        WiFiDeviceClientRegisterExtendedLinkCallback(*(_QWORD *)(a1 + 312), sub_1005B4524, a1);
        WiFiDeviceClientRegisterBssidChangeCallback(*(_QWORD *)(a1 + 312), sub_1005B4730, a1);
        WiFiDeviceClientRegisterBgScanSuspendResumeCallback(*(_QWORD *)(a1 + 312), sub_1005B493C, a1);
        WiFiDeviceClientRegisterScanUpdateCallback(*(_QWORD *)(a1 + 312), sub_100083EA4, 1, a1);
        WiFiDeviceClientRegisterLQMCallback(*(_QWORD *)(a1 + 312), sub_1000442B4, a1);
        WiFiDeviceClientRegister24GHzNetworkInCriticalStateCallback(*(_QWORD *)(a1 + 312), sub_1005B4B48, a1);
        *(_QWORD *)(a1 + 320) = WiFiDeviceClientCopyCurrentNetwork(*(_QWORD *)(a1 + 312));
        __p = (void *)qword_1023114A0;
        if (byte_1023114A8[23] < 0)
        {
          sub_100115CE4(&v35, *(void **)byte_1023114A8, *(unint64_t *)&byte_1023114A8[8]);
        }
        else
        {
          v35 = *(_OWORD *)byte_1023114A8;
          v36 = *(_QWORD *)&byte_1023114A8[16];
        }
        v37 = xmmword_1023114C0;
        v38 = xmmword_1023114D0;
        v39 = xmmword_1023114E0;
        v40 = qword_1023114F0;
        sub_1005B4D54(a1, (uint64_t)&__p);
        *(_WORD *)buf = -256;
        LOBYTE(v54) = 0;
        v58 = 0;
        memset(v59, 0, sizeof(v59));
        v60 = 0;
        sub_1005C7EDC((uint64_t)&v54, (uint64_t)&__p);
        BYTE2(v60) = 0;
        v24 = v57;
        *(_DWORD *)v43 = 6;
        (*(void (**)(uint64_t, uint8_t *, uint8_t *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, v43, buf, 1, 0xFFFFFFFFLL, 0);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021469D0);
        v25 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
        {
          v26 = v58;
          v27 = v57;
          v32 = __p;
          sub_1000C2150(&v32, &v33);
          v28 = !v26 || v27 <= 0;
          v29 = !v28;
          v30 = (v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &v33
              : (std::string *)v33.__r_.__value_.__r.__words[0];
          *(_DWORD *)v43 = 68289795;
          *(_DWORD *)&v43[4] = 0;
          v44 = 2082;
          v45 = "";
          v46 = 1026;
          v47 = v29;
          v48 = 2081;
          v49 = v30;
          v50 = 2049;
          v51 = v24;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"@ClxLink, associate \", \"isAssociated\":%{public}hhd, \"mac\":%{private, location:escape_only}s, \"channel\":%{private}ld}", v43, 0x2Cu);
          if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v33.__r_.__value_.__l.__data_);
        }
        WiFiManagerClientGetWoWState(*(_QWORD *)(a1 + 304));
        sub_1005B5518((_QWORD *)a1);
        sub_1005B58B4(a1);
        *(const CFTimeInterval *)(a1 + 744) = -kCFAbsoluteTimeIntervalSince1970;
        *(_DWORD *)(a1 + 752) = 0;
        CFRelease(v10);
        sub_1005B5AA0(a1);
        *(_QWORD *)v43 = &v59[8];
        sub_100279AA4((void ***)v43);
        if (v58 && v56 < 0)
          operator delete(*(void **)&v55[6]);
        if (SHIBYTE(v36) < 0)
          operator delete((void *)v35);
      }
      else
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021469D0);
        v18 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 68289026;
          v53 = 0;
          v54 = 2082;
          *(_QWORD *)v55 = "";
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"WifiMgr, wifi device failure\"}", buf, 0x12u);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_1021469D0);
        }
        v19 = qword_1022A0048;
        if (os_signpost_enabled((os_log_t)qword_1022A0048))
        {
          *(_DWORD *)buf = 68289026;
          v53 = 0;
          v54 = 2082;
          *(_QWORD *)v55 = "";
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "WifiMgr, wifi device failure", "{\"msg%{public}.0s\":\"WifiMgr, wifi device failure\"}", buf, 0x12u);
        }
        sub_1005B22A4(a1, (uint64_t)"DeviceFail");
        *(_QWORD *)(a1 + 312) = 0;
        CFRelease(v10);
      }
    }
    else
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      v20 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68289026;
        v53 = 0;
        v54 = 2082;
        *(_QWORD *)v55 = "";
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"WifiMgr, wifi devices failure\"}", buf, 0x12u);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021469D0);
      }
      v21 = qword_1022A0048;
      if (os_signpost_enabled((os_log_t)qword_1022A0048))
      {
        *(_DWORD *)buf = 68289026;
        v53 = 0;
        v54 = 2082;
        *(_QWORD *)v55 = "";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v21, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "WifiMgr, wifi devices failure", "{\"msg%{public}.0s\":\"WifiMgr, wifi devices failure\"}", buf, 0x12u);
      }
      sub_1005B22A4(a1, (uint64_t)"DevicesNull");
    }
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021469D0);
  v22 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 68289026;
    v53 = 0;
    v54 = 2082;
    *(_QWORD *)v55 = "";
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"WifiMgr, WiFiManagerClientCreate failed\"}", buf, 0x12u);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
  }
  v23 = qword_1022A0048;
  if (os_signpost_enabled((os_log_t)qword_1022A0048))
  {
    *(_DWORD *)buf = 68289026;
    v53 = 0;
    v54 = 2082;
    *(_QWORD *)v55 = "";
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v23, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "WifiMgr, WiFiManagerClientCreate failed", "{\"msg%{public}.0s\":\"WifiMgr, WiFiManagerClientCreate failed\"}", buf, 0x12u);
  }
  sub_1005B22A4(a1, (uint64_t)"ManagerNull");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

void sub_1005B18BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  sub_10187E514((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t sub_1005B1920(uint64_t a1)
{
  return sub_1005B1928(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1005B1928(uint64_t a1)
{
  uint64_t v2;
  CFAbsoluteTime Current;
  NSObject *v4;
  int v5;
  NSObject *v6;
  NSObject *v7;
  int v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  uint8_t *v13;
  const char *v14;
  uint8_t *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint8_t buf[4];
  uint64_t v20;

  v2 = a1 + 824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 824) + 16))(a1 + 824);
  Current = CFAbsoluteTimeGetCurrent();
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021469D0);
  v4 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(unsigned __int8 *)(a1 + 648);
    *(_DWORD *)buf = 67240192;
    LODWORD(v20) = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "WsbTimer, first, %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v9 = *(unsigned __int8 *)(a1 + 648);
    v17 = 67240192;
    LODWORD(v18) = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WsbTimer, first, %{public}d", &v17, 8);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiService::onWsbAnalyticsTimer()", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  objc_msgSend(*(id *)(a1 + 640), "setNextFireDelay:", 14400.0);
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021469F0);
  v6 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134349056;
    v20 = 0x40CC200000000000;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "WsbClients, timer, %{public}0.f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021469F0);
    v17 = 134349056;
    v18 = 0x40CC200000000000;
    LODWORD(v16) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "WsbClients, timer, %{public}0.f", &v17, v16);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiService::onWsbAnalyticsTimer()", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  if (*(_BYTE *)(a1 + 648))
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021469F0);
    v7 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "WsbClients, status, start", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021469F0);
      LOWORD(v17) = 0;
      LODWORD(v16) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "WsbClients, status, start", &v17, v16);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLWifiService::onWsbAnalyticsTimer()", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    *(CFAbsoluteTime *)(a1 + 680) = Current;
    *(CFAbsoluteTime *)(a1 + 688) = Current;
  }
  else
  {
    sub_1005BFDD8(a1, 0, 0, 1);
  }
  *(_BYTE *)(a1 + 648) = 0;
  sub_10003EFD0(a1, (uint64_t)"timer");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

void sub_1005B1DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1005B1E1C(uint64_t a1)
{
  _TtC10CLAONSense21CLAONSenseWiFiService *v2;
  id v3;
  _BOOL8 v4;
  NSObject *v5;
  double v6;
  uint8_t *v7;
  uint8_t *v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  NSObject *v12;
  id v13;
  uint64_t v15;
  id v16;
  double v17;
  uint8_t *v18;
  _QWORD v19[5];
  id v20;
  int v21;
  id v22;
  uint8_t buf[4];
  id v24;

  if (-[CLAONSenseWiFiService isAvailable](+[CLAONSenseWiFiService shared](_TtC10CLAONSense21CLAONSenseWiFiService, "shared"), "isAvailable"))
  {
    v2 = +[CLAONSenseWiFiService shared](_TtC10CLAONSense21CLAONSenseWiFiService, "shared");
    v20 = 0;
    v3 = objc_msgSend(*(id *)(a1 + 40), "queue");
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_1005C3774;
    v19[3] = &unk_1021468B0;
    v19[4] = a1;
    v4 = -[CLAONSenseWiFiService registerForWifiScanResultsWithQueue:error:callback:](v2, "registerForWifiScanResultsWithQueue:error:callback:", v3, &v20, v19);
    if (v4)
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      v5 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "AONSense, successfully registered for aonsensed scans", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021469D0);
        LOWORD(v21) = 0;
        v6 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "AONSense, successfully registered for aonsensed scans", &v21, 2);
        v8 = v7;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiService::startAONScanRequest()", "%s\n", v6);
LABEL_30:
        if (v8 != buf)
          free(v8);
      }
    }
    else
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      v12 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
      {
        v13 = objc_msgSend(objc_msgSend(v20, "localizedDescription"), "UTF8String");
        *(_DWORD *)buf = 136446210;
        v24 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Error registering for AON scan results: %{public}s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021469D0);
        v15 = qword_1022A0048;
        v16 = objc_msgSend(objc_msgSend(v20, "localizedDescription"), "UTF8String");
        v21 = 136446210;
        v22 = v16;
        v17 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v15, 16, "Error registering for AON scan results: %{public}s", &v21, 12);
        v8 = v18;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLWifiService::startAONScanRequest()", "%s\n", v17);
        goto LABEL_30;
      }
    }
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v9 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "AONSense is unavailable, unable to register for scans", buf, 2u);
    }
    v4 = 0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      LOWORD(v21) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "AONSense is unavailable, unable to register for scans", &v21, 2);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLWifiService::startAONScanRequest()", "%s\n", v10);
      if (v11 != buf)
        free(v11);
      return 0;
    }
  }
  return v4;
}

uint64_t sub_1005B22A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  const char *v7;
  uint8_t *v8;
  _QWORD block[7];
  __int16 v10;
  int v11;
  uint64_t v12;
  uint8_t buf[4];
  uint64_t v14;

  v4 = a1 + 824;
  block[5] = a1 + 824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 824) + 16))(a1 + 824);
  v10 = 256;
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021469D0);
  v5 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446210;
    v14 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "WifiService, re-schedule allocate, %{public}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v11 = 136446210;
    v12 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "WifiService, re-schedule allocate, %{public}s", &v11, 12);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiService::scheduleWifiArtifactsAllocation(const char *)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1005B2504;
  block[3] = &unk_10212ECA0;
  block[4] = a1;
  if (qword_102301D38 != -1)
    dispatch_once(&qword_102301D38, block);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
}

void sub_1005B24DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_1005B2504(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v4[5];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(v1 + 40);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1005B2560;
  v4[3] = &unk_10212ECA0;
  v4[4] = v1;
  return objc_msgSend(v2, "afterInterval:async:", v4, 5.0);
}

void sub_1005B2560(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v1 + 312))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v2 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "WifiService, device, previously retrieved", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      v8[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "WifiService, device, previously retrieved", v8, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 2, "void CLWifiService::scheduleWifiArtifactsAllocation(const char *)_block_invoke", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v5 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "WifiService, device, timer retrieve", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      v8[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiService, device, timer retrieve", v8, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLWifiService::scheduleWifiArtifactsAllocation(const char *)_block_invoke", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
    sub_1005B0DD8(v1);
    sub_1005B2834(v1, 1, 1);
  }
}

void sub_1005B2834(uint64_t a1, int a2, int a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t **v7;
  int *v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t **v11;
  int v12;
  uint64_t **v13;
  uint64_t **v14;
  uint64_t *v15;
  int v16;
  _OWORD *v17;
  int v18;
  NSObject *v19;
  char *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  uint64_t *v27;
  _QWORD *v28;
  int v29;
  int v30;
  NSObject *v31;
  NSObject *v32;
  _BOOL4 v33;
  _QWORD *v34;
  _QWORD *v35;
  char *v36;
  char *v37;
  NSObject *v38;
  int v39;
  NSObject *v40;
  const char *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  BOOL v46;
  uint64_t *v47;
  _QWORD *v48;
  char v49;
  NSObject *v50;
  uint64_t v51;
  int v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  int v56;
  char *v57;
  int v58;
  char v59;
  BOOL v60;
  int v61;
  id v62;
  NSNumber *v63;
  NSNumber *v64;
  NSNumber *v65;
  NSObject *v66;
  int v67;
  NSObject *v68;
  uint64_t *v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  int v76;
  int v77;
  int v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  int v84;
  int v86;
  uint64_t **v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  pthread_mutex_t *v91;
  __int16 v92;
  int v93;
  _BYTE v94[10];
  _BYTE v95[6];
  uint64_t *v96;
  __int16 v97;
  int v98;
  __int16 v99;
  int v100;
  __int16 v101;
  int v102;
  __int16 v103;
  int v104;
  __int16 v105;
  int v106;
  __int16 v107;
  int v108;
  __int16 v109;
  uint64_t v110;
  uint8_t buf[4];
  _BYTE v112[10];
  _BYTE v113[6];
  uint64_t *v114;
  __int16 v115;
  int v116;
  __int16 v117;
  int v118;
  __int16 v119;
  int v120;
  __int16 v121;
  int v122;
  __int16 v123;
  int v124;
  __int16 v125;
  int v126;
  __int16 v127;
  uint64_t v128;

  v90 = a1 + 824;
  (*(void (**)(void))(*(_QWORD *)(a1 + 824) + 16))();
  v5 = 0;
  v6 = 0;
  v92 = 256;
  v88 = 0;
  v89 = 0;
  v87 = &v88;
  v7 = &v88;
  while (1)
  {
    v8 = (int *)((char *)&unk_1021467B0 + 16 * v6);
    v9 = &v88;
    if (v7 == &v88)
      goto LABEL_8;
    v10 = v5;
    v11 = &v88;
    if (v5)
    {
      do
      {
        v9 = (uint64_t **)v10;
        v10 = (uint64_t *)v10[1];
      }
      while (v10);
    }
    else
    {
      do
      {
        v9 = (uint64_t **)v11[2];
        v60 = *v9 == (uint64_t *)v11;
        v11 = v9;
      }
      while (v60);
    }
    v12 = *v8;
    if (*((_DWORD *)v9 + 8) < *v8)
    {
LABEL_8:
      if (v5)
        v13 = v9;
      else
        v13 = &v88;
      if (v5)
      {
        v14 = v9 + 1;
      }
      else
      {
        v9 = (uint64_t **)&v87;
        v14 = &v88;
      }
      if (v9[1])
        goto LABEL_27;
LABEL_24:
      v17 = operator new(0x30uLL);
      v17[2] = *(_OWORD *)v8;
      *(_QWORD *)v17 = 0;
      *((_QWORD *)v17 + 1) = 0;
      *((_QWORD *)v17 + 2) = v13;
      *v14 = (uint64_t *)v17;
      if (*v87)
      {
        v87 = (uint64_t **)*v87;
        v17 = *v14;
      }
      sub_10025F800(v88, (uint64_t *)v17);
      ++v89;
      goto LABEL_27;
    }
    v14 = &v88;
    v13 = &v88;
    if (!v5)
      goto LABEL_24;
    v15 = v5;
    while (1)
    {
      while (1)
      {
        v13 = (uint64_t **)v15;
        v16 = *((_DWORD *)v15 + 8);
        if (v12 >= v16)
          break;
        v15 = *v13;
        v14 = v13;
        if (!*v13)
          goto LABEL_24;
      }
      if (v16 >= v12)
        break;
      v15 = v13[1];
      if (!v15)
      {
        v14 = v13 + 1;
        goto LABEL_24;
      }
    }
LABEL_27:
    if (++v6 == 6)
      break;
    v7 = v87;
    v5 = v88;
  }
  if (!*(_QWORD *)(a1 + 304) || !*(_QWORD *)(a1 + 312))
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021469F0);
    v19 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "@WsbReg, No wifi interface available, #CloneMe", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_168;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021469F0);
    LOWORD(v93) = 0;
    v20 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@WsbReg, No wifi interface available, #CloneMe", &v93, 2);
    sub_100512490("Generic", 1, 0, 2, "void CLWifiService::registerWsb(BOOL, BOOL)", "%s\n", v20);
LABEL_176:
    if (v20 != (char *)buf)
      free(v20);
    goto LABEL_168;
  }
  if (a2)
    v18 = *(_DWORD *)(a1 + 240);
  else
    v18 = 3600;
  v86 = 0;
  v22 = (uint64_t *)(a1 + 64);
  v21 = *(_QWORD *)(a1 + 64);
  v23 = a1 + 64;
  if (!v21)
    goto LABEL_92;
  v24 = a1 + 64;
  do
  {
    v25 = *(_DWORD *)(v21 + 32);
    v26 = v25 < 12;
    if (v25 >= 12)
      v27 = (uint64_t *)v21;
    else
      v27 = (uint64_t *)(v21 + 8);
    if (!v26)
      v24 = v21;
    v21 = *v27;
  }
  while (*v27);
  v23 = a1 + 64;
  if ((uint64_t *)v24 == v22 || (v23 = a1 + 64, *(int *)(v24 + 32) > 12))
  {
LABEL_92:
    if (*(_DWORD *)(a1 + 236))
    {
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021469F0);
      v40 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67240192;
        *(_DWORD *)v112 = a2;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "@WsbReg, None, %{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021469F0);
        v93 = 67240192;
        *(_DWORD *)v94 = a2;
        v80 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "@WsbReg, None, %{public}d", &v93, 8);
        sub_100512490("Generic", 1, 0, 2, "void CLWifiService::registerWsb(BOOL, BOOL)", "%s\n", v80);
        if (v80 != (char *)buf)
          free(v80);
      }
      sub_1005B637C(a1);
      v84 = 0;
      v29 = 1;
      v24 = v23;
      v41 = "off";
      goto LABEL_99;
    }
    goto LABEL_168;
  }
  if (!*(_QWORD *)(v24 + 56))
  {
    v23 = v24;
    goto LABEL_92;
  }
  sub_1005B6788(a1);
  v28 = *(_QWORD **)(v24 + 40);
  v29 = 1;
  if (v28 != (_QWORD *)(v24 + 48))
  {
    do
    {
      v30 = *((_DWORD *)v28 + 10);
      if ((v30 - 3600) <= 0xFFFFF1F0)
      {
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021469F0);
        v31 = qword_1022A0058;
        if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67240448;
          *(_DWORD *)v112 = v30;
          *(_WORD *)&v112[4] = 1026;
          *(_DWORD *)&v112[6] = 3600;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "@WsbRate, iter, %{public}d, to, %{public}d", buf, 0xEu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021469F0);
          v93 = 67240448;
          *(_DWORD *)v94 = v30;
          *(_WORD *)&v94[4] = 1026;
          *(_DWORD *)&v94[6] = 3600;
          LODWORD(v83) = 14;
          v36 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "@WsbRate, iter, %{public}d, to, %{public}d", &v93, v83);
          sub_100512490("Generic", 1, 0, 2, "void CLWifiService::registerWsb(BOOL, BOOL)", "%s\n", v36);
          if (v36 != (char *)buf)
            free(v36);
        }
        v30 = 3600;
      }
      if (v30 < v18)
      {
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021469F0);
        v32 = qword_1022A0058;
        if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67240448;
          *(_DWORD *)v112 = v30;
          *(_WORD *)&v112[4] = 1026;
          *(_DWORD *)&v112[6] = v18;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "@WsbRate, iter, %{public}d, to, %{public}d", buf, 0xEu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021469F0);
          v93 = 67240448;
          *(_DWORD *)v94 = v30;
          *(_WORD *)&v94[4] = 1026;
          *(_DWORD *)&v94[6] = v18;
          LODWORD(v83) = 14;
          v37 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "@WsbRate, iter, %{public}d, to, %{public}d", &v93, v83);
          sub_100512490("Generic", 1, 0, 2, "void CLWifiService::registerWsb(BOOL, BOOL)", "%s\n", v37);
          if (v37 != (char *)buf)
            free(v37);
        }
        v18 = v30;
      }
      v33 = *((_BYTE *)v28 + 45) != 0;
      v34 = (_QWORD *)v28[1];
      if (v34)
      {
        do
        {
          v35 = v34;
          v34 = (_QWORD *)*v34;
        }
        while (v34);
      }
      else
      {
        do
        {
          v35 = (_QWORD *)v28[2];
          v60 = *v35 == (_QWORD)v28;
          v28 = v35;
        }
        while (!v60);
      }
      v29 &= v33;
      v28 = v35;
    }
    while (v35 != (_QWORD *)(v24 + 48));
  }
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021469F0);
  v38 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67240448;
    *(_DWORD *)v112 = v18;
    *(_WORD *)&v112[4] = 1026;
    *(_DWORD *)&v112[6] = v29;
    _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "@WsbRate, postIter, rate, %{public}d, rollover, %{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021469F0);
    v93 = 67240448;
    *(_DWORD *)v94 = v18;
    *(_WORD *)&v94[4] = 1026;
    *(_DWORD *)&v94[6] = v29;
    LODWORD(v83) = 14;
    v82 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "@WsbRate, postIter, rate, %{public}d, rollover, %{public}d", &v93, v83);
    sub_100512490("Generic", 1, 0, 2, "void CLWifiService::registerWsb(BOOL, BOOL)", "%s\n", v82);
    if (v82 != (char *)buf)
      free(v82);
  }
  v39 = *(_DWORD *)(a1 + 240);
  if (v18 == 3600)
  {
    if (v39 <= 3599)
    {
      v84 = 0;
      v86 = 1;
      goto LABEL_142;
    }
    if (*(unsigned __int8 *)(a1 + 245) == v29)
    {
      v84 = 0;
      v86 = 2;
      v41 = "skip";
    }
    else
    {
      v86 = 4;
      sub_1005B69C4(a1, v29, 1);
      v84 = 0;
      v41 = "standard";
    }
  }
  else
  {
    v84 = v18;
    v60 = v18 == v39;
    if (v18 == v39)
      v61 = 3;
    else
      v61 = 5;
    v86 = v61;
    if (v60)
    {
      v41 = "skip";
      v84 = v18;
    }
    else
    {
LABEL_142:
      sub_1005B69C4(a1, v29, v18 == 3600);
      v62 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
      v63 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v84);
      v64 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v84);
      v65 = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", 64800);
      objc_msgSend(v62, "setObject:forKey:", v63, CFSTR("IO80211InterfaceBGScanDynamicProfileStartTime"));
      objc_msgSend(v62, "setObject:forKey:", v64, CFSTR("IO80211InterfaceBGScanDynamicProfileScanFreq"));
      objc_msgSend(v62, "setObject:forKey:", v65, CFSTR("IO80211InterfaceBGScanDynamicProfileDuration"));
      WiFiDeviceClientSetProperty(*(_QWORD *)(a1 + 312), CFSTR("IO80211InterfaceBGDynamicProfileParams"), v62);
      v41 = "dynamic";
    }
  }
  *(_DWORD *)(a1 + 240) = v18;
  *(_BYTE *)(a1 + 245) = v29;
LABEL_99:
  v42 = *(unsigned __int8 *)(a1 + 244);
  if (v42 == a2 && !a3)
  {
LABEL_133:
    v58 = 0;
    v49 = 0;
    v44 = v24;
    if ((a2 & 1) == 0)
      goto LABEL_154;
    goto LABEL_134;
  }
  v43 = *v22;
  if (!*v22)
    goto LABEL_132;
  v44 = a1 + 64;
  do
  {
    v45 = *(_DWORD *)(v43 + 32);
    v46 = v45 < 12;
    if (v45 >= 12)
      v47 = (uint64_t *)v43;
    else
      v47 = (uint64_t *)(v43 + 8);
    if (!v46)
      v44 = v43;
    v43 = *v47;
  }
  while (*v47);
  if ((uint64_t *)v44 == v22)
  {
LABEL_132:
    v24 = a1 + 64;
    goto LABEL_133;
  }
  v24 = a1 + 64;
  if (*(int *)(v44 + 32) > 12)
    goto LABEL_133;
  if (!*(_QWORD *)(v44 + 56))
  {
    v24 = v44;
    goto LABEL_133;
  }
  v48 = *(_QWORD **)(v44 + 40);
  if (v48 == (_QWORD *)(v44 + 48))
  {
    v58 = 0;
    v49 = 0;
    if ((a2 & 1) == 0)
      goto LABEL_153;
    v49 = 0;
LABEL_134:
    if (!a3)
      goto LABEL_156;
    v59 = v49;
    goto LABEL_162;
  }
  v49 = 0;
  do
  {
    if (a3)
    {
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021469F0);
      v50 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
      {
        v51 = v48[6];
        v52 = *((unsigned __int8 *)v48 + 44);
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)v112 = v51;
        *(_WORD *)&v112[8] = 1026;
        *(_DWORD *)v113 = v52;
        _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEBUG, "@WsbActive, recheck, %{public}s, %{public}d", buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021469F0);
        v55 = v48[6];
        v56 = *((unsigned __int8 *)v48 + 44);
        v93 = 136446466;
        *(_QWORD *)v94 = v55;
        *(_WORD *)&v94[8] = 1026;
        *(_DWORD *)v95 = v56;
        LODWORD(v83) = 18;
        v57 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "@WsbActive, recheck, %{public}s, %{public}d", &v93, v83);
        sub_100512490("Generic", 1, 0, 2, "void CLWifiService::registerWsb(BOOL, BOOL)", "%s\n", v57);
        if (v57 != (char *)buf)
          free(v57);
      }
    }
    if (*((_BYTE *)v48 + 44))
    {
      v58 = 1;
      v49 = 1;
      if ((a2 & 1) == 0)
        goto LABEL_134;
      goto LABEL_153;
    }
    v53 = (_QWORD *)v48[1];
    if (v53)
    {
      do
      {
        v54 = v53;
        v53 = (_QWORD *)*v53;
      }
      while (v53);
    }
    else
    {
      do
      {
        v54 = (_QWORD *)v48[2];
        v60 = *v54 == (_QWORD)v48;
        v48 = v54;
      }
      while (!v60);
    }
    v48 = v54;
  }
  while (v54 != (_QWORD *)(v44 + 48));
  v58 = 0;
  if ((a2 & 1) != 0)
    goto LABEL_134;
LABEL_153:
  v42 = *(unsigned __int8 *)(a1 + 244);
LABEL_154:
  v59 = v49;
  if (v42 != (v49 & 1) || (a3 & 1) != 0)
  {
LABEL_162:
    *(_BYTE *)(a1 + 244) = v59;
    sub_1005B6E9C(a1, v49 & 1);
    v67 = 1;
    goto LABEL_163;
  }
LABEL_156:
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021469F0);
  v66 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240704;
    *(_DWORD *)v112 = a2;
    *(_WORD *)&v112[4] = 1026;
    *(_DWORD *)&v112[6] = v58;
    *(_WORD *)v113 = 1026;
    *(_DWORD *)&v113[2] = 0;
    _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEBUG, "@WsbActive, Same, isReg, %{public}d, active, %{public}d, recheck, %{public}d", buf, 0x14u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021469F0);
    v93 = 67240704;
    *(_DWORD *)v94 = a2;
    *(_WORD *)&v94[4] = 1026;
    *(_DWORD *)&v94[6] = v58;
    *(_WORD *)v95 = 1026;
    *(_DWORD *)&v95[2] = 0;
    LODWORD(v83) = 20;
    v81 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "@WsbActive, Same, isReg, %{public}d, active, %{public}d, recheck, %{public}d", &v93, v83);
    sub_100512490("Generic", 1, 0, 2, "void CLWifiService::registerWsb(BOOL, BOOL)", "%s\n", v81);
    if (v81 != (char *)buf)
      free(v81);
  }
  v67 = 0;
LABEL_163:
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021469F0);
  v68 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
  {
    v69 = *sub_1005B7ABC((uint64_t **)&v87, &v86);
    v70 = *(_DWORD *)(a1 + 240);
    v71 = *(unsigned __int8 *)(a1 + 244);
    v72 = *(unsigned __int8 *)(a1 + 246);
    v73 = *(_QWORD *)(v44 + 56);
    *(_DWORD *)buf = 136448514;
    *(_QWORD *)v112 = v41;
    *(_WORD *)&v112[8] = 1026;
    *(_DWORD *)v113 = a2;
    *(_WORD *)&v113[4] = 2082;
    v114 = v69;
    v115 = 1026;
    v116 = v70;
    v117 = 1026;
    v118 = v84;
    v119 = 1026;
    v120 = v29;
    v121 = 1026;
    v122 = v71;
    v123 = 1026;
    v124 = v67;
    v125 = 1026;
    v126 = v72;
    v127 = 2050;
    v128 = v73;
    _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "@WsbReg, codepath, %{public}s, isReg, %{public}d, mode, %{public}s, rate, %{public}d, dynRate, %{public}d, rollover, %{public}d, active, %{public}d, %{public}d, sample, %{public}d, clients, %{public}lu", buf, 0x4Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021469F0);
    v74 = qword_1022A0058;
    v75 = *sub_1005B7ABC((uint64_t **)&v87, &v86);
    v76 = *(_DWORD *)(a1 + 240);
    v77 = *(unsigned __int8 *)(a1 + 244);
    v78 = *(unsigned __int8 *)(a1 + 246);
    v79 = *(_QWORD *)(v44 + 56);
    v93 = 136448514;
    *(_QWORD *)v94 = v41;
    *(_WORD *)&v94[8] = 1026;
    *(_DWORD *)v95 = a2;
    *(_WORD *)&v95[4] = 2082;
    v96 = v75;
    v97 = 1026;
    v98 = v76;
    v99 = 1026;
    v100 = v84;
    v101 = 1026;
    v102 = v29;
    v103 = 1026;
    v104 = v77;
    v105 = 1026;
    v106 = v67;
    v107 = 1026;
    v108 = v78;
    v109 = 2050;
    v110 = v79;
    LODWORD(v83) = 74;
    v20 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v74, 0, "@WsbReg, codepath, %{public}s, isReg, %{public}d, mode, %{public}s, rate, %{public}d, dynRate, %{public}d, rollover, %{public}d, active, %{public}d, %{public}d, sample, %{public}d, clients, %{public}lu", &v93, v83);
    sub_100512490("Generic", 1, 0, 2, "void CLWifiService::registerWsb(BOOL, BOOL)", "%s\n", v20);
    goto LABEL_176;
  }
LABEL_168:
  sub_10010E39C(v88);
  if (HIBYTE(v92))
  {
    if ((_BYTE)v92)
      pthread_mutex_unlock(v91);
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v90 + 24))(v90);
  }
}

void sub_1005B39F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_10010E39C(a11);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1005B3A74(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  id v6;
  _QWORD v7[6];
  os_activity_scope_state_s state;
  char v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  uint64_t v17;

  CLProfilingIdentify("CLWifiService::onWiFiManagerRestartCallback");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertOutside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021469B0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v9 = 1;
    v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiService::onWiFiManagerRestartCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021469B0);
    v5 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2082;
      v15 = "activity";
      v16 = 2050;
      v17 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiService::onWiFiManagerRestartCallback\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v9 = 0;
  }
  v6 = objc_msgSend(*(id *)(a2 + 32), "silo");
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1005C7E68;
  v7[3] = &unk_102143528;
  v7[4] = a2;
  v7[5] = a1;
  objc_msgSend(v6, "sync:", v7);
  if (v9)
    os_activity_scope_leave(&state);
}

void sub_1005B3C58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, os_activity_scope_state_s state, char a17)
{
  if (a17)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1005B3C78(uint64_t a1, char a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  id v8;
  _QWORD v9[6];
  char v10;
  os_activity_scope_state_s state;
  char v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;

  CLProfilingIdentify("CLWifiService::onWiFiManagerClientWowStateChangedCallback");
  objc_msgSend(objc_msgSend(*(id *)(a3 + 32), "silo"), "assertOutside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021469B0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v12 = 1;
    v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiService::onWiFiManagerClientWowStateChangedCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021469B0);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2082;
      v18 = "activity";
      v19 = 2050;
      v20 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiService::onWiFiManagerClientWowStateChangedCallback\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v12 = 0;
  }
  v8 = objc_msgSend(*(id *)(a3 + 32), "silo");
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1005C7E70;
  v9[3] = &unk_102143508;
  v9[4] = a3;
  v9[5] = a1;
  v10 = a2;
  objc_msgSend(v8, "sync:", v9);
  if (v12)
    os_activity_scope_leave(&state);
}

void sub_1005B3E64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, os_activity_scope_state_s state, char a17)
{
  if (a17)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

id sub_1005B3E84(const void *a1, const void *a2, uint64_t a3)
{
  void *v6;
  _QWORD v8[7];

  CFRetain(a1);
  CFRetain(a2);
  v6 = *(void **)(a3 + 40);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1005B8E20;
  v8[3] = &unk_102143548;
  v8[4] = a3;
  v8[5] = a1;
  v8[6] = a2;
  return objc_msgSend(v6, "async:", v8);
}

void sub_1005B3F04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  id v10;
  _QWORD v11[8];
  os_activity_scope_state_s state;
  char v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  uint64_t v21;

  CLProfilingIdentify("CLWifiService::onWiFiManagerBackgroundScanCallback");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertOutside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021469B0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v13 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiService::onWiFiManagerBackgroundScanCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021469B0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2082;
      v19 = "activity";
      v20 = 2050;
      v21 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiService::onWiFiManagerBackgroundScanCallback\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v13 = 0;
  }
  v10 = objc_msgSend(*(id *)(a4 + 32), "silo");
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1005C7E7C;
  v11[3] = &unk_1021461C0;
  v11[4] = a4;
  v11[5] = a1;
  v11[6] = a2;
  v11[7] = a3;
  objc_msgSend(v10, "sync:", v11);
  if (v13)
    os_activity_scope_leave(&state);
}

void sub_1005B40FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1005B411C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  id v6;
  _QWORD v7[6];
  os_activity_scope_state_s state;
  char v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  uint64_t v17;

  CLProfilingIdentify("CLWifiService::onWiFiDeviceClientPowerCallback");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertOutside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021469B0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v9 = 1;
    v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiService::onWiFiDeviceClientPowerCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021469B0);
    v5 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2082;
      v15 = "activity";
      v16 = 2050;
      v17 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiService::onWiFiDeviceClientPowerCallback\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v9 = 0;
  }
  v6 = objc_msgSend(*(id *)(a2 + 32), "silo");
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1005C7E8C;
  v7[3] = &unk_102143528;
  v7[4] = a2;
  v7[5] = a1;
  objc_msgSend(v6, "sync:", v7);
  if (v9)
    os_activity_scope_leave(&state);
}

void sub_1005B4300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, os_activity_scope_state_s state, char a17)
{
  if (a17)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1005B4320(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  id v6;
  _QWORD v7[6];
  os_activity_scope_state_s state;
  char v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  uint64_t v17;

  CLProfilingIdentify("CLWifiService::onWiFiDeviceClientResumeScanCallback");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertOutside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021469B0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v9 = 1;
    v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiService::onWiFiDeviceClientResumeScanCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021469B0);
    v5 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2082;
      v15 = "activity";
      v16 = 2050;
      v17 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiService::onWiFiDeviceClientResumeScanCallback\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v9 = 0;
  }
  v6 = objc_msgSend(*(id *)(a2 + 32), "silo");
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1005C7E94;
  v7[3] = &unk_102143528;
  v7[4] = a2;
  v7[5] = a1;
  objc_msgSend(v6, "sync:", v7);
  if (v9)
    os_activity_scope_leave(&state);
}

void sub_1005B4504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, os_activity_scope_state_s state, char a17)
{
  if (a17)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1005B4524(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  id v8;
  _QWORD v9[7];
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLWifiService::onWiFiDeviceClientLinkExtendedCallback");
  objc_msgSend(objc_msgSend(*(id *)(a3 + 32), "silo"), "assertOutside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021469B0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiService::onWiFiDeviceClientLinkExtendedCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021469B0);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiService::onWiFiDeviceClientLinkExtendedCallback\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  v8 = objc_msgSend(*(id *)(a3 + 32), "silo");
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1005C7E9C;
  v9[3] = &unk_102143548;
  v9[4] = a3;
  v9[5] = a1;
  v9[6] = a2;
  objc_msgSend(v8, "sync:", v9);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1005B4710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, os_activity_scope_state_s state, char a17)
{
  if (a17)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1005B4730(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  id v8;
  _QWORD v9[7];
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLWifiService::onWiFiDeviceClientBssidChangeCallback");
  objc_msgSend(objc_msgSend(*(id *)(a3 + 32), "silo"), "assertOutside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021469B0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiService::onWiFiDeviceClientBssidChangeCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021469B0);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiService::onWiFiDeviceClientBssidChangeCallback\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  v8 = objc_msgSend(*(id *)(a3 + 32), "silo");
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1005C7EAC;
  v9[3] = &unk_102143548;
  v9[4] = a3;
  v9[5] = a1;
  v9[6] = a2;
  objc_msgSend(v8, "sync:", v9);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1005B491C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, os_activity_scope_state_s state, char a17)
{
  if (a17)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1005B493C(uint64_t a1, char a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  id v8;
  _QWORD v9[6];
  char v10;
  os_activity_scope_state_s state;
  char v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;

  CLProfilingIdentify("CLWifiService::onWiFiDeviceClientBgScanSuspendResumeCallback");
  objc_msgSend(objc_msgSend(*(id *)(a3 + 32), "silo"), "assertOutside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021469B0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v12 = 1;
    v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiService::onWiFiDeviceClientBgScanSuspendResumeCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021469B0);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2082;
      v18 = "activity";
      v19 = 2050;
      v20 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiService::onWiFiDeviceClientBgScanSuspendResumeCallback\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v12 = 0;
  }
  v8 = objc_msgSend(*(id *)(a3 + 32), "silo");
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1005C7EBC;
  v9[3] = &unk_102143508;
  v9[4] = a3;
  v9[5] = a1;
  v10 = a2;
  objc_msgSend(v8, "sync:", v9);
  if (v12)
    os_activity_scope_leave(&state);
}

void sub_1005B4B28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, os_activity_scope_state_s state, char a17)
{
  if (a17)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1005B4B48(uint64_t a1, char a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  id v8;
  _QWORD v9[6];
  char v10;
  os_activity_scope_state_s state;
  char v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;

  CLProfilingIdentify("CLWifiService::onWiFiDeviceClient24GHzNetworkInCriticalStateCallback");
  objc_msgSend(objc_msgSend(*(id *)(a3 + 32), "silo"), "assertOutside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021469B0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v12 = 1;
    v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiService::onWiFiDeviceClient24GHzNetworkInCriticalStateCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021469B0);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2082;
      v18 = "activity";
      v19 = 2050;
      v20 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiService::onWiFiDeviceClient24GHzNetworkInCriticalStateCallback\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v12 = 0;
  }
  v8 = objc_msgSend(*(id *)(a3 + 32), "silo");
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1005C7ECC;
  v9[3] = &unk_102143508;
  v9[4] = a3;
  v9[5] = a1;
  v10 = a2;
  objc_msgSend(v8, "sync:", v9);
  if (v12)
    os_activity_scope_leave(&state);
}

void sub_1005B4D34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, os_activity_scope_state_s state, char a17)
{
  if (a17)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

BOOL sub_1005B4D54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  uint64_t v11;
  const void *v12;
  const void *Property;
  BOOL v14;
  NSObject *v15;
  _BOOL4 v16;
  _BOOL4 v17;
  NSObject *v18;
  const char *v19;
  uint8_t *v20;
  NSObject *v21;
  const char *v22;
  NSObject *v23;
  std::string *v24;
  int v25;
  int v26;
  int v27;
  _BOOL4 v29;
  _BOOL4 v30;
  const char *v31;
  uint8_t *v32;
  uint64_t v33;
  std::string *v34;
  int v35;
  int v36;
  int v37;
  char *v38;
  char *v39;
  uint64_t v40;
  std::string::size_type v41;
  std::string v42;
  uint64_t v43;
  __int16 v44;
  std::string __p;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  uint8_t buf[4];
  _BOOL4 v51;
  __int16 v52;
  std::string *v53;
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  int v59;

  v4 = a1 + 824;
  v43 = a1 + 824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 824) + 16))(a1 + 824);
  v44 = 256;
  *(_QWORD *)a2 = qword_1023114A0;
  std::string::operator=((std::string *)(a2 + 8), (const std::string *)byte_1023114A8);
  v5 = xmmword_1023114C0;
  v6 = xmmword_1023114D0;
  v7 = xmmword_1023114E0;
  *(_QWORD *)(a2 + 80) = qword_1023114F0;
  *(_OWORD *)(a2 + 48) = v6;
  *(_OWORD *)(a2 + 64) = v7;
  *(_OWORD *)(a2 + 32) = v5;
  sub_10031F180(a1 + 544, (uint64_t)&byte_102311440);
  if (*(_QWORD *)(a1 + 312))
  {
    v9 = *(_QWORD *)(a1 + 320);
    if (v9)
    {
      v10 = sub_1000AAB5C(v8, v9, a2, 0);
      if (v10)
      {
        sub_1005C7EDC(a1 + 544, a2);
        *(_QWORD *)(a1 + 592) = 0;
        v11 = WiFiDeviceClientCopyCurrentNetwork(*(_QWORD *)(a1 + 312));
        v12 = (const void *)v11;
        if (v11)
        {
          Property = (const void *)WiFiNetworkGetProperty(v11, kWiFiNetworkAttributeIsMoving);
          if (Property)
            v14 = CFEqual(Property, kCFBooleanTrue) != 0;
          else
            v14 = 1;
          *(_BYTE *)(a1 + 609) = v14;
          CFRelease(v12);
LABEL_33:
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_1021469D0);
          v23 = qword_1022A0048;
          if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
          {
            v42.__r_.__value_.__r.__words[0] = *(_QWORD *)a2;
            sub_1000C2150(&v42, &__p);
            v24 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &__p
                : (std::string *)__p.__r_.__value_.__r.__words[0];
            v25 = *(_DWORD *)(a2 + 40);
            v26 = *(_DWORD *)(a2 + 32);
            v27 = *(unsigned __int8 *)(a2 + 65);
            *(_DWORD *)buf = 67241219;
            v51 = v10;
            v52 = 2081;
            v53 = v24;
            v54 = 1026;
            v55 = v25;
            v56 = 1026;
            v57 = v26;
            v58 = 1026;
            v59 = v27;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "WifiMgr, queryAssoc, %{public}d, mac, %{private}s, channel, %{public}d, rssi, %{public}d, isMoving, %{public}d", buf, 0x24u);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0040 != -1)
              dispatch_once(&qword_1022A0040, &stru_1021469D0);
            v33 = qword_1022A0048;
            v41 = *(_QWORD *)a2;
            sub_1000C2150(&v41, &v42);
            if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v34 = &v42;
            else
              v34 = (std::string *)v42.__r_.__value_.__r.__words[0];
            v35 = *(_DWORD *)(a2 + 40);
            v36 = *(_DWORD *)(a2 + 32);
            v37 = *(unsigned __int8 *)(a2 + 65);
            LODWORD(__p.__r_.__value_.__l.__data_) = 67241219;
            HIDWORD(__p.__r_.__value_.__r.__words[0]) = v10;
            LOWORD(__p.__r_.__value_.__r.__words[1]) = 2081;
            *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v34;
            WORD1(__p.__r_.__value_.__r.__words[2]) = 1026;
            HIDWORD(__p.__r_.__value_.__r.__words[2]) = v35;
            v46 = 1026;
            v47 = v36;
            v48 = 1026;
            v49 = v37;
            LODWORD(v40) = 36;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v33, 1, "WifiMgr, queryAssoc, %{public}d, mac, %{private}s, channel, %{public}d, rssi, %{public}d, isMoving, %{public}d", &__p, v40);
            v39 = v38;
            if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v42.__r_.__value_.__l.__data_);
            sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiService::queryAssociatedNetwork(CLWifiService_Type::AccessPoint &)", "%s\n", v39);
            if (v39 != (char *)buf)
              free(v39);
          }
          goto LABEL_42;
        }
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021469D0);
        v21 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "WifiMgr, queryAssoc, Unable to copy current network", buf, 2u);
        }
        if (!sub_1001BFF7C(115, 0))
          goto LABEL_33;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021469D0);
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "WifiMgr, queryAssoc, Unable to copy current network", &__p, 2);
        v20 = (uint8_t *)v22;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLWifiService::queryAssociatedNetwork(CLWifiService_Type::AccessPoint &)", "%s\n", v22);
      }
      else
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021469D0);
        v18 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67240192;
          v51 = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "WifiMgr, queryAssoc, fail, ap, %{public}d", buf, 8u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_33;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021469D0);
        __p.__r_.__value_.__r.__words[0] = 67240192;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "WifiMgr, queryAssoc, fail, ap, %{public}d", &__p, 8);
        v20 = (uint8_t *)v19;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiService::queryAssociatedNetwork(CLWifiService_Type::AccessPoint &)", "%s\n", v19);
      }
      if (v20 != buf)
        free(v20);
      goto LABEL_33;
    }
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021469D0);
  v15 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v16 = *(_QWORD *)(a1 + 312) == 0;
    v17 = *(_QWORD *)(a1 + 320) == 0;
    *(_DWORD *)buf = 67240448;
    v51 = v16;
    v52 = 1026;
    LODWORD(v53) = v17;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "WifiMgr, queryAssoc, fail, device, %{public}d, network, %{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v29 = *(_QWORD *)(a1 + 312) == 0;
    v30 = *(_QWORD *)(a1 + 320) == 0;
    LODWORD(__p.__r_.__value_.__l.__data_) = 67240448;
    HIDWORD(__p.__r_.__value_.__r.__words[0]) = v29;
    LOWORD(__p.__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = v30;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "WifiMgr, queryAssoc, fail, device, %{public}d, network, %{public}d", &__p, 14);
    v32 = (uint8_t *)v31;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiService::queryAssociatedNetwork(CLWifiService_Type::AccessPoint &)", "%s\n", v31);
    if (v32 != buf)
      free(v32);
  }
  v10 = 0;
LABEL_42:
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  return v10;
}

void sub_1005B54D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005B5518(_QWORD *a1)
{
  _QWORD *v2;
  NSObject *v3;
  NSObject *v4;
  int WoWState;
  NSObject *v6;
  const char *v8;
  uint8_t *v9;
  const void *v10;
  os_activity_scope_state_s state;
  _QWORD *v12;
  __int16 v13;
  void **v14;
  __int16 v15;
  _QWORD *v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  _BYTE __p[18];
  char v21;
  char v22;
  _BYTE v23[32];
  uint64_t v24;

  v2 = a1 + 103;
  v12 = a1 + 103;
  (*(void (**)(_QWORD *))(a1[103] + 16))(a1 + 103);
  v13 = 256;
  v3 = _os_activity_create((void *)&_mh_execute_header, "CL: onWiFiManagerClientWowStateChangedCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v3, &state);

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021469D0);
  v4 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289282;
    v18 = 0;
    v19 = 2082;
    *(_QWORD *)__p = "";
    *(_WORD *)&__p[8] = 2082;
    *(_QWORD *)&__p[10] = "activity";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"onWiFiManagerClientWowStateChangedCallback\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  WoWState = WiFiManagerClientGetWoWState(a1[38]);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102146A30);
  v6 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109376;
    v18 = WoWState;
    v19 = 2048;
    *(_QWORD *)__p = a1;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Got onWiFiManagerClientWowStateChangedCallback callback, isEnabled, %d, refcon, %p", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146A30);
    LODWORD(v14) = 67109376;
    HIDWORD(v14) = WoWState;
    v15 = 2048;
    v16 = a1;
    LODWORD(v10) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Got onWiFiManagerClientWowStateChangedCallback callback, isEnabled, %d, refcon, %p", &v14, v10);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiService::onWiFiManagerClientWowStateChangedCallback(WiFiManagerClientRef, Boolean)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  *(_WORD *)buf = -256;
  LOBYTE(v19) = 0;
  v22 = 0;
  v24 = 0;
  memset(v23, 0, sizeof(v23));
  *(_DWORD *)((char *)&v24 + 1) = WoWState != 0;
  LODWORD(v14) = 11;
  (*(void (**)(_QWORD *, void ***, uint8_t *, uint64_t, uint64_t, _QWORD))(*a1 + 152))(a1, &v14, buf, 1, 0xFFFFFFFFLL, 0);
  v14 = (void **)&v23[8];
  sub_100279AA4(&v14);
  if (v22 && v21 < 0)
    operator delete(*(void **)&__p[6]);
  os_activity_scope_leave(&state);
  return (*(uint64_t (**)(_QWORD *))(*v2 + 24))(v2);
}

void sub_1005B5874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, os_activity_scope_state_s state, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  os_activity_scope_leave(&state);
  sub_10187E514((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_1005B58B4(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  int *v4[3];
  char v5;
  char v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;

  v2 = a1 + 824;
  v16 = a1 + 824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 824) + 16))(a1 + 824);
  v17 = 256;
  v9 = qword_1023114A0;
  if (byte_1023114A8[23] < 0)
  {
    sub_100115CE4(&v10, *(void **)byte_1023114A8, *(unint64_t *)&byte_1023114A8[8]);
  }
  else
  {
    v10 = *(_OWORD *)byte_1023114A8;
    v11 = *(_QWORD *)&byte_1023114A8[16];
  }
  v12 = xmmword_1023114C0;
  v13 = xmmword_1023114D0;
  v14 = xmmword_1023114E0;
  v15 = qword_1023114F0;
  sub_1005B4D54(a1, (uint64_t)&v9);
  v3 = *(const void **)(a1 + 224);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 224) = 0;
  }
  if (sub_1000A8160(a1, &v9))
  {
    if (DWORD2(v12) == -1)
    {
      sub_101900ABC();
      abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/WifiService/CLWifiService.mm", 2486, "createScanOptionsChannel");
      __break(1u);
      return;
    }
    v8 = DWORD2(v12);
    v4[0] = &v8;
    v7 = &v9;
    *(_QWORD *)(a1 + 224) = sub_1005C2030(a1, 1, 1, 14, v4, (int **)&v7, 110, 0, 0);
    sub_1005C7EDC(a1 + 544, (uint64_t)&v9);
  }
  else
  {
    sub_1005C7F88((uint64_t)v4, (uint64_t)&qword_1023114A0);
    sub_1005C7FFC(a1 + 544, (uint64_t)v4);
    if (v6 && v5 < 0)
      operator delete(v4[1]);
  }
  if (SHIBYTE(v11) < 0)
    operator delete((void *)v10);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

void sub_1005B5A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  sub_10187E514(v33 - 56);
  _Unwind_Resume(a1);
}

uint64_t sub_1005B5AA0(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  NSObject *v5;
  int v6;
  int v7;
  int v8;
  NSObject *v9;
  const char *v10;
  int v12;
  int v13;
  const char *v14;
  uint8_t *v15;
  const char *v16;
  const char *v17;
  uint8_t *v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  __int16 v22;
  _BYTE v23[14];
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  uint8_t buf[4];
  _BYTE v29[10];
  __int16 v30;
  void *__p[2];
  char v32;
  char v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v2 = a1 + 824;
  v21 = a1 + 824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 824) + 16))(a1 + 824);
  v22 = 256;
  v3 = byte_102301D50;
  if ((byte_102301D50 & 1) == 0)
  {
    sub_100197040();
    byte_102301D51 = (sub_1001B796C() & 0x8000) != 0;
    byte_102301D50 = 1;
  }
  v20 = 0;
  sub_1005B9880(a1, &v20);
  v4 = *(unsigned __int8 *)(a1 + 376);
  *(_BYTE *)(a1 + 376) = byte_102301D51;
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102146A30);
  v5 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v6 = *(unsigned __int8 *)(a1 + 376);
    v7 = *(unsigned __int8 *)(a1 + 536);
    *(_DWORD *)buf = 67109888;
    *(_DWORD *)v29 = v6;
    *(_WORD *)&v29[4] = 1024;
    *(_DWORD *)&v29[6] = v4;
    v30 = 1024;
    LODWORD(__p[0]) = byte_102301D51;
    WORD2(__p[0]) = 1024;
    *(_DWORD *)((char *)__p + 6) = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "WiFi tracking available now %d (was %d) (%d %d)", buf, 0x1Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146A30);
    v12 = *(unsigned __int8 *)(a1 + 376);
    v13 = *(unsigned __int8 *)(a1 + 536);
    *(_DWORD *)v23 = 67109888;
    *(_DWORD *)&v23[4] = v12;
    *(_WORD *)&v23[8] = 1024;
    *(_DWORD *)&v23[10] = v4;
    v24 = 1024;
    v25 = byte_102301D51;
    v26 = 1024;
    v27 = v13;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "WiFi tracking available now %d (was %d) (%d %d)", v23, 26, v19, v21);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiService::processTrackingAndPower()", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  if (v3)
  {
    v8 = *(unsigned __int8 *)(a1 + 376);
    if (v4 != v8)
    {
      *(_WORD *)buf = -256;
      v29[4] = 0;
      v33 = 0;
      v36 = 0;
      v34 = 0u;
      v35 = 0u;
      BYTE1(v36) = v8;
      *(_DWORD *)v23 = 10;
      (*(void (**)(uint64_t, _BYTE *, uint8_t *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, v23, buf, 0, 0xFFFFFFFFLL, 0);
      *(_QWORD *)v23 = (char *)&v34 + 8;
      sub_100279AA4((void ***)v23);
      if (v33)
      {
        if (v32 < 0)
          operator delete(__p[0]);
      }
    }
  }
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021469F0);
  v9 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(a1 + 536))
      v10 = "On";
    else
      v10 = "Off";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)v29 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "WifiNotify, Power, %s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021469F0);
    if (*(_BYTE *)(a1 + 536))
      v16 = "On";
    else
      v16 = "Off";
    *(_DWORD *)v23 = 136315138;
    *(_QWORD *)&v23[4] = v16;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "WifiNotify, Power, %s", v23);
    v18 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiService::processTrackingAndPower()", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
  buf[1] = -1;
  v29[4] = 0;
  v33 = 0;
  v34 = 0u;
  v35 = 0u;
  v36 = 0;
  buf[0] = *(_BYTE *)(a1 + 536);
  *(_DWORD *)v23 = 1;
  (*(void (**)(uint64_t, _BYTE *, uint8_t *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, v23, buf, 1, 0xFFFFFFFFLL, 0);
  *(_QWORD *)v23 = (char *)&v34 + 8;
  sub_100279AA4((void ***)v23);
  if (v33 && v32 < 0)
    operator delete(__p[0]);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

void sub_1005B5FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005B5FEC(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 112);
  sub_100279AA4(&v3);
  if (*(_BYTE *)(a1 + 96) && *(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_1005B603C(uint64_t a1)
{
  uint64_t v2;
  void **v4;

  *(_QWORD *)a1 = off_1021466A8;
  sub_1005B6120(a1);
  v2 = *(_QWORD *)(a1 + 840);
  *(_QWORD *)(a1 + 840) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_10055D4D0(a1 + 824);
  sub_100008848(a1 + 696, *(_QWORD **)(a1 + 704));
  if (*(_BYTE *)(a1 + 632) && *(char *)(a1 + 575) < 0)
    operator delete(*(void **)(a1 + 552));
  v4 = (void **)(a1 + 496);
  sub_100279AA4(&v4);
  v4 = (void **)(a1 + 464);
  sub_100279AA4(&v4);
  v4 = (void **)(a1 + 432);
  sub_100279AA4(&v4);
  sub_1005C81E4((_QWORD *)(a1 + 328));
  return sub_10103ADEC((_QWORD *)a1);
}

void sub_1005B60FC(uint64_t a1)
{
  sub_1005B603C(a1);
  operator delete();
}

uint64_t sub_1005B6120(uint64_t a1)
{
  uint64_t v2;
  __CFRunLoopSource *v3;
  const void *v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  NSObject *v26;

  v2 = a1 + 824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 824) + 16))(a1 + 824);
  *(_BYTE *)(a1 + 108) = 1;
  v3 = *(__CFRunLoopSource **)(a1 + 296);
  if (v3)
  {
    CFRunLoopSourceInvalidate(v3);
    v4 = *(const void **)(a1 + 296);
    *(_QWORD *)(a1 + 296) = 0;
    CFRelease(v4);
  }
  v5 = *(const void **)(a1 + 320);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a1 + 320) = 0;
  }
  v6 = *(_QWORD *)(a1 + 312);
  if (v6)
  {
    WiFiDeviceClientSetRangeable(v6, 0, 0);
    WiFiDeviceClientRegisterRangingReportCallback(*(_QWORD *)(a1 + 312), 0, 0);
    CFRelease(*(CFTypeRef *)(a1 + 312));
    *(_QWORD *)(a1 + 312) = 0;
  }
  v7 = *(_QWORD *)(a1 + 304);
  if (v7)
  {
    v8 = sub_100193530();
    WiFiManagerClientUnscheduleFromRunLoop(v7, v8, kCFRunLoopCommonModes);
    CFRelease(*(CFTypeRef *)(a1 + 304));
    *(_QWORD *)(a1 + 304) = 0;
  }

  *(_QWORD *)(a1 + 656) = 0;
  *(_QWORD *)(a1 + 664) = 0;

  *(_QWORD *)(a1 + 672) = 0;
  v9 = *(const void **)(a1 + 520);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(a1 + 520) = 0;
  }
  v10 = *(const void **)(a1 + 528);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(a1 + 528) = 0;
  }
  v11 = *(const void **)(a1 + 112);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(a1 + 112) = 0;
  }
  v12 = *(const void **)(a1 + 120);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(a1 + 120) = 0;
  }
  v13 = *(const void **)(a1 + 128);
  if (v13)
  {
    CFRelease(v13);
    *(_QWORD *)(a1 + 128) = 0;
  }
  v14 = *(const void **)(a1 + 176);
  if (v14)
  {
    CFRelease(v14);
    *(_QWORD *)(a1 + 176) = 0;
  }
  v15 = *(const void **)(a1 + 184);
  if (v15)
  {
    CFRelease(v15);
    *(_QWORD *)(a1 + 184) = 0;
  }
  v16 = *(const void **)(a1 + 192);
  if (v16)
  {
    CFRelease(v16);
    *(_QWORD *)(a1 + 192) = 0;
  }
  v17 = *(const void **)(a1 + 200);
  if (v17)
  {
    CFRelease(v17);
    *(_QWORD *)(a1 + 200) = 0;
  }
  v18 = *(const void **)(a1 + 208);
  if (v18)
  {
    CFRelease(v18);
    *(_QWORD *)(a1 + 208) = 0;
  }
  v19 = *(const void **)(a1 + 216);
  if (v19)
  {
    CFRelease(v19);
    *(_QWORD *)(a1 + 216) = 0;
  }
  v20 = *(const void **)(a1 + 224);
  if (v20)
  {
    CFRelease(v20);
    *(_QWORD *)(a1 + 224) = 0;
  }
  v21 = *(const void **)(a1 + 136);
  if (v21)
  {
    CFRelease(v21);
    *(_QWORD *)(a1 + 136) = 0;
  }
  v22 = *(const void **)(a1 + 144);
  if (v22)
  {
    CFRelease(v22);
    *(_QWORD *)(a1 + 144) = 0;
  }
  v23 = *(const void **)(a1 + 152);
  if (v23)
  {
    CFRelease(v23);
    *(_QWORD *)(a1 + 152) = 0;
  }
  v24 = *(const void **)(a1 + 160);
  if (v24)
  {
    CFRelease(v24);
    *(_QWORD *)(a1 + 160) = 0;
  }
  v25 = *(const void **)(a1 + 168);
  if (v25)
  {
    CFRelease(v25);
    *(_QWORD *)(a1 + 168) = 0;
  }
  v26 = *(NSObject **)(a1 + 736);
  if (v26)
  {
    dispatch_release(v26);
    *(_QWORD *)(a1 + 736) = 0;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

void sub_1005B6350(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1005B636C(int a1)
{
  return (a1 - 1) < 0xFFFFFF7F;
}

uint64_t sub_1005B637C(uint64_t a1)
{
  uint64_t v2;
  __CFDictionary *Mutable;
  id v4;
  NSNumber *v5;
  id v6;
  NSObject *v7;
  char *v8;
  NSObject *v9;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  uint8_t buf[1640];

  v2 = a1 + 824;
  v12 = a1 + 824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 824) + 16))(a1 + 824);
  v13 = 256;
  if (*(_QWORD *)(a1 + 304) && *(_QWORD *)(a1 + 312))
  {
    Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    CFDictionaryAddValue(Mutable, CFSTR("BGSCAN_CACHE"), kCFBooleanFalse);
    CFDictionaryAddValue(Mutable, CFSTR("BGSCAN_CACHE_WSB_ROLLOVER"), kCFBooleanFalse);
    v4 = +[NSMutableArray array](NSMutableArray, "array");
    v5 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", 1);
    v6 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
    objc_msgSend(v6, "setObject:forKey:", v5, CFSTR("CHANNEL"));
    objc_msgSend(v4, "addObject:", v6);
    CFDictionarySetValue(Mutable, CFSTR("SCAN_CHANNELS"), v4);
    WiFiManagerClientSetBGScanCacheState(*(_QWORD *)(a1 + 304), Mutable);
    CFRelease(Mutable);
    *(_QWORD *)(a1 + 236) = 0xE1000000000;
    *(_WORD *)(a1 + 244) = 0;
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021469F0);
    v7 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "@WsbReg, disabled", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021469F0);
      v11 = 0;
      v8 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@WsbReg, disabled", &v11, 2);
      sub_100512490("Generic", 1, 0, 2, "void CLWifiService::turnOffWsb()", "%s\n", v8);
LABEL_20:
      if (v8 != (char *)buf)
        free(v8);
    }
  }
  else
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021469F0);
    v9 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "@Wsb, No wifi interface available, WARNING", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021469F0);
      v11 = 0;
      v8 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "@Wsb, No wifi interface available, WARNING", &v11, 2);
      sub_100512490("Generic", 1, 0, 2, "void CLWifiService::turnOffWsb()", "%s\n", v8);
      goto LABEL_20;
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

void sub_1005B674C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005B6788(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  char *v5;
  __int16 v6;
  uint64_t v7;
  __int16 v8;
  uint8_t buf[1640];

  v2 = a1 + 824;
  v7 = a1 + 824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 824) + 16))(a1 + 824);
  v8 = 256;
  if (*(_QWORD *)(a1 + 304) && *(_QWORD *)(a1 + 312))
  {
    if (*(_DWORD *)(a1 + 236) != 2 || *(int *)(a1 + 284) <= 0)
    {
      WiFiManagerClientRegisterBackgroundScanCacheCallback();
      sub_1005B69C4(a1, 0, 1);
      *(_DWORD *)(a1 + 236) = 2;
    }
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v3 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "@WsbWarn, No wifi interface available, #CloneMe", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      v6 = 0;
      v5 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@WsbWarn, No wifi interface available, #CloneMe", &v6, 2);
      sub_100512490("Generic", 1, 0, 2, "void CLWifiService::turnOnWsb()", "%s\n", v5);
      if (v5 != (char *)buf)
        free(v5);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

void sub_1005B699C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1005B69C4(uint64_t a1, int a2, int a3)
{
  CFIndex v4;
  __CFArray *Mutable;
  int v6;
  int v7;
  __CFDictionary *v8;
  CFNumberRef v9;
  CFNumberRef v10;
  BOOL v11;
  NSObject *v12;
  char *v13;
  CFBooleanRef v15;
  NSObject *v16;
  char *v17;
  uint64_t v18;
  __CFDictionary *theDict;
  int valuePtr;
  int v23;
  int v24;
  __int16 v25;
  __CFDictionary *v26;
  __int16 v27;
  CFNumberRef v28;
  uint8_t buf[4];
  int v30;
  __int16 v31;
  __CFDictionary *v32;
  __int16 v33;
  CFNumberRef v34;

  theDict = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFDictionaryAddValue(theDict, CFSTR("BGSCAN_CACHE"), kCFBooleanTrue);
  if (a3)
    v4 = 3;
  else
    v4 = 13;
  Mutable = CFArrayCreateMutable(0, v4, &kCFTypeArrayCallBacks);
  v6 = 0;
  valuePtr = 1;
  v7 = 1;
  do
  {
    if (!a3 || v7 <= 0xB && ((1 << v7) & 0x842) != 0)
    {
      v8 = CFDictionaryCreateMutable(kCFAllocatorDefault, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      v9 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      v10 = v9;
      if (v8)
        v11 = v9 == 0;
      else
        v11 = 1;
      if (v11)
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021469D0);
        v12 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67240704;
          v30 = valuePtr;
          v31 = 2050;
          v32 = v8;
          v33 = 2050;
          v34 = v10;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "@WsbWarn, channel fail, %{public}d channelDict, %{public}p, channelNumber, %{public}p, #CloneMe", buf, 0x1Cu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_1021469D0);
          v23 = 67240704;
          v24 = valuePtr;
          v25 = 2050;
          v26 = v8;
          v27 = 2050;
          v28 = v10;
          LODWORD(v18) = 28;
          v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@WsbWarn, channel fail, %{public}d channelDict, %{public}p, channelNumber, %{public}p, #CloneMe", &v23, v18);
          sub_100512490("Generic", 1, 0, 2, "void CLWifiService::enableDefaultWsbProfile(BOOL, BOOL)", "%s\n", v13);
          if (v13 != (char *)buf)
            free(v13);
        }
      }
      else
      {
        CFDictionaryAddValue(v8, CFSTR("CHANNEL"), v9);
        CFArrayAppendValue(Mutable, v8);
      }
      CFRelease(v8);
      CFRelease(v10);
      ++v6;
      v7 = valuePtr;
    }
    valuePtr = v7 + 1;
  }
  while (v7++ < 13);
  CFDictionarySetValue(theDict, CFSTR("SCAN_CHANNELS"), Mutable);
  if (a2)
    v15 = kCFBooleanTrue;
  else
    v15 = kCFBooleanFalse;
  CFDictionaryAddValue(theDict, CFSTR("BGSCAN_CACHE_WSB_ROLLOVER"), v15);
  WiFiManagerClientSetBGScanCacheState(*(_QWORD *)(a1 + 304), theDict);
  CFRelease(Mutable);
  CFRelease(theDict);
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021469F0);
  v16 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67240192;
    v30 = v6;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "@WsbReg, enable, chs, %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021469F0);
    v23 = 67240192;
    v24 = v6;
    LODWORD(v18) = 8;
    v17 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "@WsbReg, enable, chs, %{public}d", &v23, v18);
    sub_100512490("Generic", 1, 0, 2, "void CLWifiService::enableDefaultWsbProfile(BOOL, BOOL)", "%s\n", v17);
    if (v17 != (char *)buf)
      free(v17);
  }
}

void sub_1005B6E9C(uint64_t a1, int a2)
{
  std::string *p_dst;
  uint64_t *v3;
  NSObject *v6;
  std::string::size_type v7;
  int v8;
  double Current;
  double v10;
  const char *v11;
  int v12;
  const char *v13;
  NSObject *v14;
  int v15;
  NSObject *v16;
  std::string *v17;
  int v18;
  std::string::size_type v19;
  std::string *v20;
  std::string *p_p;
  NSObject *v22;
  int data;
  int v24;
  std::string::size_type v25;
  std::string::size_type v26;
  unsigned __int128 v27;
  char v28;
  char v29;
  int v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  __int128 v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  int v40;
  std::string::size_type v41;
  std::string::size_type v42;
  char v43;
  char v44;
  int v45;
  std::string::size_type v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  std::string::size_type v52;
  std::string::size_type v53;
  char v54;
  char v55;
  int v56;
  std::string::size_type v57;
  uint64_t v58;
  std::string::size_type v59;
  int v60;
  std::string *v61;
  std::string *v62;
  uint64_t v63;
  std::string *v64;
  int v65;
  std::string::size_type v66;
  std::string *v67;
  std::string *v68;
  std::string *v69;
  std::string *v70;
  uint64_t v71;
  int v72;
  int v73;
  char v74;
  char v75;
  int v76;
  std::string v77;
  std::string __p;
  std::string v79;
  uint64_t v80[3];
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  _QWORD v84[6];
  std::string __dst;
  std::string *v86;
  std::string buf;
  std::string *v88;

  if (!sub_1000CDFB0(a1 + 824))
  {
    sub_101900C1C();
    __break(1u);
    goto LABEL_76;
  }
  p_dst = &__dst;
  if (*(_QWORD *)(a1 + 248) || *(unsigned __int8 *)(a1 + 246) == a2)
  {
    v3 = &qword_1022A0000;
    if (qword_1022A0050 == -1)
    {
LABEL_5:
      v6 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
      {
        v7 = *(_QWORD *)(a1 + 248);
        v8 = *(unsigned __int8 *)(a1 + 246);
        LODWORD(buf.__r_.__value_.__l.__data_) = 134349568;
        *(std::string::size_type *)((char *)&p_dst[1].__r_.__value_.__r.__words[1] + 4) = v7;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 1026;
        *(_DWORD *)((char *)&p_dst[1].__r_.__value_.__r.__words[2] + 6) = a2;
        WORD1(buf.__r_.__value_.__r.__words[2]) = 1026;
        HIDWORD(buf.__r_.__value_.__r.__words[2]) = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "@WsbActive, Skip, networks, %{public}lu, turnOn, %{public}d, isSampleScan, %{public}d", (uint8_t *)&buf, 0x18u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (v3[10] != -1)
          dispatch_once(&qword_1022A0050, &stru_1021469F0);
        v58 = qword_1022A0058;
        v59 = *(_QWORD *)(a1 + 248);
        v60 = *(unsigned __int8 *)(a1 + 246);
        LODWORD(__dst.__r_.__value_.__l.__data_) = 134349568;
        *(std::string::size_type *)((char *)p_dst->__r_.__value_.__r.__words + 4) = v59;
        WORD2(__dst.__r_.__value_.__r.__words[1]) = 1026;
        *(_DWORD *)((char *)&p_dst->__r_.__value_.__r.__words[1] + 6) = a2;
        WORD1(__dst.__r_.__value_.__r.__words[2]) = 1026;
        HIDWORD(__dst.__r_.__value_.__r.__words[2]) = v60;
        v61 = (std::string *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v58, 1, "@WsbActive, Skip, networks, %{public}lu, turnOn, %{public}d, isSampleScan, %{public}d", &__dst, 24);
        sub_100512490("Generic", 1, 0, 2, "void CLWifiService::programSampleNetworks(BOOL)", "%s\n", (const char *)v61);
        if (v61 != &buf)
          free(v61);
      }
      return;
    }
LABEL_76:
    dispatch_once(&qword_1022A0050, &stru_1021469F0);
    goto LABEL_5;
  }
  *(_BYTE *)(a1 + 246) = a2;
  if (*(double *)(a1 + 680) != 0.0 && *(_QWORD *)(a1 + 712))
  {
    Current = CFAbsoluteTimeGetCurrent();
    v10 = (Current - *(double *)(a1 + 688)) / 60.0;
    if (v10 >= 1.0)
    {
      v11 = "active:off";
      v12 = *(_DWORD *)(a1 + 720);
      if (v12 == 1)
        v11 = "active:fences";
      if (v12 == 2)
        v13 = "active:fake";
      else
        v13 = v11;
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021469F0);
      v14 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v13;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
        *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v10;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "WsbMetric, regmode, %{public}s, duration, %{public}.1f", (uint8_t *)&buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021469F0);
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136446466;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v13;
        WORD2(__dst.__r_.__value_.__r.__words[1]) = 2050;
        *(double *)((char *)&__dst.__r_.__value_.__r.__words[1] + 6) = v10;
        v70 = (std::string *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "WsbMetric, regmode, %{public}s, duration, %{public}.1f", &__dst, 22);
        sub_100512490("Generic", 1, 0, 2, "void CLWifiService::programSampleNetworks(BOOL)", "%s\n", (const char *)v70);
        if (v70 != &buf)
          free(v70);
      }
      v84[0] = _NSConcreteStackBlock;
      v84[1] = 3221225472;
      v84[2] = sub_1005B7B64;
      v84[3] = &unk_102139B90;
      v84[4] = v13;
      *(double *)&v84[5] = v10;
      AnalyticsSendEventLazy(CFSTR("com.apple.clx.wsb.regmode"), v84);
    }
    if (a2)
      v15 = 2;
    else
      v15 = 1;
    *(_DWORD *)(a1 + 720) = v15;
    *(double *)(a1 + 688) = Current;
  }
  if (a2)
  {
    v81 = 0;
    v82 = 0;
    v83 = 0;
    memset(v80, 0, sizeof(v80));
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021469F0);
    v16 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
    {
      v17 = &__dst;
      sub_1000C2150((_QWORD *)(a1 + 256), &__dst);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v17 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      sub_1000C2150((_QWORD *)(a1 + 264), &v79);
      v18 = SHIBYTE(v79.__r_.__value_.__r.__words[2]);
      v19 = v79.__r_.__value_.__r.__words[0];
      sub_1000C2150((_QWORD *)(a1 + 272), &__p);
      v20 = &v79;
      if (v18 < 0)
        v20 = (std::string *)v19;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136381187;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v17;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2081;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v20;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2081;
      v88 = p_p;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "@WsbActive, Create, %{private}s, %{private}s, %{private}s", (uint8_t *)&buf, 0x20u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v79.__r_.__value_.__l.__data_);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021469F0);
      v63 = qword_1022A0058;
      v64 = &v79;
      sub_1000C2150((_QWORD *)(a1 + 256), &v79);
      if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v64 = (std::string *)v79.__r_.__value_.__r.__words[0];
      sub_1000C2150((_QWORD *)(a1 + 264), &__p);
      v65 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      v66 = __p.__r_.__value_.__r.__words[0];
      sub_1000C2150((_QWORD *)(a1 + 272), &v77);
      v67 = &__p;
      if (v65 < 0)
        v67 = (std::string *)v66;
      if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v68 = &v77;
      else
        v68 = (std::string *)v77.__r_.__value_.__r.__words[0];
      LODWORD(__dst.__r_.__value_.__l.__data_) = 136381187;
      *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v64;
      WORD2(__dst.__r_.__value_.__r.__words[1]) = 2081;
      *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v67;
      HIWORD(__dst.__r_.__value_.__r.__words[2]) = 2081;
      v86 = v68;
      LODWORD(v71) = 32;
      v69 = (std::string *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v63, 1, "@WsbActive, Create, %{private}s, %{private}s, %{private}s", &__dst, v71);
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v77.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v79.__r_.__value_.__l.__data_);
      sub_100512490("Generic", 1, 0, 2, "void CLWifiService::programSampleNetworks(BOOL)", "%s\n", (const char *)v69);
      if (v69 != &buf)
        free(v69);
    }
    if (byte_1023114A8[23] < 0)
      sub_100115CE4(&__dst, *(void **)byte_1023114A8, *(unint64_t *)&byte_1023114A8[8]);
    else
      __dst = *(std::string *)byte_1023114A8;
    data = xmmword_1023114C0;
    v24 = DWORD1(xmmword_1023114C0);
    v76 = DWORD1(xmmword_1023114C0);
    LODWORD(v77.__r_.__value_.__l.__data_) = xmmword_1023114C0;
    v25 = *((_QWORD *)&xmmword_1023114D0 + 1);
    v27 = xmmword_1023114D0;
    __p.__r_.__value_.__r.__words[0] = v27 >> 64;
    v26 = v27;
    v79.__r_.__value_.__r.__words[0] = xmmword_1023114D0;
    v28 = xmmword_1023114E0;
    v75 = xmmword_1023114E0;
    v29 = BYTE1(xmmword_1023114E0);
    v74 = BYTE1(xmmword_1023114E0);
    v30 = DWORD1(xmmword_1023114E0);
    v31 = (uint64_t *)(a1 + 256);
    v72 = 1;
    v73 = DWORD1(xmmword_1023114E0);
    v32 = v82;
    if (v82 >= v83)
    {
      v34 = sub_1005C8734(&v81, v31, (__int128 *)&__dst, (int *)&v77, &v76, &v72, (double *)&v79, (uint64_t *)&__p, &v75, &v74, &v73);
    }
    else
    {
      v33 = *v31;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        sub_100115CE4(&buf, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        v24 = v76;
        data = (int)v77.__r_.__value_.__l.__data_;
        v26 = v79.__r_.__value_.__r.__words[0];
        v25 = __p.__r_.__value_.__r.__words[0];
        v28 = v75;
        v29 = v74;
        v30 = v73;
      }
      else
      {
        buf = __dst;
      }
      *(_QWORD *)v32 = v33;
      v35 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
      *(_QWORD *)(v32 + 24) = *((_QWORD *)&buf.__r_.__value_.__l + 2);
      *(_OWORD *)(v32 + 8) = v35;
      *(_DWORD *)(v32 + 32) = data;
      *(_DWORD *)(v32 + 36) = v24;
      *(_DWORD *)(v32 + 40) = 1;
      *(_QWORD *)(v32 + 48) = v26;
      *(_QWORD *)(v32 + 56) = v25;
      *(_BYTE *)(v32 + 64) = v28;
      *(_BYTE *)(v32 + 65) = v29;
      *(_DWORD *)(v32 + 68) = v30;
      *(_BYTE *)(v32 + 72) = 0;
      v34 = v32 + 88;
      *(_QWORD *)(v32 + 80) = 0;
    }
    v82 = v34;
    v36 = (uint64_t *)(a1 + 264);
    v72 = 6;
    if (v34 >= v83)
    {
      v38 = sub_1005C8734(&v81, v36, (__int128 *)&__dst, (int *)&v77, &v76, &v72, (double *)&v79, (uint64_t *)&__p, &v75, &v74, &v73);
    }
    else
    {
      v37 = *v36;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        sub_100115CE4(&buf, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      else
        buf = __dst;
      v40 = v76;
      v39 = (int)v77.__r_.__value_.__l.__data_;
      v41 = v79.__r_.__value_.__r.__words[0];
      v42 = __p.__r_.__value_.__r.__words[0];
      v43 = v75;
      v44 = v74;
      v45 = v73;
      *(_QWORD *)v34 = v37;
      v46 = buf.__r_.__value_.__r.__words[2];
      *(_OWORD *)(v34 + 8) = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
      *(_QWORD *)(v34 + 24) = v46;
      *(_DWORD *)(v34 + 32) = v39;
      *(_DWORD *)(v34 + 36) = v40;
      *(_DWORD *)(v34 + 40) = 6;
      *(_QWORD *)(v34 + 48) = v41;
      *(_QWORD *)(v34 + 56) = v42;
      *(_BYTE *)(v34 + 64) = v43;
      *(_BYTE *)(v34 + 65) = v44;
      *(_DWORD *)(v34 + 68) = v45;
      *(_BYTE *)(v34 + 72) = 0;
      v38 = v34 + 88;
      *(_QWORD *)(v34 + 80) = 0;
    }
    v82 = v38;
    v47 = (uint64_t *)(a1 + 272);
    v72 = 11;
    if (v38 >= v83)
    {
      v49 = sub_1005C8734(&v81, v47, (__int128 *)&__dst, (int *)&v77, &v76, &v72, (double *)&v79, (uint64_t *)&__p, &v75, &v74, &v73);
    }
    else
    {
      v48 = *v47;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        sub_100115CE4(&buf, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      else
        buf = __dst;
      v51 = v76;
      v50 = (int)v77.__r_.__value_.__l.__data_;
      v52 = v79.__r_.__value_.__r.__words[0];
      v53 = __p.__r_.__value_.__r.__words[0];
      v54 = v75;
      v55 = v74;
      v56 = v73;
      *(_QWORD *)v38 = v48;
      v57 = buf.__r_.__value_.__r.__words[2];
      *(_OWORD *)(v38 + 8) = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
      *(_QWORD *)(v38 + 24) = v57;
      *(_DWORD *)(v38 + 32) = v50;
      *(_DWORD *)(v38 + 36) = v51;
      *(_DWORD *)(v38 + 40) = 11;
      *(_QWORD *)(v38 + 48) = v52;
      *(_QWORD *)(v38 + 56) = v53;
      *(_BYTE *)(v38 + 64) = v54;
      *(_BYTE *)(v38 + 65) = v55;
      *(_DWORD *)(v38 + 68) = v56;
      *(_BYTE *)(v38 + 72) = 0;
      v49 = v38 + 88;
      *(_QWORD *)(v38 + 80) = 0;
    }
    v82 = v49;
    sub_1005B7C20(a1, &v81, v80);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v80;
    sub_100279AA4((void ***)&buf);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v81;
    sub_100279AA4((void ***)&buf);
  }
  else
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021469F0);
    v22 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "@WsbActive, Clear", (uint8_t *)&buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021469F0);
      LOWORD(__dst.__r_.__value_.__l.__data_) = 0;
      LODWORD(v71) = 2;
      v62 = (std::string *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "@WsbActive, Clear", &__dst, v71);
      sub_100512490("Generic", 1, 0, 2, "void CLWifiService::programSampleNetworks(BOOL)", "%s\n", (const char *)v62);
      if (v62 != &buf)
        free(v62);
    }
    sub_1005AC1D4(a1, 0);
  }
}

void sub_1005B79F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char **a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char *a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  a23 = &a29;
  sub_100279AA4((void ***)&a23);
  a29 = &a32;
  sub_100279AA4((void ***)&a29);
  _Unwind_Resume(a1);
}

uint64_t **sub_1005B7ABC(uint64_t **a1, int *a2)
{
  uint64_t *v3;
  uint64_t **v4;
  int v5;
  uint64_t **v6;
  int v7;
  _DWORD *v8;

  v4 = a1 + 1;
  v3 = a1[1];
  v5 = *a2;
  if (v3)
  {
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v3;
        v7 = *((_DWORD *)v3 + 8);
        if (v5 >= v7)
          break;
        v3 = *v6;
        v4 = v6;
        if (!*v6)
          goto LABEL_9;
      }
      if (v7 >= v5)
        break;
      v3 = v6[1];
      if (!v3)
      {
        v4 = v6 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v6 = a1 + 1;
LABEL_9:
    v8 = operator new(0x30uLL);
    v8[8] = v5;
    *((_QWORD *)v8 + 5) = 0;
    sub_1000145B0(a1, (uint64_t)v6, v4, (uint64_t *)v8);
    v6 = (uint64_t **)v8;
  }
  return v6 + 5;
}

NSDictionary *sub_1005B7B64(uint64_t a1)
{
  _QWORD v3[3];
  _QWORD v4[3];

  v4[0] = CFSTR("active");
  v3[0] = CFSTR("mode");
  v3[1] = CFSTR("submode");
  v4[1] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", *(_QWORD *)(a1 + 32));
  v3[2] = CFSTR("duration");
  v4[2] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 40));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 3);
}

uint64_t sub_1005B7C20(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  const void *v11;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint8_t buf[4];
  uint64_t v21;
  __int16 v22;
  uint64_t v23;

  v6 = a1 + 824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 824) + 16))(a1 + 824);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102146A30);
  v7 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v8 = 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 3);
    v9 = 0x2E8BA2E8BA2E8BA3 * ((a3[1] - *a3) >> 3);
    *(_DWORD *)buf = 134218240;
    v21 = v8;
    v22 = 2048;
    v23 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "setExitAndEntryScanNetworks, entry, %lu, exit, %lu", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146A30);
    v13 = 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 3);
    v14 = 0x2E8BA2E8BA2E8BA3 * ((a3[1] - *a3) >> 3);
    v16 = 134218240;
    v17 = v13;
    v18 = 2048;
    v19 = v14;
    v15 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "setExitAndEntryScanNetworks, entry, %lu, exit, %lu", &v16, 22);
    sub_100512490("Generic", 1, 0, 2, "void CLWifiService::setExitAndEntryScanNetworks(const std::vector<CLWifiService_Type::AccessPoint> &, const std::vector<CLWifiService_Type::AccessPoint> &)", "%s\n", v15);
    if (v15 != (char *)buf)
      free(v15);
  }
  v10 = *(const void **)(a1 + 528);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(a1 + 528) = 0;
  }
  v11 = *(const void **)(a1 + 520);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(a1 + 520) = 0;
  }
  if (sub_1005C3E3C(a1, a2, (CFTypeRef *)(a1 + 520), 1)
    && sub_1005C3E3C(a1, a3, (CFTypeRef *)(a1 + 528), 0))
  {
    sub_1005BEEC0(a1);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
}

void sub_1005B7EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1005B7F08(uint64_t a1, CFArrayRef theArray)
{
  CFIndex v4;
  const void *ValueAtIndex;
  const __CFString *Property;
  std::string::size_type size;
  NSObject *v8;
  std::string *p_p;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  void *v13;
  std::string::size_type v14;
  std::string *v15;
  std::string::size_type v16;
  _BYTE *v17;
  size_t v18;
  _BOOL4 v19;
  _BOOL4 v20;
  int v21;
  int v22;
  int v23;
  char *v24;
  std::string::const_iterator v25;
  std::string *v26;
  std::string::size_type v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  std::string::size_type v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  std::string::size_type v35;
  std::string *v36;
  __int128 v37;
  const std::string::value_type *v38;
  std::string::size_type v39;
  NSObject *v40;
  std::string *v41;
  int v42;
  uint64_t v43;
  std::string *v44;
  int v45;
  char *v46;
  char *v47;
  NSObject *v48;
  std::string *v49;
  const char *v50;
  char *v51;
  const char *v52;
  char *v53;
  NSObject *v54;
  const char *v55;
  char *v56;
  uint64_t v58;
  const __CFArray *theArraya;
  CFIndex Count;
  int v61;
  std::string v62;
  std::string v63;
  std::string v64;
  std::string v65;
  std::string v66;
  std::string v67;
  std::string v68;
  std::string v69;
  std::string v70;
  std::string __p;
  std::string v72;
  _BYTE v73[28];
  _BYTE buf[1624];

  if (!theArray)
  {
    v61 = 0;
    memset(&__p, 0, sizeof(__p));
    goto LABEL_147;
  }
  memset(&__p, 0, sizeof(__p));
  Count = CFArrayGetCount(theArray);
  if (Count < 1)
  {
    v61 = 0;
    goto LABEL_147;
  }
  v4 = 0;
  v61 = 0;
  theArraya = theArray;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(theArraya, v4);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      *__p.__r_.__value_.__l.__data_ = 0;
      __p.__r_.__value_.__l.__size_ = 0;
    }
    else
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
    }
    Property = (const __CFString *)WiFiNetworkGetProperty(ValueAtIndex, CFSTR("BSSID"));
    if (!Property || !sub_1001C0048(Property, &__p))
      break;
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __p.__r_.__value_.__l.__size_;
    if (!size)
      break;
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021469F0);
    v8 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
    {
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136381187;
      *(_QWORD *)&buf[4] = p_p;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = v4;
      *(_WORD *)&buf[18] = 2050;
      *(_QWORD *)&buf[20] = Count;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "@WsbActive, network, %{private}s, %{public}d, %{public}ld", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021469F0);
      v49 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v49 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)v73 = 136381187;
      *(_QWORD *)&v73[4] = v49;
      *(_WORD *)&v73[12] = 1026;
      *(_DWORD *)&v73[14] = v4;
      *(_WORD *)&v73[18] = 2050;
      *(_QWORD *)&v73[20] = Count;
      LODWORD(v58) = 28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "@WsbActive, network, %{private}s, %{public}d, %{public}ld", v73, v58);
      v51 = (char *)v50;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiService::replaceMatchingNetworks(CFArrayRef)", "%s\n", v50);
      if (v51 != buf)
        free(v51);
    }
    v10 = 0;
    v11 = (uint64_t *)(a1 + 256);
    do
    {
      sub_1000C2150(v11, (std::string *)buf);
      v12 = buf[23];
      v13 = *(void **)buf;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v14 = __p.__r_.__value_.__l.__size_;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v15 = &__p;
      else
        v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (buf[23] >= 0)
        v16 = buf[23];
      else
        v16 = *(_QWORD *)&buf[8];
      if (buf[23] >= 0)
        v17 = buf;
      else
        v17 = *(_BYTE **)buf;
      if (v16 >= v14)
        v18 = v14;
      else
        v18 = v16;
      v19 = memcmp(v15, v17, v18) == 0;
      v20 = v16 == v14 && v19;
      if (v12 < 0)
      {
        operator delete(v13);
        if (!v20)
          goto LABEL_108;
      }
      else if (!v20)
      {
        goto LABEL_108;
      }
      v21 = rand();
      if (v21 == -1)
        v22 = 0;
      else
        v22 = v21;
      v23 = *(_DWORD *)(a1 + 280);
      *(_DWORD *)(a1 + 280) = v23 + 1;
      if ((v23 & 1) != 0)
        v24 = "56:78";
      else
        v24 = "12:34";
      sub_1015A2E04(v73, v24);
      std::to_string(&v65, (v22 >> 6) % 99);
      if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v25.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v65;
      else
        v25.__i_ = (std::__wrap_iter<const char *>::iterator_type)v65.__r_.__value_.__r.__words[0];
      std::string::insert(&v65, v25, 58);
      v66 = v65;
      memset(&v65, 0, sizeof(v65));
      std::string::push_back(&v66, 58);
      v67 = v66;
      memset(&v66, 0, sizeof(v66));
      std::to_string(&v64, (v22 >> 4) % 99);
      if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v26 = &v64;
      else
        v26 = (std::string *)v64.__r_.__value_.__r.__words[0];
      if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
      else
        v27 = v64.__r_.__value_.__l.__size_;
      v28 = std::string::append(&v67, (const std::string::value_type *)v26, v27);
      v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v68.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      std::string::push_back(&v68, 58);
      v69 = v68;
      memset(&v68, 0, sizeof(v68));
      std::to_string(&v63, (v22 >> 2) % 99);
      if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v30 = &v63;
      else
        v30 = (std::string *)v63.__r_.__value_.__r.__words[0];
      if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v31 = HIBYTE(v63.__r_.__value_.__r.__words[2]);
      else
        v31 = v63.__r_.__value_.__l.__size_;
      v32 = std::string::append(&v69, (const std::string::value_type *)v30, v31);
      v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v70.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      std::string::push_back(&v70, 58);
      v72 = v70;
      memset(&v70, 0, sizeof(v70));
      std::to_string(&v62, v22 % 99);
      if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v34 = &v62;
      else
        v34 = (std::string *)v62.__r_.__value_.__r.__words[0];
      if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = HIBYTE(v62.__r_.__value_.__r.__words[2]);
      else
        v35 = v62.__r_.__value_.__l.__size_;
      v36 = std::string::append(&v72, (const std::string::value_type *)v34, v35);
      v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      *(_QWORD *)&buf[16] = *((_QWORD *)&v36->__r_.__value_.__l + 2);
      *(_OWORD *)buf = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      if (buf[23] >= 0)
        v38 = buf;
      else
        v38 = *(const std::string::value_type **)buf;
      if (buf[23] >= 0)
        v39 = buf[23];
      else
        v39 = *(_QWORD *)&buf[8];
      std::string::append((std::string *)v73, v38, v39);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v62.__r_.__value_.__l.__data_);
      if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v72.__r_.__value_.__l.__data_);
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v70.__r_.__value_.__l.__data_);
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v63.__r_.__value_.__l.__data_);
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v69.__r_.__value_.__l.__data_);
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v68.__r_.__value_.__l.__data_);
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v64.__r_.__value_.__l.__data_);
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v67.__r_.__value_.__l.__data_);
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v66.__r_.__value_.__l.__data_);
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v65.__r_.__value_.__l.__data_);
      *v11 = sub_1000CC740((uint64_t)v73);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021469F0);
      v40 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
      {
        sub_1000C2150(v11, &v72);
        v41 = &v72;
        if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v41 = (std::string *)v72.__r_.__value_.__r.__words[0];
        v42 = *(_DWORD *)(a1 + 280);
        *(_DWORD *)buf = 67175171;
        *(_DWORD *)&buf[4] = v10;
        *(_WORD *)&buf[8] = 2081;
        *(_QWORD *)&buf[10] = v41;
        *(_WORD *)&buf[18] = 1026;
        *(_DWORD *)&buf[20] = v42;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "@WsbActive, Match, %{private}d, newmac, %{private}s, matches, %{public}d, #CloneMe", buf, 0x18u);
        if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v72.__r_.__value_.__l.__data_);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021469F0);
        v43 = qword_1022A0058;
        sub_1000C2150(v11, &v70);
        v44 = &v70;
        if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v44 = (std::string *)v70.__r_.__value_.__r.__words[0];
        v45 = *(_DWORD *)(a1 + 280);
        LODWORD(v72.__r_.__value_.__l.__data_) = 67175171;
        HIDWORD(v72.__r_.__value_.__r.__words[0]) = v10;
        LOWORD(v72.__r_.__value_.__r.__words[1]) = 2081;
        *(std::string::size_type *)((char *)&v72.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v44;
        WORD1(v72.__r_.__value_.__r.__words[2]) = 1026;
        HIDWORD(v72.__r_.__value_.__r.__words[2]) = v45;
        LODWORD(v58) = 24;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v43, 0, "@WsbActive, Match, %{private}d, newmac, %{private}s, matches, %{public}d, #CloneMe", &v72, v58);
        v47 = v46;
        if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v70.__r_.__value_.__l.__data_);
        sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiService::replaceMatchingNetworks(CFArrayRef)", "%s\n", v47);
        if (v47 != buf)
          free(v47);
      }
      if ((v73[23] & 0x80000000) != 0)
        operator delete(*(void **)v73);
      ++v61;
LABEL_108:
      ++v10;
      ++v11;
    }
    while (v10 != 3);
    if (v61)
    {
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021469F0);
      v48 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67240192;
        *(_DWORD *)&buf[4] = v61;
        _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "WsbClients, status, samplematch, %{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021469F0);
        *(_DWORD *)v73 = 67240192;
        *(_DWORD *)&v73[4] = v61;
        LODWORD(v58) = 8;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "WsbClients, status, samplematch, %{public}d", v73, v58);
        v53 = (char *)v52;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiService::replaceMatchingNetworks(CFArrayRef)", "%s\n", v52);
        if (v53 != buf)
          free(v53);
      }
    }
    if (++v4 == Count)
      goto LABEL_147;
  }
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021469F0);
  v54 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67240448;
    *(_DWORD *)&buf[4] = v4;
    *(_WORD *)&buf[8] = 2050;
    *(_QWORD *)&buf[10] = Count;
    _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_INFO, "@WsbActive, network, invalid, %{public}d, %{public}ld", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021469F0);
    *(_DWORD *)v73 = 67240448;
    *(_DWORD *)&v73[4] = v4;
    *(_WORD *)&v73[8] = 2050;
    *(_QWORD *)&v73[10] = Count;
    LODWORD(v58) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "@WsbActive, network, invalid, %{public}d, %{public}ld", v73, v58);
    v56 = (char *)v55;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiService::replaceMatchingNetworks(CFArrayRef)", "%s\n", v55);
    if (v56 != buf)
      free(v56);
  }
LABEL_147:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v61 != 0;
}

void sub_1005B8A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (a59 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1005B8C08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  id v10;
  _QWORD v11[8];
  os_activity_scope_state_s state;
  char v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  uint64_t v21;

  CLProfilingIdentify("CLWifiService::onWiFiManagerBackgroundScanCacheCallback");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertOutside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021469B0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v13 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiService::onWiFiManagerBackgroundScanCacheCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021469B0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2082;
      v19 = "activity";
      v20 = 2050;
      v21 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiService::onWiFiManagerBackgroundScanCacheCallback\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v13 = 0;
  }
  v10 = objc_msgSend(*(id *)(a4 + 32), "silo");
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1005C7F78;
  v11[3] = &unk_1021461C0;
  v11[4] = a4;
  v11[5] = a1;
  v11[6] = a2;
  v11[7] = a3;
  objc_msgSend(v10, "sync:", v11);
  if (v13)
    os_activity_scope_leave(&state);
}

void sub_1005B8E00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1005B8E20(uint64_t a1, uint64_t a2)
{
  sub_1005B8E54(*(_QWORD **)(a1 + 32), a2, *(_QWORD *)(a1 + 48));
  CFRelease(*(CFTypeRef *)(a1 + 40));
  CFRelease(*(CFTypeRef *)(a1 + 48));
}

uint64_t sub_1005B8E54(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  const __CFString *InterfaceName;
  uint8_t *v10;
  const __CFString *v11;
  void **v12;
  uint64_t v13;
  const __CFString *v14;
  void **v15;
  const __CFString *v16;
  _BYTE *v17;
  char *v18;
  char *v19;
  NSObject *v20;
  const char *v22;
  void *__p[2];
  char v24;
  os_activity_scope_state_s state;
  _QWORD *v26;
  __int16 v27;
  _BYTE v28[12];
  __int16 v29;
  void **v30;
  char v31;
  int v32;
  void **v33;
  __int16 v34;
  _BYTE *v35;
  uint8_t buf[8];
  __int16 v37;
  const char *v38;
  __int16 v39;
  const char *v40;

  v5 = a1 + 103;
  v26 = a1 + 103;
  (*(void (**)(_QWORD *))(a1[103] + 16))(a1 + 103);
  v27 = 256;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: onWiFiDeviceClientAttachedCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021469D0);
  v7 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    v37 = 2082;
    v38 = "";
    v39 = 2082;
    v40 = "activity";
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"onWiFiDeviceClientAttachedCallback\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (a3)
  {
    if (a1[39])
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      v8 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        InterfaceName = (const __CFString *)WiFiDeviceClientGetInterfaceName(a1[39]);
        v10 = buf;
        sub_1001A486C(InterfaceName, (uint64_t)buf);
        if (SBYTE3(v40) < 0)
          v10 = *(uint8_t **)buf;
        v11 = (const __CFString *)WiFiDeviceClientGetInterfaceName(a3);
        sub_1001A486C(v11, (uint64_t)__p);
        if (v24 >= 0)
          v12 = __p;
        else
          v12 = (void **)__p[0];
        *(_DWORD *)v28 = 136315394;
        *(_QWORD *)&v28[4] = v10;
        v29 = 2080;
        v30 = v12;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "WifiMgr, prefer existing device, %s, ignoring %s", v28, 0x16u);
        if (v24 < 0)
          operator delete(__p[0]);
        if (SBYTE3(v40) < 0)
          operator delete(*(void **)buf);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_38;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      v13 = qword_1022A0048;
      v14 = (const __CFString *)WiFiDeviceClientGetInterfaceName(a1[39]);
      v15 = __p;
      sub_1001A486C(v14, (uint64_t)__p);
      if (v24 < 0)
        v15 = (void **)__p[0];
      v16 = (const __CFString *)WiFiDeviceClientGetInterfaceName(a3);
      sub_1001A486C(v16, (uint64_t)v28);
      if (v31 >= 0)
        v17 = v28;
      else
        v17 = *(_BYTE **)v28;
      v32 = 136315394;
      v33 = v15;
      v34 = 2080;
      v35 = v17;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v13, 0, "WifiMgr, prefer existing device, %s, ignoring %s", (const char *)&v32, 22);
      v19 = v18;
      if (v31 < 0)
        operator delete(*(void **)v28);
      if (v24 < 0)
        operator delete(__p[0]);
      sub_100512490("Generic", 1, 0, 2, "void CLWifiService::onWiFiDeviceClientAttachedCallback(WiFiManagerClientRef, WiFiDeviceClientRef)", "%s\n", v19);
      if (v19 == (char *)buf)
        goto LABEL_38;
LABEL_45:
      free(v19);
      goto LABEL_38;
    }
    sub_1005B0DD8(a1);
    if (a1[39] && a1[38])
    {
      sub_1005B2834((uint64_t)a1, 1, 1);
      *(_DWORD *)buf = 0;
      (*(void (**)(_QWORD *, uint8_t *, _QWORD, uint64_t))(*a1 + 144))(a1, buf, 0, 0xFFFFFFFFLL);
    }
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v20 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "WifiMgr, onWifiDeviceClientAttachedCallback, NULL device", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      LOWORD(__p[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "WifiMgr, onWifiDeviceClientAttachedCallback, NULL device", __p, 2);
      v19 = (char *)v22;
      sub_100512490("Generic", 1, 0, 0, "void CLWifiService::onWiFiDeviceClientAttachedCallback(WiFiManagerClientRef, WiFiDeviceClientRef)", "%s\n", v22);
      if (v19 != (char *)buf)
        goto LABEL_45;
    }
  }
LABEL_38:
  os_activity_scope_leave(&state);
  return (*(uint64_t (**)(_QWORD *))(*v5 + 24))(v5);
}

void sub_1005B9370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, os_activity_scope_state_s state, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  os_activity_scope_leave(&state);
  sub_10187E514((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_1005B93DC(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  int v6;
  NSObject *v7;
  int v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  uint8_t *v13;
  __int16 v14;
  char v15;
  void *__p;
  char v17;
  char v18;
  _OWORD v19[2];
  uint64_t v20;
  os_activity_scope_state_s state;
  uint64_t v22;
  __int16 v23;
  _DWORD v24[4];
  uint8_t buf[8];
  __int16 v26;
  const char *v27;
  __int16 v28;
  const char *v29;

  v2 = a1 + 824;
  v22 = a1 + 824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 824) + 16))(a1 + 824);
  v23 = 256;
  v3 = _os_activity_create((void *)&_mh_execute_header, "CL: onWiFiDeviceClientPowerCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v3, &state);

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021469D0);
  v4 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    v26 = 2082;
    v27 = "";
    v28 = 2082;
    v29 = "activity";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"onWiFiDeviceClientPowerCallback\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  sub_10031F180(a1 + 544, (uint64_t)&byte_102311440);
  v15 = 0;
  v18 = 0;
  v14 = -256;
  memset(v19, 0, sizeof(v19));
  v20 = 0;
  if ((sub_1005B9880(a1, (BOOL *)&v14) & 1) != 0)
  {
    *(_BYTE *)(a1 + 536) = v14;
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v5 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(unsigned __int8 *)(a1 + 536);
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "WifiMgr, onWiFiDeviceClientPowerCallback, fIsWifiPowered, %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      v9 = *(unsigned __int8 *)(a1 + 536);
      v24[0] = 67240192;
      v24[1] = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "WifiMgr, onWiFiDeviceClientPowerCallback, fIsWifiPowered, %{public}d", v24, 8);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CLWifiService::onWiFiDeviceClientPowerCallback(WiFiDeviceClientRef)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    sub_1005B5AA0(a1);
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v7 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "WifiService, could not retrieve power state", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      LOWORD(v24[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "WifiService, could not retrieve power state", v24, 2);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 0, "void CLWifiService::onWiFiDeviceClientPowerCallback(WiFiDeviceClientRef)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    *(_BYTE *)(a1 + 536) = v14;
  }
  *(_QWORD *)buf = (char *)v19 + 8;
  sub_100279AA4((void ***)buf);
  if (v18 && v17 < 0)
    operator delete(__p);
  os_activity_scope_leave(&state);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

void sub_1005B983C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,os_activity_scope_state_s state,char a31)
{
  sub_1005B5FEC((uint64_t)&a12);
  os_activity_scope_leave(&state);
  sub_10187E514((uint64_t)&a31);
  _Unwind_Resume(a1);
}

uint64_t sub_1005B9880(uint64_t a1, BOOL *a2)
{
  uint64_t v4;
  BOOL v5;
  NSObject *v6;
  int v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  int v12;
  const char *v13;
  uint8_t *v14;
  const char *v15;
  uint8_t *v16;
  const char *v17;
  uint8_t *v18;
  _DWORD v19[4];
  uint8_t buf[4];
  int v21;

  v4 = a1 + 824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 824) + 16))(a1 + 824);
  if (*(_QWORD *)(a1 + 296))
  {
    if (*(_QWORD *)(a1 + 312))
    {
      v5 = WiFiDeviceClientGetPower() != 0;
      *a2 = v5;
      *(_BYTE *)(a1 + 536) = v5;
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      v6 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        v7 = *(unsigned __int8 *)(a1 + 536);
        *(_DWORD *)buf = 67240192;
        v21 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "WifiMgr, WiFiDeviceClientGetPower, %{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021469D0);
        v12 = *(unsigned __int8 *)(a1 + 536);
        v19[0] = 67240192;
        v19[1] = v12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "WifiMgr, WiFiDeviceClientGetPower, %{public}d", v19, 8);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiService::queryPowerState(BOOL &)", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
      v8 = 1;
    }
    else
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      v10 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "WifiService, queryPowerState, fWifiDevice is NULL", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021469D0);
        LOWORD(v19[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "WifiService, queryPowerState, fWifiDevice is NULL", v19, 2);
        v18 = (uint8_t *)v17;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiService::queryPowerState(BOOL &)", "%s\n", v17);
        if (v18 != buf)
          free(v18);
      }
      v8 = 0;
      *(_BYTE *)(a1 + 536) = 0;
    }
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v9 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "WifiService, queryPowerState, fDpcSource is NULL", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      LOWORD(v19[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "WifiService, queryPowerState, fDpcSource is NULL", v19, 2);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiService::queryPowerState(BOOL &)", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    v8 = 0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  return v8;
}

void sub_1005B9D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005B9D34(double *a1)
{
  _QWORD *v2;
  NSObject *v3;
  NSObject *v4;
  os_activity_scope_state_s state;
  _QWORD *v7;
  __int16 v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;

  v2 = a1 + 103;
  v7 = a1 + 103;
  (*(void (**)(_QWORD *))(*((_QWORD *)a1 + 103) + 16))((_QWORD *)a1 + 103);
  v8 = 256;
  v3 = _os_activity_create((void *)&_mh_execute_header, "CL: onWiFiDeviceClientResumeScanCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v3, &state);

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021469D0);
  v4 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289282;
    v10 = 0;
    v11 = 2082;
    v12 = "";
    v13 = 2082;
    v14 = "activity";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"onWiFiDeviceClientResumeScanCallback\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  sub_1000A8D50((uint64_t)a1);
  if (a1[49] >= 0.0)
    a1[49] = -1.0;
  *(_DWORD *)buf = 2;
  (*(void (**)(double *, uint8_t *, _QWORD, uint64_t))(*(_QWORD *)a1 + 144))(a1, buf, 0, 0xFFFFFFFFLL);
  os_activity_scope_leave(&state);
  return (*(uint64_t (**)(_QWORD *))(*v2 + 24))(v2);
}

void sub_1005B9ECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a2)
    sub_10024F88C(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005B9EFC(_QWORD *a1, uint64_t a2, const __CFDictionary *a3)
{
  _QWORD *v5;
  NSObject *v6;
  NSObject *v7;
  const void *v8;
  const void *Value;
  NSObject *v10;
  BOOL v11;
  char v12;
  NSObject *v13;
  const char *v14;
  char *v15;
  NSObject *v16;
  int v17;
  NSObject *v18;
  BOOL v19;
  int v20;
  _BYTE *v21;
  BOOL v23;
  int v24;
  _BYTE *v25;
  const char *v26;
  char *v27;
  const char *v28;
  char *v29;
  const char *v30;
  char *v31;
  uint64_t v32;
  _BYTE __p[32];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __int16 v38;
  _QWORD v39[3];
  char v40;
  int v41;
  char v42;
  _BYTE v43[32];
  uint64_t v44;
  os_activity_scope_state_s state;
  _QWORD *v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  _BYTE *v50;
  __int16 v51;
  int v52;
  _BYTE buf[1624];

  v5 = a1 + 103;
  v46 = a1 + 103;
  (*(void (**)(_QWORD *))(a1[103] + 16))(a1 + 103);
  v47 = 256;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: onWiFiDeviceClientLinkExtendedCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021469D0);
  v7 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_QWORD *)buf = 68289282;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2082;
    *(_QWORD *)&buf[20] = "activity";
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"onWiFiDeviceClientLinkExtendedCallback\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  sub_1000A8D50((uint64_t)a1);
  v8 = (const void *)a1[40];
  if (v8)
  {
    CFRelease(v8);
    a1[40] = 0;
  }
  if (a3)
  {
    Value = CFDictionaryGetValue(a3, CFSTR("LINK_CHANGED_NETWORK"));
    a1[40] = Value;
    if (Value)
      CFRetain(Value);
  }
  sub_1005B58B4((uint64_t)a1);
  v38 = -256;
  LOBYTE(v39[0]) = 0;
  v42 = 0;
  memset(v43, 0, sizeof(v43));
  v44 = 0;
  if (sub_1000C1E4C((uint64_t)a1))
  {
    *(_QWORD *)__p = qword_1023114A0;
    if (byte_1023114A8[23] < 0)
    {
      sub_100115CE4(&__p[8], *(void **)byte_1023114A8, *(unint64_t *)&byte_1023114A8[8]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)byte_1023114A8;
      *(_QWORD *)&__p[24] = *(_QWORD *)&byte_1023114A8[16];
    }
    v34 = xmmword_1023114C0;
    v35 = xmmword_1023114D0;
    v36 = xmmword_1023114E0;
    v37 = qword_1023114F0;
    if ((sub_1000A8160((uint64_t)a1, (uint64_t *)__p) & 1) == 0)
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      v10 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "WifiService, linkextend1 failed", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021469D0);
        LOWORD(v48) = 0;
        LODWORD(v32) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 17, "WifiService, linkextend1 failed", &v48, v32, *(_OWORD *)__p, *(_OWORD *)&__p[16]);
        v29 = (char *)v28;
        sub_100512490("Generic", 1, 0, 0, "void CLWifiService::onWiFiDeviceClientLinkExtendedCallback(WiFiDeviceClientRef, CFDictionaryRef)", "%s\n", v28);
        if (v29 != buf)
          free(v29);
      }
    }
    sub_1005C7EDC((uint64_t)v39, (uint64_t)__p);
    if ((__p[31] & 0x80000000) != 0)
      operator delete(*(void **)&__p[8]);
  }
  BYTE2(v44) = 0;
  if (a3)
  {
    sub_1001C1D6C((int)__p, a3);
    sub_1001E48E4((uint64_t)__p, (uint64_t)CFSTR("LINKDOWN_IS_INVOL"), (BOOL *)&v44 + 2);
    if (v42)
      v11 = v41 <= 0;
    else
      v11 = 1;
    v12 = !v11;
    HIBYTE(v32) = v12;
    sub_1001E48E4((uint64_t)__p, (uint64_t)CFSTR("LINK_CHANGED_IS_LINKDOWN"), (BOOL *)&v32 + 7);
    if (HIBYTE(v32))
    {
      sub_10031F180((uint64_t)v39, (uint64_t)&byte_102311440);
    }
    else if (!v42 || v41 <= 0)
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      v16 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "WifiService, linkextend2 failed", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021469D0);
        LOWORD(v48) = 0;
        LODWORD(v32) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 17, "WifiService, linkextend2 failed", &v48, v32);
        v31 = (char *)v30;
        sub_100512490("Generic", 1, 0, 0, "void CLWifiService::onWiFiDeviceClientLinkExtendedCallback(WiFiDeviceClientRef, CFDictionaryRef)", "%s\n", v30);
        if (v31 != buf)
          free(v31);
      }
    }
    sub_1001C1D70((uint64_t)__p, "linkChangedEventDataDict");
    sub_10011A5A8(__p);
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v13 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "WifiMgr, onWiFiDeviceClientLinkExtendedCallback, linkChangedEventDataDict null", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      *(_WORD *)__p = 0;
      LODWORD(v32) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "WifiMgr, onWiFiDeviceClientLinkExtendedCallback, linkChangedEventDataDict null", __p, v32);
      v15 = (char *)v14;
      sub_100512490("Generic", 1, 0, 0, "void CLWifiService::onWiFiDeviceClientLinkExtendedCallback(WiFiDeviceClientRef, CFDictionaryRef)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
  }
  memset(__p, 0, 24);
  if (v42 && v41 >= 1)
  {
    v48 = v39[0];
    sub_1000C2150(&v48, (std::string *)buf);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    *(std::string *)__p = *(std::string *)buf;
    v17 = v41;
  }
  else
  {
    v17 = DWORD2(xmmword_1023114C0);
    std::string::assign((std::string *)__p, "N/A");
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021469D0);
  v18 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    if (v42)
      v19 = v41 <= 0;
    else
      v19 = 1;
    v20 = !v19;
    v21 = __p;
    if (__p[23] < 0)
      v21 = *(_BYTE **)__p;
    *(_DWORD *)buf = 67240707;
    *(_DWORD *)&buf[4] = v20;
    *(_WORD *)&buf[8] = 2081;
    *(_QWORD *)&buf[10] = v21;
    *(_WORD *)&buf[18] = 1025;
    *(_DWORD *)&buf[20] = v17;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "@ClxLink, associate, %{public}d, %{private}s, %{private}d", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    if (v42)
      v23 = v41 <= 0;
    else
      v23 = 1;
    v24 = !v23;
    v25 = __p;
    if (__p[23] < 0)
      v25 = *(_BYTE **)__p;
    LODWORD(v48) = 67240707;
    HIDWORD(v48) = v24;
    v49 = 2081;
    v50 = v25;
    v51 = 1025;
    v52 = v17;
    LODWORD(v32) = 24;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@ClxLink, associate, %{public}d, %{private}s, %{private}d", &v48, v32);
    v27 = (char *)v26;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiService::onWiFiDeviceClientLinkExtendedCallback(WiFiDeviceClientRef, CFDictionaryRef)", "%s\n", v26);
    if (v27 != buf)
      free(v27);
  }
  *(_DWORD *)buf = 6;
  (*(void (**)(_QWORD *, _BYTE *, __int16 *, uint64_t, uint64_t, _QWORD))(*a1 + 152))(a1, buf, &v38, 1, 0xFFFFFFFFLL, 0);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  *(_QWORD *)buf = &v43[8];
  sub_100279AA4((void ***)buf);
  if (v42 && v40 < 0)
    operator delete((void *)v39[1]);
  os_activity_scope_leave(&state);
  return (*(uint64_t (**)(_QWORD *))(*v5 + 24))(v5);
}

void sub_1005BA81C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, int a13, __int16 a14, char a15, char a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,os_activity_scope_state_s state,char a47)
{
  sub_10011A5A8(&a11);
  sub_1005B5FEC((uint64_t)&a28);
  os_activity_scope_leave(&state);
  sub_10187E514((uint64_t)&a47);
  _Unwind_Resume(a1);
}

uint64_t sub_1005BA8B8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  _QWORD *v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  const void *Property;
  BOOL v13;
  NSObject *v14;
  const char *v15;
  char *v16;
  NSObject *v17;
  _BYTE *v18;
  NSObject *v19;
  void **v20;
  void **v21;
  void **v23;
  void **v24;
  const char *v25;
  char *v26;
  uint64_t v27;
  _BYTE *v28;
  char *v29;
  uint64_t v30;
  void *v31[2];
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int16 v40;
  _BYTE v41[8];
  void *v42;
  char v43;
  BOOL v44;
  char v45;
  _BYTE v46[32];
  uint64_t v47;
  os_activity_scope_state_s state;
  _QWORD *v49;
  __int16 v50;
  _BYTE v51[18];
  __int16 v52;
  void **v53;
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;
  void *__p[2];
  uint64_t v59;
  _BYTE buf[28];
  __int16 v61;
  int v62;
  __int16 v63;
  int v64;

  v6 = a1 + 103;
  v49 = a1 + 103;
  (*(void (**)(_QWORD *))(a1[103] + 16))(a1 + 103);
  v50 = 256;
  v7 = _os_activity_create((void *)&_mh_execute_header, "CL: onWiFiDeviceClientBssidChangeCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v7, &state);

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021469D0);
  v8 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2082;
    *(_QWORD *)&buf[20] = "activity";
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"onWiFiDeviceClientBssidChangeCallback\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  sub_1000A8D50((uint64_t)a1);
  sub_1005B58B4((uint64_t)a1);
  v40 = -256;
  v41[0] = 0;
  v45 = 0;
  memset(v46, 0, sizeof(v46));
  v9 = &qword_1023114A0;
  v47 = 0;
  v33 = qword_1023114A0;
  if (byte_1023114A8[23] < 0)
  {
    sub_100115CE4(&v34, *(void **)byte_1023114A8, *(unint64_t *)&byte_1023114A8[8]);
  }
  else
  {
    v34 = *(_OWORD *)byte_1023114A8;
    v35 = *(_QWORD *)&byte_1023114A8[16];
  }
  v36 = xmmword_1023114C0;
  v37 = xmmword_1023114D0;
  v38 = xmmword_1023114E0;
  v39 = qword_1023114F0;
  v10 = sub_1000A8160((uint64_t)a1, &v33);
  v11 = sub_1000C1E4C((uint64_t)a1);
  if (v10 != (_DWORD)v11)
  {
    sub_101900DA4();
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/WifiService/CLWifiService.mm", 1263, "onWiFiDeviceClientBssidChangeCallback");
    __break(1u);
LABEL_64:
    dispatch_once(&qword_1022A0040, &stru_1021469D0);
    goto LABEL_46;
  }
  v9 = (uint64_t *)v41;
  if (v10)
    v11 = sub_1005C7EDC((uint64_t)v41, (uint64_t)&v33);
  if (sub_1000AAB5C(v11, a3, (uint64_t)&v33, 0))
  {
    sub_1005C7EDC((uint64_t)v41, (uint64_t)&v33);
    if (v10)
    {
      Property = (const void *)WiFiNetworkGetProperty(a3, kWiFiNetworkAttributeIsMoving);
      if (Property)
        v13 = CFEqual(Property, kCFBooleanTrue) != 0;
      else
        v13 = 1;
      v44 = v13;
    }
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v17 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      sub_100CF1FAC((uint64_t)v41, buf);
      v18 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
      *(_DWORD *)v51 = 136380675;
      *(_QWORD *)&v51[4] = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "WifiMgr, associated state changed to %{private}s", v51, 0xCu);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      v27 = qword_1022A0048;
      sub_100CF1FAC((uint64_t)v41, v51);
      if (SBYTE3(v53) >= 0)
        v28 = v51;
      else
        v28 = *(_BYTE **)v51;
      LODWORD(__p[0]) = 136380675;
      *(void **)((char *)__p + 4) = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v27, 0, "WifiMgr, associated state changed to %{private}s", __p, 12);
      v16 = v29;
      if (SBYTE3(v53) < 0)
        operator delete(*(void **)v51);
      sub_100512490("Generic", 1, 0, 2, "void CLWifiService::onWiFiDeviceClientBssidChangeCallback(WiFiDeviceClientRef, WiFiNetworkRef)", "%s\n", v16);
      if (v16 != buf)
LABEL_81:
        free(v16);
    }
  }
  else
  {
    sub_10031F180((uint64_t)v41, (uint64_t)&byte_102311440);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v14 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "WifiMgr, onWiFiDeviceClientBssidChangeCallback, invalid roam network", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      *(_WORD *)v51 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "WifiMgr, onWiFiDeviceClientBssidChangeCallback, invalid roam network", v51, 2);
      v16 = (char *)v15;
      sub_100512490("Generic", 1, 0, 0, "void CLWifiService::onWiFiDeviceClientBssidChangeCallback(WiFiDeviceClientRef, WiFiNetworkRef)", "%s\n", v15);
      if (v16 != buf)
        goto LABEL_81;
    }
  }
  __p[0] = 0;
  __p[1] = 0;
  v59 = 0;
  sub_1015A2E04(v31, "");
  if (v10)
  {
    *(_QWORD *)v51 = v33;
    sub_1000C2254(v51, (std::string *)buf);
    if (SHIBYTE(v59) < 0)
      operator delete(__p[0]);
    *(_OWORD *)__p = *(_OWORD *)buf;
    v59 = *(_QWORD *)&buf[16];
    LODWORD(a3) = DWORD2(v36);
    if (SHIBYTE(v35) < 0)
    {
      sub_100115CE4(buf, (void *)v34, *((unint64_t *)&v34 + 1));
    }
    else
    {
      *(_OWORD *)buf = v34;
      *(_QWORD *)&buf[16] = v35;
    }
    if (SHIBYTE(v32) < 0)
      operator delete(v31[0]);
    *(_OWORD *)v31 = *(_OWORD *)buf;
    v32 = *(_QWORD *)&buf[16];
    v3 = v36;
  }
  else
  {
    LODWORD(a3) = 0;
    v3 = 0;
  }
  if (qword_1022A0040 != -1)
    goto LABEL_64;
LABEL_46:
  v19 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v20 = __p;
    if (v59 < 0)
      v20 = (void **)__p[0];
    v21 = v31;
    if (v32 < 0)
      v21 = (void **)v31[0];
    *(_DWORD *)buf = 67110147;
    *(_DWORD *)&buf[4] = v10;
    *(_WORD *)&buf[8] = 2081;
    *(_QWORD *)&buf[10] = v20;
    *(_WORD *)&buf[18] = 2081;
    *(_QWORD *)&buf[20] = v21;
    v61 = 1024;
    v62 = a3;
    v63 = 1024;
    v64 = v3;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "WifiMgr, roaming, associated, %d, ap, %{private}s, ssid, %{private}s, %d, %d", buf, 0x28u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v23 = __p;
    if (v59 < 0)
      v23 = (void **)__p[0];
    v24 = v31;
    if (v32 < 0)
      v24 = (void **)v31[0];
    *(_DWORD *)v51 = 67110147;
    *(_DWORD *)&v51[4] = v10;
    *(_WORD *)&v51[8] = 2081;
    *(_QWORD *)&v51[10] = v23;
    v52 = 2081;
    v53 = v24;
    v54 = 1024;
    v55 = a3;
    v56 = 1024;
    v57 = v3;
    LODWORD(v30) = 40;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "WifiMgr, roaming, associated, %d, ap, %{private}s, ssid, %{private}s, %d, %d", v51, v30);
    v26 = (char *)v25;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiService::onWiFiDeviceClientBssidChangeCallback(WiFiDeviceClientRef, WiFiNetworkRef)", "%s\n", v25);
    if (v26 != buf)
      free(v26);
  }
  *(_DWORD *)buf = 7;
  (*(void (**)(_QWORD *, _BYTE *, __int16 *, _QWORD, uint64_t, _QWORD))(*a1 + 152))(a1, buf, &v40, 0, 0xFFFFFFFFLL, 0);
  sub_10031F180((uint64_t)(a1 + 68), (uint64_t)v9);
  if (SHIBYTE(v32) < 0)
    operator delete(v31[0]);
  if (SHIBYTE(v59) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v35) < 0)
    operator delete((void *)v34);
  *(_QWORD *)buf = &v46[8];
  sub_100279AA4((void ***)buf);
  if (v45 && v43 < 0)
    operator delete(v42);
  os_activity_scope_leave(&state);
  return (*(uint64_t (**)(_QWORD *))(*v6 + 24))(v6);
}

void sub_1005BB184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,os_activity_scope_state_s state,char a50)
{
  if (a23 < 0)
    operator delete(__p);
  sub_1005B5FEC((uint64_t)&a31);
  os_activity_scope_leave(&state);
  sub_10187E514((uint64_t)&a50);
  _Unwind_Resume(a1);
}

uint64_t sub_1005BB234(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  const char *v9;
  double v10;
  double Current;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  os_activity_scope_state_s state;
  uint64_t v17;
  __int16 v18;
  _DWORD v19[2];
  __int16 v20;
  uint64_t v21;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;

  v5 = a1 + 824;
  v17 = a1 + 824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 824) + 16))(a1 + 824);
  v18 = 256;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: onWiFiDeviceClientBgScanSuspendResumeCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021469D0);
  v7 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289282;
    v23 = 0;
    v24 = 2082;
    v25 = "";
    v26 = 2082;
    v27 = "activity";
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"onWiFiDeviceClientBgScanSuspendResumeCallback\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
  }
  v8 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v9 = *(const char **)(a1 + 400);
    *(_DWORD *)buf = 67240448;
    v23 = a3;
    v24 = 2050;
    v25 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "WifiMgr, resume, %{public}d, timestamp, %{public}.1f", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v13 = *(_QWORD *)(a1 + 400);
    v19[0] = 67240448;
    v19[1] = a3;
    v20 = 2050;
    v21 = v13;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "WifiMgr, resume, %{public}d, timestamp, %{public}.1f", v19, 18);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiService::onWiFiDeviceClientBgScanSuspendResumeCallback(WiFiDeviceClientRef, Boolean)", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  v10 = *(double *)(a1 + 400);
  if (a3)
  {
    if (v10 < 0.0)
    {
      Current = CFAbsoluteTimeGetCurrent();
LABEL_13:
      *(double *)(a1 + 400) = Current;
    }
  }
  else
  {
    Current = -1.0;
    if (v10 >= 0.0)
      goto LABEL_13;
  }
  os_activity_scope_leave(&state);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
}

void sub_1005BB528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, os_activity_scope_state_s state, char a13)
{
  os_activity_scope_leave(&state);
  sub_10187E514((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_1005BB558(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  __int16 v8;
  char v9;
  void *__p;
  char v11;
  char v12;
  _OWORD v13[2];
  uint64_t v14;
  _DWORD v15[4];
  uint8_t buf[8];

  v8 = -256;
  v9 = 0;
  v12 = 0;
  memset(v13, 0, sizeof(v13));
  v14 = 0;
  sub_1000A8D50(a1);
  BYTE3(v14) = a3;
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021469D0);
  v5 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "WifiMgr, network critical, %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v15[0] = 67109120;
    v15[1] = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiMgr, network critical, %d", v15);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiService::onWiFiDeviceClient24GHzNetworkInCriticalStateCallback(WiFiDeviceClientRef, BOOL)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  *(_DWORD *)buf = 13;
  (*(void (**)(uint64_t, uint8_t *, __int16 *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, &v8, 1, 0xFFFFFFFFLL, 0);
  *(_QWORD *)buf = (char *)v13 + 8;
  sub_100279AA4((void ***)buf);
  if (v12)
  {
    if (v11 < 0)
      operator delete(__p);
  }
}

void sub_1005BB784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1005B5FEC((uint64_t)va);
  _Unwind_Resume(a1);
}

NSDictionary *sub_1005BB7A0(uint64_t a1)
{
  NSNumber *v2;
  _QWORD v4[10];
  _QWORD v5[10];

  v4[0] = CFSTR("type");
  v5[0] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", *(_QWORD *)(a1 + 32));
  v4[1] = CFSTR("aps");
  v5[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 40));
  v4[2] = CFSTR("binAps");
  v5[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 44));
  v4[3] = CFSTR("aps2GHz");
  v5[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 48));
  v4[4] = CFSTR("bin2GHz");
  v5[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 52));
  v4[5] = CFSTR("aps5GHz");
  v5[5] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 40));
  v4[6] = CFSTR("bin5GHz");
  v5[6] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 56));
  v4[7] = CFSTR("apsLocalAdmin");
  v5[7] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 60));
  v4[8] = CFSTR("binLocalAdmin");
  v2 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 64));
  v4[9] = CFSTR("daily");
  v5[8] = v2;
  v5[9] = &off_10221B288;
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 10);
}

uint64_t sub_1005BB920(uint64_t a1, uint64_t a2, const __CFArray *a3, int a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  int v10;
  NSObject *v11;
  CFTypeID v12;
  int Count;
  int v14;
  NSObject *v15;
  char v16;
  NSObject *v17;
  const char *v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  void *v22;
  double Current;
  NSObject *v24;
  uint64_t v25;
  NSObject *v26;
  __CFRunLoop *v27;
  const char *v29;
  uint8_t *v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  const char *v36;
  uint8_t *v37;
  const char *v38;
  uint8_t *v39;
  const char *v40;
  uint8_t *v41;
  const char *v42;
  uint8_t *v43;
  const char *v44;
  uint64_t v45;
  __int128 __p;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  os_activity_scope_state_s state;
  uint64_t v53;
  __int16 v54;
  void **v55;
  _BYTE v56[12];
  uint64_t v57;
  __int16 v58;
  double v59;
  __int16 v60;
  uint64_t v61;
  char v62;
  uint8_t buf[4];
  int v64;
  __int16 v65;
  _BYTE v66[18];
  __int16 v67;
  double v68;
  __int16 v69;
  uint64_t v70;
  char v71;
  _BYTE v72[32];
  uint64_t v73;

  v7 = a1 + 824;
  v53 = a1 + 824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 824) + 16))(a1 + 824);
  v54 = 256;
  v8 = _os_activity_create((void *)&_mh_execute_header, "CL: onWiFiDeviceClientScanCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v8, &state);

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021469D0);
  v9 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289282;
    v64 = 0;
    v65 = 2082;
    *(_QWORD *)v66 = "";
    *(_WORD *)&v66[8] = 2082;
    *(_QWORD *)&v66[10] = "activity";
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"onWiFiDeviceClientScanCallback\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  sub_1000A8D50(a1);
  v10 = *(char *)(a1 + 233);
  if (!*(_BYTE *)(a1 + 234))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v11 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "WifiMgr, Multiple scan callbacks, #CloneMe", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      LOWORD(v55) = 0;
      LODWORD(v44) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "WifiMgr, Multiple scan callbacks, #CloneMe", &v55, v44);
      v39 = (uint8_t *)v38;
      sub_100512490("Generic", 1, 0, 2, "void CLWifiService::onWiFiDeviceClientScanCallback(WiFiDeviceClientRef, CFArrayRef, WiFiError)", "%s\n", v38);
      if (v39 != buf)
        free(v39);
    }
  }
  *(_BYTE *)(a1 + 234) = 0;
  v45 = qword_1023114A0;
  if (byte_1023114A8[23] < 0)
  {
    sub_100115CE4(&__p, *(void **)byte_1023114A8, *(unint64_t *)&byte_1023114A8[8]);
  }
  else
  {
    __p = *(_OWORD *)byte_1023114A8;
    v47 = *(_QWORD *)&byte_1023114A8[16];
  }
  v48 = xmmword_1023114C0;
  v49 = xmmword_1023114D0;
  v50 = xmmword_1023114E0;
  v51 = qword_1023114F0;
  if (a3 && (v12 = CFGetTypeID(a3), v12 == CFArrayGetTypeID()))
  {
    Count = CFArrayGetCount(a3);
    v14 = 1;
  }
  else
  {
    v14 = 0;
    Count = 0;
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021469D0);
  v15 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240704;
    v64 = a4;
    v65 = 1026;
    *(_DWORD *)v66 = v14;
    *(_WORD *)&v66[4] = 1026;
    *(_DWORD *)&v66[6] = Count;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "WifiMgr, onWiFiDeviceClientScanCallback, error, %{public}d, valid, %{public}d, count, %{public}d", buf, 0x14u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    LODWORD(v55) = 67240704;
    HIDWORD(v55) = a4;
    *(_WORD *)v56 = 1026;
    *(_DWORD *)&v56[2] = v14;
    *(_WORD *)&v56[6] = 1026;
    *(_DWORD *)&v56[8] = Count;
    LODWORD(v44) = 20;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "WifiMgr, onWiFiDeviceClientScanCallback, error, %{public}d, valid, %{public}d, count, %{public}d", &v55, v44, v45, __p, v47, v48, v49, v50, v51);
    v30 = (uint8_t *)v29;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiService::onWiFiDeviceClientScanCallback(WiFiDeviceClientRef, CFArrayRef, WiFiError)", "%s\n", v29);
    if (v30 != buf)
      free(v30);
  }
  v16 = v14 ^ 1;
  if (a4)
    v16 = 1;
  if ((v16 & 1) != 0)
  {
    *(_BYTE *)(a1 + 416) = -1;
    *(_QWORD *)(a1 + 424) = 0;
    sub_100279AE4((uint64_t *)(a1 + 432));
    *(_QWORD *)(a1 + 408) = 0;
    if (a4 == 16)
    {
      *(const CFTimeInterval *)(a1 + 744) = -kCFAbsoluteTimeIntervalSince1970;
      *(_DWORD *)(a1 + 752) = 16;
      if (*(double *)(a1 + 392) < 0.0)
      {
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102146A30);
        v24 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "recording busy start time as now", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_102146A30);
          LOWORD(v55) = 0;
          LODWORD(v44) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "recording busy start time as now", &v55, v44);
          v43 = (uint8_t *)v42;
          sub_100512490("Generic", 1, 0, 2, "void CLWifiService::onWiFiDeviceClientScanCallback(WiFiDeviceClientRef, CFArrayRef, WiFiError)", "%s\n", v42);
          if (v43 != buf)
            free(v43);
        }
        *(CFAbsoluteTime *)(a1 + 392) = CFAbsoluteTimeGetCurrent();
      }
      ++*(_DWORD *)(a1 + 764);
      *(_DWORD *)buf = 5;
      (*(void (**)(uint64_t, uint8_t *, _QWORD, uint64_t))(*(_QWORD *)a1 + 144))(a1, buf, 0, 0xFFFFFFFFLL);
    }
    else
    {
      *(_DWORD *)buf = 4;
      (*(void (**)(uint64_t, uint8_t *, _QWORD, uint64_t))(*(_QWORD *)a1 + 144))(a1, buf, 0, 0xFFFFFFFFLL);
      if (a4 == 6)
      {
        *(CFAbsoluteTime *)(a1 + 744) = CFAbsoluteTimeGetCurrent();
        *(_DWORD *)(a1 + 752) = 6;
      }
      ++*(_DWORD *)(a1 + 760);
    }
  }
  else
  {
    *(_BYTE *)(a1 + 416) = v10;
    *(CFAbsoluteTime *)(a1 + 424) = CFAbsoluteTimeGetCurrent();
    sub_100279AE4((uint64_t *)(a1 + 432));
    *(const CFTimeInterval *)(a1 + 744) = -kCFAbsoluteTimeIntervalSince1970;
    *(_DWORD *)(a1 + 752) = 0;
    sub_1000A99C0(a1, a3, (double *)(a1 + 384), (uint64_t *)(a1 + 432), (uint64_t)"scan");
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146A30);
    v17 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v18 = sub_1000A9998((char)v10);
      v19 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 440) - *(_QWORD *)(a1 + 432)) >> 3);
      v20 = *(double *)(a1 + 424) - *(double *)(a1 + 408);
      v21 = *(_QWORD *)(a1 + 384);
      *(_DWORD *)buf = 67110146;
      v64 = v10;
      v65 = 2080;
      *(_QWORD *)v66 = v18;
      *(_WORD *)&v66[8] = 2048;
      *(_QWORD *)&v66[10] = v19;
      v67 = 2048;
      v68 = v20;
      v69 = 2048;
      v70 = v21;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "asynchronous scan type %d %s completed - %lu results (%.3fs scan time), max age, %.3f", buf, 0x30u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146A30);
      v31 = qword_1022A02D8;
      v32 = sub_1000A9998((char)v10);
      v33 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 440) - *(_QWORD *)(a1 + 432)) >> 3);
      v34 = *(double *)(a1 + 424) - *(double *)(a1 + 408);
      v35 = *(_QWORD *)(a1 + 384);
      LODWORD(v55) = 67110146;
      HIDWORD(v55) = v10;
      *(_WORD *)v56 = 2080;
      *(_QWORD *)&v56[2] = v32;
      *(_WORD *)&v56[10] = 2048;
      v57 = v33;
      v58 = 2048;
      v59 = v34;
      v60 = 2048;
      v61 = v35;
      LODWORD(v44) = 48;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v31, 2, "asynchronous scan type %d %s completed - %lu results (%.3fs scan time), max age, %.3f", &v55, v44, v45, *(double *)&__p, *((double *)&__p + 1));
      v37 = (uint8_t *)v36;
      sub_100512490("Generic", 1, 0, 2, "void CLWifiService::onWiFiDeviceClientScanCallback(WiFiDeviceClientRef, CFArrayRef, WiFiError)", "%s\n", v36);
      if (v37 != buf)
        free(v37);
    }
    ++*(_DWORD *)(a1 + 756);
    *(_QWORD *)(a1 + 408) = 0;
    sub_1000A8EF0(a1, (uint64_t *)(a1 + 432), (char)v10);
    buf[0] = 0;
    LOBYTE(v65) = 0;
    v71 = 0;
    memset(v72, 0, sizeof(v72));
    v73 = 0;
    buf[1] = v10;
    (*(void (**)(uint64_t, _BYTE *, _BYTE *))(*(_QWORD *)a1 + 224))(a1, &v72[8], v72);
    sub_1000A7FFC(a1, (uint64_t)&v55);
    if (v62)
      sub_1005C7EDC((uint64_t)&v65, (uint64_t)&v55);
    HIDWORD(v44) = 3;
    (*(void (**)(uint64_t, char *, uint8_t *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, (char *)&v44 + 4, buf, 1, 0xFFFFFFFFLL, 0);
    v22 = *(void **)(a1 + 656);
    Current = CFAbsoluteTimeGetCurrent();
    objc_msgSend(v22, "processEventTime:atCurrentTime:", Current, CFAbsoluteTimeGetCurrent());
    if (v62 && SBYTE1(v59) < 0)
      operator delete(*(void **)v56);
    v55 = (void **)&v72[8];
    sub_100279AA4(&v55);
    if (v71 && SHIBYTE(v69) < 0)
      operator delete(*(void **)&v66[6]);
  }
  v25 = *(_QWORD *)(a1 + 312);
  if (v25)
  {
    WiFiDeviceClientRegisterScanUpdateCallback(v25, sub_100083EA4, 1, a1);
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v26 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "WifiService, scan callback, fWifiDevice NULL", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      LOWORD(v55) = 0;
      LODWORD(v44) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "WifiService, scan callback, fWifiDevice NULL", &v55, v44);
      v41 = (uint8_t *)v40;
      sub_100512490("Generic", 1, 0, 0, "void CLWifiService::onWiFiDeviceClientScanCallback(WiFiDeviceClientRef, CFArrayRef, WiFiError)", "%s\n", v40);
      if (v41 != buf)
        free(v41);
    }
  }
  if (*(_QWORD *)(a1 + 368))
  {
    CFRunLoopSourceSignal(*(CFRunLoopSourceRef *)(a1 + 296));
    v27 = (__CFRunLoop *)sub_100193530();
    CFRunLoopWakeUp(v27);
  }
  if (SHIBYTE(v47) < 0)
    operator delete((void *)__p);
  os_activity_scope_leave(&state);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
}

void sub_1005BC4F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,os_activity_scope_state_s state,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,int a44,__int16 a45,char a46,char a47)
{
  if (a17 < 0)
    operator delete(__p);
  os_activity_scope_leave(&state);
  sub_10187E514((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_1005BC59C(uint64_t a1, uint64_t a2, uint64_t a3, const __CFArray *a4)
{
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  double Current;
  CFIndex Count;
  id v17;
  int IntProperty;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  NSObject *v25;
  NSObject *v26;
  NSObject *v27;
  char *v28;
  uint64_t v29;
  const __CFArray *v30;
  id v31;
  const __CFString *Property;
  char v33;
  int v34;
  char *v35;
  int v36;
  int v37;
  int IsApplePersonalHotspot;
  const void *v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  _BYTE *v43;
  uint64_t v44;
  _BYTE *v45;
  char *v46;
  NSObject *v47;
  int v48;
  double v49;
  _BYTE *v50;
  NSObject *v51;
  _BYTE *v52;
  void **v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  std::string *v57;
  void **v58;
  char *v59;
  uint64_t v60;
  int v61;
  double v62;
  std::string *v63;
  char *v64;
  NSObject *v65;
  int v66;
  double v67;
  int v68;
  const char *v69;
  NSObject *v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  int v85;
  _QWORD v86[5];
  int v87;
  int v88;
  _QWORD v89[4];
  int v90;
  _QWORD v91[4];
  int v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  int v96;
  void *v97[2];
  char v98;
  __int128 __dst;
  uint64_t v100;
  std::string v101;
  os_activity_scope_state_s state;
  uint64_t v103;
  pthread_mutex_t *v104;
  __int16 v105;
  std::string v106;
  _BYTE v107[34];
  _BYTE v108[32];
  uint64_t v109;
  int v110;
  double v111;
  double v112;
  BOOL v113;
  char v114;
  int v115;
  char v116;
  double v117;
  _BYTE buf[34];
  int v119;
  char v120;
  char v121;
  _BYTE v122[32];
  const mach_header_64 *v123;

  v5 = a1;
  v103 = a1 + 824;
  (*(void (**)(void))(*(_QWORD *)(a1 + 824) + 16))();
  v105 = 256;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: onWiFiManagerBackgroundScanCacheCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021469D0);
  v7 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2082;
    *(_QWORD *)&buf[20] = "activity";
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"onWiFiManagerBackgroundScanCacheCallback\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021469F0);
  v8 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
  {
    v9 = *(_DWORD *)(v5 + 284);
    v10 = *(unsigned __int8 *)(v5 + 244);
    v11 = *(unsigned __int8 *)(v5 + 245);
    v12 = *(unsigned __int8 *)(v5 + 246);
    v14 = *(_DWORD *)(v5 + 236);
    v13 = *(_DWORD *)(v5 + 240);
    *(_DWORD *)buf = 67241472;
    *(_DWORD *)&buf[4] = v9;
    *(_WORD *)&buf[8] = 1026;
    *(_DWORD *)&buf[10] = v13;
    *(_WORD *)&buf[14] = 1026;
    *(_DWORD *)&buf[16] = v10;
    *(_WORD *)&buf[20] = 1026;
    *(_DWORD *)&buf[22] = v11;
    *(_WORD *)&buf[26] = 1026;
    *(_DWORD *)&buf[28] = v12;
    *(_WORD *)&buf[32] = 1026;
    v119 = v14;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "WsbReg, snap, clients, %{public}d, interval, %{public}d, active, %{public}d, rollover, %{public}d, sample, %{public}d, state, %{public}d", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021469F0);
    v71 = *(_DWORD *)(v5 + 284);
    v72 = *(unsigned __int8 *)(v5 + 244);
    v73 = *(unsigned __int8 *)(v5 + 245);
    v74 = *(unsigned __int8 *)(v5 + 246);
    v76 = *(_DWORD *)(v5 + 236);
    v75 = *(_DWORD *)(v5 + 240);
    *(_DWORD *)v108 = 67241472;
    *(_DWORD *)&v108[4] = v71;
    *(_WORD *)&v108[8] = 1026;
    *(_DWORD *)&v108[10] = v75;
    *(_WORD *)&v108[14] = 1026;
    *(_DWORD *)&v108[16] = v72;
    *(_WORD *)&v108[20] = 1026;
    *(_DWORD *)&v108[22] = v73;
    *(_WORD *)&v108[26] = 1026;
    *(_DWORD *)&v108[28] = v74;
    LOWORD(v109) = 1026;
    *(_DWORD *)((char *)&v109 + 2) = v76;
    v77 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "WsbReg, snap, clients, %{public}d, interval, %{public}d, active, %{public}d, rollover, %{public}d, sample, %{public}d, state, %{public}d", v108, 38);
    sub_100512490("Generic", 1, 0, 2, "void CLWifiService::onWiFiManagerBackgroundScanCacheCallback(WiFiManagerClientRef, WiFiDeviceClientRef, CFArrayRef)", "%s\n", v77);
    if (v77 != buf)
      free(v77);
  }
  Current = CFAbsoluteTimeGetCurrent();
  if (!a4)
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021469F0);
    v27 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "@WsbCb, count, 0", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021469F0);
      *(_WORD *)v108 = 0;
      LODWORD(v82) = 2;
      v28 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@WsbCb, count, 0", v108, v82);
      sub_100512490("Generic", 1, 0, 2, "void CLWifiService::onWiFiManagerBackgroundScanCacheCallback(WiFiManagerClientRef, WiFiDeviceClientRef, CFArrayRef)", "%s\n", v28);
      if (v28 != buf)
        free(v28);
    }
    goto LABEL_146;
  }
  Count = CFArrayGetCount(a4);
  v17 = -[__CFArray objectAtIndexedSubscript:](a4, "objectAtIndexedSubscript:", ((Count << 32) - 0x100000000) >> 32);
  IntProperty = WiFiNetworkGetIntProperty(v17, CFSTR("AGE"));
  WiFiNetworkGetProperty(v17, CFSTR("BSSID"));
  v84 = v5;
  if (Current - (double)IntProperty <= *(double *)(v5 + 488)
    && 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(v5 + 504) - *(_QWORD *)(v5 + 496)) >> 3) == (int)Count)
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021469F0);
    v19 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_ERROR))
    {
      v20 = *(_QWORD *)(v5 + 488);
      *(_DWORD *)buf = 134349568;
      *(double *)&buf[4] = Current - (double)IntProperty;
      *(_WORD *)&buf[12] = 2050;
      *(_QWORD *)&buf[14] = v20;
      *(_WORD *)&buf[22] = 1026;
      *(_DWORD *)&buf[24] = Count;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "@WsbCb, duplicate, times, %{public}.1f, %{public}.1f, count, %{public}d, #CloneMe", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021469F0);
      v21 = *(_QWORD *)(v5 + 488);
      *(_DWORD *)v108 = 134349568;
      *(double *)&v108[4] = Current - (double)IntProperty;
      *(_WORD *)&v108[12] = 2050;
      *(_QWORD *)&v108[14] = v21;
      *(_WORD *)&v108[22] = 1026;
      *(_DWORD *)&v108[24] = Count;
      LODWORD(v82) = 28;
      v22 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 16, "@WsbCb, duplicate, times, %{public}.1f, %{public}.1f, count, %{public}d, #CloneMe", v108, v82);
      sub_100512490("Generic", 1, 0, 0, "void CLWifiService::onWiFiManagerBackgroundScanCacheCallback(WiFiManagerClientRef, WiFiDeviceClientRef, CFArrayRef)", "%s\n", v22);
      if (v22 != buf)
        free(v22);
    }
LABEL_140:
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021469F0);
    v65 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = Count;
      _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEBUG, "WsbMetric, groupresult, discard, %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021469F0);
      *(_DWORD *)v108 = 67240192;
      *(_DWORD *)&v108[4] = Count;
      LODWORD(v82) = 8;
      v80 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "WsbMetric, groupresult, discard, %{public}d", v108, v82);
      sub_100512490("Generic", 1, 0, 2, "void CLWifiService::onWiFiManagerBackgroundScanCacheCallback(WiFiManagerClientRef, WiFiDeviceClientRef, CFArrayRef)", "%s\n", v80);
      if (v80 != buf)
        free(v80);
    }
    v91[0] = _NSConcreteStackBlock;
    v91[1] = 3221225472;
    v91[2] = sub_1005BDE70;
    v91[3] = &unk_102146830;
    v92 = Count;
    AnalyticsSendEventLazy(CFSTR("com.apple.clx.wsb.groupresult"), v91);
    v89[0] = _NSConcreteStackBlock;
    v89[1] = 3221225472;
    v89[2] = sub_1005BDF04;
    v89[3] = &unk_102146830;
    v90 = Count;
    AnalyticsSendEventLazy(CFSTR("com.apple.clx.wsb.groupresult"), v89);
    sub_100279AE4((uint64_t *)(v5 + 496));
LABEL_146:
    LODWORD(Count) = 0;
    goto LABEL_147;
  }
  v23 = sub_100197040();
  v24 = sub_10075E16C(v23);
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021469F0);
  v25 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240448;
    *(_DWORD *)&buf[4] = Count;
    *(_WORD *)&buf[8] = 2050;
    *(double *)&buf[10] = Current;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "@WsbCb, count, %{public}d, currtime, %{public}.1f", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021469F0);
    *(_DWORD *)v108 = 67240448;
    *(_DWORD *)&v108[4] = Count;
    *(_WORD *)&v108[8] = 2050;
    *(double *)&v108[10] = Current;
    LODWORD(v82) = 18;
    v79 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@WsbCb, count, %{public}d, currtime, %{public}.1f", v108, v82);
    sub_100512490("Generic", 1, 0, 2, "void CLWifiService::onWiFiManagerBackgroundScanCacheCallback(WiFiManagerClientRef, WiFiDeviceClientRef, CFArrayRef)", "%s\n", v79);
    if (v79 != buf)
      free(v79);
  }
  if ((Count & 0x80000000) != 0 || v24 < (int)Count)
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021469F0);
    v26 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)&buf[4] = Count;
      *(_WORD *)&buf[8] = 1026;
      *(_DWORD *)&buf[10] = v24;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "@WsbCb, out of range, %{public}d, max, %{public}d, #CloneMe", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021469F0);
      *(_DWORD *)v108 = 67240448;
      *(_DWORD *)&v108[4] = Count;
      *(_WORD *)&v108[8] = 1026;
      *(_DWORD *)&v108[10] = v24;
      LODWORD(v82) = 14;
      v81 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 16, "@WsbCb, out of range, %{public}d, max, %{public}d, #CloneMe", v108, v82);
      sub_100512490("Generic", 1, 0, 0, "void CLWifiService::onWiFiManagerBackgroundScanCacheCallback(WiFiManagerClientRef, WiFiDeviceClientRef, CFArrayRef)", "%s\n", v81);
      if (v81 != buf)
        free(v81);
    }
  }
  *(double *)(v5 + 488) = Current;
  v83 = (uint64_t *)(v5 + 496);
  sub_100279AE4((uint64_t *)(v5 + 496));
  memset(&v101, 0, sizeof(v101));
  if (byte_1023114BF < 0)
  {
    sub_100115CE4(&__dst, (void *)qword_1023114A8, unk_1023114B0);
  }
  else
  {
    __dst = *(_OWORD *)&qword_1023114A8;
    v100 = unk_1023114B8;
  }
  if ((int)Count < 1)
  {
    v85 = 0;
  }
  else
  {
    v29 = 0;
    v85 = 0;
    do
    {
      if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
      {
        *v101.__r_.__value_.__l.__data_ = 0;
        v101.__r_.__value_.__l.__size_ = 0;
      }
      else
      {
        v101.__r_.__value_.__s.__data_[0] = 0;
        *((_BYTE *)&v101.__r_.__value_.__s + 23) = 0;
      }
      v30 = a4;
      v31 = -[__CFArray objectAtIndexedSubscript:](a4, "objectAtIndexedSubscript:", v29);
      Property = (const __CFString *)WiFiNetworkGetProperty(v31, CFSTR("BSSID"));
      sub_1001C0048(Property, &v101);
      v33 = WiFiNetworkGetIntProperty(v31, CFSTR("RSSI"));
      v34 = WiFiNetworkGetIntProperty(v31, CFSTR("CHANNEL"));
      if (v31 && WiFiNetworkGetChannel(v31))
        v35 = off_102146BA0[(int)WiFiNetworkGetOperatingBand()];
      else
        v35 = "NA";
      sub_1015A2E04(v97, v35);
      v36 = WiFiNetworkGetIntProperty(v31, CFSTR("AGE"));
      v37 = WiFiNetworkGetIntProperty(v31, CFSTR("AP_MODE"));
      IsApplePersonalHotspot = WiFiNetworkIsApplePersonalHotspot(v31);
      v96 = 0;
      v39 = (const void *)WiFiNetworkGetProperty(v31, CFSTR("CHANNEL_FLAGS"));
      if (!v39 || (sub_1000ABDCC(v39, &v96) & 1) == 0)
        v96 = 0;
      v40 = sub_1000CC740((uint64_t)&v101);
      if (SHIBYTE(v100) < 0)
      {
        sub_100115CE4(&v94, (void *)__dst, *((unint64_t *)&__dst + 1));
      }
      else
      {
        v94 = __dst;
        v95 = v100;
      }
      *(_QWORD *)v108 = v40;
      *(_OWORD *)&v108[8] = v94;
      *(_QWORD *)&v108[24] = v95;
      v94 = 0uLL;
      v95 = 0;
      LODWORD(v109) = v33;
      HIDWORD(v109) = v37;
      v110 = v34;
      v111 = (double)v36;
      v112 = Current - (double)v36;
      v113 = IsApplePersonalHotspot != 0;
      v114 = 1;
      v115 = v96;
      v116 = 0;
      v117 = 0.0;
      v41 = WiFiNetworkGetIntProperty(v31, CFSTR("CONNECTED_BSSID"));
      a4 = v30;
      if (v41)
      {
        v116 = 1;
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021469F0);
        v42 = qword_1022A0058;
        if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
        {
          sub_100CF1BCC((uint64_t *)v108, buf);
          v43 = buf;
          if (buf[23] < 0)
            v43 = *(_BYTE **)buf;
          *(_DWORD *)v107 = 136380675;
          *(_QWORD *)&v107[4] = v43;
          _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "@WsbCb, associated AP, %{private}s", v107, 0xCu);
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021469F0);
          v44 = qword_1022A0058;
          sub_100CF1BCC((uint64_t *)v108, v107);
          v45 = v107;
          if (v107[23] < 0)
            v45 = *(_BYTE **)v107;
          LODWORD(v106.__r_.__value_.__l.__data_) = 136380675;
          *(std::string::size_type *)((char *)v106.__r_.__value_.__r.__words + 4) = (std::string::size_type)v45;
          LODWORD(v82) = 12;
          v46 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v44, 0, "@WsbCb, associated AP, %{private}s", &v106, v82);
          if ((v107[23] & 0x80000000) != 0)
            operator delete(*(void **)v107);
          sub_100512490("Generic", 1, 0, 2, "void CLWifiService::onWiFiManagerBackgroundScanCacheCallback(WiFiManagerClientRef, WiFiDeviceClientRef, CFArrayRef)", "%s\n", v46);
          if (v46 != buf)
            free(v46);
        }
      }
      else
      {
        v116 = 0;
      }
      v117 = Current;
      if ((v110 - 257) >= 0xFFFFFF00
        && v111 >= 0.0
        && v111 <= 86400.0
        && (*(_QWORD *)buf = *(_QWORD *)v108, sub_100129380((uint64_t)buf)))
      {
        v54 = *(_QWORD *)(v84 + 504);
        if (v54 >= *(_QWORD *)(v84 + 512))
        {
          v55 = sub_100279DEC(v83, (uint64_t)v108);
        }
        else
        {
          sub_100279D64((uint64_t)v83, (uint64_t)v108);
          v55 = v54 + 88;
        }
        *(_QWORD *)(v84 + 504) = v55;
        objc_msgSend(*(id *)(v84 + 656), "processEventTime:atCurrentTime:", Current - (double)v36, CFAbsoluteTimeGetCurrent());
      }
      else
      {
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021469F0);
        v47 = qword_1022A0058;
        if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_ERROR))
        {
          v48 = v110;
          v49 = v111;
          v106.__r_.__value_.__r.__words[0] = *(_QWORD *)v108;
          sub_1000C2150(&v106, (std::string *)v107);
          v50 = v107;
          if (v107[23] < 0)
            v50 = *(_BYTE **)v107;
          *(_DWORD *)buf = 67240963;
          *(_DWORD *)&buf[4] = 1;
          *(_WORD *)&buf[8] = 1026;
          *(_DWORD *)&buf[10] = v48;
          *(_WORD *)&buf[14] = 2050;
          *(double *)&buf[16] = v49;
          *(_WORD *)&buf[24] = 2081;
          *(_QWORD *)&buf[26] = v50;
          _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "@WsbCb, bad, %{public}d, channel, %{public}d, age, %{public}.0f, mac, %{private}s", buf, 0x22u);
          if ((v107[23] & 0x80000000) != 0)
            operator delete(*(void **)v107);
        }
        ++v85;
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021469F0);
          v60 = qword_1022A0058;
          v61 = v110;
          v62 = v111;
          v93 = *(_QWORD *)v108;
          sub_1000C2150(&v93, &v106);
          v63 = &v106;
          if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v63 = (std::string *)v106.__r_.__value_.__r.__words[0];
          *(_DWORD *)v107 = 67240963;
          *(_DWORD *)&v107[4] = 1;
          *(_WORD *)&v107[8] = 1026;
          *(_DWORD *)&v107[10] = v61;
          *(_WORD *)&v107[14] = 2050;
          *(double *)&v107[16] = v62;
          *(_WORD *)&v107[24] = 2081;
          *(_QWORD *)&v107[26] = v63;
          LODWORD(v82) = 34;
          v64 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v60, 16, "@WsbCb, bad, %{public}d, channel, %{public}d, age, %{public}.0f, mac, %{private}s", v107, v82);
          if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v106.__r_.__value_.__l.__data_);
          sub_100512490("Generic", 1, 0, 0, "void CLWifiService::onWiFiManagerBackgroundScanCacheCallback(WiFiManagerClientRef, WiFiDeviceClientRef, CFArrayRef)", "%s\n", v64);
          if (v64 != buf)
            free(v64);
        }
      }
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021469F0);
      v51 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
      {
        sub_100CF1BCC((uint64_t *)v108, v107);
        v52 = v107;
        if (v107[23] < 0)
          v52 = *(_BYTE **)v107;
        v53 = v97;
        if (v98 < 0)
          v53 = (void **)v97[0];
        *(_DWORD *)buf = 67240707;
        *(_DWORD *)&buf[4] = v29 + 1;
        *(_WORD *)&buf[8] = 2081;
        *(_QWORD *)&buf[10] = v52;
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = v53;
        _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "@WsbCb, AP, %{public}d, %{private}s, band, %{public}s", buf, 0x1Cu);
        if ((v107[23] & 0x80000000) != 0)
          operator delete(*(void **)v107);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021469F0);
        v56 = qword_1022A0058;
        sub_100CF1BCC((uint64_t *)v108, &v106);
        v57 = &v106;
        if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v57 = (std::string *)v106.__r_.__value_.__r.__words[0];
        v58 = v97;
        if (v98 < 0)
          v58 = (void **)v97[0];
        *(_DWORD *)v107 = 67240707;
        *(_DWORD *)&v107[4] = v29 + 1;
        *(_WORD *)&v107[8] = 2081;
        *(_QWORD *)&v107[10] = v57;
        *(_WORD *)&v107[18] = 2082;
        *(_QWORD *)&v107[20] = v58;
        LODWORD(v82) = 28;
        v59 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v56, 2, "@WsbCb, AP, %{public}d, %{private}s, band, %{public}s", v107, v82);
        if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v106.__r_.__value_.__l.__data_);
        sub_100512490("Generic", 1, 0, 2, "void CLWifiService::onWiFiManagerBackgroundScanCacheCallback(WiFiManagerClientRef, WiFiDeviceClientRef, CFArrayRef)", "%s\n", v59);
        if (v59 != buf)
          free(v59);
      }
      if ((v108[31] & 0x80000000) != 0)
        operator delete(*(void **)&v108[8]);
      if (v98 < 0)
        operator delete(v97[0]);
      ++v29;
    }
    while (Count != v29);
  }
  v5 = v84;
  if (4 * v85 < (int)Count)
  {
    *(_WORD *)buf = -256;
    buf[8] = 0;
    v121 = 0;
    memset(v122, 0, sizeof(v122));
    v123 = &_mh_execute_header;
    (*(void (**)(uint64_t, _BYTE *, _BYTE *))(*(_QWORD *)v84 + 240))(v84, &v122[8], v122);
    *(_DWORD *)v108 = 12;
    (*(void (**)(uint64_t, _BYTE *, _BYTE *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v84 + 152))(v84, v108, buf, 0, 0xFFFFFFFFLL, 0);
    *(_QWORD *)v108 = &v122[8];
    sub_100279AA4((void ***)v108);
    if (v121)
    {
      if (v120 < 0)
        operator delete(*(void **)&buf[16]);
    }
  }
  if (SHIBYTE(v100) < 0)
    operator delete((void *)__dst);
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v101.__r_.__value_.__l.__data_);
  if (4 * v85 >= (int)Count)
    goto LABEL_140;
LABEL_147:
  v66 = Count;
  v67 = *(double *)(v5 + 288);
  if (v67 <= 0.0)
    v68 = -1;
  else
    v68 = (int)(Current - v67);
  if (*(_BYTE *)(v5 + 246))
  {
    v69 = "fake";
  }
  else if (*(_QWORD *)(v5 + 248))
  {
    v69 = "fences";
  }
  else
  {
    v69 = "off";
  }
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021469F0);
  v70 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240706;
    *(_DWORD *)&buf[4] = v66;
    *(_WORD *)&buf[8] = 1026;
    *(_DWORD *)&buf[10] = v68;
    *(_WORD *)&buf[14] = 2082;
    *(_QWORD *)&buf[16] = v69;
    _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEBUG, "WsbMetric, callback, aps, %{public}d, delta, %{public}d, active, %{public}s", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021469F0);
    *(_DWORD *)v108 = 67240706;
    *(_DWORD *)&v108[4] = v66;
    *(_WORD *)&v108[8] = 1026;
    *(_DWORD *)&v108[10] = v68;
    *(_WORD *)&v108[14] = 2082;
    *(_QWORD *)&v108[16] = v69;
    LODWORD(v82) = 24;
    v78 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "WsbMetric, callback, aps, %{public}d, delta, %{public}d, active, %{public}s", v108, v82);
    sub_100512490("Generic", 1, 0, 2, "void CLWifiService::onWiFiManagerBackgroundScanCacheCallback(WiFiManagerClientRef, WiFiDeviceClientRef, CFArrayRef)", "%s\n", v78);
    if (v78 != buf)
      free(v78);
  }
  v86[0] = _NSConcreteStackBlock;
  v86[1] = 3221225472;
  v86[2] = sub_1005BDF98;
  v86[3] = &unk_102139B90;
  v87 = v66;
  v88 = v68;
  v86[4] = v69;
  AnalyticsSendEventLazy(CFSTR("com.apple.clx.wsb.callback"), v86);
  *(double *)(v5 + 288) = Current;
  os_activity_scope_leave(&state);
  if (HIBYTE(v105))
  {
    if ((_BYTE)v105)
      pthread_mutex_unlock(v104);
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v103 + 24))(v103);
  }
}

void sub_1005BDD54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,os_activity_scope_state_s state,char a57)
{
  os_activity_scope_leave(&state);
  sub_10187E514((uint64_t)&a57);
  _Unwind_Resume(a1);
}

NSDictionary *sub_1005BDE70(uint64_t a1)
{
  _QWORD v2[2];
  _QWORD v3[2];

  v2[1] = CFSTR("numInGroup");
  v3[0] = CFSTR("discard");
  v2[0] = CFSTR("groupResult");
  v3[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 32));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v3, v2, 2);
}

NSDictionary *sub_1005BDF04(uint64_t a1)
{
  _QWORD v2[2];
  _QWORD v3[2];

  v2[1] = CFSTR("numInGroup");
  v3[0] = CFSTR("discard:badcb");
  v2[0] = CFSTR("groupResult");
  v3[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 32));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v3, v2, 2);
}

NSDictionary *sub_1005BDF98(uint64_t a1)
{
  NSString *v2;
  _QWORD v4[4];
  _QWORD v5[4];

  v4[0] = CFSTR("aps");
  v5[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 40));
  v4[1] = CFSTR("delta");
  v5[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 44));
  v4[2] = CFSTR("active");
  v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", *(_QWORD *)(a1 + 32));
  v4[3] = CFSTR("daily");
  v5[2] = v2;
  v5[3] = &off_10221B288;
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 4);
}

uint64_t sub_1005BE070(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  uint64_t v16;
  const char *v17;
  char *v18;
  uint64_t v19;
  const char *v20;
  char *v21;
  const char *v22;
  char *v23;
  const char *v24;
  char *v25;
  uint64_t v26;
  os_activity_scope_state_s state;
  uint64_t v28;
  __int16 v29;
  int v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  _BYTE buf[1624];

  v6 = a1 + 824;
  v28 = a1 + 824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 824) + 16))(a1 + 824);
  v29 = 256;
  v7 = _os_activity_create((void *)&_mh_execute_header, "CL: onWiFiManagerBackgroundScanCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v7, &state);

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021469D0);
  v8 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2082;
    *(_QWORD *)&buf[20] = "activity";
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"onWiFiManagerBackgroundScanCallback\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  sub_1000A8D50(a1);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102146A30);
  v9 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v10 = *(_QWORD *)(a1 + 248);
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = a4;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Got background scan callback, networks, %p, Exit / Entry notification, gfNetworks, %ld", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146A30);
    v16 = *(_QWORD *)(a1 + 248);
    v30 = 134218240;
    v31 = (uint64_t)a4;
    v32 = 2048;
    v33 = v16;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Got background scan callback, networks, %p, Exit / Entry notification, gfNetworks, %ld", &v30, 22);
    v18 = (char *)v17;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiService::onWiFiManagerBackgroundScanCallback(WiFiManagerClientRef, WiFiDeviceClientRef, CFArrayRef)", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
  CFShow(a4);
  sub_100279AE4((uint64_t *)(a1 + 464));
  *(CFAbsoluteTime *)(a1 + 456) = CFAbsoluteTimeGetCurrent();
  if (a4)
  {
    *(_QWORD *)buf = 0xBFF0000000000000;
    sub_100279AE4((uint64_t *)(a1 + 464));
    sub_1000A99C0(a1, (CFArrayRef)a4, (double *)buf, (uint64_t *)(a1 + 464), (uint64_t)"get");
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146A30);
    v11 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v12 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 472) - *(_QWORD *)(a1 + 464)) >> 3);
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "%ld background scan entry results", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146A30);
      v19 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 472) - *(_QWORD *)(a1 + 464)) >> 3);
      v30 = 134217984;
      v31 = v19;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "%ld background scan entry results", &v30);
      v21 = (char *)v20;
      sub_100512490("Generic", 1, 0, 2, "void CLWifiService::onWiFiManagerBackgroundScanCallback(WiFiManagerClientRef, WiFiDeviceClientRef, CFArrayRef)", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146A30);
    v13 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "issue kNotificationBackgroundEntry", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146A30);
      LOWORD(v30) = 0;
      LODWORD(v26) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "issue kNotificationBackgroundEntry", &v30, v26);
      v23 = (char *)v22;
      sub_100512490("Generic", 1, 0, 2, "void CLWifiService::onWiFiManagerBackgroundScanCallback(WiFiManagerClientRef, WiFiDeviceClientRef, CFArrayRef)", "%s\n", v22);
      if (v23 != buf)
        free(v23);
    }
    *(_DWORD *)buf = 8;
    (*(void (**)(uint64_t, _BYTE *, _QWORD, uint64_t))(*(_QWORD *)a1 + 144))(a1, buf, 0, 0xFFFFFFFFLL);
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146A30);
    v14 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "issue kNotificationBackgroundExit", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146A30);
      LOWORD(v30) = 0;
      LODWORD(v26) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "issue kNotificationBackgroundExit", &v30, v26);
      v25 = (char *)v24;
      sub_100512490("Generic", 1, 0, 2, "void CLWifiService::onWiFiManagerBackgroundScanCallback(WiFiManagerClientRef, WiFiDeviceClientRef, CFArrayRef)", "%s\n", v24);
      if (v25 != buf)
        free(v25);
    }
    *(_DWORD *)buf = 9;
    (*(void (**)(uint64_t, _BYTE *, _QWORD, uint64_t))(*(_QWORD *)a1 + 144))(a1, buf, 0, 0xFFFFFFFFLL);
  }
  if (sub_1005B7F08(a1, (CFArrayRef)a4))
  {
    *(_BYTE *)(a1 + 246) = 0;
    sub_1005B6E9C(a1, 1);
  }
  if (sub_1001DFAE8())
  {
    sub_100119F3C(buf);
    LOBYTE(v30) = a4 != 0;
    sub_10011B47C((uint64_t)buf, "ePNOEnter", &v30);
    sub_1001DFAF4((uint64_t)buf, (uint64_t)"locationd");
    sub_10011A5A8(buf);
  }
  os_activity_scope_leave(&state);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
}

void sub_1005BE81C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, os_activity_scope_state_s state, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  os_activity_scope_leave(&state);
  sub_10187E514((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1005BE87C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  const char *v9;
  const char *v11;
  uint8_t *v12;
  int v13;
  uint64_t v14;
  const char *v15;
  uint8_t *v16;
  const char *v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 __p;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  BOOL v27;
  os_activity_scope_state_s state;
  uint64_t v29;
  __int16 v30;
  _DWORD v31[2];
  __int16 v32;
  uint64_t v33;
  uint8_t buf[4];
  int v35;
  __int16 v36;
  const char *v37;
  __int16 v38;
  const char *v39;

  v2 = a1 + 824;
  v29 = a1 + 824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 824) + 16))(a1 + 824);
  v30 = 256;
  v3 = _os_activity_create((void *)&_mh_execute_header, "CL: onWiFiManagerRestartCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v3, &state);

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021469D0);
  v4 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289282;
    v35 = 0;
    v36 = 2082;
    v37 = "";
    v38 = 2082;
    v39 = "activity";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"onWiFiManagerRestartCallback\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021469F0);
  v5 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "@WifiNotify, WifiManagerRestart", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021469F0);
    LOWORD(v20) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@WifiNotify, WifiManagerRestart", &v20, 2);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiService::onWiFiManagerRestartCallback(WiFiManagerClientRef)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  sub_1005B9880(a1, &v27);
  v20 = qword_1023114A0;
  if (byte_1023114A8[23] < 0)
  {
    sub_100115CE4(&__p, *(void **)byte_1023114A8, *(unint64_t *)&byte_1023114A8[8]);
  }
  else
  {
    __p = *(_OWORD *)byte_1023114A8;
    v22 = *(_QWORD *)&byte_1023114A8[16];
  }
  v23 = xmmword_1023114C0;
  v24 = xmmword_1023114D0;
  v25 = xmmword_1023114E0;
  v26 = qword_1023114F0;
  if (!sub_1005B4D54(a1, (uint64_t)&v20))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146A30);
    v6 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Failed to query associated network", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146A30);
      LOWORD(v31[0]) = 0;
      LODWORD(v19) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning Failed to query associated network", v31, v19, v20, __p, v22);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "void CLWifiService::onWiFiManagerRestartCallback(WiFiManagerClientRef)", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
  }
  sub_1005B0DD8(a1);
  sub_1005BEEC0(a1);
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021469D0);
  v7 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(_DWORD *)(a1 + 284);
    v9 = *(const char **)(a1 + 712);
    *(_DWORD *)buf = 67240448;
    v35 = v8;
    v36 = 2050;
    v37 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "WsbReg, wifirestart, clients, %{public}d, %{public}ld", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v13 = *(_DWORD *)(a1 + 284);
    v14 = *(_QWORD *)(a1 + 712);
    v31[0] = 67240448;
    v31[1] = v13;
    v32 = 2050;
    v33 = v14;
    LODWORD(v19) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "WsbReg, wifirestart, clients, %{public}d, %{public}ld", v31, v19);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiService::onWiFiManagerRestartCallback(WiFiManagerClientRef)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  if (*(int *)(a1 + 284) >= 1)
  {
    *(_DWORD *)(a1 + 236) = 0;
    sub_1005B2834(a1, 1, 1);
  }
  if (SHIBYTE(v22) < 0)
    operator delete((void *)__p);
  os_activity_scope_leave(&state);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

void sub_1005BEE68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,os_activity_scope_state_s state,char a28)
{
  if (a17 < 0)
    operator delete(__p);
  os_activity_scope_leave(&state);
  sub_10187E514((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_1005BEEC0(uint64_t a1)
{
  const __CFArray *v2;
  CFMutableArrayRef MutableCopy;
  NSObject *v4;
  CFIndex v5;
  uint64_t v6;
  CFIndex v7;
  uint64_t v8;
  char *v9;
  __CFArray *v10;
  const __CFArray *v11;
  NSObject *v12;
  CFIndex Count;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  CFIndex v18;
  uint64_t v19;
  uint64_t v20;
  CFIndex v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  CFIndex v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  int v29;
  CFIndex v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  uint8_t buf[4];
  CFIndex v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  CFRange v41;

  if (*(_QWORD *)(a1 + 296) && *(_QWORD *)(a1 + 304))
  {
    v2 = *(const __CFArray **)(a1 + 520);
    if (v2)
      MutableCopy = CFArrayCreateMutableCopy(kCFAllocatorDefault, 0, v2);
    else
      MutableCopy = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
    v10 = MutableCopy;
    v11 = *(const __CFArray **)(a1 + 528);
    if (v11)
    {
      v41.length = CFArrayGetCount(*(CFArrayRef *)(a1 + 528));
      v41.location = 0;
      CFArrayAppendArray(v10, v11, v41);
    }
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146A30);
    v12 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      Count = CFArrayGetCount(v10);
      v15 = *(_QWORD *)(a1 + 296);
      v14 = *(_QWORD *)(a1 + 304);
      *(_DWORD *)buf = 134218496;
      v36 = Count;
      v37 = 2048;
      v38 = v14;
      v39 = 2048;
      v40 = v15;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Setting %ld background scan networks, fWifiManager, %p, fDpcSource, %p", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146A30);
      v20 = qword_1022A02D8;
      v21 = CFArrayGetCount(v10);
      v23 = *(_QWORD *)(a1 + 296);
      v22 = *(_QWORD *)(a1 + 304);
      v29 = 134218496;
      v30 = v21;
      v31 = 2048;
      v32 = v22;
      v33 = 2048;
      v34 = v23;
      v24 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v20, 2, "Setting %ld background scan networks, fWifiManager, %p, fDpcSource, %p", &v29, 32);
      sub_100512490("Generic", 1, 0, 2, "void CLWifiService::setBackgroundScanNetworksInternal()", "%s\n", v24);
      if (v24 != (char *)buf)
        free(v24);
    }
    if (*(_QWORD *)(a1 + 304))
    {
      v16 = (*(uint64_t (**)(_QWORD, __CFArray *))(**(_QWORD **)(a1 + 840) + 16))(*(_QWORD *)(a1 + 840), v10);
    }
    else
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      v17 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
      {
        v19 = *(_QWORD *)(a1 + 296);
        v18 = *(_QWORD *)(a1 + 304);
        *(_DWORD *)buf = 134349312;
        v36 = v18;
        v37 = 2050;
        v38 = v19;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "WifiService, fWifiManager is NULL, %{public}p, fDpcSource, %{public}p", buf, 0x16u);
      }
      v16 = sub_1001BFF7C(115, 0);
      if ((_DWORD)v16)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021469D0);
        v26 = *(_QWORD *)(a1 + 296);
        v25 = *(_QWORD *)(a1 + 304);
        v29 = 134349312;
        v30 = v25;
        v31 = 2050;
        v32 = v26;
        LODWORD(v28) = 22;
        v27 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "WifiService, fWifiManager is NULL, %{public}p, fDpcSource, %{public}p", &v29, v28);
        v16 = sub_100512490("Generic", 1, 0, 0, "void CLWifiService::setBackgroundScanNetworksInternal()", "%s\n", v27);
        if (v27 != (char *)buf)
          free(v27);
      }
    }
    sub_1005C4084(v16, v10);
    CFRelease(v10);
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146A30);
    v4 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(_QWORD *)(a1 + 296);
      v5 = *(_QWORD *)(a1 + 304);
      *(_DWORD *)buf = 134218240;
      v36 = v5;
      v37 = 2048;
      v38 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning avoid setBackgroundScanNetworksInternal, fWifiManager is NULL, %p, fDpcSource, %p, shutdown?", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146A30);
      v8 = *(_QWORD *)(a1 + 296);
      v7 = *(_QWORD *)(a1 + 304);
      v29 = 134218240;
      v30 = v7;
      v31 = 2048;
      v32 = v8;
      v9 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning avoid setBackgroundScanNetworksInternal, fWifiManager is NULL, %p, fDpcSource, %p, shutdown?", &v29, 22);
      sub_100512490("Generic", 1, 0, 2, "void CLWifiService::setBackgroundScanNetworksInternal()", "%s\n", v9);
      if (v9 != (char *)buf)
        free(v9);
    }
  }
}

_QWORD *sub_1005BF414@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1015A2E04(a2, __str);
}

uint64_t sub_1005BF48C(uint64_t a1, int a2, int *a3, int *a4)
{
  int v8;
  NSObject *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  const char *v18;
  uint8_t *v19;
  NSObject *v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  const char *v30;
  uint8_t *v31;
  int v32;
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  uint8_t buf[4];
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;

  sub_1005BF908(a1, a2, a3, a4);
  if (*a3 == 12)
  {
    sub_100197040();
    if (sub_10075DC3C())
    {
      *(_DWORD *)buf = *a3;
      v8 = sub_1001B7864(a1, (int *)buf, 1);
      if (v8 == *(_DWORD *)(a1 + 284))
      {
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021469F0);
        v9 = qword_1022A0058;
        if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
        {
          v10 = *((_QWORD *)a4 + 1);
          v11 = *a4;
          v12 = *((unsigned __int8 *)a4 + 4);
          v13 = *((unsigned __int8 *)a4 + 5);
          *(_DWORD *)buf = 67241474;
          v45 = v8;
          v46 = 1026;
          v47 = a2;
          v48 = 2082;
          v49 = v10;
          v50 = 1026;
          v51 = v11;
          v52 = 1026;
          v53 = v12;
          v54 = 1026;
          v55 = v13;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "@WsbReg, clients, %{public}d, same, idname, %{public}d, %{public}s, rate, %{public}d, active, %{public}d, rollover, %{public}d", buf, 0x2Au);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021469F0);
          v14 = *((_QWORD *)a4 + 1);
          v15 = *a4;
          v16 = *((unsigned __int8 *)a4 + 4);
          v17 = *((unsigned __int8 *)a4 + 5);
          v32 = 67241474;
          v33 = v8;
          v34 = 1026;
          v35 = a2;
          v36 = 2082;
          v37 = v14;
          v38 = 1026;
          v39 = v15;
          v40 = 1026;
          v41 = v16;
          v42 = 1026;
          v43 = v17;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@WsbReg, clients, %{public}d, same, idname, %{public}d, %{public}s, rate, %{public}d, active, %{public}d, rollover, %{public}d", &v32, 42);
          v19 = (uint8_t *)v18;
          sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLWifiService::registerForNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::RegInfo &)", "%s\n", v18);
          if (v19 != buf)
            free(v19);
        }
      }
      else
      {
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021469F0);
        v20 = qword_1022A0058;
        if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
        {
          v21 = *((_QWORD *)a4 + 1);
          v22 = *a4;
          v23 = *((unsigned __int8 *)a4 + 4);
          v24 = *((unsigned __int8 *)a4 + 5);
          *(_DWORD *)buf = 67241474;
          v45 = v8;
          v46 = 1026;
          v47 = a2;
          v48 = 2082;
          v49 = v21;
          v50 = 1026;
          v51 = v22;
          v52 = 1026;
          v53 = v23;
          v54 = 1026;
          v55 = v24;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "@WsbReg, clients, %{public}d, plus, idname, %{public}d, %{public}s, rate, %{public}d, active, %{public}d, rollover, %{public}d", buf, 0x2Au);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021469F0);
          v26 = *((_QWORD *)a4 + 1);
          v27 = *a4;
          v28 = *((unsigned __int8 *)a4 + 4);
          v29 = *((unsigned __int8 *)a4 + 5);
          v32 = 67241474;
          v33 = v8;
          v34 = 1026;
          v35 = a2;
          v36 = 2082;
          v37 = v26;
          v38 = 1026;
          v39 = v27;
          v40 = 1026;
          v41 = v28;
          v42 = 1026;
          v43 = v29;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@WsbReg, clients, %{public}d, plus, idname, %{public}d, %{public}s, rate, %{public}d, active, %{public}d, rollover, %{public}d", &v32, 42);
          v31 = (uint8_t *)v30;
          sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLWifiService::registerForNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::RegInfo &)", "%s\n", v30);
          if (v31 != buf)
            free(v31);
        }
        sub_1005BFDD8(a1, *((uint64_t **)a4 + 1), a2, 0);
        sub_1005B2834(a1, 1, 0);
        *(_DWORD *)(a1 + 284) = v8;
      }
      sub_10003EFD0(a1, (uint64_t)"reg");
    }
  }
  return 1;
}

BOOL sub_1005BF908(uint64_t a1, int a2, int *a3, _OWORD *a4)
{
  _BOOL8 result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  uint64_t *v28;
  char v29;
  uint64_t **v30;
  uint64_t **v31;
  uint64_t v32;
  _QWORD *v33;
  const char *v34;
  char *v35;
  uint64_t v36;
  int v37;
  _BYTE v38[12];
  __int16 v39;
  int v40;
  _BYTE buf[12];
  __int16 v42;
  _DWORD __p[6];
  char v44;
  char v45;
  _BYTE v46[32];
  uint64_t v47;

  v37 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      v36 = v10;
      v16 = *a3;
      v19 = *(_QWORD *)(v10 + 48);
      v18 = v10 + 48;
      v17 = v19;
      if (!v19)
        goto LABEL_31;
      v20 = v18;
      do
      {
        v21 = *(_DWORD *)(v17 + 28);
        v22 = v21 < v16;
        if (v21 >= v16)
          v23 = (uint64_t *)v17;
        else
          v23 = (uint64_t *)(v17 + 8);
        if (!v22)
          v20 = v17;
        v17 = *v23;
      }
      while (*v23);
      if (v20 == v18 || v16 < *(_DWORD *)(v20 + 28))
LABEL_31:
        v20 = v18;
      v24 = *(_QWORD *)(a1 + 64);
      if (!v24)
        goto LABEL_42;
      v25 = a1 + 64;
      do
      {
        v26 = *(_DWORD *)(v24 + 32);
        v27 = v26 < v16;
        if (v26 >= v16)
          v28 = (uint64_t *)v24;
        else
          v28 = (uint64_t *)(v24 + 8);
        if (!v27)
          v25 = v24;
        v24 = *v28;
      }
      while (*v28);
      if (v25 != a1 + 64 && v16 >= *(_DWORD *)(v25 + 32))
      {
        v32 = *(_QWORD *)(v25 + 56);
        *(_QWORD *)buf = &v37;
        *(_OWORD *)(sub_1000AD000((uint64_t **)(v25 + 40), &v37, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 5) = *a4;
        *(_WORD *)buf = -256;
        buf[8] = 0;
        v45 = 0;
        memset(v46, 0, sizeof(v46));
        v47 = 0;
        if (v20 == v18
          && (*(unsigned int (**)(uint64_t, int *, _BYTE *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_1005C8994();
        }
        *(_QWORD *)v38 = &v46[8];
        sub_100279AA4((void ***)v38);
        if (v45 && v44 < 0)
          operator delete(*(void **)((char *)__p + 2));
        if (v32)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        v29 = byte_1022A3168;
        *(_DWORD *)v38 = *a3;
        *(_QWORD *)buf = v38;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)v38, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v29;
        *(_DWORD *)v38 = *a3;
        *(_QWORD *)buf = v38;
        v30 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)v38, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v30 + 8);
        *(_DWORD *)v38 = *a3;
        *(_QWORD *)buf = v38;
        v31 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)v38, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)buf = &v37;
        *(_OWORD *)(sub_1000AD000(v31 + 5, &v37, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 5) = *a4;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v20 == v18)
      {
        *(_DWORD *)buf = *a3;
        sub_1000C6190((uint64_t **)(v36 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021469B0);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v15;
    v42 = 1026;
    __p[0] = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  result = sub_1001BFF7C(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021469B0);
    v33 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v33 = (_QWORD *)*v33;
    *(_DWORD *)v38 = 136446466;
    *(_QWORD *)&v38[4] = v33;
    v39 = 1026;
    v40 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
      v38,
      18);
    v35 = (char *)v34;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLWifiService_Type::Notification, NotificationData_T = CLWifiService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLWifiService_Type::RegInfo]", "%s\n", v34);
    if (v35 != buf)
      free(v35);
    return 0;
  }
  return result;
}

void sub_1005BFDB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_1005B5FEC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1005BFDD8(uint64_t a1, uint64_t *a2, int a3, int a4)
{
  double Current;
  double v8;
  double v9;
  uint64_t v10;
  double v11;
  NSObject *v12;
  double v13;
  void **v14;
  NSObject *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  char *v20;
  int v21;
  const char *v22;
  const char *v23;
  NSObject *v24;
  NSObject *v25;
  char *v26;
  int v27;
  const char *v28;
  const char *v29;
  NSObject *v30;
  const char *v31;
  NSObject *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  size_t v37;
  NSObject *v38;
  void **v39;
  _QWORD *v40;
  _QWORD *v41;
  BOOL v42;
  void **v43;
  char *v44;
  NSObject *v45;
  NSObject *v46;
  int v47;
  int v48;
  int v49;
  int v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  BOOL v55;
  uint64_t *v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  int v60;
  BOOL v61;
  char v62;
  char v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  int v67;
  int v68;
  int v69;
  uint64_t **v70;
  void **v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  int v78;
  _QWORD v79[5];
  _QWORD v80[4];
  __int128 __p;
  uint64_t v82;
  double v83;
  void *v84[2];
  uint64_t v85;
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[4];
  __int128 v90;
  uint64_t v91;
  double v92;
  void *v93[2];
  uint64_t v94;
  int v95;
  int v96;
  void **v97;
  __int16 v98;
  double v99;
  _BYTE v100[66];
  void *v101;
  char v102;
  uint64_t v103;
  _BYTE buf[14];
  double v105;
  uint64_t v106;
  _QWORD v107[10];
  char v108;
  uint64_t v109;

  v95 = a3;
  if (*(double *)(a1 + 680) == 0.0)
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021469F0);
    v15 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
    {
      v16 = *(_DWORD *)(a1 + 284);
      v17 = *(unsigned __int8 *)(a1 + 246);
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)&buf[4] = v16;
      *(_WORD *)&buf[8] = 1026;
      *(_DWORD *)&buf[10] = v17;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "WsbClients, status, holdoff, clients, %{public}d, samplescan, %{public}d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021469F0);
      v18 = *(_DWORD *)(a1 + 284);
      v19 = *(unsigned __int8 *)(a1 + 246);
      LODWORD(v106) = 67240448;
      HIDWORD(v106) = v18;
      LOWORD(v107[0]) = 1026;
      *(_DWORD *)((char *)v107 + 2) = v19;
      v20 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "WsbClients, status, holdoff, clients, %{public}d, samplescan, %{public}d", &v106, 14);
      sub_100512490("Generic", 1, 0, 2, "void CLWifiService::wsbReportClientMetrics(const char *, int, BOOL)", "%s\n", v20);
      if (v20 != buf)
        free(v20);
    }
  }
  else
  {
    Current = CFAbsoluteTimeGetCurrent();
    v8 = *(double *)(a1 + 680);
    v9 = *(double *)(a1 + 688);
    v10 = *(unsigned int *)(a1 + 712);
    sub_1004E5E40((uint64_t)&v106);
    std::ostream::operator<<(&v106, v10);
    std::stringbuf::str(v93, v107);
    v11 = Current - v8;
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021469F0);
    v12 = qword_1022A0058;
    v13 = v11 / 60.0;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
    {
      v14 = v93;
      if (v94 < 0)
        v14 = (void **)v93[0];
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = v14;
      *(_WORD *)&buf[12] = 2050;
      v105 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "WsbMetric, clients, %{public}s, delta, %{public}.1f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021469F0);
      v71 = v93;
      if (v94 < 0)
        v71 = (void **)v93[0];
      *(_DWORD *)v100 = 136446466;
      *(_QWORD *)&v100[4] = v71;
      *(_WORD *)&v100[12] = 2050;
      *(double *)&v100[14] = v13;
      v72 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "WsbMetric, clients, %{public}s, delta, %{public}.1f", v100, 22);
      sub_100512490("Generic", 1, 0, 2, "void CLWifiService::wsbReportClientMetrics(const char *, int, BOOL)", "%s\n", v72);
      if (v72 != buf)
        free(v72);
    }
    v89[0] = _NSConcreteStackBlock;
    v89[1] = 3321888768;
    v89[2] = sub_1005C1268;
    v89[3] = &unk_102146850;
    if (SHIBYTE(v94) < 0)
    {
      sub_100115CE4(&v90, v93[0], (unint64_t)v93[1]);
    }
    else
    {
      v90 = *(_OWORD *)v93;
      v91 = v94;
    }
    v92 = v13;
    AnalyticsSendEventLazy(CFSTR("com.apple.clx.wsb.clients"), v89);
    if ((int)v10 >= 1)
    {
      if ((Current - v9) / 60.0 >= 1.0)
      {
        v21 = *(_DWORD *)(a1 + 720);
        v22 = "active:off";
        if (v21 == 1)
          v22 = "active:fences";
        if (v21 == 2)
          v23 = "active:fake";
        else
          v23 = v22;
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021469F0);
        v24 = qword_1022A0058;
        if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = v23;
          *(_WORD *)&buf[12] = 2050;
          v105 = (Current - v9) / 60.0;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "WsbMetric, regmode, %{public}s, duration, %{public}.1f", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021469F0);
          *(_DWORD *)v100 = 136446466;
          *(_QWORD *)&v100[4] = v23;
          *(_WORD *)&v100[12] = 2050;
          *(double *)&v100[14] = (Current - v9) / 60.0;
          LODWORD(v77) = 22;
          v73 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "WsbMetric, regmode, %{public}s, duration, %{public}.1f", v100, v77);
          sub_100512490("Generic", 1, 0, 2, "void CLWifiService::wsbReportClientMetrics(const char *, int, BOOL)", "%s\n", v73);
          if (v73 != buf)
            free(v73);
        }
        v88[0] = _NSConcreteStackBlock;
        v88[1] = 3221225472;
        v88[2] = sub_1005C135C;
        v88[3] = &unk_102139B90;
        v88[4] = v23;
        *(double *)&v88[5] = (Current - v9) / 60.0;
        AnalyticsSendEventLazy(CFSTR("com.apple.clx.wsb.regmode"), v88);
      }
      if (v13 >= 1.0)
      {
        v27 = *(_DWORD *)(a1 + 724);
        v28 = "rollover:off";
        if (v27 == 1)
          v28 = "rollover:partial";
        if (v27 == 2)
          v29 = "rollover:all";
        else
          v29 = v28;
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021469F0);
        v30 = qword_1022A0058;
        if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = v29;
          *(_WORD *)&buf[12] = 2050;
          v105 = v13;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "WsbMetric, regmode, %{public}s, duration, %{public}.1f", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021469F0);
          *(_DWORD *)v100 = 136446466;
          *(_QWORD *)&v100[4] = v29;
          *(_WORD *)&v100[12] = 2050;
          *(double *)&v100[14] = v13;
          LODWORD(v77) = 22;
          v74 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "WsbMetric, regmode, %{public}s, duration, %{public}.1f", v100, v77);
          sub_100512490("Generic", 1, 0, 2, "void CLWifiService::wsbReportClientMetrics(const char *, int, BOOL)", "%s\n", v74);
          if (v74 != buf)
            free(v74);
        }
        v87[0] = _NSConcreteStackBlock;
        v87[1] = 3221225472;
        v87[2] = sub_1005C1418;
        v87[3] = &unk_102139B90;
        v87[4] = v29;
        *(double *)&v87[5] = v13;
        AnalyticsSendEventLazy(CFSTR("com.apple.clx.wsb.regmode"), v87);
        if (*(_BYTE *)(a1 + 728))
          v31 = "profile:dynamic";
        else
          v31 = "profile:standard";
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021469F0);
        v32 = qword_1022A0058;
        if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = v31;
          *(_WORD *)&buf[12] = 2050;
          v105 = v13;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "WsbMetric, regmode, %{public}s, duration, %{public}.1f", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021469F0);
          *(_DWORD *)v100 = 136446466;
          *(_QWORD *)&v100[4] = v31;
          *(_WORD *)&v100[12] = 2050;
          *(double *)&v100[14] = v13;
          LODWORD(v77) = 22;
          v75 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "WsbMetric, regmode, %{public}s, duration, %{public}.1f", v100, v77);
          sub_100512490("Generic", 1, 0, 2, "void CLWifiService::wsbReportClientMetrics(const char *, int, BOOL)", "%s\n", v75);
          if (v75 != buf)
            free(v75);
        }
        v86[0] = _NSConcreteStackBlock;
        v86[1] = 3221225472;
        v86[2] = sub_1005C14D4;
        v86[3] = &unk_102139B90;
        v86[4] = v31;
        *(double *)&v86[5] = v13;
        AnalyticsSendEventLazy(CFSTR("com.apple.clx.wsb.regmode"), v86);
        v78 = a4;
        v33 = *(_QWORD **)(a1 + 696);
        if (v33 != (_QWORD *)(a1 + 704))
        {
          do
          {
            sub_1004E5E40((uint64_t)v100);
            v36 = sub_100263F7C(v100, (uint64_t)"client:", 7);
            v37 = strlen((const char *)v33[5]);
            sub_100263F7C(v36, v33[5], v37);
            std::stringbuf::str(v84, &v100[8]);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021469F0);
            v38 = qword_1022A0058;
            if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
            {
              v39 = v84;
              if (v85 < 0)
                v39 = (void **)v84[0];
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = v39;
              *(_WORD *)&buf[12] = 2050;
              v105 = v13;
              _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "WsbMetric, regmode, %{public}s, duration, %{public}.1f", buf, 0x16u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0050 != -1)
                dispatch_once(&qword_1022A0050, &stru_1021469F0);
              v43 = v84;
              if (v85 < 0)
                v43 = (void **)v84[0];
              v96 = 136446466;
              v97 = v43;
              v98 = 2050;
              v99 = v13;
              LODWORD(v77) = 22;
              v44 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "WsbMetric, regmode, %{public}s, duration, %{public}.1f", &v96, v77);
              sub_100512490("Generic", 1, 0, 2, "void CLWifiService::wsbReportClientMetrics(const char *, int, BOOL)", "%s\n", v44);
              if (v44 != buf)
                free(v44);
            }
            v80[0] = _NSConcreteStackBlock;
            v80[1] = 3321888768;
            v80[2] = sub_1005C1590;
            v80[3] = &unk_102146850;
            if (SHIBYTE(v85) < 0)
            {
              sub_100115CE4(&__p, v84[0], (unint64_t)v84[1]);
            }
            else
            {
              __p = *(_OWORD *)v84;
              v82 = v85;
            }
            v83 = v13;
            AnalyticsSendEventLazy(CFSTR("com.apple.clx.wsb.regmode"), v80);
            if (SHIBYTE(v82) < 0)
              operator delete((void *)__p);
            if (SHIBYTE(v85) < 0)
              operator delete(v84[0]);
            *(_QWORD *)v100 = v34;
            *(_QWORD *)&v100[*(_QWORD *)(v34 - 24)] = v35;
            if (v102 < 0)
              operator delete(v101);
            std::streambuf::~streambuf(&v100[8]);
            std::ios::~ios(&v103);
            v40 = (_QWORD *)v33[1];
            if (v40)
            {
              do
              {
                v41 = v40;
                v40 = (_QWORD *)*v40;
              }
              while (v40);
            }
            else
            {
              do
              {
                v41 = (_QWORD *)v33[2];
                v42 = *v41 == (_QWORD)v33;
                v33 = v41;
              }
              while (!v42);
            }
            v33 = v41;
          }
          while (v41 != (_QWORD *)(a1 + 704));
        }
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021469F0);
        a4 = v78;
        v45 = qword_1022A0058;
        if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134349056;
          *(double *)&buf[4] = v13;
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "WsbMetric, regmode, total, duration, %{public}.1f", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021469F0);
          *(_DWORD *)v100 = 134349056;
          *(double *)&v100[4] = v13;
          LODWORD(v77) = 12;
          v76 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "WsbMetric, regmode, total, duration, %{public}.1f", v100, v77);
          sub_100512490("Generic", 1, 0, 2, "void CLWifiService::wsbReportClientMetrics(const char *, int, BOOL)", "%s\n", v76);
          if (v76 != buf)
            free(v76);
          a4 = v78;
        }
        v79[0] = _NSConcreteStackBlock;
        v79[1] = 3221225472;
        v79[2] = sub_1005C1658;
        v79[3] = &unk_102131FE8;
        *(double *)&v79[4] = v13;
        AnalyticsSendEventLazy(CFSTR("com.apple.clx.wsb.regmode"), v79);
      }
      else
      {
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021469F0);
        v25 = qword_1022A0058;
        if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "WsbMetric, regmode, subminute", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021469F0);
          *(_WORD *)v100 = 0;
          LODWORD(v77) = 2;
          v26 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "WsbMetric, regmode, subminute", v100, v77);
          sub_100512490("Generic", 1, 0, 2, "void CLWifiService::wsbReportClientMetrics(const char *, int, BOOL)", "%s\n", v26);
          if (v26 != buf)
            free(v26);
        }
      }
    }
    *(double *)(a1 + 680) = Current;
    *(double *)(a1 + 688) = Current;
    if (SHIBYTE(v91) < 0)
      operator delete((void *)v90);
    if (SHIBYTE(v94) < 0)
      operator delete(v93[0]);
    if (v108 < 0)
      operator delete((void *)v107[8]);
    std::streambuf::~streambuf(v107);
    std::ios::~ios(&v109);
  }
  if (a4)
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021469F0);
    v46 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
    {
      v47 = *(_DWORD *)(a1 + 284);
      v48 = *(unsigned __int8 *)(a1 + 246);
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)&buf[4] = v47;
      *(_WORD *)&buf[8] = 1026;
      *(_DWORD *)&buf[10] = v48;
      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "WsbClients, status, reportonly, clients, %{public}d, dummyscan, %{public}d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021469F0);
      v49 = *(_DWORD *)(a1 + 284);
      v50 = *(unsigned __int8 *)(a1 + 246);
      LODWORD(v106) = 67240448;
      HIDWORD(v106) = v49;
      LOWORD(v107[0]) = 1026;
      *(_DWORD *)((char *)v107 + 2) = v50;
      LODWORD(v77) = 14;
      v51 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "WsbClients, status, reportonly, clients, %{public}d, dummyscan, %{public}d", &v106, v77);
      sub_100512490("Generic", 1, 0, 2, "void CLWifiService::wsbReportClientMetrics(const char *, int, BOOL)", "%s\n", v51);
      if (v51 != buf)
        free(v51);
    }
  }
  else
  {
    v52 = *(_QWORD *)(a1 + 64);
    if (!v52)
      goto LABEL_146;
    v53 = a1 + 64;
    do
    {
      v54 = *(_DWORD *)(v52 + 32);
      v55 = v54 < 12;
      if (v54 >= 12)
        v56 = (uint64_t *)v52;
      else
        v56 = (uint64_t *)(v52 + 8);
      if (!v55)
        v53 = v52;
      v52 = *v56;
    }
    while (*v56);
    if (v53 != a1 + 64 && *(int *)(v53 + 32) <= 12 && (v57 = *(_QWORD *)(v53 + 56)) != 0)
    {
      v58 = *(_QWORD **)(v53 + 40);
      v59 = (_QWORD *)(v53 + 48);
      if (v58 == (_QWORD *)(v53 + 48))
      {
        v69 = 0;
        *(_DWORD *)(a1 + 724) = 0;
      }
      else
      {
        v60 = 0;
        v61 = 0;
        v62 = *(_BYTE *)(a1 + 728);
        do
        {
          v63 = *((_BYTE *)v58 + 44) | v61;
          v61 = v63 != 0;
          v64 = (_QWORD *)v58[1];
          v65 = v58;
          if (v64)
          {
            do
            {
              v66 = v64;
              v64 = (_QWORD *)*v64;
            }
            while (v64);
          }
          else
          {
            do
            {
              v66 = (_QWORD *)v65[2];
              v42 = *v66 == (_QWORD)v65;
              v65 = v66;
            }
            while (!v42);
          }
          v60 += *((unsigned __int8 *)v58 + 45);
          v62 |= *((_DWORD *)v58 + 10) < 3600;
          v58 = v66;
        }
        while (v66 != v59);
        *(_BYTE *)(a1 + 728) = v62;
        if (v57 == v60)
          v67 = 2;
        else
          v67 = 1;
        if (v60)
          v68 = v67;
        else
          v68 = 0;
        *(_DWORD *)(a1 + 724) = v68;
        if (v63)
        {
          if (*(_BYTE *)(a1 + 246))
            v69 = 2;
          else
            v69 = 1;
        }
        else
        {
          v69 = 0;
        }
      }
      *(_DWORD *)(a1 + 720) = v69;
    }
    else
    {
LABEL_146:
      sub_100008848(a1 + 696, *(_QWORD **)(a1 + 704));
      *(_QWORD *)(a1 + 696) = a1 + 704;
      *(_QWORD *)(a1 + 712) = 0;
      *(_QWORD *)(a1 + 704) = 0;
      *(_QWORD *)(a1 + 720) = 0;
      *(_BYTE *)(a1 + 728) = 0;
    }
    v70 = (uint64_t **)(a1 + 696);
    if (a2)
    {
      *(_QWORD *)buf = &v95;
      sub_100041CE0(v70, &v95, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[5] = a2;
    }
    else
    {
      sub_1000B072C((uint64_t)v70, &v95);
    }
  }
}

void sub_1005C11A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,void *a62,uint64_t a63)
{
  char a67;

  if (a60 < 0)
    operator delete(__p);
  if (a67 < 0)
    operator delete(a62);
  sub_1004E5F2C((uint64_t)&STACK[0x940]);
  _Unwind_Resume(a1);
}

uint64_t sub_1005C1258()
{
  return 1;
}

uint64_t sub_1005C1260()
{
  return 1;
}

NSDictionary *sub_1005C1268(uint64_t a1)
{
  _QWORD *v2;
  _QWORD v4[2];
  _QWORD v5[2];

  v4[0] = CFSTR("clients");
  v2 = (_QWORD *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    v2 = (_QWORD *)*v2;
  v4[1] = CFSTR("duration");
  v5[0] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v2);
  v5[1] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 56));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 2);
}

_QWORD *sub_1005C1318(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  __int128 v3;

  result = (_QWORD *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
    return sub_100115CE4(result, *(void **)(a2 + 32), *(_QWORD *)(a2 + 40));
  v3 = *(_OWORD *)(a2 + 32);
  result[2] = *(_QWORD *)(a2 + 48);
  *(_OWORD *)result = v3;
  return result;
}

void sub_1005C1348(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

NSDictionary *sub_1005C135C(uint64_t a1)
{
  _QWORD v3[3];
  _QWORD v4[3];

  v4[0] = CFSTR("active");
  v3[0] = CFSTR("mode");
  v3[1] = CFSTR("submode");
  v4[1] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", *(_QWORD *)(a1 + 32));
  v3[2] = CFSTR("duration");
  v4[2] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 40));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 3);
}

NSDictionary *sub_1005C1418(uint64_t a1)
{
  _QWORD v3[3];
  _QWORD v4[3];

  v4[0] = CFSTR("rollover");
  v3[0] = CFSTR("mode");
  v3[1] = CFSTR("submode");
  v4[1] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", *(_QWORD *)(a1 + 32));
  v3[2] = CFSTR("duration");
  v4[2] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 40));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 3);
}

NSDictionary *sub_1005C14D4(uint64_t a1)
{
  _QWORD v3[3];
  _QWORD v4[3];

  v4[0] = CFSTR("profile");
  v3[0] = CFSTR("mode");
  v3[1] = CFSTR("submode");
  v4[1] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", *(_QWORD *)(a1 + 32));
  v3[2] = CFSTR("duration");
  v4[2] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 40));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 3);
}

NSDictionary *sub_1005C1590(uint64_t a1)
{
  _QWORD *v2;
  _QWORD v4[3];
  _QWORD v5[3];

  v5[0] = CFSTR("client");
  v4[0] = CFSTR("mode");
  v4[1] = CFSTR("submode");
  v2 = (_QWORD *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    v2 = (_QWORD *)*v2;
  v5[1] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v2);
  v4[2] = CFSTR("duration");
  v5[2] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 56));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 3);
}

NSDictionary *sub_1005C1658(uint64_t a1)
{
  _QWORD v2[3];
  _QWORD v3[3];

  v2[0] = CFSTR("mode");
  v2[1] = CFSTR("submode");
  v3[0] = CFSTR("total");
  v3[1] = CFSTR("total");
  v2[2] = CFSTR("duration");
  v3[2] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 32));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v3, v2, 3);
}

uint64_t sub_1005C16F8(_QWORD *a1)
{
  _QWORD *v2;
  NSObject *v3;
  const char *v5;
  CFArrayRef *v6;
  __int16 v7;
  _QWORD *v8;
  __int16 v9;
  CFArrayRef theArray[205];

  v2 = a1 + 103;
  v8 = a1 + 103;
  (*(void (**)(_QWORD *))(a1[103] + 16))(a1 + 103);
  v9 = 256;
  if (a1[39] && a1[38])
  {
    theArray[0] = 0;
    WiFiDeviceClientCopyHostedNetworks();
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146A30);
    v3 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(theArray[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning no device / manager", (uint8_t *)theArray, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(theArray, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146A30);
      v7 = 0;
      _os_log_send_and_compose_impl(2, 0, theArray, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning no device / manager", &v7, 2);
      v6 = (CFArrayRef *)v5;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiService::getHostedNetwork(CLWifiService_Type::AccessPoint &) const", "%s\n", v5);
      if (v6 != theArray)
        free(v6);
    }
  }
  (*(void (**)(_QWORD *))(*v2 + 24))(v2);
  return 0;
}

void sub_1005C1948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005C197C()
{
  int v0;
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unsigned int v7;

  v7 = 0;
  sub_1001E4804(&v5);
  v0 = sub_1001E4B84(v5, "WifiScanIterations", &v7);
  v1 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  if (v0)
    return v7;
  else
    return 1;
}

void sub_1005C1A08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005C1A1C()
{
  int v0;
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  int v7;

  v7 = 0;
  sub_1001E4804(&v5);
  v0 = sub_1001E4B84(v5, "WifiScanDwellTime", &v7);
  v1 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  if (v0)
    return v7;
  else
    return 110;
}

void sub_1005C1AAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

__CFDictionary *sub_1005C1AC0(uint64_t a1, int a2, int a3, int a4, int **a5, int **a6, uint64_t a7, int a8, char a9)
{
  CFNumberRef v11;
  CFNumberRef v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  CFNumberRef v17;
  BOOL v18;
  NSObject *v23;
  __CFDictionary *Mutable;
  CFBooleanRef v25;
  uint64_t i;
  NSObject *v27;
  const char *v29;
  char *v30;
  const char *v31;
  char *v32;
  int v33;
  CFNumberRef v34;
  int **v35;
  int v38;
  int v39;
  int valuePtr;
  int v41;
  int v42;
  int v43;
  _BYTE v44[10];
  CFNumberRef v45;
  _BYTE v46[10];
  __int16 v47;
  CFNumberRef v48;
  __int16 v49;
  CFNumberRef v50;
  __int16 v51;
  CFNumberRef v52;
  _BYTE buf[32];
  _BYTE v54[32];
  CFBooleanRef v55;

  v41 = a3;
  v42 = a2;
  v39 = a7;
  valuePtr = a4;
  v38 = a8;
  v11 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
  v12 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v41);
  v13 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v39);
  v14 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v42);
  v15 = CFNumberCreate(0, kCFNumberSInt32Type, &unk_101BB74A4);
  v16 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v38);
  v17 = v16;
  if (v11)
    v18 = v12 == 0;
  else
    v18 = 1;
  if (v18 || v13 == 0 || v14 == 0 || v15 == 0 || v16 == 0)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v23 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134350336;
      *(_QWORD *)&buf[4] = v11;
      *(_WORD *)&buf[12] = 2050;
      *(_QWORD *)&buf[14] = v12;
      *(_WORD *)&buf[22] = 2050;
      *(_QWORD *)&buf[24] = v13;
      *(_WORD *)v54 = 2050;
      *(_QWORD *)&v54[2] = v14;
      *(_WORD *)&v54[10] = 2050;
      *(_QWORD *)&v54[12] = v15;
      *(_WORD *)&v54[20] = 2050;
      *(_QWORD *)&v54[22] = v17;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "could not create scan params mode %{public}p type %{public}p dwell %{public}p scans %{public}p flag %{public}p age %{public}p", buf, 0x3Eu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      v43 = 134350336;
      *(_QWORD *)v44 = v11;
      *(_WORD *)&v44[8] = 2050;
      v45 = v12;
      *(_WORD *)v46 = 2050;
      *(_QWORD *)&v46[2] = v13;
      v47 = 2050;
      v48 = v14;
      v49 = 2050;
      v50 = v15;
      v51 = 2050;
      v52 = v17;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "could not create scan params mode %{public}p type %{public}p dwell %{public}p scans %{public}p flag %{public}p age %{public}p", &v43, 62);
      v30 = (char *)v29;
      sub_100512490("Generic", 1, 0, 0, "CFMutableDictionaryRef CLWifiService::createScanOptions(int, apple80211_scan_type, int, const Iter &, const Iter &, cl::chrono::milliseconds, cl::chrono::seconds, BOOL) [Iter = const int *]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    Mutable = 0;
  }
  else
  {
    v34 = v15;
    v35 = a6;
    *(_QWORD *)buf = kCFBooleanFalse;
    *(_QWORD *)&buf[8] = kCFBooleanTrue;
    *(_QWORD *)&buf[16] = v11;
    *(_QWORD *)&buf[24] = v12;
    *(_QWORD *)v54 = v13;
    *(_QWORD *)&v54[8] = v14;
    if (a9)
      v25 = kCFBooleanTrue;
    else
      v25 = kCFBooleanFalse;
    *(_QWORD *)&v54[16] = v16;
    *(_QWORD *)&v54[24] = v25;
    v55 = kCFBooleanFalse;
    Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 9, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    for (i = 0; i != 9; ++i)
      CFDictionarySetValue(Mutable, off_102146B30[i], *(const void **)&buf[i * 8]);
    if (*a5 != *v35)
      sub_1005C8B1C(a1, a5, v35, v15, Mutable);
  }
  if (v11)
    CFRelease(v11);
  if (v12)
    CFRelease(v12);
  if (v13)
    CFRelease(v13);
  if (v14)
    CFRelease(v14);
  if (v15)
    CFRelease(v15);
  if (v17)
    CFRelease(v17);
  if (!Mutable)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146A30);
    v27 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109888;
      *(_DWORD *)&buf[4] = v42;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v41;
      *(_WORD *)&buf[14] = 1024;
      *(_DWORD *)&buf[16] = valuePtr;
      *(_WORD *)&buf[20] = 2048;
      *(_QWORD *)&buf[22] = a7;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#Warning failed to create scan options (numScans=%d, scan_type=%d, scanModes=%d, dwellTime=%lld)", buf, 0x1Eu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146A30);
      v43 = 67109888;
      *(_DWORD *)v44 = v42;
      *(_WORD *)&v44[4] = 1024;
      *(_DWORD *)&v44[6] = v41;
      LOWORD(v45) = 1024;
      *(_DWORD *)((char *)&v45 + 2) = valuePtr;
      HIWORD(v45) = 2048;
      *(_QWORD *)v46 = a7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning failed to create scan options (numScans=%d, scan_type=%d, scanModes=%d, dwellTime=%lld)", &v43, 30, v33, v34);
      v32 = (char *)v31;
      sub_100512490("Generic", 1, 0, 2, "CFMutableDictionaryRef CLWifiService::createScanOptions(int, apple80211_scan_type, int, const Iter &, const Iter &, cl::chrono::milliseconds, cl::chrono::seconds, BOOL) [Iter = const int *]", "%s\n", v31);
      if (v32 != buf)
        free(v32);
    }
  }
  return Mutable;
}

__CFDictionary *sub_1005C2030(uint64_t a1, int a2, int a3, int a4, int **a5, int **a6, uint64_t a7, int a8, char a9)
{
  CFNumberRef v11;
  CFNumberRef v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  CFNumberRef v17;
  BOOL v18;
  NSObject *v23;
  __CFDictionary *Mutable;
  CFBooleanRef v25;
  uint64_t i;
  NSObject *v27;
  const char *v29;
  char *v30;
  const char *v31;
  char *v32;
  int v33;
  CFNumberRef v34;
  int **v35;
  int v38;
  int v39;
  int valuePtr;
  int v41;
  int v42;
  int v43;
  _BYTE v44[10];
  CFNumberRef v45;
  _BYTE v46[10];
  __int16 v47;
  CFNumberRef v48;
  __int16 v49;
  CFNumberRef v50;
  __int16 v51;
  CFNumberRef v52;
  _BYTE buf[32];
  _BYTE v54[32];
  CFBooleanRef v55;

  v41 = a3;
  v42 = a2;
  v39 = a7;
  valuePtr = a4;
  v38 = a8;
  v11 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
  v12 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v41);
  v13 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v39);
  v14 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v42);
  v15 = CFNumberCreate(0, kCFNumberSInt32Type, &unk_101BB74A8);
  v16 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v38);
  v17 = v16;
  if (v11)
    v18 = v12 == 0;
  else
    v18 = 1;
  if (v18 || v13 == 0 || v14 == 0 || v15 == 0 || v16 == 0)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v23 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134350336;
      *(_QWORD *)&buf[4] = v11;
      *(_WORD *)&buf[12] = 2050;
      *(_QWORD *)&buf[14] = v12;
      *(_WORD *)&buf[22] = 2050;
      *(_QWORD *)&buf[24] = v13;
      *(_WORD *)v54 = 2050;
      *(_QWORD *)&v54[2] = v14;
      *(_WORD *)&v54[10] = 2050;
      *(_QWORD *)&v54[12] = v15;
      *(_WORD *)&v54[20] = 2050;
      *(_QWORD *)&v54[22] = v17;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "could not create scan params mode %{public}p type %{public}p dwell %{public}p scans %{public}p flag %{public}p age %{public}p", buf, 0x3Eu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      v43 = 134350336;
      *(_QWORD *)v44 = v11;
      *(_WORD *)&v44[8] = 2050;
      v45 = v12;
      *(_WORD *)v46 = 2050;
      *(_QWORD *)&v46[2] = v13;
      v47 = 2050;
      v48 = v14;
      v49 = 2050;
      v50 = v15;
      v51 = 2050;
      v52 = v17;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "could not create scan params mode %{public}p type %{public}p dwell %{public}p scans %{public}p flag %{public}p age %{public}p", &v43, 62);
      v30 = (char *)v29;
      sub_100512490("Generic", 1, 0, 0, "CFMutableDictionaryRef CLWifiService::createScanOptions(int, apple80211_scan_type, int, const Iter &, const Iter &, cl::chrono::milliseconds, cl::chrono::seconds, BOOL) [Iter = int *]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    Mutable = 0;
  }
  else
  {
    v34 = v15;
    v35 = a6;
    *(_QWORD *)buf = kCFBooleanFalse;
    *(_QWORD *)&buf[8] = kCFBooleanTrue;
    *(_QWORD *)&buf[16] = v11;
    *(_QWORD *)&buf[24] = v12;
    *(_QWORD *)v54 = v13;
    *(_QWORD *)&v54[8] = v14;
    if (a9)
      v25 = kCFBooleanTrue;
    else
      v25 = kCFBooleanFalse;
    *(_QWORD *)&v54[16] = v16;
    *(_QWORD *)&v54[24] = v25;
    v55 = kCFBooleanFalse;
    Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 9, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    for (i = 0; i != 9; ++i)
      CFDictionarySetValue(Mutable, off_102146B30[i], *(const void **)&buf[i * 8]);
    if (*a5 != *v35)
      sub_1005C8E1C(a1, a5, v35, v15, Mutable);
  }
  if (v11)
    CFRelease(v11);
  if (v12)
    CFRelease(v12);
  if (v13)
    CFRelease(v13);
  if (v14)
    CFRelease(v14);
  if (v15)
    CFRelease(v15);
  if (v17)
    CFRelease(v17);
  if (!Mutable)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146A30);
    v27 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109888;
      *(_DWORD *)&buf[4] = v42;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v41;
      *(_WORD *)&buf[14] = 1024;
      *(_DWORD *)&buf[16] = valuePtr;
      *(_WORD *)&buf[20] = 2048;
      *(_QWORD *)&buf[22] = a7;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#Warning failed to create scan options (numScans=%d, scan_type=%d, scanModes=%d, dwellTime=%lld)", buf, 0x1Eu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146A30);
      v43 = 67109888;
      *(_DWORD *)v44 = v42;
      *(_WORD *)&v44[4] = 1024;
      *(_DWORD *)&v44[6] = v41;
      LOWORD(v45) = 1024;
      *(_DWORD *)((char *)&v45 + 2) = valuePtr;
      HIWORD(v45) = 2048;
      *(_QWORD *)v46 = a7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning failed to create scan options (numScans=%d, scan_type=%d, scanModes=%d, dwellTime=%lld)", &v43, 30, v33, v34);
      v32 = (char *)v31;
      sub_100512490("Generic", 1, 0, 2, "CFMutableDictionaryRef CLWifiService::createScanOptions(int, apple80211_scan_type, int, const Iter &, const Iter &, cl::chrono::milliseconds, cl::chrono::seconds, BOOL) [Iter = int *]", "%s\n", v31);
      if (v32 != buf)
        free(v32);
    }
  }
  return Mutable;
}

uint64_t sub_1005C25A0(_QWORD *a1, uint64_t *a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v16;
  __int128 __p;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _QWORD *v23;
  __int16 v24;

  v6 = a1 + 103;
  v23 = a1 + 103;
  (*(void (**)(_QWORD *))(a1[103] + 16))(a1 + 103);
  v24 = 256;
  v7 = a1[58];
  v8 = a1[59];
  if (v7 != v8)
  {
    v9 = (__int128 *)(v7 + 8);
    do
    {
      v10 = (uint64_t)v9 - 8;
      v16 = *((_QWORD *)v9 - 1);
      if (*((char *)v9 + 23) < 0)
      {
        sub_100115CE4(&__p, *(void **)v9, *((_QWORD *)v9 + 1));
      }
      else
      {
        v11 = *v9;
        v18 = *((_QWORD *)v9 + 2);
        __p = v11;
      }
      v12 = *(__int128 *)((char *)v9 + 24);
      v13 = *(__int128 *)((char *)v9 + 40);
      v14 = *(__int128 *)((char *)v9 + 56);
      v22 = *((_QWORD *)v9 + 9);
      v20 = v13;
      v21 = v14;
      v19 = v12;
      sub_1005C26E8(a2, (uint64_t)&v16);
      if (SHIBYTE(v18) < 0)
        operator delete((void *)__p);
      v9 = (__int128 *)((char *)v9 + 88);
    }
    while (v10 + 88 != v8);
  }
  *a3 = a1[57];
  return (*(uint64_t (**)(_QWORD *))(a1[103] + 24))(v6);
}

void sub_1005C26BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  sub_10187E514((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t sub_1005C26E8(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _QWORD v23[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (v7 >= v6)
  {
    v13 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v7 - *a1) >> 3);
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) > 0x2E8BA2E8BA2E8BALL)
      sub_100259694();
    v15 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v15 > v14)
      v14 = 2 * v15;
    if (v15 >= 0x1745D1745D1745DLL)
      v16 = 0x2E8BA2E8BA2E8BALL;
    else
      v16 = v14;
    v23[4] = result;
    if (v16)
      v17 = (char *)sub_100279B30(result, v16);
    else
      v17 = 0;
    v18 = &v17[88 * v13];
    v23[0] = v17;
    v23[1] = v18;
    v23[3] = &v17[88 * v16];
    *(_QWORD *)v18 = *(_QWORD *)a2;
    v19 = *(_OWORD *)(a2 + 8);
    *((_QWORD *)v18 + 3) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(v18 + 8) = v19;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v21 = *(_OWORD *)(a2 + 48);
    v20 = *(_OWORD *)(a2 + 64);
    v22 = *(_QWORD *)(a2 + 80);
    *((_OWORD *)v18 + 2) = *(_OWORD *)(a2 + 32);
    *((_OWORD *)v18 + 3) = v21;
    *((_QWORD *)v18 + 10) = v22;
    *((_OWORD *)v18 + 4) = v20;
    v23[2] = v18 + 88;
    sub_1000591E8(a1, v23);
    v12 = a1[1];
    result = sub_10005925C((uint64_t)v23);
  }
  else
  {
    *(_QWORD *)v7 = *(_QWORD *)a2;
    v8 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(v7 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(v7 + 8) = v8;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v9 = *(_OWORD *)(a2 + 32);
    v10 = *(_OWORD *)(a2 + 48);
    v11 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(v7 + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)(v7 + 48) = v10;
    *(_OWORD *)(v7 + 64) = v11;
    *(_OWORD *)(v7 + 32) = v9;
    v12 = v7 + 88;
    a1[1] = v7 + 88;
  }
  a1[1] = v12;
  return result;
}

void sub_1005C2864(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10005925C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005C2878(_QWORD *a1, uint64_t *a2, _QWORD *a3)
{
  _QWORD *v6;

  v6 = a1 + 103;
  (*(void (**)(_QWORD *))(a1[103] + 16))(a1 + 103);
  if (a1 + 62 != a2)
    sub_10055A264(a2, a1[62], a1[63], 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a1[63] - a1[62]) >> 3));
  *a3 = a1[61];
  return (*(uint64_t (**)(_QWORD *))(a1[103] + 24))(v6);
}

void sub_1005C2918(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005C2930(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  void *__p[3];
  char v12;
  void *__dst[2];
  uint64_t v14;

  if (*(char *)(a5 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a5, *(_QWORD *)(a5 + 8));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a5;
    v14 = *(_QWORD *)(a5 + 16);
  }
  LOBYTE(__p[0]) = 0;
  v12 = 0;
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, void **, void **))(*(_QWORD *)a1 + 256))(a1, a2, a3, 0, a4, __dst, __p);
  if (v12 && __p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
  return v9;
}

void sub_1005C29F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a12)
    sub_10190092C((uint64_t)&a9);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005C2A1C(uint64_t a1, unsigned int a2, int a3, int a4, int a5, void **a6, uint64_t a7)
{
  const char *v12;
  int v13;
  const char *v14;
  const char *v15;
  NSObject *v16;
  void *v17;
  uint64_t v18;
  NSObject *v19;
  int v20;
  void *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  const char *v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31[2];
  void *v32;
  void *v33;
  void *v34;
  char v35;
  void *__p[2];
  void *v37;
  _QWORD v38[4];
  __int128 v39;
  void *v40;
  const char *v41;
  const char *v42;
  const char *v43;
  _DWORD v44[2];
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  __int16 v49;
  int v50;
  int v51;
  void *v52;
  __int16 v53;
  const char *v54;
  __int16 v55;
  const char *v56;
  __int16 v57;
  const char *v58;
  char v59;
  uint8_t buf[4];
  _BYTE v61[10];
  const char *v62;
  _BYTE v63[10];
  __int16 v64;
  const char *v65;

  HIDWORD(v29) = a4;
  v12 = sub_1000A9998(a2);
  if (a5)
    v13 = 2;
  else
    v13 = 1;
  HIDWORD(v28) = a5;
  LODWORD(v29) = v13;
  if (a5)
    v14 = "passive";
  else
    v14 = "active";
  if (a3)
    v15 = "low";
  else
    v15 = "normal";
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021469D0);
  v16 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v17 = a6;
    if (*((char *)a6 + 23) < 0)
      v17 = *a6;
    *(_DWORD *)buf = 136446978;
    *(_QWORD *)v61 = v17;
    *(_WORD *)&v61[8] = 2082;
    v62 = v12;
    *(_WORD *)v63 = 2082;
    *(_QWORD *)&v63[2] = v14;
    v64 = 2082;
    v65 = v15;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "WsMetric, scanrequest, %{public}s, %{public}s, %{public}s, %{public}s", buf, 0x2Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v22 = a6;
    if (*((char *)a6 + 23) < 0)
      v22 = *a6;
    v51 = 136446978;
    v52 = v22;
    v53 = 2082;
    v54 = v12;
    v55 = 2082;
    v56 = v14;
    v57 = 2082;
    v58 = v15;
    LODWORD(v28) = 42;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WsMetric, scanrequest, %{public}s, %{public}s, %{public}s, %{public}s", &v51, v28, v29);
    v24 = (uint8_t *)v23;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLWifiService::startScan(CLWifiService_Type::ScanType, BOOL, BOOL, BOOL, std::string, const std::optional<CLWifiService_Type::Channels> &)", "%s\n", v23);
    if (v24 != buf)
      free(v24);
  }
  v38[0] = _NSConcreteStackBlock;
  v38[1] = 3321888768;
  v38[2] = sub_1005C2FC4;
  v38[3] = &unk_102146880;
  if (*((char *)a6 + 23) < 0)
  {
    sub_100115CE4(&v39, *a6, (unint64_t)a6[1]);
  }
  else
  {
    v39 = *(_OWORD *)a6;
    v40 = a6[2];
  }
  v41 = v12;
  v42 = v14;
  v43 = v15;
  AnalyticsSendEventLazy(CFSTR("com.apple.clx.wifiservice.scanrequest"), v38);
  if (*((char *)a6 + 23) < 0)
  {
    sub_100115CE4(__p, *a6, (unint64_t)a6[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a6;
    v37 = a6[2];
  }
  sub_1005C30C0(a1, a2, v29, a3, SHIDWORD(v29), (uint64_t)__p, a7, &v51);
  if (SHIBYTE(v37) < 0)
    operator delete(__p[0]);
  if (v59)
  {
    sub_100278210((uint64_t)v31, (uint64_t *)&v51);
    v18 = sub_1005AC4E0(a1, v31);
    if (v35 < 0)
      operator delete(v34);
    if (v32)
    {
      v33 = v32;
      operator delete(v32);
    }
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146A30);
    v19 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v20 = *(unsigned __int8 *)(a7 + 24);
      *(_DWORD *)buf = 67109888;
      *(_DWORD *)v61 = a2;
      *(_WORD *)&v61[4] = 1024;
      *(_DWORD *)&v61[6] = a3;
      LOWORD(v62) = 1024;
      *(_DWORD *)((char *)&v62 + 2) = HIDWORD(v28);
      HIWORD(v62) = 1026;
      *(_DWORD *)v63 = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "Unable to convert type: %d, isLowPriority: %d, isPassiveScan: %d, w/ overriding channels: %{public}d to scan parameters. Not attempting to scan", buf, 0x1Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146A30);
      v25 = *(unsigned __int8 *)(a7 + 24);
      v44[0] = 67109888;
      v44[1] = a2;
      v45 = 1024;
      v46 = a3;
      v47 = 1024;
      v48 = HIDWORD(v28);
      v49 = 1026;
      v50 = v25;
      LODWORD(v28) = 26;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Unable to convert type: %d, isLowPriority: %d, isPassiveScan: %d, w/ overriding channels: %{public}d to scan parameters. Not attempting to scan", v44, v28);
      v27 = (uint8_t *)v26;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLWifiService::startScan(CLWifiService_Type::ScanType, BOOL, BOOL, BOOL, std::string, const std::optional<CLWifiService_Type::Channels> &)", "%s\n", v26);
      if (v27 != buf)
        free(v27);
    }
    v18 = 0;
  }
  sub_1005C80E4((uint64_t)&v51);
  if (SHIBYTE(v40) < 0)
    operator delete((void *)v39);
  return v18;
}

void sub_1005C2F60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_1005C80E4((uint64_t)&a49);
  if (a41 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

NSDictionary *sub_1005C2FC4(uint64_t a1)
{
  _QWORD *v2;
  NSString *v3;
  _QWORD v5[5];
  _QWORD v6[5];

  v5[0] = CFSTR("requester");
  v2 = (_QWORD *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    v2 = (_QWORD *)*v2;
  v6[0] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v2);
  v5[1] = CFSTR("type");
  v6[1] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", *(_QWORD *)(a1 + 56));
  v5[2] = CFSTR("activepassive");
  v6[2] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", *(_QWORD *)(a1 + 64));
  v5[3] = CFSTR("priority");
  v3 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", *(_QWORD *)(a1 + 72));
  v5[4] = CFSTR("daily");
  v6[3] = v3;
  v6[4] = &off_10221B288;
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v6, v5, 5);
}

void sub_1005C30C0(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _BYTE *a8@<X8>)
{
  const __CFDictionary *v14;
  __CFDictionary *v15;
  CFNumberRef v16;
  CFTypeRef v17;
  CFBooleanRef v18;
  CFBooleanRef v19;
  NSObject *v20;
  std::string *p_p;
  NSObject *v22;
  const char *v23;
  std::string *v24;
  uint64_t v25;
  std::string *p_buf;
  std::string *v27;
  std::string *v28;
  void *__dst[2];
  uint64_t v30;
  int valuePtr;
  std::string buf;
  char v33;
  _DWORD v34[2];
  __int16 v35;
  std::string *v36;
  std::string __p;
  std::string::size_type v38;
  void *v39;
  char v40;

  valuePtr = a3;
  v14 = sub_1005C48E4(a1, a2);
  if (v14)
  {
    v15 = v14;
    v16 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
    v17 = CFAutorelease(v16);
    if (a4)
      v18 = kCFBooleanTrue;
    else
      v18 = kCFBooleanFalse;
    if (a5)
      v19 = kCFBooleanTrue;
    else
      v19 = kCFBooleanFalse;
    CFDictionarySetValue(v15, CFSTR("SCAN_TYPE"), v17);
    CFDictionarySetValue(v15, CFSTR("SCAN_LOW_PRIORITY"), v18);
    CFDictionarySetValue(v15, CFSTR("SCAN_LOW_LATENCY"), v19);
    if ((a2 - 11) <= 1 && *(_BYTE *)(a7 + 24))
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      v20 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        if (!*(_BYTE *)(a7 + 24))
          sub_10028DF3C();
        sub_100CF250C((unsigned int **)a7, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        LODWORD(buf.__r_.__value_.__l.__data_) = 67240450;
        HIDWORD(buf.__r_.__value_.__r.__words[0]) = a2;
        LOWORD(buf.__r_.__value_.__r.__words[1]) = 2082;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)p_p;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "WifiScan, type, %{public}d, overriding channels, %{public}s", (uint8_t *)&buf, 0x12u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021469D0);
        if (!*(_BYTE *)(a7 + 24))
          sub_10028DF3C();
        v25 = qword_1022A0048;
        sub_100CF250C((unsigned int **)a7, &buf);
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_buf = &buf;
        else
          p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        v34[0] = 67240450;
        v34[1] = a2;
        v35 = 2082;
        v36 = p_buf;
        _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, v25, 0, "WifiScan, type, %{public}d, overriding channels, %{public}s", v34, 18);
        v28 = v27;
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
        sub_100512490("Generic", 1, 0, 2, "std::optional<CLWifiService_Type::ScanParameters> CLWifiService::toWifiScanParameters(CLWifiService_Type::ScanType, apple80211_scan_type, CLWifiService_Type::ScanParameters::Priority, BOOL, std::string, const std::optional<CLWifiService_Type::Channels> &)", "%s\n", (const char *)v28);
        if (v28 != &__p)
          free(v28);
      }
      if (*(char *)(a6 + 23) < 0)
      {
        sub_100115CE4(__dst, *(void **)a6, *(_QWORD *)(a6 + 8));
      }
      else
      {
        *(_OWORD *)__dst = *(_OWORD *)a6;
        v30 = *(_QWORD *)(a6 + 16);
      }
      sub_1005C8140((uint64_t)&buf, a7);
    }
    else
    {
      if (*(char *)(a6 + 23) < 0)
      {
        sub_100115CE4(__dst, *(void **)a6, *(_QWORD *)(a6 + 8));
      }
      else
      {
        *(_OWORD *)__dst = *(_OWORD *)a6;
        v30 = *(_QWORD *)(a6 + 16);
      }
      buf.__r_.__value_.__s.__data_[0] = 0;
      v33 = 0;
    }
    sub_100EF0ECC(a2, v15, (uint64_t)__dst, (uint64_t)&buf, (uint64_t)&__p);
    sub_100278210((uint64_t)a8, (uint64_t *)&__p);
    a8[96] = 1;
    if (v40 < 0)
      operator delete(v39);
    if (__p.__r_.__value_.__r.__words[2])
    {
      v38 = __p.__r_.__value_.__r.__words[2];
      operator delete((void *)__p.__r_.__value_.__r.__words[2]);
    }
    if (v33 && buf.__r_.__value_.__r.__words[0])
    {
      buf.__r_.__value_.__l.__size_ = buf.__r_.__value_.__r.__words[0];
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v30) < 0)
      operator delete(__dst[0]);
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146A30);
    v22 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(__p.__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(__p.__r_.__value_.__r.__words[0]) = a2;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "Got null wifi device options for scan type %d", (uint8_t *)&__p, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146A30);
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = a2;
      _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Got null wifi device options for scan type %d", &buf);
      v24 = (std::string *)v23;
      sub_100512490("Generic", 1, 0, 2, "std::optional<CLWifiService_Type::ScanParameters> CLWifiService::toWifiScanParameters(CLWifiService_Type::ScanType, apple80211_scan_type, CLWifiService_Type::ScanParameters::Priority, BOOL, std::string, const std::optional<CLWifiService_Type::Channels> &)", "%s\n", v23);
      if (v24 != &__p)
        free(v24);
    }
    *a8 = 0;
    a8[96] = 0;
  }
}

void sub_1005C35FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005C3650(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  v4 = (uint64_t)(a1 + 5);
  v5 = a1[1];
  v6 = a1[2];
  v7 = 42 * ((v6 - v5) >> 3) - 1;
  if (v6 == v5)
    v7 = 0;
  if (v7 == a1[5] + a1[4])
  {
    sub_1005C911C(a1);
    v5 = a1[1];
    v6 = a1[2];
  }
  if (v6 == v5)
  {
    v9 = 0;
  }
  else
  {
    v8 = a1[5] + a1[4];
    v9 = *(_QWORD *)(v5 + 8 * (v8 / 0x2A)) + 96 * (v8 % 0x2A);
  }
  sub_1005C9430(v4, v9, a2);
  v10 = a1[4];
  v11 = a1[5] + 1;
  a1[5] = v11;
  v12 = v10 + v11;
  v13 = a1[1];
  v14 = (_QWORD *)(v13 + 8 * (v12 / 0x2A));
  v15 = *v14 + 96 * (v12 % 0x2A);
  if (a1[2] == v13)
    v15 = 0;
  if (v15 == *v14)
    v15 = *(v14 - 1) + 4032;
  return v15 - 96;
}

void sub_1005C3774(uint64_t a1, void *a2)
{
  NSObject *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  NSObject *v13;
  uint8_t *v14;
  uint64_t v15;
  void *p_p;
  char *v17;
  char *v18;
  NSObject *v19;
  const char *v20;
  uint8_t *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t *v26;
  void *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  id *v32;
  void *v33;
  __int16 v34;
  void *v35;
  char v36;
  void *__p;
  __int16 v38;
  uint8_t *v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  void *v43;
  uint8_t buf[8];
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  void **v50;

  if (a2 && (v32 = *(id **)(a1 + 32), objc_msgSend(a2, "data")))
  {
    v31 = objc_msgSend(a2, "data");
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v3 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      v4 = objc_msgSend(a2, "type");
      v6 = v31[14];
      v5 = v31[15];
      v7 = v31[13];
      sub_100CF1FAC((uint64_t)(v31 + 1), &__p);
      v8 = (v41 & 0x80000000) == 0 ? &__p : (void **)__p;
      *(_DWORD *)buf = 67240963;
      *(_DWORD *)&buf[4] = v4;
      v45 = 2050;
      v46 = v7;
      v47 = 2050;
      v48 = 0x2E8BA2E8BA2E8BA3 * ((v5 - v6) >> 3);
      v49 = 2081;
      v50 = v8;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "AONSense,wifiService,type,%{public}d,scanTime,%{public}.3f,count,%{public}zu,associated,%{private}s", buf, 0x26u);
      if (SBYTE3(v41) < 0)
        operator delete(__p);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      v22 = qword_1022A0048;
      v23 = objc_msgSend(a2, "type");
      v25 = v31[14];
      v24 = v31[15];
      v26 = (uint8_t *)v31[13];
      sub_100CF1FAC((uint64_t)(v31 + 1), &v33);
      if (v36 >= 0)
        v27 = &v33;
      else
        v27 = v33;
      LODWORD(__p) = 67240963;
      HIDWORD(__p) = v23;
      v38 = 2050;
      v39 = v26;
      v40 = 2050;
      v41 = 0x2E8BA2E8BA2E8BA3 * ((v24 - v25) >> 3);
      v42 = 2081;
      v43 = v27;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v22, 2, "AONSense,wifiService,type,%{public}d,scanTime,%{public}.3f,count,%{public}zu,associated,%{private}s", &__p, 38);
      v29 = v28;
      if (v36 < 0)
        operator delete(v33);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiService::startAONScanRequest()_block_invoke", "%s\n", v29);
      if (v29 != (char *)buf)
        free(v29);
    }
    v9 = objc_alloc_init((Class)NSMutableArray);
    v10 = v31[14];
    v11 = v31[15];
    if (v10 != v11)
    {
      v12 = 0;
      do
      {
        objc_msgSend(v9, "addObject:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)(*(double *)(v10 + 56) + 0.5)));
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021469D0);
        v13 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
        {
          sub_100CF1BCC((uint64_t *)v10, buf);
          if ((v48 & 0x80000000) == 0)
            v14 = buf;
          else
            v14 = *(uint8_t **)buf;
          LODWORD(__p) = 67240451;
          HIDWORD(__p) = v12;
          v38 = 2081;
          v39 = v14;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "AONSense,wifiService,ap,%{public}d,%{private}s", (uint8_t *)&__p, 0x12u);
          if (SBYTE3(v48) < 0)
            operator delete(*(void **)buf);
          ++v12;
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_1021469D0);
          v15 = qword_1022A0048;
          sub_100CF1BCC((uint64_t *)v10, &__p);
          p_p = &__p;
          if ((v41 & 0x80000000) != 0)
            p_p = __p;
          LODWORD(v33) = 67240451;
          HIDWORD(v33) = v12;
          v34 = 2081;
          v35 = p_p;
          LODWORD(v30) = 18;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v15, 2, "AONSense,wifiService,ap,%{public}d,%{private}s", &v33, v30);
          v18 = v17;
          if (SBYTE3(v41) < 0)
            operator delete(__p);
          sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiService::startAONScanRequest()_block_invoke", "%s\n", v18);
          if (v18 != (char *)buf)
            free(v18);
          ++v12;
        }
        v10 += 88;
      }
      while (v10 != v11);
    }
    objc_msgSend(v32[83], "processEventTimes:atCurrentTime:", v9, CFAbsoluteTimeGetCurrent());
    objc_msgSend(v32[84], "processEventTimes:atCurrentTime:", v9, CFAbsoluteTimeGetCurrent());
    *((_DWORD *)v31 + 35) = 2;
    *(_DWORD *)buf = 12;
    (*((void (**)(id *, uint8_t *))*v32 + 19))(v32, buf);
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v19 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "AONSense,wifiService,data,null", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      LOWORD(__p) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 17, "AONSense,wifiService,data,null", &__p, 2);
      v21 = (uint8_t *)v20;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLWifiService::startAONScanRequest()_block_invoke", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
  }
}

uint64_t sub_1005C3E3C(uint64_t a1, uint64_t *a2, CFTypeRef *a3, int a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  __CFArray *v10;
  void *v11;
  NSObject *v12;
  char *v13;
  __int16 v14;
  void *value;
  uint8_t buf[1640];

  result = (uint64_t)CFArrayCreateMutable(kCFAllocatorDefault, 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 3), &kCFTypeArrayCallBacks);
  *a3 = (CFTypeRef)result;
  if (result)
  {
    v8 = *a2;
    v9 = a2[1];
    if (*a2 == v9)
    {
      return 1;
    }
    else
    {
      v10 = (__CFArray *)result;
      while (1)
      {
        value = 0;
        if (!sub_1005C4554(result, v8, (uint64_t *)&value, a4))
          break;
        v11 = value;
        if (!value)
          break;
        CFArrayAppendValue(v10, value);
        CFRelease(v11);
        v8 += 88;
        if (v8 == v9)
          return 1;
      }
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      v12 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "WifiService, create background network failed", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021469D0);
        v14 = 0;
        v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "WifiService, create background network failed", &v14, 2);
        sub_100512490("Generic", 1, 0, 0, "BOOL CLWifiService::createBackgroundNetworks(const std::vector<CLWifiService_Type::AccessPoint> &, CFArrayRef &, BOOL)", "%s\n", v13);
        if (v13 != (char *)buf)
          free(v13);
      }
      CFRelease(*a3);
      result = 0;
      *a3 = 0;
    }
  }
  return result;
}

void sub_1005C4084(uint64_t a1, void *a2)
{
  NSMutableDictionary *v3;
  unint64_t v4;
  char v5;
  uint64_t IntProperty;
  int v7;
  NSObject *v8;
  char *v9;
  id v10;
  _BOOL8 v11;
  NSObject *v12;
  char *v13;
  int v14;
  int v15;
  int v16;
  __int16 v17;
  _BOOL4 v18;
  __int16 v19;
  int v20;
  _QWORD v21[3];
  _QWORD v22[3];
  uint8_t buf[4];
  int v24;
  __int16 v25;
  _BOOL4 v26;
  __int16 v27;
  int v28;

  v3 = +[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", 14);
  if (objc_msgSend(a2, "count"))
  {
    v4 = 0;
    v5 = 0;
    v14 = 67109120;
    do
    {
      IntProperty = WiFiNetworkGetIntProperty(objc_msgSend(a2, "objectAtIndexedSubscript:", v4), CFSTR("CHANNEL"));
      v7 = IntProperty;
      if ((IntProperty - 1) > 0xC)
        v5 |= (int)IntProperty > 14;
      else
        -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1), +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", IntProperty));
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      v8 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109120;
        v24 = v7;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "gfmetrics, channel, %d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021469D0);
        v15 = 67109120;
        v16 = v7;
        v9 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "gfmetrics, channel, %d", &v15);
        sub_100512490("Generic", 1, 0, 2, "void CLWifiService::collectChannelMetrics(NSArray *)", "%s\n", v9);
        if (v9 != (char *)buf)
          free(v9);
      }
      ++v4;
    }
    while ((unint64_t)objc_msgSend(a2, "count") > v4);
  }
  else
  {
    v5 = 0;
  }
  v10 = objc_msgSend(-[NSMutableDictionary allKeys](v3, "allKeys"), "count");
  v11 = -[NSMutableDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", &off_10221B288)
     && -[NSMutableDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", &off_10221B2A0)
     && -[NSMutableDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", &off_10221B2B8) != 0;
  if (((int)v10 > 0) | v5 & 1)
  {
    v21[0] = CFSTR("Channels");
    v22[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v10);
    v21[1] = CFSTR("1_6_11");
    v22[1] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v11);
    v21[2] = CFSTR("Non24GHz");
    v22[2] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v5 & 1);
    AnalyticsSendEvent(CFSTR("com.apple.clx.geofence.channels"), +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v22, v21, 3));
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v12 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109632;
      v24 = (int)v10;
      v25 = 1024;
      v26 = v11;
      v27 = 1024;
      v28 = v5 & 1;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "gfmetrics, Channels, %d, 1_6_11, %d, Non24GHz, %d", buf, 0x14u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      v15 = 67109632;
      v16 = (int)v10;
      v17 = 1024;
      v18 = v11;
      v19 = 1024;
      v20 = v5 & 1;
      v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "gfmetrics, Channels, %d, 1_6_11, %d, Non24GHz, %d", &v15, 20, v14);
      sub_100512490("Generic", 1, 0, 2, "void CLWifiService::collectChannelMetrics(NSArray *)", "%s\n", v13);
      if (v13 != (char *)buf)
        free(v13);
    }
  }
}

BOOL sub_1005C4554(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  std::string *v7;
  NSObject *v8;
  std::string *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v15;
  std::string *v16;
  int v17;
  std::string *v18;
  std::string::size_type v19;
  std::string v20;
  _BYTE v21[16];
  std::string __p[68];
  std::string v23;

  sub_100119F3C(v21);
  v23.__r_.__value_.__r.__words[0] = *(_QWORD *)a2;
  sub_1000C2150(&v23, __p);
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = __p;
  else
    v7 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  sub_10052861C((uint64_t)v21, CFSTR("BSSID"), (char *)v7);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  if ((*(_DWORD *)(a2 + 40) & 0x80000000) == 0)
  {
    LODWORD(__p[0].__r_.__value_.__l.__data_) = *(_DWORD *)(a2 + 40);
    sub_10011B5B8((uint64_t)v21, CFSTR("CHANNEL"), __p);
  }
  __p[0].__r_.__value_.__s.__data_[0] = 1;
  if (a4)
    sub_10011B81C((uint64_t)v21, CFSTR("ENTRY_NETWORK"), __p);
  else
    sub_10011B81C((uint64_t)v21, CFSTR("EXIT_NETWORK"), __p);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102146A30);
  v8 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v20.__r_.__value_.__r.__words[0] = *(_QWORD *)a2;
    sub_1000C2150(&v20, &v23);
    v9 = (v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &v23
       : (std::string *)v23.__r_.__value_.__r.__words[0];
    v10 = *(_DWORD *)(a2 + 40);
    LODWORD(__p[0].__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v9;
    WORD2(__p[0].__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 6) = v10;
    WORD1(__p[0].__r_.__value_.__r.__words[2]) = 1024;
    HIDWORD(__p[0].__r_.__value_.__r.__words[2]) = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "network mac, %s, channel, %d, entry, %d", (uint8_t *)__p, 0x18u);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146A30);
    v15 = qword_1022A02D8;
    v19 = *(_QWORD *)a2;
    sub_1000C2150(&v19, &v20);
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v20;
    else
      v16 = (std::string *)v20.__r_.__value_.__r.__words[0];
    v17 = *(_DWORD *)(a2 + 40);
    LODWORD(v23.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)v23.__r_.__value_.__r.__words + 4) = (std::string::size_type)v16;
    WORD2(v23.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&v23.__r_.__value_.__r.__words[1] + 6) = v17;
    WORD1(v23.__r_.__value_.__r.__words[2]) = 1024;
    HIDWORD(v23.__r_.__value_.__r.__words[2]) = a4;
    v18 = (std::string *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v15, 2, "network mac, %s, channel, %d, entry, %d", (const char *)&v23, 24, v19);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiService::createBackgroundNetwork(const CLWifiService_Type::AccessPoint &, WiFiNetworkRef &, BOOL)", "%s\n", (const char *)v18);
    if (v18 != __p)
      free(v18);
  }
  v11 = sub_10011A5AC((uint64_t)v21);
  v12 = WiFiNetworkCreate(kCFAllocatorDefault, v11);
  *a3 = v12;
  v13 = v12 != 0;
  sub_10011A5A8(v21);
  return v13;
}

void sub_1005C4894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_10011A5A8(&a15);
  _Unwind_Resume(a1);
}

const __CFDictionary *sub_1005C48E4(uint64_t a1, int a2)
{
  char v2;
  const __CFDictionary **v4;
  const __CFDictionary *v5;
  _QWORD *v6;
  __CFDictionary *MutableCopy;
  const __CFDictionary *result;
  _Unwind_Exception *v9;
  int *v10;
  int *v11;
  void *__p;
  int *v13;
  char v14;

  v2 = a2;
  switch(a2)
  {
    case -1:
    case 13:
      sub_10190108C();
      goto LABEL_22;
    case 0:
      v4 = (const __CFDictionary **)(a1 + 136);
      goto LABEL_15;
    case 1:
      v4 = (const __CFDictionary **)(a1 + 144);
      goto LABEL_15;
    case 2:
      v4 = (const __CFDictionary **)(a1 + 152);
      goto LABEL_15;
    case 3:
      v4 = (const __CFDictionary **)(a1 + 160);
      goto LABEL_15;
    case 4:
      v4 = (const __CFDictionary **)(a1 + 168);
      goto LABEL_15;
    case 5:
      v4 = (const __CFDictionary **)(a1 + 216);
      goto LABEL_15;
    case 6:
      v5 = *(const __CFDictionary **)(a1 + 224);
      if (!v5)
        goto LABEL_10;
      goto LABEL_16;
    case 7:
      v4 = (const __CFDictionary **)(a1 + 128);
      goto LABEL_15;
    case 8:
      v4 = (const __CFDictionary **)(a1 + 176);
      goto LABEL_15;
    case 9:
      v4 = (const __CFDictionary **)(a1 + 184);
      goto LABEL_15;
    case 10:
LABEL_10:
      v4 = (const __CFDictionary **)(a1 + 200);
      goto LABEL_15;
    case 11:
LABEL_22:
      v9 = (_Unwind_Exception *)sub_101900F04();
      if (v14)
      {
        if (__p)
        {
          v13 = (int *)__p;
          operator delete(__p);
        }
      }
      _Unwind_Resume(v9);
      return result;
    case 12:
      v4 = (const __CFDictionary **)(a1 + 192);
LABEL_15:
      v5 = *v4;
      if (*v4)
      {
LABEL_16:
        v6 = sub_10132F040();
        sub_10132F070(v6, v2, (uint64_t)&__p);
        if (v14)
        {
          MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v5);
          v10 = v13;
          v11 = (int *)__p;
          sub_1005C4A4C(a1, &v11, &v10, MutableCopy);
          v5 = (const __CFDictionary *)CFAutorelease(MutableCopy);
          if (v14)
          {
            if (__p)
            {
              v13 = (int *)__p;
              operator delete(__p);
            }
          }
        }
      }
      break;
    default:
      v5 = 0;
      break;
  }
  return v5;
}

void sub_1005C4A4C(uint64_t a1, int **a2, int **a3, __CFDictionary *a4)
{
  CFNumberRef v8;
  CFNumberRef v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  uint64_t v14;
  uint8_t buf[4];
  uint64_t v16;

  v8 = CFNumberCreate(0, kCFNumberSInt32Type, &unk_101BB74AC);
  if (v8)
  {
    v9 = v8;
    sub_1005C960C(a1, a2, a3, v8, a4);
    CFRelease(v9);
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v10 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "setScanOptionsChannels could not create scan params flag %{public}p", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      v13 = 134349056;
      v14 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "setScanOptionsChannels could not create scan params flag %{public}p", &v13, 12);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "void CLWifiService::setScanOptionsChannels(const Iter &, const Iter &, CFMutableDictionaryRef) [Iter = std::__wrap_iter<int *>]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
}

const __CFDictionary *sub_1005C4C68(uint64_t a1, unsigned int *a2)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  char v9;
  __CFDictionary *v10;
  int v12;
  int *v13;
  int *v14;

  if (sub_100EF0E88((uint64_t)a2) == 11)
  {
    v4 = sub_100217A98(a2);
    v5 = sub_100C3C618((uint64_t)a2);
    v6 = sub_1000CED64((uint64_t)a2);
    v14 = *(int **)sub_10033E05C((uint64_t)a2);
    v13 = *(int **)(sub_10033E05C((uint64_t)a2) + 8);
    v7 = sub_1008B97D0((uint64_t)a2);
    v8 = sub_100EF0E78((uint64_t)a2);
    v9 = sub_100792DA4((uint64_t)a2);
    v10 = sub_1005C4D74(a1, v4, v5, v6, &v14, &v13, v7, v8, v9);
    return (const __CFDictionary *)CFAutorelease(v10);
  }
  else
  {
    v12 = sub_100EF0E88((uint64_t)a2);
    return sub_1005C48E4(a1, v12);
  }
}

__CFDictionary *sub_1005C4D74(uint64_t a1, int a2, int a3, int a4, int **a5, int **a6, uint64_t a7, int a8, char a9)
{
  CFNumberRef v11;
  CFNumberRef v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  CFNumberRef v17;
  BOOL v18;
  NSObject *v23;
  __CFDictionary *Mutable;
  CFBooleanRef v25;
  uint64_t i;
  NSObject *v27;
  const char *v29;
  char *v30;
  const char *v31;
  char *v32;
  int v33;
  CFNumberRef v34;
  int **v35;
  int v38;
  int v39;
  int valuePtr;
  int v41;
  int v42;
  int v43;
  _BYTE v44[10];
  CFNumberRef v45;
  _BYTE v46[10];
  __int16 v47;
  CFNumberRef v48;
  __int16 v49;
  CFNumberRef v50;
  __int16 v51;
  CFNumberRef v52;
  _BYTE buf[32];
  _BYTE v54[32];
  CFBooleanRef v55;

  v41 = a3;
  v42 = a2;
  v39 = a7;
  valuePtr = a4;
  v38 = a8;
  v11 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
  v12 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v41);
  v13 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v39);
  v14 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v42);
  v15 = CFNumberCreate(0, kCFNumberSInt32Type, &unk_101BB74B0);
  v16 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v38);
  v17 = v16;
  if (v11)
    v18 = v12 == 0;
  else
    v18 = 1;
  if (v18 || v13 == 0 || v14 == 0 || v15 == 0 || v16 == 0)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v23 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134350336;
      *(_QWORD *)&buf[4] = v11;
      *(_WORD *)&buf[12] = 2050;
      *(_QWORD *)&buf[14] = v12;
      *(_WORD *)&buf[22] = 2050;
      *(_QWORD *)&buf[24] = v13;
      *(_WORD *)v54 = 2050;
      *(_QWORD *)&v54[2] = v14;
      *(_WORD *)&v54[10] = 2050;
      *(_QWORD *)&v54[12] = v15;
      *(_WORD *)&v54[20] = 2050;
      *(_QWORD *)&v54[22] = v17;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "could not create scan params mode %{public}p type %{public}p dwell %{public}p scans %{public}p flag %{public}p age %{public}p", buf, 0x3Eu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      v43 = 134350336;
      *(_QWORD *)v44 = v11;
      *(_WORD *)&v44[8] = 2050;
      v45 = v12;
      *(_WORD *)v46 = 2050;
      *(_QWORD *)&v46[2] = v13;
      v47 = 2050;
      v48 = v14;
      v49 = 2050;
      v50 = v15;
      v51 = 2050;
      v52 = v17;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "could not create scan params mode %{public}p type %{public}p dwell %{public}p scans %{public}p flag %{public}p age %{public}p", &v43, 62);
      v30 = (char *)v29;
      sub_100512490("Generic", 1, 0, 0, "CFMutableDictionaryRef CLWifiService::createScanOptions(int, apple80211_scan_type, int, const Iter &, const Iter &, cl::chrono::milliseconds, cl::chrono::seconds, BOOL) [Iter = std::__wrap_iter<const int *>]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    Mutable = 0;
  }
  else
  {
    v34 = v15;
    v35 = a6;
    *(_QWORD *)buf = kCFBooleanFalse;
    *(_QWORD *)&buf[8] = kCFBooleanTrue;
    *(_QWORD *)&buf[16] = v11;
    *(_QWORD *)&buf[24] = v12;
    *(_QWORD *)v54 = v13;
    *(_QWORD *)&v54[8] = v14;
    if (a9)
      v25 = kCFBooleanTrue;
    else
      v25 = kCFBooleanFalse;
    *(_QWORD *)&v54[16] = v16;
    *(_QWORD *)&v54[24] = v25;
    v55 = kCFBooleanFalse;
    Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 9, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    for (i = 0; i != 9; ++i)
      CFDictionarySetValue(Mutable, off_102146B30[i], *(const void **)&buf[i * 8]);
    if (*a5 != *v35)
      sub_1005C990C(a1, a5, v35, v15, Mutable);
  }
  if (v11)
    CFRelease(v11);
  if (v12)
    CFRelease(v12);
  if (v13)
    CFRelease(v13);
  if (v14)
    CFRelease(v14);
  if (v15)
    CFRelease(v15);
  if (v17)
    CFRelease(v17);
  if (!Mutable)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146A30);
    v27 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109888;
      *(_DWORD *)&buf[4] = v42;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v41;
      *(_WORD *)&buf[14] = 1024;
      *(_DWORD *)&buf[16] = valuePtr;
      *(_WORD *)&buf[20] = 2048;
      *(_QWORD *)&buf[22] = a7;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#Warning failed to create scan options (numScans=%d, scan_type=%d, scanModes=%d, dwellTime=%lld)", buf, 0x1Eu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146A30);
      v43 = 67109888;
      *(_DWORD *)v44 = v42;
      *(_WORD *)&v44[4] = 1024;
      *(_DWORD *)&v44[6] = v41;
      LOWORD(v45) = 1024;
      *(_DWORD *)((char *)&v45 + 2) = valuePtr;
      HIWORD(v45) = 2048;
      *(_QWORD *)v46 = a7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning failed to create scan options (numScans=%d, scan_type=%d, scanModes=%d, dwellTime=%lld)", &v43, 30, v33, v34);
      v32 = (char *)v31;
      sub_100512490("Generic", 1, 0, 2, "CFMutableDictionaryRef CLWifiService::createScanOptions(int, apple80211_scan_type, int, const Iter &, const Iter &, cl::chrono::milliseconds, cl::chrono::seconds, BOOL) [Iter = std::__wrap_iter<const int *>]", "%s\n", v31);
      if (v32 != buf)
        free(v32);
    }
  }
  return Mutable;
}

void sub_1005C52E4(uint64_t a1)
{
  uint64_t v2;
  double Current;
  uint64_t *v4;
  double v5;
  NSObject *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  __CFDictionary *v12;
  CFBooleanRef v13;
  CFBooleanRef v14;
  _BOOL4 v15;
  uint64_t v16;
  const void *v17;
  double v18;
  NSObject *v19;
  _BYTE *v20;
  unsigned int v21;
  const char *v22;
  int v23;
  int v24;
  _BOOL4 v25;
  int v26;
  int v27;
  NSObject *v28;
  double v29;
  double v30;
  NSObject *v31;
  NSObject *v32;
  const char *v33;
  uint64_t v34;
  void *v35;
  char v36;
  NSObject *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  int v42;
  uint64_t v43;
  void **v44;
  unsigned int v45;
  const char *v46;
  int v47;
  int v48;
  _BOOL4 v49;
  int v50;
  int v51;
  char *v52;
  char *v53;
  uint64_t v54;
  const char *v55;
  uint8_t *v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  const char *v60;
  uint8_t *v61;
  const char *v62;
  uint8_t *v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  const char *v67;
  uint8_t *v68;
  uint64_t v69;
  const char *v70;
  uint8_t *v71;
  NSObject *v72;
  _BOOL4 v73;
  _BOOL4 v74;
  _BOOL4 v75;
  _BOOL4 v76;
  const char *v77;
  uint8_t *v78;
  NSObject *v79;
  const char *v80;
  uint64_t v81;
  const char *v82;
  uint8_t *v83;
  const char *v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  _QWORD v89[5];
  void *v90[2];
  char v91;
  uint64_t v92;
  pthread_mutex_t *v93;
  __int16 v94;
  _BYTE __p[28];
  __int16 v96;
  __int128 v97;
  __int16 v98;
  int v99;
  unsigned int v100;
  _BYTE v101[10];
  void *v102;
  void *v103;
  void *v104;
  char v105;
  uint8_t buf[4];
  _BYTE v107[24];
  __int16 v108;
  __int128 v109;
  __int16 v110;
  int v111;

  v2 = a1 + 824;
  v92 = a1 + 824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 824) + 16))(a1 + 824);
  v94 = 256;
  Current = CFAbsoluteTimeGetCurrent();
  v4 = &qword_1022A0000;
  if (!*(_QWORD *)(a1 + 312) || !*(_QWORD *)(a1 + 296))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v72 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      v73 = *(_QWORD *)(a1 + 312) == 0;
      v74 = *(_QWORD *)(a1 + 296) == 0;
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)v107 = v73;
      *(_WORD *)&v107[4] = 1026;
      *(_DWORD *)&v107[6] = v74;
      _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEFAULT, "WifiMgr, performScan, fail,  device, %{public}d, dpc, %{public}d", buf, 0xEu);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_138;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v75 = *(_QWORD *)(a1 + 312) == 0;
    v76 = *(_QWORD *)(a1 + 296) == 0;
    v100 = 67240448;
    *(_DWORD *)v101 = v75;
    *(_WORD *)&v101[4] = 1026;
    *(_DWORD *)&v101[6] = v76;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "WifiMgr, performScan, fail,  device, %{public}d, dpc, %{public}d", &v100, 14);
    v78 = (uint8_t *)v77;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiService::performPendingScans()", "%s\n", v77);
    goto LABEL_135;
  }
  v5 = Current;
  if (Current - *(double *)(a1 + 408) <= 3.0)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v79 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEFAULT, "WifiMgr, performScan, in progress", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_138;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    LOWORD(v100) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "WifiMgr, performScan, in progress", &v100, 2);
    v78 = (uint8_t *)v80;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiService::performPendingScans()", "%s\n", v80);
LABEL_135:
    if (v78 != buf)
      free(v78);
LABEL_138:
    if ((_BYTE)v94)
      pthread_mutex_unlock(v93);
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v92 + 24))(v92);
    return;
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021469D0);
  v6 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
  {
    v7 = *(_QWORD *)(a1 + 368);
    *(_DWORD *)buf = 134349056;
    *(_QWORD *)v107 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "WifiScan, perform, %{public}lu", buf, 0xCu);
  }
  v87 = v2;
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v81 = *(_QWORD *)(a1 + 368);
    v100 = 134349056;
    *(_QWORD *)v101 = v81;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "WifiScan, perform, %{public}lu", &v100, 12);
    v83 = (uint8_t *)v82;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiService::performPendingScans()", "%s\n", v82);
    if (v83 != buf)
      free(v83);
  }
  *(_QWORD *)&v8 = 67109890;
  v85 = v8;
  v86 = 134217984;
  v9 = 1;
  while (*(_QWORD *)(a1 + 368))
  {
    sub_100278210((uint64_t)&v100, (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 336) + 8 * (*(_QWORD *)(a1 + 360) / 0x2AuLL))+ 96 * (*(_QWORD *)(a1 + 360) % 0x2AuLL)));
    v10 = sub_100EF0E88((uint64_t)&v100);
    sub_1005C6548((int64x2_t *)(a1 + 328));
    v11 = v9;
    v12 = sub_1005C4C68(a1, &v100);
    if (v12)
    {
      if (sub_100792DA4((uint64_t)&v100))
        v13 = kCFBooleanTrue;
      else
        v13 = kCFBooleanFalse;
      CFDictionarySetValue(v12, CFSTR("SCAN_LOW_PRIORITY"), v13);
      if (sub_100EF0E80((uint64_t)&v100))
        v14 = kCFBooleanTrue;
      else
        v14 = kCFBooleanFalse;
      CFDictionarySetValue(v12, CFSTR("SCAN_LOW_LATENCY"), v14);
      v15 = sub_100CD598C((uint64_t)&v100);
      v16 = 120;
      if (v15)
        v16 = 112;
      CFDictionarySetValue(v12, CFSTR("SCAN_TYPE"), *(const void **)(a1 + v16));
      v17 = *(const void **)(a1 + 312);
      CFRetain(v17);
      CFRetain(v12);
      sub_1000CDA5C(v2);
      v18 = CFAbsoluteTimeGetCurrent();
      *(_BYTE *)(a1 + 233) = v10;
      v88 = WiFiDeviceClientScanAsync(v17, v12, sub_1005C65C0, a1);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      v19 = v4[9];
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        sub_100EF0E98((char *)&v100, (uint64_t)__p);
        if (__p[23] >= 0)
          v20 = __p;
        else
          v20 = *(_BYTE **)__p;
        v21 = sub_100EF0E88((uint64_t)&v100);
        v22 = sub_1000A9998(v21);
        if (sub_100792DA4((uint64_t)&v100))
          v23 = 108;
        else
          v23 = 110;
        v24 = sub_100EF0E80((uint64_t)&v100);
        v25 = sub_100CD598C((uint64_t)&v100);
        *(_DWORD *)buf = 136447746;
        if (v24)
          v26 = 108;
        else
          v26 = 100;
        *(_QWORD *)v107 = v20;
        if (v25)
          v27 = 112;
        else
          v27 = 97;
        *(_WORD *)&v107[8] = 2082;
        *(_QWORD *)&v107[10] = v22;
        *(_WORD *)&v107[18] = 1026;
        *(_DWORD *)&v107[20] = v23;
        v108 = 1026;
        LODWORD(v109) = v26;
        WORD2(v109) = 1026;
        *(_DWORD *)((char *)&v109 + 6) = v27;
        WORD5(v109) = 1026;
        HIDWORD(v109) = v9;
        v110 = 1026;
        v111 = v88;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "WifiScan, execute, %{public}s, %{public}s, flags, %{public}c%{public}c%{public}c, n, %{public}d, error, %{public}d", buf, 0x34u);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        v11 = (v9 + 1);
        v4 = &qword_1022A0000;
        v2 = v87;
      }
      else
      {
        v4 = &qword_1022A0000;
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021469D0);
        v42 = v11;
        v43 = v4[9];
        sub_100EF0E98((char *)&v100, (uint64_t)v90);
        if (v91 >= 0)
          v44 = v90;
        else
          v44 = (void **)v90[0];
        v45 = sub_100EF0E88((uint64_t)&v100);
        v46 = sub_1000A9998(v45);
        if (sub_100792DA4((uint64_t)&v100))
          v47 = 108;
        else
          v47 = 110;
        v48 = sub_100EF0E80((uint64_t)&v100);
        v49 = sub_100CD598C((uint64_t)&v100);
        *(_DWORD *)__p = 136447746;
        if (v48)
          v50 = 108;
        else
          v50 = 100;
        *(_QWORD *)&__p[4] = v44;
        if (v49)
          v51 = 112;
        else
          v51 = 97;
        *(_WORD *)&__p[12] = 2082;
        *(_QWORD *)&__p[14] = v46;
        *(_WORD *)&__p[22] = 1026;
        *(_DWORD *)&__p[24] = v47;
        v96 = 1026;
        LODWORD(v97) = v50;
        WORD2(v97) = 1026;
        *(_DWORD *)((char *)&v97 + 6) = v51;
        WORD5(v97) = 1026;
        HIDWORD(v97) = v42;
        v98 = 1026;
        v99 = v88;
        LODWORD(v84) = 52;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v43, 0, "WifiScan, execute, %{public}s, %{public}s, flags, %{public}c%{public}c%{public}c, n, %{public}d, error, %{public}d", __p, v84);
        v53 = v52;
        if (v91 < 0)
          operator delete(v90[0]);
        sub_100512490("Generic", 1, 0, 2, "void CLWifiService::performPendingScans()", "%s\n", v53);
        v4 = &qword_1022A0000;
        v2 = v87;
        if (v53 != (char *)buf)
          free(v53);
        v11 = (v42 + 1);
      }
      if (*(_BYTE *)(a1 + 234))
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021469D0);
        v28 = v4[9];
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "WifiMgr, Requesting scan with pending scan reply, #CloneMe", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_1021469D0);
          v54 = v4[9];
          *(_WORD *)__p = 0;
          LODWORD(v84) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v54, 0, "WifiMgr, Requesting scan with pending scan reply, #CloneMe", __p, v84);
          v56 = (uint8_t *)v55;
          sub_100512490("Generic", 1, 0, 2, "void CLWifiService::performPendingScans()", "%s\n", v55);
          if (v56 != buf)
            free(v56);
        }
      }
      *(_BYTE *)(a1 + 234) = 1;
      v29 = CFAbsoluteTimeGetCurrent();
      sub_1000CE038(v2);
      CFRelease(v12);
      CFRelease(v17);
      v30 = v29 - v18;
      if (v30 >= 3.0)
      {
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102146A30);
        v31 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = v86;
          *(double *)v107 = v30;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#Warning WIFI: ScanAsync blocked for, %.1lf", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_102146A30);
          *(_DWORD *)__p = v86;
          *(double *)&__p[4] = v30;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning WIFI: ScanAsync blocked for, %.1lf", COERCE_DOUBLE(__p));
          v63 = (uint8_t *)v62;
          sub_100512490("Generic", 1, 0, 2, "void CLWifiService::performPendingScans()", "%s\n", v62);
          if (v63 != buf)
            free(v63);
        }
      }
      if (!v88)
      {
        *(double *)(a1 + 408) = v5;
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102146A30);
        v37 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
        {
          v38 = sub_1000A9998(v10);
          v39 = *(_QWORD *)(a1 + 368);
          *(_DWORD *)buf = v85;
          *(_DWORD *)v107 = v10;
          *(_WORD *)&v107[4] = 2080;
          *(_QWORD *)&v107[6] = v38;
          *(_WORD *)&v107[14] = 2048;
          *(_QWORD *)&v107[16] = v39;
          v108 = 2048;
          *(double *)&v109 = v30;
          _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "asynchronous scan type %d %s in progress (%lu requests left), scanWaitInterval, %.3lf", buf, 0x26u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_102146A30);
          v64 = qword_1022A02D8;
          v65 = sub_1000A9998(v10);
          v66 = *(_QWORD *)(a1 + 368);
          *(_DWORD *)__p = v85;
          *(_DWORD *)&__p[4] = v10;
          *(_WORD *)&__p[8] = 2080;
          *(_QWORD *)&__p[10] = v65;
          *(_WORD *)&__p[18] = 2048;
          *(_QWORD *)&__p[20] = v66;
          v96 = 2048;
          *(double *)&v97 = v30;
          LODWORD(v84) = 38;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v64, 2, "asynchronous scan type %d %s in progress (%lu requests left), scanWaitInterval, %.3lf", __p, v84, (_QWORD)v85, *((double *)&v85 + 1));
          v68 = (uint8_t *)v67;
          sub_100512490("Generic", 1, 0, 2, "void CLWifiService::performPendingScans()", "%s\n", v67);
          if (v68 != buf)
            free(v68);
        }
        v40 = *(_QWORD *)(a1 + 312);
        if (v40)
        {
          WiFiDeviceClientRegisterScanUpdateCallback(v40, 0, 1, -1);
          goto LABEL_72;
        }
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021469D0);
        v41 = v4[9];
        if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "WifiService, performPendingScans, fWifiDevice NULL", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_1021469D0);
          v69 = v4[9];
          *(_WORD *)__p = 0;
          LODWORD(v84) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v69, 16, "WifiService, performPendingScans, fWifiDevice NULL", __p, v84);
          v71 = (uint8_t *)v70;
          sub_100512490("Generic", 1, 0, 0, "void CLWifiService::performPendingScans()", "%s\n", v70);
          v9 = v11;
          if (v71 != buf)
            free(v71);
        }
        else
        {
LABEL_72:
          v9 = v11;
        }
        v36 = 0;
        goto LABEL_74;
      }
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146A30);
      v32 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
      {
        v33 = sub_1000A9998(v10);
        v34 = *(_QWORD *)(a1 + 368);
        *(_DWORD *)buf = 67110146;
        *(_DWORD *)v107 = v10;
        *(_WORD *)&v107[4] = 2080;
        *(_QWORD *)&v107[6] = v33;
        *(_WORD *)&v107[14] = 2048;
        *(_QWORD *)&v107[16] = v34;
        v108 = 1024;
        LODWORD(v109) = v88;
        WORD2(v109) = 2048;
        *(double *)((char *)&v109 + 6) = v30;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "#Warning asynchronous scan type %d %s failed (%lu requests left) - error %d, scanWaitInterval, %.3lf", buf, 0x2Cu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102146A30);
        v57 = qword_1022A02D8;
        v58 = sub_1000A9998(v10);
        v59 = *(_QWORD *)(a1 + 368);
        *(_DWORD *)__p = 67110146;
        *(_DWORD *)&__p[4] = v10;
        *(_WORD *)&__p[8] = 2080;
        *(_QWORD *)&__p[10] = v58;
        *(_WORD *)&__p[18] = 2048;
        *(_QWORD *)&__p[20] = v59;
        v96 = 1024;
        LODWORD(v97) = v88;
        WORD2(v97) = 2048;
        *(double *)((char *)&v97 + 6) = v30;
        LODWORD(v84) = 44;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v57, 0, "#Warning asynchronous scan type %d %s failed (%lu requests left) - error %d, scanWaitInterval, %.3lf", __p, v84, (_QWORD)v85, DWORD2(v85), *(double *)&v86);
        v61 = (uint8_t *)v60;
        sub_100512490("Generic", 1, 0, 2, "void CLWifiService::performPendingScans()", "%s\n", v60);
        if (v61 != buf)
          free(v61);
      }
      sub_100279AE4((uint64_t *)(a1 + 432));
      *(_BYTE *)(a1 + 416) = -1;
      *(_QWORD *)(a1 + 424) = 0;
      v35 = *(void **)(a1 + 40);
      v89[0] = _NSConcreteStackBlock;
      v89[1] = 3221225472;
      v89[2] = sub_1005C67DC;
      v89[3] = &unk_10212ECA0;
      v89[4] = a1;
      objc_msgSend(v35, "async:", v89);
      v9 = v11;
    }
    v36 = 1;
LABEL_74:
    if (v105 < 0)
      operator delete(v104);
    if (v102)
    {
      v103 = v102;
      operator delete(v102);
    }
    if ((v36 & 1) == 0)
      break;
  }
  if (HIBYTE(v94))
    goto LABEL_138;
}

void sub_1005C6490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  sub_10187E514((uint64_t)&a37);
  _Unwind_Resume(a1);
}

uint64_t sub_1005C6548(int64x2_t *a1)
{
  sub_1005C8328((uint64_t)&a1[2].i64[1], *(_QWORD *)(a1->i64[1] + 8 * (a1[2].i64[0] / 0x2AuLL)) + 96 * (a1[2].i64[0] % 0x2AuLL));
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_101B9DFC0);
  return sub_1005C9C0C((uint64_t)a1, 1);
}

void sub_1005C65C0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  id v10;
  _QWORD v11[7];
  int v12;
  os_activity_scope_state_s state;
  char v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  uint64_t v22;

  CLProfilingIdentify("CLWifiService::onWiFiDeviceClientScanCallback");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertOutside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021469B0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v14 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiService::onWiFiDeviceClientScanCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021469B0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v16 = 0;
      v17 = 2082;
      v18 = "";
      v19 = 2082;
      v20 = "activity";
      v21 = 2050;
      v22 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiService::onWiFiDeviceClientScanCallback\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v14 = 0;
  }
  v10 = objc_msgSend(*(id *)(a4 + 32), "silo");
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1005C812C;
  v11[3] = &unk_102146A50;
  v11[4] = a4;
  v11[5] = a1;
  v11[6] = a2;
  v12 = a3;
  objc_msgSend(v10, "sync:", v11);
  if (v14)
    os_activity_scope_leave(&state);
}

void sub_1005C67BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005C67DC(uint64_t a1)
{
  _QWORD *v1;
  int v3;
  _QWORD *v4;
  __int16 v5;

  v1 = *(_QWORD **)(a1 + 32);
  v4 = v1 + 103;
  (*(void (**)(_QWORD *))(v1[103] + 16))(v1 + 103);
  v5 = 256;
  v3 = 4;
  (*(void (**)(_QWORD *, int *, _QWORD, uint64_t))(*v1 + 144))(v1, &v3, 0, 0xFFFFFFFFLL);
  return (*(uint64_t (**)(_QWORD *))(v1[103] + 24))(v1 + 103);
}

void sub_1005C6858(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005C686C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  const char *v7;
  uint8_t *v8;
  const char *v9;
  uint8_t *v10;
  _QWORD block[5];
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  uint8_t buf[1640];

  v2 = a1 + 824;
  v13 = a1 + 824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 824) + 16))(a1 + 824);
  v14 = 256;
  if (*(_QWORD *)(a1 + 736))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v3 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "WifiDpc, onDpcSource", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      v12 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiDpc, onDpcSource", &v12, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLWifiService::onDpcSource()", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    v4 = *(NSObject **)(a1 + 736);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1005C6BC4;
    block[3] = &unk_10212ECA0;
    block[4] = a1;
    dispatch_async(v4, block);
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v5 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "WifiDpc, null dispatch queue (shutdown?), #KvCheck", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      v12 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "WifiDpc, null dispatch queue (shutdown?), #KvCheck", &v12, 2);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLWifiService::onDpcSource()", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

void sub_1005C6B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1005C6BC4(uint64_t a1)
{
  sub_1005C52E4(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1005C6BCC(uint64_t a1)
{
  return sub_1005C6BDC(*(_QWORD **)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t sub_1005C6BDC(_QWORD *a1, int a2)
{
  _QWORD *v4;
  NSObject *v5;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  v4 = a1 + 103;
  (*(void (**)(_QWORD *))(a1[103] + 16))(a1 + 103);
  if (a1[38] && a1[37])
  {
    WiFiManagerClientQuiesceWiFi();
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146A30);
    v5 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      v11 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "IMD: doQuiesceWifi, %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146A30);
      v9[0] = 67109120;
      v9[1] = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "IMD: doQuiesceWifi, %d", v9);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLWifiService::doQuiesceWifi(BOOL)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 24))(v4);
}

void sub_1005C6DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005C6DFC@<X0>(unsigned int *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD v21[2];
  uint64_t v22;
  _QWORD v23[10];
  char v24;
  uint64_t v25;

  sub_100263E50((uint64_t)v21);
  v4 = sub_100263F7C(&v22, (uint64_t)"scanStats, numOfScan, S1, ", 26);
  v5 = (_QWORD *)std::ostream::operator<<(v4, a1[11]);
  v6 = sub_100263F7C(v5, (uint64_t)", S2, ", 6);
  v7 = (_QWORD *)std::ostream::operator<<(v6, a1[12]);
  v8 = sub_100263F7C(v7, (uint64_t)", 5GHz S1, ", 11);
  v9 = (_QWORD *)std::ostream::operator<<(v8, a1[15]);
  v10 = sub_100263F7C(v9, (uint64_t)", Fast, ", 8);
  v11 = (_QWORD *)std::ostream::operator<<(v10, a1[10]);
  v12 = sub_100263F7C(v11, (uint64_t)", Cached, ", 10);
  v13 = (_QWORD *)std::ostream::operator<<(v12, a1[8]);
  v14 = sub_100263F7C(v13, (uint64_t)", numOfScanErrors, ", 19);
  v15 = (_QWORD *)std::ostream::operator<<(v14, a1[1]);
  v16 = sub_100263F7C(v15, (uint64_t)", numOfScanBusies, ", 19);
  v17 = (_QWORD *)std::ostream::operator<<(v16, a1[2]);
  v18 = sub_100263F7C(v17, (uint64_t)", numOfReceivedScans, ", 22);
  std::ostream::operator<<(v18, *a1);
  std::stringbuf::str(a2, v23);
  *(_QWORD *)((char *)v21
  v22 = v19;
  if (v24 < 0)
    operator delete((void *)v23[8]);
  std::streambuf::~streambuf(v23);
  return std::ios::~ios(&v25);
}

void sub_1005C6F6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1005C6F80()
{
  operator new();
}

void sub_1005C7030(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

uint64_t sub_1005C706C(uint64_t a1)
{
  return WiFiManagerClientSetBackgroundScanNetworks(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 304));
}

void sub_1005C7078(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021469B0);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_1021469B0);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::removeClient(int) [Notification_T = CLWifiService_Type::Notification, NotificationData_T = CLWifiService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLWifiService_Type::RegInfo]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

uint64_t sub_1005C72EC(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7;
  int v9;
  int v10;

  v7 = sub_1005C9C68(a4, a2);
  if (v7)
  {
    v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(_QWORD *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_1005C736C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022A3170);
}

BOOL sub_1005C7380(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021469B0);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021469B0);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::clientRegistered(int, const Notification_T &) [Notification_T = CLWifiService_Type::Notification, NotificationData_T = CLWifiService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLWifiService_Type::RegInfo]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1005C7600(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;

  v5 = *(_QWORD *)(a1 + 64);
  v3 = a1 + 64;
  v4 = v5;
  if (!v5)
    return 0;
  v7 = *a2;
  v8 = v3;
  do
  {
    v9 = *(_DWORD *)(v4 + 32);
    v10 = v9 < v7;
    if (v9 >= v7)
      v11 = (uint64_t *)v4;
    else
      v11 = (uint64_t *)(v4 + 8);
    if (!v10)
      v8 = v4;
    v4 = *v11;
  }
  while (*v11);
  if (v8 == v3)
    return 0;
  if (v7 < *(_DWORD *)(v8 + 32))
    return 0;
  v12 = *(_QWORD *)(v8 + 64);
  if (!v12)
    return 0;
  *(_WORD *)a3 = *(_WORD *)v12;
  sub_10031F180(a3 + 8, v12 + 8);
  *(_QWORD *)(a3 + 104) = *(_QWORD *)(v12 + 104);
  if (v12 != a3)
    sub_10055A264((uint64_t *)(a3 + 112), *(_QWORD *)(v12 + 112), *(_QWORD *)(v12 + 120), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(v12 + 120) - *(_QWORD *)(v12 + 112)) >> 3));
  *(_QWORD *)(a3 + 136) = *(_QWORD *)(v12 + 136);
  return 1;
}

uint64_t sub_1005C76C4(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t **v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  int v10;
  __int128 v11;
  int *v12;

  sub_1005C852C(a3, &v11);
  v10 = *a2;
  v12 = &v10;
  v5 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v10, (uint64_t)&unk_101B9EB60, &v12);
  sub_1002B7674((uint64_t)(v5 + 8), &v11);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return 1;
}

void sub_1005C7770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1005C7784(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int16 v4;
  char v5;
  void *__p;
  char v7;
  char v8;
  _OWORD v9[2];
  uint64_t v10;
  void **v11;

  v4 = -256;
  v5 = 0;
  v8 = 0;
  memset(v9, 0, sizeof(v9));
  v10 = 0;
  (*(void (**)(uint64_t, uint64_t, __int16 *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, a2, &v4, a3, a4, 0);
  v11 = (void **)v9 + 1;
  sub_100279AA4(&v11);
  if (v8)
  {
    if (v7 < 0)
      operator delete(__p);
  }
}

void sub_1005C7808(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1005B5FEC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1005C781C(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021469B0);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021469B0);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::listClients() [Notification_T = CLWifiService_Type::Notification, NotificationData_T = CLWifiService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLWifiService_Type::RegInfo]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021469B0);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021469B0);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::listClients() [Notification_T = CLWifiService_Type::Notification, NotificationData_T = CLWifiService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLWifiService_Type::RegInfo]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_1021469B0);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021469B0);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::listClients() [Notification_T = CLWifiService_Type::Notification, NotificationData_T = CLWifiService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLWifiService_Type::RegInfo]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_1005C7DC4()
{
  operator delete();
}

void sub_1005C7DDC(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1005C7E08(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

uint64_t sub_1005C7E34(uint64_t a1)
{
  return sub_1005C686C(*(_QWORD *)(a1 + 32));
}

void sub_1005C7E3C(id a1)
{
  qword_1022A0058 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

uint64_t sub_1005C7E68(uint64_t a1)
{
  return sub_1005BE87C(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1005C7E70(uint64_t a1)
{
  return sub_1005B5518(*(_QWORD **)(a1 + 32));
}

uint64_t sub_1005C7E7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1005BE070(*(_QWORD *)(a1 + 32), a2, a3, *(const void **)(a1 + 56));
}

uint64_t sub_1005C7E8C(uint64_t a1)
{
  return sub_1005B93DC(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1005C7E94(uint64_t a1)
{
  return sub_1005B9D34(*(double **)(a1 + 32));
}

uint64_t sub_1005C7E9C(uint64_t a1, uint64_t a2)
{
  return sub_1005B9EFC(*(_QWORD **)(a1 + 32), a2, *(const __CFDictionary **)(a1 + 48));
}

uint64_t sub_1005C7EAC(uint64_t a1, uint64_t a2)
{
  return sub_1005BA8B8(*(_QWORD **)(a1 + 32), a2, *(_QWORD *)(a1 + 48));
}

uint64_t sub_1005C7EBC(uint64_t a1, uint64_t a2)
{
  return sub_1005BB234(*(_QWORD *)(a1 + 32), a2, *(unsigned __int8 *)(a1 + 48));
}

void sub_1005C7ECC(uint64_t a1, uint64_t a2)
{
  sub_1005BB558(*(_QWORD *)(a1 + 32), a2, *(unsigned __int8 *)(a1 + 48));
}

uint64_t sub_1005C7EDC(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  if (*(_BYTE *)(a1 + 88))
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    std::string::operator=((std::string *)(a1 + 8), (const std::string *)(a2 + 8));
    v5 = *(_OWORD *)(a2 + 48);
    v4 = *(_OWORD *)(a2 + 64);
    v6 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 48) = v5;
    *(_OWORD *)(a1 + 64) = v4;
    *(_OWORD *)(a1 + 32) = v6;
  }
  else
  {
    sub_10031F0E8(a1, a2);
    *(_BYTE *)(a1 + 88) = 1;
  }
  return a1;
}

void sub_1005C7F4C(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1005C7F78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1005BC59C(*(_QWORD *)(a1 + 32), a2, a3, *(const __CFArray **)(a1 + 56));
}

uint64_t sub_1005C7F88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = a1 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_100115CE4((_BYTE *)v4, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)v4 = v5;
  }
  v6 = *(_OWORD *)(a2 + 32);
  v7 = *(_OWORD *)(a2 + 48);
  v8 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 64) = v8;
  *(_OWORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 88) = 1;
  return a1;
}

__n128 sub_1005C7FFC(uint64_t a1, uint64_t a2)
{
  void **v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  if (*(unsigned __int8 *)(a1 + 88) == *(unsigned __int8 *)(a2 + 88))
  {
    if (*(_BYTE *)(a1 + 88))
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v4 = (void **)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        operator delete(*v4);
      v5 = *(_OWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_OWORD *)v4 = v5;
      *(_BYTE *)(a2 + 31) = 0;
      *(_BYTE *)(a2 + 8) = 0;
      result = *(__n128 *)(a2 + 32);
      v7 = *(_OWORD *)(a2 + 48);
      v8 = *(_OWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 48) = v7;
      *(_OWORD *)(a1 + 64) = v8;
      *(__n128 *)(a1 + 32) = result;
    }
  }
  else if (*(_BYTE *)(a1 + 88))
  {
    if (*(char *)(a1 + 31) < 0)
      operator delete(*(void **)(a1 + 8));
    *(_BYTE *)(a1 + 88) = 0;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v9 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    result = *(__n128 *)(a2 + 32);
    v10 = *(_OWORD *)(a2 + 48);
    v11 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 48) = v10;
    *(_OWORD *)(a1 + 64) = v11;
    *(__n128 *)(a1 + 32) = result;
    *(_BYTE *)(a1 + 88) = 1;
  }
  return result;
}

uint64_t sub_1005C80E4(uint64_t a1)
{
  void *v2;

  if (*(_BYTE *)(a1 + 96))
  {
    if (*(char *)(a1 + 87) < 0)
      operator delete(*(void **)(a1 + 64));
    v2 = *(void **)(a1 + 16);
    if (v2)
    {
      *(_QWORD *)(a1 + 24) = v2;
      operator delete(v2);
    }
  }
  return a1;
}

uint64_t sub_1005C812C(uint64_t a1, uint64_t a2)
{
  return sub_1005BB920(*(_QWORD *)(a1 + 32), a2, *(const __CFArray **)(a1 + 48), *(_DWORD *)(a1 + 56));
}

uint64_t sub_1005C8140(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  sub_1005C8188((_QWORD *)a1, a2);
  return a1;
}

void sub_1005C816C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
    sub_1018FF474(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1005C8188(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;

  if (*(_BYTE *)(a2 + 24))
  {
    v2 = result;
    *result = 0;
    result[1] = 0;
    result[2] = 0;
    result = sub_10027205C(result, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
    *((_BYTE *)v2 + 24) = 1;
  }
  return result;
}

__n128 sub_1005C81D0@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __n128 result;
  __int128 v4;

  v2 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = v2;
  result = *(__n128 *)(a1 + 64);
  v4 = *(_OWORD *)(a1 + 80);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v4;
  return result;
}

uint64_t sub_1005C81E4(_QWORD *a1)
{
  _QWORD *v2;
  void **v3;
  void **v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = a1 + 5;
  v3 = (void **)a1[1];
  v4 = (void **)a1[2];
  if (v4 == v3)
  {
    v4 = (void **)a1[1];
  }
  else
  {
    v5 = a1[4];
    v6 = &v3[v5 / 0x2A];
    v7 = (uint64_t)*v6 + 96 * (v5 % 0x2A);
    v8 = (unint64_t)v3[(a1[5] + v5) / 0x2A] + 96 * ((a1[5] + v5) % 0x2A);
    if (v7 != v8)
    {
      do
      {
        sub_1005C8328((uint64_t)v2, v7);
        v7 += 96;
        if (v7 - (_QWORD)*v6 == 4032)
        {
          v9 = (uint64_t)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != v8);
      v3 = (void **)a1[1];
      v4 = (void **)a1[2];
    }
  }
  *v2 = 0;
  v10 = (char *)v4 - (char *)v3;
  if ((unint64_t)((char *)v4 - (char *)v3) >= 0x11)
  {
    do
    {
      operator delete(*v3);
      v4 = (void **)a1[2];
      v3 = (void **)(a1[1] + 8);
      a1[1] = v3;
      v10 = (char *)v4 - (char *)v3;
    }
    while ((unint64_t)((char *)v4 - (char *)v3) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 21;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_16;
    v12 = 42;
  }
  a1[4] = v12;
LABEL_16:
  while (v3 != v4)
  {
    v13 = *v3++;
    operator delete(v13);
  }
  return sub_10002E778((uint64_t)a1);
}

void sub_1005C8328(uint64_t a1, uint64_t a2)
{
  void *v3;

  if (*(char *)(a2 + 87) < 0)
    operator delete(*(void **)(a2 + 64));
  v3 = *(void **)(a2 + 16);
  if (v3)
  {
    *(_QWORD *)(a2 + 24) = v3;
    operator delete(v3);
  }
}

uint64_t sub_1005C836C(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  *(_DWORD *)a1 = *a2;
  sub_1005C83C8(a1 + 8, a3);
  v5 = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a1 + 40) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a3 + 40);
  return a1;
}

uint64_t sub_1005C83C8(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = a1 + 8;
  sub_1005C841C((_OWORD *)a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_1005C8404(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100008848(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *sub_1005C841C(_OWORD *result, int *a2, int *a3)
{
  int *v4;
  uint64_t **v5;
  uint64_t *v6;
  int *v7;
  int *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = (uint64_t *)result + 1;
    do
    {
      result = sub_1005C84A0(v5, v6, v4 + 8, (uint64_t)(v4 + 8));
      v7 = (int *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (int *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

_OWORD *sub_1005C84A0(uint64_t **a1, uint64_t *a2, int *a3, uint64_t a4)
{
  uint64_t *v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = sub_10034258C(a1, a2, &v11, &v10, a3);
  v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x38uLL);
    v7[2] = *(_OWORD *)a4;
    *((_QWORD *)v7 + 6) = *(_QWORD *)(a4 + 16);
    sub_1000145B0(a1, (uint64_t)v11, v8, (uint64_t *)v7);
  }
  return v7;
}

_QWORD *sub_1005C852C@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0xA8uLL);
  result = sub_1005C8584(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1005C8570(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1005C8584(_QWORD *a1, uint64_t a2)
{
  char v4;

  a1[2] = 0;
  *a1 = off_102146AD0;
  a1[1] = 0;
  sub_1005C862C((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1005C85D0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1005C85E4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102146AD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1005C85F8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102146AD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

_QWORD *sub_1005C862C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *result;

  *(_WORD *)a2 = *(_WORD *)a3;
  sub_10031F08C((_BYTE *)(a2 + 8), a3 + 8);
  v5 = *(_QWORD *)(a3 + 104);
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 104) = v5;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  result = sub_10055A7B8((_QWORD *)(a2 + 112), *(_QWORD *)(a3 + 112), *(_QWORD *)(a3 + 120), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a3 + 120) - *(_QWORD *)(a3 + 112)) >> 3));
  *(_QWORD *)(a2 + 136) = *(_QWORD *)(a3 + 136);
  return result;
}

void sub_1005C86A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 96))
    sub_101901214(v1);
  _Unwind_Resume(exception_object);
}

void sub_1005C86BC(uint64_t a1, uint64_t a2)
{
  void **v3;

  v3 = (void **)(a2 + 112);
  sub_100279AA4(&v3);
  if (*(_BYTE *)(a2 + 96))
  {
    if (*(char *)(a2 + 39) < 0)
      operator delete(*(void **)(a2 + 16));
  }
}

void sub_1005C8708(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t sub_1005C8734(uint64_t *a1, uint64_t *a2, __int128 *a3, int *a4, int *a5, int *a6, double *a7, uint64_t *a8, char *a9, char *a10, int *a11)
{
  uint64_t v12;
  unint64_t v13;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t *v31;

  v12 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  v13 = v12 + 1;
  if ((unint64_t)(v12 + 1) > 0x2E8BA2E8BA2E8BALL)
    sub_100259694();
  v20 = a10;
  if (0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3) > v13)
    v13 = 0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3);
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 3)) >= 0x1745D1745D1745DLL)
    v21 = 0x2E8BA2E8BA2E8BALL;
  else
    v21 = v13;
  v31 = a1 + 2;
  if (v21)
  {
    v26 = a8;
    v25 = v12;
    v22 = (char *)sub_100279B30((uint64_t)(a1 + 2), v21);
    v12 = v25;
    a8 = v26;
    v20 = a10;
  }
  else
  {
    v22 = 0;
  }
  v27 = v22;
  v28 = &v22[88 * v12];
  v30 = &v22[88 * v21];
  sub_1005C88B8((uint64_t)(a1 + 2), (uint64_t)v28, a2, a3, a4, a5, a6, a7, a8, a9, v20, a11);
  v29 = v28 + 88;
  sub_1000591E8(a1, &v27);
  v23 = a1[1];
  sub_10005925C((uint64_t)&v27);
  return v23;
}

void sub_1005C88A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_10005925C((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1005C88B8(uint64_t a1, uint64_t a2, uint64_t *a3, __int128 *a4, int *a5, int *a6, int *a7, double *a8, uint64_t *a9, char *a10, char *a11, int *a12)
{
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  double result;
  uint64_t v22;
  char v23;
  char v24;
  int v25;
  __int128 v26;
  uint64_t v27;

  v17 = *a3;
  if (*((char *)a4 + 23) < 0)
  {
    sub_100115CE4(&v26, *(void **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v26 = *a4;
    v27 = *((_QWORD *)a4 + 2);
  }
  v18 = *a5;
  v19 = *a6;
  v20 = *a7;
  result = *a8;
  v22 = *a9;
  v23 = *a10;
  v24 = *a11;
  v25 = *a12;
  *(_QWORD *)a2 = v17;
  *(_OWORD *)(a2 + 8) = v26;
  *(_QWORD *)(a2 + 24) = v27;
  *(_DWORD *)(a2 + 32) = v18;
  *(_DWORD *)(a2 + 36) = v19;
  *(_DWORD *)(a2 + 40) = v20;
  *(double *)(a2 + 48) = result;
  *(_QWORD *)(a2 + 56) = v22;
  *(_BYTE *)(a2 + 64) = v23;
  *(_BYTE *)(a2 + 65) = v24;
  *(_DWORD *)(a2 + 68) = v25;
  *(_BYTE *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  return result;
}

void sub_1005C8994()
{
  operator new();
}

void sub_1005C8A70()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 96))
  {
    if (*(char *)(v0 + 39) < 0)
      operator delete(*(void **)(v0 + 16));
  }
  operator delete();
}

uint64_t sub_1005C8AB4(uint64_t result)
{
  uint64_t v1;
  void **v2;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
  {
    v2 = (void **)(v1 + 112);
    sub_100279AA4(&v2);
    if (*(_BYTE *)(v1 + 96))
    {
      if (*(char *)(v1 + 39) < 0)
        operator delete(*(void **)(v1 + 16));
    }
    operator delete();
  }
  return result;
}

void sub_1005C8B1C(uint64_t a1, int **a2, int **a3, const void *a4, __CFDictionary *a5)
{
  __CFArray *Mutable;
  int *i;
  __CFDictionary *v10;
  CFNumberRef v11;
  CFNumberRef v12;
  BOOL v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  uint64_t v17;
  int valuePtr;
  _DWORD v20[2];
  __int16 v21;
  __CFDictionary *v22;
  __int16 v23;
  CFNumberRef v24;
  uint8_t buf[4];
  int v26;
  __int16 v27;
  __CFDictionary *v28;
  __int16 v29;
  CFNumberRef v30;

  Mutable = CFArrayCreateMutable(0, 24, &kCFTypeArrayCallBacks);
  for (i = *a2; i != *a3; ++i)
  {
    valuePtr = *i;
    if (valuePtr != -1)
    {
      v10 = CFDictionaryCreateMutable(kCFAllocatorDefault, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      v11 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      v12 = v11;
      if (v10)
        v13 = v11 == 0;
      else
        v13 = 1;
      if (v13)
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021469D0);
        v14 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67240704;
          v26 = valuePtr;
          v27 = 2050;
          v28 = v10;
          v29 = 2050;
          v30 = v12;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "could not create param for channel %{public}d channelDict %{public}p channelNumber %{public}p", buf, 0x1Cu);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_1021469D0);
          v20[0] = 67240704;
          v20[1] = valuePtr;
          v21 = 2050;
          v22 = v10;
          v23 = 2050;
          v24 = v12;
          LODWORD(v17) = 28;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "could not create param for channel %{public}d channelDict %{public}p channelNumber %{public}p", v20, v17);
          v16 = (uint8_t *)v15;
          sub_100512490("Generic", 1, 0, 0, "void CLWifiService::setScanOptionsChannels(const Iter &, const Iter &, CFNumberRef, CFMutableDictionaryRef) [Iter = const int *]", "%s\n", v15);
          if (v16 != buf)
            free(v16);
        }
      }
      else
      {
        CFDictionaryAddValue(v10, CFSTR("CHANNEL"), v11);
        CFDictionaryAddValue(v10, CFSTR("CHANNEL_FLAGS"), a4);
        CFArrayAppendValue(Mutable, v10);
        CFRelease(v10);
        CFRelease(v12);
      }
    }
  }
  CFDictionarySetValue(a5, CFSTR("SCAN_CHANNELS"), Mutable);
  CFRelease(Mutable);
}

void sub_1005C8E1C(uint64_t a1, int **a2, int **a3, const void *a4, __CFDictionary *a5)
{
  __CFArray *Mutable;
  int *i;
  __CFDictionary *v10;
  CFNumberRef v11;
  CFNumberRef v12;
  BOOL v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  uint64_t v17;
  int valuePtr;
  _DWORD v20[2];
  __int16 v21;
  __CFDictionary *v22;
  __int16 v23;
  CFNumberRef v24;
  uint8_t buf[4];
  int v26;
  __int16 v27;
  __CFDictionary *v28;
  __int16 v29;
  CFNumberRef v30;

  Mutable = CFArrayCreateMutable(0, 24, &kCFTypeArrayCallBacks);
  for (i = *a2; i != *a3; ++i)
  {
    valuePtr = *i;
    if (valuePtr != -1)
    {
      v10 = CFDictionaryCreateMutable(kCFAllocatorDefault, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      v11 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      v12 = v11;
      if (v10)
        v13 = v11 == 0;
      else
        v13 = 1;
      if (v13)
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021469D0);
        v14 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67240704;
          v26 = valuePtr;
          v27 = 2050;
          v28 = v10;
          v29 = 2050;
          v30 = v12;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "could not create param for channel %{public}d channelDict %{public}p channelNumber %{public}p", buf, 0x1Cu);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_1021469D0);
          v20[0] = 67240704;
          v20[1] = valuePtr;
          v21 = 2050;
          v22 = v10;
          v23 = 2050;
          v24 = v12;
          LODWORD(v17) = 28;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "could not create param for channel %{public}d channelDict %{public}p channelNumber %{public}p", v20, v17);
          v16 = (uint8_t *)v15;
          sub_100512490("Generic", 1, 0, 0, "void CLWifiService::setScanOptionsChannels(const Iter &, const Iter &, CFNumberRef, CFMutableDictionaryRef) [Iter = int *]", "%s\n", v15);
          if (v16 != buf)
            free(v16);
        }
      }
      else
      {
        CFDictionaryAddValue(v10, CFSTR("CHANNEL"), v11);
        CFDictionaryAddValue(v10, CFSTR("CHANNEL_FLAGS"), a4);
        CFArrayAppendValue(Mutable, v10);
        CFRelease(v10);
        CFRelease(v12);
      }
    }
  }
  CFDictionarySetValue(a5, CFSTR("SCAN_CHANNELS"), Mutable);
  CFRelease(Mutable);
}

void sub_1005C911C(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x2A;
  v4 = v2 - 42;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFC0uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFC0uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFC0uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1005C93E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1005C9430(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4[2];
  void *v5;
  void *v6;
  void *__p;
  char v8;

  sub_100278210((uint64_t)v4, a3);
  sub_100278210(a2, v4);
  if (v8 < 0)
    operator delete(__p);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
}

void sub_1005C948C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10027740C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_1005C94A0(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_1002A2F6C(result, a4);
    result = (_QWORD *)sub_1005C9524((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1005C9504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_100279AA4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1005C9524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  __int128 *v6;
  uint64_t v7;
  _BYTE *v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[3];
  char v16;
  uint64_t v17;
  uint64_t v18;

  v4 = a4;
  v17 = a4;
  v18 = a4;
  v15[0] = a1;
  v15[1] = &v17;
  v15[2] = &v18;
  v16 = 0;
  if (a2 != a3)
  {
    v6 = (__int128 *)(a2 + 8);
    do
    {
      v7 = (uint64_t)v6 - 8;
      *(_QWORD *)v4 = *((_QWORD *)v6 - 1);
      v8 = (_BYTE *)(v4 + 8);
      if (*((char *)v6 + 23) < 0)
      {
        sub_100115CE4(v8, *(void **)v6, *((_QWORD *)v6 + 1));
        v10 = v18;
      }
      else
      {
        v9 = *v6;
        *(_QWORD *)(v4 + 24) = *((_QWORD *)v6 + 2);
        *(_OWORD *)v8 = v9;
        v10 = v4;
      }
      v11 = *(__int128 *)((char *)v6 + 24);
      v12 = *(__int128 *)((char *)v6 + 40);
      v13 = *(__int128 *)((char *)v6 + 56);
      *(_QWORD *)(v4 + 80) = *((_QWORD *)v6 + 9);
      *(_OWORD *)(v4 + 48) = v12;
      *(_OWORD *)(v4 + 64) = v13;
      *(_OWORD *)(v4 + 32) = v11;
      v4 = v10 + 88;
      v18 = v10 + 88;
      v6 = (__int128 *)((char *)v6 + 88);
    }
    while (v7 + 88 != a3);
  }
  v16 = 1;
  sub_10055A4E0((uint64_t)v15);
  return v4;
}

void sub_1005C95F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10055A4E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1005C960C(uint64_t a1, int **a2, int **a3, const void *a4, __CFDictionary *a5)
{
  __CFArray *Mutable;
  int *i;
  __CFDictionary *v10;
  CFNumberRef v11;
  CFNumberRef v12;
  BOOL v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  uint64_t v17;
  int valuePtr;
  _DWORD v20[2];
  __int16 v21;
  __CFDictionary *v22;
  __int16 v23;
  CFNumberRef v24;
  uint8_t buf[4];
  int v26;
  __int16 v27;
  __CFDictionary *v28;
  __int16 v29;
  CFNumberRef v30;

  Mutable = CFArrayCreateMutable(0, 24, &kCFTypeArrayCallBacks);
  for (i = *a2; i != *a3; ++i)
  {
    valuePtr = *i;
    if (valuePtr != -1)
    {
      v10 = CFDictionaryCreateMutable(kCFAllocatorDefault, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      v11 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      v12 = v11;
      if (v10)
        v13 = v11 == 0;
      else
        v13 = 1;
      if (v13)
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021469D0);
        v14 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67240704;
          v26 = valuePtr;
          v27 = 2050;
          v28 = v10;
          v29 = 2050;
          v30 = v12;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "could not create param for channel %{public}d channelDict %{public}p channelNumber %{public}p", buf, 0x1Cu);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_1021469D0);
          v20[0] = 67240704;
          v20[1] = valuePtr;
          v21 = 2050;
          v22 = v10;
          v23 = 2050;
          v24 = v12;
          LODWORD(v17) = 28;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "could not create param for channel %{public}d channelDict %{public}p channelNumber %{public}p", v20, v17);
          v16 = (uint8_t *)v15;
          sub_100512490("Generic", 1, 0, 0, "void CLWifiService::setScanOptionsChannels(const Iter &, const Iter &, CFNumberRef, CFMutableDictionaryRef) [Iter = std::__wrap_iter<int *>]", "%s\n", v15);
          if (v16 != buf)
            free(v16);
        }
      }
      else
      {
        CFDictionaryAddValue(v10, CFSTR("CHANNEL"), v11);
        CFDictionaryAddValue(v10, CFSTR("CHANNEL_FLAGS"), a4);
        CFArrayAppendValue(Mutable, v10);
        CFRelease(v10);
        CFRelease(v12);
      }
    }
  }
  CFDictionarySetValue(a5, CFSTR("SCAN_CHANNELS"), Mutable);
  CFRelease(Mutable);
}

void sub_1005C990C(uint64_t a1, int **a2, int **a3, const void *a4, __CFDictionary *a5)
{
  __CFArray *Mutable;
  int *i;
  __CFDictionary *v10;
  CFNumberRef v11;
  CFNumberRef v12;
  BOOL v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  uint64_t v17;
  int valuePtr;
  _DWORD v20[2];
  __int16 v21;
  __CFDictionary *v22;
  __int16 v23;
  CFNumberRef v24;
  uint8_t buf[4];
  int v26;
  __int16 v27;
  __CFDictionary *v28;
  __int16 v29;
  CFNumberRef v30;

  Mutable = CFArrayCreateMutable(0, 24, &kCFTypeArrayCallBacks);
  for (i = *a2; i != *a3; ++i)
  {
    valuePtr = *i;
    if (valuePtr != -1)
    {
      v10 = CFDictionaryCreateMutable(kCFAllocatorDefault, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      v11 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      v12 = v11;
      if (v10)
        v13 = v11 == 0;
      else
        v13 = 1;
      if (v13)
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021469D0);
        v14 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67240704;
          v26 = valuePtr;
          v27 = 2050;
          v28 = v10;
          v29 = 2050;
          v30 = v12;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "could not create param for channel %{public}d channelDict %{public}p channelNumber %{public}p", buf, 0x1Cu);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_1021469D0);
          v20[0] = 67240704;
          v20[1] = valuePtr;
          v21 = 2050;
          v22 = v10;
          v23 = 2050;
          v24 = v12;
          LODWORD(v17) = 28;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "could not create param for channel %{public}d channelDict %{public}p channelNumber %{public}p", v20, v17);
          v16 = (uint8_t *)v15;
          sub_100512490("Generic", 1, 0, 0, "void CLWifiService::setScanOptionsChannels(const Iter &, const Iter &, CFNumberRef, CFMutableDictionaryRef) [Iter = std::__wrap_iter<const int *>]", "%s\n", v15);
          if (v16 != buf)
            free(v16);
        }
      }
      else
      {
        CFDictionaryAddValue(v10, CFSTR("CHANNEL"), v11);
        CFDictionaryAddValue(v10, CFSTR("CHANNEL_FLAGS"), a4);
        CFArrayAppendValue(Mutable, v10);
        CFRelease(v10);
        CFRelease(v12);
      }
    }
  }
  CFDictionarySetValue(a5, CFSTR("SCAN_CHANNELS"), Mutable);
  CFRelease(Mutable);
}

uint64_t sub_1005C9C0C(uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x2A)
    a2 = 1;
  if (v2 < 0x54)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 42;
  }
  return v4 ^ 1u;
}

id sub_1005C9C68(void *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = objc_opt_class(CLCppContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_1005C9CB4(a1);
  else
    return 0;
}

id sub_1005C9CB4(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102146B10);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BB74B4 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102146B10);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102146B10);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BB74B4 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102146B10);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLWifiService_Type::RegInfo, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

void sub_1005CA074()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_1005CA110(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_1005CA128()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_1005CA1B4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

uint64_t sub_1005CA4C4(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  BOOL v10;
  uint64_t v11;
  int v12;
  char v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t result;
  char v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v8 = v7 + 1;
      if (v7 == -1 || v8 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v10 = v5++ >= 9;
      if (v10)
      {
        v6 = 0;
        v11 = OBJC_IVAR___PBDataReader__error;
        v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v11 = OBJC_IVAR___PBDataReader__error;
    v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v12 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        v14 = 0;
        v15 = 0;
        v16 = 0;
        *(_BYTE *)(a1 + 52) |= 2u;
        while (1)
        {
          v17 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v18 = v17 + 1;
          if (v17 == -1 || v18 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v19 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v18;
          v16 |= (unint64_t)(v19 & 0x7F) << v14;
          if ((v19 & 0x80) == 0)
            goto LABEL_54;
          v14 += 7;
          v10 = v15++ >= 9;
          if (v10)
          {
            LODWORD(v16) = 0;
            goto LABEL_56;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_54:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v16) = 0;
LABEL_56:
        v37 = 44;
        goto LABEL_61;
      case 2u:
        v21 = 0;
        v22 = 0;
        v16 = 0;
        while (2)
        {
          v23 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v24 = v23 + 1;
          if (v23 == -1 || v24 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v25 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24;
            v16 |= (unint64_t)(v25 & 0x7F) << v21;
            if (v25 < 0)
            {
              v21 += 7;
              v10 = v22++ >= 9;
              if (v10)
              {
                LODWORD(v16) = 0;
                goto LABEL_60;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v16) = 0;
LABEL_60:
        v37 = 40;
LABEL_61:
        *(_DWORD *)(a1 + v37) = v16;
        continue;
      case 3u:
        v26 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v26 <= 0xFFFFFFFFFFFFFFF7 && v26 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v27 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v26);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v26 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v11) = 1;
          v27 = 0;
        }
        v38 = 8;
        goto LABEL_74;
      case 4u:
        v28 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v28 <= 0xFFFFFFFFFFFFFFF7 && v28 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v27 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v28);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v11) = 1;
          v27 = 0;
        }
        v38 = 16;
        goto LABEL_74;
      case 5u:
        v29 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v29 <= 0xFFFFFFFFFFFFFFF7 && v29 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v27 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v29);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v29 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v11) = 1;
          v27 = 0;
        }
        v38 = 24;
        goto LABEL_74;
      case 6u:
        *(_BYTE *)(a1 + 52) |= 1u;
        v30 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v27 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v30);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v30 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v27 = 0;
        }
        v38 = 32;
LABEL_74:
        *(_QWORD *)(a1 + v38) = v27;
        continue;
      case 7u:
        v31 = 0;
        v32 = 0;
        v33 = 0;
        *(_BYTE *)(a1 + 52) |= 4u;
        break;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v34 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v35 = v34 + 1;
      if (v34 == -1 || v35 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v36 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v34);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v35;
      v33 |= (unint64_t)(v36 & 0x7F) << v31;
      if ((v36 & 0x80) == 0)
        goto LABEL_63;
      v31 += 7;
      v10 = v32++ >= 9;
      if (v10)
      {
        v33 = 0;
        goto LABEL_65;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_63:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v33 = 0;
LABEL_65:
    *(_BYTE *)(a1 + 48) = v33 != 0;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_1005CB0EC(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1005CB11C(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  int v9;
  uint64_t v10;

  *(_QWORD *)a1 = &off_102146C40;
  sub_1018BEA14((unsigned __int8 *)(a1 + 8), "NatalimetryMaxDelay", &qword_101BB7528, 0);
  *(_QWORD *)a1 = off_102146BD0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = *a2;
  v6 = a2[1];
  *(_QWORD *)(a1 + 48) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 201) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  LOBYTE(v10) = 0;
  sub_1018BF25C((unsigned __int8 *)(a1 + 217), "LogBinaryNatalimetryOutputs", (unsigned __int8 *)&v10, 0);
  LODWORD(v10) = -1082130432;
  sub_1018C2254((unsigned __int8 *)(a1 + 220), "OverrideUserMetsWithMets", &v10, 0);
  LODWORD(v10) = -1082130432;
  sub_1018C2254((unsigned __int8 *)(a1 + 232), "OverrideRawTruthMetsWithMets", &v10, 0);
  *(_QWORD *)(a1 + 248) = off_10213D2B0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 312) = a1 + 320;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0x10000000000000;
  *(_DWORD *)(a1 + 256) = 3;
  *(_QWORD *)(a1 + 344) = off_10213D2B0;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 408) = a1 + 416;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0x10000000000000;
  *(_DWORD *)(a1 + 352) = 3;
  *(_QWORD *)(a1 + 440) = a3;
  sub_100B6A518(a1 + 448, a3);
  sub_100FE4E44(a1 + 520);
  v9 = sub_1011B9850();
  sub_100FEBDD4(v9);
}

void sub_1005CB34C()
{
  operator delete();
}

uint64_t sub_1005CB420(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_102146BD0;

  sub_1005CBF30((_QWORD *)(a1 + 520));
  sub_100B6A57C(a1 + 448);
  *(_QWORD *)(a1 + 344) = off_10213D2B0;
  sub_100008848(a1 + 408, *(_QWORD **)(a1 + 416));
  sub_10047F25C((_QWORD *)(a1 + 360));
  *(_QWORD *)(a1 + 248) = off_10213D2B0;
  sub_100008848(a1 + 312, *(_QWORD **)(a1 + 320));
  sub_10047F25C((_QWORD *)(a1 + 264));
  sub_1004A4854((_QWORD *)(a1 + 168));
  sub_1004A4854((_QWORD *)(a1 + 120));
  sub_10047F25C((_QWORD *)(a1 + 72));
  v2 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_100261F44(a1 + 40);
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  return a1;
}

void sub_1005CB4F8(uint64_t a1)
{
  sub_1005CB420(a1);
  operator delete();
}

void sub_1005CB51C(uint64_t a1, uint64_t a2)
{
  sub_100B6A580(a1 + 448, a2);
}

void sub_1005CB524(uint64_t a1)
{
  NSObject *v2;
  double Current;
  double v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  _QWORD v9[2];
  char v10;
  uint8_t buf[600];
  uint64_t v12;
  double v13;
  char v14;

  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_102146C78);
  v2 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Pausing calorimetry processing", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102146C78);
    LOWORD(v9[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 1, "Pausing calorimetry processing", v9, 2);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLCalorieController::pause()", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  *(_BYTE *)(a1 + 216) = 1;
  Current = CFAbsoluteTimeGetCurrent();
  if (*(_BYTE *)(a1 + 218))
  {
    v4 = Current;
    v9[0] = off_102171CA8;
    v10 = 1;
    *(double *)&v9[1] = Current;
    v5 = sub_1011B78D4();
    sub_1011B8DB0(v5, (uint64_t)v9);
    sub_1015EB864(buf);
    sub_101605604((uint64_t)buf);
    v14 |= 1u;
    v13 = v4;
    v6 = v12;
    *(_BYTE *)(v12 + 12) |= 1u;
    *(_BYTE *)(v6 + 8) = 1;
    if (qword_1023118A8 != -1)
      dispatch_once(&qword_1023118A8, &stru_102146C98);
    if (qword_1023118B0)
      sub_101888B64(qword_1023118B0, (uint64_t)buf);
    sub_1015EE304((PB::Base *)buf);
  }
}

void sub_1005CB780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_1005CB7A0(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint8_t *v6;
  uint64_t (**v7)();
  CFAbsoluteTime Current;
  char v9;
  uint8_t buf[600];
  uint64_t v11;
  CFAbsoluteTime v12;
  char v13;

  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_102146C78);
  v2 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Resuming calorimetry processing", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102146C78);
    LOWORD(v7) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 1, "Resuming calorimetry processing", &v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLCalorieController::resume()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  *(_BYTE *)(a1 + 216) = 0;
  if (*(_BYTE *)(a1 + 218))
  {
    v7 = off_102171CA8;
    v9 = 0;
    Current = CFAbsoluteTimeGetCurrent();
    v3 = sub_1011B78D4();
    sub_1011B8DB0(v3, (uint64_t)&v7);
    sub_1015EB864(buf);
    sub_101605604((uint64_t)buf);
    v13 |= 1u;
    v12 = Current;
    v4 = v11;
    *(_BYTE *)(v11 + 12) |= 1u;
    *(_BYTE *)(v4 + 8) = 0;
    if (qword_1023118A8 != -1)
      dispatch_once(&qword_1023118A8, &stru_102146C98);
    if (qword_1023118B0)
      sub_101888B64(qword_1023118B0, (uint64_t)buf);
    sub_1015EE304((PB::Base *)buf);
  }
}

void sub_1005CB9E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005CBA08(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  sub_100FE65A0(a1 + 520, a2);
  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 24))(result, a2);
  return result;
}

void sub_1005CBA50(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6)
{
  void *v11;
  ALActivityLog *v12;
  int v13;
  ALCMCalorieData *v14;
  double v15;
  int v16;
  ALCMCalorieData *v17;
  double v18;
  int v19;
  ALCMCalorieData *v20;
  double v21;
  void *v22;
  ALActivityLog *v23;
  float v24;
  ALCLOdometer *v25;
  double v26;
  float v27;
  ALCLOdometer *v28;
  double v29;
  float v30;
  ALCLOdometer *v31;
  double v32;
  float v33;
  ALCLOdometer *v34;
  double v35;
  float v36;
  ALCLOdometer *v37;
  double v38;
  float v39;
  ALCLOdometer *v40;
  double v41;
  float v42;
  ALCLOdometer *v43;
  double v44;
  void *v45;
  ALActivityLog *v46;
  float v47;
  ALCMElevation *v48;
  double v49;
  void *v50;
  ALActivityLog *v51;
  int v52;
  ALCLStairClimbingModel *v53;
  double v54;
  void *v55;
  ALActivityLog *v56;
  int v57;
  ALCLRowingModel *v58;
  double v59;
  int v60;
  ALCLRowingModel *v61;
  double v62;
  int v63;
  ALCLRowingModel *v64;
  double v65;

  sub_100197040();
  if (sub_100195F08())
  {
    v11 = objc_autoreleasePoolPush();
    v12 = objc_alloc_init(ALActivityLog);
    -[ALActivityLog setTimestamp:](v12, "setTimestamp:", *(double *)(a5 + 16));
    -[ALActivityLog setCalorieData:](v12, "setCalorieData:", objc_alloc_init(ALCMCalorieData));
    -[ALCMCalorieData setActivityType:](-[ALActivityLog calorieData](v12, "calorieData"), "setActivityType:", *(unsigned int *)(a5 + 24));
    -[ALCMCalorieData setIsStanding:](-[ALActivityLog calorieData](v12, "calorieData"), "setIsStanding:", *(unsigned __int8 *)(a5 + 29));
    -[ALCMCalorieData setUserMets:](-[ALActivityLog calorieData](v12, "calorieData"), "setUserMets:", *(double *)(a5 + 32));
    -[ALCMCalorieData setTruthMets:](-[ALActivityLog calorieData](v12, "calorieData"), "setTruthMets:", *(double *)(a5 + 40));
    if (*(_BYTE *)(a4 + 208))
    {
      -[ALCMCalorieData setUserMetsSource:](-[ALActivityLog calorieData](v12, "calorieData"), "setUserMetsSource:", a6[6]);
      -[ALCMCalorieData setTruthMetsSource:](-[ALActivityLog calorieData](v12, "calorieData"), "setTruthMetsSource:", a6[8]);
      v13 = *a6;
      v14 = -[ALActivityLog calorieData](v12, "calorieData");
      LODWORD(v15) = v13;
      -[ALCMCalorieData setMetsHR:](v14, "setMetsHR:", v15);
      v16 = a6[1];
      v17 = -[ALActivityLog calorieData](v12, "calorieData");
      LODWORD(v18) = v16;
      -[ALCMCalorieData setMetsWR:](v17, "setMetsWR:", v18);
      v19 = a6[2];
      v20 = -[ALActivityLog calorieData](v12, "calorieData");
      LODWORD(v21) = v19;
      -[ALCMCalorieData setMetsFM:](v20, "setMetsFM:", v21);
    }
    objc_msgSend(-[CLServiceVendor proxyForService:](+[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance"), "proxyForService:", CFSTR("CLActivityLogger")), "logData:", v12);
    objc_autoreleasePoolPop(v11);
    if (*(_BYTE *)(*(_QWORD *)(a3 + 16) + 80))
    {
      v22 = objc_autoreleasePoolPush();
      v23 = objc_alloc_init(ALActivityLog);
      -[ALActivityLog setTimestamp:](v23, "setTimestamp:", a1);
      -[ALActivityLog setOdometer:](v23, "setOdometer:", objc_alloc_init(ALCLOdometer));
      v24 = *(double *)(a3 + 624);
      v25 = -[ALActivityLog odometer](v23, "odometer");
      *(float *)&v26 = v24;
      -[ALCLOdometer setDistance:](v25, "setDistance:", v26);
      v27 = *(double *)(a3 + 632);
      v28 = -[ALActivityLog odometer](v23, "odometer");
      *(float *)&v29 = v27;
      -[ALCLOdometer setAccuracy:](v28, "setAccuracy:", v29);
      v30 = *(double *)(a3 + 640);
      v31 = -[ALActivityLog odometer](v23, "odometer");
      *(float *)&v32 = v30;
      -[ALCLOdometer setGpsAltitude:](v31, "setGpsAltitude:", v32);
      v33 = *(double *)(a3 + 648);
      v34 = -[ALActivityLog odometer](v23, "odometer");
      *(float *)&v35 = v33;
      -[ALCLOdometer setSpeed:](v34, "setSpeed:", v35);
      v36 = *(double *)(a3 + 656);
      v37 = -[ALActivityLog odometer](v23, "odometer");
      *(float *)&v38 = v36;
      -[ALCLOdometer setRawSpeed:](v37, "setRawSpeed:", v38);
      v39 = *(double *)(a3 + 664);
      v40 = -[ALActivityLog odometer](v23, "odometer");
      *(float *)&v41 = v39;
      -[ALCLOdometer setOdometer:](v40, "setOdometer:", v41);
      v42 = *(double *)(a3 + 672);
      v43 = -[ALActivityLog odometer](v23, "odometer");
      *(float *)&v44 = v42;
      -[ALCLOdometer setGpsSpeedAccuracy:](v43, "setGpsSpeedAccuracy:", v44);
      -[ALCLOdometer setTimestampGps:](-[ALActivityLog odometer](v23, "odometer"), "setTimestampGps:", *(double *)(a3 + 680));
      -[ALCLOdometer setQuality:](-[ALActivityLog odometer](v23, "odometer"), "setQuality:", *(unsigned int *)(a3 + 696));
      objc_msgSend(-[CLServiceVendor proxyForService:](+[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance"), "proxyForService:", CFSTR("CLActivityLogger")), "logData:", v23);
      objc_autoreleasePoolPop(v22);
    }
    if (*(_BYTE *)(*(_QWORD *)(a3 + 24) + 80))
    {
      v45 = objc_autoreleasePoolPush();
      v46 = objc_alloc_init(ALActivityLog);
      -[ALActivityLog setTimestamp:](v46, "setTimestamp:", a1);
      -[ALActivityLog setElevation:](v46, "setElevation:", objc_alloc_init(ALCMElevation));
      -[ALCMElevation setElevationAscended:](-[ALActivityLog elevation](v46, "elevation"), "setElevationAscended:", *(unsigned int *)(a3 + 824));
      -[ALCMElevation setElevationDescended:](-[ALActivityLog elevation](v46, "elevation"), "setElevationDescended:", *(unsigned int *)(a3 + 828));
      -[ALCMElevation setGradeType:](-[ALActivityLog elevation](v46, "elevation"), "setGradeType:", *(unsigned int *)(a3 + 832));
      v47 = *(double *)(a3 + 840);
      v48 = -[ALActivityLog elevation](v46, "elevation");
      *(float *)&v49 = v47;
      -[ALCMElevation setVerticalSpeed:](v48, "setVerticalSpeed:", v49);
      -[ALCMElevation setRawGradeType:](-[ALActivityLog elevation](v46, "elevation"), "setRawGradeType:", *(unsigned int *)(a3 + 832));
      -[ALCMElevation setSource:](-[ALActivityLog elevation](v46, "elevation"), "setSource:", *(unsigned int *)(a3 + 848));
      objc_msgSend(-[CLServiceVendor proxyForService:](+[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance"), "proxyForService:", CFSTR("CLActivityLogger")), "logData:", v46);
      objc_autoreleasePoolPop(v45);
    }
    if (*(_BYTE *)(*(_QWORD *)(a3 + 8) + 80))
    {
      v50 = objc_autoreleasePoolPush();
      v51 = objc_alloc_init(ALActivityLog);
      -[ALActivityLog setTimestamp:](v51, "setTimestamp:", a1);
      -[ALActivityLog setStairClimbingModel:](v51, "setStairClimbingModel:", objc_alloc_init(ALCLStairClimbingModel));
      v52 = *(_DWORD *)(a3 + 304);
      v53 = -[ALActivityLog stairClimbingModel](v51, "stairClimbingModel");
      LODWORD(v54) = v52;
      -[ALCLStairClimbingModel setMachineFrequency:](v53, "setMachineFrequency:", v54);
      objc_msgSend(-[CLServiceVendor proxyForService:](+[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance"), "proxyForService:", CFSTR("CLActivityLogger")), "logData:", v51);
      objc_autoreleasePoolPop(v50);
      if (*(_BYTE *)(*(_QWORD *)(a3 + 8) + 80))
      {
        v55 = objc_autoreleasePoolPush();
        v56 = objc_alloc_init(ALActivityLog);
        -[ALActivityLog setTimestamp:](v56, "setTimestamp:", a1);
        -[ALActivityLog setRowingModel:](v56, "setRowingModel:", objc_alloc_init(ALCLRowingModel));
        v57 = *(_DWORD *)(a3 + 316);
        v58 = -[ALActivityLog rowingModel](v56, "rowingModel");
        LODWORD(v59) = v57;
        -[ALCLRowingModel setStrokePower:](v58, "setStrokePower:", v59);
        v60 = *(_DWORD *)(a3 + 312);
        v61 = -[ALActivityLog rowingModel](v56, "rowingModel");
        LODWORD(v62) = v60;
        -[ALCLRowingModel setStrokeAmp:](v61, "setStrokeAmp:", v62);
        v63 = *(_DWORD *)(a3 + 308);
        v64 = -[ALActivityLog rowingModel](v56, "rowingModel");
        LODWORD(v65) = v63;
        -[ALCLRowingModel setStrokeFrequency:](v64, "setStrokeFrequency:", v65);
        objc_msgSend(-[CLServiceVendor proxyForService:](+[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance"), "proxyForService:", CFSTR("CLActivityLogger")), "logData:", v56);
        objc_autoreleasePoolPop(v55);
      }
    }
  }
}

uint64_t sub_1005CBF30(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 36;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 73;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return sub_10002E778((uint64_t)a1);
}

void sub_1005CBFC4(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_1005CBFF4(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1005CC2BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1005CC308(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1005CC5D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_1005CC61C()
{
  sub_1015A2E04(qword_102301D68, "Acc800Fp");
  dword_102301D80 = 800;
  __cxa_atexit((void (*)(void *))sub_1005CB0EC, qword_102301D68, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102301D88, "DmFp");
  dword_102301DA0 = 200;
  return __cxa_atexit((void (*)(void *))sub_1005CB0EC, qword_102301D88, (void *)&_mh_execute_header);
}

void sub_1005CC6A8()
{
  operator new();
}

void sub_1005CC6F0()
{
  operator delete();
}

void sub_1005CC714()
{
  if (!qword_1023108E0)
    sub_1005CC6A8();
}

void sub_1005CC72C(uint64_t a1)
{
  sub_1010267A8(a1, (uint64_t)"CLSPU", 52);
}

void sub_1005CCC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  nullsub_34(v17);
  sub_100CEC9FC(v16);
  sub_100B57364(v15);
  sub_1005CE714(v14);
  v19 = *(_QWORD *)(v12 + 1968);
  *(_QWORD *)(v12 + 1968) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  sub_100261F44(a12);
  sub_100261F44(v13);
  sub_10051CFC0(a11, 0);
  sub_1010281DC(v12);
  _Unwind_Resume(a1);
}

uint64_t sub_1005CCD6C(_BYTE *a1)
{
  sub_100127B9C();
  sub_100127BDC();
  a1[216] = 1;
  return (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 552))(a1, 1);
}

uint64_t sub_1005CCDA8(_BYTE *a1)
{
  sub_100127B9C();
  sub_100127BDC();
  a1[216] = 1;
  return (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 552))(a1, 1);
}

void sub_1005CCDE4()
{
  NSObject *v0;
  char *v1;
  _WORD v2[8];
  uint8_t buf[1640];

  if (qword_10229FC80 != -1)
    dispatch_once(&qword_10229FC80, &stru_1021477D0);
  v0 = qword_10229FC88;
  if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "cma reopening HID driver interface, this is not expected", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC80 != -1)
      dispatch_once(&qword_10229FC80, &stru_1021477D0);
    v2[0] = 0;
    v1 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC88, 17, "cma reopening HID driver interface, this is not expected", v2, 2);
    sub_100512490("Generic", 1, 0, 0, "static void CLSPU::onRegistryIDChangedBounce(void *)", "%s\n", v1);
    if (v1 != (char *)buf)
      free(v1);
  }
}

uint64_t sub_1005CCF68(uint64_t a1)
{
  sub_100127B9C();
  sub_100127BDC();
  return sub_1005CFA48(a1, 0);
}

void sub_1005CCF94(_QWORD *a1)
{
  CFRunLoopRef Current;
  uint64_t v3;
  NSObject *v4;
  _QWORD *v5;
  IOCFPlugInInterface **v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  const void *v15;
  const void *v16;
  const void *v17[5];
  int v18;
  IOCFPlugInInterface **v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint8_t buf[4];
  IOCFPlugInInterface **v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;

  Current = CFRunLoopGetCurrent();
  sub_100127B9C();
  if (Current != (CFRunLoopRef)sub_1001AD8D0())
  {
    v3 = sub_100127B9C();
    v17[0] = _NSConcreteStackBlock;
    v17[1] = (const void *)3221225472;
    v17[2] = sub_1005CFA40;
    v17[3] = &unk_10212ECA0;
    v17[4] = a1;
    sub_1000A50A8(v3, (uint64_t)v17);
    return;
  }
  if (a1[242])
  {
    if (qword_10229FC80 != -1)
      dispatch_once(&qword_10229FC80, &stru_1021477D0);
    v4 = qword_10229FC88;
    if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Close hid driver interface", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC80 != -1)
        dispatch_once(&qword_10229FC80, &stru_1021477D0);
      LOWORD(v18) = 0;
      v11 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC88, 2, "Close hid driver interface", &v18, 2);
      sub_100512490("Generic", 1, 0, 2, "void CLSPU::closeHidDriverInterface()", "%s\n", v11);
      if (v11 != (char *)buf)
        free(v11);
    }
    v5 = a1 + 239;
    v6 = (IOCFPlugInInterface **)a1[239];
    v7 = a1[240];
    if (v7)
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v7 + 72))(a1[240], 0);
      if (!v6)
        goto LABEL_14;
    }
    else if (!v6)
    {
      *(_QWORD *)(a1[242] + 8) = 0;
      *v5 = 0;
      a1[240] = 0;
      return;
    }
    ((void (*)(IOCFPlugInInterface **))(*v6)->Release)(v6);
    IODestroyPlugInInterface(v6);
LABEL_14:
    *(_QWORD *)(a1[242] + 8) = 0;
    *v5 = 0;
    a1[240] = 0;
    if (qword_10229FC80 != -1)
      dispatch_once(&qword_10229FC80, &stru_1021477D0);
    v8 = qword_10229FC88;
    if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_DEFAULT))
    {
      v9 = a1[239];
      v10 = a1[240];
      *(_DWORD *)buf = 134218752;
      v27 = v6;
      v28 = 2048;
      v29 = v7;
      v30 = 2048;
      v31 = v9;
      v32 = 2048;
      v33 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Closed hid driver interface, {cfPlugInInterface, hidDriverInterface} was then {%p,%p}, is now {%p,%p}", buf, 0x2Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC80 != -1)
        dispatch_once(&qword_10229FC80, &stru_1021477D0);
      v12 = a1[239];
      v13 = a1[240];
      v18 = 134218752;
      v19 = v6;
      v20 = 2048;
      v21 = v7;
      v22 = 2048;
      v23 = v12;
      v24 = 2048;
      v25 = v13;
      LODWORD(v15) = 42;
      v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC88, 0, "Closed hid driver interface, {cfPlugInInterface, hidDriverInterface} was then {%p,%p}, is now {%p,%p}", &v18, v15, v16, v17[0]);
      sub_100512490("Generic", 1, 0, 2, "void CLSPU::closeHidDriverInterface()", "%s\n", v14);
      if (v14 != (char *)buf)
        free(v14);
    }
  }
}

void sub_1005CD378(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  CFRunLoopRef Current;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  __IOHIDServiceClient *v9;
  __IOHIDServiceClient *v10;
  const __CFNumber *RegistryID;
  const __CFDictionary *v12;
  io_service_t MatchingService;
  io_service_t v14;
  const __CFUUID *v15;
  const __CFUUID *v16;
  kern_return_t v17;
  kern_return_t v18;
  NSObject *v19;
  uint64_t v20;
  NSObject *v21;
  uint8_t *v22;
  NSObject *v23;
  NSObject *v24;
  NSObject *v25;
  IOCFPlugInInterface **v26;
  HRESULT (__cdecl *QueryInterface)(void *, REFIID, LPVOID *);
  const __CFUUID *v28;
  CFUUIDBytes v29;
  NSObject *v30;
  NSObject *v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t byte15;
  const void *byte15a;
  const void *v45;
  void **v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t);
  void *v49;
  uint64_t v50;
  char v51;
  SInt32 theScore;
  uint64_t v53;
  IOCFPlugInInterface **theInterface;
  uint64_t valuePtr;
  int v56;
  _BYTE v57[18];
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  IOCFPlugInInterface **v61;
  __int16 v62;
  uint64_t v63;
  uint8_t buf[4];
  _BYTE v65[18];
  __int16 v66;
  uint64_t v67;
  __int16 v68;
  IOCFPlugInInterface **v69;
  __int16 v70;
  uint64_t v71;

  if (qword_10229FC80 != -1)
    dispatch_once(&qword_10229FC80, &stru_1021477D0);
  v4 = qword_10229FC88;
  if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)v65 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Open hid driver interface,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC80 != -1)
      dispatch_once(&qword_10229FC80, &stru_1021477D0);
    v56 = 67109120;
    *(_DWORD *)v57 = a2;
    v36 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC88, 2, "Open hid driver interface,%d", &v56);
    sub_100512490("Generic", 1, 0, 2, "void CLSPU::openHidDriverInterface(BOOL)", "%s\n", v36);
    if (v36 != (char *)buf)
      free(v36);
  }
  Current = CFRunLoopGetCurrent();
  sub_100127B9C();
  if (Current != (CFRunLoopRef)sub_1001AD8D0())
  {
    if (qword_10229FC80 != -1)
      dispatch_once(&qword_10229FC80, &stru_1021477D0);
    v6 = qword_10229FC88;
    if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "openHidDriverInterface should be called from motion thread", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC80 != -1)
        dispatch_once(&qword_10229FC80, &stru_1021477D0);
      LOWORD(v56) = 0;
      v37 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC88, 17, "openHidDriverInterface should be called from motion thread", &v56, 2);
      sub_100512490("Generic", 1, 0, 0, "void CLSPU::openHidDriverInterface(BOOL)", "%s\n", v37);
      if (v37 != (char *)buf)
        free(v37);
    }
    v7 = sub_100127B9C();
    v46 = _NSConcreteStackBlock;
    v47 = 3221225472;
    v48 = sub_1005CFA30;
    v49 = &unk_1021468D0;
    v50 = a1;
    v51 = a2;
    sub_1000A50A8(v7, (uint64_t)&v46);
    return;
  }
  v8 = *(_QWORD *)(a1 + 1936);
  if (!v8)
    return;
  theInterface = 0;
  valuePtr = 0;
  v53 = 0;
  v9 = (__IOHIDServiceClient *)sub_100A0A3A0(v8);
  if (v9)
  {
    v10 = v9;
    RegistryID = (const __CFNumber *)IOHIDServiceClientGetRegistryID(v9);
    if (RegistryID)
    {
      CFNumberGetValue(RegistryID, kCFNumberSInt64Type, &valuePtr);
      if (valuePtr)
      {
        theScore = 0;
        v12 = IORegistryEntryIDMatching(valuePtr);
        MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v12);
        if (MatchingService)
        {
          v14 = MatchingService;
          v15 = CFUUIDGetConstantUUIDWithBytes(kCFAllocatorSystemDefault, 0x3Bu, 0xC5u, 0xCCu, 0x87u, 0x84u, 0x5Eu, 0x48u, 0xABu, 0xA9u, 0xC2u, 0x94u, 0x36u, 0, 0x1Bu, 0xA6u, 0x8Au);
          v16 = CFUUIDGetConstantUUIDWithBytes(0, 0xC2u, 0x44u, 0xE8u, 0x58u, 0x10u, 0x9Cu, 0x11u, 0xD4u, 0x91u, 0xD4u, 0, 0x50u, 0xE4u, 0xC6u, 0x42u, 0x6Fu);
          v17 = IOCreatePlugInInterfaceForService(v14, v15, v16, &theInterface, &theScore);
          if (!v17)
          {
            IOObjectRelease(v14);
            v26 = theInterface;
            QueryInterface = (*theInterface)->QueryInterface;
            v28 = CFUUIDGetConstantUUIDWithBytes(kCFAllocatorSystemDefault, 0x6Eu, 0xBEu, 0xBAu, 0x6Eu, 9u, 0x1Eu, 0x45u, 0x2Eu, 0x82u, 0xEAu, 0x29u, 0x79u, 0x81u, 0x6Fu, 0xB1u, 0xB5u);
            v29 = CFUUIDGetUUIDBytes(v28);
            if (((unsigned int (*)(IOCFPlugInInterface **, _QWORD, _QWORD, uint64_t *))QueryInterface)(v26, *(_QWORD *)&v29.byte0, *(_QWORD *)&v29.byte8, &v53))
            {
              if (qword_10229FC80 != -1)
                dispatch_once(&qword_10229FC80, &stru_1021477D0);
              v30 = qword_10229FC88;
              if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_FAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_FAULT, "Unable to set up query interface", buf, 2u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_10229FC80 != -1)
                  dispatch_once(&qword_10229FC80, &stru_1021477D0);
                LOWORD(v56) = 0;
                LODWORD(byte15a) = 2;
                v38 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC88, 17, "Unable to set up query interface", &v56, byte15a);
                sub_100512490("Generic", 1, 0, 0, "void CLSPU::openHidDriverInterface(BOOL)", "%s\n", v38);
                if (v38 != (char *)buf)
                  free(v38);
              }
            }
            else
            {
              if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v53 + 64))(v53, a2))
              {
                if (qword_10229FC80 != -1)
                  dispatch_once(&qword_10229FC80, &stru_1021477D0);
                v32 = qword_10229FC88;
                if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_DEFAULT))
                {
                  v33 = *(_QWORD *)(a1 + 1912);
                  v34 = *(_QWORD *)(a1 + 1920);
                  *(_DWORD *)buf = 134219008;
                  *(_QWORD *)v65 = valuePtr;
                  *(_WORD *)&v65[8] = 2048;
                  *(_QWORD *)&v65[10] = v33;
                  v66 = 2048;
                  v67 = v34;
                  v68 = 2048;
                  v69 = theInterface;
                  v70 = 2048;
                  v71 = v53;
                  _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Opened hid driver interface, registryID %llx, {cfPlugInInterface, hidDriverInterface} was then {%p,%p}, is now {%p,%p}", buf, 0x34u);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_10229FC80 != -1)
                    dispatch_once(&qword_10229FC80, &stru_1021477D0);
                  v40 = *(_QWORD *)(a1 + 1912);
                  v41 = *(_QWORD *)(a1 + 1920);
                  v56 = 134219008;
                  *(_QWORD *)v57 = valuePtr;
                  *(_WORD *)&v57[8] = 2048;
                  *(_QWORD *)&v57[10] = v40;
                  v58 = 2048;
                  v59 = v41;
                  v60 = 2048;
                  v61 = theInterface;
                  v62 = 2048;
                  v63 = v53;
                  LODWORD(byte15a) = 52;
                  v42 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC88, 0, "Opened hid driver interface, registryID %llx, {cfPlugInInterface, hidDriverInterface} was then {%p,%p}, is now {%p,%p}", &v56, byte15a, v45, v46, (const void *)v47);
                  sub_100512490("Generic", 1, 0, 2, "void CLSPU::openHidDriverInterface(BOOL)", "%s\n", v42);
                  if (v42 != (char *)buf)
                    free(v42);
                }
                *(_QWORD *)(*(_QWORD *)(a1 + 1936) + 8) = valuePtr;
                v35 = v53;
                *(_QWORD *)(a1 + 1912) = theInterface;
                *(_QWORD *)(a1 + 1920) = v35;
                sub_1005CF980((NSObject **)(a1 + 192), v35);
                if (*(_QWORD *)(a1 + 1920))
                {
                  if ((_DWORD)a2)
                    sub_1005CF9D8(a1);
                  else
                    sub_1005CFA04(a1);
                }
                return;
              }
              if (qword_10229FC80 != -1)
                dispatch_once(&qword_10229FC80, &stru_1021477D0);
              v31 = qword_10229FC88;
              if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_FAULT))
              {
                *(_DWORD *)buf = 67240450;
                *(_DWORD *)v65 = 0;
                *(_WORD *)&v65[4] = 2114;
                *(_QWORD *)&v65[6] = v10;
                _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_FAULT, "Unable to create plugin interface: kr:%{public}x service:%{public}@", buf, 0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_10229FC80 != -1)
                  dispatch_once(&qword_10229FC80, &stru_1021477D0);
                v56 = 67240450;
                *(_DWORD *)v57 = 0;
                *(_WORD *)&v57[4] = 2114;
                *(_QWORD *)&v57[6] = v10;
                LODWORD(byte15a) = 18;
                v39 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC88, 17, "Unable to create plugin interface: kr:%{public}x service:%{public}@", &v56, byte15a);
                sub_100512490("Generic", 1, 0, 0, "void CLSPU::openHidDriverInterface(BOOL)", "%s\n", v39);
                if (v39 != (char *)buf)
                  free(v39);
              }
              if (v53)
                (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v53 + 72))(v53, 0);
            }
            if (theInterface)
            {
              ((void (*)(IOCFPlugInInterface **))(*theInterface)->Release)(theInterface);
              IODestroyPlugInInterface(theInterface);
            }
            return;
          }
          v18 = v17;
          if (qword_10229FC80 != -1)
            dispatch_once(&qword_10229FC80, &stru_1021477D0);
          v19 = qword_10229FC88;
          if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 67240192;
            *(_DWORD *)v65 = v18;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "Unable to create plugin interface: 0x%{public}x", buf, 8u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FC80 != -1)
              dispatch_once(&qword_10229FC80, &stru_1021477D0);
            v56 = 67240192;
            *(_DWORD *)v57 = v18;
            LODWORD(byte15) = 8;
            v20 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC88, 17, "Unable to create plugin interface: 0x%{public}x", &v56, byte15);
LABEL_60:
            v22 = (uint8_t *)v20;
            sub_100512490("Generic", 1, 0, 0, "void CLSPU::openHidDriverInterface(BOOL)", "%s\n");
LABEL_61:
            if (v22 != buf)
              free(v22);
          }
        }
        else
        {
          if (qword_10229FC80 != -1)
            dispatch_once(&qword_10229FC80, &stru_1021477D0);
          v25 = qword_10229FC88;
          if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_FAULT, "Service doesn't exist", buf, 2u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FC80 != -1)
              dispatch_once(&qword_10229FC80, &stru_1021477D0);
            LOWORD(v56) = 0;
            v20 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC88, 17, "Service doesn't exist", &v56, 2);
            goto LABEL_60;
          }
        }
      }
      else
      {
        if (qword_10229FC80 != -1)
          dispatch_once(&qword_10229FC80, &stru_1021477D0);
        v24 = qword_10229FC88;
        if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "Can't get cma registry ID", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC80 != -1)
            dispatch_once(&qword_10229FC80, &stru_1021477D0);
          LOWORD(v56) = 0;
          v20 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC88, 17, "Can't get cma registry ID", &v56, 2);
          goto LABEL_60;
        }
      }
    }
    else
    {
      if (qword_10229FC80 != -1)
        dispatch_once(&qword_10229FC80, &stru_1021477D0);
      v23 = qword_10229FC88;
      if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_FAULT, "IOHIDServiceClientGetRegistryID query for cma service failed", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC80 != -1)
          dispatch_once(&qword_10229FC80, &stru_1021477D0);
        LOWORD(v56) = 0;
        v20 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC88, 17, "IOHIDServiceClientGetRegistryID query for cma service failed", &v56, 2);
        goto LABEL_60;
      }
    }
  }
  else
  {
    if (qword_10229FC80 != -1)
      dispatch_once(&qword_10229FC80, &stru_1021477D0);
    v21 = qword_10229FC88;
    if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "IoHidDevice is not ready", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC80 != -1)
        dispatch_once(&qword_10229FC80, &stru_1021477D0);
      LOWORD(v56) = 0;
      v22 = (uint8_t *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC88, 1, "IoHidDevice is not ready", &v56, 2);
      sub_100512490("Generic", 1, 0, 2, "void CLSPU::openHidDriverInterface(BOOL)", "%s\n");
      goto LABEL_61;
    }
  }
}

uint64_t sub_1005CE1B0(_QWORD *a1)
{
  uint64_t *v2;

  sub_100127B9C();
  sub_100127BDC();
  v2 = (uint64_t *)a1[241];
  sub_1011E407C(v2);
  sub_1011E4404(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 568))(a1);
}

void sub_1005CE1F4(_QWORD *a1, char a2)
{
  uint64_t v4;
  NSObject *v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  BOOL v12;
  BOOL v13;
  char v14;
  char v15;
  BOOL v16;
  int v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  char *v25;
  unsigned __int8 v26;
  char v27;
  char v28;
  BOOL v29;
  unsigned __int8 v30[3];
  unsigned __int8 v31[3];
  unsigned __int8 v32[3];
  __int16 v33;
  int v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  _DWORD v37[4];
  uint8_t buf[4];
  int v39;

  v4 = sub_100127B9C();
  sub_100081C10(v4, &v35);
  v34 = 1;
  sub_1001E4B84(v35, "OscarLogLevel", &v34);
  if (qword_10229FC80 != -1)
    dispatch_once(&qword_10229FC80, &stru_1021477D0);
  v5 = qword_10229FC88;
  if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v39 = (char)v34;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "spuLogLevel,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC80 != -1)
      dispatch_once(&qword_10229FC80, &stru_1021477D0);
    v37[0] = 67109120;
    v37[1] = (char)v34;
    v25 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC88, 0, "spuLogLevel,%d", v37);
    sub_100512490("Generic", 1, 0, 2, "void CLSPU::sendInitialConfig(BOOL)", "%s\n", v25);
    if (v25 != (char *)buf)
      free(v25);
  }
  v6 = (*(uint64_t (**)(_QWORD *))(*a1 + 192))(a1);
  v33 = 0;
  sub_1001E4874(v35, "OscarActivityForceCodeTransition", (BOOL *)&v33 + 1);
  sub_1001E4874(v35, "OscarStepCountingForceCodeTransition", (BOOL *)&v33);
  sub_100525CE4(v35, "UserConfig", (_WORD *)a1 + 172);
  buf[0] = 0;
  sub_1018BF25C(v32, "LogCompassCalibration", buf, 0);
  buf[0] = 0;
  sub_1018BF25C(v31, "LogCompass", buf, 0);
  *((_BYTE *)a1 + 12844) = (v31[1] | v32[1]) != 0;
  buf[0] = 0;
  sub_1018BF25C(v30, "IgnoreDynamicGyroBiasEstimator", buf, 0);
  v29 = sub_10011E0F0() ^ 1;
  sub_1001E4874(v35, "ConsumeBasebandSpeedInActivity", &v29);
  v37[0] = 1114636288;
  sub_1018C2254(buf, "ViewObstructedReplyIntervalSecs", v37, 0);
  v27 = a2;
  v28 = v6;
  LOBYTE(v37[0]) = 0;
  sub_1001E4874(v35, "EnableComputeWhileStatic", (BOOL *)v37);
  v7 = sub_101023910();
  v8 = HIBYTE(v33);
  v9 = v33;
  v10 = v34;
  v26 = v30[1];
  sub_100197040();
  v11 = sub_100762208();
  v12 = v29;
  sub_100197040();
  v13 = sub_100761B78();
  sub_100197040();
  v14 = sub_100761BF0();
  sub_100197040();
  v15 = sub_100761C4C();
  sub_100197040();
  v16 = sub_100761CC8();
  v17 = v39;
  v18 = v37[0];
  *((_BYTE *)a1 + 217) = 6;
  *((_BYTE *)a1 + 218) = v7;
  *((_BYTE *)a1 + 219) = v28;
  *((_BYTE *)a1 + 220) = v8;
  *((_BYTE *)a1 + 221) = v9;
  *(_DWORD *)((char *)a1 + 222) = 0;
  *((_BYTE *)a1 + 226) = 0;
  *((_BYTE *)a1 + 227) = v10;
  *(_QWORD *)((char *)a1 + 228) = 0;
  *(_QWORD *)((char *)a1 + 235) = 0;
  *((_BYTE *)a1 + 243) = v26;
  *((_BYTE *)a1 + 244) = v11;
  *(_QWORD *)((char *)a1 + 253) = 0;
  *(_QWORD *)((char *)a1 + 245) = 0;
  *((_BYTE *)a1 + 263) = v12;
  *((_WORD *)a1 + 132) = 0;
  *((_BYTE *)a1 + 266) = v13;
  *(_WORD *)((char *)a1 + 267) = 0;
  *((_BYTE *)a1 + 269) = v14;
  *((_BYTE *)a1 + 270) = 0;
  *((_BYTE *)a1 + 271) = v15;
  *((_BYTE *)a1 + 272) = v16;
  *((_BYTE *)a1 + 273) = 0;
  *(_DWORD *)((char *)a1 + 274) = v17;
  *(_DWORD *)((char *)a1 + 278) = 0;
  *((_BYTE *)a1 + 282) = v18;
  v19 = sub_1001B7910();
  v20 = sub_1001E4BF4();
  if ((v19 & 0x20000000) != 0)
    v21 = 34;
  else
    v21 = 32;
  if ((v19 & 0x20000008) != 0)
    v21 |= 0x40u;
  sub_101023960((uint64_t)a1, (float *)((v19 >> 9) & 8 | v19 & 0x10 | (v20 >> 2) & 4 | v21), v27);
  if ((v27 & 1) == 0)
  {
    sub_1005CE754(a1);
    (*(void (**)(_QWORD *, uint64_t))(*a1 + 552))(a1, 1);
    sub_1005CE7B8();
  }
  sub_1005CEAC8((uint64_t)a1);
  v22 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_1005CE6C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005CE714(uint64_t a1)
{
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

_QWORD *sub_1005CE754(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = result[73];
  if (v1)
  {
    v2 = result;
    objc_msgSend(*(id *)(v1 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v1 + 8), 1, 0);
    objc_msgSend(*(id *)(v2[73] + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v2[73] + 8), 2, 0);
    return objc_msgSend(*(id *)(v2[73] + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v2[73] + 8), 3, 0);
  }
  return result;
}

void sub_1005CE7B8()
{
  sub_10086686C();
}

void sub_1005CEAC8(uint64_t a1)
{
  uint64_t v2;
  float v3;
  float v4;
  id v5;
  id v6;
  double v7;
  NSObject *v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  CFAbsoluteTime Current;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  char *v43;
  NSObject *v44;
  NSObject *v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  char *v60;
  char *v61;
  double v62;
  double v63;
  double v64;
  _BYTE buf[32];
  __int16 v66;
  double v67;
  __int16 v68;
  int v69;
  __int16 v70;
  uint64_t v71;
  __int16 v72;
  double v73;
  CFAbsoluteTime v74;
  uint64_t v75;
  char v76;
  int v77;
  double v78;
  __int16 v79;
  double v80;
  __int16 v81;
  double v82;
  __int16 v83;
  double v84;
  __int16 v85;
  int v86;
  __int16 v87;
  uint64_t v88;
  __int16 v89;
  double v90;

  v64 = 0.0;
  v2 = sub_1001FD94C();
  if ((sub_100219F40(v2, (uint64_t)CFSTR("CompassCalibration"), (CFTypeRef *)&v64) & 1) != 0)
  {
    objc_msgSend(objc_msgSend(*(id *)&v64, "objectForKeyedSubscript:", CFSTR("Time")), "floatValue");
    v4 = v3;
    v5 = objc_msgSend(*(id *)&v64, "objectForKeyedSubscript:", CFSTR("Bias"));
    v6 = objc_msgSend(*(id *)&v64, "objectForKeyedSubscript:", CFSTR("Scale"));
    v7 = v4;
    if (*(_BYTE *)(a1 + 12844))
    {
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_102147810);
      v8 = qword_10229FD48;
      if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEFAULT))
      {
        objc_msgSend(objc_msgSend(v5, "objectAtIndexedSubscript:", 0), "floatValue");
        v10 = v9;
        objc_msgSend(objc_msgSend(v5, "objectAtIndexedSubscript:", 1), "floatValue");
        v12 = v11;
        objc_msgSend(objc_msgSend(v5, "objectAtIndexedSubscript:", 2), "floatValue");
        v14 = v13;
        objc_msgSend(objc_msgSend(v6, "objectAtIndexedSubscript:", 0), "floatValue");
        *(_DWORD *)buf = 134219520;
        *(double *)&buf[4] = v10;
        *(_WORD *)&buf[12] = 2048;
        *(double *)&buf[14] = v12;
        *(_WORD *)&buf[22] = 2048;
        *(double *)&buf[24] = v14;
        v66 = 2048;
        v67 = (float)(1.0 / v15);
        v68 = 1024;
        v69 = 4;
        v70 = 2048;
        v71 = 0x3FD1EB8520000000;
        v72 = 2048;
        v73 = v7;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[CompassCalibration] logging initial persisted calibration: bias.x,%.2f,.y,%.2f,.z,%.2f,radius,%.2f,level,%d,quality,%.2f,cftime,%.3f", buf, 0x44u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD40 != -1)
          dispatch_once(&qword_10229FD40, &stru_102147810);
        v52 = qword_10229FD48;
        objc_msgSend(objc_msgSend(v5, "objectAtIndexedSubscript:", 0), "floatValue");
        v54 = v53;
        objc_msgSend(objc_msgSend(v5, "objectAtIndexedSubscript:", 1), "floatValue");
        v56 = v55;
        objc_msgSend(objc_msgSend(v5, "objectAtIndexedSubscript:", 2), "floatValue");
        v58 = v57;
        objc_msgSend(objc_msgSend(v6, "objectAtIndexedSubscript:", 0), "floatValue");
        v77 = 134219520;
        v78 = v54;
        v79 = 2048;
        v80 = v56;
        v81 = 2048;
        v82 = v58;
        v83 = 2048;
        v84 = (float)(1.0 / v59);
        v85 = 1024;
        v86 = 4;
        v87 = 2048;
        v88 = 0x3FD1EB8520000000;
        v89 = 2048;
        v90 = v7;
        LODWORD(v62) = 68;
        v60 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v52, 0, "[CompassCalibration] logging initial persisted calibration: bias.x,%.2f,.y,%.2f,.z,%.2f,radius,%.2f,level,%d,quality,%.2f,cftime,%.3f", COERCE_DOUBLE(&v77), v62, v63, v64);
        sub_100512490("Generic", 1, 0, 2, "void CLSPU::retrieveCachedCompassCalibration()", "%s\n", v60);
        if (v60 != buf)
          free(v60);
      }
      sub_1015EB864(buf);
      sub_101604E98((uint64_t)buf);
      Current = CFAbsoluteTimeGetCurrent();
      v76 |= 1u;
      v74 = Current;
      v17 = v75;
      v18 = *(_QWORD *)(a1 + 352);
      *(_DWORD *)(v75 + 80) |= 1u;
      *(_QWORD *)(v17 + 8) = v18;
      v19 = v75;
      objc_msgSend(objc_msgSend(v5, "objectAtIndexedSubscript:", 0), "floatValue");
      *(_DWORD *)(v19 + 80) |= 2u;
      *(_DWORD *)(v19 + 16) = v20;
      v21 = v75;
      objc_msgSend(objc_msgSend(v5, "objectAtIndexedSubscript:", 1), "floatValue");
      *(_DWORD *)(v21 + 80) |= 4u;
      *(_DWORD *)(v21 + 20) = v22;
      v23 = v75;
      objc_msgSend(objc_msgSend(v5, "objectAtIndexedSubscript:", 2), "floatValue");
      *(_DWORD *)(v23 + 80) |= 8u;
      *(_DWORD *)(v23 + 24) = v24;
      v25 = v75;
      objc_msgSend(objc_msgSend(v6, "objectAtIndexedSubscript:", 0), "floatValue");
      *(_DWORD *)(v25 + 80) |= 0x2000u;
      *(_DWORD *)(v25 + 64) = v26;
      v27 = v75;
      objc_msgSend(objc_msgSend(v6, "objectAtIndexedSubscript:", 1), "floatValue");
      *(_DWORD *)(v27 + 80) |= 0x4000u;
      *(_DWORD *)(v27 + 68) = v28;
      v29 = v75;
      objc_msgSend(objc_msgSend(v6, "objectAtIndexedSubscript:", 2), "floatValue");
      *(_DWORD *)(v29 + 80) |= 0x8000u;
      *(_DWORD *)(v29 + 72) = v30;
      v31 = v75;
      *(_DWORD *)(v75 + 80) |= 0x1000u;
      *(_DWORD *)(v31 + 60) = 1049582633;
      v32 = v75;
      *(_DWORD *)(v75 + 80) |= 0x20u;
      *(_DWORD *)(v32 + 32) = 2139095039;
      v33 = v75;
      *(_DWORD *)(v75 + 80) |= 0x40u;
      *(_DWORD *)(v33 + 36) = 0;
      v34 = v75;
      *(_DWORD *)(v75 + 80) |= 0x80u;
      *(_DWORD *)(v34 + 40) = 0;
      v35 = v75;
      *(_DWORD *)(v75 + 80) |= 0x200u;
      *(_DWORD *)(v35 + 48) = 0;
      v36 = v75;
      *(_DWORD *)(v75 + 80) |= 0x400u;
      *(_DWORD *)(v36 + 52) = 0;
      v37 = v75;
      *(_DWORD *)(v75 + 80) |= 0x800u;
      *(_DWORD *)(v37 + 56) = 0;
      v38 = v75;
      *(_DWORD *)(v75 + 80) |= 0x10u;
      *(_DWORD *)(v38 + 28) = 4;
      v39 = v75;
      *(_DWORD *)(v75 + 80) |= 0x20000u;
      *(_BYTE *)(v39 + 77) = 0;
      v40 = v75;
      *(_DWORD *)(v75 + 80) |= 0x10000u;
      *(_BYTE *)(v40 + 76) = 1;
      v41 = v75;
      *(_DWORD *)(v75 + 80) |= 0x100u;
      *(_DWORD *)(v41 + 44) = 0;
      if (qword_1023118A8 != -1)
        dispatch_once(&qword_1023118A8, &stru_102147830);
      if (qword_1023118B0)
        sub_101888B64(qword_1023118B0, (uint64_t)buf);
      sub_1015EE304((PB::Base *)buf);
    }
    if (CFAbsoluteTimeGetCurrent() + -3600.0 <= v7)
    {
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_102147810);
      v45 = qword_10229FD48;
      if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        *(double *)&buf[4] = v64;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "[CompassCalibration] restoring calibration,%@", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD40 != -1)
          dispatch_once(&qword_10229FD40, &stru_102147810);
        v77 = 138412290;
        v78 = v64;
        LODWORD(v62) = 12;
        v61 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 0, "[CompassCalibration] restoring calibration,%@", &v77, *(_QWORD *)&v62);
        sub_100512490("Generic", 1, 0, 2, "void CLSPU::retrieveCachedCompassCalibration()", "%s\n", v61);
        if (v61 != buf)
          free(v61);
      }
      objc_msgSend(objc_msgSend(v5, "objectAtIndexedSubscript:", 0), "floatValue");
      *(_DWORD *)&buf[1] = v46;
      objc_msgSend(objc_msgSend(v5, "objectAtIndexedSubscript:", 1), "floatValue");
      *(_DWORD *)&buf[5] = v47;
      objc_msgSend(objc_msgSend(v5, "objectAtIndexedSubscript:", 2), "floatValue");
      *(_DWORD *)&buf[9] = v48;
      objc_msgSend(objc_msgSend(v6, "objectAtIndexedSubscript:", 0), "floatValue");
      *(_DWORD *)&buf[13] = v49;
      objc_msgSend(objc_msgSend(v6, "objectAtIndexedSubscript:", 1), "floatValue");
      *(_DWORD *)&buf[17] = v50;
      objc_msgSend(objc_msgSend(v6, "objectAtIndexedSubscript:", 2), "floatValue");
      *(_DWORD *)&buf[21] = v51;
      *(_DWORD *)&buf[25] = 1049582633;
      sub_1005D50EC(a1 + 192, buf, 0);
    }
    else
    {
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_102147810);
      v42 = qword_10229FD48;
      if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        *(double *)&buf[4] = v64;
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "[CompassCalibration] stale persistent calibration,%@", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD40 != -1)
          dispatch_once(&qword_10229FD40, &stru_102147810);
        v77 = 138412290;
        v78 = v64;
        LODWORD(v62) = 12;
        v43 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 0, "[CompassCalibration] stale persistent calibration,%@", &v77, *(_QWORD *)&v62);
        sub_100512490("Generic", 1, 0, 2, "void CLSPU::retrieveCachedCompassCalibration()", "%s\n", v43);
LABEL_30:
        if (v43 != buf)
          free(v43);
      }
    }
  }
  else
  {
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_102147810);
    v44 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "[CompassCalibration] no persistent calibration found", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_102147810);
      LOWORD(v77) = 0;
      v43 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 0, "[CompassCalibration] no persistent calibration found", &v77, 2);
      sub_100512490("Generic", 1, 0, 2, "void CLSPU::retrieveCachedCompassCalibration()", "%s\n", v43);
      goto LABEL_30;
    }
  }
}

void sub_1005CF50C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005CF52C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_102146CE8;
  *(_QWORD *)(a1 + 32) = off_1021471A8;
  *(_QWORD *)(a1 + 40) = off_1021471F0;
  *(_QWORD *)(a1 + 48) = off_102147228;
  *(_QWORD *)(a1 + 56) = off_102147250;
  *(_QWORD *)(a1 + 64) = off_1021472A0;
  *(_QWORD *)(a1 + 72) = off_1021472D8;
  *(_QWORD *)(a1 + 80) = off_102147318;
  *(_QWORD *)(a1 + 88) = off_102147350;
  *(_QWORD *)(a1 + 96) = off_102147380;
  *(_QWORD *)(a1 + 104) = off_1021473D0;
  *(_QWORD *)(a1 + 112) = off_1021473F8;
  *(_QWORD *)(a1 + 120) = off_102147460;
  *(_QWORD *)(a1 + 128) = off_102147488;
  *(_QWORD *)(a1 + 136) = off_1021474B0;
  v2 = a1 + 1936;
  *(_QWORD *)(a1 + 152) = off_1021474D8;
  sub_100346F9C((_QWORD *)(a1 + 1936));
  sub_100346F9C((_QWORD *)(a1 + 1952));
  sub_10051CFC0((uint64_t *)(a1 + 1928), 0);

  nullsub_34(a1 + 13608);
  sub_100CEC9FC(a1 + 13176);
  sub_100B57364(a1 + 13040);
  if (*(char *)(a1 + 12959) < 0)
    operator delete(*(void **)(a1 + 12936));
  if (*(char *)(a1 + 12887) < 0)
    operator delete(*(void **)(a1 + 12864));
  v3 = *(_QWORD *)(a1 + 1968);
  *(_QWORD *)(a1 + 1968) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_100261F44(a1 + 1952);
  sub_100261F44(v2);
  sub_10051CFC0((uint64_t *)(a1 + 1928), 0);
  return sub_1010281DC(a1);
}

uint64_t sub_1005CF68C(uint64_t a1)
{
  return sub_1005CF52C(a1 - 32);
}

uint64_t sub_1005CF694(uint64_t a1)
{
  return sub_1005CF52C(a1 - 40);
}

uint64_t sub_1005CF69C(uint64_t a1)
{
  return sub_1005CF52C(a1 - 48);
}

uint64_t sub_1005CF6A4(uint64_t a1)
{
  return sub_1005CF52C(a1 - 56);
}

uint64_t sub_1005CF6AC(uint64_t a1)
{
  return sub_1005CF52C(a1 - 64);
}

uint64_t sub_1005CF6B4(uint64_t a1)
{
  return sub_1005CF52C(a1 - 72);
}

uint64_t sub_1005CF6BC(uint64_t a1)
{
  return sub_1005CF52C(a1 - 80);
}

uint64_t sub_1005CF6C4(uint64_t a1)
{
  return sub_1005CF52C(a1 - 88);
}

uint64_t sub_1005CF6CC(uint64_t a1)
{
  return sub_1005CF52C(a1 - 96);
}

uint64_t sub_1005CF6D4(uint64_t a1)
{
  return sub_1005CF52C(a1 - 104);
}

uint64_t sub_1005CF6DC(uint64_t a1)
{
  return sub_1005CF52C(a1 - 112);
}

uint64_t sub_1005CF6E4(uint64_t a1)
{
  return sub_1005CF52C(a1 - 120);
}

uint64_t sub_1005CF6EC(uint64_t a1)
{
  return sub_1005CF52C(a1 - 128);
}

uint64_t sub_1005CF6F4(uint64_t a1)
{
  return sub_1005CF52C(a1 - 136);
}

uint64_t sub_1005CF6FC(uint64_t a1)
{
  return sub_1005CF52C(a1 - 152);
}

void sub_1005CF704(uint64_t a1)
{
  sub_1005CF52C(a1);
  operator delete();
}

void sub_1005CF728(uint64_t a1)
{
  sub_1005CF52C(a1 - 32);
  operator delete();
}

void sub_1005CF750(uint64_t a1)
{
  sub_1005CF52C(a1 - 40);
  operator delete();
}

void sub_1005CF778(uint64_t a1)
{
  sub_1005CF52C(a1 - 48);
  operator delete();
}

void sub_1005CF7A0(uint64_t a1)
{
  sub_1005CF52C(a1 - 56);
  operator delete();
}

void sub_1005CF7C8(uint64_t a1)
{
  sub_1005CF52C(a1 - 64);
  operator delete();
}

void sub_1005CF7F0(uint64_t a1)
{
  sub_1005CF52C(a1 - 72);
  operator delete();
}

void sub_1005CF818(uint64_t a1)
{
  sub_1005CF52C(a1 - 80);
  operator delete();
}

void sub_1005CF840(uint64_t a1)
{
  sub_1005CF52C(a1 - 88);
  operator delete();
}

void sub_1005CF868(uint64_t a1)
{
  sub_1005CF52C(a1 - 96);
  operator delete();
}

void sub_1005CF890(uint64_t a1)
{
  sub_1005CF52C(a1 - 104);
  operator delete();
}

void sub_1005CF8B8(uint64_t a1)
{
  sub_1005CF52C(a1 - 112);
  operator delete();
}

void sub_1005CF8E0(uint64_t a1)
{
  sub_1005CF52C(a1 - 120);
  operator delete();
}

void sub_1005CF908(uint64_t a1)
{
  sub_1005CF52C(a1 - 128);
  operator delete();
}

void sub_1005CF930(uint64_t a1)
{
  sub_1005CF52C(a1 - 136);
  operator delete();
}

void sub_1005CF958(uint64_t a1)
{
  sub_1005CF52C(a1 - 152);
  operator delete();
}

void sub_1005CF980(NSObject **a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD v3[6];

  v2 = *a1;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1005D4DB4;
  v3[3] = &unk_102143528;
  v3[4] = a1;
  v3[5] = a2;
  dispatch_async(v2, v3);
}

uint64_t sub_1005CF9D8(uint64_t a1)
{
  sub_100127B9C();
  sub_100127BDC();
  return sub_1005CFA48(a1, 1);
}

uint64_t sub_1005CFA04(uint64_t a1)
{
  sub_100127B9C();
  sub_100127BDC();
  return sub_1005CFA48(a1, 0);
}

uint64_t sub_1005CFA30(uint64_t a1)
{
  return sub_1005CD378(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t sub_1005CFA40(uint64_t a1)
{
  return sub_1005CCF94(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1005CFA48(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  int v7;
  int v8;
  NSObject *v9;
  NSObject *v10;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void *__p[2];
  char v18;
  _BYTE v19[48];
  _DWORD v20[4];
  uint8_t buf[4];
  int v22;

  sub_10023CFD8((uint64_t)v19, (uint64_t)"ApplyToHistorical", a1, 300.0);
  sub_1015A2E04(__p, "none");
  sub_10002B684((uint64_t)v19, (uint64_t *)__p);
  if (v18 < 0)
    operator delete(__p[0]);
  if (*(_QWORD *)(a1 + 1920))
  {
    if (qword_10229FC80 != -1)
      dispatch_once(&qword_10229FC80, &stru_1021477D0);
    v4 = qword_10229FC88;
    if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Begin processing historical events.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC80 != -1)
        dispatch_once(&qword_10229FC80, &stru_1021477D0);
      LOWORD(v20[0]) = 0;
      v12 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC88, 1, "Begin processing historical events.", v20, 2);
      sub_100512490("Generic", 1, 0, 2, "void CLSPU::fetchHistoricalEvents(BOOL)", "%s\n", v12);
      if (v12 != (char *)buf)
        free(v12);
    }
    sub_1010326B0(a1, 1);
    v5 = *(_QWORD *)(a1 + 1920);
    if (a2)
    {
      if (qword_10229FC80 != -1)
        dispatch_once(&qword_10229FC80, &stru_1021477D0);
      v6 = qword_10229FC88;
      if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Clearing historical event buffer", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC80 != -1)
          dispatch_once(&qword_10229FC80, &stru_1021477D0);
        LOWORD(v20[0]) = 0;
        LODWORD(v16) = 2;
        v15 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC88, 0, "Clearing historical event buffer", v20, v16);
        sub_100512490("Generic", 1, 0, 2, "void CLSPU::fetchHistoricalEvents(BOOL)", "%s\n", v15);
        if (v15 != (char *)buf)
          free(v15);
      }
      v7 = (*(uint64_t (**)(uint64_t, uint64_t (*)(), uint64_t))(*(_QWORD *)v5 + 96))(v5, nullsub_216, a1);
    }
    else
    {
      v7 = (*(uint64_t (**)(_QWORD, uint64_t (*)(), uint64_t))(*(_QWORD *)v5 + 96))(*(_QWORD *)(a1 + 1920), sub_1005D0084, a1);
    }
    v8 = v7;
    if (v7)
    {
      if (qword_10229FC80 != -1)
        dispatch_once(&qword_10229FC80, &stru_1021477D0);
      v9 = qword_10229FC88;
      if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 67109120;
        v22 = v8;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "ApplyToHistorical did not complete successfully.  Status: 0x%x", buf, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC80 != -1)
          dispatch_once(&qword_10229FC80, &stru_1021477D0);
        v20[0] = 67109120;
        v20[1] = v8;
        v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC88, 17, "ApplyToHistorical did not complete successfully.  Status: 0x%x", v20);
        sub_100512490("Generic", 1, 0, 0, "void CLSPU::fetchHistoricalEvents(BOOL)", "%s\n", v14);
        if (v14 != (char *)buf)
          free(v14);
      }
    }
    if (qword_10229FC80 != -1)
      dispatch_once(&qword_10229FC80, &stru_1021477D0);
    v10 = qword_10229FC88;
    if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Finish processing historical events.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC80 != -1)
        dispatch_once(&qword_10229FC80, &stru_1021477D0);
      LOWORD(v20[0]) = 0;
      LODWORD(v16) = 2;
      v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC88, 1, "Finish processing historical events.", v20, v16);
      sub_100512490("Generic", 1, 0, 2, "void CLSPU::fetchHistoricalEvents(BOOL)", "%s\n", v13);
      if (v13 != (char *)buf)
        free(v13);
    }
    sub_1010326B0(a1, 0);
  }
  sub_100E3E6F0((uint64_t)v19);
  return sub_100E3E6C8(v19);
}

void sub_1005D0038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  sub_100E3E6C8(&a18);
  _Unwind_Resume(a1);
}

void sub_1005D0088(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  const char *v10;
  uint8_t *v11;
  _WORD v12[8];
  uint8_t buf[1640];

  if (sub_100A0A3A0(*(_QWORD *)(a1 + 1936)))
  {
    if (qword_10229FC80 != -1)
      dispatch_once(&qword_10229FC80, &stru_1021477D0);
    v4 = qword_10229FC88;
    if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Processing historical event", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC80 != -1)
        dispatch_once(&qword_10229FC80, &stru_1021477D0);
      v12[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC88, 2, "Processing historical event", v12, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLSPU::historicalEventApplier(IOHIDEventRef)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    sub_100A0A3A0(*(_QWORD *)(a1 + 1936));
    sub_10012764C(a1, v5, v6, a2);
  }
  else
  {
    if (qword_10229FC80 != -1)
      dispatch_once(&qword_10229FC80, &stru_1021477D0);
    v7 = qword_10229FC88;
    if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "No service ref, did not process historical event", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC80 != -1)
        dispatch_once(&qword_10229FC80, &stru_1021477D0);
      v12[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC88, 2, "No service ref, did not process historical event", v12, 2);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CLSPU::historicalEventApplier(IOHIDEventRef)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
}

void sub_1005D0364(uint64_t a1, void *aBlock)
{
  void *v3;
  uint64_t v4;
  _QWORD v5[6];

  v3 = _Block_copy(aBlock);
  v4 = sub_100127B9C();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1005D03D0;
  v5[3] = &unk_102131360;
  v5[4] = v3;
  v5[5] = a1;
  sub_1000A57FC(v4, (uint64_t)v5);
}

void sub_1005D03D0(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);

  *(_QWORD *)(v2 + 1976) = objc_msgSend(*(id *)(a1 + 32), "copy");
  _Block_release(*(const void **)(a1 + 32));
}

void sub_1005D0408(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  char v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint8_t buf[4];
  uint64_t v13;

  v7 = 18;
  v8 = a2;
  v9 = -1;
  if (qword_10229FC80 != -1)
    dispatch_once(&qword_10229FC80, &stru_1021477D0);
  v4 = qword_10229FC88;
  if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134217984;
    v13 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[CLSPU] Setting BufferedAccelSampleRate,%lu", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC80 != -1)
      dispatch_once(&qword_10229FC80, &stru_1021477D0);
    v10 = 134217984;
    v11 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC88, 1, "[CLSPU] Setting BufferedAccelSampleRate,%lu", &v10);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLSPU::setAccelBufferSampling(int)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  sub_1005D4F54(a1 + 192, (uint64_t *)&v7, 0);
}

void sub_1005D05E4(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  char v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint8_t buf[4];
  uint64_t v14;

  v7 = 18;
  v8 = -1;
  v9 = a2;
  v10 = -1;
  if (qword_10229FC80 != -1)
    dispatch_once(&qword_10229FC80, &stru_1021477D0);
  v4 = qword_10229FC88;
  if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134217984;
    v14 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[CLSPU] Setting BufferedGyroSampleRate,%lu", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC80 != -1)
      dispatch_once(&qword_10229FC80, &stru_1021477D0);
    v11 = 134217984;
    v12 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC88, 1, "[CLSPU] Setting BufferedGyroSampleRate,%lu", &v11);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLSPU::setGyroBufferSampling(int)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  sub_1005D4F54(a1 + 192, (uint64_t *)&v7, 0);
}

void sub_1005D07C0(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  char v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint8_t buf[4];
  uint64_t v13;

  v7 = 18;
  v8 = -1;
  v9 = a2;
  if (qword_10229FC80 != -1)
    dispatch_once(&qword_10229FC80, &stru_1021477D0);
  v4 = qword_10229FC88;
  if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134217984;
    v13 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[CLSPU] Setting BufferedPressureSampleRate,%lu", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC80 != -1)
      dispatch_once(&qword_10229FC80, &stru_1021477D0);
    v10 = 134217984;
    v11 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC88, 1, "[CLSPU] Setting BufferedPressureSampleRate,%lu", &v10);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLSPU::setPressureBufferSampling(int)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  sub_1005D4F54(a1 + 192, (uint64_t *)&v7, 0);
}

void sub_1005D099C(uint64_t a1, void *aBlock)
{
  void *v3;
  uint64_t v4;
  _QWORD v5[6];

  v3 = _Block_copy(aBlock);
  v4 = sub_100127B9C();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1005D0A08;
  v5[3] = &unk_102131360;
  v5[4] = v3;
  v5[5] = a1;
  sub_1000A57FC(v4, (uint64_t)v5);
}

void sub_1005D0A08(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);

  *(_QWORD *)(v2 + 1984) = objc_msgSend(*(id *)(a1 + 32), "copy");
  _Block_release(*(const void **)(a1 + 32));
}

void sub_1005D0A40(uint64_t a1, void *aBlock)
{
  void *v3;
  uint64_t v4;
  _QWORD v5[6];

  v3 = _Block_copy(aBlock);
  v4 = sub_100127B9C();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1005D0AAC;
  v5[3] = &unk_102131360;
  v5[4] = v3;
  v5[5] = a1;
  sub_1000A57FC(v4, (uint64_t)v5);
}

void sub_1005D0AAC(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);

  *(_QWORD *)(v2 + 12832) = objc_msgSend(*(id *)(a1 + 32), "copy");
  _Block_release(*(const void **)(a1 + 32));
}

BOOL sub_1005D0AE4(uint64_t a1)
{
  uint64_t v1;
  CFRunLoopRef Current;
  uint64_t v4;
  double v5;
  int v6;
  NSObject *v7;
  mach_error_t v8;
  mach_error_t v9;
  NSObject *v10;
  char *v11;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  char *v16;
  const char *v17;
  uint8_t *v18;
  _QWORD v19[5];
  uint64_t v20;
  int v21;
  __int16 v22;
  int v23;
  char *v24;
  uint8_t buf[4];
  char *v26;

  v1 = *(_QWORD *)(a1 + 1928);
  if (v1)
  {
    Current = CFRunLoopGetCurrent();
    sub_100127B9C();
    if (Current == (CFRunLoopRef)sub_1001AD8D0())
    {
      v5 = 0.005;
      if (!*(_BYTE *)(a1 + 225))
        v5 = 0.0;
      sub_10006B4E0(*(_QWORD *)(a1 + 1952), v5);
      v22 = 3;
      v6 = *(unsigned __int8 *)(a1 + 226);
      HIBYTE(v22) = *(_BYTE *)(a1 + 226);
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_1021477F0);
      v7 = qword_10229FD28;
      if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v26) = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "[CLSPU] Sending CameraDebug command %hhu", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD20 != -1)
          dispatch_once(&qword_10229FD20, &stru_1021477F0);
        v23 = 67109120;
        LODWORD(v24) = v6;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 1, "[CLSPU] Sending CameraDebug command %hhu", &v23);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLSPU::configureDevMotion3()", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
      v21 = 0;
      v20 = 4;
      v8 = sub_1011E4FF0(*(_QWORD *)(a1 + 1928), (uint64_t)&v22, (char *)2, (uint64_t)&v21, (uint64_t)&v20);
      if (v8)
      {
        v9 = v8;
        if (qword_10229FD20 != -1)
          dispatch_once(&qword_10229FD20, &stru_1021477F0);
        v10 = qword_10229FD28;
        if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_ERROR))
        {
          v11 = mach_error_string(v9);
          *(_DWORD *)buf = 136315138;
          v26 = v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "[CLSPU] Send command failed %s", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD20 != -1)
            dispatch_once(&qword_10229FD20, &stru_1021477F0);
          v15 = qword_10229FD28;
          v16 = mach_error_string(v9);
          v23 = 136315138;
          v24 = v16;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v15, 16, "[CLSPU] Send command failed %s", (const char *)&v23);
          v18 = (uint8_t *)v17;
          sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLSPU::configureDevMotion3()", "%s\n", v17);
          if (v18 != buf)
            free(v18);
        }
      }
    }
    else
    {
      v4 = sub_100127B9C();
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472;
      v19[2] = sub_1005D0EAC;
      v19[3] = &unk_10212ECA0;
      v19[4] = a1;
      sub_1000A50A8(v4, (uint64_t)v19);
    }
  }
  return v1 != 0;
}

uint64_t sub_1005D0EAC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 568))(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1005D0EBC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 552))(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void sub_1005D0ED4(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

uint64_t sub_1005D0F04(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FC80 != -1)
    dispatch_once(&qword_10229FC80, &stru_1021477D0);
  v2 = qword_10229FC88;
  if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "SPU rejected configuration. resending.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC80 != -1)
      dispatch_once(&qword_10229FC80, &stru_1021477D0);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC88, 17, "SPU rejected configuration. resending.", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 0, "virtual void CLSPU::visitHello(const CMMotionCoprocessorReply::Hello *)", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 552))(a1, 0);
}

uint64_t sub_1005D10A8(uint64_t a1)
{
  return sub_1005D0F04(a1 - 152);
}

uint64_t sub_1005D10B0(uint64_t a1, uint64_t a2)
{
  double Current;
  NSObject *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  int v21;
  int v22;
  int v23;
  int v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  NSDictionary *v36;
  NSObject *v37;
  uint64_t v38;
  NSObject *v39;
  uint64_t v40;
  double v41;
  __int128 v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  int v83;
  int v84;
  int v85;
  int v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  const char *v92;
  uint8_t *v93;
  const char *v94;
  uint8_t *v95;
  const char *v96;
  uint8_t *v97;
  uint64_t v98;
  _OWORD v99[4];
  _OWORD v100[2];
  uint8_t buf[4];
  double v102;
  __int16 v103;
  double v104;
  __int16 v105;
  double v106;
  __int16 v107;
  double v108;
  __int16 v109;
  double v110;
  __int16 v111;
  double v112;
  __int16 v113;
  double v114;
  __int16 v115;
  double v116;
  __int16 v117;
  double v118;
  __int16 v119;
  double v120;
  __int16 v121;
  double v122;
  __int16 v123;
  double v124;
  __int16 v125;
  double v126;
  __int16 v127;
  double v128;
  __int16 v129;
  double v130;
  __int16 v131;
  double v132;
  __int16 v133;
  int v134;
  __int16 v135;
  int v136;
  __int16 v137;
  int v138;
  __int16 v139;
  int v140;
  __int16 v141;
  double v142;
  __int16 v143;
  double v144;
  __int16 v145;
  double v146;
  __int16 v147;
  double v148;
  __int16 v149;
  double v150;
  double v151;
  uint64_t v152;
  char v153;
  _QWORD v154[3];
  _QWORD v155[3];
  _QWORD v156[3];
  _QWORD v157[3];
  _BYTE v158[22];
  __int16 v159;
  double v160;
  _BYTE v161[20];
  _BYTE v162[20];
  _BYTE v163[12];
  double v164;
  __int16 v165;
  double v166;
  __int16 v167;
  double v168;
  __int16 v169;
  double v170;
  __int16 v171;
  double v172;
  __int16 v173;
  double v174;
  __int16 v175;
  double v176;
  __int16 v177;
  double v178;
  __int16 v179;
  int v180;
  __int16 v181;
  int v182;
  __int16 v183;
  int v184;
  __int16 v185;
  int v186;
  __int16 v187;
  double v188;
  __int16 v189;
  double v190;
  __int16 v191;
  double v192;
  __int16 v193;
  double v194;
  __int16 v195;
  double v196;

  Current = CFAbsoluteTimeGetCurrent();
  if (qword_10229FD40 != -1)
    dispatch_once(&qword_10229FD40, &stru_102147810);
  v5 = qword_10229FD48;
  if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(float *)(a2 + 5);
    v7 = *(float *)(a2 + 9);
    v8 = *(float *)(a2 + 13);
    v9 = *(float *)(a2 + 17);
    v10 = *(float *)(a2 + 21);
    v11 = *(float *)(a2 + 25);
    v12 = *(float *)(a2 + 29);
    v13 = *(float *)(a2 + 33);
    v14 = *(float *)(a2 + 37);
    v15 = *(float *)(a2 + 53);
    v16 = *(float *)(a2 + 57);
    v17 = *(float *)(a2 + 61);
    v18 = *(float *)(a2 + 65);
    v19 = *(float *)(a2 + 41);
    v20 = *(float *)(a2 + 49);
    v21 = *(char *)(a2 + 1);
    v22 = *(unsigned __int8 *)(a2 + 2);
    v23 = *(unsigned __int8 *)(a2 + 3);
    v24 = *(unsigned __int8 *)(a2 + 4);
    v25 = *(float *)(a2 + 69);
    v26 = *(float *)(a2 + 73);
    v27 = *(float *)(a2 + 77);
    v28 = *(float *)(a2 + 81);
    v29 = *(float *)(a2 + 85);
    *(_DWORD *)buf = 134224128;
    v102 = v6;
    v103 = 2048;
    v104 = v7;
    v105 = 2048;
    v106 = v8;
    v107 = 2048;
    v108 = v9;
    v109 = 2048;
    v110 = v10;
    v111 = 2048;
    v112 = v11;
    v113 = 2048;
    v114 = v12;
    v115 = 2048;
    v116 = v13;
    v117 = 2048;
    v118 = v14;
    v119 = 2050;
    v120 = v15;
    v121 = 2050;
    v122 = v16;
    v123 = 2050;
    v124 = v17;
    v125 = 2050;
    v126 = v18;
    v127 = 2048;
    v128 = v19;
    v129 = 2048;
    v130 = v20;
    v131 = 2048;
    v132 = v20;
    v133 = 1026;
    v134 = v21;
    v135 = 1026;
    v136 = v22;
    v137 = 1026;
    v138 = v23;
    v139 = 1026;
    v140 = v24;
    v141 = 2050;
    v142 = v25;
    v143 = 2050;
    v144 = v26;
    v145 = 2050;
    v146 = v27;
    v147 = 2050;
    v148 = v28;
    v149 = 2050;
    v150 = v29;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[CompassCalibration] bias.x,%f,.y,%f,.z,%f,biasEstVar.x,%f,.y,%f,.z,%f,scale.x,%f,.y,%f,.z,%f,quality,%{public}f,cost,%{public}f,coverage,%{public}f,earthDiffRatio,%{public}f,pose.x,%f,.y,%f,.z,%f,level,%{public}d,saturations,%{public}d,hasConsistency,%{public}d,apAwake,%{public}d,planarity,%{public}f,temperature,%{public}f,minTemperatureSinceLastCal,%{public}f,maxTemperatureSinceLastCal,%{public}f,avgTemperatureSinceLastCal,%{public}f", buf, 0xECu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_102147810);
    v68 = *(float *)(a2 + 5);
    v69 = *(float *)(a2 + 9);
    v70 = *(float *)(a2 + 13);
    v71 = *(float *)(a2 + 17);
    v72 = *(float *)(a2 + 21);
    v73 = *(float *)(a2 + 25);
    v74 = *(float *)(a2 + 29);
    v75 = *(float *)(a2 + 33);
    v76 = *(float *)(a2 + 37);
    v77 = *(float *)(a2 + 53);
    v78 = *(float *)(a2 + 57);
    v79 = *(float *)(a2 + 61);
    v80 = *(float *)(a2 + 65);
    v81 = *(float *)(a2 + 41);
    v82 = *(float *)(a2 + 49);
    v83 = *(char *)(a2 + 1);
    v84 = *(unsigned __int8 *)(a2 + 2);
    v85 = *(unsigned __int8 *)(a2 + 3);
    v86 = *(unsigned __int8 *)(a2 + 4);
    v87 = *(float *)(a2 + 69);
    v88 = *(float *)(a2 + 73);
    v89 = *(float *)(a2 + 77);
    v90 = *(float *)(a2 + 81);
    v91 = *(float *)(a2 + 85);
    *(_DWORD *)v158 = 134224128;
    *(double *)&v158[4] = v68;
    *(_WORD *)&v158[12] = 2048;
    *(double *)&v158[14] = v69;
    v159 = 2048;
    v160 = v70;
    *(_WORD *)v161 = 2048;
    *(double *)&v161[2] = v71;
    *(_WORD *)&v161[10] = 2048;
    *(double *)&v161[12] = v72;
    *(_WORD *)v162 = 2048;
    *(double *)&v162[2] = v73;
    *(_WORD *)&v162[10] = 2048;
    *(double *)&v162[12] = v74;
    *(_WORD *)v163 = 2048;
    *(double *)&v163[2] = v75;
    *(_WORD *)&v163[10] = 2048;
    v164 = v76;
    v165 = 2050;
    v166 = v77;
    v167 = 2050;
    v168 = v78;
    v169 = 2050;
    v170 = v79;
    v171 = 2050;
    v172 = v80;
    v173 = 2048;
    v174 = v81;
    v175 = 2048;
    v176 = v82;
    v177 = 2048;
    v178 = v82;
    v179 = 1026;
    v180 = v83;
    v181 = 1026;
    v182 = v84;
    v183 = 1026;
    v184 = v85;
    v185 = 1026;
    v186 = v86;
    v187 = 2050;
    v188 = v87;
    v189 = 2050;
    v190 = v88;
    v191 = 2050;
    v192 = v89;
    v193 = 2050;
    v194 = v90;
    v195 = 2050;
    v196 = v91;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 0, "[CompassCalibration] bias.x,%f,.y,%f,.z,%f,biasEstVar.x,%f,.y,%f,.z,%f,scale.x,%f,.y,%f,.z,%f,quality,%{public}f,cost,%{public}f,coverage,%{public}f,earthDiffRatio,%{public}f,pose.x,%f,.y,%f,.z,%f,level,%{public}d,saturations,%{public}d,hasConsistency,%{public}d,apAwake,%{public}d,planarity,%{public}f,temperature,%{public}f,minTemperatureSinceLastCal,%{public}f,maxTemperatureSinceLastCal,%{public}f,avgTemperatureSinceLastCal,%{public}f", v158, 236);
    v93 = (uint8_t *)v92;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLSPU::visitCompassCalibration(const CMMotionCoprocessorReply::CompassCalibration *)", "%s\n", v92);
    if (v93 != buf)
      free(v93);
  }
  if (*(char *)(a2 + 1) < 4)
  {
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_102147810);
    v39 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "[CompassCalibration] clearing persistent calibration", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_102147810);
      *(_WORD *)v158 = 0;
      LODWORD(v98) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 1, "[CompassCalibration] clearing persistent calibration", v158, v98);
      v95 = (uint8_t *)v94;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLSPU::visitCompassCalibration(const CMMotionCoprocessorReply::CompassCalibration *)", "%s\n", v94);
      if (v95 != buf)
        free(v95);
    }
    v40 = sub_1001FD94C();
    sub_1005254E4(v40);
  }
  else if (*(float *)(a2 + 53) > 0.28)
  {
    v156[0] = CFSTR("Bias");
    LODWORD(v30) = *(_DWORD *)(a2 + 5);
    v155[0] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v30);
    LODWORD(v31) = *(_DWORD *)(a2 + 9);
    v155[1] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v31);
    LODWORD(v32) = *(_DWORD *)(a2 + 13);
    v155[2] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v32);
    v157[0] = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v155, 3);
    v156[1] = CFSTR("Scale");
    LODWORD(v33) = *(_DWORD *)(a2 + 29);
    v154[0] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v33);
    LODWORD(v34) = *(_DWORD *)(a2 + 33);
    v154[1] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v34);
    LODWORD(v35) = *(_DWORD *)(a2 + 37);
    v154[2] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v35);
    v157[1] = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v154, 3);
    v156[2] = CFSTR("Time");
    v157[2] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", Current);
    *(double *)&v36 = COERCE_DOUBLE(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v157, v156, 3));
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_102147810);
    v37 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v102 = *(double *)&v36;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "[CompassCalibration] persisting calibration,%@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_102147810);
      *(_DWORD *)v158 = 138412290;
      *(_QWORD *)&v158[4] = v36;
      LODWORD(v98) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 1, "[CompassCalibration] persisting calibration,%@", v158, v98);
      v97 = (uint8_t *)v96;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLSPU::visitCompassCalibration(const CMMotionCoprocessorReply::CompassCalibration *)", "%s\n", v96);
      if (v97 != buf)
        free(v97);
    }
    v38 = sub_1001FD94C();
    sub_10023EC14(v38);
  }
  if (*(_BYTE *)(a1 + 12844))
  {
    *(_QWORD *)v158 = off_102171678;
    v41 = *(double *)(a1 + 352);
    *(double *)&v158[8] = Current;
    v160 = v41;
    *(_QWORD *)&v42 = *(_QWORD *)(a2 + 9);
    *((_QWORD *)&v42 + 1) = *(_QWORD *)(a2 + 29);
    v43 = *(_DWORD *)(a2 + 5);
    *(_OWORD *)&v161[4] = v42;
    LODWORD(v42) = *(_DWORD *)(a2 + 37);
    *(_DWORD *)v161 = v43;
    *(_DWORD *)v162 = v42;
    *(_OWORD *)&v162[4] = *(_OWORD *)(a2 + 53);
    *(_QWORD *)v163 = *(_QWORD *)(a2 + 41);
    *(_DWORD *)&v163[8] = *(_DWORD *)(a2 + 49);
    LOBYTE(v164) = *(_BYTE *)(a2 + 1);
    v44 = sub_1011B78D4();
    sub_1011B8DB0(v44, (uint64_t)v158);
    sub_1015EB864(buf);
    sub_101604E98((uint64_t)buf);
    v153 |= 1u;
    v151 = Current;
    v45 = v152;
    v46 = *(_QWORD *)(a1 + 352);
    *(_DWORD *)(v152 + 80) |= 1u;
    *(_QWORD *)(v45 + 8) = v46;
    v47 = v152;
    LODWORD(v46) = *(_DWORD *)(a2 + 5);
    *(_DWORD *)(v152 + 80) |= 2u;
    *(_DWORD *)(v47 + 16) = v46;
    v48 = v152;
    LODWORD(v46) = *(_DWORD *)(a2 + 9);
    *(_DWORD *)(v152 + 80) |= 4u;
    *(_DWORD *)(v48 + 20) = v46;
    v49 = v152;
    LODWORD(v46) = *(_DWORD *)(a2 + 13);
    *(_DWORD *)(v152 + 80) |= 8u;
    *(_DWORD *)(v49 + 24) = v46;
    v50 = v152;
    LODWORD(v46) = *(_DWORD *)(a2 + 29);
    *(_DWORD *)(v152 + 80) |= 0x2000u;
    *(_DWORD *)(v50 + 64) = v46;
    v51 = v152;
    LODWORD(v46) = *(_DWORD *)(a2 + 33);
    *(_DWORD *)(v152 + 80) |= 0x4000u;
    *(_DWORD *)(v51 + 68) = v46;
    v52 = v152;
    LODWORD(v46) = *(_DWORD *)(a2 + 37);
    *(_DWORD *)(v152 + 80) |= 0x8000u;
    *(_DWORD *)(v52 + 72) = v46;
    v53 = v152;
    LODWORD(v46) = *(_DWORD *)(a2 + 53);
    *(_DWORD *)(v152 + 80) |= 0x1000u;
    *(_DWORD *)(v53 + 60) = v46;
    v54 = v152;
    LODWORD(v46) = *(_DWORD *)(a2 + 57);
    *(_DWORD *)(v152 + 80) |= 0x20u;
    *(_DWORD *)(v54 + 32) = v46;
    v55 = v152;
    LODWORD(v46) = *(_DWORD *)(a2 + 61);
    *(_DWORD *)(v152 + 80) |= 0x40u;
    *(_DWORD *)(v55 + 36) = v46;
    v56 = v152;
    LODWORD(v46) = *(_DWORD *)(a2 + 65);
    *(_DWORD *)(v152 + 80) |= 0x80u;
    *(_DWORD *)(v56 + 40) = v46;
    v57 = v152;
    LODWORD(v46) = *(_DWORD *)(a2 + 41);
    *(_DWORD *)(v152 + 80) |= 0x200u;
    *(_DWORD *)(v57 + 48) = v46;
    v58 = v152;
    LODWORD(v46) = *(_DWORD *)(a2 + 45);
    *(_DWORD *)(v152 + 80) |= 0x400u;
    *(_DWORD *)(v58 + 52) = v46;
    v59 = v152;
    LODWORD(v46) = *(_DWORD *)(a2 + 49);
    *(_DWORD *)(v152 + 80) |= 0x800u;
    *(_DWORD *)(v59 + 56) = v46;
    v60 = v152;
    v61 = *(char *)(a2 + 1);
    *(_DWORD *)(v152 + 80) |= 0x10u;
    *(_DWORD *)(v60 + 28) = v61;
    v62 = v152;
    LOBYTE(v61) = *(_BYTE *)(a2 + 3) != 0;
    *(_DWORD *)(v152 + 80) |= 0x20000u;
    *(_BYTE *)(v62 + 77) = v61;
    v63 = v152;
    LOBYTE(v61) = *(_BYTE *)(a2 + 4);
    *(_DWORD *)(v152 + 80) |= 0x10000u;
    *(_BYTE *)(v63 + 76) = v61;
    v64 = v152;
    LODWORD(v46) = *(_DWORD *)(a2 + 69);
    *(_DWORD *)(v152 + 80) |= 0x100u;
    *(_DWORD *)(v64 + 44) = v46;
    if (qword_1023118A8 != -1)
      dispatch_once(&qword_1023118A8, &stru_102147830);
    if (qword_1023118B0)
      sub_101888B64(qword_1023118B0, (uint64_t)buf);
    sub_1015EE304((PB::Base *)buf);
  }
  sub_100B57398(a1 + 13040, a2);
  v65 = *(_OWORD *)(a2 + 48);
  v99[2] = *(_OWORD *)(a2 + 32);
  v99[3] = v65;
  v100[0] = *(_OWORD *)(a2 + 64);
  *(_OWORD *)((char *)v100 + 9) = *(_OWORD *)(a2 + 73);
  v66 = *(_OWORD *)(a2 + 16);
  v99[0] = *(_OWORD *)a2;
  v99[1] = v66;
  sub_100B28FBC(a1 + 12848, (uint64_t)v99);
  return sub_10014C2F4(a1, 6, a2, 89);
}

void sub_1005D1C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005D1C4C(uint64_t a1, uint64_t a2)
{
  return sub_1005D10B0(a1 - 152, a2);
}

void sub_1005D1C54(uint64_t a1, uint64_t a2)
{
  sub_100B29270((unsigned int *)(a1 + 12848), *(_QWORD *)a2, *(_DWORD *)(a2 + 8));
}

void sub_1005D1C6C(uint64_t a1, uint64_t a2)
{
  sub_100B29270((unsigned int *)(a1 + 12696), *(_QWORD *)a2, *(_DWORD *)(a2 + 8));
}

void sub_1005D1C84(uint64_t a1, uint64_t *a2)
{
  sub_100227C48(a1 + 12848, *a2, a2[1]);
}

void sub_1005D1C98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  NSObject *v10;
  int v11;
  int v12;
  NSObject *v13;
  int v14;
  int v15;
  double v16;
  uint8_t *v17;
  uint8_t *v18;
  NSObject *v19;
  double v20;
  const char *v21;
  uint8_t *v22;
  double v23;
  uint8_t *v24;
  int v25;
  int v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  int v30;
  __int16 v31;
  int v32;

  v4 = *(unsigned __int8 *)(a2 + 16);
  switch(*(_BYTE *)(a2 + 16))
  {
    case 1:
      v5 = a1 + 1992;
      goto LABEL_10;
    case 2:
      v7 = 4160;
      goto LABEL_9;
    case 3:
      v8 = 6328;
      goto LABEL_7;
    case 4:
      v8 = 8496;
LABEL_7:
      v5 = a1 + v8;
      v9 = (uint64_t *)(a1 + 1984);
      goto LABEL_11;
    case 5:
      v7 = 10664;
LABEL_9:
      v5 = a1 + v7;
LABEL_10:
      v9 = (uint64_t *)(a1 + 1976);
LABEL_11:
      v6 = *v9;
      break;
    default:
      v6 = 0;
      v5 = 0;
      break;
  }
  if (sub_1005D21D0(v5, a2))
  {
    if (qword_10229FDB0 != -1)
      dispatch_once(&qword_10229FDB0, &stru_102147850);
    v10 = qword_10229FDB8;
    if (os_log_type_enabled((os_log_t)qword_10229FDB8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      v30 = v4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "data type %u,received and reconstructed", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDB0 != -1)
        dispatch_once(&qword_10229FDB0, &stru_102147850);
      v25 = 67109120;
      v26 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDB8, 2, "data type %u,received and reconstructed", &v25);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLSPU::visitSensorBuffer(const CMMotionCoprocessorReply::SensorBuffer *)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    v11 = *(_DWORD *)(a2 + 2);
    v12 = *(_DWORD *)(a1 + 12840);
    if (v12)
    {
      if (v12 + 1 == v11)
        goto LABEL_33;
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102147870);
      v13 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
      {
        v14 = *(_DWORD *)(a1 + 12840) + 1;
        *(_DWORD *)buf = 67109376;
        v30 = v14;
        v31 = 1024;
        v32 = v11;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "Sensor Buffer packet drop detected. AP is expecting %u, but got %u", buf, 0xEu);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_33;
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102147870);
      v15 = *(_DWORD *)(a1 + 12840) + 1;
      v25 = 67109376;
      v26 = v15;
      v27 = 1024;
      v28 = v11;
      v16 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "Sensor Buffer packet drop detected. AP is expecting %u, but got %u", &v25, 14);
      v18 = v17;
      sub_100512490("Generic", 1, 0, 0, "virtual void CLSPU::visitSensorBuffer(const CMMotionCoprocessorReply::SensorBuffer *)", "%s\n", v16);
    }
    else
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102147870);
      v19 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        v30 = v11;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Receiving first Sensor Buffer packet since process start, seq %u", buf, 8u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_33;
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102147870);
      v25 = 67109120;
      v26 = v11;
      v23 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "Receiving first Sensor Buffer packet since process start, seq %u", &v25);
      v18 = v24;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLSPU::visitSensorBuffer(const CMMotionCoprocessorReply::SensorBuffer *)", "%s\n", v23);
    }
    if (v18 != buf)
      free(v18);
LABEL_33:
    *(_DWORD *)(a1 + 12840) = v11;
    if (v6)
    {
      v20 = sub_1001611D4(a1, *(double *)(a1 + 352));
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, double))(v6 + 16))(v6, v4, *(_QWORD *)(a2 + 8), v5, *(unsigned int *)(v5 + 2164), v20);
    }
  }
}

BOOL sub_1005D21D0(uint64_t a1, uint64_t a2)
{
  int v4;
  size_t v5;
  unsigned int v6;
  _BOOL8 result;
  NSObject *v8;
  int v9;
  NSObject *v10;
  int v11;
  int v12;
  _BOOL4 v13;
  int v14;
  const char *v15;
  uint8_t *v16;
  int v17;
  int v18;
  const char *v19;
  uint8_t *v20;
  int v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  uint8_t buf[4];
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;

  v4 = *(unsigned __int8 *)(a2 + 1);
  if (*(_BYTE *)(a2 + 1) && *(_DWORD *)(a1 + 2160) + 1 != v4)
  {
    if (qword_10229FC80 != -1)
      dispatch_once(&qword_10229FC80, &stru_1021477D0);
    v10 = qword_10229FC88;
    if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_FAULT))
    {
      v11 = *(_DWORD *)(a1 + 2160);
      v12 = *(unsigned __int8 *)(a2 + 1);
      *(_DWORD *)buf = 67240704;
      v28 = 25;
      v29 = 1026;
      v30 = v11;
      v31 = 1026;
      v32 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Out of order segments,U::kType,%{public}u,fLastSegment,%{public}u,packet->fSegment,%{public}u", buf, 0x14u);
    }
    v13 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v13)
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC80 != -1)
        dispatch_once(&qword_10229FC80, &stru_1021477D0);
      v17 = *(_DWORD *)(a1 + 2160);
      v18 = *(unsigned __int8 *)(a2 + 1);
      v21 = 67240704;
      v22 = 25;
      v23 = 1026;
      v24 = v17;
      v25 = 1026;
      v26 = v18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC88, 17, "Out of order segments,U::kType,%{public}u,fLastSegment,%{public}u,packet->fSegment,%{public}u", &v21, 20);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLSPUReportReconstructor<CLSPU::PackedSensorBuffer>::reconstruct(const U *) [T = CLSPU::PackedSensorBuffer, U = CMMotionCoprocessorReply::SensorBuffer]", "%s\n", v19);
      if (v20 != buf)
        free(v20);
      return 0;
    }
  }
  else
  {
    v5 = *(unsigned __int16 *)(a2 + 6);
    if (v5 > 0xC8 || (v6 = 200 * v4, (200 * v4 + v5) >= 0x871))
    {
      if (qword_10229FC80 != -1)
        dispatch_once(&qword_10229FC80, &stru_1021477D0);
      v8 = qword_10229FC88;
      if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_FAULT))
      {
        v9 = *(unsigned __int16 *)(a2 + 6);
        *(_DWORD *)buf = 67240192;
        v28 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Bad size,packet->fSize,%{public}u", buf, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC80 != -1)
          dispatch_once(&qword_10229FC80, &stru_1021477D0);
        v14 = *(unsigned __int16 *)(a2 + 6);
        v21 = 67240192;
        v22 = v14;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC88, 17, "Bad size,packet->fSize,%{public}u", &v21, 8);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLSPUReportReconstructor<CLSPU::PackedSensorBuffer>::reconstruct(const U *) [T = CLSPU::PackedSensorBuffer, U = CMMotionCoprocessorReply::SensorBuffer]", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
      result = 0;
      *(_DWORD *)(a1 + 2160) = -1;
    }
    else
    {
      memcpy((void *)(a1 + v6), (const void *)(a2 + 18), v5);
      *(_DWORD *)(a1 + 2160) = *(unsigned __int8 *)(a2 + 1);
      *(_DWORD *)(a1 + 2164) = v6 + *(unsigned __int16 *)(a2 + 6);
      return *(_BYTE *)(a2 + 17) != 0;
    }
  }
  return result;
}

void sub_1005D2590(uint64_t a1, uint64_t a2)
{
  sub_1005D1C98(a1 - 152, a2);
}

uint64_t sub_1005D2598(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  double v6;
  __int128 v7;
  __int128 v8;

  v6 = sub_1001611D4(a1, *(double *)(a1 + 352));
  v4 = a2[1];
  v7 = *a2;
  v8 = v4;
  return sub_10014C2F4(a1, 8, (uint64_t)&v6, 40);
}

uint64_t sub_1005D25E8(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 12832);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(unsigned __int8 *)(a2 + 1));
  return result;
}

uint64_t sub_1005D2600(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 12680);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(unsigned __int8 *)(a2 + 1));
  return result;
}

uint64_t sub_1005D2618(uint64_t a1, uint64_t a2)
{
  double v4;
  _BYTE v6[28];
  int v7;
  double v8;

  v4 = sub_1001611D4(a1, *(double *)(a1 + 352)+ ((double)*(unint64_t *)(a2 + 12) - (double)*(unint64_t *)(a2 + 20)) / 1000000.0);
  v7 = 0;
  *(_OWORD *)v6 = *(_OWORD *)a2;
  *(_OWORD *)&v6[12] = *(_OWORD *)(a2 + 12);
  v8 = v4;
  return sub_10014C2F4(a1, 21, (uint64_t)v6, 40);
}

uint64_t sub_1005D2698(uint64_t a1, uint64_t a2)
{
  return sub_1005D2618(a1 - 152, a2);
}

uint64_t sub_1005D26A0(uint64_t a1, uint64_t a2)
{
  double v4;
  _BYTE v6[28];
  int v7;
  double v8;

  v4 = sub_1001611D4(a1, *(double *)(a1 + 352)+ ((double)*(unint64_t *)(a2 + 12) - (double)*(unint64_t *)(a2 + 20)) / 1000000.0);
  v7 = 0;
  *(_OWORD *)v6 = *(_OWORD *)a2;
  *(_OWORD *)&v6[12] = *(_OWORD *)(a2 + 12);
  v8 = v4;
  return sub_10014C2F4(a1, 13, (uint64_t)v6, 40);
}

uint64_t sub_1005D2720(uint64_t a1, uint64_t a2)
{
  return sub_1005D26A0(a1 - 152, a2);
}

void sub_1005D2728(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];

  v2 = sub_100127B9C();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1005D2788;
  v3[3] = &unk_10212ECA0;
  v3[4] = a1;
  sub_1000A57FC(v2, (uint64_t)v3);
}

void sub_1005D2788(uint64_t a1)
{
  uint64_t v1;
  _BYTE v2[8];
  unint64_t v3;
  void *__p[2];
  __int128 v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  int v9;

  v1 = *(_QWORD *)(a1 + 32);
  if ((sub_1001B7910() & 0x10) != 0)
  {
    v2[0] = 0;
    v3 = 0xBFF0000000000000;
    *(_OWORD *)__p = 0u;
    v5 = 0u;
    v6 = 0xFFFFFFFF7FFFFFFFLL;
    v7 = -1082130432;
    v8 = -1;
    v9 = 0;
    sub_100B28B14(v1 + 12848, (uint64_t)v2);
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 464))(v1);
    if (SBYTE7(v5) < 0)
      operator delete(__p[0]);
  }
}

void sub_1005D281C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005D2838(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];

  v2 = sub_100127B9C();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1005D2898;
  v3[3] = &unk_10212ECA0;
  v3[4] = a1;
  sub_1000A57FC(v2, (uint64_t)v3);
}

void sub_1005D2898(uint64_t a1)
{
  uint64_t v1;
  _BYTE v2[8];
  unint64_t v3;
  void *__p;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;

  v1 = *(_QWORD *)(a1 + 32);
  if ((sub_1001B7910() & 0x40000) != 0)
  {
    v2[0] = 0;
    v3 = 0xBFF0000000000000;
    __p = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0xFFFFFFFF7FFFFFFFLL;
    v8 = -1;
    sub_100B28F2C(v1 + 12848, (uint64_t)v2);
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 472))(v1);
    if (SHIBYTE(v6) < 0)
      operator delete(__p);
  }
}

void sub_1005D2918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005D2934(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  _QWORD v4[5];
  __int128 v5;

  v5 = *a2;
  v3 = sub_100127B9C();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1005D299C;
  v4[3] = &unk_102143548;
  v4[4] = a1;
  sub_1000A57FC(v3, (uint64_t)v4);
}

uint64_t sub_1005D299C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  int v4;
  _BOOL4 v5;
  int v6;
  _BOOL4 v7;
  _BOOL4 v8;
  uint64_t v9;
  _DWORD v11[2];
  __int16 v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  _BOOL4 v17;
  __int16 v18;
  int v19;
  __int16 v20;
  _BOOL4 v21;
  __int16 v22;
  _BOOL4 v23;
  __int16 v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 32);
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102147890);
  v3 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(unsigned __int8 *)(a1 + 48);
    v5 = *(_BYTE *)(a1 + 49) != 0;
    v6 = *(unsigned __int8 *)(a1 + 50);
    v7 = *(_BYTE *)(a1 + 51) != 0;
    v8 = *(_BYTE *)(a1 + 52) != 0;
    v9 = *(_QWORD *)(a1 + 40);
    v11[0] = 68290563;
    v11[1] = 0;
    v12 = 2082;
    v13 = "";
    v14 = 1025;
    v15 = v4;
    v16 = 1025;
    v17 = v5;
    v18 = 1025;
    v19 = v6;
    v20 = 1025;
    v21 = v7;
    v22 = 1025;
    v23 = v8;
    v24 = 2049;
    v25 = v9;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Configuration sent\", \"fFallStatsMode\":%{private}d, \"fSensorRecordingActive\":%{private}hhd, \"fSimulateEvent\":%{private}d, \"fUserStudyPressureDataCollection\":%{private}hhd, \"fDetectorEnabled\":%{private}hhd, \"fLastReplyAopTimestamp\":%{private}llu}", (uint8_t *)v11, 0x3Au);
  }
  *(_OWORD *)(v2 + 247) = *(_OWORD *)(a1 + 40);
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 552))(v2, 0);
}

void sub_1005D2B04()
{
  NSObject *v0;
  const char *v1;
  uint8_t *v2;
  _WORD v3[8];
  uint8_t buf[1640];

  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_102147870);
  v0 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "Sending fallModel Command.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102147870);
    v3[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Sending fallModel Command.", v3, 2);
    v2 = (uint8_t *)v1;
    sub_100512490("Generic", 1, 0, 2, "void CLSPU::setFallModels(const CMSPUFall_Types::FallModel &, const CMSPUFall_Types::FallModel &, const CMSPUFall_Types::FallModel &)", "%s\n", v1);
    if (v2 != buf)
      free(v2);
  }
}

void sub_1005D2C88(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  NSObject *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  int v14;
  int v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  _DWORD v32[2];
  __int16 v33;
  const char *v34;
  __int16 v35;
  double v36;
  __int16 v37;
  double v38;
  __int16 v39;
  double v40;
  __int16 v41;
  double v42;
  __int16 v43;
  double v44;
  __int16 v45;
  double v46;
  __int16 v47;
  double v48;
  __int16 v49;
  double v50;
  __int16 v51;
  int v52;
  __int16 v53;
  int v54;
  __int16 v55;
  double v56;
  __int16 v57;
  double v58;
  __int16 v59;
  double v60;
  __int16 v61;
  double v62;
  __int16 v63;
  double v64;
  __int16 v65;
  int v66;
  __int16 v67;
  int v68;
  __int16 v69;
  int v70;
  __int16 v71;
  int v72;
  __int16 v73;
  int v74;
  __int16 v75;
  int v76;
  __int16 v77;
  int v78;
  __int16 v79;
  int v80;
  __int16 v81;
  int v82;
  __int16 v83;
  int v84;
  __int16 v85;
  int v86;
  char v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  _BYTE v92[28];

  v4 = a2[3];
  v90 = a2[2];
  v91 = v4;
  *(_OWORD *)v92 = a2[4];
  *(_OWORD *)&v92[12] = *(__int128 *)((char *)a2 + 76);
  v5 = a2[1];
  v88 = *a2;
  v87 = 32;
  v89 = v5;
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102147890);
  v6 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_INFO))
  {
    v7 = *(float *)a2;
    v8 = *((float *)a2 + 1);
    v9 = *((float *)a2 + 2);
    v10 = *((float *)a2 + 3);
    v11 = *((float *)a2 + 4);
    v12 = *((float *)a2 + 5);
    v13 = *((float *)a2 + 6);
    v14 = *((_DWORD *)a2 + 10);
    v15 = *((_DWORD *)a2 + 11);
    v16 = *((float *)a2 + 12);
    v17 = *((float *)a2 + 13);
    v18 = *((float *)a2 + 14);
    v19 = *((float *)a2 + 15);
    v20 = *((float *)a2 + 16);
    v21 = *((_DWORD *)a2 + 17);
    v22 = *((_DWORD *)a2 + 18);
    v23 = *((_DWORD *)a2 + 19);
    v24 = *((_DWORD *)a2 + 20);
    v25 = *((unsigned __int8 *)a2 + 84);
    v26 = *((unsigned __int8 *)a2 + 85);
    v27 = *((unsigned __int8 *)a2 + 86);
    v28 = *((unsigned __int8 *)a2 + 87);
    v29 = *((unsigned __int8 *)a2 + 88);
    v30 = *((unsigned __int8 *)a2 + 89);
    v31 = *((unsigned __int8 *)a2 + 90);
    v32[0] = 68295683;
    v32[1] = 0;
    v33 = 2082;
    v34 = "";
    v35 = 2049;
    v36 = v7;
    v37 = 2049;
    v38 = v8;
    v39 = 2049;
    v40 = v9;
    v41 = 2049;
    v42 = v10;
    v43 = 2049;
    v44 = v9;
    v45 = 2049;
    v46 = v11;
    v47 = 2049;
    v48 = v12;
    v49 = 2049;
    v50 = v13;
    v51 = 1025;
    v52 = v14;
    v53 = 1025;
    v54 = v15;
    v55 = 2049;
    v56 = v16;
    v57 = 2049;
    v58 = v17;
    v59 = 2049;
    v60 = v18;
    v61 = 2049;
    v62 = v19;
    v63 = 2049;
    v64 = v20;
    v65 = 1025;
    v66 = v21;
    v67 = 1025;
    v68 = v22;
    v69 = 1025;
    v70 = v23;
    v71 = 1025;
    v72 = v24;
    v73 = 1025;
    v74 = v25;
    v75 = 1025;
    v76 = v26;
    v77 = 1025;
    v78 = v27;
    v79 = 1025;
    v80 = v28;
    v81 = 1025;
    v82 = v29;
    v83 = 1025;
    v84 = v30;
    v85 = 1025;
    v86 = v31;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Sending fallThresholds Command\", \"fImpactMaxAccelNormAlertThreshold\":\"%{private}f\", \"fImpactMaxAccelNormLoggingStatsThreshold\":\"%{private}f\", \"fImpactMaxAccelNormLoggingHeartRateThreshold\":\"%{private}f\", \"fImpactMaxAccelNormLoggingHighResolutionSensorDataThreshold\":\"%{private}f\", \"fImpactMaxAccelNormLoggingHeartRateThreshold\":\"%{private}f\", \"fTripFallPosteriorRatioDetectionThreshold\":\"%{private}f\", \"fSlipFallPosteriorRatioDetectionThreshold\":\"%{private}f\", \"fOtherFallPosteriorRatioDetectionThreshold\":\"%{private}f\", \"fTotalLongLieThreshold\":%{private}d, \"fConsecutiveLongLieThreshold\":%{private}d, \"fAlertGatingMotionThreshold\":\"%{private}f\", \"fCyclingImpactGravityVarianceThreshold\":\"%{private}f\", \"fCyclingImpactCrownVarianceThreshold\":\"%{private}f\", \"fCyclingImpactMaxAbsYThreshold\":\"%{private}f\", \"fCyclingDistanceTraveledPostImpactThreshold\":\"%{private}f\", \"fCyclingEpochsDetectedPostImpactThreshold\":%{private}d, \"fOtherWorkoutQuiescenceThresholdLow\":%{private}d, \"fOtherWorkoutQuiescenceThresholdHigh\":%{private}d, \"fOtherWorkoutConsecutiveLongLieThreshold\":%{private}d, \"fOtherWorkoutShouldCancelAlertOnStepsThreshold\":%{private}d, \"fOtherWorkoutShouldCancelAlertOnStandThreshold\":%{private}d, \"fOtherWorkoutShouldCancelAlertOnActiveThreshold\":%{private}d, \"fRefereeOperatingModeOverride\":%{private}d, \"fAllDayStateMachineOperatingModeOverride\":%{private}d, \"fCyclingStateMachineEnabledOverride\":%{private}d, \"fAllDayStateMachineEnabledOverride\":%{private}d}", (uint8_t *)v32, 0xE2u);
  }
  sub_1005D5278(a1 + 192, (__int128 *)&v87, 0);
}

void sub_1005D2F00(uint64_t a1, char a2)
{
  uint64_t v4;
  _QWORD v5[5];
  char v6;

  v4 = sub_100127B9C();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1005D2F68;
  v5[3] = &unk_1021468D0;
  v5[4] = a1;
  v6 = a2;
  sub_1000A57FC(v4, (uint64_t)v5);
}

uint64_t sub_1005D2F68(uint64_t a1)
{
  _BYTE *v2;
  NSObject *v3;
  int v4;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  int v10;

  v2 = *(_BYTE **)(a1 + 32);
  if (qword_10229FD50 != -1)
    dispatch_once(&qword_10229FD50, &stru_1021478B0);
  v3 = off_10229FD58;
  if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    v6[0] = 68289283;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    v9 = 1025;
    v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Configuration sent\", \"shouldGateDynamicBiasOnChargerStatus\":%{private}d}", (uint8_t *)v6, 0x18u);
  }
  v2[267] = *(_BYTE *)(a1 + 40);
  return (*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)v2 + 552))(v2, 0);
}

void sub_1005D3078(uint64_t a1, int a2, int a3)
{
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  _DWORD v9[2];
  __int16 v10;
  int v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  int v15;

  LOBYTE(v8) = 46;
  BYTE1(v8) = a2;
  BYTE2(v8) = a3;
  sub_1005D54A0(a1 + 192, &v8, 0);
  if (qword_10229FD40 != -1)
    dispatch_once(&qword_10229FD40, &stru_102147810);
  v5 = qword_10229FD48;
  if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109376;
    v13 = a2;
    v14 = 1024;
    v15 = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Applying override baseband usage flag, enabled, %d, value, %d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_102147810);
    v9[0] = 67109376;
    v9[1] = a2;
    v10 = 1024;
    v11 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 1, "Applying override baseband usage flag, enabled, %d, value, %d", v9, 14);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLSPU::overrideBasebandUsageFlag(BOOL, BOOL)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
}

void sub_1005D325C(uint64_t a1, char a2, char a3, float a4)
{
  _BYTE v4[2];
  float v5;
  char v6;

  v4[0] = 71;
  v4[1] = a2;
  v5 = a4;
  v6 = a3;
  sub_1005D561C(a1 + 192, v4, 0);
}

void sub_1005D3298(uint64_t a1, char a2)
{
  __int16 v2;

  LOBYTE(v2) = 72;
  HIBYTE(v2) = a2;
  sub_1005D57A8(a1 + 192, &v2, 0);
}

float sub_1005D32CC(uint64_t a1, char a2, char a3, double a4)
{
  float v4;
  float result;
  _BYTE v6[2];
  float v7;
  char v8;

  v6[0] = 74;
  v6[1] = a2;
  v4 = a4;
  v7 = v4;
  v8 = a3;
  sub_1005D5924(a1 + 192, v6, 0);
  return result;
}

void sub_1005D330C(uint64_t a1, char a2, uint64_t a3)
{
  _BYTE v3[2];
  uint64_t v4;

  v3[0] = 75;
  v3[1] = a2;
  v4 = a3;
  sub_1005D5AB0(a1 + 192, (uint64_t *)v3, 0);
}

void sub_1005D3344(uint64_t a1, char a2, float a3)
{
  _BYTE v3[2];
  float v4;

  v3[0] = 81;
  v3[1] = a2;
  v4 = a3;
  sub_1005D5C38(a1 + 192, (int *)v3, 0);
}

id sub_1005D337C(uint64_t a1, __int128 *a2)
{
  id v3;
  _QWORD v5[5];
  __int128 v6;
  int v7;

  v6 = *a2;
  v7 = *((_DWORD *)a2 + 4);
  v3 = objc_msgSend(*(id *)(a1 + 168), "silo");
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1005D33F0;
  v5[3] = &unk_102146A50;
  v5[4] = a1;
  return objc_msgSend(v3, "async:", v5);
}

uint64_t sub_1005D33F0(uint64_t a1)
{
  return sub_100CED408(*(_QWORD *)(a1 + 32) + 13176, a1 + 40);
}

id sub_1005D3408(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  id v3;
  _QWORD v5[5];
  __int128 v6;
  int v7;

  v2 = a1 - 152;
  v6 = *a2;
  v7 = *((_DWORD *)a2 + 4);
  v3 = objc_msgSend(*(id *)(a1 + 16), "silo");
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1005D33F0;
  v5[3] = &unk_102146A50;
  v5[4] = v2;
  return objc_msgSend(v3, "async:", v5);
}

void sub_1005D347C(uint64_t a1, _DWORD *a2, int *a3, uint64_t a4)
{
  NSObject *v7;
  NSObject *v8;
  os_activity_scope_state_s state;
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;

  CLProfilingIdentify("CLSPU::onBLSData");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 168), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021478D0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v10 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSPU::onBLSData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021478D0);
    v8 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2082;
      v16 = "activity";
      v17 = 2050;
      v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSPU::onBLSData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v10 = 0;
  }
  if (!*a2)
    sub_10076D300(a4 + 13632, *a3);
  if (v10)
    os_activity_scope_leave(&state);
}

void sub_1005D363C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005D365C(uint64_t a1, uint64_t a2)
{
  return sub_100CED488(a1 + 13176, a2);
}

uint64_t sub_1005D3668(uint64_t a1, uint64_t a2)
{
  return sub_100CED488(a1 + 13024, a2);
}

uint64_t sub_1005D3674(uint64_t a1, uint64_t a2)
{
  CFAbsoluteTime Current;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  const char *v34;
  uint8_t *v35;
  int v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  uint8_t buf[4];
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  int v61;
  __int16 v62;
  int v63;
  __int16 v64;
  int v65;
  __int16 v66;
  int v67;
  CFAbsoluteTime v68;
  uint64_t v69;
  char v70;

  if (*(_BYTE *)(a1 + 12844))
  {
    sub_1015EB864(buf);
    sub_1016038B8((uint64_t)buf);
    Current = CFAbsoluteTimeGetCurrent();
    v70 |= 1u;
    v68 = Current;
    v5 = v69;
    v6 = *(_QWORD *)(a1 + 352);
    *(_BYTE *)(v69 + 44) |= 4u;
    *(_QWORD *)(v5 + 24) = v6;
    v7 = v69;
    v8 = *(_QWORD *)(a2 + 1);
    *(_BYTE *)(v69 + 44) |= 2u;
    *(_QWORD *)(v7 + 16) = v8;
    v9 = v69;
    v10 = *(_QWORD *)(a2 + 9);
    *(_BYTE *)(v69 + 44) |= 1u;
    *(_QWORD *)(v9 + 8) = v10;
    v11 = v69;
    v12 = *(_QWORD *)(a2 + 17);
    *(_BYTE *)(v69 + 44) |= 8u;
    *(_QWORD *)(v11 + 32) = v12;
    v13 = v69;
    LOBYTE(v12) = *(_BYTE *)(a2 + 25);
    *(_BYTE *)(v69 + 44) |= 0x10u;
    *(_BYTE *)(v13 + 40) = v12;
    v14 = v69;
    LOBYTE(v12) = *(_BYTE *)(a2 + 26);
    *(_BYTE *)(v69 + 44) |= 0x40u;
    *(_BYTE *)(v14 + 42) = v12;
    v15 = v69;
    LOBYTE(v12) = *(_BYTE *)(a2 + 27);
    *(_BYTE *)(v69 + 44) |= 0x20u;
    *(_BYTE *)(v15 + 41) = v12;
    if (qword_1023118A8 != -1)
      dispatch_once(&qword_1023118A8, &stru_102147830);
    if (qword_1023118B0)
      sub_101888B64(qword_1023118B0, (uint64_t)buf);
    sub_1015EE304((PB::Base *)buf);
  }
  if (qword_10229FD40 != -1)
    dispatch_once(&qword_10229FD40, &stru_102147810);
  v16 = qword_10229FD48;
  if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEFAULT))
  {
    v17 = *(_QWORD *)(a1 + 352);
    v18 = *(_QWORD *)(a2 + 1);
    v19 = *(_QWORD *)(a2 + 9);
    v20 = *(_QWORD *)(a2 + 17);
    v21 = *(unsigned __int8 *)(a2 + 25);
    v22 = *(unsigned __int8 *)(a2 + 27);
    v23 = *(unsigned __int8 *)(a2 + 26);
    v24 = *(unsigned __int8 *)(a2 + 28);
    *(_DWORD *)buf = 134350848;
    v53 = v17;
    v54 = 2048;
    v55 = v18;
    v56 = 2048;
    v57 = v19;
    v58 = 2048;
    v59 = v20;
    v60 = 1026;
    v61 = v21;
    v62 = 1026;
    v63 = v22;
    v64 = 1026;
    v65 = v23;
    v66 = 1026;
    v67 = v24;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "MagnetometerReset,timestamp,%{public}f,timeSinceLastRemagTrigger,%llu,timeSinceLastRemag,%llu,triggerCount,%llu,exitingSaturation,%{public}d,extendedSaturation,%{public}d,shiftInSaturation,%{public}d,fSuccessFlag,%{public}d", buf, 0x42u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_102147810);
    v26 = *(_QWORD *)(a1 + 352);
    v27 = *(_QWORD *)(a2 + 1);
    v28 = *(_QWORD *)(a2 + 9);
    v29 = *(_QWORD *)(a2 + 17);
    v30 = *(unsigned __int8 *)(a2 + 25);
    v31 = *(unsigned __int8 *)(a2 + 27);
    v32 = *(unsigned __int8 *)(a2 + 26);
    v33 = *(unsigned __int8 *)(a2 + 28);
    v36 = 134350848;
    v37 = v26;
    v38 = 2048;
    v39 = v27;
    v40 = 2048;
    v41 = v28;
    v42 = 2048;
    v43 = v29;
    v44 = 1026;
    v45 = v30;
    v46 = 1026;
    v47 = v31;
    v48 = 1026;
    v49 = v32;
    v50 = 1026;
    v51 = v33;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 0, "MagnetometerReset,timestamp,%{public}f,timeSinceLastRemagTrigger,%llu,timeSinceLastRemag,%llu,triggerCount,%llu,exitingSaturation,%{public}d,extendedSaturation,%{public}d,shiftInSaturation,%{public}d,fSuccessFlag,%{public}d", &v36, 66);
    v35 = (uint8_t *)v34;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLSPU::visitMagnetometerReset(const CMMotionCoprocessorReply::MagnetometerReset *)", "%s\n", v34);
    if (v35 != buf)
      free(v35);
  }
  return sub_10078A3E8(a1 + 13608, a2, *(double *)(a1 + 352));
}

void sub_1005D3A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005D3A3C(uint64_t a1, uint64_t a2)
{
  return sub_1005D3674(a1 - 152, a2);
}

uint64_t sub_1005D3A44(uint64_t a1, uint64_t a2)
{
  return sub_100F5A5B0(a1 + 13625, a2);
}

uint64_t sub_1005D3A50(uint64_t a1, uint64_t a2)
{
  return sub_100F5A5B0(a1 + 13473, a2);
}

void sub_1005D3A5C(uint64_t a1, uint64_t a2)
{
  sub_10076C308(a1 + 13632, a2);
}

void sub_1005D3A68(uint64_t a1, uint64_t a2)
{
  sub_10076C308(a1 + 13480, a2);
}

uint64_t sub_1005D3A74(uint64_t a1, uint64_t a2)
{
  return sub_10076CA3C(a1 + 13632, a2);
}

uint64_t sub_1005D3A80(uint64_t a1, uint64_t a2)
{
  return sub_10076CA3C(a1 + 13480, a2);
}

uint64_t sub_1005D3A8C(uint64_t a1, uint64_t a2)
{
  double v4;
  double v5;
  int v6;
  int v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  NSObject *v15;
  const char *v17;
  uint8_t *v18;
  double v19;
  double v20;
  uint64_t v21;
  int v22;
  double v23;
  __int16 v24;
  double v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  uint8_t buf[4];
  double v33;
  __int16 v34;
  double v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  uint64_t v42;
  double v43;
  char v44;

  v4 = *(double *)(a1 + 352);
  v19 = v4;
  v5 = sub_1001611D4(a1, v4);
  v20 = v5;
  v6 = *(unsigned __int8 *)(a2 + 1);
  LOBYTE(v21) = *(_BYTE *)(a2 + 1);
  v7 = *(unsigned __int8 *)(a2 + 2);
  BYTE1(v21) = *(_BYTE *)(a2 + 2);
  v8 = *(_WORD *)(a2 + 3);
  BYTE2(v21) = v8;
  if (*(_BYTE *)(a1 + 12844))
  {
    sub_1015EB864(buf);
    sub_101603DCC((uint64_t)buf);
    v44 |= 1u;
    v43 = v5;
    v9 = v42;
    *(_BYTE *)(v42 + 28) |= 1u;
    *(double *)(v9 + 8) = v4;
    v10 = v42;
    v11 = *(unsigned __int8 *)(a2 + 1);
    *(_BYTE *)(v42 + 28) |= 4u;
    *(_DWORD *)(v10 + 20) = v11;
    v12 = v42;
    LOBYTE(v11) = *(_BYTE *)(a2 + 2) != 0;
    *(_BYTE *)(v42 + 28) |= 8u;
    *(_BYTE *)(v12 + 24) = v11;
    v13 = v42;
    v14 = *(unsigned __int16 *)(a2 + 3);
    *(_BYTE *)(v42 + 28) |= 2u;
    *(_DWORD *)(v13 + 16) = v14;
    if (qword_1023118A8 != -1)
      dispatch_once(&qword_1023118A8, &stru_102147830);
    if (qword_1023118B0)
      sub_101888B64(qword_1023118B0, (uint64_t)buf);
    sub_1015EE304((PB::Base *)buf);
  }
  if (qword_10229FD40 != -1)
    dispatch_once(&qword_10229FD40, &stru_102147810);
  v15 = qword_10229FD48;
  if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134219008;
    v33 = v4;
    v34 = 2048;
    v35 = v5;
    v36 = 1024;
    v37 = v6;
    v38 = 1026;
    v39 = v7;
    v40 = 1024;
    v41 = v8;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "BasebandCompassCoex,timestamp,%f,startTime,%f,sub_type,%d,inCoex,%{public}d,reserved,0x%02x", buf, 0x28u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_102147810);
    v22 = 134219008;
    v23 = v4;
    v24 = 2048;
    v25 = v5;
    v26 = 1024;
    v27 = v6;
    v28 = 1026;
    v29 = v7;
    v30 = 1024;
    v31 = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 0, "BasebandCompassCoex,timestamp,%f,startTime,%f,sub_type,%d,inCoex,%{public}d,reserved,0x%02x", &v22, 40, *(_QWORD *)&v19, *(_QWORD *)&v20, v21);
    v18 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLSPU::visitBasebandCompassCoex(const CMMotionCoprocessorReply::BasebandCompassCoex *)", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
  return sub_10014C2F4(a1, 36, (uint64_t)&v19, 224);
}

void sub_1005D3DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  sub_1015EE304((PB::Base *)&a45);
  _Unwind_Resume(a1);
}

uint64_t sub_1005D3DF0(uint64_t a1, uint64_t a2)
{
  return sub_1005D3A8C(a1 - 152, a2);
}

uint64_t sub_1005D3DF8(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  int v6;
  uint64_t v7;
  int v9;
  int v10;
  uint64_t v11;
  const char *v12;
  uint8_t *v13;
  _DWORD v14[2];
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  uint64_t v24;

  if (qword_10229FD40 != -1)
    dispatch_once(&qword_10229FD40, &stru_102147810);
  v4 = qword_10229FD48;
  if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(unsigned __int8 *)(a2 + 1);
    v6 = *(unsigned __int8 *)(a2 + 2);
    v7 = *(_QWORD *)(a2 + 4);
    *(_DWORD *)buf = 67240704;
    v20 = v5;
    v21 = 1026;
    v22 = v6;
    v23 = 2048;
    v24 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BasebandCompassCoexMetrics,countOfTimesEnteringHeatup,%{public}d,hasActiveMagnetometerClientDuringHeatUp,%{public}d,durationOfNonDefaultState,%llu", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_102147810);
    v9 = *(unsigned __int8 *)(a2 + 1);
    v10 = *(unsigned __int8 *)(a2 + 2);
    v11 = *(_QWORD *)(a2 + 4);
    v14[0] = 67240704;
    v14[1] = v9;
    v15 = 1026;
    v16 = v10;
    v17 = 2048;
    v18 = v11;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 0, "BasebandCompassCoexMetrics,countOfTimesEnteringHeatup,%{public}d,hasActiveMagnetometerClientDuringHeatUp,%{public}d,durationOfNonDefaultState,%llu", v14, 24);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLSPU::visitBasebandCompassCoexMetrics(const CMMotionCoprocessorReply::BasebandCompassCoexMetrics *)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  return sub_10078A5EC(a1 + 13608, a2, *(double *)(a1 + 352));
}

uint64_t sub_1005D4000(uint64_t a1, uint64_t a2)
{
  return sub_1005D3DF8(a1 - 152, a2);
}

uint64_t sub_1005D4008(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  double v6;
  __int128 v7;
  _BYTE v8[24];

  *(_QWORD *)&v8[16] = 0;
  v6 = sub_1001611D4(a1, *(double *)(a1 + 352));
  v4 = a2[1];
  v7 = *a2;
  *(_OWORD *)v8 = v4;
  *(_QWORD *)&v8[15] = *(_QWORD *)((char *)a2 + 31);
  return sub_10014C2F4(a1, 40, (uint64_t)&v6, 48);
}

uint64_t sub_1005D4068(uint64_t a1, __int128 *a2)
{
  return sub_1005D4008(a1 - 152, a2);
}

void sub_1005D4070(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  int v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  int v37;
  const char *v38;
  char *v39;
  int v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;
  __int16 v56;
  double v57;
  __int16 v58;
  double v59;
  __int16 v60;
  double v61;
  __int16 v62;
  double v63;
  __int16 v64;
  double v65;
  __int16 v66;
  double v67;
  __int16 v68;
  double v69;
  __int16 v70;
  int v71;
  _BYTE buf[24];
  _BYTE v73[34];
  __int16 v74;
  double v75;
  __int16 v76;
  double v77;
  __int16 v78;
  double v79;
  __int16 v80;
  double v81;
  __int16 v82;
  double v83;
  __int16 v84;
  double v85;
  __int16 v86;
  double v87;
  __int16 v88;
  int v89;

  if (qword_10229FC60 != -1)
    dispatch_once(&qword_10229FC60, &stru_1021478F0);
  v4 = qword_10229FC68;
  if (os_log_type_enabled((os_log_t)qword_10229FC68, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 352);
    v6 = *(_QWORD *)(a2 + 1);
    v7 = *(unsigned __int8 *)(a2 + 9);
    v8 = *(unsigned __int8 *)(a2 + 10);
    v9 = *(unsigned __int8 *)(a2 + 11);
    v10 = *(unsigned __int8 *)(a2 + 12);
    v11 = *(unsigned __int8 *)(a2 + 13);
    v12 = *(unsigned __int8 *)(a2 + 14);
    v13 = *(float *)(a2 + 15);
    v14 = *(float *)(a2 + 19);
    v15 = *(float *)(a2 + 23);
    v16 = *(float *)(a2 + 27);
    v17 = *(float *)(a2 + 31);
    v18 = *(float *)(a2 + 35);
    v19 = (float)(*(float *)(a2 + 39) * 57.296);
    v20 = *(unsigned __int8 *)(a2 + 43);
    *(_DWORD *)buf = 134352896;
    *(_QWORD *)&buf[4] = v5;
    *(_WORD *)&buf[12] = 2050;
    *(_QWORD *)&buf[14] = v6;
    *(_WORD *)&buf[22] = 1026;
    *(_DWORD *)v73 = v7;
    *(_WORD *)&v73[4] = 1026;
    *(_DWORD *)&v73[6] = v8;
    *(_WORD *)&v73[10] = 1026;
    *(_DWORD *)&v73[12] = v9;
    *(_WORD *)&v73[16] = 1026;
    *(_DWORD *)&v73[18] = v10;
    *(_WORD *)&v73[22] = 1026;
    *(_DWORD *)&v73[24] = v11;
    *(_WORD *)&v73[28] = 1026;
    *(_DWORD *)&v73[30] = v12;
    v74 = 2050;
    v75 = v13;
    v76 = 2050;
    v77 = v14;
    v78 = 2050;
    v79 = v15;
    v80 = 2050;
    v81 = v16;
    v82 = 2050;
    v83 = v17;
    v84 = 2050;
    v85 = v18;
    v86 = 2050;
    v87 = v19;
    v88 = 1026;
    v89 = v20;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "ViewObstructedState,timestamp,%{public}f,aopTimestamp,%{public}llu,shouldSuppress,%{public}u,currentState,%{public}u,currentEventTag,%{public}u,orientation,%{public}u,motionType,%{public}u,sufficientMotion,%{public}u,lux,%{public}f,rawProxIntensity,%{public}f,factoryPocketProbability,%{public}f,baselinedPocketProbability,%{public}f,pocketProbSuppressThreshold,%{public}f,pocketProbUnsuppressThreshold,%{public}f,gravityAngleDeg,%{public}f,hasProxCalibration,%{public}u", buf, 0x86u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC60 != -1)
      dispatch_once(&qword_10229FC60, &stru_1021478F0);
    v22 = *(_QWORD *)(a1 + 352);
    v23 = *(_QWORD *)(a2 + 1);
    v24 = *(unsigned __int8 *)(a2 + 9);
    v25 = *(unsigned __int8 *)(a2 + 10);
    v26 = *(unsigned __int8 *)(a2 + 11);
    v27 = *(unsigned __int8 *)(a2 + 12);
    v28 = *(unsigned __int8 *)(a2 + 13);
    v29 = *(unsigned __int8 *)(a2 + 14);
    v30 = *(float *)(a2 + 15);
    v31 = *(float *)(a2 + 19);
    v32 = *(float *)(a2 + 23);
    v33 = *(float *)(a2 + 27);
    v34 = *(float *)(a2 + 31);
    v35 = *(float *)(a2 + 35);
    v36 = (float)(*(float *)(a2 + 39) * 57.296);
    v37 = *(unsigned __int8 *)(a2 + 43);
    v40 = 134352896;
    v41 = v22;
    v42 = 2050;
    v43 = v23;
    v44 = 1026;
    v45 = v24;
    v46 = 1026;
    v47 = v25;
    v48 = 1026;
    v49 = v26;
    v50 = 1026;
    v51 = v27;
    v52 = 1026;
    v53 = v28;
    v54 = 1026;
    v55 = v29;
    v56 = 2050;
    v57 = v30;
    v58 = 2050;
    v59 = v31;
    v60 = 2050;
    v61 = v32;
    v62 = 2050;
    v63 = v33;
    v64 = 2050;
    v65 = v34;
    v66 = 2050;
    v67 = v35;
    v68 = 2050;
    v69 = v36;
    v70 = 1026;
    v71 = v37;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC68, 0, "ViewObstructedState,timestamp,%{public}f,aopTimestamp,%{public}llu,shouldSuppress,%{public}u,currentState,%{public}u,currentEventTag,%{public}u,orientation,%{public}u,motionType,%{public}u,sufficientMotion,%{public}u,lux,%{public}f,rawProxIntensity,%{public}f,factoryPocketProbability,%{public}f,baselinedPocketProbability,%{public}f,pocketProbSuppressThreshold,%{public}f,pocketProbUnsuppressThreshold,%{public}f,gravityAngleDeg,%{public}f,hasProxCalibration,%{public}u", &v40, 134);
    v39 = (char *)v38;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLSPU::visitViewObstructedState(const CMMotionCoprocessorReply::ViewObstructedState *)", "%s\n", v38);
    if (v39 != buf)
      free(v39);
  }
  if (*(_BYTE *)(a2 + 44))
  {
    *(_QWORD *)&v73[24] = 0;
    *(_QWORD *)buf = sub_1001611D4(a1, *(double *)(a1 + 352));
    v21 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)&buf[8] = *(_OWORD *)a2;
    *(_OWORD *)v73 = v21;
    *(_OWORD *)&v73[13] = *(_OWORD *)(a2 + 29);
    sub_10014C2F4(a1, 42, (uint64_t)buf, 56);
  }
}

void sub_1005D4440(uint64_t a1, uint64_t a2)
{
  sub_1005D4070(a1 - 152, a2);
}

uint64_t sub_1005D4448(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  double v6;
  uint64_t v8;
  double v9;
  const char *v10;
  char *v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  double v15;
  _BYTE buf[1632];

  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_102147870);
  v4 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 352);
    v6 = *(float *)(a2 + 12);
    *(_DWORD *)buf = 134349312;
    *(_QWORD *)&buf[4] = v5;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "ALS,timestamp,%{public}f,value,%f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102147870);
    v8 = *(_QWORD *)(a1 + 352);
    v9 = *(float *)(a2 + 12);
    v12 = 134349312;
    v13 = v8;
    v14 = 2048;
    v15 = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "ALS,timestamp,%{public}f,value,%f", &v12, 22);
    v11 = (char *)v10;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLSPU::visitALS(const CMMotionCoprocessorReply::ALS *)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  *(_QWORD *)buf = sub_1001611D4(a1, *(double *)(a1 + 352));
  *(_OWORD *)&buf[8] = *(_OWORD *)a2;
  return sub_10014C2F4(a1, 41, (uint64_t)buf, 24);
}

uint64_t sub_1005D4650(uint64_t a1, uint64_t a2)
{
  return sub_1005D4448(a1 - 152, a2);
}

uint64_t sub_1005D4658(uint64_t a1, uint64_t a2)
{
  _QWORD v5[2];
  uint64_t v6;

  v6 = 0;
  v5[0] = sub_1001611D4(a1, *(double *)(a1 + 352));
  v5[1] = *(_QWORD *)a2;
  LOWORD(v6) = *(_WORD *)(a2 + 8);
  return sub_10014C2F4(a1, 43, (uint64_t)v5, 24);
}

uint64_t sub_1005D46B4(uint64_t a1, uint64_t a2)
{
  return sub_1005D4658(a1 - 152, a2);
}

uint64_t sub_1005D46BC(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  double v6;
  __int128 v7;
  __int128 v8;
  _BYTE v9[24];

  *(_QWORD *)&v9[16] = 0;
  v6 = sub_1001611D4(a1, *(double *)(a1 + 352));
  v4 = a2[1];
  v7 = *a2;
  v8 = v4;
  *(_OWORD *)v9 = a2[2];
  *(_DWORD *)&v9[15] = *(_DWORD *)((char *)a2 + 47);
  return sub_10014C2F4(a1, 44, (uint64_t)&v6, 64);
}

uint64_t sub_1005D4724(uint64_t a1, __int128 *a2)
{
  return sub_1005D46BC(a1 - 152, a2);
}

uint64_t sub_1005D472C(uint64_t a1, _QWORD *a2)
{
  _QWORD v5[2];

  v5[0] = sub_1001611D4(a1, *(double *)(a1 + 352));
  v5[1] = *a2;
  return sub_10014C2F4(a1, 45, (uint64_t)v5, 16);
}

uint64_t sub_1005D477C(uint64_t a1, _QWORD *a2)
{
  return sub_1005D472C(a1 - 152, a2);
}

uint64_t sub_1005D4784(uint64_t a1, _QWORD *a2)
{
  _QWORD v5[2];

  v5[0] = sub_1001611D4(a1, *(double *)(a1 + 352));
  v5[1] = *a2;
  return sub_10014C2F4(a1, 46, (uint64_t)v5, 16);
}

uint64_t sub_1005D47D4(uint64_t a1, _QWORD *a2)
{
  return sub_1005D4784(a1 - 152, a2);
}

uint64_t sub_1005D47DC(uint64_t a1, uint64_t a2)
{
  return sub_10088CC50(a1 + 13600, a2);
}

uint64_t sub_1005D47E8(uint64_t a1, uint64_t a2)
{
  return sub_10088CC50(a1 + 13448, a2);
}

void sub_1005D47F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_100E5A538();
  sub_100E5A5AC(v3, a2);
}

void sub_1005D4818(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_100E5A538();
  sub_100E5A5AC(v3, a2);
}

uint64_t sub_1005D483C(uint64_t a1, uint64_t a2)
{
  return sub_1014027FC(a1 + 13656, a2);
}

uint64_t sub_1005D4848(uint64_t a1, uint64_t a2)
{
  return sub_1014027FC(a1 + 13504, a2);
}

void sub_1005D4854(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  double v16;
  float v21;
  int v34;
  uint64_t v35;
  double v44;
  float v49;
  int v62;
  const char *v63;
  uint8_t *v64;
  int v65;
  double v66;
  __int16 v67;
  double v68;
  __int16 v69;
  uint64_t v70;
  __int16 v71;
  uint64_t v72;
  __int16 v73;
  uint64_t v74;
  __int16 v75;
  uint64_t v76;
  __int16 v77;
  uint64_t v78;
  __int16 v79;
  uint64_t v80;
  __int16 v81;
  int v82;
  uint8_t buf[4];
  double v84;
  __int16 v85;
  double v86;
  __int16 v87;
  uint64_t v88;
  __int16 v89;
  uint64_t v90;
  __int16 v91;
  uint64_t v92;
  __int16 v93;
  uint64_t v94;
  __int16 v95;
  uint64_t v96;
  __int16 v97;
  uint64_t v98;
  __int16 v99;
  int v100;

  if (qword_10229FD10 != -1)
    dispatch_once(&qword_10229FD10, &stru_102147910);
  v3 = qword_10229FD18;
  if (os_log_type_enabled((os_log_t)qword_10229FD18, OS_LOG_TYPE_DEFAULT))
  {
    _H0 = *(_WORD *)(a2 + 4);
    __asm { FCVT            S0, H0 }
    _S0 = fabsf(_S0);
    __asm
    {
      FCVT            H0, S0
      FCVT            S0, H0; float
    }
    _H1 = *(_WORD *)(a2 + 2);
    __asm { FCVT            S1, H1 }
    _S1 = fabsf(_S1);
    __asm
    {
      FCVT            H1, S1
      FCVT            S8, H1
    }
    v16 = (float)(atan2f(_S0, _S8) * 57.296);
    _H0 = *(_WORD *)(a2 + 6);
    __asm { FCVT            S0, H0 }
    _S0 = fabsf(_S0);
    __asm
    {
      FCVT            H0, S0
      FCVT            S0, H0; float
    }
    v21 = atan2f(_S0, _S8);
    _H1 = *(_WORD *)(a2 + 8);
    _H2 = *(_WORD *)(a2 + 10);
    __asm
    {
      FCVT            D1, H1
      FCVT            D2, H2
    }
    _H3 = *(_WORD *)(a2 + 12);
    __asm { FCVT            D3, H3 }
    _H4 = *(_WORD *)(a2 + 14);
    __asm { FCVT            D4, H4 }
    _H5 = *(_WORD *)(a2 + 16);
    __asm { FCVT            D5, H5 }
    _H6 = *(_WORD *)(a2 + 18);
    __asm { FCVT            D6, H6 }
    v34 = *(unsigned __int8 *)(a2 + 1);
    *(_DWORD *)buf = 134351104;
    v84 = v16;
    v85 = 2050;
    v86 = (float)(v21 * 57.296);
    v87 = 2050;
    v88 = _D1;
    v89 = 2050;
    v90 = _D2;
    v91 = 2050;
    v92 = _D3;
    v93 = 2050;
    v94 = _D4;
    v95 = 2050;
    v96 = _D5;
    v97 = 2050;
    v98 = _D6;
    v99 = 1026;
    v100 = v34;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[MagicMount][DebugLogging]rollAngle,%{public}f,landscapeAngle,%{public}f,rotationRate,(%{public}f,%{public}f,%{public}f),userAccel,(%{public}f,%{public}f,%{public}f),isStationary,%{public}u", buf, 0x58u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD10 != -1)
      dispatch_once(&qword_10229FD10, &stru_102147910);
    v35 = qword_10229FD18;
    _H0 = *(_WORD *)(a2 + 4);
    __asm { FCVT            S0, H0 }
    _S0 = fabsf(_S0);
    __asm
    {
      FCVT            H0, S0
      FCVT            S0, H0; float
    }
    _H1 = *(_WORD *)(a2 + 2);
    __asm { FCVT            S1, H1 }
    _S1 = fabsf(_S1);
    __asm
    {
      FCVT            H1, S1
      FCVT            S8, H1
    }
    v44 = (float)(atan2f(_S0, _S8) * 57.296);
    _H0 = *(_WORD *)(a2 + 6);
    __asm { FCVT            S0, H0 }
    _S0 = fabsf(_S0);
    __asm
    {
      FCVT            H0, S0
      FCVT            S0, H0; float
    }
    v49 = atan2f(_S0, _S8);
    _H1 = *(_WORD *)(a2 + 8);
    _H2 = *(_WORD *)(a2 + 10);
    __asm
    {
      FCVT            D1, H1
      FCVT            D2, H2
    }
    _H3 = *(_WORD *)(a2 + 12);
    __asm { FCVT            D3, H3 }
    _H4 = *(_WORD *)(a2 + 14);
    __asm { FCVT            D4, H4 }
    _H5 = *(_WORD *)(a2 + 16);
    __asm { FCVT            D5, H5 }
    _H6 = *(_WORD *)(a2 + 18);
    __asm { FCVT            D6, H6 }
    v62 = *(unsigned __int8 *)(a2 + 1);
    v65 = 134351104;
    v66 = v44;
    v67 = 2050;
    v68 = (float)(v49 * 57.296);
    v69 = 2050;
    v70 = _D1;
    v71 = 2050;
    v72 = _D2;
    v73 = 2050;
    v74 = _D3;
    v75 = 2050;
    v76 = _D4;
    v77 = 2050;
    v78 = _D5;
    v79 = 2050;
    v80 = _D6;
    v81 = 1026;
    v82 = v62;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v35, 0, "[MagicMount][DebugLogging]rollAngle,%{public}f,landscapeAngle,%{public}f,rotationRate,(%{public}f,%{public}f,%{public}f),userAccel,(%{public}f,%{public}f,%{public}f),isStationary,%{public}u", &v65, 88);
    v64 = (uint8_t *)v63;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLSPU::visitMagicMountDebug(const CMMotionCoprocessorReply::MagicMountDebug *)", "%s\n", v63);
    if (v64 != buf)
      free(v64);
  }
}

uint64_t sub_1005D4BD8(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  double v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v16 = 0;
  v8 = sub_1001611D4(a1, *(double *)(a1 + 352));
  v4 = a2[5];
  v13 = a2[4];
  v14 = v4;
  v15 = a2[6];
  v5 = a2[1];
  v9 = *a2;
  v10 = v5;
  v6 = a2[3];
  v11 = a2[2];
  LOBYTE(v16) = *((_BYTE *)a2 + 112);
  v12 = v6;
  return sub_10014C2F4(a1, 49, (uint64_t)&v8, 128);
}

uint64_t sub_1005D4C58(uint64_t a1, __int128 *a2)
{
  return sub_1005D4BD8(a1 - 152, a2);
}

uint64_t sub_1005D4C60(uint64_t a1, uint64_t a2)
{
  double v5[2];
  char v6;

  v5[0] = *(double *)(a1 + 352);
  v5[1] = sub_1001611D4(a1, v5[0]);
  v6 = *(_BYTE *)(a2 + 1);
  return sub_10014C2F4(a1, 50, (uint64_t)v5, 224);
}

uint64_t sub_1005D4CBC(uint64_t a1, uint64_t a2)
{
  return sub_1005D4C60(a1 - 152, a2);
}

uint64_t sub_1005D4CC4(uint64_t a1, uint64_t a2)
{
  return sub_100153DEC(a1 + 13624, a2);
}

uint64_t sub_1005D4CD0(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  double v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v25 = 0;
  v11 = sub_1001611D4(a1, *(double *)(a1 + 352));
  v4 = a2[11];
  v22 = a2[10];
  v23 = v4;
  v24 = a2[12];
  v5 = a2[7];
  v18 = a2[6];
  v19 = v5;
  v6 = a2[9];
  v20 = a2[8];
  v21 = v6;
  v7 = a2[3];
  v14 = a2[2];
  v15 = v7;
  v8 = a2[5];
  v16 = a2[4];
  v17 = v8;
  v9 = a2[1];
  v12 = *a2;
  LOWORD(v25) = *((_WORD *)a2 + 104);
  v13 = v9;
  return sub_10014C2F4(a1, 51, (uint64_t)&v11, 224);
}

uint64_t sub_1005D4D80(uint64_t a1, __int128 *a2)
{
  return sub_1005D4CD0(a1 - 152, a2);
}

void sub_1005D4D88(id a1)
{
  qword_10229FC88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "AOP");
}

uint64_t sub_1005D4DB4(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(result + 32) + 8) = *(_QWORD *)(result + 40);
  return result;
}

void sub_1005D4DC4(id a1)
{
  qword_10229FD28 = (uint64_t)os_log_create("com.apple.locationd.Motion", "DeviceMotion");
}

void sub_1005D4DF0(id a1)
{
  qword_10229FD48 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

void sub_1005D4E20(id a1)
{
  qword_10229FDB8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "SensorRecorder");
}

void sub_1005D4E4C(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_1005D4E78(id a1)
{
  qword_10229FD98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Fall");
}

void sub_1005D4EA4(id a1)
{
  off_10229FD58 = os_log_create("com.apple.locationd.Motion", "Gyro");
}

void sub_1005D4ED0(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1005D4EFC(id a1)
{
  qword_10229FC68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Eclipse");
}

void sub_1005D4F28(id a1)
{
  qword_10229FD18 = (uint64_t)os_log_create("com.apple.locationd.Motion", "MagicMount");
}

void sub_1005D4F54(uint64_t a1, uint64_t *a2, void *aBlock)
{
  uint64_t v4;
  void *v5;
  NSObject *v6;
  _QWORD block[7];
  _QWORD v8[6];
  _QWORD v9[2];

  if (*(_QWORD *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    v8[2] = 0x4012000000;
    v8[3] = sub_100206CC4;
    v8[4] = nullsub_53;
    v4 = *a2;
    v8[5] = &unk_102080316;
    v9[0] = v4;
    *(_QWORD *)((char *)v9 + 5) = *(uint64_t *)((char *)a2 + 5);
    if (aBlock)
      v5 = _Block_copy(aBlock);
    else
      v5 = 0;
    v6 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1005D505C;
    block[3] = &unk_102147938;
    block[5] = v8;
    block[6] = a1;
    block[4] = v5;
    dispatch_async(v6, block);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_1005D5044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1005D505C(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 18;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 13);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

__n128 sub_1005D50C4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  result = *(__n128 *)(a2 + 64);
  v3 = *(_OWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 96);
  *(_WORD *)(a1 + 112) = *(_WORD *)(a2 + 112);
  *(_OWORD *)(a1 + 80) = v3;
  *(_OWORD *)(a1 + 96) = v4;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

void sub_1005D50EC(uint64_t a1, _OWORD *a2, void *aBlock)
{
  void *v4;
  NSObject *v5;
  _QWORD block[7];
  _QWORD v7[6];
  _OWORD v8[2];

  if (*(_QWORD *)(a1 + 8))
  {
    v7[0] = 0;
    v7[1] = v7;
    v7[3] = sub_1005D51F8;
    v7[4] = nullsub_218;
    v7[2] = 0x5012000000;
    v7[5] = &unk_102080316;
    v8[0] = *a2;
    *(_OWORD *)((char *)v8 + 13) = *(_OWORD *)((char *)a2 + 13);
    if (aBlock)
      v4 = _Block_copy(aBlock);
    else
      v4 = 0;
    v5 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1005D5210;
    block[3] = &unk_102147938;
    block[5] = v7;
    block[6] = a1;
    block[4] = v4;
    dispatch_async(v5, block);
    _Block_object_dispose(v7, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_1005D51E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 sub_1005D51F8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 48);
  *(_OWORD *)(a1 + 61) = *(_OWORD *)(a2 + 61);
  *(__n128 *)(a1 + 48) = result;
  return result;
}

void sub_1005D5210(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 37;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 29);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

void sub_1005D5278(uint64_t a1, __int128 *a2, void *aBlock)
{
  __int128 v4;
  __int128 v5;
  void *v6;
  NSObject *v7;
  _QWORD v8[7];
  _QWORD v9[6];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD v14[2];

  if (*(_QWORD *)(a1 + 8))
  {
    v9[0] = 0;
    v9[1] = v9;
    v9[2] = 0x9012000000;
    v9[3] = sub_1005D53E0;
    v9[4] = nullsub_219;
    v9[5] = &unk_102080316;
    v4 = a2[3];
    v12 = a2[2];
    v13 = v4;
    v14[0] = a2[4];
    *(_OWORD *)((char *)v14 + 13) = *(__int128 *)((char *)a2 + 77);
    v5 = a2[1];
    v10 = *a2;
    v11 = v5;
    if (aBlock)
      v6 = _Block_copy(aBlock);
    else
      v6 = 0;
    v7 = *(NSObject **)a1;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1005D5408;
    v8[3] = &unk_102147938;
    v8[5] = v9;
    v8[6] = a1;
    v8[4] = v6;
    dispatch_async(v7, v8);
    _Block_object_dispose(v9, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_1005D53C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 sub_1005D53E0(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v2;
  result = *(__n128 *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 96);
  v5 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 125) = *(_OWORD *)(a2 + 125);
  *(_OWORD *)(a1 + 96) = v4;
  *(_OWORD *)(a1 + 112) = v5;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

void sub_1005D5408(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 32;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 93);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

__n128 sub_1005D5470(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *(_OWORD *)(a2 + 48);
  v3 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v3;
  *(_OWORD *)(a1 + 48) = v2;
  result = *(__n128 *)(a2 + 96);
  v5 = *(_OWORD *)(a2 + 112);
  v6 = *(_OWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v5;
  *(_OWORD *)(a1 + 128) = v6;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

void sub_1005D54A0(uint64_t a1, int *a2, void *aBlock)
{
  void *v4;
  NSObject *v5;
  _QWORD v6[7];
  _QWORD v7[6];
  int v8;

  if (*(_QWORD *)(a1 + 8))
  {
    v7[0] = 0;
    v7[1] = v7;
    v7[2] = 0x3812000000;
    v7[3] = sub_1005D55A4;
    v7[4] = nullsub_221;
    v7[5] = &unk_102080316;
    v8 = *a2;
    if (aBlock)
      v4 = _Block_copy(aBlock);
    else
      v4 = 0;
    v5 = *(NSObject **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1005D55B4;
    v6[3] = &unk_102147938;
    v6[5] = v7;
    v6[6] = a1;
    v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_1005D558C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1005D55A4(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 48);
  return result;
}

void sub_1005D55B4(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 46;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 4);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

void sub_1005D561C(uint64_t a1, _DWORD *a2, void *aBlock)
{
  void *v4;
  NSObject *v5;
  _QWORD v6[7];
  _QWORD v7[6];
  _DWORD v8[2];

  if (*(_QWORD *)(a1 + 8))
  {
    v7[0] = 0;
    v7[1] = v7;
    v7[3] = sub_1005D5728;
    v7[4] = nullsub_222;
    v7[2] = 0x3812000000;
    v7[5] = &unk_102080316;
    v8[0] = *a2;
    *(_DWORD *)((char *)v8 + 3) = *(_DWORD *)((char *)a2 + 3);
    if (aBlock)
      v4 = _Block_copy(aBlock);
    else
      v4 = 0;
    v5 = *(NSObject **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1005D5740;
    v6[3] = &unk_102147938;
    v6[5] = v7;
    v6[6] = a1;
    v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_1005D5710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1005D5728(uint64_t result, uint64_t a2)
{
  int v2;

  v2 = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(result + 51) = *(_DWORD *)(a2 + 51);
  *(_DWORD *)(result + 48) = v2;
  return result;
}

void sub_1005D5740(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 71;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 7);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

void sub_1005D57A8(uint64_t a1, __int16 *a2, void *aBlock)
{
  void *v4;
  NSObject *v5;
  _QWORD v6[7];
  _QWORD v7[6];
  __int16 v8;

  if (*(_QWORD *)(a1 + 8))
  {
    v7[0] = 0;
    v7[1] = v7;
    v7[2] = 0x3812000000;
    v7[3] = sub_1005D58AC;
    v7[4] = nullsub_223;
    v7[5] = &unk_102080316;
    v8 = *a2;
    if (aBlock)
      v4 = _Block_copy(aBlock);
    else
      v4 = 0;
    v5 = *(NSObject **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1005D58BC;
    v6[3] = &unk_102147938;
    v6[5] = v7;
    v6[6] = a1;
    v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_1005D5894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1005D58AC(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 48) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_1005D58BC(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 72;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 2);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

void sub_1005D5924(uint64_t a1, _DWORD *a2, void *aBlock)
{
  void *v4;
  NSObject *v5;
  _QWORD v6[7];
  _QWORD v7[6];
  _DWORD v8[2];

  if (*(_QWORD *)(a1 + 8))
  {
    v7[0] = 0;
    v7[1] = v7;
    v7[3] = sub_1005D5A30;
    v7[4] = nullsub_224;
    v7[2] = 0x3812000000;
    v7[5] = &unk_102080316;
    v8[0] = *a2;
    *(_DWORD *)((char *)v8 + 3) = *(_DWORD *)((char *)a2 + 3);
    if (aBlock)
      v4 = _Block_copy(aBlock);
    else
      v4 = 0;
    v5 = *(NSObject **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1005D5A48;
    v6[3] = &unk_102147938;
    v6[5] = v7;
    v6[6] = a1;
    v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_1005D5A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1005D5A30(uint64_t result, uint64_t a2)
{
  int v2;

  v2 = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(result + 51) = *(_DWORD *)(a2 + 51);
  *(_DWORD *)(result + 48) = v2;
  return result;
}

void sub_1005D5A48(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 74;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 7);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

void sub_1005D5AB0(uint64_t a1, uint64_t *a2, void *aBlock)
{
  uint64_t v4;
  void *v5;
  NSObject *v6;
  _QWORD block[7];
  _QWORD v8[7];
  __int16 v9;

  if (*(_QWORD *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    v8[2] = 0x4012000000;
    v8[3] = sub_1005D5BB8;
    v8[4] = nullsub_225;
    v4 = *a2;
    v8[5] = &unk_102080316;
    v8[6] = v4;
    v9 = *((_WORD *)a2 + 4);
    if (aBlock)
      v5 = _Block_copy(aBlock);
    else
      v5 = 0;
    v6 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1005D5BD0;
    block[3] = &unk_102147938;
    block[5] = v8;
    block[6] = a1;
    block[4] = v5;
    dispatch_async(v6, block);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_1005D5BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1005D5BB8(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_WORD *)(result + 56) = *(_WORD *)(a2 + 56);
  *(_QWORD *)(result + 48) = v2;
  return result;
}

void sub_1005D5BD0(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 75;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 10);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

void sub_1005D5C38(uint64_t a1, int *a2, void *aBlock)
{
  void *v4;
  NSObject *v5;
  _QWORD v6[7];
  _QWORD v7[6];
  int v8;
  __int16 v9;

  if (*(_QWORD *)(a1 + 8))
  {
    v7[0] = 0;
    v7[1] = v7;
    v7[3] = sub_1005D5D44;
    v7[4] = nullsub_226;
    v7[2] = 0x3812000000;
    v7[5] = &unk_102080316;
    v8 = *a2;
    v9 = *((_WORD *)a2 + 2);
    if (aBlock)
      v4 = _Block_copy(aBlock);
    else
      v4 = 0;
    v5 = *(NSObject **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1005D5D5C;
    v6[3] = &unk_102147938;
    v6[5] = v7;
    v6[6] = a1;
    v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_1005D5D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1005D5D44(uint64_t result, uint64_t a2)
{
  int v2;

  v2 = *(_DWORD *)(a2 + 48);
  *(_WORD *)(result + 52) = *(_WORD *)(a2 + 52);
  *(_DWORD *)(result + 48) = v2;
  return result;
}

void sub_1005D5D5C(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 81;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 6);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

uint64_t sub_1005D5DC4()
{
  sub_1015A2E04(qword_102301DA8, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102301DA8, (void *)&_mh_execute_header);
}

void sub_1005D5F8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _Unwind_Resume(exception_object);
}

void sub_1005D63E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1005D6420(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(a2 + 8);
    v8 = v3;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
    CLConnection::sendMessage(v2);
    if (v8)
    {
      v6 = (unint64_t *)&v8->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void sub_1005D64A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1005D686C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1005D6CC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(exception_object);
}

id sub_1005D6D14(uint64_t a1)
{
  id result;
  NSObject *v3;
  id v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  id v9;

  result = objc_msgSend(*(id *)(a1 + 40), "poweredOn");
  if ((_DWORD)result && *(_BYTE *)(a1 + 57))
  {
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021479A8);
    v3 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
    {
      v4 = objc_msgSend(*(id *)(a1 + 64), "clientname");
      v5[0] = 68289282;
      v5[1] = 0;
      v6 = 2082;
      v7 = "";
      v8 = 2114;
      v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian #client got scanner powered on status, starting BTFindingScan\", \"client\":%{public, location:escape_only}@}", (uint8_t *)v5, 0x1Cu);
    }
    result = objc_msgSend(*(id *)(a1 + 40), "startBTFindingScan");
    *(_BYTE *)(a1 + 57) = 0;
  }
  return result;
}

void sub_1005D6E88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005D6F0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005D6F90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005D7014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005D7098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005D711C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005D7270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void sub_1005D7314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005D740C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005D750C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005D765C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005D7780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005D7860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005D79B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005D7AEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005D7C20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005D7D54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005D7E68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005D7EF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005D7F78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005D7FFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005D8080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005D8104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005D8248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005D8394(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005D84E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005D85F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005D8708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005D8878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005D897C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005D8B10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005D8C24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005D8D18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005D8E2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005D8F40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005D907C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005D91B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005D9304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005D9450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005D958C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005D96A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005D972C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005D97B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005D98F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005D99FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005D9B34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005D9C48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005D9D5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005D9E70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005D9F84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005DA0C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005DA1FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005DA338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005DA474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005DA5B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005DA6EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005DA838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005DA974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005DAAB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005DABEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005DAD28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005DAE90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005DAFB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005DB0D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005DB1EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005DB32C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005DB468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005DB5A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005DB6F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005DB83C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005DB978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005DBAC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005DBC00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005DBD4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005DBE98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005DBFD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005DC0A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005DC0EC(uint64_t a1, uint64_t a2, void *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  _QWORD v12[5];
  _QWORD v13[5];
  _QWORD v14[5];

  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)a1 = off_102147968;
  *(_OWORD *)(a1 + 24) = 0u;
  v5 = (_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 64) = 0;
  v6 = (_QWORD *)(a1 + 64);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_WORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1005DC294;
  v14[3] = &unk_10213D510;
  v14[4] = a1;
  CLConnection::setDefaultMessageHandler(a2, v14);
  v7 = *(_QWORD *)(a1 + 8);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1005DC334;
  v13[3] = &unk_10212ECA0;
  v13[4] = a1;
  CLConnection::setInterruptionHandler(v7, v13);
  v8 = *(_QWORD *)(a1 + 8);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1005DC47C;
  v12[3] = &unk_10212ECA0;
  v12[4] = a1;
  CLConnection::setDisconnectionHandler(v8, v12);
  *v6 = -[CLDurianClientAdapter initWithClient:]([CLDurianClientAdapter alloc], "initWithClient:", a1);
  v9 = objc_msgSend(objc_msgSend(a3, "vendor"), "proxyForService:", CFSTR("CLDurianService"));
  *v5 = v9;
  objc_msgSend(v9, "registerDelegate:inSilo:", *v6, objc_msgSend(a3, "silo"));
  v10 = objc_msgSend(objc_msgSend(a3, "vendor"), "proxyForService:", CFSTR("CLTrackingAvoidanceService"));
  *(_QWORD *)(a1 + 72) = v10;
  objc_msgSend(v10, "registerDelegate:inSilo:", *(_QWORD *)(a1 + 64), objc_msgSend(a3, "silo"));
  return a1;
}

void sub_1005DC280(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_10008ABA0(v1);
  _Unwind_Resume(a1);
}

void sub_1005DC294(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (std::__shared_weak_count *)a2[1];
  v9 = *a2;
  v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 16))(v2, &v9);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1005DC320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1005DC334(uint64_t a1)
{
  sub_1005DC33C(*(_QWORD *)(a1 + 32));
}

void sub_1005DC33C(uint64_t a1)
{
  NSObject *v2;
  id v3;
  uint8_t buf[4];
  int v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  id v9;

  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021479A8);
  v2 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
  {
    v3 = objc_msgSend(*(id *)(a1 + 64), "clientname");
    *(_DWORD *)buf = 68289282;
    v5 = 0;
    v6 = 2082;
    v7 = "";
    v8 = 2114;
    v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian #client teardown\", \"name\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  objc_msgSend(*(id *)(a1 + 24), "teardownClient:", CLISP_ME_TOKEN);
  if (*(_BYTE *)(a1 + 56))
    sub_1005DF4A8(a1);
  if (*(_QWORD *)(a1 + 32))
    sub_1005E0840(a1);
}

void sub_1005DC460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1005DC47C(uint64_t a1)
{
  sub_1005DC33C(*(_QWORD *)(a1 + 32));
}

_QWORD *sub_1005DC488(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_102147968;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    objc_msgSend(v2, "stopMonitoringAvengerAdvertisementsForClient:", CLISP_ME_TOKEN);

    *(_QWORD *)(a1 + 32) = 0;
  }

  *(_QWORD *)(a1 + 72) = 0;
  return sub_10008ABA0((_QWORD *)a1);
}

void sub_1005DC504(uint64_t a1)
{
  sub_1005DC488(a1);
  operator delete();
}

id sub_1005DC528(uint64_t a1, CLConnectionMessage **a2)
{
  NSSet *v4;
  id v5;

  v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSUUID, a2), 0);
  v5 = objc_msgSend((id)CLConnectionMessage::getDictionaryOfClasses(*a2, v4), "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
  return _objc_msgSend(*(id *)(a1 + 24), "connectToTag:forClient:", v5, CLISP_ME_TOKEN);
}

id sub_1005DC5AC(uint64_t a1, CLConnectionMessage **a2)
{
  NSSet *v4;
  id v5;

  v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSUUID, a2), 0);
  v5 = objc_msgSend((id)CLConnectionMessage::getDictionaryOfClasses(*a2, v4), "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
  return _objc_msgSend(*(id *)(a1 + 24), "disconnectFromTag:forClient:", v5, CLISP_ME_TOKEN);
}

id sub_1005DC630(uint64_t a1, CLConnectionMessage **a2)
{
  NSSet *v4;
  id v5;

  v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSUUID, a2), 0);
  v5 = objc_msgSend((id)CLConnectionMessage::getDictionaryOfClasses(*a2, v4), "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
  return _objc_msgSend(*(id *)(a1 + 24), "fetchConnectionStateForTag:forClient:", v5, CLISP_ME_TOKEN);
}

id sub_1005DC6B4(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4;
  uint64_t v5;
  NSSet *v6;
  void *DictionaryOfClasses;
  id v8;
  id v9;

  v4 = objc_opt_class(NSUUID, a2);
  v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, objc_opt_class(CLFindMyAccessorySoundSequence, v5), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v6);
  v8 = objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
  v9 = objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLDurianSoundSequence"));
  return _objc_msgSend(*(id *)(a1 + 24), "playSoundSequence:onTag:forClient:", v9, v8, CLISP_ME_TOKEN);
}

id sub_1005DC768(uint64_t a1, CLConnectionMessage **a2)
{
  NSSet *v4;
  id v5;

  v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSUUID, a2), 0);
  v5 = objc_msgSend((id)CLConnectionMessage::getDictionaryOfClasses(*a2, v4), "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
  return _objc_msgSend(*(id *)(a1 + 24), "stopPlayingSoundOnTag:forClient:", v5, CLISP_ME_TOKEN);
}

id sub_1005DC7EC(uint64_t a1, CLConnectionMessage **a2)
{
  NSSet *v4;
  void *DictionaryOfClasses;
  id v6;
  id v7;

  v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSUUID, a2), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v4);
  v6 = objc_msgSend(objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLDurianKeyRollInterval")), "intValue");
  v7 = objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
  return _objc_msgSend(*(id *)(a1 + 24), "setKeyRollInterval:onTag:forClient:", v6, v7, CLISP_ME_TOKEN);
}

id sub_1005DC894(uint64_t a1, CLConnectionMessage **a2)
{
  NSSet *v4;
  id v5;

  v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSUUID, a2), 0);
  v5 = objc_msgSend((id)CLConnectionMessage::getDictionaryOfClasses(*a2, v4), "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
  return _objc_msgSend(*(id *)(a1 + 24), "fetchBatteryStateFromTag:forClient:", v5, CLISP_ME_TOKEN);
}

id sub_1005DC918(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4;
  uint64_t v5;
  NSSet *v6;
  id v7;

  v4 = objc_opt_class(NSUUID, a2);
  v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, objc_opt_class(NSData, v5), 0);
  v7 = objc_msgSend((id)CLConnectionMessage::getDictionaryOfClasses(*a2, v6), "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
  return _objc_msgSend(*(id *)(a1 + 24), "startEventCounterOnTag:forClient:", v7, CLISP_ME_TOKEN);
}

id sub_1005DC9AC(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4;
  uint64_t v5;
  NSSet *v6;
  id v7;

  v4 = objc_opt_class(NSUUID, a2);
  v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, objc_opt_class(NSData, v5), 0);
  v7 = objc_msgSend((id)CLConnectionMessage::getDictionaryOfClasses(*a2, v6), "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
  return _objc_msgSend(*(id *)(a1 + 24), "stopEventCounterOnTag:forClient:", v7, CLISP_ME_TOKEN);
}

id sub_1005DCA40(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4;
  uint64_t v5;
  NSSet *v6;
  void *DictionaryOfClasses;
  id v8;
  uint64_t v9;

  v4 = objc_opt_class(NSUUID, a2);
  v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, objc_opt_class(NSNumber, v5), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v6);
  v8 = objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
  v9 = objc_msgSend(objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLDurianBatteryStatus")), "unsignedIntValue");
  return _objc_msgSend(*(id *)(a1 + 24), "setBatteryStatus:onTag:forClient:", v9, v8, CLISP_ME_TOKEN);
}

id sub_1005DCAF8(uint64_t a1, CLConnectionMessage **a2)
{
  NSSet *v4;
  id v5;

  v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSUUID, a2), 0);
  v5 = objc_msgSend((id)CLConnectionMessage::getDictionaryOfClasses(*a2, v4), "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
  return _objc_msgSend(*(id *)(a1 + 24), "getMultiStatusForTag:forClient:", v5, CLISP_ME_TOKEN);
}

id sub_1005DCB7C(uint64_t a1, CLConnectionMessage **a2)
{
  NSSet *v4;
  id v5;

  v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSUUID, a2), 0);
  v5 = objc_msgSend((id)CLConnectionMessage::getDictionaryOfClasses(*a2, v4), "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
  return _objc_msgSend(*(id *)(a1 + 24), "getGroupStatusForTag:forClient:", v5, CLISP_ME_TOKEN);
}

id sub_1005DCC00(uint64_t a1, CLConnectionMessage **a2)
{
  NSSet *v4;
  void *DictionaryOfClasses;
  id v6;
  id v7;

  v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSUUID, a2), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v4);
  v6 = objc_msgSend(objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLDurianLogType")), "unsignedIntegerValue");
  v7 = objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
  return _objc_msgSend(*(id *)(a1 + 24), "dumpLogsOfType:forTag:forClient:", v6, v7, CLISP_ME_TOKEN);
}

id sub_1005DCCA8(uint64_t a1, CLConnectionMessage **a2)
{
  NSSet *v4;
  void *DictionaryOfClasses;
  id v6;
  id v7;

  v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSUUID, a2), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v4);
  v6 = objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
  v7 = objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLDurianRangingMacAddress"));
  return _objc_msgSend(*(id *)(a1 + 24), "initRangingWithMacAddress:onTag:forClient:", v7, v6, CLISP_ME_TOKEN);
}

id sub_1005DCD4C(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4;
  uint64_t v5;
  NSSet *v6;

  v4 = objc_opt_class(NSUUID, a2);
  v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, objc_opt_class(NSData, v5), 0);
  return objc_msgSend(*(id *)(a1 + 24), "deinitRangingOnTag:forClient:", objc_msgSend((id)CLConnectionMessage::getDictionaryOfClasses(*a2, v6), "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier")), CLISP_ME_TOKEN);
}

id sub_1005DCDE0(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4;
  uint64_t v5;
  NSSet *v6;
  void *DictionaryOfClasses;
  id v8;
  id v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int16 v14;

  v4 = objc_opt_class(NSUUID, a2);
  v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, objc_opt_class(NSData, v5), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v6);
  v8 = objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
  v9 = objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLDurianRangingMacAddress"));
  v10 = objc_msgSend(objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLDurianRangingCountryCode")), "intValue");
  v11 = objc_msgSend(objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLDurianRangingUwbChannel")), "intValue");
  v12 = objc_msgSend(objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLDurianRangingAcqPreamble")), "intValue");
  v13 = objc_msgSend(objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLDurianRangingTrackingPreamble")), "intValue");
  v14 = (unsigned __int16)objc_msgSend(objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLDurianRangingInterval")), "intValue");
  return objc_msgSend(*(id *)(a1 + 24), "configureRangingWithMacAddress:countryCode:uwbChannel:acqPreamble:trackingPreamble:interval:onTag:forClient:", v9, v10, v11, v12, v13, v14, v8, CLISP_ME_TOKEN);
}

id sub_1005DCF4C(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4;
  uint64_t v5;
  NSSet *v6;
  id v7;

  v4 = objc_opt_class(NSUUID, a2);
  v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, objc_opt_class(NSData, v5), 0);
  v7 = objc_msgSend((id)CLConnectionMessage::getDictionaryOfClasses(*a2, v6), "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
  return _objc_msgSend(*(id *)(a1 + 24), "prepareRangingOnTag:forClient:", v7, CLISP_ME_TOKEN);
}

id sub_1005DCFE0(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4;
  uint64_t v5;
  NSSet *v6;
  void *DictionaryOfClasses;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;

  v4 = objc_opt_class(NSUUID, a2);
  v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, objc_opt_class(NSData, v5), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v6);
  v8 = objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
  v9 = objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLDurianRangingTargetEventCounter"));
  v10 = *(void **)(a1 + 24);
  v11 = (unsigned __int16)objc_msgSend(v9, "unsignedIntValue");
  return _objc_msgSend(v10, "startRangingWithTargetEventCounter:onTag:forClient:", v11, v8, CLISP_ME_TOKEN);
}

id sub_1005DD09C(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4;
  uint64_t v5;
  NSSet *v6;
  id v7;

  v4 = objc_opt_class(NSUUID, a2);
  v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, objc_opt_class(NSData, v5), 0);
  v7 = objc_msgSend((id)CLConnectionMessage::getDictionaryOfClasses(*a2, v6), "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
  return _objc_msgSend(*(id *)(a1 + 24), "stopRangingOnTag:forClient:", v7, CLISP_ME_TOKEN);
}

id sub_1005DD130(uint64_t a1, CLConnectionMessage **a2)
{
  NSSet *v4;
  id v5;

  v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSUUID, a2), 0);
  v5 = objc_msgSend((id)CLConnectionMessage::getDictionaryOfClasses(*a2, v4), "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
  return _objc_msgSend(*(id *)(a1 + 24), "induceCrashOnTag:forClient:", v5, CLISP_ME_TOKEN);
}

id sub_1005DD1B4(uint64_t a1, CLConnectionMessage **a2)
{
  NSSet *v4;
  void *DictionaryOfClasses;
  id v6;
  void *v7;
  id v8;

  v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSUUID, a2), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v4);
  v6 = objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
  v7 = *(void **)(a1 + 24);
  if (v6)
    return _objc_msgSend(*(id *)(a1 + 24), "unpairFromTag:forClient:", v6, CLISP_ME_TOKEN);
  v8 = objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLDurianMacAddress"));
  return _objc_msgSend(v7, "unpairFromTagWithAddress:forClient:", v8, CLISP_ME_TOKEN);
}

id sub_1005DD280(uint64_t a1, CLConnectionMessage **a2)
{
  NSSet *v4;
  void *DictionaryOfClasses;
  id v6;
  id v7;

  v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSUUID, a2), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v4);
  v6 = objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
  v7 = objc_msgSend(objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLDurianTagType")), "unsignedCharValue");
  return _objc_msgSend(*(id *)(a1 + 24), "setTagType:onTag:forClient:", v7, v6, CLISP_ME_TOKEN);
}

id sub_1005DD328(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4;
  uint64_t v5;
  NSSet *v6;
  void *DictionaryOfClasses;
  id v8;
  id v9;

  v4 = objc_opt_class(NSUUID, a2);
  v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, objc_opt_class(NSString, v5), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v6);
  v8 = objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
  v9 = objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLDurianObfuscatedIdentifier"));
  return _objc_msgSend(*(id *)(a1 + 24), "setObfuscatedIdentifier:onTag:forClient:", v9, v8, CLISP_ME_TOKEN);
}

id sub_1005DD3DC(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4;
  uint64_t v5;
  NSSet *v6;
  void *DictionaryOfClasses;
  id v8;
  id v9;

  v4 = objc_opt_class(NSUUID, a2);
  v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, objc_opt_class(NSNumber, v5), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v6);
  v8 = objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
  v9 = objc_msgSend(objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLDurianNearOwnerTimeout")), "unsignedShortValue");
  return _objc_msgSend(*(id *)(a1 + 24), "setNearOwnerTimeout:onTag:forClient:", v9, v8, CLISP_ME_TOKEN);
}

id sub_1005DD494(uint64_t a1, CLConnectionMessage **a2)
{
  NSSet *v4;
  id v5;

  v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSUUID, a2), 0);
  v5 = objc_msgSend((id)CLConnectionMessage::getDictionaryOfClasses(*a2, v4), "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
  return _objc_msgSend(*(id *)(a1 + 24), "getPersonalizationInfoForDevice:forClient:", v5, CLISP_ME_TOKEN);
}

id sub_1005DD518(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4;
  uint64_t v5;
  NSSet *v6;
  void *DictionaryOfClasses;
  id v8;
  id v9;

  v4 = objc_opt_class(NSUUID, a2);
  v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, objc_opt_class(NSURL, v5), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v6);
  v8 = objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
  v9 = objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLDurianFirmwareAssetURL"));
  return _objc_msgSend(*(id *)(a1 + 24), "updateFirmwareForDevice:withAssetURL:forClient:", v8, v9, CLISP_ME_TOKEN);
}

id sub_1005DD5CC(uint64_t a1, CLConnectionMessage **a2)
{
  NSSet *v4;
  id v5;

  v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSUUID, a2), 0);
  v5 = objc_msgSend((id)CLConnectionMessage::getDictionaryOfClasses(*a2, v4), "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
  return _objc_msgSend(*(id *)(a1 + 24), "abortFirmwareUpdateForDevice:forClient:", v5, CLISP_ME_TOKEN);
}

id sub_1005DD650(uint64_t a1, CLConnectionMessage **a2)
{
  NSSet *v4;
  id v5;

  v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSUUID, a2), 0);
  v5 = objc_msgSend((id)CLConnectionMessage::getDictionaryOfClasses(*a2, v4), "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
  return _objc_msgSend(*(id *)(a1 + 24), "fetchFirmwareVersionFromTag:forClient:includeCrashLogs:", v5, CLISP_ME_TOKEN, 0);
}

id sub_1005DD6D8(uint64_t a1, CLConnectionMessage **a2)
{
  NSSet *v4;
  void *DictionaryOfClasses;
  id v6;
  id v7;

  v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSUUID, a2), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v4);
  v6 = objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
  v7 = objc_msgSend(objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLDurianUserStatsPersistence")), "BOOLValue");
  return _objc_msgSend(*(id *)(a1 + 24), "fetchUserStatsWithPersistence:fromTag:forClient:", v7, v6, CLISP_ME_TOKEN);
}

id sub_1005DD780(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4;
  uint64_t v5;
  NSSet *v6;
  void *DictionaryOfClasses;
  id v8;
  id v9;

  v4 = objc_opt_class(NSUUID, a2);
  v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, objc_opt_class(CLFindMyAccessorySoundSequence, v5), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v6);
  v8 = objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
  v9 = objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLDurianSoundSequence"));
  if (!v9)
    v9 = +[CLFindMyAccessorySoundSequence defaultSequence](CLFindMyAccessorySoundSequence, "defaultSequence");
  return _objc_msgSend(*(id *)(a1 + 24), "playUnauthorizedSoundSequence:onTag:forClient:", v9, v8, CLISP_ME_TOKEN);
}

id sub_1005DD84C(uint64_t a1, CLConnectionMessage **a2)
{
  NSSet *v4;
  id v5;

  v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSUUID, a2), 0);
  v5 = objc_msgSend((id)CLConnectionMessage::getDictionaryOfClasses(*a2, v4), "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
  return _objc_msgSend(*(id *)(a1 + 24), "stopPlayingUnauthorizedSoundOnTag:forClient:", v5, CLISP_ME_TOKEN);
}

id sub_1005DD8D0(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4;
  uint64_t v5;
  NSSet *v6;
  void *DictionaryOfClasses;
  id v8;
  id v9;

  v4 = objc_opt_class(NSUUID, a2);
  v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, objc_opt_class(CLFindMyAccessoryWildConfiguration, v5), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v6);
  v8 = objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
  v9 = objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLDurianWildConfig"));
  return _objc_msgSend(*(id *)(a1 + 24), "setWildModeConfiguration:onTag:forClient:", v9, v8, CLISP_ME_TOKEN);
}

id sub_1005DD984(uint64_t a1, CLConnectionMessage **a2)
{
  NSSet *v4;
  id v5;

  v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSUUID, a2), 0);
  v5 = objc_msgSend((id)CLConnectionMessage::getDictionaryOfClasses(*a2, v4), "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
  return _objc_msgSend(*(id *)(a1 + 24), "rollWildKeyOnTag:forClient:", v5, CLISP_ME_TOKEN);
}

id sub_1005DDA08(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4;
  uint64_t v5;
  NSSet *v6;
  void *DictionaryOfClasses;
  id v8;
  id v9;

  v4 = objc_opt_class(NSUUID, a2);
  v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, objc_opt_class(CLFindMyAccessoryAccelerometerSlopeModeConfiguration, v5), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v6);
  v8 = objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
  v9 = objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLDurianAccelerometerSlopeModeConfigurationKey"));
  return _objc_msgSend(*(id *)(a1 + 24), "setAccelerometerSlopeModeConfiguration:onTag:forClient:", v9, v8, CLISP_ME_TOKEN);
}

id sub_1005DDABC(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4;
  uint64_t v5;
  NSSet *v6;
  void *DictionaryOfClasses;
  id v8;
  id v9;

  v4 = objc_opt_class(NSUUID, a2);
  v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, objc_opt_class(CLFindMyAccessoryAccelerometerOrientationModeConfiguration, v5), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v6);
  v8 = objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
  v9 = objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLDurianAccelerometerOrientationModeConfigurationKey"));
  return _objc_msgSend(*(id *)(a1 + 24), "setAccelerometerOrientationModeConfiguration:onTag:forClient:", v9, v8, CLISP_ME_TOKEN);
}

id sub_1005DDB70(uint64_t a1, CLConnectionMessage **a2)
{
  NSSet *v4;
  id v5;

  v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSUUID, a2), 0);
  v5 = objc_msgSend((id)CLConnectionMessage::getDictionaryOfClasses(*a2, v4), "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
  return _objc_msgSend(*(id *)(a1 + 24), "fetchAccelerometerSlopeModeConfigurationOnTag:forClient:", v5, CLISP_ME_TOKEN);
}

id sub_1005DDBF4(uint64_t a1, CLConnectionMessage **a2)
{
  NSSet *v4;
  id v5;

  v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSUUID, a2), 0);
  v5 = objc_msgSend((id)CLConnectionMessage::getDictionaryOfClasses(*a2, v4), "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
  return _objc_msgSend(*(id *)(a1 + 24), "fetchAccelerometerOrientationModeConfigurationOnTag:forClient:", v5, CLISP_ME_TOKEN);
}

id sub_1005DDC78(uint64_t a1, CLConnectionMessage **a2)
{
  NSSet *v4;
  id v5;

  v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSUUID, a2), 0);
  v5 = objc_msgSend((id)CLConnectionMessage::getDictionaryOfClasses(*a2, v4), "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
  return _objc_msgSend(*(id *)(a1 + 24), "fetchAccelerometerModeOnTag:forClient:", v5, CLISP_ME_TOKEN);
}

id sub_1005DDCFC(uint64_t a1, CLConnectionMessage **a2)
{
  NSSet *v4;
  void *DictionaryOfClasses;
  id v6;
  id v7;

  v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSUUID, a2), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v4);
  v6 = objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
  v7 = objc_msgSend(objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLDurianSetUnauthorizedPlaySoundRateLimitKey")), "BOOLValue");
  return _objc_msgSend(*(id *)(a1 + 24), "setUnauthorizedPlaySoundRateLimit:onTag:forClient:", v7, v6, CLISP_ME_TOKEN);
}

void sub_1005DDDA4(CLAvengerScannerClient *a1)
{
  dispatch_time_t v2;
  NSObject *v3;
  dispatch_time_t v4;
  NSObject *v5;
  _QWORD v6[5];
  _QWORD block[5];

  sub_1005E0980(a1);
  if (_os_feature_enabled_impl("BluetoothFeatures", "SentinelNewLocationFeatures"))
  {
    v2 = dispatch_time(0, 5000000000);
    v3 = objc_msgSend(-[CLAvengerScannerClientDelegateProtocol silo](a1->_delegate, "silo"), "queue");
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1005E0BF8;
    block[3] = &unk_10212ECA0;
    block[4] = a1;
    dispatch_after(v2, v3, block);
  }
  else
  {
    -[CBCentralManager performTemporaryHawkeyeLowEnergyScan:](a1->_centralManager, "performTemporaryHawkeyeLowEnergyScan:", CLISP_ME_TOKEN);
  }
  v4 = dispatch_time(0, 125000000000);
  v5 = objc_msgSend(-[CLAvengerScannerClientDelegateProtocol silo](a1->_delegate, "silo"), "queue");
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1005E0C04;
  v6[3] = &unk_10212ECA0;
  v6[4] = a1;
  dispatch_after(v4, v5, v6);
}

void sub_1005DDEC0(CLAvengerScannerClient *a1)
{
  dispatch_time_t v2;
  NSObject *v3;
  dispatch_time_t v4;
  NSObject *v5;
  _QWORD v6[5];
  _QWORD block[5];

  sub_1005E0980(a1);
  if (_os_feature_enabled_impl("BluetoothFeatures", "SentinelNewLocationFeatures"))
  {
    v2 = dispatch_time(0, 5000000000);
    v3 = objc_msgSend(-[CLAvengerScannerClientDelegateProtocol silo](a1->_delegate, "silo"), "queue");
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1005E0C0C;
    block[3] = &unk_10212ECA0;
    block[4] = a1;
    dispatch_after(v2, v3, block);
  }
  else
  {
    -[CBCentralManager performTemporaryLongAggressiveScan:](a1->_centralManager, "performTemporaryLongAggressiveScan:", CLISP_ME_TOKEN);
  }
  v4 = dispatch_time(0, 125000000000);
  v5 = objc_msgSend(-[CLAvengerScannerClientDelegateProtocol silo](a1->_delegate, "silo"), "queue");
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1005E0C18;
  v6[3] = &unk_10212ECA0;
  v6[4] = a1;
  dispatch_after(v4, v5, v6);
}

void sub_1005DDFDC(uint64_t a1)
{
  void *v2;
  void *v3;
  NSObject *v4;
  id v5;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  id v10;

  if (_os_feature_enabled_impl("BluetoothFeatures", "SentinelNewLocationFeatures"))
  {
    v2 = *(void **)(a1 + 40);
    if (v2)
    {
      objc_msgSend(v2, "stopTemporaryLongAggressiveScan");
      return;
    }
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021479A8);
    v4 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
    {
LABEL_13:
      v5 = objc_msgSend(*(id *)(a1 + 64), "clientname");
      v6[0] = 68289282;
      v6[1] = 0;
      v7 = 2082;
      v8 = "";
      v9 = 2114;
      v10 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian #client no avenger scanner to stop\", \"name\":%{public, location:escape_only}@}", (uint8_t *)v6, 0x1Cu);
    }
  }
  else
  {
    v3 = *(void **)(a1 + 32);
    if (v3)
    {
      objc_msgSend(v3, "terminateTemporaryLongAggressiveScan:", CLISP_ME_TOKEN);
      return;
    }
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021479A8);
    v4 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
      goto LABEL_13;
  }
}

id sub_1005DE1D8(uint64_t a1, CLConnectionMessage **a2)
{
  NSSet *v4;
  void *DictionaryOfClasses;
  id v6;
  id v7;

  v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSUUID, a2), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v4);
  v6 = objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
  v7 = objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLHawkeyeFetchTxPowerOwnerKey"));
  return _objc_msgSend(*(id *)(a1 + 24), "fetchTxPowerForDevice:forClient:asOwner:", v6, CLISP_ME_TOKEN, objc_msgSend(v7, "BOOLValue"));
}

id sub_1005DE288(uint64_t a1, CLConnectionMessage **a2)
{
  NSSet *v4;
  void *DictionaryOfClasses;
  id v6;
  id v7;
  void *v8;
  id v9;

  v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSUUID, a2), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v4);
  v6 = objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
  v7 = objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLHawkeyeAggressiveAdvertisementTimeoutKey"));
  v8 = *(void **)(a1 + 24);
  v9 = objc_msgSend(v7, "intValue");
  return _objc_msgSend(v8, "startAggressiveAdvertisingForDevice:withTimeout:forClient:", v6, v9, CLISP_ME_TOKEN);
}

id sub_1005DE334(uint64_t a1, CLConnectionMessage **a2)
{
  NSSet *v4;
  id v5;

  v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSUUID, a2), 0);
  v5 = objc_msgSend((id)CLConnectionMessage::getDictionaryOfClasses(*a2, v4), "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
  return _objc_msgSend(*(id *)(a1 + 24), "stopAggressiveAdvertisingForDevice:forClient:", v5, CLISP_ME_TOKEN);
}

id sub_1005DE3B8(uint64_t a1, CLConnectionMessage **a2)
{
  NSSet *v4;
  id v5;

  v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSUUID, a2), 0);
  v5 = objc_msgSend((id)CLConnectionMessage::getDictionaryOfClasses(*a2, v4), "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
  return _objc_msgSend(*(id *)(a1 + 24), "startUnauthorizedAggressiveAdvertisingForDevice:forClient:", v5, CLISP_ME_TOKEN);
}

id sub_1005DE43C(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4;
  uint64_t v5;
  NSSet *v6;
  void *DictionaryOfClasses;
  id v8;
  id v9;
  void *v10;
  id v11;

  v4 = objc_opt_class(NSUUID, a2);
  v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, objc_opt_class(NSNumber, v5), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v6);
  v8 = objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
  v9 = objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLHawkeyeTestModeKey"));
  v10 = *(void **)(a1 + 24);
  v11 = objc_msgSend(v9, "intValue");
  return _objc_msgSend(v10, "setHawkeyeTestMode:onTag:forClient:", v11, v8, CLISP_ME_TOKEN);
}

id sub_1005DE4F8(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4;
  uint64_t v5;
  NSSet *v6;
  void *DictionaryOfClasses;
  id v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  id v13;

  v4 = objc_opt_class(NSUUID, a2);
  v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, objc_opt_class(NSNumber, v5), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v6);
  v8 = objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
  v9 = objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLHawkeyeSeparatedUTTimeoutSecondsKey"));
  v10 = objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLHawkeyeSeparatedUTBackoffTimeoutSecondsKey"));
  v11 = *(void **)(a1 + 24);
  v12 = objc_msgSend(v9, "unsignedIntValue");
  v13 = objc_msgSend(v10, "unsignedIntValue");
  return _objc_msgSend(v11, "setHawkeyeUTMotionConfigWithSeparatedUTTimeoutSeconds:separatedUTBackoffTimeoutSeconds:forDevice:forClient:", v12, v13, v8, CLISP_ME_TOKEN);
}

id sub_1005DE5E4(uint64_t a1, CLConnectionMessage **a2)
{
  NSSet *v4;
  id v5;

  v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSUUID, a2), 0);
  v5 = objc_msgSend((id)CLConnectionMessage::getDictionaryOfClasses(*a2, v4), "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
  return _objc_msgSend(*(id *)(a1 + 24), "fetchHawkeyeAISProductDataForDevice:forClient:", v5, CLISP_ME_TOKEN);
}

id sub_1005DE668(uint64_t a1, CLConnectionMessage **a2)
{
  NSSet *v4;
  id v5;

  v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSUUID, a2), 0);
  v5 = objc_msgSend((id)CLConnectionMessage::getDictionaryOfClasses(*a2, v4), "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
  return _objc_msgSend(*(id *)(a1 + 24), "fetchHawkeyeAISManufacturerNameForDevice:forClient:", v5, CLISP_ME_TOKEN);
}

id sub_1005DE6EC(uint64_t a1, CLConnectionMessage **a2)
{
  NSSet *v4;
  id v5;

  v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSUUID, a2), 0);
  v5 = objc_msgSend((id)CLConnectionMessage::getDictionaryOfClasses(*a2, v4), "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
  return _objc_msgSend(*(id *)(a1 + 24), "fetchHawkeyeAISModelNameForDevice:forClient:", v5, CLISP_ME_TOKEN);
}

id sub_1005DE770(uint64_t a1, CLConnectionMessage **a2)
{
  NSSet *v4;
  id v5;

  v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSUUID, a2), 0);
  v5 = objc_msgSend((id)CLConnectionMessage::getDictionaryOfClasses(*a2, v4), "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
  return _objc_msgSend(*(id *)(a1 + 24), "fetchHawkeyeAISModelColorCodeForDevice:forClient:", v5, CLISP_ME_TOKEN);
}

id sub_1005DE7F4(uint64_t a1, CLConnectionMessage **a2)
{
  NSSet *v4;
  id v5;

  v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSUUID, a2), 0);
  v5 = objc_msgSend((id)CLConnectionMessage::getDictionaryOfClasses(*a2, v4), "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
  return _objc_msgSend(*(id *)(a1 + 24), "fetchHawkeyeAISAccessoryCategoryForDevice:forClient:", v5, CLISP_ME_TOKEN);
}

id sub_1005DE878(uint64_t a1, CLConnectionMessage **a2)
{
  NSSet *v4;
  id v5;

  v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSUUID, a2), 0);
  v5 = objc_msgSend((id)CLConnectionMessage::getDictionaryOfClasses(*a2, v4), "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
  return _objc_msgSend(*(id *)(a1 + 24), "fetchHawkeyeAISAccessoryCapabilitiesForDevice:forClient:", v5, CLISP_ME_TOKEN);
}

id sub_1005DE8FC(uint64_t a1, CLConnectionMessage **a2)
{
  NSSet *v4;
  id v5;

  v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSUUID, a2), 0);
  v5 = objc_msgSend((id)CLConnectionMessage::getDictionaryOfClasses(*a2, v4), "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
  return _objc_msgSend(*(id *)(a1 + 24), "fetchHawkeyeAISFindMyVersionForDevice:forClient:", v5, CLISP_ME_TOKEN);
}

id sub_1005DE980(uint64_t a1, CLConnectionMessage **a2)
{
  NSSet *v4;
  id v5;

  v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSUUID, a2), 0);
  v5 = objc_msgSend((id)CLConnectionMessage::getDictionaryOfClasses(*a2, v4), "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
  return _objc_msgSend(*(id *)(a1 + 24), "fetchHawkeyeAISBatteryTypeForDevice:forClient:", v5, CLISP_ME_TOKEN);
}

id sub_1005DEA04(uint64_t a1, CLConnectionMessage **a2)
{
  NSSet *v4;
  id v5;

  v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSUUID, a2), 0);
  v5 = objc_msgSend((id)CLConnectionMessage::getDictionaryOfClasses(*a2, v4), "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
  return _objc_msgSend(*(id *)(a1 + 24), "fetchHawkeyeSerialNumber:forClient:", v5, CLISP_ME_TOKEN);
}

id sub_1005DEA88(uint64_t a1, CLConnectionMessage **a2)
{
  NSSet *v4;
  id v5;

  v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSUUID, a2), 0);
  v5 = objc_msgSend((id)CLConnectionMessage::getDictionaryOfClasses(*a2, v4), "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
  return _objc_msgSend(*(id *)(a1 + 24), "fetchHawkeyeCurrentPrimaryKey:forClient:", v5, CLISP_ME_TOKEN);
}

id sub_1005DEB0C(uint64_t a1, CLConnectionMessage **a2)
{
  NSSet *v4;
  id v5;

  v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSUUID, a2), 0);
  v5 = objc_msgSend((id)CLConnectionMessage::getDictionaryOfClasses(*a2, v4), "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
  return _objc_msgSend(*(id *)(a1 + 24), "fetchHawkeyeiCloudIdentifier:forClient:", v5, CLISP_ME_TOKEN);
}

void sub_1005DEB90(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4;
  char isEntitled;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  NSSet *v10;
  void *DictionaryOfClasses;
  id v12;
  id v13;
  id v14;
  id v15;
  NSObject *v16;
  id v17;
  void *__p;
  __int16 v19;
  const char *v20;
  __int16 v21;
  id v22;

  v4 = *(_QWORD *)(a1 + 8);
  sub_1015A2E04(&__p, "com.apple.locationd.Proximity.FindMyCertification");
  isEntitled = CLConnection::isEntitled(v4, &__p);
  v7 = isEntitled;
  if (SBYTE3(v22) < 0)
  {
    operator delete(__p);
    if ((v7 & 1) != 0)
      goto LABEL_3;
  }
  else if ((isEntitled & 1) != 0)
  {
LABEL_3:
    v8 = objc_opt_class(NSURL, v6);
    v10 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v8, objc_opt_class(NSString, v9), 0);
    DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v10);
    v12 = objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLHawkeyeFirmwareAssetURLKey"));
    v13 = objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLHawkeyeProductGroupKey"));
    v14 = objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLHawkeyeProductNumberKey"));
    v15 = objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLHawkeyeFirmwareURLSandboxExtensionKey"));
    objc_msgSend(*(id *)(a1 + 24), "useLocalFirmwareAssetFromUrl:forProductGroup:forProductNumber:withSandboxExtension:forClient:", v12, v13, v14, v15, CLISP_ME_TOKEN);
    return;
  }
  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021479A8);
  v16 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
  {
    v17 = objc_msgSend(*(id *)(a1 + 64), "clientname");
    __p = (void *)68289282;
    v19 = 2082;
    v20 = "";
    v21 = 2114;
    v22 = v17;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian #client not entitled for FMCA commands\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x1Cu);
  }
}

void sub_1005DED90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005DEDB4(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4;
  char isEntitled;
  uint64_t v6;
  char v7;
  NSSet *v8;
  void *DictionaryOfClasses;
  id v10;
  id v11;
  NSObject *v12;
  id v13;
  void *__p;
  __int16 v15;
  const char *v16;
  __int16 v17;
  id v18;

  v4 = *(_QWORD *)(a1 + 8);
  sub_1015A2E04(&__p, "com.apple.locationd.Proximity.FindMyCertification");
  isEntitled = CLConnection::isEntitled(v4, &__p);
  v7 = isEntitled;
  if (SBYTE3(v18) < 0)
  {
    operator delete(__p);
    if ((v7 & 1) != 0)
      goto LABEL_3;
  }
  else if ((isEntitled & 1) != 0)
  {
LABEL_3:
    v8 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSString, v6), 0);
    DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v8);
    v10 = objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLHawkeyeProductGroupKey"));
    v11 = objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLHawkeyeProductNumberKey"));
    objc_msgSend(*(id *)(a1 + 24), "useDefaultFirmwareAssetSourceForProductGroup:andProductNumber:forClient:", v10, v11, CLISP_ME_TOKEN);
    return;
  }
  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021479A8);
  v12 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
  {
    v13 = objc_msgSend(*(id *)(a1 + 64), "clientname");
    __p = (void *)68289282;
    v15 = 2082;
    v16 = "";
    v17 = 2114;
    v18 = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian #client not entitled for FMCA commands\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x1Cu);
  }
}

void sub_1005DEF64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005DEF88(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4;
  char isEntitled;
  uint64_t v6;
  char v7;
  NSSet *v8;
  void *DictionaryOfClasses;
  id v10;
  id v11;
  NSObject *v12;
  id v13;
  void *__p;
  __int16 v15;
  const char *v16;
  __int16 v17;
  id v18;

  v4 = *(_QWORD *)(a1 + 8);
  sub_1015A2E04(&__p, "com.apple.locationd.Proximity.FindMyCertification");
  isEntitled = CLConnection::isEntitled(v4, &__p);
  v7 = isEntitled;
  if (SBYTE3(v18) < 0)
  {
    operator delete(__p);
    if ((v7 & 1) != 0)
      goto LABEL_3;
  }
  else if ((isEntitled & 1) != 0)
  {
LABEL_3:
    v8 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSString, v6), 0);
    DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v8);
    v10 = objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLHawkeyeProductGroupKey"));
    v11 = objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLHawkeyeProductNumberKey"));
    objc_msgSend(*(id *)(a1 + 24), "fetchWhetherLocalFirmwareAssetIsInUseForProductGroup:andProductNumber:forClient:", v10, v11, CLISP_ME_TOKEN);
    return;
  }
  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021479A8);
  v12 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
  {
    v13 = objc_msgSend(*(id *)(a1 + 64), "clientname");
    __p = (void *)68289282;
    v15 = 2082;
    v16 = "";
    v17 = 2114;
    v18 = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian #client not entitled for FMCA commands\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x1Cu);
  }
}

void sub_1005DF138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005DF15C(uint64_t a1)
{
  NSObject *v2;
  id v3;
  NSObject *v4;
  id v5;
  const char *v6;
  const char *v7;
  NSObject *v8;
  id v9;
  id v10;
  int v11;
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  id v16;

  if (*(_BYTE *)(a1 + 56))
  {
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021479A8);
    v2 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_ERROR))
    {
      v3 = objc_msgSend(*(id *)(a1 + 64), "clientname");
      v11 = 68289282;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2114;
      v16 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#durian #client already scanning for BTFinding\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&v11, 0x1Cu);
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021479A8);
    }
    v4 = qword_1022A0038;
    if (os_signpost_enabled((os_log_t)qword_1022A0038))
    {
      v5 = objc_msgSend(*(id *)(a1 + 64), "clientname");
      v11 = 68289282;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2114;
      v16 = v5;
      v6 = "#durian #client already scanning for BTFinding";
      v7 = "{\"msg%{public}.0s\":\"#durian #client already scanning for BTFinding\", \"client\":%{public, location:escape_only}@}";
LABEL_9:
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v6, v7, (uint8_t *)&v11, 0x1Cu);
    }
  }
  else
  {
    *(_BYTE *)(a1 + 56) = 1;
    sub_1005E0980((CLAvengerScannerClient *)a1);
    if (_os_feature_enabled_impl("BluetoothFeatures", "SentinelNewLocationFeatures"))
    {
      if (objc_msgSend(*(id *)(a1 + 40), "poweredOn"))
      {
        if ((objc_msgSend(*(id *)(a1 + 40), "startBTFindingScan") & 1) == 0)
        {
          if (qword_1022A0030 != -1)
            dispatch_once(&qword_1022A0030, &stru_1021479A8);
          v8 = qword_1022A0038;
          if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_ERROR))
          {
            v9 = objc_msgSend(*(id *)(a1 + 64), "clientname");
            v11 = 68289282;
            v12 = 0;
            v13 = 2082;
            v14 = "";
            v15 = 2114;
            v16 = v9;
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#durian #client failed to BTFindingScan even when powered on\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&v11, 0x1Cu);
            if (qword_1022A0030 != -1)
              dispatch_once(&qword_1022A0030, &stru_1021479A8);
          }
          v4 = qword_1022A0038;
          if (os_signpost_enabled((os_log_t)qword_1022A0038))
          {
            v10 = objc_msgSend(*(id *)(a1 + 64), "clientname");
            v11 = 68289282;
            v12 = 0;
            v13 = 2082;
            v14 = "";
            v15 = 2114;
            v16 = v10;
            v6 = "#durian #client failed to BTFindingScan even when powered on";
            v7 = "{\"msg%{public}.0s\":\"#durian #client failed to BTFindingScan even when powered on\", \"client\":%{pub"
                 "lic, location:escape_only}@}";
            goto LABEL_9;
          }
        }
      }
      else
      {
        *(_BYTE *)(a1 + 57) = 1;
      }
    }
    else
    {
      _objc_msgSend(*(id *)(a1 + 32), "startBTFindingScan:", CLISP_ME_TOKEN);
    }
  }
}

void sub_1005DF4A8(uint64_t a1)
{
  NSObject *v2;
  id v3;
  NSObject *v4;
  id v5;
  int v6;
  int v7;
  __int16 v8;
  const char *v9;
  __int16 v10;
  id v11;

  if (*(_BYTE *)(a1 + 56))
  {
    *(_WORD *)(a1 + 56) = 0;
    if (_os_feature_enabled_impl("BluetoothFeatures", "SentinelNewLocationFeatures"))
      objc_msgSend(*(id *)(a1 + 40), "stopBTFindingScan");
    else
      objc_msgSend(*(id *)(a1 + 32), "stopBTFindingScan:", CLISP_ME_TOKEN);
    sub_1005E0840(a1);
  }
  else
  {
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021479A8);
    v2 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_ERROR))
    {
      v3 = objc_msgSend(*(id *)(a1 + 64), "clientname");
      v6 = 68289282;
      v7 = 0;
      v8 = 2082;
      v9 = "";
      v10 = 2114;
      v11 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#durian #client not scanning for BTFinding\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&v6, 0x1Cu);
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021479A8);
    }
    v4 = qword_1022A0038;
    if (os_signpost_enabled((os_log_t)qword_1022A0038))
    {
      v5 = objc_msgSend(*(id *)(a1 + 64), "clientname");
      v6 = 68289282;
      v7 = 0;
      v8 = 2082;
      v9 = "";
      v10 = 2114;
      v11 = v5;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#durian #client not scanning for BTFinding", "{\"msg%{public}.0s\":\"#durian #client not scanning for BTFinding\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&v6, 0x1Cu);
    }
  }
}

void sub_1005DF6B4(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  int v5;
  int v6;
  __int16 v7;
  const char *v8;

  if (*(_QWORD *)(a1 + 40))
  {
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021479A8);
    v2 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
    {
      v5 = 68289026;
      v6 = 0;
      v7 = 2082;
      v8 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#durian sa performing avenger scan\"}", (uint8_t *)&v5, 0x12u);
    }
    objc_msgSend(*(id *)(a1 + 40), "performTemporaryAggressiveScan");
  }
  else
  {
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021479A8);
    v3 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_ERROR))
    {
      v5 = 68289026;
      v6 = 0;
      v7 = 2082;
      v8 = "";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#durian sa attempted to issue scan but scanner client doesnt exist\"}", (uint8_t *)&v5, 0x12u);
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021479A8);
    }
    v4 = qword_1022A0038;
    if (os_signpost_enabled((os_log_t)qword_1022A0038))
    {
      v5 = 68289026;
      v6 = 0;
      v7 = 2082;
      v8 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#durian sa attempted to issue scan but scanner client doesnt exist", "{\"msg%{public}.0s\":\"#durian sa attempted to issue scan but scanner client doesnt exist\"}", (uint8_t *)&v5, 0x12u);
    }
  }
}

void sub_1005DF8B8(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  int v5;
  int v6;
  __int16 v7;
  const char *v8;

  if (*(_QWORD *)(a1 + 40))
  {
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021479A8);
    v2 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
    {
      v5 = 68289026;
      v6 = 0;
      v7 = 2082;
      v8 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#durian sa performing long avenger scan\"}", (uint8_t *)&v5, 0x12u);
    }
    objc_msgSend(*(id *)(a1 + 40), "performTemporaryLongAggressiveScan");
  }
  else
  {
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021479A8);
    v3 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_ERROR))
    {
      v5 = 68289026;
      v6 = 0;
      v7 = 2082;
      v8 = "";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#durian sa attempted to issue scan but scanner client doesnt exist\"}", (uint8_t *)&v5, 0x12u);
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021479A8);
    }
    v4 = qword_1022A0038;
    if (os_signpost_enabled((os_log_t)qword_1022A0038))
    {
      v5 = 68289026;
      v6 = 0;
      v7 = 2082;
      v8 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#durian sa attempted to issue scan but scanner client doesnt exist", "{\"msg%{public}.0s\":\"#durian sa attempted to issue scan but scanner client doesnt exist\"}", (uint8_t *)&v5, 0x12u);
    }
  }
}

void sub_1005DFABC(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  int v5;
  int v6;
  __int16 v7;
  const char *v8;

  if (*(_QWORD *)(a1 + 40))
  {
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021479A8);
    v2 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
    {
      v5 = 68289026;
      v6 = 0;
      v7 = 2082;
      v8 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian sa stopping long avenger scan\"}", (uint8_t *)&v5, 0x12u);
    }
    objc_msgSend(*(id *)(a1 + 40), "stopTemporaryLongAggressiveScan");
  }
  else
  {
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021479A8);
    v3 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_ERROR))
    {
      v5 = 68289026;
      v6 = 0;
      v7 = 2082;
      v8 = "";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#durian sa attempted to terminate long scan but scanner proxy doesnt exist\"}", (uint8_t *)&v5, 0x12u);
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021479A8);
    }
    v4 = qword_1022A0038;
    if (os_signpost_enabled((os_log_t)qword_1022A0038))
    {
      v5 = 68289026;
      v6 = 0;
      v7 = 2082;
      v8 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#durian sa attempted to terminate long scan but scanner proxy doesnt exist", "{\"msg%{public}.0s\":\"#durian sa attempted to terminate long scan but scanner proxy doesnt exist\"}", (uint8_t *)&v5, 0x12u);
    }
  }
}

id sub_1005DFCC0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 72), "debugPerformAggressiveScan");
}

id sub_1005DFCC8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 72), "debugPerformHawkeyeLowEnergyScan");
}

id sub_1005DFCD0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 24), "debugPerformAggressiveScan");
}

id sub_1005DFCD8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 72), "fetchStatusOfUTEnablementRequirementsForClient:", CLISP_ME_TOKEN);
}

id sub_1005DFCEC(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4;
  uint64_t v5;
  NSSet *v6;
  void *DictionaryOfClasses;
  id v8;
  id v9;
  id v10;
  NSData *v11;
  uint64_t v12;
  id v13;

  v4 = objc_opt_class(NSUUID, a2);
  v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, objc_opt_class(NSString, v5), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v6);
  v8 = objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
  v9 = objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLDurianMacAddress"));
  v10 = objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLDurianTagType"));
  v11 = +[NSData dataWithHexString:](NSData, "dataWithHexString:", v9);
  if ((objc_msgSend(v10, "isEqualToString:", CFSTR("durian")) & 1) != 0)
  {
    v12 = 1;
  }
  else if ((objc_msgSend(v10, "isEqualToString:", CFSTR("hawkeye")) & 1) != 0)
  {
    v12 = 2;
  }
  else if (objc_msgSend(v10, "isEqualToString:", CFSTR("hele")))
  {
    v12 = 3;
  }
  else
  {
    v12 = 0;
  }
  v13 = objc_msgSend(objc_alloc((Class)TAUnknownBeacon), "initWithBeaconUUID:address:deviceType:withAccessoryInfo:", v8, v11, v12, 0);
  objc_msgSend(*(id *)(a1 + 72), "fetchAISInfoForTAUnknownBeacon:client:", v13, CLISP_ME_TOKEN);
  return v13;
}

id sub_1005DFE54(uint64_t a1, CLConnectionMessage **a2)
{
  NSSet *v4;
  void *DictionaryOfClasses;
  id v6;
  id v7;
  NSData *v8;
  id v9;
  uint64_t v10;

  v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSString, a2), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v4);
  v6 = objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLDurianMacAddress"));
  v7 = objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLDurianTagType"));
  v8 = +[NSData dataWithHexString:](NSData, "dataWithHexString:", v6);
  v9 = objc_msgSend(objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLAvengerAdvertisementDetailsBitmask")), "intValue");
  if ((objc_msgSend(v7, "isEqualToString:", CFSTR("durian")) & 1) != 0)
  {
    v10 = 1;
  }
  else if ((objc_msgSend(v7, "isEqualToString:", CFSTR("hawkeye")) & 1) != 0)
  {
    v10 = 2;
  }
  else if (objc_msgSend(v7, "isEqualToString:", CFSTR("hele")))
  {
    v10 = 3;
  }
  else
  {
    v10 = 0;
  }
  return _objc_msgSend(*(id *)(a1 + 72), "stageTADetection:deviceType:detailsBitmask:client:", v8, v10, v9, CLISP_ME_TOKEN);
}

id sub_1005DFF80(uint64_t a1, CLConnectionMessage **a2)
{
  NSSet *v4;
  void *DictionaryOfClasses;
  id v6;
  id v7;
  NSData *v8;
  id v9;
  uint64_t v10;

  v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSString, a2), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v4);
  v6 = objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLDurianMacAddress"));
  v7 = objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLDurianTagType"));
  v8 = +[NSData dataWithHexString:](NSData, "dataWithHexString:", v6);
  v9 = objc_msgSend(objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("CLAvengerAdvertisementDetailsBitmask")), "intValue");
  if ((objc_msgSend(v7, "isEqualToString:", CFSTR("durian")) & 1) != 0)
  {
    v10 = 1;
  }
  else if ((objc_msgSend(v7, "isEqualToString:", CFSTR("hawkeye")) & 1) != 0)
  {
    v10 = 2;
  }
  else if (objc_msgSend(v7, "isEqualToString:", CFSTR("hele")))
  {
    v10 = 3;
  }
  else
  {
    v10 = 0;
  }
  return _objc_msgSend(*(id *)(a1 + 72), "forceSurfaceStagedDetections:deviceType:detailsBitmask:client:", v8, v10, v9, CLISP_ME_TOKEN);
}

id sub_1005E00AC(uint64_t a1, CLConnectionMessage **a2)
{
  id result;
  uint64_t v5;
  NSSet *v6;
  id v7;

  result = (id)_os_feature_enabled_impl("CoreLocation", "StandardUT");
  if ((_DWORD)result)
  {
    v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSUUID, v5), 0);
    v7 = objc_msgSend((id)CLConnectionMessage::getDictionaryOfClasses(*a2, v6), "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
    return _objc_msgSend(*(id *)(a1 + 24), "fetchAISProductDataForDevice:forClient:", v7, CLISP_ME_TOKEN);
  }
  return result;
}

id sub_1005E015C(uint64_t a1, CLConnectionMessage **a2)
{
  id result;
  uint64_t v5;
  NSSet *v6;
  id v7;

  result = (id)_os_feature_enabled_impl("CoreLocation", "StandardUT");
  if ((_DWORD)result)
  {
    v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSUUID, v5), 0);
    v7 = objc_msgSend((id)CLConnectionMessage::getDictionaryOfClasses(*a2, v6), "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
    return _objc_msgSend(*(id *)(a1 + 24), "fetchAISManufacturerNameForDevice:forClient:", v7, CLISP_ME_TOKEN);
  }
  return result;
}

id sub_1005E020C(uint64_t a1, CLConnectionMessage **a2)
{
  id result;
  uint64_t v5;
  NSSet *v6;
  id v7;

  result = (id)_os_feature_enabled_impl("CoreLocation", "StandardUT");
  if ((_DWORD)result)
  {
    v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSUUID, v5), 0);
    v7 = objc_msgSend((id)CLConnectionMessage::getDictionaryOfClasses(*a2, v6), "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
    return _objc_msgSend(*(id *)(a1 + 24), "fetchAISModelNameForDevice:forClient:", v7, CLISP_ME_TOKEN);
  }
  return result;
}

id sub_1005E02BC(uint64_t a1, CLConnectionMessage **a2)
{
  id result;
  uint64_t v5;
  NSSet *v6;
  id v7;

  result = (id)_os_feature_enabled_impl("CoreLocation", "StandardUT");
  if ((_DWORD)result)
  {
    v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSUUID, v5), 0);
    v7 = objc_msgSend((id)CLConnectionMessage::getDictionaryOfClasses(*a2, v6), "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
    return _objc_msgSend(*(id *)(a1 + 24), "fetchAISProtocolImplementationForDevice:forClient:", v7, CLISP_ME_TOKEN);
  }
  return result;
}

id sub_1005E036C(uint64_t a1, CLConnectionMessage **a2)
{
  id result;
  uint64_t v5;
  NSSet *v6;
  id v7;

  result = (id)_os_feature_enabled_impl("CoreLocation", "StandardUT");
  if ((_DWORD)result)
  {
    v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSUUID, v5), 0);
    v7 = objc_msgSend((id)CLConnectionMessage::getDictionaryOfClasses(*a2, v6), "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
    return _objc_msgSend(*(id *)(a1 + 24), "fetchAISAccessoryCapabilitiesForDevice:forClient:", v7, CLISP_ME_TOKEN);
  }
  return result;
}

id sub_1005E041C(uint64_t a1, CLConnectionMessage **a2)
{
  id result;
  uint64_t v5;
  NSSet *v6;
  id v7;

  result = (id)_os_feature_enabled_impl("CoreLocation", "StandardUT");
  if ((_DWORD)result)
  {
    v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSUUID, v5), 0);
    v7 = objc_msgSend((id)CLConnectionMessage::getDictionaryOfClasses(*a2, v6), "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
    return _objc_msgSend(*(id *)(a1 + 24), "fetchAISAccessoryCategoryForDevice:forClient:", v7, CLISP_ME_TOKEN);
  }
  return result;
}

id sub_1005E04CC(uint64_t a1, CLConnectionMessage **a2)
{
  id result;
  uint64_t v5;
  NSSet *v6;
  id v7;

  result = (id)_os_feature_enabled_impl("CoreLocation", "StandardUT");
  if ((_DWORD)result)
  {
    v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSUUID, v5), 0);
    v7 = objc_msgSend((id)CLConnectionMessage::getDictionaryOfClasses(*a2, v6), "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
    return _objc_msgSend(*(id *)(a1 + 24), "fetchAISNetworkIDForDevice:forClient:", v7, CLISP_ME_TOKEN);
  }
  return result;
}

id sub_1005E057C(uint64_t a1, CLConnectionMessage **a2)
{
  id result;
  uint64_t v5;
  NSSet *v6;
  id v7;

  result = (id)_os_feature_enabled_impl("CoreLocation", "StandardUT");
  if ((_DWORD)result)
  {
    v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSUUID, v5), 0);
    v7 = objc_msgSend((id)CLConnectionMessage::getDictionaryOfClasses(*a2, v6), "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
    return _objc_msgSend(*(id *)(a1 + 24), "fetchAISFirmwareVersionForDevice:forClient:", v7, CLISP_ME_TOKEN);
  }
  return result;
}

id sub_1005E062C(uint64_t a1, CLConnectionMessage **a2)
{
  id result;
  uint64_t v5;
  NSSet *v6;
  id v7;

  result = (id)_os_feature_enabled_impl("CoreLocation", "StandardUT");
  if ((_DWORD)result)
  {
    v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSUUID, v5), 0);
    v7 = objc_msgSend((id)CLConnectionMessage::getDictionaryOfClasses(*a2, v6), "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
    return _objc_msgSend(*(id *)(a1 + 24), "fetchAISBatteryTypeForDevice:forClient:", v7, CLISP_ME_TOKEN);
  }
  return result;
}

id sub_1005E06DC(uint64_t a1, CLConnectionMessage **a2)
{
  id result;
  uint64_t v5;
  NSSet *v6;
  id v7;

  result = (id)_os_feature_enabled_impl("CoreLocation", "StandardUT");
  if ((_DWORD)result)
  {
    v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSUUID, v5), 0);
    v7 = objc_msgSend((id)CLConnectionMessage::getDictionaryOfClasses(*a2, v6), "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
    return _objc_msgSend(*(id *)(a1 + 24), "fetchAISBatteryLevelForDevice:forClient:", v7, CLISP_ME_TOKEN);
  }
  return result;
}

id sub_1005E078C(uint64_t a1, CLConnectionMessage **a2)
{
  id result;
  uint64_t v5;
  NSSet *v6;
  id v7;

  result = (id)_os_feature_enabled_impl("CoreLocation", "StandardUT");
  if ((_DWORD)result)
  {
    v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSUUID, v5), 0);
    v7 = objc_msgSend((id)CLConnectionMessage::getDictionaryOfClasses(*a2, v6), "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
    return _objc_msgSend(*(id *)(a1 + 24), "fetchAISSerialNumberForDevice:forClient:", v7, CLISP_ME_TOKEN);
  }
  return result;
}

void sub_1005E0840(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  NSObject *v4;
  id v5;
  id *v6;
  void *v7;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  id v12;

  v1 = *(_QWORD *)(a1 + 48);
  if (v1)
  {
    v3 = v1 - 1;
    *(_QWORD *)(a1 + 48) = v3;
    if (!v3)
    {
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021479A8);
      v4 = qword_1022A0038;
      if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
      {
        v5 = objc_msgSend(*(id *)(a1 + 64), "clientname");
        v8[0] = 68289282;
        v8[1] = 0;
        v9 = 2082;
        v10 = "";
        v11 = 2114;
        v12 = v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian #client tearing down scanner\", \"name\":%{public, location:escape_only}@}", (uint8_t *)v8, 0x1Cu);
      }
      if (_os_feature_enabled_impl("BluetoothFeatures", "SentinelNewLocationFeatures"))
      {
        v6 = (id *)(a1 + 40);
      }
      else
      {
        v7 = *(void **)(a1 + 32);
        v6 = (id *)(a1 + 32);
        objc_msgSend(v7, "stopMonitoringAvengerAdvertisementsForClient:", CLISP_ME_TOKEN);
      }

      *v6 = 0;
    }
  }
}

CLAvengerScannerClient *sub_1005E0980(CLAvengerScannerClient *result)
{
  CLAvengerReconciler *reconciler;
  CLAvengerScannerClient *v2;
  NSObject *v3;
  id v4;
  NSObject *v5;
  id v6;
  CBCentralManager *v7;
  int v8;
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  id v13;

  reconciler = result->_reconciler;
  if (reconciler != (CLAvengerReconciler *)-1)
  {
    v2 = result;
    result->_reconciler = (CLAvengerReconciler *)((char *)&reconciler->super.isa + 1);
    result = (CLAvengerScannerClient *)_os_feature_enabled_impl("BluetoothFeatures", "SentinelNewLocationFeatures");
    if ((_DWORD)result)
    {
      if (!v2->_controller)
      {
        if (qword_1022A0030 != -1)
          dispatch_once(&qword_1022A0030, &stru_1021479A8);
        v3 = qword_1022A0038;
        if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
        {
          v4 = -[CLPowerAssertion clientname](v2[1]._powerAssertion.__ptr_.__value_, "clientname");
          v8 = 68289282;
          v9 = 0;
          v10 = 2082;
          v11 = "";
          v12 = 2114;
          v13 = v4;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian #client initiating scanner\", \"name\":%{public, location:escape_only}@}", (uint8_t *)&v8, 0x1Cu);
        }
        result = -[CLAvengerScannerClient initWithDelegate:queue:]([CLAvengerScannerClient alloc], "initWithDelegate:queue:", v2[1]._powerAssertion.__ptr_.__value_, objc_msgSend(-[CLAvengerScannerClientDelegateProtocol silo](v2->_delegate, "silo"), "queue"));
        v2->_controller = (CLAvengerScannerClientController *)result;
      }
    }
    else if (!v2->_centralManager)
    {
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021479A8);
      v5 = qword_1022A0038;
      if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
      {
        v6 = -[CLPowerAssertion clientname](v2[1]._powerAssertion.__ptr_.__value_, "clientname");
        v8 = 68289282;
        v9 = 0;
        v10 = 2082;
        v11 = "";
        v12 = 2114;
        v13 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian #client initiating scanner\", \"name\":%{public, location:escape_only}@}", (uint8_t *)&v8, 0x1Cu);
      }
      v7 = (CBCentralManager *)objc_msgSend(-[CLAvengerScannerClientDelegateProtocol vendor](v2->_delegate, "vendor"), "proxyForService:", CFSTR("CLAvengerScanner"));
      v2->_centralManager = v7;
      -[CBCentralManager registerDelegate:inSilo:](v7, "registerDelegate:inSilo:", v2[1]._powerAssertion.__ptr_.__value_, -[CLAvengerScannerClientDelegateProtocol silo](v2->_delegate, "silo"));
      -[CBCentralManager setDelegateEntityName:](v2->_centralManager, "setDelegateEntityName:", "CLDurianManagementClient");
      return (CLAvengerScannerClient *)-[CBCentralManager startMonitoringAvengerAdvertisementsForClient:clientName:](v2->_centralManager, "startMonitoringAvengerAdvertisementsForClient:clientName:", CLISP_ME_TOKEN, -[CLPowerAssertion clientname](v2[1]._powerAssertion.__ptr_.__value_, "clientname"));
    }
  }
  return result;
}

id sub_1005E0BF8(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "performTemporaryHawkeyeLowEnergyScan");
}

void sub_1005E0C04(uint64_t a1)
{
  sub_1005E0840(*(_QWORD *)(a1 + 32));
}

id sub_1005E0C0C(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "performTemporaryLongAggressiveScan");
}

void sub_1005E0C18(uint64_t a1)
{
  sub_1005E0840(*(_QWORD *)(a1 + 32));
}

void sub_1005E0C20(id a1)
{
  qword_1022A0038 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

_QWORD *sub_1005E0C4C@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_1005E0CAC(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1005E0C98(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1005E0CAC(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10213D5E0;
  CLConnectionMessage::CLConnectionMessage(a1 + 3, a2, *a3);
  return a1;
}

void sub_1005E0CE8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1005E0CFC(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 40 * a3;
    do
    {
      sub_1005E0D74(a1, a2, (__int128 *)a2);
      a2 += 40;
      v5 -= 40;
    }
    while (v5);
  }
  return a1;
}

void sub_1005E0D60(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1002A1C94(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1005E0D74(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_10025A024(a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((sub_10025A4CC(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  sub_1005E0FF0(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_10012E444(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_1005E0FCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    sub_1002A20A8((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

char *sub_1005E0FF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  void *v8;
  char *result;

  v7 = a1 + 16;
  v8 = operator new(0x38uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = sub_1005E1078((char *)v8 + 16, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1005E105C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_1002A20A8(v3, v2);
  _Unwind_Resume(a1);
}

char *sub_1005E1078(char *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  *(_OWORD *)(__dst + 24) = *(__int128 *)((char *)a2 + 24);
  return __dst;
}

void sub_1005E10CC(uint64_t a1, char *a2)
{
  void *__p;
  void *v4[2];

  sub_1015A2E04(v4, a2);
  sub_1015A2E04(&__p, "");
  sub_1005E1178(a1, (uint64_t)v4);
}

void sub_1005E1144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_1005E1178(uint64_t a1, uint64_t a2)
{
  void *v2[2];
  uint64_t v3;

  *(_OWORD *)v2 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  operator new();
}

void sub_1005E1258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 8))(a15);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_1005E12A8(uint64_t a1, __int128 *a2, int a3, uint64_t *a4, __int128 *a5)
{
  __int128 v8;
  _QWORD *v9;
  __int128 v10;
  uint64_t v11;
  NSObject *v12;
  _QWORD *v13;
  NSObject *v14;
  _QWORD *v15;
  _QWORD *v16;
  const char *v17;
  char *v18;
  _QWORD *v19;
  const char *v20;
  char *v21;
  int v22;
  int v23;
  _QWORD *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  _DWORD buf[3];
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;

  *(_BYTE *)a1 = 0;
  v8 = *a2;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v8;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a1 + 40) = 0x100000002;
  v9 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 49) = a3;
  if (*((char *)a5 + 23) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 56), *(void **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    v10 = *a5;
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a5 + 2);
    *(_OWORD *)(a1 + 56) = v10;
  }
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v11 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 96) = v11;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102147A18);
  v12 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v13 = v9;
    if (*(char *)(a1 + 31) < 0)
      v13 = (_QWORD *)*v9;
    buf[0] = 136315650;
    *(_QWORD *)&buf[1] = v13;
    v30 = 1024;
    v31 = a3;
    v32 = 1024;
    v33 = 1;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Creating managed location database %s (count triggers %d, use cache %d)", (uint8_t *)buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102147A18);
    v16 = v9;
    if (*(char *)(a1 + 31) < 0)
      v16 = (_QWORD *)*v9;
    v23 = 136315650;
    v24 = v16;
    v25 = 1024;
    v26 = a3;
    v27 = 1024;
    v28 = 1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "Creating managed location database %s (count triggers %d, use cache %d)", (const char *)&v23, 24, v22);
    v18 = (char *)v17;
    sub_100512490("Generic", 1, 0, 2, "CLManagedLocationDatabase<CLNrCellLocationDatabase, CLTelephonyService_Type::NrCell>::CLManagedLocationDatabase(std::string, BOOL, std::unique_ptr<IExternal>, std::string) [Database = CLNrCellLocationDatabase, DataType = CLTelephonyService_Type::NrCell]", "%s\n", v17);
    if (v18 != (char *)buf)
      free(v18);
  }
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 16))(*(_QWORD *)(a1 + 96)))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102147A18);
    v14 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      v15 = v9;
      if (*(char *)(a1 + 31) < 0)
        v15 = (_QWORD *)*v9;
      buf[0] = 136315138;
      *(_QWORD *)&buf[1] = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Data protection is enabled, creating in-memory database for table %s", (uint8_t *)buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147A18);
      v19 = v9;
      if (*(char *)(a1 + 31) < 0)
        v19 = (_QWORD *)*v9;
      v23 = 136315138;
      v24 = v19;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "Data protection is enabled, creating in-memory database for table %s", (const char *)&v23);
      v21 = (char *)v20;
      sub_100512490("Generic", 1, 0, 2, "CLManagedLocationDatabase<CLNrCellLocationDatabase, CLTelephonyService_Type::NrCell>::CLManagedLocationDatabase(std::string, BOOL, std::unique_ptr<IExternal>, std::string) [Database = CLNrCellLocationDatabase, DataType = CLTelephonyService_Type::NrCell]", "%s\n", v20);
      if (v21 != (char *)buf)
        free(v21);
    }
    sub_1005E199C(a1, a3);
  }
  sub_1005E1AB8();
}

void sub_1005E1918(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(v1 + 96);
  *(_QWORD *)(v1 + 96) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (*(char *)(v1 + 79) < 0)
    operator delete(*v2);
  v6 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v3);
  _Unwind_Resume(exception_object);
}

void sub_1005E199C(uint64_t a1, char a2)
{
  void *__p[2];
  void *v4;
  uint64_t v5;
  char v6;
  char v7;
  void *v8[3];
  uint64_t v9;

  sub_1015A2E04(__p, "");
  v6 = 0;
  v5 = 0;
  v7 = a2;
  if (SHIBYTE(v4) < 0)
  {
    sub_100115CE4(v8, __p[0], (unint64_t)__p[1]);
    v9 = 0;
    if (SHIBYTE(v4) < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)v8 = *(_OWORD *)__p;
    v8[2] = v4;
    v9 = 0;
  }
  sub_1005E1AB8();
}

void sub_1005E1A68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005E1AB8()
{
  operator new();
}

void sub_1005E1B4C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  _Unwind_Resume(a1);
}

void sub_1005E1B8C(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_1005E1BB8(uint64_t a1)
{
  size_t v2;
  void **v3;
  const void *v4;
  int v5;
  void **v6;
  CLOSTransaction *v7;
  void **v8;
  void *__p[2];
  char v10;

  if (*(_QWORD *)(a1 + 88))
    sub_101901508();
  if (*(char *)(a1 + 31) >= 0)
    v2 = *(unsigned __int8 *)(a1 + 31);
  else
    v2 = *(_QWORD *)(a1 + 16);
  v3 = __p;
  sub_100259584((uint64_t)__p, v2 + 17);
  if (v10 < 0)
    v3 = (void **)__p[0];
  if (v2)
  {
    if (*(char *)(a1 + 31) >= 0)
      v4 = (const void *)(a1 + 8);
    else
      v4 = *(const void **)(a1 + 8);
    memmove(v3, v4, v2);
  }
  strcpy((char *)v3 + v2, "-InMemoryDatabase");
  v5 = v10;
  v6 = (void **)__p[0];
  v7 = [CLOSTransaction alloc];
  if (v5 >= 0)
    v8 = __p;
  else
    v8 = v6;
  *(_QWORD *)(a1 + 88) = -[CLOSTransaction initWithDescription:](v7, "initWithDescription:", v8);
  if (v10 < 0)
    operator delete(__p[0]);
}

void sub_1005E1CBC(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

BOOL sub_1005E1CF4()
{
  return os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT);
}

BOOL sub_1005E1D08()
{
  uint64_t v0;

  return os_log_type_enabled(*(os_log_t *)(v0 + 40), OS_LOG_TYPE_INFO);
}

BOOL sub_1005E1D18()
{
  uint64_t v0;

  return os_signpost_enabled(*(os_log_t *)(v0 + 40));
}

uint64_t sub_1005E1D24(uint64_t a1)
{
  uint64_t result;

  result = sub_100E33344(a1, 0);
  *(_QWORD *)result = &off_102147A68;
  *(_DWORD *)(result + 96) = 0;
  return result;
}

uint64_t *sub_1005E1D4C(uint64_t *result, _DWORD *a2, unsigned int a3, unsigned int a4)
{
  uint64_t *v4;
  BOOL v5;

  v4 = result;
  if (*a2 < 3u)
  {
    v5 = *((_DWORD *)result + 24) == a3;
    a3 = a4;
    if (!v5)
      return result;
LABEL_6:
    sub_1005E1DB8((uint64_t)result, a3);
    return sub_1005E1EC8(v4);
  }
  if (*a2 == 9 && *((_DWORD *)result + 24) == a4)
    goto LABEL_6;
  return result;
}

void sub_1005E1DB8(uint64_t a1, unsigned int a2)
{
  NSObject *v4;
  uint64_t v5;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;

  if (*(_DWORD *)(a1 + 96) != a2)
  {
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_102147B10);
    v4 = qword_1022A01E8;
    if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(unsigned int *)(a1 + 96);
      v6[0] = 68289538;
      v6[1] = 0;
      v7 = 2082;
      v8 = "";
      v9 = 2050;
      v10 = v5;
      v11 = 2050;
      v12 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Transitioned state\", \"old state\":%{public, location:CLStreamingAwareLocationProviderNoLocalGPSStateMachine::LocationSourceState}lld, \"new state\":%{public, location:CLStreamingAwareLocationProviderNoLocalGPSStateMachine::LocationSourceState}lld}", (uint8_t *)v6, 0x26u);
    }
    *(_DWORD *)(a1 + 96) = a2;
  }
}

uint64_t *sub_1005E1EC8(uint64_t *result)
{
  uint64_t v6;
  __int128 v7;
  __int16 v8;
  int v9;
  int v10;

  __asm { FMOV            V0.2D, #-1.0 }
  v7 = _Q0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v6 = (uint64_t)result;
  switch(*((_DWORD *)result + 24))
  {
    case 0:
      sub_100E3384C((uint64_t)result, 0);
      result = sub_100E3384C(v6, 1);
      break;
    case 1:
    case 3:
      sub_1001AF928((uint64_t)result, 0, (uint64_t)&v7);
      goto LABEL_5;
    case 2:
      sub_100E3384C((uint64_t)result, 0);
LABEL_5:
      result = sub_1001AF928(v6, 1, (uint64_t)&v7);
      break;
    case 4:
      sub_1001AF928((uint64_t)result, 0, (uint64_t)&v7);
      result = sub_100E3384C(v6, 1);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t *sub_1005E1F94(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  int v4;
  uint64_t *v5;
  int v6;
  int v7;
  unsigned int v8;
  unsigned int v10;
  BOOL v11;
  int v12;

  v2 = *(uint64_t **)(a1 + 16);
  if (!v2)
  {
LABEL_16:
    v8 = 0;
    goto LABEL_17;
  }
  v3 = *(uint64_t **)(a1 + 16);
  while (1)
  {
    v4 = *((_DWORD *)v3 + 7);
    if (v4 <= 0)
      break;
LABEL_6:
    v3 = (uint64_t *)*v3;
    if (!v3)
    {
      v5 = *(uint64_t **)(a1 + 16);
      while (1)
      {
        v6 = *((_DWORD *)v5 + 7);
        if (v6 <= 1)
        {
          if (v6 == 1)
          {
LABEL_19:
            if (*(_DWORD *)(a1 + 96) > 2u)
              return sub_1005E1EC8((uint64_t *)a1);
            v8 = 4;
LABEL_17:
            sub_1005E1DB8(a1, v8);
            return sub_1005E1EC8((uint64_t *)a1);
          }
          ++v5;
        }
        v5 = (uint64_t *)*v5;
        if (!v5)
        {
          do
          {
            v7 = *((_DWORD *)v2 + 7);
            if (v7 <= 2)
            {
              if (v7 == 2)
                goto LABEL_19;
              ++v2;
            }
            v2 = (uint64_t *)*v2;
          }
          while (v2);
          goto LABEL_16;
        }
      }
    }
  }
  if (v4 < 0)
  {
    ++v3;
    goto LABEL_6;
  }
  v10 = *(_DWORD *)(a1 + 96);
  v11 = v10 > 4;
  v12 = (1 << v10) & 0x19;
  if (!v11 && v12 != 0)
  {
    v8 = 2;
    goto LABEL_17;
  }
  return sub_1005E1EC8((uint64_t *)a1);
}

uint64_t sub_1005E2068(uint64_t a1, int a2, unsigned int *a3, uint64_t a4)
{
  uint64_t result;
  int v9;
  _BOOL4 v10;
  _BOOL4 v11;
  uint64_t *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  result = sub_100E33328(*a3);
  if ((_DWORD)result)
  {
    v9 = *(_DWORD *)(a1 + 96);
    v10 = v9 != 4 || a2 == 0;
    if (v9 == 2)
      v11 = a2 == 1;
    else
      v11 = v10;
  }
  else
  {
    v11 = 1;
  }
  if (a2 == 1)
  {
    v12 = (uint64_t *)a1;
    v13 = a3;
    v14 = 1;
    v15 = 2;
  }
  else
  {
    if (a2)
      goto LABEL_14;
    v12 = (uint64_t *)a1;
    v13 = a3;
    v14 = 3;
    v15 = 4;
  }
  result = (uint64_t)sub_1005E1D4C(v12, v13, v14, v15);
LABEL_14:
  if (v11)
    return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 8))(*(_QWORD *)(a1 + 32), *a3, a4);
  return result;
}

void sub_1005E2140(uint64_t a1)
{
  sub_10049BCA4(a1);
  operator delete();
}

void sub_1005E2164(id a1)
{
  qword_1022A01E8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Streaming");
}

unsigned __int8 *sub_1005E2190(unsigned __int8 *result, float *a2, double *a3, int a4, float a5)
{
  float v5;
  float v6;
  float v7;
  double v8;
  double v9;
  float v10;
  float v11;
  float v12;
  double v13;
  BOOL v14;
  double v15;
  double v16;
  double v17;
  double v18;
  float v20;
  uint64_t v21;

  if (*result == a4)
  {
    v5 = *((float *)result + 4);
    v6 = *((float *)result + 5);
    v7 = *((float *)result + 6);
    v8 = *((double *)result + 1);
    v9 = *((double *)result + 5);
  }
  else
  {
    *((_QWORD *)result + 1) = 0xBFF0000000000000;
    *((_OWORD *)result + 1) = 0u;
    *((_OWORD *)result + 2) = 0u;
    *((_OWORD *)result + 3) = 0u;
    *((_OWORD *)result + 4) = 0u;
    *result = a4;
    v7 = 0.0;
    v8 = -1.0;
    v9 = 0.0;
    v6 = 0.0;
    v5 = 0.0;
  }
  v10 = *a2 + v5;
  *((float *)result + 4) = v10;
  v11 = a2[1] + v6;
  *((float *)result + 5) = v11;
  v12 = a2[2] + v7;
  *((float *)result + 6) = v12;
  v13 = *a3;
  v14 = *a3 <= v8 || v8 <= 0.0;
  v15 = v13 - v8;
  v16 = a5;
  if (!v14)
    v16 = v15;
  *((double *)result + 1) = v13;
  v17 = v9 + v16;
  *((double *)result + 5) = v17;
  v18 = *((double *)result + 10);
  if (v18 > 0.0 && v17 >= v18)
  {
    *((double *)result + 6) = v17 + *((double *)result + 6);
    v20 = v11 + *((float *)result + 8);
    *((float *)result + 7) = v10 + *((float *)result + 7);
    *((float *)result + 8) = v20;
    *((float *)result + 9) = v12 + *((float *)result + 9);
    *((_QWORD *)result + 2) = 0;
    *((_DWORD *)result + 6) = 0;
    *((_QWORD *)result + 5) = 0;
  }
  v21 = *(_QWORD *)a2;
  *((float *)result + 16) = a2[2];
  *((_QWORD *)result + 7) = v21;
  return result;
}

double sub_1005E2284(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 8) = 0xBFF0000000000000;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_BYTE *)a1 = 1;
  return result;
}

unsigned __int8 *sub_1005E22A4(unsigned __int8 *result, float *a2, double *a3, int a4, float a5)
{
  float v5;
  float v6;
  float v7;
  double v8;
  double v9;
  double v10;
  BOOL v11;
  double v12;
  double v13;
  uint64_t v14;

  if (*result == a4)
  {
    v6 = *((float *)result + 4);
    v5 = *((float *)result + 5);
    v7 = *((float *)result + 6);
    v8 = *((double *)result + 1);
    v9 = *((double *)result + 4);
  }
  else
  {
    *((_QWORD *)result + 1) = 0xBFF0000000000000;
    *((_QWORD *)result + 2) = 0;
    *((_DWORD *)result + 6) = 0;
    *((_QWORD *)result + 4) = 0;
    *((_QWORD *)result + 5) = 0;
    *((_DWORD *)result + 12) = 0;
    v7 = 0.0;
    *((_QWORD *)result + 7) = 0xBFF0000000000000;
    *((_QWORD *)result + 8) = 0;
    v8 = -1.0;
    v9 = 0.0;
    *((_DWORD *)result + 18) = 0;
    v5 = 0.0;
    v6 = 0.0;
    *result = a4;
  }
  *((float *)result + 4) = *a2 + v6;
  *((float *)result + 5) = a2[1] + v5;
  *((float *)result + 6) = a2[2] + v7;
  v10 = *a3;
  v11 = *a3 <= v8 || v8 <= 0.0;
  v12 = v10 - v8;
  v13 = a5;
  if (v11)
    v12 = v13;
  *((double *)result + 1) = v10;
  *((double *)result + 4) = v9 + v12;
  v14 = *(_QWORD *)a2;
  *((float *)result + 12) = a2[2];
  *((_QWORD *)result + 5) = v14;
  *((double *)result + 7) = v13;
  return result;
}

BOOL sub_1005E235C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _BOOL4 v17;
  _BOOL8 result;
  _BYTE *v19;
  float *v20;
  double v21;
  double v22;
  double v23;
  float v24;
  double v25;
  double v26;
  double v27;
  float v28;
  float v29;
  double v30;
  float v31;
  float v32;
  double v33;
  NSObject *v34;
  uint64_t v35;
  int v36;
  float v37;
  float v38;
  int v39;
  float v40;
  float v41;
  float v42;
  float v43;
  double v44;
  double v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  float v50;
  float v51;
  int v52;
  float v53;
  float v54;
  double v55;
  double v56;
  float v57;
  float v58;
  const char *v59;
  char *v60;
  NSObject *v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  char *v65;
  double v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  double v71;
  double v72;
  const char *v73;
  _QWORD *v74;
  NSObject *v75;
  double v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  NSObject *v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  uint64_t v94;
  float v95;
  NSObject *v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  int v100;
  float v101;
  double v102;
  double v103;
  float v104;
  double v105;
  float v106;
  uint64_t *v107;
  unint64_t v108;
  NSObject *v109;
  uint64_t v110;
  float v111;
  double v112;
  double v113;
  float v114;
  double v115;
  double v116;
  float v117;
  float v118;
  int v119;
  double v120;
  float v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  int v127;
  float v128;
  double v129;
  double v130;
  float v131;
  double v132;
  float v133;
  const char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  float v139;
  double v140;
  double v141;
  float v142;
  double v143;
  double v144;
  float v145;
  float v146;
  int v147;
  int v148;
  double v149;
  float v150;
  const char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  int v156;
  const char *v157;
  char *v158;
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  int v168;
  NSObject *v169;
  uint64_t v170;
  double v171;
  double v172;
  double v173;
  double v174;
  uint64_t v175;
  double v176;
  double v177;
  BOOL v178;
  double v179;
  NSObject *v180;
  double v181;
  double v182;
  int v183;
  uint64_t v184;
  float v185;
  double v186;
  double v187;
  double v188;
  double v189;
  double v190;
  float v191;
  double v192;
  double v193;
  double v194;
  double v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  _BOOL4 v200;
  const char *v201;
  char *v202;
  uint64_t v203;
  double v204;
  double v205;
  int v206;
  uint64_t v207;
  double v208;
  double v209;
  double v210;
  double v211;
  double v212;
  double v213;
  const char *v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  double v218;
  double v219;
  double v220;
  double v221;
  uint64_t v222;
  double v223;
  double v224;
  const char *v225;
  char *v226;
  double v227;
  const char *v228;
  char *v229;
  uint64_t v230;
  int v231;
  int v232;
  double v233;
  double v234;
  double v235;
  double v236;
  unsigned __int8 *v237;
  double v238;
  double v239;
  _QWORD *v240;
  uint64_t v241;
  unint64_t v242;
  _BYTE v243[12];
  __int16 v244;
  _BYTE v245[96];
  __int16 v246;
  double v247;
  _BYTE buf[110];
  __int16 v249;
  double v250;

  if (*a2 == a2[1])
    return 0;
  v2 = a2;
  v4 = sub_100B303DC();
  *(_DWORD *)buf = 1;
  v5 = sub_100B30608(v4, buf);
  v7 = *v2;
  v6 = v2[1];
  if (*v2 != v6)
  {
    v8 = v5;
    while (1)
    {
      v9 = *(double *)(v7 + 8);
      if (v9 <= 0.0 || v5 > 0.0 && vabdd_f64(v5, v9) > 600.0)
        break;
      v7 += 72;
      if (v7 == v6)
        goto LABEL_8;
    }
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_102147B30);
    v61 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      v62 = *(_QWORD *)(v7 + 8);
      *(_DWORD *)buf = 134349312;
      *(double *)&buf[4] = v8;
      *(_WORD *)&buf[12] = 2050;
      *(_QWORD *)&buf[14] = v62;
      _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEBUG, "InertialOdometry,ignoring IO data,unexpected MCT time-tag of IO data,current mct,%{public}.3f,IO mct,%{public}.3f", buf, 0x16u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_102147B30);
      v63 = *(_QWORD *)(v7 + 8);
      *(_DWORD *)v243 = 134349312;
      *(double *)&v243[4] = v8;
      v244 = 2050;
      *(_QWORD *)v245 = v63;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "InertialOdometry,ignoring IO data,unexpected MCT time-tag of IO data,current mct,%{public}.3f,IO mct,%{public}.3f", v243, 22);
      v65 = (char *)v64;
      sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::LCFusionInertialOdometry::IOSamplesUpdate(const std::vector<CLPIOSample> &)", "%s\n", v64);
      goto LABEL_53;
    }
    return result;
  }
LABEL_8:
  v10 = *(_QWORD *)(a1 + 400);
  *(_QWORD *)buf = 0xBFF0000000000000;
  if ((sub_1006B506C(v10, (double *)buf) & 1) != 0 || sub_1006B5410(*(_QWORD *)(a1 + 400)))
  {
    v11 = &qword_1022A0000;
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_102147B30);
    v12 = &qword_1022A0000;
    v13 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      v14 = *(_QWORD *)(v2[1] - 64);
      v15 = *(_QWORD *)(a1 + 400);
      *(_QWORD *)v243 = 0xBFF0000000000000;
      v16 = sub_1006B506C(v15, (double *)v243);
      v17 = sub_1006B5410(*(_QWORD *)(a1 + 400));
      *(_DWORD *)buf = 134349568;
      *(_QWORD *)&buf[4] = v14;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = v16;
      *(_WORD *)&buf[18] = 1026;
      *(_DWORD *)&buf[20] = v17;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "InertialOdometry,PDR,CM not pedestrian,ignoring IO data,IO mct,%{public}.3f,isVehicular,%{public}d,isCycling,%{public}d", buf, 0x18u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_102147B30);
      v196 = qword_1022A01B8;
      v197 = *(_QWORD *)(v2[1] - 64);
      v198 = *(_QWORD *)(a1 + 400);
      v242 = 0xBFF0000000000000;
      v199 = sub_1006B506C(v198, (double *)&v242);
      v200 = sub_1006B5410(*(_QWORD *)(a1 + 400));
      *(_DWORD *)v243 = 134349568;
      *(_QWORD *)&v243[4] = v197;
      v244 = 1026;
      *(_DWORD *)v245 = v199;
      *(_WORD *)&v245[4] = 1026;
      *(_DWORD *)&v245[6] = v200;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v196, 2, "InertialOdometry,PDR,CM not pedestrian,ignoring IO data,IO mct,%{public}.3f,isVehicular,%{public}d,isCycling,%{public}d", v243, 24);
      v202 = (char *)v201;
      sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::LCFusionInertialOdometry::IOSamplesUpdate(const std::vector<CLPIOSample> &)", "%s\n", v201);
      if (v202 != buf)
        free(v202);
    }
    result = 1;
    *(_BYTE *)(a1 + 64) = 1;
    *(_QWORD *)(a1 + 152) = 0xBFF0000000000000;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(_OWORD *)(a1 + 192) = 0u;
    *(_OWORD *)(a1 + 208) = 0u;
    *(_BYTE *)(a1 + 144) = 1;
    *(_DWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 72) = 0xBFF0000000000000;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 120) = 0xBFF0000000000000;
    *(_QWORD *)(a1 + 128) = 0;
    *(_DWORD *)(a1 + 136) = 0;
    v19 = (_BYTE *)v2[1];
    if ((_BYTE *)*v2 != v19)
    {
      v20 = (float *)(*v2 + 64);
      v21 = 0.3;
      v22 = 0.001;
      v23 = 2.0;
      do
      {
        *(_QWORD *)(a1 + 376) = 0;
        if (*((_BYTE *)v20 - 1))
        {
          v24 = *(v20 - 12);
          if (v24 > 0.0)
          {
            v25 = (float)(*(v20 - 9) / v24);
            v26 = *(double *)(a1 + 352);
            v27 = *((double *)v20 - 7);
            if (v26 > 0.0 && vabdd_f64(v26, v27) < v23)
              *(double *)(a1 + 376) = vabdd_f64(v25, *(double *)(a1 + 360));
            *(double *)(a1 + 352) = v27;
            *(double *)(a1 + 360) = v25;
            *(_QWORD *)(a1 + 368) = 0x3FB70A3D70A3D70ALL;
          }
        }
        if (*(_BYTE *)v20)
        {
          v28 = *(v20 - 12);
          if (v28 > 0.0)
          {
            *(_QWORD *)buf = *((_QWORD *)v20 - 4);
            *(float *)&buf[8] = *(v20 - 6);
            sub_1005E22A4((unsigned __int8 *)(a1 + 64), (float *)buf, (double *)v20 - 7, *((unsigned __int8 *)v20 - 3), v28);
            v29 = hypotf(*(v20 - 11), *(v20 - 10));
            v30 = *(double *)(a1 + 120);
            if (v30 > 0.0)
            {
              v31 = v29;
              v32 = *(v20 - 12);
              if (hypotf(*(float *)(a1 + 104), *(float *)(a1 + 108)) / v30 > v21)
              {
                v33 = (float)(v31 / v32);
                if (!*((_BYTE *)v20 - 1) || v33 < v22)
                {
                  if (v11[54] != -1)
                    dispatch_once(&qword_1022A01B0, &stru_102147B30);
                  v34 = v12[55];
                  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
                  {
                    v235 = v22;
                    v238 = v21;
                    v35 = *((_QWORD *)v20 - 7);
                    v36 = *((unsigned __int8 *)v20 - 1);
                    v37 = *(v20 - 11);
                    v38 = *(v20 - 10);
                    v39 = *(unsigned __int8 *)v20;
                    v41 = *(v20 - 9);
                    v40 = *(v20 - 8);
                    v43 = *(v20 - 7);
                    v42 = *(v20 - 6);
                    v44 = *(double *)(a1 + 120);
                    v45 = 0.0;
                    if (v44 > 0.0)
                      v45 = hypotf(*(float *)(a1 + 104), *(float *)(a1 + 108)) / v44;
                    *(_DWORD *)buf = 134351616;
                    *(_QWORD *)&buf[4] = v35;
                    *(_WORD *)&buf[12] = 1026;
                    *(_DWORD *)&buf[14] = v36;
                    *(_WORD *)&buf[18] = 2050;
                    *(double *)&buf[20] = v37;
                    *(_WORD *)&buf[28] = 2050;
                    *(double *)&buf[30] = v38;
                    *(_WORD *)&buf[38] = 2050;
                    *(double *)&buf[40] = v41;
                    *(_WORD *)&buf[48] = 1026;
                    *(_DWORD *)&buf[50] = v39;
                    *(_WORD *)&buf[54] = 2050;
                    *(double *)&buf[56] = v40;
                    *(_WORD *)&buf[64] = 2050;
                    *(double *)&buf[66] = v43;
                    *(_WORD *)&buf[74] = 2050;
                    *(double *)&buf[76] = v42;
                    *(_WORD *)&buf[84] = 2050;
                    *(double *)&buf[86] = v33;
                    *(_WORD *)&buf[94] = 2050;
                    *(double *)&buf[96] = v45;
                    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "InertialOdometry,PDR,VDR xcheck detected vehicular,mct,%{public}.3f,isPDRValid,%{public}d,dPosXYZ_m,%{public}.3f,%{public}.3f,%{public}.3f,isVDRValid,%{public}d,dVelXYZ_mps,%{public}.3f,%{public}.3f,%{public}.3f,GDis_m,%{public}.3f,GSpeedRate_mps2,%{public}.3f", buf, 0x68u);
                    v11 = &qword_1022A0000;
                    v12 = &qword_1022A0000;
                    v22 = v235;
                    v21 = v238;
                    v23 = 2.0;
                  }
                  if (sub_1001BFF7C(115, 2))
                  {
                    v236 = v22;
                    v239 = v21;
                    bzero(buf, 0x65CuLL);
                    if (v11[54] != -1)
                      dispatch_once(&qword_1022A01B0, &stru_102147B30);
                    v47 = qword_1022A01B8;
                    v48 = *((_QWORD *)v20 - 7);
                    v49 = *((unsigned __int8 *)v20 - 1);
                    v50 = *(v20 - 11);
                    v51 = *(v20 - 10);
                    v52 = *(unsigned __int8 *)v20;
                    v54 = *(v20 - 9);
                    v53 = *(v20 - 8);
                    v55 = *(double *)(a1 + 120);
                    v56 = 0.0;
                    v57 = *(v20 - 7);
                    v58 = *(v20 - 6);
                    if (v55 > 0.0)
                      v56 = hypotf(*(float *)(a1 + 104), *(float *)(a1 + 108)) / v55;
                    *(_DWORD *)v243 = 134351616;
                    *(_QWORD *)&v243[4] = v48;
                    v244 = 1026;
                    *(_DWORD *)v245 = v49;
                    *(_WORD *)&v245[4] = 2050;
                    *(double *)&v245[6] = v50;
                    *(_WORD *)&v245[14] = 2050;
                    *(double *)&v245[16] = v51;
                    *(_WORD *)&v245[24] = 2050;
                    *(double *)&v245[26] = v54;
                    *(_WORD *)&v245[34] = 1026;
                    *(_DWORD *)&v245[36] = v52;
                    *(_WORD *)&v245[40] = 2050;
                    *(double *)&v245[42] = v53;
                    *(_WORD *)&v245[50] = 2050;
                    *(double *)&v245[52] = v57;
                    *(_WORD *)&v245[60] = 2050;
                    *(double *)&v245[62] = v58;
                    *(_WORD *)&v245[70] = 2050;
                    *(double *)&v245[72] = v33;
                    *(_WORD *)&v245[80] = 2050;
                    *(double *)&v245[82] = v56;
                    LODWORD(v230) = 104;
                    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v47, 2, "InertialOdometry,PDR,VDR xcheck detected vehicular,mct,%{public}.3f,isPDRValid,%{public}d,dPosXYZ_m,%{public}.3f,%{public}.3f,%{public}.3f,isVDRValid,%{public}d,dVelXYZ_mps,%{public}.3f,%{public}.3f,%{public}.3f,GDis_m,%{public}.3f,GSpeedRate_mps2,%{public}.3f", v243, v230);
                    v60 = (char *)v59;
                    sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::LCFusionInertialOdometry::IOSamplesUpdate(const std::vector<CLPIOSample> &)", "%s\n", v59);
                    v11 = &qword_1022A0000;
                    v12 = &qword_1022A0000;
                    v22 = v236;
                    v21 = v239;
                    v23 = 2.0;
                    if (v60 != buf)
                      free(v60);
                  }
                  *(_DWORD *)(a1 + 392) = 4;
                  *(_QWORD *)(a1 + 384) = *((_QWORD *)v20 - 7);
                }
              }
            }
          }
        }
        v46 = v20 + 2;
        v20 += 18;
      }
      while (v46 != v19);
      return 1;
    }
    return result;
  }
  v66 = *(double *)(a1 + 56);
  v240 = v2;
  if (v66 < 0.0)
  {
    v67 = 0;
LABEL_81:
    v77 = 0x8E38E38E38E38E39 * ((uint64_t)(v2[1] - *v2) >> 3) - v67;
    v78 = *(_QWORD *)(a1 + 40);
    if (v78 > 0x1E || v77 >= 30 - v78)
    {
      v79 = v78 + v77;
      v80 = v79 - 30;
      if (v79 != 30)
      {
        v81 = *(_QWORD *)(a1 + 32);
        v82 = *(_QWORD *)(a1 + 8);
        v83 = (_QWORD *)(v82 + 8 * (v81 / 0x38));
        if (*(_QWORD *)(a1 + 16) == v82)
          v84 = 0;
        else
          v84 = (char *)(*v83 + 72 * (v81 % 0x38));
        *(_QWORD *)buf = v82 + 8 * (v81 / 0x38);
        *(_QWORD *)&buf[8] = v84;
        sub_1005E5C2C(buf, v80);
        sub_1005E4270((_QWORD *)a1, v83, v84, *(_QWORD **)buf, *(char **)&buf[8]);
      }
    }
    *(_BYTE *)(a1 + 144) = 1;
    *(_QWORD *)(a1 + 152) = 0xBFF0000000000000;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(_OWORD *)(a1 + 192) = 0u;
    *(_OWORD *)(a1 + 208) = 0u;
    *(_BYTE *)(a1 + 64) = 1;
    v237 = (unsigned __int8 *)(a1 + 144);
    *(_DWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 72) = 0xBFF0000000000000;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 120) = 0xBFF0000000000000;
    *(_QWORD *)(a1 + 128) = 0;
    *(_DWORD *)(a1 + 136) = 0;
    v85 = *v2;
    if (v67 >= 0x8E38E38E38E38E39 * ((uint64_t)(v2[1] - *v2) >> 3))
      goto LABEL_139;
    v241 = 0;
    v86 = 72 * v67 + 64;
    do
    {
      v87 = v85 + v86;
      if (!*(_BYTE *)(v85 + v86 - 1))
        goto LABEL_100;
      v88 = *(unsigned __int8 *)(v87 - 3);
      if (v88 != *(unsigned __int8 *)(a1 + 48))
      {
        if (qword_1022A01B0 != -1)
          dispatch_once(&qword_1022A01B0, &stru_102147B30);
        v89 = qword_1022A01B8;
        if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
        {
          v90 = *(_QWORD *)(a1 + 56);
          v91 = *(_QWORD *)(v85 + v86 - 56);
          v92 = *(unsigned __int8 *)(a1 + 48);
          v93 = *(unsigned __int8 *)(v87 - 3);
          *(_DWORD *)buf = 134349824;
          *(_QWORD *)&buf[4] = v90;
          *(_WORD *)&buf[12] = 2050;
          *(_QWORD *)&buf[14] = v91;
          *(_WORD *)&buf[22] = 1026;
          *(_DWORD *)&buf[24] = v92;
          *(_WORD *)&buf[28] = 1026;
          *(_DWORD *)&buf[30] = v93;
          _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEBUG, "InertialOdometry,ref frame change detected;prev IO mct,%{public}.3f,curr IO mct,%{public}.3f,prevRefF,%{publ"
            "ic}d,currRefF,%{public}d",
            buf,
            0x22u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A01B0 != -1)
            dispatch_once(&qword_1022A01B0, &stru_102147B30);
          v153 = *(_QWORD *)(a1 + 56);
          v154 = *(_QWORD *)(v85 + v86 - 56);
          v155 = *(unsigned __int8 *)(a1 + 48);
          v156 = *(unsigned __int8 *)(v87 - 3);
          *(_DWORD *)v243 = 134349824;
          *(_QWORD *)&v243[4] = v153;
          v244 = 2050;
          *(_QWORD *)v245 = v154;
          *(_WORD *)&v245[8] = 1026;
          *(_DWORD *)&v245[10] = v155;
          *(_WORD *)&v245[14] = 1026;
          *(_DWORD *)&v245[16] = v156;
          LODWORD(v230) = 34;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "InertialOdometry,ref frame change detected;prev IO mct,%{public}.3f,curr IO mct,%{public}.3f,prevRefF,%{publ"
            "ic}d,currRefF,%{public}d",
            v243,
            v230);
          v158 = (char *)v157;
          sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::LCFusionInertialOdometry::IOSamplesUpdate(const std::vector<CLPIOSample> &)", "%s\n", v157);
          if (v158 != buf)
            free(v158);
        }
        sub_1005E4154(a1);
        *(_QWORD *)(a1 + 328) = 0xBFF0000000000000;
        v88 = *(unsigned __int8 *)(v87 - 3);
        *(_BYTE *)(a1 + 48) = v88;
        if (!*(_BYTE *)(v87 - 1))
          goto LABEL_100;
      }
      v94 = v85 + v86;
      v95 = *(float *)(v85 + v86 - 48);
      if (v95 <= 0.0 || (float)(hypotf(*(float *)(v94 - 44), *(float *)(v94 - 40)) / v95) <= 9.0)
      {
        *(_QWORD *)buf = *(_QWORD *)(v94 - 32);
        *(_DWORD *)&buf[8] = *(_DWORD *)(v94 - 24);
        v107 = (uint64_t *)(v94 - 56);
        sub_1005E22A4((unsigned __int8 *)(a1 + 64), (float *)buf, (double *)(v94 - 56), v88, v95);
        *(_QWORD *)buf = *(_QWORD *)(v94 - 44);
        *(_DWORD *)&buf[8] = *(_DWORD *)(v94 - 36);
        sub_1005E2190(v237, (float *)buf, (double *)(v94 - 56), *(unsigned __int8 *)(v87 - 3), *(float *)(v94 - 48));
        *(_QWORD *)buf = *(_QWORD *)(v94 - 44);
        *(_DWORD *)&buf[8] = *(_DWORD *)(v94 - 36);
        sub_1005E2190((unsigned __int8 *)(a1 + 232), (float *)buf, (double *)(v94 - 56), *(unsigned __int8 *)(v87 - 3), *(float *)(v94 - 48));
        sub_1005E4518(a1, v87 - 64);
        sub_1005E4AD8((_QWORD *)a1, v87 - 64);
        v108 = *(_QWORD *)(a1 + 40);
        if (v108 >= 0x1E)
        {
          ++*(_QWORD *)(a1 + 32);
          *(_QWORD *)(a1 + 40) = v108 - 1;
          sub_100554D9C(a1, 1);
        }
        if (qword_1022A01B0 != -1)
          dispatch_once(&qword_1022A01B0, &stru_102147B30);
        v109 = qword_1022A01B8;
        if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
        {
          v110 = *v107;
          v111 = *(float *)(v94 - 44);
          v112 = *(float *)(v94 - 48);
          v231 = *(unsigned __int8 *)(v87 - 1);
          v232 = *(unsigned __int8 *)(v87 - 3);
          v113 = v111;
          v114 = *(float *)(v94 - 40);
          v115 = v114;
          v116 = *(float *)(v94 - 36);
          v117 = *(float *)(v94 - 32);
          v118 = *(float *)(v94 - 28);
          v233 = *(float *)(v94 - 24);
          v119 = *(unsigned __int8 *)(v85 + v86);
          v120 = hypotf(v111, v114);
          v121 = hypotf(v117, v118);
          *(_DWORD *)buf = 134352128;
          *(_QWORD *)&buf[4] = v110;
          v2 = v240;
          *(_WORD *)&buf[12] = 1026;
          *(_DWORD *)&buf[14] = v232;
          *(_WORD *)&buf[18] = 2050;
          *(double *)&buf[20] = v112;
          *(_WORD *)&buf[28] = 1026;
          *(_DWORD *)&buf[30] = v231;
          *(_WORD *)&buf[34] = 2050;
          *(double *)&buf[36] = v113;
          *(_WORD *)&buf[44] = 2050;
          *(double *)&buf[46] = v115;
          *(_WORD *)&buf[54] = 2050;
          *(double *)&buf[56] = v116;
          *(_WORD *)&buf[64] = 1026;
          *(_DWORD *)&buf[66] = v119;
          *(_WORD *)&buf[70] = 2050;
          *(double *)&buf[72] = v117;
          *(_WORD *)&buf[80] = 2050;
          *(double *)&buf[82] = v118;
          *(_WORD *)&buf[90] = 2050;
          *(double *)&buf[92] = v233;
          *(_WORD *)&buf[100] = 2050;
          *(double *)&buf[102] = v120;
          v249 = 2050;
          v250 = v121;
          _os_log_impl((void *)&_mh_execute_header, v109, OS_LOG_TYPE_DEBUG, "InertialOdometry,PDR,consumed IO sample,mct,%{public}.3f,RefF,%{public}d,sample_interval_s,%{public}.3f,isPDRValid,%{public}d,dPosXYZ_m,%{public}.3f,%{public}.3f,%{public}.3f,isVDRValid,%{public}d,dVelXYZ_mps,%{public}.3f,%{public}.3f,%{public}.3f,GDis,%{public}.3f,GSpeedRate,%{public}.3f", buf, 0x78u);
        }
        ++v241;
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A01B0 != -1)
            dispatch_once(&qword_1022A01B0, &stru_102147B30);
          v136 = qword_1022A01B8;
          v137 = *v107;
          v138 = *(unsigned __int8 *)(v87 - 3);
          v139 = *(float *)(v94 - 44);
          v140 = *(float *)(v94 - 48);
          v141 = v139;
          v142 = *(float *)(v94 - 40);
          v143 = v142;
          v144 = *(float *)(v94 - 36);
          v145 = *(float *)(v94 - 32);
          v146 = *(float *)(v94 - 28);
          v234 = *(float *)(v94 - 24);
          v147 = *(unsigned __int8 *)(v87 - 1);
          v148 = *(unsigned __int8 *)(v85 + v86);
          v149 = hypotf(v139, v142);
          v150 = hypotf(v145, v146);
          *(_DWORD *)v243 = 134352128;
          *(_QWORD *)&v243[4] = v137;
          v244 = 1026;
          *(_DWORD *)v245 = v138;
          *(_WORD *)&v245[4] = 2050;
          *(double *)&v245[6] = v140;
          *(_WORD *)&v245[14] = 1026;
          *(_DWORD *)&v245[16] = v147;
          *(_WORD *)&v245[20] = 2050;
          *(double *)&v245[22] = v141;
          *(_WORD *)&v245[30] = 2050;
          *(double *)&v245[32] = v143;
          *(_WORD *)&v245[40] = 2050;
          *(double *)&v245[42] = v144;
          *(_WORD *)&v245[50] = 1026;
          *(_DWORD *)&v245[52] = v148;
          *(_WORD *)&v245[56] = 2050;
          *(double *)&v245[58] = v145;
          *(_WORD *)&v245[66] = 2050;
          *(double *)&v245[68] = v146;
          *(_WORD *)&v245[76] = 2050;
          *(double *)&v245[78] = v234;
          *(_WORD *)&v245[86] = 2050;
          *(double *)&v245[88] = v149;
          v246 = 2050;
          v247 = v150;
          LODWORD(v230) = 120;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v136, 2, "InertialOdometry,PDR,consumed IO sample,mct,%{public}.3f,RefF,%{public}d,sample_interval_s,%{public}.3f,isPDRValid,%{public}d,dPosXYZ_m,%{public}.3f,%{public}.3f,%{public}.3f,isVDRValid,%{public}d,dVelXYZ_mps,%{public}.3f,%{public}.3f,%{public}.3f,GDis,%{public}.3f,GSpeedRate,%{public}.3f", v243, v230);
          v152 = (char *)v151;
          sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::LCFusionInertialOdometry::IOSamplesUpdate(const std::vector<CLPIOSample> &)", "%s\n", v151);
          v2 = v240;
          if (v152 != buf)
            free(v152);
        }
      }
      else
      {
LABEL_100:
        if (qword_1022A01B0 != -1)
          dispatch_once(&qword_1022A01B0, &stru_102147B30);
        v96 = qword_1022A01B8;
        if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
        {
          v97 = *(_QWORD *)(a1 + 56);
          v98 = *(_QWORD *)(v85 + v86 - 56);
          v99 = *(unsigned __int8 *)(v85 + v86 - 3);
          v100 = *(unsigned __int8 *)(v87 - 1);
          v101 = *(float *)(v85 + v86 - 44);
          v102 = *(float *)(v85 + v86 - 48);
          v103 = v101;
          v104 = *(float *)(v85 + v86 - 40);
          v105 = v104;
          v106 = hypotf(v101, v104);
          *(_DWORD *)buf = 134350848;
          *(_QWORD *)&buf[4] = v97;
          *(_WORD *)&buf[12] = 2050;
          *(_QWORD *)&buf[14] = v98;
          *(_WORD *)&buf[22] = 1026;
          *(_DWORD *)&buf[24] = v99;
          *(_WORD *)&buf[28] = 1026;
          *(_DWORD *)&buf[30] = v100;
          v2 = v240;
          *(_WORD *)&buf[34] = 2050;
          *(double *)&buf[36] = v102;
          *(_WORD *)&buf[44] = 2050;
          *(double *)&buf[46] = v103;
          *(_WORD *)&buf[54] = 2050;
          *(double *)&buf[56] = v105;
          *(_WORD *)&buf[64] = 2050;
          *(double *)&buf[66] = v106;
          _os_log_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_DEBUG, "InertialOdometry,PDR,rejected dPos invalid/outlier sample;prev IO mct,%{public}.3f,curr IO mct,%{public}.3f,"
            "RefF,%{public}d,isValid,%{public}d,sample_interval,%{public}.3f,dPosX_m,%{public}.3f,dPosY_m,%{public}.3f,dP"
            "osXYnorm,%{public}.3f",
            buf,
            0x4Au);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A01B0 != -1)
            dispatch_once(&qword_1022A01B0, &stru_102147B30);
          v122 = qword_1022A01B8;
          v123 = *(_QWORD *)(a1 + 56);
          v124 = v85 + v86;
          v125 = *(_QWORD *)(v85 + v86 - 56);
          v126 = *(unsigned __int8 *)(v85 + v86 - 3);
          v127 = *(unsigned __int8 *)(v87 - 1);
          v128 = *(float *)(v124 - 44);
          v129 = *(float *)(v124 - 48);
          v130 = v128;
          v131 = *(float *)(v124 - 40);
          v132 = v131;
          v133 = hypotf(v128, v131);
          *(_DWORD *)v243 = 134350848;
          *(_QWORD *)&v243[4] = v123;
          v244 = 2050;
          *(_QWORD *)v245 = v125;
          *(_WORD *)&v245[8] = 1026;
          *(_DWORD *)&v245[10] = v126;
          *(_WORD *)&v245[14] = 1026;
          *(_DWORD *)&v245[16] = v127;
          *(_WORD *)&v245[20] = 2050;
          *(double *)&v245[22] = v129;
          *(_WORD *)&v245[30] = 2050;
          *(double *)&v245[32] = v130;
          *(_WORD *)&v245[40] = 2050;
          *(double *)&v245[42] = v132;
          *(_WORD *)&v245[50] = 2050;
          *(double *)&v245[52] = v133;
          LODWORD(v230) = 74;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v122, 2, "InertialOdometry,PDR,rejected dPos invalid/outlier sample;prev IO mct,%{public}.3f,curr IO mct,%{public}.3f,"
            "RefF,%{public}d,isValid,%{public}d,sample_interval,%{public}.3f,dPosX_m,%{public}.3f,dPosY_m,%{public}.3f,dP"
            "osXYnorm,%{public}.3f",
            v243,
            v230);
          v135 = (char *)v134;
          sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::LCFusionInertialOdometry::IOSamplesUpdate(const std::vector<CLPIOSample> &)", "%s\n", v134);
          v2 = v240;
          if (v135 != buf)
            free(v135);
        }
        ++*(_DWORD *)(a1 + 436);
      }
      ++v67;
      v85 = *v2;
      v86 += 72;
    }
    while (v67 < 0x8E38E38E38E38E39 * ((uint64_t)(v2[1] - *v2) >> 3));
    if (v241)
    {
      v159 = *(double *)(a1 + 192) + *(double *)(a1 + 184);
      v160 = 0.0;
      v161 = 0.0;
      if (v159 > 0.0)
        v161 = (float)((float)(*(float *)(a1 + 180) + *(float *)(a1 + 168)) - *(float *)(a1 + 220)) / v159;
      v162 = *(double *)(a1 + 152);
      v163 = v162 - v159;
      *(_QWORD *)(a1 + 376) = 0;
      v164 = *(double *)(a1 + 352);
      if (v164 > 0.0 && vabdd_f64(v164, v163) < 2.0)
      {
        v160 = vabdd_f64(v161, *(double *)(a1 + 360));
        *(double *)(a1 + 376) = v160;
      }
      v165 = hypotf((float)(*(float *)(a1 + 172) + *(float *)(a1 + 160)) - *(float *)(a1 + 212), (float)(*(float *)(a1 + 176) + *(float *)(a1 + 164)) - *(float *)(a1 + 216));
      if (v165 >= 0.001)
      {
        if (v159 * 0.25 <= v165)
        {
          if (v159 * 3.5 >= v165)
            v168 = 3;
          else
            v168 = 4;
        }
        else
        {
          v168 = 2;
        }
        *(_DWORD *)(a1 + 392) = v168;
      }
      else
      {
        v166 = *(double *)(a1 + 96);
        if (v166 > 0.0 && hypotf(*(float *)(a1 + 80), *(float *)(a1 + 84)) / v166 > 0.3
          || (v167 = *(double *)(a1 + 120), v167 > 0.0)
          && hypotf(*(float *)(a1 + 104), *(float *)(a1 + 108)) / v167 > 0.3
          || v160 > 0.3)
        {
          *(_DWORD *)(a1 + 392) = 4;
          if (qword_1022A01B0 != -1)
            dispatch_once(&qword_1022A01B0, &stru_102147B30);
          v169 = qword_1022A01B8;
          if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
          {
            v170 = *(_QWORD *)(a1 + 152);
            v171 = *(double *)(a1 + 120);
            v172 = 0.0;
            v173 = 0.0;
            if (v171 > 0.0)
              v173 = hypotf(*(float *)(a1 + 104), *(float *)(a1 + 108)) / v171;
            v174 = *(double *)(a1 + 96);
            if (v174 > 0.0)
              v172 = hypotf(*(float *)(a1 + 80), *(float *)(a1 + 84)) / v174;
            v175 = *(_QWORD *)(a1 + 360);
            v176 = *(double *)(a1 + 352);
            v177 = vabdd_f64(v163, v176);
            v178 = v176 <= 0.0;
            v179 = -1.0;
            if (!v178)
              v179 = v177;
            *(_DWORD *)buf = 134350592;
            *(_QWORD *)&buf[4] = v170;
            *(_WORD *)&buf[12] = 2050;
            *(double *)&buf[14] = v173;
            *(_WORD *)&buf[22] = 2050;
            *(double *)&buf[24] = v172;
            *(_WORD *)&buf[32] = 2050;
            *(double *)&buf[34] = v174;
            *(_WORD *)&buf[42] = 2050;
            *(_QWORD *)&buf[44] = v175;
            *(_WORD *)&buf[52] = 2050;
            *(double *)&buf[54] = v161;
            *(_WORD *)&buf[62] = 2050;
            *(double *)&buf[64] = v179;
            _os_log_impl((void *)&_mh_execute_header, v169, OS_LOG_TYPE_DEBUG, "InertialOdometry,PDR,VDR xcheck detected non-stationary,mct,%{public}.3f,horizSpeedRate_mps2,%{public}.3f,horizSpeedRateCumSum_mps2,%{public}.3f,dtCumSum_s,%{public}.3f,lastPDRVVel_mps,%{public}.3f,currPDRVVel,%{public}.3f,VVel_dt_s,%{public}.3f", buf, 0x48u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A01B0 != -1)
              dispatch_once(&qword_1022A01B0, &stru_102147B30);
            v216 = qword_1022A01B8;
            v217 = *(_QWORD *)(a1 + 152);
            v218 = *(double *)(a1 + 120);
            v219 = 0.0;
            v220 = 0.0;
            if (v218 > 0.0)
              v220 = hypotf(*(float *)(a1 + 104), *(float *)(a1 + 108)) / v218;
            v221 = *(double *)(a1 + 96);
            if (v221 > 0.0)
              v219 = hypotf(*(float *)(a1 + 80), *(float *)(a1 + 84)) / v221;
            v222 = *(_QWORD *)(a1 + 360);
            v223 = *(double *)(a1 + 352);
            v224 = fabs(v163 - v223);
            if (v223 <= 0.0)
              v224 = -1.0;
            *(_DWORD *)v243 = 134350592;
            *(_QWORD *)&v243[4] = v217;
            v244 = 2050;
            *(double *)v245 = v220;
            *(_WORD *)&v245[8] = 2050;
            *(double *)&v245[10] = v219;
            *(_WORD *)&v245[18] = 2050;
            *(double *)&v245[20] = v221;
            *(_WORD *)&v245[28] = 2050;
            *(_QWORD *)&v245[30] = v222;
            *(_WORD *)&v245[38] = 2050;
            *(double *)&v245[40] = v161;
            *(_WORD *)&v245[48] = 2050;
            *(double *)&v245[50] = v224;
            LODWORD(v230) = 72;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v216, 2, "InertialOdometry,PDR,VDR xcheck detected non-stationary,mct,%{public}.3f,horizSpeedRate_mps2,%{public}.3f,horizSpeedRateCumSum_mps2,%{public}.3f,dtCumSum_s,%{public}.3f,lastPDRVVel_mps,%{public}.3f,currPDRVVel,%{public}.3f,VVel_dt_s,%{public}.3f", v243, v230);
            v226 = (char *)v225;
            sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::LCFusionInertialOdometry::IOSamplesUpdate(const std::vector<CLPIOSample> &)", "%s\n", v225);
            if (v226 != buf)
              free(v226);
            v2 = v240;
          }
          ++*(_DWORD *)(a1 + 424);
          v162 = *(double *)(a1 + 152);
        }
        else
        {
          *(_DWORD *)(a1 + 392) = 1;
          ++*(_DWORD *)(a1 + 428);
        }
      }
      *(double *)(a1 + 384) = v162;
    }
    else
    {
LABEL_139:
      *(_QWORD *)(a1 + 384) = 0xBFF0000000000000;
      *(_DWORD *)(a1 + 392) = 0;
    }
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_102147B30);
    v180 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      v181 = *(double *)(a1 + 56);
      v182 = *(double *)(a1 + 152);
      v183 = *(_DWORD *)(a1 + 392);
      v184 = *(_QWORD *)(a1 + 96);
      v185 = hypotf(*(float *)(a1 + 80) + *(float *)(a1 + 128), *(float *)(a1 + 84) + *(float *)(a1 + 132));
      v186 = *(double *)(a1 + 192) + *(double *)(a1 + 184);
      v187 = v185;
      v188 = hypotf((float)(*(float *)(a1 + 172) + *(float *)(a1 + 160)) - *(float *)(a1 + 212), (float)(*(float *)(a1 + 176) + *(float *)(a1 + 164)) - *(float *)(a1 + 216));
      v189 = (float)((float)(*(float *)(a1 + 180) + *(float *)(a1 + 168)) - *(float *)(a1 + 220));
      v190 = *(double *)(a1 + 280) + *(double *)(a1 + 272);
      v191 = hypotf((float)(*(float *)(a1 + 260) + *(float *)(a1 + 248)) - *(float *)(a1 + 300), (float)(*(float *)(a1 + 264) + *(float *)(a1 + 252)) - *(float *)(a1 + 304));
      *(_DWORD *)buf = 134351616;
      *(double *)&buf[4] = v181;
      *(_WORD *)&buf[12] = 2050;
      *(double *)&buf[14] = v182;
      *(_WORD *)&buf[22] = 2050;
      *(_QWORD *)&buf[24] = vabdd_f64(v182, v181);
      *(_WORD *)&buf[32] = 1026;
      *(_DWORD *)&buf[34] = v183;
      *(_WORD *)&buf[38] = 2050;
      *(_QWORD *)&buf[40] = v184;
      *(_WORD *)&buf[48] = 2050;
      *(double *)&buf[50] = v187;
      *(_WORD *)&buf[58] = 2050;
      *(double *)&buf[60] = v186;
      *(_WORD *)&buf[68] = 2050;
      *(double *)&buf[70] = v188;
      *(_WORD *)&buf[78] = 2050;
      *(double *)&buf[80] = v189;
      *(_WORD *)&buf[88] = 2050;
      *(double *)&buf[90] = v190;
      *(_WORD *)&buf[98] = 2050;
      *(double *)&buf[100] = v191;
      _os_log_impl((void *)&_mh_execute_header, v180, OS_LOG_TYPE_DEBUG, "InertialOdometry,Batch IO cumsum,prev IO mct,%{public}.3f,curr IO mct,%{public}.3f,dTime,%{public}.3f,IO_Context,%{public}d,HorizSpeed_dt_s,%{public}.3f,HSpeed_mps,%{public}.3f,GDistMoved_dt_s,%{public}.3f,GDis_m,%{public}.3f,VDis_m,%{public}.3f,CumSumGDistMoved_dt_s,%{public}.3f,CumSumGDist_m,%{public}.3f", buf, 0x6Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_102147B30);
      v203 = qword_1022A01B8;
      v204 = *(double *)(a1 + 56);
      v205 = *(double *)(a1 + 152);
      v206 = *(_DWORD *)(a1 + 392);
      v207 = *(_QWORD *)(a1 + 96);
      v208 = hypotf(*(float *)(a1 + 80) + *(float *)(a1 + 128), *(float *)(a1 + 84) + *(float *)(a1 + 132));
      v209 = *(double *)(a1 + 192) + *(double *)(a1 + 184);
      v210 = sub_1005E4BE8((float *)v237);
      v211 = (float)((float)(*(float *)(a1 + 180) + *(float *)(a1 + 168)) - *(float *)(a1 + 220));
      v212 = *(double *)(a1 + 280) + *(double *)(a1 + 272);
      v213 = sub_1005E4BE8((float *)(a1 + 232));
      *(_DWORD *)v243 = 134351616;
      *(double *)&v243[4] = v204;
      v244 = 2050;
      *(double *)v245 = v205;
      *(_WORD *)&v245[8] = 2050;
      *(_QWORD *)&v245[10] = vabdd_f64(v205, v204);
      *(_WORD *)&v245[18] = 1026;
      *(_DWORD *)&v245[20] = v206;
      *(_WORD *)&v245[24] = 2050;
      *(_QWORD *)&v245[26] = v207;
      *(_WORD *)&v245[34] = 2050;
      *(double *)&v245[36] = v208;
      *(_WORD *)&v245[44] = 2050;
      *(double *)&v245[46] = v209;
      *(_WORD *)&v245[54] = 2050;
      *(double *)&v245[56] = v210;
      *(_WORD *)&v245[64] = 2050;
      *(double *)&v245[66] = v211;
      *(_WORD *)&v245[74] = 2050;
      *(double *)&v245[76] = v212;
      *(_WORD *)&v245[84] = 2050;
      *(double *)&v245[86] = v213;
      LODWORD(v230) = 108;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v203, 2, "InertialOdometry,Batch IO cumsum,prev IO mct,%{public}.3f,curr IO mct,%{public}.3f,dTime,%{public}.3f,IO_Context,%{public}d,HorizSpeed_dt_s,%{public}.3f,HSpeed_mps,%{public}.3f,GDistMoved_dt_s,%{public}.3f,GDis_m,%{public}.3f,VDis_m,%{public}.3f,CumSumGDistMoved_dt_s,%{public}.3f,CumSumGDist_m,%{public}.3f", v243, v230);
      v215 = (char *)v214;
      sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::LCFusionInertialOdometry::IOSamplesUpdate(const std::vector<CLPIOSample> &)", "%s\n", v214);
      if (v215 != buf)
        free(v215);
      v2 = v240;
    }
    v192 = *(double *)(v2[1] - 64);
    *(double *)(a1 + 56) = v192;
    v193 = *(double *)(a1 + 192) + *(double *)(a1 + 184);
    if (v193 <= 0.0)
    {
      v194 = 0.0;
      v195 = -1.0;
      v192 = -1.0;
    }
    else
    {
      v194 = (float)((float)(*(float *)(a1 + 180) + *(float *)(a1 + 168)) - *(float *)(a1 + 220)) / v193;
      v195 = 0.09;
    }
    *(double *)(a1 + 352) = v192;
    *(double *)(a1 + 360) = v194;
    result = 1;
    *(double *)(a1 + 368) = v195;
    return result;
  }
  v68 = v2[1];
  if (v66 < *(double *)(v68 - 64))
  {
    v69 = *v2;
    if (*v2 == v68)
    {
      v67 = 0;
    }
    else
    {
      v67 = 0;
      do
      {
        if (v66 < *(double *)(v69 + 8))
          break;
        ++v67;
        v69 += 72;
      }
      while (v69 != v68);
    }
    v74 = *(_QWORD **)(a1 + 400);
    *(_QWORD *)buf = 0xBFF0000000000000;
    if ((sub_1006B4F00(v74, (double *)buf) & 1) == 0
      && vabdd_f64(*(double *)(*v2 + 72 * v67 + 8), *(double *)(a1 + 56)) > 300.0)
    {
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_102147B30);
      v75 = qword_1022A01B8;
      if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
      {
        v76 = *(double *)(a1 + 56);
        *(_QWORD *)&buf[14] = *(_QWORD *)(*v2 + 72 * v67 + 8);
        *(double *)&buf[4] = v76;
        *(_DWORD *)buf = 134349568;
        *(_WORD *)&buf[12] = 2050;
        *(_WORD *)&buf[22] = 2050;
        *(_QWORD *)&buf[24] = vabdd_f64(*(double *)&buf[14], v76);
        _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEBUG, "InertialOdometry,large gap in IO data while not static,resetting,prev IO mct,%{public}.3f,curr IO mct,%{public}.3f,dTime,%{public}.3f", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01B0 != -1)
          dispatch_once(&qword_1022A01B0, &stru_102147B30);
        v227 = *(double *)(a1 + 56);
        *(_QWORD *)v245 = *(_QWORD *)(*v2 + 72 * v67 + 8);
        *(double *)&v243[4] = v227;
        *(_DWORD *)v243 = 134349568;
        v244 = 2050;
        *(_WORD *)&v245[8] = 2050;
        *(_QWORD *)&v245[10] = vabdd_f64(*(double *)v245, v227);
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "InertialOdometry,large gap in IO data while not static,resetting,prev IO mct,%{public}.3f,curr IO mct,%{public}.3f,dTime,%{public}.3f", v243, 32);
        v229 = (char *)v228;
        sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::LCFusionInertialOdometry::IOSamplesUpdate(const std::vector<CLPIOSample> &)", "%s\n", v228);
        if (v229 != buf)
          free(v229);
      }
      ++*(_DWORD *)(a1 + 432);
      sub_1005E4154(a1);
    }
    goto LABEL_81;
  }
  if (qword_1022A01B0 != -1)
    dispatch_once(&qword_1022A01B0, &stru_102147B30);
  v70 = qword_1022A01B8;
  if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
  {
    v71 = *(double *)(a1 + 56);
    *(_QWORD *)&buf[14] = *(_QWORD *)(v2[1] - 64);
    *(double *)&buf[4] = v71;
    *(_DWORD *)buf = 134349568;
    *(_WORD *)&buf[12] = 2050;
    *(_WORD *)&buf[22] = 2050;
    *(double *)&buf[24] = *(double *)&buf[14] - v71;
    _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEBUG, "InertialOdometry,ignoring received overlapping IO data,prev IO mct,%{public}.3f,curr IO mct,%{public}.3f,dTime,%{public}.3f", buf, 0x20u);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_102147B30);
    v72 = *(double *)(a1 + 56);
    *(_QWORD *)v245 = *(_QWORD *)(v2[1] - 64);
    *(double *)&v243[4] = v72;
    *(_DWORD *)v243 = 134349568;
    v244 = 2050;
    *(_WORD *)&v245[8] = 2050;
    *(double *)&v245[10] = *(double *)v245 - v72;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "InertialOdometry,ignoring received overlapping IO data,prev IO mct,%{public}.3f,curr IO mct,%{public}.3f,dTime,%{public}.3f", v243, 32);
    v65 = (char *)v73;
    sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::LCFusionInertialOdometry::IOSamplesUpdate(const std::vector<CLPIOSample> &)", "%s\n", v73);
LABEL_53:
    if (v65 != buf)
      free(v65);
    return 0;
  }
  return result;
}

void sub_1005E413C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  _Unwind_Resume(a1);
}

double sub_1005E4154(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  v2 = *(void ***)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v5 = *(_QWORD *)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = v5 - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v6 = 28;
  }
  else
  {
    if (v4 >> 3 != 2)
      goto LABEL_8;
    v6 = 56;
  }
  *(_QWORD *)(a1 + 32) = v6;
LABEL_8:
  if (*(_BYTE *)(a1 + 416))
    *(_BYTE *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 320) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 336) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 56) = 0xBFF0000000000000;
  *(_BYTE *)(a1 + 64) = 1;
  *(_DWORD *)(a1 + 65) = 0;
  *(_DWORD *)(a1 + 68) = 0;
  *(_QWORD *)(a1 + 72) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 96) = 0uLL;
  *(_DWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 120) = 0uLL;
  *(_BYTE *)(a1 + 232) = 1;
  v7 = a1 + 232;
  *(_QWORD *)(v7 - 80) = 0xBFF0000000000000;
  *(_OWORD *)(v7 - 72) = 0u;
  *(_OWORD *)(v7 - 56) = 0u;
  *(_OWORD *)(v7 - 40) = 0u;
  *(_OWORD *)(v7 - 24) = 0u;
  *(_BYTE *)(v7 - 88) = 1;
  *(_QWORD *)(v7 + 8) = 0xBFF0000000000000;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_QWORD *)(v7 + 152) = 0xBFF0000000000000;
  *(_DWORD *)(v7 + 160) = 0;
  result = -1.0;
  *(_OWORD *)(v7 + 120) = xmmword_101BAFC90;
  *(_QWORD *)(v7 + 136) = 0xBFF0000000000000;
  return result;
}

unint64_t sub_1005E4270(_QWORD *a1, _QWORD *a2, char *a3, _QWORD *a4, char *a5)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char **v9;
  char *v10;
  unint64_t v11;
  __n128 v12;
  __n128 v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE **v16;
  _BYTE *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  __n128 v24[2];

  if (a5 == a3)
    v6 = 0;
  else
    v6 = 56 * (a4 - a2)
       - 0x71C71C71C71C71C7 * ((uint64_t)&a5[-*a4] >> 3)
       + 0x71C71C71C71C71C7 * ((uint64_t)&a3[-*a2] >> 3);
  v7 = a1[4];
  v8 = a1[1];
  v9 = (char **)(v8 + 8 * (v7 / 0x38));
  if (a1[2] == v8)
    v10 = 0;
  else
    v10 = &(*v9)[72 * (v7 % 0x38)];
  if (a3 == v10)
    v11 = 0;
  else
    v11 = 56 * ((char **)a2 - v9)
        - 0x71C71C71C71C71C7 * ((uint64_t)&a3[-*a2] >> 3)
        + 0x71C71C71C71C71C7 * ((v10 - *v9) >> 3);
  v24[0].n128_u64[0] = v8 + 8 * (v7 / 0x38);
  v24[0].n128_u64[1] = (unint64_t)v10;
  sub_1005E5C2C(v24, v11);
  if (v6 >= 1)
  {
    v12 = v24[0];
    if (v11 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      sub_1005E5C2C(v24, v6);
      sub_1005E5D54(v9, v10, (char **)v12.n128_u64[0], (char *)v12.n128_u64[1], v24[0].n128_u64[0], (char *)v24[0].n128_u64[1], v24);
      v18 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v18;
      while ((sub_100554D9C((uint64_t)a1, 1) & 1) != 0)
        ;
    }
    else
    {
      sub_1005E5C2C(v24, v6);
      v13 = v24[0];
      v14 = a1[4] + a1[5];
      v15 = a1[1];
      v16 = (_BYTE **)(v15 + 8 * (v14 / 0x38));
      if (a1[2] == v15)
        v17 = 0;
      else
        v17 = &(*v16)[72 * (v14 % 0x38)];
      v24[0] = v12;
      sub_1005E5F14(v13.n128_u64[0], (_BYTE *)v13.n128_u64[1], v16, v17, (uint64_t)v24);
      a1[5] -= v6;
      while ((sub_1005E5CE0(a1, 1) & 1) != 0)
        ;
    }
  }
  v19 = a1[4];
  v20 = a1[1];
  v21 = (_QWORD *)(v20 + 8 * (v19 / 0x38));
  if (a1[2] == v20)
    v22 = 0;
  else
    v22 = *v21 + 72 * (v19 % 0x38);
  v24[0].n128_u64[0] = (unint64_t)v21;
  v24[0].n128_u64[1] = v22;
  sub_1005E5C2C(v24, v11);
  return v24[0].n128_u64[0];
}

BOOL sub_1005E4518(uint64_t a1, uint64_t a2)
{
  float v3;
  float v5;
  float v6;
  float v7;
  double v8;
  double v9;
  NSObject *v10;
  uint64_t v11;
  double v12;
  double v13;
  _BOOL8 result;
  uint64_t v15;
  double v16;
  double v17;
  const char *v18;
  uint8_t *v19;
  float v20;
  double v21;
  double v22;
  double v23;
  NSObject *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  const char *v42;
  uint8_t *v43;
  int v44;
  uint64_t v45;
  __int16 v46;
  _BYTE v47[34];
  __int16 v48;
  double v49;
  __int16 v50;
  double v51;
  __int16 v52;
  double v53;
  __int16 v54;
  double v55;
  uint8_t buf[4];
  uint64_t v57;
  __int16 v58;
  _BYTE v59[34];
  __int16 v60;
  double v61;
  __int16 v62;
  double v63;
  __int16 v64;
  double v65;
  __int16 v66;
  double v67;

  if (!*(_BYTE *)(a2 + 63))
    return 0;
  v3 = *(float *)(a2 + 16);
  if (v3 <= 0.0)
    return 0;
  v5 = *(float *)(a2 + 20);
  v6 = *(float *)(a2 + 24);
  v7 = hypotf(v5, v6);
  v8 = v7;
  *(double *)(a1 + 320) = v7 / v3;
  v9 = *(double *)(a1 + 336);
  if (v9 >= 0.0)
    *(double *)(a1 + 328) = v9;
  if (v7 >= 0.5 && fabsf(v5) >= 0.005 && fabsf(v6) >= 0.005)
  {
    v20 = atan2f(v6, v5);
    if (v20 >= 0.0)
      v21 = v20;
    else
      v21 = v20 + 6.28318531;
    v22 = 6.28318531 - v21;
    if (v22 < 0.0 || v22 >= 6.28318531)
    {
      v22 = fmod(v22, 6.28318531);
      if (v22 < 0.0)
        v22 = v22 + 6.28318531;
    }
    v23 = (float)(v3 * v3) * 0.09 * ((float)-v5 / (v8 * v8) * ((float)-v5 / (v8 * v8)))
        + v6 / (v8 * v8) * (v6 / (v8 * v8)) * ((float)(v3 * v3) * 0.09);
    *(double *)(a1 + 336) = v22;
    *(double *)(a1 + 344) = v23;
    if (v23 < 0.0)
      *(_QWORD *)(a1 + 344) = qword_101BB7750[*(_BYTE *)(a2 + 61) == 1];
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_102147B30);
    v24 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      v25 = *(_QWORD *)(a2 + 8);
      v26 = *(unsigned __int8 *)(a2 + 61);
      v27 = *(_QWORD *)(a1 + 320);
      v28 = *(double *)(a1 + 336) * 57.2957795;
      v29 = sqrt(*(double *)(a1 + 344)) * 57.2957795;
      v30 = sub_1005E4BE8((float *)(a1 + 144));
      v31 = *(float *)(a2 + 20);
      v32 = *(float *)(a2 + 24);
      *(_DWORD *)buf = 134351104;
      v57 = v25;
      v58 = 1026;
      *(_DWORD *)v59 = v26;
      *(_WORD *)&v59[4] = 2050;
      *(double *)&v59[6] = v8;
      *(_WORD *)&v59[14] = 2050;
      *(_QWORD *)&v59[16] = v27;
      *(_WORD *)&v59[24] = 2050;
      *(double *)&v59[26] = v28;
      v60 = 2050;
      v61 = v29;
      v62 = 2050;
      v63 = v30;
      v64 = 2050;
      v65 = v31;
      v66 = 2050;
      v67 = v32;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "InertialOdometry,PDR,estimated course,sample mct,%{public}.3f,RefF,%{public}d,GDistanceMoved_m,%{public}.3f,GSpeed_mps,%{public}.3f,Course_deg,%{public}.1f,CourseStdv_deg,%{public}.1f,BatchGDistMoved_m,%{public}.3f,PosX,%{public}.3f,dPosY,%{public}.3f", buf, 0x58u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_102147B30);
      v33 = qword_1022A01B8;
      v34 = *(_QWORD *)(a2 + 8);
      v35 = *(unsigned __int8 *)(a2 + 61);
      v36 = *(_QWORD *)(a1 + 320);
      v37 = *(double *)(a1 + 336) * 57.2957795;
      v38 = sqrt(*(double *)(a1 + 344)) * 57.2957795;
      v39 = sub_1005E4BE8((float *)(a1 + 144));
      v40 = *(float *)(a2 + 20);
      v41 = *(float *)(a2 + 24);
      v44 = 134351104;
      v45 = v34;
      v46 = 1026;
      *(_DWORD *)v47 = v35;
      *(_WORD *)&v47[4] = 2050;
      *(double *)&v47[6] = v8;
      *(_WORD *)&v47[14] = 2050;
      *(_QWORD *)&v47[16] = v36;
      *(_WORD *)&v47[24] = 2050;
      *(double *)&v47[26] = v37;
      v48 = 2050;
      v49 = v38;
      v50 = 2050;
      v51 = v39;
      v52 = 2050;
      v53 = v40;
      v54 = 2050;
      v55 = v41;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v33, 2, "InertialOdometry,PDR,estimated course,sample mct,%{public}.3f,RefF,%{public}d,GDistanceMoved_m,%{public}.3f,GSpeed_mps,%{public}.3f,Course_deg,%{public}.1f,CourseStdv_deg,%{public}.1f,BatchGDistMoved_m,%{public}.3f,PosX,%{public}.3f,dPosY,%{public}.3f", &v44, 88);
      v43 = (uint8_t *)v42;
      sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::LCFusionInertialOdometry::estimateGroundSpeedAndCoursePDR(const CLPIOSample &)", "%s\n", v42);
      if (v43 != buf)
        free(v43);
    }
    return 1;
  }
  else
  {
    *(_QWORD *)(a1 + 336) = 0xBFF0000000000000;
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_102147B30);
    v10 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      v11 = *(_QWORD *)(a2 + 8);
      v12 = *(float *)(a2 + 20);
      v13 = *(float *)(a2 + 24);
      *(_DWORD *)buf = 134349824;
      v57 = v11;
      v58 = 2050;
      *(double *)v59 = v8;
      *(_WORD *)&v59[8] = 2050;
      *(double *)&v59[10] = v12;
      *(_WORD *)&v59[18] = 2050;
      *(double *)&v59[20] = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "InertialOdometry,PDR,cannot compute course,sample mct,%{public}.3f,GDistanceMoved,%{public}.3f,dPosX,%{public}.3f,dPosY,%{public}.3f", buf, 0x2Au);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_102147B30);
      v15 = *(_QWORD *)(a2 + 8);
      v16 = *(float *)(a2 + 20);
      v17 = *(float *)(a2 + 24);
      v44 = 134349824;
      v45 = v15;
      v46 = 2050;
      *(double *)v47 = v8;
      *(_WORD *)&v47[8] = 2050;
      *(double *)&v47[10] = v16;
      *(_WORD *)&v47[18] = 2050;
      *(double *)&v47[20] = v17;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "InertialOdometry,PDR,cannot compute course,sample mct,%{public}.3f,GDistanceMoved,%{public}.3f,dPosX,%{public}.3f,dPosY,%{public}.3f", &v44, 42);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::LCFusionInertialOdometry::estimateGroundSpeedAndCoursePDR(const CLPIOSample &)", "%s\n", v18);
      if (v19 != buf)
        free(v19);
      return 0;
    }
  }
  return result;
}

void sub_1005E4ACC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

__n128 sub_1005E4AD8(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 56 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1005E609C(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x38)) + 72 * (v7 % 0x38);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v10 = *(_OWORD *)(a2 + 32);
  v11 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(v8 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(v8 + 32) = v10;
  *(_OWORD *)(v8 + 48) = v11;
  *(__n128 *)(v8 + 16) = result;
  ++a1[5];
  return result;
}

double sub_1005E4B9C(double *a1)
{
  if (a1[24] + a1[23] <= 0.0)
    return -1.0;
  else
    return a1[7];
}

double sub_1005E4BE8(float *a1)
{
  return hypotf((float)(a1[7] + a1[4]) - a1[17], (float)(a1[8] + a1[5]) - a1[18]);
}

double sub_1005E4C1C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  double v4;
  uint64_t v5;
  double *v6;

  v2 = *(_QWORD *)(a1 + 320);
  *(_QWORD *)a2 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = 0x3FB70A3D70A3D70ALL;
  result = *(double *)(a1 + 336);
  if (result <= -1.0)
    result = *(double *)(a1 + 328);
  v4 = *(double *)(a1 + 344);
  v5 = 0x3FB1A9FBE76C8B44;
  if (v4 >= 0.069)
    v5 = *(_QWORD *)(a1 + 344);
  *(double *)(a2 + 24) = result;
  *(_QWORD *)(a2 + 32) = v5;
  if (*(_BYTE *)(a1 + 48) == 1)
  {
    v6 = (double *)(a1 + 344);
    if (v4 < 9.8696044)
      v6 = (double *)&unk_101BB7760;
    result = *v6;
    *(double *)(a2 + 32) = *v6;
  }
  return result;
}

BOOL sub_1005E4C9C(uint64_t a1, double *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  NSObject *v6;
  double v7;
  _BOOL8 result;
  double v9;
  const char *v10;
  uint8_t *v11;
  double v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  double v18;
  NSObject *v20;
  double v21;
  unint64_t v22;
  uint64_t v23;
  double v24;
  unint64_t v25;
  uint64_t v26;
  const char *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  BOOL v31;
  NSObject *v32;
  double v33;
  double v34;
  const char *v35;
  uint64_t v36;
  int v37;
  _BYTE *v38;
  int v39;
  uint64_t v40;
  float *v41;
  float v42;
  float v43;
  double v44;
  double v45;
  double v48;
  double v49;
  float *v50;
  float *v51;
  double v52;
  double v53;
  double v54;
  BOOL v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  NSObject *v63;
  double v64;
  int v65;
  NSObject *v66;
  double v67;
  double v68;
  const char *v69;
  NSObject *v70;
  double v71;
  NSObject *v72;
  double v73;
  double v74;
  const char *v75;
  double v76;
  NSObject *v77;
  double v78;
  double v79;
  double v80;
  double v81;
  const char *v82;
  double v83;
  int v84;
  const char *v85;
  uint8_t *v86;
  double v87;
  const char *v88;
  uint8_t *v89;
  float v90;
  float v91;
  double v92;
  int v93;
  double v94;
  __int16 v95;
  _BYTE v96[34];
  __int16 v97;
  double v98;
  __int16 v99;
  double v100;
  __int16 v101;
  double v102;
  uint8_t buf[4];
  double v104;
  __int16 v105;
  _BYTE v106[34];
  __int16 v107;
  double v108;
  __int16 v109;
  double v110;
  __int16 v111;
  double v112;

  v5 = *(_QWORD *)(a1 + 40);
  if (v5 <= 1)
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_102147B30);
    v6 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      v7 = *a2;
      *(_DWORD *)buf = 134349056;
      v104 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "InertialOdometry,Not enough IO samples to extrapolate speed for,mct,%{public}.3f", buf, 0xCu);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_102147B30);
      v9 = *a2;
      v93 = 134349056;
      v94 = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "InertialOdometry,Not enough IO samples to extrapolate speed for,mct,%{public}.3f", &v93, 12);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::LCFusionInertialOdometry::getIOExtrapolateSpeedMeasurementAt(const CFTimeInterval &, GroundSpeedMeasurement &, VerticalVelocityMeasurement &) const", "%s\n", v10);
LABEL_100:
      if (v11 != buf)
        free(v11);
      return 0;
    }
    return result;
  }
  v13 = *a2;
  v14 = v5 + *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 8);
  v16 = *(_QWORD *)(v15 + 8 * ((v14 - 1) / 0x38));
  v17 = (v14 - 1) % 0x38;
  v18 = *(double *)(v16 + 72 * v17 + 8);
  if (*a2 >= v18 && *a2 + -1.5 <= v18)
  {
    v28 = v14 - 2;
    v29 = *(_QWORD *)(v15 + 8 * (v28 / 0x38));
    v30 = v28 % 0x38;
    if (*(_BYTE *)(v16 + 72 * v17 + 63))
      v31 = *(_BYTE *)(v29 + 72 * v30 + 63) == 0;
    else
      v31 = 1;
    if (v31)
    {
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_102147B30);
      v32 = qword_1022A01B8;
      if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
      {
        v33 = *a2;
        *(_DWORD *)buf = 134349056;
        v104 = v33;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "InertialOdometry,Invalid IO delta-position to extrapolate speed for,mct,%{public}.3f", buf, 0xCu);
      }
      result = sub_1001BFF7C(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01B0 != -1)
          dispatch_once(&qword_1022A01B0, &stru_102147B30);
        v34 = *a2;
        v93 = 134349056;
        v94 = v34;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "InertialOdometry,Invalid IO delta-position to extrapolate speed for,mct,%{public}.3f", &v93, 12);
        v11 = (uint8_t *)v35;
        sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::LCFusionInertialOdometry::getIOExtrapolateSpeedMeasurementAt(const CFTimeInterval &, GroundSpeedMeasurement &, VerticalVelocityMeasurement &) const", "%s\n", v35);
        goto LABEL_100;
      }
      return result;
    }
    v36 = v16 + 72 * v17;
    v39 = *(unsigned __int8 *)(v36 + 61);
    v38 = (_BYTE *)(v36 + 61);
    v37 = v39;
    if (v39 != *(unsigned __int8 *)(v29 + 72 * v30 + 61))
    {
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_102147B30);
      v66 = qword_1022A01B8;
      if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
      {
        v67 = *a2;
        *(_DWORD *)buf = 134349056;
        v104 = v67;
        _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEBUG, "InertialOdometry,IO samples with different reference frame to extrapolate speed for,mct,%{public}.3f", buf, 0xCu);
      }
      result = sub_1001BFF7C(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01B0 != -1)
          dispatch_once(&qword_1022A01B0, &stru_102147B30);
        v68 = *a2;
        v93 = 134349056;
        v94 = v68;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "InertialOdometry,IO samples with different reference frame to extrapolate speed for,mct,%{public}.3f", &v93, 12);
        v11 = (uint8_t *)v69;
        sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::LCFusionInertialOdometry::getIOExtrapolateSpeedMeasurementAt(const CFTimeInterval &, GroundSpeedMeasurement &, VerticalVelocityMeasurement &) const", "%s\n", v69);
        goto LABEL_100;
      }
      return result;
    }
    v40 = v16 + 72 * v17;
    v42 = *(float *)(v40 + 16);
    v41 = (float *)(v40 + 16);
    v43 = v42;
    if (v42 != *(float *)(v29 + 72 * v30 + 16) || v43 <= 0.0)
    {
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_102147B30);
      v70 = qword_1022A01B8;
      if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
      {
        v71 = *a2;
        *(_DWORD *)buf = 134349056;
        v104 = v71;
        _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEBUG, "InertialOdometry,Invalid IO sample intervals to extrapolate speed for,mct,%{public}.3f", buf, 0xCu);
      }
      result = sub_1001BFF7C(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01B0 != -1)
          dispatch_once(&qword_1022A01B0, &stru_102147B30);
        v81 = *a2;
        v93 = 134349056;
        v94 = v81;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "InertialOdometry,Invalid IO sample intervals to extrapolate speed for,mct,%{public}.3f", &v93, 12);
        v11 = (uint8_t *)v82;
        sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::LCFusionInertialOdometry::getIOExtrapolateSpeedMeasurementAt(const CFTimeInterval &, GroundSpeedMeasurement &, VerticalVelocityMeasurement &) const", "%s\n", v82);
        goto LABEL_100;
      }
      return result;
    }
    v44 = *(double *)(v29 + 72 * v30 + 8);
    v45 = v18 - v44;
    if (v18 - v44 <= 0.0)
    {
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_102147B30);
      v72 = qword_1022A01B8;
      if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_ERROR))
      {
        v73 = *a2;
        *(_DWORD *)buf = 134349056;
        v104 = v73;
        _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_ERROR, "InertialOdometry,Invalid IO delta-time to extrapolate speed for,mct,%{public}.3f", buf, 0xCu);
      }
      result = sub_1001BFF7C(115, 0);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01B0 != -1)
          dispatch_once(&qword_1022A01B0, &stru_102147B30);
        v74 = *a2;
        v93 = 134349056;
        v94 = v74;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 16, "InertialOdometry,Invalid IO delta-time to extrapolate speed for,mct,%{public}.3f", &v93, 12);
        v11 = (uint8_t *)v75;
        sub_100512490("Generic", 1, 0, 0, "BOOL cllcf::LCFusionInertialOdometry::getIOExtrapolateSpeedMeasurementAt(const CFTimeInterval &, GroundSpeedMeasurement &, VerticalVelocityMeasurement &) const", "%s\n", v75);
        goto LABEL_100;
      }
      return result;
    }
    v48 = (v18 - v13) / v45;
    v49 = (v13 - v44) / v45;
    v50 = (float *)(v29 + 72 * v30);
    v51 = (float *)(v16 + 72 * v17);
    v52 = v49 * v51[5] + v48 * v50[5];
    v53 = v49 * v51[6] + v48 * v50[6];
    v90 = v50[7];
    v91 = v51[7];
    v54 = hypot(v52, v53);
    v92 = v54 / v43;
    v55 = fabs(v52) < 0.005 || v54 < 0.5;
    if (v55 || fabs(v53) < 0.005)
    {
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_102147B30);
      v76 = v54 / v43;
      v77 = qword_1022A01B8;
      if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
      {
        v78 = *a2;
        *(_DWORD *)buf = 134349824;
        v104 = v78;
        v105 = 2050;
        *(double *)v106 = v54;
        *(_WORD *)&v106[8] = 2050;
        *(double *)&v106[10] = v52;
        *(_WORD *)&v106[18] = 2050;
        *(double *)&v106[20] = v53;
        _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEBUG, "InertialOdometry,PDR,cannot compute course for extrapolated sample mct,%{public}.3f,GDistanceMoved,%{public}.3f,dPosX,%{public}.3f,dPosY,%{public}.3f", buf, 0x2Au);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01B0 != -1)
          dispatch_once(&qword_1022A01B0, &stru_102147B30);
        v87 = *a2;
        v93 = 134349824;
        v94 = v87;
        v95 = 2050;
        *(double *)v96 = v54;
        *(_WORD *)&v96[8] = 2050;
        *(double *)&v96[10] = v52;
        *(_WORD *)&v96[18] = 2050;
        *(double *)&v96[20] = v53;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "InertialOdometry,PDR,cannot compute course for extrapolated sample mct,%{public}.3f,GDistanceMoved,%{public}.3f,dPosX,%{public}.3f,dPosY,%{public}.3f", &v93, 42);
        v89 = (uint8_t *)v88;
        sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::LCFusionInertialOdometry::getIOExtrapolateSpeedMeasurementAt(const CFTimeInterval &, GroundSpeedMeasurement &, VerticalVelocityMeasurement &) const", "%s\n", v88);
        if (v89 != buf)
          free(v89);
        v76 = v54 / v43;
      }
      *(double *)a3 = *a2;
      *(double *)(a3 + 8) = v76;
      *(_QWORD *)(a3 + 16) = 0x3FB70A3D70A3D70ALL;
      v61 = -1.0;
    }
    else
    {
      v56 = atan2(v53, v52);
      if (v56 < 0.0)
        v56 = v56 + 6.28318531;
      v57 = 6.28318531 - v56;
      if (6.28318531 - v56 < 0.0 || v57 >= 6.28318531)
      {
        v58 = fmod(6.28318531 - v56, 6.28318531);
        if (v58 >= 0.0)
          v57 = v58;
        else
          v57 = v58 + 6.28318531;
      }
      v59 = (float)(v43 * v43) * 0.09;
      v60 = v53 / (v54 * v54) * (v53 / (v54 * v54));
      if (v59 * (-v52 / (v54 * v54) * (-v52 / (v54 * v54))) + v60 * v59 >= 0.0)
        v61 = v59 * (-v52 / (v54 * v54) * (-v52 / (v54 * v54))) + v60 * v59;
      else
        v61 = *(double *)&qword_101BB7750[v37 == 1];
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_102147B30);
      v62 = v54 / v43;
      v63 = qword_1022A01B8;
      if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
      {
        v64 = *a2;
        v65 = *v38;
        *(_DWORD *)buf = 134350848;
        v104 = v64;
        v105 = 1026;
        *(_DWORD *)v106 = v65;
        *(_WORD *)&v106[4] = 2050;
        *(double *)&v106[6] = v54;
        *(_WORD *)&v106[14] = 2050;
        *(double *)&v106[16] = v92;
        *(_WORD *)&v106[24] = 2050;
        *(double *)&v106[26] = v57 * 57.2957795;
        v107 = 2050;
        v108 = sqrt(v61) * 57.2957795;
        v109 = 2050;
        v110 = v52;
        v111 = 2050;
        v112 = v53;
        _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEBUG, "InertialOdometry,PDR,estimated course for extrapolated IO sample mct,%{public}.3f,RefF,%{public}d,GDistanceMoved_m,%{public}.3f,GSpeed_mps,%{public}.3f,Course_deg,%{public}.1f,CourseStdv_deg,%{public}.1f,PosX,%{public}.3f,dPosY,%{public}.3f", buf, 0x4Eu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01B0 != -1)
          dispatch_once(&qword_1022A01B0, &stru_102147B30);
        v83 = *a2;
        v84 = *v38;
        v93 = 134350848;
        v94 = v83;
        v95 = 1026;
        *(_DWORD *)v96 = v84;
        *(_WORD *)&v96[4] = 2050;
        *(double *)&v96[6] = v54;
        *(_WORD *)&v96[14] = 2050;
        *(double *)&v96[16] = v92;
        *(_WORD *)&v96[24] = 2050;
        *(double *)&v96[26] = v57 * 57.2957795;
        v97 = 2050;
        v98 = sqrt(v61) * 57.2957795;
        v99 = 2050;
        v100 = v52;
        v101 = 2050;
        v102 = v53;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "InertialOdometry,PDR,estimated course for extrapolated IO sample mct,%{public}.3f,RefF,%{public}d,GDistanceMoved_m,%{public}.3f,GSpeed_mps,%{public}.3f,Course_deg,%{public}.1f,CourseStdv_deg,%{public}.1f,PosX,%{public}.3f,dPosY,%{public}.3f", &v93, 78);
        v86 = (uint8_t *)v85;
        sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::LCFusionInertialOdometry::getIOExtrapolateSpeedMeasurementAt(const CFTimeInterval &, GroundSpeedMeasurement &, VerticalVelocityMeasurement &) const", "%s\n", v85);
        if (v86 != buf)
          free(v86);
        v62 = v92;
      }
      *(double *)a3 = *a2;
      *(double *)(a3 + 8) = v62;
      *(_QWORD *)(a3 + 16) = 0x3FB70A3D70A3D70ALL;
      if (v57 > -1.0)
        goto LABEL_90;
    }
    v57 = *(double *)(a1 + 328);
LABEL_90:
    v79 = 0.069;
    if (v61 >= 0.069)
      v79 = v61;
    *(double *)(a3 + 24) = v57;
    *(double *)(a3 + 32) = v79;
    if (*v38 == 1)
    {
      v80 = 9.8696044;
      if (v61 >= 9.8696044)
        v80 = v61;
      *(double *)(a3 + 32) = v80;
    }
    *(double *)a4 = *a2;
    *(double *)(a4 + 8) = (v49 * v91 + v48 * v90) / *v41;
    *(_QWORD *)(a4 + 16) = 0x3FB70A3D70A3D70ALL;
    return 1;
  }
  if (qword_1022A01B0 != -1)
    dispatch_once(&qword_1022A01B0, &stru_102147B30);
  v20 = qword_1022A01B8;
  if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
  {
    v21 = *a2;
    v22 = *(_QWORD *)(a1 + 40) + *(_QWORD *)(a1 + 32) - 1;
    v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * (v22 / 0x38)) + 72 * (v22 % 0x38) + 8);
    *(_DWORD *)buf = 134349312;
    v104 = v21;
    v105 = 2050;
    *(_QWORD *)v106 = v23;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "InertialOdometry,Out of range extrapolation timestamp to extrapolate speed for,mct,%{public}.3f,last IO sample mct,%{public}.3f", buf, 0x16u);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_102147B30);
    v24 = *a2;
    v25 = *(_QWORD *)(a1 + 40) + *(_QWORD *)(a1 + 32) - 1;
    v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * (v25 / 0x38)) + 72 * (v25 % 0x38) + 8);
    v93 = 134349312;
    v94 = v24;
    v95 = 2050;
    *(_QWORD *)v96 = v26;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "InertialOdometry,Out of range extrapolation timestamp to extrapolate speed for,mct,%{public}.3f,last IO sample mct,%{public}.3f", &v93, 22);
    v11 = (uint8_t *)v27;
    sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::LCFusionInertialOdometry::getIOExtrapolateSpeedMeasurementAt(const CFTimeInterval &, GroundSpeedMeasurement &, VerticalVelocityMeasurement &) const", "%s\n", v27);
    goto LABEL_100;
  }
  return result;
}

void sub_1005E5BF4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_1005E5C00(id a1)
{
  qword_1022A01B8 = (uint64_t)os_log_create("com.apple.locationd.Position", "LCFusion");
}

_QWORD *sub_1005E5C2C(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;

  if (a2)
  {
    v2 = (_QWORD *)*result;
    v3 = a2 - 0x71C71C71C71C71C7 * ((uint64_t)(result[1] - *(_QWORD *)*result) >> 3);
    if ((uint64_t)v3 < 1)
    {
      v5 = 55 - v3;
      v6 = &v2[-(v5 / 0x38)];
      *result = v6;
      v4 = *v6 + 72 * (56 * (v5 / 0x38) - v5) + 3960;
    }
    else
    {
      *result = &v2[v3 / 0x38];
      v4 = v2[v3 / 0x38] + 72 * (v3 % 0x38);
    }
    result[1] = v4;
  }
  return result;
}

uint64_t sub_1005E5CE0(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 56 * ((v2 - v3) >> 3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x38)
    a2 = 1;
  if (v5 < 0x70)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

__n128 sub_1005E5D54@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, _QWORD *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  char *v12;
  char **v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __n128 result;
  uint64_t v21;
  __n128 v22;

  if (a1 == a3)
  {
    v19 = a2;
    v18 = a4;
    v15 = a5;
    v16 = a6;
  }
  else
  {
    v13 = a3 - 1;
    v12 = *a3;
    v14 = a4;
    v15 = a5;
    v16 = a6;
    while (1)
    {
      sub_1005E5E20(v12, v14, v15, v16, &v21);
      v16 = (char *)v22.n128_u64[1];
      v15 = (_QWORD *)v22.n128_u64[0];
      if (v13 == a1)
        break;
      v17 = *v13--;
      v12 = v17;
      v14 = v17 + 4032;
    }
    v18 = *a1 + 4032;
    v19 = a2;
  }
  sub_1005E5E20(v19, v18, v15, v16, &v21);
  result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_1005E5E20@<X0>(char *a1@<X1>, char *a2@<X2>, _QWORD *a3@<X3>, char *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v6;
  char *v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  void *result;
  uint64_t v14;
  char *v15;

  v6 = a3;
  if (a1 == a2)
  {
    v9 = a1;
  }
  else
  {
    v9 = a2;
    v10 = *a3;
    v11 = a2;
    while (1)
    {
      v12 = 0x8E38E38E38E38E39 * ((uint64_t)&a4[-v10] >> 3);
      if ((uint64_t)(0x8E38E38E38E38E39 * ((v11 - a1) >> 3)) < v12)
        v12 = 0x8E38E38E38E38E39 * ((v11 - a1) >> 3);
      v11 -= 72 * v12;
      a4 -= 72 * v12;
      if (v12)
        result = memmove(a4, v11, 72 * v12 - 6);
      if (v11 == a1)
        break;
      v14 = *--v6;
      v10 = v14;
      a4 = (char *)(v14 + 4032);
    }
    if ((char *)(*v6 + 4032) == a4)
    {
      v15 = (char *)v6[1];
      ++v6;
      a4 = v15;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_1005E5F14(_QWORD *a1, _BYTE *a2, _BYTE **a3, _BYTE *a4, uint64_t a5)
{
  void **v7;
  char *v8;
  _QWORD *v10;
  _BYTE *i;
  _BYTE *v12;
  double result;
  uint64_t v14;
  __int128 v15;

  v7 = *(void ***)a5;
  v8 = *(char **)(a5 + 8);
  if (a1 != a3)
  {
    v10 = a1 + 1;
    for (i = (_BYTE *)(*a1 + 4032); ; i = v12 + 4032)
    {
      sub_1005E5FA4(a2, v8, i, v7, &v14);
      v8 = (char *)*((_QWORD *)&v15 + 1);
      v7 = (void **)v15;
      *(_QWORD *)a5 = v15;
      *(_QWORD *)(a5 + 8) = v8;
      if (v10 == a3)
        break;
      v12 = (_BYTE *)*v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  sub_1005E5FA4(a2, v8, a4, v7, &v14);
  result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void *sub_1005E5FA4@<X0>(_BYTE *__src@<X1>, char *__dst@<X4>, _BYTE *a3@<X2>, void **a4@<X3>, _QWORD *a5@<X8>)
{
  void **v6;
  _BYTE *v7;
  _BYTE *v9;
  char *v10;
  int64_t v11;
  unint64_t v12;
  void *result;
  char *v14;

  v6 = a4;
  v7 = __src;
  if (__src == a3)
  {
    v9 = __src;
  }
  else
  {
    v9 = a3;
    v6 = a4 + 1;
    v10 = (char *)*a4;
    while (1)
    {
      v11 = 0x8E38E38E38E38E39 * ((v10 - __dst + 4032) >> 3);
      v12 = (uint64_t)(0x8E38E38E38E38E39 * ((v9 - v7) >> 3)) >= v11 ? v11 : 0x8E38E38E38E38E39 * ((v9 - v7) >> 3);
      if (v12)
        result = memmove(__dst, v7, 72 * v12 - 6);
      v7 += 72 * v12;
      if (v7 == v9)
        break;
      v14 = (char *)*v6++;
      v10 = v14;
      __dst = v14;
    }
    __dst += 72 * v12;
    if ((char *)*(v6 - 1) + 4032 == __dst)
      __dst = (char *)*v6;
    else
      --v6;
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = __dst;
  return result;
}

void sub_1005E609C(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x38;
  v4 = v2 - 56;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFC0uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFC0uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFC0uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1005E6364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

size_t sub_1005E63B0(char *__source)
{
  return strlcpy(byte_1023108E8, __source, 0x100uLL);
}

uint64_t sub_1005E63C4(uint64_t a1, float a2, float a3, float a4, float a5)
{
  NSObject *v10;
  const char *v11;
  NSObject *v12;
  uint8_t *v13;
  float v14;
  float v15;
  __float2 v16;
  int v17;
  __float2 v18;
  float v19;
  float v20;
  uint64_t result;
  int v22;
  uint8_t buf[4];

  if (sub_1005E69BC(0, (int *)&unk_1022A3300, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0.0))
  {
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_102147B70);
    v10 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "WMM initialization encountered an error", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0xFFFFFFFFLL;
    bzero(buf, 0x65CuLL);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_102147B70);
    LOWORD(v22) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "WMM initialization encountered an error", &v22, 2);
LABEL_19:
    v13 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "int declinationCalc(const float, const float, const float, const float, GeomagneticData *)", "%s\n", v11);
    if (v13 != buf)
      free(v13);
    return 0xFFFFFFFFLL;
  }
  dword_102301DF0 = LODWORD(a2);
  dword_102301DF4 = LODWORD(a3);
  *(float *)&dword_102301DF8 = a4 / 1000.0;
  dword_102301DFC = LODWORD(a5);
  if (sub_1005E69BC(1, 0, (float *)&dword_102301E00, (float *)&dword_102301E04, (float *)&dword_102301E08, &flt_102301E0C, a4 / 1000.0, a2, a3, a5))
  {
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_102147B70);
    v12 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "WMM evaluation encountered an error", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0xFFFFFFFFLL;
    bzero(buf, 0x65CuLL);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_102147B70);
    LOWORD(v22) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "WMM evaluation encountered an error", &v22, 2);
    goto LABEL_19;
  }
  dword_102301E10 = dword_102301E00;
  dword_102301E14 = dword_102301E04;
  dword_102301E18 = dword_102301E08;
  *(float *)&dword_102301DFC = *(float *)&dword_102301DFC + 1.0;
  sub_1005E69BC(1, 0, (float *)&dword_102301E00, (float *)&dword_102301E04, (float *)&dword_102301E08, &flt_102301E0C, *(float *)&dword_102301DF8, *(float *)&dword_102301DF0, *(float *)&dword_102301DF4, *(float *)&dword_102301DFC);
  v14 = *(float *)&dword_102301E18;
  v15 = *(float *)&dword_102301E10;
  v16 = __sincosf_stret(*(float *)&dword_102301E10 * 0.017453);
  v17 = dword_102301E14;
  v18 = __sincosf_stret(*(float *)&dword_102301E14 * 0.017453);
  if ((float)(v14 * v18.__cosval) < 100.0)
  {
    v15 = log(-1.0);
    dword_102301E10 = LODWORD(v15);
  }
  if (90.0 - fabsf(*(float *)&dword_102301DF0) <= 0.001)
  {
    v15 = log(-1.0);
    dword_102301E10 = LODWORD(v15);
    v20 = v15;
    v19 = v15;
  }
  else
  {
    v19 = v14 * (float)(v16.__cosval * v18.__cosval);
    v20 = v14 * (float)(v16.__sinval * v18.__cosval);
  }
  result = 0;
  *(float *)a1 = v19 / 1000.0;
  *(float *)(a1 + 4) = v20 / 1000.0;
  *(float *)(a1 + 8) = (float)(v14 * v18.__sinval) / 1000.0;
  *(float *)(a1 + 12) = v14 / 1000.0;
  *(float *)(a1 + 16) = (float)(v14 * v18.__cosval) / 1000.0;
  *(float *)(a1 + 20) = v15;
  *(_DWORD *)(a1 + 24) = v17;
  return result;
}

uint64_t sub_1005E69BC(int a1, int *a2, float *a3, float *a4, float *a5, float *a6, float a7, float a8, float a9, float a10)
{
  float v16;
  float *v17;
  float v18;
  NSObject *v19;
  const char *v20;
  FILE *v22;
  FILE *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  char *v28;
  int v29;
  uint64_t v30;
  float *v31;
  float *v32;
  float *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  float *v37;
  int v38;
  uint64_t v39;
  float v40;
  int v41;
  int v42;
  float v43;
  float v44;
  __float2 v45;
  float sinval;
  float cosval;
  float *v48;
  _BOOL4 v49;
  float *v50;
  float *v51;
  __float2 v52;
  float v53;
  float v54;
  int v55;
  float v56;
  float v57;
  uint64_t v58;
  int v59;
  NSObject *v60;
  int *v61;
  char *v62;
  uint64_t v63;
  int *v64;
  char *v65;
  NSObject *v66;
  uint64_t v67;
  float *v68;
  float v69;
  float *v70;
  float v71;
  float v72;
  float v73;
  uint64_t v74;
  float *v75;
  float *v76;
  float *v77;
  float *v78;
  float *v79;
  float *v80;
  int *v81;
  int v82;
  int v83;
  float v84;
  float v85;
  int *v86;
  float v87;
  float v88;
  float v89;
  int v90;
  unint64_t v91;
  float v92;
  float v93;
  float *v94;
  int *v95;
  int *v96;
  float v97;
  float v98;
  float v99;
  uint64_t v100;
  int64_t v101;
  float v102;
  int *v103;
  float v104;
  int64_t v105;
  int *v106;
  unint64_t v107;
  float *v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  int *v112;
  float *v113;
  int *v114;
  uint64_t v115;
  float *v116;
  uint64_t v117;
  float *v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  unint64_t v130;
  int *v131;
  float *v132;
  float *v133;
  float *v134;
  int *v135;
  float *v136;
  uint64_t v137;
  float *v138;
  uint64_t v139;
  uint64_t v140;
  float *v141;
  int *v142;
  uint64_t v143;
  int *v144;
  float v145;
  float v146;
  float v147;
  int v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  uint64_t result;
  NSObject *v158;
  uint8_t *v159;
  uint64_t v160;
  float *v161;
  float *v162;
  uint64_t v165;
  unint64_t v166;
  int *v167;
  int v168;
  int v169;
  uint64_t v170;
  _BOOL4 v171;
  int *v172;
  float *v173;
  int v174;
  double v175;
  __int16 v176;
  double v177;
  uint8_t buf[4];
  double v179;
  __int16 v180;
  double v181;

  if (a1 == 1)
  {
    v16 = a10 - *(float *)&dword_102302F1C;
    v17 = (float *)&unk_102302000;
    v18 = *(float *)&dword_102302F30;
    if (*(float *)&dword_102302F30 < 0.0 && v16 < 0.0)
    {
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_102147B70);
      v19 = qword_10229FD48;
      if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134349312;
        v179 = a10;
        v180 = 2050;
        v181 = *(float *)&dword_102302F1C;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "supplied date (%{public}f) outside valid range (epoch=%{public}f)", buf, 0x16u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 1;
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_102147B70);
      v174 = 134349312;
      v175 = a10;
      v176 = 2050;
      v177 = *(float *)&dword_102302F1C;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 1, "supplied date (%{public}f) outside valid range (epoch=%{public}f)", &v174, 22);
LABEL_127:
      v159 = (uint8_t *)v20;
      sub_100512490("Generic", 1, 0, 2, "int E0000(int, int *, float, float, float, float, float *, float *, float *, float *)", "%s\n", v20);
      if (v159 != buf)
        free(v159);
      return 1;
    }
    v45 = __sincosf_stret(a9 * 0.017453);
    sinval = v45.__sinval;
    cosval = v45.__cosval;
    v48 = (float *)&unk_102302000;
    v49 = *(float *)&dword_102302F38 != a8 || *(float *)&dword_102302F34 != a7;
    dword_102302B60 = LODWORD(v45.__sinval);
    dword_102302B94 = LODWORD(v45.__cosval);
    v50 = (float *)&unk_102302000;
    v51 = (float *)&unk_102302000;
    if (v49)
    {
      v52 = __sincosf_stret(a8 * 0.017453);
      v50 = (float *)&unk_102302000;
      v17 = (float *)&unk_102302000;
      v48 = (float *)&unk_102302000;
      v53 = sqrtf(*(float *)&dword_102302F08 - (float)(*(float *)&dword_102302F10 * (float)(v52.__sinval * v52.__sinval)));
      v54 = (float)(*(float *)&dword_102302F08 + (float)(v53 * a7))
          / (float)((float)(v53 * a7) + *(float *)&dword_102302F0C);
      *(float *)&dword_102302F40 = v52.__sinval
                                 / sqrtf((float)(v52.__sinval * v52.__sinval)+ (float)((float)(v54 * v54) * (float)(v52.__cosval * v52.__cosval)));
      *(float *)&v55 = sqrt(1.0 - (float)(*(float *)&dword_102302F40 * *(float *)&dword_102302F40));
      dword_102302F44 = v55;
      v56 = (float)(a7 * a7)
          + (float)(v53 * a7) * 2.0
          + (float)((float)(*(float *)&dword_102302F14
                          - (float)(*(float *)&dword_102302F18 * (float)(v52.__sinval * v52.__sinval)))
                  / (float)(v53 * v53));
      dword_102302F48 = sqrtf(v56);
      v57 = sqrtf((float)((float)(v52.__sinval * v52.__sinval) * *(float *)&dword_102302F0C)+ (float)(*(float *)&dword_102302F08 * (float)(v52.__cosval * v52.__cosval)));
      *(float *)&dword_102302F4C = (float)(v57 + a7) / *(float *)&dword_102302F48;
      *(float *)&dword_102302F50 = (float)(v52.__sinval * (float)(v52.__cosval * *(float *)&dword_102302F10))
                                 / (float)(v57 * *(float *)&dword_102302F48);
    }
    v58 = dword_102301E1C;
    if (*(float *)&dword_102302F3C != a9)
    {
      if (dword_102301E1C >= 2)
      {
        v59 = dword_102301E1C + 1;
        v67 = dword_102301E1C - 1;
        v68 = (float *)&dword_102302B98;
        v69 = v45.__sinval;
        v70 = (float *)&dword_102302B64;
        do
        {
          v71 = *(float *)&dword_102302B94;
          v72 = (float)(*(float *)&dword_102302B94 * sinval) + (float)(v69 * cosval);
          *v70++ = v72;
          v69 = *(float *)&dword_102302B60;
          cosval = (float)(v71 * cosval) - (float)(*(float *)&dword_102302B60 * sinval);
          *v68++ = cosval;
          sinval = v72;
          --v67;
        }
        while (v67);
      }
      else
      {
        v59 = 2;
      }
      dword_102301E24 = v59;
    }
    v73 = *(float *)&dword_102302F44;
    if ((int)v58 >= 1)
    {
      v161 = a3;
      v162 = a6;
      v74 = 0;
      v75 = (float *)&unk_102302374;
      v76 = (float *)&unk_1023023A0;
      v77 = (float *)&unk_102301E2C;
      v78 = (float *)&unk_102301E58;
      v79 = (float *)&unk_1023020D0;
      v80 = (float *)&unk_1023020FC;
      v81 = &dword_1023028BC;
      v82 = -1;
      v83 = 3;
      v84 = *(float *)&dword_102302F04 / *(float *)&dword_102302F48;
      v85 = v84 * v84;
      v86 = &dword_102302618;
      v173 = (float *)&unk_102302C64;
      v87 = *(float *)&dword_102302F40;
      v88 = -*(float *)&dword_102302F44;
      v89 = *(float *)dword_102302B90;
      v90 = dword_102302C2C;
      v91 = 1;
      v92 = *(float *)&dword_102302B5C;
      v93 = 0.0;
      v94 = flt_102302BF8;
      v95 = &dword_102302C2C;
      v96 = &dword_102302B5C;
      v97 = 0.0;
      v98 = 0.0;
      v99 = 0.0;
      v165 = v58 + 1;
      v171 = v49;
      while (1)
      {
        v100 = 0;
        v101 = 0;
        v169 = v82;
        v102 = -(float)(v84 * v85);
        v85 = v84 * v85;
        v166 = v91 + 1;
        v103 = &dword_1023028B8[v91];
        v104 = flt_102302BC4[v91];
        v105 = v91 - 2;
        v172 = &dword_102302614[v82];
        v106 = v103 - 1;
        v107 = v91 - 1;
        v108 = (float *)((char *)&unk_102302C60 + 4 * v91 + 52);
        v109 = v83;
        v110 = 13 * (int)v91 - 13;
        v111 = 13 * (int)v91;
        v112 = &dword_102302614[13 * v91];
        v113 = (float *)&v112[v91 - 14];
        v114 = v86;
        v115 = 13 * (v91 - 1);
        v116 = (float *)&v112[v91];
        v170 = v74;
        v117 = v74 + 1;
        v167 = v114;
        v118 = (float *)v114;
        v168 = v109;
        do
        {
          if (v49)
          {
            if (v117 == v101)
            {
              *(float *)&v103[v111] = v73 * *(float *)&v106[v110];
              *v116 = (float)(v87 * *(float *)&v106[v115]) + (float)(v73 * *v113);
            }
            else
            {
              if (v91 == 1 && !v101)
              {
                *(float *)&dword_1023028BC = v87 * *(float *)dword_1023028B8;
                *(float *)&dword_102302618 = (float)(*(float *)dword_1023028B8 * v88)
                                           + (float)(v87 * *(float *)&dword_102302614[v107]);
                if (v18 == a10)
                {
LABEL_75:
                  v119 = v85 * *(float *)&v81[v100];
LABEL_76:
                  v126 = flt_102302370[v91];
                  v124 = v126 * v89;
                  v125 = v126 * v92;
                  goto LABEL_77;
                }
LABEL_68:
                v75[v100] = v77[v100] + (float)(v16 * v79[v100]);
                if (!v101)
                  goto LABEL_75;
                v76[v101] = v78[v101] + (float)(v16 * v80[v101]);
                v119 = v85 * *(float *)&v103[v100];
                goto LABEL_71;
              }
              if (v91 >= 2)
              {
                v130 = v107;
                v131 = v95;
                v132 = v80;
                v133 = v78;
                v134 = v94;
                v135 = v81;
                v136 = v116;
                v137 = v115;
                v138 = v113;
                v139 = v111;
                v140 = v110;
                v141 = v108;
                v142 = v96;
                if (v101 <= v105)
                {
                  v144 = v103 - 2;
                  v145 = *(float *)&v172[v100];
                  v143 = v100;
                }
                else
                {
                  v143 = v100;
                  v144 = v103 - 2;
                  v103[v100 - 2] = 0;
                  v172[v100] = 0;
                  v145 = 0.0;
                }
                v146 = *(float *)&v106[v143];
                v147 = v173[v100];
                *(float *)&v103[v143] = (float)(v87 * v146) - (float)(v147 * *(float *)&v144[v143]);
                *v118 = (float)((float)(v146 * v88) + (float)(v87 * *(v118 - 1))) - (float)(v147 * v145);
                v96 = v142;
                v108 = v141;
                v110 = v140;
                v111 = v139;
                v113 = v138;
                v115 = v137;
                v116 = v136;
                v81 = v135;
                v94 = v134;
                v78 = v133;
                v80 = v132;
                v95 = v131;
                v107 = v130;
                v49 = v171;
              }
            }
          }
          if (v18 != a10)
            goto LABEL_68;
          v119 = v85 * *(float *)&v103[v100];
          if (!v101)
            goto LABEL_76;
LABEL_71:
          v120 = v75[v100];
          v121 = *(float *)&dword_102302B90[v101];
          v122 = v76[v101];
          v123 = *(float *)&v96[v101];
          v124 = (float)(v122 * v123) + (float)(v120 * v121);
          v125 = (float)(v120 * v123) - (float)(v122 * v121);
LABEL_77:
          v127 = *v118;
          v128 = v125 * v94[v101];
          if (v101 == 1 && v73 == 0.0)
          {
            if (v91 == 1)
            {
              v95[1] = v90;
              v129 = *((float *)v95 + 1);
            }
            else
            {
              v129 = (float)(v87 * *(float *)&v95[v107]) - (float)(*v108 * *(float *)&v95[v105]);
              *(float *)&v95[v91] = v129;
            }
            v99 = v99 + (float)(v128 * (float)(v85 * v129));
          }
          v93 = v93 + (float)((float)(v124 * v102) * v127);
          v97 = v97 + (float)(v128 * v119);
          v98 = v98 + (float)((float)(v124 * v104) * v119);
          ++v101;
          v100 += 13;
          --v109;
          v118 += 13;
        }
        while (v109 > 1);
        ++v81;
        v82 = v169 + 1;
        v83 = v168 + 1;
        ++v91;
        v86 = v167 + 1;
        ++v173;
        ++v75;
        ++v79;
        ++v77;
        v76 += 13;
        v78 += 13;
        v80 += 13;
        v74 = v170 + 1;
        v148 = v165;
        if (v166 == v165)
        {
          dword_102301E24 = v101;
          a3 = v161;
          a6 = v162;
          v17 = (float *)&unk_102302000;
          v48 = (float *)&unk_102302000;
          v50 = (float *)&unk_102302000;
          v51 = (float *)&unk_102302000;
          goto LABEL_93;
        }
      }
    }
    v148 = 1;
    v98 = 0.0;
    v93 = 0.0;
    v99 = 0.0;
    v97 = 0.0;
LABEL_93:
    dword_102301E20 = v148;
    if (v73 == 0.0)
      v149 = v99;
    else
      v149 = v97 / v73;
    v150 = v50[979];
    v151 = v51[980];
    v152 = (float)-(float)(v98 * v151) - (float)(v93 * v150);
    v153 = (float)(v93 * v151) - (float)(v98 * v150);
    v154 = sqrtf((float)(v149 * v149) + (float)(v152 * v152));
    *a5 = sqrtf((float)(v153 * v153) + (float)(v154 * v154));
    *a3 = atan2f(v149, v152) / 0.017453;
    *a4 = atan2f(v153, v154) / 0.017453;
    *a6 = -999.0;
    if (fabsf(a8) >= 55.0)
    {
      v155 = -999.0;
      if (a9 >= 0.0 && a8 > 0.0)
      {
        v155 = *a3 - a9;
        *a6 = v155;
      }
      v156 = fabsf(a9);
      if (a8 > 0.0 && a9 < 0.0)
      {
        v155 = v156 + *a3;
        *a6 = v155;
      }
      if (a9 >= 0.0 && a8 < 0.0)
      {
        v155 = *a3 + a9;
        *a6 = v155;
      }
      if (a8 < 0.0 && a9 < 0.0)
      {
        v155 = *a3 - v156;
        *a6 = v155;
      }
      if (v155 > 180.0)
      {
        v155 = v155 + -360.0;
LABEL_112:
        if (v155 < -180.0)
          v155 = v155 + 360.0;
        *a6 = v155;
        goto LABEL_115;
      }
      if (v155 < -180.0)
        goto LABEL_112;
    }
LABEL_115:
    result = 0;
    v17[972] = a10;
    v48[973] = a7;
    dword_102302F38 = LODWORD(a8);
    dword_102302F3C = LODWORD(a9);
    return result;
  }
  v22 = fopen(byte_1023108E8, "r");
  if (!v22)
  {
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_102147B70);
    v60 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_INFO))
    {
      v61 = __error();
      v62 = strerror(*v61);
      *(_DWORD *)buf = 136315394;
      v179 = COERCE_DOUBLE(byte_1023108E8);
      v180 = 2082;
      v181 = *(double *)&v62;
      _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_INFO, "could not open geomagnetic data file %s (%{public}s)", buf, 0x16u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 1;
    bzero(buf, 0x65CuLL);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_102147B70);
    v63 = qword_10229FD48;
    v64 = __error();
    v65 = strerror(*v64);
    v174 = 136315394;
    v175 = COERCE_DOUBLE(byte_1023108E8);
    v176 = 2082;
    v177 = *(double *)&v65;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v63, 1, "could not open geomagnetic data file %s (%{public}s)", &v174, 22);
    goto LABEL_127;
  }
  v23 = v22;
  dword_102301E1C = *a2;
  dword_102302B5C = 0;
  dword_102302C2C = 1065353216;
  dword_1023028B8[0] = 1065353216;
  dword_102302B90[0] = 1065353216;
  dword_102302614[0] = 0;
  dword_102302F04 = 1170676122;
  dword_102302F08 = 1276849967;
  dword_102302F0C = 1276781883;
  dword_102302F10 = 1216674304;
  dword_102302F14 = 1488725079;
  dword_102302F18 = 1436593536;
  dword_102301E28[0] = 0;
  dword_1023020CC[0] = 0;
  if (!fgets(byte_102302F54, 80, v22))
  {
    fclose(v23);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_102147B70);
    v66 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_INFO, "geomagnetic data file appears to be empty", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 1;
    bzero(buf, 0x65CuLL);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_102147B70);
    LOWORD(v174) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 1, "geomagnetic data file appears to be empty", &v174, 2);
    goto LABEL_127;
  }
  sscanf(byte_102302F54, "%f", &dword_102302F1C);
  if (fgets(byte_102302F54, 80, v23))
  {
    v24 = 0;
    do
    {
      do
      {
        if (!byte_102302F54[v24])
          break;
        *((_BYTE *)&dword_102302FA5 + v24) = byte_102302F54[v24];
        ++v24;
        *((_BYTE *)&dword_102302FA5 + v24) = 0;
      }
      while (v24 != 4);
      if (!(dword_102302FA5 ^ 0x39393939 | byte_102302FA9))
        break;
      sscanf(byte_102302F54, "%d%d%f%f%f%f", &dword_102301E20, &dword_102301E24, &dword_102302F20, &dword_102302F24, &dword_102302F28, &dword_102302F2C);
      v25 = dword_102301E24;
      if (dword_102301E24 > 0xC
        || (v26 = dword_102301E20, dword_102301E20 > 12)
        || dword_102301E20 < 0)
      {
        fclose(v23);
        if (qword_10229FD40 != -1)
          dispatch_once(&qword_10229FD40, &stru_102147B70);
        v158 = qword_10229FD48;
        if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v158, OS_LOG_TYPE_INFO, "geomagnetic data file appears to have invalid dimensions", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD40 != -1)
            dispatch_once(&qword_10229FD40, &stru_102147B70);
          LOWORD(v174) = 0;
          LODWORD(v160) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 1, "geomagnetic data file appears to have invalid dimensions", &v174, v160);
          goto LABEL_127;
        }
        return 1;
      }
      if (dword_102301E24 <= dword_102301E20)
      {
        dword_102301E28[13 * dword_102301E24 + dword_102301E20] = dword_102302F20;
        dword_1023020CC[13 * v25 + v26] = dword_102302F28;
        if (v25)
        {
          v27 = v25 - 1;
          dword_102301E28[13 * v26 + v27] = dword_102302F24;
          dword_1023020CC[13 * v26 + v27] = dword_102302F2C;
        }
      }
      v28 = fgets(byte_102302F54, 80, v23);
      v24 = 0;
    }
    while (v28);
  }
  dword_1023028B8[0] = 1065353216;
  if (dword_102301E1C < 1)
  {
    LODWORD(v30) = 1;
  }
  else
  {
    v29 = 0;
    v30 = dword_102301E1C + 1;
    v31 = (float *)&unk_1023020D0;
    v32 = (float *)&unk_102301E2C;
    v33 = (float *)&unk_102302C64;
    v34 = 1;
    do
    {
      v35 = 0;
      v36 = 0;
      v37 = (float *)&dword_1023028B8[v34];
      v38 = 2 * v34 - 1;
      *v37 = (float)(*(v37 - 1) * (float)v38) / (float)(int)v34;
      v39 = v34 + 1;
      v40 = (float)(v38 * (2 * v34 - 3));
      v41 = 2;
      v42 = v29;
      do
      {
        v33[v35] = (float)((v29 + v36) * v42) / v40;
        if (v35)
        {
          v43 = v37[(int)v35 - 13] * sqrtf((float)(v41 * (v42 + 2)) / (float)(v29 + v36 + 1));
          v37[(int)v35] = v43;
          *(float *)&dword_102301E28[13 * v34 + (v36 - 1)] = *(float *)&dword_102301E28[13 * v34 + (v36 - 1)]
                                                                         * v43;
          *(float *)&dword_1023020CC[13 * v34 + (v36 - 1)] = v43
                                                                         * *(float *)&dword_1023020CC[13 * v34 + (v36 - 1)];
          v41 = 1;
        }
        v44 = v37[v35];
        v32[v35] = v44 * v32[v35];
        v31[v35] = v44 * v31[v35];
        ++v36;
        v35 += 13;
        --v42;
      }
      while (v42 + 3 > 1);
      flt_102302BC4[v34] = (float)(int)v39;
      flt_102302BF8[v34] = (float)(int)v34;
      ++v29;
      ++v31;
      ++v32;
      ++v33;
      ++v34;
    }
    while (v39 != v30);
    dword_102301E24 = v36;
  }
  dword_102301E20 = v30;
  dword_102302C98 = 0;
  dword_102302F3C = -998637568;
  dword_102302F38 = -998637568;
  dword_102302F34 = -998637568;
  dword_102302F30 = -998637568;
  fclose(v23);
  return 0;
}

void sub_1005E7AB8(id a1)
{
  qword_10229FD48 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

void sub_1005E7BEC(id a1)
{
  qword_102302FB0 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLMotionStateSilo"));
}

uint64_t sub_1005E7CA0(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1005E7DCC;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_102302FC0 != -1)
    dispatch_once(&qword_102302FC0, block);
  return qword_1023109E8;
}

void sub_1005E7DCC()
{
  uint64_t v0;
  char v1;
  char v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  char v8;

  v8 = 1;
  v0 = sub_100127B9C();
  sub_100081C10(v0, &v6);
  v1 = sub_1001E4874(v6, "OscarActivity", (BOOL *)&v8);
  v2 = v1;
  v3 = v7;
  if (!v7)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if ((v2 & 1) != 0)
    {
LABEL_6:
      if (!v8)
        goto LABEL_12;
      goto LABEL_10;
    }
  }
  else
  {
LABEL_5:
    if ((v1 & 1) != 0)
      goto LABEL_6;
  }
  v8 = 1;
LABEL_10:
  if (sub_1001FBB04(0))
    operator new();
LABEL_12:
  operator new();
}

void sub_1005E7EDC()
{
  operator delete();
}

uint64_t sub_1005E7F24(uint64_t a1, void *a2)
{
  CLMotionActivity *v3;
  CLMotionActivity *Init;
  uint64_t v5;
  char v6;
  char v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  char v13;
  char v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  NSObject *v18;
  int v19;
  int v21;
  const char *v22;
  uint8_t *v23;
  _DWORD v24[4];
  uint8_t buf[8];
  std::__shared_weak_count *v26;

  v3 = (CLMotionActivity *)sub_1005E824C(a1, "CLMotionState", a2);
  *(_QWORD *)&v3->type = off_102147BC0;
  Init = (CLMotionActivity *)CLMotionActivity::getInit(v3);
  *(_WORD *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 250) = 0;
  CLMotionActivity::getInit(Init);
  *(_QWORD *)(a1 + 392) = a1 + 392;
  *(_QWORD *)(a1 + 400) = a1 + 392;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  v5 = sub_100127B9C();
  sub_100081C10(v5, buf);
  v6 = sub_1001E4874(*(uint64_t *)buf, "LogMotionStateReplay", (BOOL *)(a1 + 248));
  v7 = v6;
  v8 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      if ((v7 & 1) != 0)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  if ((v6 & 1) == 0)
LABEL_6:
    *(_BYTE *)(a1 + 248) = 0;
LABEL_7:
  v11 = sub_100127B9C();
  sub_100081C10(v11, buf);
  v12 = (_BYTE *)(a1 + 249);
  v13 = sub_1001E4874(*(uint64_t *)buf, "DisableMotionStateNotify", (BOOL *)(a1 + 249));
  v14 = v13;
  v15 = v26;
  if (!v26)
    goto LABEL_11;
  v16 = (unint64_t *)&v26->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (v17)
  {
LABEL_11:
    if ((v13 & 1) != 0)
      goto LABEL_13;
    goto LABEL_12;
  }
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  if ((v14 & 1) == 0)
LABEL_12:
    *v12 = 0;
LABEL_13:
  if (qword_10229FCB0 != -1)
    dispatch_once(&qword_10229FCB0, &stru_102147D50);
  v18 = qword_10229FCB8;
  if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEBUG))
  {
    v19 = *v12;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "DisableMotionStateNotifyDefaultsWrite,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_102147D50);
    v21 = *v12;
    v24[0] = 67109120;
    v24[1] = v21;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 2, "DisableMotionStateNotifyDefaultsWrite,%d", v24);
    v23 = (uint8_t *)v22;
    sub_100512490("Generic", 1, 0, 2, "CLMotionState::CLMotionState(id<CLIntersiloUniverse>)", "%s\n", v22);
    if (v23 != buf)
      free(v23);
  }
  return a1;
}

void sub_1005E8208(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  sub_1000F34E0(v2);
  sub_1005E82E8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1005E824C(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_102147DA0;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_1005E82CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005E82E8(uint64_t a1)
{
  *(_QWORD *)a1 = off_102147DA0;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_1005E835C(_QWORD *a1)
{
  *a1 = off_102147BC0;
  sub_1000F34E0(a1 + 49);
  return sub_1005E82E8((uint64_t)a1);
}

uint64_t sub_1005E8390(_QWORD *a1)
{
  *a1 = off_102147BC0;
  sub_1000F34E0(a1 + 49);
  return sub_1005E82E8((uint64_t)a1);
}

void sub_1005E83C4(_QWORD *a1)
{
  *a1 = off_102147BC0;
  sub_1000F34E0(a1 + 49);
  sub_1005E82E8((uint64_t)a1);
  operator delete();
}

void sub_1005E840C(uint64_t a1)
{
  void *v2;

  *(_BYTE *)(a1 + 108) = 1;
  v2 = *(void **)(a1 + 416);
  if (v2)
  {
    objc_msgSend(v2, "invalidate");

    *(_QWORD *)(a1 + 416) = 0;
  }
}

unint64_t sub_1005E8448()
{
  return ((unint64_t)sub_1001B7910() >> 23) & 1;
}

uint64_t sub_1005E8460()
{
  return 0;
}

__n128 sub_1005E8468(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a2 = *(_OWORD *)(a1 + 112);
  v2 = *(_OWORD *)(a1 + 128);
  v3 = *(_OWORD *)(a1 + 144);
  v4 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(a2 + 64) = v4;
  *(_OWORD *)(a2 + 16) = v2;
  *(_OWORD *)(a2 + 32) = v3;
  result = *(__n128 *)(a1 + 192);
  v6 = *(_OWORD *)(a1 + 208);
  v7 = *(_OWORD *)(a1 + 224);
  *(_QWORD *)(a2 + 128) = *(_QWORD *)(a1 + 240);
  *(_OWORD *)(a2 + 96) = v6;
  *(_OWORD *)(a2 + 112) = v7;
  *(__n128 *)(a2 + 80) = result;
  return result;
}

_QWORD *sub_1005E849C@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1015A2E04(a2, __str);
}

uint64_t sub_1005E8514(uint64_t result, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  int v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  if (!*(_BYTE *)(result + 249))
  {
    v2 = result;
    v3 = result + 112;
    if (*(_DWORD *)(result + 112))
    {
      switch(*a2)
      {
        case 0:
          LODWORD(v22) = 0;
          result = sub_1001B7864(result, (int *)&v22, 1);
          if ((int)result <= 1)
          {
            v4 = *(_OWORD *)(v3 + 112);
            v28 = *(_OWORD *)(v3 + 96);
            v29 = v4;
            v30 = *(_QWORD *)(v3 + 128);
            v5 = *(_OWORD *)(v3 + 48);
            v24 = *(_OWORD *)(v3 + 32);
            v25 = v5;
            v6 = *(_OWORD *)(v3 + 80);
            v26 = *(_OWORD *)(v3 + 64);
            v27 = v6;
            v7 = *(_OWORD *)(v3 + 16);
            v22 = *(_OWORD *)v3;
            v23 = v7;
            v21 = 0;
            return (*(uint64_t (**)(uint64_t, int *, __int128 *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 152))(v2, &v21, &v22, 1, 0xFFFFFFFFLL, 0);
          }
          return result;
        case 1:
          LODWORD(v22) = 1;
          result = sub_1001B7864(result, (int *)&v22, 1);
          if ((int)result <= 1)
          {
            v13 = *(_OWORD *)(v3 + 112);
            v28 = *(_OWORD *)(v3 + 96);
            v29 = v13;
            v30 = *(_QWORD *)(v3 + 128);
            v14 = *(_OWORD *)(v3 + 48);
            v24 = *(_OWORD *)(v3 + 32);
            v25 = v14;
            v15 = *(_OWORD *)(v3 + 80);
            v26 = *(_OWORD *)(v3 + 64);
            v27 = v15;
            v16 = *(_OWORD *)(v3 + 16);
            v22 = *(_OWORD *)v3;
            v23 = v16;
            v21 = 1;
            return (*(uint64_t (**)(uint64_t, int *, __int128 *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 152))(v2, &v21, &v22, 1, 0xFFFFFFFFLL, 0);
          }
          return result;
        case 2:
          v8 = 2;
          goto LABEL_9;
        case 3:
          LODWORD(v22) = 3;
          result = sub_1001B7864(result, (int *)&v22, 1);
          if ((int)result > 1)
            return result;
          v17 = *(_OWORD *)(v2 + 368);
          v28 = *(_OWORD *)(v2 + 352);
          v29 = v17;
          v30 = *(_QWORD *)(v2 + 384);
          v18 = *(_OWORD *)(v2 + 304);
          v24 = *(_OWORD *)(v2 + 288);
          v25 = v18;
          v19 = *(_OWORD *)(v2 + 336);
          v26 = *(_OWORD *)(v2 + 320);
          v27 = v19;
          v20 = *(_OWORD *)(v2 + 272);
          v22 = *(_OWORD *)(v2 + 256);
          v23 = v20;
          v21 = 3;
          break;
        case 4:
          v8 = 4;
LABEL_9:
          LODWORD(v22) = v8;
          result = sub_1001B7864(result, (int *)&v22, 1);
          if ((int)result > 1)
            return result;
          v9 = *(_OWORD *)(v3 + 112);
          v28 = *(_OWORD *)(v3 + 96);
          v29 = v9;
          v30 = *(_QWORD *)(v3 + 128);
          v10 = *(_OWORD *)(v3 + 48);
          v24 = *(_OWORD *)(v3 + 32);
          v25 = v10;
          v11 = *(_OWORD *)(v3 + 80);
          v26 = *(_OWORD *)(v3 + 64);
          v27 = v11;
          v12 = *(_OWORD *)(v3 + 16);
          v22 = *(_OWORD *)v3;
          v23 = v12;
          v21 = v8;
          break;
        default:
          return result;
      }
      return (*(uint64_t (**)(uint64_t, int *, __int128 *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 152))(v2, &v21, &v22, 1, 0xFFFFFFFFLL, 0);
    }
  }
  return result;
}

void sub_1005E8710(uint64_t a1)
{
  int *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v11[8];
  uint64_t v12;
  int v13;
  _OWORD v14[8];
  uint64_t v15;

  v2 = (int *)(a1 + 112);
  v3 = *(_OWORD *)(a1 + 224);
  v11[6] = *(_OWORD *)(a1 + 208);
  v11[7] = v3;
  v12 = *(_QWORD *)(a1 + 240);
  v4 = *(_OWORD *)(a1 + 160);
  v11[2] = *(_OWORD *)(a1 + 144);
  v11[3] = v4;
  v5 = *(_OWORD *)(a1 + 192);
  v11[4] = *(_OWORD *)(a1 + 176);
  v11[5] = v5;
  v6 = *(_OWORD *)(a1 + 128);
  v11[0] = *(_OWORD *)(a1 + 112);
  v11[1] = v6;
  CLMotionActivity::init((CLMotionActivity *)(a1 + 112));
  sub_1005E8820(a1);
  CLMotionActivity::init((CLMotionActivity *)(a1 + 256));
  if (!*(_BYTE *)(a1 + 249))
  {
    v7 = *(_OWORD *)(a1 + 368);
    v14[6] = *(_OWORD *)(a1 + 352);
    v14[7] = v7;
    v15 = *(_QWORD *)(a1 + 384);
    v8 = *(_OWORD *)(a1 + 304);
    v14[2] = *(_OWORD *)(a1 + 288);
    v14[3] = v8;
    v9 = *(_OWORD *)(a1 + 336);
    v14[4] = *(_OWORD *)(a1 + 320);
    v14[5] = v9;
    v10 = *(_OWORD *)(a1 + 272);
    v14[0] = *(_OWORD *)(a1 + 256);
    v14[1] = v10;
    v13 = 3;
    (*(void (**)(uint64_t, int *, _OWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v13, v14, 1, 0xFFFFFFFFLL, 0);
  }
  sub_100928B14((int *)v11, v2, (uint64_t)"");
}

uint64_t sub_1005E8820(uint64_t result)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  int v6;
  _OWORD v7[8];
  uint64_t v8;

  if (!*(_BYTE *)(result + 249))
  {
    v1 = result;
    v2 = *(_OWORD *)(result + 224);
    v7[6] = *(_OWORD *)(result + 208);
    v7[7] = v2;
    v8 = *(_QWORD *)(result + 240);
    v3 = *(_OWORD *)(result + 160);
    v7[2] = *(_OWORD *)(result + 144);
    v7[3] = v3;
    v4 = *(_OWORD *)(result + 192);
    v7[4] = *(_OWORD *)(result + 176);
    v7[5] = v4;
    v5 = *(_OWORD *)(result + 128);
    v7[0] = *(_OWORD *)(result + 112);
    v7[1] = v5;
    v6 = 0;
    (*(void (**)(uint64_t, int *, _OWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)result + 152))(result, &v6, v7, 1, 0xFFFFFFFFLL, 0);
    v6 = 1;
    (*(void (**)(uint64_t, int *, _OWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v1 + 152))(v1, &v6, v7, 1, 0xFFFFFFFFLL, 0);
    v6 = 2;
    return (*(uint64_t (**)(uint64_t, int *, _OWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v1 + 152))(v1, &v6, v7, 1, 0xFFFFFFFFLL, 0);
  }
  return result;
}

void sub_1005E8920(int *a1, int *a2)
{
  sub_100928B14(a1, a2, (uint64_t)"");
}

uint64_t sub_1005E892C(uint64_t result, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)(result + 112) = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(result + 160) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(result + 176) = v4;
  *(_OWORD *)(result + 128) = v2;
  *(_OWORD *)(result + 144) = v3;
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(result + 240) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(result + 208) = v6;
  *(_OWORD *)(result + 224) = v7;
  *(_OWORD *)(result + 192) = v5;
  return sub_1005E8820(result);
}

uint64_t sub_1005E8960(uint64_t a1, _DWORD *a2)
{
  NSObject *v3;
  _BOOL4 v4;
  uint64_t result;
  const char *v6;
  uint8_t *v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  _WORD v11[8];
  uint8_t buf[1640];

  if (*a2 != 3)
    return 1;
  if (*(_BYTE *)(a1 + 250))
  {
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_102147D50);
    v3 = qword_10229FCB8;
    if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "DOMINANT ACTIVITY: already monitoring dominant activity", buf, 2u);
    }
    v4 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v4)
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_102147D50);
      v11[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 16, "DOMINANT ACTIVITY: already monitoring dominant activity", v11, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLMotionState::registerForNotificationInternal(const CLMotionState_Type::Notification &)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
      return 0;
    }
  }
  else
  {
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_102147D50);
    v8 = qword_10229FCB8;
    if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "DOMINANT ACTIVITY: start monitoring dominant activity", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_102147D50);
      v11[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 2, "DOMINANT ACTIVITY: start monitoring dominant activity", v11, 2);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLMotionState::registerForNotificationInternal(const CLMotionState_Type::Notification &)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    result = 1;
    *(_BYTE *)(a1 + 250) = 1;
  }
  return result;
}

uint64_t sub_1005E8C44(uint64_t a1, _DWORD *a2)
{
  NSObject *v3;
  void *v4;
  uint64_t result;
  NSObject *v6;
  _BOOL4 v7;
  const char *v8;
  uint8_t *v9;
  const char *v10;
  uint8_t *v11;
  _WORD v12[8];
  uint8_t buf[1640];

  if (*a2 != 3)
    return 1;
  if (*(_BYTE *)(a1 + 250))
  {
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_102147D50);
    v3 = qword_10229FCB8;
    if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "DOMINANT ACTIVITY: stop monitoring dominant activity", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_102147D50);
      v12[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 2, "DOMINANT ACTIVITY: stop monitoring dominant activity", v12, 2);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLMotionState::unregisterForNotificationInternal(const CLMotionState_Type::Notification &)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    CLMotionActivity::init((CLMotionActivity *)(a1 + 256));
    *(_BYTE *)(a1 + 250) = 0;
    v4 = *(void **)(a1 + 416);
    if (v4)
    {
      objc_msgSend(v4, "invalidate");

      *(_QWORD *)(a1 + 416) = 0;
    }
    return 1;
  }
  if (qword_10229FCB0 != -1)
    dispatch_once(&qword_10229FCB0, &stru_102147D50);
  v6 = qword_10229FCB8;
  if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "DOMINANT ACTIVITY: not monitoring dominant activity yet", buf, 2u);
  }
  v7 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v7)
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_102147D50);
    v12[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 16, "DOMINANT ACTIVITY: not monitoring dominant activity yet", v12, 2);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLMotionState::unregisterForNotificationInternal(const CLMotionState_Type::Notification &)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
    return 0;
  }
  return result;
}

double sub_1005E8F40(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  double result;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  _OWORD v16[8];
  uint64_t v17;

  v4 = *(_OWORD *)(a2 + 112);
  v16[6] = *(_OWORD *)(a2 + 96);
  v16[7] = v4;
  v17 = *(_QWORD *)(a2 + 128);
  v5 = *(_OWORD *)(a2 + 48);
  v16[2] = *(_OWORD *)(a2 + 32);
  v16[3] = v5;
  v6 = *(_OWORD *)(a2 + 80);
  v16[4] = *(_OWORD *)(a2 + 64);
  v16[5] = v6;
  v7 = *(_OWORD *)(a2 + 16);
  v16[0] = *(_OWORD *)a2;
  v16[1] = v7;
  v15 = 4;
  (*(void (**)(uint64_t, int *, _OWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v15, v16, 1, 0xFFFFFFFFLL, 0);
  if (*(_BYTE *)(a1 + 250))
  {
    v9 = operator new(0x98uLL);
    v10 = *(_OWORD *)(a2 + 112);
    v9[7] = *(_OWORD *)(a2 + 96);
    v9[8] = v10;
    *((_QWORD *)v9 + 18) = *(_QWORD *)(a2 + 128);
    v11 = *(_OWORD *)(a2 + 48);
    v9[3] = *(_OWORD *)(a2 + 32);
    v9[4] = v11;
    v12 = *(_OWORD *)(a2 + 80);
    v9[5] = *(_OWORD *)(a2 + 64);
    v9[6] = v12;
    v13 = *(_OWORD *)(a2 + 16);
    v9[1] = *(_OWORD *)a2;
    v9[2] = v13;
    v14 = *(_QWORD *)(a1 + 392);
    *(_QWORD *)v9 = v14;
    *((_QWORD *)v9 + 1) = a1 + 392;
    *(_QWORD *)(v14 + 8) = v9;
    *(_QWORD *)(a1 + 392) = v9;
    ++*(_QWORD *)(a1 + 408);
    return sub_1005E9048();
  }
  return result;
}

double sub_1005E9048()
{
  double result;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102147D70);
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG) || sub_1001BFF7C(115, 3))
    return CFAbsoluteTimeGetCurrent();
  return result;
}

void sub_1005E90AC(uint64_t a1)
{
  void *v2;
  double Current;
  double v4;
  _OWORD *v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _QWORD *v18;
  uint64_t v19;
  CLMotionActivity *v20;
  _DWORD *v21;
  double v22;
  double v23;
  _DWORD *v24;
  double v25;
  double v26;
  _QWORD *v27;
  int v28;
  _QWORD **v29;
  _QWORD *v30;
  _QWORD **v31;
  int v32;
  int v33;
  uint64_t *v34;
  __n128 *v35;
  __n128 *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  __n128 *v40;
  __n128 *v41;
  __n128 *v42;
  __n128 *v43;
  uint64_t *v44;
  uint64_t *v45;
  BOOL v46;
  unsigned int v47;
  unint64_t v48;
  __n128 *v49;
  unint64_t v50;
  uint64_t v51;
  id v52;
  double v53;
  NSObject *v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  char *v65;
  const char *v66;
  double v67[5];
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  void *__p;
  __n128 *v78;
  __n128 *v79;
  uint64_t *v80;
  _QWORD *v81;
  uint64_t v82;
  int v83;
  double v84;
  __int16 v85;
  uint64_t v86;
  __int16 v87;
  uint64_t v88;
  __int16 v89;
  unint64_t v90;
  _BYTE buf[32];
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;

  v2 = *(void **)(a1 + 416);
  if (v2)
  {
    objc_msgSend(v2, "invalidate");

    *(_QWORD *)(a1 + 416) = 0;
  }
  if (!*(_BYTE *)(a1 + 250))
    return;
  Current = CFAbsoluteTimeGetCurrent();
  v4 = Current;
  v5 = (_OWORD *)(a1 + 392);
  v6 = *(_QWORD *)(a1 + 400);
  if (v6 != a1 + 392)
  {
    v7 = Current + -30.0;
    v8 = *(_QWORD *)(a1 + 400);
    v9 = (_OWORD *)(a1 + 392);
    if (*(double *)(v6 + 96) < Current + -30.0)
    {
      v8 = *(_QWORD *)(a1 + 400);
      while (1)
      {
        v9 = (_OWORD *)v8;
        v8 = *(_QWORD *)(v8 + 8);
        if ((_OWORD *)v8 == v5)
          break;
        if (*(double *)(v8 + 96) >= v7)
          goto LABEL_11;
      }
      v8 = a1 + 392;
    }
LABEL_11:
    if (v9 != v5)
    {
      v10 = v9[3];
      *(_OWORD *)&buf[16] = v9[2];
      v92 = v10;
      v11 = v9[5];
      v93 = v9[4];
      v94 = v11;
      *(_OWORD *)buf = v9[1];
      v12 = *(_OWORD *)((char *)v9 + 120);
      v68 = *(_OWORD *)((char *)v9 + 104);
      v69 = v12;
      v70 = *(_OWORD *)((char *)v9 + 136);
      if ((_OWORD *)v8 == v5)
      {
        v13 = *(_QWORD *)v9;
        *(_QWORD *)(v13 + 8) = *((_QWORD *)v9 + 1);
        **((_QWORD **)v9 + 1) = v13;
        --*(_QWORD *)(a1 + 408);
        operator delete(v9);
      }
      else
      {
        sub_1005E98AC(a1 + 392, (uint64_t *)v6, (uint64_t *)v8);
      }
      v14 = operator new(0x98uLL);
      v15 = v93;
      v14[3] = v92;
      v14[4] = v15;
      v14[5] = v94;
      v16 = *(_OWORD *)&buf[16];
      v14[1] = *(_OWORD *)buf;
      v14[2] = v16;
      *((double *)v14 + 12) = v7;
      v17 = v69;
      *(_OWORD *)((char *)v14 + 104) = v68;
      *(_OWORD *)((char *)v14 + 120) = v17;
      *(_OWORD *)((char *)v14 + 136) = v70;
      v18 = *(_QWORD **)(a1 + 400);
      *(_QWORD *)v14 = v5;
      *((_QWORD *)v14 + 1) = v18;
      *v18 = v14;
      v19 = *(_QWORD *)(a1 + 408) + 1;
      *(_QWORD *)(a1 + 400) = v14;
      *(_QWORD *)(a1 + 408) = v19;
    }
  }
  sub_1005E9048();
  v81 = 0;
  v82 = 0;
  v80 = (uint64_t *)&v81;
  v21 = *(_DWORD **)(a1 + 400);
  if (v5 == (_OWORD *)v21)
  {
    __p = 0;
    v78 = 0;
    v22 = 0.0;
    v79 = 0;
    goto LABEL_61;
  }
  v22 = 0.0;
  v23 = v4;
  do
  {
    v24 = *(_DWORD **)v5;
    v25 = *(double *)(*(_QWORD *)v5 + 96);
    v26 = v23 - v25;
    v27 = v81;
    if (!v81)
    {
      v28 = v24[4];
LABEL_33:
      v33 = v24[5];
      *(_DWORD *)buf = v28;
      *(_DWORD *)&buf[8] = v28;
      *(_DWORD *)&buf[12] = v33;
      *(double *)&buf[16] = v23 - v25;
      v20 = (CLMotionActivity *)sub_1005EAA84(&v80, (int *)buf, (uint64_t)buf);
      v24 = *(_DWORD **)v5;
      v25 = *(double *)(*(_QWORD *)v5 + 96);
      v21 = *(_DWORD **)(a1 + 400);
      goto LABEL_34;
    }
    v28 = v24[4];
    v29 = &v81;
    do
    {
      v30 = v27;
      v31 = v29;
      v32 = *((_DWORD *)v27 + 8);
      if (v32 >= v28)
        v29 = (_QWORD **)v27;
      else
        ++v27;
      v27 = (_QWORD *)*v27;
    }
    while (v27);
    if (v29 == &v81)
      goto LABEL_33;
    if (v32 < v28)
      v30 = v31;
    if (v28 < *((_DWORD *)v30 + 8))
      goto LABEL_33;
    if (v24[5] == 2 && *((_DWORD *)v29 + 11) != 2)
      *((_DWORD *)v29 + 11) = 2;
    *((double *)v29 + 6) = v26 + *((double *)v29 + 6);
LABEL_34:
    v22 = v22 + v26;
    v23 = v25;
    v5 = v24;
  }
  while (v24 != v21);
  v34 = v80;
  __p = 0;
  v78 = 0;
  v79 = 0;
  if (v80 != (uint64_t *)&v81)
  {
    v35 = 0;
    do
    {
      v36 = (__n128 *)(v34 + 5);
      if (v35 >= v79)
      {
        v37 = ((char *)v35 - (_BYTE *)__p) >> 4;
        if ((unint64_t)(v37 + 1) >> 60)
          sub_100259694();
        v38 = ((char *)v79 - (_BYTE *)__p) >> 3;
        if (v38 <= v37 + 1)
          v38 = v37 + 1;
        if ((unint64_t)((char *)v79 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF0)
          v39 = 0xFFFFFFFFFFFFFFFLL;
        else
          v39 = v38;
        if (v39)
          v20 = (CLMotionActivity *)sub_10028E224((uint64_t)&v79, v39);
        else
          v20 = 0;
        v40 = (__n128 *)((char *)v20 + 16 * v37);
        *v40 = *v36;
        v42 = (__n128 *)__p;
        v41 = v78;
        v43 = v40;
        if (v78 != __p)
        {
          do
          {
            v43[-1] = v41[-1];
            --v43;
            --v41;
          }
          while (v41 != v42);
          v41 = (__n128 *)__p;
        }
        v35 = v40 + 1;
        __p = v43;
        v78 = v40 + 1;
        v79 = (__n128 *)((char *)v20 + 16 * v39);
        if (v41)
          operator delete(v41);
      }
      else
      {
        *v35++ = *v36;
      }
      v78 = v35;
      v44 = (uint64_t *)v34[1];
      if (v44)
      {
        do
        {
          v45 = v44;
          v44 = (uint64_t *)*v44;
        }
        while (v44);
      }
      else
      {
        do
        {
          v45 = (uint64_t *)v34[2];
          v46 = *v45 == (_QWORD)v34;
          v34 = v45;
        }
        while (!v46);
      }
      v34 = v45;
    }
    while (v45 != (uint64_t *)&v81);
  }
LABEL_61:
  v76 = 0;
  v74 = 0u;
  v75 = 0u;
  v72 = 0u;
  v73 = 0u;
  v70 = 0u;
  v71 = 0u;
  v68 = 0u;
  v69 = 0u;
  CLMotionActivity::getInit(v20);
  if (v22 >= 30.0)
  {
    v50 = 126 - 2 * __clz(((char *)v78 - (_BYTE *)__p) >> 4);
    if (v78 == __p)
      v51 = 0;
    else
      v51 = v50;
    sub_1005EAB44((__n128 *)__p, v78, (uint64_t)buf, v51, 1);
    v49 = v78;
    *(_QWORD *)&v68 = v78[-1].n128_u64[0];
    v48 = v78[-1].n128_u64[1];
    v47 = v68;
  }
  else
  {
    v47 = 0;
    *(_QWORD *)&v68 = 0;
    v48 = -1.0;
    v49 = v78;
  }
  *(double *)&v73 = v4;
  if ((unint64_t)((char *)v49 - (_BYTE *)__p) >= 0x11
    && (*(_DWORD *)(a1 + 112) != *(_DWORD *)(a1 + 256) || *(_DWORD *)(a1 + 116) != *(_DWORD *)(a1 + 260)))
  {
    v52 = objc_msgSend(*(id *)(a1 + 40), "newTimer");
    *(_QWORD *)(a1 + 416) = v52;
    *(_QWORD *)&v67[0] = _NSConcreteStackBlock;
    *(_QWORD *)&v67[1] = 3221225472;
    *(_QWORD *)&v67[2] = sub_1005E991C;
    *(_QWORD *)&v67[3] = &unk_10212ECA0;
    *(_QWORD *)&v67[4] = a1;
    objc_msgSend(v52, "setHandler:", v67);
    if (v82 - 2 >= (unint64_t)(((char *)v78 - (_BYTE *)__p) >> 4))
      sub_1002EAEB0();
    v53 = (v78[-1].n128_f64[1] - *((double *)__p + 2 * v82 - 3)) * 0.5;
    if (v53 < 1.0)
      v53 = 1.0;
    objc_msgSend(*(id *)(a1 + 416), "setNextFireDelay:", v53);
    v47 = v68;
  }
  if (*(_QWORD *)(a1 + 256) != __PAIR64__(DWORD1(v68), v47))
  {
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_102147D50);
    v54 = qword_10229FCB8;
    if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEBUG))
    {
      v55 = CLMotionActivity::activityTypeToString(v68);
      v56 = CLMotionActivity::activityConfidenceToString(DWORD1(v68));
      *(_DWORD *)buf = 134218754;
      *(double *)&buf[4] = v22;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v55;
      *(_WORD *)&buf[22] = 2080;
      *(_QWORD *)&buf[24] = v56;
      LOWORD(v92) = 2048;
      *(_QWORD *)((char *)&v92 + 2) = v48;
      _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEBUG, "DOMINANT ACTIVITY: dominant activity during the last %f seconds, type, %s, confidence, %s, interval, %f", buf, 0x2Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_102147D50);
      v61 = qword_10229FCB8;
      v62 = CLMotionActivity::activityTypeToString(v68);
      v63 = CLMotionActivity::activityConfidenceToString(DWORD1(v68));
      v83 = 134218754;
      v84 = v22;
      v85 = 2080;
      v86 = v62;
      v87 = 2080;
      v88 = v63;
      v89 = 2048;
      v90 = v48;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v61, 2, "DOMINANT ACTIVITY: dominant activity during the last %f seconds, type, %s, confidence, %s, interval, %f", COERCE_DOUBLE(&v83), 42, v66, v67[0]);
      v65 = (char *)v64;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionState::processDominantActivity()", "%s\n", v64);
      if (v65 != buf)
        free(v65);
    }
    v57 = v75;
    *(_OWORD *)(a1 + 352) = v74;
    *(_OWORD *)(a1 + 368) = v57;
    *(_QWORD *)(a1 + 384) = v76;
    v58 = v71;
    *(_OWORD *)(a1 + 288) = v70;
    *(_OWORD *)(a1 + 304) = v58;
    v59 = v73;
    *(_OWORD *)(a1 + 320) = v72;
    *(_OWORD *)(a1 + 336) = v59;
    v60 = v69;
    *(_OWORD *)(a1 + 256) = v68;
    *(_OWORD *)(a1 + 272) = v60;
    if (!*(_BYTE *)(a1 + 249))
    {
      v96 = v74;
      v97 = v75;
      v98 = v76;
      v92 = v70;
      v93 = v71;
      v94 = v72;
      v95 = v73;
      *(_OWORD *)buf = v68;
      *(_OWORD *)&buf[16] = v69;
      v83 = 3;
      (*(void (**)(uint64_t, int *, _BYTE *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v83, buf, 1, 0xFFFFFFFFLL, 0);
    }
  }
  if (__p)
  {
    v78 = (__n128 *)__p;
    operator delete(__p);
  }
  sub_100008848((uint64_t)&v80, v81);
}

void sub_1005E985C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,char a38,_QWORD *a39)
{
  if (__p)
    operator delete(__p);
  sub_100008848((uint64_t)&a38, a39);
  _Unwind_Resume(a1);
}

uint64_t *sub_1005E98AC(uint64_t a1, uint64_t *__p, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  if (__p != a3)
  {
    v5 = *a3;
    v6 = *__p;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(*a3 + 8);
    **(_QWORD **)(v5 + 8) = v6;
    do
    {
      v7 = (uint64_t *)__p[1];
      --*(_QWORD *)(a1 + 16);
      operator delete(__p);
      __p = v7;
    }
    while (v7 != a3);
  }
  return a3;
}

uint64_t sub_1005E991C(uint64_t a1)
{
  return sub_1005E90AC(*(_QWORD *)(a1 + 32));
}

id sub_1005E9924(uint64_t a1)
{
  return objc_msgSend(-[CLServiceVendor proxyForService:](+[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance"), "proxyForService:", CFSTR("CLMotionState")), "syncgetDoSync:", a1);
}

void sub_1005E995C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102147D30);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_102147D30);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData>::removeClient(int) [Notification_T = CLMotionState_Type::Notification, NotificationData_T = CLMotionState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

BOOL sub_1005E9BD0(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102147D30);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102147D30);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLMotionState_Type::Notification, NotificationData_T = CLMotionState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1005E9E50(uint64_t a1, int *a2, _OWORD *a3)
{
  char *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t **v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  int v17;
  __int128 v18;
  int *v19;

  v6 = (char *)operator new(0xB8uLL);
  v7 = a3[7];
  *(_OWORD *)(v6 + 120) = a3[6];
  *(_OWORD *)(v6 + 136) = v7;
  v8 = a3[9];
  *(_OWORD *)(v6 + 152) = a3[8];
  *(_OWORD *)(v6 + 168) = v8;
  v9 = a3[3];
  *(_OWORD *)(v6 + 56) = a3[2];
  *(_OWORD *)(v6 + 72) = v9;
  v10 = a3[5];
  *(_OWORD *)(v6 + 88) = a3[4];
  *(_OWORD *)(v6 + 104) = v10;
  v11 = a3[1];
  *(_OWORD *)(v6 + 24) = *a3;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = off_102147E80;
  *((_QWORD *)v6 + 1) = 0;
  *(_OWORD *)(v6 + 40) = v11;
  *(_QWORD *)&v18 = v6 + 24;
  *((_QWORD *)&v18 + 1) = v6;
  v17 = *a2;
  v19 = &v17;
  v12 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v17, (uint64_t)&unk_101B9EB60, &v19);
  sub_1002B7674((uint64_t)(v12 + 8), &v18);
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return 1;
}

void sub_1005E9F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005E9F6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _OWORD v5[10];

  memset(v5, 0, sizeof(v5));
  return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, a2, v5, a3, a4, 0);
}

void sub_1005E9FE4(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102147D30);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102147D30);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData>::listClients() [Notification_T = CLMotionState_Type::Notification, NotificationData_T = CLMotionState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102147D30);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102147D30);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData>::listClients() [Notification_T = CLMotionState_Type::Notification, NotificationData_T = CLMotionState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_102147D30);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102147D30);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData>::listClients() [Notification_T = CLMotionState_Type::Notification, NotificationData_T = CLMotionState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_1005EA590(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1005EA5BC(id a1)
{
  qword_10229FCB8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Activity");
}

void sub_1005EA5E8(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1005EA614(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102147E80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1005EA628(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102147E80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

id sub_1005EA65C(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t buf[4];
  id v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  unint64_t v15;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return sub_1005EA9E4((uint64_t)&v8 + 7, a1);
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102147EC0);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v11 = v2;
      v12 = 2048;
      v13 = 0;
      v14 = 2080;
      v15 = 0x8000000101BB78B1 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102147EC0);
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    v4 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v9, v8, v9);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102147EC0);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v11 = v2;
      v12 = 2048;
      v13 = 0;
      v14 = 2080;
      v15 = 0x8000000101BB78B1 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102147EC0);
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    v4 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v9, v8, v9);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLMotionState_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

id sub_1005EA9E4(uint64_t a1, void *a2)
{
  if (!objc_msgSend(a2, "cppObjectPtr")
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_10221B2E8))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)160)
      sub_101901848();
    objc_msgSend(a2, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a2, "serialized"), "bytes"));
  }
  return objc_msgSend(a2, "cppObjectPtr");
}

void sub_1005EAA58(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t **sub_1005EAA84(uint64_t **a1, int *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  uint64_t **v8;
  int v9;
  char *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 8);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (char *)operator new(0x38uLL);
    *((_DWORD *)v10 + 8) = *(_DWORD *)a3;
    *(_OWORD *)(v10 + 40) = *(_OWORD *)(a3 + 8);
    sub_1000145B0(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void sub_1005EAB44(__n128 *a1, __n128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __n128 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  double *n128_f64;
  __n128 *v16;
  char v17;
  BOOL v18;
  __n128 *v19;
  double v20;
  double v21;
  unint64_t v22;
  __n128 *v23;
  double v24;
  __n128 v25;
  __n128 v26;

uint64_t sub_1005EAEC4(uint64_t result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;

  if ((_QWORD *)result != a2)
  {
    v2 = (_QWORD *)(result + 16);
    if ((_QWORD *)(result + 16) != a2)
    {
      v3 = 0;
      v4 = (_QWORD *)result;
      do
      {
        v5 = *((double *)v4 + 3);
        v6 = *((double *)v4 + 1);
        v4 = v2;
        if (v5 < v6)
        {
          v7 = *v2;
          v8 = v3;
          while (1)
          {
            *(_OWORD *)(result + v8 + 16) = *(_OWORD *)(result + v8);
            if (!v8)
              break;
            v9 = *(double *)(result + v8 - 8);
            v8 -= 16;
            if (v5 >= v9)
            {
              v10 = result + v8 + 16;
              goto LABEL_10;
            }
          }
          v10 = result;
LABEL_10:
          *(_QWORD *)v10 = v7;
          *(double *)(v10 + 8) = v5;
        }
        v2 = v4 + 2;
        v3 += 16;
      }
      while (v4 + 2 != a2);
    }
  }
  return result;
}

uint64_t sub_1005EAF48(double *a1, double *a2, double *a3)
{
  double v3;
  double v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v3 = a2[1];
  v4 = a3[1];
  if (v3 < a1[1])
  {
    if (v4 < v3)
    {
      v5 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v5;
      return 1;
    }
    v8 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v8;
    if (a3[1] >= a2[1])
      return 1;
    v9 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v9;
    return 2;
  }
  if (v4 < v3)
  {
    v6 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v6;
    if (a2[1] >= a1[1])
      return 1;
    v7 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v7;
    return 2;
  }
  return 0;
}

unint64_t sub_1005EB004(double *a1, double *a2)
{
  double v2;
  double *v3;
  unint64_t v4;
  double v5;
  unint64_t v6;
  double v7;
  double *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  __int128 v14;

  v2 = a1[1];
  if (v2 >= *(a2 - 1))
  {
    v6 = (unint64_t)(a1 + 2);
    do
    {
      v4 = v6;
      if (v6 >= (unint64_t)a2)
        break;
      v7 = *(double *)(v6 + 8);
      v6 += 16;
    }
    while (v2 >= v7);
  }
  else
  {
    v3 = a1;
    do
    {
      v4 = (unint64_t)(v3 + 2);
      v5 = v3[3];
      v3 += 2;
    }
    while (v2 >= v5);
  }
  if (v4 >= (unint64_t)a2)
  {
    v8 = a2;
  }
  else
  {
    do
    {
      v8 = a2 - 2;
      v9 = *(a2 - 1);
      a2 -= 2;
    }
    while (v2 < v9);
  }
  v10 = *a1;
  while (v4 < (unint64_t)v8)
  {
    v14 = *(_OWORD *)v4;
    *(_OWORD *)v4 = *(_OWORD *)v8;
    *(_OWORD *)v8 = v14;
    do
    {
      v11 = *(double *)(v4 + 24);
      v4 += 16;
    }
    while (v2 >= v11);
    do
    {
      v12 = *(v8 - 1);
      v8 -= 2;
    }
    while (v2 < v12);
  }
  if ((double *)(v4 - 16) != a1)
    *(_OWORD *)a1 = *(_OWORD *)(v4 - 16);
  *(double *)(v4 - 16) = v10;
  *(double *)(v4 - 8) = v2;
  return v4;
}

unint64_t sub_1005EB0E8(double *a1, double *a2)
{
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  unint64_t v6;
  double *v7;
  double v8;
  double v9;
  unint64_t v10;
  double *v11;
  __int128 v12;
  double v13;
  double v14;

  v2 = 0;
  v3 = *a1;
  v4 = a1[1];
  do
  {
    v5 = a1[v2 + 3];
    v2 += 2;
  }
  while (v5 < v4);
  v6 = (unint64_t)&a1[v2];
  if (v2 == 2)
  {
    while (v6 < (unint64_t)a2)
    {
      v7 = a2 - 2;
      v9 = *(a2 - 1);
      a2 -= 2;
      if (v9 < v4)
        goto LABEL_9;
    }
    v7 = a2;
  }
  else
  {
    do
    {
      v7 = a2 - 2;
      v8 = *(a2 - 1);
      a2 -= 2;
    }
    while (v8 >= v4);
  }
LABEL_9:
  v10 = (unint64_t)&a1[v2];
  if (v6 < (unint64_t)v7)
  {
    v11 = v7;
    do
    {
      v12 = *(_OWORD *)v10;
      *(_OWORD *)v10 = *(_OWORD *)v11;
      *(_OWORD *)v11 = v12;
      do
      {
        v13 = *(double *)(v10 + 24);
        v10 += 16;
      }
      while (v13 < v4);
      do
      {
        v14 = *(v11 - 1);
        v11 -= 2;
      }
      while (v14 >= v4);
    }
    while (v10 < (unint64_t)v11);
  }
  if ((double *)(v10 - 16) != a1)
    *(_OWORD *)a1 = *(_OWORD *)(v10 - 16);
  *(double *)(v10 - 16) = v3;
  *(double *)(v10 - 8) = v4;
  return v10 - 16;
}

BOOL sub_1005EB1CC(__n128 *a1, __n128 *a2)
{
  uint64_t v4;
  _BOOL8 result;
  __n128 v6;
  __n128 *v7;
  __n128 *v8;
  uint64_t v9;
  int v10;
  double v11;
  unint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (a2[-1].n128_f64[1] < a1->n128_f64[1])
      {
        v6 = *a1;
        *a1 = a2[-1];
        a2[-1] = v6;
      }
      return result;
    case 3:
      sub_1005EAF48(a1->n128_f64, a1[1].n128_f64, a2[-1].n128_f64);
      return 1;
    case 4:
      sub_1005EB358(a1->n128_f64, (uint64_t)&a1[1], (uint64_t)&a1[2], (uint64_t)&a2[-1]);
      return 1;
    case 5:
      sub_1005EB3F8(a1->n128_f64, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v7 = a1 + 2;
      sub_1005EAF48(a1->n128_f64, a1[1].n128_f64, a1[2].n128_f64);
      v8 = a1 + 3;
      if (&a1[3] == a2)
        return 1;
      v9 = 0;
      v10 = 0;
      break;
  }
  while (1)
  {
    v11 = v8->n128_f64[1];
    if (v11 < v7->n128_f64[1])
    {
      v12 = v8->n128_u64[0];
      v13 = v9;
      while (1)
      {
        *(__n128 *)((char *)a1 + v13 + 48) = *(__n128 *)((char *)a1 + v13 + 32);
        if (v13 == -32)
          break;
        v14 = *(double *)((char *)&a1[1].n128_f64[1] + v13);
        v13 -= 16;
        if (v11 >= v14)
        {
          v15 = (uint64_t)&a1[3] + v13;
          goto LABEL_12;
        }
      }
      v15 = (uint64_t)a1;
LABEL_12:
      *(_QWORD *)v15 = v12;
      *(double *)(v15 + 8) = v11;
      if (++v10 == 8)
        return &v8[1] == a2;
    }
    v7 = v8;
    v9 += 16;
    if (++v8 == a2)
      return 1;
  }
}

__n128 sub_1005EB358(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;

  sub_1005EAF48(a1, (double *)a2, (double *)a3);
  result.n128_u64[0] = *(_QWORD *)(a4 + 8);
  if (result.n128_f64[0] < *(double *)(a3 + 8))
  {
    result = *(__n128 *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(__n128 *)a4 = result;
    result.n128_u64[0] = *(_QWORD *)(a3 + 8);
    if (result.n128_f64[0] < *(double *)(a2 + 8))
    {
      result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      result.n128_u64[0] = *(_QWORD *)(a2 + 8);
      if (result.n128_f64[0] < a1[1])
      {
        result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 sub_1005EB3F8(double *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5)
{
  __n128 result;

  sub_1005EB358(a1, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
  result.n128_u64[0] = a5->n128_u64[1];
  if (result.n128_f64[0] < a4->n128_f64[1])
  {
    result = *a4;
    *a4 = *a5;
    *a5 = result;
    result.n128_u64[0] = a4->n128_u64[1];
    if (result.n128_f64[0] < a3->n128_f64[1])
    {
      result = *a3;
      *a3 = *a4;
      *a4 = result;
      result.n128_u64[0] = a3->n128_u64[1];
      if (result.n128_f64[0] < a2->n128_f64[1])
      {
        result = *a2;
        *a2 = *a3;
        *a3 = result;
        result.n128_u64[0] = a2->n128_u64[1];
        if (result.n128_f64[0] < a1[1])
        {
          result = *(__n128 *)a1;
          *(__n128 *)a1 = *a2;
          *a2 = result;
        }
      }
    }
  }
  return result;
}

double *sub_1005EB4C4(double *a1, double *a2, double *a3, uint64_t a4)
{
  double *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  double *v12;
  double *v13;
  double *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  double *v18;
  double *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v24;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[2 * v10];
      do
      {
        sub_1005EB674((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        if (v14[1] < a1[1])
        {
          v15 = *(_OWORD *)v14;
          *(_OWORD *)v14 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          sub_1005EB674((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 17)
    {
      v16 = (unint64_t)v8 >> 4;
      do
      {
        v17 = 0;
        v24 = *(_OWORD *)a1;
        v18 = a1;
        do
        {
          v19 = v18;
          v18 += 2 * v17 + 2;
          v20 = 2 * v17;
          v17 = (2 * v17) | 1;
          v21 = v20 + 2;
          if (v21 < v16 && v18[1] < v18[3])
          {
            v18 += 2;
            v17 = v21;
          }
          *(_OWORD *)v19 = *(_OWORD *)v18;
        }
        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        v6 -= 2;
        if (v18 == v6)
        {
          *(_OWORD *)v18 = v24;
        }
        else
        {
          *(_OWORD *)v18 = *(_OWORD *)v6;
          *(_OWORD *)v6 = v24;
          sub_1005EB738((uint64_t)a1, (uint64_t)(v18 + 2), a4, ((char *)(v18 + 2) - (char *)a1) >> 4);
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_1005EB674(uint64_t result, uint64_t a2, uint64_t a3, double *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  uint64_t v9;
  double v10;
  double v11;
  double *v12;
  uint64_t v13;
  uint64_t v14;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      v6 = v4 >> 3;
      v7 = (v4 >> 3) + 1;
      v8 = (double *)(result + 16 * v7);
      v9 = v6 + 2;
      if (v9 < a3 && v8[1] < v8[3])
      {
        v8 += 2;
        v7 = v9;
      }
      v10 = a4[1];
      if (v8[1] >= v10)
      {
        v11 = *a4;
        do
        {
          v12 = a4;
          a4 = v8;
          *(_OWORD *)v12 = *(_OWORD *)v8;
          if (v5 < v7)
            break;
          v13 = 2 * v7;
          v7 = (2 * v7) | 1;
          v8 = (double *)(result + 16 * v7);
          v14 = v13 + 2;
          if (v14 < a3 && v8[1] < v8[3])
          {
            v8 += 2;
            v7 = v14;
          }
        }
        while (v8[1] >= v10);
        *a4 = v11;
        a4[1] = v10;
      }
    }
  }
  return result;
}

uint64_t sub_1005EB738(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;

  if (a4 >= 2)
  {
    v4 = (unint64_t)(a4 - 2) >> 1;
    v5 = *(double *)(a2 - 8);
    if (*(double *)(result + 16 * v4 + 8) < v5)
    {
      v8 = *(_QWORD *)(a2 - 16);
      v6 = a2 - 16;
      v7 = v8;
      do
      {
        v9 = (_OWORD *)v6;
        v6 = result + 16 * v4;
        *v9 = *(_OWORD *)v6;
        if (!v4)
          break;
        v4 = (v4 - 1) >> 1;
      }
      while (*(double *)(result + 16 * v4 + 8) < v5);
      *(_QWORD *)v6 = v7;
      *(double *)(v6 + 8) = v5;
    }
  }
  return result;
}

uint64_t sub_1005EB794(uint64_t a1, uint64_t a2)
{
  CFAbsoluteTime Current;

  *(_QWORD *)a1 = off_102147F18;
  *(_QWORD *)(a1 + 8) = a2;
  Current = CFAbsoluteTimeGetCurrent();
  *(CFAbsoluteTime *)(a1 + 16) = Current;
  *(CFAbsoluteTime *)(a1 + 24) = Current;
  *(_DWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  return a1;
}

uint64_t sub_1005EB7E0(uint64_t a1)
{
  CFAbsoluteTime Current;

  *(_QWORD *)a1 = off_102147F18;
  *(_QWORD *)(a1 + 8) = 14400;
  Current = CFAbsoluteTimeGetCurrent();
  *(CFAbsoluteTime *)(a1 + 16) = Current;
  *(CFAbsoluteTime *)(a1 + 24) = Current;
  *(_DWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  return a1;
}

void sub_1005EB830()
{
  operator delete();
}

double sub_1005EBAD4(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  double result;

  v2 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  *(_QWORD *)(a1 + 120) = 0;
  *(_WORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_BYTE *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 179) = 0;
  *(_QWORD *)(a1 + 172) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = a1 + 216;
  *(_QWORD *)(a1 + 224) = a1 + 216;
  *(_QWORD *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 244) = 0;
  *(_OWORD *)(a1 + 248) = xmmword_101BB7910;
  *(_OWORD *)(a1 + 264) = unk_101BB7920;
  *(_OWORD *)(a1 + 280) = xmmword_101BB7930;
  *(_OWORD *)(a1 + 292) = *(__int128 *)((char *)&xmmword_101BB7930 + 12);
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  return result;
}

void sub_1005EBB84(uint64_t a1)
{
  char *v2;
  int64x2_t v3;
  int64x2_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v2 = *(char **)a1;
  v3 = *(int64x2_t *)(a1 + 8);
  v4 = vshrq_n_s64(vsubq_s64(v3, vdupq_n_s64((unint64_t)v2)), 3uLL);
  v5 = 0x6DB6DB6DB6DB6DB7 * v4.i64[0];
  v6 = v5;
  if (0x6DB6DB6DB6DB6DB7 * v4.i64[1] > v5)
  {
    if ((char *)v3.i64[0] == v2)
    {
      v11 = 0;
      v9 = 56 * v5;
    }
    else
    {
      v7 = (char *)sub_10025B800(a1 + 16, v5);
      v2 = *(char **)a1;
      v8 = *(char **)(a1 + 8);
      v9 = (uint64_t)&v7[56 * v6];
      v11 = &v7[56 * v10];
      if (v8 != *(char **)a1)
      {
        v12 = v9;
        do
        {
          v13 = *(_OWORD *)(v8 - 56);
          v14 = *(_OWORD *)(v8 - 40);
          v15 = *(_OWORD *)(v8 - 24);
          *(_DWORD *)(v12 - 8) = *((_DWORD *)v8 - 2);
          *(_OWORD *)(v12 - 24) = v15;
          *(_OWORD *)(v12 - 40) = v14;
          *(_OWORD *)(v12 - 56) = v13;
          v12 -= 56;
          v8 -= 56;
        }
        while (v8 != v2);
        v2 = *(char **)a1;
        goto LABEL_9;
      }
    }
    v12 = v9;
LABEL_9:
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v11;
    if (v2)
      operator delete(v2);
  }
}

void sub_1005EBC90(uint64_t a1, CLMotionActivity *a2)
{
  uint64_t v2;
  NSObject *v4;
  uint64_t v5;
  int type;
  unsigned int confidence;
  uint64_t v8;
  unsigned int source;
  unsigned int mountedState;
  int isMounted;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  const char *v22;
  uint8_t *v23;
  NSObject *v25;
  const char *v26;
  uint8_t *v27;
  int v28;
  uint64_t v29;
  __int16 v30;
  int v31;
  __int16 v32;
  unsigned int v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  unsigned int v37;
  __int16 v38;
  unsigned int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  uint64_t v43;
  uint8_t buf[4];
  uint64_t v45;
  __int16 v46;
  int v47;
  __int16 v48;
  unsigned int v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  unsigned int v53;
  __int16 v54;
  unsigned int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  uint64_t v59;

  v2 = *(_QWORD *)(a1 + 200);
  if (*(_QWORD *)(a1 + 192) != v2)
  {
    if (*(double *)&a2[1].type - *(double *)(v2 - 56) >= 840.0)
    {
      if (qword_10229FEA0 != -1)
        dispatch_once(&qword_10229FEA0, &stru_102147F68);
      v25 = qword_10229FEA8;
      if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "Walking bout ended due to exceeding max duration without stepNotifications", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FEA0 != -1)
          dispatch_once(&qword_10229FEA0, &stru_102147F68);
        LOWORD(v28) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEA8, 1, "Walking bout ended due to exceeding max duration without stepNotifications", &v28, 2);
        v27 = (uint8_t *)v26;
        sub_100512490("Generic", 1, 0, 2, "void CLPredictedWalkDistanceBoutDetector::handleMotionActivityNotification(const CLMotionActivity &)", "%s\n", v26);
        if (v27 != buf)
          free(v27);
      }
      sub_1005EC088(a1);
    }
    else
    {
      if (qword_10229FEA0 != -1)
        dispatch_once(&qword_10229FEA0, &stru_102147F68);
      v4 = qword_10229FEA8;
      if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_DEBUG))
      {
        v5 = CLMotionActivity::activityTypeToString(a2->type);
        type = a2->type;
        confidence = a2->confidence;
        v8 = CLMotionActivity::activityTypeToString(a2[1].source);
        source = a2[1].source;
        mountedState = a2[1].mountedState;
        isMounted = CLMotionActivity::isMounted(a2);
        v12 = *(_QWORD *)&a2[1].type;
        *(_DWORD *)buf = 136382467;
        v45 = v5;
        v46 = 1025;
        v47 = type;
        v48 = 1025;
        v49 = confidence;
        v50 = 2081;
        v51 = v8;
        v52 = 1025;
        v53 = source;
        v54 = 1025;
        v55 = mountedState;
        v56 = 1025;
        v57 = isMounted;
        v58 = 2048;
        v59 = v12;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Activity type is %{private}s (%{private}d), conf, %{private}d, raw activity type %{private}s (%{private}d), raw conf, %{private}d, mounted, %{private}d, startTime, %f", buf, 0x3Eu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FEA0 != -1)
          dispatch_once(&qword_10229FEA0, &stru_102147F68);
        v13 = qword_10229FEA8;
        v14 = CLMotionActivity::activityTypeToString(a2->type);
        v15 = a2->type;
        v16 = a2->confidence;
        v17 = CLMotionActivity::activityTypeToString(a2[1].source);
        v18 = a2[1].source;
        v19 = a2[1].mountedState;
        v20 = CLMotionActivity::isMounted(a2);
        v21 = *(_QWORD *)&a2[1].type;
        v28 = 136382467;
        v29 = v14;
        v30 = 1025;
        v31 = v15;
        v32 = 1025;
        v33 = v16;
        v34 = 2081;
        v35 = v17;
        v36 = 1025;
        v37 = v18;
        v38 = 1025;
        v39 = v19;
        v40 = 1025;
        v41 = v20;
        v42 = 2048;
        v43 = v21;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v13, 2, "Activity type is %{private}s (%{private}d), conf, %{private}d, raw activity type %{private}s (%{private}d), raw conf, %{private}d, mounted, %{private}d, startTime, %f", &v28, 62);
        v23 = (uint8_t *)v22;
        sub_100512490("Generic", 1, 0, 2, "void CLPredictedWalkDistanceBoutDetector::handleMotionActivityNotification(const CLMotionActivity &)", "%s\n", v22);
        if (v23 != buf)
          free(v23);
      }
    }
  }
}

void sub_1005EC088(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  double *v7;
  double v8;
  double *v9;
  double *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  double *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  void *v23;
  double v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  double *v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  __int128 *v36;
  uint64_t v37;
  _QWORD *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  char *v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  _BYTE __p[24];
  uint64_t v65;
  __int16 v66;
  uint64_t v67;

  v3 = *(_QWORD *)(a1 + 192);
  v4 = *(_QWORD *)(a1 + 200);
  v2 = (uint64_t *)(a1 + 192);
  if (v3 != v4)
  {
    v53 = &v53;
    v54 = &v53;
    v55 = 0;
    v5 = operator new(8uLL);
    v6 = 0x6DB6DB6DB6DB6DB7 * ((v4 - v3) >> 3);
    *v5 = 0;
    v7 = (double *)(v5 + 1);
    *(_QWORD *)&__p[8] = v5 + 1;
    *(_QWORD *)&__p[16] = v5 + 1;
    *(_QWORD *)__p = v5;
    v8 = 0.0;
    do
    {
      v8 = v8 + (double)*(int *)(v3 + 24);
      if ((unint64_t)v7 >= *(_QWORD *)&__p[16])
      {
        v10 = *(double **)__p;
        v11 = ((uint64_t)v7 - *(_QWORD *)__p) >> 3;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 61)
          sub_100259694();
        v13 = *(_QWORD *)&__p[16] - *(_QWORD *)__p;
        if ((uint64_t)(*(_QWORD *)&__p[16] - *(_QWORD *)__p) >> 2 > v12)
          v12 = v13 >> 2;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        if (v14)
        {
          v15 = (char *)sub_10025E6A0((uint64_t)&__p[16], v14);
          v10 = *(double **)__p;
          v7 = *(double **)&__p[8];
        }
        else
        {
          v15 = 0;
        }
        v16 = (double *)&v15[8 * v11];
        *v16 = v8;
        v9 = v16 + 1;
        while (v7 != v10)
        {
          v17 = *((_QWORD *)v7-- - 1);
          *((_QWORD *)v16-- - 1) = v17;
        }
        *(_QWORD *)__p = v16;
        *(_QWORD *)&__p[8] = v9;
        *(_QWORD *)&__p[16] = &v15[8 * v14];
        if (v10)
          operator delete(v10);
      }
      else
      {
        *v7 = v8;
        v9 = v7 + 1;
      }
      *(_QWORD *)&__p[8] = v9;
      v3 += 56;
      v7 = v9;
    }
    while (v3 != v4);
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = *v2;
    v23 = *(void **)__p;
    v24 = 0.0;
    do
    {
      v25 = v20;
      v26 = (int)v20;
      if ((int)(v20 + 1) > (int)v6)
        v27 = v20 + 1;
      else
        v27 = v6;
      v20 = v27 - 1;
      v28 = (double *)(*v2 + 72 + 56 * (int)v25);
      v29 = v26 + 1;
      while (1)
      {
        v30 = v29;
        if (v29 >= (int)v6)
          break;
        v31 = *v28;
        v28 += 7;
        ++v25;
        ++v29;
        if (v31 - *(double *)(v22 + 56 * v18 + 8) > 360.0)
        {
          v20 = v25 - 1;
          goto LABEL_29;
        }
      }
      v25 = v27;
LABEL_29:
      v32 = *(double *)(*(_QWORD *)__p + 8 * v18);
      if (*(double *)(*(_QWORD *)__p + 8 * (int)v25) - v32 > v24)
      {
        v19 = v20;
        v24 = *(double *)(*(_QWORD *)__p + 8 * (int)v25) - v32;
        v21 = v18;
      }
      if (v30 >= (int)v6)
        break;
      ++v18;
    }
    while (v18 < (int)v6);
    if (v21 > v19)
      goto LABEL_37;
    v33 = (int)v19;
    v34 = (int)v21;
    v35 = v53;
    v36 = (__int128 *)(v22 + 56 * (int)v21);
    v37 = v55 + 1;
    do
    {
      v38 = operator new(0x48uLL);
      v39 = *v36;
      v40 = v36[1];
      v41 = v36[2];
      v38[8] = *((_QWORD *)v36 + 6);
      *((_OWORD *)v38 + 2) = v40;
      *((_OWORD *)v38 + 3) = v41;
      *((_OWORD *)v38 + 1) = v39;
      *v38 = v35;
      v38[1] = &v53;
      v35[1] = v38;
      ++v34;
      v36 = (__int128 *)((char *)v36 + 56);
      v53 = v38;
      v55 = v37++;
      v35 = v38;
    }
    while (v34 <= v33);
    if (v23)
    {
LABEL_37:
      *(_QWORD *)&__p[8] = v23;
      operator delete(v23);
    }
    if (qword_10229FEA0 != -1)
      dispatch_once(&qword_10229FEA0, &stru_102147F68);
    v42 = qword_10229FEA8;
    if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_DEBUG))
    {
      v43 = *(_QWORD *)(*(_QWORD *)(a1 + 192) + 8);
      v44 = *(_QWORD *)(*(_QWORD *)(a1 + 200) - 40);
      v45 = v54[3];
      v46 = v53[4];
      *(_DWORD *)__p = 134284289;
      *(_QWORD *)&__p[4] = v43;
      *(_WORD *)&__p[12] = 2049;
      *(_QWORD *)&__p[14] = v44;
      *(_WORD *)&__p[22] = 2049;
      v65 = v45;
      v66 = 2049;
      v67 = v46;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "Timestamp comparisons... firstStepCountTime:%{private}f, lastStepCountTime:%{private}f, trimmedBoutStartTime:%{private}f, trimmedBoutEndTime:%{private}f", __p, 0x2Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_10229FEA0 != -1)
        dispatch_once(&qword_10229FEA0, &stru_102147F68);
      v47 = *(_QWORD *)(*(_QWORD *)(a1 + 192) + 8);
      v48 = *(_QWORD *)(*(_QWORD *)(a1 + 200) - 40);
      v49 = v54[3];
      v50 = v53[4];
      v56 = 134284289;
      v57 = v47;
      v58 = 2049;
      v59 = v48;
      v60 = 2049;
      v61 = v49;
      v62 = 2049;
      v63 = v50;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_10229FEA8, 2, "Timestamp comparisons... firstStepCountTime:%{private}f, lastStepCountTime:%{private}f, trimmedBoutStartTime:%{private}f, trimmedBoutEndTime:%{private}f", &v56, 42);
      v52 = (char *)v51;
      sub_100512490("Generic", 1, 0, 2, "void CLPredictedWalkDistanceBoutDetector::stopBout()", "%s\n", v51);
      if (v52 != __p)
        free(v52);
    }
    sub_1005EDCD8(a1, &v53, 0);
    sub_1000F34E0(&v53);
    v3 = *v2;
  }
  *(_QWORD *)(a1 + 200) = v3;
  sub_1005EBB84((uint64_t)v2);
}

void sub_1005EC53C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  sub_1000F34E0(&a12);
  _Unwind_Resume(a1);
}

__n128 sub_1005EC578(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  __n128 result;
  const char *v13;
  uint8_t *v14;
  int v15;
  int v16;
  NSObject *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  char **v21;
  NSObject *v22;
  double v23;
  NSObject *v24;
  double v25;
  NSObject *v26;
  const char *v27;
  uint8_t *v28;
  double v29;
  NSObject *v30;
  double v31;
  double v32;
  const char *v33;
  uint8_t *v34;
  NSObject *v35;
  NSObject *v36;
  uint64_t v37;
  NSObject *v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  NSObject *v42;
  const char *v43;
  NSObject *v44;
  double v45;
  double v46;
  const char *v47;
  NSObject *v48;
  const char *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  const char *v75;
  uint8_t *v76;
  const char *v77;
  uint8_t *v78;
  const char *v79;
  uint8_t *v80;
  double v81;
  const char *v82;
  uint8_t *v83;
  const char *v84;
  const char *v85;
  uint8_t *v86;
  uint64_t v87;
  const char *v88;
  uint8_t *v89;
  double v90;
  double v91;
  __int16 v92;
  uint64_t v93;
  __int16 v94;
  double v95;
  _BYTE v96[48];
  uint64_t v97;
  uint8_t buf[4];
  _BYTE v99[14];
  __int16 v100;
  double v101;
  __int16 v102;
  uint64_t v103;
  __int16 v104;
  uint64_t v105;
  __int16 v106;
  int v107;

  if (qword_10229FEA0 != -1)
    dispatch_once(&qword_10229FEA0, &stru_102147F68);
  v4 = qword_10229FEA8;
  if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_DWORD *)(a2 + 24);
    v6 = *(double *)(a2 + 88);
    v7 = *(_QWORD *)(a2 + 32);
    v8 = *(_QWORD *)(a2 + 8);
    v9 = *(_QWORD *)(a2 + 16);
    v10 = *(unsigned __int8 *)(a2 + 166);
    *(_DWORD *)buf = 134284801;
    *(_QWORD *)v99 = v8;
    *(_WORD *)&v99[8] = 1025;
    *(_DWORD *)&v99[10] = v5;
    v100 = 2049;
    v101 = v6;
    v102 = 2049;
    v103 = v7;
    v104 = 2049;
    v105 = v9;
    v106 = 1025;
    v107 = v10;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Received stepCountEntry, startTime, %{private}f, count, %{private}d, activeTime, %{private}f, distance, %{private}f, firstStepTime, %{private}f, distanceSource, %{private}d", buf, 0x36u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEA0 != -1)
      dispatch_once(&qword_10229FEA0, &stru_102147F68);
    v69 = *(_DWORD *)(a2 + 24);
    v70 = *(_QWORD *)(a2 + 88);
    v71 = *(_QWORD *)(a2 + 32);
    v72 = *(_QWORD *)(a2 + 8);
    v73 = *(_QWORD *)(a2 + 16);
    v74 = *(unsigned __int8 *)(a2 + 166);
    *(_DWORD *)v96 = 134284801;
    *(_QWORD *)&v96[4] = v72;
    *(_WORD *)&v96[12] = 1025;
    *(_DWORD *)&v96[14] = v69;
    *(_WORD *)&v96[18] = 2049;
    *(_QWORD *)&v96[20] = v70;
    *(_WORD *)&v96[28] = 2049;
    *(_QWORD *)&v96[30] = v71;
    *(_WORD *)&v96[38] = 2049;
    *(_QWORD *)&v96[40] = v73;
    LOWORD(v97) = 1025;
    *(_DWORD *)((char *)&v97 + 2) = v74;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEA8, 2, "Received stepCountEntry, startTime, %{private}f, count, %{private}d, activeTime, %{private}f, distance, %{private}f, firstStepTime, %{private}f, distanceSource, %{private}d", v96, 54);
    v76 = (uint8_t *)v75;
    sub_100512490("Generic", 1, 0, 2, "void CLPredictedWalkDistanceBoutDetector::handleStepCountNotification(const CLStepCountEntry &)", "%s\n", v75);
    if (v76 != buf)
      free(v76);
  }
  if (!*(_DWORD *)(a1 + 288))
  {
    v15 = *(_DWORD *)(a2 + 24);
    v16 = *(_DWORD *)(a1 + 40);
    if (*(double *)(a2 + 8) < *(double *)(a1 + 24))
    {
      if (qword_10229FEA0 != -1)
        dispatch_once(&qword_10229FEA0, &stru_102147F68);
      v17 = qword_10229FEA8;
      if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Saw time go backwards", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FEA0 != -1)
          dispatch_once(&qword_10229FEA0, &stru_102147F68);
        *(_WORD *)v96 = 0;
        LODWORD(v90) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEA8, 1, "Saw time go backwards", v96, *(_QWORD *)&v90);
        v78 = (uint8_t *)v77;
        sub_100512490("Generic", 1, 0, 2, "void CLPredictedWalkDistanceBoutDetector::handleStepCountNotification(const CLStepCountEntry &)", "%s\n", v77);
        if (v78 != buf)
          free(v78);
      }
    }
    v18 = v15 - v16;
    if (v15 - v16 < 0)
    {
      if (qword_10229FEA0 != -1)
        dispatch_once(&qword_10229FEA0, &stru_102147F68);
      v24 = qword_10229FEA8;
      if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Saw step count go backwards", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FEA0 != -1)
          dispatch_once(&qword_10229FEA0, &stru_102147F68);
        *(_WORD *)v96 = 0;
        LODWORD(v90) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEA8, 0, "Saw step count go backwards", v96, *(_QWORD *)&v90);
        v80 = (uint8_t *)v79;
        sub_100512490("Generic", 1, 0, 2, "void CLPredictedWalkDistanceBoutDetector::handleStepCountNotification(const CLStepCountEntry &)", "%s\n", v79);
        if (v80 != buf)
          free(v80);
      }
      if (*(_QWORD *)(a1 + 192) == *(_QWORD *)(a1 + 200))
        goto LABEL_122;
      goto LABEL_37;
    }
    v19 = *(_QWORD *)(a1 + 192);
    v20 = *(_QWORD *)(a1 + 200);
    v21 = (char **)(a1 + 192);
    if (v18 >= 0x29)
    {
      if (v19 != v20)
      {
        if (qword_10229FEA0 != -1)
          dispatch_once(&qword_10229FEA0, &stru_102147F68);
        v22 = qword_10229FEA8;
        if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_DEFAULT))
        {
          v23 = *(double *)(a2 + 8) - *(double *)(a1 + 24);
          *(_DWORD *)buf = 67240448;
          *(_DWORD *)v99 = v15 - v16;
          *(_WORD *)&v99[4] = 2050;
          *(double *)&v99[6] = v23;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Unexpected large jump in steps, %{public}d new steps, %{public}.1f seconds delay since last entry, stopping bout", buf, 0x12u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FEA0 != -1)
            dispatch_once(&qword_10229FEA0, &stru_102147F68);
          v81 = *(double *)(a2 + 8) - *(double *)(a1 + 24);
          *(_DWORD *)v96 = 67240448;
          *(_DWORD *)&v96[4] = v15 - v16;
          *(_WORD *)&v96[8] = 2050;
          *(double *)&v96[10] = v81;
          LODWORD(v90) = 18;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEA8, 0, "Unexpected large jump in steps, %{public}d new steps, %{public}.1f seconds delay since last entry, stopping bout", v96, *(_QWORD *)&v90);
          v83 = (uint8_t *)v82;
          sub_100512490("Generic", 1, 0, 2, "void CLPredictedWalkDistanceBoutDetector::handleStepCountNotification(const CLStepCountEntry &)", "%s\n", v82);
          if (v83 != buf)
            free(v83);
        }
LABEL_37:
        sub_1005EC088(a1);
LABEL_122:
        v62 = *(_OWORD *)a2;
        v63 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 48) = v63;
        *(_OWORD *)(a1 + 16) = v62;
        v64 = *(_OWORD *)(a2 + 48);
        v65 = *(_OWORD *)(a2 + 64);
        v66 = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a1 + 112) = v66;
        *(_OWORD *)(a1 + 64) = v64;
        *(_OWORD *)(a1 + 80) = v65;
        result = *(__n128 *)(a2 + 112);
        v67 = *(_OWORD *)(a2 + 128);
        v68 = *(_OWORD *)(a2 + 160);
        *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 144);
        *(_OWORD *)(a1 + 176) = v68;
        *(__n128 *)(a1 + 128) = result;
        *(_OWORD *)(a1 + 144) = v67;
        return result;
      }
      v29 = *(double *)(a1 + 24);
      if (*(double *)(a2 + 8) - v29 <= 3.84)
      {
        if (qword_10229FEA0 != -1)
          dispatch_once(&qword_10229FEA0, &stru_102147F68);
        v44 = qword_10229FEA8;
        if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_DEFAULT))
        {
          v45 = *(double *)(a2 + 8) - *(double *)(a1 + 24);
          *(_DWORD *)buf = 67240448;
          *(_DWORD *)v99 = v15 - v16;
          *(_WORD *)&v99[4] = 2050;
          *(double *)&v99[6] = v45;
          _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "Unexpected large jump in steps, %{public}d new steps, %{public}.1f seconds delay since last entry", buf, 0x12u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_122;
        bzero(buf, 0x65CuLL);
        if (qword_10229FEA0 != -1)
          dispatch_once(&qword_10229FEA0, &stru_102147F68);
        v46 = *(double *)(a2 + 8) - *(double *)(a1 + 24);
        *(_DWORD *)v96 = 67240448;
        *(_DWORD *)&v96[4] = v15 - v16;
        *(_WORD *)&v96[8] = 2050;
        *(double *)&v96[10] = v46;
        LODWORD(v90) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEA8, 0, "Unexpected large jump in steps, %{public}d new steps, %{public}.1f seconds delay since last entry", v96, *(_QWORD *)&v90);
        v34 = (uint8_t *)v47;
        sub_100512490("Generic", 1, 0, 2, "void CLPredictedWalkDistanceBoutDetector::handleStepCountNotification(const CLStepCountEntry &)", "%s\n", v47);
      }
      else
      {
        if (v29 <= 0.0)
          goto LABEL_122;
        if (qword_10229FEA0 != -1)
          dispatch_once(&qword_10229FEA0, &stru_102147F68);
        v30 = qword_10229FEA8;
        if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_INFO))
        {
          v31 = *(double *)(a2 + 8) - *(double *)(a1 + 24);
          *(_DWORD *)buf = 67240448;
          *(_DWORD *)v99 = v15 - v16;
          *(_WORD *)&v99[4] = 2050;
          *(double *)&v99[6] = v31;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "Possibly missing step count entries, %{public}d new steps, %{public}.1f seconds delay since last entry", buf, 0x12u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_122;
        bzero(buf, 0x65CuLL);
        if (qword_10229FEA0 != -1)
          dispatch_once(&qword_10229FEA0, &stru_102147F68);
        v32 = *(double *)(a2 + 8) - *(double *)(a1 + 24);
        *(_DWORD *)v96 = 67240448;
        *(_DWORD *)&v96[4] = v15 - v16;
        *(_WORD *)&v96[8] = 2050;
        *(double *)&v96[10] = v32;
        LODWORD(v90) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEA8, 1, "Possibly missing step count entries, %{public}d new steps, %{public}.1f seconds delay since last entry", v96, *(_QWORD *)&v90);
        v34 = (uint8_t *)v33;
        sub_100512490("Generic", 1, 0, 2, "void CLPredictedWalkDistanceBoutDetector::handleStepCountNotification(const CLStepCountEntry &)", "%s\n", v33);
      }
LABEL_105:
      if (v34 != buf)
        free(v34);
      goto LABEL_122;
    }
    if (v19 != v20)
    {
      v25 = *(double *)(a2 + 8);
      if (v25 - *(double *)(v20 - 56) > 240.0)
      {
        if (qword_10229FEA0 != -1)
          dispatch_once(&qword_10229FEA0, &stru_102147F68);
        v26 = qword_10229FEA8;
        if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "Walking bout ended due to exceeding max duration without steps", buf, 2u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_64;
        bzero(buf, 0x65CuLL);
        if (qword_10229FEA0 != -1)
          dispatch_once(&qword_10229FEA0, &stru_102147F68);
        *(_WORD *)v96 = 0;
        LODWORD(v90) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEA8, 1, "Walking bout ended due to exceeding max duration without steps", v96, *(_QWORD *)&v90);
        v28 = (uint8_t *)v27;
        sub_100512490("Generic", 1, 0, 2, "void CLPredictedWalkDistanceBoutDetector::handleStepCountNotification(const CLStepCountEntry &)", "%s\n", v27);
LABEL_143:
        if (v28 != buf)
          free(v28);
LABEL_64:
        sub_1005EC088(a1);
        goto LABEL_65;
      }
      if (v25 - *(double *)(v19 + 8) > 36000.0)
      {
        if (qword_10229FEA0 != -1)
          dispatch_once(&qword_10229FEA0, &stru_102147F68);
        v35 = qword_10229FEA8;
        if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "Walking bout has ended due to exceeding the max duration", buf, 2u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_64;
        bzero(buf, 0x65CuLL);
        if (qword_10229FEA0 != -1)
          dispatch_once(&qword_10229FEA0, &stru_102147F68);
        *(_WORD *)v96 = 0;
        LODWORD(v90) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEA8, 1, "Walking bout has ended due to exceeding the max duration", v96, *(_QWORD *)&v90);
        v28 = (uint8_t *)v84;
        sub_100512490("Generic", 1, 0, 2, "void CLPredictedWalkDistanceBoutDetector::handleStepCountNotification(const CLStepCountEntry &)", "%s\n", v84);
        goto LABEL_143;
      }
    }
LABEL_65:
    if (v15 == v16)
      goto LABEL_122;
    if (*(double *)(a2 + 16) <= 0.0)
    {
      if (qword_10229FEA0 != -1)
        dispatch_once(&qword_10229FEA0, &stru_102147F68);
      v42 = qword_10229FEA8;
      if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "StepCountEntry with steps but no firstStepTime", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_122;
      bzero(buf, 0x65CuLL);
      if (qword_10229FEA0 != -1)
        dispatch_once(&qword_10229FEA0, &stru_102147F68);
      *(_WORD *)v96 = 0;
      LODWORD(v90) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEA8, 0, "StepCountEntry with steps but no firstStepTime", v96, *(_QWORD *)&v90);
      v34 = (uint8_t *)v43;
      sub_100512490("Generic", 1, 0, 2, "void CLPredictedWalkDistanceBoutDetector::handleStepCountNotification(const CLStepCountEntry &)", "%s\n", v43);
    }
    else
    {
      if (*(double *)(a2 + 88) > *(double *)(a1 + 104))
      {
        if (*(_QWORD *)(a1 + 192) == *(_QWORD *)(a1 + 200))
        {
          if (qword_10229FEA0 != -1)
            dispatch_once(&qword_10229FEA0, &stru_102147F68);
          v36 = qword_10229FEA8;
          if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_INFO))
          {
            v37 = *(_QWORD *)(a2 + 16);
            *(_DWORD *)buf = 134349056;
            *(_QWORD *)v99 = v37;
            _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "Potential walking bout identified... fBoutStartTime: %{public}f", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FEA0 != -1)
              dispatch_once(&qword_10229FEA0, &stru_102147F68);
            v87 = *(_QWORD *)(a2 + 16);
            *(_DWORD *)v96 = 134349056;
            *(_QWORD *)&v96[4] = v87;
            LODWORD(v90) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEA8, 1, "Potential walking bout identified... fBoutStartTime: %{public}f", v96, *(_QWORD *)&v90);
            v89 = (uint8_t *)v88;
            sub_100512490("Generic", 1, 0, 2, "void CLPredictedWalkDistanceBoutDetector::handleStepCountNotification(const CLStepCountEntry &)", "%s\n", v88);
            if (v89 != buf)
              free(v89);
          }
        }
        sub_1005ED960((double *)a1, a2, v18, (uint64_t)v96);
        if (qword_10229FEA0 != -1)
          dispatch_once(&qword_10229FEA0, &stru_102147F68);
        v38 = qword_10229FEA8;
        if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67109632;
          *(_DWORD *)v99 = *(_DWORD *)&v96[24];
          *(_WORD *)&v99[4] = 2048;
          *(_QWORD *)&v99[6] = *(_QWORD *)&v96[32];
          v100 = 2048;
          v101 = *(double *)&v96[16] - *(double *)&v96[8];
          _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "Extending bout...,deltaSteps,%d,dist,%.3f,activeTime,%.3f", buf, 0x1Cu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FEA0 != -1)
            dispatch_once(&qword_10229FEA0, &stru_102147F68);
          LODWORD(v91) = 67109632;
          HIDWORD(v91) = *(_DWORD *)&v96[24];
          v92 = 2048;
          v93 = *(_QWORD *)&v96[32];
          v94 = 2048;
          v95 = *(double *)&v96[16] - *(double *)&v96[8];
          LODWORD(v90) = 28;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEA8, 2, "Extending bout...,deltaSteps,%d,dist,%.3f,activeTime,%.3f", &v91, v90, v91);
          v86 = (uint8_t *)v85;
          sub_100512490("Generic", 1, 0, 2, "void CLPredictedWalkDistanceBoutDetector::handleStepCountNotification(const CLStepCountEntry &)", "%s\n", v85);
          if (v86 != buf)
            free(v86);
        }
        v39 = *(_QWORD *)(a1 + 208);
        v40 = *(_QWORD *)(a1 + 200);
        if (v40 >= v39)
        {
          v50 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v40 - (_QWORD)*v21) >> 3);
          v51 = v50 + 1;
          if ((unint64_t)(v50 + 1) > 0x492492492492492)
            sub_100259694();
          v52 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v39 - (_QWORD)*v21) >> 3);
          if (2 * v52 > v51)
            v51 = 2 * v52;
          if (v52 >= 0x249249249249249)
            v53 = 0x492492492492492;
          else
            v53 = v51;
          if (v53)
            v54 = (char *)sub_10025B800(a1 + 208, v53);
          else
            v54 = 0;
          v55 = &v54[56 * v50];
          v56 = &v54[56 * v53];
          *(_OWORD *)v55 = *(_OWORD *)v96;
          *((_OWORD *)v55 + 1) = *(_OWORD *)&v96[16];
          *((_OWORD *)v55 + 2) = *(_OWORD *)&v96[32];
          *((_QWORD *)v55 + 6) = v97;
          v41 = v55 + 56;
          v58 = *(char **)(a1 + 192);
          v57 = *(char **)(a1 + 200);
          if (v57 != v58)
          {
            do
            {
              v59 = *(_OWORD *)(v57 - 56);
              v60 = *(_OWORD *)(v57 - 40);
              v61 = *(_OWORD *)(v57 - 24);
              *((_DWORD *)v55 - 2) = *((_DWORD *)v57 - 2);
              *(_OWORD *)(v55 - 24) = v61;
              *(_OWORD *)(v55 - 40) = v60;
              *(_OWORD *)(v55 - 56) = v59;
              v55 -= 56;
              v57 -= 56;
            }
            while (v57 != v58);
            v57 = *v21;
          }
          *(_QWORD *)(a1 + 192) = v55;
          *(_QWORD *)(a1 + 200) = v41;
          *(_QWORD *)(a1 + 208) = v56;
          if (v57)
            operator delete(v57);
        }
        else
        {
          *(_OWORD *)v40 = *(_OWORD *)v96;
          *(_OWORD *)(v40 + 16) = *(_OWORD *)&v96[16];
          *(_OWORD *)(v40 + 32) = *(_OWORD *)&v96[32];
          *(_QWORD *)(v40 + 48) = v97;
          v41 = (char *)(v40 + 56);
        }
        *(_QWORD *)(a1 + 200) = v41;
        sub_1005EDB70(a1, (_QWORD *)(a1 + 216), (_DWORD *)(a1 + 240), (double *)v96, 1);
        goto LABEL_122;
      }
      if (qword_10229FEA0 != -1)
        dispatch_once(&qword_10229FEA0, &stru_102147F68);
      v48 = qword_10229FEA8;
      if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_ERROR, "StepCountEntry with steps but activeTime doesn't advance", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_122;
      bzero(buf, 0x65CuLL);
      if (qword_10229FEA0 != -1)
        dispatch_once(&qword_10229FEA0, &stru_102147F68);
      *(_WORD *)v96 = 0;
      LODWORD(v90) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEA8, 16, "StepCountEntry with steps but activeTime doesn't advance", v96, *(_QWORD *)&v90);
      v34 = (uint8_t *)v49;
      sub_100512490("Generic", 1, 0, 0, "void CLPredictedWalkDistanceBoutDetector::handleStepCountNotification(const CLStepCountEntry &)", "%s\n", v49);
    }
    goto LABEL_105;
  }
  if (qword_10229FEA0 != -1)
    dispatch_once(&qword_10229FEA0, &stru_102147F68);
  v11 = qword_10229FEA8;
  if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Ignoring step count while in wheelchair mode", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEA0 != -1)
      dispatch_once(&qword_10229FEA0, &stru_102147F68);
    *(_WORD *)v96 = 0;
    LODWORD(v90) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEA8, 2, "Ignoring step count while in wheelchair mode", v96, *(_QWORD *)&v90);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "void CLPredictedWalkDistanceBoutDetector::handleStepCountNotification(const CLStepCountEntry &)", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  return result;
}

void sub_1005ED960(double *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  double v5;
  double v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  uint64_t v13;
  uint8_t buf[4];
  uint64_t v15;

  v5 = *(double *)(a2 + 8);
  v6 = *(double *)(a2 + 16);
  *(double *)a4 = v5;
  *(double *)(a4 + 8) = v6;
  *(_DWORD *)(a4 + 24) = a3;
  *(double *)(a4 + 32) = *(double *)(a2 + 32) - a1[6];
  *(_BYTE *)(a4 + 40) = *(_BYTE *)(a2 + 166);
  *(_QWORD *)(a4 + 44) = *(_QWORD *)(a2 + 156);
  if (v5 >= a1[3] + 3.84)
  {
    *(double *)(a4 + 16) = v5;
    if (qword_10229FEA0 != -1)
      dispatch_once(&qword_10229FEA0, &stru_102147F68);
    v7 = qword_10229FEA8;
    if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)buf = 134349056;
      v15 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Missing previous epoch before an epoch with steps, starttime, %{public}f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FEA0 != -1)
        dispatch_once(&qword_10229FEA0, &stru_102147F68);
      v9 = *(_QWORD *)(a2 + 8);
      v12 = 134349056;
      v13 = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEA8, 0, "Missing previous epoch before an epoch with steps, starttime, %{public}f", &v12, 12);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "P6MWDStepEntry CLPredictedWalkDistanceBoutDetector::createP6MWDStepEntry(const CLStepCountEntry &, const int)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
  else
  {
    *(double *)(a4 + 16) = v6 + *(double *)(a2 + 88) - a1[13];
  }
}

void sub_1005EDB70(uint64_t a1, _QWORD *a2, _DWORD *a3, double *a4, int a5)
{
  uint64_t v10;
  double v11;
  int v12;
  _QWORD *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t i;
  double *v18;
  double v19;

  v10 = a2[2];
  if (v10 && (v11 = *(double *)(*a2 + 32), vabdd_f64(a4[1], v11) > 0.01))
  {
    if (v11 - *(double *)(a2[1] + 24) >= 30.0)
      sub_1005EDCD8(a1, a2, a5);
    sub_1000F34E0(a2);
    *a3 = 1;
    v10 = a2[2];
  }
  else
  {
    v12 = (*a3)++;
    if (v12 < 0)
      return;
  }
  v13 = operator new(0x48uLL);
  v13[8] = *((_QWORD *)a4 + 6);
  v14 = *((_OWORD *)a4 + 2);
  v15 = *(_OWORD *)a4;
  *((_OWORD *)v13 + 2) = *((_OWORD *)a4 + 1);
  *((_OWORD *)v13 + 3) = v14;
  *((_OWORD *)v13 + 1) = v15;
  v16 = *a2;
  *v13 = *a2;
  v13[1] = a2;
  *(_QWORD *)(v16 + 8) = v13;
  *a2 = v13;
  a2[2] = v10 + 1;
  if (*((double *)v13 + 4) - *(double *)(a2[1] + 24) >= 30.0)
  {
    sub_1005EDCD8(a1, a2, a5);
    for (i = a2[2]; i; i = a2[2])
    {
      v18 = (double *)a2[1];
      if (*(double *)(*a2 + 32) - v18[3] <= 15.0)
        break;
      v19 = *v18;
      *(double *)(*(_QWORD *)&v19 + 8) = v18[1];
      **((double **)v18 + 1) = v19;
      a2[2] = i - 1;
      operator delete(v18);
    }
  }
}

void sub_1005EDCD8(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  double v11;
  double v12;
  double v13;
  int v14;
  double v15;
  int v16;
  int v17;
  NSObject *v18;
  void (*v19)(int *, _QWORD);
  const char *v20;
  uint8_t *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  double v26;
  double v27;
  int32x2_t v28;
  int v29;
  double v30;
  int v31;
  __int128 v32;
  _BYTE v33[28];
  _DWORD v34[2];
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  int v40;
  __int16 v41;
  double v42;
  __int16 v43;
  double v44;
  __int16 v45;
  int v46;
  __int16 v47;
  double v48;
  __int16 v49;
  int v50;
  uint8_t buf[4];
  int v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  int v58;
  __int16 v59;
  double v60;
  __int16 v61;
  double v62;
  __int16 v63;
  int v64;
  __int16 v65;
  double v66;
  __int16 v67;
  int v68;

  v22 = 0;
  v6 = *a2;
  v5 = a2[1];
  v7 = *(_QWORD *)(v5 + 24);
  v8 = *(_QWORD *)(*a2 + 32);
  v23 = v7;
  v24 = v8;
  v28 = vsub_s32(*(int32x2_t *)(v6 + 60), *(int32x2_t *)(v5 + 60));
  v31 = a3;
  v32 = 0u;
  memset(v33, 0, sizeof(v33));
  if ((_QWORD *)v5 == a2)
  {
    v10 = 0;
    v9 = 0;
    v13 = 0.0;
    v12 = 0.0;
    v11 = 0.0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = 0.0;
    v12 = 0.0;
    v13 = 0.0;
    do
    {
      v14 = *(_DWORD *)(v5 + 40);
      v9 += v14;
      v15 = *(double *)(v5 + 48);
      v11 = v15 + v11;
      v12 = v12 + *(double *)(v5 + 32) - *(double *)(v5 + 24);
      v16 = *(unsigned __int8 *)(v5 + 56);
      if (v16 != 1)
        v15 = -0.0;
      v13 = v13 + v15;
      if (v16 != 1)
        v14 = 0;
      v10 += v14;
      v5 = *(_QWORD *)(v5 + 8);
    }
    while ((_QWORD *)v5 != a2);
  }
  v25 = v9;
  v26 = v11;
  v27 = v12;
  v29 = v10;
  v30 = v13;
  v17 = sub_1005EE02C(a1, (uint64_t)&v22);
  if (qword_10229FEA0 != -1)
    dispatch_once(&qword_10229FEA0, &stru_102147F68);
  v18 = qword_10229FEA8;
  if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67242240;
    v52 = a3;
    v53 = 2050;
    v54 = v7;
    v55 = 2050;
    v56 = v8;
    v57 = 1026;
    v58 = v9;
    v59 = 2050;
    v60 = v11;
    v61 = 2050;
    v62 = v12;
    v63 = 1026;
    v64 = v10;
    v65 = 2050;
    v66 = v13;
    v67 = 1026;
    v68 = v17;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "type,%{public}d,boutStart,%{public}f,boutEnd,%{public}f,steps,%{public}d,distance,%{public}f,activeTime,%{public}f,gpsSteps,%{public}d,gpsDistance,%{public}f,report,%{public}d", buf, 0x4Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEA0 != -1)
      dispatch_once(&qword_10229FEA0, &stru_102147F68);
    v34[0] = 67242240;
    v34[1] = a3;
    v35 = 2050;
    v36 = v7;
    v37 = 2050;
    v38 = v8;
    v39 = 1026;
    v40 = v9;
    v41 = 2050;
    v42 = v11;
    v43 = 2050;
    v44 = v12;
    v45 = 1026;
    v46 = v10;
    v47 = 2050;
    v48 = v13;
    v49 = 1026;
    v50 = v17;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEA8, 2, "type,%{public}d,boutStart,%{public}f,boutEnd,%{public}f,steps,%{public}d,distance,%{public}f,activeTime,%{public}f,gpsSteps,%{public}d,gpsDistance,%{public}f,report,%{public}d", v34, 76);
    v21 = (uint8_t *)v20;
    sub_100512490("Generic", 1, 0, 2, "void CLPredictedWalkDistanceBoutDetector::assembleAndReportBout(const std::list<P6MWDStepEntry> &, P6MWDBoutType) const", "%s\n", v20);
    if (v21 != buf)
      free(v21);
  }
  if (v17)
  {
    v19 = *(void (**)(int *, _QWORD))(a1 + 312);
    if (v19)
      v19(&v22, *(_QWORD *)(a1 + 320));
  }
}

uint64_t sub_1005EE02C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  v2 = *(double *)(a2 + 40) >= 60.0 || *(_DWORD *)(a2 + 72) == 1;
  v3 = v2;
  if (!v2)
  {
    if (qword_10229FEA0 != -1)
      dispatch_once(&qword_10229FEA0, &stru_102147F68);
    v4 = qword_10229FEA8;
    if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Discarding bout since it does not meet minimum timeWithSteps requirement", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FEA0 != -1)
        dispatch_once(&qword_10229FEA0, &stru_102147F68);
      v8[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEA8, 1, "Discarding bout since it does not meet minimum timeWithSteps requirement", v8, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLPredictedWalkDistanceBoutDetector::shouldReportBout(const CLPredictedWalkDistanceBoutEntry &) const", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  return v3;
}

void sub_1005EE1DC(uint64_t a1, __int128 *a2)
{
  NSObject *v4;
  const char *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  NSObject *v9;
  const char *v10;
  const char *v11;
  const char *v12;
  uint8_t *v13;
  const char *v14;
  const char *v15;
  uint8_t *v16;
  int v17;
  const char *v18;
  uint8_t buf[4];
  const char *v20;

  if (qword_10229FEA0 != -1)
    dispatch_once(&qword_10229FEA0, &stru_102147F68);
  v4 = qword_10229FEA8;
  if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_DEBUG))
  {
    if (*(_BYTE *)(a1 + 244))
      v5 = "update";
    else
      v5 = "init";
    *(_DWORD *)buf = 136315138;
    v20 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLPredictedWalkDistanceBoutDetector: Received user info (%s)", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEA0 != -1)
      dispatch_once(&qword_10229FEA0, &stru_102147F68);
    if (*(_BYTE *)(a1 + 244))
      v11 = "update";
    else
      v11 = "init";
    v17 = 136315138;
    v18 = v11;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEA8, 2, "CLPredictedWalkDistanceBoutDetector: Received user info (%s)", (const char *)&v17);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLPredictedWalkDistanceBoutDetector::handleUserInfoUpdate(const CLBodyMetrics &)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  *(_OWORD *)(a1 + 292) = *(__int128 *)((char *)a2 + 44);
  *(_OWORD *)(a1 + 264) = v7;
  *(_OWORD *)(a1 + 280) = v8;
  *(_OWORD *)(a1 + 248) = v6;
  *(_BYTE *)(a1 + 244) = 1;
  if (*(_QWORD *)(a1 + 192) != *(_QWORD *)(a1 + 200) && *(_DWORD *)(a1 + 288))
  {
    if (qword_10229FEA0 != -1)
      dispatch_once(&qword_10229FEA0, &stru_102147F68);
    v9 = qword_10229FEA8;
    if (os_log_type_enabled((os_log_t)qword_10229FEA8, OS_LOG_TYPE_DEBUG))
    {
      v10 = **(const char ***)(a1 + 192);
      *(_DWORD *)buf = 134349056;
      v20 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "CLPredictedWalkDistanceBoutDetector: Ending walking bout due to wheelchair (%{public}.2f)", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FEA0 != -1)
        dispatch_once(&qword_10229FEA0, &stru_102147F68);
      v14 = **(const char ***)(a1 + 192);
      v17 = 134349056;
      v18 = v14;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEA8, 2, "CLPredictedWalkDistanceBoutDetector: Ending walking bout due to wheelchair (%{public}.2f)", &v17, 12);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "void CLPredictedWalkDistanceBoutDetector::handleUserInfoUpdate(const CLBodyMetrics &)", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    sub_1005EC088(a1);
  }
}

void sub_1005EE558(id a1)
{
  qword_10229FEA8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "PredictedWalkDistance");
}

uint64_t sub_1005EE584()
{
  if (qword_102302FC8 != -1)
    dispatch_once(&qword_102302FC8, &stru_102147F88);
  return qword_1023109F0;
}

void sub_1005EE5C8()
{
  uint64_t v0;
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  int v7;
  uint8_t buf[8];
  std::__shared_weak_count *v9;

  sub_1001E4804(buf);
  v0 = *(_QWORD *)buf;
  sub_100F9A070();
  LOBYTE(v7) = 0;
  sub_1001E4874(v0, "EnableLocationControllerRecorder", (BOOL *)&v7);
  v1 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  sub_1001E4804(buf);
  LOBYTE(v7) = 0;
  sub_1001E4874(*(uint64_t *)buf, "EnableLocationControllerRecorderDebugLogs", (BOOL *)&v7);
  v4 = v9;
  if (v9)
  {
    v5 = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator new();
}

void sub_1005EE8D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t *v12;

  a12 = 0;
  sub_10060019C((uint64_t)&a12, v12);
  _Unwind_Resume(a1);
}

void sub_1005EE934()
{
  NSObject *v0;
  uint64_t v1;
  double v2;
  uint64_t v3;
  const char *v4;
  uint8_t *v5;
  int v6;
  double v7;
  uint8_t buf[4];
  double v9;

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102147FA8);
  v0 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
  {
    v1 = sub_100B303DC();
    *(_DWORD *)buf = 1;
    v2 = sub_100B30608(v1, buf);
    *(_DWORD *)buf = 134349056;
    v9 = v2;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "#locctl,#rec,shutdown recorder instance,mct,%{public}.3f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102147FA8);
    v3 = qword_1022A0028;
    v6 = 134349056;
    v7 = sub_1005EEB24();
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v3, 0, "#locctl,#rec,shutdown recorder instance,mct,%{public}.3f", &v6, 12);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "static void CLLocationControllerRecorder::shutdownInstance()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  if (qword_102302FC8 != -1)
    dispatch_once(&qword_102302FC8, &stru_102147F88);
  if (qword_1023109F0)
    sub_1005EEB50(qword_1023109F0);
}

double sub_1005EEB24()
{
  uint64_t v0;
  int v2;

  v0 = sub_100B303DC();
  v2 = 1;
  return sub_100B30608(v0, &v2);
}

void sub_1005EEB50(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  int v13;
  double v14;
  __int16 v15;
  double v16;
  uint8_t buf[4];
  double v18;
  __int16 v19;
  double v20;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_10005A6D8(v2);
    v3 = sub_100B303DC();
    *(_DWORD *)buf = 1;
    *(double *)(a1 + 32) = sub_100B30608(v3, buf);
    *(_BYTE *)(a1 + 24) = 0;
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102147FA8);
    v4 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      v5 = sub_100B303DC();
      *(_DWORD *)buf = 1;
      v6 = sub_100B30608(v5, buf);
      v7 = sub_100B303DC();
      v8 = sub_100B309E0(v7);
      *(_DWORD *)buf = 134349312;
      v18 = v6;
      v19 = 2050;
      v20 = v8;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#locctl,#rec,close record session,mct,%{public}.3f,propagation_us,%{public}.3f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v9 = qword_1022A0028;
      v10 = sub_1005EEB24();
      v11 = sub_100B303DC();
      v13 = 134349312;
      v14 = v10;
      v15 = 2050;
      v16 = sub_100B309E0(v11);
      v12 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 1, "#locctl,#rec,close record session,mct,%{public}.3f,propagation_us,%{public}.3f", &v13, 22);
      sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::close()", "%s\n", v12);
      if (v12 != (char *)buf)
        free(v12);
    }
  }
}

void sub_1005EED78(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  double v17;
  NSObject *v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  double v26;
  uint8_t *v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  _BYTE v33[24];
  uint8_t buf[4];
  double v35;
  __int16 v36;
  double v37;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    if (*(_BYTE *)(a1 + 24))
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v3 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
      {
        v4 = sub_100B303DC();
        *(_DWORD *)buf = 1;
        v5 = sub_100B30608(v4, buf);
        v6 = sub_100B303DC();
        v7 = sub_100B309E0(v6);
        *(_DWORD *)buf = 134349312;
        v35 = v5;
        v36 = 2050;
        v37 = v7;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "#locctl,#rec,#Warning,previous record session is still open,ignoring open,mct,%{public}.3f,propagation_us,%{public}.3f", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102147FA8);
        v8 = qword_1022A0028;
        v9 = sub_1005EEB24();
        v10 = sub_100B303DC();
        *(_DWORD *)v33 = 134349312;
        *(double *)&v33[4] = v9;
        *(_WORD *)&v33[12] = 2050;
        *(_QWORD *)&v33[14] = sub_100B309E0(v10);
        v11 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, 1, "#locctl,#rec,#Warning,previous record session is still open,ignoring open,mct,%{public}.3f,propagation_us,%{public}.3f", v33, 22, *(_OWORD *)v33, *(_QWORD *)&v33[16]);
LABEL_26:
        v27 = (uint8_t *)v11;
        sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::open()", "%s\n", v11);
        if (v27 != buf)
          free(v27);
      }
    }
    else
    {
      sub_10114C4C0(v2);
      *(_BYTE *)(a1 + 24) = 1;
      if (*(double *)(a1 + 32) < 0.0)
      {
        v12 = sub_100B303DC();
        *(_DWORD *)buf = 1;
        *(double *)(a1 + 32) = sub_100B30608(v12, buf);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102147FA8);
        v13 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
        {
          v14 = sub_100B303DC();
          *(_DWORD *)buf = 1;
          v15 = sub_100B30608(v14, buf);
          v16 = sub_100B303DC();
          v17 = sub_100B309E0(v16);
          *(_DWORD *)buf = 134349312;
          v35 = v15;
          v36 = 2050;
          v37 = v17;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "#locctl,#rec,open record session for the first time since boot,mct,%{public}.3f,propagation_us,%{public}.3f", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_102147FA8);
          v28 = qword_1022A0028;
          v29 = sub_1005EEB24();
          v30 = sub_100B303DC();
          *(_DWORD *)v33 = 134349312;
          *(double *)&v33[4] = v29;
          *(_WORD *)&v33[12] = 2050;
          *(_QWORD *)&v33[14] = sub_100B309E0(v30);
          v31 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v28, 1, "#locctl,#rec,open record session for the first time since boot,mct,%{public}.3f,propagation_us,%{public}.3f", v33, 22);
          sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::open()", "%s\n", v31);
          if (v31 != (char *)buf)
            free(v31);
        }
      }
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v18 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
      {
        v19 = sub_100B303DC();
        *(_DWORD *)buf = 1;
        v20 = sub_100B30608(v19, buf);
        v21 = sub_100B303DC();
        v22 = sub_100B309E0(v21);
        *(_DWORD *)buf = 134349312;
        v35 = v20;
        v36 = 2050;
        v37 = v22;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "#locctl,#rec,open record session,mct,%{public}.3f,propagation_us,%{public}.3f", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102147FA8);
        v23 = qword_1022A0028;
        v24 = sub_1005EEB24();
        v25 = sub_100B303DC();
        v26 = sub_100B309E0(v25);
        *(_DWORD *)v33 = 134349312;
        *(double *)&v33[4] = v24;
        *(_WORD *)&v33[12] = 2050;
        *(double *)&v33[14] = v26;
        LODWORD(v32) = 22;
        v11 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v23, 1, "#locctl,#rec,open record session,mct,%{public}.3f,propagation_us,%{public}.3f", v33, v32, *(_OWORD *)v33, *(_QWORD *)&v33[16]);
        goto LABEL_26;
      }
    }
  }
}

uint64_t sub_1005EF278(uint64_t result)
{
  uint64_t v1;
  __n128 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  int v7;
  NSObject *v8;
  unint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  double v15;
  char *v16;
  __n128 v17[2];
  _QWORD v18[5];
  uint64_t v19;
  int v20;
  _DWORD v21[2];
  __int16 v22;
  unint64_t v23;
  __int16 v24;
  double v25;
  uint8_t buf[4];
  int v27;
  __int16 v28;
  unint64_t v29;
  __int16 v30;
  double v31;

  if (*(_QWORD *)(result + 16))
  {
    v1 = result;
    sub_100166054(v18);
    v2 = (__n128 *)sub_100B303DC();
    sub_100B307F4(v2, v17);
    sub_1005EF5D8((uint64_t)v17, (uint64_t)v18);
    v20 |= 2u;
    v3 = v19;
    if (!v19)
      operator new();
    *(_DWORD *)(v19 + 492) |= 0x10u;
    v4 = *(_QWORD *)(v3 + 296);
    if (!v4)
      operator new();
    *(_DWORD *)(v4 + 28) |= 2u;
    v5 = *(_QWORD *)(v4 + 16);
    if (!v5)
      operator new();
    v6 = sub_1001CE630();
    sub_101380574(v5, v6);
    v7 = sub_1005EF67C(v1, (uint64_t)v18);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102147FA8);
    v8 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v9 = v17[0].n128_u64[0];
      v10 = sub_100B303DC();
      v11 = sub_100B309E0(v10);
      *(_DWORD *)buf = 67240704;
      v27 = v7;
      v28 = 2050;
      v29 = v9;
      v30 = 2050;
      v31 = v11;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#locctl,#rec,wrote platform info,success,%{public}d,mct,%{public}.3f,propagation_us,%{public}.3f", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v12 = qword_1022A0028;
      v13 = v17[0].n128_u64[0];
      v14 = sub_100B303DC();
      v15 = sub_100B309E0(v14);
      v21[0] = 67240704;
      v21[1] = v7;
      v22 = 2050;
      v23 = v13;
      v24 = 2050;
      v25 = v15;
      v16 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v12, 2, "#locctl,#rec,wrote platform info,success,%{public}d,mct,%{public}.3f,propagation_us,%{public}.3f", v21, 28);
      sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordRavenPlatformInfo()", "%s\n", v16);
      if (v16 != (char *)buf)
        free(v16);
    }
    return sub_100166004(v18);
  }
  return result;
}

void sub_1005EF560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_100166004(va);
  _Unwind_Resume(a1);
}

double sub_1005EF5D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  double result;

  *(_DWORD *)(a2 + 52) |= 1u;
  v2 = *(_QWORD *)(a2 + 32);
  if (!v2)
    operator new();
  v3 = *(_DWORD *)(v2 + 44);
  *(int8x16_t *)(v2 + 8) = vextq_s8(*(int8x16_t *)(a1 + 8), *(int8x16_t *)(a1 + 8), 8uLL);
  result = *(double *)a1;
  *(_DWORD *)(v2 + 44) = v3 | 7;
  *(double *)(v2 + 24) = result;
  return result;
}

void sub_1005EF658()
{
  operator delete();
}

uint64_t sub_1005EF67C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  char *v5;
  NSObject *v6;
  NSObject *v7;
  char *v9;
  _WORD v10[8];
  void *__p[2];
  uint64_t v12;
  uint8_t buf[1640];

  if (!*(_QWORD *)(a1 + 16))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102147FA8);
    v4 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#locctl,#rec,write:protobuf serializer object not initialized", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102147FA8);
    LOWORD(__p[0]) = 0;
    v5 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#locctl,#rec,write:protobuf serializer object not initialized", __p, 2);
    sub_100512490("Generic", 1, 0, 0, "BOOL CLLocationControllerRecorder::write(const CLP::LogEntry::LogEntry &)", "%s\n", v5);
    goto LABEL_30;
  }
  if (!*(_BYTE *)(a1 + 24))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102147FA8);
    v6 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#locctl,#rec,write:session not open", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102147FA8);
    LOWORD(__p[0]) = 0;
    v5 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#locctl,#rec,write:session not open", __p, 2);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLLocationControllerRecorder::write(const CLP::LogEntry::LogEntry &)", "%s\n", v5);
LABEL_30:
    if (v5 != (char *)buf)
      free(v5);
    return 0;
  }
  __p[0] = 0;
  __p[1] = 0;
  v12 = 0;
  v3 = wireless_diagnostics::google::protobuf::MessageLite::SerializeToString(a2, __p);
  if ((v3 & 1) != 0)
  {
    sub_100166CE0(*(_QWORD *)(a1 + 16), (uint64_t)__p);
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102147FA8);
    v7 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#locctl,#rec,write:could not serialize protobuf message", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v10[0] = 0;
      v9 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#locctl,#rec,write:could not serialize protobuf message", v10, 2);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLLocationControllerRecorder::write(const CLP::LogEntry::LogEntry &)", "%s\n", v9);
      if (v9 != (char *)buf)
        free(v9);
    }
  }
  if (SHIBYTE(v12) < 0)
    operator delete(__p[0]);
  return v3;
}

void sub_1005EFAB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005EFAE0(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  int v11;
  int v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  const char *v20;
  uint8_t *v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  _QWORD v25[5];
  uint64_t v26;
  int v27;
  _DWORD v28[2];
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  int v34;
  uint8_t buf[4];
  int v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  int v42;

  if (*(_QWORD *)(result + 16))
  {
    v3 = result;
    sub_100166054(v25);
    v24 = 1;
    *(_DWORD *)buf = 21;
    HIDWORD(v22) = 21;
    v23 = sub_10142DEC4((int *)buf);
    sub_1005EFF80((uint64_t)v25, &v24, (_DWORD *)&v22 + 1, (_DWORD *)&v22 + 1, (uint64_t *)a2);
    v27 |= 2u;
    v4 = v26;
    if (!v26)
      operator new();
    *(_DWORD *)(v26 + 492) |= 0x800u;
    v5 = *(_QWORD *)(v4 + 352);
    if (!v5)
      operator new();
    *(_DWORD *)(v5 + 184) |= 0x10u;
    v6 = *(_QWORD *)(v5 + 32);
    if (!v6)
      operator new();
    *(_DWORD *)(v6 + 28) |= 1u;
    *(_DWORD *)(v6 + 8) = -1;
    if (!sub_100106094(1u))
      __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 6220, "::CLP::LogEntry::PrivateData::SystemNotification_NotificationType_IsValid(value)");
    v7 = *(_DWORD *)(v6 + 28);
    *(_DWORD *)(v6 + 12) = 1;
    *(_DWORD *)(v6 + 28) = v7 | 6;
    v8 = *(_QWORD *)(v6 + 16);
    if (!v8)
      operator new();
    *(_DWORD *)(v8 + 72) |= 1u;
    v9 = *(_QWORD *)(v8 + 8);
    if (!v9)
      operator new();
    sub_1005F0190((uint64_t *)a2, v9);
    v10 = *(_BYTE *)(a2 + 24);
    *(_DWORD *)(v8 + 72) |= 2u;
    *(_BYTE *)(v8 + 16) = v10;
    v11 = sub_1005EF67C(v3, (uint64_t)v25);
    if (*(_BYTE *)(v3 + 8))
    {
      v12 = v11;
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v13 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        v14 = *(_QWORD *)(a2 + 16);
        v15 = *(_QWORD *)a2;
        v16 = *(unsigned __int8 *)(a2 + 24);
        *(_DWORD *)buf = 67240960;
        v36 = v12;
        v37 = 2050;
        v38 = v14;
        v39 = 2050;
        v40 = v15;
        v41 = 1026;
        v42 = v16;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordHeartbeat,success,%{public}d,received timestamp,cfat,%{public}.3f,mct,%{public}.3f,is_valid,%{public}d", buf, 0x22u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102147FA8);
        v17 = *(_QWORD *)(a2 + 16);
        v18 = *(_QWORD *)a2;
        v19 = *(unsigned __int8 *)(a2 + 24);
        v28[0] = 67240960;
        v28[1] = v12;
        v29 = 2050;
        v30 = v17;
        v31 = 2050;
        v32 = v18;
        v33 = 1026;
        v34 = v19;
        LODWORD(v22) = 34;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#locctl,#rec,recordHeartbeat,success,%{public}d,received timestamp,cfat,%{public}.3f,mct,%{public}.3f,is_valid,%{public}d", v28, v22);
        v21 = (uint8_t *)v20;
        sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordHeartbeat(const CLUtils::Timestamp &)", "%s\n", v20);
        if (v21 != buf)
          free(v21);
      }
    }
    return sub_100166004(v25);
  }
  return result;
}

void sub_1005EFED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100166004(va);
  _Unwind_Resume(a1);
}

void sub_1005EFF80(uint64_t a1, unsigned int *a2, _DWORD *a3, _DWORD *a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  _DWORD *v15;

  sub_1005EF5D8((uint64_t)a5, a1);
  *(_DWORD *)(a1 + 52) |= 2u;
  v10 = *(_QWORD *)(a1 + 40);
  if (!v10)
    operator new();
  *(_DWORD *)(v10 + 492) |= 0x800u;
  v11 = *(_QWORD *)(v10 + 352);
  if (!v11)
    operator new();
  *(_DWORD *)(v11 + 184) |= 1u;
  v12 = *(_QWORD *)(v11 + 8);
  if (!v12)
    operator new();
  sub_1005F0190(a5, v12);
  v13 = sub_1005FF5A8(a2);
  if (!sub_100106094(v13))
    sub_1019019B8();
  v14 = *(_DWORD *)(v11 + 184);
  *(_DWORD *)(v11 + 176) = v13;
  *(_DWORD *)(v11 + 184) = v14 | 6;
  v15 = *(_DWORD **)(v11 + 16);
  if (!v15)
    operator new();
  sub_1005FF768(a3, v15);
  *(_DWORD *)(v11 + 184) |= 8u;
  if (!*(_QWORD *)(v11 + 24))
    operator new();
  sub_1005FF768(a4, *(_DWORD **)(v11 + 24));
}

void sub_1005F011C()
{
  operator delete();
}

void sub_1005F0190(uint64_t *a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  NSObject *v4;
  char *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (a2)
  {
    v2 = *(_DWORD *)(a2 + 36);
    *(int8x16_t *)(a2 + 8) = vextq_s8(*(int8x16_t *)(a1 + 1), *(int8x16_t *)(a1 + 1), 8uLL);
    v3 = *a1;
    *(_DWORD *)(a2 + 36) = v2 | 7;
    *(_QWORD *)(a2 + 24) = v3;
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102147FA8);
    v4 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#locctl,#rec,failed to set private data timestamp", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v6[0] = 0;
      v5 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#locctl,#rec,failed to set private data timestamp", v6, 2);
      sub_100512490("Generic", 1, 0, 2, "static void CLLocationControllerRecorder::setPrivateDataTimeStamp(const CLUtils::Timestamp &, CLP::LogEntry::PrivateData::TimeStamp *)", "%s\n", v5);
      if (v5 != (char *)buf)
        free(v5);
    }
  }
}

uint64_t sub_1005F033C(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  __n128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _DWORD *v9;
  pid_t v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  std::string *v19;
  std::string::size_type v20;
  int v21;
  int v22;
  uint64_t v23;
  std::string *v24;
  std::string *v25;
  BOOL v26;
  _QWORD *v27;
  _QWORD *v28;
  int v29;
  NSObject *v30;
  std::string::size_type v31;
  uint64_t v32;
  const char *v33;
  std::string *v34;
  uint64_t v35;
  _QWORD *v36;
  _DWORD v37[2];
  unsigned int v38;
  __n128 v39[2];
  _QWORD v40[5];
  uint64_t v41;
  int v42;
  _DWORD v43[2];
  __int16 v44;
  uint64_t v45;
  std::string __str;

  if (*(_QWORD *)(result + 16))
  {
    v3 = result;
    sub_100166054(v40);
    v4 = (__n128 *)sub_100B303DC();
    sub_100B307F4(v4, v39);
    v38 = 1;
    LODWORD(__str.__r_.__value_.__l.__data_) = 21;
    v37[0] = 21;
    v37[1] = sub_10142DEC4((int *)&__str);
    sub_1005EFF80((uint64_t)v40, &v38, v37, v37, (uint64_t *)v39);
    v42 |= 2u;
    v5 = v41;
    if (!v41)
      operator new();
    *(_DWORD *)(v41 + 492) |= 0x800u;
    v6 = *(_QWORD *)(v5 + 352);
    if (!v6)
      operator new();
    *(_DWORD *)(v6 + 184) |= 0x10u;
    v7 = *(_QWORD *)(v6 + 32);
    if (!v7)
      operator new();
    *(_DWORD *)(v7 + 28) |= 1u;
    *(_DWORD *)(v7 + 8) = -1;
    if (!sub_100106094(2u))
      __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 6220, "::CLP::LogEntry::PrivateData::SystemNotification_NotificationType_IsValid(value)");
    v8 = *(_DWORD *)(v7 + 28);
    *(_DWORD *)(v7 + 12) = 2;
    *(_DWORD *)(v7 + 28) = v8 | 6;
    v9 = *(_DWORD **)(v7 + 16);
    if (!v9)
      operator new();
    v10 = getpid();
    v35 = v3;
    v36 = a2;
    v9[18] |= 4u;
    v9[5] = v10;
    v12 = a2 + 1;
    v11 = (_QWORD *)*a2;
    if (v11 != v12)
    {
      do
      {
        v13 = v9[9];
        v14 = (int)v9[8];
        if ((int)v14 >= v13)
        {
          if (v13 == v9[10])
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v9 + 6), v13 + 1);
            v13 = v9[9];
          }
          v9[9] = v13 + 1;
          sub_1005FFDD8();
        }
        v15 = *((_QWORD *)v9 + 3);
        v9[8] = v14 + 1;
        v16 = *(_QWORD *)(v15 + 8 * v14);
        v17 = *((_DWORD *)v11 + 8);
        v18 = *(_DWORD *)(v16 + 40) | 1;
        *(_DWORD *)(v16 + 40) = v18;
        *(_DWORD *)(v16 + 32) = v17;
        if (*((char *)v11 + 63) < 0)
        {
          sub_100115CE4(&__str, (void *)v11[5], v11[6]);
          v18 = *(_DWORD *)(v16 + 40);
        }
        else
        {
          __str = *(std::string *)(v11 + 5);
        }
        *(_DWORD *)(v16 + 40) = v18 | 2;
        v19 = *(std::string **)(v16 + 8);
        if (v19 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        std::string::operator=(v19, &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        sub_1005FFE38((uint64_t *)&__str, (uint64_t)(v11 + 8));
        v20 = __str.__r_.__value_.__r.__words[0];
        if ((std::string::size_type *)__str.__r_.__value_.__l.__data_ != &__str.__r_.__value_.__r.__words[1])
        {
          do
          {
            v21 = *(_DWORD *)(v20 + 28);
            v22 = *(_DWORD *)(v16 + 24);
            if (v22 == *(_DWORD *)(v16 + 28))
            {
              sub_1002A19E0(v16 + 16, v22 + 1);
              v22 = *(_DWORD *)(v16 + 24);
            }
            v23 = *(_QWORD *)(v16 + 16);
            *(_DWORD *)(v16 + 24) = v22 + 1;
            *(_DWORD *)(v23 + 4 * v22) = v21;
            v24 = *(std::string **)(v20 + 8);
            if (v24)
            {
              do
              {
                v25 = v24;
                v24 = (std::string *)v24->__r_.__value_.__r.__words[0];
              }
              while (v24);
            }
            else
            {
              do
              {
                v25 = *(std::string **)(v20 + 16);
                v26 = v25->__r_.__value_.__r.__words[0] == v20;
                v20 = (std::string::size_type)v25;
              }
              while (!v26);
            }
            v20 = (std::string::size_type)v25;
          }
          while (v25 != (std::string *)&__str.__r_.__value_.__r.__words[1]);
        }
        sub_100008848((uint64_t)&__str, (_QWORD *)__str.__r_.__value_.__l.__size_);
        v27 = (_QWORD *)v11[1];
        if (v27)
        {
          do
          {
            v28 = v27;
            v27 = (_QWORD *)*v27;
          }
          while (v27);
        }
        else
        {
          do
          {
            v28 = (_QWORD *)v11[2];
            v26 = *v28 == (_QWORD)v11;
            v11 = v28;
          }
          while (!v26);
        }
        v11 = v28;
      }
      while (v28 != v12);
    }
    v29 = sub_1005EF67C(v35, (uint64_t)v40);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102147FA8);
    v30 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v31 = v36[2];
      LODWORD(__str.__r_.__value_.__l.__data_) = 67240448;
      HIDWORD(__str.__r_.__value_.__r.__words[0]) = v29;
      LOWORD(__str.__r_.__value_.__r.__words[1]) = 2050;
      *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = v31;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordLocationControllerClientList,success,%{public}d,clientList_size,%{public}zu", (uint8_t *)&__str, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&__str, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v32 = v36[2];
      v43[0] = 67240448;
      v43[1] = v29;
      v44 = 2050;
      v45 = v32;
      _os_log_send_and_compose_impl(2, 0, &__str, 1628, &_mh_execute_header, qword_1022A0028, 2, "#locctl,#rec,recordLocationControllerClientList,success,%{public}d,clientList_size,%{public}zu", v43, 18);
      v34 = (std::string *)v33;
      sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordLocationControllerClientList(const CLLocationControllerRecorder_Types::ClientList &)", "%s\n", v33);
      if (v34 != &__str)
        free(v34);
    }
    return sub_100166004(v40);
  }
  return result;
}

void sub_1005F08B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_100166004(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005F0984(uint64_t result, int a2)
{
  uint64_t v3;
  __n128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  std::string *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  int v16;
  NSObject *v17;
  const char *v18;
  std::string *v19;
  std::string __p;
  std::string v21;
  _DWORD v22[2];
  unsigned int v23;
  __n128 v24[2];
  _QWORD v25[5];
  uint64_t v26;
  int v27;
  std::string __str;
  uint64_t v29;
  std::__shared_weak_count *v30;

  if (!*(_QWORD *)(result + 16))
    return result;
  v3 = result;
  sub_100166054(v25);
  v4 = (__n128 *)sub_100B303DC();
  sub_100B307F4(v4, v24);
  v23 = 1;
  LODWORD(__str.__r_.__value_.__l.__data_) = 21;
  v22[0] = 21;
  v22[1] = sub_10142DEC4((int *)&__str);
  sub_1005EFF80((uint64_t)v25, &v23, v22, v22, (uint64_t *)v24);
  v27 |= 2u;
  v5 = v26;
  if (!v26)
    operator new();
  *(_DWORD *)(v26 + 492) |= 0x800u;
  v6 = *(_QWORD *)(v5 + 352);
  if (!v6)
    operator new();
  *(_DWORD *)(v6 + 184) |= 0x10u;
  v7 = *(_QWORD *)(v6 + 32);
  if (!v7)
    operator new();
  *(_DWORD *)(v7 + 28) |= 1u;
  *(_DWORD *)(v7 + 8) = -1;
  if (!sub_100106094(3u))
    __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 6220, "::CLP::LogEntry::PrivateData::SystemNotification_NotificationType_IsValid(value)");
  v8 = *(_DWORD *)(v7 + 28);
  *(_DWORD *)(v7 + 12) = 3;
  *(_DWORD *)(v7 + 28) = v8 | 6;
  v9 = *(_QWORD *)(v7 + 16);
  if (!v9)
    operator new();
  if (!a2)
  {
    if (sub_10008D1F0(2u))
    {
      v10 = 2;
      goto LABEL_16;
    }
LABEL_40:
    __assert_rtn("set_filter_type", "CLPLocationController.pb.h", 6059, "::CLP::LogEntry::PrivateData::SystemNotification_FilterType_IsValid(value)");
  }
  if (!sub_10008D1F0(1u))
    goto LABEL_40;
  v10 = 1;
LABEL_16:
  *(_DWORD *)(v9 + 72) |= 0x10u;
  *(_DWORD *)(v9 + 64) = v10;
  sub_1015A2E04(&v21, "prod");
  sub_1001E4804(&v29);
  v11 = v29;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    sub_100115CE4(&__p, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
  else
    __p = v21;
  sub_1005F0F40(v11, "LCPlaybackSystemVersionInfo", &__p, (uint64_t)&__str);
  *(_DWORD *)(v9 + 72) |= 0x20u;
  v12 = *(std::string **)(v9 + 48);
  if (v12 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v12, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v13 = v30;
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = sub_1005EF67C(v3, (uint64_t)v25);
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102147FA8);
  v17 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    LODWORD(__str.__r_.__value_.__l.__data_) = 67240448;
    HIDWORD(__str.__r_.__value_.__r.__words[0]) = v16;
    LOWORD(__str.__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = a2;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "#locctl,#rec,recordLocationControllerFilterVersion,success,%{public}d,locationControllerFilterUsageIsLegacy,%{public}d", (uint8_t *)&__str, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&__str, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102147FA8);
    LODWORD(v29) = 67240448;
    HIDWORD(v29) = v16;
    LOWORD(v30) = 1026;
    *(_DWORD *)((char *)&v30 + 2) = a2;
    _os_log_send_and_compose_impl(2, 0, &__str, 1628, &_mh_execute_header, qword_1022A0028, 1, "#locctl,#rec,recordLocationControllerFilterVersion,success,%{public}d,locationControllerFilterUsageIsLegacy,%{public}d", &v29, 14);
    v19 = (std::string *)v18;
    sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordLocationControllerFilterVersion(BOOL)", "%s\n", v18);
    if (v19 != &__str)
      free(v19);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  return sub_100166004(v25);
}

void sub_1005F0E50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a23 < 0)
    operator delete(__p);
  sub_100166004(&a30);
  _Unwind_Resume(a1);
}

void sub_1005F0F40(uint64_t a1@<X0>, const char *a2@<X1>, std::string *a3@<X2>, uint64_t a4@<X8>)
{
  _BOOL4 v6;
  std::string *p_p;
  void *v8;
  std::string *v9;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  v6 = sub_1000BCB64(a1, a2, &__p);
  if (v6)
    p_p = &__p;
  else
    p_p = a3;
  if (SHIBYTE(p_p->__r_.__value_.__r.__words[2]) < 0)
  {
    v8 = (void *)p_p->__r_.__value_.__r.__words[0];
    v9 = &__p;
    if (!v6)
      v9 = a3;
    sub_100115CE4((_BYTE *)a4, v8, v9->__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)a4 = *(_OWORD *)&p_p->__r_.__value_.__l.__data_;
    *(_QWORD *)(a4 + 16) = *((_QWORD *)&p_p->__r_.__value_.__l + 2);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1005F0FD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005F0FF4(uint64_t a1, unsigned int *a2, int32x4_t *a3, int *a4, int *a5, int *a6, char *a7)
{
  NSObject *v10;
  BOOL v11;
  int v12;
  BOOL v13;
  int v14;
  BOOL v15;
  _BOOL4 v16;
  BOOL v17;
  _BOOL4 v18;
  const char *v19;
  void **v20;
  NSObject *v21;
  void **v22;
  uint64_t v23;
  uint8_t *v24;
  void **v25;
  __n128 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  NSObject *v37;
  _BYTE *v38;
  void **v39;
  void **v40;
  int v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  void **v45;
  void **v46;
  void **v47;
  int v48;
  uint64_t v49;
  double v50;
  char *v51;
  char *v52;
  uint64_t v53;
  void *v54[2];
  char v55;
  int v56;
  void *__p[2];
  char v58;
  void *v59[2];
  char v60;
  __n128 v61[2];
  _BYTE v62[18];
  __int16 v63;
  void **v64;
  __int16 v65;
  void **v66;
  __int16 v67;
  int v68;
  __int16 v69;
  double v70;
  uint8_t v71[23];
  char v72;
  uint64_t v73;
  int v74;
  void *buf;
  __int16 v76;
  _BYTE *v77;
  __int16 v78;
  void **v79;
  __int16 v80;
  void **v81;
  __int16 v82;
  int v83;
  __int16 v84;
  double v85;

  if (!*(_QWORD *)(a1 + 16))
    return;
  if (*a2 == 4)
  {
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*a3))) & 1) != 0)
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v10 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        if (a3->i32[0])
          v11 = a3->i32[1] == 0;
        else
          v11 = 1;
        v12 = !v11;
        if (*a4)
          v13 = a4[1] == 0;
        else
          v13 = 1;
        v14 = !v13;
        LODWORD(buf) = 67109376;
        HIDWORD(buf) = v12;
        v76 = 1024;
        LODWORD(v77) = v14;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLDaemonStatus_Type,silo entry invalid,from_valid,%d,to_valid,%d", (uint8_t *)&buf, 0xEu);
      }
      if (!sub_1001BFF7C(115, 2))
        return;
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v15 = !a3->i32[0] || a3->i32[1] == 0;
      v16 = !v15;
      v17 = !*a4 || a4[1] == 0;
      v18 = !v17;
      *(_DWORD *)v71 = 67109376;
      *(_DWORD *)&v71[4] = v16;
      *(_WORD *)&v71[8] = 1024;
      *(_DWORD *)&v71[10] = v18;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#locctl,#rec,recordMessage,CLDaemonStatus_Type,silo entry invalid,from_valid,%d,to_valid,%d", v71, 14);
      v20 = (void **)v19;
      sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v19);
      if (v20 == &buf)
        return;
LABEL_54:
      free(v20);
      return;
    }
    sub_100166054(v71);
    v30 = (__n128 *)sub_100B303DC();
    sub_100B307F4(v30, v61);
    sub_1005EFF80((uint64_t)v71, a2, a3, a4, (uint64_t *)v61);
    v74 |= 2u;
    v31 = v73;
    if (!v73)
      operator new();
    *(_DWORD *)(v73 + 492) |= 0x800u;
    v32 = *(_QWORD *)(v31 + 352);
    if (!v32)
      operator new();
    *(_DWORD *)(v32 + 184) |= 0x20u;
    v33 = *(_QWORD *)(v32 + 40);
    if (!v33)
      operator new();
    v34 = *a5;
    *(_DWORD *)(v33 + 28) |= 1u;
    *(_DWORD *)(v33 + 8) = v34;
    sub_101381AE4(a6, a7, v33);
    v35 = sub_1005EF67C(a1, (uint64_t)v71);
    if (*(_BYTE *)(a1 + 8))
    {
      v36 = v35;
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v37 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        sub_10142E09C((int *)a2, v62);
        if (SBYTE3(v64) >= 0)
          v38 = v62;
        else
          v38 = *(_BYTE **)v62;
        LODWORD(v54[0]) = a3->i32[0];
        sub_10142E364((int *)v54, v59);
        if (v60 >= 0)
          v39 = v59;
        else
          v39 = (void **)v59[0];
        v56 = *a4;
        v40 = __p;
        sub_10142E364(&v56, __p);
        if (v58 < 0)
          v40 = (void **)__p[0];
        v41 = *a6;
        v42 = sub_100B303DC();
        v43 = sub_100B309E0(v42);
        LODWORD(buf) = 67110402;
        HIDWORD(buf) = v36;
        v76 = 2080;
        v77 = v38;
        v78 = 2080;
        v79 = v39;
        v80 = 2080;
        v81 = v40;
        v82 = 1024;
        v83 = v41;
        v84 = 2050;
        v85 = v43;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLDaemonStatus_Type,success,%d,message_type,%s,from,%s,to,%s,notification_type,%d,propagation_us,%{public}.3f", (uint8_t *)&buf, 0x36u);
        if (v58 < 0)
          operator delete(__p[0]);
        if (v60 < 0)
          operator delete(v59[0]);
        if (SBYTE3(v64) < 0)
          operator delete(*(void **)v62);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102147FA8);
        v44 = qword_1022A0028;
        sub_10142E09C((int *)a2, v59);
        if (v60 >= 0)
          v45 = v59;
        else
          v45 = (void **)v59[0];
        v56 = a3->i32[0];
        v46 = __p;
        sub_10142E364(&v56, __p);
        if (v58 < 0)
          v46 = (void **)__p[0];
        HIDWORD(v53) = *a4;
        sub_10142E364((int *)&v53 + 1, v54);
        if (v55 >= 0)
          v47 = v54;
        else
          v47 = (void **)v54[0];
        v48 = *a6;
        v49 = sub_100B303DC();
        v50 = sub_100B309E0(v49);
        *(_DWORD *)v62 = 67110402;
        *(_DWORD *)&v62[4] = v36;
        *(_WORD *)&v62[8] = 2080;
        *(_QWORD *)&v62[10] = v45;
        v63 = 2080;
        v64 = v46;
        v65 = 2080;
        v66 = v47;
        v67 = 1024;
        v68 = v48;
        v69 = 2050;
        v70 = v50;
        LODWORD(v53) = 54;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v44, 2, "#locctl,#rec,recordMessage,CLDaemonStatus_Type,success,%d,message_type,%s,from,%s,to,%s,notification_type,%d,propagation_us,%{public}.3f", v62, v53);
        v52 = v51;
        if (v55 < 0)
          operator delete(v54[0]);
        if (v58 < 0)
          operator delete(__p[0]);
        if (v60 < 0)
          operator delete(v59[0]);
        sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v52);
        if (v52 != (char *)&buf)
          free(v52);
      }
    }
    sub_100166004(v71);
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102147FA8);
    v21 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      sub_10142E09C((int *)a2, &buf);
      v22 = SBYTE3(v79) >= 0 ? &buf : (void **)buf;
      *(_DWORD *)v71 = 136315138;
      *(_QWORD *)&v71[4] = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLDaemonStatus_Type,unsupported message type,%s", v71, 0xCu);
      if (SBYTE3(v79) < 0)
        operator delete(buf);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v23 = qword_1022A0028;
      sub_10142E09C((int *)a2, v71);
      if (v72 >= 0)
        v24 = v71;
      else
        v24 = *(uint8_t **)v71;
      *(_DWORD *)v62 = 136315138;
      *(_QWORD *)&v62[4] = v24;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v23, 2, "#locctl,#rec,recordMessage,CLDaemonStatus_Type,unsupported message type,%s", v62);
      v20 = v25;
      if (v72 < 0)
        operator delete(*(void **)v71);
      sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", (const char *)v20);
      if (v20 != &buf)
        goto LABEL_54;
    }
  }
}

void sub_1005F1834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  sub_100166004(&a45);
  _Unwind_Resume(a1);
}

void sub_1005F193C(uint64_t a1, unsigned int *a2, int32x4_t *a3, int *a4, int *a5, int *a6, uint64_t a7)
{
  NSObject *v10;
  BOOL v11;
  int v12;
  BOOL v13;
  int v14;
  BOOL v15;
  _BOOL4 v16;
  BOOL v17;
  _BOOL4 v18;
  const char *v19;
  void **v20;
  NSObject *v21;
  void **v22;
  uint64_t v23;
  uint8_t *v24;
  void **v25;
  __n128 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  int v40;
  NSObject *v41;
  _BYTE *v42;
  void **v43;
  void **v44;
  int v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  void **v49;
  void **v50;
  void **v51;
  int v52;
  uint64_t v53;
  double v54;
  char *v55;
  char *v56;
  uint64_t v57;
  void *v58[2];
  char v59;
  int v60;
  void *__p[2];
  char v62;
  void *v63[2];
  char v64;
  __n128 v65[2];
  _BYTE v66[18];
  __int16 v67;
  void **v68;
  __int16 v69;
  void **v70;
  __int16 v71;
  int v72;
  __int16 v73;
  double v74;
  uint8_t v75[23];
  char v76;
  uint64_t v77;
  int v78;
  void *buf;
  __int16 v80;
  _BYTE *v81;
  __int16 v82;
  void **v83;
  __int16 v84;
  void **v85;
  __int16 v86;
  int v87;
  __int16 v88;
  double v89;

  if (!*(_QWORD *)(a1 + 16))
    return;
  if (*a2 == 4)
  {
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*a3))) & 1) != 0)
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v10 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        if (a3->i32[0])
          v11 = a3->i32[1] == 0;
        else
          v11 = 1;
        v12 = !v11;
        if (*a4)
          v13 = a4[1] == 0;
        else
          v13 = 1;
        v14 = !v13;
        LODWORD(buf) = 67109376;
        HIDWORD(buf) = v12;
        v80 = 1024;
        LODWORD(v81) = v14;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLClientManager_Type,silo entry invalid,from_valid,%d,to_valid,%d", (uint8_t *)&buf, 0xEu);
      }
      if (!sub_1001BFF7C(115, 2))
        return;
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v15 = !a3->i32[0] || a3->i32[1] == 0;
      v16 = !v15;
      v17 = !*a4 || a4[1] == 0;
      v18 = !v17;
      *(_DWORD *)v75 = 67109376;
      *(_DWORD *)&v75[4] = v16;
      *(_WORD *)&v75[8] = 1024;
      *(_DWORD *)&v75[10] = v18;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#locctl,#rec,recordMessage,CLClientManager_Type,silo entry invalid,from_valid,%d,to_valid,%d", v75, 14);
      v20 = (void **)v19;
      sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v19);
      if (v20 == &buf)
        return;
LABEL_54:
      free(v20);
      return;
    }
    sub_100166054(v75);
    v30 = (__n128 *)sub_100B303DC();
    sub_100B307F4(v30, v65);
    sub_1005EFF80((uint64_t)v75, a2, a3, a4, (uint64_t *)v65);
    v78 |= 2u;
    v31 = v77;
    if (!v77)
      operator new();
    *(_DWORD *)(v77 + 492) |= 0x800u;
    v32 = *(_QWORD *)(v31 + 352);
    if (!v32)
      operator new();
    *(_DWORD *)(v32 + 184) |= 0x40u;
    v33 = *(_QWORD *)(v32 + 48);
    if (!v33)
      operator new();
    v34 = *a5;
    *(_DWORD *)(v33 + 28) |= 1u;
    *(_DWORD *)(v33 + 8) = v34;
    v35 = sub_1005F234C(a6);
    if (!sub_10008D1F0(v35))
      __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 6671, "::CLP::LogEntry::PrivateData::ClientManagerNotification_NotificationType_IsValid(value)");
    v36 = *(_DWORD *)(v33 + 28);
    *(_DWORD *)(v33 + 12) = v35;
    *(_DWORD *)(v33 + 28) = v36 | 6;
    v37 = *(_QWORD *)(v33 + 16);
    if (!v37)
      operator new();
    v38 = sub_1005F2520((int *)(a7 + 188));
    if (!sub_10002A324(v38))
      __assert_rtn("set_location_enabled", "CLPLocationController.pb.h", 6622, "::CLP::LogEntry::PrivateData::LocationServicesEnabled_IsValid(value)");
    *(_DWORD *)(v37 + 16) |= 1u;
    *(_DWORD *)(v37 + 8) = v38;
    v39 = sub_1005EF67C(a1, (uint64_t)v75);
    if (*(_BYTE *)(a1 + 8))
    {
      v40 = v39;
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v41 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        sub_10142E09C((int *)a2, v66);
        if (SBYTE3(v68) >= 0)
          v42 = v66;
        else
          v42 = *(_BYTE **)v66;
        LODWORD(v58[0]) = a3->i32[0];
        sub_10142E364((int *)v58, v63);
        if (v64 >= 0)
          v43 = v63;
        else
          v43 = (void **)v63[0];
        v60 = *a4;
        v44 = __p;
        sub_10142E364(&v60, __p);
        if (v62 < 0)
          v44 = (void **)__p[0];
        v45 = *a6;
        v46 = sub_100B303DC();
        v47 = sub_100B309E0(v46);
        LODWORD(buf) = 67110402;
        HIDWORD(buf) = v40;
        v80 = 2080;
        v81 = v42;
        v82 = 2080;
        v83 = v43;
        v84 = 2080;
        v85 = v44;
        v86 = 1024;
        v87 = v45;
        v88 = 2050;
        v89 = v47;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLClientManager_Type,success,%d,message_type,%s,from,%s,to,%s,notification_type,%d,propagation_us,%{public}.3f", (uint8_t *)&buf, 0x36u);
        if (v62 < 0)
          operator delete(__p[0]);
        if (v64 < 0)
          operator delete(v63[0]);
        if (SBYTE3(v68) < 0)
          operator delete(*(void **)v66);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102147FA8);
        v48 = qword_1022A0028;
        sub_10142E09C((int *)a2, v63);
        if (v64 >= 0)
          v49 = v63;
        else
          v49 = (void **)v63[0];
        v60 = a3->i32[0];
        v50 = __p;
        sub_10142E364(&v60, __p);
        if (v62 < 0)
          v50 = (void **)__p[0];
        HIDWORD(v57) = *a4;
        sub_10142E364((int *)&v57 + 1, v58);
        if (v59 >= 0)
          v51 = v58;
        else
          v51 = (void **)v58[0];
        v52 = *a6;
        v53 = sub_100B303DC();
        v54 = sub_100B309E0(v53);
        *(_DWORD *)v66 = 67110402;
        *(_DWORD *)&v66[4] = v40;
        *(_WORD *)&v66[8] = 2080;
        *(_QWORD *)&v66[10] = v49;
        v67 = 2080;
        v68 = v50;
        v69 = 2080;
        v70 = v51;
        v71 = 1024;
        v72 = v52;
        v73 = 2050;
        v74 = v54;
        LODWORD(v57) = 54;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v48, 2, "#locctl,#rec,recordMessage,CLClientManager_Type,success,%d,message_type,%s,from,%s,to,%s,notification_type,%d,propagation_us,%{public}.3f", v66, v57);
        v56 = v55;
        if (v59 < 0)
          operator delete(v58[0]);
        if (v62 < 0)
          operator delete(__p[0]);
        if (v64 < 0)
          operator delete(v63[0]);
        sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v56);
        if (v56 != (char *)&buf)
          free(v56);
      }
    }
    sub_100166004(v75);
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102147FA8);
    v21 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      sub_10142E09C((int *)a2, &buf);
      v22 = SBYTE3(v83) >= 0 ? &buf : (void **)buf;
      *(_DWORD *)v75 = 136315138;
      *(_QWORD *)&v75[4] = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLClientManager_Type,unsupported message type,%s", v75, 0xCu);
      if (SBYTE3(v83) < 0)
        operator delete(buf);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v23 = qword_1022A0028;
      sub_10142E09C((int *)a2, v75);
      if (v76 >= 0)
        v24 = v75;
      else
        v24 = *(uint8_t **)v75;
      *(_DWORD *)v66 = 136315138;
      *(_QWORD *)&v66[4] = v24;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v23, 2, "#locctl,#rec,recordMessage,CLClientManager_Type,unsupported message type,%s", v66);
      v20 = v25;
      if (v76 < 0)
        operator delete(*(void **)v75);
      sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", (const char *)v20);
      if (v20 != &buf)
        goto LABEL_54;
    }
  }
}

void sub_1005F2224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  sub_100166004(&a45);
  _Unwind_Resume(a1);
}

uint64_t sub_1005F234C(int *a1)
{
  uint64_t result;
  NSObject *v3;
  int v4;
  int v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  if (!*a1)
    return 1;
  if (*a1 == 4)
    return 2;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102147FA8);
  v3 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v4 = *a1;
    *(_DWORD *)buf = 67109120;
    v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#locctl,#rec,convertClientManagerNotificationTypeToProtobuf,unhandled type,%d", buf, 8u);
  }
  result = sub_1001BFF7C(115, 2);
  if ((_DWORD)result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102147FA8);
    v5 = *a1;
    v8[0] = 67109120;
    v8[1] = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#locctl,#rec,convertClientManagerNotificationTypeToProtobuf,unhandled type,%d", v8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "static CLP::LogEntry::PrivateData::ClientManagerNotification_NotificationType CLLocationControllerRecorder::convertClientManagerNotificationTypeToProtobuf(const CLClientManager_Type::Notification &)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
    return 0;
  }
  return result;
}

uint64_t sub_1005F2520(int *a1)
{
  uint64_t result;
  NSObject *v3;
  int v4;
  int v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  if (*a1 < 3)
    return (*a1 + 1);
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102147FA8);
  v3 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v4 = *a1;
    *(_DWORD *)buf = 67109120;
    v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#locctl,#rec,convertLocationServicesEnabledTypeToProtobuf,unhandled type,%d", buf, 8u);
  }
  result = sub_1001BFF7C(115, 2);
  if ((_DWORD)result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102147FA8);
    v5 = *a1;
    v8[0] = 67109120;
    v8[1] = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#locctl,#rec,convertLocationServicesEnabledTypeToProtobuf,unhandled type,%d", v8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "static CLP::LogEntry::PrivateData::LocationServicesEnabled CLLocationControllerRecorder::convertLocationServicesEnabledTypeToProtobuf(const CLCommonLocationServicesEnabled &)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
    return 0;
  }
  return result;
}

void sub_1005F26E8(uint64_t a1, unsigned int *a2, int32x4_t *a3, int *a4, int *a5, int *a6, char *a7)
{
  NSObject *v10;
  BOOL v11;
  int v12;
  BOOL v13;
  int v14;
  BOOL v15;
  _BOOL4 v16;
  BOOL v17;
  _BOOL4 v18;
  const char *v19;
  void **v20;
  NSObject *v21;
  void **v22;
  uint64_t v23;
  uint8_t *v24;
  void **v25;
  __n128 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  char v39;
  char v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  NSObject *v47;
  _BYTE *v48;
  void **v49;
  void **v50;
  int v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  void **v55;
  void **v56;
  void **v57;
  int v58;
  uint64_t v59;
  double v60;
  char *v61;
  char *v62;
  uint64_t v63;
  void *v64[2];
  char v65;
  int v66;
  void *__p[2];
  char v68;
  void *v69[2];
  char v70;
  __n128 v71[2];
  _BYTE v72[18];
  __int16 v73;
  void **v74;
  __int16 v75;
  void **v76;
  __int16 v77;
  int v78;
  __int16 v79;
  double v80;
  uint8_t v81[23];
  char v82;
  uint64_t v83;
  int v84;
  void *buf;
  __int16 v86;
  _BYTE *v87;
  __int16 v88;
  void **v89;
  __int16 v90;
  void **v91;
  __int16 v92;
  int v93;
  __int16 v94;
  double v95;

  if (!*(_QWORD *)(a1 + 16))
    return;
  if (*a2 == 4)
  {
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*a3))) & 1) != 0)
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v10 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        if (a3->i32[0])
          v11 = a3->i32[1] == 0;
        else
          v11 = 1;
        v12 = !v11;
        if (*a4)
          v13 = a4[1] == 0;
        else
          v13 = 1;
        v14 = !v13;
        LODWORD(buf) = 67109376;
        HIDWORD(buf) = v12;
        v86 = 1024;
        LODWORD(v87) = v14;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLWifiService_Type,silo entry invalid,from_valid,%d,to_valid,%d", (uint8_t *)&buf, 0xEu);
      }
      if (!sub_1001BFF7C(115, 2))
        return;
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v15 = !a3->i32[0] || a3->i32[1] == 0;
      v16 = !v15;
      v17 = !*a4 || a4[1] == 0;
      v18 = !v17;
      *(_DWORD *)v81 = 67109376;
      *(_DWORD *)&v81[4] = v16;
      *(_WORD *)&v81[8] = 1024;
      *(_DWORD *)&v81[10] = v18;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#locctl,#rec,recordMessage,CLWifiService_Type,silo entry invalid,from_valid,%d,to_valid,%d", v81, 14);
      v20 = (void **)v19;
      sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v19);
      if (v20 == &buf)
        return;
LABEL_54:
      free(v20);
      return;
    }
    sub_100166054(v81);
    v30 = (__n128 *)sub_100B303DC();
    sub_100B307F4(v30, v71);
    sub_1005EFF80((uint64_t)v81, a2, a3, a4, (uint64_t *)v71);
    v84 |= 2u;
    v31 = v83;
    if (!v83)
      operator new();
    *(_DWORD *)(v83 + 492) |= 0x800u;
    v32 = *(_QWORD *)(v31 + 352);
    if (!v32)
      operator new();
    *(_DWORD *)(v32 + 184) |= 0x80u;
    v33 = *(_QWORD *)(v32 + 56);
    if (!v33)
      operator new();
    v34 = *a5;
    *(_DWORD *)(v33 + 28) |= 1u;
    *(_DWORD *)(v33 + 8) = v34;
    v35 = sub_10137E34C(a6);
    if (!sub_10021E0B4(v35))
      __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 6961, "::CLP::LogEntry::PrivateData::WifiNotificationType_IsValid(value)");
    v36 = *(_DWORD *)(v33 + 28);
    *(_DWORD *)(v33 + 12) = v35;
    *(_DWORD *)(v33 + 28) = v36 | 6;
    v37 = *(_QWORD *)(v33 + 16);
    if (!v37)
      operator new();
    v38 = *a6;
    switch(*a6)
    {
      case 1:
        v41 = *a7;
        *(_DWORD *)(v37 + 36) |= 1u;
        *(_BYTE *)(v37 + 28) = v41;
        goto LABEL_74;
      case 3:
        v42 = sub_100247CC4(a7 + 1);
        sub_1005F31E4(v37, v42);
        v43 = sub_1005F3224(v37);
        sub_100009530((uint64_t)(a7 + 104), v43);
        v38 = *a6;
        goto LABEL_69;
      case 6:
        v40 = a7[138];
        *(_DWORD *)(v37 + 36) |= 0x40u;
        *(_BYTE *)(v37 + 31) = v40;
        goto LABEL_71;
      case 10:
      case 11:
        v39 = a7[137];
        *(_DWORD *)(v37 + 36) |= 0x20u;
        *(_BYTE *)(v37 + 30) = v39;
        goto LABEL_69;
      default:
LABEL_69:
        if (v38 <= 7 && ((1 << v38) & 0xC8) != 0)
        {
LABEL_71:
          *(_DWORD *)(v37 + 36) |= 4u;
          v44 = *(_QWORD *)(v37 + 8);
          if (!v44)
            operator new();
          sub_1002479E4((uint64_t)(a7 + 8), v44);
        }
LABEL_74:
        v45 = sub_1005EF67C(a1, (uint64_t)v81);
        if (*(_BYTE *)(a1 + 8))
        {
          v46 = v45;
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_102147FA8);
          v47 = qword_1022A0028;
          if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
          {
            sub_10142E09C((int *)a2, v72);
            if (SBYTE3(v74) >= 0)
              v48 = v72;
            else
              v48 = *(_BYTE **)v72;
            LODWORD(v64[0]) = a3->i32[0];
            sub_10142E364((int *)v64, v69);
            if (v70 >= 0)
              v49 = v69;
            else
              v49 = (void **)v69[0];
            v66 = *a4;
            v50 = __p;
            sub_10142E364(&v66, __p);
            if (v68 < 0)
              v50 = (void **)__p[0];
            v51 = *a6;
            v52 = sub_100B303DC();
            v53 = sub_100B309E0(v52);
            LODWORD(buf) = 67110402;
            HIDWORD(buf) = v46;
            v86 = 2080;
            v87 = v48;
            v88 = 2080;
            v89 = v49;
            v90 = 2080;
            v91 = v50;
            v92 = 1024;
            v93 = v51;
            v94 = 2050;
            v95 = v53;
            _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLWifiService_Type,success,%d,message_type,%s,from,%s,to,%s,notification_type,%d,propagation_us,%{public}.3f", (uint8_t *)&buf, 0x36u);
            if (v68 < 0)
              operator delete(__p[0]);
            if (v70 < 0)
              operator delete(v69[0]);
            if (SBYTE3(v74) < 0)
              operator delete(*(void **)v72);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_102147FA8);
            v54 = qword_1022A0028;
            sub_10142E09C((int *)a2, v69);
            if (v70 >= 0)
              v55 = v69;
            else
              v55 = (void **)v69[0];
            v66 = a3->i32[0];
            v56 = __p;
            sub_10142E364(&v66, __p);
            if (v68 < 0)
              v56 = (void **)__p[0];
            HIDWORD(v63) = *a4;
            sub_10142E364((int *)&v63 + 1, v64);
            if (v65 >= 0)
              v57 = v64;
            else
              v57 = (void **)v64[0];
            v58 = *a6;
            v59 = sub_100B303DC();
            v60 = sub_100B309E0(v59);
            *(_DWORD *)v72 = 67110402;
            *(_DWORD *)&v72[4] = v46;
            *(_WORD *)&v72[8] = 2080;
            *(_QWORD *)&v72[10] = v55;
            v73 = 2080;
            v74 = v56;
            v75 = 2080;
            v76 = v57;
            v77 = 1024;
            v78 = v58;
            v79 = 2050;
            v80 = v60;
            LODWORD(v63) = 54;
            _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v54, 2, "#locctl,#rec,recordMessage,CLWifiService_Type,success,%d,message_type,%s,from,%s,to,%s,notification_type,%d,propagation_us,%{public}.3f", v72, v63);
            v62 = v61;
            if (v65 < 0)
              operator delete(v64[0]);
            if (v68 < 0)
              operator delete(__p[0]);
            if (v70 < 0)
              operator delete(v69[0]);
            sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v62);
            if (v62 != (char *)&buf)
              free(v62);
          }
        }
        sub_100166004(v81);
        break;
    }
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102147FA8);
    v21 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      sub_10142E09C((int *)a2, &buf);
      v22 = SBYTE3(v89) >= 0 ? &buf : (void **)buf;
      *(_DWORD *)v81 = 136315138;
      *(_QWORD *)&v81[4] = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLWifiService_Type,unsupported message type,%s", v81, 0xCu);
      if (SBYTE3(v89) < 0)
        operator delete(buf);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v23 = qword_1022A0028;
      sub_10142E09C((int *)a2, v81);
      if (v82 >= 0)
        v24 = v81;
      else
        v24 = *(uint8_t **)v81;
      *(_DWORD *)v72 = 136315138;
      *(_QWORD *)&v72[4] = v24;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v23, 2, "#locctl,#rec,recordMessage,CLWifiService_Type,unsupported message type,%s", v72);
      v20 = v25;
      if (v82 < 0)
        operator delete(*(void **)v81);
      sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", (const char *)v20);
      if (v20 != &buf)
        goto LABEL_54;
    }
  }
}

void sub_1005F3084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  sub_100166004(&a45);
  _Unwind_Resume(a1);
}

BOOL sub_1005F31E4(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;

  result = sub_10021E0B4(a2);
  if (!result)
    sub_1019019E0();
  *(_DWORD *)(a1 + 36) |= 2u;
  *(_DWORD *)(a1 + 24) = a2;
  return result;
}

uint64_t sub_1005F3224(uint64_t a1)
{
  *(_DWORD *)(a1 + 36) |= 8u;
  if (!*(_QWORD *)(a1 + 16))
    operator new();
  return *(_QWORD *)(a1 + 16);
}

void sub_1005F327C()
{
  operator delete();
}

void sub_1005F32A0(uint64_t a1, unsigned int *a2, int32x4_t *a3, int *a4, int *a5, int *a6, int *a7)
{
  NSObject *v10;
  BOOL v11;
  int v12;
  BOOL v13;
  int v14;
  BOOL v15;
  _BOOL4 v16;
  BOOL v17;
  _BOOL4 v18;
  const char *v19;
  void **v20;
  NSObject *v21;
  void **v22;
  uint64_t v23;
  uint8_t *v24;
  void **v25;
  __n128 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  int v40;
  NSObject *v41;
  _BYTE *v42;
  void **v43;
  void **v44;
  int v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  void **v49;
  void **v50;
  void **v51;
  int v52;
  uint64_t v53;
  double v54;
  char *v55;
  char *v56;
  uint64_t v57;
  void *v58[2];
  char v59;
  int v60;
  void *__p[2];
  char v62;
  void *v63[2];
  char v64;
  __n128 v65[2];
  _BYTE v66[18];
  __int16 v67;
  void **v68;
  __int16 v69;
  void **v70;
  __int16 v71;
  int v72;
  __int16 v73;
  double v74;
  uint8_t v75[23];
  char v76;
  uint64_t v77;
  int v78;
  void *buf;
  __int16 v80;
  _BYTE *v81;
  __int16 v82;
  void **v83;
  __int16 v84;
  void **v85;
  __int16 v86;
  int v87;
  __int16 v88;
  double v89;

  if (!*(_QWORD *)(a1 + 16))
    return;
  if (*a2 == 4)
  {
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*a3))) & 1) != 0)
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v10 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        if (a3->i32[0])
          v11 = a3->i32[1] == 0;
        else
          v11 = 1;
        v12 = !v11;
        if (*a4)
          v13 = a4[1] == 0;
        else
          v13 = 1;
        v14 = !v13;
        LODWORD(buf) = 67109376;
        HIDWORD(buf) = v12;
        v80 = 1024;
        LODWORD(v81) = v14;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLDataProtectionManager_Type,silo entry invalid,from_valid,%d,to_valid,%d", (uint8_t *)&buf, 0xEu);
      }
      if (!sub_1001BFF7C(115, 2))
        return;
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v15 = !a3->i32[0] || a3->i32[1] == 0;
      v16 = !v15;
      v17 = !*a4 || a4[1] == 0;
      v18 = !v17;
      *(_DWORD *)v75 = 67109376;
      *(_DWORD *)&v75[4] = v16;
      *(_WORD *)&v75[8] = 1024;
      *(_DWORD *)&v75[10] = v18;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#locctl,#rec,recordMessage,CLDataProtectionManager_Type,silo entry invalid,from_valid,%d,to_valid,%d", v75, 14);
      v20 = (void **)v19;
      sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)", "%s\n", v19);
      if (v20 == &buf)
        return;
LABEL_54:
      free(v20);
      return;
    }
    sub_100166054(v75);
    v30 = (__n128 *)sub_100B303DC();
    sub_100B307F4(v30, v65);
    sub_1005EFF80((uint64_t)v75, a2, a3, a4, (uint64_t *)v65);
    v78 |= 2u;
    v31 = v77;
    if (!v77)
      operator new();
    *(_DWORD *)(v77 + 492) |= 0x800u;
    v32 = *(_QWORD *)(v31 + 352);
    if (!v32)
      operator new();
    *(_DWORD *)(v32 + 184) |= 0x100u;
    v33 = *(_QWORD *)(v32 + 64);
    if (!v33)
      operator new();
    v34 = *a5;
    *(_DWORD *)(v33 + 28) |= 1u;
    *(_DWORD *)(v33 + 8) = v34;
    v35 = sub_1005F3CB0(a6);
    if (!sub_1002BC6D0(v35))
      __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 7079, "::CLP::LogEntry::PrivateData::DataProtectionManagerNotification_NotificationType_IsValid(value)");
    v36 = *(_DWORD *)(v33 + 28);
    *(_DWORD *)(v33 + 12) = v35;
    *(_DWORD *)(v33 + 28) = v36 | 6;
    v37 = *(_QWORD *)(v33 + 16);
    if (!v37)
      operator new();
    v38 = sub_1005F3E70(a7);
    if (!sub_10008D1F0(v38))
      __assert_rtn("set_availability", "CLPLocationController.pb.h", 7030, "::CLP::LogEntry::PrivateData::DataAvailability_IsValid(value)");
    *(_DWORD *)(v37 + 16) |= 1u;
    *(_DWORD *)(v37 + 8) = v38;
    v39 = sub_1005EF67C(a1, (uint64_t)v75);
    if (*(_BYTE *)(a1 + 8))
    {
      v40 = v39;
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v41 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        sub_10142E09C((int *)a2, v66);
        if (SBYTE3(v68) >= 0)
          v42 = v66;
        else
          v42 = *(_BYTE **)v66;
        LODWORD(v58[0]) = a3->i32[0];
        sub_10142E364((int *)v58, v63);
        if (v64 >= 0)
          v43 = v63;
        else
          v43 = (void **)v63[0];
        v60 = *a4;
        v44 = __p;
        sub_10142E364(&v60, __p);
        if (v62 < 0)
          v44 = (void **)__p[0];
        v45 = *a6;
        v46 = sub_100B303DC();
        v47 = sub_100B309E0(v46);
        LODWORD(buf) = 67110402;
        HIDWORD(buf) = v40;
        v80 = 2080;
        v81 = v42;
        v82 = 2080;
        v83 = v43;
        v84 = 2080;
        v85 = v44;
        v86 = 1024;
        v87 = v45;
        v88 = 2050;
        v89 = v47;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLDataProtectionManager_Type,success,%d,message_type,%s,from,%s,to,%s,notification_type,%d,propagation_us,%{public}.3f", (uint8_t *)&buf, 0x36u);
        if (v62 < 0)
          operator delete(__p[0]);
        if (v64 < 0)
          operator delete(v63[0]);
        if (SBYTE3(v68) < 0)
          operator delete(*(void **)v66);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102147FA8);
        v48 = qword_1022A0028;
        sub_10142E09C((int *)a2, v63);
        if (v64 >= 0)
          v49 = v63;
        else
          v49 = (void **)v63[0];
        v60 = a3->i32[0];
        v50 = __p;
        sub_10142E364(&v60, __p);
        if (v62 < 0)
          v50 = (void **)__p[0];
        HIDWORD(v57) = *a4;
        sub_10142E364((int *)&v57 + 1, v58);
        if (v59 >= 0)
          v51 = v58;
        else
          v51 = (void **)v58[0];
        v52 = *a6;
        v53 = sub_100B303DC();
        v54 = sub_100B309E0(v53);
        *(_DWORD *)v66 = 67110402;
        *(_DWORD *)&v66[4] = v40;
        *(_WORD *)&v66[8] = 2080;
        *(_QWORD *)&v66[10] = v49;
        v67 = 2080;
        v68 = v50;
        v69 = 2080;
        v70 = v51;
        v71 = 1024;
        v72 = v52;
        v73 = 2050;
        v74 = v54;
        LODWORD(v57) = 54;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v48, 2, "#locctl,#rec,recordMessage,CLDataProtectionManager_Type,success,%d,message_type,%s,from,%s,to,%s,notification_type,%d,propagation_us,%{public}.3f", v66, v57);
        v56 = v55;
        if (v59 < 0)
          operator delete(v58[0]);
        if (v62 < 0)
          operator delete(__p[0]);
        if (v64 < 0)
          operator delete(v63[0]);
        sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)", "%s\n", v56);
        if (v56 != (char *)&buf)
          free(v56);
      }
    }
    sub_100166004(v75);
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102147FA8);
    v21 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      sub_10142E09C((int *)a2, &buf);
      v22 = SBYTE3(v83) >= 0 ? &buf : (void **)buf;
      *(_DWORD *)v75 = 136315138;
      *(_QWORD *)&v75[4] = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLDataProtectionManager_Type,unsupported message type,%s", v75, 0xCu);
      if (SBYTE3(v83) < 0)
        operator delete(buf);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v23 = qword_1022A0028;
      sub_10142E09C((int *)a2, v75);
      if (v76 >= 0)
        v24 = v75;
      else
        v24 = *(uint8_t **)v75;
      *(_DWORD *)v66 = 136315138;
      *(_QWORD *)&v66[4] = v24;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v23, 2, "#locctl,#rec,recordMessage,CLDataProtectionManager_Type,unsupported message type,%s", v66);
      v20 = v25;
      if (v76 < 0)
        operator delete(*(void **)v75);
      sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)", "%s\n", (const char *)v20);
      if (v20 != &buf)
        goto LABEL_54;
    }
  }
}

void sub_1005F3B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  sub_100166004(&a45);
  _Unwind_Resume(a1);
}

BOOL sub_1005F3CB0(int *a1)
{
  NSObject *v2;
  int v3;
  _BOOL8 result;
  int v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  if (!*a1)
    return 1;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102147FA8);
  v2 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v3 = *a1;
    *(_DWORD *)buf = 67109120;
    v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#locctl,#rec,convertDataProtectionManagerNotificationTypeToProtobuf,unhandled type,%d", buf, 8u);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102147FA8);
    v5 = *a1;
    v8[0] = 67109120;
    v8[1] = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#locctl,#rec,convertDataProtectionManagerNotificationTypeToProtobuf,unhandled type,%d", v8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "static CLP::LogEntry::PrivateData::DataProtectionManagerNotification_NotificationType CLLocationControllerRecorder::convertDataProtectionManagerNotificationTypeToProtobuf(const CLDataProtectionManager_Type::Notification &)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
    return 0;
  }
  return result;
}

uint64_t sub_1005F3E70(int *a1)
{
  uint64_t result;
  NSObject *v3;
  int v4;
  int v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  if (!*a1)
    return 1;
  if (*a1 == 1)
    return 2;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102147FA8);
  v3 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v4 = *a1;
    *(_DWORD *)buf = 67109120;
    v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#locctl,#rec,convertDataAvailabilityTypeToProtobuf,unhandled type,%d", buf, 8u);
  }
  result = sub_1001BFF7C(115, 2);
  if ((_DWORD)result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102147FA8);
    v5 = *a1;
    v8[0] = 67109120;
    v8[1] = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#locctl,#rec,convertDataAvailabilityTypeToProtobuf,unhandled type,%d", v8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "static CLP::LogEntry::PrivateData::DataAvailability CLLocationControllerRecorder::convertDataAvailabilityTypeToProtobuf(const CLDataProtectionManager_Type::DataAvailability &)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
    return 0;
  }
  return result;
}

void sub_1005F4044(uint64_t a1, unsigned int *a2, int32x4_t *a3, int *a4, int *a5, int *a6, uint64_t a7)
{
  NSObject *v10;
  BOOL v11;
  int v12;
  BOOL v13;
  int v14;
  BOOL v15;
  _BOOL4 v16;
  BOOL v17;
  _BOOL4 v18;
  const char *v19;
  void **v20;
  NSObject *v21;
  void **v22;
  uint64_t v23;
  uint8_t *v24;
  void **v25;
  __n128 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  char v38;
  int v39;
  int v40;
  NSObject *v41;
  _BYTE *v42;
  void **v43;
  void **v44;
  int v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  void **v49;
  void **v50;
  void **v51;
  int v52;
  uint64_t v53;
  double v54;
  char *v55;
  char *v56;
  uint64_t v57;
  void *v58[2];
  char v59;
  int v60;
  void *__p[2];
  char v62;
  void *v63[2];
  char v64;
  __n128 v65[2];
  _BYTE v66[18];
  __int16 v67;
  void **v68;
  __int16 v69;
  void **v70;
  __int16 v71;
  int v72;
  __int16 v73;
  double v74;
  uint8_t v75[23];
  char v76;
  uint64_t v77;
  int v78;
  void *buf;
  __int16 v80;
  _BYTE *v81;
  __int16 v82;
  void **v83;
  __int16 v84;
  void **v85;
  __int16 v86;
  int v87;
  __int16 v88;
  double v89;

  if (!*(_QWORD *)(a1 + 16))
    return;
  if (*a2 == 4)
  {
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*a3))) & 1) != 0)
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v10 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        if (a3->i32[0])
          v11 = a3->i32[1] == 0;
        else
          v11 = 1;
        v12 = !v11;
        if (*a4)
          v13 = a4[1] == 0;
        else
          v13 = 1;
        v14 = !v13;
        LODWORD(buf) = 67109376;
        HIDWORD(buf) = v12;
        v80 = 1024;
        LODWORD(v81) = v14;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLBluetoothService_Type,silo entry invalid,from_valid,%d,to_valid,%d", (uint8_t *)&buf, 0xEu);
      }
      if (!sub_1001BFF7C(115, 2))
        return;
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v15 = !a3->i32[0] || a3->i32[1] == 0;
      v16 = !v15;
      v17 = !*a4 || a4[1] == 0;
      v18 = !v17;
      *(_DWORD *)v75 = 67109376;
      *(_DWORD *)&v75[4] = v16;
      *(_WORD *)&v75[8] = 1024;
      *(_DWORD *)&v75[10] = v18;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#locctl,#rec,recordMessage,CLBluetoothService_Type,silo entry invalid,from_valid,%d,to_valid,%d", v75, 14);
      v20 = (void **)v19;
      sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLBluetoothService_Type::Notification &, const CLBluetoothService_Type::NotificationData &)", "%s\n", v19);
      if (v20 == &buf)
        return;
LABEL_54:
      free(v20);
      return;
    }
    sub_100166054(v75);
    v30 = (__n128 *)sub_100B303DC();
    sub_100B307F4(v30, v65);
    sub_1005EFF80((uint64_t)v75, a2, a3, a4, (uint64_t *)v65);
    v78 |= 2u;
    v31 = v77;
    if (!v77)
      operator new();
    *(_DWORD *)(v77 + 492) |= 0x800u;
    v32 = *(_QWORD *)(v31 + 352);
    if (!v32)
      operator new();
    *(_DWORD *)(v32 + 184) |= 0x200u;
    v33 = *(_QWORD *)(v32 + 72);
    if (!v33)
      operator new();
    v34 = *a5;
    *(_DWORD *)(v33 + 28) |= 1u;
    *(_DWORD *)(v33 + 8) = v34;
    v35 = sub_10138156C(a6);
    if (!sub_10002A324(v35))
      __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 7196, "::CLP::LogEntry::PrivateData::BluetoothServiceNotification_NotificationType_IsValid(value)");
    v36 = *(_DWORD *)(v33 + 28);
    *(_DWORD *)(v33 + 12) = v35;
    *(_DWORD *)(v33 + 28) = v36 | 6;
    v37 = *(_QWORD *)(v33 + 16);
    if (!v37)
      operator new();
    v38 = *(_BYTE *)(a7 + 113);
    *(_DWORD *)(v37 + 16) |= 1u;
    *(_BYTE *)(v37 + 8) = v38;
    v39 = sub_1005EF67C(a1, (uint64_t)v75);
    if (*(_BYTE *)(a1 + 8))
    {
      v40 = v39;
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v41 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        sub_10142E09C((int *)a2, v66);
        if (SBYTE3(v68) >= 0)
          v42 = v66;
        else
          v42 = *(_BYTE **)v66;
        LODWORD(v58[0]) = a3->i32[0];
        sub_10142E364((int *)v58, v63);
        if (v64 >= 0)
          v43 = v63;
        else
          v43 = (void **)v63[0];
        v60 = *a4;
        v44 = __p;
        sub_10142E364(&v60, __p);
        if (v62 < 0)
          v44 = (void **)__p[0];
        v45 = *a6;
        v46 = sub_100B303DC();
        v47 = sub_100B309E0(v46);
        LODWORD(buf) = 67110402;
        HIDWORD(buf) = v40;
        v80 = 2080;
        v81 = v42;
        v82 = 2080;
        v83 = v43;
        v84 = 2080;
        v85 = v44;
        v86 = 1024;
        v87 = v45;
        v88 = 2050;
        v89 = v47;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLBluetoothService_Type,success,%d,message_type,%s,from,%s,to,%s,notification_type,%d,propagation_us,%{public}.3f", (uint8_t *)&buf, 0x36u);
        if (v62 < 0)
          operator delete(__p[0]);
        if (v64 < 0)
          operator delete(v63[0]);
        if (SBYTE3(v68) < 0)
          operator delete(*(void **)v66);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102147FA8);
        v48 = qword_1022A0028;
        sub_10142E09C((int *)a2, v63);
        if (v64 >= 0)
          v49 = v63;
        else
          v49 = (void **)v63[0];
        v60 = a3->i32[0];
        v50 = __p;
        sub_10142E364(&v60, __p);
        if (v62 < 0)
          v50 = (void **)__p[0];
        HIDWORD(v57) = *a4;
        sub_10142E364((int *)&v57 + 1, v58);
        if (v59 >= 0)
          v51 = v58;
        else
          v51 = (void **)v58[0];
        v52 = *a6;
        v53 = sub_100B303DC();
        v54 = sub_100B309E0(v53);
        *(_DWORD *)v66 = 67110402;
        *(_DWORD *)&v66[4] = v40;
        *(_WORD *)&v66[8] = 2080;
        *(_QWORD *)&v66[10] = v49;
        v67 = 2080;
        v68 = v50;
        v69 = 2080;
        v70 = v51;
        v71 = 1024;
        v72 = v52;
        v73 = 2050;
        v74 = v54;
        LODWORD(v57) = 54;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v48, 2, "#locctl,#rec,recordMessage,CLBluetoothService_Type,success,%d,message_type,%s,from,%s,to,%s,notification_type,%d,propagation_us,%{public}.3f", v66, v57);
        v56 = v55;
        if (v59 < 0)
          operator delete(v58[0]);
        if (v62 < 0)
          operator delete(__p[0]);
        if (v64 < 0)
          operator delete(v63[0]);
        sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLBluetoothService_Type::Notification &, const CLBluetoothService_Type::NotificationData &)", "%s\n", v56);
        if (v56 != (char *)&buf)
          free(v56);
      }
    }
    sub_100166004(v75);
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102147FA8);
    v21 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      sub_10142E09C((int *)a2, &buf);
      v22 = SBYTE3(v83) >= 0 ? &buf : (void **)buf;
      *(_DWORD *)v75 = 136315138;
      *(_QWORD *)&v75[4] = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLBluetoothService_Type,unsupported message type,%s", v75, 0xCu);
      if (SBYTE3(v83) < 0)
        operator delete(buf);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v23 = qword_1022A0028;
      sub_10142E09C((int *)a2, v75);
      if (v76 >= 0)
        v24 = v75;
      else
        v24 = *(uint8_t **)v75;
      *(_DWORD *)v66 = 136315138;
      *(_QWORD *)&v66[4] = v24;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v23, 2, "#locctl,#rec,recordMessage,CLBluetoothService_Type,unsupported message type,%s", v66);
      v20 = v25;
      if (v76 < 0)
        operator delete(*(void **)v75);
      sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLBluetoothService_Type::Notification &, const CLBluetoothService_Type::NotificationData &)", "%s\n", (const char *)v20);
      if (v20 != &buf)
        goto LABEL_54;
    }
  }
}

void sub_1005F48F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  sub_100166004(&a45);
  _Unwind_Resume(a1);
}

void sub_1005F4A20(uint64_t a1, unsigned int *a2, int32x4_t *a3, int *a4, int *a5, int *a6, char *a7)
{
  NSObject *v10;
  BOOL v11;
  int v12;
  BOOL v13;
  int v14;
  BOOL v15;
  _BOOL4 v16;
  BOOL v17;
  _BOOL4 v18;
  const char *v19;
  void **v20;
  NSObject *v21;
  void **v22;
  uint64_t v23;
  uint8_t *v24;
  void **v25;
  __n128 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  char v38;
  int v39;
  int v40;
  NSObject *v41;
  _BYTE *v42;
  void **v43;
  void **v44;
  int v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  void **v49;
  void **v50;
  void **v51;
  int v52;
  uint64_t v53;
  double v54;
  char *v55;
  char *v56;
  NSObject *v57;
  int v58;
  int v59;
  const char *v60;
  int v61;
  int v62;
  void *v63[2];
  char v64;
  int v65;
  void *__p[2];
  char v67;
  void *v68[2];
  char v69;
  __n128 v70[2];
  _BYTE v71[18];
  __int16 v72;
  void **v73;
  __int16 v74;
  void **v75;
  __int16 v76;
  int v77;
  __int16 v78;
  double v79;
  uint8_t v80[23];
  char v81;
  uint64_t v82;
  int v83;
  void *buf;
  __int16 v85;
  _BYTE *v86;
  __int16 v87;
  void **v88;
  __int16 v89;
  void **v90;
  __int16 v91;
  int v92;
  __int16 v93;
  double v94;

  if (!*(_QWORD *)(a1 + 16))
    return;
  if (*a2 == 4)
  {
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*a3))) & 1) != 0)
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v10 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        if (a3->i32[0])
          v11 = a3->i32[1] == 0;
        else
          v11 = 1;
        v12 = !v11;
        if (*a4)
          v13 = a4[1] == 0;
        else
          v13 = 1;
        v14 = !v13;
        LODWORD(buf) = 67109376;
        HIDWORD(buf) = v12;
        v85 = 1024;
        LODWORD(v86) = v14;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLCompanionNotifier_Type,silo entry invalid,from_valid,%d,to_valid,%d", (uint8_t *)&buf, 0xEu);
      }
      if (!sub_1001BFF7C(115, 2))
        return;
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v15 = !a3->i32[0] || a3->i32[1] == 0;
      v16 = !v15;
      v17 = !*a4 || a4[1] == 0;
      v18 = !v17;
      *(_DWORD *)v80 = 67109376;
      *(_DWORD *)&v80[4] = v16;
      *(_WORD *)&v80[8] = 1024;
      *(_DWORD *)&v80[10] = v18;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#locctl,#rec,recordMessage,CLCompanionNotifier_Type,silo entry invalid,from_valid,%d,to_valid,%d", v80, 14);
      v20 = (void **)v19;
      sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)", "%s\n", v19);
      if (v20 == &buf)
        return;
LABEL_54:
      free(v20);
      return;
    }
    sub_100166054(v80);
    v30 = (__n128 *)sub_100B303DC();
    sub_100B307F4(v30, v70);
    sub_1005EFF80((uint64_t)v80, a2, a3, a4, (uint64_t *)v70);
    v83 |= 2u;
    v31 = v82;
    if (!v82)
      operator new();
    *(_DWORD *)(v82 + 492) |= 0x800u;
    v32 = *(_QWORD *)(v31 + 352);
    if (!v32)
      operator new();
    *(_DWORD *)(v32 + 184) |= 0x400u;
    v33 = *(_QWORD *)(v32 + 80);
    if (!v33)
      operator new();
    v34 = *a5;
    *(_DWORD *)(v33 + 28) |= 1u;
    *(_DWORD *)(v33 + 8) = v34;
    v35 = sub_10138173C(a6);
    if (!sub_1002BC6D0(v35))
      __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 7313, "::CLP::LogEntry::PrivateData::CompanionNotifierNotification_NotificationType_IsValid(value)");
    v36 = *(_DWORD *)(v33 + 28);
    *(_DWORD *)(v33 + 12) = v35;
    *(_DWORD *)(v33 + 28) = v36 | 6;
    v37 = *(_QWORD *)(v33 + 16);
    if (!v37)
      operator new();
    if (*a6 == 5)
    {
      v38 = *a7;
      *(_DWORD *)(v37 + 16) |= 1u;
      *(_BYTE *)(v37 + 8) = v38;
      v39 = sub_1005EF67C(a1, (uint64_t)v80);
      if (!*(_BYTE *)(a1 + 8))
        goto LABEL_106;
      v40 = v39;
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v41 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        sub_10142E09C((int *)a2, v71);
        if (SBYTE3(v73) >= 0)
          v42 = v71;
        else
          v42 = *(_BYTE **)v71;
        LODWORD(v63[0]) = a3->i32[0];
        sub_10142E364((int *)v63, v68);
        v61 = v40;
        if (v69 >= 0)
          v43 = v68;
        else
          v43 = (void **)v68[0];
        v65 = *a4;
        v44 = __p;
        sub_10142E364(&v65, __p);
        if (v67 < 0)
          v44 = (void **)__p[0];
        v45 = *a6;
        v46 = sub_100B303DC();
        v47 = sub_100B309E0(v46);
        LODWORD(buf) = 67110402;
        HIDWORD(buf) = v61;
        v85 = 2080;
        v86 = v42;
        v87 = 2080;
        v88 = v43;
        v89 = 2080;
        v90 = v44;
        v91 = 1024;
        v92 = v45;
        v93 = 2050;
        v94 = v47;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLCompanionNotifier_Type,success,%d,message_type,%s,from,%s,to,%s,notification_type,%d,propagation_us,%{public}.3f", (uint8_t *)&buf, 0x36u);
        if (v67 < 0)
          operator delete(__p[0]);
        if (v69 < 0)
          operator delete(v68[0]);
        v40 = v61;
        if (SBYTE3(v73) < 0)
          operator delete(*(void **)v71);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_106;
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v48 = qword_1022A0028;
      sub_10142E09C((int *)a2, v68);
      if (v69 >= 0)
        v49 = v68;
      else
        v49 = (void **)v68[0];
      v65 = a3->i32[0];
      v50 = __p;
      sub_10142E364(&v65, __p);
      if (v67 < 0)
        v50 = (void **)__p[0];
      v62 = *a4;
      v51 = v63;
      sub_10142E364(&v62, v63);
      if (v64 < 0)
        v51 = (void **)v63[0];
      v52 = *a6;
      v53 = sub_100B303DC();
      v54 = sub_100B309E0(v53);
      *(_DWORD *)v71 = 67110402;
      *(_DWORD *)&v71[4] = v40;
      *(_WORD *)&v71[8] = 2080;
      *(_QWORD *)&v71[10] = v49;
      v72 = 2080;
      v73 = v50;
      v74 = 2080;
      v75 = v51;
      v76 = 1024;
      v77 = v52;
      v78 = 2050;
      v79 = v54;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v48, 2, "#locctl,#rec,recordMessage,CLCompanionNotifier_Type,success,%d,message_type,%s,from,%s,to,%s,notification_type,%d,propagation_us,%{public}.3f", v71, 54);
      v56 = v55;
      if (v64 < 0)
        operator delete(v63[0]);
      if (v67 < 0)
        operator delete(__p[0]);
      if (v69 < 0)
        operator delete(v68[0]);
      sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)", "%s\n", v56);
      if (v56 == (char *)&buf)
        goto LABEL_106;
    }
    else
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v57 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        v58 = *a6;
        LODWORD(buf) = 67109120;
        HIDWORD(buf) = v58;
        _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLCompanionNotifier_Type,unsupported notification type,%d", (uint8_t *)&buf, 8u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_106;
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v59 = *a6;
      *(_DWORD *)v71 = 67109120;
      *(_DWORD *)&v71[4] = v59;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#locctl,#rec,recordMessage,CLCompanionNotifier_Type,unsupported notification type,%d", v71);
      v56 = (char *)v60;
      sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)", "%s\n", v60);
      if (v56 == (char *)&buf)
        goto LABEL_106;
    }
    free(v56);
LABEL_106:
    sub_100166004(v80);
    return;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102147FA8);
  v21 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    sub_10142E09C((int *)a2, &buf);
    v22 = SBYTE3(v88) >= 0 ? &buf : (void **)buf;
    *(_DWORD *)v80 = 136315138;
    *(_QWORD *)&v80[4] = v22;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLCompanionNotifier_Type,unsupported message type,%s", v80, 0xCu);
    if (SBYTE3(v88) < 0)
      operator delete(buf);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102147FA8);
    v23 = qword_1022A0028;
    sub_10142E09C((int *)a2, v80);
    if (v81 >= 0)
      v24 = v80;
    else
      v24 = *(uint8_t **)v80;
    *(_DWORD *)v71 = 136315138;
    *(_QWORD *)&v71[4] = v24;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v23, 2, "#locctl,#rec,recordMessage,CLCompanionNotifier_Type,unsupported message type,%s", v71);
    v20 = v25;
    if (v81 < 0)
      operator delete(*(void **)v80);
    sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)", "%s\n", (const char *)v20);
    if (v20 != &buf)
      goto LABEL_54;
  }
}

void sub_1005F5428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  sub_100166004(&a47);
  _Unwind_Resume(a1);
}

void sub_1005F5554(uint64_t a1, unsigned int *a2, int32x4_t *a3, int *a4, int *a5, int *a6, uint64_t a7)
{
  NSObject *v10;
  BOOL v11;
  int v12;
  BOOL v13;
  int v14;
  BOOL v15;
  _BOOL4 v16;
  BOOL v17;
  _BOOL4 v18;
  const char *v19;
  void **v20;
  NSObject *v21;
  void **v22;
  uint64_t v23;
  uint8_t *v24;
  void **v25;
  __n128 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  NSObject *v38;
  int v39;
  int v40;
  const char *v41;
  void **v42;
  uint64_t v43;
  int v44;
  int v45;
  NSObject *v46;
  _BYTE *v47;
  void **v48;
  void **v49;
  int v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  void **v54;
  void **v55;
  void **v56;
  int v57;
  uint64_t v58;
  double v59;
  void **v60;
  int v61;
  int v62;
  void *v63[2];
  char v64;
  int v65;
  void *__p[2];
  char v67;
  void *v68[2];
  char v69;
  __n128 v70[2];
  _BYTE v71[18];
  __int16 v72;
  void **v73;
  __int16 v74;
  void **v75;
  __int16 v76;
  int v77;
  __int16 v78;
  double v79;
  uint8_t v80[23];
  char v81;
  uint64_t v82;
  int v83;
  void *buf;
  __int16 v85;
  _BYTE *v86;
  __int16 v87;
  void **v88;
  __int16 v89;
  void **v90;
  __int16 v91;
  int v92;
  __int16 v93;
  double v94;

  if (!*(_QWORD *)(a1 + 16))
    return;
  if (*a2 == 4)
  {
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*a3))) & 1) != 0)
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v10 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        if (a3->i32[0])
          v11 = a3->i32[1] == 0;
        else
          v11 = 1;
        v12 = !v11;
        if (*a4)
          v13 = a4[1] == 0;
        else
          v13 = 1;
        v14 = !v13;
        LODWORD(buf) = 67109376;
        HIDWORD(buf) = v12;
        v85 = 1024;
        LODWORD(v86) = v14;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLMotionStateObserver_Type,silo entry invalid,from_valid,%d,to_valid,%d", (uint8_t *)&buf, 0xEu);
      }
      if (!sub_1001BFF7C(115, 2))
        return;
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v15 = !a3->i32[0] || a3->i32[1] == 0;
      v16 = !v15;
      v17 = !*a4 || a4[1] == 0;
      v18 = !v17;
      *(_DWORD *)v80 = 67109376;
      *(_DWORD *)&v80[4] = v16;
      *(_WORD *)&v80[8] = 1024;
      *(_DWORD *)&v80[10] = v18;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#locctl,#rec,recordMessage,CLMotionStateObserver_Type,silo entry invalid,from_valid,%d,to_valid,%d", v80, 14);
      v20 = (void **)v19;
      sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLMotionStateObserver_Type::Notification &, const CLMotionStateObserver_Type::NotificationData &)", "%s\n", v19);
      if (v20 == &buf)
        return;
LABEL_54:
      free(v20);
      return;
    }
    sub_100166054(v80);
    v30 = (__n128 *)sub_100B303DC();
    sub_100B307F4(v30, v70);
    sub_1005EFF80((uint64_t)v80, a2, a3, a4, (uint64_t *)v70);
    v83 |= 2u;
    v31 = v82;
    if (!v82)
      operator new();
    *(_DWORD *)(v82 + 492) |= 0x800u;
    v32 = *(_QWORD *)(v31 + 352);
    if (!v32)
      operator new();
    *(_DWORD *)(v32 + 184) |= 0x1000u;
    v33 = *(_QWORD *)(v32 + 96);
    if (!v33)
      operator new();
    v34 = *a5;
    *(_DWORD *)(v33 + 28) |= 1u;
    *(_DWORD *)(v33 + 8) = v34;
    v35 = sub_1005F60C0(a6);
    if (!sub_1002BC6D0(v35))
      __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 7587, "::CLP::LogEntry::PrivateData::MotionStateObserverNotification_NotificationType_IsValid(value)");
    v36 = *(_DWORD *)(v33 + 28);
    *(_DWORD *)(v33 + 12) = v35;
    *(_DWORD *)(v33 + 28) = v36 | 6;
    v37 = *(_QWORD *)(v33 + 16);
    if (!v37)
      operator new();
    if (*a6)
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v38 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        v39 = *a6;
        LODWORD(buf) = 67109120;
        HIDWORD(buf) = v39;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLMotionStateObserver_Type,unsupported notification type,%d", (uint8_t *)&buf, 8u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_95;
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v40 = *a6;
      *(_DWORD *)v71 = 67109120;
      *(_DWORD *)&v71[4] = v40;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#locctl,#rec,recordMessage,CLMotionStateObserver_Type,unsupported notification type,%d", v71);
      v42 = (void **)v41;
      sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLMotionStateObserver_Type::Notification &, const CLMotionStateObserver_Type::NotificationData &)", "%s\n", v41);
      if (v42 == &buf)
        goto LABEL_95;
    }
    else
    {
      *(_DWORD *)(v37 + 20) |= 1u;
      v43 = *(_QWORD *)(v37 + 8);
      if (!v43)
        operator new();
      sub_10137F6A4(a7, v43);
      v44 = sub_1005EF67C(a1, (uint64_t)v80);
      if (!*(_BYTE *)(a1 + 8))
        goto LABEL_95;
      v45 = v44;
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v46 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        sub_10142E09C((int *)a2, v71);
        if (SBYTE3(v73) >= 0)
          v47 = v71;
        else
          v47 = *(_BYTE **)v71;
        LODWORD(v63[0]) = a3->i32[0];
        sub_10142E364((int *)v63, v68);
        v61 = v45;
        if (v69 >= 0)
          v48 = v68;
        else
          v48 = (void **)v68[0];
        v65 = *a4;
        v49 = __p;
        sub_10142E364(&v65, __p);
        if (v67 < 0)
          v49 = (void **)__p[0];
        v50 = *a6;
        v51 = sub_100B303DC();
        v52 = sub_100B309E0(v51);
        LODWORD(buf) = 67110402;
        HIDWORD(buf) = v61;
        v85 = 2080;
        v86 = v47;
        v87 = 2080;
        v88 = v48;
        v89 = 2080;
        v90 = v49;
        v91 = 1024;
        v92 = v50;
        v93 = 2050;
        v94 = v52;
        _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLMotionStateObserver_Type,success,%d,message_type,%s,from,%s,to,%s,notification_type,%d,propagation_us,%{public}.3f", (uint8_t *)&buf, 0x36u);
        if (v67 < 0)
          operator delete(__p[0]);
        if (v69 < 0)
          operator delete(v68[0]);
        v45 = v61;
        if (SBYTE3(v73) < 0)
          operator delete(*(void **)v71);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_95;
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v53 = qword_1022A0028;
      sub_10142E09C((int *)a2, v68);
      if (v69 >= 0)
        v54 = v68;
      else
        v54 = (void **)v68[0];
      v65 = a3->i32[0];
      v55 = __p;
      sub_10142E364(&v65, __p);
      if (v67 < 0)
        v55 = (void **)__p[0];
      v62 = *a4;
      v56 = v63;
      sub_10142E364(&v62, v63);
      if (v64 < 0)
        v56 = (void **)v63[0];
      v57 = *a6;
      v58 = sub_100B303DC();
      v59 = sub_100B309E0(v58);
      *(_DWORD *)v71 = 67110402;
      *(_DWORD *)&v71[4] = v45;
      *(_WORD *)&v71[8] = 2080;
      *(_QWORD *)&v71[10] = v54;
      v72 = 2080;
      v73 = v55;
      v74 = 2080;
      v75 = v56;
      v76 = 1024;
      v77 = v57;
      v78 = 2050;
      v79 = v59;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v53, 2, "#locctl,#rec,recordMessage,CLMotionStateObserver_Type,success,%d,message_type,%s,from,%s,to,%s,notification_type,%d,propagation_us,%{public}.3f", v71, 54);
      v42 = v60;
      if (v64 < 0)
        operator delete(v63[0]);
      if (v67 < 0)
        operator delete(__p[0]);
      if (v69 < 0)
        operator delete(v68[0]);
      sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLMotionStateObserver_Type::Notification &, const CLMotionStateObserver_Type::NotificationData &)", "%s\n", (const char *)v42);
      if (v42 == &buf)
        goto LABEL_95;
    }
    free(v42);
LABEL_95:
    sub_100166004(v80);
    return;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102147FA8);
  v21 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    sub_10142E09C((int *)a2, &buf);
    v22 = SBYTE3(v88) >= 0 ? &buf : (void **)buf;
    *(_DWORD *)v80 = 136315138;
    *(_QWORD *)&v80[4] = v22;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLMotionStateObserver_Type,unsupported message type,%s", v80, 0xCu);
    if (SBYTE3(v88) < 0)
      operator delete(buf);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102147FA8);
    v23 = qword_1022A0028;
    sub_10142E09C((int *)a2, v80);
    if (v81 >= 0)
      v24 = v80;
    else
      v24 = *(uint8_t **)v80;
    *(_DWORD *)v71 = 136315138;
    *(_QWORD *)&v71[4] = v24;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v23, 2, "#locctl,#rec,recordMessage,CLMotionStateObserver_Type,unsupported message type,%s", v71);
    v20 = v25;
    if (v81 < 0)
      operator delete(*(void **)v80);
    sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLMotionStateObserver_Type::Notification &, const CLMotionStateObserver_Type::NotificationData &)", "%s\n", (const char *)v20);
    if (v20 != &buf)
      goto LABEL_54;
  }
}

void sub_1005F5F88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  sub_100166004(&a47);
  _Unwind_Resume(a1);
}

BOOL sub_1005F60C0(int *a1)
{
  NSObject *v2;
  int v3;
  _BOOL8 result;
  int v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  if (!*a1)
    return 1;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102147FA8);
  v2 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v3 = *a1;
    *(_DWORD *)buf = 67109120;
    v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#locctl,#rec,convertMotionStateObserverNotificationTypeToProtobuf,unhandled type,%d", buf, 8u);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102147FA8);
    v5 = *a1;
    v8[0] = 67109120;
    v8[1] = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#locctl,#rec,convertMotionStateObserverNotificationTypeToProtobuf,unhandled type,%d", v8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "static CLP::LogEntry::PrivateData::MotionStateObserverNotification_NotificationType CLLocationControllerRecorder::convertMotionStateObserverNotificationTypeToProtobuf(const CLMotionStateObserver_Type::Notification &)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
    return 0;
  }
  return result;
}

void sub_1005F6280(uint64_t a1, unsigned int *a2, int32x4_t *a3, int *a4, int *a5, int *a6, uint64_t a7)
{
  NSObject *v10;
  BOOL v11;
  int v12;
  BOOL v13;
  int v14;
  BOOL v15;
  _BOOL4 v16;
  BOOL v17;
  _BOOL4 v18;
  const char *v19;
  void **v20;
  NSObject *v21;
  void **v22;
  uint64_t v23;
  uint8_t *v24;
  void **v25;
  __n128 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  NSObject *v47;
  _BYTE *v48;
  void **v49;
  void **v50;
  int v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  void **v55;
  void **v56;
  void **v57;
  int v58;
  uint64_t v59;
  double v60;
  char *v61;
  char *v62;
  int v63;
  int v64;
  void *v65[2];
  char v66;
  int v67;
  void *__p[2];
  char v69;
  void *v70[2];
  char v71;
  __n128 v72[2];
  _BYTE v73[18];
  __int16 v74;
  void **v75;
  __int16 v76;
  void **v77;
  __int16 v78;
  int v79;
  __int16 v80;
  double v81;
  uint8_t v82[23];
  char v83;
  uint64_t v84;
  int v85;
  void *buf;
  __int16 v87;
  _BYTE *v88;
  __int16 v89;
  void **v90;
  __int16 v91;
  void **v92;
  __int16 v93;
  int v94;
  __int16 v95;
  double v96;

  if (!*(_QWORD *)(a1 + 16))
    return;
  if (*a2 == 4)
  {
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*a3))) & 1) != 0)
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v10 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        if (a3->i32[0])
          v11 = a3->i32[1] == 0;
        else
          v11 = 1;
        v12 = !v11;
        if (*a4)
          v13 = a4[1] == 0;
        else
          v13 = 1;
        v14 = !v13;
        LODWORD(buf) = 67109376;
        HIDWORD(buf) = v12;
        v87 = 1024;
        LODWORD(v88) = v14;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLMotionStateMediator_Type,silo entry invalid,from_valid,%d,to_valid,%d", (uint8_t *)&buf, 0xEu);
      }
      if (!sub_1001BFF7C(115, 2))
        return;
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v15 = !a3->i32[0] || a3->i32[1] == 0;
      v16 = !v15;
      v17 = !*a4 || a4[1] == 0;
      v18 = !v17;
      *(_DWORD *)v82 = 67109376;
      *(_DWORD *)&v82[4] = v16;
      *(_WORD *)&v82[8] = 1024;
      *(_DWORD *)&v82[10] = v18;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#locctl,#rec,recordMessage,CLMotionStateMediator_Type,silo entry invalid,from_valid,%d,to_valid,%d", v82, 14);
      v20 = (void **)v19;
      sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v19);
      if (v20 == &buf)
        return;
LABEL_54:
      free(v20);
      return;
    }
    sub_100166054(v82);
    v30 = (__n128 *)sub_100B303DC();
    sub_100B307F4(v30, v72);
    sub_1005EFF80((uint64_t)v82, a2, a3, a4, (uint64_t *)v72);
    v85 |= 2u;
    v31 = v84;
    if (!v84)
      operator new();
    *(_DWORD *)(v84 + 492) |= 0x800u;
    v32 = *(_QWORD *)(v31 + 352);
    if (!v32)
      operator new();
    *(_DWORD *)(v32 + 184) |= 0x100000u;
    v33 = *(_QWORD *)(v32 + 160);
    if (!v33)
      operator new();
    v34 = *a5;
    *(_DWORD *)(v33 + 28) |= 1u;
    *(_DWORD *)(v33 + 8) = v34;
    v35 = sub_1005F6CE8(a6);
    if (!sub_10008D1F0(v35))
      __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 9385, "::CLP::LogEntry::PrivateData::MotionStateMediatorNotification_NotificationType_IsValid(value)");
    v36 = *(_DWORD *)(v33 + 28);
    *(_DWORD *)(v33 + 12) = v35;
    *(_DWORD *)(v33 + 28) = v36 | 6;
    v37 = *(_QWORD *)(v33 + 16);
    if (!v37)
      operator new();
    switch(*a6)
    {
      case 0:
        v38 = sub_1005F6EB8(v37);
        v39 = *(_QWORD *)a7;
        *(_DWORD *)(v38 + 32) |= 1u;
        *(_QWORD *)(v38 + 8) = v39;
        v40 = sub_1005F6EB8(v37);
        v41 = *(_BYTE *)(a7 + 209);
        *(_DWORD *)(v40 + 32) |= 4u;
        *(_BYTE *)(v40 + 24) = v41;
        v42 = sub_1005F6EB8(v37);
        v43 = sub_1005F6F34(v42);
        sub_10137854C(a7 + 8, v43, *(_BYTE *)(a7 + 209));
        goto LABEL_67;
      case 1:
      case 3:
      case 4:
      case 5:
        goto LABEL_86;
      case 2:
        v44 = sub_1005F6FB0(v37);
        sub_10137E524(a7, v44);
        goto LABEL_67;
      default:
LABEL_67:
        v45 = sub_1005EF67C(a1, (uint64_t)v82);
        if (*(_BYTE *)(a1 + 8))
        {
          v46 = v45;
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_102147FA8);
          v47 = qword_1022A0028;
          if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
          {
            sub_10142E09C((int *)a2, v73);
            if (SBYTE3(v75) >= 0)
              v48 = v73;
            else
              v48 = *(_BYTE **)v73;
            LODWORD(v65[0]) = a3->i32[0];
            sub_10142E364((int *)v65, v70);
            v63 = v46;
            if (v71 >= 0)
              v49 = v70;
            else
              v49 = (void **)v70[0];
            v67 = *a4;
            v50 = __p;
            sub_10142E364(&v67, __p);
            if (v69 < 0)
              v50 = (void **)__p[0];
            v51 = *a6;
            v52 = sub_100B303DC();
            v53 = sub_100B309E0(v52);
            LODWORD(buf) = 67110402;
            HIDWORD(buf) = v63;
            v87 = 2080;
            v88 = v48;
            v89 = 2080;
            v90 = v49;
            v91 = 2080;
            v92 = v50;
            v93 = 1024;
            v94 = v51;
            v95 = 2050;
            v96 = v53;
            _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLMotionStateMediator_Type,success,%d,message_type,%s,from,%s,to,%s,notification_type,%d,propagation_us,%{public}.3f", (uint8_t *)&buf, 0x36u);
            if (v69 < 0)
              operator delete(__p[0]);
            if (v71 < 0)
              operator delete(v70[0]);
            v46 = v63;
            if (SBYTE3(v75) < 0)
              operator delete(*(void **)v73);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_102147FA8);
            v54 = qword_1022A0028;
            sub_10142E09C((int *)a2, v70);
            if (v71 >= 0)
              v55 = v70;
            else
              v55 = (void **)v70[0];
            v67 = a3->i32[0];
            v56 = __p;
            sub_10142E364(&v67, __p);
            if (v69 < 0)
              v56 = (void **)__p[0];
            v64 = *a4;
            sub_10142E364(&v64, v65);
            if (v66 >= 0)
              v57 = v65;
            else
              v57 = (void **)v65[0];
            v58 = *a6;
            v59 = sub_100B303DC();
            v60 = sub_100B309E0(v59);
            *(_DWORD *)v73 = 67110402;
            *(_DWORD *)&v73[4] = v46;
            *(_WORD *)&v73[8] = 2080;
            *(_QWORD *)&v73[10] = v55;
            v74 = 2080;
            v75 = v56;
            v76 = 2080;
            v77 = v57;
            v78 = 1024;
            v79 = v58;
            v80 = 2050;
            v81 = v60;
            _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v54, 2, "#locctl,#rec,recordMessage,CLMotionStateMediator_Type,success,%d,message_type,%s,from,%s,to,%s,notification_type,%d,propagation_us,%{public}.3f", v73, 54);
            v62 = v61;
            if (v66 < 0)
              operator delete(v65[0]);
            if (v69 < 0)
              operator delete(__p[0]);
            if (v71 < 0)
              operator delete(v70[0]);
            sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v62);
            if (v62 != (char *)&buf)
              free(v62);
          }
        }
LABEL_86:
        sub_100166004(v82);
        break;
    }
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102147FA8);
    v21 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      sub_10142E09C((int *)a2, &buf);
      v22 = SBYTE3(v90) >= 0 ? &buf : (void **)buf;
      *(_DWORD *)v82 = 136315138;
      *(_QWORD *)&v82[4] = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLMotionStateMediator_Type,unsupported message type,%s", v82, 0xCu);
      if (SBYTE3(v90) < 0)
        operator delete(buf);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v23 = qword_1022A0028;
      sub_10142E09C((int *)a2, v82);
      if (v83 >= 0)
        v24 = v82;
      else
        v24 = *(uint8_t **)v82;
      *(_DWORD *)v73 = 136315138;
      *(_QWORD *)&v73[4] = v24;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v23, 2, "#locctl,#rec,recordMessage,CLMotionStateMediator_Type,unsupported message type,%s", v73);
      v20 = v25;
      if (v83 < 0)
        operator delete(*(void **)v82);
      sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)", "%s\n", (const char *)v20);
      if (v20 != &buf)
        goto LABEL_54;
    }
  }
}

void sub_1005F6BB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  sub_100166004(&a47);
  _Unwind_Resume(a1);
}

uint64_t sub_1005F6CE8(int *a1)
{
  uint64_t v1;
  uint64_t result;
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  v1 = *a1;
  if (v1 < 6)
    return dword_101BB79B8[v1];
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102147FA8);
  v4 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v5 = *a1;
    *(_DWORD *)buf = 67109120;
    v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#locctl,#rec,convertMotionStateMediatorNotificationTypeToProtobuf,unhandled type,%d", buf, 8u);
  }
  result = sub_1001BFF7C(115, 2);
  if ((_DWORD)result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102147FA8);
    v6 = *a1;
    v9[0] = 67109120;
    v9[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#locctl,#rec,convertMotionStateMediatorNotificationTypeToProtobuf,unhandled type,%d", v9);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "static CLP::LogEntry::PrivateData::MotionStateMediatorNotification_NotificationType CLLocationControllerRecorder::convertMotionStateMediatorNotificationTypeToProtobuf(const CLMotionStateMediator_Type::Notification &)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
    return 0;
  }
  return result;
}

uint64_t sub_1005F6EB8(uint64_t a1)
{
  *(_DWORD *)(a1 + 28) |= 1u;
  if (!*(_QWORD *)(a1 + 8))
    operator new();
  return *(_QWORD *)(a1 + 8);
}

void sub_1005F6F10()
{
  operator delete();
}

uint64_t sub_1005F6F34(uint64_t a1)
{
  *(_DWORD *)(a1 + 32) |= 2u;
  if (!*(_QWORD *)(a1 + 16))
    operator new();
  return *(_QWORD *)(a1 + 16);
}

void sub_1005F6F8C()
{
  operator delete();
}

uint64_t sub_1005F6FB0(uint64_t a1)
{
  *(_DWORD *)(a1 + 28) |= 2u;
  if (!*(_QWORD *)(a1 + 16))
    operator new();
  return *(_QWORD *)(a1 + 16);
}

void sub_1005F7008()
{
  operator delete();
}

void sub_1005F702C(uint64_t a1, unsigned int *a2, int32x4_t *a3, int *a4, int *a5, int *a6, uint64_t a7)
{
  NSObject *v10;
  BOOL v11;
  int v12;
  BOOL v13;
  int v14;
  BOOL v15;
  _BOOL4 v16;
  BOOL v17;
  _BOOL4 v18;
  const char *v19;
  void **v20;
  NSObject *v21;
  void **v22;
  uint64_t v23;
  uint8_t *v24;
  void **v25;
  __n128 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  NSObject *v42;
  _BYTE *v43;
  void **v44;
  void **v45;
  int v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  void **v50;
  void **v51;
  void **v52;
  int v53;
  uint64_t v54;
  double v55;
  char *v56;
  char *v57;
  int v58;
  int v59;
  void *v60[2];
  char v61;
  int v62;
  void *__p[2];
  char v64;
  void *v65[2];
  char v66;
  __n128 v67[2];
  _BYTE v68[18];
  __int16 v69;
  void **v70;
  __int16 v71;
  void **v72;
  __int16 v73;
  int v74;
  __int16 v75;
  double v76;
  uint8_t v77[23];
  char v78;
  uint64_t v79;
  int v80;
  void *buf;
  __int16 v82;
  _BYTE *v83;
  __int16 v84;
  void **v85;
  __int16 v86;
  void **v87;
  __int16 v88;
  int v89;
  __int16 v90;
  double v91;

  if (!*(_QWORD *)(a1 + 16))
    return;
  if (*a2 == 4)
  {
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*a3))) & 1) != 0)
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v10 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        if (a3->i32[0])
          v11 = a3->i32[1] == 0;
        else
          v11 = 1;
        v12 = !v11;
        if (*a4)
          v13 = a4[1] == 0;
        else
          v13 = 1;
        v14 = !v13;
        LODWORD(buf) = 67109376;
        HIDWORD(buf) = v12;
        v82 = 1024;
        LODWORD(v83) = v14;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLMotionState_Type,silo entry invalid,from_valid,%d,to_valid,%d", (uint8_t *)&buf, 0xEu);
      }
      if (!sub_1001BFF7C(115, 2))
        return;
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v15 = !a3->i32[0] || a3->i32[1] == 0;
      v16 = !v15;
      v17 = !*a4 || a4[1] == 0;
      v18 = !v17;
      *(_DWORD *)v77 = 67109376;
      *(_DWORD *)&v77[4] = v16;
      *(_WORD *)&v77[8] = 1024;
      *(_DWORD *)&v77[10] = v18;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#locctl,#rec,recordMessage,CLMotionState_Type,silo entry invalid,from_valid,%d,to_valid,%d", v77, 14);
      v20 = (void **)v19;
      sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)", "%s\n", v19);
      if (v20 == &buf)
        return;
LABEL_54:
      free(v20);
      return;
    }
    sub_100166054(v77);
    v30 = (__n128 *)sub_100B303DC();
    sub_100B307F4(v30, v67);
    sub_1005EFF80((uint64_t)v77, a2, a3, a4, (uint64_t *)v67);
    v80 |= 2u;
    v31 = v79;
    if (!v79)
      operator new();
    *(_DWORD *)(v79 + 492) |= 0x800u;
    v32 = *(_QWORD *)(v31 + 352);
    if (!v32)
      operator new();
    *(_DWORD *)(v32 + 184) |= 0x800u;
    v33 = *(_QWORD *)(v32 + 88);
    if (!v33)
      operator new();
    v34 = *a5;
    *(_DWORD *)(v33 + 28) |= 1u;
    *(_DWORD *)(v33 + 8) = v34;
    v35 = sub_101382E70(a6);
    if (!sub_100106094(v35))
      __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 7450, "::CLP::LogEntry::PrivateData::MotionStateNotification_NotificationType_IsValid(value)");
    v36 = *(_DWORD *)(v33 + 28);
    *(_DWORD *)(v33 + 12) = v35;
    *(_DWORD *)(v33 + 28) = v36 | 6;
    v37 = *(_QWORD *)(v33 + 16);
    if (!v37)
      operator new();
    v38 = *a6;
    if ((*a6 - 3) < 9)
    {
LABEL_65:
      sub_100166004(v77);
      return;
    }
    if ((v38 - 1) >= 2)
    {
      if (!v38)
        goto LABEL_65;
    }
    else
    {
      v39 = sub_1005F7A28(v37);
      sub_10137854C(a7, v39, 0);
    }
    v40 = sub_1005EF67C(a1, (uint64_t)v77);
    if (*(_BYTE *)(a1 + 8))
    {
      v41 = v40;
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v42 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        sub_10142E09C((int *)a2, v68);
        if (SBYTE3(v70) >= 0)
          v43 = v68;
        else
          v43 = *(_BYTE **)v68;
        LODWORD(v60[0]) = a3->i32[0];
        sub_10142E364((int *)v60, v65);
        v58 = v41;
        if (v66 >= 0)
          v44 = v65;
        else
          v44 = (void **)v65[0];
        v62 = *a4;
        v45 = __p;
        sub_10142E364(&v62, __p);
        if (v64 < 0)
          v45 = (void **)__p[0];
        v46 = *a6;
        v47 = sub_100B303DC();
        v48 = sub_100B309E0(v47);
        LODWORD(buf) = 67110402;
        HIDWORD(buf) = v58;
        v82 = 2080;
        v83 = v43;
        v84 = 2080;
        v85 = v44;
        v86 = 2080;
        v87 = v45;
        v88 = 1024;
        v89 = v46;
        v90 = 2050;
        v91 = v48;
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLMotionState_Type,success,%d,message_type,%s,from,%s,to,%s,notification_type,%d,propagation_us,%{public}.3f", (uint8_t *)&buf, 0x36u);
        if (v64 < 0)
          operator delete(__p[0]);
        if (v66 < 0)
          operator delete(v65[0]);
        v41 = v58;
        if (SBYTE3(v70) < 0)
          operator delete(*(void **)v68);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102147FA8);
        v49 = qword_1022A0028;
        sub_10142E09C((int *)a2, v65);
        if (v66 >= 0)
          v50 = v65;
        else
          v50 = (void **)v65[0];
        v62 = a3->i32[0];
        v51 = __p;
        sub_10142E364(&v62, __p);
        if (v64 < 0)
          v51 = (void **)__p[0];
        v59 = *a4;
        sub_10142E364(&v59, v60);
        if (v61 >= 0)
          v52 = v60;
        else
          v52 = (void **)v60[0];
        v53 = *a6;
        v54 = sub_100B303DC();
        v55 = sub_100B309E0(v54);
        *(_DWORD *)v68 = 67110402;
        *(_DWORD *)&v68[4] = v41;
        *(_WORD *)&v68[8] = 2080;
        *(_QWORD *)&v68[10] = v50;
        v69 = 2080;
        v70 = v51;
        v71 = 2080;
        v72 = v52;
        v73 = 1024;
        v74 = v53;
        v75 = 2050;
        v76 = v55;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v49, 2, "#locctl,#rec,recordMessage,CLMotionState_Type,success,%d,message_type,%s,from,%s,to,%s,notification_type,%d,propagation_us,%{public}.3f", v68, 54);
        v57 = v56;
        if (v61 < 0)
          operator delete(v60[0]);
        if (v64 < 0)
          operator delete(__p[0]);
        if (v66 < 0)
          operator delete(v65[0]);
        sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)", "%s\n", v57);
        if (v57 != (char *)&buf)
          free(v57);
      }
    }
    goto LABEL_65;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102147FA8);
  v21 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    sub_10142E09C((int *)a2, &buf);
    v22 = SBYTE3(v85) >= 0 ? &buf : (void **)buf;
    *(_DWORD *)v77 = 136315138;
    *(_QWORD *)&v77[4] = v22;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLMotionState_Type,unsupported message type,%s", v77, 0xCu);
    if (SBYTE3(v85) < 0)
      operator delete(buf);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102147FA8);
    v23 = qword_1022A0028;
    sub_10142E09C((int *)a2, v77);
    if (v78 >= 0)
      v24 = v77;
    else
      v24 = *(uint8_t **)v77;
    *(_DWORD *)v68 = 136315138;
    *(_QWORD *)&v68[4] = v24;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v23, 2, "#locctl,#rec,recordMessage,CLMotionState_Type,unsupported message type,%s", v68);
    v20 = v25;
    if (v78 < 0)
      operator delete(*(void **)v77);
    sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)", "%s\n", (const char *)v20);
    if (v20 != &buf)
      goto LABEL_54;
  }
}

void sub_1005F7908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  sub_100166004(&a47);
  _Unwind_Resume(a1);
}

uint64_t sub_1005F7A28(uint64_t a1)
{
  *(_DWORD *)(a1 + 20) |= 1u;
  if (!*(_QWORD *)(a1 + 8))
    operator new();
  return *(_QWORD *)(a1 + 8);
}

void sub_1005F7A80()
{
  operator delete();
}

void sub_1005F7AA4(uint64_t a1, unsigned int *a2, int32x4_t *a3, int *a4, int *a5, int *a6, int *a7)
{
  NSObject *v10;
  BOOL v11;
  int v12;
  BOOL v13;
  int v14;
  BOOL v15;
  _BOOL4 v16;
  BOOL v17;
  _BOOL4 v18;
  const char *v19;
  void **v20;
  NSObject *v21;
  void **v22;
  uint64_t v23;
  uint8_t *v24;
  void **v25;
  __n128 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  int v43;
  NSObject *v44;
  _BYTE *v45;
  void **v46;
  void **v47;
  int v48;
  uint64_t v49;
  double v50;
  const char *v51;
  int v52;
  const char *v53;
  uint64_t v54;
  void **v55;
  void **v56;
  void **v57;
  int v58;
  uint64_t v59;
  double v60;
  char *v61;
  char *v62;
  uint64_t v63;
  void *v64[2];
  char v65;
  int v66;
  void *__p[2];
  char v68;
  void *v69[2];
  char v70;
  __n128 v71[2];
  _BYTE v72[18];
  __int16 v73;
  void **v74;
  __int16 v75;
  void **v76;
  __int16 v77;
  int v78;
  __int16 v79;
  double v80;
  uint8_t v81[23];
  char v82;
  uint64_t v83;
  int v84;
  void *buf;
  __int16 v86;
  _BYTE *v87;
  __int16 v88;
  void **v89;
  __int16 v90;
  void **v91;
  __int16 v92;
  int v93;
  __int16 v94;
  double v95;

  if (!*(_QWORD *)(a1 + 16))
    return;
  if (*a2 == 4)
  {
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*a3))) & 1) != 0)
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v10 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        if (a3->i32[0])
          v11 = a3->i32[1] == 0;
        else
          v11 = 1;
        v12 = !v11;
        if (*a4)
          v13 = a4[1] == 0;
        else
          v13 = 1;
        v14 = !v13;
        LODWORD(buf) = 67109376;
        HIDWORD(buf) = v12;
        v86 = 1024;
        LODWORD(v87) = v14;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLSignalEnvironmentProvider_Type,silo entry invalid,from_valid,%d,to_valid,%d", (uint8_t *)&buf, 0xEu);
      }
      if (!sub_1001BFF7C(115, 2))
        return;
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v15 = !a3->i32[0] || a3->i32[1] == 0;
      v16 = !v15;
      v17 = !*a4 || a4[1] == 0;
      v18 = !v17;
      *(_DWORD *)v81 = 67109376;
      *(_DWORD *)&v81[4] = v16;
      *(_WORD *)&v81[8] = 1024;
      *(_DWORD *)&v81[10] = v18;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#locctl,#rec,recordMessage,CLSignalEnvironmentProvider_Type,silo entry invalid,from_valid,%d,to_valid,%d", v81, 14);
      v20 = (void **)v19;
      sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLSignalEnvironmentProvider_Type::Notification &, const CLSignalEnvironmentProvider_Type::NotificationData &)", "%s\n", v19);
      if (v20 == &buf)
        return;
LABEL_54:
      free(v20);
      return;
    }
    sub_100166054(v81);
    v30 = (__n128 *)sub_100B303DC();
    sub_100B307F4(v30, v71);
    sub_1005EFF80((uint64_t)v81, a2, a3, a4, (uint64_t *)v71);
    v84 |= 2u;
    v31 = v83;
    if (!v83)
      operator new();
    *(_DWORD *)(v83 + 492) |= 0x800u;
    v32 = *(_QWORD *)(v31 + 352);
    if (!v32)
      operator new();
    *(_DWORD *)(v32 + 184) |= 0x2000u;
    v33 = *(_QWORD *)(v32 + 104);
    if (!v33)
      operator new();
    v34 = *a5;
    *(_DWORD *)(v33 + 28) |= 1u;
    *(_DWORD *)(v33 + 8) = v34;
    v35 = sub_101382AE8(a6);
    if (!sub_1002BC6D0(v35))
      __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 7724, "::CLP::LogEntry::PrivateData::SignalEnvironmentNotification_NotificationType_IsValid(value)");
    v36 = *(_DWORD *)(v33 + 28);
    *(_DWORD *)(v33 + 12) = v35;
    *(_DWORD *)(v33 + 28) = v36 | 6;
    v37 = *(_QWORD *)(v33 + 16);
    if (!v37)
      operator new();
    *(_DWORD *)(v37 + 20) |= 1u;
    v38 = *(_QWORD *)(v37 + 8);
    if (!v38)
      operator new();
    v39 = sub_10136FBF8(a7);
    if (sub_10044281C(v39))
    {
      *(_DWORD *)(v38 + 20) |= 1u;
      *(_DWORD *)(v38 + 8) = v39;
      *(_DWORD *)(v37 + 20) |= 1u;
      v40 = *(_QWORD *)(v37 + 8);
      if (!v40)
        operator new();
      v41 = sub_101382CA8(a7 + 1);
      if (sub_10002A324(v41))
      {
        *(_DWORD *)(v40 + 20) |= 2u;
        *(_DWORD *)(v40 + 12) = v41;
        v42 = sub_1005EF67C(a1, (uint64_t)v81);
        if (*(_BYTE *)(a1 + 8))
        {
          v43 = v42;
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_102147FA8);
          v44 = qword_1022A0028;
          if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
          {
            sub_10142E09C((int *)a2, v72);
            if (SBYTE3(v74) >= 0)
              v45 = v72;
            else
              v45 = *(_BYTE **)v72;
            LODWORD(v64[0]) = a3->i32[0];
            sub_10142E364((int *)v64, v69);
            if (v70 >= 0)
              v46 = v69;
            else
              v46 = (void **)v69[0];
            v66 = *a4;
            v47 = __p;
            sub_10142E364(&v66, __p);
            if (v68 < 0)
              v47 = (void **)__p[0];
            v48 = *a6;
            v49 = sub_100B303DC();
            v50 = sub_100B309E0(v49);
            LODWORD(buf) = 67110402;
            HIDWORD(buf) = v43;
            v86 = 2080;
            v87 = v45;
            v88 = 2080;
            v89 = v46;
            v90 = 2080;
            v91 = v47;
            v92 = 1024;
            v93 = v48;
            v94 = 2050;
            v95 = v50;
            _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLSignalEnvironmentProvider_Type,success,%d,message_type,%s,from,%s,to,%s,notification_type,%d,propagation_us,%{public}.3f", (uint8_t *)&buf, 0x36u);
            if (v68 < 0)
              operator delete(__p[0]);
            if (v70 < 0)
              operator delete(v69[0]);
            if (SBYTE3(v74) < 0)
              operator delete(*(void **)v72);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_102147FA8);
            v54 = qword_1022A0028;
            sub_10142E09C((int *)a2, v69);
            if (v70 >= 0)
              v55 = v69;
            else
              v55 = (void **)v69[0];
            v66 = a3->i32[0];
            v56 = __p;
            sub_10142E364(&v66, __p);
            if (v68 < 0)
              v56 = (void **)__p[0];
            HIDWORD(v63) = *a4;
            sub_10142E364((int *)&v63 + 1, v64);
            if (v65 >= 0)
              v57 = v64;
            else
              v57 = (void **)v64[0];
            v58 = *a6;
            v59 = sub_100B303DC();
            v60 = sub_100B309E0(v59);
            *(_DWORD *)v72 = 67110402;
            *(_DWORD *)&v72[4] = v43;
            *(_WORD *)&v72[8] = 2080;
            *(_QWORD *)&v72[10] = v55;
            v73 = 2080;
            v74 = v56;
            v75 = 2080;
            v76 = v57;
            v77 = 1024;
            v78 = v58;
            v79 = 2050;
            v80 = v60;
            LODWORD(v63) = 54;
            _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v54, 2, "#locctl,#rec,recordMessage,CLSignalEnvironmentProvider_Type,success,%d,message_type,%s,from,%s,to,%s,notification_type,%d,propagation_us,%{public}.3f", v72, v63);
            v62 = v61;
            if (v65 < 0)
              operator delete(v64[0]);
            if (v68 < 0)
              operator delete(__p[0]);
            if (v70 < 0)
              operator delete(v69[0]);
            sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLSignalEnvironmentProvider_Type::Notification &, const CLSignalEnvironmentProvider_Type::NotificationData &)", "%s\n", v62);
            if (v62 != (char *)&buf)
              free(v62);
          }
        }
        sub_100166004(v81);
        return;
      }
      v51 = "::CLP::LogEntry::PrivateData::SignalEnvironmentFidelityLevel_IsValid(value)";
      v52 = 22085;
      v53 = "set_fidelity_level";
    }
    else
    {
      v51 = "::CLP::LogEntry::PrivateData::SignalEnvironment_SignalEnvironmentType_IsValid(value)";
      v52 = 22062;
      v53 = "set_type";
    }
    __assert_rtn(v53, "CLPPrivateDataShared.pb.h", v52, v51);
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102147FA8);
  v21 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    sub_10142E09C((int *)a2, &buf);
    v22 = SBYTE3(v89) >= 0 ? &buf : (void **)buf;
    *(_DWORD *)v81 = 136315138;
    *(_QWORD *)&v81[4] = v22;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLSignalEnvironmentProvider_Type,unsupported message type,%s", v81, 0xCu);
    if (SBYTE3(v89) < 0)
      operator delete(buf);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102147FA8);
    v23 = qword_1022A0028;
    sub_10142E09C((int *)a2, v81);
    if (v82 >= 0)
      v24 = v81;
    else
      v24 = *(uint8_t **)v81;
    *(_DWORD *)v72 = 136315138;
    *(_QWORD *)&v72[4] = v24;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v23, 2, "#locctl,#rec,recordMessage,CLSignalEnvironmentProvider_Type,unsupported message type,%s", v72);
    v20 = v25;
    if (v82 < 0)
      operator delete(*(void **)v81);
    sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLSignalEnvironmentProvider_Type::Notification &, const CLSignalEnvironmentProvider_Type::NotificationData &)", "%s\n", (const char *)v20);
    if (v20 != &buf)
      goto LABEL_54;
  }
}

void sub_1005F8438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  sub_100166004(&a45);
  _Unwind_Resume(a1);
}

void sub_1005F8578(uint64_t a1, unsigned int *a2, int32x4_t *a3, int *a4, int *a5, int *a6)
{
  NSObject *v9;
  BOOL v10;
  int v11;
  BOOL v12;
  int v13;
  BOOL v14;
  _BOOL4 v15;
  BOOL v16;
  _BOOL4 v17;
  const char *v18;
  uint8_t *v19;
  NSObject *v20;
  uint8_t *v21;
  uint64_t v22;
  _BYTE *v23;
  uint8_t *v24;
  __n128 *v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  int v32;
  unsigned int v33;
  int v34;
  int v35;
  NSObject *v36;
  _BYTE *v37;
  void **v38;
  void **v39;
  const __CFString *v40;
  void **v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  void **v45;
  void **v46;
  void **v47;
  const __CFString *v48;
  void **v49;
  uint64_t v50;
  double v51;
  char *v52;
  char *v53;
  void *v54[2];
  char v55;
  int v56;
  void *__p[2];
  char v58;
  int v59;
  void *v60[2];
  char v61;
  void *v62[2];
  char v63;
  __n128 v64[2];
  _BYTE v65[18];
  __int16 v66;
  void **v67;
  __int16 v68;
  void **v69;
  __int16 v70;
  void **v71;
  __int16 v72;
  double v73;
  int v74;
  _BYTE *v75;
  uint64_t v76;
  int v77;
  uint8_t buf[8];
  __int16 v79;
  _BYTE *v80;
  __int16 v81;
  void **v82;
  __int16 v83;
  void **v84;
  __int16 v85;
  void **v86;
  __int16 v87;
  double v88;

  if (!*(_QWORD *)(a1 + 16))
    return;
  if (*a2 == 4)
  {
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*a3))) & 1) != 0)
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v9 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        if (a3->i32[0])
          v10 = a3->i32[1] == 0;
        else
          v10 = 1;
        v11 = !v10;
        if (*a4)
          v12 = a4[1] == 0;
        else
          v12 = 1;
        v13 = !v12;
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&buf[4] = v11;
        v79 = 1024;
        LODWORD(v80) = v13;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLTelephonyService_Type,silo entry invalid,from_valid,%d,to_valid,%d", buf, 0xEu);
      }
      if (!sub_1001BFF7C(115, 2))
        return;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v14 = !a3->i32[0] || a3->i32[1] == 0;
      v15 = !v14;
      v16 = !*a4 || a4[1] == 0;
      v17 = !v16;
      *(_DWORD *)v65 = 67109376;
      *(_DWORD *)&v65[4] = v15;
      *(_WORD *)&v65[8] = 1024;
      *(_DWORD *)&v65[10] = v17;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#locctl,#rec,recordMessage,CLTelephonyService_Type,silo entry invalid,from_valid,%d,to_valid,%d", v65, 14);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLTelephonyService_Type::Notification &)", "%s\n", v18);
      if (v19 == buf)
        return;
LABEL_54:
      free(v19);
      return;
    }
    sub_100166054(&v74);
    v28 = (__n128 *)sub_100B303DC();
    sub_100B307F4(v28, v64);
    sub_1005EFF80((uint64_t)&v74, a2, a3, a4, (uint64_t *)v64);
    v77 |= 2u;
    v29 = v76;
    if (!v76)
      operator new();
    *(_DWORD *)(v76 + 492) |= 0x800u;
    v30 = *(_QWORD *)(v29 + 352);
    if (!v30)
      operator new();
    *(_DWORD *)(v30 + 184) |= 0x4000u;
    v31 = *(_DWORD **)(v30 + 112);
    if (!v31)
      operator new();
    v32 = *a5;
    v31[5] |= 1u;
    v31[2] = v32;
    v33 = sub_1005F8F84(a6);
    if (!sub_10008D1F0(v33))
      __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 7815, "::CLP::LogEntry::PrivateData::TelephonyServiceNotification_NotificationType_IsValid(value)");
    v31[5] |= 2u;
    v31[3] = v33;
    v34 = sub_1005EF67C(a1, (uint64_t)&v74);
    if (*(_BYTE *)(a1 + 8))
    {
      v35 = v34;
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v36 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        sub_10142E09C((int *)a2, v65);
        if (SBYTE3(v67) >= 0)
          v37 = v65;
        else
          v37 = *(_BYTE **)v65;
        LODWORD(v54[0]) = a3->i32[0];
        sub_10142E364((int *)v54, v62);
        if (v63 >= 0)
          v38 = v62;
        else
          v38 = (void **)v62[0];
        v59 = *a4;
        sub_10142E364(&v59, v60);
        if (v61 >= 0)
          v39 = v60;
        else
          v39 = (void **)v60[0];
        v40 = (const __CFString *)sub_1001DEC98(a6);
        v41 = __p;
        sub_1001A486C(v40, (uint64_t)__p);
        if (v58 < 0)
          v41 = (void **)__p[0];
        v42 = sub_100B303DC();
        v43 = sub_100B309E0(v42);
        *(_DWORD *)buf = 67110402;
        *(_DWORD *)&buf[4] = v35;
        v79 = 2080;
        v80 = v37;
        v81 = 2080;
        v82 = v38;
        v83 = 2080;
        v84 = v39;
        v85 = 2080;
        v86 = v41;
        v87 = 2050;
        v88 = v43;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLTelephonyService_Type,success,%d,message_type,%s,from,%s,to,%s,notification_type,%s,propagation_us,%{public}.3f", buf, 0x3Au);
        if (v58 < 0)
          operator delete(__p[0]);
        if (v61 < 0)
          operator delete(v60[0]);
        if (v63 < 0)
          operator delete(v62[0]);
        if (SBYTE3(v67) < 0)
          operator delete(*(void **)v65);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102147FA8);
        v44 = qword_1022A0028;
        sub_10142E09C((int *)a2, v62);
        if (v63 >= 0)
          v45 = v62;
        else
          v45 = (void **)v62[0];
        v59 = a3->i32[0];
        v46 = v60;
        sub_10142E364(&v59, v60);
        if (v61 < 0)
          v46 = (void **)v60[0];
        v56 = *a4;
        v47 = __p;
        sub_10142E364(&v56, __p);
        if (v58 < 0)
          v47 = (void **)__p[0];
        v48 = (const __CFString *)sub_1001DEC98(a6);
        v49 = v54;
        sub_1001A486C(v48, (uint64_t)v54);
        if (v55 < 0)
          v49 = (void **)v54[0];
        v50 = sub_100B303DC();
        v51 = sub_100B309E0(v50);
        *(_DWORD *)v65 = 67110402;
        *(_DWORD *)&v65[4] = v35;
        *(_WORD *)&v65[8] = 2080;
        *(_QWORD *)&v65[10] = v45;
        v66 = 2080;
        v67 = v46;
        v68 = 2080;
        v69 = v47;
        v70 = 2080;
        v71 = v49;
        v72 = 2050;
        v73 = v51;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v44, 2, "#locctl,#rec,recordMessage,CLTelephonyService_Type,success,%d,message_type,%s,from,%s,to,%s,notification_type,%s,propagation_us,%{public}.3f", v65, 58);
        v53 = v52;
        if (v55 < 0)
          operator delete(v54[0]);
        if (v58 < 0)
          operator delete(__p[0]);
        if (v61 < 0)
          operator delete(v60[0]);
        if (v63 < 0)
          operator delete(v62[0]);
        sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLTelephonyService_Type::Notification &)", "%s\n", v53);
        if (v53 != (char *)buf)
          free(v53);
      }
    }
    sub_100166004(&v74);
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102147FA8);
    v20 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      sub_10142E09C((int *)a2, buf);
      v21 = SBYTE3(v82) >= 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)v65 = 136315138;
      *(_QWORD *)&v65[4] = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLTelephonyService_Type,unsupported message type,%s", v65, 0xCu);
      if (SBYTE3(v82) < 0)
        operator delete(*(void **)buf);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v22 = qword_1022A0028;
      sub_10142E09C((int *)a2, v65);
      if (SBYTE3(v67) >= 0)
        v23 = v65;
      else
        v23 = *(_BYTE **)v65;
      v74 = 136315138;
      v75 = v23;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v22, 2, "#locctl,#rec,recordMessage,CLTelephonyService_Type,unsupported message type,%s", (const char *)&v74);
      v19 = v24;
      if (SBYTE3(v67) < 0)
        operator delete(*(void **)v65);
      sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLTelephonyService_Type::Notification &)", "%s\n", (const char *)v19);
      if (v19 != buf)
        goto LABEL_54;
    }
  }
}

void sub_1005F8E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  sub_100166004(&a52);
  _Unwind_Resume(a1);
}

uint64_t sub_1005F8F84(int *a1)
{
  const void *v2;
  uint64_t result;
  const void *v4;
  NSObject *v5;
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  v2 = (const void *)sub_1001DEC98(a1);
  if (CFEqual(v2, kCTRegistrationStatusChangedNotification))
    return 1;
  v4 = (const void *)sub_1001DEC98(a1);
  if (CFEqual(v4, kCTCallStatusChangeNotification))
    return 2;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102147FA8);
  v5 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    v11 = sub_1001CFE7C((unsigned int *)a1);
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#locctl,#rec,convertTelephonyServiceNotificationTypeToProtobuf,unhandled type,%d", buf, 8u);
  }
  result = sub_1001BFF7C(115, 2);
  if ((_DWORD)result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102147FA8);
    v6 = qword_1022A0028;
    v9[0] = 67109120;
    v9[1] = sub_1001CFE7C((unsigned int *)a1);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v6, 2, "#locctl,#rec,convertTelephonyServiceNotificationTypeToProtobuf,unhandled type,%d", v9);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "static CLP::LogEntry::PrivateData::TelephonyServiceNotification_NotificationType CLLocationControllerRecorder::convertTelephonyServiceNotificationTypeToProtobuf(const CLTelephonyService_Type::Notification &)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
    return 0;
  }
  return result;
}

void sub_1005F9188(uint64_t a1, unsigned int *a2, int32x4_t *a3, int *a4, int *a5, int *a6, uint64_t a7)
{
  NSObject *v10;
  BOOL v11;
  int v12;
  BOOL v13;
  int v14;
  BOOL v15;
  _BOOL4 v16;
  BOOL v17;
  _BOOL4 v18;
  const char *v19;
  void **v20;
  NSObject *v21;
  void **v22;
  uint64_t v23;
  uint8_t *v24;
  void **v25;
  __n128 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  std::string *v38;
  int v39;
  int v40;
  NSObject *v41;
  _BYTE *v42;
  void **v43;
  void **v44;
  int v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  void **v49;
  void **v50;
  void **v51;
  int v52;
  uint64_t v53;
  double v54;
  char *v55;
  char *v56;
  uint64_t v57;
  void *v58[2];
  char v59;
  int v60;
  void *__p[2];
  char v62;
  void *v63[2];
  char v64;
  __n128 v65[2];
  _BYTE v66[18];
  __int16 v67;
  void **v68;
  __int16 v69;
  void **v70;
  __int16 v71;
  int v72;
  __int16 v73;
  double v74;
  uint8_t v75[23];
  char v76;
  uint64_t v77;
  int v78;
  void *buf;
  __int16 v80;
  _BYTE *v81;
  __int16 v82;
  void **v83;
  __int16 v84;
  void **v85;
  __int16 v86;
  int v87;
  __int16 v88;
  double v89;

  if (!*(_QWORD *)(a1 + 16))
    return;
  if (*a2 == 4)
  {
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*a3))) & 1) != 0)
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v10 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        if (a3->i32[0])
          v11 = a3->i32[1] == 0;
        else
          v11 = 1;
        v12 = !v11;
        if (*a4)
          v13 = a4[1] == 0;
        else
          v13 = 1;
        v14 = !v13;
        LODWORD(buf) = 67109376;
        HIDWORD(buf) = v12;
        v80 = 1024;
        LODWORD(v81) = v14;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLAppMonitor_Type,silo entry invalid,from_valid,%d,to_valid,%d", (uint8_t *)&buf, 0xEu);
      }
      if (!sub_1001BFF7C(115, 2))
        return;
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v15 = !a3->i32[0] || a3->i32[1] == 0;
      v16 = !v15;
      v17 = !*a4 || a4[1] == 0;
      v18 = !v17;
      *(_DWORD *)v75 = 67109376;
      *(_DWORD *)&v75[4] = v16;
      *(_WORD *)&v75[8] = 1024;
      *(_DWORD *)&v75[10] = v18;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#locctl,#rec,recordMessage,CLAppMonitor_Type,silo entry invalid,from_valid,%d,to_valid,%d", v75, 14);
      v20 = (void **)v19;
      sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLAppMonitor_Type::Notification &, const CLAppMonitor_Type::NotificationData &)", "%s\n", v19);
      if (v20 == &buf)
        return;
LABEL_54:
      free(v20);
      return;
    }
    sub_100166054(v75);
    v30 = (__n128 *)sub_100B303DC();
    sub_100B307F4(v30, v65);
    sub_1005EFF80((uint64_t)v75, a2, a3, a4, (uint64_t *)v65);
    v78 |= 2u;
    v31 = v77;
    if (!v77)
      operator new();
    *(_DWORD *)(v77 + 492) |= 0x800u;
    v32 = *(_QWORD *)(v31 + 352);
    if (!v32)
      operator new();
    *(_DWORD *)(v32 + 184) |= 0x8000u;
    v33 = *(_QWORD *)(v32 + 120);
    if (!v33)
      operator new();
    v34 = *a5;
    *(_DWORD *)(v33 + 28) |= 1u;
    *(_DWORD *)(v33 + 8) = v34;
    v35 = sub_1005F9B94(a6);
    if (!sub_1002BC6DC(v35))
      __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 7938, "::CLP::LogEntry::PrivateData::AppMonitorNotification_NotificationType_IsValid(value)");
    v36 = *(_DWORD *)(v33 + 28);
    *(_DWORD *)(v33 + 12) = v35;
    *(_DWORD *)(v33 + 28) = v36 | 6;
    v37 = *(_QWORD *)(v33 + 16);
    if (!v37)
      operator new();
    *(_DWORD *)(v37 + 20) |= 1u;
    v38 = *(std::string **)(v37 + 8);
    if (v38 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      operator new();
    std::string::operator=(v38, (const std::string *)(a7 + 8));
    v39 = sub_1005EF67C(a1, (uint64_t)v75);
    if (*(_BYTE *)(a1 + 8))
    {
      v40 = v39;
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v41 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        sub_10142E09C((int *)a2, v66);
        if (SBYTE3(v68) >= 0)
          v42 = v66;
        else
          v42 = *(_BYTE **)v66;
        LODWORD(v58[0]) = a3->i32[0];
        sub_10142E364((int *)v58, v63);
        if (v64 >= 0)
          v43 = v63;
        else
          v43 = (void **)v63[0];
        v60 = *a4;
        v44 = __p;
        sub_10142E364(&v60, __p);
        if (v62 < 0)
          v44 = (void **)__p[0];
        v45 = *a6;
        v46 = sub_100B303DC();
        v47 = sub_100B309E0(v46);
        LODWORD(buf) = 67110402;
        HIDWORD(buf) = v40;
        v80 = 2080;
        v81 = v42;
        v82 = 2080;
        v83 = v43;
        v84 = 2080;
        v85 = v44;
        v86 = 1024;
        v87 = v45;
        v88 = 2050;
        v89 = v47;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLAppMonitor_Type,success,%d,message_type,%s,from,%s,to,%s,notification_type,%d,propagation_us,%{public}.3f", (uint8_t *)&buf, 0x36u);
        if (v62 < 0)
          operator delete(__p[0]);
        if (v64 < 0)
          operator delete(v63[0]);
        if (SBYTE3(v68) < 0)
          operator delete(*(void **)v66);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102147FA8);
        v48 = qword_1022A0028;
        sub_10142E09C((int *)a2, v63);
        if (v64 >= 0)
          v49 = v63;
        else
          v49 = (void **)v63[0];
        v60 = a3->i32[0];
        v50 = __p;
        sub_10142E364(&v60, __p);
        if (v62 < 0)
          v50 = (void **)__p[0];
        HIDWORD(v57) = *a4;
        sub_10142E364((int *)&v57 + 1, v58);
        if (v59 >= 0)
          v51 = v58;
        else
          v51 = (void **)v58[0];
        v52 = *a6;
        v53 = sub_100B303DC();
        v54 = sub_100B309E0(v53);
        *(_DWORD *)v66 = 67110402;
        *(_DWORD *)&v66[4] = v40;
        *(_WORD *)&v66[8] = 2080;
        *(_QWORD *)&v66[10] = v49;
        v67 = 2080;
        v68 = v50;
        v69 = 2080;
        v70 = v51;
        v71 = 1024;
        v72 = v52;
        v73 = 2050;
        v74 = v54;
        LODWORD(v57) = 54;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v48, 2, "#locctl,#rec,recordMessage,CLAppMonitor_Type,success,%d,message_type,%s,from,%s,to,%s,notification_type,%d,propagation_us,%{public}.3f", v66, v57);
        v56 = v55;
        if (v59 < 0)
          operator delete(v58[0]);
        if (v62 < 0)
          operator delete(__p[0]);
        if (v64 < 0)
          operator delete(v63[0]);
        sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLAppMonitor_Type::Notification &, const CLAppMonitor_Type::NotificationData &)", "%s\n", v56);
        if (v56 != (char *)&buf)
          free(v56);
      }
    }
    sub_100166004(v75);
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102147FA8);
    v21 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      sub_10142E09C((int *)a2, &buf);
      v22 = SBYTE3(v83) >= 0 ? &buf : (void **)buf;
      *(_DWORD *)v75 = 136315138;
      *(_QWORD *)&v75[4] = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLAppMonitor_Type,unsupported message type,%s", v75, 0xCu);
      if (SBYTE3(v83) < 0)
        operator delete(buf);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v23 = qword_1022A0028;
      sub_10142E09C((int *)a2, v75);
      if (v76 >= 0)
        v24 = v75;
      else
        v24 = *(uint8_t **)v75;
      *(_DWORD *)v66 = 136315138;
      *(_QWORD *)&v66[4] = v24;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v23, 2, "#locctl,#rec,recordMessage,CLAppMonitor_Type,unsupported message type,%s", v66);
      v20 = v25;
      if (v76 < 0)
        operator delete(*(void **)v75);
      sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLAppMonitor_Type::Notification &, const CLAppMonitor_Type::NotificationData &)", "%s\n", (const char *)v20);
      if (v20 != &buf)
        goto LABEL_54;
    }
  }
}

void sub_1005F9A74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  sub_100166004(&a45);
  _Unwind_Resume(a1);
}

uint64_t sub_1005F9B94(int *a1)
{
  uint64_t v2;
  NSObject *v3;
  int v4;
  uint64_t result;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  v2 = *a1;
  if (v2 < 0xA && ((0x21Fu >> v2) & 1) != 0)
    return dword_101BB79D0[v2];
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102147FA8);
  v3 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v4 = *a1;
    *(_DWORD *)buf = 67109120;
    v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#locctl,#rec,convertAppMonitorNotificationTypeToProtobuf,unhandled type,%d", buf, 8u);
  }
  result = sub_1001BFF7C(115, 2);
  if ((_DWORD)result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102147FA8);
    v6 = *a1;
    v9[0] = 67109120;
    v9[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#locctl,#rec,convertAppMonitorNotificationTypeToProtobuf,unhandled type,%d", v9);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "static CLP::LogEntry::PrivateData::AppMonitorNotification_NotificationType CLLocationControllerRecorder::convertAppMonitorNotificationTypeToProtobuf(const CLAppMonitor_Type::Notification &)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
    return 0;
  }
  return result;
}

void sub_1005F9D6C(uint64_t a1, unsigned int *a2, int32x4_t *a3, int *a4, int *a5, int *a6)
{
  NSObject *v9;
  BOOL v10;
  int v11;
  BOOL v12;
  int v13;
  BOOL v14;
  _BOOL4 v15;
  BOOL v16;
  _BOOL4 v17;
  const char *v18;
  void **v19;
  NSObject *v20;
  void **v21;
  uint64_t v22;
  _BYTE *v23;
  void **v24;
  __n128 *v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  int v32;
  unsigned int v33;
  int v34;
  int v35;
  NSObject *v36;
  _BYTE *v37;
  void **v38;
  void **v39;
  const char *v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  void **v44;
  void **v45;
  void **v46;
  const char *v47;
  uint64_t v48;
  double v49;
  char *v50;
  char *v51;
  _BYTE *v52;
  int v53;
  void *v54[2];
  char v55;
  int v56;
  void *__p[2];
  char v58;
  void *v59[2];
  char v60;
  __n128 v61[2];
  _BYTE v62[18];
  __int16 v63;
  void **v64;
  __int16 v65;
  void **v66;
  __int16 v67;
  const char *v68;
  __int16 v69;
  double v70;
  int v71;
  _BYTE *v72;
  uint64_t v73;
  int v74;
  void *buf;
  __int16 v76;
  _BYTE *v77;
  __int16 v78;
  void **v79;
  __int16 v80;
  void **v81;
  __int16 v82;
  const char *v83;
  __int16 v84;
  double v85;

  if (!*(_QWORD *)(a1 + 16))
    return;
  if (*a2 == 4)
  {
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*a3))) & 1) != 0)
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v9 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        if (a3->i32[0])
          v10 = a3->i32[1] == 0;
        else
          v10 = 1;
        v11 = !v10;
        if (*a4)
          v12 = a4[1] == 0;
        else
          v12 = 1;
        v13 = !v12;
        LODWORD(buf) = 67109376;
        HIDWORD(buf) = v11;
        v76 = 1024;
        LODWORD(v77) = v13;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLLocationProvider_Type,silo entry invalid,from_valid,%d,to_valid,%d", (uint8_t *)&buf, 0xEu);
      }
      if (!sub_1001BFF7C(115, 2))
        return;
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v14 = !a3->i32[0] || a3->i32[1] == 0;
      v15 = !v14;
      v16 = !*a4 || a4[1] == 0;
      v17 = !v16;
      *(_DWORD *)v62 = 67109376;
      *(_DWORD *)&v62[4] = v15;
      *(_WORD *)&v62[8] = 1024;
      *(_DWORD *)&v62[10] = v17;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#locctl,#rec,recordMessage,CLLocationProvider_Type,silo entry invalid,from_valid,%d,to_valid,%d", v62, 14);
      v19 = (void **)v18;
      sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLLocationProvider_Type::Notification &)", "%s\n", v18);
      if (v19 == &buf)
        return;
LABEL_54:
      free(v19);
      return;
    }
    sub_100166054(&v71);
    v28 = (__n128 *)sub_100B303DC();
    sub_100B307F4(v28, v61);
    sub_1005EFF80((uint64_t)&v71, a2, a3, a4, (uint64_t *)v61);
    v74 |= 2u;
    v29 = v73;
    if (!v73)
      operator new();
    *(_DWORD *)(v73 + 492) |= 0x800u;
    v30 = *(_QWORD *)(v29 + 352);
    if (!v30)
      operator new();
    *(_DWORD *)(v30 + 184) |= 0x10000u;
    v31 = *(_DWORD **)(v30 + 128);
    if (!v31)
      operator new();
    v32 = *a5;
    v31[9] |= 1u;
    v31[2] = v32;
    v33 = sub_1001755F0(a6);
    if (!sub_1001752F8(v33))
      __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 8770, "::CLP::LogEntry::PrivateData::LocationProviderNotification_NotificationType_IsValid(value)");
    v31[9] |= 2u;
    v31[3] = v33;
    v34 = sub_1005EF67C(a1, (uint64_t)&v71);
    if (*(_BYTE *)(a1 + 8))
    {
      v35 = v34;
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v36 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        sub_10142E09C((int *)a2, v62);
        if (SBYTE3(v64) >= 0)
          v37 = v62;
        else
          v37 = *(_BYTE **)v62;
        v52 = v37;
        LODWORD(v54[0]) = a3->i32[0];
        sub_10142E364((int *)v54, v59);
        if (v60 >= 0)
          v38 = v59;
        else
          v38 = (void **)v59[0];
        v56 = *a4;
        v39 = __p;
        sub_10142E364(&v56, __p);
        if (v58 < 0)
          v39 = (void **)__p[0];
        v40 = sub_1001B49F8(*a6);
        v41 = sub_100B303DC();
        v42 = sub_100B309E0(v41);
        LODWORD(buf) = 67110402;
        HIDWORD(buf) = v35;
        v76 = 2080;
        v77 = v52;
        v78 = 2080;
        v79 = v38;
        v80 = 2080;
        v81 = v39;
        v82 = 2080;
        v83 = v40;
        v84 = 2050;
        v85 = v42;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLLocationProvider_Type,success,%d,message_type,%s,from,%s,to,%s,notification_type,%s,propagation_us,%{public}.3f", (uint8_t *)&buf, 0x3Au);
        if (v58 < 0)
          operator delete(__p[0]);
        if (v60 < 0)
          operator delete(v59[0]);
        if (SBYTE3(v64) < 0)
          operator delete(*(void **)v62);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102147FA8);
        v43 = qword_1022A0028;
        sub_10142E09C((int *)a2, v59);
        if (v60 >= 0)
          v44 = v59;
        else
          v44 = (void **)v59[0];
        v56 = a3->i32[0];
        v45 = __p;
        sub_10142E364(&v56, __p);
        if (v58 < 0)
          v45 = (void **)__p[0];
        v53 = *a4;
        sub_10142E364(&v53, v54);
        if (v55 >= 0)
          v46 = v54;
        else
          v46 = (void **)v54[0];
        v47 = sub_1001B49F8(*a6);
        v48 = sub_100B303DC();
        v49 = sub_100B309E0(v48);
        *(_DWORD *)v62 = 67110402;
        *(_DWORD *)&v62[4] = v35;
        *(_WORD *)&v62[8] = 2080;
        *(_QWORD *)&v62[10] = v44;
        v63 = 2080;
        v64 = v45;
        v65 = 2080;
        v66 = v46;
        v67 = 2080;
        v68 = v47;
        v69 = 2050;
        v70 = v49;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v43, 2, "#locctl,#rec,recordMessage,CLLocationProvider_Type,success,%d,message_type,%s,from,%s,to,%s,notification_type,%s,propagation_us,%{public}.3f", v62, 58);
        v51 = v50;
        if (v55 < 0)
          operator delete(v54[0]);
        if (v58 < 0)
          operator delete(__p[0]);
        if (v60 < 0)
          operator delete(v59[0]);
        sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLLocationProvider_Type::Notification &)", "%s\n", v51);
        if (v51 != (char *)&buf)
          free(v51);
      }
    }
    sub_100166004(&v71);
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102147FA8);
    v20 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      sub_10142E09C((int *)a2, &buf);
      v21 = SBYTE3(v79) >= 0 ? &buf : (void **)buf;
      *(_DWORD *)v62 = 136315138;
      *(_QWORD *)&v62[4] = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLLocationProvider_Type,unsupported message type,%s", v62, 0xCu);
      if (SBYTE3(v79) < 0)
        operator delete(buf);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v22 = qword_1022A0028;
      sub_10142E09C((int *)a2, v62);
      if (SBYTE3(v64) >= 0)
        v23 = v62;
      else
        v23 = *(_BYTE **)v62;
      v71 = 136315138;
      v72 = v23;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v22, 2, "#locctl,#rec,recordMessage,CLLocationProvider_Type,unsupported message type,%s", (const char *)&v71);
      v19 = v24;
      if (SBYTE3(v64) < 0)
        operator delete(*(void **)v62);
      sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLLocationProvider_Type::Notification &)", "%s\n", (const char *)v19);
      if (v19 != &buf)
        goto LABEL_54;
    }
  }
}

void sub_1005FA5E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  sub_100166004(&a47);
  _Unwind_Resume(a1);
}

void sub_1005FA6E8(uint64_t a1, unsigned int *a2, int32x4_t *a3, int *a4, int *a5, int *a6, uint64_t a7)
{
  NSObject *v10;
  BOOL v11;
  int v12;
  BOOL v13;
  int v14;
  BOOL v15;
  _BOOL4 v16;
  BOOL v17;
  _BOOL4 v18;
  char *v19;
  NSObject *v20;
  _BYTE *v21;
  uint64_t v22;
  _BYTE *v23;
  __n128 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  _BYTE *v44;
  const char *v45;
  uint64_t v46;
  int *v47;
  int *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  NSObject *v75;
  _BYTE *v76;
  void **v77;
  void **v78;
  const char *v79;
  uint64_t v80;
  double v81;
  uint64_t v82;
  void **v83;
  void **v84;
  void **v85;
  const char *v86;
  uint64_t v87;
  double v88;
  char *v89;
  uint64_t v90;
  void **v91;
  const char *v92;
  uint64_t v93;
  char *v94;
  const char *v95;
  void *v96[2];
  char v97;
  int v98;
  void *__p[2];
  char v100;
  void *v101[2];
  char v102;
  __n128 v103[2];
  _BYTE v104[38];
  __int16 v105;
  const char *v106;
  __int16 v107;
  double v108;
  int v109;
  _BYTE *v110;
  uint64_t v111;
  int v112;
  _BYTE buf[38];
  __int16 v114;
  const char *v115;
  __int16 v116;
  double v117;

  if (!*(_QWORD *)(a1 + 16))
    return;
  if (*a2 == 4)
  {
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*a3))) & 1) != 0)
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v10 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        if (a3->i32[0])
          v11 = a3->i32[1] == 0;
        else
          v11 = 1;
        v12 = !v11;
        if (*a4)
          v13 = a4[1] == 0;
        else
          v13 = 1;
        v14 = !v13;
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&buf[4] = v12;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v14;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLLocationProvider_Type,silo entry invalid,from_valid,%d,to_valid,%d", buf, 0xEu);
      }
      if (!sub_1001BFF7C(115, 2))
        return;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v15 = !a3->i32[0] || a3->i32[1] == 0;
      v16 = !v15;
      v17 = !*a4 || a4[1] == 0;
      v18 = !v17;
      *(_DWORD *)v104 = 67109376;
      *(_DWORD *)&v104[4] = v16;
      *(_WORD *)&v104[8] = 1024;
      *(_DWORD *)&v104[10] = v18;
      v19 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#locctl,#rec,recordMessage,CLLocationProvider_Type,silo entry invalid,from_valid,%d,to_valid,%d", v104, 14);
      sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v19);
      if (v19 == buf)
        return;
LABEL_54:
      free(v19);
      return;
    }
    sub_100166054(&v109);
    v28 = (__n128 *)sub_100B303DC();
    sub_100B307F4(v28, v103);
    sub_1005EFF80((uint64_t)&v109, a2, a3, a4, (uint64_t *)v103);
    v112 |= 2u;
    v29 = v111;
    if (!v111)
      operator new();
    *(_DWORD *)(v111 + 492) |= 0x800u;
    v30 = *(_QWORD *)(v29 + 352);
    if (!v30)
      operator new();
    *(_DWORD *)(v30 + 184) |= 0x10000u;
    v31 = *(_QWORD *)(v30 + 128);
    if (!v31)
      operator new();
    v32 = *a5;
    *(_DWORD *)(v31 + 36) |= 1u;
    *(_DWORD *)(v31 + 8) = v32;
    v33 = sub_1001755F0(a6);
    if (!sub_1001752F8(v33))
      __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 8770, "::CLP::LogEntry::PrivateData::LocationProviderNotification_NotificationType_IsValid(value)");
    v34 = *(_DWORD *)(v31 + 36);
    *(_DWORD *)(v31 + 12) = v33;
    *(_DWORD *)(v31 + 36) = v34 | 6;
    v35 = *(_QWORD *)(v31 + 16);
    if (!v35)
      operator new();
    v36 = *a6;
    if (*a6 > 35)
    {
      switch(v36)
      {
        case '$':
          v40 = sub_1005FB5DC(v35);
          sub_1001757C0(a7 + 1328, v40);
          goto LABEL_88;
        case ')':
          v72 = sub_1005FB658(v35);
          sub_100175F74(a7 + 1448, v72);
          goto LABEL_88;
        case '*':
          v38 = sub_1005FB6D4(v35);
          v39 = *(_BYTE *)(a7 + 1480);
          *(_DWORD *)(v38 + 16) |= 1u;
          *(_BYTE *)(v38 + 8) = v39;
          goto LABEL_88;
      }
    }
    else
    {
      switch(v36)
      {
        case 9:
LABEL_88:
          v73 = sub_1005EF67C(a1, (uint64_t)&v109);
          if (*(_BYTE *)(a1 + 8))
          {
            v74 = v73;
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_102147FA8);
            v75 = qword_1022A0028;
            if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
            {
              sub_10142E09C((int *)a2, v104);
              if (v104[23] >= 0)
                v76 = v104;
              else
                v76 = *(_BYTE **)v104;
              LODWORD(v96[0]) = a3->i32[0];
              sub_10142E364((int *)v96, v101);
              if (v102 >= 0)
                v77 = v101;
              else
                v77 = (void **)v101[0];
              v98 = *a4;
              sub_10142E364(&v98, __p);
              if (v100 >= 0)
                v78 = __p;
              else
                v78 = (void **)__p[0];
              v79 = sub_1001B49F8(*a6);
              v80 = sub_100B303DC();
              v81 = sub_100B309E0(v80);
              *(_DWORD *)buf = 67110402;
              *(_DWORD *)&buf[4] = v74;
              *(_WORD *)&buf[8] = 2080;
              *(_QWORD *)&buf[10] = v76;
              *(_WORD *)&buf[18] = 2080;
              *(_QWORD *)&buf[20] = v77;
              *(_WORD *)&buf[28] = 2080;
              *(_QWORD *)&buf[30] = v78;
              v114 = 2080;
              v115 = v79;
              v116 = 2050;
              v117 = v81;
              _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLLocationProvider_Type,success,%d,message_type,%s,from,%s,to,%s,notification_type,%s,propagation_us,%{public}.3f", buf, 0x3Au);
              if (v100 < 0)
                operator delete(__p[0]);
              if (v102 < 0)
                operator delete(v101[0]);
              if ((v104[23] & 0x80000000) != 0)
                operator delete(*(void **)v104);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0020 != -1)
                dispatch_once(&qword_1022A0020, &stru_102147FA8);
              v82 = qword_1022A0028;
              sub_10142E09C((int *)a2, v101);
              if (v102 >= 0)
                v83 = v101;
              else
                v83 = (void **)v101[0];
              v98 = a3->i32[0];
              v84 = __p;
              sub_10142E364(&v98, __p);
              if (v100 < 0)
                v84 = (void **)__p[0];
              HIDWORD(v95) = *a4;
              sub_10142E364((int *)&v95 + 1, v96);
              if (v97 >= 0)
                v85 = v96;
              else
                v85 = (void **)v96[0];
              v86 = sub_1001B49F8(*a6);
              v87 = sub_100B303DC();
              v88 = sub_100B309E0(v87);
              *(_DWORD *)v104 = 67110402;
              *(_DWORD *)&v104[4] = v74;
              *(_WORD *)&v104[8] = 2080;
              *(_QWORD *)&v104[10] = v83;
              *(_WORD *)&v104[18] = 2080;
              *(_QWORD *)&v104[20] = v84;
              *(_WORD *)&v104[28] = 2080;
              *(_QWORD *)&v104[30] = v85;
              v105 = 2080;
              v106 = v86;
              v107 = 2050;
              v108 = v88;
              LODWORD(v95) = 58;
              v89 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v82, 2, "#locctl,#rec,recordMessage,CLLocationProvider_Type,success,%d,message_type,%s,from,%s,to,%s,notification_type,%s,propagation_us,%{public}.3f", v104, v95);
              if (v97 < 0)
                operator delete(v96[0]);
              if (v100 < 0)
                operator delete(__p[0]);
              if (v102 < 0)
                operator delete(v101[0]);
              sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v89);
              if (v89 != buf)
                free(v89);
            }
          }
          sub_100166004(&v109);
          return;
        case 11:
          v70 = *(_QWORD *)(a7 + 816);
          v71 = sub_1005FB520(v35);
          sub_100176564(v70, v71);
          goto LABEL_88;
        case 18:
          v37 = sub_10017639C((unsigned int *)(a7 + 840));
          sub_1005FB59C(v35, v37);
          goto LABEL_88;
      }
    }
    v41 = sub_1005FB750(v35);
    sub_1001765C8(a7, v41);
    v42 = sub_1005FB7CC(v35);
    sub_100177190(a7 + 160, v42);
    if (*(_QWORD *)(a7 + 800))
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v43 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(v101[0]) = a3->i32[0];
        sub_10142E364((int *)v101, v104);
        v44 = v104[23] >= 0 ? v104 : *(_BYTE **)v104;
        v45 = sub_1001B49F8(*a6);
        v46 = sub_10104BD1C(*(int **)(a7 + 800));
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = v44;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v45;
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)&buf[24] = v46;
        _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "#locctl,#rec,received #batchedlocations,from,%s,notification,%s,size,%zu", buf, 0x20u);
        if ((v104[23] & 0x80000000) != 0)
          operator delete(*(void **)v104);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102147FA8);
        v90 = qword_1022A0028;
        LODWORD(__p[0]) = a3->i32[0];
        sub_10142E364((int *)__p, v101);
        if (v102 >= 0)
          v91 = v101;
        else
          v91 = (void **)v101[0];
        v92 = sub_1001B49F8(*a6);
        v93 = sub_10104BD1C(*(int **)(a7 + 800));
        *(_DWORD *)v104 = 136315650;
        *(_QWORD *)&v104[4] = v91;
        *(_WORD *)&v104[12] = 2080;
        *(_QWORD *)&v104[14] = v92;
        *(_WORD *)&v104[22] = 2048;
        *(_QWORD *)&v104[24] = v93;
        LODWORD(v95) = 32;
        v94 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v90, 2, "#locctl,#rec,received #batchedlocations,from,%s,notification,%s,size,%zu", v104, v95, (size_t)v96[0]);
        if (v102 < 0)
          operator delete(v101[0]);
        sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v94);
        if (v94 != buf)
          free(v94);
      }
      v47 = *(int **)(a7 + 800);
      v48 = (int *)sub_1005FB848(v35);
      sub_1013813BC(v47, v48);
    }
    v49 = *(_DWORD *)(v35 + 112);
    *(_BYTE *)(v35 + 48) = *(_BYTE *)(a7 + 824);
    v50 = *(_QWORD *)(a7 + 832);
    *(_DWORD *)(v35 + 112) = v49 | 0x30;
    *(_QWORD *)(v35 + 40) = v50;
    v51 = sub_1005FB8C4(v35);
    v52 = *(_QWORD *)(a7 + 856);
    *(_DWORD *)(v51 + 44) |= 1u;
    *(_QWORD *)(v51 + 8) = v52;
    v53 = sub_1005FB8C4(v35);
    v54 = *(_QWORD *)(a7 + 848);
    *(_DWORD *)(v53 + 44) |= 2u;
    *(_QWORD *)(v53 + 16) = v54;
    v55 = sub_1005FB8C4(v35);
    v56 = *(_QWORD *)(a7 + 864);
    *(_DWORD *)(v55 + 44) |= 4u;
    *(_QWORD *)(v55 + 24) = v56;
    v57 = sub_1005FB8C4(v35);
    v58 = *(_QWORD *)(a7 + 872);
    *(_DWORD *)(v57 + 44) |= 8u;
    *(_QWORD *)(v57 + 32) = v58;
    v59 = sub_1005FB940(v35);
    v60 = *(_QWORD *)(a7 + 888);
    *(_DWORD *)(v59 + 28) |= 1u;
    *(_QWORD *)(v59 + 8) = v60;
    v61 = sub_1005FB940(v35);
    v62 = *(_QWORD *)(a7 + 880);
    *(_DWORD *)(v61 + 28) |= 2u;
    *(_QWORD *)(v61 + 16) = v62;
    v63 = sub_1001761D4((unsigned int *)(a7 + 928));
    sub_1005FB9BC(v35, v63);
    v64 = sub_1005FB9FC(v35);
    v65 = *(_QWORD *)(a7 + 944);
    *(_DWORD *)(v64 + 36) |= 1u;
    *(_QWORD *)(v64 + 8) = v65;
    v66 = sub_1005FB9FC(v35);
    v67 = *(_QWORD *)(a7 + 936);
    *(_DWORD *)(v66 + 36) |= 2u;
    *(_QWORD *)(v66 + 16) = v67;
    v68 = sub_1005FB9FC(v35);
    v69 = *(_QWORD *)(a7 + 952);
    *(_DWORD *)(v68 + 36) |= 4u;
    *(_QWORD *)(v68 + 24) = v69;
    goto LABEL_88;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102147FA8);
  v20 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    sub_10142E09C((int *)a2, buf);
    v21 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
    *(_DWORD *)v104 = 136315138;
    *(_QWORD *)&v104[4] = v21;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLLocationProvider_Type,unsupported message type,%s", v104, 0xCu);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102147FA8);
    v22 = qword_1022A0028;
    sub_10142E09C((int *)a2, v104);
    if (v104[23] >= 0)
      v23 = v104;
    else
      v23 = *(_BYTE **)v104;
    v109 = 136315138;
    v110 = v23;
    v19 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v22, 2, "#locctl,#rec,recordMessage,CLLocationProvider_Type,unsupported message type,%s", (const char *)&v109);
    if ((v104[23] & 0x80000000) != 0)
      operator delete(*(void **)v104);
    sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v19);
    if (v19 != buf)
      goto LABEL_54;
  }
}

void sub_1005FB3EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  sub_100166004(&a45);
  _Unwind_Resume(a1);
}

uint64_t sub_1005FB520(uint64_t a1)
{
  *(_DWORD *)(a1 + 112) |= 8u;
  if (!*(_QWORD *)(a1 + 32))
    operator new();
  return *(_QWORD *)(a1 + 32);
}

void sub_1005FB578()
{
  operator delete();
}

BOOL sub_1005FB59C(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;

  result = sub_10008D1F0(a2);
  if (!result)
    sub_101901A08();
  *(_DWORD *)(a1 + 112) |= 0x40u;
  *(_DWORD *)(a1 + 52) = a2;
  return result;
}

uint64_t sub_1005FB5DC(uint64_t a1)
{
  *(_DWORD *)(a1 + 112) |= 0x800u;
  if (!*(_QWORD *)(a1 + 80))
    operator new();
  return *(_QWORD *)(a1 + 80);
}

void sub_1005FB634()
{
  operator delete();
}

uint64_t sub_1005FB658(uint64_t a1)
{
  *(_DWORD *)(a1 + 112) |= 0x1000u;
  if (!*(_QWORD *)(a1 + 88))
    operator new();
  return *(_QWORD *)(a1 + 88);
}

void sub_1005FB6B0()
{
  operator delete();
}

uint64_t sub_1005FB6D4(uint64_t a1)
{
  *(_DWORD *)(a1 + 112) |= 0x2000u;
  if (!*(_QWORD *)(a1 + 96))
    operator new();
  return *(_QWORD *)(a1 + 96);
}

void sub_1005FB72C()
{
  operator delete();
}

uint64_t sub_1005FB750(uint64_t a1)
{
  *(_DWORD *)(a1 + 112) |= 1u;
  if (!*(_QWORD *)(a1 + 8))
    operator new();
  return *(_QWORD *)(a1 + 8);
}

void sub_1005FB7A8()
{
  operator delete();
}

uint64_t sub_1005FB7CC(uint64_t a1)
{
  *(_DWORD *)(a1 + 112) |= 2u;
  if (!*(_QWORD *)(a1 + 16))
    operator new();
  return *(_QWORD *)(a1 + 16);
}

void sub_1005FB824()
{
  operator delete();
}

uint64_t sub_1005FB848(uint64_t a1)
{
  *(_DWORD *)(a1 + 112) |= 4u;
  if (!*(_QWORD *)(a1 + 24))
    operator new();
  return *(_QWORD *)(a1 + 24);
}

void sub_1005FB8A0()
{
  operator delete();
}

uint64_t sub_1005FB8C4(uint64_t a1)
{
  *(_DWORD *)(a1 + 112) |= 0x80u;
  if (!*(_QWORD *)(a1 + 56))
    operator new();
  return *(_QWORD *)(a1 + 56);
}

void sub_1005FB91C()
{
  operator delete();
}

uint64_t sub_1005FB940(uint64_t a1)
{
  *(_DWORD *)(a1 + 112) |= 0x100u;
  if (!*(_QWORD *)(a1 + 64))
    operator new();
  return *(_QWORD *)(a1 + 64);
}

void sub_1005FB998()
{
  operator delete();
}

BOOL sub_1005FB9BC(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;

  result = sub_10008D1F0(a2);
  if (!result)
    sub_101901A30();
  *(_DWORD *)(a1 + 112) |= 0x200u;
  *(_DWORD *)(a1 + 104) = a2;
  return result;
}

uint64_t sub_1005FB9FC(uint64_t a1)
{
  *(_DWORD *)(a1 + 112) |= 0x400u;
  if (!*(_QWORD *)(a1 + 72))
    operator new();
  return *(_QWORD *)(a1 + 72);
}

void sub_1005FBA54()
{
  operator delete();
}

void sub_1005FBA78(uint64_t a1, unsigned int *a2, int32x4_t *a3, int *a4, int *a5, int *a6)
{
  NSObject *v9;
  BOOL v10;
  int v11;
  BOOL v12;
  int v13;
  BOOL v14;
  _BOOL4 v15;
  BOOL v16;
  _BOOL4 v17;
  char *v18;
  NSObject *v19;
  void **v20;
  uint64_t v21;
  _BYTE *v22;
  __n128 *v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  int v30;
  unsigned int v31;
  int v32;
  int v33;
  NSObject *v34;
  _BYTE *v35;
  void **v36;
  void **v37;
  const char *v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  void **v42;
  void **v43;
  void **v44;
  const char *v45;
  uint64_t v46;
  double v47;
  char *v48;
  _BYTE *v49;
  int v50;
  void *v51[2];
  char v52;
  int v53;
  void *__p[2];
  char v55;
  void *v56[2];
  char v57;
  __n128 v58[2];
  _BYTE v59[18];
  __int16 v60;
  void **v61;
  __int16 v62;
  void **v63;
  __int16 v64;
  const char *v65;
  __int16 v66;
  double v67;
  int v68;
  _BYTE *v69;
  uint64_t v70;
  int v71;
  void *buf;
  __int16 v73;
  _BYTE *v74;
  __int16 v75;
  void **v76;
  __int16 v77;
  void **v78;
  __int16 v79;
  const char *v80;
  __int16 v81;
  double v82;

  if (!*(_QWORD *)(a1 + 16))
    return;
  if ((*a2 & 0xFFFFFFFE) == 2)
  {
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*a3))) & 1) != 0)
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v9 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        if (a3->i32[0])
          v10 = a3->i32[1] == 0;
        else
          v10 = 1;
        v11 = !v10;
        if (*a4)
          v12 = a4[1] == 0;
        else
          v12 = 1;
        v13 = !v12;
        LODWORD(buf) = 67109376;
        HIDWORD(buf) = v11;
        v73 = 1024;
        LODWORD(v74) = v13;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordRegistration,CLLocationProvider_Type,silo entry invalid,from_valid,%d,to_valid,%d", (uint8_t *)&buf, 0xEu);
      }
      if (!sub_1001BFF7C(115, 2))
        return;
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v14 = !a3->i32[0] || a3->i32[1] == 0;
      v15 = !v14;
      v16 = !*a4 || a4[1] == 0;
      v17 = !v16;
      *(_DWORD *)v59 = 67109376;
      *(_DWORD *)&v59[4] = v15;
      *(_WORD *)&v59[8] = 1024;
      *(_DWORD *)&v59[10] = v17;
      v18 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#locctl,#rec,recordRegistration,CLLocationProvider_Type,silo entry invalid,from_valid,%d,to_valid,%d", v59, 14);
      sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordRegistration(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLLocationProvider_Type::Notification &)", "%s\n", v18);
      if (v18 == (char *)&buf)
        return;
LABEL_54:
      free(v18);
      return;
    }
    sub_100166054(&v68);
    v26 = (__n128 *)sub_100B303DC();
    sub_100B307F4(v26, v58);
    sub_1005EFF80((uint64_t)&v68, a2, a3, a4, (uint64_t *)v58);
    v71 |= 2u;
    v27 = v70;
    if (!v70)
      operator new();
    *(_DWORD *)(v70 + 492) |= 0x800u;
    v28 = *(_QWORD *)(v27 + 352);
    if (!v28)
      operator new();
    *(_DWORD *)(v28 + 184) |= 0x10000u;
    v29 = *(_DWORD **)(v28 + 128);
    if (!v29)
      operator new();
    v30 = *a5;
    v29[9] |= 1u;
    v29[2] = v30;
    v31 = sub_1001755F0(a6);
    if (!sub_1001752F8(v31))
      __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 8770, "::CLP::LogEntry::PrivateData::LocationProviderNotification_NotificationType_IsValid(value)");
    v29[9] |= 2u;
    v29[3] = v31;
    v32 = sub_1005EF67C(a1, (uint64_t)&v68);
    if (*(_BYTE *)(a1 + 8))
    {
      v33 = v32;
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v34 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        sub_10142E09C((int *)a2, v59);
        if (SBYTE3(v61) >= 0)
          v35 = v59;
        else
          v35 = *(_BYTE **)v59;
        v49 = v35;
        LODWORD(v51[0]) = a3->i32[0];
        sub_10142E364((int *)v51, v56);
        if (v57 >= 0)
          v36 = v56;
        else
          v36 = (void **)v56[0];
        v53 = *a4;
        v37 = __p;
        sub_10142E364(&v53, __p);
        if (v55 < 0)
          v37 = (void **)__p[0];
        v38 = sub_1001B49F8(*a6);
        v39 = sub_100B303DC();
        v40 = sub_100B309E0(v39);
        LODWORD(buf) = 67110402;
        HIDWORD(buf) = v33;
        v73 = 2080;
        v74 = v49;
        v75 = 2080;
        v76 = v36;
        v77 = 2080;
        v78 = v37;
        v79 = 2080;
        v80 = v38;
        v81 = 2050;
        v82 = v40;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordRegistration,CLLocationProvider_Type,success,%d,message_type,%s,from,%s,to,%s,notification_type,%s,propagation_us,%{public}.3f", (uint8_t *)&buf, 0x3Au);
        if (v55 < 0)
          operator delete(__p[0]);
        if (v57 < 0)
          operator delete(v56[0]);
        if (SBYTE3(v61) < 0)
          operator delete(*(void **)v59);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102147FA8);
        v41 = qword_1022A0028;
        sub_10142E09C((int *)a2, v56);
        if (v57 >= 0)
          v42 = v56;
        else
          v42 = (void **)v56[0];
        v53 = a3->i32[0];
        v43 = __p;
        sub_10142E364(&v53, __p);
        if (v55 < 0)
          v43 = (void **)__p[0];
        v50 = *a4;
        sub_10142E364(&v50, v51);
        if (v52 >= 0)
          v44 = v51;
        else
          v44 = (void **)v51[0];
        v45 = sub_1001B49F8(*a6);
        v46 = sub_100B303DC();
        v47 = sub_100B309E0(v46);
        *(_DWORD *)v59 = 67110402;
        *(_DWORD *)&v59[4] = v33;
        *(_WORD *)&v59[8] = 2080;
        *(_QWORD *)&v59[10] = v42;
        v60 = 2080;
        v61 = v43;
        v62 = 2080;
        v63 = v44;
        v64 = 2080;
        v65 = v45;
        v66 = 2050;
        v67 = v47;
        v48 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v41, 2, "#locctl,#rec,recordRegistration,CLLocationProvider_Type,success,%d,message_type,%s,from,%s,to,%s,notification_type,%s,propagation_us,%{public}.3f", v59, 58);
        if (v52 < 0)
          operator delete(v51[0]);
        if (v55 < 0)
          operator delete(__p[0]);
        if (v57 < 0)
          operator delete(v56[0]);
        sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordRegistration(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLLocationProvider_Type::Notification &)", "%s\n", v48);
        if (v48 != (char *)&buf)
          free(v48);
      }
    }
    sub_100166004(&v68);
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102147FA8);
    v19 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      sub_10142E09C((int *)a2, &buf);
      v20 = SBYTE3(v76) >= 0 ? &buf : (void **)buf;
      *(_DWORD *)v59 = 136315138;
      *(_QWORD *)&v59[4] = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordRegistration,CLLocationProvider_Type,unsupported message type,%s", v59, 0xCu);
      if (SBYTE3(v76) < 0)
        operator delete(buf);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v21 = qword_1022A0028;
      sub_10142E09C((int *)a2, v59);
      if (SBYTE3(v61) >= 0)
        v22 = v59;
      else
        v22 = *(_BYTE **)v59;
      v68 = 136315138;
      v69 = v22;
      v18 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v21, 2, "#locctl,#rec,recordRegistration,CLLocationProvider_Type,unsupported message type,%s", (const char *)&v68);
      if (SBYTE3(v61) < 0)
        operator delete(*(void **)v59);
      sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordRegistration(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLLocationProvider_Type::Notification &)", "%s\n", v18);
      if (v18 != (char *)&buf)
        goto LABEL_54;
    }
  }
}

void sub_1005FC2F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  sub_100166004(&a47);
  _Unwind_Resume(a1);
}

void sub_1005FC3F8(uint64_t a1, unsigned int *a2, int32x4_t *a3, int *a4, int *a5, int *a6, uint64_t a7)
{
  NSObject *v10;
  BOOL v11;
  int v12;
  BOOL v13;
  int v14;
  BOOL v15;
  _BOOL4 v16;
  BOOL v17;
  _BOOL4 v18;
  char *v19;
  NSObject *v20;
  void **v21;
  uint64_t v22;
  _BYTE *v23;
  __n128 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  int v40;
  NSObject *v41;
  _BYTE *v42;
  void **v43;
  void **v44;
  const char *v45;
  uint64_t v46;
  double v47;
  const char *v48;
  int v49;
  const char *v50;
  uint64_t v51;
  void **v52;
  void **v53;
  void **v54;
  const char *v55;
  uint64_t v56;
  double v57;
  char *v58;
  _BYTE *v59;
  int v60;
  void *v61[2];
  char v62;
  int v63;
  void *__p[2];
  char v65;
  void *v66[2];
  char v67;
  __n128 v68[2];
  _BYTE v69[18];
  __int16 v70;
  void **v71;
  __int16 v72;
  void **v73;
  __int16 v74;
  const char *v75;
  __int16 v76;
  double v77;
  int v78;
  _BYTE *v79;
  uint64_t v80;
  int v81;
  void *buf;
  __int16 v83;
  _BYTE *v84;
  __int16 v85;
  void **v86;
  __int16 v87;
  void **v88;
  __int16 v89;
  const char *v90;
  __int16 v91;
  double v92;

  if (!*(_QWORD *)(a1 + 16))
    return;
  if ((*a2 & 0xFFFFFFFE) == 2)
  {
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*a3))) & 1) != 0)
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v10 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        if (a3->i32[0])
          v11 = a3->i32[1] == 0;
        else
          v11 = 1;
        v12 = !v11;
        if (*a4)
          v13 = a4[1] == 0;
        else
          v13 = 1;
        v14 = !v13;
        LODWORD(buf) = 67109376;
        HIDWORD(buf) = v12;
        v83 = 1024;
        LODWORD(v84) = v14;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordRegistration,CLLocationProvider_Type,silo entry invalid,from_valid,%d,to_valid,%d", (uint8_t *)&buf, 0xEu);
      }
      if (!sub_1001BFF7C(115, 2))
        return;
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v15 = !a3->i32[0] || a3->i32[1] == 0;
      v16 = !v15;
      v17 = !*a4 || a4[1] == 0;
      v18 = !v17;
      *(_DWORD *)v69 = 67109376;
      *(_DWORD *)&v69[4] = v16;
      *(_WORD *)&v69[8] = 1024;
      *(_DWORD *)&v69[10] = v18;
      v19 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#locctl,#rec,recordRegistration,CLLocationProvider_Type,silo entry invalid,from_valid,%d,to_valid,%d", v69, 14);
      sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordRegistration(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::RegInfo &)", "%s\n", v19);
      if (v19 == (char *)&buf)
        return;
LABEL_54:
      free(v19);
      return;
    }
    sub_100166054(&v78);
    v28 = (__n128 *)sub_100B303DC();
    sub_100B307F4(v28, v68);
    sub_1005EFF80((uint64_t)&v78, a2, a3, a4, (uint64_t *)v68);
    v81 |= 2u;
    v29 = v80;
    if (!v80)
      operator new();
    *(_DWORD *)(v80 + 492) |= 0x800u;
    v30 = *(_QWORD *)(v29 + 352);
    if (!v30)
      operator new();
    *(_DWORD *)(v30 + 184) |= 0x10000u;
    v31 = *(_QWORD *)(v30 + 128);
    if (!v31)
      operator new();
    v32 = *a5;
    *(_DWORD *)(v31 + 36) |= 1u;
    *(_DWORD *)(v31 + 8) = v32;
    v33 = sub_1001755F0(a6);
    if (!sub_1001752F8(v33))
      __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 8770, "::CLP::LogEntry::PrivateData::LocationProviderNotification_NotificationType_IsValid(value)");
    v34 = *(_DWORD *)(v31 + 36);
    *(_DWORD *)(v31 + 12) = v33;
    *(_DWORD *)(v31 + 36) = v34 | 0xA;
    v35 = *(_QWORD *)(v31 + 24);
    if (!v35)
      operator new();
    v36 = *(_DWORD *)(v35 + 60);
    *(_OWORD *)(v35 + 8) = *(_OWORD *)a7;
    *(_WORD *)(v35 + 33) = *(_WORD *)(a7 + 16);
    *(_DWORD *)(v35 + 60) = v36 | 0x33;
    v37 = sub_1005FCE70((int *)(a7 + 20));
    if (sub_10002A324(v37))
    {
      *(_DWORD *)(v35 + 60) |= 0x100u;
      *(_DWORD *)(v35 + 48) = v37;
      v38 = sub_1005FD054((int *)(a7 + 24));
      if (sub_10008D1F0(v38))
      {
        *(_DWORD *)(v35 + 60) |= 0x200u;
        *(_DWORD *)(v35 + 52) = v38;
        v39 = sub_1005EF67C(a1, (uint64_t)&v78);
        if (*(_BYTE *)(a1 + 8))
        {
          v40 = v39;
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_102147FA8);
          v41 = qword_1022A0028;
          if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
          {
            sub_10142E09C((int *)a2, v69);
            if (SBYTE3(v71) >= 0)
              v42 = v69;
            else
              v42 = *(_BYTE **)v69;
            v59 = v42;
            LODWORD(v61[0]) = a3->i32[0];
            sub_10142E364((int *)v61, v66);
            if (v67 >= 0)
              v43 = v66;
            else
              v43 = (void **)v66[0];
            v63 = *a4;
            v44 = __p;
            sub_10142E364(&v63, __p);
            if (v65 < 0)
              v44 = (void **)__p[0];
            v45 = sub_1001B49F8(*a6);
            v46 = sub_100B303DC();
            v47 = sub_100B309E0(v46);
            LODWORD(buf) = 67110402;
            HIDWORD(buf) = v40;
            v83 = 2080;
            v84 = v59;
            v85 = 2080;
            v86 = v43;
            v87 = 2080;
            v88 = v44;
            v89 = 2080;
            v90 = v45;
            v91 = 2050;
            v92 = v47;
            _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordRegistration,CLLocationProvider_Type,success,%d,message_type,%s,from,%s,to,%s,notification_type,%s,propagation_us,%{public}.3f", (uint8_t *)&buf, 0x3Au);
            if (v65 < 0)
              operator delete(__p[0]);
            if (v67 < 0)
              operator delete(v66[0]);
            if (SBYTE3(v71) < 0)
              operator delete(*(void **)v69);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_102147FA8);
            v51 = qword_1022A0028;
            sub_10142E09C((int *)a2, v66);
            if (v67 >= 0)
              v52 = v66;
            else
              v52 = (void **)v66[0];
            v63 = a3->i32[0];
            v53 = __p;
            sub_10142E364(&v63, __p);
            if (v65 < 0)
              v53 = (void **)__p[0];
            v60 = *a4;
            sub_10142E364(&v60, v61);
            if (v62 >= 0)
              v54 = v61;
            else
              v54 = (void **)v61[0];
            v55 = sub_1001B49F8(*a6);
            v56 = sub_100B303DC();
            v57 = sub_100B309E0(v56);
            *(_DWORD *)v69 = 67110402;
            *(_DWORD *)&v69[4] = v40;
            *(_WORD *)&v69[8] = 2080;
            *(_QWORD *)&v69[10] = v52;
            v70 = 2080;
            v71 = v53;
            v72 = 2080;
            v73 = v54;
            v74 = 2080;
            v75 = v55;
            v76 = 2050;
            v77 = v57;
            v58 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v51, 2, "#locctl,#rec,recordRegistration,CLLocationProvider_Type,success,%d,message_type,%s,from,%s,to,%s,notification_type,%s,propagation_us,%{public}.3f", v69, 58);
            if (v62 < 0)
              operator delete(v61[0]);
            if (v65 < 0)
              operator delete(__p[0]);
            if (v67 < 0)
              operator delete(v66[0]);
            sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordRegistration(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::RegInfo &)", "%s\n", v58);
            if (v58 != (char *)&buf)
              free(v58);
          }
        }
        sub_100166004(&v78);
        return;
      }
      v48 = "::CLP::LogEntry::PrivateData::PipelineOperatingMode_IsValid(value)";
      v49 = 8721;
      v50 = "set_pipeline_operating_mode";
    }
    else
    {
      v48 = "::CLP::LogEntry::PrivateData::OperatingMode_IsValid(value)";
      v49 = 8698;
      v50 = "set_operating_mode";
    }
    __assert_rtn(v50, "CLPLocationController.pb.h", v49, v48);
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102147FA8);
  v20 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    sub_10142E09C((int *)a2, &buf);
    v21 = SBYTE3(v86) >= 0 ? &buf : (void **)buf;
    *(_DWORD *)v69 = 136315138;
    *(_QWORD *)&v69[4] = v21;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordRegistration,CLLocationProvider_Type,unsupported message type,%s", v69, 0xCu);
    if (SBYTE3(v86) < 0)
      operator delete(buf);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102147FA8);
    v22 = qword_1022A0028;
    sub_10142E09C((int *)a2, v69);
    if (SBYTE3(v71) >= 0)
      v23 = v69;
    else
      v23 = *(_BYTE **)v69;
    v78 = 136315138;
    v79 = v23;
    v19 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v22, 2, "#locctl,#rec,recordRegistration,CLLocationProvider_Type,unsupported message type,%s", (const char *)&v78);
    if (SBYTE3(v71) < 0)
      operator delete(*(void **)v69);
    sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordRegistration(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::RegInfo &)", "%s\n", v19);
    if (v19 != (char *)&buf)
      goto LABEL_54;
  }
}

void sub_1005FCD48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  sub_100166004(&a47);
  _Unwind_Resume(a1);
}

uint64_t sub_1005FCE70(int *a1)
{
  int v1;
  uint64_t result;
  NSObject *v4;
  int v5;
  int v6;
  char *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  v1 = *a1;
  if (!*a1)
    return 1;
  if (v1 == 11)
    return 3;
  if (v1 == 10)
    return 2;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102147FA8);
  v4 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v5 = *a1;
    *(_DWORD *)buf = 67109120;
    v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#locctl,#rec,convertOperatingModeTypeToProtobuf,unhandled type,%d", buf, 8u);
  }
  result = sub_1001BFF7C(115, 2);
  if ((_DWORD)result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102147FA8);
    v6 = *a1;
    v8[0] = 67109120;
    v8[1] = v6;
    v7 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#locctl,#rec,convertOperatingModeTypeToProtobuf,unhandled type,%d", v8);
    sub_100512490("Generic", 1, 0, 2, "static CLP::LogEntry::PrivateData::OperatingMode CLLocationControllerRecorder::convertOperatingModeTypeToProtobuf(const CLLocationProvider_Type::OperatingMode &)", "%s\n", v7);
    if (v7 != (char *)buf)
      free(v7);
    return 0;
  }
  return result;
}

uint64_t sub_1005FD054(int *a1)
{
  uint64_t result;
  NSObject *v3;
  int v4;
  int v5;
  char *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  if (!*a1)
    return 1;
  if (*a1 == 1)
    return 2;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102147FA8);
  v3 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v4 = *a1;
    *(_DWORD *)buf = 67109120;
    v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#locctl,#rec,convertPipelineOperatingModeTypeToProtobuf,unhandled type,%d", buf, 8u);
  }
  result = sub_1001BFF7C(115, 2);
  if ((_DWORD)result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102147FA8);
    v5 = *a1;
    v7[0] = 67109120;
    v7[1] = v5;
    v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#locctl,#rec,convertPipelineOperatingModeTypeToProtobuf,unhandled type,%d", v7);
    sub_100512490("Generic", 1, 0, 2, "static CLP::LogEntry::PrivateData::PipelineOperatingMode CLLocationControllerRecorder::convertPipelineOperatingModeTypeToProtobuf(const CLLocationProvider_Type::PipelineOperatingMode &)", "%s\n", v6);
    if (v6 != (char *)buf)
      free(v6);
    return 0;
  }
  return result;
}

void sub_1005FD228(uint64_t a1, int32x4_t *a2, int *a3, uint64_t a4)
{
  NSObject *v6;
  BOOL v7;
  int v8;
  BOOL v9;
  int v10;
  BOOL v11;
  int v12;
  BOOL v13;
  int v14;
  const char *v15;
  uint8_t *v16;
  __n128 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  NSObject *v28;
  void *v29;
  void **v30;
  void **v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  void **v35;
  void **v36;
  void **v37;
  uint64_t v38;
  double v39;
  char *v40;
  char *v41;
  int v42;
  void *v43[2];
  char v44;
  int v45;
  void *__p[2];
  char v47;
  void *v48[2];
  char v49;
  int v50;
  __n128 v51[2];
  void *v52;
  __int16 v53;
  void **v54;
  __int16 v55;
  void **v56;
  __int16 v57;
  void **v58;
  __int16 v59;
  double v60;
  uint64_t v61;
  __int16 v62;
  int v63;
  uint64_t v64;
  int v65;
  uint8_t buf[4];
  int v67;
  __int16 v68;
  void *v69;
  __int16 v70;
  void **v71;
  __int16 v72;
  void **v73;
  __int16 v74;
  double v75;

  if (*(_QWORD *)(a1 + 16))
  {
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*a2))) & 1) != 0)
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102147FA8);
      v6 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        if (a2->i32[0])
          v7 = a2->i32[1] == 0;
        else
          v7 = 1;
        v8 = !v7;
        if (*a3)
          v9 = a3[1] == 0;
        else
          v9 = 1;
        v10 = !v9;
        *(_DWORD *)buf = 67109376;
        v67 = v8;
        v68 = 1024;
        LODWORD(v69) = v10;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLOutdoor_Type,silo entry invalid,from_valid,%d,to_valid,%d", buf, 0xEu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102147FA8);
        if (a2->i32[0])
          v11 = a2->i32[1] == 0;
        else
          v11 = 1;
        v12 = !v11;
        if (*a3)
          v13 = a3[1] == 0;
        else
          v13 = 1;
        v14 = !v13;
        LODWORD(v61) = 67109376;
        HIDWORD(v61) = v12;
        v62 = 1024;
        v63 = v14;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#locctl,#rec,recordMessage,CLOutdoor_Type,silo entry invalid,from_valid,%d,to_valid,%d", &v61, 14);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const CLOutdoor_Type::OutdoorUpdate &)", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
    }
    else
    {
      sub_100166054(&v61);
      v19 = (__n128 *)sub_100B303DC();
      sub_100B307F4(v19, v51);
      v50 = 4;
      sub_1005EFF80((uint64_t)&v61, (unsigned int *)&v50, a2, a3, (uint64_t *)v51);
      v65 |= 2u;
      v20 = v64;
      if (!v64)
        operator new();
      *(_DWORD *)(v64 + 492) |= 0x800u;
      v21 = *(_QWORD *)(v20 + 352);
      if (!v21)
        operator new();
      *(_DWORD *)(v21 + 184) |= 0x20000u;
      v22 = *(_QWORD *)(v21 + 136);
      if (!v22)
        operator new();
      *(_DWORD *)(v22 + 28) |= 1u;
      *(_DWORD *)(v22 + 8) = -1;
      if (!sub_1002BC6D0(1u))
        __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 8949, "::CLP::LogEntry::PrivateData::OutdoorServiceNotification_NotificationType_IsValid(value)");
      v23 = *(_DWORD *)(v22 + 28);
      *(_DWORD *)(v22 + 12) = 1;
      *(_DWORD *)(v22 + 28) = v23 | 6;
      v24 = *(_QWORD *)(v22 + 16);
      if (!v24)
        operator new();
      *(_DWORD *)(v24 + 20) |= 1u;
      v25 = *(_QWORD *)(v24 + 8);
      if (!v25)
        operator new();
      sub_101383CFC(a4, v25);
      v26 = sub_1005EF67C(a1, (uint64_t)&v61);
      if (*(_BYTE *)(a1 + 8))
      {
        v27 = v26;
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102147FA8);
        v28 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
        {
          v29 = &v52;
          sub_10142E09C(&v50, &v52);
          if (SBYTE3(v56) < 0)
            v29 = v52;
          LODWORD(v43[0]) = a2->i32[0];
          v30 = v48;
          sub_10142E364((int *)v43, v48);
          if (v49 < 0)
            v30 = (void **)v48[0];
          v45 = *a3;
          v31 = __p;
          sub_10142E364(&v45, __p);
          if (v47 < 0)
            v31 = (void **)__p[0];
          v32 = sub_100B303DC();
          v33 = sub_100B309E0(v32);
          *(_DWORD *)buf = 67110146;
          v67 = v27;
          v68 = 2080;
          v69 = v29;
          v70 = 2080;
          v71 = v30;
          v72 = 2080;
          v73 = v31;
          v74 = 2050;
          v75 = v33;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLOutdoor_Type,success,%d,message_type,%s,from,%s,to,%s,propagation_us,%{public}.3f", buf, 0x30u);
          if (v47 < 0)
            operator delete(__p[0]);
          if (v49 < 0)
            operator delete(v48[0]);
          if (SBYTE3(v56) < 0)
            operator delete(v52);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_102147FA8);
          v34 = qword_1022A0028;
          v35 = v48;
          sub_10142E09C(&v50, v48);
          if (v49 < 0)
            v35 = (void **)v48[0];
          v45 = a2->i32[0];
          v36 = __p;
          sub_10142E364(&v45, __p);
          if (v47 < 0)
            v36 = (void **)__p[0];
          v42 = *a3;
          v37 = v43;
          sub_10142E364(&v42, v43);
          if (v44 < 0)
            v37 = (void **)v43[0];
          v38 = sub_100B303DC();
          v39 = sub_100B309E0(v38);
          LODWORD(v52) = 67110146;
          HIDWORD(v52) = v27;
          v53 = 2080;
          v54 = v35;
          v55 = 2080;
          v56 = v36;
          v57 = 2080;
          v58 = v37;
          v59 = 2050;
          v60 = v39;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v34, 2, "#locctl,#rec,recordMessage,CLOutdoor_Type,success,%d,message_type,%s,from,%s,to,%s,propagation_us,%{public}.3f", &v52, 48);
          v41 = v40;
          if (v44 < 0)
            operator delete(v43[0]);
          if (v47 < 0)
            operator delete(__p[0]);
          if (v49 < 0)
            operator delete(v48[0]);
          sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const CLOutdoor_Type::OutdoorUpdate &)", "%s\n", v41);
          if (v41 != (char *)buf)
            free(v41);
        }
      }
      sub_100166004(&v61);
    }
  }
}

