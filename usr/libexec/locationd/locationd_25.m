uint64_t sub_100F88224(const void **a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint8_t *v6;
  size_t v7;
  uint8_t *v8;
  size_t v9;
  const void *v10;
  size_t v11;
  _BOOL4 v12;
  _BOOL4 v13;
  NSObject *v14;
  const char *v16;
  uint8_t *v17;
  uint8_t buf[8];
  size_t v19;
  unsigned __int8 v20;
  const mach_header_64 *v21;

  v2 = 0;
  v21 = &_mh_execute_header;
  while (1)
  {
    v3 = *(unsigned int *)((char *)&v21 + v2);
    sub_100F8DED0(*(_DWORD *)((char *)&v21 + v2), buf);
    v4 = *((char *)a1 + 23);
    v5 = (char)v20;
    v6 = *(uint8_t **)buf;
    if ((v20 & 0x80u) == 0)
      v7 = v20;
    else
      v7 = v19;
    if ((v20 & 0x80u) == 0)
      v8 = buf;
    else
      v8 = *(uint8_t **)buf;
    if (v4 >= 0)
      v9 = *((unsigned __int8 *)a1 + 23);
    else
      v9 = (size_t)a1[1];
    if (v4 >= 0)
      v10 = a1;
    else
      v10 = *a1;
    if (v9 >= v7)
      v11 = v7;
    else
      v11 = v9;
    v12 = memcmp(v8, v10, v11) == 0;
    v13 = v9 == v7 && v12;
    if (v5 < 0)
      operator delete(v6);
    if (v13)
      break;
    v2 += 4;
    if (v2 == 8)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v14 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "measTimeStampSourceFromString,unexpected source", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102195E98);
        LOWORD(v21) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "measTimeStampSourceFromString,unexpected source", &v21, 2);
        v17 = (uint8_t *)v16;
        sub_100512490("Generic", 1, 0, 0, "static MeasurementTimeStampSource CLEmergencyController::LocationSettings::Emergency::measTimeStampSourceFromString(const std::string &)", "%s\n", v16);
        if (v17 != buf)
          free(v17);
      }
      return 0;
    }
  }
  return v3;
}

size_t sub_100F88460(_QWORD *a1, _QWORD *a2, int a3)
{
  _QWORD *v4;
  _QWORD *v5;
  size_t v6;
  int v7;
  size_t v8;
  size_t v9;
  _BOOL4 v10;
  NSObject *v11;
  _QWORD *v12;
  _QWORD *v13;
  NSObject *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v18;
  _QWORD *v19;
  const char *v20;
  int *v21;
  _QWORD *v22;
  _QWORD *v23;
  const char *v24;
  int *v25;
  const char *v26;
  _BYTE v27[12];
  __int16 v28;
  _QWORD *v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  int __p;
  _QWORD *__p_4;
  __int16 __p_12;
  _QWORD *__p_14;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;

  v4 = a2;
  v5 = a1;
  if ((a3 & 1) != 0)
    sub_100F8F6B0((std::locale *)v27, (uint64_t)a2, 0);
  if (*((char *)a1 + 23) < 0)
  {
    v6 = a1[1];
    if (!v6)
      goto LABEL_19;
    a1 = (_QWORD *)*a1;
  }
  else
  {
    v6 = *((unsigned __int8 *)a1 + 23);
    if (!*((_BYTE *)a1 + 23))
      goto LABEL_19;
  }
  v7 = *((char *)a2 + 23);
  if (v7 >= 0)
    v8 = *((unsigned __int8 *)a2 + 23);
  else
    v8 = a2[1];
  if (v7 < 0)
    a2 = (_QWORD *)*a2;
  if (v8 >= v6)
    v9 = v6;
  else
    v9 = v8;
  v10 = memcmp(a1, a2, v9) == 0;
  v6 = v8 == v6 && v10;
LABEL_19:
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102195E98);
  v11 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)v5 + 23) >= 0)
      v12 = v5;
    else
      v12 = (_QWORD *)*v5;
    if (*((char *)v4 + 23) >= 0)
      v13 = v4;
    else
      v13 = (_QWORD *)*v4;
    __p = 136315906;
    __p_4 = v12;
    __p_12 = 2080;
    __p_14 = v13;
    v38 = 1024;
    v39 = 0;
    v40 = 1024;
    v41 = v6;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#EmergCon,#EmergSettings,#supl SUPL: haystack,%s,needle,%s,allowWildCard,%d,match,%d", (uint8_t *)&__p, 0x22u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    if (*((char *)v5 + 23) >= 0)
      v22 = v5;
    else
      v22 = (_QWORD *)*v5;
    if (*((char *)v4 + 23) >= 0)
      v23 = v4;
    else
      v23 = (_QWORD *)*v4;
    *(_DWORD *)v27 = 136315906;
    *(_QWORD *)&v27[4] = v22;
    v28 = 2080;
    v29 = v23;
    v30 = 1024;
    v31 = 0;
    v32 = 1024;
    v33 = v6;
    _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergCon,#EmergSettings,#supl SUPL: haystack,%s,needle,%s,allowWildCard,%d,match,%d", v27, 34);
    v25 = (int *)v24;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencySettingsUtilities::stringMatch(const std::string &, const std::string &, BOOL)", "%s\n", v24);
    if (v25 != &__p)
      free(v25);
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102195E98);
  v14 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)v5 + 23) >= 0)
      v15 = v5;
    else
      v15 = (_QWORD *)*v5;
    if (*((char *)v4 + 23) >= 0)
      v16 = v4;
    else
      v16 = (_QWORD *)*v4;
    __p = 136315906;
    __p_4 = v15;
    __p_12 = 2080;
    __p_14 = v16;
    v38 = 1024;
    v39 = a3;
    v40 = 1024;
    v41 = v6;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "#EmergCon,#EmergSettings,#supl SUPL: haystack,%s,needle,%s,allowWildCard,%d,match,%d", (uint8_t *)&__p, 0x22u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    if (*((char *)v5 + 23) >= 0)
      v18 = v5;
    else
      v18 = (_QWORD *)*v5;
    if (*((char *)v4 + 23) >= 0)
      v19 = v4;
    else
      v19 = (_QWORD *)*v4;
    *(_DWORD *)v27 = 136315906;
    *(_QWORD *)&v27[4] = v18;
    v28 = 2080;
    v29 = v19;
    v30 = 1024;
    v31 = a3;
    v32 = 1024;
    v33 = v6;
    LODWORD(v26) = 34;
    _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergCon,#EmergSettings,#supl SUPL: haystack,%s,needle,%s,allowWildCard,%d,match,%d", v27, v26);
    v21 = (int *)v20;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencySettingsUtilities::stringMatch(const std::string &, const std::string &, BOOL)", "%s\n", v20);
    if (v21 != &__p)
      free(v21);
  }
  return v6;
}

#error "100F88B04: call analysis failed (funcsize=100)"

size_t sub_100F88B60(uint64_t *a1, int a2, int a3)
{
  uint64_t *v4;
  size_t v5;
  NSObject *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  uint64_t *v14;
  __int16 v15;
  uint64_t *v16;
  uint8_t buf[4];
  uint64_t *v18;
  __int16 v19;
  uint64_t v20;

  if (a3)
  {
    if (a2)
    {
      sub_100F88E60();
      v4 = &qword_102309340;
    }
    else
    {
      sub_100F88DC8();
      v4 = &qword_102309320;
    }
  }
  else if (a2)
  {
    sub_100F88EF8();
    v4 = &qword_102309360;
  }
  else
  {
    sub_100F88F90();
    v4 = &qword_102309380;
  }
  v5 = sub_100F88460(a1, v4, 1);
  if ((v5 & 1) == 0)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v6 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)a1 + 23) >= 0)
        v7 = a1;
      else
        v7 = (uint64_t *)*a1;
      v8 = (uint64_t)v4;
      if (*((char *)v4 + 23) < 0)
        v8 = *v4;
      *(_DWORD *)buf = 136315394;
      v18 = v7;
      v19 = 2080;
      v20 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#EmergCon,#EmergSettings,#supl #Warning SUPL: [%s], failed to match [%s]", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      if (*((char *)a1 + 23) >= 0)
        v10 = a1;
      else
        v10 = (uint64_t *)*a1;
      if (*((char *)v4 + 23) < 0)
        v4 = (uint64_t *)*v4;
      v13 = 136315394;
      v14 = v10;
      v15 = 2080;
      v16 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EmergCon,#EmergSettings,#supl #Warning SUPL: [%s], failed to match [%s]", (const char *)&v13, 22);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencySettingsUtilities::validHslpAddressSpecification(const std::string &, BOOL, BOOL)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  return v5;
}

uint64_t *sub_100F88DC8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_102309338);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_102309338))
  {
    sub_1015A2E04(&qword_102309320, "^[-[:alnum:]_]+[-[:alnum:]_.]*[.][-[:alnum:]_]+$");
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102309320, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102309338);
  }
  return &qword_102309320;
}

void sub_100F88E48(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_102309338);
  _Unwind_Resume(a1);
}

uint64_t *sub_100F88E60()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_102309358);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_102309358))
  {
    sub_1015A2E04(&qword_102309340, "^[-[:alnum:]_]+([-[:alnum:]_.*]+)?[.][-[:alnum:]_]+$");
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102309340, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102309358);
  }
  return &qword_102309340;
}

void sub_100F88EE0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_102309358);
  _Unwind_Resume(a1);
}

uint64_t *sub_100F88EF8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_102309378);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_102309378))
  {
    sub_1015A2E04(&qword_102309360, "^e-slp[.]([-[:alnum:]_.*]+[.])?[-[:alnum:]_]+$");
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102309360, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102309378);
  }
  return &qword_102309360;
}

void sub_100F88F78(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_102309378);
  _Unwind_Resume(a1);
}

uint64_t *sub_100F88F90()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_102309398);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_102309398))
  {
    sub_1015A2E04(&qword_102309380, "^e-slp[.]([-[:alnum:]_.]+[.])?[-[:alnum:]_]+$");
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102309380, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102309398);
  }
  return &qword_102309380;
}

void sub_100F89010(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_102309398);
  _Unwind_Resume(a1);
}

uint64_t *sub_100F89028()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1023093B8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1023093B8))
  {
    sub_1015A2E04(&qword_1023093A0, "[^-[:alnum:]_.]|([^-[:alnum:]_][^-[:alnum:]_]+)");
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1023093A0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1023093B8);
  }
  return &qword_1023093A0;
}

void sub_100F890A8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1023093B8);
  _Unwind_Resume(a1);
}

BOOL sub_100F890C0(uint64_t *a1, uint64_t a2, int a3)
{
  NSObject *v6;
  uint64_t *v7;
  uint64_t *v8;
  _BOOL8 result;
  uint64_t v10;
  uint64_t *v11;
  const char *v12;
  uint8_t *v13;
  NSObject *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  const char *v19;
  int v20;
  uint64_t *v21;
  __int16 v22;
  uint64_t *v23;
  uint8_t buf[4];
  uint64_t *v25;
  __int16 v26;
  uint64_t *v27;

  sub_100F89028();
  if (sub_100F88460(a1, &qword_1023093A0, 1))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v6 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a1 + 23) >= 0)
        v7 = a1;
      else
        v7 = (uint64_t *)*a1;
      sub_100F89028();
      if (byte_1023093B7 >= 0)
        v8 = &qword_1023093A0;
      else
        v8 = (uint64_t *)qword_1023093A0;
      *(_DWORD *)buf = 136315394;
      v25 = v7;
      v26 = 2080;
      v27 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#EmergCon,#EmergSettings,#supl SUPL: [%s] matched invalidSpecification [%s]", buf, 0x16u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v10 = qword_1022A0088;
      if (*((char *)a1 + 23) < 0)
        a1 = (uint64_t *)*a1;
      sub_100F89028();
      if (byte_1023093B7 >= 0)
        v11 = &qword_1023093A0;
      else
        v11 = (uint64_t *)qword_1023093A0;
      v20 = 136315394;
      v21 = a1;
      v22 = 2080;
      v23 = v11;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 2, "#EmergCon,#EmergSettings,#supl SUPL: [%s] matched invalidSpecification [%s]", (const char *)&v20, 22);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencySettingsUtilities::validHslpAddress(const std::string &, const std::string &, BOOL)", "%s\n", v12);
      if (v13 == buf)
        return 0;
      goto LABEL_21;
    }
  }
  else if ((sub_100F88460(a1, (_QWORD *)a2, a3) & 1) != 0)
  {
    return 1;
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v14 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a1 + 23) >= 0)
        v15 = a1;
      else
        v15 = (uint64_t *)*a1;
      if (*(char *)(a2 + 23) >= 0)
        v16 = (uint64_t *)a2;
      else
        v16 = *(uint64_t **)a2;
      *(_DWORD *)buf = 136315394;
      v25 = v15;
      v26 = 2080;
      v27 = v16;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "#EmergCon,#EmergSettings,#supl SUPL: [%s], failed to match [%s]", buf, 0x16u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      if (*((char *)a1 + 23) >= 0)
        v17 = a1;
      else
        v17 = (uint64_t *)*a1;
      if (*(char *)(a2 + 23) >= 0)
        v18 = (uint64_t *)a2;
      else
        v18 = *(uint64_t **)a2;
      v20 = 136315394;
      v21 = v17;
      v22 = 2080;
      v23 = v18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergCon,#EmergSettings,#supl SUPL: [%s], failed to match [%s]", (const char *)&v20, 22);
      v13 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLEmergencySettingsUtilities::validHslpAddress(const std::string &, const std::string &, BOOL)", "%s\n", v19);
      if (v13 == buf)
        return 0;
LABEL_21:
      free(v13);
      return 0;
    }
  }
  return result;
}

uint64_t sub_100F894B4(uint64_t a1, int a2, int a3, int a4)
{
  BOOL v4;
  int v5;
  BOOL v7;
  _BOOL4 v8;
  BOOL v9;
  int v10;
  uint64_t result;
  BOOL v12;
  int v13;
  BOOL v14;
  _BOOL4 v15;
  BOOL v16;
  int v17;
  BOOL v18;
  _BOOL4 v19;
  BOOL v20;
  _BOOL4 v21;
  BOOL v22;
  int v23;
  BOOL v24;
  _BOOL4 v25;
  int v26;

  if (a2)
    v4 = 0;
  else
    v4 = a3 == 3;
  v5 = v4;
  if (v5 == 1 && a4 == 0)
    return 1;
  v7 = !a2 && a3 == 1;
  v8 = !v7;
  if (v7 && !a4)
    return 1;
  v9 = !a2 && a3 == 4;
  v10 = v9;
  if (v9 && !a4)
    return 1;
  if (a2)
    v12 = 0;
  else
    v12 = a3 == 2;
  v13 = v12;
  if (v12 && !a4)
    return 4;
  v14 = !a2 && a3 == 5;
  v15 = !v14;
  if (v14 && !a4)
    return 4;
  v16 = a2 == 1 && a3 == 3;
  v17 = v16;
  if (v16 && !a4)
    return 6;
  v18 = a2 == 1 && a3 == 1;
  v19 = !v18;
  if (v18 && !a4)
    return 6;
  v20 = a2 == 1 && a3 == 4;
  v21 = v20;
  if (v20 && !a4)
    return 6;
  v22 = a2 == 1 && a3 == 2;
  v23 = !v22;
  if (v22 && !a4)
    return 9;
  v24 = a2 == 1 && a3 == 5;
  v25 = !v24;
  if (v24 && !a4)
    return 9;
  v26 = a4 ^ 1;
  if (v10 == (v5 ^ v8) && !v26)
    return 11;
  if ((v13 ^ v15 | v26) != 1)
    return 13;
  if ((v21 ^ v17 ^ v19 | v26) != 1)
    return 12;
  result = 14;
  if ((v26 | v23) == 1)
  {
    if (v26 | v25)
      return 0;
    else
      return 14;
  }
  return result;
}

uint64_t sub_100F89610(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double Current;
  NSDate *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  char *v32;
  __int128 v33;
  __int128 v34;
  NSObject *v35;
  int v37;
  int v38;
  int v39;
  const char *v40;
  uint8_t *v41;
  int v42;
  int v43;
  int v44;
  _BYTE *v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  _BYTE *v53;
  uint64_t v54;
  _BYTE *__dst;
  uint64_t v56;
  _QWORD block[5];
  _WORD v58[8];
  uint8_t buf[16];
  uint64_t v60;

  *(_DWORD *)a1 = -1;
  v4 = a1 + 8;
  if (byte_102311A6F < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 8), (void *)xmmword_102311A58, *((unint64_t *)&xmmword_102311A58 + 1));
  }
  else
  {
    v5 = xmmword_102311A58;
    *(_QWORD *)(a1 + 24) = unk_102311A68;
    *(_OWORD *)v4 = v5;
  }
  *(_WORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = -1;
  *(_BYTE *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 44) = 0;
  v6 = (_BYTE *)(a1 + 48);
  if ((byte_102311A6F & 0x80000000) == 0)
  {
    *(_OWORD *)v6 = xmmword_102311A58;
    *(_QWORD *)(a1 + 64) = unk_102311A68;
    v7 = a1 + 72;
LABEL_7:
    *(_OWORD *)v7 = xmmword_102311A58;
    *(_QWORD *)(v7 + 16) = unk_102311A68;
    v8 = a1 + 96;
LABEL_8:
    *(_OWORD *)v8 = xmmword_102311A58;
    *(_QWORD *)(v8 + 16) = unk_102311A68;
    v9 = a1 + 120;
LABEL_9:
    *(_OWORD *)v9 = xmmword_102311A58;
    *(_QWORD *)(v9 + 16) = unk_102311A68;
    *(_DWORD *)(a1 + 144) = 0;
    v10 = a1 + 152;
LABEL_10:
    *(_OWORD *)v10 = xmmword_102311A58;
    *(_QWORD *)(v10 + 16) = unk_102311A68;
    v11 = a1 + 176;
LABEL_11:
    *(_OWORD *)v11 = xmmword_102311A58;
    *(_QWORD *)(v11 + 16) = unk_102311A68;
    *(_DWORD *)(a1 + 200) = 0;
    v12 = a1 + 208;
LABEL_12:
    *(_OWORD *)v12 = xmmword_102311A58;
    *(_QWORD *)(v12 + 16) = unk_102311A68;
    v13 = a1 + 232;
LABEL_13:
    *(_OWORD *)v13 = xmmword_102311A58;
    *(_QWORD *)(v13 + 16) = unk_102311A68;
    *(_DWORD *)(a1 + 256) = 0;
    v14 = a1 + 264;
LABEL_14:
    *(_OWORD *)v14 = xmmword_102311A58;
    *(_QWORD *)(v14 + 16) = unk_102311A68;
    v15 = a1 + 288;
LABEL_15:
    *(_OWORD *)v15 = xmmword_102311A58;
    *(_QWORD *)(v15 + 16) = unk_102311A68;
    *(_DWORD *)(a1 + 312) = 0;
    v16 = a1 + 320;
LABEL_16:
    *(_OWORD *)v16 = xmmword_102311A58;
    *(_QWORD *)(v16 + 16) = unk_102311A68;
    v17 = a1 + 344;
LABEL_17:
    v47 = v10;
    v48 = v8;
    v49 = v9;
    v50 = v7;
    *(_OWORD *)v17 = xmmword_102311A58;
    *(_QWORD *)(v17 + 16) = unk_102311A68;
    *(_DWORD *)(a1 + 368) = 0;
    v18 = a1 + 376;
LABEL_18:
    v51 = v11;
    *(_OWORD *)v18 = xmmword_102311A58;
    v45 = (_BYTE *)v18;
    *(_QWORD *)(v18 + 16) = unk_102311A68;
    v19 = a1 + 400;
LABEL_19:
    *(_OWORD *)v19 = xmmword_102311A58;
    *(_QWORD *)(v19 + 16) = unk_102311A68;
    *(_QWORD *)(a1 + 424) = 0xFFFFFFFF00000000;
    *(_WORD *)(a1 + 432) = 0;
    v20 = a1 + 440;
LABEL_20:
    v46 = (_BYTE *)v17;
    v52 = (_BYTE *)v16;
    v53 = (_BYTE *)v15;
    v54 = v13;
    __dst = (_BYTE *)v14;
    v56 = v12;
    *(_OWORD *)v20 = xmmword_102311A58;
    *(_QWORD *)(v20 + 16) = unk_102311A68;
    v21 = a1 + 464;
LABEL_21:
    *(_OWORD *)v21 = xmmword_102311A58;
    *(_QWORD *)(v21 + 16) = unk_102311A68;
    v22 = a1 + 488;
LABEL_22:
    *(_OWORD *)v22 = xmmword_102311A58;
    *(_QWORD *)(v22 + 16) = unk_102311A68;
    goto LABEL_23;
  }
  sub_100115CE4(v6, (void *)xmmword_102311A58, *((unint64_t *)&xmmword_102311A58 + 1));
  v7 = a1 + 72;
  if ((byte_102311A6F & 0x80000000) == 0)
    goto LABEL_7;
  sub_100115CE4((_BYTE *)(a1 + 72), (void *)xmmword_102311A58, *((unint64_t *)&xmmword_102311A58 + 1));
  v8 = a1 + 96;
  if ((byte_102311A6F & 0x80000000) == 0)
    goto LABEL_8;
  sub_100115CE4((_BYTE *)(a1 + 96), (void *)xmmword_102311A58, *((unint64_t *)&xmmword_102311A58 + 1));
  v9 = a1 + 120;
  if ((byte_102311A6F & 0x80000000) == 0)
    goto LABEL_9;
  sub_100115CE4((_BYTE *)(a1 + 120), (void *)xmmword_102311A58, *((unint64_t *)&xmmword_102311A58 + 1));
  v37 = byte_102311A6F;
  *(_DWORD *)(a1 + 144) = 0;
  v10 = a1 + 152;
  if ((v37 & 0x80000000) == 0)
    goto LABEL_10;
  sub_100115CE4((_BYTE *)(a1 + 152), (void *)xmmword_102311A58, *((unint64_t *)&xmmword_102311A58 + 1));
  v11 = a1 + 176;
  if ((byte_102311A6F & 0x80000000) == 0)
    goto LABEL_11;
  sub_100115CE4((_BYTE *)(a1 + 176), (void *)xmmword_102311A58, *((unint64_t *)&xmmword_102311A58 + 1));
  v38 = byte_102311A6F;
  *(_DWORD *)(a1 + 200) = 0;
  if ((v38 & 0x80000000) == 0)
  {
    v12 = a1 + 208;
    goto LABEL_12;
  }
  v56 = a1 + 208;
  sub_100115CE4((_BYTE *)(a1 + 208), (void *)xmmword_102311A58, *((unint64_t *)&xmmword_102311A58 + 1));
  v13 = a1 + 232;
  if ((byte_102311A6F & 0x80000000) == 0)
  {
    v12 = a1 + 208;
    goto LABEL_13;
  }
  v54 = a1 + 232;
  sub_100115CE4((_BYTE *)v13, (void *)xmmword_102311A58, *((unint64_t *)&xmmword_102311A58 + 1));
  v39 = byte_102311A6F;
  *(_DWORD *)(a1 + 256) = 0;
  __dst = (_BYTE *)(a1 + 264);
  if ((v39 & 0x80000000) == 0)
  {
    v14 = a1 + 264;
    v12 = a1 + 208;
    v13 = a1 + 232;
    goto LABEL_14;
  }
  sub_100115CE4(__dst, (void *)xmmword_102311A58, *((unint64_t *)&xmmword_102311A58 + 1));
  v53 = (_BYTE *)(a1 + 288);
  if ((byte_102311A6F & 0x80000000) == 0)
  {
    v14 = a1 + 264;
    v12 = a1 + 208;
    v15 = a1 + 288;
    v13 = a1 + 232;
    goto LABEL_15;
  }
  v50 = a1 + 72;
  v51 = a1 + 176;
  v47 = a1 + 152;
  v48 = a1 + 96;
  v49 = a1 + 120;
  sub_100115CE4(v53, (void *)xmmword_102311A58, *((unint64_t *)&xmmword_102311A58 + 1));
  v42 = byte_102311A6F;
  *(_DWORD *)(a1 + 312) = 0;
  v52 = (_BYTE *)(a1 + 320);
  if ((v42 & 0x80000000) == 0)
  {
    v9 = a1 + 120;
    v7 = a1 + 72;
    v10 = a1 + 152;
    v8 = a1 + 96;
    v11 = a1 + 176;
    v16 = a1 + 320;
    v14 = a1 + 264;
    v12 = a1 + 208;
    v15 = a1 + 288;
    v13 = a1 + 232;
    goto LABEL_16;
  }
  sub_100115CE4(v52, (void *)xmmword_102311A58, *((unint64_t *)&xmmword_102311A58 + 1));
  v46 = (_BYTE *)(a1 + 344);
  if ((byte_102311A6F & 0x80000000) == 0)
  {
    v9 = a1 + 120;
    v7 = a1 + 72;
    v10 = a1 + 152;
    v8 = a1 + 96;
    v11 = a1 + 176;
    v16 = a1 + 320;
    v14 = a1 + 264;
    v12 = a1 + 208;
    v15 = a1 + 288;
    v13 = a1 + 232;
    v17 = a1 + 344;
    goto LABEL_17;
  }
  sub_100115CE4(v46, (void *)xmmword_102311A58, *((unint64_t *)&xmmword_102311A58 + 1));
  v43 = byte_102311A6F;
  *(_DWORD *)(a1 + 368) = 0;
  v45 = (_BYTE *)(a1 + 376);
  if ((v43 & 0x80000000) == 0)
  {
    v11 = a1 + 176;
    v16 = a1 + 320;
    v14 = a1 + 264;
    v12 = a1 + 208;
    v15 = a1 + 288;
    v13 = a1 + 232;
    v18 = a1 + 376;
    v17 = a1 + 344;
    goto LABEL_18;
  }
  sub_100115CE4(v45, (void *)xmmword_102311A58, *((unint64_t *)&xmmword_102311A58 + 1));
  v19 = a1 + 400;
  if ((byte_102311A6F & 0x80000000) == 0)
  {
    v14 = a1 + 264;
    v12 = a1 + 208;
    v15 = a1 + 288;
    v13 = a1 + 232;
    v16 = a1 + 320;
    v17 = a1 + 344;
    goto LABEL_19;
  }
  sub_100115CE4((_BYTE *)(a1 + 400), (void *)xmmword_102311A58, *((unint64_t *)&xmmword_102311A58 + 1));
  v44 = byte_102311A6F;
  *(_QWORD *)(a1 + 424) = 0xFFFFFFFF00000000;
  *(_WORD *)(a1 + 432) = 0;
  v20 = a1 + 440;
  if ((v44 & 0x80000000) == 0)
  {
    v14 = a1 + 264;
    v12 = a1 + 208;
    v15 = a1 + 288;
    v13 = a1 + 232;
    v16 = a1 + 320;
    v17 = a1 + 344;
    goto LABEL_20;
  }
  sub_100115CE4((_BYTE *)(a1 + 440), (void *)xmmword_102311A58, *((unint64_t *)&xmmword_102311A58 + 1));
  v21 = a1 + 464;
  if ((byte_102311A6F & 0x80000000) == 0)
    goto LABEL_21;
  sub_100115CE4((_BYTE *)(a1 + 464), (void *)xmmword_102311A58, *((unint64_t *)&xmmword_102311A58 + 1));
  v22 = a1 + 488;
  if ((byte_102311A6F & 0x80000000) == 0)
    goto LABEL_22;
  sub_100115CE4((_BYTE *)(a1 + 488), (void *)xmmword_102311A58, *((unint64_t *)&xmmword_102311A58 + 1));
LABEL_23:
  *(_WORD *)(a1 + 512) = 0;
  *(_DWORD *)(a1 + 516) = -1;
  *(_BYTE *)(a1 + 520) = 0;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_DWORD *)(a1 + 600) = 1065353216;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_DWORD *)(a1 + 640) = 1065353216;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_DWORD *)(a1 + 680) = 1065353216;
  *(_QWORD *)(a1 + 688) = 0;
  *(_BYTE *)(a1 + 696) = 0;
  *(_QWORD *)(a1 + 528) = a2;
  if (a2)
  {
    Current = CFAbsoluteTimeGetCurrent();
    *(double *)(a1 + 544) = Current;
    sub_100F7E2B4(*(int64x2_t **)(a1 + 528), Current);
    v24 = +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", *(double *)(a1 + 544));
    v25 = objc_alloc_init((Class)NSDateFormatter);
    objc_msgSend(v25, "setLocale:", objc_msgSend(objc_alloc((Class)NSLocale), "initWithLocaleIdentifier:", CFSTR("en_US_POSIX")));
    objc_msgSend(v25, "setTimeZone:", +[NSTimeZone localTimeZone](NSTimeZone, "localTimeZone"));
    objc_msgSend(v25, "setDateFormat:", CFSTR("HH"));
    *(_DWORD *)a1 = objc_msgSend(objc_msgSend(v25, "stringFromDate:", v24), "intValue");
    if (objc_opt_class(SOSUtilities, v26))
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100F8A13C;
      block[3] = &unk_10212ECA0;
      block[4] = a1;
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
    }
    v28 = sub_100F79058(*(unsigned int *)(*(_QWORD *)(a1 + 528) + 244), v27);
    sub_100F789A8(v28, buf);
    if (*(char *)(a1 + 31) < 0)
      operator delete(*(void **)v4);
    *(_OWORD *)v4 = *(_OWORD *)buf;
    *(_QWORD *)(v4 + 16) = v60;
    v30 = *(_QWORD *)(a1 + 528);
    *(_BYTE *)(a1 + 32) = (*(_DWORD *)(v30 + 244) < 0x12u) & (0x20280u >> *(_DWORD *)(v30 + 244));
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(v30 + 640);
    *(_DWORD *)(a1 + 44) = *(_QWORD *)(v30 + 632);
    if (objc_opt_class(SOSUtilities, v29) && sub_1000C4240())
    {
      *(_BYTE *)(a1 + 520) = +[SOSUtilities shouldPlayAudioDuringCountdown](SOSUtilities, "shouldPlayAudioDuringCountdown");
      *(_BYTE *)(a1 + 512) = +[SOSUtilities isCallWithVolumeLockHoldEnabled](SOSUtilities, "isCallWithVolumeLockHoldEnabled");
      *(_BYTE *)(a1 + 513) = +[SOSUtilities isCallWithSideButtonPressesEnabled](SOSUtilities, "isCallWithSideButtonPressesEnabled");
      *(_DWORD *)(a1 + 516) = +[SOSUtilities SOSTriggerClickCount](SOSUtilities, "SOSTriggerClickCount");
    }
    sub_100F8A374(*(_DWORD *)(*(_QWORD *)(a1 + 528) + 536), buf);
    if (*(char *)(a1 + 463) < 0)
      operator delete(*(void **)v20);
    v31 = *(_OWORD *)buf;
    *(_QWORD *)(v20 + 16) = v60;
    *(_OWORD *)v20 = v31;
    if (*(_DWORD *)(*(_QWORD *)(a1 + 528) + 540))
      v32 = "Mounted";
    else
      v32 = "NotMounted";
    sub_1015A2E04(buf, v32);
    if (*(char *)(v21 + 23) < 0)
      operator delete(*(void **)v21);
    v33 = *(_OWORD *)buf;
    *(_QWORD *)(v21 + 16) = v60;
    *(_OWORD *)v21 = v33;
    sub_100F8A388(*(_DWORD *)(*(_QWORD *)(a1 + 528) + 544), buf);
    if (*(char *)(a1 + 511) < 0)
      operator delete(*(void **)v22);
    v34 = *(_OWORD *)buf;
    *(_QWORD *)(v22 + 16) = v60;
    *(_OWORD *)v22 = v34;
    if (sub_1000C4240())
      *(_BYTE *)(a1 + 433) = *(_BYTE *)(*(_QWORD *)(a1 + 528) + 516);
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v35 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "#EmergCon,EmergencyCallTriggerMetric,Emergency Controller pointer is null", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v58[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EmergCon,EmergencyCallTriggerMetric,Emergency Controller pointer is null", v58, 2, a1 + 48, v45, v46, v47, v48, v49, v50, v51, v52,
        v53,
        v54,
        __dst,
        v56);
      v41 = (uint8_t *)v40;
      sub_100512490("Generic", 1, 0, 0, "CLEmergencyController::EmergencyCallTriggerMetric::EmergencyCallTriggerMetric(CLEmergencyController *)", "%s\n", v40);
      if (v41 != buf)
        free(v41);
    }
  }
  return a1;
}

void sub_100F89EB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, void **a12, uint64_t a13, void **a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19, uint64_t a20,uint64_t a21,void **a22,void **a23)
{
  char *v23;
  void **v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;

  if (*(char *)(v25 + 23) < 0)
    operator delete(*(void **)v25);
  if (v23[463] < 0)
    operator delete(*v27);
  if (*(char *)(v26 + 23) < 0)
    operator delete(*(void **)v26);
  if (v23[399] < 0)
    operator delete(*a12);
  if (*(char *)(a13 + 23) < 0)
    operator delete(*(void **)a13);
  if (v23[343] < 0)
    operator delete(*a19);
  if (*(char *)(a20 + 23) < 0)
    operator delete(*(void **)a20);
  if (v23[287] < 0)
    operator delete(*a22);
  if (*(char *)(a21 + 23) < 0)
    operator delete(*(void **)a21);
  if (v23[231] < 0)
    operator delete(*a23);
  if (*(char *)(a18 + 23) < 0)
    operator delete(*(void **)a18);
  if (v23[175] < 0)
    operator delete(*a14);
  if (*(char *)(a16 + 23) < 0)
    operator delete(*(void **)a16);
  if (v23[119] < 0)
    operator delete(*a15);
  if (*(char *)(a17 + 23) < 0)
    operator delete(*(void **)a17);
  if (v23[71] < 0)
    operator delete(*a11);
  if (v23[31] < 0)
    operator delete(*v24);
  _Unwind_Resume(exception_object);
}

void sub_100F8A13C(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  _QWORD block[5];
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  v1 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v1 + 688) = -[SOSManager currentSOSInteractiveState](+[SOSManager sharedInstance](SOSManager, "sharedInstance"), "currentSOSInteractiveState");
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102195E98);
  v2 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(v1 + 688);
    *(_DWORD *)buf = 67109120;
    v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#EmergCon,currentSOSInteractiveState, at call start is %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v5 = *(_QWORD *)(v1 + 688);
    v9[0] = 67109120;
    v9[1] = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EmergCon,currentSOSInteractiveState, at call start is %d", v9);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "CLEmergencyController::EmergencyCallTriggerMetric::EmergencyCallTriggerMetric(CLEmergencyController *)_block_invoke", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  v4 = objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(v1 + 528) + 8), "silo"), "queue");
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100F8A348;
  block[3] = &unk_10212ECA0;
  block[4] = v1;
  dispatch_async(v4, block);
}

uint64_t sub_100F8A348(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  if (*(_DWORD *)(*(_QWORD *)(v1 + 528) + 244) == 5 && !*(_QWORD *)(v1 + 688))
    *(_BYTE *)(v1 + 696) = 1;
  return result;
}

_QWORD *sub_100F8A374@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_1015A2E04(a2, off_1021968D8[a1]);
}

_QWORD *sub_100F8A388@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_1015A2E04(a2, off_102196918[a1]);
}

uint64_t sub_100F8A39C(uint64_t a1)
{

  *(_QWORD *)(a1 + 536) = 0;
  sub_100067AC4(a1 + 648);
  sub_100067AC4(a1 + 608);
  sub_100067AC4(a1 + 568);
  if (*(char *)(a1 + 511) < 0)
    operator delete(*(void **)(a1 + 488));
  if (*(char *)(a1 + 487) < 0)
    operator delete(*(void **)(a1 + 464));
  if (*(char *)(a1 + 463) < 0)
    operator delete(*(void **)(a1 + 440));
  if (*(char *)(a1 + 423) < 0)
    operator delete(*(void **)(a1 + 400));
  if (*(char *)(a1 + 399) < 0)
    operator delete(*(void **)(a1 + 376));
  if (*(char *)(a1 + 367) < 0)
    operator delete(*(void **)(a1 + 344));
  if (*(char *)(a1 + 343) < 0)
    operator delete(*(void **)(a1 + 320));
  if (*(char *)(a1 + 311) < 0)
    operator delete(*(void **)(a1 + 288));
  if (*(char *)(a1 + 287) < 0)
    operator delete(*(void **)(a1 + 264));
  if (*(char *)(a1 + 255) < 0)
    operator delete(*(void **)(a1 + 232));
  if (*(char *)(a1 + 231) < 0)
    operator delete(*(void **)(a1 + 208));
  if (*(char *)(a1 + 199) < 0)
    operator delete(*(void **)(a1 + 176));
  if (*(char *)(a1 + 175) < 0)
    operator delete(*(void **)(a1 + 152));
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_100F8A504(uint64_t a1, void *a2, void *a3)
{
  unsigned int *v3;
  NSObject *v5;
  const char *v6;
  NSObject *v9;
  NSObject *v10;
  id v11;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  uint8_t *v16;
  uint64_t v17;
  const char *v18;
  uint8_t *v19;
  _BYTE v20[24];
  uint8_t buf[4];
  id v22;
  __int16 v23;
  id v24;

  v3 = *(unsigned int **)(a1 + 48);
  if (a3)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v5 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v22 = a3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#EmergCon,initiateCallTriggerMetric,error querying motion activity,%{public}@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      *(_DWORD *)v20 = 138543362;
      *(_QWORD *)&v20[4] = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EmergCon,initiateCallTriggerMetric,error querying motion activity,%{public}@", v20, 12, *(_OWORD *)v20, *(_QWORD *)&v20[16]);
LABEL_27:
      v16 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyController::EmergencyCallTriggerMetric::initiateCallTriggerMetric()_block_invoke", "%s\n", v6);
      if (v16 != buf)
        free(v16);
    }
  }
  else if (a2 && objc_msgSend(a2, "count"))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v9 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349056;
      v22 = objc_msgSend(a2, "count");
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#EmergCon,initiateCallTriggerMetric,received %{public}lu responses for motion activity", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v17 = qword_1022A0088;
      *(_DWORD *)v20 = 134349056;
      *(_QWORD *)&v20[4] = objc_msgSend(a2, "count");
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v17, 0, "#EmergCon,initiateCallTriggerMetric,received %{public}lu responses for motion activity", v20, 12);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::EmergencyCallTriggerMetric::initiateCallTriggerMetric()_block_invoke", "%s\n", v18);
      if (v19 != buf)
        free(v19);
    }
    sub_100F8A98C((uint64_t)v3, a2);
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v10 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      v11 = objc_msgSend(*(id *)(a1 + 32), "UTF8String");
      v12 = objc_msgSend(*(id *)(a1 + 40), "UTF8String");
      *(_DWORD *)buf = 136446466;
      v22 = v11;
      v23 = 2082;
      v24 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#EmergCon,initiateCallTriggerMetric,no motion activity returned for duration %{public}s to %{public}s", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v13 = qword_1022A0088;
      v14 = objc_msgSend(*(id *)(a1 + 32), "UTF8String");
      v15 = objc_msgSend(*(id *)(a1 + 40), "UTF8String");
      *(_DWORD *)v20 = 136446466;
      *(_QWORD *)&v20[4] = v14;
      *(_WORD *)&v20[12] = 2082;
      *(_QWORD *)&v20[14] = v15;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v13, 16, "#EmergCon,initiateCallTriggerMetric,no motion activity returned for duration %{public}s to %{public}s", v20, 22, *(_OWORD *)v20, *(_QWORD *)&v20[16]);
      goto LABEL_27;
    }
  }
  sub_100F8AFB8(v3);
}

void sub_100F8A98C(uint64_t a1, void *a2)
{
  void *v2;
  double v4;
  id v5;
  unint64_t v6;
  double v7;
  double v8;
  id v9;
  double v10;
  double v11;
  double v12;
  double v13;
  id v14;
  id v15;
  NSObject *v16;
  id v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  double v26;
  double v27;
  id v28;
  double v29;
  id v30;
  id v31;
  NSObject *v32;
  const char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  _WORD v46[8];
  _BYTE buf[28];
  __int16 v48;
  unsigned int v49;
  __int16 v50;
  unsigned int v51;
  __int16 v52;
  unsigned int v53;
  __int16 v54;
  unsigned int v55;
  __int16 v56;
  unsigned int v57;
  __int16 v58;
  unsigned int v59;
  __int16 v60;
  unsigned int v61;

  if (a2 && (v2 = a2, objc_msgSend(a2, "count")))
  {
    v45 = a1;
    v4 = *(double *)(a1 + 544);
    v5 = objc_msgSend(v2, "count");
    v43 = v5;
    if ((_DWORD)v5)
    {
      v6 = 0;
      v7 = v4 + -60.0;
      v42 = ((_DWORD)v5 - 1);
      v8 = v4 + -1800.0;
      v37 = a1 + 72;
      v38 = a1 + 48;
      v40 = a1 + 608;
      v41 = a1 + 648;
      v39 = a1 + 568;
      v44 = v2;
      do
      {
        v9 = objc_msgSend(v2, "objectAtIndexedSubscript:", v6);
        objc_msgSend(objc_msgSend(v9, "startDate"), "timeIntervalSinceReferenceDate");
        v11 = v10;
        if (v6 >= v42)
        {
          v13 = *(double *)(v45 + 560);
        }
        else
        {
          objc_msgSend(objc_msgSend(objc_msgSend(v44, "objectAtIndexedSubscript:", v6 + 1), "startDate"), "timeIntervalSinceReferenceDate");
          v13 = v12;
        }
        v14 = objc_alloc_init((Class)NSDateFormatter);
        objc_msgSend(v14, "setLocale:", objc_msgSend(objc_alloc((Class)NSLocale), "initWithLocaleIdentifier:", CFSTR("en_US_POSIX")));
        objc_msgSend(v14, "setTimeZone:", +[NSTimeZone localTimeZone](NSTimeZone, "localTimeZone"));
        objc_msgSend(v14, "setDateFormat:", CFSTR("yyyy-MM-dd HH:mm:ss"));
        v15 = objc_msgSend(v14, "stringFromDate:", objc_msgSend(v9, "startDate"));
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102195E98);
        v16 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          v17 = objc_msgSend(v15, "UTF8String");
          v18 = objc_msgSend(v9, "stationary");
          v19 = objc_msgSend(v9, "walking");
          v20 = objc_msgSend(v9, "running");
          v21 = objc_msgSend(v9, "automotive");
          v22 = objc_msgSend(v9, "cycling");
          v23 = objc_msgSend(v9, "unknown");
          v24 = objc_msgSend(v9, "confidence");
          *(_DWORD *)buf = 68291074;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          *(_WORD *)&buf[18] = 2082;
          *(_QWORD *)&buf[20] = v17;
          v48 = 1026;
          v49 = v18;
          v50 = 1026;
          v51 = v19;
          v52 = 1026;
          v53 = v20;
          v54 = 1026;
          v55 = v21;
          v56 = 1026;
          v57 = v22;
          v58 = 1026;
          v59 = v23;
          v60 = 1026;
          v61 = v24;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EmergCon,handleMotionActivityResponse,\", \"Date\":%{public, location:escape_only}s, \"stationary\":%{public}hhd, \"walking\":%{public}hhd, \"running\":%{public}hhd, \"automotive\":%{public}hhd, \"cycling\":%{public}hhd, \"unknown\":%{public}hhd, \"confidence\":%{public}d}", buf, 0x46u);
        }
        if ((objc_msgSend(v9, "automotive") & 1) != 0)
        {
          v25 = 3;
        }
        else if ((objc_msgSend(v9, "cycling") & 1) != 0)
        {
          v25 = 4;
        }
        else if ((objc_msgSend(v9, "running") & 1) != 0)
        {
          v25 = 2;
        }
        else if ((objc_msgSend(v9, "walking") & 1) != 0)
        {
          v25 = 1;
        }
        else if (objc_msgSend(v9, "stationary"))
        {
          v25 = 0;
        }
        else
        {
          v25 = 5;
        }
        v26 = *(double *)(v45 + 544);
        v27 = *(double *)(v45 + 560);
        v28 = objc_msgSend(v9, "confidence");
        sub_100F8BBAC(v26, v27, v11, v13, (uint64_t)v28, v41, v25, (uint64_t)v28);
        v29 = *(double *)(v45 + 544);
        if (v11 <= v29 && v13 >= v29)
        {
          sub_100F8BF78(v25, buf);
          if (*(char *)(v45 + 71) < 0)
            operator delete(*(void **)v38);
          *(_OWORD *)v38 = *(_OWORD *)buf;
          *(_QWORD *)(v38 + 16) = *(_QWORD *)&buf[16];
          sub_100F8BFA4(objc_msgSend(v9, "confidence"), buf);
          if (*(char *)(v45 + 95) < 0)
            operator delete(*(void **)v37);
          *(_OWORD *)v37 = *(_OWORD *)buf;
          *(_QWORD *)(v37 + 16) = *(_QWORD *)&buf[16];
          v29 = *(double *)(v45 + 544);
        }
        v30 = objc_msgSend(v9, "confidence");
        sub_100F8BBAC(v7, v29, v11, v13, (uint64_t)v30, v40, v25, (uint64_t)v30);
        v31 = objc_msgSend(v9, "confidence");
        sub_100F8BBAC(v8, v7, v11, v13, (uint64_t)v31, v39, v25, (uint64_t)v31);
        ++v6;
        v2 = v44;
      }
      while (v43 != v6);
    }
    sub_100F8C04C((uint64_t)v5, v45 + 648, v45 + 320, (std::string *)(v45 + 344), (unsigned int *)(v45 + 368), v45 + 376, (std::string *)(v45 + 400), (unsigned int *)(v45 + 424));
    sub_100F8C04C(v35, v45 + 608, v45 + 208, (std::string *)(v45 + 232), (unsigned int *)(v45 + 256), v45 + 264, (std::string *)(v45 + 288), (unsigned int *)(v45 + 312));
    sub_100F8C04C(v36, v45 + 568, v45 + 96, (std::string *)(v45 + 120), (unsigned int *)(v45 + 144), v45 + 152, (std::string *)(v45 + 176), (unsigned int *)(v45 + 200));
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v32 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "#EmergCon,handleMotionActivityResponse,No motion activities reported", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v46[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EmergCon,handleMotionActivityResponse,No motion activities reported", v46, 2);
      v34 = (char *)v33;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::EmergencyCallTriggerMetric::handleMotionActivityResponse(NSArray<CMMotionActivity *> *)", "%s\n", v33);
      if (v34 != buf)
        free(v34);
    }
  }
}

void sub_100F8AFB8(unsigned int *a1)
{
  id v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int *v28;
  NSObject *v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  NSObject *v47;
  unsigned int v48;
  int v49;
  int v50;
  unsigned int v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  NSObject *v55;
  NSObject *v56;
  const char *v57;
  uint8_t *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD block[5];
  __int16 v65[8];
  uint8_t buf[4];
  int v67;
  __int16 v68;
  const char *v69;
  __int16 v70;
  unsigned int v71;
  __int16 v72;
  _BYTE v73[10];
  _BYTE v74[6];
  _BYTE v75[6];
  _BYTE v76[6];
  _BYTE v77[6];
  unsigned int *v78;
  __int16 v79;
  unsigned int *v80;
  __int16 v81;
  unsigned int *v82;
  __int16 v83;
  unsigned int *v84;
  __int16 v85;
  unsigned int v86;
  __int16 v87;
  unsigned int *v88;
  __int16 v89;
  _QWORD *v90;
  __int16 v91;
  unsigned int v92;
  __int16 v93;
  _QWORD *v94;
  __int16 v95;
  _QWORD *v96;
  __int16 v97;
  unsigned int v98;
  __int16 v99;
  _QWORD *v100;
  __int16 v101;
  _QWORD *v102;
  __int16 v103;
  unsigned int v104;
  __int16 v105;
  unsigned int *v106;
  __int16 v107;
  unsigned int *v108;
  __int16 v109;
  unsigned int v110;
  __int16 v111;
  unsigned int *v112;
  __int16 v113;
  unsigned int *v114;
  __int16 v115;
  unsigned int v116;
  __int16 v117;
  unsigned int *v118;
  __int16 v119;
  unsigned int *v120;
  __int16 v121;
  unsigned int *v122;

  v2 = objc_alloc_init((Class)NSMutableDictionary);
  objc_msgSend(v2, "setValue:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *a1), CFSTR("localHourOfDay"));
  v3 = a1 + 2;
  if (*((char *)a1 + 31) < 0)
    v3 = (unsigned int *)*((_QWORD *)a1 + 1);
  objc_msgSend(v2, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3), CFSTR("callTriggerType"));
  objc_msgSend(v2, "setValue:forKey:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned __int8 *)a1 + 32)), CFSTR("systemTriggered"));
  objc_msgSend(v2, "setValue:forKey:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned __int8 *)a1 + 33)), CFSTR("didCallConnect"));
  objc_msgSend(v2, "setValue:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a1[9]), CFSTR("callDurationFromConnect"));
  objc_msgSend(v2, "setValue:forKey:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned __int8 *)a1 + 40)), CFSTR("screenLocked"));
  objc_msgSend(v2, "setValue:forKey:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a1[11]), CFSTR("numRecentEmergencyCalls"));
  v4 = a1 + 12;
  if (*((char *)a1 + 71) < 0)
    v4 = (unsigned int *)*((_QWORD *)a1 + 6);
  objc_msgSend(v2, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v4), CFSTR("atDialMotionType"));
  v5 = a1 + 18;
  if (*((char *)a1 + 95) < 0)
    v5 = (unsigned int *)*((_QWORD *)a1 + 9);
  objc_msgSend(v2, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5), CFSTR("atDialMotionConfidence"));
  v6 = a1 + 24;
  if (*((char *)a1 + 119) < 0)
    v6 = (unsigned int *)*((_QWORD *)a1 + 12);
  objc_msgSend(v2, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6), CFSTR("preCallPrimaryMotionType"));
  v7 = a1 + 30;
  if (*((char *)a1 + 143) < 0)
    v7 = (unsigned int *)*((_QWORD *)a1 + 15);
  objc_msgSend(v2, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v7), CFSTR("preCallPrimaryMotionConfidence"));
  objc_msgSend(v2, "setValue:forKey:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a1[36]), CFSTR("preCallPrimaryMotionFrequency"));
  v8 = a1 + 38;
  if (*((char *)a1 + 175) < 0)
    v8 = (unsigned int *)*((_QWORD *)a1 + 19);
  objc_msgSend(v2, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v8), CFSTR("preCallSecondaryMotionType"));
  v9 = a1 + 44;
  if (*((char *)a1 + 199) < 0)
    v9 = (unsigned int *)*((_QWORD *)a1 + 22);
  v63 = a1 + 44;
  objc_msgSend(v2, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v9), CFSTR("preCallSecondaryMotionConfidence"));
  objc_msgSend(v2, "setValue:forKey:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a1[50]), CFSTR("preCallSecondaryMotionFrequency"));
  v10 = a1 + 52;
  if (*((char *)a1 + 231) < 0)
    v10 = (unsigned int *)*((_QWORD *)a1 + 26);
  v62 = a1 + 52;
  objc_msgSend(v2, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v10), CFSTR("nearCallPrimaryMotionType"));
  v11 = a1 + 58;
  if (*((char *)a1 + 255) < 0)
    v11 = (unsigned int *)*((_QWORD *)a1 + 29);
  v61 = a1 + 58;
  objc_msgSend(v2, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v11), CFSTR("nearCallPrimaryMotionConfidence"));
  objc_msgSend(v2, "setValue:forKey:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a1[64]), CFSTR("nearCallPrimaryMotionFrequency"));
  v12 = a1 + 66;
  if (*((char *)a1 + 287) < 0)
    v12 = (unsigned int *)*((_QWORD *)a1 + 33);
  v59 = a1 + 66;
  objc_msgSend(v2, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12), CFSTR("nearCallSecondaryMotionType"));
  v13 = a1 + 72;
  if (*((char *)a1 + 311) < 0)
    v13 = (unsigned int *)*((_QWORD *)a1 + 36);
  v60 = a1 + 72;
  objc_msgSend(v2, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v13), CFSTR("nearCallSecondaryMotionConfidence"));
  objc_msgSend(v2, "setValue:forKey:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a1[78]), CFSTR("nearCallSecondaryMotionFrequency"));
  v14 = a1 + 80;
  v15 = a1 + 80;
  if (*((char *)a1 + 343) < 0)
    v15 = *(unsigned int **)v14;
  objc_msgSend(v2, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v15), CFSTR("duringCallPrimaryMotionType"));
  v16 = a1 + 86;
  v17 = a1 + 86;
  if (*((char *)a1 + 367) < 0)
    v17 = *(unsigned int **)v16;
  objc_msgSend(v2, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v17), CFSTR("duringCallPrimaryMotionConfidence"));
  objc_msgSend(v2, "setValue:forKey:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a1[92]), CFSTR("duringCallPrimaryMotionFrequency"));
  v18 = a1 + 94;
  v19 = a1 + 94;
  if (*((char *)a1 + 399) < 0)
    v19 = *(unsigned int **)v18;
  objc_msgSend(v2, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v19), CFSTR("duringCallSecondaryMotionType"));
  v20 = a1 + 100;
  v21 = a1 + 100;
  if (*((char *)a1 + 423) < 0)
    v21 = *(unsigned int **)v20;
  objc_msgSend(v2, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v21), CFSTR("duringCallSecondaryMotionConfidence"));
  objc_msgSend(v2, "setValue:forKey:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a1[106]), CFSTR("duringCallSecondaryMotionFrequency"));
  if (sub_1000C4240())
  {
    objc_msgSend(v2, "setValue:forKey:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned __int8 *)a1 + 520)), CFSTR("playAudioDuringCountdown"));
    objc_msgSend(v2, "setValue:forKey:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned __int8 *)a1 + 512)), CFSTR("clawAutoDialEnabled"));
    objc_msgSend(v2, "setValue:forKey:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned __int8 *)a1 + 513)), CFSTR("multipressAutoDialEnabled"));
    objc_msgSend(v2, "setValue:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a1[129]), CFSTR("numberOfSideButtonPresses"));
    if (*(_DWORD *)(*((_QWORD *)a1 + 66) + 244) == 5)
    {
      objc_msgSend(v2, "setValue:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a1[107]), CFSTR("clawHoldDuration"));
      objc_msgSend(v2, "setValue:forKey:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned __int8 *)a1 + 432)), CFSTR("clawHeldForCallDuration"));
    }
    objc_msgSend(v2, "setValue:forKey:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned __int8 *)a1 + 433)), CFSTR("watchConnected"));
  }
  v22 = *(_DWORD *)(*((_QWORD *)a1 + 66) + 248);
  objc_msgSend(v2, "setValue:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v22), CFSTR("callDisconnectedReason"));
  v23 = a1 + 110;
  v24 = a1 + 110;
  if (*((char *)a1 + 463) < 0)
    v24 = *(unsigned int **)v23;
  objc_msgSend(v2, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v24), CFSTR("deviceOrientation"));
  v25 = a1 + 116;
  v26 = a1 + 116;
  if (*((char *)a1 + 487) < 0)
    v26 = *(unsigned int **)v25;
  objc_msgSend(v2, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v26), CFSTR("mountState"));
  v27 = a1 + 122;
  v28 = a1 + 122;
  if (*((char *)a1 + 511) < 0)
    v28 = *(unsigned int **)v27;
  objc_msgSend(v2, "setValue:forKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v28), CFSTR("chargerType"));
  AnalyticsSendEvent(CFSTR("com.apple.locationd.emergency.call_trigger"), v2);

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102195E98);
  v29 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a1 + 31) < 0)
      v30 = (unsigned int *)*((_QWORD *)a1 + 1);
    else
      v30 = a1 + 2;
    v32 = a1 + 18;
    v31 = a1 + 12;
    v34 = a1 + 30;
    v33 = a1 + 24;
    v35 = a1 + 38;
    if (*((char *)a1 + 71) < 0)
      v31 = (unsigned int *)*((_QWORD *)a1 + 6);
    if (*((char *)a1 + 95) < 0)
      v32 = (unsigned int *)*((_QWORD *)a1 + 9);
    if (*((char *)a1 + 119) < 0)
      v33 = (unsigned int *)*((_QWORD *)a1 + 12);
    if (*((char *)a1 + 143) < 0)
      v34 = (unsigned int *)*((_QWORD *)a1 + 15);
    if (*((char *)a1 + 175) < 0)
      v35 = (unsigned int *)*((_QWORD *)a1 + 19);
    if (*((char *)a1 + 199) < 0)
      v63 = (_QWORD *)*v63;
    if (*((char *)a1 + 231) < 0)
      v62 = (_QWORD *)*v62;
    if (*((char *)a1 + 255) < 0)
      v61 = (_QWORD *)*v61;
    if (*((char *)a1 + 287) < 0)
      v59 = (_QWORD *)*v59;
    if (*((char *)a1 + 311) < 0)
      v60 = (_QWORD *)*v60;
    if (*((char *)a1 + 343) < 0)
      v14 = *(unsigned int **)v14;
    if (*((char *)a1 + 367) < 0)
      v16 = *(unsigned int **)v16;
    if (*((char *)a1 + 399) < 0)
      v18 = *(unsigned int **)v18;
    if (*((char *)a1 + 423) < 0)
      v20 = *(unsigned int **)v20;
    if (*((char *)a1 + 463) < 0)
      v23 = *(unsigned int **)v23;
    if (*((char *)a1 + 487) < 0)
      v25 = *(unsigned int **)v25;
    v36 = *a1;
    v37 = *((unsigned __int8 *)a1 + 33);
    v38 = a1[9];
    v39 = *((unsigned __int8 *)a1 + 40);
    v40 = a1[11];
    v41 = a1[36];
    v42 = a1[50];
    v43 = a1[64];
    v44 = a1[78];
    v45 = a1[92];
    v46 = a1[106];
    if (*((char *)a1 + 511) < 0)
      v27 = *(unsigned int **)v27;
    v84 = v34;
    v88 = v35;
    v90 = v63;
    v92 = v42;
    v94 = v62;
    v96 = v61;
    v100 = v59;
    v104 = v44;
    v108 = v16;
    v112 = v18;
    v114 = v20;
    v116 = v46;
    v118 = v23;
    v120 = v25;
    v69 = "";
    v71 = v36;
    *(_QWORD *)v73 = v30;
    *(_DWORD *)v74 = v37;
    *(_DWORD *)v75 = v38;
    *(_DWORD *)v76 = v39;
    *(_DWORD *)v77 = v40;
    v78 = v31;
    v80 = v32;
    v82 = v33;
    v86 = v41;
    v98 = v43;
    v102 = v60;
    v106 = v14;
    v110 = v45;
    v70 = 1026;
    *(_WORD *)&v73[8] = 1026;
    *(_WORD *)&v74[4] = 1026;
    *(_WORD *)&v75[4] = 1026;
    *(_WORD *)&v76[4] = 1026;
    v85 = 1026;
    v91 = 1026;
    v97 = 1026;
    v103 = 1026;
    v109 = 1026;
    v115 = 1026;
    v68 = 2082;
    v72 = 2082;
    *(_WORD *)&v77[4] = 2082;
    v79 = 2082;
    v81 = 2082;
    v83 = 2082;
    v87 = 2082;
    v89 = 2082;
    v93 = 2082;
    v95 = 2082;
    v99 = 2082;
    v101 = 2082;
    v105 = 2082;
    v107 = 2082;
    v111 = 2082;
    v113 = 2082;
    v117 = 2082;
    v119 = 2082;
    v121 = 2082;
    v122 = v27;
    *(_DWORD *)buf = 68296450;
    v67 = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EmergCon,submitCallTriggerMetric, Part 1\", \"localHourOfDay\":%{public}d, \"callTriggerType\":%{public, location:escape_only}s, \"didCallConnect\":%{public}hhd, \"callDurationFromConnect\":%{public}d, \"screenLocked\":%{public}hhd, \"numRecentEmergencyCalls\":%{public}u, \"atDialMotionType\":%{public, location:escape_only}s, \"atDialMotionConfidence\":%{public, location:escape_only}s, \"preCallPrimaryMotionType\":%{public, location:escape_only}s, \"preCallPrimaryMotionConfidence\":%{public, location:escape_only}s, \"preCallPrimaryMotionFrequency\":%{public}u, \"preCallSecondaryMotionType\":%{public, location:escape_only}s, \"preCallSecondaryMotionConfidence\":%{public, location:escape_only}s, \"preCallSecondaryMotionFrequency\":%{public}u, \"nearCallPrimaryMotionType\":%{public, location:escape_only}s, \"nearCallPrimaryMotionConfidence\":%{public, location:escape_only}s, \"nearCallPrimaryMotionFrequency\":%{public}u, \"nearCallSecondaryMotionType\":%{public, location:escape_only}s, \"nearCallSecondaryMotionConfidence\":%{public, location:escape_only}s, \"nearCallSecondaryMotionFrequency\":%{public}u, \"duringCallPrimaryMotionType\":%{public, location:escape_only}s, \"duringCallPrimaryMotionConfidence\":%{public, location:escape_only}s, \"duringCallPrimaryMotionFrequency\":%{public}u, \"duringCallSecondaryMotionType\":%{public, location:escape_only}s, \"duringCallSecondaryMotionConfidence\":%{public, location:escape_only}s, \"duringCallSecondaryMotionFrequency\":%{public}u, \"deviceOrientation\":%{public, location:escape_only}s, \"mountState\":%{public, location:escape_only}s, \"chargerType\":%{public, location:escape_only}s}", buf,
      0x108u);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
  }
  v47 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v48 = *((unsigned __int8 *)a1 + 520);
    v49 = *((unsigned __int8 *)a1 + 512);
    v50 = *((unsigned __int8 *)a1 + 513);
    v51 = a1[129];
    v52 = *((unsigned __int8 *)a1 + 433);
    v53 = a1[107];
    *(_DWORD *)buf = 68290818;
    v67 = 0;
    v68 = 2082;
    v69 = "";
    v70 = 1026;
    v71 = v48;
    v72 = 1026;
    *(_DWORD *)v73 = v49;
    *(_WORD *)&v73[4] = 1026;
    *(_DWORD *)&v73[6] = v50;
    *(_WORD *)v74 = 1026;
    *(_DWORD *)&v74[2] = v51;
    *(_WORD *)v75 = 1026;
    *(_DWORD *)&v75[2] = v52;
    *(_WORD *)v76 = 1026;
    *(_DWORD *)&v76[2] = v53;
    *(_WORD *)v77 = 1026;
    *(_DWORD *)&v77[2] = v22;
    _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EmergCon,submitCallTriggerMetric, Part 2\", \"playAudioDuringCountdown\":%{public}hhd, \"clawAutoDialEnabled\":%{public}hhd, \"multipressAutoDialEnabled\":%{public}hhd, \"numberOfSideButtonPresses\":%{public}d, \"watchConnected\":%{public}hhd, \"clawHoldDuration\":%{public}d, \"callDisconnectedReason\":%{public}u}", buf, 0x3Cu);
  }
  v54 = *((_QWORD *)a1 + 66);
  if (v54)
  {
    v55 = objc_msgSend(objc_msgSend(*(id *)(v54 + 8), "silo"), "queue");
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100F8C324;
    block[3] = &unk_10212ECA0;
    block[4] = a1;
    dispatch_async(v55, block);
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v56 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "#EmergCon,submitCallTriggerMetric,Emergency Controller pointer is null", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v65[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EmergCon,submitCallTriggerMetric,Emergency Controller pointer is null", v65, 2);
      v58 = (uint8_t *)v57;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::EmergencyCallTriggerMetric::submitCallTriggerMetric()", "%s\n", v57);
      if (v58 != buf)
        free(v58);
    }
  }
}

void sub_100F8BBAC(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  double v13;
  unsigned int v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  NSObject *v19;
  const char *v20;
  NSObject *v21;
  uint8_t *v22;
  uint64_t v23;
  int v24;
  uint8_t buf[1640];

  v24 = a7;
  if (a3 > a2 || a4 <= a1)
    return;
  if (a4 <= a2 && a3 <= a1 && a4 > a1)
  {
    v13 = a4 - a1;
    goto LABEL_19;
  }
  if (a4 <= a2 && a3 > a1 && a3 < a2 && a4 > a1)
  {
    v13 = a4 - a3;
    goto LABEL_19;
  }
  if (a3 > a1 && a3 <= a2 && a4 > a2)
  {
    v13 = a2 - a3;
    goto LABEL_19;
  }
  if (a3 <= a1 && a4 >= a2)
  {
    v13 = a2 - a1;
LABEL_19:
    v14 = vcvtpd_s64_f64(v13);
    *(_QWORD *)buf = &v24;
    v15 = sub_100F95E14(a6, &v24, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    *((_DWORD *)v15 + 5) += v14;
    switch(a8)
    {
      case 2:
        *(_QWORD *)buf = &v24;
        v17 = sub_100F95E14(a6, &v24, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *((_DWORD *)v17 + 8) += v14;
        return;
      case 1:
        *(_QWORD *)buf = &v24;
        v18 = sub_100F95E14(a6, &v24, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *((_DWORD *)v18 + 7) += v14;
        return;
      case 0:
        *(_QWORD *)buf = &v24;
        v16 = sub_100F95E14(a6, &v24, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *((_DWORD *)v16 + 6) += v14;
        return;
    }
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v19 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#EmergCon,checkAndAddActivityToMap,Unhandled confidence", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      LOWORD(v23) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EmergCon,checkAndAddActivityToMap,Unhandled confidence", &v23, 2, v23);
LABEL_48:
      v22 = (uint8_t *)v20;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::EmergencyCallTriggerMetric::checkAndAddActivityToMap(std::unordered_map<MotionType, MotionTypeData> &, CFAbsoluteTime, CFAbsoluteTime, CFAbsoluteTime, CFAbsoluteTime, MotionType, CMMotionActivityConfidence)", "%s\n", v20);
      if (v22 != buf)
        free(v22);
      return;
    }
    return;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102195E98);
  v21 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#EmergCon,checkAndAddActivityToMap,Unhandled scenario", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    LOWORD(v23) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EmergCon,checkAndAddActivityToMap,Unhandled scenario", &v23, 2, v23);
    goto LABEL_48;
  }
}

_QWORD *sub_100F8BF78@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 > 4)
    v2 = "Unknown";
  else
    v2 = off_102196940[a1];
  return sub_1015A2E04(a2, v2);
}

_QWORD *sub_100F8BFA4@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  __int128 *v2;
  __int128 *v3;

  if (result == (_QWORD *)2)
  {
    if ((byte_1023092DF & 0x80000000) == 0)
    {
      v2 = &xmmword_1023092C8;
      goto LABEL_10;
    }
    v3 = &xmmword_1023092C8;
  }
  else if (result == (_QWORD *)1)
  {
    if ((byte_1023092C7 & 0x80000000) == 0)
    {
      v2 = &xmmword_1023092B0;
      goto LABEL_10;
    }
    v3 = &xmmword_1023092B0;
  }
  else
  {
    if (result)
      return sub_1015A2E04(a2, "");
    if ((byte_1023092AF & 0x80000000) == 0)
    {
      v2 = &xmmword_102309298;
LABEL_10:
      *(_OWORD *)a2 = *v2;
      a2[2] = *((_QWORD *)v2 + 2);
      return result;
    }
    v3 = &xmmword_102309298;
  }
  return sub_100115CE4(a2, *(void **)v3, *((_QWORD *)v3 + 1));
}

void sub_100F8C04C(uint64_t a1, uint64_t a2, uint64_t a3, std::string *a4, unsigned int *a5, uint64_t a6, std::string *a7, unsigned int *a8)
{
  uint64_t *v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  __int128 *v26;
  const std::string *v28;
  __int128 *v29;
  const std::string *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int *v35;
  std::string *v36;
  uint64_t v37;
  std::string *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  std::string __dst;
  std::string __str;

  if ((byte_1023092E0[23] & 0x80000000) == 0)
  {
    __str = *(std::string *)byte_1023092E0;
LABEL_4:
    __dst = *(std::string *)byte_1023092E0;
    goto LABEL_5;
  }
  sub_100115CE4(&__str, *(void **)byte_1023092E0, *(unint64_t *)&byte_1023092E0[8]);
  if ((byte_1023092E0[23] & 0x80000000) == 0)
    goto LABEL_4;
  sub_100115CE4(&__dst, *(void **)byte_1023092E0, *(unint64_t *)&byte_1023092E0[8]);
LABEL_5:
  v37 = a3;
  v38 = a4;
  v39 = a6;
  v35 = a8;
  v36 = a7;
  v34 = a5;
  v15 = *(uint64_t **)(a2 + 16);
  if (v15)
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 5;
    v20 = 5;
    do
    {
      v22 = *((_DWORD *)v15 + 5);
      v21 = *((_DWORD *)v15 + 6);
      v24 = *((_DWORD *)v15 + 7);
      v23 = *((_DWORD *)v15 + 8);
      if (v22 <= v16)
      {
        if (v18 < v22)
        {
          v20 = *((_DWORD *)v15 + 4);
          v29 = &xmmword_1023092C8;
          if (v24 > v23)
            v29 = &xmmword_1023092B0;
          if (v21 <= v23 || v21 <= v24)
            v31 = (const std::string *)v29;
          else
            v31 = (const std::string *)&xmmword_102309298;
          std::string::operator=(&__dst, v31);
          v18 = v22;
        }
      }
      else
      {
        std::string::operator=(&__dst, &__str);
        v25 = *((_DWORD *)v15 + 4);
        v26 = &xmmword_1023092C8;
        if (v24 > v23)
          v26 = &xmmword_1023092B0;
        if (v21 <= v23 || v21 <= v24)
          v28 = (const std::string *)v26;
        else
          v28 = (const std::string *)&xmmword_102309298;
        std::string::operator=(&__str, v28);
        v20 = v19;
        v19 = v25;
        v18 = v16;
        v16 = v22;
      }
      v17 += v22;
      v15 = (uint64_t *)*v15;
    }
    while (v15);
  }
  else
  {
    v18 = 0;
    v17 = 0;
    v16 = 0;
    v20 = 5;
    v19 = 5;
  }
  sub_100F8BF78(v19, &v40);
  if (*(char *)(v37 + 23) < 0)
    operator delete(*(void **)v37);
  *(_OWORD *)v37 = v40;
  *(_QWORD *)(v37 + 16) = v41;
  std::string::operator=(v38, &__str);
  sub_100F8BF78(v20, &v40);
  if (*(char *)(v39 + 23) < 0)
    operator delete(*(void **)v39);
  *(_OWORD *)v39 = v40;
  *(_QWORD *)(v39 + 16) = v41;
  std::string::operator=(v36, &__dst);
  if (v17)
  {
    v32 = vcvtps_u32_f32((float)((float)v16 / (float)v17) * 100.0);
    v33 = vcvtps_u32_f32((float)((float)v18 / (float)v17) * 100.0);
  }
  else
  {
    v32 = 0;
    v33 = 0;
  }
  *v34 = v32;
  *v35 = v33;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_100F8C2E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100F8C324(uint64_t a1)
{
  sub_100F7E0B8(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 528));
}

void sub_100F8C330(uint64_t a1)
{
  uint64_t v1;
  id v2;
  NSObject *v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _QWORD block[6];
  int v8;
  id v9;
  uint8_t buf[4];
  id v11;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = -[SOSManager currentSOSInteractiveState](+[SOSManager sharedInstance](SOSManager, "sharedInstance"), "currentSOSInteractiveState");
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102195E98);
  v3 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    v11 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#EmergCon,interactiveStateChanged,newInteractiveState %lu", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v8 = 134217984;
    v9 = v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergCon,interactiveStateChanged,newInteractiveState %lu", &v8);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::EmergencyCallTriggerMetric::interactiveStateChanged()_block_invoke", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  v4 = objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(v1 + 528) + 8), "silo"), "queue");
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100F8C534;
  block[3] = &unk_102143528;
  block[4] = v1;
  block[5] = v2;
  dispatch_async(v4, block);
}

void sub_100F8C534(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  double v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint8_t buf[4];
  uint64_t v21;
  __int16 v22;
  uint64_t v23;

  v2 = *(_QWORD *)(a1 + 32);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102195E98);
  v3 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    v4 = *(_QWORD *)(v2 + 688);
    v5 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 134218240;
    v21 = v4;
    v22 = 2048;
    v23 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#EmergCon,interactiveStateChanged,currentInteractiveState from %lu to %lu", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v12 = *(_QWORD *)(v2 + 688);
    v13 = *(_QWORD *)(a1 + 40);
    v16 = 134218240;
    v17 = v12;
    v18 = 2048;
    v19 = v13;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergCon,interactiveStateChanged,currentInteractiveState from %lu to %lu", &v16, 22);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::EmergencyCallTriggerMetric::interactiveStateChanged()_block_invoke", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  v6 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(v2 + 688) != v6)
  {
    *(_QWORD *)(v2 + 688) = v6;
    if (!*(_QWORD *)(a1 + 40) && !*(_BYTE *)(v2 + 696))
    {
      v7 = sub_1001FCBB4();
      v8 = *(_QWORD *)(v2 + 528);
      if (!v8 || ((v9 = *(double *)(v8 + 256), v9 != 0.0) ? (v10 = v7 <= v9) : (v10 = 1), v10))
        v11 = -1;
      else
        v11 = vcvtpd_s64_f64(sub_1001FCBB4() - *(double *)(*(_QWORD *)(v2 + 528) + 256));
      *(_DWORD *)(v2 + 428) = v11;
      *(_BYTE *)(v2 + 696) = 1;
    }
  }
}

void sub_100F8C770(id a1)
{
  qword_1022A0088 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

void sub_100F8C79C(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_100F8C7C8(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  __int128 v6;
  __int128 v7;
  void **v8;
  __int128 v9;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
  v5 = (void **)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*v5);
  v6 = a2[2];
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
  *(_OWORD *)v5 = v6;
  *((_BYTE *)a2 + 55) = 0;
  *((_BYTE *)a2 + 32) = 0;
  v7 = *(__int128 *)((char *)a2 + 72);
  *(_OWORD *)(a1 + 56) = *(__int128 *)((char *)a2 + 56);
  *(_OWORD *)(a1 + 72) = v7;
  v8 = (void **)(a1 + 88);
  if (*(char *)(a1 + 111) < 0)
    operator delete(*v8);
  v9 = *(__int128 *)((char *)a2 + 88);
  *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
  *(_OWORD *)v8 = v9;
  *((_BYTE *)a2 + 111) = 0;
  *((_BYTE *)a2 + 88) = 0;
  sub_100385A64((uint64_t *)(a1 + 112));
  *(_OWORD *)(a1 + 112) = a2[7];
  *(_QWORD *)(a1 + 128) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 14) = 0;
  *((_QWORD *)a2 + 15) = 0;
  *((_QWORD *)a2 + 16) = 0;
  *(_DWORD *)(a1 + 136) = *((_DWORD *)a2 + 34);
  sub_100F8C8D0(a1 + 144, (__int16 *)a2 + 72);
  sub_100F8C8D0(a1 + 480, (__int16 *)a2 + 240);
  return a1;
}

uint64_t sub_100F8C8D0(uint64_t a1, __int16 *a2)
{
  __int16 v4;
  uint64_t v5;
  __int128 *v6;
  __int128 v7;
  void **v8;
  __int128 v9;
  void **v10;
  __int128 v11;
  uint64_t v12;
  void **v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v4 = *a2;
  *(_BYTE *)(a1 + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)a1 = v4;
  v5 = a1 + 8;
  v6 = (__int128 *)(a2 + 4);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)v5);
  v7 = *v6;
  *(_QWORD *)(v5 + 16) = *((_QWORD *)v6 + 2);
  *(_OWORD *)v5 = v7;
  *((_BYTE *)a2 + 31) = 0;
  *((_BYTE *)a2 + 8) = 0;
  v8 = (void **)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*v8);
  v9 = *((_OWORD *)a2 + 2);
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
  *(_OWORD *)v8 = v9;
  *((_BYTE *)a2 + 55) = 0;
  *((_BYTE *)a2 + 32) = 0;
  v10 = (void **)(a1 + 56);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*v10);
  v11 = *(_OWORD *)(a2 + 28);
  *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
  *(_OWORD *)v10 = v11;
  *((_BYTE *)a2 + 79) = 0;
  *((_BYTE *)a2 + 56) = 0;
  v12 = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 80) = *((_OWORD *)a2 + 5);
  *(_QWORD *)(a1 + 96) = v12;
  v13 = (void **)(a1 + 104);
  if (*(char *)(a1 + 127) < 0)
    operator delete(*v13);
  v14 = *(_OWORD *)(a2 + 52);
  *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
  *(_OWORD *)v13 = v14;
  *((_BYTE *)a2 + 127) = 0;
  *((_BYTE *)a2 + 104) = 0;
  *(_WORD *)(a1 + 128) = a2[64];
  sub_100858844((void **)(a1 + 136));
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 68);
  *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
  *((_QWORD *)a2 + 18) = 0;
  *((_QWORD *)a2 + 19) = 0;
  *((_QWORD *)a2 + 17) = 0;
  v15 = *((_OWORD *)a2 + 16);
  v17 = *((_OWORD *)a2 + 13);
  v16 = *((_OWORD *)a2 + 14);
  *(_OWORD *)(a1 + 240) = *((_OWORD *)a2 + 15);
  *(_OWORD *)(a1 + 256) = v15;
  *(_OWORD *)(a1 + 208) = v17;
  *(_OWORD *)(a1 + 224) = v16;
  v19 = *((_OWORD *)a2 + 18);
  v18 = *((_OWORD *)a2 + 19);
  v20 = *((_OWORD *)a2 + 17);
  *(_OWORD *)(a1 + 316) = *(_OWORD *)(a2 + 158);
  *(_OWORD *)(a1 + 288) = v19;
  *(_OWORD *)(a1 + 304) = v18;
  *(_OWORD *)(a1 + 272) = v20;
  v21 = *((_OWORD *)a2 + 12);
  v22 = *((_OWORD *)a2 + 10);
  *(_OWORD *)(a1 + 176) = *((_OWORD *)a2 + 11);
  *(_OWORD *)(a1 + 192) = v21;
  *(_OWORD *)(a1 + 160) = v22;
  return a1;
}

uint64_t sub_100F8CA40(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE *v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE *v24;
  __int128 v25;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  v6 = *((_OWORD *)a2 + 5);
  v5 = *((_OWORD *)a2 + 6);
  v7 = *((_OWORD *)a2 + 4);
  *(_QWORD *)(a1 + 112) = a2[14];
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v5;
  *(_OWORD *)(a1 + 64) = v7;
  v8 = *((_OWORD *)a2 + 1);
  v9 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 48) = v9;
  *(_OWORD *)(a1 + 16) = v8;
  sub_100F8CE00((char *)(a1 + 120), (uint64_t)(a2 + 15));
  if (*((char *)a2 + 959) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 936), (void *)a2[117], a2[118]);
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 117);
    *(_QWORD *)(a1 + 952) = a2[119];
    *(_OWORD *)(a1 + 936) = v10;
  }
  v11 = (_BYTE *)(a1 + 960);
  if (*((char *)a2 + 983) < 0)
  {
    sub_100115CE4(v11, (void *)a2[120], a2[121]);
  }
  else
  {
    v12 = *((_OWORD *)a2 + 60);
    *(_QWORD *)(a1 + 976) = a2[122];
    *(_OWORD *)v11 = v12;
  }
  v13 = a2[123];
  *(_DWORD *)(a1 + 992) = *((_DWORD *)a2 + 248);
  *(_QWORD *)(a1 + 984) = v13;
  v14 = *(_OWORD *)(a2 + 125);
  v15 = *(_OWORD *)(a2 + 127);
  v16 = *(_OWORD *)(a2 + 129);
  *(_QWORD *)(a1 + 1048) = a2[131];
  *(_OWORD *)(a1 + 1016) = v15;
  *(_OWORD *)(a1 + 1032) = v16;
  *(_OWORD *)(a1 + 1000) = v14;
  *(_BYTE *)(a1 + 1056) = *((_BYTE *)a2 + 1056);
  if (*((char *)a2 + 1087) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 1064), (void *)a2[133], a2[134]);
  }
  else
  {
    v17 = *(_OWORD *)(a2 + 133);
    *(_QWORD *)(a1 + 1080) = a2[135];
    *(_OWORD *)(a1 + 1064) = v17;
  }
  v18 = *((_OWORD *)a2 + 68);
  *(_OWORD *)(a1 + 1100) = *(_OWORD *)((char *)a2 + 1100);
  *(_OWORD *)(a1 + 1088) = v18;
  *(_QWORD *)(a1 + 1120) = 0;
  *(_QWORD *)(a1 + 1136) = 0;
  *(_QWORD *)(a1 + 1128) = 0;
  sub_100F8D294((_QWORD *)(a1 + 1120), (__int128 *)a2[140], (__int128 *)a2[141], 0xAAAAAAAAAAAAAAABLL * ((a2[141] - a2[140]) >> 4));
  *(_BYTE *)(a1 + 1144) = *((_BYTE *)a2 + 1144);
  if (*((char *)a2 + 1175) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 1152), (void *)a2[144], a2[145]);
  }
  else
  {
    v19 = *((_OWORD *)a2 + 72);
    *(_QWORD *)(a1 + 1168) = a2[146];
    *(_OWORD *)(a1 + 1152) = v19;
  }
  v20 = *(_OWORD *)(a2 + 147);
  *(_OWORD *)(a1 + 1188) = *(_OWORD *)((char *)a2 + 1188);
  *(_OWORD *)(a1 + 1176) = v20;
  *(_QWORD *)(a1 + 1208) = 0;
  *(_QWORD *)(a1 + 1224) = 0;
  *(_QWORD *)(a1 + 1216) = 0;
  sub_100F8D294((_QWORD *)(a1 + 1208), (__int128 *)a2[151], (__int128 *)a2[152], 0xAAAAAAAAAAAAAAABLL * ((a2[152] - a2[151]) >> 4));
  if (*((char *)a2 + 1255) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 1232), (void *)a2[154], a2[155]);
  }
  else
  {
    v21 = *((_OWORD *)a2 + 77);
    *(_QWORD *)(a1 + 1248) = a2[156];
    *(_OWORD *)(a1 + 1232) = v21;
  }
  if (*((char *)a2 + 1279) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 1256), (void *)a2[157], a2[158]);
  }
  else
  {
    v22 = *(_OWORD *)(a2 + 157);
    *(_QWORD *)(a1 + 1272) = a2[159];
    *(_OWORD *)(a1 + 1256) = v22;
  }
  if (*((char *)a2 + 1303) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 1280), (void *)a2[160], a2[161]);
  }
  else
  {
    v23 = *((_OWORD *)a2 + 80);
    *(_QWORD *)(a1 + 1296) = a2[162];
    *(_OWORD *)(a1 + 1280) = v23;
  }
  v24 = (_BYTE *)(a1 + 1304);
  if (*((char *)a2 + 1327) < 0)
  {
    sub_100115CE4(v24, (void *)a2[163], a2[164]);
  }
  else
  {
    v25 = *(_OWORD *)(a2 + 163);
    *(_QWORD *)(a1 + 1320) = a2[165];
    *(_OWORD *)v24 = v25;
  }
  return a1;
}

void sub_100F8CD2C(_Unwind_Exception *a1)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  void **v4;
  void **v5;
  void **v6;

  if (v2[1303] < 0)
    operator delete(*v6);
  if (v2[1279] < 0)
    operator delete(*v5);
  if (v2[1255] < 0)
    operator delete(*v4);
  sub_100A51EB4((uint64_t)(v2 + 1144));
  sub_100A51EB4((uint64_t)(v2 + 1056));
  sub_1002FDAA0(v3);
  sub_1008580A0(v1);
  _Unwind_Resume(a1);
}

void sub_100F8CDE8()
{
  uint64_t v0;
  void **v1;

  if (*(char *)(v0 + 1087) < 0)
    operator delete(*v1);
  JUMPOUT(0x100F8CDD0);
}

char *sub_100F8CE00(char *a1, uint64_t a2)
{
  char *v4;

  v4 = sub_100F8CEE0(a1, (__int128 *)a2);
  sub_100F8D028((uint64_t)(v4 + 144), (__int16 *)(a2 + 144));
  sub_100F8D028((uint64_t)(a1 + 480), (__int16 *)(a2 + 480));
  return a1;
}

void sub_100F8CE50(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _Unwind_Exception *a9)
{
  uint64_t v9;
  _Unwind_Exception *v12;

  a9 = (_Unwind_Exception *)(v9 + 280);
  sub_1008581A8((void ***)&a9);
  if (*(char *)(v9 + 271) < 0)
    operator delete(*(void **)(v9 + 248));
  sub_101936D94(v9, a1, a2, (uint64_t)&a9);
  v12 = a9;
  a9 = (_Unwind_Exception *)(v9 + 112);
  sub_100259608((void ***)&a9);
  if (*(char *)(v9 + 111) < 0)
    operator delete(*(void **)(v9 + 88));
  if (*(char *)(v9 + 55) < 0)
    operator delete(*(void **)(v9 + 32));
  if (*(char *)(v9 + 23) < 0)
    operator delete(*(void **)v9);
  _Unwind_Resume(v12);
}

char *sub_100F8CEE0(char *__dst, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  *((_QWORD *)__dst + 3) = *((_QWORD *)a2 + 3);
  if (*((char *)a2 + 55) < 0)
  {
    sub_100115CE4(__dst + 32, *((void **)a2 + 4), *((_QWORD *)a2 + 5));
  }
  else
  {
    v5 = a2[2];
    *((_QWORD *)__dst + 6) = *((_QWORD *)a2 + 6);
    *((_OWORD *)__dst + 2) = v5;
  }
  v6 = *(__int128 *)((char *)a2 + 56);
  *(_OWORD *)(__dst + 72) = *(__int128 *)((char *)a2 + 72);
  *(_OWORD *)(__dst + 56) = v6;
  if (*((char *)a2 + 111) < 0)
  {
    sub_100115CE4(__dst + 88, *((void **)a2 + 11), *((_QWORD *)a2 + 12));
  }
  else
  {
    v7 = *(__int128 *)((char *)a2 + 88);
    *((_QWORD *)__dst + 13) = *((_QWORD *)a2 + 13);
    *(_OWORD *)(__dst + 88) = v7;
  }
  *((_QWORD *)__dst + 14) = 0;
  *((_QWORD *)__dst + 15) = 0;
  *((_QWORD *)__dst + 16) = 0;
  sub_100259B94(__dst + 112, *((__int128 **)a2 + 14), *((__int128 **)a2 + 15), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 15) - *((_QWORD *)a2 + 14)) >> 3));
  *((_DWORD *)__dst + 34) = *((_DWORD *)a2 + 34);
  return __dst;
}

void sub_100F8CFDC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 55) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F8D028(uint64_t a1, __int16 *a2)
{
  __int16 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int16 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v4 = *a2;
  *(_BYTE *)(a1 + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)a1 = v4;
  if (*((char *)a2 + 31) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 8), *((void **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 4);
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
    *(_OWORD *)(a1 + 8) = v5;
  }
  if (*((char *)a2 + 55) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 32), *((void **)a2 + 4), *((_QWORD *)a2 + 5));
  }
  else
  {
    v6 = *((_OWORD *)a2 + 2);
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
    *(_OWORD *)(a1 + 32) = v6;
  }
  if (*((char *)a2 + 79) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 56), *((void **)a2 + 7), *((_QWORD *)a2 + 8));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 28);
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
    *(_OWORD *)(a1 + 56) = v7;
  }
  v8 = *((_OWORD *)a2 + 5);
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 80) = v8;
  if (*((char *)a2 + 127) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 104), *((void **)a2 + 13), *((_QWORD *)a2 + 14));
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 52);
    *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
    *(_OWORD *)(a1 + 104) = v9;
  }
  v10 = a2[64];
  *(_QWORD *)(a1 + 136) = 0;
  *(_WORD *)(a1 + 128) = v10;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  sub_100F8D210((char *)(a1 + 136), *((__int128 **)a2 + 17), *((__int128 **)a2 + 18), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)a2 + 18) - *((_QWORD *)a2 + 17)) >> 4));
  v11 = *((_OWORD *)a2 + 10);
  v12 = *((_OWORD *)a2 + 12);
  *(_OWORD *)(a1 + 176) = *((_OWORD *)a2 + 11);
  *(_OWORD *)(a1 + 192) = v12;
  *(_OWORD *)(a1 + 160) = v11;
  v13 = *((_OWORD *)a2 + 13);
  v14 = *((_OWORD *)a2 + 14);
  v15 = *((_OWORD *)a2 + 16);
  *(_OWORD *)(a1 + 240) = *((_OWORD *)a2 + 15);
  *(_OWORD *)(a1 + 256) = v15;
  *(_OWORD *)(a1 + 208) = v13;
  *(_OWORD *)(a1 + 224) = v14;
  v16 = *((_OWORD *)a2 + 17);
  v17 = *((_OWORD *)a2 + 18);
  v18 = *((_OWORD *)a2 + 19);
  *(_OWORD *)(a1 + 316) = *(_OWORD *)(a2 + 158);
  *(_OWORD *)(a1 + 288) = v17;
  *(_OWORD *)(a1 + 304) = v18;
  *(_OWORD *)(a1 + 272) = v16;
  return a1;
}

void sub_100F8D1AC(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;
  void **v4;

  if (v1[79] < 0)
    operator delete(*v4);
  if (v1[55] < 0)
    operator delete(*v3);
  if (v1[31] < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

char *sub_100F8D210(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;

  if (a4)
  {
    v6 = result;
    sub_100364E14(result, a4);
    result = sub_1008588B0((uint64_t)(v6 + 16), a2, a3, *((char **)v6 + 1));
    *((_QWORD *)v6 + 1) = result;
  }
  return result;
}

void sub_100F8D274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_1008581A8(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_100F8D294(_QWORD *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_100858CC4(result, a4);
    result = sub_100858D14((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_100F8D2F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_1003B01F4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100F8D318@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void **v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  void **v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  void *__p[2];
  unsigned __int8 v22;
  void *v23[2];
  unsigned __int8 v24;
  void *v25[2];
  unsigned __int8 v26;
  void *v27[2];
  unsigned __int8 v28;
  _QWORD v29[2];
  uint64_t v30;
  _QWORD v31[10];
  char v32;
  uint64_t v33;

  sub_100263E50((uint64_t)v29);
  v4 = sub_100263F7C(&v30, (uint64_t)"ControlPlane,", 13);
  sub_100F86440((unsigned int *)a1, v27);
  if ((v28 & 0x80u) == 0)
    v5 = v27;
  else
    v5 = (void **)v27[0];
  if ((v28 & 0x80u) == 0)
    v6 = v28;
  else
    v6 = (uint64_t)v27[1];
  v7 = sub_100263F7C(v4, (uint64_t)v5, v6);
  v8 = sub_100263F7C(v7, (uint64_t)",ControlPlaneCdma,", 18);
  sub_100F8704C((unsigned __int8 *)(a1 + 40), v25);
  if ((v26 & 0x80u) == 0)
    v9 = v25;
  else
    v9 = (void **)v25[0];
  if ((v26 & 0x80u) == 0)
    v10 = v26;
  else
    v10 = (uint64_t)v25[1];
  v11 = sub_100263F7C(v8, (uint64_t)v9, v10);
  v12 = sub_100263F7C(v11, (uint64_t)",UserPlane,", 11);
  sub_100F86440((unsigned int *)(a1 + 48), v23);
  if ((v24 & 0x80u) == 0)
    v13 = v23;
  else
    v13 = (void **)v23[0];
  if ((v24 & 0x80u) == 0)
    v14 = v24;
  else
    v14 = (uint64_t)v23[1];
  v15 = sub_100263F7C(v12, (uint64_t)v13, v14);
  v16 = sub_100263F7C(v15, (uint64_t)",Action,", 8);
  sub_100F87198(a1 + 104, __p);
  if ((v22 & 0x80u) == 0)
    v17 = __p;
  else
    v17 = (void **)__p[0];
  if ((v22 & 0x80u) == 0)
    v18 = v22;
  else
    v18 = (uint64_t)__p[1];
  sub_100263F7C(v16, (uint64_t)v17, v18);
  if ((char)v22 < 0)
    operator delete(__p[0]);
  if ((char)v24 < 0)
    operator delete(v23[0]);
  if ((char)v26 < 0)
    operator delete(v25[0]);
  if ((char)v28 < 0)
    operator delete(v27[0]);
  std::stringbuf::str(a2, v31);
  *(_QWORD *)((char *)v29
  v30 = v19;
  if (v32 < 0)
    operator delete((void *)v31[8]);
  std::streambuf::~streambuf(v31);
  return std::ios::~ios(&v33);
}

void sub_100F8D520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);
  sub_1018B38B4((uint64_t)&a34);
  _Unwind_Resume(a1);
}

uint64_t sub_100F8D5A4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD v31[2];
  uint64_t v32;
  _QWORD v33[10];
  char v34;
  uint64_t v35;

  sub_100263E50((uint64_t)v31);
  v4 = sub_100263F7C(&v32, (uint64_t)"HslpAddress,", 12);
  v5 = *(char *)(a1 + 23);
  if (v5 >= 0)
    v6 = a1;
  else
    v6 = *(_QWORD *)a1;
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a1 + 23);
  else
    v7 = *(_QWORD *)(a1 + 8);
  v8 = sub_100263F7C(v4, v6, v7);
  v9 = sub_100263F7C(v8, (uint64_t)",HslpCARootCert,", 16);
  v10 = *(char *)(a1 + 47);
  if (v10 >= 0)
    v11 = a1 + 24;
  else
    v11 = *(_QWORD *)(a1 + 24);
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a1 + 47);
  else
    v12 = *(_QWORD *)(a1 + 32);
  v13 = sub_100263F7C(v9, v11, v12);
  v14 = sub_100263F7C(v13, (uint64_t)",port,", 6);
  v15 = (_QWORD *)std::ostream::operator<<(v14, *(unsigned __int16 *)(a1 + 48));
  v16 = sub_100263F7C(v15, (uint64_t)",udpPortConfig,", 15);
  v17 = (_QWORD *)std::ostream::operator<<(v16, *(unsigned int *)(a1 + 52));
  v18 = sub_100263F7C(v17, (uint64_t)",suplFlags,", 11);
  v19 = (_QWORD *)std::ostream::operator<<(v18, *(unsigned int *)(a1 + 56));
  v20 = sub_100263F7C(v19, (uint64_t)",allowNonEmergencySupl,", 23);
  v21 = (_QWORD *)std::ostream::operator<<(v20, *(_BYTE *)(a1 + 56) & 1);
  v22 = sub_100263F7C(v21, (uint64_t)",allowSuplWithoutEmergencyNotification,", 39);
  v23 = (_QWORD *)std::ostream::operator<<(v22, (*(unsigned __int8 *)(a1 + 56) >> 1) & 1);
  v24 = sub_100263F7C(v23, (uint64_t)",allowHslpMismatch,", 19);
  v25 = (_QWORD *)std::ostream::operator<<(v24, (*(unsigned __int8 *)(a1 + 56) >> 2) & 1);
  v26 = sub_100263F7C(v25, (uint64_t)",allowHslpWildCard,", 19);
  v27 = (_QWORD *)std::ostream::operator<<(v26, (*(unsigned __int8 *)(a1 + 56) >> 3) & 1);
  v28 = sub_100263F7C(v27, (uint64_t)",allowNonConformingEslpAddress,", 31);
  std::ostream::operator<<(v28, (*(unsigned __int8 *)(a1 + 56) >> 4) & 1);
  std::stringbuf::str(a2, v33);
  *(_QWORD *)((char *)v31
  v32 = v29;
  if (v34 < 0)
    operator delete((void *)v33[8]);
  std::streambuf::~streambuf(v33);
  return std::ios::~ios(&v35);
}

void sub_100F8D788(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100F8D79C(id a1)
{
  qword_1022A02A8 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

uint64_t sub_100F8D7C8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];
  uint64_t v19;
  _QWORD v20[10];
  char v21;
  uint64_t v22;

  sub_100263E50((uint64_t)v18);
  v4 = sub_100263F7C(&v19, (uint64_t)"partnerId,", 10);
  v5 = *(char *)(a1 + 23);
  if (v5 >= 0)
    v6 = a1;
  else
    v6 = *(_QWORD *)a1;
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a1 + 23);
  else
    v7 = *(_QWORD *)(a1 + 8);
  v8 = sub_100263F7C(v4, v6, v7);
  v9 = sub_100263F7C(v8, (uint64_t)",adrCert,", 9);
  v12 = *(_QWORD *)(a1 + 24);
  v11 = a1 + 24;
  v10 = v12;
  v13 = *(char *)(v11 + 23);
  if (v13 >= 0)
    v14 = v11;
  else
    v14 = v10;
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(v11 + 23);
  else
    v15 = *(_QWORD *)(v11 + 8);
  sub_100263F7C(v9, v14, v15);
  std::stringbuf::str(a2, v20);
  *(_QWORD *)((char *)v18
  v19 = v16;
  if (v21 < 0)
    operator delete((void *)v20[8]);
  std::streambuf::~streambuf(v20);
  return std::ios::~ios(&v22);
}

void sub_100F8D8D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_100F8D8E8@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v4;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  switch(a1)
  {
    case 2:
      v4 = "network-assisted";
      return sub_1015A2E04(a2, v4);
    case 1:
      v4 = "device-based";
      return sub_1015A2E04(a2, v4);
    case 0:
      v4 = "disabled";
      return sub_1015A2E04(a2, v4);
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102195E98);
  v6 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67109120;
    v11 = a1;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "undefined constellation usage %d\n", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v9[0] = 67109120;
    v9[1] = a1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 17, "undefined constellation usage %d\n", v9);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 0, "static std::string CLEmergencyController::LocationSettings::Emergency::Settings::toString(ConstellationUsage)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  return sub_1015A2E04(a2, "undefined");
}

uint64_t sub_100F8DB3C@<X0>(unsigned int *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  void *__p[2];
  unsigned __int8 v14;
  _QWORD v15[2];
  uint64_t v16;
  _QWORD v17[10];
  char v18;
  uint64_t v19;

  sub_100263E50((uint64_t)v15);
  v4 = sub_100263F7C(&v16, (uint64_t)"enable,", 7);
  v5 = (_QWORD *)std::ostream::operator<<(v4, *a1);
  v6 = sub_100263F7C(v5, (uint64_t)",apConfig,", 10);
  sub_100F8DCA8(a1[1], __p);
  if ((v14 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v14 & 0x80u) == 0)
    v8 = v14;
  else
    v8 = (uint64_t)__p[1];
  v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
  v10 = sub_100263F7C(v9, (uint64_t)",enableRssi,", 12);
  std::ostream::operator<<(v10, a1[2]);
  if ((char)v14 < 0)
    operator delete(__p[0]);
  std::stringbuf::str(a2, v17);
  *(_QWORD *)((char *)v15
  v16 = v11;
  if (v18 < 0)
    operator delete((void *)v17[8]);
  std::streambuf::~streambuf(v17);
  return std::ios::~ios(&v19);
}

void sub_100F8DC78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_1018B38B4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

_QWORD *sub_100F8DCA8@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v4;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  if (a1 == 1)
  {
    v4 = "AllScannedAPs";
    return sub_1015A2E04(a2, v4);
  }
  if (!a1)
  {
    v4 = "ServingApOnly";
    return sub_1015A2E04(a2, v4);
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102195E98);
  v6 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109120;
    v11 = a1;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#wlan,apConfigToString,undefined AccessPointConfig,%d\n", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v9[0] = 67109120;
    v9[1] = a1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#wlan,apConfigToString,undefined AccessPointConfig,%d\n", v9);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 0, "static std::string CLEmergencyController::LocationSettings::Emergency::Settings::apConfigToString(AccessPointConfig)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  return sub_1015A2E04(a2, "undefined");
}

_QWORD *sub_100F8DED0@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v4;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  if (a1 == 1)
  {
    v4 = "Cdma";
    return sub_1015A2E04(a2, v4);
  }
  if (!a1)
  {
    v4 = "Gps";
    return sub_1015A2E04(a2, v4);
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102195E98);
  v6 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109120;
    v11 = a1;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "undefined MeasurementTimeStampSource,%d\n", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v9[0] = 67109120;
    v9[1] = a1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "undefined MeasurementTimeStampSource,%d\n", v9);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 0, "static std::string CLEmergencyController::LocationSettings::Emergency::measTimeStampSourceToString(MeasurementTimeStampSource)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  return sub_1015A2E04(a2, "undefined");
}

uint64_t sub_100F8E0F8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  char *v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD v43[2];
  uint64_t v44;
  _QWORD v45[10];
  char v46;
  uint64_t v47;
  _BYTE v48[16];
  _QWORD v49[17];

  sub_100263E50((uint64_t)v43);
  v4 = sub_100263F7C(&v44, (uint64_t)"smsAddress,", 11);
  v5 = *(char *)(a1 + 23);
  if (v5 >= 0)
    v6 = a1;
  else
    v6 = *(_QWORD *)a1;
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a1 + 23);
  else
    v7 = *(_QWORD *)(a1 + 8);
  v8 = sub_100263F7C(v4, v6, v7);
  v9 = sub_100263F7C(v8, (uint64_t)",sendBinarySms,", 15);
  v10 = (_QWORD *)std::ostream::operator<<(v9, *(unsigned __int8 *)(a1 + 24));
  v11 = sub_100263F7C(v10, (uint64_t)",smsDestinationPort,", 20);
  v12 = (_QWORD *)std::ostream::operator<<(v11, *(unsigned int *)(a1 + 28));
  v13 = sub_100263F7C(v12, (uint64_t)",httpsAddress,", 14);
  v14 = *(char *)(a1 + 55);
  if (v14 >= 0)
    v15 = a1 + 32;
  else
    v15 = *(_QWORD *)(a1 + 32);
  if (v14 >= 0)
    v16 = *(unsigned __int8 *)(a1 + 55);
  else
    v16 = *(_QWORD *)(a1 + 40);
  v17 = sub_100263F7C(v13, v15, v16);
  v18 = sub_100263F7C(v17, (uint64_t)",firstFixDelay,", 15);
  v19 = (_QWORD *)std::ostream::operator<<(v18, *(double *)(a1 + 56));
  v20 = sub_100263F7C(v19, (uint64_t)",multipleSmsEnabled,", 20);
  v21 = (_QWORD *)std::ostream::operator<<(v20, *(unsigned __int8 *)(a1 + 64));
  v22 = sub_100263F7C(v21, (uint64_t)",maxFixDelay,", 13);
  v23 = (_QWORD *)std::ostream::operator<<(v22, *(double *)(a1 + 72));
  v24 = sub_100263F7C(v23, (uint64_t)",minFixDelay,", 13);
  v25 = (_QWORD *)std::ostream::operator<<(v24, *(double *)(a1 + 80));
  v26 = sub_100263F7C(v25, (uint64_t)",smsOverNasAddress,", 19);
  v27 = *(char *)(a1 + 111);
  if (v27 >= 0)
    v28 = a1 + 88;
  else
    v28 = *(_QWORD *)(a1 + 88);
  if (v27 >= 0)
    v29 = *(unsigned __int8 *)(a1 + 111);
  else
    v29 = *(_QWORD *)(a1 + 96);
  v30 = sub_100263F7C(v26, v28, v29);
  sub_100263F7C(v30, (uint64_t)",AmlOverNASEnableForMCCOrPLMNs,[", 32);
  v31 = *(_QWORD *)(a1 + 112);
  v32 = *(_QWORD *)(a1 + 120);
  if (v31 != v32)
  {
    do
    {
      v33 = sub_100263F7C(&v44, (uint64_t)"{", 1);
      v34 = *(char *)(v31 + 23);
      if (v34 >= 0)
        v35 = v31;
      else
        v35 = *(_QWORD *)v31;
      if (v34 >= 0)
        v36 = *(unsigned __int8 *)(v31 + 23);
      else
        v36 = *(_QWORD *)(v31 + 8);
      v37 = sub_100263F7C(v33, v35, v36);
      sub_100263F7C(v37, (uint64_t)"},", 2);
      v31 += 24;
    }
    while (v31 != v32);
    if (*(_QWORD *)(a1 + 120) != *(_QWORD *)(a1 + 112))
    {
      std::ostream::sentry::sentry(v48, &v44);
      v38 = (char *)&v45[-1] + *(_QWORD *)(v44 - 24);
      if ((v38[32] & 5) == 0)
      {
        (*(void (**)(_QWORD *__return_ptr, _QWORD, uint64_t, uint64_t, uint64_t))(**((_QWORD **)v38 + 5) + 32))(v49, *((_QWORD *)v38 + 5), -1, 1, 16);
        if (v49[16] == -1)
          std::ios_base::clear((std::ios_base *)((char *)&v45[-1] + *(_QWORD *)(v44 - 24)), *(_DWORD *)((char *)&v45[3] + *(_QWORD *)(v44 - 24)) | 4);
      }
      std::ostream::sentry::~sentry(v48);
    }
  }
  v39 = sub_100263F7C(&v44, (uint64_t)"]", 1);
  v40 = sub_100263F7C(v39, (uint64_t)",maAmloverNASFirstFixDelay,", 27);
  std::ostream::operator<<(v40, *(unsigned int *)(a1 + 136));
  std::stringbuf::str(a2, v45);
  *(_QWORD *)((char *)v43
  v44 = v41;
  if (v46 < 0)
    operator delete((void *)v45[8]);
  std::streambuf::~streambuf(v45);
  return std::ios::~ios(&v47);
}

void sub_100F8E428(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::ostream::sentry::~sentry(v2 - 224);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100F8E45C@<X0>(unsigned __int8 *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  void **v43;
  uint64_t v44;
  _QWORD *v45;
  char *v46;
  _QWORD *v47;
  _QWORD *v48;
  void **v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  void **v53;
  uint64_t v54;
  uint64_t v55;
  void *__p[2];
  unsigned __int8 v58;
  _QWORD v59[2];
  uint64_t v60;
  _QWORD v61[10];
  char v62;
  uint64_t v63;
  void **v64;
  uint64_t v65;
  unsigned __int8 v66;
  uint64_t v67;

  sub_100263E50((uint64_t)v59);
  v4 = sub_100263F7C(&v60, (uint64_t)"enabled,", 8);
  v5 = (_QWORD *)std::ostream::operator<<(v4, *a1);
  v6 = sub_100263F7C(v5, (uint64_t)",adrEnabled,", 12);
  v7 = (_QWORD *)std::ostream::operator<<(v6, a1[1]);
  v8 = sub_100263F7C(v7, (uint64_t)",requestsEnabled,", 17);
  v9 = (_QWORD *)std::ostream::operator<<(v8, a1[2]);
  v10 = sub_100263F7C(v9, (uint64_t)",lisUrl,", 8);
  v11 = (char)a1[31];
  if (v11 >= 0)
    v12 = (uint64_t)(a1 + 8);
  else
    v12 = *((_QWORD *)a1 + 1);
  if (v11 >= 0)
    v13 = a1[31];
  else
    v13 = *((_QWORD *)a1 + 2);
  v14 = sub_100263F7C(v10, v12, v13);
  v15 = sub_100263F7C(v14, (uint64_t)",adrUrl,", 8);
  v16 = (char)a1[55];
  if (v16 >= 0)
    v17 = (uint64_t)(a1 + 32);
  else
    v17 = *((_QWORD *)a1 + 4);
  if (v16 >= 0)
    v18 = a1[55];
  else
    v18 = *((_QWORD *)a1 + 5);
  v19 = sub_100263F7C(v15, v17, v18);
  v20 = sub_100263F7C(v19, (uint64_t)",controlUrl,", 12);
  v21 = (char)a1[79];
  if (v21 >= 0)
    v22 = (uint64_t)(a1 + 56);
  else
    v22 = *((_QWORD *)a1 + 7);
  if (v21 >= 0)
    v23 = a1[79];
  else
    v23 = *((_QWORD *)a1 + 8);
  v24 = sub_100263F7C(v20, v22, v23);
  v25 = sub_100263F7C(v24, (uint64_t)",firstLisPostDelay,", 19);
  v26 = (_QWORD *)std::ostream::operator<<(v25, *((double *)a1 + 10));
  v27 = sub_100263F7C(v26, (uint64_t)",periodicLisPostDelay,", 22);
  v28 = (_QWORD *)std::ostream::operator<<(v27, *((double *)a1 + 11));
  v29 = sub_100263F7C(v28, (uint64_t)",initialAdrPostTimeout,", 23);
  v30 = (_QWORD *)std::ostream::operator<<(v29, *((double *)a1 + 12));
  v31 = sub_100263F7C(v30, (uint64_t)",intermediateCert,", 18);
  v32 = (char)a1[127];
  if (v32 >= 0)
    v33 = (uint64_t)(a1 + 104);
  else
    v33 = *((_QWORD *)a1 + 13);
  if (v32 >= 0)
    v34 = a1[127];
  else
    v34 = *((_QWORD *)a1 + 14);
  v35 = sub_100263F7C(v31, v33, v34);
  v36 = sub_100263F7C(v35, (uint64_t)",dsaEnabled,", 12);
  v37 = (_QWORD *)std::ostream::operator<<(v36, a1[128]);
  v38 = sub_100263F7C(v37, (uint64_t)",unmaskCrashDetection,", 22);
  v39 = (_QWORD *)std::ostream::operator<<(v38, a1[129]);
  sub_100263F7C(v39, (uint64_t)",partnerInfoVec,[", 17);
  v40 = *((_QWORD *)a1 + 17);
  v41 = *((_QWORD *)a1 + 18);
  if (v40 != v41)
  {
    do
    {
      v42 = sub_100263F7C(&v60, (uint64_t)"{", 1);
      sub_100F8E92C(v40, &v64);
      if ((v66 & 0x80u) == 0)
        v43 = (void **)&v64;
      else
        v43 = v64;
      if ((v66 & 0x80u) == 0)
        v44 = v66;
      else
        v44 = v65;
      v45 = sub_100263F7C(v42, (uint64_t)v43, v44);
      sub_100263F7C(v45, (uint64_t)"},", 2);
      if ((char)v66 < 0)
        operator delete(v64);
      v40 += 80;
    }
    while (v40 != v41);
    if (*((_QWORD *)a1 + 18) != *((_QWORD *)a1 + 17))
    {
      std::ostream::sentry::sentry(__p, &v60);
      v46 = (char *)&v61[-1] + *(_QWORD *)(v60 - 24);
      if ((v46[32] & 5) == 0)
      {
        (*(void (**)(void ***__return_ptr, _QWORD, uint64_t, uint64_t, uint64_t))(**((_QWORD **)v46 + 5) + 32))(&v64, *((_QWORD *)v46 + 5), -1, 1, 16);
        if (v67 == -1)
          std::ios_base::clear((std::ios_base *)((char *)&v61[-1] + *(_QWORD *)(v60 - 24)), *(_DWORD *)((char *)&v61[3] + *(_QWORD *)(v60 - 24)) | 4);
      }
      std::ostream::sentry::~sentry(__p);
    }
  }
  v47 = sub_100263F7C(&v60, (uint64_t)"]", 1);
  v48 = sub_100263F7C(v47, (uint64_t)",mitigationsConfig,", 19);
  sub_10091EF54(a1 + 160, &v64);
  if ((v66 & 0x80u) == 0)
    v49 = (void **)&v64;
  else
    v49 = v64;
  if ((v66 & 0x80u) == 0)
    v50 = v66;
  else
    v50 = v65;
  v51 = sub_100263F7C(v48, (uint64_t)v49, v50);
  v52 = sub_100263F7C(v51, (uint64_t)",uploadConfig,", 14);
  sub_100F8EA98((unsigned int *)a1 + 80, __p);
  if ((v58 & 0x80u) == 0)
    v53 = __p;
  else
    v53 = (void **)__p[0];
  if ((v58 & 0x80u) == 0)
    v54 = v58;
  else
    v54 = (uint64_t)__p[1];
  sub_100263F7C(v52, (uint64_t)v53, v54);
  if ((char)v58 < 0)
    operator delete(__p[0]);
  if ((char)v66 < 0)
    operator delete(v64);
  std::stringbuf::str(a2, v61);
  *(_QWORD *)((char *)v59
  v60 = v55;
  if (v62 < 0)
    operator delete((void *)v61[8]);
  std::streambuf::~streambuf(v61);
  return std::ios::~ios(&v63);
}

void sub_100F8E8B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::ostream::sentry::~sentry(&__p);
  sub_1018B38B4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_100F8E92C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[2];
  uint64_t v26;
  _QWORD v27[10];
  char v28;
  uint64_t v29;

  sub_100263E50((uint64_t)v25);
  v4 = sub_100263F7C(&v26, (uint64_t)"partnerId,", 10);
  v5 = *(char *)(a1 + 23);
  if (v5 >= 0)
    v6 = a1;
  else
    v6 = *(_QWORD *)a1;
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a1 + 23);
  else
    v7 = *(_QWORD *)(a1 + 8);
  v8 = sub_100263F7C(v4, v6, v7);
  v9 = sub_100263F7C(v8, (uint64_t)",adrCert,", 9);
  v10 = *(char *)(a1 + 47);
  if (v10 >= 0)
    v11 = a1 + 24;
  else
    v11 = *(_QWORD *)(a1 + 24);
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a1 + 47);
  else
    v12 = *(_QWORD *)(a1 + 32);
  v13 = sub_100263F7C(v9, v11, v12);
  v14 = sub_100263F7C(v13, (uint64_t)",requestsSupported,", 19);
  v15 = (_QWORD *)std::ostream::operator<<(v14, *(unsigned __int8 *)(a1 + 48));
  v16 = sub_100263F7C(v15, (uint64_t)",baseURL,", 9);
  v19 = *(_QWORD *)(a1 + 56);
  v18 = a1 + 56;
  v17 = v19;
  v20 = *(char *)(v18 + 23);
  if (v20 >= 0)
    v21 = v18;
  else
    v21 = v17;
  if (v20 >= 0)
    v22 = *(unsigned __int8 *)(v18 + 23);
  else
    v22 = *(_QWORD *)(v18 + 8);
  sub_100263F7C(v16, v21, v22);
  std::stringbuf::str(a2, v27);
  *(_QWORD *)((char *)v25
  v26 = v23;
  if (v28 < 0)
    operator delete((void *)v27[8]);
  std::streambuf::~streambuf(v27);
  return std::ios::~ios(&v29);
}

void sub_100F8EA84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100F8EA98@<X0>(unsigned int *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v11[2];
  uint64_t v12;
  _QWORD v13[10];
  char v14;
  uint64_t v15;

  sub_100263E50((uint64_t)v11);
  v4 = sub_100263F7C(&v12, (uint64_t)"numInFlightUploads,", 19);
  v5 = (_QWORD *)std::ostream::operator<<(v4, *a1);
  v6 = sub_100263F7C(v5, (uint64_t)",maxUploadFileSizeMB,", 21);
  v7 = (_QWORD *)std::ostream::operator<<(v6, a1[1]);
  v8 = sub_100263F7C(v7, (uint64_t)",maxUploadQuotaMB,", 18);
  std::ostream::operator<<(v8, a1[2]);
  std::stringbuf::str(a2, v13);
  *(_QWORD *)((char *)v11
  v12 = v9;
  if (v14 < 0)
    operator delete((void *)v13[8]);
  std::streambuf::~streambuf(v13);
  return std::ios::~ios(&v15);
}

void sub_100F8EB90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100F8EBA8()
{
  operator delete();
}

_QWORD *sub_100F8EBBC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102195F08;
  result[1] = v3;
  return result;
}

uint64_t sub_100F8EBF0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102195F08;
  a2[1] = v2;
  return result;
}

void sub_100F8EC0C(uint64_t a1, unsigned __int8 *a2)
{
  sub_100F7F934(*(_QWORD *)(a1 + 8), *a2);
}

uint64_t sub_100F8EC18(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100F8EC54()
{
}

uint64_t sub_100F8EC60(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10138FD50();
    operator delete();
  }
  return result;
}

const void *sub_100F8EC9C(const void **a1, const void *a2)
{
  const void *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_101139C7C(result);
    operator delete();
  }
  return result;
}

uint64_t sub_100F8ECD8(uint64_t a1)
{
  void *v2;

  sub_100F8ED10(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_100F8ED10(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_1005A94C0((uint64_t)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_100F8ED4C(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1008C5EE4(result);
    operator delete();
  }
  return result;
}

uint64_t *sub_100F8ED88(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD v21[3];

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 <= v6)
        v4 = v6 % v7;
    }
    else
    {
      v4 = (v7 - 1) & v6;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v9)
    {
      for (i = *v9; i; i = (uint64_t *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v4)
            break;
        }
      }
    }
  }
  sub_100F8EFCC(a1, *a2, a4, (uint64_t)v21);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_10012E444(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v4 = v6 % v7;
      else
        v4 = v6;
    }
    else
    {
      v4 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v18)
  {
    *(_QWORD *)v21[0] = *v18;
    *v18 = v21[0];
  }
  else
  {
    *(_QWORD *)v21[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v21[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v21[0])
    {
      v19 = *(_QWORD *)(*(_QWORD *)v21[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7)
          v19 %= v7;
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v21[0];
    }
  }
  i = (uint64_t *)v21[0];
  v21[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_100F8F148((uint64_t)v21, 0);
  return i;
}

void sub_100F8EFB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100F8F148((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_100F8EFCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;

  v7 = a1 + 16;
  v8 = operator new(0xA8uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  *((_DWORD *)v8 + 4) = **a3;
  result = sub_100F8F044((uint64_t)(v8 + 3));
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_100F8F02C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100F8F148(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_100F8F044(uint64_t a1)
{
  *(_DWORD *)a1 = 255;
  sub_1015A2E04((_QWORD *)(a1 + 8), (char *)objc_msgSend(CFSTR("kBundleIDUnavailable"), "UTF8String"));
  *(_BYTE *)(a1 + 32) = 0;
  sub_1015A2E04((_QWORD *)(a1 + 40), (char *)objc_msgSend(CFSTR("kBundleVersionUnavailable"), "UTF8String"));
  *(_BYTE *)(a1 + 64) = 0;
  sub_100119F3C(a1 + 72);
  *(_BYTE *)(a1 + 88) = 0;
  sub_100119F3C(a1 + 96);
  *(_BYTE *)(a1 + 112) = 0;
  sub_100119F3C(a1 + 120);
  *(_BYTE *)(a1 + 136) = 0;
  return a1;
}

void sub_100F8F0F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = v4;
  sub_10011A5A8(v6);
  sub_10011A5A8(v5);
  if (*(char *)(v1 + 63) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

void sub_100F8F148(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_1005A94C0((uint64_t)v2 + 24);
    operator delete(v2);
  }
}

_QWORD *sub_100F8F18C(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  _QWORD v12[5];
  _QWORD aBlock[5];
  _QWORD v14[3];
  char v15;

  *a1 = off_1021D5F20;
  v9 = a5;
  *a1 = off_102195F88;
  a1[1] = v9;
  a1[2] = a3;
  a1[3] = a4;
  v10 = a2;
  a1[5] = 0;
  a1[4] = v10;
  a1[6] = 0;
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x2020000000;
  v15 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_100F8F2C0;
  aBlock[3] = &unk_102149BF8;
  aBlock[4] = v14;
  a1[5] = _Block_copy(aBlock);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100F8F2D4;
  v12[3] = &unk_102149C20;
  v12[4] = v14;
  a1[6] = _Block_copy(v12);
  _Block_object_dispose(v14, 8);
  return a1;
}

void sub_100F8F298(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100015E88(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100F8F2C0(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_100F8F2D4(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
}

void sub_100F8F2F0(uint64_t a1)
{
  sub_100F8F5B4(a1);
  operator delete();
}

id sub_100F8F314(_QWORD *a1, int a2, void *__src, unint64_t a4)
{
  size_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v15;
  uint8_t *v16;
  uint64_t v17;
  _QWORD v18[6];
  __int128 v19;
  uint64_t v20;
  __int128 __dst;
  int v22;
  unint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  unint64_t v27;
  __int16 v28;
  int v29;
  uint8_t buf[4];
  unint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  unint64_t v35;
  __int16 v36;
  int v37;

  if (a4 >= 0x10)
    v8 = 16;
  else
    v8 = a4;
  memcpy(&__dst, __src, v8);
  if (a4 >= 0x11)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102195FC8);
    v9 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      v31 = 0x8000000101C31E31 & 0x7FFFFFFFFFFFFFFFLL;
      v32 = 2048;
      v33 = 16;
      v34 = 2048;
      v35 = a4;
      v36 = 1024;
      v37 = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102195FC8);
      v22 = 136315906;
      v23 = 0x8000000101C31E31 & 0x7FFFFFFFFFFFFFFFLL;
      v24 = 2048;
      v25 = 16;
      v26 = 2048;
      v27 = a4;
      v28 = 1024;
      v29 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", (const char *)&v22, 38, v17, LODWORD(v18[0]));
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionNotifier::SiloDispatcher<CLOrientationNotifier::Sample>::dispatchData(int, const void *, size_t) [T = CLOrientationNotifier::Sample]", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
  }
  v11 = a1[2];
  v10 = a1[3];
  v12 = a1[6];
  v13 = (void *)a1[4];
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_100F8F60C;
  v18[3] = &unk_10217BDB0;
  v18[4] = v12;
  v18[5] = v11;
  v19 = __dst;
  v20 = v10;
  return objc_msgSend(v13, "async:", v18);
}

uint64_t sub_100F8F5B4(uint64_t a1)
{
  *(_QWORD *)a1 = off_102195F88;
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  return sub_100015E88(a1);
}

uint64_t sub_100F8F60C(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 40))(a1 + 48, *(_QWORD *)(a1 + 64));
  return result;
}

void sub_100F8F650(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_100F8F67C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100F8CA40(a2, (uint64_t *)(a1 + 32));
}

uint64_t sub_100F8F688(uint64_t a1, uint64_t a2)
{
  return sub_100F8CA40(a1 + 32, (uint64_t *)(a2 + 32));
}

uint64_t sub_100F8F694(uint64_t a1)
{
  return sub_100857FD0(a1 + 32);
}

__n128 sub_100F8F69C@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[2];
  *a2 = result;
  a2[1].n128_u32[0] = a1[3].n128_u32[0];
  return result;
}

void sub_100F8F6B0(std::locale *a1, uint64_t a2, int a3)
{
  std::locale *v4;

  v4 = sub_1015E3BB4(a1);
  LODWORD(v4[3].__locale_) = a3;
  *(_OWORD *)((char *)&v4[3].__locale_ + 4) = 0u;
  *(_OWORD *)((char *)&v4[5].__locale_ + 4) = 0u;
  HIDWORD(v4[7].__locale_) = 0;
  sub_100F8F748();
}

void sub_100F8F72C(_Unwind_Exception *a1)
{
  std::locale *v1;

  sub_100261F44((uint64_t)&v1[5]);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void sub_100F8F748()
{
  operator new();
}

void sub_100F8F89C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_100F8F8B8()
{
  std::regex_error *exception;

  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, __re_err_parse);
}

void sub_100F8F8F0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100F8F904(uint64_t a1, unsigned __int8 *a2, char *a3)
{
  unsigned __int8 *v6;

  v6 = sub_100F8FF8C(a1, a2, a3);
  if (v6 == a2)
    operator new();
  if (v6 == (unsigned __int8 *)a3)
    return (unsigned __int8 *)a3;
  if (*v6 == 124)
  {
    if (v6 + 1 == sub_100F8FF8C(a1, v6 + 1, a3))
      operator new();
    sub_1015E45BC();
  }
  return v6;
}

unsigned __int8 *sub_100F8FA24(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v6;

  v3 = a2;
  if (a2 == a3)
    return a2;
  v4 = a3;
  if (*a2 == 94)
    operator new();
  if (a2 != a3)
  {
    do
    {
      v6 = v3;
      v3 = sub_100F94800(a1, v3, v4);
    }
    while (v6 != v3);
    if (v6 != v4)
    {
      if (v6 + 1 == v4 && *v6 == 36)
        operator new();
      sub_100F947B4();
    }
  }
  return v4;
}

char *sub_100F8FB70(uint64_t a1, char *a2, char *a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;

  v6 = sub_100F94D08(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2)
LABEL_8:
    sub_100F947B4();
  v7 = v6;
  if (v6 == (unsigned __int8 *)a3)
    return a3;
  if (*v6 == 124)
  {
    if (v6 + 1 != sub_100F94D08(a1, (char *)v6 + 1, a3))
      sub_1015E45BC();
    goto LABEL_8;
  }
  return (char *)v7;
}

unsigned __int8 *sub_100F8FC10(uint64_t a1, unsigned __int8 *__s, unsigned __int8 *a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;

  v6 = (unsigned __int8 *)memchr(__s, 10, a3 - __s);
  if (v6)
    v7 = v6;
  else
    v7 = a3;
  if (v7 == __s)
    operator new();
  sub_100F8FA24(a1, __s, v7);
  if (v7 == a3)
    v8 = v7;
  else
    v8 = v7 + 1;
  if (v8 != a3)
  {
    v9 = (unsigned __int8 *)memchr(v8, 10, a3 - v8);
    if (v9)
      v10 = v9;
    else
      v10 = a3;
    if (v10 != v8)
    {
      sub_100F8FA24(a1, v8, v10);
      sub_1015E45BC();
    }
    operator new();
  }
  return a3;
}

char *sub_100F8FD68(uint64_t a1, char *__s, char *a3)
{
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;

  v6 = (char *)memchr(__s, 10, a3 - __s);
  if (v6)
    v7 = v6;
  else
    v7 = a3;
  if (v7 == __s)
    operator new();
  sub_100F8FB70(a1, __s, v7);
  if (v7 == a3)
    v8 = v7;
  else
    v8 = v7 + 1;
  if (v8 != a3)
  {
    v9 = (char *)memchr(v8, 10, a3 - v8);
    if (v9)
      v10 = v9;
    else
      v10 = a3;
    if (v10 != v8)
    {
      sub_100F8FB70(a1, v8, v10);
      sub_1015E45BC();
    }
    operator new();
  }
  return a3;
}

void sub_100F8FEC0()
{
  std::regex_error *exception;

  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, __re_err_grammar);
}

void sub_100F8FEF8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_100F8FF0C(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

uint64_t sub_100F8FF20(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_100F8FF38(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100F8FF78(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

unsigned __int8 *sub_100F8FF8C(uint64_t a1, unsigned __int8 *a2, char *a3)
{
  unsigned __int8 *v5;

  do
  {
    v5 = a2;
    a2 = sub_100F8FFD4(a1, (char *)a2, a3);
  }
  while (v5 != a2);
  return v5;
}

unsigned __int8 *sub_100F8FFD4(uint64_t a1, char *a2, char *a3)
{
  unsigned __int8 *result;
  unsigned __int8 *v7;

  result = (unsigned __int8 *)sub_100F90068(a1, a2, a3);
  if (result == (unsigned __int8 *)a2)
  {
    v7 = sub_100F90318(a1, (unsigned __int8 *)a2, a3);
    result = (unsigned __int8 *)a2;
    if (v7 != (unsigned __int8 *)a2)
      return sub_100F90500(a1, v7, (unsigned __int8 *)a3);
  }
  return result;
}

char *sub_100F90068(uint64_t a1, char *a2, char *a3)
{
  int v6;
  int v7;
  int v9;
  std::locale v10[3];
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  if (a2 != a3)
  {
    v6 = *a2;
    if (v6 > 91)
    {
      if (v6 == 92)
      {
        if (a2 + 1 != a3)
        {
          v9 = a2[1];
          if (v9 == 66 || v9 == 98)
            sub_1015E4EE0();
        }
      }
      else if (v6 == 94)
      {
        operator new();
      }
    }
    else
    {
      if (v6 == 36)
        operator new();
      if (v6 == 40 && a2 + 1 != a3 && a2[1] == 63 && a2 + 2 != a3)
      {
        v7 = a2[2];
        if (v7 == 33)
        {
          sub_1015E3BB4(v10);
          v11 = 0u;
          v13 = 0;
          v12 = 0u;
          LODWORD(v11) = *(_DWORD *)(a1 + 24);
          sub_100F8F748(v10, a2 + 3, a3);
          sub_1015E4F64();
        }
        if (v7 == 61)
        {
          sub_1015E3BB4(v10);
          v11 = 0u;
          v13 = 0;
          v12 = 0u;
          LODWORD(v11) = *(_DWORD *)(a1 + 24);
          sub_100F8F748(v10, a2 + 3, a3);
          sub_1015E4F64();
        }
      }
    }
  }
  return a2;
}

void sub_100F902EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_100261F44((uint64_t)&a14);
  std::locale::~locale(&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100F90318(uint64_t a1, unsigned __int8 *a2, char *a3)
{
  unsigned __int8 *v3;
  int v6;
  _BYTE *v8;
  char *v9;
  char *v10;
  char *v11;

  v3 = a2;
  if (a2 != (unsigned __int8 *)a3)
  {
    v6 = (char)*a2;
    if (v6 <= 62)
    {
      if (v6 != 40)
      {
        if (v6 == 46)
          operator new();
        if ((v6 - 42) >= 2)
          return sub_100F91634(a1, a2, a3);
LABEL_28:
        sub_100F915E8();
      }
      v8 = a2 + 1;
      if (a2 + 1 != (unsigned __int8 *)a3)
      {
        if (a2 + 2 != (unsigned __int8 *)a3 && *v8 == 63 && a2[2] == 58)
        {
          ++*(_DWORD *)(a1 + 36);
          v9 = (char *)sub_100F8F904(a1, a2 + 3, a3);
          if (v9 != a3 && *v9 == 41)
          {
            --*(_DWORD *)(a1 + 36);
            return (unsigned __int8 *)(v9 + 1);
          }
        }
        else
        {
          sub_1015E5B30(a1);
          ++*(_DWORD *)(a1 + 36);
          v10 = (char *)sub_100F8F904(a1, v8, a3);
          if (v10 != a3)
          {
            v11 = v10;
            if (*v10 == 41)
            {
              sub_1015E5BA4(a1);
              --*(_DWORD *)(a1 + 36);
              return (unsigned __int8 *)(v11 + 1);
            }
          }
        }
      }
      sub_100F90808();
    }
    if (v6 > 91)
    {
      if (v6 == 92)
        return sub_100F91438(a1, a2, (unsigned __int8 *)a3);
      if (v6 == 123)
        goto LABEL_28;
    }
    else
    {
      if (v6 == 91)
        return sub_100F914D8(a1, a2, a3);
      if (v6 == 63)
        goto LABEL_28;
    }
    return sub_100F91634(a1, a2, a3);
  }
  return v3;
}

unsigned __int8 *sub_100F90500(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  int v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  unsigned __int8 *v12;
  int v13;
  int v14;

  if (a2 == a3)
    return a2;
  v5 = (char)*a2;
  if (v5 <= 62)
  {
    if (v5 == 42 || (v6 = a2, v5 == 43))
LABEL_18:
      sub_1015E7D10();
    return v6;
  }
  if (v5 == 63)
    goto LABEL_18;
  v6 = a2;
  if (v5 == 123)
  {
    v7 = a2 + 1;
    v8 = sub_100F943C8(a1, a2 + 1, a3, &v14);
    if (v7 == v8)
      goto LABEL_24;
    if (v8 != a3)
    {
      v9 = (char)*v8;
      if (v9 != 44)
      {
        if (v9 == 125)
          goto LABEL_18;
LABEL_24:
        sub_100F94464();
      }
      v10 = v8 + 1;
      if (v8 + 1 == a3)
        goto LABEL_24;
      if (*v10 == 125)
        goto LABEL_18;
      v13 = -1;
      v12 = sub_100F943C8(a1, v10, a3, &v13);
      if (v10 != v12 && v12 != a3 && *v12 == 125)
      {
        if (v13 >= v14)
          goto LABEL_18;
        goto LABEL_24;
      }
    }
    sub_100F944B0();
  }
  return v6;
}

void sub_100F90808()
{
  std::regex_error *exception;

  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_paren);
}

void sub_100F90840(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100F90854(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v4;

  if (*(_BYTE *)(a2 + 92))
  {
    if (*(_QWORD *)(a2 + 16) != *(_QWORD *)(a2 + 8) || (*(_BYTE *)(a2 + 88) & 1) != 0)
    {
LABEL_12:
      v4 = 0;
      *(_DWORD *)a2 = -993;
      goto LABEL_13;
    }
  }
  else
  {
    if (!*(_BYTE *)(result + 16))
      goto LABEL_12;
    v2 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10)
      goto LABEL_12;
  }
  *(_DWORD *)a2 = -994;
  v4 = *(_QWORD *)(result + 8);
LABEL_13:
  *(_QWORD *)(a2 + 80) = v4;
  return result;
}

uint64_t sub_100F908B4(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  int v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(_BYTE *)(a2 + 88) & 2) == 0
    || *(_BYTE *)(result + 16) && ((v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    v5 = *(_QWORD *)(result + 8);
  }
  else
  {
    v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(_QWORD *)(a2 + 80) = v5;
  return result;
}

uint64_t sub_100F90904(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;

  v2 = *(unsigned __int8 **)(a2 + 8);
  v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3)
    goto LABEL_17;
  v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == v3)
  {
    if ((*(_BYTE *)(a2 + 88) & 8) == 0)
    {
      v6 = *(v3 - 1);
      goto LABEL_13;
    }
LABEL_17:
    v10 = 0;
    goto LABEL_25;
  }
  if (v4 == v2)
  {
    v5 = *(_DWORD *)(a2 + 88);
    if ((v5 & 0x80) == 0)
    {
      if ((v5 & 4) == 0)
      {
        v6 = *v2;
LABEL_13:
        if (v6 == 95
          || (v6 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
        {
          v10 = 1;
          goto LABEL_25;
        }
        goto LABEL_17;
      }
      goto LABEL_17;
    }
  }
  v7 = *(v4 - 1);
  v8 = *v4;
  v9 = v7 == 95 || (v7 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v7) & 0x500) != 0;
  v11 = (_DWORD)v8 == 95
     || (v8 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v8) & 0x500) != 0;
  v10 = v9 != v11;
LABEL_25:
  if (*(unsigned __int8 *)(result + 40) == v10)
  {
    v12 = 0;
    v13 = -993;
  }
  else
  {
    v12 = *(_QWORD *)(result + 8);
    v13 = -994;
  }
  *(_DWORD *)a2 = v13;
  *(_QWORD *)(a2 + 80) = v12;
  return result;
}

uint64_t sub_100F90A18(uint64_t a1, uint64_t a2, char a3, uint64_t a4, int a5)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = off_102196298;
  *(_QWORD *)(a1 + 8) = a4;
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 80) = a5;
  *(_BYTE *)(a1 + 84) = a3;
  return a1;
}

void sub_100F90AA4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char v9;
  char *v10;
  unint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  void *__p;
  char *v19;
  uint64_t v20;
  __int128 v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  char v27;
  char v28;
  uint64_t v29;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0uLL;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  __p = 0;
  v19 = 0;
  v4 = (*(_DWORD *)(a1 + 44) + 1);
  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v20 = 0;
  *(_QWORD *)&v21 = v5;
  *((_QWORD *)&v21 + 1) = v5;
  v22 = 0;
  sub_100F90C2C((char **)&__p, v4, &v21);
  v23 = v6;
  v24 = v6;
  v25 = 0;
  v26 = v21;
  v27 = v22;
  v29 = v6;
  v28 = 1;
  v7 = *(_QWORD *)(a2 + 16);
  if (*(_BYTE *)(a2 + 92))
    v8 = v7 == *(_QWORD *)(a2 + 8);
  else
    v8 = 0;
  v9 = v8;
  if (*(unsigned __int8 *)(a1 + 84) == sub_1015E5348(a1 + 16, v7, *(_QWORD *)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v9))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    v10 = (char *)__p;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 8);
  v10 = (char *)__p;
  v11 = 0xAAAAAAAAAAAAAAABLL * ((v19 - (_BYTE *)__p) >> 3);
  if (v11 < 2)
  {
LABEL_13:
    if (!v10)
      return;
    goto LABEL_14;
  }
  v12 = 0;
  v13 = *(_DWORD *)(a1 + 80);
  v14 = *(_QWORD *)(a2 + 32);
  v15 = 1;
  do
  {
    v16 = &v10[24 * v15];
    v17 = v14 + 24 * (v13 + v12);
    *(_OWORD *)v17 = *(_OWORD *)v16;
    *(_BYTE *)(v17 + 16) = v16[16];
    v15 = (v12 + 2);
    ++v12;
  }
  while (v11 > v15);
LABEL_14:
  v19 = v10;
  operator delete(v10);
}

void sub_100F90C0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_100F90C2C(char **a1, unint64_t a2, __int128 *a3)
{
  uint64_t v6;
  char *result;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  __int128 v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;

  v6 = (uint64_t)a1[2];
  result = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (uint64_t)result) >> 3) >= a2)
  {
    v15 = a1[1];
    v16 = (v15 - result) / 24;
    if (v16 >= a2)
      v17 = a2;
    else
      v17 = (v15 - result) / 24;
    if (v17)
    {
      v18 = result;
      do
      {
        *(_OWORD *)v18 = *a3;
        v18[16] = *((_BYTE *)a3 + 16);
        v18 += 24;
        --v17;
      }
      while (v17);
    }
    if (a2 <= v16)
    {
      a1[1] = &result[24 * a2];
    }
    else
    {
      v19 = &v15[24 * (a2 - v16)];
      v20 = 24 * a2 - 24 * v16;
      do
      {
        v21 = *a3;
        *((_QWORD *)v15 + 2) = *((_QWORD *)a3 + 2);
        *(_OWORD *)v15 = v21;
        v15 += 24;
        v20 -= 24;
      }
      while (v20);
      a1[1] = v19;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a2 > 0xAAAAAAAAAAAAAAALL)
      sub_100259694();
    v8 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= a2)
      v9 = a2;
    if (v8 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v9;
    result = sub_100259C18(a1, v10);
    v11 = a1[1];
    v12 = &v11[24 * a2];
    v13 = 24 * a2;
    do
    {
      v14 = *a3;
      *((_QWORD *)v11 + 2) = *((_QWORD *)a3 + 2);
      *(_OWORD *)v11 = v14;
      v11 += 24;
      v13 -= 24;
    }
    while (v13);
    a1[1] = v12;
  }
  return result;
}

void sub_100F90DA0(uint64_t a1, unint64_t a2, __int128 *a3)
{
  unint64_t v3;
  BOOL v4;
  unint64_t v5;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v4 = a2 >= v3;
  v5 = a2 - v3;
  if (v5 != 0 && v4)
  {
    sub_100F91134((void **)a1, v5, a3);
  }
  else if (!v4)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 24 * a2;
  }
}

void sub_100F90DDC(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    sub_100F912A8((void **)a1, a2 - v2);
  }
}

void sub_100F90E0C()
{
  std::regex_error *exception;

  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_complexity);
}

void sub_100F90E44(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_100F90E58()
{
  std::regex_error *exception;

  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, __re_err_unknown);
}

void sub_100F90E90(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100F90EA4(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_100F90F18((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100F90F18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 80);
      *(_OWORD *)(v7 - 96) = *(_OWORD *)(a3 - 96);
      *(_OWORD *)(v7 - 80) = v8;
      *(_QWORD *)(v7 - 56) = 0;
      *(_QWORD *)(v7 - 48) = 0;
      *(_QWORD *)(v7 - 64) = 0;
      *(_OWORD *)(v7 - 64) = *(_OWORD *)(a3 - 64);
      *(_QWORD *)(v7 - 48) = *(_QWORD *)(a3 - 48);
      *(_QWORD *)(a3 - 64) = 0;
      *(_QWORD *)(a3 - 56) = 0;
      *(_QWORD *)(a3 - 48) = 0;
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 - 40);
      *(_QWORD *)(v7 - 24) = *(_QWORD *)(a3 - 24);
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v9 = *(_QWORD *)(a3 - 16);
      *(_QWORD *)(v7 - 11) = *(_QWORD *)(a3 - 11);
      *(_QWORD *)(v7 - 16) = v9;
      v7 = *((_QWORD *)&v15 + 1) - 96;
      *((_QWORD *)&v15 + 1) -= 96;
      a3 -= 96;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  sub_100F90FF8((uint64_t)v12);
  return v10;
}

uint64_t sub_100F90FF8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_100F9102C((uint64_t *)a1);
  return a1;
}

void sub_100F9102C(uint64_t *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = *(_QWORD **)(a1[2] + 8);
  v2 = *(_QWORD **)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_100F9107C(v3, v1);
      v1 += 12;
    }
    while (v1 != v2);
  }
}

void sub_100F9107C(uint64_t a1, _QWORD *a2)
{
  void *v3;
  void *v4;

  v3 = (void *)a2[7];
  if (v3)
  {
    a2[8] = v3;
    operator delete(v3);
  }
  v4 = (void *)a2[4];
  if (v4)
  {
    a2[5] = v4;
    operator delete(v4);
  }
}

void **sub_100F910C0(void **a1)
{
  sub_100F910F0(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_100F910F0(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 96;
    sub_100F9107C(v4, (_QWORD *)(i - 96));
  }
}

void sub_100F91134(void **a1, unint64_t a2, __int128 *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  __int128 v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  __int128 v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_QWORD **)(v6 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (_BYTE *)v9) >> 3) >= a2)
  {
    if (a2)
    {
      v15 = &v9[3 * a2];
      v16 = 24 * a2;
      do
      {
        v17 = *a3;
        v9[2] = *((_QWORD *)a3 + 2);
        *(_OWORD *)v9 = v17;
        v9 += 3;
        v16 -= 24;
      }
      while (v16);
      v9 = v15;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (_BYTE *)*a1) >> 3);
    v11 = v10 + a2;
    if (v10 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_100259694();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)*a1) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x555555555555555)
      v13 = 0xAAAAAAAAAAAAAAALL;
    else
      v13 = v11;
    if (v13)
      v14 = (char *)sub_1002596A8(v6, v13);
    else
      v14 = 0;
    v18 = &v14[24 * v10];
    v19 = &v18[24 * a2];
    v20 = 24 * a2;
    v21 = v18;
    do
    {
      v22 = *a3;
      *((_QWORD *)v21 + 2) = *((_QWORD *)a3 + 2);
      *(_OWORD *)v21 = v22;
      v21 += 24;
      v20 -= 24;
    }
    while (v20);
    v23 = &v14[24 * v13];
    v25 = (char *)*a1;
    v24 = (char *)a1[1];
    if (v24 != *a1)
    {
      do
      {
        v26 = *(_OWORD *)(v24 - 24);
        *((_QWORD *)v18 - 1) = *((_QWORD *)v24 - 1);
        *(_OWORD *)(v18 - 24) = v26;
        v18 -= 24;
        v24 -= 24;
      }
      while (v24 != v25);
      v24 = (char *)*a1;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v23;
    if (v24)
      operator delete(v24);
  }
}

void sub_100F912A8(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      sub_100259694();
    v10 = v8 >> 4;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)sub_10028E224(v4, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v10];
    v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    v16 = &v14[16 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

void sub_100F913B4(void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 12;
        sub_100F9107C((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unsigned __int8 *sub_100F91438(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v5;
  unsigned __int8 *result;

  if (a2 == a3 || *a2 != 92)
    return a2;
  v5 = a2 + 1;
  if (a2 + 1 == a3)
    sub_100F916A4();
  result = sub_100F916F0(a1, a2 + 1, a3);
  if (v5 == result)
  {
    result = (unsigned __int8 *)sub_100F917A4(a1, (char *)a2 + 1, (char *)a3);
    if (v5 == result)
    {
      result = sub_100F91870(a1, (char *)a2 + 1, (char *)a3, 0);
      if (v5 == result)
        return a2;
    }
  }
  return result;
}

_BYTE *sub_100F914D8(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 != a3)
      sub_1015E6680();
    sub_100F92BF4();
  }
  return a2;
}

void sub_100F915E8()
{
  std::regex_error *exception;

  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_badrepeat);
}

void sub_100F91620(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_BYTE *sub_100F91634(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  int v3;
  BOOL v4;

  if (a2 != a3)
  {
    v3 = (char)*a2;
    v4 = (v3 - 36) > 0x3A || ((1 << (*a2 - 36)) & 0x7800000080004F1) == 0;
    if (v4 && (v3 - 123) >= 3)
      sub_1015E6030(a1);
  }
  return a2;
}

void sub_100F916A4()
{
  std::regex_error *exception;

  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_escape);
}

void sub_100F916DC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100F916F0(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  int v4;
  unsigned int v5;
  unsigned __int8 *v6;
  int v7;

  if (a2 != a3)
  {
    v4 = *a2;
    v5 = v4 - 48;
    if (v4 == 48)
      sub_1015E6030(a1);
    if ((v4 - 49) <= 8)
    {
      v6 = a2 + 1;
      if (v6 == a3)
        goto LABEL_10;
      do
      {
        v7 = *v6;
        if ((v7 - 48) > 9)
          break;
        if (v5 >= 0x19999999)
          goto LABEL_13;
        ++v6;
        v5 = v7 + 10 * v5 - 48;
      }
      while (v6 != a3);
      if (v5)
      {
LABEL_10:
        if (v5 <= *(_DWORD *)(a1 + 28))
          sub_1015E6154(a1);
      }
LABEL_13:
      sub_100F91B4C();
    }
  }
  return a2;
}

char *sub_100F917A4(uint64_t a1, char *a2, char *a3)
{
  int v3;

  if (a2 == a3)
    return a2;
  v3 = *a2;
  if (v3 > 99)
  {
    if (v3 == 119)
      goto LABEL_12;
    if (v3 == 115)
LABEL_13:
      sub_1015E6680();
    if (v3 != 100)
      return a2;
LABEL_10:
    sub_1015E6680();
  }
  switch(v3)
  {
    case 'D':
      goto LABEL_10;
    case 'S':
      goto LABEL_13;
    case 'W':
LABEL_12:
      sub_1015E6680();
  }
  return a2;
}

unsigned __int8 *sub_100F91870(uint64_t a1, char *a2, char *a3, std::string *this)
{
  char *v4;
  int v5;
  char v6;
  std::string *v7;
  std::string::value_type v8;
  int v9;
  int v10;
  char v11;
  int v12;
  char v13;
  int v14;
  char v15;
  unsigned int v16;

  v4 = a2;
  if (a2 == a3)
    return (unsigned __int8 *)v4;
  v5 = *a2;
  if (v5 > 109)
  {
    v6 = 0;
    switch(*a2)
    {
      case 'n':
        if (!this)
          goto LABEL_54;
        v7 = this;
        v8 = 10;
        goto LABEL_52;
      case 'r':
        if (!this)
          goto LABEL_54;
        v7 = this;
        v8 = 13;
        goto LABEL_52;
      case 't':
        if (!this)
          goto LABEL_54;
        v7 = this;
        v8 = 9;
        goto LABEL_52;
      case 'u':
        if (a2 + 1 == a3)
          goto LABEL_57;
        v9 = a2[1];
        if ((v9 & 0xF8) != 0x30 && (v9 & 0xFE) != 0x38 && (v9 | 0x20u) - 97 >= 6)
          goto LABEL_57;
        v4 = a2 + 2;
        if (a2 + 2 == a3)
          goto LABEL_57;
        v10 = *v4;
        v11 = -48;
        if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38)
          goto LABEL_24;
        v10 |= 0x20u;
        if ((v10 - 97) >= 6)
          goto LABEL_57;
        v11 = -87;
LABEL_24:
        v6 = 16 * (v11 + v10);
LABEL_25:
        if (v4 + 1 == a3)
          goto LABEL_57;
        v12 = v4[1];
        v13 = -48;
        if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38)
          goto LABEL_30;
        v12 |= 0x20u;
        if ((v12 - 97) >= 6)
          goto LABEL_57;
        v13 = -87;
LABEL_30:
        if (v4 + 2 == a3)
          goto LABEL_57;
        v14 = v4[2];
        v15 = -48;
        if ((v14 & 0xF8) == 0x30 || (v14 & 0xFE) == 0x38)
          goto LABEL_35;
        v14 |= 0x20u;
        if ((v14 - 97) >= 6)
          goto LABEL_57;
        v15 = -87;
LABEL_35:
        if (!this)
          sub_1015E6030(a1);
        std::string::operator=(this, v15 + v14 + 16 * (v13 + v12 + v6));
        v4 += 3;
        break;
      case 'v':
        if (!this)
          goto LABEL_54;
        v7 = this;
        v8 = 11;
        goto LABEL_52;
      case 'x':
        goto LABEL_25;
      default:
        goto LABEL_47;
    }
    return (unsigned __int8 *)v4;
  }
  if (v5 == 48)
  {
    if (this)
    {
      v7 = this;
      v8 = 0;
      goto LABEL_52;
    }
LABEL_54:
    sub_1015E6030(a1);
  }
  if (v5 != 99)
  {
    if (v5 == 102)
    {
      if (this)
      {
        v7 = this;
        v8 = 12;
LABEL_52:
        std::string::operator=(v7, v8);
        return (unsigned __int8 *)++v4;
      }
      goto LABEL_54;
    }
LABEL_47:
    if (*a2 != 95
      && ((v5 & 0x80) != 0
       || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16) + 4 * *a2) & 0x500) == 0))
    {
      v8 = *a2;
      if (this)
      {
        v7 = this;
        goto LABEL_52;
      }
      goto LABEL_54;
    }
LABEL_57:
    sub_100F916A4();
  }
  if (a2 + 1 == a3)
    goto LABEL_57;
  if (a2[1] < 65)
    goto LABEL_57;
  v16 = a2[1];
  if (v16 >= 0x5B && (v16 - 97) > 0x19u)
    goto LABEL_57;
  if (!this)
    sub_1015E6030(a1);
  std::string::operator=(this, v16 & 0x1F);
  v4 += 2;
  return (unsigned __int8 *)v4;
}

void sub_100F91B4C()
{
  std::regex_error *exception;

  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_backref);
}

void sub_100F91B84(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100F91B98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)a1 = off_102196328;
  *(_QWORD *)(a1 + 8) = a4;
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 40) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8), a3);
  return a1;
}

void sub_100F91C04(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::locale *v2;
  uint64_t v4;

  std::locale::~locale(v2);
  *v1 = off_102196190;
  v4 = v1[1];
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

uint64_t sub_100F91C3C(uint64_t result, uint64_t a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (v4 = result,
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(result + 24) + 40))(*(_QWORD *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(_QWORD *)(a2 + 16);
    v5 = *(_QWORD *)(v4 + 8);
  }
  *(_QWORD *)(a2 + 80) = v5;
  return result;
}

uint64_t sub_100F91CB4(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v3;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

uint64_t sub_100F91CFC(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v3;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

uint64_t sub_100F91D44(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v3 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (*(_BYTE *)(v3 + 16))
  {
    v4 = *(_QWORD *)(v3 + 8) - *(_QWORD *)v3;
    v5 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(a2 + 24) - v5 >= v4)
    {
      v7 = result;
      if (v4 < 1)
      {
LABEL_9:
        *(_DWORD *)a2 = -994;
        *(_QWORD *)(a2 + 16) = v5 + v4;
        v6 = *(_QWORD *)(v7 + 8);
        goto LABEL_10;
      }
      v8 = 0;
      while (1)
      {
        v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)(*(_QWORD *)v3 + v8));
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)(*(_QWORD *)(a2 + 16) + v8));
        if (v9 != (_DWORD)result)
          break;
        if (v4 == ++v8)
        {
          v5 = *(_QWORD *)(a2 + 16);
          goto LABEL_9;
        }
      }
    }
  }
  v6 = 0;
  *(_DWORD *)a2 = -993;
LABEL_10:
  *(_QWORD *)(a2 + 80) = v6;
  return result;
}

uint64_t sub_100F91E28(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;

  v2 = *(_DWORD *)(result + 40) - 1;
  v3 = *(_QWORD *)(a2 + 32);
  if (*(_BYTE *)(v3 + 24 * v2 + 16))
  {
    v4 = (unsigned __int8 **)(v3 + 24 * v2);
    v5 = *v4;
    v6 = v4[1] - *v4;
    v7 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(a2 + 24) - v7 >= v6)
    {
      if (v6 < 1)
      {
LABEL_8:
        *(_DWORD *)a2 = -994;
        *(_QWORD *)(a2 + 16) = v7 + v6;
        v8 = *(_QWORD *)(result + 8);
        goto LABEL_9;
      }
      v9 = *(unsigned __int8 **)(a2 + 16);
      v10 = v6;
      while (1)
      {
        v12 = *v5++;
        v11 = v12;
        v13 = *v9++;
        if (v11 != v13)
          break;
        if (!--v10)
          goto LABEL_8;
      }
    }
  }
  v8 = 0;
  *(_DWORD *)a2 = -993;
LABEL_9:
  *(_QWORD *)(a2 + 80) = v8;
  return result;
}

unsigned int *sub_100F91EB8(unsigned int *result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v5;
  unsigned int *v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = result[4];
  v3 = *(_QWORD *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 40) - v3) >> 3) < v2)
    sub_100F91B4C();
  v5 = v2 - 1;
  if (*(_BYTE *)(v3 + 24 * v5 + 16)
    && (v6 = result,
        v7 = v3 + 24 * v5,
        result = *(unsigned int **)v7,
        v8 = *(_QWORD *)(v7 + 8) - *(_QWORD *)v7,
        v9 = *(_QWORD *)(a2 + 16),
        *(_QWORD *)(a2 + 24) - v9 >= v8)
    && (result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !(_DWORD)result))
  {
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 16) = v9 + v8;
    v10 = *((_QWORD *)v6 + 1);
  }
  else
  {
    v10 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(_QWORD *)(a2 + 80) = v10;
  return result;
}

void sub_100F91F74(uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  unint64_t *v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  _BYTE *v22;
  char v23;
  unint64_t v24;
  _BYTE *v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  _BYTE *v29;
  char v30;
  _BYTE *v31;
  char v32;

  v2 = a2;
  if (*(_BYTE *)(a1 + 169))
  {
    v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
    v5 = *(_BYTE **)(a1 + 48);
    v4 = *(_QWORD *)(a1 + 56);
    if ((unint64_t)v5 >= v4)
    {
      v6 = (unint64_t *)(a1 + 40);
      v7 = *(_QWORD *)(a1 + 40);
      v8 = &v5[-v7];
      v9 = (uint64_t)&v5[-v7 + 1];
      if (v9 >= 0)
      {
        v10 = v4 - v7;
        if (2 * v10 > v9)
          v9 = 2 * v10;
        if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
          v11 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v11 = v9;
        if (v11)
          v12 = operator new(v11);
        else
          v12 = 0;
        v20 = &v8[(_QWORD)v12];
        v21 = (char *)v12 + v11;
        v8[(_QWORD)v12] = v2;
        v19 = (uint64_t)&v8[(_QWORD)v12 + 1];
        if (v5 != (_BYTE *)v7)
        {
          v22 = &v5[~v7];
          do
          {
            v23 = *--v5;
            (v22--)[(_QWORD)v12] = v23;
          }
          while (v5 != (_BYTE *)v7);
LABEL_45:
          v5 = (_BYTE *)*v6;
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      sub_100259694();
    }
    goto LABEL_22;
  }
  v6 = (unint64_t *)(a1 + 40);
  v5 = *(_BYTE **)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 56);
  if (!*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v13)
    {
      v24 = *v6;
      v25 = &v5[-*v6];
      v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) >= 0)
      {
        v27 = v13 - v24;
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL)
          v28 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
          v12 = operator new(v28);
        else
          v12 = 0;
        v20 = &v25[(_QWORD)v12];
        v21 = (char *)v12 + v28;
        v25[(_QWORD)v12] = v2;
        v19 = (uint64_t)&v25[(_QWORD)v12 + 1];
        if (v5 != (_BYTE *)v24)
        {
          v31 = &v5[~v24];
          do
          {
            v32 = *--v5;
            (v31--)[(_QWORD)v12] = v32;
          }
          while (v5 != (_BYTE *)v24);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    *v5 = v2;
    v19 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v13)
    goto LABEL_22;
  v14 = *v6;
  v15 = &v5[-*v6];
  v16 = (unint64_t)(v15 + 1);
  if ((uint64_t)(v15 + 1) < 0)
    goto LABEL_50;
  v17 = v13 - v14;
  if (2 * v17 > v16)
    v16 = 2 * v17;
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL)
    v18 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v18 = v16;
  if (v18)
    v12 = operator new(v18);
  else
    v12 = 0;
  v20 = &v15[(_QWORD)v12];
  v21 = (char *)v12 + v18;
  v15[(_QWORD)v12] = v2;
  v19 = (uint64_t)&v15[(_QWORD)v12 + 1];
  if (v5 != (_BYTE *)v14)
  {
    v29 = &v5[~v14];
    do
    {
      v30 = *--v5;
      (v29--)[(_QWORD)v12] = v30;
    }
    while (v5 != (_BYTE *)v14);
    goto LABEL_45;
  }
LABEL_46:
  v12 = v20;
LABEL_47:
  *(_QWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 48) = v19;
  *(_QWORD *)(a1 + 56) = v21;
  if (v5)
    operator delete(v5);
LABEL_49:
  *(_QWORD *)(a1 + 48) = v19;
}

uint64_t sub_100F921A0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  const std::locale *v11;
  __int128 v12;
  BOOL v13;
  std::locale v15;
  std::string v16;

  *(_QWORD *)a1 = off_1021964D8;
  *(_QWORD *)(a1 + 8) = a3;
  v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  v12 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 24) = v12;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_BYTE *)(a1 + 168) = a4;
  *(_BYTE *)(a1 + 169) = a5;
  *(_BYTE *)(a1 + 170) = a6;
  std::locale::locale(&v15, v11);
  std::locale::name(&v16, &v15);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
  {
    v13 = v16.__r_.__value_.__l.__size_ != 1 || *v16.__r_.__value_.__l.__data_ != 67;
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  else
  {
    v13 = SHIBYTE(v16.__r_.__value_.__r.__words[2]) != 1 || v16.__r_.__value_.__s.__data_[0] != 67;
  }
  std::locale::~locale(&v15);
  *(_BYTE *)(a1 + 171) = v13;
  return a1;
}

void sub_100F922B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10)
{
  _QWORD *v10;
  std::locale *v11;
  void **v12;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;

  std::locale::~locale((std::locale *)&a9);
  a10 = v10 + 17;
  sub_100259608((void ***)&a10);
  v14 = (void *)v10[14];
  if (v14)
  {
    v10[15] = v14;
    operator delete(v14);
  }
  sub_1003B01F4((void ***)&a10);
  v15 = (void *)v10[8];
  if (v15)
  {
    v10[9] = v15;
    operator delete(v15);
  }
  v16 = *v12;
  if (*v12)
  {
    v10[6] = v16;
    operator delete(v16);
  }
  std::locale::~locale(v11);
  *v10 = off_102196190;
  v17 = v10[1];
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  _Unwind_Resume(a1);
}

void sub_100F9233C(uint64_t a1, uint64_t a2)
{
  signed __int8 *v4;
  signed __int8 *v5;
  signed __int8 v6;
  signed __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  const void *p_p;
  uint64_t v21;
  BOOL v22;
  int v23;
  size_t v24;
  const void *v25;
  size_t v26;
  int v27;
  _BOOL4 v28;
  int v29;
  size_t v30;
  const void *v31;
  size_t v32;
  int v33;
  BOOL v34;
  int v35;
  int v36;
  uint64_t v37;
  size_t v38;
  unsigned __int8 v39;
  unsigned __int8 *v40;
  unint64_t v41;
  int v42;
  unsigned int v43;
  int v44;
  void *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  size_t v53;
  const void *v54;
  uint64_t v55;
  BOOL v56;
  int v57;
  size_t v58;
  const void *v59;
  size_t v60;
  int v61;
  _BOOL4 v62;
  int v63;
  size_t v64;
  const void *v65;
  size_t v66;
  int v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  void *v74;
  size_t v75;
  size_t v76;
  uint64_t v77;
  BOOL v78;
  unsigned __int8 **v79;
  unsigned __int8 *v80;
  int v81;
  unsigned __int8 *v82;
  void **v83;
  uint64_t v84;
  unint64_t v85;
  int v86;
  unsigned int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  size_t v94;
  void *v95;
  size_t v96;
  uint64_t v97;
  BOOL v98;
  unsigned __int8 **v99;
  unsigned __int8 *v100;
  int v101;
  unsigned __int8 *v102;
  void **v103;
  uint64_t v104;
  int v105;
  int v106;
  uint64_t v107;
  int v108;
  int v109;
  int v110;
  uint64_t v111;
  int v112;
  char v113;
  char v114;
  uint64_t v115;
  int v116;
  int v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void *__p;
  size_t v123;
  char v124;
  unsigned __int8 v125;
  unsigned __int8 v126;
  uint64_t v127;

  v4 = *(signed __int8 **)(a2 + 16);
  v5 = *(signed __int8 **)(a2 + 24);
  if (v4 == v5)
  {
    v37 = 0;
    v36 = *(unsigned __int8 *)(a1 + 168);
    goto LABEL_221;
  }
  if (!*(_BYTE *)(a1 + 171) || v4 + 1 == v5)
    goto LABEL_58;
  v6 = *v4;
  v125 = *v4;
  v7 = v4[1];
  v126 = v7;
  if (*(_BYTE *)(a1 + 169))
  {
    v125 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v6);
    v126 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v7);
  }
  v8 = a1 + 16;
  sub_1015E6930(a1 + 16, (char *)&v125, (char *)&v127, (uint64_t)&__p);
  if ((v124 & 0x80000000) == 0)
  {
    if (v124)
      goto LABEL_8;
LABEL_58:
    v36 = 0;
    v37 = 1;
    goto LABEL_59;
  }
  v38 = v123;
  operator delete(__p);
  if (!v38)
    goto LABEL_58;
LABEL_8:
  v9 = *(_QWORD *)(a1 + 112);
  v10 = *(_QWORD *)(a1 + 120) - v9;
  if (v10)
  {
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    v12 = (_BYTE *)(v9 + 1);
    do
    {
      if (v125 == *(v12 - 1) && v126 == *v12)
        goto LABEL_218;
      v12 += 2;
      --v11;
    }
    while (v11);
  }
  if (!*(_BYTE *)(a1 + 170) || *(_QWORD *)(a1 + 88) == *(_QWORD *)(a1 + 96))
  {
    v36 = 0;
  }
  else
  {
    sub_1015E6894(a1 + 16, (char *)&v125, (char *)&v127);
    v14 = *(_QWORD *)(a1 + 88);
    v15 = v124;
    v16 = *(_QWORD *)(a1 + 96) - v14;
    if (v16)
    {
      v17 = 0;
      v18 = v16 / 48;
      v113 = v124;
      if (v124 >= 0)
        v19 = v124;
      else
        v19 = v123;
      if (v124 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      if (v18 <= 1)
        v21 = 1;
      else
        v21 = v16 / 48;
      v22 = 1;
      while (1)
      {
        v23 = *(char *)(v14 + 23);
        if (v23 >= 0)
          v24 = *(unsigned __int8 *)(v14 + 23);
        else
          v24 = *(_QWORD *)(v14 + 8);
        if (v23 >= 0)
          v25 = (const void *)v14;
        else
          v25 = *(const void **)v14;
        if (v24 >= v19)
          v26 = v19;
        else
          v26 = v24;
        v27 = memcmp(p_p, v25, v26);
        v28 = v19 >= v24;
        if (v27)
          v28 = v27 >= 0;
        if (v28)
        {
          v29 = *(char *)(v14 + 47);
          if (v29 >= 0)
            v30 = *(unsigned __int8 *)(v14 + 47);
          else
            v30 = *(_QWORD *)(v14 + 32);
          if (v29 >= 0)
            v31 = (const void *)(v14 + 24);
          else
            v31 = *(const void **)(v14 + 24);
          if (v19 >= v30)
            v32 = v30;
          else
            v32 = v19;
          v33 = memcmp(v31, p_p, v32);
          v34 = v30 >= v19;
          if (v33)
            v34 = v33 >= 0;
          if (v34)
            break;
        }
        v22 = ++v17 < v18;
        v14 += 48;
        if (v21 == v17)
        {
          v35 = 0;
          v36 = 0;
          goto LABEL_162;
        }
      }
      v36 = 1;
      v35 = 5;
LABEL_162:
      v8 = a1 + 16;
      v15 = v113;
    }
    else
    {
      v22 = 0;
      v35 = 0;
      v36 = 0;
    }
    if (v15 < 0)
      operator delete(__p);
    if (v22)
      goto LABEL_195;
  }
  if (*(_QWORD *)(a1 + 136) == *(_QWORD *)(a1 + 144))
    goto LABEL_200;
  sub_1015E6B68(v8, (char *)&v125, (char *)&v127, (uint64_t)&__p);
  v89 = *(_QWORD *)(a1 + 136);
  v90 = v124;
  v91 = *(_QWORD *)(a1 + 144) - v89;
  if (v91)
  {
    v92 = 0;
    v93 = v91 / 24;
    v95 = __p;
    v94 = v123;
    if (v124 >= 0)
      v96 = v124;
    else
      v96 = v123;
    if (v93 <= 1)
      v97 = 1;
    else
      v97 = v91 / 24;
    v98 = 1;
    while (1)
    {
      v99 = (unsigned __int8 **)(v89 + 24 * v92);
      v100 = (unsigned __int8 *)*((unsigned __int8 *)v99 + 23);
      v101 = (char)v100;
      if ((char)v100 < 0)
        v100 = v99[1];
      if ((unsigned __int8 *)v96 == v100)
      {
        if (v101 >= 0)
          v102 = (unsigned __int8 *)(v89 + 24 * v92);
        else
          v102 = *v99;
        if ((v90 & 0x80) == 0)
        {
          if ((_DWORD)v90)
          {
            v103 = &__p;
            v104 = v90;
            do
            {
              if (*(unsigned __int8 *)v103 != *v102)
                goto LABEL_188;
              v103 = (void **)((char *)v103 + 1);
              ++v102;
              --v104;
            }
            while (v104);
            v36 = 1;
            v35 = 5;
            goto LABEL_192;
          }
          v36 = 1;
          if (v98)
            goto LABEL_220;
LABEL_200:
          if ((char)v125 < 0)
          {
            v109 = *(_DWORD *)(a1 + 164);
            goto LABEL_213;
          }
          v106 = *(_DWORD *)(a1 + 160);
          v107 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
          v108 = *(_DWORD *)(v107 + 4 * v125);
          if ((v108 & v106) == 0 && (v125 != 95 || (v106 & 0x80) == 0)
            || (char)v126 < 0
            || (*(_DWORD *)(v107 + 4 * v126) & v106) == 0 && ((v106 & 0x80) == 0 || v126 != 95))
          {
            v109 = *(_DWORD *)(a1 + 164);
            if ((v108 & v109) != 0 || v125 == 95 && (v109 & 0x80) != 0)
            {
LABEL_217:
              v110 = v36;
              goto LABEL_219;
            }
LABEL_213:
            if (((char)v126 & 0x80000000) == 0)
            {
              if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 4 * v126) & v109) != 0)
                goto LABEL_217;
              v110 = 1;
              if (v126 == 95 && (v109 & 0x80) != 0)
                goto LABEL_217;
LABEL_219:
              v36 = v110;
LABEL_220:
              v37 = 2;
              goto LABEL_221;
            }
          }
LABEL_218:
          v110 = 1;
          goto LABEL_219;
        }
        v118 = v93;
        v121 = v90;
        v105 = memcmp(v95, v102, v94);
        v93 = v118;
        v90 = v121;
        if (!v105)
          break;
      }
LABEL_188:
      v98 = ++v92 < v93;
      if (v92 == v97)
        goto LABEL_191;
    }
    v35 = 5;
    v36 = 1;
    goto LABEL_193;
  }
  v98 = 0;
LABEL_191:
  v35 = 0;
LABEL_192:
  if ((v90 & 0x80) != 0)
LABEL_193:
    operator delete(__p);
  if (!v98)
    goto LABEL_200;
LABEL_195:
  if (v35)
    goto LABEL_220;
  v37 = 2;
LABEL_59:
  v39 = **(_BYTE **)(a2 + 16);
  v125 = v39;
  if (*(_BYTE *)(a1 + 169))
  {
    v39 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), (char)v39);
    v125 = v39;
  }
  v40 = *(unsigned __int8 **)(a1 + 40);
  v41 = *(_QWORD *)(a1 + 48) - (_QWORD)v40;
  if (v41)
  {
    if (v41 <= 1)
      v41 = 1;
    while (1)
    {
      v42 = *v40++;
      if (v42 == v39)
        break;
      if (!--v41)
        goto LABEL_66;
    }
LABEL_77:
    v36 = 1;
    goto LABEL_221;
  }
LABEL_66:
  v43 = *(_DWORD *)(a1 + 164);
  if (v43 || *(_QWORD *)(a1 + 64) != *(_QWORD *)(a1 + 72))
  {
    if ((v39 & 0x80) != 0 || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 4 * v39) & v43) == 0)
      v44 = (v39 == 95) & (v43 >> 7);
    else
      LOBYTE(v44) = 1;
    v45 = *(void **)(a1 + 72);
    v46 = memchr(*(void **)(a1 + 64), (char)v39, (size_t)v45 - *(_QWORD *)(a1 + 64));
    v47 = v46 ? v46 : v45;
    if ((v44 & 1) == 0 && v47 == v45)
      goto LABEL_77;
  }
  v49 = *(_QWORD *)(a1 + 88);
  v48 = *(_QWORD *)(a1 + 96);
  if (v49 != v48)
  {
    if (*(_BYTE *)(a1 + 170))
    {
      sub_1015E6894(a1 + 16, (char *)&v125, (char *)&v126);
      v49 = *(_QWORD *)(a1 + 88);
      v48 = *(_QWORD *)(a1 + 96);
    }
    else
    {
      v124 = 1;
      LOWORD(__p) = v39;
    }
    v50 = v48 - v49;
    if (v50)
    {
      v119 = v37;
      v116 = v36;
      v51 = 0;
      v52 = v50 / 48;
      v114 = v124;
      if (v124 >= 0)
        v53 = v124;
      else
        v53 = v123;
      if (v124 >= 0)
        v54 = &__p;
      else
        v54 = __p;
      if (v52 <= 1)
        v55 = 1;
      else
        v55 = v50 / 48;
      v56 = 1;
      while (1)
      {
        v57 = *(char *)(v49 + 23);
        if (v57 >= 0)
          v58 = *(unsigned __int8 *)(v49 + 23);
        else
          v58 = *(_QWORD *)(v49 + 8);
        if (v57 >= 0)
          v59 = (const void *)v49;
        else
          v59 = *(const void **)v49;
        if (v58 >= v53)
          v60 = v53;
        else
          v60 = v58;
        v61 = memcmp(v54, v59, v60);
        v62 = v53 >= v58;
        if (v61)
          v62 = v61 >= 0;
        if (v62)
        {
          v63 = *(char *)(v49 + 47);
          if (v63 >= 0)
            v64 = *(unsigned __int8 *)(v49 + 47);
          else
            v64 = *(_QWORD *)(v49 + 32);
          if (v63 >= 0)
            v65 = (const void *)(v49 + 24);
          else
            v65 = *(const void **)(v49 + 24);
          if (v53 >= v64)
            v66 = v64;
          else
            v66 = v53;
          v67 = memcmp(v65, v54, v66);
          v68 = v64 >= v53;
          if (v67)
            v68 = v67 >= 0;
          if (v68)
            break;
        }
        v56 = ++v51 < v52;
        v49 += 48;
        if (v55 == v51)
        {
          v36 = v116;
          goto LABEL_123;
        }
      }
      v36 = 1;
LABEL_123:
      v37 = v119;
      if ((v114 & 0x80) == 0)
        goto LABEL_125;
    }
    else
    {
      v56 = 0;
      if ((v124 & 0x80) == 0)
        goto LABEL_125;
    }
    operator delete(__p);
LABEL_125:
    if (v56)
      goto LABEL_221;
  }
  if (*(_QWORD *)(a1 + 136) == *(_QWORD *)(a1 + 144))
    goto LABEL_154;
  sub_1015E6B68(a1 + 16, (char *)&v125, (char *)&v126, (uint64_t)&__p);
  v69 = *(_QWORD *)(a1 + 136);
  v70 = v124;
  v71 = *(_QWORD *)(a1 + 144) - v69;
  if (v71)
  {
    v120 = v37;
    v72 = 0;
    v73 = v71 / 24;
    v74 = __p;
    v75 = v123;
    if (v124 >= 0)
      v76 = v124;
    else
      v76 = v123;
    if (v73 <= 1)
      v77 = 1;
    else
      v77 = v71 / 24;
    v78 = 1;
    while (1)
    {
      v79 = (unsigned __int8 **)(v69 + 24 * v72);
      v80 = (unsigned __int8 *)*((unsigned __int8 *)v79 + 23);
      v81 = (char)v80;
      if ((char)v80 < 0)
        v80 = v79[1];
      if ((unsigned __int8 *)v76 == v80)
      {
        if (v81 >= 0)
          v82 = (unsigned __int8 *)(v69 + 24 * v72);
        else
          v82 = *v79;
        if ((v70 & 0x80) != 0)
        {
          v117 = v36;
          v85 = v73;
          v115 = v77;
          v86 = memcmp(v74, v82, v75);
          v77 = v115;
          v73 = v85;
          v36 = v117;
          if (!v86)
          {
            v36 = 1;
            v37 = v120;
            goto LABEL_152;
          }
        }
        else
        {
          if (!(_DWORD)v70)
          {
            v36 = 1;
            v37 = v120;
            if (!v78)
              goto LABEL_154;
            goto LABEL_221;
          }
          v83 = &__p;
          v84 = v70;
          while (*(unsigned __int8 *)v83 == *v82)
          {
            v83 = (void **)((char *)v83 + 1);
            ++v82;
            if (!--v84)
            {
              v36 = 1;
              goto LABEL_149;
            }
          }
        }
      }
      v78 = ++v72 < v73;
      if (v72 == v77)
      {
LABEL_149:
        v37 = v120;
        if ((v70 & 0x80) == 0)
          goto LABEL_153;
        goto LABEL_152;
      }
    }
  }
  v78 = 0;
  if (v124 < 0)
LABEL_152:
    operator delete(__p);
LABEL_153:
  if (!v78)
  {
LABEL_154:
    if ((char)v125 < 0)
      goto LABEL_221;
    v87 = *(_DWORD *)(a1 + 160);
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 4 * v125) & v87) == 0)
    {
      v88 = (v87 >> 7) & 1;
      if (v125 != 95)
        v88 = 0;
      if (v88 != 1)
        goto LABEL_221;
    }
    goto LABEL_77;
  }
LABEL_221:
  if (v36 == *(unsigned __int8 *)(a1 + 168))
  {
    v111 = 0;
    v112 = -993;
  }
  else
  {
    *(_QWORD *)(a2 + 16) += v37;
    v111 = *(_QWORD *)(a1 + 8);
    v112 = -995;
  }
  *(_DWORD *)a2 = v112;
  *(_QWORD *)(a2 + 80) = v111;
}

void sub_100F92BF4()
{
  std::regex_error *exception;

  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_brack);
}

void sub_100F92C2C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *sub_100F92C40(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  char *v4;
  int v5;
  uint64_t v6;
  int v9;
  char *v10;
  int v11;
  int v12;
  char *v13;
  char *v14;
  int v15;
  std::string *v16;
  _BYTE *v17;
  char *v18;
  char *v19;
  std::string::size_type size;
  char v21;
  std::string __p;
  std::string v24;
  std::string v25;
  std::string v26;

  v4 = a2;
  if (a2 == a3)
    return v4;
  v5 = *a2;
  if (v5 == 93)
    return v4;
  v6 = (uint64_t)a4;
  memset(&v26, 0, sizeof(v26));
  if (a2 + 1 == a3 || v5 != 91)
  {
LABEL_9:
    v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_10;
  }
  v9 = a2[1];
  if (v9 != 46)
  {
    if (v9 == 58)
    {
      v10 = sub_100F931E0(a1, a2 + 2, a3, (uint64_t)a4);
      goto LABEL_38;
    }
    if (v9 == 61)
    {
      v10 = sub_100F93004(a1, a2 + 2, a3, a4);
LABEL_38:
      v6 = (uint64_t)v10;
      v21 = 0;
      goto LABEL_42;
    }
    goto LABEL_9;
  }
  v19 = sub_100F93290(a1, a2 + 2, a3, (uint64_t)&v26);
  v4 = v19;
  v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v26.__r_.__value_.__l.__size_;
  v14 = v19;
  if (!size)
  {
LABEL_10:
    if ((v11 | 0x40) == 0x40)
    {
      v12 = *v4;
      if (v12 == 92)
      {
        v13 = v4 + 1;
        if (v11)
        {
          v14 = sub_100F93498(a1, v13, a3, &v26);
        }
        else
        {
          v14 = (char *)sub_100F93374(a1, v13, a3, &v26, v6);
          v11 = 0;
        }
        goto LABEL_16;
      }
    }
    else
    {
      LOBYTE(v12) = *v4;
    }
    std::string::operator=(&v26, v12);
    v14 = v4 + 1;
  }
LABEL_16:
  if (v14 == a3
    || (v15 = *v14, v15 == 93)
    || (v17 = v14 + 1, v14 + 1 == a3)
    || v15 != 45
    || *v17 == 93)
  {
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v26.__r_.__value_.__l.__size_)
      {
        if (v26.__r_.__value_.__l.__size_ != 1)
        {
          v16 = (std::string *)v26.__r_.__value_.__r.__words[0];
LABEL_40:
          sub_100F93A34(v6, v16->__r_.__value_.__s.__data_[0], v16->__r_.__value_.__s.__data_[1]);
          goto LABEL_41;
        }
        v16 = (std::string *)v26.__r_.__value_.__r.__words[0];
        goto LABEL_25;
      }
    }
    else if (*((_BYTE *)&v26.__r_.__value_.__s + 23))
    {
      v16 = &v26;
      if (HIBYTE(v26.__r_.__value_.__r.__words[2]) != 1)
        goto LABEL_40;
LABEL_25:
      sub_100F91F74(v6, v16->__r_.__value_.__s.__data_[0]);
    }
LABEL_41:
    v21 = 1;
    v4 = v14;
    goto LABEL_42;
  }
  memset(&v25, 0, sizeof(v25));
  v4 = v14 + 2;
  if (v14 + 2 != a3 && *v17 == 91 && *v4 == 46)
  {
    v18 = sub_100F93290(a1, v14 + 3, a3, (uint64_t)&v25);
LABEL_55:
    v4 = v18;
    goto LABEL_56;
  }
  if ((v11 | 0x40) == 0x40)
  {
    LODWORD(v17) = *v17;
    if ((_DWORD)v17 == 92)
    {
      if (v11)
        v18 = sub_100F93498(a1, v14 + 2, a3, &v25);
      else
        v18 = (char *)sub_100F93374(a1, v14 + 2, a3, &v25, v6);
      goto LABEL_55;
    }
  }
  else
  {
    LOBYTE(v17) = *v17;
  }
  std::string::operator=(&v25, (std::string::value_type)v17);
LABEL_56:
  v24 = v26;
  memset(&v26, 0, sizeof(v26));
  __p = v25;
  memset(&v25, 0, sizeof(v25));
  sub_100F93670(v6, (char *)&v24, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  v21 = 1;
LABEL_42:
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if ((v21 & 1) != 0)
    return v4;
  return (char *)v6;
}

void sub_100F92F8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
    operator delete(__p);
  if (*(char *)(v28 - 49) < 0)
    operator delete(*(void **)(v28 - 72));
  _Unwind_Resume(exception_object);
}

char *sub_100F93004(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  char *v6;
  char *v7;
  char *v8;
  char *i;
  int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  void *__p[2];
  unsigned __int8 v19;
  void *v20;
  uint64_t v21;
  unsigned __int8 v22;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_33;
  v6 = a3 - 2;
  v7 = a2;
  v8 = a2;
  for (i = a2; ; v8 = i)
  {
    v10 = *i++;
    if (v10 == 61 && *i == 93)
      break;
    if (a2 == v6)
      goto LABEL_33;
    ++v7;
    --v6;
  }
  if (v8 == a3)
LABEL_33:
    sub_100F92BF4();
  sub_100F93CE8(a1, a2, v7, (uint64_t)&v20);
  if (((char)v22 & 0x80000000) == 0)
  {
    v11 = v22;
    if (v22)
    {
      v12 = (char *)&v20;
      goto LABEL_14;
    }
LABEL_34:
    sub_100F93C5C();
  }
  v11 = v21;
  if (!v21)
    goto LABEL_34;
  v12 = (char *)v20;
LABEL_14:
  sub_1015E781C(a1, v12, &v12[v11], (uint64_t)__p);
  v13 = v19;
  if ((v19 & 0x80u) != 0)
    v13 = (unint64_t)__p[1];
  if (v13)
  {
    sub_100F93CA8(a4, (__int128 *)__p);
  }
  else
  {
    v14 = v22;
    if ((v22 & 0x80u) != 0)
      v14 = v21;
    if (v14 == 2)
    {
      v16 = (char *)&v20;
      if ((v22 & 0x80u) != 0)
        v16 = (char *)v20;
      sub_100F93A34((uint64_t)a4, *v16, v16[1]);
    }
    else
    {
      if (v14 != 1)
        sub_100F93C5C();
      v15 = (char *)&v20;
      if ((v22 & 0x80u) != 0)
        v15 = (char *)v20;
      sub_100F91F74((uint64_t)a4, *v15);
    }
  }
  if ((char)v19 < 0)
    operator delete(__p[0]);
  if ((char)v22 < 0)
    operator delete(v20);
  return v7 + 2;
}

void sub_100F931A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_100F931E0(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  char *v5;
  char *v6;
  char *v7;
  char *i;
  int v9;
  int v10;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_11;
  v5 = a3 - 2;
  v6 = a2;
  v7 = a2;
  for (i = a2; ; v7 = i)
  {
    v9 = *i++;
    if (v9 == 58 && *i == 93)
      break;
    if (a2 == v5)
      goto LABEL_11;
    ++v6;
    --v5;
  }
  if (v7 == a3)
LABEL_11:
    sub_100F92BF4();
  v10 = sub_100F93EC8(a1, a2, v6, *(_DWORD *)(a1 + 24) & 1);
  if (!v10)
    sub_100F93E7C();
  *(_DWORD *)(a4 + 160) |= v10;
  return v6 + 2;
}

char *sub_100F93290(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  char *v5;
  char *v6;
  char *v7;
  char *i;
  int v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v13;
  unint64_t v14;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_15;
  v5 = a3 - 2;
  v6 = a2;
  v7 = a2;
  for (i = a2; ; v7 = i)
  {
    v9 = *i++;
    if (v9 == 46 && *i == 93)
      break;
    if (a2 == v5)
      goto LABEL_15;
    ++v6;
    --v5;
  }
  if (v7 == a3)
LABEL_15:
    sub_100F92BF4();
  sub_100F93CE8(a1, a2, v6, (uint64_t)&v13);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = v13;
  v10 = v14;
  *(_QWORD *)(a4 + 16) = v14;
  v11 = HIBYTE(v10);
  if ((v11 & 0x80u) != 0)
    v11 = *(_QWORD *)(a4 + 8);
  if (v11 - 1 >= 2)
    sub_100F93C5C();
  return v6 + 2;
}

unsigned __int8 *sub_100F93374(uint64_t a1, char *a2, char *a3, std::string *this, uint64_t a5)
{
  int v6;
  int v7;
  int v8;
  std::string::value_type v9;
  std::string *v10;

  if (a2 == a3)
    sub_100F916A4();
  v6 = *a2;
  if (v6 > 97)
  {
    if (v6 > 114)
    {
      if (v6 != 115)
      {
        if (v6 != 119)
          return sub_100F91870(a1, a2, a3, this);
        *(_DWORD *)(a5 + 160) |= 0x500u;
        sub_100F91F74(a5, 95);
        return (unsigned __int8 *)(a2 + 1);
      }
      v8 = *(_DWORD *)(a5 + 160) | 0x4000;
    }
    else
    {
      if (v6 == 98)
      {
        v10 = this;
        v9 = 8;
LABEL_19:
        std::string::operator=(v10, v9);
        return (unsigned __int8 *)(a2 + 1);
      }
      if (v6 != 100)
        return sub_100F91870(a1, a2, a3, this);
      v8 = *(_DWORD *)(a5 + 160) | 0x400;
    }
    *(_DWORD *)(a5 + 160) = v8;
    return (unsigned __int8 *)(a2 + 1);
  }
  if (v6 <= 82)
  {
    if (*a2)
    {
      if (v6 == 68)
      {
        v7 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_21:
        *(_DWORD *)(a5 + 164) = v7;
        return (unsigned __int8 *)(a2 + 1);
      }
      return sub_100F91870(a1, a2, a3, this);
    }
    v9 = 0;
    v10 = this;
    goto LABEL_19;
  }
  if (v6 == 83)
  {
    v7 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_21;
  }
  if (v6 == 87)
  {
    *(_DWORD *)(a5 + 164) |= 0x500u;
    sub_100F93F80(a5, 95);
    return (unsigned __int8 *)(a2 + 1);
  }
  return sub_100F91870(a1, a2, a3, this);
}

char *sub_100F93498(uint64_t a1, char *a2, char *a3, std::string *this)
{
  int v5;
  std::string *v6;
  std::string::value_type v7;
  char v8;
  int v9;
  std::string::value_type v10;
  char *v11;

  if (a2 == a3)
LABEL_45:
    sub_100F916A4();
  v5 = *a2;
  if (v5 > 97)
  {
    switch(v5)
    {
      case 'n':
        if (!this)
          goto LABEL_43;
        v6 = this;
        LOBYTE(v5) = 10;
        goto LABEL_16;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_21;
      case 'r':
        if (!this)
          goto LABEL_43;
        v6 = this;
        LOBYTE(v5) = 13;
        goto LABEL_16;
      case 't':
        if (!this)
          goto LABEL_43;
        v6 = this;
        LOBYTE(v5) = 9;
        goto LABEL_16;
      case 'v':
        if (!this)
          goto LABEL_43;
        v6 = this;
        LOBYTE(v5) = 11;
        goto LABEL_16;
      default:
        if (v5 == 98)
        {
          if (this)
          {
            v6 = this;
            LOBYTE(v5) = 8;
            goto LABEL_16;
          }
        }
        else
        {
          if (v5 != 102)
            goto LABEL_21;
          if (this)
          {
            v6 = this;
            LOBYTE(v5) = 12;
            goto LABEL_16;
          }
        }
        break;
    }
    goto LABEL_43;
  }
  if (v5 > 91)
  {
    if (v5 != 92)
    {
      if (v5 != 97)
        goto LABEL_21;
      if (this)
      {
        v6 = this;
        LOBYTE(v5) = 7;
LABEL_16:
        std::string::operator=(v6, v5);
        return a2 + 1;
      }
LABEL_43:
      sub_1015E6030(a1);
    }
LABEL_14:
    if (this)
    {
      v6 = this;
      goto LABEL_16;
    }
    goto LABEL_43;
  }
  if (v5 == 34 || v5 == 47)
    goto LABEL_14;
LABEL_21:
  if ((v5 & 0xFFFFFFF8) != 0x30)
    goto LABEL_45;
  v7 = v5 - 48;
  v11 = a2 + 1;
  if (a2 + 1 == a3)
  {
LABEL_38:
    v11 = a3;
    goto LABEL_39;
  }
  if ((*v11 & 0xF8) == 0x30)
  {
    v7 = *v11 + 8 * v7 - 48;
    if (a2 + 2 != a3)
    {
      v8 = a2[2];
      v9 = v8 & 0xF8;
      v10 = v8 + 8 * v7 - 48;
      if (v9 == 48)
        v11 = a2 + 3;
      else
        v11 = a2 + 2;
      if (v9 == 48)
        v7 = v10;
      goto LABEL_39;
    }
    goto LABEL_38;
  }
LABEL_39:
  if (!this)
    sub_1015E6030(a1);
  std::string::operator=(this, v7);
  return v11;
}

void sub_100F93670(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  char *v4;
  unint64_t i;
  unint64_t v7;
  char *v8;
  char v9;
  char *v10;
  unint64_t j;
  unint64_t v12;
  char *v13;
  char v14;
  char *v15;
  uint64_t v16;
  unint64_t k;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t m;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char v31;
  _BYTE *v32;
  char *v33;
  char v34;
  _BYTE *v35;
  void *v36[2];
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  void *v40[2];
  uint64_t v41;
  void *__p[2];
  uint64_t v43;

  v3 = a3;
  v4 = a2;
  if (*(_BYTE *)(a1 + 170))
  {
    if (*(_BYTE *)(a1 + 169))
    {
      for (i = 0; ; ++i)
      {
        v7 = v4[23] < 0 ? *((_QWORD *)v4 + 1) : v4[23];
        if (i >= v7)
          break;
        v8 = v4;
        if (v4[23] < 0)
          v8 = *(char **)v4;
        v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v8[i]);
        v10 = v4;
        if (v4[23] < 0)
          v10 = *(char **)v4;
        v10[i] = v9;
      }
      for (j = 0; ; ++j)
      {
        v12 = v3[23] < 0 ? *((_QWORD *)v3 + 1) : v3[23];
        if (j >= v12)
          break;
        v13 = v3;
        if (v3[23] < 0)
          v13 = *(char **)v3;
        v14 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v13[j]);
        v15 = v3;
        if (v3[23] < 0)
          v15 = *(char **)v3;
        v15[j] = v14;
      }
    }
    else
    {
      for (k = 0; ; ++k)
      {
        v18 = a2[23] < 0 ? *((_QWORD *)a2 + 1) : a2[23];
        if (k >= v18)
          break;
        v19 = a2;
        if (a2[23] < 0)
          v19 = *(char **)a2;
        v20 = a2;
        if (a2[23] < 0)
          v20 = *(char **)a2;
        v20[k] = v19[k];
      }
      for (m = 0; ; ++m)
      {
        v22 = a3[23] < 0 ? *((_QWORD *)a3 + 1) : a3[23];
        if (m >= v22)
          break;
        v23 = a3;
        if (a3[23] < 0)
          v23 = *(char **)a3;
        v24 = a3;
        if (a3[23] < 0)
          v24 = *(char **)a3;
        v24[m] = v23[m];
      }
    }
    if (v4[23] < 0)
    {
      v26 = v4;
      v4 = *(char **)v4;
      v25 = *((_QWORD *)v26 + 1);
    }
    else
    {
      v25 = v4[23];
    }
    sub_1015E7B44(a1 + 16, v4, &v4[v25]);
    if (v3[23] < 0)
    {
      v28 = v3;
      v3 = *(char **)v3;
      v27 = *((_QWORD *)v28 + 1);
    }
    else
    {
      v27 = v3[23];
    }
    sub_1015E7B44(a1 + 16, v3, &v3[v27]);
    *(_OWORD *)v40 = v38;
    v41 = v39;
    *(_OWORD *)__p = *(_OWORD *)v36;
    v43 = v37;
    sub_100F941AC((uint64_t *)(a1 + 88), (__int128 *)v40);
    if (SHIBYTE(v43) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v41) < 0)
      operator delete(v40[0]);
  }
  else
  {
    if (a2[23] < 0)
      v16 = *((_QWORD *)a2 + 1);
    else
      v16 = a2[23];
    if (v16 != 1 || (a3[23] < 0 ? (v29 = *((_QWORD *)a3 + 1)) : (v29 = a3[23]), v29 != 1))
      sub_100F94314();
    if (*(_BYTE *)(a1 + 169))
    {
      v30 = a2;
      if (a2[23] < 0)
        v30 = *(char **)a2;
      v31 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v30);
      v32 = v4;
      if (v4[23] < 0)
        v32 = *(_BYTE **)v4;
      *v32 = v31;
      v33 = v3;
      if (v3[23] < 0)
        v33 = *(char **)v3;
      v34 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v33);
      v35 = v3;
      if (v3[23] < 0)
        v35 = *(_BYTE **)v3;
      *v35 = v34;
    }
    *(_OWORD *)v40 = *(_OWORD *)v4;
    v41 = *((_QWORD *)v4 + 2);
    *((_QWORD *)v4 + 1) = 0;
    *((_QWORD *)v4 + 2) = 0;
    *(_QWORD *)v4 = 0;
    *(_OWORD *)__p = *(_OWORD *)v3;
    v43 = *((_QWORD *)v3 + 2);
    *(_QWORD *)v3 = 0;
    *((_QWORD *)v3 + 1) = 0;
    *((_QWORD *)v3 + 2) = 0;
    sub_100F941AC((uint64_t *)(a1 + 88), (__int128 *)v40);
    if (SHIBYTE(v43) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v41) < 0)
      operator delete(v40[0]);
  }
}

void sub_100F939E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_1002FDAA0((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_100F93A34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5;
  __int16 v6;
  unint64_t v7;
  __int16 v8;
  _WORD *v9;
  char **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  _WORD *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  __int16 v39;
  char *v40;
  __int16 v41;

  if (!*(_BYTE *)(a1 + 169))
  {
    v18 = a1 + 128;
    v19 = *(_QWORD *)(a1 + 128);
    v10 = (char **)(a1 + 112);
    v8 = a2 | (unsigned __int16)((_WORD)a3 << 8);
    v9 = *(_WORD **)(a1 + 120);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v9 < v19)
        goto LABEL_24;
      v20 = (char *)v9 - *v10;
      if (v20 > -3)
      {
        v21 = v20 >> 1;
        v22 = v19 - (_QWORD)*v10;
        if (v22 <= (v20 >> 1) + 1)
          v23 = v21 + 1;
        else
          v23 = v22;
        if (v22 >= 0x7FFFFFFFFFFFFFFELL)
          v24 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v24 = v23;
        if (v24)
          v25 = (char *)sub_100BFCCD8(v18, v24);
        else
          v25 = 0;
        v27 = &v25[2 * v21];
        v28 = &v25[2 * v24];
        *(_WORD *)v27 = v8;
        v26 = v27 + 2;
        v38 = *(char **)(a1 + 112);
        v29 = *(char **)(a1 + 120);
        if (v29 == v38)
          goto LABEL_46;
        do
        {
          v39 = *((_WORD *)v29 - 1);
          v29 -= 2;
          *((_WORD *)v27 - 1) = v39;
          v27 -= 2;
        }
        while (v29 != v38);
        goto LABEL_45;
      }
    }
    else
    {
      if ((unint64_t)v9 < v19)
        goto LABEL_24;
      v32 = (char *)v9 - *v10;
      if (v32 > -3)
      {
        v33 = v32 >> 1;
        v34 = v19 - (_QWORD)*v10;
        if (v34 <= (v32 >> 1) + 1)
          v35 = v33 + 1;
        else
          v35 = v34;
        if (v34 >= 0x7FFFFFFFFFFFFFFELL)
          v36 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        if (v36)
          v37 = (char *)sub_100BFCCD8(v18, v36);
        else
          v37 = 0;
        v27 = &v37[2 * v33];
        v28 = &v37[2 * v36];
        *(_WORD *)v27 = v8;
        v26 = v27 + 2;
        v40 = *(char **)(a1 + 112);
        v29 = *(char **)(a1 + 120);
        if (v29 == v40)
          goto LABEL_46;
        do
        {
          v41 = *((_WORD *)v29 - 1);
          v29 -= 2;
          *((_WORD *)v27 - 1) = v41;
          v27 -= 2;
        }
        while (v29 != v40);
        goto LABEL_45;
      }
    }
LABEL_49:
    sub_100259694();
  }
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a3);
  v7 = *(_QWORD *)(a1 + 128);
  v8 = v5 | (unsigned __int16)(v6 << 8);
  v9 = *(_WORD **)(a1 + 120);
  if ((unint64_t)v9 < v7)
  {
LABEL_24:
    *v9 = v8;
    v26 = v9 + 1;
    goto LABEL_48;
  }
  v10 = (char **)(a1 + 112);
  v11 = *(_QWORD *)(a1 + 112);
  v12 = (uint64_t)v9 - v11;
  if ((uint64_t)v9 - v11 <= -3)
    goto LABEL_49;
  v13 = v12 >> 1;
  v14 = v7 - v11;
  if (v14 <= (v12 >> 1) + 1)
    v15 = v13 + 1;
  else
    v15 = v14;
  if (v14 >= 0x7FFFFFFFFFFFFFFELL)
    v16 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v16 = v15;
  if (v16)
    v17 = (char *)sub_100BFCCD8(a1 + 128, v16);
  else
    v17 = 0;
  v27 = &v17[2 * v13];
  v28 = &v17[2 * v16];
  *(_WORD *)v27 = v8;
  v26 = v27 + 2;
  v30 = *(char **)(a1 + 112);
  v29 = *(char **)(a1 + 120);
  if (v29 == v30)
    goto LABEL_46;
  do
  {
    v31 = *((_WORD *)v29 - 1);
    v29 -= 2;
    *((_WORD *)v27 - 1) = v31;
    v27 -= 2;
  }
  while (v29 != v30);
LABEL_45:
  v29 = *v10;
LABEL_46:
  *(_QWORD *)(a1 + 112) = v27;
  *(_QWORD *)(a1 + 120) = v26;
  *(_QWORD *)(a1 + 128) = v28;
  if (v29)
    operator delete(v29);
LABEL_48:
  *(_QWORD *)(a1 + 120) = v26;
}

void sub_100F93C5C()
{
  std::regex_error *exception;

  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_collate);
}

void sub_100F93C94(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100F93CA8(uint64_t *a1, __int128 *a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t result;

  v3 = a1 + 17;
  v4 = a1[18];
  if (v4 >= a1[19])
  {
    result = sub_1015E796C(v3, a2);
  }
  else
  {
    sub_1015E7910(v3, a2);
    result = v4 + 24;
  }
  a1[18] = result;
  return result;
}

void sub_100F93CE8(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  std::string *p_s;
  unint64_t v7;
  unint64_t v8;
  std::string::size_type size;
  std::string *v10;
  int v11;
  uint64_t v12;
  std::string v13;
  std::string __s;

  sub_1015E6AC4(&__s, a2, a3, a3 - a2);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_)
      goto LABEL_9;
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&__s.__r_.__value_.__s + 23))
      return;
    p_s = &__s;
  }
  std::__get_collation_name(&v13, (const char *)p_s);
  *(_OWORD *)a4 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
  v7 = v13.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a4 + 16) = *((_QWORD *)&v13.__r_.__value_.__l + 2);
  v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8)
    goto LABEL_9;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __s.__r_.__value_.__l.__size_;
    if (__s.__r_.__value_.__l.__size_ >= 3)
      goto LABEL_9;
    v10 = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
      return;
    v10 = &__s;
  }
  (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, char *))(**(_QWORD **)(a1 + 16) + 32))(&v13, *(_QWORD *)(a1 + 16), v10, (char *)v10 + size);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(std::string *)a4 = v13;
  if ((*(char *)(a4 + 23) & 0x80000000) == 0)
  {
    v11 = *(unsigned __int8 *)(a4 + 23);
    if (v11 != 12 && v11 != 1)
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_25;
  }
  v12 = *(_QWORD *)(a4 + 8);
  if (v12 == 1 || v12 == 12)
  {
LABEL_25:
    std::string::operator=((std::string *)a4, &__s);
    goto LABEL_9;
  }
  **(_BYTE **)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
}

void sub_100F93E48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
    operator delete(*(void **)v17);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100F93E7C()
{
  std::regex_error *exception;

  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_ctype);
}

void sub_100F93EB4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100F93EC8(uint64_t a1, char *a2, char *a3, BOOL a4)
{
  unint64_t v6;
  void **v7;
  void **v8;
  uint64_t classname;
  void *__p[2];
  unsigned __int8 v12;

  sub_1015E6AC4(__p, a2, a3, a3 - a2);
  v6 = v12;
  if ((v12 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v12 & 0x80u) != 0)
    v6 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), v7, (char *)v7 + v6);
  if ((v12 & 0x80u) == 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  classname = std::__get_classname((const char *)v8, a4);
  if ((char)v12 < 0)
    operator delete(__p[0]);
  return classname;
}

void sub_100F93F64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100F93F80(uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  unint64_t *v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  _BYTE *v22;
  char v23;
  unint64_t v24;
  _BYTE *v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  _BYTE *v29;
  char v30;
  _BYTE *v31;
  char v32;

  v2 = a2;
  if (*(_BYTE *)(a1 + 169))
  {
    v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
    v5 = *(_BYTE **)(a1 + 72);
    v4 = *(_QWORD *)(a1 + 80);
    if ((unint64_t)v5 >= v4)
    {
      v6 = (unint64_t *)(a1 + 64);
      v7 = *(_QWORD *)(a1 + 64);
      v8 = &v5[-v7];
      v9 = (uint64_t)&v5[-v7 + 1];
      if (v9 >= 0)
      {
        v10 = v4 - v7;
        if (2 * v10 > v9)
          v9 = 2 * v10;
        if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
          v11 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v11 = v9;
        if (v11)
          v12 = operator new(v11);
        else
          v12 = 0;
        v20 = &v8[(_QWORD)v12];
        v21 = (char *)v12 + v11;
        v8[(_QWORD)v12] = v2;
        v19 = (uint64_t)&v8[(_QWORD)v12 + 1];
        if (v5 != (_BYTE *)v7)
        {
          v22 = &v5[~v7];
          do
          {
            v23 = *--v5;
            (v22--)[(_QWORD)v12] = v23;
          }
          while (v5 != (_BYTE *)v7);
LABEL_45:
          v5 = (_BYTE *)*v6;
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      sub_100259694();
    }
    goto LABEL_22;
  }
  v6 = (unint64_t *)(a1 + 64);
  v5 = *(_BYTE **)(a1 + 72);
  v13 = *(_QWORD *)(a1 + 80);
  if (!*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v13)
    {
      v24 = *v6;
      v25 = &v5[-*v6];
      v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) >= 0)
      {
        v27 = v13 - v24;
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL)
          v28 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
          v12 = operator new(v28);
        else
          v12 = 0;
        v20 = &v25[(_QWORD)v12];
        v21 = (char *)v12 + v28;
        v25[(_QWORD)v12] = v2;
        v19 = (uint64_t)&v25[(_QWORD)v12 + 1];
        if (v5 != (_BYTE *)v24)
        {
          v31 = &v5[~v24];
          do
          {
            v32 = *--v5;
            (v31--)[(_QWORD)v12] = v32;
          }
          while (v5 != (_BYTE *)v24);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    *v5 = v2;
    v19 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v13)
    goto LABEL_22;
  v14 = *v6;
  v15 = &v5[-*v6];
  v16 = (unint64_t)(v15 + 1);
  if ((uint64_t)(v15 + 1) < 0)
    goto LABEL_50;
  v17 = v13 - v14;
  if (2 * v17 > v16)
    v16 = 2 * v17;
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL)
    v18 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v18 = v16;
  if (v18)
    v12 = operator new(v18);
  else
    v12 = 0;
  v20 = &v15[(_QWORD)v12];
  v21 = (char *)v12 + v18;
  v15[(_QWORD)v12] = v2;
  v19 = (uint64_t)&v15[(_QWORD)v12 + 1];
  if (v5 != (_BYTE *)v14)
  {
    v29 = &v5[~v14];
    do
    {
      v30 = *--v5;
      (v29--)[(_QWORD)v12] = v30;
    }
    while (v5 != (_BYTE *)v14);
    goto LABEL_45;
  }
LABEL_46:
  v12 = v20;
LABEL_47:
  *(_QWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 72) = v19;
  *(_QWORD *)(a1 + 80) = v21;
  if (v5)
    operator delete(v5);
LABEL_49:
  *(_QWORD *)(a1 + 72) = v19;
}

void **sub_100F941AC(uint64_t *a1, __int128 *a2)
{
  void **result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  void *v19[5];

  v6 = a1[2];
  result = (void **)(a1 + 2);
  v5 = v6;
  v7 = (unint64_t)*(result - 1);
  if (v7 >= v6)
  {
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 4);
    v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555)
      sub_100259694();
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 4);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x2AAAAAAAAAAAAAALL)
      v14 = 0x555555555555555;
    else
      v14 = v12;
    v19[4] = result;
    if (v14)
      v15 = (char *)sub_100313718((uint64_t)result, v14);
    else
      v15 = 0;
    v16 = &v15[48 * v11];
    v19[0] = v15;
    v19[1] = v16;
    v19[3] = &v15[48 * v14];
    v17 = *a2;
    *((_QWORD *)v16 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v16 = v17;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v18 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)v16 + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v16 + 24) = v18;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v19[2] = v16 + 48;
    sub_1003B0278(a1, v19);
    v10 = a1[1];
    result = sub_1003B0424(v19);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v9 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(v7 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v10 = v7 + 48;
    a1[1] = v7 + 48;
  }
  a1[1] = v10;
  return result;
}

void sub_100F94300(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1003B0424((void **)va);
  _Unwind_Resume(a1);
}

void sub_100F94314()
{
  std::regex_error *exception;

  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_range);
}

void sub_100F9434C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100F94360(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(*(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

uint64_t sub_100F94390(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_DWORD *)a2 = -994;
  v2 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(_QWORD *)(v2 + 8) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(v2 + 16) = 1;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

unsigned __int8 *sub_100F943C8(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, int *a4)
{
  int v4;
  int v5;
  int v6;

  if (a2 != a3)
  {
    v4 = *a2;
    if ((v4 & 0xF8) == 0x30 || (v4 & 0xFE) == 0x38)
    {
      v5 = v4 - 48;
      *a4 = v5;
      if (++a2 == a3)
      {
        return a3;
      }
      else
      {
        while (1)
        {
          v6 = *a2;
          if ((v6 & 0xF8) != 0x30 && (v6 & 0xFE) != 0x38)
            break;
          if (v5 >= 214748364)
            sub_100F94464();
          v5 = v6 + 10 * v5 - 48;
          *a4 = v5;
          if (++a2 == a3)
            return a3;
        }
      }
    }
  }
  return a2;
}

void sub_100F94464()
{
  std::regex_error *exception;

  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_badbrace);
}

void sub_100F9449C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_100F944B0()
{
  std::regex_error *exception;

  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_brace);
}

void sub_100F944E8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned int *sub_100F944FC(unsigned int *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BOOL4 v8;
  uint64_t v10;

  v2 = result[10];
  v3 = a2[7];
  v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 == -991)
  {
    v5 = *v4 + 1;
    *v4 = v5;
    v6 = *((_QWORD *)result + 3);
    v7 = *((_QWORD *)result + 4);
    v8 = v5 < v7;
    if (v5 < v7 && v5 >= v6)
    {
      v10 = *(_QWORD *)(v3 + 16 * v2 + 8);
      v8 = v5 < v7 && v10 != a2[2];
    }
    if (!v8 || v5 < v6)
    {
      *(_DWORD *)a2 = -994;
      if (!v8)
        goto LABEL_25;
LABEL_22:
      a2[10] = *((_QWORD *)result + 1);
      return sub_100F946C0(result, a2);
    }
    goto LABEL_23;
  }
  *v4 = 0;
  if (*((_QWORD *)result + 4))
  {
    if (*((_QWORD *)result + 3))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_22;
    }
LABEL_23:
    *(_DWORD *)a2 = -992;
    return result;
  }
  *(_DWORD *)a2 = -994;
LABEL_25:
  a2[10] = *((_QWORD *)result + 2);
  return result;
}

unsigned int *sub_100F945B0(unsigned int *result, int a2, _QWORD *a3)
{
  *(_DWORD *)a3 = -994;
  if (*((unsigned __int8 *)result + 52) == a2)
  {
    a3[10] = *((_QWORD *)result + 2);
  }
  else
  {
    a3[10] = *((_QWORD *)result + 1);
    return sub_100F946C0(result, a3);
  }
  return result;
}

_QWORD *sub_100F945E0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_102196610;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = off_102196190;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_100F94648(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_102196610;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = off_102196190;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  operator delete();
}

unsigned int *sub_100F946C0(unsigned int *result, _QWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = result[11];
  *(_QWORD *)(a2[7] + 16 * result[10] + 8) = a2[2];
  v3 = result[12];
  if (v2 != v3)
  {
    v4 = v2 - 1;
    v5 = a2[3];
    v6 = v3 - 1 - v4;
    v7 = a2[4] + 24 * v4 + 8;
    do
    {
      *(_QWORD *)(v7 - 8) = v5;
      *(_QWORD *)v7 = v5;
      *(_BYTE *)(v7 + 8) = 0;
      v7 += 24;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t sub_100F94714(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void sub_100F94728(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t sub_100F94734(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;

  *(_DWORD *)a3 = -994;
  v3 = 8;
  if (a2)
    v3 = 16;
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + v3);
  return result;
}

uint64_t sub_100F94758(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

uint64_t sub_100F9476C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  do
  {
    v5 = a2;
    a2 = sub_100F94800(a1, a2, a3);
  }
  while (v5 != a2);
  return v5;
}

void sub_100F947B4()
{
  std::regex_error *exception;

  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, __re_err_empty);
}

void sub_100F947EC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100F94800(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v6;

  if (a2 == a3)
    return a2;
  v6 = sub_100F94888(a1, a2, a3);
  if (v6 == a2)
    return a2;
  else
    return sub_100F94998(a1, v6, a3);
}

_BYTE *sub_100F94888(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v9;
  _BYTE *v10;
  int v11;
  uint64_t v12;

  v6 = sub_100F94B38(a1, a2, a3);
  v7 = v6;
  if (a2 == v6 && a2 != a3 && a2 + 1 != a3)
  {
    v9 = (uint64_t)v6;
    if (*a2 == 92)
      v9 = (uint64_t)&a2[2 * (a2[1] == 40)];
    if ((_BYTE *)v9 == a2)
    {
      if (*a2 == 92)
      {
        v11 = sub_1015E852C(a1, a2[1]);
        v12 = 2;
        if (!v11)
          v12 = 0;
        return &a2[v12];
      }
    }
    else
    {
      sub_1015E5B30(a1);
      v10 = (_BYTE *)sub_100F9476C(a1, v9, (uint64_t)a3);
      if (v10 == a3 || v10 + 1 == a3 || *v10 != 92 || v10[1] != 41)
        sub_100F90808();
      v7 = v10 + 2;
      sub_1015E5BA4(a1);
    }
  }
  return v7;
}

unsigned __int8 *sub_100F94998(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  int v4;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  int v12;
  int v13;

  if (a2 != a3)
  {
    v4 = *a2;
    if (v4 == 42)
      sub_1015E7D10();
    if (a2 + 1 != a3 && v4 == 92 && a2[1] == 123)
    {
      v6 = a2 + 2;
      v13 = 0;
      v7 = sub_100F943C8(a1, a2 + 2, a3, &v13);
      if (v6 == v7)
        goto LABEL_16;
      if (v7 != a3)
      {
        v8 = v7 + 1;
        v9 = *v7;
        if (v9 == 44)
        {
          v12 = -1;
          v10 = sub_100F943C8(a1, v8, a3, &v12);
          if (v10 != a3 && v10 + 1 != a3 && *v10 == 92 && v10[1] == 125)
          {
            if (v12 != -1 && v12 < v13)
LABEL_16:
              sub_100F94464();
LABEL_20:
            sub_1015E7D10();
          }
        }
        else if (v8 != a3 && v9 == 92 && *v8 == 125)
        {
          goto LABEL_20;
        }
      }
      sub_100F944B0();
    }
  }
  return a2;
}

_BYTE *sub_100F94B38(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  int v6;
  _BYTE *result;

  if (a2 == a3)
  {
    result = sub_100F94C50(a1, a2, a3);
    if (result != a2)
      return result;
    return sub_100F914D8(a1, a2, a3);
  }
  v6 = *a2;
  if ((a2 + 1 != a3 || v6 != 36)
    && ((v6 - 46) > 0x2E || ((1 << (v6 - 46)) & 0x600000000001) == 0))
  {
    sub_1015E6030(a1);
  }
  result = sub_100F94C50(a1, a2, a3);
  if (result == a2)
  {
    if (*a2 == 46)
      operator new();
    return sub_100F914D8(a1, a2, a3);
  }
  return result;
}

_BYTE *sub_100F94C50(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  if (a2 != a3
    && a2 + 1 != a3
    && *a2 == 92
    && ((char)a2[1] - 36) <= 0x3A
    && ((1 << (a2[1] - 36)) & 0x580000000000441) != 0)
  {
    sub_1015E6030(a1);
  }
  return a2;
}

uint64_t sub_100F94CC8(uint64_t result, uint64_t a2)
{
  _BYTE *v2;
  uint64_t v3;

  v2 = *(_BYTE **)(a2 + 16);
  if (v2 == *(_BYTE **)(a2 + 24) || !*v2)
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

unsigned __int8 *sub_100F94D08(uint64_t a1, char *a2, char *a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;

  v6 = sub_100F94D64(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2)
    sub_100F947B4();
  do
  {
    v7 = v6;
    v6 = sub_100F94D64(a1, (char *)v6, a3);
  }
  while (v7 != v6);
  return v7;
}

unsigned __int8 *sub_100F94D64(uint64_t a1, char *a2, char *a3)
{
  char *v6;
  unsigned __int8 *v7;
  int v8;
  char *v9;
  char *v10;

  v6 = sub_100F94F14(a1, a2, a3);
  v7 = (unsigned __int8 *)v6;
  if (v6 == a2 && v6 != a3)
  {
    v8 = *a2;
    if (v8 == 36)
      operator new();
    if (v8 != 40)
    {
      if (v8 == 94)
        operator new();
      return (unsigned __int8 *)a2;
    }
    sub_1015E5B30(a1);
    ++*(_DWORD *)(a1 + 36);
    v9 = (char *)sub_100F8FB70(a1, a2 + 1, a3);
    if (v9 == a3 || (v10 = v9, *v9 != 41))
      sub_100F90808();
    sub_1015E5BA4(a1);
    --*(_DWORD *)(a1 + 36);
    v7 = (unsigned __int8 *)(v10 + 1);
  }
  if (v7 != (unsigned __int8 *)a2)
    return sub_100F90500(a1, v7, (unsigned __int8 *)a3);
  return (unsigned __int8 *)a2;
}

char *sub_100F94F14(uint64_t a1, char *a2, char *a3)
{
  char *result;

  result = sub_100F94FDC(a1, a2, a3);
  if (result == a2)
  {
    result = sub_100F95064(a1, a2, a3);
    if (result == a2)
    {
      if (a2 != a3 && *a2 == 46)
        operator new();
      return sub_100F914D8(a1, a2, a3);
    }
  }
  return result;
}

char *sub_100F94FDC(uint64_t a1, char *a2, char *a3)
{
  int v3;
  uint64_t v4;

  if (a2 != a3)
  {
    v3 = *a2;
    v4 = (v3 - 36);
    if (v4 > 0x3A)
      goto LABEL_8;
    if (((1 << (v3 - 36)) & 0x5800000080004D1) != 0)
      return a2;
    if (v4 == 5)
    {
      if (*(_DWORD *)(a1 + 36))
        return a2;
    }
    else
    {
LABEL_8:
      if ((v3 - 123) < 2)
        return a2;
    }
    sub_1015E6030(a1);
  }
  return a2;
}

char *sub_100F95064(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  char *v4;
  int v5;
  BOOL v6;
  int v8;
  uint64_t v9;

  v3 = a2;
  if (a2 != a3)
  {
    v4 = a2 + 1;
    if (v3 + 1 != a3 && *v3 == 92)
    {
      v5 = *v4;
      v6 = (v5 - 36) > 0x3A || ((1 << (*v4 - 36)) & 0x5800000080004F1) == 0;
      if (!v6 || (v5 - 123) < 3)
        sub_1015E6030(a1);
      if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
      {
        return sub_100F93498(a1, v4, a3, 0);
      }
      else
      {
        v8 = sub_1015E852C(a1, *v4);
        v9 = 2;
        if (!v8)
          v9 = 0;
        v3 += v9;
      }
    }
  }
  return v3;
}

uint64_t sub_100F95128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  __int16 v5;
  int v9;
  uint64_t result;
  void *__p[2];
  _BYTE v12[25];
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;

  v5 = a5;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  *(_OWORD *)__p = 0u;
  memset(v12, 0, sizeof(v12));
  v9 = sub_1015EA558(a4, a1, a2, (uint64_t)__p, a5 | 0x1040u);
  sub_1015EA730(a3, a1, a2, (uint64_t *)__p, (v5 & 0x800) != 0);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (!v9)
    return 0;
  if (!*(_BYTE *)(a3 + 88))
    return 1;
  result = 0;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  return result;
}

void sub_100F95200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 sub_100F9521C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __n128 result;
  uint64_t v11;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 42 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100F9548C(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x2A)) + 96 * (v7 % 0x2A);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 16) = v9;
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v8 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(v8 + 56) = 0;
  *(_QWORD *)(v8 + 64) = 0;
  *(_QWORD *)(v8 + 72) = 0;
  result = *(__n128 *)(a2 + 56);
  *(__n128 *)(v8 + 56) = result;
  *(_QWORD *)(v8 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v11 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(v8 + 85) = *(_QWORD *)(a2 + 85);
  *(_QWORD *)(v8 + 80) = v11;
  ++a1[5];
  return result;
}

uint64_t sub_100F9531C(_QWORD *a1)
{
  _QWORD *v2;
  unint64_t v3;

  v2 = a1 + 5;
  v3 = a1[5] + a1[4] - 1;
  sub_100F9107C((uint64_t)(a1 + 5), (_QWORD *)(*(_QWORD *)(a1[1] + 8 * (v3 / 0x2A)) + 96 * (v3 % 0x2A)));
  --*v2;
  return sub_100F957A0(a1, 1);
}

int64x2_t sub_100F9539C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  int64x2_t result;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    sub_100F95814((void **)a1);
    v4 = *(_QWORD *)(a1 + 32);
  }
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (_QWORD *)(v5 + 8 * (v4 / 0x2A));
  v7 = *v6 + 96 * (v4 % 0x2A);
  if (*(_QWORD *)(a1 + 16) == v5)
    v7 = 0;
  if (v7 == *v6)
    v7 = *(v6 - 1) + 4032;
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v7 - 96) = *(_OWORD *)a2;
  *(_OWORD *)(v7 - 80) = v8;
  *(_QWORD *)(v7 - 56) = 0;
  *(_QWORD *)(v7 - 48) = 0;
  *(_QWORD *)(v7 - 64) = 0;
  *(_OWORD *)(v7 - 64) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v7 - 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(v7 - 40) = 0;
  *(_QWORD *)(v7 - 32) = 0;
  *(_QWORD *)(v7 - 24) = 0;
  *(_OWORD *)(v7 - 40) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(v7 - 24) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v9 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(v7 - 11) = *(_QWORD *)(a2 + 85);
  *(_QWORD *)(v7 - 16) = v9;
  result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_101BB2F70);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

void sub_100F9548C(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x2A;
  v4 = v2 - 42;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFC0uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFC0uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFC0uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100F95754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100F957A0(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 42 * ((v2 - v3) >> 3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x2A)
    a2 = 1;
  if (v5 < 0x54)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void sub_100F95814(void **a1)
{
  _BYTE *v2;
  _BYTE *v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void *v41;
  void *__p;
  char *v43;
  char *v44;
  char *v45;
  _QWORD *v46;

  v2 = a1[1];
  v3 = a1[2];
  v4 = (v3 - v2) >> 3;
  if (v3 == v2)
    v5 = 0;
  else
    v5 = 42 * v4 - 1;
  v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(_QWORD)a1[5]] < 0x2A)
  {
    v7 = (uint64_t)(a1 + 3);
    v8 = a1[3];
    v9 = *a1;
    v10 = v8 - (_BYTE *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9)
        v11 = 1;
      else
        v11 = v10 >> 2;
      v46 = a1 + 3;
      __p = sub_10025E6A0(v7, v11);
      v43 = (char *)__p;
      v44 = (char *)__p;
      v45 = (char *)__p + 8 * v12;
      v41 = operator new(0xFC0uLL);
      sub_10003732C(&__p, &v41);
      v13 = (char *)a1[1];
      v14 = v44;
      if (v13 == a1[2])
      {
        v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            v15 = v43 - (_BYTE *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p)
                v23 = 1;
              else
                v23 = (v14 - (_BYTE *)__p) >> 2;
              v24 = (char *)sub_10025E6A0((uint64_t)v46, v23);
              v26 = v43;
              v14 = &v24[8 * (v23 >> 2)];
              v27 = v44 - v43;
              if (v44 != v43)
              {
                v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                v28 = 8 * (v27 >> 3);
                v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  v30 = *(_QWORD *)v26;
                  v26 += 8;
                  *(_QWORD *)v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              v31 = __p;
              __p = v24;
              v43 = &v24[8 * (v23 >> 2)];
              v44 = v14;
              v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                v14 = v44;
              }
            }
            else
            {
              v16 = v15 >> 3;
              v17 = v15 >> 3 < -1;
              v18 = (v15 >> 3) + 2;
              if (v17)
                v19 = v18;
              else
                v19 = v16 + 1;
              v20 = &v43[-8 * (v19 >> 1)];
              v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                v14 = v43;
              }
              v22 = &v14[-8 * (v19 >> 1)];
              v14 = &v20[v21];
              v43 = v22;
              v44 = &v20[v21];
            }
          }
          v32 = *(_QWORD *)v13;
          v13 += 8;
          *(_QWORD *)v14 = v32;
          v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        v33 = (char *)a1[1];
      }
      v36 = *a1;
      v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      __p = v36;
      v43 = v33;
      v38 = (char *)a1[3];
      v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      v44 = v13;
      v45 = v38;
      if (v14 - v37 == 8)
        v40 = 21;
      else
        v40 = (uint64_t)a1[4] + 42;
      a1[4] = (void *)v40;
      if (v13 != v33)
        v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      if (v36)
        operator delete(v36);
    }
    else
    {
      if (v2 == v9)
      {
        __p = operator new(0xFC0uLL);
        sub_100212218(a1, &__p);
        v34 = a1[2];
        __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        __p = operator new(0xFC0uLL);
      }
      sub_100343094((uint64_t)a1, &__p);
      if ((_BYTE *)a1[2] - (_BYTE *)a1[1] == 8)
        v35 = 21;
      else
        v35 = (uint64_t)a1[4] + 42;
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 42;
    __p = (void *)*((_QWORD *)v3 - 1);
    a1[2] = v3 - 8;
    sub_100343094((uint64_t)a1, &__p);
  }
}

void sub_100F95AE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  void *v12;

  operator delete(v12);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100F95B2C(_QWORD *a1)
{
  _QWORD *v2;
  void **v3;
  void **v4;
  unint64_t v5;
  void **v6;
  char *v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = a1 + 5;
  v3 = (void **)a1[1];
  v4 = (void **)a1[2];
  if (v4 == v3)
  {
    v4 = (void **)a1[1];
  }
  else
  {
    v5 = a1[4];
    v6 = &v3[v5 / 0x2A];
    v7 = (char *)*v6 + 96 * (v5 % 0x2A);
    v8 = (unint64_t)v3[(a1[5] + v5) / 0x2A] + 96 * ((a1[5] + v5) % 0x2A);
    if (v7 != (char *)v8)
    {
      do
      {
        sub_100F9107C((uint64_t)v2, v7);
        v7 += 96;
        if (v7 - (_BYTE *)*v6 == 4032)
        {
          v9 = (char *)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != (char *)v8);
      v3 = (void **)a1[1];
      v4 = (void **)a1[2];
    }
  }
  *v2 = 0;
  v10 = (char *)v4 - (char *)v3;
  if ((unint64_t)((char *)v4 - (char *)v3) >= 0x11)
  {
    do
    {
      operator delete(*v3);
      v4 = (void **)a1[2];
      v3 = (void **)(a1[1] + 8);
      a1[1] = v3;
      v10 = (char *)v4 - (char *)v3;
    }
    while ((unint64_t)((char *)v4 - (char *)v3) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 21;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_16;
    v12 = 42;
  }
  a1[4] = v12;
LABEL_16:
  while (v3 != v4)
  {
    v13 = *v3++;
    operator delete(v13);
  }
  return sub_10002E778((uint64_t)a1);
}

void sub_100F95C70(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_100F95CAC((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 24 * a2;
  }
}

void sub_100F95CAC(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (_BYTE *)v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = &v7[3 * a2];
      v14 = 24 * a2;
      do
      {
        *v7 = 0;
        v7[1] = 0;
        *((_BYTE *)v7 + 16) = 0;
        v7 += 3;
        v14 -= 24;
      }
      while (v14);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (_BYTE *)*a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_100259694();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)sub_1002596A8(v4, v11);
    else
      v12 = 0;
    v15 = &v12[24 * v8];
    v16 = &v15[24 * a2];
    v17 = 24 * a2;
    v18 = v15;
    do
    {
      *(_QWORD *)v18 = 0;
      *((_QWORD *)v18 + 1) = 0;
      v18[16] = 0;
      v18 += 24;
      v17 -= 24;
    }
    while (v17);
    v19 = &v12[24 * v11];
    v21 = (char *)*a1;
    v20 = (char *)a1[1];
    if (v20 != *a1)
    {
      do
      {
        v22 = *(_OWORD *)(v20 - 24);
        *((_QWORD *)v15 - 1) = *((_QWORD *)v20 - 1);
        *(_OWORD *)(v15 - 24) = v22;
        v15 -= 24;
        v20 -= 24;
      }
      while (v20 != v21);
      v20 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v16;
    a1[2] = v19;
    if (v20)
      operator delete(v20);
  }
}

_QWORD *sub_100F95E14(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x28uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *(_QWORD *)((char *)v11 + 20) = 0;
  *(_QWORD *)((char *)v11 + 28) = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_10012E444(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_100F96024(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100F96038()
{
  sub_1015A2E04(qword_102309280, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102309280, (void *)&_mh_execute_header);
  sub_1015A2E04(&xmmword_102311A58, "NotSet");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102311A58, (void *)&_mh_execute_header);
  sub_1015A2E04(&xmmword_102309298, "Low");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102309298, (void *)&_mh_execute_header);
  sub_1015A2E04(&xmmword_1023092B0, "Medium");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1023092B0, (void *)&_mh_execute_header);
  sub_1015A2E04(&xmmword_1023092C8, "High");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1023092C8, (void *)&_mh_execute_header);
  sub_1015A2E04(byte_1023092E0, "Unknown");
  return __cxa_atexit((void (*)(void *))&std::string::~string, byte_1023092E0, (void *)&_mh_execute_header);
}

void sub_100F96154(uint64_t a1)
{
  sub_100E491EC(a1);
}

_QWORD *sub_100F961B8(_DWORD *a1)
{
  *(_QWORD *)a1 = off_102196978;
  sub_100F961F8(a1);
  bzero(a1 + 18, 0x10uLL);
  return sub_100C1DF4C(a1);
}

uint64_t sub_100F961F8(_DWORD *a1)
{
  __CFNotificationCenter *DarwinNotifyCenter;
  int v3;
  int v4;
  uint64_t result;

  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveEveryObserver(DarwinNotifyCenter, a1);
  v3 = a1[11];
  if (v3 != -1)
  {
    notify_cancel(v3);
    a1[11] = -1;
  }
  v4 = a1[13];
  if (v4 != -1)
  {
    notify_cancel(v4);
    a1[13] = -1;
  }
  result = a1[15];
  if ((_DWORD)result != -1)
  {
    result = notify_cancel(result);
    a1[15] = -1;
  }
  return result;
}

void sub_100F9626C(_DWORD *a1)
{
  sub_100F961B8(a1);
  operator delete();
}

uint64_t sub_100F96290(uint64_t result, unsigned int a2, uint64_t a3)
{
  _BYTE *v3;

  if (a2 <= 1)
  {
    v3 = (_BYTE *)result;
    *(_QWORD *)(result + 72 + 8 * a2) = a3;
    if (*(_QWORD *)(result + 72) || *(_QWORD *)(result + 80))
    {
      sub_100F96304((int *)result);
      sub_100F96808((uint64_t)v3);
      sub_100F96B44((uint64_t)v3);
      return sub_100F96E78(v3);
    }
    else
    {
      return sub_100F961F8((_DWORD *)result);
    }
  }
  return result;
}

void sub_100F96304(int *a1)
{
  NSObject *v2;
  __CFNotificationCenter *DarwinNotifyCenter;
  NSObject *v4;
  __CFNotificationCenter *v5;
  NSObject *v6;
  __CFNotificationCenter *v7;
  const char *v8;
  uint8_t *v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  uint8_t *v13;
  int v14;
  const char *v15;
  uint8_t buf[4];
  const char *v17;

  if (a1[11] < 0)
  {
    if (notify_register_check("com.apple.isp.focusing", a1 + 11))
    {
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_1021969D8);
      v2 = qword_10229FD48;
      if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136315138;
        v17 = "com.apple.isp.focusing";
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "Could not register for notification %s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD40 != -1)
          dispatch_once(&qword_10229FD40, &stru_1021969D8);
        v14 = 136315138;
        v15 = "com.apple.isp.focusing";
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 17, "Could not register for notification %s", (const char *)&v14);
        v9 = (uint8_t *)v8;
        sub_100512490("Generic", 1, 0, 0, "void CLMagnetometerCoexistenceNotifierCpasCamera::registerForNotificationsIfNecessary()", "%s\n", v8);
        if (v9 != buf)
          free(v9);
      }
    }
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterAddObserver(DarwinNotifyCenter, a1, (CFNotificationCallback)sub_100F97620, CFSTR("com.apple.isp.focusing"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  }
  if (a1[13] < 0)
  {
    if (notify_register_check("com.apple.isp.backcamerapower", a1 + 13))
    {
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_1021969D8);
      v4 = qword_10229FD48;
      if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136315138;
        v17 = "com.apple.isp.backcamerapower";
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Could not register for notification %s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD40 != -1)
          dispatch_once(&qword_10229FD40, &stru_1021969D8);
        v14 = 136315138;
        v15 = "com.apple.isp.backcamerapower";
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 17, "Could not register for notification %s", (const char *)&v14);
        v11 = (uint8_t *)v10;
        sub_100512490("Generic", 1, 0, 0, "void CLMagnetometerCoexistenceNotifierCpasCamera::registerForNotificationsIfNecessary()", "%s\n", v10);
        if (v11 != buf)
          free(v11);
      }
    }
    v5 = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterAddObserver(v5, a1, (CFNotificationCallback)sub_100F97620, CFSTR("com.apple.isp.backcamerapower"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  }
  if (a1[15] < 0)
  {
    if (notify_register_check("com.apple.isp.backcamerasensorconfig", a1 + 15))
    {
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_1021969D8);
      v6 = qword_10229FD48;
      if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136315138;
        v17 = "com.apple.isp.backcamerasensorconfig";
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Could not register for notification %s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD40 != -1)
          dispatch_once(&qword_10229FD40, &stru_1021969D8);
        v14 = 136315138;
        v15 = "com.apple.isp.backcamerasensorconfig";
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 17, "Could not register for notification %s", (const char *)&v14);
        v13 = (uint8_t *)v12;
        sub_100512490("Generic", 1, 0, 0, "void CLMagnetometerCoexistenceNotifierCpasCamera::registerForNotificationsIfNecessary()", "%s\n", v12);
        if (v13 != buf)
          free(v13);
      }
    }
    v7 = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterAddObserver(v7, a1, (CFNotificationCallback)sub_100F97620, CFSTR("com.apple.isp.backcamerasensorconfig"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  }
}

void sub_100F96808(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  NSObject *v5;
  int v6;
  int v7;
  const char *v8;
  uint8_t *v9;
  uint64_t state64;
  int v11;
  const char *v12;
  uint8_t buf[4];
  const char *v14;

  state64 = 0;
  if (notify_get_state(*(_DWORD *)(a1 + 52), &state64))
  {
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021969D8);
    v2 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      v14 = "com.apple.isp.backcamerapower";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "Could not get state for %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_1021969D8);
      v11 = 136315138;
      v12 = "com.apple.isp.backcamerapower";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 17, "Could not get state for %s", (const char *)&v11);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 0, "void CLMagnetometerCoexistenceNotifierCpasCamera::updateCameraState()", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
  }
  else
  {
    *(_BYTE *)(a1 + 56) = state64 != 0;
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021969D8);
    v5 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_INFO))
    {
      v6 = *(unsigned __int8 *)(a1 + 56);
      *(_DWORD *)buf = 67109120;
      LODWORD(v14) = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "camera state = %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_1021969D8);
      v7 = *(unsigned __int8 *)(a1 + 56);
      v11 = 67109120;
      LODWORD(v12) = v7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 1, "camera state = %d", &v11);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLMagnetometerCoexistenceNotifierCpasCamera::updateCameraState()", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  }
}

void sub_100F96B44(uint64_t a1)
{
  NSObject *v2;
  double v3;
  uint8_t *v4;
  uint8_t *v5;
  int v6;
  NSObject *v7;
  int v8;
  int v9;
  double v10;
  uint8_t *v11;
  BOOL v12;
  uint64_t state64;
  int v14;
  const char *v15;
  uint8_t buf[4];
  const char *v17;

  state64 = 0;
  if (notify_get_state(*(_DWORD *)(a1 + 44), &state64))
  {
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021969D8);
    v2 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      v17 = "com.apple.isp.focusing";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "Could not get state for %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_1021969D8);
      v14 = 136315138;
      v15 = "com.apple.isp.focusing";
      v3 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 17, "Could not get state for %s", (const char *)&v14);
      v5 = v4;
      sub_100512490("Generic", 1, 0, 0, "void CLMagnetometerCoexistenceNotifierCpasCamera::updateFocusPosition()", "%s\n", v3);
LABEL_19:
      if (v5 != buf)
        free(v5);
    }
  }
  else
  {
    v6 = state64;
    *(_DWORD *)(a1 + 48) = state64;
    v12 = v6 == 0xFFFF;
    sub_10014C2F4(a1, 1, (uint64_t)&v12, 1);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021969D8);
    v7 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_INFO))
    {
      v8 = *(_DWORD *)(a1 + 48);
      *(_DWORD *)buf = 67109120;
      LODWORD(v17) = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "focus position = %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_1021969D8);
      v9 = *(_DWORD *)(a1 + 48);
      v14 = 67109120;
      LODWORD(v15) = v9;
      v10 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 1, "focus position = %d", &v14);
      v5 = v11;
      sub_100512490("Generic", 1, 0, 2, "void CLMagnetometerCoexistenceNotifierCpasCamera::updateFocusPosition()", "%s\n", v10);
      goto LABEL_19;
    }
  }
}

uint64_t sub_100F96E78(_BYTE *a1)
{
  int v2;

  v2 = *((_DWORD *)a1 + 12);
  if (v2 != 0xFFFF)
  {
    if (a1[56])
    {
      *((float32x2_t *)a1 + 4) = vmla_n_f32(*(float32x2_t *)(a1 + 100), *(float32x2_t *)(a1 + 88), (float)v2);
      *((float *)a1 + 10) = *((float *)a1 + 27) + (float)(*((float *)a1 + 24) * (float)v2);
    }
    else
    {
      bzero(a1 + 32, 0xCuLL);
    }
  }
  (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 64))(a1);
  return sub_10014C2F4((uint64_t)a1, 0, (uint64_t)(a1 + 32), 12);
}

void sub_100F96F10(float32x2_t *a1, __int16 *a2)
{
  NSObject *v4;
  double v5;
  double v6;
  double v7;
  NSObject *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  const char *v15;
  uint8_t *v16;
  double v17;
  double v18;
  double v19;
  const char *v20;
  uint8_t *v21;
  double v22;
  int v23;
  double v24;
  __int16 v25;
  double v26;
  __int16 v27;
  double v28;
  uint8_t buf[4];
  double v30;
  __int16 v31;
  double v32;
  __int16 v33;
  double v34;

  a1[11].f32[0] = (float)*a2 * 0.01;
  a1[11].f32[1] = (float)a2[1] * 0.01;
  a1[12].f32[0] = (float)a2[2] * 0.01;
  if (qword_10229FD40 != -1)
    dispatch_once(&qword_10229FD40, &stru_1021969D8);
  v4 = qword_10229FD48;
  if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_INFO))
  {
    v5 = a1[11].f32[0];
    v6 = a1[11].f32[1];
    v7 = a1[12].f32[0];
    *(_DWORD *)buf = 134218496;
    v30 = v5;
    v31 = 2048;
    v32 = v6;
    v33 = 2048;
    v34 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "VCM Delta.x,%f,VCM Delta.y,%f,VCM Delta.z,%f", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021969D8);
    v12 = a1[11].f32[0];
    v13 = a1[11].f32[1];
    v14 = a1[12].f32[0];
    v23 = 134218496;
    v24 = v12;
    v25 = 2048;
    v26 = v13;
    v27 = 2048;
    v28 = v14;
    LODWORD(v22) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 1, "VCM Delta.x,%f,VCM Delta.y,%f,VCM Delta.z,%f", COERCE_DOUBLE(&v23), v22);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "void CLMagnetometerCoexistenceNotifierCpasCamera::setCoexistenceInfo(const CameraCoexistenceInfo &)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  a1[11] = vdiv_f32(a1[11], (float32x2_t)vdup_n_s32(0x437F0000u));
  a1[12].f32[0] = a1[12].f32[0] / 255.0;
  a1[12].f32[1] = (float)a2[3] * 0.01;
  a1[13].f32[0] = (float)a2[4] * 0.01;
  a1[13].f32[1] = (float)a2[5] * 0.01;
  if (qword_10229FD40 != -1)
    dispatch_once(&qword_10229FD40, &stru_1021969D8);
  v8 = qword_10229FD48;
  if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_INFO))
  {
    v9 = a1[12].f32[1];
    v10 = a1[13].f32[0];
    v11 = a1[13].f32[1];
    *(_DWORD *)buf = 134218496;
    v30 = v9;
    v31 = 2048;
    v32 = v10;
    v33 = 2048;
    v34 = v11;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Rear camera offset.x,%f,Rear camera offset.y,%f,Rear camera offset.z,%f", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021969D8);
    v17 = a1[12].f32[1];
    v18 = a1[13].f32[0];
    v19 = a1[13].f32[1];
    v23 = 134218496;
    v24 = v17;
    v25 = 2048;
    v26 = v18;
    v27 = 2048;
    v28 = v19;
    LODWORD(v22) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 1, "Rear camera offset.x,%f,Rear camera offset.y,%f,Rear camera offset.z,%f", COERCE_DOUBLE(&v23), v22);
    v21 = (uint8_t *)v20;
    sub_100512490("Generic", 1, 0, 2, "void CLMagnetometerCoexistenceNotifierCpasCamera::setCoexistenceInfo(const CameraCoexistenceInfo &)", "%s\n", v20);
    if (v21 != buf)
      free(v21);
  }
}

BOOL sub_100F97338()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSSet *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  id v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  sub_100127B9C();
  if (sub_1009CF94C())
    return sub_1008840AC((int)&v17);
  sub_100F97F9C("kCLConnectionMessageDeviceHasOriginalCamera", &v17);
  v2 = objc_opt_class(NSNumber, v1);
  v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v2, objc_opt_class(NSString, v3), 0);
  v15 = v17;
  v16 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = +[CMMotionUtils sendMessage:withReplyClassesSync:](CMMotionUtils, "sendMessage:withReplyClassesSync:", &v15, v4);
  v8 = v16;
  if (v16)
  {
    v9 = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v0 = objc_msgSend(objc_msgSend(v7, "objectForKeyedSubscript:", CMDeviceHasOriginalBackCamera), "BOOLValue");
  v11 = v18;
  if (v18)
  {
    v12 = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return (BOOL)v0;
}

void sub_100F97484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_100261F44((uint64_t)va);
  sub_100261F44((uint64_t)va1);
  _Unwind_Resume(a1);
}

id sub_100F974AC()
{
  NSNumber *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSSet *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  id v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  sub_100127B9C();
  if (sub_1009CF94C())
  {
    v0 = sub_100884C04((int)&v17);
  }
  else
  {
    sub_100F97FF4("kCLConnectionMessageCameraVcmActuatorId", &v17);
    v2 = objc_opt_class(NSNumber, v1);
    v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v2, objc_opt_class(NSString, v3), 0);
    v15 = v17;
    v16 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    v7 = +[CMMotionUtils sendMessage:withReplyClassesSync:](CMMotionUtils, "sendMessage:withReplyClassesSync:", &v15, v4);
    v8 = v16;
    if (v16)
    {
      v9 = (unint64_t *)&v16->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v0 = (NSNumber *)objc_msgSend(v7, "objectForKeyedSubscript:", CMCameraVcmActuatorId);
    v11 = v18;
    if (v18)
    {
      v12 = (unint64_t *)&v18->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  return (id)-[NSNumber intValue](v0, "intValue");
}

void sub_100F975F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100F97620(int a1, uint64_t a2, CFStringRef theString1)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD v7[5];
  _QWORD v8[5];
  _QWORD v9[5];

  if (CFStringCompare(theString1, CFSTR("com.apple.isp.focusing"), 0))
  {
    if (CFStringCompare(theString1, CFSTR("com.apple.isp.backcamerapower"), 0))
    {
      if (CFStringCompare(theString1, CFSTR("com.apple.isp.backcamerasensorconfig"), 0))
        return;
      v5 = sub_100127B9C();
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      v7[2] = sub_100F97F68;
      v7[3] = &unk_10212ECA0;
      v7[4] = a2;
      v6 = v7;
    }
    else
    {
      v5 = sub_100127B9C();
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      v8[2] = sub_100F97F60;
      v8[3] = &unk_10212ECA0;
      v8[4] = a2;
      v6 = v8;
    }
  }
  else
  {
    v5 = sub_100127B9C();
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100F97F58;
    v9[3] = &unk_10212ECA0;
    v9[4] = a2;
    v6 = v9;
  }
  sub_1000A50A8(v5, (uint64_t)v6);
}

void sub_100F97744(int *a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  NSObject *v5;
  int v6;
  int v7;
  const char *v8;
  uint8_t *v9;
  uint64_t state64;
  int v11;
  const char *v12;
  uint8_t buf[4];
  const char *v14;

  state64 = 0;
  if (notify_get_state(a1[15], &state64))
  {
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021969D8);
    v2 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      v14 = "com.apple.isp.backcamerasensorconfig";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "Could not get state for %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_1021969D8);
      v11 = 136315138;
      v12 = "com.apple.isp.backcamerasensorconfig";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 17, "Could not get state for %s", (const char *)&v11);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 0, "void CLMagnetometerCoexistenceNotifierCpasCamera::updateCameraMode()", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
  }
  else
  {
    a1[16] = state64;
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021969D8);
    v5 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_INFO))
    {
      v6 = a1[16];
      *(_DWORD *)buf = 67109120;
      LODWORD(v14) = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "camera mode = %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_1021969D8);
      v7 = a1[16];
      v11 = 67109120;
      LODWORD(v12) = v7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 1, "camera mode = %d", &v11);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLMagnetometerCoexistenceNotifierCpasCamera::updateCameraMode()", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    (*(void (**)(int *))(*(_QWORD *)a1 + 56))(a1);
  }
}

uint64_t sub_100F97A78(_BYTE *a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FD40 != -1)
    dispatch_once(&qword_10229FD40, &stru_1021969D8);
  v2 = qword_10229FD48;
  if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Received focusing notification", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021969D8);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 1, "Received focusing notification", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLMagnetometerCoexistenceNotifierCpasCamera::onFocusingNotification()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  sub_100F96B44((uint64_t)a1);
  return sub_100F96E78(a1);
}

uint64_t sub_100F97C18(_BYTE *a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FD40 != -1)
    dispatch_once(&qword_10229FD40, &stru_1021969D8);
  v2 = qword_10229FD48;
  if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Received camera state notification", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021969D8);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 1, "Received camera state notification", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLMagnetometerCoexistenceNotifierCpasCamera::onCameraStateNotification()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  sub_100F96808((uint64_t)a1);
  return sub_100F96E78(a1);
}

uint64_t sub_100F97DB8(int *a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FD40 != -1)
    dispatch_once(&qword_10229FD40, &stru_1021969D8);
  v2 = qword_10229FD48;
  if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Received camera mode notification", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021969D8);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 1, "Received camera mode notification", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLMagnetometerCoexistenceNotifierCpasCamera::onCameraModeNotification()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  sub_100F97744(a1);
  return sub_100F96E78(a1);
}

uint64_t sub_100F97F58(uint64_t a1)
{
  return sub_100F97A78(*(_BYTE **)(a1 + 32));
}

uint64_t sub_100F97F60(uint64_t a1)
{
  return sub_100F97C18(*(_BYTE **)(a1 + 32));
}

uint64_t sub_100F97F68(uint64_t a1)
{
  return sub_100F97DB8(*(int **)(a1 + 32));
}

void sub_100F97F70(id a1)
{
  qword_10229FD48 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

_QWORD *sub_100F97F9C@<X0>(char *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x70uLL);
  result = sub_100E492C8(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100F97FE0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100F97FF4@<X0>(char *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x70uLL);
  result = sub_100E492C8(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100F98038(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100F989D4(_QWORD *result, uint64_t a2)
{
  *result = off_102196A08;
  result[1] = a2;
  return result;
}

void sub_100F989E8()
{
  operator delete();
}

id sub_100F989FC(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLGnssProvider")), "syncgetIonosphereParameters:", a2);
}

uint64_t sub_100F98A30(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_102196A58;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_10002FA68((uint64_t)a1);
}

_QWORD *sub_100F98A74@<X0>(uint64_t a1@<X8>)
{
  uint64_t i;
  _BYTE *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  _QWORD v13[3];
  _QWORD *v14;
  _QWORD v15[3];
  _QWORD *v16;
  _QWORD v17[3];
  _QWORD *v18;
  _QWORD v19[3];
  _QWORD *v20;
  _QWORD v21[3];
  uint64_t v22;
  _QWORD v23[3];
  uint64_t v24;
  _QWORD v25[3];
  uint64_t v26;
  _QWORD v27[3];
  _BYTE v28[32];

  v19[0] = off_102196B30;
  v19[1] = sub_1001BB7E4;
  v19[2] = 0;
  v20 = v19;
  sub_1015A2E04(v21, "kCLConnectionMessageMotionActivityUpdate");
  sub_100BB90B4((uint64_t)&v22, (uint64_t)v19);
  v17[0] = off_102196B30;
  v17[1] = sub_100F98E30;
  v17[2] = 0;
  v18 = v17;
  sub_1015A2E04(v23, "kCLConnectionMessageMotionActivityPeriodicUpdate");
  sub_100BB90B4((uint64_t)&v24, (uint64_t)v17);
  v15[0] = off_102196BE0;
  v15[1] = sub_100030EF8;
  v15[2] = 0;
  v16 = v15;
  sub_1015A2E04(v25, "kCLConnectionMessageMotionActivityQuery");
  sub_100BB90B4((uint64_t)&v26, (uint64_t)v15);
  v13[0] = off_102196BE0;
  v13[1] = sub_100F99254;
  v13[2] = 0;
  v14 = v13;
  sub_1015A2E04(v27, "kCLConnectionMessageMotionActivityAvailable");
  sub_100BB90B4((uint64_t)v28, (uint64_t)v13);
  sub_100F9986C(a1, (unsigned __int8 *)v21, 4);
  for (i = 0; i != -28; i -= 7)
  {
    v3 = *(_BYTE **)&v28[i * 8 + 24];
    if (&v28[i * 8] == v3)
    {
      v3 = &v28[i * 8];
      v4 = 4;
    }
    else
    {
      if (!v3)
        goto LABEL_7;
      v4 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_7:
    if (SHIBYTE(v27[i + 2]) < 0)
      operator delete((void *)v27[i]);
  }
  v5 = v14;
  if (v14 == v13)
  {
    v6 = 4;
    v5 = v13;
LABEL_14:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  else if (v14)
  {
    v6 = 5;
    goto LABEL_14;
  }
  v7 = v16;
  if (v16 == v15)
  {
    v8 = 4;
    v7 = v15;
LABEL_19:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  else if (v16)
  {
    v8 = 5;
    goto LABEL_19;
  }
  v9 = v18;
  if (v18 == v17)
  {
    v10 = 4;
    v9 = v17;
LABEL_24:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  else if (v18)
  {
    v10 = 5;
    goto LABEL_24;
  }
  result = v20;
  if (v20 == v19)
  {
    v12 = 4;
    result = v19;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
  }
  else if (v20)
  {
    v12 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
  }
  return result;
}

void sub_100F98CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,char *a21,char a22,uint64_t a23,uint64_t a24,char *a25)
{
  uint64_t v25;
  uint64_t i;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;

  for (i = 168; i != -56; i -= 56)
    sub_1004E21A4(v25 + i);
  v28 = a13;
  if (a13 == &a10)
  {
    v29 = 4;
    v28 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_8;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_8:
  v30 = a17;
  if (a17 == &a14)
  {
    v31 = 4;
    v30 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_13;
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
LABEL_13:
  v32 = a21;
  if (a21 == &a18)
  {
    v33 = 4;
    v32 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_18;
    v33 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v32 + 8 * v33))();
LABEL_18:
  v34 = a25;
  if (a25 == &a22)
  {
    v35 = 4;
    v34 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_23;
    v35 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v34 + 8 * v35))();
LABEL_23:
  _Unwind_Resume(a1);
}

void sub_100F98E30(uint64_t a1, int a2)
{
  id v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  const char *v12;
  char *v13;
  const char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _UNKNOWN **v18;
  uint64_t v19;
  _UNKNOWN **v20;
  int v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  _BYTE buf[12];
  __int16 v26;
  int v27;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_10229FCB0 != -1)
    dispatch_once(&qword_10229FCB0, &stru_102196B00);
  v5 = qword_10229FCB8;
  if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_INFO))
  {
    v6 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)buf = 138412546;
    *(_QWORD *)&buf[4] = v6;
    v26 = 1024;
    v27 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Received MotionActivityPeriodicUpdate request,client,%@,subscribe,%d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_102196B00);
    v11 = *(_QWORD *)(a1 + 24);
    v21 = 138412546;
    v22 = v11;
    v23 = 1024;
    v24 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 1, "Received MotionActivityPeriodicUpdate request,client,%@,subscribe,%d", &v21, 18);
    v13 = (char *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionActivitySubscription::handleRequestMotionActivityPeriodicUpdate(BOOL, const CLNameValuePair &)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  if ((sub_1001CD634() & 1) != 0)
  {
    if ((sub_1001BBC08(a1) & 1) != 0)
    {
      sub_1001A638C(a1);
      v7 = *(_QWORD *)(a1 + 48);
      v9 = *(_QWORD *)(v7 + 8);
      v8 = *(void **)(v7 + 16);
      if (a2)
        objc_msgSend(v8, "register:forNotification:registrationInfo:", v9, 10, 0);
      else
        objc_msgSend(v8, "unregister:forNotification:", v9, 10);
    }
    else
    {
      v17 = CMErrorMessage;
      v18 = &off_10221C470;
      *(_QWORD *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v18, &v17, 1);
      sub_100F99484(a1, buf);
    }
  }
  else
  {
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_102196B00);
    v10 = qword_10229FCB8;
    if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Cannot subscribe to motion activity updates, motion activity is not available", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_102196B00);
      LOWORD(v21) = 0;
      LODWORD(v16) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 1, "Cannot subscribe to motion activity updates, motion activity is not available", &v21, v16);
      v15 = (char *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionActivitySubscription::handleRequestMotionActivityPeriodicUpdate(BOOL, const CLNameValuePair &)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    v19 = CMErrorMessage;
    v20 = &off_10221C458;
    *(_QWORD *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v20, &v19, 1);
    sub_100F99484(a1, buf);
  }

}

void sub_100F99214(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100F99254(uint64_t a1, uint64_t *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  NSNumber *v6;

  v3 = objc_alloc_init((Class)NSAutoreleasePool);
  v4 = *a2;
  v5 = CMAvailable;
  v6 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_1001CD634());
  +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v6, &v5, 1);
  CLConnectionMessage::sendReply(v4);

}

void sub_100F99314(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_10024F88C(exception_object);
}

void sub_100F9933C(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_100876330(&off_102196C58, a2, &v6);
  sub_10011A678(a1, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100F993D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100F993E4(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  v2 = *(_QWORD *)(a1 + 32);
  sub_1004E6BA4(off_102196C50, a2, &v6);
  (*(void (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v2 + 24))(v2, &v6, 0);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100F99470(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100F99484(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  v2 = *(_QWORD *)(a1 + 32);
  sub_1004E6BA4(&off_102196C58, a2, &v6);
  (*(void (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v2 + 24))(v2, &v6, 0);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100F99510(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100F99524(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100F99550(id a1)
{
  qword_10229FCB8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Activity");
}

__n128 sub_100F9957C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_102196B30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100F995B8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_102196B30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100F995DC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100F99618()
{
}

void sub_100F99624(uint64_t a1, uint64_t a2, __int128 *a3)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v6 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  sub_1001BAF64(a1, a2, (CLConnectionMessage **)&v6);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100F99690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
    sub_1018FBC0C(a10);
  _Unwind_Resume(exception_object);
}

void sub_100F996A8(id a1)
{
  qword_1022A01C8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

__n128 sub_100F996D4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_102196BE0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100F99710(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_102196BE0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100F99734(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100F99770()
{
}

void sub_100F9977C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  void (*v5)(_QWORD *, uint64_t *);
  uint64_t v6;
  _QWORD *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v4 = *a3;
  v3 = (std::__shared_weak_count *)a3[1];
  v15 = v3;
  *a3 = 0;
  a3[1] = 0;
  v5 = *(void (**)(_QWORD *, uint64_t *))a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(void (**)(_QWORD *, uint64_t *))(*v7 + v5);
  v16 = v4;
  v17 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v5(v7, &v16);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_100F99850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100261F44((uint64_t)&a11);
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100F9986C(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 56 * a3;
    do
    {
      sub_100F998E4(a1, a2, (__int128 *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_100F998D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E6A98(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100F998E4(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_10025A024(a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((sub_10025A4CC(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  sub_100F99B64(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_10012E444(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_1004E69F0((uint64_t)v25, 0);
  return i;
}

void sub_100F99B4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004E69F0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_100F99B64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = sub_100F99BD8(v8 + 2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_100F99BC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E69F0(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_100F99BD8(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_100270E34((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_100F99C30(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100F99C4C(_QWORD *a1)
{
  void *v3[2];
  char v4;
  void *v5;
  char v6;
  void *v7;
  char v8;
  void *__p;
  char v10;

  sub_100F99CEC((uint64_t)v3);
  sub_10114BC58((uint64_t)a1, (__int128 *)v3);
  if (v10 < 0)
    operator delete(__p);
  if (v8 < 0)
    operator delete(v7);
  if (v6 < 0)
    operator delete(v5);
  if (v4 < 0)
    operator delete(v3[0]);
  *a1 = &off_102196C70;
  return a1;
}

void sub_100F99CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10048839C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100F99CEC(uint64_t a1@<X8>)
{
  int v2;
  int v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  const std::string::value_type *v7;
  int v8;
  int v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  char *v17;
  std::string __str;
  int v19;
  uint64_t v20;
  _OWORD buf[102];

  sub_1004886A8(a1);
  sub_1001E4804(buf);
  __str.__r_.__value_.__s.__data_[0] = 0;
  v2 = sub_1001E4874(*(uint64_t *)&buf[0], "WriteLocationdLogsToCrashReporterFolder", (BOOL *)&__str);
  if (__str.__r_.__value_.__s.__data_[0])
    v3 = v2;
  else
    v3 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (*((_QWORD *)&buf[0] + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v3)
    v7 = "/var/mobile/Library/Logs/CrashReporter/com.apple.locationd";
  else
    v7 = "/var/mobile/Library/Logs/locationd";
  std::string::assign((std::string *)(a1 + 48), v7);
  sub_1015A2E04(&__str, "locctl");
  std::string::operator=((std::string *)(a1 + 72), &__str);
  std::string::operator=((std::string *)a1, &__str);
  *(_QWORD *)(a1 + 96) = 0x410FA40000000000;
  *(_BYTE *)(a1 + 119) = 1;
  sub_1001E4804(buf);
  LOBYTE(v19) = 0;
  v8 = sub_1001E4874(*(uint64_t *)&buf[0], "EnableLargeLocationControllerRecorderLogs", (BOOL *)&v19);
  if ((_BYTE)v19)
    v9 = v8;
  else
    v9 = 0;
  v10 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (!*((_QWORD *)&buf[0] + 1))
    goto LABEL_19;
  v11 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (!v9)
      goto LABEL_25;
  }
  else
  {
LABEL_19:
    if (!v9)
      goto LABEL_25;
  }
  *(_QWORD *)(a1 + 104) *= 16;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102196C98);
  v13 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v14 = *(_QWORD *)(a1 + 104);
    LODWORD(buf[0]) = 134283521;
    *(_QWORD *)((char *)buf + 4) = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "#locctl,#rec,EnableLargeLogs is set,maxDirectorySizeBytes,%{private}lld", (uint8_t *)buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102196C98);
    v15 = *(_QWORD *)(a1 + 104);
    v19 = 134283521;
    v20 = v15;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#locctl,#rec,EnableLargeLogs is set,maxDirectorySizeBytes,%{private}lld", &v19, 12);
    v17 = (char *)v16;
    sub_100512490("Generic", 1, 0, 2, "static CLProtobufSerializer::Config CLLocationControllerSerializer::generateConfig()", "%s\n", v16);
    if (v17 != (char *)buf)
      free(v17);
  }
LABEL_25:
  *(_BYTE *)(a1 + 116) = 0;
  *(_BYTE *)(a1 + 117) = sub_100F9A094();
  *(_BYTE *)(a1 + 118) = sub_100F9A2C0();
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_100F9A00C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, char a20)
{
  uint64_t v20;

  if (a17 < 0)
    operator delete(__p);
  sub_10048839C(v20);
  _Unwind_Resume(a1);
}

uint64_t sub_100F9A070()
{
  if ((sub_100F9A094() & 1) != 0)
    return 1;
  else
    return sub_100F9A2C0();
}

uint64_t sub_100F9A094()
{
  unsigned int v0;
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  NSObject *v5;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[8];
  std::__shared_weak_count *v11;

  sub_1001E4804(buf);
  LOBYTE(v9[0]) = 0;
  v0 = sub_1001E4874(*(uint64_t *)buf, "EnableLocationControllerProtoToOsLog", (BOOL *)v9);
  if (LOBYTE(v9[0]))
    v1 = v0;
  else
    v1 = 0;
  v2 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102196C98);
  v5 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = v1;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#locctl,#rec,EnableLocationControllerProtoToOsLog,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102196C98);
    v9[0] = 67240192;
    v9[1] = v1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#locctl,#rec,EnableLocationControllerProtoToOsLog,%{public}d", v9, 8);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "static BOOL CLLocationControllerSerializer::isOsLogEnabled()", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  return v1;
}

void sub_100F9A2A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100F9A2C0()
{
  uint64_t v0;
  NSObject *v1;
  const char *v3;
  uint8_t *v4;
  _DWORD v5[4];
  uint8_t buf[4];
  int v7;

  sub_100197040();
  v0 = sub_10075D288();
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102196C98);
  v1 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67174657;
    v7 = v0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "#locctl,#rec,serializer,isInternalInstall,%{private}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102196C98);
    v5[0] = 67174657;
    v5[1] = v0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#locctl,#rec,serializer,isInternalInstall,%{private}d", v5, 8);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "static BOOL CLLocationControllerSerializer::isDiskEnabled()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  return v0;
}

void sub_100F9A478(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_100F9A5EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F9A614(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = a2;
  sub_1002433B8(a1 + 8);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0xFFFF;
  *(_QWORD *)(a1 + 76) = 0;
  *(_QWORD *)(a1 + 68) = 0;
  *(_OWORD *)(a1 + 84) = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 100) = _Q0;
  *(_OWORD *)(a1 + 116) = _Q0;
  *(_OWORD *)(a1 + 132) = _Q0;
  *(_DWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 152) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 180) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 188) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 216) = 0;
  return a1;
}

void sub_100F9A69C(_QWORD *a1, uint64_t a2, double *a3)
{
  sub_100157758(a1, 1, a2, a3);
}

double sub_100F9A6AC(uint64_t a1)
{
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0xFFFF;
  *(_QWORD *)(a1 + 76) = 0;
  *(_QWORD *)(a1 + 68) = 0;
  *(_OWORD *)(a1 + 84) = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 100) = _Q0;
  *(_OWORD *)(a1 + 116) = _Q0;
  *(_OWORD *)(a1 + 132) = _Q0;
  *(_DWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 152) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 180) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 188) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  return sub_10064AD18(a1 + 8);
}

uint64_t sub_100F9A714(_QWORD *a1, int a2, _QWORD *a3)
{
  NSObject *v5;
  CFAbsoluteTime Current;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;
  unint64_t v13;
  int v14;
  CFAbsoluteTime v15;
  __int16 v16;

  a1[6] = *a3;
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102196CC8);
  v5 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    v12 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Requesting download of preload manifest, allowCell,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102196CC8);
    v10[0] = 67109120;
    v10[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Requesting download of preload manifest, allowCell,%d", v10);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLTransitTilePreloader::requestDownloadManifest(const BOOL, const CFAbsoluteTime &)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  Current = CFAbsoluteTimeGetCurrent();
  v13 = 0xBFF0000000000000;
  v15 = Current;
  v16 = 1;
  buf[0] = a2;
  buf[1] = a2;
  buf[2] = 0;
  v14 = 0;
  return (*(uint64_t (**)(_QWORD, uint8_t *))(*(_QWORD *)*a1 + 24))(*a1, buf);
}

uint64_t sub_100F9A904(_QWORD *a1, int a2, uint64_t a3, _QWORD *a4)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  CFAbsoluteTime Current;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint8_t *v22;
  double v23;
  int v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  int v29;
  uint8_t buf[4];
  _BYTE v31[18];
  __int16 v32;
  CFAbsoluteTime v33;
  __int16 v34;

  a1[7] = *a4;
  v7 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)a1 + 4) = *(_OWORD *)a3;
  *((_OWORD *)a1 + 5) = v7;
  v8 = *(_OWORD *)(a3 + 32);
  v9 = *(_OWORD *)(a3 + 48);
  v10 = *(_OWORD *)(a3 + 80);
  *((_OWORD *)a1 + 8) = *(_OWORD *)(a3 + 64);
  *((_OWORD *)a1 + 9) = v10;
  *((_OWORD *)a1 + 6) = v8;
  *((_OWORD *)a1 + 7) = v9;
  v11 = *(_OWORD *)(a3 + 96);
  v12 = *(_OWORD *)(a3 + 112);
  v13 = *(_OWORD *)(a3 + 128);
  *(_OWORD *)((char *)a1 + 204) = *(_OWORD *)(a3 + 140);
  *((_OWORD *)a1 + 11) = v12;
  *((_OWORD *)a1 + 12) = v13;
  *((_OWORD *)a1 + 10) = v11;
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102196CC8);
  v14 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v15 = *(_QWORD *)(a3 + 4);
    v16 = *(_QWORD *)(a3 + 12);
    *(_DWORD *)buf = 134218496;
    *(_QWORD *)v31 = v15;
    *(_WORD *)&v31[8] = 2048;
    *(_QWORD *)&v31[10] = v16;
    v32 = 1024;
    LODWORD(v33) = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Request tiles at lat,%.06lf,lon,%.06lf, allowCell,%d", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102196CC8);
    v19 = *(_QWORD *)(a3 + 4);
    v20 = *(_QWORD *)(a3 + 12);
    v24 = 134218496;
    v25 = v19;
    v26 = 2048;
    v27 = v20;
    v28 = 1024;
    v29 = a2;
    LODWORD(v23) = 28;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Request tiles at lat,%.06lf,lon,%.06lf, allowCell,%d", COERCE_DOUBLE(&v24), v23);
    v22 = (uint8_t *)v21;
    sub_100512490("Generic", 1, 0, 2, "void CLTransitTilePreloader::requestDownloadWifiTile(const BOOL, const CLDaemonLocation &, const CFAbsoluteTime &)", "%s\n", v21);
    if (v22 != buf)
      free(v22);
  }
  Current = CFAbsoluteTimeGetCurrent();
  *(_QWORD *)&v31[4] = 0xBFF0000000000000;
  v33 = Current;
  v34 = 1;
  buf[0] = a2;
  buf[1] = a2;
  buf[2] = 0;
  *(_DWORD *)&v31[12] = 0;
  return (*(uint64_t (**)(_QWORD, uint8_t *, _QWORD, double, double))(*(_QWORD *)*a1 + 32))(*a1, buf, 0, *(double *)(a3 + 4), *(double *)(a3 + 12));
}

void sub_100F9AB7C(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

double sub_100F9ABA8(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0xBFF0000000000000;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  return result;
}

uint64_t sub_100F9ABC4(uint64_t result, double a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  double v6;
  double v7;
  uint64_t v9;
  double v10;

  v4 = *(_QWORD *)(result + 48);
  v3 = *(_QWORD *)(result + 56);
  if (v4 != v3)
  {
    v5 = 0;
    v6 = -1.79769313e308;
    while (1)
    {
      v7 = *(double *)v4;
      if (*(double *)v4 >= a2 && v7 < a3)
      {
        if (v6 < *(float *)(v4 + 8))
          v6 = *(float *)(v4 + 8);
        ++v5;
      }
      if (v7 < a3)
        break;
      v4 += 16;
      if (v4 == v3)
        return result;
    }
    if (v4 != v3)
    {
      v9 = v4 + 16;
      if (v4 + 16 != v3)
      {
        do
        {
          v10 = *(double *)v9;
          if (*(double *)v9 >= a2 && v10 < a3)
          {
            if (v6 < *(float *)(v9 + 8))
              v6 = *(float *)(v9 + 8);
            ++v5;
          }
          if (v10 >= a3)
          {
            *(_OWORD *)v4 = *(_OWORD *)v9;
            v4 += 16;
          }
          v9 += 16;
        }
        while (v9 != v3);
        v3 = *(_QWORD *)(result + 56);
      }
      if (v4 != v3)
        *(_QWORD *)(result + 56) = v4;
    }
  }
  return result;
}

void sub_100F9ACDC(_QWORD *a1, double a2, double a3, double a4)
{
  double v7;
  double v8;
  double v9;
  double v10;
  NSObject *v11;
  float v12;
  char *v13;
  double v14;
  double v15;
  _BYTE v16[20];
  __int16 v17;
  double v18;
  __int16 v19;
  double v20;
  uint8_t buf[4];
  _BOOL4 v22;
  __int16 v23;
  double v24;
  __int16 v25;
  double v26;
  __int16 v27;
  double v28;
  __int16 v29;
  double v30;

  v7 = a4 / 60.0;
  sub_100F9ABC4((uint64_t)a1, a2, a3);
  v9 = v8;
  if (qword_1022A0190 != -1)
    dispatch_once(&qword_1022A0190, &stru_102196CE8);
  v10 = round(v7);
  v11 = qword_1022A0198;
  if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67110144;
    v22 = v10 > 0.0;
    v23 = 2048;
    v24 = a2;
    v25 = 2048;
    v26 = a3;
    v27 = 2048;
    v28 = v10;
    v29 = 2048;
    v30 = v9;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Aggregated result, shouldWrite, %d, startTime, %f, endTime, %f, daylightMinutes, %f, maxLux, %f", buf, 0x30u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_102196CE8);
    LODWORD(v15) = 67110144;
    HIDWORD(v15) = v10 > 0.0;
    *(_WORD *)v16 = 2048;
    *(double *)&v16[2] = a2;
    *(_WORD *)&v16[10] = 2048;
    *(double *)&v16[12] = a3;
    v17 = 2048;
    v18 = v10;
    v19 = 2048;
    v20 = v9;
    LODWORD(v14) = 48;
    v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 0, "Aggregated result, shouldWrite, %d, startTime, %f, endTime, %f, daylightMinutes, %f, maxLux, %f", &v15, v14, v15, *(double *)v16, *(double *)&v16[8]);
    sub_100512490("Generic", 1, 0, 2, "void CLTimeInDaylightHealthKitAggregator::writeToHK(CFAbsoluteTime, CFAbsoluteTime, double)", "%s\n", v13);
    if (v13 != (char *)buf)
      free(v13);
  }
  if (v10 > 0.0)
  {
    v12 = v9;
    (*(void (**)(_QWORD, double, double, double, float))(*(_QWORD *)*a1 + 16))(*a1, a2, a3, v10, v12);
  }
}

void sub_100F9AF38(uint64_t a1, double *a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;

  v4 = *(double *)(a1 + 8);
  if (v4 == -1.0 || *(double *)(a1 + 16) == 0.0)
  {
    v4 = *a2;
    *(double *)(a1 + 8) = *a2;
    v5 = v4;
  }
  else
  {
    v5 = *a2;
  }
  if (v5 - v4 > 300.0)
  {
    sub_100F9ACDC((_QWORD *)a1, v4, v4 + 300.0, *(double *)(a1 + 16));
    v4 = *a2;
    *(double *)(a1 + 8) = *a2;
    *(_QWORD *)(a1 + 16) = 0;
  }
  v6 = a2[1];
  if (v6 - v4 >= 300.0)
  {
    v8 = *(double *)(a1 + 16);
    do
    {
      v7 = v4 + 300.0;
      sub_100F9ACDC((_QWORD *)a1, v4, v4 + 300.0, v4 + 300.0 - v5 + v8);
      *(double *)(a1 + 8) = v7;
      *(_QWORD *)(a1 + 16) = 0;
      v6 = a2[1];
      v8 = 0.0;
      v4 = v7;
      v5 = v7;
    }
    while (v6 - v7 >= 300.0);
  }
  else
  {
    v7 = v5;
  }
  if (v6 > v7)
    *(double *)(a1 + 16) = v6 - v7 + *(double *)(a1 + 16);
}

void sub_100F9B038(id a1)
{
  qword_1022A0198 = (uint64_t)os_log_create("com.apple.locationd.Position", "Outdoor");
}

void sub_100F9B108(id a1)
{
  qword_1023093C0 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLAutopauseProviderSilo"));
}

uint64_t sub_100F9B1BC(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100F9B31C;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_1023093D0 != -1)
    dispatch_once(&qword_1023093D0, block);
  return qword_102311A80;
}

void sub_100F9B31C()
{
  sub_100197040();
  if (sub_10075CA34())
    operator new();
  operator new();
}

void sub_100F9B398()
{
  operator delete();
}

_QWORD *sub_100F9B3D0(uint64_t a1, void *a2)
{
  _QWORD *result;

  result = (_QWORD *)sub_100F9B3FC(a1, "CLAutopauseProvider", a2);
  *result = off_102196D38;
  return result;
}

uint64_t sub_100F9B3FC(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_102196EC0;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_100F9B47C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F9B498(uint64_t a1)
{
  *(_QWORD *)a1 = off_102196D38;
  *(_BYTE *)(a1 + 108) = 1;
  return sub_100F9B4B0(a1);
}

uint64_t sub_100F9B4B0(uint64_t a1)
{
  *(_QWORD *)a1 = off_102196EC0;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_100F9B52C@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1015A2E04(a2, __str);
}

void sub_100F9B5A4()
{
  operator new();
}

void sub_100F9B650(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

uint64_t sub_100F9B68C(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  id v13;
  id v14;

  *(_QWORD *)a1 = &off_102196FA0;
  *(_QWORD *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]([CLNotifierClientAdapter alloc], "initWithClient:", a1);
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0)
    v12 = a3;
  else
    v12 = (uint64_t *)*a3;
  v13 = objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(_QWORD *)(a1 + 16) = v13;
  v14 = v13;
  if (a2)
    objc_msgSend(*(id *)(a1 + 16), "setDelegateEntityName:", a2);
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

void sub_100F9B760(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102196E90);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_102196E90);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData>::removeClient(int) [Notification_T = CLAutopauseProvider_Type::Notification, NotificationData_T = CLAutopauseProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

uint64_t sub_100F9B9D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022FC580);
}

uint64_t sub_100F9B9E8(uint64_t a1, int a2, int *a3, char *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t *v29;
  char v30;
  uint64_t **v31;
  char v32;
  uint64_t **v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  const char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _BYTE v42[12];
  __int16 v43;
  int v44;
  _BYTE buf[12];
  __int16 v46;
  int v47;

  v41 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(_QWORD *)v42 = v10;
      v17 = *a3;
      v20 = *(_QWORD *)(v10 + 48);
      v19 = v10 + 48;
      v18 = v20;
      if (!v20)
        goto LABEL_31;
      v21 = v19;
      do
      {
        v22 = *(_DWORD *)(v18 + 28);
        v23 = v22 < v17;
        if (v22 >= v17)
          v24 = (uint64_t *)v18;
        else
          v24 = (uint64_t *)(v18 + 8);
        if (!v23)
          v21 = v18;
        v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28))
LABEL_31:
        v21 = v19;
      v25 = *(_QWORD *)(a1 + 64);
      if (!v25)
        goto LABEL_42;
      v26 = a1 + 64;
      do
      {
        v27 = *(_DWORD *)(v25 + 32);
        v28 = v27 < v17;
        if (v27 >= v17)
          v29 = (uint64_t *)v25;
        else
          v29 = (uint64_t *)(v25 + 8);
        if (!v28)
          v26 = v25;
        v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        v40 = v26;
        v34 = *(_QWORD *)(v26 + 56);
        v35 = *a4;
        *(_QWORD *)buf = &v41;
        *((_BYTE *)sub_1001AFE94((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v35;
        buf[2] = 0;
        *(_WORD *)buf = 0;
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _BYTE *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_100F9D344();
        }
        if (v34)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        v40 = a1 + 64;
        v30 = byte_1022FC581;
        HIDWORD(v39) = v17;
        *(_QWORD *)buf = (char *)&v39 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v30;
        HIDWORD(v39) = *a3;
        *(_QWORD *)buf = (char *)&v39 + 4;
        v31 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v31 + 8);
        v32 = *a4;
        HIDWORD(v39) = *a3;
        *(_QWORD *)buf = (char *)&v39 + 4;
        v33 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)buf = &v41;
        *((_BYTE *)sub_1001AFE94(v33 + 5, &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v32;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        *(_DWORD *)buf = *a3;
        sub_1000C6190((uint64_t **)(*(_QWORD *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102196E90);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v15;
    v46 = 1026;
    v47 = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  v16 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102196E90);
    v36 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v36 = (_QWORD *)*v36;
    *(_DWORD *)v42 = 136446466;
    *(_QWORD *)&v42[4] = v36;
    v43 = 1026;
    v44 = a2;
    LODWORD(v39) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
      v42,
      v39);
    v38 = (char *)v37;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLAutopauseProvider_Type::Notification, NotificationData_T = CLAutopauseProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v37);
    if (v38 != buf)
      free(v38);
    return 0;
  }
  return result;
}

BOOL sub_100F9BE48(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102196E90);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102196E90);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLAutopauseProvider_Type::Notification, NotificationData_T = CLAutopauseProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

BOOL sub_100F9C0C8(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE buf[12];
  __int16 v36;
  void **v37;
  char v38;
  int v39;
  _QWORD *v40;
  __int16 v41;
  _BYTE *v42;
  void *__p[2];
  char v44;

  HIDWORD(v34) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009E904((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102196E90);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v44 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v36 = 2082;
                v37 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_102196E90);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v38 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v39 = 136446466;
                v40 = v29;
                v41 = 2082;
                v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                v33 = v32;
                if (v38 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLAutopauseProvider_Type::Notification, NotificationData_T = CLAutopauseProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v33);
                if (v33 != (char *)__p)
                  free(v33);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_100F9C450(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t *v10;
  __int16 *v11;
  __int16 v12;

  v5 = *(_QWORD *)(a1 + 64);
  v3 = a1 + 64;
  v4 = v5;
  if (!v5)
    return 0;
  v6 = *a2;
  v7 = v3;
  do
  {
    v8 = *(_DWORD *)(v4 + 32);
    v9 = v8 < v6;
    if (v8 >= v6)
      v10 = (uint64_t *)v4;
    else
      v10 = (uint64_t *)(v4 + 8);
    if (!v9)
      v7 = v4;
    v4 = *v10;
  }
  while (*v10);
  if (v7 == v3)
    return 0;
  if (v6 < *(_DWORD *)(v7 + 32))
    return 0;
  v11 = *(__int16 **)(v7 + 64);
  if (!v11)
    return 0;
  v12 = *v11;
  *(_BYTE *)(a3 + 2) = *((_BYTE *)v11 + 2);
  *(_WORD *)a3 = v12;
  return 1;
}

uint64_t sub_100F9C4B8(uint64_t a1, int *a2, __int16 *a3)
{
  _QWORD *v6;
  __int16 v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  int v13;
  __int128 v14;
  int *v15;

  v6 = operator new(0x20uLL);
  v6[2] = 0;
  *v6 = off_102196FE8;
  v6[1] = 0;
  *((_BYTE *)v6 + 26) = *((_BYTE *)a3 + 2);
  v7 = *a3;
  *((_QWORD *)&v14 + 1) = v6;
  *((_WORD *)v6 + 12) = v7;
  *(_QWORD *)&v14 = v6 + 3;
  v13 = *a2;
  v15 = &v13;
  v8 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v13, (uint64_t)&unk_101B9EB60, &v15);
  sub_1002B7674((uint64_t)(v8 + 8), &v14);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return 1;
}

void sub_100F9C594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100F9C5A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int16 v5;
  char v6;

  v6 = 0;
  v5 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, __int16 *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, a2, &v5, a3, a4, 0);
}

void sub_100F9C5E4(uint64_t a1, signed __int32 *a2, uint64_t a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  os_activity_scope_state_s state;
  uint8_t buf[8];
  _BYTE v30[20];
  __int16 v31;
  _QWORD *v32;
  __int16 v33;
  std::__shared_weak_count *v34;
  _QWORD **v35;
  _QWORD *v36[3];
  std::__shared_weak_count *v37;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102196E90);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v30 = 2082;
      *(_QWORD *)&v30[2] = "";
      *(_WORD *)&v30[10] = 2082;
      *(_QWORD *)&v30[12] = "activity";
      v31 = 2082;
      v32 = v10;
      v33 = 2050;
      v34 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v35 = v36;
      memset(v36, 0, sizeof(v36));
      v37 = 0;
      sub_1004A6D60((uint64_t)buf, a2, (uint64_t)&v35);
      v14 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)buf);
      v18 = v34;
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v30, *(_QWORD **)&v30[8]);
      v21 = v37;
      if (v37)
      {
        v22 = (unint64_t *)&v37->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v35, v36[0]);
    }
    if (a4)
    {
      v24 = operator new(0x20uLL);
      v24[2] = 0;
      *v24 = off_102196FE8;
      v24[1] = 0;
      *((_BYTE *)v24 + 26) = *(_BYTE *)(a3 + 2);
      *((_WORD *)v24 + 12) = *(_WORD *)a3;
      *(_QWORD *)buf = v24 + 3;
      *(_QWORD *)v30 = v24;
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)buf);
      v25 = *(std::__shared_weak_count **)v30;
      if (*(_QWORD *)v30)
      {
        v26 = (unint64_t *)(*(_QWORD *)v30 + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_100F9DD48();
    os_activity_scope_leave(&state);
  }
}

void sub_100F9CC24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_100F9CC70(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102196E90);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102196E90);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData>::listClients() [Notification_T = CLAutopauseProvider_Type::Notification, NotificationData_T = CLAutopauseProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102196E90);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102196E90);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData>::listClients() [Notification_T = CLAutopauseProvider_Type::Notification, NotificationData_T = CLAutopauseProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_102196E90);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102196E90);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData>::listClients() [Notification_T = CLAutopauseProvider_Type::Notification, NotificationData_T = CLAutopauseProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_100F9D21C(uint64_t a1)
{
  sub_100F9D2B8(a1);
  operator delete();
}

id sub_100F9D240(uint64_t a1, uint64_t a2, void *a3)
{
  int v3;
  id result;
  int v6;

  v3 = a2;
  result = sub_100F9D4D8(a3, a2);
  if (result)
  {
    v6 = v3;
    return (id)(*(uint64_t (**)(_QWORD, int *, id, _QWORD))(a1 + 24))(0, &v6, result, *(_QWORD *)(a1 + 32));
  }
  return result;
}

void sub_100F9D28C(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_100F9D2B8(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = &off_102196FA0;
  v2 = (id *)(a1 + 8);
  objc_msgSend(*(id *)(a1 + 16), "forget:", *(_QWORD *)(a1 + 8));

  objc_msgSend(*v2, "invalidate");
  *v2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void sub_100F9D318(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_100F9D344()
{
  operator new();
}

_BYTE *sub_100F9D3DC(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  int *v14;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    v9 = sub_100F9D4D8(a4, a2);
    v10 = *(_QWORD *)a3 + 80;
    v11 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v14 = (int *)(*(_QWORD *)a2 + 32);
    v12 = sub_1001AFE94(v11, v14, (uint64_t)&unk_101B9EB60, &v14);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v13);
  }
  return result;
}

uint64_t sub_100F9D4B8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

id sub_100F9D4D8(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = objc_opt_class(CLCppEncodableDataContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_100F9D550(a1);
  v6 = objc_opt_class(CLCppContainer, v4);
  if ((objc_opt_isKindOfClass(a1, v6) & 1) != 0)
    return sub_100F9D8D8(a1);
  else
    return 0;
}

id sub_100F9D550(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t buf[4];
  id v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  unint64_t v15;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return sub_100F9DC84((uint64_t)&v8 + 7, a1);
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102196FB8);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v11 = v2;
      v12 = 2048;
      v13 = 0;
      v14 = 2080;
      v15 = 0x8000000101C434F8 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102196FB8);
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v9, v8, v9);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102196FB8);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v11 = v2;
      v12 = 2048;
      v13 = 0;
      v14 = 2080;
      v15 = 0x8000000101C434F8 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102196FB8);
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v9, v8, v9);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLAutopauseProvider_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

id sub_100F9D8D8(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102196FB8);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C434F8 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102196FB8);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102196FB8);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C434F8 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102196FB8);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLAutopauseProvider_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

id sub_100F9DC84(uint64_t a1, void *a2)
{
  if (!objc_msgSend(a2, "cppObjectPtr")
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_10221C4A0))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)3)
      sub_101936F84();
    objc_msgSend(a2, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a2, "serialized"), "bytes"));
  }
  return objc_msgSend(a2, "cppObjectPtr");
}

void sub_100F9DCF8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102196FE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100F9DD0C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102196FE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_100F9DD48()
{
  operator new();
}

void sub_100F9DDE0(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  id v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  const char *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  __int16 v54;
  int v55;
  uint8_t buf[4];
  _QWORD *v57;
  __int16 v58;
  int v59;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v51 = v9;
        v13 = sub_100F9D4D8(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, id, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 7);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v50 = v19;
              sub_100F9D3DC(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v51 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 28);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 28);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v50 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102196E90);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                v57 = v25;
                v58 = 1026;
                v59 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_102196E90);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 7);
                v52 = 136446466;
                v53 = v45;
                v54 = 1026;
                v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                v48 = (uint8_t *)v47;
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLAutopauseProvider_Type::Notification, NotificationData_T = CLAutopauseProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v48 != buf)
                  free(v48);
              }
            }
          }
          while (v14 != v51 + 6);
        }
      }
    }
  }
}

uint64_t sub_100F9E1B4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

void sub_100F9E1D4()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101C32304;
      v1[3] = unk_101C32314;
      v1[4] = xmmword_101C32324;
      v1[0] = xmmword_101C322E4;
      v1[1] = unk_101C322F4;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_100F9E2A8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

uint64_t sub_100F9E2C0(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  char *v11;
  _QWORD *v12;

  *(_QWORD *)a1 = &off_102146C40;
  v6 = a1 + 32;
  sub_1018BEA14((unsigned __int8 *)(a1 + 8), "NatalimetryMaxDelay", &qword_101BB7528, 0);
  *(_QWORD *)a1 = off_102197038;
  sub_10052EAC4(v6, a3);
  sub_1011A1E0C(a1 + 104, a3);
  *(_QWORD *)(a1 + 176) = *a2;
  v7 = a2[1];
  *(_QWORD *)(a1 + 184) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_OWORD *)(a1 + 192) = 0u;
  *(_BYTE *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  v10 = operator new(0x20uLL);
  v10[2] = 0;
  v10[3] = off_102152220;
  *v10 = off_1021970B8;
  v10[1] = 0;
  *(_QWORD *)(a1 + 248) = v10 + 3;
  *(_QWORD *)(a1 + 256) = v10;
  v11 = (char *)operator new(0x58uLL);
  *((_QWORD *)v11 + 2) = 0;
  *(_QWORD *)v11 = off_102197108;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 3) = off_1021A0300;
  *((_OWORD *)v11 + 2) = 0u;
  *((_OWORD *)v11 + 3) = 0u;
  *((_QWORD *)v11 + 8) = 0;
  *(_OWORD *)(v11 + 72) = xmmword_101C32490;
  *(_QWORD *)(a1 + 264) = v11 + 24;
  *(_QWORD *)(a1 + 272) = v11;
  v12 = operator new(0x20uLL);
  v12[2] = 0;
  *v12 = off_102197158;
  v12[1] = 0;
  v12[3] = off_102166EE0;
  *(_QWORD *)(a1 + 280) = v12 + 3;
  *(_QWORD *)(a1 + 288) = v12;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = a1 + 296;
  return a1;
}

void sub_100F9E468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  sub_100261F44((uint64_t)&a9);
  sub_100261F44((uint64_t)&a11);
  do
  {
    v14 -= 16;
    sub_100261F44(v14);
  }
  while ((_QWORD *)v14 != v13 + 7);
  sub_10047F25C(v13);
  sub_100261F44(v12);
  v11[13] = off_102142018;
  sub_10047F660(v11 + 15);
  v11[4] = off_102142018;
  sub_10047F660(v11 + 6);
  _Unwind_Resume(a1);
}

uint64_t sub_100F9E4F8(uint64_t a1, double *a2)
{
  uint64_t result;
  double v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;

  result = sub_1000D7EBC(*(_QWORD ***)(a1 + 176), *a2);
  if (*((_DWORD *)a2 + 2))
  {
    v5 = sub_1000D796C((_QWORD *)(a1 + 192), a2);
    (*(void (**)(_QWORD, double *, double))(**(_QWORD **)(*(_QWORD *)(a1 + 176) + 48) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 48), a2, v5);
    result = (*(uint64_t (**)(_QWORD, uint64_t *, double))(**(_QWORD **)(*(_QWORD *)(a1 + 176) + 48) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 48), &v9, *a2);
    if ((_DWORD)result)
    {
      v6 = 0;
      v7 = *a2;
      v8 = *(_QWORD *)(a1 + 176);
      do
      {
        result = *(_QWORD *)(a1 + 248 + v6);
        if (result)
          result = (*(uint64_t (**)(uint64_t, uint64_t, double))(*(_QWORD *)result + 24))(result, v8, v7);
        v6 += 16;
      }
      while (v6 != 64);
    }
    if (!*(_BYTE *)(a1 + 240))
      return sub_100F9E604(a1);
  }
  return result;
}

uint64_t sub_100F9E604(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  uint64_t v4;
  unint64_t v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _WORD v10[8];
  uint8_t buf[1609];
  _OWORD v12[14];
  uint64_t v13;
  _OWORD v14[14];
  uint64_t v15;

  if (*(_QWORD *)(result + 232))
  {
    v1 = result;
    v2 = result + 192;
    do
    {
      v3 = *(double *)(*(_QWORD *)(*(_QWORD *)(v1 + 200) + ((*(_QWORD *)(v1 + 224) >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * (*(_QWORD *)(v1 + 224) & 0x1FFLL));
      if ((*(unsigned int (**)(_QWORD, double))(**(_QWORD **)(*(_QWORD *)(v1 + 176) + 48) + 48))(*(_QWORD *)(*(_QWORD *)(v1 + 176) + 48), v3)&& (v4 = (*(uint64_t (**)(_QWORD, _OWORD *, double))(**(_QWORD **)(*(_QWORD *)(v1 + 176) + 48) + 24))(*(_QWORD *)(*(_QWORD *)(v1 + 176) + 48), v14, v3), (_DWORD)v4))
      {
        result = sub_100F9E960(v3, v4, *(_QWORD *)(v1 + 176));
        if ((result & 1) == 0)
        {
          v5 = *(_QWORD *)(v1 + 232) + *(_QWORD *)(v1 + 224) - 1;
          if (vabdd_f64(*(double *)(*(_QWORD *)(*(_QWORD *)(v1 + 200) + ((v5 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v5 & 0x1FF)), v3) <= *(double *)(v1 + 16))return result;
        }
        sub_100236CCC(*(_QWORD *)(v1 + 176), v3);
        v12[12] = v14[12];
        v12[13] = v14[13];
        v13 = v15;
        v12[8] = v14[8];
        v12[9] = v14[9];
        v12[11] = v14[11];
        v12[10] = v14[10];
        v12[4] = v14[4];
        v12[5] = v14[5];
        v12[7] = v14[7];
        v12[6] = v14[6];
        v12[0] = v14[0];
        v12[1] = v14[1];
        v12[3] = v14[3];
        v12[2] = v14[2];
        sub_100F9EA44(v1, (uint64_t)v12, *(_QWORD *)(v1 + 176));
      }
      else
      {
        if (qword_10229FC90 != -1)
          dispatch_once(&qword_10229FC90, &stru_102197088);
        v6 = qword_10229FC98;
        if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#Warning Popping out an activity since there's no activity associated with current time.  This shouldn't happen", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC90 != -1)
            dispatch_once(&qword_10229FC90, &stru_102197088);
          v10[0] = 0;
          LODWORD(v9) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 16, "#Warning Popping out an activity since there's no activity associated with current time.  This shouldn't happen", v10, v9);
          v8 = (uint8_t *)v7;
          sub_100512490("Generic", 1, 0, 0, "void CLFitnessControllerYouth::processQueue()", "%s\n", v7);
          if (v8 != buf)
            free(v8);
        }
      }
      *(int64x2_t *)(v1 + 224) = vaddq_s64(*(int64x2_t *)(v1 + 224), (int64x2_t)xmmword_101B9DFC0);
      result = sub_10047F604(v2, 1);
    }
    while (*(_QWORD *)(v1 + 232));
  }
  return result;
}

uint64_t sub_100F9E960(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  BOOL v6;
  uint64_t v7;
  _DWORD v8[52];
  char v9;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 48) + 48))(*(_QWORD *)(a3 + 48));
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(_QWORD, _DWORD *, double))(**(_QWORD **)(a3 + 48) + 24))(*(_QWORD *)(a3 + 48), v8, a1);
    if ((_DWORD)result)
    {
      if (v9
        || (result = (*(uint64_t (**)(_QWORD, double))(**(_QWORD **)(a3 + 32) + 48))(*(_QWORD *)(a3 + 32), a1), (_DWORD)result))
      {
        v6 = (CLMotionActivity::isTypeCycling(v8[2]) & (v9 != 0)) == 0;
        v7 = 40;
        if (!v6)
          v7 = 16;
        return (*(uint64_t (**)(_QWORD, double))(**(_QWORD **)(a3 + v7) + 48))(*(_QWORD *)(a3 + v7), a1);
      }
    }
  }
  return result;
}

void sub_100F9EA44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  const char *v15;
  uint8_t *v16;
  int v17;
  uint64_t v18;
  __int16 v19;
  unsigned int v20;
  __int16 v21;
  int v22;
  uint8_t buf[4];
  uint64_t v24;
  __int16 v25;
  unsigned int v26;
  __int16 v27;
  int v28;

  sub_100F9EC90(a1, a3);
  v6 = 0;
  v7 = *(_DWORD *)(a2 + 136);
  v8 = v7;
  do
  {
    v9 = *(_QWORD *)(a1 + 248 + v6);
    if (v9)
    {
      v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v8, a3);
      *(_DWORD *)(a2 + 136) = v8;
    }
    v6 += 16;
  }
  while (v6 != 64);
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_102197088);
  v10 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
  {
    v11 = *(_QWORD *)(a2 + 88);
    v12 = *(_DWORD *)(a2 + 136);
    *(_DWORD *)buf = 134349568;
    v24 = v11;
    v25 = 1026;
    v26 = v7;
    v27 = 1026;
    v28 = v12;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "startTime, %{public}.3f, rawActivity, %{public}d, overridenActivity, %{public}d", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102197088);
    v13 = *(_QWORD *)(a2 + 88);
    v14 = *(_DWORD *)(a2 + 136);
    v17 = 134349568;
    v18 = v13;
    v19 = 1026;
    v20 = v7;
    v21 = 1026;
    v22 = v14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "startTime, %{public}.3f, rawActivity, %{public}d, overridenActivity, %{public}d", &v17, 24);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "void CLFitnessControllerYouth::processEpoch(CLMotionStateMediator_Type::MediatedMotionActivity, const CLNatalieModelInput &)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  sub_100E8CB30(a1 + 32, a2);
  sub_100E8CB30(a1 + 104, a2);
}

void sub_100F9EC90(uint64_t a1, uint64_t a2)
{
  id v3;
  _QWORD *v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t *v11;
  __int128 v12;

  if (!*(_BYTE *)(a2 + 352))
  {
    sub_100346F9C(*(_QWORD **)(a1 + 312));
    return;
  }
  v3 = +[CMWorkout CMWorkoutTypeFromCLMotionActivityType:](CMWorkout, "CMWorkoutTypeFromCLMotionActivityType:", *(unsigned int *)(a2 + 152));
  if (v3 != (id)15 && v3 != (id)17)
  {
    v5 = *(_QWORD **)(a1 + 312);
    if (!*v5)
    {
      if (v3 == (id)4)
      {
        v6 = operator new(0x20uLL);
        v6[1] = 0;
        v6[2] = 0;
        *v6 = off_1021971A8;
        *((_QWORD *)&v12 + 1) = v6;
        v6[3] = off_10218C768;
        *(_QWORD *)&v12 = v6 + 3;
        sub_1002B7674((uint64_t)v5, &v12);
        v7 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
        if (!*((_QWORD *)&v12 + 1))
          return;
        v8 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
      }
      else
      {
        v10 = operator new(0x20uLL);
        v10[1] = 0;
        v10[2] = 0;
        *v10 = off_1021971F8;
        *((_QWORD *)&v12 + 1) = v10;
        v10[3] = off_102144DE8;
        *(_QWORD *)&v12 = v10 + 3;
        sub_1002B7674((uint64_t)v5, &v12);
        v7 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
        if (!*((_QWORD *)&v12 + 1))
          return;
        v11 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
        do
          v9 = __ldaxr(v11);
        while (__stlxr(v9 - 1, v11));
      }
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

uint64_t sub_100F9EDDC(uint64_t result)
{
  *(_BYTE *)(result + 240) = 1;
  return result;
}

uint64_t sub_100F9EDE8(uint64_t result)
{
  *(_BYTE *)(result + 240) = 0;
  return result;
}

_QWORD *sub_100F9EDF0(_QWORD *a1)
{
  uint64_t i;

  *a1 = off_102197038;
  for (i = 37; i != 29; i -= 2)
    sub_100261F44((uint64_t)&a1[i]);
  sub_10047F25C(a1 + 24);
  sub_100261F44((uint64_t)(a1 + 22));
  a1[13] = off_102142018;
  sub_10047F660(a1 + 15);
  a1[4] = off_102142018;
  sub_10047F660(a1 + 6);
  return a1;
}

void sub_100F9EE68(_QWORD *a1)
{
  uint64_t i;

  *a1 = off_102197038;
  for (i = 37; i != 29; i -= 2)
    sub_100261F44((uint64_t)&a1[i]);
  sub_10047F25C(a1 + 24);
  sub_100261F44((uint64_t)(a1 + 22));
  a1[13] = off_102142018;
  sub_10047F660(a1 + 15);
  a1[4] = off_102142018;
  sub_10047F660(a1 + 6);
  operator delete();
}

void sub_100F9EEF0(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_100F9EF1C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021970B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100F9EF30(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021970B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100F9EF64(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_100F9EF74(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102197108;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100F9EF88(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102197108;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100F9EFBC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_100F9EFCC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102197158;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100F9EFE0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102197158;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100F9F014(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_100F9F024(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021971A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100F9F038(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021971A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100F9F06C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_100F9F07C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021971F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100F9F090(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021971F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100F9F0C4(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_100F9F0D4(uint64_t a1)
{
  sub_100008848(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

const char *sub_100F9F0FC(unsigned int a1)
{
  if (a1 > 0xA)
    return "?unknown?";
  else
    return off_102197298[a1];
}

int8x8_t sub_100F9F120(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int8x8_t result;
  unint64_t v14;
  unint64_t v15;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  v4 = *(_OWORD *)(a1 + 16);
  v5 = *(_OWORD *)(a1 + 32);
  v6 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 64) = v6;
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  v7 = *(_OWORD *)(a1 + 80);
  v8 = *(_OWORD *)(a1 + 96);
  v9 = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a2 + 112) = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 128) = v9;
  *(_OWORD *)(a2 + 80) = v7;
  *(_OWORD *)(a2 + 96) = v8;
  v10 = *(_OWORD *)(a1 + 144);
  v11 = *(_OWORD *)(a1 + 160);
  v12 = *(_OWORD *)(a1 + 176);
  *(_DWORD *)(a2 + 192) = *(_DWORD *)(a1 + 192);
  *(_OWORD *)(a2 + 160) = v11;
  *(_OWORD *)(a2 + 176) = v12;
  *(_OWORD *)(a2 + 144) = v10;
  sub_1011913E8((unsigned __int16 *)a1, a2);
  *(int8x16_t *)(a2 + 12) = vrev32q_s8(*(int8x16_t *)(a1 + 12));
  result = vrev32_s8(*(int8x8_t *)(a1 + 28));
  *(int8x8_t *)(a2 + 28) = result;
  *(_DWORD *)(a2 + 36) = bswap32(*(_DWORD *)(a1 + 36));
  v14 = bswap64(*(_QWORD *)(a1 + 40));
  v15 = bswap64(*(_QWORD *)(a1 + 188));
  *(_DWORD *)(a2 + 176) = bswap32(*(_DWORD *)(a1 + 176));
  *(_QWORD *)(a2 + 40) = v14;
  *(_QWORD *)(a2 + 188) = v15;
  return result;
}

unsigned __int16 *sub_100F9F1CC(unsigned __int16 *result, uint64_t a2)
{
  *(_WORD *)a2 = bswap32(*result) >> 16;
  *(_WORD *)(a2 + 2) = bswap32(result[1]) >> 16;
  *(_DWORD *)(a2 + 4) = bswap32(*((_DWORD *)result + 1));
  *(_WORD *)(a2 + 8) = bswap32(result[4]) >> 16;
  *(_WORD *)(a2 + 10) = bswap32(result[5]) >> 16;
  *(_DWORD *)(a2 + 12) = *((_DWORD *)result + 3);
  return result;
}

uint64_t sub_100F9F224@<X0>(unsigned __int16 *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD v17[2];
  uint64_t v18;
  _QWORD v19[10];
  char v20;
  uint64_t v21;

  sub_100263E50((uint64_t)v17);
  v4 = sub_100263F7C(&v18, (uint64_t)"mcc, ", 5);
  v5 = (_QWORD *)std::ostream::operator<<(v4, *a1);
  v6 = sub_100263F7C(v5, (uint64_t)", mnc, ", 7);
  v7 = (_QWORD *)std::ostream::operator<<(v6, a1[1]);
  v8 = sub_100263F7C(v7, (uint64_t)", lac, ", 7);
  v9 = (_QWORD *)std::ostream::operator<<(v8, *((unsigned int *)a1 + 1));
  v10 = sub_100263F7C(v9, (uint64_t)", subY, ", 8);
  v11 = (_QWORD *)std::ostream::operator<<(v10, a1[4]);
  v12 = sub_100263F7C(v11, (uint64_t)", subX, ", 8);
  v13 = (_QWORD *)std::ostream::operator<<(v12, a1[5]);
  v14 = sub_100263F7C(v13, (uint64_t)", hUnc, ", 8);
  std::ostream::operator<<(v14, *((unsigned __int8 *)a1 + 12));
  std::stringbuf::str(a2, v19);
  *(_QWORD *)((char *)v17
  v18 = v15;
  if (v20 < 0)
    operator delete((void *)v19[8]);
  std::streambuf::~streambuf(v19);
  return std::ios::~ios(&v21);
}

void sub_100F9F364(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

int8x8_t sub_100F9F378(unsigned __int16 *a1, uint64_t a2)
{
  int8x8_t result;

  *(_WORD *)a2 = bswap32(*a1) >> 16;
  *(_WORD *)(a2 + 2) = bswap32(a1[1]) >> 16;
  result = vrev32_s8(*(int8x8_t *)(a1 + 2));
  *(int8x8_t *)(a2 + 4) = result;
  return result;
}

uint64_t sub_100F9F3A8@<X0>(unsigned __int16 *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD v13[2];
  uint64_t v14;
  _QWORD v15[10];
  char v16;
  uint64_t v17;

  sub_100263E50((uint64_t)v13);
  v4 = sub_100263F7C(&v14, (uint64_t)"mcc, ", 5);
  v5 = (_QWORD *)std::ostream::operator<<(v4, *a1);
  v6 = sub_100263F7C(v5, (uint64_t)", mnc, ", 7);
  v7 = (_QWORD *)std::ostream::operator<<(v6, a1[1]);
  v8 = sub_100263F7C(v7, (uint64_t)", lac, ", 7);
  v9 = (_QWORD *)std::ostream::operator<<(v8, *((unsigned int *)a1 + 1));
  v10 = sub_100263F7C(v9, (uint64_t)", offset, ", 10);
  std::ostream::operator<<(v10, *((unsigned int *)a1 + 2));
  std::stringbuf::str(a2, v15);
  *(_QWORD *)((char *)v13
  v14 = v11;
  if (v16 < 0)
    operator delete((void *)v15[8]);
  std::streambuf::~streambuf(v15);
  return std::ios::~ios(&v17);
}

void sub_100F9F4B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100F9F4CC(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  return 1;
}

int8x8_t sub_100F9F4E4(int8x8_t *a1, int8x8_t *a2)
{
  int8x8_t result;

  result = vrev32_s8(*a1);
  *a2 = result;
  a2[1].i16[0] = bswap32(a1[1].u16[0]) >> 16;
  a2[1].i16[1] = bswap32(a1[1].u16[1]) >> 16;
  a2[1].i16[2] = a1[1].i16[2];
  return result;
}

uint64_t sub_100F9F51C@<X0>(unsigned int *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[2];
  uint64_t v16;
  _QWORD v17[10];
  char v18;
  uint64_t v19;

  sub_100263E50((uint64_t)v15);
  v4 = sub_100263F7C(&v16, (uint64_t)", lac, ", 7);
  v5 = (_QWORD *)std::ostream::operator<<(v4, *a1);
  v6 = sub_100263F7C(v5, (uint64_t)", ci, ", 6);
  v7 = (_QWORD *)std::ostream::operator<<(v6, a1[1]);
  v8 = sub_100263F7C(v7, (uint64_t)", subY, ", 8);
  v9 = (_QWORD *)std::ostream::operator<<(v8, *((unsigned __int16 *)a1 + 4));
  v10 = sub_100263F7C(v9, (uint64_t)", subX, ", 8);
  v11 = (_QWORD *)std::ostream::operator<<(v10, *((unsigned __int16 *)a1 + 5));
  v12 = sub_100263F7C(v11, (uint64_t)", hUnc, ", 8);
  std::ostream::operator<<(v12, *((unsigned __int8 *)a1 + 12));
  std::stringbuf::str(a2, v17);
  *(_QWORD *)((char *)v15
  v16 = v13;
  if (v18 < 0)
    operator delete((void *)v17[8]);
  std::streambuf::~streambuf(v17);
  return std::ios::~ios(&v19);
}

void sub_100F9F644(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

int8x8_t sub_100F9F658(int8x8_t *a1, int8x8_t *a2)
{
  int8x8_t result;

  result = vrev32_s8(*a1);
  *a2 = result;
  a2[1].i32[0] = bswap32(a1[1].u32[0]);
  return result;
}

uint64_t sub_100F9F674@<X0>(unsigned int *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v11[2];
  uint64_t v12;
  _QWORD v13[10];
  char v14;
  uint64_t v15;

  sub_100263E50((uint64_t)v11);
  v4 = sub_100263F7C(&v12, (uint64_t)", lac, ", 7);
  v5 = (_QWORD *)std::ostream::operator<<(v4, *a1);
  v6 = sub_100263F7C(v5, (uint64_t)", ci, ", 6);
  v7 = (_QWORD *)std::ostream::operator<<(v6, a1[1]);
  v8 = sub_100263F7C(v7, (uint64_t)", offset, ", 10);
  std::ostream::operator<<(v8, a1[2]);
  std::stringbuf::str(a2, v13);
  *(_QWORD *)((char *)v11
  v12 = v9;
  if (v14 < 0)
    operator delete((void *)v13[8]);
  std::streambuf::~streambuf(v13);
  return std::ios::~ios(&v15);
}

void sub_100F9F76C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100F9F780(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  return 1;
}

uint64_t sub_100F9F790@<X0>(unsigned int *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[2];
  uint64_t v16;
  _QWORD v17[10];
  char v18;
  uint64_t v19;

  sub_100263E50((uint64_t)v15);
  v4 = sub_100263F7C(&v16, (uint64_t)", tac, ", 7);
  v5 = (_QWORD *)std::ostream::operator<<(v4, *a1);
  v6 = sub_100263F7C(v5, (uint64_t)", ci, ", 6);
  v7 = (_QWORD *)std::ostream::operator<<(v6, a1[1]);
  v8 = sub_100263F7C(v7, (uint64_t)", subY, ", 8);
  v9 = (_QWORD *)std::ostream::operator<<(v8, *((unsigned __int16 *)a1 + 4));
  v10 = sub_100263F7C(v9, (uint64_t)", subX, ", 8);
  v11 = (_QWORD *)std::ostream::operator<<(v10, *((unsigned __int16 *)a1 + 5));
  v12 = sub_100263F7C(v11, (uint64_t)", hUnc, ", 8);
  std::ostream::operator<<(v12, *((unsigned __int8 *)a1 + 12));
  std::stringbuf::str(a2, v17);
  *(_QWORD *)((char *)v15
  v16 = v13;
  if (v18 < 0)
    operator delete((void *)v17[8]);
  std::streambuf::~streambuf(v17);
  return std::ios::~ios(&v19);
}

void sub_100F9F8B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100F9F8CC@<X0>(unsigned int *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v11[2];
  uint64_t v12;
  _QWORD v13[10];
  char v14;
  uint64_t v15;

  sub_100263E50((uint64_t)v11);
  v4 = sub_100263F7C(&v12, (uint64_t)", tac, ", 7);
  v5 = (_QWORD *)std::ostream::operator<<(v4, *a1);
  v6 = sub_100263F7C(v5, (uint64_t)", ci, ", 6);
  v7 = (_QWORD *)std::ostream::operator<<(v6, a1[1]);
  v8 = sub_100263F7C(v7, (uint64_t)", offset, ", 10);
  std::ostream::operator<<(v8, a1[2]);
  std::stringbuf::str(a2, v13);
  *(_QWORD *)((char *)v11
  v12 = v9;
  if (v14 < 0)
    operator delete((void *)v13[8]);
  std::streambuf::~streambuf(v13);
  return std::ios::~ios(&v15);
}

void sub_100F9F9C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100F9F9D8@<X0>(unsigned int *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[2];
  uint64_t v16;
  _QWORD v17[10];
  char v18;
  uint64_t v19;

  sub_100263E50((uint64_t)v15);
  v4 = sub_100263F7C(&v16, (uint64_t)", sid, ", 7);
  v5 = (_QWORD *)std::ostream::operator<<(v4, *a1);
  v6 = sub_100263F7C(v5, (uint64_t)", bsid, ", 8);
  v7 = (_QWORD *)std::ostream::operator<<(v6, a1[1]);
  v8 = sub_100263F7C(v7, (uint64_t)", subY, ", 8);
  v9 = (_QWORD *)std::ostream::operator<<(v8, *((unsigned __int16 *)a1 + 4));
  v10 = sub_100263F7C(v9, (uint64_t)", subX, ", 8);
  v11 = (_QWORD *)std::ostream::operator<<(v10, *((unsigned __int16 *)a1 + 5));
  v12 = sub_100263F7C(v11, (uint64_t)", hUnc, ", 8);
  std::ostream::operator<<(v12, *((unsigned __int8 *)a1 + 12));
  std::stringbuf::str(a2, v17);
  *(_QWORD *)((char *)v15
  v16 = v13;
  if (v18 < 0)
    operator delete((void *)v17[8]);
  std::streambuf::~streambuf(v17);
  return std::ios::~ios(&v19);
}

void sub_100F9FB00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100F9FB14@<X0>(unsigned int *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v11[2];
  uint64_t v12;
  _QWORD v13[10];
  char v14;
  uint64_t v15;

  sub_100263E50((uint64_t)v11);
  v4 = sub_100263F7C(&v12, (uint64_t)", sid, ", 7);
  v5 = (_QWORD *)std::ostream::operator<<(v4, *a1);
  v6 = sub_100263F7C(v5, (uint64_t)", bsid, ", 8);
  v7 = (_QWORD *)std::ostream::operator<<(v6, a1[1]);
  v8 = sub_100263F7C(v7, (uint64_t)", offset, ", 10);
  std::ostream::operator<<(v8, a1[2]);
  std::stringbuf::str(a2, v13);
  *(_QWORD *)((char *)v11
  v12 = v9;
  if (v14 < 0)
    operator delete((void *)v13[8]);
  std::streambuf::~streambuf(v13);
  return std::ios::~ios(&v15);
}

void sub_100F9FC0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

int8x8_t sub_100F9FC20(uint64_t a1, uint64_t a2)
{
  int8x8_t result;

  sub_1011913E8((unsigned __int16 *)a1, a2);
  result = vrev32_s8(*(int8x8_t *)(a1 + 12));
  *(int8x8_t *)(a2 + 12) = result;
  return result;
}

unsigned __int16 *sub_100F9FC50(unsigned __int16 *result, uint64_t a2)
{
  int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;

  *(_WORD *)a2 = bswap32(*result) >> 16;
  *(_WORD *)(a2 + 2) = bswap32(result[1]) >> 16;
  *(_DWORD *)(a2 + 4) = bswap32(*((_DWORD *)result + 1));
  *(_WORD *)(a2 + 8) = result[4];
  v2 = *(_WORD *)(a2 + 10) & 0xFFFE | result[5] & 1;
  *(_WORD *)(a2 + 10) = *(_WORD *)(a2 + 10) & 0xFFFE | result[5] & 1;
  v3 = v2 & 0xFFFFFFFD | (2 * ((result[5] >> 1) & 1));
  *(_WORD *)(a2 + 10) = v3;
  v4 = v3 & 0xFFFFFFFB | (4 * ((result[5] >> 2) & 1));
  *(_WORD *)(a2 + 10) = v4;
  v5 = v4 & 0xFFFFFFF7 | (8 * ((result[5] >> 3) & 1));
  *(_WORD *)(a2 + 10) = v5;
  v6 = v5 & 0xFFFFFFEF | (16 * ((result[5] >> 4) & 1));
  *(_WORD *)(a2 + 10) = v6;
  v7 = v6 & 0xFFFFFFDF | (32 * ((result[5] >> 5) & 1));
  *(_WORD *)(a2 + 10) = v7;
  *(_WORD *)(a2 + 10) = result[5] & 0xFFC0 | v7 & 0x3F;
  return result;
}

unsigned int *sub_100F9FCF4(unsigned int *result, _DWORD *a2)
{
  *a2 = bswap32(*result);
  return result;
}

int8x8_t sub_100F9FD04(uint64_t a1, uint64_t a2)
{
  int8x8_t result;

  sub_1011913E8((unsigned __int16 *)a1, a2);
  result = vrev32_s8(*(int8x8_t *)(a1 + 12));
  *(int8x8_t *)(a2 + 12) = result;
  *(_DWORD *)(a2 + 20) = bswap32(*(_DWORD *)(a1 + 20));
  return result;
}

int8x8_t sub_100F9FD40(uint64_t a1, uint64_t a2)
{
  int8x8_t result;

  sub_1011913E8((unsigned __int16 *)a1, a2);
  result = vrev32_s8(*(int8x8_t *)(a1 + 12));
  *(int8x8_t *)(a2 + 12) = result;
  *(_DWORD *)(a2 + 20) = bswap32(*(_DWORD *)(a1 + 20));
  *(_WORD *)(a2 + 24) = bswap32(*(unsigned __int16 *)(a1 + 24)) >> 16;
  *(_WORD *)(a2 + 26) = bswap32(*(unsigned __int16 *)(a1 + 26)) >> 16;
  return result;
}

void sub_100F9FD9C()
{
  std::__shared_weak_count *v0;
  unint64_t *v1;
  unint64_t v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  NSObject *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  NSObject *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  _OWORD buf[102];

  sub_1001E4804(buf);
  sub_1001FD98C(*(uint64_t *)&buf[0], "TileDownloadCoolOffPeriod", &qword_1022FC588);
  v0 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (*((_QWORD *)&buf[0] + 1))
  {
    v1 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 - 1, v1));
    if (!v2)
    {
      ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
      std::__shared_weak_count::__release_weak(v0);
    }
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102197380);
  v3 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf[0]) = 134349056;
    *(_QWORD *)((char *)buf + 4) = qword_1022FC588;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "TileFile, fTileDownloadCoolOffPeriod, %{public}.1lf", (uint8_t *)buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197380);
    v21 = 134349056;
    v22 = qword_1022FC588;
    v16 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "TileFile, fTileDownloadCoolOffPeriod, %{public}.1lf", &v21, 12);
    sub_100512490("Generic", 1, 0, 2, "static void CLTileFile::initStaticGlobals()", "%s\n", v16);
    if (v16 != (char *)buf)
      free(v16);
  }
  sub_1001E4804(buf);
  sub_1001FD98C(*(uint64_t *)&buf[0], "TileDownloadExtendedCoolOffPeriod", &qword_1022FC590);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (*((_QWORD *)&buf[0] + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102197380);
  v7 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf[0]) = 134349056;
    *(_QWORD *)((char *)buf + 4) = qword_1022FC590;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TileFile, fTileDownloadExtendedCoolOffPeriod, %{public}.1lf", (uint8_t *)buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197380);
    v21 = 134349056;
    v22 = qword_1022FC590;
    LODWORD(v20) = 12;
    v17 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "TileFile, fTileDownloadExtendedCoolOffPeriod, %{public}.1lf", &v21, v20);
    sub_100512490("Generic", 1, 0, 2, "static void CLTileFile::initStaticGlobals()", "%s\n", v17);
    if (v17 != (char *)buf)
      free(v17);
  }
  sub_1001E4804(buf);
  sub_1001FD98C(*(uint64_t *)&buf[0], "TileForceExpirationPeriod", &qword_1022FC598);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (*((_QWORD *)&buf[0] + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102197380);
  v11 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf[0]) = 134349056;
    *(_QWORD *)((char *)buf + 4) = qword_1022FC598;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "TileFile, fTileForceExpirationPeriod, %{public}.1lf", (uint8_t *)buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197380);
    v21 = 134349056;
    v22 = qword_1022FC598;
    LODWORD(v20) = 12;
    v18 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "TileFile, fTileForceExpirationPeriod, %{public}.1lf", &v21, v20);
    sub_100512490("Generic", 1, 0, 2, "static void CLTileFile::initStaticGlobals()", "%s\n", v18);
    if (v18 != (char *)buf)
      free(v18);
  }
  sub_1001E4804(buf);
  sub_1001FD98C(*(uint64_t *)&buf[0], "TileMinExpirationPeriod", &qword_1022FC5A0);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (*((_QWORD *)&buf[0] + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102197380);
  v15 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf[0]) = 134349056;
    *(_QWORD *)((char *)buf + 4) = qword_1022FC5A0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "TileFile, fTileMinExpirationPeriod, %{public}.1lf", (uint8_t *)buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197380);
    v21 = 134349056;
    v22 = qword_1022FC5A0;
    LODWORD(v20) = 12;
    v19 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "TileFile, fTileMinExpirationPeriod, %{public}.1lf", &v21, v20);
    sub_100512490("Generic", 1, 0, 2, "static void CLTileFile::initStaticGlobals()", "%s\n", v19);
    if (v19 != (char *)buf)
      free(v19);
  }
}

void sub_100FA04B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100FA04D8(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CFAbsoluteTime Current;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = off_102197300;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = a3;
  sub_1000C1928(a1 + 48, a2);
  *(_QWORD *)(a1 + 96) = a4;
  *(_QWORD *)(a1 + 104) = 0;
  Current = CFAbsoluteTimeGetCurrent();
  *(_OWORD *)(a1 + 208) = 0u;
  *(_WORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 114) = 0;
  *(_QWORD *)(a1 + 120) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 128) = 0;
  *(CFAbsoluteTime *)(a1 + 136) = Current;
  *(_WORD *)(a1 + 144) = 1;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 200) = -1;
  *(_WORD *)(a1 + 240) = 68;
  *(_OWORD *)(a1 + 224) = 0u;
  sub_1002433B8(a1 + 248);
  *(_DWORD *)(a1 + 288) = 0;
  pthread_once(&stru_1022FC5A8, sub_100F9FD9C);
  return a1;
}

void sub_100FA05A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 95) < 0)
    operator delete(*(void **)(v1 + 72));
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100FA05F0(uint64_t a1)
{
  *(_QWORD *)a1 = off_102197300;
  if (*(char *)(a1 + 231) < 0)
    operator delete(*(void **)(a1 + 208));
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_100FA0654(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  v3 = *(_QWORD *)(a1 + 104);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
    *(_QWORD *)(a1 + 104) = 0;
  }
  *(_BYTE *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

void sub_100FA06D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_100FA06EC(uint64_t a1, double a2)
{
  return vabdd_f64(a2, *(double *)(a1 + 176));
}

double sub_100FA06F8(uint64_t a1, double a2)
{
  uint64_t v4;
  _BOOL4 v5;
  uint64_t v6;
  double v7;

  v4 = *(_QWORD *)(a1 + 40);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  v5 = sub_1001C94A8(a1);
  v6 = 160;
  if (v5)
    v6 = 232;
  v7 = *(double *)(a1 + v6);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  return a2 - v7;
}

void sub_100FA077C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_100FA0790(uint64_t a1)
{
  return *(double *)(a1 + 232);
}

BOOL sub_100FA0798(uint64_t a1, int a2, double a3, float a4)
{
  int v4;
  double v7;
  double v8;
  double v9;
  double v10;
  _BOOL8 v11;
  NSObject *v12;
  int v13;
  void **v14;
  uint64_t v16;
  int v17;
  void **v18;
  char *v19;
  void *v20[2];
  char v21;
  void *__p;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  double v28;
  __int16 v29;
  double v30;
  __int16 v31;
  void **v32;
  uint8_t buf[4];
  _BOOL4 v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  double v40;
  __int16 v41;
  double v42;
  __int16 v43;
  void **v44;

  v4 = *(_DWORD *)(a1 + 200);
  if (v4 < 1)
    return 0;
  v7 = vabdd_f64(a3, *(double *)(a1 + 176));
  v8 = (double)v4;
  if (a2)
  {
    v9 = a4 * v8;
    if (v9 > *(double *)&qword_1022FC5A0)
      v10 = v9;
    else
      v10 = *(double *)&qword_1022FC5A0;
  }
  else if (*(double *)&qword_1022FC5A0 < v8)
  {
    v10 = (double)v4;
  }
  else
  {
    v10 = *(double *)&qword_1022FC5A0;
  }
  v11 = v7 >= v10;
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102197380);
  v12 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v13 = *(_DWORD *)(a1 + 200);
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(&__p, a1);
    v14 = (SBYTE1(v28) & 0x80u) == 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 67241475;
    v34 = v7 >= v10;
    v35 = 1026;
    v36 = a2;
    v37 = 1026;
    v38 = v13;
    v39 = 2050;
    v40 = v10;
    v41 = 2050;
    v42 = v7;
    v43 = 2081;
    v44 = v14;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "@TileQueue, hasDataExpired, %{public}d, isLargeConnectivity, %{public}d, fExpirationAge, %{public}d, dataExpirationPeriod, %{public}.1lf, dataAge, %{public}.1lf, tile, %{private}s", buf, 0x32u);
    if (SBYTE1(v28) < 0)
      operator delete(__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197380);
    v16 = qword_1022A0048;
    v17 = *(_DWORD *)(a1 + 200);
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(v20, a1);
    if (v21 >= 0)
      v18 = v20;
    else
      v18 = (void **)v20[0];
    LODWORD(__p) = 67241475;
    HIDWORD(__p) = v7 >= v10;
    v23 = 1026;
    v24 = a2;
    v25 = 1026;
    v26 = v17;
    v27 = 2050;
    v28 = v10;
    v29 = 2050;
    v30 = v7;
    v31 = 2081;
    v32 = v18;
    v19 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 2, "@TileQueue, hasDataExpired, %{public}d, isLargeConnectivity, %{public}d, fExpirationAge, %{public}d, dataExpirationPeriod, %{public}.1lf, dataAge, %{public}.1lf, tile, %{private}s", &__p, 50);
    if (v21 < 0)
      operator delete(v20[0]);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLTileFile::hasDataExpired(CFAbsoluteTime, BOOL, float)", "%s\n", v19);
    if (v19 != (char *)buf)
      free(v19);
  }
  return v11;
}

double sub_100FA0AB0(uint64_t a1, uint64_t a2)
{
  double result;

  result = *(double *)(a2 + 176);
  *(double *)(a1 + 176) = result;
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  return result;
}

uint64_t sub_100FA0AC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v6;
  int v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  NSObject *v12;
  _BYTE *v13;
  _QWORD *v14;
  std::string *v15;
  void *v16;
  NSObject *v17;
  _BYTE *v18;
  uint64_t v19;
  _BYTE *v20;
  char *v21;
  char *v22;
  NSObject *v23;
  _BYTE *v24;
  uint64_t v25;
  const std::string::value_type *v26;
  int v27;
  const std::string::value_type *v28;
  std::string::size_type v29;
  std::string *v30;
  std::string *v31;
  NSObject *v32;
  _BYTE *v33;
  std::string *v34;
  uint64_t v36;
  void **v37;
  _QWORD *v38;
  std::string *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  _BYTE *v43;
  char *v44;
  uint64_t v45;
  _BYTE *v46;
  std::string *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  void *v51[2];
  __int16 v52;
  char v53;
  std::string v54;
  std::string v55;
  _BYTE v56[12];
  char v57;
  _BYTE __p[12];
  __int16 v59;
  _BYTE v60[18];
  _BYTE v61[12];
  __int16 v62;
  _BYTE v63[18];

  v6 = (int *)(a1 + 48);
  sub_100BCC62C(a1 + 48, v61);
  v7 = *(char *)(a2 + 23);
  if (v7 >= 0)
    v8 = (const std::string::value_type *)a2;
  else
    v8 = *(const std::string::value_type **)a2;
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(a2 + 23);
  else
    v9 = *(_QWORD *)(a2 + 8);
  v10 = std::string::insert((std::string *)v61, 0, v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v55.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if ((v63[9] & 0x80000000) != 0)
    operator delete(*(void **)v61);
  sub_100BCCB44(v6, a1 + 208, &v54);
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102197380);
  v12 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(__p, a1);
    v13 = *(_BYTE **)__p;
    if (v60[9] >= 0)
      v13 = __p;
    v14 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v14 = (_QWORD *)*v14;
    v15 = &v54;
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v15 = (std::string *)v54.__r_.__value_.__r.__words[0];
    *(_DWORD *)v61 = 136381187;
    *(_QWORD *)&v61[4] = v13;
    v62 = 2082;
    *(_QWORD *)v63 = v14;
    *(_WORD *)&v63[8] = 2082;
    *(_QWORD *)&v63[10] = v15;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "TileFile, startDownloading, tile, %{private}s, localFilename, %{public}s, tempFilename, %{public}s", v61, 0x20u);
    if ((v60[9] & 0x80000000) != 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(v61, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197380);
    v36 = qword_1022A0048;
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(v51, a1);
    v37 = (void **)v51[0];
    if (v53 >= 0)
      v37 = v51;
    v38 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v38 = (_QWORD *)*v38;
    v39 = &v54;
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v39 = (std::string *)v54.__r_.__value_.__r.__words[0];
    *(_DWORD *)__p = 136381187;
    *(_QWORD *)&__p[4] = v37;
    v59 = 2082;
    *(_QWORD *)v60 = v38;
    *(_WORD *)&v60[8] = 2082;
    *(_QWORD *)&v60[10] = v39;
    _os_log_send_and_compose_impl(2, 0, v61, 1628, &_mh_execute_header, v36, 2, "TileFile, startDownloading, tile, %{private}s, localFilename, %{public}s, tempFilename, %{public}s", __p, 32);
    v41 = v40;
    if (v53 < 0)
      operator delete(v51[0]);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLTileFile::startDownloading(const std::string &, CLFileDownload *)", "%s\n", v41);
    if (v41 != v61)
      free(v41);
  }
  v16 = *(void **)(a1 + 40);
  v51[0] = v16;
  (*(void (**)(void *))(*(_QWORD *)v16 + 16))(v16);
  v52 = 256;
  if (!a3)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197380);
    v23 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(v61, a1);
      v24 = v63[9] >= 0 ? v61 : *(_BYTE **)v61;
      *(_DWORD *)__p = 136380675;
      *(_QWORD *)&__p[4] = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "TileFile, startDownloading, failed to download without a downloadRequest, %{private}s, #CloneMe", __p, 0xCu);
      if ((v63[9] & 0x80000000) != 0)
        operator delete(*(void **)v61);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_49;
    bzero(v61, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197380);
    v42 = qword_1022A0048;
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(__p, a1);
    if (v60[9] >= 0)
      v43 = __p;
    else
      v43 = *(_BYTE **)__p;
    *(_DWORD *)v56 = 136380675;
    *(_QWORD *)&v56[4] = v43;
    LODWORD(v50) = 12;
    _os_log_send_and_compose_impl(2, 0, v61, 1628, &_mh_execute_header, v42, 16, "TileFile, startDownloading, failed to download without a downloadRequest, %{private}s, #CloneMe", v56, v50);
    v22 = v44;
    if ((v60[9] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    goto LABEL_99;
  }
  if (sub_1000782F4(a1))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197380);
    v17 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(v61, a1);
      v18 = v63[9] >= 0 ? v61 : *(_BYTE **)v61;
      *(_DWORD *)__p = 136380675;
      *(_QWORD *)&__p[4] = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "TileFile, startDownloading, tile is already being downloaded, %{private}s, #CloneMe", __p, 0xCu);
      if ((v63[9] & 0x80000000) != 0)
        operator delete(*(void **)v61);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_49;
    bzero(v61, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197380);
    v19 = qword_1022A0048;
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(__p, a1);
    if (v60[9] >= 0)
      v20 = __p;
    else
      v20 = *(_BYTE **)__p;
    *(_DWORD *)v56 = 136380675;
    *(_QWORD *)&v56[4] = v20;
    LODWORD(v50) = 12;
    _os_log_send_and_compose_impl(2, 0, v61, 1628, &_mh_execute_header, v19, 16, "TileFile, startDownloading, tile is already being downloaded, %{private}s, #CloneMe", v56, v50);
    v22 = v21;
    if ((v60[9] & 0x80000000) != 0)
      operator delete(*(void **)__p);
LABEL_99:
    sub_100512490("Generic", 1, 0, 0, "BOOL CLTileFile::startDownloading(const std::string &, CLFileDownload *)", "%s\n", v22);
    if (v22 != v61)
      free(v22);
LABEL_49:
    v25 = 0;
    goto LABEL_75;
  }
  *(_QWORD *)(a1 + 104) = a3;
  (*(void (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3);
  if (*(_BYTE *)(a1 + 144))
  {
    v26 = (const std::string::value_type *)sub_100FA14D0();
    v27 = v26[23];
    if (v27 >= 0)
      v28 = v26;
    else
      v28 = *(const std::string::value_type **)v26;
    if (v27 >= 0)
      v29 = *((unsigned __int8 *)v26 + 23);
    else
      v29 = *((_QWORD *)v26 + 1);
    std::string::append(&v55, v28, v29);
  }
  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v30 = &v55;
  else
    v30 = (std::string *)v55.__r_.__value_.__r.__words[0];
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v31 = &v54;
  else
    v31 = (std::string *)v54.__r_.__value_.__r.__words[0];
  v25 = (*(uint64_t (**)(_QWORD, std::string *, std::string *, void *))(**(_QWORD **)(a1 + 104) + 16))(*(_QWORD *)(a1 + 104), v30, v31, &unk_101C326B8);
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102197380);
  v32 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(__p, a1);
    if (v60[9] >= 0)
      v33 = __p;
    else
      v33 = *(_BYTE **)__p;
    v34 = &v55;
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v34 = (std::string *)v55.__r_.__value_.__r.__words[0];
    *(_DWORD *)v61 = 136381187;
    *(_QWORD *)&v61[4] = v33;
    v62 = 1026;
    *(_DWORD *)v63 = v25;
    *(_WORD *)&v63[4] = 2081;
    *(_QWORD *)&v63[6] = v34;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "TileFile, startDownloading, tile, %{private}s, started, %{public}d, strFileUrl, %{private}s", v61, 0x1Cu);
    if ((v60[9] & 0x80000000) != 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(v61, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197380);
    v45 = qword_1022A0048;
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(v56, a1);
    if (v57 >= 0)
      v46 = v56;
    else
      v46 = *(_BYTE **)v56;
    v47 = &v55;
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v47 = (std::string *)v55.__r_.__value_.__r.__words[0];
    *(_DWORD *)__p = 136381187;
    *(_QWORD *)&__p[4] = v46;
    v59 = 1026;
    *(_DWORD *)v60 = v25;
    *(_WORD *)&v60[4] = 2081;
    *(_QWORD *)&v60[6] = v47;
    LODWORD(v50) = 28;
    _os_log_send_and_compose_impl(2, 0, v61, 1628, &_mh_execute_header, v45, 2, "TileFile, startDownloading, tile, %{private}s, started, %{public}d, strFileUrl, %{private}s", __p, v50);
    v49 = v48;
    if (v57 < 0)
      operator delete(*(void **)v56);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLTileFile::startDownloading(const std::string &, CLFileDownload *)", "%s\n", v49);
    if (v49 != v61)
      free(v49);
  }
LABEL_75:
  (*(void (**)(void *))(*(_QWORD *)v16 + 24))(v16);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  return v25;
}

void sub_100FA1428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  sub_10187E514((uint64_t)&a11);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(a1);
}

_QWORD *sub_100FA14D0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1022FC5D0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1022FC5D0))
  {
    sub_1015A2E04(qword_1022FC5B8, ".gz");
    __cxa_atexit((void (*)(void *))&std::string::~string, qword_1022FC5B8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1022FC5D0);
  }
  return qword_1022FC5B8;
}

void sub_100FA1550(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022FC5D0);
  _Unwind_Resume(a1);
}

BOOL sub_100FA1568(uint64_t a1, unsigned int *a2)
{
  int *v4;
  const void **v5;
  std::error_code *v6;
  double v7;
  const std::__fs::filesystem::path *v8;
  const std::__fs::filesystem::path *v9;
  _BOOL8 v10;
  NSObject *v11;
  std::string *v12;
  _BYTE *v13;
  int v14;
  int *v15;
  char *v16;
  double v17;
  double v18;
  const char *v19;
  unsigned int v20;
  char *v21;
  std::string *v22;
  std::string *v23;
  unsigned int v24;
  NSObject *v25;
  _BYTE *v26;
  std::string *v27;
  NSObject *v28;
  std::string *v29;
  std::string *v30;
  unsigned int v31;
  NSObject *v32;
  std::string *v33;
  std::string *p_p;
  int v35;
  int *v36;
  char *v37;
  std::string *v38;
  NSObject *v39;
  unsigned int v40;
  _BYTE *v41;
  const char *v42;
  uint64_t v44;
  _BYTE *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  unsigned int v49;
  void **v50;
  char *v51;
  char *v52;
  uint64_t v53;
  std::string *v54;
  _BYTE *v55;
  int v56;
  int *v57;
  char *v58;
  const char *v59;
  char *v60;
  std::string *v61;
  std::string *v62;
  unsigned int v63;
  const char *v64;
  char *v65;
  uint64_t v66;
  std::string *v67;
  std::string *v68;
  int v69;
  int *v70;
  char *v71;
  const char *v72;
  char *v73;
  uint64_t v74;
  void *v75[2];
  char v76;
  std::string __p;
  std::string v78;
  _BYTE v79[12];
  __int16 v80;
  _BYTE v81[10];
  _BYTE v82[14];
  _BYTE buf[12];
  __int16 v84;
  _BYTE v85[10];
  _BYTE v86[14];
  _BYTE v87[12];
  char v88;

  *a2 = 0;
  v4 = (int *)(a1 + 48);
  sub_100BCCB44((int *)(a1 + 48), a1 + 208, &v78);
  sub_100BCCB44(v4, a1 + 8, &__p);
  if (*(_BYTE *)(a1 + 144))
  {
    v5 = (const void **)sub_100FA14D0();
    sub_1003625F4((const void **)&v78.__r_.__value_.__l.__data_, v5, (uint64_t)v87);
    v7 = sub_100078B88();
    if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = (const std::__fs::filesystem::path *)&v78;
    else
      v8 = (const std::__fs::filesystem::path *)v78.__r_.__value_.__r.__words[0];
    if (v88 >= 0)
      v9 = (const std::__fs::filesystem::path *)v87;
    else
      v9 = *(const std::__fs::filesystem::path **)v87;
    v10 = sub_100512FE0(v8, v9, v6);
    if (!v10)
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102197380);
      v11 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
      {
        if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v12 = &v78;
        else
          v12 = (std::string *)v78.__r_.__value_.__r.__words[0];
        if (v88 >= 0)
          v13 = v87;
        else
          v13 = *(_BYTE **)v87;
        v14 = *__error();
        v15 = __error();
        v16 = strerror(*v15);
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = v12;
        v84 = 2082;
        *(_QWORD *)v85 = v13;
        *(_WORD *)&v85[8] = 1026;
        *(_DWORD *)v86 = v14;
        *(_WORD *)&v86[4] = 2082;
        *(_QWORD *)&v86[6] = v16;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "TileFile, decompress, failed to move, %{public}s, %{public}s, errno, %{public}d, %{public}s, #CloneMe", buf, 0x26u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102197380);
        v53 = qword_1022A0048;
        if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v54 = &v78;
        else
          v54 = (std::string *)v78.__r_.__value_.__r.__words[0];
        if (v88 >= 0)
          v55 = v87;
        else
          v55 = *(_BYTE **)v87;
        v56 = *__error();
        v57 = __error();
        v58 = strerror(*v57);
        *(_DWORD *)v79 = 136446978;
        *(_QWORD *)&v79[4] = v54;
        v80 = 2082;
        *(_QWORD *)v81 = v55;
        *(_WORD *)&v81[8] = 1026;
        *(_DWORD *)v82 = v56;
        *(_WORD *)&v82[4] = 2082;
        *(_QWORD *)&v82[6] = v58;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v53, 16, "TileFile, decompress, failed to move, %{public}s, %{public}s, errno, %{public}d, %{public}s, #CloneMe", v79, 38);
        v60 = (char *)v59;
        sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLTileFile::decompress(unsigned int &)", "%s\n", v59);
        if (v60 != buf)
          free(v60);
      }
    }
    v17 = sub_100078B88();
    if (v10)
    {
      v18 = v17;
      if (v88 >= 0)
        v19 = v87;
      else
        v19 = *(const char **)v87;
      v20 = sub_100068A38(v19);
      *a2 = v20;
      if (v20)
      {
        if (v88 >= 0)
          v21 = v87;
        else
          v21 = *(char **)v87;
        if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v22 = &v78;
        else
          v22 = (std::string *)v78.__r_.__value_.__r.__words[0];
        v10 = sub_100513F8C(v21, (const char *)v22);
        if (v10)
        {
          if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v23 = &v78;
          else
            v23 = (std::string *)v78.__r_.__value_.__r.__words[0];
          v24 = sub_100068A38((const char *)v23);
        }
        else
        {
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_102197380);
          v32 = qword_1022A0048;
          if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
          {
            if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v33 = &v78;
            else
              v33 = (std::string *)v78.__r_.__value_.__r.__words[0];
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_p = &__p;
            else
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            v35 = *__error();
            v36 = __error();
            v37 = strerror(*v36);
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = v33;
            v84 = 2082;
            *(_QWORD *)v85 = p_p;
            *(_WORD *)&v85[8] = 1026;
            *(_DWORD *)v86 = v35;
            *(_WORD *)&v86[4] = 2082;
            *(_QWORD *)&v86[6] = v37;
            _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "TileFile, decompress, from, %{public}s, to, %{public}s, failed, errno, %{public}d, %{public}s, #CloneMe", buf, 0x26u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0040 != -1)
              dispatch_once(&qword_1022A0040, &stru_102197380);
            v66 = qword_1022A0048;
            if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v67 = &v78;
            else
              v67 = (std::string *)v78.__r_.__value_.__r.__words[0];
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v68 = &__p;
            else
              v68 = (std::string *)__p.__r_.__value_.__r.__words[0];
            v69 = *__error();
            v70 = __error();
            v71 = strerror(*v70);
            *(_DWORD *)v79 = 136446978;
            *(_QWORD *)&v79[4] = v67;
            v80 = 2082;
            *(_QWORD *)v81 = v68;
            *(_WORD *)&v81[8] = 1026;
            *(_DWORD *)v82 = v69;
            *(_WORD *)&v82[4] = 2082;
            *(_QWORD *)&v82[6] = v71;
            LODWORD(v74) = 38;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v66, 16, "TileFile, decompress, from, %{public}s, to, %{public}s, failed, errno, %{public}d, %{public}s, #CloneMe", v79, v74);
            v73 = (char *)v72;
            sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLTileFile::decompress(unsigned int &)", "%s\n", v72);
            if (v73 != buf)
              free(v73);
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v38 = &__p;
          else
            v38 = (std::string *)__p.__r_.__value_.__r.__words[0];
          sub_1005164F0((const char *)v38);
          v24 = 0;
        }
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102197380);
        v39 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
        {
          v40 = *a2;
          (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(v79, a1);
          v41 = v81[9] >= 0 ? v79 : *(_BYTE **)v79;
          *(_DWORD *)buf = 134349827;
          *(double *)&buf[4] = v18 - v7;
          v84 = 1026;
          *(_DWORD *)v85 = v40;
          *(_WORD *)&v85[4] = 1026;
          *(_DWORD *)&v85[6] = v24;
          *(_WORD *)v86 = 2081;
          *(_QWORD *)&v86[2] = v41;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "TileFile, decompress, in, %{public}.6lf, seconds, size, %{public}u, to, %{public}u, tile, %{private}s", buf, 0x22u);
          if ((v81[9] & 0x80000000) != 0)
            operator delete(*(void **)v79);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_102197380);
          v48 = qword_1022A0048;
          v49 = *a2;
          (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(v75, a1);
          if (v76 >= 0)
            v50 = v75;
          else
            v50 = (void **)v75[0];
          *(_DWORD *)v79 = 134349827;
          *(double *)&v79[4] = v18 - v7;
          v80 = 1026;
          *(_DWORD *)v81 = v49;
          *(_WORD *)&v81[4] = 1026;
          *(_DWORD *)&v81[6] = v24;
          *(_WORD *)v82 = 2081;
          *(_QWORD *)&v82[2] = v50;
          LODWORD(v74) = 34;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v48, 2, "TileFile, decompress, in, %{public}.6lf, seconds, size, %{public}u, to, %{public}u, tile, %{private}s", v79, v74);
          v52 = v51;
          if (v76 < 0)
            operator delete(v75[0]);
          sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLTileFile::decompress(unsigned int &)", "%s\n", v52);
          if (v52 != buf)
            free(v52);
        }
      }
      else
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102197380);
        v28 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
        {
          v29 = &v78;
          if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v29 = (std::string *)v78.__r_.__value_.__r.__words[0];
          v30 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
          v31 = *a2;
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = v29;
          v84 = 2082;
          *(_QWORD *)v85 = v30;
          *(_WORD *)&v85[8] = 1026;
          *(_DWORD *)v86 = v31;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "TileFile, decompress, from, %{public}s, to, %{public}s, failed, %{public}u byte file, #CloneMe", buf, 0x1Cu);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_102197380);
          v61 = &v78;
          if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v61 = (std::string *)v78.__r_.__value_.__r.__words[0];
          v62 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v62 = (std::string *)__p.__r_.__value_.__r.__words[0];
          v63 = *a2;
          *(_DWORD *)v79 = 136446722;
          *(_QWORD *)&v79[4] = v61;
          v80 = 2082;
          *(_QWORD *)v81 = v62;
          *(_WORD *)&v81[8] = 1026;
          *(_DWORD *)v82 = v63;
          LODWORD(v74) = 28;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "TileFile, decompress, from, %{public}s, to, %{public}s, failed, %{public}u byte file, #CloneMe", v79, v74);
          v65 = (char *)v64;
          sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLTileFile::decompress(unsigned int &)", "%s\n", v64);
          if (v65 != buf)
            free(v65);
        }
        v10 = 0;
      }
    }
    if (v88 >= 0)
      v42 = v87;
    else
      v42 = *(const char **)v87;
    sub_1005164F0(v42);
    if (v88 < 0)
      operator delete(*(void **)v87);
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197380);
    v25 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(buf, a1);
      v26 = v85[9] >= 0 ? buf : *(_BYTE **)buf;
      *(_DWORD *)v79 = 136380675;
      *(_QWORD *)&v79[4] = v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "TileFile, decompress, file is not compressed, %{private}s", v79, 0xCu);
      if ((v85[9] & 0x80000000) != 0)
        operator delete(*(void **)buf);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102197380);
      v44 = qword_1022A0048;
      (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(v79, a1);
      if (v81[9] >= 0)
        v45 = v79;
      else
        v45 = *(_BYTE **)v79;
      *(_DWORD *)v87 = 136380675;
      *(_QWORD *)&v87[4] = v45;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v44, 2, "TileFile, decompress, file is not compressed, %{private}s", v87, 12);
      v47 = v46;
      if ((v81[9] & 0x80000000) != 0)
        operator delete(*(void **)v79);
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLTileFile::decompress(unsigned int &)", "%s\n", v47);
      if (v47 != buf)
        free(v47);
    }
    if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = &v78;
    else
      v27 = (std::string *)v78.__r_.__value_.__r.__words[0];
    *a2 = sub_100068A38((const char *)v27);
    v10 = 1;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v78.__r_.__value_.__l.__data_);
  return v10;
}

void sub_100FA2114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (*(char *)(v26 - 121) < 0)
    operator delete(*(void **)(v26 - 144));
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100FA21A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  std::string *v19;
  void *v20;
  char v21;
  NSObject *v22;
  int v23;
  std::string::size_type v24;
  std::string *v25;
  std::string *v26;
  const char *p_p;
  uint64_t v28;
  int v29;
  std::string::size_type v30;
  std::string *v31;
  _BYTE *v32;
  std::string *v33;
  std::string *v34;
  NSObject *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  std::string *v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  char *__s;
  std::string v48;
  std::string v49;
  void *__p;
  __int128 v51;
  std::string v52;
  _BYTE v53[22];
  unsigned __int8 v54;
  _BYTE buf[22];
  unsigned __int8 v56;
  _QWORD v57[2];
  _BYTE v58[12];
  __int16 v59;
  _BYTE v60[10];
  _QWORD v61[10];
  char v62;
  uint64_t v63;

  v3 = sub_100BCCB3C((int *)(a1 + 48));
  if (*(char *)(v3 + 23) >= 0)
    v4 = (char *)v3;
  else
    v4 = *(char **)v3;
  __s = v4;
  __p = 0;
  v51 = 0uLL;
  memset(&v49, 0, sizeof(v49));
  v6 = &qword_1022A0000;
  do
  {
    sub_100263E50((uint64_t)v58);
    if (SHIBYTE(v51) < 0)
    {
      *(_BYTE *)__p = 0;
      *(_QWORD *)&v51 = 0;
    }
    else
    {
      LOBYTE(__p) = 0;
      HIBYTE(v51) = 0;
    }
    v7 = *(char *)(a2 + 23);
    if (v7 >= 0)
      v8 = a2;
    else
      v8 = *(_QWORD *)a2;
    if (v7 >= 0)
      v9 = *(unsigned __int8 *)(a2 + 23);
    else
      v9 = *(_QWORD *)(a2 + 8);
    v10 = sub_100263F7C(&v60[2], v8, v9);
    v52.__r_.__value_.__s.__data_[0] = 48;
    v11 = sub_100B06348(v10, (char *)&v52);
    *(_QWORD *)((char *)v11 + *(_QWORD *)(*v11 - 24) + 24) = 8;
    v12 = dword_1023093D8++;
    std::ostream::operator<<(v11, v12);
    sub_1015A2E04(&v48, __s);
    sub_1015A2E04(buf, "/");
    if ((v56 & 0x80u) == 0)
      v13 = buf;
    else
      v13 = *(const std::string::value_type **)buf;
    if ((v56 & 0x80u) == 0)
      v14 = v56;
    else
      v14 = *(_QWORD *)&buf[8];
    v15 = std::string::append(&v48, v13, v14);
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    std::stringbuf::str(v53, v61);
    if ((v54 & 0x80u) == 0)
      v17 = v53;
    else
      v17 = *(const std::string::value_type **)v53;
    if ((v54 & 0x80u) == 0)
      v18 = v54;
    else
      v18 = *(_QWORD *)&v53[8];
    v19 = std::string::append(&v52, v17, v18);
    v20 = (void *)v19->__r_.__value_.__r.__words[0];
    v57[0] = v19->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v57 + 7) = *(std::string::size_type *)((char *)&v19->__r_.__value_.__r.__words[1] + 7);
    v21 = HIBYTE(v19->__r_.__value_.__r.__words[2]);
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v51) < 0)
      operator delete(__p);
    __p = v20;
    *(_QWORD *)&v51 = v57[0];
    *(_QWORD *)((char *)&v51 + 7) = *(_QWORD *)((char *)v57 + 7);
    HIBYTE(v51) = v21;
    if ((char)v54 < 0)
      operator delete(*(void **)v53);
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v52.__r_.__value_.__l.__data_);
    if ((char)v56 < 0)
      operator delete(*(void **)buf);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
    dword_1023093D8 %= 0x989680u;
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197380);
    v22 = v6[9];
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      std::stringbuf::str(&v52, v61);
      v23 = SHIBYTE(v52.__r_.__value_.__r.__words[2]);
      v24 = v52.__r_.__value_.__r.__words[0];
      (*(void (**)(std::string *__return_ptr))(*(_QWORD *)a1 + 16))(&v48);
      v25 = &v52;
      if (v23 < 0)
        v25 = (std::string *)v24;
      v26 = &v48;
      if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v26 = (std::string *)v48.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136446467;
      *(_QWORD *)&buf[4] = v25;
      *(_WORD *)&buf[12] = 2081;
      *(_QWORD *)&buf[14] = v26;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "TileFile, generateUniqueFileName, trying, %{public}s, tile, %{private}s", buf, 0x16u);
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v48.__r_.__value_.__l.__data_);
      v6 = &qword_1022A0000;
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v52.__r_.__value_.__l.__data_);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&v52, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102197380);
      v28 = v6[9];
      std::stringbuf::str(&v48, v61);
      v29 = SHIBYTE(v48.__r_.__value_.__r.__words[2]);
      v30 = v48.__r_.__value_.__r.__words[0];
      (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)a1 + 16))(buf);
      v31 = &v48;
      if (v29 < 0)
        v31 = (std::string *)v30;
      v32 = buf;
      if ((v56 & 0x80u) != 0)
        v32 = *(_BYTE **)buf;
      *(_DWORD *)v53 = 136446467;
      *(_QWORD *)&v53[4] = v31;
      *(_WORD *)&v53[12] = 2081;
      *(_QWORD *)&v53[14] = v32;
      LODWORD(v43) = 22;
      v33 = (std::string *)_os_log_send_and_compose_impl(2, 0, &v52, 1628, &_mh_execute_header, v28, 2, "TileFile, generateUniqueFileName, trying, %{public}s, tile, %{private}s", v53, v43);
      if ((char)v56 < 0)
        operator delete(*(void **)buf);
      v6 = &qword_1022A0000;
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v48.__r_.__value_.__l.__data_);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLTileFile::generateUniqueFileName(const std::string &)", "%s\n", (const char *)v33);
      if (v33 != &v52)
        free(v33);
    }
    std::stringbuf::str(&v52, v61);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v49.__r_.__value_.__l.__data_);
    v49 = v52;
    *(_QWORD *)v58 = v5;
    *(_QWORD *)&v58[*(_QWORD *)(v5 - 24)] = v46;
    *(_QWORD *)&v60[2] = v45;
    if (v62 < 0)
      operator delete((void *)v61[8]);
    std::streambuf::~streambuf(v61);
    std::ios::~ios(&v63);
    if (v51 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
  }
  while (sub_1000B78B0(p_p));
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v34 = &v49;
  else
    v34 = (std::string *)v49.__r_.__value_.__r.__words[0];
  sub_100FA29E4(a1, (const std::string::value_type *)v34);
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102197380);
  v35 = v6[9];
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
  {
    v36 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v36 = (_QWORD *)*v36;
    v37 = (_QWORD *)(a1 + 208);
    if (*(char *)(a1 + 231) < 0)
      v37 = (_QWORD *)*v37;
    LODWORD(v52.__r_.__value_.__l.__data_) = 136446466;
    *(std::string::size_type *)((char *)v52.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
    WORD2(v52.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&v52.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v37;
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "TileFile, generateUniqueFileName, end, localFilename, %{public}s, temp, %{public}s", (uint8_t *)&v52, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&v52, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197380);
    v39 = v6[9];
    v40 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v40 = (_QWORD *)*v40;
    v41 = (_QWORD *)(a1 + 208);
    if (*(char *)(a1 + 231) < 0)
      v41 = (_QWORD *)*v41;
    *(_DWORD *)v58 = 136446466;
    *(_QWORD *)&v58[4] = v40;
    v59 = 2082;
    *(_QWORD *)v60 = v41;
    LODWORD(v43) = 22;
    v42 = (std::string *)_os_log_send_and_compose_impl(2, 0, &v52, 1628, &_mh_execute_header, v39, 2, "TileFile, generateUniqueFileName, end, localFilename, %{public}s, temp, %{public}s", v58, v43);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLTileFile::generateUniqueFileName(const std::string &)", "%s\n", (const char *)v42);
    if (v42 != &v52)
      free(v42);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (SHIBYTE(v51) < 0)
    operator delete(__p);
  return 1;
}

void sub_100FA2908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a28 < 0)
    operator delete(__p);
  if (a34 < 0)
    operator delete(a29);
  _Unwind_Resume(a1);
}

void sub_100FA29E4(uint64_t a1, const std::string::value_type *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  NSObject *v7;
  _QWORD *v8;
  void *v9;
  char *v10;
  int v11;
  _QWORD *v12;
  __int16 v13;
  void **v14;
  _BYTE buf[1632];

  v4 = (_QWORD *)(a1 + 8);
  std::string::assign((std::string *)(a1 + 8), a2);
  v5 = sub_100FA4DF4();
  std::operator+<char>(buf, a2, v5);
  v6 = (void **)(a1 + 208);
  if (*(char *)(a1 + 231) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = *(_OWORD *)buf;
  *(_QWORD *)(a1 + 224) = *(_QWORD *)&buf[16];
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102197380);
  v7 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v8 = v4;
    if (*(char *)(a1 + 31) < 0)
      v8 = (_QWORD *)*v4;
    v9 = (void *)(a1 + 208);
    if (*(char *)(a1 + 231) < 0)
      v9 = *v6;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v8;
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TileFile, setLocalfilename, localFilename, %{public}s, tempFilename, %{public}s", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197380);
    if (*(char *)(a1 + 31) < 0)
      v4 = (_QWORD *)*v4;
    if (*(char *)(a1 + 231) < 0)
      v6 = (void **)*v6;
    v11 = 136446466;
    v12 = v4;
    v13 = 2082;
    v14 = v6;
    v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "TileFile, setLocalfilename, localFilename, %{public}s, tempFilename, %{public}s", &v11, 22);
    sub_100512490("Generic", 1, 0, 2, "void CLTileFile::setLocalfilename(const char *)", "%s\n", v10);
    if (v10 != buf)
      free(v10);
  }
}

void sub_100FA2C30(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  sub_100BCCB44((int *)(a1 + 48), a1 + 8, a2);
}

BOOL sub_100FA2C40(uint64_t a1)
{
  std::string *p_p;
  _BOOL8 v2;
  std::string __p;

  sub_100BCCB44((int *)(a1 + 48), a1 + 8, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__p.__r_.__value_.__l.__size_)
    {
      v2 = 0;
LABEL_10:
      operator delete(__p.__r_.__value_.__l.__data_);
      return v2;
    }
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
      return 0;
    p_p = &__p;
  }
  v2 = sub_1000B78B0((const char *)p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_10;
  return v2;
}

void sub_100FA2CC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100FA2CE0(uint64_t a1)
{
  NSObject *v1;
  std::string *p_p;
  std::string *v3;
  const void **v4;
  const char *v5;
  std::string *v6;
  const char *v7;
  char *v8;
  std::string __p;
  int v10;
  std::string *v11;
  _BYTE buf[12];
  char v13;

  sub_100BCCB44((int *)(a1 + 48), a1 + 8, &__p);
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102197380);
  v1 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = p_p;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "TileFile, deleteFile, unlink, %{public}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197380);
    v6 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v6 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v10 = 136446210;
    v11 = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "TileFile, deleteFile, unlink, %{public}s", &v10, 12);
    v8 = (char *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLTileFile::deleteFile()", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v3 = &__p;
  else
    v3 = (std::string *)__p.__r_.__value_.__r.__words[0];
  sub_1005164F0((const char *)v3);
  v4 = (const void **)sub_100FA2F60();
  sub_1003625F4((const void **)&__p.__r_.__value_.__l.__data_, v4, (uint64_t)buf);
  if (v13 >= 0)
    v5 = buf;
  else
    v5 = *(const char **)buf;
  sub_1005164F0(v5);
  if (v13 < 0)
    operator delete(*(void **)buf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_100FA2F1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100FA2F60()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1022FC5F0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1022FC5F0))
  {
    sub_1015A2E04(qword_1022FC5D8, ".plist");
    __cxa_atexit((void (*)(void *))&std::string::~string, qword_1022FC5D8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1022FC5F0);
  }
  return qword_1022FC5D8;
}

void sub_100FA2FE0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022FC5F0);
  _Unwind_Resume(a1);
}

void sub_100FA2FF8(uint64_t a1)
{
  NSObject *v1;
  std::string *p_p;
  std::string *v3;
  std::string *v4;
  const char *v5;
  uint8_t *v6;
  std::string __p;
  int v8;
  std::string *v9;
  uint8_t buf[4];
  std::string *v11;

  sub_100BCCB44((int *)(a1 + 48), a1 + 208, &__p);
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102197380);
  v1 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136446210;
    v11 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "TileFile, deleteTempFile, unlink, %{public}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197380);
    v4 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v4 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v8 = 136446210;
    v9 = v4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "TileFile, deleteTempFile, unlink, %{public}s", &v8, 12);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLTileFile::deleteTempFile()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v3 = &__p;
  else
    v3 = (std::string *)__p.__r_.__value_.__r.__words[0];
  sub_1005164F0((const char *)v3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_100FA31F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_100FA3220(uint64_t a1, int a2, int a3, double a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t *v9;
  NSObject *v10;
  int v11;
  _BYTE *v12;
  NSObject *v13;
  std::string *v14;
  std::string *v15;
  std::string *v16;
  int v17;
  _BOOL4 v18;
  NSObject *v19;
  _BYTE *v20;
  std::string *v21;
  __n128 v22;
  NSObject *v23;
  char v24;
  int v25;
  int v26;
  _BYTE *v27;
  std::error_code *v28;
  const std::__fs::filesystem::path *v29;
  const std::__fs::filesystem::path *v30;
  _BOOL4 v31;
  _BOOL8 v32;
  NSObject *v33;
  char v34;
  std::string *v35;
  std::string *v36;
  int *v37;
  char *v38;
  std::string *v39;
  std::string *v40;
  NSObject *v41;
  int v42;
  int v43;
  unsigned int v44;
  const char *v45;
  std::string *v46;
  int v48;
  uint64_t v49;
  _BYTE *v50;
  char *v51;
  char *v52;
  std::string *v53;
  std::string *v54;
  const char *v55;
  char *v56;
  char v57;
  uint64_t v58;
  int v59;
  int v60;
  void **v61;
  char *v62;
  char *v63;
  uint64_t v64;
  _BYTE *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  int v69;
  int v70;
  unsigned int v71;
  const char *v72;
  const char *v73;
  char *v74;
  char v75;
  uint64_t v76;
  std::string *v77;
  std::string *v78;
  int v79;
  int *v80;
  char *v81;
  const char *v82;
  char *v83;
  uint64_t v84;
  unsigned int *v85;
  std::string *v86;
  void *v87[2];
  char v88;
  std::string v89;
  std::string v90;
  uint64_t v91;
  __int16 v92;
  _BYTE __p[38];
  _BYTE v94[12];
  uint64_t v95;
  _BYTE buf[1634];

  LODWORD(v5) = a3;
  v8 = *(_QWORD *)(a1 + 40);
  v91 = v8;
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  v92 = 256;
  sub_100BCCB44((int *)(a1 + 48), a1 + 208, &v90);
  sub_100BCCB44((int *)(a1 + 48), a1 + 8, &v89);
  v85 = (unsigned int *)(a1 + 48);
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102197380);
  v9 = &qword_1022A0000;
  v10 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v11 = v5;
    v5 = *(_QWORD *)(a1 + 104);
    sub_100FA4168((double *)(a1 + 112), __p);
    if (__p[23] >= 0)
      v12 = __p;
    else
      v12 = *(_BYTE **)__p;
    *(_DWORD *)buf = 67240962;
    *(_DWORD *)&buf[4] = a2;
    *(_WORD *)&buf[8] = 2050;
    *(_QWORD *)&buf[10] = v5;
    *(_WORD *)&buf[18] = 1026;
    LODWORD(v5) = v11;
    *(_DWORD *)&buf[20] = v11;
    *(_WORD *)&buf[24] = 2082;
    *(_QWORD *)&buf[26] = v12;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "TileFile, onDownloadCompleted, success, %{public}d, fDownloadRequest, %{public}p, tileDoesNotExist, %{public}d, details, %{public}s", buf, 0x22u);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    v9 = &qword_1022A0000;
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    v48 = v5;
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197380);
    v49 = qword_1022A0048;
    v5 = *(_QWORD *)(a1 + 104);
    sub_100FA4168((double *)(a1 + 112), v94);
    if (v95 >= 0)
      v50 = v94;
    else
      v50 = *(_BYTE **)v94;
    *(_DWORD *)__p = 67240962;
    *(_DWORD *)&__p[4] = a2;
    *(_WORD *)&__p[8] = 2050;
    *(_QWORD *)&__p[10] = v5;
    *(_WORD *)&__p[18] = 1026;
    LOBYTE(v5) = v48;
    *(_DWORD *)&__p[20] = v48;
    *(_WORD *)&__p[24] = 2082;
    *(_QWORD *)&__p[26] = v50;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v49, 2, "TileFile, onDownloadCompleted, success, %{public}d, fDownloadRequest, %{public}p, tileDoesNotExist, %{public}d, details, %{public}s", __p, 34);
    v52 = v51;
    if (SHIBYTE(v95) < 0)
      operator delete(*(void **)v94);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLTileFile::onDownloadCompleted(BOOL, BOOL, CFAbsoluteTime)", "%s\n", v52);
    if (v52 != buf)
      free(v52);
  }
  *(double *)(a1 + 160) = a4;
  *(double *)(a1 + 232) = a4;
  *(_QWORD *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 168) = a2;
  *(_BYTE *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 104) = 0;
  if (!a2)
  {
    if ((v5 & 1) == 0)
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102197380);
      v19 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(buf, a1);
        v20 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
        *(_DWORD *)__p = 136380675;
        *(_QWORD *)&__p[4] = v20;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "TileFile, tile, %{private}s, download failed, #CloneMe", __p, 0xCu);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102197380);
        v64 = qword_1022A0048;
        (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(__p, a1);
        if (__p[23] >= 0)
          v65 = __p;
        else
          v65 = *(_BYTE **)__p;
        *(_DWORD *)v94 = 136380675;
        *(_QWORD *)&v94[4] = v65;
        LODWORD(v84) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v64, 0, "TileFile, tile, %{private}s, download failed, #CloneMe", v94, v84);
        v67 = v66;
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        sub_100512490("Generic", 1, 0, 2, "BOOL CLTileFile::onDownloadCompleted(BOOL, BOOL, CFAbsoluteTime)", "%s\n", v67);
        if (v67 != buf)
          free(v67);
      }
    }
    if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v21 = &v90;
    else
      v21 = (std::string *)v90.__r_.__value_.__r.__words[0];
    sub_1005164F0((const char *)v21);
    goto LABEL_96;
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102197380);
  v13 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v14 = &v90;
    if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v14 = (std::string *)v90.__r_.__value_.__r.__words[0];
    v15 = &v89;
    if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v15 = (std::string *)v89.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v14;
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v15;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "TileFile, copy from, %{public}s, to, %{public}s, start", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197380);
    v53 = &v90;
    if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v53 = (std::string *)v90.__r_.__value_.__r.__words[0];
    v54 = &v89;
    if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v54 = (std::string *)v89.__r_.__value_.__r.__words[0];
    *(_DWORD *)__p = 136446466;
    *(_QWORD *)&__p[4] = v53;
    *(_WORD *)&__p[12] = 2082;
    *(_QWORD *)&__p[14] = v54;
    LODWORD(v84) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "TileFile, copy from, %{public}s, to, %{public}s, start", __p, v84);
    v56 = (char *)v55;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLTileFile::onDownloadCompleted(BOOL, BOOL, CFAbsoluteTime)", "%s\n", v55);
    if (v56 != buf)
      free(v56);
  }
  *(_QWORD *)v94 = "";
  *(_WORD *)&v94[8] = 0;
  v95 = nullsub_34(0);
  *(_QWORD *)v94 = "CLTileFile::onDownloadCompleted";
  *(_WORD *)&v94[8] = 1;
  if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = &v90;
  else
    v16 = (std::string *)v90.__r_.__value_.__r.__words[0];
  sub_1015A2E04(buf, (char *)v16);
  sub_100FA43A0((_QWORD *)a1, (uint64_t)buf, (uint64_t)v94);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  v17 = *(_DWORD *)(a1 + 184);
  if (v17)
    v18 = v17 >= (*(int (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  else
    v18 = 1;
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102197380);
  v23 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v24 = v5;
    v25 = *(_DWORD *)(a1 + 184);
    v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(__p, a1);
    if (__p[23] >= 0)
      v27 = __p;
    else
      v27 = *(_BYTE **)__p;
    *(_DWORD *)buf = 67240963;
    *(_DWORD *)&buf[4] = v25;
    *(_WORD *)&buf[8] = 1026;
    *(_DWORD *)&buf[10] = v26;
    *(_WORD *)&buf[14] = 1026;
    *(_DWORD *)&buf[16] = v18;
    *(_WORD *)&buf[20] = 2081;
    *(_QWORD *)&buf[22] = v27;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "TileFile, onDownloadCompleted, tile version, %{public}d, min version, %{public}d, isVersionOk, %{public}d, tile, %{private}s", buf, 0x1Eu);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    LOBYTE(v5) = v24;
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    v57 = v5;
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197380);
    v58 = qword_1022A0048;
    v59 = *(_DWORD *)(a1 + 184);
    v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(v87, a1);
    if (v88 >= 0)
      v61 = v87;
    else
      v61 = (void **)v87[0];
    *(_DWORD *)__p = 67240963;
    *(_DWORD *)&__p[4] = v59;
    *(_WORD *)&__p[8] = 1026;
    *(_DWORD *)&__p[10] = v60;
    *(_WORD *)&__p[14] = 1026;
    *(_DWORD *)&__p[16] = v18;
    *(_WORD *)&__p[20] = 2081;
    *(_QWORD *)&__p[22] = v61;
    LODWORD(v84) = 30;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v58, 2, "TileFile, onDownloadCompleted, tile version, %{public}d, min version, %{public}d, isVersionOk, %{public}d, tile, %{private}s", __p, v84);
    v63 = v62;
    if (v88 < 0)
      operator delete(v87[0]);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLTileFile::onDownloadCompleted(BOOL, BOOL, CFAbsoluteTime)", "%s\n", v63);
    v9 = &qword_1022A0000;
    LOBYTE(v5) = v57;
    if (v63 != buf)
      free(v63);
  }
  if (!v18)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197380);
    v41 = v9[9];
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
    {
      v42 = *(_DWORD *)(a1 + 184);
      v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
      v44 = *v85;
      v45 = sub_1001CC818(*v85);
      *(_DWORD *)buf = 67241218;
      *(_DWORD *)&buf[4] = v42;
      *(_WORD *)&buf[8] = 1026;
      *(_DWORD *)&buf[10] = v43;
      *(_WORD *)&buf[14] = 1026;
      *(_DWORD *)&buf[16] = 0;
      *(_WORD *)&buf[20] = 1026;
      *(_DWORD *)&buf[22] = v44;
      *(_WORD *)&buf[26] = 2082;
      *(_QWORD *)&buf[28] = v45;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "TileFile, onDownloadCompleted, tile version, %{public}d, min version, %{public}d, isVersionOk, %{public}d, type, %{public}d, %{public}s, #CloneMe", buf, 0x24u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102197380);
      v68 = v9[9];
      v69 = *(_DWORD *)(a1 + 184);
      v70 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
      v71 = *v85;
      v72 = sub_1001CC818(*v85);
      *(_DWORD *)__p = 67241218;
      *(_DWORD *)&__p[4] = v69;
      *(_WORD *)&__p[8] = 1026;
      *(_DWORD *)&__p[10] = v70;
      *(_WORD *)&__p[14] = 1026;
      *(_DWORD *)&__p[16] = 0;
      *(_WORD *)&__p[20] = 1026;
      *(_DWORD *)&__p[22] = v71;
      *(_WORD *)&__p[26] = 2082;
      *(_QWORD *)&__p[28] = v72;
      LODWORD(v84) = 36;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v68, 16, "TileFile, onDownloadCompleted, tile version, %{public}d, min version, %{public}d, isVersionOk, %{public}d, type, %{public}d, %{public}s, #CloneMe", __p, v84);
      v74 = (char *)v73;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLTileFile::onDownloadCompleted(BOOL, BOOL, CFAbsoluteTime)", "%s\n", v73);
      if (v74 != buf)
        free(v74);
    }
    if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v46 = &v90;
    else
      v46 = (std::string *)v90.__r_.__value_.__r.__words[0];
    sub_1005164F0((const char *)v46);
LABEL_96:
    v32 = 0;
    goto LABEL_97;
  }
  if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v29 = (const std::__fs::filesystem::path *)&v90;
  else
    v29 = (const std::__fs::filesystem::path *)v90.__r_.__value_.__r.__words[0];
  if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v30 = (const std::__fs::filesystem::path *)&v89;
  else
    v30 = (const std::__fs::filesystem::path *)v89.__r_.__value_.__r.__words[0];
  v31 = sub_100512FE0(v29, v30, v28);
  v32 = v31;
  if (!v31)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197380);
    v33 = v9[9];
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      v34 = v5;
      v35 = &v90;
      if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v35 = (std::string *)v90.__r_.__value_.__r.__words[0];
      v86 = v35;
      if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = &v89;
      else
        v36 = (std::string *)v89.__r_.__value_.__r.__words[0];
      LODWORD(v5) = *__error();
      v37 = __error();
      v38 = strerror(*v37);
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = v86;
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v36;
      *(_WORD *)&buf[22] = 1026;
      *(_DWORD *)&buf[24] = v5;
      *(_WORD *)&buf[28] = 2082;
      *(_QWORD *)&buf[30] = v38;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "TileFile, failed to move from, %{public}s, to, %{public}s, errno, %{public}d, %{public}s, #CloneMe", buf, 0x26u);
      LOBYTE(v5) = v34;
    }
    if (sub_1001BFF7C(115, 0))
    {
      v75 = v5;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102197380);
      v76 = v9[9];
      if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v77 = &v90;
      else
        v77 = (std::string *)v90.__r_.__value_.__r.__words[0];
      if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v78 = &v89;
      else
        v78 = (std::string *)v89.__r_.__value_.__r.__words[0];
      v79 = *__error();
      v80 = __error();
      v81 = strerror(*v80);
      *(_DWORD *)__p = 136446978;
      *(_QWORD *)&__p[4] = v77;
      *(_WORD *)&__p[12] = 2082;
      *(_QWORD *)&__p[14] = v78;
      *(_WORD *)&__p[22] = 1026;
      *(_DWORD *)&__p[24] = v79;
      *(_WORD *)&__p[28] = 2082;
      *(_QWORD *)&__p[30] = v81;
      LODWORD(v84) = 38;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v76, 16, "TileFile, failed to move from, %{public}s, to, %{public}s, errno, %{public}d, %{public}s, #CloneMe", __p, v84);
      v83 = (char *)v82;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLTileFile::onDownloadCompleted(BOOL, BOOL, CFAbsoluteTime)", "%s\n", v82);
      if (v83 != buf)
        free(v83);
      LOBYTE(v5) = v75;
    }
    if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v39 = &v89;
    else
      v39 = (std::string *)v89.__r_.__value_.__r.__words[0];
    sub_1005164F0((const char *)v39);
  }
  if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v40 = &v90;
  else
    v40 = (std::string *)v90.__r_.__value_.__r.__words[0];
  sub_1005164F0((const char *)v40);
  if (*(double *)(a1 + 176) <= 0.0)
    *(double *)(a1 + 176) = a4;
  if (*(int *)(a1 + 200) <= 0)
    *(_DWORD *)(a1 + 200) = 1209600;
  v22.n128_u64[0] = qword_1022FC598;
  if (*(double *)&qword_1022FC598 >= 0.0)
    *(_DWORD *)(a1 + 200) = (int)*(double *)&qword_1022FC598;
  if (v31 && (v5 & 1) == 0)
    sub_100FA4BB8(a1);
LABEL_97:
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v89.__r_.__value_.__l.__data_);
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v90.__r_.__value_.__l.__data_);
  (*(void (**)(uint64_t, __n128))(*(_QWORD *)v8 + 24))(v8, v22);
  return v32;
}

void sub_100FA40AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  sub_10187E514((uint64_t)&a28);
  _Unwind_Resume(a1);
}

uint64_t sub_100FA4168@<X0>(double *a1@<X0>, _QWORD *a2@<X8>)
{
  double Current;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD v26[2];
  uint64_t v27;
  _QWORD v28[10];
  char v29;
  uint64_t v30;

  sub_100263E50((uint64_t)v26);
  Current = CFAbsoluteTimeGetCurrent();
  v5 = sub_100263F7C(&v27, (uint64_t)"tileFileDownloadDetails", 23);
  v6 = sub_100263F7C(v5, (uint64_t)", cellIfCurrent, ", 17);
  v7 = (_QWORD *)std::ostream::operator<<(v6, *(unsigned __int8 *)a1);
  v8 = sub_100263F7C(v7, (uint64_t)", cellIfNotCurrent, ", 20);
  v9 = (_QWORD *)std::ostream::operator<<(v8, *((unsigned __int8 *)a1 + 1));
  v10 = sub_100263F7C(v9, (uint64_t)", redownload, ", 14);
  v11 = (_QWORD *)std::ostream::operator<<(v10, *((unsigned __int8 *)a1 + 2));
  v12 = sub_100263F7C(v11, (uint64_t)", timeout, ", 11);
  v13 = *v12;
  *(uint64_t *)((char *)v12 + *(_QWORD *)(*v12 - 24) + 16) = 1;
  *(_DWORD *)((char *)v12 + *(_QWORD *)(v13 - 24) + 8) = *(_DWORD *)((_BYTE *)v12 + *(_QWORD *)(v13 - 24) + 8) & 0xFFFFFEFB | 4;
  v14 = (_QWORD *)std::ostream::operator<<(v12, a1[1]);
  v15 = sub_100263F7C(v14, (uint64_t)", numNeighbors, ", 16);
  v16 = (_QWORD *)std::ostream::operator<<(v15, *((unsigned int *)a1 + 4));
  v17 = sub_100263F7C(v16, (uint64_t)", timestamp, ", 13);
  v18 = *v17;
  *(uint64_t *)((char *)v17 + *(_QWORD *)(*v17 - 24) + 16) = 1;
  *(_DWORD *)((char *)v17 + *(_QWORD *)(v18 - 24) + 8) = *(_DWORD *)((_BYTE *)v17 + *(_QWORD *)(v18 - 24) + 8) & 0xFFFFFEFB | 4;
  v19 = (_QWORD *)std::ostream::operator<<(v17, a1[3]);
  v20 = sub_100263F7C(v19, (uint64_t)", age, ", 7);
  v21 = *v20;
  *(uint64_t *)((char *)v20 + *(_QWORD *)(*v20 - 24) + 16) = 1;
  *(_DWORD *)((char *)v20 + *(_QWORD *)(v21 - 24) + 8) = *(_DWORD *)((_BYTE *)v20 + *(_QWORD *)(v21 - 24) + 8) & 0xFFFFFEFB | 4;
  v22 = (_QWORD *)std::ostream::operator<<(v20, Current - a1[3]);
  v23 = sub_100263F7C(v22, (uint64_t)", decompress, ", 14);
  std::ostream::operator<<(v23, *((unsigned __int8 *)a1 + 32));
  std::stringbuf::str(a2, v28);
  *(_QWORD *)((char *)v26
  v27 = v24;
  if (v29 < 0)
    operator delete((void *)v28[8]);
  std::streambuf::~streambuf(v28);
  return std::ios::~ios(&v30);
}

void sub_100FA4380(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100FA43A0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  char *v8;
  int v9;
  int v10;
  char *v11;
  int v12;
  NSObject *v13;
  FILE *v14;
  NSObject *v15;
  char *v16;
  int v17;
  int *v18;
  char *v19;
  uint64_t v20;
  NSObject *v21;
  char *v22;
  int v23;
  int v24;
  char *v26;
  int v27;
  int v28;
  const char *v29;
  uint8_t *v30;
  char *v31;
  int v32;
  int v33;
  const char *v34;
  uint8_t *v35;
  const char *v36;
  uint8_t *v37;
  uint64_t v38;
  char *v39;
  int v40;
  int *v41;
  char *v42;
  const char *v43;
  uint8_t *v44;
  uint64_t v45;
  char __filename[16];
  uint64_t v47;
  uint64_t v48;
  __int16 v49;
  int v50;
  char *v51;
  __int16 v52;
  int v53;
  __int16 v54;
  _BYTE v55[10];
  uint8_t buf[4];
  char *v57;
  __int16 v58;
  int v59;
  __int16 v60;
  _QWORD v61[202];

  v6 = a1[5];
  v48 = v6;
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  v49 = 256;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_100115CE4(__filename, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__filename = *(_OWORD *)a2;
    v47 = *(_QWORD *)(a2 + 16);
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102197380);
  v7 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v8 = __filename;
    if (v47 < 0)
      v8 = *(char **)__filename;
    v9 = *(unsigned __int8 *)(a3 + 8);
    v10 = *(unsigned __int8 *)(a3 + 9);
    *(_DWORD *)buf = 136446722;
    v57 = v8;
    v58 = 1026;
    v59 = v9;
    v60 = 1024;
    LODWORD(v61[0]) = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TileFile, readTileFileByFileName, start, file, %{public}s, isHeadersOnly, %{public}d, isBinarySearch, %d", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197380);
    v26 = __filename;
    if (v47 < 0)
      v26 = *(char **)__filename;
    v27 = *(unsigned __int8 *)(a3 + 8);
    v28 = *(unsigned __int8 *)(a3 + 9);
    v50 = 136446722;
    v51 = v26;
    v52 = 1026;
    v53 = v27;
    v54 = 1024;
    *(_DWORD *)v55 = v28;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "TileFile, readTileFileByFileName, start, file, %{public}s, isHeadersOnly, %{public}d, isBinarySearch, %d", &v50, 24);
    v30 = (uint8_t *)v29;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLTileFile::readTileFileByFileName(const std::string &, const TraverseDetails &)", "%s\n", v29);
    if (v30 != buf)
      free(v30);
  }
  if (SHIBYTE(v47) < 0)
  {
    v11 = *(char **)__filename;
    if (*(_QWORD *)&__filename[8] != 1)
      goto LABEL_32;
    v12 = **(_BYTE **)__filename;
  }
  else
  {
    v11 = __filename;
    if (SHIBYTE(v47) != 1)
      goto LABEL_32;
    v12 = __filename[0];
  }
  if (v12 == 45)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197380);
    v13 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "TileFile, readTileFileByFileName, reading input from stdin", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102197380);
      LOWORD(v50) = 0;
      LODWORD(v45) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "TileFile, readTileFileByFileName, reading input from stdin", &v50, v45);
      v37 = (uint8_t *)v36;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLTileFile::readTileFileByFileName(const std::string &, const TraverseDetails &)", "%s\n", v36);
      if (v37 != buf)
        free(v37);
    }
    v14 = __stdinp;
    if (!__stdinp)
      goto LABEL_23;
    goto LABEL_33;
  }
LABEL_32:
  v14 = fopen(v11, "r");
  if (!v14)
  {
LABEL_23:
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197380);
    v15 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      if (v47 >= 0)
        v16 = __filename;
      else
        v16 = *(char **)__filename;
      v17 = *__error();
      v18 = __error();
      v19 = strerror(*v18);
      *(_DWORD *)buf = 136446722;
      v57 = v16;
      v58 = 1026;
      v59 = v17;
      v60 = 2082;
      v61[0] = v19;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "TileFile, failed to open, %{public}s, errno, %{public}d, %{public}s, #CloneMe", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102197380);
      v38 = qword_1022A0048;
      if (v47 >= 0)
        v39 = __filename;
      else
        v39 = *(char **)__filename;
      v40 = *__error();
      v41 = __error();
      v42 = strerror(*v41);
      v50 = 136446722;
      v51 = v39;
      v52 = 1026;
      v53 = v40;
      v54 = 2082;
      *(_QWORD *)v55 = v42;
      LODWORD(v45) = 28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v38, 16, "TileFile, failed to open, %{public}s, errno, %{public}d, %{public}s, #CloneMe", &v50, v45);
      v44 = (uint8_t *)v43;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLTileFile::readTileFileByFileName(const std::string &, const TraverseDetails &)", "%s\n", v43);
      if (v44 != buf)
        free(v44);
    }
    v20 = 0;
    goto LABEL_35;
  }
LABEL_33:
  v20 = (*(uint64_t (**)(_QWORD *, FILE *, uint64_t))(*a1 + 88))(a1, v14, a3);
  if (v14 != __stdinp)
    fclose(v14);
LABEL_35:
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102197380);
  v21 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v22 = __filename;
    if (v47 < 0)
      v22 = *(char **)__filename;
    v23 = *(unsigned __int8 *)(a3 + 8);
    v24 = *(unsigned __int8 *)(a3 + 9);
    *(_DWORD *)buf = 136446978;
    v57 = v22;
    v58 = 1026;
    v59 = v23;
    v60 = 1026;
    LODWORD(v61[0]) = v24;
    WORD2(v61[0]) = 1026;
    *(_DWORD *)((char *)v61 + 6) = v20;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "TileFile, readTileFileByFileName, done, file, %{public}s, isHeadersOnly, %{public}d, isBinarySearch, %{public}d, isOK, %{public}d", buf, 0x1Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197380);
    v31 = __filename;
    if (v47 < 0)
      v31 = *(char **)__filename;
    v32 = *(unsigned __int8 *)(a3 + 8);
    v33 = *(unsigned __int8 *)(a3 + 9);
    v50 = 136446978;
    v51 = v31;
    v52 = 1026;
    v53 = v32;
    v54 = 1026;
    *(_DWORD *)v55 = v33;
    *(_WORD *)&v55[4] = 1026;
    *(_DWORD *)&v55[6] = v20;
    LODWORD(v45) = 30;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "TileFile, readTileFileByFileName, done, file, %{public}s, isHeadersOnly, %{public}d, isBinarySearch, %{public}d, isOK, %{public}d", &v50, v45);
    v35 = (uint8_t *)v34;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLTileFile::readTileFileByFileName(const std::string &, const TraverseDetails &)", "%s\n", v34);
    if (v35 != buf)
      free(v35);
  }
  if (SHIBYTE(v47) < 0)
    operator delete(*(void **)__filename);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  return v20;
}

void sub_100FA4B60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
    operator delete(__p);
  sub_10187E514((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_100FA4BB8(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  const char *v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  const char *v12;
  __int16 v13;
  double v14;
  __int16 v15;
  double v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  double v20;
  __int16 v21;
  double v22;

  v2 = sub_100FA6E28(a1, 3);
  if ((_DWORD)v2)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197380);
    v3 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
    {
      v4 = sub_1001CC818(*(_DWORD *)(a1 + 48));
      *(_DWORD *)buf = 136446723;
      v18 = v4;
      v19 = 2049;
      v20 = sub_1001C087C(a1 + 48);
      v21 = 2049;
      v22 = sub_1001C0858(a1 + 48);
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "@TileList, %{public}s, unlocked, llsw, %{private}.2lf, %{private}.2lf, ClassC", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102197380);
      v6 = qword_1022A0048;
      v8 = *(_DWORD *)(a1 + 48);
      v7 = a1 + 48;
      v11 = 136446723;
      v12 = sub_1001CC818(v8);
      v13 = 2049;
      v14 = sub_1001C087C(v7);
      v15 = 2049;
      v16 = sub_1001C0858(v7);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v6, 1, "@TileList, %{public}s, unlocked, llsw, %{private}.2lf, %{private}.2lf, ClassC", &v11, 32);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLTileFile::unlockTile()", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
  return v2;
}

_QWORD *sub_100FA4DF4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1022FC610);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1022FC610))
  {
    sub_1015A2E04(qword_1022FC5F8, ".download");
    __cxa_atexit((void (*)(void *))&std::string::~string, qword_1022FC5F8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1022FC610);
  }
  return qword_1022FC5F8;
}

void sub_100FA4E74(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022FC610);
  _Unwind_Resume(a1);
}

void sub_100FA4E8C(uint64_t a1, int a2, unsigned int *a3, double a4)
{
  double v7;
  int v8;
  NSObject *v9;
  const char *v10;
  char *v11;
  int v12;
  int v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;
  _BYTE buf[32];
  char v20;

  v12 = a2;
  if (a2)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021973A0);
    v9 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/CLTileFile.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1000;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "tileType == CLTilesManager_Type::TileType::WIFI_Location";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Assert Failed, %s, %d, %s", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021973A0);
      v13 = 136315650;
      v14 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/CLTileFile.mm";
      v15 = 1024;
      v16 = 1000;
      v17 = 2080;
      v18 = "tileType == CLTilesManager_Type::TileType::WIFI_Location";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assert Failed, %s, %d, %s", (const char *)&v13, 28);
      v11 = (char *)v10;
      sub_100512490("Generic", 1, 0, 0, "void CLTileFile::extractPropertiesFromTileHeader(CLTilesManager_Type::TileType, const CLWifiTileHeaderEntry &, CFAbsoluteTime)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    sub_100512450();
  }
  sub_1000C1928((uint64_t)buf, &v12);
  *(_DWORD *)&buf[4] = sub_100217A98(a3);
  *(_DWORD *)&buf[8] = sub_100C3C618((uint64_t)a3);
  *(_QWORD *)&buf[16] = -1;
  *(_QWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)buf;
  std::string::operator=((std::string *)(a1 + 72), (const std::string *)&buf[24]);
  *(_BYTE *)(a1 + 168) = 1;
  *(double *)(a1 + 160) = a4;
  v7 = sub_100C3C640((uint64_t)a3);
  *(double *)(a1 + 232) = v7;
  *(double *)(a1 + 192) = v7;
  *(_DWORD *)(a1 + 288) = 2;
  *(double *)(a1 + 176) = sub_100C3C628((uint64_t)a3);
  v8 = sub_100C3C630((uint64_t)a3);
  *(_DWORD *)(a1 + 200) = v8;
  *(_DWORD *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  if (v8 <= 0)
    *(_DWORD *)(a1 + 200) = 1209600;
  if (*(double *)&qword_1022FC598 >= 0.0)
    *(_DWORD *)(a1 + 200) = (int)*(double *)&qword_1022FC598;
  if (v20 < 0)
    operator delete(*(void **)&buf[24]);
}

void sub_100FA5174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100FA5198(uint64_t *a1, char *a2, std::string::value_type *a3, int a4, int a5, double a6)
{
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  NSObject *v18;
  const void **v19;
  NSObject *v20;
  std::string *v21;
  std::string *v22;
  FILE *v23;
  int v24;
  _BOOL4 v25;
  NSObject *v26;
  std::string *v27;
  int v28;
  int *v29;
  char *v30;
  uint64_t v31;
  std::string *v32;
  int v33;
  int *v34;
  char *v35;
  const char *v36;
  char *v37;
  NSObject *v38;
  std::string *v39;
  std::string *v40;
  const char *v41;
  NSObject *v42;
  int v43;
  int v44;
  double v45;
  double v46;
  int v47;
  int v48;
  NSObject *v49;
  _BYTE *v50;
  NSObject *v51;
  void **v52;
  uint64_t v53;
  NSObject *v54;
  _BYTE *v55;
  std::string *v57;
  const char *v58;
  char *v59;
  const char *v60;
  char *v61;
  uint64_t v62;
  int v63;
  int v64;
  double v65;
  double v66;
  const char *v67;
  char *v68;
  uint64_t v69;
  _BYTE *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  _BYTE *v74;
  char *v75;
  void **v76;
  const char *v77;
  char *v78;
  uint64_t v79;
  void *__p[2];
  unsigned __int8 v81;
  std::string v82;
  const char *v83;
  __int16 v84;
  uint64_t v85;
  int v86;
  _BYTE *v87;
  _BYTE v88[14];
  _BYTE v89[18];
  double v90;
  int v91;
  _BYTE v92[32];
  double v93;
  int v94;

  v83 = "";
  v84 = 0;
  v85 = nullsub_34(0);
  if (*a2)
  {
    sub_1015A2E04(v88, a2);
    sub_1015A2E04(__p, "/");
    if ((v81 & 0x80u) == 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    if ((v81 & 0x80u) == 0)
      v13 = v81;
    else
      v13 = (std::string::size_type)__p[1];
    v14 = std::string::append((std::string *)v88, (const std::string::value_type *)v12, v13);
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    *(_QWORD *)&v92[16] = *((_QWORD *)&v14->__r_.__value_.__l + 2);
    *(_OWORD *)v92 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v16 = std::string::append((std::string *)v92, a3);
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v82.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if ((v92[23] & 0x80000000) != 0)
      operator delete(*(void **)v92);
    if ((char)v81 < 0)
      operator delete(__p[0]);
    if ((v89[9] & 0x80000000) != 0)
      operator delete(*(void **)v88);
  }
  else
  {
    sub_1015A2E04(&v82, a3);
  }
  if (sub_1000B78B0(a3))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197380);
    v18 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v92 = 136446210;
      *(_QWORD *)&v92[4] = a3;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "TileFile,: extractTileIdFromFile, prefer local file name because it exists, %{public}s", v92, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(v92, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102197380);
      *(_DWORD *)v88 = 136446210;
      *(_QWORD *)&v88[4] = a3;
      _os_log_send_and_compose_impl(2, 0, v92, 1628, &_mh_execute_header, qword_1022A0048, 2, "TileFile,: extractTileIdFromFile, prefer local file name because it exists, %{public}s", v88, 12);
      v61 = (char *)v60;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLTileFile::extractTileIdFromFile(const char *, const char *, CLTilesManager_Type::TileType, BOOL, CFAbsoluteTime)", "%s\n", v60);
      if (v61 != v92)
        free(v61);
    }
    std::string::assign(&v82, a3);
  }
  v19 = (const void **)sub_100FA2F60();
  sub_1003625F4((const void **)&v82.__r_.__value_.__l.__data_, v19, (uint64_t)__p);
  sub_100FA29E4((uint64_t)a1, a3);
  v83 = "extractTileIdFromFile";
  v84 = a5;
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102197380);
  v20 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v21 = &v82;
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v21 = (std::string *)v82.__r_.__value_.__r.__words[0];
    *(_DWORD *)v92 = 136447234;
    *(_QWORD *)&v92[4] = a2;
    *(_WORD *)&v92[12] = 2082;
    *(_QWORD *)&v92[14] = a3;
    *(_WORD *)&v92[22] = 2082;
    *(_QWORD *)&v92[24] = v21;
    LOWORD(v93) = 1026;
    *(_DWORD *)((char *)&v93 + 2) = a4;
    HIWORD(v93) = 1026;
    v94 = a5;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "TileFile, extractTileIdFromFile, directory, %{public}s, filename, %{public}s, absFilename, %{public}s, type, %{public}d, isHeadersOnly, %{public}d", v92, 0x2Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(v92, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197380);
    v57 = &v82;
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v57 = (std::string *)v82.__r_.__value_.__r.__words[0];
    *(_DWORD *)v88 = 136447234;
    *(_QWORD *)&v88[4] = a2;
    *(_WORD *)&v88[12] = 2082;
    *(_QWORD *)v89 = a3;
    *(_WORD *)&v89[8] = 2082;
    *(_QWORD *)&v89[10] = v57;
    LOWORD(v90) = 1026;
    *(_DWORD *)((char *)&v90 + 2) = a4;
    HIWORD(v90) = 1026;
    v91 = a5;
    LODWORD(v79) = 44;
    _os_log_send_and_compose_impl(2, 0, v92, 1628, &_mh_execute_header, qword_1022A0048, 2, "TileFile, extractTileIdFromFile, directory, %{public}s, filename, %{public}s, absFilename, %{public}s, type, %{public}d, isHeadersOnly, %{public}d", v88, v79);
    v59 = (char *)v58;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLTileFile::extractTileIdFromFile(const char *, const char *, CLTilesManager_Type::TileType, BOOL, CFAbsoluteTime)", "%s\n", v58);
    if (v59 != v92)
      free(v59);
  }
  if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = &v82;
  else
    v22 = (std::string *)v82.__r_.__value_.__r.__words[0];
  v23 = fopen((const char *)v22, "rb");
  if (!v23)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197380);
    v26 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = &v82;
      else
        v27 = (std::string *)v82.__r_.__value_.__r.__words[0];
      v28 = *__error();
      v29 = __error();
      v30 = strerror(*v29);
      *(_DWORD *)v92 = 136446722;
      *(_QWORD *)&v92[4] = v27;
      *(_WORD *)&v92[12] = 1026;
      *(_DWORD *)&v92[14] = v28;
      *(_WORD *)&v92[18] = 2082;
      *(_QWORD *)&v92[20] = v30;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "TileFile, extractTileIdFromFile, failed to open file, %{public}s, errno, %{public}d, %{public}s, #CloneMe", v92, 0x1Cu);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_106;
    bzero(v92, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197380);
    v31 = qword_1022A0048;
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v32 = &v82;
    else
      v32 = (std::string *)v82.__r_.__value_.__r.__words[0];
    v33 = *__error();
    v34 = __error();
    v35 = strerror(*v34);
    *(_DWORD *)v88 = 136446722;
    *(_QWORD *)&v88[4] = v32;
    *(_WORD *)&v88[12] = 1026;
    *(_DWORD *)v89 = v33;
    *(_WORD *)&v89[4] = 2082;
    *(_QWORD *)&v89[6] = v35;
    LODWORD(v79) = 28;
    _os_log_send_and_compose_impl(2, 0, v92, 1628, &_mh_execute_header, v31, 16, "TileFile, extractTileIdFromFile, failed to open file, %{public}s, errno, %{public}d, %{public}s, #CloneMe", v88, v79);
    v37 = (char *)v36;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLTileFile::extractTileIdFromFile(const char *, const char *, CLTilesManager_Type::TileType, BOOL, CFAbsoluteTime)", "%s\n", v36);
LABEL_62:
    if (v37 == v92)
      goto LABEL_106;
    goto LABEL_63;
  }
  if (((*(uint64_t (**)(uint64_t *, FILE *, const char **))(*a1 + 88))(a1, v23, &v83) & 1) == 0)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197380);
    v38 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      v39 = &v82;
      if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v39 = (std::string *)v82.__r_.__value_.__r.__words[0];
      *(_DWORD *)v92 = 136446210;
      *(_QWORD *)&v92[4] = v39;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "TileFile, extractTileIdFromFile, failed, %{public}s, #CloneMe", v92, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_106;
    bzero(v92, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197380);
    v40 = &v82;
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v40 = (std::string *)v82.__r_.__value_.__r.__words[0];
    *(_DWORD *)v88 = 136446210;
    *(_QWORD *)&v88[4] = v40;
    LODWORD(v79) = 12;
    _os_log_send_and_compose_impl(2, 0, v92, 1628, &_mh_execute_header, qword_1022A0048, 16, "TileFile, extractTileIdFromFile, failed, %{public}s, #CloneMe", v88, v79);
    v37 = (char *)v41;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLTileFile::extractTileIdFromFile(const char *, const char *, CLTilesManager_Type::TileType, BOOL, CFAbsoluteTime)", "%s\n", v41);
    goto LABEL_62;
  }
  v24 = *((_DWORD *)a1 + 46);
  if (v24)
    v25 = v24 >= (*(int (**)(uint64_t *))(*a1 + 48))(a1);
  else
    v25 = 1;
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102197380);
  v42 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v43 = *((_DWORD *)a1 + 46);
    v44 = (*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1);
    v45 = (*(double (**)(uint64_t *))(*a1 + 56))(a1);
    v46 = (*(double (**)(uint64_t *))(*a1 + 64))(a1);
    *(_DWORD *)v92 = 67241216;
    *(_DWORD *)&v92[4] = v43;
    *(_WORD *)&v92[8] = 1026;
    *(_DWORD *)&v92[10] = v44;
    *(_WORD *)&v92[14] = 1026;
    *(_DWORD *)&v92[16] = v25;
    *(_WORD *)&v92[20] = 2050;
    *(double *)&v92[22] = v45;
    *(_WORD *)&v92[30] = 2050;
    v93 = v46;
    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "TileFile, extractTileIdFromFile, tile version, %{public}d, min version, %{public}d, isVersionOk, %{public}d, dLat, %{public}.5lf, dLon, %{public}.5lf", v92, 0x28u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(v92, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197380);
    v62 = qword_1022A0048;
    v63 = *((_DWORD *)a1 + 46);
    v64 = (*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1);
    v65 = (*(double (**)(uint64_t *))(*a1 + 56))(a1);
    v66 = (*(double (**)(uint64_t *))(*a1 + 64))(a1);
    *(_DWORD *)v88 = 67241216;
    *(_DWORD *)&v88[4] = v63;
    *(_WORD *)&v88[8] = 1026;
    *(_DWORD *)&v88[10] = v64;
    *(_WORD *)v89 = 1026;
    *(_DWORD *)&v89[2] = v25;
    *(_WORD *)&v89[6] = 2050;
    *(double *)&v89[8] = v65;
    *(_WORD *)&v89[16] = 2050;
    v90 = v66;
    LODWORD(v79) = 40;
    _os_log_send_and_compose_impl(2, 0, v92, 1628, &_mh_execute_header, v62, 2, "TileFile, extractTileIdFromFile, tile version, %{public}d, min version, %{public}d, isVersionOk, %{public}d, dLat, %{public}.5lf, dLon, %{public}.5lf", v88, v79);
    v68 = (char *)v67;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLTileFile::extractTileIdFromFile(const char *, const char *, CLTilesManager_Type::TileType, BOOL, CFAbsoluteTime)", "%s\n", v67);
    if (v68 != v92)
      free(v68);
    if (v25)
      goto LABEL_71;
LABEL_106:
    sub_100BCC1B0((uint64_t)(a1 + 6));
    v53 = 0;
    if (!v23)
      goto LABEL_108;
    goto LABEL_107;
  }
  if (!v25)
    goto LABEL_106;
LABEL_71:
  v48 = *((_DWORD *)a1 + 13);
  v47 = *((_DWORD *)a1 + 14);
  (*(void (**)(uint64_t *))(*a1 + 56))(a1);
  (*(void (**)(uint64_t *))(*a1 + 64))(a1);
  sub_1001CB298((uint64_t)(a1 + 6), v47, v48, a1[8]);
  if (!sub_1001C91DC((uint64_t)(a1 + 6)))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197380);
    v54 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(_BYTE *__return_ptr, uint64_t *))(*a1 + 16))(v92, a1);
      v55 = v92[23] >= 0 ? v92 : *(_BYTE **)v92;
      *(_DWORD *)v88 = 136380675;
      *(_QWORD *)&v88[4] = v55;
      _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_ERROR, "TileFile, extractTileIdFromFile, invalid hash value for, %{private}s, #CloneMe", v88, 0xCu);
      if ((v92[23] & 0x80000000) != 0)
        operator delete(*(void **)v92);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_106;
    bzero(v92, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197380);
    v73 = qword_1022A0048;
    (*(void (**)(_BYTE *__return_ptr, uint64_t *))(*a1 + 16))(v88, a1);
    if (v89[9] >= 0)
      v74 = v88;
    else
      v74 = *(_BYTE **)v88;
    v86 = 136380675;
    v87 = v74;
    LODWORD(v79) = 12;
    _os_log_send_and_compose_impl(2, 0, v92, 1628, &_mh_execute_header, v73, 16, "TileFile, extractTileIdFromFile, invalid hash value for, %{private}s, #CloneMe", &v86, v79);
    v37 = v75;
    if ((v89[9] & 0x80000000) != 0)
      operator delete(*(void **)v88);
    sub_100512490("Generic", 1, 0, 0, "BOOL CLTileFile::extractTileIdFromFile(const char *, const char *, CLTilesManager_Type::TileType, BOOL, CFAbsoluteTime)", "%s\n", v37);
    if (v37 == v92)
      goto LABEL_106;
LABEL_63:
    free(v37);
    goto LABEL_106;
  }
  *((_BYTE *)a1 + 168) = 1;
  *((double *)a1 + 20) = a6;
  *((double *)a1 + 29) = a6;
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102197380);
  v49 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(_BYTE *__return_ptr, uint64_t *))(*a1 + 16))(v92, a1);
    v50 = v92[23] >= 0 ? v92 : *(_BYTE **)v92;
    *(_DWORD *)v88 = 136380675;
    *(_QWORD *)&v88[4] = v50;
    _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEBUG, "TileFile, extractTileIdFromFile, read tileid from file, %{private}s", v88, 0xCu);
    if ((v92[23] & 0x80000000) != 0)
      operator delete(*(void **)v92);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(v92, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197380);
    v69 = qword_1022A0048;
    (*(void (**)(_BYTE *__return_ptr, uint64_t *))(*a1 + 16))(v88, a1);
    if (v89[9] >= 0)
      v70 = v88;
    else
      v70 = *(_BYTE **)v88;
    v86 = 136380675;
    v87 = v70;
    LODWORD(v79) = 12;
    _os_log_send_and_compose_impl(2, 0, v92, 1628, &_mh_execute_header, v69, 2, "TileFile, extractTileIdFromFile, read tileid from file, %{private}s", &v86, v79);
    v72 = v71;
    if ((v89[9] & 0x80000000) != 0)
      operator delete(*(void **)v88);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLTileFile::extractTileIdFromFile(const char *, const char *, CLTilesManager_Type::TileType, BOOL, CFAbsoluteTime)", "%s\n", v72);
    if (v72 != v92)
      free(v72);
  }
  if (a4)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197380);
    v51 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      v52 = __p;
      if ((v81 & 0x80u) != 0)
        v52 = (void **)__p[0];
      *(_DWORD *)v92 = 136446210;
      *(_QWORD *)&v92[4] = v52;
      _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "TileFile, extractTileIdFromFile, read, absFilenameParams, %{public}s", v92, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(v92, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102197380);
      v76 = __p;
      if ((v81 & 0x80u) != 0)
        v76 = (void **)__p[0];
      *(_DWORD *)v88 = 136446210;
      *(_QWORD *)&v88[4] = v76;
      LODWORD(v79) = 12;
      _os_log_send_and_compose_impl(2, 0, v92, 1628, &_mh_execute_header, qword_1022A0048, 2, "TileFile, extractTileIdFromFile, read, absFilenameParams, %{public}s", v88, v79);
      v78 = (char *)v77;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLTileFile::extractTileIdFromFile(const char *, const char *, CLTilesManager_Type::TileType, BOOL, CFAbsoluteTime)", "%s\n", v77);
      if (v78 != v92)
        free(v78);
    }
    sub_100FA6284((uint64_t)a1, (uint64_t)__p);
  }
  if (*((double *)a1 + 22) <= 0.0)
    *((double *)a1 + 22) = a6;
  if (*((int *)a1 + 50) <= 0)
    *((_DWORD *)a1 + 50) = 1209600;
  if (*(double *)&qword_1022FC598 >= 0.0)
    *((_DWORD *)a1 + 50) = (int)*(double *)&qword_1022FC598;
  v53 = 1;
LABEL_107:
  fclose(v23);
LABEL_108:
  *((_DWORD *)a1 + 72) = sub_100FA6510((uint64_t)a1);
  if ((char)v81 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v82.__r_.__value_.__l.__data_);
  return v53;
}

void sub_100FA61BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100FA6284(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint8_t *v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  __int16 v17;
  _DWORD v18[2];
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint8_t buf[4];
  int v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;

  v4 = *(_QWORD *)(a1 + 40);
  v16 = v4;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  v17 = 256;
  sub_100FA7ED8(a2, (uint64_t)&v14);
  v5 = v15;
  if (v15)
    *(_QWORD *)(a1 + 232) = v14;
  else
    sub_100FA7B0C(a1);
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102197380);
  v6 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(a2 + 23) >= 0)
      v7 = a2;
    else
      v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a1 + 232);
    *(_DWORD *)buf = 67240706;
    v24 = v5;
    v25 = 2082;
    v26 = v7;
    v27 = 2050;
    v28 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "TileFile, paramsFileExist, %{public}d, loading, %{public}s, accessTimestamp, %{public}.1lf", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197380);
    if (*(char *)(a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = *(_QWORD *)a2;
    v11 = *(_QWORD *)(a1 + 232);
    v18[0] = 67240706;
    v18[1] = v5;
    v19 = 2082;
    v20 = v10;
    v21 = 2050;
    v22 = v11;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "TileFile, paramsFileExist, %{public}d, loading, %{public}s, accessTimestamp, %{public}.1lf", v18, 28);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLTileFile::loadPersistentPropertiesFromFile(const std::string &)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
}

void sub_100FA64E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100FA6510(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::string *v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  std::string *v8;
  NSObject *v9;
  std::string *v11;
  char *v12;
  char *v13;
  int v14;
  std::string *v15;
  uint8_t buf[4];
  std::string *v17;
  std::string v18;

  v2 = *(_QWORD *)(a1 + 40);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  v3 = *(unsigned int *)(a1 + 288);
  if (!(_DWORD)v3)
  {
    sub_100BCCB44((int *)(a1 + 48), a1 + 8, &v18);
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v4 = &v18;
    else
      v4 = (std::string *)v18.__r_.__value_.__r.__words[0];
    v5 = open((const char *)v4, 2);
    if (v5 < 0)
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102197380);
      v7 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
      {
        v8 = &v18;
        if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v8 = (std::string *)v18.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136446210;
        v17 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TileFile, getProtectionClass, failed to open, %{public}s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102197380);
        v11 = &v18;
        if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v11 = (std::string *)v18.__r_.__value_.__r.__words[0];
        v14 = 136446210;
        v15 = v11;
        v12 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "TileFile, getProtectionClass, failed to open, %{public}s", &v14, 12);
        sub_100512490("Generic", 1, 0, 2, "CLTileFile::ProtectionClass CLTileFile::getProtectionClass()", "%s\n", v12);
        if (v12 != (char *)buf)
          free(v12);
      }
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v18.__r_.__value_.__l.__data_);
      v3 = 0;
    }
    else
    {
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v18.__r_.__value_.__l.__data_);
      v6 = fcntl(v5, 63);
      v3 = v6;
      if ((v6 - 1) >= 4)
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102197380);
        v9 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67240192;
          LODWORD(v17) = v3;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "TileFile, getProtectionClass, failed to set protection class, %{public}d, #CloneMe", buf, 8u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_102197380);
          LODWORD(v18.__r_.__value_.__l.__data_) = 67240192;
          HIDWORD(v18.__r_.__value_.__r.__words[0]) = v3;
          v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "TileFile, getProtectionClass, failed to set protection class, %{public}d, #CloneMe", &v18, 8);
          sub_100512490("Generic", 1, 0, 0, "CLTileFile::ProtectionClass CLTileFile::getProtectionClass()", "%s\n", v13);
          if (v13 != (char *)buf)
            free(v13);
        }
      }
      else
      {
        *(_DWORD *)(a1 + 288) = v6;
      }
      close(v5);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

void sub_100FA68F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_100FA6940(uint64_t a1, unsigned int a2, unsigned int a3, double *a4, double *a5)
{
  unsigned int v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double result;

  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  v11 = sub_1001C087C(a1 + 48);
  v12 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  *a4 = v11 + (double)a2 / (double)v10 * v12 + v12 / (double)v10 * 0.5;
  LODWORD(a4) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v13 = sub_1001C0858(a1 + 48);
  v14 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  result = v13 + (double)a3 / (double)a4 * v14 + v14 / (double)a4 * 0.5;
  *a5 = result;
  return result;
}

BOOL sub_100FA6A30(const char *a1, uint64_t a2)
{
  int v2;
  _BOOL8 result;
  NSObject *v5;
  _BOOL4 v6;
  uint8_t *v7;
  double v8;
  NSObject *v9;
  double v10;
  uint8_t *v11;
  uint8_t *v12;
  NSObject *v13;
  _BOOL4 v14;
  _BYTE v15[12];
  __int16 v16;
  int v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  int v21;

  if (!a1)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197380);
    v5 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "TileFile,filename==nullptr", buf, 2u);
    }
    v6 = sub_1001BFF7C(115, 0);
    result = 0;
    if (!v6)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197380);
    *(_WORD *)v15 = 0;
    v8 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "TileFile,filename==nullptr", v15, 2, *(_QWORD *)v15);
LABEL_30:
    v12 = v7;
    sub_100512490("Generic", 1, 0, 0, "static BOOL CLTileFile::setProtectionClass(const char *, ProtectionClass)", "%s\n", v8);
LABEL_31:
    if (v12 != buf)
      free(v12);
    return 0;
  }
  v2 = a2;
  if (sub_1005169DC(a1, a2))
    return 1;
  if ((v2 - 1) >= 2)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197380);
    v13 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      LODWORD(v19) = v2;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "TileFile,setProtectionClass,failed,protectionClass,%{public}d,#CloneMe", buf, 8u);
    }
    v14 = sub_1001BFF7C(115, 0);
    result = 0;
    if (!v14)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197380);
    *(_DWORD *)v15 = 67240192;
    *(_DWORD *)&v15[4] = v2;
    v8 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "TileFile,setProtectionClass,failed,protectionClass,%{public}d,#CloneMe", v15, 8, *(_QWORD *)v15);
    goto LABEL_30;
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102197380);
  v9 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136446466;
    v19 = a1;
    v20 = 1026;
    v21 = v2;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "TileFile,setProtectionClass,failed,%{public}s,protectionClass,%{public}d", buf, 0x12u);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197380);
    *(_DWORD *)v15 = 136446466;
    *(_QWORD *)&v15[4] = a1;
    v16 = 1026;
    v17 = v2;
    v10 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "TileFile,setProtectionClass,failed,%{public}s,protectionClass,%{public}d", v15, 18);
    v12 = v11;
    sub_100512490("Generic", 1, 0, 2, "static BOOL CLTileFile::setProtectionClass(const char *, ProtectionClass)", "%s\n", v10);
    goto LABEL_31;
  }
  return result;
}

uint64_t sub_100FA6E28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  _BYTE *v6;
  int v7;
  uint64_t v8;
  std::string *v9;
  _BOOL4 v10;
  _BOOL4 v11;
  NSObject *v12;
  uint64_t v14;
  void **v15;
  int v16;
  std::string *v17;
  std::string *v18;
  const char *v19;
  std::string *v20;
  uint64_t v21;
  void *__p[2];
  char v23;
  uint64_t v24;
  __int16 v25;
  std::string buf[68];
  _BYTE v27[12];
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;

  v4 = *(_QWORD *)(a1 + 40);
  v24 = v4;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  v25 = 256;
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102197380);
  v5 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(v27, a1);
    v6 = v31 >= 0 ? v27 : *(_BYTE **)v27;
    v7 = *(_DWORD *)(a1 + 288);
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136381187;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v6;
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = a2;
    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1026;
    HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "TileFile, setProtectionClass, tile, %{private}s, newClass, %{public}d, curClass, %{public}d", (uint8_t *)buf, 0x18u);
    if (SHIBYTE(v31) < 0)
      operator delete(*(void **)v27);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197380);
    v14 = qword_1022A0048;
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(__p, a1);
    if (v23 >= 0)
      v15 = __p;
    else
      v15 = (void **)__p[0];
    v16 = *(_DWORD *)(a1 + 288);
    *(_DWORD *)v27 = 136381187;
    *(_QWORD *)&v27[4] = v15;
    v28 = 1026;
    v29 = a2;
    v30 = 1026;
    v31 = v16;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v14, 2, "TileFile, setProtectionClass, tile, %{private}s, newClass, %{public}d, curClass, %{public}d", v27, 24);
    v18 = v17;
    if (v23 < 0)
      operator delete(__p[0]);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLTileFile::setProtectionClass(ProtectionClass)", "%s\n", (const char *)v18);
    if (v18 != buf)
      free(v18);
  }
  if (*(_DWORD *)(a1 + 288) == (_DWORD)a2)
    goto LABEL_11;
  if ((a2 - 1) >= 4)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197380);
    v12 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 67240192;
      HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = a2;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "TileFile, setProtectionClass, invalid protectionClass, %{public}d, #CloneMe", (uint8_t *)buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102197380);
      *(_DWORD *)v27 = 67240192;
      *(_DWORD *)&v27[4] = a2;
      LODWORD(v21) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "TileFile, setProtectionClass, invalid protectionClass, %{public}d, #CloneMe", v27, v21);
      v20 = (std::string *)v19;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLTileFile::setProtectionClass(ProtectionClass)", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
    goto LABEL_24;
  }
  sub_100BCCB44((int *)(a1 + 48), a1 + 8, buf);
  if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = buf;
  else
    v9 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
  v10 = sub_100FA6A30((const char *)v9, a2);
  v11 = v10;
  if ((SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v10)
      goto LABEL_27;
LABEL_24:
    v8 = 0;
    goto LABEL_25;
  }
  operator delete(buf[0].__r_.__value_.__l.__data_);
  if (!v11)
    goto LABEL_24;
LABEL_27:
  *(_DWORD *)(a1 + 288) = a2;
LABEL_11:
  v8 = 1;
LABEL_25:
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  return v8;
}

void sub_100FA7270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_10187E514((uint64_t)&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_100FA72C0(uint64_t a1, int a2)
{
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  const char *v7;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  const char *v12;
  const char *v13;
  const char *v14;
  uint8_t *v15;
  int v16;
  const char *v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  double v21;
  __int16 v22;
  double v23;
  __int16 v24;
  int v25;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  double v31;
  __int16 v32;
  double v33;
  __int16 v34;
  int v35;

  v4 = sub_100FA6E28(a1, 2);
  if ((_DWORD)v4)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197380);
    v5 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
    {
      v6 = sub_1001CC818(*(_DWORD *)(a1 + 48));
      if (a2)
        v7 = "locked";
      else
        v7 = "unlocked";
      *(_DWORD *)buf = 136447235;
      v27 = v6;
      v28 = 2082;
      v29 = v7;
      v30 = 2049;
      v31 = sub_1001C087C(a1 + 48);
      v32 = 2049;
      v33 = sub_1001C0858(a1 + 48);
      v34 = 1026;
      v35 = 66;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "@TileList, %{public}s, %{public}s, llsw, %{private}.2lf, %{private}.2lf, Class%{public}c", buf, 0x30u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102197380);
      v9 = qword_1022A0048;
      v11 = *(_DWORD *)(a1 + 48);
      v10 = a1 + 48;
      v12 = sub_1001CC818(v11);
      if (a2)
        v13 = "locked";
      else
        v13 = "unlocked";
      v16 = 136447235;
      v17 = v12;
      v18 = 2082;
      v19 = v13;
      v20 = 2049;
      v21 = sub_1001C087C(v10);
      v22 = 2049;
      v23 = sub_1001C0858(v10);
      v24 = 1026;
      v25 = 66;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 1, "@TileList, %{public}s, %{public}s, llsw, %{private}.2lf, %{private}.2lf, Class%{public}c", &v16, 48);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLTileFile::lockTile(BOOL)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
  }
  return v4;
}

BOOL sub_100FA7570(const char *a1)
{
  return sub_100FA6A30(a1, 2);
}

BOOL sub_100FA7578(const char *a1)
{
  return sub_100FA6A30(a1, 3);
}

BOOL sub_100FA7580(double *a1, uint64_t a2, float a3)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  NSObject *v24;
  double v25;
  double v26;
  _BOOL8 result;
  NSObject *v28;
  _BYTE *v29;
  uint64_t v30;
  void **v31;
  char *v32;
  char *v33;
  uint64_t v34;
  double v35;
  double v36;
  const char *v37;
  uint8_t *v38;
  void *v39[2];
  char v40;
  _BYTE __p[12];
  __int16 v42;
  double v43;
  __int16 v44;
  double v45;
  uint8_t buf[4];
  double v47;
  __int16 v48;
  double v49;
  __int16 v50;
  double v51;

  v4 = *(double *)(a2 + 20);
  v5 = a3;
  v6 = *(double *)(a2 + 4);
  v7 = *(double *)(a2 + 12);
  if (v4 >= v5 || v4 < 0.0)
    v9 = *(double *)(a2 + 20);
  else
    v9 = v5;
  v10 = v9 * 1.1;
  if (v9 < 0.0)
    v10 = v9;
  if (v10 < 0.0
    || (*(double (**)(double *))(*(_QWORD *)a1 + 56))(a1) <= 0.0
    || (*(double (**)(double *))(*(_QWORD *)a1 + 64))(a1) <= 0.0)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197380);
    v28 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      (*(void (**)(_BYTE *__return_ptr, double *))(*(_QWORD *)a1 + 16))(__p, a1);
      v29 = v44 >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)buf = 136381187;
      v47 = *(double *)&v29;
      v48 = 2049;
      v49 = v6;
      v50 = 2049;
      v51 = v7;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "TileFile, no location / coordinates, tile, %{private}s, scaledLocation, %{private}.8lf, %{private}.8lf, #CloneMe", buf, 0x20u);
      if (SHIBYTE(v44) < 0)
        operator delete(*(void **)__p);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102197380);
      v30 = qword_1022A0048;
      (*(void (**)(void **__return_ptr, double *))(*(_QWORD *)a1 + 16))(v39, a1);
      if (v40 >= 0)
        v31 = v39;
      else
        v31 = (void **)v39[0];
      *(_DWORD *)__p = 136381187;
      *(_QWORD *)&__p[4] = v31;
      v42 = 2049;
      v43 = v6;
      v44 = 2049;
      v45 = v7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v30, 2, "TileFile, no location / coordinates, tile, %{private}s, scaledLocation, %{private}.8lf, %{private}.8lf, #CloneMe", __p, 32);
      v33 = v32;
      if (v40 < 0)
        operator delete(v39[0]);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLTileFile::doesLocationIntersectWithTile(const CLDaemonLocation &, float)", "%s\n", v33);
      if (v33 != (char *)buf)
        free(v33);
      return 0;
    }
  }
  else
  {
    v11 = sub_1001C087C((uint64_t)(a1 + 6));
    v12 = sub_1001C0858((uint64_t)(a1 + 6));
    v13 = sub_1001C087C((uint64_t)(a1 + 6));
    v14 = v13 + (*(double (**)(double *))(*(_QWORD *)a1 + 56))(a1);
    v15 = sub_1001C0858((uint64_t)(a1 + 6));
    v16 = (*(double (**)(double *))(*(_QWORD *)a1 + 64))(a1);
    v17 = sub_10011E634(a1 + 31, v11, v12, v14, v15 + v16, 0.0);
    v18 = sub_1001C087C((uint64_t)(a1 + 6));
    v19 = v18 + (*(double (**)(double *))(*(_QWORD *)a1 + 56))(a1) * 0.5;
    v20 = sub_1001C0858((uint64_t)(a1 + 6));
    v21 = (*(double (**)(double *))(*(_QWORD *)a1 + 64))(a1);
    v22 = sub_10011E634(a1 + 31, v6, v7, v19, v20 + v21 * 0.5, 0.0) - v9;
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197380);
    v23 = v22 - v17 * 0.5;
    v24 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      v25 = (*(double (**)(double *))(*(_QWORD *)a1 + 56))(a1);
      v26 = (*(double (**)(double *))(*(_QWORD *)a1 + 64))(a1);
      *(_DWORD *)buf = 134349568;
      v47 = v23;
      v48 = 2050;
      v49 = v25;
      v50 = 2050;
      v51 = v26;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "TileFile, doesLocationIntersectWithTile, distance, %{public}.1lf, deltas, %{public}.1lf, %{public}.1lf", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102197380);
      v34 = qword_1022A0048;
      v35 = (*(double (**)(double *))(*(_QWORD *)a1 + 56))(a1);
      v36 = (*(double (**)(double *))(*(_QWORD *)a1 + 64))(a1);
      *(_DWORD *)__p = 134349568;
      *(double *)&__p[4] = v23;
      v42 = 2050;
      v43 = v35;
      v44 = 2050;
      v45 = v36;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v34, 2, "TileFile, doesLocationIntersectWithTile, distance, %{public}.1lf, deltas, %{public}.1lf, %{public}.1lf", __p, 32);
      v38 = (uint8_t *)v37;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLTileFile::doesLocationIntersectWithTile(const CLDaemonLocation &, float)", "%s\n", v37);
      if (v38 != buf)
        free(v38);
    }
    return v23 <= 0.0;
  }
  return result;
}

uint64_t sub_100FA7B0C(uint64_t a1)
{
  uint64_t v2;
  const std::string::value_type *v3;
  int v4;
  const std::string::value_type *v5;
  std::string::size_type v6;
  std::string *v7;
  __int128 v8;
  NSObject *v9;
  void **v10;
  void **v11;
  void **v13;
  const char *v14;
  std::string *v15;
  void *__p[2];
  int64_t v17;
  _BYTE v18[16];
  uint64_t v19;
  __int16 v20;
  int v21;
  void **v22;
  std::string v23;

  v2 = *(_QWORD *)(a1 + 40);
  v19 = v2;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  v20 = 256;
  sub_100119F3C(v18);
  sub_10018A4CC((uint64_t)v18, "atime", (const void *)(a1 + 232));
  v23.__r_.__value_.__r.__words[0] = 0;
  sub_10018A4CC((uint64_t)v18, "stime", &v23);
  sub_100BCCB44((int *)(a1 + 48), a1 + 8, &v23);
  v3 = (const std::string::value_type *)sub_100FA2F60();
  v4 = v3[23];
  if (v4 >= 0)
    v5 = v3;
  else
    v5 = *(const std::string::value_type **)v3;
  if (v4 >= 0)
    v6 = *((unsigned __int8 *)v3 + 23);
  else
    v6 = *((_QWORD *)v3 + 1);
  v7 = std::string::append(&v23, v5, v6);
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v17 = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102197380);
  v9 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v10 = __p;
    if (v17 < 0)
      v10 = (void **)__p[0];
    LODWORD(v23.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)v23.__r_.__value_.__r.__words + 4) = (std::string::size_type)v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "TileFile, saving, %{public}s", (uint8_t *)&v23, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&v23, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197380);
    v13 = __p;
    if (v17 < 0)
      v13 = (void **)__p[0];
    v21 = 136446210;
    v22 = v13;
    _os_log_send_and_compose_impl(2, 0, &v23, 1628, &_mh_execute_header, qword_1022A0048, 2, "TileFile, saving, %{public}s", &v21, 12);
    v15 = (std::string *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLTileFile::savePersistentPropertiesToFile()", "%s\n", v14);
    if (v15 != &v23)
      free(v15);
  }
  if (v17 >= 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  sub_100525294((uint64_t)v18, (uint64_t)v11);
  if (SHIBYTE(v17) < 0)
    operator delete(__p[0]);
  sub_10011A5A8(v18);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

void sub_100FA7DD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a16 < 0)
    operator delete(__p);
  sub_10011A5A8(&a17);
  sub_10187E514((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_100FA7E3C(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  *(_BYTE *)(a1 + 241) = 1;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

BOOL sub_100FA7E88(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 40);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  LODWORD(v1) = *(unsigned __int8 *)(v1 + 241);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return (_DWORD)v1 != 0;
}

uint64_t sub_100FA7ED8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[16];
  uint64_t v8;
  uint64_t v9;

  v2 = a1;
  if (*(char *)(a1 + 23) < 0)
    a1 = *(_QWORD *)a1;
  result = sub_1000B78B0((const char *)a1);
  if ((_DWORD)result)
  {
    v8 = 0;
    v9 = 0;
    sub_100119F3C(v7);
    if (*(char *)(v2 + 23) >= 0)
      v5 = v2;
    else
      v5 = *(_QWORD *)v2;
    sub_10003CE20((uint64_t)v7, v5);
    sub_1001FD98C((uint64_t)v7, "atime", &v9);
    sub_1001FD98C((uint64_t)v7, "stime", &v8);
    v6 = v8;
    *(_QWORD *)a2 = v9;
    *(_QWORD *)(a2 + 8) = v6;
    *(_BYTE *)(a2 + 16) = 1;
    return sub_10011A5A8(v7);
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
  }
  return result;
}

void sub_100FA7F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10011A5A8(&a9);
  _Unwind_Resume(a1);
}

void sub_100FA7FA4(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_100FA7FD0(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_100FA7FFC(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 16 * a3;
    do
    {
      sub_100FA8078((uint64_t **)a1, v4, a2, a2);
      a2 += 16;
      v6 -= 16;
    }
    while (v6);
  }
  return a1;
}

void sub_100FA8060(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100008848(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100FA8078(uint64_t **a1, uint64_t *a2, char *a3, _OWORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = sub_100FA80FC(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    sub_1000145B0(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_100FA80FC(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, char *a5)
{
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((char *)a2 + 32), v6 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((char *)v10 + 32) < v15)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(char *)(v16 + 32);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((char *)a4 + 32))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(char *)(v20 + 32);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t **sub_100FA82A4(uint64_t **a1, char *a2, uint64_t a3, _BYTE **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _BYTE *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((char *)v6 + 32);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x30uLL);
    v11[32] = **a4;
    *((_QWORD *)v11 + 5) = 0;
    sub_1000145B0(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t sub_100FA8364()
{
  _OWORD v1[6];

  v1[2] = unk_102197258;
  v1[3] = unk_102197268;
  v1[4] = unk_102197278;
  v1[5] = unk_102197288;
  v1[0] = unk_102197238;
  v1[1] = unk_102197248;
  sub_100FA7FFC((uint64_t)&unk_102311A88, (char *)v1, 6);
  return __cxa_atexit((void (*)(void *))sub_100F9F0D4, &unk_102311A88, (void *)&_mh_execute_header);
}

_QWORD *sub_100FA8404(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *__p[2];
  uint64_t v10;
  int v11;

  if (*(char *)(a3 + 23) < 0)
  {
    sub_100115CE4(__p, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a3;
    v10 = *(_QWORD *)(a3 + 16);
  }
  v11 = *(_DWORD *)(a3 + 24);
  sub_100B91404((uint64_t)a1, a2, (__int128 *)__p);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  *a1 = off_1021973D0;
  sub_100270E34((uint64_t)(a1 + 24), a4);
  return a1;
}

void sub_100FA84A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  sub_100B917A8(v14);
  _Unwind_Resume(a1);
}

unint64_t sub_100FA84D8(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  double v9;
  double v10;
  uint64_t v11;
  char *v12;
  unint64_t *v13;
  double v14;
  double v15;
  NSObject *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  NSObject *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  char *v29;
  double v30;
  double v31;
  __int128 v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  NSObject *v39;
  _QWORD *v40;
  _QWORD *v41;
  const char *v42;
  int *v43;
  double v44;
  NSObject *v45;
  _QWORD *v46;
  char *v47;
  __int128 v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  __int128 v55;
  char *v56;
  char *v57;
  char *v58;
  __int128 v59;
  _QWORD *v60;
  const char *v61;
  int *v62;
  char *v63;
  char *v64;
  double v65;
  char *v66;
  unint64_t v67;
  uint64_t v68;
  int v69;
  NSObject *v70;
  _QWORD *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  NSObject *v77;
  _QWORD *v78;
  double v79;
  double v80;
  uint64_t v81;
  _QWORD *v83;
  uint64_t v84;
  unint64_t v85;
  const char *v86;
  int *v87;
  _QWORD *v88;
  unint64_t v89;
  unint64_t v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  char *v96;
  double v97;
  double v98;
  const char *v99;
  int *v100;
  _QWORD *v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  const char *v106;
  int *v107;
  double v108;
  double v109;
  const char *v110;
  int *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  char **v117;
  _QWORD *v118;
  char *v119;
  char *v120;
  char *v121;
  char *v122;
  int v123;
  _QWORD *v124;
  __int16 v125;
  _BYTE v126[60];
  _WORD v127[10];
  double v128;
  __int16 v129;
  double v130;
  int v131;
  _QWORD *v132;
  __int16 v133;
  _BYTE v134[60];
  _WORD v135[10];
  double v136;
  __int16 v137;
  double v138;

  v1 = a1;
  v2 = *(_DWORD *)(a1 + 144);
  __chkstk_darwin(a1);
  v119 = (char *)&v113 - v4;
  v6 = sub_100B90B7C(v3 + 48, (char *)&v113 - v4, v5);
  v7 = v6;
  v118 = (_QWORD *)(v1 + 120);
  v8 = 1.0 / (float)v2;
  if ((_DWORD)v6)
  {
    v9 = (double)*(unint64_t *)(v119 + 12);
    v10 = v9 - *(double *)(v1 + 224);
    v11 = (int)v6 - 1;
    v12 = &v119[20 * v11];
    v13 = (unint64_t *)(v12 + 12);
    v14 = (double)*(unint64_t *)(v12 + 12) - v9;
    if (qword_10229FFB0 != -1)
      dispatch_once(&qword_10229FFB0, &stru_102197400);
    v15 = v10 / 1000000.0;
    v16 = qword_10229FFB8;
    if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_DEFAULT))
    {
      v17 = v118;
      if (*(char *)(v1 + 143) < 0)
        v17 = (_QWORD *)*v118;
      v18 = *(_QWORD *)(v119 + 12);
      v19 = *v13;
      v131 = 136447746;
      v132 = v17;
      v133 = 1026;
      *(_DWORD *)v134 = v7;
      *(_WORD *)&v134[4] = 2050;
      *(double *)&v134[6] = v15;
      *(_WORD *)&v134[14] = 2050;
      *(_QWORD *)&v134[16] = vabdd_f64(v15, v8);
      *(_WORD *)&v134[24] = 2050;
      *(_QWORD *)&v134[26] = v18;
      *(_WORD *)&v134[34] = 2050;
      *(_QWORD *)&v134[36] = v19;
      *(_WORD *)&v134[44] = 2050;
      *(double *)&v134[46] = v14 / 1000000.0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "[manager-%{public}s] read %{public}d, timestamp from previous [%{public}f %{public}f], range [%{public}llu %{public}llu], time interval %{public}f", (uint8_t *)&v131, 0x44u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&v131, 0x65CuLL);
      if (qword_10229FFB0 != -1)
        dispatch_once(&qword_10229FFB0, &stru_102197400);
      v83 = v118;
      if (*(char *)(v1 + 143) < 0)
        v83 = (_QWORD *)*v118;
      v84 = *(_QWORD *)(v119 + 12);
      v85 = *v13;
      v123 = 136447746;
      v124 = v83;
      v125 = 1026;
      *(_DWORD *)v126 = v7;
      *(_WORD *)&v126[4] = 2050;
      *(double *)&v126[6] = v15;
      *(_WORD *)&v126[14] = 2050;
      *(_QWORD *)&v126[16] = vabdd_f64(v15, v8);
      *(_WORD *)&v126[24] = 2050;
      *(_QWORD *)&v126[26] = v84;
      *(_WORD *)&v126[34] = 2050;
      *(_QWORD *)&v126[36] = v85;
      *(_WORD *)&v126[44] = 2050;
      *(double *)&v126[46] = v14 / 1000000.0;
      _os_log_send_and_compose_impl(2, 0, &v131, 1628, &_mh_execute_header, qword_10229FFB8, 0, "[manager-%{public}s] read %{public}d, timestamp from previous [%{public}f %{public}f], range [%{public}llu %{public}llu], time interval %{public}f", &v123, 68);
      v87 = (int *)v86;
      sub_100512490("Generic", 1, 0, 2, "virtual int CLBatchedAccelerometerClient::Client::read()", "%s\n", v86);
      if (v87 != &v131)
        free(v87);
    }
    if (qword_10229FFB0 != -1)
      dispatch_once(&qword_10229FFB0, &stru_102197400);
    v20 = qword_10229FFB8;
    if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_INFO))
    {
      v21 = v118;
      if (*(char *)(v1 + 143) < 0)
        v21 = (_QWORD *)*v118;
      v22 = *(_QWORD *)(v119 + 12);
      v23 = *v13;
      v24 = (double)*v13 * 0.000000999999997;
      v25 = *(float *)v119;
      v26 = *((float *)v119 + 1);
      v27 = *((float *)v119 + 2);
      v28 = *(float *)v12;
      v29 = &v119[20 * v11];
      v30 = *((float *)v29 + 1);
      v31 = *((float *)v29 + 2);
      v131 = 136448770;
      v132 = v21;
      v133 = 2050;
      *(_QWORD *)v134 = v22;
      *(_WORD *)&v134[8] = 2050;
      *(_QWORD *)&v134[10] = v23;
      *(_WORD *)&v134[18] = 2050;
      *(double *)&v134[20] = (double)v22 * 0.000000999999997;
      *(_WORD *)&v134[28] = 2050;
      *(double *)&v134[30] = v24;
      *(_WORD *)&v134[38] = 2050;
      *(double *)&v134[40] = v25;
      *(_WORD *)&v134[48] = 2050;
      *(double *)&v134[50] = v26;
      *(_WORD *)&v134[58] = 2050;
      *(double *)v135 = v27;
      v135[4] = 2050;
      *(double *)&v135[5] = v28;
      v135[9] = 2050;
      v136 = v30;
      v137 = 2050;
      v138 = v31;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "[manager-%{public}s] read [%{public}llu %{public}llu], timeS [%{public}f %{public}f], first sample [%{public}f %{public}f %{public}f], last sample [%{public}f %{public}f %{public}f]", (uint8_t *)&v131, 0x70u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&v131, 0x65CuLL);
      if (qword_10229FFB0 != -1)
        dispatch_once(&qword_10229FFB0, &stru_102197400);
      v88 = v118;
      if (*(char *)(v1 + 143) < 0)
        v88 = (_QWORD *)*v118;
      v89 = *(_QWORD *)(v119 + 12);
      v90 = *v13;
      v91 = (double)*v13 * 0.000000999999997;
      v92 = *(float *)v119;
      v93 = *((float *)v119 + 1);
      v94 = *((float *)v119 + 2);
      v95 = *(float *)v12;
      v96 = &v119[20 * v11];
      v97 = *((float *)v96 + 1);
      v98 = *((float *)v96 + 2);
      v123 = 136448770;
      v124 = v88;
      v125 = 2050;
      *(_QWORD *)v126 = v89;
      *(_WORD *)&v126[8] = 2050;
      *(_QWORD *)&v126[10] = v90;
      *(_WORD *)&v126[18] = 2050;
      *(double *)&v126[20] = (double)v89 * 0.000000999999997;
      *(_WORD *)&v126[28] = 2050;
      *(double *)&v126[30] = v91;
      *(_WORD *)&v126[38] = 2050;
      *(double *)&v126[40] = v92;
      *(_WORD *)&v126[48] = 2050;
      *(double *)&v126[50] = v93;
      *(_WORD *)&v126[58] = 2050;
      *(double *)v127 = v94;
      v127[4] = 2050;
      *(double *)&v127[5] = v95;
      v127[9] = 2050;
      v128 = v97;
      v129 = 2050;
      v130 = v98;
      LODWORD(v112) = 112;
      _os_log_send_and_compose_impl(2, 0, &v131, 1628, &_mh_execute_header, qword_10229FFB8, 1, "[manager-%{public}s] read [%{public}llu %{public}llu], timeS [%{public}f %{public}f], first sample [%{public}f %{public}f %{public}f], last sample [%{public}f %{public}f %{public}f]", &v123, v112);
      v100 = (int *)v99;
      sub_100512490("Generic", 1, 0, 2, "virtual int CLBatchedAccelerometerClient::Client::read()", "%s\n", v99);
      if (v100 != &v131)
        free(v100);
    }
    *(double *)(v1 + 224) = (double)*v13;
  }
  v120 = 0;
  v121 = 0;
  v122 = 0;
  sub_100FA95F8((void **)&v120, (int)v7);
  v114 = v7;
  if ((int)v7 >= 1)
  {
    v33 = 0;
    v34 = 0;
    v117 = &v122;
    v35 = v114;
    *(_QWORD *)&v32 = 136446722;
    v116 = v32;
    *(_QWORD *)&v32 = 136446466;
    v115 = v32;
    v36 = v1;
    while (1)
    {
      v37 = &v119[20 * v33];
      v38 = *(_QWORD *)(v37 + 12);
      if (*(double *)(v1 + 152) <= (double)v38 * 0.000000999999997)
        break;
LABEL_61:
      if (++v33 == v35)
        goto LABEL_70;
    }
    if (v38 >= v34)
    {
      if (!v34)
      {
LABEL_44:
        v34 = *(_QWORD *)(v37 + 12);
        v47 = v121;
        if (v121 >= v122)
        {
          v50 = 0xCCCCCCCCCCCCCCCDLL * ((v121 - v120) >> 2);
          v51 = v50 + 1;
          if (v50 + 1 > 0xCCCCCCCCCCCCCCCLL)
            sub_100259694();
          if (0x999999999999999ALL * ((v122 - v120) >> 2) > v51)
            v51 = 0x999999999999999ALL * ((v122 - v120) >> 2);
          if (0xCCCCCCCCCCCCCCCDLL * ((v122 - v120) >> 2) >= 0x666666666666666)
            v52 = 0xCCCCCCCCCCCCCCCLL;
          else
            v52 = v51;
          if (v52)
            v53 = (char *)sub_1002F5388((uint64_t)v117, v52);
          else
            v53 = 0;
          v54 = &v53[20 * v50];
          v55 = *(_OWORD *)v37;
          *((_DWORD *)v54 + 4) = *((_DWORD *)v37 + 4);
          *(_OWORD *)v54 = v55;
          v57 = v120;
          v56 = v121;
          v58 = v54;
          if (v121 != v120)
          {
            do
            {
              v59 = *(_OWORD *)(v56 - 20);
              *((_DWORD *)v58 - 1) = *((_DWORD *)v56 - 1);
              *(_OWORD *)(v58 - 20) = v59;
              v58 -= 20;
              v56 -= 20;
            }
            while (v56 != v57);
            v56 = v120;
          }
          v49 = v54 + 20;
          v120 = v58;
          v121 = v54 + 20;
          v122 = &v53[20 * v52];
          if (v56)
            operator delete(v56);
        }
        else
        {
          v48 = *(_OWORD *)v37;
          *((_DWORD *)v121 + 4) = *((_DWORD *)v37 + 4);
          *(_OWORD *)v47 = v48;
          v49 = v47 + 20;
        }
        v121 = v49;
        goto LABEL_61;
      }
    }
    else
    {
      if (qword_10229FFB0 != -1)
        dispatch_once(&qword_10229FFB0, &stru_102197400);
      v39 = qword_10229FFB8;
      if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_ERROR))
      {
        v40 = v118;
        if (*(char *)(v36 + 143) < 0)
          v40 = (_QWORD *)*v118;
        v131 = v116;
        v132 = v40;
        v133 = 2048;
        *(_QWORD *)v134 = v38;
        *(_WORD *)&v134[8] = 2048;
        *(_QWORD *)&v134[10] = v34;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "[manager-%{public}s] time went backwards, current %llu, previous %llu", (uint8_t *)&v131, 0x20u);
      }
      v1 = v36;
      if (sub_1001BFF7C(115, 0))
      {
        bzero(&v131, 0x65CuLL);
        if (qword_10229FFB0 != -1)
          dispatch_once(&qword_10229FFB0, &stru_102197400);
        v41 = v118;
        if (*(char *)(v36 + 143) < 0)
          v41 = (_QWORD *)*v118;
        v123 = v116;
        v124 = v41;
        v125 = 2048;
        *(_QWORD *)v126 = v38;
        *(_WORD *)&v126[8] = 2048;
        *(_QWORD *)&v126[10] = v34;
        LODWORD(v112) = 32;
        _os_log_send_and_compose_impl(2, 0, &v131, 1628, &_mh_execute_header, qword_10229FFB8, 16, "[manager-%{public}s] time went backwards, current %llu, previous %llu", &v123, v112);
        v43 = (int *)v42;
        sub_100512490("Generic", 1, 0, 0, "virtual int CLBatchedAccelerometerClient::Client::read()", "%s\n", v42);
        if (v43 != &v131)
          free(v43);
        v1 = v36;
      }
    }
    v44 = (double)(v38 - v34) / 1000000.0;
    if (v44 > v8 * 1.5)
    {
      if (qword_10229FFB0 != -1)
        dispatch_once(&qword_10229FFB0, &stru_102197400);
      v45 = qword_10229FFB8;
      if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_ERROR))
      {
        v46 = v118;
        if (*(char *)(v36 + 143) < 0)
          v46 = (_QWORD *)*v118;
        v131 = v115;
        v132 = v46;
        v133 = 2050;
        *(double *)v134 = 1.0 / v44;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_ERROR, "[manager-%{public}s] wrong frequency read, %{public}f", (uint8_t *)&v131, 0x16u);
      }
      v1 = v36;
      if (sub_1001BFF7C(115, 0))
      {
        bzero(&v131, 0x65CuLL);
        if (qword_10229FFB0 != -1)
          dispatch_once(&qword_10229FFB0, &stru_102197400);
        v60 = v118;
        if (*(char *)(v36 + 143) < 0)
          v60 = (_QWORD *)*v118;
        v123 = v115;
        v124 = v60;
        v125 = 2050;
        *(double *)v126 = 1.0 / v44;
        LODWORD(v112) = 22;
        _os_log_send_and_compose_impl(2, 0, &v131, 1628, &_mh_execute_header, qword_10229FFB8, 16, "[manager-%{public}s] wrong frequency read, %{public}f", &v123, v112);
        v62 = (int *)v61;
        sub_100512490("Generic", 1, 0, 0, "virtual int CLBatchedAccelerometerClient::Client::read()", "%s\n", v61);
        if (v62 != &v131)
          free(v62);
        v1 = v36;
      }
    }
    goto LABEL_44;
  }
LABEL_70:
  v63 = v120;
  v64 = v121;
  if (v120 == v121)
  {
    v67 = 0;
  }
  else
  {
    v65 = *(double *)(v1 + 160) * 1000000.0;
    v66 = v120;
    do
    {
      *(_QWORD *)(v66 + 12) -= (unint64_t)v65;
      v66 += 20;
    }
    while (v66 != v64);
    v67 = 0xCCCCCCCCCCCCCCCDLL * ((v64 - v63) >> 2);
    v68 = *(_QWORD *)(v1 + 176) + (int)v67;
    ++*(_QWORD *)(v1 + 168);
    *(_QWORD *)(v1 + 176) = v68;
    v69 = v114;
    if (qword_10229FFB0 != -1)
      dispatch_once(&qword_10229FFB0, &stru_102197400);
    v70 = qword_10229FFB8;
    if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_DEFAULT))
    {
      v71 = v118;
      if (*(char *)(v1 + 143) < 0)
        v71 = (_QWORD *)*v118;
      v72 = *(_QWORD *)(v120 + 12);
      v73 = *((_QWORD *)v121 - 1);
      v74 = *(_QWORD *)(v1 + 168);
      v75 = *(_QWORD *)(v1 + 176);
      v131 = 136448258;
      v132 = v71;
      v133 = 2050;
      *(_QWORD *)v134 = v72;
      *(_WORD *)&v134[8] = 2050;
      *(_QWORD *)&v134[10] = v73;
      *(_WORD *)&v134[18] = 2050;
      *(double *)&v134[20] = (double)v72 * 0.000000999999997;
      *(_WORD *)&v134[28] = 2050;
      *(double *)&v134[30] = (double)v73 * 0.000000999999997;
      *(_WORD *)&v134[38] = 1026;
      *(_DWORD *)&v134[40] = v69;
      *(_WORD *)&v134[44] = 1026;
      *(_DWORD *)&v134[46] = v67;
      *(_WORD *)&v134[50] = 2050;
      *(_QWORD *)&v134[52] = v74;
      v135[0] = 2050;
      *(_QWORD *)&v135[1] = v75;
      _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEFAULT, "[manager-%{public}s] notifying [%{public}llu %{public}llu], timeS [%{public}f %{public}f], trimmed from %{public}d to %{public}d, batch num %{public}llu, sample num %{public}llu", (uint8_t *)&v131, 0x54u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&v131, 0x65CuLL);
      if (qword_10229FFB0 != -1)
        dispatch_once(&qword_10229FFB0, &stru_102197400);
      v101 = v118;
      if (*(char *)(v1 + 143) < 0)
        v101 = (_QWORD *)*v118;
      v102 = *(_QWORD *)(v120 + 12);
      v103 = *((_QWORD *)v121 - 1);
      v104 = *(_QWORD *)(v1 + 168);
      v105 = *(_QWORD *)(v1 + 176);
      v123 = 136448258;
      v124 = v101;
      v125 = 2050;
      *(_QWORD *)v126 = v102;
      *(_WORD *)&v126[8] = 2050;
      *(_QWORD *)&v126[10] = v103;
      *(_WORD *)&v126[18] = 2050;
      *(double *)&v126[20] = (double)v102 * 0.000000999999997;
      *(_WORD *)&v126[28] = 2050;
      *(double *)&v126[30] = (double)v103 * 0.000000999999997;
      *(_WORD *)&v126[38] = 1026;
      *(_DWORD *)&v126[40] = v69;
      *(_WORD *)&v126[44] = 1026;
      *(_DWORD *)&v126[46] = v67;
      *(_WORD *)&v126[50] = 2050;
      *(_QWORD *)&v126[52] = v104;
      v127[0] = 2050;
      *(_QWORD *)&v127[1] = v105;
      LODWORD(v112) = 84;
      _os_log_send_and_compose_impl(2, 0, &v131, 1628, &_mh_execute_header, qword_10229FFB8, 0, "[manager-%{public}s] notifying [%{public}llu %{public}llu], timeS [%{public}f %{public}f], trimmed from %{public}d to %{public}d, batch num %{public}llu, sample num %{public}llu", &v123, v112);
      v107 = (int *)v106;
      sub_100512490("Generic", 1, 0, 2, "virtual int CLBatchedAccelerometerClient::Client::read()", "%s\n", v106);
      if (v107 != &v131)
        free(v107);
    }
    v76 = ((double)*(unint64_t *)(v120 + 12) - *(double *)(v1 + 184)) / 1000000.0;
    if (v76 > v8 * 1.5)
    {
      if (qword_10229FFB0 != -1)
        dispatch_once(&qword_10229FFB0, &stru_102197400);
      v77 = qword_10229FFB8;
      if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_ERROR))
      {
        v78 = v118;
        if (*(char *)(v1 + 143) < 0)
          v78 = (_QWORD *)*v118;
        v79 = *(double *)(v1 + 184) * 0.000001;
        v80 = (double)*((unint64_t *)v121 - 1) * 0.000001;
        v131 = 136446978;
        v132 = v78;
        v133 = 2050;
        *(double *)v134 = v76;
        *(_WORD *)&v134[8] = 2050;
        *(double *)&v134[10] = v79;
        *(_WORD *)&v134[18] = 2050;
        *(double *)&v134[20] = v80;
        _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_ERROR, "[manager-%{public}s] gap between batches, %{public}f, last batch %{public}f, current batch %{public}f", (uint8_t *)&v131, 0x2Au);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(&v131, 0x65CuLL);
        if (qword_10229FFB0 != -1)
          dispatch_once(&qword_10229FFB0, &stru_102197400);
        if (*(char *)(v1 + 143) < 0)
          v118 = (_QWORD *)*v118;
        v108 = *(double *)(v1 + 184) * 0.000001;
        v109 = (double)*((unint64_t *)v121 - 1) * 0.000001;
        v123 = 136446978;
        v124 = v118;
        v125 = 2050;
        *(double *)v126 = v76;
        *(_WORD *)&v126[8] = 2050;
        *(double *)&v126[10] = v108;
        *(_WORD *)&v126[18] = 2050;
        *(double *)&v126[20] = v109;
        LODWORD(v112) = 42;
        _os_log_send_and_compose_impl(2, 0, &v131, 1628, &_mh_execute_header, qword_10229FFB8, 16, "[manager-%{public}s] gap between batches, %{public}f, last batch %{public}f, current batch %{public}f", &v123, v112);
        v111 = (int *)v110;
        sub_100512490("Generic", 1, 0, 0, "virtual int CLBatchedAccelerometerClient::Client::read()", "%s\n", v110);
        if (v111 != &v131)
          free(v111);
      }
    }
    *(double *)(v1 + 184) = (double)*((unint64_t *)v121 - 1);
  }
  v131 = v67;
  v81 = *(_QWORD *)(v1 + 216);
  if (!v81)
    sub_10025FD1C();
  (*(void (**)(uint64_t, char **, int *))(*(_QWORD *)v81 + 48))(v81, &v120, &v131);
  if (v120)
  {
    v121 = v120;
    operator delete(v120);
  }
  return v67;
}

void sub_100FA95B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 72);
  if (v3)
  {
    *(_QWORD *)(v1 + 80) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100FA95F8(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - (_BYTE *)*a1) >> 2) < a2)
  {
    if (a2 >= 0xCCCCCCCCCCCCCCDLL)
      sub_100259694();
    v5 = ((_BYTE *)a1[1] - (_BYTE *)*a1) / 20;
    v6 = (char *)sub_1002F5388(v3, a2);
    v7 = &v6[20 * v5];
    v9 = &v6[20 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *(_OWORD *)(v10 - 20);
        *((_DWORD *)v12 - 1) = *((_DWORD *)v10 - 1);
        *(_OWORD *)(v12 - 20) = v13;
        v12 -= 20;
        v10 -= 20;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t sub_100FA96D0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_1021973D0;
  v2 = a1 + 24;
  v3 = (_QWORD *)a1[27];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return sub_100B917A8((uint64_t)a1);
}

void sub_100FA972C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_1021973D0;
  v2 = a1 + 24;
  v3 = (_QWORD *)a1[27];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  sub_100B917A8((uint64_t)a1);
  operator delete();
}

void sub_100FA979C(id a1)
{
  qword_10229FFB8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "BatchedSensor");
}

uint64_t sub_100FA97C8()
{
  sub_1015A2E04(qword_1023093E0, "Acc800Fp");
  dword_1023093F8 = 800;
  __cxa_atexit((void (*)(void *))sub_1005CB0EC, qword_1023093E0, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102309400, "DmFp");
  dword_102309418 = 200;
  return __cxa_atexit((void (*)(void *))sub_1005CB0EC, qword_102309400, (void *)&_mh_execute_header);
}

BOOL *sub_100FA9854(BOOL *a1)
{
  uint64_t v2;
  int v3;
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  NSObject *v8;
  _BOOL4 v9;
  _BOOL4 v11;
  const char *v12;
  uint8_t *v13;
  _DWORD v14[4];
  uint8_t buf[8];
  std::__shared_weak_count *v16;

  *a1 = 0;
  v2 = sub_100127B9C();
  sub_100081C10(v2, buf);
  v3 = sub_1001E4874(*(uint64_t *)buf, "HRR_UseWorkoutEndTimeForRecoveryOnset", a1);
  v4 = v3;
  v5 = v16;
  if (!v16)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (!v4)
      return a1;
  }
  else
  {
LABEL_5:
    if (!v3)
      return a1;
  }
  if (qword_10229FF60 != -1)
    dispatch_once(&qword_10229FF60, &stru_102197420);
  v8 = qword_10229FF68;
  if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_DEFAULT))
  {
    v9 = *a1;
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "CLHRPeakEstimator,fUseWorkoutEndTimeForRecoveryOnset overridden (%{public}d)", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF60 != -1)
      dispatch_once(&qword_10229FF60, &stru_102197420);
    v11 = *a1;
    v14[0] = 67240192;
    v14[1] = v11;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 0, "CLHRPeakEstimator,fUseWorkoutEndTimeForRecoveryOnset overridden (%{public}d)", v14, 8);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "CLHRPeakEstimator::CLHRPeakEstimator()", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  return a1;
}

void sub_100FA9A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100FA9A98(_BYTE *a1, uint64_t a2, uint64_t *a3, __int128 **a4)
{
  uint64_t v6;
  int v7;
  uint64_t result;

  sub_100FA9B00(a1, a2, a4);
  if (*(double *)(a2 + 56) == 0.0)
  {
    v7 = 5;
LABEL_5:
    result = 0;
    *(_DWORD *)a2 = v7;
    return result;
  }
  sub_100FAAF30(v6, a2, a3);
  if (*(double *)(a2 + 64) == 0.0)
  {
    v7 = 6;
    goto LABEL_5;
  }
  return 1;
}

void sub_100FA9B00(_BYTE *a1, uint64_t a2, __int128 **a3)
{
  double v3;
  double v4;
  __int128 *v5;
  __int128 *v6;
  char *v7;
  int v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char *v27;
  int v28;
  double v29;
  NSObject *v30;
  const char *v31;
  char *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  char *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  char *v49;
  double v50;
  double v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  char *v64;
  int v65;
  double v66;
  NSObject *v67;
  double v68;
  const char *v69;
  char *v70;
  NSObject *v71;
  double v72;
  double v73;
  int v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  _QWORD *v83;
  uint64_t v84;
  char *v85;
  double *v86;
  void *v87;
  uint64_t v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double *v94;
  double *v95;
  double *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  double *v102;
  uint64_t v103;
  NSObject *v104;
  const char *v105;
  char *v106;
  double *v107;
  double *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  NSObject *v114;
  uint64_t v115;
  uint64_t v116;
  const char *v117;
  char *v118;
  uint64_t v120;
  int v121;
  unint64_t v122;
  double v123;
  unint64_t v124;
  NSObject *v125;
  char *v126;
  double *v127;
  double v128;
  int v129;
  double v130;
  double v132;
  double v133;
  double v134;
  double v135;
  const char *v136;
  char *v137;
  const char *v138;
  char *v139;
  uint64_t v140;
  __int128 *v142;
  uint64_t v143;
  double *v144;
  double *v145;
  double *v146;
  void *__p;
  char *v148;
  char *v149;
  int v150;
  _BYTE v151[10];
  _BYTE v152[10];
  _OWORD v153[2];
  _BYTE v154[24];
  double v155;
  _BYTE buf[14];
  _BYTE v157[10];
  double v158;

  v3 = *(double *)(a2 + 48);
  if (*a1)
  {
    *(double *)(a2 + 56) = v3;
    return;
  }
  v4 = v3 + -180.0;
  __p = 0;
  v148 = 0;
  v149 = 0;
  v6 = *a3;
  v5 = a3[1];
  if (*a3 == v5)
  {
    v65 = 0;
    v12 = 0.0;
    v11 = 0.0;
    v10 = 0.0;
    v68 = 0.0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = 0.0;
    v10 = 0.0;
    v11 = 0.0;
    v12 = 0.0;
    v13 = 0.0;
    v142 = a3[1];
    do
    {
      v14 = *((double *)v6 + 1);
      if (v14 > v4)
      {
        if (v13 == 0.0 || v9 == 0.0)
          goto LABEL_43;
        if (*((double *)v6 + 2) < v13)
          v13 = *((double *)v6 + 2);
        if (v9 + 3.84 >= v14)
        {
LABEL_43:
          v28 = v8;
        }
        else
        {
          do
          {
            v9 = v9 + 2.56;
            v15 = v148;
            if (v148 >= v149)
            {
              v17 = (char *)__p;
              v18 = 0x6DB6DB6DB6DB6DB7 * ((v148 - (_BYTE *)__p) >> 3);
              v19 = v18 + 1;
              if ((unint64_t)(v18 + 1) > 0x492492492492492)
                sub_100259694();
              if (0xDB6DB6DB6DB6DB6ELL * ((v149 - (_BYTE *)__p) >> 3) > v19)
                v19 = 0xDB6DB6DB6DB6DB6ELL * ((v149 - (_BYTE *)__p) >> 3);
              if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v149 - (_BYTE *)__p) >> 3)) >= 0x249249249249249)
                v20 = 0x492492492492492;
              else
                v20 = v19;
              if (v20)
              {
                v21 = (char *)sub_10025B800((uint64_t)&v149, v20);
                v17 = (char *)__p;
                v15 = v148;
              }
              else
              {
                v21 = 0;
              }
              v22 = &v21[8 * ((v148 - (_BYTE *)__p) >> 3)];
              *(_QWORD *)v22 = 0;
              *((double *)v22 + 1) = v9;
              *((double *)v22 + 2) = v13;
              *((_DWORD *)v22 + 6) = 0;
              *((_QWORD *)v22 + 4) = 0;
              *((_QWORD *)v22 + 5) = 0;
              *((_DWORD *)v22 + 12) = 3;
              if (v15 == v17)
              {
                v27 = &v21[56 * v18];
              }
              else
              {
                v23 = &v21[56 * v18];
                do
                {
                  v24 = *(_OWORD *)(v15 - 56);
                  v25 = *(_OWORD *)(v15 - 40);
                  v26 = *(_OWORD *)(v15 - 24);
                  v27 = v23 - 56;
                  *((_DWORD *)v23 - 2) = *((_DWORD *)v15 - 2);
                  *(_OWORD *)(v23 - 24) = v26;
                  *(_OWORD *)(v23 - 40) = v25;
                  *(_OWORD *)(v23 - 56) = v24;
                  v15 -= 56;
                  v23 -= 56;
                }
                while (v15 != v17);
              }
              v16 = v22 + 56;
              __p = v27;
              v148 = v22 + 56;
              v149 = &v21[56 * v20];
              if (v17)
                operator delete(v17);
            }
            else
            {
              *(_QWORD *)v148 = 0;
              *((double *)v15 + 1) = v9;
              *((double *)v15 + 2) = v13;
              *((_DWORD *)v15 + 6) = 0;
              *((_QWORD *)v15 + 4) = 0;
              *((_QWORD *)v15 + 5) = 0;
              v16 = v15 + 56;
              *((_DWORD *)v15 + 12) = 3;
            }
            v148 = v16;
            v28 = v8 + 1;
            if (v8)
            {
              v29 = v13 - v10;
              v10 = v10 + (v13 - v10) / (double)v28;
              v12 = v11 + v29 * (v13 - v10);
              v11 = v12;
            }
            else
            {
              v11 = 0.0;
              v10 = v13;
            }
            if (qword_10229FF60 != -1)
              dispatch_once(&qword_10229FF60, &stru_102197420);
            v30 = qword_10229FF68;
            if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 134283777;
              *(double *)&buf[4] = v9;
              *(_WORD *)&buf[12] = 2049;
              *(double *)v157 = v13;
              _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "CLHRPeakEstimator::estimateRecoveryOnset,fillerEntry.startTime,%{private}f,fillerEntry.mets,%{private}f", buf, 0x16u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_10229FF60 != -1)
                dispatch_once(&qword_10229FF60, &stru_102197420);
              *(_DWORD *)v154 = 134283777;
              *(double *)&v154[4] = v9;
              *(_WORD *)&v154[12] = 2049;
              *(double *)&v154[14] = v13;
              LODWORD(v140) = 22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 2, "CLHRPeakEstimator::estimateRecoveryOnset,fillerEntry.startTime,%{private}f,fillerEntry.mets,%{private}f", v154, v140);
              v32 = (char *)v31;
              sub_100512490("Generic", 1, 0, 2, "void CLHRPeakEstimator::estimateRecoveryOnset(HRRecoveryResult &, const std::vector<HRRecoveryInputWR> &)", "%s\n", v31);
              if (v32 != buf)
                free(v32);
            }
            v8 = v28;
          }
          while (v9 + 3.84 < *((double *)v6 + 1));
          v7 = v148;
        }
        if (v7 >= v149)
        {
          v36 = (char *)__p;
          v37 = 0x6DB6DB6DB6DB6DB7 * ((v7 - (_BYTE *)__p) >> 3);
          v38 = v37 + 1;
          if ((unint64_t)(v37 + 1) > 0x492492492492492)
            sub_100259694();
          if (0xDB6DB6DB6DB6DB6ELL * ((v149 - (_BYTE *)__p) >> 3) > v38)
            v38 = 0xDB6DB6DB6DB6DB6ELL * ((v149 - (_BYTE *)__p) >> 3);
          if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v149 - (_BYTE *)__p) >> 3)) >= 0x249249249249249)
            v39 = 0x492492492492492;
          else
            v39 = v38;
          if (v39)
          {
            v40 = (char *)sub_10025B800((uint64_t)&v149, v39);
            v36 = (char *)__p;
            v7 = v148;
          }
          else
          {
            v40 = 0;
          }
          v41 = &v40[56 * v37];
          v42 = *v6;
          v43 = v6[1];
          v44 = v6[2];
          *((_QWORD *)v41 + 6) = *((_QWORD *)v6 + 6);
          *((_OWORD *)v41 + 1) = v43;
          *((_OWORD *)v41 + 2) = v44;
          *(_OWORD *)v41 = v42;
          if (v7 == v36)
          {
            v49 = &v40[56 * v37];
          }
          else
          {
            v45 = &v40[56 * v37];
            do
            {
              v46 = *(_OWORD *)(v7 - 56);
              v47 = *(_OWORD *)(v7 - 40);
              v48 = *(_OWORD *)(v7 - 24);
              v49 = v45 - 56;
              *((_DWORD *)v45 - 2) = *((_DWORD *)v7 - 2);
              *(_OWORD *)(v45 - 24) = v48;
              *(_OWORD *)(v45 - 40) = v47;
              *(_OWORD *)(v45 - 56) = v46;
              v7 -= 56;
              v45 -= 56;
            }
            while (v7 != v36);
          }
          v7 = v41 + 56;
          __p = v49;
          v148 = v41 + 56;
          v149 = &v40[56 * v39];
          if (v36)
            operator delete(v36);
        }
        else
        {
          v33 = *v6;
          v34 = v6[1];
          v35 = v6[2];
          *((_QWORD *)v7 + 6) = *((_QWORD *)v6 + 6);
          *((_OWORD *)v7 + 1) = v34;
          *((_OWORD *)v7 + 2) = v35;
          *(_OWORD *)v7 = v33;
          v7 += 56;
        }
        v148 = v7;
        v13 = *((double *)v6 + 2);
        v8 = v28 + 1;
        if (v28)
        {
          v50 = v13 - v10;
          v10 = v10 + (v13 - v10) / (double)v8;
          v12 = v11 + v50 * (v13 - v10);
          v11 = v12;
        }
        else
        {
          v11 = 0.0;
          v10 = *((double *)v6 + 2);
        }
        v9 = *((double *)v6 + 1);
        v5 = v142;
      }
      v6 = (__int128 *)((char *)v6 + 56);
    }
    while (v6 != v5);
    if (v9 <= 0.0 || (v51 = v9 + 2.56, v51 >= *(double *)(a2 + 8)))
    {
      v65 = v8;
      v68 = v10;
    }
    else
    {
      do
      {
        v52 = v148;
        if (v148 >= v149)
        {
          v54 = (char *)__p;
          v55 = 0x6DB6DB6DB6DB6DB7 * ((v148 - (_BYTE *)__p) >> 3);
          v56 = v55 + 1;
          if ((unint64_t)(v55 + 1) > 0x492492492492492)
            sub_100259694();
          if (0xDB6DB6DB6DB6DB6ELL * ((v149 - (_BYTE *)__p) >> 3) > v56)
            v56 = 0xDB6DB6DB6DB6DB6ELL * ((v149 - (_BYTE *)__p) >> 3);
          if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v149 - (_BYTE *)__p) >> 3)) >= 0x249249249249249)
            v57 = 0x492492492492492;
          else
            v57 = v56;
          if (v57)
          {
            v58 = (char *)sub_10025B800((uint64_t)&v149, v57);
            v54 = (char *)__p;
            v52 = v148;
          }
          else
          {
            v58 = 0;
          }
          v59 = &v58[8 * ((v148 - (_BYTE *)__p) >> 3)];
          *(_QWORD *)v59 = 0;
          *((double *)v59 + 1) = v51;
          *((double *)v59 + 2) = v13;
          *((_DWORD *)v59 + 6) = 0;
          *((_QWORD *)v59 + 4) = 0;
          *((_QWORD *)v59 + 5) = 0;
          *((_DWORD *)v59 + 12) = 3;
          if (v52 == v54)
          {
            v64 = &v58[56 * v55];
          }
          else
          {
            v60 = &v58[56 * v55];
            do
            {
              v61 = *(_OWORD *)(v52 - 56);
              v62 = *(_OWORD *)(v52 - 40);
              v63 = *(_OWORD *)(v52 - 24);
              v64 = v60 - 56;
              *((_DWORD *)v60 - 2) = *((_DWORD *)v52 - 2);
              *(_OWORD *)(v60 - 24) = v63;
              *(_OWORD *)(v60 - 40) = v62;
              *(_OWORD *)(v60 - 56) = v61;
              v52 -= 56;
              v60 -= 56;
            }
            while (v52 != v54);
          }
          v53 = v59 + 56;
          __p = v64;
          v148 = v59 + 56;
          v149 = &v58[56 * v57];
          if (v54)
            operator delete(v54);
        }
        else
        {
          *(_QWORD *)v148 = 0;
          *((double *)v52 + 1) = v51;
          *((double *)v52 + 2) = v13;
          *((_DWORD *)v52 + 6) = 0;
          *((_QWORD *)v52 + 4) = 0;
          *((_QWORD *)v52 + 5) = 0;
          v53 = v52 + 56;
          *((_DWORD *)v52 + 12) = 3;
        }
        v148 = v53;
        v65 = v8 + 1;
        if (v8)
        {
          v66 = v13 - v10;
          v10 = v10 + (v13 - v10) / (double)v65;
          v12 = v11 + v66 * (v13 - v10);
          v11 = v12;
        }
        else
        {
          v11 = 0.0;
          v10 = v13;
        }
        if (qword_10229FF60 != -1)
          dispatch_once(&qword_10229FF60, &stru_102197420);
        v67 = qword_10229FF68;
        if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134283777;
          *(double *)&buf[4] = v51;
          *(_WORD *)&buf[12] = 2049;
          *(double *)v157 = v13;
          _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEBUG, "CLHRPeakEstimator::estimateRecoveryOnset,fillerEntry.startTime,%{private}f,fillerEntry.mets,%{private}f", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FF60 != -1)
            dispatch_once(&qword_10229FF60, &stru_102197420);
          *(_DWORD *)v154 = 134283777;
          *(double *)&v154[4] = v51;
          *(_WORD *)&v154[12] = 2049;
          *(double *)&v154[14] = v13;
          LODWORD(v140) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 2, "CLHRPeakEstimator::estimateRecoveryOnset,fillerEntry.startTime,%{private}f,fillerEntry.mets,%{private}f", v154, v140);
          v70 = (char *)v69;
          sub_100512490("Generic", 1, 0, 2, "void CLHRPeakEstimator::estimateRecoveryOnset(HRRecoveryResult &, const std::vector<HRRecoveryInputWR> &)", "%s\n", v69);
          if (v70 != buf)
            free(v70);
        }
        v51 = v51 + 2.56;
        v8 = v65;
        v68 = v10;
      }
      while (v51 < *(double *)(a2 + 8));
    }
  }
  if (qword_10229FF60 != -1)
    dispatch_once(&qword_10229FF60, &stru_102197420);
  v71 = qword_10229FF68;
  if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_DEBUG))
  {
    if (v65 < 2)
    {
      v72 = 0.0;
      v73 = 0.0;
      if (v65 != 1)
      {
LABEL_110:
        *(_DWORD *)buf = 134284033;
        *(double *)&buf[4] = v4;
        *(_WORD *)&buf[12] = 2049;
        *(double *)v157 = v72;
        *(_WORD *)&v157[8] = 2049;
        v158 = v73;
        _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEBUG, "CLHRPeakEstimator::estimateRecoveryOnset,recoveryOnsetWindowStart,%{private}f,metsStdDev,%{private}f,metsMean,%{private}f", buf, 0x20u);
        goto LABEL_111;
      }
    }
    else
    {
      v72 = sqrt(v12 / (double)(v65 - 1));
    }
    v73 = v10;
    goto LABEL_110;
  }
LABEL_111:
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF60 != -1)
      dispatch_once(&qword_10229FF60, &stru_102197420);
    if (v65 < 2)
    {
      v134 = 0.0;
      v135 = 0.0;
      if (v65 != 1)
        goto LABEL_235;
    }
    else
    {
      v134 = sqrt(v12 / (double)(v65 - 1));
    }
    v135 = v10;
LABEL_235:
    *(_DWORD *)v154 = 134284033;
    *(double *)&v154[4] = v4;
    *(_WORD *)&v154[12] = 2049;
    *(double *)&v154[14] = v134;
    *(_WORD *)&v154[22] = 2049;
    v155 = v135;
    LODWORD(v140) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 2, "CLHRPeakEstimator::estimateRecoveryOnset,recoveryOnsetWindowStart,%{private}f,metsStdDev,%{private}f,metsMean,%{private}f", v154, v140);
    v137 = (char *)v136;
    sub_100512490("Generic", 1, 0, 2, "void CLHRPeakEstimator::estimateRecoveryOnset(HRRecoveryResult &, const std::vector<HRRecoveryInputWR> &)", "%s\n", v136);
    if (v137 != buf)
      free(v137);
  }
  *(_QWORD *)buf = 0x3FF6A09E60000000;
  sub_10025E5E0(v154, 0x18uLL, buf);
  v74 = 0;
  v75 = *(_QWORD **)&v154[8];
  do
  {
    if ((unint64_t)v75 >= *(_QWORD *)&v154[16])
    {
      v76 = *(_QWORD **)v154;
      v77 = ((uint64_t)v75 - *(_QWORD *)v154) >> 3;
      v78 = v77 + 1;
      if ((unint64_t)(v77 + 1) >> 61)
        sub_100259694();
      v79 = *(_QWORD *)&v154[16] - *(_QWORD *)v154;
      if ((uint64_t)(*(_QWORD *)&v154[16] - *(_QWORD *)v154) >> 2 > v78)
        v78 = v79 >> 2;
      if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF8)
        v80 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v80 = v78;
      if (v80)
      {
        v81 = (char *)sub_10025E6A0((uint64_t)&v154[16], v80);
        v76 = *(_QWORD **)v154;
        v75 = *(_QWORD **)&v154[8];
      }
      else
      {
        v81 = 0;
      }
      v82 = &v81[8 * v77];
      *(_QWORD *)v82 = 0xBFE6A09E60000000;
      v83 = v82 + 8;
      while (v75 != v76)
      {
        v84 = *--v75;
        *((_QWORD *)v82 - 1) = v84;
        v82 -= 8;
      }
      *(_QWORD *)v154 = v82;
      *(_QWORD *)&v154[8] = v83;
      *(_QWORD *)&v154[16] = &v81[8 * v80];
      if (v76)
        operator delete(v76);
      v75 = v83;
    }
    else
    {
      *v75++ = 0xBFE6A09E60000000;
    }
    *(_QWORD *)&v154[8] = v75;
    ++v74;
  }
  while (v74 != 48);
  v86 = (double *)__p;
  v85 = v148;
  v87 = *(void **)v154;
  v88 = (uint64_t)v75 - *(_QWORD *)v154;
  if (0x6DB6DB6DB6DB6DB7 * ((v148 - (_BYTE *)__p) >> 3) >= (unint64_t)(((uint64_t)v75 - *(_QWORD *)v154) >> 3))
  {
    v89 = 0.0;
    if (v65 >= 2)
      v89 = v12 / (double)(v65 - 1);
    if (sqrt(v89) != 0.0)
    {
      v144 = 0;
      v145 = 0;
      v146 = 0;
      if (__p == v148)
      {
        v108 = 0;
        v107 = 0;
      }
      else
      {
        v90 = v12 / (double)(v65 - 1);
        if (v65 >= 1)
          v91 = v10;
        else
          v91 = 0.0;
        if (v65 < 2)
          v90 = 0.0;
        v92 = sqrt(v90) * (double)v65;
        do
        {
          v93 = (v86[2] - v91) / v92;
          v94 = v145;
          if (v145 >= v146)
          {
            v96 = v144;
            v97 = v145 - v144;
            v98 = v97 + 1;
            if ((unint64_t)(v97 + 1) >> 61)
              sub_100259694();
            v99 = (char *)v146 - (char *)v144;
            if (((char *)v146 - (char *)v144) >> 2 > v98)
              v98 = v99 >> 2;
            if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFF8)
              v100 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v100 = v98;
            if (v100)
            {
              v101 = (char *)sub_10025E6A0((uint64_t)&v146, v100);
              v96 = v144;
              v94 = v145;
            }
            else
            {
              v101 = 0;
            }
            v102 = (double *)&v101[8 * v97];
            *v102 = v93;
            v95 = v102 + 1;
            while (v94 != v96)
            {
              v103 = *((_QWORD *)v94-- - 1);
              *((_QWORD *)v102-- - 1) = v103;
            }
            v144 = v102;
            v146 = (double *)&v101[8 * v100];
            if (v96)
              operator delete(v96);
          }
          else
          {
            *v145 = v93;
            v95 = v145 + 1;
          }
          v145 = v95;
          if (qword_10229FF60 != -1)
            dispatch_once(&qword_10229FF60, &stru_102197420);
          v104 = qword_10229FF68;
          if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 134283521;
            *(double *)&buf[4] = v93;
            _os_log_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_DEBUG, "CLHRPeakEstimator::estimateRecoveryOnset,normalizedMetsValue,%{private}f", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FF60 != -1)
              dispatch_once(&qword_10229FF60, &stru_102197420);
            LODWORD(v153[0]) = 134283521;
            *(double *)((char *)v153 + 4) = v93;
            LODWORD(v140) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 2, "CLHRPeakEstimator::estimateRecoveryOnset,normalizedMetsValue,%{private}f", v153, v140);
            v106 = (char *)v105;
            sub_100512490("Generic", 1, 0, 2, "void CLHRPeakEstimator::estimateRecoveryOnset(HRRecoveryResult &, const std::vector<HRRecoveryInputWR> &)", "%s\n", v105);
            if (v106 != buf)
              free(v106);
          }
          v86 += 7;
        }
        while (v86 != (double *)v85);
        v108 = v144;
        v107 = v145;
        v88 = *(_QWORD *)&v154[8] - *(_QWORD *)v154;
      }
      v143 = v107 - v108 - (v88 >> 3);
      *(_QWORD *)buf = 0;
      sub_10025E5E0(v153, v143 + 1, buf);
      if (v143 != -1)
      {
        v109 = 0;
        v110 = 0;
        v111 = *(_QWORD *)v154;
        v112 = *(_QWORD *)&v154[8];
        do
        {
          if (v112 == v111)
          {
            v112 = v111;
          }
          else
          {
            v113 = 0;
            do
            {
              *(double *)(*(_QWORD *)&v153[0] + 8 * v110) = *(double *)(*(_QWORD *)&v153[0] + 8 * v110)
                                                          + *(double *)(v111 + 8 * v113) * v144[v109 + v113];
              if (qword_10229FF60 != -1)
                dispatch_once(&qword_10229FF60, &stru_102197420);
              v114 = qword_10229FF68;
              if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_DEBUG))
              {
                v115 = *(_QWORD *)(*(_QWORD *)&v153[0] + 8 * v110);
                *(_DWORD *)buf = 67175169;
                *(_DWORD *)&buf[4] = v110;
                *(_WORD *)&buf[8] = 1025;
                *(_DWORD *)&buf[10] = v113;
                *(_WORD *)v157 = 2049;
                *(_QWORD *)&v157[2] = v115;
                _os_log_impl((void *)&_mh_execute_header, v114, OS_LOG_TYPE_DEBUG, "CLHRPeakEstimator::estimateRecoveryOnset,l,%{private}d,i,%{private}d,xCorrVals[l],%{private}f", buf, 0x18u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_10229FF60 != -1)
                  dispatch_once(&qword_10229FF60, &stru_102197420);
                v116 = *(_QWORD *)(*(_QWORD *)&v153[0] + 8 * v110);
                v150 = 67175169;
                *(_DWORD *)v151 = v110;
                *(_WORD *)&v151[4] = 1025;
                *(_DWORD *)&v151[6] = v113;
                *(_WORD *)v152 = 2049;
                *(_QWORD *)&v152[2] = v116;
                LODWORD(v140) = 24;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 2, "CLHRPeakEstimator::estimateRecoveryOnset,l,%{private}d,i,%{private}d,xCorrVals[l],%{private}f", &v150, v140);
                v118 = (char *)v117;
                sub_100512490("Generic", 1, 0, 2, "void CLHRPeakEstimator::estimateRecoveryOnset(HRRecoveryResult &, const std::vector<HRRecoveryInputWR> &)", "%s\n", v117);
                if (v118 != buf)
                  free(v118);
              }
              ++v113;
              v111 = *(_QWORD *)v154;
              v112 = *(_QWORD *)&v154[8];
            }
            while (v113 < (uint64_t)(*(_QWORD *)&v154[8] - *(_QWORD *)v154) >> 3);
          }
          ++v109;
        }
        while (v110++ != v143);
      }
      if (*((_QWORD *)&v153[0] + 1) == *(_QWORD *)&v153[0])
      {
        v121 = 0;
        v123 = 0.0;
      }
      else
      {
        v120 = 0;
        v121 = 0;
        v122 = (uint64_t)(*((_QWORD *)&v153[0] + 1) - *(_QWORD *)&v153[0]) >> 3;
        if (v122 <= 1)
          v122 = 1;
        v123 = 0.0;
        do
        {
          if (*(double *)(*(_QWORD *)&v153[0] + 8 * v120) > v123)
          {
            v123 = *(double *)(*(_QWORD *)&v153[0] + 8 * v120);
            v121 = v120;
          }
          ++v120;
        }
        while (v122 != v120);
      }
      v124 = v121 + 24;
      if (qword_10229FF60 != -1)
        dispatch_once(&qword_10229FF60, &stru_102197420);
      v125 = qword_10229FF68;
      if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134284033;
        *(double *)&buf[4] = v123;
        *(_WORD *)&buf[12] = 1025;
        *(_DWORD *)v157 = v121;
        *(_WORD *)&v157[4] = 1025;
        *(_DWORD *)&v157[6] = v121 + 24;
        _os_log_impl((void *)&_mh_execute_header, v125, OS_LOG_TYPE_DEBUG, "CLHRPeakEstimator::estimateRecoveryOnset,xCorrValMax,%{private}f,xCorrValMaxIndex,%{private}d,onsetIndex,%{private}d", buf, 0x18u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FF60 != -1)
          dispatch_once(&qword_10229FF60, &stru_102197420);
        v150 = 134284033;
        *(double *)v151 = v123;
        *(_WORD *)&v151[8] = 1025;
        *(_DWORD *)v152 = v121;
        *(_WORD *)&v152[4] = 1025;
        *(_DWORD *)&v152[6] = v121 + 24;
        LODWORD(v140) = 24;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 2, "CLHRPeakEstimator::estimateRecoveryOnset,xCorrValMax,%{private}f,xCorrValMaxIndex,%{private}d,onsetIndex,%{private}d", &v150, v140);
        v139 = (char *)v138;
        sub_100512490("Generic", 1, 0, 2, "void CLHRPeakEstimator::estimateRecoveryOnset(HRRecoveryResult &, const std::vector<HRRecoveryInputWR> &)", "%s\n", v138);
        if (v139 != buf)
          free(v139);
      }
      v127 = (double *)__p;
      v126 = v148;
      if (0x6DB6DB6DB6DB6DB7 * ((v148 - (_BYTE *)__p) >> 3) > v124)
      {
        v128 = *((double *)__p + 7 * v124 + 1);
        *(double *)(a2 + 56) = v128;
        if (v127 == (double *)v126)
          goto LABEL_217;
        v129 = 0;
        do
        {
          v130 = v127[1];
          if (v130 > v128 && v130 < v128 + 180.0)
          {
            v10 = v127[2];
            if (v129)
            {
              ++v129;
              v132 = v10 - v68;
              v68 = v68 + (v10 - v68) / (double)v129;
              v12 = v11 + v132 * (v10 - v68);
              v11 = v12;
              v10 = v68;
            }
            else
            {
              v11 = 0.0;
              v129 = 1;
              v68 = v127[2];
            }
          }
          v127 += 7;
        }
        while (v127 != (double *)v126);
        if (v129 <= 0)
        {
LABEL_217:
          *(_QWORD *)(a2 + 152) = 0;
          v10 = 0.0;
          v133 = 0.0;
        }
        else
        {
          *(double *)(a2 + 152) = v10;
          v133 = 0.0;
          if (v129 != 1)
            v133 = v12 / (double)(v129 - 1);
        }
        *(double *)(a2 + 160) = sqrt(v133);
        *(_BYTE *)(a2 + 168) = v10 < 2.5;
      }
      if (*(_QWORD *)&v153[0])
      {
        *((_QWORD *)&v153[0] + 1) = *(_QWORD *)&v153[0];
        operator delete(*(void **)&v153[0]);
      }
      if (v144)
        operator delete(v144);
      v87 = *(void **)v154;
    }
  }
  if (v87)
  {
    *(_QWORD *)&v154[8] = v87;
    operator delete(v87);
  }
  if (__p)
  {
    v148 = (char *)__p;
    operator delete(__p);
  }
}

void sub_100FAAE88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32)
{
  if (__p)
    operator delete(__p);
  if (a17)
    operator delete(a17);
  if (a31)
    operator delete(a31);
  if (a20)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

void sub_100FAAF30(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  BOOL v10;

  v3 = *(double *)(a2 + 56);
  if (v3 != 0.0)
  {
    v4 = *a3;
    v5 = a3[1];
    if (*a3 == v5)
    {
      v8 = 0.0;
    }
    else
    {
      v6 = v3 + -30.0;
      v7 = v3 + 30.0;
      v8 = 0.0;
      do
      {
        v9 = *(double *)(v4 + 8);
        v10 = v9 < v6 || v9 > v7;
        if (!v10 && *(double *)(v4 + 16) > v8)
          v8 = *(double *)(v4 + 16);
        v4 += 32;
      }
      while (v4 != v5);
    }
    *(double *)(a2 + 64) = v8;
  }
}

void sub_100FAAF9C(id a1)
{
  qword_10229FF68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "HRRecovery");
}

void sub_100FAB050(id a1)
{
  qword_102309438 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLTilesManagerSilo"));
}

uint64_t sub_100FAB104(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100FB697C;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_102309448 != -1)
    dispatch_once(&qword_102309448, block);
  return qword_102311AA0;
}

uint64_t sub_100FAB588(uint64_t result, int a2)
{
  uint64_t v3;
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  _DWORD v11[2];
  __int16 v12;
  int v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  int v17;

  if (*(unsigned __int8 *)(result + 456) != a2)
  {
    v3 = result;
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v4 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v5 = *(unsigned __int8 *)(v3 + 456);
      *(_DWORD *)buf = 67109376;
      v15 = a2;
      v16 = 1024;
      v17 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "TILE: shouldEnableAppTiles, %d, fAppTilesEnabled, %d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102197858);
      v8 = *(unsigned __int8 *)(v3 + 456);
      v11[0] = 67109376;
      v11[1] = a2;
      v12 = 1024;
      v13 = v8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: shouldEnableAppTiles, %d, fAppTilesEnabled, %d", v11, 14);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::enableAppTilesDownload(BOOL)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    result = sub_1001CDA64(v3, 9u);
    if (a2)
      v6 = 1;
    else
      v6 = -1;
    *(_DWORD *)(result + 148) = v6;
    *(_BYTE *)(result + 177) = a2;
    if (a2)
      v7 = 100;
    else
      v7 = 0;
    *(_DWORD *)(result + 132) = v7;
    *(_BYTE *)(v3 + 456) = a2;
  }
  return result;
}

void sub_100FAB7BC(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  int v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  const char *v12;
  uint8_t *v13;
  int v14;
  int v15;
  uint8_t buf[4];
  int v17;

  *(_DWORD *)(a2 + 84) = *(_DWORD *)(sub_1001CDA64(a1, 1u) + 288);
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102197858);
  v4 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_DWORD *)(a2 + 84);
    *(_DWORD *)buf = 67109120;
    v17 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "TILE: stats: getTileStats, demTilesDownloaded, %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v8 = *(_DWORD *)(a2 + 84);
    v14 = 67109120;
    v15 = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: stats: getTileStats, demTilesDownloaded, %d", &v14);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::getTileStats(CLDaemonStats_Type::LocationNetworkQueries &)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  *(_DWORD *)(a2 + 88) = *(_DWORD *)(sub_1001CDA64(a1, 2u) + 288);
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102197858);
  v6 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v7 = *(_DWORD *)(a2 + 88);
    *(_DWORD *)buf = 67109120;
    v17 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "TILE: stats: getTileStats, hrseTilesDownloaded, %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v11 = *(_DWORD *)(a2 + 88);
    v14 = 67109120;
    v15 = v11;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: stats: getTileStats, hrseTilesDownloaded, %d", &v14);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::getTileStats(CLDaemonStats_Type::LocationNetworkQueries &)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  sub_1001CD7EC(a1, (uint64_t)"resetStats", (uint64_t)&stru_102197610);
}

void sub_100FABBB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100FABC14(uint64_t a1, unsigned int *a2, const char *a3)
{
  NSObject *v6;
  unsigned int v7;
  const char *v8;
  uint64_t **v9;
  _QWORD *v10;
  uint64_t v11;
  size_t v12;
  void *v13;
  int v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  NSObject *v19;
  uint8_t *v20;
  uint64_t v21;
  unsigned int v22;
  const char *v23;
  const char *v24;
  uint8_t *v25;
  uint64_t v26;
  _BYTE *v27;
  char *v28;
  char *v29;
  int v30;
  _BYTE *v31;
  _BYTE v32[18];
  __int16 v33;
  const char *v34;
  uint8_t buf[8];
  _BYTE v36[10];
  __int16 v37;
  const char *v38;

  if ((*a2 & 0xFFFFFFF7) - 1 >= 2)
  {
    sub_1019376A0();
    __break(1u);
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102197838);
  v6 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
  {
    v7 = *a2;
    v8 = sub_1001CC818(*a2);
    *(_DWORD *)buf = 67240707;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v36 = 2081;
    *(_QWORD *)&v36[2] = v8;
    v37 = 2082;
    v38 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "TileMgr, deleteTileFile, tileType, %{public}d, %{private}s, localPathToFile, %{public}s, #CloneMe", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197838);
    v21 = qword_1022A0048;
    v22 = *a2;
    v23 = sub_1001CC818(*a2);
    *(_DWORD *)v32 = 67240707;
    *(_DWORD *)&v32[4] = v22;
    *(_WORD *)&v32[8] = 2081;
    *(_QWORD *)&v32[10] = v23;
    v33 = 2082;
    v34 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v21, 16, "TileMgr, deleteTileFile, tileType, %{public}d, %{private}s, localPathToFile, %{public}s, #CloneMe", v32, 28);
    v25 = (uint8_t *)v24;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLTilesManager::deleteTileFile(const CLTilesManager_Type::TileType &, const char *)", "%s\n", v24);
    if (v25 != buf)
      free(v25);
  }
  v9 = (uint64_t **)(sub_1001CDA64(a1, *a2) + 184);
  v10 = (_QWORD *)sub_100129380((uint64_t)v9);
  if (v10 == (_QWORD *)sub_1000DCFC0((uint64_t)v9))
    return 0;
  while (1)
  {
    v11 = v10[10];
    sub_100FA2C30(v11, (std::string *)buf);
    v12 = strlen(a3);
    if (SBYTE3(v38) < 0)
      break;
    if (v12 == BYTE3(v38))
    {
      if (v12 == -1)
        goto LABEL_49;
      if (!memcmp(buf, a3, v12))
        goto LABEL_25;
    }
LABEL_18:
    v15 = (_QWORD *)v10[1];
    if (v15)
    {
      do
      {
        v16 = v15;
        v15 = (_QWORD *)*v15;
      }
      while (v15);
    }
    else
    {
      do
      {
        v16 = (_QWORD *)v10[2];
        v17 = *v16 == (_QWORD)v10;
        v10 = v16;
      }
      while (!v17);
    }
    v10 = v16;
    if (v16 == (_QWORD *)sub_1000DCFC0((uint64_t)v9))
      return 0;
  }
  if (v12 != *(_QWORD *)v36)
  {
    operator delete(*(void **)buf);
    goto LABEL_18;
  }
  if (v12 == -1)
LABEL_49:
    sub_10035AD9C();
  v13 = *(void **)buf;
  v14 = memcmp(*(const void **)buf, a3, v12);
  operator delete(v13);
  if (v14)
    goto LABEL_18;
LABEL_25:
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102197858);
  v19 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(_QWORD *)v11 + 16))(buf, v11);
    v20 = SBYTE3(v38) >= 0 ? buf : *(uint8_t **)buf;
    *(_DWORD *)v32 = 136315138;
    *(_QWORD *)&v32[4] = v20;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "TILE: deleteTileFile, deleting, tileid, %s", v32, 0xCu);
    if (SBYTE3(v38) < 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v26 = qword_1022A0028;
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v11 + 16))(v32, v11);
    if (SBYTE3(v34) >= 0)
      v27 = v32;
    else
      v27 = *(_BYTE **)v32;
    v30 = 136315138;
    v31 = v27;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 2, "TILE: deleteTileFile, deleting, tileid, %s", (const char *)&v30);
    v29 = v28;
    if (SBYTE3(v34) < 0)
      operator delete(*(void **)v32);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLTilesManager::deleteTileFile(const CLTilesManager_Type::TileType &, const char *)", "%s\n", v29);
    if (v29 != (char *)buf)
      free(v29);
  }
  sub_100FA2CE0(v11);
  sub_1008B8DD8(v9, (uint64_t)v10);
  return 1;
}

void sub_100FAC114(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  _Unwind_Resume(a1);
}

BOOL sub_100FAC170(uint64_t a1, double a2, double a3, float a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  void *v15;
  NSObject *v16;
  _BYTE *v17;
  NSObject *v18;
  _BYTE *v19;
  uint64_t *v20;
  uint64_t *v21;
  double v22;
  unsigned int i;
  unsigned int j;
  double v25;
  float32_t v26;
  uint64_t v27;
  void *v28;
  _QWORD *v29;
  _QWORD **v30;
  _QWORD *v31;
  _QWORD **v32;
  unint64_t v33;
  _QWORD *v34;
  NSObject *v35;
  void **v36;
  uint64_t *v37;
  uint64_t *v38;
  double v39;
  NSObject *v40;
  uint64_t v41;
  void **v42;
  char *v43;
  char *v44;
  const char *v45;
  char *v46;
  __int128 v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  int8x16_t v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  uint64x2_t v56;
  NSObject *v57;
  uint64_t v58;
  _BYTE *v59;
  _QWORD *v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void **v66;
  char *v67;
  char *v68;
  uint64_t *v69;
  uint64_t *v70;
  BOOL v71;
  _BOOL8 result;
  NSObject *v73;
  int v74;
  int v75;
  const char *v76;
  char *v77;
  NSObject *v78;
  const char *v79;
  char *v80;
  uint64_t v81;
  const char *v82;
  uint64_t v83;
  _BYTE *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  _BYTE *v88;
  char *v89;
  char *v90;
  const char *v91;
  const char *v92;
  uint64_t *v93;
  __int128 v94;
  uint64_t v95;
  void *v96;
  void *v97[2];
  char v98;
  double v99;
  double v100;
  double v101;
  double v102;
  __int128 v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  uint64_t *v107;
  _QWORD *v108[2];
  int v109;
  _BYTE v110[24];
  _BYTE v111[28];
  __int16 v112;
  uint64_t v113;
  void *__p[2];
  _OWORD v115[3];
  _BYTE buf[24];
  double v117;
  __int16 v118;
  uint64_t v119;
  __int16 v120;
  uint64_t v121;
  __int16 v122;
  uint64_t v123;

  v12 = a1;
  v109 = 9;
  v13 = sub_1001CDA64(a1, 9u);
  sub_1000F34E0(a6);
  if (!*(_BYTE *)(v12 + 201))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v73 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v74 = *(unsigned __int8 *)(v12 + 200);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v74;
      _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEBUG, "TILE: getAppAvailabilityForArea, index is not available until first unlock, fDataProtectionEnabled, %d", buf, 8u);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v75 = *(unsigned __int8 *)(v12 + 200);
    *(_DWORD *)v110 = 67109120;
    *(_DWORD *)&v110[4] = v75;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: getAppAvailabilityForArea, index is not available until first unlock, fDataProtectionEnabled, %d", v110);
    v77 = (char *)v76;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLTilesManager::getAppAvailabilityForArea(double, double, float, CLTilesManager::SearchContext &, std::list<AppAvailability> &, BOOL)", "%s\n", v76);
LABEL_138:
    if (v77 != buf)
      free(v77);
    return 0;
  }
  if (*(_BYTE *)v13)
  {
    v108[0] = 0;
    v108[1] = 0;
    v93 = (uint64_t *)v108;
    v107 = (uint64_t *)v108;
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v14 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134218496;
      *(double *)&buf[4] = a2;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = a3;
      *(_WORD *)&buf[22] = 2048;
      v117 = a4;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "TILE: getAppAvailabilityForArea, loc, %.8lf, %.8lf, radius, %.3f", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102197858);
      *(_DWORD *)v110 = 134218496;
      *(double *)&v110[4] = a2;
      *(_WORD *)&v110[12] = 2048;
      *(double *)&v110[14] = a3;
      *(_WORD *)&v110[22] = 2048;
      *(double *)v111 = a4;
      LODWORD(v91) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: getAppAvailabilityForArea, loc, %.8lf, %.8lf, radius, %.3f", COERCE_DOUBLE(v110), *(double *)&v91, *(double *)&v92);
      v80 = (char *)v79;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLTilesManager::getAppAvailabilityForArea(double, double, float, CLTilesManager::SearchContext &, std::list<AppAvailability> &, BOOL)", "%s\n", v79);
      if (v80 != buf)
        free(v80);
    }
    sub_1000C1928((uint64_t)&v103, &v109);
    sub_1001CB024((uint64_t)&v103, -1, a2, a3, *(double *)(v13 + 152), *(double *)(v13 + 160));
    v101 = 0.0;
    v102 = 0.0;
    v99 = 0.0;
    v100 = 0.0;
    sub_100515834(&v102, &v101, &v100, &v99, a2, a3, a4);
    v95 = v12;
    if (!sub_1001C0618(v13 + 184, (unsigned int *)&v103))
      goto LABEL_31;
    v15 = (void *)sub_1001C85FC(v13 + 184, (unsigned int *)&v103);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v16 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      (*(void (**)(_BYTE *__return_ptr, void *))(*(_QWORD *)v15 + 16))(buf, v15);
      v17 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
      *(_DWORD *)v110 = 136315138;
      *(_QWORD *)&v110[4] = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "TILE: getAppAvailabilityForArea, tile, %s", v110, 0xCu);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
    }
    v12 = v95;
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102197858);
      v83 = qword_1022A0028;
      (*(void (**)(_BYTE *__return_ptr, void *))(*(_QWORD *)v15 + 16))(v110, v15);
      if (v110[23] >= 0)
        v84 = v110;
      else
        v84 = *(_BYTE **)v110;
      LODWORD(__p[0]) = 136315138;
      *(void **)((char *)__p + 4) = v84;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v83, 2, "TILE: getAppAvailabilityForArea, tile, %s", (const char *)__p);
      v86 = v85;
      if ((v110[23] & 0x80000000) != 0)
        operator delete(*(void **)v110);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLTilesManager::getAppAvailabilityForArea(double, double, float, CLTilesManager::SearchContext &, std::list<AppAvailability> &, BOOL)", "%s\n", v86);
      if (v86 != buf)
        free(v86);
      v12 = v95;
    }
    else if (!v15)
    {
LABEL_31:
      for (i = -1; i != 2; ++i)
      {
        for (j = -1; j != 2; ++j)
        {
          if (j | i)
          {
            *(_OWORD *)v110 = v103;
            *(_QWORD *)&v110[16] = v104;
            if (SHIBYTE(v106) < 0)
            {
              sub_100115CE4(v111, (void *)v105, *((unint64_t *)&v105 + 1));
            }
            else
            {
              *(_OWORD *)v111 = v105;
              *(_QWORD *)&v111[16] = v106;
            }
            v25 = *(double *)(v13 + 160);
            v26 = *(double *)(v13 + 152);
            *(float *)&v25 = v25;
            sub_1001C85C8((uint64_t)v110, i, j, v26, *(float32x2_t *)&v25);
            if (sub_1001C0618(v13 + 184, (unsigned int *)v110))
            {
              v27 = sub_1001C85FC(v13 + 184, (unsigned int *)v110);
              v28 = (void *)v27;
              if (v27)
              {
                if (sub_1001C9408(v27, *(_BYTE *)(v12 + 200)))
                {
                  v29 = v108[0];
                  if (!v108[0])
                    goto LABEL_49;
                  v30 = v108;
                  do
                  {
                    v31 = v29;
                    v32 = v30;
                    v33 = v29[4];
                    v34 = v29 + 1;
                    if (v33 >= (unint64_t)v28)
                    {
                      v34 = v31;
                      v30 = (_QWORD **)v31;
                    }
                    v29 = (_QWORD *)*v34;
                  }
                  while (v29);
                  if (v30 == v108)
                    goto LABEL_49;
                  if (v33 < (unint64_t)v28)
                    v31 = v32;
                  if ((unint64_t)v28 >= v31[4])
                  {
                    if (qword_1022A0020 != -1)
                      dispatch_once(&qword_1022A0020, &stru_102197858);
                    v40 = qword_1022A0028;
                    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "TILE: already been searched", buf, 2u);
                    }
                    v12 = v95;
                    if (sub_1001BFF7C(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_1022A0020 != -1)
                        dispatch_once(&qword_1022A0020, &stru_102197858);
                      LOWORD(__p[0]) = 0;
                      LODWORD(v91) = 2;
                      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: already been searched", __p, v91);
                      v46 = (char *)v45;
                      sub_100512490("Generic", 1, 0, 2, "BOOL CLTilesManager::getAppAvailabilityForArea(double, double, float, CLTilesManager::SearchContext &, std::list<AppAvailability> &, BOOL)", "%s\n", v45);
                      if (v46 != buf)
                        free(v46);
                      v12 = v95;
                    }
                  }
                  else
                  {
LABEL_49:
                    if (qword_1022A0020 != -1)
                      dispatch_once(&qword_1022A0020, &stru_102197858);
                    v35 = qword_1022A0028;
                    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
                    {
                      (*(void (**)(void **__return_ptr, void *))(*(_QWORD *)v28 + 16))(__p, v28);
                      v36 = __p;
                      if (SBYTE7(v115[0]) < 0)
                        v36 = (void **)__p[0];
                      *(_DWORD *)buf = 67109634;
                      *(_DWORD *)&buf[4] = i;
                      *(_WORD *)&buf[8] = 1024;
                      *(_DWORD *)&buf[10] = j;
                      *(_WORD *)&buf[14] = 2080;
                      *(_QWORD *)&buf[16] = v36;
                      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "TILE: getAppAvailabilityForArea, y, %d, x, %d, ntile, %s", buf, 0x18u);
                      if (SBYTE7(v115[0]) < 0)
                        operator delete(__p[0]);
                    }
                    v12 = v95;
                    if (sub_1001BFF7C(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_1022A0020 != -1)
                        dispatch_once(&qword_1022A0020, &stru_102197858);
                      v41 = qword_1022A0028;
                      (*(void (**)(void **__return_ptr, void *))(*(_QWORD *)v28 + 16))(v97, v28);
                      v42 = v97;
                      if (v98 < 0)
                        v42 = (void **)v97[0];
                      LODWORD(__p[0]) = 67109634;
                      HIDWORD(__p[0]) = i;
                      LOWORD(__p[1]) = 1024;
                      *(_DWORD *)((char *)&__p[1] + 2) = j;
                      HIWORD(__p[1]) = 2080;
                      *(_QWORD *)&v115[0] = v42;
                      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v41, 2, "TILE: getAppAvailabilityForArea, y, %d, x, %d, ntile, %s", __p, 24, v92);
                      v44 = v43;
                      if (v98 < 0)
                        operator delete(v97[0]);
                      sub_100512490("Generic", 1, 0, 2, "BOOL CLTilesManager::getAppAvailabilityForArea(double, double, float, CLTilesManager::SearchContext &, std::list<AppAvailability> &, BOOL)", "%s\n", v44);
                      if (v44 != buf)
                        free(v44);
                      v12 = v95;
                    }
                    *(_QWORD *)buf = buf;
                    *(_QWORD *)&buf[8] = buf;
                    *(_QWORD *)&buf[16] = 0;
                    v97[0] = v28;
                    __p[0] = v97;
                    v37 = sub_100FC2A40(&v107, (unint64_t *)v97, (uint64_t)&unk_101B9EB60, (uint64_t **)__p);
                    sub_100FC2B6C(v37 + 5, buf);
                    sub_1000F34E0(buf);
                    *(double *)__p = v100 - v102;
                    *(double *)v97 = v99 - v101;
                    v96 = v28;
                    *(_QWORD *)buf = &v96;
                    v38 = sub_100FC2A40(&v107, (unint64_t *)&v96, (uint64_t)&unk_101B9EB60, (uint64_t **)buf);
                    (*(void (**)(void *, double *, double *, void **, void **, uint64_t, _QWORD, uint64_t *))(*(_QWORD *)v28 + 176))(v28, &v102, &v101, __p, v97, 1, 0, v38 + 5);
                    __p[0] = v28;
                    *(_QWORD *)buf = __p;
                    if (sub_100FC2A40(&v107, (unint64_t *)__p, (uint64_t)&unk_101B9EB60, (uint64_t **)buf)[7])
                    {
                      v39 = (*(double (**)(_QWORD))(**(_QWORD **)(v12 + 464) + 56))(*(_QWORD *)(v12 + 464));
                      sub_1001C9C90((uint64_t)v28, v39);
                    }
                  }
                }
              }
            }
            if ((v111[23] & 0x80000000) != 0)
              operator delete(*(void **)v111);
          }
        }
      }
      sub_1000F34E0(a6);
      __p[0] = 0;
      *((_QWORD *)&v47 + 1) = 0;
      memset((char *)v115 + 8, 0, 32);
      v48 = v107;
      if (v107 != (uint64_t *)v108)
      {
        *(_QWORD *)&v47 = 134219266;
        v94 = v47;
        do
        {
          v49 = v48[6];
          if ((uint64_t *)v49 != v48 + 5)
          {
            v50 = v48[4];
            do
            {
              v51 = *(unsigned __int16 *)(v49 + 26);
              v52 = (int8x16_t)vmovl_u16((uint16x4_t)vand_s8((int8x8_t)vdup_n_s16(v51), (int8x8_t)0x8000400020001));
              *(int8x8_t *)v52.i8 = vorr_s8(*(int8x8_t *)v52.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL));
              LODWORD(__p[0]) = v52.i32[0] | v51 & 0x10 | v52.i32[1] | (uint64_t)__p[0] & 0xFFFFFFE0;
              if (sub_100CD5A80(v49 + 16))
                v53 = 32;
              else
                v53 = 0;
              __p[0] = (void *)__PAIR64__(*(_DWORD *)(v49 + 20), (uint64_t)__p[0] & 0xFFFFFFDF | v53);
              v54 = *(unsigned __int8 *)(v49 + 25);
              LODWORD(__p[1]) = 10 * *(unsigned __int8 *)(v49 + 24);
              HIDWORD(__p[1]) = v54 >> 4;
              LODWORD(v115[0]) = v54 & 0xF;
              sub_100FA6940(v50, *(unsigned __int16 *)(v49 + 16), *(unsigned __int16 *)(v49 + 18), (double *)v115 + 1, (double *)&v115[1]);
              v55 = *(_QWORD *)(v13 + 168);
              v56.i64[0] = v55;
              v56.i64[1] = HIDWORD(v55);
              *(float64x2_t *)((char *)&v115[1] + 8) = vdivq_f64(*(float64x2_t *)(v13 + 152), vcvtq_f64_u64(v56));
              if (qword_1022A0020 != -1)
                dispatch_once(&qword_1022A0020, &stru_102197858);
              v57 = qword_1022A0028;
              if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
              {
                v58 = a6[2];
                sub_100FBF2D0((unsigned __int16 *)(v49 + 16), v110);
                v59 = v110;
                if (v110[23] < 0)
                  v59 = *(_BYTE **)v110;
                *(_DWORD *)buf = v94;
                *(_QWORD *)&buf[4] = v58;
                *(_WORD *)&buf[12] = 2080;
                *(_QWORD *)&buf[14] = v59;
                *(_WORD *)&buf[22] = 2048;
                v117 = *((double *)v115 + 1);
                v118 = 2048;
                v119 = *(_QWORD *)&v115[1];
                v120 = 2048;
                v121 = *((_QWORD *)&v115[1] + 1);
                v122 = 2048;
                v123 = *(_QWORD *)&v115[2];
                _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEBUG, "TILE: getAppAvailabilityForArea, appRecommendation, %lu, %s, loc, %.10lf, %.10lf, span, %.10lf, %.10lf", buf, 0x3Eu);
                if ((v110[23] & 0x80000000) != 0)
                  operator delete(*(void **)v110);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0020 != -1)
                  dispatch_once(&qword_1022A0020, &stru_102197858);
                v64 = qword_1022A0028;
                v65 = a6[2];
                sub_100FBF2D0((unsigned __int16 *)(v49 + 16), v97);
                v66 = v97;
                if (v98 < 0)
                  v66 = (void **)v97[0];
                *(_DWORD *)v110 = v94;
                *(_QWORD *)&v110[4] = v65;
                *(_WORD *)&v110[12] = 2080;
                *(_QWORD *)&v110[14] = v66;
                *(_WORD *)&v110[22] = 2048;
                *(_QWORD *)v111 = *((_QWORD *)&v115[0] + 1);
                *(_WORD *)&v111[8] = 2048;
                *(_QWORD *)&v111[10] = *(_QWORD *)&v115[1];
                *(_WORD *)&v111[18] = 2048;
                *(_QWORD *)&v111[20] = *((_QWORD *)&v115[1] + 1);
                v112 = 2048;
                v113 = *(_QWORD *)&v115[2];
                LODWORD(v91) = 62;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v64, 2, "TILE: getAppAvailabilityForArea, appRecommendation, %lu, %s, loc, %.10lf, %.10lf, span, %.10lf, %.10lf", v110, v91, *(double *)&v92, *(double *)&v93, *(double *)&v94, *((double *)&v94 + 1));
                v68 = v67;
                if (v98 < 0)
                  operator delete(v97[0]);
                sub_100512490("Generic", 1, 0, 2, "BOOL CLTilesManager::getAppAvailabilityForArea(double, double, float, CLTilesManager::SearchContext &, std::list<AppAvailability> &, BOOL)", "%s\n", v68);
                if (v68 != buf)
                  free(v68);
              }
              v60 = operator new(0x48uLL);
              v60[8] = *(_QWORD *)&v115[2];
              v61 = v115[1];
              v62 = *(_OWORD *)__p;
              *((_OWORD *)v60 + 2) = v115[0];
              *((_OWORD *)v60 + 3) = v61;
              *((_OWORD *)v60 + 1) = v62;
              v63 = *a6;
              *v60 = *a6;
              v60[1] = a6;
              *(_QWORD *)(v63 + 8) = v60;
              *a6 = (uint64_t)v60;
              ++a6[2];
              v49 = *(_QWORD *)(v49 + 8);
            }
            while ((uint64_t *)v49 != v48 + 5);
          }
          v69 = (uint64_t *)v48[1];
          if (v69)
          {
            do
            {
              v70 = v69;
              v69 = (uint64_t *)*v69;
            }
            while (v69);
          }
          else
          {
            do
            {
              v70 = (uint64_t *)v48[2];
              v71 = *v70 == (_QWORD)v48;
              v48 = v70;
            }
            while (!v71);
          }
          v48 = v70;
        }
        while (v70 != v93);
      }
      if (SHIBYTE(v106) < 0)
        operator delete((void *)v105);
      sub_100FC29F8((uint64_t)&v107, v108[0]);
      return 1;
    }
    if (sub_1001C9408((uint64_t)v15, *(_BYTE *)(v12 + 200)))
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102197858);
      v18 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        (*(void (**)(_BYTE *__return_ptr, void *))(*(_QWORD *)v15 + 16))(buf, v15);
        v19 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
        *(_DWORD *)v110 = 136315138;
        *(_QWORD *)&v110[4] = v19;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "TILE: getAppAvailabilityForArea, ctile, %s", v110, 0xCu);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
      }
      v12 = v95;
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102197858);
        v87 = qword_1022A0028;
        (*(void (**)(_BYTE *__return_ptr, void *))(*(_QWORD *)v15 + 16))(v110, v15);
        if (v110[23] >= 0)
          v88 = v110;
        else
          v88 = *(_BYTE **)v110;
        LODWORD(__p[0]) = 136315138;
        *(void **)((char *)__p + 4) = v88;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v87, 2, "TILE: getAppAvailabilityForArea, ctile, %s", (const char *)__p);
        v90 = v89;
        if ((v110[23] & 0x80000000) != 0)
          operator delete(*(void **)v110);
        sub_100512490("Generic", 1, 0, 2, "BOOL CLTilesManager::getAppAvailabilityForArea(double, double, float, CLTilesManager::SearchContext &, std::list<AppAvailability> &, BOOL)", "%s\n", v90);
        if (v90 != buf)
          free(v90);
        v12 = v95;
      }
      *(_QWORD *)buf = buf;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0;
      __p[0] = v15;
      *(_QWORD *)v110 = __p;
      v20 = sub_100FC2A40(&v107, (unint64_t *)__p, (uint64_t)&unk_101B9EB60, (uint64_t **)v110);
      sub_100FC2B6C(v20 + 5, buf);
      sub_1000F34E0(buf);
      *(double *)v110 = v100 - v102;
      *(double *)__p = v99 - v101;
      v97[0] = v15;
      *(_QWORD *)buf = v97;
      v21 = sub_100FC2A40(&v107, (unint64_t *)v97, (uint64_t)&unk_101B9EB60, (uint64_t **)buf);
      (*(void (**)(void *, double *, double *, _BYTE *, void **, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v15 + 176))(v15, &v102, &v101, v110, __p, 1, a7, v21 + 5);
      *(_QWORD *)v110 = v15;
      *(_QWORD *)buf = v110;
      if (sub_100FC2A40(&v107, (unint64_t *)v110, (uint64_t)&unk_101B9EB60, (uint64_t **)buf)[7])
      {
        v22 = (*(double (**)(_QWORD))(**(_QWORD **)(v12 + 464) + 56))(*(_QWORD *)(v12 + 464));
        sub_1001C9C90((uint64_t)v15, v22);
      }
    }
    goto LABEL_31;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102197858);
  v78 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)&buf[4] = 9;
    *(_WORD *)&buf[8] = 2080;
    *(_QWORD *)&buf[10] = sub_1001CC818(9u);
    _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEBUG, "TILE: getAppAvailabilityForArea, tiles, %d, %s, are not active on this device", buf, 0x12u);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v81 = qword_1022A0028;
    *(_DWORD *)v110 = 67109378;
    *(_DWORD *)&v110[4] = 9;
    *(_WORD *)&v110[8] = 2080;
    *(_QWORD *)&v110[10] = sub_1001CC818(9u);
    LODWORD(v91) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v81, 2, "TILE: getAppAvailabilityForArea, tiles, %d, %s, are not active on this device", v110, v91);
    v77 = (char *)v82;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLTilesManager::getAppAvailabilityForArea(double, double, float, CLTilesManager::SearchContext &, std::list<AppAvailability> &, BOOL)", "%s\n", v82);
    goto LABEL_138;
  }
  return result;
}

void sub_100FAD544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,_QWORD *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  if (a35 < 0)
    operator delete(__p);
  sub_100FC29F8((uint64_t)&a36, a37);
  _Unwind_Resume(a1);
}

uint64_t sub_100FAD658(uint64_t a1, id **a2, uint64_t a3, double a4, double a5)
{
  uint64_t v5;
  id **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  double *v12;
  double *v13;
  uint64_t v14;
  NSObject *v15;
  void **v16;
  uint64_t v17;
  uint64_t v19;
  _BYTE *v20;
  char *v21;
  char *v22;
  unsigned int v23[6];
  void *v24;
  char v25;
  int v26;
  _BYTE buf[12];
  char v28;
  int v29;
  _BYTE *v30;
  void *__p[2];
  char v32;

  if (!a3)
  {
    sub_101937970();
    __break(1u);
LABEL_21:
    dispatch_once(&qword_1022A0020, &stru_102197858);
    goto LABEL_5;
  }
  v5 = a3;
  v6 = a2;
  v7 = a1;
  v26 = 11;
  v12 = (double *)sub_1001CDA64(a1, 0xBu);
  *(_QWORD *)(v5 + 8) = *(_QWORD *)v5;
  if (!*(_BYTE *)v12)
    return 0;
  v13 = v12;
  sub_1000C1928((uint64_t)v23, &v26);
  sub_1001CB024((uint64_t)v23, -1, a4, a5, v13[19], v13[20]);
  v14 = (uint64_t)(v13 + 23);
  if (!sub_1001C0618(v14, v23))
    goto LABEL_15;
  v8 = sub_1001C85FC(v14, v23);
  v9 = &qword_1022A0000;
  if (qword_1022A0020 != -1)
    goto LABEL_21;
LABEL_5:
  v15 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v8 + 16))(__p, v8);
    v16 = v32 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "TransitMac: getTransitMacAddresses, tile exists, %s", buf, 0xCu);
    if (v32 < 0)
      operator delete(__p[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (v9[4] != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v19 = qword_1022A0028;
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v8 + 16))(buf, v8);
    if (v28 >= 0)
      v20 = buf;
    else
      v20 = *(_BYTE **)buf;
    v29 = 136315138;
    v30 = v20;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v19, 2, "TransitMac: getTransitMacAddresses, tile exists, %s", (const char *)&v29);
    v22 = v21;
    if (v28 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLTilesManager::getTransitMacAddresses(std::vector<uint64_t> *, double, double, std::vector<CLTilesManager_Type::TransitMac> *)", "%s\n", v22);
    if (v22 != (char *)__p)
      free(v22);
  }
  else if (!v8)
  {
    goto LABEL_15;
  }
  if (sub_1001C9408(v8, *(_BYTE *)(v7 + 200)))
  {
    sub_100618B50(v8, v6, (char **)v5);
    v17 = 1;
    goto LABEL_16;
  }
LABEL_15:
  v17 = 0;
LABEL_16:
  if (v25 < 0)
    operator delete(v24);
  return v17;
}

void sub_100FAD960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100FADA14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_100FADA30(uint64_t a1, uint64_t a2, unsigned int a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  double v9;
  NSObject *v10;
  uint64_t v12;
  const char *v13;
  uint8_t *v14;
  const char *v15;
  _DWORD v16[2];
  __int16 v17;
  const char *v18;
  uint8_t buf[4];
  unsigned int v20;
  __int16 v21;
  const char *v22;

  if ((a3 & 0xFFFFFFF7) - 1 >= 2)
  {
    sub_101937AD8();
  }
  else
  {
    v9 = a4;
    v7 = a3;
    v4 = a2;
    v5 = a1;
    v6 = sub_1001CDA64(a1, a3);
    v8 = &qword_1022A0000;
    if (qword_1022A0020 == -1)
      goto LABEL_3;
  }
  dispatch_once(&qword_1022A0020, &stru_102197858);
LABEL_3:
  v10 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109378;
    v20 = v7;
    v21 = 2080;
    v22 = sub_1001CC818(v7);
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "TILE: listTilesDirectory, tileType, %d, %s", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v8[4] != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v12 = qword_1022A0028;
    v16[0] = 67109378;
    v16[1] = v7;
    v17 = 2080;
    v18 = sub_1001CC818(v7);
    LODWORD(v15) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v12, 2, "TILE: listTilesDirectory, tileType, %d, %s", v16, v15);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLTilesManager::listTilesDirectory(const std::string &, CLTilesManager_Type::TileType, CFAbsoluteTime)", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  return sub_100FB69E8(v5, v4, *(_DWORD *)(v6 + 4), v9);
}

void sub_100FADC54(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v14;
  int *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  NSObject *v19;
  int v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  NSObject *v24;
  NSObject *v25;
  NSObject *v26;
  uint64_t v27;
  NSObject *v28;
  int v29;
  int v30;
  const char *v31;
  char *v32;
  const char *v33;
  char *v34;
  const char *v35;
  char *v36;
  uint64_t v37;
  const char *v38;
  char *v39;
  int v40;
  const char *v41;
  char *v42;
  uint64_t v43;
  _QWORD v44[5];
  _DWORD v45[4];
  __int128 buf;

  v7 = a1 + 268;
  v8 = sub_100FAE8C4(a1, "CLTilesManager", a2);
  *(_QWORD *)(v8 + 120) = 0;
  *(_QWORD *)v8 = &off_102197470;
  *(_QWORD *)(v8 + 112) = v8 + 120;
  *(_QWORD *)(v8 + 128) = 0;
  *(_QWORD *)(v8 + 136) = "";
  *(_BYTE *)(v8 + 144) = 0;
  *(_QWORD *)(v8 + 152) = 0;
  *(_QWORD *)(v8 + 160) = 0;
  *(_QWORD *)(v8 + 168) = "";
  *(_BYTE *)(v8 + 176) = 0;
  *(_QWORD *)(v8 + 184) = 0;
  *(_QWORD *)(v8 + 192) = 0;
  *(_WORD *)(v8 + 200) = 0;
  *(_OWORD *)(v8 + 208) = xmmword_101C32730;
  *(_QWORD *)(v8 + 224) = 0x40C5180000000000;
  *(_QWORD *)(v8 + 240) = 0;
  *(_DWORD *)(v8 + 248) = 0xFFFF;
  *(_QWORD *)(v8 + 252) = 0;
  *(_QWORD *)(v8 + 260) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)v7 = xmmword_101BAFC90;
  *(_OWORD *)(v7 + 16) = _Q1;
  *(_OWORD *)(v7 + 32) = _Q1;
  *(_OWORD *)(v7 + 48) = _Q1;
  *(_DWORD *)(v8 + 332) = 0;
  *(_DWORD *)(v8 + 360) = 0;
  *(_QWORD *)(v8 + 336) = 0xBFF0000000000000;
  *(_QWORD *)(v8 + 344) = 0;
  *(_QWORD *)(v8 + 352) = 0;
  *(_QWORD *)(v7 + 96) = 0xBFF0000000000000;
  *(_DWORD *)(v8 + 372) = 0x7FFFFFFF;
  *(_QWORD *)(v8 + 384) = 0;
  *(_QWORD *)(v8 + 392) = 0;
  *(_QWORD *)(v8 + 376) = 0;
  *(_BYTE *)(v8 + 400) = 0;
  *(_DWORD *)(v8 + 424) = 0;
  *(_QWORD *)(v8 + 408) = 0;
  *(_QWORD *)(v8 + 416) = 0;
  *(_BYTE *)(v8 + 428) = 1;
  *(_QWORD *)(v8 + 432) = 0x190000000C8;
  *(_BYTE *)(v8 + 440) = 0;
  *(_DWORD *)(v8 + 444) = 8;
  *(_BYTE *)(v8 + 448) = 0;
  *(_DWORD *)(v8 + 452) = 5;
  *(_BYTE *)(v8 + 456) = 1;
  v14 = *a3;
  *a3 = 0;
  *(_QWORD *)(v8 + 464) = v14;
  sub_100F5A35C((_QWORD *)(v8 + 472), *(_QWORD *)(a1 + 40));
  *(_BYTE *)(a1 + 496) = 0;
  sub_101245358(a1 + 504);
  *(_QWORD *)(a1 + 528) = a1 + 528;
  *(_QWORD *)(a1 + 536) = a1 + 528;
  *(_QWORD *)(a1 + 544) = 0;
  *(_BYTE *)(a1 + 552) = 0;
  *(_DWORD *)(a1 + 556) = 0;
  *(_BYTE *)(a1 + 560) = 0;
  sub_1015A2E04((_QWORD *)(a1 + 568), "cldavl.avl");
  *(_BYTE *)(a1 + 592) = 0;
  *(_QWORD *)(a1 + 600) = 0;
  *(_QWORD *)(a1 + 616) = 0;
  *(_QWORD *)(a1 + 608) = 0;
  *(_QWORD *)(a1 + 624) = a1 + 624;
  *(_QWORD *)(a1 + 632) = a1 + 624;
  *(_QWORD *)(a1 + 656) = 0;
  *(_QWORD *)(a1 + 672) = 0;
  *(_QWORD *)(a1 + 664) = 0;
  *(_QWORD *)(a1 + 640) = 0;
  *(_QWORD *)(a1 + 646) = 0;
  sub_1015A2E04((_QWORD *)(a1 + 680), "clhrseavl.avl");
  *(_BYTE *)(a1 + 704) = 0;
  if (*(_BYTE *)(a4 + 24))
  {
    sub_10124535C((__int128 *)(a1 + 504), (__int128 *)a4);
    sub_1001E4804(&buf);
    v15 = (int *)(a1 + 436);
    sub_1001E4B84(buf, "MaxDownloadListSize", (_DWORD *)(a1 + 436));
    v16 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
    if (*((_QWORD *)&buf + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v19 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v20 = *v15;
      LODWORD(buf) = 67109120;
      DWORD1(buf) = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "TILE: fDefaultMaxDownloadListSize, %d", (uint8_t *)&buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102197858);
      v30 = *v15;
      v45[0] = 67109120;
      v45[1] = v30;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: fDefaultMaxDownloadListSize, %d", v45);
      v32 = (char *)v31;
      sub_100512490("Generic", 1, 0, 2, "CLTilesManager::CLTilesManager(id<CLIntersiloUniverse>, std::unique_ptr<CLITilesManagerExternal>, std::optional<CLTilesSetCollection>)", "%s\n", v31);
      if (v32 != (char *)&buf)
        free(v32);
    }
    sub_1001E4804(&buf);
    sub_1001FD98C(buf, "MTimeModificationPeriod", &qword_1022FDCC8);
    v21 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
    if (*((_QWORD *)&buf + 1))
    {
      v22 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v24 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 134217984;
      *(_QWORD *)((char *)&buf + 4) = qword_1022FDCC8;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "TILE: MTimeModificationPeriod, %.1lf", (uint8_t *)&buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102197858);
      v45[0] = 134217984;
      *(_QWORD *)&v45[1] = qword_1022FDCC8;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: MTimeModificationPeriod, %.1lf", COERCE_DOUBLE(v45));
      v34 = (char *)v33;
      sub_100512490("Generic", 1, 0, 2, "CLTilesManager::CLTilesManager(id<CLIntersiloUniverse>, std::unique_ptr<CLITilesManagerExternal>, std::optional<CLTilesSetCollection>)", "%s\n", v33);
      if (v34 != (char *)&buf)
        free(v34);
    }
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a1 + 224);
    v44[0] = _NSConcreteStackBlock;
    v44[1] = 3221225472;
    v44[2] = sub_100FB08BC;
    v44[3] = &unk_10214C498;
    v44[4] = a1;
    sub_1001CD7EC(a1, (uint64_t)"initialize", (uint64_t)v44);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v25 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "TmmMgr, ctor", (uint8_t *)&buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102197858);
      LOWORD(v45[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TmmMgr, ctor", v45, 2);
      v36 = (char *)v35;
      sub_100512490("Generic", 1, 0, 2, "CLTilesManager::CLTilesManager(id<CLIntersiloUniverse>, std::unique_ptr<CLITilesManagerExternal>, std::optional<CLTilesSetCollection>)", "%s\n", v35);
      if (v36 != (char *)&buf)
        free(v36);
    }
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v26 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v27 = *(_QWORD *)(a1 + 232);
      LODWORD(buf) = 134217984;
      *(_QWORD *)((char *)&buf + 4) = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "TILE: fMinEncryptionGracePeriod, %.2lf", (uint8_t *)&buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102197858);
      v37 = *(_QWORD *)(a1 + 232);
      v45[0] = 134217984;
      *(_QWORD *)&v45[1] = v37;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: fMinEncryptionGracePeriod, %.2lf", COERCE_DOUBLE(v45));
      v39 = (char *)v38;
      sub_100512490("Generic", 1, 0, 2, "CLTilesManager::CLTilesManager(id<CLIntersiloUniverse>, std::unique_ptr<CLITilesManagerExternal>, std::optional<CLTilesSetCollection>)", "%s\n", v38);
      if (v39 != (char *)&buf)
        free(v39);
    }
    *(_BYTE *)(a1 + 200) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 464) + 24))(*(_QWORD *)(a1 + 464));
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197838);
    v28 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
    {
      v29 = *(unsigned __int8 *)(a1 + 200);
      LODWORD(buf) = 67240192;
      DWORD1(buf) = v29;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "@TileEvent, all, locked, %{public}d", (uint8_t *)&buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102197838);
      v40 = *(unsigned __int8 *)(a1 + 200);
      v45[0] = 67240192;
      v45[1] = v40;
      LODWORD(v43) = 8;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "@TileEvent, all, locked, %{public}d", v45, v43);
      v42 = (char *)v41;
      sub_100512490("Generic", 1, 0, 2, "CLTilesManager::CLTilesManager(id<CLIntersiloUniverse>, std::unique_ptr<CLITilesManagerExternal>, std::optional<CLTilesSetCollection>)", "%s\n", v41);
      if (v42 != (char *)&buf)
        free(v42);
    }
    operator new();
  }
  sub_100FAE960(a1, (uint64_t)&buf);
}

void sub_100FAE774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  sub_100FB12B4(v27);
  sub_100FB12FC(v26);
  sub_100CBD658((void ***)&__p);
  v29 = *(_QWORD *)(v24 + 464);
  *(_QWORD *)(v24 + 464) = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  v30 = *(_QWORD *)(v24 + 192);
  *(_QWORD *)(v24 + 192) = 0;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  v31 = *(_QWORD *)(v24 + 160);
  *(_QWORD *)(v24 + 160) = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  sub_1008B9D24(v25, *(_QWORD **)(v24 + 120));
  sub_100FB1344(v24);
  _Unwind_Resume(a1);
}

uint64_t sub_100FAE8C4(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_1021978C8;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_100FAE944(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_100FAE960(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  NSObject *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  NSObject *v15;
  std::string *p_dst;
  _BOOL4 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  NSObject *v21;
  std::string *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  NSObject *v26;
  std::string *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  NSObject *v31;
  std::string *v32;
  uint64_t *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  NSObject *v49;
  uint64_t v50;
  int *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  NSObject *v55;
  int v56;
  BOOL *v57;
  char v58;
  char v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  NSObject *v63;
  _BOOL4 v64;
  int *v65;
  int v66;
  int v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  NSObject *v71;
  int v72;
  int *v73;
  int v74;
  int v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  NSObject *v79;
  int v80;
  const char *v81;
  char *v82;
  const char *v83;
  char *v84;
  std::string *v85;
  const char *v86;
  char *v87;
  std::string *v88;
  const char *v89;
  char *v90;
  std::string *v91;
  const char *v92;
  char *v93;
  std::string *v94;
  const char *v95;
  char *v96;
  uint64_t v97;
  const char *v98;
  char *v99;
  uint64_t v100;
  const char *v101;
  char *v102;
  uint64_t v103;
  const char *v104;
  char *v105;
  int v106;
  const char *v107;
  char *v108;
  _BOOL4 v109;
  const char *v110;
  char *v111;
  int v112;
  const char *v113;
  char *v114;
  int v115;
  const char *v116;
  char *v117;
  uint64_t v118;
  _BOOL4 v119;
  _BOOL4 v120;
  _BOOL4 v121;
  uint64_t v122;
  char v123;
  BOOL v124;
  _DWORD __p[3];
  __int16 v126;
  _BOOL4 v127;
  std::string v128;
  std::string v129;
  std::string v130;
  std::string __dst;
  _BYTE buf[18];

  v124 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 464) + 40))(*(_QWORD *)(a1 + 464));
  v123 = 1;
  sub_1001E4804(buf);
  sub_1001E4874(*(uint64_t *)buf, "AppTilesActive", &v124);
  v4 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v5 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102197858);
  v7 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v124;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TILE: isAppTilesActive, %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    LODWORD(__dst.__r_.__value_.__l.__data_) = 67109120;
    HIDWORD(__dst.__r_.__value_.__r.__words[0]) = v124;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: isAppTilesActive, %d", &__dst);
    v82 = (char *)v81;
    sub_100512490("Generic", 1, 0, 2, "CLTilesSetCollection CLTilesManager::initializeProductionTilesSetCollection()", "%s\n", v81);
    if (v82 != buf)
      free(v82);
  }
  sub_1001E4804(buf);
  sub_1001E4874(*(uint64_t *)buf, "TilePreloadManifestTilesActive", (BOOL *)&v123);
  v8 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v9 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102197858);
  v11 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v123;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "TILE: isTilePreloadManifestActive, %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    LODWORD(__dst.__r_.__value_.__l.__data_) = 67109120;
    HIDWORD(__dst.__r_.__value_.__r.__words[0]) = v123;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: isTilePreloadManifestActive, %d", &__dst);
    v84 = (char *)v83;
    sub_100512490("Generic", 1, 0, 2, "CLTilesSetCollection CLTilesManager::initializeProductionTilesSetCollection()", "%s\n", v83);
    if (v84 != buf)
      free(v84);
  }
  sub_100FB146C();
  if (byte_1023094C8[23] < 0)
    sub_100115CE4(&__dst, *(void **)byte_1023094C8, *(unint64_t *)&byte_1023094C8[8]);
  else
    __dst = *(std::string *)byte_1023094C8;
  sub_1001E4804(buf);
  v121 = sub_1000BCB64(*(uint64_t *)buf, "DEMTilesServerUrl", &__dst);
  v12 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v13 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102197838);
  v15 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    p_dst = &__dst;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136380931;
    *(_QWORD *)&buf[4] = p_dst;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = v121;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "TILE: defaultDemTilesServerUrl, %{private}s, overridden, %{public}d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197838);
    v85 = &__dst;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v85 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    LODWORD(v130.__r_.__value_.__l.__data_) = 136380931;
    *(std::string::size_type *)((char *)v130.__r_.__value_.__r.__words + 4) = (std::string::size_type)v85;
    WORD2(v130.__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&v130.__r_.__value_.__r.__words[1] + 6) = v121;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "TILE: defaultDemTilesServerUrl, %{private}s, overridden, %{public}d", &v130, 18);
    v87 = (char *)v86;
    sub_100512490("Generic", 1, 0, 2, "CLTilesSetCollection CLTilesManager::initializeProductionTilesSetCollection()", "%s\n", v86);
    if (v87 != buf)
      free(v87);
  }
  sub_100FB1500();
  if (byte_102309518[23] < 0)
    sub_100115CE4(&v130, *(void **)byte_102309518, *(unint64_t *)&byte_102309518[8]);
  else
    v130 = *(std::string *)byte_102309518;
  sub_1001E4804(buf);
  v17 = sub_1000BCB64(*(uint64_t *)buf, "HrseTilesServerUrl", &v130);
  v18 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v19 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102197838);
  v21 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v22 = &v130;
    if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v22 = (std::string *)v130.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136380931;
    *(_QWORD *)&buf[4] = v22;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = v17;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "TILE: defaultHrseTilesServerUrl, %{private}s, overridden, %{public}d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197838);
    v88 = &v130;
    if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v88 = (std::string *)v130.__r_.__value_.__r.__words[0];
    LODWORD(v129.__r_.__value_.__l.__data_) = 136380931;
    *(std::string::size_type *)((char *)v129.__r_.__value_.__r.__words + 4) = (std::string::size_type)v88;
    WORD2(v129.__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&v129.__r_.__value_.__r.__words[1] + 6) = v17;
    LODWORD(v118) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "TILE: defaultHrseTilesServerUrl, %{private}s, overridden, %{public}d", &v129, v118);
    v90 = (char *)v89;
    sub_100512490("Generic", 1, 0, 2, "CLTilesSetCollection CLTilesManager::initializeProductionTilesSetCollection()", "%s\n", v89);
    if (v90 != buf)
      free(v90);
  }
  sub_100FB1594();
  if (byte_1023095B8[23] < 0)
    sub_100115CE4(&v129, *(void **)byte_1023095B8, *(unint64_t *)&byte_1023095B8[8]);
  else
    v129 = *(std::string *)byte_1023095B8;
  sub_1001E4804(buf);
  v120 = sub_1000BCB64(*(uint64_t *)buf, "TilePreloadManifestServerUrl", &v129);
  v23 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v24 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102197838);
  v26 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v27 = &v129;
    if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v27 = (std::string *)v129.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136380931;
    *(_QWORD *)&buf[4] = v27;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = v120;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "TILE: defaultTilePreloadManifestServerUrl, %{private}s, overridden, %{public}d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197838);
    v91 = &v129;
    if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v91 = (std::string *)v129.__r_.__value_.__r.__words[0];
    LODWORD(v128.__r_.__value_.__l.__data_) = 136380931;
    *(std::string::size_type *)((char *)v128.__r_.__value_.__r.__words + 4) = (std::string::size_type)v91;
    WORD2(v128.__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&v128.__r_.__value_.__r.__words[1] + 6) = v120;
    LODWORD(v118) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "TILE: defaultTilePreloadManifestServerUrl, %{private}s, overridden, %{public}d", &v128, v118);
    v93 = (char *)v92;
    sub_100512490("Generic", 1, 0, 2, "CLTilesSetCollection CLTilesManager::initializeProductionTilesSetCollection()", "%s\n", v92);
    if (v93 != buf)
      free(v93);
  }
  sub_100FB1628();
  if (byte_102309608[23] < 0)
    sub_100115CE4(&v128, *(void **)byte_102309608, *(unint64_t *)&byte_102309608[8]);
  else
    v128 = *(std::string *)byte_102309608;
  sub_1001E4804(buf);
  v119 = sub_1000BCB64(*(uint64_t *)buf, "TransitMacServerUrl", &v128);
  v28 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v29 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102197838);
  v122 = a2;
  v31 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v32 = &v128;
    if ((v128.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v32 = (std::string *)v128.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136380931;
    *(_QWORD *)&buf[4] = v32;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = v119;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "TILE: defaultTransitMacTilesServerUrl, %{private}s, overridden, %{public}d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197838);
    v94 = &v128;
    if ((v128.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v94 = (std::string *)v128.__r_.__value_.__r.__words[0];
    __p[0] = 136380931;
    *(_QWORD *)&__p[1] = v94;
    v126 = 1026;
    v127 = v119;
    LODWORD(v118) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "TILE: defaultTransitMacTilesServerUrl, %{private}s, overridden, %{public}d", __p, v118);
    v96 = (char *)v95;
    sub_100512490("Generic", 1, 0, 2, "CLTilesSetCollection CLTilesManager::initializeProductionTilesSetCollection()", "%s\n", v95);
    if (v96 != buf)
      free(v96);
  }
  sub_1001E4804(buf);
  v33 = (uint64_t *)(a1 + 208);
  sub_1001FD98C(*(uint64_t *)buf, "MaxTileAge", (void *)(a1 + 208));
  v34 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v35 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102197858);
  v37 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v38 = *v33;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v38;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "TILE: fDefaultMaxTileAge, %.1lf", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v97 = *v33;
    __p[0] = 134217984;
    *(_QWORD *)&__p[1] = v97;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: fDefaultMaxTileAge, %.1lf", COERCE_DOUBLE(__p));
    v99 = (char *)v98;
    sub_100512490("Generic", 1, 0, 2, "CLTilesSetCollection CLTilesManager::initializeProductionTilesSetCollection()", "%s\n", v98);
    if (v99 != buf)
      free(v99);
  }
  sub_1001E4804(buf);
  v39 = (uint64_t *)(a1 + 216);
  sub_1001FD98C(*(uint64_t *)buf, "AncientTilesThreshold", (void *)(a1 + 216));
  v40 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v41 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102197858);
  v43 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v44 = *v39;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v44;
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "TILE: fDefaultMaxTileDataAge, %.1lf", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v100 = *v39;
    __p[0] = 134217984;
    *(_QWORD *)&__p[1] = v100;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: fDefaultMaxTileDataAge, %.1lf", COERCE_DOUBLE(__p));
    v102 = (char *)v101;
    sub_100512490("Generic", 1, 0, 2, "CLTilesSetCollection CLTilesManager::initializeProductionTilesSetCollection()", "%s\n", v101);
    if (v102 != buf)
      free(v102);
  }
  sub_1001E4804(buf);
  v45 = (uint64_t *)(a1 + 224);
  sub_1001FD98C(*(uint64_t *)buf, "EncryptionGracePeriod", (void *)(a1 + 224));
  v46 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v47 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102197858);
  v49 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v50 = *v45;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v50;
    _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEBUG, "TILE: fDefaultEncryptionGracePeriod, %.1lf", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v103 = *v45;
    __p[0] = 134217984;
    *(_QWORD *)&__p[1] = v103;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: fDefaultEncryptionGracePeriod, %.1lf", COERCE_DOUBLE(__p));
    v105 = (char *)v104;
    sub_100512490("Generic", 1, 0, 2, "CLTilesSetCollection CLTilesManager::initializeProductionTilesSetCollection()", "%s\n", v104);
    if (v105 != buf)
      free(v105);
  }
  sub_1001E4804(buf);
  v51 = (int *)(a1 + 432);
  sub_1001E4B84(*(uint64_t *)buf, "MaxNumOfTiles", (_DWORD *)(a1 + 432));
  v52 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v53 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102197858);
  v55 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v56 = *v51;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v56;
    _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEBUG, "TILE: fMaxNumOfTiles, %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v106 = *v51;
    __p[0] = 67109120;
    __p[1] = v106;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: fMaxNumOfTiles, %d", __p);
    v108 = (char *)v107;
    sub_100512490("Generic", 1, 0, 2, "CLTilesSetCollection CLTilesManager::initializeProductionTilesSetCollection()", "%s\n", v107);
    if (v108 != buf)
      free(v108);
  }
  sub_1001E4804(buf);
  v57 = (BOOL *)(a1 + 440);
  v58 = sub_1001E4874(*(uint64_t *)buf, "DisableTilesWhileLocked", (BOOL *)(a1 + 440));
  v59 = v58;
  v60 = *(std::__shared_weak_count **)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_125;
  v61 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
  do
    v62 = __ldaxr(v61);
  while (__stlxr(v62 - 1, v61));
  if (!v62)
  {
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
    if ((v59 & 1) != 0)
    {
LABEL_127:
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102197858);
      v63 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        v64 = *v57;
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v64;
        _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEBUG, "TILE: fDefaultDisableTilesWhileLocked, %d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102197858);
        v109 = *v57;
        __p[0] = 67109120;
        __p[1] = v109;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: fDefaultDisableTilesWhileLocked, %d", __p);
        v111 = (char *)v110;
        sub_100512490("Generic", 1, 0, 2, "CLTilesSetCollection CLTilesManager::initializeProductionTilesSetCollection()", "%s\n", v110);
        if (v111 != buf)
          free(v111);
      }
      sub_1001E4804(buf);
      v65 = (int *)(a1 + 444);
      v66 = sub_1001E4B84(*(uint64_t *)buf, "NumOfSurroundingCirclesDEM", (_DWORD *)(a1 + 444));
      v67 = v66;
      v68 = *(std::__shared_weak_count **)&buf[8];
      if (!*(_QWORD *)&buf[8])
        goto LABEL_136;
      v69 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
        if (!v67)
          goto LABEL_142;
      }
      else
      {
LABEL_136:
        if (!v66)
          goto LABEL_142;
      }
      if (*v65 < 0)
        *v65 = 8;
LABEL_142:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102197878);
      v71 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v72 = *v65;
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v72;
        _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEBUG, "TILE: DEM,fDefaultNumOfSurroundingCirclesDEM, %d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102197878);
        v112 = *v65;
        __p[0] = 67109120;
        __p[1] = v112;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "TILE: DEM,fDefaultNumOfSurroundingCirclesDEM, %d", __p);
        v114 = (char *)v113;
        sub_100512490("Generic", 1, 0, 2, "CLTilesSetCollection CLTilesManager::initializeProductionTilesSetCollection()", "%s\n", v113);
        if (v114 != buf)
          free(v114);
      }
      sub_1001E4804(buf);
      v73 = (int *)(a1 + 452);
      v74 = sub_1001E4B84(*(uint64_t *)buf, "NumOfSurroundingCirclesHrse", (_DWORD *)(a1 + 452));
      v75 = v74;
      v76 = *(std::__shared_weak_count **)&buf[8];
      if (!*(_QWORD *)&buf[8])
        goto LABEL_151;
      v77 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
        if (!v75)
          goto LABEL_155;
      }
      else
      {
LABEL_151:
        if (!v74)
          goto LABEL_155;
      }
      if (*v73 < 0)
        *v73 = 5;
LABEL_155:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102197878);
      v79 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v80 = *v73;
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v80;
        _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEBUG, "TILE: HRSE,fDefaultNumOfSurroundingCirclesHrse, %d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102197878);
        v115 = *v73;
        __p[0] = 67109120;
        __p[1] = v115;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "TILE: HRSE,fDefaultNumOfSurroundingCirclesHrse, %d", __p);
        v117 = (char *)v116;
        sub_100512490("Generic", 1, 0, 2, "CLTilesSetCollection CLTilesManager::initializeProductionTilesSetCollection()", "%s\n", v116);
        if (v117 != buf)
          free(v117);
      }
      sub_101245358(v122);
      operator new();
    }
  }
  else
  {
LABEL_125:
    if ((v58 & 1) != 0)
      goto LABEL_127;
  }
  sub_100197040();
  *v57 = sub_10075C378();
  goto LABEL_127;
}

void sub_100FB0688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (a32 < 0)
    operator delete(__p);
  if (a39 < 0)
    operator delete(a34);
  if (a46 < 0)
    operator delete(a41);
  if (a53 < 0)
    operator delete(a48);
  _Unwind_Resume(a1);
}

void sub_100FB08BC(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  uint64_t v11;
  uint8_t buf[4];
  uint64_t v13;

  *(double *)(*(_QWORD *)(a1 + 32) + 232) = fmin(*(double *)(*(_QWORD *)(a1 + 32) + 232), *(double *)(a2 + 136));
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102197858);
  v3 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v4 = a2 + 8;
    if (*(char *)(a2 + 31) < 0)
      v4 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)buf = 136315138;
    v13 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "TILE: registered, tilesSet, %s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v7 = *(_QWORD *)(a2 + 8);
    v6 = a2 + 8;
    v5 = v7;
    if (*(char *)(v6 + 23) >= 0)
      v5 = v6;
    v10 = 136315138;
    v11 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: registered, tilesSet, %s", (const char *)&v10);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "CLTilesManager::CLTilesManager(id<CLIntersiloUniverse>, std::unique_ptr<CLITilesManagerExternal>, std::optional<CLTilesSetCollection>)_block_invoke", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
}

void sub_100FB0A9C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  os_activity_scope_state_s state;
  char v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  CLProfilingIdentify("CLTilesManager::onPCTimerFired");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102197818);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v7 = 1;
    v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLTilesManager::onPCTimerFired", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102197818);
    v5 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2082;
      v13 = "activity";
      v14 = 2050;
      v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLTilesManager::onPCTimerFired\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v7 = 0;
  }
  sub_100FBECEC(a2, a1);
  if (v7)
    os_activity_scope_leave(&state);
}

void sub_100FB0C4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

BOOL sub_100FB0C6C(uint64_t a1, double a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  void *v9;
  NSObject *v10;
  const char *v12;
  uint8_t *v13;
  uint64_t v14;
  _QWORD v15[6];
  _QWORD v16[6];
  _WORD v17[8];
  uint8_t buf[1640];

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102197858);
  v4 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "TILE: listAvailableFilesAllTypes, start", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v17[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: listAvailableFilesAllTypes, start", v17, 2);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLTilesManager::listAvailableFilesAllTypes(CFAbsoluteTime)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  v5 = *(unsigned __int8 *)(a1 + 200);
  if (*(_BYTE *)(a1 + 200))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v6 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "TILE: listAvailableFilesAllTypes, can't list tiles while locked, wait for unlock", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102197858);
      v17[0] = 0;
      LODWORD(v14) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: listAvailableFilesAllTypes, can't list tiles while locked, wait for unlock", v17, v14);
LABEL_15:
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLTilesManager::listAvailableFilesAllTypes(CFAbsoluteTime)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else if (!*(_BYTE *)(a1 + 201))
  {
    if ((byte_102309450 & 1) != 0)
      goto LABEL_20;
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_100FB798C;
    v16[3] = &unk_1021975C8;
    v16[4] = &stru_1021975A0;
    v16[5] = a1;
    sub_1001CD7EC(a1, (uint64_t)"listerSetClass", (uint64_t)v16);
    byte_102309450 = 1;
    if (!*(_BYTE *)(a1 + 201))
    {
LABEL_20:
      v9 = *(void **)(a1 + 40);
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472;
      v15[2] = sub_100FB8204;
      v15[3] = &unk_102143528;
      v15[4] = a1;
      *(double *)&v15[5] = a2;
      objc_msgSend(v9, "async:", v15);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102197858);
      v10 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "TILE: listAvailableFilesAllTypes, done", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102197858);
        v17[0] = 0;
        LODWORD(v14) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: listAvailableFilesAllTypes, done", v17, v14);
        goto LABEL_15;
      }
    }
  }
  return v5 == 0;
}

id sub_100FB10B8(uint64_t a1, int a2, uint64_t a3)
{
  NSObject *v6;
  void *v7;
  const char *v9;
  uint8_t *v10;
  _QWORD v11[7];
  char v12;
  _DWORD v13[4];
  uint8_t buf[4];
  int v15;

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102197858);
  v6 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    v15 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "TILE: _tileDownloadCompleted, success, %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v13[0] = 67109120;
    v13[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: _tileDownloadCompleted, success, %d", v13);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "static void CLTilesManager::_tileDownloadCompleted(CLFileDownload *, BOOL, void *)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  v7 = *(void **)(a3 + 40);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100FBC21C;
  v11[3] = &unk_1021528C0;
  v12 = a2;
  v11[4] = a3;
  v11[5] = a1;
  v11[6] = a3;
  return objc_msgSend(v7, "async:", v11);
}

uint64_t sub_100FB12B4(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  sub_1000F34E0((_QWORD *)a1);
  return a1;
}

uint64_t sub_100FB12FC(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  sub_1000F34E0((_QWORD *)a1);
  return a1;
}

uint64_t sub_100FB1344(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021978C8;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_100FB13B8()
{
  sub_100B5D3A0();
}

void sub_100FB1440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13)
{
  uint64_t v13;

  if (a12)
  {
    *(_QWORD *)(v13 - 24) = &a9;
    sub_100CBD658((void ***)(v13 - 24));
  }
  sub_101924D98(&a13);
  _Unwind_Resume(a1);
}

__int128 *sub_100FB146C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1023094E0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1023094E0))
  {
    xmmword_1023094C8 = 0uLL;
    unk_1023094D8 = 0;
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1023094C8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1023094E0);
  }
  if (qword_1023094E8 != -1)
    dispatch_once(&qword_1023094E8, &stru_102197670);
  return &xmmword_1023094C8;
}

__int128 *sub_100FB1500()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_102309530);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_102309530))
  {
    xmmword_102309518 = 0uLL;
    unk_102309528 = 0;
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102309518, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102309530);
  }
  if (qword_102309538 != -1)
    dispatch_once(&qword_102309538, &stru_1021976B0);
  return &xmmword_102309518;
}

__int128 *sub_100FB1594()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1023095D0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1023095D0))
  {
    xmmword_1023095B8 = 0uLL;
    unk_1023095C8 = 0;
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1023095B8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1023095D0);
  }
  if (qword_1023095D8 != -1)
    dispatch_once(&qword_1023095D8, &stru_102197730);
  return &xmmword_1023095B8;
}

__int128 *sub_100FB1628()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_102309620);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_102309620))
  {
    xmmword_102309608 = 0uLL;
    unk_102309618 = 0;
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102309608, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102309620);
  }
  if (qword_102309628 != -1)
    dispatch_once(&qword_102309628, &stru_102197770);
  return &xmmword_102309608;
}

uint64_t *sub_100FB16BC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1023094B8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1023094B8))
  {
    qword_1023094A0 = 0;
    *(_QWORD *)algn_1023094A8 = 0;
    qword_1023094B0 = 0;
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1023094A0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1023094B8);
  }
  if (qword_1023094C0 != -1)
    dispatch_once(&qword_1023094C0, &stru_102197650);
  return &qword_1023094A0;
}

uint64_t *sub_100FB1750()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_102309508);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_102309508))
  {
    qword_1023094F0 = 0;
    *(_QWORD *)algn_1023094F8 = 0;
    qword_102309500 = 0;
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1023094F0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102309508);
  }
  if (qword_102309510 != -1)
    dispatch_once(&qword_102309510, &stru_102197690);
  return &qword_1023094F0;
}

uint64_t *sub_100FB17E4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_102309558);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_102309558))
  {
    qword_102309540 = 0;
    *(_QWORD *)algn_102309548 = 0;
    qword_102309550 = 0;
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102309540, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102309558);
  }
  if (qword_102309560 != -1)
    dispatch_once(&qword_102309560, &stru_1021976D0);
  return &qword_102309540;
}

void sub_100FB1878(uint64_t a1@<X0>, std::string::size_type a2@<X8>)
{
  __CFString *v3;
  __CFString *v4;
  id v5;
  char *v6;
  std::string *v7;
  __int128 v8;
  void **v9;
  std::string::size_type v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  NSObject *v15;
  std::string::size_type v16;
  std::string::size_type v17;
  const char *v18;
  std::string *v19;
  std::string v20;
  void *__p[2];
  char v22;
  void *v23[2];
  unsigned __int8 v24;
  std::string v25;
  std::string v26;

  v3 = (__CFString *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 464) + 16))(*(_QWORD *)(a1 + 464));
  if (v3 && (v4 = v3, -[__CFString length](v3, "length")))
  {
    v5 = -[__CFString rangeOfCharacterFromSet:](v4, "rangeOfCharacterFromSet:", -[NSCharacterSet invertedSet](+[NSCharacterSet decimalDigitCharacterSet](NSCharacterSet, "decimalDigitCharacterSet"), "invertedSet"));
    if (v5 != (id)0x7FFFFFFFFFFFFFFFLL)
      v4 = (__CFString *)-[__CFString substringToIndex:](v4, "substringToIndex:", v5);
  }
  else
  {
    v4 = CFSTR("143441");
  }
  sub_1015A2E04(v23, (char *)-[__CFString UTF8String](v4, "UTF8String"));
  sub_100197040();
  if (sub_100081BD0())
    v6 = "2";
  else
    v6 = "1";
  sub_1015A2E04(__p, v6);
  sub_100FBF500();
  sub_1003625F4((const void **)&qword_102309568, (const void **)__p, (uint64_t)&v20);
  v7 = std::string::append(&v20, "/");
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if ((v24 & 0x80u) == 0)
    v9 = v23;
  else
    v9 = (void **)v23[0];
  if ((v24 & 0x80u) == 0)
    v10 = v24;
  else
    v10 = (std::string::size_type)v23[1];
  v11 = std::string::append(&v26, (const std::string::value_type *)v9, v10);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  v13 = std::string::append(&v25, "/v1");
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)&v13->__r_.__value_.__l + 2);
  *(_OWORD *)a2 = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102197858);
  v15 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(a2 + 23) >= 0)
      v16 = a2;
    else
      v16 = *(_QWORD *)a2;
    LODWORD(v25.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v25.__r_.__value_.__r.__words + 4) = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "TILE: fullAppTilesServerUrl, %s", (uint8_t *)&v25, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&v25, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    if (*(char *)(a2 + 23) >= 0)
      v17 = a2;
    else
      v17 = *(_QWORD *)a2;
    LODWORD(v26.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v26.__r_.__value_.__r.__words + 4) = v17;
    _os_log_send_and_compose_impl(2, 0, &v25, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: fullAppTilesServerUrl, %s", (const char *)&v26);
    v19 = (std::string *)v18;
    sub_100512490("Generic", 1, 0, 2, "std::string CLTilesManager::composeFullAppTilesServerUrl()", "%s\n", v18);
    if (v19 != &v25)
      free(v19);
  }
  if (v22 < 0)
    operator delete(__p[0]);
  if ((char)v24 < 0)
    operator delete(v23[0]);
}

void sub_100FB1BD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (*(char *)(v35 + 23) < 0)
    operator delete(*(void **)v35);
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100FB1C74()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1023095A8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1023095A8))
  {
    qword_102309590 = 0;
    *(_QWORD *)algn_102309598 = 0;
    qword_1023095A0 = 0;
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102309590, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1023095A8);
  }
  if (qword_1023095B0 != -1)
    dispatch_once(&qword_1023095B0, &stru_102197710);
  return &qword_102309590;
}

uint64_t *sub_100FB1D08()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1023095F8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1023095F8))
  {
    qword_1023095E0 = 0;
    *(_QWORD *)algn_1023095E8 = 0;
    qword_1023095F0 = 0;
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1023095E0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1023095F8);
  }
  if (qword_102309600 != -1)
    dispatch_once(&qword_102309600, &stru_102197750);
  return &qword_1023095E0;
}

uint64_t sub_100FB1D9C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v6;

  *(_QWORD *)a1 = &off_102197470;
  sub_100FBF0AC((_QWORD *)a1);
  if (*(char *)(a1 + 703) < 0)
    operator delete(*(void **)(a1 + 680));
  if (*(char *)(a1 + 679) < 0)
    operator delete(*(void **)(a1 + 656));
  sub_1000F34E0((_QWORD *)(a1 + 624));
  if (*(char *)(a1 + 623) < 0)
    operator delete(*(void **)(a1 + 600));
  if (*(char *)(a1 + 591) < 0)
    operator delete(*(void **)(a1 + 568));
  sub_1000F34E0((_QWORD *)(a1 + 528));
  v6 = (void **)(a1 + 504);
  sub_100CBD658(&v6);
  v2 = *(_QWORD *)(a1 + 464);
  *(_QWORD *)(a1 + 464) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  sub_1008B9D24(a1 + 112, *(_QWORD **)(a1 + 120));
  return sub_100FB1344(a1);
}

void sub_100FB1E9C(uint64_t a1)
{
  sub_100FB1D9C(a1);
  operator delete();
}

void sub_100FB1EC0(uint64_t a1, uint64_t a2, int *a3, int *a4)
{
  NSObject *v7;
  int v8;
  double v9;
  double v10;
  NSObject *v11;
  int v12;
  int v13;
  _BOOL4 v14;
  int v15;
  BOOL v16;
  int v17;
  NSObject *v18;
  NSObject *v19;
  int v20;
  int v21;
  const char *v22;
  uint8_t *v23;
  int v24;
  _BOOL4 v25;
  const char *v26;
  uint8_t *v27;
  int v28;
  const char *v29;
  uint8_t *v30;
  const char *v31;
  uint8_t *v32;
  uint64_t v33;
  int v34;
  _BYTE v35[10];
  _DWORD v36[4];
  uint8_t buf[4];
  _BYTE v38[10];
  _DWORD v39[406];

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102197858);
  v7 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v8 = *a3;
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)v38 = a1;
    *(_WORD *)&v38[8] = 1024;
    v39[0] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TILE: onDataProtectionNotification, %p, notification, %d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v21 = *a3;
    v34 = 134218240;
    *(_QWORD *)v35 = a1;
    *(_WORD *)&v35[8] = 1024;
    v36[0] = v21;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: onDataProtectionNotification, %p, notification, %d", &v34, 18);
    v23 = (uint8_t *)v22;
    sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::onDataProtectionNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)", "%s\n", v22);
    if (v23 != buf)
      free(v23);
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 464) + 56))(*(_QWORD *)(a1 + 464));
  if (!*a3)
  {
    v10 = v9;
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v11 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v12 = *(unsigned __int8 *)(a1 + 200);
      v13 = *a4;
      v14 = *a4 != 1;
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)v38 = v12;
      *(_WORD *)&v38[4] = 1024;
      *(_DWORD *)&v38[6] = v14;
      LOWORD(v39[0]) = 1024;
      *(_DWORD *)((char *)v39 + 2) = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "TILE: onDataProtectionNotification, kNotificationEncryptedDataAvailability, was, %d, now, %d, availability, %d", buf, 0x14u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102197858);
      v24 = *a4;
      v25 = *a4 != 1;
      *(_WORD *)&v35[4] = 1024;
      *(_DWORD *)&v35[6] = v25;
      LOWORD(v36[0]) = 1024;
      *(_DWORD *)((char *)v36 + 2) = v24;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: onDataProtectionNotification, kNotificationEncryptedDataAvailability, was, %d, now, %d, availability, %d", &v34, 20, 67109632);
      v27 = (uint8_t *)v26;
      sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::onDataProtectionNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)", "%s\n", v26);
      if (v27 != buf)
        free(v27);
    }
    v15 = *(unsigned __int8 *)(a1 + 200);
    v16 = *a4 == 1;
    *(_BYTE *)(a1 + 200) = *a4 != 1;
    if (v16)
    {
      sub_100FB0C6C(a1, v10);
      v17 = *(unsigned __int8 *)(a1 + 200);
    }
    else
    {
      v17 = 1;
    }
    if (v15 != v17)
    {
      sub_100FB2550(a1, v10);
      if (*(_BYTE *)(a1 + 200))
      {
        sub_100FB2CFC(a1, (uint64_t)"onDataProtectionNotification", a1 + 248, 1);
      }
      else
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102197858);
        v18 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "TILE: updateProtectionClass, skip on unlock", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_102197858);
          LOWORD(v34) = 0;
          LODWORD(v33) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: updateProtectionClass, skip on unlock", &v34, v33);
          v32 = (uint8_t *)v31;
          sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::onDataProtectionNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)", "%s\n", v31);
          if (v32 != buf)
            free(v32);
        }
        sub_100FB30D4(a1);
        sub_1001CD7EC(a1, (uint64_t)"onDataProtectionNotification.cleanUnknownCache", (uint64_t)&stru_102197540);
      }
      sub_100168EA8(a1, v10);
    }
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197838);
    v19 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
    {
      v20 = *(unsigned __int8 *)(a1 + 200);
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)v38 = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "@TileEvent, all, locked, %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102197838);
      v28 = *(unsigned __int8 *)(a1 + 200);
      v34 = 67240192;
      *(_DWORD *)v35 = v28;
      LODWORD(v33) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "@TileEvent, all, locked, %{public}d", &v34, v33);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::onDataProtectionNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
  }
}

void sub_100FB2550(uint64_t a1, double a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  _BOOL4 v16;
  uint64_t v17;
  _BOOL4 v18;
  NSObject *v19;
  _BYTE *v20;
  uint64_t v21;
  _BYTE *v22;
  char *v23;
  char *v24;
  NSObject *v25;
  int v26;
  int v27;
  const char *v28;
  char *v29;
  int v30;
  const char *v31;
  char *v32;
  uint64_t v33;
  const char *v34;
  char *v35;
  int v36;
  _BYTE v37[14];
  char v38;
  int v39;
  _BYTE *v40;
  _BYTE buf[14];
  char v42;

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102197858);
  v4 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(unsigned __int8 *)(a1 + 200);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "TILE: cleanUpDownloadList, start, isLocked, %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v27 = *(unsigned __int8 *)(a1 + 200);
    *(_DWORD *)v37 = 67109120;
    *(_DWORD *)&v37[4] = v27;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: cleanUpDownloadList, start, isLocked, %d", v37);
    v29 = (char *)v28;
    sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::cleanUpDownloadList(CFAbsoluteTime)", "%s\n", v28);
    if (v29 != buf)
      free(v29);
  }
  if (*(_QWORD *)(a1 + 128) >= (unint64_t)*(int *)(a1 + 436))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v6 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v7 = *(_QWORD *)(a1 + 128);
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "TILES: cleanUpDownloadList, download list is too large, %lu", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102197858);
      v33 = *(_QWORD *)(a1 + 128);
      *(_DWORD *)v37 = 134217984;
      *(_QWORD *)&v37[4] = v33;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILES: cleanUpDownloadList, download list is too large, %lu", v37);
      v35 = (char *)v34;
      sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::cleanUpDownloadList(CFAbsoluteTime)", "%s\n", v34);
      if (v35 != buf)
        free(v35);
    }
    sub_100FB3A08(a1);
  }
  v36 = 0;
  if (!*(_BYTE *)(a1 + 200))
  {
    v8 = *(uint64_t **)(a1 + 112);
    if (v8 != (uint64_t *)(a1 + 120))
    {
      v36 = 0;
      do
      {
        v9 = (uint64_t *)v8[1];
        v10 = v8;
        if (v9)
        {
          do
          {
            v11 = v9;
            v9 = (uint64_t *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            v11 = (uint64_t *)v10[2];
            v12 = *v11 == (_QWORD)v10;
            v10 = v11;
          }
          while (!v12);
        }
        v13 = (unsigned int *)v8[10];
        v14 = sub_1001CDA64(a1, v13[12]);
        v15 = *(_DWORD *)(a1 + 424);
        v16 = sub_1001C0618(v14 + 184, v13 + 12);
        if (v16)
        {
          v17 = sub_1001C85FC(v14 + 184, v13 + 12);
          v18 = sub_100077820(v17, v15 > 1, *(float *)(v14 + 128), a2);
        }
        else
        {
          v18 = 0;
        }
        if (!sub_1000782F4((uint64_t)v13) && !v18 && (v16 & sub_1001C94A8((uint64_t)v13)) == 1)
        {
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_102197858);
          v19 = qword_1022A0028;
          if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
          {
            (*(void (**)(_BYTE *__return_ptr, unsigned int *))(*(_QWORD *)v13 + 16))(buf, v13);
            v20 = buf;
            if (v42 < 0)
              v20 = *(_BYTE **)buf;
            *(_DWORD *)v37 = 136315138;
            *(_QWORD *)&v37[4] = v20;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "TILE: cleanUpDownloadList, tileid, %s, available on disc, no need to download", v37, 0xCu);
            if (v42 < 0)
              operator delete(*(void **)buf);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_102197858);
            v21 = qword_1022A0028;
            (*(void (**)(_BYTE *__return_ptr, unsigned int *))(*(_QWORD *)v13 + 16))(v37, v13);
            v22 = v37;
            if (v38 < 0)
              v22 = *(_BYTE **)v37;
            v39 = 136315138;
            v40 = v22;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v21, 2, "TILE: cleanUpDownloadList, tileid, %s, available on disc, no need to download", (const char *)&v39);
            v24 = v23;
            if (v38 < 0)
              operator delete(*(void **)v37);
            sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::cleanUpDownloadList(CFAbsoluteTime)", "%s\n", v24);
            if (v24 != buf)
              free(v24);
          }
          sub_10008A9F0((uint64_t **)(a1 + 112), v8);
          sub_1008B9B1C((uint64_t)(v8 + 4));
          operator delete(v8);
          ++v36;
        }
        if (*(_BYTE *)(a1 + 200))
          break;
        v8 = v11;
      }
      while (v11 != (uint64_t *)(a1 + 120));
    }
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102197858);
  v25 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v26 = *(unsigned __int8 *)(a1 + 200);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v26;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v36;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "TILE: cleanUpDownloadList, done,  isLocked, %d, cleanedFiles, %u", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v30 = *(unsigned __int8 *)(a1 + 200);
    *(_DWORD *)v37 = 67109376;
    *(_DWORD *)&v37[4] = v30;
    *(_WORD *)&v37[8] = 1024;
    *(_DWORD *)&v37[10] = v36;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: cleanUpDownloadList, done,  isLocked, %d, cleanedFiles, %u", v37, 14);
    v32 = (char *)v31;
    sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::cleanUpDownloadList(CFAbsoluteTime)", "%s\n", v31);
    if (v32 != buf)
      free(v32);
  }
}

void sub_100FB2CFC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  NSObject *v7;
  int v8;
  NSObject *v9;
  int v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  _QWORD v15[8];
  char v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  _DWORD v21[2];
  __int16 v22;
  int v23;
  uint8_t buf[4];
  int v25;
  __int16 v26;
  int v27;

  v17 = 0;
  v18 = &v17;
  v19 = 0x2020000000;
  v20 = 0;
  if (*(_BYTE *)(a1 + 200))
  {
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_100FBCBB0;
    v15[3] = &unk_1021975F0;
    v15[6] = a3;
    v15[7] = a2;
    v16 = a4;
    v15[4] = &v17;
    v15[5] = a1;
    sub_1001CD7EC(a1, (uint64_t)"updateProtectionClass", (uint64_t)v15);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v7 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v8 = *((_DWORD *)v18 + 6);
      *(_DWORD *)buf = 67109376;
      v25 = a4;
      v26 = 1024;
      v27 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TILE: updateProtectionClass, done, isAboutToLock, %d, numOfUnProtectedTiles, %d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102197858);
      v10 = *((_DWORD *)v18 + 6);
      v21[0] = 67109376;
      v21[1] = a4;
      v22 = 1024;
      v23 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: updateProtectionClass, done, isAboutToLock, %d, numOfUnProtectedTiles, %d", v21, 14);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    if (*(_BYTE *)(a1 + 200) && *((_DWORD *)v18 + 6))
      sub_100FBE5E0(a1, a2);
    else
      sub_100FB30D4(a1);
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v9 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning TILE: updateProtectionClass, called on when not locked", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102197858);
      LOWORD(v21[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#Warning TILE: updateProtectionClass, called on when not locked", v21, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
  _Block_object_dispose(&v17, 8);
}

void sub_100FB30B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100FB30D4(uint64_t a1)
{
  NSObject *v2;
  id result;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102197858);
  v2 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "TILE: cancelExpiredLocationTimer", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: cancelExpiredLocationTimer", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::cancelExpiredLocationTimer()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  result = *(id *)(a1 + 240);
  if (result)
    return sub_10016E3C4((uint64_t)result);
  return result;
}

void sub_100FB3270(id a1, void *a2)
{
  uint64_t v2;

  if (*(_BYTE *)a2)
  {
    v2 = *((_QWORD *)a2 + 38);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  }
}

id sub_100FB3290(uint64_t a1)
{
  NSObject *v2;
  double v3;
  void *v4;
  const char *v6;
  uint8_t *v7;
  _QWORD v8[6];
  int v9;
  uint64_t v10;
  uint8_t buf[4];
  uint64_t v12;

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102197858);
  v2 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    v12 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "TILE: onCleanupAgedTiles, %p", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v9 = 134217984;
    v10 = a1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: onCleanupAgedTiles, %p", &v9);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::onCleanupAgedTiles()", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  v3 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 464) + 56))(*(_QWORD *)(a1 + 464));
  v4 = *(void **)(a1 + 40);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100FB3488;
  v8[3] = &unk_102143528;
  v8[4] = a1;
  *(double *)&v8[5] = v3;
  return objc_msgSend(v4, "async:", v8);
}

void sub_100FB3488(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];

  v2 = *(_QWORD *)(a1 + 32);
  sub_100FB3524(v2, *(double *)(a1 + 40));
  sub_1001CD7EC(v2, (uint64_t)"onCleanupAgedTiles", (uint64_t)&stru_102197560);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100FB9410;
  v3[3] = &unk_10214C498;
  v3[4] = v2;
  sub_1001CD7EC(v2, (uint64_t)"refreshTilesDataIfNeeded", (uint64_t)v3);
  sub_100168EA8(v2, *(double *)(a1 + 40));
}

uint64_t *sub_100FB3524(uint64_t a1, double a2)
{
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  _QWORD v9[6];
  uint8_t buf[1640];

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100FB64DC;
  v9[3] = &unk_102154608;
  v9[4] = a1;
  *(double *)&v9[5] = a2;
  sub_1001CD7EC(a1, (uint64_t)"deleteAgedTiles", (uint64_t)v9);
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102197858);
  v4 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "TILE: deleteAgedTiles, fTilesToDownload", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: deleteAgedTiles, fTilesToDownload", v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::deleteAgedTiles(CFAbsoluteTime)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return sub_100FB4CDC(a1, a1 + 112, a2);
}

void sub_100FB3714(id a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *((_QWORD *)a2 + 37);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  v4 = *((_QWORD *)a2 + 38);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
}

id *sub_100FB3760(uint64_t a1)
{
  NSObject *v2;
  const char *v9;
  uint8_t *v10;
  _QWORD v11[5];
  id v12[2];
  int v13;
  const char *v14;
  uint8_t buf[4];
  const char *v16;

  sub_100131938(v12, (uint64_t)"clearLocationInformationTiles", 0);
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102197858);
  v2 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136446210;
    v16 = "clearLocationInformationTiles";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "TILE: %{public}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v13 = 136446210;
    v14 = "clearLocationInformationTiles";
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: %{public}s", &v13, 12);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::clearLocationInformation()", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  sub_100FB3A08(a1);
  *(_DWORD *)(a1 + 248) = 0xFFFF;
  *(_QWORD *)(a1 + 260) = 0;
  *(_QWORD *)(a1 + 252) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 268) = xmmword_101BAFC90;
  *(_OWORD *)(a1 + 284) = _Q1;
  *(_OWORD *)(a1 + 300) = _Q1;
  *(_OWORD *)(a1 + 316) = _Q1;
  *(_DWORD *)(a1 + 332) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 336) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 364) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 372) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_BYTE *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  sub_100F5A36C(a1 + 472);
  sub_1004CA4F8(a1 + 624);
  sub_1008BA0E4(a1 + 528);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100FB3CBC;
  v11[3] = &unk_10214C498;
  v11[4] = a1;
  sub_1001CD7EC(a1, (uint64_t)"clearLocationInformationTiles", (uint64_t)v11);
  return sub_100131740(v12);
}

void sub_100FB39E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100FB3A08(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  _QWORD v16[5];
  uint64_t v17[2];
  int v18;
  uint64_t v19;
  uint8_t buf[4];
  uint64_t v21;

  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_100FB670C;
  v16[3] = &unk_10217D888;
  v16[4] = a1;
  v17[0] = mach_absolute_time();
  v17[1] = (uint64_t)v16;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102197858);
  v2 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_QWORD *)(a1 + 128);
    *(_DWORD *)buf = 134217984;
    v21 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "TILE: cancelAllDownloads, planned, %lu", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v13 = *(_QWORD *)(a1 + 128);
    v18 = 134217984;
    v19 = v13;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: cancelAllDownloads, planned, %lu", &v18);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::cancelAllDownloads()", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  v4 = *(_QWORD *)(a1 + 192);
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    *(_BYTE *)(a1 + 176) = 0;
  }
  v5 = *(_QWORD *)(a1 + 160);
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    *(_BYTE *)(a1 + 144) = 0;
  }
  v6 = *(_QWORD **)(a1 + 112);
  v7 = (_QWORD *)(a1 + 120);
  if (v6 != (_QWORD *)(a1 + 120))
  {
    do
    {
      v8 = v6[10];
      sub_100FA2CE0(v8);
      sub_100FA2FF8(v8);
      v9 = (_QWORD *)v6[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v6[2];
          v11 = *v10 == (_QWORD)v6;
          v6 = v10;
        }
        while (!v11);
      }
      v6 = v10;
    }
    while (v10 != v7);
  }
  sub_1008B9D24(a1 + 112, *(_QWORD **)(a1 + 120));
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 112) = v7;
  return sub_100134E40(v17);
}

void sub_100FB3CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100134E40((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100FB3CBC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  sub_100FB3D18(*(_QWORD *)(a1 + 32), 1, *(_DWORD *)(a2 + 4));
  v3 = *(_QWORD *)(a2 + 296);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  result = *(_QWORD *)(a2 + 304);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

uint64_t *sub_100FB3D18(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  double v15;
  double v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  const char *v24;
  double v25;
  double v26;
  uint64_t v27;
  const char *v28;
  uint8_t *v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  const char *v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint8_t *v45;
  const char *v46;
  uint64_t v47;
  _QWORD v48[4];
  unsigned int v49;
  uint64_t v50[2];
  int v51;
  _BYTE v52[18];
  __int16 v53;
  double v54;
  __int16 v55;
  uint64_t v56;
  uint8_t buf[4];
  _BYTE v58[18];
  __int16 v59;
  double v60;
  __int16 v61;
  uint64_t v62;

  if ((a3 & 0xFFFFFFF7) - 1 >= 2)
  {
    sub_101937DA0();
    __break(1u);
  }
  else
  {
    v6 = a3;
    v5 = a2;
    v4 = a1;
    v48[0] = _NSConcreteStackBlock;
    v48[1] = 3221225472;
    v48[2] = sub_100FB6844;
    v48[3] = &unk_10217D868;
    v49 = a3;
    v50[0] = mach_absolute_time();
    v50[1] = (uint64_t)v48;
    v7 = sub_1001CDA64(v4, v6);
    v3 = &qword_1022A0000;
    if (qword_1022A0020 == -1)
      goto LABEL_3;
  }
  dispatch_once(&qword_1022A0020, &stru_102197858);
LABEL_3:
  v8 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v9 = v7 + 8;
    if (*(char *)(v7 + 31) < 0)
      v9 = *(_QWORD *)(v7 + 8);
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)v58 = v6;
    *(_WORD *)&v58[4] = 2080;
    *(_QWORD *)&v58[6] = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "TILE: removeAllTiles, cleaning map, %d, %s", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v3[4] != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v36 = v7 + 8;
    if (*(char *)(v7 + 31) < 0)
      v36 = *(_QWORD *)(v7 + 8);
    v51 = 67109378;
    *(_DWORD *)v52 = v6;
    *(_WORD *)&v52[4] = 2080;
    *(_QWORD *)&v52[6] = v36;
    LODWORD(v46) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: removeAllTiles, cleaning map, %d, %s", &v51, v46);
    v38 = (uint8_t *)v37;
    sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::removeAllTiles(BOOL, CLTilesManager_Type::TileType)", "%s\n", v37);
    if (v38 != buf)
      free(v38);
  }
  v47 = v4;
  v10 = v7 + 184;
  v11 = (_QWORD *)sub_100129380(v7 + 184);
  if (v11 != (_QWORD *)sub_1000DCFC0(v7 + 184))
  {
    do
    {
      if (v5)
      {
        v12 = v11[10];
        sub_100FA2CE0(v12);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102197838);
        v13 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
        {
          v14 = sub_1001CC818(*(_DWORD *)(v12 + 48));
          v15 = sub_1001C087C(v12 + 48);
          v16 = sub_1001C0858(v12 + 48);
          v17 = sub_100026CC8(v10);
          *(_DWORD *)buf = 136446979;
          *(_QWORD *)v58 = v14;
          *(_WORD *)&v58[8] = 2049;
          *(double *)&v58[10] = v15;
          v59 = 2049;
          v60 = v16;
          v61 = 2050;
          v62 = v17;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "@TileList, %{public}s, delete, llsw, %{private}.2lf, %{private}.2lf, all, size, %{public}lu", buf, 0x2Au);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_102197838);
          v21 = qword_1022A0048;
          v23 = *(_DWORD *)(v12 + 48);
          v22 = v12 + 48;
          v24 = sub_1001CC818(v23);
          v25 = sub_1001C087C(v22);
          v26 = sub_1001C0858(v22);
          v27 = sub_100026CC8(v10);
          v51 = 136446979;
          *(_QWORD *)v52 = v24;
          *(_WORD *)&v52[8] = 2049;
          *(double *)&v52[10] = v25;
          v53 = 2049;
          v54 = v26;
          v55 = 2050;
          v56 = v27;
          LODWORD(v46) = 42;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v21, 0, "@TileList, %{public}s, delete, llsw, %{private}.2lf, %{private}.2lf, all, size, %{public}lu", &v51, v46);
          v29 = (uint8_t *)v28;
          sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::removeAllTiles(BOOL, CLTilesManager_Type::TileType)", "%s\n", v28);
          if (v29 != buf)
            free(v29);
        }
      }
      v18 = (_QWORD *)v11[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (_QWORD *)v11[2];
          v20 = *v19 == (_QWORD)v11;
          v11 = v19;
        }
        while (!v20);
      }
      v11 = v19;
    }
    while (v19 != (_QWORD *)sub_1000DCFC0(v10));
  }
  sub_1008B97D8(v10);
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102197858);
  v30 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    if (*(char *)(v7 + 31) >= 0)
      v31 = v7 + 8;
    else
      v31 = *(_QWORD *)(v7 + 8);
    v32 = sub_100026CC8(v10);
    v33 = sub_1008B97D0(v10);
    v34 = *(_QWORD *)(v4 + 128);
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)v58 = v31;
    *(_WORD *)&v58[8] = 2048;
    *(_QWORD *)&v58[10] = v32;
    v59 = 2048;
    v60 = *(double *)&v33;
    v61 = 2048;
    v62 = v34;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "TILE: removeAllTiles, end, name, %s, size, %lu, unprot size, %lu, downloadSize, %lu", buf, 0x2Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v39 = qword_1022A0028;
    if (*(char *)(v7 + 31) >= 0)
      v40 = v7 + 8;
    else
      v40 = *(_QWORD *)(v7 + 8);
    v41 = sub_100026CC8(v10);
    v42 = sub_1008B97D0(v10);
    v43 = *(_QWORD *)(v47 + 128);
    v51 = 136315906;
    *(_QWORD *)v52 = v40;
    *(_WORD *)&v52[8] = 2048;
    *(_QWORD *)&v52[10] = v41;
    v53 = 2048;
    v54 = *(double *)&v42;
    v55 = 2048;
    v56 = v43;
    LODWORD(v46) = 42;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v39, 1, "TILE: removeAllTiles, end, name, %s, size, %lu, unprot size, %lu, downloadSize, %lu", (const char *)&v51, v46, v7, v47);
    v45 = (uint8_t *)v44;
    sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::removeAllTiles(BOOL, CLTilesManager_Type::TileType)", "%s\n", v44);
    if (v45 != buf)
      free(v45);
  }
  return sub_100134E40(v50);
}

void sub_100FB43E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_100134E40((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100FB441C(uint64_t a1, uint64_t a2, int *a3, unsigned __int8 *a4)
{
  NSObject *v7;
  int v8;
  double v9;
  double v10;
  int v11;
  int v12;
  const char *v13;
  uint8_t *v14;
  _DWORD v15[4];
  uint8_t buf[4];
  int v17;

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102197858);
  v7 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v8 = *a3;
    *(_DWORD *)buf = 67109120;
    v17 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "onCompanionNotification, notification, %d, Tiles", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v12 = *a3;
    v15[0] = 67109120;
    v15[1] = v12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "onCompanionNotification, notification, %d, Tiles", v15);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::onCompanionNotification(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 464) + 56))(*(_QWORD *)(a1 + 464));
  if (*a3 == 5)
  {
    v10 = v9;
    sub_100197040();
    if ((sub_100195F08() & 1) != 0)
    {
      v11 = *a4;
      *(_BYTE *)(a1 + 496) = v11;
      if (!v11)
        return;
    }
    else if (!*(_BYTE *)(a1 + 496))
    {
      return;
    }
    sub_100168EA8(a1, v10);
  }
}

void sub_100FB4634(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  NSObject *v7;
  int v8;
  int v9;
  NSObject *v10;
  NSObject *v11;
  const char *v12;
  NSObject *v13;
  int v14;
  NSObject *v15;
  int v16;
  const char *v17;
  uint8_t *v18;
  const char *v19;
  uint8_t *v20;
  int v21;
  const char *v22;
  uint8_t *v23;
  uint8_t *v24;
  uint64_t v25;
  _BYTE v26[12];
  __int16 v27;
  int v28;
  uint8_t buf[4];
  uint64_t v30;
  __int16 v31;
  int v32;

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102197858);
  v7 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v8 = *a3;
    *(_DWORD *)buf = 134218240;
    v30 = a1;
    v31 = 1024;
    v32 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TILE: onClientNotification, %p, notification, %d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v16 = *a3;
    *(_DWORD *)v26 = 134218240;
    *(_QWORD *)&v26[4] = a1;
    v27 = 1024;
    v28 = v16;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: onClientNotification, %p, notification, %d", v26, 18);
    v18 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
  v9 = *a3;
  if (*a3 == 6)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v11 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "TILE: #CacheDelete kNotificationSoftwareUpdateStorageRecovery", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_34;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    *(_WORD *)v26 = 0;
    LODWORD(v25) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "TILE: #CacheDelete kNotificationSoftwareUpdateStorageRecovery", v26, v25, *(_QWORD *)v26);
    goto LABEL_51;
  }
  if (v9 != 4)
  {
    if (!v9)
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102197858);
      v10 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "TILE: kNotificationReset", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102197858);
        *(_WORD *)v26 = 0;
        LODWORD(v25) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: kNotificationReset", v26, v25);
        v20 = (uint8_t *)v19;
        sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v19);
        if (v20 != buf)
          free(v20);
      }
      sub_100FB3760(a1);
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 464) + 64))(*(_QWORD *)(a1 + 464));
    }
    return;
  }
  *(_BYTE *)(a1 + 428) = *(_DWORD *)(a4 + 188) == 1;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102197858);
  v13 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v14 = *(unsigned __int8 *)(a1 + 428);
    *(_DWORD *)buf = 67109120;
    LODWORD(v30) = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "TILE: kNotificationLocationServicesStatus, areLocationServicesEnabled, %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v21 = *(unsigned __int8 *)(a1 + 428);
    *(_DWORD *)v26 = 67109120;
    *(_DWORD *)&v26[4] = v21;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: kNotificationLocationServicesStatus, areLocationServicesEnabled, %d", v26);
    v23 = (uint8_t *)v22;
    sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v22);
    if (v23 != buf)
      free(v23);
  }
  if (!*(_BYTE *)(a1 + 428))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v15 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "TILE: location services off, remove all the tiles", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_34;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    *(_WORD *)v26 = 0;
    LODWORD(v25) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: location services off, remove all the tiles", v26, v25, *(_QWORD *)v26);
LABEL_51:
    v24 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v12);
    if (v24 != buf)
      free(v24);
LABEL_34:
    sub_100FB3760(a1);
  }
}

uint64_t *sub_100FB4CDC(uint64_t a1, uint64_t a2, double a3)
{
  NSObject *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t *v12;
  _BOOL4 v13;
  int v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  double v19;
  int v20;
  double v21;
  double v22;
  int v23;
  double v24;
  double v25;
  BOOL v26;
  NSObject *v27;
  const char *v28;
  double v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  const char *v35;
  double v36;
  double v37;
  uint64_t v38;
  const char *v39;
  uint8_t *v40;
  int v41;
  NSObject *v42;
  uint64_t v43;
  NSObject *v44;
  const char *v46;
  uint8_t *v47;
  uint64_t v48;
  const char *v49;
  uint8_t *v50;
  uint64_t v51;
  double v54[5];
  _OWORD v55[8];
  _OWORD v56[2];
  _QWORD v57[5];
  uint64_t v58[2];
  int v59;
  _BYTE v60[18];
  __int16 v61;
  double v62;
  __int16 v63;
  uint64_t v64;
  uint8_t buf[4];
  _BYTE v66[20];
  double v67;
  __int16 v68;
  uint64_t v69;

  v57[0] = _NSConcreteStackBlock;
  v57[1] = 3221225472;
  v57[2] = sub_100FB54F0;
  v57[3] = &unk_10217D888;
  *(double *)&v57[4] = a3;
  v58[0] = mach_absolute_time();
  v58[1] = (uint64_t)v57;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102197858);
  v4 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "TILE: deleteAgedDownloadItems, start", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    LOWORD(v59) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: deleteAgedDownloadItems, start", &v59, 2);
    v47 = (uint8_t *)v46;
    sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::deleteAgedDownloadItems(std::map<TileId, std::unique_ptr<CLTileFile>> &, CFAbsoluteTime)", "%s\n", v46);
    if (v47 != buf)
      free(v47);
  }
  v5 = a1 + 248;
  v6 = *(_OWORD *)(a1 + 360);
  v7 = *(_OWORD *)(a1 + 376);
  v8 = *(_OWORD *)(a1 + 328);
  v55[6] = *(_OWORD *)(a1 + 344);
  v55[7] = v6;
  v56[0] = v7;
  *(_OWORD *)((char *)v56 + 12) = *(_OWORD *)(a1 + 388);
  v9 = *(_OWORD *)(a1 + 296);
  v10 = *(_OWORD *)(a1 + 312);
  v11 = *(_OWORD *)(a1 + 264);
  v55[2] = *(_OWORD *)(a1 + 280);
  v55[3] = v9;
  v12 = *(uint64_t **)a2;
  v55[4] = v10;
  v55[5] = v8;
  v55[0] = *(_OWORD *)(a1 + 248);
  v55[1] = v11;
  v13 = sub_101191944((uint64_t)v55, a3);
  sub_1002433B8((uint64_t)v54);
  if (v12 == (uint64_t *)(a2 + 8))
  {
    v14 = 0;
  }
  else
  {
    v14 = 0;
    do
    {
      v15 = (uint64_t *)v12[1];
      v16 = v12;
      if (v15)
      {
        do
        {
          v17 = v15;
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v17 = (uint64_t *)v16[2];
          v26 = *v17 == (_QWORD)v16;
          v16 = v17;
        }
        while (!v26);
      }
      v18 = v12[10];
      v19 = *(double *)(v18 + 136);
      if (v13)
      {
        v20 = *(_DWORD *)(v18 + 48);
        if (v20 == 1)
        {
          v21 = sub_1001C087C(v18 + 48);
          v22 = sub_1001C0858(v18 + 48);
          v23 = sub_1010B97B4(v54, v5, v21, v22) >= 250000.0 && !sub_100FA2C40(v18);
          v20 = *(_DWORD *)(v18 + 48);
        }
        else
        {
          v23 = 0;
        }
        if (v20 == 2)
        {
          v24 = sub_1001C087C(v18 + 48);
          v25 = sub_1001C0858(v18 + 48);
          if (sub_1010B97B4(v54, v5, v24, v25) >= 200000.0)
            v23 |= !sub_100FA2C40(v18);
        }
      }
      else
      {
        v23 = 0;
      }
      v26 = vabdd_f64(a3, v19) < *(double *)(a1 + 208) && v23 == 0;
      if (!v26)
      {
        sub_100FA2CE0(v18);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102197838);
        v27 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
        {
          v28 = sub_1001CC818(*(_DWORD *)(v18 + 48));
          v29 = sub_1001C087C(v18 + 48);
          v30 = sub_1001C0858(v18 + 48);
          v31 = *(_QWORD *)(a2 + 16) - 1;
          *(_DWORD *)buf = 136446979;
          *(_QWORD *)v66 = v28;
          *(_WORD *)&v66[8] = 2049;
          *(double *)&v66[10] = v29;
          *(_WORD *)&v66[18] = 2049;
          v67 = v30;
          v68 = 2050;
          v69 = v31;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "@TileReq, %{public}s, rmlist, llsw, %{private}.2lf, %{private}.2lf, aged, size, %{public}ld", buf, 0x2Au);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_102197838);
          v32 = qword_1022A0048;
          v34 = *(_DWORD *)(v18 + 48);
          v33 = v18 + 48;
          v35 = sub_1001CC818(v34);
          v36 = sub_1001C087C(v33);
          v37 = sub_1001C0858(v33);
          v38 = *(_QWORD *)(a2 + 16) - 1;
          v59 = 136446979;
          *(_QWORD *)v60 = v35;
          *(_WORD *)&v60[8] = 2049;
          *(double *)&v60[10] = v36;
          v61 = 2049;
          v62 = v37;
          v63 = 2050;
          v64 = v38;
          LODWORD(v51) = 42;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v32, 0, "@TileReq, %{public}s, rmlist, llsw, %{private}.2lf, %{private}.2lf, aged, size, %{public}ld", &v59, v51);
          v40 = (uint8_t *)v39;
          sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::deleteAgedDownloadItems(std::map<TileId, std::unique_ptr<CLTileFile>> &, CFAbsoluteTime)", "%s\n", v39);
          if (v40 != buf)
            free(v40);
        }
        sub_10008A9F0((uint64_t **)a2, v12);
        sub_1008B9B1C((uint64_t)(v12 + 4));
        operator delete(v12);
        ++v14;
      }
      v12 = v17;
    }
    while (v17 != (uint64_t *)(a2 + 8));
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102197838);
  v41 = v14;
  v42 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v43 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)buf = 67240448;
    *(_DWORD *)v66 = v41;
    *(_WORD *)&v66[4] = 2050;
    *(_QWORD *)&v66[6] = v43;
    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "TilesManager, deleteAgedTiles, end, numOfDeletedTiles, %{public}u, remain, %{public}lu", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197838);
    v48 = *(_QWORD *)(a2 + 16);
    v59 = 67240448;
    *(_DWORD *)v60 = v41;
    *(_WORD *)&v60[4] = 2050;
    *(_QWORD *)&v60[6] = v48;
    LODWORD(v51) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "TilesManager, deleteAgedTiles, end, numOfDeletedTiles, %{public}u, remain, %{public}lu", &v59, v51);
    v50 = (uint8_t *)v49;
    sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::deleteAgedDownloadItems(std::map<TileId, std::unique_ptr<CLTileFile>> &, CFAbsoluteTime)", "%s\n", v49);
    if (v50 != buf)
      free(v50);
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102197858);
  v44 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)v66 = 0;
    *(_WORD *)&v66[4] = 2082;
    *(_QWORD *)&v66[6] = "";
    *(_WORD *)&v66[14] = 1026;
    *(_DWORD *)&v66[16] = v41;
    _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Finished CLTilesManager::deleteAgedDownloadItems\", \"deleted\":%{public}u}", buf, 0x18u);
  }
  return sub_100134E40(v58);
}

void sub_100FB54B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  sub_100134E40(&a47);
  _Unwind_Resume(a1);
}

void sub_100FB54F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6;
  NSObject *v7;
  uint64_t v8;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  double v19;
  __int16 v20;
  uint64_t v21;

  v6 = sub_100127828(a3 - a2);
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102197858);
  v7 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v8 = *(_QWORD *)(a1 + 32);
    v9[0] = 68290306;
    v9[1] = 0;
    v10 = 2082;
    v11 = "";
    v12 = 2082;
    v13 = "elapsed";
    v14 = 2050;
    v15 = a2;
    v16 = 2050;
    v17 = a3;
    v18 = 2050;
    v19 = v6;
    v20 = 2050;
    v21 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLTilesManager::deleteAgedDownloadItems\", \"event\":%{public, location:escape_only}s, \"begin_mach\":%{public}llu, \"end_mach\":%{public}llu, \"elapsed_s\":\"%{public}.09f\", \"now_s\":\"%{public}.09f\"}", (uint8_t *)v9, 0x44u);
  }
}

uint64_t *sub_100FB5624(double a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  BOOL v16;
  NSObject *v17;
  const char *v18;
  double v19;
  double v20;
  _BOOL4 v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  double v26;
  double v27;
  _BOOL4 v28;
  uint64_t v29;
  const char *v30;
  const char *v31;
  char *v32;
  uint64_t v33;
  uint64_t *v34;
  unsigned int *v35;
  NSObject *v36;
  uint64_t v37;
  _BYTE *v38;
  NSObject *v39;
  const char *v40;
  double v41;
  double v42;
  uint64_t v43;
  NSObject *v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  const char *v64;
  double v65;
  double v66;
  uint64_t v67;
  const char *v68;
  char *v69;
  const char *v70;
  _QWORD v71[5];
  uint64_t v72[2];
  int v73;
  uint64_t v74;
  __int16 v75;
  _BYTE *v76;
  _BYTE v77[32];
  __int16 v78;
  const char *v79;
  __int16 v80;
  uint64_t v81;
  _BYTE buf[32];
  __int16 v83;
  const char *v84;
  __int16 v85;
  uint64_t v86;

  v71[0] = _NSConcreteStackBlock;
  v71[1] = 3221225472;
  v71[2] = sub_100FB617C;
  v71[3] = &unk_10217D888;
  *(double *)&v71[4] = a1;
  v72[0] = mach_absolute_time();
  v72[1] = (uint64_t)v71;
  v5 = (_QWORD *)sub_100129380(a3 + 184);
  v6 = sub_1000DCFC0(a3 + 184);
  if (v5 == (_QWORD *)sub_1000DCFC0(a3 + 184))
  {
    v7 = 0;
  }
  else
  {
    v7 = 0;
    do
    {
      v8 = (uint64_t)v5;
      v9 = (_QWORD *)v5[1];
      v10 = v5;
      if (v9)
      {
        do
        {
          v5 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v5 = (_QWORD *)v10[2];
          v11 = *v5 == (_QWORD)v10;
          v10 = v5;
        }
        while (!v11);
      }
      v12 = *(_QWORD *)(v8 + 80);
      v13 = sub_100FA06F8(v12, a1);
      v14 = sub_100FA06EC(v12, a1);
      v15 = fabs(v13);
      v16 = v15 < *(double *)(a3 + 112) && v14 < *(double *)(a3 + 120);
      if (v16 && !sub_100FA7E88(v12))
      {
        if (v6 == sub_1000DCFC0(a3 + 184)
          || v6 != sub_1000DCFC0(a3 + 184) && v15 >= fabs(sub_100FA06F8(*(_QWORD *)(v6 + 80), a1)))
        {
          v6 = v8;
        }
      }
      else
      {
        sub_100FA2CE0(v12);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102197838);
        v17 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
        {
          v18 = sub_1001CC818(*(_DWORD *)(v12 + 48));
          v19 = sub_1001C087C(v12 + 48);
          v20 = sub_1001C0858(v12 + 48);
          v21 = sub_100FA7E88(v12);
          v22 = sub_100026CC8(a3 + 184);
          *(_DWORD *)buf = 136447235;
          v23 = "age";
          if (v21)
            v23 = "corrupt";
          *(_QWORD *)&buf[4] = v18;
          *(_WORD *)&buf[12] = 2049;
          *(double *)&buf[14] = v19;
          *(_WORD *)&buf[22] = 2049;
          *(double *)&buf[24] = v20;
          v83 = 2082;
          v84 = v23;
          v85 = 2050;
          v86 = v22 - 1;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "@TileList, %{public}s, delete, llsw, %{private}.2lf, %{private}.2lf, %{public}s, size, %{public}lu", buf, 0x34u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_102197838);
          v24 = qword_1022A0048;
          v25 = sub_1001CC818(*(_DWORD *)(v12 + 48));
          v26 = sub_1001C087C(v12 + 48);
          v27 = sub_1001C0858(v12 + 48);
          v28 = sub_100FA7E88(v12);
          v29 = sub_100026CC8(a3 + 184);
          *(_DWORD *)v77 = 136447235;
          v30 = "age";
          if (v28)
            v30 = "corrupt";
          *(_QWORD *)&v77[4] = v25;
          *(_WORD *)&v77[12] = 2049;
          *(double *)&v77[14] = v26;
          *(_WORD *)&v77[22] = 2049;
          *(double *)&v77[24] = v27;
          v78 = 2082;
          v79 = v30;
          v80 = 2050;
          v81 = v29 - 1;
          LODWORD(v70) = 52;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v24, 0, "@TileList, %{public}s, delete, llsw, %{private}.2lf, %{private}.2lf, %{public}s, size, %{public}lu", v77, v70);
          v32 = (char *)v31;
          sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::agedTileDeleter(CLTilesSet &, CFAbsoluteTime)", "%s\n", v31);
          if (v32 != buf)
            free(v32);
        }
        sub_1008B8DD8((uint64_t **)(a3 + 184), v8);
        ++v7;
      }
    }
    while (v5 != (_QWORD *)sub_1000DCFC0(a3 + 184));
  }
  v33 = v6;
  v34 = &qword_1022A0000;
  if (v33 != sub_1000DCFC0(a3 + 184) && sub_100026CC8(a3 + 184) > (unint64_t)*(unsigned int *)(a3 + 132))
  {
    v35 = *(unsigned int **)(v33 + 80);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v36 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v37 = sub_100026CC8(a3 + 184);
      (*(void (**)(_BYTE *__return_ptr, unsigned int *))(*(_QWORD *)v35 + 16))(buf, v35);
      if (buf[23] >= 0)
        v38 = buf;
      else
        v38 = *(_BYTE **)buf;
      *(_DWORD *)v77 = 134218242;
      *(_QWORD *)&v77[4] = v37;
      *(_WORD *)&v77[12] = 2080;
      *(_QWORD *)&v77[14] = v38;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "TILE: deleteAgedTiles, too many tiles, %lu, tile, %s", v77, 0x16u);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      v34 = &qword_1022A0000;
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102197858);
      v56 = qword_1022A0028;
      v57 = sub_100026CC8(a3 + 184);
      (*(void (**)(_BYTE *__return_ptr, unsigned int *))(*(_QWORD *)v35 + 16))(v77, v35);
      if (v77[23] >= 0)
        v58 = v77;
      else
        v58 = *(_BYTE **)v77;
      v73 = 134218242;
      v74 = v57;
      v75 = 2080;
      v76 = v58;
      LODWORD(v70) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v56, 2, "TILE: deleteAgedTiles, too many tiles, %lu, tile, %s", &v73, v70);
      v60 = v59;
      if ((v77[23] & 0x80000000) != 0)
        operator delete(*(void **)v77);
      sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::agedTileDeleter(CLTilesSet &, CFAbsoluteTime)", "%s\n", v60);
      v34 = &qword_1022A0000;
      if (v60 != buf)
        free(v60);
    }
    if (sub_1001C94A8((uint64_t)v35))
    {
      sub_100FA2CE0((uint64_t)v35);
      ++v7;
    }
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197838);
    v39 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      v40 = sub_1001CC818(v35[12]);
      v41 = sub_1001C087C((uint64_t)(v35 + 12));
      v42 = sub_1001C0858((uint64_t)(v35 + 12));
      v43 = sub_100026CC8(a3 + 184);
      *(_DWORD *)buf = 136446979;
      *(_QWORD *)&buf[4] = v40;
      *(_WORD *)&buf[12] = 2049;
      *(double *)&buf[14] = v41;
      *(_WORD *)&buf[22] = 2049;
      *(double *)&buf[24] = v42;
      v83 = 2050;
      v84 = (const char *)(v43 - 1);
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "@TileList, %{public}s, delete, llsw, %{private}.2lf, %{private}.2lf, limits, size, %{public}lu", buf, 0x2Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102197838);
      v61 = qword_1022A0048;
      v63 = v35[12];
      v62 = (uint64_t)(v35 + 12);
      v64 = sub_1001CC818(v63);
      v65 = sub_1001C087C(v62);
      v66 = sub_1001C0858(v62);
      v67 = sub_100026CC8(a3 + 184);
      *(_DWORD *)v77 = 136446979;
      *(_QWORD *)&v77[4] = v64;
      *(_WORD *)&v77[12] = 2049;
      *(double *)&v77[14] = v65;
      *(_WORD *)&v77[22] = 2049;
      *(double *)&v77[24] = v66;
      v78 = 2050;
      v79 = (const char *)(v67 - 1);
      LODWORD(v70) = 42;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v61, 0, "@TileList, %{public}s, delete, llsw, %{private}.2lf, %{private}.2lf, limits, size, %{public}lu", v77, v70);
      v69 = (char *)v68;
      sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::agedTileDeleter(CLTilesSet &, CFAbsoluteTime)", "%s\n", v68);
      if (v69 != buf)
        free(v69);
    }
    sub_1008B8DD8((uint64_t **)(a3 + 184), v33);
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102197838);
  v44 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v45 = sub_100026CC8(a3 + 184);
    v46 = a3 + 8;
    if (*(char *)(a3 + 31) < 0)
      v46 = *(_QWORD *)(a3 + 8);
    *(_DWORD *)buf = 67240707;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)&buf[8] = 2050;
    *(_QWORD *)&buf[10] = v45;
    *(_WORD *)&buf[18] = 2081;
    *(_QWORD *)&buf[20] = v46;
    _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "TilesManager, deleteAgedTiles, end, numOfDeletedTiles, %{public}u, remain, %{public}lu, name, %{private}s", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197838);
    v49 = qword_1022A0048;
    v50 = sub_100026CC8(a3 + 184);
    v53 = *(_QWORD *)(a3 + 8);
    v52 = a3 + 8;
    v51 = v53;
    if (*(char *)(v52 + 23) >= 0)
      v51 = v52;
    *(_DWORD *)v77 = 67240707;
    *(_DWORD *)&v77[4] = v7;
    *(_WORD *)&v77[8] = 2050;
    *(_QWORD *)&v77[10] = v50;
    *(_WORD *)&v77[18] = 2081;
    *(_QWORD *)&v77[20] = v51;
    LODWORD(v70) = 28;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v49, 0, "TilesManager, deleteAgedTiles, end, numOfDeletedTiles, %{public}u, remain, %{public}lu, name, %{private}s", v77, v70);
    v55 = (char *)v54;
    sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::agedTileDeleter(CLTilesSet &, CFAbsoluteTime)", "%s\n", v54);
    if (v55 != buf)
      free(v55);
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102197858);
  v47 = v34[5];
  if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 68289283;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 1025;
    *(_DWORD *)&buf[20] = v7;
    _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLTilesManager::agedTileDeleter\", \"deleted\":%{private}u}", buf, 0x18u);
  }
  return sub_100134E40(v72);
}

void sub_100FB6120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_100134E40((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100FB617C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6;
  NSObject *v7;
  uint64_t v8;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  double v19;
  __int16 v20;
  uint64_t v21;

  v6 = sub_100127828(a3 - a2);
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102197858);
  v7 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v8 = *(_QWORD *)(a1 + 32);
    v9[0] = 68290306;
    v9[1] = 0;
    v10 = 2082;
    v11 = "";
    v12 = 2082;
    v13 = "elapsed";
    v14 = 2050;
    v15 = a2;
    v16 = 2050;
    v17 = a3;
    v18 = 2050;
    v19 = v6;
    v20 = 2050;
    v21 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLTilesManager::agedTileDeleter\", \"event\":%{public, location:escape_only}s, \"begin_mach\":%{public}llu, \"end_mach\":%{public}llu, \"elapsed_s\":\"%{public}.09f\", \"now_s\":\"%{public}.09f\"}", (uint8_t *)v9, 0x44u);
  }
}

unint64_t sub_100FB62B0(double a1, uint64_t a2, uint64_t a3)
{
  NSObject *v5;
  uint64_t v6;
  unint64_t result;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint8_t buf[4];
  uint64_t v17;
  __int16 v18;
  uint64_t v19;

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102197858);
  v5 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(a3 + 31) >= 0)
      v6 = a3 + 8;
    else
      v6 = *(_QWORD *)(a3 + 8);
    *(_DWORD *)buf = 136315394;
    v17 = v6;
    v18 = 2048;
    v19 = sub_100026CC8(a3 + 184);
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "TILE: deleteAgedTiles, start, name, %s, size, %lu", buf, 0x16u);
  }
  result = sub_1001BFF7C(115, 2);
  if ((_DWORD)result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v8 = qword_1022A0028;
    if (*(char *)(a3 + 31) >= 0)
      v9 = a3 + 8;
    else
      v9 = *(_QWORD *)(a3 + 8);
    v12 = 136315394;
    v13 = v9;
    v14 = 2048;
    v15 = sub_100026CC8(a3 + 184);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, 2, "TILE: deleteAgedTiles, start, name, %s, size, %lu", (const char *)&v12, 22);
    v11 = (uint8_t *)v10;
    result = sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::deleteAgedTilesForTilesSet(CLTilesSet &, CFAbsoluteTime)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  do
  {
    sub_100FB5624(a1, result, a3);
    result = sub_100026CC8(a3 + 184);
  }
  while (result > *(unsigned int *)(a3 + 132));
  return result;
}

id sub_100FB64DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  _QWORD v12[7];
  int v13;
  uint64_t v14;
  uint8_t buf[4];
  uint64_t v16;

  v4 = *(_QWORD *)(a1 + 32);
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102197858);
  v5 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v6 = a2 + 8;
    if (*(char *)(a2 + 31) < 0)
      v6 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)buf = 136315138;
    v16 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "TILE: dispatch, deleteAgedTiles, for, %s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v9 = a2 + 8;
    if (*(char *)(a2 + 31) < 0)
      v9 = *(_QWORD *)(a2 + 8);
    v13 = 136315138;
    v14 = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: dispatch, deleteAgedTiles, for, %s", (const char *)&v13);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::deleteAgedTiles(CFAbsoluteTime)_block_invoke", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  v7 = *(void **)(v4 + 40);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100FB6700;
  v12[3] = &unk_102143548;
  v12[4] = v4;
  v12[5] = a2;
  v12[6] = *(_QWORD *)(a1 + 40);
  return objc_msgSend(v7, "async:", v12);
}

unint64_t sub_100FB6700(uint64_t a1)
{
  return sub_100FB62B0(*(double *)(a1 + 48), a1, *(_QWORD *)(a1 + 40));
}

void sub_100FB670C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  double v6;
  NSObject *v7;
  uint64_t v8;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  double v19;
  __int16 v20;
  uint64_t v21;

  v5 = *(_QWORD *)(a1 + 32);
  v6 = sub_100127828(a3 - a2);
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102197858);
  v7 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v8 = *(_QWORD *)(v5 + 128);
    v9[0] = 68290307;
    v9[1] = 0;
    v10 = 2082;
    v11 = "";
    v12 = 2082;
    v13 = "elapsed";
    v14 = 2050;
    v15 = a2;
    v16 = 2050;
    v17 = a3;
    v18 = 2050;
    v19 = v6;
    v20 = 2049;
    v21 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLTilesManager::cancelAllDownloads\", \"event\":%{public, location:escape_only}s, \"begin_mach\":%{public}llu, \"end_mach\":%{public}llu, \"elapsed_s\":\"%{public}.09f\", \"planned\":%{private}lu}", (uint8_t *)v9, 0x44u);
  }
}

void sub_100FB6844(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6;
  NSObject *v7;
  int v8;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  double v19;
  __int16 v20;
  int v21;

  v6 = sub_100127828(a3 - a2);
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102197858);
  v7 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v8 = *(_DWORD *)(a1 + 32);
    v9[0] = 68290307;
    v9[1] = 0;
    v10 = 2082;
    v11 = "";
    v12 = 2082;
    v13 = "elapsed";
    v14 = 2050;
    v15 = a2;
    v16 = 2050;
    v17 = a3;
    v18 = 2050;
    v19 = v6;
    v20 = 1025;
    v21 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLTilesManager::removeAllTiles\", \"event\":%{public, location:escape_only}s, \"begin_mach\":%{public}llu, \"end_mach\":%{public}llu, \"elapsed_s\":\"%{public}.09f\", \"type\":%{private}d}", (uint8_t *)v9, 0x40u);
  }
}

void sub_100FB697C()
{
  operator new();
}

void sub_100FB69C4()
{
  operator delete();
}

BOOL sub_100FB69E8(uint64_t a1, uint64_t a2, unsigned int a3, double a4)
{
  uint64_t v8;
  const char *v9;
  DIR *v10;
  NSObject *v11;
  dirent *v12;
  int v13;
  void *v14;
  size_t v15;
  std::string *p_buf;
  const void *v17;
  void **v18;
  std::string::size_type v19;
  std::string *v20;
  __int128 v21;
  const void **v22;
  NSObject *v23;
  void **v24;
  int d_type;
  void **v26;
  int v27;
  NSObject *v28;
  void **v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  NSObject *v33;
  const char *v34;
  void **v35;
  uint64_t v36;
  void **v37;
  gid_t v38;
  const char *v39;
  std::string *v40;
  void **v41;
  const char *v42;
  std::string *v43;
  uint64_t v44;
  const char *v45;
  void **v46;
  uint64_t v47;
  const char *v48;
  std::string *v49;
  NSObject *v50;
  const char *v51;
  std::string *v52;
  NSObject *v53;
  const char *v55;
  std::string *v56;
  const char *v57;
  const char *v58;
  int v59;
  unsigned int v60;
  uint64_t v61;
  void *__p;
  char v63;
  void *v64[2];
  int64_t v65;
  void *__dst[2];
  unsigned __int8 v67;
  int v68;
  void *v69;
  __int16 v70;
  void **v71;
  __int16 v72;
  double v73;
  __int16 v74;
  uint64_t v75;
  stat v76;
  std::string buf;
  _BYTE v78[24];

  v8 = sub_1001CDA64(a1, a3);
  v61 = a1;
  v60 = a3;
  sub_100FB3D18(a1, 0, a3);
  if (*(char *)(a2 + 23) >= 0)
    v9 = (const char *)a2;
  else
    v9 = *(const char **)a2;
  v10 = opendir(v9);
  if (v10)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v11 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "TILE: listAvailableFiles, start", (uint8_t *)&buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102197858);
      LOWORD(v76.st_dev) = 0;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: listAvailableFiles, start", &v76, 2);
      v56 = (std::string *)v55;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLTilesManager::listAvailableFiles(const std::string &, CLTilesManager_Type::TileType, CFAbsoluteTime)", "%s\n", v55);
      if (v56 != &buf)
        free(v56);
    }
    v12 = readdir(v10);
    if (v12)
    {
      v13 = 0;
      v59 = 136446978;
      do
      {
        v14 = objc_autoreleasePoolPush();
        sub_10035ACF4(__dst, v12->d_name, v12->d_namlen);
        if (*(char *)(a2 + 23) >= 0)
          v15 = *(unsigned __int8 *)(a2 + 23);
        else
          v15 = *(_QWORD *)(a2 + 8);
        sub_100259584((uint64_t)&buf, v15 + 1);
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_buf = &buf;
        else
          p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        if (v15)
        {
          if (*(char *)(a2 + 23) >= 0)
            v17 = (const void *)a2;
          else
            v17 = *(const void **)a2;
          memmove(p_buf, v17, v15);
        }
        *(_WORD *)((char *)&p_buf->__r_.__value_.__l.__data_ + v15) = 47;
        if ((v67 & 0x80u) == 0)
          v18 = __dst;
        else
          v18 = (void **)__dst[0];
        if ((v67 & 0x80u) == 0)
          v19 = v67;
        else
          v19 = (std::string::size_type)__dst[1];
        v20 = std::string::append(&buf, (const std::string::value_type *)v18, v19);
        v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
        v65 = v20->__r_.__value_.__r.__words[2];
        *(_OWORD *)v64 = v21;
        v20->__r_.__value_.__l.__size_ = 0;
        v20->__r_.__value_.__r.__words[2] = 0;
        v20->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
        v22 = (const void **)sub_100FA2F60();
        sub_1003625F4((const void **)v64, v22, (uint64_t)&__p);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102197858);
        v23 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
        {
          v24 = v64;
          if (v65 < 0)
            v24 = (void **)v64[0];
          d_type = v12->d_type;
          LODWORD(buf.__r_.__value_.__l.__data_) = 67109634;
          HIDWORD(buf.__r_.__value_.__r.__words[0]) = v13;
          LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v24;
          WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(buf.__r_.__value_.__r.__words[2]) = d_type;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "TILE: listAvailableFiles, found tile file, filesNum, %u, absoluteFilename, '%s', d_type, %d", (uint8_t *)&buf, 0x18u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_102197858);
          v37 = v64;
          if (v65 < 0)
            v37 = (void **)v64[0];
          v38 = v12->d_type;
          v76.st_dev = 67109634;
          *(_DWORD *)&v76.st_mode = v13;
          LOWORD(v76.st_ino) = 2080;
          *(__darwin_ino64_t *)((char *)&v76.st_ino + 2) = (__darwin_ino64_t)v37;
          HIWORD(v76.st_uid) = 1024;
          v76.st_gid = v38;
          LODWORD(v58) = 24;
          _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: listAvailableFiles, found tile file, filesNum, %u, absoluteFilename, '%s', d_type, %d", &v76, v58, v59);
          v40 = (std::string *)v39;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLTilesManager::listAvailableFiles(const std::string &, CLTilesManager_Type::TileType, CFAbsoluteTime)", "%s\n", v39);
          if (v40 != &buf)
            free(v40);
        }
        if (v12->d_type == 8 && sub_100FB8550((uint64_t)__dst, (const void **)a2))
        {
          if (v65 >= 0)
            v26 = v64;
          else
            v26 = (void **)v64[0];
          v27 = stat((const char *)v26, &v76);
          if (v27)
          {
            if (qword_1022A0040 != -1)
              dispatch_once(&qword_1022A0040, &stru_102197838);
            v28 = qword_1022A0048;
            if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
            {
              if ((v67 & 0x80u) == 0)
                v29 = __dst;
              else
                v29 = (void **)__dst[0];
              LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v29;
              WORD2(buf.__r_.__value_.__r.__words[1]) = 1026;
              *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v27;
              _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "TileMgr, listAvailableFiles, failed to stat file, %{public}s, ret, %{public}d, #CloneMe", (uint8_t *)&buf, 0x12u);
            }
            if (sub_1001BFF7C(115, 0))
            {
              bzero(&buf, 0x65CuLL);
              if (qword_1022A0040 != -1)
                dispatch_once(&qword_1022A0040, &stru_102197838);
              if ((v67 & 0x80u) == 0)
                v41 = __dst;
              else
                v41 = (void **)__dst[0];
              v68 = 136446466;
              v69 = v41;
              v70 = 1026;
              LODWORD(v71) = v27;
              LODWORD(v58) = 18;
              _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "TileMgr, listAvailableFiles, failed to stat file, %{public}s, ret, %{public}d, #CloneMe", &v68, v58);
              v43 = (std::string *)v42;
              sub_100512490("Generic", 1, 0, 0, "BOOL CLTilesManager::listAvailableFiles(const std::string &, CLTilesManager_Type::TileType, CFAbsoluteTime)", "%s\n", v42);
              if (v43 != &buf)
                free(v43);
            }
          }
          else if (sub_100FB86A0(v61, v60, (char *)a2, (std::string::value_type *)__dst, a4))
          {
            v31 = v30;
            v32 = sub_100FA06EC(v30, a4);
            if (v32 > *(double *)(v8 + 120))
            {
              if (qword_1022A0040 != -1)
                dispatch_once(&qword_1022A0040, &stru_102197838);
              v33 = qword_1022A0048;
              if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
              {
                v34 = sub_1001CC818(v60);
                v35 = v64;
                if (v65 < 0)
                  v35 = (void **)v64[0];
                v36 = *(_QWORD *)(v8 + 120);
                LODWORD(buf.__r_.__value_.__l.__data_) = v59;
                *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v34;
                WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
                *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v35;
                HIWORD(buf.__r_.__value_.__r.__words[2]) = 2050;
                *(double *)v78 = v32;
                *(_WORD *)&v78[8] = 2050;
                *(_QWORD *)&v78[10] = v36;
                _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "TILE: listAvailableFiles, %{public}s, deleting old tile %{public}s, tileDataAge, %{public}.1lf, %{public}.1lf", (uint8_t *)&buf, 0x2Au);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(&buf, 0x65CuLL);
                if (qword_1022A0040 != -1)
                  dispatch_once(&qword_1022A0040, &stru_102197838);
                v44 = qword_1022A0048;
                v45 = sub_1001CC818(v60);
                v46 = v64;
                if (v65 < 0)
                  v46 = (void **)v64[0];
                v47 = *(_QWORD *)(v8 + 120);
                v68 = v59;
                v69 = (void *)v45;
                v70 = 2082;
                v71 = v46;
                v72 = 2050;
                v73 = v32;
                v74 = 2050;
                v75 = v47;
                LODWORD(v58) = 42;
                _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v44, 0, "TILE: listAvailableFiles, %{public}s, deleting old tile %{public}s, tileDataAge, %{public}.1lf, %{public}.1lf", &v68, v58);
                v49 = (std::string *)v48;
                sub_100512490("Generic", 1, 0, 2, "BOOL CLTilesManager::listAvailableFiles(const std::string &, CLTilesManager_Type::TileType, CFAbsoluteTime)", "%s\n", v48);
                if (v49 != &buf)
                  free(v49);
              }
              sub_100FA2CE0(v31);
              buf = *(std::string *)(v31 + 48);
              if (*(char *)(v31 + 95) < 0)
              {
                sub_100115CE4(v78, *(void **)(v31 + 72), *(_QWORD *)(v31 + 80));
              }
              else
              {
                *(_OWORD *)v78 = *(_OWORD *)(v31 + 72);
                *(_QWORD *)&v78[16] = *(_QWORD *)(v31 + 88);
              }
              sub_1008B92E4((uint64_t **)(v8 + 184), (unsigned int *)&buf);
              if ((v78[23] & 0x80000000) != 0)
                operator delete(*(void **)v78);
            }
            else
            {
              sub_100FB8A7C(v61, v31, v8, (uint64_t)"index", a4);
            }
          }
        }
        if (v63 < 0)
          operator delete(__p);
        if (SHIBYTE(v65) < 0)
          operator delete(v64[0]);
        if ((char)v67 < 0)
          operator delete(__dst[0]);
        objc_autoreleasePoolPop(v14);
        v12 = readdir(v10);
        ++v13;
      }
      while (v12);
    }
    closedir(v10);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v50 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEBUG, "TILE: listAvailableFiles, end", (uint8_t *)&buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102197858);
      LOWORD(v76.st_dev) = 0;
      LODWORD(v58) = 2;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: listAvailableFiles, end", &v76, v58);
      v52 = (std::string *)v51;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLTilesManager::listAvailableFiles(const std::string &, CLTilesManager_Type::TileType, CFAbsoluteTime)", "%s\n", v51);
LABEL_115:
      if (v52 != &buf)
        free(v52);
    }
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197838);
    v53 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v9;
      _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_ERROR, "TileMgr, listAvailableFiles, can't open dir, %{public}s", (uint8_t *)&buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102197838);
      v76.st_dev = 136446210;
      *(_QWORD *)&v76.st_mode = v9;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "TileMgr, listAvailableFiles, can't open dir, %{public}s", &v76, 12);
      v52 = (std::string *)v57;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLTilesManager::listAvailableFiles(const std::string &, CLTilesManager_Type::TileType, CFAbsoluteTime)", "%s\n", v57);
      goto LABEL_115;
    }
  }
  return v10 != 0;
}

void sub_100FB75E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a27 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (a39 < 0)
    operator delete(a34);
  _Unwind_Resume(a1);
}

BOOL sub_100FB768C(id a1, const char *a2, unsigned int a3, BOOL a4)
{
  NSObject *v5;
  NSObject *v6;
  const char *v8;
  uint8_t *v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  const char *v13;
  uint8_t buf[4];
  const char *v15;

  if (a4)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v5 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "TILE: convert to class B, first unlock, %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102197858);
      v12 = 136315138;
      v13 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: convert to class B, first unlock, %s", (const char *)&v12);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLTilesManager::listAvailableFilesAllTypes(CFAbsoluteTime)_block_invoke", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    sub_100FA7570(a2);
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v6 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "TILE: convert to class C, first unlock, %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102197858);
      v12 = 136315138;
      v13 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: convert to class C, first unlock, %s", (const char *)&v12);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLTilesManager::listAvailableFilesAllTypes(CFAbsoluteTime)_block_invoke", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    sub_100FA7578(a2);
  }
  return 1;
}

uint64_t sub_100FB798C(uint64_t a1, uint64_t a2)
{
  return sub_100FB79A0(a1, (std::string::size_type)"listerSetClass", a2, *(_QWORD *)(a1 + 32));
}

uint64_t sub_100FB79A0(uint64_t a1, std::string::size_type a2, uint64_t a3, uint64_t a4)
{
  NSObject *v6;
  std::string::size_type v7;
  uint64_t v8;
  const char *v9;
  DIR *v10;
  NSObject *v11;
  dirent *v12;
  uint64_t v13;
  char v14;
  size_t v15;
  std::string *p_buf;
  const void *v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  std::string *v20;
  __int128 v21;
  NSObject *v22;
  void **v23;
  int d_type;
  void **v25;
  void **v26;
  int v27;
  const char *v28;
  std::string *v29;
  NSObject *v30;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  std::string *v35;
  const char *v36;
  std::string *v37;
  const char *v38;
  std::string *v39;
  const char *v40;
  const char *v41;
  void *__p[2];
  int64_t v44;
  _DWORD v45[2];
  __int16 v46;
  void **v47;
  __int16 v48;
  int v49;
  _BYTE __dst[22];
  __int16 v51;
  uint64_t v52;
  std::string buf;
  uint64_t v54;

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102197858);
  v6 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v7 = *(_QWORD *)(a3 + 32);
    if (*(char *)(a3 + 55) >= 0)
      v7 = a3 + 32;
    v8 = a3 + 8;
    if (*(char *)(a3 + 31) < 0)
      v8 = *(_QWORD *)(a3 + 8);
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = a2;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v7;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
    v54 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "TILE: listAvailableFilesByLister, reason, %s, rootDirectory, %s, name, %s", (uint8_t *)&buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v32 = *(_QWORD *)(a3 + 32);
    if (*(char *)(a3 + 55) >= 0)
      v32 = a3 + 32;
    v33 = a3 + 8;
    if (*(char *)(a3 + 31) < 0)
      v33 = *(_QWORD *)(a3 + 8);
    *(_DWORD *)__dst = 136315650;
    *(_QWORD *)&__dst[4] = a2;
    *(_WORD *)&__dst[12] = 2080;
    *(_QWORD *)&__dst[14] = v32;
    v51 = 2080;
    v52 = v33;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: listAvailableFilesByLister, reason, %s, rootDirectory, %s, name, %s", __dst, 32, v41);
    v35 = (std::string *)v34;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLTilesManager::listAvailableFilesByLister(const char *, CLTilesSet &, CLTileManagerFilesListerBlock)", "%s\n", v34);
    if (v35 != &buf)
      free(v35);
  }
  if (*(char *)(a3 + 55) >= 0)
    v9 = (const char *)(a3 + 32);
  else
    v9 = *(const char **)(a3 + 32);
  v10 = opendir(v9);
  if (v10)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v11 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "TILE: listAvailableFilesByLister, start", (uint8_t *)&buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102197858);
      *(_WORD *)__dst = 0;
      LODWORD(v40) = 2;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: listAvailableFilesByLister, start", __dst, v40);
      v37 = (std::string *)v36;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLTilesManager::listAvailableFilesByLister(const char *, CLTilesSet &, CLTileManagerFilesListerBlock)", "%s\n", v36);
      if (v37 != &buf)
        free(v37);
    }
    v12 = readdir(v10);
    if (v12)
    {
      LODWORD(v13) = 0;
      v14 = 1;
      do
      {
        sub_10035ACF4(__dst, v12->d_name, v12->d_namlen);
        if (*(char *)(a3 + 55) >= 0)
          v15 = *(unsigned __int8 *)(a3 + 55);
        else
          v15 = *(_QWORD *)(a3 + 40);
        sub_100259584((uint64_t)&buf, v15 + 1);
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_buf = &buf;
        else
          p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        if (v15)
        {
          if (*(char *)(a3 + 55) >= 0)
            v17 = (const void *)(a3 + 32);
          else
            v17 = *(const void **)(a3 + 32);
          memmove(p_buf, v17, v15);
        }
        *(_WORD *)((char *)&p_buf->__r_.__value_.__l.__data_ + v15) = 47;
        if (v51 >= 0)
          v18 = __dst;
        else
          v18 = *(const std::string::value_type **)__dst;
        if (v51 >= 0)
          v19 = HIBYTE(v51);
        else
          v19 = *(_QWORD *)&__dst[8];
        v20 = std::string::append(&buf, v18, v19);
        v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
        v44 = v20->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v21;
        v20->__r_.__value_.__l.__size_ = 0;
        v20->__r_.__value_.__r.__words[2] = 0;
        v20->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102197858);
        v22 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
        {
          v23 = __p;
          if (v44 < 0)
            v23 = (void **)__p[0];
          d_type = v12->d_type;
          LODWORD(buf.__r_.__value_.__l.__data_) = 67109634;
          HIDWORD(buf.__r_.__value_.__r.__words[0]) = v13;
          LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v23;
          WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(buf.__r_.__value_.__r.__words[2]) = d_type;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "TILE: listAvailableFilesByLister, found tile file, filesNum, %u, absoluteFilename, '%s', d_type, %d", (uint8_t *)&buf, 0x18u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_102197858);
          v26 = __p;
          if (v44 < 0)
            v26 = (void **)__p[0];
          v27 = v12->d_type;
          v45[0] = 67109634;
          v45[1] = v13;
          v46 = 2080;
          v47 = v26;
          v48 = 1024;
          v49 = v27;
          LODWORD(v40) = 24;
          _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: listAvailableFilesByLister, found tile file, filesNum, %u, absoluteFilename, '%s', d_type, %d", v45, v40, (_DWORD)v41);
          v29 = (std::string *)v28;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLTilesManager::listAvailableFilesByLister(const char *, CLTilesSet &, CLTileManagerFilesListerBlock)", "%s\n", v28);
          if (v29 != &buf)
            free(v29);
        }
        if (v12->d_type == 8)
        {
          v13 = (v13 + 1);
          if (sub_100FB8550((uint64_t)__dst, (const void **)(a3 + 32)))
          {
            if (v44 >= 0)
              v25 = __p;
            else
              v25 = (void **)__p[0];
            v14 = (*(uint64_t (**)(uint64_t, void **, uint64_t, _QWORD))(a4 + 16))(a4, v25, v13, *(unsigned __int8 *)(a3 + 178));
          }
        }
        if (SHIBYTE(v44) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v51) < 0)
          operator delete(*(void **)__dst);
        v12 = readdir(v10);
      }
      while (v12);
    }
    else
    {
      v14 = 1;
    }
    closedir(v10);
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197838);
    v30 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = a2;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v9;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "TileMgr, listAvailableFilesByLister, reason, %{public}s, can't open dir, %{public}s, #CloneMe", (uint8_t *)&buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102197838);
      *(_DWORD *)__dst = 136446466;
      *(_QWORD *)&__dst[4] = a2;
      *(_WORD *)&__dst[12] = 2082;
      *(_QWORD *)&__dst[14] = v9;
      LODWORD(v40) = 22;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "TileMgr, listAvailableFilesByLister, reason, %{public}s, can't open dir, %{public}s, #CloneMe", __dst, v40);
      v39 = (std::string *)v38;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLTilesManager::listAvailableFilesByLister(const char *, CLTilesSet &, CLTileManagerFilesListerBlock)", "%s\n", v38);
      if (v39 != &buf)
        free(v39);
    }
    v14 = 0;
  }
  return v14 & 1;
}

void sub_100FB81B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a20 < 0)
    operator delete(__p);
  if (a31 < 0)
    operator delete(a26);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100FB8204(uint64_t *result)
{
  uint64_t v1;
  uint64_t *v2;
  _QWORD v3[6];

  v1 = result[4];
  if (!*(_BYTE *)(v1 + 201))
  {
    v2 = result;
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100FB8294;
    v3[3] = &unk_102154608;
    v3[4] = v1;
    v3[5] = result[5];
    sub_1001CD7EC(v1, (uint64_t)"listAvailableFilesAllTypes", (uint64_t)v3);
    *(_BYTE *)(v1 + 201) = 1;
    return sub_100FB3524(v1, *((double *)v2 + 5));
  }
  return result;
}

void sub_100FB8294(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  const char *v10;
  __int16 v11;
  uint64_t v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  uint64_t v16;

  sub_100FB69E8(*(_QWORD *)(a1 + 32), a2 + 32, *(_DWORD *)(a2 + 4), *(double *)(a1 + 40));
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102197838);
  v3 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
  {
    v4 = sub_1001CC818(*(_DWORD *)(a2 + 4));
    *(_DWORD *)buf = 136446466;
    v14 = v4;
    v15 = 2050;
    v16 = sub_100026CC8(a2 + 184);
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "@TileEvent, %{public}s, indexed, %{public}lu", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197838);
    v5 = qword_1022A0048;
    v6 = sub_1001CC818(*(_DWORD *)(a2 + 4));
    v9 = 136446466;
    v10 = v6;
    v11 = 2050;
    v12 = sub_100026CC8(a2 + 184);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v5, 1, "@TileEvent, %{public}s, indexed, %{public}lu", &v9, 22);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLTilesManager::listAvailableFilesAllTypes(CFAbsoluteTime)_block_invoke", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
}

uint64_t sub_100FB8498@<X0>(char *__s@<X1>, const void **a2@<X0>, void **a3@<X8>)
{
  size_t v6;
  size_t v7;
  uint64_t result;
  const void *v9;
  char *v10;

  if (*((char *)a2 + 23) >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  v7 = strlen(__s);
  result = sub_100259584((uint64_t)a3, v6 + v7);
  if (*((char *)a3 + 23) < 0)
    a3 = (void **)*a3;
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0)
      v9 = a2;
    else
      v9 = *a2;
    result = (uint64_t)memmove(a3, v9, v6);
  }
  v10 = (char *)a3 + v6;
  if (v7)
    result = (uint64_t)memmove(v10, __s, v7);
  v10[v7] = 0;
  return result;
}

BOOL sub_100FB8550(uint64_t a1, const void **a2)
{
  unsigned __int16 v4;
  size_t v6;
  std::string *v7;
  const void *v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  void **v14;
  std::string v15;
  void *__p[2];
  int64_t v17;

  v4 = sub_100FBF820(a1);
  if (v4 < 0x100u)
    return v4 != 0;
  if (*((char *)a2 + 23) >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  v7 = &v15;
  sub_100259584((uint64_t)&v15, v6 + 1);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v7 = (std::string *)v15.__r_.__value_.__r.__words[0];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = *a2;
    memmove(v7, v8, v6);
  }
  *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 47;
  v9 = *(char *)(a1 + 23);
  if (v9 >= 0)
    v10 = (const std::string::value_type *)a1;
  else
    v10 = *(const std::string::value_type **)a1;
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a1 + 23);
  else
    v11 = *(_QWORD *)(a1 + 8);
  v12 = std::string::append(&v15, v10, v11);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v17 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (v17 >= 0)
    v14 = __p;
  else
    v14 = (void **)__p[0];
  sub_1005164F0((const char *)v14);
  if (SHIBYTE(v17) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_100FB8670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100FB86A0(uint64_t a1, unsigned int a2, char *a3, std::string::value_type *a4, double a5)
{
  std::string::value_type *v5;
  char *v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v10;
  char *v11;
  std::string::value_type *v12;
  NSObject *v13;
  const char *v14;
  char *v15;
  std::string::value_type *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v24;
  const char *v25;
  char *v26;
  std::string::value_type *v27;
  const char *v28;
  char *v29;
  uint64_t *v30;
  int v31;
  const char *v32;
  __int16 v33;
  char *v34;
  __int16 v35;
  std::string::value_type *v36;
  _BYTE buf[24];
  __int128 __p;
  uint64_t v39;

  if ((a2 & 0xFFFFFFF7) - 1 >= 2)
  {
    sub_101938068();
    __break(1u);
LABEL_34:
    dispatch_once(&qword_1022A0040, &stru_102197838);
    goto LABEL_12;
  }
  v5 = a4;
  v6 = a3;
  v7 = a2;
  v10 = sub_1001CDA64(a1, a2);
  sub_101191978(v7, &v30);
  if (v6[23] >= 0)
    v11 = v6;
  else
    v11 = *(char **)v6;
  if (v5[23] >= 0)
    v12 = v5;
  else
    v12 = *(std::string::value_type **)v5;
  if ((sub_100FA5198(v30, v11, v12, v7, 1, a5) & 1) != 0)
  {
    *(_OWORD *)buf = *((_OWORD *)v30 + 3);
    *(_QWORD *)&buf[16] = v30[8];
    if (*((char *)v30 + 95) < 0)
    {
      sub_100115CE4(&__p, (void *)v30[9], v30[10]);
    }
    else
    {
      __p = *(_OWORD *)(v30 + 9);
      v39 = v30[11];
    }
    v18 = sub_1008B985C((uint64_t **)(v10 + 184), (unsigned int *)buf);
    v19 = v30;
    v30 = 0;
    v20 = *v18;
    *v18 = (uint64_t)v19;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    v21 = *(_QWORD *)(v10 + 304);
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 32))(v21);
    sub_1001C85FC(v10 + 184, (unsigned int *)buf);
    if (SHIBYTE(v39) < 0)
      operator delete((void *)__p);
    v17 = 1;
    goto LABEL_30;
  }
  v8 = &qword_1022A0000;
  if (qword_1022A0040 != -1)
    goto LABEL_34;
LABEL_12:
  v13 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v14 = sub_1001CC818(v7);
    if (v6[23] >= 0)
      v15 = v6;
    else
      v15 = *(char **)v6;
    if (v5[23] >= 0)
      v16 = v5;
    else
      v16 = *(std::string::value_type **)v5;
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = v14;
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v15;
    *(_WORD *)&buf[22] = 2082;
    *(_QWORD *)&__p = v16;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "@TileList, %{public}s, readerror, dir, %{public}s, file, %{public}s, #CloneMe", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v8[8] != -1)
      dispatch_once(&qword_1022A0040, &stru_102197838);
    v24 = qword_1022A0048;
    v25 = sub_1001CC818(v7);
    if (v6[23] >= 0)
      v26 = v6;
    else
      v26 = *(char **)v6;
    if (v5[23] >= 0)
      v27 = v5;
    else
      v27 = *(std::string::value_type **)v5;
    v31 = 136446722;
    v32 = v25;
    v33 = 2082;
    v34 = v26;
    v35 = 2082;
    v36 = v27;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v24, 0, "@TileList, %{public}s, readerror, dir, %{public}s, file, %{public}s, #CloneMe", &v31, 32);
    v29 = (char *)v28;
    sub_100512490("Generic", 1, 0, 2, "std::tuple<BOOL, CLTileFile *> CLTilesManager::createTileFileObject(CLTilesManager_Type::TileType, const std::string &, const std::string &, CFAbsoluteTime)", "%s\n", v28);
    if (v29 != buf)
      free(v29);
  }
  v17 = 0;
LABEL_30:
  v22 = v30;
  v30 = 0;
  if (v22)
    (*(void (**)(uint64_t *))(*v22 + 8))(v22);
  return v17;
}

void sub_100FB8A24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

void sub_100FB8A7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  double v10;
  double v11;
  _BOOL4 v12;
  _BOOL4 v13;
  int v14;
  NSObject *v15;
  _BYTE *v16;
  uint64_t v17;
  _BYTE *v18;
  char *v19;
  char *v20;
  char v22;
  uint64_t v23;
  NSObject *v24;
  int v25;
  _BYTE *v26;
  uint64_t v27;
  _BYTE *v28;
  NSObject *v29;
  int v30;
  _BYTE *v31;
  uint64_t v32;
  _BYTE *v33;
  unsigned int *v34;
  NSObject *v35;
  const char *v36;
  double v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  double v42;
  double v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  int v47;
  _BYTE *v48;
  uint64_t v49;
  _BYTE *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  int v54;
  _BYTE *v55;
  uint64_t v56;
  _BYTE *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  _BYTE buf[12];
  __int16 v66;
  double v67;
  __int16 v68;
  double v69;
  __int16 v70;
  uint64_t v71;
  __int16 v72;
  uint64_t v73;
  int v74;
  _BYTE *v75;
  __int16 v76;
  uint64_t v77;
  _BYTE __p[12];
  __int16 v79;
  double v80;
  __int16 v81;
  double v82;
  __int16 v83;
  uint64_t v84;
  __int16 v85;
  uint64_t v86;

  v61 = *(_OWORD *)(a2 + 48);
  v62 = *(_QWORD *)(a2 + 64);
  if (*(char *)(a2 + 95) < 0)
  {
    sub_100115CE4(&v63, *(void **)(a2 + 72), *(_QWORD *)(a2 + 80));
  }
  else
  {
    v63 = *(_OWORD *)(a2 + 72);
    v64 = *(_QWORD *)(a2 + 88);
  }
  v10 = *(double *)(a1 + 324);
  v11 = *(double *)(a3 + 136);
  v12 = sub_100FA7580((double *)a2, a1 + 248, 30000.0);
  if (!*(_BYTE *)(a3 + 178))
  {
    v14 = sub_100FA4BB8(a2);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v15 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(__p, a2);
      v16 = v81 >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v16;
      v66 = 1024;
      LODWORD(v67) = v14;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "TILE: tileDecompressionCompleted, unlocked tile type, tileid, %s, unlocked, %d", buf, 0x12u);
      if (SHIBYTE(v81) < 0)
        operator delete(*(void **)__p);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_58;
    bzero(__p, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v17 = qword_1022A0028;
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(buf, a2);
    if (v68 >= 0)
      v18 = buf;
    else
      v18 = *(_BYTE **)buf;
    v74 = 136315394;
    v75 = v18;
    v76 = 1024;
    LODWORD(v77) = v14;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v17, 2, "TILE: tileDecompressionCompleted, unlocked tile type, tileid, %s, unlocked, %d", (const char *)&v74, 18);
    v20 = v19;
    if (SHIBYTE(v68) < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::lockTileIfNeeded(CLTileFile *, CLTilesSet &, CFAbsoluteTime, const char *)", "%s\n", v20);
    if (v20 == __p)
      goto LABEL_58;
LABEL_25:
    free(v20);
    goto LABEL_58;
  }
  if (!*(_BYTE *)(a1 + 200))
    goto LABEL_56;
  if (*(_BYTE *)(a1 + 440))
  {
    v13 = 1;
LABEL_57:
    sub_100FA72C0(a2, v13);
    goto LABEL_58;
  }
  if (fabs(a5 - v10 + 60.0) >= v11 || !v12)
  {
LABEL_56:
    v13 = *(unsigned __int8 *)(a1 + 200) != 0;
    goto LABEL_57;
  }
  v22 = sub_100FA4BB8(a2);
  v23 = a3 + 184;
  sub_1008B9548(v23, (unsigned int *)&v61);
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102197858);
  v24 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(__p, a2);
    v25 = SHIBYTE(v81);
    v26 = *(_BYTE **)__p;
    v27 = sub_1008B97D0(v23);
    v28 = __p;
    if (v25 < 0)
      v28 = v26;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v28;
    v66 = 2048;
    v67 = *(double *)&v27;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "TILE: tileDecompressionCompleted, added to unprotected list, tileid, %s, size, %lu", buf, 0x16u);
    if (SHIBYTE(v81) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v46 = qword_1022A0028;
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(buf, a2);
    v47 = SHIBYTE(v68);
    v48 = *(_BYTE **)buf;
    v49 = sub_1008B97D0(v23);
    v50 = buf;
    if (v47 < 0)
      v50 = v48;
    v74 = 136315394;
    v75 = v50;
    v76 = 2048;
    v77 = v49;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v46, 2, "TILE: tileDecompressionCompleted, added to unprotected list, tileid, %s, size, %lu", (const char *)&v74, 22);
    v52 = v51;
    if (SHIBYTE(v68) < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::lockTileIfNeeded(CLTileFile *, CLTilesSet &, CFAbsoluteTime, const char *)", "%s\n", v52);
    if (v52 != __p)
      free(v52);
  }
  if ((v22 & 1) == 0)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v29 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(__p, a2);
      v30 = SHIBYTE(v81);
      v31 = *(_BYTE **)__p;
      v32 = sub_1008B97D0(v23);
      v33 = __p;
      if (v30 < 0)
        v33 = v31;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v33;
      v66 = 2048;
      v67 = *(double *)&v32;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "TILE: tileDecompressionCompleted, unable to unlock, tileid, %s, size, %lu", buf, 0x16u);
      if (SHIBYTE(v81) < 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102197858);
      v53 = qword_1022A0028;
      (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(buf, a2);
      v54 = SHIBYTE(v68);
      v55 = *(_BYTE **)buf;
      v56 = sub_1008B97D0(v23);
      v57 = buf;
      if (v54 < 0)
        v57 = v55;
      v74 = 136315394;
      v75 = v57;
      v76 = 2048;
      v77 = v56;
      LODWORD(v60) = 22;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v53, 2, "TILE: tileDecompressionCompleted, unable to unlock, tileid, %s, size, %lu", (const char *)&v74, v60);
      v59 = v58;
      if (SHIBYTE(v68) < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::lockTileIfNeeded(CLTileFile *, CLTilesSet &, CFAbsoluteTime, const char *)", "%s\n", v59);
      if (v59 != __p)
        free(v59);
    }
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102197838);
  v34 = (unsigned int *)(a2 + 48);
  v35 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v36 = sub_1001CC818(*v34);
    v37 = sub_1001C087C((uint64_t)&v61);
    v38 = sub_1001C0858((uint64_t)&v61);
    v39 = sub_100026CC8(v23);
    *(_DWORD *)__p = 136447235;
    *(_QWORD *)&__p[4] = v36;
    v79 = 2049;
    v80 = v37;
    v81 = 2049;
    v82 = v38;
    v83 = 2082;
    v84 = a4;
    v85 = 2050;
    v86 = v39;
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "@TileList, %{public}s, add, llsw, %{private}.2lf, %{private}.2lf, %{public}s, size, %{public}lu, ", __p, 0x34u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197838);
    v40 = qword_1022A0048;
    v41 = sub_1001CC818(*v34);
    v42 = sub_1001C087C((uint64_t)&v61);
    v43 = sub_1001C0858((uint64_t)&v61);
    v44 = sub_100026CC8(v23);
    *(_DWORD *)buf = 136447235;
    *(_QWORD *)&buf[4] = v41;
    v66 = 2049;
    v67 = v42;
    v68 = 2049;
    v69 = v43;
    v70 = 2082;
    v71 = a4;
    v72 = 2050;
    v73 = v44;
    LODWORD(v60) = 52;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v40, 0, "@TileList, %{public}s, add, llsw, %{private}.2lf, %{private}.2lf, %{public}s, size, %{public}lu, ", buf, v60, v61, v62);
    v20 = (char *)v45;
    sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::lockTileIfNeeded(CLTileFile *, CLTilesSet &, CFAbsoluteTime, const char *)", "%s\n", v45);
    if (v20 != __p)
      goto LABEL_25;
  }
LABEL_58:
  if (SHIBYTE(v64) < 0)
    operator delete((void *)v63);
}

void sub_100FB9388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_100FB9410(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  _QWORD v5[6];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 40);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100FB9468;
  v5[3] = &unk_102143528;
  v5[4] = v2;
  v5[5] = a2;
  return objc_msgSend(v3, "async:", v5);
}

void sub_100FB9468(uint64_t a1)
{
  uint64_t v2;
  double v3;
  int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BOOL4 v10;
  _BOOL4 v11;
  _QWORD *v12;
  NSObject *v13;
  void **v14;
  CFAbsoluteTime Current;
  void **v17;
  uint64_t v18;
  void **v19;
  _QWORD *v20;
  _QWORD *v21;
  BOOL v22;
  uint64_t v23;
  void **v24;
  char *v25;
  char *v26;
  void *v27;
  const char *v28;
  char v29;
  uint64_t v30;
  _QWORD v31[6];
  uint64_t v32;
  void *__p[2];
  char v34;
  __int128 buf;
  void **v36;
  CFAbsoluteTime v37;
  __int16 v38;
  void **v39;
  __int16 v40;
  _BOOL4 v41;
  __int16 v42;
  void **v43;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (*(double (**)(_QWORD))(**(_QWORD **)(v2 + 464) + 56))(*(_QWORD *)(v2 + 464));
  v30 = v2;
  v4 = *(int *)(v2 + 424) > 1 || *(_BYTE *)(v2 + 496) != 0;
  v5 = *(_QWORD *)(a1 + 40) + 184;
  v6 = (_QWORD *)sub_100129380(v5);
  v7 = sub_1000DCFC0(v5);
  if (v6 != (_QWORD *)v7)
  {
    v8 = (_QWORD *)v7;
    v29 = 0;
    do
    {
      v9 = v6[10];
      v10 = sub_100FA0798(v9, v4, v3, *(float *)(*(_QWORD *)(a1 + 40) + 128));
      v11 = sub_100077820(v9, v4, *(float *)(*(_QWORD *)(a1 + 40) + 128), v3);
      v12 = sub_1001C8840(v30 + 112, v9 + 48);
      if (sub_1001C94A8(v9))
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102197858);
        v13 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
        {
          (*(void (**)(void ***__return_ptr, uint64_t))(*(_QWORD *)v9 + 16))(&v39, v9);
          v14 = (void **)&v39;
          if (SHIBYTE(v43) < 0)
            v14 = v39;
          LODWORD(buf) = 67109634;
          DWORD1(buf) = v10;
          WORD4(buf) = 1024;
          *(_DWORD *)((char *)&buf + 10) = v11;
          HIWORD(buf) = 2080;
          v36 = v14;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "TILE: refreshTilesDataIfNeeded, isTileDataExpired, %d, isShouldBeDownloaded, %d, tile, %s", (uint8_t *)&buf, 0x18u);
          if (SHIBYTE(v43) < 0)
            operator delete(v39);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_102197858);
          v23 = qword_1022A0028;
          (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v9 + 16))(__p, v9);
          v24 = __p;
          if (v34 < 0)
            v24 = (void **)__p[0];
          LODWORD(v39) = 67109634;
          HIDWORD(v39) = v10;
          v40 = 1024;
          v41 = v11;
          v42 = 2080;
          v43 = v24;
          _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v23, 2, "TILE: refreshTilesDataIfNeeded, isTileDataExpired, %d, isShouldBeDownloaded, %d, tile, %s", &v39, 24, v28);
          v26 = v25;
          if (v34 < 0)
            operator delete(__p[0]);
          sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::refreshTilesDataIfNeeded()_block_invoke", "%s\n", v26);
          if (v26 != (char *)&buf)
            free(v26);
        }
        if ((_QWORD *)(v30 + 120) == v12 && v10)
        {
          sub_101191978(*(_DWORD *)(*(_QWORD *)(a1 + 40) + 4), &v39);
          Current = CFAbsoluteTimeGetCurrent();
          LOWORD(buf) = 0;
          BYTE2(buf) = 0;
          *((_QWORD *)&buf + 1) = 0xBFF0000000000000;
          v37 = Current;
          v38 = 1;
          LODWORD(v36) = 0;
          sub_100FA0AB0((uint64_t)v39, v9);
          v17 = v39;
          v39 = 0;
          v32 = (uint64_t)v17;
          sub_100FB9938(v30, &v32, v9 + 48, &buf);
          v18 = v32;
          v32 = 0;
          if (v18)
            (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
          v19 = v39;
          v39 = 0;
          if (v19)
            (*((void (**)(void **))*v19 + 1))(v19);
          v29 = 1;
        }
      }
      v20 = (_QWORD *)v6[1];
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = (_QWORD *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (_QWORD *)v6[2];
          v22 = *v21 == (_QWORD)v6;
          v6 = v21;
        }
        while (!v22);
      }
      v6 = v21;
    }
    while (v21 != v8);
    if ((v29 & 1) != 0)
    {
      v27 = *(void **)(v30 + 40);
      v31[0] = _NSConcreteStackBlock;
      v31[1] = 3221225472;
      v31[2] = sub_100FB9CD8;
      v31[3] = &unk_102143528;
      v31[4] = v30;
      *(double *)&v31[5] = v3;
      objc_msgSend(v27, "async:", v31);
    }
  }
}

void sub_100FB98F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;
  uint64_t v27;

  if (a25)
    (*(void (**)(uint64_t))(*(_QWORD *)a25 + 8))(a25);
  v27 = *(_QWORD *)(v25 - 144);
  *(_QWORD *)(v25 - 144) = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100FB9938(uint64_t a1, uint64_t *a2, uint64_t a3, __int128 *a4)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t **v10;
  NSObject *v11;
  void **v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  std::string v24;
  __int128 v25;
  uint64_t v26;
  _BYTE buf[12];
  __int16 v28;
  uint64_t v29;
  char v30;
  int v31;
  _BYTE *v32;
  __int16 v33;
  uint64_t v34;
  void *__p[2];
  char v36;

  v24 = *(std::string *)a3;
  if (*(char *)(a3 + 47) < 0)
  {
    sub_100115CE4(&v25, *(void **)(a3 + 24), *(_QWORD *)(a3 + 32));
  }
  else
  {
    v25 = *(_OWORD *)(a3 + 24);
    v26 = *(_QWORD *)(a3 + 40);
  }
  sub_100FBCB08(*a2, &v24);
  v7 = *a2;
  v8 = *a4;
  v9 = a4[1];
  *(_WORD *)(v7 + 144) = *((_WORD *)a4 + 16);
  *(_OWORD *)(v7 + 112) = v8;
  *(_OWORD *)(v7 + 128) = v9;
  sub_100FA21A0(*a2, (uint64_t)&unk_102309420);
  v10 = (uint64_t **)(a1 + 112);
  if ((_QWORD *)(a1 + 120) != sub_1001C8840(a1 + 112, (uint64_t)&v24))
  {
    sub_1019381D0(qword_1022A0020 == -1);
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/CLTilesManager.mm", 2161, "addToDownloadList");
    __break(1u);
    goto LABEL_19;
  }
  if (qword_1022A0020 != -1)
LABEL_19:
    dispatch_once(&qword_1022A0020, &stru_102197858);
  v11 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)*a2 + 16))(__p);
    v12 = v36 >= 0 ? __p : (void **)__p[0];
    v13 = *(_QWORD *)(a1 + 128);
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v12;
    v28 = 2048;
    v29 = v13;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "TILE: addToDownloadList, added, %s, fTilesToDownload.size, %lu", buf, 0x16u);
    if (v36 < 0)
      operator delete(__p[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v18 = qword_1022A0028;
    (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)*a2 + 16))(buf);
    if (v30 >= 0)
      v19 = buf;
    else
      v19 = *(_BYTE **)buf;
    v20 = *(_QWORD *)(a1 + 128);
    v31 = 136315394;
    v32 = v19;
    v33 = 2048;
    v34 = v20;
    LODWORD(v23) = 22;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v18, 2, "TILE: addToDownloadList, added, %s, fTilesToDownload.size, %lu", (const char *)&v31, v23);
    v22 = v21;
    if (v30 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLTilesManager::addToDownloadList(std::unique_ptr<CLTileFile>, const TileId &, const CLTileFileDownloadDetails &)", "%s\n", v22);
    if (v22 != (char *)__p)
      free(v22);
  }
  __p[0] = &v24;
  v14 = sub_1008B9D6C(v10, (uint64_t)&v24, (uint64_t)&unk_101B9EB60, (_OWORD **)__p);
  v15 = *a2;
  *a2 = 0;
  v16 = v14[10];
  v14[10] = v15;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (SHIBYTE(v26) < 0)
    operator delete((void *)v25);
  return 1;
}

void sub_100FB9CA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100FB9CD8(uint64_t a1)
{
  sub_100168EA8(*(_QWORD *)(a1 + 32), *(double *)(a1 + 40));
}

uint64_t sub_100FB9CE8(_DWORD *a1, int a2)
{
  (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 16))(a1);
  a1[12] += a2;
  return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 24))(a1);
}

_QWORD *sub_100FB9D34(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;

  v2 = *(_QWORD **)(a1 + 112);
  v3 = (_QWORD *)(a1 + 120);
  if (v2 != (_QWORD *)(a1 + 120))
  {
    while (sub_1000753C8(v2[10]) != a2)
    {
      v5 = (_QWORD *)v2[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v2[2];
          v7 = *v6 == (_QWORD)v2;
          v2 = v6;
        }
        while (!v7);
      }
      v2 = v6;
      if (v6 == v3)
        return v3;
    }
  }
  return v2;
}

id *sub_100FB9DB8(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v6;
  unsigned int *v7;
  uint64_t v8;
  double v9;
  double v10;
  uint64_t v11;
  NSObject *v12;
  const char *v13;
  char *v14;
  NSObject *v15;
  int v16;
  _BYTE *v17;
  uint64_t v18;
  int v19;
  _BYTE *v20;
  int v21;
  NSObject *v22;
  const char *v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  int v31;
  void **v32;
  uint64_t v33;
  int v34;
  void **v35;
  int v36;
  char *v37;
  char *v38;
  uint64_t v39;
  const char *v40;
  double v41;
  double v42;
  uint64_t v43;
  const char *v44;
  char *v45;
  uint64_t v46;
  int v47;
  void *v48;
  int v49;
  int v50;
  char v51;
  id v52[2];
  _BYTE __p[12];
  __int16 v54;
  _BYTE v55[10];
  double v56;
  _BYTE v57[6];
  _BYTE v58[6];
  int v59;
  _BYTE buf[12];
  __int16 v61;
  _BYTE v62[10];
  double v63;
  _BYTE v64[6];
  _BYTE v65[6];
  int v66;

  sub_100131938(v52, (uint64_t)"tileDownloaded", 0);
  v6 = sub_100FB9D34(a1, a2);
  if ((_QWORD *)(a1 + 120) == v6 || (v7 = (unsigned int *)v6[10]) == 0)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197838);
    v12 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "TileMgr, where did this download request come from?, download, %{public}p, #CloneMe", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102197838);
      *(_DWORD *)__p = 134349056;
      *(_QWORD *)&__p[4] = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "TileMgr, where did this download request come from?, download, %{public}p, #CloneMe", __p, 12);
      v14 = (char *)v13;
      sub_100512490("Generic", 1, 0, 0, "void CLTilesManager::tileDownloadCompleted(CLFileDownload *, BOOL, void *)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
  else
  {
    v8 = *(_QWORD *)(sub_1000753C8(v6[10]) + 96);
    v9 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 464) + 56))(*(_QWORD *)(a1 + 464));
    v10 = v9;
    v11 = a1 + 472;
    if ((a3 & 1) != 0 || v8 == -1100)
      sub_100F5A36C(v11);
    else
      sub_100F5A398(v11, v9);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v15 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      (*(void (**)(_BYTE *__return_ptr, unsigned int *))(*(_QWORD *)v7 + 16))(__p, v7);
      v16 = v55[9];
      v17 = *(_BYTE **)__p;
      v18 = *(_QWORD *)(sub_1000753C8((uint64_t)v7) + 96);
      v19 = *(_DWORD *)(a1 + 424);
      v20 = __p;
      if (v16 < 0)
        v20 = v17;
      v21 = *(unsigned __int8 *)(a1 + 200);
      *(_DWORD *)buf = 136316674;
      *(_QWORD *)&buf[4] = v20;
      v61 = 1024;
      *(_DWORD *)v62 = a3;
      *(_WORD *)&v62[4] = 1024;
      *(_DWORD *)&v62[6] = v18;
      LOWORD(v63) = 1024;
      *(_DWORD *)((char *)&v63 + 2) = v8 == -1100;
      HIWORD(v63) = 1024;
      *(_DWORD *)v64 = v19;
      *(_WORD *)&v64[4] = 1024;
      *(_DWORD *)v65 = v21;
      *(_WORD *)&v65[4] = 1024;
      v66 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "TILE: tileDownloadCompleted, tile, %s, download done, success, %d, NSURLErrorCode, %d, tileDoesNotExist, %d, reachability, %d, locked, %d, fileSize, %d", buf, 0x30u);
      if ((v55[9] & 0x80000000) != 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102197858);
      v30 = qword_1022A0028;
      (*(void (**)(void **__return_ptr, unsigned int *))(*(_QWORD *)v7 + 16))(&v48, v7);
      v31 = v51;
      v32 = (void **)v48;
      v33 = *(_QWORD *)(sub_1000753C8((uint64_t)v7) + 96);
      v34 = *(_DWORD *)(a1 + 424);
      v35 = &v48;
      if (v31 < 0)
        v35 = v32;
      v36 = *(unsigned __int8 *)(a1 + 200);
      *(_DWORD *)__p = 136316674;
      *(_QWORD *)&__p[4] = v35;
      v54 = 1024;
      *(_DWORD *)v55 = a3;
      *(_WORD *)&v55[4] = 1024;
      *(_DWORD *)&v55[6] = v33;
      LOWORD(v56) = 1024;
      *(_DWORD *)((char *)&v56 + 2) = v8 == -1100;
      HIWORD(v56) = 1024;
      *(_DWORD *)v57 = v34;
      *(_WORD *)&v57[4] = 1024;
      *(_DWORD *)v58 = v36;
      *(_WORD *)&v58[4] = 1024;
      v59 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v30, 2, "TILE: tileDownloadCompleted, tile, %s, download done, success, %d, NSURLErrorCode, %d, tileDoesNotExist, %d, reachability, %d, locked, %d, fileSize, %d", __p, 48, v47, (_DWORD)v48, v49, v50, LODWORD(v52[0]));
      v38 = v37;
      if (v51 < 0)
        operator delete(v48);
      sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::tileDownloadCompleted(CLFileDownload *, BOOL, void *)", "%s\n", v38);
      if (v38 != buf)
        free(v38);
    }
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197838);
    v22 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      v23 = sub_1001CC818(v7[12]);
      v24 = sub_1001C087C((uint64_t)(v7 + 12));
      v25 = sub_1001C0858((uint64_t)(v7 + 12));
      v26 = *(_QWORD *)(sub_1000753C8((uint64_t)v7) + 96);
      *(_DWORD *)buf = 136447235;
      *(_QWORD *)&buf[4] = v23;
      v61 = 2049;
      *(double *)v62 = v24;
      *(_WORD *)&v62[8] = 2049;
      v63 = v25;
      *(_WORD *)v64 = 1026;
      *(_DWORD *)&v64[2] = a3;
      *(_WORD *)v65 = 1026;
      *(_DWORD *)&v65[2] = v26;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "@TileReq, %{public}s, downloaded, llsw, %{private}.2lf, %{private}.2lf, success, %{public}d, NSURLErrorCode, %{public}d", buf, 0x2Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102197838);
      v39 = qword_1022A0048;
      v40 = sub_1001CC818(v7[12]);
      v41 = sub_1001C087C((uint64_t)(v7 + 12));
      v42 = sub_1001C0858((uint64_t)(v7 + 12));
      v43 = *(_QWORD *)(sub_1000753C8((uint64_t)v7) + 96);
      *(_DWORD *)__p = 136447235;
      *(_QWORD *)&__p[4] = v40;
      v54 = 2049;
      *(double *)v55 = v41;
      *(_WORD *)&v55[8] = 2049;
      v56 = v42;
      *(_WORD *)v57 = 1026;
      *(_DWORD *)&v57[2] = a3;
      *(_WORD *)v58 = 1026;
      *(_DWORD *)&v58[2] = v43;
      LODWORD(v46) = 44;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v39, 0, "@TileReq, %{public}s, downloaded, llsw, %{private}.2lf, %{private}.2lf, success, %{public}d, NSURLErrorCode, %{public}d", __p, v46);
      v45 = (char *)v44;
      sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::tileDownloadCompleted(CLFileDownload *, BOOL, void *)", "%s\n", v44);
      if (v45 != buf)
        free(v45);
    }
    if (a3)
    {
      v27 = sub_1001CDA64(a1, v7[12]);
      v28 = v27 + 232;
      (*(void (**)(uint64_t))(*(_QWORD *)(v27 + 232) + 16))(v27 + 232);
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28);
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
      ++*(_DWORD *)(v27 + 284);
      (*(void (**)(uint64_t))(*(_QWORD *)(v27 + 232) + 24))(v27 + 232);
      sub_1015A2E04(buf, "tileDownloadCompleted");
      sub_100CDC4CC(v27 + 232, (uint64_t *)buf, *(_DWORD *)(a1 + 424));
      if ((v62[9] & 0x80000000) != 0)
        operator delete(*(void **)buf);
    }
    sub_100FBA5A8(a1, a2, a3, v10);
  }
  return sub_100131740(v52);
}

void sub_100FBA50C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, id a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  sub_100131740(&a18);
  _Unwind_Resume(a1);
}

void sub_100FBA5A8(uint64_t a1, uint64_t a2, int a3, double a4)
{
  uint64_t v4;
  uint64_t *v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  NSObject *v15;
  const char *v16;
  char *v17;
  uint64_t v18;
  NSObject *v19;
  void *v20;
  NSObject *v21;
  int v22;
  _BYTE *v23;
  uint64_t v24;
  _BYTE *v25;
  int v26;
  uint64_t *v27;
  NSObject *v28;
  const char *v29;
  double v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  double v35;
  double v36;
  uint64_t v37;
  const char *v38;
  char *v39;
  NSObject *v40;
  BOOL v41;
  uint64_t v42;
  NSObject *v43;
  _BYTE *v44;
  int v45;
  int v46;
  double v47;
  uint64_t v48;
  int v49;
  int v50;
  char *v51;
  uint64_t v52;
  void *v53;
  uint64_t *v54;
  uint64_t **v55;
  uint64_t v56;
  NSObject *v57;
  _BYTE *v58;
  NSObject *v59;
  _BYTE *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  const void **v65;
  unsigned __int8 *v66;
  NSObject *v67;
  _BYTE *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  NSObject *v75;
  int v76;
  _BYTE *v77;
  uint64_t v78;
  _BYTE *v79;
  void *v80;
  uint64_t v81;
  int v82;
  void **v83;
  uint64_t v84;
  void **v85;
  int v86;
  char *v87;
  char *v88;
  uint64_t v89;
  _BYTE *v90;
  int v91;
  int v92;
  double v93;
  uint64_t v94;
  int v95;
  int v96;
  char *v97;
  char *v98;
  uint64_t v99;
  int v100;
  _BYTE *v101;
  uint64_t v102;
  _BYTE *v103;
  char *v104;
  char *v105;
  const char *v106;
  char *v107;
  const char *v108;
  char *v109;
  uint64_t v110;
  _BYTE *v111;
  char *v112;
  char *v113;
  uint64_t v114;
  _BYTE *v115;
  char *v116;
  char *v117;
  uint64_t v118;
  _BYTE *v119;
  char *v120;
  char *v121;
  uint64_t v122;
  int v123;
  int v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD v129[6];
  _QWORD v130[6];
  char v131;
  void *v132[2];
  uint64_t v133;
  __int128 v134;
  uint64_t v135;
  _QWORD v136[6];
  int v137;
  _BYTE *v138;
  __int16 v139;
  uint64_t v140;
  _BYTE v141[12];
  __int16 v142;
  uint64_t v143;
  char v144;
  _BYTE __p[24];
  _BYTE v146[26];
  __int16 v147;
  int v148;
  _BYTE buf[12];
  __int16 v150;
  _BYTE v151[10];
  _BYTE v152[20];
  __int16 v153;
  int v154;
  __int16 v155;
  int v156;

  v9 = sub_100FB9D34(a1, a2);
  if ((uint64_t *)(a1 + 120) == v9)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197838);
    v15 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "TileMgr, tileDecompressionCompleted, no tile for download, %{public}p, #CloneMe", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102197838);
      *(_DWORD *)__p = 134349056;
      *(_QWORD *)&__p[4] = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "TileMgr, tileDecompressionCompleted, no tile for download, %{public}p, #CloneMe", __p, 12);
      v17 = (char *)v16;
      sub_100512490("Generic", 1, 0, 0, "void CLTilesManager::tileDecompressionCompleted(CLFileDownload *, BOOL, void *, CFAbsoluteTime)", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
  }
  else
  {
    v10 = v9;
    v11 = v9 + 4;
    v12 = v9[10];
    if (v12)
    {
      v126 = (char *)(a1 + 112);
      v13 = (unsigned int *)(v12 + 48);
      v128 = sub_1001CDA64(a1, *(_DWORD *)(v12 + 48));
      v124 = *(_DWORD *)(a1 + 424);
      if (*(_QWORD *)(a1 + 160) == a2)
      {
        v14 = a1 + 136;
      }
      else
      {
        if (*(_QWORD *)(a1 + 192) != a2)
        {
          sub_101938378();
          __break(1u);
          goto LABEL_196;
        }
        v14 = a1 + 168;
      }
      v127 = v14;
      v4 = *(_QWORD *)(sub_1000753C8(v12) + 96);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102197858);
      v125 = (uint64_t)v11;
      v21 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v12 + 16))(__p, v12);
        v22 = __p[23];
        v23 = *(_BYTE **)__p;
        v24 = *(_QWORD *)(sub_1000753C8(v12) + 96);
        v25 = __p;
        v26 = *(_DWORD *)(a1 + 424);
        if (v22 < 0)
          v25 = v23;
        *(_DWORD *)buf = 136316162;
        *(_QWORD *)&buf[4] = v25;
        v150 = 1024;
        *(_DWORD *)v151 = a3;
        *(_WORD *)&v151[4] = 1024;
        *(_DWORD *)&v151[6] = v24;
        *(_WORD *)v152 = 1024;
        *(_DWORD *)&v152[2] = v4 == -1100;
        *(_WORD *)&v152[6] = 1024;
        *(_DWORD *)&v152[8] = v26;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "TILE: tileDecompressionCompleted, tile, %s, decompress done, tileDownloadWasSuccessful, %d, NSURLErrorCode, %d, tileDoesNotExist, %d, reachability, %d", buf, 0x24u);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
      }
      if (!sub_1001BFF7C(115, 2))
      {
LABEL_30:
        *(_OWORD *)v132 = *(_OWORD *)v13;
        v133 = *(_QWORD *)(v12 + 64);
        if (*(char *)(v12 + 95) < 0)
        {
          sub_100115CE4(&v134, *(void **)(v12 + 72), *(_QWORD *)(v12 + 80));
        }
        else
        {
          v134 = *(_OWORD *)(v12 + 72);
          v135 = *(_QWORD *)(v12 + 88);
        }
        v27 = &qword_1022A0000;
        if (sub_1001C8DA8((unsigned int *)v132))
        {
          if (qword_1022A0040 != -1)
          {
            dispatch_once(&qword_1022A0040, &stru_102197838);
            v27 = &qword_1022A0000;
          }
          v28 = qword_1022A0048;
          if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
          {
            v29 = sub_1001CC818(*v13);
            v30 = sub_1001C087C((uint64_t)v132);
            v31 = sub_1001C0858((uint64_t)v132);
            v32 = sub_100026CC8(v128 + 184);
            *(_DWORD *)buf = 136446979;
            *(_QWORD *)&buf[4] = v29;
            v150 = 2049;
            *(double *)v151 = v30;
            *(_WORD *)&v151[8] = 2049;
            *(double *)v152 = v31;
            *(_WORD *)&v152[8] = 2050;
            *(_QWORD *)&v152[10] = v32;
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "@TileList, %{public}s, add, llsw, %{private}.2lf, %{private}.2lf, download, size, %{public}lu", buf, 0x2Au);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0040 != -1)
              dispatch_once(&qword_1022A0040, &stru_102197838);
            v33 = qword_1022A0048;
            v34 = sub_1001CC818(*v13);
            v35 = sub_1001C087C((uint64_t)v132);
            v36 = sub_1001C0858((uint64_t)v132);
            v37 = sub_100026CC8(v128 + 184);
            *(_DWORD *)__p = 136446979;
            *(_QWORD *)&__p[4] = v34;
            *(_WORD *)&__p[12] = 2049;
            *(double *)&__p[14] = v35;
            *(_WORD *)&__p[22] = 2049;
            *(double *)v146 = v36;
            *(_WORD *)&v146[8] = 2050;
            *(_QWORD *)&v146[10] = v37;
            LODWORD(v122) = 42;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v33, 0, "@TileList, %{public}s, add, llsw, %{private}.2lf, %{private}.2lf, download, size, %{public}lu", __p, v122);
            v39 = (char *)v38;
            sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::tileDecompressionCompleted(CLFileDownload *, BOOL, void *, CFAbsoluteTime)", "%s\n", v38);
            if (v39 != buf)
              free(v39);
            v27 = &qword_1022A0000;
          }
        }
        else
        {
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_102197838);
          v40 = qword_1022A0048;
          if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "@TileError, DecompressionID", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0040 != -1)
              dispatch_once(&qword_1022A0040, &stru_102197838);
            *(_WORD *)__p = 0;
            LODWORD(v122) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@TileError, DecompressionID", __p, v122);
            v109 = (char *)v108;
            sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::tileDecompressionCompleted(CLFileDownload *, BOOL, void *, CFAbsoluteTime)", "%s\n", v108);
            if (v109 != buf)
              free(v109);
          }
        }
        v41 = sub_100FA3220(v12, a3, v4 == -1100, a4);
        v42 = v128;
        v131 = v41;
        (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
        *(_BYTE *)(v127 + 8) = 0;
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102197858);
        v43 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
        {
          (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v12 + 16))(__p, v12);
          v44 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
          v45 = *(_DWORD *)(a1 + 424);
          v46 = *(unsigned __int8 *)(a1 + 200);
          v47 = a4 - *(double *)(v127 + 16);
          v48 = *(_QWORD *)v127;
          v49 = *(unsigned __int8 *)(a1 + 144);
          v50 = *(unsigned __int8 *)(a1 + 176);
          *(_DWORD *)buf = 136316674;
          *(_QWORD *)&buf[4] = v44;
          v150 = 1024;
          *(_DWORD *)v151 = v45;
          *(_WORD *)&v151[4] = 1024;
          *(_DWORD *)&v151[6] = v46;
          *(_WORD *)v152 = 2048;
          *(double *)&v152[2] = v47;
          *(_WORD *)&v152[10] = 2080;
          *(_QWORD *)&v152[12] = v48;
          v153 = 1024;
          v154 = v49;
          v155 = 1024;
          v156 = v50;
          _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "TILE: tileDecompressionCompleted, tile, %s, reachability, %d, isLocked, %d, downloadDuration, %.1lf, downloadState, %s, progress, s, %d, l, %d", buf, 0x38u);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_102197858);
          v89 = qword_1022A0028;
          (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v12 + 16))(v141, v12);
          if (v144 >= 0)
            v90 = v141;
          else
            v90 = *(_BYTE **)v141;
          v91 = *(_DWORD *)(a1 + 424);
          v92 = *(unsigned __int8 *)(a1 + 200);
          v93 = a4 - *(double *)(v127 + 16);
          v94 = *(_QWORD *)v127;
          v95 = *(unsigned __int8 *)(a1 + 144);
          v96 = *(unsigned __int8 *)(a1 + 176);
          *(_DWORD *)__p = 136316674;
          *(_QWORD *)&__p[4] = v90;
          *(_WORD *)&__p[12] = 1024;
          *(_DWORD *)&__p[14] = v91;
          *(_WORD *)&__p[18] = 1024;
          *(_DWORD *)&__p[20] = v92;
          *(_WORD *)v146 = 2048;
          *(double *)&v146[2] = v93;
          *(_WORD *)&v146[10] = 2080;
          *(_QWORD *)&v146[12] = v94;
          *(_WORD *)&v146[20] = 1024;
          *(_DWORD *)&v146[22] = v95;
          v147 = 1024;
          v148 = v96;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v89, 2, "TILE: tileDecompressionCompleted, tile, %s, reachability, %d, isLocked, %d, downloadDuration, %.1lf, downloadState, %s, progress, s, %d, l, %d", __p, 56, v123, *(double *)&v125, v126, v127, v128);
          v98 = v97;
          if (v144 < 0)
            operator delete(*(void **)v141);
          sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::tileDecompressionCompleted(CLFileDownload *, BOOL, void *, CFAbsoluteTime)", "%s\n", v98);
          if (v98 != buf)
            free(v98);
        }
        sub_100FBBDD0(a1, v131, (_DWORD *)v12, v42);
        if (sub_1001DFAE8())
        {
          sub_100119F3C(buf);
          v51 = (char *)(v12 + 8);
          if (*(char *)(v12 + 31) < 0)
            v51 = *(char **)v51;
          sub_1005285B4((uint64_t)buf, "gotTile", v51);
          sub_10011B47C((uint64_t)buf, "success", &v131);
          sub_10011B47C((uint64_t)buf, "protection", (_BYTE *)(a1 + 200));
          sub_1001DFAF4((uint64_t)buf, (uint64_t)"locationd");
          sub_10011A5A8(buf);
        }
        if (!v131)
        {
          v53 = *(void **)(a1 + 40);
          v130[0] = _NSConcreteStackBlock;
          v130[1] = 3221225472;
          v130[2] = sub_100FBC1FC;
          v130[3] = &unk_102143528;
          v130[4] = a1;
          *(double *)&v130[5] = a4;
          objc_msgSend(v53, "async:", v130);
LABEL_128:
          if (SHIBYTE(v135) < 0)
            operator delete((void *)v134);
          return;
        }
        v52 = v10[10];
        v10[10] = 0;
        *(_OWORD *)__p = *(_OWORD *)(v52 + 48);
        *(_QWORD *)&__p[16] = *(_QWORD *)(v52 + 64);
        if (*(char *)(v52 + 95) < 0)
        {
          sub_100115CE4(v146, *(void **)(v52 + 72), *(_QWORD *)(v52 + 80));
        }
        else
        {
          *(_OWORD *)v146 = *(_OWORD *)(v52 + 72);
          *(_QWORD *)&v146[16] = *(_QWORD *)(v52 + 88);
        }
        v54 = v27;
        sub_10008A9F0((uint64_t **)v126, v10);
        sub_1008B9B1C(v125);
        operator delete(v10);
        v55 = (uint64_t **)(v42 + 184);
        if (!sub_1001C0618(v42 + 184, (unsigned int *)__p))
        {
LABEL_112:
          v69 = sub_1008B985C(v55, (unsigned int *)__p);
          v70 = *v69;
          *v69 = v52;
          if (v70)
            (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
          v71 = sub_1001C85FC((uint64_t)v55, (unsigned int *)__p);
          sub_1001C9C90(v71, a4);
          v72 = sub_1001C85FC((uint64_t)v55, (unsigned int *)__p);
          sub_100FB8A7C(a1, v72, v42, (uint64_t)"download", a4);
          v73 = sub_1001C85FC((uint64_t)v55, (unsigned int *)__p);
          v74 = *(_QWORD *)(v42 + 304);
          if (v74)
            (*(void (**)(uint64_t))(*(_QWORD *)v74 + 32))(v74);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_102197858);
          v75 = qword_1022A0028;
          if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
          {
            (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v73 + 16))(buf, v73);
            v76 = v151[9];
            v77 = *(_BYTE **)buf;
            v78 = sub_100026CC8((uint64_t)v55);
            v79 = buf;
            if (v76 < 0)
              v79 = v77;
            *(_DWORD *)v141 = 136315394;
            *(_QWORD *)&v141[4] = v79;
            v142 = 2048;
            v143 = v78;
            _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEBUG, "TILE: tileDecompressionCompleted, added, tileid, %s, tilesMap.size, %lu", v141, 0x16u);
            if ((v151[9] & 0x80000000) != 0)
              operator delete(*(void **)buf);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_102197858);
            v99 = qword_1022A0028;
            (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v73 + 16))(v141, v73);
            v100 = v144;
            v101 = *(_BYTE **)v141;
            v102 = sub_100026CC8((uint64_t)v55);
            v103 = v141;
            if (v100 < 0)
              v103 = v101;
            v137 = 136315394;
            v138 = v103;
            v139 = 2048;
            v140 = v102;
            LODWORD(v122) = 22;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v99, 2, "TILE: tileDecompressionCompleted, added, tileid, %s, tilesMap.size, %lu", (const char *)&v137, v122);
            v105 = v104;
            if (v144 < 0)
              operator delete(*(void **)v141);
            sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::tileDecompressionCompleted(CLFileDownload *, BOOL, void *, CFAbsoluteTime)", "%s\n", v105);
            if (v105 != buf)
              free(v105);
            v42 = v128;
          }
          ++*(_DWORD *)(v42 + 288);
          if (v124 == 1)
            ++*(_DWORD *)(v42 + 292);
          sub_100FB3524(a1, a4);
          v80 = *(void **)(a1 + 40);
          v129[0] = _NSConcreteStackBlock;
          v129[1] = 3221225472;
          v129[2] = sub_100FBC20C;
          v129[3] = &unk_102143528;
          v129[4] = a1;
          *(double *)&v129[5] = a4;
          objc_msgSend(v80, "async:", v129);
          if ((v146[23] & 0x80000000) != 0)
            operator delete(*(void **)v146);
          goto LABEL_128;
        }
        v56 = sub_1001C85FC(v42 + 184, (unsigned int *)__p);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102197858);
        v57 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
        {
          (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v56 + 16))(buf, v56);
          v58 = v151[9] >= 0 ? buf : *(_BYTE **)buf;
          *(_DWORD *)v141 = 136315138;
          *(_QWORD *)&v141[4] = v58;
          _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEBUG, "TILE: tileDecompressionCompleted, replacing from, %s", v141, 0xCu);
          if ((v151[9] & 0x80000000) != 0)
            operator delete(*(void **)buf);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_102197858);
          v110 = qword_1022A0028;
          (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v56 + 16))(v141, v56);
          if (v144 >= 0)
            v111 = v141;
          else
            v111 = *(_BYTE **)v141;
          v137 = 136315138;
          v138 = v111;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v110, 2, "TILE: tileDecompressionCompleted, replacing from, %s", (const char *)&v137);
          v113 = v112;
          if (v144 < 0)
            operator delete(*(void **)v141);
          sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::tileDecompressionCompleted(CLFileDownload *, BOOL, void *, CFAbsoluteTime)", "%s\n", v113);
          if (v113 != buf)
            free(v113);
          v42 = v128;
        }
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102197858);
        v59 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
        {
          (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v52 + 16))(buf, v52);
          v60 = v151[9] >= 0 ? buf : *(_BYTE **)buf;
          *(_DWORD *)v141 = 136315138;
          *(_QWORD *)&v141[4] = v60;
          _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEBUG, "TILE: tileDecompressionCompleted, replacing to, %s", v141, 0xCu);
          if ((v151[9] & 0x80000000) != 0)
            operator delete(*(void **)buf);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_102197858);
          v114 = qword_1022A0028;
          (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v52 + 16))(v141, v52);
          if (v144 >= 0)
            v115 = v141;
          else
            v115 = *(_BYTE **)v141;
          v137 = 136315138;
          v138 = v115;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v114, 2, "TILE: tileDecompressionCompleted, replacing to, %s", (const char *)&v137);
          v117 = v116;
          if (v144 < 0)
            operator delete(*(void **)v141);
          sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::tileDecompressionCompleted(CLFileDownload *, BOOL, void *, CFAbsoluteTime)", "%s\n", v117);
          if (v117 != buf)
            free(v117);
          v42 = v128;
        }
        v61 = *(unsigned __int8 *)(v56 + 31);
        if ((v61 & 0x80u) == 0)
          v62 = *(unsigned __int8 *)(v56 + 31);
        else
          v62 = *(_QWORD *)(v56 + 16);
        v63 = *(unsigned __int8 *)(v52 + 31);
        v64 = (char)v63;
        if ((v63 & 0x80u) != 0)
          v63 = *(_QWORD *)(v52 + 16);
        if (v62 != v63)
          goto LABEL_101;
        v65 = (const void **)(v56 + 8);
        if (v64 >= 0)
          v66 = (unsigned __int8 *)(v52 + 8);
        else
          v66 = *(unsigned __int8 **)(v52 + 8);
        if ((v61 & 0x80) != 0)
        {
          if (memcmp(*v65, v66, *(_QWORD *)(v56 + 16)))
          {
LABEL_101:
            sub_100FA2CE0(v56);
LABEL_111:
            sub_1008B92E4(v55, (unsigned int *)__p);
            goto LABEL_112;
          }
        }
        else if (*(_BYTE *)(v56 + 31))
        {
          while (*(unsigned __int8 *)v65 == *v66)
          {
            v65 = (const void **)((char *)v65 + 1);
            ++v66;
            if (!--v61)
              goto LABEL_102;
          }
          goto LABEL_101;
        }
LABEL_102:
        if (v54[8] != -1)
          dispatch_once(&qword_1022A0040, &stru_102197838);
        v67 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
        {
          (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v56 + 16))(buf, v56);
          v68 = v151[9] >= 0 ? buf : *(_BYTE **)buf;
          *(_DWORD *)v141 = 136380675;
          *(_QWORD *)&v141[4] = v68;
          _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_ERROR, "TileMgr, tileDecompressionCompleted, where the file, was it deleted, %{private}s, #CloneMe", v141, 0xCu);
          if ((v151[9] & 0x80000000) != 0)
            operator delete(*(void **)buf);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (v54[8] != -1)
            dispatch_once(&qword_1022A0040, &stru_102197838);
          v118 = qword_1022A0048;
          (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v56 + 16))(v141, v56);
          if (v144 >= 0)
            v119 = v141;
          else
            v119 = *(_BYTE **)v141;
          v137 = 136380675;
          v138 = v119;
          LODWORD(v122) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v118, 16, "TileMgr, tileDecompressionCompleted, where the file, was it deleted, %{private}s, #CloneMe", &v137, v122);
          v121 = v120;
          if (v144 < 0)
            operator delete(*(void **)v141);
          sub_100512490("Generic", 1, 0, 0, "void CLTilesManager::tileDecompressionCompleted(CLFileDownload *, BOOL, void *, CFAbsoluteTime)", "%s\n", v121);
          if (v121 != buf)
            free(v121);
          v42 = v128;
        }
        goto LABEL_111;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 == -1)
      {
LABEL_132:
        v81 = qword_1022A0028;
        (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v12 + 16))(v132, v12);
        v82 = SHIBYTE(v133);
        v83 = (void **)v132[0];
        v84 = *(_QWORD *)(sub_1000753C8(v12) + 96);
        v85 = v132;
        v86 = *(_DWORD *)(a1 + 424);
        if (v82 < 0)
          v85 = v83;
        *(_DWORD *)__p = 136316162;
        *(_QWORD *)&__p[4] = v85;
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = a3;
        *(_WORD *)&__p[18] = 1024;
        *(_DWORD *)&__p[20] = v84;
        *(_WORD *)v146 = 1024;
        *(_DWORD *)&v146[2] = v4 == -1100;
        *(_WORD *)&v146[6] = 1024;
        *(_DWORD *)&v146[8] = v86;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v81, 2, "TILE: tileDecompressionCompleted, tile, %s, decompress done, tileDownloadWasSuccessful, %d, NSURLErrorCode, %d, tileDoesNotExist, %d, reachability, %d", __p, 36, v123, v125, (_DWORD)v126);
        v88 = v87;
        if (SHIBYTE(v133) < 0)
          operator delete(v132[0]);
        sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::tileDecompressionCompleted(CLFileDownload *, BOOL, void *, CFAbsoluteTime)", "%s\n", v88);
        if (v88 != buf)
          free(v88);
        goto LABEL_30;
      }
LABEL_196:
      dispatch_once(&qword_1022A0020, &stru_102197858);
      goto LABEL_132;
    }
    v18 = (uint64_t)(v9 + 4);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197838);
    v19 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "TileMgr, tileDecompressionCompleted, nullptr in fTilesDownload, #CloneMe", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102197838);
      *(_WORD *)__p = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "TileMgr, tileDecompressionCompleted, nullptr in fTilesDownload, #CloneMe", __p, 2);
      v107 = (char *)v106;
      sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::tileDecompressionCompleted(CLFileDownload *, BOOL, void *, CFAbsoluteTime)", "%s\n", v106);
      if (v107 != buf)
        free(v107);
    }
    sub_10008A9F0((uint64_t **)(a1 + 112), v10);
    sub_1008B9B1C(v18);
    operator delete(v10);
    v20 = *(void **)(a1 + 40);
    v136[0] = _NSConcreteStackBlock;
    v136[1] = 3221225472;
    v136[2] = sub_100FBBDC0;
    v136[3] = &unk_102143528;
    v136[4] = a1;
    *(double *)&v136[5] = a4;
    objc_msgSend(v20, "async:", v136);
  }
}

void sub_100FBBC98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  uint64_t v60;

  if (a60 < 0)
    operator delete(__p);
  if (v60)
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  if (a37 < 0)
    operator delete(a32);
  _Unwind_Resume(a1);
}

void sub_100FBBDC0(uint64_t a1)
{
  sub_100168EA8(*(_QWORD *)(a1 + 32), *(double *)(a1 + 40));
}

void sub_100FBBDD0(uint64_t a1, char a2, _DWORD *a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  NSObject *v8;
  _BYTE *v9;
  void **v10;
  void **v11;
  std::string *v12;
  uint64_t v13;
  void **v14;
  void **v15;
  void **v16;
  std::string *v17;
  std::string *v18;
  std::string *v19;
  int v20;
  void *v21[2];
  const char *v22;
  _BYTE v23[4];
  int v24;
  void *v25[2];
  void *__p[4];
  std::string v27;
  _BYTE v28[12];
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  void **v34;
  __int16 v35;
  void **v36;
  __int16 v37;
  std::string *v38;
  std::string buf;
  __int16 v40;
  void **v41;
  __int16 v42;
  void **v43;
  __int16 v44;
  std::string *v45;

  v7 = (uint64_t)(a3 + 12);
  v6 = a3[12];
  memset(&v27, 0, sizeof(v27));
  memset(__p, 0, sizeof(__p));
  *(_OWORD *)v25 = 0u;
  v23[0] = a2;
  v24 = v6;
  std::string::operator=((std::string *)v25, (const std::string *)(a4 + 56));
  sub_100BCC62C(v7, &buf);
  if (SHIBYTE(__p[3]) < 0)
    operator delete(__p[1]);
  *(std::string *)&__p[1] = buf;
  sub_100FA2C30((uint64_t)a3, &buf);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  v27 = buf;
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102197838);
  v8 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
  {
    (*(void (**)(_BYTE *__return_ptr, _DWORD *))(*(_QWORD *)a3 + 16))(v28, a3);
    v9 = v32 >= 0 ? v28 : *(_BYTE **)v28;
    v10 = SHIBYTE(__p[0]) >= 0 ? v25 : (void **)v25[0];
    v11 = SHIBYTE(__p[3]) >= 0 ? &__p[1] : (void **)__p[1];
    v12 = (v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v27
        : (std::string *)v27.__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136316418;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v9;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v23[0];
    WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
    HIDWORD(buf.__r_.__value_.__r.__words[2]) = v24;
    v40 = 2080;
    v41 = v10;
    v42 = 2080;
    v43 = v11;
    v44 = 2080;
    v45 = v12;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "TILE: kNotificationTileWasDownloaded, tileid, %s, tileHeaderParsed, %d, tileType, %d, serverUrl, %s, serverFilename, %s, absoluteLocalFilename, %s", (uint8_t *)&buf, 0x36u);
    if (SHIBYTE(v32) < 0)
      operator delete(*(void **)v28);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197838);
    v13 = qword_1022A0048;
    (*(void (**)(void **__return_ptr, _DWORD *))(*(_QWORD *)a3 + 16))(v21, a3);
    if (SHIBYTE(v22) >= 0)
      v14 = v21;
    else
      v14 = (void **)v21[0];
    if (SHIBYTE(__p[0]) >= 0)
      v15 = v25;
    else
      v15 = (void **)v25[0];
    if (SHIBYTE(__p[3]) >= 0)
      v16 = &__p[1];
    else
      v16 = (void **)__p[1];
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17 = &v27;
    else
      v17 = (std::string *)v27.__r_.__value_.__r.__words[0];
    *(_DWORD *)v28 = 136316418;
    *(_QWORD *)&v28[4] = v14;
    v29 = 1024;
    v30 = v23[0];
    v31 = 1024;
    v32 = v24;
    v33 = 2080;
    v34 = v15;
    v35 = 2080;
    v36 = v16;
    v37 = 2080;
    v38 = v17;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v13, 1, "TILE: kNotificationTileWasDownloaded, tileid, %s, tileHeaderParsed, %d, tileType, %d, serverUrl, %s, serverFilename, %s, absoluteLocalFilename, %s", v28, 54, v20, (const char *)v21[0], (const char *)v21[1], v22);
    v19 = v18;
    if (SHIBYTE(v22) < 0)
      operator delete(v21[0]);
    sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::sendNotificationTileWasDownloaded(BOOL, const CLTileFile &, const CLTilesSet &)", "%s\n", (const char *)v19);
    if (v19 != &buf)
      free(v19);
  }
  LODWORD(buf.__r_.__value_.__l.__data_) = 0;
  (*(void (**)(uint64_t, std::string *, _BYTE *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &buf, v23, 0, 0xFFFFFFFFLL, 0);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p[3]) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v25[0]);
}

void sub_100FBC1D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100C0FC30((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100FBC1FC(uint64_t a1)
{
  sub_100168EA8(*(_QWORD *)(a1 + 32), *(double *)(a1 + 40));
}

void sub_100FBC20C(uint64_t a1)
{
  sub_100168EA8(*(_QWORD *)(a1 + 32), *(double *)(a1 + 40));
}

id *sub_100FBC21C(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102197858);
  v2 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(unsigned __int8 *)(a1 + 56);
    *(_DWORD *)buf = 67109120;
    v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "TILE: _tileDownloadCompleted, success, %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v5 = *(unsigned __int8 *)(a1 + 56);
    v8[0] = 67109120;
    v8[1] = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: _tileDownloadCompleted, success, %d", v8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "static void CLTilesManager::_tileDownloadCompleted(CLFileDownload *, BOOL, void *)_block_invoke", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return sub_100FB9DB8(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 56));
}

void sub_100FBC3DC(uint64_t a1)
{
  sub_100168EA8(*(_QWORD *)(a1 + 32), *(double *)(a1 + 40));
}

uint64_t sub_100FBC3EC(uint64_t a1, _DWORD *a2, double *a3, double *a4, uint64_t a5, _BYTE *a6, _BYTE *a7)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v14;
  uint64_t v15;
  double v16;
  NSObject *v17;
  _BYTE *v18;
  int v19;
  NSObject *v20;
  int v21;
  NSObject *v22;
  std::string *v23;
  uint64_t *v24;
  unsigned int v26;
  const char *v27;
  std::string *v28;
  uint64_t v29;
  _BYTE *v30;
  std::string *v31;
  std::string *v32;
  uint64_t v33;
  _BYTE *v34;
  int v35;
  std::string *v36;
  std::string *v37;
  _BYTE v38[12];
  char v39;
  _BYTE __p[12];
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  unsigned int v45[6];
  void *v46;
  char v47;
  std::string buf[68];

  if ((*a2 & 0xFFFFFFF7) - 1 >= 2)
  {
    sub_1019384E0();
    __break(1u);
LABEL_40:
    dispatch_once(&qword_1022A0020, &stru_102197858);
    goto LABEL_19;
  }
  v7 = a1;
  *a7 = 0;
  if (*(_BYTE *)(a1 + 201))
  {
    sub_1000C1928((uint64_t)v45, a2);
    v14 = sub_1001CDA64(v7, v45[0]);
    sub_1001CB024((uint64_t)v45, -1, *a3, *a4, *(double *)(v14 + 152), *(double *)(v14 + 160));
    if (sub_1001C0618(v14 + 184, v45))
    {
      v15 = sub_1001C85FC(v14 + 184, v45);
      *a6 = sub_1001C9408(v15, *(_BYTE *)(v7 + 200));
      if (sub_1001C9408(v15, *(_BYTE *)(v7 + 200)))
      {
        v16 = (*(double (**)(_QWORD))(**(_QWORD **)(v7 + 464) + 56))(*(_QWORD *)(v7 + 464));
        sub_1001C9C90(v15, v16);
      }
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102197858);
      v17 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v15 + 16))(__p, v15);
        v18 = v44 >= 0 ? __p : *(_BYTE **)__p;
        v19 = *a6;
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v18;
        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1;
        WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v19;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "TILE: getTileFile, tile, %s, isAvailable, %d, isFileAccessible, %d", (uint8_t *)buf, 0x18u);
        if (SHIBYTE(v44) < 0)
          operator delete(*(void **)__p);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102197858);
        v33 = qword_1022A0028;
        (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v15 + 16))(v38, v15);
        if (v39 >= 0)
          v34 = v38;
        else
          v34 = *(_BYTE **)v38;
        v35 = *a6;
        *(_DWORD *)__p = 136315650;
        *(_QWORD *)&__p[4] = v34;
        v41 = 1024;
        v42 = 1;
        v43 = 1024;
        v44 = v35;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v33, 2, "TILE: getTileFile, tile, %s, isAvailable, %d, isFileAccessible, %d", __p, 24, *(_DWORD *)v38);
        v37 = v36;
        if (v39 < 0)
          operator delete(*(void **)v38);
        sub_100512490("Generic", 1, 0, 2, "CLTileFile *CLTilesManager::getRawTileFile(const CLTilesManager_Type::TileType &, const double &, const double &, std::string &, BOOL &, BOOL &)", "%s\n", (const char *)v37);
        if (v37 != buf)
          free(v37);
      }
      sub_100FA2C30(v15, buf);
      if (*(char *)(a5 + 23) < 0)
        operator delete(*(void **)a5);
      *(std::string *)a5 = buf[0];
    }
    else
    {
      *a6 = 0;
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102197858);
      v22 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        sub_100BCC240(v45, buf);
        v23 = (buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? buf
            : (std::string *)buf[0].__r_.__value_.__r.__words[0];
        *(_DWORD *)__p = 136315138;
        *(_QWORD *)&__p[4] = v23;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "TILE: getTileFile, tileid, %s, not available", __p, 0xCu);
        if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf[0].__r_.__value_.__l.__data_);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102197858);
        v29 = qword_1022A0028;
        sub_100BCC240(v45, __p);
        if (v44 >= 0)
          v30 = __p;
        else
          v30 = *(_BYTE **)__p;
        *(_DWORD *)v38 = 136315138;
        *(_QWORD *)&v38[4] = v30;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v29, 2, "TILE: getTileFile, tileid, %s, not available", v38);
        v32 = v31;
        if (SHIBYTE(v44) < 0)
          operator delete(*(void **)__p);
        sub_100512490("Generic", 1, 0, 2, "CLTileFile *CLTilesManager::getRawTileFile(const CLTilesManager_Type::TileType &, const double &, const double &, std::string &, BOOL &, BOOL &)", "%s\n", (const char *)v32);
        if (v32 != buf)
          free(v32);
      }
      if ((_QWORD *)(v7 + 120) == sub_1001C8840(v7 + 112, (uint64_t)v45)
        || (buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v45,
            v24 = sub_1008B9D6C((uint64_t **)(v7 + 112), (uint64_t)v45, (uint64_t)&unk_101B9EB60, buf),
            sub_1001C94A8(v24[10])))
      {
        v15 = 0;
      }
      else
      {
        v15 = 0;
        *a7 = 1;
      }
    }
    if (v47 < 0)
      operator delete(v46);
    return v15;
  }
  v8 = &qword_1022A0000;
  if (qword_1022A0020 != -1)
    goto LABEL_40;
LABEL_19:
  v20 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v21 = *(unsigned __int8 *)(v7 + 200);
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 67109120;
    HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v21;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "TILE: getTileFile, index is not available until first unlock, fDataProtectionEnabled, %d", (uint8_t *)buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v8[4] != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v26 = *(unsigned __int8 *)(v7 + 200);
    v45[0] = 67109120;
    v45[1] = v26;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: getTileFile, index is not available until first unlock, fDataProtectionEnabled, %d", v45);
    v28 = (std::string *)v27;
    sub_100512490("Generic", 1, 0, 2, "CLTileFile *CLTilesManager::getRawTileFile(const CLTilesManager_Type::TileType &, const double &, const double &, std::string &, BOOL &, BOOL &)", "%s\n", v27);
    if (v28 != buf)
      free(v28);
  }
  return 0;
}

void sub_100FBCAB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100FBCB08(uint64_t a1, const std::string *a2)
{
  __int128 v4;
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 40);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  v4 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 64) = *((_QWORD *)&a2->__r_.__value_.__l + 2);
  *(_OWORD *)(a1 + 48) = v4;
  std::string::operator=((std::string *)(a1 + 72), a2 + 1);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  return 1;
}

void sub_100FBCB9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100FBCBB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  _BOOL4 v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t *i;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  NSObject *v20;
  _QWORD *v21;
  _QWORD *v22;
  BOOL v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  int v29;
  _BYTE *v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  _BYTE *v36;
  uint64_t v37;
  _BYTE *v38;
  char *v39;
  char *v40;
  NSObject *v41;
  _BYTE *v42;
  uint64_t v43;
  _BYTE *v44;
  char *v45;
  const char *v46;
  uint64_t v47;
  unsigned int *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  _BOOL4 v52;
  NSObject *v53;
  const char *v54;
  char *v55;
  unsigned int *v56;
  unsigned int *v57;
  NSObject *v58;
  const char *v59;
  char *v60;
  uint64_t v61;
  unsigned int *v62;
  uint64_t v63;
  double *v64;
  NSObject *v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  const char *v70;
  char *v71;
  NSObject *v72;
  _BYTE *v73;
  unsigned int *v74;
  unsigned int *v75;
  uint64_t v76;
  _BYTE *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  _BYTE *v81;
  char *v82;
  char *v83;
  NSObject *v84;
  unsigned int *v85;
  unsigned int *v86;
  NSObject *v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  NSObject *v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  NSObject *v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  _BYTE *v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  const char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  const char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  const char *v123;
  const char *v124;
  char *v125;
  const char *v126;
  int v127;
  double v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  const char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _BYTE v137[12];
  char v138;
  int v139;
  _BYTE *v140;
  _BYTE v141[22];
  char v142;
  _BYTE __p[30];
  _BYTE v144[10];
  _BOOL4 v145;
  __int16 v146;
  uint64_t v147;
  __int16 v148;
  uint64_t v149;
  __int16 v150;
  _BYTE *v151;
  _BYTE buf[12];
  __int16 v153;
  __int128 v154;
  _BYTE v155[10];
  _BOOL4 v156;
  __int16 v157;
  uint64_t v158;
  __int16 v159;
  uint64_t v160;
  __int16 v161;
  _BYTE *v162;

  if (!*(_BYTE *)(a2 + 178))
    return;
  v3 = a1;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = (*(double (**)(_QWORD))(**(_QWORD **)(v4 + 464) + 56))(*(_QWORD *)(v4 + 464))
     - *(double *)(*(_QWORD *)(a1 + 48) + 76)
     + 60.0;
  v6 = v5 < *(double *)(a2 + 136) && *(_BYTE *)(v4 + 440) == 0;
  v136 = a2;
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102197838);
  v7 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
  {
    v8 = *(char *)(a2 + 31) >= 0 ? a2 + 8 : *(_QWORD *)(a2 + 8);
    v9 = *(_QWORD *)(v3 + 56);
    v10 = *(unsigned __int8 *)(v3 + 64);
    v11 = sub_100026CC8(a2 + 184);
    v12 = sub_1008B97D0(a2 + 184);
    sub_100071A00(*(_QWORD *)(v3 + 48), __p);
    v13 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)buf = 136316930;
    *(_QWORD *)&buf[4] = v8;
    v153 = 2080;
    *(_QWORD *)&v154 = v9;
    WORD4(v154) = 1024;
    *(_DWORD *)((char *)&v154 + 10) = v10;
    HIWORD(v154) = 2048;
    *(double *)v155 = v5;
    *(_WORD *)&v155[8] = 1024;
    v156 = v6;
    v157 = 2048;
    v158 = v11;
    v159 = 2048;
    v160 = v12;
    v161 = 2080;
    v162 = v13;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "TileMgr, updateProtectionClass, start, %s, reason, %s, isAboutToLock, %d, locationAge, %.1lf, doLocCheck, %d, sizes, %lu, %lu, knownLocation, %s", buf, 0x4Au);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197838);
    v135 = qword_1022A0048;
    if (*(char *)(a2 + 31) >= 0)
      v99 = a2 + 8;
    else
      v99 = *(_QWORD *)(a2 + 8);
    v100 = *(_QWORD *)(v3 + 56);
    v101 = *(unsigned __int8 *)(v3 + 64);
    v102 = sub_100026CC8(a2 + 184);
    v103 = sub_1008B97D0(a2 + 184);
    sub_100071A00(*(_QWORD *)(v3 + 48), v141);
    if (v142 >= 0)
      v104 = v141;
    else
      v104 = *(_BYTE **)v141;
    *(_DWORD *)__p = 136316930;
    *(_QWORD *)&__p[4] = v99;
    *(_WORD *)&__p[12] = 2080;
    *(_QWORD *)&__p[14] = v100;
    *(_WORD *)&__p[22] = 1024;
    *(_DWORD *)&__p[24] = v101;
    *(_WORD *)&__p[28] = 2048;
    *(double *)v144 = v5;
    *(_WORD *)&v144[8] = 1024;
    v145 = v6;
    v146 = 2048;
    v147 = v102;
    v148 = 2048;
    v149 = v103;
    v150 = 2080;
    v151 = v104;
    LODWORD(v126) = 74;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v135, 1, "TileMgr, updateProtectionClass, start, %s, reason, %s, isAboutToLock, %d, locationAge, %.1lf, doLocCheck, %d, sizes, %lu, %lu, knownLocation, %s", __p, v126, v127, v128, v130, v131, v132, v133);
    v106 = v105;
    if (v142 < 0)
      operator delete(*(void **)v141);
    sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke", "%s\n", v106);
    if (v106 != buf)
      free(v106);
  }
  i = &qword_1022A0000;
  if (v6)
  {
    if (*(_BYTE *)(v3 + 64))
    {
      v15 = a2 + 184;
      sub_1008B982C(a2 + 184);
      v16 = (_QWORD *)sub_100129380(a2 + 184);
      v134 = sub_1000DCFC0(a2 + 184);
      if (v16 != (_QWORD *)v134)
      {
        v17 = 0;
        v18 = 0;
        v129 = v3;
        while (1)
        {
          v19 = (unsigned int *)v16[10];
          if (!v19)
            break;
          if (sub_1001C94A8(v16[10]))
          {
            if (sub_100FA7580((double *)v19, *(_QWORD *)(v3 + 48), *(float *)(v136 + 144)))
            {
              if (!sub_100FA4BB8((uint64_t)v19))
              {
                if (qword_1022A0040 != -1)
                  dispatch_once(&qword_1022A0040, &stru_102197838);
                v24 = qword_1022A0048;
                if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
                {
                  (*(void (**)(_BYTE *__return_ptr, unsigned int *))(*(_QWORD *)v19 + 16))(buf, v19);
                  v25 = v4;
                  v26 = v17;
                  v27 = v18;
                  v28 = i;
                  v29 = SBYTE9(v154);
                  v30 = *(_BYTE **)buf;
                  v31 = sub_1008B97D0(v15);
                  *(_DWORD *)__p = 136380931;
                  v32 = buf;
                  if (v29 < 0)
                    v32 = v30;
                  *(_QWORD *)&__p[4] = v32;
                  *(_WORD *)&__p[12] = 2050;
                  *(_QWORD *)&__p[14] = v31;
                  _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "TileMgr, updateProtectionClass, failed unlocking tileid, %{private}s, size, %{public}lu, #CloneMe", __p, 0x16u);
                  if (SBYTE9(v154) < 0)
                    operator delete(*(void **)buf);
                  i = v28;
                  v18 = v27;
                  v17 = v26;
                  v4 = v25;
                  v3 = v129;
                }
                if (!sub_1001BFF7C(115, 0))
                  goto LABEL_31;
                bzero(buf, 0x65CuLL);
                if (qword_1022A0040 != -1)
                  dispatch_once(&qword_1022A0040, &stru_102197838);
                v33 = qword_1022A0048;
                (*(void (**)(_BYTE *__return_ptr, unsigned int *))(*(_QWORD *)v19 + 16))(__p, v19);
                v34 = v17;
                v35 = __p[23];
                v36 = *(_BYTE **)__p;
                v37 = sub_1008B97D0(v15);
                *(_DWORD *)v141 = 136380931;
                v38 = __p;
                if (v35 < 0)
                  v38 = v36;
                *(_QWORD *)&v141[4] = v38;
                *(_WORD *)&v141[12] = 2050;
                *(_QWORD *)&v141[14] = v37;
                LODWORD(v126) = 22;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v33, 16, "TileMgr, updateProtectionClass, failed unlocking tileid, %{private}s, size, %{public}lu, #CloneMe", v141, v126);
                v40 = v39;
                if ((__p[23] & 0x80000000) != 0)
                  operator delete(*(void **)__p);
                sub_100512490("Generic", 1, 0, 0, "void CLTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke", "%s\n", v40);
                v17 = v34;
                goto LABEL_74;
              }
              sub_1008B9548(v15, v19 + 12);
              ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 24);
              v18 = (v18 + 1);
            }
            else
            {
              if (!sub_100FA72C0((uint64_t)v19, *(unsigned __int8 *)(v4 + 200)))
              {
                sub_1008B9548(v15, v19 + 12);
                ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 24);
                if (qword_1022A0040 != -1)
                  dispatch_once(&qword_1022A0040, &stru_102197838);
                v41 = qword_1022A0048;
                if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
                {
                  (*(void (**)(_BYTE *__return_ptr, unsigned int *))(*(_QWORD *)v19 + 16))(buf, v19);
                  v42 = buf;
                  if (SBYTE9(v154) < 0)
                    v42 = *(_BYTE **)buf;
                  *(_DWORD *)__p = 136380675;
                  *(_QWORD *)&__p[4] = v42;
                  _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "TileMgr, updateProtectionClass, unable to lock tile, locking tileid, %{private}s, #CloneMe", __p, 0xCu);
                  if (SBYTE9(v154) < 0)
                    operator delete(*(void **)buf);
                }
                if (!sub_1001BFF7C(115, 0))
                  goto LABEL_31;
                bzero(buf, 0x65CuLL);
                if (qword_1022A0040 != -1)
                  dispatch_once(&qword_1022A0040, &stru_102197838);
                v43 = qword_1022A0048;
                (*(void (**)(_BYTE *__return_ptr, unsigned int *))(*(_QWORD *)v19 + 16))(__p, v19);
                v44 = __p;
                if (__p[23] < 0)
                  v44 = *(_BYTE **)__p;
                *(_DWORD *)v141 = 136380675;
                *(_QWORD *)&v141[4] = v44;
                LODWORD(v126) = 12;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v43, 16, "TileMgr, updateProtectionClass, unable to lock tile, locking tileid, %{private}s, #CloneMe", v141, v126);
                v40 = v45;
                if ((__p[23] & 0x80000000) != 0)
                  operator delete(*(void **)__p);
                sub_100512490("Generic", 1, 0, 0, "void CLTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke", "%s\n", v40);
                goto LABEL_74;
              }
              v17 = (v17 + 1);
            }
          }
LABEL_31:
          v21 = (_QWORD *)v16[1];
          if (v21)
          {
            do
            {
              v22 = v21;
              v21 = (_QWORD *)*v21;
            }
            while (v21);
          }
          else
          {
            do
            {
              v22 = (_QWORD *)v16[2];
              v23 = *v22 == (_QWORD)v16;
              v16 = v22;
            }
            while (!v23);
          }
          v16 = v22;
          if (v22 == (_QWORD *)v134)
            goto LABEL_175;
        }
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102197838);
        v20 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "TileMgr, tile ptr is NULL, #CloneMe", buf, 2u);
        }
        if (!sub_1001BFF7C(115, 0))
          goto LABEL_31;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102197838);
        *(_WORD *)__p = 0;
        LODWORD(v126) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "TileMgr, tile ptr is NULL, #CloneMe", __p, v126);
        v40 = (char *)v46;
        sub_100512490("Generic", 1, 0, 0, "void CLTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke", "%s\n", v46);
LABEL_74:
        if (v40 != buf)
          free(v40);
        goto LABEL_31;
      }
      goto LABEL_174;
    }
    memset(__p, 0, 24);
    v61 = a2 + 184;
    sub_1008B97C4(a2 + 184, (uint64_t *)v141);
    v62 = *(unsigned int **)v141;
    if (*(_BYTE **)v141 == &v141[8])
    {
LABEL_171:
      sub_100067A00((uint64_t)v141, *(char **)&v141[8]);
      v85 = *(unsigned int **)__p;
      v86 = *(unsigned int **)&__p[8];
      for (i = &qword_1022A0000; v85 != v86; v85 += 12)
        sub_1008B9050(v61, v85);
      *(_QWORD *)buf = __p;
      sub_100495E10((void ***)buf);
LABEL_174:
      LODWORD(v18) = 0;
      LODWORD(v17) = 0;
LABEL_175:
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102197838);
      v87 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
      {
        if (*(char *)(v136 + 31) >= 0)
          v88 = v136 + 8;
        else
          v88 = *(_QWORD *)(v136 + 8);
        v89 = *(unsigned __int8 *)(v3 + 64);
        v90 = sub_100026CC8(v136 + 184);
        *(_DWORD *)buf = 136447234;
        *(_QWORD *)&buf[4] = v88;
        v153 = 1026;
        LODWORD(v154) = v89;
        WORD2(v154) = 1026;
        *(_DWORD *)((char *)&v154 + 6) = v17;
        WORD5(v154) = 1026;
        HIDWORD(v154) = v18;
        *(_WORD *)v155 = 2050;
        *(_QWORD *)&v155[2] = v90;
        _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_INFO, "TileMgr, %{public}s, locking, %{public}d, lock, %{public}d, unlock, %{public}d, size, %{public}lu", buf, 0x28u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_183;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102197838);
      v119 = qword_1022A0048;
      if (*(char *)(v136 + 31) >= 0)
        v120 = v136 + 8;
      else
        v120 = *(_QWORD *)(v136 + 8);
      v121 = *(unsigned __int8 *)(v3 + 64);
      v122 = sub_100026CC8(v136 + 184);
      *(_DWORD *)__p = 136447234;
      *(_QWORD *)&__p[4] = v120;
      *(_WORD *)&__p[12] = 1026;
      *(_DWORD *)&__p[14] = v121;
      *(_WORD *)&__p[18] = 1026;
      *(_DWORD *)&__p[20] = v17;
      *(_WORD *)&__p[24] = 1026;
      *(_DWORD *)&__p[26] = v18;
      *(_WORD *)v144 = 2050;
      *(_QWORD *)&v144[2] = v122;
      LODWORD(v126) = 40;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v119, 1, "TileMgr, %{public}s, locking, %{public}d, lock, %{public}d, unlock, %{public}d, size, %{public}lu", __p, v126);
      v60 = (char *)v123;
      sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke", "%s\n", v123);
      goto LABEL_232;
    }
    while (1)
    {
      v63 = sub_1001C85FC(v61, v62 + 8);
      v64 = (double *)v63;
      if (!v63)
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102197838);
        v69 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_ERROR, "TileMgr, tile ptr is NULL, #CloneMe", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_102197838);
          *(_WORD *)v137 = 0;
          LODWORD(v126) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "TileMgr, tile ptr is NULL, #CloneMe", v137, v126);
          v71 = (char *)v70;
          sub_100512490("Generic", 1, 0, 0, "void CLTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke", "%s\n", v70);
          if (v71 != buf)
            free(v71);
        }
        goto LABEL_141;
      }
      if (sub_1001C94A8(v63))
      {
        if (!sub_100FA7580(v64, *(_QWORD *)(v3 + 48), *(float *)(v136 + 144)))
        {
          if (sub_100FA72C0((uint64_t)v64, *(unsigned __int8 *)(v4 + 200)))
          {
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_102197858);
            v65 = qword_1022A0028;
            if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
            {
              (*(void (**)(_BYTE *__return_ptr, double *))(*(_QWORD *)v64 + 16))(buf, v64);
              v66 = buf;
              if (SBYTE9(v154) < 0)
                v66 = *(_BYTE **)buf;
              *(_DWORD *)v137 = 136315138;
              *(_QWORD *)&v137[4] = v66;
              _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEBUG, "TILE: updateProtectionClass, location moved, locking tileid, %s", v137, 0xCu);
              if (SBYTE9(v154) < 0)
                operator delete(*(void **)buf);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0020 != -1)
                dispatch_once(&qword_1022A0020, &stru_102197858);
              v76 = qword_1022A0028;
              (*(void (**)(_BYTE *__return_ptr, double *))(*(_QWORD *)v64 + 16))(v137, v64);
              v77 = v137;
              if (v138 < 0)
                v77 = *(_BYTE **)v137;
              v139 = 136315138;
              v140 = v77;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v76, 2, "TILE: updateProtectionClass, location moved, locking tileid, %s", (const char *)&v139);
              v79 = v78;
              if (v138 < 0)
                operator delete(*(void **)v137);
              sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke", "%s\n", v79);
              if (v79 != buf)
                free(v79);
            }
            v67 = *(_QWORD *)&__p[8];
            if (*(_QWORD *)&__p[8] >= *(_QWORD *)&__p[16])
            {
              v68 = sub_100496580((uint64_t *)__p, (__int128 *)v62 + 2);
            }
            else
            {
              sub_100495F28((uint64_t)__p, (__int128 *)v62 + 2);
              v68 = v67 + 48;
            }
            *(_QWORD *)&__p[8] = v68;
            goto LABEL_141;
          }
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_102197838);
          v72 = qword_1022A0048;
          if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
          {
            (*(void (**)(_BYTE *__return_ptr, double *))(*(_QWORD *)v64 + 16))(buf, v64);
            v73 = buf;
            if (SBYTE9(v154) < 0)
              v73 = *(_BYTE **)buf;
            *(_DWORD *)v137 = 136315138;
            *(_QWORD *)&v137[4] = v73;
            _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_ERROR, "TileMgr, updateProtectionClass, unable to lock tile, locking tileid, %{pricate}s, #CloneMe", v137, 0xCu);
            if (SBYTE9(v154) < 0)
              operator delete(*(void **)buf);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0040 != -1)
              dispatch_once(&qword_1022A0040, &stru_102197838);
            v80 = qword_1022A0048;
            (*(void (**)(_BYTE *__return_ptr, double *))(*(_QWORD *)v64 + 16))(v137, v64);
            v81 = v137;
            if (v138 < 0)
              v81 = *(_BYTE **)v137;
            v139 = 136315138;
            v140 = v81;
            LODWORD(v126) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v80, 16, "TileMgr, updateProtectionClass, unable to lock tile, locking tileid, %{pricate}s, #CloneMe", &v139, v126);
            v83 = v82;
            if (v138 < 0)
              operator delete(*(void **)v137);
            sub_100512490("Generic", 1, 0, 0, "void CLTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke", "%s\n", v83);
            if (v83 != buf)
              free(v83);
          }
        }
        ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 24);
      }
LABEL_141:
      v74 = (unsigned int *)*((_QWORD *)v62 + 1);
      if (v74)
      {
        do
        {
          v75 = v74;
          v74 = *(unsigned int **)v74;
        }
        while (v74);
      }
      else
      {
        do
        {
          v75 = (unsigned int *)*((_QWORD *)v62 + 2);
          v23 = *(_QWORD *)v75 == (_QWORD)v62;
          v62 = v75;
        }
        while (!v23);
      }
      v62 = v75;
      if (v75 == (unsigned int *)&v141[8])
        goto LABEL_171;
    }
  }
  v47 = a2 + 184;
  sub_1008B97C4(a2 + 184, (uint64_t *)__p);
  v48 = *(unsigned int **)__p;
  if (*(_BYTE **)__p == &__p[8])
  {
    sub_100067A00((uint64_t)__p, **(char ***)__p);
LABEL_165:
    i = &qword_1022A0000;
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v84 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEBUG, "TILE: updateProtectionClass, clearing unprotected map", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102197858);
      *(_WORD *)__p = 0;
      LODWORD(v126) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: updateProtectionClass, clearing unprotected map", __p, v126);
      v125 = (char *)v124;
      sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke", "%s\n", v124);
      if (v125 != buf)
        free(v125);
    }
    sub_1008B982C(v47);
    goto LABEL_183;
  }
  v49 = 1;
  do
  {
    v50 = sub_1001C85FC(v47, v48 + 8);
    v51 = v50;
    if (v50)
    {
      v52 = sub_1001C94A8(v50);
      if ((v52 & v49) == 1)
        v49 = sub_100FA72C0(v51, *(unsigned __int8 *)(v4 + 200));
      else
        v49 &= !v52;
    }
    else
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102197838);
      v53 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_ERROR, "TileMgr, tile ptr is NULL, #CloneMe", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102197838);
        *(_WORD *)v141 = 0;
        LODWORD(v126) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "TileMgr, tile ptr is NULL, #CloneMe", v141, v126);
        v55 = (char *)v54;
        sub_100512490("Generic", 1, 0, 0, "void CLTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke", "%s\n", v54);
        if (v55 != buf)
          free(v55);
      }
    }
    v56 = (unsigned int *)*((_QWORD *)v48 + 1);
    if (v56)
    {
      do
      {
        v57 = v56;
        v56 = *(unsigned int **)v56;
      }
      while (v56);
    }
    else
    {
      do
      {
        v57 = (unsigned int *)*((_QWORD *)v48 + 2);
        v23 = *(_QWORD *)v57 == (_QWORD)v48;
        v48 = v57;
      }
      while (!v23);
    }
    v48 = v57;
  }
  while (v57 != (unsigned int *)&__p[8]);
  sub_100067A00((uint64_t)__p, *(char **)&__p[8]);
  if ((v49 & 1) != 0)
    goto LABEL_165;
  i = &qword_1022A0000;
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102197838);
  v58 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_ERROR, "TileMgr, Unable to lock all unprotected files!, #CloneMe", buf, 2u);
  }
  if (!sub_1001BFF7C(115, 0))
    goto LABEL_183;
  bzero(buf, 0x65CuLL);
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102197838);
  *(_WORD *)__p = 0;
  LODWORD(v126) = 2;
  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "TileMgr, Unable to lock all unprotected files!, #CloneMe", __p, v126);
  v60 = (char *)v59;
  sub_100512490("Generic", 1, 0, 0, "void CLTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke", "%s\n", v59);
LABEL_232:
  if (v60 != buf)
    free(v60);
LABEL_183:
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102197858);
  v91 = i[5];
  if (os_log_type_enabled(v91, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(v136 + 31) >= 0)
      v92 = v136 + 8;
    else
      v92 = *(_QWORD *)(v136 + 8);
    v93 = sub_100026CC8(v136 + 184);
    v94 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 24);
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v92;
    v153 = 2048;
    *(_QWORD *)&v154 = v93;
    WORD4(v154) = 1024;
    *(_DWORD *)((char *)&v154 + 10) = v94;
    _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_DEBUG, "TILE: updateProtectionClass, end, %s, total, %lu, numOfUnProtectedTiles, %d", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v107 = i[5];
    if (*(char *)(v136 + 31) >= 0)
      v108 = v136 + 8;
    else
      v108 = *(_QWORD *)(v136 + 8);
    v109 = sub_100026CC8(v136 + 184);
    v110 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 24);
    *(_DWORD *)__p = 136315650;
    *(_QWORD *)&__p[4] = v108;
    *(_WORD *)&__p[12] = 2048;
    *(_QWORD *)&__p[14] = v109;
    *(_WORD *)&__p[22] = 1024;
    *(_DWORD *)&__p[24] = v110;
    LODWORD(v126) = 28;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v107, 2, "TILE: updateProtectionClass, end, %s, total, %lu, numOfUnProtectedTiles, %d", __p, v126, v127);
    v112 = (char *)v111;
    sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke", "%s\n", v111);
    if (v112 != buf)
      free(v112);
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102197838);
  v95 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
  {
    if (*(char *)(v136 + 31) >= 0)
      v96 = v136 + 8;
    else
      v96 = *(_QWORD *)(v136 + 8);
    v97 = *(unsigned __int8 *)(v3 + 64);
    v98 = sub_100026CC8(v136 + 184);
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = v96;
    v153 = 1026;
    LODWORD(v154) = v97;
    WORD2(v154) = 2050;
    *(_QWORD *)((char *)&v154 + 6) = v98;
    _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_INFO, "@TileEvent, %{public}s, locking, %{public}d, readable, %{public}lu\n", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197838);
    v113 = qword_1022A0048;
    if (*(char *)(v136 + 31) >= 0)
      v114 = v136 + 8;
    else
      v114 = *(_QWORD *)(v136 + 8);
    v115 = *(unsigned __int8 *)(v3 + 64);
    v116 = sub_100026CC8(v136 + 184);
    *(_DWORD *)__p = 136446722;
    *(_QWORD *)&__p[4] = v114;
    *(_WORD *)&__p[12] = 1026;
    *(_DWORD *)&__p[14] = v115;
    *(_WORD *)&__p[18] = 2050;
    *(_QWORD *)&__p[20] = v116;
    LODWORD(v126) = 28;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v113, 1, "@TileEvent, %{public}s, locking, %{public}d, readable, %{public}lu\n", __p, v126);
    v118 = (char *)v117;
    sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke", "%s\n", v117);
    if (v118 != buf)
      free(v118);
  }
}

void sub_100FBE540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,char *a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void **p_p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  sub_100067A00((uint64_t)&a27, a28);
  p_p = &__p;
  sub_100495E10(&p_p);
  _Unwind_Resume(a1);
}

void sub_100FBE5E0(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  NSObject *v12;
  _BYTE *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  void **v17;
  char *v18;
  char *v19;
  double v20;
  double v21;
  void *v22[2];
  char v23;
  _BYTE __p[12];
  __int16 v25;
  double v26;
  __int16 v27;
  double v28;
  __int16 v29;
  void **v30;
  uint8_t buf[4];
  uint64_t v32;
  __int16 v33;
  double v34;
  __int16 v35;
  double v36;
  __int16 v37;
  _BYTE *v38;

  if (*(_QWORD *)(a1 + 240))
  {
    if (*(double *)(a1 + 268) >= 0.0)
    {
      v7 = vabdd_f64((*(double (**)(_QWORD))(**(_QWORD **)(a1 + 464) + 56))(*(_QWORD *)(a1 + 464)), *(double *)(a1 + 324));
      v8 = *(double *)(a1 + 232);
      v9 = v8 - v7 + 20.0;
      v10 = v8 * 0.170000002;
      if (v9 > v10)
        v11 = v9;
      else
        v11 = v10;
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102197858);
      v12 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        sub_100071A00(a1 + 248, __p);
        v13 = v27 >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 136315906;
        v32 = a2;
        v33 = 2048;
        v34 = v7;
        v35 = 2048;
        v36 = v11;
        v37 = 2080;
        v38 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "TILE: scheduleExpiredLocationTimer, reason, %s, locationAge, %.1lf, secondsFromNow, %.1lf, lastKnownLocation, %s", buf, 0x2Au);
        if (SHIBYTE(v27) < 0)
          operator delete(*(void **)__p);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102197858);
        v16 = qword_1022A0028;
        sub_100071A00(a1 + 248, v22);
        if (v23 >= 0)
          v17 = v22;
        else
          v17 = (void **)v22[0];
        *(_DWORD *)__p = 136315906;
        *(_QWORD *)&__p[4] = a2;
        v25 = 2048;
        v26 = v7;
        v27 = 2048;
        v28 = v11;
        v29 = 2080;
        v30 = v17;
        LODWORD(v20) = 42;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 2, "TILE: scheduleExpiredLocationTimer, reason, %s, locationAge, %.1lf, secondsFromNow, %.1lf, lastKnownLocation, %s", __p, v20, v21, (const char *)v22[0]);
        v19 = v18;
        if (v23 < 0)
          operator delete(v22[0]);
        sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::scheduleExpiredLocationTimer(const char *)", "%s\n", v19);
        if (v19 != (char *)buf)
          free(v19);
      }
      v14 = *(_QWORD *)(a1 + 240);
      v15 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 464) + 56))(*(_QWORD *)(a1 + 464));
      sub_1001F40D0(v14, v11 + v15);
    }
    else
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102197858);
      v3 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "TILE: scheduleExpiredLocationTimer, no valid location", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102197858);
        *(_WORD *)__p = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: scheduleExpiredLocationTimer, no valid location", __p, 2);
        v5 = (uint8_t *)v4;
        sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::scheduleExpiredLocationTimer(const char *)", "%s\n", v4);
        if (v5 != buf)
          free(v5);
      }
    }
  }
}

void sub_100FBE9EC(uint64_t a1)
{
  NSObject *v2;
  int v3;
  NSObject *v4;
  int v5;
  const char *v6;
  uint8_t *v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102197858);
  v2 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(unsigned __int8 *)(a1 + 200);
    *(_DWORD *)buf = 67109120;
    v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "TILE: onExpiredLocationTimerFired, isLocked, %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v5 = *(unsigned __int8 *)(a1 + 200);
    v10[0] = 67109120;
    v10[1] = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: onExpiredLocationTimerFired, isLocked, %d", v10);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::onExpiredLocationTimerFired()", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  if (*(_BYTE *)(a1 + 200))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v4 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "TILE: onExpiredLocationTimerFired", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102197858);
      LOWORD(v10[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: onExpiredLocationTimerFired", v10, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::onExpiredLocationTimerFired()", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    if (*(_BYTE *)(a1 + 200))
      sub_100FB2CFC(a1, (uint64_t)"onExpiredLocationTimerFired", a1 + 248, 0);
  }
}

void sub_100FBECEC(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102197858);
  v4 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "TILE: onPCTimerFired", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: onPCTimerFired", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::onPCTimerFired(CLPersistentTimer *)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  if (*(_QWORD *)(a1 + 240) == a2)
    sub_100FBE9EC(a1);
}

void sub_100FBEE94(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  double v7;
  int v8;
  NSObject *v9;
  int v10;
  int v11;
  const char *v12;
  uint8_t *v13;
  _DWORD v14[4];
  uint8_t buf[4];
  int v16;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 464) + 56))(*(_QWORD *)(a1 + 464));
  if (*a3 == 6)
  {
    v8 = *(_DWORD *)(a4 + 4);
    *(_DWORD *)(a1 + 424) = v8;
    if (v8 >= 1)
      sub_100168EA8(a1, v7);
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197838);
    v9 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      v10 = *a3;
      *(_DWORD *)buf = 67240192;
      v16 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "TileMgr, onStatusNotification, unknown notification, %{public}d, #CloneMe", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102197838);
      v11 = *a3;
      v14[0] = 67240192;
      v14[1] = v11;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "TileMgr, onStatusNotification, unknown notification, %{public}d, #CloneMe", v14, 8);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 0, "void CLTilesManager::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
  }
}

uint64_t sub_100FBF0AC(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102197858);
  v2 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "TILE: CLTilesManager::shutdown", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: CLTilesManager::shutdown", v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLTilesManager::shutdown()", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  if (a1[30])
  {
    sub_100FB30D4((uint64_t)a1);
    v3 = a1[30];
    if (v3)
    {
      sub_1009865B8(v3);
      operator delete();
    }
    a1[30] = 0;
  }
  sub_100FB3A08((uint64_t)a1);
  v4 = a1[24];
  a1[24] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  result = a1[20];
  a1[20] = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_100FBF2A8(id a1, void *a2)
{
  *((_QWORD *)a2 + 36) = 0;
}

_QWORD *sub_100FBF2B0@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "https://cl3.apple.com/3/v2");
}

_QWORD *sub_100FBF2C0@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "https://cl3.apple.com/2/v1");
}

uint64_t sub_100FBF2D0@<X0>(unsigned __int16 *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD v32[2];
  uint64_t v33;
  _QWORD v34[10];
  char v35;
  uint64_t v36;

  sub_100263E50((uint64_t)v32);
  v4 = sub_100263F7C(&v33, (uint64_t)"", 0);
  v5 = sub_100263F7C(v4, (uint64_t)"sw_cor, ", 8);
  v6 = (_QWORD *)std::ostream::operator<<(v5, *a1);
  v7 = sub_100263F7C(v6, (uint64_t)", ", 2);
  v8 = (_QWORD *)std::ostream::operator<<(v7, a1[1]);
  v9 = sub_100263F7C(v8, (uint64_t)", adamId, ", 10);
  v10 = (_QWORD *)std::ostream::operator<<(v9, *((unsigned int *)a1 + 1));
  v11 = sub_100263F7C(v10, (uint64_t)", radiusIns, ", 13);
  v12 = (_QWORD *)std::ostream::operator<<(v11, *((unsigned __int8 *)a1 + 8));
  v13 = sub_100263F7C(v12, (uint64_t)", rankIns, ", 11);
  v14 = (_QWORD *)std::ostream::operator<<(v13, *((unsigned __int8 *)a1 + 9) >> 4);
  v15 = sub_100263F7C(v14, (uint64_t)", rankUnIns, ", 13);
  v16 = (_QWORD *)std::ostream::operator<<(v15, *((_BYTE *)a1 + 9) & 0xF);
  v17 = sub_100263F7C(v16, (uint64_t)", age, ", 7);
  v18 = (_QWORD *)std::ostream::operator<<(v17, a1[5] & 1);
  v19 = sub_100263F7C(v18, (uint64_t)", ", 2);
  v20 = (_QWORD *)std::ostream::operator<<(v19, (a1[5] >> 1) & 1);
  v21 = sub_100263F7C(v20, (uint64_t)", ", 2);
  v22 = (_QWORD *)std::ostream::operator<<(v21, (a1[5] >> 2) & 1);
  v23 = sub_100263F7C(v22, (uint64_t)", ", 2);
  v24 = (_QWORD *)std::ostream::operator<<(v23, (a1[5] >> 3) & 1);
  v25 = sub_100263F7C(v24, (uint64_t)", touristApp, ", 14);
  v26 = (_QWORD *)std::ostream::operator<<(v25, (a1[5] >> 4) & 1);
  v27 = sub_100263F7C(v26, (uint64_t)", marqueeApp, ", 14);
  v28 = sub_100CD5A80((uint64_t)a1);
  v29 = (_QWORD *)std::ostream::operator<<(v27, v28);
  sub_100263F7C(v29, (uint64_t)"", 0);
  std::stringbuf::str(a2, v34);
  *(_QWORD *)((char *)v32
  v33 = v30;
  if (v35 < 0)
    operator delete((void *)v34[8]);
  std::streambuf::~streambuf(v34);
  return std::ios::~ios(&v36);
}

void sub_100FBF4EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100FBF500()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_102309580);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_102309580))
  {
    qword_102309568 = 0;
    unk_102309570 = 0;
    qword_102309578 = 0;
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102309568, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102309580);
  }
  if (qword_102309588 != -1)
    dispatch_once(&qword_102309588, &stru_1021976F0);
  return &qword_102309568;
}

void sub_100FBF594(uint64_t a1)
{
  uint64_t v2;
  int v3;
  std::string::size_type size;
  std::string *p_str;
  std::string::size_type v6;
  const void *v7;
  size_t v8;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint8_t *v14;
  std::string __str;
  int v16;
  uint64_t v17;
  uint8_t buf[4];
  uint64_t v19;

  v2 = sub_1001CDA64(a1, 9u);
  sub_100FB1878(a1, (std::string::size_type)&__str);
  v3 = *(char *)(v2 + 79);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  else
    size = __str.__r_.__value_.__l.__size_;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_str = &__str;
  else
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  if (v3 >= 0)
    v6 = *(unsigned __int8 *)(v2 + 79);
  else
    v6 = *(_QWORD *)(v2 + 64);
  if (v3 >= 0)
    v7 = (const void *)(v2 + 56);
  else
    v7 = *(const void **)(v2 + 56);
  if (v6 >= size)
    v8 = size;
  else
    v8 = v6;
  if (memcmp(p_str, v7, v8) || v6 != size)
  {
    std::string::operator=((std::string *)(v2 + 56), &__str);
    sub_100FB3D18(a1, 1, 9u);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v10 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      if (*(char *)(v2 + 79) >= 0)
        v11 = v2 + 56;
      else
        v11 = *(_QWORD *)(v2 + 56);
      *(_DWORD *)buf = 136315138;
      v19 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "TILE: onStoreFrontDidChangeNotification, new fServerUrl, %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102197858);
      if (*(char *)(v2 + 79) >= 0)
        v12 = v2 + 56;
      else
        v12 = *(_QWORD *)(v2 + 56);
      v16 = 136315138;
      v17 = v12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: onStoreFrontDidChangeNotification, new fServerUrl, %s", (const char *)&v16);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::storeFrontDidChange()", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_100FBF7F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100FBF820(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  _QWORD *v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int v18;
  int v19;
  _QWORD *v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  int v31;
  int v32;
  void *__p[2];
  _BYTE v35[25];
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;

  v2 = atomic_load((unsigned __int8 *)&qword_102309498);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_102309498))
  {
    sub_100FB8498("([0-9]{8})", (const void **)&unk_102309420, __p);
    sub_100F8F6B0((std::locale *)&unk_102309458, (uint64_t)__p, 0);
  }
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  *(_OWORD *)__p = 0u;
  memset(v35, 0, sizeof(v35));
  v3 = *(unsigned __int8 *)(a1 + 23);
  if ((v3 & 0x80u) == 0)
    v4 = a1;
  else
    v4 = *(_QWORD *)a1;
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a1 + 8);
  if ((sub_100F95128(v4, v4 + v3, (uint64_t)__p, (uint64_t)&unk_102309458, 0) & 1) != 0)
  {
    v5 = 0;
    v6 = 1;
  }
  else
  {
    v7 = sub_100FBFA90();
    v8 = *(char *)(a1 + 23);
    v9 = v8 < 0;
    if (v8 >= 0)
      v10 = a1;
    else
      v10 = *(_QWORD *)a1;
    v11 = *(unsigned __int8 *)(a1 + 23);
    if (v9)
      v11 = *(_QWORD *)(a1 + 8);
    v12 = *((char *)v7 + 23);
    v13 = v12 < 0;
    if (v12 >= 0)
      v14 = v7;
    else
      v14 = (_QWORD *)*v7;
    v15 = *((unsigned __int8 *)v7 + 23);
    if (v13)
      v15 = v7[1];
    v16 = v10 - 1;
    v17 = (char *)v14 - 1;
    while (v11 && v15)
    {
      v18 = *(unsigned __int8 *)(v16 + v11);
      v19 = v17[v15];
      --v11;
      --v15;
      if (v18 != v19)
        goto LABEL_25;
    }
    if (!v15)
    {
LABEL_42:
      v6 = 0;
      v5 = 0;
      goto LABEL_43;
    }
LABEL_25:
    v20 = sub_100FA2F60();
    v21 = *(char *)(a1 + 23);
    v22 = v21 < 0;
    if (v21 >= 0)
      v23 = a1;
    else
      v23 = *(_QWORD *)a1;
    v24 = *(unsigned __int8 *)(a1 + 23);
    if (v22)
      v24 = *(_QWORD *)(a1 + 8);
    v25 = *((char *)v20 + 23);
    v26 = v25 < 0;
    if (v25 >= 0)
      v27 = v20;
    else
      v27 = (_QWORD *)*v20;
    v28 = *((unsigned __int8 *)v20 + 23);
    if (v26)
      v28 = v20[1];
    v29 = v23 - 1;
    v30 = (char *)v27 - 1;
    while (v24 && v28)
    {
      v31 = *(unsigned __int8 *)(v29 + v24);
      v32 = v30[v28];
      --v24;
      --v28;
      if (v31 != v32)
        goto LABEL_41;
    }
    if (!v28)
      goto LABEL_42;
LABEL_41:
    v6 = 0;
    v5 = 1;
  }
LABEL_43:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v6 | (v5 << 8);
}

void sub_100FBFA20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_102309498);
  _Unwind_Resume(a1);
}

void sub_100FBFA68(std::locale *a1)
{
  sub_100261F44((uint64_t)&a1[5]);
  std::locale::~locale(a1);
}

_QWORD *sub_100FBFA90()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1022FC6F0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1022FC6F0))
  {
    sub_1015A2E04(qword_1022FC6D8, ".ignore");
    __cxa_atexit((void (*)(void *))&std::string::~string, qword_1022FC6D8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1022FC6F0);
  }
  return qword_1022FC6D8;
}

void sub_100FBFB10(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022FC6F0);
  _Unwind_Resume(a1);
}

void sub_100FBFB28(id a1)
{
  std::string *p_p;
  std::string __p;

  sub_100584F4C(0, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  std::string::assign((std::string *)&qword_1023094A0, -[NSString UTF8String](-[NSString stringByAppendingPathComponent:](+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_p), "stringByAppendingPathComponent:", CFSTR("adsf")), "UTF8String"));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_100FBFBA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100FBFBC4(id a1)
{
  std::string::assign((std::string *)&xmmword_1023094C8, "https://cl3.apple.com/3/v2");
}

void sub_100FBFBD8(id a1)
{
  std::string *p_p;
  std::string __p;

  sub_100584F4C(0, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  std::string::assign((std::string *)&qword_1023094F0, -[NSString UTF8String](-[NSString stringByAppendingPathComponent:](+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_p), "stringByAppendingPathComponent:", CFSTR("tiles_hrse")), "UTF8String"));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_100FBFC58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100FBFC74(id a1)
{
  std::string::assign((std::string *)&xmmword_102309518, "https://cl3.apple.com/2/v1");
}

void sub_100FBFC88(id a1)
{
  std::string *p_p;
  std::string __p;

  sub_100584F4C(0, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  std::string::assign((std::string *)&qword_102309540, -[NSString UTF8String](-[NSString stringByAppendingPathComponent:](+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_p), "stringByAppendingPathComponent:", CFSTR("tiles_app_v2")), "UTF8String"));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_100FBFD08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100FBFD24(id a1)
{
  std::string::assign((std::string *)&qword_102309568, "https://cl5.apple.com/");
}

void sub_100FBFD38(id a1)
{
  std::string *p_p;
  std::string __p;

  sub_100584F4C(0, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  std::string::assign((std::string *)&qword_102309590, -[NSString UTF8String](-[NSString stringByAppendingPathComponent:](+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_p), "stringByAppendingPathComponent:", CFSTR("tiles_preload_manifest")), "UTF8String"));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_100FBFDB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100FBFDD4(id a1)
{
  std::string::assign((std::string *)&xmmword_1023095B8, "https://cl2.apple.com/9/v2");
}

void sub_100FBFDE8(id a1)
{
  std::string *p_p;
  std::string __p;

  sub_100584F4C(0, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  std::string::assign((std::string *)&qword_1023095E0, -[NSString UTF8String](-[NSString stringByAppendingPathComponent:](+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_p), "stringByAppendingPathComponent:", CFSTR("tiles_transit_mac")), "UTF8String"));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_100FBFE68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100FBFE84(id a1)
{
  std::string::assign((std::string *)&xmmword_102309608, "https://corelocation.s3.amazonaws.com/tr/v1");
}

void sub_100FBFE98()
{
  operator new();
}

void sub_100FBFF44(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

uint64_t sub_100FBFF80(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  id v13;
  id v14;

  *(_QWORD *)a1 = &off_102197A18;
  *(_QWORD *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]([CLNotifierClientAdapter alloc], "initWithClient:", a1);
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0)
    v12 = a3;
  else
    v12 = (uint64_t *)*a3;
  v13 = objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(_QWORD *)(a1 + 16) = v13;
  v14 = v13;
  if (a2)
    objc_msgSend(*(id *)(a1 + 16), "setDelegateEntityName:", a2);
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

void sub_100FC0054(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102197818);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_102197818);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLTilesManager_Type::Notification, NotificationData_T = CLTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

uint64_t sub_100FC02C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022FC6F8);
}

BOOL sub_100FC02DC(uint64_t a1, int a2, int *a3, char *a4)
{
  _BOOL8 result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _DWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  uint64_t *v28;
  char v29;
  uint64_t **v30;
  char v31;
  uint64_t **v32;
  uint64_t v33;
  char v34;
  _QWORD *v35;
  const char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  _BYTE v41[12];
  __int16 v42;
  int v43;
  _DWORD *buf[205];

  v40 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      v39 = v10;
      v16 = *a3;
      v19 = *(_QWORD *)(v10 + 48);
      v18 = v10 + 48;
      v17 = v19;
      if (!v19)
        goto LABEL_31;
      v20 = v18;
      do
      {
        v21 = *(_DWORD *)(v17 + 28);
        v22 = v21 < v16;
        if (v21 >= v16)
          v23 = (uint64_t *)v17;
        else
          v23 = (uint64_t *)(v17 + 8);
        if (!v22)
          v20 = v17;
        v17 = *v23;
      }
      while (*v23);
      if (v20 == v18 || v16 < *(_DWORD *)(v20 + 28))
LABEL_31:
        v20 = v18;
      v24 = *(_QWORD *)(a1 + 64);
      if (!v24)
        goto LABEL_42;
      v25 = a1 + 64;
      do
      {
        v26 = *(_DWORD *)(v24 + 32);
        v27 = v26 < v16;
        if (v26 >= v16)
          v28 = (uint64_t *)v24;
        else
          v28 = (uint64_t *)(v24 + 8);
        if (!v27)
          v25 = v24;
        v24 = *v28;
      }
      while (*v28);
      if (v25 != a1 + 64 && v16 >= *(_DWORD *)(v25 + 32))
      {
        *(_QWORD *)v41 = v25;
        v33 = *(_QWORD *)(v25 + 56);
        v34 = *a4;
        buf[0] = &v40;
        *((_BYTE *)sub_1001AFE94((uint64_t **)(v25 + 40), &v40, (uint64_t)&unk_101B9EB60, buf) + 32) = v34;
        LOBYTE(buf[0]) = 0;
        *(_OWORD *)((char *)buf + 4) = 0u;
        memset((char *)&buf[2] + 4, 0, 32);
        memset((char *)&buf[6] + 4, 0, 28);
        if (v20 == v18
          && (*(unsigned int (**)(uint64_t, int *, _DWORD **))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_100FC2D50();
        }
        if (SHIBYTE(buf[9]) < 0)
          operator delete(buf[7]);
        if (SHIBYTE(buf[6]) < 0)
          operator delete(buf[4]);
        if (SHIBYTE(buf[3]) < 0)
          operator delete(buf[1]);
        if (v33)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        *(_QWORD *)v41 = a1 + 64;
        v29 = byte_1022FC6F9;
        HIDWORD(v38) = v16;
        buf[0] = (_DWORD *)&v38 + 1;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, buf) + 80) = v29;
        HIDWORD(v38) = *a3;
        buf[0] = (_DWORD *)&v38 + 1;
        v30 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, buf);
        sub_100346F9C(v30 + 8);
        v31 = *a4;
        HIDWORD(v38) = *a3;
        buf[0] = (_DWORD *)&v38 + 1;
        v32 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, buf);
        buf[0] = &v40;
        *((_BYTE *)sub_1001AFE94(v32 + 5, &v40, (uint64_t)&unk_101B9EB60, buf) + 32) = v31;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v20 == v18)
      {
        LODWORD(buf[0]) = *a3;
        sub_1000C6190((uint64_t **)(v39 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102197818);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_DWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = *(_DWORD **)v15;
    LODWORD(buf[0]) = 136446466;
    *(_DWORD **)((char *)buf + 4) = v15;
    WORD2(buf[1]) = 1026;
    *(_DWORD *)((char *)&buf[1] + 6) = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      (uint8_t *)buf,
      0x12u);
  }
  result = sub_1001BFF7C(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102197818);
    v35 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v35 = (_QWORD *)*v35;
    *(_DWORD *)v41 = 136446466;
    *(_QWORD *)&v41[4] = v35;
    v42 = 1026;
    v43 = a2;
    LODWORD(v38) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
      v41,
      v38);
    v37 = (char *)v36;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLTilesManager_Type::Notification, NotificationData_T = CLTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v36);
    if (v37 != (char *)buf)
      free(v37);
    return 0;
  }
  return result;
}

void sub_100FC0788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100C0FC30((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100FC07A8(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102197818);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102197818);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLTilesManager_Type::Notification, NotificationData_T = CLTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

BOOL sub_100FC0A28(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE buf[12];
  __int16 v36;
  void **v37;
  char v38;
  int v39;
  _QWORD *v40;
  __int16 v41;
  _BYTE *v42;
  void *__p[2];
  char v44;

  HIDWORD(v34) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009E904((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102197818);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v44 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v36 = 2082;
                v37 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_102197818);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v38 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v39 = 136446466;
                v40 = v29;
                v41 = 2082;
                v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                v33 = v32;
                if (v38 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLTilesManager_Type::Notification, NotificationData_T = CLTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v33);
                if (v33 != (char *)__p)
                  free(v33);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_100FC0DB0(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;

  v5 = *(_QWORD *)(a1 + 64);
  v3 = a1 + 64;
  v4 = v5;
  if (!v5)
    return 0;
  v7 = *a2;
  v8 = v3;
  do
  {
    v9 = *(_DWORD *)(v4 + 32);
    v10 = v9 < v7;
    if (v9 >= v7)
      v11 = (uint64_t *)v4;
    else
      v11 = (uint64_t *)(v4 + 8);
    if (!v10)
      v8 = v4;
    v4 = *v11;
  }
  while (*v11);
  if (v8 == v3)
    return 0;
  if (v7 < *(_DWORD *)(v8 + 32))
    return 0;
  v12 = *(_QWORD *)(v8 + 64);
  if (!v12)
    return 0;
  *(_QWORD *)a3 = *(_QWORD *)v12;
  std::string::operator=((std::string *)(a3 + 8), (const std::string *)(v12 + 8));
  std::string::operator=((std::string *)(a3 + 32), (const std::string *)(v12 + 32));
  std::string::operator=((std::string *)(a3 + 56), (const std::string *)(v12 + 56));
  return 1;
}

uint64_t sub_100FC0E5C(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t **v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  int v10;
  __int128 v11;
  int *v12;

  sub_100FC234C(a3, &v11);
  v10 = *a2;
  v12 = &v10;
  v5 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v10, (uint64_t)&unk_101B9EB60, &v12);
  sub_1002B7674((uint64_t)(v5 + 8), &v11);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return 1;
}

void sub_100FC0F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100FC0F1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BYTE v4[4];
  void *v5[2];
  _BYTE v6[60];

  v4[0] = 0;
  *(_OWORD *)v5 = 0u;
  memset(v6, 0, sizeof(v6));
  (*(void (**)(uint64_t, uint64_t, _BYTE *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, a2, v4, a3, a4, 0);
  if ((v6[59] & 0x80000000) != 0)
    operator delete(*(void **)&v6[36]);
  if ((v6[35] & 0x80000000) != 0)
    operator delete(*(void **)&v6[12]);
  if ((v6[11] & 0x80000000) != 0)
    operator delete(*(void **)((char *)v5 + 4));
}

void sub_100FC0FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100C0FC30((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100FC0FB8(uint64_t a1, signed __int32 *a2, uint64_t a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  os_activity_scope_state_s state;
  uint64_t buf;
  _BYTE v29[20];
  __int16 v30;
  _QWORD *v31;
  __int16 v32;
  std::__shared_weak_count *v33;
  _QWORD **v34;
  _QWORD *v35[3];
  std::__shared_weak_count *v36;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102197818);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      buf = 68289794;
      *(_WORD *)v29 = 2082;
      *(_QWORD *)&v29[2] = "";
      *(_WORD *)&v29[10] = 2082;
      *(_QWORD *)&v29[12] = "activity";
      v30 = 2082;
      v31 = v10;
      v32 = 2050;
      v33 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", (uint8_t *)&buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v34 = v35;
      memset(v35, 0, sizeof(v35));
      v36 = 0;
      sub_1004A6D60((uint64_t)&buf, a2, (uint64_t)&v34);
      v14 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)&buf);
      v18 = v33;
      if (v33)
      {
        p_shared_owners = (unint64_t *)&v33->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v29, *(_QWORD **)&v29[8]);
      v21 = v36;
      if (v36)
      {
        v22 = (unint64_t *)&v36->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v34, v35[0]);
    }
    if (a4)
    {
      sub_100FC234C(a3, &buf);
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)&buf);
      v24 = *(std::__shared_weak_count **)v29;
      if (*(_QWORD *)v29)
      {
        v25 = (unint64_t *)(*(_QWORD *)v29 + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_100FC1D1C();
    os_activity_scope_leave(&state);
  }
}

void sub_100FC15D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_100FC1620(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102197818);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102197818);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::listClients() [Notification_T = CLTilesManager_Type::Notification, NotificationData_T = CLTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102197818);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102197818);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::listClients() [Notification_T = CLTilesManager_Type::Notification, NotificationData_T = CLTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_102197818);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102197818);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::listClients() [Notification_T = CLTilesManager_Type::Notification, NotificationData_T = CLTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_100FC1BD0(uint64_t a1)
{
  sub_100FC2CF0(a1);
  operator delete();
}

id sub_100FC1BF4(uint64_t a1, uint64_t a2, void *a3)
{
  int v3;
  id result;
  int v6;

  v3 = a2;
  result = sub_100FC25D4(a3, a2);
  if (result)
  {
    v6 = v3;
    return (id)(*(uint64_t (**)(_QWORD, int *, id, _QWORD))(a1 + 24))(0, &v6, result, *(_QWORD *)(a1 + 32));
  }
  return result;
}

void sub_100FC1C40(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100FC1C6C(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_100FC1C98(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_100FC1CC4(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_100FC1CF0(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_100FC1D1C()
{
  operator new();
}

void sub_100FC1E44()
{
  uint64_t v0;
  void **v1;
  void **v2;

  if (*(char *)(v0 + 55) < 0)
    operator delete(*v2);
  if (*(char *)(v0 + 31) < 0)
    operator delete(*v1);
  operator delete();
}

void sub_100FC1E98(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  id v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  const char *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  __int16 v54;
  int v55;
  uint8_t buf[4];
  _QWORD *v57;
  __int16 v58;
  int v59;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v51 = v9;
        v13 = sub_100FC25D4(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, id, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 7);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v50 = v19;
              sub_100FC2270(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v51 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 28);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 28);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v50 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102197818);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                v57 = v25;
                v58 = 1026;
                v59 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_102197818);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 7);
                v52 = 136446466;
                v53 = v45;
                v54 = 1026;
                v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                v48 = (uint8_t *)v47;
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLTilesManager_Type::Notification, NotificationData_T = CLTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v48 != buf)
                  free(v48);
              }
            }
          }
          while (v14 != v51 + 6);
        }
      }
    }
  }
}

_BYTE *sub_100FC2270(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  int *v14;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    v9 = sub_100FC25D4(a4, a2);
    v10 = *(_QWORD *)a3 + 80;
    v11 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v14 = (int *)(*(_QWORD *)a2 + 32);
    v12 = sub_1001AFE94(v11, v14, (uint64_t)&unk_101B9EB60, &v14);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v13);
  }
  return result;
}

_QWORD *sub_100FC234C@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x68uLL);
  result = sub_100FC23A4(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100FC2390(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100FC23A4(_QWORD *a1, uint64_t a2)
{
  char v4;

  a1[2] = 0;
  *a1 = off_1021979A8;
  a1[1] = 0;
  sub_100FC2474((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_100FC23F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100FC2404(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021979A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100FC2418(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021979A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_100FC244C(uint64_t a1)
{
  char v1;

  sub_100C13204((uint64_t)&v1, a1 + 24);
}

_BYTE *sub_100FC2474(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v5;
  __int128 v6;
  __int128 v7;
  _BYTE *result;
  __int128 v9;

  *(_QWORD *)a2 = *(_QWORD *)a3;
  v5 = (_BYTE *)(a2 + 8);
  if (*(char *)(a3 + 31) < 0)
  {
    sub_100115CE4(v5, *(void **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
    *(_OWORD *)v5 = v6;
  }
  if (*(char *)(a3 + 55) < 0)
  {
    sub_100115CE4((_BYTE *)(a2 + 32), *(void **)(a3 + 32), *(_QWORD *)(a3 + 40));
  }
  else
  {
    v7 = *(_OWORD *)(a3 + 32);
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(a3 + 48);
    *(_OWORD *)(a2 + 32) = v7;
  }
  result = (_BYTE *)(a2 + 56);
  if (*(char *)(a3 + 79) < 0)
    return sub_100115CE4(result, *(void **)(a3 + 56), *(_QWORD *)(a3 + 64));
  v9 = *(_OWORD *)(a3 + 56);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a3 + 72);
  *(_OWORD *)result = v9;
  return result;
}

void sub_100FC2530(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;
  void **v3;

  if (*(char *)(v2 + 55) < 0)
    operator delete(*v3);
  if (*(char *)(v2 + 31) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100FC2564(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
  {
    if (*(char *)(v1 + 79) < 0)
      operator delete(*(void **)(v1 + 56));
    if (*(char *)(v1 + 55) < 0)
      operator delete(*(void **)(v1 + 32));
    if (*(char *)(v1 + 31) < 0)
      operator delete(*(void **)(v1 + 8));
    operator delete();
  }
  return result;
}

id sub_100FC25D4(void *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = objc_opt_class(CLCppContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_100FC2620(a1);
  else
    return 0;
}

id sub_100FC2620(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021979E8);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C3286DLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021979E8);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021979E8);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C3286DLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021979E8);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLTilesManager_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

void sub_100FC29CC(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_100FC29F8(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_100FC29F8(a1, *a2);
    sub_100FC29F8(a1, a2[1]);
    sub_1000F34E0(a2 + 5);
    operator delete(a2);
  }
}

uint64_t *sub_100FC2A40(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD v14[2];
  char v15;

  v7 = a1 + 1;
  v6 = a1[1];
  v8 = a1 + 1;
  v9 = a1 + 1;
  if (v6)
  {
    v10 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v11 = v6[4];
        if (v10 >= v11)
          break;
        v6 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v11 >= v10)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v12 = (uint64_t *)operator new(0x40uLL);
    v14[1] = v7;
    v12[4] = **a4;
    v12[5] = (uint64_t)(v12 + 5);
    v12[6] = (uint64_t)(v12 + 5);
    v12[7] = 0;
    v15 = 1;
    sub_1000145B0(a1, (uint64_t)v9, v8, v12);
    v14[0] = 0;
    sub_100FC2B28((uint64_t)v14, 0);
    return v12;
  }
  return (uint64_t *)v9;
}

void sub_100FC2B28(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_1000F34E0(v2 + 5);
    operator delete(v2);
  }
}

uint64_t sub_100FC2B6C(uint64_t *a1, _QWORD *a2)
{
  sub_1000F34E0(a1);
  return sub_100FC2BA4((uint64_t)a1, a1, a2);
}

uint64_t sub_100FC2BA4(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a3[2];
  if (v3)
  {
    v5 = *a3;
    v4 = (uint64_t *)a3[1];
    v6 = *v4;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(*a3 + 8);
    **(_QWORD **)(v5 + 8) = v6;
    v7 = *a2;
    *(_QWORD *)(v7 + 8) = v4;
    *v4 = v7;
    *a2 = v5;
    *(_QWORD *)(v5 + 8) = a2;
    *(_QWORD *)(result + 16) += v3;
    a3[2] = 0;
  }
  return result;
}

uint64_t sub_100FC2BEC(uint64_t *a1, char *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_100259694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_1002596A8(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[24 * v4];
  v16 = &v10[24 * v9];
  sub_1015A2E04(v14, a2);
  v15 = v14 + 24;
  sub_100074D44(a1, &v13);
  v11 = a1[1];
  sub_100074DB8((uint64_t)&v13);
  return v11;
}

void sub_100FC2CDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100074DB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100FC2CF0(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = &off_102197A18;
  v2 = (id *)(a1 + 8);
  objc_msgSend(*(id *)(a1 + 16), "forget:", *(_QWORD *)(a1 + 8));

  objc_msgSend(*v2, "invalidate");
  *v2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void sub_100FC2D50()
{
  operator new();
}

void sub_100FC2E78()
{
  uint64_t v0;
  void **v1;
  void **v2;

  if (*(char *)(v0 + 55) < 0)
    operator delete(*v2);
  if (*(char *)(v0 + 31) < 0)
    operator delete(*v1);
  operator delete();
}

uint64_t sub_100FC2ECC(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
  {
    if (*(char *)(v1 + 79) < 0)
      operator delete(*(void **)(v1 + 56));
    if (*(char *)(v1 + 55) < 0)
      operator delete(*(void **)(v1 + 32));
    if (*(char *)(v1 + 31) < 0)
      operator delete(*(void **)(v1 + 8));
    operator delete();
  }
  return result;
}

uint64_t sub_100FC2F50()
{
  sub_1015A2E04(qword_102309420, "t");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102309420, (void *)&_mh_execute_header);
}

uint64_t sub_100FC2F94(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 8) + *(_DWORD *)(a1 + 4));
}

uint64_t *sub_100FC2FA0()
{
  return &qword_102311AA8;
}

int *sub_100FC2FAC()
{
  return &dword_102311AB8;
}

char *sub_100FC2FB8()
{
  return &byte_1022FC700;
}

uint64_t sub_100FC2FC4(uint64_t a1)
{
  _OWORD v3[2];

  *(_OWORD *)a1 = xmmword_101C328A0;
  *(_OWORD *)(a1 + 16) = xmmword_101C328B0;
  *(_OWORD *)(a1 + 32) = xmmword_101C328C0;
  *(_OWORD *)(a1 + 48) = xmmword_101C328D0;
  *(_OWORD *)(a1 + 64) = xmmword_101C328E0;
  *(_OWORD *)(a1 + 80) = xmmword_101C328F0;
  *(_OWORD *)(a1 + 96) = xmmword_101C32900;
  *(_QWORD *)&v3[0] = 0;
  sub_100CEA9A8(a1 + 112, (unint64_t *)v3, 1);
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 184) = 1065353216;
  v3[0] = xmmword_101C32910;
  v3[1] = unk_101C32920;
  sub_100CEA9A8(a1 + 192, (unint64_t *)v3, 4);
  *(_WORD *)(a1 + 232) = 257;
  return a1;
}

void sub_100FC30C0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100067AC4(v2);
  sub_100067AC4(v1);
  _Unwind_Resume(a1);
}

int *sub_100FC30E4()
{
  return &dword_102311AC8;
}

char *sub_100FC30F0()
{
  return &byte_1022FC704;
}

_QWORD *sub_100FC30FC(_QWORD *a1, uint64_t a2, void *aBlock)
{
  *a1 = a2;
  a1[1] = 0;
  a1[2] = 0;
  if (aBlock)
    a1[1] = _Block_copy(aBlock);
  return a1;
}

void sub_100FC313C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100FC3164(uint64_t a1)
{
  const void *v2;
  uint64_t v3;

  v2 = *(const void **)(a1 + 8);
  if (v2)
    _Block_release(v2);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t sub_100FC31B0(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  void *j;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  void *k;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  const char *v28;
  uint8_t *v29;
  id v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  id v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  id v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  void *v45;
  char v46;
  char v47;
  int v48;
  _QWORD v49[2];
  uint8_t buf[1640];
  _BYTE v51[128];
  _BYTE v52[128];
  _BYTE v53[128];

  sub_100119F3C(v49);
  v48 = 0;
  if (sub_100006BB4(a2, "Altimeter", v49))
  {
    if (sub_100526244((uint64_t)v49, "MaxNumSubmissionsFloorTransition", &v48))
      LODWORD(qword_102311AA8) = v48;
    if (sub_100526244((uint64_t)v49, "MaxNumSubmissionsUnknown", &v48))
      HIDWORD(qword_102311AA8) = v48;
    if (sub_100526244((uint64_t)v49, "MaxNumSubmissionsWork", &v48))
      dword_102311AB0 = v48;
    buf[0] = 0;
    if (sub_1001E4874((uint64_t)v49, "AllowALSRequests", (BOOL *)buf))
      byte_102311AB4 = buf[0];
  }
  if (sub_100006BB4(a2, "Ionosphere", v49))
  {
    if (sub_100526244((uint64_t)v49, "MaxPointsCollectedPerSubArchive", &v48))
      dword_102311AB8 = v48;
    *(_QWORD *)buf = 0;
    if (sub_1001FD98C((uint64_t)v49, "IonosphereCollectionIntervalSec", buf))
      qword_102311AC0 = *(_QWORD *)buf;
  }
  if (sub_100006BB4(a2, "Realtime", v49))
  {
    buf[0] = byte_1022FC700;
    if (sub_1001E4874((uint64_t)v49, "AllowProactiveLocationsHarvest", (BOOL *)buf))
      byte_1022FC700 = buf[0];
    LOBYTE(v45) = 0;
    if (sub_1001E4874((uint64_t)v49, "AllowCyclingHarvest", (BOOL *)&v45))
      byte_1022FC701 = (char)v45;
    if (sub_1001E4874((uint64_t)v49, "AllowRunningHarvest", (BOOL *)&v45))
      byte_1022FC702 = (char)v45;
    if (sub_1001E4874((uint64_t)v49, "AllowWalkingHarvest", (BOOL *)&v45))
      byte_1022FC703 = (char)v45;
  }
  if (sub_100006BB4(a2, "Trace", v49))
  {
    if (sub_100526244((uint64_t)v49, "MaxNumSubmissionsScored", &v48))
      dword_102311AC8 = v48;
    if (sub_100526244((uint64_t)v49, "MaxSubmissionsVision", &v48))
      dword_102311ACC = v48;
    if (sub_100526244((uint64_t)v49, "MaxTracesSavedToDisk", &v48))
      dword_102311AD4 = v48;
    if (sub_100526244((uint64_t)v49, "TracesToCapturePerScoredTrace", &v48))
      dword_102311AD0 = v48;
    *(_QWORD *)buf = 0;
    if (sub_1001FD98C((uint64_t)v49, "ScoringMinDeltaTimestamp", buf))
      qword_102311AD8 = *(_QWORD *)buf;
    if (sub_1001FD98C((uint64_t)v49, "ScoringIntervalDuration", buf))
      qword_102311AE0 = *(_QWORD *)buf;
    if (sub_1001FD98C((uint64_t)v49, "ScoringMinIntervalDuration", buf))
      qword_102311AE8 = *(_QWORD *)buf;
    if (sub_1001FD98C((uint64_t)v49, "ScoringMinWifiScanFrequency", buf))
      qword_102311AF0 = *(_QWORD *)buf;
    if (sub_1001FD98C((uint64_t)v49, "ScoringMinInertialOdometryValidFrequency", buf))
      qword_102311B08 = *(_QWORD *)buf;
    if (sub_1001FD98C((uint64_t)v49, "ScoringInertialOdometryMinWalkingSpeed", buf))
      qword_102311B10 = *(_QWORD *)buf;
    if (sub_1001FD98C((uint64_t)v49, "ScoringLoiMultiplier", buf))
      qword_102311AF8 = *(_QWORD *)buf;
    if (sub_1001FD98C((uint64_t)v49, "ScoringWalkingMultiplier", buf))
      qword_102311B00 = *(_QWORD *)buf;
    if (sub_1001FD98C((uint64_t)v49, "VisionSecondsBetweenVIOCapture", buf))
      qword_102311B18 = *(_QWORD *)buf;
    if (sub_1001FD98C((uint64_t)v49, "VisionSecondsBetweenVLDebugInfo", buf))
      qword_102311B20 = *(_QWORD *)buf;
    if (sub_1001FD98C((uint64_t)v49, "VisionScoringMaxSecondsBetweenVIOCapture", buf))
      qword_102311B28 = *(_QWORD *)buf;
    if (sub_1001FD98C((uint64_t)v49, "VisionScoringVLMultiplier", buf))
      qword_102311B30 = *(_QWORD *)buf;
    v47 = 0;
    if (sub_1001E4874((uint64_t)v49, "AllowInertialOdometryNotifications", (BOOL *)&v47))
      byte_102311BB0 = v47;
    v46 = 0;
    if (sub_1001E4874((uint64_t)v49, "AllowOutdoorServiceNotifications", (BOOL *)&v46))
      byte_102311BB1 = v46;
    v45 = 0;
    if (sub_100527258((uint64_t)v49, (const __CFString *)"VisionBlockingLoiTypes", (CFTypeRef *)&v45))
    {
      sub_10001BB9C(qword_102311B38);
      v4 = v45;
      v41 = 0u;
      v42 = 0u;
      v43 = 0u;
      v44 = 0u;
      v6 = objc_msgSend(v45, "countByEnumeratingWithState:objects:count:", &v41, v53, 16);
      if (v6)
      {
        v7 = *(_QWORD *)v42;
        do
        {
          for (i = 0; i != v6; i = (char *)i + 1)
          {
            if (*(_QWORD *)v42 != v7)
              objc_enumerationMutation(v4);
            v9 = *(void **)(*((_QWORD *)&v41 + 1) + 8 * (_QWORD)i);
            v10 = objc_opt_class(NSNumber, v5);
            if ((objc_opt_isKindOfClass(v9, v10) & 1) != 0)
            {
              v40 = objc_msgSend(v9, "integerValue");
              sub_1008A2874((uint64_t)qword_102311B38, (unint64_t *)&v40, &v40);
            }
          }
          v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v41, v53, 16);
        }
        while (v6);
      }
    }
    v40 = 0;
    if (sub_100527258((uint64_t)v49, (const __CFString *)"NonVisionBlockingLoiTypes", (CFTypeRef *)&v40))
    {
      sub_10001BB9C(qword_102311B60);
      v11 = v40;
      v36 = 0u;
      v37 = 0u;
      v38 = 0u;
      v39 = 0u;
      v13 = objc_msgSend(v40, "countByEnumeratingWithState:objects:count:", &v36, v52, 16);
      if (v13)
      {
        v14 = *(_QWORD *)v37;
        do
        {
          for (j = 0; j != v13; j = (char *)j + 1)
          {
            if (*(_QWORD *)v37 != v14)
              objc_enumerationMutation(v11);
            v16 = *(void **)(*((_QWORD *)&v36 + 1) + 8 * (_QWORD)j);
            v17 = objc_opt_class(NSNumber, v12);
            if ((objc_opt_isKindOfClass(v16, v17) & 1) != 0)
            {
              v35 = objc_msgSend(v16, "integerValue");
              sub_1008A2874((uint64_t)qword_102311B60, (unint64_t *)&v35, &v35);
            }
          }
          v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v36, v52, 16);
        }
        while (v13);
      }
    }
    v35 = 0;
    if (sub_100527258((uint64_t)v49, (const __CFString *)"TriggeringLoiTypes", (CFTypeRef *)&v35))
    {
      sub_10001BB9C(qword_102311B88);
      v18 = v35;
      v31 = 0u;
      v32 = 0u;
      v33 = 0u;
      v34 = 0u;
      v20 = objc_msgSend(v35, "countByEnumeratingWithState:objects:count:", &v31, v51, 16);
      if (v20)
      {
        v21 = *(_QWORD *)v32;
        do
        {
          for (k = 0; k != v20; k = (char *)k + 1)
          {
            if (*(_QWORD *)v32 != v21)
              objc_enumerationMutation(v18);
            v23 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * (_QWORD)k);
            v24 = objc_opt_class(NSNumber, v19);
            if ((objc_opt_isKindOfClass(v23, v24) & 1) != 0)
            {
              v30 = objc_msgSend(v23, "integerValue");
              sub_1008A2874((uint64_t)qword_102311B88, (unint64_t *)&v30, &v30);
            }
          }
          v20 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v31, v51, 16);
        }
        while (v20);
      }
    }
  }
  if (sub_100006BB4(a2, "Tracks", v49))
  {
    buf[0] = byte_1022FC704;
    if (sub_1001E4874((uint64_t)v49, "AllowProactiveLocationsHarvest", (BOOL *)buf))
      byte_1022FC704 = buf[0];
    LOBYTE(v45) = 0;
    if (sub_1001E4874((uint64_t)v49, "AllowCyclingHarvest", (BOOL *)&v45))
      byte_1022FC705 = (char)v45;
    if (sub_1001E4874((uint64_t)v49, "AllowRunningHarvest", (BOOL *)&v45))
      byte_1022FC706 = (char)v45;
    if (sub_1001E4874((uint64_t)v49, "AllowWalkingHarvest", (BOOL *)&v45))
      byte_1022FC707 = (char)v45;
  }
  v25 = *(_QWORD *)(a1 + 8);
  if (v25)
  {
    (*(void (**)(void))(v25 + 16))();
  }
  else
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102197A30);
    v26 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "PostMobileAssetsUpdateCallback unavailable; skip",
        buf,
        2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_102197A30);
      LOWORD(v45) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 2, "PostMobileAssetsUpdateCallback unavailable; skip",
        &v45,
        2);
      v29 = (uint8_t *)v28;
      sub_100512490("Generic", 1, 0, 2, "void CLHarvestSettings::updateSettings(const CLNameValuePair &)", "%s\n", v28);
      if (v29 != buf)
        free(v29);
    }
  }
  return sub_10011A5A8(v49);
}

void sub_100FC3BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  sub_10011A5A8(&a43);
  _Unwind_Resume(a1);
}

uint64_t sub_100FC3C74(uint64_t result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  uint64_t v11;
  uint8_t buf[4];
  uint64_t v13;

  if (*a3 == 4)
  {
    v5 = result;
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102197A30);
    v6 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138477827;
      v13 = sub_10011A5AC(a4);
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#Mobile Asset Harvest notification data: %{private}@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_102197A30);
      v7 = qword_1022A0208;
      v10 = 138477827;
      v11 = sub_10011A5AC(a4);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 2, "#Mobile Asset Harvest notification data: %{private}@", &v10, 12);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLHarvestSettings::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    return sub_100FC31B0(v5, a4);
  }
  return result;
}

id sub_100FC3E4C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    sub_1013DF780();
  return objc_msgSend(*(id *)(v1 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v1 + 8), 4, 0);
}

void sub_100FC3EDC(uint64_t a1, _DWORD *a2, uint64_t a3, id *a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id *v19;

  CLProfilingIdentify("CLHarvestSettings::onMobileAssetNotification");
  objc_msgSend(objc_msgSend(*a4, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102197A50);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLHarvestSettings::onMobileAssetNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102197A50);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLHarvestSettings::onMobileAssetNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100FC3C74((uint64_t)a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100FC4094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100FC40B4(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = result[2];
  if (v1)
  {
    v2 = result;
    objc_msgSend(*(id *)(v1 + 16), "unregister:forNotification:", *(_QWORD *)(v1 + 8), 4);
    result = (_QWORD *)v2[2];
    v2[2] = 0;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_100FC4104(id a1)
{
  qword_1022A0208 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

void sub_100FC4130(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_100FC415C()
{
  qword_102311AA8 = 0x200000002;
  dword_102311AB0 = 2;
  byte_102311AB4 = 1;
  dword_102311AB8 = 10;
  qword_102311AC0 = 0x4082C00000000000;
  sub_100FC2FC4((uint64_t)&dword_102311AC8);
  return __cxa_atexit((void (*)(void *))sub_1006DEE20, &dword_102311AC8, (void *)&_mh_execute_header);
}

uint64_t sub_100FC41D4(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  _BYTE v6[232];

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 48) + 48))(*(_QWORD *)(a3 + 48));
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(_QWORD, _BYTE *, double))(**(_QWORD **)(a3 + 48) + 24))(*(_QWORD *)(a3 + 48), v6, a1);
    if (v6[208])
    {
      sub_1004C5730(*(_QWORD *)(a3 + 16));
      sub_1004C5730(*(_QWORD *)(a3 + 24));
      sub_1004C5730(*(_QWORD *)(a3 + 8));
      return sub_1004C5730(*(_QWORD *)(a3 + 64));
    }
  }
  return result;
}

uint64_t sub_100FC4284(double a1, uint64_t a2, _QWORD **a3)
{
  int v5;
  uint64_t result;
  _QWORD *v7;
  _BYTE v8[232];

  (*(void (**)(_QWORD *, _BYTE *))(*a3[6] + 24))(a3[6], v8);
  v5 = v8[208];
  result = (*(uint64_t (**)(_QWORD *, double))(*a3[1] + 48))(a3[1], a1);
  if (!v5)
  {
    if (!(_DWORD)result)
      return result;
    v7 = a3 + 2;
    return (*(uint64_t (**)(_QWORD, double))(*(_QWORD *)*v7 + 48))(*v7, a1);
  }
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(_QWORD *, double))(*a3[2] + 48))(a3[2], a1);
    if ((_DWORD)result)
    {
      result = (*(uint64_t (**)(_QWORD *, double))(*a3[3] + 48))(a3[3], a1);
      if ((_DWORD)result)
      {
        v7 = a3 + 8;
        return (*(uint64_t (**)(_QWORD, double))(*(_QWORD *)*v7 + 48))(*v7, a1);
      }
    }
  }
  return result;
}

float sub_100FC4370(uint64_t a1, float a2)
{
  float v3;
  float v4;
  double v5;
  double v6;
  double v7;
  float v8;
  float v9;
  float v10;
  NSObject *v11;
  double v12;
  double v13;
  double v15;
  double v16;
  const char *v17;
  uint8_t *v18;
  double v19;
  int v20;
  double v21;
  __int16 v22;
  double v23;
  __int16 v24;
  double v25;
  __int16 v26;
  double v27;
  __int16 v28;
  double v29;
  __int16 v30;
  double v31;
  __int16 v32;
  double v33;
  __int16 v34;
  double v35;
  __int16 v36;
  double v37;
  uint8_t buf[4];
  double v39;
  __int16 v40;
  double v41;
  __int16 v42;
  double v43;
  __int16 v44;
  double v45;
  __int16 v46;
  double v47;
  __int16 v48;
  double v49;
  __int16 v50;
  double v51;
  __int16 v52;
  double v53;
  __int16 v54;
  double v55;

  v3 = *(float *)(a1 + 1364);
  v4 = *(float *)(a1 + 1368);
  v5 = a2;
  v6 = *(float *)(a1 + 1384);
  v7 = *(float *)(a1 + 1380);
  v8 = (v7 - a2) / (v7 - v6);
  v9 = sub_10108B14C(v8, *(float *)(a1 + 1372));
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_102197AC0);
  v10 = v4 * v9;
  v11 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    v12 = *(double *)(a1 + 120);
    v13 = *(double *)(a1 + 128);
    *(_DWORD *)buf = 134220032;
    v39 = v12;
    v40 = 2048;
    v41 = v13;
    v42 = 2048;
    v43 = v5;
    v44 = 2048;
    v45 = v7;
    v46 = 2048;
    v47 = v6;
    v48 = 2048;
    v49 = v4;
    v50 = 2048;
    v51 = v13 - v12;
    v52 = 2048;
    v53 = v3;
    v54 = 2048;
    v55 = v10;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Cycle, CR DT Regression, %f, %f, catherine(cpm), %f, catherinemax(cpm), %f, catherinemin(cpm), %f, vo2max(METs), %f, duration(s), %f, weight(kg), %f, METS, %f", buf, 0x5Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102197AC0);
    v15 = *(double *)(a1 + 120);
    v16 = *(double *)(a1 + 128);
    v20 = 134220032;
    v21 = v15;
    v22 = 2048;
    v23 = v16;
    v24 = 2048;
    v25 = v5;
    v26 = 2048;
    v27 = v7;
    v28 = 2048;
    v29 = v6;
    v30 = 2048;
    v31 = v4;
    v32 = 2048;
    v33 = v16 - v15;
    v34 = 2048;
    v35 = v3;
    v36 = 2048;
    v37 = v10;
    LODWORD(v19) = 92;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "Cycle, CR DT Regression, %f, %f, catherine(cpm), %f, catherinemax(cpm), %f, catherinemin(cpm), %f, vo2max(METs), %f, duration(s), %f, weight(kg), %f, METS, %f", COERCE_DOUBLE(&v20), v19);
    v18 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 2, "static float CLNatalieCycleModel::computeHRMets(float, const CLNatalieModelInput &)", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
  return v10;
}

void sub_100FC4624(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  float v6;
  uint64_t v7;
  double v8;
  int v9;
  float v10;
  float v11;
  unsigned int v12;
  double v13;
  NSObject *v14;
  float v15;
  NSObject *v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  NSObject *v23;
  double v24;
  uint64_t v25;
  float v26;
  NSObject *v27;
  double v28;
  double v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  NSObject *v33;
  int v34;
  unsigned int v35;
  double v36;
  double v37;
  int v38;
  _BOOL4 v39;
  uint64_t v40;
  double v41;
  double v42;
  const char *v43;
  uint8_t *v44;
  uint64_t v45;
  double v46;
  double v47;
  int v48;
  _BOOL4 v49;
  uint64_t v50;
  const char *v51;
  uint8_t *v52;
  const char *v53;
  uint8_t *v54;
  const char *v55;
  uint8_t *v56;
  double v57;
  uint64_t v58;
  const char *v59;
  uint8_t *v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  int v67;
  double v68;
  __int16 v69;
  double v70;
  __int16 v71;
  _BYTE v72[36];
  double v73;
  _BYTE v74[14];
  uint8_t buf[4];
  double v76;
  __int16 v77;
  double v78;
  __int16 v79;
  _BYTE v80[36];
  double v81;
  _BYTE v82[14];

  v6 = *(float *)(a2 + 1364);
  v65 = *(double *)(a2 + 624);
  v7 = *(_QWORD *)(a2 + 640);
  v8 = *(double *)(a2 + 816);
  v9 = *(_DWORD *)(a2 + 832);
  v10 = *(double *)(a2 + 648);
  v11 = *(double *)(a2 + 840);
  v12 = *(_DWORD *)(a2 + 400);
  if (v10 <= 25.0)
  {
    v15 = *(double *)(a2 + 648);
  }
  else
  {
    v13 = *(double *)(a2 + 616);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102197AC0);
    v14 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218496;
      v76 = v13;
      v77 = 2048;
      v78 = v10;
      v79 = 2048;
      *(_QWORD *)v80 = 0x4039000000000000;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Cycle, GPS speed at time, %f, %f is too high,  set to maximum default, %f", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_102197AC0);
      v67 = 134218496;
      v68 = v13;
      v69 = 2048;
      v70 = v10;
      v71 = 2048;
      *(_QWORD *)v72 = 0x4039000000000000;
      LODWORD(v61) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 16, "Cycle, GPS speed at time, %f, %f is too high,  set to maximum default, %f", COERCE_DOUBLE(&v67), v61, v63);
      v54 = (uint8_t *)v53;
      sub_100512490("Generic", 1, 0, 0, "virtual CLMetsInfo CLNatalieCycleModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v53);
      if (v54 != buf)
        free(v54);
    }
    v15 = 25.0;
  }
  if (v11 > 5.0)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102197AC0);
    v16 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218496;
      v76 = v8;
      v77 = 2048;
      v78 = v11;
      v79 = 2048;
      *(_QWORD *)v80 = 0x4014000000000000;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Cycle, Uphill vertical speed at time, %f, %f is too high, set to maximum default %f", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_102197AC0);
      v67 = 134218496;
      v68 = v8;
      v69 = 2048;
      v70 = v11;
      v71 = 2048;
      *(_QWORD *)v72 = 0x4014000000000000;
      LODWORD(v61) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 16, "Cycle, Uphill vertical speed at time, %f, %f is too high, set to maximum default %f", COERCE_DOUBLE(&v67), v61, v63);
      v56 = (uint8_t *)v55;
      sub_100512490("Generic", 1, 0, 0, "virtual CLMetsInfo CLNatalieCycleModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v55);
      if (v56 != buf)
        free(v56);
    }
    v11 = 5.0;
  }
  v17 = 0.0;
  v18 = 0.0;
  if (sub_100219944(a2))
  {
    v19 = *(double *)(a2 + 560);
    v18 = sub_100FC4370(a2, v19);
  }
  if (*(double *)(a2 + 616) > 0.0)
  {
    v20 = 0.0;
    if (v11 >= 0.0)
      v21 = v11;
    else
      v21 = 0.0;
    if (v21 > 5.0)
      v21 = 5.0;
    if (v15 >= 0.0)
      v20 = v15;
    if (v20 > 25.0)
      v20 = 25.0;
    sub_100FC5600(v20, v21, *(float *)(a2 + 1364));
    v17 = v22;
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102197AC0);
    v23 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
    {
      v24 = *(double *)(a2 + 120);
      v25 = *(_QWORD *)(a2 + 128);
      *(_DWORD *)buf = 134218496;
      v76 = v17;
      v77 = 2048;
      v78 = v24;
      v79 = 2048;
      *(_QWORD *)v80 = v25;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "Cycle, metsWR,%f,startTime,%f,endTime,%f", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_102197AC0);
      v57 = *(double *)(a2 + 120);
      v58 = *(_QWORD *)(a2 + 128);
      v67 = 134218496;
      v68 = v17;
      v69 = 2048;
      v70 = v57;
      v71 = 2048;
      *(_QWORD *)v72 = v58;
      LODWORD(v61) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "Cycle, metsWR,%f,startTime,%f,endTime,%f", COERCE_DOUBLE(&v67), v61, v63);
      v60 = (uint8_t *)v59;
      sub_100512490("Generic", 1, 0, 2, "virtual CLMetsInfo CLNatalieCycleModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v59);
      if (v60 != buf)
        free(v60);
    }
  }
  if (CLMotionActivity::isTypeStatic(*(unsigned int *)(a2 + 288)))
    v26 = 1.3;
  else
    v26 = 4.4021;
  *(float *)a3 = v18;
  *(float *)(a3 + 4) = v17;
  *(_DWORD *)(a3 + 8) = 0;
  *(float *)(a3 + 12) = v17;
  *(_QWORD *)(a3 + 16) = 0x408CDDEA00000000;
  *(_DWORD *)(a3 + 24) = 3;
  *((float *)&v66 + 1) = v26;
  *(float *)(a3 + 28) = v26;
  *(_QWORD *)(a3 + 32) = 0x200000003;
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_102197AC0);
  v27 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    v28 = *(double *)(a2 + 120);
    v29 = *(double *)(a2 + 128);
    *(_DWORD *)buf = 134219776;
    v76 = v28;
    v77 = 2048;
    v78 = v29;
    v79 = 1024;
    *(_DWORD *)v80 = v9;
    *(_WORD *)&v80[4] = 2048;
    *(double *)&v80[6] = v15;
    *(_WORD *)&v80[14] = 2048;
    *(double *)&v80[16] = v11;
    *(_WORD *)&v80[24] = 2048;
    *(double *)&v80[26] = v29 - v28;
    *(_WORD *)&v80[34] = 2048;
    v81 = v6;
    *(_WORD *)v82 = 2048;
    *(double *)&v82[2] = v17;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "Cycle, WR Linear Regression, %f, %f, Grade type, %d, GPS Speed, %f, Vertical Speed, %f, Duration(s), %f, Weight(kg), %f, WR METS, %f", buf, 0x4Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102197AC0);
    v41 = *(double *)(a2 + 120);
    v42 = *(double *)(a2 + 128);
    v67 = 134219776;
    v68 = v41;
    v69 = 2048;
    v70 = v42;
    v71 = 1024;
    *(_DWORD *)v72 = v9;
    *(_WORD *)&v72[4] = 2048;
    *(double *)&v72[6] = v15;
    *(_WORD *)&v72[14] = 2048;
    *(double *)&v72[16] = v11;
    *(_WORD *)&v72[24] = 2048;
    *(double *)&v72[26] = v42 - v41;
    *(_WORD *)&v72[34] = 2048;
    v73 = v6;
    *(_WORD *)v74 = 2048;
    *(double *)&v74[2] = v17;
    LODWORD(v61) = 78;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "Cycle, WR Linear Regression, %f, %f, Grade type, %d, GPS Speed, %f, Vertical Speed, %f, Duration(s), %f, Weight(kg), %f, WR METS, %f", COERCE_DOUBLE(&v67), v61, LODWORD(v63), v64, v65, v66);
    v44 = (uint8_t *)v43;
    sub_100512490("Generic", 1, 0, 2, "virtual CLMetsInfo CLNatalieCycleModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v43);
    if (v44 != buf)
      free(v44);
  }
  sub_100EE6B84((double *)(a1 + 8), a2);
  v30 = sub_100219944(a2);
  if (*(double *)(a2 + 600) < *(double *)a2)
    v31 = v30;
  else
    v31 = 0;
  v32 = (8 * (v12 > 2)) | (4 * (*(double *)(a2 + 616) > 0.0)) | (2 * (*(_DWORD *)(a2 + 832) != 0)) | v31;
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_102197AC0);
  v33 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    v34 = v9;
    v35 = v12;
    v36 = *(double *)(a2 + 120);
    v37 = *(double *)(a2 + 128);
    v38 = sub_100219944(a2);
    v39 = *(double *)(a2 + 616) > 0.0;
    v40 = *(_QWORD *)(a2 + 600);
    *(_DWORD *)buf = 134220288;
    v76 = v36;
    v77 = 2048;
    v78 = v37;
    v12 = v35;
    v9 = v34;
    v79 = 1024;
    *(_DWORD *)v80 = v32;
    *(_WORD *)&v80[4] = 1024;
    *(_DWORD *)&v80[6] = v34;
    *(_WORD *)&v80[10] = 2048;
    *(double *)&v80[12] = v15;
    *(_WORD *)&v80[20] = 2048;
    *(double *)&v80[22] = v11;
    *(_WORD *)&v80[30] = 1024;
    *(_DWORD *)&v80[32] = v38;
    LOWORD(v81) = 1024;
    *(_DWORD *)((char *)&v81 + 2) = v31;
    HIWORD(v81) = 1024;
    *(_DWORD *)v82 = v39;
    *(_WORD *)&v82[4] = 2048;
    *(_QWORD *)&v82[6] = v40;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "Cycle, Model switcher input availability, StartTime, %f, EndTime, %f, ModelSwitcherInputCase, %d, gradeType, %d, hspeed, %f, vspeed, %f, isCatherineAvailable, %d, isCatherineReliable, %d, isGpsAvailable, %d, HRstaleness, %f", buf, 0x52u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    HIDWORD(v62) = v12;
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102197AC0);
    v45 = qword_10229FC98;
    v46 = *(double *)(a2 + 120);
    v47 = *(double *)(a2 + 128);
    v48 = sub_100219944(a2);
    v49 = *(double *)(a2 + 616) > 0.0;
    v50 = *(_QWORD *)(a2 + 600);
    v67 = 134220288;
    v68 = v46;
    v69 = 2048;
    v70 = v47;
    v71 = 1024;
    *(_DWORD *)v72 = v32;
    *(_WORD *)&v72[4] = 1024;
    *(_DWORD *)&v72[6] = v9;
    *(_WORD *)&v72[10] = 2048;
    *(double *)&v72[12] = v15;
    *(_WORD *)&v72[20] = 2048;
    *(double *)&v72[22] = v11;
    *(_WORD *)&v72[30] = 1024;
    *(_DWORD *)&v72[32] = v48;
    LOWORD(v73) = 1024;
    *(_DWORD *)((char *)&v73 + 2) = v31;
    HIWORD(v73) = 1024;
    *(_DWORD *)v74 = v49;
    *(_WORD *)&v74[4] = 2048;
    *(_QWORD *)&v74[6] = v50;
    LODWORD(v62) = 82;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v45, 2, "Cycle, Model switcher input availability, StartTime, %f, EndTime, %f, ModelSwitcherInputCase, %d, gradeType, %d, hspeed, %f, vspeed, %f, isCatherineAvailable, %d, isCatherineReliable, %d, isGpsAvailable, %d, HRstaleness, %f", COERCE_DOUBLE(&v67), v62, v7, LODWORD(v64), v65, v66);
    v52 = (uint8_t *)v51;
    sub_100512490("Generic", 1, 0, 2, "virtual CLMetsInfo CLNatalieCycleModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v51);
    if (v52 != buf)
      free(v52);
  }
  __asm { BR              X9 }
}

void sub_100FC55D0(float a1, float a2, float a3)
{
  if (a2 < 0.0)
    a2 = 0.0;
  if (a2 > 5.0)
    a2 = 5.0;
  if (a1 < 0.0)
    a1 = 0.0;
  if (a1 > 25.0)
    a1 = 25.0;
  sub_100FC5600(a1, a2, a3);
}

void sub_100FC5600(float a1, float a2, float a3)
{
  double v5;
  float v6;
  float v7;
  float v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  double v12;
  int v13;
  double v14;
  __int16 v15;
  double v16;
  __int16 v17;
  double v18;
  uint8_t buf[4];
  double v20;
  __int16 v21;
  double v22;
  __int16 v23;
  double v24;

  if (a3 > 0.0)
  {
    v5 = pow(a1, 3.0) * 0.167999998 / a3;
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102197AC0);
    v6 = a1 * 0.194;
    v7 = a2 * 7.884;
    v8 = v5;
    v9 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134218496;
      v20 = v6;
      v21 = 2048;
      v22 = v7;
      v23 = 2048;
      v24 = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Cycle, RollingResistance,%f,gravity,%f,wind,%f", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_102197AC0);
      v13 = 134218496;
      v14 = v6;
      v15 = 2048;
      v16 = v7;
      v17 = 2048;
      v18 = v8;
      LODWORD(v12) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "Cycle, RollingResistance,%f,gravity,%f,wind,%f", COERCE_DOUBLE(&v13), v12);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "static float CLNatalieCycleModel::computeWRMETS(const float, const float, const float)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
}

void sub_100FC585C()
{
  operator delete();
}

void sub_100FC5870(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

_QWORD *sub_100FC589C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _BYTE v16[24];
  _BYTE *v17;
  _BYTE v18[24];
  _BYTE *v19;
  _BYTE v20[24];
  _BYTE *v21;

  sub_100270E34((uint64_t)v20, a3);
  sub_100270E34((uint64_t)v18, a4);
  sub_100270E34((uint64_t)v16, a5);
  sub_100D6C128((uint64_t)a1, a2, CFSTR("Nearby"), 0, 1, (uint64_t)v20, (uint64_t)v18, (uint64_t)v16);
  v9 = v17;
  if (v17 == v16)
  {
    v10 = 4;
    v9 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  v11 = v19;
  if (v19 == v18)
  {
    v12 = 4;
    v11 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_11;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_11:
  v13 = v21;
  if (v21 == v20)
  {
    v14 = 4;
    v13 = v20;
    goto LABEL_15;
  }
  if (v21)
  {
    v14 = 5;
LABEL_15:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  *a1 = &off_102197AF0;
  return a1;
}

void sub_100FC59EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v21;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;

  v23 = a13;
  if (a13 == v21)
  {
    v24 = 4;
    v23 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  v25 = a17;
  if (a17 == &a14)
  {
    v26 = 4;
    v25 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_11:
  v27 = a21;
  if (a21 == &a18)
  {
    v28 = 4;
    v27 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_16;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_16:
  _Unwind_Resume(exception_object);
}

void sub_100FC5AA4(uint64_t a1)
{
  sub_100D6C25C(a1);
  operator delete();
}

id sub_100FC5AC8(uint64_t a1)
{
  NSObject *v2;
  id v3;
  int v4;
  int v5;
  id v6;
  NSObject *v7;
  id v8;
  NSObject *v9;
  id v10;
  uint64_t v12;
  id v13;
  int v14;
  int v15;
  const char *v16;
  uint8_t *v17;
  uint64_t v18;
  id v19;
  const char *v20;
  uint8_t *v21;
  uint64_t v22;
  id v23;
  const char *v24;
  uint8_t *v25;
  uint64_t v26;
  _BYTE v27[16];
  int v28;
  id v29;
  __int16 v30;
  _QWORD v31[2];
  uint8_t buf[4];
  id v33;
  __int16 v34;
  _QWORD v35[203];

  if (*(_QWORD *)(a1 + 128))
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102197B90);
    v2 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v3 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      v4 = sub_1007FA8FC(*(void **)(a1 + 128));
      v5 = sub_1007FA8C8(*(void **)(a1 + 128));
      *(_DWORD *)buf = 136446722;
      v33 = v3;
      v34 = 1026;
      LODWORD(v35[0]) = v4;
      WORD2(v35[0]) = 1026;
      *(_DWORD *)((char *)v35 + 6) = v5;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,copySettingsToDict,reading contents of asset for sending to nearbyd,compatibilityVersion,%{public}d,contentVersion,%{public}d", buf, 0x18u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102197B90);
      v12 = qword_1022A02A8;
      v13 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      v14 = sub_1007FA8FC(*(void **)(a1 + 128));
      v15 = sub_1007FA8C8(*(void **)(a1 + 128));
      v28 = 136446722;
      v29 = v13;
      v30 = 1026;
      LODWORD(v31[0]) = v14;
      WORD2(v31[0]) = 1026;
      *(_DWORD *)((char *)v31 + 6) = v15;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v12, 0, "#CLConfig,%{public}s,copySettingsToDict,reading contents of asset for sending to nearbyd,compatibilityVersion,%{public}d,contentVersion,%{public}d", &v28, 24);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "NSDictionary *CLNearbyConfigAsset::copySettingsToDict()", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
    v6 = objc_alloc_init((Class)NSMutableDictionary);
    sub_100119F3C(v27);
    sub_100D6D640(a1, CFSTR("settings.plist"), (uint64_t)v27);
    objc_msgSend(v6, "setValue:forKey:", sub_10011A5AC((uint64_t)v27), CFSTR("SettingsKey"));
    objc_msgSend(v6, "setValue:forKey:", sub_100FC604C(a1), CFSTR("PrGlobalTileKey"));
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102197B90);
    v7 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v8 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      *(_DWORD *)buf = 136446467;
      v33 = v8;
      v34 = 2113;
      v35[0] = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,copySettingsToDict,returning dict,%{private}@", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102197B90);
      v18 = qword_1022A02A8;
      v19 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      v28 = 136446467;
      v29 = v19;
      v30 = 2113;
      v31[0] = v6;
      LODWORD(v26) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v18, 0, "#CLConfig,%{public}s,copySettingsToDict,returning dict,%{private}@", &v28, v26);
      v21 = (uint8_t *)v20;
      sub_100512490("Generic", 1, 0, 2, "NSDictionary *CLNearbyConfigAsset::copySettingsToDict()", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
    sub_10011A5A8(v27);
  }
  else
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102197B90);
    v9 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v10 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      *(_DWORD *)buf = 136446210;
      v33 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning #CLConfig,%{public}s,copySettingsToDict,no asset present", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102197B90);
      v22 = qword_1022A02A8;
      v23 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      v28 = 136446210;
      v29 = v23;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v22, 0, "#Warning #CLConfig,%{public}s,copySettingsToDict,no asset present", &v28, 12);
      v25 = (uint8_t *)v24;
      sub_100512490("Generic", 1, 0, 2, "NSDictionary *CLNearbyConfigAsset::copySettingsToDict()", "%s\n", v24);
      if (v25 != buf)
        free(v25);
    }
    return 0;
  }
  return v6;
}

void sub_100FC6024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

NSData *sub_100FC604C(uint64_t a1)
{
  NSURL *v2;
  NSObject *v3;
  id v4;
  NSData *v5;
  NSObject *v6;
  id v7;
  NSData *v8;
  NSObject *v9;
  id v10;
  uint64_t v12;
  id v13;
  const char *v14;
  uint8_t *v15;
  uint64_t v16;
  id v17;
  const char *v18;
  uint8_t *v19;
  uint64_t v20;
  id v21;
  const char *v22;
  uint8_t *v23;
  uint64_t v24;
  const char *v25;
  int v26;
  id v27;
  __int16 v28;
  const char *v29;
  uint8_t buf[4];
  id v31;
  __int16 v32;
  const char *v33;

  v2 = +[NSURL URLWithString:relativeToURL:](NSURL, "URLWithString:relativeToURL:", CFSTR("prGlobalTile.gz"), objc_msgSend(*(id *)(a1 + 128), "getLocalFileUrl"));
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_102197B90);
  v3 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    v4 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    *(_DWORD *)buf = 136446467;
    v31 = v4;
    v32 = 2081;
    v33 = -[NSString UTF8String](-[NSURL absoluteString](v2, "absoluteString"), "UTF8String");
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,reading PrGlobalTile from %{private}s", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102197B90);
    v12 = qword_1022A02A8;
    v13 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    v26 = 136446467;
    v27 = v13;
    v28 = 2081;
    v29 = -[NSString UTF8String](-[NSURL absoluteString](v2, "absoluteString"), "UTF8String");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v12, 0, "#CLConfig,%{public}s,reading PrGlobalTile from %{private}s", &v26, 22);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "NSData *CLNearbyConfigAsset::getPrGlobalTileFileContents()", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  v25 = 0;
  v5 = +[NSData dataWithContentsOfURL:options:error:](NSData, "dataWithContentsOfURL:options:error:", v2, 2, &v25);
  if (v25)
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102197B90);
    v6 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v7 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      *(_DWORD *)buf = 136446466;
      v31 = v7;
      v32 = 2112;
      v33 = v25;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,error reading PrGlobalTile,error,%@", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102197B90);
      v16 = qword_1022A02A8;
      v17 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      v26 = 136446466;
      v27 = v17;
      v28 = 2112;
      v29 = v25;
      LODWORD(v24) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 0, "#CLConfig,%{public}s,error reading PrGlobalTile,error,%@", &v26, v24);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 2, "NSData *CLNearbyConfigAsset::getPrGlobalTileFileContents()", "%s\n", v18);
      if (v19 != buf)
        free(v19);
    }
    return 0;
  }
  else
  {
    v8 = v5;
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102197B90);
    v9 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v10 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      *(_DWORD *)buf = 136446210;
      v31 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,PrGlobalTile read successfully", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102197B90);
      v20 = qword_1022A02A8;
      v21 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      v26 = 136446210;
      v27 = v21;
      LODWORD(v24) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v20, 0, "#CLConfig,%{public}s,PrGlobalTile read successfully", &v26, v24);
      v23 = (uint8_t *)v22;
      sub_100512490("Generic", 1, 0, 2, "NSData *CLNearbyConfigAsset::getPrGlobalTileFileContents()", "%s\n", v22);
      if (v23 != buf)
        free(v23);
    }
  }
  return v8;
}

id sub_100FC6568(uint64_t a1, void *a2)
{
  NSObject *v4;
  id v5;
  int v6;
  int v7;
  id v8;
  NSObject *v9;
  id v10;
  uint64_t v11;
  id v12;
  const char *v13;
  uint8_t *v14;
  NSObject *v15;
  id v16;
  uint64_t v18;
  id v19;
  int v20;
  int v21;
  const char *v22;
  uint8_t *v23;
  uint64_t v24;
  id v25;
  const char *v26;
  uint8_t *v27;
  uint64_t v28;
  int v29;
  id v30;
  __int16 v31;
  _QWORD v32[2];
  uint8_t buf[4];
  id v34;
  __int16 v35;
  _QWORD v36[203];

  if (*(_QWORD *)(a1 + 128))
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102197B90);
    v4 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v5 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      v6 = sub_1007FA8FC(*(void **)(a1 + 128));
      v7 = sub_1007FA8C8(*(void **)(a1 + 128));
      *(_DWORD *)buf = 136446722;
      v34 = v5;
      v35 = 1026;
      LODWORD(v36[0]) = v6;
      WORD2(v36[0]) = 1026;
      *(_DWORD *)((char *)v36 + 6) = v7;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,copySettingsOfAccessoryFileToDict,reading contents of asset for sending to nearbyd,compatibilityVersion,%{public}d,contentVersion,%{public}d", buf, 0x18u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102197B90);
      v18 = qword_1022A02A8;
      v19 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      v20 = sub_1007FA8FC(*(void **)(a1 + 128));
      v21 = sub_1007FA8C8(*(void **)(a1 + 128));
      v29 = 136446722;
      v30 = v19;
      v31 = 1026;
      LODWORD(v32[0]) = v20;
      WORD2(v32[0]) = 1026;
      *(_DWORD *)((char *)v32 + 6) = v21;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v18, 0, "#CLConfig,%{public}s,copySettingsOfAccessoryFileToDict,reading contents of asset for sending to nearbyd,compatibilityVersion,%{public}d,contentVersion,%{public}d", &v29, 24);
      v23 = (uint8_t *)v22;
      sub_100512490("Generic", 1, 0, 2, "NSDictionary *CLNearbyConfigAsset::copySettingsOfAccessoryFileToDict(NSString *)", "%s\n", v22);
      if (v23 != buf)
        free(v23);
    }
    v8 = objc_alloc_init((Class)NSMutableDictionary);
    objc_msgSend(v8, "setValue:forKey:", sub_100FC6A84(a1, a2), a2);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102197B90);
    v9 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v10 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      *(_DWORD *)buf = 136446467;
      v34 = v10;
      v35 = 2113;
      v36[0] = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,copySettingsOfAccessoryFileToDict,returning dict,%{private}@", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102197B90);
      v11 = qword_1022A02A8;
      v12 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      v29 = 136446467;
      v30 = v12;
      v31 = 2113;
      v32[0] = v8;
      LODWORD(v28) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 0, "#CLConfig,%{public}s,copySettingsOfAccessoryFileToDict,returning dict,%{private}@", &v29, v28);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "NSDictionary *CLNearbyConfigAsset::copySettingsOfAccessoryFileToDict(NSString *)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
  else
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102197B90);
    v15 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v16 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      *(_DWORD *)buf = 136446210;
      v34 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#Warning #CLConfig,%{public}s,copySettingsOfAccessoryFileToDict,no asset present", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102197B90);
      v24 = qword_1022A02A8;
      v25 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      v29 = 136446210;
      v30 = v25;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v24, 0, "#Warning #CLConfig,%{public}s,copySettingsOfAccessoryFileToDict,no asset present", &v29, 12);
      v27 = (uint8_t *)v26;
      sub_100512490("Generic", 1, 0, 2, "NSDictionary *CLNearbyConfigAsset::copySettingsOfAccessoryFileToDict(NSString *)", "%s\n", v26);
      if (v27 != buf)
        free(v27);
    }
    return 0;
  }
  return v8;
}

NSData *sub_100FC6A84(uint64_t a1, void *a2)
{
  NSURL *v4;
  NSObject *v5;
  id v6;
  NSData *v7;
  NSObject *v8;
  id v9;
  const char *v10;
  NSData *v11;
  NSObject *v12;
  id v13;
  const char *v14;
  uint64_t v16;
  id v17;
  const char *v18;
  uint8_t *v19;
  uint64_t v20;
  id v21;
  const char *v22;
  const char *v23;
  uint8_t *v24;
  uint64_t v25;
  id v26;
  const char *v27;
  const char *v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  id v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  uint64_t v37;
  uint8_t buf[4];
  id v39;
  __int16 v40;
  const char *v41;
  __int16 v42;
  uint64_t v43;

  v4 = +[NSURL URLWithString:relativeToURL:](NSURL, "URLWithString:relativeToURL:", a2, objc_msgSend(*(id *)(a1 + 128), "getLocalFileUrl"));
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_102197B90);
  v5 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    v6 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    *(_DWORD *)buf = 136446467;
    v39 = v6;
    v40 = 2081;
    v41 = -[NSString UTF8String](-[NSURL absoluteString](v4, "absoluteString"), "UTF8String");
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,reading contents from %{private}s", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102197B90);
    v16 = qword_1022A02A8;
    v17 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    v32 = 136446467;
    v33 = v17;
    v34 = 2081;
    v35 = -[NSString UTF8String](-[NSURL absoluteString](v4, "absoluteString"), "UTF8String");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 0, "#CLConfig,%{public}s,reading contents from %{private}s", &v32, 22);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "NSData *CLNearbyConfigAsset::getAccessoryFileContents(NSString *)", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  v31 = 0;
  v7 = +[NSData dataWithContentsOfURL:options:error:](NSData, "dataWithContentsOfURL:options:error:", v4, 2, &v31);
  if (v31)
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102197B90);
    v8 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      v10 = -[NSString UTF8String](-[NSURL absoluteString](v4, "absoluteString"), "UTF8String");
      *(_DWORD *)buf = 136446723;
      v39 = v9;
      v40 = 2081;
      v41 = v10;
      v42 = 2112;
      v43 = v31;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,error reading %{private}s,error,%@", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102197B90);
      v20 = qword_1022A02A8;
      v21 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      v22 = -[NSString UTF8String](-[NSURL absoluteString](v4, "absoluteString"), "UTF8String");
      v32 = 136446723;
      v33 = v21;
      v34 = 2081;
      v35 = v22;
      v36 = 2112;
      v37 = v31;
      LODWORD(v30) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v20, 0, "#CLConfig,%{public}s,error reading %{private}s,error,%@", &v32, v30);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 2, "NSData *CLNearbyConfigAsset::getAccessoryFileContents(NSString *)", "%s\n", v23);
      if (v24 != buf)
        free(v24);
    }
    return 0;
  }
  else
  {
    v11 = v7;
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102197B90);
    v12 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v13 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      v14 = (const char *)objc_msgSend(a2, "UTF8String");
      *(_DWORD *)buf = 136446467;
      v39 = v13;
      v40 = 2081;
      v41 = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,%{private}s read successfully", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102197B90);
      v25 = qword_1022A02A8;
      v26 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      v27 = (const char *)objc_msgSend(a2, "UTF8String");
      v32 = 136446467;
      v33 = v26;
      v34 = 2081;
      v35 = v27;
      LODWORD(v30) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v25, 0, "#CLConfig,%{public}s,%{private}s read successfully", &v32, v30);
      v29 = (uint8_t *)v28;
      sub_100512490("Generic", 1, 0, 2, "NSData *CLNearbyConfigAsset::getAccessoryFileContents(NSString *)", "%s\n", v28);
      if (v29 != buf)
        free(v29);
    }
  }
  return v11;
}

void sub_100FC7008(id a1)
{
  qword_1022A02A8 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

uint64_t sub_100FC7034@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>, double a3@<D0>)
{
  _QWORD *v6;
  std::string *p_p;
  std::string::size_type size;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  std::string::value_type v39;
  _QWORD *v40;
  std::string::value_type v41;
  uint64_t v42;
  std::string __p;
  _QWORD v45[2];
  uint64_t v46;
  _QWORD v47[10];
  char v48;
  uint64_t v49;

  sub_100263E50((uint64_t)v45);
  v6 = sub_100263F7C(&v46, (uint64_t)"mac, ", 5);
  sub_1000C2254((_QWORD *)a1, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  sub_100263F7C(v6, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = sub_100263F7C(&v46, (uint64_t)", lat, ", 7);
  v10 = *v9;
  *(uint64_t *)((char *)v9 + *(_QWORD *)(*v9 - 24) + 24) = 13;
  *(uint64_t *)((char *)v9 + *(_QWORD *)(v10 - 24) + 16) = 8;
  *(_DWORD *)((char *)v9 + *(_QWORD *)(v10 - 24) + 8) = *(_DWORD *)((_BYTE *)v9 + *(_QWORD *)(v10 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v9, *(double *)(a1 + 8));
  v11 = sub_100263F7C(&v46, (uint64_t)", lon, ", 7);
  v12 = *v11;
  *(uint64_t *)((char *)v11 + *(_QWORD *)(*v11 - 24) + 24) = 13;
  *(uint64_t *)((char *)v11 + *(_QWORD *)(v12 - 24) + 16) = 8;
  *(_DWORD *)((char *)v11 + *(_QWORD *)(v12 - 24) + 8) = *(_DWORD *)((_BYTE *)v11 + *(_QWORD *)(v12 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v11, *(double *)(a1 + 16));
  v13 = sub_100263F7C(&v46, (uint64_t)", alt, ", 7);
  v14 = *v13;
  *(uint64_t *)((char *)v13 + *(_QWORD *)(*v13 - 24) + 24) = 4;
  *(uint64_t *)((char *)v13 + *(_QWORD *)(v14 - 24) + 16) = 2;
  *(_DWORD *)((char *)v13 + *(_QWORD *)(v14 - 24) + 8) = *(_DWORD *)((_BYTE *)v13 + *(_QWORD *)(v14 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v13, *(double *)(a1 + 24));
  v15 = sub_100263F7C(&v46, (uint64_t)", acc, ", 7);
  v16 = *v15;
  *(uint64_t *)((char *)v15 + *(_QWORD *)(*v15 - 24) + 24) = 4;
  *(uint64_t *)((char *)v15 + *(_QWORD *)(v16 - 24) + 16) = 2;
  *(_DWORD *)((char *)v15 + *(_QWORD *)(v16 - 24) + 8) = *(_DWORD *)((_BYTE *)v15 + *(_QWORD *)(v16 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v15, *(double *)(a1 + 32));
  v17 = sub_100263F7C(&v46, (uint64_t)", vacc, ", 8);
  v18 = *v17;
  *(uint64_t *)((char *)v17 + *(_QWORD *)(*v17 - 24) + 24) = 4;
  *(uint64_t *)((char *)v17 + *(_QWORD *)(v18 - 24) + 16) = 2;
  *(_DWORD *)((char *)v17 + *(_QWORD *)(v18 - 24) + 8) = *(_DWORD *)((_BYTE *)v17 + *(_QWORD *)(v18 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v17, *(double *)(a1 + 40));
  v19 = sub_100263F7C(&v46, (uint64_t)", channel, ", 11);
  v20 = *v19;
  *(uint64_t *)((char *)v19 + *(_QWORD *)(*v19 - 24) + 24) = 1;
  *(uint64_t *)((char *)v19 + *(_QWORD *)(v20 - 24) + 16) = 0;
  *(_DWORD *)((char *)v19 + *(_QWORD *)(v20 - 24) + 8) = *(_DWORD *)((_BYTE *)v19 + *(_QWORD *)(v20 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v19, *(unsigned int *)(a1 + 52));
  v21 = sub_100263F7C(&v46, (uint64_t)", score, ", 9);
  v22 = *v21;
  *(uint64_t *)((char *)v21 + *(_QWORD *)(*v21 - 24) + 24) = 1;
  *(uint64_t *)((char *)v21 + *(_QWORD *)(v22 - 24) + 16) = 0;
  *(_DWORD *)((char *)v21 + *(_QWORD *)(v22 - 24) + 8) = *(_DWORD *)((_BYTE *)v21 + *(_QWORD *)(v22 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v21, *(unsigned int *)(a1 + 76));
  v23 = sub_100263F7C(&v46, (uint64_t)", reach, ", 9);
  v24 = *v23;
  *(uint64_t *)((char *)v23 + *(_QWORD *)(*v23 - 24) + 24) = 1;
  *(uint64_t *)((char *)v23 + *(_QWORD *)(v24 - 24) + 16) = 0;
  *(_DWORD *)((char *)v23 + *(_QWORD *)(v24 - 24) + 8) = *(_DWORD *)((_BYTE *)v23 + *(_QWORD *)(v24 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v23, *(unsigned int *)(a1 + 48));
  v25 = sub_100263F7C(&v46, (uint64_t)", rssi, ", 8);
  v26 = *v25;
  *(uint64_t *)((char *)v25 + *(_QWORD *)(*v25 - 24) + 24) = 1;
  *(uint64_t *)((char *)v25 + *(_QWORD *)(v26 - 24) + 16) = 0;
  *(_DWORD *)((char *)v25 + *(_QWORD *)(v26 - 24) + 8) = *(_DWORD *)((_BYTE *)v25 + *(_QWORD *)(v26 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v25, *(unsigned int *)(a1 + 72));
  v27 = sub_100263F7C(&v46, (uint64_t)", qTime, ", 9);
  v28 = *v27;
  *(uint64_t *)((char *)v27 + *(_QWORD *)(*v27 - 24) + 24) = 8;
  *(uint64_t *)((char *)v27 + *(_QWORD *)(v28 - 24) + 16) = 0;
  *(_DWORD *)((char *)v27 + *(_QWORD *)(v28 - 24) + 8) = *(_DWORD *)((_BYTE *)v27 + *(_QWORD *)(v28 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v27, *(double *)(a1 + 64));
  v29 = sub_100263F7C(&v46, (uint64_t)", ", 2);
  v30 = *v29;
  *(uint64_t *)((char *)v29 + *(_QWORD *)(*v29 - 24) + 24) = 8;
  *(uint64_t *)((char *)v29 + *(_QWORD *)(v30 - 24) + 16) = 0;
  *(_DWORD *)((char *)v29 + *(_QWORD *)(v30 - 24) + 8) = *(_DWORD *)((_BYTE *)v29 + *(_QWORD *)(v30 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v29, a3 - *(double *)(a1 + 64));
  v31 = sub_100263F7C(&v46, (uint64_t)", sTime, ", 9);
  v32 = *v31;
  *(uint64_t *)((char *)v31 + *(_QWORD *)(*v31 - 24) + 24) = 8;
  *(uint64_t *)((char *)v31 + *(_QWORD *)(v32 - 24) + 16) = 0;
  *(_DWORD *)((char *)v31 + *(_QWORD *)(v32 - 24) + 8) = *(_DWORD *)((_BYTE *)v31 + *(_QWORD *)(v32 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v31, *(double *)(a1 + 80));
  v33 = sub_100263F7C(&v46, (uint64_t)", ", 2);
  v34 = *v33;
  *(uint64_t *)((char *)v33 + *(_QWORD *)(*v33 - 24) + 24) = 1;
  *(uint64_t *)((char *)v33 + *(_QWORD *)(v34 - 24) + 16) = 0;
  *(_DWORD *)((char *)v33 + *(_QWORD *)(v34 - 24) + 8) = *(_DWORD *)((_BYTE *)v33 + *(_QWORD *)(v34 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v33, a3 - *(double *)(a1 + 80));
  v35 = sub_100263F7C(&v46, (uint64_t)", ", 2);
  v36 = *v35;
  *(uint64_t *)((char *)v35 + *(_QWORD *)(*v35 - 24) + 24) = 1;
  *(uint64_t *)((char *)v35 + *(_QWORD *)(v36 - 24) + 16) = 0;
  *(_DWORD *)((char *)v35 + *(_QWORD *)(v36 - 24) + 8) = *(_DWORD *)((_BYTE *)v35 + *(_QWORD *)(v36 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v35, *(unsigned int *)(a1 + 92));
  v37 = sub_100263F7C(&v46, (uint64_t)", flg, -", 8);
  __p.__r_.__value_.__s.__data_[0] = 45;
  v38 = sub_100263F7C(v37, (uint64_t)&__p, 1);
  if (*(_BYTE *)(a1 + 88))
    v39 = 84;
  else
    v39 = 45;
  __p.__r_.__value_.__s.__data_[0] = v39;
  v40 = sub_100263F7C(v38, (uint64_t)&__p, 1);
  if ((*(_DWORD *)(a1 + 56) & 1) != 0)
    v41 = 77;
  else
    v41 = 45;
  __p.__r_.__value_.__s.__data_[0] = v41;
  sub_100263F7C(v40, (uint64_t)&__p, 1);
  std::stringbuf::str(a2, v47);
  *(_QWORD *)((char *)v45
  v46 = v42;
  if (v48 < 0)
    operator delete((void *)v47[8]);
  std::streambuf::~streambuf(v47);
  return std::ios::~ios(&v49);
}

void sub_100FC7670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_1018B38B4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_100FC76DC@<X0>(uint64_t result@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>, double a5@<D0>)
{
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a4 + 32) = _Q1;
  *(_DWORD *)(a4 + 52) = a3;
  *(_DWORD *)(a4 + 56) = 0;
  *(_QWORD *)(a4 + 64) = 0;
  *(_BYTE *)(a4 + 88) = 0;
  *(_DWORD *)(a4 + 92) = -1;
  *(_DWORD *)(a4 + 72) = a2;
  *(_DWORD *)(a4 + 76) = -1;
  *(double *)(a4 + 80) = a5;
  *(_DWORD *)(a4 + 48) = -1;
  return result;
}

void sub_100FC7710(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

uint64_t sub_100FC773C(uint64_t a1)
{
  sub_1007A28B0(a1, *(char **)(a1 + 8));
  return a1;
}

uint64_t sub_100FC7764(int a1)
{
  uint64_t v2;
  uint64_t *v3;
  int v4;
  BOOL v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t result;
  int v9;

  v9 = a1;
  (*(void (**)(uint64_t *))(qword_102311BB8 + 16))(&qword_102311BB8);
  v2 = qword_102311BD0;
  if (!qword_102311BD0)
    goto LABEL_12;
  v3 = &qword_102311BD0;
  do
  {
    v4 = *(_DWORD *)(v2 + 32);
    v5 = v4 < a1;
    if (v4 >= a1)
      v6 = (uint64_t *)v2;
    else
      v6 = (uint64_t *)(v2 + 8);
    if (!v5)
      v3 = (uint64_t *)v2;
    v2 = *v6;
  }
  while (*v6);
  if (v3 == &qword_102311BD0 || *((_DWORD *)v3 + 8) > a1)
  {
LABEL_12:
    sub_101938648();
    result = abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/CLTilesSetGlobalProperties.mm", 21, "getRootDirectoryForTileType");
    __break(1u);
  }
  else
  {
    v7 = sub_1000B5C9C((uint64_t)&qword_102311BC8, &v9);
    (*(void (**)(uint64_t *))(qword_102311BB8 + 24))(&qword_102311BB8);
    return (uint64_t)v7;
  }
  return result;
}

void sub_100FC7854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100FC7868(int a1, const std::string *a2)
{
  uint64_t **v3;
  int v5;
  int *v6;

  v5 = a1;
  (*(void (**)(uint64_t *))(qword_102311BB8 + 16))(&qword_102311BB8);
  v6 = &v5;
  v3 = sub_1000BC378((uint64_t **)&qword_102311BC8, &v5, (uint64_t)&unk_101B9EB60, &v6);
  std::string::operator=((std::string *)(v3 + 5), a2);
  return (*(uint64_t (**)(uint64_t *))(qword_102311BB8 + 24))(&qword_102311BB8);
}

void sub_100FC78FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100FC7910(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

uint64_t sub_100FC793C()
{
  sub_10055D44C(&qword_102311BB8, "TilesSetGlobalProperties", 0, 1);
  __cxa_atexit((void (*)(void *))sub_10055D4D0, &qword_102311BB8, (void *)&_mh_execute_header);
  qword_102311BD8 = 0;
  qword_102311BD0 = 0;
  qword_102311BC8 = (uint64_t)&qword_102311BD0;
  return __cxa_atexit((void (*)(void *))sub_100FC773C, &qword_102311BC8, (void *)&_mh_execute_header);
}

uint64_t sub_100FC79B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = 0;
  v3 = a1 + 7600;
  do
  {
    v4 = a1 + v2;
    v5 = *(void **)(a1 + v2 + 7544);
    if (v5)
    {
      *(_QWORD *)(v4 + 7552) = v5;
      operator delete(v5);
    }
    if (*(char *)(v3 + v2 - 57) < 0)
      operator delete(*(void **)(v4 + 7520));
    v2 -= 80;
  }
  while (v2 != -7600);
  return a1;
}

uint64_t sub_100FC7A28(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = 1280;
  do
  {
    v3 = a1 + v2;
    v4 = *(void **)(a1 + v2 - 56);
    if (v4)
    {
      *(_QWORD *)(v3 - 48) = v4;
      operator delete(v4);
    }
    if (*(char *)(v3 - 57) < 0)
      operator delete(*(void **)(v3 - 80));
    v2 -= 80;
  }
  while (v2);
  return a1;
}

void sub_100FC7D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1004A4854((uint64_t *)va);
  _Unwind_Resume(a1);
}

id sub_100FC803C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  _QWORD v8[6];
  __int128 v9;

  v6 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "silo");
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100FC80C8;
  v8[3] = &unk_102150F38;
  v8[4] = a3;
  v8[5] = a2;
  v9 = *(_OWORD *)(a1 + 32);
  return objc_msgSend(v6, "async:", v8);
}

void sub_100FC80C8(uint64_t a1)
{
  uint64_t v2;
  double v3;
  const char *v4;
  NSObject *v5;
  uint32_t v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  double Current;
  uint64_t v12;
  NSObject *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  int v23;
  int v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  double v28;
  __int16 v29;
  double v30;

  if (*(_QWORD *)(a1 + 32))
  {
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_102197C10);
    v2 = qword_10229FE88;
    if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEBUG))
    {
      v3 = *(double *)(a1 + 32);
      v23 = 68289283;
      v24 = 0;
      v25 = 2082;
      v26 = "";
      v27 = 2113;
      v28 = v3;
      v4 = "{\"msg%{public}.0s\":\"Received error when fetching LOI\", \"location: \":%{private, location:escape_only}@}";
      v5 = v2;
LABEL_6:
      v6 = 28;
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, v4, (uint8_t *)&v23, v6);
      return;
    }
    return;
  }
  v7 = *(void **)(a1 + 40);
  if (v7 && !objc_msgSend(v7, "type"))
  {
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_102197C10);
    v12 = qword_10229FE88;
    if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEBUG))
    {
      v23 = 68289026;
      v24 = 0;
      v25 = 2082;
      v26 = "";
      v4 = "{\"msg%{public}.0s\":\"LOI type is home\"}";
      v5 = v12;
      v6 = 18;
      goto LABEL_7;
    }
    return;
  }
  if (objc_msgSend(*(id *)(a1 + 48), "isEntry:", *(_QWORD *)(a1 + 56)))
  {
    objc_msgSend(objc_msgSend(*(id *)(a1 + 56), "arrivalDate"), "timeIntervalSinceReferenceDate");
    v9 = -120.0;
LABEL_14:
    v10 = v8 + v9;
    Current = CFAbsoluteTimeGetCurrent();
    goto LABEL_20;
  }
  if (objc_msgSend(*(id *)(a1 + 48), "isDeparture:", *(_QWORD *)(a1 + 56)))
  {
    v8 = CFAbsoluteTimeGetCurrent();
    v9 = -600.0;
    goto LABEL_14;
  }
  Current = 1.79769313e308;
  v10 = 2.22507386e-308;
LABEL_20:
  if (qword_10229FE80 != -1)
    dispatch_once(&qword_10229FE80, &stru_102197C10);
  v13 = qword_10229FE88;
  if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEBUG))
  {
    v23 = 68289539;
    v24 = 0;
    v25 = 2082;
    v26 = "";
    v27 = 2049;
    v28 = v10;
    v29 = 2049;
    v30 = Current;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Computed timestamps for tracks\", \"start_s\":\"%{private}.09f\", \"end_s\":\"%{private}.09f\"}", (uint8_t *)&v23, 0x26u);
  }
  if (objc_msgSend(*(id *)(a1 + 48), "hasPressureChangeFrom:to:", v10, Current))
  {
    v14 = *(void **)(a1 + 40);
    if (v14)
      *(double *)&v15 = COERCE_DOUBLE(objc_msgSend(v14, "type"));
    else
      *(double *)&v15 = NAN;
    if ((objc_msgSend(*(id *)(a1 + 48), "shouldSubmit:calibrationType:", v15, 3) & 1) != 0)
    {
      v16 = *(void **)(a1 + 48);
      objc_msgSend(*(id *)(a1 + 56), "coordinate");
      v18 = v17;
      v20 = v19;
      objc_msgSend(*(id *)(a1 + 56), "horizontalAccuracy");
      objc_msgSend(v16, "sendTrackFrom:to:location:horrUnc:type:", 3, v10, Current, v18, v20, v21);
    }
    else
    {
      if (qword_10229FE80 != -1)
        dispatch_once(&qword_10229FE80, &stru_102197C10);
      v22 = qword_10229FE88;
      if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEBUG))
      {
        v23 = 68289283;
        v24 = 0;
        v25 = 2082;
        v26 = "";
        v27 = 2049;
        v28 = *(double *)&v15;
        v4 = "{\"msg%{public}.0s\":\"number of submissions exceeded for\", \"type\":%{private}ld}";
        v5 = v22;
        goto LABEL_6;
      }
    }
  }
}

void sub_100FC8FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100FC9554(id a1)
{
  qword_10229FE88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

_QWORD *sub_100FC9580(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char **v7;
  char *v8;
  unint64_t v9;
  char *v10;
  char *v11;

  if (a1 != a2)
  {
    v4 = a2[4];
    v5 = a2[1];
    v6 = a2[2];
    v7 = (char **)(v5 + 8 * (v4 >> 8));
    if (v6 == v5)
    {
      v8 = 0;
      v11 = 0;
      v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 8));
    }
    else
    {
      v8 = &(*v7)[16 * v4];
      v9 = a2[5] + v4;
      v10 = (char *)(v5 + 8 * (v9 >> 8));
      v11 = (char *)(*(_QWORD *)v10 + 16 * v9);
    }
    sub_100FC9608(a1, v7, v8, v10, v11);
  }
  return a1;
}

_QWORD *sub_100FC9608(_QWORD *a1, char **a2, char *a3, char *a4, char *a5)
{
  unint64_t v5;

  if (a5 == a3)
    v5 = 0;
  else
    v5 = ((uint64_t)&a5[-*(_QWORD *)a4] >> 4) + 32 * (a4 - (char *)a2) - ((a3 - *a2) >> 4);
  return sub_100FC963C(a1, a2, a3, v5);
}

_QWORD *sub_100FC963C(_QWORD *a1, char **a2, char *a3, unint64_t a4)
{
  unint64_t v7;
  char *v8;
  char **v9;
  __int128 *v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char **v21;
  char *v22;
  char **v23;
  char *v24;
  _QWORD v25[2];
  char *v26;
  uint64_t v27;

  v23 = a2;
  v24 = a3;
  v7 = a1[5];
  if (v7 >= a4)
  {
    v16 = a1[4];
    v17 = a1[1];
    v18 = (char *)(v17 + 8 * (v16 >> 8));
    if (a1[2] == v17)
      v19 = 0;
    else
      v19 = *(_QWORD *)v18 + 16 * v16;
    v25[0] = a2;
    v25[1] = a3;
    v21 = (char **)sub_1004CE854((uint64_t)v25, a4);
    v26 = v18;
    v27 = v19;
    sub_100FC9884(a2, a3, v21, v22, (uint64_t)&v26);
    return (_QWORD *)sub_1001266D4((uint64_t)a1, v26, v27);
  }
  else
  {
    v9 = (char **)sub_1004CE854((uint64_t)&v23, v7);
    v10 = (__int128 *)v8;
    v11 = a1[4];
    v12 = a1[1];
    v13 = (char *)(v12 + 8 * (v11 >> 8));
    if (a1[2] == v12)
      v14 = 0;
    else
      v14 = *(_QWORD *)v13 + 16 * v11;
    v26 = v13;
    v27 = v14;
    sub_100FC9884(v23, v24, v9, v8, (uint64_t)&v26);
    return sub_100FC9758(a1, v9, v10, a4 - a1[5]);
  }
}

_QWORD *sub_100FC9758(_QWORD *a1, _QWORD *a2, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  __int128 v19;
  __int128 *v20;
  uint64_t v21;
  _QWORD v22[2];

  v8 = a1[1];
  v9 = a1[2];
  if (v9 == v8)
    v10 = 0;
  else
    v10 = 32 * (v9 - v8) - 1;
  v11 = a1[5] + a1[4];
  v12 = v10 - v11;
  if (a4 > v12)
  {
    sub_100FC9A10(a1, a4 - v12);
    v8 = a1[1];
    v9 = a1[2];
    v11 = a1[4] + a1[5];
  }
  v13 = (_QWORD *)(v8 + 8 * (v11 >> 8));
  if (v9 == v8)
    v14 = 0;
  else
    v14 = *v13 + 16 * v11;
  v22[0] = v8 + 8 * (v11 >> 8);
  v22[1] = v14;
  result = sub_1004CE854((uint64_t)v22, a4);
  while (v14 != v16)
  {
    v17 = (_OWORD *)(v13 == result ? v16 : *v13 + 4096);
    if ((_OWORD *)v14 == v17)
    {
      v17 = (_OWORD *)v14;
    }
    else
    {
      v18 = (_OWORD *)v14;
      do
      {
        v19 = *a3++;
        *v18 = v19;
        if ((__int128 *)((char *)a3 - *a2) == (__int128 *)4096)
        {
          v20 = (__int128 *)a2[1];
          ++a2;
          a3 = v20;
        }
        ++v18;
      }
      while (v18 != v17);
    }
    a1[5] += ((uint64_t)v17 - v14) >> 4;
    if (v13 == result)
      break;
    v21 = v13[1];
    ++v13;
    v14 = v21;
  }
  return result;
}

double sub_100FC9884(char **a1, char *__src, char **a3, char *a4, uint64_t a5)
{
  char **v8;
  char *v9;
  char *v10;
  void **v11;
  char *v12;
  double result;
  char *v14;
  __int128 v15;

  if (a1 == a3)
  {
    v11 = *(void ***)a5;
    v12 = *(char **)(a5 + 8);
    v10 = __src;
  }
  else
  {
    v8 = a1 + 1;
    sub_100FC9950(__src, *(char **)(a5 + 8), *a1 + 4096, *(void ***)a5, &v14);
    for (*(_OWORD *)a5 = v15; v8 != a3; *(_OWORD *)a5 = v15)
    {
      v9 = *v8++;
      sub_100FC9950(v9, *(char **)(a5 + 8), v9 + 4096, *(void ***)a5, &v14);
    }
    v10 = *a3;
    v11 = *(void ***)a5;
    v12 = *(char **)(a5 + 8);
  }
  sub_100FC9950(v10, v12, a4, v11, &v14);
  result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

char *sub_100FC9950@<X0>(char *__src@<X0>, char *__dst@<X3>, char *a3@<X1>, void **a4@<X2>, char **a5@<X8>)
{
  void **v6;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;

  v6 = a4;
  if (__src != a3)
  {
    v9 = __src;
    v6 = a4 + 1;
    v10 = (char *)*a4;
    while (1)
    {
      v11 = v10 - __dst + 4096;
      v12 = (a3 - v9) >> 4 >= v11 >> 4 ? v11 >> 4 : (a3 - v9) >> 4;
      if (v12)
        __src = (char *)memmove(__dst, v9, 16 * v12 - 4);
      v9 += 16 * v12;
      if (v9 == a3)
        break;
      v13 = (char *)*v6++;
      v10 = v13;
      __dst = v13;
    }
    __dst += 16 * v12;
    if ((char *)*(v6 - 1) + 4096 == __dst)
      __dst = (char *)*v6;
    else
      --v6;
  }
  *a5 = a3;
  a5[1] = (char *)v6;
  a5[2] = __dst;
  return __src;
}

void sub_100FC9A10(_QWORD *a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t i;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int64_t v76;
  char *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  void *v88;
  void *__p[2];
  __int128 v90;
  _QWORD *v91;

  v3 = (char *)a1[2];
  v4 = (uint64_t)&v3[-a1[1]];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if ((_BYTE)v5)
    v6 = (v5 >> 8) + 1;
  else
    v6 = v5 >> 8;
  v7 = a1[4];
  if (v6 >= v7 >> 8)
    v8 = v7 >> 8;
  else
    v8 = v6;
  if (v6 <= v7 >> 8)
  {
    for (a1[4] = v7 - (v8 << 8); v8; --v8)
    {
      v16 = (_QWORD *)a1[1];
      v19 = *v16;
      v17 = (char *)(v16 + 1);
      v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1)
            v28 = 1;
          else
            v28 = (uint64_t)&v3[-*a1] >> 2;
          v29 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v28);
          v31 = &v29[8 * (v28 >> 2)];
          v32 = (uint64_t *)a1[1];
          v3 = v31;
          v33 = a1[2] - (_QWORD)v32;
          if (v33)
          {
            v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            v34 = 8 * (v33 >> 3);
            v35 = &v29[8 * (v28 >> 2)];
            do
            {
              v36 = *v32++;
              *(_QWORD *)v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            v3 = (char *)a1[2];
          }
        }
        else
        {
          v21 = v20 >> 3;
          v22 = v20 >> 3 < -1;
          v23 = (v20 >> 3) + 2;
          if (v22)
            v24 = v23;
          else
            v24 = v21 + 1;
          v25 = &v17[-8 * (v24 >> 1)];
          v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            v3 = (char *)a1[1];
          }
          v27 = &v3[-8 * (v24 >> 1)];
          v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(_QWORD *)v3 = v18;
      v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    v9 = v6 - v8;
    v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          sub_100212218(a1, __p);
          --v6;
          if (!--v9)
            goto LABEL_75;
        }
        for (i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          sub_100343094((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8)
            v64 = 255;
          else
            v64 = 256;
          v65 = v64 + a1[4];
          a1[4] = v65;
        }
        v8 = v6;
      }
      else
      {
LABEL_75:
        v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 8);
      if (v8)
      {
        v66 = (char *)a1[2];
        do
        {
          v67 = (_QWORD *)a1[1];
          v70 = *v67;
          v68 = (char *)(v67 + 1);
          v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1)
                v78 = 1;
              else
                v78 = (uint64_t)&v66[-*a1] >> 2;
              v79 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v78);
              v81 = &v79[8 * (v78 >> 2)];
              v82 = (uint64_t *)a1[1];
              v66 = v81;
              v83 = a1[2] - (_QWORD)v82;
              if (v83)
              {
                v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                v84 = 8 * (v83 >> 3);
                v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  v86 = *v82++;
                  *(_QWORD *)v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                v66 = (char *)a1[2];
              }
            }
            else
            {
              v72 = v71 >> 3;
              v22 = v71 >> 3 < -1;
              v73 = (v71 >> 3) + 2;
              if (v22)
                v74 = v73;
              else
                v74 = v72 + 1;
              v75 = &v68[-8 * (v74 >> 1)];
              v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                v66 = (char *)a1[1];
              }
              v77 = &v66[-8 * (v74 >> 1)];
              v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(_QWORD *)v66 = v69;
          v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v11 = v4 >> 3;
      v12 = v10 >> 2;
      if (v12 <= v9 + v11)
        v13 = v9 + v11;
      else
        v13 = v12;
      v14 = v11 - v8;
      v91 = a1 + 3;
      if (v13)
        v15 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v13);
      else
        v15 = 0;
      v38 = v8 << 8;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&v90 = __p[1];
      *((_QWORD *)&v90 + 1) = &v15[8 * v13];
      do
      {
        v88 = operator new(0x1000uLL);
        sub_10003732C(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        v39 = (_QWORD *)a1[1];
        v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0])
                v48 = 1;
              else
                v48 = (v40 - (char *)__p[0]) >> 2;
              v49 = (char *)sub_10025E6A0((uint64_t)v91, v48);
              v51 = (uint64_t *)__p[1];
              v40 = &v49[8 * (v48 >> 2)];
              v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                v53 = 8 * (v52 >> 3);
                v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  v55 = *v51++;
                  *(_QWORD *)v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(_QWORD *)&v90 = v40;
              *((_QWORD *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                v40 = (char *)v90;
              }
            }
            else
            {
              v42 = v41 >> 3;
              v22 = v41 >> 3 < -1;
              v43 = (v41 >> 3) + 2;
              if (v22)
                v44 = v43;
              else
                v44 = v42 + 1;
              v45 = (char *)__p[1] - 8 * (v44 >> 1);
              v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                v40 = (char *)__p[1];
              }
              v47 = &v40[-8 * (v44 >> 1)];
              v40 = &v45[v46];
              __p[1] = v47;
              *(_QWORD *)&v90 = &v45[v46];
            }
          }
          *(_QWORD *)v40 = *v39;
          v40 = (char *)(v90 + 8);
          *(_QWORD *)&v90 = v90 + 8;
          v39 = (_QWORD *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      v57 = (_QWORD *)a1[2];
      v58 = -7 - (_QWORD)v57;
      while (v57 != (_QWORD *)a1[1])
      {
        --v57;
        v58 += 8;
        sub_1003431B0((uint64_t)__p, v57);
      }
      v59 = (char *)*a1;
      v60 = *(_OWORD *)__p;
      v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      v90 = v62;
      a1[4] -= v38;
      if (v57 != (_QWORD *)v62)
        *(_QWORD *)&v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      if (v59)
        operator delete(v59);
    }
  }
}

void sub_100FC9F24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100FC9F98()
{
  char *v0;
  uint64_t v1;
  char *v2;
  __int128 v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  __int128 v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  __int128 v33;
  char *v34;
  uint64_t v35;
  char *v36;
  __int128 v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  __int128 v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  __int128 v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  __int128 v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  __int128 v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  __int128 v93;
  char *v94;
  uint64_t v95;
  char *v96;
  __int128 v97;
  char *v98;
  uint64_t v99;
  char *v100;
  __int128 v101;
  char *v102;
  uint64_t v103;
  char *v104;
  __int128 v105;
  char *v106;
  uint64_t v107;
  char *v108;
  __int128 v109;
  char *v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  char *v116;
  __int128 v117;
  char *v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  char *v122;
  __int128 v123;
  char *v124;
  uint64_t v125;
  char *v126;
  __int128 v127;
  char *v128;
  uint64_t v129;
  char *v130;
  __int128 v131;
  char *v132;
  uint64_t v133;
  char *v134;
  __int128 v135;
  char *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  char *v140;
  __int128 v141;
  char *v142;
  uint64_t v143;
  char *v144;
  __int128 v145;
  char *v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  char *v150;
  __int128 v151;
  char *v152;
  uint64_t v153;
  char *v154;
  __int128 v155;
  char *v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  char *v160;
  __int128 v161;
  char *v162;
  uint64_t v163;
  char *v164;
  __int128 v165;
  char *v166;
  uint64_t v167;
  char *v168;
  __int128 v169;
  char *v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  char *v174;
  __int128 v175;
  char *v176;
  uint64_t v177;
  char *v178;
  __int128 v179;
  char *v180;
  uint64_t v181;
  char *v182;
  __int128 v183;
  char *v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  char *v190;
  __int128 v191;
  char *v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  char *v196;
  uint64_t v197;
  char *v198;
  __int128 v199;
  char *v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  char *v204;
  __int128 v205;
  char *v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  char *v210;
  uint64_t v211;
  char *v212;
  uint64_t v213;
  char *v214;
  uint64_t v215;
  char *v216;
  uint64_t v217;
  char *v218;
  __int128 v219;
  char *v220;
  uint64_t v221;
  char *v222;
  uint64_t v223;
  char *v224;
  uint64_t v225;
  char *v226;
  uint64_t v227;
  char *v228;
  __int128 v229;
  char *v230;
  uint64_t v231;
  char *v232;
  __int128 v233;
  char *v234;
  uint64_t v235;
  char *v236;
  uint64_t v237;
  char *v238;
  uint64_t v239;
  char *v240;
  uint64_t v241;
  char *v242;
  uint64_t v243;
  char *v244;
  uint64_t v245;
  char *v246;
  __int128 v247;
  char *v248;
  uint64_t v249;
  char *v250;
  __int128 v251;
  char *v252;
  uint64_t v253;
  char *v254;
  uint64_t v255;
  char *v256;
  uint64_t v257;
  char *v258;
  uint64_t v259;
  char *v260;
  uint64_t v261;
  char *v262;
  __int128 v263;
  char *v264;
  uint64_t v265;
  char *v266;
  __int128 v267;
  char *v268;
  uint64_t v269;
  _OWORD v271[9];
  _OWORD v272[16];
  _OWORD v273[26];
  _OWORD v274[9];
  _OWORD v275[5];
  _OWORD v276[5];
  _OWORD v277[7];
  _OWORD v278[28];
  _OWORD v279[8];
  _OWORD v280[11];
  _OWORD v281[5];
  _OWORD v282[5];
  _OWORD v283[5];
  _OWORD v284[29];
  _OWORD v285[8];
  _OWORD v286[14];
  _OWORD v287[21];
  _OWORD v288[13];
  _OWORD v289[5];
  _OWORD v290[18];
  _OWORD v291[27];
  _OWORD v292[5];
  _OWORD v293[7];
  _OWORD v294[5];
  _OWORD v295[5];
  _OWORD v296[10];
  _OWORD v297[7];
  _OWORD v298[6];
  _OWORD v299[11];
  _OWORD v300[7];
  _OWORD v301[12];
  _OWORD v302[5];
  _OWORD v303[5];
  _OWORD v304[6];
  _OWORD v305[8];
  _OWORD v306[12];
  _OWORD v307[7];
  _OWORD v308[10];
  _OWORD v309[8];
  _OWORD v310[8];
  _OWORD v311[9];
  _OWORD v312[6];
  _OWORD v313[10];
  _OWORD v314[21];
  _OWORD v315[18];
  _OWORD v316[26];
  _OWORD v317[9];
  _OWORD v318[6];
  _OWORD v319[8];
  _OWORD v320[12];
  _OWORD v321[10];
  _OWORD v322[7];
  _OWORD v323[8];
  _OWORD v324[17];
  _OWORD v325[13];
  _OWORD v326[10];
  _OWORD v327[6];
  _OWORD v328[8];
  _OWORD v329[6];
  _OWORD v330[16];
  _OWORD v331[17];
  _OWORD v332[23];
  _OWORD v333[5];
  _OWORD v334[5];
  _OWORD v335[9];
  _OWORD v336[7];
  _OWORD v337[5];
  _OWORD v338[10];
  _OWORD v339[7];
  _OWORD v340[7];
  _OWORD v341[5];
  _OWORD v342[15];
  _OWORD v343[6];
  _OWORD v344[17];
  _OWORD v345[12];
  _OWORD v346[9];
  _OWORD v347[16];
  _OWORD v348[11];
  _OWORD v349[11];
  _OWORD v350[13];
  _OWORD v351[13];
  _OWORD v352[7];
  _OWORD v353[10];
  _OWORD v354[8];
  _OWORD v355[17];
  _OWORD v356[8];
  _OWORD v357[15];
  _OWORD v358[12];
  _OWORD v359[24];
  _OWORD v360[9];
  _OWORD v361[13];
  _OWORD v362[9];
  _OWORD v363[5];
  _OWORD v364[11];
  _OWORD v365[8];

  sub_1015A2E04(&qword_102309648, "Tokyo-1");
  v365[0] = xmmword_101C32990;
  v365[1] = xmmword_101C329A0;
  v365[2] = xmmword_101C329B0;
  v365[3] = xmmword_101C329C0;
  v365[4] = xmmword_101C329D0;
  v365[5] = xmmword_101C329E0;
  v365[6] = xmmword_101C329F0;
  v365[7] = xmmword_101C32990;
  qword_102309668 = 0;
  qword_102309670 = 0;
  qword_102309660 = 0;
  v0 = (char *)operator new(0x80uLL);
  v1 = 0;
  qword_102309660 = (uint64_t)v0;
  qword_102309668 = (uint64_t)v0;
  qword_102309670 = (uint64_t)(v0 + 128);
  do
  {
    v2 = &v0[v1 * 16];
    v3 = v365[v1 + 1];
    *(_OWORD *)v2 = v365[v1];
    *((_OWORD *)v2 + 1) = v3;
    v1 += 2;
  }
  while (v1 != 8);
  qword_102309668 = (uint64_t)(v0 + 128);
  xmmword_102309678 = xmmword_101C32A00;
  unk_102309688 = xmmword_101C32A10;
  sub_1015A2E04(&qword_102309698, "Tokyo-2");
  v364[0] = xmmword_101C32A20;
  v364[1] = xmmword_101C32A30;
  v364[2] = xmmword_101C32A40;
  v364[3] = xmmword_101C32A50;
  v364[4] = xmmword_101C32A60;
  v364[5] = xmmword_101C32A70;
  v364[6] = xmmword_101C32A80;
  v364[7] = xmmword_101C32A90;
  v364[8] = xmmword_101C32AA0;
  v364[9] = xmmword_101C32AB0;
  v364[10] = xmmword_101C32A20;
  qword_1023096B8 = 0;
  qword_1023096C0 = 0;
  qword_1023096B0 = 0;
  v4 = (char *)operator new(0xB0uLL);
  v5 = 0;
  qword_1023096B0 = (uint64_t)v4;
  qword_1023096B8 = (uint64_t)v4;
  qword_1023096C0 = (uint64_t)(v4 + 176);
  do
  {
    *(_OWORD *)&v4[v5 * 16] = v364[v5];
    ++v5;
  }
  while (v5 != 11);
  qword_1023096B8 = (uint64_t)(v4 + 176);
  xmmword_1023096C8 = xmmword_101C32AC0;
  unk_1023096D8 = xmmword_101C32AD0;
  sub_1015A2E04(&qword_1023096E8, "Tokyo-3");
  v363[0] = xmmword_101C32AE0;
  v363[1] = xmmword_101C32AF0;
  v363[2] = xmmword_101C32B00;
  v363[3] = xmmword_101C32B10;
  v363[4] = xmmword_101C32AE0;
  qword_102309708 = 0;
  qword_102309710 = 0;
  qword_102309700 = 0;
  v6 = (char *)operator new(0x50uLL);
  v7 = 0;
  qword_102309700 = (uint64_t)v6;
  qword_102309708 = (uint64_t)v6;
  qword_102309710 = (uint64_t)(v6 + 80);
  do
  {
    *(_OWORD *)&v6[v7 * 16] = v363[v7];
    ++v7;
  }
  while (v7 != 5);
  qword_102309708 = (uint64_t)(v6 + 80);
  xmmword_102309718 = xmmword_101C32B20;
  unk_102309728 = xmmword_101C32B30;
  sub_1015A2E04(&qword_102309738, "Hong Kong-1");
  v362[0] = xmmword_101C32B40;
  v362[1] = xmmword_101C32B50;
  v362[2] = xmmword_101C32B60;
  v362[3] = xmmword_101C32B70;
  v362[4] = xmmword_101C32B80;
  v362[5] = xmmword_101C32B90;
  v362[6] = xmmword_101C32BA0;
  v362[7] = xmmword_101C32BB0;
  v362[8] = xmmword_101C32B40;
  qword_102309758 = 0;
  qword_102309760 = 0;
  qword_102309750 = 0;
  v8 = (char *)operator new(0x90uLL);
  v9 = 0;
  qword_102309750 = (uint64_t)v8;
  qword_102309758 = (uint64_t)v8;
  qword_102309760 = (uint64_t)(v8 + 144);
  do
  {
    *(_OWORD *)&v8[v9 * 16] = v362[v9];
    ++v9;
  }
  while (v9 != 9);
  qword_102309758 = (uint64_t)(v8 + 144);
  xmmword_102309768 = xmmword_101C32BC0;
  unk_102309778 = xmmword_101C32BD0;
  sub_1015A2E04(&qword_102309788, "Hong Kong-2");
  v361[0] = xmmword_101C32BE0;
  v361[1] = xmmword_101C32BF0;
  v361[2] = xmmword_101C32C00;
  v361[3] = xmmword_101C32C10;
  v361[4] = xmmword_101C32C20;
  v361[5] = xmmword_101C32C30;
  v361[6] = xmmword_101C32C40;
  v361[7] = xmmword_101C32C50;
  v361[8] = xmmword_101C32C60;
  v361[9] = xmmword_101C32C70;
  v361[10] = xmmword_101C32C80;
  v361[11] = xmmword_101C32C90;
  v361[12] = xmmword_101C32BE0;
  qword_1023097A8 = 0;
  qword_1023097B0 = 0;
  qword_1023097A0 = 0;
  v10 = (char *)operator new(0xD0uLL);
  v11 = 0;
  qword_1023097A0 = (uint64_t)v10;
  qword_1023097A8 = (uint64_t)v10;
  qword_1023097B0 = (uint64_t)(v10 + 208);
  do
  {
    *(_OWORD *)&v10[v11 * 16] = v361[v11];
    ++v11;
  }
  while (v11 != 13);
  qword_1023097A8 = (uint64_t)(v10 + 208);
  xmmword_1023097B8 = xmmword_101C32CA0;
  unk_1023097C8 = xmmword_101C32CB0;
  sub_1015A2E04(&qword_1023097D8, "Hong Kong-3");
  v360[0] = xmmword_101C32CC0;
  v360[1] = xmmword_101C32CD0;
  v360[2] = xmmword_101C32CE0;
  v360[3] = xmmword_101C32CF0;
  v360[4] = xmmword_101C32D00;
  v360[5] = xmmword_101C32D10;
  v360[6] = xmmword_101C32D20;
  v360[7] = xmmword_101C32D30;
  v360[8] = xmmword_101C32CC0;
  qword_1023097F8 = 0;
  qword_102309800 = 0;
  qword_1023097F0 = 0;
  v12 = (char *)operator new(0x90uLL);
  v13 = 0;
  qword_1023097F0 = (uint64_t)v12;
  qword_1023097F8 = (uint64_t)v12;
  qword_102309800 = (uint64_t)(v12 + 144);
  do
  {
    *(_OWORD *)&v12[v13 * 16] = v360[v13];
    ++v13;
  }
  while (v13 != 9);
  qword_1023097F8 = (uint64_t)(v12 + 144);
  xmmword_102309808 = xmmword_101C32D40;
  unk_102309818 = xmmword_101C32D50;
  sub_1015A2E04(&qword_102309828, "Hong Kong-4");
  v359[0] = xmmword_101C32D60;
  v359[1] = xmmword_101C32D70;
  v359[2] = xmmword_101C32D80;
  v359[3] = xmmword_101C32D90;
  v359[4] = xmmword_101C32DA0;
  v359[5] = xmmword_101C32DB0;
  v359[6] = xmmword_101C32DC0;
  v359[7] = xmmword_101C32DD0;
  v359[8] = xmmword_101C32DE0;
  v359[9] = xmmword_101C32DF0;
  v359[10] = xmmword_101C32E00;
  v359[11] = xmmword_101C32E10;
  v359[12] = xmmword_101C32E20;
  v359[13] = xmmword_101C32E30;
  v359[14] = xmmword_101C32E40;
  v359[15] = xmmword_101C32E50;
  v359[16] = xmmword_101C32E60;
  v359[17] = xmmword_101C32E70;
  v359[18] = xmmword_101C32E80;
  v359[19] = xmmword_101C32E90;
  v359[20] = xmmword_101C32EA0;
  v359[21] = xmmword_101C32EB0;
  v359[22] = xmmword_101C32EC0;
  v359[23] = xmmword_101C32D60;
  qword_102309840 = 0;
  qword_102309848 = 0;
  qword_102309850 = 0;
  v14 = (char *)operator new(0x180uLL);
  v15 = 0;
  qword_102309840 = (uint64_t)v14;
  qword_102309848 = (uint64_t)v14;
  qword_102309850 = (uint64_t)(v14 + 384);
  do
  {
    v16 = &v14[v15 * 16];
    v17 = v359[v15 + 1];
    *(_OWORD *)v16 = v359[v15];
    *((_OWORD *)v16 + 1) = v17;
    v15 += 2;
  }
  while (v15 != 24);
  qword_102309848 = (uint64_t)(v14 + 384);
  xmmword_102309858 = xmmword_101C32ED0;
  unk_102309868 = xmmword_101C32EE0;
  sub_1015A2E04(&qword_102309878, "Singapore-1");
  v358[0] = xmmword_101C32EF0;
  v358[1] = xmmword_101C32F00;
  v358[2] = xmmword_101C32F10;
  v358[3] = xmmword_101C32F20;
  v358[4] = xmmword_101C32F30;
  v358[5] = xmmword_101C32F40;
  v358[6] = xmmword_101C32F50;
  v358[7] = xmmword_101C32F60;
  v358[8] = xmmword_101C32F70;
  v358[9] = xmmword_101C32F80;
  v358[10] = xmmword_101C32F90;
  v358[11] = xmmword_101C32EF0;
  qword_102309898 = 0;
  qword_1023098A0 = 0;
  qword_102309890 = 0;
  v18 = (char *)operator new(0xC0uLL);
  v19 = 0;
  qword_102309890 = (uint64_t)v18;
  qword_102309898 = (uint64_t)v18;
  qword_1023098A0 = (uint64_t)(v18 + 192);
  do
  {
    v20 = &v18[v19 * 16];
    v21 = v358[v19 + 1];
    *(_OWORD *)v20 = v358[v19];
    *((_OWORD *)v20 + 1) = v21;
    v19 += 2;
  }
  while (v19 != 12);
  qword_102309898 = (uint64_t)(v18 + 192);
  xmmword_1023098A8 = xmmword_101C32FA0;
  unk_1023098B8 = xmmword_101C32FB0;
  sub_1015A2E04(&qword_1023098C8, "Singapore-2");
  v357[0] = xmmword_101C32FC0;
  v357[1] = xmmword_101C32FD0;
  v357[2] = xmmword_101C32FE0;
  v357[3] = xmmword_101C32FF0;
  v357[4] = xmmword_101C33000;
  v357[5] = xmmword_101C33010;
  v357[6] = xmmword_101C33020;
  v357[7] = xmmword_101C33030;
  v357[8] = xmmword_101C33040;
  v357[9] = xmmword_101C33050;
  v357[10] = xmmword_101C33060;
  v357[11] = xmmword_101C33070;
  v357[12] = xmmword_101C33080;
  v357[13] = xmmword_101C33090;
  v357[14] = xmmword_101C32FC0;
  qword_1023098E8 = 0;
  qword_1023098F0 = 0;
  qword_1023098E0 = 0;
  v22 = (char *)operator new(0xF0uLL);
  v23 = 0;
  qword_1023098E0 = (uint64_t)v22;
  qword_1023098E8 = (uint64_t)v22;
  qword_1023098F0 = (uint64_t)(v22 + 240);
  do
  {
    *(_OWORD *)&v22[v23 * 16] = v357[v23];
    ++v23;
  }
  while (v23 != 15);
  qword_1023098E8 = (uint64_t)(v22 + 240);
  xmmword_1023098F8 = xmmword_101C330A0;
  unk_102309908 = xmmword_101C330B0;
  sub_1015A2E04(&qword_102309918, "Singapore-3");
  v356[0] = xmmword_101C330C0;
  v356[1] = xmmword_101C330D0;
  v356[2] = xmmword_101C330E0;
  v356[3] = xmmword_101C330F0;
  v356[4] = xmmword_101C33100;
  v356[5] = xmmword_101C33110;
  v356[6] = xmmword_101C33120;
  v356[7] = xmmword_101C330C0;
  qword_102309938 = 0;
  qword_102309940 = 0;
  qword_102309930 = 0;
  v24 = (char *)operator new(0x80uLL);
  v25 = 0;
  qword_102309930 = (uint64_t)v24;
  qword_102309938 = (uint64_t)v24;
  qword_102309940 = (uint64_t)(v24 + 128);
  do
  {
    v26 = &v24[v25 * 16];
    v27 = v356[v25 + 1];
    *(_OWORD *)v26 = v356[v25];
    *((_OWORD *)v26 + 1) = v27;
    v25 += 2;
  }
  while (v25 != 8);
  qword_102309938 = (uint64_t)(v24 + 128);
  xmmword_102309948 = xmmword_101C33100;
  unk_102309958 = xmmword_101C33130;
  sub_1015A2E04(&qword_102309968, "Singapore-4");
  v355[0] = xmmword_101C33140;
  v355[1] = xmmword_101C33150;
  v355[2] = xmmword_101C33160;
  v355[3] = xmmword_101C33170;
  v355[4] = xmmword_101C33180;
  v355[5] = xmmword_101C33190;
  v355[6] = xmmword_101C331A0;
  v355[7] = xmmword_101C331B0;
  v355[8] = xmmword_101C331C0;
  v355[9] = xmmword_101C331D0;
  v355[10] = xmmword_101C331E0;
  v355[11] = xmmword_101C331F0;
  v355[12] = xmmword_101C33200;
  v355[13] = xmmword_101C33210;
  v355[14] = xmmword_101C33220;
  v355[15] = xmmword_101C33230;
  v355[16] = xmmword_101C33140;
  qword_102309988 = 0;
  qword_102309990 = 0;
  qword_102309980 = 0;
  v28 = (char *)operator new(0x110uLL);
  v29 = 0;
  qword_102309980 = (uint64_t)v28;
  qword_102309988 = (uint64_t)v28;
  qword_102309990 = (uint64_t)(v28 + 272);
  do
  {
    *(_OWORD *)&v28[v29 * 16] = v355[v29];
    ++v29;
  }
  while (v29 != 17);
  qword_102309988 = (uint64_t)(v28 + 272);
  xmmword_102309998 = xmmword_101C33240;
  unk_1023099A8 = xmmword_101C33250;
  sub_1015A2E04(&qword_1023099B8, "Singapore-5");
  v354[0] = xmmword_101C33260;
  v354[1] = xmmword_101C33270;
  v354[2] = xmmword_101C33280;
  v354[3] = xmmword_101C33290;
  v354[4] = xmmword_101C332A0;
  v354[5] = xmmword_101C332B0;
  v354[6] = xmmword_101C332C0;
  v354[7] = xmmword_101C33260;
  qword_1023099D8 = 0;
  qword_1023099E0 = 0;
  qword_1023099D0 = 0;
  v30 = (char *)operator new(0x80uLL);
  v31 = 0;
  qword_1023099D0 = (uint64_t)v30;
  qword_1023099D8 = (uint64_t)v30;
  qword_1023099E0 = (uint64_t)(v30 + 128);
  do
  {
    v32 = &v30[v31 * 16];
    v33 = v354[v31 + 1];
    *(_OWORD *)v32 = v354[v31];
    *((_OWORD *)v32 + 1) = v33;
    v31 += 2;
  }
  while (v31 != 8);
  qword_1023099D8 = (uint64_t)(v30 + 128);
  xmmword_1023099E8 = xmmword_101C332D0;
  unk_1023099F8 = xmmword_101C332E0;
  sub_1015A2E04(&qword_102309A08, "Singapore-6");
  v353[0] = xmmword_101C332F0;
  v353[1] = xmmword_101C33300;
  v353[2] = xmmword_101C33310;
  v353[3] = xmmword_101C33320;
  v353[4] = xmmword_101C33330;
  v353[5] = xmmword_101C33340;
  v353[6] = xmmword_101C33350;
  v353[7] = xmmword_101C33360;
  v353[8] = xmmword_101C33370;
  v353[9] = xmmword_101C332F0;
  qword_102309A28 = 0;
  qword_102309A30 = 0;
  qword_102309A20 = 0;
  v34 = (char *)operator new(0xA0uLL);
  v35 = 0;
  qword_102309A20 = (uint64_t)v34;
  qword_102309A28 = (uint64_t)v34;
  qword_102309A30 = (uint64_t)(v34 + 160);
  do
  {
    v36 = &v34[v35 * 16];
    v37 = v353[v35 + 1];
    *(_OWORD *)v36 = v353[v35];
    *((_OWORD *)v36 + 1) = v37;
    v35 += 2;
  }
  while (v35 != 10);
  qword_102309A28 = (uint64_t)(v34 + 160);
  xmmword_102309A38 = xmmword_101C33380;
  unk_102309A48 = xmmword_101C33390;
  sub_1015A2E04(&qword_102309A58, "Singapore-7");
  v352[0] = xmmword_101C333A0;
  v352[1] = xmmword_101C333B0;
  v352[2] = xmmword_101C333C0;
  v352[3] = xmmword_101C333D0;
  v352[4] = xmmword_101C333E0;
  v352[5] = xmmword_101C333F0;
  v352[6] = xmmword_101C333A0;
  qword_102309A78 = 0;
  qword_102309A80 = 0;
  qword_102309A70 = 0;
  v38 = (char *)operator new(0x70uLL);
  v39 = 0;
  qword_102309A70 = (uint64_t)v38;
  qword_102309A78 = (uint64_t)v38;
  qword_102309A80 = (uint64_t)(v38 + 112);
  do
  {
    *(_OWORD *)&v38[v39 * 16] = v352[v39];
    ++v39;
  }
  while (v39 != 7);
  qword_102309A78 = (uint64_t)(v38 + 112);
  xmmword_102309A88 = xmmword_101C33400;
  unk_102309A98 = xmmword_101C33410;
  sub_1015A2E04(&qword_102309AA8, "Shanghai-1");
  v351[0] = xmmword_101C33420;
  v351[1] = xmmword_101C33430;
  v351[2] = xmmword_101C33440;
  v351[3] = xmmword_101C33450;
  v351[4] = xmmword_101C33460;
  v351[5] = xmmword_101C33470;
  v351[6] = xmmword_101C33480;
  v351[7] = xmmword_101C33490;
  v351[8] = xmmword_101C334A0;
  v351[9] = xmmword_101C334B0;
  v351[10] = xmmword_101C334C0;
  v351[11] = xmmword_101C334D0;
  v351[12] = xmmword_101C33420;
  qword_102309AC8 = 0;
  qword_102309AD0 = 0;
  qword_102309AC0 = 0;
  v40 = (char *)operator new(0xD0uLL);
  v41 = 0;
  qword_102309AC0 = (uint64_t)v40;
  qword_102309AC8 = (uint64_t)v40;
  qword_102309AD0 = (uint64_t)(v40 + 208);
  do
  {
    *(_OWORD *)&v40[v41 * 16] = v351[v41];
    ++v41;
  }
  while (v41 != 13);
  qword_102309AC8 = (uint64_t)(v40 + 208);
  xmmword_102309AD8 = xmmword_101C334E0;
  unk_102309AE8 = xmmword_101C334F0;
  sub_1015A2E04(&qword_102309AF8, "Shanghai-2");
  v350[0] = xmmword_101C33500;
  v350[1] = xmmword_101C33510;
  v350[2] = xmmword_101C33520;
  v350[3] = xmmword_101C33530;
  v350[4] = xmmword_101C33540;
  v350[5] = xmmword_101C33550;
  v350[6] = xmmword_101C33560;
  v350[7] = xmmword_101C33570;
  v350[8] = xmmword_101C33580;
  v350[9] = xmmword_101C33590;
  v350[10] = xmmword_101C335A0;
  v350[11] = xmmword_101C335B0;
  v350[12] = xmmword_101C33500;
  qword_102309B18 = 0;
  qword_102309B20 = 0;
  qword_102309B10 = 0;
  v42 = (char *)operator new(0xD0uLL);
  v43 = 0;
  qword_102309B10 = (uint64_t)v42;
  qword_102309B18 = (uint64_t)v42;
  qword_102309B20 = (uint64_t)(v42 + 208);
  do
  {
    *(_OWORD *)&v42[v43 * 16] = v350[v43];
    ++v43;
  }
  while (v43 != 13);
  qword_102309B18 = (uint64_t)(v42 + 208);
  xmmword_102309B28 = xmmword_101C335C0;
  unk_102309B38 = xmmword_101C335D0;
  sub_1015A2E04(&qword_102309B48, "Shanghai-3");
  v349[0] = xmmword_101C335E0;
  v349[1] = xmmword_101C335F0;
  v349[2] = xmmword_101C33600;
  v349[3] = xmmword_101C33610;
  v349[4] = xmmword_101C33620;
  v349[5] = xmmword_101C33630;
  v349[6] = xmmword_101C33640;
  v349[7] = xmmword_101C33650;
  v349[8] = xmmword_101C33660;
  v349[9] = xmmword_101C33670;
  v349[10] = xmmword_101C335E0;
  qword_102309B68 = 0;
  qword_102309B70 = 0;
  qword_102309B60 = 0;
  v44 = (char *)operator new(0xB0uLL);
  v45 = 0;
  qword_102309B60 = (uint64_t)v44;
  qword_102309B68 = (uint64_t)v44;
  qword_102309B70 = (uint64_t)(v44 + 176);
  do
  {
    *(_OWORD *)&v44[v45 * 16] = v349[v45];
    ++v45;
  }
  while (v45 != 11);
  qword_102309B68 = (uint64_t)(v44 + 176);
  xmmword_102309B78 = xmmword_101C33680;
  unk_102309B88 = xmmword_101C33690;
  sub_1015A2E04(&qword_102309B98, "Shanghai-4");
  v348[0] = xmmword_101C336A0;
  v348[1] = xmmword_101C336B0;
  v348[2] = xmmword_101C336C0;
  v348[3] = xmmword_101C336D0;
  v348[4] = xmmword_101C336E0;
  v348[5] = xmmword_101C336F0;
  v348[6] = xmmword_101C33700;
  v348[7] = xmmword_101C33710;
  v348[8] = xmmword_101C33720;
  v348[9] = xmmword_101C33730;
  v348[10] = xmmword_101C336A0;
  qword_102309BB8 = 0;
  qword_102309BC0 = 0;
  qword_102309BB0 = 0;
  v46 = (char *)operator new(0xB0uLL);
  v47 = 0;
  qword_102309BB0 = (uint64_t)v46;
  qword_102309BB8 = (uint64_t)v46;
  qword_102309BC0 = (uint64_t)(v46 + 176);
  do
  {
    *(_OWORD *)&v46[v47 * 16] = v348[v47];
    ++v47;
  }
  while (v47 != 11);
  qword_102309BB8 = (uint64_t)(v46 + 176);
  xmmword_102309BC8 = xmmword_101C33740;
  unk_102309BD8 = xmmword_101C33750;
  sub_1015A2E04(&qword_102309BE8, "Shanghai-5");
  v347[0] = xmmword_101C33760;
  v347[1] = xmmword_101C33770;
  v347[2] = xmmword_101C33780;
  v347[3] = xmmword_101C33790;
  v347[4] = xmmword_101C337A0;
  v347[5] = xmmword_101C337B0;
  v347[6] = xmmword_101C337C0;
  v347[7] = xmmword_101C337D0;
  v347[8] = xmmword_101C337E0;
  v347[9] = xmmword_101C337F0;
  v347[10] = xmmword_101C33800;
  v347[11] = xmmword_101C33810;
  v347[12] = xmmword_101C33820;
  v347[13] = xmmword_101C33830;
  v347[14] = xmmword_101C33840;
  v347[15] = xmmword_101C33760;
  qword_102309C08 = 0;
  qword_102309C10 = 0;
  qword_102309C00 = 0;
  v48 = (char *)operator new(0x100uLL);
  v49 = 0;
  qword_102309C00 = (uint64_t)v48;
  qword_102309C08 = (uint64_t)v48;
  qword_102309C10 = (uint64_t)(v48 + 256);
  do
  {
    v50 = &v48[v49 * 16];
    v51 = v347[v49 + 1];
    *(_OWORD *)v50 = v347[v49];
    *((_OWORD *)v50 + 1) = v51;
    v49 += 2;
  }
  while (v49 != 16);
  qword_102309C08 = (uint64_t)(v48 + 256);
  xmmword_102309C18 = xmmword_101C33850;
  unk_102309C28 = xmmword_101C33860;
  sub_1015A2E04(&qword_102309C38, "Shanghai-6");
  v346[0] = xmmword_101C33870;
  v346[1] = xmmword_101C33880;
  v346[2] = xmmword_101C33890;
  v346[3] = xmmword_101C338A0;
  v346[4] = xmmword_101C338B0;
  v346[5] = xmmword_101C338C0;
  v346[6] = xmmword_101C338D0;
  v346[7] = xmmword_101C338E0;
  v346[8] = xmmword_101C33870;
  qword_102309C58 = 0;
  qword_102309C60 = 0;
  qword_102309C50 = 0;
  v52 = (char *)operator new(0x90uLL);
  v53 = 0;
  qword_102309C50 = (uint64_t)v52;
  qword_102309C58 = (uint64_t)v52;
  qword_102309C60 = (uint64_t)(v52 + 144);
  do
  {
    *(_OWORD *)&v52[v53 * 16] = v346[v53];
    ++v53;
  }
  while (v53 != 9);
  qword_102309C58 = (uint64_t)(v52 + 144);
  xmmword_102309C68 = xmmword_101C338F0;
  unk_102309C78 = xmmword_101C33900;
  sub_1015A2E04(&qword_102309C88, "Shanghai-7");
  v345[0] = xmmword_101C33910;
  v345[1] = xmmword_101C33920;
  v345[2] = xmmword_101C33930;
  v345[3] = xmmword_101C33940;
  v345[4] = xmmword_101C33950;
  v345[5] = xmmword_101C33960;
  v345[6] = xmmword_101C33970;
  v345[7] = xmmword_101C33980;
  v345[8] = xmmword_101C33990;
  v345[9] = xmmword_101C339A0;
  v345[10] = xmmword_101C339B0;
  v345[11] = xmmword_101C33910;
  qword_102309CA8 = 0;
  qword_102309CB0 = 0;
  qword_102309CA0 = 0;
  v54 = (char *)operator new(0xC0uLL);
  v55 = 0;
  qword_102309CA0 = (uint64_t)v54;
  qword_102309CA8 = (uint64_t)v54;
  qword_102309CB0 = (uint64_t)(v54 + 192);
  do
  {
    v56 = &v54[v55 * 16];
    v57 = v345[v55 + 1];
    *(_OWORD *)v56 = v345[v55];
    *((_OWORD *)v56 + 1) = v57;
    v55 += 2;
  }
  while (v55 != 12);
  qword_102309CA8 = (uint64_t)(v54 + 192);
  xmmword_102309CB8 = xmmword_101C339C0;
  unk_102309CC8 = xmmword_101C339D0;
  sub_1015A2E04(&qword_102309CD8, "Shanghai-8");
  v344[0] = xmmword_101C339E0;
  v344[1] = xmmword_101C339F0;
  v344[2] = xmmword_101C33A00;
  v344[3] = xmmword_101C33A10;
  v344[4] = xmmword_101C33A20;
  v344[5] = xmmword_101C33A30;
  v344[6] = xmmword_101C33A40;
  v344[7] = xmmword_101C33A50;
  v344[8] = xmmword_101C33A60;
  v344[9] = xmmword_101C33A70;
  v344[10] = xmmword_101C33A80;
  v344[11] = xmmword_101C33A90;
  v344[12] = xmmword_101C33AA0;
  v344[13] = xmmword_101C33AB0;
  v344[14] = xmmword_101C33AC0;
  v344[15] = xmmword_101C33AD0;
  v344[16] = xmmword_101C339E0;
  qword_102309CF8 = 0;
  qword_102309D00 = 0;
  qword_102309CF0 = 0;
  v58 = (char *)operator new(0x110uLL);
  v59 = 0;
  qword_102309CF0 = (uint64_t)v58;
  qword_102309CF8 = (uint64_t)v58;
  qword_102309D00 = (uint64_t)(v58 + 272);
  do
  {
    *(_OWORD *)&v58[v59 * 16] = v344[v59];
    ++v59;
  }
  while (v59 != 17);
  qword_102309CF8 = (uint64_t)(v58 + 272);
  xmmword_102309D08 = xmmword_101C33AE0;
  unk_102309D18 = xmmword_101C33AF0;
  sub_1015A2E04(&qword_102309D28, "Shanghai-9");
  v343[0] = xmmword_101C33B00;
  v343[1] = xmmword_101C33B10;
  v343[2] = xmmword_101C33B20;
  v343[3] = xmmword_101C33B30;
  v343[4] = xmmword_101C33B40;
  v343[5] = xmmword_101C33B00;
  qword_102309D48 = 0;
  qword_102309D50 = 0;
  qword_102309D40 = 0;
  v60 = (char *)operator new(0x60uLL);
  v61 = 0;
  qword_102309D40 = (uint64_t)v60;
  qword_102309D48 = (uint64_t)v60;
  qword_102309D50 = (uint64_t)(v60 + 96);
  do
  {
    v62 = &v60[v61 * 16];
    v63 = v343[v61 + 1];
    *(_OWORD *)v62 = v343[v61];
    *((_OWORD *)v62 + 1) = v63;
    v61 += 2;
  }
  while (v61 != 6);
  qword_102309D48 = (uint64_t)(v60 + 96);
  xmmword_102309D58 = xmmword_101C33B50;
  unk_102309D68 = xmmword_101C33B60;
  sub_1015A2E04(&qword_102309D78, "Shanghai-10");
  v342[0] = xmmword_101C33B70;
  v342[1] = xmmword_101C33B80;
  v342[2] = xmmword_101C33B90;
  v342[3] = xmmword_101C33BA0;
  v342[4] = xmmword_101C33BB0;
  v342[5] = xmmword_101C33BC0;
  v342[6] = xmmword_101C33BD0;
  v342[7] = xmmword_101C33BE0;
  v342[8] = xmmword_101C33BF0;
  v342[9] = xmmword_101C33C00;
  v342[10] = xmmword_101C33C10;
  v342[11] = xmmword_101C33C20;
  v342[12] = xmmword_101C33C30;
  v342[13] = xmmword_101C33C40;
  v342[14] = xmmword_101C33B70;
  qword_102309D98 = 0;
  qword_102309DA0 = 0;
  qword_102309D90 = 0;
  v64 = (char *)operator new(0xF0uLL);
  v65 = 0;
  qword_102309D90 = (uint64_t)v64;
  qword_102309D98 = (uint64_t)v64;
  qword_102309DA0 = (uint64_t)(v64 + 240);
  do
  {
    *(_OWORD *)&v64[v65 * 16] = v342[v65];
    ++v65;
  }
  while (v65 != 15);
  qword_102309D98 = (uint64_t)(v64 + 240);
  xmmword_102309DA8 = xmmword_101C33C50;
  unk_102309DB8 = xmmword_101C33C60;
  sub_1015A2E04(&qword_102309DC8, "Beijing-1");
  v341[0] = xmmword_101C33C70;
  v341[1] = xmmword_101C33C80;
  v341[2] = xmmword_101C33C90;
  v341[3] = xmmword_101C33CA0;
  v341[4] = xmmword_101C33C70;
  qword_102309DE8 = 0;
  qword_102309DF0 = 0;
  qword_102309DE0 = 0;
  v66 = (char *)operator new(0x50uLL);
  v67 = 0;
  qword_102309DE0 = (uint64_t)v66;
  qword_102309DE8 = (uint64_t)v66;
  qword_102309DF0 = (uint64_t)(v66 + 80);
  do
  {
    *(_OWORD *)&v66[v67 * 16] = v341[v67];
    ++v67;
  }
  while (v67 != 5);
  qword_102309DE8 = (uint64_t)(v66 + 80);
  xmmword_102309DF8 = xmmword_101C33C70;
  unk_102309E08 = xmmword_101C33CB0;
  sub_1015A2E04(&qword_102309E18, "Beijing-2");
  v340[0] = xmmword_101C33CC0;
  v340[1] = xmmword_101C33CD0;
  v340[2] = xmmword_101C33CE0;
  v340[3] = xmmword_101C33CF0;
  v340[4] = xmmword_101C33D00;
  v340[5] = xmmword_101C33D10;
  v340[6] = xmmword_101C33CC0;
  qword_102309E38 = 0;
  qword_102309E40 = 0;
  qword_102309E30 = 0;
  v68 = (char *)operator new(0x70uLL);
  v69 = 0;
  qword_102309E30 = (uint64_t)v68;
  qword_102309E38 = (uint64_t)v68;
  qword_102309E40 = (uint64_t)(v68 + 112);
  do
  {
    *(_OWORD *)&v68[v69 * 16] = v340[v69];
    ++v69;
  }
  while (v69 != 7);
  qword_102309E38 = (uint64_t)(v68 + 112);
  xmmword_102309E48 = xmmword_101C33D20;
  unk_102309E58 = xmmword_101C33D30;
  sub_1015A2E04(&qword_102309E68, "Beijing-3");
  v339[0] = xmmword_101C33D40;
  v339[1] = xmmword_101C33D50;
  v339[2] = xmmword_101C33D60;
  v339[3] = xmmword_101C33D70;
  v339[4] = xmmword_101C33D80;
  v339[5] = xmmword_101C33D90;
  v339[6] = xmmword_101C33D40;
  qword_102309E88 = 0;
  qword_102309E90 = 0;
  qword_102309E80 = 0;
  v70 = (char *)operator new(0x70uLL);
  v71 = 0;
  qword_102309E80 = (uint64_t)v70;
  qword_102309E88 = (uint64_t)v70;
  qword_102309E90 = (uint64_t)(v70 + 112);
  do
  {
    *(_OWORD *)&v70[v71 * 16] = v339[v71];
    ++v71;
  }
  while (v71 != 7);
  qword_102309E88 = (uint64_t)(v70 + 112);
  xmmword_102309E98 = xmmword_101C33DA0;
  unk_102309EA8 = xmmword_101C33DB0;
  sub_1015A2E04(&qword_102309EB8, "Beijing-4");
  v338[0] = xmmword_101C33DC0;
  v338[1] = xmmword_101C33DD0;
  v338[2] = xmmword_101C33DE0;
  v338[3] = xmmword_101C33DF0;
  v338[4] = xmmword_101C33E00;
  v338[5] = xmmword_101C33E10;
  v338[6] = xmmword_101C33E20;
  v338[7] = xmmword_101C33E30;
  v338[8] = xmmword_101C33E40;
  v338[9] = xmmword_101C33DC0;
  qword_102309ED8 = 0;
  qword_102309EE0 = 0;
  qword_102309ED0 = 0;
  v72 = (char *)operator new(0xA0uLL);
  v73 = 0;
  qword_102309ED0 = (uint64_t)v72;
  qword_102309ED8 = (uint64_t)v72;
  qword_102309EE0 = (uint64_t)(v72 + 160);
  do
  {
    v74 = &v72[v73 * 16];
    v75 = v338[v73 + 1];
    *(_OWORD *)v74 = v338[v73];
    *((_OWORD *)v74 + 1) = v75;
    v73 += 2;
  }
  while (v73 != 10);
  qword_102309ED8 = (uint64_t)(v72 + 160);
  xmmword_102309EE8 = xmmword_101C33DE0;
  unk_102309EF8 = xmmword_101C33E50;
  sub_1015A2E04(&qword_102309F08, "Beijing-5");
  v337[0] = xmmword_101C33E60;
  v337[1] = xmmword_101C33E70;
  v337[2] = xmmword_101C33E80;
  v337[3] = xmmword_101C33E90;
  v337[4] = xmmword_101C33E60;
  qword_102309F28 = 0;
  qword_102309F30 = 0;
  qword_102309F20 = 0;
  v76 = (char *)operator new(0x50uLL);
  v77 = 0;
  qword_102309F20 = (uint64_t)v76;
  qword_102309F28 = (uint64_t)v76;
  qword_102309F30 = (uint64_t)(v76 + 80);
  do
  {
    *(_OWORD *)&v76[v77 * 16] = v337[v77];
    ++v77;
  }
  while (v77 != 5);
  qword_102309F28 = (uint64_t)(v76 + 80);
  xmmword_102309F38 = xmmword_101C33E60;
  unk_102309F48 = xmmword_101C33EA0;
  sub_1015A2E04(&qword_102309F58, "Beijing-6");
  v336[0] = xmmword_101C33EB0;
  v336[1] = xmmword_101C33EC0;
  v336[2] = xmmword_101C33ED0;
  v336[3] = xmmword_101C33EE0;
  v336[4] = xmmword_101C33EF0;
  v336[5] = xmmword_101C33F00;
  v336[6] = xmmword_101C33EB0;
  qword_102309F78 = 0;
  qword_102309F80 = 0;
  qword_102309F70 = 0;
  v78 = (char *)operator new(0x70uLL);
  v79 = 0;
  qword_102309F70 = (uint64_t)v78;
  qword_102309F78 = (uint64_t)v78;
  qword_102309F80 = (uint64_t)(v78 + 112);
  do
  {
    *(_OWORD *)&v78[v79 * 16] = v336[v79];
    ++v79;
  }
  while (v79 != 7);
  qword_102309F78 = (uint64_t)(v78 + 112);
  xmmword_102309F88 = xmmword_101C33F10;
  unk_102309F98 = xmmword_101C33F20;
  sub_1015A2E04(&qword_102309FA8, "Beijing-7");
  v335[0] = xmmword_101C33F30;
  v335[1] = xmmword_101C33F40;
  v335[2] = xmmword_101C33F50;
  v335[3] = xmmword_101C33F60;
  v335[4] = xmmword_101C33F70;
  v335[5] = xmmword_101C33F80;
  v335[6] = xmmword_101C33F90;
  v335[7] = xmmword_101C33FA0;
  v335[8] = xmmword_101C33F30;
  qword_102309FC8 = 0;
  qword_102309FD0 = 0;
  qword_102309FC0 = 0;
  v80 = (char *)operator new(0x90uLL);
  v81 = 0;
  qword_102309FC0 = (uint64_t)v80;
  qword_102309FC8 = (uint64_t)v80;
  qword_102309FD0 = (uint64_t)(v80 + 144);
  do
  {
    *(_OWORD *)&v80[v81 * 16] = v335[v81];
    ++v81;
  }
  while (v81 != 9);
  qword_102309FC8 = (uint64_t)(v80 + 144);
  xmmword_102309FD8 = xmmword_101C33FB0;
  unk_102309FE8 = xmmword_101C33FC0;
  sub_1015A2E04(&qword_102309FF8, "Beijing-8");
  v334[0] = xmmword_101C33FD0;
  v334[1] = xmmword_101C33FE0;
  v334[2] = xmmword_101C33FF0;
  v334[3] = xmmword_101C34000;
  v334[4] = xmmword_101C33FD0;
  qword_10230A018 = 0;
  qword_10230A020 = 0;
  qword_10230A010 = 0;
  v82 = (char *)operator new(0x50uLL);
  v83 = 0;
  qword_10230A010 = (uint64_t)v82;
  qword_10230A018 = (uint64_t)v82;
  qword_10230A020 = (uint64_t)(v82 + 80);
  do
  {
    *(_OWORD *)&v82[v83 * 16] = v334[v83];
    ++v83;
  }
  while (v83 != 5);
  qword_10230A018 = (uint64_t)(v82 + 80);
  xmmword_10230A028 = xmmword_101C33FD0;
  unk_10230A038 = xmmword_101C34010;
  sub_1015A2E04(&qword_10230A048, "Beijing-9");
  v333[0] = xmmword_101C34020;
  v333[1] = xmmword_101C34030;
  v333[2] = xmmword_101C34040;
  v333[3] = xmmword_101C34050;
  v333[4] = xmmword_101C34020;
  qword_10230A068 = 0;
  qword_10230A070 = 0;
  qword_10230A060 = 0;
  v84 = (char *)operator new(0x50uLL);
  v85 = 0;
  qword_10230A060 = (uint64_t)v84;
  qword_10230A068 = (uint64_t)v84;
  qword_10230A070 = (uint64_t)(v84 + 80);
  do
  {
    *(_OWORD *)&v84[v85 * 16] = v333[v85];
    ++v85;
  }
  while (v85 != 5);
  qword_10230A068 = (uint64_t)(v84 + 80);
  xmmword_10230A078 = xmmword_101C34060;
  unk_10230A088 = xmmword_101C34040;
  sub_1015A2E04(&qword_10230A098, "Paris-1");
  v332[0] = xmmword_101C34070;
  v332[1] = xmmword_101C34080;
  v332[2] = xmmword_101C34090;
  v332[3] = xmmword_101C340A0;
  v332[4] = xmmword_101C340B0;
  v332[5] = xmmword_101C340C0;
  v332[6] = xmmword_101C340D0;
  v332[7] = xmmword_101C340E0;
  v332[8] = xmmword_101C340F0;
  v332[9] = xmmword_101C34100;
  v332[10] = xmmword_101C34110;
  v332[11] = xmmword_101C34120;
  v332[12] = xmmword_101C34130;
  v332[13] = xmmword_101C34140;
  v332[14] = xmmword_101C34150;
  v332[15] = xmmword_101C34160;
  v332[16] = xmmword_101C34170;
  v332[17] = xmmword_101C34180;
  v332[18] = xmmword_101C34190;
  v332[19] = xmmword_101C341A0;
  v332[20] = xmmword_101C341B0;
  v332[21] = xmmword_101C341C0;
  v332[22] = xmmword_101C34070;
  qword_10230A0B0 = 0;
  qword_10230A0B8 = 0;
  qword_10230A0C0 = 0;
  v86 = (char *)operator new(0x170uLL);
  v87 = 0;
  qword_10230A0B0 = (uint64_t)v86;
  qword_10230A0B8 = (uint64_t)v86;
  qword_10230A0C0 = (uint64_t)(v86 + 368);
  do
  {
    *(_OWORD *)&v86[v87 * 16] = v332[v87];
    ++v87;
  }
  while (v87 != 23);
  qword_10230A0B8 = (uint64_t)(v86 + 368);
  xmmword_10230A0C8 = xmmword_101C341D0;
  unk_10230A0D8 = xmmword_101C341E0;
  sub_1015A2E04(&qword_10230A0E8, "Paris-2");
  v331[0] = xmmword_101C341F0;
  v331[1] = xmmword_101C34200;
  v331[2] = xmmword_101C34210;
  v331[3] = xmmword_101C34220;
  v331[4] = xmmword_101C34230;
  v331[5] = xmmword_101C34240;
  v331[6] = xmmword_101C34250;
  v331[7] = xmmword_101C34260;
  v331[8] = xmmword_101C34270;
  v331[9] = xmmword_101C34280;
  v331[10] = xmmword_101C34290;
  v331[11] = xmmword_101C342A0;
  v331[12] = xmmword_101C342B0;
  v331[13] = xmmword_101C342C0;
  v331[14] = xmmword_101C342D0;
  v331[15] = xmmword_101C342E0;
  v331[16] = xmmword_101C341F0;
  qword_10230A108 = 0;
  qword_10230A110 = 0;
  qword_10230A100 = 0;
  v88 = (char *)operator new(0x110uLL);
  v89 = 0;
  qword_10230A100 = (uint64_t)v88;
  qword_10230A108 = (uint64_t)v88;
  qword_10230A110 = (uint64_t)(v88 + 272);
  do
  {
    *(_OWORD *)&v88[v89 * 16] = v331[v89];
    ++v89;
  }
  while (v89 != 17);
  qword_10230A108 = (uint64_t)(v88 + 272);
  xmmword_10230A118 = xmmword_101C342F0;
  unk_10230A128 = xmmword_101C34300;
  sub_1015A2E04(&qword_10230A138, "London-1");
  v330[0] = xmmword_101C34310;
  v330[1] = xmmword_101C34320;
  v330[2] = xmmword_101C34330;
  v330[3] = xmmword_101C34340;
  v330[4] = xmmword_101C34350;
  v330[5] = xmmword_101C34360;
  v330[6] = xmmword_101C34370;
  v330[7] = xmmword_101C34380;
  v330[8] = xmmword_101C34390;
  v330[9] = xmmword_101C343A0;
  v330[10] = xmmword_101C343B0;
  v330[11] = xmmword_101C343C0;
  v330[12] = xmmword_101C343D0;
  v330[13] = xmmword_101C343E0;
  v330[14] = xmmword_101C343F0;
  v330[15] = xmmword_101C34310;
  qword_10230A158 = 0;
  qword_10230A160 = 0;
  qword_10230A150 = 0;
  v90 = (char *)operator new(0x100uLL);
  v91 = 0;
  qword_10230A150 = (uint64_t)v90;
  qword_10230A158 = (uint64_t)v90;
  qword_10230A160 = (uint64_t)(v90 + 256);
  do
  {
    v92 = &v90[v91 * 16];
    v93 = v330[v91 + 1];
    *(_OWORD *)v92 = v330[v91];
    *((_OWORD *)v92 + 1) = v93;
    v91 += 2;
  }
  while (v91 != 16);
  qword_10230A158 = (uint64_t)(v90 + 256);
  xmmword_10230A168 = xmmword_101C34400;
  unk_10230A178 = xmmword_101C34410;
  sub_1015A2E04(&qword_10230A188, "London-2");
  v329[0] = xmmword_101C34420;
  v329[1] = xmmword_101C34430;
  v329[2] = xmmword_101C34440;
  v329[3] = xmmword_101C34450;
  v329[4] = xmmword_101C34460;
  v329[5] = xmmword_101C34420;
  qword_10230A1A8 = 0;
  qword_10230A1B0 = 0;
  qword_10230A1A0 = 0;
  v94 = (char *)operator new(0x60uLL);
  v95 = 0;
  qword_10230A1A0 = (uint64_t)v94;
  qword_10230A1A8 = (uint64_t)v94;
  qword_10230A1B0 = (uint64_t)(v94 + 96);
  do
  {
    v96 = &v94[v95 * 16];
    v97 = v329[v95 + 1];
    *(_OWORD *)v96 = v329[v95];
    *((_OWORD *)v96 + 1) = v97;
    v95 += 2;
  }
  while (v95 != 6);
  qword_10230A1A8 = (uint64_t)(v94 + 96);
  xmmword_10230A1B8 = xmmword_101C34470;
  unk_10230A1C8 = xmmword_101C34480;
  sub_1015A2E04(&qword_10230A1D8, "London-3");
  v328[0] = xmmword_101C34490;
  v328[1] = xmmword_101C344A0;
  v328[2] = xmmword_101C344B0;
  v328[3] = xmmword_101C344C0;
  v328[4] = xmmword_101C344D0;
  v328[5] = xmmword_101C344E0;
  v328[6] = xmmword_101C344F0;
  v328[7] = xmmword_101C34490;
  qword_10230A1F8 = 0;
  qword_10230A200 = 0;
  qword_10230A1F0 = 0;
  v98 = (char *)operator new(0x80uLL);
  v99 = 0;
  qword_10230A1F0 = (uint64_t)v98;
  qword_10230A1F8 = (uint64_t)v98;
  qword_10230A200 = (uint64_t)(v98 + 128);
  do
  {
    v100 = &v98[v99 * 16];
    v101 = v328[v99 + 1];
    *(_OWORD *)v100 = v328[v99];
    *((_OWORD *)v100 + 1) = v101;
    v99 += 2;
  }
  while (v99 != 8);
  qword_10230A1F8 = (uint64_t)(v98 + 128);
  xmmword_10230A208 = xmmword_101C34500;
  unk_10230A218 = xmmword_101C34510;
  sub_1015A2E04(&qword_10230A228, "London-4");
  v327[0] = xmmword_101C34520;
  v327[1] = xmmword_101C34530;
  v327[2] = xmmword_101C34540;
  v327[3] = xmmword_101C34550;
  v327[4] = xmmword_101C34560;
  v327[5] = xmmword_101C34520;
  qword_10230A248 = 0;
  qword_10230A250 = 0;
  qword_10230A240 = 0;
  v102 = (char *)operator new(0x60uLL);
  v103 = 0;
  qword_10230A240 = (uint64_t)v102;
  qword_10230A248 = (uint64_t)v102;
  qword_10230A250 = (uint64_t)(v102 + 96);
  do
  {
    v104 = &v102[v103 * 16];
    v105 = v327[v103 + 1];
    *(_OWORD *)v104 = v327[v103];
    *((_OWORD *)v104 + 1) = v105;
    v103 += 2;
  }
  while (v103 != 6);
  qword_10230A248 = (uint64_t)(v102 + 96);
  xmmword_10230A258 = xmmword_101C34570;
  unk_10230A268 = xmmword_101C34580;
  sub_1015A2E04(&qword_10230A278, "London-5");
  v326[0] = xmmword_101C34590;
  v326[1] = xmmword_101C345A0;
  v326[2] = xmmword_101C345B0;
  v326[3] = xmmword_101C345C0;
  v326[4] = xmmword_101C345D0;
  v326[5] = xmmword_101C345E0;
  v326[6] = xmmword_101C345F0;
  v326[7] = xmmword_101C34600;
  v326[8] = xmmword_101C34610;
  v326[9] = xmmword_101C34590;
  qword_10230A298 = 0;
  qword_10230A2A0 = 0;
  qword_10230A290 = 0;
  v106 = (char *)operator new(0xA0uLL);
  v107 = 0;
  qword_10230A290 = (uint64_t)v106;
  qword_10230A298 = (uint64_t)v106;
  qword_10230A2A0 = (uint64_t)(v106 + 160);
  do
  {
    v108 = &v106[v107 * 16];
    v109 = v326[v107 + 1];
    *(_OWORD *)v108 = v326[v107];
    *((_OWORD *)v108 + 1) = v109;
    v107 += 2;
  }
  while (v107 != 10);
  qword_10230A298 = (uint64_t)(v106 + 160);
  xmmword_10230A2A8 = xmmword_101C34620;
  unk_10230A2B8 = xmmword_101C34630;
  sub_1015A2E04(&qword_10230A2C8, "London-6");
  v325[0] = xmmword_101C34640;
  v325[1] = xmmword_101C34650;
  v325[2] = xmmword_101C34660;
  v325[3] = xmmword_101C34670;
  v325[4] = xmmword_101C34680;
  v325[5] = xmmword_101C34690;
  v325[6] = xmmword_101C346A0;
  v325[7] = xmmword_101C346B0;
  v325[8] = xmmword_101C346C0;
  v325[9] = xmmword_101C346D0;
  v325[10] = xmmword_101C346E0;
  v325[11] = xmmword_101C346F0;
  v325[12] = xmmword_101C34640;
  qword_10230A2E8 = 0;
  qword_10230A2F0 = 0;
  qword_10230A2E0 = 0;
  v110 = (char *)operator new(0xD0uLL);
  v111 = 0;
  qword_10230A2E0 = (uint64_t)v110;
  qword_10230A2E8 = (uint64_t)v110;
  qword_10230A2F0 = (uint64_t)(v110 + 208);
  do
  {
    *(_OWORD *)&v110[v111 * 16] = v325[v111];
    ++v111;
  }
  while (v111 != 13);
  qword_10230A2E8 = (uint64_t)(v110 + 208);
  xmmword_10230A2F8 = xmmword_101C34700;
  unk_10230A308 = xmmword_101C34710;
  sub_1015A2E04(&qword_10230A318, "London-7");
  v324[0] = xmmword_101C34720;
  v324[1] = xmmword_101C34730;
  v324[2] = xmmword_101C34740;
  v324[3] = xmmword_101C34750;
  v324[4] = xmmword_101C34760;
  v324[5] = xmmword_101C34770;
  v324[6] = xmmword_101C34780;
  v324[7] = xmmword_101C34790;
  v324[8] = xmmword_101C347A0;
  v324[9] = xmmword_101C347B0;
  v324[10] = xmmword_101C347C0;
  v324[11] = xmmword_101C347D0;
  v324[12] = xmmword_101C347E0;
  v324[13] = xmmword_101C347F0;
  v324[14] = xmmword_101C34800;
  v324[15] = xmmword_101C34810;
  v324[16] = xmmword_101C34720;
  qword_10230A338 = 0;
  qword_10230A340 = 0;
  qword_10230A330 = 0;
  v112 = (char *)operator new(0x110uLL);
  v113 = 0;
  qword_10230A330 = (uint64_t)v112;
  qword_10230A338 = (uint64_t)v112;
  qword_10230A340 = (uint64_t)(v112 + 272);
  do
  {
    *(_OWORD *)&v112[v113 * 16] = v324[v113];
    ++v113;
  }
  while (v113 != 17);
  qword_10230A338 = (uint64_t)(v112 + 272);
  xmmword_10230A348 = xmmword_101C34790;
  unk_10230A358 = xmmword_101C34820;
  sub_1015A2E04(&qword_10230A368, "Frankfurt-1");
  v323[0] = xmmword_101C34830;
  v323[1] = xmmword_101C34840;
  v323[2] = xmmword_101C34850;
  v323[3] = xmmword_101C34860;
  v323[4] = xmmword_101C34870;
  v323[5] = xmmword_101C34880;
  v323[6] = xmmword_101C34890;
  v323[7] = xmmword_101C34830;
  qword_10230A388 = 0;
  qword_10230A390 = 0;
  qword_10230A380 = 0;
  v114 = (char *)operator new(0x80uLL);
  v115 = 0;
  qword_10230A380 = (uint64_t)v114;
  qword_10230A388 = (uint64_t)v114;
  qword_10230A390 = (uint64_t)(v114 + 128);
  do
  {
    v116 = &v114[v115 * 16];
    v117 = v323[v115 + 1];
    *(_OWORD *)v116 = v323[v115];
    *((_OWORD *)v116 + 1) = v117;
    v115 += 2;
  }
  while (v115 != 8);
  qword_10230A388 = (uint64_t)(v114 + 128);
  xmmword_10230A398 = xmmword_101C348A0;
  unk_10230A3A8 = xmmword_101C348B0;
  sub_1015A2E04(&qword_10230A3B8, "Frankfurt-2");
  v322[0] = xmmword_101C348C0;
  v322[1] = xmmword_101C348D0;
  v322[2] = xmmword_101C348E0;
  v322[3] = xmmword_101C348F0;
  v322[4] = xmmword_101C34900;
  v322[5] = xmmword_101C34910;
  v322[6] = xmmword_101C348C0;
  qword_10230A3D8 = 0;
  qword_10230A3E0 = 0;
  qword_10230A3D0 = 0;
  v118 = (char *)operator new(0x70uLL);
  v119 = 0;
  qword_10230A3D0 = (uint64_t)v118;
  qword_10230A3D8 = (uint64_t)v118;
  qword_10230A3E0 = (uint64_t)(v118 + 112);
  do
  {
    *(_OWORD *)&v118[v119 * 16] = v322[v119];
    ++v119;
  }
  while (v119 != 7);
  qword_10230A3D8 = (uint64_t)(v118 + 112);
  xmmword_10230A3E8 = xmmword_101C34920;
  unk_10230A3F8 = xmmword_101C34930;
  sub_1015A2E04(&qword_10230A408, "Frankfurt-3");
  v321[0] = xmmword_101C34940;
  v321[1] = xmmword_101C34950;
  v321[2] = xmmword_101C34960;
  v321[3] = xmmword_101C34970;
  v321[4] = xmmword_101C34980;
  v321[5] = xmmword_101C34990;
  v321[6] = xmmword_101C349A0;
  v321[7] = xmmword_101C349B0;
  v321[8] = xmmword_101C349C0;
  v321[9] = xmmword_101C34940;
  qword_10230A428 = 0;
  qword_10230A430 = 0;
  qword_10230A420 = 0;
  v120 = (char *)operator new(0xA0uLL);
  v121 = 0;
  qword_10230A420 = (uint64_t)v120;
  qword_10230A428 = (uint64_t)v120;
  qword_10230A430 = (uint64_t)(v120 + 160);
  do
  {
    v122 = &v120[v121 * 16];
    v123 = v321[v121 + 1];
    *(_OWORD *)v122 = v321[v121];
    *((_OWORD *)v122 + 1) = v123;
    v121 += 2;
  }
  while (v121 != 10);
  qword_10230A428 = (uint64_t)(v120 + 160);
  xmmword_10230A438 = xmmword_101C349D0;
  unk_10230A448 = xmmword_101C349E0;
  sub_1015A2E04(&qword_10230A458, "Frankfurt-4");
  v320[0] = xmmword_101C349F0;
  v320[1] = xmmword_101C34A00;
  v320[2] = xmmword_101C34A10;
  v320[3] = xmmword_101C34A20;
  v320[4] = xmmword_101C34A30;
  v320[5] = xmmword_101C34A40;
  v320[6] = xmmword_101C34A50;
  v320[7] = xmmword_101C34A60;
  v320[8] = xmmword_101C34A70;
  v320[9] = xmmword_101C34A80;
  v320[10] = xmmword_101C34A90;
  v320[11] = xmmword_101C349F0;
  qword_10230A478 = 0;
  qword_10230A480 = 0;
  qword_10230A470 = 0;
  v124 = (char *)operator new(0xC0uLL);
  v125 = 0;
  qword_10230A470 = (uint64_t)v124;
  qword_10230A478 = (uint64_t)v124;
  qword_10230A480 = (uint64_t)(v124 + 192);
  do
  {
    v126 = &v124[v125 * 16];
    v127 = v320[v125 + 1];
    *(_OWORD *)v126 = v320[v125];
    *((_OWORD *)v126 + 1) = v127;
    v125 += 2;
  }
  while (v125 != 12);
  qword_10230A478 = (uint64_t)(v124 + 192);
  xmmword_10230A488 = xmmword_101C34AA0;
  unk_10230A498 = xmmword_101C34AB0;
  sub_1015A2E04(&qword_10230A4A8, "Frankfurt-5");
  v319[0] = xmmword_101C34AC0;
  v319[1] = xmmword_101C34AD0;
  v319[2] = xmmword_101C34AE0;
  v319[3] = xmmword_101C34AF0;
  v319[4] = xmmword_101C34B00;
  v319[5] = xmmword_101C34B10;
  v319[6] = xmmword_101C34B20;
  v319[7] = xmmword_101C34AC0;
  qword_10230A4C8 = 0;
  qword_10230A4D0 = 0;
  qword_10230A4C0 = 0;
  v128 = (char *)operator new(0x80uLL);
  v129 = 0;
  qword_10230A4C0 = (uint64_t)v128;
  qword_10230A4C8 = (uint64_t)v128;
  qword_10230A4D0 = (uint64_t)(v128 + 128);
  do
  {
    v130 = &v128[v129 * 16];
    v131 = v319[v129 + 1];
    *(_OWORD *)v130 = v319[v129];
    *((_OWORD *)v130 + 1) = v131;
    v129 += 2;
  }
  while (v129 != 8);
  qword_10230A4C8 = (uint64_t)(v128 + 128);
  xmmword_10230A4D8 = xmmword_101C34B30;
  unk_10230A4E8 = xmmword_101C34B40;
  sub_1015A2E04(&qword_10230A4F8, "Frankfurt-6");
  v318[0] = xmmword_101C34B50;
  v318[1] = xmmword_101C34B60;
  v318[2] = xmmword_101C34B70;
  v318[3] = xmmword_101C34B80;
  v318[4] = xmmword_101C34B90;
  v318[5] = xmmword_101C34B50;
  qword_10230A518 = 0;
  qword_10230A520 = 0;
  qword_10230A510 = 0;
  v132 = (char *)operator new(0x60uLL);
  v133 = 0;
  qword_10230A510 = (uint64_t)v132;
  qword_10230A518 = (uint64_t)v132;
  qword_10230A520 = (uint64_t)(v132 + 96);
  do
  {
    v134 = &v132[v133 * 16];
    v135 = v318[v133 + 1];
    *(_OWORD *)v134 = v318[v133];
    *((_OWORD *)v134 + 1) = v135;
    v133 += 2;
  }
  while (v133 != 6);
  qword_10230A518 = (uint64_t)(v132 + 96);
  xmmword_10230A528 = xmmword_101C34BA0;
  unk_10230A538 = xmmword_101C34BB0;
  sub_1015A2E04(&qword_10230A548, "Stockholm-1");
  v317[0] = xmmword_101C34BC0;
  v317[1] = xmmword_101C34BD0;
  v317[2] = xmmword_101C34BE0;
  v317[3] = xmmword_101C34BF0;
  v317[4] = xmmword_101C34C00;
  v317[5] = xmmword_101C34C10;
  v317[6] = xmmword_101C34C20;
  v317[7] = xmmword_101C34C30;
  v317[8] = xmmword_101C34BC0;
  qword_10230A568 = 0;
  qword_10230A570 = 0;
  qword_10230A560 = 0;
  v136 = (char *)operator new(0x90uLL);
  v137 = 0;
  qword_10230A560 = (uint64_t)v136;
  qword_10230A568 = (uint64_t)v136;
  qword_10230A570 = (uint64_t)(v136 + 144);
  do
  {
    *(_OWORD *)&v136[v137 * 16] = v317[v137];
    ++v137;
  }
  while (v137 != 9);
  qword_10230A568 = (uint64_t)(v136 + 144);
  xmmword_10230A578 = xmmword_101C34C40;
  unk_10230A588 = xmmword_101C34C50;
  sub_1015A2E04(&qword_10230A598, "Stockholm-2");
  v316[0] = xmmword_101C34C60;
  v316[1] = xmmword_101C34C70;
  v316[2] = xmmword_101C34C80;
  v316[3] = xmmword_101C34C90;
  v316[4] = xmmword_101C34CA0;
  v316[5] = xmmword_101C34CB0;
  v316[6] = xmmword_101C34CC0;
  v316[7] = xmmword_101C34CD0;
  v316[8] = xmmword_101C34CE0;
  v316[9] = xmmword_101C34CF0;
  v316[10] = xmmword_101C34D00;
  v316[11] = xmmword_101C34D10;
  v316[12] = xmmword_101C34D20;
  v316[13] = xmmword_101C34D30;
  v316[14] = xmmword_101C34D40;
  v316[15] = xmmword_101C34D50;
  v316[16] = xmmword_101C34D60;
  v316[17] = xmmword_101C34D70;
  v316[18] = xmmword_101C34D80;
  v316[19] = xmmword_101C34D90;
  v316[20] = xmmword_101C34DA0;
  v316[21] = xmmword_101C34DB0;
  v316[22] = xmmword_101C34DC0;
  v316[23] = xmmword_101C34DD0;
  v316[24] = xmmword_101C34DE0;
  v316[25] = xmmword_101C34C60;
  qword_10230A5B0 = 0;
  qword_10230A5B8 = 0;
  qword_10230A5C0 = 0;
  v138 = (char *)operator new(0x1A0uLL);
  v139 = 0;
  qword_10230A5B0 = (uint64_t)v138;
  qword_10230A5B8 = (uint64_t)v138;
  qword_10230A5C0 = (uint64_t)(v138 + 416);
  do
  {
    v140 = &v138[v139 * 16];
    v141 = v316[v139 + 1];
    *(_OWORD *)v140 = v316[v139];
    *((_OWORD *)v140 + 1) = v141;
    v139 += 2;
  }
  while (v139 != 26);
  qword_10230A5B8 = (uint64_t)(v138 + 416);
  xmmword_10230A5C8 = xmmword_101C34DF0;
  unk_10230A5D8 = xmmword_101C34E00;
  sub_1015A2E04(&qword_10230A5E8, "Stockholm-3");
  v315[0] = xmmword_101C34E10;
  v315[1] = xmmword_101C34E20;
  v315[2] = xmmword_101C34E30;
  v315[3] = xmmword_101C34E40;
  v315[4] = xmmword_101C34E50;
  v315[5] = xmmword_101C34E60;
  v315[6] = xmmword_101C34E70;
  v315[7] = xmmword_101C34E80;
  v315[8] = xmmword_101C34E90;
  v315[9] = xmmword_101C34EA0;
  v315[10] = xmmword_101C34EB0;
  v315[11] = xmmword_101C34EC0;
  v315[12] = xmmword_101C34ED0;
  v315[13] = xmmword_101C34EE0;
  v315[14] = xmmword_101C34EF0;
  v315[15] = xmmword_101C34F00;
  v315[16] = xmmword_101C34F10;
  v315[17] = xmmword_101C34E10;
  qword_10230A600 = 0;
  qword_10230A608 = 0;
  qword_10230A610 = 0;
  v142 = (char *)operator new(0x120uLL);
  v143 = 0;
  qword_10230A600 = (uint64_t)v142;
  qword_10230A608 = (uint64_t)v142;
  qword_10230A610 = (uint64_t)(v142 + 288);
  do
  {
    v144 = &v142[v143 * 16];
    v145 = v315[v143 + 1];
    *(_OWORD *)v144 = v315[v143];
    *((_OWORD *)v144 + 1) = v145;
    v143 += 2;
  }
  while (v143 != 18);
  qword_10230A608 = (uint64_t)(v142 + 288);
  xmmword_10230A618 = xmmword_101C34F20;
  unk_10230A628 = xmmword_101C34F30;
  sub_1015A2E04(&qword_10230A638, "Sydney-1");
  v314[0] = xmmword_101C34F40;
  v314[1] = xmmword_101C34F50;
  v314[2] = xmmword_101C34F60;
  v314[3] = xmmword_101C34F70;
  v314[4] = xmmword_101C34F80;
  v314[5] = xmmword_101C34F90;
  v314[6] = xmmword_101C34FA0;
  v314[7] = xmmword_101C34FB0;
  v314[8] = xmmword_101C34FC0;
  v314[9] = xmmword_101C34FD0;
  v314[10] = xmmword_101C34FE0;
  v314[11] = xmmword_101C34FF0;
  v314[12] = xmmword_101C35000;
  v314[13] = xmmword_101C35010;
  v314[14] = xmmword_101C35020;
  v314[15] = xmmword_101C35030;
  v314[16] = xmmword_101C35040;
  v314[17] = xmmword_101C35050;
  v314[18] = xmmword_101C35060;
  v314[19] = xmmword_101C35070;
  v314[20] = xmmword_101C34F40;
  qword_10230A650 = 0;
  qword_10230A658 = 0;
  qword_10230A660 = 0;
  v146 = (char *)operator new(0x150uLL);
  v147 = 0;
  qword_10230A650 = (uint64_t)v146;
  qword_10230A658 = (uint64_t)v146;
  qword_10230A660 = (uint64_t)(v146 + 336);
  do
  {
    *(_OWORD *)&v146[v147 * 16] = v314[v147];
    ++v147;
  }
  while (v147 != 21);
  qword_10230A658 = (uint64_t)(v146 + 336);
  xmmword_10230A668 = xmmword_101C35080;
  unk_10230A678 = xmmword_101C35090;
  sub_1015A2E04(&qword_10230A688, "Sydney-2");
  v313[0] = xmmword_101C350A0;
  v313[1] = xmmword_101C350B0;
  v313[2] = xmmword_101C350C0;
  v313[3] = xmmword_101C350D0;
  v313[4] = xmmword_101C350E0;
  v313[5] = xmmword_101C350F0;
  v313[6] = xmmword_101C35100;
  v313[7] = xmmword_101C35110;
  v313[8] = xmmword_101C35120;
  v313[9] = xmmword_101C350A0;
  qword_10230A6A8 = 0;
  qword_10230A6B0 = 0;
  qword_10230A6A0 = 0;
  v148 = (char *)operator new(0xA0uLL);
  v149 = 0;
  qword_10230A6A0 = (uint64_t)v148;
  qword_10230A6A8 = (uint64_t)v148;
  qword_10230A6B0 = (uint64_t)(v148 + 160);
  do
  {
    v150 = &v148[v149 * 16];
    v151 = v313[v149 + 1];
    *(_OWORD *)v150 = v313[v149];
    *((_OWORD *)v150 + 1) = v151;
    v149 += 2;
  }
  while (v149 != 10);
  qword_10230A6A8 = (uint64_t)(v148 + 160);
  xmmword_10230A6B8 = xmmword_101C35130;
  unk_10230A6C8 = xmmword_101C35140;
  sub_1015A2E04(&qword_10230A6D8, "Sydney-3");
  v312[0] = xmmword_101C35150;
  v312[1] = xmmword_101C35160;
  v312[2] = xmmword_101C35170;
  v312[3] = xmmword_101C35180;
  v312[4] = xmmword_101C35190;
  v312[5] = xmmword_101C35150;
  qword_10230A6F8 = 0;
  qword_10230A700 = 0;
  qword_10230A6F0 = 0;
  v152 = (char *)operator new(0x60uLL);
  v153 = 0;
  qword_10230A6F0 = (uint64_t)v152;
  qword_10230A6F8 = (uint64_t)v152;
  qword_10230A700 = (uint64_t)(v152 + 96);
  do
  {
    v154 = &v152[v153 * 16];
    v155 = v312[v153 + 1];
    *(_OWORD *)v154 = v312[v153];
    *((_OWORD *)v154 + 1) = v155;
    v153 += 2;
  }
  while (v153 != 6);
  qword_10230A6F8 = (uint64_t)(v152 + 96);
  xmmword_10230A708 = xmmword_101C351A0;
  unk_10230A718 = xmmword_101C351B0;
  sub_1015A2E04(&qword_10230A728, "Sydney-4");
  v311[0] = xmmword_101C351C0;
  v311[1] = xmmword_101C351D0;
  v311[2] = xmmword_101C351E0;
  v311[3] = xmmword_101C351F0;
  v311[4] = xmmword_101C35200;
  v311[5] = xmmword_101C35210;
  v311[6] = xmmword_101C35220;
  v311[7] = xmmword_101C35230;
  v311[8] = xmmword_101C351C0;
  qword_10230A748 = 0;
  qword_10230A750 = 0;
  qword_10230A740 = 0;
  v156 = (char *)operator new(0x90uLL);
  v157 = 0;
  qword_10230A740 = (uint64_t)v156;
  qword_10230A748 = (uint64_t)v156;
  qword_10230A750 = (uint64_t)(v156 + 144);
  do
  {
    *(_OWORD *)&v156[v157 * 16] = v311[v157];
    ++v157;
  }
  while (v157 != 9);
  qword_10230A748 = (uint64_t)(v156 + 144);
  xmmword_10230A758 = xmmword_101C35240;
  unk_10230A768 = xmmword_101C35250;
  sub_1015A2E04(&qword_10230A778, "Dubai-1");
  v310[0] = xmmword_101C35260;
  v310[1] = xmmword_101C35270;
  v310[2] = xmmword_101C35280;
  v310[3] = xmmword_101C35290;
  v310[4] = xmmword_101C352A0;
  v310[5] = xmmword_101C352B0;
  v310[6] = xmmword_101C352C0;
  v310[7] = xmmword_101C35260;
  qword_10230A798 = 0;
  qword_10230A7A0 = 0;
  qword_10230A790 = 0;
  v158 = (char *)operator new(0x80uLL);
  v159 = 0;
  qword_10230A790 = (uint64_t)v158;
  qword_10230A798 = (uint64_t)v158;
  qword_10230A7A0 = (uint64_t)(v158 + 128);
  do
  {
    v160 = &v158[v159 * 16];
    v161 = v310[v159 + 1];
    *(_OWORD *)v160 = v310[v159];
    *((_OWORD *)v160 + 1) = v161;
    v159 += 2;
  }
  while (v159 != 8);
  qword_10230A798 = (uint64_t)(v158 + 128);
  xmmword_10230A7A8 = xmmword_101C352D0;
  unk_10230A7B8 = xmmword_101C352E0;
  sub_1015A2E04(&qword_10230A7C8, "Dubai-2");
  v309[0] = xmmword_101C352F0;
  v309[1] = xmmword_101C35300;
  v309[2] = xmmword_101C35310;
  v309[3] = xmmword_101C35320;
  v309[4] = xmmword_101C35330;
  v309[5] = xmmword_101C35340;
  v309[6] = xmmword_101C35350;
  v309[7] = xmmword_101C352F0;
  qword_10230A7E8 = 0;
  qword_10230A7F0 = 0;
  qword_10230A7E0 = 0;
  v162 = (char *)operator new(0x80uLL);
  v163 = 0;
  qword_10230A7E0 = (uint64_t)v162;
  qword_10230A7E8 = (uint64_t)v162;
  qword_10230A7F0 = (uint64_t)(v162 + 128);
  do
  {
    v164 = &v162[v163 * 16];
    v165 = v309[v163 + 1];
    *(_OWORD *)v164 = v309[v163];
    *((_OWORD *)v164 + 1) = v165;
    v163 += 2;
  }
  while (v163 != 8);
  qword_10230A7E8 = (uint64_t)(v162 + 128);
  xmmword_10230A7F8 = xmmword_101C35360;
  unk_10230A808 = xmmword_101C35370;
  sub_1015A2E04(&qword_10230A818, "Dubai-3");
  v308[0] = xmmword_101C35380;
  v308[1] = xmmword_101C35390;
  v308[2] = xmmword_101C353A0;
  v308[3] = xmmword_101C353B0;
  v308[4] = xmmword_101C353C0;
  v308[5] = xmmword_101C353D0;
  v308[6] = xmmword_101C353E0;
  v308[7] = xmmword_101C353F0;
  v308[8] = xmmword_101C35400;
  v308[9] = xmmword_101C35380;
  qword_10230A838 = 0;
  qword_10230A840 = 0;
  qword_10230A830 = 0;
  v166 = (char *)operator new(0xA0uLL);
  v167 = 0;
  qword_10230A830 = (uint64_t)v166;
  qword_10230A838 = (uint64_t)v166;
  qword_10230A840 = (uint64_t)(v166 + 160);
  do
  {
    v168 = &v166[v167 * 16];
    v169 = v308[v167 + 1];
    *(_OWORD *)v168 = v308[v167];
    *((_OWORD *)v168 + 1) = v169;
    v167 += 2;
  }
  while (v167 != 10);
  qword_10230A838 = (uint64_t)(v166 + 160);
  xmmword_10230A848 = xmmword_101C35410;
  unk_10230A858 = xmmword_101C35420;
  sub_1015A2E04(&qword_10230A868, "Mumbai-1");
  v307[0] = xmmword_101C35430;
  v307[1] = xmmword_101C35440;
  v307[2] = xmmword_101C35450;
  v307[3] = xmmword_101C35460;
  v307[4] = xmmword_101C35470;
  v307[5] = xmmword_101C35480;
  v307[6] = xmmword_101C35430;
  qword_10230A888 = 0;
  qword_10230A890 = 0;
  qword_10230A880 = 0;
  v170 = (char *)operator new(0x70uLL);
  v171 = 0;
  qword_10230A880 = (uint64_t)v170;
  qword_10230A888 = (uint64_t)v170;
  qword_10230A890 = (uint64_t)(v170 + 112);
  do
  {
    *(_OWORD *)&v170[v171 * 16] = v307[v171];
    ++v171;
  }
  while (v171 != 7);
  qword_10230A888 = (uint64_t)(v170 + 112);
  xmmword_10230A898 = xmmword_101C35490;
  unk_10230A8A8 = xmmword_101C35430;
  sub_1015A2E04(&qword_10230A8B8, "Mumbai-2");
  v306[0] = xmmword_101C354A0;
  v306[1] = xmmword_101C354B0;
  v306[2] = xmmword_101C354C0;
  v306[3] = xmmword_101C354D0;
  v306[4] = xmmword_101C354E0;
  v306[5] = xmmword_101C354F0;
  v306[6] = xmmword_101C35500;
  v306[7] = xmmword_101C35510;
  v306[8] = xmmword_101C35520;
  v306[9] = xmmword_101C35530;
  v306[10] = xmmword_101C35540;
  v306[11] = xmmword_101C354A0;
  qword_10230A8D8 = 0;
  qword_10230A8E0 = 0;
  qword_10230A8D0 = 0;
  v172 = (char *)operator new(0xC0uLL);
  v173 = 0;
  qword_10230A8D0 = (uint64_t)v172;
  qword_10230A8D8 = (uint64_t)v172;
  qword_10230A8E0 = (uint64_t)(v172 + 192);
  do
  {
    v174 = &v172[v173 * 16];
    v175 = v306[v173 + 1];
    *(_OWORD *)v174 = v306[v173];
    *((_OWORD *)v174 + 1) = v175;
    v173 += 2;
  }
  while (v173 != 12);
  qword_10230A8D8 = (uint64_t)(v172 + 192);
  xmmword_10230A8E8 = xmmword_101C35550;
  unk_10230A8F8 = xmmword_101C35560;
  sub_1015A2E04(&qword_10230A908, "Cairo-1");
  v305[0] = xmmword_101C35570;
  v305[1] = xmmword_101C35580;
  v305[2] = xmmword_101C35590;
  v305[3] = xmmword_101C355A0;
  v305[4] = xmmword_101C355B0;
  v305[5] = xmmword_101C355C0;
  v305[6] = xmmword_101C355D0;
  v305[7] = xmmword_101C35570;
  qword_10230A928 = 0;
  qword_10230A930 = 0;
  qword_10230A920 = 0;
  v176 = (char *)operator new(0x80uLL);
  v177 = 0;
  qword_10230A920 = (uint64_t)v176;
  qword_10230A928 = (uint64_t)v176;
  qword_10230A930 = (uint64_t)(v176 + 128);
  do
  {
    v178 = &v176[v177 * 16];
    v179 = v305[v177 + 1];
    *(_OWORD *)v178 = v305[v177];
    *((_OWORD *)v178 + 1) = v179;
    v177 += 2;
  }
  while (v177 != 8);
  qword_10230A928 = (uint64_t)(v176 + 128);
  xmmword_10230A938 = xmmword_101C355E0;
  unk_10230A948 = xmmword_101C355F0;
  sub_1015A2E04(&qword_10230A958, "Cairo-2");
  v304[0] = xmmword_101C35600;
  v304[1] = xmmword_101C35610;
  v304[2] = xmmword_101C35620;
  v304[3] = xmmword_101C35630;
  v304[4] = xmmword_101C35640;
  v304[5] = xmmword_101C35600;
  qword_10230A978 = 0;
  qword_10230A980 = 0;
  qword_10230A970 = 0;
  v180 = (char *)operator new(0x60uLL);
  v181 = 0;
  qword_10230A970 = (uint64_t)v180;
  qword_10230A978 = (uint64_t)v180;
  qword_10230A980 = (uint64_t)(v180 + 96);
  do
  {
    v182 = &v180[v181 * 16];
    v183 = v304[v181 + 1];
    *(_OWORD *)v182 = v304[v181];
    *((_OWORD *)v182 + 1) = v183;
    v181 += 2;
  }
  while (v181 != 6);
  qword_10230A978 = (uint64_t)(v180 + 96);
  xmmword_10230A988 = xmmword_101C35650;
  unk_10230A998 = xmmword_101C35660;
  sub_1015A2E04(&qword_10230A9A8, "Cairo-3");
  v303[0] = xmmword_101C35670;
  v303[1] = xmmword_101C35680;
  v303[2] = xmmword_101C35690;
  v303[3] = xmmword_101C356A0;
  v303[4] = xmmword_101C35670;
  qword_10230A9C8 = 0;
  qword_10230A9D0 = 0;
  qword_10230A9C0 = 0;
  v184 = (char *)operator new(0x50uLL);
  v185 = 0;
  qword_10230A9C0 = (uint64_t)v184;
  qword_10230A9C8 = (uint64_t)v184;
  qword_10230A9D0 = (uint64_t)(v184 + 80);
  do
  {
    *(_OWORD *)&v184[v185 * 16] = v303[v185];
    ++v185;
  }
  while (v185 != 5);
  qword_10230A9C8 = (uint64_t)(v184 + 80);
  xmmword_10230A9D8 = xmmword_101C356B0;
  unk_10230A9E8 = xmmword_101C356C0;
  sub_1015A2E04(&qword_10230A9F8, "Cairo-4");
  v302[0] = xmmword_101C356D0;
  v302[1] = xmmword_101C356E0;
  v302[2] = xmmword_101C356F0;
  v302[3] = xmmword_101C35700;
  v302[4] = xmmword_101C356D0;
  qword_10230AA18 = 0;
  qword_10230AA20 = 0;
  qword_10230AA10 = 0;
  v186 = (char *)operator new(0x50uLL);
  v187 = 0;
  qword_10230AA10 = (uint64_t)v186;
  qword_10230AA18 = (uint64_t)v186;
  qword_10230AA20 = (uint64_t)(v186 + 80);
  do
  {
    *(_OWORD *)&v186[v187 * 16] = v302[v187];
    ++v187;
  }
  while (v187 != 5);
  qword_10230AA18 = (uint64_t)(v186 + 80);
  xmmword_10230AA28 = xmmword_101C35710;
  unk_10230AA38 = xmmword_101C35720;
  sub_1015A2E04(&qword_10230AA48, "Cairo-5");
  v301[0] = xmmword_101C35730;
  v301[1] = xmmword_101C35740;
  v301[2] = xmmword_101C35750;
  v301[3] = xmmword_101C35760;
  v301[4] = xmmword_101C35770;
  v301[5] = xmmword_101C35780;
  v301[6] = xmmword_101C35790;
  v301[7] = xmmword_101C357A0;
  v301[8] = xmmword_101C357B0;
  v301[9] = xmmword_101C357C0;
  v301[10] = xmmword_101C357D0;
  v301[11] = xmmword_101C35730;
  qword_10230AA68 = 0;
  qword_10230AA70 = 0;
  qword_10230AA60 = 0;
  v188 = (char *)operator new(0xC0uLL);
  v189 = 0;
  qword_10230AA60 = (uint64_t)v188;
  qword_10230AA68 = (uint64_t)v188;
  qword_10230AA70 = (uint64_t)(v188 + 192);
  do
  {
    v190 = &v188[v189 * 16];
    v191 = v301[v189 + 1];
    *(_OWORD *)v190 = v301[v189];
    *((_OWORD *)v190 + 1) = v191;
    v189 += 2;
  }
  while (v189 != 12);
  qword_10230AA68 = (uint64_t)(v188 + 192);
  xmmword_10230AA78 = xmmword_101C357E0;
  unk_10230AA88 = xmmword_101C357F0;
  sub_1015A2E04(&qword_10230AA98, "Cairo-6");
  v300[0] = xmmword_101C35800;
  v300[1] = xmmword_101C35810;
  v300[2] = xmmword_101C35820;
  v300[3] = xmmword_101C35830;
  v300[4] = xmmword_101C35840;
  v300[5] = xmmword_101C35850;
  v300[6] = xmmword_101C35800;
  qword_10230AAB8 = 0;
  qword_10230AAC0 = 0;
  qword_10230AAB0 = 0;
  v192 = (char *)operator new(0x70uLL);
  v193 = 0;
  qword_10230AAB0 = (uint64_t)v192;
  qword_10230AAB8 = (uint64_t)v192;
  qword_10230AAC0 = (uint64_t)(v192 + 112);
  do
  {
    *(_OWORD *)&v192[v193 * 16] = v300[v193];
    ++v193;
  }
  while (v193 != 7);
  qword_10230AAB8 = (uint64_t)(v192 + 112);
  xmmword_10230AAC8 = xmmword_101C35860;
  unk_10230AAD8 = xmmword_101C35870;
  sub_1015A2E04(&qword_10230AAE8, "Cairo-7");
  v299[0] = xmmword_101C35880;
  v299[1] = xmmword_101C35890;
  v299[2] = xmmword_101C358A0;
  v299[3] = xmmword_101C358B0;
  v299[4] = xmmword_101C358C0;
  v299[5] = xmmword_101C358D0;
  v299[6] = xmmword_101C358E0;
  v299[7] = xmmword_101C358F0;
  v299[8] = xmmword_101C35900;
  v299[9] = xmmword_101C35910;
  v299[10] = xmmword_101C35880;
  qword_10230AB08 = 0;
  qword_10230AB10 = 0;
  qword_10230AB00 = 0;
  v194 = (char *)operator new(0xB0uLL);
  v195 = 0;
  qword_10230AB00 = (uint64_t)v194;
  qword_10230AB08 = (uint64_t)v194;
  qword_10230AB10 = (uint64_t)(v194 + 176);
  do
  {
    *(_OWORD *)&v194[v195 * 16] = v299[v195];
    ++v195;
  }
  while (v195 != 11);
  qword_10230AB08 = (uint64_t)(v194 + 176);
  xmmword_10230AB18 = xmmword_101C35920;
  unk_10230AB28 = xmmword_101C35930;
  sub_1015A2E04(&qword_10230AB38, "Cairo-8");
  v298[0] = xmmword_101C35940;
  v298[1] = xmmword_101C35950;
  v298[2] = xmmword_101C35960;
  v298[3] = xmmword_101C35970;
  v298[4] = xmmword_101C35980;
  v298[5] = xmmword_101C35940;
  qword_10230AB58 = 0;
  qword_10230AB60 = 0;
  qword_10230AB50 = 0;
  v196 = (char *)operator new(0x60uLL);
  v197 = 0;
  qword_10230AB50 = (uint64_t)v196;
  qword_10230AB58 = (uint64_t)v196;
  qword_10230AB60 = (uint64_t)(v196 + 96);
  do
  {
    v198 = &v196[v197 * 16];
    v199 = v298[v197 + 1];
    *(_OWORD *)v198 = v298[v197];
    *((_OWORD *)v198 + 1) = v199;
    v197 += 2;
  }
  while (v197 != 6);
  qword_10230AB58 = (uint64_t)(v196 + 96);
  xmmword_10230AB68 = xmmword_101C35990;
  unk_10230AB78 = xmmword_101C359A0;
  sub_1015A2E04(&qword_10230AB88, "Shanghai-11");
  v297[0] = xmmword_101C359B0;
  v297[1] = xmmword_101C359C0;
  v297[2] = xmmword_101C359D0;
  v297[3] = xmmword_101C359E0;
  v297[4] = xmmword_101C359F0;
  v297[5] = xmmword_101C35A00;
  v297[6] = xmmword_101C359B0;
  qword_10230ABA8 = 0;
  qword_10230ABB0 = 0;
  qword_10230ABA0 = 0;
  v200 = (char *)operator new(0x70uLL);
  v201 = 0;
  qword_10230ABA0 = (uint64_t)v200;
  qword_10230ABA8 = (uint64_t)v200;
  qword_10230ABB0 = (uint64_t)(v200 + 112);
  do
  {
    *(_OWORD *)&v200[v201 * 16] = v297[v201];
    ++v201;
  }
  while (v201 != 7);
  qword_10230ABA8 = (uint64_t)(v200 + 112);
  xmmword_10230ABB8 = xmmword_101C35A10;
  unk_10230ABC8 = xmmword_101C35A20;
  sub_1015A2E04(&qword_10230ABD8, "Shanghai-12");
  v296[0] = xmmword_101C35A30;
  v296[1] = xmmword_101C35A40;
  v296[2] = xmmword_101C35A50;
  v296[3] = xmmword_101C35A60;
  v296[4] = xmmword_101C35A70;
  v296[5] = xmmword_101C35A80;
  v296[6] = xmmword_101C35A90;
  v296[7] = xmmword_101C35AA0;
  v296[8] = xmmword_101C35AB0;
  v296[9] = xmmword_101C35A30;
  qword_10230ABF8 = 0;
  qword_10230AC00 = 0;
  qword_10230ABF0 = 0;
  v202 = (char *)operator new(0xA0uLL);
  v203 = 0;
  qword_10230ABF0 = (uint64_t)v202;
  qword_10230ABF8 = (uint64_t)v202;
  qword_10230AC00 = (uint64_t)(v202 + 160);
  do
  {
    v204 = &v202[v203 * 16];
    v205 = v296[v203 + 1];
    *(_OWORD *)v204 = v296[v203];
    *((_OWORD *)v204 + 1) = v205;
    v203 += 2;
  }
  while (v203 != 10);
  qword_10230ABF8 = (uint64_t)(v202 + 160);
  xmmword_10230AC08 = xmmword_101C35AC0;
  unk_10230AC18 = xmmword_101C35AD0;
  sub_1015A2E04(&qword_10230AC28, "Beijing-10");
  v295[0] = xmmword_101C35AE0;
  v295[1] = xmmword_101C35AF0;
  v295[2] = xmmword_101C35B00;
  v295[3] = xmmword_101C35B10;
  v295[4] = xmmword_101C35AE0;
  qword_10230AC48 = 0;
  qword_10230AC50 = 0;
  qword_10230AC40 = 0;
  v206 = (char *)operator new(0x50uLL);
  v207 = 0;
  qword_10230AC40 = (uint64_t)v206;
  qword_10230AC48 = (uint64_t)v206;
  qword_10230AC50 = (uint64_t)(v206 + 80);
  do
  {
    *(_OWORD *)&v206[v207 * 16] = v295[v207];
    ++v207;
  }
  while (v207 != 5);
  qword_10230AC48 = (uint64_t)(v206 + 80);
  xmmword_10230AC58 = xmmword_101C35AE0;
  unk_10230AC68 = xmmword_101C35B20;
  sub_1015A2E04(&qword_10230AC78, "Beijing-11");
  v294[0] = xmmword_101C35B30;
  v294[1] = xmmword_101C35B40;
  v294[2] = xmmword_101C35B50;
  v294[3] = xmmword_101C35B60;
  v294[4] = xmmword_101C35B30;
  qword_10230AC98 = 0;
  qword_10230ACA0 = 0;
  qword_10230AC90 = 0;
  v208 = (char *)operator new(0x50uLL);
  v209 = 0;
  qword_10230AC90 = (uint64_t)v208;
  qword_10230AC98 = (uint64_t)v208;
  qword_10230ACA0 = (uint64_t)(v208 + 80);
  do
  {
    *(_OWORD *)&v208[v209 * 16] = v294[v209];
    ++v209;
  }
  while (v209 != 5);
  qword_10230AC98 = (uint64_t)(v208 + 80);
  xmmword_10230ACA8 = xmmword_101C35B70;
  unk_10230ACB8 = xmmword_101C35B80;
  sub_1015A2E04(&qword_10230ACC8, "Barcelona-1");
  v293[0] = xmmword_101C35B90;
  v293[1] = xmmword_101C35BA0;
  v293[2] = xmmword_101C35BB0;
  v293[3] = xmmword_101C35BC0;
  v293[4] = xmmword_101C35BD0;
  v293[5] = xmmword_101C35BE0;
  v293[6] = xmmword_101C35B90;
  qword_10230ACE8 = 0;
  qword_10230ACF0 = 0;
  qword_10230ACE0 = 0;
  v210 = (char *)operator new(0x70uLL);
  v211 = 0;
  qword_10230ACE0 = (uint64_t)v210;
  qword_10230ACE8 = (uint64_t)v210;
  qword_10230ACF0 = (uint64_t)(v210 + 112);
  do
  {
    *(_OWORD *)&v210[v211 * 16] = v293[v211];
    ++v211;
  }
  while (v211 != 7);
  qword_10230ACE8 = (uint64_t)(v210 + 112);
  xmmword_10230ACF8 = xmmword_101C35BF0;
  unk_10230AD08 = xmmword_101C35C00;
  sub_1015A2E04(&qword_10230AD18, "Barcelona-2");
  v292[0] = xmmword_101C35C10;
  v292[1] = xmmword_101C35C20;
  v292[2] = xmmword_101C35C30;
  v292[3] = xmmword_101C35C40;
  v292[4] = xmmword_101C35C10;
  qword_10230AD38 = 0;
  qword_10230AD40 = 0;
  qword_10230AD30 = 0;
  v212 = (char *)operator new(0x50uLL);
  v213 = 0;
  qword_10230AD30 = (uint64_t)v212;
  qword_10230AD38 = (uint64_t)v212;
  qword_10230AD40 = (uint64_t)(v212 + 80);
  do
  {
    *(_OWORD *)&v212[v213 * 16] = v292[v213];
    ++v213;
  }
  while (v213 != 5);
  qword_10230AD38 = (uint64_t)(v212 + 80);
  xmmword_10230AD48 = xmmword_101C35C50;
  unk_10230AD58 = xmmword_101C35C60;
  sub_1015A2E04(&qword_10230AD68, "Houston-1");
  v291[0] = xmmword_101C35C70;
  v291[1] = xmmword_101C35C80;
  v291[2] = xmmword_101C35C90;
  v291[3] = xmmword_101C35CA0;
  v291[4] = xmmword_101C35CB0;
  v291[5] = xmmword_101C35CC0;
  v291[6] = xmmword_101C35CD0;
  v291[7] = xmmword_101C35CE0;
  v291[8] = xmmword_101C35CF0;
  v291[9] = xmmword_101C35D00;
  v291[10] = xmmword_101C35D10;
  v291[11] = xmmword_101C35D20;
  v291[12] = xmmword_101C35D30;
  v291[13] = xmmword_101C35D40;
  v291[14] = xmmword_101C35D50;
  v291[15] = xmmword_101C35D60;
  v291[16] = xmmword_101C35D70;
  v291[17] = xmmword_101C35D80;
  v291[18] = xmmword_101C35D90;
  v291[19] = xmmword_101C35DA0;
  v291[20] = xmmword_101C35DB0;
  v291[21] = xmmword_101C35DC0;
  v291[22] = xmmword_101C35DD0;
  v291[23] = xmmword_101C35DE0;
  v291[24] = xmmword_101C35DF0;
  v291[25] = xmmword_101C35E00;
  v291[26] = xmmword_101C35C70;
  qword_10230AD80 = 0;
  qword_10230AD88 = 0;
  qword_10230AD90 = 0;
  v214 = (char *)operator new(0x1B0uLL);
  v215 = 0;
  qword_10230AD80 = (uint64_t)v214;
  qword_10230AD88 = (uint64_t)v214;
  qword_10230AD90 = (uint64_t)(v214 + 432);
  do
  {
    *(_OWORD *)&v214[v215 * 16] = v291[v215];
    ++v215;
  }
  while (v215 != 27);
  qword_10230AD88 = (uint64_t)(v214 + 432);
  xmmword_10230AD98 = xmmword_101C35E10;
  unk_10230ADA8 = xmmword_101C35E20;
  sub_1015A2E04(&qword_10230ADB8, "Seattle-1");
  v290[0] = xmmword_101C35E30;
  v290[1] = xmmword_101C35E40;
  v290[2] = xmmword_101C35E50;
  v290[3] = xmmword_101C35E60;
  v290[4] = xmmword_101C35E70;
  v290[5] = xmmword_101C35E80;
  v290[6] = xmmword_101C35E90;
  v290[7] = xmmword_101C35EA0;
  v290[8] = xmmword_101C35EB0;
  v290[9] = xmmword_101C35EC0;
  v290[10] = xmmword_101C35ED0;
  v290[11] = xmmword_101C35EE0;
  v290[12] = xmmword_101C35EF0;
  v290[13] = xmmword_101C35F00;
  v290[14] = xmmword_101C35F10;
  v290[15] = xmmword_101C35F20;
  v290[16] = xmmword_101C35F30;
  v290[17] = xmmword_101C35E30;
  qword_10230ADD0 = 0;
  qword_10230ADD8 = 0;
  qword_10230ADE0 = 0;
  v216 = (char *)operator new(0x120uLL);
  v217 = 0;
  qword_10230ADD0 = (uint64_t)v216;
  qword_10230ADD8 = (uint64_t)v216;
  qword_10230ADE0 = (uint64_t)(v216 + 288);
  do
  {
    v218 = &v216[v217 * 16];
    v219 = v290[v217 + 1];
    *(_OWORD *)v218 = v290[v217];
    *((_OWORD *)v218 + 1) = v219;
    v217 += 2;
  }
  while (v217 != 18);
  qword_10230ADD8 = (uint64_t)(v216 + 288);
  xmmword_10230ADE8 = xmmword_101C35F40;
  unk_10230ADF8 = xmmword_101C35F50;
  sub_1015A2E04(&qword_10230AE08, "LasVegas-1");
  v289[0] = xmmword_101C35F60;
  v289[1] = xmmword_101C35F70;
  v289[2] = xmmword_101C35F80;
  v289[3] = xmmword_101C35F90;
  v289[4] = xmmword_101C35F60;
  qword_10230AE28 = 0;
  qword_10230AE30 = 0;
  qword_10230AE20 = 0;
  v220 = (char *)operator new(0x50uLL);
  v221 = 0;
  qword_10230AE20 = (uint64_t)v220;
  qword_10230AE28 = (uint64_t)v220;
  qword_10230AE30 = (uint64_t)(v220 + 80);
  do
  {
    *(_OWORD *)&v220[v221 * 16] = v289[v221];
    ++v221;
  }
  while (v221 != 5);
  qword_10230AE28 = (uint64_t)(v220 + 80);
  xmmword_10230AE38 = xmmword_101C35FA0;
  unk_10230AE48 = xmmword_101C35FB0;
  sub_1015A2E04(&qword_10230AE58, "LasVegas-2");
  v288[0] = xmmword_101C35FC0;
  v288[1] = xmmword_101C35FD0;
  v288[2] = xmmword_101C35FE0;
  v288[3] = xmmword_101C35FF0;
  v288[4] = xmmword_101C36000;
  v288[5] = xmmword_101C36010;
  v288[6] = xmmword_101C36020;
  v288[7] = xmmword_101C36030;
  v288[8] = xmmword_101C36040;
  v288[9] = xmmword_101C36050;
  v288[10] = xmmword_101C36060;
  v288[11] = xmmword_101C36070;
  v288[12] = xmmword_101C35FC0;
  qword_10230AE78 = 0;
  qword_10230AE80 = 0;
  qword_10230AE70 = 0;
  v222 = (char *)operator new(0xD0uLL);
  v223 = 0;
  qword_10230AE70 = (uint64_t)v222;
  qword_10230AE78 = (uint64_t)v222;
  qword_10230AE80 = (uint64_t)(v222 + 208);
  do
  {
    *(_OWORD *)&v222[v223 * 16] = v288[v223];
    ++v223;
  }
  while (v223 != 13);
  qword_10230AE78 = (uint64_t)(v222 + 208);
  xmmword_10230AE88 = xmmword_101C36080;
  unk_10230AE98 = xmmword_101C36090;
  sub_1015A2E04(&qword_10230AEA8, "Miami-1");
  v287[0] = xmmword_101C360A0;
  v287[1] = xmmword_101C360B0;
  v287[2] = xmmword_101C360C0;
  v287[3] = xmmword_101C360D0;
  v287[4] = xmmword_101C360E0;
  v287[5] = xmmword_101C360F0;
  v287[6] = xmmword_101C36100;
  v287[7] = xmmword_101C36110;
  v287[8] = xmmword_101C36120;
  v287[9] = xmmword_101C36130;
  v287[10] = xmmword_101C36140;
  v287[11] = xmmword_101C36150;
  v287[12] = xmmword_101C36160;
  v287[13] = xmmword_101C36170;
  v287[14] = xmmword_101C36180;
  v287[15] = xmmword_101C36190;
  v287[16] = xmmword_101C361A0;
  v287[17] = xmmword_101C361B0;
  v287[18] = xmmword_101C361C0;
  v287[19] = xmmword_101C361D0;
  v287[20] = xmmword_101C360A0;
  qword_10230AEC0 = 0;
  qword_10230AEC8 = 0;
  qword_10230AED0 = 0;
  v224 = (char *)operator new(0x150uLL);
  v225 = 0;
  qword_10230AEC0 = (uint64_t)v224;
  qword_10230AEC8 = (uint64_t)v224;
  qword_10230AED0 = (uint64_t)(v224 + 336);
  do
  {
    *(_OWORD *)&v224[v225 * 16] = v287[v225];
    ++v225;
  }
  while (v225 != 21);
  qword_10230AEC8 = (uint64_t)(v224 + 336);
  xmmword_10230AED8 = xmmword_101C361E0;
  unk_10230AEE8 = xmmword_101C361F0;
  sub_1015A2E04(&qword_10230AEF8, "Denver-1");
  v286[0] = xmmword_101C36200;
  v286[1] = xmmword_101C36210;
  v286[2] = xmmword_101C36220;
  v286[3] = xmmword_101C36230;
  v286[4] = xmmword_101C36240;
  v286[5] = xmmword_101C36250;
  v286[6] = xmmword_101C36260;
  v286[7] = xmmword_101C36270;
  v286[8] = xmmword_101C36280;
  v286[9] = xmmword_101C36290;
  v286[10] = xmmword_101C362A0;
  v286[11] = xmmword_101C362B0;
  v286[12] = xmmword_101C362C0;
  v286[13] = xmmword_101C36200;
  qword_10230AF18 = 0;
  qword_10230AF20 = 0;
  qword_10230AF10 = 0;
  v226 = (char *)operator new(0xE0uLL);
  v227 = 0;
  qword_10230AF10 = (uint64_t)v226;
  qword_10230AF18 = (uint64_t)v226;
  qword_10230AF20 = (uint64_t)(v226 + 224);
  do
  {
    v228 = &v226[v227 * 16];
    v229 = v286[v227 + 1];
    *(_OWORD *)v228 = v286[v227];
    *((_OWORD *)v228 + 1) = v229;
    v227 += 2;
  }
  while (v227 != 14);
  qword_10230AF18 = (uint64_t)(v226 + 224);
  xmmword_10230AF28 = xmmword_101C362D0;
  unk_10230AF38 = xmmword_101C362E0;
  sub_1015A2E04(&qword_10230AF48, "NY-1");
  v285[0] = xmmword_101C362F0;
  v285[1] = xmmword_101C36300;
  v285[2] = xmmword_101C36310;
  v285[3] = xmmword_101C36320;
  v285[4] = xmmword_101C36330;
  v285[5] = xmmword_101C36340;
  v285[6] = xmmword_101C36350;
  v285[7] = xmmword_101C362F0;
  qword_10230AF68 = 0;
  qword_10230AF70 = 0;
  qword_10230AF60 = 0;
  v230 = (char *)operator new(0x80uLL);
  v231 = 0;
  qword_10230AF60 = (uint64_t)v230;
  qword_10230AF68 = (uint64_t)v230;
  qword_10230AF70 = (uint64_t)(v230 + 128);
  do
  {
    v232 = &v230[v231 * 16];
    v233 = v285[v231 + 1];
    *(_OWORD *)v232 = v285[v231];
    *((_OWORD *)v232 + 1) = v233;
    v231 += 2;
  }
  while (v231 != 8);
  qword_10230AF68 = (uint64_t)(v230 + 128);
  xmmword_10230AF78 = xmmword_101C36360;
  unk_10230AF88 = xmmword_101C36370;
  sub_1015A2E04(&qword_10230AF98, "Chicago-1");
  v284[0] = xmmword_101C36380;
  v284[1] = xmmword_101C36390;
  v284[2] = xmmword_101C363A0;
  v284[3] = xmmword_101C363B0;
  v284[4] = xmmword_101C363C0;
  v284[5] = xmmword_101C363D0;
  v284[6] = xmmword_101C363E0;
  v284[7] = xmmword_101C363F0;
  v284[8] = xmmword_101C36400;
  v284[9] = xmmword_101C36410;
  v284[10] = xmmword_101C36420;
  v284[11] = xmmword_101C36430;
  v284[12] = xmmword_101C36440;
  v284[13] = xmmword_101C36450;
  v284[14] = xmmword_101C36460;
  v284[15] = xmmword_101C36470;
  v284[16] = xmmword_101C36480;
  v284[17] = xmmword_101C36490;
  v284[18] = xmmword_101C364A0;
  v284[19] = xmmword_101C364B0;
  v284[20] = xmmword_101C364C0;
  v284[21] = xmmword_101C364D0;
  v284[22] = xmmword_101C364E0;
  v284[23] = xmmword_101C364F0;
  v284[24] = xmmword_101C36500;
  v284[25] = xmmword_101C36510;
  v284[26] = xmmword_101C36520;
  v284[27] = xmmword_101C36530;
  v284[28] = xmmword_101C36380;
  qword_10230AFB0 = 0;
  qword_10230AFB8 = 0;
  qword_10230AFC0 = 0;
  v234 = (char *)operator new(0x1D0uLL);
  v235 = 0;
  qword_10230AFB0 = (uint64_t)v234;
  qword_10230AFB8 = (uint64_t)v234;
  qword_10230AFC0 = (uint64_t)(v234 + 464);
  do
  {
    *(_OWORD *)&v234[v235 * 16] = v284[v235];
    ++v235;
  }
  while (v235 != 29);
  qword_10230AFB8 = (uint64_t)(v234 + 464);
  xmmword_10230AFC8 = xmmword_101C36540;
  unk_10230AFD8 = xmmword_101C36550;
  sub_1015A2E04(&qword_10230AFE8, "Chicago-2");
  v283[0] = xmmword_101C36560;
  v283[1] = xmmword_101C36570;
  v283[2] = xmmword_101C36580;
  v283[3] = xmmword_101C36590;
  v283[4] = xmmword_101C36560;
  qword_10230B008 = 0;
  qword_10230B010 = 0;
  qword_10230B000 = 0;
  v236 = (char *)operator new(0x50uLL);
  v237 = 0;
  qword_10230B000 = (uint64_t)v236;
  qword_10230B008 = (uint64_t)v236;
  qword_10230B010 = (uint64_t)(v236 + 80);
  do
  {
    *(_OWORD *)&v236[v237 * 16] = v283[v237];
    ++v237;
  }
  while (v237 != 5);
  qword_10230B008 = (uint64_t)(v236 + 80);
  xmmword_10230B018 = xmmword_101C365A0;
  unk_10230B028 = xmmword_101C365B0;
  sub_1015A2E04(&qword_10230B038, "Chicago-3");
  v282[0] = xmmword_101C365C0;
  v282[1] = xmmword_101C365D0;
  v282[2] = xmmword_101C365E0;
  v282[3] = xmmword_101C365F0;
  v282[4] = xmmword_101C365C0;
  qword_10230B058 = 0;
  qword_10230B060 = 0;
  qword_10230B050 = 0;
  v238 = (char *)operator new(0x50uLL);
  v239 = 0;
  qword_10230B050 = (uint64_t)v238;
  qword_10230B058 = (uint64_t)v238;
  qword_10230B060 = (uint64_t)(v238 + 80);
  do
  {
    *(_OWORD *)&v238[v239 * 16] = v282[v239];
    ++v239;
  }
  while (v239 != 5);
  qword_10230B058 = (uint64_t)(v238 + 80);
  xmmword_10230B068 = xmmword_101C36600;
  unk_10230B078 = xmmword_101C36610;
  sub_1015A2E04(&qword_10230B088, "Chicago-4");
  v281[0] = xmmword_101C36620;
  v281[1] = xmmword_101C36630;
  v281[2] = xmmword_101C36640;
  v281[3] = xmmword_101C36650;
  v281[4] = xmmword_101C36620;
  qword_10230B0A8 = 0;
  qword_10230B0B0 = 0;
  qword_10230B0A0 = 0;
  v240 = (char *)operator new(0x50uLL);
  v241 = 0;
  qword_10230B0A0 = (uint64_t)v240;
  qword_10230B0A8 = (uint64_t)v240;
  qword_10230B0B0 = (uint64_t)(v240 + 80);
  do
  {
    *(_OWORD *)&v240[v241 * 16] = v281[v241];
    ++v241;
  }
  while (v241 != 5);
  qword_10230B0A8 = (uint64_t)(v240 + 80);
  xmmword_10230B0B8 = xmmword_101C36660;
  unk_10230B0C8 = xmmword_101C36670;
  sub_1015A2E04(&qword_10230B0D8, "SF-1");
  v280[0] = xmmword_101C36680;
  v280[1] = xmmword_101C36690;
  v280[2] = xmmword_101C366A0;
  v280[3] = xmmword_101C366B0;
  v280[4] = xmmword_101C366C0;
  v280[5] = xmmword_101C366D0;
  v280[6] = xmmword_101C366E0;
  v280[7] = xmmword_101C366F0;
  v280[8] = xmmword_101C36700;
  v280[9] = xmmword_101C36710;
  v280[10] = xmmword_101C36680;
  qword_10230B0F8 = 0;
  qword_10230B100 = 0;
  qword_10230B0F0 = 0;
  v242 = (char *)operator new(0xB0uLL);
  v243 = 0;
  qword_10230B0F0 = (uint64_t)v242;
  qword_10230B0F8 = (uint64_t)v242;
  qword_10230B100 = (uint64_t)(v242 + 176);
  do
  {
    *(_OWORD *)&v242[v243 * 16] = v280[v243];
    ++v243;
  }
  while (v243 != 11);
  qword_10230B0F8 = (uint64_t)(v242 + 176);
  xmmword_10230B108 = xmmword_101C36720;
  unk_10230B118 = xmmword_101C36730;
  sub_1015A2E04(&qword_10230B128, "SF-2");
  v279[0] = xmmword_101C36740;
  v279[1] = xmmword_101C36750;
  v279[2] = xmmword_101C36760;
  v279[3] = xmmword_101C36770;
  v279[4] = xmmword_101C36780;
  v279[5] = xmmword_101C36790;
  v279[6] = xmmword_101C367A0;
  v279[7] = xmmword_101C36740;
  qword_10230B148 = 0;
  qword_10230B150 = 0;
  qword_10230B140 = 0;
  v244 = (char *)operator new(0x80uLL);
  v245 = 0;
  qword_10230B140 = (uint64_t)v244;
  qword_10230B148 = (uint64_t)v244;
  qword_10230B150 = (uint64_t)(v244 + 128);
  do
  {
    v246 = &v244[v245 * 16];
    v247 = v279[v245 + 1];
    *(_OWORD *)v246 = v279[v245];
    *((_OWORD *)v246 + 1) = v247;
    v245 += 2;
  }
  while (v245 != 8);
  qword_10230B148 = (uint64_t)(v244 + 128);
  xmmword_10230B158 = xmmword_101C367B0;
  unk_10230B168 = xmmword_101C367C0;
  sub_1015A2E04(&qword_10230B178, "SJ-1");
  v278[0] = xmmword_101C367D0;
  v278[1] = xmmword_101C367E0;
  v278[2] = xmmword_101C367F0;
  v278[3] = xmmword_101C36800;
  v278[4] = xmmword_101C36810;
  v278[5] = xmmword_101C36820;
  v278[6] = xmmword_101C36830;
  v278[7] = xmmword_101C36840;
  v278[8] = xmmword_101C36850;
  v278[9] = xmmword_101C36860;
  v278[10] = xmmword_101C36870;
  v278[11] = xmmword_101C36880;
  v278[12] = xmmword_101C36890;
  v278[13] = xmmword_101C368A0;
  v278[14] = xmmword_101C368B0;
  v278[15] = xmmword_101C368C0;
  v278[16] = xmmword_101C368D0;
  v278[17] = xmmword_101C368E0;
  v278[18] = xmmword_101C368F0;
  v278[19] = xmmword_101C36900;
  v278[20] = xmmword_101C36910;
  v278[21] = xmmword_101C36920;
  v278[22] = xmmword_101C36930;
  v278[23] = xmmword_101C36940;
  v278[24] = xmmword_101C36950;
  v278[25] = xmmword_101C36960;
  v278[26] = xmmword_101C36970;
  v278[27] = xmmword_101C367D0;
  qword_10230B190 = 0;
  qword_10230B198 = 0;
  qword_10230B1A0 = 0;
  v248 = (char *)operator new(0x1C0uLL);
  v249 = 0;
  qword_10230B190 = (uint64_t)v248;
  qword_10230B198 = (uint64_t)v248;
  qword_10230B1A0 = (uint64_t)(v248 + 448);
  do
  {
    v250 = &v248[v249 * 16];
    v251 = v278[v249 + 1];
    *(_OWORD *)v250 = v278[v249];
    *((_OWORD *)v250 + 1) = v251;
    v249 += 2;
  }
  while (v249 != 28);
  qword_10230B198 = (uint64_t)(v248 + 448);
  xmmword_10230B1A8 = xmmword_101C36980;
  unk_10230B1B8 = xmmword_101C36990;
  sub_1015A2E04(&qword_10230B1C8, "SJ-2");
  v277[0] = xmmword_101C369A0;
  v277[1] = xmmword_101C369B0;
  v277[2] = xmmword_101C369C0;
  v277[3] = xmmword_101C369D0;
  v277[4] = xmmword_101C369E0;
  v277[5] = xmmword_101C369F0;
  v277[6] = xmmword_101C369A0;
  qword_10230B1E8 = 0;
  qword_10230B1F0 = 0;
  qword_10230B1E0 = 0;
  v252 = (char *)operator new(0x70uLL);
  v253 = 0;
  qword_10230B1E0 = (uint64_t)v252;
  qword_10230B1E8 = (uint64_t)v252;
  qword_10230B1F0 = (uint64_t)(v252 + 112);
  do
  {
    *(_OWORD *)&v252[v253 * 16] = v277[v253];
    ++v253;
  }
  while (v253 != 7);
  qword_10230B1E8 = (uint64_t)(v252 + 112);
  xmmword_10230B1F8 = xmmword_101C36A00;
  unk_10230B208 = xmmword_101C36A10;
  sub_1015A2E04(&qword_10230B218, "SJ-3");
  v276[0] = xmmword_101C36A20;
  v276[1] = xmmword_101C36A30;
  v276[2] = xmmword_101C36A40;
  v276[3] = xmmword_101C36A50;
  v276[4] = xmmword_101C36A20;
  qword_10230B238 = 0;
  qword_10230B240 = 0;
  qword_10230B230 = 0;
  v254 = (char *)operator new(0x50uLL);
  v255 = 0;
  qword_10230B230 = (uint64_t)v254;
  qword_10230B238 = (uint64_t)v254;
  qword_10230B240 = (uint64_t)(v254 + 80);
  do
  {
    *(_OWORD *)&v254[v255 * 16] = v276[v255];
    ++v255;
  }
  while (v255 != 5);
  qword_10230B238 = (uint64_t)(v254 + 80);
  xmmword_10230B248 = xmmword_101C36A60;
  unk_10230B258 = xmmword_101C36A70;
  sub_1015A2E04(&qword_10230B268, "SJ-4");
  v275[0] = xmmword_101C36A80;
  v275[1] = xmmword_101C36A90;
  v275[2] = xmmword_101C36AA0;
  v275[3] = xmmword_101C36AB0;
  v275[4] = xmmword_101C36A80;
  qword_10230B288 = 0;
  qword_10230B290 = 0;
  qword_10230B280 = 0;
  v256 = (char *)operator new(0x50uLL);
  v257 = 0;
  qword_10230B280 = (uint64_t)v256;
  qword_10230B288 = (uint64_t)v256;
  qword_10230B290 = (uint64_t)(v256 + 80);
  do
  {
    *(_OWORD *)&v256[v257 * 16] = v275[v257];
    ++v257;
  }
  while (v257 != 5);
  qword_10230B288 = (uint64_t)(v256 + 80);
  xmmword_10230B298 = xmmword_101C36AC0;
  unk_10230B2A8 = xmmword_101C36AD0;
  sub_1015A2E04(&qword_10230B2B8, "SJ-5");
  v274[0] = xmmword_101C36AE0;
  v274[1] = xmmword_101C36AF0;
  v274[2] = xmmword_101C36B00;
  v274[3] = xmmword_101C36B10;
  v274[4] = xmmword_101C36B20;
  v274[5] = xmmword_101C36B30;
  v274[6] = xmmword_101C36B40;
  v274[7] = xmmword_101C36B50;
  v274[8] = xmmword_101C36AE0;
  qword_10230B2D8 = 0;
  qword_10230B2E0 = 0;
  qword_10230B2D0 = 0;
  v258 = (char *)operator new(0x90uLL);
  v259 = 0;
  qword_10230B2D0 = (uint64_t)v258;
  qword_10230B2D8 = (uint64_t)v258;
  qword_10230B2E0 = (uint64_t)(v258 + 144);
  do
  {
    *(_OWORD *)&v258[v259 * 16] = v274[v259];
    ++v259;
  }
  while (v259 != 9);
  qword_10230B2D8 = (uint64_t)(v258 + 144);
  xmmword_10230B2E8 = xmmword_101C36AF0;
  unk_10230B2F8 = xmmword_101C36B60;
  sub_1015A2E04(&qword_10230B308, "Atlanta-1");
  v273[0] = xmmword_101C36B70;
  v273[1] = xmmword_101C36B80;
  v273[2] = xmmword_101C36B90;
  v273[3] = xmmword_101C36BA0;
  v273[4] = xmmword_101C36BB0;
  v273[5] = xmmword_101C36BC0;
  v273[6] = xmmword_101C36BD0;
  v273[7] = xmmword_101C36BE0;
  v273[8] = xmmword_101C36BF0;
  v273[9] = xmmword_101C36C00;
  v273[10] = xmmword_101C36C10;
  v273[11] = xmmword_101C36C20;
  v273[12] = xmmword_101C36C30;
  v273[13] = xmmword_101C36C40;
  v273[14] = xmmword_101C36C50;
  v273[15] = xmmword_101C36C60;
  v273[16] = xmmword_101C36C70;
  v273[17] = xmmword_101C36C80;
  v273[18] = xmmword_101C36C90;
  v273[19] = xmmword_101C36CA0;
  v273[20] = xmmword_101C36CB0;
  v273[21] = xmmword_101C36CC0;
  v273[22] = xmmword_101C36CD0;
  v273[23] = xmmword_101C36CE0;
  v273[24] = xmmword_101C36CF0;
  v273[25] = xmmword_101C36B70;
  qword_10230B320 = 0;
  qword_10230B328 = 0;
  qword_10230B330 = 0;
  v260 = (char *)operator new(0x1A0uLL);
  v261 = 0;
  qword_10230B320 = (uint64_t)v260;
  qword_10230B328 = (uint64_t)v260;
  qword_10230B330 = (uint64_t)(v260 + 416);
  do
  {
    v262 = &v260[v261 * 16];
    v263 = v273[v261 + 1];
    *(_OWORD *)v262 = v273[v261];
    *((_OWORD *)v262 + 1) = v263;
    v261 += 2;
  }
  while (v261 != 26);
  qword_10230B328 = (uint64_t)(v260 + 416);
  xmmword_10230B338 = xmmword_101C36D00;
  unk_10230B348 = xmmword_101C36D10;
  sub_1015A2E04(&qword_10230B358, "Atlanta-2");
  v272[0] = xmmword_101C36D20;
  v272[1] = xmmword_101C36D30;
  v272[2] = xmmword_101C36D40;
  v272[3] = xmmword_101C36D50;
  v272[4] = xmmword_101C36D60;
  v272[5] = xmmword_101C36D70;
  v272[6] = xmmword_101C36D80;
  v272[7] = xmmword_101C36D90;
  v272[8] = xmmword_101C36DA0;
  v272[9] = xmmword_101C36DB0;
  v272[10] = xmmword_101C36DC0;
  v272[11] = xmmword_101C36DD0;
  v272[12] = xmmword_101C36DE0;
  v272[13] = xmmword_101C36DF0;
  v272[14] = xmmword_101C36E00;
  v272[15] = xmmword_101C36D20;
  qword_10230B378 = 0;
  qword_10230B380 = 0;
  qword_10230B370 = 0;
  v264 = (char *)operator new(0x100uLL);
  v265 = 0;
  qword_10230B370 = (uint64_t)v264;
  qword_10230B378 = (uint64_t)v264;
  qword_10230B380 = (uint64_t)(v264 + 256);
  do
  {
    v266 = &v264[v265 * 16];
    v267 = v272[v265 + 1];
    *(_OWORD *)v266 = v272[v265];
    *((_OWORD *)v266 + 1) = v267;
    v265 += 2;
  }
  while (v265 != 16);
  qword_10230B378 = (uint64_t)(v264 + 256);
  xmmword_10230B388 = xmmword_101C36E10;
  unk_10230B398 = xmmword_101C36E20;
  sub_1015A2E04(&qword_10230B3A8, "Atlanta-3");
  v271[0] = xmmword_101C36E30;
  v271[1] = xmmword_101C36E40;
  v271[2] = xmmword_101C36E50;
  v271[3] = xmmword_101C36E60;
  v271[4] = xmmword_101C36E70;
  v271[5] = xmmword_101C36E80;
  v271[6] = xmmword_101C36E90;
  v271[7] = xmmword_101C36EA0;
  v271[8] = xmmword_101C36EB0;
  qword_10230B3C8 = 0;
  qword_10230B3D0 = 0;
  qword_10230B3C0 = 0;
  v268 = (char *)operator new(0x90uLL);
  v269 = 0;
  qword_10230B3C0 = (uint64_t)v268;
  qword_10230B3C8 = (uint64_t)v268;
  qword_10230B3D0 = (uint64_t)(v268 + 144);
  do
  {
    *(_OWORD *)&v268[v269 * 16] = v271[v269];
    ++v269;
  }
  while (v269 != 9);
  qword_10230B3C8 = (uint64_t)(v268 + 144);
  xmmword_10230B3D8 = xmmword_101C36EC0;
  xmmword_10230B3E8 = xmmword_101C36ED0;
  return __cxa_atexit((void (*)(void *))sub_100FC79B4, &qword_102309648, (void *)&_mh_execute_header);
}

void sub_100FCFA04(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t *v3;
  void *v4;

  if (byte_10230B3BF < 0)
    sub_10193880C();
  v3 = &qword_10230B3A8;
  while (1)
  {
    v4 = (void *)*(v3 - 7);
    if (v4)
    {
      *(v3 - 6) = (uint64_t)v4;
      operator delete(v4);
    }
    if (*((char *)v3 - 57) < 0)
      operator delete((void *)*(v3 - 10));
    v3 -= 10;
    if (v3 == v1)
      _Unwind_Resume(exception_object);
  }
}

void sub_100FD08F4()
{
  if (byte_10230965F < 0)
    sub_101938C74();
  JUMPOUT(0x100FD08ECLL);
}

void sub_100FD090C()
{
  JUMPOUT(0x100FD08ECLL);
}

uint64_t sub_100FD0914()
{
  char *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  __int128 v7;
  char *v8;
  uint64_t v9;
  char *v10;
  __int128 v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  char *v20;
  uint64_t v21;
  char *v22;
  __int128 v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  _OWORD v41[7];
  _OWORD v42[5];
  _OWORD v43[5];
  _OWORD v44[5];
  _OWORD v45[5];
  _OWORD v46[5];
  _OWORD v47[19];
  _OWORD v48[111];
  _OWORD v49[46];
  _OWORD v50[8];
  _OWORD v51[7];
  _OWORD v52[53];
  _OWORD v53[78];
  _OWORD v54[150];
  _OWORD v55[37];
  _OWORD v56[25];

  sub_1015A2E04(qword_102309630, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102309630, (void *)&_mh_execute_header);
  sub_100FC9F98();
  sub_1015A2E04(qword_10230B3F8, "ContinentalUS-WestCoast");
  v56[0] = xmmword_101C36EE0;
  v56[1] = xmmword_101C36EF0;
  v56[2] = xmmword_101C36F00;
  v56[3] = xmmword_101C36F10;
  v56[4] = xmmword_101C36F20;
  v56[5] = xmmword_101C36F30;
  v56[6] = xmmword_101C36F40;
  v56[7] = xmmword_101C36F50;
  v56[8] = xmmword_101C36F60;
  v56[9] = xmmword_101C36F70;
  v56[10] = xmmword_101C36F80;
  v56[11] = xmmword_101C36F90;
  v56[12] = xmmword_101C36FA0;
  v56[13] = xmmword_101C36FB0;
  v56[14] = xmmword_101C36FC0;
  v56[15] = xmmword_101C36FD0;
  v56[16] = xmmword_101C36FE0;
  v56[17] = xmmword_101C36FF0;
  v56[18] = xmmword_101C37000;
  v56[19] = xmmword_101C37010;
  v56[20] = xmmword_101C37020;
  v56[21] = xmmword_101C37030;
  v56[22] = xmmword_101C37040;
  v56[23] = xmmword_101C37050;
  v56[24] = xmmword_101C36EE0;
  qword_10230B410 = 0;
  qword_10230B418 = 0;
  qword_10230B420 = 0;
  v0 = (char *)operator new(0x190uLL);
  v1 = 0;
  qword_10230B410 = (uint64_t)v0;
  qword_10230B418 = (uint64_t)v0;
  qword_10230B420 = (uint64_t)(v0 + 400);
  do
  {
    *(_OWORD *)&v0[v1 * 16] = v56[v1];
    ++v1;
  }
  while (v1 != 25);
  qword_10230B418 = (uint64_t)(v0 + 400);
  xmmword_10230B428 = xmmword_101C37060;
  unk_10230B438 = xmmword_101C37070;
  sub_1015A2E04(&qword_10230B448, "ContinentalUS-Mountain");
  v55[0] = xmmword_101C36F70;
  v55[1] = xmmword_101C37080;
  v55[2] = xmmword_101C37090;
  v55[3] = xmmword_101C370A0;
  v55[4] = xmmword_101C370B0;
  v55[5] = xmmword_101C370C0;
  v55[6] = xmmword_101C370D0;
  v55[7] = xmmword_101C370E0;
  v55[8] = xmmword_101C370F0;
  v55[9] = xmmword_101C37100;
  v55[10] = xmmword_101C37110;
  v55[11] = xmmword_101C37120;
  v55[12] = xmmword_101C37130;
  v55[13] = xmmword_101C37140;
  v55[14] = xmmword_101C37150;
  v55[15] = xmmword_101C37160;
  v55[16] = xmmword_101C37170;
  v55[17] = xmmword_101C37180;
  v55[18] = xmmword_101C37190;
  v55[19] = xmmword_101C371A0;
  v55[20] = xmmword_101C371B0;
  v55[21] = xmmword_101C371C0;
  v55[22] = xmmword_101C371D0;
  v55[23] = xmmword_101C371E0;
  v55[24] = xmmword_101C371F0;
  v55[25] = xmmword_101C37200;
  v55[26] = xmmword_101C37210;
  v55[27] = xmmword_101C37220;
  v55[28] = xmmword_101C37230;
  v55[29] = xmmword_101C37240;
  v55[30] = xmmword_101C37250;
  v55[31] = xmmword_101C37260;
  v55[32] = xmmword_101C37270;
  v55[33] = xmmword_101C37280;
  v55[34] = xmmword_101C37290;
  v55[35] = xmmword_101C372A0;
  v55[36] = xmmword_101C36F70;
  qword_10230B460 = 0;
  qword_10230B468 = 0;
  qword_10230B470 = 0;
  v2 = (char *)operator new(0x250uLL);
  v3 = 0;
  qword_10230B460 = (uint64_t)v2;
  qword_10230B468 = (uint64_t)v2;
  qword_10230B470 = (uint64_t)(v2 + 592);
  do
  {
    *(_OWORD *)&v2[v3 * 16] = v55[v3];
    ++v3;
  }
  while (v3 != 37);
  qword_10230B468 = (uint64_t)(v2 + 592);
  xmmword_10230B478 = xmmword_101C372B0;
  unk_10230B488 = xmmword_101C37080;
  sub_1015A2E04(&qword_10230B498, "ContinentalUS-Central1");
  v54[0] = xmmword_101C372C0;
  v54[1] = xmmword_101C37080;
  v54[2] = xmmword_101C370A0;
  v54[3] = xmmword_101C372D0;
  v54[4] = xmmword_101C372E0;
  v54[5] = xmmword_101C372F0;
  v54[6] = xmmword_101C37300;
  v54[7] = xmmword_101C37310;
  v54[8] = xmmword_101C37320;
  v54[9] = xmmword_101C37330;
  v54[10] = xmmword_101C37340;
  v54[11] = xmmword_101C37350;
  v54[12] = xmmword_101C37360;
  v54[13] = xmmword_101C37370;
  v54[14] = xmmword_101C37380;
  v54[15] = xmmword_101C37390;
  v54[16] = xmmword_101C373A0;
  v54[17] = xmmword_101C373B0;
  v54[18] = xmmword_101C373C0;
  v54[19] = xmmword_101C373D0;
  v54[20] = xmmword_101C373E0;
  v54[21] = xmmword_101C373F0;
  v54[22] = xmmword_101C37400;
  v54[23] = xmmword_101C37410;
  v54[24] = xmmword_101C37420;
  v54[25] = xmmword_101C37430;
  v54[26] = xmmword_101C37440;
  v54[27] = xmmword_101C37450;
  v54[28] = xmmword_101C37460;
  v54[29] = xmmword_101C37470;
  v54[30] = xmmword_101C37480;
  v54[31] = xmmword_101C37490;
  v54[32] = xmmword_101C374A0;
  v54[33] = xmmword_101C374B0;
  v54[34] = xmmword_101C374C0;
  v54[35] = xmmword_101C374D0;
  v54[36] = xmmword_101C374E0;
  v54[37] = xmmword_101C374F0;
  v54[38] = xmmword_101C37500;
  v54[39] = xmmword_101C37510;
  v54[40] = xmmword_101C37520;
  v54[41] = xmmword_101C37530;
  v54[42] = xmmword_101C37540;
  v54[43] = xmmword_101C37550;
  v54[44] = xmmword_101C37560;
  v54[45] = xmmword_101C37570;
  v54[46] = xmmword_101C37580;
  v54[47] = xmmword_101C37590;
  v54[48] = xmmword_101C375A0;
  v54[49] = xmmword_101C375B0;
  v54[50] = xmmword_101C375C0;
  v54[51] = xmmword_101C375D0;
  v54[52] = xmmword_101C375E0;
  v54[53] = xmmword_101C375F0;
  v54[54] = xmmword_101C37600;
  v54[55] = xmmword_101C37610;
  v54[56] = xmmword_101C37620;
  v54[57] = xmmword_101C37630;
  v54[58] = xmmword_101C37640;
  v54[59] = xmmword_101C37650;
  v54[60] = xmmword_101C37660;
  v54[61] = xmmword_101C37670;
  v54[62] = xmmword_101C37680;
  v54[63] = xmmword_101C37690;
  v54[64] = xmmword_101C376A0;
  v54[65] = xmmword_101C376B0;
  v54[66] = xmmword_101C376C0;
  v54[67] = xmmword_101C376D0;
  v54[68] = xmmword_101C376E0;
  v54[69] = xmmword_101C376F0;
  v54[70] = xmmword_101C37700;
  v54[71] = xmmword_101C37710;
  v54[72] = xmmword_101C37720;
  v54[73] = xmmword_101C37730;
  v54[74] = xmmword_101C37740;
  v54[75] = xmmword_101C37750;
  v54[76] = xmmword_101C37760;
  v54[77] = xmmword_101C37770;
  v54[78] = xmmword_101C37780;
  v54[79] = xmmword_101C37790;
  v54[80] = xmmword_101C377A0;
  v54[81] = xmmword_101C377B0;
  v54[82] = xmmword_101C377C0;
  v54[83] = xmmword_101C377D0;
  v54[84] = xmmword_101C377E0;
  v54[85] = xmmword_101C377F0;
  v54[86] = xmmword_101C37800;
  v54[87] = xmmword_101C37810;
  v54[88] = xmmword_101C37820;
  v54[89] = xmmword_101C37830;
  v54[90] = xmmword_101C37840;
  v54[91] = xmmword_101C37850;
  v54[92] = xmmword_101C37860;
  v54[93] = xmmword_101C37870;
  v54[94] = xmmword_101C37880;
  v54[95] = xmmword_101C37890;
  v54[96] = xmmword_101C378A0;
  v54[97] = xmmword_101C378B0;
  v54[98] = xmmword_101C378C0;
  v54[99] = xmmword_101C378D0;
  v54[100] = xmmword_101C378E0;
  v54[101] = xmmword_101C378F0;
  v54[102] = xmmword_101C37900;
  v54[103] = xmmword_101C37910;
  v54[104] = xmmword_101C37920;
  v54[105] = xmmword_101C37930;
  v54[106] = xmmword_101C37940;
  v54[107] = xmmword_101C37950;
  v54[108] = xmmword_101C37960;
  v54[109] = xmmword_101C37970;
  v54[110] = xmmword_101C37980;
  v54[111] = xmmword_101C37990;
  v54[112] = xmmword_101C379A0;
  v54[113] = xmmword_101C379B0;
  v54[114] = xmmword_101C379C0;
  v54[115] = xmmword_101C379D0;
  v54[116] = xmmword_101C379E0;
  v54[117] = xmmword_101C379F0;
  v54[118] = xmmword_101C37A00;
  v54[119] = xmmword_101C37A10;
  v54[120] = xmmword_101C37A20;
  v54[121] = xmmword_101C37A30;
  v54[122] = xmmword_101C37A40;
  v54[123] = xmmword_101C37A50;
  v54[124] = xmmword_101C37A60;
  v54[125] = xmmword_101C37A70;
  v54[126] = xmmword_101C37A80;
  v54[127] = xmmword_101C37A90;
  v54[128] = xmmword_101C37AA0;
  v54[129] = xmmword_101C37AB0;
  v54[130] = xmmword_101C37AC0;
  v54[131] = xmmword_101C37AD0;
  v54[132] = xmmword_101C37AE0;
  v54[133] = xmmword_101C37AF0;
  v54[134] = xmmword_101C37B00;
  v54[135] = xmmword_101C37B10;
  v54[136] = xmmword_101C37B20;
  v54[137] = xmmword_101C37B30;
  v54[138] = xmmword_101C37B40;
  v54[139] = xmmword_101C37B50;
  v54[140] = xmmword_101C37B60;
  v54[141] = xmmword_101C37B70;
  v54[142] = xmmword_101C37B80;
  v54[143] = xmmword_101C37B90;
  v54[144] = xmmword_101C37BA0;
  v54[145] = xmmword_101C37BB0;
  v54[146] = xmmword_101C37BC0;
  v54[147] = xmmword_101C37BD0;
  v54[148] = xmmword_101C37BE0;
  v54[149] = xmmword_101C372C0;
  qword_10230B4B0 = 0;
  qword_10230B4B8 = 0;
  qword_10230B4C0 = 0;
  v4 = (char *)operator new(0x960uLL);
  v5 = 0;
  qword_10230B4B0 = (uint64_t)v4;
  qword_10230B4B8 = (uint64_t)v4;
  qword_10230B4C0 = (uint64_t)(v4 + 2400);
  do
  {
    v6 = &v4[v5 * 16];
    v7 = v54[v5 + 1];
    *(_OWORD *)v6 = v54[v5];
    *((_OWORD *)v6 + 1) = v7;
    v5 += 2;
  }
  while (v5 != 150);
  qword_10230B4B8 = (uint64_t)(v4 + 2400);
  xmmword_10230B4C8 = xmmword_101C37BF0;
  unk_10230B4D8 = xmmword_101C372C0;
  sub_1015A2E04(&qword_10230B4E8, "ContinentalUS-Central2");
  v53[0] = xmmword_101C37BE0;
  v53[1] = xmmword_101C37C00;
  v53[2] = xmmword_101C37C10;
  v53[3] = xmmword_101C37C20;
  v53[4] = xmmword_101C37C30;
  v53[5] = xmmword_101C37C40;
  v53[6] = xmmword_101C37C50;
  v53[7] = xmmword_101C37C60;
  v53[8] = xmmword_101C37C70;
  v53[9] = xmmword_101C37C80;
  v53[10] = xmmword_101C37C90;
  v53[11] = xmmword_101C37CA0;
  v53[12] = xmmword_101C37CB0;
  v53[13] = xmmword_101C37CC0;
  v53[14] = xmmword_101C37CD0;
  v53[15] = xmmword_101C37CE0;
  v53[16] = xmmword_101C37CF0;
  v53[17] = xmmword_101C37D00;
  v53[18] = xmmword_101C37D10;
  v53[19] = xmmword_101C37D20;
  v53[20] = xmmword_101C37D30;
  v53[21] = xmmword_101C37D40;
  v53[22] = xmmword_101C37D50;
  v53[23] = xmmword_101C37D60;
  v53[24] = xmmword_101C37D70;
  v53[25] = xmmword_101C37D80;
  v53[26] = xmmword_101C37D90;
  v53[27] = xmmword_101C37DA0;
  v53[28] = xmmword_101C37DB0;
  v53[29] = xmmword_101C37DC0;
  v53[30] = xmmword_101C37DD0;
  v53[31] = xmmword_101C37DE0;
  v53[32] = xmmword_101C37DF0;
  v53[33] = xmmword_101C37E00;
  v53[34] = xmmword_101C37E10;
  v53[35] = xmmword_101C37E20;
  v53[36] = xmmword_101C37E30;
  v53[37] = xmmword_101C37E40;
  v53[38] = xmmword_101C37E50;
  v53[39] = xmmword_101C37E60;
  v53[40] = xmmword_101C37E70;
  v53[41] = xmmword_101C37E80;
  v53[42] = xmmword_101C37E90;
  v53[43] = xmmword_101C37EA0;
  v53[44] = xmmword_101C37EB0;
  v53[45] = xmmword_101C37EC0;
  v53[46] = xmmword_101C37ED0;
  v53[47] = xmmword_101C37EE0;
  v53[48] = xmmword_101C37EF0;
  v53[49] = xmmword_101C37F00;
  v53[50] = xmmword_101C37F10;
  v53[51] = xmmword_101C37F20;
  v53[52] = xmmword_101C37F30;
  v53[53] = xmmword_101C37F40;
  v53[54] = xmmword_101C37F50;
  v53[55] = xmmword_101C37F60;
  v53[56] = xmmword_101C37F70;
  v53[57] = xmmword_101C37F80;
  v53[58] = xmmword_101C37F90;
  v53[59] = xmmword_101C37FA0;
  v53[60] = xmmword_101C37FB0;
  v53[61] = xmmword_101C37FC0;
  v53[62] = xmmword_101C37FD0;
  v53[63] = xmmword_101C37FE0;
  v53[64] = xmmword_101C37FF0;
  v53[65] = xmmword_101C38000;
  v53[66] = xmmword_101C38010;
  v53[67] = xmmword_101C38020;
  v53[68] = xmmword_101C38030;
  v53[69] = xmmword_101C38040;
  v53[70] = xmmword_101C38050;
  v53[71] = xmmword_101C38060;
  v53[72] = xmmword_101C38070;
  v53[73] = xmmword_101C38080;
  v53[74] = xmmword_101C38090;
  v53[75] = xmmword_101C380A0;
  v53[76] = xmmword_101C380B0;
  v53[77] = xmmword_101C37BE0;
  qword_10230B500 = 0;
  qword_10230B508 = 0;
  qword_10230B510 = 0;
  v8 = (char *)operator new(0x4E0uLL);
  v9 = 0;
  qword_10230B500 = (uint64_t)v8;
  qword_10230B508 = (uint64_t)v8;
  qword_10230B510 = (uint64_t)(v8 + 1248);
  do
  {
    v10 = &v8[v9 * 16];
    v11 = v53[v9 + 1];
    *(_OWORD *)v10 = v53[v9];
    *((_OWORD *)v10 + 1) = v11;
    v9 += 2;
  }
  while (v9 != 78);
  qword_10230B508 = (uint64_t)(v8 + 1248);
  xmmword_10230B518 = xmmword_101C37BE0;
  unk_10230B528 = xmmword_101C380C0;
  sub_1015A2E04(&qword_10230B538, "ContinentalUS-Eastern");
  v52[0] = xmmword_101C380D0;
  v52[1] = xmmword_101C380E0;
  v52[2] = xmmword_101C380F0;
  v52[3] = xmmword_101C38100;
  v52[4] = xmmword_101C38110;
  v52[5] = xmmword_101C38120;
  v52[6] = xmmword_101C38130;
  v52[7] = xmmword_101C38140;
  v52[8] = xmmword_101C38150;
  v52[9] = xmmword_101C38160;
  v52[10] = xmmword_101C38170;
  v52[11] = xmmword_101C38180;
  v52[12] = xmmword_101C38190;
  v52[13] = xmmword_101C381A0;
  v52[14] = xmmword_101C381B0;
  v52[15] = xmmword_101C381C0;
  v52[16] = xmmword_101C381D0;
  v52[17] = xmmword_101C381E0;
  v52[18] = xmmword_101C381F0;
  v52[19] = xmmword_101C38200;
  v52[20] = xmmword_101C38210;
  v52[21] = xmmword_101C38220;
  v52[22] = xmmword_101C38230;
  v52[23] = xmmword_101C38240;
  v52[24] = xmmword_101C38250;
  v52[25] = xmmword_101C38260;
  v52[26] = xmmword_101C38270;
  v52[27] = xmmword_101C38280;
  v52[28] = xmmword_101C38290;
  v52[29] = xmmword_101C382A0;
  v52[30] = xmmword_101C382B0;
  v52[31] = xmmword_101C382C0;
  v52[32] = xmmword_101C382D0;
  v52[33] = xmmword_101C382E0;
  v52[34] = xmmword_101C382F0;
  v52[35] = xmmword_101C38300;
  v52[36] = xmmword_101C38310;
  v52[37] = xmmword_101C38320;
  v52[38] = xmmword_101C38330;
  v52[39] = xmmword_101C38340;
  v52[40] = xmmword_101C38350;
  v52[41] = xmmword_101C38360;
  v52[42] = xmmword_101C38370;
  v52[43] = xmmword_101C38380;
  v52[44] = xmmword_101C38390;
  v52[45] = xmmword_101C383A0;
  v52[46] = xmmword_101C383B0;
  v52[47] = xmmword_101C383C0;
  v52[48] = xmmword_101C383D0;
  v52[49] = xmmword_101C383E0;
  v52[50] = xmmword_101C383F0;
  v52[51] = xmmword_101C38400;
  v52[52] = xmmword_101C380D0;
  qword_10230B550 = 0;
  qword_10230B558 = 0;
  qword_10230B560 = 0;
  v12 = (char *)operator new(0x350uLL);
  v13 = 0;
  qword_10230B550 = (uint64_t)v12;
  qword_10230B558 = (uint64_t)v12;
  qword_10230B560 = (uint64_t)(v12 + 848);
  do
  {
    *(_OWORD *)&v12[v13 * 16] = v52[v13];
    ++v13;
  }
  while (v13 != 53);
  qword_10230B558 = (uint64_t)(v12 + 848);
  xmmword_10230B568 = xmmword_101C383F0;
  unk_10230B578 = xmmword_101C38410;
  sub_1015A2E04(&qword_10230B588, "ContinentalUS-EastCoast");
  v51[0] = xmmword_101C380D0;
  v51[1] = xmmword_101C38400;
  v51[2] = xmmword_101C38420;
  v51[3] = xmmword_101C38430;
  v51[4] = xmmword_101C38440;
  v51[5] = xmmword_101C38450;
  v51[6] = xmmword_101C380D0;
  qword_10230B5A8 = 0;
  qword_10230B5B0 = 0;
  qword_10230B5A0 = 0;
  v14 = (char *)operator new(0x70uLL);
  v15 = 0;
  qword_10230B5A0 = (uint64_t)v14;
  qword_10230B5A8 = (uint64_t)v14;
  qword_10230B5B0 = (uint64_t)(v14 + 112);
  do
  {
    *(_OWORD *)&v14[v15 * 16] = v51[v15];
    ++v15;
  }
  while (v15 != 7);
  qword_10230B5A8 = (uint64_t)(v14 + 112);
  xmmword_10230B5B8 = xmmword_101C38400;
  unk_10230B5C8 = xmmword_101C38460;
  sub_1015A2E04(&qword_10230B5D8, "ContinentalUS-Florida");
  v50[0] = xmmword_101C38400;
  v50[1] = xmmword_101C38470;
  v50[2] = xmmword_101C38480;
  v50[3] = xmmword_101C38490;
  v50[4] = xmmword_101C384A0;
  v50[5] = xmmword_101C384B0;
  v50[6] = xmmword_101C38420;
  v50[7] = xmmword_101C38400;
  qword_10230B5F8 = 0;
  qword_10230B600 = 0;
  qword_10230B5F0 = 0;
  v16 = (char *)operator new(0x80uLL);
  v17 = 0;
  qword_10230B5F0 = (uint64_t)v16;
  qword_10230B5F8 = (uint64_t)v16;
  qword_10230B600 = (uint64_t)(v16 + 128);
  do
  {
    v18 = &v16[v17 * 16];
    v19 = v50[v17 + 1];
    *(_OWORD *)v18 = v50[v17];
    *((_OWORD *)v18 + 1) = v19;
    v17 += 2;
  }
  while (v17 != 8);
  qword_10230B5F8 = (uint64_t)(v16 + 128);
  xmmword_10230B608 = xmmword_101C38480;
  unk_10230B618 = xmmword_101C38420;
  sub_1015A2E04(&qword_10230B628, "ContinentalUS-NewYork");
  v49[0] = xmmword_101C384C0;
  v49[1] = xmmword_101C38440;
  v49[2] = xmmword_101C384D0;
  v49[3] = xmmword_101C384E0;
  v49[4] = xmmword_101C384F0;
  v49[5] = xmmword_101C38500;
  v49[6] = xmmword_101C38510;
  v49[7] = xmmword_101C38520;
  v49[8] = xmmword_101C38530;
  v49[9] = xmmword_101C38540;
  v49[10] = xmmword_101C38550;
  v49[11] = xmmword_101C38560;
  v49[12] = xmmword_101C38570;
  v49[13] = xmmword_101C38580;
  v49[14] = xmmword_101C38590;
  v49[15] = xmmword_101C385A0;
  v49[16] = xmmword_101C385B0;
  v49[17] = xmmword_101C385C0;
  v49[18] = xmmword_101C385D0;
  v49[19] = xmmword_101C385E0;
  v49[20] = xmmword_101C385F0;
  v49[21] = xmmword_101C38600;
  v49[22] = xmmword_101C38610;
  v49[23] = xmmword_101C38620;
  v49[24] = xmmword_101C38630;
  v49[25] = xmmword_101C38640;
  v49[26] = xmmword_101C38650;
  v49[27] = xmmword_101C38660;
  v49[28] = xmmword_101C38670;
  v49[29] = xmmword_101C38680;
  v49[30] = xmmword_101C38690;
  v49[31] = xmmword_101C386A0;
  v49[32] = xmmword_101C386B0;
  v49[33] = xmmword_101C386C0;
  v49[34] = xmmword_101C386D0;
  v49[35] = xmmword_101C386E0;
  v49[36] = xmmword_101C386F0;
  v49[37] = xmmword_101C38700;
  v49[38] = xmmword_101C38710;
  v49[39] = xmmword_101C38720;
  v49[40] = xmmword_101C38730;
  v49[41] = xmmword_101C38740;
  v49[42] = xmmword_101C38750;
  v49[43] = xmmword_101C38760;
  v49[44] = xmmword_101C380D0;
  v49[45] = xmmword_101C384C0;
  qword_10230B640 = 0;
  qword_10230B648 = 0;
  qword_10230B650 = 0;
  v20 = (char *)operator new(0x2E0uLL);
  v21 = 0;
  qword_10230B640 = (uint64_t)v20;
  qword_10230B648 = (uint64_t)v20;
  qword_10230B650 = (uint64_t)(v20 + 736);
  do
  {
    v22 = &v20[v21 * 16];
    v23 = v49[v21 + 1];
    *(_OWORD *)v22 = v49[v21];
    *((_OWORD *)v22 + 1) = v23;
    v21 += 2;
  }
  while (v21 != 46);
  qword_10230B648 = (uint64_t)(v20 + 736);
  xmmword_10230B658 = xmmword_101C384C0;
  unk_10230B668 = xmmword_101C384D0;
  sub_1015A2E04(&qword_10230B678, "ContinentalUS-Maine");
  v48[0] = xmmword_101C384E0;
  v48[1] = xmmword_101C38770;
  v48[2] = xmmword_101C38780;
  v48[3] = xmmword_101C38790;
  v48[4] = xmmword_101C387A0;
  v48[5] = xmmword_101C387B0;
  v48[6] = xmmword_101C387C0;
  v48[7] = xmmword_101C387D0;
  v48[8] = xmmword_101C387E0;
  v48[9] = xmmword_101C387F0;
  v48[10] = xmmword_101C38800;
  v48[11] = xmmword_101C38810;
  v48[12] = xmmword_101C38820;
  v48[13] = xmmword_101C38830;
  v48[14] = xmmword_101C38840;
  v48[15] = xmmword_101C38850;
  v48[16] = xmmword_101C38860;
  v48[17] = xmmword_101C38870;
  v48[18] = xmmword_101C38880;
  v48[19] = xmmword_101C38890;
  v48[20] = xmmword_101C388A0;
  v48[21] = xmmword_101C388B0;
  v48[22] = xmmword_101C388C0;
  v48[23] = xmmword_101C388D0;
  v48[24] = xmmword_101C388E0;
  v48[25] = xmmword_101C388F0;
  v48[26] = xmmword_101C38900;
  v48[27] = xmmword_101C38910;
  v48[28] = xmmword_101C38920;
  v48[29] = xmmword_101C38930;
  v48[30] = xmmword_101C38940;
  v48[31] = xmmword_101C38950;
  v48[32] = xmmword_101C38960;
  v48[33] = xmmword_101C38970;
  v48[34] = xmmword_101C38980;
  v48[35] = xmmword_101C38990;
  v48[36] = xmmword_101C389A0;
  v48[37] = xmmword_101C389B0;
  v48[38] = xmmword_101C389C0;
  v48[39] = xmmword_101C389D0;
  v48[40] = xmmword_101C389E0;
  v48[41] = xmmword_101C389F0;
  v48[42] = xmmword_101C38A00;
  v48[43] = xmmword_101C38A10;
  v48[44] = xmmword_101C38A20;
  v48[45] = xmmword_101C38A30;
  v48[46] = xmmword_101C38A40;
  v48[47] = xmmword_101C38A50;
  v48[48] = xmmword_101C38A60;
  v48[49] = xmmword_101C38A70;
  v48[50] = xmmword_101C38A80;
  v48[51] = xmmword_101C38A90;
  v48[52] = xmmword_101C38AA0;
  v48[53] = xmmword_101C38AB0;
  v48[54] = xmmword_101C38AC0;
  v48[55] = xmmword_101C38AD0;
  v48[56] = xmmword_101C38AE0;
  v48[57] = xmmword_101C38AF0;
  v48[58] = xmmword_101C38B00;
  v48[59] = xmmword_101C38B10;
  v48[60] = xmmword_101C38B20;
  v48[61] = xmmword_101C38B30;
  v48[62] = xmmword_101C38B40;
  v48[63] = xmmword_101C38B50;
  v48[64] = xmmword_101C38B60;
  v48[65] = xmmword_101C38B70;
  v48[66] = xmmword_101C38B80;
  v48[67] = xmmword_101C38B90;
  v48[68] = xmmword_101C38BA0;
  v48[69] = xmmword_101C38BB0;
  v48[70] = xmmword_101C38BC0;
  v48[71] = xmmword_101C38BD0;
  v48[72] = xmmword_101C38BE0;
  v48[73] = xmmword_101C38BF0;
  v48[74] = xmmword_101C38C00;
  v48[75] = xmmword_101C38C10;
  v48[76] = xmmword_101C38C20;
  v48[77] = xmmword_101C38C30;
  v48[78] = xmmword_101C38C40;
  v48[79] = xmmword_101C38C50;
  v48[80] = xmmword_101C38C60;
  v48[81] = xmmword_101C38C70;
  v48[82] = xmmword_101C38C80;
  v48[83] = xmmword_101C38C90;
  v48[84] = xmmword_101C38CA0;
  v48[85] = xmmword_101C38CB0;
  v48[86] = xmmword_101C38CC0;
  v48[87] = xmmword_101C38CD0;
  v48[88] = xmmword_101C38CE0;
  v48[89] = xmmword_101C38CF0;
  v48[90] = xmmword_101C38D00;
  v48[91] = xmmword_101C38D10;
  v48[92] = xmmword_101C38D20;
  v48[93] = xmmword_101C38D30;
  v48[94] = xmmword_101C38D40;
  v48[95] = xmmword_101C38D50;
  v48[96] = xmmword_101C38D60;
  v48[97] = xmmword_101C38D70;
  v48[98] = xmmword_101C38D80;
  v48[99] = xmmword_101C38D90;
  v48[100] = xmmword_101C38DA0;
  v48[101] = xmmword_101C38DB0;
  v48[102] = xmmword_101C38DC0;
  v48[103] = xmmword_101C38DD0;
  v48[104] = xmmword_101C38DE0;
  v48[105] = xmmword_101C38DF0;
  v48[106] = xmmword_101C38E00;
  v48[107] = xmmword_101C38E10;
  v48[108] = xmmword_101C38E20;
  v48[109] = xmmword_101C38E30;
  v48[110] = xmmword_101C384E0;
  qword_10230B690 = 0;
  qword_10230B698 = 0;
  qword_10230B6A0 = 0;
  v24 = (char *)operator new(0x6F0uLL);
  v25 = 0;
  qword_10230B690 = (uint64_t)v24;
  qword_10230B698 = (uint64_t)v24;
  qword_10230B6A0 = (uint64_t)(v24 + 1776);
  do
  {
    *(_OWORD *)&v24[v25 * 16] = v48[v25];
    ++v25;
  }
  while (v25 != 111);
  qword_10230B698 = (uint64_t)(v24 + 1776);
  xmmword_10230B6A8 = xmmword_101C38E40;
  unk_10230B6B8 = xmmword_101C38E50;
  sub_1015A2E04(&qword_10230B6C8, "Alaska");
  v47[0] = xmmword_101C38E60;
  v47[1] = xmmword_101C38E70;
  v47[2] = xmmword_101C38E80;
  v47[3] = xmmword_101C38E90;
  v47[4] = xmmword_101C38EA0;
  v47[5] = xmmword_101C38EB0;
  v47[6] = xmmword_101C38EC0;
  v47[7] = xmmword_101C38ED0;
  v47[8] = xmmword_101C38EE0;
  v47[9] = xmmword_101C38EF0;
  v47[10] = xmmword_101C38F00;
  v47[11] = xmmword_101C38F10;
  v47[12] = xmmword_101C38F20;
  v47[13] = xmmword_101C38F30;
  v47[14] = xmmword_101C38F40;
  v47[15] = xmmword_101C38F50;
  v47[16] = xmmword_101C38F60;
  v47[17] = xmmword_101C38F70;
  v47[18] = xmmword_101C38F80;
  qword_10230B6E0 = 0;
  qword_10230B6E8 = 0;
  qword_10230B6F0 = 0;
  v26 = (char *)operator new(0x130uLL);
  v27 = 0;
  qword_10230B6E0 = (uint64_t)v26;
  qword_10230B6E8 = (uint64_t)v26;
  qword_10230B6F0 = (uint64_t)(v26 + 304);
  do
  {
    *(_OWORD *)&v26[v27 * 16] = v47[v27];
    ++v27;
  }
  while (v27 != 19);
  qword_10230B6E8 = (uint64_t)(v26 + 304);
  xmmword_10230B6F8 = xmmword_101C38F70;
  unk_10230B708 = xmmword_101C38F90;
  sub_1015A2E04(&qword_10230B718, "Hawaii");
  v46[0] = xmmword_101C38FA0;
  v46[1] = xmmword_101C38FB0;
  v46[2] = xmmword_101C38FC0;
  v46[3] = xmmword_101C38FD0;
  v46[4] = xmmword_101C38FA0;
  qword_10230B738 = 0;
  qword_10230B740 = 0;
  qword_10230B730 = 0;
  v28 = (char *)operator new(0x50uLL);
  v29 = 0;
  qword_10230B730 = (uint64_t)v28;
  qword_10230B738 = (uint64_t)v28;
  qword_10230B740 = (uint64_t)(v28 + 80);
  do
  {
    *(_OWORD *)&v28[v29 * 16] = v46[v29];
    ++v29;
  }
  while (v29 != 5);
  qword_10230B738 = (uint64_t)(v28 + 80);
  xmmword_10230B748 = xmmword_101C38FA0;
  unk_10230B758 = xmmword_101C38FC0;
  sub_1015A2E04(&qword_10230B768, "American-Samoa");
  v45[0] = xmmword_101C38FE0;
  v45[1] = xmmword_101C38FF0;
  v45[2] = xmmword_101C39000;
  v45[3] = xmmword_101C39010;
  v45[4] = xmmword_101C38FE0;
  qword_10230B788 = 0;
  qword_10230B790 = 0;
  qword_10230B780 = 0;
  v30 = (char *)operator new(0x50uLL);
  v31 = 0;
  qword_10230B780 = (uint64_t)v30;
  qword_10230B788 = (uint64_t)v30;
  qword_10230B790 = (uint64_t)(v30 + 80);
  do
  {
    *(_OWORD *)&v30[v31 * 16] = v45[v31];
    ++v31;
  }
  while (v31 != 5);
  qword_10230B788 = (uint64_t)(v30 + 80);
  xmmword_10230B798 = xmmword_101C38FE0;
  unk_10230B7A8 = xmmword_101C39000;
  sub_1015A2E04(&qword_10230B7B8, "Commonwealth-Northern-Mariana-Islands");
  v44[0] = xmmword_101C39020;
  v44[1] = xmmword_101C39030;
  v44[2] = xmmword_101C39040;
  v44[3] = xmmword_101C39050;
  v44[4] = xmmword_101C39020;
  qword_10230B7D8 = 0;
  qword_10230B7E0 = 0;
  qword_10230B7D0 = 0;
  v32 = (char *)operator new(0x50uLL);
  v33 = 0;
  qword_10230B7D0 = (uint64_t)v32;
  qword_10230B7D8 = (uint64_t)v32;
  qword_10230B7E0 = (uint64_t)(v32 + 80);
  do
  {
    *(_OWORD *)&v32[v33 * 16] = v44[v33];
    ++v33;
  }
  while (v33 != 5);
  qword_10230B7D8 = (uint64_t)(v32 + 80);
  xmmword_10230B7E8 = xmmword_101C39020;
  unk_10230B7F8 = xmmword_101C39040;
  sub_1015A2E04(&qword_10230B808, "Guam");
  v43[0] = xmmword_101C39060;
  v43[1] = xmmword_101C39070;
  v43[2] = xmmword_101C39080;
  v43[3] = xmmword_101C39090;
  v43[4] = xmmword_101C39060;
  qword_10230B828 = 0;
  qword_10230B830 = 0;
  qword_10230B820 = 0;
  v34 = (char *)operator new(0x50uLL);
  v35 = 0;
  qword_10230B820 = (uint64_t)v34;
  qword_10230B828 = (uint64_t)v34;
  qword_10230B830 = (uint64_t)(v34 + 80);
  do
  {
    *(_OWORD *)&v34[v35 * 16] = v43[v35];
    ++v35;
  }
  while (v35 != 5);
  qword_10230B828 = (uint64_t)(v34 + 80);
  xmmword_10230B838 = xmmword_101C39060;
  unk_10230B848 = xmmword_101C39080;
  sub_1015A2E04(&qword_10230B858, "Puerto-Rico");
  v42[0] = xmmword_101C390A0;
  v42[1] = xmmword_101C390B0;
  v42[2] = xmmword_101C390C0;
  v42[3] = xmmword_101C390D0;
  v42[4] = xmmword_101C390A0;
  qword_10230B878 = 0;
  qword_10230B880 = 0;
  qword_10230B870 = 0;
  v36 = (char *)operator new(0x50uLL);
  v37 = 0;
  qword_10230B870 = (uint64_t)v36;
  qword_10230B878 = (uint64_t)v36;
  qword_10230B880 = (uint64_t)(v36 + 80);
  do
  {
    *(_OWORD *)&v36[v37 * 16] = v42[v37];
    ++v37;
  }
  while (v37 != 5);
  qword_10230B878 = (uint64_t)(v36 + 80);
  xmmword_10230B888 = xmmword_101C390A0;
  unk_10230B898 = xmmword_101C390C0;
  sub_1015A2E04(&qword_10230B8A8, "US-Virgin-Islands");
  v41[0] = xmmword_101C390E0;
  v41[1] = xmmword_101C390F0;
  v41[2] = xmmword_101C39100;
  v41[3] = xmmword_101C39110;
  v41[4] = xmmword_101C39120;
  v41[5] = xmmword_101C39130;
  v41[6] = xmmword_101C390E0;
  qword_10230B8C8 = 0;
  qword_10230B8D0 = 0;
  qword_10230B8C0 = 0;
  v38 = (char *)operator new(0x70uLL);
  v39 = 0;
  qword_10230B8C0 = (uint64_t)v38;
  qword_10230B8C8 = (uint64_t)v38;
  qword_10230B8D0 = (uint64_t)(v38 + 112);
  do
  {
    *(_OWORD *)&v38[v39 * 16] = v41[v39];
    ++v39;
  }
  while (v39 != 7);
  qword_10230B8C8 = (uint64_t)(v38 + 112);
  xmmword_10230B8D8 = xmmword_101C390E0;
  xmmword_10230B8E8 = xmmword_101C39140;
  return __cxa_atexit((void (*)(void *))sub_100FC7A28, qword_10230B3F8, (void *)&_mh_execute_header);
}

void sub_100FD2AA8(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t *v3;
  void *v4;

  if (byte_10230B8BF < 0)
    sub_101938C80();
  v3 = &qword_10230B8A8;
  while (1)
  {
    v4 = (void *)*(v3 - 7);
    if (v4)
    {
      *(v3 - 6) = (uint64_t)v4;
      operator delete(v4);
    }
    if (*((char *)v3 - 57) < 0)
      operator delete((void *)*(v3 - 10));
    v3 -= 10;
    if (v3 == v1)
      _Unwind_Resume(exception_object);
  }
}

void sub_100FD2D40()
{
  if (byte_10230B40F < 0)
    sub_101938D34();
  JUMPOUT(0x100FD2D38);
}

void sub_100FD2D58()
{
  JUMPOUT(0x100FD2D38);
}

_QWORD *sub_100FD2D60(_QWORD *a1, int a2)
{
  void *__p[2];
  char v6;

  sub_1015A2E04(__p, "");
  sub_100FD2E18((uint64_t)a1, "SkiHistory", a2, (uint64_t)__p, 1, 30.0);
  if (v6 < 0)
    operator delete(__p[0]);
  *a1 = off_102197C40;
  a1[9] = off_102197CF8;
  a1[50] = 0;
  a1[51] = 0;
  sub_100FD4228((uint64_t)a1);
  return a1;
}

void sub_100FD2DEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;

  sub_100FD326C(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_100FD2E18(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  _QWORD *v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v16;
  uint64_t v17;
  __int16 v18;

  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v12 = (_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = off_10213DEB0;
  sub_10042776C((_QWORD *)(a1 + 8));
  *v12 = &off_10213DEF8;
  *(_QWORD *)a1 = off_102197FB8;
  *(_QWORD *)(a1 + 72) = off_102198060;
  sub_101137D40(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(_QWORD *)a1 = off_102197FB8;
  *(_QWORD *)(a1 + 72) = off_102198060;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 320) = 12000;
  *(_QWORD *)(a1 + 328) = off_10213DEB0;
  sub_10042776C((_QWORD *)(a1 + 336));
  *(_QWORD *)(a1 + 336) = &off_10213DEF8;
  v13 = *(_QWORD *)(a1 + 112);
  v17 = a1 + 112;
  (*(void (**)(void))(v13 + 16))();
  v18 = 256;
  if (!a3)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_100115CE4(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a4;
      v16 = *(_QWORD *)(a4 + 16);
    }
    sub_1011384BC(a1 + 72);
  }
  *(_QWORD *)(a1 + 264) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  return a1;
}

void sub_100FD31C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;

  sub_10187E514((uint64_t)&a19);
  v24[41] = off_10213DEB0;
  sub_100427950(v27);
  sub_100D2C264(v26);
  sub_101138068(a12);
  *v24 = off_10213DEB0;
  sub_100427950(v25);
  _Unwind_Resume(a1);
}

void sub_100FD3264()
{
  JUMPOUT(0x100FD3244);
}

_QWORD *sub_100FD326C(_QWORD *a1)
{
  uint64_t v2;

  a1[9] = off_102198060;
  v2 = (uint64_t)(a1 + 9);
  *a1 = off_102197FB8;
  a1[41] = off_10213DEB0;
  sub_100427950(a1 + 42);
  sub_100D2C264(a1 + 22);
  sub_101138068(v2);
  *a1 = off_10213DEB0;
  sub_100427950(a1 + 1);
  return a1;
}

_QWORD *sub_100FD32EC(uint64_t a1)
{
  return sub_100FD326C((_QWORD *)(a1 - 72));
}

void sub_100FD32F4(_QWORD *a1)
{
  sub_100FD326C(a1);
  operator delete();
}

void sub_100FD3318(uint64_t a1)
{
  sub_100FD326C((_QWORD *)(a1 - 72));
  operator delete();
}

uint64_t sub_100FD3340(uint64_t *a1, uint64_t a2, void **a3)
{
  uint64_t v6;
  unint64_t v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _QWORD v32[2];
  uuid_t dst;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uuid_t uu;

  if (!sub_10008950C(a1 + 9))
    return 109;
  memset(uu, 0, sizeof(uu));
  uuid_parse("00000000-0000-0000-0000-000000000000", uu);
  if (uuid_is_null((const unsigned __int8 *)(a2 + 8)) && uuid_compare(uu, (const unsigned __int8 *)(a2 + 24)))
  {
    memset(dst, 0, sizeof(dst));
    uuid_copy(dst, (const unsigned __int8 *)(a2 + 24));
    return sub_100FD35AC((uint64_t)a1, dst, a3);
  }
  else
  {
    v6 = sub_100FD3824(a1, a2, a3);
    if ((_DWORD)v6 == 100)
    {
      if (*a3 == a3[1])
      {
        v37 = 0u;
        v38 = 0u;
        v35 = 0u;
        v36 = 0u;
        *(_OWORD *)dst = 0u;
        v34 = 0u;
        v6 = sub_100FD3AE4((uint64_t)a1);
        if ((_DWORD)v6 == 100)
        {
          v32[0] = 0;
          v32[1] = 0;
          sub_100681850((uint64_t)a1, (unsigned __int8 *)v32);
          uuid_copy(&dst[8], (const unsigned __int8 *)v32);
          v7 = (unint64_t)a3[2];
          v8 = a3[1];
          if ((unint64_t)v8 >= v7)
          {
            v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (_BYTE *)*a3) >> 5);
            v15 = v14 + 1;
            if (v14 + 1 > 0x2AAAAAAAAAAAAAALL)
              sub_100259694();
            v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (_QWORD)*a3) >> 5);
            if (2 * v16 > v15)
              v15 = 2 * v16;
            if (v16 >= 0x155555555555555)
              v17 = 0x2AAAAAAAAAAAAAALL;
            else
              v17 = v15;
            if (v17)
              v18 = (char *)sub_10067257C((uint64_t)(a3 + 2), v17);
            else
              v18 = 0;
            v19 = &v18[96 * v14];
            v20 = &v18[96 * v17];
            v21 = v34;
            *(_OWORD *)v19 = *(_OWORD *)dst;
            *((_OWORD *)v19 + 1) = v21;
            v22 = v35;
            v23 = v36;
            v24 = v38;
            *((_OWORD *)v19 + 4) = v37;
            *((_OWORD *)v19 + 5) = v24;
            *((_OWORD *)v19 + 2) = v22;
            *((_OWORD *)v19 + 3) = v23;
            v13 = v19 + 96;
            v26 = (char *)*a3;
            v25 = (char *)a3[1];
            if (v25 != *a3)
            {
              do
              {
                v27 = *((_OWORD *)v25 - 5);
                *((_OWORD *)v19 - 6) = *((_OWORD *)v25 - 6);
                *((_OWORD *)v19 - 5) = v27;
                v28 = *((_OWORD *)v25 - 4);
                v29 = *((_OWORD *)v25 - 3);
                v30 = *((_OWORD *)v25 - 1);
                *((_OWORD *)v19 - 2) = *((_OWORD *)v25 - 2);
                *((_OWORD *)v19 - 1) = v30;
                *((_OWORD *)v19 - 4) = v28;
                *((_OWORD *)v19 - 3) = v29;
                v19 -= 96;
                v25 -= 96;
              }
              while (v25 != v26);
              v25 = (char *)*a3;
            }
            *a3 = v19;
            a3[1] = v13;
            a3[2] = v20;
            if (v25)
              operator delete(v25);
          }
          else
          {
            v9 = v34;
            *v8 = *(_OWORD *)dst;
            v8[1] = v9;
            v10 = v35;
            v11 = v36;
            v12 = v38;
            v8[4] = v37;
            v8[5] = v12;
            v8[2] = v10;
            v8[3] = v11;
            v13 = v8 + 6;
          }
          a3[1] = v13;
        }
      }
      else
      {
        return 100;
      }
    }
  }
  return v6;
}

uint64_t sub_100FD35AC(uint64_t a1, const unsigned __int8 *a2, _QWORD *a3)
{
  uuid_string_t out;

  if (sub_10008950C(a1 + 72))
  {
    a3[1] = *a3;
    uuid_unparse(a2, out);
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * from SkiHistory WHERE sessionId = ?");
  }
  return 109;
}

void sub_100FD37F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100FD3824(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  unsigned __int8 uu1[8];
  uint64_t v9;
  _QWORD v10[2];

  v10[0] = 0;
  v10[1] = 0;
  sub_100681850((uint64_t)a1, (unsigned __int8 *)v10);
  if (!sub_10008950C(a1 + 9))
    return 109;
  a3[1] = *a3;
  *(_QWORD *)uu1 = 0;
  v9 = 0;
  sub_100681850((uint64_t)a1, uu1);
  if (!uuid_is_null((const unsigned __int8 *)(a2 + 8)) && !uuid_compare(uu1, (const unsigned __int8 *)(a2 + 8)))
    sub_1000CDA68(a1[10], "SELECT * from SkiHistory WHERE id >= ?");
  (*(void (**)(uint64_t *, _QWORD *))(*a1 + 40))(a1, a3);
  return 100;
}

void sub_100FD3AB8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100FD3AE4(uint64_t a1)
{
  if (sub_10008950C(a1 + 72))
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * from SkiHistory ORDER BY id DESC LIMIT 1");
  return 109;
}

void sub_100FD3BA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;

  if (__p)
    operator delete(__p);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100FD3BD4(uint64_t a1, uint64_t a2)
{
  if (*(double *)(*(_QWORD *)(a2 + 8) - 16) == 1.79769313e308 && sub_10008950C(a1 + 72))
  {
    sub_10001E638(*(_QWORD *)(a1 + 80));
    CFAbsoluteTimeGetCurrent();
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "DELETE FROM SkiHistory WHERE startTime < ?");
  }
  return -1;
}

void sub_100FD3CEC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100FD3D0C(uint64_t a1, uint64_t a2)
{
  return sub_100FD3BD4(a1 - 72, a2);
}

uint64_t sub_100FD3D14(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * from SkiHistory ORDER BY id ASC");
  }
  return result;
}

void sub_100FD3F54(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100FD3F84(uint64_t *a1, uint64_t a2)
{
  sqlite3_stmt *v4;
  int v5;
  sqlite3_stmt *v6;
  sqlite3_stmt *v7;
  const unsigned __int8 *v8;
  sqlite3_stmt *v9;
  sqlite3_stmt *v10;
  sqlite3_stmt *v11;
  sqlite3_stmt *v12;
  sqlite3_stmt *v13;
  sqlite3_stmt *v14;
  sqlite3_stmt *v15;
  double v16;
  uint64_t result;

  v4 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v5 = sqlite3_step(v4);
  if (v5 == 101)
    return 1;
  if (v5 != 100)
    return 2;
  v6 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_QWORD *)a2 = sqlite3_column_int(v6, 0);
  v7 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v8 = sqlite3_column_text(v7, 1);
  uuid_parse((const char *)v8, (unsigned __int8 *)(a2 + 24));
  v9 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 40) = sqlite3_column_double(v9, 2);
  v10 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 48) = sqlite3_column_double(v10, 3);
  v11 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 56) = sqlite3_column_double(v11, 4);
  v12 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 64) = sqlite3_column_double(v12, 5);
  v13 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 72) = sqlite3_column_double(v13, 6);
  v14 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 80) = sqlite3_column_double(v14, 7);
  v15 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v16 = sqlite3_column_double(v15, 8);
  result = 0;
  *(double *)(a2 + 88) = v16;
  return result;
}

uint64_t sub_100FD4090(uint64_t a1)
{
  if (sub_10008950C(a1 + 72))
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT COUNT(*) FROM SkiHistory");
  return 0xFFFFFFFFLL;
}

void sub_100FD4130(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100FD4150(uint64_t a1)
{
  return sub_100FD4090(a1 - 72);
}

void sub_100FD4158(uint64_t a1, void *a2, const void *a3)
{
  const void *v6;
  uint64_t *v7;
  uint64_t v8;

  if ((a2 != 0) == (a3 != 0))
  {

    *(_QWORD *)(a1 + 400) = a2;
    v6 = *(const void **)(a1 + 408);
    if (v6)
      _Block_release(v6);
    if (a3)
      *(_QWORD *)(a1 + 408) = _Block_copy(a3);
  }
  else
  {
    v7 = (uint64_t *)sub_101938D40();
    sub_100FD41CC(v7, v8);
  }
}

uint64_t sub_100FD41CC(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_10001E638(a1[10]);
    (*(void (**)(uint64_t *, uint64_t, _QWORD))(*a1 + 120))(a1, a2, 0);
    return sub_10001E99C(a1[10]);
  }
  return result;
}

uint64_t sub_100FD4228(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    return sub_100634364(*(_QWORD *)(a1 + 80), "SkiHistory", (const char **)&off_102197DC8, (const std::string::value_type **)&off_1022FC708, 0);
  return result;
}

uint64_t sub_100FD427C(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "DELETE FROM SkiHistory");
  return result;
}

void sub_100FD4310(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100FD4330(uint64_t a1)
{
  return sub_100FD427C(a1 - 72);
}

uint64_t sub_100FD4338(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_1000CDA68(a1[10], "DELETE FROM SkiHistory WHERE startTime > ?");
  }
  return result;
}

void sub_100FD4400(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100FD4420(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "UPDATE SkiHistory SET startTime = startTime + ?");
  return result;
}

void sub_100FD44B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100FD44D8(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "INSERT INTO SkiHistory (sessionId, startTime, endTime, runDistance, runAvgSpeed, runMaxSpeed, runSlope, runElevationDescent) VALUES (?, ?, ?, ?, ?, ?, ?, ?)");
  return result;
}

void sub_100FD470C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100FD4738(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[6];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 408);
  v2 = *(_OWORD *)(a1 + 88);
  v6[2] = *(_OWORD *)(a1 + 72);
  v6[3] = v2;
  v3 = *(_OWORD *)(a1 + 120);
  v6[4] = *(_OWORD *)(a1 + 104);
  v6[5] = v3;
  v4 = *(_OWORD *)(a1 + 56);
  v6[0] = *(_OWORD *)(a1 + 40);
  v6[1] = v4;
  return (*(uint64_t (**)(uint64_t, _OWORD *))(v1 + 16))(v1, v6);
}

uint64_t sub_100FD47B8()
{
  return 0;
}

uint64_t sub_100FD47C0(uint64_t a1)
{
  if (sub_10008950C(a1 + 72))
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * FROM SkiHistory ORDER BY startTime DESC LIMIT 1");
  return 2;
}

void sub_100FD4894(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100FD48C0(uint64_t a1, uint64_t *a2, char **a3)
{
  char *v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  unsigned __int8 src[8];
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  a3[1] = *a3;
  sub_10001E638(*(_QWORD *)(a1 + 80));
  *(_QWORD *)src = 0;
  v32 = 0;
  sub_100681850(a1, src);
  for (; !sub_100FD3F84(a2, (uint64_t)&v33); a3[1] = v12)
  {
    uuid_copy((unsigned __int8 *)&v33 + 8, src);
    v6 = a3[1];
    v7 = (unint64_t)a3[2];
    if ((unint64_t)v6 >= v7)
    {
      v13 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a3) >> 5);
      v14 = v13 + 1;
      if (v13 + 1 > 0x2AAAAAAAAAAAAAALL)
        sub_100259694();
      v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (_QWORD)*a3) >> 5);
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x155555555555555)
        v16 = 0x2AAAAAAAAAAAAAALL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)sub_10067257C((uint64_t)(a3 + 2), v16);
      else
        v17 = 0;
      v18 = &v17[96 * v13];
      v19 = v34;
      *(_OWORD *)v18 = v33;
      *((_OWORD *)v18 + 1) = v19;
      v20 = v35;
      v21 = v36;
      v22 = v38;
      *((_OWORD *)v18 + 4) = v37;
      *((_OWORD *)v18 + 5) = v22;
      *((_OWORD *)v18 + 2) = v20;
      *((_OWORD *)v18 + 3) = v21;
      v24 = *a3;
      v23 = a3[1];
      v25 = v18;
      if (v23 != *a3)
      {
        do
        {
          v26 = *((_OWORD *)v23 - 5);
          *((_OWORD *)v25 - 6) = *((_OWORD *)v23 - 6);
          *((_OWORD *)v25 - 5) = v26;
          v27 = *((_OWORD *)v23 - 4);
          v28 = *((_OWORD *)v23 - 3);
          v29 = *((_OWORD *)v23 - 1);
          *((_OWORD *)v25 - 2) = *((_OWORD *)v23 - 2);
          *((_OWORD *)v25 - 1) = v29;
          *((_OWORD *)v25 - 4) = v27;
          *((_OWORD *)v25 - 3) = v28;
          v25 -= 96;
          v23 -= 96;
        }
        while (v23 != v24);
        v23 = *a3;
      }
      v12 = v18 + 96;
      *a3 = v25;
      a3[1] = v18 + 96;
      a3[2] = &v17[96 * v16];
      if (v23)
        operator delete(v23);
    }
    else
    {
      v8 = v34;
      *(_OWORD *)v6 = v33;
      *((_OWORD *)v6 + 1) = v8;
      v9 = v35;
      v10 = v36;
      v11 = v38;
      *((_OWORD *)v6 + 4) = v37;
      *((_OWORD *)v6 + 5) = v11;
      *((_OWORD *)v6 + 2) = v9;
      *((_OWORD *)v6 + 3) = v10;
      v12 = v6 + 96;
    }
  }
  return sub_10001E99C(*(_QWORD *)(a1 + 80));
}

uint64_t sub_100FD4AD4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  if (sub_10008950C(a1 + 72))
  {
    a3[1] = *a3;
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * FROM SkiHistory ORDER by id DESC limit ?");
  }
  return 109;
}

void sub_100FD4D9C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100FD4DC8(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void *v9;
  void *v11[2];
  uint64_t v12;
  _QWORD v13[8];
  void *v14[2];
  unsigned __int8 v15;

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v11);
  if ((SHIBYTE(v12) & 0x80000000) == 0)
  {
    if (HIBYTE(v12))
      goto LABEL_3;
LABEL_18:
    sub_101938EC8(v2);
    __break(1u);
  }
  v9 = v11[1];
  operator delete(v11[0]);
  if (!v9)
    goto LABEL_18;
LABEL_3:
  if (sub_10008950C(a1 + 9))
  {
    sub_100263E50((uint64_t)v11);
    v3 = sub_100263F7C(&v12, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(v14, a1);
    if ((v15 & 0x80u) == 0)
      v4 = v14;
    else
      v4 = (void **)v14[0];
    if ((v15 & 0x80u) == 0)
      v5 = v15;
    else
      v5 = (uint64_t)v14[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
    if ((char)v15 < 0)
      operator delete(v14[0]);
    v7 = a1[10];
    std::stringbuf::str(v14, v13);
    if ((v15 & 0x80u) == 0)
      v8 = (char *)v14;
    else
      v8 = (char *)v14[0];
    sub_1000CDA68(v7, v8);
  }
  return 2;
}

void sub_100FD5154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  if (*(char *)(v4 - 185) < 0)
    operator delete(*(void **)(v4 - 208));
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100FD51C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  _BYTE v17[14];
  __int16 v18;
  _QWORD *v19;

  v3 = *(_QWORD *)(a1 + 112);
  v2 = a1 + 112;
  v4 = v2 - 40;
  v13 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_10008950C(v4))
    sub_100427D28(a1);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_1021980A0);
  v5 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    v6 = (_QWORD *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0)
      v6 = (_QWORD *)*v6;
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)v17 = 0;
    *(_WORD *)&v17[4] = 2082;
    *(_QWORD *)&v17[6] = "";
    v18 = 2082;
    v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(_QWORD *)(a1 + 216))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021980A0);
    v7 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      v8 = *(_QWORD *)(a1 + 216);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021980A0);
      v10 = *(_QWORD *)(a1 + 216);
      v14 = 134349056;
      v15 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", &v14, 12);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<CLSkiEntry>::setDatabaseAccessible() [T = CLSkiEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  return 1;
}

void sub_100FD57BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

id *sub_100FD57EC(uint64_t a1, uint64_t a2, char a3)
{
  int v6;
  double v7;
  double v8;
  double v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  double v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  double v17;
  double v18;
  double v19;
  NSObject *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v26;
  const char *v27;
  uint8_t *v28;
  double v29;
  const char *v30;
  uint8_t *v31;
  const char *v32;
  uint8_t *v33;
  double v34;
  id v35[2];
  int v36;
  double v37;
  __int16 v38;
  uint64_t v39;
  uint8_t buf[4];
  double v41;
  __int16 v42;
  uint64_t v43;
  _BYTE v44[40];
  double v45;

  v35[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v35[1] = 0;
  if (*(double *)(a1 + 264) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, a1 + 224, a2);
    return sub_100131740(v35);
  }
  if ((a3 & 1) == 0)
    sub_10001E638(*(_QWORD *)(a1 + 80));
  v6 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 104))(a1, v44);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021980A0);
      v14 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021980A0);
        LOWORD(v36) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "Failed to insert record due to failure from reading the most recent entry.", &v36, 2);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<CLSkiEntry>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLSkiEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
      goto LABEL_43;
    }
    v7 = *(double *)(a2 + 40);
    v8 = v45;
    v9 = v7 - v45;
    if (v7 - v45 < 0.0)
      v9 = -(v7 - v45);
    if (v9 > 604800.0)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021980A0);
      v10 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *(_QWORD *)(a2 + 40);
        *(_DWORD *)buf = 134349312;
        v41 = v45;
        v42 = 2050;
        v43 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021980A0);
        v26 = *(_QWORD *)(a2 + 40);
        v36 = 134349312;
        v37 = v45;
        v38 = 2050;
        v39 = v26;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", &v36, 22);
        v28 = (uint8_t *)v27;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLSkiEntry>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLSkiEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v27);
        if (v28 != buf)
          free(v28);
      }
      CLWriteStackshot("Potential CM database inconsistency, time jump", 0);
      v7 = *(double *)(a2 + 40);
      v8 = v45;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021980A0);
        v12 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          v13 = *(double *)(a2 + 40);
          *(_DWORD *)buf = 134217984;
          v41 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_1021980A0);
          v29 = *(double *)(a2 + 40);
          v36 = 134217984;
          v37 = v29;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", COERCE_DOUBLE(&v36));
          v31 = (uint8_t *)v30;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLSkiEntry>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLSkiEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v30);
          if (v31 != buf)
            free(v31);
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      v17 = v7 - v8;
      v18 = *(float *)(a1 + 136);
      if (qword_10229FC70 != -1)
      {
        v34 = *(float *)(a1 + 136);
        dispatch_once(&qword_10229FC70, &stru_1021980A0);
        v18 = v34;
      }
      v19 = v17 - v18;
      v20 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        v41 = v19;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021980A0);
        v36 = 134217984;
        v37 = v19;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", COERCE_DOUBLE(&v36));
        v33 = (uint8_t *)v32;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLSkiEntry>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLSkiEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v32);
        if (v33 != buf)
          free(v33);
      }
      (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 96))(a1, v19);
    }
    (*(void (**)(uint64_t, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, v44, a1 + 224, a2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  v21 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 240) = v21;
  v22 = *(_OWORD *)(a2 + 32);
  v23 = *(_OWORD *)(a2 + 48);
  v24 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 304) = v24;
  *(_OWORD *)(a1 + 256) = v22;
  *(_OWORD *)(a1 + 272) = v23;
LABEL_43:
  if ((a3 & 1) == 0)
    sub_10001E99C(*(_QWORD *)(a1 + 80));
  return sub_100131740(v35);
}

void sub_100FD5F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100FD5F64(uint64_t a1)
{
  return sub_100FD51C4(a1 - 72);
}

void sub_100FD5F6C(id a1)
{
  qword_10229FE28 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Skiing");
}

uint64_t sub_100FD5F98(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *v13[2];
  uint64_t v14;
  _QWORD v15[8];
  void *v16[2];
  unsigned __int8 v17;

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v13);
  if ((SHIBYTE(v14) & 0x80000000) == 0)
  {
    if (HIBYTE(v14))
      goto LABEL_3;
LABEL_18:
    sub_101939034(v4);
    __break(1u);
  }
  v12 = v13[1];
  operator delete(v13[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_100263E50((uint64_t)v13);
    v6 = sub_100263F7C(&v14, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(v16, a1);
    if ((v17 & 0x80u) == 0)
      v7 = v16;
    else
      v7 = (void **)v16[0];
    if ((v17 & 0x80u) == 0)
      v8 = v17;
    else
      v8 = (uint64_t)v16[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v17 < 0)
      operator delete(v16[0]);
    v10 = a1[10];
    std::stringbuf::str(v16, v15);
    if ((v17 & 0x80u) == 0)
      v11 = (char *)v16;
    else
      v11 = (char *)v16[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

void sub_100FD62DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100FD634C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _Unwind_Exception *v13;
  void *__p[2];
  unsigned __int8 v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17))
      goto LABEL_3;
LABEL_18:
    v13 = (_Unwind_Exception *)sub_1019391A0(v4);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  v12 = v16[1];
  operator delete(v16[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_100263E50((uint64_t)v16);
    v6 = sub_100263F7C(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v15 & 0x80u) == 0)
      v8 = v15;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v18);
    if ((v15 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

uint64_t sub_100FD65AC(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  _Unwind_Exception *v11;
  void *__p[2];
  unsigned __int8 v13;
  void *v14[2];
  uint64_t v15;
  _QWORD v16[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_10193930C(v2);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  v10 = v14[1];
  operator delete(v14[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_100263E50((uint64_t)v14);
    v4 = sub_100263F7C(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v13 & 0x80u) == 0)
      v6 = v13;
    else
      v6 = (uint64_t)__p[1];
    v7 = sub_100263F7C(v4, (uint64_t)v5, v6);
    sub_100263F7C(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    v8 = a1[10];
    std::stringbuf::str(__p, v16);
    if ((v13 & 0x80u) == 0)
      v9 = (char *)__p;
    else
      v9 = (char *)__p[0];
    sub_1000CDA68(v8, v9);
  }
  return result;
}

uint64_t sub_100FD67E4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void *v10;
  _Unwind_Exception *v11;
  uint64_t v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_101939478(v2);
    if (v12)
      (*(void (**)())(*(_QWORD *)v12 + 8))();
    sub_1018B38B4((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  v10 = v15[1];
  operator delete(v15[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  if (sub_10008950C(a1 + 9))
  {
    sub_100263E50((uint64_t)v15);
    v3 = sub_100263F7C(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v5 = v14;
    else
      v5 = (uint64_t)__p[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v7 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v8 = (char *)__p;
    else
      v8 = (char *)__p[0];
    sub_1000CDA68(v7, v8);
  }
  return 2;
}

void sub_100FD6A0C(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_100FD6A38()
{
  NSObject *v0;
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[8];
  std::__shared_weak_count *v11;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102198198);
  v0 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "TILE: running initStaticGlobals", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102198198);
    LOWORD(v9[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: running initStaticGlobals", v9, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "static void CLWifiTileFile::initStaticGlobals()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  sub_1001E4804(buf);
  sub_1001E4B84(*(uint64_t *)buf, "kMinimumSupportedTilesVersion", &dword_1022FC718);
  v1 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102198198);
  v4 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = dword_1022FC718;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "TILE: fMinimumSupportedTilesVersion, %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102198198);
    v9[0] = 67109120;
    v9[1] = dword_1022FC718;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: fMinimumSupportedTilesVersion, %d", v9);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "static void CLWifiTileFile::initStaticGlobals()", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
}

void sub_100FD6D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100FD6D8C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v5;

  v5 = 0;
  v3 = sub_10080E4E4(a1, &v5, qword_10230B8F8, a2);
  *(_QWORD *)v3 = off_1021980D0;
  *(_DWORD *)(v3 + 328) = 175034;
  *(_OWORD *)(v3 + 332) = xmmword_101C391D0;
  *(_DWORD *)(v3 + 356) = 109498;
  *(_QWORD *)(v3 + 360) = 192;
  *(_DWORD *)(v3 + 368) = 381;
  *(_QWORD *)(v3 + 372) = 0;
  *(_OWORD *)(v3 + 380) = 0u;
  *(_DWORD *)(v3 + 396) = 0;
  *(int32x2_t *)(v3 + 400) = vdup_n_s32(0xC47A0000);
  *(_DWORD *)(v3 + 408) = -998637568;
  *(_OWORD *)(v3 + 412) = 0u;
  *(_OWORD *)(v3 + 428) = 0u;
  *(_OWORD *)(v3 + 444) = 0u;
  *(_OWORD *)(v3 + 460) = 0u;
  *(_OWORD *)(v3 + 476) = 0u;
  *(_OWORD *)(v3 + 492) = 0u;
  *(_OWORD *)(v3 + 508) = 0u;
  *(_OWORD *)(v3 + 524) = 0u;
  *(_OWORD *)(v3 + 540) = 0u;
  *(_DWORD *)(v3 + 556) = 0;
  *(_OWORD *)(v3 + 600) = 0u;
  *(_OWORD *)(v3 + 576) = 0u;
  *(_QWORD *)(v3 + 592) = v3 + 600;
  pthread_once(&stru_1022FC720, sub_100FD6A38);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  return a1;
}

void sub_100FD6EA4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD **v4;
  _QWORD **v5;
  uint64_t v7;

  v5 = v4;
  sub_100008848(v3, *v5);
  v7 = *v2;
  *v2 = 0;
  if (v7)
    sub_100FDAC5C((uint64_t)v2, v7);
  sub_100FA05F0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100FD6EE0(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1021980D0;
  sub_100FD6F5C(a1);
  sub_100008848(a1 + 592, *(_QWORD **)(a1 + 600));
  v2 = *(_QWORD *)(a1 + 576);
  *(_QWORD *)(a1 + 576) = 0;
  if (v2)
    sub_100FDAC5C(a1 + 576, v2);
  return sub_100FA05F0(a1);
}

void sub_100FD6F38(uint64_t a1)
{
  sub_100FD6EE0(a1);
  operator delete();
}

uint64_t sub_100FD6F5C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  bzero((void *)(a1 + 356), 0xCCuLL);
  bzero((void *)(a1 + 328), 0x14uLL);
  *(_QWORD *)(a1 + 348) = 0;
  *(_QWORD *)(a1 + 560) = 0;
  *(_DWORD *)(a1 + 568) = 0;
  v3 = *(_QWORD *)(a1 + 576);
  *(_QWORD *)(a1 + 576) = 0;
  if (v3)
    sub_100FDAC5C(a1 + 576, v3);
  sub_100008848(a1 + 592, *(_QWORD **)(a1 + 600));
  *(_QWORD *)(a1 + 592) = a1 + 600;
  *(_QWORD *)(a1 + 608) = 0;
  *(_QWORD *)(a1 + 600) = 0;
  sub_100FA0654(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

void sub_100FD7020(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100FD7034(uint64_t a1, FILE *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v10;
  unsigned int v11;
  int v12;
  double v13;
  uint8_t *v14;
  uint8_t *v15;
  NSObject *v16;
  unsigned int v17;
  NSObject *v18;
  const char *v19;
  uint8_t *v20;
  double v21;
  NSObject *v22;
  const char *v23;
  uint8_t *v24;
  uint8_t *v25;
  uint8_t *v26;
  unint64_t v27;
  int *v28;
  unint64_t v29;
  int *v30;
  uint64_t v31;
  unsigned int v32;
  const char *v33;
  const char *v34;
  uint8_t *v35;
  unsigned int v36;
  const char *v37;
  uint8_t *v38;
  const char *v39;
  int v40;
  unsigned int v41;
  __int16 v42;
  const char *v43;
  uint8_t buf[4];
  unsigned int v45;
  __int16 v46;
  const char *v47;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102198198);
  v10 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v11 = *(unsigned __int16 *)(a3 + 2);
    *(_DWORD *)buf = 67109378;
    v45 = v11;
    v46 = 2080;
    v47 = sub_100F9F0FC(v11);
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "TILE: CLWifiTileFile, sectionId, %d, %s", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102198198);
    v31 = qword_1022A02D8;
    v32 = *(unsigned __int16 *)(a3 + 2);
    v33 = sub_100F9F0FC(v32);
    v40 = 67109378;
    v41 = v32;
    v42 = 2080;
    v43 = v33;
    LODWORD(v39) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v31, 2, "TILE: CLWifiTileFile, sectionId, %d, %s", &v40, v39);
    v35 = (uint8_t *)v34;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLWifiTileFile::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const TraverseDetails &)", "%s\n", v34);
    if (v35 != buf)
      free(v35);
  }
  v12 = *(unsigned __int16 *)(a3 + 2);
  if (v12 == 3)
  {
    *(int8x8_t *)&v21 = sub_100CD5B40(a4, a4);
    (*(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)a1 + 152))(a1, a4, v21);
    if (!*(_BYTE *)(a5 + 8))
    {
      v26 = (uint8_t *)sub_100812460(a1, a2, a3, 0, *(_DWORD *)(a4 + 12), *(_DWORD *)(a4 + 16));
      if (!v26)
        return;
      v15 = v26;
      if (!*(_BYTE *)(a5 + 9))
      {
        v27 = 0;
        do
        {
          if (v27 >= *(unsigned int *)(a4 + 12))
            break;
          v28 = (int *)&v15[v27 * *(unsigned int *)(a4 + 16)];
          sub_100CD5B94(v28, (uint64_t)v28);
          (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 160))(a1, v28);
          ++v27;
        }
        while (!*(_BYTE *)(a5 + 9));
      }
      goto LABEL_43;
    }
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102198198);
    v22 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "TILE: headers only, avoid reading SectionID_TileAccessPointTable", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102198198);
      LOWORD(v40) = 0;
      LODWORD(v39) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: headers only, avoid reading SectionID_TileAccessPointTable", &v40, v39);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLWifiTileFile::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const TraverseDetails &)", "%s\n", v23);
      if (v24 != buf)
      {
        v25 = v24;
LABEL_44:
        free(v25);
      }
    }
  }
  else if (v12 == 2)
  {
    *(int8x8_t *)&v13 = sub_100CD5B40(a4, a4);
    (*(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)a1 + 136))(a1, a4, v13);
    v14 = (uint8_t *)sub_100812460(a1, a2, a3, 0, *(_DWORD *)(a4 + 12), *(_DWORD *)(a4 + 16));
    if (v14)
    {
      v15 = v14;
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102198198);
      v16 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        v17 = *(_DWORD *)(a4 + 16);
        *(_DWORD *)buf = 67109120;
        v45 = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "TILE: tileMacIndexHeader, entrySizeInBytes, %u", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102198198);
        v36 = *(_DWORD *)(a4 + 16);
        v40 = 67109120;
        v41 = v36;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: tileMacIndexHeader, entrySizeInBytes, %u", &v40);
        v38 = (uint8_t *)v37;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLWifiTileFile::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const TraverseDetails &)", "%s\n", v37);
        if (v38 != buf)
          free(v38);
      }
      if (*(_BYTE *)(a5 + 8))
      {
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102198198);
        v18 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "TILE: headers only, avoid reading SectionID_TileIndex_Mac", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_102198198);
          LOWORD(v40) = 0;
          LODWORD(v39) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: headers only, avoid reading SectionID_TileIndex_Mac", &v40, v39);
          v20 = (uint8_t *)v19;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLWifiTileFile::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const TraverseDetails &)", "%s\n", v19);
          if (v20 != buf)
            free(v20);
        }
      }
      else if (*(_DWORD *)(a4 + 12))
      {
        v29 = 0;
        do
        {
          v30 = (int *)&v15[v29 * *(unsigned int *)(a4 + 16)];
          sub_100CD5B74(v30, (uint64_t)v30);
          (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 144))(a1, v30);
          ++v29;
        }
        while (v29 < *(unsigned int *)(a4 + 12));
      }
LABEL_43:
      v25 = v15;
      goto LABEL_44;
    }
  }
}

__n128 sub_100FD7714(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;

  sub_100810CB0(a1, a2);
  *(_QWORD *)(a1 + 560) = *(_QWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 568) = *(_DWORD *)(a2 + 52);
  v4 = *(_QWORD **)(a1 + 576);
  if (!v4)
    operator new();
  v4[1] = *v4;
  v5 = *(_OWORD *)(a2 + 64);
  v7 = *(_OWORD *)(a2 + 16);
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 404) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 420) = v5;
  *(_OWORD *)(a1 + 372) = v7;
  *(_OWORD *)(a1 + 388) = v6;
  v8 = *(_OWORD *)(a2 + 128);
  v10 = *(_OWORD *)(a2 + 80);
  v9 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 468) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 484) = v8;
  *(_OWORD *)(a1 + 436) = v10;
  *(_OWORD *)(a1 + 452) = v9;
  v12 = *(_OWORD *)(a2 + 160);
  v11 = *(_OWORD *)(a2 + 176);
  v13 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 544) = *(_OWORD *)(a2 + 188);
  *(_OWORD *)(a1 + 516) = v12;
  *(_OWORD *)(a1 + 532) = v11;
  *(_OWORD *)(a1 + 500) = v13;
  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 356) = *(_OWORD *)a2;
  return result;
}

void sub_100FD77E0(uint64_t a1, _DWORD *a2)
{
  __int128 v4;
  _QWORD *v5;

  sub_100811B44(a1, a2);
  v4 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 344) = a2[4];
  *(_OWORD *)(a1 + 328) = v4;
  v5 = *(_QWORD **)(a1 + 576);
  if (!v5)
    operator new();
  v5[1] = *v5;
  sub_100FD7874(*(char ***)(a1 + 576), a2[3]);
}

void sub_100FD7874(char **a1, unint64_t a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  __int16 v14;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 1) < a2)
  {
    if (a2 >= 0x199999999999999ALL)
      sub_100259694();
    v5 = (a1[1] - *a1) / 10;
    v6 = (char *)sub_100FDAD58(v3, a2);
    v7 = &v6[10 * v5];
    v9 = &v6[10 * v8];
    v11 = *a1;
    v10 = a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *(_QWORD *)(v10 - 10);
        v10 -= 10;
        v14 = *((_WORD *)v10 + 4);
        *(_QWORD *)(v12 - 10) = v13;
        v12 -= 10;
        *((_WORD *)v12 + 4) = v14;
      }
      while (v10 != v11);
      v10 = *a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void sub_100FD7940(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _BYTE *v9;
  int v10;
  char **v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  std::string *v33;
  int v34;
  char *v35;
  char *v36;
  const char *v37;
  std::string v38;
  _BYTE __p[12];
  __int16 v40;
  int v41;
  __int16 v42;
  std::string *v43;
  __int16 v44;
  int v45;
  uint8_t buf[4];
  unint64_t v47;
  __int16 v48;
  int v49;
  __int16 v50;
  _BYTE *v51;
  __int16 v52;
  int v53;

  if (!*(_BYTE *)(a1 + 313))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102198198);
    v4 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v5 = *(uint64_t **)(a1 + 576);
      v7 = *v5;
      v6 = v5[1];
      v8 = *(_DWORD *)(a1 + 340);
      v38.__r_.__value_.__r.__words[0] = sub_100B062F0((unsigned __int8 *)a2);
      sub_1000C2254(&v38, (std::string *)__p);
      v9 = SBYTE3(v43) >= 0 ? __p : *(_BYTE **)__p;
      v10 = *(_DWORD *)((char *)a2 + 6);
      *(_DWORD *)buf = 134218754;
      v47 = 0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 1);
      v48 = 1024;
      v49 = v8;
      v50 = 2080;
      v51 = v9;
      v52 = 1024;
      v53 = v10;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "TILE: idx, %3lu, %3u, mac, %s, offset, %u", buf, 0x22u);
      if (SBYTE3(v43) < 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102198198);
      v28 = qword_1022A02D8;
      v29 = *(uint64_t **)(a1 + 576);
      v31 = *v29;
      v30 = v29[1];
      v32 = *(_DWORD *)(a1 + 340);
      v37 = (const char *)sub_100B062F0((unsigned __int8 *)a2);
      sub_1000C2254(&v37, &v38);
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v33 = &v38;
      else
        v33 = (std::string *)v38.__r_.__value_.__r.__words[0];
      v34 = *(_DWORD *)((char *)a2 + 6);
      *(_DWORD *)__p = 134218754;
      *(_QWORD *)&__p[4] = 0xCCCCCCCCCCCCCCCDLL * ((v30 - v31) >> 1);
      v40 = 1024;
      v41 = v32;
      v42 = 2080;
      v43 = v33;
      v44 = 1024;
      v45 = v34;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v28, 2, "TILE: idx, %3lu, %3u, mac, %s, offset, %u", __p, 34, v37, LODWORD(v38.__r_.__value_.__l.__data_));
      v36 = v35;
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v38.__r_.__value_.__l.__data_);
      sub_100512490("Generic", 1, 0, 2, "virtual void CLWifiTileFile::onTraversingTileIndexEntry(const CLTilesManager_Type::AccessPointIndexEntry &)", "%s\n", v36);
      if (v36 != (char *)buf)
        free(v36);
    }
  }
  v11 = *(char ***)(a1 + 576);
  v12 = (unint64_t)v11[1];
  v13 = (unint64_t)v11[2];
  if (v12 >= v13)
  {
    v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - (_QWORD)*v11) >> 1);
    v17 = v16 + 1;
    if (v16 + 1 > 0x1999999999999999)
      sub_100259694();
    v18 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v13 - (_QWORD)*v11) >> 1);
    if (2 * v18 > v17)
      v17 = 2 * v18;
    if (v18 >= 0xCCCCCCCCCCCCCCCLL)
      v19 = 0x1999999999999999;
    else
      v19 = v17;
    if (v19)
      v20 = (char *)sub_100FDAD58((uint64_t)(v11 + 2), v19);
    else
      v20 = 0;
    v21 = &v20[10 * v16];
    v22 = &v20[10 * v19];
    v23 = *a2;
    *((_WORD *)v21 + 4) = *((_WORD *)a2 + 4);
    *(_QWORD *)v21 = v23;
    v15 = v21 + 10;
    v25 = *v11;
    v24 = v11[1];
    if (v24 != *v11)
    {
      do
      {
        v26 = *(_QWORD *)(v24 - 10);
        v24 -= 10;
        v27 = *((_WORD *)v24 + 4);
        *(_QWORD *)(v21 - 10) = v26;
        v21 -= 10;
        *((_WORD *)v21 + 4) = v27;
      }
      while (v24 != v25);
      v24 = *v11;
    }
    *v11 = v21;
    v11[1] = v15;
    v11[2] = v22;
    if (v24)
      operator delete(v24);
  }
  else
  {
    v14 = *a2;
    *(_WORD *)(v12 + 8) = *((_WORD *)a2 + 4);
    *(_QWORD *)v12 = v14;
    v15 = (char *)(v12 + 10);
  }
  v11[1] = v15;
}

double sub_100FD7D08(uint64_t a1, uint64_t a2)
{
  double result;

  sub_100811F9C(a1, (_DWORD *)a2);
  result = *(double *)(a2 + 12);
  *(double *)(a1 + 348) = result;
  *(_DWORD *)(a1 + 292) = 0;
  return result;
}

_WORD *sub_100FD7D3C(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  double v12;
  double v13;
  _WORD *result;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  double v25;
  double v26;
  const char *v27;
  uint8_t *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  double v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40[2];
  double v41;
  double v42;
  _BYTE v43[10];
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  double v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  double v59;
  __int16 v60;
  double v61;
  uint8_t buf[8];
  __int16 v63;
  int v64;
  __int16 v65;
  int v66;
  __int16 v67;
  int v68;
  __int16 v69;
  int v70;
  __int16 v71;
  int v72;
  __int16 v73;
  int v74;
  __int16 v75;
  int v76;
  __int16 v77;
  int v78;
  __int16 v79;
  double v80;
  __int16 v81;
  uint64_t v82;
  __int16 v83;
  double v84;
  __int16 v85;
  double v86;

  v39 = 0;
  v40[0] = 0.0;
  sub_100FA6940(a1, *(_DWORD *)(a2 + 6) & 0xFFF, (*(_DWORD *)(a2 + 6) >> 12) & 0xFFF, v40, (double *)&v39);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102198198);
  v4 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_DWORD *)(a1 + 292);
    v6 = *a2;
    v7 = a2[1];
    v8 = a2[2];
    v9 = a2[3];
    v10 = a2[4];
    v11 = *(_DWORD *)(a2 + 6);
    v30 = v11 & 0xFFF;
    v31 = a2[5];
    v33 = (v11 >> 12) & 0xFFF;
    v35 = v40[0];
    v37 = v39;
    v12 = sub_101319E7C(HIBYTE(v11) & 0xF);
    v13 = sub_101319E98(*(_DWORD *)(a2 + 6) >> 28);
    *(_DWORD *)buf = 67112192;
    *(_DWORD *)&buf[4] = v5;
    v63 = 1024;
    v64 = v6;
    v65 = 1024;
    v66 = v7;
    v67 = 1024;
    v68 = v8;
    v69 = 1024;
    v70 = v9;
    v71 = 1024;
    v72 = v10;
    v73 = 1024;
    v74 = v31;
    v75 = 1024;
    v76 = v30;
    v77 = 1024;
    v78 = v33;
    v79 = 2048;
    v80 = v35;
    v81 = 2048;
    v82 = v37;
    v83 = 2048;
    v84 = v12;
    v85 = 2048;
    v86 = v13;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "TILE: mac, %3u, mac,%x:%x:%x:%x:%x:%x, y, %3d, x, %3d, loc, %14.10lf, %14.10lf, unc, %.1lf, reach, %.1lf", buf, 0x60u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102198198);
    v16 = *(_DWORD *)(a1 + 292);
    v17 = *a2;
    v18 = a2[1];
    v19 = a2[2];
    v20 = a2[3];
    v21 = a2[4];
    v22 = a2[5];
    v23 = *(_DWORD *)(a2 + 6);
    v24 = v23 & 0xFFF;
    v32 = (v23 >> 12) & 0xFFF;
    v36 = v40[0];
    v38 = qword_1022A02D8;
    v34 = v39;
    v25 = sub_101319E7C(HIBYTE(v23) & 0xF);
    v26 = sub_101319E98(*(_DWORD *)(a2 + 6) >> 28);
    LODWORD(v41) = 67112192;
    HIDWORD(v41) = v16;
    LOWORD(v42) = 1024;
    *(_DWORD *)((char *)&v42 + 2) = v17;
    HIWORD(v42) = 1024;
    *(_DWORD *)v43 = v18;
    *(_WORD *)&v43[4] = 1024;
    *(_DWORD *)&v43[6] = v19;
    v44 = 1024;
    v45 = v20;
    v46 = 1024;
    v47 = v21;
    v48 = 1024;
    v49 = v22;
    v50 = 1024;
    v51 = v24;
    v52 = 1024;
    v53 = v32;
    v54 = 2048;
    v55 = v36;
    v56 = 2048;
    v57 = v34;
    v58 = 2048;
    v59 = v25;
    v60 = 2048;
    v61 = v26;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v38, 2, "TILE: mac, %3u, mac,%x:%x:%x:%x:%x:%x, y, %3d, x, %3d, loc, %14.10lf, %14.10lf, unc, %.1lf, reach, %.1lf", &v41, 96, v29, v30, v34, LODWORD(v36), v38, v39, LODWORD(v40[0]), v40[1], v41,
      v42,
      *(double *)v43);
    v28 = (uint8_t *)v27;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLWifiTileFile::onTraversingTileAPTableEntry(const CLTilesManager_Type::AccessPointEntry &)", "%s\n", v27);
    if (v28 != buf)
      free(v28);
  }
  v41 = COERCE_DOUBLE(sub_100B062F0(a2));
  *(_QWORD *)buf = &v41;
  result = sub_100FDACD0((uint64_t **)(a1 + 592), &v41, (uint64_t)&unk_101B9EB60, (uint64_t **)buf);
  v15 = *(_QWORD *)a2;
  result[24] = *((_WORD *)a2 + 4);
  *((_QWORD *)result + 5) = v15;
  ++*(_DWORD *)(a1 + 292);
  return result;
}

uint64_t sub_100FD8110(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  unsigned int v9;
  _QWORD *v10;
  unsigned int v11;
  unsigned __int8 *v12;
  _BOOL8 v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  int v18;
  unsigned __int8 *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  char *v25;
  unint64_t v26;
  _BYTE v27[12];
  __int16 v28;
  uint64_t v29;
  _BYTE buf[12];
  __int16 v31;
  uint64_t v32;

  v9 = 0;
  v10 = (_QWORD *)(a4 + 16);
  while (1)
  {
    v11 = (v9 + a3) >> 1;
    v12 = (unsigned __int8 *)(*(_DWORD *)(a5 + 16) * v11 + a2);
    v26 = sub_100B062F0(v12);
    v13 = sub_10009483C(&v26, v10);
    if (v13)
      break;
    if (v9 == v11 || !sub_100B06334(v10, &v26))
    {
      if (a3 == v11 || !sub_100191720(v10, &v26))
        goto LABEL_17;
      a3 = (v9 + a3) >> 1;
      v11 = v9;
    }
    else
    {
      v9 = (v9 + a3) >> 1;
    }
    if (v11 > a3)
      goto LABEL_18;
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102198198);
  v14 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v15 = sub_100129380((uint64_t)v10);
    v16 = sub_100129380((uint64_t)&v26);
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = v15;
    v31 = 2048;
    v32 = v16;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "TILE: binarySearchAP, match, %012llx, %012llx", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102198198);
    v21 = qword_1022A02D8;
    v22 = sub_100129380((uint64_t)v10);
    v23 = sub_100129380((uint64_t)&v26);
    *(_DWORD *)v27 = 134218240;
    *(_QWORD *)&v27[4] = v22;
    v28 = 2048;
    v29 = v23;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v21, 2, "TILE: binarySearchAP, match, %012llx, %012llx", v27, 22);
    v25 = (char *)v24;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiTileFile::binarySearchAP(CLTilesManager_Type::AccessPointEntry *, unsigned int, const TraverseDetails &, const CLTilesManager_Type::TileAccessPointTable &)", "%s\n", v24);
    if (v25 != buf)
      free(v25);
  }
  (*(void (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)a1 + 160))(a1, v12);
LABEL_17:
  v11 = v9;
LABEL_18:
  v17 = v11 == a3 || v13;
  if ((v17 & 1) == 0)
  {
    v18 = *(_DWORD *)(a5 + 16);
    v19 = (unsigned __int8 *)(v18 * a3 + a2);
    *(_QWORD *)buf = sub_100B062F0((unsigned __int8 *)(v18 * v11 + a2));
    *(_QWORD *)v27 = sub_100B062F0(v19);
    v13 = sub_10009483C(buf, v10);
    if (v13)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 160))(a1, *(_DWORD *)(a5 + 16) * v11 + a2);
    if (sub_10009483C(v27, v10))
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 160))(a1, *(_DWORD *)(a5 + 16) * a3 + a2);
      return 1;
    }
  }
  return v13;
}

uint64_t sub_100FD8458(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v5;
  unsigned __int8 *v6;
  unint64_t v7;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  NSObject *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _BYTE v52[24];
  _BYTE v53[10];
  _BYTE v54[10];
  _BYTE v55[10];
  uint64_t v56;
  _BYTE v57[10];
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  _BYTE buf[14];
  _BYTE v62[10];
  _BYTE v63[10];
  _BYTE v64[10];
  _BYTE v65[10];
  uint64_t v66;
  _BYTE v67[10];
  uint64_t v68;
  __int16 v69;
  uint64_t v70;

  v5 = 0;
  *a4 = 0;
  *a5 = 0;
  v6 = *(unsigned __int8 **)a2;
  v7 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 1);
  if (v7 >= 2)
  {
    v51 = *(_QWORD *)(a3 + 16);
    v11 = v7 - 1;
    v12 = (v7 - 1) >> 1;
    v50 = sub_100B062F0(v6);
    v49 = sub_100B062F0((unsigned __int8 *)(*(_QWORD *)a2 + 10 * v11));
    if (sub_100B06334(&v51, &v49))
    {
      v5 = 0;
      HIDWORD(v48) = 0;
      v13 = 0;
      v14 = 0;
      *a4 = v11;
      *a5 = v11;
    }
    else if (sub_100191720(&v51, &v50))
    {
      v5 = 0;
      HIDWORD(v48) = 0;
      v13 = 0;
      v14 = 0;
      *a4 = 0;
      *a5 = 0;
    }
    else
    {
      v14 = 0;
      v15 = v12;
      while (1)
      {
        v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 1);
        v17 = v15 + 1;
        if (v15 >= v16 || v17 >= v16)
          break;
        *(_QWORD *)buf = sub_100B062F0((unsigned __int8 *)(*(_QWORD *)a2 + 10 * v15));
        *(_QWORD *)v52 = sub_100B062F0((unsigned __int8 *)(*(_QWORD *)a2 + 10 * v17));
        if (sub_100B06320(buf, &v51) && sub_100B06320(&v51, v52))
        {
          *a4 = v15;
          *a5 = v15 + 1;
          v13 = *(_DWORD *)(*(_QWORD *)a2 + 10 * (v15 + 1) + 6)
              - *(_DWORD *)(*(_QWORD *)a2 + 10 * *a4 + 6);
          v5 = 1;
          HIDWORD(v48) = 1;
          v12 = v15;
          goto LABEL_27;
        }
        if (sub_100B06334(&v51, buf))
        {
          v14 = v15;
        }
        else if (sub_100191720(&v51, buf))
        {
          v11 = v15;
        }
        v12 = (v11 + v14) >> 1;
        if (v12 == v15)
          break;
        v15 = (v11 + v14) >> 1;
        if (v14 > v11)
          goto LABEL_21;
      }
      v12 = v15;
LABEL_21:
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021981B8);
      v19 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
      {
        v20 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 1);
        v21 = sub_100129380((uint64_t)&v50);
        v22 = sub_100129380((uint64_t)&v51);
        v23 = sub_100129380((uint64_t)&v49);
        *(_DWORD *)buf = 134350592;
        *(_QWORD *)&buf[4] = v20;
        *(_WORD *)&buf[12] = 2050;
        *(_QWORD *)v62 = v14;
        *(_WORD *)&v62[8] = 2050;
        *(_QWORD *)v63 = v11;
        *(_WORD *)&v63[8] = 2050;
        *(_QWORD *)v64 = v12;
        *(_WORD *)&v64[8] = 2050;
        *(_QWORD *)v65 = v21;
        *(_WORD *)&v65[8] = 2050;
        v66 = v22;
        *(_WORD *)v67 = 2050;
        *(_QWORD *)&v67[2] = v23;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "WifiTile, binarySearchIndex, ==================> indexFailed <==================, size, %{public}4lu, a, %{public}4lu, b, %{public}4lu, c, %{public}4lu,  A, %{public}012llx,  S, %{public}012llx, B, %{public}012llx, #CloneMe", buf, 0x48u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021981B8);
        v39 = qword_1022A0048;
        v40 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 1);
        v41 = sub_100129380((uint64_t)&v50);
        v42 = sub_100129380((uint64_t)&v51);
        v43 = sub_100129380((uint64_t)&v49);
        *(_DWORD *)v52 = 134350592;
        *(_QWORD *)&v52[4] = v40;
        *(_WORD *)&v52[12] = 2050;
        *(_QWORD *)&v52[14] = v14;
        *(_WORD *)&v52[22] = 2050;
        *(_QWORD *)v53 = v11;
        *(_WORD *)&v53[8] = 2050;
        *(_QWORD *)v54 = v12;
        *(_WORD *)&v54[8] = 2050;
        *(_QWORD *)v55 = v41;
        *(_WORD *)&v55[8] = 2050;
        v56 = v42;
        *(_WORD *)v57 = 2050;
        *(_QWORD *)&v57[2] = v43;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v39, 16, "WifiTile, binarySearchIndex, ==================> indexFailed <==================, size, %{public}4lu, a, %{public}4lu, b, %{public}4lu, c, %{public}4lu,  A, %{public}012llx,  S, %{public}012llx, B, %{public}012llx, #CloneMe", v52, 72);
        v45 = (char *)v44;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLWifiTileFile::binarySearchIndex(const CLTilesManager_Type::AccessPointIndexEntryVector &, const TraverseDetails &, unsigned int &, unsigned int &)", "%s\n", v44);
        if (v45 != buf)
          free(v45);
      }
      v5 = 0;
      v13 = 0;
      HIDWORD(v48) = 1;
    }
LABEL_27:
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102198198);
    v24 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v25 = v11;
      v26 = v14;
      v27 = v13;
      v28 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 1);
      v47 = sub_100129380((uint64_t)&v50);
      v29 = sub_100129380((uint64_t)&v51);
      v30 = sub_100129380((uint64_t)&v49);
      *(_DWORD *)buf = 67111424;
      *(_DWORD *)&buf[4] = v5;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = HIDWORD(v48);
      *(_WORD *)v62 = 2048;
      *(_QWORD *)&v62[2] = v28;
      v13 = v27;
      v14 = v26;
      v11 = v25;
      *(_WORD *)v63 = 2048;
      *(_QWORD *)&v63[2] = v14;
      *(_WORD *)v64 = 2048;
      *(_QWORD *)&v64[2] = v25;
      *(_WORD *)v65 = 2048;
      *(_QWORD *)&v65[2] = v12;
      LOWORD(v66) = 1024;
      *(_DWORD *)((char *)&v66 + 2) = v13;
      HIWORD(v66) = 2048;
      *(_QWORD *)v67 = v47;
      *(_WORD *)&v67[8] = 2048;
      v68 = v29;
      v69 = 2048;
      v70 = v30;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "TILE: binarySearchIndex, indexFound, isFound, %d, wasSearched, %d, size, %4lu, a, %4lu, b, %4lu, c, %4lu, searchAr, %4u, A, %012llx,  S, %012llx, B, %012llx", buf, 0x5Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102198198);
      v32 = qword_1022A02D8;
      v33 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 1);
      v34 = sub_100129380((uint64_t)&v50);
      v35 = sub_100129380((uint64_t)&v51);
      v36 = sub_100129380((uint64_t)&v49);
      *(_DWORD *)v52 = 67111424;
      *(_DWORD *)&v52[4] = v5;
      *(_WORD *)&v52[8] = 1024;
      *(_DWORD *)&v52[10] = HIDWORD(v48);
      *(_WORD *)&v52[14] = 2048;
      *(_QWORD *)&v52[16] = v33;
      *(_WORD *)v53 = 2048;
      *(_QWORD *)&v53[2] = v14;
      *(_WORD *)v54 = 2048;
      *(_QWORD *)&v54[2] = v11;
      *(_WORD *)v55 = 2048;
      *(_QWORD *)&v55[2] = v12;
      LOWORD(v56) = 1024;
      *(_DWORD *)((char *)&v56 + 2) = v13;
      HIWORD(v56) = 2048;
      *(_QWORD *)v57 = v34;
      *(_WORD *)&v57[8] = 2048;
      v58 = v35;
      v59 = 2048;
      v60 = v36;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v32, 2, "TILE: binarySearchIndex, indexFound, isFound, %d, wasSearched, %d, size, %4lu, a, %4lu, b, %4lu, c, %4lu, searchAr, %4u, A, %012llx,  S, %012llx, B, %012llx", v52, 90, v46, v47, v48, v49, v50, v51, *(_QWORD *)v52, *(_QWORD *)&v52[8]);
      v38 = (char *)v37;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiTileFile::binarySearchIndex(const CLTilesManager_Type::AccessPointIndexEntryVector &, const TraverseDetails &, unsigned int &, unsigned int &)", "%s\n", v37);
      if (v38 != buf)
        free(v38);
    }
  }
  return v5;
}

BOOL sub_100FD8B48(uint64_t a1, FILE *a2, uint64_t a3)
{
  uint64_t *v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  _BOOL4 v12;
  __int128 v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  NSObject *v22;
  const char *v23;
  char *v24;
  _BOOL8 v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  size_t v31;
  unint64_t v32;
  size_t v33;
  int v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  char *v39;
  unsigned int v40;
  uint64_t v41;
  _DWORD *v42;
  char *v43;
  _DWORD *v44;
  size_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  double v56;
  double v57;
  unint64_t v58;
  int *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t *v64;
  uint64_t v65;
  unint64_t v66;
  void *v68;
  NSObject *v69;
  double v70;
  NSObject *v71;
  uint64_t *v72;
  const char *v73;
  char *v74;
  NSObject *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  NSObject *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  const char *v97;
  unint64_t v98;
  int *v99;
  const char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  const char *v108;
  char *v109;
  NSObject *v110;
  NSObject *v111;
  uint64_t v112;
  uint64_t v113;
  const char *v114;
  char *v115;
  NSObject *v116;
  const char *v117;
  const char *v118;
  NSObject *v119;
  const char *v120;
  char *v121;
  size_t v122;
  NSObject *v123;
  NSObject *v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v128;
  uint64_t v129;
  int v130;
  int v131;
  uint64_t v132;
  _BOOL4 v133;
  const char *v134;
  char *v135;
  unint64_t v136;
  uint64_t v137;
  const char *v138;
  char *v139;
  uint64_t v140;
  const char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  const char *v148;
  char *v149;
  const char *v150;
  char *v151;
  const char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t __ptr;
  int v164;
  uint64_t v165;
  unsigned int v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  pthread_mutex_t *v170;
  __int16 v171;
  int v172;
  uint64_t v173;
  __int16 v174;
  _BYTE v175[10];
  _BYTE v176[18];
  int v177;
  __int16 v178;
  int v179;
  _OWORD v180[13];
  _BYTE buf[12];
  __int16 v182;
  _BYTE v183[10];
  _BYTE v184[18];
  int v185;
  __int16 v186;
  int v187;

  v169 = *(_QWORD *)(a1 + 40);
  (*(void (**)(uint64_t))(*(_QWORD *)v169 + 16))(v169);
  v171 = 256;
  *(_BYTE *)(a1 + 296) = 1;
  v6 = &qword_1022A0000;
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102198198);
  v7 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v8 = *(_QWORD *)a3;
    v9 = *(unsigned __int8 *)(a3 + 8);
    v10 = *(unsigned __int8 *)(a3 + 9);
    v11 = sub_100129380(a3 + 16);
    v12 = *(_QWORD *)(a1 + 576) != 0;
    *(_DWORD *)buf = 136316162;
    *(_QWORD *)&buf[4] = v8;
    v182 = 1024;
    *(_DWORD *)v183 = v9;
    *(_WORD *)&v183[4] = 1024;
    *(_DWORD *)&v183[6] = v10;
    *(_WORD *)v184 = 2048;
    *(_QWORD *)&v184[2] = v11;
    *(_WORD *)&v184[10] = 1024;
    *(_DWORD *)&v184[12] = v12;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TILE: traverseTileFile, message, %s, isHeadersOnly, %d, isBinarySearch, %d, macAddressToSearch, %012llx, cachedIndex, %d", buf, 0x28u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102198198);
    v128 = qword_1022A02D8;
    v129 = *(_QWORD *)a3;
    v130 = *(unsigned __int8 *)(a3 + 8);
    v131 = *(unsigned __int8 *)(a3 + 9);
    v132 = sub_100129380(a3 + 16);
    v133 = *(_QWORD *)(a1 + 576) != 0;
    LODWORD(v180[0]) = 136316162;
    *(_QWORD *)((char *)v180 + 4) = v129;
    WORD6(v180[0]) = 1024;
    *(_DWORD *)((char *)v180 + 14) = v130;
    WORD1(v180[1]) = 1024;
    DWORD1(v180[1]) = v131;
    WORD4(v180[1]) = 2048;
    *(_QWORD *)((char *)&v180[1] + 10) = v132;
    WORD1(v180[2]) = 1024;
    DWORD1(v180[2]) = v133;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v128, 2, "TILE: traverseTileFile, message, %s, isHeadersOnly, %d, isBinarySearch, %d, macAddressToSearch, %012llx, cachedIndex, %d", (const char *)v180, 40, v155, v156, v157);
    v135 = (char *)v134;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLWifiTileFile::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v134);
    if (v135 != buf)
      free(v135);
  }
  if (!a2)
  {
    v25 = 0;
    goto LABEL_203;
  }
  v13 = *(_OWORD *)a3;
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 304) = v13;
  v168 = nullsub_34(0);
  v167 = nullsub_34(0);
  *(_QWORD *)((char *)v180 + 4) = 192;
  LODWORD(v180[0]) = 109498;
  HIDWORD(v180[0]) = 381;
  memset(&v180[1], 0, 28);
  *(int32x2_t *)((char *)&v180[2] + 12) = vdup_n_s32(0xC47A0000);
  DWORD1(v180[3]) = -998637568;
  memset((char *)&v180[3] + 8, 0, 148);
  v14 = (uint64_t)&qword_101BB0000;
  if (*(_BYTE *)(a3 + 9) && *(_QWORD *)(a1 + 576) && *(_QWORD *)(a1 + 584))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102198198);
    v15 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v16 = *(_QWORD *)(a1 + 584);
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "TILE: traverseTileFile, indexVector cached, seek to the APs table, %lld", buf, 0xCu);
    }
    v17 = sub_1001BFF7C(115, 2);
    if ((_DWORD)v17)
    {
      bzero(buf, 0x65CuLL);
      v61 = (uint64_t)&qword_1022A0000;
      if (qword_1022A02D0 != -1)
LABEL_237:
        dispatch_once(&qword_1022A02D0, &stru_102198198);
      v140 = *(_QWORD *)(a1 + 584);
      v172 = 134217984;
      v173 = v140;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: traverseTileFile, indexVector cached, seek to the APs table, %lld", &v172);
      v142 = (char *)v141;
      v17 = sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLWifiTileFile::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v141);
      if (v142 != buf)
        free(v142);
      v6 = (uint64_t *)v61;
    }
    LODWORD(v165) = 0;
    LODWORD(__ptr) = 0;
    if (sub_100FD8458(v17, *(_QWORD *)(a1 + 576), a3, &v165, &__ptr)
      && (v18 = __ptr, v165 < __ptr))
    {
      v19 = *(uint64_t **)(a1 + 576);
      v20 = *v19;
      v21 = 0xCCCCCCCCCCCCCCCDLL * ((v19[1] - *v19) >> 1);
      if (v21 <= v165 || v21 <= __ptr)
        sub_1002EAEB0();
      v160 = v20 + 10 * v165;
      v168 = sub_100B062F0((unsigned __int8 *)v160);
      v159 = v20 + 10 * v18;
      v167 = sub_100B062F0((unsigned __int8 *)v159);
      if (v6[90] != -1)
        dispatch_once(&qword_1022A02D0, &stru_102198198);
      v22 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "TILE: traverseTileFile, re-using cached index vector", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v6[90] != -1)
          dispatch_once(&qword_1022A02D0, &stru_102198198);
        LOWORD(v172) = 0;
        LODWORD(v154) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: traverseTileFile, re-using cached index vector", &v172, v154);
        v24 = (char *)v23;
        sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLWifiTileFile::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v23);
        if (v24 != buf)
          free(v24);
      }
    }
    else
    {
      if (v6[90] != -1)
        dispatch_once(&qword_1022A02D0, &stru_102198198);
      v26 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        v27 = sub_100129380((uint64_t)&v168);
        v28 = sub_100129380(a3 + 16);
        v29 = sub_100129380((uint64_t)&v167);
        v30 = 0xCCCCCCCCCCCCCCCDLL
            * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 576) + 8) - **(_QWORD **)(a1 + 576)) >> 1);
        *(_DWORD *)buf = *(_QWORD *)(v14 + 456);
        *(_QWORD *)&buf[4] = v27;
        v182 = 2048;
        *(_QWORD *)v183 = v28;
        *(_WORD *)&v183[8] = 2048;
        *(_QWORD *)v184 = v29;
        *(_WORD *)&v184[8] = 2048;
        *(_QWORD *)&v184[10] = v30;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "TILE: traverseTileFile, searched index, A, %012llx, mac, %012llx, B, %012llx, indexSize, %lu, halting search", buf, 0x2Au);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v6[90] != -1)
          dispatch_once(&qword_1022A02D0, &stru_102198198);
        v143 = qword_1022A02D8;
        v144 = sub_100129380((uint64_t)&v168);
        v145 = sub_100129380(a3 + 16);
        v146 = sub_100129380((uint64_t)&v167);
        v147 = 0xCCCCCCCCCCCCCCCDLL
             * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 576) + 8) - **(_QWORD **)(a1 + 576)) >> 1);
        v172 = *(_QWORD *)(v14 + 456);
        v173 = v144;
        v174 = 2048;
        *(_QWORD *)v175 = v145;
        *(_WORD *)&v175[8] = 2048;
        *(_QWORD *)v176 = v146;
        *(_WORD *)&v176[8] = 2048;
        *(_QWORD *)&v176[10] = v147;
        LODWORD(v154) = 42;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v143, 2, "TILE: traverseTileFile, searched index, A, %012llx, mac, %012llx, B, %012llx, indexSize, %lu, halting search", &v172, v154, v155, v156);
        v149 = (char *)v148;
        sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLWifiTileFile::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v148);
        if (v149 != buf)
          free(v149);
      }
      v159 = 0;
      v160 = 0;
      *(_BYTE *)(a1 + 296) = 0;
    }
    fseeko(a2, *(_QWORD *)(a1 + 584), 0);
  }
  else
  {
    v159 = 0;
    v160 = 0;
  }
  v161 = (_QWORD *)(a3 + 16);
  v158 = *(_QWORD *)(v14 + 456);
  while (1)
  {
    if (!*(_BYTE *)(a1 + 296) || feof(a2))
    {
      v25 = 1;
      goto LABEL_196;
    }
    v165 = 0;
    v166 = 0;
    __ptr = 0;
    v164 = 0;
    v31 = fread(&__ptr, 1uLL, 0xCuLL, a2);
    sub_100CD5A8C((unsigned __int16 *)&__ptr, (uint64_t)&v165);
    v25 = v31 != 12;
    if (v31 != 12)
      goto LABEL_196;
    if ((unsigned __int16)v165 != 43962)
      break;
    v32 = HIDWORD(v165) + (unint64_t)v166;
    v33 = v32 + 1036;
    if (v32 + 12 > 0x63FFC0B)
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021981B8);
      v116 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134349312;
        *(_QWORD *)&buf[4] = v33;
        v182 = 2050;
        *(_QWORD *)v183 = 104857612;
        _os_log_impl((void *)&_mh_execute_header, v116, OS_LOG_TYPE_ERROR, "WifiTile, traverseTileFile, invalid tile file, bad allocation size, bytesToAllocate, %{public}lu, maxAllocationSize, %{public}lu, #CloneMe", buf, 0x16u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_195;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021981B8);
      v172 = 134349312;
      v173 = v33;
      v174 = 2050;
      *(_QWORD *)v175 = 104857612;
      LODWORD(v154) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "WifiTile, traverseTileFile, invalid tile file, bad allocation size, bytesToAllocate, %{public}lu, maxAllocationSize, %{public}lu, #CloneMe", &v172, v154);
      v118 = v117;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLWifiTileFile::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v117);
LABEL_186:
      if (v118 != buf)
      {
        v121 = (char *)v118;
        goto LABEL_194;
      }
LABEL_195:
      v25 = 0;
      goto LABEL_196;
    }
    v34 = WORD1(v165);
    if (WORD1(v165) == 3)
    {
      *(_QWORD *)(a1 + 584) = ftello(a2) - 12;
      v34 = WORD1(v165);
    }
    if ((v34 - 4) <= 0xFFFFFFFC)
    {
      if (v6[90] != -1)
        dispatch_once(&qword_1022A02D0, &stru_102198198);
      v35 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        v36 = *(_QWORD *)a3;
        *(_DWORD *)buf = 136316162;
        *(_QWORD *)&buf[4] = v36;
        v182 = 1024;
        *(_DWORD *)v183 = (unsigned __int16)v165;
        *(_WORD *)&v183[4] = 1024;
        *(_DWORD *)&v183[6] = WORD1(v165);
        *(_WORD *)v184 = 1024;
        *(_DWORD *)&v184[2] = v166;
        *(_WORD *)&v184[6] = 1024;
        *(_DWORD *)&v184[8] = HIDWORD(v165);
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "TILE: skip section, message, %s, signature, 0x%x, sectionId, %d, sizeBytes, %d, headerSizeBytes, %d", buf, 0x24u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v6[90] != -1)
          dispatch_once(&qword_1022A02D0, &stru_102198198);
        v37 = *(_QWORD *)a3;
        v172 = 136316162;
        v173 = v37;
        v174 = 1024;
        *(_DWORD *)v175 = (unsigned __int16)v165;
        *(_WORD *)&v175[4] = 1024;
        *(_DWORD *)&v175[6] = WORD1(v165);
        *(_WORD *)v176 = 1024;
        *(_DWORD *)&v176[2] = v166;
        *(_WORD *)&v176[6] = 1024;
        *(_DWORD *)&v176[8] = HIDWORD(v165);
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: skip section, message, %s, signature, 0x%x, sectionId, %d, sizeBytes, %d, headerSizeBytes, %d", (const char *)&v172, 36, v155, v156, v158);
        v39 = (char *)v38;
        sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLWifiTileFile::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v38);
        if (v39 != buf)
          free(v39);
      }
LABEL_61:
      v40 = HIDWORD(v165);
      v41 = v166;
      v33 -= v166;
      goto LABEL_63;
    }
    if (*(_BYTE *)(a3 + 9))
    {
      if (v34 == 3)
        goto LABEL_61;
    }
    else if (v34 == 3 && *(_BYTE *)(a3 + 8))
    {
      goto LABEL_61;
    }
    v41 = 0;
    v40 = v166 + HIDWORD(v165);
LABEL_63:
    v42 = malloc_type_malloc(v33, 0xE5637B24uLL);
    v43 = (char *)v42;
    if (!v42)
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021981B8);
      v119 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)&buf[4] = v33;
        _os_log_impl((void *)&_mh_execute_header, v119, OS_LOG_TYPE_ERROR, "WifiTile, failed to allocate memory for, %{public}lu, #CloneMe", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_195;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021981B8);
      v172 = 134349056;
      v173 = v33;
      LODWORD(v154) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "WifiTile, failed to allocate memory for, %{public}lu, #CloneMe", &v172, v154);
      v118 = v120;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLWifiTileFile::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v120);
      goto LABEL_186;
    }
    v44 = v42 + 3;
    v45 = fread(v42 + 3, 1uLL, v40, a2);
    if (v45 != v40)
    {
      v122 = v45;
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021981B8);
      v123 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134349312;
        *(_QWORD *)&buf[4] = v122;
        v182 = 2050;
        *(_QWORD *)v183 = v40;
        _os_log_impl((void *)&_mh_execute_header, v123, OS_LOG_TYPE_ERROR, "WifiTile, failed to read, %{public}lu, %{public}lu, #CloneMe", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021981B8);
        v172 = 134349312;
        v173 = v122;
        v174 = 2050;
        *(_QWORD *)v175 = v40;
        LODWORD(v154) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "WifiTile, failed to read, %{public}lu, %{public}lu, #CloneMe", &v172, v154);
        v153 = (char *)v152;
        sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLWifiTileFile::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v152);
        if (v153 != buf)
          free(v153);
      }
      v121 = v43;
LABEL_194:
      free(v121);
      goto LABEL_195;
    }
    v46 = __ptr;
    *((_DWORD *)v43 + 2) = v164;
    *(_QWORD *)v43 = v46;
    if (WORD1(v165) != 3)
    {
      if (WORD1(v165) != 2)
      {
        if (WORD1(v165) == 1)
        {
          v180[0] = *(_OWORD *)v43;
          v47 = *((_OWORD *)v43 + 1);
          v48 = *((_OWORD *)v43 + 2);
          v49 = *((_OWORD *)v43 + 4);
          v180[3] = *((_OWORD *)v43 + 3);
          v180[4] = v49;
          v180[1] = v47;
          v180[2] = v48;
          v50 = *((_OWORD *)v43 + 5);
          v51 = *((_OWORD *)v43 + 6);
          v52 = *((_OWORD *)v43 + 8);
          v180[7] = *((_OWORD *)v43 + 7);
          v180[8] = v52;
          v180[5] = v50;
          v180[6] = v51;
          v53 = *((_OWORD *)v43 + 9);
          v54 = *((_OWORD *)v43 + 10);
          v55 = *((_OWORD *)v43 + 11);
          *(_OWORD *)((char *)&v180[11] + 12) = *(_OWORD *)(v43 + 188);
          v180[10] = v54;
          v180[11] = v55;
          v180[9] = v53;
          *(int8x8_t *)&v56 = sub_100CD5A90((uint64_t)v180, (uint64_t)v180);
          (*(void (**)(uint64_t, _OWORD *, double))(*(_QWORD *)a1 + 120))(a1, v180, v56);
        }
        else
        {
          if (v6[90] != -1)
            dispatch_once(&qword_1022A02D0, &stru_102198198);
          v69 = qword_1022A02D8;
          if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = WORD1(v165);
            _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEBUG, "TILE: unknown section : %d", buf, 8u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (v6[90] != -1)
              dispatch_once(&qword_1022A02D0, &stru_102198198);
            v172 = 67109120;
            LODWORD(v173) = WORD1(v165);
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: unknown section : %d", &v172);
            v102 = (char *)v101;
            sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLWifiTileFile::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v101);
            if (v102 != buf)
              free(v102);
          }
        }
        goto LABEL_90;
      }
      if (!*(_BYTE *)(a3 + 8))
      {
        *(int8x8_t *)&v57 = sub_100CD5B40((uint64_t)v43, (uint64_t)v43);
        (*(void (**)(uint64_t, char *, double))(*(_QWORD *)a1 + 136))(a1, v43, v57);
        if (*v44)
        {
          v58 = 0;
          v14 = (uint64_t)v44 + *((unsigned int *)v43 + 1);
          do
          {
            v59 = (int *)(v14 + v58 * *((unsigned int *)v43 + 4));
            sub_100CD5B74(v59, (uint64_t)v59);
            (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 144))(a1, v59);
            ++v58;
          }
          while (v58 < *v44);
        }
        v168 = nullsub_34(0);
        v60 = nullsub_34(0);
        v61 = 10;
        v167 = v60;
        v62 = *(_QWORD *)(a1 + 576);
        if (!v62)
        {
          sub_1019395E4();
          abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/CLWifiTileFile.mm", 1146, "traverseTileFile");
          __break(1u);
          goto LABEL_237;
        }
        if (*(_BYTE *)(a3 + 9))
        {
          v162 = 0;
          if (sub_100FD8458(v60, v62, a3, (_DWORD *)&v162 + 1, &v162))
          {
            v63 = v162;
            if (HIDWORD(v162) < v162)
            {
              v64 = *(uint64_t **)(a1 + 576);
              v65 = *v64;
              v66 = 0xCCCCCCCCCCCCCCCDLL * ((v64[1] - *v64) >> 1);
              if (v66 <= HIDWORD(v162) || v66 <= v162)
                sub_1002EAEB0();
              v160 = v65 + 10 * HIDWORD(v162);
              v168 = sub_100B062F0((unsigned __int8 *)v160);
              v159 = v65 + 10 * v63;
              v167 = sub_100B062F0((unsigned __int8 *)v159);
              goto LABEL_122;
            }
          }
          if (v6[90] != -1)
            dispatch_once(&qword_1022A02D0, &stru_102198198);
          v75 = qword_1022A02D8;
          if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
          {
            v76 = sub_100129380((uint64_t)&v168);
            v77 = sub_100129380((uint64_t)v161);
            v78 = sub_100129380((uint64_t)&v167);
            v79 = 0xCCCCCCCCCCCCCCCDLL
                * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 576) + 8) - **(_QWORD **)(a1 + 576)) >> 1);
            *(_DWORD *)buf = v158;
            *(_QWORD *)&buf[4] = v76;
            v182 = 2048;
            *(_QWORD *)v183 = v77;
            *(_WORD *)&v183[8] = 2048;
            *(_QWORD *)v184 = v78;
            *(_WORD *)&v184[8] = 2048;
            *(_QWORD *)&v184[10] = v79;
            _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEBUG, "TILE: searched index, A, %012llx, mac, %012llx, B, %012llx, indexSize, %lu, halting search", buf, 0x2Au);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (v6[90] != -1)
              dispatch_once(&qword_1022A02D0, &stru_102198198);
            v103 = qword_1022A02D8;
            v104 = sub_100129380((uint64_t)&v168);
            v105 = sub_100129380((uint64_t)v161);
            v106 = sub_100129380((uint64_t)&v167);
            v107 = 0xCCCCCCCCCCCCCCCDLL
                 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 576) + 8) - **(_QWORD **)(a1 + 576)) >> 1);
            v172 = v158;
            v173 = v104;
            v174 = 2048;
            *(_QWORD *)v175 = v105;
            *(_WORD *)&v175[8] = 2048;
            *(_QWORD *)v176 = v106;
            *(_WORD *)&v176[8] = 2048;
            *(_QWORD *)&v176[10] = v107;
            LODWORD(v154) = 42;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v103, 2, "TILE: searched index, A, %012llx, mac, %012llx, B, %012llx, indexSize, %lu, halting search", &v172, v154, v155, v156);
            v109 = (char *)v108;
            sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLWifiTileFile::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v108);
            if (v109 != buf)
              free(v109);
          }
          v159 = 0;
          v160 = 0;
        }
        else
        {
          v159 = 0;
          v160 = 0;
LABEL_122:
          if (v6[90] != -1)
            dispatch_once(&qword_1022A02D0, &stru_102198198);
          v87 = qword_1022A02D8;
          if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
          {
            v88 = sub_100129380((uint64_t)&v168);
            v89 = sub_100129380((uint64_t)v161);
            v90 = sub_100129380((uint64_t)&v167);
            v91 = 0xCCCCCCCCCCCCCCCDLL
                * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 576) + 8) - **(_QWORD **)(a1 + 576)) >> 1);
            *(_DWORD *)buf = v158;
            *(_QWORD *)&buf[4] = v88;
            v182 = 2048;
            *(_QWORD *)v183 = v89;
            *(_WORD *)&v183[8] = 2048;
            *(_QWORD *)v184 = v90;
            *(_WORD *)&v184[8] = 2048;
            *(_QWORD *)&v184[10] = v91;
            _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_DEBUG, "TILE: searched index, A, %012llx, mac, %012llx, B, %012llx, indexSize, %lu", buf, 0x2Au);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            v72 = v6;
            if (v6[90] != -1)
              dispatch_once(&qword_1022A02D0, &stru_102198198);
            v92 = qword_1022A02D8;
            v93 = sub_100129380((uint64_t)&v168);
            v94 = sub_100129380((uint64_t)v161);
            v95 = sub_100129380((uint64_t)&v167);
            v96 = 0xCCCCCCCCCCCCCCCDLL
                * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 576) + 8) - **(_QWORD **)(a1 + 576)) >> 1);
            v172 = v158;
            v173 = v93;
            v174 = 2048;
            *(_QWORD *)v175 = v94;
            *(_WORD *)&v175[8] = 2048;
            *(_QWORD *)v176 = v95;
            *(_WORD *)&v176[8] = 2048;
            *(_QWORD *)&v176[10] = v96;
            LODWORD(v154) = 42;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v92, 2, "TILE: searched index, A, %012llx, mac, %012llx, B, %012llx, indexSize, %lu", &v172, v154, v155, v156);
            v74 = (char *)v97;
            sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLWifiTileFile::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v97);
LABEL_130:
            if (v74 != buf)
              free(v74);
            v68 = 0;
            v14 = 1;
            v6 = v72;
            goto LABEL_92;
          }
        }
LABEL_90:
        v68 = 0;
        goto LABEL_91;
      }
LABEL_84:
      v68 = 0;
      *(_BYTE *)(a1 + 296) = 0;
      goto LABEL_91;
    }
    if (*(_BYTE *)(a3 + 8))
      goto LABEL_84;
    *(int8x8_t *)&v70 = sub_100CD5B40((uint64_t)v43, (uint64_t)v43);
    (*(void (**)(uint64_t, char *, double))(*(_QWORD *)a1 + 152))(a1, v43, v70);
    if (*(_BYTE *)(a3 + 8))
    {
      if (v6[90] != -1)
        dispatch_once(&qword_1022A02D0, &stru_102198198);
      v71 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEBUG, "TILE: headers only, avoid reading the APs", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        v72 = v6;
        if (v6[90] != -1)
          dispatch_once(&qword_1022A02D0, &stru_102198198);
        LOWORD(v172) = 0;
        LODWORD(v154) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: headers only, avoid reading the APs", &v172, v154);
        v74 = (char *)v73;
        sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLWifiTileFile::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v73);
        goto LABEL_130;
      }
      goto LABEL_90;
    }
    v80 = *((unsigned int *)v43 + 1);
    v81 = *v44;
    v82 = sub_100129380((uint64_t)v161);
    v83 = (uint64_t)v44 + v80;
    if (*(_BYTE *)(a3 + 9))
    {
      v68 = 0;
      if (!v82 || !v160)
      {
        LODWORD(v85) = v81;
LABEL_142:
        sub_100FD8110(a1, v83, v85, a3, (uint64_t)v43);
        goto LABEL_91;
      }
      if (v159)
        v81 = (*(_DWORD *)(v159 + 6) + 1);
      v84 = *(unsigned int *)(v160 + 6);
      v85 = v81 - v84;
      v86 = *((unsigned int *)v43 + 3);
      v68 = malloc_type_malloc((*((_DWORD *)v43 + 4) * (v81 - v84)), 0xE6C51E8CuLL);
      if (!v68)
      {
        v14 = 0;
LABEL_145:
        v6 = &qword_1022A0000;
        goto LABEL_92;
      }
      fseek(a2, *((unsigned int *)v43 + 4) * (unint64_t)v84, 1);
      fread(v68, 1uLL, v85 * *((unsigned int *)v43 + 4), a2);
      fseek(a2, (v86 - v81) * *((unsigned int *)v43 + 4), 1);
      v41 = 0;
      v83 = (uint64_t)v68;
      v6 = &qword_1022A0000;
      if (*(_BYTE *)(a3 + 9))
        goto LABEL_142;
    }
    else
    {
      v68 = 0;
    }
    if (v81)
    {
      v98 = 1;
      while (1)
      {
        v99 = (int *)(v83 + (v98 - 1) * *((unsigned int *)v43 + 4));
        sub_100CD5B94(v99, (uint64_t)v99);
        (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 160))(a1, v99);
        *(_QWORD *)buf = sub_100B062F0((unsigned __int8 *)v99);
        if (sub_10009483C(v161, buf))
          break;
        v14 = 1;
        if (!*(_BYTE *)(a3 + 9) && v98++ < v81)
          continue;
        goto LABEL_145;
      }
      v14 = 1;
      goto LABEL_145;
    }
LABEL_91:
    v14 = 1;
LABEL_92:
    if (v41)
      fseek(a2, v41, 1);
    free(v43);
    if (v68)
      free(v68);
    if ((v14 & 1) == 0)
      goto LABEL_195;
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021981B8);
  v110 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134349824;
    *(_QWORD *)&buf[4] = 12;
    v182 = 1026;
    *(_DWORD *)v183 = (unsigned __int16)v165;
    *(_WORD *)&v183[4] = 1026;
    *(_DWORD *)&v183[6] = WORD1(v165);
    *(_WORD *)v184 = 1026;
    *(_DWORD *)&v184[2] = v166;
    _os_log_impl((void *)&_mh_execute_header, v110, OS_LOG_TYPE_ERROR, "WifiTile, Invalid section signature, readBytes, %{public}lu, section, signature, 0x%{public}x, sectionId, %{public}d, sizeBytes, %{public}d, #CloneMe", buf, 0x1Eu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021981B8);
    v172 = 134349824;
    v173 = 12;
    v174 = 1026;
    *(_DWORD *)v175 = (unsigned __int16)v165;
    *(_WORD *)&v175[4] = 1026;
    *(_DWORD *)&v175[6] = WORD1(v165);
    *(_WORD *)v176 = 1026;
    *(_DWORD *)&v176[2] = v166;
    LODWORD(v154) = 30;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "WifiTile, Invalid section signature, readBytes, %{public}lu, section, signature, 0x%{public}x, sectionId, %{public}d, sizeBytes, %{public}d, #CloneMe", &v172, v154);
    v151 = (char *)v150;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLWifiTileFile::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v150);
    if (v151 != buf)
      free(v151);
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021981B8);
  v111 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
  {
    v112 = *(_QWORD *)a3;
    *(_DWORD *)buf = 136447746;
    *(_QWORD *)&buf[4] = v112;
    v182 = 2050;
    *(_QWORD *)v183 = 12;
    *(_WORD *)&v183[8] = 1026;
    *(_DWORD *)v184 = (unsigned __int16)v165;
    *(_WORD *)&v184[4] = 1026;
    *(_DWORD *)&v184[6] = WORD1(v165);
    *(_WORD *)&v184[10] = 1026;
    *(_DWORD *)&v184[12] = v166;
    *(_WORD *)&v184[16] = 1026;
    v185 = HIDWORD(v165);
    v186 = 1026;
    v187 = WORD1(v165);
    _os_log_impl((void *)&_mh_execute_header, v111, OS_LOG_TYPE_ERROR, "WifiTile, message, %{public}s, readBytes, %{public}lu, section, signature, 0x%{public}x, sectionId, %{public}d, sizeBytes, %{public}d, headerSizeBytes, %{public}d, sectionId, %{public}d, #CloneMe", buf, 0x34u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021981B8);
    v113 = *(_QWORD *)a3;
    v172 = 136447746;
    v173 = v113;
    v174 = 2050;
    *(_QWORD *)v175 = 12;
    *(_WORD *)&v175[8] = 1026;
    *(_DWORD *)v176 = (unsigned __int16)v165;
    *(_WORD *)&v176[4] = 1026;
    *(_DWORD *)&v176[6] = WORD1(v165);
    *(_WORD *)&v176[10] = 1026;
    *(_DWORD *)&v176[12] = v166;
    *(_WORD *)&v176[16] = 1026;
    v177 = HIDWORD(v165);
    v178 = 1026;
    v179 = WORD1(v165);
    LODWORD(v154) = 52;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "WifiTile, message, %{public}s, readBytes, %{public}lu, section, signature, 0x%{public}x, sectionId, %{public}d, sizeBytes, %{public}d, headerSizeBytes, %{public}d, sectionId, %{public}d, #CloneMe", &v172, v154);
    v115 = (char *)v114;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLWifiTileFile::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v114);
    if (v115 != buf)
      free(v115);
  }
LABEL_196:
  if (v6[90] != -1)
    dispatch_once(&qword_1022A02D0, &stru_102198198);
  v124 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v125 = *(_QWORD *)(a1 + 576);
    if (v125)
      v125 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v125 + 8) - *(_QWORD *)v125) >> 1);
    v126 = *(_QWORD *)(a1 + 608);
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = v125;
    v182 = 2048;
    *(_QWORD *)v183 = v126;
    _os_log_impl((void *)&_mh_execute_header, v124, OS_LOG_TYPE_DEBUG, "TILE: traverseTileFile, finished traversing, file, index entries, %lu, apEntries, %lu", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v6[90] != -1)
      dispatch_once(&qword_1022A02D0, &stru_102198198);
    v136 = *(_QWORD *)(a1 + 576);
    if (v136)
      v136 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v136 + 8) - *(_QWORD *)v136) >> 1);
    v137 = *(_QWORD *)(a1 + 608);
    v172 = 134218240;
    v173 = v136;
    v174 = 2048;
    *(_QWORD *)v175 = v137;
    LODWORD(v154) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: traverseTileFile, finished traversing, file, index entries, %lu, apEntries, %lu", &v172, v154);
    v139 = (char *)v138;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLWifiTileFile::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v138);
    if (v139 != buf)
      free(v139);
  }
LABEL_203:
  if (HIBYTE(v171))
  {
    if ((_BYTE)v171)
      pthread_mutex_unlock(v170);
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v169 + 24))(v169);
  }
  return v25;
}

void sub_100FDAAA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  sub_10187E514((uint64_t)&a32);
  _Unwind_Resume(a1);
}

uint64_t sub_100FDAB9C@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  int v7;

  v7 = 0;
  sub_1000C1928(a1, &v7);
  return sub_1001CB024(a1, -1, a2, a3, 0.05, 0.05);
}

void sub_100FDAC00(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*(void **)(v1 + 24));
  _Unwind_Resume(exception_object);
}

uint64_t sub_100FDAC1C()
{
  return dword_1022FC718;
}

uint64_t sub_100FDAC28()
{
  return 4096;
}

void sub_100FDAC30(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_100FDAC5C(uint64_t a1, uint64_t a2)
{
  void *v2;

  if (a2)
  {
    v2 = *(void **)a2;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)(a2 + 8) = v2;
      operator delete(v2);
    }
    operator delete();
  }
}

void sub_100FDACA4(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

_WORD *sub_100FDACD0(uint64_t **a1, _QWORD *a2, uint64_t a3, uint64_t **a4)
{
  void **v6;
  _WORD *v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t v11;

  v6 = (void **)sub_100191690((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x38uLL);
    v9 = **a4;
    v7[24] = 0;
    *((_QWORD *)v7 + 4) = v9;
    *((_QWORD *)v7 + 5) = 0;
    sub_1000145B0(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

void *sub_100FDAD58(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x199999999999999ALL)
    sub_10025955C();
  return operator new(10 * a2);
}

void sub_100FDAD9C()
{
  operator new();
}

void sub_100FDADEC()
{
  operator delete();
}

void **sub_100FDAE10(void **a1)
{
  void **v3;

  v3 = a1;
  sub_10025E1F0(&v3);
  return a1;
}

_QWORD *sub_100FDAE44(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      sub_10027205C(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 2);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  sub_100FDAEF4((uint64_t)v8);
  return v4;
}

void sub_100FDAEE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100FDAEF4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100FDAEF4(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_10025E528(a1);
  return a1;
}

uint64_t sub_100FDAF28()
{
  _OWORD *v0;
  _OWORD *v1;
  _OWORD *v2;
  _OWORD *v3;
  _OWORD *v4;
  _OWORD *v5;
  _OWORD *v6;
  _OWORD *v7;
  _OWORD *v8;
  _OWORD *v9;
  _OWORD *v10;
  _OWORD *v11;
  _OWORD *v12;
  _OWORD *v13;
  _OWORD *v14;
  _OWORD *v15;
  _OWORD *v16;
  _OWORD *v17;
  _OWORD *v18;
  _OWORD *v19;
  _OWORD *v20;
  _OWORD *v21;
  uint64_t v22;
  void *v23;
  _QWORD v25[60];
  uint64_t v26;

  qword_102311BE8 = 0;
  unk_102311BF0 = 0;
  qword_102311BE0 = 0;
  v0 = operator new(0x4CuLL);
  qword_102311BE8 = (uint64_t)v0 + 76;
  unk_102311BF0 = (char *)v0 + 76;
  v0[2] = xmmword_101C39214;
  v0[3] = unk_101C39224;
  *(_OWORD *)((char *)v0 + 60) = unk_101C39230;
  *v0 = xmmword_101C391F4;
  v0[1] = unk_101C39204;
  qword_102311BE0 = (uint64_t)v0;
  __cxa_atexit((void (*)(void *))sub_10041C534, &qword_102311BE0, (void *)&_mh_execute_header);
  qword_102311C00 = 0;
  unk_102311C08 = 0;
  qword_102311BF8 = 0;
  v1 = operator new(0x4CuLL);
  qword_102311C00 = (uint64_t)v1 + 76;
  unk_102311C08 = (char *)v1 + 76;
  v1[2] = xmmword_101C39260;
  v1[3] = unk_101C39270;
  *(_OWORD *)((char *)v1 + 60) = unk_101C3927C;
  *v1 = xmmword_101C39240;
  v1[1] = unk_101C39250;
  qword_102311BF8 = (uint64_t)v1;
  __cxa_atexit((void (*)(void *))sub_10041C534, &qword_102311BF8, (void *)&_mh_execute_header);
  v2 = operator new(0x50uLL);
  v2[2] = xmmword_101C392AC;
  v2[3] = unk_101C392BC;
  v2[4] = xmmword_101C392CC;
  *v2 = xmmword_101C3928C;
  v2[1] = unk_101C3929C;
  v25[0] = v2;
  v25[1] = v2 + 5;
  v25[2] = v2 + 5;
  v3 = operator new(0x50uLL);
  v3[2] = xmmword_101C392FC;
  v3[3] = unk_101C3930C;
  v3[4] = xmmword_101C3931C;
  *v3 = xmmword_101C392DC;
  v3[1] = unk_101C392EC;
  v25[3] = v3;
  v25[4] = v3 + 5;
  v25[5] = v3 + 5;
  v4 = operator new(0x50uLL);
  v4[2] = xmmword_101C3934C;
  v4[3] = unk_101C3935C;
  v4[4] = xmmword_101C3936C;
  *v4 = xmmword_101C3932C;
  v4[1] = unk_101C3933C;
  v25[6] = v4;
  v25[7] = v4 + 5;
  v25[8] = v4 + 5;
  v5 = operator new(0x50uLL);
  v5[2] = xmmword_101C3939C;
  v5[3] = unk_101C393AC;
  v5[4] = xmmword_101C393BC;
  *v5 = xmmword_101C3937C;
  v5[1] = unk_101C3938C;
  v25[9] = v5;
  v25[10] = v5 + 5;
  v25[11] = v5 + 5;
  v6 = operator new(0x50uLL);
  v6[2] = xmmword_101C393EC;
  v6[3] = unk_101C393FC;
  v6[4] = xmmword_101C3940C;
  *v6 = xmmword_101C393CC;
  v6[1] = unk_101C393DC;
  v25[12] = v6;
  v25[13] = v6 + 5;
  v25[14] = v6 + 5;
  v7 = operator new(0x50uLL);
  v7[2] = xmmword_101C3943C;
  v7[3] = unk_101C3944C;
  v7[4] = xmmword_101C3945C;
  *v7 = xmmword_101C3941C;
  v7[1] = unk_101C3942C;
  v25[15] = v7;
  v25[16] = v7 + 5;
  v25[17] = v7 + 5;
  v8 = operator new(0x50uLL);
  v8[2] = xmmword_101C3948C;
  v8[3] = unk_101C3949C;
  v8[4] = xmmword_101C394AC;
  *v8 = xmmword_101C3946C;
  v8[1] = unk_101C3947C;
  v25[18] = v8;
  v25[19] = v8 + 5;
  v25[20] = v8 + 5;
  v9 = operator new(0x50uLL);
  v9[2] = xmmword_101C394DC;
  v9[3] = unk_101C394EC;
  v9[4] = xmmword_101C394FC;
  *v9 = xmmword_101C394BC;
  v9[1] = unk_101C394CC;
  v25[21] = v9;
  v25[22] = v9 + 5;
  v25[23] = v9 + 5;
  v10 = operator new(0x50uLL);
  v10[2] = xmmword_101C3952C;
  v10[3] = unk_101C3953C;
  v10[4] = xmmword_101C3954C;
  *v10 = xmmword_101C3950C;
  v10[1] = unk_101C3951C;
  v25[24] = v10;
  v25[25] = v10 + 5;
  v25[26] = v10 + 5;
  v11 = operator new(0x50uLL);
  v11[2] = xmmword_101C3957C;
  v11[3] = unk_101C3958C;
  v11[4] = xmmword_101C3959C;
  *v11 = xmmword_101C3955C;
  v11[1] = unk_101C3956C;
  v25[27] = v11;
  v25[28] = v11 + 5;
  v25[29] = v11 + 5;
  v12 = operator new(0x50uLL);
  v12[2] = xmmword_101C395CC;
  v12[3] = unk_101C395DC;
  v12[4] = xmmword_101C395EC;
  *v12 = xmmword_101C395AC;
  v12[1] = unk_101C395BC;
  v25[30] = v12;
  v25[31] = v12 + 5;
  v25[32] = v12 + 5;
  v13 = operator new(0x50uLL);
  v13[2] = xmmword_101C3961C;
  v13[3] = unk_101C3962C;
  v13[4] = xmmword_101C3963C;
  *v13 = xmmword_101C395FC;
  v13[1] = unk_101C3960C;
  v25[33] = v13;
  v25[34] = v13 + 5;
  v25[35] = v13 + 5;
  v14 = operator new(0x50uLL);
  v14[2] = xmmword_101C3966C;
  v14[3] = unk_101C3967C;
  v14[4] = xmmword_101C3968C;
  *v14 = xmmword_101C3964C;
  v14[1] = unk_101C3965C;
  v25[36] = v14;
  v25[37] = v14 + 5;
  v25[38] = v14 + 5;
  v15 = operator new(0x50uLL);
  v15[2] = xmmword_101C396BC;
  v15[3] = unk_101C396CC;
  v15[4] = xmmword_101C396DC;
  *v15 = xmmword_101C3969C;
  v15[1] = unk_101C396AC;
  v25[39] = v15;
  v25[40] = v15 + 5;
  v25[41] = v15 + 5;
  v16 = operator new(0x50uLL);
  v16[2] = xmmword_101C3970C;
  v16[3] = unk_101C3971C;
  v16[4] = xmmword_101C3972C;
  *v16 = xmmword_101C396EC;
  v16[1] = unk_101C396FC;
  v25[42] = v16;
  v25[43] = v16 + 5;
  v25[44] = v16 + 5;
  v17 = operator new(0x50uLL);
  v17[2] = xmmword_101C3975C;
  v17[3] = unk_101C3976C;
  v17[4] = xmmword_101C3977C;
  *v17 = xmmword_101C3973C;
  v17[1] = unk_101C3974C;
  v25[45] = v17;
  v25[46] = v17 + 5;
  v25[47] = v17 + 5;
  v18 = operator new(0x50uLL);
  v18[2] = xmmword_101C397AC;
  v18[3] = unk_101C397BC;
  v18[4] = xmmword_101C397CC;
  *v18 = xmmword_101C3978C;
  v18[1] = unk_101C3979C;
  v25[48] = v18;
  v25[49] = v18 + 5;
  v25[50] = v18 + 5;
  v19 = operator new(0x50uLL);
  v19[2] = xmmword_101C397FC;
  v19[3] = unk_101C3980C;
  v19[4] = xmmword_101C3981C;
  *v19 = xmmword_101C397DC;
  v19[1] = unk_101C397EC;
  v25[51] = v19;
  v25[52] = v19 + 5;
  v25[53] = v19 + 5;
  v20 = operator new(0x50uLL);
  v20[2] = xmmword_101C3984C;
  v20[3] = unk_101C3985C;
  v20[4] = xmmword_101C3986C;
  *v20 = xmmword_101C3982C;
  v20[1] = unk_101C3983C;
  v25[54] = v20;
  v25[55] = v20 + 5;
  v25[56] = v20 + 5;
  v21 = operator new(0x50uLL);
  v25[58] = v21 + 5;
  v25[59] = v21 + 5;
  v21[2] = xmmword_101C3989C;
  v21[3] = unk_101C398AC;
  v21[4] = xmmword_101C398BC;
  *v21 = xmmword_101C3987C;
  v21[1] = unk_101C3988C;
  v25[57] = v21;
  qword_102311C18 = 0;
  qword_102311C20 = 0;
  qword_102311C10 = 0;
  qword_102311C10 = (uint64_t)operator new(0x1E0uLL);
  qword_102311C18 = qword_102311C10;
  qword_102311C20 = qword_102311C10 + 480;
  qword_102311C18 = (uint64_t)sub_100FDAE44((uint64_t)&qword_102311C20, (uint64_t)v25, (uint64_t)&v26, (_QWORD *)qword_102311C10);
  v22 = 60;
  do
  {
    v23 = (void *)v25[v22 - 3];
    if (v23)
    {
      v25[v22 - 2] = v23;
      operator delete(v23);
    }
    v22 -= 3;
  }
  while (v22 * 8);
  return __cxa_atexit((void (*)(void *))sub_100FDAE10, &qword_102311C10, (void *)&_mh_execute_header);
}

void sub_100FDB598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  uint64_t v12;
  uint64_t v14;
  void **v15;

  qword_102311C18 = v12;
  sub_10025E1F0(&a10);
  v14 = 60;
  while (1)
  {
    v15 = *(void ***)(&a12 + v14 * 8 - 24);
    if (v15)
    {
      (&a10)[v14] = v15;
      operator delete(v15);
    }
    v14 -= 3;
    if (!(v14 * 8))
      _Unwind_Resume(a1);
  }
}

double sub_100FDB654(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = sub_1004C1B18(a1, a2);
  *(_QWORD *)v2 = off_1021981E8;
  *(_DWORD *)(v2 + 24) = 2;
  result = 0.0;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_QWORD *)(v2 + 256) = 0;
  *(_DWORD *)(v2 + 264) = 2;
  return result;
}

_QWORD *sub_100FDB6A4(unsigned int *a1, unsigned int a2)
{
  NSObject *v4;
  int v5;
  uint64_t v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  _DWORD v11[2];
  __int16 v12;
  int v13;
  uint8_t buf[4];
  unsigned int v15;
  __int16 v16;
  int v17;

  a1[6] = a2;
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_102198238);
  v4 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
  {
    v5 = (*(uint64_t (**)(unsigned int *, _QWORD))(*(_QWORD *)a1 + 32))(a1, a1[2]);
    *(_DWORD *)buf = 67240448;
    v15 = a2;
    v16 = 1026;
    v17 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "FitnessMode, received phone fitness mode update %{public}d, shouldPush, %{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102198238);
    v7 = qword_10229FC98;
    v8 = (*(uint64_t (**)(unsigned int *, _QWORD))(*(_QWORD *)a1 + 32))(a1, a1[2]);
    v11[0] = 67240448;
    v11[1] = a2;
    v12 = 1026;
    v13 = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 0, "FitnessMode, received phone fitness mode update %{public}d, shouldPush, %{public}d", v11, 14);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLFitnessModeControllerPhone::feedPhoneFitnessModeUpdate(CLFitnessTrackingNotifier_Type::PhoneFitnessMode)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  if (a2 == 1)
    return sub_1004C1F70(a1, a1[2], a1[2] == 1);
  else
    return (_QWORD *)sub_1004C2204(a1);
}

_QWORD *sub_100FDB8C0(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;
  NSObject *v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  const char *v27;
  uint8_t *v28;
  int v29;
  uint64_t v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  uint8_t buf[4];
  uint64_t v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;

  v4 = *(_OWORD *)a2;
  v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 32) = v4;
  v6 = *(_OWORD *)(a2 + 48);
  v7 = *(_OWORD *)(a2 + 64);
  v8 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  v9 = *(_OWORD *)(a2 + 112);
  v10 = *(_OWORD *)(a2 + 128);
  v11 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 192) = v11;
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  v12 = *(_OWORD *)(a2 + 176);
  v13 = *(_OWORD *)(a2 + 192);
  v14 = *(_OWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 224) = v13;
  *(_OWORD *)(a1 + 240) = v14;
  *(_OWORD *)(a1 + 208) = v12;
  if (sub_100F72B60(a2) == 1)
  {
    v15 = 1;
  }
  else
  {
    if (sub_100F72B60(a2) != 2)
      goto LABEL_6;
    v15 = 2;
  }
  *(_DWORD *)(a1 + 264) = v15;
LABEL_6:
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_102198238);
  v16 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
  {
    v17 = *(_QWORD *)(a2 + 16);
    v18 = *(unsigned __int8 *)(a2 + 144);
    v19 = *(_DWORD *)(a1 + 264);
    v20 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, *(unsigned int *)(a1 + 8));
    *(_DWORD *)buf = 134349824;
    v38 = v17;
    v39 = 1026;
    v40 = v18;
    v41 = 1026;
    v42 = v19;
    v43 = 1026;
    v44 = v20;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "FitnessMode, received workout event, %{public}ld, fitness plus %{public}d, active state, %{public}d, should push, %{public}d", buf, 0x1Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102198238);
    v22 = qword_10229FC98;
    v23 = *(_QWORD *)(a2 + 16);
    v24 = *(unsigned __int8 *)(a2 + 144);
    v25 = *(_DWORD *)(a1 + 264);
    v26 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, *(unsigned int *)(a1 + 8));
    v29 = 134349824;
    v30 = v23;
    v31 = 1026;
    v32 = v24;
    v33 = 1026;
    v34 = v25;
    v35 = 1026;
    v36 = v26;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v22, 0, "FitnessMode, received workout event, %{public}ld, fitness plus %{public}d, active state, %{public}d, should push, %{public}d", &v29, 30);
    v28 = (uint8_t *)v27;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLFitnessModeControllerPhone::feedWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent &)", "%s\n", v27);
    if (v28 != buf)
      free(v28);
  }
  if (*(_BYTE *)(a1 + 176) && *(_DWORD *)(a1 + 264) == 1)
    return sub_1004C1F70((_QWORD *)a1, *(unsigned int *)(a1 + 8), 0);
  else
    return (_QWORD *)sub_1004C2204((_QWORD *)a1);
}

BOOL sub_100FDBBA4(uint64_t a1, int a2)
{
  if (!*(_BYTE *)(a1 + 12) || a2 != 2 && a2 != 1)
    return 0;
  if (*(_DWORD *)(a1 + 24) == 1)
    return 1;
  return *(_BYTE *)(a1 + 176) && *(_DWORD *)(a1 + 264) == 1;
}

void sub_100FDBBF0()
{
  operator delete();
}

void sub_100FDBC04(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_100FDBF8C(id a1)
{
  _QWORD v1[6];
  _QWORD v2[6];
  _QWORD v3[7];
  _QWORD v4[4];

  v4[0] = CFSTR("Authorized");
  v4[1] = CFSTR("Authorization");
  v4[2] = CFSTR("CorrectiveCompensationEnabled");
  v4[3] = CFSTR("SupportedAuthorizationMask");
  qword_10230B908 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v4, 4);
  v3[0] = CFSTR("Authorized");
  v3[1] = CFSTR("Authorization");
  v3[2] = CFSTR("CorrectiveCompensationEnabled");
  v3[3] = CFSTR("IncidentalUseMode");
  v3[4] = CFSTR("LocationButtonUseMode");
  v3[5] = CFSTR("SupportedAuthorizationMask");
  v3[6] = CFSTR("RemoteUsage");
  qword_10230B910 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v3, 7);
  v1[0] = CFSTR("Authorized");
  v1[1] = CFSTR("Authorization");
  v2[0] = &__kCFBooleanFalse;
  v2[1] = &off_10221C518;
  v1[2] = CFSTR("CorrectiveCompensationEnabled");
  v1[3] = CFSTR("IncidentalUseMode");
  v2[2] = &off_10221C530;
  v2[3] = &off_10221C548;
  v1[4] = CFSTR("isSystemService");
  v1[5] = CFSTR("InUseLevel");
  v2[4] = &__kCFBooleanFalse;
  v2[5] = &off_10221C530;
  qword_10230B918 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v2, v1, 6);
}

void sub_100FDD134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

id sub_100FDE80C(void *a1, void *a2, uint64_t a3)
{
  id result;

  if (objc_msgSend(a2, "objectForKeyedSubscript:"))
    return objc_msgSend(a1, "setObject:forKeyedSubscript:", objc_msgSend(a2, "objectForKeyedSubscript:", a3), a3);
  result = objc_msgSend(a1, "objectForKeyedSubscript:", a3);
  if (result)
    return objc_msgSend(a1, "removeObjectForKey:", a3);
  return result;
}

void sub_100FDF0AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100FE0B90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100FE1C74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100FE25E8(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_100FE2614(id a1)
{
  qword_1022A01C8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_100FE2680(void *a1, int a2, int a3, int a4, const char *a5, const char *a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  NSObject *v13;

  _os_signpost_emit_with_name_impl(a1, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, a5, a6, &buf, 0x3Au);
}

void sub_100FE26A0(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  NSObject *v13;

  _os_log_impl(a1, v13, OS_LOG_TYPE_FAULT, a4, &buf, 0x3Au);
}

void sub_100FE26B4(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  NSObject *v13;

  _os_log_impl(a1, v13, OS_LOG_TYPE_INFO, a4, &buf, 0x3Au);
}

id sub_100FE26C8()
{
  void *v0;

  return objc_msgSend(v0, "userName");
}

void sub_100FE2BD4(id a1)
{
  qword_10229FD98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Fall");
}

void sub_100FE2C00(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v3;
  int *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  int *v9;
  int *v10;
  int *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  int *v17;
  int v18;
  int *v19;
  uint64_t v20;
  int *__p;
  int *v22;
  int *v23;
  void *v24;
  int *v25;
  char v26;
  _DWORD v27[4];
  uint8_t buf[4];
  int v29;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 24))(&v24);
  if (!v26)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
    return;
  }
  __p = 0;
  v22 = 0;
  v23 = 0;
  v3 = (int *)v24;
  v4 = v25;
  if (v24 == v25)
  {
    v19 = 0;
    goto LABEL_36;
  }
  do
  {
    v5 = *v3;
    if (sub_1000AFA5C(*v3))
    {
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021983E0);
      v6 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67240192;
        v29 = v5;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "@WifiChannel, receive channel %{public}d recommendation from 5GHz selector", buf, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021983E0);
        v27[0] = 67240192;
        v27[1] = v5;
        LODWORD(v20) = 8;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 16, "@WifiChannel, receive channel %{public}d recommendation from 5GHz selector", v27, v20);
        v8 = (uint8_t *)v7;
        sub_100512490("Generic", 1, 0, 0, "std::optional<CLWifiService_Type::Channels> CLIWifiLocation5GHzChannelSelector::recommendedChannels()", "%s\n", v7);
        if (v8 != buf)
          free(v8);
      }
    }
    else
    {
      v9 = v22;
      if (v22 >= v23)
      {
        v11 = __p;
        v12 = v22 - __p;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 62)
          sub_100259694();
        v14 = (char *)v23 - (char *)__p;
        if (((char *)v23 - (char *)__p) >> 1 > v13)
          v13 = v14 >> 1;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
          v15 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
        {
          v16 = (char *)sub_100260634((uint64_t)&v23, v15);
          v11 = __p;
          v9 = v22;
        }
        else
        {
          v16 = 0;
        }
        v17 = (int *)&v16[4 * v12];
        *v17 = v5;
        v10 = v17 + 1;
        while (v9 != v11)
        {
          v18 = *--v9;
          *--v17 = v18;
        }
        __p = v17;
        v23 = (int *)&v16[4 * v15];
        if (v11)
          operator delete(v11);
      }
      else
      {
        *v22 = v5;
        v10 = v22 + 1;
      }
      v22 = v10;
    }
    ++v3;
  }
  while (v3 != v4);
  v19 = v22;
  if (__p == v22)
  {
LABEL_36:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
    if (!v19)
      goto LABEL_38;
    goto LABEL_37;
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  sub_10027205C((_QWORD *)a2, __p, (uint64_t)v22, v22 - __p);
  *(_BYTE *)(a2 + 24) = 1;
  v19 = __p;
  if (__p)
LABEL_37:
    operator delete(v19);
LABEL_38:
  if (v26)
  {
    if (v24)
    {
      v25 = (int *)v24;
      operator delete(v24);
    }
  }
}

void sub_100FE2F38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20)
{
  if (__p)
    operator delete(__p);
  if (a20)
  {
    if (a17)
      operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100FE2F80()
{
  return 0;
}

uint64_t sub_100FE2F88@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v2;

  v2 = sub_10132F040();
  return sub_10132F070(v2, 12, a1);
}

void sub_100FE2FB0(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  std::string *v4;
  uint64_t v5;
  std::string *p_buf;
  std::string *v7;
  std::string *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  char v14;
  std::string buf;
  int v16;
  std::string *v17;
  std::string v18;
  void *__p;
  void *v20;

  (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 40))(&v12, *(_QWORD *)(a1 + 8), 2);
  if (v14)
  {
    v2 = v12;
    if (v12 == v13)
      goto LABEL_18;
    sub_100FFEBF8(&v18, &v12);
    sub_100FE32C4(a1 + 24, (uint64_t)&v18);
    if (__p)
    {
      v20 = __p;
      operator delete(__p);
    }
    sub_100008848((uint64_t)&v18, (_QWORD *)v18.__r_.__value_.__l.__size_);
    v9 = 0;
    v10 = 0;
    v11 = 0;
    sub_10027205C(&v9, *(const void **)(a1 + 48), *(_QWORD *)(a1 + 56), (uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 2);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021983E0);
    v3 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
    {
      sub_100CF250C((unsigned int **)&v9, &v18);
      v4 = (v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &v18
         : (std::string *)v18.__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "@WifiChannel, time-based 5GHz, query latest ALS channels %{public}s", (uint8_t *)&buf, 0xCu);
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v18.__r_.__value_.__l.__data_);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&v18, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021983E0);
      v5 = qword_1022A0058;
      sub_100CF250C((unsigned int **)&v9, &buf);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_buf = &buf;
      else
        p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      v16 = 136446210;
      v17 = p_buf;
      _os_log_send_and_compose_impl(2, 0, &v18, 1628, &_mh_execute_header, v5, 0, "@WifiChannel, time-based 5GHz, query latest ALS channels %{public}s", &v16, 12);
      v8 = v7;
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      sub_100512490("Generic", 1, 0, 2, "void CLWifiLocation5GHzChannelTimeBasedSelector::updateAlsQueryTopChannels()", "%s\n", (const char *)v8);
      if (v8 != &v18)
        free(v8);
    }
    if (v9)
    {
      v10 = v9;
      operator delete(v9);
    }
    if (v14)
    {
      v2 = v12;
LABEL_18:
      if (v2)
      {
        v13 = v2;
        operator delete(v2);
      }
    }
  }
}

void sub_100FE3260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (__p)
    operator delete(__p);
  if (a18)
  {
    if (a15)
      operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100FE32C4(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 48))
  {
    sub_10002E40C(a1, (_QWORD *)a2);
    sub_100006898(a1 + 24, (__n128 *)(a2 + 24));
  }
  else
  {
    sub_100FE41A0((_QWORD *)a1, a2);
    *(_BYTE *)(a1 + 48) = 1;
  }
  return a1;
}

uint64_t sub_100FE3320(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  sub_100008848(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t sub_100FE335C()
{
  return 1;
}

void sub_100FE3364(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  unint64_t v4;
  NSObject *v5;
  void *v6;
  char *v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  void *__p;
  char *v15;
  char v16;
  void *v17;
  void *__dst;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint8_t buf[4];
  unint64_t v23;

  if (*(_BYTE *)(a1 + 72))
  {
    v17 = 0;
    __dst = 0;
    v19 = 0;
    sub_10027205C(&v17, *(const void **)(a1 + 48), *(_QWORD *)(a1 + 56), (uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 2);
    v3 = sub_10132F040();
    sub_10132F070(v3, 12, (uint64_t)&__p);
    if (v16)
    {
      v4 = (v15 - (_BYTE *)__p) >> 2;
      if (v4 > ((_BYTE *)__dst - (_BYTE *)v17) >> 2)
      {
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021983E0);
        v5 = qword_1022A0058;
        if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67240192;
          LODWORD(v23) = v4 - ((unint64_t)((_BYTE *)__dst - (_BYTE *)v17) >> 2);
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "@WifiChannel, time-based 5GHz, fill the extra %{public}d channel(s) from preset", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021983E0);
          v20 = 67240192;
          LODWORD(v21) = v4 - ((unint64_t)((_BYTE *)__dst - (_BYTE *)v17) >> 2);
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "@WifiChannel, time-based 5GHz, fill the extra %{public}d channel(s) from preset", &v20, 8);
          v12 = (uint8_t *)v11;
          sub_100512490("Generic", 1, 0, 2, "virtual std::optional<CLWifiService_Type::Channels> CLWifiLocation5GHzChannelTimeBasedSelector::recommendedChannelsImpl()", "%s\n", v11);
          if (v12 != buf)
            free(v12);
        }
        sub_100262014((uint64_t)&v17, (uint64_t)__dst, (char *)__p, v15, (v15 - (_BYTE *)__p) >> 2);
      }
    }
    else
    {
      v4 = 10;
    }
    v6 = v17;
    v7 = (char *)__dst;
    if (v4 < ((_BYTE *)__dst - (_BYTE *)v17) >> 2)
    {
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021983E0);
      v8 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349056;
        v23 = v4;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "@WifiChannel, time-based 5GHz, trim channel recommendation down to %{public}lu candidates", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021983E0);
        v20 = 134349056;
        v21 = v4;
        LODWORD(v13) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "@WifiChannel, time-based 5GHz, trim channel recommendation down to %{public}lu candidates", &v20, v13);
        v10 = (uint8_t *)v9;
        sub_100512490("Generic", 1, 0, 2, "virtual std::optional<CLWifiService_Type::Channels> CLWifiLocation5GHzChannelTimeBasedSelector::recommendedChannelsImpl()", "%s\n", v9);
        if (v10 != buf)
          free(v10);
      }
      v6 = v17;
      v7 = (char *)v17 + 4 * v4;
      if (v7 != __dst)
        __dst = (char *)v17 + 4 * v4;
    }
    *(_QWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v19;
    __dst = 0;
    v19 = 0;
    v17 = 0;
    *(_BYTE *)(a2 + 24) = 1;
    if (v16 && __p)
    {
      v15 = (char *)__p;
      operator delete(__p);
      if (v17)
      {
        __dst = v17;
        operator delete(v17);
      }
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
  }
}

void sub_100FE376C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, void *a16, uint64_t a17)
{
  if (a15 && __p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_100FE37BC(uint64_t a1)
{
  void *v2;

  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(void **)(a1 + 24);
    if (v2)
    {
      *(_QWORD *)(a1 + 32) = v2;
      operator delete(v2);
    }
    sub_100008848(a1, *(_QWORD **)(a1 + 8));
    *(_BYTE *)(a1 + 48) = 0;
  }
}

uint64_t sub_100FE3800(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  *(_QWORD *)result = off_102198348;
  *(_QWORD *)(result + 8) = off_1021982E8;
  v3 = *a2;
  v2 = a2[1];
  *(_QWORD *)(result + 16) = off_102198318;
  *(_QWORD *)(result + 24) = v3;
  *(_QWORD *)(result + 32) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_BYTE *)(result + 40) = 0;
  *(_BYTE *)(result + 88) = 0;
  *(_QWORD *)(result + 112) = 0;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)(result + 96) = result + 104;
  return result;
}

void sub_100FE385C(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  NSObject *v5;
  std::string *p_p;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t *v9;
  char v10;
  NSObject *v11;
  std::string *v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t v15;
  std::string *p_buf;
  std::string *v17;
  std::string *v18;
  uint64_t v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  void *v23;
  _BYTE *v24;
  char v25;
  char v26;
  std::string buf;
  int v28;
  std::string *v29;
  std::string __p;
  uint64_t *v31;

  v26 = a2;
  if (a2 != 12)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 32) = 0;
    return;
  }
  sub_100FE2C00(a1 + 16, (uint64_t)&v23);
  if (v25)
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021983E0);
    v5 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
    {
      if (!v25)
        sub_10028DF3C();
      sub_100CF250C((unsigned int **)&v23, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "@WifiChannel, apply, time-based 5GHz channel selector overrides, %{public}s", (uint8_t *)&buf, 0xCu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021983E0);
      if (!v25)
        sub_10028DF3C();
      v15 = qword_1022A0058;
      sub_100CF250C((unsigned int **)&v23, &buf);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_buf = &buf;
      else
        p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      v28 = 136446210;
      v29 = p_buf;
      _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, v15, 1, "@WifiChannel, apply, time-based 5GHz channel selector overrides, %{public}s", &v28, 12);
      v18 = v17;
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      sub_100512490("Generic", 1, 0, 2, "virtual std::optional<CLWifiLocationChannelSelectionService_Type::ChannelRecommendation> CLWifiLocation5GHzChannelSelectionService::recommendedChannels(CLWifiService_Type::ScanType)", "%s\n", (const char *)v18);
      if (v18 != &__p)
        free(v18);
    }
    if (!v25)
      sub_10028DF3C();
    __p.__r_.__value_.__s.__data_[0] = 1;
    v31 = 0;
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
    sub_10027205C(&__p.__r_.__value_.__l.__size_, v23, (uint64_t)v24, (v24 - (_BYTE *)v23) >> 2);
    v7 = (uint64_t **)(a1 + 96);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26;
    v8 = sub_100FE41FC(v7, &v26, (uint64_t)&unk_101B9EB60, &buf.__r_.__value_.__l.__data_);
    *((_BYTE *)v8 + 40) = __p.__r_.__value_.__s.__data_[0];
    v9 = v8[6];
    if (v9)
    {
      v8[7] = v9;
      operator delete(v9);
      v8[6] = 0;
      v8[7] = 0;
      v8[8] = 0;
    }
LABEL_35:
    *((_OWORD *)v8 + 3) = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
    v8[8] = v31;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26;
    v14 = sub_100FE41FC(v7, &v26, (uint64_t)&unk_101B9EB60, &__p.__r_.__value_.__l.__data_);
    *(_BYTE *)a3 = *((_BYTE *)v14 + 40);
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 8) = 0;
    sub_10027205C((_QWORD *)(a3 + 8), v14[6], (uint64_t)v14[7], ((char *)v14[7] - (char *)v14[6]) >> 2);
    v10 = 1;
    goto LABEL_36;
  }
  sub_100FE2C00(a1 + 8, (uint64_t)&__p);
  sub_1002A1AE8((uint64_t)&v23, (__n128 *)&__p);
  if ((_BYTE)v31 && __p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v10 = v25;
  if (v25)
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021983E0);
    v11 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
    {
      if (!v25)
        sub_10028DF3C();
      sub_100CF250C((unsigned int **)&v23, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = &__p;
      else
        v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "@WifiChannel, apply, default 5GHz channel selector overrides, %{public}s", (uint8_t *)&buf, 0xCu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021983E0);
      if (!v25)
        sub_10028DF3C();
      v19 = qword_1022A0058;
      sub_100CF250C((unsigned int **)&v23, &buf);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = &buf;
      else
        v20 = (std::string *)buf.__r_.__value_.__r.__words[0];
      v28 = 136446210;
      v29 = v20;
      _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, v19, 1, "@WifiChannel, apply, default 5GHz channel selector overrides, %{public}s", &v28, 12);
      v22 = v21;
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      sub_100512490("Generic", 1, 0, 2, "virtual std::optional<CLWifiLocationChannelSelectionService_Type::ChannelRecommendation> CLWifiLocation5GHzChannelSelectionService::recommendedChannels(CLWifiService_Type::ScanType)", "%s\n", (const char *)v22);
      if (v22 != &__p)
        free(v22);
    }
    if (!v25)
      sub_10028DF3C();
    __p.__r_.__value_.__s.__data_[0] = 0;
    v31 = 0;
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
    sub_10027205C(&__p.__r_.__value_.__l.__size_, v23, (uint64_t)v24, (v24 - (_BYTE *)v23) >> 2);
    v7 = (uint64_t **)(a1 + 96);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26;
    v8 = sub_100FE41FC(v7, &v26, (uint64_t)&unk_101B9EB60, &buf.__r_.__value_.__l.__data_);
    *((_BYTE *)v8 + 40) = __p.__r_.__value_.__s.__data_[0];
    v13 = v8[6];
    if (v13)
    {
      v8[7] = v13;
      operator delete(v13);
      v8[6] = 0;
      v8[7] = 0;
      v8[8] = 0;
    }
    goto LABEL_35;
  }
  *(_BYTE *)a3 = 0;
LABEL_36:
  *(_BYTE *)(a3 + 32) = v10;
  if (v25)
  {
    if (v23)
    {
      v24 = v23;
      operator delete(v23);
    }
  }
}

void sub_100FE3E8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  if (a15)
  {
    if (__p)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **sub_100FE3F08@<X0>(uint64_t **result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  BOOL v8;
  uint64_t **v9;
  char v10;
  uint64_t **v11;
  char v12;
  char *v13;

  v12 = a2;
  v5 = (uint64_t *)(result + 13);
  v4 = result[13];
  if (!v4)
    goto LABEL_11;
  result += 12;
  v6 = v5;
  do
  {
    v7 = *((char *)v4 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t **)v4;
    else
      v9 = (uint64_t **)(v4 + 1);
    if (!v8)
      v6 = v4;
    v4 = *v9;
  }
  while (*v9);
  if (v6 != v5 && *((char *)v6 + 32) <= a2)
  {
    v13 = &v12;
    v11 = sub_100FE41FC(result, &v12, (uint64_t)&unk_101B9EB60, &v13);
    *(_BYTE *)a3 = *((_BYTE *)v11 + 40);
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 8) = 0;
    result = (uint64_t **)sub_10027205C((_QWORD *)(a3 + 8), v11[6], (uint64_t)v11[7], ((char *)v11[7] - (char *)v11[6]) >> 2);
    v10 = 1;
  }
  else
  {
LABEL_11:
    v10 = 0;
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 32) = v10;
  return result;
}

void sub_100FE3FD0(uint64_t a1)
{
  sub_100FE2FB0(a1 + 16);
}

_QWORD *sub_100FE3FD8(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_102198318;
  v2 = (uint64_t)(a1 + 1);
  sub_100FE40BC((uint64_t)(a1 + 3));
  sub_100261F44(v2);
  return a1;
}

void sub_100FE4018(_QWORD *a1)
{
  uint64_t v1;

  *a1 = off_102198318;
  v1 = (uint64_t)(a1 + 1);
  sub_100FE40BC((uint64_t)(a1 + 3));
  sub_100261F44(v1);
  operator delete();
}

void sub_100FE406C(uint64_t a1)
{
  sub_100FE4100(a1);
  operator delete();
}

void sub_100FE4090(id a1)
{
  qword_1022A0058 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

uint64_t sub_100FE40BC(uint64_t a1)
{
  void *v2;

  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(void **)(a1 + 24);
    if (v2)
    {
      *(_QWORD *)(a1 + 32) = v2;
      operator delete(v2);
    }
    sub_100008848(a1, *(_QWORD **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_100FE4100(uint64_t a1)
{
  *(_QWORD *)a1 = off_102198348;
  sub_100FE4150(a1 + 96, *(_QWORD **)(a1 + 104));
  *(_QWORD *)(a1 + 16) = off_102198318;
  sub_100FE40BC(a1 + 40);
  sub_100261F44(a1 + 24);
  return a1;
}

void sub_100FE4150(uint64_t a1, _QWORD *a2)
{
  void *v4;

  if (a2)
  {
    sub_100FE4150(a1, *a2);
    sub_100FE4150(a1, a2[1]);
    v4 = (void *)a2[6];
    if (v4)
    {
      a2[7] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

__n128 sub_100FE41A0(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  __n128 result;

  *a1 = *(_QWORD *)a2;
  v2 = (_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  a1[1] = v3;
  v4 = a1 + 1;
  v5 = *(_QWORD *)(a2 + 16);
  a1[2] = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    *(_QWORD *)a2 = v2;
    *v2 = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  else
  {
    *a1 = v4;
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  result = *(__n128 *)(a2 + 24);
  *(__n128 *)(a1 + 3) = result;
  a1[5] = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t **sub_100FE41FC(uint64_t **a1, char *a2, uint64_t a3, _BYTE **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _BYTE *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((char *)v6 + 32);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x48uLL);
    v11[32] = **a4;
    v11[40] = 0;
    *((_QWORD *)v11 + 7) = 0;
    *((_QWORD *)v11 + 8) = 0;
    *((_QWORD *)v11 + 6) = 0;
    sub_1000145B0(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void sub_100FE42C4()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_100FE4360(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_100FE4378()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_100FE4404(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

BOOL sub_100FE45E4(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  int v11;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int *v16;

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      v4 = 0;
      v5 = 0;
      v6 = 0;
      while (1)
      {
        v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        v8 = v7 + 1;
        if (v7 == -1 || v8 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
        v6 |= (unint64_t)(v9 & 0x7F) << v4;
        if ((v9 & 0x80) == 0)
          goto LABEL_11;
        v4 += 7;
        if (v5++ >= 9)
        {
          v6 = 0;
          v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        v6 = 0;
LABEL_13:
      if (v11 || (v6 & 7) == 4)
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      if ((v6 >> 3) == 2)
        break;
      if ((v6 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        v13 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v13 <= 0xFFFFFFFFFFFFFFF7 && v13 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v14 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v13);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v13 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v14 = 0;
        }
        v16 = &OBJC_IVAR___CLStreamedLocationInternal__rawCoordinateLatitude;
LABEL_31:
        *(_QWORD *)(a1 + *v16) = v14;
        goto LABEL_32;
      }
      if ((PBReaderSkipValueWithTag(a2) & 1) == 0)
        return 0;
LABEL_32:
      if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    *(_BYTE *)(a1 + 24) |= 2u;
    v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
    if (v15 <= 0xFFFFFFFFFFFFFFF7 && v15 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
    {
      v14 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 8;
    }
    else
    {
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
      v14 = 0;
    }
    v16 = &OBJC_IVAR___CLStreamedLocationInternal__rawCoordinateLongitude;
    goto LABEL_31;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_100FE4BC8(uint64_t a1)
{
  BOOL *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  NSObject *v7;
  _BOOL4 v8;
  _BOOL4 v10;
  const char *v11;
  char *v12;
  int v13;
  const char *v14;
  __int16 v15;
  _BOOL4 v16;
  _BYTE buf[1638];

  *(_BYTE *)(a1 + 64) = 0;
  v2 = (BOOL *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 0;
  v3 = sub_100127B9C();
  sub_100081C10(v3, buf);
  sub_1001E4874(*(uint64_t *)buf, "MotionLoggerLogRunningPower", v2);
  v4 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v5 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (qword_10229FED0 != -1)
    dispatch_once(&qword_10229FED0, &stru_102198400);
  v7 = qword_10229FED8;
  if (os_log_type_enabled((os_log_t)qword_10229FED8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *v2;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "MotionLoggerLogRunningPower";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Init: %{public}s=%d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FED0 != -1)
      dispatch_once(&qword_10229FED0, &stru_102198400);
    v10 = *v2;
    v13 = 136446466;
    v14 = "MotionLoggerLogRunningPower";
    v15 = 1024;
    v16 = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FED8, 0, "Init: %{public}s=%d", &v13, 18);
    v12 = (char *)v11;
    sub_100512490("Generic", 1, 0, 2, "CLPowerEstimator::CLPowerEstimator()", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  return a1;
}

void sub_100FE4E18(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1005CBF30(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100FE4E48@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, unint64_t a4@<D1>, unint64_t a5@<D2>)
{
  uint64_t v7;
  double v8;
  double v9;
  float v10;
  float v11;
  double v12;
  double v14;
  float v15;
  float v16;
  double v17;
  double v18;
  int v19;
  int v20;
  uint64_t v21;
  double v22;
  unsigned int v23;
  BOOL v24;
  _BOOL4 v25;
  int v26;
  char v27;
  float v28;
  float v29;
  float v30;
  _BOOL4 v31;
  uint64_t v32;
  double v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  double v37;
  double v38;
  double v39;
  double v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  double v45;
  NSObject *v46;
  int v47;
  char *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  int v53;
  int v54;
  double v55;
  int v56;
  double v57;
  int8x16_t v58;
  double v59;
  _QWORD v60[7];
  _QWORD v61[7];
  char v62[28];
  float v63;
  char v64[28];
  float v65;
  _QWORD v66[4];
  double v67;
  double v68;
  double v69;
  double v70;
  int8x16_t v71;
  double v72;
  int v73;
  double v74;
  __int128 buf;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;

  v67 = 0.0;
  v68 = 0.0;
  *(_DWORD *)(a3 + 124) = 0;
  *(_WORD *)(a3 + 128) = 0;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_BYTE *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_BYTE *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_BYTE *)(a3 + 120) = 0;
  *(_DWORD *)(a3 + 132) = 1000;
  if (*(_QWORD *)(result + 56) != 1)
  {
    v7 = result;
    v56 = *(_DWORD *)(a2 + 848);
    v9 = *(double *)(a2 + 448);
    v8 = *(double *)(a2 + 456);
    v10 = *(double *)(a2 + 840);
    v11 = v10 * 2.2369;
    v12 = v11;
    LODWORD(a4) = *(_DWORD *)(a2 + 824);
    LODWORD(a5) = *(_DWORD *)(a2 + 828);
    v55 = (double)a4 - (double)a5;
    if (v9 > 2.23693991 || v9 <= 0.140000001)
      v14 = 0.0;
    else
      v14 = 2.23693991 / v9;
    v15 = v14;
    sub_100D8B278(1, v11, v15);
    v17 = v16;
    sub_100D8B250(a2, (uint64_t)v64);
    sub_10047886C(a2, (uint64_t)v62);
    v18 = *(double *)(a2 + 128);
    v19 = *(_DWORD *)(a2 + 832);
    v20 = *(unsigned __int8 *)(a2 + 528);
    v21 = *(_QWORD *)(a2 + 344);
    *(double *)v66 = v9;
    *(double *)&v66[1] = v8;
    *(double *)&v66[2] = v14;
    *(double *)&v66[3] = v12;
    v22 = *(float *)(a2 + 1372);
    v69 = v17;
    v70 = v22;
    v58 = (int8x16_t)vcvtq_f64_f32(*(float32x2_t *)(a2 + 1360));
    v71 = vextq_s8(v58, v58, 8uLL);
    v59 = v18;
    v72 = v18;
    v23 = v20 & 0xFFFFFFFD;
    v24 = (v20 & 0xFFFFFFFD) != 1;
    v25 = sub_100D7B9E0(v21);
    v57 = v8;
    v26 = sub_100D7B8A8(v8, v9, *(double *)v58.i64, v17);
    v27 = v26;
    if (v26)
    {
      v68 = v65;
      v28 = v14;
      v29 = sub_100D8B260(v28);
    }
    else
    {
      v68 = v63;
      v30 = v14;
      v29 = sub_100478878(v30);
    }
    v67 = v29;
    v31 = sub_10009DDEC(v9 * 0.7, *(double *)v58.i64);
    sub_100FE53EC(v7, v59);
    v32 = *(_QWORD *)(v7 + 40);
    v33 = 0.0;
    if (v32)
    {
      v34 = v32 + *(_QWORD *)(v7 + 32) - 1;
      v35 = *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8 * (v34 / 0x49));
      v36 = v34 % 0x49;
      v37 = v59 - *(double *)(v35 + 56 * v36);
      v38 = v8;
      if (v37 > 0.0)
        v33 = (v55 / 100.0 - *(double *)(v35 + 56 * v36 + 16)) / v37;
    }
    else
    {
      v38 = v8;
    }
    v39 = sub_100D7B970(v14, v12);
    v40 = sub_100D7B970(v14, v33 * 2.23693991);
    *(double *)v61 = v59;
    *(double *)&v61[1] = v14;
    *(double *)&v61[2] = v55 / 100.0;
    *(double *)&v61[3] = v33;
    *(double *)&v61[4] = v39;
    *(double *)&v61[5] = v40;
    *(double *)&v61[6] = v38;
    sub_100FE5594(v7, (uint64_t)v61, v19);
    if (v25)
    {
      sub_10131157C(&buf, v66, *(_DWORD *)(v7 + 48) != 0);
      v41 = v82;
      *(_OWORD *)(a3 + 96) = v81;
      *(_OWORD *)(a3 + 112) = v41;
      *(_QWORD *)(a3 + 128) = v83;
      v42 = v78;
      *(_OWORD *)(a3 + 32) = v77;
      *(_OWORD *)(a3 + 48) = v42;
      v43 = v80;
      *(_OWORD *)(a3 + 64) = v79;
      *(_OWORD *)(a3 + 80) = v43;
      v44 = v76;
      *(_OWORD *)a3 = buf;
      *(_OWORD *)(a3 + 16) = v44;
      v45 = *(double *)(a3 + 104);
      *(_BYTE *)(a3 + 16) = 1;
      if (v45 <= 35.0)
      {
        if (v23 == 1)
        {
          v47 = 0;
          *(_BYTE *)(a3 + 16) = 0;
        }
        else
        {
          v47 = 1;
        }
      }
      else
      {
        *(_BYTE *)(a3 + 16) = 0;
        if (qword_10229FED0 != -1)
          dispatch_once(&qword_10229FED0, &stru_102198400);
        v46 = qword_10229FED8;
        if (os_log_type_enabled((os_log_t)qword_10229FED8, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 134217984;
          *(double *)((char *)&buf + 4) = v45;
          _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "Rejected RunningPower due to invalid grade=%.1f ", (uint8_t *)&buf, 0xCu);
        }
        v47 = 0;
        if (sub_1001BFF7C(115, 0))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_10229FED0 != -1)
            dispatch_once(&qword_10229FED0, &stru_102198400);
          v73 = 134217984;
          v74 = v45;
          v48 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FED8, 16, "Rejected RunningPower due to invalid grade=%.1f ", COERCE_DOUBLE(&v73));
          sub_100512490("Generic", 1, 0, 0, "CLPower::ModelOutput CLPowerEstimator::calculatePower(const CLNatalieModelInput &)", "%s\n", v48);
          if (v48 != (char *)&buf)
            free(v48);
          v47 = 0;
          v38 = v57;
        }
      }
    }
    else
    {
      *(_BYTE *)(a3 + 16) = 0;
      sub_1013118D0((uint64_t)v66, (uint64_t)&buf);
      v49 = v82;
      *(_OWORD *)(a3 + 96) = v81;
      *(_OWORD *)(a3 + 112) = v49;
      *(_QWORD *)(a3 + 128) = v83;
      v50 = v78;
      *(_OWORD *)(a3 + 32) = v77;
      *(_OWORD *)(a3 + 48) = v50;
      v51 = v80;
      *(_OWORD *)(a3 + 64) = v79;
      *(_OWORD *)(a3 + 80) = v51;
      v52 = v76;
      *(_OWORD *)a3 = buf;
      *(_OWORD *)(a3 + 16) = v52;
      v47 = *(unsigned __int8 *)(a3 + 16);
    }
    *(double *)v60 = v59;
    *(double *)&v60[1] = v14;
    *(double *)&v60[2] = v55 / 100.0;
    *(double *)&v60[3] = v33;
    *(double *)&v60[4] = v39;
    *(double *)&v60[5] = v40;
    *(double *)&v60[6] = v38;
    sub_100FE564C(v7, (uint64_t)v60, v31 && v25, v47 != 0);
    v53 = *(_DWORD *)(v7 + 48);
    *(_BYTE *)(a3 + 120) = v53 != 0;
    *(_DWORD *)(a3 + 124) = v53;
    *(_BYTE *)(a3 + 40) = *(_BYTE *)(a2 + 1410);
    v54 = *(_DWORD *)(a2 + 152);
    *(_DWORD *)(a3 + 56) = *(_DWORD *)(a2 + 288);
    *(_DWORD *)(a3 + 60) = v54;
    *(_BYTE *)(a3 + 64) = v25;
    *(_BYTE *)(a3 + 129) = v27;
    *(_BYTE *)(a3 + 128) = v24;
    if (v47)
      result = sub_100FE56D4((double *)a3);
    else
      result = 0;
    *(_BYTE *)(a3 + 16) = result;
    *(_DWORD *)(a3 + 132) = v56;
  }
  return result;
}

unint64_t sub_100FE53EC(uint64_t a1, double a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  char *v20;
  unint64_t result;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = (_QWORD *)(v4 + 8 * (v3 / 0x49));
  if (v5 == v4)
  {
    v7 = 0;
    v8 = (_QWORD *)(a1 + 40);
  }
  else
  {
    v7 = *(_QWORD *)(v4 + 8 * (v3 / 0x49)) + 56 * (v3 % 0x49);
    v8 = (_QWORD *)(a1 + 40);
    v9 = *(_QWORD *)(v4 + 8 * ((*(_QWORD *)(a1 + 40) + v3) / 0x49)) + 56 * ((*(_QWORD *)(a1 + 40) + v3) % 0x49);
    if (v7 != v9)
    {
      while (a2 - *(double *)v7 <= 20.0)
      {
        v7 += 56;
        if (v7 - *v6 == 4088)
        {
          v10 = v6[1];
          ++v6;
          v7 = v10;
        }
        if (v7 == v9)
          goto LABEL_17;
      }
    }
    if (v7 == v9)
    {
LABEL_17:
      v7 = *(_QWORD *)(v4 + 8 * ((*(_QWORD *)(a1 + 40) + v3) / 0x49)) + 56 * ((*(_QWORD *)(a1 + 40) + v3) % 0x49);
    }
    else
    {
      v11 = v7;
      v12 = v6;
      while (1)
      {
        v11 += 56;
        if (v11 - *v12 == 4088)
        {
          v13 = v12[1];
          ++v12;
          v11 = v13;
        }
        if (v11 == v9)
          break;
        if (a2 - *(double *)v11 <= 20.0)
        {
          v14 = *(_OWORD *)v11;
          v15 = *(_OWORD *)(v11 + 16);
          v16 = *(_OWORD *)(v11 + 32);
          *(_QWORD *)(v7 + 48) = *(_QWORD *)(v11 + 48);
          *(_OWORD *)(v7 + 16) = v15;
          *(_OWORD *)(v7 + 32) = v16;
          *(_OWORD *)v7 = v14;
          v7 += 56;
          if (v7 - *v6 == 4088)
          {
            v17 = v6[1];
            ++v6;
            v7 = v17;
          }
        }
      }
      v3 = *(_QWORD *)(a1 + 32);
      v4 = *(_QWORD *)(a1 + 8);
      v5 = *(_QWORD *)(a1 + 16);
    }
  }
  v18 = v3 + *v8;
  v19 = (_QWORD *)(v4 + 8 * (v18 / 0x49));
  if (v5 == v4)
    v20 = 0;
  else
    v20 = (char *)(*v19 + 56 * (v18 % 0x49));
  result = sub_100FE5B84((_QWORD *)a1, v6, (char *)v7, v19, v20);
  if (!*(_QWORD *)(a1 + 40))
    *(_DWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t sub_100FE5594(uint64_t a1, uint64_t a2, int a3)
{
  __int128 v6;
  uint64_t result;
  double v8;
  int v9;
  BOOL v10;
  int v11;
  _OWORD v12[3];
  uint64_t v13;

  v6 = *(_OWORD *)(a2 + 16);
  v12[0] = *(_OWORD *)a2;
  v12[1] = v6;
  v12[2] = *(_OWORD *)(a2 + 32);
  v13 = *(_QWORD *)(a2 + 48);
  result = sub_100FE5E2C(a1, (double *)v12, a3, (_QWORD *)a1);
  if (a3 == 1 || (v8 = *(double *)(a2 + 32), v8 < 2.0) && *(double *)(a2 + 40) < 2.0)
  {
    *(_DWORD *)(a1 + 48) = 0;
    return result;
  }
  v9 = *(_DWORD *)(a1 + 48);
  v10 = v8 < 0.0 || v8 > 8.0;
  if (v10 || ((result ^ 1) & 1) != 0)
  {
    if (!v9)
      return result;
    goto LABEL_13;
  }
  if (v9)
  {
LABEL_13:
    v11 = v9 - 1;
    goto LABEL_14;
  }
  v11 = 10;
LABEL_14:
  *(_DWORD *)(a1 + 48) = v11;
  return result;
}

uint64_t sub_100FE564C(uint64_t result, uint64_t a2, int a3, char a4)
{
  _QWORD *v4;
  unint64_t v7;

  v4 = (_QWORD *)result;
  if (*(double *)(a2 + 32) >= 35.0 || a3 == 0)
  {
    if ((a4 & 1) == 0 && *(_DWORD *)(result + 48) == 10)
      *(_DWORD *)(result + 48) = 0;
  }
  else
  {
    v7 = *(_QWORD *)(result + 40);
    if (v7 >= 4)
    {
      ++*(_QWORD *)(result + 32);
      *(_QWORD *)(result + 40) = v7 - 1;
      sub_100AAFEC0(result, 1);
    }
    return sub_100FE64A8(v4, (__int128 *)a2);
  }
  return result;
}

BOOL sub_100FE56D4(double *a1)
{
  double v2;
  NSObject *v3;
  double v4;
  _BOOL8 result;
  uint64_t v6;
  double v7;
  NSObject *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint8_t *v13;
  NSObject *v14;
  double v15;
  double v16;
  _BOOL4 v17;
  double v18;
  double v19;
  _BYTE v20[24];
  double v21;
  uint8_t buf[4];
  double v23;
  __int16 v24;
  double v25;
  __int16 v26;
  double v27;

  v2 = a1[3];
  if (v2 >= 30.0)
  {
    v7 = *a1 / v2;
    if (v7 >= 0.66)
    {
      if (v7 <= 15.37)
        return 1;
      if (qword_10229FED0 != -1)
        dispatch_once(&qword_10229FED0, &stru_102198400);
      v14 = qword_10229FED8;
      if (os_log_type_enabled((os_log_t)qword_10229FED8, OS_LOG_TYPE_ERROR))
      {
        v15 = a1[3];
        v16 = *a1;
        *(_DWORD *)buf = 134218496;
        v23 = v15;
        v24 = 2050;
        v25 = v16;
        v26 = 2048;
        v27 = v15 * 0.66;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Rejected RunningPower due to range check, unreasonably high Watts: weight=%.1f,powerWattage=%{public}.2f,maximum allowed powerWattage=%.2f", buf, 0x20u);
      }
      v17 = sub_1001BFF7C(115, 0);
      result = 0;
      if (v17)
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FED0 != -1)
          dispatch_once(&qword_10229FED0, &stru_102198400);
        v18 = a1[3];
        v19 = *a1;
        *(_DWORD *)v20 = 134218496;
        *(double *)&v20[4] = v18;
        *(_WORD *)&v20[12] = 2050;
        *(double *)&v20[14] = v19;
        *(_WORD *)&v20[22] = 2048;
        v21 = v18 * 0.66;
        v13 = (uint8_t *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FED8, 16, "Rejected RunningPower due to range check, unreasonably high Watts: weight=%.1f,powerWattage=%{public}.2f,maximum allowed powerWattage=%.2f", v20, 32);
        sub_100512490("Generic", 1, 0, 0, "static BOOL CLPowerEstimator::rangeCheck(const CLPower::ModelOutput &)", "%s\n");
        goto LABEL_20;
      }
    }
    else
    {
      if (qword_10229FED0 != -1)
        dispatch_once(&qword_10229FED0, &stru_102198400);
      v8 = qword_10229FED8;
      if (os_log_type_enabled((os_log_t)qword_10229FED8, OS_LOG_TYPE_INFO))
      {
        v9 = a1[3];
        v10 = *a1;
        *(_DWORD *)buf = 134218496;
        v23 = v9;
        v24 = 2050;
        v25 = v10;
        v26 = 2048;
        v27 = v9 * 0.66;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Rejected RunningPower due to range check, low Watts: weight=%.1f,powerWattage=%{public}.2f,minimum required powerWattage=%.2f", buf, 0x20u);
      }
      result = sub_1001BFF7C(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FED0 != -1)
          dispatch_once(&qword_10229FED0, &stru_102198400);
        v11 = a1[3];
        v12 = *a1;
        *(_DWORD *)v20 = 134218496;
        *(double *)&v20[4] = v11;
        *(_WORD *)&v20[12] = 2050;
        *(double *)&v20[14] = v12;
        *(_WORD *)&v20[22] = 2048;
        v6 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FED8, 1, "Rejected RunningPower due to range check, low Watts: weight=%.1f,powerWattage=%{public}.2f,minimum required powerWattage=%.2f", v20, 32, *(_OWORD *)v20, *(_QWORD *)&v20[16], v11 * 0.66);
        goto LABEL_19;
      }
    }
  }
  else
  {
    if (qword_10229FED0 != -1)
      dispatch_once(&qword_10229FED0, &stru_102198400);
    v3 = qword_10229FED8;
    if (os_log_type_enabled((os_log_t)qword_10229FED8, OS_LOG_TYPE_INFO))
    {
      v4 = a1[3];
      *(_DWORD *)buf = 134217984;
      v23 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Rejected RunningPower due to range check, low weight: weight=%.1f ", buf, 0xCu);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FED0 != -1)
        dispatch_once(&qword_10229FED0, &stru_102198400);
      v6 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FED8, 1, "Rejected RunningPower due to range check, low weight: weight=%.1f ");
LABEL_19:
      v13 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "static BOOL CLPowerEstimator::rangeCheck(const CLPower::ModelOutput &)", "%s\n");
LABEL_20:
      if (v13 != buf)
        free(v13);
      return 0;
    }
  }
  return result;
}

unint64_t sub_100FE5B84(_QWORD *a1, _QWORD *a2, char *a3, _QWORD *a4, char *a5)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char **v9;
  char *v10;
  unint64_t v11;
  __n128 v12;
  __n128 v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE **v16;
  _BYTE *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  __n128 v24[2];

  if (a5 == a3)
    v6 = 0;
  else
    v6 = 73 * (a4 - a2)
       + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&a5[-*a4] >> 3)
       - 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&a3[-*a2] >> 3);
  v7 = a1[4];
  v8 = a1[1];
  v9 = (char **)(v8 + 8 * (v7 / 0x49));
  if (a1[2] == v8)
    v10 = 0;
  else
    v10 = &(*v9)[56 * (v7 % 0x49)];
  if (a3 == v10)
    v11 = 0;
  else
    v11 = 73 * ((char **)a2 - v9)
        + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&a3[-*a2] >> 3)
        - 0x6DB6DB6DB6DB6DB7 * ((v10 - *v9) >> 3);
  v24[0].n128_u64[0] = v8 + 8 * (v7 / 0x49);
  v24[0].n128_u64[1] = (unint64_t)v10;
  sub_10081FEC4(v24, v11);
  if (v6 >= 1)
  {
    v12 = v24[0];
    if (v11 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      sub_10081FEC4(v24, v6);
      sub_100FE65DC(v9, v10, (char **)v12.n128_u64[0], (char *)v12.n128_u64[1], v24[0].n128_u64[0], (char *)v24[0].n128_u64[1], v24);
      v18 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v18;
      while ((sub_100AAFEC0((uint64_t)a1, 1) & 1) != 0)
        ;
    }
    else
    {
      sub_10081FEC4(v24, v6);
      v13 = v24[0];
      v14 = a1[4] + a1[5];
      v15 = a1[1];
      v16 = (_BYTE **)(v15 + 8 * (v14 / 0x49));
      if (a1[2] == v15)
        v17 = 0;
      else
        v17 = &(*v16)[56 * (v14 % 0x49)];
      v24[0] = v12;
      sub_100FE6790(v13.n128_u64[0], (_BYTE *)v13.n128_u64[1], v16, v17, (uint64_t)v24);
      a1[5] -= v6;
      while ((sub_100AAFF1C(a1, 1) & 1) != 0)
        ;
    }
  }
  v19 = a1[4];
  v20 = a1[1];
  v21 = (_QWORD *)(v20 + 8 * (v19 / 0x49));
  if (a1[2] == v20)
    v22 = 0;
  else
    v22 = *v21 + 56 * (v19 % 0x49);
  v24[0].n128_u64[0] = (unint64_t)v21;
  v24[0].n128_u64[1] = v22;
  sub_10081FEC4(v24, v11);
  return v24[0].n128_u64[0];
}

uint64_t sub_100FE5E2C(uint64_t a1, double *a2, int a3, _QWORD *a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  _BOOL4 v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _BOOL8 v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  _BOOL4 v54;
  NSObject *v55;
  double v56;
  uint64_t v57;
  double v59;
  uint64_t v60;
  char *v61;
  int v62;
  double v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  int v67;
  __int16 v68;
  double v69;
  __int16 v70;
  double v71;
  __int16 v72;
  _BOOL4 v73;
  __int16 v74;
  _BOOL4 v75;
  uint8_t buf[4];
  double v77;
  __int16 v78;
  uint64_t v79;
  __int16 v80;
  int v81;
  __int16 v82;
  double v83;
  __int16 v84;
  double v85;
  __int16 v86;
  _BOOL4 v87;
  __int16 v88;
  _BOOL4 v89;

  v4 = a4[5];
  if (v4 < 2)
    return 0;
  v8 = a4[4];
  v9 = v8 + v4;
  v10 = (v8 + v4) / 0x49;
  v11 = a4[1];
  v12 = a4[2];
  v13 = (uint64_t *)(v11 + 8 * v10);
  v14 = *v13;
  v15 = *v13 + 56 * ((v8 + v4) % 0x49);
  if (v12 == v11)
    v15 = 0;
  v16 = v15 - v14;
  v17 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v15 - v14) >> 3);
  if (v16 < 113)
    v18 = v13[-((74 - v17) / 0x49uLL)] + 56 * (73 * ((74 - v17) / 0x49uLL) - (74 - v17)) + 4032;
  else
    v18 = v13[(v17 - 2) / 0x49uLL] + 56 * ((v17 - 2) % 0x49uLL);
  v19 = v14 + 56 * (v9 % 0x49);
  if (v12 == v11)
    v19 = 0;
  v20 = v19 - v14;
  v21 = 0x6DB6DB6DB6DB6DB7 * ((v19 - v14) >> 3);
  if (v20 < 113)
  {
    v27 = 74 - v21;
    v28 = (74 - v21) / 0x49uLL;
    v24 = &v13[-v28];
    v25 = *v24;
    v26 = *v24 + 56 * (73 * v28 - v27) + 4032;
  }
  else
  {
    v22 = v21 - 2;
    v23 = (v21 - 2) / 0x49uLL;
    v24 = &v13[v23];
    v25 = *v24;
    v26 = *v24 + 56 * (v22 - 73 * v23);
  }
  v29 = a2[1];
  v30 = v14 + 56 * (v9 % 0x49);
  if (v12 == v11)
    v30 = 0;
  if (v26 != v30)
  {
    while (1)
    {
      v31 = v26 + 56;
      if (v26 + 56 - v25 == 4088)
      {
        v32 = v24[1];
        ++v24;
        v25 = v32;
        v31 = v32;
      }
      if (v31 == v30)
        break;
      v33 = *(double *)(v26 + 8);
      v26 = v31;
      if (*(double *)(v31 + 8) > v33)
      {
        v34 = 0;
        goto LABEL_22;
      }
    }
  }
  v34 = *(double *)(*(_QWORD *)(v11 + 8 * ((v4 + v8 - 1) / 0x49)) + 56 * ((v4 + v8 - 1) % 0x49) + 8) > v29;
LABEL_22:
  v35 = *(double *)(v18 + 8);
  if (v4 < 3)
    goto LABEL_38;
  if (v12 == v11)
    v36 = 0;
  else
    v36 = v14 + 56 * (v9 % 0x49);
  v37 = v36 - v14;
  v38 = 0x6DB6DB6DB6DB6DB7 * ((v36 - v14) >> 3);
  if (v37 < 169)
  {
    v43 = 75 - v38;
    v44 = 75 - v38;
    v40 = (unint64_t *)&v13[-((75 - v38) / 0x49uLL)];
    v41 = *v40;
    v42 = *v40 + 56 * (73 * (v44 / 0x49) - v43) + 4032;
  }
  else
  {
    v39 = v38 - 3;
    v40 = (unint64_t *)&v13[(v38 - 3) / 0x49uLL];
    v41 = *v40;
    v42 = *v40 + 56 * (v39 % 0x49);
  }
  v45 = v14 + 56 * (v9 - 73 * v10);
  if (v12 == v11)
    v46 = 0;
  else
    v46 = v45;
  if (v42 != v46)
  {
    while (*(double *)(v42 + 24) > 0.11)
    {
      v42 += 56;
      if (v42 - v41 == 4088)
      {
        v47 = v40[1];
        ++v40;
        v41 = v47;
        v42 = v47;
      }
      if (v42 == v46)
        goto LABEL_37;
    }
LABEL_38:
    v48 = 0;
    goto LABEL_39;
  }
LABEL_37:
  v48 = a2[3] > 0.11;
LABEL_39:
  v49 = v29 - v35;
  v50 = *(double *)(*(_QWORD *)(v11 + 8 * ((v4 + v8 - 1) / 0x49)) + 56 * ((v4 + v8 - 1) % 0x49) + 48);
  v51 = 0.0;
  if (v50 > 0.0)
    v51 = (a2[6] - v50) / v50;
  v5 = 0;
  v52 = v49 / v35;
  if (a3 != 1 && fabs(v51) < 0.05)
  {
    v53 = a2[4];
    v54 = v53 > 4.0;
    if (v52 >= -0.009)
      v54 = 0;
    v5 = v54 && v34 || v53 > 3.1 && v48;
  }
  if (qword_10229FED0 != -1)
    dispatch_once(&qword_10229FED0, &stru_102198400);
  v55 = qword_10229FED8;
  if (os_log_type_enabled((os_log_t)qword_10229FED8, OS_LOG_TYPE_INFO))
  {
    v56 = *a2;
    v57 = *((_QWORD *)a2 + 4);
    *(_DWORD *)buf = 134350592;
    v77 = v56;
    v78 = 2050;
    v79 = v57;
    v80 = 1026;
    v81 = a3;
    v82 = 2050;
    v83 = v51;
    v84 = 2050;
    v85 = v52;
    v86 = 1026;
    v87 = v34;
    v88 = 1026;
    v89 = v48;
    _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_INFO, "startTime=%{public}.2f, grade=%{public}.2f, gradeType=%{public}d, deltaCadenceRatio=%{public}.2f, deltaHorizSpeedRatio=%{public}.2f, strictlyDecreasingHorizontalSpeed=%{public}d, allVerticalSpeedsExceeded=%{public}d", buf, 0x3Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FED0 != -1)
      dispatch_once(&qword_10229FED0, &stru_102198400);
    v59 = *a2;
    v60 = *((_QWORD *)a2 + 4);
    v62 = 134350592;
    v63 = v59;
    v64 = 2050;
    v65 = v60;
    v66 = 1026;
    v67 = a3;
    v68 = 2050;
    v69 = v51;
    v70 = 2050;
    v71 = v52;
    v72 = 1026;
    v73 = v34;
    v74 = 1026;
    v75 = v48;
    v61 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FED8, 1, "startTime=%{public}.2f, grade=%{public}.2f, gradeType=%{public}d, deltaCadenceRatio=%{public}.2f, deltaHorizSpeedRatio=%{public}.2f, strictlyDecreasingHorizontalSpeed=%{public}d, allVerticalSpeedsExceeded=%{public}d", &v62, 60);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLPowerEstimator::isPossibleOnset(const GradeOnsetIndicatorInput, const GradeType, const std::deque<GradeOnsetIndicatorInput> &) const", "%s\n", v61);
    if (v61 != (char *)buf)
      free(v61);
  }
  return v5;
}

uint64_t sub_100FE64A8(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 73 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100FE6910(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x49)) + 56 * (v7 % 0x49);
  v9 = *a2;
  v10 = a2[1];
  v11 = a2[2];
  *(_QWORD *)(v8 + 48) = *((_QWORD *)a2 + 6);
  *(_OWORD *)(v8 + 16) = v10;
  *(_OWORD *)(v8 + 32) = v11;
  *(_OWORD *)v8 = v9;
  v12 = a1[4];
  v13 = a1[5] + 1;
  a1[5] = v13;
  v14 = v12 + v13;
  v15 = a1[1];
  v16 = (_QWORD *)(v15 + 8 * (v14 / 0x49));
  v17 = *v16 + 56 * (v14 % 0x49);
  if (a1[2] == v15)
    v17 = 0;
  if (v17 == *v16)
    v17 = *(v16 - 1) + 4088;
  return v17 - 56;
}

uint64_t sub_100FE65A0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 56) = *(_QWORD *)(a2 + 224);
  return result;
}

void sub_100FE65AC(id a1)
{
  qword_10229FED8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Power");
}

__n128 sub_100FE65DC@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, _QWORD *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  char *v12;
  char **v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __n128 result;
  uint64_t v21;
  __n128 v22;

  if (a1 == a3)
  {
    v19 = a2;
    v18 = a4;
    v15 = a5;
    v16 = a6;
  }
  else
  {
    v13 = a3 - 1;
    v12 = *a3;
    v14 = a4;
    v15 = a5;
    v16 = a6;
    while (1)
    {
      sub_100FE66A8(v12, v14, v15, v16, &v21);
      v16 = (char *)v22.n128_u64[1];
      v15 = (_QWORD *)v22.n128_u64[0];
      if (v13 == a1)
        break;
      v17 = *v13--;
      v12 = v17;
      v14 = v17 + 4088;
    }
    v18 = *a1 + 4088;
    v19 = a2;
  }
  sub_100FE66A8(v19, v18, v15, v16, &v21);
  result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_100FE66A8@<X0>(char *a1@<X1>, char *a2@<X2>, _QWORD *a3@<X3>, char *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v6;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *result;
  uint64_t v14;
  char *v15;

  v6 = a3;
  if (a1 == a2)
  {
    v9 = a1;
  }
  else
  {
    v9 = a2;
    v10 = *a3;
    v11 = a2;
    while (1)
    {
      v12 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&a4[-v10] >> 3);
      if (0x6DB6DB6DB6DB6DB7 * ((v11 - a1) >> 3) < v12)
        v12 = 0x6DB6DB6DB6DB6DB7 * ((v11 - a1) >> 3);
      v11 -= 56 * v12;
      a4 -= 56 * v12;
      if (v12)
        result = memmove(a4, v11, 56 * v12);
      if (v11 == a1)
        break;
      v14 = *--v6;
      v10 = v14;
      a4 = (char *)(v14 + 4088);
    }
    if ((char *)(*v6 + 4088) == a4)
    {
      v15 = (char *)v6[1];
      ++v6;
      a4 = v15;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_100FE6790(_QWORD *a1, _BYTE *a2, _BYTE **a3, _BYTE *a4, uint64_t a5)
{
  void **v7;
  char *v8;
  _QWORD *v10;
  _BYTE *i;
  _BYTE *v12;
  double result;
  uint64_t v14;
  __int128 v15;

  v7 = *(void ***)a5;
  v8 = *(char **)(a5 + 8);
  if (a1 != a3)
  {
    v10 = a1 + 1;
    for (i = (_BYTE *)(*a1 + 4088); ; i = v12 + 4088)
    {
      sub_100FE6820(a2, v8, i, v7, &v14);
      v8 = (char *)*((_QWORD *)&v15 + 1);
      v7 = (void **)v15;
      *(_QWORD *)a5 = v15;
      *(_QWORD *)(a5 + 8) = v8;
      if (v10 == a3)
        break;
      v12 = (_BYTE *)*v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  sub_100FE6820(a2, v8, a4, v7, &v14);
  result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void *sub_100FE6820@<X0>(_BYTE *__src@<X1>, char *__dst@<X4>, _BYTE *a3@<X2>, void **a4@<X3>, _QWORD *a5@<X8>)
{
  void **v6;
  _BYTE *v7;
  _BYTE *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void *result;
  char *v14;

  v6 = a4;
  v7 = __src;
  if (__src == a3)
  {
    v9 = __src;
  }
  else
  {
    v9 = a3;
    v6 = a4 + 1;
    v10 = (char *)*a4;
    while (1)
    {
      v11 = 0x6DB6DB6DB6DB6DB7 * ((v10 - __dst + 4088) >> 3);
      v12 = 0x6DB6DB6DB6DB6DB7 * ((v9 - v7) >> 3) >= v11 ? v11 : 0x6DB6DB6DB6DB6DB7 * ((v9 - v7) >> 3);
      if (v12)
        result = memmove(__dst, v7, 56 * v12);
      v7 += 56 * v12;
      if (v7 == v9)
        break;
      v14 = (char *)*v6++;
      v10 = v14;
      __dst = v14;
    }
    __dst += 56 * v12;
    if ((char *)*(v6 - 1) + 4088 == __dst)
      __dst = (char *)*v6;
    else
      --v6;
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = __dst;
  return result;
}

void sub_100FE6910(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x49;
  v4 = v2 - 73;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF8uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF8uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF8uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100FE6BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_100FE6C9C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10230B958);
  _Unwind_Resume(a1);
}

void sub_100FE6CF4(id a1)
{
  qword_10230B960 = -[CMPedometerTableRawSpeedToKValue initWithTestMode:]([CMPedometerTableRawSpeedToKValue alloc], "initWithTestMode:", 0);
}

void sub_100FE6EC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

id sub_100FE6F94(uint64_t a1, void *a2, uint64_t a3)
{
  NSObject *v6;
  id v7;
  CFAbsoluteTime Current;
  id result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  const char *v25;
  uint8_t *v26;
  uint8_t buf[4];
  id v28;
  CFAbsoluteTime v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;

  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_1021984A8);
  v6 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
  {
    v7 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", a3), "UTF8String");
    *(_DWORD *)buf = 136315138;
    v28 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021984A8);
    v23 = qword_10229FCD8;
    v24 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", a3), "UTF8String");
    LODWORD(v32) = 136315138;
    *(_QWORD *)((char *)&v32 + 4) = v24;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v23, 2, "%s", (const char *)&v32);
    v26 = (uint8_t *)v25;
    sub_100512490("Generic", 1, 0, 2, "-[CMPedometerTableRawSpeedToKValue logBins]_block_invoke", "%s\n", v25);
    if (v26 != buf)
      free(v26);
  }
  Current = CFAbsoluteTimeGetCurrent();
  result = objc_msgSend(*(id *)(a1 + 40), "isBinaryLogging");
  if ((_DWORD)result)
  {
    *(_QWORD *)&v32 = off_102171C50;
    v33 = a3;
    objc_msgSend(a2, "begin");
    v34 = v10;
    objc_msgSend(a2, "end");
    v35 = v11;
    v36 = objc_msgSend(a2, "state");
    objc_msgSend(a2, "valueOut");
    v37 = v12;
    *((CFAbsoluteTime *)&v32 + 1) = Current;
    v13 = sub_1011B78D4();
    sub_1011B8DB0(v13, (uint64_t)&v32);
    sub_1015EB864(buf);
    sub_1016055A0((uint64_t)buf);
    v31 |= 1u;
    v29 = Current;
    v14 = v30;
    *(_BYTE *)(v30 + 40) |= 8u;
    *(_DWORD *)(v14 + 32) = a3;
    v15 = v30;
    objc_msgSend(a2, "begin");
    *(_BYTE *)(v15 + 40) |= 1u;
    *(_QWORD *)(v15 + 8) = v16;
    v17 = v30;
    objc_msgSend(a2, "end");
    *(_BYTE *)(v17 + 40) |= 2u;
    *(_QWORD *)(v17 + 16) = v18;
    v19 = v30;
    v20 = objc_msgSend(a2, "state");
    *(_BYTE *)(v19 + 40) |= 0x10u;
    *(_DWORD *)(v19 + 36) = v20;
    v21 = v30;
    objc_msgSend(a2, "valueOut");
    *(_BYTE *)(v21 + 40) |= 4u;
    *(_QWORD *)(v21 + 24) = v22;
    if (qword_1023118A8 != -1)
      dispatch_once(&qword_1023118A8, &stru_1021984C8);
    if (qword_1023118B0)
      sub_101888B64(qword_1023118B0, (uint64_t)buf);
    return (id)sub_1015EE304((PB::Base *)buf);
  }
  return result;
}

void sub_100FE72D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100FE732C(id a1, void *a2)
{
  (*(void (**)(void *))(*(_QWORD *)a2 + 208))(a2);
}

void sub_100FE768C(id a1)
{
  qword_10229FCD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

uint64_t sub_100FE76BC()
{
  _OWORD *v0;
  _OWORD *v1;

  qword_10230B920 = 0;
  qword_10230B928 = 0;
  qword_10230B930 = 0;
  v0 = operator new(0x30uLL);
  qword_10230B928 = (uint64_t)(v0 + 3);
  qword_10230B930 = (uint64_t)(v0 + 3);
  *v0 = xmmword_101C399E0;
  v0[1] = unk_101C399F0;
  v0[2] = xmmword_101C39A00;
  qword_10230B920 = (uint64_t)v0;
  __cxa_atexit((void (*)(void *))sub_1004093B0, &qword_10230B920, (void *)&_mh_execute_header);
  qword_10230B940 = 0;
  qword_10230B948 = 0;
  qword_10230B938 = 0;
  v1 = operator new(0xA0uLL);
  qword_10230B948 = (uint64_t)(v1 + 10);
  v1[6] = xmmword_101C39A70;
  v1[7] = unk_101C39A80;
  v1[8] = xmmword_101C39A90;
  v1[9] = unk_101C39AA0;
  v1[2] = xmmword_101C39A30;
  v1[3] = unk_101C39A40;
  v1[4] = xmmword_101C39A50;
  v1[5] = unk_101C39A60;
  *v1 = xmmword_101C39A10;
  v1[1] = unk_101C39A20;
  qword_10230B938 = (uint64_t)v1;
  qword_10230B940 = (uint64_t)(v1 + 10);
  return __cxa_atexit((void (*)(void *))sub_1004093B0, &qword_10230B938, (void *)&_mh_execute_header);
}

__n128 sub_100FE7798(uint64_t a1, uint64_t *a2, __n128 *a3, double a4)
{
  uint64_t v6;
  __n128 result;

  v6 = sub_100278210(a1, a2);
  *(_QWORD *)(v6 + 96) = 0;
  *(_QWORD *)(v6 + 104) = 0;
  *(_QWORD *)(v6 + 112) = 0;
  result = *a3;
  *(__n128 *)(v6 + 96) = *a3;
  *(_QWORD *)(v6 + 112) = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  *(double *)(v6 + 120) = a4;
  return result;
}

uint64_t sub_100FE77E8(uint64_t a1)
{
  uint64_t i;

  for (i = a1 + 16;
        ;
        objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 8), *(unsigned int *)(i + 16)))
  {
    i = *(_QWORD *)i;
    if (!i)
      break;
  }
  return sub_100067AC4(a1);
}

void sub_100FE7830(uint64_t a1, _QWORD *a2)
{
  if (*a2 != a2[1])
    sub_10061DCC4();
}

void sub_100FE78C4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0x10000000000000;
  *(_QWORD *)(a1 + 48) = *a3;
  v3 = a3[1];
  *(_QWORD *)(a1 + 56) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  operator new();
}

void sub_100FE7C48(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v7;

  sub_100FE88CC(v5, 0);
  sub_100FE88CC((uint64_t *)(v3 + 24), 0);
  sub_100FE88CC(v4, 0);
  sub_100261F44(v3);
  sub_100261F44(v2);
  v7 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  _Unwind_Resume(a1);
}

void sub_100FE7CD4(uint64_t a1)
{
  sub_100FE7CDC(*(_QWORD *)(a1 + 32));
}

void sub_100FE7CDC(uint64_t a1)
{
  NSObject *v2;
  id v3;
  uint64_t *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  NSObject *v9;
  id v10;
  uint64_t v11;
  id v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  id v16;
  const char *v17;
  uint8_t *v18;
  uint64_t *v19[2];
  int v20;
  id v21;
  uint8_t buf[4];
  id v23;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102198550);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v3 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)a1, "silo"), "identifier"), "UTF8String");
    *(_DWORD *)buf = 136315138;
    v23 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s WIFI TIMER TRIGGERED", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102198550);
    v11 = qword_1022A02D8;
    v12 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)a1, "silo"), "identifier"), "UTF8String");
    v20 = 136315138;
    v21 = v12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 2, "%s WIFI TIMER TRIGGERED", (const char *)&v20);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiScanner::onTimerTriggered()", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  if (*(_QWORD *)(a1 + 64))
  {
    v4 = *(uint64_t **)(a1 + 72);
    v19[0] = *(uint64_t **)(a1 + 64);
    v19[1] = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 + 1);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    sub_100FE8F48(a1, v19);
    if (v4)
    {
      v7 = (unint64_t *)(v4 + 1);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        (*(void (**)(uint64_t *))(*v4 + 16))(v4);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
      }
    }
    sub_100346F9C((_QWORD *)(a1 + 64));
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102198550);
    v9 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v10 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)a1, "silo"), "identifier"), "UTF8String");
      *(_DWORD *)buf = 136315138;
      v23 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "%s WIFI SCAN SETTINGS EMPTY, TIMER RACE?", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102198550);
      v15 = qword_1022A02D8;
      v16 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)a1, "silo"), "identifier"), "UTF8String");
      v20 = 136315138;
      v21 = v16;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v15, 2, "%s WIFI SCAN SETTINGS EMPTY, TIMER RACE?", (const char *)&v20);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "void CLWifiScanner::onTimerTriggered()", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
  }
}

void sub_100FE8084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100FE80A0(uint64_t a1, int *a2, double *a3, id *a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id *v19;

  CLProfilingIdentify("CLWifiScanner::onWifiNotification");
  objc_msgSend(objc_msgSend(*a4, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102198530);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiScanner::onWifiNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102198530);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiScanner::onWifiNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100FE91C8((uint64_t)a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100FE8258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100FE827C(uint64_t a1)
{
  uint64_t v2;

  sub_100FE8308(a1);
  objc_msgSend(*(id *)(a1 + 16), "invalidate");

  sub_100FE88CC((uint64_t *)(a1 + 96), 0);
  sub_100FE88CC((uint64_t *)(a1 + 88), 0);
  sub_100FE88CC((uint64_t *)(a1 + 80), 0);
  sub_100261F44(a1 + 64);
  sub_100261F44(a1 + 48);
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t sub_100FE8308(uint64_t result)
{
  uint64_t v1;
  NSObject *v2;
  id v3;
  uint64_t v4;
  id v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  id v9;
  uint8_t buf[4];
  id v11;

  if (*(_BYTE *)(result + 33))
  {
    v1 = result;
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102198550);
    v2 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v3 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)v1, "silo"), "identifier"), "UTF8String");
      *(_DWORD *)buf = 136315138;
      v11 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s Stop monitor for active scanning", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102198550);
      v4 = qword_1022A02D8;
      v5 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)v1, "silo"), "identifier"), "UTF8String");
      v8 = 136315138;
      v9 = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v4, 2, "%s Stop monitor for active scanning", (const char *)&v8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLWifiScanner::stop()", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
    *(_BYTE *)(v1 + 33) = 0;
    objc_msgSend(*(id *)(v1 + 16), "setNextFireDelay:", 1.79769313e308);
    sub_100FE88CC((uint64_t *)(v1 + 88), 0);
    return sub_100FE88CC((uint64_t *)(v1 + 80), 0);
  }
  return result;
}

uint64_t sub_100FE850C(uint64_t result)
{
  id *v1;
  NSObject *v2;
  id v3;
  uint64_t v4;
  id v5;
  const char *v6;
  int *v7;
  int v8;
  id v9;
  int buf;
  uint8_t buf_4[8];

  if (!*(_BYTE *)(result + 33))
  {
    v1 = (id *)result;
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102198550);
    v2 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v3 = objc_msgSend(objc_msgSend(objc_msgSend(*v1, "silo"), "identifier"), "UTF8String");
      buf = 136315138;
      *(_QWORD *)buf_4 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s Start monitor for active scanning", (uint8_t *)&buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102198550);
      v4 = qword_1022A02D8;
      v5 = objc_msgSend(objc_msgSend(objc_msgSend(*v1, "silo"), "identifier"), "UTF8String");
      v8 = 136315138;
      v9 = v5;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v4, 2, "%s Start monitor for active scanning", (const char *)&v8);
      v7 = (int *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLWifiScanner::start()", "%s\n", v6);
      if (v7 != &buf)
        free(v7);
    }
    operator new();
  }
  return result;
}

void sub_100FE8898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_100261F44((uint64_t)va);
  sub_100261F44((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_100FE88CC(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100FE77E8(result);
    operator delete();
  }
  return result;
}

void sub_100FE8908(uint64_t a1, uint64_t *a2)
{
  double Current;
  double v5;
  double v6;
  double v7;
  NSObject *v8;
  id v9;
  uint64_t *v10;
  uint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  NSObject *v16;
  id v17;
  double v18;
  NSObject *v19;
  id v20;
  uint64_t v21;
  id v22;
  const char *v23;
  uint8_t *v24;
  uint64_t v25;
  id v26;
  double v27;
  const char *v28;
  uint8_t *v29;
  uint64_t v30;
  id v31;
  const char *v32;
  uint8_t *v33;
  double v34;
  uint64_t *v35[2];
  int v36;
  id v37;
  __int16 v38;
  double v39;
  __int16 v40;
  double v41;
  uint8_t buf[4];
  id v43;
  __int16 v44;
  double v45;
  __int16 v46;
  double v47;

  Current = j__CFAbsoluteTimeGetCurrent();
  if (!*(_BYTE *)(a1 + 33))
  {
    objc_msgSend(*(id *)(a1 + 16), "setNextFireDelay:", 1.79769313e308);
    return;
  }
  v5 = Current;
  v6 = *(double *)(*a2 + 120);
  v7 = v6 + *(double *)(a1 + 40);
  sub_100FE7830(*(_QWORD *)(a1 + 80), (_QWORD *)(*a2 + 96));
  if (v5 >= v7)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102198550);
    v8 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v9 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)a1, "silo"), "identifier"), "UTF8String");
      *(_DWORD *)buf = 136315650;
      v43 = v9;
      v44 = 2048;
      v45 = v5;
      v46 = 2048;
      v47 = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%s WIFI EXECUTING IMMEDIATELY, now=%f nextRequestTime=%f", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102198550);
      v21 = qword_1022A02D8;
      v22 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)a1, "silo"), "identifier"), "UTF8String");
      v36 = 136315650;
      v37 = v22;
      v38 = 2048;
      v39 = v5;
      v40 = 2048;
      v41 = v7;
      LODWORD(v34) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v21, 2, "%s WIFI EXECUTING IMMEDIATELY, now=%f nextRequestTime=%f", (const char *)&v36, v34, *(double *)v35);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 2, "void CLWifiScanner::scheduleNextScan(std::shared_ptr<WifiScanSettings>)", "%s\n", v23);
      if (v24 != buf)
        free(v24);
    }
    v10 = (uint64_t *)*a2;
    v11 = (uint64_t *)a2[1];
    v35[0] = v10;
    v35[1] = v11;
    if (v11)
    {
      v12 = (unint64_t *)(v11 + 1);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    sub_100FE8F48(a1, v35);
    if (v11)
    {
      v14 = (unint64_t *)(v11 + 1);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        (*(void (**)(uint64_t *))(*v11 + 16))(v11);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v11);
      }
    }
LABEL_29:
    sub_100346F9C((_QWORD *)(a1 + 64));
    return;
  }
  objc_msgSend(*(id *)(a1 + 16), "setNextFireDelay:", v7 - v5);
  if (v6 >= 1.79769313e308)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102198550);
    v19 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v20 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)a1, "silo"), "identifier"), "UTF8String");
      *(_DWORD *)buf = 136315138;
      v43 = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "%s WIFI SCAN EFFECTIVELY NOT SCHEDULED", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102198550);
      v30 = qword_1022A02D8;
      v31 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)a1, "silo"), "identifier"), "UTF8String");
      v36 = 136315138;
      v37 = v31;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v30, 2, "%s WIFI SCAN EFFECTIVELY NOT SCHEDULED", (const char *)&v36);
      v33 = (uint8_t *)v32;
      sub_100512490("Generic", 1, 0, 2, "void CLWifiScanner::scheduleNextScan(std::shared_ptr<WifiScanSettings>)", "%s\n", v32);
      if (v33 != buf)
        free(v33);
    }
    goto LABEL_29;
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102198550);
  v16 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v17 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)a1, "silo"), "identifier"), "UTF8String");
    objc_msgSend(*(id *)(a1 + 16), "nextFireTime");
    *(_DWORD *)buf = 136315394;
    v43 = v17;
    v44 = 2048;
    v45 = v18;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "%s WIFI SCAN SCHEDULED FOR %f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102198550);
    v25 = qword_1022A02D8;
    v26 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)a1, "silo"), "identifier"), "UTF8String");
    objc_msgSend(*(id *)(a1 + 16), "nextFireTime");
    v36 = 136315394;
    v37 = v26;
    v38 = 2048;
    v39 = v27;
    LODWORD(v34) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v25, 2, "%s WIFI SCAN SCHEDULED FOR %f", (const char *)&v36, v34);
    v29 = (uint8_t *)v28;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiScanner::scheduleNextScan(std::shared_ptr<WifiScanSettings>)", "%s\n", v28);
    if (v29 != buf)
      free(v29);
  }
  sub_100349198((_QWORD *)(a1 + 64), a2);
}

void sub_100FE8F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_100FE8F48(uint64_t a1, uint64_t **a2)
{
  void *v3;
  id v4;
  NSObject *v5;
  id v6;
  uint64_t v8;
  id v9;
  const char *v10;
  uint8_t *v11;
  uint64_t v12[2];
  void *v13;
  void *v14;
  void *__p;
  char v16;
  int v17;
  id v18;
  uint8_t buf[4];
  id v20;
  void *v21;
  void *v22;
  void *v23;
  char v24;

  if (*(_BYTE *)(a1 + 32))
  {
    sub_100278210((uint64_t)buf, *a2);
    v3 = *(void **)(a1 + 24);
    sub_100278210((uint64_t)v12, (uint64_t *)buf);
    v4 = objc_msgSend(v3, "syncgetStartScanWithParameters:", sub_10042B128(v12));
    if (v16 < 0)
      operator delete(__p);
    if (v13)
    {
      v14 = v13;
      operator delete(v13);
    }
    if (v24 < 0)
      operator delete(v23);
    if (v21)
    {
      v22 = v21;
      operator delete(v21);
    }
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102198550);
    v5 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v6 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)a1, "silo"), "identifier"), "UTF8String");
      *(_DWORD *)buf = 136315138;
      v20 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s WIFI IS POWERED OFF - NOT ISSUING SCAN REQUEST", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102198550);
      v8 = qword_1022A02D8;
      v9 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)a1, "silo"), "identifier"), "UTF8String");
      v17 = 136315138;
      v18 = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, 2, "%s WIFI IS POWERED OFF - NOT ISSUING SCAN REQUEST", (const char *)&v17);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiScanner::requestScan(std::shared_ptr<WifiScanSettings>)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    return 0;
  }
  return v4;
}

void sub_100FE919C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_10027740C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100FE91C8(uint64_t a1, uint64_t a2, int *a3, double *a4)
{
  int v7;
  double v9;
  double v10;
  NSObject *v12;
  id v13;
  int v14;
  uint64_t v15;
  id v16;
  int v17;
  const char *v18;
  char *v19;
  NSObject *v20;
  id v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  BOOL v26;
  _BOOL4 v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  NSObject *v37;
  id v38;
  int v39;
  uint64_t v40;
  id v41;
  int v42;
  uint64_t v43;
  const char *v44;
  char *v45;
  uint64_t v46;
  id v47;
  int v48;
  const char *v49;
  double v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  int v53;
  double *v54;
  char v55;
  int v56;
  id v57;
  __int16 v58;
  _BOOL4 v59;
  __int16 v60;
  uint64_t v61;
  _BYTE buf[18];
  __int16 v63;
  uint64_t v64;

  v7 = *a3;
  if (*a3 == 12 || v7 == 3)
  {
    v9 = a4[13];
    v10 = *(double *)(a1 + 40);
    if (v9 < v10 || *((_BYTE *)a4 + 1) != 11)
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102198550);
      v12 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        v13 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)a1, "silo"), "identifier"), "UTF8String");
        v14 = *((char *)a4 + 1);
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = v13;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v9 < v10;
        v63 = 1024;
        LODWORD(v64) = v14;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "%s WIFI IGNORING NOTIFICATION, cached=%d scantype=%d", buf, 0x18u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102198550);
        v15 = qword_1022A02D8;
        v16 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)a1, "silo"), "identifier"), "UTF8String");
        v17 = *((char *)a4 + 1);
        v56 = 136315650;
        v57 = v16;
        v58 = 1024;
        v59 = v9 < v10;
        v60 = 1024;
        LODWORD(v61) = v17;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v15, 2, "%s WIFI IGNORING NOTIFICATION, cached=%d scantype=%d", (const char *)&v56, 24, LODWORD(v50));
        v19 = (char *)v18;
        sub_100512490("Generic", 1, 0, 2, "void CLWifiScanner::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v18);
        if (v19 != buf)
          goto LABEL_61;
      }
      return;
    }
  }
  else if (v7 == 1)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102198550);
    v20 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v21 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)a1, "silo"), "identifier"), "UTF8String");
      v22 = *(unsigned __int8 *)a4;
      objc_msgSend(*(id *)(a1 + 16), "nextFireTime");
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v21;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v22;
      v63 = 2048;
      v64 = v23;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "%s WIFI POWER NOTIFICATION RECEIVED, power=%d nextFire=%f", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102198550);
      v40 = qword_1022A02D8;
      v41 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)a1, "silo"), "identifier"), "UTF8String");
      v42 = *(unsigned __int8 *)a4;
      objc_msgSend(*(id *)(a1 + 16), "nextFireTime");
      v56 = 136315650;
      v57 = v41;
      v58 = 1024;
      v59 = v42;
      v60 = 2048;
      v61 = v43;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v40, 2, "%s WIFI POWER NOTIFICATION RECEIVED, power=%d nextFire=%f", (const char *)&v56, 28, v50);
      v45 = (char *)v44;
      sub_100512490("Generic", 1, 0, 2, "void CLWifiScanner::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v44);
      if (v45 != buf)
        free(v45);
    }
    v24 = *(unsigned __int8 *)(a1 + 32);
    v25 = *(unsigned __int8 *)a4;
    if (v24 != v25)
    {
      v26 = v24 != 0;
      if (*(_BYTE *)a4)
        v27 = v24 != 0;
      else
        v27 = 1;
      if (*(_BYTE *)a4)
        v26 = 0;
      if (!v26 && v27)
        sub_101939D78();
    }
    *(_BYTE *)(a1 + 32) = v25;
    return;
  }
  if (*(_BYTE *)(a1 + 33))
  {
    *(CFAbsoluteTime *)(a1 + 40) = j__CFAbsoluteTimeGetCurrent();
    v28 = *(_QWORD *)(a1 + 48);
    v53 = *a3;
    v54 = a4;
    v55 = 1;
    (*(void (**)(_BYTE *__return_ptr, uint64_t, int *))(*(_QWORD *)v28 + 24))(buf, v28, &v53);
    v51 = *(_QWORD *)buf;
    v52 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v29 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    sub_100FE8908(a1, &v51);
    v31 = v52;
    if (v52)
    {
      p_shared_owners = (unint64_t *)&v52->__shared_owners_;
      do
        v33 = __ldaxr(p_shared_owners);
      while (__stlxr(v33 - 1, p_shared_owners));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v34 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v35 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    return;
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102198550);
  v37 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_ERROR))
  {
    v38 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)a1, "silo"), "identifier"), "UTF8String");
    v39 = *a3;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v38;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v39;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "%s WIFI GOT NOTIFICATION WHILE SCANNER NOT STARTED, type=%d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102198550);
    v46 = qword_1022A02D8;
    v47 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)a1, "silo"), "identifier"), "UTF8String");
    v48 = *a3;
    v56 = 136315394;
    v57 = v47;
    v58 = 1024;
    v59 = v48;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v46, 16, "%s WIFI GOT NOTIFICATION WHILE SCANNER NOT STARTED, type=%d", (const char *)&v56, 18);
    v19 = (char *)v49;
    sub_100512490("Generic", 1, 0, 0, "void CLWifiScanner::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v49);
    if (v19 != buf)
LABEL_61:
      free(v19);
  }
}

void sub_100FE9874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_100261F44((uint64_t)va);
  sub_100261F44((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_100FE9898(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100FE98C4(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

_QWORD *sub_100FE98F0(uint64_t a1, void *a2)
{
  _QWORD *result;

  result = (_QWORD *)sub_100C2229C(a1, a2);
  *result = off_102198580;
  result[14] = 0;
  return result;
}

void sub_100FE9918(uint64_t a1)
{
  sub_100C22494(a1);
  operator delete();
}

uint64_t sub_100FE993C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_1001FBB04(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 + 48) + 16))(v3 + 48, a2);
}

uint64_t sub_100FE996C(uint64_t result)
{
  NSObject *v1;
  const char *v2;
  uint8_t *v3;
  _WORD v4[8];
  uint8_t buf[1640];

  if (!*(_QWORD *)(result + 112))
  {
    if (qword_10229FEF0 != -1)
      dispatch_once(&qword_10229FEF0, &stru_102198680);
    v1 = qword_10229FEF8;
    if (os_log_type_enabled((os_log_t)qword_10229FEF8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "Registering with Motion Coprocessor", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FEF0 != -1)
        dispatch_once(&qword_10229FEF0, &stru_102198680);
      v4[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEF8, 2, "Registering with Motion Coprocessor", v4, 2);
      v3 = (uint8_t *)v2;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLOnBodyNotifier7::startOnBodyDetection()", "%s\n", v2);
      if (v3 != buf)
        free(v3);
    }
    operator new();
  }
  return result;
}

void sub_100FE9B54()
{
  operator delete();
}

void sub_100FE9B80(int *a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  os_activity_scope_state_s state;
  char v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  CLProfilingIdentify("CLOnBodyNotifier7::onMotionCoprocessorData");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021986A0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v7 = 1;
    v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLOnBodyNotifier7::onMotionCoprocessorData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021986A0);
    v5 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2082;
      v13 = "activity";
      v14 = 2050;
      v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLOnBodyNotifier7::onMotionCoprocessorData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v7 = 0;
  }
  sub_100FE9F14(a2, a1);
  if (v7)
    os_activity_scope_leave(&state);
}

void sub_100FE9D30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100FE9D50(_QWORD *result)
{
  _QWORD *v1;
  NSObject *v2;
  uint64_t v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (result[14])
  {
    v1 = result;
    if (qword_10229FEF0 != -1)
      dispatch_once(&qword_10229FEF0, &stru_102198680);
    v2 = qword_10229FEF8;
    if (os_log_type_enabled((os_log_t)qword_10229FEF8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Unregistering with Motion Coprocessor", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FEF0 != -1)
        dispatch_once(&qword_10229FEF0, &stru_102198680);
      v6[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEF8, 2, "Unregistering with Motion Coprocessor", v6, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLOnBodyNotifier7::stopOnBodyDetection()", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
    v3 = sub_1001FBB04(0);
    sub_1000A4A6C(v3, 2, v1[14]);
    result = (_QWORD *)v1[14];
    if (result)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
    v1[14] = 0;
  }
  return result;
}

uint64_t sub_100FE9F14(uint64_t a1, int *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  uint64_t v7;
  int v9;
  int v10;
  uint64_t v11;
  const char *v12;
  uint8_t *v13;
  double v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  uint64_t v24;

  if (qword_10229FEF0 != -1)
    dispatch_once(&qword_10229FEF0, &stru_102198680);
  v4 = qword_10229FEF8;
  if (os_log_type_enabled((os_log_t)qword_10229FEF8, OS_LOG_TYPE_DEBUG))
  {
    v5 = *a2;
    v6 = a2[1];
    v7 = *((_QWORD *)a2 + 1);
    *(_DWORD *)buf = 67109632;
    v20 = v5;
    v21 = 1024;
    v22 = v6;
    v23 = 2048;
    v24 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "onBodyStatusData->onBodyStatus,%d,onBodyStatusData->confidence,%d,onBodyStatusData->timestamp,%f", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEF0 != -1)
      dispatch_once(&qword_10229FEF0, &stru_102198680);
    v9 = *a2;
    v10 = a2[1];
    v11 = *((_QWORD *)a2 + 1);
    LODWORD(v14) = 67109632;
    HIDWORD(v14) = v9;
    v15 = 1024;
    v16 = v10;
    v17 = 2048;
    v18 = v11;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEF8, 2, "onBodyStatusData->onBodyStatus,%d,onBodyStatusData->confidence,%d,onBodyStatusData->timestamp,%f", &v14, 24, v14);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLOnBodyNotifier7::onMotionCoprocessorData(const CLMotionCoprocessorInterface::NotificationData *)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  *(_DWORD *)buf = 0;
  return (*(uint64_t (**)(uint64_t, uint8_t *, int *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, a2, 0, 0xFFFFFFFFLL, 0);
}

void sub_100FEA128(id a1)
{
  qword_10229FEF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "OnBody");
}

void sub_100FEA154(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_100FEA180(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v6 = a3[1];
  *(_QWORD *)a1 = *a3;
  *(_QWORD *)(a1 + 8) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = a4[1];
  *(_QWORD *)(a1 + 16) = *a4;
  *(_QWORD *)(a1 + 24) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_QWORD *)(a1 + 32) = a2;
  *(_DWORD *)(a1 + 40) = a5;
  *(_BYTE *)(a1 + 44) = 0;
  *(_QWORD *)(a1 + 48) = objc_alloc_init((Class)NSMutableArray);
  *(_OWORD *)(a1 + 56) = xmmword_101BBE5E0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0x7FEFFFFFFFFFFFFFLL;
  return a1;
}

void sub_100FEA224(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100261F44(v2);
  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100FEA244(uint64_t a1)
{

  sub_100261F44(a1 + 16);
  return sub_100261F44(a1);
}

void sub_100FEA27C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  _DWORD v17[2];
  __int16 v18;
  const char *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  int v23;
  __int16 v24;
  double v25;
  __int16 v26;
  double v27;
  __int16 v28;
  double v29;
  __int16 v30;
  double v31;
  __int16 v32;
  double v33;
  __int16 v34;
  double v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;

  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021986C0);
  v2 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
  {
    v3 = *(unsigned int *)(a1 + 40);
    v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    v5 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
    v6 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32));
    v7 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 48))(*(_QWORD *)(a1 + 32));
    v8 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 56))(*(_QWORD *)(a1 + 32));
    v9 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 64))(*(_QWORD *)(a1 + 32));
    v10 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 72))(*(_QWORD *)(a1 + 32));
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 80))(*(_QWORD *)(a1 + 32));
    v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 88))(*(_QWORD *)(a1 + 32));
    v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 144))(*(_QWORD *)(a1 + 32));
    v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 152))(*(_QWORD *)(a1 + 32));
    v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 96))(*(_QWORD *)(a1 + 32));
    v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 104))(*(_QWORD *)(a1 + 32));
    v17[0] = 68292611;
    v17[1] = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2050;
    v21 = v3;
    v22 = 1025;
    v23 = v4;
    v24 = 2049;
    v25 = v5;
    v26 = 2049;
    v27 = v6;
    v28 = 2049;
    v29 = v7;
    v30 = 2049;
    v31 = v8;
    v32 = 2049;
    v33 = v9;
    v34 = 2049;
    v35 = v10;
    v36 = 1025;
    v37 = v11;
    v38 = 1025;
    v39 = v12;
    v40 = 1025;
    v41 = v13;
    v42 = 1025;
    v43 = v14;
    v44 = 1025;
    v45 = v15;
    v46 = 1025;
    v47 = v16;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Harvest-Settings\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"maxEvents\":%{private}d, \"minGapTime\":\"%{private}f\", \"maxGapTime\":\"%{private}f\", \"minWifiTimespan\":\"%{private}f\", \"targetCompassUpdateInterval\":\"%{private}f\", \"traceDuration\":\"%{private}f\", \"traceFuzzInterval\":\"%{private}f\", \"traceOnDiskHarvestingOnly\":%{private}d, \"maxVisionEnabledTraces\":%{private}d, \"allowInertialOdometryNotifications\":%{private}d, \"allowOutdoorServiceNotifications\":%{private}d, \"isImmediateNonVisionTraceHarvestAllowed\":%{private}d, \"maxNumSubmissionsScoredTraces\":%{private}d}", (uint8_t *)v17, 0x82u);
  }
}

void sub_100FEA50C(_QWORD *a1)
{
  double v2;

  objc_msgSend((id)a1[6], "removeAllObjects");
  *((double *)a1 + 7) = (*(double (**)(_QWORD))(*(_QWORD *)*a1 + 64))(*a1);
  v2 = (*(double (**)(_QWORD))(*(_QWORD *)a1[4] + 72))(a1[4]);
  if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[4] + 80))(a1[4]) & 1) == 0 && v2 > 0.0)
    *((long double *)a1 + 8) = fmod(*((long double *)a1 + 7), v2);
  if (*((_BYTE *)a1 + 272))
    *((_BYTE *)a1 + 272) = 0;
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0xBFF0000000000000;
}

uint64_t sub_100FEA5A4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  id v7;
  id v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  id v13;
  double v14;
  float v15;
  double v16;
  float v17;
  double v18;
  float v19;
  double v20;
  _QWORD *v21;
  id v22;
  id v23;
  void *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t i;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  _OWORD v33[8];
  _OWORD v34[2];

  v7 = objc_alloc_init((Class)CLPIndoorEvent);
  objc_msgSend(v7, "setType:", 3);
  v8 = objc_alloc((Class)CLPLocation);
  v9 = *(_OWORD *)(a3 + 112);
  v33[6] = *(_OWORD *)(a3 + 96);
  v33[7] = v9;
  v34[0] = *(_OWORD *)(a3 + 128);
  *(_OWORD *)((char *)v34 + 12) = *(_OWORD *)(a3 + 140);
  v10 = *(_OWORD *)(a3 + 48);
  v33[2] = *(_OWORD *)(a3 + 32);
  v33[3] = v10;
  v11 = *(_OWORD *)(a3 + 80);
  v33[4] = *(_OWORD *)(a3 + 64);
  v33[5] = v11;
  v12 = *(_OWORD *)(a3 + 16);
  v33[0] = *(_OWORD *)a3;
  v33[1] = v12;
  v13 = objc_msgSend(v8, "initWithDaemonLocation:", v33);
  objc_msgSend(v13, "timestamp");
  objc_msgSend(v13, "setTimestamp:", v14 - *(double *)(a1 + 64));
  objc_msgSend(v13, "setIsFromLocationController:", a4 == 0);
  objc_msgSend(v13, "setProvider:", *(unsigned int *)(a3 + 96));
  if (*(_DWORD *)(a3 + 124) != 0x7FFFFFFF)
    objc_msgSend(v13, "setFloor:");
  v15 = *(float *)(a3 + 200);
  if (v15 != *((float *)sub_100B94758() + 10))
  {
    LODWORD(v16) = *(_DWORD *)(a3 + 200);
    objc_msgSend(v13, "setHorzUncSemiMaj:", v16);
  }
  v17 = *(float *)(a3 + 204);
  if (v17 != *((float *)sub_100B94758() + 11))
  {
    LODWORD(v18) = *(_DWORD *)(a3 + 204);
    objc_msgSend(v13, "setHorzUncSemiMin:", v18);
  }
  v19 = *(float *)(a3 + 208);
  if (v19 != *((float *)sub_100B94758() + 12))
  {
    LODWORD(v20) = *(_DWORD *)(a3 + 208);
    objc_msgSend(v13, "setHorzUncSemiMajAz:", v20);
  }
  if (a4 == 1)
  {
    v21 = *(_QWORD **)(a3 + 680);
    if (v21)
    {
      if (*v21 != v21[1])
      {
        v22 = objc_alloc_init((Class)CLPSatelliteReport);
        objc_msgSend(v22, "setGps:", sub_100FEA8D0(*(uint64_t **)(a3 + 680), 0));
        objc_msgSend(v22, "setGlonass:", sub_100FEA8D0(*(uint64_t **)(a3 + 680), 1));
        objc_msgSend(v22, "setQzss:", sub_100FEA8D0(*(uint64_t **)(a3 + 680), 4));
        objc_msgSend(v22, "setGalileo:", sub_100FEA8D0(*(uint64_t **)(a3 + 680), 3));
        objc_msgSend(v13, "setSatReport:", v22);
      }
    }
  }
  if ((*(_DWORD *)(a3 + 96) & 0xFFFFFFFE) == 0xA)
  {
    v23 = objc_alloc_init((Class)CLPPipelineDiagnosticReport);
    v24 = v23;
    v25 = *(_DWORD *)(a3 + 1184);
    if (v25 - 1 >= 3)
      v26 = 0;
    else
      v26 = v25;
    objc_msgSend(v23, "setYieldType:", v26);
    objc_msgSend(v24, "setPrbPipelinedSaysYield:", *(double *)(a3 + 1192));
    objc_msgSend(v24, "setPrbCoarseIndoorSaysIndoor:", *(double *)(a3 + 1200));
    objc_msgSend(v24, "setPrbWifiSaysIndoor:", *(double *)(a3 + 1208));
    objc_msgSend(v24, "setPrbGpsSaysIndoor:", *(double *)(a3 + 1216));
    objc_msgSend(v24, "setPrbParticleFilterSaysYield:", *(double *)(a3 + 1224));
    objc_msgSend(v24, "setPrbOnFloorsEstimate:", *(double *)(a3 + 1232));
    for (i = 0; i != 40; i += 8)
    {
      if (*(double *)(a3 + 1240 + i) >= 0.0)
        objc_msgSend(v24, "addPrbOnFloorEstimate:");
    }
    objc_msgSend(v24, "setPrbInlierEstimate:", *(double *)(a3 + 1280));
    objc_msgSend(v24, "setPrbLocalizerIoWrapperSaysWifiOk:", *(double *)(a3 + 1288));
    objc_msgSend(v24, "setPrbInjectionOccupancyRetryLimitOk:", *(double *)(a3 + 1296));
    objc_msgSend(v24, "setPrbInjectionGainRetryLimitOk:", *(double *)(a3 + 1304));
    v28 = *(_DWORD *)(a3 + 1312);
    if (v28 - 1 >= 4)
      v29 = 0;
    else
      v29 = v28;
    objc_msgSend(v24, "setPfYieldStatusBeforeCalculatePose:", v29);
    v30 = *(_DWORD *)(a3 + 1316);
    if (v30 - 1 >= 4)
      v31 = 0;
    else
      v31 = v30;
    objc_msgSend(v24, "setYieldStatusBeforeCalculatePose:", v31);
    objc_msgSend(v13, "setPipelineDiagnosticReport:", v24);
  }
  objc_msgSend(v7, "setLocation:", v13);
  objc_msgSend(*(id *)(a1 + 48), "addObject:", v7);
  return sub_10020329C(a1);
}

id sub_100FEA8D0(uint64_t *a1, int a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1[1] == *a1)
    return 0;
  v4 = objc_alloc_init((Class)CLPSatelliteInfo);
  v5 = *a1;
  v6 = a1[1];
  if (*a1 != v6)
  {
    do
    {
      if (*(_DWORD *)v5 == a2)
      {
        v7 = (int)(float)(*(float *)(v5 + 16) * 10.0);
        v8 = (int)(float)(*(float *)(v5 + 12) * 10.0);
        v9 = (int)(float)(*(float *)(v5 + 8) * 10.0);
        objc_msgSend(v4, "addSatIds:", *(unsigned int *)(v5 + 4));
        objc_msgSend(v4, "addCnos:", v7);
        objc_msgSend(v4, "addAzimuths:", v8);
        objc_msgSend(v4, "addElevations:", v9);
        objc_msgSend(v4, "addIsUsedInFixes:", *(unsigned __int8 *)(v5 + 24));
      }
      v5 += 28;
    }
    while (v5 != v6);
  }
  return v4;
}

uint64_t sub_100FEA9C0(uint64_t result, _DWORD *a2, uint64_t a3)
{
  double *v4;
  id v5;
  id v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v11[8];
  uint64_t v12;

  if (*a2 == 3)
  {
    v4 = (double *)result;
    v5 = objc_alloc_init((Class)CLPIndoorEvent);
    objc_msgSend(v5, "setType:", 4);
    objc_msgSend(v5, "setMotionActivity:", objc_alloc_init((Class)CLPIndoorMotionActivity));
    objc_msgSend(objc_msgSend(v5, "motionActivity"), "setTimestamp:", (*(double (**)(_QWORD))(**(_QWORD **)v4 + 64))(*(_QWORD *)v4) - v4[8]);
    v6 = objc_alloc((Class)CLPMotionActivity);
    v7 = *(_OWORD *)(a3 + 112);
    v11[6] = *(_OWORD *)(a3 + 96);
    v11[7] = v7;
    v12 = *(_QWORD *)(a3 + 128);
    v8 = *(_OWORD *)(a3 + 48);
    v11[2] = *(_OWORD *)(a3 + 32);
    v11[3] = v8;
    v9 = *(_OWORD *)(a3 + 80);
    v11[4] = *(_OWORD *)(a3 + 64);
    v11[5] = v9;
    v10 = *(_OWORD *)(a3 + 16);
    v11[0] = *(_OWORD *)a3;
    v11[1] = v10;
    objc_msgSend(objc_msgSend(v5, "motionActivity"), "setMotionActivity:", objc_msgSend(v6, "initWithCLMotionActivity:", v11));
    objc_msgSend(*((id *)v4 + 6), "addObject:", v5);
    return sub_10020329C((uint64_t)v4);
  }
  return result;
}

void sub_100FEAACC(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  uint64_t v12;

  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021986C0);
  v2 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
  {
    v3 = *((unsigned int *)a1 + 10);
    v7 = 68289282;
    v8 = 0;
    v9 = 2082;
    v10 = "";
    v11 = 2050;
    v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"trace starting, subscribing to trace notifications\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&v7, 0x1Cu);
  }
  if (*((_BYTE *)a1 + 44))
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021986C0);
    v4 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *((unsigned int *)a1 + 10);
      v7 = 68289282;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2050;
      v12 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning: unexpectedly already registered for trace notifications\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&v7, 0x1Cu);
    }
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)*a1 + 24))(*a1, *((unsigned int *)a1 + 10), 2);
    (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)*a1 + 24))(*a1, *((unsigned int *)a1 + 10), 8);
    v6 = a1[2];
    v7 = 0;
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v6 + 48))(v6, &v7);
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)a1[2] + 64))(a1[2], 30);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)a1[2] + 80))(a1[2], 0);
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)a1[4] + 144))(a1[4]))
      (*(void (**)(_QWORD, double))(*(_QWORD *)a1[2] + 96))(a1[2], 1.0);
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)a1[4] + 152))(a1[4]))
      (*(void (**)(_QWORD))(*(_QWORD *)a1[2] + 112))(a1[2]);
    *((_BYTE *)a1 + 44) = 1;
  }
}

void sub_100FEAD1C(uint64_t a1, _DWORD *a2, double *a3)
{
  NSObject *v3;
  const char *v4;
  NSObject *v5;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  id v16;
  float v17;
  id v18;
  double v19;
  float v20;
  id v21;
  double v22;
  double v23;
  uint8_t *v24;
  _QWORD v25[2];
  uint8_t buf[1640];

  if (*a2 == 2)
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021986C0);
    v5 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Got kNotificationPedometerEvent but we didn't register for it", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021986C0);
      LOWORD(v25[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 1, "Got kNotificationPedometerEvent but we didn't register for it", v25, 2, v25[0]);
      goto LABEL_25;
    }
  }
  else if (*a2 == 1)
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021986C0);
    v3 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Got kNotificationExtendedStepCountUpdate but we didn't register for it", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021986C0);
      LOWORD(v25[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 1, "Got kNotificationExtendedStepCountUpdate but we didn't register for it", v25, 2, v25[0]);
LABEL_25:
      v24 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "void CLHarvestDataTrace::saveStepCountInCacheIfNecessary(const CLStepCountNotifier_Type::Notification &, const CLStepCountNotifier_Type::NotificationData &)", "%s\n", v4);
      if (v24 != buf)
        free(v24);
    }
  }
  else
  {
    if (!*(_BYTE *)(a1 + 272))
    {
      v8 = *(_OWORD *)a3;
      v9 = *((_OWORD *)a3 + 2);
      *(_OWORD *)(a1 + 112) = *((_OWORD *)a3 + 1);
      *(_OWORD *)(a1 + 128) = v9;
      *(_OWORD *)(a1 + 96) = v8;
      v10 = *((_OWORD *)a3 + 3);
      v11 = *((_OWORD *)a3 + 4);
      v12 = *((_OWORD *)a3 + 6);
      *(_OWORD *)(a1 + 176) = *((_OWORD *)a3 + 5);
      *(_OWORD *)(a1 + 192) = v12;
      *(_OWORD *)(a1 + 144) = v10;
      *(_OWORD *)(a1 + 160) = v11;
      v13 = *((_OWORD *)a3 + 7);
      v14 = *((_OWORD *)a3 + 8);
      v15 = *((_OWORD *)a3 + 10);
      *(_OWORD *)(a1 + 240) = *((_OWORD *)a3 + 9);
      *(_OWORD *)(a1 + 256) = v15;
      *(_OWORD *)(a1 + 208) = v13;
      *(_OWORD *)(a1 + 224) = v14;
      *(_BYTE *)(a1 + 272) = 1;
    }
    v16 = objc_alloc_init((Class)CLPIndoorEvent);
    objc_msgSend(v16, "setType:", 2);
    objc_msgSend(v16, "setCmPedometer:", objc_alloc_init((Class)CLPIndoorCMPedometer));
    objc_msgSend(objc_msgSend(v16, "cmPedometer"), "setTimestamp:", a3[1] - *(double *)(a1 + 64));
    v17 = a3[4] - *(double *)(a1 + 128);
    v18 = objc_msgSend(v16, "cmPedometer");
    *(float *)&v19 = v17;
    objc_msgSend(v18, "setDistance:", v19);
    objc_msgSend(objc_msgSend(v16, "cmPedometer"), "setNumberOfSteps:", (*((_DWORD *)a3 + 6) - *(_DWORD *)(a1 + 120)));
    objc_msgSend(objc_msgSend(v16, "cmPedometer"), "setFloorsAscended:", (*((_DWORD *)a3 + 16) - *(_DWORD *)(a1 + 160)));
    objc_msgSend(objc_msgSend(v16, "cmPedometer"), "setFloorsDescended:", (*((_DWORD *)a3 + 17) - *(_DWORD *)(a1 + 164)));
    v20 = a3[11] - *(double *)(a1 + 184);
    v21 = objc_msgSend(v16, "cmPedometer");
    *(float *)&v22 = v20;
    objc_msgSend(v21, "setActiveTime:", v22);
    v23 = a3[2];
    if (v23 > 0.0)
      objc_msgSend(objc_msgSend(v16, "cmPedometer"), "setFirstStepTime:", v23 - *(double *)(a1 + 64));
    objc_msgSend(*(id *)(a1 + 48), "addObject:", v16);
    sub_10020329C(a1);
  }
}

void sub_100FEB130(uint64_t a1, void *a2)
{
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  id v8;
  id v9;
  void *p_p;
  uint64_t v11;
  double v12;
  double v13;
  void *__p;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[14];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  objc_msgSend(a2, "timestamp");
  v5 = v4 - *(double *)(a1 + 80);
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(a1 + 16) + 128))(v17);
  v6 = *(double *)&v17[10];
  sub_100067AC4((uint64_t)&v20);
  sub_100067AC4((uint64_t)&v19);
  sub_100067AC4((uint64_t)&v18);
  if (v5 >= v6)
  {
    objc_msgSend(a2, "timestamp");
    *(_QWORD *)(a1 + 80) = v7;
    v8 = objc_alloc_init((Class)CLPIndoorEvent);
    objc_msgSend(v8, "setType:", 8);
    sub_100B31548((uint64_t)v17);
    sub_10086B338(a2, (uint64_t)v17);
    __p = 0;
    v15 = 0;
    v16 = 0;
    wireless_diagnostics::google::protobuf::MessageLite::SerializeToString(v17, &__p);
    v9 = objc_alloc((Class)CLPLOGENTRYVISIONVIOEstimation);
    if (v16 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    if (v16 >= 0)
      v11 = HIBYTE(v16);
    else
      v11 = v15;
    objc_msgSend(v8, "setVioEstimation:", objc_msgSend(v9, "initWithData:", +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", p_p, v11)));
    objc_msgSend(objc_msgSend(objc_msgSend(v8, "vioEstimation"), "timestamp"), "cfAbsoluteTimeS");
    objc_msgSend(objc_msgSend(objc_msgSend(v8, "vioEstimation"), "timestamp"), "setCfAbsoluteTimeS:", v12 - *(double *)(a1 + 64));
    objc_msgSend(objc_msgSend(objc_msgSend(v8, "vioEstimation"), "originTimestamp"), "cfAbsoluteTimeS");
    objc_msgSend(objc_msgSend(objc_msgSend(v8, "vioEstimation"), "originTimestamp"), "setCfAbsoluteTimeS:", v13 - *(double *)(a1 + 64));
    objc_msgSend(*(id *)(a1 + 48), "addObject:", v8);
    sub_10020329C(a1);
    if (SHIBYTE(v16) < 0)
      operator delete(__p);
    sub_100B356D8((wireless_diagnostics::google::protobuf::MessageLite *)v17);
  }
}

void sub_100FEB2DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  sub_100B356D8((wireless_diagnostics::google::protobuf::MessageLite *)&a16);
  _Unwind_Resume(a1);
}

void sub_100FEB300(uint64_t a1, void *a2, int a3)
{
  id v6;
  double v7;
  double v8;
  double v9;
  id v10;
  double v11;
  double v12;
  _BOOL4 v13;
  NSObject *v14;
  uint64_t v15;
  NSObject *v16;
  id v17;
  uint8_t *v18;
  uint64_t v19;
  double v20;
  const char *v21;
  uint8_t *v22;
  const char *v23;
  uint8_t *v24;
  _BYTE v25[64];
  _DWORD v26[2];
  __int16 v27;
  _BOOL4 v28;
  __int16 v29;
  _BOOL4 v30;
  uint8_t buf[8];
  uint64_t v32;
  uint64_t v33;

  v6 = objc_alloc_init((Class)CLPIndoorEvent);
  objc_msgSend(v6, "setType:", 9);
  objc_msgSend(a2, "timestamp", sub_100B31650((uint64_t)v25));
  v8 = v7;
  v9 = *(double *)(a1 + 88);
  v10 = objc_msgSend(a2, "debugInfo");
  v11 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 112))(*(_QWORD *)(a1 + 32));
  v12 = v8 - v9;
  v13 = v12 >= v11 || v9 < 0.0;
  if (a3 && v10 && v13)
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021986C0);
    v14 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Crowdsourced debug info stored in harvest", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021986C0);
      LOWORD(v26[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 2, "Crowdsourced debug info stored in harvest", v26, 2);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 2, "void CLHarvestDataTrace::saveVLLocalizationResultInCacheIfNecessary(const _CLVLLocalizationResult *const, BOOL)", "%s\n", v23);
      if (v24 != buf)
        free(v24);
    }
    sub_10086DA70(a2, (uint64_t)v25);
    objc_msgSend(a2, "timestamp");
    *(_QWORD *)(a1 + 88) = v15;
  }
  else
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021986C0);
    v16 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67240704;
      *(_DWORD *)&buf[4] = a3;
      LOWORD(v32) = 1026;
      *(_DWORD *)((char *)&v32 + 2) = v10 != 0;
      HIWORD(v32) = 1026;
      LODWORD(v33) = v12 >= v11;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "Crowdsourced debug info not stored in harvest, ehl, %{public}d, %{public}d, %{public}d", buf, 0x14u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021986C0);
      v26[0] = 67240704;
      v26[1] = a3;
      v27 = 1026;
      v28 = v10 != 0;
      v29 = 1026;
      v30 = v12 >= v11;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 2, "Crowdsourced debug info not stored in harvest, ehl, %{public}d, %{public}d, %{public}d", v26, 20);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "void CLHarvestDataTrace::saveVLLocalizationResultInCacheIfNecessary(const _CLVLLocalizationResult *const, BOOL)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    sub_10086CB10(a2, (uint64_t)v25);
  }
  *(_QWORD *)buf = 0;
  v32 = 0;
  v33 = 0;
  wireless_diagnostics::google::protobuf::MessageLite::SerializeToString(v25, buf);
  v17 = objc_alloc((Class)CLPLOGENTRYVISIONVLLocalizationResult);
  if (v33 >= 0)
    v18 = buf;
  else
    v18 = *(uint8_t **)buf;
  if (v33 >= 0)
    v19 = HIBYTE(v33);
  else
    v19 = v32;
  objc_msgSend(v6, "setVlLocalizationResult:", objc_msgSend(v17, "initWithData:", +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v18, v19)));
  objc_msgSend(objc_msgSend(objc_msgSend(v6, "vlLocalizationResult"), "timestamp"), "cfAbsoluteTimeS");
  objc_msgSend(objc_msgSend(objc_msgSend(v6, "vlLocalizationResult"), "timestamp"), "setCfAbsoluteTimeS:", v20 - *(double *)(a1 + 64));
  objc_msgSend(*(id *)(a1 + 48), "addObject:", v6);
  sub_10020329C(a1);
  if (SHIBYTE(v33) < 0)
    operator delete(*(void **)buf);
  sub_100B3DDC8((wireless_diagnostics::google::protobuf::MessageLite *)v25);
}

void sub_100FEB798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  sub_100B3DDC8((wireless_diagnostics::google::protobuf::MessageLite *)&a11);
  _Unwind_Resume(a1);
}

id sub_100FEB7E0(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 48), "enumerateObjectsUsingBlock:", a2);
  return objc_msgSend(*(id *)(a1 + 48), "removeAllObjects");
}

void sub_100FEB80C(id a1)
{
  qword_1022A0208 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

void sub_100FEB8DC(id a1)
{
  qword_10230B970 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLPeopleDensityLocToolSilo"));
}

void sub_100FEBB68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100FEBBA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  objc_msgSend(objc_loadWeak((id *)(a1 + 40)), "onOneShotQueryResult:withError:", a3, a2);
  dispatch_group_leave(*(dispatch_group_t *)(*(_QWORD *)(a1 + 32) + 65));
}

void sub_100FEBDB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void sub_100FEBDD4(int a1)
{
  if (a1 == 2)
    operator new();
  operator new();
}

void sub_100FEBE40()
{
  operator delete();
}

void sub_100FEE42C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10230B9A8);
  sub_1004E2BD0((uint64_t)&STACK[0x978]);
  _Unwind_Resume(a1);
}

void sub_100FEE530(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  double v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  double v13;
  const char *v14;
  uint8_t *v15;
  double v16;
  _DWORD v17[2];
  __int16 v18;
  double v19;
  uint8_t buf[8];
  __int16 v21;
  double v22;

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102198880);
  v4 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_DWORD *)(a1 + 192);
    v6 = mach_continuous_time();
    v7 = TMConvertTicksToSeconds(v6 - *(_QWORD *)(a1 + 64));
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v5;
    v21 = 2048;
    v22 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#FenceMetrics request %d fetched location system state, %f seconds", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102198880);
    v10 = qword_1022A0068;
    v11 = *(_DWORD *)(a1 + 192);
    v12 = mach_continuous_time();
    v13 = TMConvertTicksToSeconds(v12 - *(_QWORD *)(a1 + 64));
    v17[0] = 67109376;
    v17[1] = v11;
    v18 = 2048;
    v19 = v13;
    LODWORD(v16) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 2, "#FenceMetrics request %d fetched location system state, %f seconds", v17, v16);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "-[CLFenceStateChangeAnalytics extractAnalyticsFromNotification:isInternal:handler:]_block_invoke", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  objc_msgSend(*(id *)(a1 + 32), "setCellAvailable:", *a2);
  objc_msgSend(*(id *)(a1 + 32), "setAirplaneMode:", a2[3]);
  objc_msgSend(*(id *)(a1 + 32), "setPasscodeLocked:", a2[2]);
  objc_msgSend(*(id *)(a1 + 32), "setWifiAvailable:", a2[1]);
  objc_msgSend(*(id *)(a1 + 32), "setIsFreeWake:", *(unsigned __int8 *)(a1 + 72));
  objc_msgSend(*(id *)(a1 + 32), "setReachabilityStatus:", *((unsigned int *)a2 + 2));
  v8 = *(void **)(a1 + 40);
  objc_msgSend(*(id *)(a1 + 48), "timeIntervalSinceReferenceDate");
  *(_QWORD *)buf = v9;
  objc_msgSend(*(id *)(a1 + 32), "setTimeSinceWifiRoam:", objc_msgSend(v8, "binForTimeInterval:", sub_100D63A24(a1 + 72, (double *)buf, (double *)(a1 + 184))));
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

void sub_100FEE7AC(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  double v11;
  const char *v12;
  uint8_t *v13;
  double v14;
  _DWORD v15[2];
  __int16 v16;
  double v17;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  double v21;

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102198880);
  v4 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_DWORD *)(a1 + 56);
    v6 = mach_continuous_time();
    v7 = TMConvertTicksToSeconds(v6 - *(_QWORD *)(a1 + 48));
    *(_DWORD *)buf = 67109376;
    v19 = v5;
    v20 = 2048;
    v21 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#FenceMetrics request %d fetched motion activity, %f seconds", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102198880);
    v8 = qword_1022A0068;
    v9 = *(_DWORD *)(a1 + 56);
    v10 = mach_continuous_time();
    v11 = TMConvertTicksToSeconds(v10 - *(_QWORD *)(a1 + 48));
    v15[0] = 67109376;
    v15[1] = v9;
    v16 = 2048;
    v17 = v11;
    LODWORD(v14) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, 2, "#FenceMetrics request %d fetched motion activity, %f seconds", v15, v14);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "-[CLFenceStateChangeAnalytics extractAnalyticsFromNotification:isInternal:handler:]_block_invoke", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  objc_msgSend(*(id *)(a1 + 32), "setMotionStateBeforeStateChange:", a2);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_100FEE9B8(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  double v11;
  const char *v12;
  uint8_t *v13;
  double v14;
  _DWORD v15[2];
  __int16 v16;
  double v17;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  double v21;

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102198880);
  v4 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_DWORD *)(a1 + 56);
    v6 = mach_continuous_time();
    v7 = TMConvertTicksToSeconds(v6 - *(_QWORD *)(a1 + 48));
    *(_DWORD *)buf = 67109376;
    v19 = v5;
    v20 = 2048;
    v21 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#FenceMetrics %d fetched dominant motion activity after n-1 state change, %f seconds", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102198880);
    v8 = qword_1022A0068;
    v9 = *(_DWORD *)(a1 + 56);
    v10 = mach_continuous_time();
    v11 = TMConvertTicksToSeconds(v10 - *(_QWORD *)(a1 + 48));
    v15[0] = 67109376;
    v15[1] = v9;
    v16 = 2048;
    v17 = v11;
    LODWORD(v14) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, 2, "#FenceMetrics %d fetched dominant motion activity after n-1 state change, %f seconds", v15, v14);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "-[CLFenceStateChangeAnalytics extractAnalyticsFromNotification:isInternal:handler:]_block_invoke", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  objc_msgSend(*(id *)(a1 + 32), "setMotionStateAfterNMinusOneStateChange:", a2);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_100FEEBC4(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  double v11;
  const char *v12;
  uint8_t *v13;
  double v14;
  _DWORD v15[2];
  __int16 v16;
  double v17;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  double v21;

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102198880);
  v4 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_DWORD *)(a1 + 56);
    v6 = mach_continuous_time();
    v7 = TMConvertTicksToSeconds(v6 - *(_QWORD *)(a1 + 48));
    *(_DWORD *)buf = 67109376;
    v19 = v5;
    v20 = 2048;
    v21 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#FenceMetrics request %d fetched dominant motion activity before n-1 state change, %f seconds", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102198880);
    v8 = qword_1022A0068;
    v9 = *(_DWORD *)(a1 + 56);
    v10 = mach_continuous_time();
    v11 = TMConvertTicksToSeconds(v10 - *(_QWORD *)(a1 + 48));
    v15[0] = 67109376;
    v15[1] = v9;
    v16 = 2048;
    v17 = v11;
    LODWORD(v14) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, 2, "#FenceMetrics request %d fetched dominant motion activity before n-1 state change, %f seconds", v15, v14);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "-[CLFenceStateChangeAnalytics extractAnalyticsFromNotification:isInternal:handler:]_block_invoke", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  objc_msgSend(*(id *)(a1 + 32), "setMotionStateBeforeNMinusOneStateChange:", a2);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_100FEEDD0(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  double v11;
  const char *v12;
  uint8_t *v13;
  double v14;
  _DWORD v15[2];
  __int16 v16;
  double v17;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  double v21;

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102198880);
  v4 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_DWORD *)(a1 + 56);
    v6 = mach_continuous_time();
    v7 = TMConvertTicksToSeconds(v6 - *(_QWORD *)(a1 + 48));
    *(_DWORD *)buf = 67109376;
    v19 = v5;
    v20 = 2048;
    v21 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#FenceMetrics request %d fetched dominant motion activity after n-2 state change, %f seconds", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102198880);
    v8 = qword_1022A0068;
    v9 = *(_DWORD *)(a1 + 56);
    v10 = mach_continuous_time();
    v11 = TMConvertTicksToSeconds(v10 - *(_QWORD *)(a1 + 48));
    v15[0] = 67109376;
    v15[1] = v9;
    v16 = 2048;
    v17 = v11;
    LODWORD(v14) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, 2, "#FenceMetrics request %d fetched dominant motion activity after n-2 state change, %f seconds", v15, v14);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "-[CLFenceStateChangeAnalytics extractAnalyticsFromNotification:isInternal:handler:]_block_invoke", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  objc_msgSend(*(id *)(a1 + 32), "setMotionStateAfterNMinusTwoStateChange:", a2);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_100FEEFDC(uint64_t a1, void *a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  id v13;
  id v14;
  id v15;
  unint64_t v16;
  uint64_t v17;
  void *i;
  double v19;
  _BOOL8 v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  double v24;
  const char *v25;
  uint8_t *v26;
  double v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[128];
  _DWORD v33[2];
  __int16 v34;
  double v35;
  uint8_t buf[4];
  int v37;
  __int16 v38;
  double v39;

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102198880);
  v4 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_DWORD *)(a1 + 304);
    v6 = mach_continuous_time();
    v7 = TMConvertTicksToSeconds(v6 - *(_QWORD *)(a1 + 48));
    *(_DWORD *)buf = 67109376;
    v37 = v5;
    v38 = 2048;
    v39 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#FenceMetrics request %d fetched LOI for fence, %f seconds", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102198880);
    v21 = qword_1022A0068;
    v22 = *(_DWORD *)(a1 + 304);
    v23 = mach_continuous_time();
    v24 = TMConvertTicksToSeconds(v23 - *(_QWORD *)(a1 + 48));
    v33[0] = 67109376;
    v33[1] = v22;
    v34 = 2048;
    v35 = v24;
    LODWORD(v27) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v21, 2, "#FenceMetrics request %d fetched LOI for fence, %f seconds", v33, v27);
    v26 = (uint8_t *)v25;
    sub_100512490("Generic", 1, 0, 2, "-[CLFenceStateChangeAnalytics extractAnalyticsFromNotification:isInternal:handler:]_block_invoke", "%s\n", v25);
    if (v26 != buf)
      free(v26);
  }
  objc_msgSend(*(id *)(a1 + 32), "setHasLoiAtFence:", a2 != 0);
  objc_msgSend(*(id *)(a1 + 32), "setLoiType:", -1);
  if (objc_msgSend(*(id *)(a1 + 32), "hasLoiAtFence"))
  {
    objc_msgSend(a2, "uncertainty");
    objc_msgSend(*(id *)(a1 + 32), "setLoiRadius:");
    v8 = *(double *)(a1 + 128);
    v9 = *(double *)(a1 + 136);
    objc_msgSend(objc_msgSend(a2, "location"), "latitude");
    v11 = v10;
    objc_msgSend(objc_msgSend(a2, "location"), "longitude");
    objc_msgSend(*(id *)(a1 + 32), "setLoiDistance:", CLClientGetDistanceCoordinates(v8, v9, v11, v12));
    objc_msgSend(*(id *)(a1 + 32), "setLoiType:", objc_msgSend(a2, "type"));
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v13 = objc_msgSend(a2, "visits");
    v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
    if (v14)
    {
      v15 = v14;
      v16 = 0;
      v17 = *(_QWORD *)v29;
      do
      {
        for (i = 0; i != v15; i = (char *)i + 1)
        {
          if (*(_QWORD *)v29 != v17)
            objc_enumerationMutation(v13);
          objc_msgSend(objc_msgSend(*(id *)(*((_QWORD *)&v28 + 1) + 8 * (_QWORD)i), "exitDate"), "timeIntervalSinceDate:", objc_msgSend(*(id *)(*((_QWORD *)&v28 + 1) + 8 * (_QWORD)i), "entryDate"));
          if (v19 > 14400.0)
            ++v16;
        }
        v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
      }
      while (v15);
      v20 = v16 > 9;
    }
    else
    {
      v20 = 0;
    }
    objc_msgSend(*(id *)(a1 + 32), "setHasSignificantPrior:", v20);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

char *sub_100FEF350(uint64_t a1, uint64_t a2)
{
  return sub_1004E5748((char *)(a1 + 56), (__int128 *)(a2 + 56));
}

void sub_100FEF35C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 280);
  if (v2)
  {
    *(_QWORD *)(a1 + 288) = v2;
    operator delete(v2);
  }

  if (*(char *)(a1 + 271) < 0)
    operator delete(*(void **)(a1 + 248));
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
}

void sub_100FEF3DC(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  double v9;
  const char *v10;
  uint8_t *v11;
  double v12;
  _DWORD v13[2];
  __int16 v14;
  double v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  double v19;

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102198880);
  v2 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_DWORD *)(a1 + 64);
    v4 = mach_continuous_time();
    v5 = TMConvertTicksToSeconds(v4 - *(_QWORD *)(a1 + 56));
    *(_DWORD *)buf = 67109376;
    v17 = v3;
    v18 = 2048;
    v19 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#FenceMetrics group notify for request %d, %f seconds", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102198880);
    v6 = qword_1022A0068;
    v7 = *(_DWORD *)(a1 + 64);
    v8 = mach_continuous_time();
    v9 = TMConvertTicksToSeconds(v8 - *(_QWORD *)(a1 + 56));
    v13[0] = 67109376;
    v13[1] = v7;
    v14 = 2048;
    v15 = v9;
    LODWORD(v12) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v6, 2, "#FenceMetrics group notify for request %d, %f seconds", v13, v12);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "-[CLFenceStateChangeAnalytics extractAnalyticsFromNotification:isInternal:handler:]_block_invoke", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

  dispatch_release(*(dispatch_object_t *)(a1 + 40));
}

void sub_100FF0580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100FF059C(const void *a1, char a2)
{
  NSObject *v4;
  id v5;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102198880);
  v4 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#FenceMetrics, _possibleFalseExitDetectionUIResponseHandler", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102198880);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "#FenceMetrics, _possibleFalseExitDetectionUIResponseHandler", v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void _possibleFalseExitDetectionUIResponseHandler(CFUserNotificationRef, CFOptionFlags)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  if ((a2 & 3) == 1)
  {
    v5 = objc_msgSend(CFSTR("tap-to-radar://new"), "mutableCopy");
    objc_msgSend(v5, "appendString:", CFSTR("?Title=Detected%20Exit%20and%20Reentry%20to%20Geofence%20Configured%20at%20Home"));
    objc_msgSend(v5, "appendString:", CFSTR("&Classification=Other%20Bug"));
    objc_msgSend(v5, "appendString:", CFSTR("&ComponentID=632758&ComponentName=Location%20Geofence%20&ComponentVersion=All"));
    objc_msgSend(v5, "appendString:", CFSTR("&Reproducibility=I%20Didn't%20Try"));
    objc_msgSend(v5, "appendFormat:", CFSTR("&Description=%@"), objc_msgSend(CFSTR("Possible false exit detected... Did you intentionally exit and reenter your home?"), "stringByAddingPercentEncodingWithAllowedCharacters:", +[NSCharacterSet URLQueryAllowedCharacterSet](NSCharacterSet, "URLQueryAllowedCharacterSet")));
    objc_msgSend(+[LSApplicationWorkspace defaultWorkspace](LSApplicationWorkspace, "defaultWorkspace"), "openURL:configuration:completionHandler:", +[NSURL URLWithString:](NSURL, "URLWithString:", v5), 0, &stru_1021988C0);
  }
  CFRelease(a1);
}

void sub_100FF0AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  sub_1004E2BD0((uint64_t)&a15);
  sub_1004E2BD0((uint64_t)&a46);
  _Unwind_Resume(a1);
}

uint64_t sub_100FF0AE4(uint64_t a1, void *a2)
{
  objc_msgSend(a2, "type");
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100FF0BBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100115F78(v1);
  sub_100115F78((uint64_t)&STACK[0x678]);
  _Unwind_Resume(a1);
}

void sub_100FF0BE0(uint64_t a1, int a2, uint64_t a3)
{
  NSObject *v6;
  _QWORD *v7;
  _QWORD *v8;
  const __CFString *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  const __CFString *v15;
  const char *v16;
  uint8_t *v17;
  _QWORD *v18;
  _QWORD *v19;
  const char *v20;
  uint8_t *v21;
  uint64_t v22;
  int v23;
  _QWORD *v24;
  __int16 v25;
  _QWORD *v26;
  __int16 v27;
  const __CFString *v28;
  __int16 v29;
  uint64_t v30;
  uint8_t buf[4];
  _QWORD *v32;
  __int16 v33;
  _QWORD *v34;
  __int16 v35;
  const __CFString *v36;
  __int16 v37;
  uint64_t v38;

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102198880);
  v6 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    v7 = (_QWORD *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0)
      v7 = (_QWORD *)*v7;
    v8 = (_QWORD *)(a1 + 64);
    if (*(char *)(a1 + 87) < 0)
      v8 = (_QWORD *)*v8;
    *(_DWORD *)buf = 136446979;
    v32 = v7;
    v33 = 2081;
    if (a2)
      v9 = CFSTR("YES");
    else
      v9 = CFSTR("NO");
    v34 = v8;
    v35 = 2112;
    v36 = v9;
    v37 = 2112;
    v38 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#FenceMetrics, evaluate possible false exit, fence, %{public}s/%{private}s, conditions satisfied, %@, error, %@", buf, 0x2Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102198880);
    v13 = (_QWORD *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0)
      v13 = (_QWORD *)*v13;
    v14 = (_QWORD *)(a1 + 64);
    if (*(char *)(a1 + 87) < 0)
      v14 = (_QWORD *)*v14;
    v23 = 136446979;
    v24 = v13;
    v25 = 2081;
    if (a2)
      v15 = CFSTR("YES");
    else
      v15 = CFSTR("NO");
    v26 = v14;
    v27 = 2112;
    v28 = v15;
    v29 = 2112;
    v30 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "#FenceMetrics, evaluate possible false exit, fence, %{public}s/%{private}s, conditions satisfied, %@, error, %@", &v23, 42);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "-[CLFenceStateChangeAnalytics evaluatePossibleFalseExitFromNotification:]_block_invoke", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  if (a2)
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102198880);
    v10 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 40);
      if (*(char *)(a1 + 63) < 0)
        v11 = (_QWORD *)*v11;
      v12 = (_QWORD *)(a1 + 64);
      if (*(char *)(a1 + 87) < 0)
        v12 = (_QWORD *)*v12;
      *(_DWORD *)buf = 136446467;
      v32 = v11;
      v33 = 2081;
      v34 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "#FenceMetrics, detected possible false exit, fence, %{public}s/%{private}s", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102198880);
      v18 = (_QWORD *)(a1 + 40);
      if (*(char *)(a1 + 63) < 0)
        v18 = (_QWORD *)*v18;
      v19 = (_QWORD *)(a1 + 64);
      if (*(char *)(a1 + 87) < 0)
        v19 = (_QWORD *)*v19;
      v23 = 136446467;
      v24 = v18;
      v25 = 2081;
      v26 = v19;
      LODWORD(v22) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 17, "#FenceMetrics, detected possible false exit, fence, %{public}s/%{private}s", &v23, v22);
      v21 = (uint8_t *)v20;
      sub_100512490("Generic", 1, 0, 0, "-[CLFenceStateChangeAnalytics evaluatePossibleFalseExitFromNotification:]_block_invoke", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
    if ((int)arc4random_uniform(0x64u) <= 2)
      objc_msgSend(*(id *)(a1 + 32), "promptPossibleFalseExitDetectionUI");
  }
}

char *sub_100FF0FFC(uint64_t a1, uint64_t a2)
{
  return sub_1008A44AC((char *)(a1 + 40), (__int128 *)(a2 + 40));
}

uint64_t sub_100FF1008(uint64_t a1)
{
  return sub_100115F78(a1 + 40);
}

void sub_100FF10A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_100115F78((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100FF10BC(uint64_t a1, uint64_t a2)
{
  id v3;
  NSObject *v4;
  const char *v5;
  const char *v7;
  const char *v8;
  uint8_t *v9;
  _QWORD v10[5];
  int v11;
  const __CFString *v12;
  __int16 v13;
  const char *v14;
  uint8_t buf[4];
  const __CFString *v16;
  __int16 v17;
  const char *v18;

  v3 = objc_msgSend(*(id *)(a1 + 32), "createMetricsDict:isInternal:", a2, *(unsigned __int8 *)(a1 + 40));
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102198880);
  v4 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    v5 = "YES";
    if (!*(_BYTE *)(a1 + 40))
      v5 = "NO";
    *(_DWORD *)buf = 138412546;
    v16 = CFSTR("com.apple.Geofence.StateChange");
    v17 = 2080;
    v18 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#FenceMetrics sending event %@, isInternal %s", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102198880);
    v7 = "YES";
    if (!*(_BYTE *)(a1 + 40))
      v7 = "NO";
    v11 = 138412546;
    v12 = CFSTR("com.apple.Geofence.StateChange");
    v13 = 2080;
    v14 = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "#FenceMetrics sending event %@, isInternal %s", &v11, 22);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "-[CLFenceStateChangeAnalytics submitAllMetricsFromNotification:]_block_invoke", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  objc_msgSend(v3, "enumerateKeysAndObjectsUsingBlock:", &stru_102198838);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100FF14EC;
  v10[3] = &unk_102132010;
  v10[4] = v3;
  return AnalyticsSendEventLazy(CFSTR("com.apple.Geofence.StateChange"), v10);
}

void sub_100FF1328(id a1, id a2, id a3, BOOL *a4)
{
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  id v10;
  __int16 v11;
  id v12;
  uint8_t buf[4];
  id v14;
  __int16 v15;
  id v16;

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102198880);
  v6 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    v14 = a2;
    v15 = 2112;
    v16 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#FenceMetrics key %@ : %@", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102198880);
    v9 = 138412546;
    v10 = a2;
    v11 = 2112;
    v12 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "#FenceMetrics key %@ : %@", &v9, 22);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "-[CLFenceStateChangeAnalytics submitAllMetricsFromNotification:]_block_invoke", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
}

uint64_t sub_100FF14EC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

void sub_100FF1514(id a1)
{
  qword_1022A0068 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeoFencing");
}

void sub_100FF1540(id a1, NSDictionary *a2, NSError *a3)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102198880);
  v3 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#FenceMetrics Launched TTR for user to report potential false exit (exit, followed by quick reentry to home", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102198880);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "#FenceMetrics Launched TTR for user to report potential false exit (exit, followed by quick reentry to home", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void _possibleFalseExitDetectionUIResponseHandler(CFUserNotificationRef, CFOptionFlags)_block_invoke", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
}

_QWORD *sub_100FF16C4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _BYTE v16[24];
  _BYTE *v17;
  _BYTE v18[24];
  _BYTE *v19;
  _BYTE v20[24];
  _BYTE *v21;

  sub_100270E34((uint64_t)v20, a3);
  sub_100270E34((uint64_t)v18, a4);
  sub_100270E34((uint64_t)v16, a5);
  sub_100D6C128((uint64_t)a1, a2, CFSTR("Harvest"), 1, 1, (uint64_t)v20, (uint64_t)v18, (uint64_t)v16);
  v9 = v17;
  if (v17 == v16)
  {
    v10 = 4;
    v9 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  v11 = v19;
  if (v19 == v18)
  {
    v12 = 4;
    v11 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_11;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_11:
  v13 = v21;
  if (v21 == v20)
  {
    v14 = 4;
    v13 = v20;
    goto LABEL_15;
  }
  if (v21)
  {
    v14 = 5;
LABEL_15:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  *a1 = off_1021988F0;
  sub_100119F3C(a1 + 17);
  return a1;
}

void sub_100FF181C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100D6C25C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100FF18E0(_QWORD *a1)
{
  *a1 = off_1021988F0;
  sub_10011A5A8(a1 + 17);
  return sub_100D6C25C((uint64_t)a1);
}

void sub_100FF1910(_QWORD *a1)
{
  *a1 = off_1021988F0;
  sub_10011A5A8(a1 + 17);
  sub_100D6C25C((uint64_t)a1);
  operator delete();
}

uint64_t sub_100FF1954(uint64_t a1)
{
  NSObject *v2;
  id v3;
  uint64_t v5;
  id v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  id v10;
  uint8_t buf[4];
  id v12;

  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_102198990);
  v2 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    *(_DWORD *)buf = 136446210;
    v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,clearOutAssetData", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102198990);
    v5 = qword_1022A02A8;
    v6 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    v9 = 136446210;
    v10 = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v5, 0, "#CLConfig,%{public}s,clearOutAssetData", &v9, 12);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLHarvestConfigAsset::clearOutAssetData()", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  sub_100119F3C(buf);
  sub_10052502C(a1 + 136, (uint64_t)buf);
  return sub_10011A5A8(buf);
}

void sub_100FF1B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

void sub_100FF1B48(uint64_t a1)
{
  NSObject *v2;
  id v3;
  int v4;
  int v5;
  std::string *v6;
  __int128 v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  void *v11;
  unint64_t size;
  int v13;
  void *v14;
  uint64_t v15;
  id v16;
  int v17;
  int v18;
  const char *v19;
  std::string *v20;
  __int128 __dst;
  _BYTE v22[7];
  char v23;
  void *__p[2];
  unsigned __int8 v25;
  _DWORD v26[2];
  std::string v27;
  std::string buf[68];

  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_102198990);
  v2 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    v4 = sub_1007FA8FC(*(void **)(a1 + 128));
    v5 = sub_1007FA8C8(*(void **)(a1 + 128));
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446722;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v3;
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = v4;
    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1026;
    HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,sending kNotificationHarvestSettings for asset,compatibilityVersion,%{public}d,contentVersion,%{public}d", (uint8_t *)buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102198990);
    v15 = qword_1022A02A8;
    v16 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    v17 = sub_1007FA8FC(*(void **)(a1 + 128));
    v18 = sub_1007FA8C8(*(void **)(a1 + 128));
    LODWORD(v27.__r_.__value_.__l.__data_) = 136446722;
    *(std::string::size_type *)((char *)v27.__r_.__value_.__r.__words + 4) = (std::string::size_type)v16;
    WORD2(v27.__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&v27.__r_.__value_.__r.__words[1] + 6) = v17;
    WORD1(v27.__r_.__value_.__r.__words[2]) = 1026;
    HIDWORD(v27.__r_.__value_.__r.__words[2]) = v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v15, 0, "#CLConfig,%{public}s,sending kNotificationHarvestSettings for asset,compatibilityVersion,%{public}d,contentVersion,%{public}d", &v27, 24);
    v20 = (std::string *)v19;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLHarvestConfigAsset::sendNotifications()", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  sub_1015A2E04(&v27, "#CLConfig,");
  v6 = std::string::append(&v27, (const std::string::value_type *)objc_msgSend(*(id *)(a1 + 16), "UTF8String"));
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  buf[0].__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  sub_1015A2E04(__p, ",kNotificationHarvestSettings,");
  if ((v25 & 0x80u) == 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  if ((v25 & 0x80u) == 0)
    v9 = v25;
  else
    v9 = (std::string::size_type)__p[1];
  v10 = std::string::append(buf, (const std::string::value_type *)v8, v9);
  v11 = (void *)v10->__r_.__value_.__r.__words[0];
  size = v10->__r_.__value_.__l.__size_;
  v26[0] = v10->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v26 + 3) = *(_DWORD *)((char *)&v10->__r_.__value_.__r.__words[2] + 3);
  v13 = SHIBYTE(v10->__r_.__value_.__r.__words[2]);
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if ((char)v25 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v27.__r_.__value_.__l.__data_);
    if ((v13 & 0x80000000) == 0)
      goto LABEL_18;
  }
  else if ((v13 & 0x80000000) == 0)
  {
LABEL_18:
    *(_QWORD *)&__dst = v11;
    *((_QWORD *)&__dst + 1) = size;
    *(_DWORD *)v22 = v26[0];
    *(_DWORD *)&v22[3] = *(_DWORD *)((char *)v26 + 3);
    v23 = v13;
    goto LABEL_21;
  }
  sub_100115CE4(&__dst, v11, size);
LABEL_21:
  v14 = (void *)sub_10011A5AC(a1 + 136);
  sub_1007FA930(&__dst, v14);
  if (v23 < 0)
    operator delete((void *)__dst);
  sub_100D6EF24(a1, 4, a1 + 136);
  if (v13 < 0)
    operator delete(v11);
}

void sub_100FF1EA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a23 < 0)
    operator delete(__p);
  if (a37 < 0)
    operator delete(a32);
  if (a30 < 0)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100FF1F1C(uint64_t a1)
{
  sub_100D6D640(a1, CFSTR("settings.plist"), a1 + 136);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
}

void sub_100FF1F54(id a1)
{
  qword_1022A02A8 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

double sub_100FF1F80(uint64_t a1, double *a2)
{
  double result;

  result = *a2;
  *(double *)(a1 + 8) = *a2;
  return result;
}

double sub_100FF1F8C(uint64_t a1, double *a2)
{
  double result;

  result = *a2;
  *(double *)(a1 + 16) = *a2;
  return result;
}

uint64_t sub_100FF1F98(uint64_t result, _QWORD *a2)
{
  *(_QWORD *)(result + 24) |= *a2;
  return result;
}

uint64_t sub_100FF1FAC(uint64_t result, _BYTE *a2)
{
  *(_BYTE *)(result + 32) = *a2;
  return result;
}

uint64_t sub_100FF1FB8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 56) = a2;
  return result;
}

uint64_t sub_100FF1FC0(uint64_t result, float a2)
{
  int v2;

  v2 = 24 * ((int)a2 / 24);
  if (v2 <= 32)
    v2 = 32;
  if (v2 >= 56)
    v2 = 56;
  *(_DWORD *)(result + 36) = v2;
  return result;
}

uint64_t sub_100FF2004(uint64_t result, float a2)
{
  int v2;

  v2 = 34 * ((int)a2 / 34);
  if (v2 <= 2000)
    v2 = 2000;
  if (v2 >= 36000)
    v2 = 36000;
  *(_DWORD *)(result + 40) = v2;
  return result;
}

uint64_t sub_100FF2048(uint64_t result, float a2)
{
  int v2;
  int v3;

  if ((int)a2 <= 0)
    v2 = -(-(int)a2 & 0x1F);
  else
    v2 = (int)a2 & 0x1F;
  v3 = ((int)a2 - v2) & ~(((int)a2 - v2) >> 31);
  if (v3 >= 32)
    v3 = 32;
  *(_DWORD *)(result + 44) = v3;
  return result;
}

uint64_t sub_100FF2078(uint64_t result, float a2)
{
  int v2;
  int v3;

  if ((int)a2 <= 0)
    v2 = -(-(int)a2 & 0x1F);
  else
    v2 = (int)a2 & 0x1F;
  v3 = ((int)a2 - v2) & ~(((int)a2 - v2) >> 31);
  if (v3 >= 32)
    v3 = 32;
  *(_DWORD *)(result + 48) = v3;
  return result;
}

uint64_t sub_100FF20A8(uint64_t result, float a2)
{
  int v2;
  int v3;

  if ((int)a2 <= 0)
    v2 = -(-(int)a2 & 0x1F);
  else
    v2 = (int)a2 & 0x1F;
  v3 = ((int)a2 - v2) & ~(((int)a2 - v2) >> 31);
  if (v3 >= 32)
    v3 = 32;
  *(_DWORD *)(result + 52) = v3;
  return result;
}

uint64_t sub_100FF20D8(uint64_t result, float a2)
{
  *(float *)(result + 64) = a2;
  return result;
}

uint64_t sub_100FF20E0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 72) = a2;
  return result;
}

uint64_t sub_100FF20E8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 80) = a2;
  return result;
}

uint64_t sub_100FF20F0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 88) = a2;
  return result;
}

void sub_100FF20F8(uint64_t a1, uint64_t a2, _BYTE *a3, _BYTE *a4, _BYTE *a5)
{
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  NSObject *v39;
  uint64_t v40;
  NSObject *v41;
  uint64_t v42;
  NSObject *v43;
  uint64_t v44;
  NSObject *v45;
  uint64_t v46;
  NSObject *v47;
  uint64_t v48;
  NSObject *v49;
  uint64_t v50;
  NSObject *v51;
  uint64_t v52;
  NSObject *v53;
  uint64_t v54;
  NSObject *v55;
  uint64_t v56;
  NSObject *v57;
  uint64_t v58;
  NSObject *v59;
  uint64_t v60;
  NSObject *v61;
  uint64_t v62;
  NSObject *v63;
  uint64_t v64;
  NSObject *v65;
  uint64_t v66;
  NSObject *v67;
  uint64_t v68;
  NSObject *v69;
  uint64_t v70;
  NSObject *v71;
  uint64_t v72;
  NSObject *v73;
  uint64_t v74;
  NSObject *v75;
  uint64_t v76;
  NSObject *v77;
  uint64_t v78;
  NSObject *v79;
  uint64_t v80;
  uint64_t v81;
  const char *v82;
  uint8_t *v83;
  uint64_t v84;
  const char *v85;
  uint8_t *v86;
  uint64_t v87;
  const char *v88;
  uint8_t *v89;
  uint64_t v90;
  const char *v91;
  uint8_t *v92;
  uint64_t v93;
  const char *v94;
  uint8_t *v95;
  uint64_t v96;
  const char *v97;
  uint8_t *v98;
  uint64_t v99;
  const char *v100;
  uint8_t *v101;
  uint64_t v102;
  const char *v103;
  uint8_t *v104;
  uint64_t v105;
  const char *v106;
  uint8_t *v107;
  uint64_t v108;
  const char *v109;
  uint8_t *v110;
  uint64_t v111;
  const char *v112;
  uint8_t *v113;
  uint64_t v114;
  const char *v115;
  uint8_t *v116;
  uint64_t v117;
  const char *v118;
  uint8_t *v119;
  uint64_t v120;
  const char *v121;
  uint8_t *v122;
  uint64_t v123;
  const char *v124;
  uint8_t *v125;
  uint64_t v126;
  const char *v127;
  uint8_t *v128;
  uint64_t v129;
  const char *v130;
  uint8_t *v131;
  uint64_t v132;
  const char *v133;
  uint8_t *v134;
  uint64_t v135;
  const char *v136;
  uint8_t *v137;
  uint64_t v138;
  const char *v139;
  uint8_t *v140;
  uint64_t v141;
  const char *v142;
  uint8_t *v143;
  uint64_t v144;
  const char *v145;
  uint8_t *v146;
  uint64_t v147;
  const char *v148;
  uint8_t *v149;
  uint64_t v150;
  const char *v151;
  uint8_t *v152;
  uint64_t v153;
  const char *v154;
  uint8_t *v155;
  uint64_t v156;
  const char *v157;
  uint8_t *v158;
  uint64_t v159;
  const char *v160;
  uint8_t *v161;
  uint64_t v162;
  const char *v163;
  uint8_t *v164;
  uint64_t v165;
  const char *v166;
  uint8_t *v167;
  uint64_t v168;
  const char *v169;
  uint8_t *v170;
  uint64_t v171;
  const char *v172;
  uint8_t *v173;
  uint64_t v174;
  const char *v175;
  uint8_t *v176;
  uint64_t v177;
  const char *v178;
  uint8_t *v179;
  uint64_t v180;
  const char *v181;
  uint8_t *v182;
  uint64_t v183;
  const char *v184;
  uint8_t *v185;
  double v186;
  int v187;
  const char *v188;
  __int16 v189;
  uint64_t v190;
  uint8_t buf[4];
  const char *v192;
  __int16 v193;
  uint64_t v194;

  v10 = *(_QWORD *)(a1 + 24);
  if ((v10 & 0x20) != 0)
  {
    *(_BYTE *)a2 = 1;
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102198A60);
    v11 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      v12 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)buf = 136315394;
      v192 = "impactCanceledBecauseOfMaxAccelNorm";
      v193 = 2048;
      v194 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102198A60);
      v81 = *(_QWORD *)(a1 + 8);
      v187 = 136315394;
      v188 = "impactCanceledBecauseOfMaxAccelNorm";
      v189 = 2048;
      v190 = v81;
      LODWORD(v186) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFallImpactMetrics: Setting %s for impact at %f", (const char *)&v187, v186);
      v83 = (uint8_t *)v82;
      sub_100512490("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v82);
      if (v83 != buf)
        free(v83);
    }
    *a3 = 1;
    v10 = *(_QWORD *)(a1 + 24);
    if ((v10 & 0x40) == 0)
    {
LABEL_3:
      if ((v10 & 0x80) == 0)
        goto LABEL_4;
      goto LABEL_49;
    }
  }
  else if ((v10 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  *(_BYTE *)a2 = 1;
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102198A60);
  v13 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    v14 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 136315394;
    v192 = "impactCanceledBecauseOfOtherHardThresholds";
    v193 = 2048;
    v194 = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102198A60);
    v84 = *(_QWORD *)(a1 + 8);
    v187 = 136315394;
    v188 = "impactCanceledBecauseOfOtherHardThresholds";
    v189 = 2048;
    v190 = v84;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFallImpactMetrics: Setting %s for impact at %f", (const char *)&v187, v186);
    v86 = (uint8_t *)v85;
    sub_100512490("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v85);
    if (v86 != buf)
      free(v86);
  }
  a3[1] = 1;
  v10 = *(_QWORD *)(a1 + 24);
  if ((v10 & 0x80) == 0)
  {
LABEL_4:
    if ((v10 & 0x100) == 0)
      goto LABEL_5;
    goto LABEL_55;
  }
LABEL_49:
  *(_BYTE *)a2 = 1;
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102198A60);
  v15 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    v16 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 136315394;
    v192 = "impactCanceledBecauseOfMultiPeaks";
    v193 = 2048;
    v194 = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102198A60);
    v87 = *(_QWORD *)(a1 + 8);
    v187 = 136315394;
    v188 = "impactCanceledBecauseOfMultiPeaks";
    v189 = 2048;
    v190 = v87;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFallImpactMetrics: Setting %s for impact at %f", (const char *)&v187, v186);
    v89 = (uint8_t *)v88;
    sub_100512490("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v88);
    if (v89 != buf)
      free(v89);
  }
  a3[2] = 1;
  v10 = *(_QWORD *)(a1 + 24);
  if ((v10 & 0x100) == 0)
  {
LABEL_5:
    if ((v10 & 0x400) == 0)
      goto LABEL_6;
    goto LABEL_61;
  }
LABEL_55:
  *(_BYTE *)a2 = 1;
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102198A60);
  v17 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    v18 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 136315394;
    v192 = "impactCanceledBecauseOfNaiveBayes";
    v193 = 2048;
    v194 = v18;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102198A60);
    v90 = *(_QWORD *)(a1 + 8);
    v187 = 136315394;
    v188 = "impactCanceledBecauseOfNaiveBayes";
    v189 = 2048;
    v190 = v90;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFallImpactMetrics: Setting %s for impact at %f", (const char *)&v187, v186);
    v92 = (uint8_t *)v91;
    sub_100512490("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v91);
    if (v92 != buf)
      free(v92);
  }
  a3[3] = 1;
  v10 = *(_QWORD *)(a1 + 24);
  if ((v10 & 0x400) == 0)
  {
LABEL_6:
    if ((v10 & 2) == 0)
      goto LABEL_7;
    goto LABEL_67;
  }
LABEL_61:
  *(_BYTE *)a2 = 1;
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102198A60);
  v19 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    v20 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 136315394;
    v192 = "impactCanceledBecauseOfExistingAlert";
    v193 = 2048;
    v194 = v20;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102198A60);
    v93 = *(_QWORD *)(a1 + 8);
    v187 = 136315394;
    v188 = "impactCanceledBecauseOfExistingAlert";
    v189 = 2048;
    v190 = v93;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFallImpactMetrics: Setting %s for impact at %f", (const char *)&v187, v186);
    v95 = (uint8_t *)v94;
    sub_100512490("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v94);
    if (v95 != buf)
      free(v95);
  }
  a3[4] = 1;
  v10 = *(_QWORD *)(a1 + 24);
  if ((v10 & 2) == 0)
  {
LABEL_7:
    if ((v10 & 0x200) == 0)
      goto LABEL_8;
    goto LABEL_73;
  }
LABEL_67:
  *(_BYTE *)a2 = 1;
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102198A60);
  v21 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    v22 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 136315394;
    v192 = "impactReplacedBecauseOfNewImpact";
    v193 = 2048;
    v194 = v22;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102198A60);
    v96 = *(_QWORD *)(a1 + 8);
    v187 = 136315394;
    v188 = "impactReplacedBecauseOfNewImpact";
    v189 = 2048;
    v190 = v96;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFallImpactMetrics: Setting %s for impact at %f", (const char *)&v187, v186);
    v98 = (uint8_t *)v97;
    sub_100512490("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v97);
    if (v98 != buf)
      free(v98);
  }
  a3[5] = 1;
  v10 = *(_QWORD *)(a1 + 24);
  if ((v10 & 0x200) == 0)
  {
LABEL_8:
    if ((v10 & 0x100000) == 0)
      goto LABEL_9;
    goto LABEL_79;
  }
LABEL_73:
  *(_BYTE *)a2 = 1;
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102198A60);
  v23 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    v24 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 136315394;
    v192 = "impactCanceledBecauseOfCyclingImpactThresholds";
    v193 = 2048;
    v194 = v24;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102198A60);
    v99 = *(_QWORD *)(a1 + 8);
    v187 = 136315394;
    v188 = "impactCanceledBecauseOfCyclingImpactThresholds";
    v189 = 2048;
    v190 = v99;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFallImpactMetrics: Setting %s for impact at %f", (const char *)&v187, v186);
    v101 = (uint8_t *)v100;
    sub_100512490("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v100);
    if (v101 != buf)
      free(v101);
  }
  a3[6] = 1;
  v10 = *(_QWORD *)(a1 + 24);
  if ((v10 & 0x100000) == 0)
  {
LABEL_9:
    if ((v10 & 0x200000) == 0)
      goto LABEL_10;
    goto LABEL_85;
  }
LABEL_79:
  *(_BYTE *)(a2 + 1) = 1;
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102198A60);
  v25 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    v26 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 136315394;
    v192 = "alertCanceledBecauseOfHighFrequencyFFT";
    v193 = 2048;
    v194 = v26;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102198A60);
    v102 = *(_QWORD *)(a1 + 8);
    v187 = 136315394;
    v188 = "alertCanceledBecauseOfHighFrequencyFFT";
    v189 = 2048;
    v190 = v102;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFallImpactMetrics: Setting %s for impact at %f", (const char *)&v187, v186);
    v104 = (uint8_t *)v103;
    sub_100512490("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v103);
    if (v104 != buf)
      free(v104);
  }
  *a4 = 1;
  v10 = *(_QWORD *)(a1 + 24);
  if ((v10 & 0x200000) == 0)
  {
LABEL_10:
    if ((v10 & 0x400000) == 0)
      goto LABEL_11;
    goto LABEL_91;
  }
LABEL_85:
  *(_BYTE *)(a2 + 1) = 1;
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102198A60);
  v27 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    v28 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 136315394;
    v192 = "alertCanceledBecauseOfLowFrequencyFFT";
    v193 = 2048;
    v194 = v28;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102198A60);
    v105 = *(_QWORD *)(a1 + 8);
    v187 = 136315394;
    v188 = "alertCanceledBecauseOfLowFrequencyFFT";
    v189 = 2048;
    v190 = v105;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFallImpactMetrics: Setting %s for impact at %f", (const char *)&v187, v186);
    v107 = (uint8_t *)v106;
    sub_100512490("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v106);
    if (v107 != buf)
      free(v107);
  }
  a4[1] = 1;
  v10 = *(_QWORD *)(a1 + 24);
  if ((v10 & 0x400000) == 0)
  {
LABEL_11:
    if ((v10 & 0x800000) == 0)
      goto LABEL_12;
    goto LABEL_97;
  }
LABEL_91:
  *(_BYTE *)(a2 + 1) = 1;
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102198A60);
  v29 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    v30 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 136315394;
    v192 = "alertCanceledBecauseOfDecimatedLowFrequencyFFT";
    v193 = 2048;
    v194 = v30;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102198A60);
    v108 = *(_QWORD *)(a1 + 8);
    v187 = 136315394;
    v188 = "alertCanceledBecauseOfDecimatedLowFrequencyFFT";
    v189 = 2048;
    v190 = v108;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFallImpactMetrics: Setting %s for impact at %f", (const char *)&v187, v186);
    v110 = (uint8_t *)v109;
    sub_100512490("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v109);
    if (v110 != buf)
      free(v110);
  }
  a4[2] = 1;
  v10 = *(_QWORD *)(a1 + 24);
  if ((v10 & 0x800000) == 0)
  {
LABEL_12:
    if ((v10 & 0x1000000) == 0)
      goto LABEL_13;
    goto LABEL_103;
  }
LABEL_97:
  *(_BYTE *)(a2 + 1) = 1;
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102198A60);
  v31 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    v32 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 136315394;
    v192 = "alertCanceledBecauseOfFFT";
    v193 = 2048;
    v194 = v32;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102198A60);
    v111 = *(_QWORD *)(a1 + 8);
    v187 = 136315394;
    v188 = "alertCanceledBecauseOfFFT";
    v189 = 2048;
    v190 = v111;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFallImpactMetrics: Setting %s for impact at %f", (const char *)&v187, v186);
    v113 = (uint8_t *)v112;
    sub_100512490("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v112);
    if (v113 != buf)
      free(v113);
  }
  a4[3] = 1;
  v10 = *(_QWORD *)(a1 + 24);
  if ((v10 & 0x1000000) == 0)
  {
LABEL_13:
    if ((v10 & 0x2000000) == 0)
      goto LABEL_14;
    goto LABEL_109;
  }
LABEL_103:
  *(_BYTE *)(a2 + 1) = 1;
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102198A60);
  v33 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    v34 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 136315394;
    v192 = "alertCanceledBecauseOfPeaksIQR";
    v193 = 2048;
    v194 = v34;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102198A60);
    v114 = *(_QWORD *)(a1 + 8);
    v187 = 136315394;
    v188 = "alertCanceledBecauseOfPeaksIQR";
    v189 = 2048;
    v190 = v114;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFallImpactMetrics: Setting %s for impact at %f", (const char *)&v187, v186);
    v116 = (uint8_t *)v115;
    sub_100512490("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v115);
    if (v116 != buf)
      free(v116);
  }
  a4[4] = 1;
  v10 = *(_QWORD *)(a1 + 24);
  if ((v10 & 0x2000000) == 0)
  {
LABEL_14:
    if ((v10 & 0x4000000) == 0)
      goto LABEL_15;
    goto LABEL_115;
  }
LABEL_109:
  *(_BYTE *)(a2 + 1) = 1;
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102198A60);
  v35 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    v36 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 136315394;
    v192 = "alertCanceledBecauseOfOffBody";
    v193 = 2048;
    v194 = v36;
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102198A60);
    v117 = *(_QWORD *)(a1 + 8);
    v187 = 136315394;
    v188 = "alertCanceledBecauseOfOffBody";
    v189 = 2048;
    v190 = v117;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFallImpactMetrics: Setting %s for impact at %f", (const char *)&v187, v186);
    v119 = (uint8_t *)v118;
    sub_100512490("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v118);
    if (v119 != buf)
      free(v119);
  }
  a4[5] = 1;
  v10 = *(_QWORD *)(a1 + 24);
  if ((v10 & 0x4000000) == 0)
  {
LABEL_15:
    if ((v10 & 0x8000000) == 0)
      goto LABEL_16;
    goto LABEL_121;
  }
LABEL_115:
  *(_BYTE *)(a2 + 1) = 1;
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102198A60);
  v37 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    v38 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 136315394;
    v192 = "alertCanceledBecauseOfRepetitiveMotion";
    v193 = 2048;
    v194 = v38;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102198A60);
    v120 = *(_QWORD *)(a1 + 8);
    v187 = 136315394;
    v188 = "alertCanceledBecauseOfRepetitiveMotion";
    v189 = 2048;
    v190 = v120;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFallImpactMetrics: Setting %s for impact at %f", (const char *)&v187, v186);
    v122 = (uint8_t *)v121;
    sub_100512490("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v121);
    if (v122 != buf)
      free(v122);
  }
  a4[6] = 1;
  v10 = *(_QWORD *)(a1 + 24);
  if ((v10 & 0x8000000) == 0)
  {
LABEL_16:
    if ((v10 & 0x10000000) == 0)
      goto LABEL_17;
    goto LABEL_127;
  }
LABEL_121:
  *(_BYTE *)(a2 + 1) = 1;
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102198A60);
  v39 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    v40 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 136315394;
    v192 = "alertCanceledBecauseOfAbsenceOfQuiessence";
    v193 = 2048;
    v194 = v40;
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102198A60);
    v123 = *(_QWORD *)(a1 + 8);
    v187 = 136315394;
    v188 = "alertCanceledBecauseOfAbsenceOfQuiessence";
    v189 = 2048;
    v190 = v123;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFallImpactMetrics: Setting %s for impact at %f", (const char *)&v187, v186);
    v125 = (uint8_t *)v124;
    sub_100512490("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v124);
    if (v125 != buf)
      free(v125);
  }
  a4[7] = 1;
  v10 = *(_QWORD *)(a1 + 24);
  if ((v10 & 0x10000000) == 0)
  {
LABEL_17:
    if ((v10 & 0x20000000) == 0)
      goto LABEL_18;
    goto LABEL_133;
  }
LABEL_127:
  *(_BYTE *)(a2 + 1) = 1;
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102198A60);
  v41 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    v42 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 136315394;
    v192 = "alertCanceledBecauseOfOffWristPre";
    v193 = 2048;
    v194 = v42;
    _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102198A60);
    v126 = *(_QWORD *)(a1 + 8);
    v187 = 136315394;
    v188 = "alertCanceledBecauseOfOffWristPre";
    v189 = 2048;
    v190 = v126;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFallImpactMetrics: Setting %s for impact at %f", (const char *)&v187, v186);
    v128 = (uint8_t *)v127;
    sub_100512490("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v127);
    if (v128 != buf)
      free(v128);
  }
  a4[8] = 1;
  v10 = *(_QWORD *)(a1 + 24);
  if ((v10 & 0x20000000) == 0)
  {
LABEL_18:
    if ((v10 & 0x40000000) == 0)
      goto LABEL_19;
    goto LABEL_139;
  }
LABEL_133:
  *(_BYTE *)(a2 + 1) = 1;
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102198A60);
  v43 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    v44 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 136315394;
    v192 = "alertCanceledBecauseOfOffWristPost";
    v193 = 2048;
    v194 = v44;
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102198A60);
    v129 = *(_QWORD *)(a1 + 8);
    v187 = 136315394;
    v188 = "alertCanceledBecauseOfOffWristPost";
    v189 = 2048;
    v190 = v129;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFallImpactMetrics: Setting %s for impact at %f", (const char *)&v187, v186);
    v131 = (uint8_t *)v130;
    sub_100512490("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v130);
    if (v131 != buf)
      free(v131);
  }
  a4[9] = 1;
  v10 = *(_QWORD *)(a1 + 24);
  if ((v10 & 0x40000000) == 0)
  {
LABEL_19:
    if ((v10 & 0x80000000) == 0)
      goto LABEL_20;
    goto LABEL_145;
  }
LABEL_139:
  *(_BYTE *)(a2 + 1) = 1;
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102198A60);
  v45 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    v46 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 136315394;
    v192 = "alertCanceledBecauseOfFeatureDisabled";
    v193 = 2048;
    v194 = v46;
    _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102198A60);
    v132 = *(_QWORD *)(a1 + 8);
    v187 = 136315394;
    v188 = "alertCanceledBecauseOfFeatureDisabled";
    v189 = 2048;
    v190 = v132;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFallImpactMetrics: Setting %s for impact at %f", (const char *)&v187, v186);
    v134 = (uint8_t *)v133;
    sub_100512490("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v133);
    if (v134 != buf)
      free(v134);
  }
  a4[10] = 1;
  v10 = *(_QWORD *)(a1 + 24);
  if ((v10 & 0x80000000) == 0)
  {
LABEL_20:
    if ((v10 & 0x100000000) == 0)
      goto LABEL_21;
    goto LABEL_151;
  }
LABEL_145:
  *(_BYTE *)(a2 + 1) = 1;
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102198A60);
  v47 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    v48 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 136315394;
    v192 = "alertCanceledBecauseOfOnCharger";
    v193 = 2048;
    v194 = v48;
    _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102198A60);
    v135 = *(_QWORD *)(a1 + 8);
    v187 = 136315394;
    v188 = "alertCanceledBecauseOfOnCharger";
    v189 = 2048;
    v190 = v135;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFallImpactMetrics: Setting %s for impact at %f", (const char *)&v187, v186);
    v137 = (uint8_t *)v136;
    sub_100512490("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v136);
    if (v137 != buf)
      free(v137);
  }
  a4[11] = 1;
  v10 = *(_QWORD *)(a1 + 24);
  if ((v10 & 0x100000000) == 0)
  {
LABEL_21:
    if ((v10 & 0x200000000) == 0)
      goto LABEL_22;
    goto LABEL_157;
  }
LABEL_151:
  *(_BYTE *)(a2 + 1) = 1;
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102198A60);
  v49 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    v50 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 136315394;
    v192 = "alertCanceledBecauseOfAlreadyGatedBefore";
    v193 = 2048;
    v194 = v50;
    _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102198A60);
    v138 = *(_QWORD *)(a1 + 8);
    v187 = 136315394;
    v188 = "alertCanceledBecauseOfAlreadyGatedBefore";
    v189 = 2048;
    v190 = v138;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFallImpactMetrics: Setting %s for impact at %f", (const char *)&v187, v186);
    v140 = (uint8_t *)v139;
    sub_100512490("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v139);
    if (v140 != buf)
      free(v140);
  }
  a4[12] = 1;
  v10 = *(_QWORD *)(a1 + 24);
  if ((v10 & 0x200000000) == 0)
  {
LABEL_22:
    if ((v10 & 0x400000000) == 0)
      goto LABEL_23;
    goto LABEL_163;
  }
LABEL_157:
  *(_BYTE *)(a2 + 1) = 1;
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102198A60);
  v51 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    v52 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 136315394;
    v192 = "alertCanceledBecauseOfSimilarPeaks";
    v193 = 2048;
    v194 = v52;
    _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102198A60);
    v141 = *(_QWORD *)(a1 + 8);
    v187 = 136315394;
    v188 = "alertCanceledBecauseOfSimilarPeaks";
    v189 = 2048;
    v190 = v141;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFallImpactMetrics: Setting %s for impact at %f", (const char *)&v187, v186);
    v143 = (uint8_t *)v142;
    sub_100512490("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v142);
    if (v143 != buf)
      free(v143);
  }
  a4[13] = 1;
  v10 = *(_QWORD *)(a1 + 24);
  if ((v10 & 0x400000000) == 0)
  {
LABEL_23:
    if ((v10 & 0x800000000) == 0)
      goto LABEL_24;
    goto LABEL_169;
  }
LABEL_163:
  *(_BYTE *)(a2 + 1) = 1;
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102198A60);
  v53 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    v54 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 136315394;
    v192 = "alertCanceledBecauseOfLockedNoMotionBeforeImpact";
    v193 = 2048;
    v194 = v54;
    _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102198A60);
    v144 = *(_QWORD *)(a1 + 8);
    v187 = 136315394;
    v188 = "alertCanceledBecauseOfLockedNoMotionBeforeImpact";
    v189 = 2048;
    v190 = v144;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFallImpactMetrics: Setting %s for impact at %f", (const char *)&v187, v186);
    v146 = (uint8_t *)v145;
    sub_100512490("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v145);
    if (v146 != buf)
      free(v146);
  }
  a4[14] = 1;
  v10 = *(_QWORD *)(a1 + 24);
  if ((v10 & 0x800000000) == 0)
  {
LABEL_24:
    if ((v10 & 0x1000000000) == 0)
      goto LABEL_25;
    goto LABEL_175;
  }
LABEL_169:
  *(_BYTE *)(a2 + 1) = 1;
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102198A60);
  v55 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    v56 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 136315394;
    v192 = "alertCanceledBecauseOfReferee";
    v193 = 2048;
    v194 = v56;
    _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102198A60);
    v147 = *(_QWORD *)(a1 + 8);
    v187 = 136315394;
    v188 = "alertCanceledBecauseOfReferee";
    v189 = 2048;
    v190 = v147;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFallImpactMetrics: Setting %s for impact at %f", (const char *)&v187, v186);
    v149 = (uint8_t *)v148;
    sub_100512490("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v148);
    if (v149 != buf)
      free(v149);
  }
  a4[15] = 1;
  v10 = *(_QWORD *)(a1 + 24);
  if ((v10 & 0x1000000000) == 0)
  {
LABEL_25:
    if ((v10 & 0x2000000000) == 0)
      goto LABEL_26;
    goto LABEL_181;
  }
LABEL_175:
  *(_BYTE *)(a2 + 1) = 1;
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102198A60);
  v57 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    v58 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 136315394;
    v192 = "alertCanceledBecauseStand";
    v193 = 2048;
    v194 = v58;
    _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102198A60);
    v150 = *(_QWORD *)(a1 + 8);
    v187 = 136315394;
    v188 = "alertCanceledBecauseStand";
    v189 = 2048;
    v190 = v150;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFallImpactMetrics: Setting %s for impact at %f", (const char *)&v187, v186);
    v152 = (uint8_t *)v151;
    sub_100512490("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v151);
    if (v152 != buf)
      free(v152);
  }
  a4[16] = 1;
  v10 = *(_QWORD *)(a1 + 24);
  if ((v10 & 0x2000000000) == 0)
  {
LABEL_26:
    if ((v10 & 0x4000000000) == 0)
      goto LABEL_27;
    goto LABEL_187;
  }
LABEL_181:
  *(_BYTE *)(a2 + 1) = 1;
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102198A60);
  v59 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    v60 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 136315394;
    v192 = "alertCanceledBecauseActive";
    v193 = 2048;
    v194 = v60;
    _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102198A60);
    v153 = *(_QWORD *)(a1 + 8);
    v187 = 136315394;
    v188 = "alertCanceledBecauseActive";
    v189 = 2048;
    v190 = v153;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFallImpactMetrics: Setting %s for impact at %f", (const char *)&v187, v186);
    v155 = (uint8_t *)v154;
    sub_100512490("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v154);
    if (v155 != buf)
      free(v155);
  }
  a4[17] = 1;
  v10 = *(_QWORD *)(a1 + 24);
  if ((v10 & 0x4000000000) == 0)
  {
LABEL_27:
    if ((v10 & 0x4000000000000) == 0)
      goto LABEL_28;
    goto LABEL_193;
  }
LABEL_187:
  *(_BYTE *)(a2 + 1) = 1;
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102198A60);
  v61 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    v62 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 136315394;
    v192 = "alertCanceledBecauseSteps";
    v193 = 2048;
    v194 = v62;
    _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102198A60);
    v156 = *(_QWORD *)(a1 + 8);
    v187 = 136315394;
    v188 = "alertCanceledBecauseSteps";
    v189 = 2048;
    v190 = v156;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFallImpactMetrics: Setting %s for impact at %f", (const char *)&v187, v186);
    v158 = (uint8_t *)v157;
    sub_100512490("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v157);
    if (v158 != buf)
      free(v158);
  }
  a4[18] = 1;
  v10 = *(_QWORD *)(a1 + 24);
  if ((v10 & 0x4000000000000) == 0)
  {
LABEL_28:
    if ((v10 & 0x8000000000000) == 0)
      goto LABEL_29;
    goto LABEL_199;
  }
LABEL_193:
  *(_BYTE *)(a2 + 2) = 1;
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102198A60);
  v63 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    v64 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 136315394;
    v192 = "sosCanceledBecauseUserResponse";
    v193 = 2048;
    v194 = v64;
    _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102198A60);
    v159 = *(_QWORD *)(a1 + 8);
    v187 = 136315394;
    v188 = "sosCanceledBecauseUserResponse";
    v189 = 2048;
    v190 = v159;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFallImpactMetrics: Setting %s for impact at %f", (const char *)&v187, v186);
    v161 = (uint8_t *)v160;
    sub_100512490("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v160);
    if (v161 != buf)
      free(v161);
  }
  a5[5] = 1;
  v10 = *(_QWORD *)(a1 + 24);
  if ((v10 & 0x8000000000000) == 0)
  {
LABEL_29:
    if ((v10 & 0x10000000000000) == 0)
      goto LABEL_30;
    goto LABEL_205;
  }
LABEL_199:
  *(_BYTE *)(a2 + 2) = 1;
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102198A60);
  v65 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    v66 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 136315394;
    v192 = "sosCanceledBecauseOffWrist";
    v193 = 2048;
    v194 = v66;
    _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102198A60);
    v162 = *(_QWORD *)(a1 + 8);
    v187 = 136315394;
    v188 = "sosCanceledBecauseOffWrist";
    v189 = 2048;
    v190 = v162;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFallImpactMetrics: Setting %s for impact at %f", (const char *)&v187, v186);
    v164 = (uint8_t *)v163;
    sub_100512490("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v163);
    if (v164 != buf)
      free(v164);
  }
  a5[6] = 1;
  v10 = *(_QWORD *)(a1 + 24);
  if ((v10 & 0x10000000000000) == 0)
  {
LABEL_30:
    if ((v10 & 0x20000000000000) == 0)
      goto LABEL_31;
    goto LABEL_211;
  }
LABEL_205:
  *(_BYTE *)(a2 + 2) = 1;
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102198A60);
  v67 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    v68 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 136315394;
    v192 = "sosCanceledBecauseStand";
    v193 = 2048;
    v194 = v68;
    _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102198A60);
    v165 = *(_QWORD *)(a1 + 8);
    v187 = 136315394;
    v188 = "sosCanceledBecauseStand";
    v189 = 2048;
    v190 = v165;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFallImpactMetrics: Setting %s for impact at %f", (const char *)&v187, v186);
    v167 = (uint8_t *)v166;
    sub_100512490("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v166);
    if (v167 != buf)
      free(v167);
  }
  a5[7] = 1;
  v10 = *(_QWORD *)(a1 + 24);
  if ((v10 & 0x20000000000000) == 0)
  {
LABEL_31:
    if ((v10 & 0x40000000000000) == 0)
      goto LABEL_32;
    goto LABEL_217;
  }
LABEL_211:
  *(_BYTE *)(a2 + 2) = 1;
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102198A60);
  v69 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    v70 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 136315394;
    v192 = "sosCanceledBecauseActive";
    v193 = 2048;
    v194 = v70;
    _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102198A60);
    v168 = *(_QWORD *)(a1 + 8);
    v187 = 136315394;
    v188 = "sosCanceledBecauseActive";
    v189 = 2048;
    v190 = v168;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFallImpactMetrics: Setting %s for impact at %f", (const char *)&v187, v186);
    v170 = (uint8_t *)v169;
    sub_100512490("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v169);
    if (v170 != buf)
      free(v170);
  }
  a5[8] = 1;
  v10 = *(_QWORD *)(a1 + 24);
  if ((v10 & 0x40000000000000) == 0)
  {
LABEL_32:
    if ((v10 & 0x80000000000000) == 0)
      goto LABEL_33;
    goto LABEL_223;
  }
LABEL_217:
  *(_BYTE *)(a2 + 2) = 1;
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102198A60);
  v71 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    v72 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 136315394;
    v192 = "sosCanceledBecauseSteps";
    v193 = 2048;
    v194 = v72;
    _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102198A60);
    v171 = *(_QWORD *)(a1 + 8);
    v187 = 136315394;
    v188 = "sosCanceledBecauseSteps";
    v189 = 2048;
    v190 = v171;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFallImpactMetrics: Setting %s for impact at %f", (const char *)&v187, v186);
    v173 = (uint8_t *)v172;
    sub_100512490("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v172);
    if (v173 != buf)
      free(v173);
  }
  a5[9] = 1;
  v10 = *(_QWORD *)(a1 + 24);
  if ((v10 & 0x80000000000000) == 0)
  {
LABEL_33:
    if ((v10 & 0x2000000000000000) == 0)
      goto LABEL_34;
    goto LABEL_229;
  }
LABEL_223:
  *(_BYTE *)(a2 + 2) = 1;
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102198A60);
  v73 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    v74 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 136315394;
    v192 = "sosCanceledBecauseAbsenceOfLongLie";
    v193 = 2048;
    v194 = v74;
    _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102198A60);
    v174 = *(_QWORD *)(a1 + 8);
    v187 = 136315394;
    v188 = "sosCanceledBecauseAbsenceOfLongLie";
    v189 = 2048;
    v190 = v174;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFallImpactMetrics: Setting %s for impact at %f", (const char *)&v187, v186);
    v176 = (uint8_t *)v175;
    sub_100512490("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v175);
    if (v176 != buf)
      free(v176);
  }
  a5[10] = 1;
  v10 = *(_QWORD *)(a1 + 24);
  if ((v10 & 0x2000000000000000) == 0)
  {
LABEL_34:
    if ((v10 & 0x4000000000000000) == 0)
      goto LABEL_35;
    goto LABEL_235;
  }
LABEL_229:
  *(_BYTE *)(a2 + 2) = 1;
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102198A60);
  v75 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    v76 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 136315394;
    v192 = "sosCallConsidered";
    v193 = 2048;
    v194 = v76;
    _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102198A60);
    v177 = *(_QWORD *)(a1 + 8);
    v187 = 136315394;
    v188 = "sosCallConsidered";
    v189 = 2048;
    v190 = v177;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFallImpactMetrics: Setting %s for impact at %f", (const char *)&v187, v186);
    v179 = (uint8_t *)v178;
    sub_100512490("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v178);
    if (v179 != buf)
      free(v179);
  }
  a5[11] = 1;
  v10 = *(_QWORD *)(a1 + 24);
  if ((v10 & 0x4000000000000000) == 0)
  {
LABEL_35:
    if ((v10 & 0x8000000000000000) == 0)
      goto LABEL_247;
    goto LABEL_241;
  }
LABEL_235:
  *(_BYTE *)(a2 + 2) = 1;
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102198A60);
  v77 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    v78 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 136315394;
    v192 = "sosCallScheduled";
    v193 = 2048;
    v194 = v78;
    _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102198A60);
    v180 = *(_QWORD *)(a1 + 8);
    v187 = 136315394;
    v188 = "sosCallScheduled";
    v189 = 2048;
    v190 = v180;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFallImpactMetrics: Setting %s for impact at %f", (const char *)&v187, v186);
    v182 = (uint8_t *)v181;
    sub_100512490("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v181);
    if (v182 != buf)
      free(v182);
  }
  a5[12] = 1;
  if ((*(_QWORD *)(a1 + 24) & 0x8000000000000000) != 0)
  {
LABEL_241:
    *(_BYTE *)(a2 + 2) = 1;
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102198A60);
    v79 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      v80 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)buf = 136315394;
      v192 = "sosCallPlaced";
      v193 = 2048;
      v194 = v80;
      _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102198A60);
      v183 = *(_QWORD *)(a1 + 8);
      v187 = 136315394;
      v188 = "sosCallPlaced";
      v189 = 2048;
      v190 = v183;
      LODWORD(v186) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFallImpactMetrics: Setting %s for impact at %f", (const char *)&v187, v186);
      v185 = (uint8_t *)v184;
      sub_100512490("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v184);
      if (v185 != buf)
        free(v185);
    }
    a5[13] = 1;
  }
LABEL_247:
  if (*(_BYTE *)(a2 + 2))
  {
    *(_BYTE *)(a2 + 1) = 1;
    *(_WORD *)(a2 + 4) = 257;
  }
  if (*(_BYTE *)(a2 + 1))
  {
    *(_BYTE *)a2 = 1;
    *(_BYTE *)(a2 + 3) = 1;
  }
  if (a5[5])
    *(_BYTE *)(a2 + 7) = 1;
  if (!a5[11] || a5[6])
    *(_BYTE *)(a2 + 8) = 1;
  if (a5[13] | a5[12])
    *(_BYTE *)(a2 + 6) = 1;
}

void sub_100FF5920(uint64_t a1, _BYTE *a2)
{
  int v2;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint8_t *v17;
  uint64_t v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  const char *v22;
  uint8_t *v23;
  uint64_t v24;
  const char *v25;
  uint8_t *v26;
  uint64_t v27;
  const char *v28;
  uint8_t *v29;
  double v30;
  int v31;
  const char *v32;
  __int16 v33;
  uint64_t v34;
  uint8_t buf[4];
  const char *v36;
  __int16 v37;
  uint64_t v38;

  v2 = *(unsigned __int8 *)(a1 + 32);
  if (*(_BYTE *)(a1 + 32))
  {
    if (v2 == 1)
    {
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102198A60);
      v5 = qword_10229FD98;
      if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
      {
        v6 = *(_QWORD *)(a1 + 8);
        *(_DWORD *)buf = 136315394;
        v36 = "ResponseConfirmedActionRequested";
        v37 = 2048;
        v38 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting isUser%s for impact at %f", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD90 != -1)
          dispatch_once(&qword_10229FD90, &stru_102198A60);
        v15 = *(_QWORD *)(a1 + 8);
        v31 = 136315394;
        v32 = "ResponseConfirmedActionRequested";
        v33 = 2048;
        v34 = v15;
        LODWORD(v30) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFallImpactMetrics: Setting isUser%s for impact at %f", (const char *)&v31, v30);
        v17 = (uint8_t *)v16;
        sub_100512490("Generic", 1, 0, 2, "void CLFallImpactMetrics::processUserResponse(SOSCandidateEvent &) const", "%s\n", v16);
        if (v17 != buf)
          free(v17);
      }
      *a2 = 1;
      v2 = *(unsigned __int8 *)(a1 + 32);
    }
    if (v2 == 2)
    {
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102198A60);
      v7 = qword_10229FD98;
      if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
      {
        v8 = *(_QWORD *)(a1 + 8);
        *(_DWORD *)buf = 136315394;
        v36 = "ResponseConfirmedNoActionRequested";
        v37 = 2048;
        v38 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting isUser%s for impact at %f", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD90 != -1)
          dispatch_once(&qword_10229FD90, &stru_102198A60);
        v18 = *(_QWORD *)(a1 + 8);
        v31 = 136315394;
        v32 = "ResponseConfirmedNoActionRequested";
        v33 = 2048;
        v34 = v18;
        LODWORD(v30) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFallImpactMetrics: Setting isUser%s for impact at %f", (const char *)&v31, v30);
        v20 = (uint8_t *)v19;
        sub_100512490("Generic", 1, 0, 2, "void CLFallImpactMetrics::processUserResponse(SOSCandidateEvent &) const", "%s\n", v19);
        if (v20 != buf)
          free(v20);
      }
      a2[1] = 1;
      v2 = *(unsigned __int8 *)(a1 + 32);
    }
    if (v2 == 3)
    {
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102198A60);
      v9 = qword_10229FD98;
      if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
      {
        v10 = *(_QWORD *)(a1 + 8);
        *(_DWORD *)buf = 136315394;
        v36 = "ResponseDismissed";
        v37 = 2048;
        v38 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting isUser%s for impact at %f", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD90 != -1)
          dispatch_once(&qword_10229FD90, &stru_102198A60);
        v21 = *(_QWORD *)(a1 + 8);
        v31 = 136315394;
        v32 = "ResponseDismissed";
        v33 = 2048;
        v34 = v21;
        LODWORD(v30) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFallImpactMetrics: Setting isUser%s for impact at %f", (const char *)&v31, v30);
        v23 = (uint8_t *)v22;
        sub_100512490("Generic", 1, 0, 2, "void CLFallImpactMetrics::processUserResponse(SOSCandidateEvent &) const", "%s\n", v22);
        if (v23 != buf)
          free(v23);
      }
      a2[2] = 1;
      v2 = *(unsigned __int8 *)(a1 + 32);
    }
    if (v2 == 4)
    {
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102198A60);
      v11 = qword_10229FD98;
      if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
      {
        v12 = *(_QWORD *)(a1 + 8);
        *(_DWORD *)buf = 136315394;
        v36 = "ResponseRejected";
        v37 = 2048;
        v38 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting isUser%s for impact at %f", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD90 != -1)
          dispatch_once(&qword_10229FD90, &stru_102198A60);
        v24 = *(_QWORD *)(a1 + 8);
        v31 = 136315394;
        v32 = "ResponseRejected";
        v33 = 2048;
        v34 = v24;
        LODWORD(v30) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFallImpactMetrics: Setting isUser%s for impact at %f", (const char *)&v31, v30);
        v26 = (uint8_t *)v25;
        sub_100512490("Generic", 1, 0, 2, "void CLFallImpactMetrics::processUserResponse(SOSCandidateEvent &) const", "%s\n", v25);
        if (v26 != buf)
          free(v26);
      }
      a2[3] = 1;
      v2 = *(unsigned __int8 *)(a1 + 32);
    }
    if (v2 == 5)
    {
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102198A60);
      v13 = qword_10229FD98;
      if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
      {
        v14 = *(_QWORD *)(a1 + 8);
        *(_DWORD *)buf = 136315394;
        v36 = "ResponseAutomaticActionRequested";
        v37 = 2048;
        v38 = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting isUser%s for impact at %f", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD90 != -1)
          dispatch_once(&qword_10229FD90, &stru_102198A60);
        v27 = *(_QWORD *)(a1 + 8);
        v31 = 136315394;
        v32 = "ResponseAutomaticActionRequested";
        v33 = 2048;
        v34 = v27;
        LODWORD(v30) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFallImpactMetrics: Setting isUser%s for impact at %f", (const char *)&v31, v30);
        v29 = (uint8_t *)v28;
        sub_100512490("Generic", 1, 0, 2, "void CLFallImpactMetrics::processUserResponse(SOSCandidateEvent &) const", "%s\n", v28);
        if (v29 != buf)
          free(v29);
      }
      a2[4] = 1;
    }
  }
}

void sub_100FF612C(uint64_t a1)
{
  __int128 v2;
  int v3;
  int v4;
  int v5;
  int v6;
  NSObject *v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  _QWORD v11[5];
  _BYTE v12[28];
  _QWORD v13[2];
  _QWORD v14[5];
  _BYTE v15[28];
  _BYTE v16[19];
  _QWORD v17[5];
  _BYTE v18[28];
  _DWORD v19[3];
  _QWORD v20[2];
  _BYTE v21[19];
  _DWORD v22[2];
  _BYTE v23[28];
  _DWORD v24[2];
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;

  v23[8] = 0;
  *(_QWORD *)v23 = 0;
  *(_QWORD *)&v2 = 0x8000000080000000;
  *((_QWORD *)&v2 + 1) = 0x8000000080000000;
  *(_OWORD *)&v23[12] = v2;
  *(_DWORD *)((char *)v22 + 3) = 0;
  v22[0] = 0;
  memset(v21, 0, sizeof(v21));
  memset(v20, 0, 14);
  sub_100FF20F8(a1, (uint64_t)v23, v22, v21, v20);
  v3 = v23[1];
  if (v23[1])
  {
    v4 = *(_DWORD *)(a1 + 72);
    v5 = 100 * (v4 - *(_DWORD *)(a1 + 80));
    *(_DWORD *)&v23[16] = (int)(float)(*(float *)(a1 + 64) * 100.0);
    *(_DWORD *)&v23[20] = v5;
    *(_DWORD *)&v23[24] = 100 * (*(_DWORD *)(a1 + 88) - v4);
  }
  v6 = v23[2];
  if (v23[2])
    sub_100FF5920(a1, v20);
  *(_DWORD *)&v23[12] = (int)(*(double *)(a1 + 16) - *(double *)(a1 + 8));
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102198A60);
  v7 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109632;
    v30 = v23[0];
    v31 = 1024;
    v32 = v3;
    v33 = 1024;
    v34 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CA - Events about to be created, isImpactCandidateEvent=%d, isAlertCandidateEvent=%d, isSOSCandidateEvent=%d", buf, 0x14u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102198A60);
    v8 = v23[0];
    v24[0] = 67109632;
    v24[1] = v23[0];
    v25 = 1024;
    v26 = v3;
    v27 = 1024;
    v28 = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CA - Events about to be created, isImpactCandidateEvent=%d, isAlertCandidateEvent=%d, isSOSCandidateEvent=%d", v24, 20, LODWORD(v11[0]));
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLFallImpactMetrics::sendEventToCoreAnalytics() const", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  else
  {
    v8 = v23[0];
  }
  if (v8)
  {
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_100FF64DC;
    v17[3] = &unk_1021989B0;
    v17[4] = a1;
    *(_OWORD *)v18 = *(_OWORD *)v23;
    *(_OWORD *)&v18[12] = *(_OWORD *)&v23[12];
    v19[0] = v22[0];
    *(_DWORD *)((char *)v19 + 3) = *(_DWORD *)((char *)v22 + 3);
    AnalyticsSendEventLazy(CFSTR("com.apple.CoreMotion.FallImpactCandidate"), v17);
  }
  if (v3)
  {
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_100FF6768;
    v14[3] = &unk_1021989D0;
    v14[4] = a1;
    *(_OWORD *)v15 = *(_OWORD *)v23;
    *(_OWORD *)&v15[12] = *(_OWORD *)&v23[12];
    *(_OWORD *)v16 = *(_OWORD *)v21;
    *(_DWORD *)&v16[15] = *(_DWORD *)&v21[15];
    AnalyticsSendEventLazy(CFSTR("com.apple.CoreMotion.FallAlertCandidate"), v14);
  }
  if (v6)
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100FF6B0C;
    v11[3] = &unk_1021989F0;
    v11[4] = a1;
    *(_OWORD *)v12 = *(_OWORD *)v23;
    *(_OWORD *)&v12[12] = *(_OWORD *)&v23[12];
    v13[0] = v20[0];
    *(_QWORD *)((char *)v13 + 6) = *(_QWORD *)((char *)v20 + 6);
    AnalyticsSendEventLazy(CFSTR("com.apple.CoreMotion.FallSOSCandidate"), v11);
  }
}

NSDictionary *sub_100FF64DC(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[19];
  _QWORD v5[19];

  v2 = *(_QWORD *)(a1 + 32);
  v4[0] = CFSTR("isFallImpact");
  v5[0] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 43));
  v4[1] = CFSTR("isFallAlert");
  v5[1] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 44));
  v4[2] = CFSTR("isSOSConsidered");
  v5[2] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 45));
  v4[3] = CFSTR("isSOSCallPlaced");
  v5[3] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 46));
  v4[4] = CFSTR("userCancelledSOS");
  v5[4] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 47));
  v4[5] = CFSTR("algCancelledSOS");
  v5[5] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 48));
  v4[6] = CFSTR("impactCanceledBecauseOfMaxAccelNorm");
  v5[6] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 68));
  v4[7] = CFSTR("impactCanceledBecauseOfOtherHardThresholds");
  v5[7] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 69));
  v4[8] = CFSTR("impactCanceledBecauseOfMultiPeaks");
  v5[8] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 70));
  v4[9] = CFSTR("impactCanceledBecauseOfNaiveBayes");
  v5[9] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 71));
  v4[10] = CFSTR("impactCanceledBecauseOfExistingAlert");
  v5[10] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 72));
  v4[11] = CFSTR("impactReplacedBecauseOfNewImpact");
  v5[11] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 73));
  v4[12] = CFSTR("impactCanceledBecauseOfCyclingImpactThresholds");
  v5[12] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 74));
  v4[13] = CFSTR("maxAccelNorm");
  v5[13] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 36));
  v4[14] = CFSTR("maxAbsX");
  v5[14] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 44));
  v4[15] = CFSTR("maxAbsY");
  v5[15] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 48));
  v4[16] = CFSTR("maxAbsZ");
  v5[16] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 52));
  v4[17] = CFSTR("jerkVectorMagnitude");
  v5[17] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 40));
  v4[18] = CFSTR("workoutType");
  v5[18] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(v2 + 56));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 19);
}

NSDictionary *sub_100FF6768(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[29];
  _QWORD v5[29];

  v2 = *(_QWORD *)(a1 + 32);
  v4[0] = CFSTR("isFallImpact");
  v5[0] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 43));
  v4[1] = CFSTR("isFallAlert");
  v5[1] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 44));
  v4[2] = CFSTR("isSOSConsidered");
  v5[2] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 45));
  v4[3] = CFSTR("isSOSCallPlaced");
  v5[3] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 46));
  v4[4] = CFSTR("userCancelledSOS");
  v5[4] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 47));
  v4[5] = CFSTR("alertCanceledBecauseOfHighFrequencyFFT");
  v5[5] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 68));
  v4[6] = CFSTR("alertCanceledBecauseOfLowFrequencyFFT");
  v5[6] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 69));
  v4[7] = CFSTR("alertCanceledBecauseOfDecimatedLowFrequencyFFT");
  v5[7] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 70));
  v4[8] = CFSTR("alertCanceledBecauseOfFFT");
  v5[8] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 71));
  v4[9] = CFSTR("alertCanceledBecauseOfPeaksIQR");
  v5[9] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 72));
  v4[10] = CFSTR("alertCanceledBecauseOfOffBody");
  v5[10] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 73));
  v4[11] = CFSTR("alertCanceledBecauseOfRepetitiveMotion");
  v5[11] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 74));
  v4[12] = CFSTR("alertCanceledBecauseOfAbsenceOfQuiessence");
  v5[12] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 75));
  v4[13] = CFSTR("alertCanceledBecauseOfOffWristPre");
  v5[13] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 76));
  v4[14] = CFSTR("alertCanceledBecauseOfOffWristPost");
  v5[14] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 77));
  v4[15] = CFSTR("alertCanceledBecauseOfFeatureDisabled");
  v5[15] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 78));
  v4[16] = CFSTR("alertCanceledBecauseOfOnCharger");
  v5[16] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 79));
  v4[17] = CFSTR("alertCanceledBecauseOfAlreadyGatedBefore");
  v5[17] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 80));
  v4[18] = CFSTR("alertCanceledBecauseOfSimilarPeaks");
  v5[18] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 81));
  v4[19] = CFSTR("alertCanceledBecauseOfLockedNoMotionBeforeImpact");
  v5[19] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 82));
  v4[20] = CFSTR("alertCanceledBecauseOfReferee");
  v5[20] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 83));
  v4[21] = CFSTR("alertCanceledBecauseStand");
  v5[21] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 84));
  v4[22] = CFSTR("alertCanceledBecauseActive");
  v5[22] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 85));
  v4[23] = CFSTR("alertCanceledBecauseSteps");
  v5[23] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 86));
  v4[24] = CFSTR("workoutType");
  v5[24] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(v2 + 56));
  v4[25] = CFSTR("eventDuration");
  v5[25] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 52));
  v4[26] = CFSTR("fallDistanceCentimeter");
  v5[26] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 56));
  v4[27] = CFSTR("staticTimestampBeforePeak");
  v5[27] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 60));
  v4[28] = CFSTR("staticTimestampAfterPeak");
  v5[28] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 64));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 29);
}

NSDictionary *sub_100FF6B0C(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[19];
  _QWORD v5[19];

  v2 = *(_QWORD *)(a1 + 32);
  v4[0] = CFSTR("isFallImpact");
  v5[0] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 43));
  v4[1] = CFSTR("isFallAlert");
  v5[1] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 44));
  v4[2] = CFSTR("isSOSConsidered");
  v5[2] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 45));
  v4[3] = CFSTR("isSOSCallPlaced");
  v5[3] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 46));
  v4[4] = CFSTR("userCancelledSOS");
  v5[4] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 47));
  v4[5] = CFSTR("sosCanceledBecauseUserResponse");
  v5[5] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 73));
  v4[6] = CFSTR("sosCanceledBecauseOffWrist");
  v5[6] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 74));
  v4[7] = CFSTR("sosCanceledBecauseStand");
  v5[7] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 75));
  v4[8] = CFSTR("sosCanceledBecauseActive");
  v5[8] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 76));
  v4[9] = CFSTR("sosCanceledBecauseSteps");
  v5[9] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 77));
  v4[10] = CFSTR("sosCanceledBecauseAbsenceOfLongLie");
  v5[10] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 78));
  v4[11] = CFSTR("sosCallConsidered");
  v5[11] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 79));
  v4[12] = CFSTR("sosCallScheduled");
  v5[12] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 80));
  v4[13] = CFSTR("sosCallPlaced");
  v5[13] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 81));
  v4[14] = CFSTR("workoutType");
  v5[14] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(v2 + 56));
  v4[15] = CFSTR("eventDuration");
  v5[15] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 52));
  v4[16] = CFSTR("fallDistanceCentimeter");
  v5[16] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 56));
  v4[17] = CFSTR("staticTimestampBeforePeak");
  v5[17] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 60));
  v4[18] = CFSTR("staticTimestampAfterPeak");
  v5[18] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 64));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 19);
}

void sub_100FF6D98()
{
  operator delete();
}

void sub_100FF6DAC(id a1)
{
  qword_10229FD98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Fall");
}

double sub_100FF6DD8(double *a1, double *a2, double a3)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  unsigned __int8 v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  BOOL v19;

  v6 = sqrt(a1[17] * a1[17] + a1[16] * a1[16]) / 2.45;
  v7 = sqrt(a2[17] * a2[17] + a2[16] * a2[16]) / 2.45;
  sub_100197040();
  if (sub_1000FDBD0())
  {
    v6 = v6 / 2.45;
    v7 = v7 / 2.45;
  }
  if (v6 > 0.0 || (v8 = -1.0, v7 > 0.0))
  {
    v9 = v7 * v7 + v6 * v6 + v6 * -1.9876 * v7;
    v10 = sqrt(v9);
    if (v9 <= 0.0)
      v8 = 0.0;
    else
      v8 = v10;
    v11 = a1[14];
    if (v11 > 0.0)
    {
      v12 = a2[14];
      if (v12 > 0.0 && (*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && a1[6] >= 0.0 && a2[6] >= 0.0)
      {
        v13 = atomic_load((unsigned __int8 *)&qword_10230B9D8);
        if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_10230B9D8))
        {
          sub_1002433B8((uint64_t)dbl_10230B9B0);
          __cxa_guard_release(&qword_10230B9D8);
        }
        v14 = a3 * 0.5 * sqrt(v12 * v12 + v11 * v11);
        v15 = sub_10011E634(dbl_10230B9B0, a1[1], a1[2], a2[1], a2[2], 0.0);
        v16 = (a1[6] + a2[6]) * 0.5 * a3;
        v17 = v16 + v14 * -1.5;
        if (v17 < 0.0)
          v17 = 0.0;
        v18 = v16 + v14 * 1.5;
        v19 = v17 < v15 && v15 < v18;
        if (v19 || v14 > v8)
          v8 = v14;
      }
    }
    if (v8 > 0.0)
    {
      v8 = v8 * 0.4;
      if (v8 < 0.25)
        return 0.25;
    }
  }
  return v8;
}

void sub_100FF6FB4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10230B9D8);
  _Unwind_Resume(a1);
}

int32x2_t *sub_100FF6FCC(int32x2_t *a1, uint64_t a2)
{
  int32x2_t *v3;
  int v5;
  void *v6;
  char v7;
  void *v8[2];
  char v9;
  void *__p;
  char v11;

  *a1 = (int32x2_t)a2;
  v3 = a1 + 1;
  sub_1015A2E04(&__p, "OutdoorService");
  sub_10104F000(v3);
  if (v11 < 0)
    operator delete(__p);
  sub_1015A2E04(v8, "OutdoorService");
  sub_10132A884((char *)&a1[370], (__int128 *)v8);
  if (v9 < 0)
    operator delete(v8[0]);
  sub_1015A2E04(&v6, "OutdoorService");
  sub_10077EF3C(&a1[383]);
  if (v7 < 0)
    operator delete(v6);
  a1[392] = vdup_n_s32(0xC61C3C00);
  a1[393].i32[0] = -971228160;
  a1[394] = (int32x2_t)0xBFF0000000000000;
  a1[395] = 0;
  a1[397] = 0;
  a1[396] = 0;
  LOBYTE(v5) = 0;
  sub_1018BF25C((unsigned __int8 *)&a1[398], "DaylightIsAstronomicalDaytimeOverride", (unsigned __int8 *)&v5, 0);
  a1[399] = 0;
  sub_10127ADA0(&a1[440]);
  v5 = 3;
  sub_1004AD1D8((unsigned __int8 *)&a1[473], "ForceOutdoorPredictionType", &v5, 0);
  return a1;
}

void sub_100FF7118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  uint64_t v21;
  void *v23;

  v21 = v18;
  sub_10127ADA4(v21);
  v23 = *v20;
  if (*v20)
  {
    *(_QWORD *)(v16 + 3168) = v23;
    operator delete(v23);
  }
  sub_100D86FBC(v19);
  sub_1005938E4(v17);
  if (*(char *)(v16 + 31) < 0)
    operator delete(*v15);
  _Unwind_Resume(a1);
}

void sub_100FF718C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  JUMPOUT(0x100FF7174);
}

void sub_100FF71A4()
{
  JUMPOUT(0x100FF7174);
}

void sub_100FF71AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    JUMPOUT(0x100FF717CLL);
  JUMPOUT(0x100FF7184);
}

_QWORD *sub_100FF71C4(_QWORD *result, uint64_t *a2, double a3, double a4)
{
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  __int128 *v11;
  double v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  __int128 *v17;

  v6 = result;
  v7 = result[6];
  v8 = result[3];
  v9 = result[4];
  v10 = (_QWORD *)(v8 + 8 * (v7 / 0x55));
  if (v9 == v8)
    v11 = 0;
  else
    v11 = (__int128 *)(*v10 + 48 * (v7 % 0x55));
  v12 = a4 + 1.0e-13;
  while (1)
  {
    if (v9 == v8)
    {
      v14 = 0;
    }
    else
    {
      v13 = v6[7] + v6[6];
      v14 = *(_QWORD *)(v8 + 8 * (v13 / 0x55)) + 48 * (v13 % 0x55);
    }
    if (v11 == (__int128 *)v14)
      break;
    if (*(double *)v11 <= v12 && *(double *)v11 + 1.0e-13 > a3)
    {
      v16 = a2[1];
      if (v16 >= a2[2])
      {
        result = (_QWORD *)sub_100FF7428(a2, v11);
      }
      else
      {
        sub_100FF73B4((uint64_t)a2, v11);
        result = (_QWORD *)(v16 + 48);
      }
      a2[1] = (uint64_t)result;
    }
    v11 += 3;
    if ((__int128 *)((char *)v11 - *v10) == (__int128 *)4080)
    {
      v17 = (__int128 *)v10[1];
      ++v10;
      v11 = v17;
    }
    v8 = v6[3];
    v9 = v6[4];
  }
  return result;
}

void sub_100FF72F4(uint64_t a1, int *a2)
{
  sub_10127ADA8(a1 + 3520, a2);
}

void sub_100FF72FC(id a1)
{
  qword_1022A0198 = (uint64_t)os_log_create("com.apple.locationd.Position", "Outdoor");
}

void sub_100FF7328(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_100FF7368((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_100FF7368(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 48)
  {
    v4 = *(void **)(i - 24);
    if (v4)
    {
      *(_QWORD *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

_QWORD *sub_100FF73B4(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *a2;
  *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v3 = v4;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  result = sub_100D03CC8((_QWORD *)(v3 + 24), *((const void **)a2 + 3), *((_QWORD *)a2 + 4), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 2));
  *(_QWORD *)(a1 + 8) = v3 + 48;
  return result;
}

void sub_100FF7420(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100FF7428(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v15[2];
  char *v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    sub_100259694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v9 = 0x555555555555555;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = (char *)sub_100313718(v7, v9);
  else
    v10 = 0;
  v11 = &v10[48 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v16 = v11;
  v17 = &v10[48 * v9];
  v12 = *a2;
  *((_QWORD *)v11 + 2) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v11 = v12;
  *((_QWORD *)v11 + 4) = 0;
  *((_QWORD *)v11 + 5) = 0;
  *((_QWORD *)v11 + 3) = 0;
  sub_100D03CC8((_QWORD *)v11 + 3, *((const void **)a2 + 3), *((_QWORD *)a2 + 4), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 2));
  v16 += 48;
  sub_100FF7560(a1, v15);
  v13 = a1[1];
  sub_100FF7700((uint64_t)v15);
  return v13;
}

void sub_100FF754C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100FF7700((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100FF7560(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_100FF75D4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100FF75D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(_QWORD *)(a3 - 32);
      *(_OWORD *)(v7 - 48) = *(_OWORD *)(a3 - 48);
      *(_QWORD *)(v7 - 32) = v8;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 - 8);
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      v7 = *((_QWORD *)&v14 + 1) - 48;
      *((_QWORD *)&v14 + 1) -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_100FF7688((uint64_t)v11);
  return v9;
}

uint64_t sub_100FF7688(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_100FF76BC(a1);
  return a1;
}

void sub_100FF76BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)(v1 + 24);
    if (v3)
    {
      *(_QWORD *)(v1 + 32) = v3;
      operator delete(v3);
    }
    v1 += 48;
  }
}

uint64_t sub_100FF7700(uint64_t a1)
{
  sub_100FF7734(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_100FF7734(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    *(_QWORD *)(a1 + 16) = v2 - 48;
    v5 = *(void **)(v2 - 24);
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 48;
    }
  }
}

uint64_t sub_100FF7858(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t result;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    if ((v6 >> 3) == 1)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      while (1)
      {
        v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1 || v15 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v16 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0)
          goto LABEL_28;
        v12 += 7;
        v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_30;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_28:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        LODWORD(v14) = 0;
LABEL_30:
      *(_DWORD *)(a1 + 8) = v14;
    }
    else
    {
      result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result)
        return result;
    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

double sub_100FF7B58(_QWORD *a1)
{
  double result;

  *a1 = 0;
  a1[1] = 0x400000000;
  *(_QWORD *)&result = 0x1000000000;
  a1[30] = 0x1000000000;
  return result;
}

unsigned __int16 *sub_100FF7B78(uint64_t a1, uint64_t a2, double a3, double a4)
{
  __int128 v5;
  double v6;

  *(double *)&v5 = a3;
  *((_QWORD *)&v5 + 1) = a2;
  v6 = a4;
  return sub_10021C2E4((unsigned __int16 *)(a1 + 240), &v5);
}

unsigned __int16 *sub_100FF7BA8(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  __int128 v13;
  int v14;
  double v15;
  double v16;
  uint64_t v17;
  char v18;

  v13 = *(_OWORD *)a2;
  v14 = *(_DWORD *)(a2 + 16);
  v18 = 0;
  if (*(_WORD *)(a1 + 242))
  {
    v4 = 0;
    v5 = 0;
    v6 = -1.0;
    v7 = 1.79769313e308;
    do
    {
      v8 = sub_100FF7F54((unsigned __int16 *)(a1 + 240), v4);
      v9 = *(double *)(a2 + 8);
      v10 = vabdd_f64(*(double *)v8, v9);
      if (v10 < v7 && v10 < 3.0)
      {
        v5 = *(_QWORD *)(v8 + 8);
        v6 = *(double *)(v8 + 16);
        v7 = v10;
      }
      ++v4;
    }
    while (v4 < *(unsigned __int16 *)(a1 + 242));
  }
  else
  {
    v5 = 0;
    v9 = *(double *)(a2 + 8);
    v6 = -1.0;
  }
  v17 = v5;
  v11 = v9 - *(double *)a1;
  v15 = v6;
  v16 = v11;
  return sub_100FF7CA4((unsigned __int16 *)(a1 + 8), &v13);
}

unsigned __int16 *sub_100FF7CA4(unsigned __int16 *result, __int128 *a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned __int16 *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;

  v2 = *((unsigned int *)result + 1);
  v3 = *result + (unint64_t)result[1];
  if (v3 < v2)
    v2 = 0;
  v4 = &result[28 * (v3 - v2)];
  v6 = a2[1];
  v5 = a2[2];
  v7 = *a2;
  *((_QWORD *)v4 + 7) = *((_QWORD *)a2 + 6);
  *(_OWORD *)(v4 + 4) = v7;
  *(_OWORD *)(v4 + 20) = v5;
  *(_OWORD *)(v4 + 12) = v6;
  v8 = result[1];
  v9 = *((unsigned int *)result + 1);
  if (v9 <= v8)
  {
    v10 = *result + 1;
    if (v10 < v9)
      LOWORD(v9) = 0;
    *result = v10 - v9;
  }
  else
  {
    result[1] = v8 + 1;
  }
  return result;
}

uint64_t sub_100FF7D1C(uint64_t a1)
{
  unsigned __int8 v2;
  unint64_t v3;
  unsigned __int16 *v4;
  char v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  char v15;
  BOOL v16;
  uint64_t result;

  if (!*(_WORD *)(a1 + 10))
    return 0;
  v2 = 0;
  v3 = 0;
  v4 = (unsigned __int16 *)(a1 + 8);
  v5 = 1;
  do
  {
    v6 = *(_DWORD *)(sub_100FF817C(v4, v3) + 16) != 0;
    v2 |= v6;
    v5 &= v6;
    ++v3;
    v7 = *(unsigned __int16 *)(a1 + 10);
  }
  while (v3 < v7);
  if (!*(_WORD *)(a1 + 10))
    return 0;
  v9 = *(unsigned __int16 *)(a1 + 8);
  v8 = a1 + 8;
  v10 = v7 + v9 - 1;
  v11 = *(unsigned int *)(v8 + 4);
  if (v10 < v11)
    v11 = 0;
  v12 = v8 + 56 * (v10 - v11);
  v13 = *(_QWORD *)(v12 + 48);
  v14 = *(double *)(v12 + 32);
  if ((_DWORD)v7 == 2)
    v15 = v5;
  else
    v15 = 0;
  v16 = v14 > 0.999 && v13 == 19;
  result = 1;
  if (!v16 && (v15 & 1) == 0)
    return (v7 > 2) & v2;
  return result;
}

BOOL sub_100FF7DF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;

  v1 = *(unsigned __int16 *)(a1 + 10);
  if (!*(_WORD *)(a1 + 10))
    return 0;
  v3 = *(unsigned __int16 *)(a1 + 8);
  v2 = a1 + 8;
  v4 = v1 + v3 - 1;
  v5 = *(unsigned int *)(v2 + 4);
  if (v4 < v5)
    v5 = 0;
  v6 = v2 + 56 * (v4 - v5);
  v7 = *(double *)(v6 + 32);
  v8 = *(_QWORD *)(v6 + 48);
  return v7 < 0.01 && v8 != 0;
}

uint64_t sub_100FF7E50(uint64_t a1, double *a2, unsigned __int16 *a3)
{
  double v6;
  double v7;
  uint64_t result;
  unint64_t v9;
  __int128 *v10;

  v6 = *a2;
  v7 = *(double *)a1;
  if (*a2 < *(double *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 240) = 0;
    v6 = *a2;
    v7 = 0.0;
  }
  if (v6 - v7 > 9.0)
    *(_DWORD *)(a1 + 8) = 0;
  sub_100FF7BA8(a1, (uint64_t)a2);
  *(double *)a1 = *a2;
  result = sub_100FF7DF8(a1);
  if ((_DWORD)result)
  {
    *(_DWORD *)(a1 + 8) = 0;
  }
  else
  {
    *(_DWORD *)a3 = 0;
    result = sub_100FF7D1C(a1);
    if ((_DWORD)result && *(_WORD *)(a1 + 10))
    {
      v9 = 0;
      do
      {
        result = sub_100FF817C((unsigned __int16 *)(a1 + 8), v9);
        if (!*(_BYTE *)(result + 48))
        {
          v10 = (__int128 *)sub_100FF817C((unsigned __int16 *)(a1 + 8), v9);
          sub_100FF7CA4(a3, v10);
          result = sub_100FF817C((unsigned __int16 *)(a1 + 8), v9);
          *(_BYTE *)(result + 48) = 1;
        }
        ++v9;
      }
      while (v9 < *(unsigned __int16 *)(a1 + 10));
    }
  }
  return result;
}

uint64_t sub_100FF7F54(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  NSObject *v7;
  int v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  unint64_t v13;
  __int16 v14;
  int v15;
  uint8_t buf[4];
  unint64_t v17;
  __int16 v18;
  int v19;

  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102198AA0);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 134218240;
      v17 = a2;
      v18 = 1024;
      v19 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102198AA0);
      v9 = *((_DWORD *)a1 + 1);
      v12 = 134218240;
      v13 = a2;
      v14 = 1024;
      v15 = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", (size_t)&v12, 18);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "const T &CMQueue<CLSwimStrokeVoter::WorkoutClassificationEntry>::operator[](const size_t) const [T = CLSwimStrokeVoter::WorkoutClassificationEntry]", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
  v4 = *a1 + a2;
  v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5)
    v5 = 0;
  return (uint64_t)&a1[12 * (v4 - v5) + 4];
}

void sub_100FF8150(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_100FF817C(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  NSObject *v7;
  int v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  unint64_t v13;
  __int16 v14;
  int v15;
  uint8_t buf[4];
  unint64_t v17;
  __int16 v18;
  int v19;

  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102198AA0);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 134218240;
      v17 = a2;
      v18 = 1024;
      v19 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102198AA0);
      v9 = *((_DWORD *)a1 + 1);
      v12 = 134218240;
      v13 = a2;
      v14 = 1024;
      v15 = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", (size_t)&v12, 18);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "const T &CMQueue<CLSwimStrokeVoter::BufferedStroke>::operator[](const size_t) const [T = CLSwimStrokeVoter::BufferedStroke]", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
  v4 = *a1 + a2;
  v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5)
    v5 = 0;
  return (uint64_t)&a1[28 * (v4 - v5) + 4];
}

uint64_t sub_100FF8378(uint64_t a1)
{
  int v7;
  int v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;

  *(_QWORD *)a1 = off_102198AD0;
  *(_QWORD *)(a1 + 8) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 43) = 0u;
  *(_QWORD *)(a1 + 64) = 0x408C200000000000;
  *(_DWORD *)(a1 + 72) = 0xFFFF;
  *(_QWORD *)(a1 + 84) = 0;
  *(_QWORD *)(a1 + 76) = 0;
  *(_OWORD *)(a1 + 92) = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 108) = _Q0;
  *(_OWORD *)(a1 + 124) = _Q0;
  *(_OWORD *)(a1 + 140) = _Q0;
  *(_DWORD *)(a1 + 156) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 160) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 232) = off_1021693F8;
  *(_QWORD *)(a1 + 188) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 196) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 240) = 30;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_QWORD *)(a1 + 312) = 0;
  sub_1002433B8(a1 + 320);
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  v15 = 0;
  sub_1001E4804(&v13);
  v7 = sub_1001FD98C(v13, "AutopauseRequiredDuration", &v15);
  v8 = v7;
  v9 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      if (!v8)
        return a1;
      goto LABEL_6;
    }
  }
  if (v7)
LABEL_6:
    *(_QWORD *)(a1 + 64) = v15;
  return a1;
}

void sub_100FF84DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  sub_100FFA444(v2 + 51);
  sub_100427A00(v3);
  v2[29] = v4 + 16;
  sub_10047F25C(v2 + 33);
  _Unwind_Resume(a1);
}

_QWORD *sub_100FF8524(_QWORD *a1)
{
  *a1 = off_102198AD0;
  sub_100FFA444(a1 + 51);
  sub_100427A00(a1 + 45);
  a1[29] = off_1021693F8;
  sub_10047F25C(a1 + 33);
  return a1;
}

void sub_100FF857C(_QWORD *a1)
{
  sub_100FF8524(a1);
  operator delete();
}

void sub_100FF85A0(uint64_t a1)
{
  void **v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_OWORD *)(a1 + 8) = xmmword_101BAFC90;
  *(_WORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 58) = 0;
  *(_DWORD *)(a1 + 72) = 0xFFFF;
  *(_QWORD *)(a1 + 84) = 0;
  *(_QWORD *)(a1 + 76) = 0;
  *(_OWORD *)(a1 + 92) = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 108) = _Q0;
  *(_OWORD *)(a1 + 124) = _Q0;
  *(_OWORD *)(a1 + 140) = _Q0;
  *(_DWORD *)(a1 + 156) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 160) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 188) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 196) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  sub_10064AD18(a1 + 320);
  v7 = *(void ***)(a1 + 368);
  v8 = *(_QWORD *)(a1 + 376);
  *(_QWORD *)(a1 + 400) = 0;
  v9 = v8 - (_QWORD)v7;
  if (v9 >= 0x11)
  {
    do
    {
      operator delete(*v7);
      v10 = *(_QWORD *)(a1 + 376);
      v7 = (void **)(*(_QWORD *)(a1 + 368) + 8);
      *(_QWORD *)(a1 + 368) = v7;
      v9 = v10 - (_QWORD)v7;
    }
    while (v9 > 0x10);
  }
  if (v9 >> 3 == 1)
  {
    v11 = 51;
  }
  else
  {
    if (v9 >> 3 != 2)
      goto LABEL_8;
    v11 = 102;
  }
  *(_QWORD *)(a1 + 392) = v11;
LABEL_8:
  v12 = *(void ***)(a1 + 416);
  v13 = *(_QWORD *)(a1 + 424);
  *(_QWORD *)(a1 + 448) = 0;
  v14 = v13 - (_QWORD)v12;
  if (v14 >= 0x11)
  {
    do
    {
      operator delete(*v12);
      v15 = *(_QWORD *)(a1 + 424);
      v12 = (void **)(*(_QWORD *)(a1 + 416) + 8);
      *(_QWORD *)(a1 + 416) = v12;
      v14 = v15 - (_QWORD)v12;
    }
    while (v14 > 0x10);
  }
  if (v14 >> 3 == 1)
  {
    v16 = 25;
  }
  else
  {
    if (v14 >> 3 != 2)
      return;
    v16 = 51;
  }
  *(_QWORD *)(a1 + 440) = v16;
}

uint64_t sub_100FF86E4(unsigned int a1)
{
  uint64_t result;
  NSObject *v3;
  _BOOL4 v4;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  unsigned int v9;

  if (a1 < 0xF)
    return (0x2E1Eu >> a1) & 1;
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102198AF0);
  v3 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67240192;
    v9 = a1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Unknown whether or not provider %{public}d is a candidate for autopause", buf, 8u);
  }
  v4 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v4)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102198AF0);
    v7[0] = 67240192;
    v7[1] = a1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Unknown whether or not provider %{public}d is a candidate for autopause", v7, 8);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 0, "static BOOL CLAutopauseCalculator::isLocationTypeSupported(CLLocationType)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
    return 0;
  }
  return result;
}

__n128 sub_100FF88B0(uint64_t a1, unint64_t *a2, _DWORD *a3, int *a4)
{
  __n128 result;
  __n128 *v5;
  int v6;
  int v8;

  result.n128_u64[0] = *a2;
  *(_QWORD *)(a1 + 24) = *a2;
  v5 = (__n128 *)(a1 + 24);
  v6 = *a4;
  *(_DWORD *)(a1 + 32) = *a3;
  *(_DWORD *)(a1 + 36) = v6;
  if (*a3 > 0xBu || ((1 << *a3) & 0xC06) == 0)
  {
    result = *v5;
    *(__n128 *)(a1 + 40) = *v5;
  }
  else if (*(_DWORD *)(a1 + 48) != 2)
  {
    result.n128_u64[0] = *a2;
    *(_QWORD *)(a1 + 40) = *a2;
    v8 = *a4;
    *(_DWORD *)(a1 + 48) = 2;
    *(_DWORD *)(a1 + 52) = v8;
  }
  return result;
}

uint64_t sub_100FF8918(uint64_t a1, _QWORD *a2)
{
  unint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v12 = 0;
  v13 = 0;
  v11 = 0;
  if (!a2[5])
    return 0;
  v3 = 0;
  do
  {
    sub_100FF8A20(a1, *(_DWORD *)(*(_QWORD *)(a2[1] + 8 * ((v3 + a2[4]) / 0x66)) + 40 * ((v3 + a2[4]) % 0x66) + 32), (_DWORD *)&v13 + 1, &v13, (_DWORD *)&v12 + 1, &v12, &v11);
    ++v3;
  }
  while (a2[5] > v3);
  v4 = v12;
  v5 = HIDWORD(v12);
  v6 = v13;
  if ((int)v13 > (HIDWORD(v13) & ~(SHIDWORD(v13) >> 31)))
  {
    v7 = 4;
  }
  else
  {
    v6 = HIDWORD(v13) & ~(SHIDWORD(v13) >> 31);
    v7 = 2 * (SHIDWORD(v13) > 0);
  }
  if (SHIDWORD(v12) > v6)
  {
    v8 = 8;
  }
  else
  {
    v5 = v6;
    v8 = v7;
  }
  if ((int)v12 > v5)
  {
    v9 = 5;
  }
  else
  {
    v4 = v5;
    v9 = v8;
  }
  if (v11 <= v4)
    return v9;
  else
    return 0;
}

void sub_100FF8A20(uint64_t a1, int a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  if (a2 > 40)
  {
    if (a2 == 56)
    {
LABEL_8:
      a3 = a6;
    }
    else
    {
      a3 = a6;
      if (a2 != 52)
      {
        a3 = a4;
        if (a2 != 41)
LABEL_7:
          a3 = a7;
      }
    }
  }
  else
  {
    switch(a2)
    {
      case 1:
      case 2:
      case 10:
      case 11:
        break;
      case 4:
        a3 = a4;
        break;
      case 5:
        goto LABEL_8;
      case 8:
        a3 = a5;
        break;
      default:
        goto LABEL_7;
    }
  }
  ++*a3;
}

uint64_t sub_100FF8A98(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v7 = 0;
  if (a1[56])
  {
    v2 = 0;
    do
    {
      sub_100FF8A20((uint64_t)a1, *(_DWORD *)(*(_QWORD *)(a1[52] + 8 * ((v2 + a1[55]) / 0x33)) + 80 * ((v2 + a1[55]) % 0x33) + 72), (_DWORD *)&v9 + 1, &v9, (_DWORD *)&v8 + 1, &v8, &v7);
      ++v2;
    }
    while (a1[56] > v2);
  }
  v3 = sub_100FF8918((uint64_t)a1, a1 + 45);
  sub_100FF8A20(v3, v3, (_DWORD *)&v9 + 1, &v9, (_DWORD *)&v8 + 1, &v8, &v7);
  v4 = HIDWORD(v9) & ~(SHIDWORD(v9) >> 31);
  v5 = 2 * (SHIDWORD(v9) > 0);
  if ((int)v9 > v4)
  {
    v4 = v9;
    v5 = 4;
  }
  if (SHIDWORD(v8) > v4)
  {
    v4 = HIDWORD(v8);
    v5 = 8;
  }
  if ((int)v8 > v4)
  {
    v4 = v8;
    v5 = 5;
  }
  if (v7 <= v4)
    return v5;
  else
    return 0;
}

void sub_100FF8BC4(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  unint64_t v11;
  uint64_t v12;
  float64x2_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  float64x2_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  unint64_t v25;
  double v26;
  double v27;
  double v28;
  double v29;
  unint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  double v34;
  double v35;
  float64x2_t v36;
  double v37;
  double v38;
  uint64_t v39;
  float64x2_t v40;
  NSObject *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  const char *v60;
  uint8_t *v61;
  double v62;
  int v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  uint64_t v70;
  __int16 v71;
  uint64_t v72;
  __int16 v73;
  uint64_t v74;
  __int16 v75;
  uint64_t v76;
  __int16 v77;
  int v78;
  __int16 v79;
  int v80;
  uint8_t buf[4];
  uint64_t v82;
  __int16 v83;
  uint64_t v84;
  __int16 v85;
  uint64_t v86;
  __int16 v87;
  uint64_t v88;
  __int16 v89;
  uint64_t v90;
  __int16 v91;
  uint64_t v92;
  __int16 v93;
  uint64_t v94;
  __int16 v95;
  int v96;
  __int16 v97;
  int v98;

  *(_OWORD *)(a2 + 3) = xmmword_101B9F630;
  *(_OWORD *)(a2 + 5) = xmmword_101B9F630;
  v3 = a3[5];
  *((_DWORD *)a2 + 14) = v3;
  a2[8] = 0;
  if (!v3)
    return;
  if ((int)v3 >= 1)
  {
    v5 = 0;
    v6 = a3[4];
    v7 = v3;
    v8 = v3;
    do
    {
      if (*(double *)(*(_QWORD *)(a3[1] + 8 * (v6 / 0x66)) + 40 * (v6 % 0x66) + 24) < 85.0)
        ++v5;
      ++v6;
      --v8;
    }
    while (v8);
    v9 = (double)(int)v3;
    v10 = (double)v5 / (double)(int)v3;
    v11 = a3[4];
    v12 = a3[1];
    if (v10 > 0.68)
    {
      v13 = *(float64x2_t *)(a2 + 1);
      v14 = 1.79769313e308;
      v15 = -1.79769313e308;
      v16 = -1.79769313e308;
      v17 = 1.79769313e308;
      while (1)
      {
        v18 = *(_QWORD *)(v12 + 8 * (v11 / 0x66));
        if (*(double *)(v18 + 40 * (v11 % 0x66) + 24) >= 85.0)
          break;
        v19 = *(float64x2_t *)(v18 + 40 * (v11 % 0x66) + 8);
        v13 = vaddq_f64(v19, v13);
        *(float64x2_t *)(a2 + 1) = v13;
        if (v19.f64[0] > v15)
        {
          a2[4] = *(_QWORD *)&v19.f64[0];
          v15 = v19.f64[0];
        }
        if (v19.f64[0] < v14)
        {
          a2[3] = *(_QWORD *)&v19.f64[0];
          v14 = v19.f64[0];
        }
        v19.f64[0] = v19.f64[1];
        if (v19.f64[1] > v16)
        {
          a2[6] = *(_QWORD *)&v19.f64[1];
          v16 = v19.f64[1];
        }
        if (v19.f64[1] >= v17)
          goto LABEL_19;
        a2[5] = *(_QWORD *)&v19.f64[1];
LABEL_20:
        ++v11;
        v17 = v19.f64[0];
        if (!--v7)
          goto LABEL_46;
      }
      LODWORD(v3) = v3 - 1;
LABEL_19:
      v19.f64[0] = v17;
      goto LABEL_20;
    }
    v23 = 0.0;
    v24 = v3;
    do
    {
      v23 = v23 + *(double *)(*(_QWORD *)(v12 + 8 * (v11 / 0x66)) + 40 * (v11 % 0x66) + 24);
      ++v11;
      --v24;
    }
    while (v24);
    v25 = a3[4];
    v22 = 0.0;
    v20 = 0.0;
    v21 = v23 / v9;
    do
    {
      v26 = *(double *)(*(_QWORD *)(a3[1] + 8 * (v25 / 0x66)) + 40 * (v25 % 0x66) + 24) - v21;
      v20 = v20 + v26 * v26;
      v22 = v22 + v26;
      ++v25;
      --v7;
    }
    while (v7);
LABEL_28:
    v27 = (double)((int)v3 - 1);
    if ((int)v3 <= 1)
      v27 = 1.0;
    v28 = sqrt((v20 - v22 * v22 / v9) / v27);
    v29 = (v21 + v28) * 1.5;
    if (v29 > 300.0)
      v29 = 300.0;
    *((double *)a2 + 8) = v29;
    if ((int)v3 >= 1)
    {
      v30 = a3[4];
      v31 = a3[1];
      v32 = v21 + v28 * 3.0;
      v33 = v3;
      v34 = 1.79769313e308;
      v35 = -1.79769313e308;
      v36 = *(float64x2_t *)(a2 + 1);
      v37 = -1.79769313e308;
      v38 = 1.79769313e308;
      while (1)
      {
        v39 = *(_QWORD *)(v31 + 8 * (v30 / 0x66));
        if (*(double *)(v39 + 40 * (v30 % 0x66) + 24) > v32)
          break;
        v40 = *(float64x2_t *)(v39 + 40 * (v30 % 0x66) + 8);
        v36 = vaddq_f64(v40, v36);
        *(float64x2_t *)(a2 + 1) = v36;
        if (v40.f64[0] > v35)
        {
          a2[4] = *(_QWORD *)&v40.f64[0];
          v35 = v40.f64[0];
        }
        if (v40.f64[0] < v34)
        {
          a2[3] = *(_QWORD *)&v40.f64[0];
          v34 = v40.f64[0];
        }
        v40.f64[0] = v40.f64[1];
        if (v40.f64[1] > v37)
        {
          a2[6] = *(_QWORD *)&v40.f64[1];
          v37 = v40.f64[1];
        }
        if (v40.f64[1] >= v38)
          goto LABEL_44;
        a2[5] = *(_QWORD *)&v40.f64[1];
LABEL_45:
        ++v30;
        v38 = v40.f64[0];
        if (!--v33)
          goto LABEL_46;
      }
      LODWORD(v3) = v3 - 1;
LABEL_44:
      v40.f64[0] = v38;
      goto LABEL_45;
    }
    goto LABEL_46;
  }
  v9 = (double)(int)v3;
  v20 = 0.0;
  v21 = 0.0 / (double)(int)v3;
  if (v21 <= 0.68)
  {
    v22 = 0.0;
    goto LABEL_28;
  }
LABEL_46:
  *((_DWORD *)a2 + 14) = v3;
  *(float64x2_t *)(a2 + 1) = vdivq_f64(*(float64x2_t *)(a2 + 1), (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)(int)v3), 0));
  *((_DWORD *)a2 + 18) = sub_100FF8918(a1, (_QWORD *)(a1 + 360));
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102198AF0);
  v41 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v42 = *a2;
    v43 = a2[1];
    v44 = a2[2];
    v45 = a2[3];
    v46 = a2[4];
    v47 = a2[5];
    v48 = a2[6];
    v49 = *((_DWORD *)a2 + 14);
    v50 = *((_DWORD *)a2 + 18);
    *(_DWORD *)buf = 134220032;
    v82 = v42;
    v83 = 2048;
    v84 = v43;
    v85 = 2048;
    v86 = v44;
    v87 = 2048;
    v88 = v45;
    v89 = 2048;
    v90 = v46;
    v91 = 2048;
    v92 = v47;
    v93 = 2048;
    v94 = v48;
    v95 = 1024;
    v96 = v49;
    v97 = 1024;
    v98 = v50;
    _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "PKAUTOPAUSE MEAN coord: %f %f %f %f %f %f %f %d %d ", buf, 0x54u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102198AF0);
    v51 = *a2;
    v52 = a2[1];
    v53 = a2[2];
    v54 = a2[3];
    v55 = a2[4];
    v56 = a2[5];
    v57 = a2[6];
    v58 = *((_DWORD *)a2 + 14);
    v59 = *((_DWORD *)a2 + 18);
    v63 = 134220032;
    v64 = v51;
    v65 = 2048;
    v66 = v52;
    v67 = 2048;
    v68 = v53;
    v69 = 2048;
    v70 = v54;
    v71 = 2048;
    v72 = v55;
    v73 = 2048;
    v74 = v56;
    v75 = 2048;
    v76 = v57;
    v77 = 1024;
    v78 = v58;
    v79 = 1024;
    v80 = v59;
    LODWORD(v62) = 84;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "PKAUTOPAUSE MEAN coord: %f %f %f %f %f %f %f %d %d ", COERCE_DOUBLE(&v63), v62);
    v61 = (uint8_t *)v60;
    sub_100512490("Generic", 1, 0, 2, "void CLAutopauseCalculator::aggregation(AggregateCoord &, const std::deque<CoordAndMotion> &)", "%s\n", v60);
    if (v61 != buf)
      free(v61);
  }
}

void sub_100FF91B0(uint64_t a1, _OWORD *a2, _BYTE *a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  unsigned int v9;
  double v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  unint64_t v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  char *v42;
  double v43;
  double v44;
  unint64_t v45;
  unint64_t v46;
  double v47;
  double v48;
  _BOOL4 v49;
  _BOOL4 v50;
  int v51;
  int v52;
  unint64_t v53;
  double v54;
  unint64_t v55;
  int v56;
  int v57;
  double v58;
  double v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  float v65;
  double *v66;
  float v67;
  long double v68;
  float v69;
  double v70;
  float v71;
  float v72;
  float v73;
  unint64_t v74;
  uint64_t v75;
  BOOL v76;
  uint64_t v77;
  unint64_t v78;
  float v79;
  float v80;
  unint64_t v81;
  uint64_t v82;
  BOOL v83;
  uint64_t v84;
  unint64_t v85;
  float v86;
  float *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  float v92;
  uint64_t v93;
  uint64_t v94;
  float v95;
  uint64_t v96;
  uint64_t v97;
  float v98;
  uint64_t v99;
  BOOL v100;
  uint64_t v101;
  float v102;
  int v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  _OWORD v107[2];
  double v108;
  int v109;
  float *v110;
  __int128 v111;
  uint64_t v112;
  int v113;
  _OWORD v114[4];
  _OWORD v115[2];
  __int128 v116;
  __int128 v117;
  _OWORD v118[3];

  v5 = a2[7];
  v116 = a2[6];
  v117 = v5;
  v118[0] = a2[8];
  *(_OWORD *)((char *)v118 + 12) = *(_OWORD *)((char *)a2 + 140);
  v6 = a2[3];
  v114[2] = a2[2];
  v114[3] = v6;
  v7 = a2[5];
  v115[0] = a2[4];
  v115[1] = v7;
  v8 = a2[1];
  v114[0] = *a2;
  v114[1] = v8;
  *a3 = 0;
  v9 = v116;
  if (!sub_100FF86E4(v116))
    return;
  v10 = sub_100515CB4();
  *(double *)((char *)v115 + 12) = v10;
  if (*(double *)(a1 + 92) > 0.0 && v10 - *(double *)(a1 + 148) > *(double *)(a1 + 64))
  {
    sub_100FF85A0(a1);
    *a3 = 1;
  }
  v11 = v117;
  *(_OWORD *)(a1 + 168) = v116;
  *(_OWORD *)(a1 + 184) = v11;
  *(_OWORD *)(a1 + 200) = v118[0];
  *(_OWORD *)(a1 + 212) = *(_OWORD *)((char *)v118 + 12);
  v12 = v114[3];
  *(_OWORD *)(a1 + 104) = v114[2];
  *(_OWORD *)(a1 + 120) = v12;
  v13 = v115[1];
  *(_OWORD *)(a1 + 136) = v115[0];
  *(_OWORD *)(a1 + 152) = v13;
  v14 = v114[1];
  *(_OWORD *)(a1 + 72) = v114[0];
  *(_OWORD *)(a1 + 88) = v14;
  if (v9 <= 9 && ((1 << v9) & 0x20E) != 0 && *(double *)((char *)&v114[2] + 12) >= 0.0)
  {
    if (*(_QWORD *)(a1 + 304))
    {
      if (v10 - *(double *)(a1 + 312) < 3.0)
      {
        sub_100ADB200(a1 + 232, (double *)((char *)&v114[2] + 12));
        *(_QWORD *)(a1 + 312) = *(_QWORD *)((char *)v115 + 12);
        v15 = *(_QWORD *)(a1 + 304);
        if (v15 && v15 >= *(_QWORD *)(a1 + 240) && *(double *)(a1 + 248) / (double)v15 > 6.0)
        {
          sub_100FF85A0(a1);
LABEL_57:
          *a3 = 1;
          return;
        }
        goto LABEL_16;
      }
      sub_10023235C((_QWORD *)(a1 + 232));
    }
    sub_100ADB200(a1 + 232, (double *)((char *)&v114[2] + 12));
    *(_QWORD *)(a1 + 312) = *(_QWORD *)((char *)v115 + 12);
  }
LABEL_16:
  if (*(double *)(a1 + 8) < 0.0)
    *(double *)(a1 + 8) = v10;
  if (*(double *)((char *)&v114[2] + 4) > 0.0)
    *(_QWORD *)(a1 + 16) = *(_QWORD *)((char *)&v114[1] + 12);
  v16 = sub_100FF86E4(v116);
  if ((_DWORD)v16)
  {
    v110 = *(float **)&v10;
    v111 = *(_OWORD *)((char *)v114 + 4);
    v112 = *(_QWORD *)((char *)&v114[1] + 4);
    v113 = *(_DWORD *)(a1 + 32);
    sub_100FF9DC4(a1 + 360, (__int128 *)&v110);
    if (*(_QWORD *)(a1 + 400) >= 0x3CuLL)
    {
      v108 = 0.0;
      v109 = 0;
      v105 = 0u;
      v106 = 0u;
      memset(v107, 0, 28);
      sub_100FF8BC4(a1, (uint64_t *)&v105, (_QWORD *)(a1 + 360));
      *(double *)&v105 = v10;
      sub_100FF9E6C(a1 + 408, &v105);
      v17 = *(void ***)(a1 + 368);
      v18 = *(_QWORD *)(a1 + 376);
      *(_QWORD *)(a1 + 400) = 0;
      v19 = v18 - (_QWORD)v17;
      if (v19 >= 0x11)
      {
        do
        {
          operator delete(*v17);
          v20 = *(_QWORD *)(a1 + 376);
          v17 = (void **)(*(_QWORD *)(a1 + 368) + 8);
          *(_QWORD *)(a1 + 368) = v17;
          v19 = v20 - (_QWORD)v17;
        }
        while (v19 > 0x10);
      }
      if (v19 >> 3 == 1)
      {
        v21 = 51;
      }
      else
      {
        if (v19 >> 3 != 2)
          goto LABEL_29;
        v21 = 102;
      }
      *(_QWORD *)(a1 + 392) = v21;
    }
  }
LABEL_29:
  v22 = *(double *)(a1 + 64);
  if (v10 - *(double *)(a1 + 8) <= v22)
    return;
  v23 = *(_QWORD *)(a1 + 448);
  if (v23)
  {
    v24 = 0;
    v25 = *(_QWORD *)(a1 + 440);
    v26 = *(_QWORD *)(a1 + 416);
    while (v10 - *(double *)(*(_QWORD *)(v26 + 8 * ((v25 + v24) / 0x33)) + 80 * ((v25 + v24) % 0x33)) <= v22)
    {
      if (v23 == ++v24)
      {
        v24 = *(_QWORD *)(a1 + 448);
        break;
      }
    }
    v27 = (_QWORD *)(v26 + 8 * (v25 / 0x33));
    if (*(_QWORD *)(a1 + 424) == v26)
      v28 = 0;
    else
      v28 = *v27 + 80 * (v25 % 0x33);
    *(_QWORD *)&v105 = v27;
    *((_QWORD *)&v105 + 1) = v28;
    sub_1008225DC(&v105, v24);
    v29 = *(_QWORD *)(a1 + 440) + *(_QWORD *)(a1 + 448);
    v30 = *(_QWORD *)(a1 + 416);
    v31 = (_QWORD *)(v30 + 8 * (v29 / 0x33));
    if (*(_QWORD *)(a1 + 424) == v30)
      v32 = 0;
    else
      v32 = (char *)(*v31 + 80 * (v29 % 0x33));
    v16 = sub_100FF9F18((_QWORD *)(a1 + 408), (_QWORD *)v105, *((char **)&v105 + 1), v31, v32);
  }
  v33 = *(_QWORD *)(a1 + 400);
  if (v33)
  {
    v34 = 0;
    v35 = *(_QWORD *)(a1 + 392);
    v36 = *(_QWORD *)(a1 + 368);
    while (v10 - *(double *)(*(_QWORD *)(v36 + 8 * ((v35 + v34) / 0x66)) + 40 * ((v35 + v34) % 0x66)) <= *(double *)(a1 + 64))
    {
      if (v33 == ++v34)
      {
        v34 = *(_QWORD *)(a1 + 400);
        break;
      }
    }
    v37 = (_QWORD *)(v36 + 8 * (v35 / 0x66));
    if (*(_QWORD *)(a1 + 376) == v36)
      v38 = 0;
    else
      v38 = *v37 + 40 * (v35 % 0x66);
    *(_QWORD *)&v105 = v37;
    *((_QWORD *)&v105 + 1) = v38;
    sub_1004CE08C(&v105, v34);
    v39 = *(_QWORD *)(a1 + 392) + *(_QWORD *)(a1 + 400);
    v40 = *(_QWORD *)(a1 + 368);
    v41 = (_QWORD *)(v40 + 8 * (v39 / 0x66));
    if (*(_QWORD *)(a1 + 376) == v40)
      v42 = 0;
    else
      v42 = (char *)(*v41 + 40 * (v39 % 0x66));
    v16 = sub_100FFA198((_QWORD *)(a1 + 360), (_QWORD *)v105, *((char **)&v105 + 1), v41, v42);
  }
  if (*(_DWORD *)(a1 + 48) == 2)
  {
    v43 = *(double *)(a1 + 64);
    if (v10 - *(double *)(a1 + 40) > v43)
    {
      *(_BYTE *)(a1 + 58) = 1;
      *(_WORD *)(a1 + 56) = 257;
      *(double *)(a1 + 8) = v10 - v43 + 60.0;
      goto LABEL_57;
    }
  }
  v44 = 0.0;
  if (!*(_QWORD *)(a1 + 448))
  {
    v52 = 0;
    v49 = 1;
    v50 = 1;
    goto LABEL_76;
  }
  v45 = 0;
  LODWORD(v105) = 0;
  LODWORD(v110) = 0;
  v104 = 0;
  v103 = 0;
  do
  {
    sub_100FF8A20(v16, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 416) + 8 * ((v45 + *(_QWORD *)(a1 + 440)) / 0x33))+ 80 * ((v45 + *(_QWORD *)(a1 + 440)) % 0x33)+ 72), &v105, &v110, (_DWORD *)&v104 + 1, &v104, &v103);
    ++v45;
    v46 = *(_QWORD *)(a1 + 448);
  }
  while (v46 > v45);
  v47 = (double)(HIDWORD(v104) + (int)v110) / (double)v46 * 100.0;
  v48 = (double)(int)v104 / (double)v46 * 100.0;
  v49 = v48 <= 25.0;
  if (v48 > 25.0)
  {
    *(_BYTE *)(a1 + 57) = 0;
    *a3 = 1;
  }
  v50 = v47 <= 25.0;
  if (v47 > 25.0)
  {
    *(_BYTE *)(a1 + 56) = 0;
    *a3 = 1;
  }
  v51 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 416) + 8 * (*(_QWORD *)(a1 + 440) / 0x33uLL))
                  + 80 * (*(_QWORD *)(a1 + 440) % 0x33uLL)
                  + 72);
  if (v51 != 8)
  {
    if (v51 == 5)
    {
      v49 = 0;
      *(_BYTE *)(a1 + 57) = 0;
      goto LABEL_71;
    }
    if (v51 != 4)
      goto LABEL_72;
  }
  v50 = 0;
  *(_BYTE *)(a1 + 56) = 0;
LABEL_71:
  *a3 = 1;
LABEL_72:
  v52 = 0;
  if (v46)
  {
    v53 = *(_QWORD *)(a1 + 440);
    v54 = 0.0;
    v44 = 0.0;
    do
    {
      v55 = *(_QWORD *)(*(_QWORD *)(a1 + 416) + 8 * (v53 / 0x33)) + 80 * (v53 % 0x33);
      v56 = *(_DWORD *)(v55 + 56);
      v54 = v54 + *(double *)(v55 + 8) * (double)v56;
      v44 = v44 + *(double *)(v55 + 16) * (double)v56;
      v52 += v56;
      ++v53;
      --v46;
    }
    while (v46);
    goto LABEL_77;
  }
LABEL_76:
  v54 = 0.0;
LABEL_77:
  v108 = 0.0;
  v109 = 0;
  v105 = 0u;
  v106 = 0u;
  memset(v107, 0, 28);
  if (*(_QWORD *)(a1 + 400))
  {
    sub_100FF8BC4(a1, (uint64_t *)&v105, (_QWORD *)(a1 + 360));
    v57 = DWORD2(v107[1]);
    v54 = v54 + *((double *)&v105 + 1) * (double)SDWORD2(v107[1]);
    v44 = v44 + *(double *)&v106 * (double)SDWORD2(v107[1]);
    v52 += DWORD2(v107[1]);
  }
  else
  {
    v57 = 0;
  }
  if (v52 <= 0)
  {
    *(double *)(a1 + 8) = *(double *)((char *)v115 + 12) - *(double *)(a1 + 64) + 60.0;
  }
  else
  {
    v58 = v54 / (double)v52;
    v59 = v44 / (double)v52;
    sub_100EE7AD4(&v110, 2 * *(_QWORD *)(a1 + 448) + 2 * (v57 > 0));
    if (*(_QWORD *)(a1 + 448))
    {
      v60 = 0;
      v61 = 0;
      v62 = *(_QWORD *)(a1 + 440);
      v63 = *(_QWORD *)(a1 + 416);
      do
      {
        v64 = *(_QWORD *)(v63 + 8 * ((v62 + v61) / 0x33)) + 80 * ((v62 + v61) % 0x33);
        v65 = sub_10011E634((double *)(a1 + 320), v58, v59, *(double *)(v64 + 24), *(double *)(v64 + 40), *(double *)(a1 + 16));
        v66 = (double *)(*(_QWORD *)(*(_QWORD *)(a1 + 416) + 8 * ((v61 + *(_QWORD *)(a1 + 440)) / 0x33))
                       + 80 * ((v61 + *(_QWORD *)(a1 + 440)) % 0x33));
        v67 = v65 - v66[8];
        v110[v60] = v67;
        v68 = sub_10011E634((double *)(a1 + 320), v58, v59, v66[4], v66[6], *(double *)(a1 + 16));
        v62 = *(_QWORD *)(a1 + 440);
        v63 = *(_QWORD *)(a1 + 416);
        *(float *)&v68 = v68 - *(double *)(*(_QWORD *)(v63 + 8 * ((v61 + v62) / 0x33)) + 80 * ((v61 + v62) % 0x33) + 64);
        v110[v60 + 1] = *(float *)&v68;
        v60 += 2;
        ++v61;
      }
      while (*(_QWORD *)(a1 + 448) > v61);
    }
    else
    {
      LODWORD(v60) = 0;
    }
    if (v57 > 0)
    {
      v69 = sub_10011E634((double *)(a1 + 320), v58, v59, *((double *)&v106 + 1), *((double *)v107 + 1), *(double *)(a1 + 16));
      v70 = v108;
      v71 = v69 - v108;
      v110[v60] = v71;
      v72 = sub_10011E634((double *)(a1 + 320), v58, v59, *(double *)v107, *(double *)&v107[1], *(double *)(a1 + 16));
      v73 = v72 - v70;
      v110[v60 | 1] = v73;
    }
    if (v50)
    {
      if ((float *)v111 == v110)
      {
        v76 = 1;
      }
      else
      {
        v74 = (uint64_t)(v111 - (_QWORD)v110) >> 2;
        if (v74 <= 1)
          v75 = 1;
        else
          v75 = (uint64_t)(v111 - (_QWORD)v110) >> 2;
        if (*v110 <= 78.5)
        {
          v77 = 1;
          do
          {
            v78 = v77;
            if (v75 == v77)
              break;
            v79 = v110[v77++];
          }
          while (v79 <= 78.5);
          v76 = v74 <= v78;
        }
        else
        {
          v76 = 0;
        }
      }
      *(_BYTE *)(a1 + 56) = v76;
    }
    if (v49)
    {
      v80 = 300.0;
      if ((*(_DWORD *)(a1 + 32) & 0xFFFFFFFE) == 0xA)
        v80 = 110.0;
      if ((float *)v111 == v110)
      {
        v83 = 1;
      }
      else
      {
        v81 = (uint64_t)(v111 - (_QWORD)v110) >> 2;
        if (v81 <= 1)
          v82 = 1;
        else
          v82 = (uint64_t)(v111 - (_QWORD)v110) >> 2;
        if (*v110 <= v80)
        {
          v84 = 1;
          do
          {
            v85 = v84;
            if (v82 == v84)
              break;
            v86 = v110[v84++];
          }
          while (v86 <= v80);
          v83 = v81 <= v85;
        }
        else
        {
          v83 = 0;
        }
      }
      *(_BYTE *)(a1 + 57) = v83;
    }
    switch(sub_100FF8A98((_QWORD *)a1))
    {
      case 2u:
        v87 = v110;
        if ((float *)v111 == v110)
          goto LABEL_151;
        v88 = (uint64_t)(v111 - (_QWORD)v110) >> 2;
        if (v88 <= 1)
          v93 = 1;
        else
          v93 = (uint64_t)(v111 - (_QWORD)v110) >> 2;
        if (*v110 > 250.0)
          goto LABEL_150;
        v94 = 1;
        do
        {
          v91 = v94;
          if (v93 == v94)
            break;
          v95 = v110[v94++];
        }
        while (v95 <= 250.0);
        goto LABEL_155;
      case 4u:
      case 8u:
        v87 = v110;
        if ((float *)v111 == v110)
          goto LABEL_151;
        v88 = (uint64_t)(v111 - (_QWORD)v110) >> 2;
        if (v88 <= 1)
          v89 = 1;
        else
          v89 = (uint64_t)(v111 - (_QWORD)v110) >> 2;
        if (*v110 > 78.5)
          goto LABEL_150;
        v90 = 1;
        do
        {
          v91 = v90;
          if (v89 == v90)
            break;
          v92 = v110[v90++];
        }
        while (v92 <= 78.5);
        goto LABEL_155;
      case 5u:
        v87 = v110;
        if ((float *)v111 == v110)
          goto LABEL_151;
        v88 = (uint64_t)(v111 - (_QWORD)v110) >> 2;
        if (v88 <= 1)
          v99 = 1;
        else
          v99 = (uint64_t)(v111 - (_QWORD)v110) >> 2;
        if (*v110 > 300.0)
          goto LABEL_150;
        v101 = 1;
        do
        {
          v91 = v101;
          if (v99 == v101)
            break;
          v102 = v110[v101++];
        }
        while (v102 <= 300.0);
        goto LABEL_155;
      default:
        v87 = v110;
        if ((float *)v111 == v110)
        {
LABEL_151:
          v100 = 1;
        }
        else
        {
          v88 = (uint64_t)(v111 - (_QWORD)v110) >> 2;
          if (v88 <= 1)
            v96 = 1;
          else
            v96 = (uint64_t)(v111 - (_QWORD)v110) >> 2;
          if (*v110 > 200.0)
          {
LABEL_150:
            v100 = 0;
          }
          else
          {
            v97 = 1;
            do
            {
              v91 = v97;
              if (v96 == v97)
                break;
              v98 = v110[v97++];
            }
            while (v98 <= 200.0);
LABEL_155:
            v100 = v88 <= v91;
          }
        }
        *(_BYTE *)(a1 + 58) = v100;
        *a3 = 1;
        *(double *)(a1 + 8) = v10 - *(double *)(a1 + 64) + 60.0;
        if (v87)
        {
          *(_QWORD *)&v111 = v87;
          operator delete(v87);
        }
        break;
    }
  }
}

void sub_100FF9DA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int64x2_t sub_100FF9DC4(uint64_t a1, __int128 *a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  int64x2_t result;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    sub_100FFA4D8((void **)a1);
    v4 = *(_QWORD *)(a1 + 32);
  }
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (_QWORD *)(v5 + 8 * (v4 / 0x66));
  v7 = *v6 + 40 * (v4 % 0x66);
  if (*(_QWORD *)(a1 + 16) == v5)
    v7 = 0;
  if (v7 == *v6)
    v7 = *(v6 - 1) + 4080;
  v8 = *a2;
  v9 = a2[1];
  *(_QWORD *)(v7 - 8) = *((_QWORD *)a2 + 4);
  *(_OWORD *)(v7 - 24) = v9;
  *(_OWORD *)(v7 - 40) = v8;
  result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_101BB2F70);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

int64x2_t sub_100FF9E6C(uint64_t a1, _OWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  int64x2_t result;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    sub_100FFA7F0((void **)a1);
    v4 = *(_QWORD *)(a1 + 32);
  }
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (_QWORD *)(v5 + 8 * (v4 / 0x33));
  v7 = *v6 + 80 * (v4 % 0x33);
  if (*(_QWORD *)(a1 + 16) == v5)
    v7 = 0;
  if (v7 == *v6)
    v7 = *(v6 - 1) + 4080;
  *(_OWORD *)(v7 - 80) = *a2;
  v8 = a2[1];
  v9 = a2[2];
  v10 = a2[4];
  *(_OWORD *)(v7 - 32) = a2[3];
  *(_OWORD *)(v7 - 16) = v10;
  *(_OWORD *)(v7 - 64) = v8;
  *(_OWORD *)(v7 - 48) = v9;
  result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_101BB2F70);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

unint64_t sub_100FF9F18(_QWORD *a1, _QWORD *a2, char *a3, _QWORD *a4, char *a5)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char **v9;
  char *v10;
  unint64_t v11;
  __n128 v12;
  __n128 v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE **v16;
  _BYTE *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  __n128 v24[2];

  if (a5 == a3)
    v6 = 0;
  else
    v6 = 51 * (a4 - a2)
       - 0x3333333333333333 * ((uint64_t)&a5[-*a4] >> 4)
       + 0x3333333333333333 * ((uint64_t)&a3[-*a2] >> 4);
  v7 = a1[4];
  v8 = a1[1];
  v9 = (char **)(v8 + 8 * (v7 / 0x33));
  if (a1[2] == v8)
    v10 = 0;
  else
    v10 = &(*v9)[80 * (v7 % 0x33)];
  if (a3 == v10)
    v11 = 0;
  else
    v11 = 51 * ((char **)a2 - v9)
        - 0x3333333333333333 * ((uint64_t)&a3[-*a2] >> 4)
        + 0x3333333333333333 * ((v10 - *v9) >> 4);
  v24[0].n128_u64[0] = v8 + 8 * (v7 / 0x33);
  v24[0].n128_u64[1] = (unint64_t)v10;
  sub_1008225DC(v24, v11);
  if (v6 >= 1)
  {
    v12 = v24[0];
    if (v11 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      sub_1008225DC(v24, v6);
      sub_100FFAB7C(v9, v10, (char **)v12.n128_u64[0], (char *)v12.n128_u64[1], v24[0].n128_u64[0], (char *)v24[0].n128_u64[1], v24);
      v18 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v18;
      while ((sub_100821A24((uint64_t)a1, 1) & 1) != 0)
        ;
    }
    else
    {
      sub_1008225DC(v24, v6);
      v13 = v24[0];
      v14 = a1[4] + a1[5];
      v15 = a1[1];
      v16 = (_BYTE **)(v15 + 8 * (v14 / 0x33));
      if (a1[2] == v15)
        v17 = 0;
      else
        v17 = &(*v16)[80 * (v14 % 0x33)];
      v24[0] = v12;
      sub_100FFAD34(v13.n128_u64[0], (_BYTE *)v13.n128_u64[1], v16, v17, (uint64_t)v24);
      a1[5] -= v6;
      while ((sub_100FFAB08(a1, 1) & 1) != 0)
        ;
    }
  }
  v19 = a1[4];
  v20 = a1[1];
  v21 = (_QWORD *)(v20 + 8 * (v19 / 0x33));
  if (a1[2] == v20)
    v22 = 0;
  else
    v22 = *v21 + 80 * (v19 % 0x33);
  v24[0].n128_u64[0] = (unint64_t)v21;
  v24[0].n128_u64[1] = v22;
  sub_1008225DC(v24, v11);
  return v24[0].n128_u64[0];
}

unint64_t sub_100FFA198(_QWORD *a1, _QWORD *a2, char *a3, _QWORD *a4, char *a5)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char **v9;
  char *v10;
  unint64_t v11;
  __n128 v12;
  __n128 v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE **v16;
  _BYTE *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  __n128 v24[2];

  if (a5 == a3)
    v6 = 0;
  else
    v6 = 102 * (a4 - a2)
       - 0x3333333333333333 * ((uint64_t)&a5[-*a4] >> 3)
       + 0x3333333333333333 * ((uint64_t)&a3[-*a2] >> 3);
  v7 = a1[4];
  v8 = a1[1];
  v9 = (char **)(v8 + 8 * (v7 / 0x66));
  if (a1[2] == v8)
    v10 = 0;
  else
    v10 = &(*v9)[40 * (v7 % 0x66)];
  if (a3 == v10)
    v11 = 0;
  else
    v11 = 102 * ((char **)a2 - v9)
        - 0x3333333333333333 * ((uint64_t)&a3[-*a2] >> 3)
        + 0x3333333333333333 * ((v10 - *v9) >> 3);
  v24[0].n128_u64[0] = v8 + 8 * (v7 / 0x66);
  v24[0].n128_u64[1] = (unint64_t)v10;
  sub_1004CE08C(v24, v11);
  if (v6 >= 1)
  {
    v12 = v24[0];
    if (v11 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      sub_1004CE08C(v24, v6);
      sub_100FFAEB4(v9, v10, (char **)v12.n128_u64[0], (char *)v12.n128_u64[1], v24[0].n128_u64[0], (char *)v24[0].n128_u64[1], v24);
      v18 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v18;
      while ((sub_1004CE138((uint64_t)a1, 1) & 1) != 0)
        ;
    }
    else
    {
      sub_1004CE08C(v24, v6);
      v13 = v24[0];
      v14 = a1[4] + a1[5];
      v15 = a1[1];
      v16 = (_BYTE **)(v15 + 8 * (v14 / 0x66));
      if (a1[2] == v15)
        v17 = 0;
      else
        v17 = &(*v16)[40 * (v14 % 0x66)];
      v24[0] = v12;
      sub_100FFB06C(v13.n128_u64[0], (_BYTE *)v13.n128_u64[1], v16, v17, (uint64_t)v24);
      a1[5] -= v6;
      while ((sub_1004CE194(a1, 1) & 1) != 0)
        ;
    }
  }
  v19 = a1[4];
  v20 = a1[1];
  v21 = (_QWORD *)(v20 + 8 * (v19 / 0x66));
  if (a1[2] == v20)
    v22 = 0;
  else
    v22 = *v21 + 40 * (v19 % 0x66);
  v24[0].n128_u64[0] = (unint64_t)v21;
  v24[0].n128_u64[1] = v22;
  sub_1004CE08C(v24, v11);
  return v24[0].n128_u64[0];
}

void sub_100FFA418(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_100FFA444(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 25;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 51;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return sub_10002E778((uint64_t)a1);
}

void sub_100FFA4D8(void **a1)
{
  _BYTE *v2;
  _BYTE *v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void *v41;
  void *__p;
  char *v43;
  char *v44;
  char *v45;
  _QWORD *v46;

  v2 = a1[1];
  v3 = a1[2];
  v4 = (v3 - v2) >> 3;
  if (v3 == v2)
    v5 = 0;
  else
    v5 = 102 * v4 - 1;
  v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(_QWORD)a1[5]] < 0x66)
  {
    v7 = (uint64_t)(a1 + 3);
    v8 = a1[3];
    v9 = *a1;
    v10 = v8 - (_BYTE *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9)
        v11 = 1;
      else
        v11 = v10 >> 2;
      v46 = a1 + 3;
      __p = sub_10025E6A0(v7, v11);
      v43 = (char *)__p;
      v44 = (char *)__p;
      v45 = (char *)__p + 8 * v12;
      v41 = operator new(0xFF0uLL);
      sub_10003732C(&__p, &v41);
      v13 = (char *)a1[1];
      v14 = v44;
      if (v13 == a1[2])
      {
        v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            v15 = v43 - (_BYTE *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p)
                v23 = 1;
              else
                v23 = (v14 - (_BYTE *)__p) >> 2;
              v24 = (char *)sub_10025E6A0((uint64_t)v46, v23);
              v26 = v43;
              v14 = &v24[8 * (v23 >> 2)];
              v27 = v44 - v43;
              if (v44 != v43)
              {
                v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                v28 = 8 * (v27 >> 3);
                v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  v30 = *(_QWORD *)v26;
                  v26 += 8;
                  *(_QWORD *)v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              v31 = __p;
              __p = v24;
              v43 = &v24[8 * (v23 >> 2)];
              v44 = v14;
              v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                v14 = v44;
              }
            }
            else
            {
              v16 = v15 >> 3;
              v17 = v15 >> 3 < -1;
              v18 = (v15 >> 3) + 2;
              if (v17)
                v19 = v18;
              else
                v19 = v16 + 1;
              v20 = &v43[-8 * (v19 >> 1)];
              v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                v14 = v43;
              }
              v22 = &v14[-8 * (v19 >> 1)];
              v14 = &v20[v21];
              v43 = v22;
              v44 = &v20[v21];
            }
          }
          v32 = *(_QWORD *)v13;
          v13 += 8;
          *(_QWORD *)v14 = v32;
          v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        v33 = (char *)a1[1];
      }
      v36 = *a1;
      v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      __p = v36;
      v43 = v33;
      v38 = (char *)a1[3];
      v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      v44 = v13;
      v45 = v38;
      if (v14 - v37 == 8)
        v40 = 51;
      else
        v40 = (uint64_t)a1[4] + 102;
      a1[4] = (void *)v40;
      if (v13 != v33)
        v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      if (v36)
        operator delete(v36);
    }
    else
    {
      if (v2 == v9)
      {
        __p = operator new(0xFF0uLL);
        sub_100212218(a1, &__p);
        v34 = a1[2];
        __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        __p = operator new(0xFF0uLL);
      }
      sub_100343094((uint64_t)a1, &__p);
      if ((_BYTE *)a1[2] - (_BYTE *)a1[1] == 8)
        v35 = 51;
      else
        v35 = (uint64_t)a1[4] + 102;
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 102;
    __p = (void *)*((_QWORD *)v3 - 1);
    a1[2] = v3 - 8;
    sub_100343094((uint64_t)a1, &__p);
  }
}

void sub_100FFA7A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  void *v12;

  operator delete(v12);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_100FFA7F0(void **a1)
{
  _BYTE *v2;
  _BYTE *v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void *v41;
  void *__p;
  char *v43;
  char *v44;
  char *v45;
  _QWORD *v46;

  v2 = a1[1];
  v3 = a1[2];
  v4 = (v3 - v2) >> 3;
  if (v3 == v2)
    v5 = 0;
  else
    v5 = 51 * v4 - 1;
  v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(_QWORD)a1[5]] < 0x33)
  {
    v7 = (uint64_t)(a1 + 3);
    v8 = a1[3];
    v9 = *a1;
    v10 = v8 - (_BYTE *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9)
        v11 = 1;
      else
        v11 = v10 >> 2;
      v46 = a1 + 3;
      __p = sub_10025E6A0(v7, v11);
      v43 = (char *)__p;
      v44 = (char *)__p;
      v45 = (char *)__p + 8 * v12;
      v41 = operator new(0xFF0uLL);
      sub_10003732C(&__p, &v41);
      v13 = (char *)a1[1];
      v14 = v44;
      if (v13 == a1[2])
      {
        v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            v15 = v43 - (_BYTE *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p)
                v23 = 1;
              else
                v23 = (v14 - (_BYTE *)__p) >> 2;
              v24 = (char *)sub_10025E6A0((uint64_t)v46, v23);
              v26 = v43;
              v14 = &v24[8 * (v23 >> 2)];
              v27 = v44 - v43;
              if (v44 != v43)
              {
                v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                v28 = 8 * (v27 >> 3);
                v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  v30 = *(_QWORD *)v26;
                  v26 += 8;
                  *(_QWORD *)v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              v31 = __p;
              __p = v24;
              v43 = &v24[8 * (v23 >> 2)];
              v44 = v14;
              v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                v14 = v44;
              }
            }
            else
            {
              v16 = v15 >> 3;
              v17 = v15 >> 3 < -1;
              v18 = (v15 >> 3) + 2;
              if (v17)
                v19 = v18;
              else
                v19 = v16 + 1;
              v20 = &v43[-8 * (v19 >> 1)];
              v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                v14 = v43;
              }
              v22 = &v14[-8 * (v19 >> 1)];
              v14 = &v20[v21];
              v43 = v22;
              v44 = &v20[v21];
            }
          }
          v32 = *(_QWORD *)v13;
          v13 += 8;
          *(_QWORD *)v14 = v32;
          v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        v33 = (char *)a1[1];
      }
      v36 = *a1;
      v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      __p = v36;
      v43 = v33;
      v38 = (char *)a1[3];
      v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      v44 = v13;
      v45 = v38;
      if (v14 - v37 == 8)
        v40 = 25;
      else
        v40 = (uint64_t)a1[4] + 51;
      a1[4] = (void *)v40;
      if (v13 != v33)
        v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      if (v36)
        operator delete(v36);
    }
    else
    {
      if (v2 == v9)
      {
        __p = operator new(0xFF0uLL);
        sub_100212218(a1, &__p);
        v34 = a1[2];
        __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        __p = operator new(0xFF0uLL);
      }
      sub_100343094((uint64_t)a1, &__p);
      if ((_BYTE *)a1[2] - (_BYTE *)a1[1] == 8)
        v35 = 25;
      else
        v35 = (uint64_t)a1[4] + 51;
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 51;
    __p = (void *)*((_QWORD *)v3 - 1);
    a1[2] = v3 - 8;
    sub_100343094((uint64_t)a1, &__p);
  }
}

void sub_100FFAABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  void *v12;

  operator delete(v12);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100FFAB08(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 51 * ((v2 - v3) >> 3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x33)
    a2 = 1;
  if (v5 < 0x66)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

__n128 sub_100FFAB7C@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, _QWORD *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  char *v12;
  char **v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __n128 result;
  uint64_t v21;
  __n128 v22;

  if (a1 == a3)
  {
    v19 = a2;
    v18 = a4;
    v15 = a5;
    v16 = a6;
  }
  else
  {
    v13 = a3 - 1;
    v12 = *a3;
    v14 = a4;
    v15 = a5;
    v16 = a6;
    while (1)
    {
      sub_100FFAC48(v12, v14, v15, v16, &v21);
      v16 = (char *)v22.n128_u64[1];
      v15 = (_QWORD *)v22.n128_u64[0];
      if (v13 == a1)
        break;
      v17 = *v13--;
      v12 = v17;
      v14 = v17 + 4080;
    }
    v18 = *a1 + 4080;
    v19 = a2;
  }
  sub_100FFAC48(v19, v18, v15, v16, &v21);
  result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_100FFAC48@<X0>(char *a1@<X1>, char *a2@<X2>, _QWORD *a3@<X3>, char *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v6;
  char *v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  void *result;
  uint64_t v14;
  char *v15;

  v6 = a3;
  if (a1 == a2)
  {
    v9 = a1;
  }
  else
  {
    v9 = a2;
    v10 = *a3;
    v11 = a2;
    while (1)
    {
      v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&a4[-v10] >> 4);
      if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v11 - a1) >> 4)) < v12)
        v12 = 0xCCCCCCCCCCCCCCCDLL * ((v11 - a1) >> 4);
      v11 -= 80 * v12;
      a4 -= 80 * v12;
      if (v12)
        result = memmove(a4, v11, 80 * v12 - 4);
      if (v11 == a1)
        break;
      v14 = *--v6;
      v10 = v14;
      a4 = (char *)(v14 + 4080);
    }
    if ((char *)(*v6 + 4080) == a4)
    {
      v15 = (char *)v6[1];
      ++v6;
      a4 = v15;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_100FFAD34(_QWORD *a1, _BYTE *a2, _BYTE **a3, _BYTE *a4, uint64_t a5)
{
  void **v7;
  char *v8;
  _QWORD *v10;
  _BYTE *i;
  _BYTE *v12;
  double result;
  uint64_t v14;
  __int128 v15;

  v7 = *(void ***)a5;
  v8 = *(char **)(a5 + 8);
  if (a1 != a3)
  {
    v10 = a1 + 1;
    for (i = (_BYTE *)(*a1 + 4080); ; i = v12 + 4080)
    {
      sub_100FFADC4(a2, v8, i, v7, &v14);
      v8 = (char *)*((_QWORD *)&v15 + 1);
      v7 = (void **)v15;
      *(_QWORD *)a5 = v15;
      *(_QWORD *)(a5 + 8) = v8;
      if (v10 == a3)
        break;
      v12 = (_BYTE *)*v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  sub_100FFADC4(a2, v8, a4, v7, &v14);
  result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void *sub_100FFADC4@<X0>(_BYTE *__src@<X1>, char *__dst@<X4>, _BYTE *a3@<X2>, void **a4@<X3>, _QWORD *a5@<X8>)
{
  void **v6;
  _BYTE *v7;
  _BYTE *v9;
  char *v10;
  int64_t v11;
  unint64_t v12;
  void *result;
  char *v14;

  v6 = a4;
  v7 = __src;
  if (__src == a3)
  {
    v9 = __src;
  }
  else
  {
    v9 = a3;
    v6 = a4 + 1;
    v10 = (char *)*a4;
    while (1)
    {
      v11 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - __dst + 4080) >> 4);
      v12 = (uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v9 - v7) >> 4)) >= v11 ? v11 : 0xCCCCCCCCCCCCCCCDLL * ((v9 - v7) >> 4);
      if (v12)
        result = memmove(__dst, v7, 80 * v12 - 4);
      v7 += 80 * v12;
      if (v7 == v9)
        break;
      v14 = (char *)*v6++;
      v10 = v14;
      __dst = v14;
    }
    __dst += 80 * v12;
    if ((char *)*(v6 - 1) + 4080 == __dst)
      __dst = (char *)*v6;
    else
      --v6;
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = __dst;
  return result;
}

__n128 sub_100FFAEB4@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, _QWORD *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  char *v12;
  char **v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __n128 result;
  uint64_t v21;
  __n128 v22;

  if (a1 == a3)
  {
    v19 = a2;
    v18 = a4;
    v15 = a5;
    v16 = a6;
  }
  else
  {
    v13 = a3 - 1;
    v12 = *a3;
    v14 = a4;
    v15 = a5;
    v16 = a6;
    while (1)
    {
      sub_100FFAF80(v12, v14, v15, v16, &v21);
      v16 = (char *)v22.n128_u64[1];
      v15 = (_QWORD *)v22.n128_u64[0];
      if (v13 == a1)
        break;
      v17 = *v13--;
      v12 = v17;
      v14 = v17 + 4080;
    }
    v18 = *a1 + 4080;
    v19 = a2;
  }
  sub_100FFAF80(v19, v18, v15, v16, &v21);
  result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_100FFAF80@<X0>(char *a1@<X1>, char *a2@<X2>, _QWORD *a3@<X3>, char *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v6;
  char *v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  void *result;
  uint64_t v14;
  char *v15;

  v6 = a3;
  if (a1 == a2)
  {
    v9 = a1;
  }
  else
  {
    v9 = a2;
    v10 = *a3;
    v11 = a2;
    while (1)
    {
      v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&a4[-v10] >> 3);
      if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v11 - a1) >> 3)) < v12)
        v12 = 0xCCCCCCCCCCCCCCCDLL * ((v11 - a1) >> 3);
      v11 -= 40 * v12;
      a4 -= 40 * v12;
      if (v12)
        result = memmove(a4, v11, 40 * v12 - 4);
      if (v11 == a1)
        break;
      v14 = *--v6;
      v10 = v14;
      a4 = (char *)(v14 + 4080);
    }
    if ((char *)(*v6 + 4080) == a4)
    {
      v15 = (char *)v6[1];
      ++v6;
      a4 = v15;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_100FFB06C(_QWORD *a1, _BYTE *a2, _BYTE **a3, _BYTE *a4, uint64_t a5)
{
  void **v7;
  char *v8;
  _QWORD *v10;
  _BYTE *i;
  _BYTE *v12;
  double result;
  uint64_t v14;
  __int128 v15;

  v7 = *(void ***)a5;
  v8 = *(char **)(a5 + 8);
  if (a1 != a3)
  {
    v10 = a1 + 1;
    for (i = (_BYTE *)(*a1 + 4080); ; i = v12 + 4080)
    {
      sub_100FFB0FC(a2, v8, i, v7, &v14);
      v8 = (char *)*((_QWORD *)&v15 + 1);
      v7 = (void **)v15;
      *(_QWORD *)a5 = v15;
      *(_QWORD *)(a5 + 8) = v8;
      if (v10 == a3)
        break;
      v12 = (_BYTE *)*v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  sub_100FFB0FC(a2, v8, a4, v7, &v14);
  result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void *sub_100FFB0FC@<X0>(_BYTE *__src@<X1>, char *__dst@<X4>, _BYTE *a3@<X2>, void **a4@<X3>, _QWORD *a5@<X8>)
{
  void **v6;
  _BYTE *v7;
  _BYTE *v9;
  char *v10;
  int64_t v11;
  unint64_t v12;
  void *result;
  char *v14;

  v6 = a4;
  v7 = __src;
  if (__src == a3)
  {
    v9 = __src;
  }
  else
  {
    v9 = a3;
    v6 = a4 + 1;
    v10 = (char *)*a4;
    while (1)
    {
      v11 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - __dst + 4080) >> 3);
      v12 = (uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v9 - v7) >> 3)) >= v11 ? v11 : 0xCCCCCCCCCCCCCCCDLL * ((v9 - v7) >> 3);
      if (v12)
        result = memmove(__dst, v7, 40 * v12 - 4);
      v7 += 40 * v12;
      if (v7 == v9)
        break;
      v14 = (char *)*v6++;
      v10 = v14;
      __dst = v14;
    }
    __dst += 40 * v12;
    if ((char *)*(v6 - 1) + 4080 == __dst)
      __dst = (char *)*v6;
    else
      --v6;
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = __dst;
  return result;
}

void sub_100FFB1F0(uint64_t a1)
{
  sub_10002FA68(a1);
  operator delete();
}

uint64_t sub_100FFB214(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 48))(*(_QWORD *)(a1 + 32));
}

uint64_t sub_100FFB224(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 64))(*(_QWORD *)(a1 + 32));
}

uint64_t sub_100FFB234(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 112))(*(_QWORD *)(a1 + 32));
}

void sub_100FFB244(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;

  v4 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  (*(void (**)(uint64_t, uint64_t, void **, uint64_t))(*(_QWORD *)v3 + 128))(v3, v4, __p, a3);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_100FFB2AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_100FFB2C8(uint64_t a1, char a2)
{
  return objc_msgSend(*(id *)(a1 + 16), "isAuthorizedForServiceTypeMask:", 1 << a2);
}

uint64_t sub_100FFB2DC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 136))(*(_QWORD *)(a1 + 32));
}

uint64_t sub_100FFB2EC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 144))(*(_QWORD *)(a1 + 32));
}

uint64_t sub_100FFB2FC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 168))(*(_QWORD *)(a1 + 32));
}

uint64_t sub_100FFB30C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 160))(*(_QWORD *)(a1 + 32));
}

uint64_t sub_100FFB31C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 176))(*(_QWORD *)(a1 + 32));
}

uint64_t sub_100FFB32C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 184))(*(_QWORD *)(a1 + 32));
}

std::string *sub_100FFB33C(int a1, std::string *this)
{
  return std::string::assign(this, "");
}

uint64_t sub_100FFB34C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = rand();
  if ((int)result % 100 <= 0)
    return sub_100FFB3AC(a1, a2);
  return result;
}

uint64_t sub_100FFB3AC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  id v5;
  uint64_t *v6;
  _BOOL8 v7;
  double v8;
  uint64_t *v9;
  double v10;
  double v11;
  NSObject *v12;
  char *v13;
  _QWORD v14[5];
  int v15;
  id v16;
  uint8_t buf[4];
  id v18;

  result = sub_100FFB6A8(a1);
  if ((_DWORD)result)
  {
    if (!*(_BYTE *)(a2 + 180))
    {
      result = sub_100219C74(a2);
      if ((_DWORD)result)
      {
        v5 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
        objc_msgSend(v5, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_100FFB6E4(a1)), CFSTR("wifiHarvestCentroidHasGoodZAxis"));
        v6 = sub_10012A448();
        v7 = 0;
        if (*(double *)(a2 + 28) > -500.0)
        {
          v8 = *(double *)(a2 + 36);
          if (v8 > 0.0)
            v7 = *((double *)v6 + 44) >= v8;
        }
        objc_msgSend(v5, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v7), CFSTR("originalWifi1FixHasGoodZAxis"));
        if (sub_100FFB6E4(a1))
        {
          v9 = sub_10012A448();
          v10 = *(double *)(a2 + 28);
          if (v10 > -500.0)
          {
            v11 = *(double *)(a2 + 36);
            if (v11 > 0.0 && *((double *)v9 + 44) >= v11)
              objc_msgSend(v5, "setObject:forKeyedSubscript:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", vabdd_f64(*(double *)(a1 + 16), v10)), CFSTR("zAxisDifference"));
          }
        }
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102198B50);
        v12 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138543362;
          v18 = v5;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Submitting CoreAnalytics event for associated AP ZAxis comparisons, %{public}@", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_102198B50);
          v15 = 138543362;
          v16 = v5;
          v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "Submitting CoreAnalytics event for associated AP ZAxis comparisons, %{public}@", &v15, 12);
          sub_100512490("Generic", 1, 0, 2, "static void CLWifiAssociatedApZAxisComparator::submitMetrics(const CLWifiAccessPoint &, const CL::Wifi1::Types::ComputedLocation &)", "%s\n", v13);
          if (v13 != (char *)buf)
            free(v13);
        }
        v14[0] = _NSConcreteStackBlock;
        v14[1] = 3221225472;
        v14[2] = sub_100FFB750;
        v14[3] = &unk_10215F370;
        v14[4] = v5;
        return AnalyticsSendEventLazy(CFSTR("com.apple.clx.associatedap.zaxiscomparison"), v14);
      }
    }
  }
  return result;
}

uint64_t sub_100FFB6A8(uint64_t a1)
{
  _BYTE v2[156];
  _BYTE v3[96];

  sub_100014168(a1, (uint64_t)v3);
  sub_10018FFD0((uint64_t)v3, (uint64_t)v2);
  return sub_100219C74((uint64_t)v2);
}

BOOL sub_100FFB6E4(uint64_t a1)
{
  uint64_t *v1;
  _BOOL8 result;
  _BYTE v3[28];
  double v4;
  double v5;
  _BYTE v6[96];

  sub_100014168(a1, (uint64_t)v6);
  sub_10018FFD0((uint64_t)v6, (uint64_t)v3);
  v1 = sub_10012A448();
  result = 0;
  if (v4 > -500.0 && v5 > 0.0)
    return *((double *)v1 + 44) >= v5;
  return result;
}

uint64_t sub_100FFB750(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

void sub_100FFB758(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_100FFB784()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_100FFB820(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_100FFB838()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_100FFB8C4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

void sub_100FFB8DC(uint64_t a1, void *a2)
{
  sub_10061E42C(a1, a2);
}

void sub_100FFB9AC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_10061F47C(v1);
  _Unwind_Resume(a1);
}

id sub_100FFB9C8(uint64_t a1)
{
  return sub_100FFB9D0(*(_QWORD *)(a1 + 32));
}

id sub_100FFB9D0(uint64_t a1)
{
  void *v2;
  double v3;
  double Current;
  double v5;
  NSObject *v6;
  id result;
  const char *v8;
  uint8_t *v9;
  _WORD v10[8];
  uint8_t buf[1640];

  if ((sub_10061F468() & 1) != 0)
  {
    sub_100FFD530((unsigned __int8 *)a1, 1);
    v2 = *(void **)(a1 + 176);
    v3 = 1.79769313e308;
    return objc_msgSend(v2, "setNextFireDelay:", v3);
  }
  Current = CFAbsoluteTimeGetCurrent();
  objc_msgSend((id)qword_102310A10, "pairedDeviceLastSeenTimestamp");
  if (Current - v5 <= 3299.0)
  {
    v2 = *(void **)(a1 + 176);
    v3 = 3300.0;
    return objc_msgSend(v2, "setNextFireDelay:", v3);
  }
  if (qword_10229FEB0 != -1)
    dispatch_once(&qword_10229FEB0, &stru_102198CC8);
  v6 = qword_10229FEB8;
  if (os_log_type_enabled((os_log_t)qword_10229FEB8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Spectator subscriptions expired", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEB0 != -1)
      dispatch_once(&qword_10229FEB0, &stru_102198CC8);
    v10[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEB8, 0, "#Warning Spectator subscriptions expired", v10, 2);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLCompanionNotifierWatch::checkAndToggleSpectatorSubscriptions()", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  result = (id)sub_100FFD530((unsigned __int8 *)a1, 0);
  *(_BYTE *)(a1 + 184) = 0;
  return result;
}

uint64_t sub_100FFBC24(id *a1)
{
  *a1 = off_102198B80;

  (*((void (**)(id *))*a1 + 2))(a1);
  return sub_10061F47C(a1);
}

void sub_100FFBC70(id *a1)
{
  sub_100FFBC24(a1);
  operator delete();
}

void sub_100FFBC94(uint64_t a1, int a2, void *a3)
{
  NSObject *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  id v10;
  void *v11;
  NSObject *v12;
  uint8_t *v13;
  double v14;
  id v15;
  id v16;
  uint64_t v17;
  NSObject *v18;
  unsigned int v19;
  NSObject *v20;
  id v21;
  void *v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  id v41;
  void *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  id v54;
  id v55;
  id v56;
  void *v57;
  NSObject *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  NSObject *v78;
  uint8_t *v79;
  double v80;
  id v81;
  NSObject *v82;
  NSObject *v83;
  NSObject *v84;
  NSObject *v85;
  NSObject *v86;
  uint8_t *v87;
  void *v88;
  uint64_t v89;
  int v90;
  int v91;
  NSObject *v92;
  uint64_t v93;
  uint64_t v94;
  const char *v95;
  uint8_t *v96;
  uint64_t v97;
  unsigned int v98;
  const char *v99;
  uint8_t *v100;
  const char *v101;
  uint8_t *v102;
  const char *v103;
  uint8_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  const char *v109;
  uint8_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int v120;
  const char *v121;
  uint8_t *v122;
  double v123;
  uint64_t v124;
  double v125;
  double v126;
  int v127;
  _QWORD v128[2];
  _QWORD v129[5];
  _QWORD v130[5];
  _BYTE v131[24];
  uint64_t v132;
  __int16 v133;
  uint64_t v134;
  __int16 v135;
  unsigned int v136;
  uint8_t buf[1640];

  if (qword_10229FEB0 != -1)
    dispatch_once(&qword_10229FEB0, &stru_102198CC8);
  v6 = qword_10229FEB8;
  if (os_log_type_enabled((os_log_t)qword_10229FEB8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = a2;
    *(_WORD *)&buf[8] = 2048;
    *(_QWORD *)&buf[10] = objc_msgSend(a3, "length");
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Received companion message,type,%d,size,%lu", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEB0 != -1)
      dispatch_once(&qword_10229FEB0, &stru_102198CC8);
    v94 = qword_10229FEB8;
    *(_DWORD *)v131 = 67109376;
    *(_DWORD *)&v131[4] = a2;
    *(_WORD *)&v131[8] = 2048;
    *(_QWORD *)&v131[10] = objc_msgSend(a3, "length");
    LODWORD(v123) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v94, 2, "Received companion message,type,%d,size,%lu", v131, *(_QWORD *)&v123);
    v96 = (uint8_t *)v95;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLCompanionNotifierWatch::receiveCompanionMessage(CLCompanionNotifier_Type::Type, NSData *)", "%s\n", v95);
    if (v96 != buf)
      free(v96);
  }
  switch(a2)
  {
    case 2:
      *(_QWORD *)v131 = 0;
      v30 = +[NSJSONSerialization JSONObjectWithData:options:error:](NSJSONSerialization, "JSONObjectWithData:options:error:", a3, 0, v131);
      if (!*(_QWORD *)v131)
      {
        v31 = v30;
        if (objc_msgSend(v30, "count") == (id)9)
        {
          memset(&buf[88], 0, 96);
          objc_msgSend(objc_msgSend(v31, "objectAtIndexedSubscript:", 0), "doubleValue");
          *(_QWORD *)buf = v32;
          objc_msgSend(objc_msgSend(v31, "objectAtIndexedSubscript:", 1), "doubleValue");
          *(_QWORD *)&buf[8] = v33;
          objc_msgSend(objc_msgSend(v31, "objectAtIndexedSubscript:", 5), "doubleValue");
          *(_QWORD *)&buf[16] = v34;
          objc_msgSend(objc_msgSend(v31, "objectAtIndexedSubscript:", 2), "doubleValue");
          *(_QWORD *)&buf[24] = v35;
          objc_msgSend(objc_msgSend(v31, "objectAtIndexedSubscript:", 3), "doubleValue");
          *(_QWORD *)&buf[32] = v36;
          objc_msgSend(objc_msgSend(v31, "objectAtIndexedSubscript:", 8), "doubleValue");
          *(_QWORD *)&buf[40] = v37;
          objc_msgSend(objc_msgSend(v31, "objectAtIndexedSubscript:", 4), "doubleValue");
          *(_QWORD *)&buf[48] = v38;
          objc_msgSend(objc_msgSend(v31, "objectAtIndexedSubscript:", 6), "doubleValue");
          *(_QWORD *)&buf[56] = v39;
          objc_msgSend(objc_msgSend(v31, "objectAtIndexedSubscript:", 7), "doubleValue");
          *(_OWORD *)&buf[64] = v40;
          *(_DWORD *)&buf[176] = 0;
          *(_QWORD *)&buf[184] = 0;
          *(_QWORD *)&buf[80] = 0;
          *(_DWORD *)&buf[88] = 0;
          memset(&buf[96], 0, 73);
          LODWORD(v128[0]) = 3;
          goto LABEL_130;
        }
      }
      if (qword_10229FEB0 != -1)
        dispatch_once(&qword_10229FEB0, &stru_102198CC8);
      v84 = qword_10229FEB8;
      if (os_log_type_enabled((os_log_t)qword_10229FEB8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEFAULT, "#Warning error serializing OdometerCyclingData", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FEB0 != -1)
          dispatch_once(&qword_10229FEB0, &stru_102198CC8);
        LOWORD(v128[0]) = 0;
        LODWORD(v123) = 2;
        v14 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEB8, 0, "#Warning error serializing OdometerCyclingData", v128, *(_QWORD *)&v123);
        goto LABEL_115;
      }
      return;
    case 6:
      *(_QWORD *)v131 = 0;
      v41 = +[NSJSONSerialization JSONObjectWithData:options:error:](NSJSONSerialization, "JSONObjectWithData:options:error:", a3, 0, v131);
      if (!*(_QWORD *)v131)
      {
        v42 = v41;
        if (objc_msgSend(v41, "count") == (id)3)
        {
          memset(buf, 0, 192);
          objc_msgSend(objc_msgSend(v42, "objectAtIndexedSubscript:", 0), "doubleValue");
          *(_QWORD *)&buf[8] = v43;
          *(_DWORD *)&buf[16] = objc_msgSend(objc_msgSend(v42, "objectAtIndexedSubscript:", 1), "unsignedIntValue");
          *(_DWORD *)&buf[20] = objc_msgSend(objc_msgSend(v42, "objectAtIndexedSubscript:", 2), "unsignedIntValue");
          v44 = 4;
          goto LABEL_129;
        }
      }
      if (qword_10229FEB0 != -1)
        dispatch_once(&qword_10229FEB0, &stru_102198CC8);
      v85 = qword_10229FEB8;
      if (os_log_type_enabled((os_log_t)qword_10229FEB8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_DEFAULT, "#Warning error deserializing OdometerElevationData", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FEB0 != -1)
          dispatch_once(&qword_10229FEB0, &stru_102198CC8);
        LOWORD(v128[0]) = 0;
        LODWORD(v123) = 2;
        v14 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEB8, 0, "#Warning error deserializing OdometerElevationData", v128, *(_QWORD *)&v123);
        goto LABEL_115;
      }
      return;
    case 13:
      *(_QWORD *)v131 = 0;
      v10 = +[NSJSONSerialization JSONObjectWithData:options:error:](NSJSONSerialization, "JSONObjectWithData:options:error:", a3, 0, v131);
      if (*(_QWORD *)v131 || (v11 = v10, (unint64_t)objc_msgSend(v10, "count") <= 1))
      {
        if (qword_10229FEB0 != -1)
          dispatch_once(&qword_10229FEB0, &stru_102198CC8);
        v12 = qword_10229FEB8;
        if (os_log_type_enabled((os_log_t)qword_10229FEB8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning error deserializing CoarseElevationData", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FEB0 != -1)
            dispatch_once(&qword_10229FEB0, &stru_102198CC8);
          LOWORD(v128[0]) = 0;
          LODWORD(v123) = 2;
          v14 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEB8, 0, "#Warning error deserializing CoarseElevationData", v128, *(_QWORD *)&v123);
          goto LABEL_115;
        }
      }
      else
      {
        memset(&buf[16], 0, 176);
        objc_msgSend(objc_msgSend(v11, "objectAtIndexedSubscript:", 0), "doubleValue");
        *(_QWORD *)buf = v93;
        *(_DWORD *)&buf[8] = objc_msgSend(objc_msgSend(v11, "objectAtIndexedSubscript:", 1), "unsignedIntValue");
        *(_DWORD *)&buf[12] = 0;
        v44 = 8;
LABEL_129:
        LODWORD(v128[0]) = v44;
LABEL_130:
        (*(void (**)(uint64_t, _QWORD *, uint8_t *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, v128, buf, 0, 0xFFFFFFFFLL, 0);
      }
      return;
    case 14:
      v45 = objc_opt_class(NSString, v7);
      v47 = objc_opt_class(NSNumber, v46);
      v49 = objc_opt_class(NSDictionary, v48);
      v51 = objc_opt_class(NSArray, v50);
      v53 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClasses:fromData:error:", +[NSSet setWithObjects:](NSSet, "setWithObjects:", v45, v47, v49, v51, objc_opt_class(CMPedometerBin, v52), 0), a3, 0);
      v54 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLMotionSyncStore"));
      v130[0] = _NSConcreteStackBlock;
      v130[1] = 3221225472;
      v130[2] = sub_100FFD518;
      v130[3] = &unk_102155328;
      v130[4] = v53;
      objc_msgSend(v54, "doAsync:", v130);
      return;
    case 15:
      *(_BYTE *)(a1 + 184) = 0;
      sub_100FFD530((unsigned __int8 *)a1, 1);
      return;
    case 18:
      v15 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLMotionStateObserver"));
      v129[0] = _NSConcreteStackBlock;
      v129[1] = 3221225472;
      v129[2] = sub_100FFD868;
      v129[3] = &unk_102155328;
      v129[4] = a3;
      objc_msgSend(v15, "doAsync:", v129);
      objc_msgSend(a3, "getBytes:length:", v131, 40);
      if (*(_DWORD *)v131 == 1)
      {
        memset(&buf[20], 0, 172);
        *(_OWORD *)buf = *(_OWORD *)&v131[4];
        *(_DWORD *)&buf[16] = *(_DWORD *)&v131[20];
        LODWORD(v128[0]) = 10;
        (*(void (**)(uint64_t, _QWORD *, uint8_t *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, v128, buf, 1, 0xFFFFFFFFLL, 0);
      }
      return;
    case 19:
      v55 = objc_msgSend(objc_alloc((Class)NSString), "initWithData:encoding:", a3, 4);
      objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLMotionAlarmNotifier")), "launchWatchApplicationForCompanion:", v55);

      return;
    case 20:
      v128[0] = 0;
      v56 = +[NSJSONSerialization JSONObjectWithData:options:error:](NSJSONSerialization, "JSONObjectWithData:options:error:", a3, 0, v128);
      if (!v128[0])
      {
        v57 = v56;
        if (objc_msgSend(v56, "count") == (id)5)
        {
          if (qword_10229FE80 != -1)
            dispatch_once(&qword_10229FE80, &stru_102198CE8);
          v58 = qword_10229FE88;
          if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEBUG))
          {
            objc_msgSend(objc_msgSend(v57, "objectAtIndexedSubscript:", 0), "doubleValue");
            v60 = v59;
            objc_msgSend(objc_msgSend(v57, "objectAtIndexedSubscript:", 1), "doubleValue");
            v62 = v61;
            objc_msgSend(objc_msgSend(v57, "objectAtIndexedSubscript:", 2), "doubleValue");
            v64 = v63;
            objc_msgSend(objc_msgSend(v57, "objectAtIndexedSubscript:", 3), "doubleValue");
            v66 = v65;
            v67 = objc_msgSend(objc_msgSend(v57, "objectAtIndexedSubscript:", 4), "intValue");
            *(_DWORD *)buf = 134219008;
            *(_QWORD *)&buf[4] = v60;
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v62;
            *(_WORD *)&buf[22] = 2048;
            *(_QWORD *)&buf[24] = v64;
            *(_WORD *)&buf[32] = 2048;
            *(_QWORD *)&buf[34] = v66;
            *(_WORD *)&buf[42] = 1024;
            *(_DWORD *)&buf[44] = v67;
            _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEBUG, "Watch received absolute altitude update, timestamp, %f, altitude, %f, accuracy %f, precision, %f, status, %d", buf, 0x30u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FE80 != -1)
              dispatch_once(&qword_10229FE80, &stru_102198CE8);
            v111 = qword_10229FE88;
            objc_msgSend(objc_msgSend(v57, "objectAtIndexedSubscript:", 0), "doubleValue");
            v113 = v112;
            objc_msgSend(objc_msgSend(v57, "objectAtIndexedSubscript:", 1), "doubleValue");
            v115 = v114;
            objc_msgSend(objc_msgSend(v57, "objectAtIndexedSubscript:", 2), "doubleValue");
            v117 = v116;
            objc_msgSend(objc_msgSend(v57, "objectAtIndexedSubscript:", 3), "doubleValue");
            v119 = v118;
            v120 = objc_msgSend(objc_msgSend(v57, "objectAtIndexedSubscript:", 4), "intValue");
            *(_DWORD *)v131 = 134219008;
            *(_QWORD *)&v131[4] = v113;
            *(_WORD *)&v131[12] = 2048;
            *(_QWORD *)&v131[14] = v115;
            *(_WORD *)&v131[22] = 2048;
            v132 = v117;
            v133 = 2048;
            v134 = v119;
            v135 = 1024;
            v136 = v120;
            LODWORD(v123) = 48;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v111, 2, "Watch received absolute altitude update, timestamp, %f, altitude, %f, accuracy %f, precision, %f, status, %d", COERCE_DOUBLE(v131), v123, v125, v126, v127);
            v122 = (uint8_t *)v121;
            sub_100512490("Generic", 1, 0, 2, "virtual void CLCompanionNotifierWatch::receiveCompanionMessage(CLCompanionNotifier_Type::Type, NSData *)", "%s\n", v121);
            if (v122 != buf)
              free(v122);
          }
          memset(&buf[24], 0, 168);
          objc_msgSend(objc_msgSend(v57, "objectAtIndexedSubscript:", 1), "doubleValue");
          *(_QWORD *)buf = v68;
          objc_msgSend(objc_msgSend(v57, "objectAtIndexedSubscript:", 2), "doubleValue");
          *(_QWORD *)&buf[8] = v69;
          objc_msgSend(objc_msgSend(v57, "objectAtIndexedSubscript:", 3), "doubleValue");
          *(_QWORD *)&buf[16] = v70;
          v29 = 11;
          goto LABEL_61;
        }
      }
      if (qword_10229FE80 != -1)
        dispatch_once(&qword_10229FE80, &stru_102198CE8);
      v86 = qword_10229FE88;
      if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEFAULT, "#Warning error deserializing Absolute Altitude update", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE80 != -1)
          dispatch_once(&qword_10229FE80, &stru_102198CE8);
        *(_WORD *)v131 = 0;
        LODWORD(v123) = 2;
        v14 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 0, "#Warning error deserializing Absolute Altitude update", v131, *(_QWORD *)&v123);
        goto LABEL_115;
      }
      return;
    case 23:
      sub_100FFD880(a1);
      return;
    case 24:
      if ((sub_10142EA54() & 1) == 0)
      {
        v16 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLKappaNotifier"));
        v17 = 65793;
        goto LABEL_66;
      }
      return;
    case 25:
      if ((sub_10142EA54() & 1) == 0)
      {
        v8 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLKappaNotifier"));
        v9 = 257;
        goto LABEL_22;
      }
      return;
    case 26:
      v16 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLKappaNotifier"));
      v17 = 0x101000001;
      goto LABEL_66;
    case 27:
    case 29:
      v8 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLKappaNotifier"));
      v9 = 16777217;
LABEL_22:
      objc_msgSend(v8, "dontcollect:isLocal:", v9, 0);
      return;
    case 28:
      v16 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLKappaNotifier"));
      v17 = 0x100000101000001;
LABEL_66:
      objc_msgSend(v16, "collect:isLocal:", v17, 0);
      return;
    case 30:
      objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLKappaNotifier")), "companionHeartbeat:", a3);
      return;
    case 32:
      v71 = objc_opt_class(NSString, v7);
      v73 = objc_opt_class(NSNumber, v72);
      v75 = objc_opt_class(NSDictionary, v74);
      v128[0] = 0;
      v77 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClasses:fromData:error:", +[NSSet setWithObjects:](NSSet, "setWithObjects:", v71, v73, v75, objc_opt_class(NSArray, v76), 0), a3, v128);
      if (v128[0])
      {
        if (qword_10229FF20 != -1)
          dispatch_once(&qword_10229FF20, &stru_102198D48);
        v78 = qword_10229FF28;
        if (os_log_type_enabled((os_log_t)qword_10229FF28, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)&buf[4] = v128[0];
          _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_ERROR, "Error reading config from companion: %@", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FF20 != -1)
            dispatch_once(&qword_10229FF20, &stru_102198D48);
          *(_DWORD *)v131 = 138412290;
          *(_QWORD *)&v131[4] = v128[0];
          LODWORD(v124) = 12;
          v80 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF28, 16, "Error reading config from companion: %@", v131, v124);
LABEL_127:
          v87 = v79;
          sub_100512490("Generic", 1, 0, 0, "virtual void CLCompanionNotifierWatch::receiveCompanionMessage(CLCompanionNotifier_Type::Type, NSData *)", "%s\n", v80);
          goto LABEL_116;
        }
      }
      else
      {
        v88 = v77;
        v89 = sub_100EFA98C();
        v90 = sub_100EFC074(v89, v88);
        if (v90 != 100)
        {
          v91 = v90;
          if (qword_10229FF20 != -1)
            dispatch_once(&qword_10229FF20, &stru_102198D48);
          v92 = qword_10229FF28;
          if (os_log_type_enabled((os_log_t)qword_10229FF28, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67240192;
            *(_DWORD *)&buf[4] = v91;
            _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_ERROR, "[Dynamic Config] Error on config insertion: %{public}d", buf, 8u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FF20 != -1)
              dispatch_once(&qword_10229FF20, &stru_102198D48);
            *(_DWORD *)v131 = 67240192;
            *(_DWORD *)&v131[4] = v91;
            LODWORD(v124) = 8;
            v80 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF28, 16, "[Dynamic Config] Error on config insertion: %{public}d", v131, v124);
            goto LABEL_127;
          }
        }
      }
      return;
    case 33:
      v81 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLMotionAlarmNotifier"));
      if (qword_10229FF50 != -1)
        dispatch_once(&qword_10229FF50, &stru_102198D28);
      v82 = qword_10229FF58;
      if (os_log_type_enabled((os_log_t)qword_10229FF58, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEBUG, "Watch received motion alarm trigger for kTypeSignificantCardioChange", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FF50 != -1)
          dispatch_once(&qword_10229FF50, &stru_102198D28);
        *(_WORD *)v131 = 0;
        LODWORD(v123) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF58, 2, "Watch received motion alarm trigger for kTypeSignificantCardioChange", v131, *(_QWORD *)&v123);
        v104 = (uint8_t *)v103;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLCompanionNotifierWatch::receiveCompanionMessage(CLCompanionNotifier_Type::Type, NSData *)", "%s\n", v103);
        if (v104 != buf)
          free(v104);
      }
      objc_msgSend(v81, "onCardioChangeEvent");
      return;
    case 35:
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_102198D08);
      v18 = qword_10229FCD8;
      if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEFAULT))
      {
        v19 = objc_msgSend(a3, "length");
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v19;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Watch received mobility calibration data from phone. Message size: %d bytes", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCD0 != -1)
          dispatch_once(&qword_10229FCD0, &stru_102198D08);
        v97 = qword_10229FCD8;
        v98 = objc_msgSend(a3, "length");
        *(_DWORD *)v131 = 67109120;
        *(_DWORD *)&v131[4] = v98;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v97, 0, "Watch received mobility calibration data from phone. Message size: %d bytes", v131);
        v100 = (uint8_t *)v99;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLCompanionNotifierWatch::receiveCompanionMessage(CLCompanionNotifier_Type::Type, NSData *)", "%s\n", v99);
        if (v100 != buf)
          free(v100);
      }
      if (_os_feature_enabled_impl("CoreLocation", "CMMobilityCalibration"))
        objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLStepCountNotifier")), "receiveMobilityDataFromCompanion:", a3);
      return;
    case 36:
      if (qword_10229FE80 != -1)
        dispatch_once(&qword_10229FE80, &stru_102198CE8);
      v20 = qword_10229FE88;
      if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "received filtered pressure from phone", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE80 != -1)
          dispatch_once(&qword_10229FE80, &stru_102198CE8);
        *(_WORD *)v131 = 0;
        LODWORD(v123) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 2, "received filtered pressure from phone", v131, *(_QWORD *)&v123);
        v102 = (uint8_t *)v101;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLCompanionNotifierWatch::receiveCompanionMessage(CLCompanionNotifier_Type::Type, NSData *)", "%s\n", v101);
        if (v102 != buf)
          free(v102);
      }
      v128[0] = 0;
      v21 = +[NSJSONSerialization JSONObjectWithData:options:error:](NSJSONSerialization, "JSONObjectWithData:options:error:", a3, 0, v128);
      if (v128[0] || (v22 = v21, objc_msgSend(v21, "count") != (id)2))
      {
        if (qword_10229FE80 != -1)
          dispatch_once(&qword_10229FE80, &stru_102198CE8);
        v83 = qword_10229FE88;
        if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEFAULT, "#Warning error deserializing Filtered Pressure update", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FE80 != -1)
            dispatch_once(&qword_10229FE80, &stru_102198CE8);
          *(_WORD *)v131 = 0;
          LODWORD(v123) = 2;
          v14 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 0, "#Warning error deserializing Filtered Pressure update", v131, *(_QWORD *)&v123);
LABEL_115:
          v87 = v13;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLCompanionNotifierWatch::receiveCompanionMessage(CLCompanionNotifier_Type::Type, NSData *)", "%s\n", v14);
LABEL_116:
          if (v87 != buf)
            free(v87);
        }
      }
      else
      {
        if (qword_10229FE80 != -1)
          dispatch_once(&qword_10229FE80, &stru_102198CE8);
        v23 = qword_10229FE88;
        if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEFAULT))
        {
          objc_msgSend(objc_msgSend(v22, "objectAtIndexedSubscript:", 0), "doubleValue");
          v25 = v24;
          objc_msgSend(objc_msgSend(v22, "objectAtIndexedSubscript:", 1), "doubleValue");
          *(_DWORD *)buf = 134218240;
          *(_QWORD *)&buf[4] = v25;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v26;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Watch received filtered pressure update, timestamp, %f, filteredPressure, %f", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FE80 != -1)
            dispatch_once(&qword_10229FE80, &stru_102198CE8);
          v105 = qword_10229FE88;
          objc_msgSend(objc_msgSend(v22, "objectAtIndexedSubscript:", 0), "doubleValue");
          v107 = v106;
          objc_msgSend(objc_msgSend(v22, "objectAtIndexedSubscript:", 1), "doubleValue");
          *(_DWORD *)v131 = 134218240;
          *(_QWORD *)&v131[4] = v107;
          *(_WORD *)&v131[12] = 2048;
          *(_QWORD *)&v131[14] = v108;
          LODWORD(v123) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v105, 0, "Watch received filtered pressure update, timestamp, %f, filteredPressure, %f", COERCE_DOUBLE(v131), v123);
          v110 = (uint8_t *)v109;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLCompanionNotifierWatch::receiveCompanionMessage(CLCompanionNotifier_Type::Type, NSData *)", "%s\n", v109);
          if (v110 != buf)
            free(v110);
        }
        memset(&buf[24], 0, 168);
        objc_msgSend(objc_msgSend(v22, "objectAtIndexedSubscript:", 1), "doubleValue");
        *(_QWORD *)buf = v27;
        objc_msgSend(objc_msgSend(v22, "objectAtIndexedSubscript:", 0), "doubleValue");
        *(_QWORD *)&buf[8] = v28;
        *(_QWORD *)&buf[16] = 0x4014000000000000;
        v29 = 12;
LABEL_61:
        *(_DWORD *)v131 = v29;
        (*(void (**)(uint64_t, _BYTE *, uint8_t *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, v131, buf, 0, 0xFFFFFFFFLL, 0);
      }
      return;
    default:
      return;
  }
}

uint64_t sub_100FFD518(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 224))(a2, *(_QWORD *)(a1 + 32));
}

uint64_t sub_100FFD530(unsigned __int8 *a1, int a2)
{
  NSObject *v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t result;
  char v11;
  int v12;
  uint64_t v13;
  unsigned __int16 v14;
  int v15;
  int v16;
  int v17;
  const char *v18;
  uint8_t *v19;
  int v20;
  int v21;
  int v22;
  __int16 v23;
  int v24;
  uint8_t buf[4];
  int v26;
  __int16 v27;
  unsigned int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;

  if (qword_10229FD70 != -1)
    dispatch_once(&qword_10229FD70, &stru_102198D68);
  v4 = qword_10229FD78;
  if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_DEBUG))
  {
    v5 = sub_10061F468();
    v6 = a1[184];
    v7 = a1[109];
    v8 = a1[110];
    *(_DWORD *)buf = 8;
    v9 = sub_1001B7864((uint64_t)a1, (int *)buf, 1);
    *(_DWORD *)buf = 67110400;
    v26 = a2;
    v27 = 1024;
    v28 = v5;
    v29 = 1024;
    v30 = v6;
    v31 = 1024;
    v32 = v7;
    v33 = 1024;
    v34 = v8;
    v35 = 1024;
    v36 = v9;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "coarse elevation sub,enable,%d,transport,%d,subsCompleted,%d,unlockSinceBoot,%d,fitnessTracking,%d,numClients,%d", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_102198D68);
    v13 = qword_10229FD78;
    v14 = (unsigned __int16)sub_10061F468();
    v15 = a1[184];
    v16 = a1[109];
    v20 = 8;
    v17 = sub_1001B7864((uint64_t)a1, &v20, 1);
    LOWORD(v21) = 1024;
    HIWORD(v21) = v14;
    LOWORD(v22) = HIWORD(v16);
    HIWORD(v22) = 1024;
    v23 = 1024;
    v24 = v17;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v13, 2, "coarse elevation sub,enable,%d,transport,%d,subsCompleted,%d,unlockSinceBoot,%d,fitnessTracking,%d,numClients,%d", &v20, 38, 67110400, v21, v15, v22);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "void CLCompanionNotifierWatch::toggleCoarseElevationSubscription(BOOL)", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  result = (uint64_t)sub_10061F468();
  if ((_DWORD)result)
  {
    if (a1[184])
    {
      if (!a1[110]
        || (a2 & 1) == 0 && (*(_DWORD *)buf = 8, result = sub_1001B7864((uint64_t)a1, (int *)buf, 1), !(_DWORD)result))
      {
        v11 = 0;
        v12 = 12;
LABEL_12:
        result = (uint64_t)sub_10061F764(120.0, (uint64_t)a1, v12, 0, 300, 0, 0, 0, 0, 0);
        a1[184] = v11;
      }
    }
    else if (a2)
    {
      *(_DWORD *)buf = 8;
      result = sub_1001B7864((uint64_t)a1, (int *)buf, 1);
      if ((_DWORD)result)
      {
        result = sub_10061F50C((uint64_t)a1);
        if ((_DWORD)result)
        {
          if (a1[109] && a1[110])
          {
            v11 = 1;
            v12 = 11;
            goto LABEL_12;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_100FFD868(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 208))(a2, *(_QWORD *)(a1 + 32));
}

uint64_t sub_100FFD880(uint64_t a1)
{
  uint64_t result;

  sub_100197040();
  result = sub_1001B7910();
  if ((result & 0x8000000000000) != 0 || *(_BYTE *)(a1 + 186) || *(_BYTE *)(a1 + 189))
    return (uint64_t)sub_10061F764(120.0, a1, 22, 0, 300, 1, 0, 0, 0, 0);
  return result;
}

uint64_t sub_100FFD8F0(uint64_t a1, int a2, int *a3, uint64_t **a4)
{
  NSObject *v8;
  int v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t *v13;
  id v14;
  int v16;
  const char *v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t *v20;
  const char *v21;
  uint8_t *v22;
  int v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;
  uint8_t buf[4];
  uint64_t v28;
  __int16 v29;
  uint64_t *v30;

  if (qword_10229FEB0 != -1)
    dispatch_once(&qword_10229FEB0, &stru_102198CC8);
  v8 = qword_10229FEB8;
  if (os_log_type_enabled((os_log_t)qword_10229FEB8, OS_LOG_TYPE_DEBUG))
  {
    v9 = *a3;
    *(_DWORD *)buf = 67109120;
    LODWORD(v28) = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Registering for companion notification type %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEB0 != -1)
      dispatch_once(&qword_10229FEB0, &stru_102198CC8);
    v16 = *a3;
    v23 = 67109120;
    LODWORD(v24) = v16;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEB8, 2, "Registering for companion notification type %d", &v23);
    v18 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLCompanionNotifierWatch::registerForNotification(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::RegistrationInfo &)", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
  v10 = sub_1000B49C0(a1, a2, a3, a4);
  if ((_DWORD)v10)
  {
    switch(*a3)
    {
      case 0:
        if (qword_10229FEB0 != -1)
          dispatch_once(&qword_10229FEB0, &stru_102198CC8);
        v11 = qword_10229FEB8;
        if (os_log_type_enabled((os_log_t)qword_10229FEB8, OS_LOG_TYPE_DEBUG))
        {
          v12 = *(_QWORD *)(a1 + 160);
          v13 = *a4;
          *(_DWORD *)buf = 134218240;
          v28 = v12;
          v29 = 2048;
          v30 = v13;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Last Overridden Session,%ld, Registration Info Overridden Session,%ld", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FEB0 != -1)
            dispatch_once(&qword_10229FEB0, &stru_102198CC8);
          v19 = *(_QWORD *)(a1 + 160);
          v20 = *a4;
          v23 = 134218240;
          v24 = v19;
          v25 = 2048;
          v26 = v20;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEB8, 2, "Last Overridden Session,%ld, Registration Info Overridden Session,%ld", &v23, 22);
          v22 = (uint8_t *)v21;
          sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLCompanionNotifierWatch::registerForNotification(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::RegistrationInfo &)", "%s\n", v21);
          if (v22 != buf)
            free(v22);
        }
        *(_QWORD *)(a1 + 160) = *a4;
        sub_100FFDD14(a1);
        break;
      case 3:
        sub_10061F764(120.0, a1, 0, 0, 300, 1, 0, 0, 0, 0);
        break;
      case 4:
        sub_10061F764(120.0, a1, 4, 0, 300, 1, 0, 0, 0, 0);
        break;
      case 8:
        sub_100FFD530((unsigned __int8 *)a1, 1);
        break;
      default:
        break;
    }
  }
  v14 = sub_10061F468();
  (*(void (**)(uint64_t, id))(*(_QWORD *)a1 + 208))(a1, v14);
  return v10;
}

void sub_100FFDD14(uint64_t a1)
{
  NSData *v2;
  NSObject *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  const char *v9;
  uint8_t *v10;
  id v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  id v15;
  uint8_t buf[4];
  uint64_t v17;
  __int16 v18;
  id v19;
  NSNumber *v20;

  v11 = 0;
  v20 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 160));
  v2 = +[NSJSONSerialization dataWithJSONObject:options:error:](NSJSONSerialization, "dataWithJSONObject:options:error:", +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v20, 1), 0, &v11);
  if (v11)
  {
    if (qword_10229FEB0 != -1)
      dispatch_once(&qword_10229FEB0, &stru_102198CC8);
    v3 = qword_10229FEB8;
    if (os_log_type_enabled((os_log_t)qword_10229FEB8, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *(_QWORD *)(a1 + 160);
      v5 = objc_msgSend(objc_msgSend(v11, "description"), "UTF8String");
      *(_DWORD *)buf = 134218242;
      v17 = v4;
      v18 = 2080;
      v19 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning Error serializing session override (%ld): %s", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FEB0 != -1)
        dispatch_once(&qword_10229FEB0, &stru_102198CC8);
      v6 = qword_10229FEB8;
      v7 = *(_QWORD *)(a1 + 160);
      v8 = objc_msgSend(objc_msgSend(v11, "description"), "UTF8String");
      v12 = 134218242;
      v13 = v7;
      v14 = 2080;
      v15 = v8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v6, 0, "#Warning Error serializing session override (%ld): %s", &v12, 22);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLCompanionNotifierWatch::sendLastOverriddenSession() const", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
  else if (*(_BYTE *)(a1 + 168))
  {
    sub_10061F764(120.0, a1, 7, v2, 300, 1, 0, 0, 0, 0);
  }
}

BOOL sub_100FFDF80(uint64_t a1, int a2, int *a3)
{
  NSObject *v6;
  int v7;
  _BOOL8 v8;
  id v9;
  int v11;
  const char *v12;
  uint8_t *v13;
  _DWORD v14[4];
  uint8_t buf[4];
  int v16;

  if (qword_10229FEB0 != -1)
    dispatch_once(&qword_10229FEB0, &stru_102198CC8);
  v6 = qword_10229FEB8;
  if (os_log_type_enabled((os_log_t)qword_10229FEB8, OS_LOG_TYPE_DEBUG))
  {
    v7 = *a3;
    *(_DWORD *)buf = 67109120;
    v16 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Unregistering for companion notification type %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEB0 != -1)
      dispatch_once(&qword_10229FEB0, &stru_102198CC8);
    v11 = *a3;
    v14[0] = 67109120;
    v14[1] = v11;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEB8, 2, "Unregistering for companion notification type %d", v14);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLCompanionNotifierWatch::unregisterForNotification(int, const CLCompanionNotifier_Type::Notification &)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  v8 = sub_100245E20((char *)a1, a2, a3);
  if (v8)
  {
    switch(*a3)
    {
      case 0:
        *(_DWORD *)buf = 0;
        if (!sub_1001B7864(a1, (int *)buf, 1))
        {
          *(_QWORD *)(a1 + 160) = 0;
          sub_10061F764(120.0, a1, 8, 0, 300, 1, 0, 0, 0, 0);
        }
        break;
      case 3:
        *(_DWORD *)buf = 3;
        if (!sub_1001B7864(a1, (int *)buf, 1))
          sub_10061F764(120.0, a1, 1, 0, 300, 1, 0, 0, 0, 0);
        break;
      case 4:
        *(_DWORD *)buf = 4;
        if (!sub_1001B7864(a1, (int *)buf, 1))
          sub_10061F764(120.0, a1, 5, 0, 300, 1, 0, 0, 0, 0);
        break;
      case 8:
        sub_100FFD530((unsigned __int8 *)a1, 0);
        break;
      default:
        break;
    }
  }
  v9 = sub_10061F468();
  (*(void (**)(uint64_t, id))(*(_QWORD *)a1 + 208))(a1, v9);
  return v8;
}

id sub_100FFE284(uint64_t a1, int a2)
{
  int v3;
  int v4;
  int v6;
  int v7;
  int v8;

  if (a2 && *(_BYTE *)(a1 + 110))
  {
    v6 = 3;
    v3 = sub_1001B7864(a1, &v6, 1);
    v7 = 4;
    v4 = sub_1001B7864(a1, &v7, 1);
    if (v3)
      sub_10061F764(120.0, a1, 0, 0, 300, 1, 0, 0, 0, 0);
    if (v4)
      sub_10061F764(120.0, a1, 4, 0, 300, 1, 0, 0, 0, 0);
    v8 = 0;
    if (sub_1001B7864(a1, &v8, 1))
      sub_100FFDD14(a1);
    sub_10061FAD8(a1, (v3 | v4) != 0);
  }
  return sub_100FFB9D0(a1);
}

uint64_t sub_100FFE398(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FEB0 != -1)
    dispatch_once(&qword_10229FEB0, &stru_102198CC8);
  v2 = qword_10229FEB8;
  if (os_log_type_enabled((os_log_t)qword_10229FEB8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Sync state with Companion", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEB0 != -1)
      dispatch_once(&qword_10229FEB0, &stru_102198CC8);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEB8, 2, "Sync state with Companion", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLCompanionNotifierWatch::handleStateSyncTimerExpiry()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 208))(a1, 1);
}

void sub_100FFE540()
{
  operator new();
}

void sub_100FFE5E8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

void sub_100FFE624(id a1)
{
  qword_10229FEB8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Transport");
}

void sub_100FFE650(id a1)
{
  qword_10229FE88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

void sub_100FFE67C(id a1)
{
  qword_10229FCD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void sub_100FFE6A8(id a1)
{
  qword_10229FF58 = (uint64_t)os_log_create("com.apple.locationd.Motion", "CardioChange");
}

void sub_100FFE6D4(id a1)
{
  qword_10229FF28 = (uint64_t)os_log_create("com.apple.locationd.Motion", "ContextConfiguration");
}

void sub_100FFE700(id a1)
{
  qword_10229FD78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pressure");
}

NSDictionary *sub_100FFE72C()
{
  NSDictionary *result;
  _QWORD v1[7];
  _QWORD v2[7];

  sub_1015A2E04(qword_10230B9E0, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230B9E0, (void *)&_mh_execute_header);
  v1[0] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "VO2MaxPowerBudgetEstimatorQueryLookbackInterval");
  v2[0] = &off_102220948;
  v1[1] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "SensitiveEscalationExtendedBudgetRefreshInterval");
  v2[1] = &off_102220960;
  v1[2] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "VO2MaxDeescalatorExtendAfterHighExertionTimeSeconds");
  v2[2] = &off_102220978;
  v1[3] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "SensitiveEscalationBudgetAllowanceSeconds");
  v2[3] = &off_102220990;
  v1[4] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "SensitiveEscalationExtendedBudgetAllowanceSeconds");
  v2[4] = &off_1022209A8;
  v1[5] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "SensitiveEscalationGeneralStairsBudgetAllowanceSeconds");
  v2[5] = &off_1022209C0;
  v1[6] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "SensitiveEscalationGeneralStairsBudgetRefreshInterval");
  v2[6] = &off_1022209D8;
  result = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v2, v1, 7);
  qword_10230B9F8 = (uint64_t)result;
  return result;
}

uint64_t sub_100FFE8AC(uint64_t a1, int **a2)
{
  uint64_t *v3;
  void **v4;
  int *v5;
  int *v6;
  uint64_t *v7;
  uint64_t *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  BOOL v21;
  int *v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  _QWORD *v27;
  char *v28;
  unsigned int v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v40;
  unsigned int *v41;
  int *v42;
  int v43;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v4 = (void **)(a1 + 24);
  *(_QWORD *)a1 = a1 + 8;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v5 = *a2;
  v6 = a2[1];
  if (*a2 == v6)
  {
    v9 = 0;
    v22 = 0;
    v40 = 0;
    v41 = 0;
    v42 = 0;
  }
  else
  {
    do
    {
      v43 = *v5;
      v40 = (unsigned int *)&v43;
      v7 = sub_100136FD4((uint64_t **)a1, &v43, (uint64_t)&unk_101B9EB60, &v40);
      ++*((_DWORD *)v7 + 8);
      ++v5;
    }
    while (v5 != v6);
    v8 = *(uint64_t **)a1;
    v40 = 0;
    v41 = 0;
    v42 = 0;
    if (v8 == v3)
    {
      v9 = 0;
      v22 = 0;
    }
    else
    {
      v9 = 0;
      do
      {
        v10 = *(uint64_t *)((char *)v8 + 28);
        if (v9 >= v42)
        {
          v11 = ((char *)v9 - (char *)v40) >> 3;
          if ((unint64_t)(v11 + 1) >> 61)
            sub_100259694();
          v12 = ((char *)v42 - (char *)v40) >> 2;
          if (v12 <= v11 + 1)
            v12 = v11 + 1;
          if ((unint64_t)((char *)v42 - (char *)v40) >= 0x7FFFFFFFFFFFFFF8)
            v13 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v13 = v12;
          if (v13)
            v14 = (char *)sub_10025E6A0((uint64_t)&v42, v13);
          else
            v14 = 0;
          v15 = (unsigned int *)&v14[8 * v11];
          *(_QWORD *)v15 = v10;
          v9 = (int *)(v15 + 2);
          v17 = v40;
          v16 = v41;
          if (v41 != v40)
          {
            do
            {
              v18 = *((_QWORD *)v16 - 1);
              v16 -= 2;
              *((_QWORD *)v15 - 1) = v18;
              v15 -= 2;
            }
            while (v16 != v17);
            v16 = v40;
          }
          v40 = v15;
          v41 = (unsigned int *)v9;
          v42 = (int *)&v14[8 * v13];
          if (v16)
            operator delete(v16);
        }
        else
        {
          *(_QWORD *)v9 = v10;
          v9 += 2;
        }
        v41 = (unsigned int *)v9;
        v19 = (uint64_t *)v8[1];
        if (v19)
        {
          do
          {
            v20 = v19;
            v19 = (uint64_t *)*v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            v20 = (uint64_t *)v8[2];
            v21 = *v20 == (_QWORD)v8;
            v8 = v20;
          }
          while (!v21);
        }
        v8 = v20;
      }
      while (v20 != v3);
      v22 = (int *)v40;
    }
  }
  v23 = 126 - 2 * __clz(((char *)v9 - (char *)v22) >> 3);
  if (v9 == v22)
    v24 = 0;
  else
    v24 = v23;
  sub_100FFEC24(v22, v9, v24, 1);
  v25 = v40;
  v26 = v41;
  if (v40 != v41)
  {
    v27 = (_QWORD *)(a1 + 40);
    v28 = *(char **)(a1 + 32);
    do
    {
      v29 = *v25;
      if ((unint64_t)v28 >= *v27)
      {
        v31 = (char *)*v4;
        v32 = (v28 - (_BYTE *)*v4) >> 2;
        v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) >> 62)
          sub_100259694();
        v34 = *v27 - (_QWORD)v31;
        if (v34 >> 1 > v33)
          v33 = v34 >> 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL)
          v35 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v35 = v33;
        if (v35)
        {
          v36 = (char *)sub_100260634(a1 + 40, v35);
          v31 = *(char **)(a1 + 24);
          v28 = *(char **)(a1 + 32);
        }
        else
        {
          v36 = 0;
        }
        v37 = (unsigned int *)&v36[4 * v32];
        *v37 = v29;
        v30 = (char *)(v37 + 1);
        while (v28 != v31)
        {
          v38 = *((_DWORD *)v28 - 1);
          v28 -= 4;
          *--v37 = v38;
        }
        *(_QWORD *)(a1 + 24) = v37;
        *(_QWORD *)(a1 + 32) = v30;
        *(_QWORD *)(a1 + 40) = &v36[4 * v35];
        if (v31)
          operator delete(v31);
      }
      else
      {
        *(_DWORD *)v28 = v29;
        v30 = v28 + 4;
      }
      *(_QWORD *)(a1 + 32) = v30;
      v25 += 2;
      v28 = v30;
    }
    while (v25 != v26);
    v25 = v40;
  }
  if (v25)
  {
    v41 = v25;
    operator delete(v25);
  }
  return a1;
}

void sub_100FFEBAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;
  void **v11;
  void *v13;

  if (__p)
    operator delete(__p);
  v13 = *v11;
  if (*v11)
  {
    *(_QWORD *)(v10 + 32) = v13;
    operator delete(v13);
  }
  sub_100008848(v10, *(_QWORD **)(v10 + 8));
  _Unwind_Resume(a1);
}

const char *sub_100FFEBFC(unsigned int a1)
{
  if (a1 > 1)
    return "-";
  else
    return (&off_102198D88)[a1];
}

int *sub_100FFEC24(int *result, int *a2, uint64_t a3, char a4)
{
  int *v7;
  int *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int *v18;
  int *v19;
  int *v20;
  int v21;
  int *v22;
  int v23;
  int *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  int v33;
  int *v34;
  int v35;
  int *v36;
  int *v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int *v55;
  BOOL v57;
  uint64_t v58;
  int *v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  char *v65;
  int v66;
  int *v67;
  int64_t v68;
  int64_t v69;
  int64_t v70;
  uint64_t v71;
  int *v72;
  int v73;
  int v74;
  int *v75;
  int v76;
  int v77;
  int *v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int *v86;
  int *v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  uint64_t v92;
  unint64_t v93;
  int v94;
  int v95;
  int *v96;
  int *v98;
  int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  int *v103;
  int *v104;
  int v105;
  int v106;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 3;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        if (*(a2 - 1) > v8[1])
        {
          v43 = *v8;
          *v8 = *(a2 - 2);
          *(a2 - 2) = v43;
          v44 = v8[1];
          v8[1] = *(a2 - 1);
          *(a2 - 1) = v44;
        }
        return result;
      case 3uLL:
        return sub_100FFF380(v8, v8 + 2, a2 - 2);
      case 4uLL:
        return sub_100FFF650(v8, v8 + 2, v8 + 4, a2 - 2);
      case 5uLL:
        result = sub_100FFF650(v8, v8 + 2, v8 + 4, v8 + 6);
        if (*(a2 - 1) > v8[7])
        {
          v45 = v8[6];
          v8[6] = *(a2 - 2);
          *(a2 - 2) = v45;
          v46 = v8[7];
          v8[7] = *(a2 - 1);
          *(a2 - 1) = v46;
          v47 = v8[7];
          v48 = v8[5];
          if (v47 > v48)
          {
            v49 = v8[6];
            v50 = v8[3];
            v51 = v8[4];
            v8[4] = v49;
            v8[5] = v47;
            v8[6] = v51;
            v8[7] = v48;
            if (v47 > v50)
            {
              v52 = v8[1];
              v53 = v8[2];
              v8[2] = v49;
              v8[3] = v47;
              v8[4] = v53;
              v8[5] = v50;
              if (v47 > v52)
              {
                v54 = *v8;
                *v8 = v49;
                v8[1] = v47;
                v8[2] = v54;
                v8[3] = v52;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v55 = v8 + 2;
          v57 = v8 == a2 || v55 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v57)
            {
              v58 = 0;
              v59 = v8;
              do
              {
                v60 = v59[3];
                v61 = v59[1];
                v59 = v55;
                if (v60 > v61)
                {
                  v62 = *v55;
                  v63 = v59[1];
                  v64 = v58;
                  while (1)
                  {
                    v65 = (char *)v8 + v64;
                    v66 = *(int *)((char *)v8 + v64 + 4);
                    *((_DWORD *)v65 + 2) = *(int *)((char *)v8 + v64);
                    *((_DWORD *)v65 + 3) = v66;
                    if (!v64)
                      break;
                    v64 -= 8;
                    if (*((_DWORD *)v65 - 1) >= v63)
                    {
                      v67 = (int *)((char *)v8 + v64 + 8);
                      goto LABEL_78;
                    }
                  }
                  v67 = v8;
LABEL_78:
                  *v67 = v62;
                  v67[1] = v63;
                }
                v55 = v59 + 2;
                v58 += 8;
              }
              while (v59 + 2 != a2);
            }
          }
          else if (!v57)
          {
            v98 = v8 + 3;
            do
            {
              v99 = v7[3];
              v100 = v7[1];
              v7 = v55;
              if (v99 > v100)
              {
                v101 = *(_QWORD *)v55;
                v102 = HIDWORD(*(_QWORD *)v7);
                v103 = v98;
                do
                {
                  v104 = v103;
                  v105 = *(v103 - 4);
                  *(v103 - 1) = *(v103 - 3);
                  v106 = *(v103 - 2);
                  v103 -= 2;
                  *v104 = v106;
                }
                while (v105 < (int)v102);
                *(v103 - 1) = v101;
                *v103 = v102;
              }
              v55 = v7 + 2;
              v98 += 2;
            }
            while (v7 + 2 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v68 = (v10 - 2) >> 1;
            v69 = v68;
            do
            {
              v70 = v69;
              if (v68 >= v69)
              {
                v71 = (2 * v69) | 1;
                v72 = &v8[2 * v71];
                if (2 * v70 + 2 < (uint64_t)v10)
                {
                  v73 = v72[1];
                  v74 = v72[3];
                  v72 += 2 * (v73 > v74);
                  if (v73 > v74)
                    v71 = 2 * v70 + 2;
                }
                if (v72[1] <= v8[2 * v70 + 1])
                {
                  v75 = &v8[2 * v70];
                  v76 = *v75;
                  v77 = v75[1];
                  do
                  {
                    v78 = v75;
                    v75 = v72;
                    *v78 = *v72;
                    v78[1] = v72[1];
                    if (v68 < v71)
                      break;
                    v79 = (2 * v71) | 1;
                    v72 = &v8[2 * v79];
                    v80 = 2 * v71 + 2;
                    if (v80 < (uint64_t)v10)
                    {
                      v81 = v72[1];
                      v82 = v72[3];
                      v72 += 2 * (v81 > v82);
                      if (v81 > v82)
                        v79 = v80;
                    }
                    result = (int *)v72[1];
                    v71 = v79;
                  }
                  while ((int)result <= v77);
                  *v75 = v76;
                  v75[1] = v77;
                }
              }
              v69 = v70 - 1;
            }
            while (v70);
            v83 = (unint64_t)v9 >> 3;
            do
            {
              v84 = 0;
              v85 = *(_QWORD *)v8;
              v86 = v8;
              do
              {
                v87 = &v86[2 * v84 + 2];
                v88 = (2 * v84) | 1;
                v89 = 2 * v84 + 2;
                if (v89 < v83)
                {
                  v90 = v87[1];
                  v91 = v87[3];
                  v87 += 2 * (v90 > v91);
                  if (v90 > v91)
                    v88 = v89;
                }
                *v86 = *v87;
                v86[1] = v87[1];
                v86 = v87;
                v84 = v88;
              }
              while (v88 <= (uint64_t)((unint64_t)(v83 - 2) >> 1));
              if (v87 == a2 - 2)
              {
                *(_QWORD *)v87 = v85;
              }
              else
              {
                *v87 = *(a2 - 2);
                v87[1] = *(a2 - 1);
                *((_QWORD *)a2 - 1) = v85;
                v92 = (char *)v87 - (char *)v8 + 8;
                if (v92 >= 9)
                {
                  v93 = (((unint64_t)v92 >> 3) - 2) >> 1;
                  if (v8[2 * v93 + 1] > v87[1])
                  {
                    v94 = *v87;
                    v95 = v87[1];
                    do
                    {
                      v96 = v87;
                      v87 = &v8[2 * v93];
                      *v96 = *v87;
                      v96[1] = v87[1];
                      if (!v93)
                        break;
                      v93 = (v93 - 1) >> 1;
                    }
                    while (v8[2 * v93 + 1] > v95);
                    *v87 = v94;
                    v87[1] = v95;
                  }
                }
              }
              a2 -= 2;
            }
            while (v83-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = &v8[2 * (v10 >> 1)];
        if ((unint64_t)v9 < 0x401)
        {
          result = sub_100FFF380(&v7[2 * (v10 >> 1)], v7, a2 - 2);
        }
        else
        {
          sub_100FFF380(v7, &v7[2 * (v10 >> 1)], a2 - 2);
          sub_100FFF380(v7 + 2, v12 - 2, a2 - 4);
          sub_100FFF380(v7 + 4, &v7[2 * v11 + 2], a2 - 6);
          result = sub_100FFF380(v12 - 2, v12, &v7[2 * v11 + 2]);
          v13 = *(_QWORD *)v7;
          *(_QWORD *)v7 = *(_QWORD *)v12;
          *(_QWORD *)v12 = v13;
        }
        --a3;
        if ((a4 & 1) == 0 && *(v7 - 1) <= v7[1])
        {
          v30 = *(_QWORD *)v7;
          v31 = HIDWORD(*(_QWORD *)v7);
          if (*(a2 - 1) >= (int)v31)
          {
            v34 = v7 + 2;
            do
            {
              v8 = v34;
              if (v34 >= a2)
                break;
              v35 = v34[1];
              v34 += 2;
            }
            while (v35 >= (int)v31);
          }
          else
          {
            v32 = v7;
            do
            {
              v8 = v32 + 2;
              v33 = v32[3];
              v32 += 2;
            }
            while (v33 >= (int)v31);
          }
          v36 = a2;
          if (v8 < a2)
          {
            v37 = a2;
            do
            {
              v36 = v37 - 2;
              v38 = *(v37 - 1);
              v37 -= 2;
            }
            while (v38 < (int)v31);
          }
          while (v8 < v36)
          {
            v39 = *v8;
            *v8 = *v36;
            *v36 = v39;
            v40 = v8[1];
            v8[1] = v36[1];
            v36[1] = v40;
            do
            {
              v41 = v8[3];
              v8 += 2;
            }
            while (v41 >= (int)v31);
            do
            {
              v42 = *(v36 - 1);
              v36 -= 2;
            }
            while (v42 < (int)v31);
          }
          if (v8 - 2 != v7)
          {
            *v7 = *(v8 - 2);
            v7[1] = *(v8 - 1);
          }
          a4 = 0;
          *(v8 - 2) = v30;
          *(v8 - 1) = v31;
          continue;
        }
        v14 = 0;
        v15 = *(_QWORD *)v7;
        v16 = HIDWORD(*(_QWORD *)v7);
        do
        {
          v17 = v7[v14 + 3];
          v14 += 2;
        }
        while (v17 > (int)v16);
        v18 = &v7[v14];
        v19 = a2;
        if (v14 == 2)
        {
          v22 = a2;
          while (v18 < v22)
          {
            v20 = v22 - 2;
            v23 = *(v22 - 1);
            v22 -= 2;
            if (v23 > (int)v16)
              goto LABEL_21;
          }
          v20 = v22;
        }
        else
        {
          do
          {
            v20 = v19 - 2;
            v21 = *(v19 - 1);
            v19 -= 2;
          }
          while (v21 <= (int)v16);
        }
LABEL_21:
        v8 = v18;
        if (v18 < v20)
        {
          v24 = v20;
          do
          {
            v25 = *v8;
            *v8 = *v24;
            *v24 = v25;
            v26 = v8[1];
            v8[1] = v24[1];
            v24[1] = v26;
            do
            {
              v27 = v8[3];
              v8 += 2;
            }
            while (v27 > (int)v16);
            do
            {
              v28 = *(v24 - 1);
              v24 -= 2;
            }
            while (v28 <= (int)v16);
          }
          while (v8 < v24);
        }
        if (v8 - 2 != v7)
        {
          *v7 = *(v8 - 2);
          v7[1] = *(v8 - 1);
        }
        *(v8 - 2) = v15;
        *(v8 - 1) = v16;
        if (v18 < v20)
        {
LABEL_32:
          result = (int *)sub_100FFEC24(v7, v8 - 2, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v29 = sub_100FFF45C(v7, v8 - 2);
        result = (int *)sub_100FFF45C(v8, a2);
        if (!(_DWORD)result)
        {
          if (v29)
            continue;
          goto LABEL_32;
        }
        a2 = v8 - 2;
        if (!v29)
          goto LABEL_2;
        return result;
    }
  }
}

int *sub_100FFF380(int *result, int *a2, int *a3)
{
  int *v3;
  int v4;
  int *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;

  v3 = a2 + 1;
  v4 = a2[1];
  v5 = result + 1;
  v6 = a3[1];
  if (v4 > result[1])
  {
    v7 = *result;
    if (v6 <= v4)
    {
      *result = *a2;
      *a2 = v7;
      v11 = result[1];
      result[1] = a2[1];
      a2[1] = v11;
      if (a3[1] <= v11)
        return result;
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      v5 = a2 + 1;
    }
    else
    {
      *result = *a3;
      *a3 = v7;
    }
    v3 = a3 + 1;
    goto LABEL_10;
  }
  if (v6 > v4)
  {
    v8 = *a2;
    *a2 = *a3;
    *a3 = v8;
    v9 = a2[1];
    a2[1] = a3[1];
    a3[1] = v9;
    if (a2[1] > *v5)
    {
      v10 = *result;
      *result = *a2;
      *a2 = v10;
LABEL_10:
      v13 = *v5;
      *v5 = *v3;
      *v3 = v13;
    }
  }
  return result;
}

BOOL sub_100FFF45C(int *a1, int *a2)
{
  uint64_t v4;
  _BOOL8 result;
  int v6;
  int v7;
  int *v8;
  int *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  int *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(a2 - 1) > a1[1])
      {
        v6 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v6;
        v7 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_100FFF380(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      sub_100FFF650(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_100FFF650(a1, a1 + 2, a1 + 4, a1 + 6);
      if (*(a2 - 1) > a1[7])
      {
        v18 = a1[6];
        a1[6] = *(a2 - 2);
        *(a2 - 2) = v18;
        v19 = a1[7];
        a1[7] = *(a2 - 1);
        *(a2 - 1) = v19;
        v20 = a1[7];
        v21 = a1[5];
        if (v20 > v21)
        {
          v22 = a1[6];
          v23 = a1[3];
          v24 = a1[4];
          a1[4] = v22;
          a1[5] = v20;
          a1[6] = v24;
          a1[7] = v21;
          if (v20 > v23)
          {
            v25 = a1[1];
            v26 = a1[2];
            a1[2] = v22;
            a1[3] = v20;
            a1[4] = v26;
            a1[5] = v23;
            if (v20 > v25)
            {
              v27 = *a1;
              *a1 = v22;
              a1[1] = v20;
              a1[2] = v27;
              a1[3] = v25;
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 4;
      sub_100FFF380(a1, a1 + 2, a1 + 4);
      v9 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    if (v9[1] > v8[1])
    {
      v12 = *v9;
      v13 = v9[1];
      v14 = v10;
      while (1)
      {
        v15 = (int *)((char *)a1 + v14);
        v16 = *(int *)((char *)a1 + v14 + 20);
        v15[6] = *(int *)((char *)a1 + v14 + 16);
        v15[7] = v16;
        if (v14 == -16)
          break;
        v14 -= 8;
        if (v15[3] >= v13)
        {
          v17 = (int *)((char *)a1 + v14 + 24);
          goto LABEL_13;
        }
      }
      v17 = a1;
LABEL_13:
      *v17 = v12;
      v17[1] = v13;
      if (++v11 == 8)
        return v9 + 2 == a2;
    }
    v8 = v9;
    v10 += 8;
    v9 += 2;
    if (v9 == a2)
      return 1;
  }
}

int *sub_100FFF650(int *a1, int *a2, int *a3, int *a4)
{
  int *result;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;

  result = sub_100FFF380(a1, a2, a3);
  if (a4[1] > a3[1])
  {
    v9 = *a3;
    *a3 = *a4;
    *a4 = v9;
    v10 = a3[1];
    a3[1] = a4[1];
    a4[1] = v10;
    if (a3[1] > a2[1])
    {
      v11 = *a2;
      *a2 = *a3;
      *a3 = v11;
      v12 = a2[1];
      a2[1] = a3[1];
      a3[1] = v12;
      if (a2[1] > a1[1])
      {
        v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
        v14 = a1[1];
        a1[1] = a2[1];
        a2[1] = v14;
      }
    }
  }
  return result;
}

uint64_t sub_100FFF714(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;

  *(_QWORD *)a1 = a2;
  sub_100AD1724(a1 + 8, a2);
  sub_1010CFD8C(a1 + 144, *(_QWORD *)a1);
  *(_QWORD *)(a1 + 1136) = 0;
  *(_OWORD *)(a1 + 1072) = xmmword_101C39E08;
  *(_OWORD *)(a1 + 1088) = unk_101C39E18;
  *(_OWORD *)(a1 + 1104) = xmmword_101C39E28;
  *(_OWORD *)(a1 + 1120) = unk_101C39E38;
  *(_OWORD *)(a1 + 1008) = xmmword_101C39DC8;
  *(_OWORD *)(a1 + 1024) = unk_101C39DD8;
  *(_OWORD *)(a1 + 1040) = xmmword_101C39DE8;
  *(_OWORD *)(a1 + 1056) = unk_101C39DF8;
  *(_OWORD *)(a1 + 944) = xmmword_101C39D88;
  *(_OWORD *)(a1 + 960) = unk_101C39D98;
  *(_OWORD *)(a1 + 976) = xmmword_101C39DA8;
  *(_OWORD *)(a1 + 992) = unk_101C39DB8;
  *(_OWORD *)(a1 + 912) = xmmword_101C39D68;
  *(_OWORD *)(a1 + 928) = unk_101C39D78;
  *(_QWORD *)(a1 + 1144) = 0;
  *(_DWORD *)(a1 + 1168) = 0;
  *(_QWORD *)(a1 + 1176) = a3;
  *(_DWORD *)(a1 + 1152) = 0;
  *(_QWORD *)(a1 + 1160) = 8;
  *(_BYTE *)(a1 + 1184) = 0;
  v5 = sub_100127B9C();
  sub_100081C10(v5, &v10);
  sub_1001E4874(v10, "MotionLoggerLogPedometer", (BOOL *)(a1 + 1184));
  v6 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return a1;
}

void sub_100FFF81C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_100261F44((uint64_t)&a9);
  sub_10047F660((_QWORD *)(v9 + 776));
  _Unwind_Resume(a1);
}

void sub_100FFF844(uint64_t a1, uint64_t a2)
{
  int v4;
  NSObject *v5;
  std::string *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  NSObject *v19;
  uint64_t v20;
  std::string *v21;
  std::string::size_type v22;
  char *v23;
  char *v24;
  uint64_t v25;
  const char *v26;
  uint8_t *v27;
  std::string v28;
  std::string __p;
  uint64_t v30;
  uint8_t buf[4];
  std::string *v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;

  sub_100197040();
  if ((sub_100195F08() & 1) != 0)
  {
    v4 = sub_100F72B18(a2);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_102198D98);
    v5 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
    {
      sub_100F72CB4(*(_QWORD *)(a2 + 16), &__p);
      v6 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &__p
         : (std::string *)__p.__r_.__value_.__r.__words[0];
      v7 = *(_QWORD *)(a2 + 112);
      *(_DWORD *)buf = 136446722;
      v32 = v6;
      v33 = 2050;
      v34 = v7;
      v35 = 2050;
      v36 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[PaceController] WorkoutEvent - eventType,%{public}s,workoutType,%{public}ld,labelState,%{public}ld,", buf, 0x20u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_102198D98);
      v20 = qword_10229FCD8;
      sub_100F72CB4(*(_QWORD *)(a2 + 16), &v28);
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v28;
      else
        v21 = (std::string *)v28.__r_.__value_.__r.__words[0];
      v22 = *(_QWORD *)(a2 + 112);
      LODWORD(__p.__r_.__value_.__l.__data_) = 136446722;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v21;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2050;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v22;
      HIWORD(__p.__r_.__value_.__r.__words[2]) = 2050;
      v30 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v20, 2, "[PaceController] WorkoutEvent - eventType,%{public}s,workoutType,%{public}ld,labelState,%{public}ld,", &__p, 32);
      v24 = v23;
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28.__r_.__value_.__l.__data_);
      sub_100512490("Generic", 1, 0, 2, "void CLPedometer::PaceController::feedWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent &)", "%s\n", v24);
      if (v24 != (char *)buf)
        free(v24);
    }
    if (v4)
    {
      v8 = *(_OWORD *)a2;
      v9 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 928) = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 944) = v9;
      *(_OWORD *)(a1 + 912) = v8;
      v10 = *(_OWORD *)(a2 + 48);
      v11 = *(_OWORD *)(a2 + 64);
      v12 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 992) = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 1008) = v12;
      *(_OWORD *)(a1 + 960) = v10;
      *(_OWORD *)(a1 + 976) = v11;
      v13 = *(_OWORD *)(a2 + 112);
      v14 = *(_OWORD *)(a2 + 128);
      v15 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 1072) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 1056) = v15;
      *(_OWORD *)(a1 + 1040) = v14;
      *(_OWORD *)(a1 + 1024) = v13;
      v16 = *(_OWORD *)(a2 + 176);
      v17 = *(_OWORD *)(a2 + 192);
      v18 = *(_OWORD *)(a2 + 208);
      *(_QWORD *)(a1 + 1136) = *(_QWORD *)(a2 + 224);
      *(_OWORD *)(a1 + 1120) = v18;
      *(_OWORD *)(a1 + 1104) = v17;
      *(_OWORD *)(a1 + 1088) = v16;
    }
  }
  else
  {
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_102198D98);
    v19 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_INFO))
    {
      sub_100197040();
      *(_DWORD *)buf = 67109120;
      LODWORD(v32) = sub_100195F08();
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "[PaceController] RunningSpeedKF not available (isWatch=%d)", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_102198D98);
      v25 = qword_10229FCD8;
      sub_100197040();
      LODWORD(__p.__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(__p.__r_.__value_.__r.__words[0]) = sub_100195F08();
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v25, 1, "[PaceController] RunningSpeedKF not available (isWatch=%d)", &__p);
      v27 = (uint8_t *)v26;
      sub_100512490("Generic", 1, 0, 2, "void CLPedometer::PaceController::feedWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent &)", "%s\n", v26);
      if (v27 != buf)
        free(v27);
    }
  }
}

void sub_100FFFC6C(uint64_t a1, __int128 *a2)
{
  sub_100197040();
  if (sub_100195F08())
    sub_1010D2634(a1 + 144, a2);
}

double sub_100FFFCAC(uint64_t a1, uint64_t a2)
{
  double result;

  sub_100197040();
  if (sub_100195F08())
    *(_QWORD *)&result = sub_1010D27F0(a1 + 144, a2).n128_u64[0];
  return result;
}

void sub_100FFFCEC(id a1)
{
  qword_10229FCD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

_QWORD *sub_100FFFD1C(_QWORD *result, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  v4 = a2[1];
  *result = *a2;
  result[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a3[1];
  result[2] = *a3;
  result[3] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a4[1];
  result[4] = *a4;
  result[5] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

uint64_t sub_100FFFD84(_QWORD *a1, void *a2, unsigned int a3)
{
  double Current;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  NSObject *v18;
  char *v19;
  id v20;
  char *v21;
  char *i;
  __int128 v23;
  CLHRRecoveryInputHRData *v24;
  char *v25;
  const char *v27;
  char *v28;
  double v29;
  double v30;
  char *v31;
  char *v32;
  uint64_t v33;
  id v34[2];
  int v35;
  double v36;
  __int16 v37;
  double v38;
  _BYTE buf[1632];

  sub_100131938(v34, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsHR", 0);
  v31 = 0;
  v32 = 0;
  v33 = 0;
  Current = CFAbsoluteTimeGetCurrent();
  v30 = 0.0;
  v7 = sub_100127B9C();
  sub_100081C10(v7, buf);
  sub_1001FD98C(*(uint64_t *)buf, "HRRecoveryLastHRRecordId", &v30);
  v8 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v9 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v30 <= 0.0)
  {
    v17 = sub_1001FD94C();
    sub_1001FD98C(v17, "CMHealthColdStorageWatchServiceLastSyncTimestampHRRecoveryHR", &v30);
  }
  else
  {
    v11 = sub_1001FD94C();
    sub_10018A4CC(v11, "CMHealthColdStorageWatchServiceLastSyncTimestampHRRecoveryHR", &v30);
    v12 = sub_1001FD94C();
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 944))(v12);
    v13 = sub_100127B9C();
    sub_100081C10(v13, buf);
    sub_100525484(*(uint64_t *)buf, "HRRecoveryLastHRRecordId", 0xFFFFFFFFLL);
    v14 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v15 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  if ((*(unsigned int (**)(_QWORD, _QWORD, char **, double, double))(*(_QWORD *)*a1 + 16))(*a1, a3 >> 5, &v31, v30, Current) != 100)
  {
    if (qword_10229FF60 != -1)
      dispatch_once(&qword_10229FF60, &stru_102198DD8);
    v18 = qword_10229FF68;
    if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218240;
      *(double *)&buf[4] = v30;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = Current;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "CLHRRecoveryCompanionSyncManager: Failed to fetch input heart rates for time range, startTime : %f, endTime: %f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF60 != -1)
        dispatch_once(&qword_10229FF60, &stru_102198DD8);
      v35 = 134218240;
      v36 = v30;
      v37 = 2048;
      v38 = Current;
      LODWORD(v29) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 16, "CLHRRecoveryCompanionSyncManager: Failed to fetch input heart rates for time range, startTime : %f, endTime: %f", COERCE_DOUBLE(&v35), v29);
      v28 = (char *)v27;
      sub_100512490("Generic", 1, 0, 0, "size_t CLHRRecoveryCompanionSyncManager::queryLatestRecordsHR(NSMutableDictionary *, uint32_t)", "%s\n", v27);
      if (v28 != buf)
        free(v28);
    }
  }
  a1[6] = 0xBFF0000000000000;
  v19 = v31;
  if (v31 == v32)
  {
    v25 = v31;
    if (!v31)
      goto LABEL_24;
    goto LABEL_23;
  }
  a1[6] = *((_QWORD *)v32 - 3);
  v20 = +[NSMutableArray array](NSMutableArray, "array");
  v21 = v31;
  for (i = v32; v21 != i; v21 += 32)
  {
    v23 = *((_OWORD *)v21 + 1);
    *(_OWORD *)buf = *(_OWORD *)v21;
    *(_OWORD *)&buf[16] = v23;
    v24 = -[CLHRRecoveryInputHRData initWithHRRecoveryInputHR:]([CLHRRecoveryInputHRData alloc], "initWithHRRecoveryInputHR:", buf);
    objc_msgSend(v20, "addObject:", v24);

  }
  objc_msgSend(a2, "setObject:forKey:", v20, CFSTR("HRRecoveryInputHRKey"));
  v25 = v31;
  v19 = v32;
  if (v31)
  {
LABEL_23:
    v32 = v25;
    operator delete(v25);
  }
LABEL_24:
  sub_100131740(v34);
  return (v19 - v25) >> 5;
}

void sub_10100016C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, id a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (__p)
    operator delete(__p);
  sub_100131740(&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1010001CC(uint64_t a1, void *a2, unsigned int a3)
{
  double Current;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  NSObject *v18;
  char *v19;
  id v20;
  _OWORD *v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  CLHRRecoveryInputWRData *v26;
  char *v27;
  const char *v29;
  char *v30;
  double v31;
  double v32;
  char *v33;
  char *v34;
  uint64_t v35;
  id v36[2];
  int v37;
  double v38;
  __int16 v39;
  double v40;
  _BYTE buf[32];
  __int128 v42;
  uint64_t v43;

  sub_100131938(v36, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsWR", 0);
  v33 = 0;
  v34 = 0;
  v35 = 0;
  Current = CFAbsoluteTimeGetCurrent();
  v32 = 0.0;
  v7 = sub_100127B9C();
  sub_100081C10(v7, buf);
  sub_1001FD98C(*(uint64_t *)buf, "HRRecoveryLastWRRecordId", &v32);
  v8 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v9 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v32 <= 0.0)
  {
    v17 = sub_1001FD94C();
    sub_1001FD98C(v17, "CMHealthColdStorageWatchServiceLastSyncTimestampHRRecoveryWR", &v32);
  }
  else
  {
    v11 = sub_1001FD94C();
    sub_10018A4CC(v11, "CMHealthColdStorageWatchServiceLastSyncTimestampHRRecoveryWR", &v32);
    v12 = sub_1001FD94C();
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 944))(v12);
    v13 = sub_100127B9C();
    sub_100081C10(v13, buf);
    sub_100525484(*(uint64_t *)buf, "HRRecoveryLastWRRecordId", 0xFFFFFFFFLL);
    v14 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v15 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  if ((*(unsigned int (**)(_QWORD, unint64_t, char **, double, double))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), a3 / 0x38uLL, &v33, v32, Current) != 100)
  {
    if (qword_10229FF60 != -1)
      dispatch_once(&qword_10229FF60, &stru_102198DD8);
    v18 = qword_10229FF68;
    if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218240;
      *(double *)&buf[4] = v32;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = Current;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "CLHRRecoveryCompanionSyncManager: Failed to fetch input work rates for time range, startTime : %f, endTime: %f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF60 != -1)
        dispatch_once(&qword_10229FF60, &stru_102198DD8);
      v37 = 134218240;
      v38 = v32;
      v39 = 2048;
      v40 = Current;
      LODWORD(v31) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 16, "CLHRRecoveryCompanionSyncManager: Failed to fetch input work rates for time range, startTime : %f, endTime: %f", COERCE_DOUBLE(&v37), v31);
      v30 = (char *)v29;
      sub_100512490("Generic", 1, 0, 0, "size_t CLHRRecoveryCompanionSyncManager::queryLatestRecordsWR(NSMutableDictionary *, uint32_t)", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
  }
  *(_QWORD *)(a1 + 56) = 0xBFF0000000000000;
  v19 = v33;
  if (v33 == v34)
  {
    v27 = v33;
    if (!v33)
      goto LABEL_24;
    goto LABEL_23;
  }
  *(_QWORD *)(a1 + 56) = *((_QWORD *)v34 - 6);
  v20 = +[NSMutableArray array](NSMutableArray, "array");
  v21 = v33;
  v22 = v34;
  if (v33 != v34)
  {
    do
    {
      v23 = *v21;
      v24 = v21[1];
      v25 = v21[2];
      v43 = *((_QWORD *)v21 + 6);
      *(_OWORD *)&buf[16] = v24;
      v42 = v25;
      *(_OWORD *)buf = v23;
      v26 = -[CLHRRecoveryInputWRData initWithHRRecoveryInputWR:]([CLHRRecoveryInputWRData alloc], "initWithHRRecoveryInputWR:", buf);
      objc_msgSend(v20, "addObject:", v26);

      v21 = (_OWORD *)((char *)v21 + 56);
    }
    while (v21 != (_OWORD *)v22);
  }
  objc_msgSend(a2, "setObject:forKey:", v20, CFSTR("HRRecoveryInputWRKey"));
  v27 = v33;
  v19 = v34;
  if (v33)
  {
LABEL_23:
    v34 = v27;
    operator delete(v27);
  }
LABEL_24:
  sub_100131740(v36);
  return 0x6DB6DB6DB6DB6DB7 * ((v19 - v27) >> 3);
}

void sub_1010005E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, id a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (__p)
    operator delete(__p);
  sub_100131740(&a15);
  _Unwind_Resume(a1);
}

unint64_t sub_101000648(uint64_t a1, void *a2, unsigned int a3)
{
  double Current;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  NSObject *v18;
  char *v19;
  id v20;
  char *v21;
  char *i;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  CLHRRecoverySessionData *v30;
  char *v31;
  const char *v33;
  char *v34;
  double v35;
  double v36;
  char *v37;
  char *v38;
  uint64_t v39;
  id v40[2];
  int v41;
  double v42;
  __int16 v43;
  double v44;
  _BYTE buf[32];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;

  sub_100131938(v40, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0);
  v37 = 0;
  v38 = 0;
  v39 = 0;
  Current = CFAbsoluteTimeGetCurrent();
  v36 = 0.0;
  v7 = sub_100127B9C();
  sub_100081C10(v7, buf);
  sub_1001FD98C(*(uint64_t *)buf, "HRRecoveryLastSessionRecordId", &v36);
  v8 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v9 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v36 <= 0.0)
  {
    v17 = sub_1001FD94C();
    sub_1001FD98C(v17, "CMHealthColdStorageWatchServiceLastSyncTimestampHRRecoverySession", &v36);
  }
  else
  {
    v11 = sub_1001FD94C();
    sub_10018A4CC(v11, "CMHealthColdStorageWatchServiceLastSyncTimestampHRRecoverySession", &v36);
    v12 = sub_1001FD94C();
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 944))(v12);
    v13 = sub_100127B9C();
    sub_100081C10(v13, buf);
    sub_100525484(*(uint64_t *)buf, "HRRecoveryLastSessionRecordId", 0xFFFFFFFFLL);
    v14 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v15 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  if ((*(unsigned int (**)(_QWORD, unint64_t, char **, double, double))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a3 / 0xA0uLL, &v37, v36, Current) != 100)
  {
    if (qword_10229FF60 != -1)
      dispatch_once(&qword_10229FF60, &stru_102198DD8);
    v18 = qword_10229FF68;
    if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218240;
      *(double *)&buf[4] = v36;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = Current;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "CLHRRecoveryCompanionSyncManager: Failed to fetch input sessions for time range, startTime : %f, endTime: %f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF60 != -1)
        dispatch_once(&qword_10229FF60, &stru_102198DD8);
      v41 = 134218240;
      v42 = v36;
      v43 = 2048;
      v44 = Current;
      LODWORD(v35) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 16, "CLHRRecoveryCompanionSyncManager: Failed to fetch input sessions for time range, startTime : %f, endTime: %f", COERCE_DOUBLE(&v41), v35);
      v34 = (char *)v33;
      sub_100512490("Generic", 1, 0, 0, "size_t CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession(NSMutableDictionary *, uint32_t)", "%s\n", v33);
      if (v34 != buf)
        free(v34);
    }
  }
  *(_QWORD *)(a1 + 64) = 0xBFF0000000000000;
  v19 = v37;
  if (v37 == v38)
  {
    v31 = v37;
    if (!v37)
      goto LABEL_24;
    goto LABEL_23;
  }
  *(_QWORD *)(a1 + 64) = *((_QWORD *)v38 - 19);
  v20 = +[NSMutableArray array](NSMutableArray, "array");
  v21 = v37;
  for (i = v38; v21 != i; v21 += 160)
  {
    v23 = *((_OWORD *)v21 + 1);
    *(_OWORD *)buf = *(_OWORD *)v21;
    *(_OWORD *)&buf[16] = v23;
    v24 = *((_OWORD *)v21 + 2);
    v25 = *((_OWORD *)v21 + 3);
    v26 = *((_OWORD *)v21 + 5);
    v48 = *((_OWORD *)v21 + 4);
    v49 = v26;
    v46 = v24;
    v47 = v25;
    v27 = *((_OWORD *)v21 + 6);
    v28 = *((_OWORD *)v21 + 7);
    v29 = *((_OWORD *)v21 + 9);
    v52 = *((_OWORD *)v21 + 8);
    v53 = v29;
    v50 = v27;
    v51 = v28;
    v30 = -[CLHRRecoverySessionData initWithHRRecoverySession:]([CLHRRecoverySessionData alloc], "initWithHRRecoverySession:", buf);
    objc_msgSend(v20, "addObject:", v30);

  }
  objc_msgSend(a2, "setObject:forKey:", v20, CFSTR("HRRecoverySessionKey"));
  v31 = v37;
  v19 = v38;
  if (v37)
  {
LABEL_23:
    v38 = v31;
    operator delete(v31);
  }
LABEL_24:
  sub_100131740(v40);
  return 0xCCCCCCCCCCCCCCCDLL * ((v19 - v31) >> 5);
}

void sub_101000A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, id a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (__p)
    operator delete(__p);
  sub_100131740(&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_101000AC8(uint64_t result)
{
  uint64_t *v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  uint64_t v10;
  uint8_t buf[4];
  uint64_t v12;

  v1 = (uint64_t *)(result + 48);
  if (*(double *)(result + 48) > 0.0)
  {
    if (qword_10229FF60 != -1)
      dispatch_once(&qword_10229FF60, &stru_102198DD8);
    v2 = qword_10229FF68;
    if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_DEBUG))
    {
      v3 = *v1;
      *(_DWORD *)buf = 134217984;
      v12 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "[HR] Saving last Cold Storage sync timestamp: %f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF60 != -1)
        dispatch_once(&qword_10229FF60, &stru_102198DD8);
      v6 = *v1;
      v9 = 134217984;
      v10 = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 2, "[HR] Saving last Cold Storage sync timestamp: %f", COERCE_DOUBLE(&v9));
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLHRRecoveryCompanionSyncManager::saveCurrentSyncProgressHR()", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    v4 = sub_1001FD94C();
    sub_10018A4CC(v4, "CMHealthColdStorageWatchServiceLastSyncTimestampHRRecoveryHR", v1);
    v5 = sub_1001FD94C();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 944))(v5);
  }
  return result;
}

uint64_t sub_101000CA8(uint64_t result)
{
  uint64_t *v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  uint64_t v10;
  uint8_t buf[4];
  uint64_t v12;

  v1 = (uint64_t *)(result + 56);
  if (*(double *)(result + 56) > 0.0)
  {
    if (qword_10229FF60 != -1)
      dispatch_once(&qword_10229FF60, &stru_102198DD8);
    v2 = qword_10229FF68;
    if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_DEBUG))
    {
      v3 = *v1;
      *(_DWORD *)buf = 134217984;
      v12 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "[WR] Saving last Cold Storage sync timestamp: %f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF60 != -1)
        dispatch_once(&qword_10229FF60, &stru_102198DD8);
      v6 = *v1;
      v9 = 134217984;
      v10 = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 2, "[WR] Saving last Cold Storage sync timestamp: %f", COERCE_DOUBLE(&v9));
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLHRRecoveryCompanionSyncManager::saveCurrentSyncProgressWR()", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    v4 = sub_1001FD94C();
    sub_10018A4CC(v4, "CMHealthColdStorageWatchServiceLastSyncTimestampHRRecoveryWR", v1);
    v5 = sub_1001FD94C();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 944))(v5);
  }
  return result;
}

uint64_t sub_101000E88(uint64_t result)
{
  uint64_t *v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  uint64_t v10;
  uint8_t buf[4];
  uint64_t v12;

  v1 = (uint64_t *)(result + 64);
  if (*(double *)(result + 64) > 0.0)
  {
    if (qword_10229FF60 != -1)
      dispatch_once(&qword_10229FF60, &stru_102198DD8);
    v2 = qword_10229FF68;
    if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_DEBUG))
    {
      v3 = *v1;
      *(_DWORD *)buf = 134217984;
      v12 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "[Session] Saving last Cold Storage sync timestamp: %f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF60 != -1)
        dispatch_once(&qword_10229FF60, &stru_102198DD8);
      v6 = *v1;
      v9 = 134217984;
      v10 = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 2, "[Session] Saving last Cold Storage sync timestamp: %f", COERCE_DOUBLE(&v9));
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLHRRecoveryCompanionSyncManager::saveCurrentSyncProgressSession()", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    v4 = sub_1001FD94C();
    sub_10018A4CC(v4, "CMHealthColdStorageWatchServiceLastSyncTimestampHRRecoverySession", v1);
    v5 = sub_1001FD94C();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 944))(v5);
  }
  return result;
}

void sub_101001068(id a1)
{
  qword_10229FF68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "HRRecovery");
}

void sub_101001094(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLSLCSubscription::onFLNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 128), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102198F40);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSLCSubscription::onFLNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102198F40);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSLCSubscription::onFLNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_101002514(a4, v6, v7, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_101001244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101001264(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  _QWORD *v10;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  id v19;
  uint64_t v21;
  std::__shared_weak_count *v22;
  void *__dst[2];
  uint64_t v24;
  __int128 __p;
  uint64_t v26;
  uint64_t v27;

  if (*(char *)(a5 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a5, *(_QWORD *)(a5 + 8));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a5;
    v24 = *(_QWORD *)(a5 + 16);
  }
  if (*(char *)(a5 + 47) < 0)
  {
    sub_100115CE4(&__p, *(void **)(a5 + 24), *(_QWORD *)(a5 + 32));
  }
  else
  {
    __p = *(_OWORD *)(a5 + 24);
    v26 = *(_QWORD *)(a5 + 40);
  }
  v27 = *(_QWORD *)(a5 + 48);
  sub_10005164C(a1, a2, a3, a4, (__int128 *)__dst);
  *(_QWORD *)a1 = off_102198F70;
  if (SHIBYTE(v26) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v24) < 0)
    operator delete(__dst[0]);
  *(_QWORD *)a1 = off_102198E08;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = off_102141E98;
  v10 = operator new(0x20uLL);
  *v10 = off_102141ED0;
  v10[1] = 0;
  *((_DWORD *)v10 + 6) = 31337;
  v10[2] = 0;
  *(_QWORD *)(a1 + 272) = off_102152D70;
  *(_QWORD *)(a1 + 280) = v10 + 3;
  *(_QWORD *)(a1 + 288) = v10;
  *(_QWORD *)(a1 + 296) = 0;
  *(_DWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0x7FEFFFFFFFFFFFFFLL;
  *(_WORD *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 324) = 0xFFFF;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0xBFF0000000000000;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 352) = xmmword_101BAFEE0;
  *(_OWORD *)(a1 + 368) = _Q1;
  *(_OWORD *)(a1 + 384) = _Q1;
  *(_QWORD *)(a1 + 400) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 420) = 0;
  *(_QWORD *)(a1 + 428) = 0;
  *(_QWORD *)(a1 + 412) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 436) = 0;
  *(_QWORD *)(a1 + 440) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 448) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 460) = 0;
  *(_QWORD *)(a1 + 468) = 0;
  *(_QWORD *)(a1 + 452) = 0;
  *(_BYTE *)(a1 + 476) = 0;
  sub_1001E4804(&v21);
  sub_1001E4874(v21, "ForceMapMatching", (BOOL *)(a1 + 305));
  v16 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = objc_msgSend(objc_msgSend(*(id *)(a1 + 128), "vendor"), "proxyForService:", CFSTR("CLClientManager"));
  *(_QWORD *)(a1 + 480) = v19;
  objc_msgSend(v19, "registerDelegate:inSilo:", sub_1001E5288(a1 + 272), objc_msgSend(*(id *)(a1 + 128), "silo"));
  return a1;
}

void sub_1010014B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101001554(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_102198E08;

  sub_1007A1B98(a1 + 272);
  v2 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 264) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 256);
  *(_QWORD *)(a1 + 256) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_100720438(a1);
}

void sub_1010015C8(uint64_t a1)
{
  sub_101001554(a1);
  operator delete();
}

_QWORD *sub_1010015EC@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  void *__p[2];
  char v9;
  _BYTE v10[24];
  _BYTE *v11;

  v6[0] = off_102198FE8;
  v6[1] = sub_101001748;
  v6[2] = 0;
  v7 = v6;
  sub_1015A2E04(__p, "kCLConnectionMessageSignificantLocationChange");
  sub_100BB1258((uint64_t)v10, (uint64_t)v6);
  sub_101002A7C(a1, (unsigned __int8 *)__p, 1);
  v2 = v11;
  if (v11 == v10)
  {
    v3 = 4;
    v2 = v10;
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  if (v9 < 0)
    operator delete(__p[0]);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_1010016FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, char a13)
{
  uint64_t *v14;
  uint64_t v15;

  sub_1004E21A4((uint64_t)&a13);
  v14 = a12;
  if (a12 == &a9)
  {
    v15 = 4;
    v14 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_101001748(uint64_t a1, CLConnectionMessage **a2)
{
  id v4;
  const __CFDictionary *Dictionary;
  CLConnectionMessage *v6;
  int isEntitled;
  CLConnectionMessage *v8;
  int v9;
  NSNumber *v10;
  NSObject *v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  NSObject *v15;
  uint32_t v16;
  NSObject *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  double v33;
  BOOL v34;
  _BYTE v35[16];
  void *__p;
  __int16 v37;
  const char *v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  double v42;
  __int16 v43;
  unsigned int v44;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  Dictionary = (const __CFDictionary *)CLConnectionMessage::getDictionary(*a2);
  sub_1001C1D6C((int)v35, Dictionary);
  v34 = 0;
  if ((sub_1001E4874((uint64_t)v35, "kCLConnectionMessageSubscribeKey", &v34) & 1) == 0)
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102198FB8);
    v11 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
    {
      __p = (void *)68289026;
      v37 = 2082;
      v38 = "";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", (uint8_t *)&__p, 0x12u);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_102198FB8);
    }
    v12 = qword_1022A01C8;
    if (!os_signpost_enabled((os_log_t)qword_1022A01C8))
      goto LABEL_40;
    __p = (void *)68289026;
    v37 = 2082;
    v38 = "";
    v13 = "Couldn't get value for kCLConnectionMessageSubscribeKey key";
    v14 = "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}";
    v15 = v12;
    v16 = 18;
LABEL_21:
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v13, v14, (uint8_t *)&__p, v16);
    goto LABEL_40;
  }
  if (!+[CLSignificantChangeManagerAdapter isSupported](CLSignificantChangeManagerAdapter, "isSupported"))
    goto LABEL_40;
  if (!v34)
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102198FB8);
    v17 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      v18 = *(_QWORD *)(a1 + 64);
      __p = (void *)68289282;
      v37 = 2082;
      v38 = "";
      v39 = 2114;
      v40 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Client unsubscribing #SLC\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x1Cu);
    }
    sub_1002244E0(a1);
    goto LABEL_39;
  }
  v6 = *a2;
  sub_1015A2E04(&__p, "com.apple.locationd.slc_configurer");
  isEntitled = CLConnectionMessage::isEntitled(v6, &__p);
  if (SBYTE3(v40) < 0)
    operator delete(__p);
  v33 = 500.0;
  if (((sub_1001FD98C((uint64_t)v35, "kCLConnectionMessageSLCDistanceKey", &v33) ^ 1 | isEntitled) & 1) == 0)
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102198FB8);
    v19 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
    {
      v20 = *(_QWORD *)(a1 + 64);
      __p = (void *)68289282;
      v37 = 2082;
      v38 = "";
      v39 = 2114;
      v40 = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Client is not entitled to provide #SLC configuration\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x1Cu);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_102198FB8);
    }
    v21 = qword_1022A01C8;
    if (!os_signpost_enabled((os_log_t)qword_1022A01C8))
      goto LABEL_40;
    goto LABEL_33;
  }
  v31 = 0;
  v32 = -1;
  if (!sub_1001E4B84((uint64_t)v35, "kCLConnectionMessageSLCPowerBudgetKey", &v32))
  {
LABEL_10:
    sub_100E539FC(a1, (uint64_t)CFSTR("powerBudget"), (uint64_t)+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v31));
    sub_100E539FC(a1, (uint64_t)CFSTR("distanceThreshold"), (uint64_t)+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v33));
    v8 = *a2;
    sub_1015A2E04(&__p, "com.apple.locationd.private_info");
    v9 = CLConnectionMessage::isEntitled(v8, &__p);
    if (SBYTE3(v40) < 0)
      operator delete(__p);
    *(_BYTE *)(a1 + 306) = v9;
    if (v9)
      v10 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1);
    else
      v10 = 0;
    sub_100E539FC(a1, (uint64_t)CFSTR("includePrivateData"), (uint64_t)v10);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102198FB8);
    v23 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      v24 = *(_QWORD *)(a1 + 64);
      __p = (void *)68289794;
      v37 = 2082;
      v38 = "";
      v39 = 2114;
      v40 = v24;
      v41 = 2050;
      v42 = v33;
      v43 = 1026;
      v44 = v31;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"client subscribing to #SLC\", \"client\":%{public, location:escape_only}@, \"distance\":\"%{public}f\", \"powerBudget\":%{public}d}", (uint8_t *)&__p, 0x2Cu);
    }
LABEL_39:
    sub_100E53AAC(a1);
    sub_100052EC8(a1);
    goto LABEL_40;
  }
  if ((isEntitled & 1) == 0)
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102198FB8);
    v25 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
    {
      v26 = *(_QWORD *)(a1 + 64);
      __p = (void *)68289282;
      v37 = 2082;
      v38 = "";
      v39 = 2114;
      v40 = v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Client is not entitled to provide #SLC configuration\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x1Cu);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_102198FB8);
    }
    v21 = qword_1022A01C8;
    if (!os_signpost_enabled((os_log_t)qword_1022A01C8))
      goto LABEL_40;
LABEL_33:
    v22 = *(_QWORD *)(a1 + 64);
    __p = (void *)68289282;
    v37 = 2082;
    v38 = "";
    v39 = 2114;
    v40 = v22;
    v13 = "Client is not entitled to provide #SLC configuration";
    v14 = "{\"msg%{public}.0s\":\"Client is not entitled to provide #SLC configuration\", \"client\":%{public, location:escape_only}@}";
    v15 = v21;
    v16 = 28;
    goto LABEL_21;
  }
  if (sub_100C98034(v32, &v31))
    goto LABEL_10;
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102198FB8);
  v27 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
  {
    v28 = *(_QWORD *)(a1 + 64);
    __p = (void *)68289538;
    v37 = 2082;
    v38 = "";
    v39 = 2114;
    v40 = v28;
    v41 = 1026;
    LODWORD(v42) = v32;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Client provided invalid #SLC configuration\", \"client\":%{public, location:escape_only}@, \"desiredPowerBudgetRaw\":%{public}d}", (uint8_t *)&__p, 0x22u);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102198FB8);
  }
  v29 = qword_1022A01C8;
  if (os_signpost_enabled((os_log_t)qword_1022A01C8))
  {
    v30 = *(_QWORD *)(a1 + 64);
    __p = (void *)68289538;
    v37 = 2082;
    v38 = "";
    v39 = 2114;
    v40 = v30;
    v41 = 1026;
    LODWORD(v42) = v32;
    v13 = "Client provided invalid #SLC configuration";
    v14 = "{\"msg%{public}.0s\":\"Client provided invalid #SLC configuration\", \"client\":%{public, location:escape_only"
          "}@, \"desiredPowerBudgetRaw\":%{public}d}";
    v15 = v29;
    v16 = 34;
    goto LABEL_21;
  }
LABEL_40:
  sub_10011A5A8(v35);

}

void sub_101001F84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;

  if (a20 < 0)
    operator delete(__p);
  sub_10011A5A8(&a13);

  _Unwind_Resume(a1);
}

_QWORD *sub_101001FEC@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "SLC");
}

uint64_t sub_101002000(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 320))
    sub_101002010(a1);
  return a1;
}

void sub_101002010(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = sub_10023BDD8(a1);
  objc_msgSend(*(id *)(*(_QWORD *)v2 + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)v2 + 8), 0);
  v3 = sub_10023BD20(a1);
  objc_msgSend(*(id *)(*(_QWORD *)v3 + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)v3 + 8), 0);
  v4 = *(void **)(a1 + 64);
  if (v4)
    objc_msgSend(v4, "clientName");
  sub_100248320();
}

void sub_101002124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100010174((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10100213C(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _UNKNOWN **v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  _UNKNOWN **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  NSObject *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  void *v27;
  __int16 v28;
  uint64_t v29;

  sub_1002244E0(a1);
  v5 = objc_opt_class(NSNumber, v4);
  if ((objc_opt_isKindOfClass(a2, v5) & 1) != 0)
  {
    if (objc_msgSend(a2, "BOOLValue"))
    {
      sub_100E539FC(a1, (uint64_t)CFSTR("powerBudget"), (uint64_t)&off_10221CCF8);
      v7 = &off_10221E0F8;
      v8 = a1;
LABEL_8:
      sub_100E539FC(v8, (uint64_t)CFSTR("distanceThreshold"), (uint64_t)v7);
      goto LABEL_23;
    }
    goto LABEL_23;
  }
  v9 = objc_opt_class(NSDictionary, v6);
  if ((objc_opt_isKindOfClass(a2, v9) & 1) == 0)
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102198FB8);
    v16 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
    {
      v17 = *(_QWORD *)(a1 + 64);
      v22 = 68289538;
      v23 = 0;
      v24 = 2082;
      v25 = "";
      v26 = 2114;
      v27 = a2;
      v28 = 2114;
      v29 = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#slc Cannot migrate legacy subscription data\", \"legacySubscriptionData\":%{public, location:escape_only}@, \"client\":%{public, location:escape_only}@}", (uint8_t *)&v22, 0x26u);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_102198FB8);
    }
    v18 = qword_1022A01C8;
    if (!os_signpost_enabled((os_log_t)qword_1022A01C8))
      goto LABEL_23;
LABEL_22:
    v21 = *(_QWORD *)(a1 + 64);
    v22 = 68289538;
    v23 = 0;
    v24 = 2082;
    v25 = "";
    v26 = 2114;
    v27 = a2;
    v28 = 2114;
    v29 = v21;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#slc Cannot migrate legacy subscription data", "{\"msg%{public}.0s\":\"#slc Cannot migrate legacy subscription data\", \"legacySubscriptionData\":%{public, location:escape_only}@, \"client\":%{public, location:escape_only}@}", (uint8_t *)&v22, 0x26u);
    goto LABEL_23;
  }
  v10 = objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("powerBudget"));
  v11 = (_UNKNOWN **)objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("distance"));
  v13 = objc_opt_class(NSNumber, v12);
  if ((objc_opt_isKindOfClass(v10, v13) & 1) != 0)
  {
    v15 = objc_opt_class(NSNumber, v14);
    if ((objc_opt_isKindOfClass(v11, v15) & 1) != 0)
    {
      sub_100E539FC(a1, (uint64_t)CFSTR("powerBudget"), (uint64_t)v10);
      v8 = a1;
      v7 = v11;
      goto LABEL_8;
    }
  }
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102198FB8);
  v19 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
  {
    v20 = *(_QWORD *)(a1 + 64);
    v22 = 68289538;
    v23 = 0;
    v24 = 2082;
    v25 = "";
    v26 = 2114;
    v27 = a2;
    v28 = 2114;
    v29 = v20;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#slc Cannot migrate legacy subscription data\", \"legacySubscriptionData\":%{public, location:escape_only}@, \"client\":%{public, location:escape_only}@}", (uint8_t *)&v22, 0x26u);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102198FB8);
  }
  v18 = qword_1022A01C8;
  if (os_signpost_enabled((os_log_t)qword_1022A01C8))
    goto LABEL_22;
LABEL_23:
  sub_100E53AAC(a1);
}

void sub_101002514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _DWORD v15[2];
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  if (sub_100512A74(*(double *)(a1 + 328), *(double *)(a1 + 336), *(double *)(a4 + 4), *(double *)(a4 + 12), 0.00000001))
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102198FB8);
    v6 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_QWORD *)(a1 + 64);
      v15[0] = 68289282;
      v15[1] = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2114;
      v19 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Not sending #SLC to #compensation client because their estimate hasn't changed\", \"client\":%{public, location:escape_only}@}", (uint8_t *)v15, 0x1Cu);
    }
  }
  else
  {
    v8 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)(a1 + 324) = *(_OWORD *)a4;
    *(_OWORD *)(a1 + 340) = v8;
    v9 = *(_OWORD *)(a4 + 32);
    v10 = *(_OWORD *)(a4 + 48);
    v11 = *(_OWORD *)(a4 + 80);
    *(_OWORD *)(a1 + 388) = *(_OWORD *)(a4 + 64);
    *(_OWORD *)(a1 + 404) = v11;
    *(_OWORD *)(a1 + 356) = v9;
    *(_OWORD *)(a1 + 372) = v10;
    v12 = *(_OWORD *)(a4 + 96);
    v13 = *(_OWORD *)(a4 + 112);
    v14 = *(_OWORD *)(a4 + 128);
    *(_OWORD *)(a1 + 464) = *(_OWORD *)(a4 + 140);
    *(_OWORD *)(a1 + 436) = v13;
    *(_OWORD *)(a1 + 452) = v14;
    *(_OWORD *)(a1 + 420) = v12;
    sub_10002A50C(a1, a4);
  }
}

id sub_101002680(uint64_t a1)
{
  id v2;
  _QWORD *v3;
  void **v4;
  void *__p[2];
  char v7;

  v2 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(a1 + 64), "clientKey"), CFSTR("ClientKeyPath"));
  v3 = (_QWORD *)(a1 + 96);
  if (*(char *)(a1 + 119) < 0)
    v3 = (_QWORD *)*v3;
  objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3), CFSTR("SubscriptionStorageName"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", *(_QWORD *)(a1 + 136)), CFSTR("AuthContext"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 321)), CFSTR("RegisteredForCC"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 320)), CFSTR("RegisteredForSLC"));
  sub_100B9444C(a1 + 324, __p);
  if (v7 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v4), CFSTR("LastLocation"));
  if (v7 < 0)
    operator delete(__p[0]);
  objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 304)), CFSTR("Options_AllowsAlteredAccessoryLocations"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 305)), CFSTR("Options_ForceMapMatching"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 306)), CFSTR("Options_IncludePrivateData"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 307)), CFSTR("Options_AtMostOneLocation"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 312)), CFSTR("Options_StartTime"));
  return v2;
}

void sub_101002868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_101002884(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1010028B0(id a1)
{
  qword_1022A01C8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

__n128 sub_1010028DC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_102198FE8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_101002918(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_102198FE8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_10100293C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_10100298C(a1 + 8, a2, a3);
}

uint64_t sub_101002944(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101002980()
{
}

void sub_10100298C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  void (*v5)(_QWORD *, uint64_t *);
  uint64_t v6;
  _QWORD *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v4 = *a3;
  v3 = (std::__shared_weak_count *)a3[1];
  v15 = v3;
  *a3 = 0;
  a3[1] = 0;
  v5 = *(void (**)(_QWORD *, uint64_t *))a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(void (**)(_QWORD *, uint64_t *))(*v7 + v5);
  v16 = v4;
  v17 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v5(v7, &v16);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_101002A60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100261F44((uint64_t)&a11);
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_101002A7C(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 56 * a3;
    do
    {
      sub_101002AF4(a1, a2, (__int128 *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_101002AE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E6A98(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_101002AF4(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_10025A024(a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((sub_10025A4CC(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  sub_101002D74(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_10012E444(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_1004E69F0((uint64_t)v25, 0);
  return i;
}

void sub_101002D5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004E69F0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_101002D74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = sub_101002DE8(v8 + 2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_101002DD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E69F0(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_101002DE8(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_100270E34((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_101002E40(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

id sub_101002E5C(uint64_t a1, double a2)
{
  NSString *v4;
  id v5;
  _QWORD v7[5];

  v4 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "kCLConnectionMessageSignificantLocationChange");
  v5 = objc_msgSend(objc_msgSend(*(id *)(a1 + 128), "silo"), "newTimer");
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_101003068;
  v7[3] = &unk_10212ECA0;
  v7[4] = a1;
  objc_msgSend(v5, "setHandler:", v7);
  objc_msgSend(v5, "setNextFireDelay:", a2);
  objc_msgSend(objc_msgSend(*(id *)(a1 + 240), "objectForKeyedSubscript:", v4), "invalidate");
  return objc_msgSend(*(id *)(a1 + 240), "setObject:forKeyedSubscript:", v5, v4);
}

_QWORD *sub_101002F24@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_1005E0CAC(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_101002F70(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_BYTE *sub_101002F84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _BYTE *result;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = v8 + 2;
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    result = sub_100115CE4(result, *(void **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)result = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_10100300C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_101003024(v1, 0);
  _Unwind_Resume(a1);
}

void sub_101003024(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_1007209A4((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void sub_101003068(uint64_t a1)
{
  sub_101003070(*(_QWORD *)(a1 + 32));
}

void sub_101003070(uint64_t a1)
{
  _QWORD *v1;
  void *__p[2];
  char v3;

  v1 = (_QWORD *)(a1 + 200);
  sub_1015A2E04(__p, "kCLConnectionMessageSignificantLocationChange");
  sub_1010030DC(v1, (unsigned __int8 *)__p);
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_1010030C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *sub_1010030DC(_QWORD *a1, unsigned __int8 *a2)
{
  unsigned __int8 *result;
  _BYTE v4[24];

  result = sub_1001987C8(a1, a2);
  if (result)
  {
    sub_1000592D8(a1, result, (uint64_t)v4);
    sub_101003024((uint64_t)v4, 0);
    return (unsigned __int8 *)1;
  }
  return result;
}

void sub_101003128()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101C39E78;
      v1[3] = unk_101C39E88;
      v1[4] = xmmword_101C39E98;
      v1[0] = xmmword_101C39E58;
      v1[1] = unk_101C39E68;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_1010031FC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

uint64_t sub_101003214(uint64_t a1)
{
  __int128 v2;

  WORD2(v2) = *(_WORD *)(a1 + 4);
  LODWORD(v2) = *(_DWORD *)a1;
  *(_DWORD *)((char *)&v2 + 6) = *(_DWORD *)(a1 + 6);
  return v2;
}

__n128 sub_10100323C@<Q0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_QWORD *)a2 = bswap32(a1[1]) & 0xFFFF0000 | ((unint64_t)bswap32(*((_DWORD *)a1 + 1)) << 32) | (bswap32(*a1) >> 16);
  *(int8x16_t *)(a2 + 8) = vrev32q_s8(*(int8x16_t *)(a1 + 4));
  *(int8x16_t *)(a2 + 24) = vrev32q_s8(*(int8x16_t *)(a1 + 12));
  *(int8x16_t *)(a2 + 40) = vrev32q_s8(*(int8x16_t *)(a1 + 20));
  *(_DWORD *)(a2 + 192) = bswap32(*((_DWORD *)a1 + 48));
  *(_QWORD *)(a2 + 56) = bswap64(*((_QWORD *)a1 + 7));
  *(_QWORD *)(a2 + 196) = bswap64(*(_QWORD *)(a1 + 98));
  v2 = *((_OWORD *)a1 + 4);
  v3 = *((_OWORD *)a1 + 5);
  v4 = *((_OWORD *)a1 + 7);
  *(_OWORD *)(a2 + 96) = *((_OWORD *)a1 + 6);
  *(_OWORD *)(a2 + 112) = v4;
  *(_OWORD *)(a2 + 64) = v2;
  *(_OWORD *)(a2 + 80) = v3;
  result = *((__n128 *)a1 + 8);
  v6 = *((_OWORD *)a1 + 9);
  v7 = *((_OWORD *)a1 + 11);
  *(_OWORD *)(a2 + 160) = *((_OWORD *)a1 + 10);
  *(_OWORD *)(a2 + 176) = v7;
  *(__n128 *)(a2 + 128) = result;
  *(_OWORD *)(a2 + 144) = v6;
  return result;
}

double sub_1010032D4(unsigned int a1)
{
  unsigned int v1;

  if (a1 >= 0xF)
    v1 = 15;
  else
    v1 = a1;
  return dbl_101C3A0C8[v1];
}

double sub_1010032F0(unsigned int a1)
{
  unsigned int v1;

  if (a1 >= 0xF)
    v1 = 15;
  else
    v1 = a1;
  return dbl_101C3A148[v1];
}

void sub_10100330C()
{
  operator new();
}

void sub_101003584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t *v21;
  void *v22;
  int v23;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v23 & 1) == 0)
    {
LABEL_6:
      sub_101004200(v21, 0);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v22);
  goto LABEL_6;
}

BOOL sub_10100361C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[28];
  __int128 v25;
  __int128 v26;
  _OWORD v27[11];

  if (!a2)
  {
    sub_101939F4C();
    goto LABEL_26;
  }
  if (*(int *)(a2 + 32) < 1 || !*(_QWORD *)(a2 + 40))
  {
    sub_10193A0BC();
LABEL_26:
    __break(1u);
  }
  *(_QWORD *)((char *)&v25 + 4) = 192;
  LODWORD(v25) = 109498;
  HIDWORD(v25) = 381;
  v26 = 0uLL;
  *(_QWORD *)&v27[0] = 0;
  *(int32x2_t *)((char *)v27 + 12) = vdup_n_s32(0xC47A0000);
  DWORD2(v27[0]) = 0;
  DWORD1(v27[1]) = -998637568;
  memset((char *)&v27[1] + 8, 0, 148);
  if (*(_QWORD *)(a2 + 24) < 0xCuLL)
    return 1;
  v7 = 0;
  while (1)
  {
    v8 = sub_1010038AC(a1, (__int128 *)a2, v7);
    if ((unsigned __int16)v8 != 43962)
      return 0;
    if (WORD1(v8) == 1)
    {
      if (HIDWORD(v8) != 192 || (unint64_t)(v7 + 204) > *(_QWORD *)(a2 + 24))
        return 0;
      sub_101003AE0((__int128 *)a2, v7, (uint64_t)&v13);
      v27[8] = v23;
      v27[9] = *(_OWORD *)v24;
      *(_OWORD *)((char *)&v27[9] + 12) = *(_OWORD *)&v24[12];
      v27[4] = v19;
      v27[5] = v20;
      v27[6] = v21;
      v27[7] = v22;
      v27[0] = v15;
      v27[1] = v16;
      v27[2] = v17;
      v27[3] = v18;
      v7 += 204;
      v25 = v13;
      v26 = v14;
      goto LABEL_20;
    }
    if (WORD1(v8) != 2)
      return WORD1(v8) == 3;
    if (HIDWORD(v8) != 8)
      return 0;
    v9 = v7 + 20;
    if ((unint64_t)(v7 + 20) > *(_QWORD *)(a2 + 24))
      return 0;
    sub_101003CE8((__int128 *)a2, v7, (int8x8_t *)&v13);
    v10 = (v14 * HIDWORD(v13));
    v7 = v9 + v10;
    sub_101003F34(a3, (uint64_t)&v25, SHIDWORD(v13), v9 + v10 + 20, *(_DWORD *)(a2 + 24));
    v11 = *(_QWORD **)(a3 + 24);
    *(_QWORD *)(a3 + 24) = 0;
    if (v11 == (_QWORD *)a3)
    {
      v11 = (_QWORD *)a3;
      v12 = 4;
      goto LABEL_19;
    }
    if (v11)
    {
      v12 = 5;
LABEL_19:
      (*(void (**)(void))(*v11 + 8 * v12))();
    }
LABEL_20:
    if ((unint64_t)(v7 + 12) > *(_QWORD *)(a2 + 24))
      return 1;
  }
}

unint64_t sub_1010038AC(uint64_t a1, __int128 *a2, uint64_t a3)
{
  std::runtime_error *exception;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  std::string v16;
  std::string v17;
  std::string v18;
  std::string v19;

  if ((unint64_t)(a3 + 12) > *((_QWORD *)a2 + 3))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v16, 0xCuLL);
    v6 = std::string::insert(&v16, 0, "Not enough data left to read block of size ");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    v8 = std::string::append(&v17, " in wifi tile: ");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if (*((char *)a2 + 23) < 0)
    {
      sub_100115CE4(&v14, *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v14 = *a2;
      v15 = *((_QWORD *)a2 + 2);
    }
    if (v15 >= 0)
      v10 = (const std::string::value_type *)&v14;
    else
      v10 = (const std::string::value_type *)v14;
    if (v15 >= 0)
      v11 = HIBYTE(v15);
    else
      v11 = *((_QWORD *)&v14 + 1);
    v12 = std::string::append(&v18, v10, v11);
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v19.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v19);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1021990D0;
  }
  return bswap32(*(unsigned __int16 *)(*((_QWORD *)a2 + 5) + a3 + 2)) & 0xFFFF0000 | ((unint64_t)bswap32(*(_DWORD *)(*((_QWORD *)a2 + 5) + a3 + 4)) << 32) | (bswap32(*(unsigned __int16 *)(*((_QWORD *)a2 + 5) + a3)) >> 16);
}

void sub_101003A2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;

  if (a33 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  __cxa_free_exception(v33);
  _Unwind_Resume(a1);
}

double sub_101003AE0@<D0>(__int128 *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  double result;
  std::runtime_error *exception;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  std::string v16;
  std::string v17;
  std::string v18;
  std::string v19;

  if ((unint64_t)(a2 + 204) > *((_QWORD *)a1 + 3))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v16, 0xCCuLL);
    v6 = std::string::insert(&v16, 0, "Not enough data left to read block of size ");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    v8 = std::string::append(&v17, " in wifi tile: ");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if (*((char *)a1 + 23) < 0)
    {
      sub_100115CE4(&v14, *(void **)a1, *((_QWORD *)a1 + 1));
    }
    else
    {
      v14 = *a1;
      v15 = *((_QWORD *)a1 + 2);
    }
    if (v15 >= 0)
      v10 = (const std::string::value_type *)&v14;
    else
      v10 = (const std::string::value_type *)v14;
    if (v15 >= 0)
      v11 = HIBYTE(v15);
    else
      v11 = *((_QWORD *)&v14 + 1);
    v12 = std::string::append(&v18, v10, v11);
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v19.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v19);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1021990D0;
  }
  *(_QWORD *)&result = sub_10100323C((unsigned __int16 *)(*((_QWORD *)a1 + 5) + a2), a3).n128_u64[0];
  return result;
}

void sub_101003C34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;

  if (a33 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  __cxa_free_exception(v33);
  _Unwind_Resume(a1);
}

int8x8_t sub_101003CE8@<D0>(__int128 *a1@<X1>, uint64_t a2@<X2>, int8x8_t *a3@<X8>)
{
  int8x8_t *v4;
  int8x8_t result;
  std::runtime_error *exception;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;

  if ((unint64_t)(a2 + 20) > *((_QWORD *)a1 + 3))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v17, 0x14uLL);
    v7 = std::string::insert(&v17, 0, "Not enough data left to read block of size ");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v9 = std::string::append(&v18, " in wifi tile: ");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v19.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (*((char *)a1 + 23) < 0)
    {
      sub_100115CE4(&v15, *(void **)a1, *((_QWORD *)a1 + 1));
    }
    else
    {
      v15 = *a1;
      v16 = *((_QWORD *)a1 + 2);
    }
    if (v16 >= 0)
      v11 = (const std::string::value_type *)&v15;
    else
      v11 = (const std::string::value_type *)v15;
    if (v16 >= 0)
      v12 = HIBYTE(v16);
    else
      v12 = *((_QWORD *)&v15 + 1);
    v13 = std::string::append(&v19, v11, v12);
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v20);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1021990D0;
  }
  v4 = (int8x8_t *)(*((_QWORD *)a1 + 5) + a2);
  *a3 = (int8x8_t)(bswap32(v4->u16[1]) & 0xFFFF0000 | ((unint64_t)bswap32(v4->u32[1]) << 32) | (bswap32(v4->u16[0]) >> 16));
  result = vrev32_s8(v4[1]);
  a3[1] = result;
  a3[2].i32[0] = bswap32(v4[2].u32[0]);
  return result;
}

void sub_101003E80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;

  if (a33 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  __cxa_free_exception(v33);
  _Unwind_Resume(a1);
}

uint64_t sub_101003F34(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v5;
  int v7;
  int v8;
  int v9;

  v9 = a3;
  v7 = a5;
  v8 = a4;
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, uint64_t, int *, int *, int *))(*(_QWORD *)v5 + 48))(v5, a2, &v9, &v8, &v7);
}

void sub_101003F78(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)off_1021990A8;
  if (SHIBYTE(this[5].__imp_.__imp_) < 0)
    operator delete((void *)this[4].__imp_.__imp_);
  if (SHIBYTE(this[4].__vftable) < 0)
    operator delete(this[3].__vftable);
  if (SHIBYTE(this[2].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::runtime_error::~runtime_error(this);
}

std::string *sub_101003FD8(std::string *this)
{
  int v2;
  void *v3;
  std::string::pointer data;

  v2 = this[1].__r_.__value_.__r.__words[1];
  if (v2 >= 1)
    close(v2);
  LODWORD(this[1].__r_.__value_.__r.__words[1]) = -1;
  v3 = (void *)this[1].__r_.__value_.__r.__words[2];
  if (v3)
  {
    data = this[1].__r_.__value_.__l.__data_;
    if (data)
      munmap(v3, (size_t)data);
  }
  this[1].__r_.__value_.__r.__words[2] = 0;
  this[1].__r_.__value_.__r.__words[0] = 0;
  return std::string::assign(this, "");
}

uint64_t sub_101004034(uint64_t a1)
{
  sub_101003FD8((std::string *)a1);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

std::runtime_error *sub_101004070(std::runtime_error *a1, __int128 *a2, int a3, uint64_t a4)
{
  std::runtime_error *v8;
  std::runtime_error v9;
  std::__libcpp_refstring *p_imp;
  __int128 v11;

  v8 = std::runtime_error::runtime_error(a1, (const std::string *)a2);
  v8[1].__vftable = 0;
  v8->__vftable = (std::runtime_error_vtbl *)off_1021990A8;
  v8[1].__imp_.__imp_ = 0;
  v8[2].__vftable = 0;
  LODWORD(v8[2].__imp_.__imp_) = a3;
  if (*(char *)(a4 + 23) < 0)
  {
    sub_100115CE4(&v8[3], *(void **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    v9 = *(std::runtime_error *)a4;
    v8[4].__vftable = *(std::runtime_error_vtbl **)(a4 + 16);
    v8[3] = v9;
  }
  p_imp = &a1[4].__imp_;
  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(p_imp, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v11 = *a2;
    a1[5].__imp_.__imp_ = (const char *)*((_QWORD *)a2 + 2);
    *(_OWORD *)&p_imp->__imp_ = v11;
  }
  return a1;
}

void sub_101004124(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 39) < 0)
    operator delete(*v3);
  std::runtime_error::~runtime_error((std::runtime_error *)v1);
  _Unwind_Resume(a1);
}

void sub_101004160(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)off_1021990A8;
  if (SHIBYTE(this[5].__imp_.__imp_) < 0)
    operator delete((void *)this[4].__imp_.__imp_);
  if (SHIBYTE(this[4].__vftable) < 0)
    operator delete(this[3].__vftable);
  if (SHIBYTE(this[2].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::runtime_error::~runtime_error(this);
  operator delete();
}

void sub_1010041D4(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_101004200(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_101004034(result);
    operator delete();
  }
  return result;
}

void sub_10100423C(uint64_t a1)
{
  NSObject *v1;
  const char *v2;
  uint8_t *v3;
  id v5;
  NSObject *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  const char *v10;
  _DWORD v11[4];
  uint8_t buf[4];
  unsigned int v13;

  if (*(_QWORD *)(a1 + 2600))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102199258);
    v1 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "CLMM,Vehicle,Maps API already initialized", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102199258);
    LOWORD(v11[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 1, "CLMM,Vehicle,Maps API already initialized", v11, 2);
    v3 = (uint8_t *)v2;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLGeoMapFeatureAccessGeometry::initializeMapsAPI()", "%s\n", v2);
    if (v3 == buf)
      return;
LABEL_22:
    free(v3);
    return;
  }
  *(_QWORD *)(a1 + 2608) = dispatch_queue_create("cl_geo_access_map_feature_geometry_queue", 0);
  v5 = objc_msgSend(objc_alloc((Class)GEOMapFeatureAccess), "initWithQueue:", *(_QWORD *)(a1 + 2608));
  *(_QWORD *)(a1 + 2600) = v5;
  if (!v5)
    sub_10193A22C();
  objc_msgSend(v5, "setAllowNetworkTileLoad:", 1);
  objc_msgSend(*(id *)(a1 + 2600), "setFlipNegativeTravelDirectionRoads:", 1);
  objc_msgSend(*(id *)(a1 + 2600), "setVisitDoubleTravelDirectionRoadsTwice:", 1);
  objc_msgSend(*(id *)(a1 + 2600), "setAllowStaleData:", 1);
  objc_msgSend(*(id *)(a1 + 2600), "setAllowOfflineData:", 1);
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_102199258);
  v6 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEFAULT))
  {
    v7 = objc_msgSend(*(id *)(a1 + 2600), "allowStaleData");
    *(_DWORD *)buf = 67240192;
    v13 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "CLMM,Vehicle,using maps API,stale data,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102199258);
    v8 = qword_1022A00D8;
    v9 = objc_msgSend(*(id *)(a1 + 2600), "allowStaleData");
    v11[0] = 67240192;
    v11[1] = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, 0, "CLMM,Vehicle,using maps API,stale data,%{public}d", v11, 8);
    v3 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLGeoMapFeatureAccessGeometry::initializeMapsAPI()", "%s\n", v10);
    if (v3 != buf)
      goto LABEL_22;
  }
}

id sub_101004594(uint64_t a1, _QWORD *a2)
{
  id v3;
  void *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  id v12;
  _QWORD *v13;
  _QWORD *v14;
  char *v15;
  BOOL v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  uint64_t *v20;
  uint64_t v21;
  void *i;
  void *v23;
  NSObject *v24;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  const char *v32;
  uint8_t *v33;
  id v34;
  double *v35;
  double v36;
  double v37;
  uint64_t v38;
  double v39;
  double v40;
  int v41;
  NSObject *v42;
  uint64_t v43;
  int *v44;
  uint64_t v45;
  NSObject *v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  uint8_t *v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  const char *v54;
  uint8_t *v55;
  uint64_t v56;
  void *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  _QWORD v62[5];
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  __int16 v68;
  id v69;
  __int16 v70;
  id v71;
  _BYTE v72[128];
  _BYTE v73[24];
  _BYTE *v74;
  int v75;
  uint64_t v76;
  int *v77;
  uint8_t buf[4];
  uint64_t v79;
  __int16 v80;
  id v81;
  __int16 v82;
  id v83;

  if (!*(_BYTE *)(a1 + 32))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102199258);
    v9 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      v10 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)buf = 134349056;
      v79 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometry geometry is not initialized, use initialize() function", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102199258);
    v51 = *(_QWORD *)(a1 + 8);
    v75 = 134349056;
    v76 = v51;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometry geometry is not initialized, use initialize() function", &v75, 12);
    v50 = (uint8_t *)v52;
    sub_100512490("Generic", 1, 0, 0, "GEOMapFeatureRoad *CLGeoMapFeatureAccessGeometry::getGeoMapFeatureRoadObject(const CLMapRoadPtr &) const", "%s\n", v52);
    goto LABEL_76;
  }
  if (*(_BYTE *)(a1 + 33))
    return 0;
  v3 = a2;
  if (!*(_QWORD *)(a1 + 2600) || *a2 == 0)
    return 0;
  v5 = objc_autoreleasePoolPush();
  v64 = 0;
  v65 = 0;
  v6 = *(uint64_t **)(*(_QWORD *)v3 + 136);
  if (*(uint64_t **)(*(_QWORD *)v3 + 144) == v6)
  {
    v7 = 0;
    v8 = 0;
  }
  else
  {
    v7 = *v6;
    v8 = v6[1];
  }
  v64 = v7;
  v65 = v8;
  v12 = +[NSMutableArray array](NSMutableArray, "array");
  v62[0] = _NSConcreteStackBlock;
  v62[1] = 3221225472;
  v62[2] = sub_101004F84;
  v62[3] = &unk_102199120;
  v62[4] = v12;
  v63 = v62;
  v13 = operator new(0x20uLL);
  *v13 = off_102199288;
  v13[1] = a1;
  v14 = v13 + 1;
  v13[2] = &v64;
  v13[3] = &v63;
  v77 = (int *)v13;
  ++*(_DWORD *)(a1 + 36);
  v15 = (char *)operator new(0x20uLL);
  *(_QWORD *)v15 = off_102199288;
  *(_OWORD *)(v15 + 8) = *(_OWORD *)v14;
  *((_QWORD *)v15 + 3) = v14[2];
  v74 = v15;
  v16 = sub_101004FE4((uint64_t)v73);
  v17 = v74;
  if (v74 == v73)
  {
    v18 = 4;
    v17 = v73;
  }
  else
  {
    if (!v74)
      goto LABEL_22;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_22:
  if (v16)
  {
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    v19 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v58, v72, 16);
    if (v19)
    {
      v57 = v5;
      v20 = &qword_1022A0000;
      v21 = *(_QWORD *)v59;
      while (2)
      {
        for (i = 0; i != v19; i = (char *)i + 1)
        {
          if (*(_QWORD *)v59 != v21)
            objc_enumerationMutation(v12);
          v23 = *(void **)(*((_QWORD *)&v58 + 1) + 8 * (_QWORD)i);
          if (objc_msgSend(v23, "roadID") == **(id **)v3)
          {
            if ((unint64_t)objc_msgSend(v23, "coordinateCount") > 1)
            {
              v34 = objc_msgSend(v23, "coordinateCount");
              v35 = *(double **)(*(_QWORD *)v3 + 136);
              if (*(double **)(*(_QWORD *)v3 + 144) == v35)
              {
                v36 = 0.0;
                v37 = 0.0;
              }
              else
              {
                v36 = *v35;
                v37 = v35[1];
              }
              if (sub_100512A74(v36, v37, *(double *)objc_msgSend(v23, "coordinates"), *((double *)objc_msgSend(v23, "coordinates") + 1), 0.00000001))
              {
                v38 = *(_QWORD *)(*(_QWORD *)v3 + 144);
                if (v38 == *(_QWORD *)(*(_QWORD *)v3 + 136))
                {
                  v39 = 0.0;
                  v40 = 0.0;
                }
                else
                {
                  v39 = *(double *)(v38 - 16);
                  v40 = *(double *)(v38 - 8);
                }
                if (sub_100512A74(v39, v40, *((double *)objc_msgSend(v23, "coordinates") + 2 * ((uint64_t)v34 - 1)), *((double *)objc_msgSend(v23, "coordinates") + 2 * ((uint64_t)v34 - 1) + 1), 0.00000001))
                {
                  v3 = v23;
                  v41 = 0;
                  goto LABEL_57;
                }
              }
            }
            else
            {
              if (v20[26] != -1)
                dispatch_once(&qword_1022A00D0, &stru_102199258);
              v24 = qword_1022A00D8;
              if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
              {
                v25 = *(_QWORD *)(a1 + 8);
                v26 = objc_msgSend(v23, "roadID");
                v27 = objc_msgSend(v23, "coordinateCount");
                *(_DWORD *)buf = 134349569;
                v79 = v25;
                v80 = 2049;
                v81 = v26;
                v82 = 2050;
                v83 = v27;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,getGeoMapFeatureRoadObject, GEOMapFeatureRoad id,%{private}lld,has less than two coordinate,%{public}ld", buf, 0x20u);
                v20 = &qword_1022A0000;
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (v20[26] != -1)
                  dispatch_once(&qword_1022A00D0, &stru_102199258);
                v28 = qword_1022A00D8;
                v29 = *(_QWORD *)(a1 + 8);
                v30 = objc_msgSend(v23, "roadID");
                v31 = objc_msgSend(v23, "coordinateCount");
                v66 = 134349569;
                v67 = v29;
                v68 = 2049;
                v69 = v30;
                v70 = 2050;
                v71 = v31;
                LODWORD(v56) = 32;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v28, 2, "CLMM,%{public}.1lf,getGeoMapFeatureRoadObject, GEOMapFeatureRoad id,%{private}lld,has less than two coordinate,%{public}ld", &v66, v56);
                v33 = (uint8_t *)v32;
                sub_100512490("Generic", 1, 0, 2, "GEOMapFeatureRoad *CLGeoMapFeatureAccessGeometry::getGeoMapFeatureRoadObject(const CLMapRoadPtr &) const", "%s\n", v32);
                v20 = &qword_1022A0000;
                if (v33 != buf)
                  free(v33);
              }
            }
          }
        }
        v19 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v58, v72, 16);
        if (v19)
          continue;
        break;
      }
      v41 = 1;
LABEL_57:
      v5 = v57;
    }
    else
    {
      v41 = 1;
    }
  }
  else
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102199258);
    v42 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      v43 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)buf = 134349056;
      v79 = v43;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,query failed (getGeoMapFeatureRoadObject)", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102199258);
      v53 = *(_QWORD *)(a1 + 8);
      v66 = 134349056;
      v67 = v53;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,%{public}.1lf,query failed (getGeoMapFeatureRoadObject)", &v66, 12);
      v55 = (uint8_t *)v54;
      sub_100512490("Generic", 1, 0, 0, "GEOMapFeatureRoad *CLGeoMapFeatureAccessGeometry::getGeoMapFeatureRoadObject(const CLMapRoadPtr &) const", "%s\n", v54);
      if (v55 != buf)
        free(v55);
      v41 = 0;
      v3 = 0;
    }
    else
    {
      v41 = 0;
      v3 = 0;
    }
  }
  v44 = v77;
  if (v77 == &v75)
  {
    v45 = 4;
    v44 = &v75;
  }
  else
  {
    if (!v77)
      goto LABEL_64;
    v45 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v44 + 8 * v45))();
LABEL_64:
  objc_autoreleasePoolPop(v5);
  if (!v41)
    return v3;
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_102199258);
  v46 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
  {
    v47 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 134349056;
    v79 = v47;
    _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,getGeoMapFeatureRoadObject Unable to find roads", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102199258);
    v48 = *(_QWORD *)(a1 + 8);
    v75 = 134349056;
    v76 = v48;
    LODWORD(v56) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,%{public}.1lf,getGeoMapFeatureRoadObject Unable to find roads", &v75, v56);
    v50 = (uint8_t *)v49;
    sub_100512490("Generic", 1, 0, 0, "GEOMapFeatureRoad *CLGeoMapFeatureAccessGeometry::getGeoMapFeatureRoadObject(const CLMapRoadPtr &) const", "%s\n", v49);
LABEL_76:
    if (v50 != buf)
      free(v50);
  }
  return 0;
}

void sub_101004EE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,char *a58)
{
  char *v59;
  uint64_t v60;

  v59 = a58;
  if (a58 == &a55)
  {
    v60 = 4;
    v59 = &a55;
  }
  else
  {
    if (!a58)
      goto LABEL_6;
    v60 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v59 + 8 * v60))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

id sub_101004F84(uint64_t a1, void *a2)
{
  id result;

  if ((objc_msgSend(a2, "isRail") & 1) != 0)
    return objc_msgSend(*(id *)(a1 + 32), "addObject:", a2);
  result = objc_msgSend(a2, "travelDirection");
  if ((_DWORD)result != 6)
  {
    result = objc_msgSend(a2, "travelDirection");
    if ((_DWORD)result != 255)
      return objc_msgSend(*(id *)(a1 + 32), "addObject:", a2);
  }
  return result;
}

BOOL sub_101004FE4(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  NSObject *v4;
  dispatch_time_t v5;
  intptr_t v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  _BOOL8 v10;
  uint64_t v12;
  const char *v13;
  char *v14;
  const char *v15;
  char *v16;
  _QWORD v17[7];
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  void (*v26)(uint64_t);
  dispatch_group_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  char v31;
  int v32;
  uint64_t v33;
  uint8_t buf[1640];

  v28 = 0;
  v29 = &v28;
  v30 = 0x2020000000;
  v31 = 0;
  v22 = 0;
  v23 = &v22;
  v24 = 0x3052000000;
  v25 = sub_10100B718;
  v26 = sub_10100B728;
  v27 = 0;
  v27 = dispatch_group_create();
  v18 = 0;
  v19 = &v18;
  v20 = 0x2020000000;
  v21 = 0;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_10100B734;
  v17[3] = &unk_10218C058;
  v17[4] = &v28;
  v17[5] = &v22;
  v17[6] = &v18;
  dispatch_group_enter((dispatch_group_t)v23[5]);
  *(_QWORD *)buf = v17;
  v2 = *(_QWORD *)(a1 + 24);
  if (!v2)
    sub_10025FD1C();
  v3 = (void *)(*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v2 + 48))(v2, buf);
  v4 = v23[5];
  v5 = dispatch_time(0, 100000000);
  v6 = dispatch_group_wait(v4, v5);
  v19[3] = v6;
  if (v6)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102199258);
    v7 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v8 = v19[3];
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#Warning CLMM, GeoMapFeatureAccess query timed out,%{public}lu", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102199258);
      v12 = v19[3];
      v32 = 134349056;
      v33 = v12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "#Warning CLMM, GeoMapFeatureAccess query timed out,%{public}lu", &v32, 12);
      v14 = (char *)v13;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)", "%s\n", v13);
      if (v14 != (char *)buf)
        free(v14);
    }
    objc_msgSend(v3, "cancel");
  }
  else if (v23[5])
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102199258);
    v9 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "CLMM,clearing dispatchGroup", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102199258);
      LOWORD(v32) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,clearing dispatchGroup", &v32, 2);
      v16 = (char *)v15;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)", "%s\n", v15);
      if (v16 != (char *)buf)
        free(v16);
    }

    v23[5] = 0;
  }
  if (v19[3])
    v10 = 0;
  else
    v10 = *((_BYTE *)v29 + 24) == 0;
  _Block_object_dispose(&v18, 8);
  _Block_object_dispose(&v22, 8);
  _Block_object_dispose(&v28, 8);
  return v10;
}

void sub_101005448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a19, 8);
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_101005480(uint64_t a1, uint64_t *a2, uint64_t a3, double a4)
{
  uint64_t v4;
  void *v7;
  double v8;
  unsigned int v9;
  unint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint8_t *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  _QWORD *v23;
  _OWORD *v24;
  char *v25;
  __int128 v26;
  BOOL v27;
  _QWORD *v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  id v34;
  uint64_t v35;
  void *i;
  __n128 v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  NSObject *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t *v45;
  double *v46;
  uint64_t v52;
  double *v53;
  unint64_t v54;
  double v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  double v60;
  double v61;
  uint64_t v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  _BOOL4 v73;
  double v74;
  NSObject *v75;
  NSObject *v76;
  uint64_t v77;
  int v78;
  double v79;
  unsigned __int8 v80;
  float v81;
  float v82;
  NSObject *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  const char *v88;
  uint8_t *v89;
  uint64_t v90;
  const char *v91;
  uint8_t *v92;
  uint64_t v93;
  const char *v94;
  uint8_t *v95;
  NSObject *v96;
  uint64_t v97;
  uint64_t v99;
  const char *v100;
  uint8_t *v101;
  uint64_t v102;
  uint64_t v103;
  const char *v104;
  uint8_t *v105;
  unint64_t v106;
  const char *v107;
  uint8_t *v108;
  uint64_t v109;
  const char *v110;
  uint8_t *v111;
  uint64_t v112;
  __int128 v114;
  uint64_t *v115;
  uint64_t v116;
  unint64_t v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  _QWORD v122[5];
  char *v123;
  char *v124;
  uint64_t v125;
  __int128 v126;
  double v127;
  uint64_t v128;
  _BYTE v129[32];
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  _BYTE v142[64];
  __int16 v143;
  uint64_t v144;
  int v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  _BYTE v149[80];
  uint64_t v150;
  unint64_t v151;
  __n128 v152;
  float v153;
  __int16 v154;
  float v155;
  __int128 v156;
  unint64_t v157;
  _BYTE v158[128];
  _BYTE v159[24];
  _BYTE *v160;
  __int128 v161;
  uint8_t buf[1640];

  v4 = a1;
  v127 = a4;
  if (!*(_BYTE *)(a1 + 32))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102199258);
    v19 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      v20 = *(_QWORD *)(v4 + 8);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometry geometry is not initialized, use initialize() function", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102199258);
      v99 = *(_QWORD *)(v4 + 8);
      *(_DWORD *)v129 = 134349056;
      *(_QWORD *)&v129[4] = v99;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometry geometry is not initialized, use initialize() function", v129, 12);
      v101 = (uint8_t *)v100;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, BOOL) const", "%s\n", v100);
      if (v101 != buf)
        free(v101);
    }
    return 0;
  }
  v7 = objc_autoreleasePoolPush();
  v126 = *(_OWORD *)(a3 + 56);
  v8 = round(a4);
  v9 = (v8 + v8);
  if (v9 >= 0x1F4)
    v10 = 500;
  else
    v10 = v9;
  v123 = 0;
  v124 = 0;
  v125 = 0;
  sub_1010068C0(&v123, v10);
  v116 = v4;
  if (!*(_BYTE *)(v4 + 33))
  {
    v22 = +[NSMutableArray array](NSMutableArray, "array");
    v122[0] = _NSConcreteStackBlock;
    v122[1] = 3221225472;
    v122[2] = sub_101006974;
    v122[3] = &unk_102199120;
    v122[4] = v22;
    *(_QWORD *)&v161 = v122;
    v23 = operator new(0x28uLL);
    *v23 = off_102199308;
    v23[1] = v4;
    v24 = v23 + 1;
    v23[2] = &v126;
    v23[3] = &v127;
    v23[4] = &v161;
    *(_QWORD *)&v129[24] = v23;
    ++*(_DWORD *)(v4 + 36);
    v25 = (char *)operator new(0x28uLL);
    *(_QWORD *)v25 = off_102199308;
    v26 = v24[1];
    *(_OWORD *)(v25 + 8) = *v24;
    *(_OWORD *)(v25 + 24) = v26;
    v160 = v25;
    v27 = sub_101004FE4((uint64_t)v159);
    v28 = v160;
    if (v160 == v159)
    {
      v29 = 4;
      v28 = v159;
    }
    else
    {
      if (!v160)
        goto LABEL_42;
      v29 = 5;
    }
    (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_42:
    if (v27)
    {
      v120 = 0u;
      v121 = 0u;
      v118 = 0u;
      v119 = 0u;
      v34 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v118, v158, 16);
      if (v34)
      {
        v35 = *(_QWORD *)v119;
        do
        {
          for (i = 0; i != v34; i = (char *)i + 1)
          {
            if (*(_QWORD *)v119 != v35)
              objc_enumerationMutation(v22);
            v37.n128_f64[0] = sub_100CC869C(*(void **)(*((_QWORD *)&v118 + 1) + 8 * (_QWORD)i), 1, (std::string **)buf);
            if (*(_QWORD *)buf)
              sub_10033F68C(&v123, (__int128 *)buf);
            v38 = *(std::__shared_weak_count **)&buf[8];
            if (*(_QWORD *)&buf[8])
            {
              v39 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
              do
                v40 = __ldaxr(v39);
              while (__stlxr(v40 - 1, v39));
              if (!v40)
              {
                ((void (*)(std::__shared_weak_count *, __n128))v38->__on_zero_shared)(v38, v37);
                std::__shared_weak_count::__release_weak(v38);
              }
            }
          }
          v34 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v118, v158, 16, v37.n128_f64[0]);
        }
        while (v34);
      }
    }
    else
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102199258);
      v41 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
      {
        v42 = *(_QWORD *)(v4 + 8);
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)&buf[4] = v42;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,query failed (roadsWithinDistance)", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_102199258);
        v106 = *(_QWORD *)(v4 + 8);
        v152.n128_u32[0] = 134349056;
        *(unint64_t *)((char *)v152.n128_u64 + 4) = v106;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,%{public}.1lf,query failed (roadsWithinDistance)", &v152, 12);
        v108 = (uint8_t *)v107;
        sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, BOOL) const", "%s\n", v107);
        if (v108 != buf)
          free(v108);
      }
    }
    v43 = *(_QWORD **)&v129[24];
    if (*(_BYTE **)&v129[24] == v129)
    {
      v44 = 4;
      v43 = v129;
    }
    else
    {
      if (!*(_QWORD *)&v129[24])
        goto LABEL_68;
      v44 = 5;
    }
    (*(void (**)(void))(*v43 + 8 * v44))();
LABEL_68:
    if (!v27)
      goto LABEL_138;
LABEL_69:
    v45 = (uint64_t *)v123;
    v21 = 1;
    v115 = (uint64_t *)v124;
    if (v123 == v124)
      goto LABEL_139;
    v46 = (double *)(v4 + 56);
    __asm { FMOV            V0.2D, #-1.0 }
    v114 = _Q0;
    while (1)
    {
      if (!*v45)
      {
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_102199258);
        v96 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
        {
          v97 = *(_QWORD *)(v4 + 8);
          *(_DWORD *)buf = 134349056;
          *(_QWORD *)&buf[4] = v97;
          _os_log_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,makeRoadFromGEOMapFeatureRoad returned nullptr", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_102199258);
          v109 = *(_QWORD *)(v116 + 8);
          *(_DWORD *)v129 = 134349056;
          *(_QWORD *)&v129[4] = v109;
          LODWORD(v112) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,%{public}.1lf,makeRoadFromGEOMapFeatureRoad returned nullptr", v129, v112);
          v111 = (uint8_t *)v110;
          sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, BOOL) const", "%s\n", v110);
          if (v111 != buf)
            free(v111);
        }
        sub_1001A5CBC(a2);
        goto LABEL_138;
      }
      if (!sub_100408B10(*v45))
        goto LABEL_118;
      v152 = 0uLL;
      v153 = 0.0;
      v154 = 1;
      v155 = 0.0;
      v157 = 0;
      v156 = 0uLL;
      *(_QWORD *)v129 = 0;
      *(_QWORD *)&v129[8] = 0;
      *(_OWORD *)&v129[16] = v114;
      v130 = 0;
      v131 = 0;
      v132 = 0xBFF0000000000000;
      v144 = 0;
      v145 = 0;
      memset(&v142[32], 0, 32);
      v143 = 0;
      v146 = 0u;
      v147 = 0u;
      v148 = 0u;
      memset(v149, 0, 27);
      memset(&v149[32], 0, 48);
      v141 = 0u;
      memset(v142, 0, 30);
      v139 = 0u;
      v140 = 0u;
      v137 = 0u;
      v138 = 0u;
      v135 = 0u;
      v136 = 0u;
      v133 = 0u;
      v134 = 0u;
      v151 = 0xBFF0000000000000;
      v150 = 0;
      v52 = *v45;
      v53 = *(double **)(*v45 + 136);
      v54 = *(_QWORD *)(*v45 + 144) - (_QWORD)v53;
      v117 = 0xBFF0000000000000;
      if ((int)(v54 >> 4) <= 1)
      {
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_102199258);
        v75 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEBUG, "CLMM,findClosestPointOnRoad,CoordinateCount is <= 1", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_102199258);
          LOWORD(v161) = 0;
          LODWORD(v112) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,findClosestPointOnRoad,CoordinateCount is <= 1", &v161, v112);
          v89 = (uint8_t *)v88;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::findClosestPointOnRoad(CLDistanceCalc &, const int, const std::vector<Coordinate> &, const Coordinate &, double &, double &) [Coordinate = GEOLocationCoordinate2D]", "%s\n", v88);
          if (v89 != buf)
            free(v89);
        }
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_102199258);
        v76 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
        {
          v77 = *(_QWORD *)(v116 + 8);
          *(_DWORD *)buf = 134349056;
          *(_QWORD *)&buf[4] = v77;
          _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,findClosestPointOnRoad returned false", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_102199258);
          v90 = *(_QWORD *)(v116 + 8);
          LODWORD(v161) = 134349056;
          *(_QWORD *)((char *)&v161 + 4) = v90;
          LODWORD(v112) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,%{public}.1lf,findClosestPointOnRoad returned false", &v161, v112);
          v92 = (uint8_t *)v91;
          sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, BOOL) const", "%s\n", v91);
          if (v92 != buf)
            free(v92);
          goto LABEL_109;
        }
LABEL_99:
        v78 = 0;
        goto LABEL_110;
      }
      v55 = *v53;
      v56 = v53[1];
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      *(_QWORD *)&v161 = 0;
      sub_10011E780(v46, (double *)buf, (double *)&buf[8], (double *)&v161, *(double *)&v126, *((double *)&v126 + 1), 0.0, v55, v56, 0.0);
      v57 = 0;
      v58 = (v54 >> 4) - 1;
      v59 = 0.0;
      v60 = -1.0;
      v61 = 0.0;
      do
      {
        v62 = *(_QWORD *)(v52 + 136) + v57;
        v63 = *(double *)(v62 + 16);
        v64 = *(double *)(v62 + 24);
        v161 = 0uLL;
        v128 = 0;
        sub_10011E780(v46, (double *)&v161, (double *)&v161 + 1, (double *)&v128, *(double *)&v126, *((double *)&v126 + 1), 0.0, v63, v64, 0.0);
        v65 = (*(double *)buf - *(double *)&v161) * (*(double *)buf - *(double *)&v161)
            + (*(double *)&buf[8] - *((double *)&v161 + 1)) * (*(double *)&buf[8] - *((double *)&v161 + 1));
        v66 = 0.0 - *(double *)buf;
        if (v65 < 0.001)
        {
          v67 = v66 * v66;
          v68 = 0.0;
          v69 = 0.0 - *(double *)&buf[8];
LABEL_77:
          v70 = v67 + v69 * v69;
          goto LABEL_82;
        }
        v68 = ((0.0 - *(double *)&buf[8]) * (*((double *)&v161 + 1) - *(double *)&buf[8])
             + v66 * (*(double *)&v161 - *(double *)buf))
            / v65;
        if (v68 >= 0.0)
        {
          if (v68 <= 1.0)
          {
            v67 = (0.0 - (*(double *)buf + (*(double *)&v161 - *(double *)buf) * v68))
                * (0.0 - (*(double *)buf + (*(double *)&v161 - *(double *)buf) * v68));
            v69 = 0.0 - (*(double *)&buf[8] + (*((double *)&v161 + 1) - *(double *)&buf[8]) * v68);
            goto LABEL_77;
          }
          v70 = (0.0 - *(double *)&v161) * (0.0 - *(double *)&v161)
              + (0.0 - *((double *)&v161 + 1)) * (0.0 - *((double *)&v161 + 1));
          v68 = 1.0;
        }
        else
        {
          v70 = v66 * v66 + (0.0 - *(double *)&buf[8]) * (0.0 - *(double *)&buf[8]);
          v68 = 0.0;
        }
LABEL_82:
        v71 = sqrt(v65);
        v72 = sqrt(v70);
        v73 = v60 < 0.0;
        if (v72 < v60)
          v73 = 1;
        v74 = v61 + v71 * v68;
        if (v73)
        {
          v60 = v72;
          v59 = v74;
        }
        v61 = v61 + v71;
        *(_OWORD *)buf = v161;
        v57 += 16;
        --v58;
      }
      while (v58);
      v79 = v59 / v61;
      if (v61 < 0.001)
        v79 = 0.0;
      v117 = *(_QWORD *)&v79;
      v80 = *(_DWORD *)(*v45 + 72) != 2;
      if (sub_1010CEB60(v116, (uint64_t)v129, (double **)v45, v80, (double *)&v117, 1))
      {
        sub_100349198(&v152, v45);
        v81 = v60;
        v153 = v81;
        v156 = v139;
        v82 = *(double *)&v140;
        v155 = v82;
        v157 = v117;
        v154 = v80;
        sub_1010069D4((__n128 **)a2, &v152);
        v78 = 1;
        goto LABEL_110;
      }
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102199258);
      v83 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
      {
        v84 = *(_QWORD *)(v116 + 8);
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)&buf[4] = v84;
        _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,interpolateOnRoad returned false", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_102199258);
        v93 = *(_QWORD *)(v116 + 8);
        LODWORD(v161) = 134349056;
        *(_QWORD *)((char *)&v161 + 4) = v93;
        LODWORD(v112) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,%{public}.1lf,interpolateOnRoad returned false", &v161, v112);
        v95 = (uint8_t *)v94;
        sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, BOOL) const", "%s\n", v94);
        if (v95 != buf)
          free(v95);
        goto LABEL_99;
      }
LABEL_109:
      v78 = 0;
LABEL_110:
      if (SHIBYTE(v138) < 0)
        operator delete(*((void **)&v137 + 1));
      v85 = (std::__shared_weak_count *)v152.n128_u64[1];
      if (v152.n128_u64[1])
      {
        v86 = (unint64_t *)(v152.n128_u64[1] + 8);
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
      v4 = v116;
      if (!v78)
      {
        v21 = 0;
        goto LABEL_139;
      }
LABEL_118:
      v45 += 2;
      if (v45 == v115)
      {
        v21 = 1;
        goto LABEL_139;
      }
    }
  }
  if (!*(_QWORD *)(v4 + 16))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102199258);
    v30 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      v31 = *(_QWORD *)(v4 + 8);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v31;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,roadsWithinDistance,fRoadGeometryBuffer is unexpectedly nullptr", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_138;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102199258);
    v32 = *(_QWORD *)(v4 + 8);
    *(_DWORD *)v129 = 134349056;
    *(_QWORD *)&v129[4] = v32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,%{public}.1lf,roadsWithinDistance,fRoadGeometryBuffer is unexpectedly nullptr", v129, 12);
    v18 = (uint8_t *)v33;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, BOOL) const", "%s\n", v33);
    goto LABEL_38;
  }
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_102199258);
  v11 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
  {
    v12 = *(_QWORD *)(v4 + 8);
    v13 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 336) - *(_QWORD *)(*(_QWORD *)(v4 + 16) + 328)) >> 4;
    *(_DWORD *)buf = 134349312;
    *(_QWORD *)&buf[4] = v12;
    *(_WORD *)&buf[12] = 2050;
    *(_QWORD *)&buf[14] = v13;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,RoadBuffer,findRoadsNear fRoadBuffer.size,%{public}lu", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102199258);
    v102 = *(_QWORD *)(v4 + 8);
    v103 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 336) - *(_QWORD *)(*(_QWORD *)(v4 + 16) + 328)) >> 4;
    *(_DWORD *)v129 = 134349312;
    *(_QWORD *)&v129[4] = v102;
    *(_WORD *)&v129[12] = 2050;
    *(_QWORD *)&v129[14] = v103;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,RoadBuffer,findRoadsNear fRoadBuffer.size,%{public}lu", v129, 22);
    v105 = (uint8_t *)v104;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, BOOL) const", "%s\n", v104);
    if (v105 != buf)
      free(v105);
  }
  if ((sub_100CC3FC8(*(_QWORD *)(v4 + 16), (uint64_t)&v123, 1, *(double *)(a3 + 56), *(double *)(a3 + 64), v127) & 1) != 0)
    goto LABEL_69;
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_102199258);
  v14 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
  {
    v15 = *(_QWORD *)(v4 + 8);
    *(_DWORD *)buf = 134349056;
    *(_QWORD *)&buf[4] = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,Warning,RoadBuffer,findRoadsNear returned false", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102199258);
    v16 = *(_QWORD *)(v4 + 8);
    *(_DWORD *)v129 = 134349056;
    *(_QWORD *)&v129[4] = v16;
    LODWORD(v112) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,Warning,RoadBuffer,findRoadsNear returned false", v129, v112);
    v18 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, BOOL) const", "%s\n", v17);
LABEL_38:
    if (v18 != buf)
      free(v18);
  }
LABEL_138:
  v21 = 0;
LABEL_139:
  *(_QWORD *)buf = &v123;
  sub_1002A3684((void ***)buf);
  objc_autoreleasePoolPop(v7);
  return v21;
}

void sub_1010067BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  a45 = (uint64_t)&a38;
  sub_1002A3684((void ***)&a45);
  _Unwind_Resume(a1);
}

uint64_t sub_1010068C0(char **a1, unint64_t a2)
{
  uint64_t result;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  __int128 v11;
  int64x2_t v12;
  char *v13;
  uint64_t v14;
  int64x2_t v15;
  char *v16;
  uint64_t v17;

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60)
      sub_100259694();
    v5 = a1[1] - *a1;
    v17 = result;
    v6 = (char *)sub_10028E224(result, a2);
    v9 = *a1;
    v8 = a1[1];
    if (v8 == *a1)
    {
      v12 = vdupq_n_s64((unint64_t)v8);
      v10 = &v6[v5];
    }
    else
    {
      v10 = &v6[v5];
      do
      {
        v11 = *((_OWORD *)v8 - 1);
        v8 -= 16;
        *((_OWORD *)v10 - 1) = v11;
        v10 -= 16;
        *(_QWORD *)v8 = 0;
        *((_QWORD *)v8 + 1) = 0;
      }
      while (v8 != v9);
      v12 = *(int64x2_t *)a1;
    }
    *a1 = v10;
    a1[1] = &v6[v5];
    v15 = v12;
    v13 = a1[2];
    a1[2] = &v6[16 * v7];
    v16 = v13;
    v14 = v12.i64[0];
    return sub_100014F20((uint64_t)&v14);
  }
  return result;
}

id sub_101006974(uint64_t a1, void *a2)
{
  id result;

  if ((objc_msgSend(a2, "isRail") & 1) != 0)
    return objc_msgSend(*(id *)(a1 + 32), "addObject:", a2);
  result = objc_msgSend(a2, "travelDirection");
  if ((_DWORD)result != 6)
  {
    result = objc_msgSend(a2, "travelDirection");
    if ((_DWORD)result != 255)
      return objc_msgSend(*(id *)(a1 + 32), "addObject:", a2);
  }
  return result;
}

__n128 sub_1010069D4(__n128 **a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  __n128 result;
  __n128 v9;
  unint64_t v10;

  v4 = (__n128 *)operator new(0x48uLL);
  v5 = a2->n128_u64[1];
  v4[1].n128_u64[0] = a2->n128_u64[0];
  v4[1].n128_u64[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  result = a2[1];
  v9 = a2[2];
  v4[2] = result;
  v4[3] = v9;
  v4[4].n128_u64[0] = a2[3].n128_u64[0];
  v10 = (unint64_t)*a1;
  v4->n128_u64[0] = (unint64_t)*a1;
  v4->n128_u64[1] = (unint64_t)a1;
  *(_QWORD *)(v10 + 8) = v4;
  *a1 = v4;
  a1[2] = (__n128 *)((char *)a1[2] + 1);
  return result;
}

uint64_t sub_101006A48(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;

  if (!*(_BYTE *)(a1 + 32))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102199258);
    v2 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      v3 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)buf = 134349056;
      v11 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometry geometry is not initialized, use initialize() function", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102199258);
      v5 = *(_QWORD *)(a1 + 8);
      v8 = 134349056;
      v9 = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometry geometry is not initialized, use initialize() function", &v8, 12);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsConnected(CLMapGeometry::ConnectedQueryResultList &, const CLMapRoadPtr &, BOOL, double, double, BOOL) const", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  return 0;
}

uint64_t sub_101006C04(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, char a5, double **a6, int a7, double *a8, double a9, double a10)
{
  double *v12;
  int v14;
  double v17;
  uint64_t v19;
  double v20;
  NSObject *v21;
  unint64_t v22;
  uint64_t v23;
  const char *v24;
  __n128 *v25;
  NSObject *v26;
  unint64_t v27;
  _BOOL8 v28;
  double v29;
  void *v30;
  uint64_t *v31;
  uint64_t v32;
  _OWORD *v33;
  _OWORD *v34;
  uint64_t *v35;
  uint64_t *v36;
  __n128 v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  NSObject *v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t *j;
  __n128 v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  NSObject *v50;
  unint64_t v51;
  uint64_t v52;
  const char *v53;
  __n128 *v54;
  _QWORD *v55;
  BOOL v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *i;
  __n128 v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  NSObject *v65;
  unint64_t v66;
  uint64_t v67;
  const char *v68;
  __n128 *v69;
  NSObject *v70;
  unint64_t v71;
  uint64_t v72;
  const char *v73;
  _QWORD *v74;
  BOOL v75;
  _QWORD *v76;
  uint64_t v77;
  NSObject *v78;
  unint64_t v79;
  NSObject *v80;
  unint64_t v81;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  const char *v86;
  __n128 *v87;
  uint64_t v88;
  const char *v89;
  uint64_t v90;
  _QWORD v92[5];
  _QWORD *v93;
  _QWORD v94[5];
  _QWORD *v95;
  _QWORD v96[9];
  uint64_t v97;
  __n128 **v98;
  uint64_t v99;
  uint64_t (*v100)(uint64_t *, uint64_t);
  void (*v101)(uint64_t);
  uint64_t v102;
  uint64_t v103[3];
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  char v107;
  double v108;
  char v109;
  _BYTE v110[24];
  _BYTE *v111;
  _BYTE v112[24];
  _BYTE *v113;
  _BYTE v114[12];
  __int128 v115;
  uint64_t v116;
  __int128 v117;
  uint64_t v118;
  uint64_t (*v119)(uint64_t *, uint64_t);
  void (*v120)(uint64_t);
  uint64_t v121;
  uint64_t v122[4];
  __n128 buf;
  char v124;
  uint64_t v125;
  char v126;

  v109 = a7;
  if (!*(_BYTE *)(a1 + 32))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102199258);
    v21 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      v22 = *(_QWORD *)(a1 + 8);
      buf.n128_u32[0] = 134349056;
      *(unint64_t *)((char *)buf.n128_u64 + 4) = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometry geometry is not initialized, use initialize() function", (uint8_t *)&buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(&buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102199258);
    v23 = *(_QWORD *)(a1 + 8);
    LODWORD(v117) = 134349056;
    *(_QWORD *)((char *)&v117 + 4) = v23;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometry geometry is not initialized, use initialize() function", &v117, 12);
    v25 = (__n128 *)v24;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsAtIntersection(CLMapCrumb &, CLMapGeometry::IntersectionQueryResultList *, CLMapGeometry::IntersectionQueryResultList *, BOOL, const CLMapRoadPtr &, BOOL, double, double, double &) const", "%s\n", v24);
    goto LABEL_138;
  }
  v12 = *a6;
  if (*a6)
  {
    v14 = a7;
    v17 = a9;
    if ((a5 & 1) == 0)
    {
      v14 = a7 ^ 1;
      v109 = a7 ^ 1;
    }
    v19 = *(_QWORD *)v12;
    if (v14)
    {
      v20 = 1.0 - a9;
      sub_1004078E0(v12);
      v17 = v12[5];
    }
    else
    {
      sub_1004078E0(v12);
      v20 = v12[5];
    }
    *a8 = v20 * v17;
    if (v20 * v17 > a10)
    {
      *a8 = -1.0;
      return 1;
    }
    v29 = 1.0;
    if (!v14)
      v29 = 0.0;
    v108 = v29;
    sub_1010CEB60(a1, a2, a6, v14, &v108, 1);
    if (!((unint64_t)a3 | (unint64_t)a4))
      return 1;
    v104 = 0;
    v105 = &v104;
    v106 = 0x2020000000;
    v107 = 0;
    *(_QWORD *)&v117 = 0;
    *((_QWORD *)&v117 + 1) = &v117;
    v118 = 0x4812000000;
    v119 = sub_100207250;
    v120 = sub_100207DA0;
    v121 = 0;
    v122[0] = (uint64_t)v122;
    v122[1] = (uint64_t)v122;
    v122[2] = 0;
    v97 = 0;
    v98 = (__n128 **)&v97;
    v99 = 0x4812000000;
    v100 = sub_100207250;
    v101 = sub_100207DA0;
    v102 = 0;
    v103[0] = (uint64_t)v103;
    v103[1] = (uint64_t)v103;
    v103[2] = 0;
    v30 = objc_autoreleasePoolPush();
    v96[0] = _NSConcreteStackBlock;
    v96[1] = 3221225472;
    v96[2] = sub_101007EB4;
    v96[3] = &unk_102199148;
    v96[7] = a1;
    v96[8] = v19;
    v96[4] = &v104;
    v96[5] = &v117;
    v96[6] = &v97;
    v94[0] = _NSConcreteStackBlock;
    v94[1] = 3221225472;
    v94[2] = sub_1010083DC;
    v94[3] = &unk_102199170;
    v94[4] = v96;
    v95 = v94;
    v92[0] = _NSConcreteStackBlock;
    v92[1] = 3221225472;
    v92[2] = sub_1010083EC;
    v92[3] = &unk_102199170;
    v92[4] = v96;
    v93 = v92;
    v31 = a4;
    if (!a3)
    {
LABEL_62:
      if (!v31)
      {
LABEL_91:
        v28 = *((_BYTE *)v105 + 24) == 0;
LABEL_133:
        objc_autoreleasePoolPop(v30);
        _Block_object_dispose(&v97, 8);
        sub_1001A5CBC(v103);
        _Block_object_dispose(&v117, 8);
        sub_1001A5CBC(v122);
        _Block_object_dispose(&v104, 8);
        return v28;
      }
      if (*(_BYTE *)(a1 + 33))
      {
        v115 = 0uLL;
        v116 = 0;
        sub_1010068C0((char **)&v115, 3uLL);
        v49 = *(_QWORD *)(a1 + 16);
        if (v49)
        {
          if (v109)
          {
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_102199258);
            v50 = qword_1022A00D8;
            if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
            {
              v51 = *(_QWORD *)(a1 + 8);
              buf.n128_u32[0] = 134349056;
              *(unint64_t *)((char *)buf.n128_u64 + 4) = v51;
              _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,Unexpected,RoadsAtIntersection incoming data requested from end of the road", (uint8_t *)&buf, 0xCu);
            }
            if (sub_1001BFF7C(115, 0))
            {
              bzero(&buf, 0x65CuLL);
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_102199258);
              v52 = *(_QWORD *)(a1 + 8);
              *(_DWORD *)v114 = 134349056;
              *(_QWORD *)&v114[4] = v52;
              LODWORD(v90) = 12;
              _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,%{public}.1lf,Unexpected,RoadsAtIntersection incoming data requested from end of the road", v114, v90);
              v54 = (__n128 *)v53;
              sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsAtIntersection(CLMapCrumb &, CLMapGeometry::IntersectionQueryResultList *, CLMapGeometry::IntersectionQueryResultList *, BOOL, const CLMapRoadPtr &, BOOL, double, double, double &) const", "%s\n", v53);
              if (v54 != &buf)
                free(v54);
              v31 = a4;
            }
          }
          else
          {
            sub_100CC7304(v49, (uint64_t *)a6, (char **)&v115, 1);
          }
          v59 = (uint64_t *)*((_QWORD *)&v115 + 1);
          for (i = (uint64_t *)v115; i != v59; i += 2)
          {
            buf = 0uLL;
            v124 = 1;
            v125 = 0;
            v126 = 0;
            sub_100349198(&buf, i);
            v124 = 1;
            v125 = 0;
            v126 = 0;
            v61 = sub_101008368((__n128 **)(*((_QWORD *)&v117 + 1) + 48), &buf);
            v62 = (std::__shared_weak_count *)buf.n128_u64[1];
            if (buf.n128_u64[1])
            {
              v63 = (unint64_t *)(buf.n128_u64[1] + 8);
              do
                v64 = __ldaxr(v63);
              while (__stlxr(v64 - 1, v63));
              if (!v64)
              {
                ((void (*)(std::__shared_weak_count *, __n128))v62->__on_zero_shared)(v62, v61);
                std::__shared_weak_count::__release_weak(v62);
              }
            }
          }
        }
        buf.n128_u64[0] = (unint64_t)&v115;
        sub_1002A3684((void ***)&buf);
        goto LABEL_89;
      }
      *(_QWORD *)v114 = 0;
      *(_QWORD *)v114 = sub_101004594(a1, a6);
      if (*(_QWORD *)v114)
      {
        ++*(_DWORD *)(a1 + 36);
        v111 = 0;
        v55 = operator new(0x28uLL);
        *v55 = off_102199408;
        v55[1] = &v109;
        v55[2] = a1;
        v55[3] = v114;
        v55[4] = &v95;
        v111 = v55;
        v56 = sub_101004FE4((uint64_t)v110);
        v57 = v111;
        if (v111 == v110)
        {
          v58 = 4;
          v57 = v110;
        }
        else
        {
          if (!v111)
          {
LABEL_101:

            *(_QWORD *)v114 = 0;
            if (v56)
            {
LABEL_89:
              if ((uint64_t *)(*((_QWORD *)&v117 + 1) + 48) != v31)
                sub_10100C06C(v31, *(_QWORD *)(*((_QWORD *)&v117 + 1) + 56), *((_QWORD *)&v117 + 1) + 48);
              goto LABEL_91;
            }
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_102199258);
            v70 = qword_1022A00D8;
            if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
            {
              v71 = *(_QWORD *)(a1 + 8);
              buf.n128_u32[0] = 134349056;
              *(unint64_t *)((char *)buf.n128_u64 + 4) = v71;
              _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,incoming roads query failed (roadsAtIntersection)", (uint8_t *)&buf, 0xCu);
            }
            if (!sub_1001BFF7C(115, 0))
            {
LABEL_132:
              v28 = 0;
              goto LABEL_133;
            }
            bzero(&buf, 0x65CuLL);
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_102199258);
            v72 = *(_QWORD *)(a1 + 8);
            LODWORD(v115) = 134349056;
            *(_QWORD *)((char *)&v115 + 4) = v72;
            LODWORD(v90) = 12;
            _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,%{public}.1lf,incoming roads query failed (roadsAtIntersection)", &v115, v90);
            v69 = (__n128 *)v73;
            sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsAtIntersection(CLMapCrumb &, CLMapGeometry::IntersectionQueryResultList *, CLMapGeometry::IntersectionQueryResultList *, BOOL, const CLMapRoadPtr &, BOOL, double, double, double &) const", "%s\n", v73);
LABEL_148:
            if (v69 != &buf)
              free(v69);
            goto LABEL_132;
          }
          v58 = 5;
        }
        (*(void (**)(void))(*v57 + 8 * v58))();
        goto LABEL_101;
      }
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102199258);
      v65 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
      {
        v66 = *(_QWORD *)(a1 + 8);
        buf.n128_u32[0] = 134349056;
        *(unint64_t *)((char *)buf.n128_u64 + 4) = v66;
        _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,getGeoMapFeatureRoadObject returned nil", (uint8_t *)&buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_132;
      bzero(&buf, 0x65CuLL);
      if (qword_1022A00D0 == -1)
      {
LABEL_98:
        v67 = *(_QWORD *)(a1 + 8);
        LODWORD(v115) = 134349056;
        *(_QWORD *)((char *)&v115 + 4) = v67;
        LODWORD(v90) = 12;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,%{public}.1lf,getGeoMapFeatureRoadObject returned nil", &v115, v90);
        v69 = (__n128 *)v68;
        sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsAtIntersection(CLMapCrumb &, CLMapGeometry::IntersectionQueryResultList *, CLMapGeometry::IntersectionQueryResultList *, BOOL, const CLMapRoadPtr &, BOOL, double, double, double &) const", "%s\n", v68);
        goto LABEL_148;
      }
LABEL_151:
      dispatch_once(&qword_1022A00D0, &stru_102199258);
      goto LABEL_98;
    }
    if (*(_BYTE *)(a1 + 33))
    {
      v115 = 0uLL;
      v116 = 0;
      sub_1010068C0((char **)&v115, 3uLL);
      v32 = *(_QWORD *)(a1 + 16);
      if (v32)
      {
        if (v109)
        {
          sub_100CC6B44(v32, (uint64_t *)a6, (char **)&v115, 1);
        }
        else
        {
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_102199258);
          v41 = qword_1022A00D8;
          if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
          {
            v42 = *(_QWORD *)(a1 + 8);
            buf.n128_u32[0] = 134349056;
            *(unint64_t *)((char *)buf.n128_u64 + 4) = v42;
            _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,Unexpected,RoadsAtIntersection outgoing data requested from start of the road", (uint8_t *)&buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_102199258);
            v85 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)v114 = 134349056;
            *(_QWORD *)&v114[4] = v85;
            _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,%{public}.1lf,Unexpected,RoadsAtIntersection outgoing data requested from start of the road", v114, 12);
            v87 = (__n128 *)v86;
            sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsAtIntersection(CLMapCrumb &, CLMapGeometry::IntersectionQueryResultList *, CLMapGeometry::IntersectionQueryResultList *, BOOL, const CLMapRoadPtr &, BOOL, double, double, double &) const", "%s\n", v86);
            if (v87 != &buf)
              free(v87);
          }
        }
        v43 = (uint64_t *)*((_QWORD *)&v115 + 1);
        for (j = (uint64_t *)v115; j != v43; j += 2)
        {
          buf = 0uLL;
          v124 = 1;
          v125 = 0;
          v126 = 0;
          sub_100349198(&buf, j);
          v124 = 1;
          v125 = 0;
          v126 = 0;
          v45 = sub_101008368(v98 + 6, &buf);
          v46 = (std::__shared_weak_count *)buf.n128_u64[1];
          if (buf.n128_u64[1])
          {
            v47 = (unint64_t *)(buf.n128_u64[1] + 8);
            do
              v48 = __ldaxr(v47);
            while (__stlxr(v48 - 1, v47));
            if (!v48)
            {
              ((void (*)(std::__shared_weak_count *, __n128))v46->__on_zero_shared)(v46, v45);
              std::__shared_weak_count::__release_weak(v46);
            }
          }
        }
      }
      buf.n128_u64[0] = (unint64_t)&v115;
      sub_1002A3684((void ***)&buf);
      v31 = a4;
      goto LABEL_60;
    }
    v33 = sub_100CC2FEC((uint64_t **)(a1 + 2616), (__int128 *)*a6, 0);
    if (v109 && (v34 = v33) != 0)
    {
      v36 = (uint64_t *)*((_QWORD *)v33 + 4);
      v35 = (uint64_t *)*((_QWORD *)v33 + 5);
      if (v36 != v35)
      {
        while (*v36)
        {
          if (*(_QWORD *)*v36 != v19)
          {
            buf = 0uLL;
            v124 = 1;
            v125 = 0;
            v126 = 0;
            sub_100349198(&buf, v36);
            v124 = 1;
            v125 = 0;
            v126 = 0;
            v37 = sub_101008368(v98 + 6, &buf);
            v38 = (std::__shared_weak_count *)buf.n128_u64[1];
            if (buf.n128_u64[1])
            {
              v39 = (unint64_t *)(buf.n128_u64[1] + 8);
              do
                v40 = __ldaxr(v39);
              while (__stlxr(v40 - 1, v39));
              if (!v40)
              {
                ((void (*)(std::__shared_weak_count *, __n128))v38->__on_zero_shared)(v38, v37);
                std::__shared_weak_count::__release_weak(v38);
              }
            }
          }
          v36 += 2;
          if (v36 == v35)
            goto LABEL_111;
        }
        sub_1001A5CBC((uint64_t *)v98 + 6);
      }
LABEL_111:
      v31 = a4;
      if (v98[8])
      {
        *((_QWORD *)v34 + 7) = *(_QWORD *)(a1 + 8);
LABEL_60:
        if (v98 + 6 != (__n128 **)a3)
          sub_10100C06C(a3, (uint64_t)v98[7], (uint64_t)(v98 + 6));
        goto LABEL_62;
      }
    }
    else if (v98[8])
    {
      goto LABEL_60;
    }
    *(_QWORD *)v114 = 0;
    *(_QWORD *)v114 = sub_101004594(a1, a6);
    if (!*(_QWORD *)v114)
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102199258);
      v78 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
      {
        v79 = *(_QWORD *)(a1 + 8);
        buf.n128_u32[0] = 134349056;
        *(unint64_t *)((char *)buf.n128_u64 + 4) = v79;
        _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,getGeoMapFeatureRoadObject returned nil", (uint8_t *)&buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_132;
      bzero(&buf, 0x65CuLL);
      if (qword_1022A00D0 == -1)
        goto LABEL_98;
      goto LABEL_151;
    }
    ++*(_DWORD *)(a1 + 36);
    v113 = 0;
    v74 = operator new(0x28uLL);
    *v74 = off_102199388;
    v74[1] = &v109;
    v74[2] = a1;
    v74[3] = v114;
    v74[4] = &v93;
    v113 = v74;
    v75 = sub_101004FE4((uint64_t)v112);
    v76 = v113;
    if (v113 == v112)
    {
      v77 = 4;
      v76 = v112;
    }
    else
    {
      if (!v113)
        goto LABEL_126;
      v77 = 5;
    }
    (*(void (**)(void))(*v76 + 8 * v77))();
LABEL_126:

    *(_QWORD *)v114 = 0;
    if (!v75)
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102199258);
      v80 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
      {
        v81 = *(_QWORD *)(a1 + 8);
        buf.n128_u32[0] = 134349056;
        *(unint64_t *)((char *)buf.n128_u64 + 4) = v81;
        _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,outgoing roads query failed (roadsAtIntersection)", (uint8_t *)&buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_132;
      bzero(&buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102199258);
      v88 = *(_QWORD *)(a1 + 8);
      LODWORD(v115) = 134349056;
      *(_QWORD *)((char *)&v115 + 4) = v88;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,%{public}.1lf,outgoing roads query failed (roadsAtIntersection)", &v115, 12);
      v69 = (__n128 *)v89;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsAtIntersection(CLMapCrumb &, CLMapGeometry::IntersectionQueryResultList *, CLMapGeometry::IntersectionQueryResultList *, BOOL, const CLMapRoadPtr &, BOOL, double, double, double &) const", "%s\n", v89);
      goto LABEL_148;
    }
    goto LABEL_60;
  }
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_102199258);
  v26 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
  {
    v27 = *(_QWORD *)(a1 + 8);
    buf.n128_u32[0] = 134349056;
    *(unint64_t *)((char *)buf.n128_u64 + 4) = v27;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,input road is nullptr", (uint8_t *)&buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102199258);
    v83 = *(_QWORD *)(a1 + 8);
    LODWORD(v117) = 134349056;
    *(_QWORD *)((char *)&v117 + 4) = v83;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,%{public}.1lf,input road is nullptr", &v117, 12);
    v25 = (__n128 *)v84;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsAtIntersection(CLMapCrumb &, CLMapGeometry::IntersectionQueryResultList *, CLMapGeometry::IntersectionQueryResultList *, BOOL, const CLMapRoadPtr &, BOOL, double, double, double &) const", "%s\n", v84);
LABEL_138:
    if (v25 != &buf)
      free(v25);
  }
  return 0;
}

void sub_101007D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  _Block_object_dispose(&a36, 8);
  sub_1001A5CBC(a13);
  _Block_object_dispose(&a65, 8);
  sub_1001A5CBC(a12);
  _Block_object_dispose(&a45, 8);
  _Unwind_Resume(a1);
}

void sub_101007EB4(uint64_t a1, void *a2, int a3)
{
  uint64_t v4;
  __n128 v7;
  __n128 v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  const char *v18;
  uint8_t *v19;
  uint64_t v20;
  const char *v21;
  uint8_t *v22;
  int v23;
  uint64_t v24;
  __n128 v25;
  char v26;
  uint64_t v27;
  char v28;
  uint8_t buf[16];

  v4 = *(_QWORD *)(a1 + 56);
  if (a2)
  {
    if (objc_msgSend(a2, "roadID") != *(id *)(a1 + 64)
      && ((objc_msgSend(a2, "isRail") & 1) != 0
       || !objc_msgSend(a2, "travelDirection")
       || objc_msgSend(a2, "travelDirection") == 1))
    {
      v26 = 1;
      v27 = 0;
      v28 = 0;
      sub_100CC869C(a2, 1, (std::string **)buf);
      v7 = *(__n128 *)buf;
      memset(buf, 0, sizeof(buf));
      v25 = v7;
      if (v7.n128_u64[0])
      {
        if (sub_100408B10(v25.n128_i64[0]))
        {
          v26 = 1;
          v27 = 0;
          v28 = 0;
          if (a3)
            v9 = *(_QWORD *)(a1 + 40);
          else
            v9 = *(_QWORD *)(a1 + 48);
          v8 = sub_101008368((__n128 **)(*(_QWORD *)(v9 + 8) + 48), &v25);
        }
      }
      else
      {
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_102199258);
        v12 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
        {
          v13 = *(_QWORD *)(v4 + 8);
          *(_DWORD *)buf = 134349056;
          *(_QWORD *)&buf[4] = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,makeRoadFromGEOMapFeatureRoad returned nullptr", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_102199258);
          v20 = *(_QWORD *)(v4 + 8);
          v23 = 134349056;
          v24 = v20;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,%{public}.1lf,makeRoadFromGEOMapFeatureRoad returned nullptr", &v23, 12);
          v22 = (uint8_t *)v21;
          sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsAtIntersection(CLMapCrumb &, CLMapGeometry::IntersectionQueryResultList *, CLMapGeometry::IntersectionQueryResultList *, BOOL, const CLMapRoadPtr &, BOOL, double, double, double &) const_block_invoke", "%s\n", v21);
          if (v22 != buf)
            free(v22);
        }
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
      }
      v14 = (std::__shared_weak_count *)v25.n128_u64[1];
      if (v25.n128_u64[1])
      {
        v15 = (unint64_t *)(v25.n128_u64[1] + 8);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v14->__on_zero_shared)(v14, v8);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
    }
  }
  else
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102199258);
    v10 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      v11 = *(_QWORD *)(v4 + 8);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,GEOMapFeatureRoad is null", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102199258);
      v17 = *(_QWORD *)(v4 + 8);
      v25.n128_u32[0] = 134349056;
      *(unint64_t *)((char *)v25.n128_u64 + 4) = v17;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,%{public}.1lf,GEOMapFeatureRoad is null", &v25, 12);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsAtIntersection(CLMapCrumb &, CLMapGeometry::IntersectionQueryResultList *, CLMapGeometry::IntersectionQueryResultList *, BOOL, const CLMapRoadPtr &, BOOL, double, double, double &) const_block_invoke", "%s\n", v18);
      if (v19 != buf)
        free(v19);
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  }
}

void sub_101008344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_101008368(__n128 **a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  __n128 result;
  unint64_t v9;

  v4 = (__n128 *)operator new(0x38uLL);
  v5 = a2->n128_u64[1];
  v4[1].n128_u64[0] = a2->n128_u64[0];
  v4[1].n128_u64[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  result = a2[1];
  v4[2] = result;
  v4[3].n128_u8[0] = a2[2].n128_u8[0];
  v9 = (unint64_t)*a1;
  v4->n128_u64[0] = (unint64_t)*a1;
  v4->n128_u64[1] = (unint64_t)a1;
  *(_QWORD *)(v9 + 8) = v4;
  *a1 = v4;
  a1[2] = (__n128 *)((char *)a1[2] + 1);
  return result;
}

uint64_t sub_1010083DC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1010083EC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1010083FC(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;

  if (*(_BYTE *)(a1 + 32))
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (v2)
      sub_100CC3224(v2, 0.5, 0.5);
    sub_100CC3260(a1 + 2616, *(double *)(a1 + 8), 60.0, 60.0);
  }
  else
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102199258);
    v3 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      v4 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)buf = 134349056;
      v11 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometry geometry is not initialized, use initialize() function", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102199258);
      v5 = *(_QWORD *)(a1 + 8);
      v8 = 134349056;
      v9 = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometry geometry is not initialized, use initialize() function", &v8, 12);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "virtual void CLGeoMapFeatureAccessGeometry::clearStoredStaleConnections()", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
}

BOOL sub_10100860C(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, double a5, double a6)
{
  __int128 **v6;
  void *v10;
  __int128 *v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  int v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  BOOL v22;
  _OWORD *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  int64x2_t *v31;
  unint64_t v32;
  _OWORD *v33;
  uint64_t i;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  _QWORD *v45;
  char *v46;
  __int128 v47;
  int64x2_t v48;
  _OWORD *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  void *v68;
  _QWORD **v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  BOOL v82;
  BOOL v83;
  unint64_t *v84;
  unint64_t v85;
  float v86;
  NSObject *v87;
  uint64_t v88;
  char v89;
  double v90;
  _QWORD *v91;
  BOOL v92;
  _QWORD *v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  NSObject *v97;
  uint64_t v98;
  uint64_t v99;
  const char *v100;
  uint8_t *v101;
  NSObject *v102;
  uint64_t v103;
  uint64_t v104;
  const char *v105;
  uint8_t *v106;
  _BYTE *v107;
  _BYTE *v108;
  uint64_t v109;
  uint64_t j;
  __int128 *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  char **v116;
  unint64_t *v117;
  unint64_t v118;
  NSObject *v119;
  uint64_t v120;
  NSObject *v121;
  uint64_t v122;
  uint64_t v123;
  const char *v124;
  uint8_t *v125;
  uint64_t v126;
  const char *v127;
  uint8_t *v128;
  uint64_t v129;
  const char *v130;
  NSObject *v131;
  uint64_t v132;
  uint64_t v133;
  const char *v134;
  uint8_t *v135;
  NSObject *v136;
  uint64_t v137;
  uint64_t v138;
  const char *v139;
  uint8_t *v140;
  NSObject *v141;
  uint64_t v142;
  uint64_t v143;
  const char *v144;
  NSObject *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  __n128 (*v151)(__n128 *, __n128 *);
  const char *v152;
  NSObject *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v158;
  uint64_t v159;
  __n128 (*v160)(__n128 *, __n128 *);
  const char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t **v164;
  double *v166;
  BOOL v167;
  int v168;
  void *v171;
  int v172;
  _QWORD *v173[2];
  _QWORD v174[8];
  double v175;
  __int128 v176;
  unsigned __int8 v177;
  _BYTE v178[24];
  _BYTE *v179;
  __int128 v180;
  __int128 v181;
  _BYTE v182[24];
  __n128 (*v183)(__n128 *, __n128 *);
  void (*v184)(uint64_t);
  void *v185;
  _BYTE v186[32];
  uint8_t buf[24];
  uint64_t v188;
  int64x2_t *v189;

  v6 = (__int128 **)a3;
  v172 = 0;
  v164 = (uint64_t **)(a1 + 2616);
  v163 = a1 + 96;
  v166 = (double *)(a1 + 56);
  v168 = a4 & ~(a4 >> 31);
  while (v172 != v168)
  {
    v177 = 0;
    v10 = objc_autoreleasePoolPush();
    v11 = *v6;
    if (!*v6)
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102199258);
      v136 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
      {
        v137 = *(_QWORD *)(a1 + 8);
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)&buf[4] = v137;
        _os_log_impl((void *)&_mh_execute_header, v136, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,input road is nullptr", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_243;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102199258);
      v138 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)v182 = 134349056;
      *(_QWORD *)&v182[4] = v138;
      LODWORD(v162) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,%{public}.1lf,input road is nullptr", v182, v162);
      v140 = (uint8_t *)v139;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometry::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList &, CLMapGeometry::DistanceQueryResult &, int) const", "%s\n", v139);
      goto LABEL_249;
    }
    v12 = *(_QWORD *)v11;
    sub_1004078E0(*v6);
    v13 = *((double *)v11 + 5);
    if (v13 <= 0.0)
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102199258);
      v141 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
      {
        v142 = *(_QWORD *)(a1 + 8);
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)&buf[4] = v142;
        _os_log_impl((void *)&_mh_execute_header, v141, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,road length is 0.0", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_243;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102199258);
      v143 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)v182 = 134349056;
      *(_QWORD *)&v182[4] = v143;
      LODWORD(v162) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,%{public}.1lf,road length is 0.0", v182, v162);
      v140 = (uint8_t *)v144;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometry::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList &, CLMapGeometry::DistanceQueryResult &, int) const", "%s\n", v144);
      goto LABEL_249;
    }
    if ((int)((*((_QWORD *)*v6 + 18) - *((_QWORD *)*v6 + 17)) >> 4) <= 1)
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102199258);
      v145 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        v146 = *(_QWORD *)(a1 + 8);
        v147 = *(_QWORD *)*v6;
        v148 = (int)((uint64_t)(*((_QWORD *)*v6 + 18) - *((_QWORD *)*v6 + 17)) >> 4);
        *(_DWORD *)buf = 134349569;
        *(_QWORD *)&buf[4] = v146;
        *(_WORD *)&buf[12] = 2049;
        *(_QWORD *)&buf[14] = v147;
        *(_WORD *)&buf[22] = 2050;
        v188 = v148;
        _os_log_impl((void *)&_mh_execute_header, v145, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,GEOMapFeatureRoad id,%{private}lld,has less than two coordinate (moveOnRoadInternal),%{public}ld", buf, 0x20u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_243;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102199258);
      v149 = *(_QWORD *)(a1 + 8);
      v150 = *(_QWORD *)*a3;
      v151 = (__n128 (*)(__n128 *, __n128 *))(int)((uint64_t)(*(_QWORD *)(*a3 + 144) - *(_QWORD *)(*a3 + 136)) >> 4);
      *(_DWORD *)v182 = 134349569;
      *(_QWORD *)&v182[4] = v149;
      *(_WORD *)&v182[12] = 2049;
      *(_QWORD *)&v182[14] = v150;
      *(_WORD *)&v182[22] = 2050;
      v183 = v151;
      LODWORD(v162) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,GEOMapFeatureRoad id,%{private}lld,has less than two coordinate (moveOnRoadInternal),%{public}ld", v182, v162);
      v140 = (uint8_t *)v152;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometry::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList &, CLMapGeometry::DistanceQueryResult &, int) const", "%s\n", v152);
      goto LABEL_249;
    }
    v14 = sub_1004078B8((uint64_t)*v6, 0);
    if (!v14)
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102199258);
      v153 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        v154 = *(_QWORD *)(a1 + 8);
        v155 = *(_QWORD *)*v6;
        v156 = (int)((uint64_t)(*((_QWORD *)*v6 + 18) - *((_QWORD *)*v6 + 17)) >> 4);
        *(_DWORD *)buf = 134349569;
        *(_QWORD *)&buf[4] = v154;
        *(_WORD *)&buf[12] = 2049;
        *(_QWORD *)&buf[14] = v155;
        *(_WORD *)&buf[22] = 2050;
        v188 = v156;
        _os_log_impl((void *)&_mh_execute_header, v153, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,GEOMapFeatureRoad id,%{private}lld,startCoordinate is null,%{public}ld", buf, 0x20u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_243;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102199258);
      v158 = *(_QWORD *)(a1 + 8);
      v159 = *(_QWORD *)*a3;
      v160 = (__n128 (*)(__n128 *, __n128 *))(int)((uint64_t)(*(_QWORD *)(*a3 + 144) - *(_QWORD *)(*a3 + 136)) >> 4);
      *(_DWORD *)v182 = 134349569;
      *(_QWORD *)&v182[4] = v158;
      *(_WORD *)&v182[12] = 2049;
      *(_QWORD *)&v182[14] = v159;
      *(_WORD *)&v182[22] = 2050;
      v183 = v160;
      LODWORD(v162) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,GEOMapFeatureRoad id,%{private}lld,startCoordinate is null,%{public}ld", v182, v162);
      v140 = (uint8_t *)v161;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometry::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList &, CLMapGeometry::DistanceQueryResult &, int) const", "%s\n", v161);
LABEL_249:
      if (v140 != buf)
        free(v140);
LABEL_243:
      objc_autoreleasePoolPop(v10);
      return 0;
    }
    if (a6 >= 0.0)
    {
      v15 = v177;
    }
    else
    {
      v15 = 1;
      v177 = 1;
    }
    v16 = fabs(a6);
    v17 = 1.0 - a5;
    if (v15)
      v17 = a5;
    v18 = v13 * v17;
    v171 = v10;
    if (v13 * v17 <= v16)
    {
      if (v15)
        a5 = 0.0;
      else
        a5 = 1.0;
    }
    else
    {
      a5 = a5 + a6 / v13;
    }
    ++v172;
    v176 = **v6;
    *(_QWORD *)v182 = 0;
    *(_QWORD *)&v182[8] = v182;
    *(_QWORD *)&v182[16] = 0x4812000000;
    v183 = sub_101009F40;
    v184 = sub_101009F64;
    v185 = &unk_102080316;
    memset(v186, 0, 24);
    if (v18 > v16)
      goto LABEL_72;
    if (*(_BYTE *)(a1 + 33))
    {
      memset(buf, 0, sizeof(buf));
      sub_1010068C0((char **)buf, 3uLL);
      v19 = *(_QWORD *)(a1 + 16);
      if (v19)
      {
        if (v177)
          sub_100CC7304(v19, a3, (char **)buf, 1);
        else
          sub_100CC6B44(v19, a3, (char **)buf, 1);
        v60 = *(uint64_t **)buf;
        v59 = *(uint64_t **)&buf[8];
        while (v60 != v59)
        {
          LOBYTE(v175) = 1;
          sub_10100C3C4(v60, (char *)&v175, &v181);
          sub_10033F68C((char **)(*(_QWORD *)&v182[8] + 48), &v181);
          v61 = (std::__shared_weak_count *)*((_QWORD *)&v181 + 1);
          if (*((_QWORD *)&v181 + 1))
          {
            v62 = (unint64_t *)(*((_QWORD *)&v181 + 1) + 8);
            do
              v63 = __ldaxr(v62);
            while (__stlxr(v63 - 1, v62));
            if (!v63)
            {
              ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
              std::__shared_weak_count::__release_weak(v61);
            }
          }
          v60 += 2;
        }
      }
      *(_QWORD *)&v181 = buf;
      sub_1002A3684((void ***)&v181);
      goto LABEL_72;
    }
    v20 = sub_100CC2FEC(v164, &v176, 0);
    v21 = v20;
    v22 = v20 != 0;
    if (v20)
    {
      v23 = (_OWORD *)((char *)v20 + 8);
      v24 = 8;
      if (!v177)
      {
        v24 = 32;
        v23 = v20 + 2;
      }
      v25 = *(uint64_t **)((char *)v20 + v24);
      v26 = (uint64_t *)*((_QWORD *)v23 + 1);
      while (v25 != v26)
      {
        v28 = *v25;
        v27 = v25[1];
        *(_QWORD *)&v181 = *v25;
        *((_QWORD *)&v181 + 1) = v27;
        if (v27)
        {
          v29 = (unint64_t *)(v27 + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
        }
        v31 = *(int64x2_t **)&v182[8];
        if (v28)
        {
          LOBYTE(v175) = 1;
          sub_10100C3C4((uint64_t *)&v181, (char *)&v175, &v180);
          v32 = v31[4].u64[0];
          v33 = (_OWORD *)v31[3].i64[1];
          if ((unint64_t)v33 >= v32)
          {
            v36 = v31[3].i64[0];
            v37 = ((uint64_t)v33 - v36) >> 4;
            v38 = v37 + 1;
            if ((unint64_t)(v37 + 1) >> 60)
              sub_100259694();
            v39 = v32 - v36;
            if (v39 >> 3 > v38)
              v38 = v39 >> 3;
            if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF0)
              v40 = 0xFFFFFFFFFFFFFFFLL;
            else
              v40 = v38;
            v189 = v31 + 4;
            v41 = (char *)sub_10028E224((uint64_t)v31[4].i64, v40);
            v43 = &v41[16 * v37];
            *(_OWORD *)v43 = v180;
            v180 = 0uLL;
            v45 = (_QWORD *)v31[3].i64[0];
            v44 = (_QWORD *)v31[3].i64[1];
            if (v44 == v45)
            {
              v48 = vdupq_n_s64((unint64_t)v44);
              v46 = &v41[16 * v37];
            }
            else
            {
              v46 = &v41[16 * v37];
              do
              {
                v47 = *((_OWORD *)v44 - 1);
                v44 -= 2;
                *((_OWORD *)v46 - 1) = v47;
                v46 -= 16;
                *v44 = 0;
                v44[1] = 0;
              }
              while (v44 != v45);
              v48 = v31[3];
            }
            v49 = v43 + 16;
            v31[3].i64[0] = (uint64_t)v46;
            v31[3].i64[1] = (uint64_t)(v43 + 16);
            *(int64x2_t *)&buf[8] = v48;
            v50 = v31[4].i64[0];
            v31[4].i64[0] = (uint64_t)&v41[16 * v42];
            v188 = v50;
            *(_QWORD *)buf = v48.i64[0];
            sub_100014F20((uint64_t)buf);
            v51 = (std::__shared_weak_count *)*((_QWORD *)&v180 + 1);
            v31[3].i64[1] = (uint64_t)v49;
            if (v51)
            {
              p_shared_owners = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(p_shared_owners);
              while (__stlxr(v53 - 1, p_shared_owners));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
          }
          else
          {
            *v33 = v180;
            v31[3].i64[1] = (uint64_t)(v33 + 1);
          }
        }
        else
        {
          v35 = *(_QWORD *)(*(_QWORD *)&v182[8] + 48);
          for (i = *(_QWORD *)(*(_QWORD *)&v182[8] + 56); i != v35; i = sub_100261F44(i - 16))
            ;
          v31[3].i64[1] = v35;
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v181 + 1);
        if (*((_QWORD *)&v181 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v181 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        if (!v28)
          break;
        v25 += 2;
      }
      v57 = *(_QWORD *)(*(_QWORD *)&v182[8] + 48);
      v58 = *(_QWORD *)(*(_QWORD *)&v182[8] + 56);
      if (v57 == v58)
      {
        v22 = 0;
        goto LABEL_127;
      }
      *((_QWORD *)v21 + 7) = *(_QWORD *)(a1 + 8);
      v22 = 1;
    }
    else
    {
      v57 = *(_QWORD *)(*(_QWORD *)&v182[8] + 48);
      v58 = *(_QWORD *)(*(_QWORD *)&v182[8] + 56);
    }
    if (v57 != v58)
    {
      if (v21)
        goto LABEL_72;
LABEL_160:
      if (*(_QWORD *)(*(_QWORD *)&v182[8] + 48) != *(_QWORD *)(*(_QWORD *)&v182[8] + 56))
      {
        v107 = sub_100CC2FEC(v164, &v176, 1);
        v108 = v107;
        if (v107)
        {
          sub_100CC3130(v107, v177);
          *((_QWORD *)v108 + 7) = *(_QWORD *)(a1 + 8);
          v109 = *(_QWORD *)(*(_QWORD *)&v182[8] + 48);
          for (j = *(_QWORD *)(*(_QWORD *)&v182[8] + 56); v109 != j; v109 += 16)
          {
            v111 = *(__int128 **)v109;
            v112 = *(std::__shared_weak_count **)(v109 + 8);
            *(_QWORD *)buf = *(_QWORD *)v109;
            *(_QWORD *)&buf[8] = v112;
            if (v112)
            {
              v113 = (unint64_t *)&v112->__shared_owners_;
              do
                v114 = __ldxr(v113);
              while (__stxr(v114 + 1, v113));
            }
            v115 = *(_QWORD *)v111;
            if (*(_QWORD *)v111)
            {
              if (v177)
              {
                v108[1] = 1;
                v116 = (char **)(v108 + 8);
              }
              else
              {
                *v108 = 1;
                v116 = (char **)(v108 + 32);
              }
              sub_10033F68C(v116, v111);
            }
            else
            {
              sub_100CC3130(v108, v177 != 0);
              *((_QWORD *)v108 + 7) = 0xBFF0000000000000;
            }
            if (v112)
            {
              v117 = (unint64_t *)&v112->__shared_owners_;
              do
                v118 = __ldaxr(v117);
              while (__stlxr(v118 - 1, v117));
              if (!v118)
              {
                ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                std::__shared_weak_count::__release_weak(v112);
              }
            }
            if (!v115)
              break;
          }
        }
        else
        {
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_102199258);
          v121 = qword_1022A00D8;
          if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
          {
            v122 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)buf = 134349056;
            *(_QWORD *)&buf[4] = v122;
            _os_log_impl((void *)&_mh_execute_header, v121, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,Unexpected,RoadConnectionsEntry could not be created", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_102199258);
            v123 = *(_QWORD *)(a1 + 8);
            LODWORD(v181) = 134349056;
            *(_QWORD *)((char *)&v181 + 4) = v123;
            LODWORD(v162) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,%{public}.1lf,Unexpected,RoadConnectionsEntry could not be created", &v181, v162);
            v125 = (uint8_t *)v124;
            sub_100512490("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometry::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList &, CLMapGeometry::DistanceQueryResult &, int) const", "%s\n", v124);
            if (v125 != buf)
              free(v125);
          }
        }
      }
      goto LABEL_72;
    }
LABEL_127:
    *(_QWORD *)&v180 = 0;
    v6 = (__int128 **)a3;
    v68 = v171;
    *(_QWORD *)&v180 = sub_101004594(a1, a3);
    if (!(_QWORD)v180)
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102199258);
      v97 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
      {
        v98 = *(_QWORD *)(a1 + 8);
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)&buf[4] = v98;
        _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,getGeoMapFeatureRoadObject returned nil", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_185;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102199258);
      v99 = *(_QWORD *)(a1 + 8);
      LODWORD(v181) = 134349056;
      *(_QWORD *)((char *)&v181 + 4) = v99;
      LODWORD(v162) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,%{public}.1lf,getGeoMapFeatureRoadObject returned nil", &v181, v162);
      v101 = (uint8_t *)v100;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometry::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList &, CLMapGeometry::DistanceQueryResult &, int) const", "%s\n", v100);
      goto LABEL_202;
    }
    v174[0] = _NSConcreteStackBlock;
    v174[1] = 3221225472;
    v174[2] = sub_101009F8C;
    v174[3] = &unk_102199198;
    v174[6] = v12;
    v174[7] = v14;
    v174[4] = v182;
    v174[5] = a1;
    v175 = COERCE_DOUBLE(v174);
    ++*(_DWORD *)(a1 + 36);
    v179 = 0;
    v91 = operator new(0x28uLL);
    *v91 = off_1021994D8;
    v91[1] = &v177;
    v91[2] = a1;
    v91[3] = &v180;
    v91[4] = &v175;
    v179 = v91;
    v92 = sub_101004FE4((uint64_t)v178);
    v93 = v179;
    if (v179 == v178)
    {
      v93 = v178;
      v94 = 4;
    }
    else
    {
      if (!v179)
        goto LABEL_158;
      v94 = 5;
    }
    (*(void (**)(void))(*v93 + 8 * v94))();
LABEL_158:

    *(_QWORD *)&v180 = 0;
    if (!v92)
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102199258);
      v119 = qword_1022A00D8;
      v6 = (__int128 **)a3;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
      {
        v120 = *(_QWORD *)(a1 + 8);
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)&buf[4] = v120;
        _os_log_impl((void *)&_mh_execute_header, v119, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,query failed (moveOnRoad)", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_185;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102199258);
      v129 = *(_QWORD *)(a1 + 8);
      LODWORD(v181) = 134349056;
      *(_QWORD *)((char *)&v181 + 4) = v129;
      LODWORD(v162) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,%{public}.1lf,query failed (moveOnRoad)", &v181, v162);
      v101 = (uint8_t *)v130;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometry::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList &, CLMapGeometry::DistanceQueryResult &, int) const", "%s\n", v130);
LABEL_202:
      if (v101 != buf)
        free(v101);
      v6 = (__int128 **)a3;
LABEL_185:
      v89 = 0;
      v167 = 0;
      goto LABEL_115;
    }
    if (!v22)
      goto LABEL_160;
LABEL_72:
    if (!v177
      || (v64 = *(_QWORD *)(*(_QWORD *)&v182[8] + 48), v65 = *(_QWORD *)(*(_QWORD *)&v182[8] + 56), v64 == v65))
    {
      v67 = 0xFFFFFFFFLL;
      v68 = v171;
      v6 = (__int128 **)a3;
    }
    else
    {
      v66 = 0;
      v67 = 0xFFFFFFFFLL;
      v68 = v171;
      v6 = (__int128 **)a3;
      do
      {
        v69 = *(_QWORD ***)v64;
        v70 = *(std::__shared_weak_count **)(v64 + 8);
        if (v70)
        {
          v71 = (unint64_t *)&v70->__shared_owners_;
          do
            v72 = __ldxr(v71);
          while (__stxr(v72 + 1, v71));
        }
        v73 = a2;
        while (1)
        {
          v73 = *(_QWORD *)(v73 + 8);
          if (v73 == a2)
            break;
          if (*(_QWORD *)(v73 + 16) == **v69)
          {
            v67 = v66;
            break;
          }
        }
        if (v70)
        {
          v74 = (unint64_t *)&v70->__shared_owners_;
          do
            v75 = __ldaxr(v74);
          while (__stlxr(v75 - 1, v74));
          if (!v75)
          {
            ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
            std::__shared_weak_count::__release_weak(v70);
          }
        }
        if ((v67 & 0x80000000) == 0)
          break;
        ++v66;
        v64 += 16;
      }
      while (v64 != v65);
    }
    if (v18 <= v16)
    {
      v76 = *(_QWORD *)(*(_QWORD *)&v182[8] + 48);
      v77 = *(_QWORD *)(*(_QWORD *)&v182[8] + 56);
      v78 = v76 != v77 && v172 < a4;
      if (v78 && (v67 != 0xFFFFFFFF || !v177))
      {
        v90 = -v18;
        if (v177)
          v90 = v18;
        a6 = a6 + v90;
        if ((v67 & 0x80000000) != 0)
        {
          v95 = sub_10100A8F4(v163);
          v76 = *(_QWORD *)(*(_QWORD *)&v182[8] + 48);
          v67 = v95 % (unint64_t)((*(_QWORD *)(*(_QWORD *)&v182[8] + 56) - v76) >> 4);
        }
        else if (v67 >= (v77 - v76) >> 4)
        {
LABEL_137:
          v89 = 1;
          goto LABEL_115;
        }
        if (v177)
          a5 = 1.0;
        else
          a5 = 0.0;
        v96 = 16 * v67;
        sub_100349198(v6, *(uint64_t **)(v76 + v96));
        if (!*v6)
        {
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_102199258);
          v102 = qword_1022A00D8;
          if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
          {
            v103 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)buf = 134349056;
            *(_QWORD *)&buf[4] = v103;
            _os_log_impl((void *)&_mh_execute_header, v102, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,makeRoadFromGEOMapFeatureRoad returned nullptr", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_102199258);
            v104 = *(_QWORD *)(a1 + 8);
            LODWORD(v181) = 134349056;
            *(_QWORD *)((char *)&v181 + 4) = v104;
            LODWORD(v162) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,%{public}.1lf,makeRoadFromGEOMapFeatureRoad returned nullptr", &v181, v162);
            v106 = (uint8_t *)v105;
            sub_100512490("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometry::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList &, CLMapGeometry::DistanceQueryResult &, int) const", "%s\n", v105);
            if (v106 != buf)
              free(v106);
            v89 = 0;
            v167 = 0;
            v6 = (__int128 **)a3;
            goto LABEL_115;
          }
          goto LABEL_185;
        }
        *((_BYTE *)v6 + 20) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v182[8] + 48) + v96) + 16);
        goto LABEL_137;
      }
    }
    v181 = 0uLL;
    v175 = -1.0;
    v79 = (std::__shared_weak_count *)v6[1];
    v173[0] = *v6;
    v173[1] = &v79->__vftable;
    if (v79)
    {
      v80 = (unint64_t *)&v79->__shared_owners_;
      do
        v81 = __ldxr(v80);
      while (__stxr(v81 + 1, v80));
    }
    v82 = sub_10100A10C(v166, v173, (double *)&v181, &v175, a5);
    v83 = v82;
    if (!v79)
      goto LABEL_106;
    v84 = (unint64_t *)&v79->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
      if (!v83)
      {
LABEL_109:
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_102199258);
        v87 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
        {
          v88 = *(_QWORD *)(a1 + 8);
          *(_DWORD *)buf = 134349056;
          *(_QWORD *)&buf[4] = v88;
          _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,moveOnRoadInternal,interpolateProjections returned false", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_102199258);
          v126 = *(_QWORD *)(a1 + 8);
          LODWORD(v180) = 134349056;
          *(_QWORD *)((char *)&v180 + 4) = v126;
          LODWORD(v162) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,%{public}.1lf,moveOnRoadInternal,interpolateProjections returned false", &v180, v162);
          v128 = (uint8_t *)v127;
          sub_100512490("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometry::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList &, CLMapGeometry::DistanceQueryResult &, int) const", "%s\n", v127);
          if (v128 != buf)
            free(v128);
        }
        goto LABEL_114;
      }
    }
    else
    {
LABEL_106:
      if (!v82)
        goto LABEL_109;
    }
    *((double *)v6 + 6) = a5;
    *((_OWORD *)v6 + 2) = v181;
    v86 = v175;
    *((float *)v6 + 6) = v86;
LABEL_114:
    v167 = v83;
    v89 = 0;
LABEL_115:
    _Block_object_dispose(v182, 8);
    *(_QWORD *)buf = v186;
    sub_1002A3684((void ***)buf);
    objc_autoreleasePoolPop(v68);
    if ((v89 & 1) == 0)
      return v167;
  }
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_102199258);
  v131 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
  {
    v132 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 134349312;
    *(_QWORD *)&buf[4] = v132;
    *(_WORD *)&buf[12] = 2050;
    *(double *)&buf[14] = a6;
    _os_log_impl((void *)&_mh_execute_header, v131, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,moveOnRoad failed,distanceRemaining,%{public}.1lf", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102199258);
    v133 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)v182 = 134349312;
    *(_QWORD *)&v182[4] = v133;
    *(_WORD *)&v182[12] = 2050;
    *(double *)&v182[14] = a6;
    LODWORD(v162) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,%{public}.1lf,moveOnRoad failed,distanceRemaining,%{public}.1lf", v182, v162);
    v135 = (uint8_t *)v134;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometry::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList &, CLMapGeometry::DistanceQueryResult &, int) const", "%s\n", v134);
    if (v135 != buf)
      free(v135);
  }
  return 0;
}

void sub_101009E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void **a47,uint64_t a48,char a49)
{
  _Block_object_dispose(&a49, 8);
  a47 = a20;
  sub_1002A3684(&a47);
  _Unwind_Resume(a1);
}

__n128 sub_101009F40(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_101009F64(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  sub_1002A3684(&v1);
}

void sub_101009F8C(uint64_t a1, void *a2)
{
  id v4;
  double *v5;
  __n128 v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char v13;
  __int128 v14;
  std::string *v15;
  std::__shared_weak_count *v16;

  if ((objc_msgSend(a2, "isRail") & 1) != 0
    || !objc_msgSend(a2, "travelDirection")
    || objc_msgSend(a2, "travelDirection") == 1)
  {
    v4 = *(id *)(a1 + 48);
    if (v4 != objc_msgSend(a2, "roadID")
      || (v5 = (double *)objc_msgSend(a2, "coordinates"),
          !sub_100512A74(*v5, v5[1], **(double **)(a1 + 56), *(double *)(*(_QWORD *)(a1 + 56) + 8), 0.0000001)))
    {
      v6.n128_f64[0] = sub_100CC869C(a2, 1, &v15);
      if (v15)
      {
        if (sub_100408B10((uint64_t)v15))
        {
          v13 = 1;
          sub_10100C3C4((uint64_t *)&v15, &v13, &v14);
          sub_10033F68C((char **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48), &v14);
          v7 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
          if (*((_QWORD *)&v14 + 1))
          {
            v8 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
            do
              v9 = __ldaxr(v8);
            while (__stlxr(v9 - 1, v8));
            if (!v9)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
        }
      }
      v10 = v16;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v10->__on_zero_shared)(v10, v6);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
  }
}

void sub_10100A0E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_100261F44((uint64_t)va);
  sub_100261F44((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL sub_10100A10C(double *a1, _QWORD **a2, double *a3, double *a4, double a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  NSObject *v21;
  _BOOL4 v22;
  _BOOL8 result;
  double *v24;
  double v25;
  double *v26;
  NSObject *v27;
  double *v28;
  double v29;
  NSObject *v30;
  double *v31;
  double *v32;
  uint64_t v33;
  double v34;
  int v35;
  double v36;
  NSObject *v37;
  double *v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  uint64_t v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double *v52;
  double v53;
  double v54;
  long double v55;
  uint64_t v56;
  NSObject *v57;
  _BOOL4 v58;
  uint64_t v59;
  double __y[2];
  double __x[205];

  *a3 = 0.0;
  a3[1] = 0.0;
  *a4 = 0.0;
  v5 = *a2;
  if (*a2)
  {
    v6 = (v5[18] - v5[17]) >> 4;
    if ((int)v6 <= 0)
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102199258);
      v27 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__x[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,CoordinateCount is 0", (uint8_t *)__x, 2u);
      }
      result = sub_1001BFF7C(115, 2);
      if (!result)
        return result;
      bzero(__x, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102199258);
      LOWORD(__y[0]) = 0;
      v29 = _os_log_send_and_compose_impl(2, 0, __x, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,interpolateProjections,CoordinateCount is 0", __y, 2);
    }
    else
    {
      if ((_DWORD)v6 == 1)
        return 1;
      sub_1004078E0(*a2);
      v12 = (uint64_t)(v5[21] - v5[20]) >> 3;
      if (v12 == (_DWORD)v6 - 1)
      {
        v13 = (uint64_t)*a2;
        sub_1004078E0((_QWORD *)v13);
        if (a5 < 0.000001)
        {
          *(_OWORD *)a3 = *(_OWORD *)*(_QWORD *)(v13 + 136);
          v14 = *a3;
          v15 = a3[1];
          v16 = *(double **)(v13 + 136);
LABEL_7:
          v17 = v16[2];
          v18 = v16[3];
          __x[0] = 0.0;
          v59 = 0;
          __y[0] = 0.0;
          sub_10011E780(a1, __x, __y, (double *)&v59, v14, v15, 0.0, v17, v18, 0.0);
          v19 = atan2(__y[0], __x[0]);
          if (v19 < 0.0)
            v19 = v19 + 6.28318531;
          v20 = v19 * 57.2957795;
          goto LABEL_54;
        }
        if (a5 >= 0.999999)
        {
          *(_OWORD *)a3 = *(_OWORD *)(*(_QWORD *)(v13 + 136) + 16 * v12);
          v20 = sub_10073C714(a1, *(double *)(*(_QWORD *)(v13 + 136) + 16 * v12 - 16), *(double *)(*(_QWORD *)(v13 + 136) + 16 * v12 - 8), *a3, a3[1]);
LABEL_54:
          *a4 = v20;
          return 1;
        }
        v31 = (double *)v5[20];
        v32 = (double *)v5[21];
        if (v31 != v32)
        {
          v33 = 0;
          v34 = 0.0;
          v35 = 2;
          while (1)
          {
            v36 = *v31 / *(double *)(v13 + 40);
            if (vabdd_f64(a5, v34 + v36) < 0.000001)
              break;
            if (v34 + v36 > a5)
            {
              v51 = (a5 - v34) / v36;
              v52 = (double *)(*(_QWORD *)(v13 + 136) + v33);
              v53 = v52[1];
              v54 = v52[3];
              *a3 = *v52 + (v52[2] - *v52) * v51;
              v55 = v53 + sub_1010B9110(v53, v54) * v51;
              a3[1] = v55;
              sub_100080DCC(v55);
              *((_QWORD *)a3 + 1) = v56;
              v16 = (double *)(*(_QWORD *)(v13 + 136) + v33);
              v14 = *v16;
              v15 = v16[1];
              goto LABEL_7;
            }
            ++v31;
            v33 += 16;
            ++v35;
            v34 = v34 + v36;
            if (v31 == v32)
              goto LABEL_45;
          }
          if (v35 < (int)v6)
          {
            *(_OWORD *)a3 = *(_OWORD *)(*(_QWORD *)(v13 + 136) + v33 + 16);
            v38 = (double *)(*(_QWORD *)(v13 + 136) + v33);
            v39 = *v38;
            v40 = v38[1];
            v41 = *a3;
            v42 = a3[1];
            __x[0] = 0.0;
            v59 = 0;
            __y[0] = 0.0;
            sub_10011E780(a1, __x, __y, (double *)&v59, v39, v40, 0.0, v41, v42, 0.0);
            v43 = atan2(__y[0], __x[0]);
            if (v43 < 0.0)
              v43 = v43 + 6.28318531;
            v44 = v43 * 57.2957795;
            v45 = *a3;
            v46 = a3[1];
            v47 = *(_QWORD *)(v13 + 136) + v33;
            v48 = *(double *)(v47 + 32);
            v49 = *(double *)(v47 + 40);
            __x[0] = 0.0;
            v59 = 0;
            __y[0] = 0.0;
            sub_10011E780(a1, __x, __y, (double *)&v59, v45, v46, 0.0, v48, v49, 0.0);
            v50 = atan2(__y[0], __x[0]);
            if (v50 < 0.0)
              v50 = v50 + 6.28318531;
            sub_100512AA0(v44, v50 * 57.2957795);
            goto LABEL_54;
          }
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_102199258);
          v57 = qword_1022A00D8;
          if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
          {
            LOWORD(__x[0]) = 0;
            _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_ERROR, "CLMM,interpolateProjections,Could not interpolate, incorrect coordinateCount", (uint8_t *)__x, 2u);
          }
          v58 = sub_1001BFF7C(115, 0);
          result = 0;
          if (v58)
          {
            bzero(__x, 0x65CuLL);
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_102199258);
            LOWORD(__y[0]) = 0;
            v25 = _os_log_send_and_compose_impl(2, 0, __x, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,interpolateProjections,Could not interpolate, incorrect coordinateCount", __y, 2);
LABEL_18:
            v26 = v24;
            sub_100512490("Generic", 1, 0, 0, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "%s\n", v25);
LABEL_36:
            if (v26 != __x)
              free(v26);
            return 0;
          }
          return result;
        }
LABEL_45:
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_102199258);
        v37 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(__x[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,Could not interpolate to intended projection", (uint8_t *)__x, 2u);
        }
        result = sub_1001BFF7C(115, 2);
        if (!result)
          return result;
        bzero(__x, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_102199258);
        LOWORD(__y[0]) = 0;
        v29 = _os_log_send_and_compose_impl(2, 0, __x, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,interpolateProjections,Could not interpolate to intended projection", __y, 2);
      }
      else
      {
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_102199258);
        v30 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(__x[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,inconsistent array size", (uint8_t *)__x, 2u);
        }
        result = sub_1001BFF7C(115, 2);
        if (!result)
          return result;
        bzero(__x, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_102199258);
        LOWORD(__y[0]) = 0;
        v29 = _os_log_send_and_compose_impl(2, 0, __x, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,interpolateProjections,inconsistent array size", __y, 2);
      }
    }
    v26 = v28;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "%s\n", v29);
    goto LABEL_36;
  }
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_102199258);
  v21 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
  {
    LOWORD(__x[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "CLMM, NULL road", (uint8_t *)__x, 2u);
  }
  v22 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v22)
  {
    bzero(__x, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102199258);
    LOWORD(__y[0]) = 0;
    v25 = _os_log_send_and_compose_impl(2, 0, __x, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM, NULL road", __y, 2);
    goto LABEL_18;
  }
  return result;
}

uint64_t sub_10100A8F4(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unsigned int v3;

  v1 = *(_QWORD *)(a1 + 2496);
  v2 = (v1 + 1) % 0x270uLL;
  v3 = *(_DWORD *)(a1 + 4 * ((v1 + 397) % 0x270uLL)) ^ ((*(_DWORD *)(a1 + 4 * v2) & 0x7FFFFFFE | *(_DWORD *)(a1 + 4 * v1) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a1 + 4 * v2) << 31) >> 31) & 0x9908B0DF;
  *(_DWORD *)(a1 + 4 * v1) = v3;
  *(_QWORD *)(a1 + 2496) = v2;
  LODWORD(v1) = ((v3 ^ (v3 >> 11)) << 7) & 0x9D2C5680 ^ v3 ^ (v3 >> 11);
  return ((_DWORD)v1 << 15) & 0xEFC60000 ^ v1 ^ ((((_DWORD)v1 << 15) & 0xEFC60000 ^ v1) >> 18);
}

BOOL sub_10100A994(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  double v5;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  uint64_t v13;
  uint8_t buf[4];
  uint64_t v15;

  if (*(_BYTE *)(a1 + 32))
  {
    v5 = 1050.0;
    if (a4 <= 1050.0)
    {
      v5 = a4;
      if (a4 < -1050.0)
        v5 = -1050.0;
    }
    return sub_10100860C(a1, a3, (uint64_t *)a2, 45, *(double *)(a2 + 48), v5);
  }
  else
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102199258);
    v7 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      v8 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)buf = 134349056;
      v15 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometry geometry is not initialized, use initialize() function", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102199258);
      v9 = *(_QWORD *)(a1 + 8);
      v12 = 134349056;
      v13 = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometry geometry is not initialized, use initialize() function", &v12, 12);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::moveOnRoad(struct CLMapGeometry::DistanceQueryResult &, double, const CLMapGeometry::RoadInfoList &) const", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    return 0;
  }
}

uint64_t sub_10100ABC0(uint64_t a1, uint64_t **a2, uint64_t *a3, int *a4, double a5, double a6)
{
  double *v8;
  double v13;
  uint64_t *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  char *v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  double v37;
  double v38;
  double v39;
  std::__shared_weak_count *v40;
  double v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  float v46;
  float v47;
  double v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  int v54;
  __n128 v55;
  float v56;
  NSObject *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  const char *v64;
  NSObject *v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  _QWORD *v69[2];
  _BYTE v70[12];
  __int16 v71;
  _BYTE v72[18];
  _BYTE buf[1632];

  if (*(_BYTE *)(a1 + 32))
  {
    v8 = (double *)*a2;
    if (*a2)
    {
      sub_1004078E0(*a2);
      v13 = v8[5];
      if (v13 <= 0.0)
      {
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_102199258);
        v33 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
        {
          v34 = *(_QWORD *)(a1 + 8);
          *(_DWORD *)buf = 134349056;
          *(_QWORD *)&buf[4] = v34;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,road length is 0.0", buf, 0xCu);
        }
        result = sub_1001BFF7C(115, 0);
        if ((_DWORD)result)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_102199258);
          v35 = *(_QWORD *)(a1 + 8);
          *(_DWORD *)v70 = 134349056;
          *(_QWORD *)&v70[4] = v35;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,%{public}.1lf,road length is 0.0", v70, 12);
          v24 = (char *)v36;
          sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::moveOnRouteRoads(double, CLMapGeometry::DistanceQueryResult &, CLMapGeometry::DistanceQueryResultList &, double, int &) const", "%s\n", v36);
          goto LABEL_37;
        }
      }
      else
      {
        v14 = *a2;
        if ((int)((unint64_t)((*a2)[18] - (*a2)[17]) >> 4) > 1)
        {
          v37 = 1.0 - a5;
          if (!*((_BYTE *)a2 + 20))
            v37 = a5;
          v38 = v13 * v37;
          if (v13 * v37 <= fabs(a6))
          {
            v49 = *a4;
            v50 = v49 + 1;
            *a4 = v49 + 1;
            if ((int)v49 > 9 || a3[2] <= v50)
            {
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_102199258);
              v57 = qword_1022A00D8;
              if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
              {
                v58 = *(_QWORD *)(a1 + 8);
                v59 = *a4;
                v60 = a3[2];
                *(_DWORD *)buf = 134349568;
                *(_QWORD *)&buf[4] = v58;
                *(_WORD *)&buf[12] = 1026;
                *(_DWORD *)&buf[14] = v59;
                *(_WORD *)&buf[18] = 2050;
                *(_QWORD *)&buf[20] = v60;
                _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,no more route roads available to cover the distance travelled,index,%{public}d,size,%{public}lu", buf, 0x1Cu);
              }
              result = sub_1001BFF7C(115, 2);
              if ((_DWORD)result)
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A00D0 != -1)
                  dispatch_once(&qword_1022A00D0, &stru_102199258);
                v61 = *(_QWORD *)(a1 + 8);
                v62 = *a4;
                v63 = a3[2];
                *(_DWORD *)v70 = 134349568;
                *(_QWORD *)&v70[4] = v61;
                v71 = 1026;
                *(_DWORD *)v72 = v62;
                *(_WORD *)&v72[4] = 2050;
                *(_QWORD *)&v72[6] = v63;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,%{public}.1lf,no more route roads available to cover the distance travelled,index,%{public}d,size,%{public}lu", v70, 28);
                v24 = (char *)v64;
                sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLGeoMapFeatureAccessGeometry::moveOnRouteRoads(double, CLMapGeometry::DistanceQueryResult &, CLMapGeometry::DistanceQueryResultList &, double, int &) const", "%s\n", v64);
                goto LABEL_37;
              }
            }
            else
            {
              v51 = (uint64_t *)a3[1];
              if ((int)v49 <= -2)
              {
                do
                  v51 = (uint64_t *)*v51;
                while (!__CFADD__(v50++, 1));
              }
              else if ((_DWORD)v49 != -1)
              {
                v52 = v49 + 2;
                do
                {
                  v51 = (uint64_t *)v51[1];
                  --v52;
                }
                while (v52 > 1);
              }
              if (v51 == a3)
              {
                if (qword_1022A00D0 != -1)
                  dispatch_once(&qword_1022A00D0, &stru_102199258);
                v65 = qword_1022A00D8;
                if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
                {
                  v66 = *(_QWORD *)(a1 + 8);
                  *(_DWORD *)buf = 134349056;
                  *(_QWORD *)&buf[4] = v66;
                  _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,unexpectedly reached to the end of routeRoadList", buf, 0xCu);
                }
                result = sub_1001BFF7C(115, 0);
                if ((_DWORD)result)
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1022A00D0 != -1)
                    dispatch_once(&qword_1022A00D0, &stru_102199258);
                  v67 = *(_QWORD *)(a1 + 8);
                  *(_DWORD *)v70 = 134349056;
                  *(_QWORD *)&v70[4] = v67;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,%{public}.1lf,unexpectedly reached to the end of routeRoadList", v70, 12);
                  v24 = (char *)v68;
                  sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::moveOnRouteRoads(double, CLMapGeometry::DistanceQueryResult &, CLMapGeometry::DistanceQueryResultList &, double, int &) const", "%s\n", v68);
                  goto LABEL_37;
                }
              }
              else
              {
                v54 = *((unsigned __int8 *)v51 + 36);
                sub_100349198(a2, v51 + 2);
                *((_BYTE *)a2 + 20) = *((_BYTE *)v51 + 36);
                v55.n128_u64[0] = 0;
                if (!v54)
                {
                  v56 = *((float *)a2 + 6) + 180.0;
                  *((float *)a2 + 6) = v56;
                  sub_1001C6800(v56);
                  v55.n128_f32[0] = v55.n128_f64[0];
                  *((_DWORD *)a2 + 6) = v55.n128_u32[0];
                  v55.n128_u64[0] = 1.0;
                }
                return (*(uint64_t (**)(uint64_t, uint64_t **, uint64_t *, int *, __n128, double))(*(_QWORD *)a1 + 56))(a1, a2, a3, a4, v55, a6 - v38);
              }
            }
          }
          else
          {
            v39 = a6 / v13;
            if (!*((_BYTE *)a2 + 20))
              v39 = -v39;
            *(_QWORD *)buf = 0;
            *(_QWORD *)&buf[8] = 0;
            v40 = (std::__shared_weak_count *)a2[1];
            v41 = v39 + a5;
            v69[0] = v14;
            v69[1] = &v40->__vftable;
            *(_QWORD *)v70 = 0xBFF0000000000000;
            if (v40)
            {
              p_shared_owners = (unint64_t *)&v40->__shared_owners_;
              do
                v43 = __ldxr(p_shared_owners);
              while (__stxr(v43 + 1, p_shared_owners));
            }
            sub_10100A10C((double *)(a1 + 56), v69, (double *)buf, (double *)v70, v39 + a5);
            if (v40)
            {
              v44 = (unint64_t *)&v40->__shared_owners_;
              do
                v45 = __ldaxr(v44);
              while (__stlxr(v45 - 1, v44));
              if (!v45)
              {
                ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                std::__shared_weak_count::__release_weak(v40);
              }
            }
            *((double *)a2 + 6) = v41;
            *((_OWORD *)a2 + 2) = *(_OWORD *)buf;
            v46 = *(double *)v70;
            *((float *)a2 + 6) = v46;
            if (!*((_BYTE *)a2 + 20))
            {
              v47 = v46 + 180.0;
              *((float *)a2 + 6) = v47;
              sub_1001C6800(v47);
              *(float *)&v48 = v48;
              *((_DWORD *)a2 + 6) = LODWORD(v48);
            }
            return 1;
          }
        }
        else
        {
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_102199258);
          v15 = qword_1022A00D8;
          if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
          {
            v16 = *(_QWORD *)(a1 + 8);
            v17 = **a2;
            v18 = (int)(((*a2)[18] - (*a2)[17]) >> 4);
            *(_DWORD *)buf = 134349569;
            *(_QWORD *)&buf[4] = v16;
            *(_WORD *)&buf[12] = 2049;
            *(_QWORD *)&buf[14] = v17;
            *(_WORD *)&buf[22] = 2050;
            *(_QWORD *)&buf[24] = v18;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,GEOMapFeatureRoad id,%{private}lld,has less than two coordinate (moveOnRoadInternal),%{public}ld", buf, 0x20u);
          }
          result = sub_1001BFF7C(115, 0);
          if ((_DWORD)result)
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_102199258);
            v20 = *(_QWORD *)(a1 + 8);
            v21 = **a2;
            v22 = (int)(((*a2)[18] - (*a2)[17]) >> 4);
            *(_DWORD *)v70 = 134349569;
            *(_QWORD *)&v70[4] = v20;
            v71 = 2049;
            *(_QWORD *)v72 = v21;
            *(_WORD *)&v72[8] = 2050;
            *(_QWORD *)&v72[10] = v22;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,%{public}.1lf,GEOMapFeatureRoad id,%{private}lld,has less than two coordinate (moveOnRoadInternal),%{public}ld", v70, 32);
            v24 = (char *)v23;
            sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::moveOnRouteRoads(double, CLMapGeometry::DistanceQueryResult &, CLMapGeometry::DistanceQueryResultList &, double, int &) const", "%s\n", v23);
LABEL_37:
            if (v24 != buf)
              free(v24);
            return 0;
          }
        }
      }
    }
    else
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102199258);
      v29 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
      {
        v30 = *(_QWORD *)(a1 + 8);
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)&buf[4] = v30;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,input road is nullptr", buf, 0xCu);
      }
      result = sub_1001BFF7C(115, 0);
      if ((_DWORD)result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_102199258);
        v31 = *(_QWORD *)(a1 + 8);
        *(_DWORD *)v70 = 134349056;
        *(_QWORD *)&v70[4] = v31;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,%{public}.1lf,input road is nullptr", v70, 12);
        v24 = (char *)v32;
        sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::moveOnRouteRoads(double, CLMapGeometry::DistanceQueryResult &, CLMapGeometry::DistanceQueryResultList &, double, int &) const", "%s\n", v32);
        goto LABEL_37;
      }
    }
  }
  else
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102199258);
    v25 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      v26 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometry geometry is not initialized, use initialize() function", buf, 0xCu);
    }
    result = sub_1001BFF7C(115, 0);
    if ((_DWORD)result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102199258);
      v27 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)v70 = 134349056;
      *(_QWORD *)&v70[4] = v27;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometry geometry is not initialized, use initialize() function", v70, 12);
      v24 = (char *)v28;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::moveOnRouteRoads(double, CLMapGeometry::DistanceQueryResult &, CLMapGeometry::DistanceQueryResultList &, double, int &) const", "%s\n", v28);
      goto LABEL_37;
    }
  }
  return result;
}

void sub_10100B6A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10100B6C8(uint64_t a1)
{
  sub_1010CDCEC(a1);
  operator delete();
}

void sub_10100B6EC(id a1)
{
  qword_1022A00D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

void sub_10100B718(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_10100B728(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_10100B734(_QWORD *a1, void *a2)
{
  NSObject *v4;
  NSObject *v5;
  void *v6;
  int v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  void *v13;
  int v14;
  const char *v15;
  uint8_t *v16;
  const char *v17;
  uint8_t *v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  int v22;
  id v23;
  __int16 v24;
  id v25;
  __int16 v26;
  id v27;
  uint8_t buf[4];
  id v29;
  __int16 v30;
  id v31;
  __int16 v32;
  id v33;

  if (a2)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102199258);
    v4 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349571;
      v29 = objc_msgSend(a2, "code");
      v30 = 2114;
      v31 = objc_msgSend(a2, "domain");
      v32 = 2113;
      v33 = objc_msgSend(a2, "localizedDescription");
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning CLMM,GEOMapFeatureAccessRequest reported errorcode,%{public}lld,domain,%{public}@,description,\"%{private}@\"", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102199258);
      v10 = qword_1022A00D8;
      v22 = 134349571;
      v23 = objc_msgSend(a2, "code");
      v24 = 2114;
      v25 = objc_msgSend(a2, "domain");
      v26 = 2113;
      v27 = objc_msgSend(a2, "localizedDescription");
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 0, "#Warning CLMM,GEOMapFeatureAccessRequest reported errorcode,%{public}lld,domain,%{public}@,description,\"%{private}@\"", &v22, 32);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)_block_invoke", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 1;
  }
  if (*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102199258);
    v5 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v6 = *(void **)(*(_QWORD *)(a1[6] + 8) + 24);
      v7 = *(unsigned __int8 *)(*(_QWORD *)(a1[4] + 8) + 24);
      *(_DWORD *)buf = 134349312;
      v29 = v6;
      v30 = 1026;
      LODWORD(v31) = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLMM,releasing dispatch_group,%{public}lu,errorReported,%{public}d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102199258);
      v13 = *(void **)(*(_QWORD *)(a1[6] + 8) + 24);
      v14 = *(unsigned __int8 *)(*(_QWORD *)(a1[4] + 8) + 24);
      v22 = 134349312;
      v23 = v13;
      v24 = 1026;
      LODWORD(v25) = v14;
      LODWORD(v21) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,releasing dispatch_group,%{public}lu,errorReported,%{public}d", &v22, v21);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)_block_invoke", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    dispatch_group_leave(*(dispatch_group_t *)(*(_QWORD *)(a1[5] + 8) + 40));
  }
  if (*(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24))
  {
    if (*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40))
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102199258);
      v8 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "CLMM,clearing dispatchGroup when time-out has happened", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_102199258);
        LOWORD(v22) = 0;
        LODWORD(v21) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,clearing dispatchGroup when time-out has happened", &v22, v21);
        v18 = (uint8_t *)v17;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)_block_invoke", "%s\n", v17);
        if (v18 != buf)
          free(v18);
      }

      *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40) = 0;
    }
    else
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102199258);
      v9 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "CLMM,dispatchGroup is unexpectedly nil", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_102199258);
        LOWORD(v22) = 0;
        LODWORD(v21) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,dispatchGroup is unexpectedly nil", &v22, v21);
        v20 = (uint8_t *)v19;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)_block_invoke", "%s\n", v19);
        if (v20 != buf)
          free(v20);
      }
    }
  }
}

void sub_10100BDA4()
{
  operator delete();
}

__n128 sub_10100BDB8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = off_102199288;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_10100BDF8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_102199288;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

id sub_10100BE20(uint64_t a1, _QWORD *a2)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 8) + 2600), "findRoadsNear:radius:handler:completionHandler:", **(_QWORD **)(a1 + 24), *a2, **(double **)(a1 + 16), *(double *)(*(_QWORD *)(a1 + 16) + 8), 10.0);
}

uint64_t sub_10100BE44(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10100BE80()
{
}

void sub_10100BE90()
{
  operator delete();
}

__n128 sub_10100BEA4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = off_102199308;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_10100BEE4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_102199308;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

id sub_10100BF0C(uint64_t a1, _QWORD *a2)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 8) + 2600), "findRoadsNear:radius:handler:completionHandler:", **(_QWORD **)(a1 + 32), *a2, **(double **)(a1 + 16), *(double *)(*(_QWORD *)(a1 + 16) + 8), **(double **)(a1 + 24));
}

uint64_t sub_10100BF30(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10100BF6C()
{
}

void sub_10100BF7C()
{
  operator delete();
}

__n128 sub_10100BF90(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = off_102199388;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_10100BFD0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_102199388;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

id sub_10100BFF8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  v4 = **(unsigned __int8 **)(a1 + 8);
  v5 = *(void **)(*(_QWORD *)(a1 + 16) + 2600);
  v6 = **(_QWORD **)(a1 + 24);
  v7 = **(_QWORD **)(a1 + 32);
  if (v4)
    return _objc_msgSend(v5, "findRoadsFromNextIntersectionOf:handler:completionHandler:", v6, v7, v3);
  else
    return _objc_msgSend(v5, "findRoadsFromPreviousIntersectionOf:handler:completionHandler:", v6, v7, v3);
}

uint64_t sub_10100C024(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10100C060()
{
}

uint64_t *sub_10100C06C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v6;
  __int128 v7;

  v4 = a2;
  v6 = (uint64_t *)a1[1];
  if (a2 != a3 && v6 != a1)
  {
    do
    {
      sub_100349198(v6 + 2, (uint64_t *)(v4 + 16));
      v7 = *(_OWORD *)(v4 + 32);
      *((_BYTE *)v6 + 48) = *(_BYTE *)(v4 + 48);
      *((_OWORD *)v6 + 2) = v7;
      v4 = *(_QWORD *)(v4 + 8);
      v6 = (uint64_t *)v6[1];
    }
    while (v4 != a3 && v6 != a1);
  }
  if (v6 == a1)
    return sub_10100C10C((uint64_t)a1, a1, v4, a3);
  else
    return sub_10100C254((uint64_t)a1, v6, a1);
}

uint64_t *sub_10100C10C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;
  uint64_t v21;

  if (a3 != a4)
  {
    v8 = operator new(0x38uLL);
    v9 = v8;
    *v8 = 0;
    v8[1] = 0;
    v10 = *(_QWORD *)(a3 + 24);
    v8[2] = *(_QWORD *)(a3 + 16);
    v8[3] = v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    v13 = *(_OWORD *)(a3 + 32);
    *((_BYTE *)v8 + 48) = *(_BYTE *)(a3 + 48);
    *((_OWORD *)v8 + 2) = v13;
    v14 = *(_QWORD *)(a3 + 8);
    v15 = 1;
    if (v14 != a4)
    {
      v16 = v8;
      do
      {
        v8 = operator new(0x38uLL);
        *v8 = v16;
        v8[1] = 0;
        v17 = *(_QWORD *)(v14 + 24);
        v8[2] = *(_QWORD *)(v14 + 16);
        v8[3] = v17;
        if (v17)
        {
          v18 = (unint64_t *)(v17 + 8);
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
        }
        v20 = *(_OWORD *)(v14 + 32);
        *((_BYTE *)v8 + 48) = *(_BYTE *)(v14 + 48);
        *((_OWORD *)v8 + 2) = v20;
        v16[1] = v8;
        ++v15;
        v14 = *(_QWORD *)(v14 + 8);
        v16 = v8;
      }
      while (v14 != a4);
    }
    v21 = *a2;
    *(_QWORD *)(v21 + 8) = v9;
    *v9 = v21;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(_QWORD *)(a1 + 16) += v15;
    return v9;
  }
  return a2;
}

void sub_10100C22C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  sub_10193A3F8(v1);
  __cxa_rethrow();
}

void sub_10100C240(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_10100C254(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  if (a2 != a3)
  {
    v4 = a2;
    v6 = *a3;
    v7 = *a2;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(*a3 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    do
    {
      v8 = (_QWORD *)v4[1];
      --*(_QWORD *)(a1 + 16);
      sub_100261F44((uint64_t)(v4 + 2));
      operator delete(v4);
      v4 = v8;
    }
    while (v8 != a3);
  }
  return a3;
}

void sub_10100C2D4()
{
  operator delete();
}

__n128 sub_10100C2E8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = off_102199408;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_10100C328(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_102199408;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

id sub_10100C350(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  v4 = **(unsigned __int8 **)(a1 + 8);
  v5 = *(void **)(*(_QWORD *)(a1 + 16) + 2600);
  v6 = **(_QWORD **)(a1 + 24);
  v7 = **(_QWORD **)(a1 + 32);
  if (v4)
    return _objc_msgSend(v5, "findRoadsToNextIntersectionOf:handler:completionHandler:", v6, v7, v3);
  else
    return _objc_msgSend(v5, "findRoadsToPreviousIntersectionOf:handler:completionHandler:", v6, v7, v3);
}

uint64_t sub_10100C37C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10100C3B8()
{
}

_QWORD *sub_10100C3C4@<X0>(uint64_t *a1@<X1>, char *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x30uLL);
  result = sub_10100C424(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_10100C410(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10100C424(_QWORD *a1, uint64_t *a2, char *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = off_102199488;
  a1[1] = 0;
  sub_10100C4DC((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_10100C474(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10100C488(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102199488;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10100C49C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102199488;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10100C4D0(uint64_t a1)
{
  return sub_100261F44(a1 + 24);
}

void sub_10100C4DC(uint64_t a1, uint64_t a2, uint64_t *a3, char *a4)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  v4 = *a3;
  v5 = (std::__shared_weak_count *)a3[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *a4;
    *(_QWORD *)a2 = v4;
    *(_QWORD *)(a2 + 8) = v5;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_BYTE *)(a2 + 16) = v8;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    v11 = *a4;
    *(_QWORD *)a2 = v4;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 16) = v11;
  }
}

void sub_10100C570()
{
  operator delete();
}

__n128 sub_10100C584(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = off_1021994D8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_10100C5C4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1021994D8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

id sub_10100C5EC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  v4 = **(unsigned __int8 **)(a1 + 8);
  v5 = *(void **)(*(_QWORD *)(a1 + 16) + 2600);
  v6 = **(_QWORD **)(a1 + 24);
  v7 = **(_QWORD **)(a1 + 32);
  if (v4)
    return _objc_msgSend(v5, "findRoadsToPreviousIntersectionOf:handler:completionHandler:", v6, v7, v3);
  else
    return _objc_msgSend(v5, "findRoadsFromNextIntersectionOf:handler:completionHandler:", v6, v7, v3);
}

uint64_t sub_10100C618(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10100C654()
{
}

uint64_t sub_10100C660(uint64_t result)
{
  *(_QWORD *)(result + 160) = 0;
  return result;
}

uint64_t sub_10100C66C(uint64_t result)
{
  *(_QWORD *)(result + 160) = 0x3FDAAAAAAAAAAAABLL;
  return result;
}

uint64_t sub_10100C680(uint64_t result)
{
  *(_QWORD *)(result + 160) = 0x400AAAAAAAAAAAABLL;
  return result;
}

uint64_t sub_10100C694(uint64_t result)
{
  *(_QWORD *)(result + 160) = 0x400AAAAAAAAAAAABLL;
  return result;
}

uint64_t sub_10100C6A8(uint64_t result)
{
  *(_QWORD *)(result + 160) = 0;
  return result;
}

uint64_t sub_10100C6B0(uint64_t result)
{
  *(_QWORD *)(result + 160) = 0;
  return result;
}

uint64_t sub_10100C6B8(uint64_t result)
{
  *(_QWORD *)(result + 160) = 0;
  return result;
}

uint64_t sub_10100C6C0(uint64_t result)
{
  *(_QWORD *)(result + 160) = 0;
  return result;
}

uint64_t sub_10100C6C8(uint64_t result)
{
  *(_QWORD *)(result + 160) = 0;
  return result;
}

uint64_t sub_10100C6D0(uint64_t result)
{
  *(_QWORD *)(result + 160) = 0;
  return result;
}

uint64_t sub_10100C6D8(uint64_t result)
{
  *(_QWORD *)(result + 160) = 0x3FDAAAAAAAAAAAABLL;
  return result;
}

__n128 sub_10100C6EC(uint64_t a1)
{
  __n128 result;

  *(_QWORD *)a1 = &unk_102199548;
  *(_QWORD *)(a1 + 8) = 40;
  *(_WORD *)(a1 + 16) = 512;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 88) = -1;
  __asm { FMOV            V0.2D, #-1.0 }
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  return result;
}

BOOL sub_10100C744(uint64_t a1, double *a2)
{
  unsigned __int8 v4;
  unint64_t v5;
  double v6;
  double v7;
  _BOOL8 result;
  __n128 v9;
  uint64_t v10;
  _QWORD v11[19];
  __int16 v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _QWORD v17[4];
  __n128 v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[25];
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  int v44;
  uint64_t v45;
  __int16 v46;
  __int128 v47;
  __int128 v48;
  char v49;
  _BYTE v50[11];
  int v51;
  unint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  unint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  unint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  char v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  unint64_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  int v101;
  unint64_t v102;
  __int16 v103;
  int v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;

  *(_DWORD *)(a1 + 88) = *(unsigned __int8 *)(a1 + 16);
  *(int8x16_t *)(a1 + 96) = vextq_s8(*(int8x16_t *)(a1 + 152), *(int8x16_t *)(a1 + 152), 8uLL);
  v4 = atomic_load((unsigned __int8 *)&qword_10230BA18);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_10230BA18))
  {
    *(_OWORD *)v11 = xmmword_101C3ABD0;
    sub_100546300(qword_10230BA00, v11, 4uLL);
    __cxa_atexit((void (*)(void *))sub_100546380, qword_10230BA00, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10230BA18);
  }
  v12 = 0;
  *(_OWORD *)v11 = xmmword_101BB1ED0;
  memset(&v11[2], 0, 135);
  v13 = xmmword_101BB1ED0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17[0] = 0;
  *(_QWORD *)((char *)v17 + 5) = 0;
  *(_QWORD *)((char *)&v17[1] + 6) = 0;
  v18 = 0uLL;
  v19 = 0;
  v17[3] = 0;
  v20 = xmmword_101BB1ED0;
  v21 = 0;
  v22 = 0;
  v23 = 0xFFEFFFFFFFFFFFFFLL;
  v34 = 0;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  memset(v33, 0, sizeof(v33));
  v35 = 0;
  v36 = 0;
  v37 = 0xFFEFFFFFFFFFFFFFLL;
  v38 = 0;
  v39 = 0;
  v45 = 0;
  v46 = 0;
  v51 = 0;
  v44 = 0;
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v48 = 0u;
  v47 = 0u;
  v49 = 0;
  memset(v50, 0, sizeof(v50));
  v52 = 0xFFEFFFFFFFFFFFFFLL;
  v71 = 0u;
  v70 = 0u;
  v69 = 0u;
  v68 = 0u;
  v67 = 0u;
  v66 = 0u;
  v65 = 0u;
  v64 = 0u;
  v63 = 0u;
  v62 = 0u;
  v61 = 0u;
  v60 = 0u;
  v59 = 0u;
  v58 = 0u;
  v57 = 0u;
  v56 = 0u;
  v55 = 0u;
  v54 = 0u;
  v53 = 0u;
  v72 = 0;
  v73 = 0xFFEFFFFFFFFFFFFFLL;
  v74 = 0u;
  v75 = 0u;
  v76 = 0u;
  v77 = 0u;
  v78 = 0xFFEFFFFFFFFFFFFFLL;
  v79 = 0;
  v80 = 0;
  v81 = 0;
  v82 = 0;
  v83 = 0xFFEFFFFFFFFFFFFFLL;
  v85 = 0;
  v84 = 0;
  v86 = 0x80000000800000;
  v88 = 0;
  v87 = 0;
  v89 = xmmword_101BB1EE0;
  v90 = 0x80000000800000;
  v91 = 0u;
  v92 = 0u;
  v93 = 0;
  v94 = 0xFFEFFFFFFFFFFFFFLL;
  v95 = 0u;
  v96 = 0u;
  v97 = 0u;
  v98 = 0u;
  v99 = 0u;
  v100 = 0u;
  v101 = 0;
  v102 = 0xFFEFFFFFFFFFFFFFLL;
  v103 = 0;
  v104 = 0;
  v105 = 0xFFEFFFFFFFFFFFFFLL;
  v106 = 7;
  v107 = 0xFFEFFFFFFFFFFFFFLL;
  v108 = 0;
  v110 = 0;
  v109 = 0;
  v111 = 0;
  sub_1000D03AC(a2, qword_10230BA00, (uint64_t)v11);
  sub_10100CB88((_QWORD *)a1, (uint64_t)v11);
  if (*((double *)&v20 + 1) != -1.79769313e308)
  {
    v9 = v18;
    v10 = *((_QWORD *)&v20 + 1);
    sub_10100CBD8((_QWORD *)(a1 + 176), &v9);
  }
  v5 = *(_QWORD *)(a1 + 216);
  if (v5 >= 0x10)
  {
    ++*(_QWORD *)(a1 + 208);
    *(_QWORD *)(a1 + 216) = v5 - 1;
    sub_10047FDC4(a1 + 176, 1);
  }
  sub_10100CC84(a1, (uint64_t)a2, (uint64_t)v11);
  sub_10100D3F4(a1);
  if (*(double *)(a1 + 120) <= 20.0)
  {
    v6 = *(double *)(a1 + 152);
    if (v6 != 0.0)
    {
LABEL_11:
      v7 = *(double *)(a1 + 168) + 2.55999994;
      *(double *)(a1 + 168) = v7;
      goto LABEL_12;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 152) = 0;
    v6 = 0.0;
  }
  if (*(double *)(a1 + 160) <= 0.0)
    goto LABEL_11;
  *(_QWORD *)(a1 + 168) = 0;
  v7 = 0.0;
LABEL_12:
  if (*(double *)(a1 + 128) > 60.0 || *(double *)(a1 + 112) > 300.0)
  {
    v6 = v6 + *(double *)(a1 + 160) * 2.55999994;
    *(double *)(a1 + 152) = v6;
  }
  result = 0;
  if (v6 > 100.0 && v7 > 300.0)
    return *(double *)(a1 + 136) > 15.0;
  return result;
}

void sub_10100CB68(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10230BA18);
  _Unwind_Resume(a1);
}

uint64_t sub_10100CB88(_QWORD *a1, uint64_t a2)
{
  int v4;
  uint64_t v6;
  int v7;

  v4 = *(_DWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = v4;
  sub_10100D490(a1, &v6);
  sub_10100D630((uint64_t)a1);
  return sub_10100D69C((uint64_t)a1, a2);
}

__n128 sub_10100CBD8(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 *v8;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10100DA9C(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = (__n128 *)(*(_QWORD *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  result = *a2;
  v8[1].n128_u64[0] = a2[1].n128_u64[0];
  *v8 = result;
  ++a1[5];
  return result;
}

void sub_10100CC84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6;
  int v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  uint64_t v12;
  int v13;
  _BOOL4 v14;
  _BOOL4 v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  char *v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  _BOOL4 v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  char *v36;
  uint64_t v37;
  const char *v38;
  char *v39;
  int v40;
  _BYTE v41[28];
  _BYTE v42[12];
  __int128 v43;
  _BYTE v44[10];
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  int v48;
  _BYTE buf[20];
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  _BOOL4 v59;
  __int16 v60;
  int v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  int v67;

  *(_DWORD *)(a1 + 48) = *(unsigned __int8 *)(a1 + 16);
  if (*(double *)(a1 + 112) > 0.0)
    sub_10023195C(a1, 6, (uint64_t)buf);
  v6 = *(double *)(a3 + 1328);
  if (v6 == -1.79769313e308)
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102199908);
    v11 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *(_QWORD *)(a2 + 296);
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Failure to get cycling result, %f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102199908);
      v37 = *(_QWORD *)(a2 + 296);
      v40 = 134217984;
      *(_QWORD *)v41 = v37;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Failure to get cycling result, %f", COERCE_DOUBLE(&v40));
      v39 = (char *)v38;
      sub_100512490("Generic", 1, 0, 2, "void CLOutdoorCycleWorkoutStopDetector::setStopCounterUpdateRate(const CLWorkoutPredictorInputs &, const CLWorkoutPredictorInputs::Items &)", "%s\n", v38);
      if (v39 != buf)
        free(v39);
    }
    sub_10023195C(a1, 4, (uint64_t)buf);
  }
  else
  {
    v7 = *(_DWORD *)(a3 + 1336);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102199908);
    v8 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134218240;
      *(double *)&buf[4] = v6;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "CLOutdoorCycleWorkoutStopDetector,cyclingSource,%f,%d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102199908);
      v40 = 134218240;
      *(double *)v41 = v6;
      *(_WORD *)&v41[8] = 1024;
      *(_DWORD *)&v41[10] = v7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 1, "CLOutdoorCycleWorkoutStopDetector,cyclingSource,%f,%d", COERCE_DOUBLE(&v40), 18);
      v26 = (char *)v25;
      sub_100512490("Generic", 1, 0, 2, "void CLOutdoorCycleWorkoutStopDetector::setStopCounterUpdateRate(const CLWorkoutPredictorInputs &, const CLWorkoutPredictorInputs::Items &)", "%s\n", v25);
      if (v26 != buf)
        free(v26);
    }
    switch(v7)
    {
      case 0:
      case 9:
      case 11:
        *(_QWORD *)buf = *(_QWORD *)(a2 + 296);
        *(_QWORD *)&buf[8] = a2 + 328;
        v9 = a1;
        v10 = 0;
        goto LABEL_23;
      case 1:
      case 10:
      case 14:
        v9 = a1;
        v10 = 2;
        goto LABEL_23;
      case 2:
        v9 = a1;
        v10 = 3;
        goto LABEL_23;
      case 3:
      case 13:
        v9 = a1;
        v10 = 8;
        goto LABEL_23;
      case 4:
      case 6:
      case 12:
        v9 = a1;
        v10 = 1;
        goto LABEL_23;
      case 5:
        v9 = a1;
        v10 = 7;
        goto LABEL_23;
      case 7:
        v9 = a1;
        v10 = 4;
LABEL_23:
        sub_10023195C(v9, v10, (uint64_t)buf);
        break;
      default:
        break;
    }
    if (*(double *)(a1 + 80) > 50.0
      && *(double *)(a1 + 56) > 70.0
      && (*(double *)(a3 + 288) == -1.79769313e308 || *(double *)(a3 + 328) <= -1.0))
    {
      sub_10023195C(a1, 5, (uint64_t)buf);
    }
    if (*(double *)(a1 + 144) > 120.0)
      sub_10023195C(a1, 9, (uint64_t)buf);
    v13 = *(unsigned __int8 *)(a1 + 16);
    v14 = *(double *)(a3 + 328) > -1.0 && *(double *)(a3 + 288) != -1.79769313e308;
    v15 = *(double *)(a3 + 240) >= 0.8 && *(double *)(a3 + 264) != -1.79769313e308;
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102199908);
    v16 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_INFO))
    {
      v17 = *(_QWORD *)(a3 + 232);
      v18 = *(_QWORD *)(a3 + 240);
      v19 = *(_QWORD *)(a1 + 152);
      v20 = *(_QWORD *)(a1 + 160);
      v21 = *(double *)(a3 + 8) != -1.79769313e308;
      v22 = *(_DWORD *)(a3 + 24);
      v23 = *(_QWORD *)(a1 + 56);
      v24 = *(_QWORD *)(a1 + 80);
      *(_DWORD *)buf = 67111936;
      *(_DWORD *)&buf[4] = v13;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v14;
      *(_WORD *)&buf[14] = 1024;
      *(_DWORD *)&buf[16] = v15;
      v50 = 2048;
      v51 = v17;
      v52 = 2048;
      v53 = v18;
      v54 = 2048;
      v55 = v19;
      v56 = 2048;
      v57 = v20;
      v58 = 1024;
      v59 = v21;
      v60 = 1024;
      v61 = v22;
      v62 = 2048;
      v63 = v23;
      v64 = 2048;
      v65 = v24;
      v66 = 1024;
      v67 = v7;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "OutdoorCycleStop,state,%d,hasGPS,%d,hasHR,%d,hr,%f,hrConf,%f,stopCounter,%f,fStopCounterUpdateRate,%f,hasTier1,%d,tier1Type,%d,percentNonCycleinBuffer,%f,percentModelTier1Concordant,%f,cyclieState,%d", buf, 0x62u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102199908);
      v27 = *(_QWORD *)(a3 + 232);
      v28 = *(double *)(a3 + 240);
      v29 = *(_QWORD *)(a1 + 152);
      v30 = *(_QWORD *)(a1 + 160);
      v31 = *(double *)(a3 + 8) != -1.79769313e308;
      v32 = *(_DWORD *)(a3 + 24);
      v33 = *(_QWORD *)(a1 + 56);
      v34 = *(_QWORD *)(a1 + 80);
      *(_WORD *)&v41[4] = 1024;
      *(_DWORD *)&v41[6] = v14;
      *(_WORD *)&v41[10] = 1024;
      *(_DWORD *)&v41[12] = v15;
      *(_WORD *)&v41[16] = 2048;
      *(_QWORD *)&v41[18] = v27;
      *(_WORD *)&v41[26] = 2048;
      *(_WORD *)v42 = 2048;
      *(_QWORD *)&v42[2] = v29;
      *(_WORD *)&v42[10] = 2048;
      LODWORD(v43) = HIDWORD(v30);
      WORD2(v43) = 1024;
      *(_DWORD *)((char *)&v43 + 6) = v31;
      WORD5(v43) = 1024;
      HIDWORD(v43) = v32;
      *(_WORD *)v44 = 2048;
      *(_QWORD *)&v44[2] = v33;
      v45 = 2048;
      v46 = v34;
      v47 = 1024;
      v48 = v7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 1, "OutdoorCycleStop,state,%d,hasGPS,%d,hasHR,%d,hr,%f,hrConf,%f,stopCounter,%f,fStopCounterUpdateRate,%f,hasTier1,%d,tier1Type,%d,percentNonCycleinBuffer,%f,percentModelTier1Concordant,%f,cyclieState,%d", &v40, 98, 67111936, *(double *)&v41[4], *(double *)&v41[12], *(double *)&v41[20], v28, *(_DWORD *)v42, *(_DWORD *)&v42[8], *(double *)&v43,
        *((double *)&v43 + 1),
        *(_DWORD *)v44);
      v36 = (char *)v35;
      sub_100512490("Generic", 1, 0, 2, "void CLOutdoorCycleWorkoutStopDetector::setStopCounterUpdateRate(const CLWorkoutPredictorInputs &, const CLWorkoutPredictorInputs::Items &)", "%s\n", v35);
      if (v36 != buf)
        free(v36);
    }
  }
}

uint64_t sub_10100D3F4(uint64_t result)
{
  int v1;
  double v2;
  double v3;
  double v4;
  double v5;

  *(double *)(result + 112) = *(double *)(result + 112) + 2.55999994;
  v1 = *(unsigned __int8 *)(result + 16);
  if (v1 == 6)
  {
    v2 = 0.0;
    if (*(_DWORD *)(result + 88) == 6)
      v2 = *(double *)(result + 120) + 2.55999994;
    *(double *)(result + 120) = v2;
    v3 = *(double *)(result + 128) + 2.55999994;
  }
  else
  {
    *(_QWORD *)(result + 120) = 0;
    v3 = *(double *)(result + 128);
  }
  *(double *)(result + 128) = v3;
  v4 = 0.0;
  v5 = 0.0;
  if (*(double *)(result + 160) > 0.0)
  {
    v5 = 0.0;
    if (*(double *)(result + 96) > 0.0)
      v5 = *(double *)(result + 136) + 2.55999994;
  }
  *(double *)(result + 136) = v5;
  if (v1 == 4)
    v4 = *(double *)(result + 144) + 2.55999994;
  *(double *)(result + 144) = v4;
  return result;
}

void sub_10100D490(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _OWORD *v8;
  unint64_t *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  unint64_t *v21;
  double v22;
  unint64_t *v23;

  v4 = *a2;
  v7 = a1[5];
  v5 = (uint64_t)(a1 + 5);
  v6 = v7;
  v8 = *(_OWORD **)(v5 - 8);
  if ((unint64_t)v8 >= v7)
  {
    v10 = (void **)(v5 - 16);
    v11 = *(_QWORD *)(v5 - 16);
    v12 = ((uint64_t)v8 - v11) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      sub_100259694();
    v14 = v6 - v11;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
      v16 = (char *)sub_10028E224(v5, v15);
    else
      v16 = 0;
    v17 = &v16[16 * v12];
    v18 = &v16[16 * v15];
    *(_OWORD *)v17 = *(_OWORD *)a2;
    v9 = (unint64_t *)(v17 + 16);
    v20 = (char *)a1[3];
    v19 = (char *)a1[4];
    if (v19 != v20)
    {
      do
      {
        *((_OWORD *)v17 - 1) = *((_OWORD *)v19 - 1);
        v17 -= 16;
        v19 -= 16;
      }
      while (v19 != v20);
      v19 = (char *)*v10;
    }
    a1[3] = v17;
    a1[4] = v9;
    a1[5] = v18;
    if (v19)
      operator delete(v19);
  }
  else
  {
    *v8 = *(_OWORD *)a2;
    v9 = (unint64_t *)(v8 + 1);
  }
  a1[4] = v9;
  v21 = (unint64_t *)a1[3];
  if (v21 != v9)
  {
    v22 = (double)(unint64_t)(v4 - 60000000);
    while (v22 <= (double)*v21)
    {
      v21 += 2;
      if (v21 == v9)
        return;
    }
    if (v21 != v9)
    {
      v23 = v21 + 2;
      if (v21 + 2 != v9)
      {
        do
        {
          if (v22 <= (double)*v23)
          {
            *(_OWORD *)v21 = *(_OWORD *)v23;
            v21 += 2;
          }
          v23 += 2;
        }
        while (v23 != v9);
        v9 = (unint64_t *)a1[4];
      }
    }
    if (v21 != v9)
      a1[4] = v21;
  }
}

uint64_t sub_10100D630(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(result + 24);
  v1 = *(_QWORD *)(result + 32);
  v3 = -1.0;
  if (v1 != v2 && *(_QWORD *)(v1 - 16) - *(_QWORD *)v2 >= 0x337F980uLL)
  {
    v4 = 0;
    v5 = (v1 - v2) >> 4;
    do
    {
      if ((*(_DWORD *)(v2 + 8) & 0xFFFFFF7F) != 0)
        ++v4;
      v2 += 16;
    }
    while (v2 != v1);
    v3 = (double)v4 * 100.0 / (double)(unint64_t)v5;
  }
  *(double *)(result + 56) = v3;
  return result;
}

uint64_t sub_10100D69C(uint64_t result, uint64_t a2)
{
  double v2;

  if (*(_DWORD *)(result + 48) == 6)
  {
    ++*(_DWORD *)(result + 64);
    if (*(_DWORD *)(a2 + 24) != 128)
    {
LABEL_4:
      ++*(_DWORD *)(result + 72);
      goto LABEL_6;
    }
LABEL_3:
    ++*(_DWORD *)(result + 68);
    goto LABEL_4;
  }
  if (*(_BYTE *)(result + 16) != 7)
  {
    if (*(_DWORD *)(a2 + 24) == 128)
      goto LABEL_4;
    goto LABEL_3;
  }
LABEL_6:
  v2 = -1.0;
  if (*(int *)(result + 64) >= 47)
    v2 = (double)*(int *)(result + 68) * 100.0 / (double)*(int *)(result + 72);
  *(double *)(result + 80) = v2;
  return result;
}

double sub_10100D72C(_QWORD *a1, uint64_t a2, double a3)
{
  uint64_t v3;
  double v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;

  v3 = a1[23];
  v4 = 0.0;
  if (a1[24] != v3)
  {
    v5 = a1[26];
    v6 = v5 + a1[27];
    v7 = (uint64_t *)(v3 + 8 * (v6 / 0xAA));
    v8 = *v7;
    v9 = *v7 + 24 * (v6 % 0xAA);
    v10 = *(_QWORD *)(v3 + 8 * (v5 / 0xAA)) + 24 * (v5 % 0xAA);
    if (v9 != v10)
    {
      v4 = 0.0;
      do
      {
        v11 = v9;
        if (v9 == v8)
          v11 = *(v7 - 1) + 4080;
        v12 = *(double *)(v11 - 8);
        if (v12 >= a3 + -30.0 && v12 <= a3 && *(double *)(v11 - 16) >= 0.800000012 && *(double *)(v11 - 24) > v4)
          v4 = *(double *)(v11 - 24);
        if (v9 == v8)
        {
          v13 = *--v7;
          v8 = v13;
          v9 = v13 + 4080;
        }
        v9 -= 24;
      }
      while (v9 != v10);
    }
  }
  return 1.0 - (*(float *)(a2 + 28) - v4) / (*(float *)(a2 + 28) - *(float *)(a2 + 24));
}

BOOL sub_10100D828(_QWORD *a1, uint64_t a2)
{
  double v3;
  NSObject *v4;
  uint64_t v5;
  double v6;
  double v7;
  uint64_t v9;
  double v10;
  double v11;
  const char *v12;
  uint8_t *v13;
  double v14;
  int v15;
  double v16;
  __int16 v17;
  double v18;
  __int16 v19;
  double v20;
  __int16 v21;
  _BOOL4 v22;
  uint8_t buf[4];
  double v24;
  __int16 v25;
  double v26;
  __int16 v27;
  double v28;
  __int16 v29;
  _BOOL4 v30;

  v3 = sub_10100D72C(a1, *(_QWORD *)(a2 + 8), *(double *)a2);
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102199908);
  v4 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_INFO))
  {
    v5 = *(_QWORD *)(a2 + 8);
    v6 = *(float *)(v5 + 24);
    v7 = *(float *)(v5 + 28);
    *(_DWORD *)buf = 134218752;
    v24 = v3;
    v25 = 2048;
    v26 = v6;
    v27 = 2048;
    v28 = v7;
    v29 = 1024;
    v30 = v3 <= 0.649999976;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "OutdoorCycleStop,HRExertionCheck,hrExertion,%f,minHr,%f,maxHr,%f,shouldTransition,%d", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102199908);
    v9 = *(_QWORD *)(a2 + 8);
    v10 = *(float *)(v9 + 24);
    v11 = *(float *)(v9 + 28);
    v15 = 134218752;
    v16 = v3;
    v17 = 2048;
    v18 = v10;
    v19 = 2048;
    v20 = v11;
    v21 = 1024;
    v22 = v3 <= 0.649999976;
    LODWORD(v14) = 38;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 1, "OutdoorCycleStop,HRExertionCheck,hrExertion,%f,minHr,%f,maxHr,%f,shouldTransition,%d", COERCE_DOUBLE(&v15), v14);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLOutdoorCycleWorkoutStopDetector::isLowHRExertion(const ENoStepsNoSpeed *) const", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  return v3 <= 0.649999976;
}

void sub_10100DA70(id a1)
{
  qword_10229FE68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_10100DA9C(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0xAA;
  v4 = v2 - 170;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_10100DD64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_10100DDB0(uint64_t a1, uint64_t *a2, int a3, uint64_t *a4, int a5)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v21;
  int *v22;
  int v23;
  int v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  NSObject *v28;
  int v29;
  int v31;
  const char *v32;
  uint8_t *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  _DWORD v36[4];
  uint8_t buf[8];
  std::__shared_weak_count *v38;

  *(_OWORD *)a1 = xmmword_101C3ABF0;
  *(_QWORD *)(a1 + 16) = 0;
  *(int64x2_t *)(a1 + 24) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  sub_100B688F0(a1 + 72);
  *(_DWORD *)(a1 + 888) = a5;
  sub_100AD27B4(a1 + 896, ((a5 - 82) & 0xFFFFFFF9) == 0);
  v10 = (std::__shared_weak_count *)a2[1];
  v34 = *a2;
  v35 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  sub_101108E08(a1 + 1144, &v34);
  v13 = v35;
  if (v35)
  {
    v14 = (unint64_t *)&v35->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  *(_QWORD *)(a1 + 1264) = 0;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_OWORD *)(a1 + 1272) = xmmword_101C3AC28;
  *(_OWORD *)(a1 + 1288) = unk_101C3AC38;
  *(_OWORD *)(a1 + 1304) = xmmword_101C3AC48;
  *(_OWORD *)(a1 + 1316) = *(__int128 *)((char *)&xmmword_101C3AC48 + 12);
  *(_DWORD *)(a1 + 1332) = 0;
  *(_DWORD *)(a1 + 1340) = -1082130432;
  *(_BYTE *)(a1 + 1344) = 0;
  __asm { FMOV            V1.4S, #-1.0 }
  *(_OWORD *)(a1 + 1348) = _Q1;
  *(_OWORD *)(a1 + 1364) = _Q1;
  *(_OWORD *)(a1 + 1380) = _Q1;
  *(_OWORD *)(a1 + 1396) = _Q1;
  *(_OWORD *)(a1 + 1412) = _Q1;
  *(_OWORD *)(a1 + 1428) = _Q1;
  *(_OWORD *)(a1 + 1444) = _Q1;
  *(_DWORD *)(a1 + 1460) = -1082130432;
  *(_QWORD *)(a1 + 1464) = -1;
  *(_QWORD *)(a1 + 1472) = -1;
  *(_OWORD *)(a1 + 1480) = _Q1;
  *(_OWORD *)(a1 + 1496) = _Q1;
  __asm { FMOV            V1.2S, #-1.0 }
  *(_QWORD *)(a1 + 1512) = _Q1;
  *(_QWORD *)(a1 + 1520) = 66;
  *(_DWORD *)(a1 + 1528) = 0;
  *(_QWORD *)(a1 + 1536) = 0;
  *(_QWORD *)(a1 + 1541) = 0;
  *(_QWORD *)(a1 + 1568) = 0;
  *(_QWORD *)(a1 + 1552) = 0;
  *(_QWORD *)(a1 + 1560) = 0;
  *(_DWORD *)(a1 + 1576) = -1082130432;
  *(_BYTE *)(a1 + 1580) = 0;
  *(_QWORD *)(a1 + 1584) = _Q1;
  *(_DWORD *)(a1 + 1592) = a3;
  *(_DWORD *)(a1 + 1596) = 0;
  *(_QWORD *)(a1 + 1600) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 1608) = 0u;
  *(_OWORD *)(a1 + 1624) = 0u;
  sub_101219438(a1 + 1640);
  *(_QWORD *)(a1 + 1688) = 1;
  uuid_clear((unsigned __int8 *)(a1 + 40));
  uuid_clear((unsigned __int8 *)(a1 + 56));
  sub_100349198((_QWORD *)(a1 + 1232), a4);
  v21 = sub_100127B9C();
  sub_100081C10(v21, buf);
  v22 = (int *)(a1 + 1688);
  v23 = sub_1001E4B84(*(uint64_t *)buf, "VO2MaxMinPreviousEstimatesForHealthKitWrite", (_DWORD *)(a1 + 1688));
  v24 = v23;
  v25 = v38;
  if (!v38)
    goto LABEL_13;
  v26 = (unint64_t *)&v38->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
    if (!v24)
      return a1;
  }
  else
  {
LABEL_13:
    if (!v23)
      return a1;
  }
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_102199928);
  v28 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    v29 = *v22;
    *(_DWORD *)buf = 67174657;
    *(_DWORD *)&buf[4] = v29;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "VO2Max,fMinPreviousEstimatesForHealthKitWrite,%{private}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102199928);
    v31 = *v22;
    v36[0] = 67174657;
    v36[1] = v31;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "VO2Max,fMinPreviousEstimatesForHealthKitWrite,%{private}d", v36, 8, v34);
    v33 = (uint8_t *)v32;
    sub_100512490("Generic", 1, 0, 2, "CLVO2MaxEstimator::CLVO2MaxEstimator(std::shared_ptr<CLVO2MaxInputCache>, CacheInputs, std::shared_ptr<CLMaxMetsRecorderDb>, uint32_t)", "%s\n", v32);
    if (v33 != buf)
      free(v33);
  }
  return a1;
}

void sub_10100E194(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void *v7;

  v7 = (void *)v1[156];
  if (v7)
  {
    v1[157] = v7;
    operator delete(v7);
  }
  sub_100261F44(v5);
  sub_10050C79C(v1 + 148);
  sub_100261F44(v4);
  sub_10100E20C(v3);
  sub_101480AF4(v1 + 17);
  sub_10034111C(v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_10100E20C(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[21];
  if (v2)
  {
    a1[22] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[18];
  if (v3)
  {
    a1[19] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_10100E250(uint64_t a1)
{
  NSObject *v2;
  double Current;
  double v4;
  uint64_t v5;
  NSObject *v6;
  CFAbsoluteTime v7;
  const char *v8;
  uint8_t *v9;
  uint64_t v10;
  CFAbsoluteTime v11;
  const char *v12;
  uint8_t *v13;
  uint64_t v14;
  int v15;
  double v16;
  __int16 v17;
  double v18;
  uint8_t buf[4];
  double v20;
  __int16 v21;
  double v22;

  if (qword_10229FEC0 != -1)
    dispatch_once(&qword_10229FEC0, &stru_102199948);
  v2 = qword_10229FEC8;
  if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Beginning aggregation for VO2Max data", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEC0 != -1)
      dispatch_once(&qword_10229FEC0, &stru_102199948);
    LOWORD(v15) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEC8, 0, "Beginning aggregation for VO2Max data", &v15, 2);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLVO2MaxEstimator::aggregateHistory()", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  Current = CFAbsoluteTimeGetCurrent();
  sub_10110966C((_QWORD *)(a1 + 1144));
  v4 = CFAbsoluteTimeGetCurrent();
  v5 = sub_101125448();
  sub_1011255E0(v5);
  if (qword_10229FEC0 != -1)
    dispatch_once(&qword_10229FEC0, &stru_102199948);
  v6 = qword_10229FEC8;
  if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_DEFAULT))
  {
    v7 = CFAbsoluteTimeGetCurrent();
    *(_DWORD *)buf = 134349312;
    v20 = v4 - Current;
    v21 = 2050;
    v22 = v7 - v4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Aggregation of VO2Max data complete; input duration: %{public}f, output duration: %{public}f",
      buf,
      0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEC0 != -1)
      dispatch_once(&qword_10229FEC0, &stru_102199948);
    v10 = qword_10229FEC8;
    v11 = CFAbsoluteTimeGetCurrent();
    v15 = 134349312;
    v16 = v4 - Current;
    v17 = 2050;
    v18 = v11 - v4;
    LODWORD(v14) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 0, "Aggregation of VO2Max data complete; input duration: %{public}f, output duration: %{public}f",
      &v15,
      v14);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLVO2MaxEstimator::aggregateHistory()", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
}

uint64_t sub_10100E584@<X0>(uint64_t result@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>, double a8@<D2>, double a9@<D3>, double a10@<D4>)
{
  uint64_t v19;
  unint64_t v20;
  unsigned int v22;
  BOOL v23;
  double v24;
  char v25;
  double Current;
  NSObject *v27;
  CFAbsoluteTime v28;
  char *v29;
  char *v30;
  char **v31;
  unint64_t v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  char *v48;
  char *v49;
  char *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  BOOL v54;
  BOOL v55;
  float v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  CFAbsoluteTime v60;
  const char *v61;
  uint8_t *v62;
  void *__p;
  char *v64;
  int v65;
  double v66;
  uint8_t buf[16];
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  _BYTE v72[32];
  double v73;

  if (*(_QWORD *)(result + 16) == 1)
  {
    *(_BYTE *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
    return result;
  }
  v19 = result;
  if (*(_DWORD *)(result + 1596) == 2 && *(double *)(result + 32) + 180.0 < a6)
    sub_10100F028(result);
  sub_100B68F70((int64x2_t *)(v19 + 72), a2, a3, a4, (uint64_t)v72, a6, a7, a8, a9, a10);
  v20 = *(_QWORD *)v19;
  if (*(_QWORD *)(v19 + 16) == 1 || v20 > 0x18)
    v22 = 0;
  else
    v22 = (0x1028006u >> v20) & 1;
  if (v73 == -1.79769313e308)
  {
LABEL_56:
    v23 = 0;
    goto LABEL_57;
  }
  v23 = 0;
  if (v20)
  {
    if (v20 != 26)
    {
      v23 = 0;
      v24 = *(double *)(v19 + 24);
      if (v24 != -1.79769313e308 && v24 < v73)
      {
        if (v73 >= v24 + 3600.0)
        {
          if (*(_DWORD *)(v19 + 1596) == 2)
            v25 = v22;
          else
            v25 = 0;
          if ((v25 & 1) != 0)
            goto LABEL_25;
        }
        else if ((v22 & 1) != 0)
        {
          goto LABEL_25;
        }
        if (*(_DWORD *)(v19 + 1592) == 1)
        {
LABEL_25:
          Current = CFAbsoluteTimeGetCurrent();
          sub_101108E0C((id *)(v19 + 1144), (uint64_t)v72, (char **)&__p);
          if (qword_10229FEC0 != -1)
            dispatch_once(&qword_10229FEC0, &stru_102199948);
          v27 = qword_10229FEC8;
          if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_DEBUG))
          {
            v28 = CFAbsoluteTimeGetCurrent();
            *(_DWORD *)buf = 134349056;
            *(double *)&buf[4] = v28 - Current;
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "Completed insert of input record; duration: %{public}f",
              buf,
              0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FEC0 != -1)
              dispatch_once(&qword_10229FEC0, &stru_102199948);
            v59 = qword_10229FEC8;
            v60 = CFAbsoluteTimeGetCurrent();
            v65 = 134349056;
            v66 = v60 - Current;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v59, 2, "Completed insert of input record; duration: %{public}f",
              &v65,
              12);
            v62 = (uint8_t *)v61;
            sub_100512490("Generic", 1, 0, 2, "std::pair<BOOL, VO2MaxSessionStats> CLVO2MaxEstimator::feedCalorieUpdate(CFAbsoluteTime, double, GradeType, double, BOOL, double, double, BOOL)", "%s\n", v61);
            if (v62 != buf)
              free(v62);
          }
          v29 = (char *)__p;
          if (v22)
          {
            v30 = v64;
            v23 = __p != v64;
            if (__p != v64)
            {
              v31 = (char **)(v19 + 1248);
              do
              {
                sub_100AD2D14(v19 + 896, (uint64_t)v29, (uint64_t)buf);
                if (*(_DWORD *)(v19 + 1596) == 2 && (_DWORD)v71 != 0)
                  LODWORD(v71) = 0;
                v33 = *(_QWORD *)(v19 + 1256);
                v34 = *(_QWORD *)(v19 + 1264);
                if (v33 >= v34)
                {
                  v39 = 0x8E38E38E38E38E39 * ((uint64_t)(v33 - (_QWORD)*v31) >> 3);
                  v40 = v39 + 1;
                  if (v39 + 1 > 0x38E38E38E38E38ELL)
                    sub_100259694();
                  v41 = 0x8E38E38E38E38E39 * ((uint64_t)(v34 - (_QWORD)*v31) >> 3);
                  if (2 * v41 > v40)
                    v40 = 2 * v41;
                  if (v41 >= 0x1C71C71C71C71C7)
                    v42 = 0x38E38E38E38E38ELL;
                  else
                    v42 = v40;
                  if (v42)
                    v43 = (char *)sub_10029D26C(v19 + 1264, v42);
                  else
                    v43 = 0;
                  v44 = &v43[72 * v39];
                  *(_OWORD *)v44 = *(_OWORD *)buf;
                  v45 = v68;
                  v46 = v69;
                  v47 = v70;
                  *((_QWORD *)v44 + 8) = v71;
                  *((_OWORD *)v44 + 2) = v46;
                  *((_OWORD *)v44 + 3) = v47;
                  *((_OWORD *)v44 + 1) = v45;
                  v48 = *(char **)(v19 + 1256);
                  v49 = *(char **)(v19 + 1248);
                  v50 = v44;
                  if (v48 != v49)
                  {
                    do
                    {
                      *(_OWORD *)(v50 - 72) = *(_OWORD *)(v48 - 72);
                      v51 = *(_OWORD *)(v48 - 56);
                      v52 = *(_OWORD *)(v48 - 40);
                      v53 = *(_OWORD *)(v48 - 24);
                      *((_DWORD *)v50 - 2) = *((_DWORD *)v48 - 2);
                      *(_OWORD *)(v50 - 24) = v53;
                      *(_OWORD *)(v50 - 40) = v52;
                      *(_OWORD *)(v50 - 56) = v51;
                      v50 -= 72;
                      v48 -= 72;
                    }
                    while (v48 != v49);
                    v48 = *v31;
                  }
                  *(_QWORD *)(v19 + 1248) = v50;
                  v38 = v44 + 72;
                  *(_QWORD *)(v19 + 1256) = v44 + 72;
                  *(_QWORD *)(v19 + 1264) = &v43[72 * v42];
                  if (v48)
                    operator delete(v48);
                }
                else
                {
                  *(_OWORD *)v33 = *(_OWORD *)buf;
                  v35 = v68;
                  v36 = v69;
                  v37 = v70;
                  *(_QWORD *)(v33 + 64) = v71;
                  *(_OWORD *)(v33 + 32) = v36;
                  *(_OWORD *)(v33 + 48) = v37;
                  *(_OWORD *)(v33 + 16) = v35;
                  v38 = (char *)(v33 + 72);
                }
                *(_QWORD *)(v19 + 1256) = v38;
                v29 += 112;
              }
              while (v29 != v30);
              v23 = 1;
              v29 = (char *)__p;
            }
          }
          else
          {
            v23 = 0;
          }
          if (v29)
          {
            v64 = v29;
            operator delete(v29);
          }
          goto LABEL_57;
        }
        goto LABEL_56;
      }
    }
  }
LABEL_57:
  if (*(_DWORD *)(v19 + 1596) == 2)
  {
    v54 = 0;
    result = 0;
    v55 = 0;
    v56 = 0.0;
    v57 = 0;
  }
  else
  {
    v58 = v19 + 896;
    v57 = *(_QWORD *)(v19 + 928);
    v56 = sub_100AD36E0(v19 + 896);
    v54 = sub_101219820(v19 + 1640) != 0;
    result = sub_100AD36A8(v58);
    v55 = v54 || v23;
  }
  *(_BYTE *)a5 = v55;
  *(_QWORD *)(a5 + 8) = v57;
  *(float *)(a5 + 16) = v56;
  *(_BYTE *)(a5 + 20) = v54;
  *(_BYTE *)(a5 + 21) = result;
  *(_WORD *)(a5 + 22) = 0;
  return result;
}

void sub_10100EB08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float sub_10100EB40(uint64_t a1, uint64_t a2)
{
  double Current;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  float result;

  Current = CFAbsoluteTimeGetCurrent();
  if (*(_DWORD *)(a1 + 1596) == 2 && *(double *)(a1 + 32) + 180.0 < Current)
    sub_10100F028(a1);
  v5 = *(_OWORD *)a2;
  v6 = *(_OWORD *)(a2 + 16);
  v7 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 1316) = *(_OWORD *)(a2 + 44);
  *(_OWORD *)(a1 + 1288) = v6;
  *(_OWORD *)(a1 + 1304) = v7;
  *(_OWORD *)(a1 + 1272) = v5;
  sub_100AD3654(a1 + 896, a2);
  *(_DWORD *)(a1 + 1372) = *(_DWORD *)(a2 + 24);
  result = *(float *)(a2 + 32);
  *(float *)(a1 + 1376) = result;
  return result;
}

void sub_10100EBC8(uint64_t a1, int *a2)
{
  double Current;

  if (*(_QWORD *)(a1 + 16) != 1)
  {
    Current = CFAbsoluteTimeGetCurrent();
    if (*(_DWORD *)(a1 + 1596) == 2 && *(double *)(a1 + 32) + 180.0 < Current)
      sub_10100F028(a1);
    sub_100B688F4((int64x2_t *)(a1 + 72), a2);
  }
}

void sub_10100EC38(uint64_t a1, float a2, float a3)
{
  double Current;

  Current = CFAbsoluteTimeGetCurrent();
  if (*(_DWORD *)(a1 + 1596) == 2 && *(double *)(a1 + 32) + 180.0 < Current)
    sub_10100F028(a1);
  *(float *)(a1 + 1332) = a2;
  sub_100E3F8A4(a1 + 896, a2);
  *(float *)(a1 + 1380) = a2;
  *(float *)(a1 + 1384) = a3;
}

float sub_10100ECAC(uint64_t a1, double a2)
{
  double Current;

  Current = CFAbsoluteTimeGetCurrent();
  if (*(_DWORD *)(a1 + 1596) == 2 && *(double *)(a1 + 32) + 180.0 < Current)
    sub_10100F028(a1);
  return sub_100AD3668((float *)(a1 + 896), a2);
}

float32x2_t sub_10100ED0C(uint64_t a1, float64x2_t *a2)
{
  double Current;
  float v5;
  float32x2_t result;

  Current = CFAbsoluteTimeGetCurrent();
  if (*(_DWORD *)(a1 + 1596) == 2 && *(double *)(a1 + 32) + 180.0 < Current)
    sub_10100F028(a1);
  v5 = a2[1].f64[0];
  *(float *)(a1 + 1360) = v5;
  result = vcvt_f32_f64(*a2);
  *(float32x2_t *)(a1 + 1364) = result;
  return result;
}

double sub_10100ED78@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  int v11;
  double result;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint8_t *v18;
  int v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint8_t buf[4];
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;

  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_102199928);
  v6 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_QWORD *)(a2 + 16);
    v8 = *(_QWORD *)(a2 + 112);
    v9 = *(_QWORD *)(a2 + 224);
    *(_DWORD *)buf = 134218496;
    v26 = v7;
    v27 = 2048;
    v28 = v8;
    v29 = 2048;
    v30 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "VO2Max,workoutEvent,%ld,workoutType,%ld,workoutMode,%ld", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102199928);
    v14 = *(_QWORD *)(a2 + 16);
    v15 = *(_QWORD *)(a2 + 112);
    v16 = *(_QWORD *)(a2 + 224);
    v19 = 134218496;
    v20 = v14;
    v21 = 2048;
    v22 = v15;
    v23 = 2048;
    v24 = v16;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "VO2Max,workoutEvent,%ld,workoutType,%ld,workoutMode,%ld", &v19, 32);
    v18 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 2, "VO2MaxResult CLVO2MaxEstimator::feedWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent &)", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 16);
  uuid_copy((unsigned __int8 *)(a1 + 56), (const unsigned __int8 *)(a2 + 64));
  v10 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 1608) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 1624) = v10;
  *(_QWORD *)a3 = 0x7FEFFFFFFFFFFFFFLL;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0xBFF0000000000000;
  *(_BYTE *)(a3 + 44) = 0;
  *(_DWORD *)(a3 + 68) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  v11 = sub_100F72B18(a2);
  if (v11 == 2)
  {
    if (*(_DWORD *)(a1 + 1596) == 1)
      return sub_10100F208(a1, a2, a3);
  }
  else if (v11 == 1)
  {
    if (*(_DWORD *)(a1 + 1596) == 2)
    {
      sub_10100F028(a1);
      v13 = *(float *)(a1 + 1332);
      if (v13 > 0.0)
        sub_100E3F8A4(a1 + 896, v13);
    }
    sub_100B699AC(a1 + 72, a2);
    sub_10100F138(a1, a2);
  }
  return result;
}

double sub_10100F028(uint64_t a1)
{
  _OWORD *v2;
  int v3;
  int v4;
  double result;

  v2 = (_OWORD *)(a1 + 1348);
  sub_101012818(a1);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(int64x2_t *)(a1 + 24) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  sub_100AD34E4(a1 + 896);
  if (*(float *)(a1 + 1292) > 0.0)
    sub_100AD3654(a1 + 896, a1 + 1272);
  sub_100B68860(a1 + 72);
  sub_101108DE0(a1 + 1144);
  *(_QWORD *)(a1 + 1256) = *(_QWORD *)(a1 + 1248);
  v3 = *(_DWORD *)(a1 + 1296);
  v4 = *(_DWORD *)(a1 + 1304);
  *(_QWORD *)(a1 + 1336) = 0xBF80000000000000;
  *(_BYTE *)(a1 + 1344) = 0;
  __asm { FMOV            V2.4S, #-1.0 }
  *v2 = _Q2;
  *(_QWORD *)(a1 + 1364) = 0xBF800000BF800000;
  *(_DWORD *)(a1 + 1372) = v3;
  *(_DWORD *)(a1 + 1376) = v4;
  v2[2] = _Q2;
  v2[3] = _Q2;
  v2[4] = _Q2;
  v2[5] = _Q2;
  v2[6] = _Q2;
  *(_DWORD *)(a1 + 1460) = -1082130432;
  *(_QWORD *)(a1 + 1464) = -1;
  *(_QWORD *)(a1 + 1472) = -1;
  *(_OWORD *)((char *)v2 + 132) = _Q2;
  *(_OWORD *)((char *)v2 + 148) = _Q2;
  __asm { FMOV            V0.2S, #-1.0 }
  *(double *)(a1 + 1512) = result;
  *(_QWORD *)(a1 + 1520) = 66;
  *(_QWORD *)(a1 + 1541) = 0;
  *(_QWORD *)(a1 + 1528) = 0;
  *(_QWORD *)(a1 + 1536) = 0;
  *(_QWORD *)(a1 + 1568) = 0;
  *(_QWORD *)(a1 + 1552) = 0;
  *(_QWORD *)(a1 + 1560) = 0;
  *(_DWORD *)(a1 + 1576) = -1082130432;
  *(_BYTE *)(a1 + 1580) = 0;
  *(double *)(a1 + 1584) = result;
  *(_DWORD *)(a1 + 1596) = 0;
  return result;
}

void sub_10100F138(uint64_t a1, uint64_t a2)
{
  double v4;
  char v5;
  void *__p;
  void *v7;

  *(_QWORD *)a1 = sub_100F72BB4(*(_QWORD *)(a2 + 112), *(_QWORD *)(a2 + 120));
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 224);
  v4 = *(double *)a2;
  sub_101109468((unsigned __int8 *)(a1 + 56), (uint64_t *)(a1 + 1144), &__p);
  if (v7 != __p && *((double *)__p + 4) < v4)
    v4 = *((double *)__p + 4);
  *(double *)(a1 + 24) = v4;
  *(double *)(a1 + 936) = v4;
  *(_DWORD *)(a1 + 944) = *(_DWORD *)(a2 + 32);
  v5 = sub_101011724(a1);
  sub_10121947C(a1 + 1640, a2, v5);
  *(_DWORD *)(a1 + 1596) = 1;
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
}

void sub_10100F1EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_10100F208(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  double result;

  *(double *)(a1 + 1600) = vabdd_f64(*(double *)(a1 + 928), *(double *)(a1 + 920));
  v6 = sub_10100F294(a1, a3, *(double *)(a2 + 24));
  sub_10121972C((uint64_t *)(a1 + 1640), a2, a3);
  sub_1010117AC(a1, v6, *(double *)(a3 + 16), *(double *)(a2 + 24));
  *(_QWORD *)(a3 + 56) = *(_QWORD *)(a1 + 1600);
  *(_DWORD *)(a3 + 64) = v6;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 32) = result;
  *(_DWORD *)(a1 + 1596) = 2;
  return result;
}

uint64_t sub_10100F294(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6;
  double v7;
  NSObject *v8;
  double v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  double v27;
  const char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  char *v34;
  double v35;
  unsigned int v36;
  uint64_t v37;
  void *__p;
  unsigned __int8 *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  _DWORD v44[2];
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  _OWORD v51[9];
  _BYTE buf[40];
  uint64_t v53;
  int v54;
  char v55;
  int v56;
  uint64_t v57;
  uint64_t v58;

  uuid_copy((unsigned __int8 *)(a2 + 28), (const unsigned __int8 *)(a1 + 56));
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v6 = sub_101125448();
  CFAbsoluteTimeGetCurrent();
  sub_101125E60(v6, &v41);
  v7 = sub_10100F908(a1);
  if (*(float *)(a1 + 1692) > 0.0)
  {
    if (qword_10229FEC0 != -1)
      dispatch_once(&qword_10229FEC0, &stru_102199948);
    v8 = qword_10229FEC8;
    if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *(float *)(a1 + 1692);
      *(_DWORD *)buf = 134218240;
      *(double *)&buf[4] = v7;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Overwriting meanMaxMets,calculated,%f,overwrite,%f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FEC0 != -1)
        dispatch_once(&qword_10229FEC0, &stru_102199948);
      v27 = *(float *)(a1 + 1692);
      LODWORD(v51[0]) = 134218240;
      *(double *)((char *)v51 + 4) = v7;
      WORD6(v51[0]) = 2048;
      *(double *)((char *)v51 + 14) = v27;
      LODWORD(v35) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEC8, 0, "Overwriting meanMaxMets,calculated,%f,overwrite,%f", COERCE_DOUBLE(v51), v35);
      v29 = (char *)v28;
      sub_100512490("Generic", 1, 0, 2, "VO2MaxEstimationStatus CLVO2MaxEstimator::estimateVO2Max(CFAbsoluteTime, VO2MaxResult &)", "%s\n", v28);
      if (v29 != buf)
        free(v29);
    }
    v7 = *(float *)(a1 + 1692);
  }
  __p = 0;
  v39 = 0;
  v40 = 0;
  v37 = 0;
  memset(v51, 0, sizeof(v51));
  v36 = sub_10100FCBC(a1, a2, &__p, &v37, (uint64_t)v51, (__int128 **)&v41, a3, v7);
  if (v39 != __p)
  {
    v10 = sub_101125448();
    sub_101125E30(v10, (const unsigned __int8 *)(a1 + 56));
    v11 = (unsigned __int8 *)__p;
    v12 = v39;
    while (v11 != v12)
    {
      uuid_copy(v11 + 24, (const unsigned __int8 *)(a1 + 56));
      *((_QWORD *)v11 + 2) = *(_QWORD *)a1;
      *((_DWORD *)v11 + 45) = *(_DWORD *)(a1 + 1608);
      v13 = sub_101125448();
      sub_101125E24(v13, (uint64_t)v11);
      v11 += 184;
    }
  }
  if (*(_QWORD *)(a1 + 16) != 1)
  {
    v14 = *(_QWORD *)a1;
    if (*(_DWORD *)(a1 + 1608) == 3)
    {
      if (v14 != 15)
        goto LABEL_20;
    }
    else if (v14 > 0x18 || ((1 << v14) & 0x1028000) == 0)
    {
      goto LABEL_20;
    }
    if (!sub_101219820(a1 + 1640))
    {
      *(_QWORD *)buf = 0;
      *(double *)&buf[8] = a3;
      *(_QWORD *)&buf[16] = 0;
      *(_QWORD *)&buf[24] = 0;
      *(double *)&buf[32] = v7;
      v53 = v37;
      v54 = *(_DWORD *)(a1 + 888);
      v55 = *(_BYTE *)(a1 + 1320);
      v56 = 3;
      v57 = 0;
      v58 = 0;
      uuid_copy(&buf[16], (const unsigned __int8 *)(a1 + 56));
      v15 = sub_101125448();
      sub_101125CA8(v15, (uint64_t)buf);
    }
  }
LABEL_20:
  v16 = sub_101010A70(a1, &v36, (_BYTE *)(a2 + 24));
  *(_BYTE *)(a1 + 1548) = v16;
  if (v16)
  {
    uuid_copy((unsigned __int8 *)&v51[4] + 8, (const unsigned __int8 *)(a1 + 56));
    v17 = sub_101125448();
    sub_10112573C(v17, (uint64_t)v51);
    v18 = sub_1001FD94C();
    buf[0] = 1;
    sub_10011B81C(v18, CFSTR("ActiveJacksonCalibration"), buf);
    v19 = sub_1001FD94C();
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 944))(v19);
    uuid_copy((unsigned __int8 *)(a1 + 40), (const unsigned __int8 *)(a1 + 56));
  }
  else
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102199928);
    v20 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_ERROR))
    {
      v21 = *(_QWORD *)(a1 + 1600);
      v22 = *(_QWORD *)(a2 + 16);
      v23 = *(_QWORD *)(a1 + 16);
      *(_DWORD *)buf = 67240960;
      *(_DWORD *)&buf[4] = v36;
      *(_WORD *)&buf[8] = 2050;
      *(_QWORD *)&buf[10] = v21;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = v22;
      *(_WORD *)&buf[28] = 2050;
      *(_QWORD *)&buf[30] = v23;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "VO2Max,Failure to estimate,status,%{public}d,workout duration,%{public}.3f,estimate,%f,workout mode,%{public}ld", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_102199928);
      v30 = *(_QWORD *)(a1 + 1600);
      v31 = *(_QWORD *)(a2 + 16);
      v32 = *(_QWORD *)(a1 + 16);
      v44[0] = 67240960;
      v44[1] = v36;
      v45 = 2050;
      v46 = v30;
      v47 = 2048;
      v48 = v31;
      v49 = 2050;
      v50 = v32;
      LODWORD(v35) = 38;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 16, "VO2Max,Failure to estimate,status,%{public}d,workout duration,%{public}.3f,estimate,%f,workout mode,%{public}ld", v44, *(_QWORD *)&v35);
      v34 = (char *)v33;
      sub_100512490("Generic", 1, 0, 0, "VO2MaxEstimationStatus CLVO2MaxEstimator::estimateVO2Max(CFAbsoluteTime, VO2MaxResult &)", "%s\n", v33);
      if (v34 != buf)
        free(v34);
    }
    *(_QWORD *)a2 = 0x7FEFFFFFFFFFFFFFLL;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0xBFF0000000000000;
  }
  if (*(_QWORD *)(a1 + 16) != 1)
  {
    v24 = *(_QWORD *)a1;
    if (*(_DWORD *)(a1 + 1608) == 3)
    {
      if (v24 != 15)
        goto LABEL_35;
LABEL_34:
      *(double *)(a2 + 48) = v7;
      goto LABEL_35;
    }
    if (v24 <= 0x18 && ((1 << v24) & 0x1028000) != 0)
      goto LABEL_34;
  }
LABEL_35:
  v25 = v36;
  if (__p)
  {
    v39 = (unsigned __int8 *)__p;
    operator delete(__p);
  }
  if (v41)
  {
    v42 = v41;
    operator delete(v41);
  }
  return v25;
}

void sub_10100F8B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

double sub_10100F908(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;
  double v4;
  double v5;
  double *v6;
  double v7;
  double v8;
  _BYTE *v9;
  uint64_t v10;
  double v11;
  double v12;
  NSObject *v13;
  const char *v14;
  float v15;
  float v16;
  const char *v18;
  const char *v19;
  uint8_t *v20;
  void *__p;
  _BYTE *v22;
  uint64_t v23;
  int v24;
  const char *v25;
  __int16 v26;
  double v27;
  uint8_t buf[1640];

  __p = 0;
  v22 = 0;
  v23 = 0;
  v2 = *(_QWORD *)(a1 + 1232);
  if (!v2)
  {
    v3 = 0;
    v9 = 0;
    v7 = 0.0;
LABEL_10:
    v5 = 0.0;
    v4 = 0.0;
    goto LABEL_11;
  }
  sub_1013DA1A8(v2, &__p);
  v3 = v22;
  if (__p == v22)
  {
    v7 = 0.0;
    v9 = __p;
    goto LABEL_10;
  }
  v4 = 0.0;
  v5 = 0.0;
  v6 = (double *)__p;
  v7 = 0.0;
  do
  {
    v8 = v6[3];
    v4 = v4 + v8;
    v5 = v5 + 1.0;
    if (v8 > v7)
      v7 = v6[3];
    v6 += 4;
  }
  while (v6 != (double *)v22);
  v9 = __p;
LABEL_11:
  if ((unint64_t)(v3 - v9) >= 0x380)
  {
    v11 = v7;
  }
  else
  {
    memset(buf, 0, 24);
    v10 = sub_101125448();
    sub_101125E1C(v10, buf);
    if (*(_QWORD *)buf == *(_QWORD *)&buf[8]
      || (v11 = *(double *)(*(_QWORD *)&buf[8] - 48), v11 <= 0.0)
      || (v4 = v4 + (double)(unint64_t)(28 - ((v22 - (_BYTE *)__p) >> 5)) * v11, v5 = 28.0, v11 <= v7))
    {
      v11 = v7;
    }
    if (*(_QWORD *)buf)
    {
      *(_QWORD *)&buf[8] = *(_QWORD *)buf;
      operator delete(*(void **)buf);
    }
  }
  if (v5 <= 0.0)
    v12 = 0.0;
  else
    v12 = v4 / v5;
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_102199928);
  v13 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    v14 = "false";
    if (v5 > 0.0)
      v14 = "true";
    *(_DWORD *)buf = 136380931;
    *(_QWORD *)&buf[4] = v14;
    *(_WORD *)&buf[12] = 2049;
    *(double *)&buf[14] = v12;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "VO2Max,GetMeanMaxMets,canCalculateMeanMaxMets,%{private}s,meanMaxMets,%{private}.3f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102199928);
    v18 = "false";
    if (v5 > 0.0)
      v18 = "true";
    v24 = 136380931;
    v25 = v18;
    v26 = 2049;
    v27 = v12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "VO2Max,GetMeanMaxMets,canCalculateMeanMaxMets,%{private}s,meanMaxMets,%{private}.3f", &v24, 22);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "double CLVO2MaxEstimator::getMeanMaxMets()", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  v15 = v12;
  *(float *)(a1 + 1388) = v15;
  v16 = v11;
  *(float *)(a1 + 1392) = v16;
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_10100FC80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10100FCBC(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5, __int128 **a6, double a7, double a8)
{
  float v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  int v20;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  _OWORD *v28;
  double *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  double *v38;
  char *v39;
  char *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  char *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  char *v48;
  double *v49;
  float v51;
  double v52;
  __objc2_class *v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  double v57;
  float v58;
  double v59;
  float v60;
  float v61;
  double v62;
  float v63;
  float v64;
  float v65;
  int v66;
  NSObject *vtable;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  double v76;
  double v77;
  int v78;
  uint64_t v79;
  NSObject *v80;
  _DWORD *v81;
  _DWORD *v82;
  _QWORD *v83;
  char *v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  char *v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  char *v108;
  char *v109;
  char *v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  _DWORD *v120;
  BOOL v121;
  void *v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  const char *v130;
  uint8_t *v131;
  const char *v132;
  uint8_t *v133;
  double v134;
  double v135;
  _QWORD *v136;
  __int128 **v137;
  void *__p;
  _BYTE *v139;
  double v140;
  uint64_t v141;
  int v142;
  __int128 v143;
  double v144;
  double v145;
  int v146;
  void *v147;
  _DWORD *v148;
  uint64_t v149;
  _BYTE v150[24];
  uint64_t v151;
  int v152;
  _BYTE v153[44];
  __int16 v154;
  int v155;
  __int16 v156;
  double v157;
  __int16 v158;
  uint64_t v159;
  __int16 v160;
  uint64_t v161;
  __int16 v162;
  int v163;
  __int16 v164;
  int v165;
  __int16 v166;
  double v167;
  __int16 v168;
  uint64_t v169;
  __int16 v170;
  uint64_t v171;
  __int16 v172;
  int v173;
  __int16 v174;
  double v175;
  __int16 v176;
  double v177;
  __int16 v178;
  _BOOL4 v179;
  __int16 v180;
  uint64_t v181;
  __int16 v182;
  uint64_t v183;
  __int16 v184;
  uint64_t v185;
  __int16 v186;
  int v187;
  __int16 v188;
  int v189;
  __int16 v190;
  int v191;
  __int16 v192;
  int v193;
  uint8_t buf[4];
  _BYTE v195[44];
  __int16 v196;
  int v197;
  __int16 v198;
  double v199;
  __int16 v200;
  uint64_t v201;
  __int16 v202;
  uint64_t v203;
  __int16 v204;
  int v205;
  __int16 v206;
  int v207;
  __int16 v208;
  double v209;
  __int16 v210;
  uint64_t v211;
  __int16 v212;
  uint64_t v213;
  __int16 v214;
  int v215;
  __int16 v216;
  double v217;
  __int16 v218;
  double v219;
  __int16 v220;
  _BOOL4 v221;
  __int16 v222;
  uint64_t v223;
  __int16 v224;
  uint64_t v225;
  __int16 v226;
  uint64_t v227;
  __int16 v228;
  int v229;
  __int16 v230;
  int v231;
  __int16 v232;
  int v233;
  __int16 v234;
  int v235;

  v16 = *(float *)(a1 + 908);
  LODWORD(v151) = *(_DWORD *)(a1 + 904);
  *((float *)&v151 + 1) = v16;
  v17 = *(_QWORD *)a1;
  v18 = *(_QWORD *)(a1 + 1600);
  v19 = *(float *)&v151;
  v20 = *(_DWORD *)(a1 + 1608);
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(double *)(a5 + 24) = a7;
  *(_QWORD *)(a5 + 32) = 0;
  *(_QWORD *)(a5 + 40) = v17;
  *(_QWORD *)(a5 + 48) = v18;
  *(double *)(a5 + 56) = v16;
  *(double *)(a5 + 64) = v19;
  *(_OWORD *)(a5 + 72) = 0u;
  *(_OWORD *)(a5 + 88) = 0u;
  *(_DWORD *)(a5 + 104) = v20;
  *(_WORD *)(a5 + 108) = 0;
  *(_DWORD *)(a5 + 112) = 0;
  *(_QWORD *)(a5 + 128) = 0;
  *(_QWORD *)(a5 + 136) = 0;
  *(_QWORD *)(a5 + 120) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v143 = _Q0;
  v144 = -1.0;
  v146 = 0;
  v148 = 0;
  v149 = 0;
  v147 = 0;
  *(_OWORD *)v150 = _Q0;
  *(_QWORD *)&v150[16] = 0xBFF0000000000000;
  sub_1009E8478((uint64_t)&v141 + 4, &v151, *(_DWORD *)(a1 + 1608));
  sub_1009EA568(*(double *)(a1 + 24), (uint64_t)&v141 + 4, (uint64_t *)(a1 + 1248), a5, *(_QWORD *)a1);
  __p = 0;
  v139 = 0;
  v140 = 0.0;
  v25 = *(_QWORD *)(a1 + 1248);
  v26 = *(_QWORD *)(a1 + 1256);
  if (v25 != v26)
  {
    v27 = 0;
    v28 = 0;
    v29 = &v140;
    do
    {
      while (*(_DWORD *)(v25 + 64) < 2u)
      {
        v25 += 72;
        if (v25 == v26)
          goto LABEL_31;
      }
      if ((unint64_t)v28 >= *(_QWORD *)&v140)
      {
        v137 = a6;
        v33 = a2;
        v34 = a4;
        v35 = 0x8E38E38E38E38E39 * (((char *)v28 - v27) >> 3);
        v36 = v35 + 1;
        if (v35 + 1 > 0x38E38E38E38E38ELL)
          sub_100259694();
        if (0x1C71C71C71C71C72 * ((uint64_t)(*(_QWORD *)&v140 - (_QWORD)v27) >> 3) > v36)
          v36 = 0x1C71C71C71C71C72 * ((uint64_t)(*(_QWORD *)&v140 - (_QWORD)v27) >> 3);
        if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)&v140 - (_QWORD)v27) >> 3) >= 0x1C71C71C71C71C7)
          v37 = 0x38E38E38E38E38ELL;
        else
          v37 = v36;
        if (v37)
        {
          v38 = v29;
          v39 = (char *)sub_10029D26C((uint64_t)v29, v37);
          v27 = __p;
          v28 = v139;
          v29 = v38;
        }
        else
        {
          v39 = 0;
        }
        v40 = &v39[72 * v35];
        *(_OWORD *)v40 = *(_OWORD *)v25;
        v41 = *(_OWORD *)(v25 + 16);
        v42 = *(_OWORD *)(v25 + 32);
        v43 = *(_OWORD *)(v25 + 48);
        *((_QWORD *)v40 + 8) = *(_QWORD *)(v25 + 64);
        *((_OWORD *)v40 + 2) = v42;
        *((_OWORD *)v40 + 3) = v43;
        *((_OWORD *)v40 + 1) = v41;
        if (v28 == (_OWORD *)v27)
        {
          v48 = &v39[72 * v35];
          a4 = v34;
        }
        else
        {
          v44 = &v39[72 * v35];
          a4 = v34;
          do
          {
            *(_OWORD *)(v44 - 72) = *(_OWORD *)((char *)v28 - 72);
            v45 = *(_OWORD *)((char *)v28 - 56);
            v46 = *(_OWORD *)((char *)v28 - 40);
            v47 = *(_OWORD *)((char *)v28 - 24);
            v48 = v44 - 72;
            *((_DWORD *)v44 - 2) = *((_DWORD *)v28 - 2);
            *(_OWORD *)(v44 - 24) = v47;
            *(_OWORD *)(v44 - 40) = v46;
            *(_OWORD *)(v44 - 56) = v45;
            v28 = (_OWORD *)((char *)v28 - 72);
            v44 -= 72;
          }
          while (v28 != (_OWORD *)v27);
        }
        v28 = v40 + 72;
        __p = v48;
        v139 = v40 + 72;
        *(_QWORD *)&v140 = &v39[72 * v37];
        a2 = v33;
        if (v27)
        {
          v49 = v29;
          operator delete(v27);
          v29 = v49;
          v27 = __p;
        }
        else
        {
          v27 = v48;
        }
        a6 = v137;
      }
      else
      {
        *v28 = *(_OWORD *)v25;
        v30 = *(_OWORD *)(v25 + 16);
        v31 = *(_OWORD *)(v25 + 32);
        v32 = *(_OWORD *)(v25 + 48);
        *((_QWORD *)v28 + 8) = *(_QWORD *)(v25 + 64);
        v28[2] = v31;
        v28[3] = v32;
        v28[1] = v30;
        v28 = (_OWORD *)((char *)v28 + 72);
      }
      v139 = v28;
      v25 += 72;
    }
    while (0x8E38E38E38E38E39 * (((char *)v28 - v27) >> 3) <= 0x1EB && v25 != v26);
  }
LABEL_31:
  v51 = sub_100AD36B8(a1 + 896);
  sub_1009E8488((float *)&v141 + 1, (uint64_t *)&__p, a6, a1 + 1272, (uint64_t)&v143, v51, a8, a7);
  v52 = -1.0;
  v53 = DefaultObserver;
  if (*(_QWORD *)(a1 + 16) == 1)
    goto LABEL_32;
  v56 = *(_QWORD *)a1;
  if (*(_DWORD *)(a1 + 1608) == 3)
  {
    if (v56 != 15)
    {
LABEL_32:
      v54 = 0;
      v55 = 4294967292;
LABEL_40:
      v57 = -1.0;
      goto LABEL_41;
    }
  }
  else
  {
    v54 = 0;
    v55 = 4294967292;
    if (v56 > 0x18 || ((1 << v56) & 0x1028000) == 0)
      goto LABEL_40;
  }
  if (sub_101219820(a1 + 1640))
  {
    v55 = sub_101219820(a1 + 1640);
    v54 = 0;
    goto LABEL_40;
  }
  v76 = *(double *)&v143;
  v52 = v144;
  LODWORD(v55) = HIDWORD(v145);
  v54 = v146;
  v57 = -1.0;
  if (*(double *)&v143 == -1.0)
  {
    v77 = 0.0;
  }
  else
  {
    v77 = sub_1013263D8(*(_DWORD *)(a1 + 1276), (int)*(float *)(a1 + 1292));
    v57 = 65.0;
    if (v76 + v77 <= 65.0)
    {
      v57 = 14.0;
      if (v76 + v77 >= 14.0)
      {
        *(_DWORD *)(a1 + 1544) = 1;
        v57 = v76 + v77;
        goto LABEL_59;
      }
      v78 = 3;
    }
    else
    {
      v78 = 2;
    }
    *(_DWORD *)(a1 + 1544) = v78;
  }
LABEL_59:
  v79 = a2;
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_102199928);
  v80 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67241217;
    *(_DWORD *)v195 = v55;
    *(_WORD *)&v195[4] = 2049;
    *(_QWORD *)&v195[6] = *((_QWORD *)&v143 + 1);
    *(_WORD *)&v195[14] = 2049;
    *(double *)&v195[16] = v77;
    *(_WORD *)&v195[24] = 2049;
    *(double *)&v195[26] = v57;
    *(_WORD *)&v195[34] = 2049;
    *(double *)&v195[36] = v52;
    _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEBUG, "VO2Max,vo2MaxEstimationStatus,%{public}d,priorVO2Max,%{private}f,biasAdjustment,%{private}f,longitudinalVO2Max,%{private}f,sessionVO2Max,%{private}f", buf, 0x30u);
  }
  a2 = v79;
  LODWORD(v137) = v55;
  v136 = a4;
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102199928);
    v152 = 67241217;
    *(_DWORD *)v153 = v55;
    *(_WORD *)&v153[4] = 2049;
    *(_QWORD *)&v153[6] = *((_QWORD *)&v143 + 1);
    *(_WORD *)&v153[14] = 2049;
    *(double *)&v153[16] = v77;
    *(_WORD *)&v153[24] = 2049;
    *(double *)&v153[26] = v57;
    *(_WORD *)&v153[34] = 2049;
    *(double *)&v153[36] = v52;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "VO2Max,vo2MaxEstimationStatus,%{public}d,priorVO2Max,%{private}f,biasAdjustment,%{private}f,longitudinalVO2Max,%{private}f,sessionVO2Max,%{private}f", &v152, 48);
    v133 = (uint8_t *)v132;
    sub_100512490("Generic", 1, 0, 2, "VO2MaxEstimationStatus CLVO2MaxEstimator::evaluateVO2MaxModel(VO2MaxResult &, std::vector<VO2MaxSummary> &, double &, VO2MaxOutput &, const std::vector<VO2MaxSummary> &, CFAbsoluteTime, double)", "%s\n", v132);
    if (v133 != buf)
      free(v133);
    a2 = v79;
  }
  v82 = v147;
  v81 = v148;
  if (v147 == v148)
  {
    v120 = v147;
  }
  else
  {
    HIDWORD(v134) = v54;
    v135 = *(double *)&a2;
    v83 = a3 + 2;
    v84 = (char *)a3[1];
    do
    {
      v82[44] = 1;
      if ((unint64_t)v84 >= *v83)
      {
        v94 = 0xD37A6F4DE9BD37A7 * ((uint64_t)&v84[-*a3] >> 3);
        v95 = v94 + 1;
        if (v94 + 1 > 0x1642C8590B21642)
          sub_100259694();
        if (0xA6F4DE9BD37A6F4ELL * ((uint64_t)(*v83 - *a3) >> 3) > v95)
          v95 = 0xA6F4DE9BD37A6F4ELL * ((uint64_t)(*v83 - *a3) >> 3);
        if (0xD37A6F4DE9BD37A7 * ((uint64_t)(*v83 - *a3) >> 3) >= 0xB21642C8590B21)
          v96 = 0x1642C8590B21642;
        else
          v96 = v95;
        if (v96)
          v97 = (char *)sub_10055ADA8((uint64_t)(a3 + 2), v96);
        else
          v97 = 0;
        v98 = &v97[184 * v94];
        v99 = *(_OWORD *)v82;
        v100 = *((_OWORD *)v82 + 1);
        v101 = *((_OWORD *)v82 + 3);
        *((_OWORD *)v98 + 2) = *((_OWORD *)v82 + 2);
        *((_OWORD *)v98 + 3) = v101;
        *(_OWORD *)v98 = v99;
        *((_OWORD *)v98 + 1) = v100;
        v102 = *((_OWORD *)v82 + 4);
        v103 = *((_OWORD *)v82 + 5);
        v104 = *((_OWORD *)v82 + 7);
        *((_OWORD *)v98 + 6) = *((_OWORD *)v82 + 6);
        *((_OWORD *)v98 + 7) = v104;
        *((_OWORD *)v98 + 4) = v102;
        *((_OWORD *)v98 + 5) = v103;
        v105 = *((_OWORD *)v82 + 8);
        v106 = *((_OWORD *)v82 + 9);
        v107 = *((_OWORD *)v82 + 10);
        *((_QWORD *)v98 + 22) = *((_QWORD *)v82 + 22);
        *((_OWORD *)v98 + 9) = v106;
        *((_OWORD *)v98 + 10) = v107;
        *((_OWORD *)v98 + 8) = v105;
        v109 = (char *)*a3;
        v108 = (char *)a3[1];
        v110 = v98;
        if (v108 != (char *)*a3)
        {
          do
          {
            v111 = *(_OWORD *)(v108 - 184);
            v112 = *(_OWORD *)(v108 - 168);
            v113 = *(_OWORD *)(v108 - 152);
            *(_OWORD *)(v110 - 136) = *(_OWORD *)(v108 - 136);
            *(_OWORD *)(v110 - 152) = v113;
            *(_OWORD *)(v110 - 168) = v112;
            *(_OWORD *)(v110 - 184) = v111;
            v114 = *(_OWORD *)(v108 - 120);
            v115 = *(_OWORD *)(v108 - 104);
            v116 = *(_OWORD *)(v108 - 88);
            *(_OWORD *)(v110 - 72) = *(_OWORD *)(v108 - 72);
            *(_OWORD *)(v110 - 88) = v116;
            *(_OWORD *)(v110 - 104) = v115;
            *(_OWORD *)(v110 - 120) = v114;
            v117 = *(_OWORD *)(v108 - 56);
            v118 = *(_OWORD *)(v108 - 40);
            v119 = *(_OWORD *)(v108 - 24);
            *((_QWORD *)v110 - 1) = *((_QWORD *)v108 - 1);
            *(_OWORD *)(v110 - 24) = v119;
            *(_OWORD *)(v110 - 40) = v118;
            *(_OWORD *)(v110 - 56) = v117;
            v110 -= 184;
            v108 -= 184;
          }
          while (v108 != v109);
          v108 = (char *)*a3;
        }
        v84 = v98 + 184;
        *a3 = v110;
        a3[1] = v98 + 184;
        a3[2] = &v97[184 * v96];
        if (v108)
          operator delete(v108);
      }
      else
      {
        v85 = *(_OWORD *)v82;
        v86 = *((_OWORD *)v82 + 1);
        v87 = *((_OWORD *)v82 + 3);
        *((_OWORD *)v84 + 2) = *((_OWORD *)v82 + 2);
        *((_OWORD *)v84 + 3) = v87;
        *(_OWORD *)v84 = v85;
        *((_OWORD *)v84 + 1) = v86;
        v88 = *((_OWORD *)v82 + 4);
        v89 = *((_OWORD *)v82 + 5);
        v90 = *((_OWORD *)v82 + 7);
        *((_OWORD *)v84 + 6) = *((_OWORD *)v82 + 6);
        *((_OWORD *)v84 + 7) = v90;
        *((_OWORD *)v84 + 4) = v88;
        *((_OWORD *)v84 + 5) = v89;
        v91 = *((_OWORD *)v82 + 8);
        v92 = *((_OWORD *)v82 + 9);
        v93 = *((_OWORD *)v82 + 10);
        *((_QWORD *)v84 + 22) = *((_QWORD *)v82 + 22);
        *((_OWORD *)v84 + 9) = v92;
        *((_OWORD *)v84 + 10) = v93;
        *((_OWORD *)v84 + 8) = v91;
        v84 += 184;
      }
      a3[1] = v84;
      v82 += 46;
    }
    while (v82 != v81);
    v120 = v147;
    v82 = v148;
    *(double *)&a2 = v135;
  }
  *(_BYTE *)(a2 + 44) = v120 != v82;
  v55 = v55;
  v53 = DefaultObserver;
  if ((_DWORD)v55)
  {
    a4 = v136;
  }
  else
  {
    *(double *)a2 = a7;
    *(_QWORD *)(a2 + 8) = *(_QWORD *)a1;
    *(double *)(a2 + 16) = v57;
    *(_BYTE *)(a2 + 24) = v144 != -1.0;
    *(_BYTE *)(a2 + 25) = *(_BYTE *)(a1 + 1320);
    a4 = v136;
    v121 = sub_10101168C(a1) && *(_BYTE *)(a1 + 1328) != 0;
    *(_BYTE *)(a2 + 26) = v121;
    v55 = 0;
    *(_BYTE *)(a2 + 27) = sub_10101168C(a1);
  }
LABEL_41:
  *(double *)(a5 + 32) = v57;
  *(double *)(a5 + 96) = v57;
  *(_DWORD *)(a5 + 112) = v54;
  *(_WORD *)(a5 + 108) = *(_WORD *)(a2 + 26);
  *(double *)(a5 + 136) = v52;
  v58 = v57;
  *(float *)(a1 + 1396) = v58;
  v59 = *((double *)&v143 + 1);
  v60 = *(double *)&v143;
  *(float *)(a1 + 1404) = v60;
  v61 = v52;
  *(float *)(a1 + 1408) = v61;
  v62 = *(double *)v150;
  v63 = v144;
  *(float *)(a1 + 1416) = v63;
  v64 = v59;
  *(float *)(a1 + 1356) = v64;
  *(_DWORD *)(a1 + 1572) = 954437177 * ((unint64_t)(v139 - (_BYTE *)__p) >> 3);
  v65 = v62;
  *(float *)(a1 + 1420) = v65;
  *(float32x2_t *)(a1 + 1432) = vcvt_f32_f64(*(float64x2_t *)&v150[8]);
  v66 = *(_DWORD *)(a1 + 1608);
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_102199928);
  vtable = v53[80].vtable;
  if (os_log_type_enabled(vtable, OS_LOG_TYPE_DEFAULT))
  {
    v68 = *(_QWORD *)a1;
    v69 = *(unsigned __int8 *)(a1 + 1320);
    v70 = *(_QWORD *)(a1 + 1600);
    v71 = *(int *)(a1 + 1608);
    v72 = *(_QWORD *)(a1 + 1616);
    v73 = *(unsigned __int8 *)(a2 + 26);
    v74 = *(unsigned __int8 *)(a2 + 27);
    *(_DWORD *)buf = 134224128;
    *(_QWORD *)v195 = v68;
    *(_WORD *)&v195[8] = 2048;
    *(double *)&v195[10] = *(float *)&v151;
    *(_WORD *)&v195[18] = 2048;
    *(double *)&v195[20] = *((float *)&v151 + 1);
    *(_WORD *)&v195[28] = 2048;
    *(_QWORD *)&v195[30] = 0x8E38E38E38E38E39 * ((v139 - (_BYTE *)__p) >> 3);
    *(_WORD *)&v195[38] = 1024;
    *(_DWORD *)&v195[40] = HIDWORD(v145);
    v196 = 1024;
    v197 = LODWORD(v145);
    v198 = 2048;
    v199 = v144;
    v200 = 2048;
    v201 = v143;
    v202 = 2048;
    v203 = *(_QWORD *)&v195[30];
    v204 = 1024;
    v205 = HIDWORD(v145);
    v206 = 1024;
    v207 = LODWORD(v145);
    v208 = 2048;
    v209 = v144;
    v210 = 2048;
    v211 = v143;
    v212 = 2048;
    v213 = *((_QWORD *)&v143 + 1);
    v214 = 1024;
    v215 = v69;
    v216 = 2048;
    v217 = v57;
    v218 = 2048;
    v219 = v52;
    v220 = 1024;
    v221 = v66 == 3;
    v222 = 2048;
    v223 = v70;
    v224 = 2048;
    v225 = v71;
    v226 = 2048;
    v227 = v72;
    v228 = 1024;
    v229 = v55;
    v230 = 1024;
    v231 = v73;
    v232 = 1024;
    v233 = v74;
    v234 = 1024;
    v235 = v54;
    _os_log_impl((void *)&_mh_execute_header, vtable, OS_LOG_TYPE_DEFAULT, "VO2Max,currentWorkoutType,%ld,hrmin,%f,hrmax,%f,outdoorPedestrianNumPairs,%lu,outdoorPedestrianStatus,%d,outdoorPedestrianSessionStatus,%d,outdoorPedestrianSessionVO2Max,%.5f,outdoorPedestrianEst,%.6f,adaptiveModelNumPairs,%lu,adaptiveModelStatus,%d, adaptiveModelSessionStatus,%d,adaptiveModelSessionVO2Max,%.5f,adaptiveModelEst,%f,adaptiveModelPrior,%f,betaBlockerUse,%d,longitudinalVO2Max,%f,sessionVO2Max,%f,isEscalation,%d,sessionDuration,%.5f,sessionType,%ld,escalationRatio,%f,finalStatus,%d,eligibleForHealthKit,%d,eligibleForCalorimetry,%d,numWorkoutsContrToEstimate,%u", buf, 0xD4u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102199928);
    v122 = v53[80].vtable;
    v123 = *(_QWORD *)a1;
    v124 = *(unsigned __int8 *)(a1 + 1320);
    v125 = *(_QWORD *)(a1 + 1600);
    v126 = *(int *)(a1 + 1608);
    v127 = *(_QWORD *)(a1 + 1616);
    v128 = *(unsigned __int8 *)(a2 + 26);
    v129 = *(unsigned __int8 *)(a2 + 27);
    v152 = 134224128;
    *(_QWORD *)v153 = v123;
    *(_WORD *)&v153[8] = 2048;
    *(double *)&v153[10] = *(float *)&v151;
    *(_WORD *)&v153[18] = 2048;
    *(double *)&v153[20] = *((float *)&v151 + 1);
    *(_WORD *)&v153[28] = 2048;
    *(_QWORD *)&v153[30] = 0x8E38E38E38E38E39 * ((v139 - (_BYTE *)__p) >> 3);
    *(_WORD *)&v153[38] = 1024;
    *(_DWORD *)&v153[40] = HIDWORD(v145);
    v154 = 1024;
    v155 = LODWORD(v145);
    v156 = 2048;
    v157 = v144;
    v158 = 2048;
    v159 = v143;
    v160 = 2048;
    v161 = *(_QWORD *)&v153[30];
    v162 = 1024;
    v163 = HIDWORD(v145);
    v164 = 1024;
    v165 = LODWORD(v145);
    v166 = 2048;
    v167 = v144;
    v168 = 2048;
    v169 = v143;
    v170 = 2048;
    v171 = *((_QWORD *)&v143 + 1);
    v172 = 1024;
    v173 = v124;
    v174 = 2048;
    v175 = v57;
    v176 = 2048;
    v177 = v52;
    v178 = 1024;
    v179 = v66 == 3;
    v180 = 2048;
    v181 = v125;
    v182 = 2048;
    v183 = v126;
    v184 = 2048;
    v185 = v127;
    v186 = 1024;
    v187 = v55;
    v188 = 1024;
    v189 = v128;
    v190 = 1024;
    v191 = v129;
    v192 = 1024;
    v193 = v54;
    LODWORD(v134) = 212;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v122, 0, "VO2Max,currentWorkoutType,%ld,hrmin,%f,hrmax,%f,outdoorPedestrianNumPairs,%lu,outdoorPedestrianStatus,%d,outdoorPedestrianSessionStatus,%d,outdoorPedestrianSessionVO2Max,%.5f,outdoorPedestrianEst,%.6f,adaptiveModelNumPairs,%lu,adaptiveModelStatus,%d, adaptiveModelSessionStatus,%d,adaptiveModelSessionVO2Max,%.5f,adaptiveModelEst,%f,adaptiveModelPrior,%f,betaBlockerUse,%d,longitudinalVO2Max,%f,sessionVO2Max,%f,isEscalation,%d,sessionDuration,%.5f,sessionType,%ld,escalationRatio,%f,finalStatus,%d,eligibleForHealthKit,%d,eligibleForCalorimetry,%d,numWorkoutsContrToEstimate,%u", &v152, v134, v135, v136, (_DWORD)v137, (_DWORD)__p, *(double *)&v139,
      v140,
      v141,
      v142,
      (_DWORD)v143,
      *((double *)&v143 + 1),
      v144,
      v145,
      v146,
      *(double *)&v147,
      *(double *)&v148,
      v149,
      *(double *)v150,
      *(_QWORD *)&v150[8],
      *(double *)&v150[16],
      v151);
    v131 = (uint8_t *)v130;
    sub_100512490("Generic", 1, 0, 2, "VO2MaxEstimationStatus CLVO2MaxEstimator::evaluateVO2MaxModel(VO2MaxResult &, std::vector<VO2MaxSummary> &, double &, VO2MaxOutput &, const std::vector<VO2MaxSummary> &, CFAbsoluteTime, double)", "%s\n", v130);
    if (v131 != buf)
      free(v131);
  }
  *a4 = *((_QWORD *)&v143 + 1);
  if (__p)
  {
    v139 = __p;
    operator delete(__p);
  }
  if (v147)
  {
    v148 = v147;
    operator delete(v147);
  }
  return v55;
}

void sub_101010A18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  if (__p)
    operator delete(__p);
  if (a24)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

BOOL sub_101010A70(uint64_t a1, _DWORD *a2, _BYTE *a3)
{
  _BOOL8 result;
  int v7;
  _BOOL4 v8;

  if (*(_QWORD *)(a1 + 16) == 1)
    return 0;
  v7 = uuid_compare((const unsigned __int8 *)(a1 + 40), (const unsigned __int8 *)(a1 + 56));
  result = 0;
  if (v7 && !*a2)
  {
    v8 = *(_DWORD *)(a1 + 1608) != 3;
    if (*a3)
      v8 = 1;
    return *(double *)(a1 + 1600) > dbl_101C3AC00[*(_DWORD *)(a1 + 1608) != 3] && v8;
  }
  return result;
}

void sub_101010B00(uint64_t a1, uint64_t *a2, __int128 **a3, __int128 *a4, uint64_t a5, int a6, unsigned __int8 *src, double a8, double a9, double a10)
{
  __int128 v19;
  __int128 v20;
  __int128 v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  char **v25;
  unint64_t v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  char *v41;
  char *v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  unint64_t v50;
  unint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  char *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  char *v77;
  char *v78;
  char *v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  NSObject *v93;
  const char *v94;
  uint8_t *v95;
  unsigned __int8 *srca;
  uint64_t v98;
  int v99;
  uint64_t v100;
  void *__p;
  unsigned __int8 *v102;
  uint64_t v103;
  __int128 v104;
  unint64_t v105;
  int v106[5];
  char v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint8_t buf[16];
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;

  if (*a2 == a2[1])
  {
    if (qword_10229FEC0 != -1)
      dispatch_once(&qword_10229FEC0, &stru_102199948);
    v93 = qword_10229FEC8;
    if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134283521;
      *(double *)&buf[4] = a8;
      _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_DEFAULT, "Will not retrocompute VO2Max due to absense of VO2MaxInputs, workoutEndTime:%{private}f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FEC0 != -1)
        dispatch_once(&qword_10229FEC0, &stru_102199948);
      LODWORD(v104) = 134283521;
      *(double *)((char *)&v104 + 4) = a8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEC8, 0, "Will not retrocompute VO2Max due to absense of VO2MaxInputs, workoutEndTime:%{private}f", &v104, 12);
      v95 = (uint8_t *)v94;
      sub_100512490("Generic", 1, 0, 2, "void CLVO2MaxEstimator::retrocomputeVO2Max(CFAbsoluteTime, const std::vector<VO2MaxInput> &, const std::vector<VO2MaxSummary> &, const CLBodyMetrics &, double, double, CMWorkoutType, CLWorkoutSessionDetails::Type, VO2MaxRetrocomputeSessionResult &)", "%s\n", v94);
      if (v95 != buf)
        free(v95);
    }
  }
  else
  {
    srca = (unsigned __int8 *)(a1 + 56);
    uuid_copy((unsigned __int8 *)(a1 + 56), src);
    v19 = *a4;
    v20 = a4[1];
    v21 = a4[2];
    *(_OWORD *)(a1 + 1316) = *(__int128 *)((char *)a4 + 44);
    *(_OWORD *)(a1 + 1288) = v20;
    *(_OWORD *)(a1 + 1304) = v21;
    *(_OWORD *)(a1 + 1272) = v19;
    *(_DWORD *)(a1 + 1608) = a6;
    *(_QWORD *)a1 = a5;
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(*a2 + 32);
    sub_100AD3654(a1 + 896, (uint64_t)a4);
    v22 = a10;
    v98 = a1 + 896;
    sub_100E3F8A4(a1 + 896, v22);
    *(_QWORD *)(a1 + 936) = *(_QWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 944) = *(_DWORD *)(a1 + 1608);
    v24 = *a2;
    v23 = a2[1];
    if (*a2 != v23)
    {
      v25 = (char **)(a1 + 1248);
      do
      {
        sub_100AD2D14(v98, v24, (uint64_t)buf);
        v26 = *(_QWORD *)(a1 + 1256);
        v27 = *(_QWORD *)(a1 + 1264);
        if (v26 >= v27)
        {
          v32 = 0x8E38E38E38E38E39 * ((uint64_t)(v26 - (_QWORD)*v25) >> 3);
          v33 = v32 + 1;
          if (v32 + 1 > 0x38E38E38E38E38ELL)
            sub_100259694();
          v34 = 0x8E38E38E38E38E39 * ((uint64_t)(v27 - (_QWORD)*v25) >> 3);
          if (2 * v34 > v33)
            v33 = 2 * v34;
          if (v34 >= 0x1C71C71C71C71C7)
            v35 = 0x38E38E38E38E38ELL;
          else
            v35 = v33;
          if (v35)
            v36 = (char *)sub_10029D26C(a1 + 1264, v35);
          else
            v36 = 0;
          v37 = &v36[72 * v32];
          *(_OWORD *)v37 = *(_OWORD *)buf;
          v38 = v112;
          v39 = v113;
          v40 = v114;
          *((_QWORD *)v37 + 8) = v115;
          *((_OWORD *)v37 + 2) = v39;
          *((_OWORD *)v37 + 3) = v40;
          *((_OWORD *)v37 + 1) = v38;
          v41 = *(char **)(a1 + 1256);
          v42 = *(char **)(a1 + 1248);
          v43 = v37;
          if (v41 != v42)
          {
            do
            {
              *(_OWORD *)(v43 - 72) = *(_OWORD *)(v41 - 72);
              v44 = *(_OWORD *)(v41 - 56);
              v45 = *(_OWORD *)(v41 - 40);
              v46 = *(_OWORD *)(v41 - 24);
              *((_DWORD *)v43 - 2) = *((_DWORD *)v41 - 2);
              *(_OWORD *)(v43 - 24) = v46;
              *(_OWORD *)(v43 - 40) = v45;
              *(_OWORD *)(v43 - 56) = v44;
              v43 -= 72;
              v41 -= 72;
            }
            while (v41 != v42);
            v41 = *v25;
          }
          *(_QWORD *)(a1 + 1248) = v43;
          v31 = v37 + 72;
          *(_QWORD *)(a1 + 1256) = v37 + 72;
          *(_QWORD *)(a1 + 1264) = &v36[72 * v35];
          if (v41)
            operator delete(v41);
        }
        else
        {
          *(_OWORD *)v26 = *(_OWORD *)buf;
          v28 = v112;
          v29 = v113;
          v30 = v114;
          *(_QWORD *)(v26 + 64) = v115;
          *(_OWORD *)(v26 + 32) = v29;
          *(_OWORD *)(v26 + 48) = v30;
          *(_OWORD *)(v26 + 16) = v28;
          v31 = (char *)(v26 + 72);
        }
        *(_QWORD *)(a1 + 1256) = v31;
        v24 += 112;
      }
      while (v24 != v23);
    }
    *(double *)(a1 + 1600) = vabdd_f64(*(double *)(a1 + 928), *(double *)(a1 + 920));
    v104 = 0x7FEFFFFFFFFFFFFFuLL;
    v105 = 0xBFF0000000000000;
    v107 = 0;
    v110 = 0;
    v106[0] = 0;
    v108 = 0;
    v109 = 0;
    __p = 0;
    v102 = 0;
    v103 = 0;
    v100 = 0;
    v118 = 0u;
    v119 = 0u;
    v116 = 0u;
    v117 = 0u;
    v114 = 0u;
    v115 = 0u;
    v112 = 0u;
    v113 = 0u;
    *(_OWORD *)buf = 0u;
    v99 = sub_10100FCBC(a1, (uint64_t)&v104, &__p, &v100, (uint64_t)buf, a3, a8, a9);
    v47 = (unsigned __int8 *)__p;
    v48 = v102;
    if (__p != v102)
    {
      v49 = src + 32;
      do
      {
        uuid_copy(v47 + 24, srca);
        *((_QWORD *)v47 + 2) = *(_QWORD *)a1;
        *((_DWORD *)v47 + 45) = *(_DWORD *)(a1 + 1608);
        v50 = *((_QWORD *)src + 5);
        v51 = *((_QWORD *)src + 6);
        if (v50 >= v51)
        {
          v62 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(v50 - *(_QWORD *)v49) >> 3);
          v63 = v62 + 1;
          if (v62 + 1 > 0x1642C8590B21642)
            sub_100259694();
          v64 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(v51 - *(_QWORD *)v49) >> 3);
          if (2 * v64 > v63)
            v63 = 2 * v64;
          if (v64 >= 0xB21642C8590B21)
            v65 = 0x1642C8590B21642;
          else
            v65 = v63;
          if (v65)
            v66 = (char *)sub_10055ADA8((uint64_t)(src + 48), v65);
          else
            v66 = 0;
          v67 = &v66[184 * v62];
          v68 = *(_OWORD *)v47;
          v69 = *((_OWORD *)v47 + 1);
          v70 = *((_OWORD *)v47 + 3);
          *((_OWORD *)v67 + 2) = *((_OWORD *)v47 + 2);
          *((_OWORD *)v67 + 3) = v70;
          *(_OWORD *)v67 = v68;
          *((_OWORD *)v67 + 1) = v69;
          v71 = *((_OWORD *)v47 + 4);
          v72 = *((_OWORD *)v47 + 5);
          v73 = *((_OWORD *)v47 + 7);
          *((_OWORD *)v67 + 6) = *((_OWORD *)v47 + 6);
          *((_OWORD *)v67 + 7) = v73;
          *((_OWORD *)v67 + 4) = v71;
          *((_OWORD *)v67 + 5) = v72;
          v74 = *((_OWORD *)v47 + 8);
          v75 = *((_OWORD *)v47 + 9);
          v76 = *((_OWORD *)v47 + 10);
          *((_QWORD *)v67 + 22) = *((_QWORD *)v47 + 22);
          *((_OWORD *)v67 + 9) = v75;
          *((_OWORD *)v67 + 10) = v76;
          *((_OWORD *)v67 + 8) = v74;
          v78 = (char *)*((_QWORD *)src + 4);
          v77 = (char *)*((_QWORD *)src + 5);
          v79 = v67;
          if (v77 != v78)
          {
            do
            {
              v80 = *(_OWORD *)(v77 - 184);
              v81 = *(_OWORD *)(v77 - 168);
              v82 = *(_OWORD *)(v77 - 152);
              *(_OWORD *)(v79 - 136) = *(_OWORD *)(v77 - 136);
              *(_OWORD *)(v79 - 152) = v82;
              *(_OWORD *)(v79 - 168) = v81;
              *(_OWORD *)(v79 - 184) = v80;
              v83 = *(_OWORD *)(v77 - 120);
              v84 = *(_OWORD *)(v77 - 104);
              v85 = *(_OWORD *)(v77 - 88);
              *(_OWORD *)(v79 - 72) = *(_OWORD *)(v77 - 72);
              *(_OWORD *)(v79 - 88) = v85;
              *(_OWORD *)(v79 - 104) = v84;
              *(_OWORD *)(v79 - 120) = v83;
              v86 = *(_OWORD *)(v77 - 56);
              v87 = *(_OWORD *)(v77 - 40);
              v88 = *(_OWORD *)(v77 - 24);
              *((_QWORD *)v79 - 1) = *((_QWORD *)v77 - 1);
              *(_OWORD *)(v79 - 24) = v88;
              *(_OWORD *)(v79 - 40) = v87;
              *(_OWORD *)(v79 - 56) = v86;
              v79 -= 184;
              v77 -= 184;
            }
            while (v77 != v78);
            v77 = *(char **)v49;
          }
          v61 = v67 + 184;
          *((_QWORD *)src + 4) = v79;
          *((_QWORD *)src + 5) = v67 + 184;
          *((_QWORD *)src + 6) = &v66[184 * v65];
          if (v77)
            operator delete(v77);
        }
        else
        {
          v52 = *(_OWORD *)v47;
          v53 = *((_OWORD *)v47 + 1);
          v54 = *((_OWORD *)v47 + 3);
          *(_OWORD *)(v50 + 32) = *((_OWORD *)v47 + 2);
          *(_OWORD *)(v50 + 48) = v54;
          *(_OWORD *)v50 = v52;
          *(_OWORD *)(v50 + 16) = v53;
          v55 = *((_OWORD *)v47 + 4);
          v56 = *((_OWORD *)v47 + 5);
          v57 = *((_OWORD *)v47 + 7);
          *(_OWORD *)(v50 + 96) = *((_OWORD *)v47 + 6);
          *(_OWORD *)(v50 + 112) = v57;
          *(_OWORD *)(v50 + 64) = v55;
          *(_OWORD *)(v50 + 80) = v56;
          v58 = *((_OWORD *)v47 + 8);
          v59 = *((_OWORD *)v47 + 9);
          v60 = *((_OWORD *)v47 + 10);
          *(_QWORD *)(v50 + 176) = *((_QWORD *)v47 + 22);
          *(_OWORD *)(v50 + 144) = v59;
          *(_OWORD *)(v50 + 160) = v60;
          *(_OWORD *)(v50 + 128) = v58;
          v61 = (char *)(v50 + 184);
        }
        *((_QWORD *)src + 5) = v61;
        v47 += 184;
      }
      while (v47 != v48);
    }
    if (sub_101010A70(a1, &v99, v106))
    {
      uuid_copy((unsigned __int8 *)&v115 + 8, srca);
      BYTE13(v117) = 1;
      BYTE12(v117) = *(_BYTE *)(a1 + 1328);
      *(_OWORD *)(src + 56) = *(_OWORD *)buf;
      v89 = v114;
      *(_OWORD *)(src + 120) = v115;
      *(_OWORD *)(src + 104) = v89;
      v90 = v112;
      *(_OWORD *)(src + 88) = v113;
      *(_OWORD *)(src + 72) = v90;
      v91 = v118;
      *(_OWORD *)(src + 184) = v119;
      *(_OWORD *)(src + 168) = v91;
      v92 = v117;
      *(_OWORD *)(src + 136) = v116;
      *(_OWORD *)(src + 152) = v92;
    }
    sub_10101123C(v98, a1 + 1336);
    if (__p)
    {
      v102 = (unsigned __int8 *)__p;
      operator delete(__p);
    }
  }
}

void sub_101011210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float sub_10101123C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  int v29;
  float v30;
  double v31;
  int v32;
  float result;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  const char *v47;
  uint8_t *v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  uint8_t buf[4];
  int v60;
  __int16 v61;
  int v62;
  __int16 v63;
  int v64;
  __int16 v65;
  int v66;
  __int16 v67;
  int v68;
  __int16 v69;
  int v70;
  __int16 v71;
  int v72;
  __int16 v73;
  int v74;
  __int16 v75;
  int v76;
  __int16 v77;
  int v78;
  __int16 v79;
  int v80;
  __int16 v81;
  int v82;
  __int16 v83;
  int v84;
  __int16 v85;
  int v86;
  __int16 v87;
  int v88;
  __int16 v89;
  int v90;
  __int16 v91;
  int v92;
  __int16 v93;
  int v94;
  __int16 v95;
  uint64_t v96;
  __int16 v97;
  int v98;

  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_102199928);
  v4 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(a1 + 64);
    v6 = *(_DWORD *)(a1 + 68);
    v7 = *(_DWORD *)(a1 + 72);
    v8 = *(_DWORD *)(a1 + 76);
    v9 = *(_DWORD *)(a1 + 80);
    v10 = *(_DWORD *)(a1 + 84);
    v11 = *(_DWORD *)(a1 + 88);
    v12 = *(_DWORD *)(a1 + 92);
    v14 = *(_DWORD *)(a1 + 96);
    v13 = *(_DWORD *)(a1 + 100);
    v15 = *(_DWORD *)(a1 + 104);
    v16 = *(_DWORD *)(a1 + 108);
    v17 = *(_DWORD *)(a1 + 120);
    v18 = *(_DWORD *)(a1 + 124);
    v19 = *(_DWORD *)(a1 + 112);
    v20 = *(_DWORD *)(a1 + 116);
    v21 = *(_QWORD *)(a1 + 40);
    v22 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)buf = 67113984;
    v60 = v5;
    v61 = 1024;
    v62 = 0;
    v63 = 1024;
    v64 = v6;
    v65 = 1024;
    v66 = v7;
    v67 = 1024;
    v68 = 0;
    v69 = 1024;
    v70 = v8;
    v71 = 1024;
    v72 = v9;
    v73 = 1024;
    v74 = v10;
    v75 = 1024;
    v76 = v11;
    v77 = 1024;
    v78 = v12;
    v79 = 1024;
    v80 = v14;
    v81 = 1024;
    v82 = v13;
    v83 = 1024;
    v84 = v15;
    v85 = 1024;
    v86 = v16;
    v87 = 1024;
    v88 = v17;
    v89 = 1024;
    v90 = v18;
    v91 = 1024;
    v92 = v19;
    v93 = 1024;
    v94 = v20;
    v95 = 2048;
    v96 = v21;
    v97 = 1024;
    v98 = v22;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PreProcessor,PairStats,total,%d,warmup,%d,grade,%d,flat,%d,delta,%d,metsAboveMin,%d,gps,%d,stride,%d,distance,%d,source,%d,hrOK,%d,totalWorkoutLengthOK,%d,totalPaceOK,%d,totalStrollerOK,%d,totalPercentWalkingOK,%d,metsAboveAdaptiveMin,%d,totalGoodForClustering,%d,totalGoodForAdaptiveModel,%d,workoutStartTime,%f,workoutSessionType,%d", buf, 0x7Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102199928);
    v34 = *(_DWORD *)(a1 + 68);
    v35 = *(_DWORD *)(a1 + 76);
    v36 = *(_DWORD *)(a1 + 80);
    v37 = *(_DWORD *)(a1 + 84);
    v38 = *(_DWORD *)(a1 + 92);
    v39 = *(_DWORD *)(a1 + 96);
    v40 = *(_DWORD *)(a1 + 100);
    v41 = *(_DWORD *)(a1 + 108);
    v42 = *(_DWORD *)(a1 + 120);
    v43 = *(_DWORD *)(a1 + 124);
    v44 = *(_DWORD *)(a1 + 116);
    v45 = *(_QWORD *)(a1 + 40);
    v46 = *(_DWORD *)(a1 + 48);
    LOWORD(v50) = HIWORD(*(_DWORD *)(a1 + 72));
    HIWORD(v50) = 1024;
    LOWORD(v51) = 1024;
    HIWORD(v51) = v35;
    LOWORD(v52) = HIWORD(v37);
    HIWORD(v52) = 1024;
    LOWORD(v53) = 1024;
    HIWORD(v53) = v38;
    LOWORD(v54) = HIWORD(v40);
    HIWORD(v54) = 1024;
    LOWORD(v55) = 1024;
    HIWORD(v55) = v41;
    LOWORD(v56) = HIWORD(v43);
    HIWORD(v56) = 1024;
    LOWORD(v57) = 1024;
    HIWORD(v57) = v44;
    LOWORD(v58) = 1024;
    HIWORD(v58) = v46;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "PreProcessor,PairStats,total,%d,warmup,%d,grade,%d,flat,%d,delta,%d,metsAboveMin,%d,gps,%d,stride,%d,distance,%d,source,%d,hrOK,%d,totalWorkoutLengthOK,%d,totalPaceOK,%d,totalStrollerOK,%d,totalPercentWalkingOK,%d,metsAboveAdaptiveMin,%d,totalGoodForClustering,%d,totalGoodForAdaptiveModel,%d,workoutStartTime,%f,workoutSessionType,%d", &v49, 126, 67113984, 1024, v34, v50, v51, v36, v52,
      v53,
      v39,
      v54,
      v55,
      v42,
      v56,
      v57,
      v45,
      v58);
    v48 = (uint8_t *)v47;
    sub_100512490("Generic", 1, 0, 2, "void CLVO2MaxPreprocessor::log(T &) [T = CLVO2MaxStats]", "%s\n", v47);
    if (v48 != buf)
      free(v48);
  }
  *(_DWORD *)(a2 + 228) = 100;
  v23 = *(_DWORD *)(a1 + 64);
  if (v23)
  {
    v24 = (float)(100 * *(_DWORD *)(a1 + 96) / v23);
    *(_DWORD *)(a2 + 224) = v24;
    *(float *)(a2 + 248) = (float)(100 * *(_DWORD *)(a1 + 72) / v23);
    *(float *)(a2 + 252) = (float)(100 * *(_DWORD *)(a1 + 84) / v23);
    v25 = (float)(100 * *(_DWORD *)(a1 + 80) / v23);
    v26 = (float)(100 * *(_DWORD *)(a1 + 128) / v23);
    v27 = (float)(100 * *(_DWORD *)(a1 + 132) / v23);
    v28 = (float)(100 * *(_DWORD *)(a1 + 136) / v23);
  }
  else
  {
    *(_DWORD *)(a2 + 224) = 0;
    v25 = 0.0;
    v24 = 0.0;
    v26 = 0.0;
    v27 = 0.0;
    *(_QWORD *)(a2 + 248) = 0;
    v28 = 0.0;
  }
  *(float *)(a2 + 148) = v25;
  *(float *)(a2 + 152) = v24;
  *(float *)(a2 + 160) = v26;
  *(float *)(a2 + 164) = v27;
  *(float *)(a2 + 176) = v28;
  v29 = *(_DWORD *)(a1 + 200);
  if (v29 <= 0)
  {
    *(_DWORD *)(a2 + 168) = 0;
    v31 = 0.0;
  }
  else
  {
    v30 = *(double *)(a1 + 216);
    *(float *)(a2 + 168) = v30;
    v31 = 0.0;
    v32 = v29 - 1;
    if (v32)
      v31 = *(double *)(a1 + 232) / (double)v32;
  }
  result = sqrt(v31);
  *(float *)(a2 + 172) = result;
  *(_DWORD *)(a2 + 192) = *(_DWORD *)(a1 + 16);
  return result;
}

BOOL sub_10101168C(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;
  _BYTE *v4;
  unint64_t v5;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;

  v7 = 0;
  v8 = 0;
  v9 = 0;
  v2 = sub_101125448();
  sub_101125B34(v2, &v7);
  v3 = v7;
  v4 = v8;
  v5 = *(int *)(a1 + 1688);
  if (v7)
  {
    v8 = v7;
    operator delete(v7);
  }
  return 0x8E38E38E38E38E39 * ((v4 - v3) >> 4) >= v5;
}

void sub_101011708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_101011724(uint64_t a1)
{
  const unsigned __int8 *v1;
  uint64_t v2;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = (const unsigned __int8 *)(a1 + 56);
  if (!uuid_compare((const unsigned __int8 *)(a1 + 40), (const unsigned __int8 *)(a1 + 56)))
    return 1;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v2 = sub_101125448();
  return sub_101125B44(v2, v1, &v4);
}

void sub_1010117AC(uint64_t a1, int a2, double a3, double a4)
{
  float v8;
  float v9;
  float v10;
  __int128 v11;
  float v12;
  float v13;
  uint64_t v14;
  char v15;
  BOOL v16;
  float v17;
  float v18;
  int v19;
  uint64_t v20;
  double *v21;
  double *v22;
  int v23;
  double v24;
  float v25;
  int v26;
  float v27;
  float v28;
  double *v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  int v36;
  double v37;
  double v38;
  double v39;
  uint64_t v40;
  float v41;
  float v42;
  double v43;
  double v44;
  float v45;
  float v46;
  unint64_t v47;
  float v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  _DWORD *v54;
  double *v55;
  int v56;
  signed int v57;
  signed int v58;
  double *v59;
  BOOL v60;
  int v61;
  float v62;
  float v63;
  float v64;
  NSObject *v65;
  int v66;
  int v67;
  int v68;
  int v69;
  NSObject *v70;
  int v71;
  double v72;
  double v73;
  NSObject *v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  uint64_t v81;
  int v82;
  int v83;
  int v84;
  int v85;
  void *v86;
  ALActivityLog *v87;
  ALCLJacksonData *v88;
  double v89;
  ALCLJacksonData *v90;
  double v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  int v97;
  int v98;
  const char *v99;
  uint8_t *v100;
  int v101;
  double v102;
  double v103;
  const char *v104;
  uint8_t *v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  uint64_t v112;
  int v113;
  int v114;
  int v115;
  int v116;
  const char *v117;
  uint8_t *v118;
  double v119;
  void *__p;
  double *v121;
  double v122;
  double v123;
  __int128 v124;
  __int128 v125;
  _OWORD v126[2];
  int v127;
  __int128 v128;
  _BYTE v129[14];
  __int16 v130;
  double v131;
  __int16 v132;
  double v133;
  __int16 v134;
  double v135;
  __int16 v136;
  double v137;
  __int16 v138;
  double v139;
  __int16 v140;
  double v141;
  __int16 v142;
  double v143;
  __int16 v144;
  double v145;
  __int16 v146;
  double v147;
  __int16 v148;
  double v149;
  __int16 v150;
  double v151;
  __int16 v152;
  double v153;
  __int16 v154;
  double v155;
  __int16 v156;
  double v157;
  __int16 v158;
  double v159;
  __int16 v160;
  double v161;
  __int16 v162;
  double v163;
  __int16 v164;
  double v165;
  __int16 v166;
  double v167;
  __int16 v168;
  double v169;
  __int16 v170;
  double v171;
  __int16 v172;
  double v173;
  __int16 v174;
  double v175;
  __int16 v176;
  double v177;
  __int16 v178;
  double v179;
  __int16 v180;
  double v181;
  __int16 v182;
  double v183;
  __int16 v184;
  double v185;
  __int16 v186;
  int v187;
  __int16 v188;
  int v189;
  __int16 v190;
  int v191;
  __int16 v192;
  double v193;
  __int16 v194;
  int v195;
  __int16 v196;
  double v197;
  __int16 v198;
  double v199;
  __int16 v200;
  double v201;
  __int16 v202;
  double v203;
  __int16 v204;
  double v205;
  __int16 v206;
  double v207;
  __int16 v208;
  double v209;
  __int16 v210;
  double v211;
  __int16 v212;
  int v213;
  __int16 v214;
  int v215;
  __int16 v216;
  double v217;
  __int16 v218;
  int v219;
  __int16 v220;
  int v221;
  __int16 v222;
  int v223;
  __int16 v224;
  int v225;
  uint8_t buf[4];
  __int128 v227;
  _BYTE v228[14];
  __int16 v229;
  double v230;
  __int16 v231;
  double v232;
  __int16 v233;
  double v234;
  __int16 v235;
  double v236;
  __int16 v237;
  double v238;
  __int16 v239;
  double v240;
  __int16 v241;
  double v242;
  __int16 v243;
  double v244;
  __int16 v245;
  double v246;
  __int16 v247;
  double v248;
  __int16 v249;
  double v250;
  __int16 v251;
  double v252;
  __int16 v253;
  double v254;
  __int16 v255;
  double v256;
  __int16 v257;
  double v258;
  __int16 v259;
  double v260;
  __int16 v261;
  double v262;
  __int16 v263;
  double v264;
  __int16 v265;
  double v266;
  __int16 v267;
  double v268;
  __int16 v269;
  double v270;
  __int16 v271;
  double v272;
  __int16 v273;
  double v274;
  __int16 v275;
  double v276;
  __int16 v277;
  double v278;
  __int16 v279;
  double v280;
  __int16 v281;
  double v282;
  __int16 v283;
  double v284;
  __int16 v285;
  int v286;
  __int16 v287;
  int v288;
  __int16 v289;
  int v290;
  __int16 v291;
  double v292;
  __int16 v293;
  int v294;
  __int16 v295;
  double v296;
  __int16 v297;
  double v298;
  __int16 v299;
  double v300;
  __int16 v301;
  double v302;
  __int16 v303;
  double v304;
  __int16 v305;
  double v306;
  __int16 v307;
  double v308;
  __int16 v309;
  double v310;
  __int16 v311;
  int v312;
  __int16 v313;
  int v314;
  __int16 v315;
  double v316;
  __int16 v317;
  int v318;
  __int16 v319;
  int v320;
  __int16 v321;
  int v322;
  __int16 v323;
  int v324;

  sub_10101123C(a1 + 896, a1 + 1336);
  *(_DWORD *)(a1 + 1532) = a2;
  *(_QWORD *)(a1 + 1520) = *(_QWORD *)a1;
  *(_DWORD *)(a1 + 1536) = *(_DWORD *)(a1 + 1608);
  v8 = *(double *)(a1 + 1616) * 100.0;
  *(float *)(a1 + 1492) = v8;
  v9 = *(double *)(a1 + 1600);
  *(float *)(a1 + 1516) = v9;
  v10 = -1.0;
  if (!a2)
  {
    v11 = *(_OWORD *)(a1 + 1288);
    v124 = *(_OWORD *)(a1 + 1272);
    v125 = v11;
    v126[0] = *(_OWORD *)(a1 + 1304);
    *(_OWORD *)((char *)v126 + 12) = *(_OWORD *)(a1 + 1316);
    sub_100653518((uint64_t)&v124);
    v13 = ((float)(v12 * 3.5) - a3) * 100.0 / a3;
    if (v13 > 100.0)
      v13 = 100.0;
    if (v13 >= -100.0)
      v10 = v13 + 100.0;
    else
      v10 = 0.0;
  }
  HIBYTE(v123) = 0;
  v14 = sub_1001FD94C();
  sub_1001E48E4(v14, (uint64_t)CFSTR("ActiveJacksonCalibration"), (BOOL *)&v123 + 7);
  *(_DWORD *)(a1 + 1568) = 0x80000000;
  v15 = HIBYTE(v123);
  v16 = a2 != 0;
  if (!HIBYTE(v123))
    v16 = 1;
  if (v16 || (v17 = *(float *)(a1 + 1316), v17 == 0.0))
  {
    v19 = 0;
  }
  else
  {
    v18 = a3 / 3.5;
    *(_DWORD *)(a1 + 1568) = (int)((float)(v18 - v17) * 100.0 / v17);
    v19 = 1;
  }
  *(float *)(a1 + 1576) = v10;
  *(_BYTE *)(a1 + 1580) = v15;
  __p = 0;
  v121 = 0;
  v122 = 0.0;
  v20 = sub_101125448();
  sub_101125B3C(v20, &__p, 0);
  v21 = (double *)__p;
  v22 = v121;
  if (__p == v121)
  {
    v34 = 0.0;
  }
  else
  {
    v23 = 0;
    v24 = 0.0;
    v25 = 0.0;
    v26 = 1;
    v27 = 0.0;
    v28 = 0.0;
    v29 = (double *)__p;
    v30 = 0.0;
    v31 = 0.0;
    v32 = 0.0;
    v33 = 0.0;
    v34 = 0.0;
    do
    {
      v35 = v30;
      v36 = v26;
      v37 = v29[4];
      v38 = v37;
      v39 = 0.0;
      if (v26 != 1)
      {
        v38 = v34 + (v37 - v34) / (double)v26;
        v39 = v33 + (v37 - v34) * (v37 - v38);
        v32 = v39;
      }
      v33 = v39;
      v34 = v38;
      if (v29[3] <= a4 + -604800.0)
      {
        v37 = v24;
      }
      else if (v23)
      {
        v31 = v24 + (v37 - v24) / (double)++v23;
        v37 = v31;
      }
      else
      {
        v23 = 1;
        v31 = v29[4];
      }
      v30 = v35 + 1.0;
      v40 = *((_QWORD *)v29 + 5);
      v41 = v28 + 1.0;
      v42 = v25 + 1.0;
      if (v40 != 15)
        v42 = v25;
      if (v40 == 17)
        v42 = v25;
      else
        v41 = v28;
      if (v40 == 24)
        v27 = v27 + 1.0;
      else
        v28 = v41;
      if (v40 != 24)
        v25 = v42;
      v29 += 18;
      v26 = v36 + 1;
      v24 = v37;
    }
    while (v29 != v121);
    if (v34 > 0.0)
    {
      v43 = 0.0;
      if (v23 <= 0)
        v44 = 0.0;
      else
        v44 = v31;
      v45 = v44 / v34;
      *(float *)(a1 + 1444) = v45;
      if (v36 != 1)
        v43 = v32 / v35;
      v46 = sqrt(v43);
      *(float *)(a1 + 1440) = v46;
    }
    if (v21 != v22)
    {
      v47 = 0x8E38E38E38E38E39 * (((char *)v22 - (char *)v21) >> 4);
      if (v47 >= 2)
      {
        v48 = v21[4] / v21[22];
        *(float *)(a1 + 1448) = v48;
      }
      *(float *)(a1 + 1452) = v25 / (float)v47;
      *(float *)(a1 + 1456) = v28 / (float)v47;
      *(float *)(a1 + 1460) = v27 / (float)v47;
    }
  }
  v121 = v21;
  v49 = sub_101125448();
  v50 = sub_101125B3C(v49, &__p, 1);
  *(_DWORD *)(a1 + 1464) = 954437177 * ((unint64_t)((char *)v121 - (_BYTE *)__p) >> 4);
  v51 = sub_101012B24(a4 + -7257600.0, v50, &__p);
  *(_DWORD *)(a1 + 1468) = v51;
  sub_101012D44(v51, &__p);
  *(float *)&v52 = v52;
  *(_DWORD *)(a1 + 1480) = LODWORD(v52);
  v53 = -[NSTimeZone secondsFromGMT](+[NSTimeZone localTimeZone](NSTimeZone, "localTimeZone"), "secondsFromGMT");
  v54 = __p;
  v55 = v121;
  if (v121 == __p)
  {
    v61 = 0;
    *(_DWORD *)(a1 + 1472) = 0;
  }
  else
  {
    v56 = 0;
    v57 = 0;
    do
    {
      v58 = vcvtmd_s64_f64((*(v55 - 15) + (double)v53) / 86400.0);
      v59 = v55 - 18;
      v60 = v57 < v58;
      if (v57 <= v58)
        v57 = v58;
      if (v60)
        ++v56;
      v55 -= 18;
    }
    while (v59 != __p);
    *(_DWORD *)(a1 + 1472) = v56;
    v61 = v54[28];
  }
  *(_DWORD *)(a1 + 1476) = v61;
  *(_DWORD *)(a1 + 1340) = *(_DWORD *)(a1 + 1292);
  *(_DWORD *)(a1 + 1336) = *(_DWORD *)(a1 + 1276);
  *(_BYTE *)(a1 + 1344) = *(_BYTE *)(a1 + 1320);
  v62 = *(float *)(a1 + 1284);
  if (v62 != 0.0)
  {
    v63 = *(float *)(a1 + 1280);
    if (v63 != 0.0)
      *(float *)(a1 + 1348) = v62 / (float)(v63 * v63);
  }
  v64 = v34;
  if (v21 == v22)
    v64 = 0.0;
  *(float *)(a1 + 1352) = v64;
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_102199928);
  v65 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    v66 = *(_DWORD *)(a1 + 1552);
    v67 = *(_DWORD *)(a1 + 1556);
    v68 = *(_DWORD *)(a1 + 1560);
    v69 = *(_DWORD *)(a1 + 1564);
    *(_DWORD *)buf = 67109888;
    LODWORD(v227) = v66;
    WORD2(v227) = 1024;
    *(_DWORD *)((char *)&v227 + 6) = v67;
    WORD5(v227) = 1024;
    HIDWORD(v227) = v68;
    *(_WORD *)v228 = 1024;
    *(_DWORD *)&v228[2] = v69;
    _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEBUG, "VO2Max,pctHRSamplesValidMin,%d,pctHRSamplesValidMax,%d,pctHRSamplesWithRecentHR,%d,pctMETSamplesWithValidDelta,%d", buf, 0x1Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102199928);
    v95 = *(_DWORD *)(a1 + 1552);
    v96 = *(_DWORD *)(a1 + 1556);
    v97 = *(_DWORD *)(a1 + 1560);
    v98 = *(_DWORD *)(a1 + 1564);
    v127 = 67109888;
    LODWORD(v128) = v95;
    WORD2(v128) = 1024;
    *(_DWORD *)((char *)&v128 + 6) = v96;
    WORD5(v128) = 1024;
    HIDWORD(v128) = v97;
    *(_WORD *)v129 = 1024;
    *(_DWORD *)&v129[2] = v98;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "VO2Max,pctHRSamplesValidMin,%d,pctHRSamplesValidMax,%d,pctHRSamplesWithRecentHR,%d,pctMETSamplesWithValidDelta,%d", &v127, 26, (_DWORD)__p, (_DWORD)v121);
    v100 = (uint8_t *)v99;
    sub_100512490("Generic", 1, 0, 2, "void CLVO2MaxEstimator::logSessionStats(double, VO2MaxEstimationStatus, CFAbsoluteTime)", "%s\n", v99);
    if (v100 != buf)
      free(v100);
  }
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_102199928);
  v70 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    v71 = *(_DWORD *)(a1 + 1568);
    v72 = a3 / 3.5;
    v73 = *(float *)(a1 + 1316);
    *(_DWORD *)buf = 67109632;
    LODWORD(v227) = v71;
    WORD2(v227) = 2048;
    *(double *)((char *)&v227 + 6) = v73;
    if (!v19)
      v72 = 0.0;
    HIWORD(v227) = 2048;
    *(double *)v228 = v72;
    _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEBUG, "VO2Max,longitudinalConsistency,%d,old,%f,new,%f", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102199928);
    v101 = *(_DWORD *)(a1 + 1568);
    v102 = a3 / 3.5;
    v103 = *(float *)(a1 + 1316);
    v127 = 67109632;
    LODWORD(v128) = v101;
    WORD2(v128) = 2048;
    *(double *)((char *)&v128 + 6) = v103;
    if (!v19)
      v102 = 0.0;
    HIWORD(v128) = 2048;
    *(double *)v129 = v102;
    LODWORD(v119) = 28;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "VO2Max,longitudinalConsistency,%d,old,%f,new,%f", &v127, v119, *(double *)&__p);
    v105 = (uint8_t *)v104;
    sub_100512490("Generic", 1, 0, 2, "void CLVO2MaxEstimator::logSessionStats(double, VO2MaxEstimationStatus, CFAbsoluteTime)", "%s\n", v104);
    if (v105 != buf)
      free(v105);
  }
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_102199928);
  v74 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134231040;
    *(double *)&v227 = *(float *)(a1 + 1340);
    *(double *)&v228[6] = *(float *)(a1 + 1348);
    v230 = *(float *)(a1 + 1352);
    v232 = *(float *)(a1 + 1356);
    v234 = *(float *)(a1 + 1360);
    v236 = *(float *)(a1 + 1364);
    v238 = *(float *)(a1 + 1368);
    v240 = *(float *)(a1 + 1372);
    v242 = *(float *)(a1 + 1376);
    v244 = *(float *)(a1 + 1380);
    v246 = *(float *)(a1 + 1384);
    v248 = *(float *)(a1 + 1388);
    v250 = *(float *)(a1 + 1392);
    v252 = *(float *)(a1 + 1396);
    v254 = *(float *)(a1 + 1404);
    v256 = v254;
    v258 = *(float *)(a1 + 1408);
    v260 = *(float *)(a1 + 1416);
    v262 = v260;
    v264 = *(float *)(a1 + 1420);
    v266 = *(float *)(a1 + 1432);
    v270 = v266;
    v268 = *(float *)(a1 + 1436);
    v272 = v268;
    v274 = *(float *)(a1 + 1440);
    v276 = *(float *)(a1 + 1444);
    v278 = *(float *)(a1 + 1448);
    v280 = *(float *)(a1 + 1452);
    v282 = *(float *)(a1 + 1456);
    v284 = *(float *)(a1 + 1460);
    v292 = *(float *)(a1 + 1480);
    v296 = *(float *)(a1 + 1484);
    v298 = *(float *)(a1 + 1488);
    v300 = *(float *)(a1 + 1492);
    v302 = *(float *)(a1 + 1496);
    v304 = *(float *)(a1 + 1500);
    v306 = *(float *)(a1 + 1504);
    v308 = *(float *)(a1 + 1508);
    v310 = *(float *)(a1 + 1512);
    v316 = *(float *)(a1 + 1516);
    v75 = *(_DWORD *)(a1 + 1336);
    v76 = *(unsigned __int8 *)(a1 + 1344);
    v77 = *(_DWORD *)(a1 + 1464);
    v78 = *(_DWORD *)(a1 + 1468);
    v79 = *(_DWORD *)(a1 + 1472);
    v80 = *(_DWORD *)(a1 + 1476);
    v81 = *(_QWORD *)(a1 + 1520);
    v82 = *(_DWORD *)(a1 + 1536);
    v83 = *(_DWORD *)(a1 + 1528);
    v84 = *(_DWORD *)(a1 + 1532);
    v85 = *(_DWORD *)(a1 + 1544);
    WORD4(v227) = 1024;
    *(_DWORD *)((char *)&v227 + 10) = v75;
    HIWORD(v227) = 1024;
    *(_DWORD *)v228 = v76;
    *(_WORD *)&v228[4] = 2048;
    v229 = 2048;
    v231 = 2048;
    v233 = 2048;
    v235 = 2048;
    v237 = 2048;
    v239 = 2048;
    v241 = 2048;
    v243 = 2048;
    v245 = 2048;
    v247 = 2048;
    v249 = 2048;
    v251 = 2048;
    v253 = 2048;
    v255 = 2048;
    v257 = 2048;
    v259 = 2048;
    v261 = 2048;
    v263 = 2048;
    v265 = 2048;
    v267 = 2048;
    v269 = 2048;
    v271 = 2048;
    v273 = 2048;
    v275 = 2048;
    v277 = 2048;
    v279 = 2048;
    v281 = 2048;
    v283 = 2048;
    v285 = 1024;
    v286 = v77;
    v287 = 1024;
    v288 = v78;
    v289 = 1024;
    v290 = v79;
    v291 = 2048;
    v293 = 1024;
    v294 = v80;
    v295 = 2048;
    v297 = 2048;
    v299 = 2048;
    v301 = 2048;
    v303 = 2048;
    v305 = 2048;
    v307 = 2048;
    v309 = 2048;
    v311 = 1024;
    v312 = v81;
    v313 = 1024;
    v314 = v82;
    v315 = 2048;
    v317 = 1024;
    v318 = v83;
    v319 = 1024;
    v320 = v84;
    v321 = 1024;
    v322 = 3;
    v323 = 1024;
    v324 = v85;
    _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEBUG, "VO2Max,age,%.2f,biologicalSex,%d,useBetaBlocker,%d,userBMI,%.2f,vo2MaxMean,%.2f,vo2MaxPrior,%.2f,hrMaxObserved,%.2f,hrMaxAgePredicted,%.2f,hrMaxAgeAndMedicationPredicted,%.2f,hrMinBodyMetricsPredicted,%.2f,hrOnset,%.2f,hrRestingObservedOneDay,%.2f,hrRestingObservedSevenDays,%.2f,maxMetsMean,%.2f,maxMetsHigh,%.2f,vo2MaxValue,%.2f,vo2MaxValueAdaptiveModel,%.2f,vo2MaxValueOutdoorPedestrianModel,%.2f,vo2MaxValueOOB,%.2f,vo2MaxValueAdaptiveModelOOB,%.2f,vo2MaxValueOutdoorPedestrianModelOOB,%.2f,efficiency,%.2f,clustersHRMeanPedestrianModel,%.2f,clustersMetsMeanPedestrianModel,%.2f,clustersHRMeanAdaptiveModel,%.2f,clustersMetsMeanAdaptiveModel,%.2f,vo2MaxStDev,%.2f,vo2MaxTrend,%.2f,vo2MaxTrendSingleEst,%.2f,workoutTypeRatioWalk,%.2f,workoutTypeRatioRun,%.2f,workoutTypeRatioHike,%.2f,lookbackNumEstimates,%d,lookbackNumEstimatesAfterUpdate,%d,lookbackNumDaysWithEstimate,%d,lookbackEWMAPlusWeightedStDev,%.2f,numWorkoutsContrToLatestEstimate,%d,pctGPSAvailability,%.2f,pctHeartRateAvailability,%.2f,pctBackgroundEscalation,%.2f,pctHRMax,%.2f,pctHRMin,%.2f,validGradeMean,%.2f,validGradeStd,%.2f,pctGradeAboveAnalyticsThreshold,%.2f,workoutType,%d,sessionType,%d,sessionDuration,%.2f,hrMinSource,%d,vo2MaxEstimationStatus,%d,arbitrationState,%d,limitState,%d", buf, 0x1DAu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102199928);
    v127 = 134231040;
    *(double *)&v128 = *(float *)(a1 + 1340);
    *(double *)&v129[6] = *(float *)(a1 + 1348);
    v131 = *(float *)(a1 + 1352);
    v133 = *(float *)(a1 + 1356);
    v135 = *(float *)(a1 + 1360);
    v137 = *(float *)(a1 + 1364);
    v139 = *(float *)(a1 + 1368);
    v141 = *(float *)(a1 + 1372);
    v143 = *(float *)(a1 + 1376);
    v145 = *(float *)(a1 + 1380);
    v147 = *(float *)(a1 + 1384);
    v149 = *(float *)(a1 + 1388);
    v151 = *(float *)(a1 + 1392);
    v153 = *(float *)(a1 + 1396);
    v155 = *(float *)(a1 + 1404);
    v157 = v155;
    v159 = *(float *)(a1 + 1408);
    v161 = *(float *)(a1 + 1416);
    v163 = v161;
    v165 = *(float *)(a1 + 1420);
    v167 = *(float *)(a1 + 1432);
    v171 = v167;
    v169 = *(float *)(a1 + 1436);
    v173 = v169;
    v175 = *(float *)(a1 + 1440);
    v177 = *(float *)(a1 + 1444);
    v179 = *(float *)(a1 + 1448);
    v181 = *(float *)(a1 + 1452);
    v183 = *(float *)(a1 + 1456);
    v185 = *(float *)(a1 + 1460);
    v193 = *(float *)(a1 + 1480);
    v197 = *(float *)(a1 + 1484);
    v199 = *(float *)(a1 + 1488);
    v201 = *(float *)(a1 + 1492);
    v203 = *(float *)(a1 + 1496);
    v205 = *(float *)(a1 + 1500);
    v207 = *(float *)(a1 + 1504);
    v209 = *(float *)(a1 + 1508);
    v211 = *(float *)(a1 + 1512);
    v217 = *(float *)(a1 + 1516);
    v106 = *(_DWORD *)(a1 + 1336);
    v107 = *(unsigned __int8 *)(a1 + 1344);
    v108 = *(_DWORD *)(a1 + 1464);
    v109 = *(_DWORD *)(a1 + 1468);
    v110 = *(_DWORD *)(a1 + 1472);
    v111 = *(_DWORD *)(a1 + 1476);
    v112 = *(_QWORD *)(a1 + 1520);
    v113 = *(_DWORD *)(a1 + 1536);
    v114 = *(_DWORD *)(a1 + 1528);
    v115 = *(_DWORD *)(a1 + 1532);
    v116 = *(_DWORD *)(a1 + 1544);
    WORD4(v128) = 1024;
    *(_DWORD *)((char *)&v128 + 10) = v106;
    HIWORD(v128) = 1024;
    *(_DWORD *)v129 = v107;
    *(_WORD *)&v129[4] = 2048;
    v130 = 2048;
    v132 = 2048;
    v134 = 2048;
    v136 = 2048;
    v138 = 2048;
    v140 = 2048;
    v142 = 2048;
    v144 = 2048;
    v146 = 2048;
    v148 = 2048;
    v150 = 2048;
    v152 = 2048;
    v154 = 2048;
    v156 = 2048;
    v158 = 2048;
    v160 = 2048;
    v162 = 2048;
    v164 = 2048;
    v166 = 2048;
    v168 = 2048;
    v170 = 2048;
    v172 = 2048;
    v174 = 2048;
    v176 = 2048;
    v178 = 2048;
    v180 = 2048;
    v182 = 2048;
    v184 = 2048;
    v186 = 1024;
    v187 = v108;
    v188 = 1024;
    v189 = v109;
    v190 = 1024;
    v191 = v110;
    v192 = 2048;
    v194 = 1024;
    v195 = v111;
    v196 = 2048;
    v198 = 2048;
    v200 = 2048;
    v202 = 2048;
    v204 = 2048;
    v206 = 2048;
    v208 = 2048;
    v210 = 2048;
    v212 = 1024;
    v213 = v112;
    v214 = 1024;
    v215 = v113;
    v216 = 2048;
    v218 = 1024;
    v219 = v114;
    v220 = 1024;
    v221 = v115;
    v222 = 1024;
    v223 = 3;
    v224 = 1024;
    v225 = v116;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "VO2Max,age,%.2f,biologicalSex,%d,useBetaBlocker,%d,userBMI,%.2f,vo2MaxMean,%.2f,vo2MaxPrior,%.2f,hrMaxObserved,%.2f,hrMaxAgePredicted,%.2f,hrMaxAgeAndMedicationPredicted,%.2f,hrMinBodyMetricsPredicted,%.2f,hrOnset,%.2f,hrRestingObservedOneDay,%.2f,hrRestingObservedSevenDays,%.2f,maxMetsMean,%.2f,maxMetsHigh,%.2f,vo2MaxValue,%.2f,vo2MaxValueAdaptiveModel,%.2f,vo2MaxValueOutdoorPedestrianModel,%.2f,vo2MaxValueOOB,%.2f,vo2MaxValueAdaptiveModelOOB,%.2f,vo2MaxValueOutdoorPedestrianModelOOB,%.2f,efficiency,%.2f,clustersHRMeanPedestrianModel,%.2f,clustersMetsMeanPedestrianModel,%.2f,clustersHRMeanAdaptiveModel,%.2f,clustersMetsMeanAdaptiveModel,%.2f,vo2MaxStDev,%.2f,vo2MaxTrend,%.2f,vo2MaxTrendSingleEst,%.2f,workoutTypeRatioWalk,%.2f,workoutTypeRatioRun,%.2f,workoutTypeRatioHike,%.2f,lookbackNumEstimates,%d,lookbackNumEstimatesAfterUpdate,%d,lookbackNumDaysWithEstimate,%d,lookbackEWMAPlusWeightedStDev,%.2f,numWorkoutsContrToLatestEstimate,%d,pctGPSAvailability,%.2f,pctHeartRateAvailability,%.2f,pctBackgroundEscalation,%.2f,pctHRMax,%.2f,pctHRMin,%.2f,validGradeMean,%.2f,validGradeStd,%.2f,pctGradeAboveAnalyticsThreshold,%.2f,workoutType,%d,sessionType,%d,sessionDuration,%.2f,hrMinSource,%d,vo2MaxEstimationStatus,%d,arbitrationState,%d,limitState,%d", COERCE_DOUBLE(&v127),
      474,
      (_DWORD)__p,
      *(double *)&v121,
      v122,
      v123,
      *(double *)&v124,
      *((double *)&v124 + 1),
      *(double *)&v125,
      *((double *)&v125 + 1),
      *(double *)v126,
      *((double *)v126 + 1),
      *(double *)&v126[1],
      *((double *)&v126[1] + 1));
    v118 = (uint8_t *)v117;
    sub_100512490("Generic", 1, 0, 2, "void CLVO2MaxEstimator::logSessionStats(double, VO2MaxEstimationStatus, CFAbsoluteTime)", "%s\n", v117);
    if (v118 != buf)
      free(v118);
  }
  v86 = objc_autoreleasePoolPush();
  v87 = objc_alloc_init(ALActivityLog);
  -[ALActivityLog setTimestamp:](v87, "setTimestamp:", CFAbsoluteTimeGetCurrent());
  -[ALActivityLog setJacksonData:](v87, "setJacksonData:", objc_alloc_init(ALCLJacksonData));
  -[ALCLJacksonData setNPairs:](-[ALActivityLog jacksonData](v87, "jacksonData"), "setNPairs:", *(unsigned int *)(a1 + 1572));
  v88 = -[ALActivityLog jacksonData](v87, "jacksonData");
  *(float *)&v89 = a3;
  -[ALCLJacksonData setLsest:](v88, "setLsest:", v89);
  v90 = -[ALActivityLog jacksonData](v87, "jacksonData");
  LODWORD(v91) = -1.0;
  -[ALCLJacksonData setSumest:](v90, "setSumest:", v91);
  -[ALCLJacksonData setFPal:](-[ALActivityLog jacksonData](v87, "jacksonData"), "setFPal:", *(float *)(a1 + 1308));
  objc_msgSend(-[CLServiceVendor proxyForService:](+[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance"), "proxyForService:", CFSTR("CLActivityLogger")), "logData:", v87);
  objc_autoreleasePoolPop(v86);
  v92 = sub_10009ED0C();
  sub_10134C960(v92, a1 + 1336);
  v93 = sub_10009ED0C();
  sub_10134BE24(v93);
  sub_101012FA0(v94, a1 + 1336);
  if (__p)
  {
    v121 = (double *)__p;
    operator delete(__p);
  }
}

void sub_1010127DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_101012818(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  _DWORD v17[2];
  __int16 v18;
  double v19;
  __int16 v20;
  double v21;
  __int16 v22;
  double v23;
  __int16 v24;
  double v25;
  uint8_t buf[4];
  int v27;
  __int16 v28;
  double v29;
  __int16 v30;
  double v31;
  __int16 v32;
  double v33;
  __int16 v34;
  double v35;

  v1 = *(_QWORD *)(a1 + 1248);
  v2 = *(_QWORD *)(a1 + 1256);
  if (v1 == v2)
  {
    v3 = 0;
    v8 = 0.0;
    v10 = 0.0;
    v12 = 0.0;
    v7 = 0.0;
    v11 = 0.0;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = *(double *)(a1 + 32);
    v7 = 0.0;
    v8 = 0.0;
    v9 = 0.0;
    v10 = 0.0;
    v11 = 0.0;
    do
    {
      v12 = *(double *)v1;
      if (*(double *)v1 <= v6)
      {
        v12 = v9;
      }
      else
      {
        v13 = *(float *)(v1 + 16);
        if (!v3)
        {
          v10 = *(double *)v1;
          v7 = *(float *)(v1 + 16);
        }
        if (fabs(v12 - v6 + -60.0) >= 5.0)
        {
          if (fabs(v12 - v6 + -120.0) < 5.0)
          {
            v11 = v11 + v13;
            ++v5;
          }
        }
        else
        {
          v8 = v8 + v13;
          ++v4;
        }
        ++v3;
        v9 = *(double *)v1;
      }
      v1 += 72;
    }
    while (v1 != v2);
    if (v4 > 0)
      v8 = v8 / (double)v4;
    if (v5 >= 1)
      v11 = v11 / (double)v5;
  }
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_102199928);
  v14 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67241217;
    v27 = v3;
    v28 = 2050;
    v29 = v12 - v10;
    v30 = 2049;
    v31 = v7;
    v32 = 2049;
    v33 = v8;
    v34 = 2049;
    v35 = v11;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "VO2Max,SamplesPostSession,%{public}d,PostSessionDuration,%{public}f,startingHR,%{private}f,HRAfter60s,%{private}f,HRAfter120s,%{private}f", buf, 0x30u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102199928);
    v17[0] = 67241217;
    v17[1] = v3;
    v18 = 2050;
    v19 = v12 - v10;
    v20 = 2049;
    v21 = v7;
    v22 = 2049;
    v23 = v8;
    v24 = 2049;
    v25 = v11;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "VO2Max,SamplesPostSession,%{public}d,PostSessionDuration,%{public}f,startingHR,%{private}f,HRAfter60s,%{private}f,HRAfter120s,%{private}f", v17, 48);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "void CLVO2MaxEstimator::evaluatePostSessionPeriod() const", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
}

uint64_t sub_101012B24(double a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  double *v9;
  double v10;
  NSObject *v11;
  const char *v12;
  uint8_t *v13;
  int v14;
  double v15;
  uint8_t buf[4];
  double v17;

  v5 = sub_101125448();
  if (sub_101125D40(v5))
  {
    result = 0;
    v7 = a3[1] - *a3;
    if (v7)
    {
      v8 = v7 / 144;
      if (v8 <= 1)
        v8 = 1;
      v9 = (double *)(*a3 + 24);
      do
      {
        v10 = *v9;
        v9 += 18;
        if (v10 < 1.79769313e308)
          result = result;
        else
          result = (result + 1);
        --v8;
      }
      while (v8);
    }
  }
  else
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102199928);
    v11 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      v17 = a1;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "VO2Max,Analytics unexpectedly not able to retrieve a session record for the minimum algorithm version with startTime > %{public}.3f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_102199928);
      v14 = 134349056;
      v15 = a1;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 16, "VO2Max,Analytics unexpectedly not able to retrieve a session record for the minimum algorithm version with startTime > %{public}.3f", &v14, 12);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 0, "int CLVO2MaxEstimator::getLookbackNumEstimatesAfterUpdate(CFAbsoluteTime, const std::vector<VO2MaxOutput> &) const", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

void sub_101012D44(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v9;
  double v10;
  uint64_t v11;
  double v12;
  NSObject *v13;
  const char *v14;
  uint8_t *v15;
  int v16;
  __int128 v17;
  __int128 v18;
  double v19;
  int v20;
  uint64_t v21;
  __int16 v22;
  double v23;
  uint8_t buf[4];
  uint64_t v25;
  __int16 v26;
  double v27;

  v2 = a2[1];
  if (v2 != *a2)
  {
    v16 = 0;
    v17 = xmmword_101BDBDD0;
    __asm { FMOV            V0.2D, #1.0 }
    v18 = _Q0;
    v19 = 0.0;
    do
    {
      v9 = v2 - 144;
      sub_10083F10C((uint64_t)&v16, *(double *)(v2 - 112));
      v2 = v9;
    }
    while (v9 != *a2);
    v10 = 0.0;
    if (v16 < 1)
    {
      v11 = 0;
    }
    else
    {
      v11 = *((_QWORD *)&v17 + 1);
      if (v16 != 1)
      {
        v12 = *(double *)&v18 * *(double *)&v18 - *((double *)&v18 + 1);
        if (v12 > 0.0)
          v10 = sqrt(*(double *)&v18 * *(double *)&v18 / v12 * v19);
      }
    }
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102199928);
    v13 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134283777;
      v25 = v11;
      v26 = 2049;
      v27 = v10;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "VO2Max,weightedAvg,%{private}.3f,std,%{private}.3f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_102199928);
      v20 = 134283777;
      v21 = v11;
      v22 = 2049;
      v23 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "VO2Max,weightedAvg,%{private}.3f,std,%{private}.3f", &v20, 22);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "double CLVO2MaxEstimator::getLookbackEWMAPlusWeightedStDev(const std::vector<VO2MaxOutput> &) const", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
  }
}

void sub_101012FA0(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  NSObject *v9;
  const char *v10;
  char *v11;
  _QWORD v12[5];
  _WORD v13[8];
  _BYTE buf[32];
  __int128 v15;
  _BYTE v16[44];

  if (objc_opt_class(MCProfileConnection, a2)
    && (objc_msgSend(+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"), "isHealthDataSubmissionAllowed") & 1) != 0)
  {
    v3 = atomic_load((unsigned __int8 *)&qword_10230BA38);
    if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_10230BA38))
    {
      v15 = xmmword_101C3AC84;
      *(_OWORD *)v16 = unk_101C3AC94;
      *(_OWORD *)&v16[16] = xmmword_101C3ACA4;
      *(_OWORD *)&v16[28] = *(__int128 *)((char *)&xmmword_101C3ACA4 + 12);
      *(_OWORD *)buf = xmmword_101C3AC64;
      *(_OWORD *)&buf[16] = unk_101C3AC74;
      sub_10041C4B4(&qword_10230BA20, buf, 0x17uLL);
      __cxa_atexit((void (*)(void *))sub_10041C534, &qword_10230BA20, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10230BA38);
    }
    v4 = atomic_load((unsigned __int8 *)&qword_10230BA58);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_10230BA58))
    {
      *(_OWORD *)buf = xmmword_101C3ACC0;
      *(_OWORD *)&buf[16] = unk_101C3ACD0;
      sub_100EC0C5C(&qword_10230BA40, buf, 8uLL);
      __cxa_atexit((void (*)(void *))sub_100EC0CDC, &qword_10230BA40, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10230BA58);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_10230BA78);
    if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_10230BA78))
    {
      *(_OWORD *)buf = xmmword_101C3ACE0;
      *(_OWORD *)&buf[16] = unk_101C3ACF0;
      v15 = xmmword_101C3AD00;
      *(_OWORD *)v16 = unk_101C3AD10;
      sub_10041C4B4(&qword_10230BA60, buf, 0x10uLL);
      __cxa_atexit((void (*)(void *))sub_10041C534, &qword_10230BA60, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10230BA78);
    }
    v6 = atomic_load((unsigned __int8 *)&qword_10230BA98);
    if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_10230BA98))
    {
      v15 = xmmword_101C3AD40;
      *(_OWORD *)v16 = unk_101C3AD50;
      *(_OWORD *)&v16[12] = unk_101C3AD5C;
      *(_OWORD *)buf = xmmword_101C3AD20;
      *(_OWORD *)&buf[16] = unk_101C3AD30;
      sub_10041C4B4(&qword_10230BA80, buf, 0x13uLL);
      __cxa_atexit((void (*)(void *))sub_10041C534, &qword_10230BA80, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10230BA98);
    }
    v7 = atomic_load((unsigned __int8 *)&qword_10230BAB8);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_10230BAB8))
    {
      *(_OWORD *)buf = xmmword_101C3AD6C;
      *(_OWORD *)&buf[16] = unk_101C3AD7C;
      *(_QWORD *)&v15 = 0x422A66664219999ALL;
      sub_10041C4B4(&qword_10230BAA0, buf, 0xAuLL);
      __cxa_atexit((void (*)(void *))sub_10041C534, &qword_10230BAA0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10230BAB8);
    }
    v8 = atomic_load((unsigned __int8 *)&qword_10230BAD8);
    if ((v8 & 1) == 0)
    {
      if (__cxa_guard_acquire(&qword_10230BAD8))
      {
        *(_OWORD *)buf = xmmword_101C3AD94;
        *(_OWORD *)&buf[12] = *(__int128 *)((char *)&xmmword_101C3AD94 + 12);
        sub_100EC0C5C(&qword_10230BAC0, buf, 7uLL);
        __cxa_atexit((void (*)(void *))sub_100EC0CDC, &qword_10230BAC0, (void *)&_mh_execute_header);
        __cxa_guard_release(&qword_10230BAD8);
      }
    }
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_1010134DC;
    v12[3] = &unk_102131FE8;
    v12[4] = a2;
    AnalyticsSendEventLazy(CFSTR("com.apple.CoreMotion.VO2Max.VO2MaxEstimate"), v12);
  }
  else
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102199928);
    v9 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "VO2Max,Not sending analytics, no IHA permission", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_102199928);
      v13[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "VO2Max,Not sending analytics, no IHA permission", v13, 2);
      v11 = (char *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CLVO2MaxEstimator::sendAnalytics(CLVO2MaxStats &)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
}

void sub_10101346C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10230BAD8);
  _Unwind_Resume(a1);
}

NSDictionary *sub_1010134DC(uint64_t a1)
{
  float v2;
  unint64_t v3;
  unint64_t v4;
  float v5;
  unint64_t v6;
  unint64_t v7;
  float v8;
  unint64_t v9;
  unint64_t v10;
  float v11;
  unint64_t v12;
  unint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  float v50;
  unint64_t v51;
  unint64_t v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  float v56;
  unint64_t v57;
  unint64_t v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  float v72;
  unint64_t v73;
  unint64_t v74;
  NSDictionary *v75;
  void *__p;
  _BYTE *v78;
  uint64_t v79;
  void *v80;
  _BYTE *v81;
  uint64_t v82;
  void *v83;
  _BYTE *v84;
  uint64_t v85;
  void *v86;
  _BYTE *v87;
  uint64_t v88;
  void *v89;
  _BYTE *v90;
  uint64_t v91;
  void *v92;
  _BYTE *v93;
  uint64_t v94;
  void *v95;
  _BYTE *v96;
  uint64_t v97;
  void *v98;
  _BYTE *v99;
  uint64_t v100;
  void *v101;
  _BYTE *v102;
  uint64_t v103;
  void *v104;
  _BYTE *v105;
  uint64_t v106;
  void *v107;
  _BYTE *v108;
  uint64_t v109;
  _QWORD v110[60];
  _QWORD v111[60];

  v110[0] = CFSTR("age_bin");
  v2 = *(float *)(*(_QWORD *)(a1 + 32) + 4);
  v108 = 0;
  v109 = 0;
  v107 = 0;
  sub_10027205C(&v107, (const void *)qword_10230BA80, unk_10230BA88, (unk_10230BA88 - qword_10230BA80) >> 2);
  if (v108 == v107)
  {
    v3 = 0;
  }
  else
  {
    v3 = 0;
    v4 = (v108 - (_BYTE *)v107) >> 2;
    if (v4 <= 1)
      v4 = 1;
    while (*((float *)v107 + v3) < v2)
    {
      if (v4 == ++v3)
      {
        v3 = v4;
        break;
      }
    }
  }
  v111[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v3);
  v110[1] = CFSTR("gender");
  v111[1] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", **(unsigned int **)(a1 + 32));
  v110[2] = CFSTR("useBetaBlocker");
  v111[2] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 8));
  v110[3] = CFSTR("userBMI_bin");
  v5 = *(float *)(*(_QWORD *)(a1 + 32) + 12);
  v105 = 0;
  v106 = 0;
  v104 = 0;
  sub_10027205C(&v104, (const void *)qword_10230BAA0, unk_10230BAA8, (unk_10230BAA8 - qword_10230BAA0) >> 2);
  if (v105 == v104)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    v7 = (v105 - (_BYTE *)v104) >> 2;
    if (v7 <= 1)
      v7 = 1;
    while (*((float *)v104 + v6) < v5)
    {
      if (v7 == ++v6)
      {
        v6 = v7;
        break;
      }
    }
  }
  v111[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v6);
  v110[4] = CFSTR("vo2MaxMean_bin");
  v8 = *(float *)(*(_QWORD *)(a1 + 32) + 16);
  v101 = 0;
  v102 = 0;
  v103 = 0;
  sub_10027205C(&v101, (const void *)qword_10230BA20, unk_10230BA28, (unk_10230BA28 - qword_10230BA20) >> 2);
  if (v102 == v101)
  {
    v9 = 0;
  }
  else
  {
    v9 = 0;
    v10 = (v102 - (_BYTE *)v101) >> 2;
    if (v10 <= 1)
      v10 = 1;
    while (*((float *)v101 + v9) < v8)
    {
      if (v10 == ++v9)
      {
        v9 = v10;
        break;
      }
    }
  }
  v111[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v9);
  v110[5] = CFSTR("vo2MaxPrior_bin");
  v11 = *(float *)(*(_QWORD *)(a1 + 32) + 20);
  v98 = 0;
  v99 = 0;
  v100 = 0;
  sub_10027205C(&v98, (const void *)qword_10230BA20, unk_10230BA28, (unk_10230BA28 - qword_10230BA20) >> 2);
  if (v99 == v98)
  {
    v12 = 0;
  }
  else
  {
    v12 = 0;
    v13 = (v99 - (_BYTE *)v98) >> 2;
    if (v13 <= 1)
      v13 = 1;
    while (*((float *)v98 + v12) < v11)
    {
      if (v13 == ++v12)
      {
        v12 = v13;
        break;
      }
    }
  }
  v111[5] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v12);
  v110[6] = CFSTR("hrMaxObserved");
  LODWORD(v14) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 24);
  v111[6] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v14);
  v110[7] = CFSTR("hrMaxAgePredicted");
  LODWORD(v15) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 28);
  v111[7] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v15);
  v110[8] = CFSTR("hrMaxAgeAndMedicationPredicted");
  LODWORD(v16) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 32);
  v111[8] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v16);
  v110[9] = CFSTR("hrMinBodyMetricsPredicted");
  LODWORD(v17) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 36);
  v111[9] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v17);
  v110[10] = CFSTR("hrOnset");
  LODWORD(v18) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 40);
  v111[10] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v18);
  v110[11] = CFSTR("hrRestingObservedOneDay");
  LODWORD(v19) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 44);
  v111[11] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v19);
  v110[12] = CFSTR("hrRestingObservedSevenDays");
  LODWORD(v20) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 48);
  v111[12] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v20);
  v110[13] = CFSTR("maxMetsMean");
  LODWORD(v21) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 52);
  v111[13] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v21);
  v110[14] = CFSTR("maxMetsHigh");
  LODWORD(v22) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 56);
  v111[14] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v22);
  v110[15] = CFSTR("vo2MaxValue");
  LODWORD(v23) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 60);
  v111[15] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v23);
  v110[16] = CFSTR("vo2MaxValueAdaptiveModel");
  LODWORD(v24) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 68);
  v111[16] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v24);
  v110[17] = CFSTR("vo2MaxValueOutdoorPedestrianModel");
  LODWORD(v25) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 64);
  v111[17] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v25);
  v110[18] = CFSTR("vo2MaxValueOOB");
  LODWORD(v26) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 72);
  v111[18] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v26);
  v110[19] = CFSTR("vo2MaxValueAdaptiveModelOOB");
  LODWORD(v27) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 80);
  v111[19] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v27);
  v110[20] = CFSTR("vo2MaxValueOutdoorPedestrianModelOOB");
  LODWORD(v28) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 76);
  v111[20] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v28);
  v110[21] = CFSTR("efficiency");
  LODWORD(v29) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 84);
  v111[21] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v29);
  v110[22] = CFSTR("clustersHRMeanAdaptiveModel");
  LODWORD(v30) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 96);
  v111[22] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v30);
  v110[23] = CFSTR("clustersMetsMeanAdaptiveModel");
  LODWORD(v31) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 100);
  v111[23] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v31);
  v110[24] = CFSTR("clustersHRMeanPedestrianModel");
  LODWORD(v32) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 88);
  v111[24] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v32);
  v110[25] = CFSTR("clustersMetsMeanPedestrianModel");
  LODWORD(v33) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 92);
  v111[25] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v33);
  v110[26] = CFSTR("vo2MaxStdDev");
  LODWORD(v34) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 104);
  v111[26] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v34);
  v110[27] = CFSTR("vo2MaxTrend");
  LODWORD(v35) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 108);
  v111[27] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v35);
  v110[28] = CFSTR("vo2MaxPriorDelta");
  *(float *)&v36 = *(float *)(*(_QWORD *)(a1 + 32) + 60) - *(float *)(*(_QWORD *)(a1 + 32) + 20);
  v111[28] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v36);
  v110[29] = CFSTR("vo2MaxTrendSingleEst");
  LODWORD(v37) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 112);
  v111[29] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v37);
  v110[30] = CFSTR("workoutTypeRatioWalk");
  LODWORD(v38) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 116);
  v111[30] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v38);
  v110[31] = CFSTR("workoutTypeRatioRun");
  LODWORD(v39) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 120);
  v111[31] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v39);
  v110[32] = CFSTR("workoutTypeRatioHike");
  LODWORD(v40) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 124);
  v111[32] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v40);
  v110[33] = CFSTR("lookbackNumEstimates_bin");
  v41 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 128);
  v96 = 0;
  v97 = 0;
  v95 = 0;
  sub_10027205C(&v95, (const void *)qword_10230BA40, unk_10230BA48, (unk_10230BA48 - qword_10230BA40) >> 2);
  if (v96 == v95)
  {
    v42 = 0;
  }
  else
  {
    v42 = 0;
    v43 = (v96 - (_BYTE *)v95) >> 2;
    if (v43 <= 1)
      v43 = 1;
    while (*((_DWORD *)v95 + v42) < v41)
    {
      if (v43 == ++v42)
      {
        v42 = v43;
        break;
      }
    }
  }
  v111[33] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v42);
  v110[34] = CFSTR("lookbackNumEstimatesAfterUpdate_bin");
  v44 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 132);
  v93 = 0;
  v94 = 0;
  v92 = 0;
  sub_10027205C(&v92, (const void *)qword_10230BA40, unk_10230BA48, (unk_10230BA48 - qword_10230BA40) >> 2);
  if (v93 == v92)
  {
    v45 = 0;
  }
  else
  {
    v45 = 0;
    v46 = (v93 - (_BYTE *)v92) >> 2;
    if (v46 <= 1)
      v46 = 1;
    while (*((_DWORD *)v92 + v45) < v44)
    {
      if (v46 == ++v45)
      {
        v45 = v46;
        break;
      }
    }
  }
  v111[34] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v45);
  v110[35] = CFSTR("lookbackNumDaysWithEstimate_bin");
  v47 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 136);
  v90 = 0;
  v91 = 0;
  v89 = 0;
  sub_10027205C(&v89, (const void *)qword_10230BA40, unk_10230BA48, (unk_10230BA48 - qword_10230BA40) >> 2);
  if (v90 == v89)
  {
    v48 = 0;
  }
  else
  {
    v48 = 0;
    v49 = (v90 - (_BYTE *)v89) >> 2;
    if (v49 <= 1)
      v49 = 1;
    while (*((_DWORD *)v89 + v48) < v47)
    {
      if (v49 == ++v48)
      {
        v48 = v49;
        break;
      }
    }
  }
  v111[35] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v48);
  v110[36] = CFSTR("lookbackEWMAPlusWeightedStDev_bin");
  v50 = *(float *)(*(_QWORD *)(a1 + 32) + 144);
  v87 = 0;
  v88 = 0;
  v86 = 0;
  sub_10027205C(&v86, (const void *)qword_10230BA20, unk_10230BA28, (unk_10230BA28 - qword_10230BA20) >> 2);
  if (v87 == v86)
  {
    v51 = 0;
  }
  else
  {
    v51 = 0;
    v52 = (v87 - (_BYTE *)v86) >> 2;
    if (v52 <= 1)
      v52 = 1;
    while (*((float *)v86 + v51) < v50)
    {
      if (v52 == ++v51)
      {
        v51 = v52;
        break;
      }
    }
  }
  v111[36] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v51);
  v110[37] = CFSTR("numWorkoutsContrToLatestEstimate_bin");
  v53 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 140);
  v84 = 0;
  v85 = 0;
  v83 = 0;
  sub_10027205C(&v83, (const void *)qword_10230BAC0, unk_10230BAC8, (unk_10230BAC8 - qword_10230BAC0) >> 2);
  if (v84 == v83)
  {
    v54 = 0;
  }
  else
  {
    v54 = 0;
    v55 = (v84 - (_BYTE *)v83) >> 2;
    if (v55 <= 1)
      v55 = 1;
    while (*((_DWORD *)v83 + v54) < v53)
    {
      if (v55 == ++v54)
      {
        v54 = v55;
        break;
      }
    }
  }
  v111[37] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v54);
  v110[38] = CFSTR("vo2MaxValue_bin");
  v56 = *(float *)(*(_QWORD *)(a1 + 32) + 60);
  v81 = 0;
  v82 = 0;
  v80 = 0;
  sub_10027205C(&v80, (const void *)qword_10230BA20, unk_10230BA28, (unk_10230BA28 - qword_10230BA20) >> 2);
  if (v81 == v80)
  {
    v57 = 0;
  }
  else
  {
    v57 = 0;
    v58 = (v81 - (_BYTE *)v80) >> 2;
    if (v58 <= 1)
      v58 = 1;
    while (*((float *)v80 + v57) < v56)
    {
      if (v58 == ++v57)
      {
        v57 = v58;
        break;
      }
    }
  }
  v111[38] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v57);
  v110[39] = CFSTR("pctGPSAvailability");
  LODWORD(v59) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 148);
  v111[39] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v59);
  v110[40] = CFSTR("pctHeartRateAvailability");
  LODWORD(v60) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 152);
  v111[40] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v60);
  v110[41] = CFSTR("pctBackgroundEscalation");
  LODWORD(v61) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 156);
  v111[41] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v61);
  v110[42] = CFSTR("pctHRMax");
  LODWORD(v62) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 160);
  v111[42] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v62);
  v110[43] = CFSTR("pctHRMin");
  LODWORD(v63) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 164);
  v111[43] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v63);
  v110[44] = CFSTR("validGradeMean");
  LODWORD(v64) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 168);
  v111[44] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v64);
  v110[45] = CFSTR("validGradeStd");
  LODWORD(v65) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 172);
  v111[45] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v65);
  v110[46] = CFSTR("pctGradeAboveAnalyticsThreshold");
  LODWORD(v66) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 176);
  v111[46] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v66);
  v110[47] = CFSTR("pctGPSAvailability_bin");
  LODWORD(v67) = vcvtps_s32_f32(*(float *)(*(_QWORD *)(a1 + 32) + 148) / 10.0);
  v111[47] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v67);
  v110[48] = CFSTR("pctHeartRateAvailability_bin");
  LODWORD(v68) = vcvtps_s32_f32(*(float *)(*(_QWORD *)(a1 + 32) + 152) / 10.0);
  v111[48] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v68);
  v110[49] = CFSTR("pctBackgroundEscalation_bin");
  LODWORD(v69) = vcvtps_s32_f32(*(float *)(*(_QWORD *)(a1 + 32) + 156) / 10.0);
  v111[49] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v69);
  v110[50] = CFSTR("pctHRMax_bin");
  LODWORD(v70) = vcvtps_s32_f32(*(float *)(*(_QWORD *)(a1 + 32) + 160) / 10.0);
  v111[50] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v70);
  v110[51] = CFSTR("pctHRMin_bin");
  LODWORD(v71) = vcvtps_s32_f32(*(float *)(*(_QWORD *)(a1 + 32) + 164) / 10.0);
  v111[51] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v71);
  v110[52] = CFSTR("workoutType");
  v111[52] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 184));
  v110[53] = CFSTR("sessionType");
  v111[53] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 200));
  v110[54] = CFSTR("sessionDuration_bin");
  v72 = *(float *)(*(_QWORD *)(a1 + 32) + 180);
  v78 = 0;
  v79 = 0;
  __p = 0;
  sub_10027205C(&__p, (const void *)qword_10230BA60, unk_10230BA68, (unk_10230BA68 - qword_10230BA60) >> 2);
  if (v78 == __p)
  {
    v73 = 0;
  }
  else
  {
    v73 = 0;
    v74 = (v78 - (_BYTE *)__p) >> 2;
    if (v74 <= 1)
      v74 = 1;
    while (*((float *)__p + v73) < v72)
    {
      if (v74 == ++v73)
      {
        v73 = v74;
        break;
      }
    }
  }
  v111[54] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v73);
  v110[55] = CFSTR("hrMinSource");
  v111[55] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 192));
  v110[56] = CFSTR("vo2MaxEstimationStatus");
  v111[56] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 196));
  v110[57] = CFSTR("arbitrationDecision");
  v111[57] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 204));
  v110[58] = CFSTR("cielFloorState");
  v111[58] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 208));
  v110[59] = CFSTR("estimateWroteToDb");
  v111[59] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 212));
  v75 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v111, v110, 60);
  if (__p)
  {
    v78 = __p;
    operator delete(__p);
  }
  if (v80)
  {
    v81 = v80;
    operator delete(v80);
  }
  if (v83)
  {
    v84 = v83;
    operator delete(v83);
  }
  if (v86)
  {
    v87 = v86;
    operator delete(v86);
  }
  if (v89)
  {
    v90 = v89;
    operator delete(v89);
  }
  if (v92)
  {
    v93 = v92;
    operator delete(v92);
  }
  if (v95)
  {
    v96 = v95;
    operator delete(v95);
  }
  if (v98)
  {
    v99 = v98;
    operator delete(v98);
  }
  if (v101)
  {
    v102 = v101;
    operator delete(v101);
  }
  if (v104)
  {
    v105 = v104;
    operator delete(v104);
  }
  if (v107)
  {
    v108 = v107;
    operator delete(v107);
  }
  return v75;
}

void sub_101014228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40)
{
  _Unwind_Resume(exception_object);
}

void sub_10101433C(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_101014368(id a1)
{
  qword_10229FEC8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "VO2Max");
}

void sub_1010152C4(id a1)
{
  qword_10229FE88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

uint64_t *sub_1010152F0(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x30uLL);
    v10[4] = *a3;
    v10[5] = a3[1];
    sub_1000145B0(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t sub_1010153B0()
{
  sub_1015A2E04(qword_10230BAE0, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230BAE0, (void *)&_mh_execute_header);
}

__n128 sub_1010153F4(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = *a2;
  v3 = a2[1];
  v4 = a2[2];
  *(_OWORD *)(a1 + 68) = *(__int128 *)((char *)a2 + 44);
  *(_OWORD *)(a1 + 56) = v4;
  *(_OWORD *)(a1 + 40) = v3;
  *(_OWORD *)(a1 + 24) = v2;
  __asm { FMOV            V0.2D, #-1.0 }
  *(__n128 *)(a1 + 88) = result;
  return result;
}

void sub_101015424(void **a1, __int128 *a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  unint64_t v7;
  __int128 v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  char *v18;
  char *v19;
  __int128 v20;
  double *v21;
  double v22;
  __int128 *v23;
  __int128 v24;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= (unint64_t)v6)
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (_QWORD)*a1) >> 3);
    v11 = v10 + 1;
    if (v10 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_100259694();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x555555555555555)
      v13 = 0xAAAAAAAAAAAAAAALL;
    else
      v13 = v11;
    if (v13)
      v14 = (char *)sub_1002596A8(v4, v13);
    else
      v14 = 0;
    v15 = &v14[24 * v10];
    v16 = &v14[24 * v13];
    v17 = *a2;
    *((_QWORD *)v15 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v15 = v17;
    v9 = v15 + 24;
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *(_OWORD *)(v18 - 24);
        *((_QWORD *)v15 - 1) = *((_QWORD *)v18 - 1);
        *(_OWORD *)(v15 - 24) = v20;
        v15 -= 24;
        v18 -= 24;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v9;
    a1[2] = v16;
    if (v18)
      operator delete(v18);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    v9 = (char *)(v7 + 24);
  }
  a1[1] = v9;
  v21 = (double *)*a1;
  if (*a1 != v9)
  {
    v22 = *((double *)v9 - 3);
    while (vabdd_f64(*v21, v22) <= 88.76)
    {
      v21 += 3;
      if (v21 == (double *)v9)
        goto LABEL_30;
    }
    if (v21 != (double *)v9)
    {
      v23 = (__int128 *)(v21 + 3);
      if (v21 + 3 != (double *)v9)
      {
        do
        {
          if (vabdd_f64(*(double *)v23, v22) <= 88.76)
          {
            v24 = *v23;
            v21[2] = *((double *)v23 + 2);
            *(_OWORD *)v21 = v24;
            v21 += 3;
          }
          v23 = (__int128 *)((char *)v23 + 24);
        }
        while (v23 != (__int128 *)v9);
        v9 = (char *)a1[1];
      }
    }
    if (v21 != (double *)v9)
      a1[1] = v21;
  }
LABEL_30:
  sub_1010155F4((uint64_t)a1);
}

void sub_1010155F4(uint64_t a1)
{
  double *v2;
  double *v3;
  double v4;
  double v5;
  int v6;
  unsigned int v7;
  double v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  _BOOL4 v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint8_t *v19;
  int v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  double v25;
  __int16 v26;
  unsigned int v27;
  __int16 v28;
  _BOOL4 v29;
  __int16 v30;
  _BOOL4 v31;
  uint8_t buf[4];
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  double v37;
  __int16 v38;
  unsigned int v39;
  __int16 v40;
  _BOOL4 v41;
  __int16 v42;
  _BOOL4 v43;

  v3 = *(double **)a1;
  v2 = *(double **)(a1 + 8);
  v4 = *(v2 - 3);
  v5 = **(double **)a1;
  if (vabdd_f64(v4 + 2.536, v5) >= 58.0744)
  {
    v6 = *(_DWORD *)(a1 + 64);
    if (v3 == v2)
    {
      v7 = 0;
      v8 = 0.0;
    }
    else
    {
      v7 = 0;
      v8 = 0.0;
      do
      {
        v9 = (unsigned int *)(v3 + 1);
        if (v6)
          v9 = (unsigned int *)v3 + 3;
        v10 = *v9;
        if (v10 >= 0xC)
          v10 = 12;
        v7 += v10;
        if (v3[2] >= 2.08999991)
          v8 = v8 + 2.536;
        v3 += 3;
      }
      while (v3 != v2);
    }
    if (v6)
      v11 = 19;
    else
      v11 = 49;
    v12 = v8 >= 58.0744 && v6 == 0;
    if (v12 || v7 > v11)
    {
      *(double *)(a1 + 88) = v5;
      *(double *)(a1 + 96) = v4;
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_102199988);
      v13 = qword_10229FC98;
      if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
      {
        v14 = *(_QWORD *)(a1 + 88);
        v15 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)buf = 134350336;
        v33 = v14;
        v34 = 2050;
        v35 = v15;
        v36 = 2050;
        v37 = v8;
        v38 = 1026;
        v39 = v7;
        v40 = 1026;
        v41 = v12;
        v42 = 1026;
        v43 = v7 > v11;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "StandPlus,minuteAwarded,startTime,%{public}f,endTime,%{public}f,totalMetTime,%{public}f,totalSteps,%{public}d,metConditionMet,%{public}d,stepConditionMet,%{public}d", buf, 0x32u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC90 != -1)
          dispatch_once(&qword_10229FC90, &stru_102199988);
        v16 = *(_QWORD *)(a1 + 88);
        v17 = *(_QWORD *)(a1 + 96);
        v20 = 134350336;
        v21 = v16;
        v22 = 2050;
        v23 = v17;
        v24 = 2050;
        v25 = v8;
        v26 = 1026;
        v27 = v7;
        v28 = 1026;
        v29 = v12;
        v30 = 1026;
        v31 = v7 > v11;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "StandPlus,minuteAwarded,startTime,%{public}f,endTime,%{public}f,totalMetTime,%{public}f,totalSteps,%{public}d,metConditionMet,%{public}d,stepConditionMet,%{public}d", &v20, 50);
        v19 = (uint8_t *)v18;
        sub_100512490("Generic", 1, 0, 2, "CLStandPlusMinute CLStandPlusMinuteCalculator::calculateStandPlusMinute()", "%s\n", v18);
        if (v19 != buf)
          free(v19);
      }
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1;
    }
  }
}

__n128 sub_1010158F4(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  int v6;
  __n128 result;
  __int128 v8;
  __int128 v9;
  int v10;
  int v11;
  const char *v12;
  uint8_t *v13;
  _DWORD v14[2];
  __int16 v15;
  int v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  int v20;

  if (*(_DWORD *)(a2 + 40) != *(_DWORD *)(a1 + 64))
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102199988);
    v4 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(_DWORD *)(a1 + 64);
      v6 = *(_DWORD *)(a2 + 40);
      *(_DWORD *)buf = 67240448;
      v18 = v5;
      v19 = 1026;
      v20 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "StandPlus,clearing buffers from body metrics,old,%{public}d,new,%{public}d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_102199988);
      v10 = *(_DWORD *)(a1 + 64);
      v11 = *(_DWORD *)(a2 + 40);
      v14[0] = 67240448;
      v14[1] = v10;
      v15 = 1026;
      v16 = v11;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "StandPlus,clearing buffers from body metrics,old,%{public}d,new,%{public}d", v14, 14);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "void CLStandPlusMinuteCalculator::feedBodyMetrics(const CLBodyMetrics &)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    result = *(__n128 *)a2;
    v8 = *(_OWORD *)(a2 + 16);
    v9 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 68) = *(_OWORD *)(a2 + 44);
    *(_OWORD *)(a1 + 40) = v8;
    *(_OWORD *)(a1 + 56) = v9;
    *(__n128 *)(a1 + 24) = result;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1;
  }
  return result;
}

void sub_101015B00(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_101015B2C()
{
  NSObject *v0;
  const char *v1;
  uint8_t *v2;
  _WORD v3[8];
  uint8_t buf[1640];

  if ((sub_1001B7910() & 4) != 0)
    operator new();
  if (qword_10229FD00 != -1)
    dispatch_once(&qword_10229FD00, &stru_102199A20);
  v0 = qword_10229FD08;
  if (os_log_type_enabled((os_log_t)qword_10229FD08, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "#Warning Gesture service is not available on this platform", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD00 != -1)
      dispatch_once(&qword_10229FD00, &stru_102199A20);
    v3[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD08, 0, "#Warning Gesture service is not available on this platform", v3, 2);
    v2 = (uint8_t *)v1;
    sub_100512490("Generic", 1, 0, 2, "static void CLGestureService::create()", "%s\n", v1);
    if (v2 != buf)
      free(v2);
  }
}

void sub_101015CE0()
{
  operator delete();
}

uint64_t sub_101015D0C()
{
  if (qword_10230BAF8 != -1)
    dispatch_once(&qword_10230BAF8, &stru_1021999A8);
  return qword_102311C28;
}

void sub_101015D50(uint64_t a1)
{
  sub_1009BAC4C(a1, (uint64_t)"CLGestureService", 1);
}

void sub_101015E38(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_100261F44((uint64_t)(v1 + 5));
  sub_1009BAD18(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101015E54(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v7;
  char v8;
  __int128 v9;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (uint64_t *)sub_1013DEA44();
  v7 = 0x30000FF0CLL;
  v8 = 0;
  sub_1018E4078(v2, (uint64_t)&v7, (uint64_t *)&v9);
  sub_1002B7674(v1 + 40, &v9);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
  if (*((_QWORD *)&v9 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  sub_100A0A4BC(*(uint64_t **)(v1 + 40), (uint64_t)sub_101015F28, v1);
  sub_100A0A6B8(*(_QWORD *)(v1 + 40), (uint64_t)sub_1010160F4, v1);
  sub_100A0A610(*(_QWORD *)(v1 + 40), (uint64_t)sub_1010160F4, v1);
  return sub_100A0A544(*(_QWORD *)(v1 + 40), (uint64_t)sub_1010160F4, v1);
}

void sub_101015F28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  uint64_t TimeStamp;
  _WORD v11[8];
  uint64_t v12;
  uint64_t v13;
  uint8_t buf[1640];

  v12 = 0;
  v13 = 0;
  IOHIDEventGetVendorDefinedData(a4, &v13, &v12);
  if (v13)
    v6 = v12 <= 0;
  else
    v6 = 1;
  if (v6)
  {
    if (qword_10229FC80 != -1)
      dispatch_once(&qword_10229FC80, &stru_102199A40);
    v7 = qword_10229FC88;
    if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Empty payload", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC80 != -1)
        dispatch_once(&qword_10229FC80, &stru_102199A40);
      v11[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC88, 17, "Empty payload", v11, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "static void CLGestureService::onGestureServiceIohidEvent(void *, void *, void *, IOHIDEventRef)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
  else
  {
    sub_100078B88();
    TimeStamp = IOHIDEventGetTimeStamp(a4);
    sub_101017480(a1, v13, v12, TimeStamp);
  }
}

void sub_1010160F4(uint64_t *a1)
{
  sub_101016E54(a1);
  sub_101016180(a1);
}

_QWORD *sub_101016118(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1021999D8;
  v2 = (uint64_t)(a1 + 5);
  sub_100346F9C(a1 + 5);
  sub_100261F44(v2);
  return sub_1009BAD18(a1);
}

void sub_10101615C(_QWORD *a1)
{
  sub_101016118(a1);
  operator delete();
}

void sub_101016180(uint64_t *a1)
{
  CFRunLoopRef Current;
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  __IOHIDServiceClient *v6;
  __IOHIDServiceClient *v7;
  const __CFNumber *RegistryID;
  const __CFDictionary *v9;
  io_service_t MatchingService;
  io_service_t v11;
  const __CFUUID *v12;
  const __CFUUID *v13;
  kern_return_t v14;
  mach_error_t v15;
  NSObject *v16;
  char *v17;
  NSObject *v18;
  double v19;
  uint8_t *v20;
  uint8_t *v21;
  NSObject *v22;
  double v23;
  uint8_t *v24;
  IOCFPlugInInterface **v25;
  HRESULT (__cdecl *QueryInterface)(void *, REFIID, LPVOID *);
  const __CFUUID *v27;
  CFUUIDBytes v28;
  NSObject *v29;
  NSObject *v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint8_t *v36;
  const char *v37;
  uint8_t *v38;
  uint64_t v39;
  char *v40;
  const char *v41;
  uint8_t *v42;
  const char *v43;
  uint8_t *v44;
  const char *v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  uint8_t *v50;
  uint64_t byte15;
  const void *byte15a;
  const void *v53;
  void **v54;
  uint64_t v55;
  uint64_t (*v56)(uint64_t);
  void *v57;
  uint64_t *v58;
  SInt32 theScore;
  uint64_t v60;
  IOCFPlugInInterface **theInterface;
  uint64_t valuePtr;
  int v63;
  _BYTE v64[18];
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  IOCFPlugInInterface **v68;
  __int16 v69;
  uint64_t v70;
  uint8_t buf[4];
  _BYTE v72[18];
  __int16 v73;
  uint64_t v74;
  __int16 v75;
  IOCFPlugInInterface **v76;
  __int16 v77;
  uint64_t v78;

  Current = CFRunLoopGetCurrent();
  sub_100127B9C();
  if (Current != (CFRunLoopRef)sub_1001AD8D0())
  {
    if (qword_10229FD00 != -1)
      dispatch_once(&qword_10229FD00, &stru_102199A20);
    v3 = qword_10229FD08;
    if (os_log_type_enabled((os_log_t)qword_10229FD08, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "openHidDriverInterface should be called from motion thread", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD00 != -1)
        dispatch_once(&qword_10229FD00, &stru_102199A20);
      LOWORD(v63) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD08, 17, "openHidDriverInterface should be called from motion thread", &v63, 2);
      v36 = (uint8_t *)v35;
      sub_100512490("Generic", 1, 0, 0, "void CLGestureService::openHidDriverInterface()", "%s\n", v35);
      if (v36 != buf)
        free(v36);
    }
    v4 = sub_100127B9C();
    v54 = _NSConcreteStackBlock;
    v55 = 3221225472;
    v56 = sub_101016E4C;
    v57 = &unk_10212ECA0;
    v58 = a1;
    sub_1000A50A8(v4, (uint64_t)&v54);
    return;
  }
  if (!a1[5])
    return;
  if (qword_10229FD00 != -1)
    dispatch_once(&qword_10229FD00, &stru_102199A20);
  v5 = qword_10229FD08;
  if (os_log_type_enabled((os_log_t)qword_10229FD08, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Open hid driver interface", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD00 != -1)
      dispatch_once(&qword_10229FD00, &stru_102199A20);
    LOWORD(v63) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD08, 1, "Open hid driver interface", &v63, 2);
    v38 = (uint8_t *)v37;
    sub_100512490("Generic", 1, 0, 2, "void CLGestureService::openHidDriverInterface()", "%s\n", v37);
    if (v38 != buf)
      free(v38);
  }
  theInterface = 0;
  valuePtr = 0;
  v60 = 0;
  v6 = (__IOHIDServiceClient *)sub_100A0A3A0(a1[5]);
  if (!v6)
  {
    if (qword_10229FD00 != -1)
      dispatch_once(&qword_10229FD00, &stru_102199A20);
    v18 = qword_10229FD08;
    if (os_log_type_enabled((os_log_t)qword_10229FD08, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "IoHidDevice is not ready!", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_10229FD00 != -1)
      dispatch_once(&qword_10229FD00, &stru_102199A20);
    LOWORD(v63) = 0;
    LODWORD(byte15) = 2;
    v19 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD08, 1, "IoHidDevice is not ready!", &v63, byte15);
    v21 = v20;
    sub_100512490("Generic", 1, 0, 2, "void CLGestureService::openHidDriverInterface()", "%s\n", v19);
LABEL_40:
    if (v21 != buf)
      free(v21);
    return;
  }
  v7 = v6;
  RegistryID = (const __CFNumber *)IOHIDServiceClientGetRegistryID(v6);
  CFNumberGetValue(RegistryID, kCFNumberSInt64Type, &valuePtr);
  theScore = 0;
  v9 = IORegistryEntryIDMatching(valuePtr);
  MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v9);
  if (!MatchingService)
  {
    if (qword_10229FD00 != -1)
      dispatch_once(&qword_10229FD00, &stru_102199A20);
    v22 = qword_10229FD08;
    if (os_log_type_enabled((os_log_t)qword_10229FD08, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_FAULT, "Service doesn't exist", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_10229FD00 != -1)
      dispatch_once(&qword_10229FD00, &stru_102199A20);
    LOWORD(v63) = 0;
    LODWORD(byte15) = 2;
    v23 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD08, 17, "Service doesn't exist", &v63, byte15);
    v21 = v24;
    sub_100512490("Generic", 1, 0, 0, "void CLGestureService::openHidDriverInterface()", "%s\n", v23);
    goto LABEL_40;
  }
  v11 = MatchingService;
  v12 = CFUUIDGetConstantUUIDWithBytes(kCFAllocatorSystemDefault, 0x3Bu, 0xC5u, 0xCCu, 0x87u, 0x84u, 0x5Eu, 0x48u, 0xABu, 0xA9u, 0xC2u, 0x94u, 0x36u, 0, 0x1Bu, 0xA6u, 0x8Au);
  v13 = CFUUIDGetConstantUUIDWithBytes(0, 0xC2u, 0x44u, 0xE8u, 0x58u, 0x10u, 0x9Cu, 0x11u, 0xD4u, 0x91u, 0xD4u, 0, 0x50u, 0xE4u, 0xC6u, 0x42u, 0x6Fu);
  v14 = IOCreatePlugInInterfaceForService(v11, v12, v13, &theInterface, &theScore);
  if (v14)
  {
    v15 = v14;
    if (qword_10229FD00 != -1)
      dispatch_once(&qword_10229FD00, &stru_102199A20);
    v16 = qword_10229FD08;
    if (os_log_type_enabled((os_log_t)qword_10229FD08, OS_LOG_TYPE_FAULT))
    {
      v17 = mach_error_string(v15);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)v72 = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "Unable to create plugin interface %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD00 != -1)
        dispatch_once(&qword_10229FD00, &stru_102199A20);
      v39 = qword_10229FD08;
      v40 = mach_error_string(v15);
      v63 = 136315138;
      *(_QWORD *)v64 = v40;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v39, 17, "Unable to create plugin interface %s", (const char *)&v63);
      v42 = (uint8_t *)v41;
      sub_100512490("Generic", 1, 0, 0, "void CLGestureService::openHidDriverInterface()", "%s\n", v41);
      if (v42 != buf)
        free(v42);
    }
    IOObjectRelease(v11);
    return;
  }
  IOObjectRelease(v11);
  v25 = theInterface;
  QueryInterface = (*theInterface)->QueryInterface;
  v27 = CFUUIDGetConstantUUIDWithBytes(kCFAllocatorSystemDefault, 0x6Eu, 0xBEu, 0xBAu, 0x6Eu, 9u, 0x1Eu, 0x45u, 0x2Eu, 0x82u, 0xEAu, 0x29u, 0x79u, 0x81u, 0x6Fu, 0xB1u, 0xB5u);
  v28 = CFUUIDGetUUIDBytes(v27);
  if (((unsigned int (*)(IOCFPlugInInterface **, _QWORD, _QWORD, uint64_t *))QueryInterface)(v25, *(_QWORD *)&v28.byte0, *(_QWORD *)&v28.byte8, &v60))
  {
    if (qword_10229FD00 != -1)
      dispatch_once(&qword_10229FD00, &stru_102199A20);
    v29 = qword_10229FD08;
    if (os_log_type_enabled((os_log_t)qword_10229FD08, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_FAULT, "Unable to set up query interface", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD00 != -1)
        dispatch_once(&qword_10229FD00, &stru_102199A20);
      LOWORD(v63) = 0;
      LODWORD(byte15a) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD08, 17, "Unable to set up query interface", &v63, byte15a);
      v44 = (uint8_t *)v43;
      sub_100512490("Generic", 1, 0, 0, "void CLGestureService::openHidDriverInterface()", "%s\n", v43);
      if (v44 != buf)
        free(v44);
    }
LABEL_48:
    if (theInterface)
    {
      ((void (*)(IOCFPlugInInterface **))(*theInterface)->Release)(theInterface);
      IODestroyPlugInInterface(theInterface);
    }
    return;
  }
  if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v60 + 64))(v60, 0))
  {
    if (qword_10229FD00 != -1)
      dispatch_once(&qword_10229FD00, &stru_102199A20);
    v30 = qword_10229FD08;
    if (os_log_type_enabled((os_log_t)qword_10229FD08, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240450;
      *(_DWORD *)v72 = 0;
      *(_WORD *)&v72[4] = 2114;
      *(_QWORD *)&v72[6] = v7;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_FAULT, "Unable to create plugin interface: kr:%{public}x service:%{public}@", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD00 != -1)
        dispatch_once(&qword_10229FD00, &stru_102199A20);
      v63 = 67240450;
      *(_DWORD *)v64 = 0;
      *(_WORD *)&v64[4] = 2114;
      *(_QWORD *)&v64[6] = v7;
      LODWORD(byte15a) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD08, 17, "Unable to create plugin interface: kr:%{public}x service:%{public}@", &v63, byte15a);
      v46 = (uint8_t *)v45;
      sub_100512490("Generic", 1, 0, 0, "void CLGestureService::openHidDriverInterface()", "%s\n", v45);
      if (v46 != buf)
        free(v46);
    }
    if (v60)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v60 + 72))(v60, 0);
    goto LABEL_48;
  }
  if (qword_10229FD00 != -1)
    dispatch_once(&qword_10229FD00, &stru_102199A20);
  v31 = qword_10229FD08;
  if (os_log_type_enabled((os_log_t)qword_10229FD08, OS_LOG_TYPE_INFO))
  {
    v32 = a1[7];
    v33 = a1[8];
    *(_DWORD *)buf = 134219008;
    *(_QWORD *)v72 = valuePtr;
    *(_WORD *)&v72[8] = 2048;
    *(_QWORD *)&v72[10] = v32;
    v73 = 2048;
    v74 = v33;
    v75 = 2048;
    v76 = theInterface;
    v77 = 2048;
    v78 = v60;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "Opened hid driver interface, registryID %llx, {cfPlugInInterface, hidDriverInterface} was then {%p,%p}, is now {%p,%p}", buf, 0x34u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD00 != -1)
      dispatch_once(&qword_10229FD00, &stru_102199A20);
    v47 = a1[7];
    v48 = a1[8];
    v63 = 134219008;
    *(_QWORD *)v64 = valuePtr;
    *(_WORD *)&v64[8] = 2048;
    *(_QWORD *)&v64[10] = v47;
    v65 = 2048;
    v66 = v48;
    v67 = 2048;
    v68 = theInterface;
    v69 = 2048;
    v70 = v60;
    LODWORD(byte15a) = 52;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD08, 1, "Opened hid driver interface, registryID %llx, {cfPlugInInterface, hidDriverInterface} was then {%p,%p}, is now {%p,%p}", &v63, byte15a, v53, v54, (const void *)v55);
    v50 = (uint8_t *)v49;
    sub_100512490("Generic", 1, 0, 2, "void CLGestureService::openHidDriverInterface()", "%s\n", v49);
    if (v50 != buf)
      free(v50);
  }
  *(_QWORD *)(a1[5] + 8) = valuePtr;
  v34 = v60;
  a1[7] = (uint64_t)theInterface;
  a1[8] = v34;
}

uint64_t sub_101016E4C(uint64_t a1)
{
  return sub_101016180(*(_QWORD *)(a1 + 32));
}

void sub_101016E54(_QWORD *a1)
{
  NSObject *v2;
  CFRunLoopRef Current;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  IOCFPlugInInterface **v7;
  uint64_t v8;
  _QWORD *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint8_t *v14;
  const char *v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint8_t *v20;
  const void *v21;
  const void *v22;
  const void *v23[5];
  int v24;
  IOCFPlugInInterface **v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  uint8_t buf[4];
  IOCFPlugInInterface **v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;

  if (qword_10229FD00 != -1)
    dispatch_once(&qword_10229FD00, &stru_102199A20);
  v2 = qword_10229FD08;
  if (os_log_type_enabled((os_log_t)qword_10229FD08, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Close hid driver interface", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD00 != -1)
      dispatch_once(&qword_10229FD00, &stru_102199A20);
    LOWORD(v24) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD08, 1, "Close hid driver interface", &v24, 2);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "void CLGestureService::closeHidDriverInterface()", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  Current = CFRunLoopGetCurrent();
  sub_100127B9C();
  if (Current != (CFRunLoopRef)sub_1001AD8D0())
  {
    if (qword_10229FD00 != -1)
      dispatch_once(&qword_10229FD00, &stru_102199A20);
    v4 = qword_10229FD08;
    if (os_log_type_enabled((os_log_t)qword_10229FD08, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "closeHidDriverInterface should be called from motion thread", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD00 != -1)
        dispatch_once(&qword_10229FD00, &stru_102199A20);
      LOWORD(v24) = 0;
      LODWORD(v21) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD08, 17, "closeHidDriverInterface should be called from motion thread", &v24, v21);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 0, "void CLGestureService::closeHidDriverInterface()", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    v5 = sub_100127B9C();
    v23[0] = _NSConcreteStackBlock;
    v23[1] = (const void *)3221225472;
    v23[2] = sub_101017350;
    v23[3] = &unk_10212ECA0;
    v23[4] = a1;
    sub_1000A50A8(v5, (uint64_t)v23);
    return;
  }
  v6 = a1[5];
  if (!v6)
    return;
  v7 = (IOCFPlugInInterface **)a1[7];
  v8 = a1[8];
  v9 = a1 + 7;
  if (v8)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v8 + 72))(a1[8], 0);
    if (!v7)
      goto LABEL_19;
  }
  else if (!v7)
  {
    *(_QWORD *)(v6 + 8) = 0;
    *v9 = 0;
    a1[8] = 0;
    return;
  }
  ((void (*)(IOCFPlugInInterface **))(*v7)->Release)(v7);
  IODestroyPlugInInterface(v7);
LABEL_19:
  *(_QWORD *)(a1[5] + 8) = 0;
  *v9 = 0;
  a1[8] = 0;
  if (qword_10229FD00 != -1)
    dispatch_once(&qword_10229FD00, &stru_102199A20);
  v10 = qword_10229FD08;
  if (os_log_type_enabled((os_log_t)qword_10229FD08, OS_LOG_TYPE_INFO))
  {
    v11 = a1[7];
    v12 = a1[8];
    *(_DWORD *)buf = 134218752;
    v33 = v7;
    v34 = 2048;
    v35 = v8;
    v36 = 2048;
    v37 = v11;
    v38 = 2048;
    v39 = v12;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Closed hid driver interface, {cfPlugInInterface, hidDriverInterface} was then {%p,%p}, is now {%p,%p}", buf, 0x2Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD00 != -1)
      dispatch_once(&qword_10229FD00, &stru_102199A20);
    v17 = a1[7];
    v18 = a1[8];
    v24 = 134218752;
    v25 = v7;
    v26 = 2048;
    v27 = v8;
    v28 = 2048;
    v29 = v17;
    v30 = 2048;
    v31 = v18;
    LODWORD(v21) = 42;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD08, 1, "Closed hid driver interface, {cfPlugInInterface, hidDriverInterface} was then {%p,%p}, is now {%p,%p}", &v24, v21, v22, v23[0]);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "void CLGestureService::closeHidDriverInterface()", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
}

uint64_t sub_101017350(uint64_t a1)
{
  return sub_101016E54(*(_QWORD *)(a1 + 32));
}

void sub_101017358(uint64_t a1)
{
  uint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_DWORD *)(v1 + 36);
  *(_DWORD *)(v1 + 36) = v2 + 1;
  if (!v2)
  {
    if (sub_100A0A3A0(*(_QWORD *)(v1 + 40)))
      sub_101016E54((_QWORD *)v1);
    sub_101016180((uint64_t *)v1);
  }
}

void sub_1010173A8(uint64_t a1)
{
  uint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_DWORD *)(v1 + 36) - 1;
  *(_DWORD *)(v1 + 36) = v2;
  if (!v2)
  {
    if (sub_100A0A3A0(*(_QWORD *)(v1 + 40)))
      sub_101016E54((_QWORD *)v1);
  }
}

void sub_1010173F0(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4;
  void (*v5)(uint64_t);
  _QWORD v6[5];

  if (a2)
    sub_10193A5A0();
  if (a3)
  {
    v4 = sub_100127B9C();
    v6[0] = _NSConcreteStackBlock;
    v5 = sub_101017358;
  }
  else
  {
    v4 = sub_100127B9C();
    v6[0] = _NSConcreteStackBlock;
    v5 = sub_1010173A8;
  }
  v6[1] = 3221225472;
  v6[2] = v5;
  v6[3] = &unk_10212ECA0;
  v6[4] = a1;
  sub_1000A50A8(v4, (uint64_t)v6);
}

uint64_t sub_101017480(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint8_t *v13;
  uint64_t v14;
  NSObject *v15;
  const char *v17;
  uint8_t *v18;
  uint64_t v19;
  unsigned __int8 *p_dst;
  unsigned __int8 __dst;
  int v22;
  __int16 v23;
  int v24;
  _BYTE v25[14];
  __int16 v26;
  uint64_t v27;
  uint8_t buf[4];
  _BYTE v29[14];
  __int16 v30;
  uint64_t v31;

  sub_101217624(&__dst);
  v19 = a4;
  p_dst = &__dst;
  if (__dst == 255)
  {
    v14 = (*(uint64_t (**)(_QWORD, const __CFString *))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), CFSTR("ServiceRecord"));
    if (qword_10229FE70 != -1)
      dispatch_once(&qword_10229FE70, &stru_102199A60);
    v15 = qword_10229FE78;
    if (os_log_type_enabled((os_log_t)qword_10229FE78, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68158210;
      *(_DWORD *)v29 = a3;
      *(_WORD *)&v29[4] = 2098;
      *(_QWORD *)&v29[6] = a2;
      v30 = 2114;
      v31 = v14;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "Undecodable data %{public}.*P\nIOHIO service record %{public}@", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE70 != -1)
        dispatch_once(&qword_10229FE70, &stru_102199A60);
      v24 = 68158210;
      *(_DWORD *)v25 = a3;
      *(_WORD *)&v25[4] = 2098;
      *(_QWORD *)&v25[6] = a2;
      v26 = 2114;
      v27 = v14;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE78, 17, "Undecodable data %{public}.*P\nIOHIO service record %{public}@", &v24, 28, v19, p_dst);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 0, "void CLGestureService::onGestureService(const uint8_t *, size_t, uint64_t)", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    __dst = 6;
    v22 = 16843009;
    v23 = 1;
  }
  else
  {
    if (qword_10229FD00 != -1)
      dispatch_once(&qword_10229FD00, &stru_102199A20);
    v8 = qword_10229FD08;
    if (os_log_type_enabled((os_log_t)qword_10229FD08, OS_LOG_TYPE_DEBUG))
    {
      v9 = sub_1009BB4D4(a1, 0);
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)v29 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "numberOfSpectators,%zi", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD00 != -1)
        dispatch_once(&qword_10229FD00, &stru_102199A20);
      v10 = qword_10229FD08;
      v11 = sub_1009BB4D4(a1, 0);
      v24 = 134217984;
      *(_QWORD *)v25 = v11;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 2, "numberOfSpectators,%zi", (size_t)&v24);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "void CLGestureService::onGestureService(const uint8_t *, size_t, uint64_t)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
  }
  return sub_10014C2F4(a1, 0, (uint64_t)&v19, 16);
}

void sub_101017834(id a1)
{
  qword_10229FD08 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WakeGesture");
}

void sub_101017860(id a1)
{
  qword_10229FC88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "AOP");
}

void sub_10101788C(id a1)
{
  qword_10229FE78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Oversize");
}

BOOL sub_1010178B8()
{
  return os_log_type_enabled((os_log_t)qword_10229FD08, OS_LOG_TYPE_FAULT);
}

BOOL sub_1010178CC()
{
  uint64_t v0;

  return os_log_type_enabled(*(os_log_t *)(v0 + 3336), OS_LOG_TYPE_INFO);
}

BOOL sub_1010178DC()
{
  uint64_t v0;

  return os_signpost_enabled(*(os_log_t *)(v0 + 3336));
}

void sub_10101798C(id a1)
{
  qword_10230BB00 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CMHealthColdStorageServiceSilo"));
}

void sub_101017A40(id a1)
{
  sub_100197040();
  if (sub_1000C4240())
    byte_10230BB10 = 1;
}

void sub_10101803C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a54 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_101018084(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _objc_msgSend(a4, "onDataProtectionNotification:data:", a2, a3);
}

id sub_101018094(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _objc_msgSend(a4, "onFitnessTrackingNotification:data:", a2, a3);
}

void sub_1010180A4(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint8_t *v8;
  uint8_t *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint8_t *v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint8_t buf[4];
  uint64_t v20;
  __int16 v21;
  uint64_t v22;

  if (a2)
  {
    if (qword_10229FFA0 != -1)
      dispatch_once(&qword_10229FFA0, &stru_102199C50);
    v4 = qword_10229FFA8;
    if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_ERROR))
    {
      v5 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412546;
      v20 = v5;
      v21 = 2112;
      v22 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Failed to set space attribution for %@. Error: %@", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFA0 != -1)
        dispatch_once(&qword_10229FFA0, &stru_102199C50);
      v6 = *(_QWORD *)(a1 + 32);
      v15 = 138412546;
      v16 = v6;
      v17 = 2112;
      v18 = a2;
      v7 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFA8, 16, "Failed to set space attribution for %@. Error: %@", &v15, 22);
      v9 = v8;
      sub_100512490("Generic", 1, 0, 0, "-[CMHealthColdStorageService beginService]_block_invoke", "%s\n", v7);
LABEL_19:
      if (v9 != buf)
        free(v9);
    }
  }
  else
  {
    if (qword_10229FFA0 != -1)
      dispatch_once(&qword_10229FFA0, &stru_102199C50);
    v10 = qword_10229FFA8;
    if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_DEFAULT))
    {
      v11 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      v20 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Set space attribution for %@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFA0 != -1)
        dispatch_once(&qword_10229FFA0, &stru_102199C50);
      v12 = *(_QWORD *)(a1 + 32);
      v15 = 138412290;
      v16 = v12;
      v13 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFA8, 0, "Set space attribution for %@", &v15, 12);
      v9 = v14;
      sub_100512490("Generic", 1, 0, 2, "-[CMHealthColdStorageService beginService]_block_invoke", "%s\n", v13);
      goto LABEL_19;
    }
  }
}

void sub_101018EA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void sub_101018FE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_101019198(uint64_t a1, _xpc_activity_s *a2)
{
  NSObject *v4;
  NSObject *v5;
  xpc_activity_state_t v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  uint64_t v10;
  xpc_activity_state_t v11;
  const char *v12;
  uint8_t *v13;
  uint64_t v14;
  int v15;
  xpc_activity_state_t v16;
  uint8_t buf[4];
  xpc_activity_state_t state;

  if (qword_10229FFA0 != -1)
    dispatch_once(&qword_10229FFA0, &stru_102199C50);
  v4 = qword_10229FFA8;
  if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134349056;
    state = xpc_activity_get_state(a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "HealthColdStorage: Sync timer fired (%{public}ld)", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFA0 != -1)
      dispatch_once(&qword_10229FFA0, &stru_102199C50);
    v7 = qword_10229FFA8;
    v15 = 134349056;
    v16 = xpc_activity_get_state(a2);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 1, "HealthColdStorage: Sync timer fired (%{public}ld)", &v15, 12);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "-[CMHealthColdStorageService setupSyncActivity]_block_invoke", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  objc_msgSend(*(id *)(a1 + 32), "onSyncActivity:", a2);
  if (xpc_activity_get_state(a2) == 2 && !xpc_activity_set_state(a2, 4))
  {
    if (qword_10229FFA0 != -1)
      dispatch_once(&qword_10229FFA0, &stru_102199C50);
    v5 = qword_10229FFA8;
    if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_FAULT))
    {
      v6 = xpc_activity_get_state(a2);
      *(_DWORD *)buf = 134349056;
      state = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Failed to mark activity as Continue. Current state is %{public}ld", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFA0 != -1)
        dispatch_once(&qword_10229FFA0, &stru_102199C50);
      v10 = qword_10229FFA8;
      v11 = xpc_activity_get_state(a2);
      v15 = 134349056;
      v16 = v11;
      LODWORD(v14) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 17, "Failed to mark activity as Continue. Current state is %{public}ld", &v15, v14);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 0, "-[CMHealthColdStorageService setupSyncActivity]_block_invoke", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
  }
}

void sub_101019814(uint64_t a1, int a2)
{
  NSObject *v3;
  const char *v4;
  NSObject *v5;
  NSObject *v6;
  xpc_activity_state_t state;
  uint8_t *v8;
  uint64_t v9;
  xpc_activity_state_t v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  const char *v15;
  __int16 v16;
  xpc_activity_state_t v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  xpc_activity_state_t v21;

  if (a2 == 103)
  {
    if (qword_10229FFA0 != -1)
      dispatch_once(&qword_10229FFA0, &stru_102199C50);
    v5 = qword_10229FFA8;
    if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      v19 = "com.apple.locationd.Motion.ColdStorageSync";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "[Service] Unable to validate one or more table format, did not perform sync (%s)", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFA0 != -1)
        dispatch_once(&qword_10229FFA0, &stru_102199C50);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFA8, 1, "[Service] Unable to validate one or more table format, did not perform sync (%s)", &v14);
      goto LABEL_27;
    }
  }
  else if (a2 == 109)
  {
    if (qword_10229FFA0 != -1)
      dispatch_once(&qword_10229FFA0, &stru_102199C50);
    v3 = qword_10229FFA8;
    if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      v19 = "com.apple.locationd.Motion.ColdStorageSync";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[Service] Data unavailable, did not perform sync (%s)", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFA0 != -1)
        dispatch_once(&qword_10229FFA0, &stru_102199C50);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFA8, 1, "[Service] Data unavailable, did not perform sync (%s)", &v14);
LABEL_27:
      v8 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "-[CMHealthColdStorageService onSyncActivity:]_block_invoke", "%s\n", v4);
      if (v8 != buf)
        free(v8);
    }
  }
  if (xpc_activity_get_state(*(xpc_activity_t *)(a1 + 32)) != 3
    && !xpc_activity_set_state(*(xpc_activity_t *)(a1 + 32), 5))
  {
    if (qword_10229FFA0 != -1)
      dispatch_once(&qword_10229FFA0, &stru_102199C50);
    v6 = qword_10229FFA8;
    if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_FAULT))
    {
      state = xpc_activity_get_state(*(xpc_activity_t *)(a1 + 32));
      *(_DWORD *)buf = 136315394;
      v19 = "com.apple.locationd.Motion.ColdStorageSync";
      v20 = 2050;
      v21 = state;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "[Service] Failed to mark (%s) activity as done. Current state is %{public}ld", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFA0 != -1)
        dispatch_once(&qword_10229FFA0, &stru_102199C50);
      v9 = qword_10229FFA8;
      v10 = xpc_activity_get_state(*(xpc_activity_t *)(a1 + 32));
      v14 = 136315394;
      v15 = "com.apple.locationd.Motion.ColdStorageSync";
      v16 = 2050;
      v17 = v10;
      LODWORD(v13) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 17, "[Service] Failed to mark (%s) activity as done. Current state is %{public}ld", &v14, v13);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "-[CMHealthColdStorageService onSyncActivity:]_block_invoke", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
}

void sub_101019E94(_Unwind_Exception *a1)
{
  NSObject *v1;
  dispatch_object_t *v2;
  uint64_t v3;

  sub_101019FF4(v2);
  sub_101019FF4((dispatch_object_t *)(v3 - 96));
  _Block_object_dispose((const void *)(v3 - 88), 8);
  if (v1)
    dispatch_release(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101019EF0(uint64_t a1)
{
  __int128 v2;
  uint64_t v3;
  uint64_t result;
  _QWORD v5[4];
  __int128 v6;

  v2 = *(_OWORD *)(a1 + 32);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_101019F6C;
  v5[3] = &unk_102199AC8;
  v6 = v2;
  result = sub_100F65168(v3, (uint64_t)v5);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = result;
  return result;
}

id sub_101019F6C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "checkDeferral:", *(_QWORD *)(a1 + 40));
}

void sub_101019F78(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  NSObject *v4;

  v3 = *(NSObject **)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    v4 = *(NSObject **)(a1 + 56);
    if (v4)
      dispatch_group_enter(v4);
  }
}

void sub_101019FB8(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;

  v2 = *(NSObject **)(a1 + 56);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 56);
    if (v3)
      dispatch_release(v3);
  }
}

dispatch_object_t *sub_101019FF4(dispatch_object_t *a1)
{
  NSObject *v2;

  v2 = *a1;
  if (v2)
  {
    dispatch_group_leave(v2);
    if (*a1)
      dispatch_release(*a1);
  }
  return a1;
}

uint64_t sub_10101A02C(uint64_t a1)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 48) + 60) = objc_msgSend(*(id *)(a1 + 32), "getTotalDBSizeInMB");
  objc_msgSend(*(id *)(a1 + 32), "sendAnalytics");
  objc_msgSend(*(id *)(a1 + 32), "resetAnalytics");
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10101A83C(uint64_t a1, _xpc_activity_s *a2)
{
  NSObject *v4;
  NSObject *v5;
  xpc_activity_state_t v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  uint64_t v10;
  xpc_activity_state_t v11;
  const char *v12;
  uint8_t *v13;
  uint64_t v14;
  int v15;
  xpc_activity_state_t v16;
  uint8_t buf[4];
  xpc_activity_state_t state;

  if (qword_10229FFA0 != -1)
    dispatch_once(&qword_10229FFA0, &stru_102199C50);
  v4 = qword_10229FFA8;
  if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134349056;
    state = xpc_activity_get_state(a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "HealthColdStorage: Db Vacuum timer fired (%{public}ld)", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFA0 != -1)
      dispatch_once(&qword_10229FFA0, &stru_102199C50);
    v7 = qword_10229FFA8;
    v15 = 134349056;
    v16 = xpc_activity_get_state(a2);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 0, "HealthColdStorage: Db Vacuum timer fired (%{public}ld)", &v15, 12);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "-[CMHealthColdStorageService setupDbCleanupActivity]_block_invoke", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  objc_msgSend(*(id *)(a1 + 32), "onDbCleanupActivity:", a2);
  if (xpc_activity_get_state(a2) == 2 && !xpc_activity_set_state(a2, 4))
  {
    if (qword_10229FFA0 != -1)
      dispatch_once(&qword_10229FFA0, &stru_102199C50);
    v5 = qword_10229FFA8;
    if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_FAULT))
    {
      v6 = xpc_activity_get_state(a2);
      *(_DWORD *)buf = 134349056;
      state = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Failed to mark activity as Continue. Current state is %{public}ld", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFA0 != -1)
        dispatch_once(&qword_10229FFA0, &stru_102199C50);
      v10 = qword_10229FFA8;
      v11 = xpc_activity_get_state(a2);
      v15 = 134349056;
      v16 = v11;
      LODWORD(v14) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 17, "Failed to mark activity as Continue. Current state is %{public}ld", &v15, v14);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 0, "-[CMHealthColdStorageService setupDbCleanupActivity]_block_invoke", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
  }
}

id sub_10101B318(id *a1, void *a2, uint64_t a3)
{
  id *v6;
  unsigned int v7;

  if (objc_msgSend(a2, "hasPrefix:", CFSTR("NumDaily")))
  {
    v6 = a1 + 4;
  }
  else
  {
    v7 = objc_msgSend(a2, "hasPrefix:", CFSTR("NumPurged"));
    v6 = a1 + 6;
    if (v7)
      v6 = a1 + 5;
  }
  return objc_msgSend(*v6, "setObject:forKey:", a3, a2);
}

void sub_10101C47C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10230BB58);
  _Unwind_Resume(a1);
}

uint64_t sub_10101C7B0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

void sub_10101C93C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  dispatch_object_t *v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  sub_101019FF4(v13);
  sub_101019FF4((dispatch_object_t *)va);
  sub_101019FF4((dispatch_object_t *)(v14 - 88));
  _Unwind_Resume(a1);
}

void sub_10101C96C(uint64_t a1, int a2, uint64_t a3)
{
  id v6;
  NSObject *v7;
  _QWORD v8[5];
  dispatch_group_t group;
  void *__p;
  void *v11;
  uint64_t v12;
  int v13;

  v6 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo");
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3321888768;
  v8[2] = sub_10101CA98;
  v8[3] = &unk_102199B78;
  v7 = *(NSObject **)(a1 + 40);
  group = v7;
  if (v7)
  {
    dispatch_retain(v7);
    dispatch_group_enter(v7);
  }
  v13 = a2;
  v11 = 0;
  v12 = 0;
  __p = 0;
  sub_10041D904(&__p, *(const void **)a3, *(_QWORD *)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
  v8[4] = *(_QWORD *)(a1 + 32);
  objc_msgSend(v6, "async:", v8);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
}

void sub_10101CA6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  sub_101019FF4((dispatch_object_t *)(v16 + 40));
  _Unwind_Resume(a1);
}

void sub_10101CA98(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  NSObject *v4;
  int v5;
  unsigned int v6;
  int v7;
  const char *v8;
  uint8_t *v9;
  NSObject *v10;
  int v11;
  int v12;
  double v13;
  uint8_t *v14;
  uint8_t *v15;
  NSObject *v16;
  int v17;
  int v18;
  double v19;
  uint8_t *v20;
  int v21;
  int v22;
  uint8_t buf[4];
  int v24;

  if (*(_DWORD *)(a1 + 72) == 100)
  {
    v2 = *(_QWORD *)(a1 + 48);
    for (i = *(_QWORD *)(a1 + 56); v2 != i; v2 += 24)
    {
      if (qword_10229FFA0 != -1)
        dispatch_once(&qword_10229FFA0, &stru_102199C50);
      v4 = qword_10229FFA8;
      if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_DEBUG))
      {
        v5 = *(_DWORD *)(v2 + 16);
        *(_DWORD *)buf = 67109120;
        v24 = v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "[Service] Processing workout with type:%d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FFA0 != -1)
          dispatch_once(&qword_10229FFA0, &stru_102199C50);
        v7 = *(_DWORD *)(v2 + 16);
        v21 = 67109120;
        v22 = v7;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFA8, 2, "[Service] Processing workout with type:%d", &v21);
        v9 = (uint8_t *)v8;
        sub_100512490("Generic", 1, 0, 2, "-[CMHealthColdStorageService queryHealthKitWithGroup:]_block_invoke", "%s\n", v8);
        if (v9 != buf)
          free(v9);
      }
      if (!*(_BYTE *)(v2 + 20))
      {
        v6 = *(_DWORD *)(v2 + 16);
        if (v6 <= 0x34 && ((1 << v6) & 0x10002001000000) != 0)
          ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 48) + 56);
      }
    }
    if (qword_10229FFA0 != -1)
      dispatch_once(&qword_10229FFA0, &stru_102199C50);
    v16 = qword_10229FFA8;
    if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_INFO))
    {
      v17 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 48) + 56);
      *(_DWORD *)buf = 67109120;
      v24 = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "[Service] Query returned total OutdoorPedWorkoutCounts: %d", buf, 8u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_10229FFA0 != -1)
      dispatch_once(&qword_10229FFA0, &stru_102199C50);
    v18 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 48) + 56);
    v21 = 67109120;
    v22 = v18;
    v19 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFA8, 1, "[Service] Query returned total OutdoorPedWorkoutCounts: %d", &v21);
    v15 = v20;
    sub_100512490("Generic", 1, 0, 2, "-[CMHealthColdStorageService queryHealthKitWithGroup:]_block_invoke", "%s\n", v19);
LABEL_35:
    if (v15 != buf)
      free(v15);
    return;
  }
  if (qword_10229FFA0 != -1)
    dispatch_once(&qword_10229FFA0, &stru_102199C50);
  v10 = qword_10229FFA8;
  if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_ERROR))
  {
    v11 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)buf = 67109120;
    v24 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "[Service] Error querying workouts: %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFA0 != -1)
      dispatch_once(&qword_10229FFA0, &stru_102199C50);
    v12 = *(_DWORD *)(a1 + 72);
    v21 = 67109120;
    v22 = v12;
    v13 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFA8, 16, "[Service] Error querying workouts: %d", &v21);
    v15 = v14;
    sub_100512490("Generic", 1, 0, 0, "-[CMHealthColdStorageService queryHealthKitWithGroup:]_block_invoke", "%s\n", v13);
    goto LABEL_35;
  }
}

_QWORD *sub_10101CF80(_QWORD *a1, uint64_t a2)
{
  NSObject *v4;
  dispatch_group_t *v5;
  _QWORD *v6;

  v4 = *(NSObject **)(a2 + 40);
  a1[5] = v4;
  v5 = (dispatch_group_t *)(a1 + 5);
  if (v4)
  {
    dispatch_retain(v4);
    if (*v5)
      dispatch_group_enter(*v5);
  }
  a1[6] = 0;
  a1[7] = 0;
  v6 = a1 + 6;
  v6[2] = 0;
  return sub_10041D904(v6, *(const void **)(a2 + 48), *(_QWORD *)(a2 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3));
}

void sub_10101CFF0(_Unwind_Exception *a1)
{
  dispatch_object_t *v1;

  sub_101019FF4(v1);
  _Unwind_Resume(a1);
}

void sub_10101D004(_QWORD *a1)
{
  void *v2;
  NSObject *v3;
  NSObject *v4;

  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  v3 = a1[5];
  if (v3)
  {
    dispatch_group_leave(v3);
    v4 = a1[5];
    if (v4)
      dispatch_release(v4);
  }
}

void sub_10101D050(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  NSObject *v4;

  v3 = *(NSObject **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    v4 = *(NSObject **)(a1 + 40);
    if (v4)
      dispatch_group_enter(v4);
  }
}

void sub_10101D090(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;

  v2 = *(NSObject **)(a1 + 40);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 40);
    if (v3)
      dispatch_release(v3);
  }
}

void sub_10101D0CC(uint64_t a1, int a2, uint64_t a3)
{
  id v6;
  NSObject *v7;
  _QWORD v8[5];
  dispatch_group_t group;
  void *__p;
  void *v11;
  uint64_t v12;
  int v13;

  v6 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo");
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3321888768;
  v8[2] = sub_10101D1F8;
  v8[3] = &unk_102199BE8;
  v7 = *(NSObject **)(a1 + 40);
  group = v7;
  if (v7)
  {
    dispatch_retain(v7);
    dispatch_group_enter(v7);
  }
  v13 = a2;
  v11 = 0;
  v12 = 0;
  __p = 0;
  sub_1002782D0(&__p, *(const void **)a3, *(_QWORD *)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
  v8[4] = *(_QWORD *)(a1 + 32);
  objc_msgSend(v6, "async:", v8);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
}

void sub_10101D1CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  sub_101019FF4((dispatch_object_t *)(v16 + 40));
  _Unwind_Resume(a1);
}

void sub_10101D1F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  NSObject *v9;
  int v10;
  int v11;
  double v12;
  uint8_t *v13;
  uint8_t *v14;
  NSObject *v15;
  int v16;
  int v17;
  double v18;
  uint8_t *v19;
  int v20;
  uint64_t v21;
  uint8_t buf[4];
  uint64_t v23;

  if (*(_DWORD *)(a1 + 72) == 100)
  {
    v2 = *(_QWORD *)(a1 + 48);
    for (i = *(_QWORD *)(a1 + 56); v2 != i; v2 += 24)
    {
      if (qword_10229FFA0 != -1)
        dispatch_once(&qword_10229FFA0, &stru_102199C50);
      v4 = qword_10229FFA8;
      if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_DEBUG))
      {
        v5 = *(_QWORD *)(v2 + 16);
        *(_DWORD *)buf = 134217984;
        v23 = v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "[Service] Processing sample with stepCount:%f", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FFA0 != -1)
          dispatch_once(&qword_10229FFA0, &stru_102199C50);
        v6 = *(_QWORD *)(v2 + 16);
        v20 = 134217984;
        v21 = v6;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFA8, 2, "[Service] Processing sample with stepCount:%f", COERCE_DOUBLE(&v20));
        v8 = (uint8_t *)v7;
        sub_100512490("Generic", 1, 0, 2, "-[CMHealthColdStorageService queryHealthKitWithGroup:]_block_invoke", "%s\n", v7);
        if (v8 != buf)
          free(v8);
      }
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 48) + 52) += (int)*(double *)(v2 + 16);
    }
    if (qword_10229FFA0 != -1)
      dispatch_once(&qword_10229FFA0, &stru_102199C50);
    v15 = qword_10229FFA8;
    if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_INFO))
    {
      v16 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 48) + 52);
      *(_DWORD *)buf = 67109120;
      LODWORD(v23) = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "[Service] Query returned total dailyStepCounts: %d", buf, 8u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_10229FFA0 != -1)
      dispatch_once(&qword_10229FFA0, &stru_102199C50);
    v17 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 48) + 52);
    v20 = 67109120;
    LODWORD(v21) = v17;
    v18 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFA8, 1, "[Service] Query returned total dailyStepCounts: %d", &v20);
    v14 = v19;
    sub_100512490("Generic", 1, 0, 2, "-[CMHealthColdStorageService queryHealthKitWithGroup:]_block_invoke", "%s\n", v18);
LABEL_31:
    if (v14 != buf)
      free(v14);
    return;
  }
  if (qword_10229FFA0 != -1)
    dispatch_once(&qword_10229FFA0, &stru_102199C50);
  v9 = qword_10229FFA8;
  if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_ERROR))
  {
    v10 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)buf = 67109120;
    LODWORD(v23) = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "[Service] Error querying step counts: %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFA0 != -1)
      dispatch_once(&qword_10229FFA0, &stru_102199C50);
    v11 = *(_DWORD *)(a1 + 72);
    v20 = 67109120;
    LODWORD(v21) = v11;
    v12 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFA8, 16, "[Service] Error querying step counts: %d", &v20);
    v14 = v13;
    sub_100512490("Generic", 1, 0, 0, "-[CMHealthColdStorageService queryHealthKitWithGroup:]_block_invoke", "%s\n", v12);
    goto LABEL_31;
  }
}

_QWORD *sub_10101D6B8(_QWORD *a1, uint64_t a2)
{
  NSObject *v4;
  dispatch_group_t *v5;
  _QWORD *v6;

  v4 = *(NSObject **)(a2 + 40);
  a1[5] = v4;
  v5 = (dispatch_group_t *)(a1 + 5);
  if (v4)
  {
    dispatch_retain(v4);
    if (*v5)
      dispatch_group_enter(*v5);
  }
  a1[6] = 0;
  a1[7] = 0;
  v6 = a1 + 6;
  v6[2] = 0;
  return sub_1002782D0(v6, *(const void **)(a2 + 48), *(_QWORD *)(a2 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3));
}

void sub_10101D728(_Unwind_Exception *a1)
{
  dispatch_object_t *v1;

  sub_101019FF4(v1);
  _Unwind_Resume(a1);
}

void sub_10101D73C(_QWORD *a1)
{
  void *v2;
  NSObject *v3;
  NSObject *v4;

  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  v3 = a1[5];
  if (v3)
  {
    dispatch_group_leave(v3);
    v4 = a1[5];
    if (v4)
      dispatch_release(v4);
  }
}

void sub_10101DB3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10101DC34(id a1)
{
  qword_10229FFA8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "HealthColdStorage");
}

Class sub_10101DC60()
{
  Class result;

  if (qword_10230BB68 != -1)
    dispatch_once(&qword_10230BB68, &stru_102199C70);
  result = objc_getClass("SAPathManager");
  qword_10230BB60 = (uint64_t)result;
  off_1022FC850 = sub_10101DCBC;
  return result;
}

uint64_t sub_10101DCBC()
{
  return qword_10230BB60;
}

void sub_10101DCC8(id a1)
{
  qword_10230BB70 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/SpaceAttribution.framework/SpaceAttribution", 2);
}

Class sub_10101DCF0()
{
  Class result;

  if (qword_10230BB68 != -1)
    dispatch_once(&qword_10230BB68, &stru_102199C70);
  result = objc_getClass("SAPathInfo");
  qword_10230BB78 = (uint64_t)result;
  off_1022FC858 = sub_10101DD4C;
  return result;
}

uint64_t sub_10101DD4C()
{
  return qword_10230BB78;
}

uint64_t sub_10101DD58(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100F64DD8(result);
    operator delete();
  }
  return result;
}

void sub_10101DF2C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10101DFBC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10101E0B4(id a1)
{
  qword_10230BB80 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLPressureBiasSilo"));
}

void sub_10101E168()
{
  operator new();
}

void sub_10101E1AC()
{
  operator delete();
}

uint64_t sub_10101E2BC(uint64_t a1, void *a2)
{
  _QWORD *v3;
  int v4;
  char v5;
  int v7;
  char v8;
  _BYTE v9[15];
  unint64_t v10;
  int v11;
  char v12;

  v3 = (_QWORD *)sub_10101E420(a1, "CLPressureBias", a2);
  *v3 = off_102199CC0;
  v3[14] = 0;
  if ((sub_1001B7910() & 0x400000000000) != 0)
  {
    sub_10101E4BC(a1);
  }
  else
  {
    if (sub_100761D14())
      sub_100C53C30();
    v8 = 14;
    *(_QWORD *)v9 = 0;
    *(_QWORD *)&v9[7] = 0x7F7FFFFF00000000;
    v10 = sub_10101E72C(a1);
    v11 = v4;
    v12 = v5;
    v7 = 0;
    (*(void (**)(uint64_t, int *, char *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v7, &v8, 1, 0xFFFFFFFFLL, 0);
  }
  return a1;
}

void sub_10101E3E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 112);
  *(_QWORD *)(v1 + 112) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_10101E7C8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10101E420(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_102199E68;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_10101E4A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10101E4BC(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  int v4;
  char v5;
  int v6;
  _QWORD v7[3];
  int v8;
  char v9;
  _BYTE v10[4];
  float v11;
  _WORD v12[111];

  result = sub_10101E8FC(a1, "pressure", "temp-compensation-table", (UInt8 *)v12);
  if ((_DWORD)result)
  {
    sub_100C51CBC((uint64_t)v10);
    v7[0] = sub_10053EA58(v12, v11);
    v7[1] = v3;
    v7[2] = sub_10101E72C(a1);
    v8 = v4;
    v9 = v5;
    v6 = 0;
    return (*(uint64_t (**)(uint64_t, int *, _QWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v6, v7, 1, 0xFFFFFFFFLL, 0);
  }
  return result;
}

void sub_10101E554(uint64_t a1, int *a2, float *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLPressureBias::onDb");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102199E18);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLPressureBias::onDb", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102199E18);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLPressureBias::onDb\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10101F1C4(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10101E70C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

unint64_t sub_10101E72C(int a1)
{
  __int128 v1;
  __int128 v3;
  unint64_t v4;
  int v5;

  *(_QWORD *)&v1 = 0xF0000000F0000000;
  *((_QWORD *)&v1 + 1) = 0xF0000000F0000000;
  v3 = v1;
  v4 = 0xF0000000F0000000;
  v5 = 0xFFFFFFF;
  if (sub_10101F3B0(a1, "pressure", "pressure-accel-sensitivity", (UInt8 *)&v3))
    return ((unint64_t)COERCE_UNSIGNED_INT((float)SDWORD1(v3) * 0.000015259) << 8) | ((unint64_t)vmul_f32(vcvt_f32_s32(*(int32x2_t *)((char *)&v3 + 8)), (float32x2_t)vdup_n_s32(0x37800000u)).u32[0] << 40);
  else
    return 0;
}

uint64_t sub_10101E7C8(uint64_t a1)
{
  *(_QWORD *)a1 = off_102199E68;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_10101E83C@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char __str[32];

  if (!*a1)
    return sub_1015A2E04(a2, "Bias");
  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1015A2E04(a2, __str);
}

uint64_t sub_10101E8EC()
{
  return 1;
}

uint64_t sub_10101E8F4()
{
  return 1;
}

uint64_t sub_10101E8FC(int a1, char *name, const char *a3, UInt8 *a4)
{
  const __CFDictionary *v6;
  io_service_t MatchingService;
  io_registry_entry_t v8;
  const __CFString *v9;
  const __CFString *v10;
  const __CFData *CFProperty;
  const __CFData *v12;
  CFTypeID v13;
  NSObject *v14;
  uint64_t v15;
  const char *v16;
  NSObject *v17;
  const char *v18;
  NSObject *v19;
  uint8_t *v20;
  NSObject *v21;
  NSObject *v22;
  NSObject *v23;
  uint8_t *v24;
  const char *v26;
  uint8_t *v27;
  const char *v28;
  uint8_t *v29;
  __int128 v30;
  uint8_t buf[4];
  const char *v32;
  CFRange v33;

  if (name && a3)
  {
    v6 = IOServiceNameMatching(name);
    MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v6);
    if (MatchingService)
    {
      v8 = MatchingService;
      v9 = CFStringCreateWithCString(kCFAllocatorDefault, a3, 0x8000100u);
      if (v9)
      {
        v10 = v9;
        CFProperty = (const __CFData *)IORegistryEntryCreateCFProperty(v8, v9, kCFAllocatorDefault, 0);
        if (!CFProperty)
        {
          if (qword_10229FD70 != -1)
            dispatch_once(&qword_10229FD70, &stru_102199E38);
          v22 = qword_10229FD78;
          if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315138;
            v32 = a3;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Cannot get %s property", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FD70 != -1)
              dispatch_once(&qword_10229FD70, &stru_102199E38);
            LODWORD(v30) = 136315138;
            *(_QWORD *)((char *)&v30 + 4) = a3;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 16, "Cannot get %s property", (const char *)&v30);
            v29 = (uint8_t *)v28;
            sub_100512490("Generic", 1, 0, 0, "BOOL CLPressureBias::readFactoryData(const char *, const char *, T &) [T = CLNonlinearPrtt::Syscfg]", "%s\n", v28);
            if (v29 != buf)
              free(v29);
          }
          IOObjectRelease(v8);
          v15 = 0;
          goto LABEL_60;
        }
        v12 = CFProperty;
        v13 = CFGetTypeID(CFProperty);
        if (v13 == CFDataGetTypeID())
        {
          if ((unint64_t)CFDataGetLength(v12) > 0xDD)
          {
            v33.location = 0;
            v33.length = 222;
            CFDataGetBytes(v12, v33, a4);
            v15 = 1;
LABEL_59:
            IOObjectRelease(v8);
            CFRelease(v12);
LABEL_60:
            CFRelease(v10);
            return v15;
          }
          if (qword_10229FD70 != -1)
            dispatch_once(&qword_10229FD70, &stru_102199E38);
          v14 = qword_10229FD78;
          if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315138;
            v32 = a3;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%s property too small", buf, 0xCu);
          }
          v15 = 0;
          if (!sub_1001BFF7C(115, 0))
            goto LABEL_59;
          bzero(buf, 0x65CuLL);
          if (qword_10229FD70 != -1)
            dispatch_once(&qword_10229FD70, &stru_102199E38);
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 16, "%s property too small", &v30);
        }
        else
        {
          if (qword_10229FD70 != -1)
            dispatch_once(&qword_10229FD70, &stru_102199E38);
          v23 = qword_10229FD78;
          if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315138;
            v32 = a3;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "%s property is not CFData", buf, 0xCu);
          }
          v15 = 0;
          if (!sub_1001BFF7C(115, 0))
            goto LABEL_59;
          bzero(buf, 0x65CuLL);
          if (qword_10229FD70 != -1)
            dispatch_once(&qword_10229FD70, &stru_102199E38);
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 16, "%s property is not CFData", &v30);
        }
        v24 = (uint8_t *)v16;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLPressureBias::readFactoryData(const char *, const char *, T &) [T = CLNonlinearPrtt::Syscfg]", "%s\n", v16);
        if (v24 != buf)
          free(v24);
        v15 = 0;
        goto LABEL_59;
      }
      if (qword_10229FD70 != -1)
        dispatch_once(&qword_10229FD70, &stru_102199E38);
      v21 = qword_10229FD78;
      if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Failed to create CFString from proprety", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD70 != -1)
          dispatch_once(&qword_10229FD70, &stru_102199E38);
        LOWORD(v30) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 16, "Failed to create CFString from proprety", &v30, 2);
        v27 = (uint8_t *)v26;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLPressureBias::readFactoryData(const char *, const char *, T &) [T = CLNonlinearPrtt::Syscfg]", "%s\n", v26);
        if (v27 != buf)
          free(v27);
      }
      IOObjectRelease(v8);
      return 0;
    }
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_102199E38);
    v19 = qword_10229FD78;
    if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Cannot find pressure registry entry", buf, 2u);
    }
    v15 = 0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD70 != -1)
        dispatch_once(&qword_10229FD70, &stru_102199E38);
      LOWORD(v30) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 16, "Cannot find pressure registry entry", &v30, 2, (_QWORD)v30);
LABEL_32:
      v20 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLPressureBias::readFactoryData(const char *, const char *, T &) [T = CLNonlinearPrtt::Syscfg]", "%s\n", v18);
      if (v20 != buf)
        free(v20);
      return 0;
    }
  }
  else
  {
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_102199E38);
    v17 = qword_10229FD78;
    if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "readFactoryData cannot be called without a node or a property", buf, 2u);
    }
    v15 = 0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD70 != -1)
        dispatch_once(&qword_10229FD70, &stru_102199E38);
      LOWORD(v30) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 17, "readFactoryData cannot be called without a node or a property", &v30, 2, (_QWORD)v30);
      goto LABEL_32;
    }
  }
  return v15;
}

uint64_t sub_10101F130(uint64_t a1, float *a2)
{
  float v3;
  float v4;
  int v5;
  char v6;
  int v8;
  char v9;
  __int16 v10;
  char v11;
  float v12;
  float v13;
  int v14;
  unint64_t v15;
  int v16;
  char v17;

  v3 = a2[1];
  v4 = *a2 * 1000.0;
  v9 = 14;
  v10 = 0;
  v11 = 0;
  v12 = v4;
  v13 = v4 * v3;
  v14 = 2139095039;
  v15 = sub_10101E72C(a1);
  v16 = v5;
  v17 = v6;
  v8 = 0;
  return (*(uint64_t (**)(uint64_t, int *, char *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v8, &v9, 1, 0xFFFFFFFFLL, 0);
}

void sub_10101F1C4(uint64_t a1, uint64_t a2, int *a3, float *a4)
{
  NSObject *v5;
  int v6;
  int v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;

  if (*a3)
  {
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_102199E38);
    v5 = qword_10229FD78;
    if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_ERROR))
    {
      v6 = *a3;
      *(_DWORD *)buf = 67109120;
      v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Unexpected notification from pressure db.notification,%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD70 != -1)
        dispatch_once(&qword_10229FD70, &stru_102199E38);
      v7 = *a3;
      v10[0] = 67109120;
      v10[1] = v7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 16, "Unexpected notification from pressure db.notification,%d", v10);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "void CLPressureBias::onDb(int, const CLPressureCalibrationDatabase_Type::Notification &, const CLPressureCalibrationDatabase_Type::NotificationData &)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
  else
  {
    sub_10101F130(a1, a4);
  }
}

uint64_t sub_10101F3B0(int a1, char *name, const char *a3, UInt8 *a4)
{
  const __CFDictionary *v6;
  io_service_t MatchingService;
  io_registry_entry_t v8;
  const __CFString *v9;
  const __CFString *v10;
  const __CFData *CFProperty;
  const __CFData *v12;
  CFTypeID v13;
  NSObject *v14;
  uint64_t v15;
  const char *v16;
  NSObject *v17;
  const char *v18;
  NSObject *v19;
  uint8_t *v20;
  NSObject *v21;
  NSObject *v22;
  NSObject *v23;
  uint8_t *v24;
  const char *v26;
  uint8_t *v27;
  const char *v28;
  uint8_t *v29;
  __int128 v30;
  uint8_t buf[4];
  const char *v32;
  CFRange v33;

  if (name && a3)
  {
    v6 = IOServiceNameMatching(name);
    MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v6);
    if (MatchingService)
    {
      v8 = MatchingService;
      v9 = CFStringCreateWithCString(kCFAllocatorDefault, a3, 0x8000100u);
      if (v9)
      {
        v10 = v9;
        CFProperty = (const __CFData *)IORegistryEntryCreateCFProperty(v8, v9, kCFAllocatorDefault, 0);
        if (!CFProperty)
        {
          if (qword_10229FD70 != -1)
            dispatch_once(&qword_10229FD70, &stru_102199E38);
          v22 = qword_10229FD78;
          if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315138;
            v32 = a3;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Cannot get %s property", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FD70 != -1)
              dispatch_once(&qword_10229FD70, &stru_102199E38);
            LODWORD(v30) = 136315138;
            *(_QWORD *)((char *)&v30 + 4) = a3;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 16, "Cannot get %s property", (const char *)&v30);
            v29 = (uint8_t *)v28;
            sub_100512490("Generic", 1, 0, 0, "BOOL CLPressureBias::readFactoryData(const char *, const char *, T &) [T = CLPressureInertialCompensation::IORegType]", "%s\n", v28);
            if (v29 != buf)
              free(v29);
          }
          IOObjectRelease(v8);
          v15 = 0;
          goto LABEL_60;
        }
        v12 = CFProperty;
        v13 = CFGetTypeID(CFProperty);
        if (v13 == CFDataGetTypeID())
        {
          if ((unint64_t)CFDataGetLength(v12) > 0x1B)
          {
            v33.location = 0;
            v33.length = 28;
            CFDataGetBytes(v12, v33, a4);
            v15 = 1;
LABEL_59:
            IOObjectRelease(v8);
            CFRelease(v12);
LABEL_60:
            CFRelease(v10);
            return v15;
          }
          if (qword_10229FD70 != -1)
            dispatch_once(&qword_10229FD70, &stru_102199E38);
          v14 = qword_10229FD78;
          if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315138;
            v32 = a3;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%s property too small", buf, 0xCu);
          }
          v15 = 0;
          if (!sub_1001BFF7C(115, 0))
            goto LABEL_59;
          bzero(buf, 0x65CuLL);
          if (qword_10229FD70 != -1)
            dispatch_once(&qword_10229FD70, &stru_102199E38);
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 16, "%s property too small", &v30);
        }
        else
        {
          if (qword_10229FD70 != -1)
            dispatch_once(&qword_10229FD70, &stru_102199E38);
          v23 = qword_10229FD78;
          if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315138;
            v32 = a3;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "%s property is not CFData", buf, 0xCu);
          }
          v15 = 0;
          if (!sub_1001BFF7C(115, 0))
            goto LABEL_59;
          bzero(buf, 0x65CuLL);
          if (qword_10229FD70 != -1)
            dispatch_once(&qword_10229FD70, &stru_102199E38);
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 16, "%s property is not CFData", &v30);
        }
        v24 = (uint8_t *)v16;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLPressureBias::readFactoryData(const char *, const char *, T &) [T = CLPressureInertialCompensation::IORegType]", "%s\n", v16);
        if (v24 != buf)
          free(v24);
        v15 = 0;
        goto LABEL_59;
      }
      if (qword_10229FD70 != -1)
        dispatch_once(&qword_10229FD70, &stru_102199E38);
      v21 = qword_10229FD78;
      if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Failed to create CFString from proprety", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD70 != -1)
          dispatch_once(&qword_10229FD70, &stru_102199E38);
        LOWORD(v30) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 16, "Failed to create CFString from proprety", &v30, 2);
        v27 = (uint8_t *)v26;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLPressureBias::readFactoryData(const char *, const char *, T &) [T = CLPressureInertialCompensation::IORegType]", "%s\n", v26);
        if (v27 != buf)
          free(v27);
      }
      IOObjectRelease(v8);
      return 0;
    }
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_102199E38);
    v19 = qword_10229FD78;
    if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Cannot find pressure registry entry", buf, 2u);
    }
    v15 = 0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD70 != -1)
        dispatch_once(&qword_10229FD70, &stru_102199E38);
      LOWORD(v30) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 16, "Cannot find pressure registry entry", &v30, 2, (_QWORD)v30);
LABEL_32:
      v20 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLPressureBias::readFactoryData(const char *, const char *, T &) [T = CLPressureInertialCompensation::IORegType]", "%s\n", v18);
      if (v20 != buf)
        free(v20);
      return 0;
    }
  }
  else
  {
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_102199E38);
    v17 = qword_10229FD78;
    if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "readFactoryData cannot be called without a node or a property", buf, 2u);
    }
    v15 = 0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD70 != -1)
        dispatch_once(&qword_10229FD70, &stru_102199E38);
      LOWORD(v30) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 17, "readFactoryData cannot be called without a node or a property", &v30, 2, (_QWORD)v30);
      goto LABEL_32;
    }
  }
  return v15;
}

uint64_t sub_10101FBE4(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_102199CC0;
  v2 = a1[14];
  a1[14] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_10101E7C8((uint64_t)a1);
}

void sub_10101FC28(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_102199CC0;
  v2 = a1[14];
  a1[14] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_10101E7C8((uint64_t)a1);
  operator delete();
}

void sub_10101FC80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102199E18);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_102199E18);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData>::removeClient(int) [Notification_T = CLPressureBias_Type::Notification, NotificationData_T = CLPressureBias_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

BOOL sub_10101FEF4(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102199E18);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102199E18);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLPressureBias_Type::Notification, NotificationData_T = CLPressureBias_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

BOOL sub_101020174(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE buf[12];
  __int16 v36;
  void **v37;
  char v38;
  int v39;
  _QWORD *v40;
  __int16 v41;
  _BYTE *v42;
  void *__p[2];
  char v44;

  HIDWORD(v34) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009E904((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102199E18);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v44 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v36 = 2082;
                v37 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_102199E18);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v38 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v39 = 136446466;
                v40 = v29;
                v41 = 2082;
                v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                v33 = v32;
                if (v38 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLPressureBias_Type::Notification, NotificationData_T = CLPressureBias_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v33);
                if (v33 != (char *)__p)
                  free(v33);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_1010204FC(uint64_t a1, int *a2, _OWORD *a3)
{
  char *v6;
  uint64_t **v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  int v12;
  __int128 v13;
  int *v14;

  v6 = (char *)operator new(0x38uLL);
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = off_102199F48;
  *((_QWORD *)v6 + 1) = 0;
  *(_OWORD *)(v6 + 24) = *a3;
  *(_OWORD *)(v6 + 37) = *(_OWORD *)((char *)a3 + 13);
  *(_QWORD *)&v13 = v6 + 24;
  *((_QWORD *)&v13 + 1) = v6;
  v12 = *a2;
  v14 = &v12;
  v7 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v12, (uint64_t)&unk_101B9EB60, &v14);
  sub_1002B7674((uint64_t)(v7 + 8), &v13);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return 1;
}

void sub_1010205D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1010205EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v5[4];

  memset(v5, 0, 29);
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, a2, v5, a3, a4, 0);
}

void sub_10102062C(uint64_t a1, signed __int32 *a2, _OWORD *a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  char *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  os_activity_scope_state_s state;
  uint8_t buf[8];
  _BYTE v30[20];
  __int16 v31;
  _QWORD *v32;
  __int16 v33;
  std::__shared_weak_count *v34;
  _QWORD **v35;
  _QWORD *v36[3];
  std::__shared_weak_count *v37;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102199E18);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v30 = 2082;
      *(_QWORD *)&v30[2] = "";
      *(_WORD *)&v30[10] = 2082;
      *(_QWORD *)&v30[12] = "activity";
      v31 = 2082;
      v32 = v10;
      v33 = 2050;
      v34 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v35 = v36;
      memset(v36, 0, sizeof(v36));
      v37 = 0;
      sub_1004A6D60((uint64_t)buf, a2, (uint64_t)&v35);
      v14 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)buf);
      v18 = v34;
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v30, *(_QWORD **)&v30[8]);
      v21 = v37;
      if (v37)
      {
        v22 = (unint64_t *)&v37->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v35, v36[0]);
    }
    if (a4)
    {
      v24 = (char *)operator new(0x38uLL);
      *((_QWORD *)v24 + 1) = 0;
      *((_QWORD *)v24 + 2) = 0;
      *(_QWORD *)v24 = off_102199F48;
      *(_OWORD *)(v24 + 24) = *a3;
      *(_OWORD *)(v24 + 37) = *(_OWORD *)((char *)a3 + 13);
      *(_QWORD *)buf = v24 + 24;
      *(_QWORD *)v30 = v24;
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)buf);
      v25 = *(std::__shared_weak_count **)v30;
      if (*(_QWORD *)v30)
      {
        v26 = (unint64_t *)(*(_QWORD *)v30 + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_1010212BC();
    os_activity_scope_leave(&state);
  }
}

void sub_101020C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_101020CB8(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102199E18);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102199E18);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData>::listClients() [Notification_T = CLPressureBias_Type::Notification, NotificationData_T = CLPressureBias_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102199E18);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102199E18);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData>::listClients() [Notification_T = CLPressureBias_Type::Notification, NotificationData_T = CLPressureBias_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_102199E18);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102199E18);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData>::listClients() [Notification_T = CLPressureBias_Type::Notification, NotificationData_T = CLPressureBias_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_101021264(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_101021290(id a1)
{
  qword_10229FD78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pressure");
}

void sub_1010212BC()
{
  operator new();
}

void sub_101021354(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  id v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  const char *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  __int16 v54;
  int v55;
  uint8_t buf[4];
  _QWORD *v57;
  __int16 v58;
  int v59;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v51 = v9;
        v13 = sub_10002F2F8(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, id, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 7);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v50 = v19;
              sub_100246D10(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v51 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 28);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 28);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v50 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102199E18);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                v57 = v25;
                v58 = 1026;
                v59 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_102199E18);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 7);
                v52 = 136446466;
                v53 = v45;
                v54 = 1026;
                v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                v48 = (uint8_t *)v47;
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLPressureBias_Type::Notification, NotificationData_T = CLPressureBias_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v48 != buf)
                  free(v48);
              }
            }
          }
          while (v14 != v51 + 6);
        }
      }
    }
  }
}

void sub_101021728(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102199F48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10102173C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102199F48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_101021778(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

id sub_101021798(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t buf[4];
  id v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  unint64_t v15;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return sub_101021B20((uint64_t)&v8 + 7, a1);
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102199F88);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v11 = v2;
      v12 = 2048;
      v13 = 0;
      v14 = 2080;
      v15 = 0x8000000101C3AF3DLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102199F88);
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v9, v8, v9);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102199F88);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v11 = v2;
      v12 = 2048;
      v13 = 0;
      v14 = 2080;
      v15 = 0x8000000101C3AF3DLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102199F88);
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v9, v8, v9);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLPressureBias_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

id sub_101021B20(uint64_t a1, void *a2)
{
  if (!objc_msgSend(a2, "cppObjectPtr")
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_10221CD58))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)29)
      sub_10193A8A0();
    objc_msgSend(a2, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a2, "serialized"), "bytes"));
  }
  return objc_msgSend(a2, "cppObjectPtr");
}

void sub_101021B94(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t sub_101021BC0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

void sub_10102202C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  os_unfair_lock_s *v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  os_unfair_lock_unlock(v7);
  _Unwind_Resume(a1);
}

void sub_10102205C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v4;

  if (a3)
  {
    NSLog(CFSTR("CoreData, Failed to load Core Data stack: %@"), a3);
    v4 = 0;
  }
  else
  {
    NSLog(CFSTR("CoreData, Successfully loaded Core Data stack!"));
    v4 = 1;
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v4;
}

void sub_101022178(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1010222C0(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_101022638(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[5];

  *a1 = off_10219A008;
  v2 = a1[1];
  *(_WORD *)((char *)v6 + 1) = 0;
  sub_101035574(v2 + 192, (__int16 *)v6, 0);
  v3 = a1[1];
  v4 = sub_100127B9C();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10103464C;
  v6[3] = &unk_10212ECA0;
  v6[4] = v3;
  sub_1000A57FC(v4, (uint64_t)v6);
  return a1;
}

void sub_1010226CC(_QWORD *a1)
{
  sub_101022638(a1);
  operator delete();
}

void sub_1010226F0(uint64_t a1, char a2)
{
  uint64_t v2;
  __int16 v3;
  char v4;

  v2 = *(_QWORD *)(a1 + 8);
  HIBYTE(v3) = 1;
  v4 = a2;
  sub_101035574(v2 + 192, &v3, 0);
}

_QWORD *sub_101022728(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[5];

  *a1 = off_10219A030;
  sub_1010227B0(a1[1], 0, 0);
  v2 = a1[1];
  v3 = sub_100127B9C();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_101034658;
  v5[3] = &unk_10212ECA0;
  v5[4] = v2;
  sub_1000A57FC(v3, (uint64_t)v5);
  return a1;
}

void sub_1010227B0(uint64_t a1, int a2, unsigned int a3)
{
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _BYTE v10[2];
  unsigned int v11;
  _DWORD v12[2];
  __int16 v13;
  uint64_t v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  uint64_t v18;

  v10[1] = a2;
  v11 = a3;
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_10219AC68);
  v6 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109376;
    v16 = a2;
    v17 = 2048;
    v18 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "motionstateupdate, calling setMotionStateSim(%d, %lu)", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10219AC68);
    v12[0] = 67109376;
    v12[1] = a2;
    v13 = 2048;
    v14 = a3;
    LODWORD(v9) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "motionstateupdate, calling setMotionStateSim(%d, %lu)", v12, v9);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionCoprocessor::setMotionStateSim(BOOL, uint32_t)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  sub_101035700(a1 + 192, (int *)v10, 0);
}

void sub_1010229A4(_QWORD *a1)
{
  sub_101022728(a1);
  operator delete();
}

void sub_1010229C8(uint64_t a1, unsigned int a2)
{
  sub_1010227B0(*(_QWORD *)(a1 + 8), 1, a2);
}

_QWORD *sub_1010229D8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[5];

  *a1 = off_10219A058;
  sub_101022A60(a1[1], 0, 0);
  v2 = a1[1];
  v3 = sub_100127B9C();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_101034664;
  v5[3] = &unk_10212ECA0;
  v5[4] = v2;
  sub_1000A57FC(v3, (uint64_t)v5);
  return a1;
}

void sub_101022A60(uint64_t a1, int a2, int a3)
{
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[2];
  __int16 v10;
  int v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  int v15;

  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_10219AC68);
  v6 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    v13 = a2;
    v14 = 1024;
    v15 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "motionstateupdate, calling setMotionStateYouthSim(%d, %hhu)", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10219AC68);
    v9[0] = 67109376;
    v9[1] = a2;
    v10 = 1024;
    v11 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "motionstateupdate, calling setMotionStateYouthSim(%d, %hhu)", v9, 14);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionCoprocessor::setMotionStateYouthSim(BOOL, uint8_t)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  buf[1] = a2;
  buf[2] = a3;
  sub_10103588C(a1 + 192, (__int16 *)buf, 0);
}

void sub_101022C4C(_QWORD *a1)
{
  sub_1010229D8(a1);
  operator delete();
}

void sub_101022C70(uint64_t a1, unsigned __int8 a2)
{
  sub_101022A60(*(_QWORD *)(a1 + 8), 1, a2);
}

uint64_t sub_101022C80(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD v5[5];

  *(_QWORD *)a1 = off_10219A080;
  *(_QWORD *)(a1 + 8) = a2;
  *(_WORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 18) = 0;
  v3 = sub_100127B9C();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_101022CF8;
  v5[3] = &unk_10212ECA0;
  v5[4] = a1;
  sub_1000A50A8(v3, (uint64_t)v5);
  return a1;
}

void sub_101022CF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[5];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v2 = sub_100127B9C();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_101026070;
  v3[3] = &unk_10212ECA0;
  v3[4] = v1;
  sub_1000A57FC(v2, (uint64_t)v3);
}

_QWORD *sub_101022D5C(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[5];

  *a1 = off_10219A080;
  v2 = sub_100127B9C();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_101022DD0;
  v4[3] = &unk_10212ECA0;
  v4[4] = a1;
  sub_1000A50A8(v2, (uint64_t)v4);
  return a1;
}

void sub_101022DD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[5];

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v1 + 17))
    --*(_DWORD *)(*(_QWORD *)(v1 + 8) + 892);
  if (*(_BYTE *)(v1 + 18))
    --*(_DWORD *)(*(_QWORD *)(v1 + 8) + 896);
  v2 = *(_QWORD *)(v1 + 8);
  if (*(_BYTE *)(v1 + 16))
    --*(_DWORD *)(v2 + 888);
  v3 = sub_100127B9C();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_101026070;
  v4[3] = &unk_10212ECA0;
  v4[4] = v2;
  sub_1000A57FC(v3, (uint64_t)v4);
}

void sub_101022E7C(_QWORD *a1)
{
  sub_101022D5C(a1);
  operator delete();
}

void sub_101022EA0(uint64_t a1, char a2)
{
  uint64_t v4;
  _QWORD v5[5];
  char v6;

  v4 = sub_100127B9C();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_101022F08;
  v5[3] = &unk_1021468D0;
  v5[4] = a1;
  v6 = a2;
  sub_1000A50A8(v4, (uint64_t)v5);
}

void sub_101022F08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  _QWORD v7[5];

  v1 = *(_QWORD *)(a1 + 32);
  if (*(unsigned __int8 *)(a1 + 40) != *(unsigned __int8 *)(v1 + 16))
  {
    v3 = *(_QWORD *)(v1 + 8);
    v4 = *(_DWORD *)(v3 + 888);
    if (*(_BYTE *)(a1 + 40))
      v5 = v4 + 1;
    else
      v5 = v4 - 1;
    *(_DWORD *)(v3 + 888) = v5;
    v6 = sub_100127B9C();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_101026070;
    v7[3] = &unk_10212ECA0;
    v7[4] = v3;
    sub_1000A57FC(v6, (uint64_t)v7);
    *(_BYTE *)(v1 + 16) = *(_BYTE *)(a1 + 40);
  }
}

void sub_101022FA4(uint64_t a1, char a2)
{
  uint64_t v4;
  _QWORD v5[5];
  char v6;

  v4 = sub_100127B9C();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10102300C;
  v5[3] = &unk_1021468D0;
  v5[4] = a1;
  v6 = a2;
  sub_1000A50A8(v4, (uint64_t)v5);
}

void sub_10102300C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  _QWORD v7[5];

  v1 = *(_QWORD *)(a1 + 32);
  if (*(unsigned __int8 *)(a1 + 40) != *(unsigned __int8 *)(v1 + 17))
  {
    v3 = *(_QWORD *)(v1 + 8);
    v4 = *(_DWORD *)(v3 + 892);
    if (*(_BYTE *)(a1 + 40))
      v5 = v4 + 1;
    else
      v5 = v4 - 1;
    *(_DWORD *)(v3 + 892) = v5;
    v6 = sub_100127B9C();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_101026070;
    v7[3] = &unk_10212ECA0;
    v7[4] = v3;
    sub_1000A57FC(v6, (uint64_t)v7);
    *(_BYTE *)(v1 + 17) = *(_BYTE *)(a1 + 40);
  }
}

void sub_1010230A8(uint64_t a1, char a2)
{
  uint64_t v4;
  _QWORD v5[5];
  char v6;

  v4 = sub_100127B9C();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_101023110;
  v5[3] = &unk_1021468D0;
  v5[4] = a1;
  v6 = a2;
  sub_1000A50A8(v4, (uint64_t)v5);
}

void sub_101023110(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  _QWORD v7[5];

  v1 = *(_QWORD *)(a1 + 32);
  if (*(unsigned __int8 *)(a1 + 40) != *(unsigned __int8 *)(v1 + 18))
  {
    v3 = *(_QWORD *)(v1 + 8);
    v4 = *(_DWORD *)(v3 + 896);
    if (*(_BYTE *)(a1 + 40))
      v5 = v4 + 1;
    else
      v5 = v4 - 1;
    *(_DWORD *)(v3 + 896) = v5;
    v6 = sub_100127B9C();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_101026070;
    v7[3] = &unk_10212ECA0;
    v7[4] = v3;
    sub_1000A57FC(v6, (uint64_t)v7);
    *(_BYTE *)(v1 + 18) = *(_BYTE *)(a1 + 40);
  }
}

void sub_1010231AC(uint64_t a1)
{
  int times;
  int v3;
  NSObject *v4;
  uint8_t *v5;
  double v6;
  double v7;
  double v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  __int16 v21;
  double v22;
  __int16 v23;
  double v24;
  __int16 v25;
  uint64_t v26;
  uint8_t buf[4];
  uint64_t v28;
  __int16 v29;
  double v30;
  __int16 v31;
  double v32;
  __int16 v33;
  uint64_t v34;

  v17 = 0;
  v18 = 0;
  v15 = 0.0;
  v16 = 0.0;
  times = mach_get_times(&v18, &v17, &v15);
  if (times)
  {
    v3 = times;
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10219AC68);
    v4 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v28) = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Unable to update fMachToWallOffset! %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10219AC68);
      v19 = 67109120;
      LODWORD(v20) = v3;
      v5 = (uint8_t *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 16, "Unable to update fMachToWallOffset! %d", &v19);
      sub_100512490("Generic", 1, 0, 0, "void CLMotionCoprocessor::updateMachToWallOffset()", "%s\n");
LABEL_19:
      if (v5 != buf)
        free(v5);
    }
  }
  else
  {
    v6 = (double)*(uint64_t *)&v15 + (double)*(uint64_t *)&v16 * 0.000000001;
    v7 = sub_100127828(v18);
    v8 = v6 - kCFAbsoluteTimeIntervalSince1970;
    *(double *)(a1 + 664) = v8 - v7;
    if (qword_10229FC80 != -1)
      dispatch_once(&qword_10229FC80, &stru_10219AC48);
    v9 = qword_10229FC88;
    if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_DEFAULT))
    {
      v10 = *(_QWORD *)(a1 + 664);
      v11 = *(_QWORD *)(a1 + 352);
      *(_DWORD *)buf = 134218752;
      v28 = v10;
      v29 = 2048;
      v30 = v7;
      v31 = 2048;
      v32 = v8;
      v33 = 2048;
      v34 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Updating fMachToWallOffset %f, mach time %f, wall time %f, iohidtime %f", buf, 0x2Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC80 != -1)
        dispatch_once(&qword_10229FC80, &stru_10219AC48);
      v12 = *(_QWORD *)(a1 + 664);
      v13 = *(_QWORD *)(a1 + 352);
      v19 = 134218752;
      v20 = v12;
      v21 = 2048;
      v22 = v7;
      v23 = 2048;
      v24 = v8;
      v25 = 2048;
      v26 = v13;
      LODWORD(v14) = 42;
      v5 = (uint8_t *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC88, 0, "Updating fMachToWallOffset %f, mach time %f, wall time %f, iohidtime %f", COERCE_DOUBLE(&v19), v14, v15, v16);
      sub_100512490("Generic", 1, 0, 2, "void CLMotionCoprocessor::updateMachToWallOffset()", "%s\n");
      goto LABEL_19;
    }
  }
}

void sub_101023534(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];

  v2 = sub_100127B9C();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_101023594;
  v3[3] = &unk_10212ECA0;
  v3[4] = a1;
  sub_1000A57FC(v2, (uint64_t)v3);
}

double sub_101023594(uint64_t a1)
{
  uint64_t v1;
  CFAbsoluteTime Current;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  double result;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD v14[2];
  __int128 v15;
  _OWORD v16[2];
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v1 + 859))
  {
    Current = CFAbsoluteTimeGetCurrent();
    v19 = 0;
    v18 = 0;
    v20 = 0;
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    memset(v14, 0, sizeof(v14));
    v15 = 0u;
    *(_QWORD *)&v9 = *(_QWORD *)(v1 + 352);
    *((CFAbsoluteTime *)&v9 + 1) = Current;
    v10 = 0uLL;
    LOWORD(v11) = 0;
    *((_QWORD *)&v11 + 1) = (unint64_t)Current;
    *(_QWORD *)&v12 = 0;
    *(_QWORD *)((char *)&v12 + 7) = 0;
    *(_QWORD *)&v13 = 0x7E007E007E007E00;
    WORD5(v13) = 0;
    LODWORD(v14[0]) = 0;
    *(_QWORD *)((char *)&v14[1] + 2) = 0;
    *(_OWORD *)((char *)v14 + 4) = v17;
    WORD5(v14[1]) = -1;
    v15 = 0u;
    memset(v16, 0, sizeof(v16));
    sub_10014C2F4(v1, 0, (uint64_t)&v9, 160);
    v3 = v15;
    *(_OWORD *)(v1 + 776) = v14[1];
    *(_OWORD *)(v1 + 792) = v3;
    v4 = v16[1];
    *(_OWORD *)(v1 + 808) = v16[0];
    *(_OWORD *)(v1 + 824) = v4;
    v5 = v12;
    *(_OWORD *)(v1 + 712) = v11;
    *(_OWORD *)(v1 + 728) = v5;
    v6 = v14[0];
    *(_OWORD *)(v1 + 744) = v13;
    *(_OWORD *)(v1 + 760) = v6;
    result = *(double *)&v9;
    v8 = v10;
    *(_OWORD *)(v1 + 680) = v9;
    *(_OWORD *)(v1 + 696) = v8;
  }
  return result;
}

void sub_1010236A8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v2 = *(_QWORD *)(a1 + 1280);
  if (v2)
  {
    v3 = (std::__shared_weak_count *)a2[1];
    v9 = *a2;
    v10 = v3;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t *))(v2 + 16))(v2, &v9);
    v6 = v10;
    if (v10)
    {
      v7 = (unint64_t *)&v10->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_101023734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_101023748(uint64_t a1, int a2)
{
  NSObject *v4;
  char *v5;
  _DWORD v6[4];
  uint8_t buf[4];
  int v8;

  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_10219AC68);
  v4 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Sending userParam: %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10219AC68);
    v6[0] = 67109120;
    v6[1] = a2;
    v5 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "Sending userParam: %d", v6);
    sub_100512490("Generic", 1, 0, 2, "void CLMotionCoprocessor::sendStrideParam(uint16_t)", "%s\n", v5);
    if (v5 != (char *)buf)
      free(v5);
  }
  buf[0] = 11;
  *(_WORD *)&buf[1] = a2;
  sub_101034A80(a1 + 192, (__int16 *)buf, 0);
}

uint64_t sub_101023910()
{
  unint64_t v0;
  unsigned __int8 v2[3];
  unsigned __int8 v3;

  if (sub_10011E0F0())
    v0 = ((unint64_t)sub_1001B7910() >> 23) & 1;
  else
    LOBYTE(v0) = 1;
  v3 = v0;
  sub_1018BF25C(v2, "OscarActivity", &v3, 0);
  return v2[1];
}

void sub_101023960(uint64_t a1, float *a2, char a3)
{
  float *v3;
  float *v4;
  float *v5;
  __objc2_class *v6;
  int v10;
  uint64_t v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  dispatch_time_t v22;
  NSObject *v23;
  uint64_t v24;
  NSObject *v25;
  char *v26;
  double v27;
  double v28;
  double v29;
  double v30;
  char *v31;
  char *v32;
  char *v33;
  double v34;
  double v35;
  double block[5];
  uint64_t v37;
  std::__shared_weak_count *v38;
  BOOL v39;
  uint64_t v40;
  int v41;
  double v42;
  __int16 v43;
  double v44;
  __int16 v45;
  double v46;
  __int16 v47;
  double v48;
  int buf;
  double buf_4;
  __int16 v51;
  double v52;
  __int16 v53;
  double v54;
  __int16 v55;
  double v56;

  sub_100127B9C();
  sub_100127BDC();
  if ((*(_BYTE *)(a1 + 648) & 1) != 0)
  {
    sub_10193AA10();
    __break(1u);
LABEL_49:
    dispatch_once(&qword_10229FD20, &stru_10219ACC8);
    goto LABEL_6;
  }
  LOBYTE(v10) = a2 | 1;
  *(_DWORD *)(a1 + 648) = a2 | 1;
  if ((a2 & 0x40) == 0)
    goto LABEL_30;
  v40 = 0;
  v39 = 0;
  v11 = sub_100127B9C();
  sub_100081C10(v11, &v37);
  sub_100526804(v37, "ISPUpdateInterval", (float *)&v40 + 1);
  sub_100526804(v37, "OscarPredictionInterval", (float *)&v40);
  sub_1001E4874(v37, "OscarDisableDynamicBias", &v39);
  a2 = (float *)(a1 + 904);
  sub_100526804(v37, "OscarGyroBiasXOffset", (float *)(a1 + 904));
  v3 = (float *)(a1 + 908);
  sub_100526804(v37, "OscarGyroBiasYOffset", (float *)(a1 + 908));
  v4 = (float *)(a1 + 912);
  sub_100526804(v37, "OscarGyroBiasZOffset", (float *)(a1 + 912));
  v5 = (float *)(a1 + 916);
  if ((sub_100526804(v37, "OscarGyroBiasErrorOffset", (float *)(a1 + 916)) & 1) == 0)
    sub_100526804(v37, "OscarGyroBiasErrorOffest", (float *)(a1 + 916));
  v6 = DefaultObserver;
  if (qword_10229FD20 != -1)
    goto LABEL_49;
LABEL_6:
  v12 = qword_10229FD28;
  if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_INFO))
  {
    buf = 134349312;
    buf_4 = *(float *)&v40;
    v51 = 2050;
    v52 = *((float *)&v40 + 1);
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "predictionInterval,%{public}f,ispUpdateInterval,%{public}f", (uint8_t *)&buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (v6[84].isa != (__objc2_class *)-1)
      dispatch_once(&qword_10229FD20, &stru_10219ACC8);
    v41 = 134349312;
    v42 = *(float *)&v40;
    v43 = 2050;
    v44 = *((float *)&v40 + 1);
    v26 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FD28, 1, "predictionInterval,%{public}f,ispUpdateInterval,%{public}f", &v41, 22);
    sub_100512490("Generic", 1, 0, 2, "void CLMotionCoprocessor::setFeatures(unsigned int, BOOL)", "%s\n", v26);
    if (v26 != (char *)&buf)
      free(v26);
  }
  if (v39)
  {
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_10219ACE8);
    v13 = off_10229FD58;
    if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Warning: dynamic bias estimation disabled!", (uint8_t *)&buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_10219ACE8);
      LOWORD(v41) = 0;
      LODWORD(v34) = 2;
      v32 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, off_10229FD58, 0, "Warning: dynamic bias estimation disabled!", &v41, *(_QWORD *)&v34);
      sub_100512490("Generic", 1, 0, 2, "void CLMotionCoprocessor::setFeatures(unsigned int, BOOL)", "%s\n", v32);
      if (v32 != (char *)&buf)
        free(v32);
    }
  }
  if (*a2 != 0.0 || *v3 != 0.0 || *v4 != 0.0 || *v5 != 0.0)
  {
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_10219ACE8);
    v14 = off_10229FD58;
    if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_DEFAULT))
    {
      v15 = *a2;
      v16 = *v3;
      v17 = *v4;
      v18 = *v5;
      buf = 134218752;
      buf_4 = v15;
      v51 = 2048;
      v52 = v16;
      v53 = 2048;
      v54 = v17;
      v55 = 2048;
      v56 = v18;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Warning: manual gyro bias offset [%f %f %f] dps,error,%f", (uint8_t *)&buf, 0x2Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_10219ACE8);
      v27 = *a2;
      v28 = *v3;
      v29 = *v4;
      v30 = *v5;
      v41 = 134218752;
      v42 = v27;
      v43 = 2048;
      v44 = v28;
      v45 = 2048;
      v46 = v29;
      v47 = 2048;
      v48 = v30;
      LODWORD(v34) = 42;
      v31 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, off_10229FD58, 0, "Warning: manual gyro bias offset [%f %f %f] dps,error,%f", COERCE_DOUBLE(&v41), v34, v35, block[0]);
      sub_100512490("Generic", 1, 0, 2, "void CLMotionCoprocessor::setFeatures(unsigned int, BOOL)", "%s\n", v31);
      if (v31 != (char *)&buf)
        free(v31);
    }
  }
  *(_DWORD *)(a1 + 230) = HIDWORD(v40);
  *(_DWORD *)(a1 + 234) = v40;
  *(_WORD *)(a1 + 228) = *(_WORD *)(a1 + 900);
  *(_DWORD *)(a1 + 238) = *(_DWORD *)(a1 + 916);
  *(_BYTE *)(a1 + 242) = v39;
  v19 = v38;
  if (v38)
  {
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v10 = *(_DWORD *)(a1 + 648);
LABEL_30:
  if ((v10 & 8) != 0)
    *(_BYTE *)(a1 + 223) = 1;
  if ((a3 & 1) == 0)
  {
    if ((v10 & 4) != 0)
    {
      sub_100128CC8();
      sub_100236AF0();
    }
    if ((v10 & 2) != 0)
    {
      *(_BYTE *)(a1 + 224) = 1;
      v22 = dispatch_time(0, 30000000000);
      sub_100127B9C();
      v23 = objc_msgSend(sub_10024455C(), "queue");
      *(_QWORD *)&block[0] = _NSConcreteStackBlock;
      *(_QWORD *)&block[1] = 3221225472;
      *(_QWORD *)&block[2] = sub_101024578;
      *(_QWORD *)&block[3] = &unk_10212ECA0;
      *(_QWORD *)&block[4] = a1;
      dispatch_after(v22, v23, block);
      v10 = *(_DWORD *)(a1 + 648);
    }
    if ((v10 & 0x40) != 0)
    {
      v24 = sub_100128CC8();
      if (sub_1006157F4(v24))
      {
        sub_100128CC8();
        sub_100615894();
      }
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_10219ACE8);
      v25 = off_10229FD58;
      if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_FAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_FAULT, "CLGyroCalibrationDatabase is not available.", (uint8_t *)&buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_10229FD50 != -1)
          dispatch_once(&qword_10229FD50, &stru_10219ACE8);
        LOWORD(v41) = 0;
        LODWORD(v34) = 2;
        v33 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, off_10229FD58, 17, "CLGyroCalibrationDatabase is not available.", &v41, *(_QWORD *)&v34);
        sub_100512490("Generic", 1, 0, 0, "void CLMotionCoprocessor::setFeatures(unsigned int, BOOL)", "%s\n", v33);
        if (v33 != (char *)&buf)
          free(v33);
      }
    }
    if ((*(_BYTE *)(a1 + 648) & 0x10) != 0)
    {
      sub_100128CC8();
      sub_100D790A4();
    }
  }
}

void sub_101024378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1010243A0(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLMotionCoprocessor::onPressureBias");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 168), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10219AD08);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionCoprocessor::onPressureBias", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10219AD08);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionCoprocessor::onPressureBias\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_101033C18(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_101024558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101024578(uint64_t a1)
{
  _BYTE *v1;

  v1 = *(_BYTE **)(a1 + 32);
  v1[224] = 0;
  return (*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)v1 + 552))(v1, 0);
}

void sub_101024590(uint64_t a1, _DWORD *a2, __int128 *a3, uint64_t a4)
{
  sub_10103414C(a4, (uint64_t)a2, a2, a3);
}

void sub_1010245A0(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  int v4;
  uint8_t v5;
  uint8_t v6;
  uint8_t v7;
  uint8_t v8;
  uint8_t v9;
  char *v10;
  _WORD v11[8];
  uint8_t buf[8];

  sub_100127B9C();
  sub_100127BDC();
  if ((*(_BYTE *)(a1 + 648) & 1) != 0)
  {
    if (qword_10229FC80 == -1)
      goto LABEL_3;
  }
  else
  {
    sub_10193AB8C(qword_10229FC80 == -1);
  }
  dispatch_once(&qword_10229FC80, &stru_10219AC48);
LABEL_3:
  v2 = qword_10229FC88;
  if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Sending initial configuration.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC80 != -1)
      dispatch_once(&qword_10229FC80, &stru_10219AC48);
    v11[0] = 0;
    v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC88, 1, "Sending initial configuration.", v11, 2);
    sub_100512490("Generic", 1, 0, 2, "void CLMotionCoprocessor::finishConfiguration()", "%s\n", v10);
    if (v10 != (char *)buf)
      free(v10);
  }
  v3 = (_QWORD *)sub_1012A67DC();
  sub_1012A72A8(v3);
  v4 = *(_DWORD *)(a1 + 648);
  if ((v4 & 8) != 0)
  {
    sub_1010248DC((_QWORD *)a1, *(void **)(a1 + 160));
    v4 = *(_DWORD *)(a1 + 648);
    if ((v4 & 0x40) == 0)
    {
LABEL_8:
      if ((v4 & 4) == 0)
        goto LABEL_9;
      goto LABEL_14;
    }
  }
  else if ((v4 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  sub_101024B20(a1);
  v4 = *(_DWORD *)(a1 + 648);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
LABEL_14:
  sub_101024CC0(a1);
  if ((*(_DWORD *)(a1 + 648) & 0x10) == 0)
  {
LABEL_11:
    sub_101023748(a1, *(unsigned __int16 *)(a1 + 344));
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 544))(a1, *(unsigned __int8 *)(a1 + 1419));
    v5 = *(_BYTE *)(a1 + 1813);
    buf[0] = 49;
    buf[1] = v5;
    sub_10103A314(a1 + 192, (__int16 *)buf, 0);
    v6 = *(_BYTE *)(a1 + 1814);
    buf[0] = 52;
    buf[1] = v6;
    sub_10103A490(a1 + 192, (__int16 *)buf, 0);
    v7 = *(_BYTE *)(a1 + 1815);
    buf[0] = 54;
    buf[1] = v7;
    sub_10103A60C(a1 + 192, (__int16 *)buf, 0);
    v8 = *(_BYTE *)(a1 + 1816);
    buf[0] = 55;
    buf[1] = v8;
    sub_10103A788(a1 + 192, (__int16 *)buf, 0);
    v9 = *(_BYTE *)(a1 + 1817);
    buf[0] = 56;
    buf[1] = v9;
    sub_10103A904(a1 + 192, (__int16 *)buf, 0);
    sub_101025060(a1);
    sub_100128CC8();
    sub_1010B4E14();
  }
LABEL_10:
  sub_101024E7C(a1);
  goto LABEL_11;
}

void sub_1010248DC(_QWORD *a1, void *a2)
{
  NSObject *v4;
  void *v5;
  void *v6;
  char *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v11[2];
  _BYTE buf[3];
  char v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD v17[99];

  sub_100127B9C();
  sub_100127BDC();
  if (qword_10229FEF0 != -1)
    dispatch_once(&qword_10229FEF0, &stru_10219AE48);
  v4 = qword_10229FEF8;
  if (os_log_type_enabled((os_log_t)qword_10229FEF8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "configuring on body detector", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEF0 != -1)
      dispatch_once(&qword_10229FEF0, &stru_10219AE48);
    LOWORD(v8) = 0;
    v7 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEF8, 2, "configuring on body detector", &v8, 2);
    sub_100512490("Generic", 1, 0, 2, "void CLMotionCoprocessor::configureOnBodyDetector(NSDictionary *)", "%s\n", v7);
    if (v7 != buf)
      free(v7);
  }
  v10 = 0u;
  memset(v11, 0, 29);
  v8 = 0u;
  v9 = 0u;
  if (a2)
  {
    v5 = (void *)(*(uint64_t (**)(_QWORD *))(*a1 + 584))(a1);
    sub_100E3A984(a2, v5, (uint64_t)&v8);
  }
  else
  {
    sub_100E3A5AC(&v8);
  }
  v15 = v9;
  v16 = v10;
  v17[0] = v11[0];
  *(_OWORD *)((char *)v17 + 13) = *(_OWORD *)((char *)v11 + 13);
  buf[0] = 12;
  *(_WORD *)&buf[1] = 0;
  v13 = 0;
  v14 = v8;
  v6 = (void *)a1[20];
  if (v6 != a2)
  {

    a1[20] = objc_msgSend(a2, "copy");
  }
  sub_100E3A5C4((uint64_t)&v8);
  sub_101036514((uint64_t)(a1 + 24), (__int128 *)buf, 0);
}

void sub_101024B20(uint64_t a1)
{
  NSObject *v2;
  char *v3;
  _WORD v4[8];
  uint8_t buf[1640];

  sub_100127B9C();
  sub_100127BDC();
  if (qword_10229FD50 != -1)
    dispatch_once(&qword_10229FD50, &stru_10219ACE8);
  v2 = off_10229FD58;
  if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Send gyro bias fit sync", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_10219ACE8);
    v4[0] = 0;
    v3 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 1, "Send gyro bias fit sync", v4, 2);
    sub_100512490("Generic", 1, 0, 2, "void CLMotionCoprocessor::sendGyroBiasFitSync()", "%s\n", v3);
    if (v3 != (char *)buf)
      free(v3);
  }
  sub_101025130(a1);
}

id sub_101024CC0(uint64_t a1)
{
  NSObject *v2;
  char *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  sub_100127B9C();
  sub_100127BDC();
  if (qword_10229FD70 != -1)
    dispatch_once(&qword_10229FD70, &stru_10219AD48);
  v2 = qword_10229FD78;
  if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Send pressure bias fit sync", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_10219AD48);
    v5[0] = 0;
    v4 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 1, "Send pressure bias fit sync", v5, 2);
    sub_100512490("Generic", 1, 0, 2, "void CLMotionCoprocessor::sendPressureBiasFitSync()", "%s\n", v4);
    if (v4 != (char *)buf)
      free(v4);
  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1336) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 1336) + 8), 0);
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1336) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 1336) + 8), 0, 0);
}

id sub_101024E7C(uint64_t a1)
{
  NSObject *v2;
  id v3;
  char *v5;
  _QWORD v6[5];
  _WORD v7[8];
  uint8_t buf[1640];

  sub_100127B9C();
  sub_100127BDC();
  if (qword_10229FD40 != -1)
    dispatch_once(&qword_10229FD40, &stru_10219AD68);
  v2 = qword_10229FD48;
  if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Send GMM data async", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_10219AD68);
    v7[0] = 0;
    v5 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 1, "Send GMM data async", v7, 2);
    sub_100512490("Generic", 1, 0, 2, "void CLMotionCoprocessor::sendGmmDataAsync()", "%s\n", v5);
    if (v5 != (char *)buf)
      free(v5);
  }
  v3 = objc_msgSend(objc_msgSend(*(id *)(a1 + 168), "vendor"), "proxyForService:", CFSTR("CLGeomagneticModelProvider"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_101025C3C;
  v6[3] = &unk_10214C498;
  v6[4] = a1;
  return objc_msgSend(v3, "doAsync:", v6);
}

void sub_101025060(uint64_t a1)
{
  dispatch_time_t v2;
  NSObject *v3;
  _QWORD block[5];
  unsigned __int8 v5[4];
  int v6;

  sub_1004AD1D8(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10230BC08, 0);
  if (v6 > dword_10230BC08)
  {
    sub_101028E2C(a1, 1);
    v2 = dispatch_time(0, 1000000000 * v6);
    sub_100127B9C();
    v3 = objc_msgSend(sub_10024455C(), "queue");
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_101028FEC;
    block[3] = &unk_10212ECA0;
    block[4] = a1;
    dispatch_after(v2, v3, block);
  }
}

void sub_101025128(uint64_t a1, int *a2, double *a3, uint64_t a4)
{
  sub_1010335F0(a4, a2, a3);
}

void sub_101025130(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  NSObject *v5;
  float32x2_t v6;
  float v7;
  NSObject *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  NSObject *v20;
  _BYTE *v21;
  uint64_t v22;
  float32x2_t v23;
  float v24;
  float32x2_t *v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  uint64_t v32;
  char *v33;
  void *v34;
  _BYTE *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  _BYTE v39[12];
  char v40;
  int v41;
  _BYTE *v42;
  _BYTE buf[12];
  __int16 v44;
  double v45;
  __int16 v46;
  double v47;
  __int16 v48;
  double v49;
  __int16 v50;
  double v51;
  __int16 v52;
  double v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  int v57;
  __int128 v58;
  float32x2_t v59;
  float v60;
  int v61;
  _BYTE v62[28];
  int v63;
  _QWORD v64[3];
  _OWORD __dst[18];

  sub_100127B9C();
  sub_100127BDC();
  if ((*(_BYTE *)(a1 + 648) & 0x40) == 0)
  {
    sub_10193ACF8();
    __break(1u);
  }
  v2 = *(_DWORD *)(a1 + 920);
  if (v2 == 2)
  {
    memcpy(__dst, (const void *)(a1 + 953), 0x11AuLL);
    v4 = 0xFFFF;
    if (*(unsigned __int16 *)(a1 + 900) != 0xFFFF)
    {
      if (*(_BYTE *)(a1 + 952))
      {
        if (qword_10229FD50 != -1)
          dispatch_once(&qword_10229FD50, &stru_10219ACE8);
        v5 = off_10229FD58;
        if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Decreasing proactive gyro bias estimation timeout for out of box.", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD50 != -1)
            dispatch_once(&qword_10229FD50, &stru_10219ACE8);
          LOWORD(v58) = 0;
          v37 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 1, "Decreasing proactive gyro bias estimation timeout for out of box.", &v58, 2);
          sub_100512490("Generic", 1, 0, 2, "void CLMotionCoprocessor::sendGyroBiasFit()", "%s\n", v37);
          if (v37 != buf)
            free(v37);
          v4 = 300;
        }
        else
        {
          v4 = 300;
        }
      }
      else
      {
        v4 = *(unsigned __int16 *)(a1 + 900);
      }
    }
    if (*(unsigned __int16 *)(a1 + 228) != v4)
    {
      *(_WORD *)(a1 + 228) = v4;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 552))(a1, 0);
    }
    *(_QWORD *)&v58 = off_102171AF0;
    *((_QWORD *)&v58 + 1) = CFAbsoluteTimeGetCurrent();
    v16 = &v61;
    v17 = 4;
    do
    {
      v18 = (char *)__dst + v17;
      *((_QWORD *)v16 - 13) = *(_QWORD *)((char *)__dst + v17);
      *(v16 - 24) = *(_DWORD *)((char *)__dst + v17 + 8);
      *((_QWORD *)v16 - 1) = *(_QWORD *)((char *)__dst + v17 + 12);
      *v16 = *(_DWORD *)((char *)&__dst[1] + v17 + 4);
      v16 += 3;
      v17 += 24;
    }
    while (v18 + 24 != (char *)&__dst[12] + 4);
    *(_OWORD *)v62 = *(_OWORD *)((char *)&__dst[12] + 4);
    *(_OWORD *)&v62[12] = __dst[13];
    v64[0] = *(_QWORD *)((char *)&__dst[14] + 4);
    *(_QWORD *)((char *)v64 + 5) = *(_QWORD *)((char *)&__dst[14] + 9);
    v63 = __dst[14];
    if (*(_BYTE *)(a1 + 869))
    {
      v19 = sub_1011B78D4();
      sub_1011B8DB0(v19, (uint64_t)&v58);
      if (qword_1023118A8 != -1)
        dispatch_once(&qword_1023118A8, &stru_10219AD28);
      if (qword_1023118B0)
        sub_10121E680((uint64_t)&v58, (uint64_t)buf);
    }
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_10219ACE8);
    v20 = off_10229FD58;
    if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
    {
      sub_100B1F260((uint64_t)&v58, buf);
      v21 = v46 >= 0 ? buf : *(_BYTE **)buf;
      *(_DWORD *)v39 = 136446210;
      *(_QWORD *)&v39[4] = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "NonlinearBiasFit,%{public}s", v39, 0xCu);
      if (SHIBYTE(v46) < 0)
        operator delete(*(void **)buf);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_10219ACE8);
      v34 = off_10229FD58;
      sub_100B1F260((uint64_t)&v58, v39);
      if (v40 >= 0)
        v35 = v39;
      else
        v35 = *(_BYTE **)v39;
      v41 = 136446210;
      v42 = v35;
      LODWORD(v38) = 12;
      v36 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v34, 1, "NonlinearBiasFit,%{public}s", &v41, v38);
      if (v40 < 0)
        operator delete(*(void **)v39);
      sub_100512490("Generic", 1, 0, 2, "void CLMotionCoprocessor::sendGyroBiasFit()", "%s\n", v36);
      if (v36 != buf)
        free(v36);
    }
    v22 = 0;
    v23 = *(float32x2_t *)(a1 + 904);
    v24 = *(float *)(a1 + 912);
    do
    {
      v25 = (float32x2_t *)((char *)__dst + v22);
      v25[2] = vadd_f32(v23, *(float32x2_t *)((char *)&__dst[1] + v22));
      v25[3].f32[0] = v24 + *(float *)((char *)&__dst[1] + v22 + 8);
      v22 += 24;
    }
    while (v22 != 192);
    sub_101034D80(a1 + 192, __dst, 0);
  }
  else if (v2 == 1)
  {
    if ((CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 928)) / 3600.0 > 0.0
      && (CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 928)) / 3600.0 >= 255.0)
    {
      v3 = 255;
    }
    else if ((CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 928)) / 3600.0 <= 0.0)
    {
      v3 = 0;
    }
    else
    {
      v3 = (int)((CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 928)) / 3600.0);
    }
    LOBYTE(v58) = 10;
    BYTE1(v58) = v3;
    WORD1(v58) = 0;
    *(_QWORD *)((char *)&v58 + 4) = *(_QWORD *)(a1 + 952);
    HIDWORD(v58) = *(_DWORD *)(a1 + 960);
    v6 = *(float32x2_t *)(a1 + 964);
    v59 = v6;
    v7 = *(float *)(a1 + 972);
    v60 = v7;
    if (qword_10229FC80 != -1)
      dispatch_once(&qword_10229FC80, &stru_10219AC48);
    v8 = qword_10229FC88;
    if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_INFO))
    {
      v9 = *(float *)(a1 + 952);
      v10 = *(float *)(a1 + 956);
      v11 = *(float *)(a1 + 960);
      v12 = *(float *)(a1 + 964);
      v13 = *(float *)(a1 + 968);
      v14 = *(float *)(a1 + 972);
      v15 = *(_QWORD *)(a1 + 928);
      *(_DWORD *)buf = 134350848;
      *(double *)&buf[4] = v9;
      v44 = 2050;
      v45 = v10;
      v46 = 2050;
      v47 = v11;
      v48 = 2050;
      v49 = v12;
      v50 = 2050;
      v51 = v13;
      v52 = 2050;
      v53 = v14;
      v54 = 2050;
      v55 = v15;
      v56 = 1026;
      v57 = v3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "GyroBiasFit,slope.x,%{public}f,.y,%{public}f.z,%{public}f,intercept.x,%{public}f,.y,%{public}f.z,%{public}f,lastMiniCal,%{public}f,hours,%{public}d", buf, 0x4Eu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC80 != -1)
        dispatch_once(&qword_10229FC80, &stru_10219AC48);
      v26 = *(float *)(a1 + 952);
      v27 = *(float *)(a1 + 956);
      v28 = *(float *)(a1 + 960);
      v29 = *(float *)(a1 + 964);
      v30 = *(float *)(a1 + 968);
      v31 = *(float *)(a1 + 972);
      v32 = *(_QWORD *)(a1 + 928);
      LODWORD(__dst[0]) = 134350848;
      *(double *)((char *)__dst + 4) = v26;
      WORD6(__dst[0]) = 2050;
      *(double *)((char *)__dst + 14) = v27;
      WORD3(__dst[1]) = 2050;
      *((double *)&__dst[1] + 1) = v28;
      LOWORD(__dst[2]) = 2050;
      *(double *)((char *)&__dst[2] + 2) = v29;
      WORD5(__dst[2]) = 2050;
      *(double *)((char *)&__dst[2] + 12) = v30;
      WORD2(__dst[3]) = 2050;
      *(double *)((char *)&__dst[3] + 6) = v31;
      HIWORD(__dst[3]) = 2050;
      *(_QWORD *)&__dst[4] = v32;
      WORD4(__dst[4]) = 1026;
      *(_DWORD *)((char *)&__dst[4] + 10) = v3;
      v33 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC88, 1, "GyroBiasFit,slope.x,%{public}f,.y,%{public}f.z,%{public}f,intercept.x,%{public}f,.y,%{public}f.z,%{public}f,lastMiniCal,%{public}f,hours,%{public}d", __dst, 78);
      sub_100512490("Generic", 1, 0, 2, "void CLMotionCoprocessor::sendGyroBiasFit()", "%s\n", v33);
      if (v33 != buf)
        free(v33);
    }
    v59 = vadd_f32(*(float32x2_t *)(a1 + 904), v6);
    v60 = *(float *)(a1 + 912) + v7;
    sub_101034BF4(a1 + 192, &v58, 0);
  }
}

void sub_101025C0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  _Unwind_Resume(exception_object);
}

void sub_101025C3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  NSObject *v3;
  char *v4;
  uint64_t v5;
  _QWORD v6[5];
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _WORD v11[8];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint8_t buf[1640];

  v2 = *(_QWORD *)(a1 + 32);
  v14 = 0u;
  v15 = 0u;
  v13 = 0u;
  v12 = 0u;
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a2 + 208))(&v12, a2);
  if (*((double *)&v15 + 1) >= 0.0)
  {
    v5 = sub_100127B9C();
    v6[1] = 3221225472;
    v7 = v12;
    v8 = v13;
    v6[0] = _NSConcreteStackBlock;
    v6[2] = sub_101025E48;
    v6[3] = &unk_1021660F0;
    v6[4] = v2;
    v9 = v14;
    v10 = v15;
    sub_1000A57FC(v5, (uint64_t)v6);
  }
  else
  {
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_10219AD68);
    v3 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Warning: No gmm data available", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_10219AD68);
      v11[0] = 0;
      v4 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 1, "Warning: No gmm data available", v11, 2);
      sub_100512490("Generic", 1, 0, 2, "void CLMotionCoprocessor::sendGmmDataAsync()_block_invoke", "%s\n", v4);
      if (v4 != (char *)buf)
        free(v4);
    }
  }
}

void sub_101025E48(uint64_t a1)
{
  sub_101025E58(*(_QWORD *)(a1 + 32), (double *)(a1 + 40));
}

void sub_101025E58(uint64_t a1, double *a2)
{
  __objc2_class *v2;
  float v5;
  float v6;
  float v7;
  NSObject *v8;
  float v9;
  float v10;
  char *v11;
  uint64_t v12;
  float v13;
  int v14;
  double v15;
  uint8_t buf[4];
  double v17;

  sub_100127B9C();
  sub_100127BDC();
  if ((*(_BYTE *)(a1 + 648) & 0x10) != 0)
  {
    v5 = a2[5];
    *(float *)(a1 + 864) = v5;
    LOBYTE(v12) = 17;
    *(_WORD *)((char *)&v12 + 1) = 0;
    BYTE3(v12) = 0;
    v6 = a2[3];
    v7 = a2[6];
    *((float *)&v12 + 1) = v6;
    v13 = v7;
    v2 = DefaultObserver;
    if (qword_10229FD40 == -1)
      goto LABEL_3;
  }
  else
  {
    sub_10193AE74();
  }
  dispatch_once(&qword_10229FD40, &stru_10219AD68);
LABEL_3:
  v8 = qword_10229FD48;
  if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_INFO))
  {
    v9 = a2[3];
    *(_DWORD *)buf = 134217984;
    v17 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "GeomagneticModelData.magnitude,%f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v2[84].info != (__objc2_class_ro *)-1)
      dispatch_once(&qword_10229FD40, &stru_10219AD68);
    v10 = a2[3];
    v14 = 134217984;
    v15 = v10;
    v11 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 1, "GeomagneticModelData.magnitude,%f", COERCE_DOUBLE(&v14));
    sub_100512490("Generic", 1, 0, 2, "void CLMotionCoprocessor::sendGmmData(const CLMotionTypeGeomagneticModelData &)", "%s\n", v11);
    if (v11 != (char *)buf)
      free(v11);
  }
  sub_101034F14(a1 + 192, &v12, 0);
}

void sub_101026070(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  NSObject *v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  const char *v16;
  uint8_t *v17;
  _DWORD v18[2];
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  uint8_t buf[4];
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;

  v1 = *(_QWORD *)(a1 + 32);
  if ((*(_BYTE *)(v1 + 648) & 2) != 0)
  {
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_10219ACC8);
    v5 = qword_10229FD28;
    if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(_DWORD *)(v1 + 888);
      v7 = *(_DWORD *)(v1 + 892);
      v8 = *(_DWORD *)(v1 + 896);
      *(_DWORD *)buf = 67240704;
      v24 = v6;
      v25 = 1026;
      v26 = v7;
      v27 = 1026;
      v28 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[SidebandSensorFusion] configuring,enableCount,%{public}d,latencyCount,%{public}d,snoopCount,%{public}d", buf, 0x14u);
    }
    v9 = sub_1001BFF7C(115, 2);
    if ((_DWORD)v9)
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_10219ACC8);
      v13 = *(_DWORD *)(v1 + 888);
      v14 = *(_DWORD *)(v1 + 892);
      v15 = *(_DWORD *)(v1 + 896);
      v18[0] = 67240704;
      v18[1] = v13;
      v19 = 1026;
      v20 = v14;
      v21 = 1026;
      v22 = v15;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 0, "[SidebandSensorFusion] configuring,enableCount,%{public}d,latencyCount,%{public}d,snoopCount,%{public}d", v18, 20);
      v17 = (uint8_t *)v16;
      v9 = sub_100512490("Generic", 1, 0, 2, "void CLMotionCoprocessor::updateSidebandSensorFusion()_block_invoke", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
    if (*(int *)(v1 + 892) <= 0)
      v10 = *(_DWORD *)(v1 + 896) > 0;
    else
      v10 = 2;
    v11 = *(_DWORD *)(v1 + 888);
    v12 = v11 > 0;
    if (*(unsigned __int8 *)(v1 + 226) != v10 || *(unsigned __int8 *)(v1 + 225) != v12)
    {
      sub_101026404(v9, v11 > 0);
      *(_BYTE *)(v1 + 226) = v10;
      *(_BYTE *)(v1 + 225) = v12;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 552))(v1, 0);
      (*(void (**)(uint64_t))(*(_QWORD *)v1 + 568))(v1);
    }
  }
  else
  {
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_10219ACC8);
    v2 = qword_10229FD28;
    if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "[SidebandSensorFusion] Feature not available.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_10219ACC8);
      LOWORD(v18[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 17, "[SidebandSensorFusion] Feature not available.", v18, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 0, "void CLMotionCoprocessor::updateSidebandSensorFusion()_block_invoke", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
  }
}

uint64_t sub_101026404(uint64_t a1, int a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = sub_1001B7910();
  if ((v3 & 0x200000) != 0)
  {
    sub_100127B9C();
    sub_100127BDC();
    v4 = sub_10021C350();
    sub_1009EC394(v4, a2);
  }
  return (v3 >> 21) & 1;
}

void sub_101026444(uint64_t a1, int a2, int a3)
{
  NSObject *v6;
  int v7;
  const char *v8;
  char *v9;
  NSObject *v10;
  const char *v11;
  char *v12;
  int v13;
  int v14;
  __int16 v15;
  int v16;
  _BYTE buf[10];
  int v18;

  if (a2 == 14 || !a3)
  {
    v7 = a3;
  }
  else
  {
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_10219AC88);
    v6 = qword_10229FCB8;
    if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = a2;
      *(_WORD *)&buf[8] = 1024;
      v18 = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Setting activityOverride: when in activityType,%d, guarding against unexpected hkActivityType,%d ", buf, 0xEu);
    }
    v7 = 0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_10219AC88);
      v13 = 67109376;
      v14 = a2;
      v15 = 1024;
      v16 = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 17, "Setting activityOverride: when in activityType,%d, guarding against unexpected hkActivityType,%d ", &v13, 14);
      v9 = (char *)v8;
      sub_100512490("Generic", 1, 0, 0, "void CLMotionCoprocessor::setActivityOverrideUL(const CMMotionContext::ActivitySession, const CMMotionContext::CMHKWorkoutActivityType)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
      v7 = 0;
    }
  }
  if (qword_10229FCB0 != -1)
    dispatch_once(&qword_10229FCB0, &stru_10219AC88);
  v10 = qword_10229FCB8;
  if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = a2;
    *(_WORD *)&buf[8] = 1024;
    v18 = v7;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Setting activityOverride: %d,hkActivityType,%d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_10219AC88);
    v13 = 67109376;
    v14 = a2;
    v15 = 1024;
    v16 = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 0, "Setting activityOverride: %d,hkActivityType,%d", &v13, 14);
    v12 = (char *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionCoprocessor::setActivityOverrideUL(const CMMotionContext::ActivitySession, const CMMotionContext::CMHKWorkoutActivityType)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  buf[0] = 15;
  *(_DWORD *)&buf[1] = a2;
  *(_DWORD *)&buf[5] = v7;
  sub_10103509C(a1 + 192, (uint64_t *)buf, 0);
  *(_BYTE *)(a1 + 862) = a2;
}

void sub_1010267A8(uint64_t a1, uint64_t a2, int a3)
{
  sub_100C1DED4(a1, a2, a3);
}

void sub_1010277BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t *a12, uint64_t a13, uint64_t *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  _QWORD *v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;

  sub_100067AC4((uint64_t)(v26 + 234));
  sub_100067AC4((uint64_t)(v26 + 229));
  sub_10102815C(v30);
  v32 = *v29;
  *v29 = 0;
  if (v32)
    sub_101035224((uint64_t)v29, v32);
  v33 = *v28;
  *v28 = 0;
  if (v33)
    sub_101035224((uint64_t)v28, v33);
  v34 = *a11;
  *a11 = 0;
  if (v34)
    sub_101035224((uint64_t)a11, v34);
  v35 = *a12;
  *a12 = 0;
  if (v35)
    sub_101035224((uint64_t)a12, v35);
  v36 = *a14;
  *a14 = 0;
  if (v36)
    sub_101035224((uint64_t)a14, v36);
  sub_1004A4854(v26 + 185);
  sub_1004A4854(v27);
  v37 = v26[172];
  v26[172] = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  v38 = v26[171];
  v26[171] = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  v39 = v26[170];
  v26[170] = 0;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  v40 = v26[169];
  v26[169] = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = v26[168];
  v26[168] = 0;
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  v42 = v26[167];
  v26[167] = 0;
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  v43 = v26[166];
  v26[166] = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  v44 = v26[165];
  v26[165] = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  v45 = v26[164];
  v26[164] = 0;
  if (v45)
    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  v46 = v26[163];
  v26[163] = 0;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  v47 = v26[73];
  v26[73] = 0;
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  v48 = (void *)v26[68];
  if (v48)
  {
    v26[69] = v48;
    operator delete(v48);
  }
  sub_100542DDC(v26 + 62);
  v49 = (void *)v26[59];
  if (v49)
  {
    v26[60] = v49;
    operator delete(v49);
  }
  v50 = (void *)v26[56];
  if (v50)
  {
    v26[57] = v50;
    operator delete(v50);
  }
  v51 = (void *)v26[53];
  if (v51)
  {
    v26[54] = v51;
    operator delete(v51);
  }
  v52 = (void *)v26[50];
  if (v52)
  {
    v26[51] = v52;
    operator delete(v52);
  }
  sub_10055D4D0(a13);
  sub_100C1DF4C(v26);
  _Unwind_Resume(a1);
}

void sub_101027BC8()
{
  JUMPOUT(0x101027B3CLL);
}

void sub_101027BD0()
{
  JUMPOUT(0x101027BB8);
}

void sub_101027BD8(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  sub_101032734(a4, a2, a3);
}

void sub_101027BE0(uint64_t a1, int *a2, int *a3, _BYTE *a4)
{
  sub_101032E9C(a4, a2, a3);
}

void sub_101027BE8(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  int v5;
  uint64_t v6;
  _QWORD v7[5];
  int v8;

  v5 = *a2;
  v6 = sub_100127B9C();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1010341D4;
  v7[3] = &unk_10213D6C0;
  v7[4] = a4;
  v8 = v5;
  sub_1000A57FC(v6, (uint64_t)v7);
}

void sub_101027C50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v5;
  NSObject *v6;
  os_activity_scope_state_s state;
  char v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;

  CLProfilingIdentify("CLMotionCoprocessor::onMotionStateMediatorNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 168), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10219AD08);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v8 = 1;
    v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionCoprocessor::onMotionStateMediatorNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10219AD08);
    v6 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2082;
      v14 = "activity";
      v15 = 2050;
      v16 = a4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionCoprocessor::onMotionStateMediatorNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v8 = 0;
  }
  if (v8)
    os_activity_scope_leave(&state);
}

void sub_101027DE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_101027E04(uint64_t a1, _DWORD *a2, uint8_t *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLMotionCoprocessor::onPencilStateNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 168), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10219AD08);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionCoprocessor::onPencilStateNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10219AD08);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionCoprocessor::onPencilStateNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1010343CC(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_101027FBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101027FDC(uint64_t a1)
{
  uint64_t result;

  result = sub_10024095C();
  if (result)
  {
    if (!*(_QWORD *)(a1 + 872))
      operator new();
  }
  return result;
}

void sub_101028078()
{
  operator delete();
}

uint64_t sub_10102809C(uint64_t a1)
{
  uint64_t result;

  result = sub_10021C350();
  if (result)
  {
    if (!*(_QWORD *)(a1 + 880))
      operator new();
  }
  return result;
}

void sub_101028138()
{
  operator delete();
}

uint64_t sub_10102815C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = *(void **)(a1 + 136);
  if (v2)
  {
    *(_QWORD *)(a1 + 144) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 112);
  if (v3)
  {
    *(_QWORD *)(a1 + 120) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 88);
  if (v4)
  {
    *(_QWORD *)(a1 + 96) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 64);
  if (v5)
  {
    *(_QWORD *)(a1 + 72) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 40);
  if (v6)
  {
    *(_QWORD *)(a1 + 48) = v6;
    operator delete(v6);
  }
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_1010281DC(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  const char *v30;
  uint8_t *v31;
  _WORD v32[8];
  uint8_t buf[1640];

  *(_QWORD *)a1 = off_10219A0B8;
  *(_QWORD *)(a1 + 32) = off_10219A470;
  *(_QWORD *)(a1 + 40) = off_10219A4B8;
  *(_QWORD *)(a1 + 48) = off_10219A4F0;
  *(_QWORD *)(a1 + 56) = off_10219A518;
  *(_QWORD *)(a1 + 64) = off_10219A568;
  *(_QWORD *)(a1 + 72) = off_10219A5A0;
  *(_QWORD *)(a1 + 80) = off_10219A5E0;
  *(_QWORD *)(a1 + 88) = off_10219A618;
  *(_QWORD *)(a1 + 96) = off_10219A648;
  *(_QWORD *)(a1 + 104) = off_10219A698;
  *(_QWORD *)(a1 + 112) = off_10219A6C0;
  *(_QWORD *)(a1 + 120) = off_10219A728;
  *(_QWORD *)(a1 + 128) = off_10219A750;
  *(_QWORD *)(a1 + 136) = off_10219A778;
  *(_QWORD *)(a1 + 152) = off_10219A7A0;
  if (*(_BYTE *)(a1 + 868))
  {
    sub_101028688(a1);
    sub_1010286DC(a1);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10219AC68);
    v2 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "[OscarEmuReplay] Stopped", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10219AC68);
      v32[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "[OscarEmuReplay] Stopped", v32, 2);
      v31 = (uint8_t *)v30;
      sub_100512490("Generic", 1, 0, 2, "virtual CLMotionCoprocessor::~CLMotionCoprocessor()", "%s\n", v30);
      if (v31 != buf)
        free(v31);
    }
  }

  sub_100067AC4(a1 + 1872);
  sub_100067AC4(a1 + 1832);
  v3 = *(void **)(a1 + 1704);
  if (v3)
  {
    *(_QWORD *)(a1 + 1712) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 1680);
  if (v4)
  {
    *(_QWORD *)(a1 + 1688) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 1656);
  if (v5)
  {
    *(_QWORD *)(a1 + 1664) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 1632);
  if (v6)
  {
    *(_QWORD *)(a1 + 1640) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 1608);
  if (v7)
  {
    *(_QWORD *)(a1 + 1616) = v7;
    operator delete(v7);
  }
  if (*(char *)(a1 + 1607) < 0)
    operator delete(*(void **)(a1 + 1584));
  v8 = *(_QWORD *)(a1 + 1560);
  *(_QWORD *)(a1 + 1560) = 0;
  if (v8)
    sub_101035224(a1 + 1560, v8);
  v9 = *(_QWORD *)(a1 + 1552);
  *(_QWORD *)(a1 + 1552) = 0;
  if (v9)
    sub_101035224(a1 + 1552, v9);
  v10 = *(_QWORD *)(a1 + 1544);
  *(_QWORD *)(a1 + 1544) = 0;
  if (v10)
    sub_101035224(a1 + 1544, v10);
  v11 = *(_QWORD *)(a1 + 1536);
  *(_QWORD *)(a1 + 1536) = 0;
  if (v11)
    sub_101035224(a1 + 1536, v11);
  v12 = *(_QWORD *)(a1 + 1528);
  *(_QWORD *)(a1 + 1528) = 0;
  if (v12)
    sub_101035224(a1 + 1528, v12);
  sub_1004A4854((_QWORD *)(a1 + 1480));
  sub_1004A4854((_QWORD *)(a1 + 1432));
  v13 = *(_QWORD *)(a1 + 1376);
  *(_QWORD *)(a1 + 1376) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(_QWORD *)(a1 + 1368);
  *(_QWORD *)(a1 + 1368) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = *(_QWORD *)(a1 + 1360);
  *(_QWORD *)(a1 + 1360) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = *(_QWORD *)(a1 + 1352);
  *(_QWORD *)(a1 + 1352) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = *(_QWORD *)(a1 + 1344);
  *(_QWORD *)(a1 + 1344) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(_QWORD *)(a1 + 1336);
  *(_QWORD *)(a1 + 1336) = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = *(_QWORD *)(a1 + 1328);
  *(_QWORD *)(a1 + 1328) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = *(_QWORD *)(a1 + 1320);
  *(_QWORD *)(a1 + 1320) = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = *(_QWORD *)(a1 + 1312);
  *(_QWORD *)(a1 + 1312) = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = *(_QWORD *)(a1 + 1304);
  *(_QWORD *)(a1 + 1304) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = *(_QWORD *)(a1 + 584);
  *(_QWORD *)(a1 + 584) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = *(void **)(a1 + 544);
  if (v24)
  {
    *(_QWORD *)(a1 + 552) = v24;
    operator delete(v24);
  }
  sub_100542DDC((_QWORD *)(a1 + 496));
  v25 = *(void **)(a1 + 472);
  if (v25)
  {
    *(_QWORD *)(a1 + 480) = v25;
    operator delete(v25);
  }
  v26 = *(void **)(a1 + 448);
  if (v26)
  {
    *(_QWORD *)(a1 + 456) = v26;
    operator delete(v26);
  }
  v27 = *(void **)(a1 + 424);
  if (v27)
  {
    *(_QWORD *)(a1 + 432) = v27;
    operator delete(v27);
  }
  v28 = *(void **)(a1 + 400);
  if (v28)
  {
    *(_QWORD *)(a1 + 408) = v28;
    operator delete(v28);
  }
  sub_10055D4D0(a1 + 176);
  sub_100C1DF4C((_QWORD *)a1);
  return a1;
}

void sub_10102867C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_101028688(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = sub_10024095C();
  if (result && *(_QWORD *)(a1 + 872))
  {
    v3 = sub_10024095C();
    sub_1000A4A6C(v3, 0, *(_QWORD *)(a1 + 872));
    result = *(_QWORD *)(a1 + 872);
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    *(_QWORD *)(a1 + 872) = 0;
  }
  return result;
}

uint64_t sub_1010286DC(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = sub_10021C350();
  if (result && *(_QWORD *)(a1 + 880))
  {
    v3 = sub_10021C350();
    sub_1000A4A6C(v3, 0, *(_QWORD *)(a1 + 880));
    result = *(_QWORD *)(a1 + 880);
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    *(_QWORD *)(a1 + 880) = 0;
  }
  return result;
}

uint64_t sub_10102880C()
{
  return 1;
}

uint64_t sub_101028814(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 648) >> 5) & 1;
}

uint64_t sub_101028820(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 648) >> 7;
}

void sub_10102882C(uint64_t a1, void *aBlock)
{
  void *v3;
  uint64_t v4;
  _QWORD v5[6];

  v3 = _Block_copy(aBlock);
  v4 = sub_100127B9C();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_101028898;
  v5[3] = &unk_1021380D0;
  v5[4] = v3;
  v5[5] = a1;
  sub_1000A57FC(v4, (uint64_t)v5);
}

void sub_101028898(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  if (!*(_BYTE *)(v2 + 856))
  {
    *(_BYTE *)(v2 + 856) = 1;
    operator new();
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  _Block_release(*(const void **)(a1 + 32));
}

void sub_101028940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101028968@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  if ((*(_BYTE *)(result + 648) & 2) != 0)
    operator new();
  *a2 = 0;
  return result;
}

void sub_1010289C8()
{
  operator delete();
}

void sub_1010289EC(uint64_t a1, void *aBlock)
{
  void *v3;
  uint64_t v4;
  _QWORD v5[6];

  v3 = _Block_copy(aBlock);
  v4 = sub_100127B9C();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_101028A58;
  v5[3] = &unk_1021380D0;
  v5[4] = v3;
  v5[5] = a1;
  sub_1000A57FC(v4, (uint64_t)v5);
}

uint64_t sub_101028A58(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 40);
  if (!*(_BYTE *)(v2 + 857))
  {
    *(_BYTE *)(v2 + 857) = 1;
    operator new();
  }
  v4 = 0;
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  _Block_release(*(const void **)(a1 + 32));
  result = v4;
  v4 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_101028AF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_101028B14(uint64_t a1, int a2, int a3)
{
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[2];
  __int16 v10;
  int v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  int v15;

  if (qword_10229FFB0 != -1)
    dispatch_once(&qword_10229FFB0, &stru_10219AD88);
  v6 = qword_10229FFB8;
  if (os_log_type_enabled((os_log_t)qword_10229FFB8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    v13 = a2;
    v14 = 1024;
    v15 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[coprocessor] Client registration changing for stream %d, enable %d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFB0 != -1)
      dispatch_once(&qword_10229FFB0, &stru_10219AD88);
    v9[0] = 67109376;
    v9[1] = a2;
    v10 = 1024;
    v11 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFB8, 0, "[coprocessor] Client registration changing for stream %d, enable %d", v9, 14);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::sendBatchedSensorClientRegistration(CMMotionCoprocessorCommand::BatchedSensorClientRegistration::Stream, BOOL)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  buf[0] = 76;
  buf[1] = a2;
  buf[2] = a3;
  sub_1010353E8(a1 + 192, (__int16 *)buf, 0);
}

void sub_101028D04(uint64_t a1, void *aBlock)
{
  void *v3;
  uint64_t v4;
  _QWORD v5[6];

  v3 = _Block_copy(aBlock);
  v4 = sub_100127B9C();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_101028D70;
  v5[3] = &unk_1021380D0;
  v5[4] = v3;
  v5[5] = a1;
  sub_1000A57FC(v4, (uint64_t)v5);
}

uint64_t sub_101028D70(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 40);
  if (!*(_BYTE *)(v2 + 858))
  {
    *(_BYTE *)(v2 + 858) = 1;
    operator new();
  }
  v4 = 0;
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  _Block_release(*(const void **)(a1 + 32));
  result = v4;
  v4 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_101028E08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_101028E2C(uint64_t a1, int a2)
{
  NSObject *v4;
  char *v5;
  _DWORD v6[4];
  uint8_t buf[4];
  int v8;

  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_10219AC68);
  v4 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Override ski lift detection %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10219AC68);
    v6[0] = 67240192;
    v6[1] = a2;
    v5 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "Override ski lift detection %{public}d", v6, 8);
    sub_100512490("Generic", 1, 0, 2, "void CLMotionCoprocessor::setSkiLiftDetectionOverride(BOOL)", "%s\n", v5);
    if (v5 != (char *)buf)
      free(v5);
  }
  buf[1] = a2;
  sub_101035A18(a1 + 192, (__int16 *)buf, 0);
}

void sub_101028FEC(uint64_t a1)
{
  sub_101028E2C(*(_QWORD *)(a1 + 32), 0);
}

void sub_101028FF8(uint64_t a1, __int128 *a2, dispatch_object_t object, const void *a4)
{
  __int128 v7;
  __int128 v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int16 v16;

  v7 = *a2;
  v13 = a2[1];
  v8 = a2[3];
  v14 = a2[2];
  v15 = v8;
  v16 = *((_WORD *)a2 + 32);
  v12 = v7;
  dispatch_retain(object);
  v9 = _Block_copy(a4);
  v10 = sub_100127B9C();
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1010290A0;
  v11[3] = &unk_10219AA38;
  v11[5] = v9;
  v11[6] = a1;
  v11[4] = object;
  sub_1000A57FC(v10, (uint64_t)v11);
}

void sub_1010290A0(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __int16 v4;
  __int128 v5;

  v2 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(v2 + 217) = *(_OWORD *)(a1 + 56);
  v3 = *(_OWORD *)(a1 + 104);
  v4 = *(_WORD *)(a1 + 120);
  v5 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 249) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 233) = v5;
  *(_WORD *)(v2 + 281) = v4;
  *(_OWORD *)(v2 + 265) = v3;
  (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v2 + 560))(v2, 0, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  dispatch_release(*(dispatch_object_t *)(a1 + 32));
  _Block_release(*(const void **)(a1 + 40));
}

void sub_10102910C(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  int v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  if (qword_10229FC80 != -1)
    dispatch_once(&qword_10229FC80, &stru_10219AC48);
  v3 = qword_10229FC88;
  if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_INFO))
  {
    v4 = *(_DWORD *)(a2 + 1);
    *(_DWORD *)buf = 67109120;
    v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "reply,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC80 != -1)
      dispatch_once(&qword_10229FC80, &stru_10219AC48);
    v5 = *(_DWORD *)(a2 + 1);
    v8[0] = 67109120;
    v8[1] = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC88, 1, "reply,%d", v8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::visitPong(const CMMotionCoprocessorReply::Pong *)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
}

void sub_1010292C0(uint64_t a1, uint64_t a2)
{
  double v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  double v8;
  int v9;
  double v10;
  double v11;
  uint64_t v12;
  int v13;
  double v14;
  __int16 v15;
  double v16;
  __int16 v17;
  int v18;
  uint8_t buf[4];
  double v20;
  __int16 v21;
  double v22;
  __int16 v23;
  int v24;

  v4 = *(double *)(a1 + 352);
  v10 = v4;
  if (*(_BYTE *)(a1 + 653) && !*(_BYTE *)(a1 + 652))
  {
    sub_1010231AC(a1);
    *(_BYTE *)(a1 + 653) = 0;
  }
  v12 = 0;
  v11 = v4 + *(double *)(a1 + 664);
  LOBYTE(v12) = *(_BYTE *)(a2 + 1);
  sub_10014C2F4(a1, 7, (uint64_t)&v10, 24);
  sub_10014C2F4(a1, 9, (uint64_t)&v10, 24);
  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_10219ACA8);
  v5 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134218496;
    v20 = v10;
    v21 = 2048;
    v22 = v11;
    v23 = 1024;
    v24 = v12;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Timestamp,%.3f,StartTime,%.3f,ActivePedState,%u", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_10219ACA8);
    v13 = 134218496;
    v14 = v10;
    v15 = 2048;
    v16 = v11;
    v17 = 1024;
    v18 = v12;
    LODWORD(v8) = 28;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 1, "Timestamp,%.3f,StartTime,%.3f,ActivePedState,%u", COERCE_DOUBLE(&v13), v8, v9);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::visitActivePedStateUpdate(const CMMotionCoprocessorReply::ActivePedStateUpdate *)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
}

void sub_101029510(uint64_t a1, uint64_t a2)
{
  sub_1010292C0(a1 - 152, a2);
}

void sub_101029518(_QWORD *a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  _DWORD v14[2];
  __int16 v15;
  uint64_t v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  uint64_t v20;

  if (qword_10229FCC0 != -1)
    dispatch_once(&qword_10229FCC0, &stru_10219ADA8);
  v4 = qword_10229FCC8;
  if (os_log_type_enabled((os_log_t)qword_10229FCC8, OS_LOG_TYPE_INFO))
  {
    v5 = *(_DWORD *)(a2 + 4);
    v6 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)buf = 67109376;
    v18 = v5;
    v19 = 2048;
    v20 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "trigger,%d,duration,%lld", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCC0 != -1)
      dispatch_once(&qword_10229FCC0, &stru_10219ADA8);
    v9 = *(_DWORD *)(a2 + 4);
    v10 = *(_QWORD *)(a2 + 8);
    v14[0] = 67109376;
    v14[1] = v9;
    v15 = 2048;
    v16 = v10;
    LODWORD(v13) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCC8, 1, "trigger,%d,duration,%lld", v14, v13);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::visitAlarmTrigger(const CMMotionCoprocessorReply::AlarmTrigger *)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  v7 = a1[156];
  if (v7)
  {
    v8 = *(unsigned int *)(a2 + 4);
    if ((*(double (**)(uint64_t, uint64_t, BOOL, double))(v7 + 16))(v7, v8, *(_BYTE *)(a2 + 1) != 0, (double)*(unint64_t *)(a2 + 8) / 1000000.0) >= 0.0)(*(void (**)(_QWORD *, uint64_t))(*a1 + 232))(a1, v8);
  }
}

void sub_101029740(uint64_t a1, uint64_t a2)
{
  sub_101029518((_QWORD *)(a1 - 152), a2);
}

uint64_t sub_101029748(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  unint64_t v6;
  const char *v7;
  size_t v8;
  _QWORD *v9;
  _QWORD *v10;
  NSObject *v11;
  int v12;
  char *v13;
  uint64_t v14;
  int v16;
  const char *v17;
  uint8_t *v18;
  int v19;
  const char *v20;
  uint8_t *v21;
  _DWORD v22[4];
  _QWORD v23[2];
  uint64_t v24;
  _QWORD v25[10];
  char v26;
  uint64_t v27;
  uint8_t buf[8];
  char v29;

  if (qword_10229FC80 != -1)
    dispatch_once(&qword_10229FC80, &stru_10219AC48);
  v4 = qword_10229FC88;
  if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(unsigned __int8 *)(a2 + 1);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "MotionWakeReason,%u", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC80 != -1)
      dispatch_once(&qword_10229FC80, &stru_10219AC48);
    v16 = *(unsigned __int8 *)(a2 + 1);
    LODWORD(v23[0]) = 67109120;
    HIDWORD(v23[0]) = v16;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC88, 0, "MotionWakeReason,%u", v23);
    v18 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::visitWakeReason(const CMMotionCoprocessorReply::WakeReason *)", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
  sub_100263E50((uint64_t)v23);
  v6 = *(unsigned __int8 *)(a2 + 1);
  if (v6 > 0xE || ((0x3D21uLL >> v6) & 1) != 0)
  {
    v9 = sub_100263F7C(&v24, (uint64_t)"Unkown (", 8);
    buf[0] = *(_BYTE *)(a2 + 1);
    v10 = sub_100263F7C(v9, (uint64_t)buf, 1);
    sub_100263F7C(v10, (uint64_t)")", 1);
    if (qword_10229FC80 != -1)
      dispatch_once(&qword_10229FC80, &stru_10219AC48);
    v11 = qword_10229FC88;
    if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_INFO))
    {
      v12 = *(unsigned __int8 *)(a2 + 1);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Received bad wake reason from motion coprocessor,reason,%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC80 != -1)
        dispatch_once(&qword_10229FC80, &stru_10219AC48);
      v19 = *(unsigned __int8 *)(a2 + 1);
      v22[0] = 67109120;
      v22[1] = v19;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC88, 1, "Received bad wake reason from motion coprocessor,reason,%d", v22);
      v21 = (uint8_t *)v20;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::visitWakeReason(const CMMotionCoprocessorReply::WakeReason *)", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
  }
  else
  {
    v7 = (const char *)qword_10219AA58[v6];
    v8 = strlen(v7);
    sub_100263F7C(&v24, (uint64_t)v7, v8);
    if (*(_BYTE *)(a2 + 1) == 3 && *(_BYTE *)(a1 + 863))
      sub_100263F7C(&v24, (uint64_t)"(Frequent wakes are most likely caused by enabling AlwaysOnMotionSensorLogging!)", 80);
  }
  if (sub_1001DFAE8())
  {
    sub_100119F3C(v22);
    std::stringbuf::str(buf, v25);
    if (v29 >= 0)
      v13 = (char *)buf;
    else
      v13 = *(char **)buf;
    sub_1005285B4((uint64_t)v22, "OscarWakeReason", v13);
    if (v29 < 0)
      operator delete(*(void **)buf);
    sub_1001DFAF4((uint64_t)v22, (uint64_t)"MotionWakeReason");
    sub_10011A5A8(v22);
  }
  *(_QWORD *)((char *)v23
  v24 = v14;
  if (v26 < 0)
    operator delete((void *)v25[8]);
  std::streambuf::~streambuf(v25);
  return std::ios::~ios(&v27);
}

void sub_101029BCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  sub_1018B38B4((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_101029C1C(uint64_t a1, uint64_t a2)
{
  return sub_101029748(a1 - 152, a2);
}

uint64_t sub_101029C24(uint64_t a1, uint64_t a2)
{
  double v4;
  double v5;
  double v6;
  NSObject *v7;
  double v8;
  int v9;
  int v10;
  __n128 v11;
  uint64_t result;
  double v13;
  int v14;
  int v15;
  const char *v16;
  uint8_t *v17;
  double v18;
  int v19;
  double v20;
  __int16 v21;
  double v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  uint8_t buf[4];
  double v28;
  __int16 v29;
  double v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;

  v4 = *(double *)(a1 + 352);
  if (*(_BYTE *)(a1 + 653) && !*(_BYTE *)(a1 + 652))
  {
    sub_1010231AC(a1);
    *(_BYTE *)(a1 + 653) = 0;
  }
  v5 = *(double *)(a1 + 664);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10219ADC8);
  v6 = v4 + v5;
  v7 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v8 = v6 + (double)*(__int16 *)(a2 + 1);
    v9 = *(unsigned __int8 *)(a2 + 3);
    v10 = *(unsigned __int8 *)(a2 + 4);
    *(_DWORD *)buf = 134218752;
    v28 = v8;
    v29 = 2048;
    v30 = v6;
    v31 = 1024;
    v32 = v9;
    v33 = 1024;
    v34 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Type,CLOscar,SedentaryAlarm:startTime,%f,firedTime,%f,type,%d,didWake,%d", buf, 0x22u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10219ADC8);
    v13 = v6 + (double)*(__int16 *)(a2 + 1);
    v14 = *(unsigned __int8 *)(a2 + 3);
    v15 = *(unsigned __int8 *)(a2 + 4);
    v19 = 134218752;
    v20 = v13;
    v21 = 2048;
    v22 = v6;
    v23 = 1024;
    v24 = v14;
    v25 = 1024;
    v26 = v15;
    LODWORD(v18) = 34;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Type,CLOscar,SedentaryAlarm:startTime,%f,firedTime,%f,type,%d,didWake,%d", COERCE_DOUBLE(&v19), v18);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::visitSedentaryAlarm(const CMMotionCoprocessorReply::SedentaryAlarm *)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  result = *(_QWORD *)(a1 + 1288);
  if (result)
  {
    v11.n128_f64[0] = v6 + (double)*(__int16 *)(a2 + 1);
    return (*(uint64_t (**)(uint64_t, _QWORD, BOOL, __n128, double))(result + 16))(result, *(unsigned __int8 *)(a2 + 3), *(_BYTE *)(a2 + 4) != 0, v11, v6);
  }
  return result;
}

uint64_t sub_101029E98(uint64_t a1, uint64_t a2)
{
  return sub_101029C24(a1 - 152, a2);
}

uint64_t sub_101029EA0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  __int128 v7;
  char v8;
  NSObject *v9;
  int v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  int v19;
  double v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  double v26;
  int v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  int v37;
  double v38;
  __int16 v39;
  int v40;
  int v41;
  int v42;
  int v43;
  double v44;
  const char *v45;
  uint8_t *v46;
  double v47;
  double v48;
  _BYTE v49[32];
  _BYTE v50[12];
  double v51;
  int v52;
  int v53;
  _BYTE v54[10];
  __int16 v55;
  int v56;
  __int16 v57;
  int v58;
  __int16 v59;
  double v60;
  uint8_t buf[4];
  int v62;
  __int16 v63;
  double v64;
  __int16 v65;
  double v66;
  __int16 v67;
  double v68;
  __int16 v69;
  double v70;
  __int16 v71;
  double v72;
  __int16 v73;
  double v74;
  __int16 v75;
  double v76;
  __int16 v77;
  double v78;
  __int16 v79;
  int v80;
  __int16 v81;
  double v82;
  __int16 v83;
  int v84;
  __int16 v85;
  int v86;
  __int16 v87;
  int v88;
  __int16 v89;
  int v90;
  __int16 v91;
  int v92;
  __int16 v93;
  double v94;

  v3 = a1 + 292;
  *(_BYTE *)(a1 + 283) = 1;
  v4 = a1 + 284;
  *(_OWORD *)(a1 + 328) = *(__int128 *)((char *)&xmmword_101C3B2DC + 12);
  *(_OWORD *)(a1 + 300) = unk_101C3B2CC;
  *(_OWORD *)(a1 + 316) = xmmword_101C3B2DC;
  *(_OWORD *)(a1 + 284) = xmmword_101C3B2BC;
  *(_DWORD *)(a1 + 284) = *(unsigned __int8 *)(a2 + 1);
  *(_DWORD *)(a1 + 288) = *(unsigned __int8 *)(a2 + 2);
  v5 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 292) = v5;
  v6 = *(_QWORD *)(a2 + 12);
  *(_QWORD *)&v7 = v6;
  *((_QWORD *)&v7 + 1) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 296) = v7;
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 320) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 324) = *(unsigned __int8 *)(a2 + 3);
  *(_DWORD *)(a1 + 328) = *(_DWORD *)(a2 + 20);
  *(_BYTE *)(a1 + 332) = *(_BYTE *)(a2 + 4) != 0;
  *(_DWORD *)(a1 + 336) = *(_DWORD *)(a2 + 44);
  v8 = *(_BYTE *)(a2 + 5);
  if ((v8 & 1) != 0)
  {
    *(_BYTE *)(a1 + 340) = 1;
    if ((v8 & 2) == 0)
    {
LABEL_3:
      if ((v8 & 4) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((*(_BYTE *)(a2 + 5) & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_BYTE *)(a1 + 341) = 1;
  *(_DWORD *)(a1 + 292) = v5;
  if ((v8 & 4) != 0)
  {
LABEL_4:
    *(_BYTE *)(a1 + 342) = 1;
    *(_DWORD *)(a1 + 296) = v6;
  }
LABEL_5:
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_10219AC68);
  v9 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    v10 = *(_DWORD *)(a1 + 284);
    v11 = *(float *)(a1 + 292);
    v12 = *(float *)(a1 + 296);
    v13 = *(float *)(a1 + 300);
    v14 = *(float *)(a1 + 304);
    v15 = *(float *)(a1 + 308);
    v16 = *(float *)(a1 + 312);
    v17 = *(float *)(a1 + 316);
    v18 = *(float *)(a1 + 320);
    v19 = *(_DWORD *)(a1 + 324);
    v20 = *(float *)(a1 + 328);
    v21 = *(unsigned __int8 *)(a1 + 332);
    v22 = *(_DWORD *)(a1 + 288);
    v23 = *(unsigned __int8 *)(a1 + 340);
    v24 = *(unsigned __int8 *)(a1 + 341);
    v25 = *(unsigned __int8 *)(a1 + 342);
    v26 = *(float *)(a1 + 336);
    *(_DWORD *)buf = 67113216;
    v62 = v10;
    v63 = 2048;
    v64 = v11;
    v65 = 2048;
    v66 = v12;
    v67 = 2048;
    v68 = v13;
    v69 = 2048;
    v70 = v14;
    v71 = 2048;
    v72 = v15;
    v73 = 2048;
    v74 = v16;
    v75 = 2048;
    v76 = v17;
    v77 = 2048;
    v78 = v18;
    v79 = 1024;
    v80 = v19;
    v81 = 2048;
    v82 = v20;
    v83 = 1024;
    v84 = v21;
    v85 = 1024;
    v86 = v22;
    v87 = 1024;
    v88 = v23;
    v89 = 1024;
    v90 = v24;
    v91 = 1024;
    v92 = v25;
    v93 = 2048;
    v94 = v26;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Received stored user info from SPU, gender, %d, height(m), %f, weight(kg), %f, vo2max, %f, age, %f, hrmin, %f, hrmax, %f, hronset, %f, pal, %f, condition, %d, runVo2max, %f,betaBlockerUse, %d, biologicalSex, %d, isAgeSet, %d, isHeightSet, %d, isWeightSet, %d, adaptiveExerciseMinuteThreshold, %f", buf, 0x90u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10219AC68);
    v28 = *(_DWORD *)(a1 + 284);
    v29 = *(float *)(a1 + 292);
    v30 = *(float *)(a1 + 296);
    v31 = *(float *)(a1 + 300);
    v32 = *(float *)(a1 + 304);
    v33 = *(float *)(a1 + 308);
    v34 = *(float *)(a1 + 312);
    v35 = *(float *)(a1 + 316);
    v36 = *(float *)(a1 + 320);
    v37 = *(_DWORD *)(a1 + 324);
    v38 = *(float *)(a1 + 328);
    v39 = *(unsigned __int8 *)(a1 + 332);
    v40 = *(_DWORD *)(a1 + 288);
    v41 = *(unsigned __int8 *)(a1 + 340);
    v42 = *(unsigned __int8 *)(a1 + 341);
    v43 = *(unsigned __int8 *)(a1 + 342);
    v44 = *(float *)(a1 + 336);
    LODWORD(v48) = 67113216;
    HIDWORD(v48) = v28;
    *(_WORD *)v49 = 2048;
    *(double *)&v49[2] = v29;
    *(_WORD *)&v49[10] = 2048;
    *(double *)&v49[12] = v30;
    *(_WORD *)&v49[20] = 2048;
    *(double *)&v49[22] = v31;
    *(_WORD *)&v49[30] = 2048;
    *(_WORD *)v50 = 2048;
    *(double *)&v50[2] = v33;
    *(_WORD *)&v50[10] = 2048;
    LODWORD(v51) = HIDWORD(v34);
    WORD2(v51) = 2048;
    HIWORD(v51) = LOWORD(v35);
    LOWORD(v52) = 1024;
    HIWORD(v52) = v37;
    LOWORD(v53) = 1024;
    HIWORD(v53) = v39;
    *(_DWORD *)v54 = v40;
    *(_WORD *)&v54[4] = 1024;
    *(_DWORD *)&v54[6] = v41;
    v55 = 1024;
    v56 = v42;
    v57 = 1024;
    v58 = v43;
    v59 = 2048;
    v60 = v44;
    LODWORD(v47) = 144;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "Received stored user info from SPU, gender, %d, height(m), %f, weight(kg), %f, vo2max, %f, age, %f, hrmin, %f, hrmax, %f, hronset, %f, pal, %f, condition, %d, runVo2max, %f,betaBlockerUse, %d, biologicalSex, %d, isAgeSet, %d, isHeightSet, %d, isWeightSet, %d, adaptiveExerciseMinuteThreshold, %f", &v48, v47, v48, *(double *)v49, *(double *)&v49[8], *(double *)&v49[16], *(double *)&v49[24], v32, *(double *)v50,
      *(_DWORD *)&v50[8],
      v51,
      *(_QWORD *)&v35 >> 16,
      LODWORD(v36),
      v52,
      LODWORD(v38),
      v53,
      *(double *)v54);
    v46 = (uint8_t *)v45;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::visitStoredUserInfo(const CMMotionCoprocessorReply::StoredUserInfo *)", "%s\n", v45);
    if (v46 != buf)
      free(v46);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 176) + 16))(a1 + 176);
  *(_BYTE *)(a1 + 593) = *(_DWORD *)(a1 + 284);
  *(_BYTE *)(a1 + 594) = *(_DWORD *)(a1 + 288);
  *(_QWORD *)(a1 + 600) = *(_QWORD *)v3;
  *(_DWORD *)(a1 + 608) = *(_DWORD *)(a1 + 300);
  *(_OWORD *)(v3 + 324) = *(_OWORD *)(a1 + 304);
  *(_DWORD *)(a1 + 632) = *(_DWORD *)(a1 + 320);
  *(_BYTE *)(a1 + 595) = *(_DWORD *)(a1 + 324);
  *(_DWORD *)(a1 + 612) = *(_DWORD *)(a1 + 328);
  *(_BYTE *)(a1 + 596) = *(_BYTE *)(a1 + 332);
  *(_DWORD *)(a1 + 644) = *(_DWORD *)(a1 + 336);
  *(_BYTE *)(a1 + 597) = *(_BYTE *)(a1 + 340) | (2 * *(_BYTE *)(a1 + 341)) | (4 * *(_BYTE *)(a1 + 342));
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 176) + 24))(a1 + 176);
  return sub_10014C2F4(a1, 4, v4, 60);
}

void sub_10102A3A8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_10102A3B4(uint64_t a1, uint64_t a2)
{
  return sub_101029EA0(a1 - 152, a2);
}

void sub_10102A3BC(uint64_t a1, uint64_t a2)
{
  double v4;
  double v5;
  int v6;
  unint64_t v7;
  double *v8;
  double *v9;
  double *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  NSObject *v18;
  const char *v19;
  uint8_t *v20;
  int v21;
  double v22;
  __int16 v23;
  int v24;
  uint8_t buf[4];
  double v26;
  __int16 v27;
  int v28;

  v4 = *(double *)(a1 + 352)
     + ((double)*(unint64_t *)(a2 + 9) - (double)*(unint64_t *)(a2 + 1)) / 1000000.0;
  if (*(_BYTE *)(a1 + 653) && !*(_BYTE *)(a1 + 652))
  {
    sub_1010231AC(a1);
    *(_BYTE *)(a1 + 653) = 0;
  }
  v5 = v4 + *(double *)(a1 + 664);
  v6 = *(_DWORD *)(a2 + 17);
  v8 = *(double **)(a1 + 480);
  v7 = *(_QWORD *)(a1 + 488);
  if ((unint64_t)v8 >= v7)
  {
    v10 = *(double **)(a1 + 472);
    v11 = ((char *)v8 - (char *)v10) >> 4;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60)
      sub_100259694();
    v13 = v7 - (_QWORD)v10;
    if (v13 >> 3 > v12)
      v12 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      v15 = (char *)sub_10028E224(a1 + 488, v14);
      v10 = *(double **)(a1 + 472);
      v8 = *(double **)(a1 + 480);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[16 * v11];
    *(double *)v16 = v5;
    v17 = &v15[16 * v14];
    *((_DWORD *)v16 + 2) = v6;
    *((_DWORD *)v16 + 3) = 0;
    v9 = (double *)(v16 + 16);
    if (v8 != v10)
    {
      do
      {
        *((_OWORD *)v16 - 1) = *((_OWORD *)v8 - 1);
        v16 -= 16;
        v8 -= 2;
      }
      while (v8 != v10);
      v10 = *(double **)(a1 + 472);
    }
    *(_QWORD *)(a1 + 472) = v16;
    *(_QWORD *)(a1 + 480) = v9;
    *(_QWORD *)(a1 + 488) = v17;
    if (v10)
      operator delete(v10);
  }
  else
  {
    *v8 = v5;
    v9 = v8 + 2;
    *((_DWORD *)v8 + 2) = v6;
    *((_DWORD *)v8 + 3) = 0;
  }
  *(_QWORD *)(a1 + 480) = v9;
  if (qword_10229FD70 != -1)
    dispatch_once(&qword_10229FD70, &stru_10219AD48);
  v18 = qword_10229FD78;
  if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134218240;
    v26 = v5;
    v27 = 1024;
    v28 = v6;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "Coarse elevation,startTime,%f,ascended,%d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_10219AD48);
    v21 = 134218240;
    v22 = v5;
    v23 = 1024;
    v24 = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 2, "Coarse elevation,startTime,%f,ascended,%d", COERCE_DOUBLE(&v21), 18);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::visitCoarseElevation(const CMMotionCoprocessorReply::CoarseElevation *)", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
}

void sub_10102A6A8(uint64_t a1, uint64_t a2)
{
  sub_10102A3BC(a1 - 152, a2);
}

void sub_10102A6B0(uint64_t a1, uint64_t a2)
{
  const char *v3;
  void *v4;
  id v5;
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  id v11;
  __int16 v12;
  const char *v13;
  uint8_t buf[4];
  id v15;
  __int16 v16;
  const char *v17;

  v3 = "<no name>";
  if (*(_BYTE *)(a2 + 1) && !*(_BYTE *)(a2 + 111))
    v3 = (const char *)(a2 + 1);
  *(_DWORD *)(a1 + 672) = *(_DWORD *)(a2 + 128);
  v4 = objc_autoreleasePoolPush();
  v5 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", a2 + 112);
  if (qword_10229FC80 != -1)
    dispatch_once(&qword_10229FC80, &stru_10219AC48);
  v6 = qword_10229FC88;
  if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v15 = objc_msgSend(objc_msgSend(v5, "UUIDString"), "UTF8String");
    v16 = 2080;
    v17 = v3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "uuid,%s,name,%s", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC80 != -1)
      dispatch_once(&qword_10229FC80, &stru_10219AC48);
    v7 = qword_10229FC88;
    v10 = 136315394;
    v11 = objc_msgSend(objc_msgSend(v5, "UUIDString"), "UTF8String");
    v12 = 2080;
    v13 = v3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 1, "uuid,%s,name,%s", (const char *)&v10, 22);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::visitFirmwareVersion(const CMMotionCoprocessorReply::FirmwareVersion *)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }

  objc_autoreleasePoolPop(v4);
}

void sub_10102A8E8(uint64_t a1, uint64_t a2)
{
  sub_10102A6B0(a1 - 152, a2);
}

uint64_t sub_10102A8F0(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  double v7;
  double v8;
  uint64_t result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD v18[4];

  memset((char *)&v18[1] + 12, 0, 35);
  v3 = *(_OWORD *)(a2 + 113);
  v16 = *(_OWORD *)(a2 + 97);
  v17 = v3;
  v18[0] = *(_OWORD *)(a2 + 129);
  *(_OWORD *)((char *)v18 + 12) = *(_OWORD *)(a2 + 141);
  v4 = *(_OWORD *)(a2 + 49);
  v12 = *(_OWORD *)(a2 + 33);
  v13 = v4;
  v5 = *(_OWORD *)(a2 + 81);
  v14 = *(_OWORD *)(a2 + 65);
  v15 = v5;
  v6 = *(_OWORD *)(a2 + 17);
  v10 = *(_OWORD *)(a2 + 1);
  v11 = v6;
  v7 = *(double *)(a1 + 352);
  v8 = v7;
  if (*(_BYTE *)(a1 + 653))
  {
    v8 = *(double *)(a1 + 352);
    if (!*(_BYTE *)(a1 + 652))
    {
      sub_1010231AC(a1);
      *(_BYTE *)(a1 + 653) = 0;
      v8 = *(double *)(a1 + 352);
    }
  }
  *(double *)((char *)&v18[1] + 14) = v7 + *(double *)(a1 + 664);
  *(double *)((char *)&v18[2] + 6) = *(double *)((char *)&v18[1] + 14)
                                   + (double)(unint64_t)(*(_QWORD *)((char *)&v10 + 4)
                                                              - *(_QWORD *)((char *)&v11 + 3))
                                   / -1000000.0;
  *(double *)((char *)&v18[2] + 14) = v8;
  result = sub_10014C2F4(a1, 10, (uint64_t)&v10, 191);
  if (HIBYTE(v10))
  {
    if (BYTE13(v10))
      return sub_10014C2F4(a1, 11, (uint64_t)&v10, 191);
  }
  return result;
}

uint64_t sub_10102AA08(uint64_t a1, uint64_t a2)
{
  return sub_10102A8F0(a1 - 152, a2);
}

uint64_t sub_10102AA10(uint64_t a1, uint64_t a2)
{
  double v4;
  double v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  NSObject *v11;
  const char *v12;
  const char *v13;
  const char *v15;
  const char *v16;
  const char *v17;
  uint8_t *v18;
  double v19;
  double v20;
  double v21;
  int v22;
  int v23;
  const char *v24;
  const char *v25;
  int v26;
  double v27;
  __int16 v28;
  double v29;
  __int16 v30;
  char v31;
  __int16 v32;
  char v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  const char *v39;
  __int16 v40;
  const char *v41;
  uint8_t buf[4];
  double v43;
  __int16 v44;
  double v45;
  __int16 v46;
  char v47;
  __int16 v48;
  char v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  const char *v55;
  __int16 v56;
  const char *v57;

  v4 = *(double *)(a1 + 352);
  v20 = v4;
  if (*(_BYTE *)(a1 + 653) && !*(_BYTE *)(a1 + 652))
  {
    sub_1010231AC(a1);
    *(_BYTE *)(a1 + 653) = 0;
  }
  v5 = v4 + *(double *)(a1 + 664);
  v21 = v5;
  v6 = *(unsigned __int8 *)(a2 + 1);
  LOBYTE(v22) = *(_BYTE *)(a2 + 1);
  v7 = *(char *)(a2 + 2);
  v8 = *(unsigned __int8 *)(a2 + 2);
  BYTE1(v22) = *(_BYTE *)(a2 + 2);
  v9 = *(unsigned __int8 *)(a2 + 3);
  BYTE2(v22) = *(_BYTE *)(a2 + 3);
  v10 = *(unsigned __int8 *)(a2 + 4);
  HIBYTE(v22) = *(_BYTE *)(a2 + 4);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_10219AC68);
  v11 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    v12 = "Undefined";
    v13 = "Above 30mph";
    if (v6 != 16)
      v13 = "Undefined";
    if (v6 == 1)
      v13 = "Below 30mph";
    if (v8 <= 5)
      v12 = off_10219AF98[v7];
    *(_DWORD *)buf = 134219778;
    v43 = v4;
    v44 = 2048;
    v45 = v5;
    v46 = 256;
    v47 = v6;
    v48 = 256;
    v49 = v8;
    v50 = 1024;
    v51 = v9;
    v52 = 1024;
    v53 = v10;
    v54 = 2080;
    v55 = v13;
    v56 = 2080;
    v57 = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Baseband speed,timestamp,%f,startTime,%f,speedThreshold,0x%02hhx,speedRange,0x%02hhx,scaledValue,0x%02x,reserved,0x%02x,speedThresholdStr,%s,speedRangeStr,%s", buf, 0x3Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10219AC68);
    v15 = "Undefined";
    v16 = "Above 30mph";
    if (v6 != 16)
      v16 = "Undefined";
    if (v6 == 1)
      v16 = "Below 30mph";
    if (v8 <= 5)
      v15 = off_10219AF98[v7];
    v26 = 134219778;
    v27 = v4;
    v28 = 2048;
    v29 = v5;
    v30 = 256;
    v31 = v6;
    v32 = 256;
    v33 = v8;
    v34 = 1024;
    v35 = v9;
    v36 = 1024;
    v37 = v10;
    v38 = 2080;
    v39 = v16;
    v40 = 2080;
    v41 = v15;
    LODWORD(v19) = 60;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "Baseband speed,timestamp,%f,startTime,%f,speedThreshold,0x%02hhx,speedRange,0x%02hhx,scaledValue,0x%02x,reserved,0x%02x,speedThresholdStr,%s,speedRangeStr,%s", COERCE_DOUBLE(&v26), v19, LODWORD(v20), LODWORD(v21), v22, v23, v24, v25);
    v18 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::visitBasebandSpeed(const CMMotionCoprocessorReply::BasebandSpeed *)", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
  return sub_10014C2F4(a1, 12, (uint64_t)&v20, 224);
}

uint64_t sub_10102AD48(uint64_t a1, uint64_t a2)
{
  return sub_10102AA10(a1 - 152, a2);
}

uint64_t sub_10102AD50(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  NSObject *v5;
  uint64_t result;
  const char *v7;
  uint8_t *v8;
  int v9;
  double v10;
  uint8_t buf[4];
  double v12;

  v2 = *(double *)(a1 + 352);
  if (*(_BYTE *)(a1 + 653) && !*(_BYTE *)(a1 + 652))
  {
    sub_1010231AC(a1);
    *(_BYTE *)(a1 + 653) = 0;
  }
  v3 = *(double *)(a1 + 664);
  if (qword_10229FE20 != -1)
    dispatch_once(&qword_10229FE20, &stru_10219ADE8);
  v4 = v2 + v3;
  v5 = qword_10229FE28;
  if (os_log_type_enabled((os_log_t)qword_10229FE28, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "received SkiAlarm,timestamp,%f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE20 != -1)
      dispatch_once(&qword_10229FE20, &stru_10219ADE8);
    v9 = 134217984;
    v10 = v4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE28, 0, "received SkiAlarm,timestamp,%f", COERCE_DOUBLE(&v9));
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::visitSkiAlarm(const CMMotionCoprocessorReply::SkiAlarm *)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  result = *(_QWORD *)(a1 + 1296);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t sub_10102AF38(uint64_t a1)
{
  return sub_10102AD50(a1 - 152);
}

uint64_t sub_10102AF40(uint64_t a1, uint64_t a2)
{
  double v4;
  double v5;
  double v7[2];
  int8x16_t v8;
  int v9;
  uint64_t v10;

  v4 = *(double *)(a1 + 352);
  v5 = v4;
  if (*(_BYTE *)(a1 + 653))
  {
    v5 = *(double *)(a1 + 352);
    if (!*(_BYTE *)(a1 + 652))
    {
      sub_1010231AC(a1);
      *(_BYTE *)(a1 + 653) = 0;
      v5 = *(double *)(a1 + 352);
    }
  }
  v7[0] = v4 + *(double *)(a1 + 664);
  v7[1] = v5;
  v8 = vextq_s8(*(int8x16_t *)(a2 + 5), *(int8x16_t *)(a2 + 5), 8uLL);
  v9 = *(_DWORD *)(a2 + 1);
  v10 = *(_QWORD *)(a2 + 21);
  return sub_10014C2F4(a1, 22, (uint64_t)v7, 44);
}

uint64_t sub_10102AFD8(uint64_t a1, uint64_t a2)
{
  return sub_10102AF40(a1 - 152, a2);
}

uint64_t sub_10102AFE0(uint64_t a1, uint64_t a2)
{
  double v4;
  double v5;
  double v7[2];
  char v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;

  v4 = *(double *)(a1 + 352);
  v5 = v4;
  if (*(_BYTE *)(a1 + 653))
  {
    v5 = *(double *)(a1 + 352);
    if (!*(_BYTE *)(a1 + 652))
    {
      sub_1010231AC(a1);
      *(_BYTE *)(a1 + 653) = 0;
      v5 = *(double *)(a1 + 352);
    }
  }
  v7[0] = v4 + *(double *)(a1 + 664);
  v7[1] = v5;
  v8 = 1;
  v9 = *(_QWORD *)(a2 + 1);
  v10 = *(_DWORD *)(a2 + 9);
  v11 = 0;
  v12 = *(_QWORD *)(a2 + 13);
  return sub_10014C2F4(a1, 16, (uint64_t)v7, 41);
}

uint64_t sub_10102B080(uint64_t a1, uint64_t a2)
{
  return sub_10102AFE0(a1 - 152, a2);
}

uint64_t sub_10102B088(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  uint64_t i;
  double v6;
  double v7;
  unsigned int v8;
  uint64_t result;
  _OWORD v10[3];

  v4 = (_DWORD *)(a2 + 9);
  for (i = 15; i != -1; --i)
  {
    memset(v10, 0, 41);
    v6 = *(double *)(a1 + 352);
    v7 = v6;
    if (*(_BYTE *)(a1 + 653))
    {
      v7 = *(double *)(a1 + 352);
      if (!*(_BYTE *)(a1 + 652))
      {
        sub_1010231AC(a1);
        *(_BYTE *)(a1 + 653) = 0;
        v7 = *(double *)(a1 + 352);
      }
    }
    *(double *)v10 = v6 + *(double *)(a1 + 664);
    *((double *)v10 + 1) = v7;
    LOBYTE(v10[1]) = 0;
    *(_QWORD *)((char *)&v10[1] + 1) = *((_QWORD *)v4 - 1);
    v8 = *v4;
    v4 += 3;
    *(_QWORD *)((char *)&v10[1] + 9) = v8;
    *(_QWORD *)((char *)&v10[2] + 1) = *(_QWORD *)(a2 + 193)
                                     - ((i * (unint64_t)*(unsigned int *)(a2 + 201)) >> 4);
    result = sub_10014C2F4(a1, 15, (uint64_t)v10, 41);
  }
  return result;
}

uint64_t sub_10102B158(uint64_t a1, uint64_t a2)
{
  return sub_10102B088(a1 - 152, a2);
}

uint64_t sub_10102B160(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  uint64_t i;
  double v6;
  double v7;
  unsigned __int8 v8;
  NSObject *v10;
  uint64_t result;
  _OWORD v12[3];
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  double v18;
  __int16 v19;
  double v20;
  __int16 v21;
  double v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;

  v4 = (unsigned int *)(a2 + 9);
  for (i = 14; i != -1; --i)
  {
    memset(v12, 0, 41);
    v6 = *(double *)(a1 + 352);
    v7 = v6;
    if (*(_BYTE *)(a1 + 653))
    {
      v7 = *(double *)(a1 + 352);
      if (!*(_BYTE *)(a1 + 652))
      {
        sub_1010231AC(a1);
        *(_BYTE *)(a1 + 653) = 0;
        v7 = *(double *)(a1 + 352);
      }
    }
    *(double *)v12 = v6 + *(double *)(a1 + 664);
    *((double *)v12 + 1) = v7;
    LOBYTE(v12[1]) = 3;
    *(_QWORD *)((char *)&v12[1] + 1) = *((_QWORD *)v4 - 1);
    *(_QWORD *)((char *)&v12[1] + 9) = *v4;
    *(_QWORD *)((char *)&v12[2] + 1) = *(_QWORD *)(a2 + 181) - i * (unint64_t)*(unsigned int *)(a2 + 189) / 0xF;
    v8 = atomic_load((unsigned __int8 *)&qword_10230BC20);
    if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_10230BC20))
    {
      qword_10230BC18 = *(_QWORD *)((char *)&v12[2] + 1);
      __cxa_guard_release(&qword_10230BC20);
    }
    if (!(_BYTE)qword_10230BC10++)
    {
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_10219AE08);
      v10 = qword_10229FD98;
      if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68290562;
        v14 = 0;
        v15 = 2082;
        v16 = "";
        v17 = 2050;
        v18 = *(float *)((char *)&v12[1] + 1);
        v19 = 2050;
        v20 = *(float *)((char *)&v12[1] + 5);
        v21 = 2050;
        v22 = *(float *)((char *)&v12[1] + 9);
        v23 = 2050;
        v24 = *(_QWORD *)((char *)&v12[2] + 1);
        v25 = 2050;
        v26 = *(_QWORD *)((char *)&v12[2] + 1) - qword_10230BC18;
        v27 = 2050;
        v28 = qword_10230BC10;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"visitHgal notifying clients (sampled)\", \"x\":\"%{public}f\", \"y\":\"%{public}f\", \"z\":\"%{public}f\", \"ts\":%{public}llu, \"dts\":%{public}llu, \"index\":%{public}llu}", buf, 0x4Eu);
      }
    }
    qword_10230BC18 = *(_QWORD *)((char *)&v12[2] + 1);
    result = sub_10014C2F4(a1, 19, (uint64_t)v12, 41);
    v4 += 3;
  }
  return result;
}

uint64_t sub_10102B3CC(uint64_t a1, uint64_t a2)
{
  return sub_10102B160(a1 - 152, a2);
}

uint64_t sub_10102B3D4(uint64_t a1, uint64_t a2)
{
  double v4;
  double v5;
  double v7[2];
  char v8;
  __int128 v9;
  uint64_t v10;

  v4 = *(double *)(a1 + 352);
  v5 = v4;
  if (*(_BYTE *)(a1 + 653))
  {
    v5 = *(double *)(a1 + 352);
    if (!*(_BYTE *)(a1 + 652))
    {
      sub_1010231AC(a1);
      *(_BYTE *)(a1 + 653) = 0;
      v5 = *(double *)(a1 + 352);
    }
  }
  v7[0] = v4 + *(double *)(a1 + 664);
  v7[1] = v5;
  v8 = 2;
  v9 = *(_OWORD *)(a2 + 1);
  v10 = *(_QWORD *)(a2 + 17);
  return sub_10014C2F4(a1, 17, (uint64_t)v7, 41);
}

uint64_t sub_10102B468(uint64_t a1, uint64_t a2)
{
  return sub_10102B3D4(a1 - 152, a2);
}

uint64_t sub_10102B470(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  double v5;
  double v6;
  _OWORD v8[4];
  int v9;
  double v10;
  double v11;

  v3 = *(_OWORD *)(a2 + 17);
  v4 = *(_OWORD *)(a2 + 49);
  v8[2] = *(_OWORD *)(a2 + 33);
  v8[3] = v4;
  v9 = *(_DWORD *)(a2 + 65);
  v8[0] = *(_OWORD *)(a2 + 1);
  v8[1] = v3;
  v5 = *(double *)(a1 + 352);
  v6 = v5;
  if (*(_BYTE *)(a1 + 653))
  {
    v6 = *(double *)(a1 + 352);
    if (!*(_BYTE *)(a1 + 652))
    {
      sub_1010231AC(a1);
      *(_BYTE *)(a1 + 653) = 0;
      v6 = *(double *)(a1 + 352);
    }
  }
  v10 = v5 + *(double *)(a1 + 664);
  v11 = v6;
  return sub_10014C2F4(a1, 18, (uint64_t)v8, 84);
}

uint64_t sub_10102B50C(uint64_t a1, uint64_t a2)
{
  return sub_10102B470(a1 - 152, a2);
}

uint64_t sub_10102B514(uint64_t a1, uint64_t a2)
{
  double v3;
  double v4;
  _BYTE v6[28];
  double v7;
  double v8;

  *(_OWORD *)v6 = *(_OWORD *)(a2 + 9);
  *(_OWORD *)&v6[12] = *(_OWORD *)(a2 + 21);
  v3 = *(double *)(a1 + 352);
  v4 = v3;
  if (*(_BYTE *)(a1 + 653))
  {
    v4 = *(double *)(a1 + 352);
    if (!*(_BYTE *)(a1 + 652))
    {
      sub_1010231AC(a1);
      *(_BYTE *)(a1 + 653) = 0;
      v4 = *(double *)(a1 + 352);
    }
  }
  v7 = v3 + *(double *)(a1 + 664);
  v8 = v4;
  return sub_10014C2F4(a1, 23, (uint64_t)v6, 44);
}

uint64_t sub_10102B5CC(uint64_t a1, uint64_t a2)
{
  return sub_10102B514(a1 - 152, a2);
}

uint64_t sub_10102B5D4(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  double v4;
  double v5;
  _OWORD v7[2];
  int v8;
  double v9;
  double v10;

  v3 = *(_OWORD *)(a2 + 25);
  v7[0] = *(_OWORD *)(a2 + 9);
  v7[1] = v3;
  v8 = *(_DWORD *)(a2 + 41);
  v4 = *(double *)(a1 + 352);
  v5 = v4;
  if (*(_BYTE *)(a1 + 653))
  {
    v5 = *(double *)(a1 + 352);
    if (!*(_BYTE *)(a1 + 652))
    {
      sub_1010231AC(a1);
      *(_BYTE *)(a1 + 653) = 0;
      v5 = *(double *)(a1 + 352);
    }
  }
  v9 = v4 + *(double *)(a1 + 664);
  v10 = v5;
  return sub_10014C2F4(a1, 24, (uint64_t)v7, 52);
}

uint64_t sub_10102B690(uint64_t a1, uint64_t a2)
{
  return sub_10102B5D4(a1 - 152, a2);
}

uint64_t sub_10102B698(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  double v6;
  double v7;
  _OWORD v9[6];
  uint64_t v10;
  double v11;
  double v12;

  v3 = *(_OWORD *)(a2 + 57);
  v4 = *(_OWORD *)(a2 + 89);
  v9[4] = *(_OWORD *)(a2 + 73);
  v9[5] = v4;
  v10 = *(_QWORD *)(a2 + 105);
  v5 = *(_OWORD *)(a2 + 25);
  v9[0] = *(_OWORD *)(a2 + 9);
  v9[1] = v5;
  v9[2] = *(_OWORD *)(a2 + 41);
  v9[3] = v3;
  v6 = *(double *)(a1 + 352);
  v7 = v6;
  if (*(_BYTE *)(a1 + 653))
  {
    v7 = *(double *)(a1 + 352);
    if (!*(_BYTE *)(a1 + 652))
    {
      sub_1010231AC(a1);
      *(_BYTE *)(a1 + 653) = 0;
      v7 = *(double *)(a1 + 352);
    }
  }
  v11 = v6 + *(double *)(a1 + 664);
  v12 = v7;
  return sub_10014C2F4(a1, 25, (uint64_t)v9, 120);
}

uint64_t sub_10102B73C(uint64_t a1, uint64_t a2)
{
  return sub_10102B698(a1 - 152, a2);
}

uint64_t sub_10102B744(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  float v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  NSObject *v11;
  double v12;
  double v14;
  _BYTE v15[20];
  unint64_t v16;
  uint64_t v17;
  _BYTE v18[12];
  double v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  double v25;

  v3 = *(_QWORD *)(a2 + 9);
  v4 = *(unsigned __int8 *)(a2 + 17);
  v5 = *(_QWORD *)(a2 + 18);
  v6 = *(float *)(a2 + 26);
  v7 = *(float *)(a2 + 30);
  v8 = *(_QWORD *)(a2 + 34);
  v9 = *(_QWORD *)(a2 + 42);
  v10 = *(float *)(a2 + 50);
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_10219AE08);
  v11 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    *(_QWORD *)&v14 = 68291075;
    *(_WORD *)v15 = 2082;
    *(_QWORD *)&v15[2] = "";
    *(_WORD *)&v15[10] = 2049;
    *(_QWORD *)&v15[12] = v3;
    LOWORD(v16) = 1025;
    *(_DWORD *)((char *)&v16 + 2) = v4;
    HIWORD(v16) = 2049;
    v17 = v5;
    *(_WORD *)v18 = 2049;
    *(double *)&v18[2] = v6;
    *(_WORD *)&v18[10] = 2049;
    v19 = v7;
    v20 = 2049;
    v21 = v8;
    v22 = 2049;
    v23 = v9;
    v24 = 2049;
    v25 = v10;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Fall distance event record\", \"fFallTimestamp\":%{private}llu, \"fOperatingMode\":%{private}u, \"fPeakTimestamp\":%{private}llu, \"fBeforeImpactElevation\":\"%{private}.4f\", \"fAfterImpactElevation\":\"%{private}.4f\", \"fBeforeImpactStaticPeriodStartTimestamp\":%{private}llu, \"fAfterImpactStaticPeriodStartTimestamp\":%{private}llu, \"fFallDistance\":\"%{private}.4f\"}", (uint8_t *)&v14, 0x5Eu);
  }
  v12 = *(double *)(a1 + 352);
  if (*(_BYTE *)(a1 + 653) && !*(_BYTE *)(a1 + 652))
  {
    sub_1010231AC(a1);
    *(_BYTE *)(a1 + 653) = 0;
  }
  v14 = v12 + *(double *)(a1 + 664);
  *(_QWORD *)v15 = v3;
  *(_QWORD *)&v15[8] = v5;
  *(_DWORD *)&v15[16] = v4;
  v16 = __PAIR64__(LODWORD(v7), LODWORD(v6));
  v17 = v8;
  *(_QWORD *)v18 = v9;
  *(float *)&v18[8] = v10;
  return sub_10014C2F4(a1, 26, (uint64_t)&v14, 56);
}

uint64_t sub_10102B910(uint64_t a1, uint64_t a2)
{
  return sub_10102B744(a1 - 152, a2);
}

uint64_t sub_10102B918(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[16];
  _BYTE v8[25];

  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_10219AE08);
  v2 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLMotionCoprocessor::visitHighResolutionImpactDataStart", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_10219AE08);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLMotionCoprocessor::visitHighResolutionImpactDataStart", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::visitHighResolutionImpactDataStart(const CMMotionCoprocessorReply::HighResolutionImpactDataStart *)", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  *(_OWORD *)buf = 0u;
  memset(v8, 0, sizeof(v8));
  return sub_10014C2F4(a1, 14, (uint64_t)buf, 41);
}

uint64_t sub_10102BAC8(uint64_t a1)
{
  return sub_10102B918(a1 - 152);
}

uint64_t sub_10102BAD0(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  double v4;
  double v5;
  __int128 v6;
  __int128 v7;
  _OWORD v8[4];
  int v9;
  int v10;
  double v11;

  if (*(_BYTE *)(result + 859))
  {
    v3 = result;
    v4 = *(double *)(result + 352)
       + ((double)*(unint64_t *)(a2 + 8) - (double)*(unint64_t *)(a2 + 16)) / 1000000.0;
    if (*(_BYTE *)(result + 653))
    {
      if (!*(_BYTE *)(result + 652))
      {
        sub_1010231AC(result);
        *(_BYTE *)(v3 + 653) = 0;
      }
    }
    v5 = v4 + *(double *)(v3 + 664);
    v6 = *(_OWORD *)(a2 + 48);
    v8[2] = *(_OWORD *)(a2 + 32);
    v8[3] = v6;
    v9 = *(_DWORD *)(a2 + 64);
    v10 = 0;
    v7 = *(_OWORD *)(a2 + 16);
    v8[0] = *(_OWORD *)a2;
    v8[1] = v7;
    v11 = v5;
    return sub_10014C2F4(v3, 27, (uint64_t)v8, 80);
  }
  return result;
}

uint64_t sub_10102BB80(uint64_t a1, uint64_t a2)
{
  return sub_10102BAD0(a1 - 152, a2);
}

void sub_10102BB88(uint64_t a1, uint64_t a2)
{
  double v4;
  unint64_t v5;
  double v6;
  double v7;
  char v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  int v26;
  int v27;
  double v28;
  double v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  double v35;
  double v36;
  double v37;
  int v38;
  int v39;
  const char *v40;
  char *v41;
  int v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  double v49;
  __int16 v50;
  double v51;
  __int16 v52;
  double v53;
  __int16 v54;
  double v55;
  __int16 v56;
  int v57;
  __int16 v58;
  int v59;
  _BYTE buf[32];
  _BYTE v61[30];
  __int16 v62;
  double v63;
  __int16 v64;
  int v65;
  __int16 v66;
  int v67;

  if (!*(_BYTE *)(a1 + 859))
    return;
  v4 = (double)*(unint64_t *)(a2 + 1);
  v5 = *(_QWORD *)(a2 + 17);
  v6 = (double)v5;
  v7 = *(double *)(a1 + 352);
  if (!*(_BYTE *)(a1 + 653))
  {
    v8 = 1;
    goto LABEL_6;
  }
  if (*(_BYTE *)(a1 + 652))
  {
    v8 = 0;
LABEL_6:
    v9 = (double)v5;
    v10 = *(double *)(a1 + 352);
    goto LABEL_8;
  }
  sub_1010231AC(a1);
  *(_BYTE *)(a1 + 653) = 0;
  v10 = *(double *)(a1 + 352);
  v9 = (double)*(unint64_t *)(a2 + 17);
  v8 = 1;
LABEL_8:
  v11 = v4 - v6;
  v12 = *(double *)(a1 + 664);
  v13 = (double)*(unint64_t *)(a2 + 9) - v9;
  v14 = v12;
  if ((v8 & 1) == 0)
  {
    v14 = *(double *)(a1 + 664);
    if (!*(_BYTE *)(a1 + 652))
    {
      sub_1010231AC(a1);
      *(_BYTE *)(a1 + 653) = 0;
      v14 = *(double *)(a1 + 664);
    }
  }
  v15 = v11 / 1000000.0;
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_10219AC68);
  v16 = v7 + v15;
  v17 = v10 + v13 / 1000000.0;
  v18 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
  {
    v19 = *(_QWORD *)(a2 + 17);
    v20 = *(_QWORD *)(a2 + 1);
    v21 = *(_QWORD *)(a2 + 9);
    v22 = *(float *)(a2 + 25);
    v23 = *(float *)(a2 + 29);
    v24 = *(float *)(a2 + 33);
    v25 = *(float *)(a2 + 37);
    v26 = *(unsigned __int8 *)(a2 + 41);
    v27 = *(unsigned __int8 *)(a2 + 42);
    *(_DWORD *)buf = 134351104;
    *(_QWORD *)&buf[4] = v19;
    *(_WORD *)&buf[12] = 2050;
    *(_QWORD *)&buf[14] = v20;
    *(_WORD *)&buf[22] = 2050;
    *(_QWORD *)&buf[24] = v21;
    *(_WORD *)v61 = 2050;
    *(double *)&v61[2] = v22;
    *(_WORD *)&v61[10] = 2050;
    *(double *)&v61[12] = v23;
    *(_WORD *)&v61[20] = 2050;
    *(double *)&v61[22] = v24;
    v62 = 2050;
    v63 = v25;
    v64 = 1026;
    v65 = v26;
    v66 = 1026;
    v67 = v27;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "visitFlightSegment,now,%{public}llu,start,%{public}llu,end,%{public}llu,rate,%{public}f,probability, %{public}f, elevationChange, %{public}f, regressionMad, %{public}f, isValid, %{public}d, hasAtLeast2mElevChange, %{public}d", buf, 0x54u);
  }
  v28 = v16 + v12;
  v29 = v17 + v14;
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10219AC68);
    v31 = *(_QWORD *)(a2 + 17);
    v32 = *(_QWORD *)(a2 + 1);
    v33 = *(_QWORD *)(a2 + 9);
    v34 = *(float *)(a2 + 25);
    v35 = *(float *)(a2 + 29);
    v36 = *(float *)(a2 + 33);
    v37 = *(float *)(a2 + 37);
    v38 = *(unsigned __int8 *)(a2 + 41);
    v39 = *(unsigned __int8 *)(a2 + 42);
    v42 = 134351104;
    v43 = v31;
    v44 = 2050;
    v45 = v32;
    v46 = 2050;
    v47 = v33;
    v48 = 2050;
    v49 = v34;
    v50 = 2050;
    v51 = v35;
    v52 = 2050;
    v53 = v36;
    v54 = 2050;
    v55 = v37;
    v56 = 1026;
    v57 = v38;
    v58 = 1026;
    v59 = v39;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "visitFlightSegment,now,%{public}llu,start,%{public}llu,end,%{public}llu,rate,%{public}f,probability, %{public}f, elevationChange, %{public}f, regressionMad, %{public}f, isValid, %{public}d, hasAtLeast2mElevChange, %{public}d", &v42, 84);
    v41 = (char *)v40;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::visitFlightSegment(const CMMotionCoprocessorReply::FlightSegment *)", "%s\n", v40);
    if (v41 != buf)
      free(v41);
  }
  *(_QWORD *)&v61[16] = 0;
  *(double *)buf = v28;
  *(double *)&buf[8] = v29;
  v30 = *(_OWORD *)(a2 + 25);
  *(_OWORD *)&buf[16] = *(_OWORD *)(a2 + 1);
  *(_OWORD *)v61 = v30;
  *(_WORD *)&v61[16] = *(_WORD *)(a2 + 41);
  if (v61[16])
    sub_10014C2F4(a1, 28, (uint64_t)buf, 56);
}

void sub_10102BF44(uint64_t a1, uint64_t a2)
{
  sub_10102BB88(a1 - 152, a2);
}

void sub_10102BF5C(uint64_t a1, uint64_t a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  double *v9;
  unint64_t v10;
  double *v11;
  double *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  double *v18;
  char *v19;
  __int128 v20;
  NSObject *v21;
  uint64_t v22;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  uint64_t v29;
  const char *v30;
  uint8_t *v31;
  int v32;
  uint64_t v33;
  __int16 v34;
  double v35;
  __int16 v36;
  double v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  double v41;
  uint8_t buf[4];
  uint64_t v43;
  __int16 v44;
  double v45;
  __int16 v46;
  double v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  double v51;

  v4 = *(double *)(a1 + 352);
  if (*(_BYTE *)(a1 + 653) && !*(_BYTE *)(a1 + 652))
  {
    sub_1010231AC(a1);
    *(_BYTE *)(a1 + 653) = 0;
  }
  v5 = v4 + *(double *)(a1 + 664);
  v6 = *(float *)(a2 + 4);
  v7 = *(float *)(a2 + 8);
  v8 = *(_QWORD *)(a1 + 568);
  v9 = *(double **)(a1 + 552);
  v10 = *(_QWORD *)(a1 + 560);
  if ((unint64_t)v9 >= v10)
  {
    v12 = *(double **)(a1 + 544);
    v13 = ((char *)v9 - (char *)v12) >> 5;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 59)
      sub_100259694();
    v15 = v10 - (_QWORD)v12;
    if (v15 >> 4 > v14)
      v14 = v15 >> 4;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFE0)
      v16 = 0x7FFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      v17 = (char *)sub_10025BA00(a1 + 560, v16);
      v9 = *(double **)(a1 + 552);
      v12 = *(double **)(a1 + 544);
    }
    else
    {
      v17 = 0;
    }
    v18 = (double *)&v17[32 * v13];
    *v18 = v5;
    v18[1] = v6;
    v19 = &v17[32 * v16];
    v18[2] = v7;
    *((_QWORD *)v18 + 3) = v8;
    v11 = v18 + 4;
    if (v9 != v12)
    {
      do
      {
        v20 = *((_OWORD *)v9 - 1);
        *((_OWORD *)v18 - 2) = *((_OWORD *)v9 - 2);
        *((_OWORD *)v18 - 1) = v20;
        v18 -= 4;
        v9 -= 4;
      }
      while (v9 != v12);
      v12 = *(double **)(a1 + 544);
    }
    *(_QWORD *)(a1 + 544) = v18;
    *(_QWORD *)(a1 + 552) = v11;
    *(_QWORD *)(a1 + 560) = v19;
    if (v12)
      operator delete(v12);
  }
  else
  {
    *v9 = v5;
    v9[1] = v6;
    v11 = v9 + 4;
    v9[2] = v7;
    *((_QWORD *)v9 + 3) = v8;
  }
  *(_QWORD *)(a1 + 552) = v11;
  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_10219ACA8);
  v21 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEFAULT))
  {
    v22 = *(_QWORD *)(a1 + 352);
    v23 = *(float *)(a2 + 4);
    v24 = *(float *)(a2 + 8);
    v25 = *(_QWORD *)(a1 + 568);
    *(_DWORD *)buf = 134350080;
    v43 = v22;
    v44 = 2050;
    v45 = v23;
    v46 = 2050;
    v47 = v24;
    v48 = 2050;
    v49 = v25;
    v50 = 2050;
    v51 = v5;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "timestamp,%{public}.3f,straightness,%{public}.3f,confidence,%{public}.3f,startTimestamp,%{public}.3f,stopTimestamp,%{public}.3f", buf, 0x34u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_10219ACA8);
    v26 = *(_QWORD *)(a1 + 352);
    v27 = *(float *)(a2 + 4);
    v28 = *(float *)(a2 + 8);
    v29 = *(_QWORD *)(a1 + 568);
    v32 = 134350080;
    v33 = v26;
    v34 = 2050;
    v35 = v27;
    v36 = 2050;
    v37 = v28;
    v38 = 2050;
    v39 = v29;
    v40 = 2050;
    v41 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 0, "timestamp,%{public}.3f,straightness,%{public}.3f,confidence,%{public}.3f,startTimestamp,%{public}.3f,stopTimestamp,%{public}.3f", &v32, 52);
    v31 = (uint8_t *)v30;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::visitPathStraightness(const CMMotionCoprocessorReply::PathStraightness *)", "%s\n", v30);
    if (v31 != buf)
      free(v31);
  }
}

void sub_10102C298(uint64_t a1, uint64_t a2)
{
  sub_10102BF5C(a1 - 152, a2);
}

void sub_10102C2A0(uint64_t a1, _OWORD *a2)
{
  sub_101035BDC(a1 + 192, a2, 0);
}

void sub_10102C2AC(uint64_t a1, _OWORD *a2)
{
  sub_101035BDC(a1 + 88, a2, 0);
}

uint64_t sub_10102C2B8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  return sub_10014C2F4(a1, 29, (uint64_t)&v3, 8);
}

uint64_t sub_10102C2E8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  return sub_10014C2F4(a1 - 152, 29, (uint64_t)&v3, 8);
}

uint64_t sub_10102C31C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;

  v3 = 0;
  v4 = a2 + 80;
  do
  {
    v5 = *(_QWORD *)(v4 + 8 * v3);
    if (v5 <= qword_10230BC28)
      v5 = qword_10230BC28 + 1000;
    qword_10230BC28 = v5;
    v7 = v5;
    v8 = 0;
    LODWORD(v8) = sqrtf(*(float *)(v4 + 4 * v3 - 76));
    result = sub_10014C2F4(a1, 34, (uint64_t)&v7, 16);
    ++v3;
  }
  while (v3 != 19);
  return result;
}

uint64_t sub_10102C3A0(uint64_t a1, uint64_t a2)
{
  return sub_10102C31C(a1 - 152, a2);
}

void sub_10102C3A8(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  double v6;
  double v7;
  float *v8;
  double v9;
  NSObject *v10;
  int v11;
  int v12;
  int v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  NSObject *v21;
  const char *v22;
  uint8_t *v23;
  int v24;
  int v25;
  int v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  const char *v34;
  uint8_t *v35;
  uint64_t v36;
  int v37;
  double v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  __int16 v45;
  double v46;
  __int16 v47;
  double v48;
  __int16 v49;
  double v50;
  __int16 v51;
  double v52;
  __int16 v53;
  double v54;
  __int16 v55;
  double v56;
  __int16 v57;
  double v58;
  uint8_t buf[4];
  double v60;
  __int16 v61;
  int v62;
  __int16 v63;
  int v64;
  __int16 v65;
  int v66;
  __int16 v67;
  double v68;
  __int16 v69;
  double v70;
  __int16 v71;
  double v72;
  __int16 v73;
  double v74;
  __int16 v75;
  double v76;
  __int16 v77;
  double v78;
  __int16 v79;
  double v80;

  v3 = a1 + 1768;
  v4 = *a2;
  v5 = a2[1];
  *(_OWORD *)(a1 + 1796) = *(__int128 *)((char *)a2 + 28);
  *(_OWORD *)(a1 + 1768) = v4;
  *(_OWORD *)(a1 + 1784) = v5;
  *(_BYTE *)(a1 + 1812) = 1;
  v6 = *(double *)(a1 + 352);
  if (*(_BYTE *)(a1 + 653) && !*(_BYTE *)(a1 + 652))
  {
    sub_1010231AC(a1);
    *(_BYTE *)(a1 + 653) = 0;
  }
  v7 = *(double *)(a1 + 664);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_10219AC68);
  v8 = (float *)(a1 + 1779);
  v9 = v6 + v7;
  v10 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
  {
    v11 = *(unsigned __int8 *)(a1 + 1777);
    v12 = *(unsigned __int8 *)(a1 + 1778);
    v13 = *(unsigned __int8 *)(a1 + 1799);
    v14 = *(float *)(a1 + 1800);
    v15 = *(float *)(a1 + 1783);
    v16 = *(float *)(a1 + 1787);
    v17 = *(float *)(a1 + 1804);
    v18 = *(float *)(a1 + 1791);
    v19 = *v8;
    v20 = *(float *)(a1 + 1808);
    *(_DWORD *)buf = 134351616;
    v60 = v9;
    v61 = 1026;
    v62 = v11;
    v63 = 1026;
    v64 = v12;
    v65 = 1026;
    v66 = v13;
    v67 = 2050;
    v68 = v14;
    v69 = 2050;
    v70 = v15;
    v71 = 2050;
    v72 = v16;
    v73 = 2050;
    v74 = v17;
    v75 = 2050;
    v76 = v18;
    v77 = 2050;
    v78 = v19;
    v79 = 2050;
    v80 = v20;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "saving submersion state from the AOP,timestamp,%{public}f,state,%{public}u,model,%{public}u,zoh,%{public}u,surfPressure,%{public}f,minMaxP,%{public}f,maxAccel,%{public}f,touchTimeDelta,%{public}f,correlation,%{public}f,slope,%{public}f,depth,%{public}f", buf, 0x64u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10219AC68);
    v24 = *(unsigned __int8 *)(a1 + 1777);
    v25 = *(unsigned __int8 *)(a1 + 1778);
    v26 = *(unsigned __int8 *)(a1 + 1799);
    v27 = *(float *)(a1 + 1800);
    v28 = *(float *)(a1 + 1783);
    v29 = *(float *)(a1 + 1787);
    v30 = *(float *)(a1 + 1804);
    v31 = *(float *)(a1 + 1791);
    v32 = *v8;
    v33 = *(float *)(a1 + 1808);
    v37 = 134351616;
    v38 = v9;
    v39 = 1026;
    v40 = v24;
    v41 = 1026;
    v42 = v25;
    v43 = 1026;
    v44 = v26;
    v45 = 2050;
    v46 = v27;
    v47 = 2050;
    v48 = v28;
    v49 = 2050;
    v50 = v29;
    v51 = 2050;
    v52 = v30;
    v53 = 2050;
    v54 = v31;
    v55 = 2050;
    v56 = v32;
    v57 = 2050;
    v58 = v33;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "saving submersion state from the AOP,timestamp,%{public}f,state,%{public}u,model,%{public}u,zoh,%{public}u,surfPressure,%{public}f,minMaxP,%{public}f,maxAccel,%{public}f,touchTimeDelta,%{public}f,correlation,%{public}f,slope,%{public}f,depth,%{public}f", &v37, 100);
    v35 = (uint8_t *)v34;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::visitSubmersionState(const CMMotionCoprocessorReply::SubmersionState *)", "%s\n", v34);
    if (v35 != buf)
      free(v35);
  }
  if (*(_BYTE *)(a1 + 859) || *(_BYTE *)(a1 + 1756) || *(_BYTE *)(a1 + 1755))
  {
    *(_BYTE *)(a1 + 1756) = 0;
    sub_10102C828(a1, v3);
    *(_BYTE *)(a1 + 1812) = 0;
  }
  else
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10219AC68);
    v21 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "fitness tracking off, not sending the submersion state from AOP to AP", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10219AC68);
      LOWORD(v37) = 0;
      LODWORD(v36) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "fitness tracking off, not sending the submersion state from AOP to AP", &v37, v36);
      v23 = (uint8_t *)v22;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::visitSubmersionState(const CMMotionCoprocessorReply::SubmersionState *)", "%s\n", v22);
      if (v23 != buf)
        free(v23);
    }
  }
}

void sub_10102C828(uint64_t a1, uint64_t a2)
{
  double v4;
  double v5;
  double v6;
  NSObject *v7;
  int v8;
  int v9;
  int v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  float v18;
  float v19;
  float v20;
  float v21;
  NSObject *v22;
  __int128 *v23;
  __int128 *v24;
  __int128 *v25;
  __int128 *v26;
  NSObject *v27;
  int v28;
  int v29;
  int v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  char *v38;
  __int128 *v39;
  __int128 *v40;
  __int128 *v41;
  __int128 *v42;
  char *v43;
  char *v44;
  const char *v45;
  const char *v46;
  const char *v47;
  NSDictionary *(*v48)(uint64_t);
  void *v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  void *v65;
  void *v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  void *v70;
  void *v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  void *__p;
  void *v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  double v80;
  uint64_t v81;
  int v82;
  double v83;
  __int16 v84;
  _BYTE v85[10];
  __int128 *v86;
  _BYTE v87[10];
  double v88;
  __int16 v89;
  double v90;
  __int16 v91;
  double v92;
  __int16 v93;
  double v94;
  __int16 v95;
  double v96;
  __int16 v97;
  double v98;
  uint8_t buf[4];
  double v100;
  __int16 v101;
  _BYTE v102[10];
  __int128 *v103;
  _BYTE v104[10];
  double v105;
  __int16 v106;
  double v107;
  __int16 v108;
  double v109;
  __int16 v110;
  double v111;
  __int16 v112;
  double v113;
  __int16 v114;
  double v115;

  v4 = *(double *)(a1 + 352);
  if (*(_BYTE *)(a1 + 653) && !*(_BYTE *)(a1 + 652))
  {
    sub_1010231AC(a1);
    *(_BYTE *)(a1 + 653) = 0;
  }
  v5 = *(double *)(a1 + 664);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_10219AC68);
  v6 = v4 + v5;
  v7 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(a2 + 9);
    v9 = *(unsigned __int8 *)(a2 + 10);
    v10 = *(unsigned __int8 *)(a2 + 31);
    v11 = *(float *)(a2 + 32);
    v12 = *(float *)(a2 + 15);
    v13 = *(float *)(a2 + 19);
    v14 = *(float *)(a2 + 36);
    v15 = *(float *)(a2 + 23);
    v16 = *(float *)(a2 + 11);
    v17 = *(float *)(a2 + 40);
    *(_DWORD *)buf = 134351616;
    v100 = v6;
    v101 = 1026;
    *(_DWORD *)v102 = v8;
    *(_WORD *)&v102[4] = 1026;
    *(_DWORD *)&v102[6] = v9;
    LOWORD(v103) = 1026;
    *(_DWORD *)((char *)&v103 + 2) = v10;
    HIWORD(v103) = 2050;
    *(double *)v104 = v11;
    *(_WORD *)&v104[8] = 2050;
    v105 = v12;
    v106 = 2050;
    v107 = v13;
    v108 = 2050;
    v109 = v14;
    v110 = 2050;
    v111 = v15;
    v112 = 2050;
    v113 = v16;
    v114 = 2050;
    v115 = v17;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "received submersion state from the AOP,timestamp,%{public}f,state,%{public}u,model,%{public}u,zoh,%{public}u,surfPressure,%{public}f,minMaxP,%{public}f,maxAccel,%{public}f,touchTimeDelta,%{public}f,correlation,%{public}f,slope,%{public}f,depth,%{public}f", buf, 0x64u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10219AC68);
    v28 = *(unsigned __int8 *)(a2 + 9);
    v29 = *(unsigned __int8 *)(a2 + 10);
    v30 = *(unsigned __int8 *)(a2 + 31);
    v31 = *(float *)(a2 + 32);
    v32 = *(float *)(a2 + 15);
    v33 = *(float *)(a2 + 19);
    v34 = *(float *)(a2 + 36);
    v35 = *(float *)(a2 + 23);
    v36 = *(float *)(a2 + 11);
    v37 = *(float *)(a2 + 40);
    v82 = 134351616;
    v83 = v6;
    v84 = 1026;
    *(_DWORD *)v85 = v28;
    *(_WORD *)&v85[4] = 1026;
    *(_DWORD *)&v85[6] = v29;
    LOWORD(v86) = 1026;
    *(_DWORD *)((char *)&v86 + 2) = v30;
    HIWORD(v86) = 2050;
    *(double *)v87 = v31;
    *(_WORD *)&v87[8] = 2050;
    v88 = v32;
    v89 = 2050;
    v90 = v33;
    v91 = 2050;
    v92 = v34;
    v93 = 2050;
    v94 = v35;
    v95 = 2050;
    v96 = v36;
    v97 = 2050;
    v98 = v37;
    v38 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "received submersion state from the AOP,timestamp,%{public}f,state,%{public}u,model,%{public}u,zoh,%{public}u,surfPressure,%{public}f,minMaxP,%{public}f,maxAccel,%{public}f,touchTimeDelta,%{public}f,correlation,%{public}f,slope,%{public}f,depth,%{public}f", &v82, 100);
    sub_100512490("Generic", 1, 0, 2, "void CLMotionCoprocessor::sendSubmersionStateAndCollectAnalytics(const CMMotionCoprocessorReply::SubmersionState &)", "%s\n", v38);
    if (v38 != (char *)buf)
      free(v38);
  }
  v81 = 0;
  v80 = v6;
  LOBYTE(v81) = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 1755) = v81 > 1u;
  *(_DWORD *)(a1 + 1760) = *(unsigned __int8 *)(a2 + 10);
  v18 = *(float *)(a2 + 40);
  *(float *)(a1 + 1764) = v18;
  v76 = 0;
  v77 = 0;
  __p = 0;
  sub_10027205C(&__p, (const void *)qword_10230BBA8, qword_10230BBB0, (qword_10230BBB0 - qword_10230BBA8) >> 2);
  sub_10041CAFC((uint64_t)&__p, &v78, v18);
  if (__p)
  {
    v76 = __p;
    operator delete(__p);
  }
  v19 = *(float *)(a2 + 19);
  v71 = 0;
  v72 = 0;
  v70 = 0;
  sub_10027205C(&v70, (const void *)qword_10230BBC0, qword_10230BBC8, (qword_10230BBC8 - qword_10230BBC0) >> 2);
  sub_10041CAFC((uint64_t)&v70, &v73, v19);
  if (v70)
  {
    v71 = v70;
    operator delete(v70);
  }
  v20 = *(float *)(a2 + 15);
  v66 = 0;
  v67 = 0;
  v65 = 0;
  sub_10027205C(&v65, (const void *)qword_10230BBD8, qword_10230BBE0, (qword_10230BBE0 - qword_10230BBD8) >> 2);
  sub_10041CAFC((uint64_t)&v65, &v68, v20);
  if (v65)
  {
    v66 = v65;
    operator delete(v65);
  }
  v21 = *(float *)(a2 + 36);
  v61 = 0;
  v62 = 0;
  v60 = 0;
  sub_10027205C(&v60, (const void *)qword_10230BBF0, qword_10230BBF8, (qword_10230BBF8 - qword_10230BBF0) >> 2);
  sub_10041CAFC((uint64_t)&v60, &v63, v21);
  if (v60)
  {
    v61 = v60;
    operator delete(v60);
  }
  if (qword_10229FE80 != -1)
    dispatch_once(&qword_10229FE80, &stru_10219AE28);
  v22 = qword_10229FE88;
  if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEFAULT))
  {
    v23 = &v78;
    if (v79 < 0)
      v23 = (__int128 *)v78;
    v24 = &v73;
    if (v74 < 0)
      v24 = (__int128 *)v73;
    v25 = &v68;
    if (v69 < 0)
      v25 = (__int128 *)v68;
    v26 = &v63;
    if (v64 < 0)
      v26 = (__int128 *)v63;
    *(_DWORD *)buf = 136315906;
    v100 = *(double *)&v23;
    v101 = 2080;
    *(_QWORD *)v102 = v24;
    *(_WORD *)&v102[8] = 2080;
    v103 = v25;
    *(_WORD *)v104 = 2080;
    *(_QWORD *)&v104[2] = v26;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Analytics submersion,depth,%s,maxAccel,%s,maxMinPressure,%s,touchDelay,%s", buf, 0x2Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_10219AE28);
    v39 = &v78;
    if (v79 < 0)
      v39 = (__int128 *)v78;
    v40 = &v73;
    if (v74 < 0)
      v40 = (__int128 *)v73;
    v41 = &v68;
    if (v69 < 0)
      v41 = (__int128 *)v68;
    v42 = &v63;
    if (v64 < 0)
      v42 = (__int128 *)v63;
    v82 = 136315906;
    v83 = *(double *)&v39;
    v84 = 2080;
    *(_QWORD *)v85 = v40;
    *(_WORD *)&v85[8] = 2080;
    v86 = v41;
    *(_WORD *)v87 = 2080;
    *(_QWORD *)&v87[2] = v42;
    LODWORD(v45) = 42;
    v43 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 0, "Analytics submersion,depth,%s,maxAccel,%s,maxMinPressure,%s,touchDelay,%s", (const char *)&v82, v45, v46, v47);
    sub_100512490("Generic", 1, 0, 2, "void CLMotionCoprocessor::sendSubmersionStateAndCollectAnalytics(const CMMotionCoprocessorReply::SubmersionState &)", "%s\n", v43);
    if (v43 != (char *)buf)
      free(v43);
  }
  v46 = (const char *)_NSConcreteStackBlock;
  v47 = (const char *)3321888768;
  v48 = sub_10102D2C4;
  v49 = &unk_10219AAD0;
  v50 = a1;
  if (SHIBYTE(v79) < 0)
  {
    sub_100115CE4(&v51, (void *)v78, *((unint64_t *)&v78 + 1));
  }
  else
  {
    v51 = v78;
    v52 = v79;
  }
  if (SHIBYTE(v74) < 0)
  {
    sub_100115CE4(&v53, (void *)v73, *((unint64_t *)&v73 + 1));
  }
  else
  {
    v53 = v73;
    v54 = v74;
  }
  if (SHIBYTE(v69) < 0)
  {
    sub_100115CE4(&v55, (void *)v68, *((unint64_t *)&v68 + 1));
  }
  else
  {
    v55 = v68;
    v56 = v69;
  }
  if (SHIBYTE(v64) < 0)
  {
    sub_100115CE4(&v57, (void *)v63, *((unint64_t *)&v63 + 1));
  }
  else
  {
    v57 = v63;
    v58 = v64;
  }
  v59 = a2;
  AnalyticsSendEventLazy(CFSTR("com.apple.Motion.Charon.SubmersionEvent"), &v46);
  if (*(int *)(a1 + 1744) >= 1)
  {
    LOBYTE(v81) = *(_DWORD *)(a1 + 1744);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10219AC68);
    v27 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240192;
      LODWORD(v100) = v81;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "overriding submersion state, %{public}u", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10219AC68);
      v82 = 67240192;
      LODWORD(v83) = v81;
      LODWORD(v45) = 8;
      v44 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "overriding submersion state, %{public}u", &v82, v45, v46, v47, v48, v49, v50, (_QWORD)v51, *((_QWORD *)&v51 + 1), v52, (_QWORD)v53,
                      *((_QWORD *)&v53 + 1),
                      v54,
                      (_QWORD)v55,
                      *((_QWORD *)&v55 + 1),
                      v56,
                      (_QWORD)v57,
                      *((_QWORD *)&v57 + 1),
                      v58);
      sub_100512490("Generic", 1, 0, 2, "void CLMotionCoprocessor::sendSubmersionStateAndCollectAnalytics(const CMMotionCoprocessorReply::SubmersionState &)", "%s\n", v44);
      if (v44 != (char *)buf)
        free(v44);
    }
  }
  sub_10014C2F4(a1, 37, (uint64_t)&v80, 16);
  if (SHIBYTE(v58) < 0)
    operator delete((void *)v57);
  if (SHIBYTE(v56) < 0)
    operator delete((void *)v55);
  if (SHIBYTE(v54) < 0)
    operator delete((void *)v53);
  if (SHIBYTE(v52) < 0)
    operator delete((void *)v51);
  if (SHIBYTE(v64) < 0)
    operator delete((void *)v63);
  if (SHIBYTE(v69) < 0)
    operator delete((void *)v68);
  if (SHIBYTE(v74) < 0)
    operator delete((void *)v73);
  if (SHIBYTE(v79) < 0)
    operator delete((void *)v78);
}

void sub_10102D194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  char a67;
  void *a71;
  char a72;

  if (a39 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (a27 < 0)
    operator delete(a22);
  if (a21 < 0)
    operator delete(a16);
  if (a49 < 0)
    operator delete(a44);
  if (a58 < 0)
    operator delete(a53);
  if (a67 < 0)
    operator delete(a62);
  if (a72 < 0)
    operator delete(a71);
  _Unwind_Resume(a1);
}

void sub_10102D2BC(uint64_t a1, __int128 *a2)
{
  sub_10102C3A8(a1 - 152, a2);
}

NSDictionary *sub_10102D2C4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD v8[7];
  _QWORD v9[7];

  v2 = *(_QWORD *)(a1 + 32);
  v8[0] = CFSTR("depth");
  v3 = (_QWORD *)(a1 + 40);
  if (*(char *)(a1 + 63) < 0)
    v3 = (_QWORD *)*v3;
  v9[0] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3);
  v8[1] = CFSTR("maxAccel");
  v4 = (_QWORD *)(a1 + 64);
  if (*(char *)(a1 + 87) < 0)
    v4 = (_QWORD *)*v4;
  v9[1] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v4);
  v8[2] = CFSTR("maxMinPressure");
  v5 = (_QWORD *)(a1 + 88);
  if (*(char *)(a1 + 111) < 0)
    v5 = (_QWORD *)*v5;
  v9[2] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5);
  v8[3] = CFSTR("touchDelay");
  v6 = (_QWORD *)(a1 + 112);
  if (*(char *)(a1 + 135) < 0)
    v6 = (_QWORD *)*v6;
  v9[3] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6);
  v8[4] = CFSTR("submerged");
  v9[4] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v2 + 1755));
  v8[5] = CFSTR("modelUsed");
  v9[5] = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 136) + 10));
  v8[6] = CFSTR("modelUsedBounded");
  v9[6] = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 136) + 10));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v9, v8, 7);
}

_BYTE *sub_10102D43C(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _BYTE *result;
  __int128 v8;

  if (*(char *)(a2 + 63) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 40), *(void **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v4;
  }
  if (*(char *)(a2 + 87) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 64), *(void **)(a2 + 64), *(_QWORD *)(a2 + 72));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = v5;
  }
  if (*(char *)(a2 + 111) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 88), *(void **)(a2 + 88), *(_QWORD *)(a2 + 96));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = v6;
  }
  result = (_BYTE *)(a1 + 112);
  if (*(char *)(a2 + 135) < 0)
    return sub_100115CE4(result, *(void **)(a2 + 112), *(_QWORD *)(a2 + 120));
  v8 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)result = v8;
  return result;
}

void sub_10102D528(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v2;
  void **v3;
  void **v4;

  if (v2[111] < 0)
    operator delete(*v4);
  if (v2[87] < 0)
    operator delete(*v3);
  if (v2[63] < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void sub_10102D574(uint64_t a1)
{
  if (*(char *)(a1 + 135) < 0)
    operator delete(*(void **)(a1 + 112));
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

uint64_t sub_10102D5D8(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  NSObject *v7;
  double v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  const char *v12;
  char *v13;
  int v14;
  double v15;
  __int16 v16;
  double v17;
  __int16 v18;
  uint64_t v19;
  _BYTE buf[12];
  __int16 v21;
  double v22;
  __int16 v23;
  uint64_t v24;

  if (*(_BYTE *)(result + 859))
  {
    v3 = result;
    v4 = *(double *)(result + 352);
    if (*(_BYTE *)(result + 653) && !*(_BYTE *)(result + 652))
    {
      sub_1010231AC(result);
      *(_BYTE *)(v3 + 653) = 0;
    }
    v5 = *(double *)(v3 + 664);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10219AC68);
    v6 = v4 + v5;
    v7 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *(float *)(a2 + 9);
      v9 = *(_QWORD *)(a2 + 1);
      *(_DWORD *)buf = 134349568;
      *(double *)&buf[4] = v6;
      v21 = 2050;
      v22 = v8;
      v23 = 2050;
      v24 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "received surface pressure from the AOP,timestamp,%{public}f,pressure,%{public}f,aopTime,%{public}llu", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10219AC68);
      v10 = *(float *)(a2 + 9);
      v11 = *(_QWORD *)(a2 + 1);
      v14 = 134349568;
      v15 = v6;
      v16 = 2050;
      v17 = v10;
      v18 = 2050;
      v19 = v11;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "received surface pressure from the AOP,timestamp,%{public}f,pressure,%{public}f,aopTime,%{public}llu", &v14, 32);
      v13 = (char *)v12;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::visitSurfacePressure(const CMMotionCoprocessorReply::SurfacePressure *)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    *(double *)buf = v6;
    *(_DWORD *)&buf[8] = *(_DWORD *)(a2 + 9);
    return sub_10014C2F4(v3, 38, (uint64_t)buf, 16);
  }
  return result;
}

uint64_t sub_10102D81C(uint64_t a1, uint64_t a2)
{
  return sub_10102D5D8(a1 - 152, a2);
}

uint64_t sub_10102D824(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  int v6;
  double v7;
  uint64_t v9;
  int v10;
  const char *v11;
  char *v12;
  int v13;
  uint64_t v14;
  __int16 v15;
  int v16;
  _BYTE buf[1632];

  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_10219AC68);
  v4 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a2 + 1);
    v6 = *(unsigned __int8 *)(a2 + 9);
    *(_DWORD *)buf = 134349312;
    *(_QWORD *)&buf[4] = v5;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "received face covered event from the AOP,timestamp,%{public}llu,isCovered,%{public}d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10219AC68);
    v9 = *(_QWORD *)(a2 + 1);
    v10 = *(unsigned __int8 *)(a2 + 9);
    v13 = 134349312;
    v14 = v9;
    v15 = 1026;
    v16 = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "received face covered event from the AOP,timestamp,%{public}llu,isCovered,%{public}d", &v13, 18);
    v12 = (char *)v11;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::visitFaceCoveredEvent(const CMMotionCoprocessorReply::FaceCoveredEvent *)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  *(_QWORD *)buf = *(_QWORD *)(a2 + 1);
  *(_QWORD *)&buf[8] = 0;
  buf[8] = *(_BYTE *)(a2 + 9);
  v7 = *(double *)(a1 + 352);
  if (*(_BYTE *)(a1 + 653) && !*(_BYTE *)(a1 + 652))
  {
    sub_1010231AC(a1);
    *(_BYTE *)(a1 + 653) = 0;
  }
  *(double *)&buf[16] = v7 + *(double *)(a1 + 664);
  return sub_10014C2F4(a1, 39, (uint64_t)buf, 24);
}

uint64_t sub_10102DA50(uint64_t a1, uint64_t a2)
{
  return sub_10102D824(a1 - 152, a2);
}

uint64_t sub_10102DA58(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  double v6;
  double v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  const char *v18;
  char *v19;
  int v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  double v25;
  __int16 v26;
  double v27;
  _BYTE buf[22];
  __int16 v29;
  double v30;
  __int16 v31;
  double v32;

  v4 = *(_QWORD *)(a2 + 6);
  v5 = *(_QWORD *)(a2 + 14);
  v6 = *(double *)(a1 + 352);
  if (*(_BYTE *)(a1 + 653) && !*(_BYTE *)(a1 + 652))
  {
    sub_1010231AC(a1);
    *(_BYTE *)(a1 + 653) = 0;
  }
  v7 = *(double *)(a1 + 664);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_10219AC68);
  v8 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
  {
    v9 = *(_QWORD *)(a2 + 14);
    v10 = *(_QWORD *)(a2 + 6);
    v11 = *(float *)(a2 + 2);
    v12 = *(float *)(a2 + 22);
    *(_DWORD *)buf = 134349824;
    *(_QWORD *)&buf[4] = v9;
    *(_WORD *)&buf[12] = 2050;
    *(_QWORD *)&buf[14] = v10;
    v29 = 2050;
    v30 = v11;
    v31 = 2050;
    v32 = v12;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "visitStairsEscalationEvent,now,%{public}llu,start,%{public}llu,stairMetric,%{public}f,vertSpeed,%{public}f", buf, 0x2Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10219AC68);
    v14 = *(_QWORD *)(a2 + 14);
    v15 = *(_QWORD *)(a2 + 6);
    v16 = *(float *)(a2 + 2);
    v17 = *(float *)(a2 + 22);
    v20 = 134349824;
    v21 = v14;
    v22 = 2050;
    v23 = v15;
    v24 = 2050;
    v25 = v16;
    v26 = 2050;
    v27 = v17;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "visitStairsEscalationEvent,now,%{public}llu,start,%{public}llu,stairMetric,%{public}f,vertSpeed,%{public}f", &v20, 42);
    v19 = (char *)v18;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::visitStairsEscalationEvent(const CMMotionCoprocessorReply::StairsEscalationEvent *)", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  *(double *)buf = v6 + ((double)v4 - (double)v5) / 1000000.0 + v7;
  *(_QWORD *)&buf[8] = *(_QWORD *)(a2 + 6);
  *(_DWORD *)&buf[16] = *(_DWORD *)(a2 + 2);
  buf[20] = *(_BYTE *)(a2 + 1);
  LODWORD(v30) = *(_DWORD *)(a2 + 22);
  return sub_10014C2F4(a1, 47, (uint64_t)buf, 32);
}

uint64_t sub_10102DD00(uint64_t a1, uint64_t a2)
{
  return sub_10102DA58(a1 - 152, a2);
}

uint64_t sub_10102DD08(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  double v10;
  double v11;
  const char *v12;
  char *v13;
  double v14;
  int v15;
  double v16;
  __int16 v17;
  double v18;
  _BYTE buf[1628];

  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_10219AC68);
  v4 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
  {
    v5 = *(float *)(a2 + 1);
    v6 = *(float *)(a2 + 5);
    *(_DWORD *)buf = 134218240;
    *(double *)&buf[4] = v5;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "received mean sea level pressure,mslp,%f,uncertainty,%f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10219AC68);
    v10 = *(float *)(a2 + 1);
    v11 = *(float *)(a2 + 5);
    v15 = 134218240;
    v16 = v10;
    v17 = 2048;
    v18 = v11;
    LODWORD(v14) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "received mean sea level pressure,mslp,%f,uncertainty,%f", COERCE_DOUBLE(&v15), v14);
    v13 = (char *)v12;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::visitMeanSeaLevelPressure(const CMMotionCoprocessorReply::MeanSeaLevelPressure *)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  v7 = *(double *)(a1 + 352);
  if (*(_BYTE *)(a1 + 653) && !*(_BYTE *)(a1 + 652))
  {
    sub_1010231AC(a1);
    *(_BYTE *)(a1 + 653) = 0;
  }
  v8 = *(_QWORD *)(a2 + 1);
  *(double *)buf = v7 + *(double *)(a1 + 664);
  *(_QWORD *)&buf[8] = v8;
  return sub_10014C2F4(a1, 48, (uint64_t)buf, 16);
}

uint64_t sub_10102DF38(uint64_t a1, uint64_t a2)
{
  return sub_10102DD08(a1 - 152, a2);
}

void sub_10102DF40(uint64_t a1, void *aBlock)
{
  void *v3;
  uint64_t v4;
  _QWORD v5[6];

  v3 = _Block_copy(aBlock);
  v4 = sub_100127B9C();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10102DFAC;
  v5[3] = &unk_102131360;
  v5[4] = v3;
  v5[5] = a1;
  sub_1000A57FC(v4, (uint64_t)v5);
}

void sub_10102DFAC(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);

  *(_QWORD *)(v2 + 1248) = objc_msgSend(*(id *)(a1 + 32), "copy");
  _Block_release(*(const void **)(a1 + 32));
}

void sub_10102DFE4(uint64_t a1, void *a2)
{
  sub_10102DF40(a1 - 40, a2);
}

void sub_10102DFEC(uint64_t a1, int a2, double a3)
{
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  double v9;
  _DWORD v10[2];
  __int16 v11;
  double v12;
  uint8_t buf[4];
  int v14;
  _QWORD v15[204];

  if (qword_10229FCC0 != -1)
    dispatch_once(&qword_10229FCC0, &stru_10219ADA8);
  v6 = qword_10229FCC8;
  if (os_log_type_enabled((os_log_t)qword_10229FCC8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109376;
    v14 = a2;
    LOWORD(v15[0]) = 2048;
    *(double *)((char *)v15 + 2) = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "trigger,%u,duration,%f", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCC0 != -1)
      dispatch_once(&qword_10229FCC0, &stru_10219ADA8);
    v10[0] = 67109376;
    v10[1] = a2;
    v11 = 2048;
    v12 = a3;
    LODWORD(v9) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCC8, 1, "trigger,%u,duration,%f", v10, v9);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::setActivityAlarm(CMActivityAlarmTrigger, NSTimeInterval)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  *(_DWORD *)buf = 3;
  v14 = a2;
  v15[0] = (unint64_t)(a3 * 1000000.0);
  sub_101035D68(a1 + 192, (__int128 *)buf, 0);
}

void sub_10102E1E8(uint64_t a1, int a2, double a3)
{
  sub_10102DFEC(a1 - 40, a2, a3);
}

void sub_10102E1F0(uint64_t a1, int a2)
{
  __int128 v2;

  LODWORD(v2) = 259;
  DWORD1(v2) = a2;
  *((_QWORD *)&v2 + 1) = 0;
  sub_101035D68(a1 + 192, &v2, 0);
}

void sub_10102E224(uint64_t a1, int a2)
{
  __int128 v2;

  LODWORD(v2) = 259;
  DWORD1(v2) = a2;
  *((_QWORD *)&v2 + 1) = 0;
  sub_101035D68(a1 + 152, &v2, 0);
}

void sub_10102E258(uint64_t a1, char a2)
{
  uint64_t v4;
  _QWORD v5[5];
  char v6;

  v4 = sub_100127B9C();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10102E2C0;
  v5[3] = &unk_1021468D0;
  v5[4] = a1;
  v6 = a2;
  sub_1000A57FC(v4, (uint64_t)v5);
}

void sub_10102E2C0(uint64_t a1)
{
  _BYTE *v2;
  uint64_t v3;
  int v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  BOOL v16;

  v2 = *(_BYTE **)(a1 + 32);
  v16 = 0;
  v3 = sub_100127B9C();
  sub_100081C10(v3, &v14);
  v4 = sub_1001E4874(v14, "OscarStepCounting", &v16);
  v5 = v4;
  v6 = v15;
  if (!v15)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v15->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (v5)
    {
LABEL_6:
      if (v16 == *(_BYTE *)(a1 + 40))
        return;
    }
  }
  else
  {
LABEL_5:
    if (v4)
      goto LABEL_6;
  }
  v9 = sub_100127B9C();
  sub_100081C10(v9, &v14);
  v10 = (_BYTE *)(a1 + 40);
  sub_10011B47C(v14, "OscarStepCounting", v10);
  v11 = v15;
  if (v15)
  {
    v12 = (unint64_t *)&v15->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v2[219] = *v10;
  (*(void (**)(_BYTE *, _QWORD))(*(_QWORD *)v2 + 552))(v2, 0);
}

void sub_10102E3E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10102E400(uint64_t a1, char a2)
{
  sub_10102E258(a1 - 32, a2);
}

void sub_10102E408(uint64_t a1, char a2)
{
  uint64_t v4;
  _QWORD v5[5];
  char v6;

  v4 = sub_100127B9C();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10102E470;
  v5[3] = &unk_1021468D0;
  v5[4] = a1;
  v6 = a2;
  sub_1000A57FC(v4, (uint64_t)v5);
}

uint64_t sub_10102E470(uint64_t a1)
{
  _BYTE *v1;

  v1 = *(_BYTE **)(a1 + 32);
  v1[264] = *(_BYTE *)(a1 + 40);
  return (*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)v1 + 552))(v1, 0);
}

void sub_10102E490(uint64_t a1, char a2)
{
  sub_10102E408(a1 - 32, a2);
}

void sub_10102E498(uint64_t a1, void *aBlock)
{
  void *v3;
  uint64_t v4;
  _QWORD v5[6];

  v3 = _Block_copy(aBlock);
  v4 = sub_100127B9C();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10102E504;
  v5[3] = &unk_102131360;
  v5[4] = v3;
  v5[5] = a1;
  sub_1000A57FC(v4, (uint64_t)v5);
}

void sub_10102E504(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);

  *(_QWORD *)(v2 + 1256) = objc_msgSend(*(id *)(a1 + 32), "copy");
  _Block_release(*(const void **)(a1 + 32));
}

void sub_10102E53C(uint64_t a1, void *a2)
{
  sub_10102E498(a1 - 32, a2);
}

void sub_10102E544(uint64_t a1, void *aBlock)
{
  void *v3;
  uint64_t v4;
  _QWORD v5[6];

  v3 = _Block_copy(aBlock);
  v4 = sub_100127B9C();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10102E5B0;
  v5[3] = &unk_102131360;
  v5[4] = v3;
  v5[5] = a1;
  sub_1000A57FC(v4, (uint64_t)v5);
}

void sub_10102E5B0(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);

  *(_QWORD *)(v2 + 1264) = objc_msgSend(*(id *)(a1 + 32), "copy");
  _Block_release(*(const void **)(a1 + 32));
}

void sub_10102E5E8(uint64_t a1, void *a2)
{
  sub_10102E544(a1 - 32, a2);
}

uint64_t sub_10102E5F0(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
  if ((_DWORD)result)
    return sub_1000824CC() != 0;
  return result;
}

void sub_10102E61C(uint64_t a1, void *aBlock)
{
  void *v3;
  uint64_t v4;
  _QWORD v5[6];

  v3 = _Block_copy(aBlock);
  v4 = sub_100127B9C();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10102E688;
  v5[3] = &unk_102131360;
  v5[4] = v3;
  v5[5] = a1;
  sub_1000A57FC(v4, (uint64_t)v5);
}

void sub_10102E688(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);

  *(_QWORD *)(v2 + 1272) = objc_msgSend(*(id *)(a1 + 32), "copy");
  _Block_release(*(const void **)(a1 + 32));
}

void sub_10102E6C0(uint64_t a1, void *a2)
{
  sub_10102E61C(a1 - 72, a2);
}

void sub_10102E6C8(uint64_t a1, void *aBlock)
{
  void *v3;
  uint64_t v4;
  _QWORD v5[6];

  v3 = _Block_copy(aBlock);
  v4 = sub_100127B9C();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10102E734;
  v5[3] = &unk_102131360;
  v5[4] = v3;
  v5[5] = a1;
  sub_1000A57FC(v4, (uint64_t)v5);
}

void sub_10102E734(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);

  *(_QWORD *)(v2 + 1280) = objc_msgSend(*(id *)(a1 + 32), "copy");
  _Block_release(*(const void **)(a1 + 32));
}

void sub_10102E76C(uint64_t a1, void *a2)
{
  sub_10102E6C8(a1 - 72, a2);
}

void sub_10102E774(uint64_t a1, __int16 a2)
{
  uint64_t v4;
  _QWORD v5[5];
  __int16 v6;

  v4 = sub_100127B9C();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10102E7DC;
  v5[3] = &unk_102173700;
  v5[4] = a1;
  v6 = a2;
  sub_1000A57FC(v4, (uint64_t)v5);
}

void sub_10102E7DC(uint64_t a1)
{
  uint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(unsigned __int16 *)(a1 + 40);
  *(_WORD *)(v1 + 344) = v2;
  sub_101023748(v1, v2);
}

void sub_10102E7F0(uint64_t a1, __int16 a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];
  __int16 v6;

  v3 = a1 - 56;
  v4 = sub_100127B9C();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10102E7DC;
  v5[3] = &unk_102173700;
  v5[4] = v3;
  v6 = a2;
  sub_1000A57FC(v4, (uint64_t)v5);
}

void sub_10102E858(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  int v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  int v15;
  double v16;
  int v17;
  int v18;
  int v19;
  double v20;
  __int128 v21;
  int v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  int v31;
  double v32;
  int v33;
  int v34;
  int v35;
  double v36;
  const char *v37;
  uint8_t *v38;
  double v39;
  double v40;
  double v41;
  pthread_mutex_t *v42;
  double v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  int v48;
  double v49;
  __int16 v50;
  double v51;
  __int16 v52;
  double v53;
  __int16 v54;
  double v55;
  __int16 v56;
  double v57;
  __int16 v58;
  double v59;
  __int16 v60;
  double v61;
  __int16 v62;
  double v63;
  __int16 v64;
  double v65;
  __int16 v66;
  int v67;
  __int16 v68;
  double v69;
  __int16 v70;
  int v71;
  __int16 v72;
  int v73;
  __int16 v74;
  int v75;
  __int16 v76;
  double v77;
  uint8_t buf[4];
  int v79;
  __int16 v80;
  double v81;
  __int16 v82;
  double v83;
  __int16 v84;
  double v85;
  __int16 v86;
  double v87;
  __int16 v88;
  double v89;
  __int16 v90;
  double v91;
  __int16 v92;
  double v93;
  __int16 v94;
  double v95;
  __int16 v96;
  int v97;
  __int16 v98;
  double v99;
  __int16 v100;
  int v101;
  __int16 v102;
  int v103;
  __int16 v104;
  int v105;
  __int16 v106;
  double v107;

  v4 = a1 + 176;
  *(_QWORD *)&v41 = a1 + 176;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 176) + 16))(a1 + 176);
  LOWORD(v43) = 256;
  *(_BYTE *)(v4 + 417) = *(_DWORD *)a2;
  *(_BYTE *)(v4 + 418) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(v4 + 424) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(v4 + 432) = *(_DWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 440) = *(_OWORD *)(a2 + 20);
  *(_DWORD *)(v4 + 456) = *(_DWORD *)(a2 + 36);
  *(_BYTE *)(v4 + 419) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(v4 + 436) = *(_DWORD *)(a2 + 44);
  *(_BYTE *)(v4 + 420) = *(_BYTE *)(a2 + 48);
  *(_DWORD *)(v4 + 468) = *(_DWORD *)(a2 + 52);
  *(_BYTE *)(v4 + 421) = *(_BYTE *)(a2 + 56) | (2 * *(_BYTE *)(a2 + 57)) | (4 * *(_BYTE *)(a2 + 58));
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_10219AC68);
  v5 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
  {
    v6 = *(unsigned __int8 *)(a1 + 593);
    v7 = *(float *)(a1 + 600);
    v8 = *(float *)(a1 + 604);
    v9 = *(float *)(a1 + 608);
    v10 = *(float *)(a1 + 616);
    v11 = *(float *)(a1 + 620);
    v12 = *(float *)(a1 + 624);
    v13 = *(float *)(a1 + 628);
    v14 = *(float *)(a1 + 632);
    v15 = *(unsigned __int8 *)(a1 + 595);
    v16 = *(float *)(a1 + 612);
    v17 = *(unsigned __int8 *)(a1 + 596);
    v18 = *(unsigned __int8 *)(a1 + 594);
    v19 = *(unsigned __int8 *)(a1 + 597);
    v20 = *(float *)(a1 + 644);
    *(_DWORD *)buf = 67112704;
    v79 = v6;
    v80 = 2048;
    v81 = v7;
    v82 = 2048;
    v83 = v8;
    v84 = 2048;
    v85 = v9;
    v86 = 2048;
    v87 = v10;
    v88 = 2048;
    v89 = v11;
    v90 = 2048;
    v91 = v12;
    v92 = 2048;
    v93 = v13;
    v94 = 2048;
    v95 = v14;
    v96 = 1024;
    v97 = v15;
    v98 = 2048;
    v99 = v16;
    v100 = 1024;
    v101 = v17;
    v102 = 1024;
    v103 = v18;
    v104 = 1024;
    v105 = v19;
    v106 = 2048;
    v107 = v20;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Sending user info,fGender,%d,fHeightM,%f,fWeightKG,%f,fVo2Max,%f,fAge,%f,HRMin,%f,HRMax,%f,fHROnset,%f,fPal,%f,fCondition,%d,fRunVo2Max,%f,fBetaBlockerUse,%d,fBiologicalSex,%d,fIsBodyMetricSet,%d ,fAdaptiveExerciseMinuteThreshold,%f", buf, 0x84u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10219AC68);
    v22 = *(unsigned __int8 *)(a1 + 593);
    v23 = *(float *)(a1 + 600);
    v24 = *(float *)(a1 + 604);
    v25 = *(float *)(a1 + 608);
    v26 = *(float *)(a1 + 616);
    v27 = *(float *)(a1 + 620);
    v28 = *(float *)(a1 + 624);
    v29 = *(float *)(a1 + 628);
    v30 = *(float *)(a1 + 632);
    v31 = *(unsigned __int8 *)(a1 + 595);
    v32 = *(float *)(a1 + 612);
    v33 = *(unsigned __int8 *)(a1 + 596);
    v34 = *(unsigned __int8 *)(a1 + 594);
    v35 = *(unsigned __int8 *)(a1 + 597);
    v36 = *(float *)(a1 + 644);
    LODWORD(v49) = 67112704;
    HIDWORD(v49) = v22;
    v50 = 2048;
    v51 = v23;
    v52 = 2048;
    v53 = v24;
    v54 = 2048;
    v55 = v25;
    v56 = 2048;
    v57 = v26;
    v58 = 2048;
    v59 = v27;
    v60 = 2048;
    v61 = v28;
    v62 = 2048;
    v63 = v29;
    v64 = 2048;
    v65 = v30;
    v66 = 1024;
    v67 = v31;
    v68 = 2048;
    v69 = v32;
    v70 = 1024;
    v71 = v33;
    v72 = 1024;
    v73 = v34;
    v74 = 1024;
    v75 = v35;
    v76 = 2048;
    v77 = v36;
    LODWORD(v39) = 132;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Sending user info,fGender,%d,fHeightM,%f,fWeightKG,%f,fVo2Max,%f,fAge,%f,HRMin,%f,HRMax,%f,fHROnset,%f,fPal,%f,fCondition,%d,fRunVo2Max,%f,fBetaBlockerUse,%d,fBiologicalSex,%d,fIsBodyMetricSet,%d ,fAdaptiveExerciseMinuteThreshold,%f", &v49, v39, v40, v41, *(double *)&v42, v43, *(double *)&v44, *((double *)&v44 + 1), *(double *)&v45, DWORD2(v45),
      *(double *)&v46,
      DWORD2(v46),
      v47,
      v48,
      v49);
    v38 = (uint8_t *)v37;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::setUserInfo(const CLBodyMetrics &)", "%s\n", v37);
    if (v38 != buf)
      free(v38);
  }
  v21 = *(_OWORD *)(a1 + 608);
  v44 = *(_OWORD *)(a1 + 592);
  v45 = v21;
  v46 = *(_OWORD *)(a1 + 624);
  v47 = *(_QWORD *)(a1 + 640);
  if (BYTE1(v43))
  {
    if (LOBYTE(v43))
      pthread_mutex_unlock(v42);
    else
      (*(void (**)(double))(**(_QWORD **)&v41 + 24))(COERCE_DOUBLE(*(_QWORD *)&v41));
  }
  sub_101035EE4(a1 + 192, &v44, 0);
}

void sub_10102ECA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10102ECD4(uint64_t a1, uint64_t a2)
{
  sub_10102E858(a1 - 56, a2);
}

void sub_10102ECDC(uint64_t a1, _QWORD *a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_10219AC68);
  v4 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Sending user info + walk stride length step cadence pair", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10219AC68);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Sending user info + walk stride length step cadence pair", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::setUserStrideLengthStepCadencePairWalk(const CLStrideLengthStepCadencePair &)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 176) + 16))(a1 + 176);
  *(_QWORD *)(a1 + 636) = *a2;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 176) + 24))(a1 + 176);
  if (*(_BYTE *)(a1 + 283))
    sub_101035EE4(a1 + 192, (__int128 *)(a1 + 592), 0);
}

void sub_10102EEB8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  _Unwind_Resume(a1);
}

void sub_10102EEC4(uint64_t a1, _QWORD *a2)
{
  sub_10102ECDC(a1 - 56, a2);
}

void sub_10102EECC(uint64_t a1, unsigned int *a2)
{
  unsigned int v4;
  NSObject *v5;
  __n128 v6;
  int isTypeInVehicle;
  unsigned int v8;
  __n128 v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  _DWORD v16[2];
  __int16 v17;
  unsigned int v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  unsigned int v22;

  BYTE5(v15) = 28;
  v4 = a2[4];
  BYTE6(v15) = a2[3];
  HIBYTE(v15) = sub_100928F38(v4);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_10219AC68);
  v5 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
  {
    isTypeInVehicle = CLMotionActivity::isTypeInVehicle(a2[2], v6);
    v8 = a2[3];
    *(_DWORD *)buf = 67240448;
    v20 = isTypeInVehicle;
    v21 = 1026;
    v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Sending isVehicular %{public}d, vehicularConfidence %{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10219AC68);
    v10 = qword_10229FC78;
    v11 = CLMotionActivity::isTypeInVehicle(a2[2], v9);
    v12 = a2[3];
    v16[0] = 67240448;
    v16[1] = v11;
    v17 = 1026;
    v18 = v12;
    LODWORD(v15) = 14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 0, "Sending isVehicular %{public}d, vehicularConfidence %{public}d", v16, v15);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::setVehicularData(const CLMotionStateUpdate &)", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  sub_101036084(a1 + 192, (__int16 *)((char *)&v15 + 5), 0);
}

void sub_10102F0D4(uint64_t a1, unsigned int *a2)
{
  sub_10102EECC(a1 - 56, a2);
}

BOOL sub_10102F0DC(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  int v8;

  v4 = a1 + 176;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 176) + 16))(a1 + 176);
  if (*(_BYTE *)(v4 + 107))
  {
    v5 = *(_OWORD *)(a1 + 284);
    v6 = *(_OWORD *)(a1 + 300);
    v7 = *(_OWORD *)(a1 + 316);
    *(_OWORD *)((char *)a2 + 44) = *(_OWORD *)(a1 + 328);
    a2[1] = v6;
    a2[2] = v7;
    *a2 = v5;
  }
  else
  {
    *a2 = xmmword_101C3B2BC;
    a2[1] = unk_101C3B2CC;
    a2[2] = xmmword_101C3B2DC;
    *(_OWORD *)((char *)a2 + 44) = *(__int128 *)((char *)&xmmword_101C3B2DC + 12);
  }
  v8 = *(unsigned __int8 *)(a1 + 283);
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 176) + 24))(v4);
  return v8 != 0;
}

BOOL sub_10102F180(uint64_t a1, _OWORD *a2)
{
  return sub_10102F0DC(a1 - 56, a2);
}

void sub_10102F188(uint64_t a1, char a2, int a3)
{
  uint64_t v6;
  _QWORD v7[5];
  int v8;
  char v9;

  v6 = sub_100127B9C();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10102F200;
  v7[3] = &unk_10219AB00;
  v7[4] = a1;
  v9 = a2;
  v8 = a3;
  sub_1000A57FC(v6, (uint64_t)v7);
}

void sub_10102F200(uint64_t a1)
{
  uint64_t v2;
  int v3;
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  _DWORD v11[2];
  __int16 v12;
  int v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  int v17;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(unsigned __int8 *)(a1 + 44);
  *(_BYTE *)(v2 + 861) = *(_BYTE *)(a1 + 44) != 0;
  if (v3 || *(unsigned __int8 *)(v2 + 862) - 17 > 1 || sub_1009BB4D4(v2, 7) <= 0)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10219AC68);
    v4 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(unsigned __int8 *)(a1 + 44);
      v6 = *(_DWORD *)(a1 + 40);
      *(_DWORD *)buf = 67109376;
      v15 = v5;
      v16 = 1024;
      v17 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "MotionStateObserver, Sending down ActivityOverride,session,%d,hkActivityType,%d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10219AC68);
      v7 = *(unsigned __int8 *)(a1 + 44);
      v8 = *(_DWORD *)(a1 + 40);
      v11[0] = 67109376;
      v11[1] = v7;
      v12 = 1024;
      v13 = v8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "MotionStateObserver, Sending down ActivityOverride,session,%d,hkActivityType,%d", v11, 14);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::setActivityOverride(const CMMotionContext::ActivitySession, const CMMotionContext::CMHKWorkoutActivityType)_block_invoke", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    sub_101026444(v2, *(unsigned __int8 *)(a1 + 44), *(_DWORD *)(a1 + 40));
  }
}

